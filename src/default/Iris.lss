
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000cd00  0000ce00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000ce20  2**5
                  CONTENTS, READONLY
  2 .text         0000cd00  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b03  00800510  00800510  0000ce10  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000d220  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000d928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000dc19  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000688  00000000  00000000  0000dc30  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009191  00000000  00000000  0000e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016a1  00000000  00000000  00017449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022a1  00000000  00000000  00018aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000162c  00000000  00000000  0001ad8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001d0c  00000000  00000000  0001c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007aa3  00000000  00000000  0001e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000808  00000000  00000000  00025b68  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 31 	jmp	0x6300	; 0x6300 <__ctors_end>
       4:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
       8:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
       c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      10:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      14:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      18:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      1c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      20:	0c 94 61 37 	jmp	0x6ec2	; 0x6ec2 <__vector_8>
      24:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      28:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      2c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      30:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      34:	0c 94 2d 35 	jmp	0x6a5a	; 0x6a5a <__vector_13>
      38:	0c 94 6d 35 	jmp	0x6ada	; 0x6ada <__vector_14>
      3c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      40:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      44:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      48:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      4c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      50:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      54:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      58:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      5c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      60:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      64:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      68:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      6c:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__bad_interrupt>
      70:	01 4c       	sbci	r16, 0xC1	; 193
      72:	01 4c       	sbci	r16, 0xC1	; 193
      74:	01 4c       	sbci	r16, 0xC1	; 193
      76:	01 4c       	sbci	r16, 0xC1	; 193
      78:	ff 4b       	sbci	r31, 0xBF	; 191
      7a:	ff 4b       	sbci	r31, 0xBF	; 191
      7c:	ff 4b       	sbci	r31, 0xBF	; 191
      7e:	ff 4b       	sbci	r31, 0xBF	; 191
      80:	01 4c       	sbci	r16, 0xC1	; 193
      82:	01 4c       	sbci	r16, 0xC1	; 193
      84:	ff 4b       	sbci	r31, 0xBF	; 191
      86:	01 4c       	sbci	r16, 0xC1	; 193
      88:	01 4c       	sbci	r16, 0xC1	; 193
      8a:	01 4c       	sbci	r16, 0xC1	; 193
      8c:	01 4c       	sbci	r16, 0xC1	; 193
      8e:	01 4c       	sbci	r16, 0xC1	; 193
      90:	ff 4b       	sbci	r31, 0xBF	; 191
      92:	01 4c       	sbci	r16, 0xC1	; 193
      94:	01 4c       	sbci	r16, 0xC1	; 193
      96:	01 4c       	sbci	r16, 0xC1	; 193
      98:	ff 4b       	sbci	r31, 0xBF	; 191
      9a:	01 4c       	sbci	r16, 0xC1	; 193
      9c:	01 4c       	sbci	r16, 0xC1	; 193
      9e:	01 4c       	sbci	r16, 0xC1	; 193
      a0:	01 4c       	sbci	r16, 0xC1	; 193
      a2:	2a 59       	subi	r18, 0x9A	; 154
      a4:	39 59       	subi	r19, 0x99	; 153
      a6:	2d 59       	subi	r18, 0x9D	; 157
      a8:	39 59       	subi	r19, 0x99	; 153
      aa:	30 59       	subi	r19, 0x90	; 144
      ac:	39 59       	subi	r19, 0x99	; 153
      ae:	33 59       	subi	r19, 0x93	; 147
      b0:	39 59       	subi	r19, 0x99	; 153
      b2:	36 59       	subi	r19, 0x96	; 150
      b4:	39 59       	subi	r19, 0x99	; 153

000000b6 <__trampolines_end>:
      b6:	81 00       	.word	0x0081	; ????
      b8:	45 00       	.word	0x0045	; ????
      ba:	27 ff       	sbrs	r18, 7
      bc:	24 ff       	sbrs	r18, 4
      be:	2a 90       	ld	r2, -Y
      c0:	2b 1c       	adc	r2, r11
      c2:	21 0c       	add	r2, r1
      c4:	22 fb       	bst	r18, 2
      c6:	85 00       	.word	0x0085	; ????
      c8:	84 00       	.word	0x0084	; ????
      ca:	89 03       	fmulsu	r16, r17
      cc:	88 8d       	ldd	r24, Y+24	; 0x18
      ce:	81 09       	sbc	r24, r1
      d0:	6f 02       	muls	r22, r31
      d2:	44 42       	sbci	r20, 0x24	; 36
      d4:	47 00       	.word	0x0047	; ????
      d6:	45 01       	movw	r8, r10
      d8:	b0 83       	st	Z, r27
      da:	b3 00       	.word	0x00b3	; ????
      dc:	b1 01       	movw	r22, r2
      de:	25 11       	cpse	r18, r5
      e0:	8a 4f       	sbci	r24, 0xFA	; 250
      e2:	8b 03       	fmulsu	r16, r19

000000e4 <eeprom_format_table>:
      e4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000104 <patchCommands>:
     104:	0a 39 0d 39 69 39 6d 39 74 39 15 39 1a 39 1f 39     .9.9i9m9t9.9.9.9
     114:	7c 39 22 39 25 39 28 39 63 39 66 39 8c 39           |9"9%9(9c9f9.9

00000122 <fader>:
     122:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000012e <map_uzeboxlogo2>:
     12e:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000013f <map_uzeboxlogo>:
     13f:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     14f:	00 0e 0f 10 11 12                                   ......

00000155 <logo_tileset>:
	...
     1b1:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     1c1:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     1d1:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1e1:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1f1:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     201:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     211:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     221:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     231:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     241:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     251:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     261:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     271:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     281:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     299:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     2a9:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     2b9:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     2c9:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2d9:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2e9:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2f9:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     309:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     319:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     329:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     339:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     349:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     359:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     369:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     379:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     389:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     399:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     3a9:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3d5:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3e5:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3f5:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     405:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     415:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     425:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     435:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     445:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     455:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     465:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     475:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     485:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     495:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     4a5:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4dd:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4ed:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4fd:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     50d:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     51d:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     52d:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     53d:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     54d:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     55d:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     56d:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     57d:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     58d:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     59d:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     5ad:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     5bd:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     5cd:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5dd:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5ed:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5fd:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     60d:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     631:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     641:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     651:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     661:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     671:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     681:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     691:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     6a1:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     6b1:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     6c1:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     6d1:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6e1:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6f1:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     701:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     719:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     729:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     739:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     749:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     759:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     769:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     779:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     789:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     799:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     7a9:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     7b9:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     7c9:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7d9:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7e9:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7f9:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     809:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     819:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     829:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     855:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     865:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     875:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     885:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     895:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     8a5:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     8b5:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     8c5:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8d5:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8e5:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8f5:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     905:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     915:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     925:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000955 <logoInitPatches>:
     955:	00 00 00 5e 09 00 00 00 00                          ...^.....

0000095e <initPatch>:
     95e:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     96e:	0a 1e 32 05 00 00 ff                                ..2....

00000975 <strTwist>:
     975:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     985:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     995:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     9a5:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     9b5:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     9c5:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9d5:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9e5:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009f6 <strReveal4>:
     9f6:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     a06:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     a16:	00 23 00                                            .#.

00000a19 <strReveal3>:
     a19:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     a29:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a34 <strReveal2>:
     a34:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a44:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a4d <strReveal1>:
     a4d:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a5d:	4e 54 00 23 00                                      NT.#.

00000a62 <strReveal0>:
     a62:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a72:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a7f <strIntro>:
     a7f:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a8f:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a9f:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     aaf:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     abf:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     acf:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     adf:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     aef:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     aff:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     b0f:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     b1f:	58 59 00 23 00                                      XY.#.

00000b24 <default_scores>:
     b24:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b34:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b42 <strTally>:
     b42:	54 41 4c 4c 59 20 00                                TALLY .

00000b49 <strGameOver>:
     b49:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b53 <strLevelBonus>:
     b53:	42 4f 4e 55 53 00                                   BONUS.

00000b59 <strLevelClear>:
     b59:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b65 <strPaused>:
     b65:	50 41 55 53 45 00                                   PAUSE.

00000b6b <strExitGame>:
     b6b:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b77 <strMainMenu>:
     b77:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b83 <strTime>:
     b83:	54 49 4d 45 20 00                                   TIME .

00000b89 <strLives>:
     b89:	4c 49 56 45 53 20 00                                LIVES .

00000b90 <strShield>:
     b90:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b98 <strScore>:
     b98:	53 43 4f 52 45 20 00                                SCORE .

00000b9f <strSelectHandle>:
	...

00000ba0 <strHighScores>:
     ba0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000bac <str1Player>:
     bac:	53 54 41 52 54 00                                   START.

00000bb2 <strMusic>:
     bb2:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     bc2:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000bca <strCopyright>:
     bca:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     bda:	4f 4f 4b 53 00                                      OOKS.

00000bdf <spacesong>:
     bdf:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bef:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bff:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     c0f:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     c1f:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     c2f:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c3f:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c4f:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c5f:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c6f:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c7f:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c8f:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c9f:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     caf:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     cbf:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ccf:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cdf:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cef:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     cff:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     d0f:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     d1f:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     d2f:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d3f:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d4f:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d5f:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d6f:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d7f:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d8f:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d9f:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     daf:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     dbf:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     dcf:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     ddf:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     def:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dff:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     e0f:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     e1f:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     e2f:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e3f:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e4f:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e5f:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e6f:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e7f:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e8f:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e9f:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     eaf:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ebf:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     ecf:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     edf:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     eef:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     eff:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     f0f:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     f1f:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     f2f:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f3f:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f4f:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f5f:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f6f:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f7f:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f8f:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f9f:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     faf:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     fbf:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     fcf:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fdf:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fef:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fff:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
    100f:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
    101f:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
    102f:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    103f:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    104f:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    105f:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    106f:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    107f:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    108f:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    109f:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    10af:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    10bf:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    10cf:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10df:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10ef:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10ff:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    110f:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    111f:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    112f:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    113f:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    114f:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    115f:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    116f:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    117f:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    118f:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    119f:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    11af:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    11bf:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    11cf:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11df:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11ef:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11ff:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    120f:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    121f:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    122f:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    123f:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    124f:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    125f:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    126f:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000127f <planetsong>:
    127f:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    128f:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    129f:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    12af:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    12bf:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    12cf:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12df:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12ef:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12ff:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    130f:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    131f:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    132f:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    133f:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    134f:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    135f:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    136f:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    137f:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    138f:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    139f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13af:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    13bf:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    13cf:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13df:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13ef:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13ff:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    140f:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    141f:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    142f:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    143f:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    144f:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    145f:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    146f:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    147f:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    148f:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149f:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    14af:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    14bf:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    14cf:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14df:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14ef:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14ff:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    150f:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    151f:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    152f:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    153f:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    154f:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    155f:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    156f:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    157f:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    158f:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    159f:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    15af:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    15bf:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    15cf:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15df:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15ef:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15ff:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    160f:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    161f:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    162f:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    163f:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    164f:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    165f:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    166f:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    167f:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    168f:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    169f:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    16af:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    16bf:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    16cf:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16df:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16ef:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16ff:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    170f:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    171f:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    172f:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    173f:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    174f:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    175f:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    176f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177f:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    178f:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    179f:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    17af:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    17bf:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    17cf:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17df:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17ef:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17ff:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    180f:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    181f:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    182f:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    183f:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    184f:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    185f:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    186f:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    187f:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    188f:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    189f:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    18af:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    18bf:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    18cf:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18df:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18ef:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18ff:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    190f:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    191f:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    192f:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    193f:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    194f:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    195f:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    196f:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    197f:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    198f:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    199f:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    19af:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    19bf:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    19cf:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19df:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19ef:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19ff:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1a0f:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1a1f:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1a2f:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a3f:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a4f:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a5f:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a6f:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a7f:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a8f:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a9f:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1aaf:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1abf:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1acf:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1adf:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1aef:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1aff:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1b0f:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1b1f:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1b2f:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b3f:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b4f:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b5f:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b6f:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b7f:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b8f:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b9f:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1baf:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1bbf:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1bcf:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bdf:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bef:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bff:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1c0f:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1c1f:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1c2f:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c3f:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c4f:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c5f:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c6f:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c7f:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c8f:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c9f:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1caf:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1cbf:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ccf:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cdf:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cef:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1cff:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1d0f:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1d1f:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1d2f:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d3f:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d4f:	2f 00                                               /.

00001d51 <my_patches>:
    1d51:	00 00 00 c8 1e 00 00 00 00 00 00 00 c8 1e 00 00     ................
    1d61:	00 00 00 00 00 b7 1e 00 00 00 00 00 00 00 61 1e     ..............a.
    1d71:	00 00 00 00 00 00 00 b7 1e 00 00 00 00 00 00 00     ................
    1d81:	90 1d 00 00 00 00 00 00 00 90 1d 00 00 00 00        ...............

00001d90 <explode>:
    1d90:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1da0:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1db0:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1dc0:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dd0:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1de0:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1df0:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1e00:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1e10:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1e20:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1e30:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e40:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e50:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e60:	ff                                                  .

00001e61 <pshoot>:
    1e61:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e71:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e81:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e91:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1ea1:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1eb1:	00 01 05 00 00 ff                                   ......

00001eb7 <navigate>:
    1eb7:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1ec7:	ff                                                  .

00001ec8 <instrument>:
    1ec8:	00 02 04 00 00 dd 00 ff                             ........

00001ed0 <sprites_data>:
    1ed0:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ee0:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ef0:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1f00:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1f10:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1f20:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1f30:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f40:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f60:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f70:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f80:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f90:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1fa0:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1fb0:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1fc0:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1fd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe0:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1ff0:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2000:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2010:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2020:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2030:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2040:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    2050:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    2060:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    2070:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2080:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2090:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    20a0:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    20b0:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    20c0:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d0:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20e0:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20f0:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2100:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2110:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2120:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    2130:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    2140:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2150:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    2160:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    2170:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    2180:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    2190:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21d0:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21e0:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21f0:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2200:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2210:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2220:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2230:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2240:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2250:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2260:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2270:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2280:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2290:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    22a0:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    22b0:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    22c0:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    22d0:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22e0:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22f0:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2300:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2310:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2320:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2330:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2340:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2350:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2360:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2370:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2380:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2390:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a0:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    23b0:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    23c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d0:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23e0:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23f0:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2400:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2410:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2420:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2430:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2440:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2450:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2460:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2470:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2480:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2490:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    24a0:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    24b0:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    24c0:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    24d0:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24e0:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24f0:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2500:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2510:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2520:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2530:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2540:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2550:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2560:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2570:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2580:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2590:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    25a0:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    25b0:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    25c0:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    25d0:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25e0:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25f0:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2600:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2610:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2620:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2630:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2640:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2650:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    2660:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    2670:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    2680:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    2690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    26a0:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    26b0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    26c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26d0:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26e0:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26f0:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2700:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2710:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2720:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2730:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2740:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2750:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2760:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2770:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2780:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2790:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27a0:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    27b0:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    27c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27d0:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27e0:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27f0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2800:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2810:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2820:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2830:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2840:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2850:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2860:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2870:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2880:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2890:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28b0:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    28c0:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    28d0:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28e0:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2900:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2910:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    2920:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    2930:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    2940:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2950:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2960:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2970:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2980:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2990:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    29a0:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    29b0:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    29c0:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    29d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29e0:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29f0:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2a00:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2a10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a20:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2a30:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a40:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a60:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a70:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a80:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a90:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2aa0:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2ab0:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2ac0:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2ad0:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2ae0:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2af0:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2b00:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2b10:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2b20:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2b30:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b40:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b50:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b60:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b70:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b90:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2ba0:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2bb0:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2bc0:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2bd0:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2be0:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bf0:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2c00:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c10:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2c20:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2c30:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c40:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c60:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c70:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c80:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2ca0:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2cb0:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2cc0:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2cd0:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2ce0:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cf0:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2d00:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2d10:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2d20:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2d30:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d40:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d50:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d60:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d70:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d80:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2d90:	fe fe fe fe fe fe fe 9c fe fe fe fe fe fe 9c 9c     ................
    2da0:	fe fe fe fe fe fe 9c 9c fe fe fe fe 9a 9a 9a 9c     ................
    2db0:	fe fe fe 9a 9c 9c 9c 9a fe fe 9a 9c 9c 9c 9c 9a     ................
    2dc0:	fe 9a 9c 9c 9c 9a 9a 9c 9a 9c 9c 9a 9a 9c 9c 9c     ................
    2dd0:	9c 9c 9c fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    2de0:	9c 07 77 27 fe fe fe fe 9c 9c 27 07 fe fe fe fe     ..w'......'.....
    2df0:	9a 9c 9c 07 fe fe fe fe 9c 9a 9a 9c 9a fe fe fe     ................
    2e00:	9c ad 9c 9c 9c 9a fe fe ad ff ad 9c 9c 9a fe fe     ................
    2e10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 9c     ................
    2e20:	fe fe fe fe fe fe 9c 9c fe fe fe fe fe fe 9c 9c     ................
    2e30:	fe fe fe fe 9a 9a 9a 9c fe fe fe 9a 9c 9c 9c 9a     ................
    2e40:	fe fe 9a 9c 9c 9c 9c 9a fe 9a 9c 9c 9c 9a 9a 9c     ................
    2e50:	fe fe fe fe fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    2e60:	07 07 27 07 fe fe fe fe 9c 07 77 27 fe fe fe fe     ..'.......w'....
    2e70:	9c 9c 27 07 fe fe fe fe 9a 9c 9c 07 fe fe fe fe     ..'.............
    2e80:	9c 9a 9a 9c 9a fe fe fe 9c ad 9c 9c 9c 9a fe fe     ................
    2e90:	9a 9c 9c 9a fe 9a 9c 9c fe 9a 9c 9a fe 9a 9c 9c     ................
    2ea0:	fe 9a 9c 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    2eb0:	fe fe 9a 9c ad ad ad ad fe fe fe 9a 00 ad 9c 9c     ................
    2ec0:	fe fe fe fe 00 00 9a 9c fe fe fe fe 00 00 9a 9c     ................
    2ed0:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    2ee0:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    2ef0:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    2f00:	9c 9c 9c 9a fe fe fe fe 9c 9c 9c 9a fe fe fe fe     ................
    2f10:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    2f20:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    2f30:	ad ad ad ad ad 00 00 00 9c 9c 9c 9a fe fe fe fe     ................
    2f40:	9c 9c 9c 9a fe fe fe fe 9c 9c 9a fe fe fe fe fe     ................
    2f50:	9a 9c 9c 9a 9a 9c 9c 9c 9a 9c 9c 9a fe 9a 9c 9c     ................
    2f60:	fe 9a 9c 9a fe 9a 9c 9c fe 9a 9c 9c ad ad ad ad     ................
    2f70:	fe fe 9a 9c ad ad ad ad fe fe 9a 9c ad ad ad ad     ................
    2f80:	fe fe fe 9a 00 ad 9c 9c fe fe fe fe 00 00 9a 9c     ................
    2f90:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    2fa0:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    2fb0:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    2fc0:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    2fd0:	9c ad 9c 9a 9c 9a fe fe 9c 9c 9c 9a 9c 9c 9a fe     ................
    2fe0:	ad ad ad ad ad 9c 9a fe ad ad ad ad ad ad 00 ad     ................
    2ff0:	ad ad ad ad ad 00 00 00 9c 9c 9c 9c fe fe fe fe     ................
    3000:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3010:	ad ff ad 9c 9c 9a fe fe 9c ad 9c 9a 9c 9a fe fe     ................
    3020:	9c 9c 9c 9a 9c 9c 9a fe ad ad ad ad ad 9c 9a fe     ................
    3030:	ad ad ad ad ad ad 00 ad ad ad ad ad ad 00 00 00     ................
    3040:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c 9c 9c fe fe fe     ................
    3050:	fe fe fe fe fe fe 9a 9c fe fe fe fe fe fe 9a 9c     ................
    3060:	fe fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c     ................
    3070:	fe fe fe fe 9a 9c 9c fe fe fe fe fe 9a 9c 9c fe     ................
    3080:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    3090:	9c fe 9a 9a fe fe fe fe 9c fe 9a 9a 9a fe fe fe     ................
    30a0:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    30b0:	fe fe 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    30c0:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    30d0:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    30e0:	fe fe fe fe fe 9a 9a 9c fe fe fe fe 9a 9c 9c 9c     ................
    30f0:	fe fe fe 00 9c 9c 9c 9c fe fe fe 00 9c 9c 9c fe     ................
    3100:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3110:	9c 9c 9c fe fe fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    3120:	9c 9c 9c 9c fe fe fe fe 9c 9c 9c fe fe fe fe fe     ................
    3130:	9c 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe fe fe     ................
    3140:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3150:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    3160:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 9a fe     ................
    3170:	00 00 9a 9a 9a 9a 9a fe 00 00 9a 9a 9a 9a fe fe     ................
    3180:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3190:	9c 9c 9c fe fe fe fe fe fe 9a 9c 9c fe fe fe fe     ................
    31a0:	fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe     ................
    31b0:	fe fe 9a 9c 9c 9c fe fe fe fe fe 9a 9c 9c fe fe     ................
    31c0:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    31d0:	fe fe fe fe fe fe fe 9a fe fe fe fe fe fe fe 9a     ................
    31e0:	fe fe fe fe fe 9a 9a 9a fe fe fe fe 9a 9a 9a 9a     ................
    31f0:	fe fe fe 00 9a 9a 9a 9a fe fe fe 00 9a 9a 9a fe     ................
    3200:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3210:	9c 9c 9c fe fe fe fe fe 9a 9c 9c 9a fe fe fe fe     ................
    3220:	9a 9c 9c 9a fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    3230:	9a 9c 9c fe fe fe fe fe 9a 9c 9c fe fe fe fe fe     ................
    3240:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3250:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9a 9a     ................
    3260:	fe fe fe fe 9a 9a 9a 9a 00 00 9a 9a 9a 9a 00 00     ................
    3270:	00 00 9a 9a 9a 9a 00 00 00 00 9a 9a 9a 9a 00 00     ................
    3280:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    3290:	9c 9c 9a 9c 9c fe fe fe fe fe 9a 9c 9c 9c fe fe     ................
    32a0:	fe fe 9a 9c 9c 9c fe fe 9a 9a 9a 9c 9c fe fe fe     ................
    32b0:	9c 9c 9c 9c 9c fe fe fe 9c 9c 9c 9c fe fe fe fe     ................
    32c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    32d0:	fe fe fe fe 00 00 9a 9c fe fe fe fe 9a 9a 9c 9c     ................
    32e0:	fe fe fe fe 9a 9c 9c 9c 00 00 9a 9a 9a 9c 9c fe     ................
    32f0:	00 00 9c 9c 9c 9c 9c fe 00 00 9c 9c 9c 9c fe fe     ................
    3300:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3310:	9c 9c 9a fe fe fe fe fe fe 9a 9a 9a fe fe fe fe     ................
    3320:	fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe fe     ................
    3330:	fe fe 9a 9a 9a 9a fe fe fe fe fe 9a 9a 9a fe fe     ................
    3340:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003350 <map_enemy_spider_1>:
    3350:	01 01 29                                            ..)

00003353 <map_enemy_spider_0>:
    3353:	01 01 1e                                            ...

00003356 <map_enemy_shark>:
    3356:	01 01 05                                            ...

00003359 <map_enemy_shot>:
    3359:	01 01 13                                            ...

0000335c <map_ahero_jump>:
    335c:	02 03 3d 3e 42 45 4e 4f                             ..=>BENO

00003364 <map_ahero_step_3>:
    3364:	02 03 3d 3e 42 43 50 51                             ..=>BCPQ

0000336c <map_ahero_step_2>:
    336c:	02 03 3b 3c 3f 44 4c 4d                             ..;<?DLM

00003374 <map_ahero_step_1>:
    3374:	02 03 3d 3e 42 43 4a 4b                             ..=>BCJK

0000337c <map_ahero_step_0>:
    337c:	02 03 3b 3c 3f 41 48 49                             ..;<?AHI

00003384 <map_ahero_idle>:
    3384:	02 03 3b 3c 3f 40 46 47                             ..;<?@FG

0000338c <map_hero_shot>:
    338c:	01 01 04                                            ...

0000338f <map_hero_ship_large_1>:
    338f:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00003399 <map_hero_ship_large_0>:
    3399:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

000033a3 <map_hero_ship_1>:
    33a3:	03 01 2a 20 21                                      ..* !

000033a8 <map_hero_ship_0>:
    33a8:	03 01 1f 20 21                                      ... !

000033ad <map_hero_prone>:
    33ad:	03 01 36 37 38                                      ..678

000033b2 <map_hero_jump>:
    33b2:	02 03 02 03 0f 12 1c 1d                             ........

000033ba <map_hero_step_3>:
    33ba:	02 03 02 03 0f 33 34 35                             .....345

000033c2 <map_hero_step_2>:
    33c2:	02 03 00 01 0c 11 1a 1b                             ........

000033ca <map_hero_step_1>:
    33ca:	02 03 02 03 0f 10 18 19                             ........

000033d2 <map_hero_step_0>:
    33d2:	02 03 00 01 0c 0e 16 17                             ........

000033da <map_hero_idle>:
    33da:	02 03 00 01 0c 0d 14 15                             ........

000033e2 <map_emerald_4>:
    33e2:	01 01 0a                                            ...

000033e5 <map_emerald_3>:
    33e5:	01 01 09                                            ...

000033e8 <map_emerald_2>:
    33e8:	01 01 08                                            ...

000033eb <map_emerald_0>:
    33eb:	01 01 07                                            ...

000033ee <map_emerald_1>:
    33ee:	01 01 06                                            ...

000033f1 <map_explosion_2>:
    33f1:	01 01 24                                            ..$

000033f4 <map_explosion_1>:
    33f4:	01 01 23                                            ..#

000033f7 <map_explosion_0>:
    33f7:	01 01 22                                            .."

000033fa <map_particle>:
    33fa:	01 01 25                                            ..%

000033fd <map_up_arrow>:
    33fd:	01 01 28                                            ..(

00003400 <map_down_arrow>:
    3400:	01 01 27                                            ..'

00003403 <map_right_arrow>:
    3403:	01 01 26                                            ..&

00003406 <map_none>:
    3406:	01 01 0b                                            ...

00003409 <tiles_data>:
	...
    3449:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3459:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3469:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3479:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3489:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3499:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    34a9:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    34b9:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    34c9:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    34d9:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    34e9:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    34f9:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3509:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3519:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3529:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3539:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3549:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    3559:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    3569:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    3579:	af af af af af af af af af af af af af af af af     ................
    3589:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3599:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    35a9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    35b9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    35c9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35d9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35e9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35f9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3609:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3619:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3629:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3639:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3649:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3659:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3669:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3679:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3689:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3699:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    36a9:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    36b9:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    36c9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    36d9:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    36e9:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36f9:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3709:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3719:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3729:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3739:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3749:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3759:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3769:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3779:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3789:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3799:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    37a9:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    37b9:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    37c9:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    37d9:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    37e9:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    37f9:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3809:	2b 28 2b 28 2b 28 2b 28 28 2b 28 2b 28 2b 28 2b     +(+(+(+((+(+(+(+
    3819:	28 2b 28 2b 28 2b 28 2b 28 2b 65 6e 65 6e 28 2b     (+(+(+(+(+enen(+
    3829:	28 65 6e 65 6e 65 6e 2b 65 6e 65 6e 65 6e 65 6e     (enenen+enenenen
    3839:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3849:	b5 23 23 b5 b5 23 23 b5 b5 b5 b5 23 23 b5 b5 b5     .##..##....##...
    3859:	b5 06 06 06 06 06 06 b5 06 06 06 06 06 06 06 06     ................
    3869:	b5 06 06 06 06 06 06 b5 b5 b5 06 06 06 06 b5 b5     ................
    3879:	b5 06 06 77 77 06 06 b5 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3889:	23 64 63 62 23 64 63 62 23 64 63 62 23 64 63 62     #dcb#dcb#dcb#dcb
    3899:	23 65 65 65 23 65 65 65 23 65 65 65 23 65 65 65     #eee#eee#eee#eee
    38a9:	23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5     #.#.#.#.#.#.#.#.
    38b9:	23 23 23 b5 23 b5 23 b5 b5 23 23 b5 b5 23 23 b5     ###.#.#..##..##.
    38c9:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    38d9:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    38e9:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    38f9:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3909:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3919:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3929:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3939:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3949:	80 80 80 00 80 80 80 80 80 80 80 00 80 80 80 80     ................
    3959:	80 00 00 00 80 80 80 80 80 00 80 80 80 80 80 80     ................
    3969:	80 00 00 00 80 80 80 80 80 80 80 00 00 00 80 80     ................
    3979:	80 80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80     ................
    3989:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3999:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    39a9:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    39b9:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    39c9:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    39d9:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    39e9:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    39f9:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3a09:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3a19:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3a29:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3a39:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3a49:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3a59:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3a69:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3a79:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3a89:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3a99:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3aa9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3ab9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3ac9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ad9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3b09:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b19:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b29:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3b39:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    3b61:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3b71:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ba1:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3bb1:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3bc9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3bd9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3be9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3bf9:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3c09:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3c19:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3c29:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3c39:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3c49:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3c59:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3c69:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3c79:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3ca9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3cb9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3cc9:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3cd9:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3ce9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3cf9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d09:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d19:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d29:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d39:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3d55:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3d65:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3d75:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3d85:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3d95:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3da5:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3db5:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3dc5:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3dd5:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3de5:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3df5:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3e05:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3e15:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3e25:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3e35:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3e45:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e55:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e65:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e75:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3e85:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3e95:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3ea5:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3eb5:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3ec5:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    3ed5:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    3ee5:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    3ef5:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    3f05:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    3f15:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3f25:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3f35:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3f45:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    3f55:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    3f65:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    3f75:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    3f85:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    3f95:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    3fa5:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    3fb5:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    3fc5:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    3fd5:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    3fe5:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    3ff5:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    4005:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    4015:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    4025:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4035:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    4045:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    4055:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    4065:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    4089:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    4099:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    40a9:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    40b9:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    40c9:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    40d9:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    40e9:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    4111:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4121:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    4131:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4151:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    4161:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    4171:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    4191:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    41a1:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    41b1:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    41d1:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    41e1:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    41f1:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4215:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4225:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4235:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    4251:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    4261:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    4271:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4291:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    42a1:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    42b1:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    42d1:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    42e1:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    42f1:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    4311:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4321:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4331:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    4351:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    4361:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    4371:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    4391:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    43a1:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    43b1:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    43d1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    43e1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    43f1:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4411:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4421:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4431:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4451:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4461:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4471:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4491:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    44a1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    44b1:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    44d1:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    44e1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    44f1:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4511:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4521:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4531:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4551:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4561:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4571:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4591:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    45a1:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    45b1:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    45d5:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    45e5:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    45f5:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4611:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4621:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4631:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4651:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4661:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4671:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4691:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    46a1:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    46b1:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    46d1:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    46e1:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    46f1:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4711:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4721:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4731:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4751:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4761:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4771:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4791:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    47a1:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47b1:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    47d1:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    47e1:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    47f1:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4811:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4821:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4831:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4851:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4861:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4871:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4891:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48a1:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48b1:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    48d1:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    48e1:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    48f1:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4911:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4921:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4931:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4951:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4961:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4971:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4991:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49a1:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    49b1:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    49d1:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    49e1:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    49f1:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4a09:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4a19:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4a29:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4a39:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4a49:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4a59:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a69:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a79:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4a89:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4a99:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4aa9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4ab9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4ac9:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    4ad9:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    4ae9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4af9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b09:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b19:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b29:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b39:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b49:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b59:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b69:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4b79:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4b89:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4b99:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4ba9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bb9:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bc9:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4bd9:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4be9:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4bf9:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c09:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4c19:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4c29:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4c39:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4c49:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4c59:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4c69:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4c79:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4c89:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4c99:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4ca9:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4cb9:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4cc9:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4cd9:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4ce9:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4cf9:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4d09:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4d19:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4d29:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4d39:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4d49:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4d59:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4d69:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4d79:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4d89:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4d99:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4da9:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4db9:	b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6     ................
    4dc9:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4dd9:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4de9:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4df9:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4e09:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4e19:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4e29:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4e39:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4e49:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4e59:	80 80 80 80 80 80 80 80 80 80 80 e3 80 80 80 80     ................
    4e69:	80 80 e3 ff e3 80 80 80 80 80 80 e3 80 80 80 80     ................
    4e79:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4e89:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    4e99:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    4ea9:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    4eb9:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ec9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4ed9:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    4ee9:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    4ef9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f09:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    4f19:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    4f29:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    4f39:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4f49:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4f59:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4f69:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4f79:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4f89:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4f99:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    4fa9:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4fb9:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4fc9:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4fd9:	be be be be be be be be be be be be be be be be     ................
    4fe9:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4ff9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5009:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5019:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5029:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5039:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5049:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5059:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5069:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5079:	77 77 77 77 77 6d 64 65 77 77 77 77 6e 5b 5b 51     wwwwwmdewwwwn[[Q
    5089:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5099:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50a9:	77 77 77 77 77 77 77 77 77 77 77 5b 5b 5b 5b 5b     wwwwwwwwwww[[[[[
    50b9:	1c 25 51 00 00 09 09 09 09 08 09 09 09 09 09 09     .%Q.............
    50c9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50d9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50e9:	6e 52 52 5a 6e 6e 77 77 00 00 00 5a 09 5b 64 77     nRRZnnww...Z.[dw
    50f9:	09 11 09 08 09 09 12 12 09 09 09 09 5b 5b 52 09     ............[[R.
    5109:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5119:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5129:	77 77 77 77 77 77 77 77 77 6d 64 77 77 77 77 77     wwwwwwwwwmdwwwww
    5139:	09 52 12 12 1c 6d 6d 6d 00 00 09 09 0a 5a 5b 09     .R...mmm.....Z[.
    5149:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5159:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5169:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5179:	77 77 77 77 77 77 77 77 5a 5b 5b 6e 77 77 77 77     wwwwwwwwZ[[nwwww
    5189:	77 64 0a 09 09 00 08 00 5a 52 09 08 00 00 00 10     wd......ZR......
    5199:	77 77 59 64 6e 09 6d 25 77 77 77 77 77 77 1c 09     wwYdn.m%wwwwww..
    51a9:	77 77 77 77 77 77 77 64 77 77 77 77 77 77 77 77     wwwwwwwdwwwwwwww
    51b9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    51c9:	00 08 09 5a 09 51 51 50 00 09 09 1b 51 00 7f 1c     ...Z.QQP....Q...
    51d9:	09 51 09 13 6e 00 1c 77 64 09 12 65 1c 00 11 1c     .Q..n..wd..e....
    51e9:	00 6e 77 6d 5b 6e 1c 6e 77 65 65 1c 0a 65 6e 00     .nwm[n.nwee..en.
    51f9:	77 77 77 77 77 12 1c 77 77 77 77 77 77 77 1c 0a     wwwww..wwwwwww..
    5209:	50 09 09 48 51 51 00 09 13 65 77 6d 09 6d 6e 77     P..HQQ...ewm.mnw
    5219:	77 0a 09 00 76 09 12 77 77 09 77 09 1c 64 77 1c     w...v..ww.w..dw.
    5229:	09 13 13 09 01 09 00 77 6e 1c 09 09 00 25 6e 09     .......wn....%n.
    5239:	00 12 00 77 1b 08 1b 7f 09 7f 12 77 09 1c 12 77     ...w.......w...w
    5249:	09 08 09 09 08 09 09 09 13 00 09 09 09 11 5a 09     ..............Z.
    5259:	12 1c 6e 76 13 11 09 08 00 00 1b 77 6e 25 00 77     ..nv.......wn%.w
    5269:	6e 6d 77 77 00 09 09 77 65 77 77 65 77 09 0a 09     nmww...wewwew...
    5279:	77 77 00 52 01 1c 77 7f 7f 00 77 77 77 77 77 77     ww.R..w...wwwwww
    5289:	09 00 09 5b 11 5a 09 5c 11 1b 13 12 5c 13 64 63     ...[.Z.\....\.dc
    5299:	09 5a 00 77 77 77 77 77 7f 13 77 77 77 77 77 77     .Z.wwwww..wwwwww
    52a9:	13 7f 77 77 77 77 77 77 77 77 77 77 77 77 77 77     ..wwwwwwwwwwwwww
    52b9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    52c9:	77 77 77 77 77 77 77 6e 77 77 77 77 77 77 77 77     wwwwwwwnwwwwwwww
    52d9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    52e9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    52f9:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5309:	1c 6d 13 00 77 13 7f 6d 0a 64 00 64 77 13 6e 00     .m..w..m.d.dw.n.
    5319:	77 0a 00 77 7f 00 0a 77 77 7f 00 77 08 6e 77 77     w..w...ww..w.nww
    5329:	77 77 48 00 6e 77 77 77 77 77 65 00 77 77 77 77     wwH.nwwwwwe.wwww
    5339:	77 77 01 01 77 77 77 77 77 0b 00 01 77 77 77 77     ww..wwwww...wwww
    5349:	09 7f 77 77 77 77 77 77 6e 77 77 77 77 77 77 77     ..wwwwwwnwwwwwww
    5359:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5369:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5379:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww

00005389 <map_font>:
    5389:	25 01 00 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 40     %..456789:;<=>?@
    5399:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    53a9:	51 52 53 54 55 56 57                                QRSTUVW

000053b0 <map_atmosphere>:
    53b0:	1c 02 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    53c0:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 32 32     ..............22
    53d0:	32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32     2222222222222222
    53e0:	32 32 32 32 32 32 32 32 32 32                       2222222222

000053ea <map_star_dark>:
    53ea:	01 01 1e                                            ...

000053ed <map_star>:
    53ed:	01 01 1d                                            ...

000053f0 <map_desert_spike_down>:
    53f0:	01 01 18                                            ...

000053f3 <map_desert_spike_up>:
    53f3:	01 01 19                                            ...

000053f6 <map_desert_top>:
    53f6:	01 01 16                                            ...

000053f9 <map_desert_bottom>:
    53f9:	01 01 17                                            ...

000053fc <map_city_spark>:
    53fc:	01 01 15                                            ...

000053ff <map_city_top>:
    53ff:	01 01 14                                            ...

00005402 <map_city_bottom>:
    5402:	01 01 13                                            ...

00005405 <map_jungle_branch>:
    5405:	01 01 12                                            ...

00005408 <map_jungle_flower>:
    5408:	01 01 11                                            ...

0000540b <map_jungle_top>:
    540b:	01 01 10                                            ...

0000540e <map_jungle_bottom>:
    540e:	01 01 0f                                            ...

00005411 <map_fire_lava>:
    5411:	01 01 0e                                            ...

00005414 <map_fire_top>:
    5414:	01 01 0d                                            ...

00005417 <map_fire_bottom>:
    5417:	01 01 0c                                            ...

0000541a <map_icicle_up>:
    541a:	01 01 0a                                            ...

0000541d <map_icicle_down>:
    541d:	01 01 09                                            ...

00005420 <map_ice_bottom>:
    5420:	01 01 04                                            ...

00005423 <map_ice_right>:
    5423:	01 01 03                                            ...

00005426 <map_ice_middle>:
    5426:	01 01 02                                            ...

00005429 <map_ice_left>:
    5429:	01 01 01                                            ...

0000542c <map_dialog>:
    542c:	0f 04 1a 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    543c:	1c 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    544c:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 21     .............. !
    545c:	22 22 22 22 22 22 22 22 22 22 22 22 22 23           """""""""""""#

0000546a <map_canvas>:
    546a:	0f 09 1a 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    547a:	1c 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    548a:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    54a6:	00 20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     . ..............
    54b6:	20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20      .............. 
    54c6:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    54e2:	00 20 21 22 22 22 22 22 22 22 22 22 22 22 22 22     . !"""""""""""""
    54f2:	23                                                  #

000054f3 <map_splash>:
    54f3:	0f 05 24 24 24 00 24 24 24 00 25 26 27 1d 24 24     ..$$$.$$$.%&'.$$
    5503:	24 00 24 00 00 24 1e 00 00 28 29 2a 00 24 00 1d     $.$..$...()*.$..
    5513:	1e 24 00 1d 24 00 00 00 2b 2c 2d 00 24 24 24 00     .$..$...+,-.$$$.
    5523:	24 00 00 24 00 1d 00 2f 30 31 00 00 00 24 24 24     $..$.../01...$$$
    5533:	24 00 24 00 00 00 33 00 1e 00 24 24 24              $.$...3...$$$

00005540 <map_tile_none>:
    5540:	01 01 00                                            ...

00005543 <map_space_mega_tiles>:
	...
    554f:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    5573:	00 00 00 1d 00 1e 00 00 00 00 00 00 00 00 00 1d     ................
    5583:	00 00 1e 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
	...
    559b:	1d 00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    55ab:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 00 00     ................
	...
    55c7:	00 00 00 1d 00 00 00 00 00 00 00 1e 00 00 00 00     ................
	...
    55df:	00 00 1e 00 00 00 00 00 00 00 00 00 00 00 1e 00     ................
	...
    55f7:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    5623:	00 00 00 1e 1d 00 00 00 00 00 00 00 00 00 00 1d     ................
    5633:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    564f:	00 1d 00 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
	...
    5667:	00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5677:	00 00 1d 00 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    5687:	00 1e 00 00 00 00 00 1d 00 00 00 00 00 1d 00 00     ................
    5697:	00 00 00 1e 1e 00 00 00 00 00 00 00 00 00 00 00     ................
    56a7:	00 1e 00 00 00 00 00 00 00 00 00 00 1d 00 00 00     ................
	...
    56c7:	00 00 00 1d 1d 00 00 00 00 00 00 00 00 00 00 00     ................
    56d7:	00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00     ................
	...
    56f3:	00 1d 00 00 00 00 00 00 00 00 00 00 00 1e 00 00     ................
    5703:	00 00 00 1d 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    5713:	00 00 1e 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
    5723:	00 00 00 1e 00 00 00 00 1d 00 00 00 00 00 00 00     ................
	...
    573f:	00 00 1d 00 00 00 00 00 00 00 1e 00 00 1d 00 00     ................
	...
    5757:	00 00 00 1e 00 00 00 00 00 00 00 00 00 00 1d 00     ................
	...
    5783:	00 1e 00 00 00 1d 00 00 00 00 00 00 00 00 00 00     ................
	...
    579f:	00 00 1d 1e 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    57b7:	00 00 00 1d 00 00 00 00 00 1d 00 00                 ............

000057c3 <map_level_space>:
    57c3:	08 05 00 01 02 03 04 05 06 07 08 06 09 0a 0b 06     ................
    57d3:	0c 0d 0e 0f 10 11 12 13 06 14 0a 15 16 17 18 19     ................
    57e3:	1a 1b 08 0d 1c 1d 1e 00 1d 1f                       ..........

000057ed <map_level_mega_tiles>:
    57ed:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    57fd:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 08 06     ................
    580d:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    581d:	06 06 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    582d:	04 04 04 04 04 04 04 04 04 04 04 06 06 06 06 06     ................
    583d:	06 06 06 06 06 06 06 06 06 06 05 05 05 05 05 07     ................
    584d:	07 07 07 07 06 06 06 06 06 06 06 08 06 06 06 06     ................
    585d:	06 06 06 05 05 05 05 05 07 07 07 07 07 07 07 07     ................
    586d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    587d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    588d:	07 07 07 07 07 07 07 07 07 07 02 02 02 02 02 09     ................
    589d:	09 09 09 09 07 07 07 07 07 07 07 07 07 07 07 07     ................
    58ad:	07 07 07 07 07 07 07 07 07 07 07 07 07 02 02 02     ................
    58bd:	02 02 09 09 09 09 09 07 07 07 07 07 07 07 07 07     ................
    58cd:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    58dd:	07 07 58 07 07 07 07 59 5a 5b 07 07 07 07 07 07     ..X....YZ[......
    58ed:	07 02 02 02 07 02 04 04 04 02 04 04 04 04 04 04     ................
    58fd:	04 04 04 07 07 07 07 07 02 02 02 07 07 04 04 04     ................
    590d:	02 07 04 04 04 04 02 04 04 04 04 04 5b 5a 5c 07     ............[Z\.
    591d:	07 07 07 5c 5b 5a 5a 5b 5c 07 07 07 07 5d 07 07     ...\[ZZ[\....]..
    592d:	02 02 02 02 02 07 07 07 07 07 07 07 07 07 07 07     ................
    593d:	07 07 07 07 07 07 07 07 07 0a 0a 0a 0a 0a 07 07     ................
    594d:	07 07 02 07 07 07 02 04 07 07 02 04 04 07 02 04     ................
    595d:	04 04 02 04 04 04 04 02 02 02 02 02 04 04 04 04     ................
    596d:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    597d:	0a 0a 0a 0a 0a 04 04 04 04 04 04 04 04 04 04 04     ................
    598d:	04 04 04 04 04 04 04 04 04 02 07 07 07 07 04 02     ................
    599d:	07 07 07 04 04 02 07 07 04 04 04 02 07 04 04 04     ................
    59ad:	04 02 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     ..^^^^^^^^^^^^^^
    59bd:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     ^^^^^^^^^^^^^^^^
    59cd:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b 0b 0b 0b 5f     ^^^^^^^^^^....._
    59dd:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    59ed:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 60 61     ______________`a
    59fd:	62 5f 63 5c 5c 5c 64 5f 5f 5f 5f 5f 5f 5f 5f 5f     b_c\\\d_________
    5a0d:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5a1d:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 0d 5f     __________....._
    5a2d:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5a3d:	5f 5f 5f 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ___.____________
    5a4d:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0c     _______________.
    5a5d:	5f 5f 5f 5f 5f 0c 5f 5f 5f 0c 0c 5f 5f 0c 0c 0c     _____.___..__...
    5a6d:	5f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0e 0e 0c     _...............
    5a7d:	0c 0e 0e 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5a8d:	0c 0c 0c 0e 0e 0e 0c 0c 0e 0e 0c 0c 0c 0c 0c 0c     ................
    5a9d:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f     ............____
    5aad:	5f 0c 5f 5f 5f 5f 0c 0c 5f 5f 5f 0c 0c 0c 5f 5f     _.____..___...__
    5abd:	0c 0c 0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ....____________
    5acd:	5f 5f 5f 5f 0d 0d 5f 5f 5f 0c 0c 0e 0e 0e 5f 5f     ____..___.....__
    5add:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5aed:	5f 5f 0e 0e 0e 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f 5f     __....._________
    5afd:	5f 5f 5f 5f 5f 5f 0d 0d 5f 5f 5f 0c 0c 0d 0d 0d     ______..___.....
    5b0d:	5f 5f 5f 5f 0d 5f 5f 5f 0d 0c 5f 5f 0d 0c 0c 5f     ____.___..__..._
    5b1d:	0d 0c 0c 0c 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5b2d:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5b3d:	0c 0c 0c 0c 0c 0c 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5b4d:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f     ..........._____
    5b5d:	0d 5f 5f 5f 5f 0c 0d 5f 5f 5f 0c 0c 0d 5f 5f 0c     .____..___...__.
    5b6d:	0c 0c 0e 0e 5f 5f 5f 5f 5f 0d 5f 5f 5f 5f 0c 0d     ...._____.____..
    5b7d:	5f 5f 5f 0c 0c 0d 5f 5f 0c 0c 0c 0c 0c 5f 5f 5f     ___...__.....___
    5b8d:	5f 0d 5f 5f 5f 0d 0c 5f 5f 0d 0c 0c 5f 0d 0c 0c     _.___..__..._...
    5b9d:	0c 0c 0c 0c 0c 0c 65 65 65 65 65 65 65 65 65 65     ......eeeeeeeeee
    5bad:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    5bbd:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 66 66     eeeeeeeeeeeeeeff
    5bcd:	66 66 66 67 67 67 67 67 67 67 67 67 67 67 67 67     fffggggggggggggg
    5bdd:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    5bed:	67 12 12 12 12 12 67 67 11 67 67 67 67 67 67 67     g.....gg.ggggggg
    5bfd:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    5c0d:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 10 10     gggggggggggggg..
    5c1d:	10 10 10 12 12 12 12 12 67 67 67 67 67 67 67 67     ........gggggggg
    5c2d:	67 67 67 67 67 67 67 10 10 10 10 10 67 67 67 67     ggggggg.....gggg
    5c3d:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    5c4d:	04 04 04 04 04 67 67 67 67 67 67 67 67 67 67 67     .....ggggggggggg
    5c5d:	67 67 67 67 67 67 67 67 67 04 10 10 10 04 68 68     ggggggggg.....hh
    5c6d:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    5c7d:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    5c8d:	68 68 68 68 68 68 68 68 69 68 68 68 68 68 68 68     hhhhhhhhihhhhhhh
    5c9d:	68 68 68 68 68 68 68 68 68 68 68 68 6a 68 68 68     hhhhhhhhhhhhjhhh
    5cad:	6a 06 68 68 6a 06 06 68 68 68 68 68 68 68 68 68     j.hhj..hhhhhhhhh
    5cbd:	68 68 68 68 68 68 68 68 68 68 68 68 68 14 14 14     hhhhhhhhhhhhh...
    5ccd:	14 14 6b 6b 6b 68 68 6b 6b 6b 68 6c 6b 6b 6b 6c     ..kkkhhkkkhlkkkl
    5cdd:	6d 6b 6b 6b 6e 6e 6b 6b 6b 6e 6e 6b 6b 6b 6b 68     mkkknnkkknnkkkkh
    5ced:	6b 6b 6b 6b 68 6b 6b 6b 6b 68 6b 6b 6b 6b 68 6b     kkkkhkkkkhkkkkhk
    5cfd:	6b 6b 6b 68 68 68 68 68 68 68 68 68 68 68 68 68     kkkhhhhhhhhhhhhh
    5d0d:	68 68 68 68 68 6e 6e 6e 68 68 6e 6e 6e 68 68 68     hhhhhnnnhhnnnhhh
    5d1d:	68 68 68 6b 6b 68 68 68 6b 6b 6e 68 68 06 06 6e     hhhkkhhhkknhh..n
    5d2d:	68 14 14 14 14 14 68 68 15 68 68 68 68 68 68 68     h.....hh.hhhhhhh
    5d3d:	68 68 68 68 68 68 68 68 68 68 14 14 14 14 14 6b     hhhhhhhhhh.....k
    5d4d:	6b 6b 6e 6e 6b 6b 6b 6e 6e 6b 6b 6b 6e 6e 06 06     kknnkkknnkkknn..
    5d5d:	06 6e 6e 14 14 14 14 14 6b 6b 6b 6b 68 6b 6b 6b     .nn.....kkkkhkkk
    5d6d:	6b 68 6b 6b 6b 6b 68 06 06 06 06 68 14 14 14 14     khkkkkh....h....
    5d7d:	14 68 68 6e 6e 6e 68 68 6e 6e 6e 68 68 6e 6e 6e     .hhnnnhhnnnhhnnn
    5d8d:	68 68 6e 6e 6e 14 14 14 14 14 65 65 65 65 65 65     hhnnn.....eeeeee
    5d9d:	65 65 65 65 65 65 65 65 65 6f 6f 6f 6f 6f 70 70     eeeeeeeeeooooopp
    5dad:	70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70     pppppppppppppppp
    5dbd:	70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70     pppppppppppppppp
    5dcd:	70 71 72 73 74 75 76 77 78 79 7a 70 7b 7c 7d 70     pqrstuvwxyzp{|}p
    5ddd:	70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70     pppppppppppppppp
    5ded:	70 70 70 70 70 70 70 70 70 16 16 16 16 16           ppppppppp.....

00005dfb <map_level_desert>:
    5dfb:	33 05 26 26 26 26 26 26 26 26 26 26 26 26 26 26     3.&&&&&&&&&&&&&&
    5e0b:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    5e1b:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    5e2b:	26 26 26 26 26 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     &&&&&:::::::::::
    5e3b:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5e4b:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5e5b:	3a 3a 3a 3a 3a 3a 3a 3a 3b 3b 3b 3b 3b 3c 3b 3b     ::::::::;;;;;<;;
    5e6b:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;;;;;;;;;;;;;;;
    5e7b:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;;;;;;;;;;;;;;;
    5e8b:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3c 3b 3b 3b     ;;;;;;;;;;;;<;;;
    5e9b:	3b 3b 3c 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;<;;;;;;;;;;;;;
    5eab:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b     ;;;;;;;;;;;;;;;;
    5ebb:	3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3b 3d 3d     ;;;;;;;;;;;;;;==
    5ecb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    5edb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    5eeb:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
    5efb:	3d                                                  =

00005efc <map_level_city>:
    5efc:	33 05 2e 2f 2e 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     3.././..........
    5f0c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5f1c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5f2c:	2e 2e 2e 2e 2e 2f 2e 2f 2e 2e 2e 2e 2e 2e 2e 2e     ....././........
    5f3c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5f4c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5f5c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 30 2e 2e     .............0..
    5f6c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5f7c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5f8c:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 31 2e 31 2e     ............1.1.
    5f9c:	32 2e 2e 2e 2e 2e 33 2e 2e 34 2e 2e 2e 2e 2e 2e     2.....3..4......
    5fac:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ................
    5fbc:	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 31 31     ..............11
    5fcc:	35 36 31 37 31 31 31 31 31 38 31 31 39 31 31 31     5617111118119111
    5fdc:	31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31     1111111111111111
    5fec:	31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31     1111111111111111
    5ffc:	31                                                  1

00005ffd <map_level_forest>:
    5ffd:	33 05 26 26 26 26 26 26 26 26 26 26 26 26 26 26     3.&&&&&&&&&&&&&&
    600d:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    601d:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    602d:	26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27     &&&&&'''''''''''
    603d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    604d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    605d:	27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28     ''''''''((((((((
    606d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    607d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    608d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    609d:	29 28 28 28 28 28 28 28 28 29 28 28 28 28 29 28     )(((((((()(((()(
    60ad:	28 28 28 29 28 28 28 29 28 28 28 28 29 28 28 28     ((()((()(((()(((
    60bd:	28 29 28 28 28 28 29 28 28 28 28 28 28 28 2a 2a     ()(((()(((((((**
    60cd:	2a 2a 2b 2a 2b 2a 2a 2a 2c 2d 2c 2b 2a 2b 2a 2a     **+*+***,-,+*+**
    60dd:	2b 2a 2b 2a 2a 2b 2a 2b 2a 2b 2a 2b 2a 2a 2b 2a     +*+**+*+*+*+**+*
    60ed:	2b 2a 2a 2b 2a 2b 2a 2a 2b 2a 2b 2a 2a 2a 2a 2a     +**+*+**+*+*****
    60fd:	2a                                                  *

000060fe <map_level_fire>:
    60fe:	33 05 12 12 12 12 12 12 12 12 12 12 12 12 12 12     3...............
    610e:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    611e:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    612e:	12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13     ................
    613e:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    614e:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    615e:	13 13 13 13 13 13 13 13 14 15 14 14 14 14 15 14     ................
    616e:	14 14 14 15 14 14 14 14 14 16 14 15 14 14 14 14     ................
    617e:	14 14 14 14 17 18 15 14 14 14 14 15 14 14 14 14     ................
    618e:	14 14 14 14 14 14 14 15 14 14 14 14 14 14 14 14     ................
    619e:	14 14 14 14 14 14 14 16 14 14 16 14 14 14 16 14     ................
    61ae:	14 14 14 14 14 14 19 1a 1b 1c 14 14 14 14 14 14     ................
    61be:	14 17 18 14 14 17 18 14 14 14 14 14 14 14 16 16     ................
    61ce:	16 1d 1e 1d 1e 1d 1e 1d 1e 1f 16 16 16 16 16 16     ................
    61de:	16 16 16 16 1d 1e 1d 1e 20 21 21 21 22 23 1e 1d     ........ !!!"#..
    61ee:	1e 1f 16 20 1a 1b 24 25 1a 1b 24 16 16 16 16 16     ... ..$%..$.....
    61fe:	16                                                  .

000061ff <map_level_ice>:
    61ff:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    620f:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    621f:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    622f:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    623f:	04 03 04 03 03 03 04 03 03 03 03 04 03 02 02 02     ................
    624f:	02 02 02 02 02 03 03 03 03 03 03 04 03 03 03 03     ................
    625f:	04 03 03 03 03 03 04 03 05 05 05 05 05 05 05 05     ................
    626f:	05 06 06 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    627f:	07 07 07 07 07 07 07 07 05 05 05 05 05 08 08 05     ................
    628f:	05 05 05 05 05 05 05 05 05 05 05 05 05 09 05 05     ................
    629f:	05 05 05 0a 02 02 0b 05 05 05 05 09 05 05 05 05     ................
    62af:	05 05 05 05 05 05 05 05 05 05 05 05 05 08 08 05     ................
    62bf:	05 05 08 05 09 05 05 05 05 05 05 05 05 05 06 06     ................
    62cf:	0c 06 06 06 06 0a 02 02 02 02 0b 06 06 06 0c 0d     ................
    62df:	06 0d 06 0d 06 0e 0f 0f 0f 10 0f 10 0f 10 11 06     ................
    62ef:	06 06 06 06 06 06 06 0c 06 06 06 06 06 06 06 06     ................
    62ff:	06                                                  .

00006300 <__ctors_end>:
    6300:	11 24       	eor	r1, r1
    6302:	1f be       	out	0x3f, r1	; 63
    6304:	cf ef       	ldi	r28, 0xFF	; 255
    6306:	d0 e1       	ldi	r29, 0x10	; 16
    6308:	de bf       	out	0x3e, r29	; 62
    630a:	cd bf       	out	0x3d, r28	; 61

0000630c <__do_copy_data>:
    630c:	15 e0       	ldi	r17, 0x05	; 5
    630e:	a0 e0       	ldi	r26, 0x00	; 0
    6310:	b5 e0       	ldi	r27, 0x05	; 5
    6312:	e0 e0       	ldi	r30, 0x00	; 0
    6314:	fd ec       	ldi	r31, 0xCD	; 205
    6316:	02 c0       	rjmp	.+4      	; 0x631c <__do_copy_data+0x10>
    6318:	05 90       	lpm	r0, Z+
    631a:	0d 92       	st	X+, r0
    631c:	a0 31       	cpi	r26, 0x10	; 16
    631e:	b1 07       	cpc	r27, r17
    6320:	d9 f7       	brne	.-10     	; 0x6318 <__do_copy_data+0xc>

00006322 <__do_clear_bss>:
    6322:	10 e1       	ldi	r17, 0x10	; 16
    6324:	a0 e1       	ldi	r26, 0x10	; 16
    6326:	b5 e0       	ldi	r27, 0x05	; 5
    6328:	01 c0       	rjmp	.+2      	; 0x632c <.do_clear_bss_start>

0000632a <.do_clear_bss_loop>:
    632a:	1d 92       	st	X+, r1

0000632c <.do_clear_bss_start>:
    632c:	a3 31       	cpi	r26, 0x13	; 19
    632e:	b1 07       	cpc	r27, r17
    6330:	e1 f7       	brne	.-8      	; 0x632a <.do_clear_bss_loop>

00006332 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6332:	0e 94 34 37 	call	0x6e68	; 0x6e68 <wdt_randomize>
#endif

    MCUSR = 0;
    6336:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6338:	88 e1       	ldi	r24, 0x18	; 24
    633a:	0f b6       	in	r0, 0x3f	; 63
    633c:	f8 94       	cli
    633e:	80 93 60 00 	sts	0x0060, r24
    6342:	10 92 60 00 	sts	0x0060, r1
    6346:	0f be       	out	0x3f, r0	; 63

00006348 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6348:	0e 94 f6 37 	call	0x6fec	; 0x6fec <isEepromFormatted>
    634c:	81 11       	cpse	r24, r1
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <Initialize+0xc>
    6350:	0e 94 d4 37 	call	0x6fa8	; 0x6fa8 <FormatEeprom>

	cli();
    6354:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6356:	81 e0       	ldi	r24, 0x01	; 1
    6358:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    635c:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6360:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6364:	10 92 d0 0c 	sts	0x0CD0, r1
    6368:	10 92 d6 0c 	sts	0x0CD6, r1
    636c:	10 92 dc 0c 	sts	0x0CDC, r1
    6370:	10 92 e2 0c 	sts	0x0CE2, r1
    6374:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6378:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    637c:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6380:	92 e1       	ldi	r25, 0x12	; 18
    6382:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6386:	90 ee       	ldi	r25, 0xE0	; 224
    6388:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    638c:	94 e1       	ldi	r25, 0x14	; 20
    638e:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    6392:	10 92 c2 0c 	sts	0x0CC2, r1
    6396:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    639a:	10 92 c6 0c 	sts	0x0CC6, r1
    639e:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    63a2:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    63a6:	0e 94 4d 45 	call	0x8a9a	; 0x8a9a <InitializeVideoMode>
    63aa:	86 eb       	ldi	r24, 0xB6	; 182
    63ac:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    63ae:	fc 01       	movw	r30, r24
    63b0:	25 91       	lpm	r18, Z+
    63b2:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    63b4:	f9 01       	movw	r30, r18
    63b6:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    63b8:	30 83       	st	Z, r19
    63ba:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    63bc:	20 e0       	ldi	r18, 0x00	; 0
    63be:	84 3e       	cpi	r24, 0xE4	; 228
    63c0:	92 07       	cpc	r25, r18
    63c2:	a9 f7       	brne	.-22     	; 0x63ae <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    63c4:	78 94       	sei
	
	DisplayLogo();
    63c6:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <DisplayLogo>
    63ca:	0e 94 2e 64 	call	0xc85c	; 0xc85c <main>
    63ce:	0c 94 7e 66 	jmp	0xccfc	; 0xccfc <_exit>

000063d2 <__bad_interrupt>:
    63d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000063d6 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    63d6:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    63d8:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    63dc:	ad e8       	ldi	r26, 0x8D	; 141
    63de:	aa 95       	dec	r26
    63e0:	f1 f7       	brne	.-4      	; 0x63de <sub_video_mode3+0x8>
    63e2:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    63e4:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    63e8:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    63ea:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    63ec:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    63ee:	02 9f       	mul	r16, r18
		add ZL,r0
    63f0:	e0 0d       	add	r30, r0
		adc ZH,r1
    63f2:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    63f4:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    63f6:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    63f8:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    63fc:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    63fe:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6400:	30 0f       	add	r19, r16

		cp r18,r16
    6402:	20 17       	cp	r18, r16
		breq no_ramtiles
    6404:	51 f0       	breq	.+20     	; 0x641a <no_ramtiles>
		nop
    6406:	00 00       	nop
	...

0000640a <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    640a:	a1 91       	ld	r26, Z+
		ld XH,Z+
    640c:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    640e:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6410:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6412:	0c 93       	st	X, r16

		inc r16
    6414:	03 95       	inc	r16
		cp r16,r18
    6416:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    6418:	c0 f3       	brcs	.-16     	; 0x640a <upd_loop>

0000641a <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    641a:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    641c:	1a 95       	dec	r17
		brne .-4
    641e:	f1 f7       	brne	.-4      	; 0x641c <no_ramtiles+0x2>
		rjmp .
    6420:	00 c0       	rjmp	.+0      	; 0x6422 <no_ramtiles+0x8>
		dec r19
    6422:	3a 95       	dec	r19
		brne 1b
    6424:	d1 f7       	brne	.-12     	; 0x641a <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    6426:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    6428:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    642a:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    642e:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6430:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6432:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    6434:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    6436:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    643a:	60 2f       	mov	r22, r16
		lsr r16
    643c:	06 95       	lsr	r16
		lsr r16
    643e:	06 95       	lsr	r16
		lsr r16 ;/8
    6440:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6442:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    6446:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    6448:	f1 2e       	mov	r15, r17

        mov r17,r16
    644a:	10 2f       	mov	r17, r16
        lsr r16
    644c:	06 95       	lsr	r16
        lsr r16
    644e:	06 95       	lsr	r16
        lsr r16 ;/8
    6450:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6452:	d0 0f       	add	r29, r16
		andi r17,0x7
    6454:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    6456:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    6458:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    645a:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    645e:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    6462:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    6466:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    646a:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    646c:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    646e:	5e 01       	movw	r10, r28
		mov r23,r22
    6470:	76 2f       	mov	r23, r22
		mov r24,r15
    6472:	8f 2d       	mov	r24, r15
		mov r9,r25
    6474:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    6476:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    647a:	20 2f       	mov	r18, r16
		lsr r16
    647c:	06 95       	lsr	r16
		lsr r16
    647e:	06 95       	lsr	r16
		lsr r16			;hi8
    6480:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    6482:	03 95       	inc	r16
		andi r18,7		;lo8
    6484:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    6486:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    648a:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    648c:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    648e:	01 fe       	sbrs	r0, 1
		clr r22
    6490:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    6492:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    6494:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    6496:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    6498:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    649a:	01 fe       	sbrs	r0, 1
		ser r24
    649c:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    649e:	01 fe       	sbrs	r0, 1
		clr r9
    64a0:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    64a2:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    64a4:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    64a6:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    64a8:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    64aa:	80 90 be 0c 	lds	r8, 0x0CBE

000064ae <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    64ae:	bc d3       	rcall	.+1912   	; 0x6c28 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    64b0:	24 e0       	ldi	r18, 0x04	; 4
    64b2:	2a 95       	dec	r18
    64b4:	f1 f7       	brne	.-4      	; 0x64b2 <next_tile_line+0x4>
    64b6:	00 00       	nop
				
		call render_tile_line
    64b8:	0e 94 9d 32 	call	0x653a	; 0x653a <render_tile_line>

		WAIT r18,58
    64bc:	23 e1       	ldi	r18, 0x13	; 19
    64be:	2a 95       	dec	r18
    64c0:	f1 f7       	brne	.-4      	; 0x64be <next_tile_line+0x10>
    64c2:	00 00       	nop

		inc r22
    64c4:	63 95       	inc	r22
		dec r8
    64c6:	8a 94       	dec	r8
		breq text_frame_end
    64c8:	09 f1       	breq	.+66     	; 0x650c <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    64ca:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    64cc:	29 f0       	breq	.+10     	; 0x64d8 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    64ce:	08 e0       	ldi	r16, 0x08	; 8
    64d0:	0a 95       	dec	r16
    64d2:	f1 f7       	brne	.-4      	; 0x64d0 <next_tile_line+0x22>
    64d4:	00 00       	nop
		rjmp next_tile_line
    64d6:	eb cf       	rjmp	.-42     	; 0x64ae <next_tile_line>

000064d8 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    64d8:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    64da:	0c 2f       	mov	r16, r28
		andi r16,0x7
    64dc:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    64de:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    64e0:	11 f0       	breq	.+4      	; 0x64e6 <next_tile_row+0xe>
		inc YL
    64e2:	c3 95       	inc	r28
		rjmp 2f
    64e4:	02 c0       	rjmp	.+4      	; 0x64ea <next_tile_row+0x12>
	1:
		andi YL,0xf8
    64e6:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    64e8:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    64ea:	8a 95       	dec	r24
		brne .+2
    64ec:	09 f4       	brne	.+2      	; 0x64f0 <next_tile_row+0x18>
		movw YL,r12
    64ee:	e6 01       	movw	r28, r12

		dec r19
    64f0:	3a 95       	dec	r19
		brne .+2
    64f2:	09 f4       	brne	.+2      	; 0x64f6 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    64f4:	67 2f       	mov	r22, r23
		brne .+2
    64f6:	09 f4       	brne	.+2      	; 0x64fa <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    64f8:	e5 01       	movw	r28, r10
		brne .+2
    64fa:	09 f4       	brne	.+2      	; 0x64fe <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    64fc:	8f 2d       	mov	r24, r15
		brne .+2
    64fe:	09 f4       	brne	.+2      	; 0x6502 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6500:	99 2e       	mov	r9, r25

		brne .+2
    6502:	09 f4       	brne	.+2      	; 0x6506 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    6504:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    6506:	09 f4       	brne	.+2      	; 0x650a <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    6508:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    650a:	d1 cf       	rjmp	.-94     	; 0x64ae <next_tile_line>

0000650c <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    650c:	29 e0       	ldi	r18, 0x09	; 9
    650e:	2a 95       	dec	r18
    6510:	f1 f7       	brne	.-4      	; 0x650e <text_frame_end+0x2>
    6512:	00 00       	nop

		rcall hsync_pulse ;145
    6514:	89 d3       	rcall	.+1810   	; 0x6c28 <hsync_pulse>
	
		clr r1
    6516:	11 24       	eor	r1, r1
		call RestoreBackground
    6518:	0e 94 00 44 	call	0x8800	; 0x8800 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    651c:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    6520:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6522:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6524:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6526:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    652a:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    652c:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    652e:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6532:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6534:	e0 93 36 00 	sts	0x0036, r30

		ret
    6538:	08 95       	ret

0000653a <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    653a:	cf 93       	push	r28
		push YH
    653c:	df 93       	push	r29
		push r23
    653e:	7f 93       	push	r23
		push r22
    6540:	6f 93       	push	r22
		push r19
    6542:	3f 93       	push	r19
		push r13
    6544:	df 92       	push	r13
		push r12
    6546:	cf 92       	push	r12
		push r9
    6548:	9f 92       	push	r9
		push r7
    654a:	7f 92       	push	r7
		push r6
    654c:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    654e:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6550:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6552:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    6554:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6556:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6558:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    655a:	00 0d       	add	r16, r0
		adc r17,r1
    655c:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    655e:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6560:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    6562:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    6564:	00 0d       	add	r16, r0
		adc r17,r1
    6566:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    6568:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    656a:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    656c:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    656e:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6570:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6572:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    6574:	f8 94       	cli
		breq .+2
    6576:	09 f0       	breq	.+2      	; 0x657a <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    6578:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    657a:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    657c:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    657e:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6580:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6582:	02 0c       	add	r0, r2
	    adc r1,r3
    6584:	13 1c       	adc	r1, r3
		movw ZL,r0
    6586:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    6588:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    658a:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    658c:	28 81       	ld	r18, Y
		subi YL,-8
    658e:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6590:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6592:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    6594:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    6596:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    6598:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    659a:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    659c:	04 0e       	add	r0, r20
	    adc r1,r21
    659e:	15 1e       	adc	r1, r21
		movw XL,r0
    65a0:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    65a2:	28 81       	ld	r18, Y
		subi YL,-8
    65a4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    65a6:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    65a8:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    65aa:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    65ac:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    65ae:	a1 01       	movw	r20, r2
		brtc .+2
    65b0:	0e f4       	brtc	.+2      	; 0x65b4 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    65b2:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    65b4:	04 0e       	add	r0, r20
	    adc r1,r21
    65b6:	15 1e       	adc	r1, r21
		movw ZL,r0
    65b8:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    65ba:	3f 01       	movw	r6, r30

000065bc <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    65bc:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    65be:	a6 0f       	add	r26, r22
		adc XH,r0
    65c0:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    65c2:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    65c4:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    65c6:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    65c8:	22 c0       	rjmp	.+68     	; 0x660e <rom_fine_scroll>

000065ca <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    65ca:	00 c0       	rjmp	.+0      	; 0x65cc <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    65cc:	6d ee       	ldi	r22, 0xED	; 237
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    65ce:	72 e3       	ldi	r23, 0x32	; 50
		add r22,r0
    65d0:	60 0d       	add	r22, r0
		adc r23,r1
    65d2:	71 1d       	adc	r23, r1
		push r22
    65d4:	6f 93       	push	r22
		push r23	
    65d6:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    65d8:	08 95       	ret

000065da <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    65da:	0d 91       	ld	r16, X+
    65dc:	c8 95       	lpm
    65de:	08 b9       	out	0x08, r16	; 8
    65e0:	0d 91       	ld	r16, X+
    65e2:	c8 95       	lpm
    65e4:	08 b9       	out	0x08, r16	; 8
    65e6:	0d 91       	ld	r16, X+
    65e8:	c8 95       	lpm
    65ea:	08 b9       	out	0x08, r16	; 8
    65ec:	0d 91       	ld	r16, X+
    65ee:	c8 95       	lpm
    65f0:	08 b9       	out	0x08, r16	; 8
    65f2:	0d 91       	ld	r16, X+
    65f4:	c8 95       	lpm
    65f6:	08 b9       	out	0x08, r16	; 8
    65f8:	0d 91       	ld	r16, X+
    65fa:	c8 95       	lpm
    65fc:	08 b9       	out	0x08, r16	; 8
    65fe:	0d 91       	ld	r16, X+
    6600:	c8 95       	lpm
    6602:	08 b9       	out	0x08, r16	; 8
    6604:	0d 91       	ld	r16, X+
    6606:	c8 95       	lpm
    6608:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    660a:	1e f5       	brtc	.+70     	; 0x6652 <romloop>
		rjmp ramloop
    660c:	40 c0       	rjmp	.+128    	; 0x668e <ramloop>

0000660e <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    660e:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6610:	6f e0       	ldi	r22, 0x0F	; 15
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6612:	73 e3       	ldi	r23, 0x33	; 51
		add r22,r0
    6614:	60 0d       	add	r22, r0
		adc r23,r1
    6616:	71 1d       	adc	r23, r1
		push r22
    6618:	6f 93       	push	r22
		push r23	
    661a:	7f 93       	push	r23
		ret
    661c:	08 95       	ret

0000661e <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    661e:	05 91       	lpm	r16, Z+
    6620:	00 c0       	rjmp	.+0      	; 0x6622 <rom_fine_scroll_loop+0x4>
    6622:	08 b9       	out	0x08, r16	; 8
    6624:	05 91       	lpm	r16, Z+
    6626:	00 c0       	rjmp	.+0      	; 0x6628 <rom_fine_scroll_loop+0xa>
    6628:	08 b9       	out	0x08, r16	; 8
    662a:	05 91       	lpm	r16, Z+
    662c:	00 c0       	rjmp	.+0      	; 0x662e <rom_fine_scroll_loop+0x10>
    662e:	08 b9       	out	0x08, r16	; 8
    6630:	05 91       	lpm	r16, Z+
    6632:	00 c0       	rjmp	.+0      	; 0x6634 <rom_fine_scroll_loop+0x16>
    6634:	08 b9       	out	0x08, r16	; 8
    6636:	05 91       	lpm	r16, Z+
    6638:	00 c0       	rjmp	.+0      	; 0x663a <rom_fine_scroll_loop+0x1c>
    663a:	08 b9       	out	0x08, r16	; 8
    663c:	05 91       	lpm	r16, Z+
    663e:	00 c0       	rjmp	.+0      	; 0x6640 <rom_fine_scroll_loop+0x22>
    6640:	08 b9       	out	0x08, r16	; 8
    6642:	05 91       	lpm	r16, Z+
    6644:	00 c0       	rjmp	.+0      	; 0x6646 <rom_fine_scroll_loop+0x28>
    6646:	08 b9       	out	0x08, r16	; 8
    6648:	05 91       	lpm	r16, Z+
    664a:	00 c0       	rjmp	.+0      	; 0x664c <rom_fine_scroll_loop+0x2e>
    664c:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    664e:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6650:	f6 f0       	brts	.+60     	; 0x668e <ramloop>

00006652 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6652:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6654:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6656:	28 81       	ld	r18, Y

	    lpm r16,Z+
    6658:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    665a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    665c:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    665e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6660:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6662:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6664:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    6666:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6668:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    666a:	08 f4       	brcc	.+2      	; 0x666e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    666c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    666e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6670:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6672:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6674:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6676:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6678:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    667a:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    667c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    667e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6680:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6682:	05 91       	lpm	r16, Z+

		breq end	
    6684:	39 f1       	breq	.+78     	; 0x66d4 <end>
	    movw ZL,r0   	;copy next tile adress
    6686:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6688:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    668a:	18 f7       	brcc	.-58     	; 0x6652 <romloop>
	
		rjmp .
    668c:	00 c0       	rjmp	.+0      	; 0x668e <ramloop>

0000668e <ramloop>:

	ramloop:

	    ld r16,Z+
    668e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6690:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6692:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    6694:	01 91       	ld	r16, Z+
		subi YL,-8   		
    6696:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6698:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    669a:	23 9f       	mul	r18, r19

	    ld r16,Z+
    669c:	01 91       	ld	r16, Z+
		nop
    669e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    66a0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    66a2:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    66a4:	00 c0       	rjmp	.+0      	; 0x66a6 <ramloop+0x18>
   
	    ld r16,Z+
    66a6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    66a8:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    66aa:	08 f0       	brcs	.+2      	; 0x66ae <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    66ac:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    66ae:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    66b0:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    66b2:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    66b4:	15 1e       	adc	r1, r21
		rjmp .
    66b6:	00 c0       	rjmp	.+0      	; 0x66b8 <ramloop+0x2a>
    
		ld r16,Z+		
    66b8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    66ba:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    66bc:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    66be:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    66c0:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    66c2:	78 b8       	out	0x08, r7	; 8
		nop
    66c4:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    66c6:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    66c8:	1a 95       	dec	r17
	    breq end
    66ca:	21 f0       	breq	.+8      	; 0x66d4 <end>
	
		nop
    66cc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    66ce:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    66d0:	00 f6       	brcc	.-128    	; 0x6652 <romloop>
		rjmp ramloop
    66d2:	dd cf       	rjmp	.-70     	; 0x668e <ramloop>

000066d4 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    66d4:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    66d6:	27 f5       	brid	.+72     	; 0x6720 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    66d8:	30 f4       	brcc	.+12     	; 0x66e6 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    66da:	f0 01       	movw	r30, r0

000066dc <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    66dc:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    66de:	08 b9       	out	0x08, r16	; 8
		dec r14
    66e0:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    66e2:	e1 f7       	brne	.-8      	; 0x66dc <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    66e4:	1f c0       	rjmp	.+62     	; 0x6724 <end_fine_scroll_ram>

000066e6 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    66e6:	f6 01       	movw	r30, r12
		nop
    66e8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    66ea:	98 b8       	out	0x08, r9	; 8
		dec r14
    66ec:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    66ee:	c9 f0       	breq	.+50     	; 0x6722 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    66f0:	05 91       	lpm	r16, Z+
    66f2:	08 b9       	out	0x08, r16	; 8
    66f4:	ea 94       	dec	r14
    66f6:	a9 f0       	breq	.+42     	; 0x6722 <end_fine_scroll_rom>
    66f8:	05 91       	lpm	r16, Z+
    66fa:	08 b9       	out	0x08, r16	; 8
    66fc:	ea 94       	dec	r14
    66fe:	89 f0       	breq	.+34     	; 0x6722 <end_fine_scroll_rom>
    6700:	05 91       	lpm	r16, Z+
    6702:	08 b9       	out	0x08, r16	; 8
    6704:	ea 94       	dec	r14
    6706:	69 f0       	breq	.+26     	; 0x6722 <end_fine_scroll_rom>
    6708:	05 91       	lpm	r16, Z+
    670a:	08 b9       	out	0x08, r16	; 8
    670c:	ea 94       	dec	r14
    670e:	49 f0       	breq	.+18     	; 0x6722 <end_fine_scroll_rom>
    6710:	05 91       	lpm	r16, Z+
    6712:	08 b9       	out	0x08, r16	; 8
    6714:	ea 94       	dec	r14
    6716:	29 f0       	breq	.+10     	; 0x6722 <end_fine_scroll_rom>
    6718:	05 91       	lpm	r16, Z+
    671a:	08 b9       	out	0x08, r16	; 8
    671c:	ea 94       	dec	r14
    671e:	09 f0       	breq	.+2      	; 0x6722 <end_fine_scroll_rom>

00006720 <end_fine_scroll>:
	...

00006722 <end_fine_scroll_rom>:
	...

00006724 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    6724:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    6726:	08 b9       	out	0x08, r16	; 8

		pop r6
    6728:	6f 90       	pop	r6
		pop r7
    672a:	7f 90       	pop	r7
		pop r9
    672c:	9f 90       	pop	r9
		pop r12
    672e:	cf 90       	pop	r12
		pop r13
    6730:	df 90       	pop	r13
		pop r19
    6732:	3f 91       	pop	r19
		pop r22
    6734:	6f 91       	pop	r22
		pop r23
    6736:	7f 91       	pop	r23
		pop YH
    6738:	df 91       	pop	r29
		pop YL
    673a:	cf 91       	pop	r28

		ret
    673c:	08 95       	ret

0000673e <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    673e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6740:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    6744:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    6748:	82 9f       	mul	r24, r18
	add ZL,r0
    674a:	e0 0d       	add	r30, r0
	adc ZH,r1
    674c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    674e:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6750:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6752:	62 9f       	mul	r22, r18
	add XL,r0
    6754:	a0 0d       	add	r26, r0
	adc XH,r1
    6756:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6758:	15 90       	lpm	r1, Z+
    675a:	1d 92       	st	X+, r1
    675c:	15 90       	lpm	r1, Z+
    675e:	1d 92       	st	X+, r1
    6760:	15 90       	lpm	r1, Z+
    6762:	1d 92       	st	X+, r1
    6764:	15 90       	lpm	r1, Z+
    6766:	1d 92       	st	X+, r1
    6768:	15 90       	lpm	r1, Z+
    676a:	1d 92       	st	X+, r1
    676c:	15 90       	lpm	r1, Z+
    676e:	1d 92       	st	X+, r1
    6770:	15 90       	lpm	r1, Z+
    6772:	1d 92       	st	X+, r1
    6774:	15 90       	lpm	r1, Z+
    6776:	1d 92       	st	X+, r1
    6778:	15 90       	lpm	r1, Z+
    677a:	1d 92       	st	X+, r1
    677c:	15 90       	lpm	r1, Z+
    677e:	1d 92       	st	X+, r1
    6780:	15 90       	lpm	r1, Z+
    6782:	1d 92       	st	X+, r1
    6784:	15 90       	lpm	r1, Z+
    6786:	1d 92       	st	X+, r1
    6788:	15 90       	lpm	r1, Z+
    678a:	1d 92       	st	X+, r1
    678c:	15 90       	lpm	r1, Z+
    678e:	1d 92       	st	X+, r1
    6790:	15 90       	lpm	r1, Z+
    6792:	1d 92       	st	X+, r1
    6794:	15 90       	lpm	r1, Z+
    6796:	1d 92       	st	X+, r1
    6798:	15 90       	lpm	r1, Z+
    679a:	1d 92       	st	X+, r1
    679c:	15 90       	lpm	r1, Z+
    679e:	1d 92       	st	X+, r1
    67a0:	15 90       	lpm	r1, Z+
    67a2:	1d 92       	st	X+, r1
    67a4:	15 90       	lpm	r1, Z+
    67a6:	1d 92       	st	X+, r1
    67a8:	15 90       	lpm	r1, Z+
    67aa:	1d 92       	st	X+, r1
    67ac:	15 90       	lpm	r1, Z+
    67ae:	1d 92       	st	X+, r1
    67b0:	15 90       	lpm	r1, Z+
    67b2:	1d 92       	st	X+, r1
    67b4:	15 90       	lpm	r1, Z+
    67b6:	1d 92       	st	X+, r1
    67b8:	15 90       	lpm	r1, Z+
    67ba:	1d 92       	st	X+, r1
    67bc:	15 90       	lpm	r1, Z+
    67be:	1d 92       	st	X+, r1
    67c0:	15 90       	lpm	r1, Z+
    67c2:	1d 92       	st	X+, r1
    67c4:	15 90       	lpm	r1, Z+
    67c6:	1d 92       	st	X+, r1
    67c8:	15 90       	lpm	r1, Z+
    67ca:	1d 92       	st	X+, r1
    67cc:	15 90       	lpm	r1, Z+
    67ce:	1d 92       	st	X+, r1
    67d0:	15 90       	lpm	r1, Z+
    67d2:	1d 92       	st	X+, r1
    67d4:	15 90       	lpm	r1, Z+
    67d6:	1d 92       	st	X+, r1
    67d8:	15 90       	lpm	r1, Z+
    67da:	1d 92       	st	X+, r1
    67dc:	15 90       	lpm	r1, Z+
    67de:	1d 92       	st	X+, r1
    67e0:	15 90       	lpm	r1, Z+
    67e2:	1d 92       	st	X+, r1
    67e4:	15 90       	lpm	r1, Z+
    67e6:	1d 92       	st	X+, r1
    67e8:	15 90       	lpm	r1, Z+
    67ea:	1d 92       	st	X+, r1
    67ec:	15 90       	lpm	r1, Z+
    67ee:	1d 92       	st	X+, r1
    67f0:	15 90       	lpm	r1, Z+
    67f2:	1d 92       	st	X+, r1
    67f4:	15 90       	lpm	r1, Z+
    67f6:	1d 92       	st	X+, r1
    67f8:	15 90       	lpm	r1, Z+
    67fa:	1d 92       	st	X+, r1
    67fc:	15 90       	lpm	r1, Z+
    67fe:	1d 92       	st	X+, r1
    6800:	15 90       	lpm	r1, Z+
    6802:	1d 92       	st	X+, r1
    6804:	15 90       	lpm	r1, Z+
    6806:	1d 92       	st	X+, r1
    6808:	15 90       	lpm	r1, Z+
    680a:	1d 92       	st	X+, r1
    680c:	15 90       	lpm	r1, Z+
    680e:	1d 92       	st	X+, r1
    6810:	15 90       	lpm	r1, Z+
    6812:	1d 92       	st	X+, r1
    6814:	15 90       	lpm	r1, Z+
    6816:	1d 92       	st	X+, r1
    6818:	15 90       	lpm	r1, Z+
    681a:	1d 92       	st	X+, r1
    681c:	15 90       	lpm	r1, Z+
    681e:	1d 92       	st	X+, r1
    6820:	15 90       	lpm	r1, Z+
    6822:	1d 92       	st	X+, r1
    6824:	15 90       	lpm	r1, Z+
    6826:	1d 92       	st	X+, r1
    6828:	15 90       	lpm	r1, Z+
    682a:	1d 92       	st	X+, r1
    682c:	15 90       	lpm	r1, Z+
    682e:	1d 92       	st	X+, r1
    6830:	15 90       	lpm	r1, Z+
    6832:	1d 92       	st	X+, r1
    6834:	15 90       	lpm	r1, Z+
    6836:	1d 92       	st	X+, r1
    6838:	15 90       	lpm	r1, Z+
    683a:	1d 92       	st	X+, r1
    683c:	15 90       	lpm	r1, Z+
    683e:	1d 92       	st	X+, r1
    6840:	15 90       	lpm	r1, Z+
    6842:	1d 92       	st	X+, r1
    6844:	15 90       	lpm	r1, Z+
    6846:	1d 92       	st	X+, r1
    6848:	15 90       	lpm	r1, Z+
    684a:	1d 92       	st	X+, r1
    684c:	15 90       	lpm	r1, Z+
    684e:	1d 92       	st	X+, r1
    6850:	15 90       	lpm	r1, Z+
    6852:	1d 92       	st	X+, r1
    6854:	15 90       	lpm	r1, Z+
    6856:	1d 92       	st	X+, r1
	clr r1
    6858:	11 24       	eor	r1, r1
	ret
    685a:	08 95       	ret

0000685c <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    685c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    685e:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    6860:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6862:	82 9f       	mul	r24, r18
	add ZL,r0
    6864:	e0 0d       	add	r30, r0
	adc ZH,r1
    6866:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6868:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    686a:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    686c:	62 9f       	mul	r22, r18
	add XL,r0
    686e:	a0 0d       	add	r26, r0
	adc XH,r1
    6870:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6872:	11 90       	ld	r1, Z+
    6874:	1d 92       	st	X+, r1
    6876:	11 90       	ld	r1, Z+
    6878:	1d 92       	st	X+, r1
    687a:	11 90       	ld	r1, Z+
    687c:	1d 92       	st	X+, r1
    687e:	11 90       	ld	r1, Z+
    6880:	1d 92       	st	X+, r1
    6882:	11 90       	ld	r1, Z+
    6884:	1d 92       	st	X+, r1
    6886:	11 90       	ld	r1, Z+
    6888:	1d 92       	st	X+, r1
    688a:	11 90       	ld	r1, Z+
    688c:	1d 92       	st	X+, r1
    688e:	11 90       	ld	r1, Z+
    6890:	1d 92       	st	X+, r1
    6892:	11 90       	ld	r1, Z+
    6894:	1d 92       	st	X+, r1
    6896:	11 90       	ld	r1, Z+
    6898:	1d 92       	st	X+, r1
    689a:	11 90       	ld	r1, Z+
    689c:	1d 92       	st	X+, r1
    689e:	11 90       	ld	r1, Z+
    68a0:	1d 92       	st	X+, r1
    68a2:	11 90       	ld	r1, Z+
    68a4:	1d 92       	st	X+, r1
    68a6:	11 90       	ld	r1, Z+
    68a8:	1d 92       	st	X+, r1
    68aa:	11 90       	ld	r1, Z+
    68ac:	1d 92       	st	X+, r1
    68ae:	11 90       	ld	r1, Z+
    68b0:	1d 92       	st	X+, r1
    68b2:	11 90       	ld	r1, Z+
    68b4:	1d 92       	st	X+, r1
    68b6:	11 90       	ld	r1, Z+
    68b8:	1d 92       	st	X+, r1
    68ba:	11 90       	ld	r1, Z+
    68bc:	1d 92       	st	X+, r1
    68be:	11 90       	ld	r1, Z+
    68c0:	1d 92       	st	X+, r1
    68c2:	11 90       	ld	r1, Z+
    68c4:	1d 92       	st	X+, r1
    68c6:	11 90       	ld	r1, Z+
    68c8:	1d 92       	st	X+, r1
    68ca:	11 90       	ld	r1, Z+
    68cc:	1d 92       	st	X+, r1
    68ce:	11 90       	ld	r1, Z+
    68d0:	1d 92       	st	X+, r1
    68d2:	11 90       	ld	r1, Z+
    68d4:	1d 92       	st	X+, r1
    68d6:	11 90       	ld	r1, Z+
    68d8:	1d 92       	st	X+, r1
    68da:	11 90       	ld	r1, Z+
    68dc:	1d 92       	st	X+, r1
    68de:	11 90       	ld	r1, Z+
    68e0:	1d 92       	st	X+, r1
    68e2:	11 90       	ld	r1, Z+
    68e4:	1d 92       	st	X+, r1
    68e6:	11 90       	ld	r1, Z+
    68e8:	1d 92       	st	X+, r1
    68ea:	11 90       	ld	r1, Z+
    68ec:	1d 92       	st	X+, r1
    68ee:	11 90       	ld	r1, Z+
    68f0:	1d 92       	st	X+, r1
    68f2:	11 90       	ld	r1, Z+
    68f4:	1d 92       	st	X+, r1
    68f6:	11 90       	ld	r1, Z+
    68f8:	1d 92       	st	X+, r1
    68fa:	11 90       	ld	r1, Z+
    68fc:	1d 92       	st	X+, r1
    68fe:	11 90       	ld	r1, Z+
    6900:	1d 92       	st	X+, r1
    6902:	11 90       	ld	r1, Z+
    6904:	1d 92       	st	X+, r1
    6906:	11 90       	ld	r1, Z+
    6908:	1d 92       	st	X+, r1
    690a:	11 90       	ld	r1, Z+
    690c:	1d 92       	st	X+, r1
    690e:	11 90       	ld	r1, Z+
    6910:	1d 92       	st	X+, r1
    6912:	11 90       	ld	r1, Z+
    6914:	1d 92       	st	X+, r1
    6916:	11 90       	ld	r1, Z+
    6918:	1d 92       	st	X+, r1
    691a:	11 90       	ld	r1, Z+
    691c:	1d 92       	st	X+, r1
    691e:	11 90       	ld	r1, Z+
    6920:	1d 92       	st	X+, r1
    6922:	11 90       	ld	r1, Z+
    6924:	1d 92       	st	X+, r1
    6926:	11 90       	ld	r1, Z+
    6928:	1d 92       	st	X+, r1
    692a:	11 90       	ld	r1, Z+
    692c:	1d 92       	st	X+, r1
    692e:	11 90       	ld	r1, Z+
    6930:	1d 92       	st	X+, r1
    6932:	11 90       	ld	r1, Z+
    6934:	1d 92       	st	X+, r1
    6936:	11 90       	ld	r1, Z+
    6938:	1d 92       	st	X+, r1
    693a:	11 90       	ld	r1, Z+
    693c:	1d 92       	st	X+, r1
    693e:	11 90       	ld	r1, Z+
    6940:	1d 92       	st	X+, r1
    6942:	11 90       	ld	r1, Z+
    6944:	1d 92       	st	X+, r1
    6946:	11 90       	ld	r1, Z+
    6948:	1d 92       	st	X+, r1
    694a:	11 90       	ld	r1, Z+
    694c:	1d 92       	st	X+, r1
    694e:	11 90       	ld	r1, Z+
    6950:	1d 92       	st	X+, r1
    6952:	11 90       	ld	r1, Z+
    6954:	1d 92       	st	X+, r1
    6956:	11 90       	ld	r1, Z+
    6958:	1d 92       	st	X+, r1
    695a:	11 90       	ld	r1, Z+
    695c:	1d 92       	st	X+, r1
    695e:	11 90       	ld	r1, Z+
    6960:	1d 92       	st	X+, r1
    6962:	11 90       	ld	r1, Z+
    6964:	1d 92       	st	X+, r1
    6966:	11 90       	ld	r1, Z+
    6968:	1d 92       	st	X+, r1
    696a:	11 90       	ld	r1, Z+
    696c:	1d 92       	st	X+, r1
    696e:	11 90       	ld	r1, Z+
    6970:	1d 92       	st	X+, r1
	clr r1
    6972:	11 24       	eor	r1, r1
	ret
    6974:	08 95       	ret

00006976 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6976:	0f 93       	push	r16
	push r17
    6978:	1f 93       	push	r17
	push YL
    697a:	cf 93       	push	r28
	push YH
    697c:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    697e:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6980:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6982:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    6984:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6986:	e0 0d       	add	r30, r0
	adc ZH,r1
    6988:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    698a:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    698c:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    698e:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6990:	8e 9f       	mul	r24, r30
	movw r26,r0
    6992:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6994:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6996:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6998:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    699a:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    699c:	00 24       	eor	r0, r0
	add YL,r1
    699e:	c1 0d       	add	r28, r1
	adc YH,r0		
    69a0:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    69a2:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    69a4:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    69a6:	ea 0f       	add	r30, r26
	adc ZH,r27
    69a8:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    69aa:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    69ac:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    69ae:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    69b0:	69 9f       	mul	r22, r25
	add XL,r0
    69b2:	a0 0d       	add	r26, r0
	adc XH,r1
    69b4:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    69b6:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    69b8:	dd 27       	eor	r29, r29

	cpi r20,0	
    69ba:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    69bc:	51 f4       	brne	.+20     	; 0x69d2 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    69be:	a2 0f       	add	r26, r18
	adc XH,r1
    69c0:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    69c2:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    69c4:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    69c6:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    69c8:	11 c0       	rjmp	.+34     	; 0x69ec <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    69ca:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    69cc:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    69ce:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    69d0:	0d c0       	rjmp	.+26     	; 0x69ec <x_check_end>

000069d2 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    69d2:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    69d4:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    69d6:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    69d8:	04 c0       	rjmp	.+8      	; 0x69e2 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    69da:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    69dc:	e8 0f       	add	r30, r24
	adc ZH,r1	
    69de:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    69e0:	05 c0       	rjmp	.+10     	; 0x69ec <x_check_end>

000069e2 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    69e2:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    69e4:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    69e6:	e2 0f       	add	r30, r18
	adc ZH,r1
    69e8:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    69ea:	31 97       	sbiw	r30, 0x01	; 1

000069ec <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    69ec:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    69ee:	51 f4       	brne	.+20     	; 0x6a04 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    69f0:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    69f2:	93 9f       	mul	r25, r19
	add XL,r0
    69f4:	a0 0d       	add	r26, r0
	adc XH,r1
    69f6:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    69f8:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    69fa:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    69fc:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    69fe:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6a00:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6a02:	0a c0       	rjmp	.+20     	; 0x6a18 <y_check_end>

00006a04 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6a04:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6a06:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6a08:	63 2f       	mov	r22, r19
	dec r22
    6a0a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6a0c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6a0e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6a10:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6a12:	56 9f       	mul	r21, r22
	add ZL,r0
    6a14:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6a16:	f1 1d       	adc	r31, r1

00006a18 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6a18:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6a1a:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6a1c:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6a1e:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6a20:	00 ff       	sbrs	r16, 0
	clr r23
    6a22:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6a24:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6a26:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6a28:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6a2a:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6a2c:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6a2e:	59 1b       	sub	r21, r25

00006a30 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6a30:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6a32:	48 1b       	sub	r20, r24

00006a34 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6a34:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6a36:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6a38:	2c 93       	st	X, r18
	adiw XL,1
    6a3a:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6a3c:	e6 0f       	add	r30, r22
	adc ZH,r23
    6a3e:	f7 1f       	adc	r31, r23
	dec r20
    6a40:	4a 95       	dec	r20
	brne x_loop
    6a42:	c1 f7       	brne	.-16     	; 0x6a34 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6a44:	ec 0f       	add	r30, r28
	adc ZH,YH
    6a46:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6a48:	a8 0f       	add	r26, r24
	adc XH,r1
    6a4a:	b1 1d       	adc	r27, r1
	dec r21
    6a4c:	5a 95       	dec	r21
	brne y_loop
    6a4e:	81 f7       	brne	.-32     	; 0x6a30 <y_loop>


	pop YH
    6a50:	df 91       	pop	r29
	pop YL
    6a52:	cf 91       	pop	r28
	pop r17
    6a54:	1f 91       	pop	r17
	pop r16
    6a56:	0f 91       	pop	r16
	ret
    6a58:	08 95       	ret

00006a5a <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6a5a:	0f 92       	push	r0
	push r1
    6a5c:	1f 92       	push	r1
	push ZL;2
    6a5e:	ef 93       	push	r30
	push ZH;2
    6a60:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6a62:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6a64:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6a66:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6a6a:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6a6c:	f1 e0       	ldi	r31, 0x01	; 1

00006a6e <latency_loop>:
latency_loop:
	cp ZL,ZH
    6a6e:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6a70:	00 f0       	brcs	.+0      	; 0x6a72 <latency_loop+0x4>
	inc ZH
    6a72:	f3 95       	inc	r31
	cpi ZH,10
    6a74:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6a76:	d8 f3       	brcs	.-10     	; 0x6a6e <latency_loop>
	jmp .
    6a78:	0c 94 3e 35 	jmp	0x6a7c	; 0x6a7c <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6a7c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6a80:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6a82:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    6a86:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    6a8a:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6a8c:	57 c0       	rjmp	.+174    	; 0x6b3c <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6a8e:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6a90:	98 f0       	brcs	.+38     	; 0x6ab8 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6a92:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6a94:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6a98:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6a9a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6a9e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6aa0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6aa2:	26 f4       	brtc	.+8      	; 0x6aac <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6aa4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6aa6:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <update_sound>
	rjmp sync_end
    6aaa:	b7 c0       	rjmp	.+366    	; 0x6c1a <sync_end>

00006aac <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6aac:	e5 e1       	ldi	r30, 0x15	; 21
    6aae:	ea 95       	dec	r30
    6ab0:	f1 f7       	brne	.-4      	; 0x6aae <sync_pre_eq_no_sound_update+0x2>
    6ab2:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6ab4:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6ab6:	b1 c0       	rjmp	.+354    	; 0x6c1a <sync_end>

00006ab8 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6ab8:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6aba:	38 f1       	brcs	.+78     	; 0x6b0a <sync_post_eq>

	rjmp .
    6abc:	00 c0       	rjmp	.+0      	; 0x6abe <sync_eq+0x6>
	rjmp .
    6abe:	00 c0       	rjmp	.+0      	; 0x6ac0 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ac0:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6ac2:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6ac4:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6ac6:	16 f4       	brtc	.+4      	; 0x6acc <sync_eq_skip>
	
	call update_sound
    6ac8:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <update_sound>

00006acc <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6acc:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6ace:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6ad2:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6ad4:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6ad8:	a0 c0       	rjmp	.+320    	; 0x6c1a <sync_end>

00006ada <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6ada:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6adc:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6ade:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6ae0:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6ae4:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6ae6:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6ae8:	00 f0       	brcs	.+0      	; 0x6aea <__vector_14+0x10>

	cpi ZL,2
    6aea:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6aec:	00 f0       	brcs	.+0      	; 0x6aee <__vector_14+0x14>

	cpi ZL,3
    6aee:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6af0:	00 f0       	brcs	.+0      	; 0x6af2 <__vector_14+0x18>

	cpi ZL,4
    6af2:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6af4:	00 f0       	brcs	.+0      	; 0x6af6 <__vector_14+0x1c>

	cpi ZL,5
    6af6:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6af8:	00 f0       	brcs	.+0      	; 0x6afa <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6afa:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6afc:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6afe:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6b02:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6b04:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6b06:	ef 91       	pop	r30
	reti
    6b08:	18 95       	reti

00006b0a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6b0a:	00 c0       	rjmp	.+0      	; 0x6b0c <sync_post_eq+0x2>

	bst ZL,0
    6b0c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6b0e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6b10:	26 f4       	brtc	.+8      	; 0x6b1a <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6b12:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6b14:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <update_sound>
	rjmp sync_pre_eq_cont
    6b18:	05 c0       	rjmp	.+10     	; 0x6b24 <sync_pre_eq_cont>

00006b1a <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6b1a:	e5 e1       	ldi	r30, 0x15	; 21
    6b1c:	ea 95       	dec	r30
    6b1e:	f1 f7       	brne	.-4      	; 0x6b1c <sync_post_eq_no_sound_update+0x2>
    6b20:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6b22:	28 9a       	sbi	0x05, 0	; 5

00006b24 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6b24:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    6b28:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6b2a:	09 f0       	breq	.+2      	; 0x6b2e <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6b2c:	76 c0       	rjmp	.+236    	; 0x6c1a <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6b2e:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6b30:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    6b34:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6b36:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    6b3a:	6f c0       	rjmp	.+222    	; 0x6c1a <sync_end>

00006b3c <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6b3c:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6b3e:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6b42:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6b44:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6b48:	00 c0       	rjmp	.+0      	; 0x6b4a <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6b4a:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6b4c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6b4e:	00 c0       	rjmp	.+0      	; 0x6b50 <sync_hsync+0x14>
	call update_sound
    6b50:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6b54:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6b56:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    6b5a:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6b5c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    6b60:	ef 17       	cp	r30, r31
	brsh no_render
    6b62:	d0 f4       	brcc	.+52     	; 0x6b98 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6b64:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6b66:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    6b6a:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6b6c:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    6b70:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6b72:	ef 17       	cp	r30, r31
	brlo no_render
    6b74:	88 f0       	brcs	.+34     	; 0x6b98 <no_render>

	;push r1-r29
	ldi ZL,29
    6b76:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6b78:	ff 27       	eor	r31, r31

00006b7a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6b7a:	00 80       	ld	r0, Z
	push r0
    6b7c:	0f 92       	push	r0
	dec ZL
    6b7e:	ea 95       	dec	r30
	brne push_loop	
    6b80:	e1 f7       	brne	.-8      	; 0x6b7a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6b82:	06 e0       	ldi	r16, 0x06	; 6
    6b84:	0a 95       	dec	r16
    6b86:	f1 f7       	brne	.-4      	; 0x6b84 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6b88:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6b8c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6b8e:	ff 27       	eor	r31, r31

00006b90 <pop_loop>:
pop_loop:
	pop r0
    6b90:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6b92:	01 92       	st	Z+, r0
	cpi ZL,30
    6b94:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6b96:	e0 f3       	brcs	.-8      	; 0x6b90 <pop_loop>

00006b98 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6b98:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    6b9c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6b9e:	09 f0       	breq	.+2      	; 0x6ba2 <no_render+0xa>
	rjmp sync_end
    6ba0:	3c c0       	rjmp	.+120    	; 0x6c1a <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6ba2:	2f 93       	push	r18
	push r19
    6ba4:	3f 93       	push	r19
	push r20
    6ba6:	4f 93       	push	r20
	push r21
    6ba8:	5f 93       	push	r21
	push r22
    6baa:	6f 93       	push	r22
	push r23
    6bac:	7f 93       	push	r23
	push r24
    6bae:	8f 93       	push	r24
	push r25
    6bb0:	9f 93       	push	r25
	push r26
    6bb2:	af 93       	push	r26
	push r27
    6bb4:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6bb6:	78 94       	sei
	clr r1
    6bb8:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6bba:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6bbc:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6bc0:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6bc2:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6bc6:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    6bca:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    6bce:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6bd0:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    6bd4:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6bd8:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    6bdc:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    6be0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6be2:	f1 05       	cpc	r31, r1
	breq .+2 
    6be4:	09 f0       	breq	.+2      	; 0x6be8 <no_render+0x50>
	icall
    6be6:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6be8:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6bec:	0e 94 5e 46 	call	0x8cbc	; 0x8cbc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6bf0:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <process_music>
	clr r1
    6bf4:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6bf6:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    6bfa:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    6bfe:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6c00:	f1 05       	cpc	r31, r1
	breq .+2 
    6c02:	09 f0       	breq	.+2      	; 0x6c06 <no_render+0x6e>
	icall
    6c04:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6c06:	bf 91       	pop	r27
	pop r26
    6c08:	af 91       	pop	r26
	pop r25
    6c0a:	9f 91       	pop	r25
	pop r24
    6c0c:	8f 91       	pop	r24
	pop r23
    6c0e:	7f 91       	pop	r23
	pop r22
    6c10:	6f 91       	pop	r22
	pop r21
    6c12:	5f 91       	pop	r21
	pop r20
    6c14:	4f 91       	pop	r20
	pop r19
    6c16:	3f 91       	pop	r19
	pop r18
    6c18:	2f 91       	pop	r18

00006c1a <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6c1a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6c1c:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6c1e:	ff 91       	pop	r31
	pop ZL
    6c20:	ef 91       	pop	r30
	pop r1
    6c22:	1f 90       	pop	r1
	pop r0
    6c24:	0f 90       	pop	r0
	reti
    6c26:	18 95       	reti

00006c28 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c28:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6c2a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6c2c:	00 c0       	rjmp	.+0      	; 0x6c2e <hsync_pulse+0x6>
	call update_sound
    6c2e:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <update_sound>

	lds ZL,sync_pulse
    6c32:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6c36:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6c38:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    6c3c:	08 95       	ret

00006c3e <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6c3e:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    6c42:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6c44:	0e 94 4b 3b 	call	0x7696	; 0x7696 <ProcessMusic>
#endif

	ret
    6c48:	08 95       	ret

00006c4a <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    6c4a:	0f 93       	push	r16
	push r17
    6c4c:	1f 93       	push	r17
	push r18
    6c4e:	2f 93       	push	r18
	push r28
    6c50:	cf 93       	push	r28
	push r29
    6c52:	df 93       	push	r29

	mov r18,ZL
    6c54:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6c56:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    6c5a:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    6c5e:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6c60:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    6c64:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    6c68:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    6c6c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6c6e:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6c70:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    6c74:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    6c78:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    6c7c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6c7e:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6c80:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6c82:	d0 2d       	mov	r29, r0
	nop
    6c84:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6c86:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    6c8a:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    6c8e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6c90:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    6c94:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    6c98:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    6c9c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6c9e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6ca0:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    6ca4:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    6ca8:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6cac:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6cae:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6cb0:	20 ff       	sbrs	r18, 0
	rjmp .
    6cb2:	00 c0       	rjmp	.+0      	; 0x6cb4 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6cb4:	01 03       	mulsu	r16, r17
	clr r0
    6cb6:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6cb8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6cba:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6cbc:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6cbe:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    6cc2:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    6cc6:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6cc8:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    6ccc:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    6cd0:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    6cd4:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6cd6:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6cd8:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    6cdc:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    6ce0:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    6ce4:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6ce6:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6ce8:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6cea:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6cec:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    6cf0:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    6cf4:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    6cf8:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6cfa:	92 f4       	brpl	.+36     	; 0x6d20 <ch4_no_shift>

	lds ZH,tr4_params
    6cfc:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    6d00:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6d02:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6d04:	00 2e       	mov	r0, r16
	lsr r0
    6d06:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6d08:	00 26       	eor	r0, r16
	bst r0,0
    6d0a:	00 fa       	bst	r0, 0
	lsr r17
    6d0c:	16 95       	lsr	r17
	ror r16
    6d0e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6d10:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6d12:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6d14:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6d16:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    6d1a:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    6d1e:	03 c0       	rjmp	.+6      	; 0x6d26 <ch4_end>

00006d20 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6d20:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6d22:	1a 95       	dec	r17
	brne .-4
    6d24:	f1 f7       	brne	.-4      	; 0x6d22 <ch4_no_shift+0x2>

00006d26 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6d26:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    6d2a:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6d2c:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6d2e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6d30:	21 ff       	sbrs	r18, 1
	rjmp .
    6d32:	00 c0       	rjmp	.+0      	; 0x6d34 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6d34:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6d36:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6d38:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    6d3c:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6d3e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6d40:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6d42:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6d44:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    6d48:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    6d4c:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6d4e:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    6d52:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    6d56:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    6d5a:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6d5c:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    6d60:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6d62:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6d64:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6d66:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    6d6a:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    6d6e:	00 19       	sub	r16, r0
	sbc r17,r1
    6d70:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6d72:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    6d76:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    6d7a:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6d7c:	f1 05       	cpc	r31, r1
	brlo .+2
    6d7e:	08 f0       	brcs	.+2      	; 0x6d82 <ch4_end+0x5c>
	movw ZL,r16
    6d80:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6d82:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    6d86:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    6d8a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6d8c:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    6d90:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6d92:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6d94:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6d96:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6d98:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6d9a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6d9c:	d0 05       	cpc	r29, r0
	brlt .+2
    6d9e:	0c f0       	brlt	.+2      	; 0x6da2 <ch4_end+0x7c>
	ldi r28,127
    6da0:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6da2:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6da4:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6da6:	d0 05       	cpc	r29, r0
	brge .+2
    6da8:	0c f4       	brge	.+2      	; 0x6dac <ch4_end+0x86>
	ldi r28,-128
    6daa:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6dac:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6dae:	c0 93 b3 00 	sts	0x00B3, r28

00006db2 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    6db2:	df 91       	pop	r29
	pop r28
    6db4:	cf 91       	pop	r28
	pop r18
    6db6:	2f 91       	pop	r18
	pop r17
    6db8:	1f 91       	pop	r17
	pop r16
    6dba:	0f 91       	pop	r16
	
	ret
    6dbc:	08 95       	ret

00006dbe <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6dbe:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    6dc2:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    6dc6:	08 95       	ret

00006dc8 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6dc8:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6dca:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    6dcc:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    6dce:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6dd0:	6c e1       	ldi	r22, 0x1C	; 28

00006dd2 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6dd2:	6d 93       	st	X+, r22
	sbiw r30,1
    6dd4:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6dd6:	e9 f7       	brne	.-6      	; 0x6dd2 <fill_vram_loop>

	clr r1
    6dd8:	11 24       	eor	r1, r1

	ret
    6dda:	08 95       	ret

00006ddc <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    6ddc:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    6dde:	76 2f       	mov	r23, r22
	lsr r22
    6de0:	66 95       	lsr	r22
	lsr r22
    6de2:	66 95       	lsr	r22
	lsr r22			;y>>3
    6de4:	66 95       	lsr	r22
	ldi r18,8		
    6de6:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    6de8:	82 9f       	mul	r24, r18
	movw XL,r0
    6dea:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    6dec:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    6dee:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    6df0:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    6df2:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    6df4:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    6df6:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    6df8:	4c 93       	st	X, r20

	clr r1
    6dfa:	11 24       	eor	r1, r1

	ret
    6dfc:	08 95       	ret

00006dfe <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6dfe:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    6e02:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    6e06:	08 95       	ret

00006e08 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6e08:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    6e0c:	81 70       	andi	r24, 0x01	; 1
	ret
    6e0e:	08 95       	ret

00006e10 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6e10:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    6e14:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6e16:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    6e1a:	08 95       	ret

00006e1c <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6e1c:	88 23       	and	r24, r24
	brne rj_p2
    6e1e:	29 f4       	brne	.+10     	; 0x6e2a <rj_p2>
		
	lds r24,joypad1_status_lo
    6e20:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    6e24:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    6e28:	08 95       	ret

00006e2a <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6e2a:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    6e2e:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    6e32:	08 95       	ret

00006e34 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6e34:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6e36:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6e38:	f1 f7       	brne	.-4      	; 0x6e36 <WaitUs+0x2>
	nop
    6e3a:	00 00       	nop
	sbiw r24,1
    6e3c:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6e3e:	d1 f7       	brne	.-12     	; 0x6e34 <WaitUs>

	ret
    6e40:	08 95       	ret

00006e42 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6e42:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6e44:	fe cf       	rjmp	.-4      	; 0x6e42 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6e46:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6e48:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6e4a:	60 bd       	out	0x20, r22	; 32
   cli
    6e4c:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6e4e:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6e50:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6e52:	78 94       	sei
   ret
    6e54:	08 95       	ret

00006e56 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6e56:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6e58:	fe cf       	rjmp	.-4      	; 0x6e56 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6e5a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6e5c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6e5e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6e60:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6e62:	80 b5       	in	r24, 0x20	; 32
   sei
    6e64:	78 94       	sei
   ret
    6e66:	08 95       	ret

00006e68 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    6e68:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    6e6a:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    6e6e:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    6e72:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    6e76:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    6e7a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    6e7e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    6e82:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    6e86:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    6e8a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    6e8e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    6e90:	80 93 81 00 	sts	0x0081, r24

		cli
    6e94:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    6e96:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    6e98:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    6e9c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    6e9e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    6ea2:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    6ea4:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    6ea8:	90 93 60 00 	sts	0x0060, r25
	
		sei
    6eac:	78 94       	sei

00006eae <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    6eae:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    6eb2:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    6eb4:	e0 f3       	brcs	.-8      	; 0x6eae <wait>

		ret
    6eb6:	08 95       	ret

00006eb8 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    6eb8:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    6ebc:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    6ec0:	08 95       	ret

00006ec2 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    6ec2:	0f 93       	push	r16
		push r17
    6ec4:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    6ec6:	0f b7       	in	r16, 0x3f	; 63
		push r16
    6ec8:	0f 93       	push	r16

		lds r16,sync_pulse
    6eca:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    6ece:	03 95       	inc	r16
		sts sync_pulse,r16
    6ed0:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    6ed4:	00 fd       	sbrc	r16, 0
		rjmp 1f
    6ed6:	08 c0       	rjmp	.+16     	; 0x6ee8 <__vector_8+0x26>
		lds r17,random_value
    6ed8:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6edc:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6ee0:	10 27       	eor	r17, r16
		sts random_value,r17
    6ee2:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    6ee6:	07 c0       	rjmp	.+14     	; 0x6ef6 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    6ee8:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6eec:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6ef0:	10 27       	eor	r17, r16
		sts random_value+1,r17
    6ef2:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    6ef6:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    6ef8:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    6efc:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    6efe:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    6f00:	1f 91       	pop	r17
		pop r16
    6f02:	0f 91       	pop	r16
		reti
    6f04:	18 95       	reti

00006f06 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6f06:	98 e0       	ldi	r25, 0x08	; 8
    6f08:	88 e1       	ldi	r24, 0x18	; 24
    6f0a:	0f b6       	in	r0, 0x3f	; 63
    6f0c:	f8 94       	cli
    6f0e:	a8 95       	wdr
    6f10:	80 93 60 00 	sts	0x0060, r24
    6f14:	0f be       	out	0x3f, r0	; 63
    6f16:	90 93 60 00 	sts	0x0060, r25
	while(1);
    6f1a:	ff cf       	rjmp	.-2      	; 0x6f1a <SoftReset+0x14>

00006f1c <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6f1c:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6f1e:	c8 95       	lpm
    6f20:	c8 95       	lpm
		Wait200ns();
    6f22:	c8 95       	lpm
    6f24:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    6f26:	12 98       	cbi	0x02, 2	; 2
    6f28:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    6f2a:	80 e0       	ldi	r24, 0x00	; 0
    6f2c:	90 e0       	ldi	r25, 0x00	; 0
    6f2e:	20 e0       	ldi	r18, 0x00	; 0
    6f30:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    6f32:	36 95       	lsr	r19
    6f34:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    6f36:	96 95       	lsr	r25
    6f38:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6f3a:	c8 95       	lpm
    6f3c:	c8 95       	lpm
			Wait200ns();
    6f3e:	c8 95       	lpm
    6f40:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    6f42:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    6f44:	00 9b       	sbis	0x00, 0	; 0
    6f46:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    6f48:	01 9b       	sbis	0x00, 1	; 0
    6f4a:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    6f4c:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6f4e:	c8 95       	lpm
    6f50:	c8 95       	lpm
			Wait200ns();
    6f52:	c8 95       	lpm
    6f54:	c8 95       	lpm
    6f56:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    6f58:	61 f7       	brne	.-40     	; 0x6f32 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    6f5a:	30 93 c0 0c 	sts	0x0CC0, r19
    6f5e:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    6f62:	90 93 c4 0c 	sts	0x0CC4, r25
    6f66:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    6f6a:	80 91 bf 0c 	lds	r24, 0x0CBF
    6f6e:	90 91 c0 0c 	lds	r25, 0x0CC0
    6f72:	0f 97       	sbiw	r24, 0x0f	; 15
    6f74:	31 f0       	breq	.+12     	; 0x6f82 <ReadButtons+0x66>
    6f76:	80 91 c3 0c 	lds	r24, 0x0CC3
    6f7a:	90 91 c4 0c 	lds	r25, 0x0CC4
    6f7e:	0f 97       	sbiw	r24, 0x0f	; 15
    6f80:	11 f4       	brne	.+4      	; 0x6f86 <ReadButtons+0x6a>
		SoftReset();
    6f82:	0e 94 83 37 	call	0x6f06	; 0x6f06 <SoftReset>
    6f86:	08 95       	ret

00006f88 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    6f88:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    6f8c:	00 99       	sbic	0x00, 0	; 0
    6f8e:	03 c0       	rjmp	.+6      	; 0x6f96 <ReadControllers+0xe>
    6f90:	81 e0       	ldi	r24, 0x01	; 1
    6f92:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    6f96:	01 99       	sbic	0x00, 1	; 0
    6f98:	05 c0       	rjmp	.+10     	; 0x6fa4 <ReadControllers+0x1c>
    6f9a:	80 91 f8 0c 	lds	r24, 0x0CF8
    6f9e:	82 60       	ori	r24, 0x02	; 2
    6fa0:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    6fa4:	0c 94 8e 37 	jmp	0x6f1c	; 0x6f1c <ReadButtons>

00006fa8 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    6fa8:	cf 93       	push	r28
    6faa:	df 93       	push	r29
    6fac:	c0 e0       	ldi	r28, 0x00	; 0
    6fae:	d0 e0       	ldi	r29, 0x00	; 0
    6fb0:	fe 01       	movw	r30, r28
    6fb2:	ec 51       	subi	r30, 0x1C	; 28
    6fb4:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    6fb6:	64 91       	lpm	r22, Z
    6fb8:	ce 01       	movw	r24, r28
    6fba:	0e 94 21 37 	call	0x6e42	; 0x6e42 <WriteEeprom>
    6fbe:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    6fc0:	c0 32       	cpi	r28, 0x20	; 32
    6fc2:	d1 05       	cpc	r29, r1
    6fc4:	a9 f7       	brne	.-22     	; 0x6fb0 <FormatEeprom+0x8>
    6fc6:	c0 e2       	ldi	r28, 0x20	; 32
    6fc8:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    6fca:	6f ef       	ldi	r22, 0xFF	; 255
    6fcc:	ce 01       	movw	r24, r28
    6fce:	0e 94 21 37 	call	0x6e42	; 0x6e42 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    6fd2:	6f ef       	ldi	r22, 0xFF	; 255
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	01 96       	adiw	r24, 0x01	; 1
    6fd8:	0e 94 21 37 	call	0x6e42	; 0x6e42 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    6fdc:	a0 96       	adiw	r28, 0x20	; 32
    6fde:	c1 15       	cp	r28, r1
    6fe0:	88 e0       	ldi	r24, 0x08	; 8
    6fe2:	d8 07       	cpc	r29, r24
    6fe4:	91 f7       	brne	.-28     	; 0x6fca <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    6fe6:	df 91       	pop	r29
    6fe8:	cf 91       	pop	r28
    6fea:	08 95       	ret

00006fec <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    6fec:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    6fee:	80 e0       	ldi	r24, 0x00	; 0
    6ff0:	90 e0       	ldi	r25, 0x00	; 0
    6ff2:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <ReadEeprom>
    6ff6:	c8 2f       	mov	r28, r24
    6ff8:	81 e0       	ldi	r24, 0x01	; 1
    6ffa:	90 e0       	ldi	r25, 0x00	; 0
    6ffc:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <ReadEeprom>
    7000:	28 2f       	mov	r18, r24
    7002:	30 e0       	ldi	r19, 0x00	; 0
    7004:	32 2f       	mov	r19, r18
    7006:	22 27       	eor	r18, r18
    7008:	2c 0f       	add	r18, r28
    700a:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    700c:	81 e0       	ldi	r24, 0x01	; 1
    700e:	2a 35       	cpi	r18, 0x5A	; 90
    7010:	35 45       	sbci	r19, 0x55	; 85
    7012:	09 f0       	breq	.+2      	; 0x7016 <isEepromFormatted+0x2a>
    7014:	80 e0       	ldi	r24, 0x00	; 0
}
    7016:	cf 91       	pop	r28
    7018:	08 95       	ret

0000701a <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    701a:	8f 92       	push	r8
    701c:	9f 92       	push	r9
    701e:	af 92       	push	r10
    7020:	bf 92       	push	r11
    7022:	cf 92       	push	r12
    7024:	df 92       	push	r13
    7026:	ef 92       	push	r14
    7028:	ff 92       	push	r15
    702a:	0f 93       	push	r16
    702c:	1f 93       	push	r17
    702e:	cf 93       	push	r28
    7030:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7032:	fb 01       	movw	r30, r22
    7034:	11 82       	std	Z+1, r1	; 0x01
    7036:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7038:	8f 3f       	cpi	r24, 0xFF	; 255
    703a:	ff ef       	ldi	r31, 0xFF	; 255
    703c:	9f 07       	cpc	r25, r31
    703e:	89 f1       	breq	.+98     	; 0x70a2 <EepromBlockExists+0x88>
    7040:	6a 01       	movw	r12, r20
    7042:	8b 01       	movw	r16, r22
    7044:	7c 01       	movw	r14, r24
    7046:	a1 2c       	mov	r10, r1
    7048:	b1 2c       	mov	r11, r1
    704a:	c0 e0       	ldi	r28, 0x00	; 0
    704c:	d3 e0       	ldi	r29, 0x03	; 3
    704e:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7050:	c5 01       	movw	r24, r10
    7052:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <ReadEeprom>
    7056:	88 2e       	mov	r8, r24
    7058:	c5 01       	movw	r24, r10
    705a:	01 96       	adiw	r24, 0x01	; 1
    705c:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <ReadEeprom>
    7060:	28 2f       	mov	r18, r24
    7062:	30 e0       	ldi	r19, 0x00	; 0
    7064:	32 2f       	mov	r19, r18
    7066:	22 27       	eor	r18, r18
    7068:	28 0d       	add	r18, r8
    706a:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    706c:	2e 15       	cp	r18, r14
    706e:	3f 05       	cpc	r19, r15
    7070:	29 f4       	brne	.+10     	; 0x707c <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7072:	f8 01       	movw	r30, r16
    7074:	b1 82       	std	Z+1, r11	; 0x01
    7076:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7078:	d0 e0       	ldi	r29, 0x00	; 0
    707a:	0b c0       	rjmp	.+22     	; 0x7092 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    707c:	2f 3f       	cpi	r18, 0xFF	; 255
    707e:	3f 4f       	sbci	r19, 0xFF	; 255
    7080:	41 f4       	brne	.+16     	; 0x7092 <EepromBlockExists+0x78>
    7082:	91 10       	cpse	r9, r1
    7084:	06 c0       	rjmp	.+12     	; 0x7092 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7086:	c1 14       	cp	r12, r1
    7088:	d1 04       	cpc	r13, r1
    708a:	11 f0       	breq	.+4      	; 0x7090 <EepromBlockExists+0x76>
    708c:	f6 01       	movw	r30, r12
    708e:	c0 83       	st	Z, r28
    7090:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7092:	cf 5f       	subi	r28, 0xFF	; 255
    7094:	f0 e2       	ldi	r31, 0x20	; 32
    7096:	af 0e       	add	r10, r31
    7098:	b1 1c       	adc	r11, r1
    709a:	c0 34       	cpi	r28, 0x40	; 64
    709c:	c9 f6       	brne	.-78     	; 0x7050 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    709e:	8d 2f       	mov	r24, r29
    70a0:	01 c0       	rjmp	.+2      	; 0x70a4 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    70a2:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	1f 91       	pop	r17
    70aa:	0f 91       	pop	r16
    70ac:	ff 90       	pop	r15
    70ae:	ef 90       	pop	r14
    70b0:	df 90       	pop	r13
    70b2:	cf 90       	pop	r12
    70b4:	bf 90       	pop	r11
    70b6:	af 90       	pop	r10
    70b8:	9f 90       	pop	r9
    70ba:	8f 90       	pop	r8
    70bc:	08 95       	ret

000070be <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    70be:	ef 92       	push	r14
    70c0:	ff 92       	push	r15
    70c2:	0f 93       	push	r16
    70c4:	1f 93       	push	r17
    70c6:	cf 93       	push	r28
    70c8:	df 93       	push	r29
    70ca:	00 d0       	rcall	.+0      	; 0x70cc <EepromWriteBlock+0xe>
    70cc:	1f 92       	push	r1
    70ce:	cd b7       	in	r28, 0x3d	; 61
    70d0:	de b7       	in	r29, 0x3e	; 62
    70d2:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    70d4:	1a 82       	std	Y+2, r1	; 0x02
    70d6:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    70d8:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    70da:	ae 01       	movw	r20, r28
    70dc:	4d 5f       	subi	r20, 0xFD	; 253
    70de:	5f 4f       	sbci	r21, 0xFF	; 255
    70e0:	be 01       	movw	r22, r28
    70e2:	6f 5f       	subi	r22, 0xFF	; 255
    70e4:	7f 4f       	sbci	r23, 0xFF	; 255
    70e6:	fc 01       	movw	r30, r24
    70e8:	80 81       	ld	r24, Z
    70ea:	91 81       	ldd	r25, Z+1	; 0x01
    70ec:	0e 94 0d 38 	call	0x701a	; 0x701a <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    70f0:	88 23       	and	r24, r24
    70f2:	11 f0       	breq	.+4      	; 0x70f8 <EepromWriteBlock+0x3a>
    70f4:	83 30       	cpi	r24, 0x03	; 3
    70f6:	19 f5       	brne	.+70     	; 0x713e <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    70f8:	89 81       	ldd	r24, Y+1	; 0x01
    70fa:	9a 81       	ldd	r25, Y+2	; 0x02
    70fc:	89 2b       	or	r24, r25
    70fe:	49 f4       	brne	.+18     	; 0x7112 <EepromWriteBlock+0x54>
    7100:	8b 81       	ldd	r24, Y+3	; 0x03
    7102:	88 23       	and	r24, r24
    7104:	d9 f0       	breq	.+54     	; 0x713c <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7106:	f0 e2       	ldi	r31, 0x20	; 32
    7108:	8f 9f       	mul	r24, r31
    710a:	c0 01       	movw	r24, r0
    710c:	11 24       	eor	r1, r1
    710e:	9a 83       	std	Y+2, r25	; 0x02
    7110:	89 83       	std	Y+1, r24	; 0x01
    7112:	78 01       	movw	r14, r16
    7114:	20 e2       	ldi	r18, 0x20	; 32
    7116:	e2 0e       	add	r14, r18
    7118:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    711a:	f8 01       	movw	r30, r16
    711c:	61 91       	ld	r22, Z+
    711e:	8f 01       	movw	r16, r30
    7120:	89 81       	ldd	r24, Y+1	; 0x01
    7122:	9a 81       	ldd	r25, Y+2	; 0x02
    7124:	9c 01       	movw	r18, r24
    7126:	2f 5f       	subi	r18, 0xFF	; 255
    7128:	3f 4f       	sbci	r19, 0xFF	; 255
    712a:	3a 83       	std	Y+2, r19	; 0x02
    712c:	29 83       	std	Y+1, r18	; 0x01
    712e:	0e 94 21 37 	call	0x6e42	; 0x6e42 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7132:	0e 15       	cp	r16, r14
    7134:	1f 05       	cpc	r17, r15
    7136:	89 f7       	brne	.-30     	; 0x711a <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7138:	80 e0       	ldi	r24, 0x00	; 0
    713a:	01 c0       	rjmp	.+2      	; 0x713e <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    713c:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    713e:	0f 90       	pop	r0
    7140:	0f 90       	pop	r0
    7142:	0f 90       	pop	r0
    7144:	df 91       	pop	r29
    7146:	cf 91       	pop	r28
    7148:	1f 91       	pop	r17
    714a:	0f 91       	pop	r16
    714c:	ff 90       	pop	r15
    714e:	ef 90       	pop	r14
    7150:	08 95       	ret

00007152 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7152:	cf 92       	push	r12
    7154:	df 92       	push	r13
    7156:	ff 92       	push	r15
    7158:	0f 93       	push	r16
    715a:	1f 93       	push	r17
    715c:	cf 93       	push	r28
    715e:	df 93       	push	r29
    7160:	00 d0       	rcall	.+0      	; 0x7162 <EepromReadBlock+0x10>
    7162:	cd b7       	in	r28, 0x3d	; 61
    7164:	de b7       	in	r29, 0x3e	; 62
    7166:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7168:	40 e0       	ldi	r20, 0x00	; 0
    716a:	50 e0       	ldi	r21, 0x00	; 0
    716c:	be 01       	movw	r22, r28
    716e:	6f 5f       	subi	r22, 0xFF	; 255
    7170:	7f 4f       	sbci	r23, 0xFF	; 255
    7172:	0e 94 0d 38 	call	0x701a	; 0x701a <EepromBlockExists>
    7176:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7178:	81 11       	cpse	r24, r1
    717a:	13 c0       	rjmp	.+38     	; 0x71a2 <EepromReadBlock+0x50>
    717c:	68 01       	movw	r12, r16
    717e:	80 e2       	ldi	r24, 0x20	; 32
    7180:	c8 0e       	add	r12, r24
    7182:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7184:	89 81       	ldd	r24, Y+1	; 0x01
    7186:	9a 81       	ldd	r25, Y+2	; 0x02
    7188:	9c 01       	movw	r18, r24
    718a:	2f 5f       	subi	r18, 0xFF	; 255
    718c:	3f 4f       	sbci	r19, 0xFF	; 255
    718e:	3a 83       	std	Y+2, r19	; 0x02
    7190:	29 83       	std	Y+1, r18	; 0x01
    7192:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <ReadEeprom>
    7196:	f8 01       	movw	r30, r16
    7198:	81 93       	st	Z+, r24
    719a:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    719c:	ec 15       	cp	r30, r12
    719e:	fd 05       	cpc	r31, r13
    71a0:	89 f7       	brne	.-30     	; 0x7184 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    71a2:	8f 2d       	mov	r24, r15
    71a4:	0f 90       	pop	r0
    71a6:	0f 90       	pop	r0
    71a8:	df 91       	pop	r29
    71aa:	cf 91       	pop	r28
    71ac:	1f 91       	pop	r17
    71ae:	0f 91       	pop	r16
    71b0:	ff 90       	pop	r15
    71b2:	df 90       	pop	r13
    71b4:	cf 90       	pop	r12
    71b6:	08 95       	ret

000071b8 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    71b8:	00 97       	sbiw	r24, 0x00	; 0
    71ba:	21 f0       	breq	.+8      	; 0x71c4 <GetPrngNumber+0xc>
    71bc:	90 93 cd 0c 	sts	0x0CCD, r25
    71c0:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    71c4:	20 91 cc 0c 	lds	r18, 0x0CCC
    71c8:	30 91 cd 0c 	lds	r19, 0x0CCD
    71cc:	a9 01       	movw	r20, r18
    71ce:	56 95       	lsr	r21
    71d0:	47 95       	ror	r20
    71d2:	56 95       	lsr	r21
    71d4:	47 95       	ror	r20
    71d6:	c9 01       	movw	r24, r18
    71d8:	63 e0       	ldi	r22, 0x03	; 3
    71da:	96 95       	lsr	r25
    71dc:	87 95       	ror	r24
    71de:	6a 95       	dec	r22
    71e0:	e1 f7       	brne	.-8      	; 0x71da <GetPrngNumber+0x22>
    71e2:	84 27       	eor	r24, r20
    71e4:	95 27       	eor	r25, r21
    71e6:	82 27       	eor	r24, r18
    71e8:	93 27       	eor	r25, r19
    71ea:	a9 01       	movw	r20, r18
    71ec:	75 e0       	ldi	r23, 0x05	; 5
    71ee:	56 95       	lsr	r21
    71f0:	47 95       	ror	r20
    71f2:	7a 95       	dec	r23
    71f4:	e1 f7       	brne	.-8      	; 0x71ee <GetPrngNumber+0x36>
    71f6:	84 27       	eor	r24, r20
    71f8:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    71fa:	99 27       	eor	r25, r25
    71fc:	86 95       	lsr	r24
    71fe:	97 95       	ror	r25
    7200:	88 27       	eor	r24, r24
    7202:	36 95       	lsr	r19
    7204:	27 95       	ror	r18
    7206:	82 2b       	or	r24, r18
    7208:	93 2b       	or	r25, r19
    720a:	90 93 cd 0c 	sts	0x0CCD, r25
    720e:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    7212:	08 95       	ret

00007214 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7214:	fc 01       	movw	r30, r24
    7216:	67 87       	std	Z+15, r22	; 0x0f
    7218:	08 95       	ret

0000721a <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    721a:	e0 ed       	ldi	r30, 0xD0	; 208
    721c:	fc e0       	ldi	r31, 0x0C	; 12
    721e:	81 e0       	ldi	r24, 0x01	; 1
    7220:	91 e0       	ldi	r25, 0x01	; 1
    7222:	95 8b       	std	Z+21, r25	; 0x15
    7224:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7226:	63 8b       	std	Z+19, r22	; 0x13
    7228:	08 95       	ret

0000722a <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    722a:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    722c:	90 81       	ld	r25, Z
    722e:	9f 75       	andi	r25, 0x5F	; 95
    7230:	90 83       	st	Z, r25
    7232:	08 95       	ret

00007234 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7234:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7236:	90 81       	ld	r25, Z
    7238:	90 64       	ori	r25, 0x40	; 64
    723a:	90 83       	st	Z, r25
    723c:	08 95       	ret

0000723e <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    723e:	fc 01       	movw	r30, r24
    7240:	66 87       	std	Z+14, r22	; 0x0e
    7242:	08 95       	ret

00007244 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    7244:	fc 01       	movw	r30, r24
    7246:	62 87       	std	Z+10, r22	; 0x0a
    7248:	08 95       	ret

0000724a <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    724a:	fc 01       	movw	r30, r24
    724c:	63 87       	std	Z+11, r22	; 0x0b
    724e:	08 95       	ret

00007250 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    7250:	cf 93       	push	r28
    7252:	df 93       	push	r29
    7254:	ec 01       	movw	r28, r24
    7256:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7258:	29 81       	ldd	r18, Y+1	; 0x01
    725a:	30 e0       	ldi	r19, 0x00	; 0
    725c:	f9 01       	movw	r30, r18
    725e:	ee 0f       	add	r30, r30
    7260:	ff 1f       	adc	r31, r31
    7262:	e8 5f       	subi	r30, 0xF8	; 248
    7264:	f3 48       	sbci	r31, 0x83	; 131
    7266:	65 91       	lpm	r22, Z+
    7268:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    726a:	f9 01       	movw	r30, r18
    726c:	e4 0f       	add	r30, r20
    726e:	f1 1d       	adc	r31, r1
    7270:	47 fd       	sbrc	r20, 7
    7272:	fa 95       	dec	r31
    7274:	ee 0f       	add	r30, r30
    7276:	ff 1f       	adc	r31, r31
    7278:	e8 5f       	subi	r30, 0xF8	; 248
    727a:	f3 48       	sbci	r31, 0x83	; 131
    727c:	85 91       	lpm	r24, Z+
    727e:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    7280:	86 1b       	sub	r24, r22
    7282:	97 0b       	sbc	r25, r23
    7284:	68 85       	ldd	r22, Y+8	; 0x08
    7286:	70 e0       	ldi	r23, 0x00	; 0
    7288:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
	if(delta==0)delta++;
    728c:	61 15       	cp	r22, r1
    728e:	71 05       	cpc	r23, r1
    7290:	11 f4       	brne	.+4      	; 0x7296 <PatchCommand11+0x46>
    7292:	61 e0       	ldi	r22, 0x01	; 1
    7294:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    7296:	ea 81       	ldd	r30, Y+2	; 0x02
    7298:	86 e0       	ldi	r24, 0x06	; 6
    729a:	e8 9f       	mul	r30, r24
    729c:	f0 01       	movw	r30, r0
    729e:	11 24       	eor	r1, r1
    72a0:	e0 53       	subi	r30, 0x30	; 48
    72a2:	f3 4f       	sbci	r31, 0xF3	; 243
    72a4:	81 81       	ldd	r24, Z+1	; 0x01
    72a6:	92 81       	ldd	r25, Z+2	; 0x02
    72a8:	86 0f       	add	r24, r22
    72aa:	97 1f       	adc	r25, r23
    72ac:	92 83       	std	Z+2, r25	; 0x02
    72ae:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    72b0:	7e 83       	std	Y+6, r23	; 0x06
    72b2:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    72b4:	88 81       	ld	r24, Y
    72b6:	88 60       	ori	r24, 0x08	; 8
    72b8:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    72ba:	89 81       	ldd	r24, Y+1	; 0x01
    72bc:	48 0f       	add	r20, r24
    72be:	4f 83       	std	Y+7, r20	; 0x07
}
    72c0:	df 91       	pop	r29
    72c2:	cf 91       	pop	r28
    72c4:	08 95       	ret

000072c6 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    72c6:	fc 01       	movw	r30, r24
    72c8:	60 87       	std	Z+8, r22	; 0x08
    72ca:	08 95       	ret

000072cc <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    72cc:	fc 01       	movw	r30, r24
    72ce:	64 83       	std	Z+4, r22	; 0x04
    72d0:	08 95       	ret

000072d2 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    72d2:	fc 01       	movw	r30, r24
    72d4:	82 81       	ldd	r24, Z+2	; 0x02
    72d6:	0c 94 84 3d 	jmp	0x7b08	; 0x7b08 <SetMixerWave>

000072da <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    72da:	fc 01       	movw	r30, r24
	track->note+=param;
    72dc:	91 81       	ldd	r25, Z+1	; 0x01
    72de:	69 0f       	add	r22, r25
    72e0:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    72e2:	82 81       	ldd	r24, Z+2	; 0x02
    72e4:	0c 94 6d 3d 	jmp	0x7ada	; 0x7ada <SetMixerNote>

000072e8 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    72e8:	fc 01       	movw	r30, r24
	track->note-=param;
    72ea:	91 81       	ldd	r25, Z+1	; 0x01
    72ec:	96 1b       	sub	r25, r22
    72ee:	69 2f       	mov	r22, r25
    72f0:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    72f2:	82 81       	ldd	r24, Z+2	; 0x02
    72f4:	0c 94 6d 3d 	jmp	0x7ada	; 0x7ada <SetMixerNote>

000072f8 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    72f8:	1f 93       	push	r17
    72fa:	cf 93       	push	r28
    72fc:	df 93       	push	r29
    72fe:	ec 01       	movw	r28, r24
    7300:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7302:	8a 81       	ldd	r24, Y+2	; 0x02
    7304:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <SetMixerNote>
	track->note=param;
    7308:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    730a:	88 81       	ld	r24, Y
    730c:	87 7f       	andi	r24, 0xF7	; 247
    730e:	88 83       	st	Y, r24
}
    7310:	df 91       	pop	r29
    7312:	cf 91       	pop	r28
    7314:	1f 91       	pop	r17
    7316:	08 95       	ret

00007318 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7318:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    731a:	14 96       	adiw	r26, 0x04	; 4
    731c:	8c 91       	ld	r24, X
    731e:	14 97       	sbiw	r26, 0x04	; 4
    7320:	88 23       	and	r24, r24
    7322:	19 f1       	breq	.+70     	; 0x736a <PatchCommand14+0x52>
    7324:	55 96       	adiw	r26, 0x15	; 21
    7326:	2d 91       	ld	r18, X+
    7328:	3c 91       	ld	r19, X
    732a:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    732c:	66 23       	and	r22, r22
    732e:	79 f0       	breq	.+30     	; 0x734e <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7330:	77 27       	eor	r23, r23
    7332:	67 fd       	sbrc	r22, 7
    7334:	70 95       	com	r23
    7336:	6f 5f       	subi	r22, 0xFF	; 255
    7338:	7f 4f       	sbci	r23, 0xFF	; 255
    733a:	ab 01       	movw	r20, r22
    733c:	44 0f       	add	r20, r20
    733e:	55 1f       	adc	r21, r21
    7340:	64 0f       	add	r22, r20
    7342:	75 1f       	adc	r23, r21
    7344:	26 1b       	sub	r18, r22
    7346:	37 0b       	sbc	r19, r23
    7348:	09 c0       	rjmp	.+18     	; 0x735c <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    734a:	ef 3f       	cpi	r30, 0xFF	; 255
    734c:	39 f0       	breq	.+14     	; 0x735c <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    734e:	23 50       	subi	r18, 0x03	; 3
    7350:	31 09       	sbc	r19, r1
    7352:	f9 01       	movw	r30, r18
    7354:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7356:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7358:	ed 30       	cpi	r30, 0x0D	; 13
    735a:	b9 f7       	brne	.-18     	; 0x734a <PatchCommand14+0x32>
    735c:	56 96       	adiw	r26, 0x16	; 22
    735e:	3c 93       	st	X, r19
    7360:	2e 93       	st	-X, r18
    7362:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7364:	81 50       	subi	r24, 0x01	; 1
    7366:	14 96       	adiw	r26, 0x04	; 4
    7368:	8c 93       	st	X, r24
    736a:	08 95       	ret

0000736c <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    736c:	90 93 71 0d 	sts	0x0D71, r25
    7370:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7374:	8f e6       	ldi	r24, 0x6F	; 111
    7376:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    737a:	10 92 ce 0c 	sts	0x0CCE, r1
    737e:	eb e0       	ldi	r30, 0x0B	; 11
    7380:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7382:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7384:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7386:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7388:	28 e1       	ldi	r18, 0x18	; 24
    738a:	df 01       	movw	r26, r30
    738c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    738e:	8c 93       	st	X, r24
    7390:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7392:	9c 93       	st	X, r25
    7394:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7396:	1c 92       	st	X, r1
    7398:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    739a:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    739c:	10 82       	st	Z, r1
    739e:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    73a0:	2c 93       	st	X, r18
    73a2:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    73a4:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    73a6:	8f 5f       	subi	r24, 0xFF	; 255
    73a8:	77 96       	adiw	r30, 0x17	; 23
    73aa:	85 30       	cpi	r24, 0x05	; 5
    73ac:	71 f7       	brne	.-36     	; 0x738a <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    73ae:	08 95       	ret

000073b0 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    73b0:	eb ef       	ldi	r30, 0xFB	; 251
    73b2:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73b4:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    73b6:	20 81       	ld	r18, Z
    73b8:	2f 77       	andi	r18, 0x7F	; 127
    73ba:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73bc:	33 83       	std	Z+3, r19	; 0x03
    73be:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    73c0:	2d e0       	ldi	r18, 0x0D	; 13
    73c2:	ee 36       	cpi	r30, 0x6E	; 110
    73c4:	f2 07       	cpc	r31, r18
    73c6:	b9 f7       	brne	.-18     	; 0x73b6 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    73c8:	01 96       	adiw	r24, 0x01	; 1
    73ca:	90 93 78 0d 	sts	0x0D78, r25
    73ce:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    73d2:	90 93 fa 0c 	sts	0x0CFA, r25
    73d6:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    73da:	90 93 7a 0d 	sts	0x0D7A, r25
    73de:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    73e2:	10 92 75 0d 	sts	0x0D75, r1
    73e6:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    73ea:	10 92 6f 0d 	sts	0x0D6F, r1
    73ee:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    73f2:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    73f6:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    73fa:	81 e0       	ldi	r24, 0x01	; 1
    73fc:	80 93 ce 0c 	sts	0x0CCE, r24
    7400:	08 95       	ret

00007402 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    7402:	eb ef       	ldi	r30, 0xFB	; 251
    7404:	fc e0       	ldi	r31, 0x0C	; 12
    7406:	8a ef       	ldi	r24, 0xFA	; 250
    7408:	87 87       	std	Z+15, r24	; 0x0f
    740a:	86 a3       	std	Z+38, r24	; 0x26
    740c:	80 93 38 0d 	sts	0x0D38, r24
    7410:	80 93 4f 0d 	sts	0x0D4F, r24
    7414:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    7418:	10 92 ce 0c 	sts	0x0CCE, r1
    741c:	08 95       	ret

0000741e <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    741e:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7420:	ed 91       	ld	r30, X+
    7422:	fc 91       	ld	r31, X
    7424:	11 97       	sbiw	r26, 0x01	; 1
    7426:	9f 01       	movw	r18, r30
    7428:	2f 5f       	subi	r18, 0xFF	; 255
    742a:	3f 4f       	sbci	r19, 0xFF	; 255
    742c:	11 96       	adiw	r26, 0x01	; 1
    742e:	3c 93       	st	X, r19
    7430:	2e 93       	st	-X, r18
    7432:	e4 91       	lpm	r30, Z
    7434:	e7 fd       	sbrc	r30, 7
    7436:	03 c0       	rjmp	.+6      	; 0x743e <ReadVarLen+0x20>
    7438:	8e 2f       	mov	r24, r30
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	08 95       	ret
    {
       value &= 0x7F;
    743e:	ef 77       	andi	r30, 0x7F	; 127
    7440:	8e 2f       	mov	r24, r30
    7442:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7444:	96 95       	lsr	r25
    7446:	98 2f       	mov	r25, r24
    7448:	88 27       	eor	r24, r24
    744a:	97 95       	ror	r25
    744c:	87 95       	ror	r24
    744e:	2f 5f       	subi	r18, 0xFF	; 255
    7450:	3f 4f       	sbci	r19, 0xFF	; 255
    7452:	f9 01       	movw	r30, r18
    7454:	31 97       	sbiw	r30, 0x01	; 1
    7456:	e4 91       	lpm	r30, Z
    7458:	4e 2f       	mov	r20, r30
    745a:	4f 77       	andi	r20, 0x7F	; 127
    745c:	84 0f       	add	r24, r20
    745e:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7460:	e7 fd       	sbrc	r30, 7
    7462:	f0 cf       	rjmp	.-32     	; 0x7444 <ReadVarLen+0x26>
    7464:	2d 93       	st	X+, r18
    7466:	3c 93       	st	X, r19
    }


    return value;
}
    7468:	08 95       	ret

0000746a <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    746a:	ef 92       	push	r14
    746c:	ff 92       	push	r15
    746e:	0f 93       	push	r16
    7470:	1f 93       	push	r17
    7472:	cf 93       	push	r28
    7474:	df 93       	push	r29
    7476:	1f 92       	push	r1
    7478:	cd b7       	in	r28, 0x3d	; 61
    747a:	de b7       	in	r29, 0x3e	; 62
    747c:	7c 01       	movw	r14, r24
    747e:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7480:	fc 01       	movw	r30, r24
    7482:	80 81       	ld	r24, Z
    7484:	08 2f       	mov	r16, r24
    7486:	00 1f       	adc	r16, r16
    7488:	00 27       	eor	r16, r16
    748a:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    748c:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    748e:	9f ef       	ldi	r25, 0xFF	; 255
    7490:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7492:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7494:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7496:	87 7b       	andi	r24, 0xB7	; 183
    7498:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    749a:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    749c:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    749e:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    74a0:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    74a2:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    74a4:	82 81       	ldd	r24, Z+2	; 0x02
    74a6:	83 30       	cpi	r24, 0x03	; 3
    74a8:	69 f4       	brne	.+26     	; 0x74c4 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    74aa:	01 11       	cpse	r16, r1
    74ac:	01 c0       	rjmp	.+2      	; 0x74b0 <TriggerCommon+0x46>
    74ae:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    74b0:	81 e0       	ldi	r24, 0x01	; 1
    74b2:	91 e0       	ldi	r25, 0x01	; 1
    74b4:	90 93 e5 0c 	sts	0x0CE5, r25
    74b8:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    74bc:	81 e0       	ldi	r24, 0x01	; 1
    74be:	80 93 e3 0c 	sts	0x0CE3, r24
    74c2:	39 c0       	rjmp	.+114    	; 0x7536 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    74c4:	84 30       	cpi	r24, 0x04	; 4
    74c6:	69 f5       	brne	.+90     	; 0x7522 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    74c8:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    74cc:	80 91 70 0d 	lds	r24, 0x0D70
    74d0:	90 91 71 0d 	lds	r25, 0x0D71
    74d4:	f9 e0       	ldi	r31, 0x09	; 9
    74d6:	6f 9f       	mul	r22, r31
    74d8:	80 0d       	add	r24, r0
    74da:	91 1d       	adc	r25, r1
    74dc:	11 24       	eor	r1, r1
    74de:	fc 01       	movw	r30, r24
    74e0:	31 96       	adiw	r30, 0x01	; 1
    74e2:	a5 91       	lpm	r26, Z+
    74e4:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    74e6:	b0 93 ed 0c 	sts	0x0CED, r27
    74ea:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    74ee:	ac 01       	movw	r20, r24
    74f0:	49 5f       	subi	r20, 0xF9	; 249
    74f2:	5f 4f       	sbci	r21, 0xFF	; 255
    74f4:	fa 01       	movw	r30, r20
    74f6:	65 91       	lpm	r22, Z+
    74f8:	74 91       	lpm	r23, Z
    74fa:	05 96       	adiw	r24, 0x05	; 5
    74fc:	fc 01       	movw	r30, r24
    74fe:	85 91       	lpm	r24, Z+
    7500:	94 91       	lpm	r25, Z
    7502:	68 1b       	sub	r22, r24
    7504:	79 0b       	sbc	r23, r25
    7506:	70 93 ef 0c 	sts	0x0CEF, r23
    750a:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    750e:	fa 01       	movw	r30, r20
    7510:	85 91       	lpm	r24, Z+
    7512:	94 91       	lpm	r25, Z
    7514:	a8 0f       	add	r26, r24
    7516:	b9 1f       	adc	r27, r25
    7518:	b0 93 f1 0c 	sts	0x0CF1, r27
    751c:	a0 93 f0 0c 	sts	0x0CF0, r26
    7520:	05 c0       	rjmp	.+10     	; 0x752c <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7522:	60 e0       	ldi	r22, 0x00	; 0
    7524:	29 83       	std	Y+1, r18	; 0x01
    7526:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <SetMixerWave>
			SetMixerNote(track->channel,note);
    752a:	29 81       	ldd	r18, Y+1	; 0x01
    752c:	62 2f       	mov	r22, r18
    752e:	f7 01       	movw	r30, r14
    7530:	82 81       	ldd	r24, Z+2	; 0x02
    7532:	0e 94 6d 3d 	call	0x7ada	; 0x7ada <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7536:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7538:	00 23       	and	r16, r16
    753a:	11 f0       	breq	.+4      	; 0x7540 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    753c:	11 8b       	std	Z+17, r17	; 0x11
    753e:	01 c0       	rjmp	.+2      	; 0x7542 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    7540:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7542:	e0 91 70 0d 	lds	r30, 0x0D70
    7546:	f0 91 71 0d 	lds	r31, 0x0D71
    754a:	39 e0       	ldi	r19, 0x09	; 9
    754c:	13 9f       	mul	r17, r19
    754e:	e0 0d       	add	r30, r0
    7550:	f1 1d       	adc	r31, r1
    7552:	11 24       	eor	r1, r1
    7554:	33 96       	adiw	r30, 0x03	; 3
    7556:	85 91       	lpm	r24, Z+
    7558:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    755a:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    755c:	00 97       	sbiw	r24, 0x00	; 0
    755e:	19 f4       	brne	.+6      	; 0x7566 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    7560:	16 8a       	std	Z+22, r1	; 0x16
    7562:	15 8a       	std	Z+21, r1	; 0x15
    7564:	08 c0       	rjmp	.+16     	; 0x7576 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    7566:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7568:	fc 01       	movw	r30, r24
    756a:	24 91       	lpm	r18, Z
    756c:	f7 01       	movw	r30, r14
    756e:	22 8b       	std	Z+18, r18	; 0x12
    7570:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7572:	96 8b       	std	Z+22, r25	; 0x16
    7574:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7576:	0f 90       	pop	r0
    7578:	df 91       	pop	r29
    757a:	cf 91       	pop	r28
    757c:	1f 91       	pop	r17
    757e:	0f 91       	pop	r16
    7580:	ff 90       	pop	r15
    7582:	ef 90       	pop	r14
    7584:	08 95       	ret

00007586 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7586:	cf 93       	push	r28
    7588:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    758a:	e0 91 70 0d 	lds	r30, 0x0D70
    758e:	f0 91 71 0d 	lds	r31, 0x0D71
    7592:	99 e0       	ldi	r25, 0x09	; 9
    7594:	89 9f       	mul	r24, r25
    7596:	e0 0d       	add	r30, r0
    7598:	f1 1d       	adc	r31, r1
    759a:	11 24       	eor	r1, r1
    759c:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    759e:	e1 30       	cpi	r30, 0x01	; 1
    75a0:	e9 f0       	breq	.+58     	; 0x75dc <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    75a2:	e2 30       	cpi	r30, 0x02	; 2
    75a4:	e9 f0       	breq	.+58     	; 0x75e0 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    75a6:	20 91 12 0d 	lds	r18, 0x0D12
    75aa:	27 ff       	sbrs	r18, 7
    75ac:	1d c0       	rjmp	.+58     	; 0x75e8 <TriggerFx+0x62>
    75ae:	20 91 23 0d 	lds	r18, 0x0D23
    75b2:	28 13       	cpse	r18, r24
    75b4:	02 c0       	rjmp	.+4      	; 0x75ba <TriggerFx+0x34>
    75b6:	41 11       	cpse	r20, r1
    75b8:	17 c0       	rjmp	.+46     	; 0x75e8 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    75ba:	20 91 29 0d 	lds	r18, 0x0D29
    75be:	27 ff       	sbrs	r18, 7
    75c0:	11 c0       	rjmp	.+34     	; 0x75e4 <TriggerFx+0x5e>
    75c2:	20 91 3a 0d 	lds	r18, 0x0D3A
    75c6:	28 13       	cpse	r18, r24
    75c8:	02 c0       	rjmp	.+4      	; 0x75ce <TriggerFx+0x48>
    75ca:	41 11       	cpse	r20, r1
    75cc:	0b c0       	rjmp	.+22     	; 0x75e4 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    75ce:	20 91 26 0d 	lds	r18, 0x0D26
    75d2:	90 91 3d 0d 	lds	r25, 0x0D3D
    75d6:	92 17       	cp	r25, r18
    75d8:	28 f4       	brcc	.+10     	; 0x75e4 <TriggerFx+0x5e>
    75da:	06 c0       	rjmp	.+12     	; 0x75e8 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    75dc:	c3 e0       	ldi	r28, 0x03	; 3
    75de:	05 c0       	rjmp	.+10     	; 0x75ea <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    75e0:	c4 e0       	ldi	r28, 0x04	; 4
    75e2:	03 c0       	rjmp	.+6      	; 0x75ea <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    75e4:	c2 e0       	ldi	r28, 0x02	; 2
    75e6:	01 c0       	rjmp	.+2      	; 0x75ea <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    75e8:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    75ea:	97 e1       	ldi	r25, 0x17	; 23
    75ec:	c9 9f       	mul	r28, r25
    75ee:	e0 01       	movw	r28, r0
    75f0:	11 24       	eor	r1, r1
    75f2:	c5 50       	subi	r28, 0x05	; 5
    75f4:	d3 4f       	sbci	r29, 0xF3	; 243
    75f6:	90 e8       	ldi	r25, 0x80	; 128
    75f8:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    75fa:	1e 8a       	std	Y+22, r1	; 0x16
    75fc:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    75fe:	20 e5       	ldi	r18, 0x50	; 80
    7600:	46 2f       	mov	r20, r22
    7602:	68 2f       	mov	r22, r24
    7604:	ce 01       	movw	r24, r28
    7606:	0e 94 35 3a 	call	0x746a	; 0x746a <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    760a:	88 81       	ld	r24, Y
    760c:	80 62       	ori	r24, 0x20	; 32
    760e:	88 83       	st	Y, r24
}
    7610:	df 91       	pop	r29
    7612:	cf 91       	pop	r28
    7614:	08 95       	ret

00007616 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7616:	cf 93       	push	r28
    7618:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    761a:	a8 2f       	mov	r26, r24
    761c:	b0 e0       	ldi	r27, 0x00	; 0
    761e:	97 e1       	ldi	r25, 0x17	; 23
    7620:	89 9f       	mul	r24, r25
    7622:	f0 01       	movw	r30, r0
    7624:	11 24       	eor	r1, r1
    7626:	e5 50       	subi	r30, 0x05	; 5
    7628:	f3 4f       	sbci	r31, 0xF3	; 243
    762a:	80 81       	ld	r24, Z
    762c:	85 ff       	sbrs	r24, 5
    762e:	02 c0       	rjmp	.+4      	; 0x7634 <TriggerNote+0x1e>
    7630:	87 fd       	sbrc	r24, 7
    7632:	2e c0       	rjmp	.+92     	; 0x7690 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7634:	21 11       	cpse	r18, r1
    7636:	18 c0       	rjmp	.+48     	; 0x7668 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7638:	97 e1       	ldi	r25, 0x17	; 23
    763a:	9a 9f       	mul	r25, r26
    763c:	f0 01       	movw	r30, r0
    763e:	9b 9f       	mul	r25, r27
    7640:	f0 0d       	add	r31, r0
    7642:	11 24       	eor	r1, r1
    7644:	e5 50       	subi	r30, 0x05	; 5
    7646:	f3 4f       	sbci	r31, 0xF3	; 243
    7648:	97 85       	ldd	r25, Z+15	; 0x0f
    764a:	91 11       	cpse	r25, r1
    764c:	02 c0       	rjmp	.+4      	; 0x7652 <TriggerNote+0x3c>
    764e:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7650:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7652:	97 e1       	ldi	r25, 0x17	; 23
    7654:	9a 9f       	mul	r25, r26
    7656:	f0 01       	movw	r30, r0
    7658:	9b 9f       	mul	r25, r27
    765a:	f0 0d       	add	r31, r0
    765c:	11 24       	eor	r1, r1
    765e:	e5 50       	subi	r30, 0x05	; 5
    7660:	f3 4f       	sbci	r31, 0xF3	; 243
    7662:	8f 7b       	andi	r24, 0xBF	; 191
    7664:	80 83       	st	Z, r24
    7666:	14 c0       	rjmp	.+40     	; 0x7690 <TriggerNote+0x7a>
    7668:	82 2f       	mov	r24, r18
    766a:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    766c:	97 e1       	ldi	r25, 0x17	; 23
    766e:	9a 9f       	mul	r25, r26
    7670:	e0 01       	movw	r28, r0
    7672:	9b 9f       	mul	r25, r27
    7674:	d0 0d       	add	r29, r0
    7676:	11 24       	eor	r1, r1
    7678:	c5 50       	subi	r28, 0x05	; 5
    767a:	d3 4f       	sbci	r29, 0xF3	; 243
    767c:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    767e:	1e 8a       	std	Y+22, r1	; 0x16
    7680:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7682:	48 2f       	mov	r20, r24
    7684:	ce 01       	movw	r24, r28
    7686:	0e 94 35 3a 	call	0x746a	; 0x746a <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    768a:	88 81       	ld	r24, Y
    768c:	80 62       	ori	r24, 0x20	; 32
    768e:	88 83       	st	Y, r24
		}

	}
}
    7690:	df 91       	pop	r29
    7692:	cf 91       	pop	r28
    7694:	08 95       	ret

00007696 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7696:	6f 92       	push	r6
    7698:	7f 92       	push	r7
    769a:	8f 92       	push	r8
    769c:	9f 92       	push	r9
    769e:	af 92       	push	r10
    76a0:	bf 92       	push	r11
    76a2:	cf 92       	push	r12
    76a4:	df 92       	push	r13
    76a6:	ef 92       	push	r14
    76a8:	ff 92       	push	r15
    76aa:	0f 93       	push	r16
    76ac:	1f 93       	push	r17
    76ae:	cf 93       	push	r28
    76b0:	df 93       	push	r29
    76b2:	cb ef       	ldi	r28, 0xFB	; 251
    76b4:	dc e0       	ldi	r29, 0x0C	; 12
    76b6:	00 ed       	ldi	r16, 0xD0	; 208
    76b8:	1c e0       	ldi	r17, 0x0C	; 12
    76ba:	d8 01       	movw	r26, r16
    76bc:	9e 01       	movw	r18, r28
    76be:	40 e0       	ldi	r20, 0x00	; 0
    76c0:	50 e0       	ldi	r21, 0x00	; 0
    76c2:	ca 01       	movw	r24, r20
    76c4:	85 50       	subi	r24, 0x05	; 5
    76c6:	93 4f       	sbci	r25, 0xF3	; 243
    76c8:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    76ca:	fc 01       	movw	r30, r24
    76cc:	87 85       	ldd	r24, Z+15	; 0x0f
    76ce:	88 23       	and	r24, r24
    76d0:	91 f0       	breq	.+36     	; 0x76f6 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    76d2:	66 85       	ldd	r22, Z+14	; 0x0e
    76d4:	99 27       	eor	r25, r25
    76d6:	87 fd       	sbrc	r24, 7
    76d8:	90 95       	com	r25
    76da:	86 0f       	add	r24, r22
    76dc:	91 1d       	adc	r25, r1
    76de:	8f 3f       	cpi	r24, 0xFF	; 255
    76e0:	91 05       	cpc	r25, r1
    76e2:	19 f0       	breq	.+6      	; 0x76ea <ProcessMusic+0x54>
    76e4:	14 f0       	brlt	.+4      	; 0x76ea <ProcessMusic+0x54>
    76e6:	8f ef       	ldi	r24, 0xFF	; 255
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	97 ff       	sbrs	r25, 7
    76ec:	02 c0       	rjmp	.+4      	; 0x76f2 <ProcessMusic+0x5c>
    76ee:	80 e0       	ldi	r24, 0x00	; 0
    76f0:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    76f2:	f6 01       	movw	r30, r12
    76f4:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    76f6:	f9 01       	movw	r30, r18
    76f8:	f0 80       	ld	r15, Z
    76fa:	f3 fe       	sbrs	r15, 3
    76fc:	2a c0       	rjmp	.+84     	; 0x7752 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    76fe:	65 81       	ldd	r22, Z+5	; 0x05
    7700:	76 81       	ldd	r23, Z+6	; 0x06
    7702:	11 96       	adiw	r26, 0x01	; 1
    7704:	8d 91       	ld	r24, X+
    7706:	9c 91       	ld	r25, X
    7708:	12 97       	sbiw	r26, 0x02	; 2
    770a:	86 0f       	add	r24, r22
    770c:	97 1f       	adc	r25, r23
    770e:	12 96       	adiw	r26, 0x02	; 2
    7710:	9c 93       	st	X, r25
    7712:	8e 93       	st	-X, r24
    7714:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7716:	f6 01       	movw	r30, r12
    7718:	e7 80       	ldd	r14, Z+7	; 0x07
    771a:	ee 2d       	mov	r30, r14
    771c:	f0 e0       	ldi	r31, 0x00	; 0
    771e:	ee 0f       	add	r30, r30
    7720:	ff 1f       	adc	r31, r31
    7722:	e8 5f       	subi	r30, 0xF8	; 248
    7724:	f3 48       	sbci	r31, 0x83	; 131
    7726:	c5 90       	lpm	r12, Z+
    7728:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    772a:	16 16       	cp	r1, r22
    772c:	17 06       	cpc	r1, r23
    772e:	24 f4       	brge	.+8      	; 0x7738 <ProcessMusic+0xa2>
    7730:	8c 15       	cp	r24, r12
    7732:	9d 05       	cpc	r25, r13
    7734:	30 f4       	brcc	.+12     	; 0x7742 <ProcessMusic+0xac>
    7736:	0d c0       	rjmp	.+26     	; 0x7752 <ProcessMusic+0xbc>
    7738:	67 2b       	or	r22, r23
    773a:	59 f0       	breq	.+22     	; 0x7752 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    773c:	c8 16       	cp	r12, r24
    773e:	d9 06       	cpc	r13, r25
    7740:	40 f0       	brcs	.+16     	; 0x7752 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7742:	12 96       	adiw	r26, 0x02	; 2
    7744:	dc 92       	st	X, r13
    7746:	ce 92       	st	-X, r12
    7748:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    774a:	8f 2d       	mov	r24, r15
    774c:	87 7f       	andi	r24, 0xF7	; 247
    774e:	f9 01       	movw	r30, r18
    7750:	80 83       	st	Z, r24
    7752:	49 5e       	subi	r20, 0xE9	; 233
    7754:	5f 4f       	sbci	r21, 0xFF	; 255
    7756:	29 5e       	subi	r18, 0xE9	; 233
    7758:	3f 4f       	sbci	r19, 0xFF	; 255
    775a:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    775c:	43 37       	cpi	r20, 0x73	; 115
    775e:	51 05       	cpc	r21, r1
    7760:	09 f0       	breq	.+2      	; 0x7764 <ProcessMusic+0xce>
    7762:	af cf       	rjmp	.-162    	; 0x76c2 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7764:	80 91 ce 0c 	lds	r24, 0x0CCE
    7768:	88 23       	and	r24, r24
    776a:	09 f4       	brne	.+2      	; 0x776e <ProcessMusic+0xd8>
    776c:	cc c0       	rjmp	.+408    	; 0x7906 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    776e:	57 e1       	ldi	r21, 0x17	; 23
    7770:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7772:	80 91 6e 0d 	lds	r24, 0x0D6E
    7776:	90 91 6f 0d 	lds	r25, 0x0D6F
    777a:	20 91 74 0d 	lds	r18, 0x0D74
    777e:	30 91 75 0d 	lds	r19, 0x0D75
    7782:	82 17       	cp	r24, r18
    7784:	93 07       	cpc	r25, r19
    7786:	09 f0       	breq	.+2      	; 0x778a <ProcessMusic+0xf4>
    7788:	b9 c0       	rjmp	.+370    	; 0x78fc <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    778a:	20 91 77 0d 	lds	r18, 0x0D77
    778e:	30 91 78 0d 	lds	r19, 0x0D78
    7792:	b9 01       	movw	r22, r18
    7794:	6f 5f       	subi	r22, 0xFF	; 255
    7796:	7f 4f       	sbci	r23, 0xFF	; 255
    7798:	70 93 78 0d 	sts	0x0D78, r23
    779c:	60 93 77 0d 	sts	0x0D77, r22
    77a0:	f9 01       	movw	r30, r18
    77a2:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    77a4:	4f 3f       	cpi	r20, 0xFF	; 255
    77a6:	79 f5       	brne	.+94     	; 0x7806 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    77a8:	a9 01       	movw	r20, r18
    77aa:	4e 5f       	subi	r20, 0xFE	; 254
    77ac:	5f 4f       	sbci	r21, 0xFF	; 255
    77ae:	50 93 78 0d 	sts	0x0D78, r21
    77b2:	40 93 77 0d 	sts	0x0D77, r20
    77b6:	fb 01       	movw	r30, r22
    77b8:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    77ba:	6f 32       	cpi	r22, 0x2F	; 47
    77bc:	19 f4       	brne	.+6      	; 0x77c4 <ProcessMusic+0x12e>
						playSong=false;
    77be:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    77c2:	9c c0       	rjmp	.+312    	; 0x78fc <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    77c4:	66 30       	cpi	r22, 0x06	; 6
    77c6:	09 f0       	breq	.+2      	; 0x77ca <ProcessMusic+0x134>
    77c8:	8c c0       	rjmp	.+280    	; 0x78e2 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    77ca:	fa 01       	movw	r30, r20
    77cc:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    77ce:	c9 01       	movw	r24, r18
    77d0:	04 96       	adiw	r24, 0x04	; 4
    77d2:	90 93 78 0d 	sts	0x0D78, r25
    77d6:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    77da:	f9 01       	movw	r30, r18
    77dc:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    77de:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    77e0:	e3 35       	cpi	r30, 0x53	; 83
    77e2:	29 f4       	brne	.+10     	; 0x77ee <ProcessMusic+0x158>
							loopStart=songPos;
    77e4:	90 93 7a 0d 	sts	0x0D7A, r25
    77e8:	80 93 79 0d 	sts	0x0D79, r24
    77ec:	7a c0       	rjmp	.+244    	; 0x78e2 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    77ee:	e5 34       	cpi	r30, 0x45	; 69
    77f0:	09 f0       	breq	.+2      	; 0x77f4 <ProcessMusic+0x15e>
    77f2:	77 c0       	rjmp	.+238    	; 0x78e2 <ProcessMusic+0x24c>
							songPos=loopStart;
    77f4:	80 91 79 0d 	lds	r24, 0x0D79
    77f8:	90 91 7a 0d 	lds	r25, 0x0D7A
    77fc:	90 93 78 0d 	sts	0x0D78, r25
    7800:	80 93 77 0d 	sts	0x0D77, r24
    7804:	6e c0       	rjmp	.+220    	; 0x78e2 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7806:	47 fd       	sbrc	r20, 7
    7808:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    780c:	90 91 72 0d 	lds	r25, 0x0D72
    7810:	89 2f       	mov	r24, r25
    7812:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7814:	47 ff       	sbrs	r20, 7
    7816:	08 c0       	rjmp	.+16     	; 0x7828 <ProcessMusic+0x192>
    7818:	2e 5f       	subi	r18, 0xFE	; 254
    781a:	3f 4f       	sbci	r19, 0xFF	; 255
    781c:	30 93 78 0d 	sts	0x0D78, r19
    7820:	20 93 77 0d 	sts	0x0D77, r18
    7824:	fb 01       	movw	r30, r22
    7826:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7828:	90 7f       	andi	r25, 0xF0	; 240
    782a:	90 3b       	cpi	r25, 0xB0	; 176
    782c:	e1 f0       	breq	.+56     	; 0x7866 <ProcessMusic+0x1d0>
    782e:	90 3c       	cpi	r25, 0xC0	; 192
    7830:	09 f4       	brne	.+2      	; 0x7834 <ProcessMusic+0x19e>
    7832:	51 c0       	rjmp	.+162    	; 0x78d6 <ProcessMusic+0x240>
    7834:	90 39       	cpi	r25, 0x90	; 144
    7836:	09 f0       	breq	.+2      	; 0x783a <ProcessMusic+0x1a4>
    7838:	54 c0       	rjmp	.+168    	; 0x78e2 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    783a:	e0 91 77 0d 	lds	r30, 0x0D77
    783e:	f0 91 78 0d 	lds	r31, 0x0D78
    7842:	9f 01       	movw	r18, r30
    7844:	2f 5f       	subi	r18, 0xFF	; 255
    7846:	3f 4f       	sbci	r19, 0xFF	; 255
    7848:	30 93 78 0d 	sts	0x0D78, r19
    784c:	20 93 77 0d 	sts	0x0D77, r18
    7850:	24 91       	lpm	r18, Z
    7852:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7854:	f8 9e       	mul	r15, r24
    7856:	f0 01       	movw	r30, r0
    7858:	11 24       	eor	r1, r1
    785a:	e5 50       	subi	r30, 0x05	; 5
    785c:	f3 4f       	sbci	r31, 0xF3	; 243
    785e:	60 89       	ldd	r22, Z+16	; 0x10
    7860:	0e 94 0b 3b 	call	0x7616	; 0x7616 <TriggerNote>
    7864:	3e c0       	rjmp	.+124    	; 0x78e2 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7866:	e0 91 77 0d 	lds	r30, 0x0D77
    786a:	f0 91 78 0d 	lds	r31, 0x0D78
    786e:	9f 01       	movw	r18, r30
    7870:	2f 5f       	subi	r18, 0xFF	; 255
    7872:	3f 4f       	sbci	r19, 0xFF	; 255
    7874:	30 93 78 0d 	sts	0x0D78, r19
    7878:	20 93 77 0d 	sts	0x0D77, r18
    787c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    787e:	47 30       	cpi	r20, 0x07	; 7
    7880:	49 f4       	brne	.+18     	; 0x7894 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7882:	f8 9e       	mul	r15, r24
    7884:	d0 01       	movw	r26, r0
    7886:	11 24       	eor	r1, r1
    7888:	a5 50       	subi	r26, 0x05	; 5
    788a:	b3 4f       	sbci	r27, 0xF3	; 243
    788c:	ee 0f       	add	r30, r30
    788e:	1c 96       	adiw	r26, 0x0c	; 12
    7890:	ec 93       	st	X, r30
    7892:	27 c0       	rjmp	.+78     	; 0x78e2 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7894:	4b 30       	cpi	r20, 0x0B	; 11
    7896:	49 f4       	brne	.+18     	; 0x78aa <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7898:	f8 9e       	mul	r15, r24
    789a:	d0 01       	movw	r26, r0
    789c:	11 24       	eor	r1, r1
    789e:	a5 50       	subi	r26, 0x05	; 5
    78a0:	b3 4f       	sbci	r27, 0xF3	; 243
    78a2:	ee 0f       	add	r30, r30
    78a4:	13 96       	adiw	r26, 0x03	; 3
    78a6:	ec 93       	st	X, r30
    78a8:	1c c0       	rjmp	.+56     	; 0x78e2 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    78aa:	4c 35       	cpi	r20, 0x5C	; 92
    78ac:	49 f4       	brne	.+18     	; 0x78c0 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    78ae:	f8 9e       	mul	r15, r24
    78b0:	d0 01       	movw	r26, r0
    78b2:	11 24       	eor	r1, r1
    78b4:	a5 50       	subi	r26, 0x05	; 5
    78b6:	b3 4f       	sbci	r27, 0xF3	; 243
    78b8:	ee 0f       	add	r30, r30
    78ba:	1a 96       	adiw	r26, 0x0a	; 10
    78bc:	ec 93       	st	X, r30
    78be:	11 c0       	rjmp	.+34     	; 0x78e2 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    78c0:	44 36       	cpi	r20, 0x64	; 100
    78c2:	79 f4       	brne	.+30     	; 0x78e2 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    78c4:	f8 9e       	mul	r15, r24
    78c6:	d0 01       	movw	r26, r0
    78c8:	11 24       	eor	r1, r1
    78ca:	a5 50       	subi	r26, 0x05	; 5
    78cc:	b3 4f       	sbci	r27, 0xF3	; 243
    78ce:	ee 0f       	add	r30, r30
    78d0:	1b 96       	adiw	r26, 0x0b	; 11
    78d2:	ec 93       	st	X, r30
    78d4:	06 c0       	rjmp	.+12     	; 0x78e2 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    78d6:	f8 9e       	mul	r15, r24
    78d8:	f0 01       	movw	r30, r0
    78da:	11 24       	eor	r1, r1
    78dc:	e5 50       	subi	r30, 0x05	; 5
    78de:	f3 4f       	sbci	r31, 0xF3	; 243
    78e0:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    78e2:	87 e7       	ldi	r24, 0x77	; 119
    78e4:	9d e0       	ldi	r25, 0x0D	; 13
    78e6:	0e 94 0f 3a 	call	0x741e	; 0x741e <ReadVarLen>
    78ea:	90 93 75 0d 	sts	0x0D75, r25
    78ee:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    78f2:	10 92 6f 0d 	sts	0x0D6F, r1
    78f6:	10 92 6e 0d 	sts	0x0D6E, r1
    78fa:	3b cf       	rjmp	.-394    	; 0x7772 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    78fc:	01 96       	adiw	r24, 0x01	; 1
    78fe:	90 93 6f 0d 	sts	0x0D6F, r25
    7902:	80 93 6e 0d 	sts	0x0D6E, r24
    7906:	94 e0       	ldi	r25, 0x04	; 4
    7908:	a9 2e       	mov	r10, r25
    790a:	9d e0       	ldi	r25, 0x0D	; 13
    790c:	b9 2e       	mov	r11, r25
    790e:	2e e0       	ldi	r18, 0x0E	; 14
    7910:	c2 2e       	mov	r12, r18
    7912:	2d e0       	ldi	r18, 0x0D	; 13
    7914:	d2 2e       	mov	r13, r18
    7916:	3f e0       	ldi	r19, 0x0F	; 15
    7918:	e3 2e       	mov	r14, r19
    791a:	3d e0       	ldi	r19, 0x0D	; 13
    791c:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    791e:	66 24       	eor	r6, r6
    7920:	6a 94       	dec	r6
    7922:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7924:	88 81       	ld	r24, Y
    7926:	85 ff       	sbrs	r24, 5
    7928:	42 c0       	rjmp	.+132    	; 0x79ae <ProcessMusic+0x318>
    792a:	2d 89       	ldd	r18, Y+21	; 0x15
    792c:	3e 89       	ldd	r19, Y+22	; 0x16
    792e:	23 2b       	or	r18, r19
    7930:	09 f4       	brne	.+2      	; 0x7934 <ProcessMusic+0x29e>
    7932:	3d c0       	rjmp	.+122    	; 0x79ae <ProcessMusic+0x318>
    7934:	86 fd       	sbrc	r24, 6
    7936:	3b c0       	rjmp	.+118    	; 0x79ae <ProcessMusic+0x318>
    7938:	47 01       	movw	r8, r14
    793a:	f2 e0       	ldi	r31, 0x02	; 2
    793c:	8f 1a       	sub	r8, r31
    793e:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7940:	d6 01       	movw	r26, r12
    7942:	9c 91       	ld	r25, X
    7944:	f4 01       	movw	r30, r8
    7946:	80 81       	ld	r24, Z
    7948:	98 13       	cpse	r25, r24
    794a:	2e c0       	rjmp	.+92     	; 0x79a8 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    794c:	ed 89       	ldd	r30, Y+21	; 0x15
    794e:	fe 89       	ldd	r31, Y+22	; 0x16
    7950:	bf 01       	movw	r22, r30
    7952:	6f 5f       	subi	r22, 0xFF	; 255
    7954:	7f 4f       	sbci	r23, 0xFF	; 255
    7956:	7e 8b       	std	Y+22, r23	; 0x16
    7958:	6d 8b       	std	Y+21, r22	; 0x15
    795a:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    795c:	8f 3f       	cpi	r24, 0xFF	; 255
    795e:	31 f4       	brne	.+12     	; 0x796c <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7960:	88 81       	ld	r24, Y
    7962:	8f 77       	andi	r24, 0x7F	; 127
    7964:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7966:	1e 8a       	std	Y+22, r1	; 0x16
    7968:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    796a:	1e c0       	rjmp	.+60     	; 0x79a8 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    796c:	9f 01       	movw	r18, r30
    796e:	2e 5f       	subi	r18, 0xFE	; 254
    7970:	3f 4f       	sbci	r19, 0xFF	; 255
    7972:	3e 8b       	std	Y+22, r19	; 0x16
    7974:	2d 8b       	std	Y+21, r18	; 0x15
    7976:	fb 01       	movw	r30, r22
    7978:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    797a:	e8 2f       	mov	r30, r24
    797c:	f0 e0       	ldi	r31, 0x00	; 0
    797e:	ee 0f       	add	r30, r30
    7980:	ff 1f       	adc	r31, r31
    7982:	ec 5f       	subi	r30, 0xFC	; 252
    7984:	fe 4f       	sbci	r31, 0xFE	; 254
    7986:	25 91       	lpm	r18, Z+
    7988:	34 91       	lpm	r19, Z
    798a:	ce 01       	movw	r24, r28
    798c:	f9 01       	movw	r30, r18
    798e:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7990:	ed 89       	ldd	r30, Y+21	; 0x15
    7992:	fe 89       	ldd	r31, Y+22	; 0x16
    7994:	cf 01       	movw	r24, r30
    7996:	01 96       	adiw	r24, 0x01	; 1
    7998:	9e 8b       	std	Y+22, r25	; 0x16
    799a:	8d 8b       	std	Y+21, r24	; 0x15
    799c:	e4 91       	lpm	r30, Z
    799e:	d4 01       	movw	r26, r8
    79a0:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    79a2:	f6 01       	movw	r30, r12
    79a4:	10 82       	st	Z, r1
    79a6:	cc cf       	rjmp	.-104    	; 0x7940 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    79a8:	9f 5f       	subi	r25, 0xFF	; 255
    79aa:	d6 01       	movw	r26, r12
    79ac:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    79ae:	98 81       	ld	r25, Y
    79b0:	95 ff       	sbrs	r25, 5
    79b2:	6c c0       	rjmp	.+216    	; 0x7a8c <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    79b4:	f7 01       	movw	r30, r14
    79b6:	80 81       	ld	r24, Z
    79b8:	8f 3f       	cpi	r24, 0xFF	; 255
    79ba:	11 f0       	breq	.+4      	; 0x79c0 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    79bc:	8f 5f       	subi	r24, 0xFF	; 255
    79be:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    79c0:	97 fd       	sbrc	r25, 7
    79c2:	04 c0       	rjmp	.+8      	; 0x79cc <ProcessMusic+0x336>
    79c4:	f7 01       	movw	r30, r14
    79c6:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    79c8:	90 81       	ld	r25, Z
    79ca:	01 c0       	rjmp	.+2      	; 0x79ce <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    79cc:	9f ef       	ldi	r25, 0xFF	; 255
    79ce:	f7 01       	movw	r30, r14
    79d0:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    79d2:	80 81       	ld	r24, Z
    79d4:	88 23       	and	r24, r24
    79d6:	09 f4       	brne	.+2      	; 0x79da <ProcessMusic+0x344>
    79d8:	4e c0       	rjmp	.+156    	; 0x7a76 <ProcessMusic+0x3e0>
    79da:	31 96       	adiw	r30, 0x01	; 1
    79dc:	50 81       	ld	r21, Z
    79de:	55 23       	and	r21, r21
    79e0:	09 f4       	brne	.+2      	; 0x79e4 <ProcessMusic+0x34e>
    79e2:	49 c0       	rjmp	.+146    	; 0x7a76 <ProcessMusic+0x3e0>
    79e4:	99 23       	and	r25, r25
    79e6:	09 f4       	brne	.+2      	; 0x79ea <ProcessMusic+0x354>
    79e8:	46 c0       	rjmp	.+140    	; 0x7a76 <ProcessMusic+0x3e0>
    79ea:	40 91 73 0d 	lds	r20, 0x0D73
    79ee:	44 23       	and	r20, r20
    79f0:	09 f4       	brne	.+2      	; 0x79f4 <ProcessMusic+0x35e>
    79f2:	41 c0       	rjmp	.+130    	; 0x7a76 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    79f4:	89 9f       	mul	r24, r25
    79f6:	c0 01       	movw	r24, r0
    79f8:	11 24       	eor	r1, r1
    79fa:	93 95       	inc	r25
				uVol>>=8;
    79fc:	89 2f       	mov	r24, r25
    79fe:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7a00:	58 9f       	mul	r21, r24
    7a02:	90 01       	movw	r18, r0
    7a04:	59 9f       	mul	r21, r25
    7a06:	30 0d       	add	r19, r0
    7a08:	11 24       	eor	r1, r1
    7a0a:	c9 01       	movw	r24, r18
    7a0c:	93 95       	inc	r25
				uVol>>=8;
    7a0e:	89 2f       	mov	r24, r25
    7a10:	99 27       	eor	r25, r25
    7a12:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7a14:	50 81       	ld	r21, Z
    7a16:	58 9f       	mul	r21, r24
    7a18:	90 01       	movw	r18, r0
    7a1a:	59 9f       	mul	r21, r25
    7a1c:	30 0d       	add	r19, r0
    7a1e:	11 24       	eor	r1, r1
    7a20:	33 95       	inc	r19
					uVol>>=8;
    7a22:	23 2f       	mov	r18, r19
    7a24:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7a26:	42 9f       	mul	r20, r18
    7a28:	c0 01       	movw	r24, r0
    7a2a:	43 9f       	mul	r20, r19
    7a2c:	90 0d       	add	r25, r0
    7a2e:	11 24       	eor	r1, r1
    7a30:	93 95       	inc	r25
				uVol>>=8;
    7a32:	89 2f       	mov	r24, r25
    7a34:	99 27       	eor	r25, r25
    7a36:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7a38:	20 81       	ld	r18, Z
    7a3a:	22 23       	and	r18, r18
    7a3c:	f1 f0       	breq	.+60     	; 0x7a7a <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7a3e:	d5 01       	movw	r26, r10
    7a40:	ec 91       	ld	r30, X
    7a42:	f0 e0       	ldi	r31, 0x00	; 0
    7a44:	e0 50       	subi	r30, 0x00	; 0
    7a46:	f2 48       	sbci	r31, 0x82	; 130
    7a48:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7a4a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7a4c:	2e 9f       	mul	r18, r30
    7a4e:	f0 01       	movw	r30, r0
    7a50:	11 24       	eor	r1, r1
    7a52:	f3 95       	inc	r31
					tVol>>=8;
    7a54:	ef 2f       	mov	r30, r31
    7a56:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7a58:	a3 01       	movw	r20, r6
    7a5a:	4e 1b       	sub	r20, r30
    7a5c:	5f 0b       	sbc	r21, r31
    7a5e:	48 9f       	mul	r20, r24
    7a60:	90 01       	movw	r18, r0
    7a62:	49 9f       	mul	r20, r25
    7a64:	30 0d       	add	r19, r0
    7a66:	58 9f       	mul	r21, r24
    7a68:	30 0d       	add	r19, r0
    7a6a:	11 24       	eor	r1, r1
    7a6c:	c9 01       	movw	r24, r18
    7a6e:	93 95       	inc	r25
					uVol>>=8;
    7a70:	89 2f       	mov	r24, r25
    7a72:	99 27       	eor	r25, r25
    7a74:	02 c0       	rjmp	.+4      	; 0x7a7a <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7a76:	80 e0       	ldi	r24, 0x00	; 0
    7a78:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7a7a:	f5 01       	movw	r30, r10
    7a7c:	30 81       	ld	r19, Z
    7a7e:	f7 01       	movw	r30, r14
    7a80:	39 97       	sbiw	r30, 0x09	; 9
    7a82:	20 81       	ld	r18, Z
    7a84:	23 0f       	add	r18, r19
    7a86:	d5 01       	movw	r26, r10
    7a88:	2c 93       	st	X, r18
    7a8a:	02 c0       	rjmp	.+4      	; 0x7a90 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7a8c:	80 e0       	ldi	r24, 0x00	; 0
    7a8e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7a90:	f8 01       	movw	r30, r16
    7a92:	80 83       	st	Z, r24
    7a94:	67 96       	adiw	r28, 0x17	; 23
    7a96:	0a 5f       	subi	r16, 0xFA	; 250
    7a98:	1f 4f       	sbci	r17, 0xFF	; 255
    7a9a:	f7 e1       	ldi	r31, 0x17	; 23
    7a9c:	af 0e       	add	r10, r31
    7a9e:	b1 1c       	adc	r11, r1
    7aa0:	87 e1       	ldi	r24, 0x17	; 23
    7aa2:	c8 0e       	add	r12, r24
    7aa4:	d1 1c       	adc	r13, r1
    7aa6:	97 e1       	ldi	r25, 0x17	; 23
    7aa8:	e9 0e       	add	r14, r25
    7aaa:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7aac:	ad e0       	ldi	r26, 0x0D	; 13
    7aae:	ce 36       	cpi	r28, 0x6E	; 110
    7ab0:	da 07       	cpc	r29, r26
    7ab2:	09 f0       	breq	.+2      	; 0x7ab6 <ProcessMusic+0x420>
    7ab4:	37 cf       	rjmp	.-402    	; 0x7924 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7ab6:	df 91       	pop	r29
    7ab8:	cf 91       	pop	r28
    7aba:	1f 91       	pop	r17
    7abc:	0f 91       	pop	r16
    7abe:	ff 90       	pop	r15
    7ac0:	ef 90       	pop	r14
    7ac2:	df 90       	pop	r13
    7ac4:	cf 90       	pop	r12
    7ac6:	bf 90       	pop	r11
    7ac8:	af 90       	pop	r10
    7aca:	9f 90       	pop	r9
    7acc:	8f 90       	pop	r8
    7ace:	7f 90       	pop	r7
    7ad0:	6f 90       	pop	r6
    7ad2:	08 95       	ret

00007ad4 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7ad4:	80 93 73 0d 	sts	0x0D73, r24
    7ad8:	08 95       	ret

00007ada <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7ada:	99 27       	eor	r25, r25
	clr r23
    7adc:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7ade:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7ae0:	09 f4       	brne	.+2      	; 0x7ae4 <set_note_waves>
		ret
    7ae2:	08 95       	ret

00007ae4 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7ae4:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7ae6:	fc e7       	ldi	r31, 0x7C	; 124
	lsl r22
    7ae8:	66 0f       	add	r22, r22
	rol r23
    7aea:	77 1f       	adc	r23, r23
	add ZL,r22
    7aec:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7aee:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7af0:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7af2:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7af4:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    7af6:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7af8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7afa:	28 9f       	mul	r18, r24
	add ZL,r0
    7afc:	e0 0d       	add	r30, r0
	adc ZH,r1
    7afe:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7b00:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7b02:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7b04:	11 24       	eor	r1, r1
	

	ret
    7b06:	08 95       	ret

00007b08 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7b08:	99 27       	eor	r25, r25
	clr r23
    7b0a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7b0c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    7b0e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b10:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7b12:	28 9f       	mul	r18, r24
	add ZL,r0
    7b14:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b16:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7b18:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7b1a:	31 f4       	brne	.+12     	; 0x7b28 <smw1>
	lds r22,tr4_params
    7b1c:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    7b20:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7b22:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    7b26:	0b c0       	rjmp	.+22     	; 0x7b3e <esmw>

00007b28 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7b28:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7b2a:	31 f4       	brne	.+12     	; 0x7b38 <smw2>
	lds r22,tr4_params
    7b2c:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    7b30:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7b32:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    7b36:	03 c0       	rjmp	.+6      	; 0x7b3e <esmw>

00007b38 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7b38:	7e e7       	ldi	r23, 0x7E	; 126
	add r23,r22
    7b3a:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7b3c:	75 83       	std	Z+5, r23	; 0x05

00007b3e <esmw>:

esmw:
	clr r1	
    7b3e:	11 24       	eor	r1, r1
	ret
    7b40:	08 95       	ret
	...

00007c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7c02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    7c06:	08 95       	ret

00007c08 <steptable>:
    7c08:	22 00       	.word	0x0022	; ????
    7c0a:	24 00       	.word	0x0024	; ????
    7c0c:	26 00       	.word	0x0026	; ????
    7c0e:	28 00       	.word	0x0028	; ????
    7c10:	2b 00       	.word	0x002b	; ????
    7c12:	2d 00       	.word	0x002d	; ????
    7c14:	30 00       	.word	0x0030	; ????
    7c16:	33 00       	.word	0x0033	; ????
    7c18:	36 00       	.word	0x0036	; ????
    7c1a:	39 00       	.word	0x0039	; ????
    7c1c:	3d 00       	.word	0x003d	; ????
    7c1e:	40 00       	.word	0x0040	; ????
    7c20:	44 00       	.word	0x0044	; ????
    7c22:	48 00       	.word	0x0048	; ????
    7c24:	4c 00       	.word	0x004c	; ????
    7c26:	51 00       	.word	0x0051	; ????
    7c28:	56 00       	.word	0x0056	; ????
    7c2a:	5b 00       	.word	0x005b	; ????
    7c2c:	60 00       	.word	0x0060	; ????
    7c2e:	66 00       	.word	0x0066	; ????
    7c30:	6c 00       	.word	0x006c	; ????
    7c32:	73 00       	.word	0x0073	; ????
    7c34:	79 00       	.word	0x0079	; ????
    7c36:	81 00       	.word	0x0081	; ????
    7c38:	88 00       	.word	0x0088	; ????
    7c3a:	90 00       	.word	0x0090	; ????
    7c3c:	99 00       	.word	0x0099	; ????
    7c3e:	a2 00       	.word	0x00a2	; ????
    7c40:	ac 00       	.word	0x00ac	; ????
    7c42:	b6 00       	.word	0x00b6	; ????
    7c44:	c1 00       	.word	0x00c1	; ????
    7c46:	cc 00       	.word	0x00cc	; ????
    7c48:	d8 00       	.word	0x00d8	; ????
    7c4a:	e5 00       	.word	0x00e5	; ????
    7c4c:	f3 00       	.word	0x00f3	; ????
    7c4e:	01 01       	movw	r0, r2
    7c50:	10 01       	movw	r2, r0
    7c52:	21 01       	movw	r4, r2
    7c54:	32 01       	movw	r6, r4
    7c56:	44 01       	movw	r8, r8
    7c58:	57 01       	movw	r10, r14
    7c5a:	6c 01       	movw	r12, r24
    7c5c:	81 01       	movw	r16, r2
    7c5e:	98 01       	movw	r18, r16
    7c60:	b0 01       	movw	r22, r0
    7c62:	ca 01       	movw	r24, r20
    7c64:	e5 01       	movw	r28, r10
    7c66:	02 02       	muls	r16, r18
    7c68:	21 02       	muls	r18, r17
    7c6a:	41 02       	muls	r20, r17
    7c6c:	64 02       	muls	r22, r20
    7c6e:	88 02       	muls	r24, r24
    7c70:	ae 02       	muls	r26, r30
    7c72:	d7 02       	muls	r29, r23
    7c74:	03 03       	mulsu	r16, r19
    7c76:	30 03       	mulsu	r19, r16
    7c78:	61 03       	mulsu	r22, r17
    7c7a:	94 03       	fmuls	r17, r20
    7c7c:	cb 03       	fmulsu	r20, r19
    7c7e:	05 04       	cpc	r0, r5
    7c80:	42 04       	cpc	r4, r2
    7c82:	83 04       	cpc	r8, r3
    7c84:	c7 04       	cpc	r12, r7
    7c86:	10 05       	cpc	r17, r0
    7c88:	5d 05       	cpc	r21, r13
    7c8a:	af 05       	cpc	r26, r15
    7c8c:	05 06       	cpc	r0, r21
    7c8e:	61 06       	cpc	r6, r17
    7c90:	c2 06       	cpc	r12, r18
    7c92:	29 07       	cpc	r18, r25
    7c94:	96 07       	cpc	r25, r22
    7c96:	09 08       	sbc	r0, r9
    7c98:	83 08       	sbc	r8, r3
    7c9a:	05 09       	sbc	r16, r5
    7c9c:	8e 09       	sbc	r24, r14
    7c9e:	20 0a       	sbc	r2, r16
    7ca0:	ba 0a       	sbc	r11, r26
    7ca2:	5d 0b       	sbc	r21, r29
    7ca4:	0a 0c       	add	r0, r10
    7ca6:	c1 0c       	add	r12, r1
    7ca8:	84 0d       	add	r24, r4
    7caa:	51 0e       	add	r5, r17
    7cac:	2b 0f       	add	r18, r27
    7cae:	12 10       	cpse	r1, r2
    7cb0:	07 11       	cpse	r16, r7
    7cb2:	0a 12       	cpse	r0, r26
    7cb4:	1d 13       	cpse	r17, r29
    7cb6:	40 14       	cp	r4, r0
    7cb8:	74 15       	cp	r23, r4
    7cba:	ba 16       	cp	r11, r26
    7cbc:	14 18       	sub	r1, r4
    7cbe:	83 19       	sub	r24, r3
    7cc0:	07 1b       	sub	r16, r23
    7cc2:	a3 1c       	adc	r10, r3
    7cc4:	57 1e       	adc	r5, r23
    7cc6:	24 20       	and	r2, r4
    7cc8:	0e 22       	and	r0, r30
    7cca:	14 24       	eor	r1, r4
    7ccc:	39 26       	eor	r3, r25
    7cce:	7f 28       	or	r7, r15
    7cd0:	e8 2a       	or	r14, r24
    7cd2:	75 2d       	mov	r23, r5
    7cd4:	29 30       	cpi	r18, 0x09	; 9
    7cd6:	06 33       	cpi	r16, 0x36	; 54
    7cd8:	0f 36       	cpi	r16, 0x6F	; 111
    7cda:	45 39       	cpi	r20, 0x95	; 149
    7cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7cde:	49 40       	sbci	r20, 0x09	; 9
    7ce0:	1b 44       	sbci	r17, 0x4B	; 75
    7ce2:	28 48       	sbci	r18, 0x88	; 136
    7ce4:	73 4c       	sbci	r23, 0xC3	; 195
    7ce6:	fe 50       	subi	r31, 0x0E	; 14
    7ce8:	cf 55       	subi	r28, 0x5F	; 95
    7cea:	ea 5a       	subi	r30, 0xAA	; 170
    7cec:	51 60       	ori	r21, 0x01	; 1
    7cee:	0c 66       	ori	r16, 0x6C	; 108
    7cf0:	1d 6c       	ori	r17, 0xCD	; 205
    7cf2:	8b 72       	andi	r24, 0x2B	; 43
    7cf4:	5a 79       	andi	r21, 0x9A	; 154
    7cf6:	92 80       	ldd	r9, Z+2	; 0x02
    7cf8:	37 88       	ldd	r3, Z+23	; 0x17
    7cfa:	50 90 e5 98 	lds	r5, 0x98E5
    7cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7d00:	9f ab       	std	Y+55, r25	; 0x37
    7d02:	d3 b5       	in	r29, 0x23	; 35
    7d04:	a3 c0       	rjmp	.+326    	; 0x7e4c <waves+0x4c>
	...

00007e00 <waves>:
    7e00:	00 03       	mulsu	r16, r16
    7e02:	06 09       	sbc	r16, r6
    7e04:	0c 10       	cpse	r0, r12
    7e06:	13 16       	cp	r1, r19
    7e08:	19 1c       	adc	r1, r9
    7e0a:	1f 22       	and	r1, r31
    7e0c:	25 28       	or	r2, r5
    7e0e:	2b 2e       	mov	r2, r27
    7e10:	31 33       	cpi	r19, 0x31	; 49
    7e12:	36 39       	cpi	r19, 0x96	; 150
    7e14:	3c 3f       	cpi	r19, 0xFC	; 252
    7e16:	41 44       	sbci	r20, 0x41	; 65
    7e18:	47 49       	sbci	r20, 0x97	; 151
    7e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7e1c:	51 53       	subi	r21, 0x31	; 49
    7e1e:	55 58       	subi	r21, 0x85	; 133
    7e20:	5a 5c       	subi	r21, 0xCA	; 202
    7e22:	5e 60       	ori	r21, 0x0E	; 14
    7e24:	62 64       	ori	r22, 0x42	; 66
    7e26:	66 68       	ori	r22, 0x86	; 134
    7e28:	6a 6b       	ori	r22, 0xBA	; 186
    7e2a:	6d 6f       	ori	r22, 0xFD	; 253
    7e2c:	70 71       	andi	r23, 0x10	; 16
    7e2e:	73 74       	andi	r23, 0x43	; 67
    7e30:	75 76       	andi	r23, 0x65	; 101
    7e32:	78 79       	andi	r23, 0x98	; 152
    7e34:	7a 7a       	andi	r23, 0xAA	; 170
    7e36:	7b 7c       	andi	r23, 0xCB	; 203
    7e38:	7d 7d       	andi	r23, 0xDD	; 221
    7e3a:	7e 7e       	andi	r23, 0xEE	; 238
    7e3c:	7e 7f       	andi	r23, 0xFE	; 254
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7e 7e       	andi	r23, 0xEE	; 238
    7e46:	7e 7d       	andi	r23, 0xDE	; 222
    7e48:	7d 7c       	andi	r23, 0xCD	; 205
    7e4a:	7b 7a       	andi	r23, 0xAB	; 171
    7e4c:	7a 79       	andi	r23, 0x9A	; 154
    7e4e:	78 76       	andi	r23, 0x68	; 104
    7e50:	75 74       	andi	r23, 0x45	; 69
    7e52:	73 71       	andi	r23, 0x13	; 19
    7e54:	70 6f       	ori	r23, 0xF0	; 240
    7e56:	6d 6b       	ori	r22, 0xBD	; 189
    7e58:	6a 68       	ori	r22, 0x8A	; 138
    7e5a:	66 64       	ori	r22, 0x46	; 70
    7e5c:	62 60       	ori	r22, 0x02	; 2
    7e5e:	5e 5c       	subi	r21, 0xCE	; 206
    7e60:	5a 58       	subi	r21, 0x8A	; 138
    7e62:	55 53       	subi	r21, 0x35	; 53
    7e64:	51 4e       	sbci	r21, 0xE1	; 225
    7e66:	4c 49       	sbci	r20, 0x9C	; 156
    7e68:	47 44       	sbci	r20, 0x47	; 71
    7e6a:	41 3f       	cpi	r20, 0xF1	; 241
    7e6c:	3c 39       	cpi	r19, 0x9C	; 156
    7e6e:	36 33       	cpi	r19, 0x36	; 54
    7e70:	31 2e       	mov	r3, r17
    7e72:	2b 28       	or	r2, r11
    7e74:	25 22       	and	r2, r21
    7e76:	1f 1c       	adc	r1, r15
    7e78:	19 16       	cp	r1, r25
    7e7a:	13 10       	cpse	r1, r3
    7e7c:	0c 09       	sbc	r16, r12
    7e7e:	06 03       	mulsu	r16, r22
    7e80:	00 fd       	sbrc	r16, 0
    7e82:	fa f7       	brpl	.-2      	; 0x7e82 <waves+0x82>
    7e84:	f4 f0       	brlt	.+60     	; 0x7ec2 <waves+0xc2>
    7e86:	ed ea       	ldi	r30, 0xAD	; 173
    7e88:	e7 e4       	ldi	r30, 0x47	; 71
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <steptable+0x46>
    7e8c:	db d8       	rcall	.-3658   	; 0x7044 <EepromBlockExists+0x2a>
    7e8e:	d5 d2       	rcall	.+1450   	; 0x843a <waves+0x63a>
    7e90:	cf cd       	rjmp	.-1122   	; 0x7a30 <ProcessMusic+0x39a>
    7e92:	ca c7       	rjmp	.+3988   	; 0x8e28 <LBPrintByte+0xa>
    7e94:	c4 c1       	rjmp	.+904    	; 0x821e <waves+0x41e>
    7e96:	bf bc       	out	0x2f, r11	; 47
    7e98:	b9 b7       	in	r27, 0x39	; 57
    7e9a:	b4 b2       	in	r11, 0x14	; 20
    7e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7ea4:	9e 9c       	mul	r9, r14
    7ea6:	9a 98       	cbi	0x13, 2	; 19
    7ea8:	96 95       	lsr	r25
    7eaa:	93 91       	.word	0x9193	; ????
    7eac:	90 8f       	std	Z+24, r25	; 0x18
    7eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7eb0:	8b 8a       	std	Y+19, r8	; 0x13
    7eb2:	88 87       	std	Y+8, r24	; 0x08
    7eb4:	86 86       	std	Z+14, r8	; 0x0e
    7eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7eb8:	83 83       	std	Z+3, r24	; 0x03
    7eba:	82 82       	std	Z+2, r8	; 0x02
    7ebc:	82 81       	ldd	r24, Z+2	; 0x02
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
    7ec0:	81 81       	ldd	r24, Z+1	; 0x01
    7ec2:	81 81       	ldd	r24, Z+1	; 0x01
    7ec4:	82 82       	std	Z+2, r8	; 0x02
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    7eca:	85 86       	std	Z+13, r8	; 0x0d
    7ecc:	86 87       	std	Z+14, r24	; 0x0e
    7ece:	88 8a       	std	Y+16, r8	; 0x10
    7ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ed4:	90 91 93 95 	lds	r25, 0x9593
    7ed8:	96 98       	cbi	0x12, 6	; 18
    7eda:	9a 9c       	mul	r9, r10
    7edc:	9e a0       	ldd	r9, Y+38	; 0x26
    7ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ee4:	af b2       	in	r10, 0x1f	; 31
    7ee6:	b4 b7       	in	r27, 0x34	; 52
    7ee8:	b9 bc       	out	0x29, r11	; 41
    7eea:	bf c1       	rjmp	.+894    	; 0x826a <waves+0x46a>
    7eec:	c4 c7       	rjmp	.+3976   	; 0x8e76 <LBPrintByte+0x58>
    7eee:	ca cd       	rjmp	.-1132   	; 0x7a84 <ProcessMusic+0x3ee>
    7ef0:	cf d2       	rcall	.+1438   	; 0x8490 <waves+0x690>
    7ef2:	d5 d8       	rcall	.-3670   	; 0x709e <EepromBlockExists+0x84>
    7ef4:	db de       	rcall	.-586    	; 0x7cac <steptable+0xa4>
    7ef6:	e1 e4       	ldi	r30, 0x41	; 65
    7ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    7efa:	ed f0       	brhs	.+58     	; 0x7f36 <waves+0x136>
    7efc:	f4 f7       	brge	.-4      	; 0x7efa <waves+0xfa>
    7efe:	fa fd       	.word	0xfdfa	; ????
    7f00:	80 81       	ld	r24, Z
    7f02:	82 83       	std	Z+2, r24	; 0x02
    7f04:	84 85       	ldd	r24, Z+12	; 0x0c
    7f06:	86 87       	std	Z+14, r24	; 0x0e
    7f08:	88 89       	ldd	r24, Y+16	; 0x10
    7f0a:	8a 8b       	std	Y+18, r24	; 0x12
    7f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7f10:	90 91 92 93 	lds	r25, 0x9392
    7f14:	94 95       	.word	0x9594	; ????
    7f16:	96 97       	sbiw	r26, 0x26	; 38
    7f18:	98 99       	sbic	0x13, 0	; 19
    7f1a:	9a 9b       	sbis	0x13, 2	; 19
    7f1c:	9c 9d       	mul	r25, r12
    7f1e:	9e 9f       	mul	r25, r30
    7f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f22:	a2 a3       	std	Z+34, r26	; 0x22
    7f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7f26:	a6 a7       	std	Z+46, r26	; 0x2e
    7f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7f2a:	aa ab       	std	Y+50, r26	; 0x32
    7f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7f2e:	ae af       	std	Y+62, r26	; 0x3e
    7f30:	b0 b1       	in	r27, 0x00	; 0
    7f32:	b2 b3       	in	r27, 0x12	; 18
    7f34:	b4 b5       	in	r27, 0x24	; 36
    7f36:	b6 b7       	in	r27, 0x36	; 54
    7f38:	b8 b9       	out	0x08, r27	; 8
    7f3a:	ba bb       	out	0x1a, r27	; 26
    7f3c:	bc bd       	out	0x2c, r27	; 44
    7f3e:	be bf       	out	0x3e, r27	; 62
    7f40:	c0 c1       	rjmp	.+896    	; 0x82c2 <waves+0x4c2>
    7f42:	c2 c3       	rjmp	.+1924   	; 0x86c8 <waves+0x8c8>
    7f44:	c4 c5       	rjmp	.+2952   	; 0x8ace <DrawMap+0x16>
    7f46:	c6 c7       	rjmp	.+3980   	; 0x8ed4 <LBPrintInt+0x54>
    7f48:	c8 c9       	rjmp	.-3184   	; 0x72da <PatchCommand03>
    7f4a:	ca cb       	rjmp	.-2156   	; 0x76e0 <ProcessMusic+0x4a>
    7f4c:	cc cd       	rjmp	.-1128   	; 0x7ae6 <set_note_waves+0x2>
    7f4e:	ce cf       	rjmp	.-100    	; 0x7eec <waves+0xec>
    7f50:	d0 d1       	rcall	.+928    	; 0x82f2 <waves+0x4f2>
    7f52:	d2 d3       	rcall	.+1956   	; 0x86f8 <waves+0x8f8>
    7f54:	d4 d5       	rcall	.+2984   	; 0x8afe <DrawMap+0x46>
    7f56:	d6 d7       	rcall	.+4012   	; 0x8f04 <LBCollides+0x12>
    7f58:	d8 d9       	rcall	.-3152   	; 0x730a <PatchCommand08+0x12>
    7f5a:	da db       	rcall	.-2124   	; 0x7710 <ProcessMusic+0x7a>
    7f5c:	dc dd       	rcall	.-1096   	; 0x7b16 <SetMixerWave+0xe>
    7f5e:	de df       	rcall	.-68     	; 0x7f1c <waves+0x11c>
    7f60:	e0 e1       	ldi	r30, 0x10	; 16
    7f62:	e2 e3       	ldi	r30, 0x32	; 50
    7f64:	e4 e5       	ldi	r30, 0x54	; 84
    7f66:	e6 e7       	ldi	r30, 0x76	; 118
    7f68:	e8 e9       	ldi	r30, 0x98	; 152
    7f6a:	ea eb       	ldi	r30, 0xBA	; 186
    7f6c:	ec ed       	ldi	r30, 0xDC	; 220
    7f6e:	ee ef       	ldi	r30, 0xFE	; 254
    7f70:	f0 f1       	brcs	.+124    	; 0x7fee <waves+0x1ee>
    7f72:	f2 f3       	brmi	.-4      	; 0x7f70 <waves+0x170>
    7f74:	f4 f5       	brge	.+124    	; 0x7ff2 <waves+0x1f2>
    7f76:	f6 f7       	brtc	.-4      	; 0x7f74 <waves+0x174>
    7f78:	f8 f9       	.word	0xf9f8	; ????
    7f7a:	fa fb       	.word	0xfbfa	; ????
    7f7c:	fc fd       	.word	0xfdfc	; ????
    7f7e:	fe ff       	.word	0xfffe	; ????
    7f80:	00 01       	movw	r0, r0
    7f82:	02 03       	mulsu	r16, r18
    7f84:	04 05       	cpc	r16, r4
    7f86:	06 07       	cpc	r16, r22
    7f88:	08 09       	sbc	r16, r8
    7f8a:	0a 0b       	sbc	r16, r26
    7f8c:	0c 0d       	add	r16, r12
    7f8e:	0e 0f       	add	r16, r30
    7f90:	10 11       	cpse	r17, r0
    7f92:	12 13       	cpse	r17, r18
    7f94:	14 15       	cp	r17, r4
    7f96:	16 17       	cp	r17, r22
    7f98:	18 19       	sub	r17, r8
    7f9a:	1a 1b       	sub	r17, r26
    7f9c:	1c 1d       	adc	r17, r12
    7f9e:	1e 1f       	adc	r17, r30
    7fa0:	20 21       	and	r18, r0
    7fa2:	22 23       	and	r18, r18
    7fa4:	24 25       	eor	r18, r4
    7fa6:	26 27       	eor	r18, r22
    7fa8:	28 29       	or	r18, r8
    7faa:	2a 2b       	or	r18, r26
    7fac:	2c 2d       	mov	r18, r12
    7fae:	2e 2f       	mov	r18, r30
    7fb0:	30 31       	cpi	r19, 0x10	; 16
    7fb2:	32 33       	cpi	r19, 0x32	; 50
    7fb4:	34 35       	cpi	r19, 0x54	; 84
    7fb6:	36 37       	cpi	r19, 0x76	; 118
    7fb8:	38 39       	cpi	r19, 0x98	; 152
    7fba:	3a 3b       	cpi	r19, 0xBA	; 186
    7fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    7fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    7fc0:	40 41       	sbci	r20, 0x10	; 16
    7fc2:	42 43       	sbci	r20, 0x32	; 50
    7fc4:	44 45       	sbci	r20, 0x54	; 84
    7fc6:	46 47       	sbci	r20, 0x76	; 118
    7fc8:	48 49       	sbci	r20, 0x98	; 152
    7fca:	4a 4b       	sbci	r20, 0xBA	; 186
    7fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    7fce:	4e 4f       	sbci	r20, 0xFE	; 254
    7fd0:	50 51       	subi	r21, 0x10	; 16
    7fd2:	52 53       	subi	r21, 0x32	; 50
    7fd4:	54 55       	subi	r21, 0x54	; 84
    7fd6:	56 57       	subi	r21, 0x76	; 118
    7fd8:	58 59       	subi	r21, 0x98	; 152
    7fda:	5a 5b       	subi	r21, 0xBA	; 186
    7fdc:	5c 5d       	subi	r21, 0xDC	; 220
    7fde:	5e 5f       	subi	r21, 0xFE	; 254
    7fe0:	60 61       	ori	r22, 0x10	; 16
    7fe2:	62 63       	ori	r22, 0x32	; 50
    7fe4:	64 65       	ori	r22, 0x54	; 84
    7fe6:	66 67       	ori	r22, 0x76	; 118
    7fe8:	68 69       	ori	r22, 0x98	; 152
    7fea:	6a 6b       	ori	r22, 0xBA	; 186
    7fec:	6c 6d       	ori	r22, 0xDC	; 220
    7fee:	6e 6f       	ori	r22, 0xFE	; 254
    7ff0:	70 71       	andi	r23, 0x10	; 16
    7ff2:	72 73       	andi	r23, 0x32	; 50
    7ff4:	74 75       	andi	r23, 0x54	; 84
    7ff6:	76 77       	andi	r23, 0x76	; 118
    7ff8:	78 79       	andi	r23, 0x98	; 152
    7ffa:	7a 7b       	andi	r23, 0xBA	; 186
    7ffc:	7c 7d       	andi	r23, 0xDC	; 220
    7ffe:	7e 7f       	andi	r23, 0xFE	; 254
    8000:	00 02       	muls	r16, r16
    8002:	04 06       	cpc	r0, r20
    8004:	08 0a       	sbc	r0, r24
    8006:	0c 0e       	add	r0, r28
    8008:	10 12       	cpse	r1, r16
    800a:	14 16       	cp	r1, r20
    800c:	18 1a       	sub	r1, r24
    800e:	1c 1e       	adc	r1, r28
    8010:	20 22       	and	r2, r16
    8012:	24 26       	eor	r2, r20
    8014:	28 2a       	or	r2, r24
    8016:	2c 2e       	mov	r2, r28
    8018:	30 32       	cpi	r19, 0x20	; 32
    801a:	34 36       	cpi	r19, 0x64	; 100
    801c:	38 3a       	cpi	r19, 0xA8	; 168
    801e:	3c 3e       	cpi	r19, 0xEC	; 236
    8020:	40 42       	sbci	r20, 0x20	; 32
    8022:	44 46       	sbci	r20, 0x64	; 100
    8024:	48 4a       	sbci	r20, 0xA8	; 168
    8026:	4c 4e       	sbci	r20, 0xEC	; 236
    8028:	50 52       	subi	r21, 0x20	; 32
    802a:	54 56       	subi	r21, 0x64	; 100
    802c:	58 5a       	subi	r21, 0xA8	; 168
    802e:	5c 5e       	subi	r21, 0xEC	; 236
    8030:	60 62       	ori	r22, 0x20	; 32
    8032:	64 66       	ori	r22, 0x64	; 100
    8034:	68 6a       	ori	r22, 0xA8	; 168
    8036:	6c 6e       	ori	r22, 0xEC	; 236
    8038:	70 72       	andi	r23, 0x20	; 32
    803a:	74 76       	andi	r23, 0x64	; 100
    803c:	78 7a       	andi	r23, 0xA8	; 168
    803e:	7c 7e       	andi	r23, 0xEC	; 236
    8040:	7f 7d       	andi	r23, 0xDF	; 223
    8042:	7b 79       	andi	r23, 0x9B	; 155
    8044:	77 75       	andi	r23, 0x57	; 87
    8046:	73 71       	andi	r23, 0x13	; 19
    8048:	6f 6d       	ori	r22, 0xDF	; 223
    804a:	6b 69       	ori	r22, 0x9B	; 155
    804c:	67 65       	ori	r22, 0x57	; 87
    804e:	63 61       	ori	r22, 0x13	; 19
    8050:	5f 5d       	subi	r21, 0xDF	; 223
    8052:	5b 59       	subi	r21, 0x9B	; 155
    8054:	57 55       	subi	r21, 0x57	; 87
    8056:	53 51       	subi	r21, 0x13	; 19
    8058:	4f 4d       	sbci	r20, 0xDF	; 223
    805a:	4b 49       	sbci	r20, 0x9B	; 155
    805c:	47 45       	sbci	r20, 0x57	; 87
    805e:	43 41       	sbci	r20, 0x13	; 19
    8060:	3f 3d       	cpi	r19, 0xDF	; 223
    8062:	3b 39       	cpi	r19, 0x9B	; 155
    8064:	37 35       	cpi	r19, 0x57	; 87
    8066:	33 31       	cpi	r19, 0x13	; 19
    8068:	2f 2d       	mov	r18, r15
    806a:	2b 29       	or	r18, r11
    806c:	27 25       	eor	r18, r7
    806e:	23 21       	and	r18, r3
    8070:	1f 1d       	adc	r17, r15
    8072:	1b 19       	sub	r17, r11
    8074:	17 15       	cp	r17, r7
    8076:	13 11       	cpse	r17, r3
    8078:	0f 0d       	add	r16, r15
    807a:	0b 09       	sbc	r16, r11
    807c:	07 05       	cpc	r16, r7
    807e:	03 01       	movw	r0, r6
    8080:	ff fd       	.word	0xfdff	; ????
    8082:	fb f9       	.word	0xf9fb	; ????
    8084:	f7 f5       	brid	.+124    	; 0x8102 <waves+0x302>
    8086:	f3 f1       	brvs	.+124    	; 0x8104 <waves+0x304>
    8088:	ef ed       	ldi	r30, 0xDF	; 223
    808a:	eb e9       	ldi	r30, 0x9B	; 155
    808c:	e7 e5       	ldi	r30, 0x57	; 87
    808e:	e3 e1       	ldi	r30, 0x13	; 19
    8090:	df dd       	rcall	.-1090   	; 0x7c50 <steptable+0x48>
    8092:	db d9       	rcall	.-3146   	; 0x744a <ReadVarLen+0x2c>
    8094:	d7 d5       	rcall	.+2990   	; 0x8c44 <FadeIn+0x2>
    8096:	d3 d1       	rcall	.+934    	; 0x843e <waves+0x63e>
    8098:	cf cd       	rjmp	.-1122   	; 0x7c38 <steptable+0x30>
    809a:	cb c9       	rjmp	.-3178   	; 0x7432 <ReadVarLen+0x14>
    809c:	c7 c5       	rjmp	.+2958   	; 0x8c2c <doFade+0x6>
    809e:	c3 c1       	rjmp	.+902    	; 0x8426 <waves+0x626>
    80a0:	bf bd       	out	0x2f, r27	; 47
    80a2:	bb b9       	out	0x0b, r27	; 11
    80a4:	b7 b5       	in	r27, 0x27	; 39
    80a6:	b3 b1       	in	r27, 0x03	; 3
    80a8:	af ad       	ldd	r26, Y+63	; 0x3f
    80aa:	ab a9       	ldd	r26, Y+51	; 0x33
    80ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    80b0:	9f 9d       	mul	r25, r15
    80b2:	9b 99       	sbic	0x13, 3	; 19
    80b4:	97 95       	ror	r25
    80b6:	93 91       	.word	0x9193	; ????
    80b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	87 85       	ldd	r24, Z+15	; 0x0f
    80be:	83 81       	ldd	r24, Z+3	; 0x03
    80c0:	80 82       	st	Z, r8
    80c2:	84 86       	std	Z+12, r8	; 0x0c
    80c4:	88 8a       	std	Y+16, r8	; 0x10
    80c6:	8c 8e       	std	Y+28, r8	; 0x1c
    80c8:	90 92 94 96 	sts	0x9694, r9
    80cc:	98 9a       	sbi	0x13, 0	; 19
    80ce:	9c 9e       	mul	r9, r28
    80d0:	a0 a2       	std	Z+32, r10	; 0x20
    80d2:	a4 a6       	std	Z+44, r10	; 0x2c
    80d4:	a8 aa       	std	Y+48, r10	; 0x30
    80d6:	ac ae       	std	Y+60, r10	; 0x3c
    80d8:	b0 b2       	in	r11, 0x10	; 16
    80da:	b4 b6       	in	r11, 0x34	; 52
    80dc:	b8 ba       	out	0x18, r11	; 24
    80de:	bc be       	out	0x3c, r11	; 60
    80e0:	c0 c2       	rjmp	.+1408   	; 0x8662 <waves+0x862>
    80e2:	c4 c6       	rjmp	.+3464   	; 0x8e6c <LBPrintByte+0x4e>
    80e4:	c8 ca       	rjmp	.-2672   	; 0x7676 <TriggerNote+0x60>
    80e6:	cc ce       	rjmp	.-616    	; 0x7e80 <waves+0x80>
    80e8:	d0 d2       	rcall	.+1440   	; 0x868a <waves+0x88a>
    80ea:	d4 d6       	rcall	.+3496   	; 0x8e94 <LBPrintInt+0x14>
    80ec:	d8 da       	rcall	.-2640   	; 0x769e <ProcessMusic+0x8>
    80ee:	dc de       	rcall	.-584    	; 0x7ea8 <waves+0xa8>
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	e4 e6       	ldi	r30, 0x64	; 100
    80f4:	e8 ea       	ldi	r30, 0xA8	; 168
    80f6:	ec ee       	ldi	r30, 0xEC	; 236
    80f8:	f0 f2       	brcs	.-68     	; 0x80b6 <waves+0x2b6>
    80fa:	f4 f6       	brge	.-68     	; 0x80b8 <waves+0x2b8>
    80fc:	f8 fa       	.word	0xfaf8	; ????
    80fe:	fc fe       	.word	0xfefc	; ????
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	80 80       	ld	r8, Z
    8142:	80 80       	ld	r8, Z
    8144:	80 80       	ld	r8, Z
    8146:	80 80       	ld	r8, Z
    8148:	80 80       	ld	r8, Z
    814a:	80 80       	ld	r8, Z
    814c:	80 80       	ld	r8, Z
    814e:	80 80       	ld	r8, Z
    8150:	80 80       	ld	r8, Z
    8152:	80 80       	ld	r8, Z
    8154:	80 80       	ld	r8, Z
    8156:	80 80       	ld	r8, Z
    8158:	80 80       	ld	r8, Z
    815a:	80 80       	ld	r8, Z
    815c:	80 80       	ld	r8, Z
    815e:	80 80       	ld	r8, Z
    8160:	80 80       	ld	r8, Z
    8162:	80 80       	ld	r8, Z
    8164:	80 80       	ld	r8, Z
    8166:	80 80       	ld	r8, Z
    8168:	80 80       	ld	r8, Z
    816a:	80 80       	ld	r8, Z
    816c:	80 80       	ld	r8, Z
    816e:	80 80       	ld	r8, Z
    8170:	80 80       	ld	r8, Z
    8172:	80 80       	ld	r8, Z
    8174:	80 80       	ld	r8, Z
    8176:	80 80       	ld	r8, Z
    8178:	80 80       	ld	r8, Z
    817a:	80 80       	ld	r8, Z
    817c:	80 80       	ld	r8, Z
    817e:	80 80       	ld	r8, Z
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	7f 7f       	andi	r23, 0xFF	; 255
    8382:	7f 7f       	andi	r23, 0xFF	; 255
    8384:	7f 7f       	andi	r23, 0xFF	; 255
    8386:	7f 7f       	andi	r23, 0xFF	; 255
    8388:	7f 7f       	andi	r23, 0xFF	; 255
    838a:	7f 7f       	andi	r23, 0xFF	; 255
    838c:	7f 7f       	andi	r23, 0xFF	; 255
    838e:	7f 7f       	andi	r23, 0xFF	; 255
    8390:	7f 7f       	andi	r23, 0xFF	; 255
    8392:	7f 7f       	andi	r23, 0xFF	; 255
    8394:	7f 7f       	andi	r23, 0xFF	; 255
    8396:	7f 7f       	andi	r23, 0xFF	; 255
    8398:	7f 7f       	andi	r23, 0xFF	; 255
    839a:	7f 7f       	andi	r23, 0xFF	; 255
    839c:	7f 7f       	andi	r23, 0xFF	; 255
    839e:	7f 7f       	andi	r23, 0xFF	; 255
    83a0:	7f 7f       	andi	r23, 0xFF	; 255
    83a2:	7f 7f       	andi	r23, 0xFF	; 255
    83a4:	7f 7f       	andi	r23, 0xFF	; 255
    83a6:	7f 7f       	andi	r23, 0xFF	; 255
    83a8:	7f 7f       	andi	r23, 0xFF	; 255
    83aa:	7f 7f       	andi	r23, 0xFF	; 255
    83ac:	7f 7f       	andi	r23, 0xFF	; 255
    83ae:	7f 7f       	andi	r23, 0xFF	; 255
    83b0:	7f 7f       	andi	r23, 0xFF	; 255
    83b2:	7f 7f       	andi	r23, 0xFF	; 255
    83b4:	7f 7f       	andi	r23, 0xFF	; 255
    83b6:	7f 7f       	andi	r23, 0xFF	; 255
    83b8:	7f 7f       	andi	r23, 0xFF	; 255
    83ba:	7f 7f       	andi	r23, 0xFF	; 255
    83bc:	7f 7f       	andi	r23, 0xFF	; 255
    83be:	7f 7f       	andi	r23, 0xFF	; 255
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	03 09       	sbc	r16, r3
    8402:	13 1e       	adc	r1, r19
    8404:	28 31       	cpi	r18, 0x18	; 24
    8406:	3a 40       	sbci	r19, 0x0A	; 10
    8408:	46 4c       	sbci	r20, 0xC6	; 198
    840a:	50 54       	subi	r21, 0x40	; 64
    840c:	58 5b       	subi	r21, 0xB8	; 184
    840e:	5e 61       	ori	r21, 0x1E	; 30
    8410:	63 65       	ori	r22, 0x53	; 83
    8412:	67 69       	ori	r22, 0x97	; 151
    8414:	6b 6c       	ori	r22, 0xCB	; 203
    8416:	6e 6f       	ori	r22, 0xFE	; 254
    8418:	70 71       	andi	r23, 0x10	; 16
    841a:	72 73       	andi	r23, 0x32	; 50
    841c:	74 75       	andi	r23, 0x54	; 84
    841e:	76 77       	andi	r23, 0x76	; 118
    8420:	77 78       	andi	r23, 0x87	; 135
    8422:	79 79       	andi	r23, 0x99	; 153
    8424:	7a 7a       	andi	r23, 0xAA	; 170
    8426:	7b 7b       	andi	r23, 0xBB	; 187
    8428:	7c 7c       	andi	r23, 0xCC	; 204
    842a:	7c 7d       	andi	r23, 0xDC	; 220
    842c:	7d 7d       	andi	r23, 0xDD	; 221
    842e:	7e 7e       	andi	r23, 0xEE	; 238
    8430:	7e 7e       	andi	r23, 0xEE	; 238
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7e       	andi	r23, 0xEF	; 239
    844e:	7e 7e       	andi	r23, 0xEE	; 238
    8450:	7e 7d       	andi	r23, 0xDE	; 222
    8452:	7d 7d       	andi	r23, 0xDD	; 221
    8454:	7c 7c       	andi	r23, 0xCC	; 204
    8456:	7c 7b       	andi	r23, 0xBC	; 188
    8458:	7b 7a       	andi	r23, 0xAB	; 171
    845a:	7a 79       	andi	r23, 0x9A	; 154
    845c:	79 78       	andi	r23, 0x89	; 137
    845e:	77 77       	andi	r23, 0x77	; 119
    8460:	76 75       	andi	r23, 0x56	; 86
    8462:	74 73       	andi	r23, 0x34	; 52
    8464:	72 71       	andi	r23, 0x12	; 18
    8466:	70 6f       	ori	r23, 0xF0	; 240
    8468:	6e 6c       	ori	r22, 0xCE	; 206
    846a:	6b 69       	ori	r22, 0x9B	; 155
    846c:	67 65       	ori	r22, 0x57	; 87
    846e:	63 61       	ori	r22, 0x13	; 19
    8470:	5e 5b       	subi	r21, 0xBE	; 190
    8472:	58 54       	subi	r21, 0x48	; 72
    8474:	50 4c       	sbci	r21, 0xC0	; 192
    8476:	46 40       	sbci	r20, 0x06	; 6
    8478:	3a 31       	cpi	r19, 0x1A	; 26
    847a:	28 1e       	adc	r2, r24
    847c:	13 09       	sbc	r17, r3
    847e:	03 00       	.word	0x0003	; ????
    8480:	c6 cc       	rjmp	.-1652   	; 0x7e0e <waves+0xe>
    8482:	d5 db       	rcall	.-2134   	; 0x7c2e <steptable+0x26>
    8484:	df e3       	ldi	r29, 0x3F	; 63
    8486:	e5 e7       	ldi	r30, 0x75	; 117
    8488:	e9 ea       	ldi	r30, 0xA9	; 169
    848a:	eb ec       	ldi	r30, 0xCB	; 203
    848c:	ed ee       	ldi	r30, 0xED	; 237
    848e:	ef ef       	ldi	r30, 0xFF	; 255
    8490:	f0 f0       	brcs	.+60     	; 0x84ce <waves+0x6ce>
    8492:	f0 f1       	brcs	.+124    	; 0x8510 <waves+0x710>
    8494:	f1 f1       	breq	.+124    	; 0x8512 <waves+0x712>
    8496:	f1 f2       	breq	.-68     	; 0x8454 <waves+0x654>
    8498:	f2 f2       	brmi	.-68     	; 0x8456 <waves+0x656>
    849a:	f2 f2       	brmi	.-68     	; 0x8458 <waves+0x658>
    849c:	f2 f2       	brmi	.-68     	; 0x845a <waves+0x65a>
    849e:	f2 f3       	brmi	.-4      	; 0x849c <waves+0x69c>
    84a0:	f3 f3       	brvs	.-4      	; 0x849e <waves+0x69e>
    84a2:	f3 f3       	brvs	.-4      	; 0x84a0 <waves+0x6a0>
    84a4:	f3 f3       	brvs	.-4      	; 0x84a2 <waves+0x6a2>
    84a6:	f3 f3       	brvs	.-4      	; 0x84a4 <waves+0x6a4>
    84a8:	f3 f3       	brvs	.-4      	; 0x84a6 <waves+0x6a6>
    84aa:	f3 f3       	brvs	.-4      	; 0x84a8 <waves+0x6a8>
    84ac:	f3 f3       	brvs	.-4      	; 0x84aa <waves+0x6aa>
    84ae:	f3 f3       	brvs	.-4      	; 0x84ac <waves+0x6ac>
    84b0:	f3 f3       	brvs	.-4      	; 0x84ae <waves+0x6ae>
    84b2:	f3 f3       	brvs	.-4      	; 0x84b0 <waves+0x6b0>
    84b4:	f3 f3       	brvs	.-4      	; 0x84b2 <waves+0x6b2>
    84b6:	f3 f3       	brvs	.-4      	; 0x84b4 <waves+0x6b4>
    84b8:	f3 f3       	brvs	.-4      	; 0x84b6 <waves+0x6b6>
    84ba:	f3 f3       	brvs	.-4      	; 0x84b8 <waves+0x6b8>
    84bc:	f3 f3       	brvs	.-4      	; 0x84ba <waves+0x6ba>
    84be:	f3 f3       	brvs	.-4      	; 0x84bc <waves+0x6bc>
    84c0:	f3 f3       	brvs	.-4      	; 0x84be <waves+0x6be>
    84c2:	f3 f3       	brvs	.-4      	; 0x84c0 <waves+0x6c0>
    84c4:	f3 f3       	brvs	.-4      	; 0x84c2 <waves+0x6c2>
    84c6:	f3 f3       	brvs	.-4      	; 0x84c4 <waves+0x6c4>
    84c8:	f3 f3       	brvs	.-4      	; 0x84c6 <waves+0x6c6>
    84ca:	f3 f3       	brvs	.-4      	; 0x84c8 <waves+0x6c8>
    84cc:	f3 f3       	brvs	.-4      	; 0x84ca <waves+0x6ca>
    84ce:	f3 f3       	brvs	.-4      	; 0x84cc <waves+0x6cc>
    84d0:	f3 f3       	brvs	.-4      	; 0x84ce <waves+0x6ce>
    84d2:	f3 f3       	brvs	.-4      	; 0x84d0 <waves+0x6d0>
    84d4:	f3 f3       	brvs	.-4      	; 0x84d2 <waves+0x6d2>
    84d6:	f3 f3       	brvs	.-4      	; 0x84d4 <waves+0x6d4>
    84d8:	f3 f3       	brvs	.-4      	; 0x84d6 <waves+0x6d6>
    84da:	f3 f3       	brvs	.-4      	; 0x84d8 <waves+0x6d8>
    84dc:	f3 f3       	brvs	.-4      	; 0x84da <waves+0x6da>
    84de:	f3 f3       	brvs	.-4      	; 0x84dc <waves+0x6dc>
    84e0:	f2 f2       	brmi	.-68     	; 0x849e <waves+0x69e>
    84e2:	f2 f2       	brmi	.-68     	; 0x84a0 <waves+0x6a0>
    84e4:	f2 f2       	brmi	.-68     	; 0x84a2 <waves+0x6a2>
    84e6:	f2 f2       	brmi	.-68     	; 0x84a4 <waves+0x6a4>
    84e8:	f1 f1       	breq	.+124    	; 0x8566 <waves+0x766>
    84ea:	f1 f1       	breq	.+124    	; 0x8568 <waves+0x768>
    84ec:	f0 f0       	brcs	.+60     	; 0x852a <waves+0x72a>
    84ee:	f0 ef       	ldi	r31, 0xF0	; 240
    84f0:	ef ee       	ldi	r30, 0xEF	; 239
    84f2:	ed ec       	ldi	r30, 0xCD	; 205
    84f4:	eb ea       	ldi	r30, 0xAB	; 171
    84f6:	e9 e7       	ldi	r30, 0x79	; 121
    84f8:	e5 e3       	ldi	r30, 0x35	; 53
    84fa:	df db       	rcall	.-2114   	; 0x7cba <steptable+0xb2>
    84fc:	d5 cc       	rjmp	.-1622   	; 0x7ea8 <waves+0xa8>
    84fe:	c6 00       	.word	0x00c6	; ????
    8500:	00 28       	or	r0, r0
    8502:	3d 42       	sbci	r19, 0x2D	; 45
    8504:	30 2d       	mov	r19, r0
    8506:	2c 2b       	or	r18, r28
    8508:	2c 2d       	mov	r18, r12
    850a:	2e 2f       	mov	r18, r30
    850c:	30 32       	cpi	r19, 0x20	; 32
    850e:	33 35       	cpi	r19, 0x53	; 83
    8510:	37 39       	cpi	r19, 0x97	; 151
    8512:	3b 3d       	cpi	r19, 0xDB	; 219
    8514:	3f 41       	sbci	r19, 0x1F	; 31
    8516:	43 45       	sbci	r20, 0x53	; 83
    8518:	48 4a       	sbci	r20, 0xA8	; 168
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	50 53       	subi	r21, 0x30	; 48
    851e:	55 57       	subi	r21, 0x75	; 117
    8520:	59 5b       	subi	r21, 0xB9	; 185
    8522:	5d 5f       	subi	r21, 0xFD	; 253
    8524:	61 63       	ori	r22, 0x31	; 49
    8526:	65 67       	ori	r22, 0x75	; 117
    8528:	69 6b       	ori	r22, 0xB9	; 185
    852a:	6c 6e       	ori	r22, 0xEC	; 236
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 77       	andi	r23, 0x75	; 117
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7b       	andi	r23, 0xBA	; 186
    8536:	7c 7d       	andi	r23, 0xDC	; 220
    8538:	7d 7e       	andi	r23, 0xED	; 237
    853a:	7e 7f       	andi	r23, 0xFE	; 254
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7e 7e       	andi	r23, 0xEE	; 238
    8548:	7d 7d       	andi	r23, 0xDD	; 221
    854a:	7c 7b       	andi	r23, 0xBC	; 188
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 77       	andi	r23, 0x78	; 120
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6e       	ori	r23, 0xE0	; 224
    8556:	6c 6b       	ori	r22, 0xBC	; 188
    8558:	69 67       	ori	r22, 0x79	; 121
    855a:	65 63       	ori	r22, 0x35	; 53
    855c:	61 5f       	subi	r22, 0xF1	; 241
    855e:	5d 5b       	subi	r21, 0xBD	; 189
    8560:	59 57       	subi	r21, 0x79	; 121
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	50 4e       	sbci	r21, 0xE0	; 224
    8566:	4c 4a       	sbci	r20, 0xAC	; 172
    8568:	48 45       	sbci	r20, 0x58	; 88
    856a:	43 41       	sbci	r20, 0x13	; 19
    856c:	3f 3d       	cpi	r19, 0xDF	; 223
    856e:	3b 39       	cpi	r19, 0x9B	; 155
    8570:	37 35       	cpi	r19, 0x57	; 87
    8572:	33 32       	cpi	r19, 0x23	; 35
    8574:	30 2f       	mov	r19, r16
    8576:	2e 2d       	mov	r18, r14
    8578:	2c 2b       	or	r18, r28
    857a:	2c 2d       	mov	r18, r12
    857c:	30 42       	sbci	r19, 0x20	; 32
    857e:	3d 28       	or	r3, r13
    8580:	00 e9       	ldi	r16, 0x90	; 144
    8582:	e5 fe       	sbrs	r14, 5
    8584:	d4 d7       	rcall	.+4008   	; 0x952e <init_enemy_shark+0x7e>
    8586:	d7 d7       	rcall	.+4014   	; 0x9536 <init_enemy_shark+0x86>
    8588:	d6 d4       	rcall	.+2476   	; 0x8f36 <LBCollides+0x44>
    858a:	d2 d0       	rcall	.+420    	; 0x8730 <waves+0x930>
    858c:	ce cc       	rjmp	.-1636   	; 0x7f2a <waves+0x12a>
    858e:	ca c8       	rjmp	.-3692   	; 0x7724 <ProcessMusic+0x8e>
    8590:	c6 c3       	rjmp	.+1932   	; 0x8d1e <LBGetJoyPadState+0xe>
    8592:	c1 bf       	out	0x31, r28	; 49
    8594:	bd ba       	out	0x1d, r11	; 29
    8596:	b8 b6       	in	r11, 0x38	; 56
    8598:	b4 b1       	in	r27, 0x04	; 4
    859a:	af ad       	ldd	r26, Y+63	; 0x3f
    859c:	ab a9       	ldd	r26, Y+51	; 0x33
    859e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    85a2:	9f 9e       	mul	r9, r31
    85a4:	9c 9a       	sbi	0x13, 4	; 19
    85a6:	99 97       	sbiw	r26, 0x29	; 41
    85a8:	95 94       	asr	r9
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	89 88       	ldd	r8, Y+17	; 0x11
    85b4:	88 87       	std	Y+8, r24	; 0x08
    85b6:	86 85       	ldd	r24, Z+14	; 0x0e
    85b8:	85 84       	ldd	r8, Z+13	; 0x0d
    85ba:	84 84       	ldd	r8, Z+12	; 0x0c
    85bc:	83 83       	std	Z+3, r24	; 0x03
    85be:	83 83       	std	Z+3, r24	; 0x03
    85c0:	83 83       	std	Z+3, r24	; 0x03
    85c2:	83 83       	std	Z+3, r24	; 0x03
    85c4:	83 84       	ldd	r8, Z+11	; 0x0b
    85c6:	84 84       	ldd	r8, Z+12	; 0x0c
    85c8:	85 85       	ldd	r24, Z+13	; 0x0d
    85ca:	86 87       	std	Z+14, r24	; 0x0e
    85cc:	88 88       	ldd	r8, Y+16	; 0x10
    85ce:	89 8a       	std	Y+17, r8	; 0x11
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 94 	lds	r25, 0x9493
    85d8:	95 97       	sbiw	r26, 0x25	; 37
    85da:	99 9a       	sbi	0x13, 1	; 19
    85dc:	9c 9e       	mul	r9, r28
    85de:	9f a1       	ldd	r25, Y+39	; 0x27
    85e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    85e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    85e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e6:	af b1       	in	r26, 0x0f	; 15
    85e8:	b4 b6       	in	r11, 0x34	; 52
    85ea:	b8 ba       	out	0x18, r11	; 24
    85ec:	bd bf       	out	0x3d, r27	; 61
    85ee:	c1 c3       	rjmp	.+1922   	; 0x8d72 <LBGetJoyPadState+0x62>
    85f0:	c6 c8       	rjmp	.-3700   	; 0x777e <ProcessMusic+0xe8>
    85f2:	ca cc       	rjmp	.-1644   	; 0x7f88 <waves+0x188>
    85f4:	ce d0       	rcall	.+412    	; 0x8792 <waves+0x992>
    85f6:	d2 d4       	rcall	.+2468   	; 0x8f9c <LBMapSprite+0x14>
    85f8:	d6 d7       	rcall	.+4012   	; 0x95a6 <clear_overlay+0x4>
    85fa:	d7 d7       	rcall	.+4014   	; 0x95aa <clear_overlay+0x8>
    85fc:	d4 fe       	sbrs	r13, 4
    85fe:	e5 e9       	ldi	r30, 0x95	; 149
    8600:	f9 f8       	.word	0xf8f9	; ????
    8602:	f9 f5       	brne	.+126    	; 0x8682 <waves+0x882>
    8604:	eb e1       	ldi	r30, 0x1B	; 27
    8606:	dd de       	rcall	.-582    	; 0x83c2 <waves+0x5c2>
    8608:	e0 e2       	ldi	r30, 0x20	; 32
    860a:	e4 e5       	ldi	r30, 0x54	; 84
    860c:	e6 e5       	ldi	r30, 0x56	; 86
    860e:	e4 e2       	ldi	r30, 0x24	; 36
    8610:	de d9       	rcall	.-3140   	; 0x79ce <ProcessMusic+0x338>
    8612:	d2 ca       	rjmp	.-2652   	; 0x7bb8 <esmw+0x7a>
    8614:	c1 b7       	in	r28, 0x31	; 49
    8616:	ac a2       	std	Y+36, r10	; 0x24
    8618:	99 91       	ld	r25, Y+
    861a:	8a 86       	std	Y+10, r8	; 0x0a
    861c:	83 81       	ldd	r24, Z+3	; 0x03
    861e:	80 80       	ld	r8, Z
    8620:	81 82       	std	Z+1, r8	; 0x01
    8622:	83 85       	ldd	r24, Z+11	; 0x0b
    8624:	86 88       	ldd	r8, Z+22	; 0x16
    8626:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8628:	8d 8f       	std	Y+29, r24	; 0x1d
    862a:	90 92 93 95 	sts	0x9593, r9
    862e:	96 97       	sbiw	r26, 0x26	; 38
    8630:	98 99       	sbic	0x13, 0	; 19
    8632:	9a 9b       	sbis	0x13, 2	; 19
    8634:	9b 9c       	mul	r9, r11
    8636:	9d 9d       	mul	r25, r13
    8638:	9d 9e       	mul	r9, r29
    863a:	9e 9e       	mul	r9, r30
    863c:	9f 9f       	mul	r25, r31
    863e:	9f 9f       	mul	r25, r31
    8640:	9f 9f       	mul	r25, r31
    8642:	9f 9e       	mul	r9, r31
    8644:	9e 9e       	mul	r9, r30
    8646:	9d 9d       	mul	r25, r13
    8648:	9d 9c       	mul	r9, r13
    864a:	9b 9b       	sbis	0x13, 3	; 19
    864c:	9a 99       	sbic	0x13, 2	; 19
    864e:	98 97       	sbiw	r26, 0x28	; 40
    8650:	96 95       	lsr	r25
    8652:	93 92       	.word	0x9293	; ????
    8654:	90 8f       	std	Z+24, r25	; 0x18
    8656:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8658:	8a 88       	ldd	r8, Y+18	; 0x12
    865a:	86 85       	ldd	r24, Z+14	; 0x0e
    865c:	83 82       	std	Z+3, r8	; 0x03
    865e:	81 80       	ldd	r8, Z+1	; 0x01
    8660:	80 81       	ld	r24, Z
    8662:	83 86       	std	Z+11, r8	; 0x0b
    8664:	8a 91       	ld	r24, -Y
    8666:	99 a2       	std	Y+33, r9	; 0x21
    8668:	ac b7       	in	r26, 0x3c	; 60
    866a:	c1 ca       	rjmp	.-2686   	; 0x7bee <esmw+0xb0>
    866c:	d2 d9       	rcall	.-3164   	; 0x7a12 <ProcessMusic+0x37c>
    866e:	de e2       	ldi	r29, 0x2E	; 46
    8670:	e4 e5       	ldi	r30, 0x54	; 84
    8672:	e6 e5       	ldi	r30, 0x56	; 86
    8674:	e4 e2       	ldi	r30, 0x24	; 36
    8676:	e0 de       	rcall	.-576    	; 0x8438 <waves+0x638>
    8678:	dd e1       	ldi	r29, 0x1D	; 29
    867a:	eb f5       	brvc	.+122    	; 0x86f6 <waves+0x8f6>
    867c:	f9 f8       	.word	0xf8f9	; ????
    867e:	f9 00       	.word	0x00f9	; ????
    8680:	07 08       	sbc	r0, r7
    8682:	07 0b       	sbc	r16, r23
    8684:	15 1f       	adc	r17, r21
    8686:	23 22       	and	r2, r19
    8688:	20 1e       	adc	r2, r16
    868a:	1c 1b       	sub	r17, r28
    868c:	1a 1b       	sub	r17, r26
    868e:	1c 1e       	adc	r1, r28
    8690:	22 27       	eor	r18, r18
    8692:	2e 36       	cpi	r18, 0x6E	; 110
    8694:	3f 49       	sbci	r19, 0x9F	; 159
    8696:	54 5e       	subi	r21, 0xE4	; 228
    8698:	67 6f       	ori	r22, 0xF7	; 247
    869a:	76 7a       	andi	r23, 0xA6	; 166
    869c:	7e 7f       	andi	r23, 0xFE	; 254
    869e:	7f 7f       	andi	r23, 0xFF	; 255
    86a0:	7f 7e       	andi	r23, 0xEF	; 239
    86a2:	7d 7b       	andi	r23, 0xBD	; 189
    86a4:	7a 78       	andi	r23, 0x8A	; 138
    86a6:	76 74       	andi	r23, 0x46	; 70
    86a8:	73 71       	andi	r23, 0x13	; 19
    86aa:	70 6e       	ori	r23, 0xE0	; 224
    86ac:	6d 6b       	ori	r22, 0xBD	; 189
    86ae:	6a 69       	ori	r22, 0x9A	; 154
    86b0:	68 67       	ori	r22, 0x78	; 120
    86b2:	66 65       	ori	r22, 0x56	; 86
    86b4:	65 64       	ori	r22, 0x45	; 69
    86b6:	64 63       	ori	r22, 0x34	; 52
    86b8:	63 62       	ori	r22, 0x23	; 35
    86ba:	62 62       	ori	r22, 0x22	; 34
    86bc:	61 61       	ori	r22, 0x11	; 17
    86be:	61 61       	ori	r22, 0x11	; 17
    86c0:	61 61       	ori	r22, 0x11	; 17
    86c2:	61 62       	ori	r22, 0x21	; 33
    86c4:	62 62       	ori	r22, 0x22	; 34
    86c6:	63 63       	ori	r22, 0x33	; 51
    86c8:	63 64       	ori	r22, 0x43	; 67
    86ca:	65 65       	ori	r22, 0x55	; 85
    86cc:	66 67       	ori	r22, 0x76	; 118
    86ce:	68 69       	ori	r22, 0x98	; 152
    86d0:	6a 6b       	ori	r22, 0xBA	; 186
    86d2:	6d 6e       	ori	r22, 0xED	; 237
    86d4:	70 71       	andi	r23, 0x10	; 16
    86d6:	73 74       	andi	r23, 0x43	; 67
    86d8:	76 78       	andi	r23, 0x86	; 134
    86da:	7a 7b       	andi	r23, 0xBA	; 186
    86dc:	7d 7e       	andi	r23, 0xED	; 237
    86de:	7f 7f       	andi	r23, 0xFF	; 255
    86e0:	7f 7f       	andi	r23, 0xFF	; 255
    86e2:	7e 7a       	andi	r23, 0xAE	; 174
    86e4:	76 6f       	ori	r23, 0xF6	; 246
    86e6:	67 5e       	subi	r22, 0xE7	; 231
    86e8:	54 49       	sbci	r21, 0x94	; 148
    86ea:	3f 36       	cpi	r19, 0x6F	; 111
    86ec:	2e 27       	eor	r18, r30
    86ee:	22 1e       	adc	r2, r18
    86f0:	1c 1b       	sub	r17, r28
    86f2:	1a 1b       	sub	r17, r26
    86f4:	1c 1e       	adc	r1, r28
    86f6:	20 22       	and	r2, r16
    86f8:	23 1f       	adc	r18, r19
    86fa:	15 0b       	sbc	r17, r21
    86fc:	07 08       	sbc	r0, r7
    86fe:	07 00       	.word	0x0007	; ????
    8700:	1f 31       	cpi	r17, 0x1F	; 31
    8702:	3d 44       	sbci	r19, 0x4D	; 77
    8704:	4e 53       	subi	r20, 0x3E	; 62
    8706:	54 56       	subi	r21, 0x64	; 100
    8708:	5a 5f       	subi	r21, 0xFA	; 250
    870a:	64 69       	ori	r22, 0x94	; 148
    870c:	6e 74       	andi	r22, 0x4E	; 78
    870e:	76 79       	andi	r23, 0x96	; 150
    8710:	7c 7f       	andi	r23, 0xFC	; 252
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7c       	andi	r23, 0xCF	; 207
    877c:	78 71       	andi	r23, 0x18	; 24
    877e:	68 4c       	sbci	r22, 0xC8	; 200
    8780:	2c 1c       	adc	r2, r12
    8782:	12 0c       	add	r1, r2
    8784:	0a 0b       	sbc	r16, r26
    8786:	0a 05       	cpc	r16, r10
    8788:	fd f3       	brhs	.-2      	; 0x8788 <waves+0x988>
    878a:	e9 df       	rcall	.-46     	; 0x875e <waves+0x95e>
    878c:	d4 ca       	rjmp	.-2648   	; 0x7d36 <steptable+0x12e>
    878e:	c0 b7       	in	r28, 0x30	; 48
    8790:	ae a6       	std	Y+46, r10	; 0x2e
    8792:	9e 97       	sbiw	r26, 0x2e	; 46
    8794:	91 8b       	std	Z+17, r25	; 0x11
    8796:	86 85       	ldd	r24, Z+14	; 0x0e
    8798:	82 80       	ldd	r8, Z+2	; 0x02
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 87       	std	Z+8, r24	; 0x08
    87f6:	91 9d       	mul	r25, r1
    87f8:	ac c4       	rjmp	.+2392   	; 0x9152 <init_default_high_scores+0x24>
    87fa:	cb d4       	rcall	.+2454   	; 0x9192 <init_player_state+0x10>
    87fc:	dd f2       	brhs	.-74     	; 0x87b4 <waves+0x9b4>
    87fe:	fa fa       	.word	0xfafa	; ????

00008800 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8800:	80 91 f3 0c 	lds	r24, 0x0CF3
    8804:	90 91 7e 0d 	lds	r25, 0x0D7E
    8808:	89 17       	cp	r24, r25
    880a:	78 f4       	brcc	.+30     	; 0x882a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    880c:	e8 2f       	mov	r30, r24
    880e:	f0 e0       	ldi	r31, 0x00	; 0
    8810:	9f 01       	movw	r18, r30
    8812:	22 0f       	add	r18, r18
    8814:	33 1f       	adc	r19, r19
    8816:	e2 0f       	add	r30, r18
    8818:	f3 1f       	adc	r31, r19
    881a:	e0 5b       	subi	r30, 0xB0	; 176
    881c:	f3 4f       	sbci	r31, 0xF3	; 243
    881e:	a0 81       	ld	r26, Z
    8820:	b1 81       	ldd	r27, Z+1	; 0x01
    8822:	92 81       	ldd	r25, Z+2	; 0x02
    8824:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8826:	8f 5f       	subi	r24, 0xFF	; 255
    8828:	ed cf       	rjmp	.-38     	; 0x8804 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    882a:	08 95       	ret

0000882c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    882c:	2f 92       	push	r2
    882e:	3f 92       	push	r3
    8830:	4f 92       	push	r4
    8832:	5f 92       	push	r5
    8834:	6f 92       	push	r6
    8836:	7f 92       	push	r7
    8838:	8f 92       	push	r8
    883a:	9f 92       	push	r9
    883c:	af 92       	push	r10
    883e:	bf 92       	push	r11
    8840:	cf 92       	push	r12
    8842:	df 92       	push	r13
    8844:	ef 92       	push	r14
    8846:	ff 92       	push	r15
    8848:	0f 93       	push	r16
    884a:	1f 93       	push	r17
    884c:	cf 93       	push	r28
    884e:	df 93       	push	r29
    8850:	00 d0       	rcall	.+0      	; 0x8852 <ProcessSprites+0x26>
    8852:	00 d0       	rcall	.+0      	; 0x8854 <ProcessSprites+0x28>
    8854:	cd b7       	in	r28, 0x3d	; 61
    8856:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8858:	80 91 00 05 	lds	r24, 0x0500
    885c:	88 23       	and	r24, r24
    885e:	09 f4       	brne	.+2      	; 0x8862 <ProcessSprites+0x36>
    8860:	e0 c0       	rjmp	.+448    	; 0x8a22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8862:	80 91 f2 0c 	lds	r24, 0x0CF2
    8866:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    886a:	80 93 7e 0d 	sts	0x0D7E, r24
    886e:	e0 e1       	ldi	r30, 0x10	; 16
    8870:	ce 2e       	mov	r12, r30
    8872:	e5 e0       	ldi	r30, 0x05	; 5
    8874:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8876:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8878:	f6 01       	movw	r30, r12
    887a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    887c:	20 3e       	cpi	r18, 0xE0	; 224
    887e:	09 f4       	brne	.+2      	; 0x8882 <ProcessSprites+0x56>
    8880:	b1 c0       	rjmp	.+354    	; 0x89e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8882:	80 91 b2 0c 	lds	r24, 0x0CB2
    8886:	90 e0       	ldi	r25, 0x00	; 0
    8888:	82 0f       	add	r24, r18
    888a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    888c:	41 81       	ldd	r20, Z+1	; 0x01
    888e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8892:	30 e0       	ldi	r19, 0x00	; 0
    8894:	24 0f       	add	r18, r20
    8896:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8898:	ac 01       	movw	r20, r24
    889a:	73 e0       	ldi	r23, 0x03	; 3
    889c:	56 95       	lsr	r21
    889e:	47 95       	ror	r20
    88a0:	7a 95       	dec	r23
    88a2:	e1 f7       	brne	.-8      	; 0x889c <ProcessSprites+0x70>
    88a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    88a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    88a8:	11 f0       	breq	.+4      	; 0x88ae <ProcessSprites+0x82>
    88aa:	92 e0       	ldi	r25, 0x02	; 2
    88ac:	01 c0       	rjmp	.+2      	; 0x88b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    88ae:	91 e0       	ldi	r25, 0x01	; 1
    88b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    88b2:	a9 01       	movw	r20, r18
    88b4:	63 e0       	ldi	r22, 0x03	; 3
    88b6:	56 95       	lsr	r21
    88b8:	47 95       	ror	r20
    88ba:	6a 95       	dec	r22
    88bc:	e1 f7       	brne	.-8      	; 0x88b6 <ProcessSprites+0x8a>
    88be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    88c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    88c2:	19 f0       	breq	.+6      	; 0x88ca <ProcessSprites+0x9e>
    88c4:	52 e0       	ldi	r21, 0x02	; 2
    88c6:	35 2e       	mov	r3, r21
    88c8:	02 c0       	rjmp	.+4      	; 0x88ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    88ca:	33 24       	eor	r3, r3
    88cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88ce:	30 e0       	ldi	r19, 0x00	; 0
    88d0:	32 2f       	mov	r19, r18
    88d2:	22 27       	eor	r18, r18
    88d4:	f9 01       	movw	r30, r18
    88d6:	e8 0f       	add	r30, r24
    88d8:	f1 1d       	adc	r31, r1
    88da:	fc 83       	std	Y+4, r31	; 0x04
    88dc:	eb 83       	std	Y+3, r30	; 0x03
    88de:	e1 2c       	mov	r14, r1
    88e0:	f1 2c       	mov	r15, r1
    88e2:	be 2c       	mov	r11, r14
    88e4:	aa 24       	eor	r10, r10
    88e6:	26 2c       	mov	r2, r6
    88e8:	45 2c       	mov	r4, r5
    88ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    88ec:	84 2c       	mov	r8, r4
    88ee:	91 2c       	mov	r9, r1
    88f0:	84 2d       	mov	r24, r4
    88f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    88f6:	42 2f       	mov	r20, r18
    88f8:	50 e0       	ldi	r21, 0x00	; 0
    88fa:	44 0f       	add	r20, r20
    88fc:	55 1f       	adc	r21, r21
    88fe:	84 16       	cp	r8, r20
    8900:	95 06       	cpc	r9, r21
    8902:	14 f0       	brlt	.+4      	; 0x8908 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8904:	22 0f       	add	r18, r18
    8906:	03 c0       	rjmp	.+6      	; 0x890e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8908:	42 16       	cp	r4, r18
    890a:	10 f0       	brcs	.+4      	; 0x8910 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    890c:	84 2d       	mov	r24, r4
    890e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8910:	ff e1       	ldi	r31, 0x1F	; 31
    8912:	f2 15       	cp	r31, r2
    8914:	18 f4       	brcc	.+6      	; 0x891c <ProcessSprites+0xf0>
    8916:	00 ee       	ldi	r16, 0xE0	; 224
    8918:	02 0d       	add	r16, r2
    891a:	01 c0       	rjmp	.+2      	; 0x891e <ProcessSprites+0xf2>
    891c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    891e:	28 2f       	mov	r18, r24
    8920:	26 95       	lsr	r18
    8922:	26 95       	lsr	r18
    8924:	26 95       	lsr	r18
    8926:	10 e0       	ldi	r17, 0x00	; 0
    8928:	40 e2       	ldi	r20, 0x20	; 32
    892a:	24 9f       	mul	r18, r20
    892c:	00 0d       	add	r16, r0
    892e:	11 1d       	adc	r17, r1
    8930:	11 24       	eor	r1, r1
    8932:	23 e0       	ldi	r18, 0x03	; 3
    8934:	00 0f       	add	r16, r16
    8936:	11 1f       	adc	r17, r17
    8938:	2a 95       	dec	r18
    893a:	e1 f7       	brne	.-8      	; 0x8934 <ProcessSprites+0x108>
    893c:	87 70       	andi	r24, 0x07	; 7
    893e:	08 0f       	add	r16, r24
    8940:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8942:	00 50       	subi	r16, 0x00	; 0
    8944:	1f 4f       	sbci	r17, 0xFF	; 255
    8946:	f8 01       	movw	r30, r16
    8948:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    894a:	81 e0       	ldi	r24, 0x01	; 1
    894c:	7c 31       	cpi	r23, 0x1C	; 28
    894e:	08 f4       	brcc	.+2      	; 0x8952 <ProcessSprites+0x126>
    8950:	80 e0       	ldi	r24, 0x00	; 0
    8952:	21 e0       	ldi	r18, 0x01	; 1
    8954:	30 91 f3 0c 	lds	r19, 0x0CF3
    8958:	73 17       	cp	r23, r19
    895a:	18 f0       	brcs	.+6      	; 0x8962 <ProcessSprites+0x136>
    895c:	20 e0       	ldi	r18, 0x00	; 0
    895e:	88 23       	and	r24, r24
    8960:	51 f1       	breq	.+84     	; 0x89b6 <ProcessSprites+0x18a>
    8962:	60 91 7e 0d 	lds	r22, 0x0D7E
    8966:	6c 31       	cpi	r22, 0x1C	; 28
    8968:	20 f5       	brcc	.+72     	; 0x89b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    896a:	88 23       	and	r24, r24
    896c:	31 f0       	breq	.+12     	; 0x897a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    896e:	84 ee       	ldi	r24, 0xE4	; 228
    8970:	87 0f       	add	r24, r23
    8972:	7a 83       	std	Y+2, r23	; 0x02
    8974:	0e 94 9f 33 	call	0x673e	; 0x673e <CopyFlashTile>
    8978:	06 c0       	rjmp	.+12     	; 0x8986 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    897a:	22 23       	and	r18, r18
    897c:	29 f0       	breq	.+10     	; 0x8988 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    897e:	87 2f       	mov	r24, r23
    8980:	7a 83       	std	Y+2, r23	; 0x02
    8982:	0e 94 2e 34 	call	0x685c	; 0x685c <CopyRamTile>
    8986:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8988:	80 91 7e 0d 	lds	r24, 0x0D7E
    898c:	e8 2f       	mov	r30, r24
    898e:	f0 e0       	ldi	r31, 0x00	; 0
    8990:	9f 01       	movw	r18, r30
    8992:	22 0f       	add	r18, r18
    8994:	33 1f       	adc	r19, r19
    8996:	e2 0f       	add	r30, r18
    8998:	f3 1f       	adc	r31, r19
    899a:	e0 5b       	subi	r30, 0xB0	; 176
    899c:	f3 4f       	sbci	r31, 0xF3	; 243
    899e:	11 83       	std	Z+1, r17	; 0x01
    89a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    89a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    89a4:	f8 01       	movw	r30, r16
    89a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    89a8:	21 e0       	ldi	r18, 0x01	; 1
    89aa:	28 0f       	add	r18, r24
    89ac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    89b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    89b2:	7c 31       	cpi	r23, 0x1C	; 28
    89b4:	38 f4       	brcc	.+14     	; 0x89c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    89b6:	2b 81       	ldd	r18, Y+3	; 0x03
    89b8:	3c 81       	ldd	r19, Y+4	; 0x04
    89ba:	a5 01       	movw	r20, r10
    89bc:	67 2f       	mov	r22, r23
    89be:	87 2d       	mov	r24, r7
    89c0:	0e 94 bb 34 	call	0x6976	; 0x6976 <BlitSprite>
    89c4:	ff ef       	ldi	r31, 0xFF	; 255
    89c6:	af 1a       	sub	r10, r31
    89c8:	bf 0a       	sbc	r11, r31
    89ca:	23 94       	inc	r2
    89cc:	82 2d       	mov	r24, r2
    89ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    89d0:	99 81       	ldd	r25, Y+1	; 0x01
    89d2:	89 17       	cp	r24, r25
    89d4:	08 f4       	brcc	.+2      	; 0x89d8 <ProcessSprites+0x1ac>
    89d6:	8c cf       	rjmp	.-232    	; 0x88f0 <ProcessSprites+0xc4>
    89d8:	ef ef       	ldi	r30, 0xFF	; 255
    89da:	ee 1a       	sub	r14, r30
    89dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    89de:	e3 14       	cp	r14, r3
    89e0:	08 f4       	brcc	.+2      	; 0x89e4 <ProcessSprites+0x1b8>
    89e2:	7f cf       	rjmp	.-258    	; 0x88e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    89e4:	73 94       	inc	r7
    89e6:	f4 e0       	ldi	r31, 0x04	; 4
    89e8:	cf 0e       	add	r12, r31
    89ea:	d1 1c       	adc	r13, r1
    89ec:	40 e1       	ldi	r20, 0x10	; 16
    89ee:	74 12       	cpse	r7, r20
    89f0:	43 cf       	rjmp	.-378    	; 0x8878 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    89f2:	0f 90       	pop	r0
    89f4:	0f 90       	pop	r0
    89f6:	0f 90       	pop	r0
    89f8:	0f 90       	pop	r0
    89fa:	df 91       	pop	r29
    89fc:	cf 91       	pop	r28
    89fe:	1f 91       	pop	r17
    8a00:	0f 91       	pop	r16
    8a02:	ff 90       	pop	r15
    8a04:	ef 90       	pop	r14
    8a06:	df 90       	pop	r13
    8a08:	cf 90       	pop	r12
    8a0a:	bf 90       	pop	r11
    8a0c:	af 90       	pop	r10
    8a0e:	9f 90       	pop	r9
    8a10:	8f 90       	pop	r8
    8a12:	7f 90       	pop	r7
    8a14:	6f 90       	pop	r6
    8a16:	5f 90       	pop	r5
    8a18:	4f 90       	pop	r4
    8a1a:	3f 90       	pop	r3
    8a1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8a1e:	0c 94 00 44 	jmp	0x8800	; 0x8800 <RestoreBackground>

	}
    8a22:	0f 90       	pop	r0
    8a24:	0f 90       	pop	r0
    8a26:	0f 90       	pop	r0
    8a28:	0f 90       	pop	r0
    8a2a:	df 91       	pop	r29
    8a2c:	cf 91       	pop	r28
    8a2e:	1f 91       	pop	r17
    8a30:	0f 91       	pop	r16
    8a32:	ff 90       	pop	r15
    8a34:	ef 90       	pop	r14
    8a36:	df 90       	pop	r13
    8a38:	cf 90       	pop	r12
    8a3a:	bf 90       	pop	r11
    8a3c:	af 90       	pop	r10
    8a3e:	9f 90       	pop	r9
    8a40:	8f 90       	pop	r8
    8a42:	7f 90       	pop	r7
    8a44:	6f 90       	pop	r6
    8a46:	5f 90       	pop	r5
    8a48:	4f 90       	pop	r4
    8a4a:	3f 90       	pop	r3
    8a4c:	2f 90       	pop	r2
    8a4e:	08 95       	ret

00008a50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8a50:	90 91 b3 0c 	lds	r25, 0x0CB3
    8a54:	96 0f       	add	r25, r22
    8a56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    8a5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    8a5e:	82 0f       	add	r24, r18
    8a60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    8a64:	80 91 b4 0c 	lds	r24, 0x0CB4
    8a68:	80 32       	cpi	r24, 0x20	; 32
    8a6a:	b0 f4       	brcc	.+44     	; 0x8a98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    8a6c:	29 2f       	mov	r18, r25
    8a6e:	30 e0       	ldi	r19, 0x00	; 0
    8a70:	78 e0       	ldi	r23, 0x08	; 8
    8a72:	87 9f       	mul	r24, r23
    8a74:	a0 01       	movw	r20, r0
    8a76:	11 24       	eor	r1, r1
    8a78:	24 17       	cp	r18, r20
    8a7a:	35 07       	cpc	r19, r21
    8a7c:	6c f0       	brlt	.+26     	; 0x8a98 <Scroll+0x48>
				if(dy>=0){	
    8a7e:	67 fd       	sbrc	r22, 7
    8a80:	05 c0       	rjmp	.+10     	; 0x8a8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8a82:	28 ef       	ldi	r18, 0xF8	; 248
    8a84:	82 9f       	mul	r24, r18
    8a86:	90 0d       	add	r25, r0
    8a88:	11 24       	eor	r1, r1
    8a8a:	04 c0       	rjmp	.+8      	; 0x8a94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    8a8c:	78 e0       	ldi	r23, 0x08	; 8
    8a8e:	87 9f       	mul	r24, r23
    8a90:	90 0d       	add	r25, r0
    8a92:	11 24       	eor	r1, r1
    8a94:	90 93 b3 0c 	sts	0x0CB3, r25
    8a98:	08 95       	ret

00008a9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8a9a:	e0 e1       	ldi	r30, 0x10	; 16
    8a9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8a9e:	80 ee       	ldi	r24, 0xE0	; 224
    8aa0:	80 83       	st	Z, r24
    8aa2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8aa4:	95 e0       	ldi	r25, 0x05	; 5
    8aa6:	e0 35       	cpi	r30, 0x50	; 80
    8aa8:	f9 07       	cpc	r31, r25
    8aaa:	d1 f7       	brne	.-12     	; 0x8aa0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    8aac:	80 e2       	ldi	r24, 0x20	; 32
    8aae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    8ab2:	10 92 af 0c 	sts	0x0CAF, r1
    8ab6:	08 95       	ret

00008ab8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8ab8:	2f 92       	push	r2
    8aba:	3f 92       	push	r3
    8abc:	4f 92       	push	r4
    8abe:	5f 92       	push	r5
    8ac0:	6f 92       	push	r6
    8ac2:	7f 92       	push	r7
    8ac4:	8f 92       	push	r8
    8ac6:	9f 92       	push	r9
    8ac8:	af 92       	push	r10
    8aca:	bf 92       	push	r11
    8acc:	cf 92       	push	r12
    8ace:	df 92       	push	r13
    8ad0:	ef 92       	push	r14
    8ad2:	ff 92       	push	r15
    8ad4:	0f 93       	push	r16
    8ad6:	1f 93       	push	r17
    8ad8:	cf 93       	push	r28
    8ada:	df 93       	push	r29
    8adc:	00 d0       	rcall	.+0      	; 0x8ade <DrawMap+0x26>
    8ade:	1f 92       	push	r1
    8ae0:	cd b7       	in	r28, 0x3d	; 61
    8ae2:	de b7       	in	r29, 0x3e	; 62
    8ae4:	28 2f       	mov	r18, r24
    8ae6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8ae8:	fa 01       	movw	r30, r20
    8aea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    8aec:	31 96       	adiw	r30, 0x01	; 1
    8aee:	34 90       	lpm	r3, Z
    8af0:	42 2c       	mov	r4, r2
    8af2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8af4:	e1 2c       	mov	r14, r1
    8af6:	f1 2c       	mov	r15, r1
    8af8:	00 e0       	ldi	r16, 0x00	; 0
    8afa:	10 e0       	ldi	r17, 0x00	; 0
    8afc:	c6 2e       	mov	r12, r22
    8afe:	d1 2c       	mov	r13, r1
    8b00:	03 15       	cp	r16, r3
    8b02:	68 f5       	brcc	.+90     	; 0x8b5e <DrawMap+0xa6>
    8b04:	1b 82       	std	Y+3, r1	; 0x03
    8b06:	1a 82       	std	Y+2, r1	; 0x02
    8b08:	57 01       	movw	r10, r14
    8b0a:	92 e0       	ldi	r25, 0x02	; 2
    8b0c:	a9 0e       	add	r10, r25
    8b0e:	b1 1c       	adc	r11, r1
    8b10:	48 01       	movw	r8, r16
    8b12:	8c 0c       	add	r8, r12
    8b14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    8b16:	ea 81       	ldd	r30, Y+2	; 0x02
    8b18:	e2 15       	cp	r30, r2
    8b1a:	e0 f4       	brcc	.+56     	; 0x8b54 <DrawMap+0x9c>
    8b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    8b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    8b20:	ea 0d       	add	r30, r10
    8b22:	fb 1d       	adc	r31, r11
    8b24:	e6 0d       	add	r30, r6
    8b26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8b28:	e4 91       	lpm	r30, Z
    8b2a:	f0 e0       	ldi	r31, 0x00	; 0
    8b2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    8b30:	70 e0       	ldi	r23, 0x00	; 0
    8b32:	c4 01       	movw	r24, r8
    8b34:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    8b38:	af 01       	movw	r20, r30
    8b3a:	68 2f       	mov	r22, r24
    8b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    8b3e:	82 0f       	add	r24, r18
    8b40:	29 83       	std	Y+1, r18	; 0x01
    8b42:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <SetTile>
    8b46:	8a 81       	ldd	r24, Y+2	; 0x02
    8b48:	9b 81       	ldd	r25, Y+3	; 0x03
    8b4a:	01 96       	adiw	r24, 0x01	; 1
    8b4c:	9b 83       	std	Y+3, r25	; 0x03
    8b4e:	8a 83       	std	Y+2, r24	; 0x02
    8b50:	29 81       	ldd	r18, Y+1	; 0x01
    8b52:	e1 cf       	rjmp	.-62     	; 0x8b16 <DrawMap+0x5e>
    8b54:	0f 5f       	subi	r16, 0xFF	; 255
    8b56:	1f 4f       	sbci	r17, 0xFF	; 255
    8b58:	e4 0c       	add	r14, r4
    8b5a:	f5 1c       	adc	r15, r5
    8b5c:	d1 cf       	rjmp	.-94     	; 0x8b00 <DrawMap+0x48>
			}
		}

	}
    8b5e:	0f 90       	pop	r0
    8b60:	0f 90       	pop	r0
    8b62:	0f 90       	pop	r0
    8b64:	df 91       	pop	r29
    8b66:	cf 91       	pop	r28
    8b68:	1f 91       	pop	r17
    8b6a:	0f 91       	pop	r16
    8b6c:	ff 90       	pop	r15
    8b6e:	ef 90       	pop	r14
    8b70:	df 90       	pop	r13
    8b72:	cf 90       	pop	r12
    8b74:	bf 90       	pop	r11
    8b76:	af 90       	pop	r10
    8b78:	9f 90       	pop	r9
    8b7a:	8f 90       	pop	r8
    8b7c:	7f 90       	pop	r7
    8b7e:	6f 90       	pop	r6
    8b80:	5f 90       	pop	r5
    8b82:	4f 90       	pop	r4
    8b84:	3f 90       	pop	r3
    8b86:	2f 90       	pop	r2
    8b88:	08 95       	ret

00008b8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8b8a:	0f 93       	push	r16
    8b8c:	1f 93       	push	r17
    8b8e:	cf 93       	push	r28
    8b90:	df 93       	push	r29
    8b92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b94:	c0 e0       	ldi	r28, 0x00	; 0
    8b96:	d0 e0       	ldi	r29, 0x00	; 0
    8b98:	c0 17       	cp	r28, r16
    8b9a:	d1 07       	cpc	r29, r17
    8b9c:	44 f4       	brge	.+16     	; 0x8bae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8b9e:	0e 94 04 37 	call	0x6e08	; 0x6e08 <GetVsyncFlag>
    8ba2:	88 23       	and	r24, r24
    8ba4:	e1 f3       	breq	.-8      	; 0x8b9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    8ba6:	0e 94 08 37 	call	0x6e10	; 0x6e10 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8baa:	21 96       	adiw	r28, 0x01	; 1
    8bac:	f5 cf       	rjmp	.-22     	; 0x8b98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8bae:	df 91       	pop	r29
    8bb0:	cf 91       	pop	r28
    8bb2:	1f 91       	pop	r17
    8bb4:	0f 91       	pop	r16
    8bb6:	08 95       	ret

00008bb8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    8bb8:	85 e5       	ldi	r24, 0x55	; 85
    8bba:	99 e0       	ldi	r25, 0x09	; 9
    8bbc:	0e 94 b6 39 	call	0x736c	; 0x736c <InitMusicPlayer>
			SetTileTable(logo_tileset);
    8bc0:	85 e5       	ldi	r24, 0x55	; 85
    8bc2:	91 e0       	ldi	r25, 0x01	; 1
    8bc4:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <SetTileTable>
			
			//draw logo
			ClearVram();
    8bc8:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <ClearVram>
			WaitVsync(15);		
    8bcc:	8f e0       	ldi	r24, 0x0F	; 15
    8bce:	90 e0       	ldi	r25, 0x00	; 0
    8bd0:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    8bd4:	41 e0       	ldi	r20, 0x01	; 1
    8bd6:	6f ef       	ldi	r22, 0xFF	; 255
    8bd8:	80 e0       	ldi	r24, 0x00	; 0
    8bda:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8bde:	4f e3       	ldi	r20, 0x3F	; 63
    8be0:	51 e0       	ldi	r21, 0x01	; 1
    8be2:	6c e0       	ldi	r22, 0x0C	; 12
    8be4:	8c e0       	ldi	r24, 0x0C	; 12
    8be6:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			WaitVsync(3);
    8bea:	83 e0       	ldi	r24, 0x03	; 3
    8bec:	90 e0       	ldi	r25, 0x00	; 0
    8bee:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    8bf2:	4e e2       	ldi	r20, 0x2E	; 46
    8bf4:	51 e0       	ldi	r21, 0x01	; 1
    8bf6:	6c e0       	ldi	r22, 0x0C	; 12
    8bf8:	8c e0       	ldi	r24, 0x0C	; 12
    8bfa:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			WaitVsync(2);
    8bfe:	82 e0       	ldi	r24, 0x02	; 2
    8c00:	90 e0       	ldi	r25, 0x00	; 0
    8c02:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8c06:	4f e3       	ldi	r20, 0x3F	; 63
    8c08:	51 e0       	ldi	r21, 0x01	; 1
    8c0a:	6c e0       	ldi	r22, 0x0C	; 12
    8c0c:	8c e0       	ldi	r24, 0x0C	; 12
    8c0e:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    8c12:	81 e4       	ldi	r24, 0x41	; 65
    8c14:	90 e0       	ldi	r25, 0x00	; 0
    8c16:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
			ClearVram();
    8c1a:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <ClearVram>
			WaitVsync(20);
    8c1e:	84 e1       	ldi	r24, 0x14	; 20
    8c20:	90 e0       	ldi	r25, 0x00	; 0
    8c22:	0c 94 c5 45 	jmp	0x8b8a	; 0x8b8a <WaitVsync>

00008c26 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8c26:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    8c2a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    8c2e:	81 e0       	ldi	r24, 0x01	; 1
    8c30:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    8c34:	66 23       	and	r22, r22
    8c36:	21 f0       	breq	.+8      	; 0x8c40 <doFade+0x1a>
		while(fadeActive==true);
    8c38:	80 91 7f 0d 	lds	r24, 0x0D7F
    8c3c:	81 11       	cpse	r24, r1
    8c3e:	fc cf       	rjmp	.-8      	; 0x8c38 <doFade+0x12>
    8c40:	08 95       	ret

00008c42 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8c42:	81 11       	cpse	r24, r1
    8c44:	03 c0       	rjmp	.+6      	; 0x8c4c <FadeIn+0xa>
		DDRC=0xff;
    8c46:	8f ef       	ldi	r24, 0xFF	; 255
    8c48:	87 b9       	out	0x07, r24	; 7
		return;
    8c4a:	08 95       	ret
	}
	fadeStep=1;
    8c4c:	91 e0       	ldi	r25, 0x01	; 1
    8c4e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    8c52:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    8c56:	0c 94 13 46 	jmp	0x8c26	; 0x8c26 <doFade>

00008c5a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8c5a:	81 11       	cpse	r24, r1
    8c5c:	02 c0       	rjmp	.+4      	; 0x8c62 <FadeOut+0x8>
		DDRC=0;
    8c5e:	17 b8       	out	0x07, r1	; 7
		return;
    8c60:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8c62:	9c e0       	ldi	r25, 0x0C	; 12
    8c64:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    8c68:	9f ef       	ldi	r25, 0xFF	; 255
    8c6a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    8c6e:	0c 94 13 46 	jmp	0x8c26	; 0x8c26 <doFade>

00008c72 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8c72:	80 91 7f 0d 	lds	r24, 0x0D7F
    8c76:	88 23       	and	r24, r24
    8c78:	01 f1       	breq	.+64     	; 0x8cba <ProcessFading+0x48>
		if(currFadeFrame==0){
    8c7a:	80 91 80 0d 	lds	r24, 0x0D80
    8c7e:	81 11       	cpse	r24, r1
    8c80:	19 c0       	rjmp	.+50     	; 0x8cb4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8c82:	80 91 7c 0d 	lds	r24, 0x0D7C
    8c86:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8c8a:	e0 91 81 0d 	lds	r30, 0x0D81
    8c8e:	f0 e0       	ldi	r31, 0x00	; 0
    8c90:	ef 5d       	subi	r30, 0xDF	; 223
    8c92:	fe 4f       	sbci	r31, 0xFE	; 254
    8c94:	e4 91       	lpm	r30, Z
    8c96:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8c98:	90 91 7d 0d 	lds	r25, 0x0D7D
    8c9c:	80 91 81 0d 	lds	r24, 0x0D81
    8ca0:	89 0f       	add	r24, r25
    8ca2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8ca6:	88 23       	and	r24, r24
    8ca8:	11 f0       	breq	.+4      	; 0x8cae <ProcessFading+0x3c>
    8caa:	8d 30       	cpi	r24, 0x0D	; 13
    8cac:	31 f4       	brne	.+12     	; 0x8cba <ProcessFading+0x48>
				fadeActive=false;
    8cae:	10 92 7f 0d 	sts	0x0D7F, r1
    8cb2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8cb4:	81 50       	subi	r24, 0x01	; 1
    8cb6:	80 93 80 0d 	sts	0x0D80, r24
    8cba:	08 95       	ret

00008cbc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8cbc:	0e 94 39 46 	call	0x8c72	; 0x8c72 <ProcessFading>
		ProcessSprites();
    8cc0:	0c 94 16 44 	jmp	0x882c	; 0x882c <ProcessSprites>

00008cc4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    8cc4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    8cc6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    8cc8:	93 81       	ldd	r25, Z+3	; 0x03
    8cca:	9f 5f       	subi	r25, 0xFF	; 255
    8ccc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8cce:	42 81       	ldd	r20, Z+2	; 0x02
    8cd0:	80 81       	ld	r24, Z
    8cd2:	26 81       	ldd	r18, Z+6	; 0x06
    8cd4:	37 81       	ldd	r19, Z+7	; 0x07
    8cd6:	94 17       	cp	r25, r20
    8cd8:	30 f4       	brcc	.+12     	; 0x8ce6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    8cda:	f9 01       	movw	r30, r18
    8cdc:	e8 0f       	add	r30, r24
    8cde:	f1 1d       	adc	r31, r1
    8ce0:	e8 0f       	add	r30, r24
    8ce2:	f1 1d       	adc	r31, r1
    8ce4:	12 c0       	rjmp	.+36     	; 0x8d0a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    8ce6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8ce8:	90 e0       	ldi	r25, 0x00	; 0
    8cea:	01 96       	adiw	r24, 0x01	; 1
    8cec:	61 81       	ldd	r22, Z+1	; 0x01
    8cee:	70 e0       	ldi	r23, 0x00	; 0
    8cf0:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    8cf4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    8cf6:	81 11       	cpse	r24, r1
    8cf8:	02 c0       	rjmp	.+4      	; 0x8cfe <LBGetNextFrame+0x3a>
    8cfa:	41 e0       	ldi	r20, 0x01	; 1
    8cfc:	44 83       	std	Z+4, r20	; 0x04
    8cfe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    8d00:	88 0f       	add	r24, r24
    8d02:	99 1f       	adc	r25, r25
    8d04:	f9 01       	movw	r30, r18
    8d06:	e8 0f       	add	r30, r24
    8d08:	f9 1f       	adc	r31, r25
    8d0a:	80 81       	ld	r24, Z
    8d0c:	91 81       	ldd	r25, Z+1	; 0x01
}
    8d0e:	08 95       	ret

00008d10 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8d10:	0f 93       	push	r16
    8d12:	1f 93       	push	r17
    8d14:	cf 93       	push	r28
    8d16:	df 93       	push	r29
    8d18:	1f 92       	push	r1
    8d1a:	cd b7       	in	r28, 0x3d	; 61
    8d1c:	de b7       	in	r29, 0x3e	; 62
    8d1e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    8d20:	86 2f       	mov	r24, r22
    8d22:	69 83       	std	Y+1, r22	; 0x01
    8d24:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <ReadJoypad>
    8d28:	d8 01       	movw	r26, r16
    8d2a:	15 96       	adiw	r26, 0x05	; 5
    8d2c:	9c 93       	st	X, r25
    8d2e:	8e 93       	st	-X, r24
    8d30:	14 97       	sbiw	r26, 0x04	; 4
    8d32:	69 81       	ldd	r22, Y+1	; 0x01
    8d34:	e6 2f       	mov	r30, r22
    8d36:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8d38:	00 97       	sbiw	r24, 0x00	; 0
    8d3a:	51 f0       	breq	.+20     	; 0x8d50 <LBGetJoyPadState+0x40>
    8d3c:	df 01       	movw	r26, r30
    8d3e:	aa 0f       	add	r26, r26
    8d40:	bb 1f       	adc	r27, r27
    8d42:	ac 50       	subi	r26, 0x0C	; 12
    8d44:	b3 4f       	sbci	r27, 0xF3	; 243
    8d46:	2d 91       	ld	r18, X+
    8d48:	3c 91       	ld	r19, X
    8d4a:	82 17       	cp	r24, r18
    8d4c:	93 07       	cpc	r25, r19
    8d4e:	21 f0       	breq	.+8      	; 0x8d58 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8d50:	d8 01       	movw	r26, r16
    8d52:	16 96       	adiw	r26, 0x06	; 6
    8d54:	1c 92       	st	X, r1
    8d56:	07 c0       	rjmp	.+14     	; 0x8d66 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8d58:	d8 01       	movw	r26, r16
    8d5a:	16 96       	adiw	r26, 0x06	; 6
    8d5c:	2c 91       	ld	r18, X
    8d5e:	16 97       	sbiw	r26, 0x06	; 6
    8d60:	2f 5f       	subi	r18, 0xFF	; 255
    8d62:	16 96       	adiw	r26, 0x06	; 6
    8d64:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8d66:	ee 0f       	add	r30, r30
    8d68:	ff 1f       	adc	r31, r31
    8d6a:	ec 50       	subi	r30, 0x0C	; 12
    8d6c:	f3 4f       	sbci	r31, 0xF3	; 243
    8d6e:	20 81       	ld	r18, Z
    8d70:	31 81       	ldd	r19, Z+1	; 0x01
    8d72:	a9 01       	movw	r20, r18
    8d74:	40 95       	com	r20
    8d76:	50 95       	com	r21
    8d78:	48 23       	and	r20, r24
    8d7a:	59 23       	and	r21, r25
    8d7c:	d8 01       	movw	r26, r16
    8d7e:	11 96       	adiw	r26, 0x01	; 1
    8d80:	5c 93       	st	X, r21
    8d82:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8d84:	ac 01       	movw	r20, r24
    8d86:	40 95       	com	r20
    8d88:	50 95       	com	r21
    8d8a:	24 23       	and	r18, r20
    8d8c:	35 23       	and	r19, r21
    8d8e:	13 96       	adiw	r26, 0x03	; 3
    8d90:	3c 93       	st	X, r19
    8d92:	2e 93       	st	-X, r18
    8d94:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8d96:	91 83       	std	Z+1, r25	; 0x01
    8d98:	80 83       	st	Z, r24
}
    8d9a:	0f 90       	pop	r0
    8d9c:	df 91       	pop	r29
    8d9e:	cf 91       	pop	r28
    8da0:	1f 91       	pop	r17
    8da2:	0f 91       	pop	r16
    8da4:	08 95       	ret

00008da6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    8da6:	90 ed       	ldi	r25, 0xD0	; 208
    8da8:	94 0f       	add	r25, r20
    8daa:	e0 91 82 0d 	lds	r30, 0x0D82
    8dae:	f0 91 83 0d 	lds	r31, 0x0D83
    8db2:	9a 30       	cpi	r25, 0x0A	; 10
    8db4:	38 f4       	brcc	.+14     	; 0x8dc4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    8db6:	24 2f       	mov	r18, r20
    8db8:	30 e0       	ldi	r19, 0x00	; 0
    8dba:	2d 52       	subi	r18, 0x2D	; 45
    8dbc:	31 09       	sbc	r19, r1
    8dbe:	e2 0f       	add	r30, r18
    8dc0:	f3 1f       	adc	r31, r19
    8dc2:	0c c0       	rjmp	.+24     	; 0x8ddc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    8dc4:	9f eb       	ldi	r25, 0xBF	; 191
    8dc6:	94 0f       	add	r25, r20
    8dc8:	9a 31       	cpi	r25, 0x1A	; 26
    8dca:	38 f4       	brcc	.+14     	; 0x8dda <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    8dcc:	50 e0       	ldi	r21, 0x00	; 0
    8dce:	44 53       	subi	r20, 0x34	; 52
    8dd0:	51 09       	sbc	r21, r1
    8dd2:	e4 0f       	add	r30, r20
    8dd4:	f5 1f       	adc	r31, r21
    8dd6:	44 91       	lpm	r20, Z
    8dd8:	03 c0       	rjmp	.+6      	; 0x8de0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    8dda:	32 96       	adiw	r30, 0x02	; 2
    8ddc:	e4 91       	lpm	r30, Z
    8dde:	4e 2f       	mov	r20, r30
    8de0:	50 e0       	ldi	r21, 0x00	; 0
    8de2:	0c 94 ee 36 	jmp	0x6ddc	; 0x6ddc <SetTile>

00008de6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    8de6:	ff 92       	push	r15
    8de8:	0f 93       	push	r16
    8dea:	1f 93       	push	r17
    8dec:	cf 93       	push	r28
    8dee:	df 93       	push	r29
    8df0:	d8 2f       	mov	r29, r24
    8df2:	f6 2e       	mov	r15, r22
    8df4:	8a 01       	movw	r16, r20
	u8 i = 0;
    8df6:	c0 e0       	ldi	r28, 0x00	; 0
    8df8:	8c 2f       	mov	r24, r28
    8dfa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    8dfc:	f8 01       	movw	r30, r16
    8dfe:	ec 0f       	add	r30, r28
    8e00:	f1 1d       	adc	r31, r1
    8e02:	44 91       	lpm	r20, Z
    8e04:	44 23       	and	r20, r20
    8e06:	29 f0       	breq	.+10     	; 0x8e12 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    8e08:	6f 2d       	mov	r22, r15
    8e0a:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		i++;
    8e0e:	cf 5f       	subi	r28, 0xFF	; 255
    8e10:	f3 cf       	rjmp	.-26     	; 0x8df8 <LBPrint+0x12>
	}
}
    8e12:	df 91       	pop	r29
    8e14:	cf 91       	pop	r28
    8e16:	1f 91       	pop	r17
    8e18:	0f 91       	pop	r16
    8e1a:	ff 90       	pop	r15
    8e1c:	08 95       	ret

00008e1e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    8e1e:	df 92       	push	r13
    8e20:	ef 92       	push	r14
    8e22:	ff 92       	push	r15
    8e24:	0f 93       	push	r16
    8e26:	1f 93       	push	r17
    8e28:	cf 93       	push	r28
    8e2a:	df 93       	push	r29
    8e2c:	1f 92       	push	r1
    8e2e:	cd b7       	in	r28, 0x3d	; 61
    8e30:	de b7       	in	r29, 0x3e	; 62
    8e32:	38 2f       	mov	r19, r24
    8e34:	06 2f       	mov	r16, r22
    8e36:	84 2f       	mov	r24, r20
    8e38:	9d ef       	ldi	r25, 0xFD	; 253
    8e3a:	e9 2e       	mov	r14, r25
    8e3c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    8e3e:	4a e0       	ldi	r20, 0x0A	; 10
    8e40:	f4 2e       	mov	r15, r20
    8e42:	1f ef       	ldi	r17, 0xFF	; 255
    8e44:	13 0f       	add	r17, r19
    8e46:	6f 2d       	mov	r22, r15
    8e48:	0e 94 7d 64 	call	0xc8fa	; 0xc8fa <__udivmodqi4>
    8e4c:	d8 2e       	mov	r13, r24
    8e4e:	40 e3       	ldi	r20, 0x30	; 48
    8e50:	49 0f       	add	r20, r25
    8e52:	60 2f       	mov	r22, r16
    8e54:	83 2f       	mov	r24, r19
    8e56:	29 83       	std	Y+1, r18	; 0x01
    8e58:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		value /= 10;
    8e5c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    8e5e:	29 81       	ldd	r18, Y+1	; 0x01
    8e60:	21 11       	cpse	r18, r1
    8e62:	02 c0       	rjmp	.+4      	; 0x8e68 <LBPrintByte+0x4a>
    8e64:	dd 20       	and	r13, r13
    8e66:	19 f0       	breq	.+6      	; 0x8e6e <LBPrintByte+0x50>
    8e68:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    8e6a:	1e 11       	cpse	r17, r14
    8e6c:	ea cf       	rjmp	.-44     	; 0x8e42 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    8e6e:	0f 90       	pop	r0
    8e70:	df 91       	pop	r29
    8e72:	cf 91       	pop	r28
    8e74:	1f 91       	pop	r17
    8e76:	0f 91       	pop	r16
    8e78:	ff 90       	pop	r15
    8e7a:	ef 90       	pop	r14
    8e7c:	df 90       	pop	r13
    8e7e:	08 95       	ret

00008e80 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    8e80:	cf 92       	push	r12
    8e82:	df 92       	push	r13
    8e84:	ef 92       	push	r14
    8e86:	ff 92       	push	r15
    8e88:	0f 93       	push	r16
    8e8a:	1f 93       	push	r17
    8e8c:	cf 93       	push	r28
    8e8e:	df 93       	push	r29
    8e90:	00 d0       	rcall	.+0      	; 0x8e92 <LBPrintInt+0x12>
    8e92:	cd b7       	in	r28, 0x3d	; 61
    8e94:	de b7       	in	r29, 0x3e	; 62
    8e96:	38 2f       	mov	r19, r24
    8e98:	16 2f       	mov	r17, r22
    8e9a:	ca 01       	movw	r24, r20
    8e9c:	4b ef       	ldi	r20, 0xFB	; 251
    8e9e:	d4 2e       	mov	r13, r20
    8ea0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    8ea2:	5a e0       	ldi	r21, 0x0A	; 10
    8ea4:	e5 2e       	mov	r14, r21
    8ea6:	f1 2c       	mov	r15, r1
    8ea8:	cc 24       	eor	r12, r12
    8eaa:	ca 94       	dec	r12
    8eac:	c3 0e       	add	r12, r19
    8eae:	b7 01       	movw	r22, r14
    8eb0:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
    8eb4:	06 2f       	mov	r16, r22
    8eb6:	40 e3       	ldi	r20, 0x30	; 48
    8eb8:	48 0f       	add	r20, r24
    8eba:	61 2f       	mov	r22, r17
    8ebc:	83 2f       	mov	r24, r19
    8ebe:	29 83       	std	Y+1, r18	; 0x01
    8ec0:	7a 83       	std	Y+2, r23	; 0x02
    8ec2:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		value /= 10;
    8ec6:	80 2f       	mov	r24, r16
    8ec8:	7a 81       	ldd	r23, Y+2	; 0x02
    8eca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    8ecc:	29 81       	ldd	r18, Y+1	; 0x01
    8ece:	21 11       	cpse	r18, r1
    8ed0:	02 c0       	rjmp	.+4      	; 0x8ed6 <LBPrintInt+0x56>
    8ed2:	00 97       	sbiw	r24, 0x00	; 0
    8ed4:	19 f0       	breq	.+6      	; 0x8edc <LBPrintInt+0x5c>
    8ed6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    8ed8:	cd 10       	cpse	r12, r13
    8eda:	e6 cf       	rjmp	.-52     	; 0x8ea8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    8edc:	0f 90       	pop	r0
    8ede:	0f 90       	pop	r0
    8ee0:	df 91       	pop	r29
    8ee2:	cf 91       	pop	r28
    8ee4:	1f 91       	pop	r17
    8ee6:	0f 91       	pop	r16
    8ee8:	ff 90       	pop	r15
    8eea:	ef 90       	pop	r14
    8eec:	df 90       	pop	r13
    8eee:	cf 90       	pop	r12
    8ef0:	08 95       	ret

00008ef2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    8ef2:	af 92       	push	r10
    8ef4:	cf 92       	push	r12
    8ef6:	ef 92       	push	r14
    8ef8:	ff 92       	push	r15
    8efa:	0f 93       	push	r16
    8efc:	1f 93       	push	r17
    8efe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    8f00:	cb 01       	movw	r24, r22
    8f02:	82 0f       	add	r24, r18
    8f04:	91 1d       	adc	r25, r1
    8f06:	e8 16       	cp	r14, r24
    8f08:	f9 06       	cpc	r15, r25
    8f0a:	88 f4       	brcc	.+34     	; 0x8f2e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    8f0c:	ea 0c       	add	r14, r10
    8f0e:	f1 1c       	adc	r15, r1
    8f10:	6e 15       	cp	r22, r14
    8f12:	7f 05       	cpc	r23, r15
    8f14:	60 f4       	brcc	.+24     	; 0x8f2e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    8f16:	cf 01       	movw	r24, r30
    8f18:	84 0f       	add	r24, r20
    8f1a:	91 1d       	adc	r25, r1
    8f1c:	08 17       	cp	r16, r24
    8f1e:	19 07       	cpc	r17, r25
    8f20:	30 f4       	brcc	.+12     	; 0x8f2e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    8f22:	0c 0d       	add	r16, r12
    8f24:	11 1d       	adc	r17, r1
    8f26:	81 e0       	ldi	r24, 0x01	; 1
    8f28:	e0 17       	cp	r30, r16
    8f2a:	f1 07       	cpc	r31, r17
    8f2c:	08 f0       	brcs	.+2      	; 0x8f30 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    8f2e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    8f30:	1f 91       	pop	r17
    8f32:	0f 91       	pop	r16
    8f34:	ff 90       	pop	r15
    8f36:	ef 90       	pop	r14
    8f38:	cf 90       	pop	r12
    8f3a:	af 90       	pop	r10
    8f3c:	08 95       	ret

00008f3e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8f3e:	cf 93       	push	r28
    8f40:	df 93       	push	r29
    8f42:	d8 2f       	mov	r29, r24
    8f44:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    8f46:	80 e0       	ldi	r24, 0x00	; 0
    8f48:	90 e0       	ldi	r25, 0x00	; 0
    8f4a:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <GetPrngNumber>
    8f4e:	6f ef       	ldi	r22, 0xFF	; 255
    8f50:	70 e0       	ldi	r23, 0x00	; 0
    8f52:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    8f56:	6c 2f       	mov	r22, r28
    8f58:	70 e0       	ldi	r23, 0x00	; 0
    8f5a:	6d 1b       	sub	r22, r29
    8f5c:	71 09       	sbc	r23, r1
    8f5e:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
}
    8f62:	8d 0f       	add	r24, r29
    8f64:	df 91       	pop	r29
    8f66:	cf 91       	pop	r28
    8f68:	08 95       	ret

00008f6a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    8f6a:	cf 93       	push	r28
    8f6c:	df 93       	push	r29
    8f6e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8f70:	c0 e0       	ldi	r28, 0x00	; 0
    8f72:	cd 17       	cp	r28, r29
    8f74:	31 f0       	breq	.+12     	; 0x8f82 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8f76:	8f ef       	ldi	r24, 0xFF	; 255
    8f78:	9f ef       	ldi	r25, 0xFF	; 255
    8f7a:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8f7e:	cf 5f       	subi	r28, 0xFF	; 255
    8f80:	f8 cf       	rjmp	.-16     	; 0x8f72 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8f82:	df 91       	pop	r29
    8f84:	cf 91       	pop	r28
    8f86:	08 95       	ret

00008f88 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    8f88:	df 92       	push	r13
    8f8a:	ef 92       	push	r14
    8f8c:	ff 92       	push	r15
    8f8e:	0f 93       	push	r16
    8f90:	1f 93       	push	r17
    8f92:	cf 93       	push	r28
    8f94:	df 93       	push	r29
    8f96:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8f98:	fb 01       	movw	r30, r22
    8f9a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8f9c:	31 96       	adiw	r30, 0x01	; 1
    8f9e:	64 91       	lpm	r22, Z
    8fa0:	5f ef       	ldi	r21, 0xFF	; 255
    8fa2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    8fa4:	24 2f       	mov	r18, r20
    8fa6:	21 70       	andi	r18, 0x01	; 1
    8fa8:	40 ff       	sbrs	r20, 0
    8faa:	04 c0       	rjmp	.+8      	; 0x8fb4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    8fac:	95 2f       	mov	r25, r21
		dx=-1;
    8fae:	ff 24       	eor	r15, r15
    8fb0:	fa 94       	dec	r15
    8fb2:	03 c0       	rjmp	.+6      	; 0x8fba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    8fb4:	ff 24       	eor	r15, r15
    8fb6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    8fb8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    8fba:	41 ff       	sbrs	r20, 1
    8fbc:	05 c0       	rjmp	.+10     	; 0x8fc8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    8fbe:	7f ef       	ldi	r23, 0xFF	; 255
    8fc0:	76 0f       	add	r23, r22
		dy=-1;
    8fc2:	ee 24       	eor	r14, r14
    8fc4:	ea 94       	dec	r14
    8fc6:	03 c0       	rjmp	.+6      	; 0x8fce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    8fc8:	ee 24       	eor	r14, r14
    8fca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    8fcc:	70 e0       	ldi	r23, 0x00	; 0
    8fce:	21 11       	cpse	r18, r1
    8fd0:	01 c0       	rjmp	.+2      	; 0x8fd4 <LBMapSprite+0x4c>
    8fd2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8fd4:	00 e0       	ldi	r16, 0x00	; 0
    8fd6:	06 17       	cp	r16, r22
    8fd8:	09 f1       	breq	.+66     	; 0x901c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8fda:	71 03       	mulsu	r23, r17
    8fdc:	e0 01       	movw	r28, r0
    8fde:	11 24       	eor	r1, r1
    8fe0:	d8 2e       	mov	r13, r24
    8fe2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    8fe4:	8d 15       	cp	r24, r13
    8fe6:	b1 f0       	breq	.+44     	; 0x9014 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8fe8:	9e 01       	movw	r18, r28
    8fea:	29 0f       	add	r18, r25
    8fec:	31 1d       	adc	r19, r1
    8fee:	97 fd       	sbrc	r25, 7
    8ff0:	3a 95       	dec	r19
    8ff2:	2e 5f       	subi	r18, 0xFE	; 254
    8ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ff6:	fd 01       	movw	r30, r26
    8ff8:	e2 0f       	add	r30, r18
    8ffa:	f3 1f       	adc	r31, r19
    8ffc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    8ffe:	34 e0       	ldi	r19, 0x04	; 4
    9000:	83 9f       	mul	r24, r19
    9002:	f0 01       	movw	r30, r0
    9004:	11 24       	eor	r1, r1
    9006:	e1 55       	subi	r30, 0x51	; 81
    9008:	f0 4f       	sbci	r31, 0xF0	; 240
    900a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    900c:	8f 5f       	subi	r24, 0xFF	; 255
    900e:	43 83       	std	Z+3, r20	; 0x03
    9010:	9f 0d       	add	r25, r15
    9012:	e8 cf       	rjmp	.-48     	; 0x8fe4 <LBMapSprite+0x5c>
    9014:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9016:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9018:	95 2f       	mov	r25, r21
    901a:	dd cf       	rjmp	.-70     	; 0x8fd6 <LBMapSprite+0x4e>
	}
}
    901c:	df 91       	pop	r29
    901e:	cf 91       	pop	r28
    9020:	1f 91       	pop	r17
    9022:	0f 91       	pop	r16
    9024:	ff 90       	pop	r15
    9026:	ef 90       	pop	r14
    9028:	df 90       	pop	r13
    902a:	08 95       	ret

0000902c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    902c:	df 92       	push	r13
    902e:	ef 92       	push	r14
    9030:	ff 92       	push	r15
    9032:	0f 93       	push	r16
    9034:	1f 93       	push	r17
    9036:	cf 93       	push	r28
    9038:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    903a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    903e:	98 e0       	ldi	r25, 0x08	; 8
    9040:	a9 9f       	mul	r26, r25
    9042:	70 01       	movw	r14, r0
    9044:	11 24       	eor	r1, r1
    9046:	50 e0       	ldi	r21, 0x00	; 0
    9048:	38 ef       	ldi	r19, 0xF8	; 248
    904a:	a3 9f       	mul	r26, r19
    904c:	30 2d       	mov	r19, r0
    904e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9050:	70 e0       	ldi	r23, 0x00	; 0
    9052:	70 17       	cp	r23, r16
    9054:	09 f1       	breq	.+66     	; 0x9098 <LBMoveSprite+0x6c>
    9056:	d4 2e       	mov	r13, r20
    9058:	13 2f       	mov	r17, r19
    905a:	14 0f       	add	r17, r20
    905c:	b8 2f       	mov	r27, r24
    905e:	b2 0f       	add	r27, r18
    9060:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9062:	8b 17       	cp	r24, r27
    9064:	a9 f0       	breq	.+42     	; 0x9090 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9066:	c4 e0       	ldi	r28, 0x04	; 4
    9068:	8c 9f       	mul	r24, r28
    906a:	f0 01       	movw	r30, r0
    906c:	11 24       	eor	r1, r1
    906e:	ef 01       	movw	r28, r30
    9070:	c1 55       	subi	r28, 0x51	; 81
    9072:	d0 4f       	sbci	r29, 0xF0	; 240
    9074:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9076:	a0 32       	cpi	r26, 0x20	; 32
    9078:	28 f4       	brcc	.+10     	; 0x9084 <LBMoveSprite+0x58>
    907a:	e4 16       	cp	r14, r20
    907c:	f5 06       	cpc	r15, r21
    907e:	14 f4       	brge	.+4      	; 0x9084 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9080:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9082:	03 c0       	rjmp	.+6      	; 0x908a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9084:	e1 55       	subi	r30, 0x51	; 81
    9086:	f0 4f       	sbci	r31, 0xF0	; 240
    9088:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    908a:	8f 5f       	subi	r24, 0xFF	; 255
    908c:	98 5f       	subi	r25, 0xF8	; 248
    908e:	e9 cf       	rjmp	.-46     	; 0x9062 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9090:	7f 5f       	subi	r23, 0xFF	; 255
    9092:	48 5f       	subi	r20, 0xF8	; 248
    9094:	5f 4f       	sbci	r21, 0xFF	; 255
    9096:	dd cf       	rjmp	.-70     	; 0x9052 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9098:	df 91       	pop	r29
    909a:	cf 91       	pop	r28
    909c:	1f 91       	pop	r17
    909e:	0f 91       	pop	r16
    90a0:	ff 90       	pop	r15
    90a2:	ef 90       	pop	r14
    90a4:	df 90       	pop	r13
    90a6:	08 95       	ret

000090a8 <LBRotateSprites>:

void LBRotateSprites()
{
    90a8:	80 e0       	ldi	r24, 0x00	; 0
    90aa:	90 e0       	ldi	r25, 0x00	; 0
    90ac:	dc 01       	movw	r26, r24
    90ae:	a1 55       	subi	r26, 0x51	; 81
    90b0:	b0 4f       	sbci	r27, 0xF0	; 240
    90b2:	fc 01       	movw	r30, r24
    90b4:	e0 5f       	subi	r30, 0xF0	; 240
    90b6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    90b8:	13 96       	adiw	r26, 0x03	; 3
    90ba:	2c 91       	ld	r18, X
    90bc:	13 97       	sbiw	r26, 0x03	; 3
    90be:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    90c0:	12 96       	adiw	r26, 0x02	; 2
    90c2:	2c 91       	ld	r18, X
    90c4:	12 97       	sbiw	r26, 0x02	; 2
    90c6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    90c8:	2c 91       	ld	r18, X
    90ca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    90cc:	11 96       	adiw	r26, 0x01	; 1
    90ce:	2c 91       	ld	r18, X
    90d0:	21 83       	std	Z+1, r18	; 0x01
    90d2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    90d4:	88 33       	cpi	r24, 0x38	; 56
    90d6:	91 05       	cpc	r25, r1
    90d8:	49 f7       	brne	.-46     	; 0x90ac <LBRotateSprites+0x4>
    90da:	80 91 01 05 	lds	r24, 0x0501
    90de:	20 e0       	ldi	r18, 0x00	; 0
    90e0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    90e2:	94 e0       	ldi	r25, 0x04	; 4
    90e4:	89 9f       	mul	r24, r25
    90e6:	d0 01       	movw	r26, r0
    90e8:	11 24       	eor	r1, r1
    90ea:	a1 55       	subi	r26, 0x51	; 81
    90ec:	b0 4f       	sbci	r27, 0xF0	; 240
    90ee:	13 96       	adiw	r26, 0x03	; 3
    90f0:	9c 91       	ld	r25, X
    90f2:	13 97       	sbiw	r26, 0x03	; 3
    90f4:	f9 01       	movw	r30, r18
    90f6:	e0 5f       	subi	r30, 0xF0	; 240
    90f8:	fa 4f       	sbci	r31, 0xFA	; 250
    90fa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    90fc:	12 96       	adiw	r26, 0x02	; 2
    90fe:	9c 91       	ld	r25, X
    9100:	12 97       	sbiw	r26, 0x02	; 2
    9102:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    9104:	9c 91       	ld	r25, X
    9106:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    9108:	11 96       	adiw	r26, 0x01	; 1
    910a:	9c 91       	ld	r25, X
    910c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    910e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9110:	84 31       	cpi	r24, 0x14	; 20
    9112:	08 f0       	brcs	.+2      	; 0x9116 <LBRotateSprites+0x6e>
    9114:	8e e0       	ldi	r24, 0x0E	; 14
    9116:	2c 5f       	subi	r18, 0xFC	; 252
    9118:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    911a:	28 30       	cpi	r18, 0x08	; 8
    911c:	31 05       	cpc	r19, r1
    911e:	09 f7       	brne	.-62     	; 0x90e2 <LBRotateSprites+0x3a>
    9120:	80 93 01 05 	sts	0x0501, r24
    9124:	08 95       	ret

00009126 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9126:	80 91 b9 0d 	lds	r24, 0x0DB9
}
    912a:	81 70       	andi	r24, 0x01	; 1
    912c:	08 95       	ret

0000912e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    912e:	8c e8       	ldi	r24, 0x8C	; 140
    9130:	90 e0       	ldi	r25, 0x00	; 0
    9132:	90 93 87 0d 	sts	0x0D87, r25
    9136:	80 93 86 0d 	sts	0x0D86, r24
    913a:	80 e0       	ldi	r24, 0x00	; 0
    913c:	90 e0       	ldi	r25, 0x00	; 0
    913e:	fc 01       	movw	r30, r24
    9140:	ec 5d       	subi	r30, 0xDC	; 220
    9142:	f4 4f       	sbci	r31, 0xF4	; 244
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9144:	e4 91       	lpm	r30, Z
    9146:	dc 01       	movw	r26, r24
    9148:	aa 57       	subi	r26, 0x7A	; 122
    914a:	b2 4f       	sbci	r27, 0xF2	; 242
    914c:	12 96       	adiw	r26, 0x02	; 2
    914e:	ec 93       	st	X, r30
    9150:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9152:	8e 31       	cpi	r24, 0x1E	; 30
    9154:	91 05       	cpc	r25, r1
    9156:	99 f7       	brne	.-26     	; 0x913e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9158:	08 95       	ret

0000915a <init_enemy_state>:

void init_enemy_state()
{
    915a:	80 e0       	ldi	r24, 0x00	; 0
    915c:	90 e0       	ldi	r25, 0x00	; 0
    915e:	9c 01       	movw	r18, r24
    9160:	2a 55       	subi	r18, 0x5A	; 90
    9162:	32 4f       	sbci	r19, 0xF2	; 242
    9164:	f9 01       	movw	r30, r18
    9166:	e3 54       	subi	r30, 0x43	; 67
    9168:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    916a:	10 82       	st	Z, r1
    916c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    916e:	10 82       	st	Z, r1
    9170:	8e 5b       	subi	r24, 0xBE	; 190
    9172:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9174:	8a 34       	cpi	r24, 0x4A	; 74
    9176:	21 e0       	ldi	r18, 0x01	; 1
    9178:	92 07       	cpc	r25, r18
    917a:	89 f7       	brne	.-30     	; 0x915e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    917c:	10 92 c5 0d 	sts	0x0DC5, r1
    9180:	08 95       	ret

00009182 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    9182:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    9186:	88 23       	and	r24, r24
    9188:	f9 f0       	breq	.+62     	; 0x91c8 <init_player_state+0x46>
	{
		game.player.width = 3;
    918a:	83 e0       	ldi	r24, 0x03	; 3
    918c:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 1;
    9190:	81 e0       	ldi	r24, 0x01	; 1
    9192:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 2;
    9196:	82 e0       	ldi	r24, 0x02	; 2
    9198:	80 93 35 0e 	sts	0x0E35, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    919c:	85 e0       	ldi	r24, 0x05	; 5
    919e:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims = run_anim;
    91a2:	8f ef       	ldi	r24, 0xFF	; 255
    91a4:	9f e0       	ldi	r25, 0x0F	; 15
    91a6:	90 93 3b 0e 	sts	0x0E3B, r25
    91aa:	80 93 3a 0e 	sts	0x0E3A, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    91ae:	88 ea       	ldi	r24, 0xA8	; 168
    91b0:	93 e3       	ldi	r25, 0x33	; 51
    91b2:	90 93 00 10 	sts	0x1000, r25
    91b6:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    91ba:	83 ea       	ldi	r24, 0xA3	; 163
    91bc:	93 e3       	ldi	r25, 0x33	; 51
    91be:	90 93 02 10 	sts	0x1002, r25
    91c2:	80 93 01 10 	sts	0x1001, r24
    91c6:	2a c0       	rjmp	.+84     	; 0x921c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    91c8:	82 e0       	ldi	r24, 0x02	; 2
    91ca:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 3;
    91ce:	83 e0       	ldi	r24, 0x03	; 3
    91d0:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 4;
    91d4:	84 e0       	ldi	r24, 0x04	; 4
    91d6:	80 93 35 0e 	sts	0x0E35, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    91da:	8c e0       	ldi	r24, 0x0C	; 12
    91dc:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims = run_anim;
    91e0:	8f ef       	ldi	r24, 0xFF	; 255
    91e2:	9f e0       	ldi	r25, 0x0F	; 15
    91e4:	90 93 3b 0e 	sts	0x0E3B, r25
    91e8:	80 93 3a 0e 	sts	0x0E3A, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    91ec:	82 ed       	ldi	r24, 0xD2	; 210
    91ee:	93 e3       	ldi	r25, 0x33	; 51
    91f0:	90 93 00 10 	sts	0x1000, r25
    91f4:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    91f8:	8a ec       	ldi	r24, 0xCA	; 202
    91fa:	93 e3       	ldi	r25, 0x33	; 51
    91fc:	90 93 02 10 	sts	0x1002, r25
    9200:	80 93 01 10 	sts	0x1001, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    9204:	82 ec       	ldi	r24, 0xC2	; 194
    9206:	93 e3       	ldi	r25, 0x33	; 51
    9208:	90 93 04 10 	sts	0x1004, r25
    920c:	80 93 03 10 	sts	0x1003, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    9210:	8a eb       	ldi	r24, 0xBA	; 186
    9212:	93 e3       	ldi	r25, 0x33	; 51
    9214:	90 93 06 10 	sts	0x1006, r25
    9218:	80 93 05 10 	sts	0x1005, r24
	}
	game.player.direction = D_RIGHT;
    921c:	81 e0       	ldi	r24, 0x01	; 1
    921e:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.flags = IDLE;
    9222:	98 e0       	ldi	r25, 0x08	; 8
    9224:	90 93 d8 0d 	sts	0x0DD8, r25
	game.player.shield = PLAYER_SHIELD;
    9228:	9a e0       	ldi	r25, 0x0A	; 10
    922a:	90 93 dd 0d 	sts	0x0DDD, r25
	game.player.idle.anim_count = 1;
    922e:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.idle.frames_per_anim = 1;
    9232:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.idle.anims = idle_anim;
    9236:	21 e1       	ldi	r18, 0x11	; 17
    9238:	30 e1       	ldi	r19, 0x10	; 16
    923a:	30 93 33 0e 	sts	0x0E33, r19
    923e:	20 93 32 0e 	sts	0x0E32, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    9242:	2a ed       	ldi	r18, 0xDA	; 218
    9244:	33 e3       	ldi	r19, 0x33	; 51
    9246:	30 93 12 10 	sts	0x1012, r19
    924a:	20 93 11 10 	sts	0x1011, r18
	
	game.player.jump.anim_count = 1;
    924e:	80 93 3d 0e 	sts	0x0E3D, r24
	game.player.jump.frames_per_anim = 1;
    9252:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.jump.anims = jump_anim;
    9256:	24 e8       	ldi	r18, 0x84	; 132
    9258:	3d e0       	ldi	r19, 0x0D	; 13
    925a:	30 93 43 0e 	sts	0x0E43, r19
    925e:	20 93 42 0e 	sts	0x0E42, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    9262:	22 eb       	ldi	r18, 0xB2	; 178
    9264:	33 e3       	ldi	r19, 0x33	; 51
    9266:	30 93 85 0d 	sts	0x0D85, r19
    926a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    926e:	80 93 45 0e 	sts	0x0E45, r24
	game.player.prone.frames_per_anim = 1;
    9272:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims = prone_anim;
    9276:	87 ea       	ldi	r24, 0xA7	; 167
    9278:	9f e0       	ldi	r25, 0x0F	; 15
    927a:	90 93 4b 0e 	sts	0x0E4B, r25
    927e:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    9282:	8d ea       	ldi	r24, 0xAD	; 173
    9284:	93 e3       	ldi	r25, 0x33	; 51
    9286:	90 93 a8 0f 	sts	0x0FA8, r25
    928a:	80 93 a7 0f 	sts	0x0FA7, r24
	
	game.player.expl.anim_count = 3;
    928e:	83 e0       	ldi	r24, 0x03	; 3
    9290:	80 93 4d 0e 	sts	0x0E4D, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9294:	85 e0       	ldi	r24, 0x05	; 5
    9296:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims = expl_anim;
    929a:	8b e0       	ldi	r24, 0x0B	; 11
    929c:	90 e1       	ldi	r25, 0x10	; 16
    929e:	90 93 53 0e 	sts	0x0E53, r25
    92a2:	80 93 52 0e 	sts	0x0E52, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    92a6:	87 ef       	ldi	r24, 0xF7	; 247
    92a8:	93 e3       	ldi	r25, 0x33	; 51
    92aa:	90 93 0c 10 	sts	0x100C, r25
    92ae:	80 93 0b 10 	sts	0x100B, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    92b2:	84 ef       	ldi	r24, 0xF4	; 244
    92b4:	93 e3       	ldi	r25, 0x33	; 51
    92b6:	90 93 0e 10 	sts	0x100E, r25
    92ba:	80 93 0d 10 	sts	0x100D, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    92be:	81 ef       	ldi	r24, 0xF1	; 241
    92c0:	93 e3       	ldi	r25, 0x33	; 51
    92c2:	90 93 10 10 	sts	0x1010, r25
    92c6:	80 93 0f 10 	sts	0x100F, r24
    92ca:	e2 ef       	ldi	r30, 0xF2	; 242
    92cc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    92ce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    92d0:	29 e0       	ldi	r18, 0x09	; 9
    92d2:	30 e1       	ldi	r19, 0x10	; 16
    92d4:	df 01       	movw	r26, r30
    92d6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    92d8:	8c 93       	st	X, r24
    92da:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    92dc:	1c 92       	st	X, r1
    92de:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    92e0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    92e2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    92e4:	35 83       	std	Z+5, r19	; 0x05
    92e6:	24 83       	std	Z+4, r18	; 0x04
    92e8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    92ea:	9e e0       	ldi	r25, 0x0E	; 14
    92ec:	e0 34       	cpi	r30, 0x40	; 64
    92ee:	f9 07       	cpc	r31, r25
    92f0:	89 f7       	brne	.-30     	; 0x92d4 <init_player_state+0x152>
    92f2:	8c e8       	ldi	r24, 0x8C	; 140
    92f4:	93 e3       	ldi	r25, 0x33	; 51
    92f6:	90 93 0a 10 	sts	0x100A, r25
    92fa:	80 93 09 10 	sts	0x1009, r24
    92fe:	08 95       	ret

00009300 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    9300:	ef 92       	push	r14
    9302:	ff 92       	push	r15
    9304:	0f 93       	push	r16
    9306:	1f 93       	push	r17
    9308:	cf 93       	push	r28
    930a:	df 93       	push	r29
    930c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    930e:	22 e4       	ldi	r18, 0x42	; 66
    9310:	82 9f       	mul	r24, r18
    9312:	c0 01       	movw	r24, r0
    9314:	11 24       	eor	r1, r1
    9316:	ec 01       	movw	r28, r24
    9318:	ca 55       	subi	r28, 0x5A	; 90
    931a:	d2 4f       	sbci	r29, 0xF2	; 242
    931c:	fe 01       	movw	r30, r28
    931e:	e7 51       	subi	r30, 0x17	; 23
    9320:	ff 4f       	sbci	r31, 0xFF	; 255
    9322:	83 e0       	ldi	r24, 0x03	; 3
    9324:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9326:	31 96       	adiw	r30, 0x01	; 1
    9328:	85 e0       	ldi	r24, 0x05	; 5
    932a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    932c:	de 01       	movw	r26, r28
    932e:	a2 51       	subi	r26, 0x12	; 18
    9330:	bf 4f       	sbci	r27, 0xFF	; 255
    9332:	eb e0       	ldi	r30, 0x0B	; 11
    9334:	f0 e1       	ldi	r31, 0x10	; 16
    9336:	11 96       	adiw	r26, 0x01	; 1
    9338:	fc 93       	st	X, r31
    933a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    933c:	87 ef       	ldi	r24, 0xF7	; 247
    933e:	93 e3       	ldi	r25, 0x33	; 51
    9340:	91 83       	std	Z+1, r25	; 0x01
    9342:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    9344:	84 ef       	ldi	r24, 0xF4	; 244
    9346:	93 e3       	ldi	r25, 0x33	; 51
    9348:	93 83       	std	Z+3, r25	; 0x03
    934a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    934c:	81 ef       	ldi	r24, 0xF1	; 241
    934e:	93 e3       	ldi	r25, 0x33	; 51
    9350:	95 83       	std	Z+5, r25	; 0x05
    9352:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    9354:	fe 01       	movw	r30, r28
    9356:	ea 52       	subi	r30, 0x2A	; 42
    9358:	ff 4f       	sbci	r31, 0xFF	; 255
    935a:	81 e0       	ldi	r24, 0x01	; 1
    935c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    935e:	31 96       	adiw	r30, 0x01	; 1
    9360:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9362:	32 97       	sbiw	r30, 0x02	; 2
    9364:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    9366:	34 96       	adiw	r30, 0x04	; 4
    9368:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    936a:	31 96       	adiw	r30, 0x01	; 1
    936c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    936e:	50 97       	sbiw	r26, 0x10	; 16
    9370:	e7 e0       	ldi	r30, 0x07	; 7
    9372:	f0 e1       	ldi	r31, 0x10	; 16
    9374:	ed 93       	st	X+, r30
    9376:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9378:	89 e5       	ldi	r24, 0x59	; 89
    937a:	93 e3       	ldi	r25, 0x33	; 51
    937c:	91 83       	std	Z+1, r25	; 0x01
    937e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    9380:	fe 01       	movw	r30, r28
    9382:	ee 52       	subi	r30, 0x2E	; 46
    9384:	ff 4f       	sbci	r31, 0xFF	; 255
    9386:	11 82       	std	Z+1, r1	; 0x01
    9388:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    938a:	3c 97       	sbiw	r30, 0x0c	; 12
    938c:	10 82       	st	Z, r1
    938e:	11 82       	std	Z+1, r1	; 0x01
    9390:	12 82       	std	Z+2, r1	; 0x02
    9392:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9394:	7e 01       	movw	r14, r28
    9396:	8a ec       	ldi	r24, 0xCA	; 202
    9398:	e8 0e       	add	r14, r24
    939a:	f1 1c       	adc	r15, r1
    939c:	80 e0       	ldi	r24, 0x00	; 0
    939e:	90 e0       	ldi	r25, 0x00	; 0
    93a0:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    93a4:	f7 01       	movw	r30, r14
    93a6:	60 83       	st	Z, r22
    93a8:	71 83       	std	Z+1, r23	; 0x01
    93aa:	82 83       	std	Z+2, r24	; 0x02
    93ac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    93ae:	c2 53       	subi	r28, 0x32	; 50
    93b0:	df 4f       	sbci	r29, 0xFF	; 255
    93b2:	b8 01       	movw	r22, r16
    93b4:	80 e0       	ldi	r24, 0x00	; 0
    93b6:	90 e0       	ldi	r25, 0x00	; 0
    93b8:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    93bc:	68 83       	st	Y, r22
    93be:	79 83       	std	Y+1, r23	; 0x01
    93c0:	8a 83       	std	Y+2, r24	; 0x02
    93c2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    93c4:	df 91       	pop	r29
    93c6:	cf 91       	pop	r28
    93c8:	1f 91       	pop	r17
    93ca:	0f 91       	pop	r16
    93cc:	ff 90       	pop	r15
    93ce:	ef 90       	pop	r14
    93d0:	08 95       	ret

000093d2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    93d2:	af 92       	push	r10
    93d4:	bf 92       	push	r11
    93d6:	cf 92       	push	r12
    93d8:	df 92       	push	r13
    93da:	ef 92       	push	r14
    93dc:	ff 92       	push	r15
    93de:	1f 93       	push	r17
    93e0:	cf 93       	push	r28
    93e2:	df 93       	push	r29
    93e4:	18 2f       	mov	r17, r24
    93e6:	7b 01       	movw	r14, r22
    93e8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    93ea:	82 e4       	ldi	r24, 0x42	; 66
    93ec:	18 9f       	mul	r17, r24
    93ee:	e0 01       	movw	r28, r0
    93f0:	11 24       	eor	r1, r1
    93f2:	ca 55       	subi	r28, 0x5A	; 90
    93f4:	d2 4f       	sbci	r29, 0xF2	; 242
    93f6:	fe 01       	movw	r30, r28
    93f8:	e3 54       	subi	r30, 0x43	; 67
    93fa:	ff 4f       	sbci	r31, 0xFF	; 255
    93fc:	91 e0       	ldi	r25, 0x01	; 1
    93fe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    9400:	32 96       	adiw	r30, 0x02	; 2
    9402:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    9404:	31 97       	sbiw	r30, 0x01	; 1
    9406:	88 e0       	ldi	r24, 0x08	; 8
    9408:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    940a:	32 96       	adiw	r30, 0x02	; 2
    940c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    940e:	31 96       	adiw	r30, 0x01	; 1
    9410:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    9412:	31 96       	adiw	r30, 0x01	; 1
    9414:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9416:	31 96       	adiw	r30, 0x01	; 1
    9418:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    941a:	31 96       	adiw	r30, 0x01	; 1
    941c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    941e:	31 96       	adiw	r30, 0x01	; 1
    9420:	82 e0       	ldi	r24, 0x02	; 2
    9422:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    9424:	7c 96       	adiw	r30, 0x1c	; 28
    9426:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9428:	31 96       	adiw	r30, 0x01	; 1
    942a:	8a e0       	ldi	r24, 0x0A	; 10
    942c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    942e:	de 01       	movw	r26, r28
    9430:	aa 51       	subi	r26, 0x1A	; 26
    9432:	bf 4f       	sbci	r27, 0xFF	; 255
    9434:	e9 ea       	ldi	r30, 0xA9	; 169
    9436:	ff e0       	ldi	r31, 0x0F	; 15
    9438:	ed 93       	st	X+, r30
    943a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    943c:	83 e5       	ldi	r24, 0x53	; 83
    943e:	93 e3       	ldi	r25, 0x33	; 51
    9440:	91 83       	std	Z+1, r25	; 0x01
    9442:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    9444:	80 e5       	ldi	r24, 0x50	; 80
    9446:	93 e3       	ldi	r25, 0x33	; 51
    9448:	93 83       	std	Z+3, r25	; 0x03
    944a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    944c:	fe 01       	movw	r30, r28
    944e:	e4 54       	subi	r30, 0x44	; 68
    9450:	ff 4f       	sbci	r31, 0xFF	; 255
    9452:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    9454:	32 97       	sbiw	r30, 0x02	; 2
    9456:	11 82       	std	Z+1, r1	; 0x01
    9458:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    945a:	3c 97       	sbiw	r30, 0x0c	; 12
    945c:	10 82       	st	Z, r1
    945e:	11 82       	std	Z+1, r1	; 0x01
    9460:	12 82       	std	Z+2, r1	; 0x02
    9462:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9464:	5e 01       	movw	r10, r28
    9466:	e2 eb       	ldi	r30, 0xB2	; 178
    9468:	ae 0e       	add	r10, r30
    946a:	b1 1c       	adc	r11, r1
    946c:	80 e0       	ldi	r24, 0x00	; 0
    946e:	90 e0       	ldi	r25, 0x00	; 0
    9470:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    9474:	f5 01       	movw	r30, r10
    9476:	60 83       	st	Z, r22
    9478:	71 83       	std	Z+1, r23	; 0x01
    947a:	82 83       	std	Z+2, r24	; 0x02
    947c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    947e:	ca 54       	subi	r28, 0x4A	; 74
    9480:	df 4f       	sbci	r29, 0xFF	; 255
    9482:	b6 01       	movw	r22, r12
    9484:	80 e0       	ldi	r24, 0x00	; 0
    9486:	90 e0       	ldi	r25, 0x00	; 0
    9488:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    948c:	68 83       	st	Y, r22
    948e:	79 83       	std	Y+1, r23	; 0x01
    9490:	8a 83       	std	Y+2, r24	; 0x02
    9492:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9494:	a6 01       	movw	r20, r12
    9496:	b7 01       	movw	r22, r14
    9498:	81 2f       	mov	r24, r17
}
    949a:	df 91       	pop	r29
    949c:	cf 91       	pop	r28
    949e:	1f 91       	pop	r17
    94a0:	ff 90       	pop	r15
    94a2:	ef 90       	pop	r14
    94a4:	df 90       	pop	r13
    94a6:	cf 90       	pop	r12
    94a8:	bf 90       	pop	r11
    94aa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    94ac:	0c 94 80 49 	jmp	0x9300	; 0x9300 <init_enemy_shot>

000094b0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    94b0:	af 92       	push	r10
    94b2:	bf 92       	push	r11
    94b4:	cf 92       	push	r12
    94b6:	df 92       	push	r13
    94b8:	ef 92       	push	r14
    94ba:	ff 92       	push	r15
    94bc:	1f 93       	push	r17
    94be:	cf 93       	push	r28
    94c0:	df 93       	push	r29
    94c2:	18 2f       	mov	r17, r24
    94c4:	7b 01       	movw	r14, r22
    94c6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    94c8:	82 e4       	ldi	r24, 0x42	; 66
    94ca:	18 9f       	mul	r17, r24
    94cc:	e0 01       	movw	r28, r0
    94ce:	11 24       	eor	r1, r1
    94d0:	ca 55       	subi	r28, 0x5A	; 90
    94d2:	d2 4f       	sbci	r29, 0xF2	; 242
    94d4:	fe 01       	movw	r30, r28
    94d6:	e3 54       	subi	r30, 0x43	; 67
    94d8:	ff 4f       	sbci	r31, 0xFF	; 255
    94da:	91 e0       	ldi	r25, 0x01	; 1
    94dc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    94de:	33 96       	adiw	r30, 0x03	; 3
    94e0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    94e2:	31 96       	adiw	r30, 0x01	; 1
    94e4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    94e6:	31 96       	adiw	r30, 0x01	; 1
    94e8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    94ea:	31 96       	adiw	r30, 0x01	; 1
    94ec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    94ee:	31 96       	adiw	r30, 0x01	; 1
    94f0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    94f2:	31 96       	adiw	r30, 0x01	; 1
    94f4:	84 e0       	ldi	r24, 0x04	; 4
    94f6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    94f8:	7c 96       	adiw	r30, 0x1c	; 28
    94fa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    94fc:	31 96       	adiw	r30, 0x01	; 1
    94fe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    9500:	de 01       	movw	r26, r28
    9502:	aa 51       	subi	r26, 0x1A	; 26
    9504:	bf 4f       	sbci	r27, 0xFF	; 255
    9506:	ed ea       	ldi	r30, 0xAD	; 173
    9508:	ff e0       	ldi	r31, 0x0F	; 15
    950a:	ed 93       	st	X+, r30
    950c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    950e:	86 e5       	ldi	r24, 0x56	; 86
    9510:	93 e3       	ldi	r25, 0x33	; 51
    9512:	91 83       	std	Z+1, r25	; 0x01
    9514:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    9516:	fe 01       	movw	r30, r28
    9518:	e4 54       	subi	r30, 0x44	; 68
    951a:	ff 4f       	sbci	r31, 0xFF	; 255
    951c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    951e:	32 97       	sbiw	r30, 0x02	; 2
    9520:	84 e1       	ldi	r24, 0x14	; 20
    9522:	90 e0       	ldi	r25, 0x00	; 0
    9524:	91 83       	std	Z+1, r25	; 0x01
    9526:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    9528:	3c 97       	sbiw	r30, 0x0c	; 12
    952a:	10 82       	st	Z, r1
    952c:	11 82       	std	Z+1, r1	; 0x01
    952e:	12 82       	std	Z+2, r1	; 0x02
    9530:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9532:	5e 01       	movw	r10, r28
    9534:	e2 eb       	ldi	r30, 0xB2	; 178
    9536:	ae 0e       	add	r10, r30
    9538:	b1 1c       	adc	r11, r1
    953a:	80 e0       	ldi	r24, 0x00	; 0
    953c:	90 e0       	ldi	r25, 0x00	; 0
    953e:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    9542:	f5 01       	movw	r30, r10
    9544:	60 83       	st	Z, r22
    9546:	71 83       	std	Z+1, r23	; 0x01
    9548:	82 83       	std	Z+2, r24	; 0x02
    954a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    954c:	ca 54       	subi	r28, 0x4A	; 74
    954e:	df 4f       	sbci	r29, 0xFF	; 255
    9550:	b6 01       	movw	r22, r12
    9552:	80 e0       	ldi	r24, 0x00	; 0
    9554:	90 e0       	ldi	r25, 0x00	; 0
    9556:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    955a:	68 83       	st	Y, r22
    955c:	79 83       	std	Y+1, r23	; 0x01
    955e:	8a 83       	std	Y+2, r24	; 0x02
    9560:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9562:	a6 01       	movw	r20, r12
    9564:	b7 01       	movw	r22, r14
    9566:	81 2f       	mov	r24, r17
}
    9568:	df 91       	pop	r29
    956a:	cf 91       	pop	r28
    956c:	1f 91       	pop	r17
    956e:	ff 90       	pop	r15
    9570:	ef 90       	pop	r14
    9572:	df 90       	pop	r13
    9574:	cf 90       	pop	r12
    9576:	bf 90       	pop	r11
    9578:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    957a:	0c 94 80 49 	jmp	0x9300	; 0x9300 <init_enemy_shot>

0000957e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    957e:	cf 93       	push	r28
    9580:	df 93       	push	r29
    9582:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9584:	bc 01       	movw	r22, r24
    9586:	88 81       	ld	r24, Y
    9588:	99 81       	ldd	r25, Y+1	; 0x01
    958a:	0e 94 a9 38 	call	0x7152	; 0x7152 <EepromReadBlock>
	if (status == 0x03)
    958e:	83 30       	cpi	r24, 0x03	; 3
    9590:	29 f4       	brne	.+10     	; 0x959c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9592:	ce 01       	movw	r24, r28
	}
}
    9594:	df 91       	pop	r29
    9596:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9598:	0c 94 5f 38 	jmp	0x70be	; 0x70be <EepromWriteBlock>
	}
}
    959c:	df 91       	pop	r29
    959e:	cf 91       	pop	r28
    95a0:	08 95       	ret

000095a2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    95a2:	1f 93       	push	r17
    95a4:	cf 93       	push	r28
    95a6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    95a8:	d0 e0       	ldi	r29, 0x00	; 0
    95aa:	10 e2       	ldi	r17, 0x20	; 32
    95ac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    95ae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    95b0:	c1 17       	cp	r28, r17
    95b2:	41 f0       	breq	.+16     	; 0x95c4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    95b4:	40 e0       	ldi	r20, 0x00	; 0
    95b6:	50 e0       	ldi	r21, 0x00	; 0
    95b8:	6c 2f       	mov	r22, r28
    95ba:	8d 2f       	mov	r24, r29
    95bc:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <SetTile>
    95c0:	cf 5f       	subi	r28, 0xFF	; 255
    95c2:	f6 cf       	rjmp	.-20     	; 0x95b0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    95c4:	df 5f       	subi	r29, 0xFF	; 255
    95c6:	dc 31       	cpi	r29, 0x1C	; 28
    95c8:	91 f7       	brne	.-28     	; 0x95ae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    95ca:	df 91       	pop	r29
    95cc:	cf 91       	pop	r28
    95ce:	1f 91       	pop	r17
    95d0:	08 95       	ret

000095d2 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    95d2:	df 92       	push	r13
    95d4:	ef 92       	push	r14
    95d6:	ff 92       	push	r15
    95d8:	0f 93       	push	r16
    95da:	1f 93       	push	r17
    95dc:	cf 93       	push	r28
    95de:	df 93       	push	r29
    95e0:	8c 01       	movw	r16, r24
    95e2:	7b 01       	movw	r14, r22
    95e4:	ea 01       	movw	r28, r20
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;

	if (is_space())
    95e6:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    95ea:	d0 90 ba 0d 	lds	r13, 0x0DBA
    95ee:	88 23       	and	r24, r24
    95f0:	29 f1       	breq	.+74     	; 0x963c <get_level_tile+0x6a>
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
    95f2:	ce 01       	movw	r24, r28
    95f4:	65 e0       	ldi	r22, 0x05	; 5
    95f6:	70 e0       	ldi	r23, 0x00	; 0
    95f8:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
	u8 map_x = 0;
	u8 map_y = 0;

	if (is_space())
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
    95fc:	f7 01       	movw	r30, r14
    95fe:	f6 95       	lsr	r31
    9600:	e7 95       	ror	r30
    9602:	f6 95       	lsr	r31
    9604:	e7 95       	ror	r30
    9606:	ff 27       	eor	r31, r31
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH);
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    9608:	6d 9d       	mul	r22, r13
    960a:	e0 0d       	add	r30, r0
    960c:	f1 1d       	adc	r31, r1
    960e:	11 24       	eor	r1, r1
    9610:	32 96       	adiw	r30, 0x02	; 2
    9612:	e0 0f       	add	r30, r16
    9614:	f1 1f       	adc	r31, r17
    9616:	64 91       	lpm	r22, Z

	if (is_space())
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH);
    9618:	f7 01       	movw	r30, r14
    961a:	e3 70       	andi	r30, 0x03	; 3
    961c:	ff 27       	eor	r31, r31
    961e:	9c 01       	movw	r18, r24
    9620:	22 0f       	add	r18, r18
    9622:	33 1f       	adc	r19, r19
    9624:	22 0f       	add	r18, r18
    9626:	33 1f       	adc	r19, r19
    9628:	e2 0f       	add	r30, r18
    962a:	f3 1f       	adc	r31, r19
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+mega_tile_offset]);
    962c:	84 e1       	ldi	r24, 0x14	; 20
    962e:	68 9f       	mul	r22, r24
    9630:	e0 0d       	add	r30, r0
    9632:	f1 1d       	adc	r31, r1
    9634:	11 24       	eor	r1, r1
    9636:	ed 5b       	subi	r30, 0xBD	; 189
    9638:	fa 4a       	sbci	r31, 0xAA	; 170
    963a:	27 c0       	rjmp	.+78     	; 0x968a <get_level_tile+0xb8>
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    963c:	25 e0       	ldi	r18, 0x05	; 5
    963e:	30 e0       	ldi	r19, 0x00	; 0
    9640:	ce 01       	movw	r24, r28
    9642:	b9 01       	movw	r22, r18
    9644:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
    9648:	46 2f       	mov	r20, r22
    964a:	ec 01       	movw	r28, r24
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+mega_tile_offset]);
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    964c:	c7 01       	movw	r24, r14
    964e:	b9 01       	movw	r22, r18
    9650:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
    9654:	77 27       	eor	r23, r23
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    9656:	4d 9d       	mul	r20, r13
    9658:	60 0d       	add	r22, r0
    965a:	71 1d       	adc	r23, r1
    965c:	11 24       	eor	r1, r1
    965e:	6e 5f       	subi	r22, 0xFE	; 254
    9660:	7f 4f       	sbci	r23, 0xFF	; 255
    9662:	f8 01       	movw	r30, r16
    9664:	e6 0f       	add	r30, r22
    9666:	f7 1f       	adc	r31, r23
    9668:	64 91       	lpm	r22, Z
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    966a:	45 e0       	ldi	r20, 0x05	; 5
    966c:	4c 9f       	mul	r20, r28
    966e:	90 01       	movw	r18, r0
    9670:	4d 9f       	mul	r20, r29
    9672:	30 0d       	add	r19, r0
    9674:	11 24       	eor	r1, r1
    9676:	fc 01       	movw	r30, r24
    9678:	e2 0f       	add	r30, r18
    967a:	f3 1f       	adc	r31, r19
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
		mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    967c:	89 e1       	ldi	r24, 0x19	; 25
    967e:	68 9f       	mul	r22, r24
    9680:	e0 0d       	add	r30, r0
    9682:	f1 1d       	adc	r31, r1
    9684:	11 24       	eor	r1, r1
    9686:	e3 51       	subi	r30, 0x13	; 19
    9688:	f8 4a       	sbci	r31, 0xA8	; 168
    968a:	84 91       	lpm	r24, Z
	}
}
    968c:	df 91       	pop	r29
    968e:	cf 91       	pop	r28
    9690:	1f 91       	pop	r17
    9692:	0f 91       	pop	r16
    9694:	ff 90       	pop	r15
    9696:	ef 90       	pop	r14
    9698:	df 90       	pop	r13
    969a:	08 95       	ret

0000969c <render_camera_view>:

void render_camera_view()
{
    969c:	6f 92       	push	r6
    969e:	7f 92       	push	r7
    96a0:	8f 92       	push	r8
    96a2:	9f 92       	push	r9
    96a4:	af 92       	push	r10
    96a6:	bf 92       	push	r11
    96a8:	cf 92       	push	r12
    96aa:	df 92       	push	r13
    96ac:	ef 92       	push	r14
    96ae:	ff 92       	push	r15
    96b0:	0f 93       	push	r16
    96b2:	1f 93       	push	r17
    96b4:	cf 93       	push	r28
    96b6:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    96b8:	e0 90 aa 0d 	lds	r14, 0x0DAA
    96bc:	f0 90 ab 0d 	lds	r15, 0x0DAB
    96c0:	83 e0       	ldi	r24, 0x03	; 3
    96c2:	f6 94       	lsr	r15
    96c4:	e7 94       	ror	r14
    96c6:	8a 95       	dec	r24
    96c8:	e1 f7       	brne	.-8      	; 0x96c2 <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    96ca:	00 91 ac 0d 	lds	r16, 0x0DAC
    96ce:	10 91 ad 0d 	lds	r17, 0x0DAD
    96d2:	93 e0       	ldi	r25, 0x03	; 3
    96d4:	16 95       	lsr	r17
    96d6:	07 95       	ror	r16
    96d8:	9a 95       	dec	r25
    96da:	e1 f7       	brne	.-8      	; 0x96d4 <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    96dc:	37 01       	movw	r6, r14
    96de:	67 01       	movw	r12, r14
    96e0:	8c e1       	ldi	r24, 0x1C	; 28
    96e2:	c8 0e       	add	r12, r24
    96e4:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    96e6:	58 01       	movw	r10, r16
    96e8:	89 e1       	ldi	r24, 0x19	; 25
    96ea:	a8 0e       	add	r10, r24
    96ec:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    96ee:	2e e1       	ldi	r18, 0x1E	; 30
    96f0:	82 2e       	mov	r8, r18
    96f2:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    96f4:	c6 14       	cp	r12, r6
    96f6:	d7 04       	cpc	r13, r7
    96f8:	70 f1       	brcs	.+92     	; 0x9756 <render_camera_view+0xba>
    96fa:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    96fc:	ac 16       	cp	r10, r28
    96fe:	bd 06       	cpc	r11, r29
    9700:	30 f1       	brcs	.+76     	; 0x974e <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    9702:	ae 01       	movw	r20, r28
    9704:	b3 01       	movw	r22, r6
    9706:	80 91 a5 0f 	lds	r24, 0x0FA5
    970a:	90 91 a6 0f 	lds	r25, 0x0FA6
    970e:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9712:	28 2f       	mov	r18, r24
    9714:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9716:	80 91 b3 0c 	lds	r24, 0x0CB3
    971a:	86 95       	lsr	r24
    971c:	86 95       	lsr	r24
    971e:	86 95       	lsr	r24
    9720:	90 e0       	ldi	r25, 0x00	; 0
    9722:	80 1b       	sub	r24, r16
    9724:	91 0b       	sbc	r25, r17
    9726:	8c 0f       	add	r24, r28
    9728:	9d 1f       	adc	r25, r29
    972a:	b4 01       	movw	r22, r8
    972c:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
    9730:	90 91 b2 0c 	lds	r25, 0x0CB2
    9734:	96 95       	lsr	r25
    9736:	96 95       	lsr	r25
    9738:	96 95       	lsr	r25
    973a:	9e 19       	sub	r25, r14
    973c:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    973e:	a9 01       	movw	r20, r18
    9740:	68 2f       	mov	r22, r24
    9742:	89 2f       	mov	r24, r25
    9744:	8f 71       	andi	r24, 0x1F	; 31
    9746:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    974a:	21 96       	adiw	r28, 0x01	; 1
    974c:	d7 cf       	rjmp	.-82     	; 0x96fc <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    974e:	8f ef       	ldi	r24, 0xFF	; 255
    9750:	68 1a       	sub	r6, r24
    9752:	78 0a       	sbc	r7, r24
    9754:	cf cf       	rjmp	.-98     	; 0x96f4 <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    9756:	df 91       	pop	r29
    9758:	cf 91       	pop	r28
    975a:	1f 91       	pop	r17
    975c:	0f 91       	pop	r16
    975e:	ff 90       	pop	r15
    9760:	ef 90       	pop	r14
    9762:	df 90       	pop	r13
    9764:	cf 90       	pop	r12
    9766:	bf 90       	pop	r11
    9768:	af 90       	pop	r10
    976a:	9f 90       	pop	r9
    976c:	8f 90       	pop	r8
    976e:	7f 90       	pop	r7
    9770:	6f 90       	pop	r6
    9772:	08 95       	ret

00009774 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    9774:	ff 92       	push	r15
    9776:	0f 93       	push	r16
    9778:	1f 93       	push	r17
    977a:	cf 93       	push	r28
    977c:	df 93       	push	r29
    977e:	00 d0       	rcall	.+0      	; 0x9780 <spawn_enemy+0xc>
    9780:	cd b7       	in	r28, 0x3d	; 61
    9782:	de b7       	in	r29, 0x3e	; 62
    9784:	26 ea       	ldi	r18, 0xA6	; 166
    9786:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9788:	f1 2c       	mov	r15, r1
    978a:	f9 01       	movw	r30, r18
    978c:	e3 54       	subi	r30, 0x43	; 67
    978e:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9790:	40 81       	ld	r20, Z
    9792:	41 11       	cpse	r20, r1
    9794:	1c c0       	rjmp	.+56     	; 0x97ce <spawn_enemy+0x5a>
    9796:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    9798:	40 81       	ld	r20, Z
    979a:	41 11       	cpse	r20, r1
    979c:	18 c0       	rjmp	.+48     	; 0x97ce <spawn_enemy+0x5a>
    979e:	ab 01       	movw	r20, r22
    97a0:	8c 01       	movw	r16, r24
				{
					if (is_space())
    97a2:	69 83       	std	Y+1, r22	; 0x01
    97a4:	5a 83       	std	Y+2, r21	; 0x02
    97a6:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    97aa:	49 81       	ldd	r20, Y+1	; 0x01
    97ac:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    97ae:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    97b0:	88 23       	and	r24, r24
    97b2:	21 f0       	breq	.+8      	; 0x97bc <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    97b4:	8f 2d       	mov	r24, r15
    97b6:	0e 94 58 4a 	call	0x94b0	; 0x94b0 <init_enemy_shark>
    97ba:	03 c0       	rjmp	.+6      	; 0x97c2 <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    97bc:	8f 2d       	mov	r24, r15
    97be:	0e 94 e9 49 	call	0x93d2	; 0x93d2 <init_enemy_spider>
					}
					game.active_enemies++;
    97c2:	80 91 c5 0d 	lds	r24, 0x0DC5
    97c6:	8f 5f       	subi	r24, 0xFF	; 255
    97c8:	80 93 c5 0d 	sts	0x0DC5, r24
    97cc:	06 c0       	rjmp	.+12     	; 0x97da <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    97ce:	f3 94       	inc	r15
    97d0:	2e 5b       	subi	r18, 0xBE	; 190
    97d2:	3f 4f       	sbci	r19, 0xFF	; 255
    97d4:	45 e0       	ldi	r20, 0x05	; 5
    97d6:	f4 12       	cpse	r15, r20
    97d8:	d8 cf       	rjmp	.-80     	; 0x978a <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    97da:	0f 90       	pop	r0
    97dc:	0f 90       	pop	r0
    97de:	df 91       	pop	r29
    97e0:	cf 91       	pop	r28
    97e2:	1f 91       	pop	r17
    97e4:	0f 91       	pop	r16
    97e6:	ff 90       	pop	r15
    97e8:	08 95       	ret

000097ea <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    97ea:	90 e0       	ldi	r25, 0x00	; 0
    97ec:	fc 01       	movw	r30, r24
    97ee:	31 97       	sbiw	r30, 0x01	; 1
    97f0:	e9 31       	cpi	r30, 0x19	; 25
    97f2:	f1 05       	cpc	r31, r1
    97f4:	20 f4       	brcc	.+8      	; 0x97fe <solid_tile+0x14>
    97f6:	e8 5c       	subi	r30, 0xC8	; 200
    97f8:	ff 4f       	sbci	r31, 0xFF	; 255
    97fa:	0c 94 bf 64 	jmp	0xc97e	; 0xc97e <__tablejump2__>
		case L_DESERT_BOTTOM : return 1;
		case L_DESERT_TOP : return 1;
		case L_DESERT_SPIKE_UP : return 1;
		case L_DESERT_SPIKE_DOWN : return 1;
	}
	return 0;
    97fe:	80 e0       	ldi	r24, 0x00	; 0
    9800:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    9802:	81 e0       	ldi	r24, 0x01	; 1
		case L_DESERT_TOP : return 1;
		case L_DESERT_SPIKE_UP : return 1;
		case L_DESERT_SPIKE_DOWN : return 1;
	}
	return 0;
}
    9804:	08 95       	ret

00009806 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    9806:	cf 92       	push	r12
    9808:	df 92       	push	r13
    980a:	ef 92       	push	r14
    980c:	ff 92       	push	r15
    980e:	0f 93       	push	r16
    9810:	1f 93       	push	r17
    9812:	cf 93       	push	r28
    9814:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    9816:	68 e1       	ldi	r22, 0x18	; 24
    9818:	80 e0       	ldi	r24, 0x00	; 0
    981a:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <LBRandom>
    981e:	88 0f       	add	r24, r24
    9820:	88 0f       	add	r24, r24
    9822:	88 0f       	add	r24, r24

	game.column_count++;
    9824:	20 91 b4 0d 	lds	r18, 0x0DB4
    9828:	30 91 b5 0d 	lds	r19, 0x0DB5
    982c:	2f 5f       	subi	r18, 0xFF	; 255
    982e:	3f 4f       	sbci	r19, 0xFF	; 255
    9830:	30 93 b5 0d 	sts	0x0DB5, r19
    9834:	20 93 b4 0d 	sts	0x0DB4, r18
    9838:	c0 e0       	ldi	r28, 0x00	; 0
    983a:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    983c:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    983e:	3e e1       	ldi	r19, 0x1E	; 30
    9840:	e3 2e       	mov	r14, r19
    9842:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9844:	08 2f       	mov	r16, r24
    9846:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9848:	40 91 ac 0d 	lds	r20, 0x0DAC
    984c:	50 91 ad 0d 	lds	r21, 0x0DAD
    9850:	23 e0       	ldi	r18, 0x03	; 3
    9852:	56 95       	lsr	r21
    9854:	47 95       	ror	r20
    9856:	2a 95       	dec	r18
    9858:	e1 f7       	brne	.-8      	; 0x9852 <append_tile_column+0x4c>
    985a:	4c 0f       	add	r20, r28
    985c:	5d 1f       	adc	r21, r29
    985e:	60 91 a6 0d 	lds	r22, 0x0DA6
    9862:	70 91 a7 0d 	lds	r23, 0x0DA7
    9866:	80 91 a5 0f 	lds	r24, 0x0FA5
    986a:	90 91 a6 0f 	lds	r25, 0x0FA6
    986e:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    9872:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9874:	28 2f       	mov	r18, r24
    9876:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9878:	90 91 b3 0c 	lds	r25, 0x0CB3
    987c:	96 95       	lsr	r25
    987e:	96 95       	lsr	r25
    9880:	96 95       	lsr	r25
    9882:	ae 01       	movw	r20, r28
    9884:	49 0f       	add	r20, r25
    9886:	51 1d       	adc	r21, r1
    9888:	ca 01       	movw	r24, r20
    988a:	b7 01       	movw	r22, r14
    988c:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9890:	a9 01       	movw	r20, r18
    9892:	68 2f       	mov	r22, r24
    9894:	80 91 c3 0d 	lds	r24, 0x0DC3
    9898:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    989c:	20 91 c6 0d 	lds	r18, 0x0DC6
    98a0:	30 e0       	ldi	r19, 0x00	; 0
    98a2:	80 91 b4 0d 	lds	r24, 0x0DB4
    98a6:	90 91 b5 0d 	lds	r25, 0x0DB5
    98aa:	b9 01       	movw	r22, r18
    98ac:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
    98b0:	21 50       	subi	r18, 0x01	; 1
    98b2:	31 09       	sbc	r19, r1
    98b4:	82 17       	cp	r24, r18
    98b6:	93 07       	cpc	r25, r19
    98b8:	91 f5       	brne	.+100    	; 0x991e <append_tile_column+0x118>
    98ba:	80 91 c5 0d 	lds	r24, 0x0DC5
    98be:	85 30       	cpi	r24, 0x05	; 5
    98c0:	70 f5       	brcc	.+92     	; 0x991e <append_tile_column+0x118>
    98c2:	d1 10       	cpse	r13, r1
    98c4:	2a c0       	rjmp	.+84     	; 0x991a <append_tile_column+0x114>
		{
			if (is_space())
    98c6:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    98ca:	88 23       	and	r24, r24
    98cc:	31 f0       	breq	.+12     	; 0x98da <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    98ce:	80 91 aa 0d 	lds	r24, 0x0DAA
    98d2:	90 91 ab 0d 	lds	r25, 0x0DAB
    98d6:	b8 01       	movw	r22, r16
    98d8:	1c c0       	rjmp	.+56     	; 0x9912 <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    98da:	8c 2d       	mov	r24, r12
    98dc:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    98e0:	88 23       	and	r24, r24
    98e2:	e9 f0       	breq	.+58     	; 0x991e <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    98e4:	20 91 ac 0d 	lds	r18, 0x0DAC
    98e8:	30 91 ad 0d 	lds	r19, 0x0DAD
    98ec:	83 e0       	ldi	r24, 0x03	; 3
    98ee:	36 95       	lsr	r19
    98f0:	27 95       	ror	r18
    98f2:	8a 95       	dec	r24
    98f4:	e1 f7       	brne	.-8      	; 0x98ee <append_tile_column+0xe8>
    98f6:	21 50       	subi	r18, 0x01	; 1
    98f8:	30 4e       	sbci	r19, 0xE0	; 224
    98fa:	2c 0f       	add	r18, r28
    98fc:	3d 1f       	adc	r19, r29
    98fe:	b9 01       	movw	r22, r18
    9900:	93 e0       	ldi	r25, 0x03	; 3
    9902:	66 0f       	add	r22, r22
    9904:	77 1f       	adc	r23, r23
    9906:	9a 95       	dec	r25
    9908:	e1 f7       	brne	.-8      	; 0x9902 <append_tile_column+0xfc>
    990a:	80 91 aa 0d 	lds	r24, 0x0DAA
    990e:	90 91 ab 0d 	lds	r25, 0x0DAB
    9912:	80 52       	subi	r24, 0x20	; 32
    9914:	9f 4f       	sbci	r25, 0xFF	; 255
    9916:	0e 94 ba 4b 	call	0x9774	; 0x9774 <spawn_enemy>
    991a:	dd 24       	eor	r13, r13
    991c:	d3 94       	inc	r13
    991e:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    9920:	ca 31       	cpi	r28, 0x1A	; 26
    9922:	d1 05       	cpc	r29, r1
    9924:	09 f0       	breq	.+2      	; 0x9928 <append_tile_column+0x122>
    9926:	90 cf       	rjmp	.-224    	; 0x9848 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    9928:	c0 91 a6 0d 	lds	r28, 0x0DA6
    992c:	d0 91 a7 0d 	lds	r29, 0x0DA7
    9930:	21 96       	adiw	r28, 0x01	; 1
    9932:	d0 93 a7 0d 	sts	0x0DA7, r29
    9936:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    993a:	80 91 c3 0d 	lds	r24, 0x0DC3
    993e:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9940:	80 32       	cpi	r24, 0x20	; 32
    9942:	18 f4       	brcc	.+6      	; 0x994a <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9944:	80 93 c3 0d 	sts	0x0DC3, r24
    9948:	02 c0       	rjmp	.+4      	; 0x994e <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    994a:	10 92 c3 0d 	sts	0x0DC3, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    994e:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    9952:	88 23       	and	r24, r24
    9954:	31 f0       	breq	.+12     	; 0x9962 <append_tile_column+0x15c>
    9956:	a0 97       	sbiw	r28, 0x20	; 32
    9958:	20 f0       	brcs	.+8      	; 0x9962 <append_tile_column+0x15c>
    995a:	10 92 a7 0d 	sts	0x0DA7, r1
    995e:	10 92 a6 0d 	sts	0x0DA6, r1
}
    9962:	df 91       	pop	r29
    9964:	cf 91       	pop	r28
    9966:	1f 91       	pop	r17
    9968:	0f 91       	pop	r16
    996a:	ff 90       	pop	r15
    996c:	ef 90       	pop	r14
    996e:	df 90       	pop	r13
    9970:	cf 90       	pop	r12
    9972:	08 95       	ret

00009974 <append_tile_row>:

void append_tile_row()
{
    9974:	cf 93       	push	r28
    9976:	df 93       	push	r29
    9978:	c0 e0       	ldi	r28, 0x00	; 0
    997a:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    997c:	40 91 a8 0d 	lds	r20, 0x0DA8
    9980:	50 91 a9 0d 	lds	r21, 0x0DA9
    9984:	60 91 aa 0d 	lds	r22, 0x0DAA
    9988:	70 91 ab 0d 	lds	r23, 0x0DAB
    998c:	83 e0       	ldi	r24, 0x03	; 3
    998e:	76 95       	lsr	r23
    9990:	67 95       	ror	r22
    9992:	8a 95       	dec	r24
    9994:	e1 f7       	brne	.-8      	; 0x998e <append_tile_row+0x1a>
    9996:	6c 0f       	add	r22, r28
    9998:	7d 1f       	adc	r23, r29
    999a:	80 91 a5 0f 	lds	r24, 0x0FA5
    999e:	90 91 a6 0f 	lds	r25, 0x0FA6
    99a2:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    99a6:	48 2f       	mov	r20, r24
    99a8:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    99aa:	80 91 b2 0c 	lds	r24, 0x0CB2
    99ae:	86 95       	lsr	r24
    99b0:	86 95       	lsr	r24
    99b2:	86 95       	lsr	r24
    99b4:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    99b6:	60 91 c4 0d 	lds	r22, 0x0DC4
    99ba:	8f 71       	andi	r24, 0x1F	; 31
    99bc:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <SetTile>
    99c0:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    99c2:	cd 31       	cpi	r28, 0x1D	; 29
    99c4:	d1 05       	cpc	r29, r1
    99c6:	d1 f6       	brne	.-76     	; 0x997c <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    99c8:	80 91 a8 0d 	lds	r24, 0x0DA8
    99cc:	90 91 a9 0d 	lds	r25, 0x0DA9
    99d0:	01 96       	adiw	r24, 0x01	; 1
    99d2:	90 93 a9 0d 	sts	0x0DA9, r25
    99d6:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    99da:	80 91 c4 0d 	lds	r24, 0x0DC4
    99de:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    99e0:	8e 31       	cpi	r24, 0x1E	; 30
    99e2:	18 f4       	brcc	.+6      	; 0x99ea <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    99e4:	80 93 c4 0d 	sts	0x0DC4, r24
    99e8:	02 c0       	rjmp	.+4      	; 0x99ee <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    99ea:	10 92 c4 0d 	sts	0x0DC4, r1
}
    99ee:	df 91       	pop	r29
    99f0:	cf 91       	pop	r28
    99f2:	08 95       	ret

000099f4 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    99f4:	80 91 aa 0d 	lds	r24, 0x0DAA
    99f8:	90 91 ab 0d 	lds	r25, 0x0DAB
    99fc:	01 96       	adiw	r24, 0x01	; 1
    99fe:	90 93 ab 0d 	sts	0x0DAB, r25
    9a02:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    9a06:	60 e0       	ldi	r22, 0x00	; 0
    9a08:	81 e0       	ldi	r24, 0x01	; 1
    9a0a:	0e 94 28 45 	call	0x8a50	; 0x8a50 <Scroll>
	if (++game.scroll_x == 8)
    9a0e:	80 91 c1 0d 	lds	r24, 0x0DC1
    9a12:	8f 5f       	subi	r24, 0xFF	; 255
    9a14:	88 30       	cpi	r24, 0x08	; 8
    9a16:	19 f0       	breq	.+6      	; 0x9a1e <move_camera_x+0x2a>
    9a18:	80 93 c1 0d 	sts	0x0DC1, r24
    9a1c:	08 95       	ret
	{
		game.scroll_x = 0;
    9a1e:	10 92 c1 0d 	sts	0x0DC1, r1
		append_tile_column();
    9a22:	0c 94 03 4c 	jmp	0x9806	; 0x9806 <append_tile_column>

00009a26 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    9a26:	80 91 ac 0d 	lds	r24, 0x0DAC
    9a2a:	90 91 ad 0d 	lds	r25, 0x0DAD
    9a2e:	02 96       	adiw	r24, 0x02	; 2
    9a30:	90 93 ad 0d 	sts	0x0DAD, r25
    9a34:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    9a38:	80 91 c2 0d 	lds	r24, 0x0DC2
    9a3c:	8e 5f       	subi	r24, 0xFE	; 254
    9a3e:	80 93 c2 0d 	sts	0x0DC2, r24
	Scroll(0,2);
    9a42:	62 e0       	ldi	r22, 0x02	; 2
    9a44:	80 e0       	ldi	r24, 0x00	; 0
    9a46:	0e 94 28 45 	call	0x8a50	; 0x8a50 <Scroll>
	if (game.scroll_y == 8)
    9a4a:	80 91 c2 0d 	lds	r24, 0x0DC2
    9a4e:	88 30       	cpi	r24, 0x08	; 8
    9a50:	21 f4       	brne	.+8      	; 0x9a5a <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    9a52:	10 92 c2 0d 	sts	0x0DC2, r1
		append_tile_row();
    9a56:	0c 94 ba 4c 	jmp	0x9974	; 0x9974 <append_tile_row>
    9a5a:	08 95       	ret

00009a5c <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    9a5c:	82 e0       	ldi	r24, 0x02	; 2
    9a5e:	80 93 35 0e 	sts	0x0E35, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9a62:	85 e0       	ldi	r24, 0x05	; 5
    9a64:	80 93 36 0e 	sts	0x0E36, r24
	game.player.run.anims = run_anim;
    9a68:	ef ef       	ldi	r30, 0xFF	; 255
    9a6a:	ff e0       	ldi	r31, 0x0F	; 15
    9a6c:	f0 93 3b 0e 	sts	0x0E3B, r31
    9a70:	e0 93 3a 0e 	sts	0x0E3A, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    9a74:	89 e9       	ldi	r24, 0x99	; 153
    9a76:	93 e3       	ldi	r25, 0x33	; 51
    9a78:	91 83       	std	Z+1, r25	; 0x01
    9a7a:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    9a7c:	8f e8       	ldi	r24, 0x8F	; 143
    9a7e:	93 e3       	ldi	r25, 0x33	; 51
    9a80:	93 83       	std	Z+3, r25	; 0x03
    9a82:	82 83       	std	Z+2, r24	; 0x02
    9a84:	08 95       	ret

00009a86 <map_level_info>:
}

void map_level_info(char* level)
{
    9a86:	0f 93       	push	r16
    9a88:	1f 93       	push	r17
    9a8a:	cf 93       	push	r28
    9a8c:	df 93       	push	r29
    9a8e:	ec 01       	movw	r28, r24
	game.current_level = level;
    9a90:	90 93 a6 0f 	sts	0x0FA6, r25
    9a94:	80 93 a5 0f 	sts	0x0FA5, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    9a98:	fc 01       	movw	r30, r24
    9a9a:	84 91       	lpm	r24, Z
    9a9c:	80 93 ba 0d 	sts	0x0DBA, r24
	game.raw_level_height = pgm_read_byte(&level[1]);
    9aa0:	8e 01       	movw	r16, r28
    9aa2:	0f 5f       	subi	r16, 0xFF	; 255
    9aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    9aa6:	f8 01       	movw	r30, r16
    9aa8:	84 91       	lpm	r24, Z
    9aaa:	80 93 bb 0d 	sts	0x0DBB, r24
	if (!is_space())
    9aae:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    9ab2:	81 11       	cpse	r24, r1
    9ab4:	11 c0       	rjmp	.+34     	; 0x9ad8 <map_level_info+0x52>
	{
		game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    9ab6:	fe 01       	movw	r30, r28
    9ab8:	c4 91       	lpm	r28, Z
    9aba:	8c 2f       	mov	r24, r28
    9abc:	88 0f       	add	r24, r24
    9abe:	88 0f       	add	r24, r24
    9ac0:	c8 0f       	add	r28, r24
    9ac2:	c0 93 bc 0d 	sts	0x0DBC, r28
		game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    9ac6:	f8 01       	movw	r30, r16
    9ac8:	04 91       	lpm	r16, Z
    9aca:	80 2f       	mov	r24, r16
    9acc:	88 0f       	add	r24, r24
    9ace:	88 0f       	add	r24, r24
    9ad0:	08 0f       	add	r16, r24
    9ad2:	00 93 bd 0d 	sts	0x0DBD, r16
    9ad6:	06 c0       	rjmp	.+12     	; 0x9ae4 <map_level_info+0x5e>
		
	}
	else
	{
		game.level_width = 255;
    9ad8:	8f ef       	ldi	r24, 0xFF	; 255
    9ada:	80 93 bc 0d 	sts	0x0DBC, r24
		game.level_height = 25;
    9ade:	89 e1       	ldi	r24, 0x19	; 25
    9ae0:	80 93 bd 0d 	sts	0x0DBD, r24
	}
}
    9ae4:	df 91       	pop	r29
    9ae6:	cf 91       	pop	r28
    9ae8:	1f 91       	pop	r17
    9aea:	0f 91       	pop	r16
    9aec:	08 95       	ret

00009aee <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9aee:	2f 92       	push	r2
    9af0:	3f 92       	push	r3
    9af2:	4f 92       	push	r4
    9af4:	5f 92       	push	r5
    9af6:	6f 92       	push	r6
    9af8:	7f 92       	push	r7
    9afa:	8f 92       	push	r8
    9afc:	9f 92       	push	r9
    9afe:	af 92       	push	r10
    9b00:	bf 92       	push	r11
    9b02:	cf 92       	push	r12
    9b04:	df 92       	push	r13
    9b06:	ef 92       	push	r14
    9b08:	ff 92       	push	r15
    9b0a:	0f 93       	push	r16
    9b0c:	1f 93       	push	r17
    9b0e:	cf 93       	push	r28
    9b10:	df 93       	push	r29
    9b12:	00 d0       	rcall	.+0      	; 0x9b14 <on_solid_ground+0x26>
    9b14:	00 d0       	rcall	.+0      	; 0x9b16 <on_solid_ground+0x28>
    9b16:	00 d0       	rcall	.+0      	; 0x9b18 <on_solid_ground+0x2a>
    9b18:	cd b7       	in	r28, 0x3d	; 61
    9b1a:	de b7       	in	r29, 0x3e	; 62
    9b1c:	9e 83       	std	Y+6, r25	; 0x06
    9b1e:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9b20:	88 e0       	ldi	r24, 0x08	; 8
    9b22:	48 9f       	mul	r20, r24
    9b24:	a0 01       	movw	r20, r0
    9b26:	11 24       	eor	r1, r1
    9b28:	26 2e       	mov	r2, r22
    9b2a:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9b2c:	00 e0       	ldi	r16, 0x00	; 0
    9b2e:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9b30:	ca 01       	movw	r24, r20
    9b32:	aa 27       	eor	r26, r26
    9b34:	97 fd       	sbrc	r25, 7
    9b36:	a0 95       	com	r26
    9b38:	ba 2f       	mov	r27, r26
    9b3a:	89 83       	std	Y+1, r24	; 0x01
    9b3c:	9a 83       	std	Y+2, r25	; 0x02
    9b3e:	ab 83       	std	Y+3, r26	; 0x03
    9b40:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9b42:	02 15       	cp	r16, r2
    9b44:	13 05       	cpc	r17, r3
    9b46:	09 f4       	brne	.+2      	; 0x9b4a <on_solid_ground+0x5c>
    9b48:	85 c0       	rjmp	.+266    	; 0x9c54 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9b4a:	69 81       	ldd	r22, Y+1	; 0x01
    9b4c:	7a 81       	ldd	r23, Y+2	; 0x02
    9b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    9b50:	9c 81       	ldd	r25, Y+4	; 0x04
    9b52:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    9b56:	4b 01       	movw	r8, r22
    9b58:	5c 01       	movw	r10, r24
    9b5a:	b8 01       	movw	r22, r16
    9b5c:	88 27       	eor	r24, r24
    9b5e:	77 fd       	sbrc	r23, 7
    9b60:	80 95       	com	r24
    9b62:	98 2f       	mov	r25, r24
    9b64:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    9b68:	6b 01       	movw	r12, r22
    9b6a:	7c 01       	movw	r14, r24
    9b6c:	ad 81       	ldd	r26, Y+5	; 0x05
    9b6e:	be 81       	ldd	r27, Y+6	; 0x06
    9b70:	18 96       	adiw	r26, 0x08	; 8
    9b72:	2d 91       	ld	r18, X+
    9b74:	3d 91       	ld	r19, X+
    9b76:	4d 91       	ld	r20, X+
    9b78:	5c 91       	ld	r21, X
    9b7a:	1b 97       	sbiw	r26, 0x0b	; 11
    9b7c:	c5 01       	movw	r24, r10
    9b7e:	b4 01       	movw	r22, r8
    9b80:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9b84:	20 e0       	ldi	r18, 0x00	; 0
    9b86:	30 e0       	ldi	r19, 0x00	; 0
    9b88:	40 e0       	ldi	r20, 0x00	; 0
    9b8a:	5e e3       	ldi	r21, 0x3E	; 62
    9b8c:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9b90:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9b94:	2b 01       	movw	r4, r22
    9b96:	3c 01       	movw	r6, r24
    9b98:	20 e0       	ldi	r18, 0x00	; 0
    9b9a:	30 e0       	ldi	r19, 0x00	; 0
    9b9c:	40 e0       	ldi	r20, 0x00	; 0
    9b9e:	5e e3       	ldi	r21, 0x3E	; 62
    9ba0:	ed 81       	ldd	r30, Y+5	; 0x05
    9ba2:	fe 81       	ldd	r31, Y+6	; 0x06
    9ba4:	64 81       	ldd	r22, Z+4	; 0x04
    9ba6:	75 81       	ldd	r23, Z+5	; 0x05
    9ba8:	86 81       	ldd	r24, Z+6	; 0x06
    9baa:	97 81       	ldd	r25, Z+7	; 0x07
    9bac:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9bb0:	a7 01       	movw	r20, r14
    9bb2:	96 01       	movw	r18, r12
    9bb4:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9bb8:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9bbc:	a2 01       	movw	r20, r4
    9bbe:	80 91 a5 0f 	lds	r24, 0x0FA5
    9bc2:	90 91 a6 0f 	lds	r25, 0x0FA6
    9bc6:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    9bca:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    9bcc:	ad 81       	ldd	r26, Y+5	; 0x05
    9bce:	be 81       	ldd	r27, Y+6	; 0x06
    9bd0:	18 96       	adiw	r26, 0x08	; 8
    9bd2:	2d 91       	ld	r18, X+
    9bd4:	3d 91       	ld	r19, X+
    9bd6:	4d 91       	ld	r20, X+
    9bd8:	5c 91       	ld	r21, X
    9bda:	1b 97       	sbiw	r26, 0x0b	; 11
    9bdc:	c5 01       	movw	r24, r10
    9bde:	b4 01       	movw	r22, r8
    9be0:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9be4:	20 e0       	ldi	r18, 0x00	; 0
    9be6:	30 e0       	ldi	r19, 0x00	; 0
    9be8:	40 e0       	ldi	r20, 0x00	; 0
    9bea:	5e e3       	ldi	r21, 0x3E	; 62
    9bec:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9bf0:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9bf4:	4b 01       	movw	r8, r22
    9bf6:	5c 01       	movw	r10, r24
    9bf8:	20 e0       	ldi	r18, 0x00	; 0
    9bfa:	30 e0       	ldi	r19, 0x00	; 0
    9bfc:	40 ee       	ldi	r20, 0xE0	; 224
    9bfe:	50 e4       	ldi	r21, 0x40	; 64
    9c00:	ed 81       	ldd	r30, Y+5	; 0x05
    9c02:	fe 81       	ldd	r31, Y+6	; 0x06
    9c04:	64 81       	ldd	r22, Z+4	; 0x04
    9c06:	75 81       	ldd	r23, Z+5	; 0x05
    9c08:	86 81       	ldd	r24, Z+6	; 0x06
    9c0a:	97 81       	ldd	r25, Z+7	; 0x07
    9c0c:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9c10:	20 e0       	ldi	r18, 0x00	; 0
    9c12:	30 e0       	ldi	r19, 0x00	; 0
    9c14:	40 e0       	ldi	r20, 0x00	; 0
    9c16:	5e e3       	ldi	r21, 0x3E	; 62
    9c18:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9c1c:	a7 01       	movw	r20, r14
    9c1e:	96 01       	movw	r18, r12
    9c20:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9c24:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9c28:	a4 01       	movw	r20, r8
    9c2a:	80 91 a5 0f 	lds	r24, 0x0FA5
    9c2e:	90 91 a6 0f 	lds	r25, 0x0FA6
    9c32:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    9c36:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    9c38:	87 2d       	mov	r24, r7
    9c3a:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    9c3e:	81 11       	cpse	r24, r1
    9c40:	0b c0       	rjmp	.+22     	; 0x9c58 <on_solid_ground+0x16a>
    9c42:	8f 2d       	mov	r24, r15
    9c44:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    9c48:	0f 5f       	subi	r16, 0xFF	; 255
    9c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    9c4c:	88 23       	and	r24, r24
    9c4e:	09 f4       	brne	.+2      	; 0x9c52 <on_solid_ground+0x164>
    9c50:	78 cf       	rjmp	.-272    	; 0x9b42 <on_solid_ground+0x54>
    9c52:	02 c0       	rjmp	.+4      	; 0x9c58 <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    9c54:	80 e0       	ldi	r24, 0x00	; 0
    9c56:	01 c0       	rjmp	.+2      	; 0x9c5a <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    9c58:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    9c5a:	26 96       	adiw	r28, 0x06	; 6
    9c5c:	0f b6       	in	r0, 0x3f	; 63
    9c5e:	f8 94       	cli
    9c60:	de bf       	out	0x3e, r29	; 62
    9c62:	0f be       	out	0x3f, r0	; 63
    9c64:	cd bf       	out	0x3d, r28	; 61
    9c66:	df 91       	pop	r29
    9c68:	cf 91       	pop	r28
    9c6a:	1f 91       	pop	r17
    9c6c:	0f 91       	pop	r16
    9c6e:	ff 90       	pop	r15
    9c70:	ef 90       	pop	r14
    9c72:	df 90       	pop	r13
    9c74:	cf 90       	pop	r12
    9c76:	bf 90       	pop	r11
    9c78:	af 90       	pop	r10
    9c7a:	9f 90       	pop	r9
    9c7c:	8f 90       	pop	r8
    9c7e:	7f 90       	pop	r7
    9c80:	6f 90       	pop	r6
    9c82:	5f 90       	pop	r5
    9c84:	4f 90       	pop	r4
    9c86:	3f 90       	pop	r3
    9c88:	2f 90       	pop	r2
    9c8a:	08 95       	ret

00009c8c <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    9c8c:	80 91 ef 0d 	lds	r24, 0x0DEF
    9c90:	88 23       	and	r24, r24
    9c92:	61 f0       	breq	.+24     	; 0x9cac <find_shot_slot+0x20>
    9c94:	80 91 09 0e 	lds	r24, 0x0E09
    9c98:	88 23       	and	r24, r24
    9c9a:	31 f0       	breq	.+12     	; 0x9ca8 <find_shot_slot+0x1c>
    9c9c:	80 91 23 0e 	lds	r24, 0x0E23
    9ca0:	81 11       	cpse	r24, r1
    9ca2:	04 c0       	rjmp	.+8      	; 0x9cac <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    9ca4:	82 e0       	ldi	r24, 0x02	; 2
    9ca6:	08 95       	ret
    9ca8:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    9caa:	08 95       	ret
	}
	return 0;
    9cac:	80 e0       	ldi	r24, 0x00	; 0
}
    9cae:	08 95       	ret

00009cb0 <update_shot>:

void update_shot()
{
    9cb0:	4f 92       	push	r4
    9cb2:	5f 92       	push	r5
    9cb4:	6f 92       	push	r6
    9cb6:	7f 92       	push	r7
    9cb8:	af 92       	push	r10
    9cba:	bf 92       	push	r11
    9cbc:	df 92       	push	r13
    9cbe:	ef 92       	push	r14
    9cc0:	ff 92       	push	r15
    9cc2:	0f 93       	push	r16
    9cc4:	1f 93       	push	r17
    9cc6:	cf 93       	push	r28
    9cc8:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    9cca:	80 91 9e 0f 	lds	r24, 0x0F9E
    9cce:	90 91 9f 0f 	lds	r25, 0x0F9F
    9cd2:	90 ff       	sbrs	r25, 0
    9cd4:	e5 c0       	rjmp	.+458    	; 0x9ea0 <update_shot+0x1f0>
    9cd6:	80 91 d7 0d 	lds	r24, 0x0DD7
    9cda:	83 30       	cpi	r24, 0x03	; 3
    9cdc:	08 f0       	brcs	.+2      	; 0x9ce0 <update_shot+0x30>
    9cde:	e0 c0       	rjmp	.+448    	; 0x9ea0 <update_shot+0x1f0>
	{
		SFX_PLAYER_SHOOT;
    9ce0:	2f ef       	ldi	r18, 0xFF	; 255
    9ce2:	43 e2       	ldi	r20, 0x23	; 35
    9ce4:	63 e0       	ldi	r22, 0x03	; 3
    9ce6:	82 e0       	ldi	r24, 0x02	; 2
    9ce8:	0e 94 0b 3b 	call	0x7616	; 0x7616 <TriggerNote>
		idx = find_shot_slot();
    9cec:	0e 94 46 4e 	call	0x9c8c	; 0x9c8c <find_shot_slot>
    9cf0:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    9cf2:	08 2f       	mov	r16, r24
    9cf4:	10 e0       	ldi	r17, 0x00	; 0
    9cf6:	9a e1       	ldi	r25, 0x1A	; 26
    9cf8:	d9 2e       	mov	r13, r25
    9cfa:	d0 9e       	mul	r13, r16
    9cfc:	e0 01       	movw	r28, r0
    9cfe:	d1 9e       	mul	r13, r17
    9d00:	d0 0d       	add	r29, r0
    9d02:	11 24       	eor	r1, r1
    9d04:	ce 01       	movw	r24, r28
    9d06:	80 51       	subi	r24, 0x10	; 16
    9d08:	92 4f       	sbci	r25, 0xF2	; 242
    9d0a:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    9d0e:	40 e0       	ldi	r20, 0x00	; 0
    9d10:	bc 01       	movw	r22, r24
    9d12:	8b e0       	ldi	r24, 0x0B	; 11
    9d14:	8f 0d       	add	r24, r15
    9d16:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		game.player.shot[idx].active = 1;
    9d1a:	ca 55       	subi	r28, 0x5A	; 90
    9d1c:	d2 4f       	sbci	r29, 0xF2	; 242
    9d1e:	fe 01       	movw	r30, r28
    9d20:	e7 5b       	subi	r30, 0xB7	; 183
    9d22:	ff 4f       	sbci	r31, 0xFF	; 255
    9d24:	81 e0       	ldi	r24, 0x01	; 1
    9d26:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    9d28:	60 91 d0 0d 	lds	r22, 0x0DD0
    9d2c:	70 91 d1 0d 	lds	r23, 0x0DD1
    9d30:	80 91 d2 0d 	lds	r24, 0x0DD2
    9d34:	90 91 d3 0d 	lds	r25, 0x0DD3
    9d38:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9d3c:	23 e0       	ldi	r18, 0x03	; 3
    9d3e:	76 95       	lsr	r23
    9d40:	67 95       	ror	r22
    9d42:	2a 95       	dec	r18
    9d44:	e1 f7       	brne	.-8      	; 0x9d3e <update_shot+0x8e>
    9d46:	33 e0       	ldi	r19, 0x03	; 3
    9d48:	66 0f       	add	r22, r22
    9d4a:	77 1f       	adc	r23, r23
    9d4c:	3a 95       	dec	r19
    9d4e:	e1 f7       	brne	.-8      	; 0x9d48 <update_shot+0x98>
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	90 e0       	ldi	r25, 0x00	; 0
    9d54:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    9d58:	2b 01       	movw	r4, r22
    9d5a:	3c 01       	movw	r6, r24
    9d5c:	5e 01       	movw	r10, r28
    9d5e:	20 e4       	ldi	r18, 0x40	; 64
    9d60:	a2 0e       	add	r10, r18
    9d62:	b1 1c       	adc	r11, r1
    9d64:	f5 01       	movw	r30, r10
    9d66:	60 83       	st	Z, r22
    9d68:	71 83       	std	Z+1, r23	; 0x01
    9d6a:	82 83       	std	Z+2, r24	; 0x02
    9d6c:	93 83       	std	Z+3, r25	; 0x03
		if (is_space())
    9d6e:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    9d72:	98 01       	movw	r18, r16
    9d74:	2f 5f       	subi	r18, 0xFF	; 255
    9d76:	3f 4f       	sbci	r19, 0xFF	; 255
    9d78:	79 01       	movw	r14, r18
    9d7a:	88 23       	and	r24, r24
    9d7c:	59 f1       	breq	.+86     	; 0x9dd4 <update_shot+0x124>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    9d7e:	60 91 db 0d 	lds	r22, 0x0DDB
    9d82:	d2 9e       	mul	r13, r18
    9d84:	80 01       	movw	r16, r0
    9d86:	d3 9e       	mul	r13, r19
    9d88:	10 0d       	add	r17, r0
    9d8a:	11 24       	eor	r1, r1
    9d8c:	0a 55       	subi	r16, 0x5A	; 90
    9d8e:	12 4f       	sbci	r17, 0xF2	; 242
    9d90:	38 e0       	ldi	r19, 0x08	; 8
    9d92:	63 9f       	mul	r22, r19
    9d94:	b0 01       	movw	r22, r0
    9d96:	11 24       	eor	r1, r1
    9d98:	88 27       	eor	r24, r24
    9d9a:	77 fd       	sbrc	r23, 7
    9d9c:	80 95       	com	r24
    9d9e:	98 2f       	mov	r25, r24
    9da0:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    9da4:	9b 01       	movw	r18, r22
    9da6:	ac 01       	movw	r20, r24
    9da8:	60 91 cc 0d 	lds	r22, 0x0DCC
    9dac:	70 91 cd 0d 	lds	r23, 0x0DCD
    9db0:	80 91 ce 0d 	lds	r24, 0x0DCE
    9db4:	90 91 cf 0d 	lds	r25, 0x0DCF
    9db8:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9dbc:	f8 01       	movw	r30, r16
    9dbe:	62 a3       	std	Z+34, r22	; 0x22
    9dc0:	73 a3       	std	Z+35, r23	; 0x23
    9dc2:	84 a3       	std	Z+36, r24	; 0x24
    9dc4:	95 a3       	std	Z+37, r25	; 0x25
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    9dc6:	cc 5b       	subi	r28, 0xBC	; 188
    9dc8:	df 4f       	sbci	r29, 0xFF	; 255
    9dca:	80 e9       	ldi	r24, 0x90	; 144
    9dcc:	91 e0       	ldi	r25, 0x01	; 1
    9dce:	99 83       	std	Y+1, r25	; 0x01
    9dd0:	88 83       	st	Y, r24
    9dd2:	61 c0       	rjmp	.+194    	; 0x9e96 <update_shot+0x1e6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    9dd4:	80 91 d8 0d 	lds	r24, 0x0DD8
    9dd8:	82 fd       	sbrc	r24, 2
    9dda:	0d c0       	rjmp	.+26     	; 0x9df6 <update_shot+0x146>
			{
				game.player.shot[idx].shared.y += 8;
    9ddc:	20 e0       	ldi	r18, 0x00	; 0
    9dde:	30 e0       	ldi	r19, 0x00	; 0
    9de0:	40 e0       	ldi	r20, 0x00	; 0
    9de2:	51 e4       	ldi	r21, 0x41	; 65
    9de4:	c3 01       	movw	r24, r6
    9de6:	b2 01       	movw	r22, r4
    9de8:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9dec:	f5 01       	movw	r30, r10
    9dee:	60 83       	st	Z, r22
    9df0:	71 83       	std	Z+1, r23	; 0x01
    9df2:	82 83       	std	Z+2, r24	; 0x02
    9df4:	93 83       	std	Z+3, r25	; 0x03
			}
			if (game.player.direction == D_RIGHT)
    9df6:	80 91 da 0d 	lds	r24, 0x0DDA
    9dfa:	81 30       	cpi	r24, 0x01	; 1
    9dfc:	39 f5       	brne	.+78     	; 0x9e4c <update_shot+0x19c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    9dfe:	8a e1       	ldi	r24, 0x1A	; 26
    9e00:	d8 2e       	mov	r13, r24
    9e02:	de 9c       	mul	r13, r14
    9e04:	e0 01       	movw	r28, r0
    9e06:	df 9c       	mul	r13, r15
    9e08:	d0 0d       	add	r29, r0
    9e0a:	11 24       	eor	r1, r1
    9e0c:	ca 55       	subi	r28, 0x5A	; 90
    9e0e:	d2 4f       	sbci	r29, 0xF2	; 242
    9e10:	20 e0       	ldi	r18, 0x00	; 0
    9e12:	30 e0       	ldi	r19, 0x00	; 0
    9e14:	40 e8       	ldi	r20, 0x80	; 128
    9e16:	51 e4       	ldi	r21, 0x41	; 65
    9e18:	60 91 cc 0d 	lds	r22, 0x0DCC
    9e1c:	70 91 cd 0d 	lds	r23, 0x0DCD
    9e20:	80 91 ce 0d 	lds	r24, 0x0DCE
    9e24:	90 91 cf 0d 	lds	r25, 0x0DCF
    9e28:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9e2c:	6a a3       	std	Y+34, r22	; 0x22
    9e2e:	7b a3       	std	Y+35, r23	; 0x23
    9e30:	8c a3       	std	Y+36, r24	; 0x24
    9e32:	9d a3       	std	Y+37, r25	; 0x25
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    9e34:	d0 9e       	mul	r13, r16
    9e36:	f0 01       	movw	r30, r0
    9e38:	d1 9e       	mul	r13, r17
    9e3a:	f0 0d       	add	r31, r0
    9e3c:	11 24       	eor	r1, r1
    9e3e:	e6 51       	subi	r30, 0x16	; 22
    9e40:	f2 4f       	sbci	r31, 0xF2	; 242
    9e42:	80 e9       	ldi	r24, 0x90	; 144
    9e44:	91 e0       	ldi	r25, 0x01	; 1
    9e46:	91 83       	std	Z+1, r25	; 0x01
    9e48:	80 83       	st	Z, r24
    9e4a:	25 c0       	rjmp	.+74     	; 0x9e96 <update_shot+0x1e6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    9e4c:	8a e1       	ldi	r24, 0x1A	; 26
    9e4e:	80 9f       	mul	r24, r16
    9e50:	f0 01       	movw	r30, r0
    9e52:	81 9f       	mul	r24, r17
    9e54:	f0 0d       	add	r31, r0
    9e56:	11 24       	eor	r1, r1
    9e58:	e6 51       	subi	r30, 0x16	; 22
    9e5a:	f2 4f       	sbci	r31, 0xF2	; 242
    9e5c:	20 e7       	ldi	r18, 0x70	; 112
    9e5e:	3e ef       	ldi	r19, 0xFE	; 254
    9e60:	31 83       	std	Z+1, r19	; 0x01
    9e62:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    9e64:	8e 9d       	mul	r24, r14
    9e66:	e0 01       	movw	r28, r0
    9e68:	8f 9d       	mul	r24, r15
    9e6a:	d0 0d       	add	r29, r0
    9e6c:	11 24       	eor	r1, r1
    9e6e:	ca 55       	subi	r28, 0x5A	; 90
    9e70:	d2 4f       	sbci	r29, 0xF2	; 242
    9e72:	20 e0       	ldi	r18, 0x00	; 0
    9e74:	30 e0       	ldi	r19, 0x00	; 0
    9e76:	40 e0       	ldi	r20, 0x00	; 0
    9e78:	51 e4       	ldi	r21, 0x41	; 65
    9e7a:	60 91 cc 0d 	lds	r22, 0x0DCC
    9e7e:	70 91 cd 0d 	lds	r23, 0x0DCD
    9e82:	80 91 ce 0d 	lds	r24, 0x0DCE
    9e86:	90 91 cf 0d 	lds	r25, 0x0DCF
    9e8a:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    9e8e:	6a a3       	std	Y+34, r22	; 0x22
    9e90:	7b a3       	std	Y+35, r23	; 0x23
    9e92:	8c a3       	std	Y+36, r24	; 0x24
    9e94:	9d a3       	std	Y+37, r25	; 0x25
			}
		}
		game.player.active_shots++;
    9e96:	80 91 d7 0d 	lds	r24, 0x0DD7
    9e9a:	8f 5f       	subi	r24, 0xFF	; 255
    9e9c:	80 93 d7 0d 	sts	0x0DD7, r24
	}
}
    9ea0:	df 91       	pop	r29
    9ea2:	cf 91       	pop	r28
    9ea4:	1f 91       	pop	r17
    9ea6:	0f 91       	pop	r16
    9ea8:	ff 90       	pop	r15
    9eaa:	ef 90       	pop	r14
    9eac:	df 90       	pop	r13
    9eae:	bf 90       	pop	r11
    9eb0:	af 90       	pop	r10
    9eb2:	7f 90       	pop	r7
    9eb4:	6f 90       	pop	r6
    9eb6:	5f 90       	pop	r5
    9eb8:	4f 90       	pop	r4
    9eba:	08 95       	ret

00009ebc <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    9ebc:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    9ebe:	86 17       	cp	r24, r22
    9ec0:	97 07       	cpc	r25, r23
    9ec2:	28 f4       	brcc	.+10     	; 0x9ece <pixel_overlap+0x12>
    9ec4:	94 2f       	mov	r25, r20
    9ec6:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    9ec8:	89 2f       	mov	r24, r25
    9eca:	86 1b       	sub	r24, r22
    9ecc:	01 c0       	rjmp	.+2      	; 0x9ed0 <pixel_overlap+0x14>
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    9ece:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    9ed0:	e4 0f       	add	r30, r20
    9ed2:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    9ed4:	62 0f       	add	r22, r18
    9ed6:	71 1d       	adc	r23, r1
	if (s2 < s1)
    9ed8:	6e 17       	cp	r22, r30
    9eda:	7f 07       	cpc	r23, r31
    9edc:	10 f4       	brcc	.+4      	; 0x9ee2 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    9ede:	6e 1b       	sub	r22, r30
    9ee0:	86 0f       	add	r24, r22
	}
	return result;
}
    9ee2:	08 95       	ret

00009ee4 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9ee4:	2f 92       	push	r2
    9ee6:	3f 92       	push	r3
    9ee8:	4f 92       	push	r4
    9eea:	5f 92       	push	r5
    9eec:	6f 92       	push	r6
    9eee:	7f 92       	push	r7
    9ef0:	8f 92       	push	r8
    9ef2:	9f 92       	push	r9
    9ef4:	af 92       	push	r10
    9ef6:	bf 92       	push	r11
    9ef8:	cf 92       	push	r12
    9efa:	df 92       	push	r13
    9efc:	ef 92       	push	r14
    9efe:	ff 92       	push	r15
    9f00:	0f 93       	push	r16
    9f02:	1f 93       	push	r17
    9f04:	cf 93       	push	r28
    9f06:	df 93       	push	r29
    9f08:	cd b7       	in	r28, 0x3d	; 61
    9f0a:	de b7       	in	r29, 0x3e	; 62
    9f0c:	68 97       	sbiw	r28, 0x18	; 24
    9f0e:	0f b6       	in	r0, 0x3f	; 63
    9f10:	f8 94       	cli
    9f12:	de bf       	out	0x3e, r29	; 62
    9f14:	0f be       	out	0x3f, r0	; 63
    9f16:	cd bf       	out	0x3d, r28	; 61
    9f18:	98 8f       	std	Y+24, r25	; 0x18
    9f1a:	8f 8b       	std	Y+23, r24	; 0x17
    9f1c:	16 2f       	mov	r17, r22
    9f1e:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    9f20:	dc 01       	movw	r26, r24
    9f22:	14 96       	adiw	r26, 0x04	; 4
    9f24:	4d 90       	ld	r4, X+
    9f26:	5d 90       	ld	r5, X+
    9f28:	6d 90       	ld	r6, X+
    9f2a:	7c 90       	ld	r7, X
    9f2c:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    9f2e:	18 96       	adiw	r26, 0x08	; 8
    9f30:	cd 90       	ld	r12, X+
    9f32:	dd 90       	ld	r13, X+
    9f34:	ed 90       	ld	r14, X+
    9f36:	fc 90       	ld	r15, X
    9f38:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    9f3a:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    9f3e:	81 11       	cpse	r24, r1
    9f40:	f2 c2       	rjmp	.+1508   	; 0xa526 <collision_detect_level+0x642>
    9f42:	ef 89       	ldd	r30, Y+23	; 0x17
    9f44:	f8 8d       	ldd	r31, Y+24	; 0x18
    9f46:	84 85       	ldd	r24, Z+12	; 0x0c
    9f48:	95 85       	ldd	r25, Z+13	; 0x0d
    9f4a:	89 2b       	or	r24, r25
    9f4c:	61 f4       	brne	.+24     	; 0x9f66 <collision_detect_level+0x82>
    9f4e:	20 e0       	ldi	r18, 0x00	; 0
    9f50:	30 e0       	ldi	r19, 0x00	; 0
    9f52:	a9 01       	movw	r20, r18
    9f54:	60 81       	ld	r22, Z
    9f56:	71 81       	ldd	r23, Z+1	; 0x01
    9f58:	82 81       	ldd	r24, Z+2	; 0x02
    9f5a:	93 81       	ldd	r25, Z+3	; 0x03
    9f5c:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    9f60:	88 23       	and	r24, r24
    9f62:	09 f4       	brne	.+2      	; 0x9f66 <collision_detect_level+0x82>
    9f64:	e0 c2       	rjmp	.+1472   	; 0xa526 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    9f66:	20 e0       	ldi	r18, 0x00	; 0
    9f68:	30 e0       	ldi	r19, 0x00	; 0
    9f6a:	40 e0       	ldi	r20, 0x00	; 0
    9f6c:	5e e3       	ldi	r21, 0x3E	; 62
    9f6e:	c3 01       	movw	r24, r6
    9f70:	b2 01       	movw	r22, r4
    9f72:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9f76:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9f7a:	4b 01       	movw	r8, r22
    9f7c:	5c 01       	movw	r10, r24
    9f7e:	68 87       	std	Y+8, r22	; 0x08
    9f80:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    9f82:	20 e0       	ldi	r18, 0x00	; 0
    9f84:	30 e0       	ldi	r19, 0x00	; 0
    9f86:	a9 01       	movw	r20, r18
    9f88:	af 89       	ldd	r26, Y+23	; 0x17
    9f8a:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f8c:	6d 91       	ld	r22, X+
    9f8e:	7d 91       	ld	r23, X+
    9f90:	8d 91       	ld	r24, X+
    9f92:	9c 91       	ld	r25, X
    9f94:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    9f98:	88 23       	and	r24, r24
    9f9a:	09 f4       	brne	.+2      	; 0x9f9e <collision_detect_level+0xba>
    9f9c:	67 c1       	rjmp	.+718    	; 0xa26c <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    9f9e:	20 e0       	ldi	r18, 0x00	; 0
    9fa0:	30 e0       	ldi	r19, 0x00	; 0
    9fa2:	40 e0       	ldi	r20, 0x00	; 0
    9fa4:	5e e3       	ldi	r21, 0x3E	; 62
    9fa6:	c7 01       	movw	r24, r14
    9fa8:	b6 01       	movw	r22, r12
    9faa:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9fae:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    9fb2:	6b 01       	movw	r12, r22
    9fb4:	7c 01       	movw	r14, r24
    9fb6:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    9fb8:	20 e0       	ldi	r18, 0x00	; 0
    9fba:	30 e0       	ldi	r19, 0x00	; 0
    9fbc:	40 ee       	ldi	r20, 0xE0	; 224
    9fbe:	50 e4       	ldi	r21, 0x40	; 64
    9fc0:	c3 01       	movw	r24, r6
    9fc2:	b2 01       	movw	r22, r4
    9fc4:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    9fc8:	20 e0       	ldi	r18, 0x00	; 0
    9fca:	30 e0       	ldi	r19, 0x00	; 0
    9fcc:	40 e0       	ldi	r20, 0x00	; 0
    9fce:	5e e3       	ldi	r21, 0x3E	; 62
    9fd0:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    9fd4:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9fd8:	f4 01       	movw	r30, r8
    9fda:	53 e0       	ldi	r21, 0x03	; 3
    9fdc:	ee 0f       	add	r30, r30
    9fde:	ff 1f       	adc	r31, r31
    9fe0:	5a 95       	dec	r21
    9fe2:	e1 f7       	brne	.-8      	; 0x9fdc <collision_detect_level+0xf8>
    9fe4:	fb 83       	std	Y+3, r31	; 0x03
    9fe6:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9fe8:	9b 01       	movw	r18, r22
    9fea:	e3 e0       	ldi	r30, 0x03	; 3
    9fec:	22 0f       	add	r18, r18
    9fee:	33 1f       	adc	r19, r19
    9ff0:	ea 95       	dec	r30
    9ff2:	e1 f7       	brne	.-8      	; 0x9fec <collision_detect_level+0x108>
    9ff4:	3d 83       	std	Y+5, r19	; 0x05
    9ff6:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9ff8:	3f ef       	ldi	r19, 0xFF	; 255
    9ffa:	c3 1a       	sub	r12, r19
    9ffc:	d3 0a       	sbc	r13, r19
    9ffe:	f3 e0       	ldi	r31, 0x03	; 3
    a000:	cc 0c       	add	r12, r12
    a002:	dd 1c       	adc	r13, r13
    a004:	fa 95       	dec	r31
    a006:	e1 f7       	brne	.-8      	; 0xa000 <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a008:	b9 89       	ldd	r27, Y+17	; 0x11
    a00a:	a8 e0       	ldi	r26, 0x08	; 8
    a00c:	ba 9f       	mul	r27, r26
    a00e:	a0 01       	movw	r20, r0
    a010:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a012:	96 01       	movw	r18, r12
    a014:	28 50       	subi	r18, 0x08	; 8
    a016:	31 09       	sbc	r19, r1
    a018:	2b 01       	movw	r4, r22
    a01a:	34 01       	movw	r6, r8
    a01c:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    a01e:	b6 01       	movw	r22, r12
    a020:	80 e0       	ldi	r24, 0x00	; 0
    a022:	90 e0       	ldi	r25, 0x00	; 0
    a024:	69 87       	std	Y+9, r22	; 0x09
    a026:	7a 87       	std	Y+10, r23	; 0x0a
    a028:	8b 87       	std	Y+11, r24	; 0x0b
    a02a:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a02c:	66 27       	eor	r22, r22
    a02e:	57 fd       	sbrc	r21, 7
    a030:	60 95       	com	r22
    a032:	76 2f       	mov	r23, r22
    a034:	4d 87       	std	Y+13, r20	; 0x0d
    a036:	5e 87       	std	Y+14, r21	; 0x0e
    a038:	6f 87       	std	Y+15, r22	; 0x0f
    a03a:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    a03c:	b9 01       	movw	r22, r18
    a03e:	80 e0       	ldi	r24, 0x00	; 0
    a040:	90 e0       	ldi	r25, 0x00	; 0
    a042:	6b 8b       	std	Y+19, r22	; 0x13
    a044:	7c 8b       	std	Y+20, r23	; 0x14
    a046:	8d 8b       	std	Y+21, r24	; 0x15
    a048:	9e 8b       	std	Y+22, r25	; 0x16
    a04a:	86 2d       	mov	r24, r6
    a04c:	48 85       	ldd	r20, Y+8	; 0x08
    a04e:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    a050:	81 17       	cp	r24, r17
    a052:	08 f0       	brcs	.+2      	; 0xa056 <collision_detect_level+0x172>
    a054:	0c c1       	rjmp	.+536    	; 0xa26e <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    a056:	20 e0       	ldi	r18, 0x00	; 0
    a058:	30 e0       	ldi	r19, 0x00	; 0
    a05a:	a9 01       	movw	r20, r18
    a05c:	af 89       	ldd	r26, Y+23	; 0x17
    a05e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a060:	6d 91       	ld	r22, X+
    a062:	7d 91       	ld	r23, X+
    a064:	8d 91       	ld	r24, X+
    a066:	9c 91       	ld	r25, X
    a068:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    a06c:	87 ff       	sbrs	r24, 7
    a06e:	58 c0       	rjmp	.+176    	; 0xa120 <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    a070:	a1 01       	movw	r20, r2
    a072:	b3 01       	movw	r22, r6
    a074:	80 91 a5 0f 	lds	r24, 0x0FA5
    a078:	90 91 a6 0f 	lds	r25, 0x0FA6
    a07c:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a080:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    a082:	a1 01       	movw	r20, r2
    a084:	b2 01       	movw	r22, r4
    a086:	80 91 a5 0f 	lds	r24, 0x0FA5
    a08a:	90 91 a6 0f 	lds	r25, 0x0FA6
    a08e:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a092:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a094:	8f 2d       	mov	r24, r15
    a096:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    a09a:	88 23       	and	r24, r24
    a09c:	91 f0       	breq	.+36     	; 0xa0c2 <collision_detect_level+0x1de>
    a09e:	ef 89       	ldd	r30, Y+23	; 0x17
    a0a0:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0a2:	64 81       	ldd	r22, Z+4	; 0x04
    a0a4:	75 81       	ldd	r23, Z+5	; 0x05
    a0a6:	86 81       	ldd	r24, Z+6	; 0x06
    a0a8:	97 81       	ldd	r25, Z+7	; 0x07
    a0aa:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a0ae:	dc 01       	movw	r26, r24
    a0b0:	cb 01       	movw	r24, r22
    a0b2:	28 e0       	ldi	r18, 0x08	; 8
    a0b4:	48 e0       	ldi	r20, 0x08	; 8
    a0b6:	6a 81       	ldd	r22, Y+2	; 0x02
    a0b8:	7b 81       	ldd	r23, Y+3	; 0x03
    a0ba:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a0be:	84 30       	cpi	r24, 0x04	; 4
    a0c0:	c8 f4       	brcc	.+50     	; 0xa0f4 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a0c2:	80 2f       	mov	r24, r16
    a0c4:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a0c8:	88 23       	and	r24, r24
    a0ca:	51 f1       	breq	.+84     	; 0xa120 <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a0cc:	af 89       	ldd	r26, Y+23	; 0x17
    a0ce:	b8 8d       	ldd	r27, Y+24	; 0x18
    a0d0:	14 96       	adiw	r26, 0x04	; 4
    a0d2:	6d 91       	ld	r22, X+
    a0d4:	7d 91       	ld	r23, X+
    a0d6:	8d 91       	ld	r24, X+
    a0d8:	9c 91       	ld	r25, X
    a0da:	17 97       	sbiw	r26, 0x07	; 7
    a0dc:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a0e0:	dc 01       	movw	r26, r24
    a0e2:	cb 01       	movw	r24, r22
    a0e4:	28 e0       	ldi	r18, 0x08	; 8
    a0e6:	48 e0       	ldi	r20, 0x08	; 8
    a0e8:	6c 81       	ldd	r22, Y+4	; 0x04
    a0ea:	7d 81       	ldd	r23, Y+5	; 0x05
    a0ec:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a0f0:	84 30       	cpi	r24, 0x04	; 4
    a0f2:	b0 f0       	brcs	.+44     	; 0xa120 <collision_detect_level+0x23c>
				{
					s->vy =  0;
    a0f4:	ef 89       	ldd	r30, Y+23	; 0x17
    a0f6:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0f8:	10 82       	st	Z, r1
    a0fa:	11 82       	std	Z+1, r1	; 0x01
    a0fc:	12 82       	std	Z+2, r1	; 0x02
    a0fe:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    a100:	69 85       	ldd	r22, Y+9	; 0x09
    a102:	7a 85       	ldd	r23, Y+10	; 0x0a
    a104:	8b 85       	ldd	r24, Y+11	; 0x0b
    a106:	9c 85       	ldd	r25, Y+12	; 0x0c
    a108:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a10c:	af 89       	ldd	r26, Y+23	; 0x17
    a10e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a110:	18 96       	adiw	r26, 0x08	; 8
    a112:	6d 93       	st	X+, r22
    a114:	7d 93       	st	X+, r23
    a116:	8d 93       	st	X+, r24
    a118:	9c 93       	st	X, r25
    a11a:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    a11c:	b1 e0       	ldi	r27, 0x01	; 1
    a11e:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    a120:	20 e0       	ldi	r18, 0x00	; 0
    a122:	30 e0       	ldi	r19, 0x00	; 0
    a124:	a9 01       	movw	r20, r18
    a126:	ef 89       	ldd	r30, Y+23	; 0x17
    a128:	f8 8d       	ldd	r31, Y+24	; 0x18
    a12a:	60 81       	ld	r22, Z
    a12c:	71 81       	ldd	r23, Z+1	; 0x01
    a12e:	82 81       	ldd	r24, Z+2	; 0x02
    a130:	93 81       	ldd	r25, Z+3	; 0x03
    a132:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    a136:	18 16       	cp	r1, r24
    a138:	0c f0       	brlt	.+2      	; 0xa13c <collision_detect_level+0x258>
    a13a:	91 c0       	rjmp	.+290    	; 0xa25e <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a13c:	6d 85       	ldd	r22, Y+13	; 0x0d
    a13e:	7e 85       	ldd	r23, Y+14	; 0x0e
    a140:	8f 85       	ldd	r24, Y+15	; 0x0f
    a142:	98 89       	ldd	r25, Y+16	; 0x10
    a144:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    a148:	6b 01       	movw	r12, r22
    a14a:	7c 01       	movw	r14, r24
    a14c:	af 89       	ldd	r26, Y+23	; 0x17
    a14e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a150:	18 96       	adiw	r26, 0x08	; 8
    a152:	2d 91       	ld	r18, X+
    a154:	3d 91       	ld	r19, X+
    a156:	4d 91       	ld	r20, X+
    a158:	5c 91       	ld	r21, X
    a15a:	1b 97       	sbiw	r26, 0x0b	; 11
    a15c:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a160:	20 e0       	ldi	r18, 0x00	; 0
    a162:	30 e0       	ldi	r19, 0x00	; 0
    a164:	40 e8       	ldi	r20, 0x80	; 128
    a166:	5f e3       	ldi	r21, 0x3F	; 63
    a168:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    a16c:	20 e0       	ldi	r18, 0x00	; 0
    a16e:	30 e0       	ldi	r19, 0x00	; 0
    a170:	40 e0       	ldi	r20, 0x00	; 0
    a172:	5e e3       	ldi	r21, 0x3E	; 62
    a174:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a178:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a17c:	ab 01       	movw	r20, r22
    a17e:	b3 01       	movw	r22, r6
    a180:	80 91 a5 0f 	lds	r24, 0x0FA5
    a184:	90 91 a6 0f 	lds	r25, 0x0FA6
    a188:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a18c:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    a18e:	ef 89       	ldd	r30, Y+23	; 0x17
    a190:	f8 8d       	ldd	r31, Y+24	; 0x18
    a192:	20 85       	ldd	r18, Z+8	; 0x08
    a194:	31 85       	ldd	r19, Z+9	; 0x09
    a196:	42 85       	ldd	r20, Z+10	; 0x0a
    a198:	53 85       	ldd	r21, Z+11	; 0x0b
    a19a:	c7 01       	movw	r24, r14
    a19c:	b6 01       	movw	r22, r12
    a19e:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a1a2:	20 e0       	ldi	r18, 0x00	; 0
    a1a4:	30 e0       	ldi	r19, 0x00	; 0
    a1a6:	40 e8       	ldi	r20, 0x80	; 128
    a1a8:	5f e3       	ldi	r21, 0x3F	; 63
    a1aa:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    a1ae:	20 e0       	ldi	r18, 0x00	; 0
    a1b0:	30 e0       	ldi	r19, 0x00	; 0
    a1b2:	40 e0       	ldi	r20, 0x00	; 0
    a1b4:	5e e3       	ldi	r21, 0x3E	; 62
    a1b6:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a1ba:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a1be:	ab 01       	movw	r20, r22
    a1c0:	b2 01       	movw	r22, r4
    a1c2:	80 91 a5 0f 	lds	r24, 0x0FA5
    a1c6:	90 91 a6 0f 	lds	r25, 0x0FA6
    a1ca:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a1ce:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a1d0:	80 2f       	mov	r24, r16
    a1d2:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    a1d6:	88 23       	and	r24, r24
    a1d8:	a1 f0       	breq	.+40     	; 0xa202 <collision_detect_level+0x31e>
    a1da:	af 89       	ldd	r26, Y+23	; 0x17
    a1dc:	b8 8d       	ldd	r27, Y+24	; 0x18
    a1de:	14 96       	adiw	r26, 0x04	; 4
    a1e0:	6d 91       	ld	r22, X+
    a1e2:	7d 91       	ld	r23, X+
    a1e4:	8d 91       	ld	r24, X+
    a1e6:	9c 91       	ld	r25, X
    a1e8:	17 97       	sbiw	r26, 0x07	; 7
    a1ea:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a1ee:	dc 01       	movw	r26, r24
    a1f0:	cb 01       	movw	r24, r22
    a1f2:	28 e0       	ldi	r18, 0x08	; 8
    a1f4:	48 e0       	ldi	r20, 0x08	; 8
    a1f6:	6a 81       	ldd	r22, Y+2	; 0x02
    a1f8:	7b 81       	ldd	r23, Y+3	; 0x03
    a1fa:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a1fe:	84 30       	cpi	r24, 0x04	; 4
    a200:	b8 f4       	brcc	.+46     	; 0xa230 <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a202:	8f 2d       	mov	r24, r15
    a204:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a208:	88 23       	and	r24, r24
    a20a:	49 f1       	breq	.+82     	; 0xa25e <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a20c:	ef 89       	ldd	r30, Y+23	; 0x17
    a20e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a210:	64 81       	ldd	r22, Z+4	; 0x04
    a212:	75 81       	ldd	r23, Z+5	; 0x05
    a214:	86 81       	ldd	r24, Z+6	; 0x06
    a216:	97 81       	ldd	r25, Z+7	; 0x07
    a218:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a21c:	dc 01       	movw	r26, r24
    a21e:	cb 01       	movw	r24, r22
    a220:	28 e0       	ldi	r18, 0x08	; 8
    a222:	48 e0       	ldi	r20, 0x08	; 8
    a224:	6c 81       	ldd	r22, Y+4	; 0x04
    a226:	7d 81       	ldd	r23, Y+5	; 0x05
    a228:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a22c:	84 30       	cpi	r24, 0x04	; 4
    a22e:	b8 f0       	brcs	.+46     	; 0xa25e <collision_detect_level+0x37a>
				{
					s->vy =  0;
    a230:	af 89       	ldd	r26, Y+23	; 0x17
    a232:	b8 8d       	ldd	r27, Y+24	; 0x18
    a234:	1d 92       	st	X+, r1
    a236:	1d 92       	st	X+, r1
    a238:	1d 92       	st	X+, r1
    a23a:	1c 92       	st	X, r1
    a23c:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    a23e:	1e 96       	adiw	r26, 0x0e	; 14
    a240:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    a242:	6b 89       	ldd	r22, Y+19	; 0x13
    a244:	7c 89       	ldd	r23, Y+20	; 0x14
    a246:	8d 89       	ldd	r24, Y+21	; 0x15
    a248:	9e 89       	ldd	r25, Y+22	; 0x16
    a24a:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a24e:	ef 89       	ldd	r30, Y+23	; 0x17
    a250:	f8 8d       	ldd	r31, Y+24	; 0x18
    a252:	60 87       	std	Z+8, r22	; 0x08
    a254:	71 87       	std	Z+9, r23	; 0x09
    a256:	82 87       	std	Z+10, r24	; 0x0a
    a258:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    a25a:	f1 e0       	ldi	r31, 0x01	; 1
    a25c:	f9 83       	std	Y+1, r31	; 0x01
    a25e:	2f ef       	ldi	r18, 0xFF	; 255
    a260:	62 1a       	sub	r6, r18
    a262:	72 0a       	sbc	r7, r18
    a264:	3f ef       	ldi	r19, 0xFF	; 255
    a266:	43 1a       	sub	r4, r19
    a268:	53 0a       	sbc	r5, r19
    a26a:	ef ce       	rjmp	.-546    	; 0xa04a <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    a26c:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    a26e:	af 89       	ldd	r26, Y+23	; 0x17
    a270:	b8 8d       	ldd	r27, Y+24	; 0x18
    a272:	1c 96       	adiw	r26, 0x0c	; 12
    a274:	8d 91       	ld	r24, X+
    a276:	9c 91       	ld	r25, X
    a278:	1d 97       	sbiw	r26, 0x0d	; 13
    a27a:	89 2b       	or	r24, r25
    a27c:	09 f4       	brne	.+2      	; 0xa280 <collision_detect_level+0x39c>
    a27e:	54 c1       	rjmp	.+680    	; 0xa528 <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    a280:	18 96       	adiw	r26, 0x08	; 8
    a282:	cd 90       	ld	r12, X+
    a284:	dd 90       	ld	r13, X+
    a286:	ed 90       	ld	r14, X+
    a288:	fc 90       	ld	r15, X
    a28a:	1b 97       	sbiw	r26, 0x0b	; 11
    a28c:	20 e0       	ldi	r18, 0x00	; 0
    a28e:	30 e0       	ldi	r19, 0x00	; 0
    a290:	40 e0       	ldi	r20, 0x00	; 0
    a292:	5e e3       	ldi	r21, 0x3E	; 62
    a294:	c7 01       	movw	r24, r14
    a296:	b6 01       	movw	r22, r12
    a298:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a29c:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a2a0:	2b 01       	movw	r4, r22
    a2a2:	3c 01       	movw	r6, r24
    a2a4:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    a2a6:	20 e0       	ldi	r18, 0x00	; 0
    a2a8:	30 e0       	ldi	r19, 0x00	; 0
    a2aa:	40 ee       	ldi	r20, 0xE0	; 224
    a2ac:	50 e4       	ldi	r21, 0x40	; 64
    a2ae:	c7 01       	movw	r24, r14
    a2b0:	b6 01       	movw	r22, r12
    a2b2:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a2b6:	20 e0       	ldi	r18, 0x00	; 0
    a2b8:	30 e0       	ldi	r19, 0x00	; 0
    a2ba:	40 e0       	ldi	r20, 0x00	; 0
    a2bc:	5e e3       	ldi	r21, 0x3E	; 62
    a2be:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a2c2:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a2c6:	12 01       	movw	r2, r4
    a2c8:	83 e0       	ldi	r24, 0x03	; 3
    a2ca:	22 0c       	add	r2, r2
    a2cc:	33 1c       	adc	r3, r3
    a2ce:	8a 95       	dec	r24
    a2d0:	e1 f7       	brne	.-8      	; 0xa2ca <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a2d2:	fb 01       	movw	r30, r22
    a2d4:	93 e0       	ldi	r25, 0x03	; 3
    a2d6:	ee 0f       	add	r30, r30
    a2d8:	ff 1f       	adc	r31, r31
    a2da:	9a 95       	dec	r25
    a2dc:	e1 f7       	brne	.-8      	; 0xa2d6 <collision_detect_level+0x3f2>
    a2de:	fb 83       	std	Y+3, r31	; 0x03
    a2e0:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a2e2:	ff ef       	ldi	r31, 0xFF	; 255
    a2e4:	8f 1a       	sub	r8, r31
    a2e6:	9f 0a       	sbc	r9, r31
    a2e8:	94 01       	movw	r18, r8
    a2ea:	43 e0       	ldi	r20, 0x03	; 3
    a2ec:	22 0f       	add	r18, r18
    a2ee:	33 1f       	adc	r19, r19
    a2f0:	4a 95       	dec	r20
    a2f2:	e1 f7       	brne	.-8      	; 0xa2ec <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a2f4:	a8 e0       	ldi	r26, 0x08	; 8
    a2f6:	1a 9f       	mul	r17, r26
    a2f8:	a0 01       	movw	r20, r0
    a2fa:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a2fc:	49 01       	movw	r8, r18
    a2fe:	b8 e0       	ldi	r27, 0x08	; 8
    a300:	8b 1a       	sub	r8, r27
    a302:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a304:	6b 01       	movw	r12, r22
    a306:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a308:	b9 01       	movw	r22, r18
    a30a:	80 e0       	ldi	r24, 0x00	; 0
    a30c:	90 e0       	ldi	r25, 0x00	; 0
    a30e:	6c 83       	std	Y+4, r22	; 0x04
    a310:	7d 83       	std	Y+5, r23	; 0x05
    a312:	8e 83       	std	Y+6, r24	; 0x06
    a314:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a316:	ca 01       	movw	r24, r20
    a318:	aa 27       	eor	r26, r26
    a31a:	97 fd       	sbrc	r25, 7
    a31c:	a0 95       	com	r26
    a31e:	ba 2f       	mov	r27, r26
    a320:	89 87       	std	Y+9, r24	; 0x09
    a322:	9a 87       	std	Y+10, r25	; 0x0a
    a324:	ab 87       	std	Y+11, r26	; 0x0b
    a326:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a328:	a1 2c       	mov	r10, r1
    a32a:	b1 2c       	mov	r11, r1
    a32c:	80 2f       	mov	r24, r16
    a32e:	3d 85       	ldd	r19, Y+13	; 0x0d
    a330:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a332:	49 89       	ldd	r20, Y+17	; 0x11
    a334:	84 17       	cp	r24, r20
    a336:	08 f0       	brcs	.+2      	; 0xa33a <collision_detect_level+0x456>
    a338:	f7 c0       	rjmp	.+494    	; 0xa528 <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    a33a:	af 89       	ldd	r26, Y+23	; 0x17
    a33c:	b8 8d       	ldd	r27, Y+24	; 0x18
    a33e:	1c 96       	adiw	r26, 0x0c	; 12
    a340:	8d 91       	ld	r24, X+
    a342:	9c 91       	ld	r25, X
    a344:	1d 97       	sbiw	r26, 0x0d	; 13
    a346:	97 ff       	sbrs	r25, 7
    a348:	57 c0       	rjmp	.+174    	; 0xa3f8 <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    a34a:	a8 01       	movw	r20, r16
    a34c:	68 85       	ldd	r22, Y+8	; 0x08
    a34e:	7a 89       	ldd	r23, Y+18	; 0x12
    a350:	80 91 a5 0f 	lds	r24, 0x0FA5
    a354:	90 91 a6 0f 	lds	r25, 0x0FA6
    a358:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a35c:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    a35e:	a6 01       	movw	r20, r12
    a360:	68 85       	ldd	r22, Y+8	; 0x08
    a362:	7a 89       	ldd	r23, Y+18	; 0x12
    a364:	80 91 a5 0f 	lds	r24, 0x0FA5
    a368:	90 91 a6 0f 	lds	r25, 0x0FA6
    a36c:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a370:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a372:	87 2d       	mov	r24, r7
    a374:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    a378:	88 23       	and	r24, r24
    a37a:	89 f0       	breq	.+34     	; 0xa39e <collision_detect_level+0x4ba>
    a37c:	ef 89       	ldd	r30, Y+23	; 0x17
    a37e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a380:	60 85       	ldd	r22, Z+8	; 0x08
    a382:	71 85       	ldd	r23, Z+9	; 0x09
    a384:	82 85       	ldd	r24, Z+10	; 0x0a
    a386:	93 85       	ldd	r25, Z+11	; 0x0b
    a388:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a38c:	dc 01       	movw	r26, r24
    a38e:	cb 01       	movw	r24, r22
    a390:	28 e0       	ldi	r18, 0x08	; 8
    a392:	48 e0       	ldi	r20, 0x08	; 8
    a394:	b1 01       	movw	r22, r2
    a396:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a39a:	84 30       	cpi	r24, 0x04	; 4
    a39c:	c8 f4       	brcc	.+50     	; 0xa3d0 <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a39e:	8e 2d       	mov	r24, r14
    a3a0:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a3a4:	88 23       	and	r24, r24
    a3a6:	41 f1       	breq	.+80     	; 0xa3f8 <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a3a8:	af 89       	ldd	r26, Y+23	; 0x17
    a3aa:	b8 8d       	ldd	r27, Y+24	; 0x18
    a3ac:	18 96       	adiw	r26, 0x08	; 8
    a3ae:	6d 91       	ld	r22, X+
    a3b0:	7d 91       	ld	r23, X+
    a3b2:	8d 91       	ld	r24, X+
    a3b4:	9c 91       	ld	r25, X
    a3b6:	1b 97       	sbiw	r26, 0x0b	; 11
    a3b8:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a3bc:	dc 01       	movw	r26, r24
    a3be:	cb 01       	movw	r24, r22
    a3c0:	28 e0       	ldi	r18, 0x08	; 8
    a3c2:	48 e0       	ldi	r20, 0x08	; 8
    a3c4:	6a 81       	ldd	r22, Y+2	; 0x02
    a3c6:	7b 81       	ldd	r23, Y+3	; 0x03
    a3c8:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a3cc:	84 30       	cpi	r24, 0x04	; 4
    a3ce:	a0 f0       	brcs	.+40     	; 0xa3f8 <collision_detect_level+0x514>
				{
					s->vx =  0;
    a3d0:	ef 89       	ldd	r30, Y+23	; 0x17
    a3d2:	f8 8d       	ldd	r31, Y+24	; 0x18
    a3d4:	15 86       	std	Z+13, r1	; 0x0d
    a3d6:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    a3d8:	6c 81       	ldd	r22, Y+4	; 0x04
    a3da:	7d 81       	ldd	r23, Y+5	; 0x05
    a3dc:	8e 81       	ldd	r24, Y+6	; 0x06
    a3de:	9f 81       	ldd	r25, Y+7	; 0x07
    a3e0:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a3e4:	af 89       	ldd	r26, Y+23	; 0x17
    a3e6:	b8 8d       	ldd	r27, Y+24	; 0x18
    a3e8:	14 96       	adiw	r26, 0x04	; 4
    a3ea:	6d 93       	st	X+, r22
    a3ec:	7d 93       	st	X+, r23
    a3ee:	8d 93       	st	X+, r24
    a3f0:	9c 93       	st	X, r25
    a3f2:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    a3f4:	b1 e0       	ldi	r27, 0x01	; 1
    a3f6:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    a3f8:	ef 89       	ldd	r30, Y+23	; 0x17
    a3fa:	f8 8d       	ldd	r31, Y+24	; 0x18
    a3fc:	84 85       	ldd	r24, Z+12	; 0x0c
    a3fe:	95 85       	ldd	r25, Z+13	; 0x0d
    a400:	18 16       	cp	r1, r24
    a402:	19 06       	cpc	r1, r25
    a404:	0c f0       	brlt	.+2      	; 0xa408 <collision_detect_level+0x524>
    a406:	89 c0       	rjmp	.+274    	; 0xa51a <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a408:	69 85       	ldd	r22, Y+9	; 0x09
    a40a:	7a 85       	ldd	r23, Y+10	; 0x0a
    a40c:	8b 85       	ldd	r24, Y+11	; 0x0b
    a40e:	9c 85       	ldd	r25, Y+12	; 0x0c
    a410:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    a414:	2b 01       	movw	r4, r22
    a416:	3c 01       	movw	r6, r24
    a418:	af 89       	ldd	r26, Y+23	; 0x17
    a41a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a41c:	14 96       	adiw	r26, 0x04	; 4
    a41e:	2d 91       	ld	r18, X+
    a420:	3d 91       	ld	r19, X+
    a422:	4d 91       	ld	r20, X+
    a424:	5c 91       	ld	r21, X
    a426:	17 97       	sbiw	r26, 0x07	; 7
    a428:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a42c:	20 e0       	ldi	r18, 0x00	; 0
    a42e:	30 e0       	ldi	r19, 0x00	; 0
    a430:	40 e8       	ldi	r20, 0x80	; 128
    a432:	5f e3       	ldi	r21, 0x3F	; 63
    a434:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    a438:	20 e0       	ldi	r18, 0x00	; 0
    a43a:	30 e0       	ldi	r19, 0x00	; 0
    a43c:	40 e0       	ldi	r20, 0x00	; 0
    a43e:	5e e3       	ldi	r21, 0x3E	; 62
    a440:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a444:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a448:	a8 01       	movw	r20, r16
    a44a:	80 91 a5 0f 	lds	r24, 0x0FA5
    a44e:	90 91 a6 0f 	lds	r25, 0x0FA6
    a452:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a456:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a458:	ef 89       	ldd	r30, Y+23	; 0x17
    a45a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a45c:	24 81       	ldd	r18, Z+4	; 0x04
    a45e:	35 81       	ldd	r19, Z+5	; 0x05
    a460:	46 81       	ldd	r20, Z+6	; 0x06
    a462:	57 81       	ldd	r21, Z+7	; 0x07
    a464:	c3 01       	movw	r24, r6
    a466:	b2 01       	movw	r22, r4
    a468:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a46c:	20 e0       	ldi	r18, 0x00	; 0
    a46e:	30 e0       	ldi	r19, 0x00	; 0
    a470:	40 e8       	ldi	r20, 0x80	; 128
    a472:	5f e3       	ldi	r21, 0x3F	; 63
    a474:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    a478:	20 e0       	ldi	r18, 0x00	; 0
    a47a:	30 e0       	ldi	r19, 0x00	; 0
    a47c:	40 e0       	ldi	r20, 0x00	; 0
    a47e:	5e e3       	ldi	r21, 0x3E	; 62
    a480:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a484:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a488:	a6 01       	movw	r20, r12
    a48a:	80 91 a5 0f 	lds	r24, 0x0FA5
    a48e:	90 91 a6 0f 	lds	r25, 0x0FA6
    a492:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <get_level_tile>
    a496:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a498:	8e 2d       	mov	r24, r14
    a49a:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
    a49e:	88 23       	and	r24, r24
    a4a0:	99 f0       	breq	.+38     	; 0xa4c8 <collision_detect_level+0x5e4>
    a4a2:	af 89       	ldd	r26, Y+23	; 0x17
    a4a4:	b8 8d       	ldd	r27, Y+24	; 0x18
    a4a6:	18 96       	adiw	r26, 0x08	; 8
    a4a8:	6d 91       	ld	r22, X+
    a4aa:	7d 91       	ld	r23, X+
    a4ac:	8d 91       	ld	r24, X+
    a4ae:	9c 91       	ld	r25, X
    a4b0:	1b 97       	sbiw	r26, 0x0b	; 11
    a4b2:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a4b6:	dc 01       	movw	r26, r24
    a4b8:	cb 01       	movw	r24, r22
    a4ba:	28 e0       	ldi	r18, 0x08	; 8
    a4bc:	48 e0       	ldi	r20, 0x08	; 8
    a4be:	b1 01       	movw	r22, r2
    a4c0:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a4c4:	84 30       	cpi	r24, 0x04	; 4
    a4c6:	b8 f4       	brcc	.+46     	; 0xa4f6 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a4c8:	87 2d       	mov	r24, r7
    a4ca:	0e 94 f5 4b 	call	0x97ea	; 0x97ea <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a4ce:	88 23       	and	r24, r24
    a4d0:	21 f1       	breq	.+72     	; 0xa51a <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a4d2:	ef 89       	ldd	r30, Y+23	; 0x17
    a4d4:	f8 8d       	ldd	r31, Y+24	; 0x18
    a4d6:	60 85       	ldd	r22, Z+8	; 0x08
    a4d8:	71 85       	ldd	r23, Z+9	; 0x09
    a4da:	82 85       	ldd	r24, Z+10	; 0x0a
    a4dc:	93 85       	ldd	r25, Z+11	; 0x0b
    a4de:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a4e2:	dc 01       	movw	r26, r24
    a4e4:	cb 01       	movw	r24, r22
    a4e6:	28 e0       	ldi	r18, 0x08	; 8
    a4e8:	48 e0       	ldi	r20, 0x08	; 8
    a4ea:	6a 81       	ldd	r22, Y+2	; 0x02
    a4ec:	7b 81       	ldd	r23, Y+3	; 0x03
    a4ee:	0e 94 5e 4f 	call	0x9ebc	; 0x9ebc <pixel_overlap>
    a4f2:	84 30       	cpi	r24, 0x04	; 4
    a4f4:	90 f0       	brcs	.+36     	; 0xa51a <collision_detect_level+0x636>
				{
					s->vx =  0;
    a4f6:	af 89       	ldd	r26, Y+23	; 0x17
    a4f8:	b8 8d       	ldd	r27, Y+24	; 0x18
    a4fa:	1d 96       	adiw	r26, 0x0d	; 13
    a4fc:	1c 92       	st	X, r1
    a4fe:	1e 92       	st	-X, r1
    a500:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a502:	c5 01       	movw	r24, r10
    a504:	b4 01       	movw	r22, r8
    a506:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a50a:	ef 89       	ldd	r30, Y+23	; 0x17
    a50c:	f8 8d       	ldd	r31, Y+24	; 0x18
    a50e:	64 83       	std	Z+4, r22	; 0x04
    a510:	75 83       	std	Z+5, r23	; 0x05
    a512:	86 83       	std	Z+6, r24	; 0x06
    a514:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a516:	f1 e0       	ldi	r31, 0x01	; 1
    a518:	f9 83       	std	Y+1, r31	; 0x01
    a51a:	0f 5f       	subi	r16, 0xFF	; 255
    a51c:	1f 4f       	sbci	r17, 0xFF	; 255
    a51e:	2f ef       	ldi	r18, 0xFF	; 255
    a520:	c2 1a       	sub	r12, r18
    a522:	d2 0a       	sbc	r13, r18
    a524:	03 cf       	rjmp	.-506    	; 0xa32c <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a526:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a528:	89 81       	ldd	r24, Y+1	; 0x01
    a52a:	68 96       	adiw	r28, 0x18	; 24
    a52c:	0f b6       	in	r0, 0x3f	; 63
    a52e:	f8 94       	cli
    a530:	de bf       	out	0x3e, r29	; 62
    a532:	0f be       	out	0x3f, r0	; 63
    a534:	cd bf       	out	0x3d, r28	; 61
    a536:	df 91       	pop	r29
    a538:	cf 91       	pop	r28
    a53a:	1f 91       	pop	r17
    a53c:	0f 91       	pop	r16
    a53e:	ff 90       	pop	r15
    a540:	ef 90       	pop	r14
    a542:	df 90       	pop	r13
    a544:	cf 90       	pop	r12
    a546:	bf 90       	pop	r11
    a548:	af 90       	pop	r10
    a54a:	9f 90       	pop	r9
    a54c:	8f 90       	pop	r8
    a54e:	7f 90       	pop	r7
    a550:	6f 90       	pop	r6
    a552:	5f 90       	pop	r5
    a554:	4f 90       	pop	r4
    a556:	3f 90       	pop	r3
    a558:	2f 90       	pop	r2
    a55a:	08 95       	ret

0000a55c <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a55c:	2f 92       	push	r2
    a55e:	3f 92       	push	r3
    a560:	4f 92       	push	r4
    a562:	5f 92       	push	r5
    a564:	6f 92       	push	r6
    a566:	7f 92       	push	r7
    a568:	8f 92       	push	r8
    a56a:	9f 92       	push	r9
    a56c:	af 92       	push	r10
    a56e:	bf 92       	push	r11
    a570:	cf 92       	push	r12
    a572:	df 92       	push	r13
    a574:	ef 92       	push	r14
    a576:	ff 92       	push	r15
    a578:	0f 93       	push	r16
    a57a:	1f 93       	push	r17
    a57c:	cf 93       	push	r28
    a57e:	df 93       	push	r29
    a580:	cd b7       	in	r28, 0x3d	; 61
    a582:	de b7       	in	r29, 0x3e	; 62
    a584:	2f 97       	sbiw	r28, 0x0f	; 15
    a586:	0f b6       	in	r0, 0x3f	; 63
    a588:	f8 94       	cli
    a58a:	de bf       	out	0x3e, r29	; 62
    a58c:	0f be       	out	0x3f, r0	; 63
    a58e:	cd bf       	out	0x3d, r28	; 61
    a590:	9f ee       	ldi	r25, 0xEF	; 239
    a592:	89 2e       	mov	r8, r25
    a594:	9d e0       	ldi	r25, 0x0D	; 13
    a596:	99 2e       	mov	r9, r25
    a598:	8e ed       	ldi	r24, 0xDE	; 222
    a59a:	9d e0       	ldi	r25, 0x0D	; 13
    a59c:	9f 87       	std	Y+15, r25	; 0x0f
    a59e:	8e 87       	std	Y+14, r24	; 0x0e
    a5a0:	9b e0       	ldi	r25, 0x0B	; 11
    a5a2:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    a5a4:	20 e1       	ldi	r18, 0x10	; 16
    a5a6:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    a5a8:	f4 01       	movw	r30, r8
    a5aa:	80 81       	ld	r24, Z
    a5ac:	88 23       	and	r24, r24
    a5ae:	09 f4       	brne	.+2      	; 0xa5b2 <animate_shot+0x56>
    a5b0:	46 c1       	rjmp	.+652    	; 0xa83e <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    a5b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    a5b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    a5b6:	64 85       	ldd	r22, Z+12	; 0x0c
    a5b8:	75 85       	ldd	r23, Z+13	; 0x0d
    a5ba:	88 27       	eor	r24, r24
    a5bc:	77 fd       	sbrc	r23, 7
    a5be:	80 95       	com	r24
    a5c0:	98 2f       	mov	r25, r24
    a5c2:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    a5c6:	29 e8       	ldi	r18, 0x89	; 137
    a5c8:	38 e8       	ldi	r19, 0x88	; 136
    a5ca:	48 e8       	ldi	r20, 0x88	; 136
    a5cc:	5c e3       	ldi	r21, 0x3C	; 60
    a5ce:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a5d2:	ee 85       	ldd	r30, Y+14	; 0x0e
    a5d4:	ff 85       	ldd	r31, Y+15	; 0x0f
    a5d6:	24 81       	ldd	r18, Z+4	; 0x04
    a5d8:	35 81       	ldd	r19, Z+5	; 0x05
    a5da:	46 81       	ldd	r20, Z+6	; 0x06
    a5dc:	57 81       	ldd	r21, Z+7	; 0x07
    a5de:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a5e2:	2b 01       	movw	r4, r22
    a5e4:	3c 01       	movw	r6, r24
    a5e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    a5e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    a5ea:	64 83       	std	Z+4, r22	; 0x04
    a5ec:	75 83       	std	Z+5, r23	; 0x05
    a5ee:	86 83       	std	Z+6, r24	; 0x06
    a5f0:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    a5f2:	29 e8       	ldi	r18, 0x89	; 137
    a5f4:	38 e8       	ldi	r19, 0x88	; 136
    a5f6:	48 e8       	ldi	r20, 0x88	; 136
    a5f8:	5c e3       	ldi	r21, 0x3C	; 60
    a5fa:	60 81       	ld	r22, Z
    a5fc:	71 81       	ldd	r23, Z+1	; 0x01
    a5fe:	82 81       	ldd	r24, Z+2	; 0x02
    a600:	93 81       	ldd	r25, Z+3	; 0x03
    a602:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a606:	ee 85       	ldd	r30, Y+14	; 0x0e
    a608:	ff 85       	ldd	r31, Y+15	; 0x0f
    a60a:	20 85       	ldd	r18, Z+8	; 0x08
    a60c:	31 85       	ldd	r19, Z+9	; 0x09
    a60e:	42 85       	ldd	r20, Z+10	; 0x0a
    a610:	53 85       	ldd	r21, Z+11	; 0x0b
    a612:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a616:	6b 01       	movw	r12, r22
    a618:	7c 01       	movw	r14, r24
    a61a:	ee 85       	ldd	r30, Y+14	; 0x0e
    a61c:	ff 85       	ldd	r31, Y+15	; 0x0f
    a61e:	60 87       	std	Z+8, r22	; 0x08
    a620:	71 87       	std	Z+9, r23	; 0x09
    a622:	82 87       	std	Z+10, r24	; 0x0a
    a624:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    a626:	60 91 ac 0d 	lds	r22, 0x0DAC
    a62a:	70 91 ad 0d 	lds	r23, 0x0DAD
    a62e:	80 e0       	ldi	r24, 0x00	; 0
    a630:	90 e0       	ldi	r25, 0x00	; 0
    a632:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a636:	9b 01       	movw	r18, r22
    a638:	ac 01       	movw	r20, r24
    a63a:	c7 01       	movw	r24, r14
    a63c:	b6 01       	movw	r22, r12
    a63e:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    a642:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a646:	c6 2e       	mov	r12, r22
    a648:	80 91 aa 0d 	lds	r24, 0x0DAA
    a64c:	90 91 ab 0d 	lds	r25, 0x0DAB
    a650:	bc 01       	movw	r22, r24
    a652:	80 e0       	ldi	r24, 0x00	; 0
    a654:	90 e0       	ldi	r25, 0x00	; 0
    a656:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a65a:	9b 01       	movw	r18, r22
    a65c:	ac 01       	movw	r20, r24
    a65e:	c3 01       	movw	r24, r6
    a660:	b2 01       	movw	r22, r4
    a662:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    a666:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a66a:	01 e0       	ldi	r16, 0x01	; 1
    a66c:	21 e0       	ldi	r18, 0x01	; 1
    a66e:	4c 2d       	mov	r20, r12
    a670:	89 81       	ldd	r24, Y+1	; 0x01
    a672:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a676:	ee 85       	ldd	r30, Y+14	; 0x0e
    a678:	ff 85       	ldd	r31, Y+15	; 0x0f
    a67a:	c4 80       	ldd	r12, Z+4	; 0x04
    a67c:	d5 80       	ldd	r13, Z+5	; 0x05
    a67e:	e6 80       	ldd	r14, Z+6	; 0x06
    a680:	f7 80       	ldd	r15, Z+7	; 0x07
    a682:	60 90 aa 0d 	lds	r6, 0x0DAA
    a686:	70 90 ab 0d 	lds	r7, 0x0DAB
    a68a:	b3 01       	movw	r22, r6
    a68c:	80 e0       	ldi	r24, 0x00	; 0
    a68e:	90 e0       	ldi	r25, 0x00	; 0
    a690:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a694:	9b 01       	movw	r18, r22
    a696:	ac 01       	movw	r20, r24
    a698:	c7 01       	movw	r24, r14
    a69a:	b6 01       	movw	r22, r12
    a69c:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    a6a0:	87 ff       	sbrs	r24, 7
    a6a2:	0f c0       	rjmp	.+30     	; 0xa6c2 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    a6a4:	f4 01       	movw	r30, r8
    a6a6:	10 82       	st	Z, r1
				game.player.active_shots--;
    a6a8:	80 91 d7 0d 	lds	r24, 0x0DD7
    a6ac:	81 50       	subi	r24, 0x01	; 1
    a6ae:	80 93 d7 0d 	sts	0x0DD7, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a6b2:	01 e0       	ldi	r16, 0x01	; 1
    a6b4:	21 e0       	ldi	r18, 0x01	; 1
    a6b6:	40 e0       	ldi	r20, 0x00	; 0
    a6b8:	60 ee       	ldi	r22, 0xE0	; 224
    a6ba:	89 81       	ldd	r24, Y+1	; 0x01
    a6bc:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
    a6c0:	be c0       	rjmp	.+380    	; 0xa83e <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a6c2:	20 e0       	ldi	r18, 0x00	; 0
    a6c4:	30 e0       	ldi	r19, 0x00	; 0
    a6c6:	40 e0       	ldi	r20, 0x00	; 0
    a6c8:	51 e4       	ldi	r21, 0x41	; 65
    a6ca:	c7 01       	movw	r24, r14
    a6cc:	b6 01       	movw	r22, r12
    a6ce:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a6d2:	1b 01       	movw	r2, r22
    a6d4:	2c 01       	movw	r4, r24
    a6d6:	b3 01       	movw	r22, r6
    a6d8:	60 52       	subi	r22, 0x20	; 32
    a6da:	7f 4f       	sbci	r23, 0xFF	; 255
    a6dc:	80 e0       	ldi	r24, 0x00	; 0
    a6de:	90 e0       	ldi	r25, 0x00	; 0
    a6e0:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    a6e4:	9b 01       	movw	r18, r22
    a6e6:	ac 01       	movw	r20, r24
    a6e8:	c2 01       	movw	r24, r4
    a6ea:	b1 01       	movw	r22, r2
    a6ec:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    a6f0:	18 16       	cp	r1, r24
    a6f2:	c4 f2       	brlt	.-80     	; 0xa6a4 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    a6f4:	41 e0       	ldi	r20, 0x01	; 1
    a6f6:	61 e0       	ldi	r22, 0x01	; 1
    a6f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    a6fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    a6fc:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a700:	81 11       	cpse	r24, r1
    a702:	d0 cf       	rjmp	.-96     	; 0xa6a4 <animate_shot+0x148>
    a704:	8b e6       	ldi	r24, 0x6B	; 107
    a706:	28 2e       	mov	r2, r24
    a708:	8e e0       	ldi	r24, 0x0E	; 14
    a70a:	38 2e       	mov	r3, r24
    a70c:	61 2c       	mov	r6, r1
    a70e:	71 2c       	mov	r7, r1
    a710:	24 01       	movw	r4, r8
    a712:	f1 e0       	ldi	r31, 0x01	; 1
    a714:	4f 1a       	sub	r4, r31
    a716:	51 08       	sbc	r5, r1
    a718:	f1 01       	movw	r30, r2
    a71a:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a71c:	80 81       	ld	r24, Z
    a71e:	88 23       	and	r24, r24
    a720:	09 f4       	brne	.+2      	; 0xa724 <animate_shot+0x1c8>
    a722:	82 c0       	rjmp	.+260    	; 0xa828 <animate_shot+0x2cc>
    a724:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    a726:	a0 80       	ld	r10, Z
    a728:	aa 0c       	add	r10, r10
    a72a:	aa 0c       	add	r10, r10
    a72c:	aa 0c       	add	r10, r10
    a72e:	31 97       	sbiw	r30, 0x01	; 1
    a730:	c0 80       	ld	r12, Z
    a732:	cc 0c       	add	r12, r12
    a734:	cc 0c       	add	r12, r12
    a736:	cc 0c       	add	r12, r12
    a738:	3a 97       	sbiw	r30, 0x0a	; 10
    a73a:	60 81       	ld	r22, Z
    a73c:	71 81       	ldd	r23, Z+1	; 0x01
    a73e:	82 81       	ldd	r24, Z+2	; 0x02
    a740:	93 81       	ldd	r25, Z+3	; 0x03
    a742:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a746:	6a 83       	std	Y+2, r22	; 0x02
    a748:	7b 83       	std	Y+3, r23	; 0x03
    a74a:	8c 83       	std	Y+4, r24	; 0x04
    a74c:	9d 83       	std	Y+5, r25	; 0x05
    a74e:	f1 01       	movw	r30, r2
    a750:	73 97       	sbiw	r30, 0x13	; 19
    a752:	60 81       	ld	r22, Z
    a754:	71 81       	ldd	r23, Z+1	; 0x01
    a756:	82 81       	ldd	r24, Z+2	; 0x02
    a758:	93 81       	ldd	r25, Z+3	; 0x03
    a75a:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a75e:	6e 83       	std	Y+6, r22	; 0x06
    a760:	7f 83       	std	Y+7, r23	; 0x07
    a762:	88 87       	std	Y+8, r24	; 0x08
    a764:	99 87       	std	Y+9, r25	; 0x09
    a766:	ee 85       	ldd	r30, Y+14	; 0x0e
    a768:	ff 85       	ldd	r31, Y+15	; 0x0f
    a76a:	60 85       	ldd	r22, Z+8	; 0x08
    a76c:	71 85       	ldd	r23, Z+9	; 0x09
    a76e:	82 85       	ldd	r24, Z+10	; 0x0a
    a770:	93 85       	ldd	r25, Z+11	; 0x0b
    a772:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a776:	6a 87       	std	Y+10, r22	; 0x0a
    a778:	7b 87       	std	Y+11, r23	; 0x0b
    a77a:	8c 87       	std	Y+12, r24	; 0x0c
    a77c:	9d 87       	std	Y+13, r25	; 0x0d
    a77e:	ee 85       	ldd	r30, Y+14	; 0x0e
    a780:	ff 85       	ldd	r31, Y+15	; 0x0f
    a782:	64 81       	ldd	r22, Z+4	; 0x04
    a784:	75 81       	ldd	r23, Z+5	; 0x05
    a786:	86 81       	ldd	r24, Z+6	; 0x06
    a788:	97 81       	ldd	r25, Z+7	; 0x07
    a78a:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    a78e:	dc 01       	movw	r26, r24
    a790:	cb 01       	movw	r24, r22
    a792:	ea 80       	ldd	r14, Y+2	; 0x02
    a794:	fb 80       	ldd	r15, Y+3	; 0x03
    a796:	0e 81       	ldd	r16, Y+6	; 0x06
    a798:	1f 81       	ldd	r17, Y+7	; 0x07
    a79a:	28 e0       	ldi	r18, 0x08	; 8
    a79c:	48 e0       	ldi	r20, 0x08	; 8
    a79e:	6a 85       	ldd	r22, Y+10	; 0x0a
    a7a0:	7b 85       	ldd	r23, Y+11	; 0x0b
    a7a2:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a7a6:	88 23       	and	r24, r24
    a7a8:	09 f4       	brne	.+2      	; 0xa7ac <animate_shot+0x250>
    a7aa:	3e c0       	rjmp	.+124    	; 0xa828 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    a7ac:	41 e0       	ldi	r20, 0x01	; 1
    a7ae:	6f ef       	ldi	r22, 0xFF	; 255
    a7b0:	84 e0       	ldi	r24, 0x04	; 4
    a7b2:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    a7b6:	f1 01       	movw	r30, r2
    a7b8:	80 81       	ld	r24, Z
    a7ba:	f2 01       	movw	r30, r4
    a7bc:	90 81       	ld	r25, Z
    a7be:	89 1b       	sub	r24, r25
    a7c0:	f1 01       	movw	r30, r2
    a7c2:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    a7c4:	18 16       	cp	r1, r24
    a7c6:	14 f1       	brlt	.+68     	; 0xa80c <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    a7c8:	41 e0       	ldi	r20, 0x01	; 1
    a7ca:	6f ef       	ldi	r22, 0xFF	; 255
    a7cc:	86 e0       	ldi	r24, 0x06	; 6
    a7ce:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    a7d2:	f2 e4       	ldi	r31, 0x42	; 66
    a7d4:	f6 9d       	mul	r31, r6
    a7d6:	c0 01       	movw	r24, r0
    a7d8:	f7 9d       	mul	r31, r7
    a7da:	90 0d       	add	r25, r0
    a7dc:	11 24       	eor	r1, r1
    a7de:	8a 55       	subi	r24, 0x5A	; 90
    a7e0:	92 4f       	sbci	r25, 0xF2	; 242
    a7e2:	fc 01       	movw	r30, r24
    a7e4:	e2 54       	subi	r30, 0x42	; 66
    a7e6:	ff 4f       	sbci	r31, 0xFF	; 255
    a7e8:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    a7ea:	31 97       	sbiw	r30, 0x01	; 1
    a7ec:	10 82       	st	Z, r1
							game.active_enemies--;
    a7ee:	80 91 c5 0d 	lds	r24, 0x0DC5
    a7f2:	81 50       	subi	r24, 0x01	; 1
    a7f4:	80 93 c5 0d 	sts	0x0DC5, r24
							game.level_score += KILL_SCORE;
    a7f8:	80 91 b0 0d 	lds	r24, 0x0DB0
    a7fc:	90 91 b1 0d 	lds	r25, 0x0DB1
    a800:	0a 96       	adiw	r24, 0x0a	; 10
    a802:	90 93 b1 0d 	sts	0x0DB1, r25
    a806:	80 93 b0 0d 	sts	0x0DB0, r24
							break;
    a80a:	19 c0       	rjmp	.+50     	; 0xa83e <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    a80c:	f4 01       	movw	r30, r8
    a80e:	10 82       	st	Z, r1
						game.player.active_shots--;
    a810:	80 91 d7 0d 	lds	r24, 0x0DD7
    a814:	81 50       	subi	r24, 0x01	; 1
    a816:	80 93 d7 0d 	sts	0x0DD7, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a81a:	01 e0       	ldi	r16, 0x01	; 1
    a81c:	21 e0       	ldi	r18, 0x01	; 1
    a81e:	40 e0       	ldi	r20, 0x00	; 0
    a820:	60 ee       	ldi	r22, 0xE0	; 224
    a822:	89 81       	ldd	r24, Y+1	; 0x01
    a824:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
    a828:	ff ef       	ldi	r31, 0xFF	; 255
    a82a:	6f 1a       	sub	r6, r31
    a82c:	7f 0a       	sbc	r7, r31
    a82e:	22 e4       	ldi	r18, 0x42	; 66
    a830:	22 0e       	add	r2, r18
    a832:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    a834:	85 e0       	ldi	r24, 0x05	; 5
    a836:	68 16       	cp	r6, r24
    a838:	71 04       	cpc	r7, r1
    a83a:	09 f0       	breq	.+2      	; 0xa83e <animate_shot+0x2e2>
    a83c:	6d cf       	rjmp	.-294    	; 0xa718 <animate_shot+0x1bc>
    a83e:	9a e1       	ldi	r25, 0x1A	; 26
    a840:	89 0e       	add	r8, r25
    a842:	91 1c       	adc	r9, r1
    a844:	e9 81       	ldd	r30, Y+1	; 0x01
    a846:	ef 5f       	subi	r30, 0xFF	; 255
    a848:	e9 83       	std	Y+1, r30	; 0x01
    a84a:	8e 85       	ldd	r24, Y+14	; 0x0e
    a84c:	9f 85       	ldd	r25, Y+15	; 0x0f
    a84e:	4a 96       	adiw	r24, 0x1a	; 26
    a850:	9f 87       	std	Y+15, r25	; 0x0f
    a852:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a854:	ee 30       	cpi	r30, 0x0E	; 14
    a856:	09 f0       	breq	.+2      	; 0xa85a <animate_shot+0x2fe>
    a858:	a7 ce       	rjmp	.-690    	; 0xa5a8 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    a85a:	2f 96       	adiw	r28, 0x0f	; 15
    a85c:	0f b6       	in	r0, 0x3f	; 63
    a85e:	f8 94       	cli
    a860:	de bf       	out	0x3e, r29	; 62
    a862:	0f be       	out	0x3f, r0	; 63
    a864:	cd bf       	out	0x3d, r28	; 61
    a866:	df 91       	pop	r29
    a868:	cf 91       	pop	r28
    a86a:	1f 91       	pop	r17
    a86c:	0f 91       	pop	r16
    a86e:	ff 90       	pop	r15
    a870:	ef 90       	pop	r14
    a872:	df 90       	pop	r13
    a874:	cf 90       	pop	r12
    a876:	bf 90       	pop	r11
    a878:	af 90       	pop	r10
    a87a:	9f 90       	pop	r9
    a87c:	8f 90       	pop	r8
    a87e:	7f 90       	pop	r7
    a880:	6f 90       	pop	r6
    a882:	5f 90       	pop	r5
    a884:	4f 90       	pop	r4
    a886:	3f 90       	pop	r3
    a888:	2f 90       	pop	r2
    a88a:	08 95       	ret

0000a88c <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    a88c:	7f 92       	push	r7
    a88e:	8f 92       	push	r8
    a890:	9f 92       	push	r9
    a892:	af 92       	push	r10
    a894:	bf 92       	push	r11
    a896:	cf 92       	push	r12
    a898:	df 92       	push	r13
    a89a:	ef 92       	push	r14
    a89c:	ff 92       	push	r15
    a89e:	0f 93       	push	r16
    a8a0:	1f 93       	push	r17
    a8a2:	cf 93       	push	r28
    a8a4:	df 93       	push	r29
    a8a6:	1f 92       	push	r1
    a8a8:	cd b7       	in	r28, 0x3d	; 61
    a8aa:	de b7       	in	r29, 0x3e	; 62
    a8ac:	6c 01       	movw	r12, r24
    a8ae:	7b 01       	movw	r14, r22
    a8b0:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    a8b2:	cb 01       	movw	r24, r22
    a8b4:	29 83       	std	Y+1, r18	; 0x01
    a8b6:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    a8ba:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    a8bc:	29 81       	ldd	r18, Y+1	; 0x01
    a8be:	20 9f       	mul	r18, r16
    a8c0:	50 01       	movw	r10, r0
    a8c2:	11 24       	eor	r1, r1
    a8c4:	10 e0       	ldi	r17, 0x00	; 0
    a8c6:	81 2f       	mov	r24, r17
    a8c8:	90 e0       	ldi	r25, 0x00	; 0
    a8ca:	8a 15       	cp	r24, r10
    a8cc:	9b 05       	cpc	r25, r11
    a8ce:	54 f4       	brge	.+20     	; 0xa8e4 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    a8d0:	40 e0       	ldi	r20, 0x00	; 0
    a8d2:	b4 01       	movw	r22, r8
    a8d4:	81 2f       	mov	r24, r17
    a8d6:	87 0d       	add	r24, r7
    a8d8:	29 83       	std	Y+1, r18	; 0x01
    a8da:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    a8de:	1f 5f       	subi	r17, 0xFF	; 255
    a8e0:	29 81       	ldd	r18, Y+1	; 0x01
    a8e2:	f1 cf       	rjmp	.-30     	; 0xa8c6 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    a8e4:	f7 01       	movw	r30, r14
    a8e6:	84 81       	ldd	r24, Z+4	; 0x04
    a8e8:	88 23       	and	r24, r24
    a8ea:	51 f0       	breq	.+20     	; 0xa900 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    a8ec:	f6 01       	movw	r30, r12
    a8ee:	80 81       	ld	r24, Z
    a8f0:	90 e1       	ldi	r25, 0x10	; 16
    a8f2:	98 27       	eor	r25, r24
    a8f4:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    a8f6:	40 e0       	ldi	r20, 0x00	; 0
    a8f8:	60 ee       	ldi	r22, 0xE0	; 224
    a8fa:	87 2d       	mov	r24, r7
    a8fc:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	}
	return anim->looped;
}
    a900:	f7 01       	movw	r30, r14
    a902:	84 81       	ldd	r24, Z+4	; 0x04
    a904:	0f 90       	pop	r0
    a906:	df 91       	pop	r29
    a908:	cf 91       	pop	r28
    a90a:	1f 91       	pop	r17
    a90c:	0f 91       	pop	r16
    a90e:	ff 90       	pop	r15
    a910:	ef 90       	pop	r14
    a912:	df 90       	pop	r13
    a914:	cf 90       	pop	r12
    a916:	bf 90       	pop	r11
    a918:	af 90       	pop	r10
    a91a:	9f 90       	pop	r9
    a91c:	8f 90       	pop	r8
    a91e:	7f 90       	pop	r7
    a920:	08 95       	ret

0000a922 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    a922:	8f 92       	push	r8
    a924:	9f 92       	push	r9
    a926:	af 92       	push	r10
    a928:	bf 92       	push	r11
    a92a:	ff 92       	push	r15
    a92c:	0f 93       	push	r16
    a92e:	1f 93       	push	r17
    a930:	cf 93       	push	r28
    a932:	df 93       	push	r29
    a934:	ec 01       	movw	r28, r24
    a936:	f6 2e       	mov	r15, r22
    a938:	14 2f       	mov	r17, r20
    a93a:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a93c:	6e 85       	ldd	r22, Y+14	; 0x0e
    a93e:	70 e0       	ldi	r23, 0x00	; 0
    a940:	80 e0       	ldi	r24, 0x00	; 0
    a942:	90 e0       	ldi	r25, 0x00	; 0
    a944:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    a948:	29 e8       	ldi	r18, 0x89	; 137
    a94a:	38 e8       	ldi	r19, 0x88	; 136
    a94c:	48 e8       	ldi	r20, 0x88	; 136
    a94e:	5c e3       	ldi	r21, 0x3C	; 60
    a950:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a954:	28 81       	ld	r18, Y
    a956:	39 81       	ldd	r19, Y+1	; 0x01
    a958:	4a 81       	ldd	r20, Y+2	; 0x02
    a95a:	5b 81       	ldd	r21, Y+3	; 0x03
    a95c:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a960:	4b 01       	movw	r8, r22
    a962:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a964:	20 e0       	ldi	r18, 0x00	; 0
    a966:	30 e0       	ldi	r19, 0x00	; 0
    a968:	40 ef       	ldi	r20, 0xF0	; 240
    a96a:	52 e4       	ldi	r21, 0x42	; 66
    a96c:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    a970:	18 16       	cp	r1, r24
    a972:	2c f0       	brlt	.+10     	; 0xa97e <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a974:	88 82       	st	Y, r8
    a976:	99 82       	std	Y+1, r9	; 0x01
    a978:	aa 82       	std	Y+2, r10	; 0x02
    a97a:	bb 82       	std	Y+3, r11	; 0x03
    a97c:	08 c0       	rjmp	.+16     	; 0xa98e <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a97e:	80 e0       	ldi	r24, 0x00	; 0
    a980:	90 e0       	ldi	r25, 0x00	; 0
    a982:	a0 ef       	ldi	r26, 0xF0	; 240
    a984:	b2 e4       	ldi	r27, 0x42	; 66
    a986:	88 83       	st	Y, r24
    a988:	99 83       	std	Y+1, r25	; 0x01
    a98a:	aa 83       	std	Y+2, r26	; 0x02
    a98c:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    a98e:	6c 85       	ldd	r22, Y+12	; 0x0c
    a990:	7d 85       	ldd	r23, Y+13	; 0x0d
    a992:	88 27       	eor	r24, r24
    a994:	77 fd       	sbrc	r23, 7
    a996:	80 95       	com	r24
    a998:	98 2f       	mov	r25, r24
    a99a:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    a99e:	29 e8       	ldi	r18, 0x89	; 137
    a9a0:	38 e8       	ldi	r19, 0x88	; 136
    a9a2:	48 e8       	ldi	r20, 0x88	; 136
    a9a4:	5c e3       	ldi	r21, 0x3C	; 60
    a9a6:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a9aa:	9b 01       	movw	r18, r22
    a9ac:	ac 01       	movw	r20, r24
    a9ae:	6c 81       	ldd	r22, Y+4	; 0x04
    a9b0:	7d 81       	ldd	r23, Y+5	; 0x05
    a9b2:	8e 81       	ldd	r24, Y+6	; 0x06
    a9b4:	9f 81       	ldd	r25, Y+7	; 0x07
    a9b6:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a9ba:	6c 83       	std	Y+4, r22	; 0x04
    a9bc:	7d 83       	std	Y+5, r23	; 0x05
    a9be:	8e 83       	std	Y+6, r24	; 0x06
    a9c0:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    a9c2:	29 e8       	ldi	r18, 0x89	; 137
    a9c4:	38 e8       	ldi	r19, 0x88	; 136
    a9c6:	48 e8       	ldi	r20, 0x88	; 136
    a9c8:	5c e3       	ldi	r21, 0x3C	; 60
    a9ca:	68 81       	ld	r22, Y
    a9cc:	79 81       	ldd	r23, Y+1	; 0x01
    a9ce:	8a 81       	ldd	r24, Y+2	; 0x02
    a9d0:	9b 81       	ldd	r25, Y+3	; 0x03
    a9d2:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    a9d6:	9b 01       	movw	r18, r22
    a9d8:	ac 01       	movw	r20, r24
    a9da:	68 85       	ldd	r22, Y+8	; 0x08
    a9dc:	79 85       	ldd	r23, Y+9	; 0x09
    a9de:	8a 85       	ldd	r24, Y+10	; 0x0a
    a9e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    a9e2:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    a9e6:	68 87       	std	Y+8, r22	; 0x08
    a9e8:	79 87       	std	Y+9, r23	; 0x09
    a9ea:	8a 87       	std	Y+10, r24	; 0x0a
    a9ec:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    a9ee:	40 2f       	mov	r20, r16
    a9f0:	61 2f       	mov	r22, r17
    a9f2:	ce 01       	movw	r24, r28
    a9f4:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    a9f8:	e0 91 ac 0d 	lds	r30, 0x0DAC
    a9fc:	f0 91 ad 0d 	lds	r31, 0x0DAD
    aa00:	bf 01       	movw	r22, r30
    aa02:	80 e0       	ldi	r24, 0x00	; 0
    aa04:	90 e0       	ldi	r25, 0x00	; 0
    aa06:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    aa0a:	9b 01       	movw	r18, r22
    aa0c:	ac 01       	movw	r20, r24
    aa0e:	68 85       	ldd	r22, Y+8	; 0x08
    aa10:	79 85       	ldd	r23, Y+9	; 0x09
    aa12:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa14:	9b 85       	ldd	r25, Y+11	; 0x0b
    aa16:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    aa1a:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    aa1e:	b6 2e       	mov	r11, r22
    aa20:	e0 91 aa 0d 	lds	r30, 0x0DAA
    aa24:	f0 91 ab 0d 	lds	r31, 0x0DAB
    aa28:	bf 01       	movw	r22, r30
    aa2a:	80 e0       	ldi	r24, 0x00	; 0
    aa2c:	90 e0       	ldi	r25, 0x00	; 0
    aa2e:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    aa32:	9b 01       	movw	r18, r22
    aa34:	ac 01       	movw	r20, r24
    aa36:	6c 81       	ldd	r22, Y+4	; 0x04
    aa38:	7d 81       	ldd	r23, Y+5	; 0x05
    aa3a:	8e 81       	ldd	r24, Y+6	; 0x06
    aa3c:	9f 81       	ldd	r25, Y+7	; 0x07
    aa3e:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    aa42:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    aa46:	21 2f       	mov	r18, r17
    aa48:	4b 2d       	mov	r20, r11
    aa4a:	8f 2d       	mov	r24, r15
    aa4c:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
}
    aa50:	df 91       	pop	r29
    aa52:	cf 91       	pop	r28
    aa54:	1f 91       	pop	r17
    aa56:	0f 91       	pop	r16
    aa58:	ff 90       	pop	r15
    aa5a:	bf 90       	pop	r11
    aa5c:	af 90       	pop	r10
    aa5e:	9f 90       	pop	r9
    aa60:	8f 90       	pop	r8
    aa62:	08 95       	ret

0000aa64 <animate_player>:

void animate_player()
{
    aa64:	0f 93       	push	r16
    aa66:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    aa68:	80 91 d8 0d 	lds	r24, 0x0DD8
    aa6c:	84 ff       	sbrs	r24, 4
    aa6e:	38 c0       	rjmp	.+112    	; 0xaae0 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    aa70:	60 91 ac 0d 	lds	r22, 0x0DAC
    aa74:	70 91 ad 0d 	lds	r23, 0x0DAD
    aa78:	80 e0       	ldi	r24, 0x00	; 0
    aa7a:	90 e0       	ldi	r25, 0x00	; 0
    aa7c:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    aa80:	9b 01       	movw	r18, r22
    aa82:	ac 01       	movw	r20, r24
    aa84:	60 91 d0 0d 	lds	r22, 0x0DD0
    aa88:	70 91 d1 0d 	lds	r23, 0x0DD1
    aa8c:	80 91 d2 0d 	lds	r24, 0x0DD2
    aa90:	90 91 d3 0d 	lds	r25, 0x0DD3
    aa94:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    aa98:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    aa9c:	c6 2f       	mov	r28, r22
    aa9e:	60 91 aa 0d 	lds	r22, 0x0DAA
    aaa2:	70 91 ab 0d 	lds	r23, 0x0DAB
    aaa6:	80 e0       	ldi	r24, 0x00	; 0
    aaa8:	90 e0       	ldi	r25, 0x00	; 0
    aaaa:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    aaae:	9b 01       	movw	r18, r22
    aab0:	ac 01       	movw	r20, r24
    aab2:	60 91 cc 0d 	lds	r22, 0x0DCC
    aab6:	70 91 cd 0d 	lds	r23, 0x0DCD
    aaba:	80 91 ce 0d 	lds	r24, 0x0DCE
    aabe:	90 91 cf 0d 	lds	r25, 0x0DCF
    aac2:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    aac6:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    aaca:	00 91 dc 0d 	lds	r16, 0x0DDC
    aace:	20 91 db 0d 	lds	r18, 0x0DDB
    aad2:	4c 2f       	mov	r20, r28
    aad4:	80 e0       	ldi	r24, 0x00	; 0
    aad6:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    aada:	cf 91       	pop	r28
    aadc:	0f 91       	pop	r16
    aade:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    aae0:	20 91 dc 0d 	lds	r18, 0x0DDC
    aae4:	40 91 db 0d 	lds	r20, 0x0DDB
    aae8:	60 e0       	ldi	r22, 0x00	; 0
    aaea:	88 ec       	ldi	r24, 0xC8	; 200
    aaec:	9d e0       	ldi	r25, 0x0D	; 13
}
    aaee:	cf 91       	pop	r28
    aaf0:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    aaf2:	0c 94 91 54 	jmp	0xa922	; 0xa922 <animate_sprite>

0000aaf6 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    aaf6:	1f 93       	push	r17
    aaf8:	cf 93       	push	r28
    aafa:	df 93       	push	r29
    aafc:	ec 01       	movw	r28, r24
    aafe:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    ab00:	98 89       	ldd	r25, Y+16	; 0x10
    ab02:	89 2f       	mov	r24, r25
    ab04:	88 70       	andi	r24, 0x08	; 8
    ab06:	93 ff       	sbrs	r25, 3
    ab08:	1e c0       	rjmp	.+60     	; 0xab46 <update_spider_enemy+0x50>
    ab0a:	2d 89       	ldd	r18, Y+21	; 0x15
    ab0c:	20 38       	cpi	r18, 0x80	; 128
    ab0e:	d9 f4       	brne	.+54     	; 0xab46 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    ab10:	81 e0       	ldi	r24, 0x01	; 1
    ab12:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    ab14:	80 e0       	ldi	r24, 0x00	; 0
    ab16:	90 e0       	ldi	r25, 0x00	; 0
    ab18:	a8 ec       	ldi	r26, 0xC8	; 200
    ab1a:	b2 ec       	ldi	r27, 0xC2	; 194
    ab1c:	88 83       	st	Y, r24
    ab1e:	99 83       	std	Y+1, r25	; 0x01
    ab20:	aa 83       	std	Y+2, r26	; 0x02
    ab22:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    ab24:	8f ef       	ldi	r24, 0xFF	; 255
    ab26:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    ab28:	8c e3       	ldi	r24, 0x3C	; 60
    ab2a:	90 e0       	ldi	r25, 0x00	; 0
    ab2c:	9d 87       	std	Y+13, r25	; 0x0d
    ab2e:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    ab30:	89 89       	ldd	r24, Y+17	; 0x11
    ab32:	81 11       	cpse	r24, r1
    ab34:	04 c0       	rjmp	.+8      	; 0xab3e <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    ab36:	84 ec       	ldi	r24, 0xC4	; 196
    ab38:	9f ef       	ldi	r25, 0xFF	; 255
    ab3a:	9d 87       	std	Y+13, r25	; 0x0d
    ab3c:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    ab3e:	40 e0       	ldi	r20, 0x00	; 0
    ab40:	60 e5       	ldi	r22, 0x50	; 80
    ab42:	73 e3       	ldi	r23, 0x33	; 51
    ab44:	1a c0       	rjmp	.+52     	; 0xab7a <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    ab46:	90 ff       	sbrs	r25, 0
    ab48:	10 c0       	rjmp	.+32     	; 0xab6a <update_spider_enemy+0x74>
    ab4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    ab4c:	91 11       	cpse	r25, r1
    ab4e:	0d c0       	rjmp	.+26     	; 0xab6a <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    ab50:	88 e0       	ldi	r24, 0x08	; 8
    ab52:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    ab54:	1d 86       	std	Y+13, r1	; 0x0d
    ab56:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    ab58:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    ab5a:	89 89       	ldd	r24, Y+17	; 0x11
    ab5c:	81 11       	cpse	r24, r1
    ab5e:	03 c0       	rjmp	.+6      	; 0xab66 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    ab60:	81 e0       	ldi	r24, 0x01	; 1
    ab62:	89 8b       	std	Y+17, r24	; 0x11
    ab64:	0d c0       	rjmp	.+26     	; 0xab80 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    ab66:	19 8a       	std	Y+17, r1	; 0x11
    ab68:	0b c0       	rjmp	.+22     	; 0xab80 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    ab6a:	88 23       	and	r24, r24
    ab6c:	49 f0       	breq	.+18     	; 0xab80 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ab6e:	ce 01       	movw	r24, r28
    ab70:	c2 96       	adiw	r24, 0x32	; 50
    ab72:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    ab76:	40 e0       	ldi	r20, 0x00	; 0
    ab78:	bc 01       	movw	r22, r24
    ab7a:	81 2f       	mov	r24, r17
    ab7c:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	}
	e->frame_count++;
    ab80:	8d 89       	ldd	r24, Y+21	; 0x15
    ab82:	8f 5f       	subi	r24, 0xFF	; 255
    ab84:	8d 8b       	std	Y+21, r24	; 0x15
}
    ab86:	df 91       	pop	r29
    ab88:	cf 91       	pop	r28
    ab8a:	1f 91       	pop	r17
    ab8c:	08 95       	ret

0000ab8e <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    ab8e:	cf 93       	push	r28
    ab90:	fc 01       	movw	r30, r24
    ab92:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    ab94:	84 e1       	ldi	r24, 0x14	; 20
    ab96:	90 e0       	ldi	r25, 0x00	; 0
    ab98:	95 87       	std	Z+13, r25	; 0x0d
    ab9a:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    ab9c:	10 82       	st	Z, r1
    ab9e:	11 82       	std	Z+1, r1	; 0x01
    aba0:	12 82       	std	Z+2, r1	; 0x02
    aba2:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    aba4:	cf 01       	movw	r24, r30
    aba6:	c2 96       	adiw	r24, 0x32	; 50
    aba8:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    abac:	40 e0       	ldi	r20, 0x00	; 0
    abae:	bc 01       	movw	r22, r24
    abb0:	8c 2f       	mov	r24, r28
}
    abb2:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    abb4:	0c 94 c4 47 	jmp	0x8f88	; 0x8f88 <LBMapSprite>

0000abb8 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    abb8:	cf 93       	push	r28
    abba:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    abbc:	42 96       	adiw	r24, 0x12	; 18
    abbe:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    abc2:	40 e0       	ldi	r20, 0x00	; 0
    abc4:	bc 01       	movw	r22, r24
    abc6:	8c 2f       	mov	r24, r28
}
    abc8:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    abca:	0c 94 c4 47 	jmp	0x8f88	; 0x8f88 <LBMapSprite>

0000abce <update_enemies>:
}

void update_enemies()
{
    abce:	ef 92       	push	r14
    abd0:	ff 92       	push	r15
    abd2:	0f 93       	push	r16
    abd4:	1f 93       	push	r17
    abd6:	cf 93       	push	r28
    abd8:	df 93       	push	r29
    abda:	c7 e6       	ldi	r28, 0x67	; 103
    abdc:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    abde:	16 e0       	ldi	r17, 0x06	; 6
    abe0:	ce 01       	movw	r24, r28
    abe2:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    abe4:	fc 01       	movw	r30, r24
    abe6:	20 81       	ld	r18, Z
    abe8:	ae 01       	movw	r20, r28
    abea:	41 50       	subi	r20, 0x01	; 1
    abec:	51 09       	sbc	r21, r1
    abee:	7a 01       	movw	r14, r20
    abf0:	24 ff       	sbrs	r18, 4
    abf2:	0a c0       	rjmp	.+20     	; 0xac08 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    abf4:	08 81       	ld	r16, Y
    abf6:	fa 01       	movw	r30, r20
    abf8:	20 81       	ld	r18, Z
    abfa:	41 2f       	mov	r20, r17
    abfc:	be 01       	movw	r22, r28
    abfe:	69 5d       	subi	r22, 0xD9	; 217
    ac00:	7f 4f       	sbci	r23, 0xFF	; 255
    ac02:	0e 94 46 54 	call	0xa88c	; 0xa88c <map_explosion>
    ac06:	15 c0       	rjmp	.+42     	; 0xac32 <update_enemies+0x64>
    ac08:	fe 01       	movw	r30, r28
    ac0a:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    ac0c:	80 81       	ld	r24, Z
    ac0e:	88 23       	and	r24, r24
    ac10:	81 f0       	breq	.+32     	; 0xac32 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    ac12:	89 81       	ldd	r24, Y+1	; 0x01
    ac14:	88 23       	and	r24, r24
    ac16:	41 f0       	breq	.+16     	; 0xac28 <update_enemies+0x5a>
    ac18:	81 30       	cpi	r24, 0x01	; 1
    ac1a:	59 f4       	brne	.+22     	; 0xac32 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    ac1c:	61 2f       	mov	r22, r17
    ac1e:	ce 01       	movw	r24, r28
    ac20:	43 97       	sbiw	r24, 0x13	; 19
    ac22:	0e 94 c7 55 	call	0xab8e	; 0xab8e <update_shark_enemy>
    ac26:	05 c0       	rjmp	.+10     	; 0xac32 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    ac28:	61 2f       	mov	r22, r17
    ac2a:	ce 01       	movw	r24, r28
    ac2c:	43 97       	sbiw	r24, 0x13	; 19
    ac2e:	0e 94 7b 55 	call	0xaaf6	; 0xaaf6 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    ac32:	f7 01       	movw	r30, r14
    ac34:	90 81       	ld	r25, Z
    ac36:	88 81       	ld	r24, Y
    ac38:	98 9f       	mul	r25, r24
    ac3a:	10 0d       	add	r17, r0
    ac3c:	11 24       	eor	r1, r1
    ac3e:	ce 5b       	subi	r28, 0xBE	; 190
    ac40:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ac42:	ff e0       	ldi	r31, 0x0F	; 15
    ac44:	c1 3b       	cpi	r28, 0xB1	; 177
    ac46:	df 07       	cpc	r29, r31
    ac48:	59 f6       	brne	.-106    	; 0xabe0 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    ac4a:	df 91       	pop	r29
    ac4c:	cf 91       	pop	r28
    ac4e:	1f 91       	pop	r17
    ac50:	0f 91       	pop	r16
    ac52:	ff 90       	pop	r15
    ac54:	ef 90       	pop	r14
    ac56:	08 95       	ret

0000ac58 <update_enemy_shots>:

void update_enemy_shots()
{
    ac58:	8f 92       	push	r8
    ac5a:	9f 92       	push	r9
    ac5c:	af 92       	push	r10
    ac5e:	bf 92       	push	r11
    ac60:	cf 92       	push	r12
    ac62:	df 92       	push	r13
    ac64:	ef 92       	push	r14
    ac66:	ff 92       	push	r15
    ac68:	0f 93       	push	r16
    ac6a:	1f 93       	push	r17
    ac6c:	cf 93       	push	r28
    ac6e:	df 93       	push	r29
    ac70:	00 d0       	rcall	.+0      	; 0xac72 <update_enemy_shots+0x1a>
    ac72:	00 d0       	rcall	.+0      	; 0xac74 <update_enemy_shots+0x1c>
    ac74:	cd b7       	in	r28, 0x3d	; 61
    ac76:	de b7       	in	r29, 0x3e	; 62
    ac78:	2a e6       	ldi	r18, 0x6A	; 106
    ac7a:	82 2e       	mov	r8, r18
    ac7c:	2e e0       	ldi	r18, 0x0E	; 14
    ac7e:	92 2e       	mov	r9, r18
    ac80:	0d e7       	ldi	r16, 0x7D	; 125
    ac82:	1e e0       	ldi	r17, 0x0E	; 14
    ac84:	3f e0       	ldi	r19, 0x0F	; 15
    ac86:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    ac88:	44 e6       	ldi	r20, 0x64	; 100
    ac8a:	e4 2e       	mov	r14, r20
    ac8c:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    ac8e:	5c e9       	ldi	r21, 0x9C	; 156
    ac90:	c5 2e       	mov	r12, r21
    ac92:	dd 24       	eor	r13, r13
    ac94:	da 94       	dec	r13
    ac96:	aa 24       	eor	r10, r10
    ac98:	aa 94       	dec	r10
    ac9a:	ab 0c       	add	r10, r11
    ac9c:	f4 01       	movw	r30, r8
    ac9e:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    aca0:	80 81       	ld	r24, Z
    aca2:	88 23       	and	r24, r24
    aca4:	09 f4       	brne	.+2      	; 0xaca8 <update_enemy_shots+0x50>
    aca6:	58 c0       	rjmp	.+176    	; 0xad58 <update_enemy_shots+0x100>
    aca8:	f4 01       	movw	r30, r8
    acaa:	80 81       	ld	r24, Z
    acac:	8c 33       	cpi	r24, 0x3C	; 60
    acae:	08 f4       	brcc	.+2      	; 0xacb2 <update_enemy_shots+0x5a>
    acb0:	50 c0       	rjmp	.+160    	; 0xad52 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    acb2:	10 82       	st	Z, r1
    acb4:	f8 01       	movw	r30, r16
    acb6:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    acb8:	80 81       	ld	r24, Z
    acba:	81 30       	cpi	r24, 0x01	; 1
    acbc:	09 f0       	breq	.+2      	; 0xacc0 <update_enemy_shots+0x68>
    acbe:	4c c0       	rjmp	.+152    	; 0xad58 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    acc0:	f8 01       	movw	r30, r16
    acc2:	90 81       	ld	r25, Z
    acc4:	91 11       	cpse	r25, r1
    acc6:	3f c0       	rjmp	.+126    	; 0xad46 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    acc8:	80 83       	st	Z, r24
    acca:	f4 01       	movw	r30, r8
    accc:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    acce:	20 81       	ld	r18, Z
    acd0:	31 81       	ldd	r19, Z+1	; 0x01
    acd2:	42 81       	ldd	r20, Z+2	; 0x02
    acd4:	53 81       	ldd	r21, Z+3	; 0x03
    acd6:	f4 01       	movw	r30, r8
    acd8:	26 83       	std	Z+6, r18	; 0x06
    acda:	37 83       	std	Z+7, r19	; 0x07
    acdc:	40 87       	std	Z+8, r20	; 0x08
    acde:	51 87       	std	Z+9, r21	; 0x09
    ace0:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    ace2:	60 81       	ld	r22, Z
    ace4:	71 81       	ldd	r23, Z+1	; 0x01
    ace6:	82 81       	ldd	r24, Z+2	; 0x02
    ace8:	93 81       	ldd	r25, Z+3	; 0x03
    acea:	29 83       	std	Y+1, r18	; 0x01
    acec:	3a 83       	std	Y+2, r19	; 0x02
    acee:	4b 83       	std	Y+3, r20	; 0x03
    acf0:	5c 83       	std	Y+4, r21	; 0x04
    acf2:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    acf6:	83 e0       	ldi	r24, 0x03	; 3
    acf8:	76 95       	lsr	r23
    acfa:	67 95       	ror	r22
    acfc:	8a 95       	dec	r24
    acfe:	e1 f7       	brne	.-8      	; 0xacf8 <update_enemy_shots+0xa0>
    ad00:	93 e0       	ldi	r25, 0x03	; 3
    ad02:	66 0f       	add	r22, r22
    ad04:	77 1f       	adc	r23, r23
    ad06:	9a 95       	dec	r25
    ad08:	e1 f7       	brne	.-8      	; 0xad02 <update_enemy_shots+0xaa>
    ad0a:	80 e0       	ldi	r24, 0x00	; 0
    ad0c:	90 e0       	ldi	r25, 0x00	; 0
    ad0e:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    ad12:	f4 01       	movw	r30, r8
    ad14:	62 87       	std	Z+10, r22	; 0x0a
    ad16:	73 87       	std	Z+11, r23	; 0x0b
    ad18:	84 87       	std	Z+12, r24	; 0x0c
    ad1a:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    ad1c:	f7 86       	std	Z+15, r15	; 0x0f
    ad1e:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    ad20:	29 81       	ldd	r18, Y+1	; 0x01
    ad22:	3a 81       	ldd	r19, Y+2	; 0x02
    ad24:	4b 81       	ldd	r20, Y+3	; 0x03
    ad26:	5c 81       	ldd	r21, Y+4	; 0x04
    ad28:	60 91 cc 0d 	lds	r22, 0x0DCC
    ad2c:	70 91 cd 0d 	lds	r23, 0x0DCD
    ad30:	80 91 ce 0d 	lds	r24, 0x0DCE
    ad34:	90 91 cf 0d 	lds	r25, 0x0DCF
    ad38:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    ad3c:	18 16       	cp	r1, r24
    ad3e:	1c f0       	brlt	.+6      	; 0xad46 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    ad40:	f4 01       	movw	r30, r8
    ad42:	d7 86       	std	Z+15, r13	; 0x0f
    ad44:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    ad46:	6a 2d       	mov	r22, r10
    ad48:	c4 01       	movw	r24, r8
    ad4a:	02 96       	adiw	r24, 0x02	; 2
    ad4c:	0e 94 dc 55 	call	0xabb8	; 0xabb8 <update_basic_shot>
    ad50:	03 c0       	rjmp	.+6      	; 0xad58 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    ad52:	8f 5f       	subi	r24, 0xFF	; 255
    ad54:	f4 01       	movw	r30, r8
    ad56:	80 83       	st	Z, r24
    ad58:	b3 94       	inc	r11
    ad5a:	f2 e4       	ldi	r31, 0x42	; 66
    ad5c:	8f 0e       	add	r8, r31
    ad5e:	91 1c       	adc	r9, r1
    ad60:	0e 5b       	subi	r16, 0xBE	; 190
    ad62:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ad64:	84 e1       	ldi	r24, 0x14	; 20
    ad66:	b8 12       	cpse	r11, r24
    ad68:	96 cf       	rjmp	.-212    	; 0xac96 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    ad6a:	0f 90       	pop	r0
    ad6c:	0f 90       	pop	r0
    ad6e:	0f 90       	pop	r0
    ad70:	0f 90       	pop	r0
    ad72:	df 91       	pop	r29
    ad74:	cf 91       	pop	r28
    ad76:	1f 91       	pop	r17
    ad78:	0f 91       	pop	r16
    ad7a:	ff 90       	pop	r15
    ad7c:	ef 90       	pop	r14
    ad7e:	df 90       	pop	r13
    ad80:	cf 90       	pop	r12
    ad82:	bf 90       	pop	r11
    ad84:	af 90       	pop	r10
    ad86:	9f 90       	pop	r9
    ad88:	8f 90       	pop	r8
    ad8a:	08 95       	ret

0000ad8c <animate_enemies>:

void animate_enemies()
{
    ad8c:	4f 92       	push	r4
    ad8e:	5f 92       	push	r5
    ad90:	6f 92       	push	r6
    ad92:	7f 92       	push	r7
    ad94:	8f 92       	push	r8
    ad96:	9f 92       	push	r9
    ad98:	bf 92       	push	r11
    ad9a:	cf 92       	push	r12
    ad9c:	df 92       	push	r13
    ad9e:	ef 92       	push	r14
    ada0:	ff 92       	push	r15
    ada2:	0f 93       	push	r16
    ada4:	1f 93       	push	r17
    ada6:	cf 93       	push	r28
    ada8:	df 93       	push	r29
    adaa:	86 e6       	ldi	r24, 0x66	; 102
    adac:	c8 2e       	mov	r12, r24
    adae:	8e e0       	ldi	r24, 0x0E	; 14
    adb0:	d8 2e       	mov	r13, r24
    adb2:	c7 e6       	ldi	r28, 0x67	; 103
    adb4:	de e0       	ldi	r29, 0x0E	; 14
    adb6:	94 e5       	ldi	r25, 0x54	; 84
    adb8:	e9 2e       	mov	r14, r25
    adba:	9e e0       	ldi	r25, 0x0E	; 14
    adbc:	f9 2e       	mov	r15, r25
	u8 slot = ENEMY_SLOT;
    adbe:	26 e0       	ldi	r18, 0x06	; 6
    adc0:	b2 2e       	mov	r11, r18
    adc2:	4e 01       	movw	r8, r28
    adc4:	84 e0       	ldi	r24, 0x04	; 4
    adc6:	88 1a       	sub	r8, r24
    adc8:	91 08       	sbc	r9, r1
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    adca:	f4 01       	movw	r30, r8
    adcc:	80 81       	ld	r24, Z
    adce:	31 96       	adiw	r30, 0x01	; 1
    add0:	88 23       	and	r24, r24
    add2:	09 f4       	brne	.+2      	; 0xadd6 <animate_enemies+0x4a>
    add4:	50 c0       	rjmp	.+160    	; 0xae76 <animate_enemies+0xea>
    add6:	80 81       	ld	r24, Z
    add8:	84 fd       	sbrc	r24, 4
    adda:	4d c0       	rjmp	.+154    	; 0xae76 <animate_enemies+0xea>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    addc:	60 91 aa 0d 	lds	r22, 0x0DAA
    ade0:	70 91 ab 0d 	lds	r23, 0x0DAB
    ade4:	80 e0       	ldi	r24, 0x00	; 0
    ade6:	90 e0       	ldi	r25, 0x00	; 0
    ade8:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    adec:	9b 01       	movw	r18, r22
    adee:	ac 01       	movw	r20, r24
    adf0:	f7 01       	movw	r30, r14
    adf2:	64 81       	ldd	r22, Z+4	; 0x04
    adf4:	75 81       	ldd	r23, Z+5	; 0x05
    adf6:	86 81       	ldd	r24, Z+6	; 0x06
    adf8:	97 81       	ldd	r25, Z+7	; 0x07
    adfa:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    adfe:	87 fd       	sbrc	r24, 7
    ae00:	25 c0       	rjmp	.+74     	; 0xae4c <animate_enemies+0xc0>
    ae02:	f7 01       	movw	r30, r14
    ae04:	40 84       	ldd	r4, Z+8	; 0x08
    ae06:	51 84       	ldd	r5, Z+9	; 0x09
    ae08:	62 84       	ldd	r6, Z+10	; 0x0a
    ae0a:	73 84       	ldd	r7, Z+11	; 0x0b
    ae0c:	00 91 ac 0d 	lds	r16, 0x0DAC
    ae10:	10 91 ad 0d 	lds	r17, 0x0DAD
    ae14:	b8 01       	movw	r22, r16
    ae16:	80 e0       	ldi	r24, 0x00	; 0
    ae18:	90 e0       	ldi	r25, 0x00	; 0
    ae1a:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    ae1e:	9b 01       	movw	r18, r22
    ae20:	ac 01       	movw	r20, r24
    ae22:	c3 01       	movw	r24, r6
    ae24:	b2 01       	movw	r22, r4
    ae26:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    ae2a:	87 fd       	sbrc	r24, 7
    ae2c:	0f c0       	rjmp	.+30     	; 0xae4c <animate_enemies+0xc0>
    ae2e:	b8 01       	movw	r22, r16
    ae30:	68 53       	subi	r22, 0x38	; 56
    ae32:	7f 4f       	sbci	r23, 0xFF	; 255
    ae34:	80 e0       	ldi	r24, 0x00	; 0
    ae36:	90 e0       	ldi	r25, 0x00	; 0
    ae38:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    ae3c:	9b 01       	movw	r18, r22
    ae3e:	ac 01       	movw	r20, r24
    ae40:	c3 01       	movw	r24, r6
    ae42:	b2 01       	movw	r22, r4
    ae44:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    ae48:	18 16       	cp	r1, r24
    ae4a:	6c f4       	brge	.+26     	; 0xae66 <animate_enemies+0xda>
			{
				game.enemies[i].active = 0;
    ae4c:	f4 01       	movw	r30, r8
    ae4e:	10 82       	st	Z, r1
				game.active_enemies--;
    ae50:	80 91 c5 0d 	lds	r24, 0x0DC5
    ae54:	81 50       	subi	r24, 0x01	; 1
    ae56:	80 93 c5 0d 	sts	0x0DC5, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    ae5a:	08 81       	ld	r16, Y
    ae5c:	f6 01       	movw	r30, r12
    ae5e:	20 81       	ld	r18, Z
    ae60:	40 e0       	ldi	r20, 0x00	; 0
    ae62:	60 ee       	ldi	r22, 0xE0	; 224
    ae64:	36 c0       	rjmp	.+108    	; 0xaed2 <animate_enemies+0x146>
				game.player.flags = EXPLODING;
				return;
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    ae66:	28 81       	ld	r18, Y
    ae68:	f6 01       	movw	r30, r12
    ae6a:	40 81       	ld	r20, Z
    ae6c:	6b 2d       	mov	r22, r11
    ae6e:	c7 01       	movw	r24, r14
    ae70:	0e 94 91 54 	call	0xa922	; 0xa922 <animate_sprite>
    ae74:	31 c0       	rjmp	.+98     	; 0xaed8 <animate_enemies+0x14c>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    ae76:	80 81       	ld	r24, Z
    ae78:	84 ff       	sbrs	r24, 4
    ae7a:	2e c0       	rjmp	.+92     	; 0xaed8 <animate_enemies+0x14c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    ae7c:	60 91 ac 0d 	lds	r22, 0x0DAC
    ae80:	70 91 ad 0d 	lds	r23, 0x0DAD
    ae84:	80 e0       	ldi	r24, 0x00	; 0
    ae86:	90 e0       	ldi	r25, 0x00	; 0
    ae88:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    ae8c:	9b 01       	movw	r18, r22
    ae8e:	ac 01       	movw	r20, r24
    ae90:	f7 01       	movw	r30, r14
    ae92:	60 85       	ldd	r22, Z+8	; 0x08
    ae94:	71 85       	ldd	r23, Z+9	; 0x09
    ae96:	82 85       	ldd	r24, Z+10	; 0x0a
    ae98:	93 85       	ldd	r25, Z+11	; 0x0b
    ae9a:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    ae9e:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    aea2:	16 2f       	mov	r17, r22
    aea4:	60 91 aa 0d 	lds	r22, 0x0DAA
    aea8:	70 91 ab 0d 	lds	r23, 0x0DAB
    aeac:	80 e0       	ldi	r24, 0x00	; 0
    aeae:	90 e0       	ldi	r25, 0x00	; 0
    aeb0:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    aeb4:	9b 01       	movw	r18, r22
    aeb6:	ac 01       	movw	r20, r24
    aeb8:	f7 01       	movw	r30, r14
    aeba:	64 81       	ldd	r22, Z+4	; 0x04
    aebc:	75 81       	ldd	r23, Z+5	; 0x05
    aebe:	86 81       	ldd	r24, Z+6	; 0x06
    aec0:	97 81       	ldd	r25, Z+7	; 0x07
    aec2:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    aec6:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    aeca:	08 81       	ld	r16, Y
    aecc:	f6 01       	movw	r30, r12
    aece:	20 81       	ld	r18, Z
    aed0:	41 2f       	mov	r20, r17
    aed2:	8b 2d       	mov	r24, r11
    aed4:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    aed8:	98 81       	ld	r25, Y
    aeda:	f6 01       	movw	r30, r12
    aedc:	80 81       	ld	r24, Z
    aede:	98 9f       	mul	r25, r24
    aee0:	b0 0c       	add	r11, r0
    aee2:	11 24       	eor	r1, r1
    aee4:	f2 e4       	ldi	r31, 0x42	; 66
    aee6:	cf 0e       	add	r12, r31
    aee8:	d1 1c       	adc	r13, r1
    aeea:	ce 5b       	subi	r28, 0xBE	; 190
    aeec:	df 4f       	sbci	r29, 0xFF	; 255
    aeee:	82 e4       	ldi	r24, 0x42	; 66
    aef0:	e8 0e       	add	r14, r24
    aef2:	f1 1c       	adc	r15, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    aef4:	ef e0       	ldi	r30, 0x0F	; 15
    aef6:	c1 3b       	cpi	r28, 0xB1	; 177
    aef8:	de 07       	cpc	r29, r30
    aefa:	09 f0       	breq	.+2      	; 0xaefe <animate_enemies+0x172>
    aefc:	62 cf       	rjmp	.-316    	; 0xadc2 <animate_enemies+0x36>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    aefe:	df 91       	pop	r29
    af00:	cf 91       	pop	r28
    af02:	1f 91       	pop	r17
    af04:	0f 91       	pop	r16
    af06:	ff 90       	pop	r15
    af08:	ef 90       	pop	r14
    af0a:	df 90       	pop	r13
    af0c:	cf 90       	pop	r12
    af0e:	bf 90       	pop	r11
    af10:	9f 90       	pop	r9
    af12:	8f 90       	pop	r8
    af14:	7f 90       	pop	r7
    af16:	6f 90       	pop	r6
    af18:	5f 90       	pop	r5
    af1a:	4f 90       	pop	r4
    af1c:	08 95       	ret

0000af1e <animate_enemy_shots>:

void animate_enemy_shots()
{
    af1e:	2f 92       	push	r2
    af20:	3f 92       	push	r3
    af22:	4f 92       	push	r4
    af24:	5f 92       	push	r5
    af26:	6f 92       	push	r6
    af28:	7f 92       	push	r7
    af2a:	8f 92       	push	r8
    af2c:	9f 92       	push	r9
    af2e:	af 92       	push	r10
    af30:	bf 92       	push	r11
    af32:	cf 92       	push	r12
    af34:	df 92       	push	r13
    af36:	ef 92       	push	r14
    af38:	ff 92       	push	r15
    af3a:	0f 93       	push	r16
    af3c:	1f 93       	push	r17
    af3e:	cf 93       	push	r28
    af40:	df 93       	push	r29
    af42:	cd b7       	in	r28, 0x3d	; 61
    af44:	de b7       	in	r29, 0x3e	; 62
    af46:	62 97       	sbiw	r28, 0x12	; 18
    af48:	0f b6       	in	r0, 0x3f	; 63
    af4a:	f8 94       	cli
    af4c:	de bf       	out	0x3e, r29	; 62
    af4e:	0f be       	out	0x3f, r0	; 63
    af50:	cd bf       	out	0x3d, r28	; 61
    af52:	4d e7       	ldi	r20, 0x7D	; 125
    af54:	24 2e       	mov	r2, r20
    af56:	4e e0       	ldi	r20, 0x0E	; 14
    af58:	34 2e       	mov	r3, r20
    af5a:	5c e6       	ldi	r21, 0x6C	; 108
    af5c:	85 2e       	mov	r8, r21
    af5e:	5e e0       	ldi	r21, 0x0E	; 14
    af60:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    af62:	6e e0       	ldi	r22, 0x0E	; 14
    af64:	b6 2e       	mov	r11, r22
    af66:	f1 01       	movw	r30, r2
    af68:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    af6a:	80 81       	ld	r24, Z
    af6c:	81 30       	cpi	r24, 0x01	; 1
    af6e:	09 f0       	breq	.+2      	; 0xaf72 <animate_enemy_shots+0x54>
    af70:	ea c0       	rjmp	.+468    	; 0xb146 <animate_enemy_shots+0x228>
			{
				if (game.enemies[i].shot[j].active)
    af72:	d1 01       	movw	r26, r2
    af74:	8c 91       	ld	r24, X
    af76:	88 23       	and	r24, r24
    af78:	09 f4       	brne	.+2      	; 0xaf7c <animate_enemy_shots+0x5e>
    af7a:	e5 c0       	rjmp	.+458    	; 0xb146 <animate_enemy_shots+0x228>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    af7c:	f4 01       	movw	r30, r8
    af7e:	c4 80       	ldd	r12, Z+4	; 0x04
    af80:	d5 80       	ldd	r13, Z+5	; 0x05
    af82:	e6 80       	ldd	r14, Z+6	; 0x06
    af84:	f7 80       	ldd	r15, Z+7	; 0x07
    af86:	60 90 aa 0d 	lds	r6, 0x0DAA
    af8a:	70 90 ab 0d 	lds	r7, 0x0DAB
    af8e:	b3 01       	movw	r22, r6
    af90:	80 e0       	ldi	r24, 0x00	; 0
    af92:	90 e0       	ldi	r25, 0x00	; 0
    af94:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    af98:	9b 01       	movw	r18, r22
    af9a:	ac 01       	movw	r20, r24
    af9c:	c7 01       	movw	r24, r14
    af9e:	b6 01       	movw	r22, r12
    afa0:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    afa4:	87 ff       	sbrs	r24, 7
    afa6:	03 c0       	rjmp	.+6      	; 0xafae <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    afa8:	d1 01       	movw	r26, r2
    afaa:	1c 92       	st	X, r1
    afac:	80 c0       	rjmp	.+256    	; 0xb0ae <animate_enemy_shots+0x190>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    afae:	b3 01       	movw	r22, r6
    afb0:	60 52       	subi	r22, 0x20	; 32
    afb2:	7f 4f       	sbci	r23, 0xFF	; 255
    afb4:	80 e0       	ldi	r24, 0x00	; 0
    afb6:	90 e0       	ldi	r25, 0x00	; 0
    afb8:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    afbc:	9b 01       	movw	r18, r22
    afbe:	ac 01       	movw	r20, r24
    afc0:	c7 01       	movw	r24, r14
    afc2:	b6 01       	movw	r22, r12
    afc4:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    afc8:	18 16       	cp	r1, r24
    afca:	74 f3       	brlt	.-36     	; 0xafa8 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    afcc:	41 e0       	ldi	r20, 0x01	; 1
    afce:	61 e0       	ldi	r22, 0x01	; 1
    afd0:	c4 01       	movw	r24, r8
    afd2:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    afd6:	81 11       	cpse	r24, r1
    afd8:	e7 cf       	rjmp	.-50     	; 0xafa8 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    afda:	f4 01       	movw	r30, r8
    afdc:	40 84       	ldd	r4, Z+8	; 0x08
    afde:	51 84       	ldd	r5, Z+9	; 0x09
    afe0:	62 84       	ldd	r6, Z+10	; 0x0a
    afe2:	73 84       	ldd	r7, Z+11	; 0x0b
    afe4:	84 81       	ldd	r24, Z+4	; 0x04
    afe6:	95 81       	ldd	r25, Z+5	; 0x05
    afe8:	a6 81       	ldd	r26, Z+6	; 0x06
    afea:	b7 81       	ldd	r27, Z+7	; 0x07
    afec:	89 83       	std	Y+1, r24	; 0x01
    afee:	9a 83       	std	Y+2, r25	; 0x02
    aff0:	ab 83       	std	Y+3, r26	; 0x03
    aff2:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    aff4:	c3 01       	movw	r24, r6
    aff6:	b2 01       	movw	r22, r4
    aff8:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    affc:	6d 83       	std	Y+5, r22	; 0x05
    affe:	7e 83       	std	Y+6, r23	; 0x06
    b000:	8f 83       	std	Y+7, r24	; 0x07
    b002:	98 87       	std	Y+8, r25	; 0x08
    b004:	69 81       	ldd	r22, Y+1	; 0x01
    b006:	7a 81       	ldd	r23, Y+2	; 0x02
    b008:	8b 81       	ldd	r24, Y+3	; 0x03
    b00a:	9c 81       	ldd	r25, Y+4	; 0x04
    b00c:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    b010:	69 87       	std	Y+9, r22	; 0x09
    b012:	7a 87       	std	Y+10, r23	; 0x0a
    b014:	8b 87       	std	Y+11, r24	; 0x0b
    b016:	9c 87       	std	Y+12, r25	; 0x0c
    b018:	20 91 dc 0d 	lds	r18, 0x0DDC
    b01c:	22 0f       	add	r18, r18
    b01e:	22 0f       	add	r18, r18
    b020:	22 0f       	add	r18, r18
    b022:	40 91 db 0d 	lds	r20, 0x0DDB
    b026:	44 0f       	add	r20, r20
    b028:	44 0f       	add	r20, r20
    b02a:	44 0f       	add	r20, r20
    b02c:	60 91 d0 0d 	lds	r22, 0x0DD0
    b030:	70 91 d1 0d 	lds	r23, 0x0DD1
    b034:	80 91 d2 0d 	lds	r24, 0x0DD2
    b038:	90 91 d3 0d 	lds	r25, 0x0DD3
    b03c:	29 8b       	std	Y+17, r18	; 0x11
    b03e:	4a 8b       	std	Y+18, r20	; 0x12
    b040:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    b044:	6d 87       	std	Y+13, r22	; 0x0d
    b046:	7e 87       	std	Y+14, r23	; 0x0e
    b048:	8f 87       	std	Y+15, r24	; 0x0f
    b04a:	98 8b       	std	Y+16, r25	; 0x10
    b04c:	60 91 cc 0d 	lds	r22, 0x0DCC
    b050:	70 91 cd 0d 	lds	r23, 0x0DCD
    b054:	80 91 ce 0d 	lds	r24, 0x0DCE
    b058:	90 91 cf 0d 	lds	r25, 0x0DCF
    b05c:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    b060:	dc 01       	movw	r26, r24
    b062:	cb 01       	movw	r24, r22
    b064:	28 e0       	ldi	r18, 0x08	; 8
    b066:	a2 2e       	mov	r10, r18
    b068:	38 e0       	ldi	r19, 0x08	; 8
    b06a:	c3 2e       	mov	r12, r19
    b06c:	ed 80       	ldd	r14, Y+5	; 0x05
    b06e:	fe 80       	ldd	r15, Y+6	; 0x06
    b070:	09 85       	ldd	r16, Y+9	; 0x09
    b072:	1a 85       	ldd	r17, Y+10	; 0x0a
    b074:	29 89       	ldd	r18, Y+17	; 0x11
    b076:	4a 89       	ldd	r20, Y+18	; 0x12
    b078:	6d 85       	ldd	r22, Y+13	; 0x0d
    b07a:	7e 85       	ldd	r23, Y+14	; 0x0e
    b07c:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <LBCollides>
    b080:	88 23       	and	r24, r24
    b082:	d1 f0       	breq	.+52     	; 0xb0b8 <animate_enemy_shots+0x19a>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    b084:	41 e0       	ldi	r20, 0x01	; 1
    b086:	6f ef       	ldi	r22, 0xFF	; 255
    b088:	84 e0       	ldi	r24, 0x04	; 4
    b08a:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
						if(!GODMODE) game.player.shield -= game.enemies[i].shot[j].hit_count;
						if (game.player.shield <= 0)
    b08e:	80 91 dd 0d 	lds	r24, 0x0DDD
    b092:	18 16       	cp	r1, r24
    b094:	54 f0       	brlt	.+20     	; 0xb0aa <animate_enemy_shots+0x18c>
						{
							SFX_PLAYER_EXPLODE;
    b096:	41 e0       	ldi	r20, 0x01	; 1
    b098:	6f ef       	ldi	r22, 0xFF	; 255
    b09a:	85 e0       	ldi	r24, 0x05	; 5
    b09c:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
							game.player.shield = 0;
    b0a0:	10 92 dd 0d 	sts	0x0DDD, r1
							game.player.flags = EXPLODING;
    b0a4:	b0 e1       	ldi	r27, 0x10	; 16
    b0a6:	b0 93 d8 0d 	sts	0x0DD8, r27
						}
						game.enemies[i].shot[j].active = 0;
    b0aa:	f1 01       	movw	r30, r2
    b0ac:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    b0ae:	01 e0       	ldi	r16, 0x01	; 1
    b0b0:	21 e0       	ldi	r18, 0x01	; 1
    b0b2:	40 e0       	ldi	r20, 0x00	; 0
    b0b4:	60 ee       	ldi	r22, 0xE0	; 224
    b0b6:	44 c0       	rjmp	.+136    	; 0xb140 <animate_enemy_shots+0x222>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    b0b8:	d4 01       	movw	r26, r8
    b0ba:	1c 96       	adiw	r26, 0x0c	; 12
    b0bc:	6d 91       	ld	r22, X+
    b0be:	7c 91       	ld	r23, X
    b0c0:	1d 97       	sbiw	r26, 0x0d	; 13
    b0c2:	88 27       	eor	r24, r24
    b0c4:	77 fd       	sbrc	r23, 7
    b0c6:	80 95       	com	r24
    b0c8:	98 2f       	mov	r25, r24
    b0ca:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    b0ce:	29 e8       	ldi	r18, 0x89	; 137
    b0d0:	38 e8       	ldi	r19, 0x88	; 136
    b0d2:	48 e8       	ldi	r20, 0x88	; 136
    b0d4:	5c e3       	ldi	r21, 0x3C	; 60
    b0d6:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    b0da:	9b 01       	movw	r18, r22
    b0dc:	ac 01       	movw	r20, r24
    b0de:	69 81       	ldd	r22, Y+1	; 0x01
    b0e0:	7a 81       	ldd	r23, Y+2	; 0x02
    b0e2:	8b 81       	ldd	r24, Y+3	; 0x03
    b0e4:	9c 81       	ldd	r25, Y+4	; 0x04
    b0e6:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    b0ea:	6b 01       	movw	r12, r22
    b0ec:	7c 01       	movw	r14, r24
    b0ee:	f4 01       	movw	r30, r8
    b0f0:	64 83       	std	Z+4, r22	; 0x04
    b0f2:	75 83       	std	Z+5, r23	; 0x05
    b0f4:	86 83       	std	Z+6, r24	; 0x06
    b0f6:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    b0f8:	60 91 ac 0d 	lds	r22, 0x0DAC
    b0fc:	70 91 ad 0d 	lds	r23, 0x0DAD
    b100:	80 e0       	ldi	r24, 0x00	; 0
    b102:	90 e0       	ldi	r25, 0x00	; 0
    b104:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    b108:	9b 01       	movw	r18, r22
    b10a:	ac 01       	movw	r20, r24
    b10c:	c3 01       	movw	r24, r6
    b10e:	b2 01       	movw	r22, r4
    b110:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    b114:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    b118:	76 2e       	mov	r7, r22
    b11a:	60 91 aa 0d 	lds	r22, 0x0DAA
    b11e:	70 91 ab 0d 	lds	r23, 0x0DAB
    b122:	80 e0       	ldi	r24, 0x00	; 0
    b124:	90 e0       	ldi	r25, 0x00	; 0
    b126:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    b12a:	9b 01       	movw	r18, r22
    b12c:	ac 01       	movw	r20, r24
    b12e:	c7 01       	movw	r24, r14
    b130:	b6 01       	movw	r22, r12
    b132:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    b136:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
    b13a:	01 e0       	ldi	r16, 0x01	; 1
    b13c:	21 e0       	ldi	r18, 0x01	; 1
    b13e:	47 2d       	mov	r20, r7
    b140:	8b 2d       	mov	r24, r11
    b142:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    b146:	b3 94       	inc	r11
    b148:	f2 e4       	ldi	r31, 0x42	; 66
    b14a:	2f 0e       	add	r2, r31
    b14c:	31 1c       	adc	r3, r1
    b14e:	82 e4       	ldi	r24, 0x42	; 66
    b150:	88 0e       	add	r8, r24
    b152:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b154:	93 e1       	ldi	r25, 0x13	; 19
    b156:	b9 12       	cpse	r11, r25
    b158:	06 cf       	rjmp	.-500    	; 0xaf66 <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    b15a:	62 96       	adiw	r28, 0x12	; 18
    b15c:	0f b6       	in	r0, 0x3f	; 63
    b15e:	f8 94       	cli
    b160:	de bf       	out	0x3e, r29	; 62
    b162:	0f be       	out	0x3f, r0	; 63
    b164:	cd bf       	out	0x3d, r28	; 61
    b166:	df 91       	pop	r29
    b168:	cf 91       	pop	r28
    b16a:	1f 91       	pop	r17
    b16c:	0f 91       	pop	r16
    b16e:	ff 90       	pop	r15
    b170:	ef 90       	pop	r14
    b172:	df 90       	pop	r13
    b174:	cf 90       	pop	r12
    b176:	bf 90       	pop	r11
    b178:	af 90       	pop	r10
    b17a:	9f 90       	pop	r9
    b17c:	8f 90       	pop	r8
    b17e:	7f 90       	pop	r7
    b180:	6f 90       	pop	r6
    b182:	5f 90       	pop	r5
    b184:	4f 90       	pop	r4
    b186:	3f 90       	pop	r3
    b188:	2f 90       	pop	r2
    b18a:	08 95       	ret

0000b18c <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    b18c:	ef 92       	push	r14
    b18e:	ff 92       	push	r15
    b190:	0f 93       	push	r16
    b192:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    b194:	c8 2f       	mov	r28, r24
    b196:	e6 2e       	mov	r14, r22
    b198:	f1 2c       	mov	r15, r1
    b19a:	e8 0e       	add	r14, r24
    b19c:	f1 1c       	adc	r15, r1
    b19e:	8c 2f       	mov	r24, r28
    b1a0:	90 e0       	ldi	r25, 0x00	; 0
    b1a2:	8e 15       	cp	r24, r14
    b1a4:	9f 05       	cpc	r25, r15
    b1a6:	7c f4       	brge	.+30     	; 0xb1c6 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    b1a8:	40 e0       	ldi	r20, 0x00	; 0
    b1aa:	66 e0       	ldi	r22, 0x06	; 6
    b1ac:	74 e3       	ldi	r23, 0x34	; 52
    b1ae:	8c 2f       	mov	r24, r28
    b1b0:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b1b4:	01 e0       	ldi	r16, 0x01	; 1
    b1b6:	21 e0       	ldi	r18, 0x01	; 1
    b1b8:	40 e0       	ldi	r20, 0x00	; 0
    b1ba:	60 ee       	ldi	r22, 0xE0	; 224
    b1bc:	8c 2f       	mov	r24, r28
    b1be:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b1c2:	cf 5f       	subi	r28, 0xFF	; 255
    b1c4:	ec cf       	rjmp	.-40     	; 0xb19e <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b1c6:	cf 91       	pop	r28
    b1c8:	0f 91       	pop	r16
    b1ca:	ff 90       	pop	r15
    b1cc:	ef 90       	pop	r14
    b1ce:	08 95       	ret

0000b1d0 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b1d0:	61 e0       	ldi	r22, 0x01	; 1
    b1d2:	81 e0       	ldi	r24, 0x01	; 1
    b1d4:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b1d8:	64 e1       	ldi	r22, 0x14	; 20
    b1da:	80 e0       	ldi	r24, 0x00	; 0
    b1dc:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
	LBRotateSprites();
    b1e0:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	ClearVram();
    b1e4:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b1e8:	60 e0       	ldi	r22, 0x00	; 0
    b1ea:	81 e0       	ldi	r24, 0x01	; 1
    b1ec:	0c 94 21 46 	jmp	0x8c42	; 0x8c42 <FadeIn>

0000b1f0 <load_level>:
		game.level_height = 25;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    b1f0:	0f 93       	push	r16
    b1f2:	cf 93       	push	r28
    b1f4:	df 93       	push	r29
    b1f6:	c8 2f       	mov	r28, r24
    b1f8:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    b1fa:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b1fe:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    b202:	8d e1       	ldi	r24, 0x1D	; 29
    b204:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    b208:	89 e0       	ldi	r24, 0x09	; 9
    b20a:	94 e3       	ldi	r25, 0x34	; 52
    b20c:	90 93 b1 0c 	sts	0x0CB1, r25
    b210:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    b214:	83 e0       	ldi	r24, 0x03	; 3
    b216:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    b21a:	82 e0       	ldi	r24, 0x02	; 2
    b21c:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <clear_overlay>
	game.current_level_index = index;
    b220:	c0 93 b9 0d 	sts	0x0DB9, r28
	game.level_ended = 0;
    b224:	10 92 c7 0d 	sts	0x0DC7, r1
	game.joypadState.held = 0;
    b228:	10 92 a3 0f 	sts	0x0FA3, r1
    b22c:	10 92 a2 0f 	sts	0x0FA2, r1
	game.joypadState.pressed = 0;
    b230:	10 92 9f 0f 	sts	0x0F9F, r1
    b234:	10 92 9e 0f 	sts	0x0F9E, r1
	game.joypadState.released = 0;
    b238:	10 92 a1 0f 	sts	0x0FA1, r1
    b23c:	10 92 a0 0f 	sts	0x0FA0, r1
	switch (index)
    b240:	8c 2f       	mov	r24, r28
    b242:	90 e0       	ldi	r25, 0x00	; 0
    b244:	8a 30       	cpi	r24, 0x0A	; 10
    b246:	91 05       	cpc	r25, r1
    b248:	c0 f4       	brcc	.+48     	; 0xb27a <load_level+0x8a>
    b24a:	fc 01       	movw	r30, r24
    b24c:	ef 5a       	subi	r30, 0xAF	; 175
    b24e:	ff 4f       	sbci	r31, 0xFF	; 255
    b250:	0c 94 bf 64 	jmp	0xc97e	; 0xc97e <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    b254:	8f ef       	ldi	r24, 0xFF	; 255
    b256:	91 e6       	ldi	r25, 0x61	; 97
    b258:	0e c0       	rjmp	.+28     	; 0xb276 <load_level+0x86>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    b25a:	8e ef       	ldi	r24, 0xFE	; 254
    b25c:	90 e6       	ldi	r25, 0x60	; 96
    b25e:	0b c0       	rjmp	.+22     	; 0xb276 <load_level+0x86>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    b260:	8d ef       	ldi	r24, 0xFD	; 253
    b262:	9f e5       	ldi	r25, 0x5F	; 95
    b264:	08 c0       	rjmp	.+16     	; 0xb276 <load_level+0x86>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    b266:	8c ef       	ldi	r24, 0xFC	; 252
    b268:	9e e5       	ldi	r25, 0x5E	; 94
    b26a:	05 c0       	rjmp	.+10     	; 0xb276 <load_level+0x86>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    b26c:	8b ef       	ldi	r24, 0xFB	; 251
    b26e:	9d e5       	ldi	r25, 0x5D	; 93
    b270:	02 c0       	rjmp	.+4      	; 0xb276 <load_level+0x86>
		case 9: map_level_info((char*) map_level_space); break;
    b272:	83 ec       	ldi	r24, 0xC3	; 195
    b274:	97 e5       	ldi	r25, 0x57	; 87
    b276:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <map_level_info>
	}
	game.column_count = 0;
    b27a:	10 92 b5 0d 	sts	0x0DB5, r1
    b27e:	10 92 b4 0d 	sts	0x0DB4, r1
	game.camera_x = get_camera_x(index);
    b282:	10 92 ab 0d 	sts	0x0DAB, r1
    b286:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    b28a:	10 92 ad 0d 	sts	0x0DAD, r1
    b28e:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    b292:	80 e0       	ldi	r24, 0x00	; 0
    b294:	90 e0       	ldi	r25, 0x00	; 0
    b296:	a0 ec       	ldi	r26, 0xC0	; 192
    b298:	b1 e4       	ldi	r27, 0x41	; 65
    b29a:	80 93 cc 0d 	sts	0x0DCC, r24
    b29e:	90 93 cd 0d 	sts	0x0DCD, r25
    b2a2:	a0 93 ce 0d 	sts	0x0DCE, r26
    b2a6:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    b2aa:	80 e0       	ldi	r24, 0x00	; 0
    b2ac:	90 e0       	ldi	r25, 0x00	; 0
    b2ae:	a8 e2       	ldi	r26, 0x28	; 40
    b2b0:	b3 e4       	ldi	r27, 0x43	; 67
    b2b2:	80 93 d0 0d 	sts	0x0DD0, r24
    b2b6:	90 93 d1 0d 	sts	0x0DD1, r25
    b2ba:	a0 93 d2 0d 	sts	0x0DD2, r26
    b2be:	b0 93 d3 0d 	sts	0x0DD3, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b2c2:	8d e1       	ldi	r24, 0x1D	; 29
    b2c4:	90 e0       	ldi	r25, 0x00	; 0
    b2c6:	90 93 a7 0d 	sts	0x0DA7, r25
    b2ca:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b2ce:	80 93 c3 0d 	sts	0x0DC3, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b2d2:	8a e1       	ldi	r24, 0x1A	; 26
    b2d4:	90 e0       	ldi	r25, 0x00	; 0
    b2d6:	90 93 a9 0d 	sts	0x0DA9, r25
    b2da:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b2de:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_x = 0;
    b2e2:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    b2e6:	10 92 c2 0d 	sts	0x0DC2, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    b2ea:	8a e0       	ldi	r24, 0x0A	; 10
    b2ec:	80 93 c6 0d 	sts	0x0DC6, r24
	render_camera_view();
    b2f0:	0e 94 4e 4b 	call	0x969c	; 0x969c <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    b2f4:	40 e9       	ldi	r20, 0x90	; 144
    b2f6:	5b e0       	ldi	r21, 0x0B	; 11
    b2f8:	6d e1       	ldi	r22, 0x1D	; 29
    b2fa:	80 e0       	ldi	r24, 0x00	; 0
    b2fc:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    b300:	43 e8       	ldi	r20, 0x83	; 131
    b302:	5b e0       	ldi	r21, 0x0B	; 11
    b304:	6d e1       	ldi	r22, 0x1D	; 29
    b306:	82 e1       	ldi	r24, 0x12	; 18
    b308:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    b30c:	49 e8       	ldi	r20, 0x89	; 137
    b30e:	5b e0       	ldi	r21, 0x0B	; 11
    b310:	6e e1       	ldi	r22, 0x1E	; 30
    b312:	80 e0       	ldi	r24, 0x00	; 0
    b314:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    b318:	48 e9       	ldi	r20, 0x98	; 152
    b31a:	5b e0       	ldi	r21, 0x0B	; 11
    b31c:	6e e1       	ldi	r22, 0x1E	; 30
    b31e:	81 e1       	ldi	r24, 0x11	; 17
    b320:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    b324:	42 e4       	ldi	r20, 0x42	; 66
    b326:	5b e0       	ldi	r21, 0x0B	; 11
    b328:	6f e1       	ldi	r22, 0x1F	; 31
    b32a:	81 e1       	ldi	r24, 0x11	; 17
    b32c:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    b330:	21 e0       	ldi	r18, 0x01	; 1
    b332:	40 91 dd 0d 	lds	r20, 0x0DDD
    b336:	6d e1       	ldi	r22, 0x1D	; 29
    b338:	89 e0       	ldi	r24, 0x09	; 9
    b33a:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    b33e:	40 91 b2 0d 	lds	r20, 0x0DB2
    b342:	50 91 b3 0d 	lds	r21, 0x0DB3
    b346:	21 e0       	ldi	r18, 0x01	; 1
    b348:	6d e1       	ldi	r22, 0x1D	; 29
    b34a:	8b e1       	ldi	r24, 0x1B	; 27
    b34c:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    b350:	21 e0       	ldi	r18, 0x01	; 1
    b352:	40 91 b7 0d 	lds	r20, 0x0DB7
    b356:	6e e1       	ldi	r22, 0x1E	; 30
    b358:	89 e0       	ldi	r24, 0x09	; 9
    b35a:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    b35e:	40 91 b0 0d 	lds	r20, 0x0DB0
    b362:	50 91 b1 0d 	lds	r21, 0x0DB1
    b366:	21 e0       	ldi	r18, 0x01	; 1
    b368:	6e e1       	ldi	r22, 0x1E	; 30
    b36a:	8b e1       	ldi	r24, 0x1B	; 27
    b36c:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    b370:	40 91 ae 0d 	lds	r20, 0x0DAE
    b374:	50 91 af 0d 	lds	r21, 0x0DAF
    b378:	21 e0       	ldi	r18, 0x01	; 1
    b37a:	6f e1       	ldi	r22, 0x1F	; 31
    b37c:	8b e1       	ldi	r24, 0x1B	; 27
    b37e:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    b382:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    b386:	81 11       	cpse	r24, r1
    b388:	39 c0       	rjmp	.+114    	; 0xb3fc <load_level+0x20c>
    b38a:	dd 23       	and	r29, r29
    b38c:	b9 f1       	breq	.+110    	; 0xb3fc <load_level+0x20c>
	{
		map_ship();
    b38e:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    b392:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    b394:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    b396:	81 e0       	ldi	r24, 0x01	; 1
    b398:	90 e0       	ldi	r25, 0x00	; 0
    b39a:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    b39e:	8c 2f       	mov	r24, r28
    b3a0:	90 e0       	ldi	r25, 0x00	; 0
    b3a2:	88 3a       	cpi	r24, 0xA8	; 168
    b3a4:	91 05       	cpc	r25, r1
    b3a6:	74 f0       	brlt	.+28     	; 0xb3c4 <load_level+0x1d4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    b3a8:	40 e0       	ldi	r20, 0x00	; 0
    b3aa:	6a ed       	ldi	r22, 0xDA	; 218
    b3ac:	73 e3       	ldi	r23, 0x33	; 51
    b3ae:	80 e0       	ldi	r24, 0x00	; 0
    b3b0:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    b3b4:	03 e0       	ldi	r16, 0x03	; 3
    b3b6:	22 e0       	ldi	r18, 0x02	; 2
    b3b8:	48 ea       	ldi	r20, 0xA8	; 168
    b3ba:	68 e1       	ldi	r22, 0x18	; 24
    b3bc:	80 e0       	ldi	r24, 0x00	; 0
    b3be:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
				ship_increment = -3;
    b3c2:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    b3c4:	84 e3       	ldi	r24, 0x34	; 52
    b3c6:	9e e0       	ldi	r25, 0x0E	; 14
    b3c8:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    b3cc:	40 e0       	ldi	r20, 0x00	; 0
    b3ce:	bc 01       	movw	r22, r24
    b3d0:	86 e0       	ldi	r24, 0x06	; 6
    b3d2:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    b3d6:	02 e0       	ldi	r16, 0x02	; 2
    b3d8:	24 e0       	ldi	r18, 0x04	; 4
    b3da:	4c 2f       	mov	r20, r28
    b3dc:	68 e0       	ldi	r22, 0x08	; 8
    b3de:	86 e0       	ldi	r24, 0x06	; 6
    b3e0:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
			ship_y += ship_increment;
    b3e4:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    b3e6:	39 f4       	brne	.+14     	; 0xb3f6 <load_level+0x206>
			{
				clear_sprites(6, 8);
    b3e8:	68 e0       	ldi	r22, 0x08	; 8
    b3ea:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    b3ec:	df 91       	pop	r29
    b3ee:	cf 91       	pop	r28
    b3f0:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    b3f2:	0c 94 c6 58 	jmp	0xb18c	; 0xb18c <clear_sprites>
				break;
			}
			LBRotateSprites();
    b3f6:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
		}
    b3fa:	cd cf       	rjmp	.-102    	; 0xb396 <load_level+0x1a6>
	}
}
    b3fc:	df 91       	pop	r29
    b3fe:	cf 91       	pop	r28
    b400:	0f 91       	pop	r16
    b402:	08 95       	ret

0000b404 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    b404:	0f 93       	push	r16
    b406:	1f 93       	push	r17
    b408:	cf 93       	push	r28
    b40a:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    b40c:	18 2f       	mov	r17, r24
    b40e:	c6 2f       	mov	r28, r22
    b410:	d0 e0       	ldi	r29, 0x00	; 0
    b412:	c8 0f       	add	r28, r24
    b414:	d1 1d       	adc	r29, r1
    b416:	81 2f       	mov	r24, r17
    b418:	90 e0       	ldi	r25, 0x00	; 0
    b41a:	8c 17       	cp	r24, r28
    b41c:	9d 07       	cpc	r25, r29
    b41e:	4c f4       	brge	.+18     	; 0xb432 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b420:	01 e0       	ldi	r16, 0x01	; 1
    b422:	21 e0       	ldi	r18, 0x01	; 1
    b424:	40 e0       	ldi	r20, 0x00	; 0
    b426:	60 ee       	ldi	r22, 0xE0	; 224
    b428:	81 2f       	mov	r24, r17
    b42a:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b42e:	1f 5f       	subi	r17, 0xFF	; 255
    b430:	f2 cf       	rjmp	.-28     	; 0xb416 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b432:	df 91       	pop	r29
    b434:	cf 91       	pop	r28
    b436:	1f 91       	pop	r17
    b438:	0f 91       	pop	r16
    b43a:	08 95       	ret

0000b43c <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    b43c:	fc 01       	movw	r30, r24
    b43e:	20 81       	ld	r18, Z
    b440:	31 81       	ldd	r19, Z+1	; 0x01
    b442:	28 70       	andi	r18, 0x08	; 8
    b444:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b446:	81 e0       	ldi	r24, 0x01	; 1
    b448:	23 2b       	or	r18, r19
    b44a:	09 f4       	brne	.+2      	; 0xb44e <select_pressed+0x12>
    b44c:	80 e0       	ldi	r24, 0x00	; 0
}
    b44e:	08 95       	ret

0000b450 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    b450:	ff 92       	push	r15
    b452:	0f 93       	push	r16
    b454:	1f 93       	push	r17
    b456:	cf 93       	push	r28
    b458:	df 93       	push	r29
    b45a:	ec 01       	movw	r28, r24
    b45c:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    b45e:	8e e0       	ldi	r24, 0x0E	; 14
    b460:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    b462:	fe 01       	movw	r30, r28
    b464:	84 91       	lpm	r24, Z
    b466:	83 32       	cpi	r24, 0x23	; 35
    b468:	21 f1       	breq	.+72     	; 0xb4b2 <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    b46a:	6f ef       	ldi	r22, 0xFF	; 255
    b46c:	70 e0       	ldi	r23, 0x00	; 0
    b46e:	ce 01       	movw	r24, r28
    b470:	0e 94 73 66 	call	0xcce6	; 0xcce6 <strnlen_P>
		x = 14 - ln / 2;
    b474:	86 95       	lsr	r24
    b476:	0f 2d       	mov	r16, r15
    b478:	08 1b       	sub	r16, r24
    b47a:	0c 1b       	sub	r16, r28
    b47c:	8c 2f       	mov	r24, r28
    b47e:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    b480:	21 96       	adiw	r28, 0x01	; 1
    b482:	fe 01       	movw	r30, r28
    b484:	31 97       	sbiw	r30, 0x01	; 1
    b486:	44 91       	lpm	r20, Z
    b488:	44 23       	and	r20, r20
    b48a:	89 f0       	breq	.+34     	; 0xb4ae <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    b48c:	61 2f       	mov	r22, r17
    b48e:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    b492:	60 e0       	ldi	r22, 0x00	; 0
    b494:	8e e9       	ldi	r24, 0x9E	; 158
    b496:	9f e0       	ldi	r25, 0x0F	; 15
    b498:	0e 94 88 46 	call	0x8d10	; 0x8d10 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    b49c:	80 91 a2 0f 	lds	r24, 0x0FA2
    b4a0:	80 fd       	sbrc	r24, 0
    b4a2:	ec cf       	rjmp	.-40     	; 0xb47c <stream_dialogue+0x2c>
    b4a4:	80 e7       	ldi	r24, 0x70	; 112
    b4a6:	97 e1       	ldi	r25, 0x17	; 23
    b4a8:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <WaitUs>
    b4ac:	e7 cf       	rjmp	.-50     	; 0xb47c <stream_dialogue+0x2c>
		}
		y++;
    b4ae:	1f 5f       	subi	r17, 0xFF	; 255
    b4b0:	d8 cf       	rjmp	.-80     	; 0xb462 <stream_dialogue+0x12>
	}
}
    b4b2:	df 91       	pop	r29
    b4b4:	cf 91       	pop	r28
    b4b6:	1f 91       	pop	r17
    b4b8:	0f 91       	pop	r16
    b4ba:	ff 90       	pop	r15
    b4bc:	08 95       	ret

0000b4be <map_particles>:

void map_particles()
{
    b4be:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    b4c0:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    b4c2:	40 e0       	ldi	r20, 0x00	; 0
    b4c4:	6a ef       	ldi	r22, 0xFA	; 250
    b4c6:	73 e3       	ldi	r23, 0x33	; 51
    b4c8:	8c 2f       	mov	r24, r28
    b4ca:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    b4ce:	cf 5f       	subi	r28, 0xFF	; 255
    b4d0:	c4 31       	cpi	r28, 0x14	; 20
    b4d2:	b9 f7       	brne	.-18     	; 0xb4c2 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    b4d4:	cf 91       	pop	r28
    b4d6:	08 95       	ret

0000b4d8 <place_particles>:

void place_particles()
{
    b4d8:	0f 93       	push	r16
    b4da:	1f 93       	push	r17
    b4dc:	cf 93       	push	r28
    b4de:	df 93       	push	r29
    b4e0:	1f 92       	push	r1
    b4e2:	cd b7       	in	r28, 0x3d	; 61
    b4e4:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    b4e6:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    b4e8:	68 ec       	ldi	r22, 0xC8	; 200
    b4ea:	80 e0       	ldi	r24, 0x00	; 0
    b4ec:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <LBRandom>
    b4f0:	48 2f       	mov	r20, r24
    b4f2:	60 ee       	ldi	r22, 0xE0	; 224
    b4f4:	80 e0       	ldi	r24, 0x00	; 0
    b4f6:	49 83       	std	Y+1, r20	; 0x01
    b4f8:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <LBRandom>
    b4fc:	68 2f       	mov	r22, r24
    b4fe:	01 e0       	ldi	r16, 0x01	; 1
    b500:	21 e0       	ldi	r18, 0x01	; 1
    b502:	49 81       	ldd	r20, Y+1	; 0x01
    b504:	81 2f       	mov	r24, r17
    b506:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    b50a:	1f 5f       	subi	r17, 0xFF	; 255
    b50c:	14 31       	cpi	r17, 0x14	; 20
    b50e:	61 f7       	brne	.-40     	; 0xb4e8 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    b510:	0f 90       	pop	r0
    b512:	df 91       	pop	r29
    b514:	cf 91       	pop	r28
    b516:	1f 91       	pop	r17
    b518:	0f 91       	pop	r16
    b51a:	08 95       	ret

0000b51c <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    b51c:	ef 92       	push	r14
    b51e:	ff 92       	push	r15
    b520:	0f 93       	push	r16
    b522:	1f 93       	push	r17
    b524:	cf 93       	push	r28
    b526:	df 93       	push	r29
    b528:	d8 2f       	mov	r29, r24
    b52a:	16 2f       	mov	r17, r22
    b52c:	84 ed       	ldi	r24, 0xD4	; 212
    b52e:	e8 2e       	mov	r14, r24
    b530:	8f e0       	ldi	r24, 0x0F	; 15
    b532:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    b534:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    b536:	f7 01       	movw	r30, r14
    b538:	40 81       	ld	r20, Z
    b53a:	4d 0f       	add	r20, r29
    b53c:	01 e0       	ldi	r16, 0x01	; 1
    b53e:	21 e0       	ldi	r18, 0x01	; 1
    b540:	31 97       	sbiw	r30, 0x01	; 1
    b542:	60 81       	ld	r22, Z
    b544:	8c 2f       	mov	r24, r28
    b546:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    b54a:	f7 01       	movw	r30, r14
    b54c:	80 81       	ld	r24, Z
    b54e:	89 3c       	cpi	r24, 0xC9	; 201
    b550:	50 f0       	brcs	.+20     	; 0xb566 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    b552:	60 ee       	ldi	r22, 0xE0	; 224
    b554:	80 e0       	ldi	r24, 0x00	; 0
    b556:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <LBRandom>
    b55a:	21 e0       	ldi	r18, 0x01	; 1
    b55c:	41 2f       	mov	r20, r17
    b55e:	68 2f       	mov	r22, r24
    b560:	8c 2f       	mov	r24, r28
    b562:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    b566:	cf 5f       	subi	r28, 0xFF	; 255
    b568:	f4 e0       	ldi	r31, 0x04	; 4
    b56a:	ef 0e       	add	r14, r31
    b56c:	f1 1c       	adc	r15, r1
    b56e:	c4 31       	cpi	r28, 0x14	; 20
    b570:	11 f7       	brne	.-60     	; 0xb536 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    b572:	df 91       	pop	r29
    b574:	cf 91       	pop	r28
    b576:	1f 91       	pop	r17
    b578:	0f 91       	pop	r16
    b57a:	ff 90       	pop	r15
    b57c:	ef 90       	pop	r14
    b57e:	08 95       	ret

0000b580 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    b580:	82 50       	subi	r24, 0x02	; 2
    b582:	87 30       	cpi	r24, 0x07	; 7
    b584:	48 f4       	brcc	.+18     	; 0xb598 <get_emarald_map+0x18>
    b586:	e8 2f       	mov	r30, r24
    b588:	f0 e0       	ldi	r31, 0x00	; 0
    b58a:	ee 0f       	add	r30, r30
    b58c:	ff 1f       	adc	r31, r31
    b58e:	ee 5f       	subi	r30, 0xFE	; 254
    b590:	fa 4f       	sbci	r31, 0xFA	; 250
    b592:	80 81       	ld	r24, Z
    b594:	91 81       	ldd	r25, Z+1	; 0x01
    b596:	08 95       	ret
    b598:	8b ee       	ldi	r24, 0xEB	; 235
    b59a:	93 e3       	ldi	r25, 0x33	; 51
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    b59c:	08 95       	ret

0000b59e <music_transition>:

void music_transition()
{
	if (is_space())
    b59e:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    b5a2:	88 23       	and	r24, r24
    b5a4:	19 f0       	breq	.+6      	; 0xb5ac <music_transition+0xe>
	{
		StartSong(spacesong);
    b5a6:	8f ed       	ldi	r24, 0xDF	; 223
    b5a8:	9b e0       	ldi	r25, 0x0B	; 11
    b5aa:	06 c0       	rjmp	.+12     	; 0xb5b8 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    b5ac:	80 91 b9 0d 	lds	r24, 0x0DB9
    b5b0:	88 23       	and	r24, r24
    b5b2:	21 f0       	breq	.+8      	; 0xb5bc <music_transition+0x1e>
	{
		StartSong(planetsong);
    b5b4:	8f e7       	ldi	r24, 0x7F	; 127
    b5b6:	92 e1       	ldi	r25, 0x12	; 18
    b5b8:	0c 94 d8 39 	jmp	0x73b0	; 0x73b0 <StartSong>
    b5bc:	08 95       	ret

0000b5be <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    b5be:	cf 92       	push	r12
    b5c0:	df 92       	push	r13
    b5c2:	ef 92       	push	r14
    b5c4:	ff 92       	push	r15
    b5c6:	0f 93       	push	r16
    b5c8:	1f 93       	push	r17
    b5ca:	cf 93       	push	r28
    b5cc:	df 93       	push	r29
    b5ce:	1f 92       	push	r1
    b5d0:	cd b7       	in	r28, 0x3d	; 61
    b5d2:	de b7       	in	r29, 0x3e	; 62
    b5d4:	c8 2e       	mov	r12, r24
    b5d6:	e6 2e       	mov	r14, r22
    b5d8:	12 2f       	mov	r17, r18
    b5da:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    b5dc:	49 83       	std	Y+1, r20	; 0x01
    b5de:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <fade_through>
	Screen.scrollX = 0;
    b5e2:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b5e6:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    b5ea:	80 e2       	ldi	r24, 0x20	; 32
    b5ec:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    b5f0:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    b5f4:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    b5f8:	10 92 c2 0d 	sts	0x0DC2, r1
	map_particles();
    b5fc:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <map_particles>
	map_ship();
    b600:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <map_ship>
	place_particles();
    b604:	0e 94 6c 5a 	call	0xb4d8	; 0xb4d8 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    b608:	40 eb       	ldi	r20, 0xB0	; 176
    b60a:	53 e5       	ldi	r21, 0x53	; 83
    b60c:	69 81       	ldd	r22, Y+1	; 0x01
    b60e:	80 e0       	ldi	r24, 0x00	; 0
    b610:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
	game.current_level_index = index;
    b614:	c0 92 b9 0d 	sts	0x0DB9, r12
	music_transition();
    b618:	0e 94 cf 5a 	call	0xb59e	; 0xb59e <music_transition>
	if (!is_space())
    b61c:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    b620:	81 11       	cpse	r24, r1
    b622:	0f c0       	rjmp	.+30     	; 0xb642 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    b624:	8c 2d       	mov	r24, r12
    b626:	0e 94 c0 5a 	call	0xb580	; 0xb580 <get_emarald_map>
    b62a:	40 e0       	ldi	r20, 0x00	; 0
    b62c:	bc 01       	movw	r22, r24
    b62e:	88 e0       	ldi	r24, 0x08	; 8
    b630:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    b634:	01 e0       	ldi	r16, 0x01	; 1
    b636:	21 e0       	ldi	r18, 0x01	; 1
    b638:	40 e3       	ldi	r20, 0x30	; 48
    b63a:	60 e7       	ldi	r22, 0x70	; 112
    b63c:	88 e0       	ldi	r24, 0x08	; 8
    b63e:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    b642:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    b644:	81 e0       	ldi	r24, 0x01	; 1
    b646:	90 e0       	ldi	r25, 0x00	; 0
    b648:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    b64c:	84 e3       	ldi	r24, 0x34	; 52
    b64e:	9e e0       	ldi	r25, 0x0E	; 14
    b650:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    b654:	40 e0       	ldi	r20, 0x00	; 0
    b656:	bc 01       	movw	r22, r24
    b658:	80 e0       	ldi	r24, 0x00	; 0
    b65a:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    b65e:	02 e0       	ldi	r16, 0x02	; 2
    b660:	24 e0       	ldi	r18, 0x04	; 4
    b662:	48 e6       	ldi	r20, 0x68	; 104
    b664:	68 e6       	ldi	r22, 0x68	; 104
    b666:	80 e0       	ldi	r24, 0x00	; 0
    b668:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
		frame_counter++;
    b66c:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    b66e:	8d 2d       	mov	r24, r13
    b670:	8f 70       	andi	r24, 0x0F	; 15
    b672:	29 f4       	brne	.+10     	; 0xb67e <planet_transition+0xc0>
    b674:	90 91 b3 0c 	lds	r25, 0x0CB3
    b678:	9e 0d       	add	r25, r14
    b67a:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    b67e:	6f 2d       	mov	r22, r15
    b680:	81 2f       	mov	r24, r17
    b682:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <animate_particles>
		LBRotateSprites();
    b686:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    b68a:	8f ef       	ldi	r24, 0xFF	; 255
    b68c:	d8 12       	cpse	r13, r24
    b68e:	da cf       	rjmp	.-76     	; 0xb644 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    b690:	82 e0       	ldi	r24, 0x02	; 2
    b692:	80 93 b8 0d 	sts	0x0DB8, r24
	ClearVram();
    b696:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b69a:	64 e1       	ldi	r22, 0x14	; 20
    b69c:	80 e0       	ldi	r24, 0x00	; 0
    b69e:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
	LBRotateSprites();
    b6a2:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	fade_through();
    b6a6:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <fade_through>
	game.level_score = 0;
    b6aa:	10 92 b1 0d 	sts	0x0DB1, r1
    b6ae:	10 92 b0 0d 	sts	0x0DB0, r1
	load_level(index, true);
    b6b2:	61 e0       	ldi	r22, 0x01	; 1
    b6b4:	8c 2d       	mov	r24, r12
    b6b6:	0e 94 f8 58 	call	0xb1f0	; 0xb1f0 <load_level>
	init_player_state();
    b6ba:	0e 94 c1 48 	call	0x9182	; 0x9182 <init_player_state>
	init_enemy_state();
}
    b6be:	0f 90       	pop	r0
    b6c0:	df 91       	pop	r29
    b6c2:	cf 91       	pop	r28
    b6c4:	1f 91       	pop	r17
    b6c6:	0f 91       	pop	r16
    b6c8:	ff 90       	pop	r15
    b6ca:	ef 90       	pop	r14
    b6cc:	df 90       	pop	r13
    b6ce:	cf 90       	pop	r12
	LBRotateSprites();
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    b6d0:	0c 94 ad 48 	jmp	0x915a	; 0x915a <init_enemy_state>

0000b6d4 <intro>:
}


void intro()
{
    b6d4:	0f 93       	push	r16
	fade_through();
    b6d6:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <fade_through>
	game.lives = LIVES;
    b6da:	e6 ea       	ldi	r30, 0xA6	; 166
    b6dc:	fd e0       	ldi	r31, 0x0D	; 13
    b6de:	85 e0       	ldi	r24, 0x05	; 5
    b6e0:	81 8b       	std	Z+17, r24	; 0x11
	game.score = 0;
    b6e2:	11 86       	std	Z+9, r1	; 0x09
    b6e4:	10 86       	std	Z+8, r1	; 0x08
	game.level_score = 0;
    b6e6:	13 86       	std	Z+11, r1	; 0x0b
    b6e8:	12 86       	std	Z+10, r1	; 0x0a
	game.time = 0;
    b6ea:	15 86       	std	Z+13, r1	; 0x0d
    b6ec:	14 86       	std	Z+12, r1	; 0x0c
	StartSong(planetsong);
    b6ee:	8f e7       	ldi	r24, 0x7F	; 127
    b6f0:	92 e1       	ldi	r25, 0x12	; 18
    b6f2:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    b6f6:	40 e0       	ldi	r20, 0x00	; 0
    b6f8:	6b ee       	ldi	r22, 0xEB	; 235
    b6fa:	73 e3       	ldi	r23, 0x33	; 51
    b6fc:	80 e0       	ldi	r24, 0x00	; 0
    b6fe:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    b702:	01 e0       	ldi	r16, 0x01	; 1
    b704:	21 e0       	ldi	r18, 0x01	; 1
    b706:	40 e3       	ldi	r20, 0x30	; 48
    b708:	60 e5       	ldi	r22, 0x50	; 80
    b70a:	80 e0       	ldi	r24, 0x00	; 0
    b70c:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    b710:	40 e0       	ldi	r20, 0x00	; 0
    b712:	6e ee       	ldi	r22, 0xEE	; 238
    b714:	73 e3       	ldi	r23, 0x33	; 51
    b716:	81 e0       	ldi	r24, 0x01	; 1
    b718:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    b71c:	21 e0       	ldi	r18, 0x01	; 1
    b71e:	40 e3       	ldi	r20, 0x30	; 48
    b720:	60 e6       	ldi	r22, 0x60	; 96
    b722:	81 e0       	ldi	r24, 0x01	; 1
    b724:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    b728:	40 e0       	ldi	r20, 0x00	; 0
    b72a:	68 ee       	ldi	r22, 0xE8	; 232
    b72c:	73 e3       	ldi	r23, 0x33	; 51
    b72e:	82 e0       	ldi	r24, 0x02	; 2
    b730:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    b734:	21 e0       	ldi	r18, 0x01	; 1
    b736:	40 e3       	ldi	r20, 0x30	; 48
    b738:	60 e7       	ldi	r22, 0x70	; 112
    b73a:	82 e0       	ldi	r24, 0x02	; 2
    b73c:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    b740:	40 e0       	ldi	r20, 0x00	; 0
    b742:	65 ee       	ldi	r22, 0xE5	; 229
    b744:	73 e3       	ldi	r23, 0x33	; 51
    b746:	83 e0       	ldi	r24, 0x03	; 3
    b748:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    b74c:	21 e0       	ldi	r18, 0x01	; 1
    b74e:	40 e3       	ldi	r20, 0x30	; 48
    b750:	60 e8       	ldi	r22, 0x80	; 128
    b752:	83 e0       	ldi	r24, 0x03	; 3
    b754:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    b758:	40 e0       	ldi	r20, 0x00	; 0
    b75a:	62 ee       	ldi	r22, 0xE2	; 226
    b75c:	73 e3       	ldi	r23, 0x33	; 51
    b75e:	84 e0       	ldi	r24, 0x04	; 4
    b760:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    b764:	21 e0       	ldi	r18, 0x01	; 1
    b766:	40 e3       	ldi	r20, 0x30	; 48
    b768:	60 e9       	ldi	r22, 0x90	; 144
    b76a:	84 e0       	ldi	r24, 0x04	; 4
    b76c:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	LBRotateSprites();
    b770:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    b774:	6c e0       	ldi	r22, 0x0C	; 12
    b776:	8f e7       	ldi	r24, 0x7F	; 127
    b778:	9a e0       	ldi	r25, 0x0A	; 10
    b77a:	0e 94 28 5a 	call	0xb450	; 0xb450 <stream_dialogue>
	LBWaitSeconds(1);
    b77e:	81 e0       	ldi	r24, 0x01	; 1
    b780:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    b784:	07 ec       	ldi	r16, 0xC7	; 199
    b786:	2d ef       	ldi	r18, 0xFD	; 253
    b788:	4c e1       	ldi	r20, 0x1C	; 28
    b78a:	61 e0       	ldi	r22, 0x01	; 1
    b78c:	80 e0       	ldi	r24, 0x00	; 0
    b78e:	0e 94 df 5a 	call	0xb5be	; 0xb5be <planet_transition>
}
    b792:	0f 91       	pop	r16
    b794:	08 95       	ret

0000b796 <load_splash>:

void load_splash()
{
	fade_through();
    b796:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <fade_through>
	Screen.scrollX = 0;
    b79a:	ef ea       	ldi	r30, 0xAF	; 175
    b79c:	fc e0       	ldi	r31, 0x0C	; 12
    b79e:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    b7a0:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    b7a2:	80 e2       	ldi	r24, 0x20	; 32
    b7a4:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    b7a6:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    b7a8:	e6 ea       	ldi	r30, 0xA6	; 166
    b7aa:	fd e0       	ldi	r31, 0x0D	; 13
    b7ac:	12 8a       	std	Z+18, r1	; 0x12
	game.selection = START_SELECTED;
    b7ae:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b7b0:	64 e1       	ldi	r22, 0x14	; 20
    b7b2:	80 e0       	ldi	r24, 0x00	; 0
    b7b4:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
	LBRotateSprites();
    b7b8:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    b7bc:	4c ea       	ldi	r20, 0xAC	; 172
    b7be:	5b e0       	ldi	r21, 0x0B	; 11
    b7c0:	6f e0       	ldi	r22, 0x0F	; 15
    b7c2:	88 e0       	ldi	r24, 0x08	; 8
    b7c4:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    b7c8:	40 ea       	ldi	r20, 0xA0	; 160
    b7ca:	5b e0       	ldi	r21, 0x0B	; 11
    b7cc:	60 e1       	ldi	r22, 0x10	; 16
    b7ce:	88 e0       	ldi	r24, 0x08	; 8
    b7d0:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    b7d4:	4a ec       	ldi	r20, 0xCA	; 202
    b7d6:	5b e0       	ldi	r21, 0x0B	; 11
    b7d8:	65 e1       	ldi	r22, 0x15	; 21
    b7da:	84 e0       	ldi	r24, 0x04	; 4
    b7dc:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    b7e0:	42 eb       	ldi	r20, 0xB2	; 178
    b7e2:	5b e0       	ldi	r21, 0x0B	; 11
    b7e4:	6a e1       	ldi	r22, 0x1A	; 26
    b7e6:	83 e0       	ldi	r24, 0x03	; 3
    b7e8:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    b7ec:	43 ef       	ldi	r20, 0xF3	; 243
    b7ee:	54 e5       	ldi	r21, 0x54	; 84
    b7f0:	65 e0       	ldi	r22, 0x05	; 5
    b7f2:	86 e0       	ldi	r24, 0x06	; 6
    b7f4:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    b7f8:	40 e0       	ldi	r20, 0x00	; 0
    b7fa:	63 e0       	ldi	r22, 0x03	; 3
    b7fc:	74 e3       	ldi	r23, 0x34	; 52
    b7fe:	80 e0       	ldi	r24, 0x00	; 0
    b800:	0c 94 c4 47 	jmp	0x8f88	; 0x8f88 <LBMapSprite>

0000b804 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    b804:	2f 92       	push	r2
    b806:	3f 92       	push	r3
    b808:	5f 92       	push	r5
    b80a:	6f 92       	push	r6
    b80c:	7f 92       	push	r7
    b80e:	8f 92       	push	r8
    b810:	9f 92       	push	r9
    b812:	af 92       	push	r10
    b814:	bf 92       	push	r11
    b816:	cf 92       	push	r12
    b818:	df 92       	push	r13
    b81a:	ef 92       	push	r14
    b81c:	ff 92       	push	r15
    b81e:	0f 93       	push	r16
    b820:	1f 93       	push	r17
    b822:	cf 93       	push	r28
    b824:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    b826:	81 e0       	ldi	r24, 0x01	; 1
    b828:	80 93 b8 0d 	sts	0x0DB8, r24
	game.high_score_index = -1;
    b82c:	8f ef       	ldi	r24, 0xFF	; 255
    b82e:	80 93 b6 0d 	sts	0x0DB6, r24
	fade_through();
    b832:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <fade_through>
	Screen.scrollX = 0;
    b836:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b83a:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    b83e:	80 e2       	ldi	r24, 0x20	; 32
    b840:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    b844:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    b848:	86 e8       	ldi	r24, 0x86	; 134
    b84a:	9d e0       	ldi	r25, 0x0D	; 13
    b84c:	0e 94 bf 4a 	call	0x957e	; 0x957e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    b850:	40 ea       	ldi	r20, 0xA0	; 160
    b852:	5b e0       	ldi	r21, 0x0B	; 11
    b854:	63 e0       	ldi	r22, 0x03	; 3
    b856:	89 e0       	ldi	r24, 0x09	; 9
    b858:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    b85c:	40 e0       	ldi	r20, 0x00	; 0
    b85e:	6b ee       	ldi	r22, 0xEB	; 235
    b860:	73 e3       	ldi	r23, 0x33	; 51
    b862:	80 e0       	ldi	r24, 0x00	; 0
    b864:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    b868:	40 e0       	ldi	r20, 0x00	; 0
    b86a:	6e ee       	ldi	r22, 0xEE	; 238
    b86c:	73 e3       	ldi	r23, 0x33	; 51
    b86e:	81 e0       	ldi	r24, 0x01	; 1
    b870:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    b874:	01 e0       	ldi	r16, 0x01	; 1
    b876:	21 e0       	ldi	r18, 0x01	; 1
    b878:	48 e1       	ldi	r20, 0x18	; 24
    b87a:	68 e3       	ldi	r22, 0x38	; 56
    b87c:	80 e0       	ldi	r24, 0x00	; 0
    b87e:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    b882:	21 e0       	ldi	r18, 0x01	; 1
    b884:	48 e1       	ldi	r20, 0x18	; 24
    b886:	68 ea       	ldi	r22, 0xA8	; 168
    b888:	81 e0       	ldi	r24, 0x01	; 1
    b88a:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
    b88e:	88 e8       	ldi	r24, 0x88	; 136
    b890:	a8 2e       	mov	r10, r24
    b892:	8d e0       	ldi	r24, 0x0D	; 13
    b894:	b8 2e       	mov	r11, r24
    b896:	99 e8       	ldi	r25, 0x89	; 137
    b898:	c9 2e       	mov	r12, r25
    b89a:	9d e0       	ldi	r25, 0x0D	; 13
    b89c:	d9 2e       	mov	r13, r25
    b89e:	2a e8       	ldi	r18, 0x8A	; 138
    b8a0:	82 2e       	mov	r8, r18
    b8a2:	2d e0       	ldi	r18, 0x0D	; 13
    b8a4:	92 2e       	mov	r9, r18
    b8a6:	74 01       	movw	r14, r8
    b8a8:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    b8aa:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    b8ac:	35 e0       	ldi	r19, 0x05	; 5
    b8ae:	53 2e       	mov	r5, r19
    b8b0:	41 ea       	ldi	r20, 0xA1	; 161
    b8b2:	64 2e       	mov	r6, r20
    b8b4:	4d e0       	ldi	r20, 0x0D	; 13
    b8b6:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    b8b8:	11 e4       	ldi	r17, 0x41	; 65
    b8ba:	0e 2d       	mov	r16, r14
    b8bc:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    b8be:	80 2f       	mov	r24, r16
    b8c0:	65 2d       	mov	r22, r5
    b8c2:	0e 94 7d 64 	call	0xc8fa	; 0xc8fa <__udivmodqi4>
    b8c6:	41 e0       	ldi	r20, 0x01	; 1
    b8c8:	48 0f       	add	r20, r24
    b8ca:	20 e0       	ldi	r18, 0x00	; 0
    b8cc:	6c 2f       	mov	r22, r28
    b8ce:	89 e0       	ldi	r24, 0x09	; 9
    b8d0:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    b8d4:	40 e2       	ldi	r20, 0x20	; 32
    b8d6:	6c 2f       	mov	r22, r28
    b8d8:	8a e0       	ldi	r24, 0x0A	; 10
    b8da:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    b8de:	f5 01       	movw	r30, r10
    b8e0:	40 81       	ld	r20, Z
    b8e2:	6c 2f       	mov	r22, r28
    b8e4:	8b e0       	ldi	r24, 0x0B	; 11
    b8e6:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    b8ea:	f6 01       	movw	r30, r12
    b8ec:	40 81       	ld	r20, Z
    b8ee:	6c 2f       	mov	r22, r28
    b8f0:	8c e0       	ldi	r24, 0x0C	; 12
    b8f2:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    b8f6:	f7 01       	movw	r30, r14
    b8f8:	40 81       	ld	r20, Z
    b8fa:	6c 2f       	mov	r22, r28
    b8fc:	8d e0       	ldi	r24, 0x0D	; 13
    b8fe:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    b902:	40 e2       	ldi	r20, 0x20	; 32
    b904:	6c 2f       	mov	r22, r28
    b906:	8e e0       	ldi	r24, 0x0E	; 14
    b908:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    b90c:	f7 01       	movw	r30, r14
    b90e:	21 80       	ldd	r2, Z+1	; 0x01
    b910:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    b912:	21 e0       	ldi	r18, 0x01	; 1
    b914:	a1 01       	movw	r20, r2
    b916:	6c 2f       	mov	r22, r28
    b918:	83 e1       	ldi	r24, 0x13	; 19
    b91a:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    b91e:	20 91 ae 0d 	lds	r18, 0x0DAE
    b922:	30 91 af 0d 	lds	r19, 0x0DAF
    b926:	22 16       	cp	r2, r18
    b928:	33 06       	cpc	r3, r19
    b92a:	08 f0       	brcs	.+2      	; 0xb92e <load_high_scores+0x12a>
    b92c:	55 c0       	rjmp	.+170    	; 0xb9d8 <load_high_scores+0x1d4>
    b92e:	80 91 b6 0d 	lds	r24, 0x0DB6
    b932:	8f 3f       	cpi	r24, 0xFF	; 255
    b934:	09 f0       	breq	.+2      	; 0xb938 <load_high_scores+0x134>
    b936:	50 c0       	rjmp	.+160    	; 0xb9d8 <load_high_scores+0x1d4>
    b938:	a1 ea       	ldi	r26, 0xA1	; 161
    b93a:	bd e0       	ldi	r27, 0x0D	; 13
    b93c:	cd 01       	movw	r24, r26
    b93e:	05 97       	sbiw	r24, 0x05	; 5
    b940:	4e e1       	ldi	r20, 0x1E	; 30
    b942:	48 0f       	add	r20, r24
    b944:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    b946:	04 17       	cp	r16, r20
    b948:	40 f4       	brcc	.+16     	; 0xb95a <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    b94a:	fc 01       	movw	r30, r24
    b94c:	45 2d       	mov	r20, r5
    b94e:	01 90       	ld	r0, Z+
    b950:	0d 92       	st	X+, r0
    b952:	4a 95       	dec	r20
    b954:	e1 f7       	brne	.-8      	; 0xb94e <load_high_scores+0x14a>
    b956:	dc 01       	movw	r26, r24
    b958:	f1 cf       	rjmp	.-30     	; 0xb93c <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    b95a:	f5 01       	movw	r30, r10
    b95c:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    b95e:	f6 01       	movw	r30, r12
    b960:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    b962:	f7 01       	movw	r30, r14
    b964:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    b966:	32 83       	std	Z+2, r19	; 0x02
    b968:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    b96a:	f5 01       	movw	r30, r10
    b96c:	40 81       	ld	r20, Z
    b96e:	6c 2f       	mov	r22, r28
    b970:	8b e0       	ldi	r24, 0x0B	; 11
    b972:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    b976:	f6 01       	movw	r30, r12
    b978:	40 81       	ld	r20, Z
    b97a:	6c 2f       	mov	r22, r28
    b97c:	8c e0       	ldi	r24, 0x0C	; 12
    b97e:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    b982:	f7 01       	movw	r30, r14
    b984:	40 81       	ld	r20, Z
    b986:	6c 2f       	mov	r22, r28
    b988:	8d e0       	ldi	r24, 0x0D	; 13
    b98a:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    b98e:	40 91 ae 0d 	lds	r20, 0x0DAE
    b992:	50 91 af 0d 	lds	r21, 0x0DAF
    b996:	21 e0       	ldi	r18, 0x01	; 1
    b998:	6c 2f       	mov	r22, r28
    b99a:	83 e1       	ldi	r24, 0x13	; 19
    b99c:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
			game.high_score_index = i;
    b9a0:	00 93 b6 0d 	sts	0x0DB6, r16
			LBMapSprite(2, map_down_arrow, 0);
    b9a4:	40 e0       	ldi	r20, 0x00	; 0
    b9a6:	60 e0       	ldi	r22, 0x00	; 0
    b9a8:	74 e3       	ldi	r23, 0x34	; 52
    b9aa:	82 e0       	ldi	r24, 0x02	; 2
    b9ac:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    b9b0:	40 e0       	ldi	r20, 0x00	; 0
    b9b2:	6d ef       	ldi	r22, 0xFD	; 253
    b9b4:	73 e3       	ldi	r23, 0x33	; 51
    b9b6:	83 e0       	ldi	r24, 0x03	; 3
    b9b8:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    b9bc:	01 e0       	ldi	r16, 0x01	; 1
    b9be:	21 e0       	ldi	r18, 0x01	; 1
    b9c0:	4d 2f       	mov	r20, r29
    b9c2:	68 e5       	ldi	r22, 0x58	; 88
    b9c4:	82 e0       	ldi	r24, 0x02	; 2
    b9c6:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    b9ca:	21 e0       	ldi	r18, 0x01	; 1
    b9cc:	40 e1       	ldi	r20, 0x10	; 16
    b9ce:	4d 0f       	add	r20, r29
    b9d0:	68 e5       	ldi	r22, 0x58	; 88
    b9d2:	83 e0       	ldi	r24, 0x03	; 3
    b9d4:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
		}
		
		ypos += 2;
    b9d8:	ce 5f       	subi	r28, 0xFE	; 254
    b9da:	f5 e0       	ldi	r31, 0x05	; 5
    b9dc:	af 0e       	add	r10, r31
    b9de:	b1 1c       	adc	r11, r1
    b9e0:	85 e0       	ldi	r24, 0x05	; 5
    b9e2:	c8 0e       	add	r12, r24
    b9e4:	d1 1c       	adc	r13, r1
    b9e6:	e5 e0       	ldi	r30, 0x05	; 5
    b9e8:	ee 0e       	add	r14, r30
    b9ea:	f1 1c       	adc	r15, r1
    b9ec:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    b9ee:	c3 31       	cpi	r28, 0x13	; 19
    b9f0:	09 f0       	breq	.+2      	; 0xb9f4 <load_high_scores+0x1f0>
    b9f2:	63 cf       	rjmp	.-314    	; 0xb8ba <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    b9f4:	47 e7       	ldi	r20, 0x77	; 119
    b9f6:	5b e0       	ldi	r21, 0x0B	; 11
    b9f8:	66 e1       	ldi	r22, 0x16	; 22
    b9fa:	89 e0       	ldi	r24, 0x09	; 9
}
    b9fc:	df 91       	pop	r29
    b9fe:	cf 91       	pop	r28
    ba00:	1f 91       	pop	r17
    ba02:	0f 91       	pop	r16
    ba04:	ff 90       	pop	r15
    ba06:	ef 90       	pop	r14
    ba08:	df 90       	pop	r13
    ba0a:	cf 90       	pop	r12
    ba0c:	bf 90       	pop	r11
    ba0e:	af 90       	pop	r10
    ba10:	9f 90       	pop	r9
    ba12:	8f 90       	pop	r8
    ba14:	7f 90       	pop	r7
    ba16:	6f 90       	pop	r6
    ba18:	5f 90       	pop	r5
    ba1a:	3f 90       	pop	r3
    ba1c:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    ba1e:	0c 94 f3 46 	jmp	0x8de6	; 0x8de6 <LBPrint>

0000ba22 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    ba22:	64 e1       	ldi	r22, 0x14	; 20
    ba24:	80 e0       	ldi	r24, 0x00	; 0
    ba26:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
	LBRotateSprites();
    ba2a:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	init_player_state();
    ba2e:	0e 94 c1 48 	call	0x9182	; 0x9182 <init_player_state>
	init_enemy_state();
    ba32:	0e 94 ad 48 	call	0x915a	; 0x915a <init_enemy_state>
	StopSong();
    ba36:	0e 94 01 3a 	call	0x7402	; 0x7402 <StopSong>
	load_high_scores();
    ba3a:	0c 94 02 5c 	jmp	0xb804	; 0xb804 <load_high_scores>

0000ba3e <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    ba3e:	0f 93       	push	r16
    ba40:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    ba42:	80 91 9e 0f 	lds	r24, 0x0F9E
    ba46:	c0 91 bf 0d 	lds	r28, 0x0DBF
    ba4a:	85 ff       	sbrs	r24, 5
    ba4c:	06 c0       	rjmp	.+12     	; 0xba5a <update_splash+0x1c>
    ba4e:	c1 11       	cpse	r28, r1
    ba50:	04 c0       	rjmp	.+8      	; 0xba5a <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    ba52:	81 e0       	ldi	r24, 0x01	; 1
    ba54:	80 93 bf 0d 	sts	0x0DBF, r24
    ba58:	06 c0       	rjmp	.+12     	; 0xba66 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    ba5a:	84 ff       	sbrs	r24, 4
    ba5c:	0a c0       	rjmp	.+20     	; 0xba72 <update_splash+0x34>
    ba5e:	c1 30       	cpi	r28, 0x01	; 1
    ba60:	41 f4       	brne	.+16     	; 0xba72 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    ba62:	10 92 bf 0d 	sts	0x0DBF, r1
		SFX_NAVIGATE;
    ba66:	41 e0       	ldi	r20, 0x01	; 1
    ba68:	6f ef       	ldi	r22, 0xFF	; 255
    ba6a:	82 e0       	ldi	r24, 0x02	; 2
    ba6c:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
    ba70:	1c c0       	rjmp	.+56     	; 0xbaaa <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    ba72:	8e e9       	ldi	r24, 0x9E	; 158
    ba74:	9f e0       	ldi	r25, 0x0F	; 15
    ba76:	0e 94 1e 5a 	call	0xb43c	; 0xb43c <select_pressed>
    ba7a:	88 23       	and	r24, r24
    ba7c:	b1 f0       	breq	.+44     	; 0xbaaa <update_splash+0x6c>
    ba7e:	c1 11       	cpse	r28, r1
    ba80:	09 c0       	rjmp	.+18     	; 0xba94 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    ba82:	41 e0       	ldi	r20, 0x01	; 1
    ba84:	6f ef       	ldi	r22, 0xFF	; 255
    ba86:	82 e0       	ldi	r24, 0x02	; 2
    ba88:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    ba8c:	cf 91       	pop	r28
    ba8e:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    ba90:	0c 94 6a 5b 	jmp	0xb6d4	; 0xb6d4 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    ba94:	c1 30       	cpi	r28, 0x01	; 1
    ba96:	49 f4       	brne	.+18     	; 0xbaaa <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    ba98:	41 e0       	ldi	r20, 0x01	; 1
    ba9a:	6f ef       	ldi	r22, 0xFF	; 255
    ba9c:	82 e0       	ldi	r24, 0x02	; 2
    ba9e:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    baa2:	cf 91       	pop	r28
    baa4:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    baa6:	0c 94 02 5c 	jmp	0xb804	; 0xb804 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    baaa:	80 91 bf 0d 	lds	r24, 0x0DBF
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    baae:	01 e0       	ldi	r16, 0x01	; 1
    bab0:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    bab2:	81 11       	cpse	r24, r1
    bab4:	03 c0       	rjmp	.+6      	; 0xbabc <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    bab6:	48 e7       	ldi	r20, 0x78	; 120
    bab8:	68 e3       	ldi	r22, 0x38	; 56
    baba:	03 c0       	rjmp	.+6      	; 0xbac2 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    babc:	40 e8       	ldi	r20, 0x80	; 128
    babe:	68 e3       	ldi	r22, 0x38	; 56
    bac0:	80 e0       	ldi	r24, 0x00	; 0
    bac2:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
	}
}
    bac6:	cf 91       	pop	r28
    bac8:	0f 91       	pop	r16
    baca:	08 95       	ret

0000bacc <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    bacc:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    bace:	80 91 9e 0f 	lds	r24, 0x0F9E
    bad2:	90 91 9f 0f 	lds	r25, 0x0F9F
    bad6:	91 ff       	sbrs	r25, 1
    bad8:	12 c0       	rjmp	.+36     	; 0xbafe <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    bada:	41 e0       	ldi	r20, 0x01	; 1
    badc:	6f ef       	ldi	r22, 0xFF	; 255
    bade:	82 e0       	ldi	r24, 0x02	; 2
    bae0:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
		game.high_score_index = -1;
    bae4:	8f ef       	ldi	r24, 0xFF	; 255
    bae6:	80 93 b6 0d 	sts	0x0DB6, r24
		game.score = 0;
    baea:	10 92 af 0d 	sts	0x0DAF, r1
    baee:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    baf2:	86 e8       	ldi	r24, 0x86	; 134
    baf4:	9d e0       	ldi	r25, 0x0D	; 13
    baf6:	0e 94 5f 38 	call	0x70be	; 0x70be <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    bafa:	0e 94 cb 5b 	call	0xb796	; 0xb796 <load_splash>
	}
	
	if (game.high_score_index != -1)
    bafe:	30 91 b6 0d 	lds	r19, 0x0DB6
    bb02:	3f 3f       	cpi	r19, 0xFF	; 255
    bb04:	09 f4       	brne	.+2      	; 0xbb08 <update_high_scores+0x3c>
    bb06:	7e c0       	rjmp	.+252    	; 0xbc04 <update_high_scores+0x138>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    bb08:	20 91 9e 0f 	lds	r18, 0x0F9E
    bb0c:	27 ff       	sbrs	r18, 7
    bb0e:	1e c0       	rjmp	.+60     	; 0xbb4c <update_high_scores+0x80>
    bb10:	83 2f       	mov	r24, r19
    bb12:	65 e0       	ldi	r22, 0x05	; 5
    bb14:	0e 94 89 64 	call	0xc912	; 0xc912 <__divmodqi4>
    bb18:	92 30       	cpi	r25, 0x02	; 2
    bb1a:	c1 f0       	breq	.+48     	; 0xbb4c <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    bb1c:	41 e0       	ldi	r20, 0x01	; 1
    bb1e:	6f ef       	ldi	r22, 0xFF	; 255
    bb20:	82 e0       	ldi	r24, 0x02	; 2
    bb22:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
			game.high_score_index++;
    bb26:	80 91 b6 0d 	lds	r24, 0x0DB6
    bb2a:	8f 5f       	subi	r24, 0xFF	; 255
    bb2c:	80 93 b6 0d 	sts	0x0DB6, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    bb30:	60 91 b7 0f 	lds	r22, 0x0FB7
    bb34:	68 5f       	subi	r22, 0xF8	; 248
    bb36:	01 e0       	ldi	r16, 0x01	; 1
    bb38:	21 e0       	ldi	r18, 0x01	; 1
    bb3a:	40 91 b8 0f 	lds	r20, 0x0FB8
    bb3e:	82 e0       	ldi	r24, 0x02	; 2
    bb40:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    bb44:	60 91 bb 0f 	lds	r22, 0x0FBB
    bb48:	68 5f       	subi	r22, 0xF8	; 248
    bb4a:	1f c0       	rjmp	.+62     	; 0xbb8a <update_high_scores+0xbe>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    bb4c:	26 ff       	sbrs	r18, 6
    bb4e:	24 c0       	rjmp	.+72     	; 0xbb98 <update_high_scores+0xcc>
    bb50:	83 2f       	mov	r24, r19
    bb52:	65 e0       	ldi	r22, 0x05	; 5
    bb54:	0e 94 89 64 	call	0xc912	; 0xc912 <__divmodqi4>
    bb58:	99 23       	and	r25, r25
    bb5a:	f1 f0       	breq	.+60     	; 0xbb98 <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    bb5c:	41 e0       	ldi	r20, 0x01	; 1
    bb5e:	6f ef       	ldi	r22, 0xFF	; 255
    bb60:	82 e0       	ldi	r24, 0x02	; 2
    bb62:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
			game.high_score_index--;
    bb66:	80 91 b6 0d 	lds	r24, 0x0DB6
    bb6a:	81 50       	subi	r24, 0x01	; 1
    bb6c:	80 93 b6 0d 	sts	0x0DB6, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    bb70:	60 91 b7 0f 	lds	r22, 0x0FB7
    bb74:	68 50       	subi	r22, 0x08	; 8
    bb76:	01 e0       	ldi	r16, 0x01	; 1
    bb78:	21 e0       	ldi	r18, 0x01	; 1
    bb7a:	40 91 b8 0f 	lds	r20, 0x0FB8
    bb7e:	82 e0       	ldi	r24, 0x02	; 2
    bb80:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    bb84:	60 91 bb 0f 	lds	r22, 0x0FBB
    bb88:	68 50       	subi	r22, 0x08	; 8
    bb8a:	21 e0       	ldi	r18, 0x01	; 1
    bb8c:	40 91 bc 0f 	lds	r20, 0x0FBC
    bb90:	83 e0       	ldi	r24, 0x03	; 3
    bb92:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
    bb96:	36 c0       	rjmp	.+108    	; 0xbc04 <update_high_scores+0x138>
		}
		else if (game.joypadState.pressed & BTN_UP)
    bb98:	24 ff       	sbrs	r18, 4
    bb9a:	13 c0       	rjmp	.+38     	; 0xbbc2 <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    bb9c:	41 e0       	ldi	r20, 0x01	; 1
    bb9e:	6f ef       	ldi	r22, 0xFF	; 255
    bba0:	82 e0       	ldi	r24, 0x02	; 2
    bba2:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    bba6:	80 91 b6 0d 	lds	r24, 0x0DB6
    bbaa:	e8 2f       	mov	r30, r24
    bbac:	ff 27       	eor	r31, r31
    bbae:	e7 fd       	sbrc	r30, 7
    bbb0:	f0 95       	com	r31
    bbb2:	ea 57       	subi	r30, 0x7A	; 122
    bbb4:	f2 4f       	sbci	r31, 0xF2	; 242
    bbb6:	92 81       	ldd	r25, Z+2	; 0x02
    bbb8:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    bbba:	91 34       	cpi	r25, 0x41	; 65
    bbbc:	b0 f4       	brcc	.+44     	; 0xbbea <update_high_scores+0x11e>
    bbbe:	91 e4       	ldi	r25, 0x41	; 65
    bbc0:	14 c0       	rjmp	.+40     	; 0xbbea <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    bbc2:	25 ff       	sbrs	r18, 5
    bbc4:	1f c0       	rjmp	.+62     	; 0xbc04 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    bbc6:	41 e0       	ldi	r20, 0x01	; 1
    bbc8:	6f ef       	ldi	r22, 0xFF	; 255
    bbca:	82 e0       	ldi	r24, 0x02	; 2
    bbcc:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    bbd0:	80 91 b6 0d 	lds	r24, 0x0DB6
    bbd4:	e8 2f       	mov	r30, r24
    bbd6:	ff 27       	eor	r31, r31
    bbd8:	e7 fd       	sbrc	r30, 7
    bbda:	f0 95       	com	r31
    bbdc:	ea 57       	subi	r30, 0x7A	; 122
    bbde:	f2 4f       	sbci	r31, 0xF2	; 242
    bbe0:	92 81       	ldd	r25, Z+2	; 0x02
    bbe2:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    bbe4:	9b 35       	cpi	r25, 0x5B	; 91
    bbe6:	08 f0       	brcs	.+2      	; 0xbbea <update_high_scores+0x11e>
    bbe8:	9a e5       	ldi	r25, 0x5A	; 90
    bbea:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    bbec:	65 e0       	ldi	r22, 0x05	; 5
    bbee:	0e 94 89 64 	call	0xc912	; 0xc912 <__divmodqi4>
    bbf2:	68 2f       	mov	r22, r24
    bbf4:	66 0f       	add	r22, r22
    bbf6:	69 5f       	subi	r22, 0xF9	; 249
    bbf8:	42 81       	ldd	r20, Z+2	; 0x02
    bbfa:	8b e0       	ldi	r24, 0x0B	; 11
    bbfc:	89 0f       	add	r24, r25
		}
	}
}
    bbfe:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    bc00:	0c 94 d3 46 	jmp	0x8da6	; 0x8da6 <LBPrintChar>
		}
	}
}
    bc04:	0f 91       	pop	r16
    bc06:	08 95       	ret

0000bc08 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    bc08:	2f 92       	push	r2
    bc0a:	3f 92       	push	r3
    bc0c:	4f 92       	push	r4
    bc0e:	5f 92       	push	r5
    bc10:	6f 92       	push	r6
    bc12:	7f 92       	push	r7
    bc14:	8f 92       	push	r8
    bc16:	9f 92       	push	r9
    bc18:	af 92       	push	r10
    bc1a:	bf 92       	push	r11
    bc1c:	cf 92       	push	r12
    bc1e:	df 92       	push	r13
    bc20:	ef 92       	push	r14
    bc22:	ff 92       	push	r15
    bc24:	0f 93       	push	r16
    bc26:	1f 93       	push	r17
    bc28:	cf 93       	push	r28
    bc2a:	df 93       	push	r29
    bc2c:	7c 01       	movw	r14, r24
    bc2e:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    bc30:	c0 91 b2 0c 	lds	r28, 0x0CB2
    bc34:	c6 95       	lsr	r28
    bc36:	c6 95       	lsr	r28
    bc38:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    bc3a:	00 91 b3 0c 	lds	r16, 0x0CB3
    bc3e:	06 95       	lsr	r16
    bc40:	06 95       	lsr	r16
    bc42:	06 95       	lsr	r16
	u16 tally = game.score;
    bc44:	a0 90 ae 0d 	lds	r10, 0x0DAE
    bc48:	b0 90 af 0d 	lds	r11, 0x0DAF
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    bc4c:	64 e1       	ldi	r22, 0x14	; 20
    bc4e:	80 e0       	ldi	r24, 0x00	; 0
    bc50:	0e 94 02 5a 	call	0xb404	; 0xb404 <hide_sprites>
	LBRotateSprites();
    bc54:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	
	StopSong();
    bc58:	0e 94 01 3a 	call	0x7402	; 0x7402 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    bc5c:	10 e0       	ldi	r17, 0x00	; 0
    bc5e:	d0 e0       	ldi	r29, 0x00	; 0
    bc60:	c8 01       	movw	r24, r16
    bc62:	06 96       	adiw	r24, 0x06	; 6
    bc64:	2e e1       	ldi	r18, 0x1E	; 30
    bc66:	82 2e       	mov	r8, r18
    bc68:	91 2c       	mov	r9, r1
    bc6a:	b4 01       	movw	r22, r8
    bc6c:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    bc70:	9e 01       	movw	r18, r28
    bc72:	28 5f       	subi	r18, 0xF8	; 248
    bc74:	3f 4f       	sbci	r19, 0xFF	; 255
    bc76:	4a e6       	ldi	r20, 0x6A	; 106
    bc78:	54 e5       	ldi	r21, 0x54	; 84
    bc7a:	68 2f       	mov	r22, r24
    bc7c:	82 2f       	mov	r24, r18
    bc7e:	8f 71       	andi	r24, 0x1F	; 31
    bc80:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    bc84:	c8 01       	movw	r24, r16
    bc86:	07 96       	adiw	r24, 0x07	; 7
    bc88:	b4 01       	movw	r22, r8
    bc8a:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    bc8e:	9e 01       	movw	r18, r28
    bc90:	26 5f       	subi	r18, 0xF6	; 246
    bc92:	3f 4f       	sbci	r19, 0xFF	; 255
    bc94:	a7 01       	movw	r20, r14
    bc96:	68 2f       	mov	r22, r24
    bc98:	82 2f       	mov	r24, r18
    bc9a:	8f 71       	andi	r24, 0x1F	; 31
    bc9c:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    bca0:	c8 01       	movw	r24, r16
    bca2:	09 96       	adiw	r24, 0x09	; 9
    bca4:	b4 01       	movw	r22, r8
    bca6:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    bcaa:	48 2e       	mov	r4, r24
    bcac:	78 2e       	mov	r7, r24
    bcae:	7e 01       	movw	r14, r28
    bcb0:	29 e0       	ldi	r18, 0x09	; 9
    bcb2:	e2 0e       	add	r14, r18
    bcb4:	f1 1c       	adc	r15, r1
    bcb6:	8f e1       	ldi	r24, 0x1F	; 31
    bcb8:	e8 22       	and	r14, r24
    bcba:	ff 24       	eor	r15, r15
    bcbc:	42 e4       	ldi	r20, 0x42	; 66
    bcbe:	5b e0       	ldi	r21, 0x0B	; 11
    bcc0:	64 2d       	mov	r22, r4
    bcc2:	8e 2d       	mov	r24, r14
    bcc4:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    bcc8:	c8 01       	movw	r24, r16
    bcca:	0b 96       	adiw	r24, 0x0b	; 11
    bccc:	b4 01       	movw	r22, r8
    bcce:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    bcd2:	38 2e       	mov	r3, r24
    bcd4:	68 2e       	mov	r6, r24
    bcd6:	48 e9       	ldi	r20, 0x98	; 152
    bcd8:	5b e0       	ldi	r21, 0x0B	; 11
    bcda:	68 2f       	mov	r22, r24
    bcdc:	8e 2d       	mov	r24, r14
    bcde:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    bce2:	c8 01       	movw	r24, r16
    bce4:	0c 96       	adiw	r24, 0x0c	; 12
    bce6:	b4 01       	movw	r22, r8
    bce8:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    bcec:	58 2e       	mov	r5, r24
    bcee:	f8 2e       	mov	r15, r24
    bcf0:	43 e8       	ldi	r20, 0x83	; 131
    bcf2:	5b e0       	ldi	r21, 0x0B	; 11
    bcf4:	68 2f       	mov	r22, r24
    bcf6:	8e 2d       	mov	r24, r14
    bcf8:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    bcfc:	c8 01       	movw	r24, r16
    bcfe:	0d 96       	adiw	r24, 0x0d	; 13
    bd00:	b4 01       	movw	r22, r8
    bd02:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    bd06:	18 2f       	mov	r17, r24
    bd08:	28 2e       	mov	r2, r24
    bd0a:	43 e5       	ldi	r20, 0x53	; 83
    bd0c:	5b e0       	ldi	r21, 0x0B	; 11
    bd0e:	68 2f       	mov	r22, r24
    bd10:	8e 2d       	mov	r24, r14
    bd12:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    bd16:	64 96       	adiw	r28, 0x14	; 20
    bd18:	cf 71       	andi	r28, 0x1F	; 31
    bd1a:	dd 27       	eor	r29, r29
    bd1c:	ec 2e       	mov	r14, r28
    bd1e:	21 e0       	ldi	r18, 0x01	; 1
    bd20:	a5 01       	movw	r20, r10
    bd22:	64 2d       	mov	r22, r4
    bd24:	8c 2f       	mov	r24, r28
    bd26:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    bd2a:	40 91 b0 0d 	lds	r20, 0x0DB0
    bd2e:	50 91 b1 0d 	lds	r21, 0x0DB1
    bd32:	21 e0       	ldi	r18, 0x01	; 1
    bd34:	63 2d       	mov	r22, r3
    bd36:	8c 2f       	mov	r24, r28
    bd38:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    bd3c:	40 91 b2 0d 	lds	r20, 0x0DB2
    bd40:	50 91 b3 0d 	lds	r21, 0x0DB3
    bd44:	21 e0       	ldi	r18, 0x01	; 1
    bd46:	65 2d       	mov	r22, r5
    bd48:	8c 2f       	mov	r24, r28
    bd4a:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    bd4e:	21 e0       	ldi	r18, 0x01	; 1
    bd50:	a6 01       	movw	r20, r12
    bd52:	61 2f       	mov	r22, r17
    bd54:	8c 2f       	mov	r24, r28
    bd56:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	
	LBWaitSeconds(2);
    bd5a:	82 e0       	ldi	r24, 0x02	; 2
    bd5c:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    bd60:	80 90 b0 0d 	lds	r8, 0x0DB0
    bd64:	90 90 b1 0d 	lds	r9, 0x0DB1
    bd68:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    bd6a:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    bd6c:	20 97       	sbiw	r28, 0x00	; 0
    bd6e:	e9 f0       	breq	.+58     	; 0xbdaa <tally_score+0x1a2>
	{
		WaitVsync(1);
    bd70:	81 e0       	ldi	r24, 0x01	; 1
    bd72:	90 e0       	ldi	r25, 0x00	; 0
    bd74:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
		SFX_HIT;
    bd78:	41 e0       	ldi	r20, 0x01	; 1
    bd7a:	6f ef       	ldi	r22, 0xFF	; 255
    bd7c:	84 e0       	ldi	r24, 0x04	; 4
    bd7e:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
		tally += 1;
    bd82:	0f 5f       	subi	r16, 0xFF	; 255
    bd84:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    bd86:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    bd88:	21 e0       	ldi	r18, 0x01	; 1
    bd8a:	a8 01       	movw	r20, r16
    bd8c:	67 2d       	mov	r22, r7
    bd8e:	8e 2d       	mov	r24, r14
    bd90:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    bd94:	21 e0       	ldi	r18, 0x01	; 1
    bd96:	ae 01       	movw	r20, r28
    bd98:	66 2d       	mov	r22, r6
    bd9a:	8e 2d       	mov	r24, r14
    bd9c:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    bda0:	8c ed       	ldi	r24, 0xDC	; 220
    bda2:	95 e0       	ldi	r25, 0x05	; 5
    bda4:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <WaitUs>
    bda8:	e1 cf       	rjmp	.-62     	; 0xbd6c <tally_score+0x164>
    bdaa:	a8 0c       	add	r10, r8
    bdac:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    bdae:	c0 91 b2 0d 	lds	r28, 0x0DB2
    bdb2:	d0 91 b3 0d 	lds	r29, 0x0DB3
	while (counter > 0)
    bdb6:	20 97       	sbiw	r28, 0x00	; 0
    bdb8:	31 f1       	breq	.+76     	; 0xbe06 <tally_score+0x1fe>
	{
		WaitVsync(1);
    bdba:	81 e0       	ldi	r24, 0x01	; 1
    bdbc:	90 e0       	ldi	r25, 0x00	; 0
    bdbe:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
		SFX_HIT;
    bdc2:	41 e0       	ldi	r20, 0x01	; 1
    bdc4:	6f ef       	ldi	r22, 0xFF	; 255
    bdc6:	84 e0       	ldi	r24, 0x04	; 4
    bdc8:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    bdcc:	c5 01       	movw	r24, r10
    bdce:	02 97       	sbiw	r24, 0x02	; 2
    bdd0:	8e 3f       	cpi	r24, 0xFE	; 254
    bdd2:	9f 4f       	sbci	r25, 0xFF	; 255
    bdd4:	20 f4       	brcc	.+8      	; 0xbdde <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    bdd6:	81 e0       	ldi	r24, 0x01	; 1
    bdd8:	a8 1a       	sub	r10, r24
    bdda:	b1 08       	sbc	r11, r1
    bddc:	02 c0       	rjmp	.+4      	; 0xbde2 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    bdde:	a1 2c       	mov	r10, r1
    bde0:	b1 2c       	mov	r11, r1
		counter -= 1;
    bde2:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    bde4:	21 e0       	ldi	r18, 0x01	; 1
    bde6:	a5 01       	movw	r20, r10
    bde8:	67 2d       	mov	r22, r7
    bdea:	8e 2d       	mov	r24, r14
    bdec:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    bdf0:	21 e0       	ldi	r18, 0x01	; 1
    bdf2:	ae 01       	movw	r20, r28
    bdf4:	6f 2d       	mov	r22, r15
    bdf6:	8e 2d       	mov	r24, r14
    bdf8:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    bdfc:	8c ed       	ldi	r24, 0xDC	; 220
    bdfe:	95 e0       	ldi	r25, 0x05	; 5
    be00:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <WaitUs>
    be04:	d8 cf       	rjmp	.-80     	; 0xbdb6 <tally_score+0x1ae>
    be06:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    be08:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    be0a:	20 97       	sbiw	r28, 0x00	; 0
    be0c:	e9 f0       	breq	.+58     	; 0xbe48 <tally_score+0x240>
	{
		WaitVsync(1);
    be0e:	81 e0       	ldi	r24, 0x01	; 1
    be10:	90 e0       	ldi	r25, 0x00	; 0
    be12:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
		SFX_HIT;
    be16:	41 e0       	ldi	r20, 0x01	; 1
    be18:	6f ef       	ldi	r22, 0xFF	; 255
    be1a:	84 e0       	ldi	r24, 0x04	; 4
    be1c:	0e 94 c3 3a 	call	0x7586	; 0x7586 <TriggerFx>
		tally += 1;
    be20:	0f 5f       	subi	r16, 0xFF	; 255
    be22:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    be24:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    be26:	21 e0       	ldi	r18, 0x01	; 1
    be28:	a8 01       	movw	r20, r16
    be2a:	67 2d       	mov	r22, r7
    be2c:	8e 2d       	mov	r24, r14
    be2e:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    be32:	21 e0       	ldi	r18, 0x01	; 1
    be34:	ae 01       	movw	r20, r28
    be36:	62 2d       	mov	r22, r2
    be38:	8e 2d       	mov	r24, r14
    be3a:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    be3e:	8c ed       	ldi	r24, 0xDC	; 220
    be40:	95 e0       	ldi	r25, 0x05	; 5
    be42:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <WaitUs>
    be46:	e1 cf       	rjmp	.-62     	; 0xbe0a <tally_score+0x202>
    be48:	ac 0c       	add	r10, r12
    be4a:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    be4c:	b0 92 af 0d 	sts	0x0DAF, r11
    be50:	a0 92 ae 0d 	sts	0x0DAE, r10
	game.time = 0;
    be54:	10 92 b3 0d 	sts	0x0DB3, r1
    be58:	10 92 b2 0d 	sts	0x0DB2, r1
	LBWaitSeconds(2);
    be5c:	82 e0       	ldi	r24, 0x02	; 2
    be5e:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <LBWaitSeconds>
	render_camera_view();
}
    be62:	df 91       	pop	r29
    be64:	cf 91       	pop	r28
    be66:	1f 91       	pop	r17
    be68:	0f 91       	pop	r16
    be6a:	ff 90       	pop	r15
    be6c:	ef 90       	pop	r14
    be6e:	df 90       	pop	r13
    be70:	cf 90       	pop	r12
    be72:	bf 90       	pop	r11
    be74:	af 90       	pop	r10
    be76:	9f 90       	pop	r9
    be78:	8f 90       	pop	r8
    be7a:	7f 90       	pop	r7
    be7c:	6f 90       	pop	r6
    be7e:	5f 90       	pop	r5
    be80:	4f 90       	pop	r4
    be82:	3f 90       	pop	r3
    be84:	2f 90       	pop	r2
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    be86:	0c 94 4e 4b 	jmp	0x969c	; 0x969c <render_camera_view>

0000be8a <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    be8a:	80 91 b7 0d 	lds	r24, 0x0DB7
    be8e:	81 50       	subi	r24, 0x01	; 1
    be90:	80 93 b7 0d 	sts	0x0DB7, r24
	clear_sprites(0, 6);
    be94:	66 e0       	ldi	r22, 0x06	; 6
    be96:	80 e0       	ldi	r24, 0x00	; 0
    be98:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
	LBRotateSprites();
    be9c:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	if (game.lives == 0)
    bea0:	80 91 b7 0d 	lds	r24, 0x0DB7
    bea4:	81 11       	cpse	r24, r1
    bea6:	08 c0       	rjmp	.+16     	; 0xbeb8 <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    bea8:	60 e0       	ldi	r22, 0x00	; 0
    beaa:	70 e0       	ldi	r23, 0x00	; 0
    beac:	89 e4       	ldi	r24, 0x49	; 73
    beae:	9b e0       	ldi	r25, 0x0B	; 11
    beb0:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <tally_score>
		exit_game();
    beb4:	0c 94 11 5d 	jmp	0xba22	; 0xba22 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    beb8:	61 e0       	ldi	r22, 0x01	; 1
    beba:	81 e0       	ldi	r24, 0x01	; 1
    bebc:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <FadeOut>
	ClearVram();
    bec0:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bec4:	64 e1       	ldi	r22, 0x14	; 20
    bec6:	80 e0       	ldi	r24, 0x00	; 0
    bec8:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
	LBRotateSprites();
    becc:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    bed0:	60 e0       	ldi	r22, 0x00	; 0
    bed2:	81 e0       	ldi	r24, 0x01	; 1
    bed4:	0e 94 21 46 	call	0x8c42	; 0x8c42 <FadeIn>
	init_player_state();
    bed8:	0e 94 c1 48 	call	0x9182	; 0x9182 <init_player_state>
	init_enemy_state();
    bedc:	0e 94 ad 48 	call	0x915a	; 0x915a <init_enemy_state>
	load_level(game.current_level_index, false);
    bee0:	60 e0       	ldi	r22, 0x00	; 0
    bee2:	80 91 b9 0d 	lds	r24, 0x0DB9
    bee6:	0c 94 f8 58 	jmp	0xb1f0	; 0xb1f0 <load_level>

0000beea <update_player>:
}

u8 update_player()
{
    beea:	cf 92       	push	r12
    beec:	df 92       	push	r13
    beee:	ef 92       	push	r14
    bef0:	ff 92       	push	r15
    bef2:	0f 93       	push	r16
    bef4:	1f 93       	push	r17
    bef6:	cf 93       	push	r28
    bef8:	df 93       	push	r29
    befa:	1f 92       	push	r1
    befc:	cd b7       	in	r28, 0x3d	; 61
    befe:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    bf00:	10 91 d8 0d 	lds	r17, 0x0DD8
    bf04:	14 ff       	sbrs	r17, 4
    bf06:	12 c0       	rjmp	.+36     	; 0xbf2c <update_player+0x42>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    bf08:	00 91 dc 0d 	lds	r16, 0x0DDC
    bf0c:	20 91 db 0d 	lds	r18, 0x0DDB
    bf10:	40 e0       	ldi	r20, 0x00	; 0
    bf12:	6c e4       	ldi	r22, 0x4C	; 76
    bf14:	7e e0       	ldi	r23, 0x0E	; 14
    bf16:	88 ed       	ldi	r24, 0xD8	; 216
    bf18:	9d e0       	ldi	r25, 0x0D	; 13
    bf1a:	0e 94 46 54 	call	0xa88c	; 0xa88c <map_explosion>
    bf1e:	88 23       	and	r24, r24
    bf20:	09 f4       	brne	.+2      	; 0xbf24 <update_player+0x3a>
    bf22:	c8 c2       	rjmp	.+1424   	; 0xc4b4 <update_player+0x5ca>
		{
			handle_player_death();
    bf24:	0e 94 45 5f 	call	0xbe8a	; 0xbe8a <handle_player_death>
			return 0;
    bf28:	80 e0       	ldi	r24, 0x00	; 0
    bf2a:	c5 c2       	rjmp	.+1418   	; 0xc4b6 <update_player+0x5cc>
		}
	}
	else if (is_space())
    bf2c:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    bf30:	88 23       	and	r24, r24
    bf32:	09 f4       	brne	.+2      	; 0xbf36 <update_player+0x4c>
    bf34:	ab c0       	rjmp	.+342    	; 0xc08c <update_player+0x1a2>
	{
		game.player.shared.vy = 0;
    bf36:	10 92 c8 0d 	sts	0x0DC8, r1
    bf3a:	10 92 c9 0d 	sts	0x0DC9, r1
    bf3e:	10 92 ca 0d 	sts	0x0DCA, r1
    bf42:	10 92 cb 0d 	sts	0x0DCB, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    bf46:	8c e3       	ldi	r24, 0x3C	; 60
    bf48:	90 e0       	ldi	r25, 0x00	; 0
    bf4a:	90 93 d5 0d 	sts	0x0DD5, r25
    bf4e:	80 93 d4 0d 	sts	0x0DD4, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    bf52:	10 91 a2 0f 	lds	r17, 0x0FA2
    bf56:	15 ff       	sbrs	r17, 5
    bf58:	32 c0       	rjmp	.+100    	; 0xbfbe <update_player+0xd4>
    bf5a:	20 e0       	ldi	r18, 0x00	; 0
    bf5c:	30 e0       	ldi	r19, 0x00	; 0
    bf5e:	40 e0       	ldi	r20, 0x00	; 0
    bf60:	5e e3       	ldi	r21, 0x3E	; 62
    bf62:	60 91 d0 0d 	lds	r22, 0x0DD0
    bf66:	70 91 d1 0d 	lds	r23, 0x0DD1
    bf6a:	80 91 d2 0d 	lds	r24, 0x0DD2
    bf6e:	90 91 d3 0d 	lds	r25, 0x0DD3
    bf72:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    bf76:	20 e0       	ldi	r18, 0x00	; 0
    bf78:	30 e0       	ldi	r19, 0x00	; 0
    bf7a:	40 e8       	ldi	r20, 0x80	; 128
    bf7c:	5f e3       	ldi	r21, 0x3F	; 63
    bf7e:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    bf82:	6b 01       	movw	r12, r22
    bf84:	7c 01       	movw	r14, r24
    bf86:	80 91 bd 0d 	lds	r24, 0x0DBD
    bf8a:	68 2f       	mov	r22, r24
    bf8c:	70 e0       	ldi	r23, 0x00	; 0
    bf8e:	80 e0       	ldi	r24, 0x00	; 0
    bf90:	90 e0       	ldi	r25, 0x00	; 0
    bf92:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    bf96:	9b 01       	movw	r18, r22
    bf98:	ac 01       	movw	r20, r24
    bf9a:	c7 01       	movw	r24, r14
    bf9c:	b6 01       	movw	r22, r12
    bf9e:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    bfa2:	87 ff       	sbrs	r24, 7
    bfa4:	0c c0       	rjmp	.+24     	; 0xbfbe <update_player+0xd4>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    bfa6:	80 e0       	ldi	r24, 0x00	; 0
    bfa8:	90 e0       	ldi	r25, 0x00	; 0
    bfaa:	a0 e7       	ldi	r26, 0x70	; 112
    bfac:	b2 e4       	ldi	r27, 0x42	; 66
    bfae:	80 93 c8 0d 	sts	0x0DC8, r24
    bfb2:	90 93 c9 0d 	sts	0x0DC9, r25
    bfb6:	a0 93 ca 0d 	sts	0x0DCA, r26
    bfba:	b0 93 cb 0d 	sts	0x0DCB, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    bfbe:	17 ff       	sbrs	r17, 7
    bfc0:	29 c0       	rjmp	.+82     	; 0xc014 <update_player+0x12a>
    bfc2:	20 e0       	ldi	r18, 0x00	; 0
    bfc4:	30 e0       	ldi	r19, 0x00	; 0
    bfc6:	40 ec       	ldi	r20, 0xC0	; 192
    bfc8:	51 e4       	ldi	r21, 0x41	; 65
    bfca:	60 91 cc 0d 	lds	r22, 0x0DCC
    bfce:	70 91 cd 0d 	lds	r23, 0x0DCD
    bfd2:	80 91 ce 0d 	lds	r24, 0x0DCE
    bfd6:	90 91 cf 0d 	lds	r25, 0x0DCF
    bfda:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    bfde:	6b 01       	movw	r12, r22
    bfe0:	7c 01       	movw	r14, r24
    bfe2:	80 91 aa 0d 	lds	r24, 0x0DAA
    bfe6:	90 91 ab 0d 	lds	r25, 0x0DAB
    bfea:	80 52       	subi	r24, 0x20	; 32
    bfec:	9f 4f       	sbci	r25, 0xFF	; 255
    bfee:	bc 01       	movw	r22, r24
    bff0:	80 e0       	ldi	r24, 0x00	; 0
    bff2:	90 e0       	ldi	r25, 0x00	; 0
    bff4:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    bff8:	9b 01       	movw	r18, r22
    bffa:	ac 01       	movw	r20, r24
    bffc:	c7 01       	movw	r24, r14
    bffe:	b6 01       	movw	r22, r12
    c000:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    c004:	87 ff       	sbrs	r24, 7
    c006:	06 c0       	rjmp	.+12     	; 0xc014 <update_player+0x12a>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    c008:	88 e7       	ldi	r24, 0x78	; 120
    c00a:	90 e0       	ldi	r25, 0x00	; 0
    c00c:	90 93 d5 0d 	sts	0x0DD5, r25
    c010:	80 93 d4 0d 	sts	0x0DD4, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c014:	16 ff       	sbrs	r17, 6
    c016:	1a c0       	rjmp	.+52     	; 0xc04c <update_player+0x162>
    c018:	60 91 aa 0d 	lds	r22, 0x0DAA
    c01c:	70 91 ab 0d 	lds	r23, 0x0DAB
    c020:	80 e0       	ldi	r24, 0x00	; 0
    c022:	90 e0       	ldi	r25, 0x00	; 0
    c024:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    c028:	9b 01       	movw	r18, r22
    c02a:	ac 01       	movw	r20, r24
    c02c:	60 91 cc 0d 	lds	r22, 0x0DCC
    c030:	70 91 cd 0d 	lds	r23, 0x0DCD
    c034:	80 91 ce 0d 	lds	r24, 0x0DCE
    c038:	90 91 cf 0d 	lds	r25, 0x0DCF
    c03c:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c040:	18 16       	cp	r1, r24
    c042:	24 f4       	brge	.+8      	; 0xc04c <update_player+0x162>
		{
			game.player.shared.vx = 0;
    c044:	10 92 d5 0d 	sts	0x0DD5, r1
    c048:	10 92 d4 0d 	sts	0x0DD4, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    c04c:	14 ff       	sbrs	r17, 4
    c04e:	1b c0       	rjmp	.+54     	; 0xc086 <update_player+0x19c>
    c050:	20 e0       	ldi	r18, 0x00	; 0
    c052:	30 e0       	ldi	r19, 0x00	; 0
    c054:	a9 01       	movw	r20, r18
    c056:	60 91 d0 0d 	lds	r22, 0x0DD0
    c05a:	70 91 d1 0d 	lds	r23, 0x0DD1
    c05e:	80 91 d2 0d 	lds	r24, 0x0DD2
    c062:	90 91 d3 0d 	lds	r25, 0x0DD3
    c066:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c06a:	18 16       	cp	r1, r24
    c06c:	64 f4       	brge	.+24     	; 0xc086 <update_player+0x19c>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    c06e:	80 e0       	ldi	r24, 0x00	; 0
    c070:	90 e0       	ldi	r25, 0x00	; 0
    c072:	a0 e7       	ldi	r26, 0x70	; 112
    c074:	b2 ec       	ldi	r27, 0xC2	; 194
    c076:	80 93 c8 0d 	sts	0x0DC8, r24
    c07a:	90 93 c9 0d 	sts	0x0DC9, r25
    c07e:	a0 93 ca 0d 	sts	0x0DCA, r26
    c082:	b0 93 cb 0d 	sts	0x0DCB, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c086:	84 e3       	ldi	r24, 0x34	; 52
    c088:	9e e0       	ldi	r25, 0x0E	; 14
    c08a:	0d c2       	rjmp	.+1050   	; 0xc4a6 <update_player+0x5bc>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    c08c:	81 2f       	mov	r24, r17
    c08e:	8a 70       	andi	r24, 0x0A	; 10
    c090:	09 f4       	brne	.+2      	; 0xc094 <update_player+0x1aa>
    c092:	ec c0       	rjmp	.+472    	; 0xc26c <update_player+0x382>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    c094:	40 91 dc 0d 	lds	r20, 0x0DDC
    c098:	60 91 db 0d 	lds	r22, 0x0DDB
    c09c:	88 ec       	ldi	r24, 0xC8	; 200
    c09e:	9d e0       	ldi	r25, 0x0D	; 13
    c0a0:	0e 94 77 4d 	call	0x9aee	; 0x9aee <on_solid_ground>
    c0a4:	81 11       	cpse	r24, r1
    c0a6:	07 c0       	rjmp	.+14     	; 0xc0b6 <update_player+0x1cc>
		{
			game.player.shared.gravity = GRAVITY;
    c0a8:	8f ef       	ldi	r24, 0xFF	; 255
    c0aa:	80 93 d6 0d 	sts	0x0DD6, r24
			game.player.flags = JUMPING;
    c0ae:	81 e0       	ldi	r24, 0x01	; 1
    c0b0:	80 93 d8 0d 	sts	0x0DD8, r24
    c0b4:	de c1       	rjmp	.+956    	; 0xc472 <update_player+0x588>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    c0b6:	10 91 a2 0f 	lds	r17, 0x0FA2
    c0ba:	15 ff       	sbrs	r17, 5
    c0bc:	46 c0       	rjmp	.+140    	; 0xc14a <update_player+0x260>
			{
				game.player.shared.y += 16;
    c0be:	20 e0       	ldi	r18, 0x00	; 0
    c0c0:	30 e0       	ldi	r19, 0x00	; 0
    c0c2:	40 e8       	ldi	r20, 0x80	; 128
    c0c4:	51 e4       	ldi	r21, 0x41	; 65
    c0c6:	60 91 d0 0d 	lds	r22, 0x0DD0
    c0ca:	70 91 d1 0d 	lds	r23, 0x0DD1
    c0ce:	80 91 d2 0d 	lds	r24, 0x0DD2
    c0d2:	90 91 d3 0d 	lds	r25, 0x0DD3
    c0d6:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    c0da:	60 93 d0 0d 	sts	0x0DD0, r22
    c0de:	70 93 d1 0d 	sts	0x0DD1, r23
    c0e2:	80 93 d2 0d 	sts	0x0DD2, r24
    c0e6:	90 93 d3 0d 	sts	0x0DD3, r25
				if(game.player.direction == D_RIGHT)
    c0ea:	80 91 da 0d 	lds	r24, 0x0DDA
    c0ee:	81 30       	cpi	r24, 0x01	; 1
    c0f0:	b1 f4       	brne	.+44     	; 0xc11e <update_player+0x234>
				{
					game.player.shared.x -= 8;
    c0f2:	20 e0       	ldi	r18, 0x00	; 0
    c0f4:	30 e0       	ldi	r19, 0x00	; 0
    c0f6:	40 e0       	ldi	r20, 0x00	; 0
    c0f8:	51 e4       	ldi	r21, 0x41	; 65
    c0fa:	60 91 cc 0d 	lds	r22, 0x0DCC
    c0fe:	70 91 cd 0d 	lds	r23, 0x0DCD
    c102:	80 91 ce 0d 	lds	r24, 0x0DCE
    c106:	90 91 cf 0d 	lds	r25, 0x0DCF
    c10a:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    c10e:	60 93 cc 0d 	sts	0x0DCC, r22
    c112:	70 93 cd 0d 	sts	0x0DCD, r23
    c116:	80 93 ce 0d 	sts	0x0DCE, r24
    c11a:	90 93 cf 0d 	sts	0x0DCF, r25
				}
				game.player.shared.vx = 0;
    c11e:	10 92 d5 0d 	sts	0x0DD5, r1
    c122:	10 92 d4 0d 	sts	0x0DD4, r1
				game.player.flags = PRONE;
    c126:	84 e0       	ldi	r24, 0x04	; 4
    c128:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.width = 3;
    c12c:	83 e0       	ldi	r24, 0x03	; 3
    c12e:	80 93 db 0d 	sts	0x0DDB, r24
				game.player.height = 1;
    c132:	81 e0       	ldi	r24, 0x01	; 1
    c134:	80 93 dc 0d 	sts	0x0DDC, r24
				clear_sprites(3, 3);
    c138:	63 e0       	ldi	r22, 0x03	; 3
    c13a:	83 e0       	ldi	r24, 0x03	; 3
    c13c:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    c140:	40 91 b2 0f 	lds	r20, 0x0FB2
    c144:	84 e4       	ldi	r24, 0x44	; 68
    c146:	9e e0       	ldi	r25, 0x0E	; 14
    c148:	6e c0       	rjmp	.+220    	; 0xc226 <update_player+0x33c>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c14a:	17 ff       	sbrs	r17, 7
    c14c:	38 c0       	rjmp	.+112    	; 0xc1be <update_player+0x2d4>
    c14e:	20 e0       	ldi	r18, 0x00	; 0
    c150:	30 e0       	ldi	r19, 0x00	; 0
    c152:	40 e0       	ldi	r20, 0x00	; 0
    c154:	5e e3       	ldi	r21, 0x3E	; 62
    c156:	60 91 cc 0d 	lds	r22, 0x0DCC
    c15a:	70 91 cd 0d 	lds	r23, 0x0DCD
    c15e:	80 91 ce 0d 	lds	r24, 0x0DCE
    c162:	90 91 cf 0d 	lds	r25, 0x0DCF
    c166:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    c16a:	20 e0       	ldi	r18, 0x00	; 0
    c16c:	30 e0       	ldi	r19, 0x00	; 0
    c16e:	40 e0       	ldi	r20, 0x00	; 0
    c170:	50 e4       	ldi	r21, 0x40	; 64
    c172:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    c176:	6b 01       	movw	r12, r22
    c178:	7c 01       	movw	r14, r24
    c17a:	80 91 bc 0d 	lds	r24, 0x0DBC
    c17e:	68 2f       	mov	r22, r24
    c180:	70 e0       	ldi	r23, 0x00	; 0
    c182:	80 e0       	ldi	r24, 0x00	; 0
    c184:	90 e0       	ldi	r25, 0x00	; 0
    c186:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    c18a:	9b 01       	movw	r18, r22
    c18c:	ac 01       	movw	r20, r24
    c18e:	c7 01       	movw	r24, r14
    c190:	b6 01       	movw	r22, r12
    c192:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    c196:	87 ff       	sbrs	r24, 7
    c198:	12 c0       	rjmp	.+36     	; 0xc1be <update_player+0x2d4>
			{
				game.player.shared.vx = RUN_SPEED;
    c19a:	8c e3       	ldi	r24, 0x3C	; 60
    c19c:	90 e0       	ldi	r25, 0x00	; 0
    c19e:	90 93 d5 0d 	sts	0x0DD5, r25
    c1a2:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.flags = RUNNING;
    c1a6:	82 e0       	ldi	r24, 0x02	; 2
    c1a8:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.direction = D_RIGHT;
    c1ac:	81 e0       	ldi	r24, 0x01	; 1
    c1ae:	80 93 da 0d 	sts	0x0DDA, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    c1b2:	84 e3       	ldi	r24, 0x34	; 52
    c1b4:	9e e0       	ldi	r25, 0x0E	; 14
    c1b6:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c1ba:	40 e0       	ldi	r20, 0x00	; 0
    c1bc:	38 c0       	rjmp	.+112    	; 0xc22e <update_player+0x344>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c1be:	16 ff       	sbrs	r17, 6
    c1c0:	27 c0       	rjmp	.+78     	; 0xc210 <update_player+0x326>
    c1c2:	60 91 aa 0d 	lds	r22, 0x0DAA
    c1c6:	70 91 ab 0d 	lds	r23, 0x0DAB
    c1ca:	80 e0       	ldi	r24, 0x00	; 0
    c1cc:	90 e0       	ldi	r25, 0x00	; 0
    c1ce:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    c1d2:	9b 01       	movw	r18, r22
    c1d4:	ac 01       	movw	r20, r24
    c1d6:	60 91 cc 0d 	lds	r22, 0x0DCC
    c1da:	70 91 cd 0d 	lds	r23, 0x0DCD
    c1de:	80 91 ce 0d 	lds	r24, 0x0DCE
    c1e2:	90 91 cf 0d 	lds	r25, 0x0DCF
    c1e6:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c1ea:	18 16       	cp	r1, r24
    c1ec:	8c f4       	brge	.+34     	; 0xc210 <update_player+0x326>
			{
				game.player.shared.vx = -RUN_SPEED;
    c1ee:	84 ec       	ldi	r24, 0xC4	; 196
    c1f0:	9f ef       	ldi	r25, 0xFF	; 255
    c1f2:	90 93 d5 0d 	sts	0x0DD5, r25
    c1f6:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.flags = RUNNING;
    c1fa:	82 e0       	ldi	r24, 0x02	; 2
    c1fc:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.direction = D_LEFT;
    c200:	10 92 da 0d 	sts	0x0DDA, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    c204:	84 e3       	ldi	r24, 0x34	; 52
    c206:	9e e0       	ldi	r25, 0x0E	; 14
    c208:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c20c:	41 e0       	ldi	r20, 0x01	; 1
    c20e:	0f c0       	rjmp	.+30     	; 0xc22e <update_player+0x344>
			}
			else
			{
				game.player.flags = IDLE;
    c210:	88 e0       	ldi	r24, 0x08	; 8
    c212:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.shared.vx = 0;
    c216:	10 92 d5 0d 	sts	0x0DD5, r1
    c21a:	10 92 d4 0d 	sts	0x0DD4, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    c21e:	40 91 b2 0f 	lds	r20, 0x0FB2
    c222:	8c e2       	ldi	r24, 0x2C	; 44
    c224:	9e e0       	ldi	r25, 0x0E	; 14
    c226:	49 83       	std	Y+1, r20	; 0x01
    c228:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c22c:	49 81       	ldd	r20, Y+1	; 0x01
    c22e:	bc 01       	movw	r22, r24
    c230:	80 e0       	ldi	r24, 0x00	; 0
    c232:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    c236:	80 91 9e 0f 	lds	r24, 0x0F9E
    c23a:	80 ff       	sbrs	r24, 0
    c23c:	3b c1       	rjmp	.+630    	; 0xc4b4 <update_player+0x5ca>
    c23e:	80 91 d8 0d 	lds	r24, 0x0DD8
    c242:	82 fd       	sbrc	r24, 2
    c244:	37 c1       	rjmp	.+622    	; 0xc4b4 <update_player+0x5ca>
			{
				game.player.shared.vy = -JUMP_SPEED;
    c246:	80 e0       	ldi	r24, 0x00	; 0
    c248:	90 e0       	ldi	r25, 0x00	; 0
    c24a:	a6 e1       	ldi	r26, 0x16	; 22
    c24c:	b3 ec       	ldi	r27, 0xC3	; 195
    c24e:	80 93 c8 0d 	sts	0x0DC8, r24
    c252:	90 93 c9 0d 	sts	0x0DC9, r25
    c256:	a0 93 ca 0d 	sts	0x0DCA, r26
    c25a:	b0 93 cb 0d 	sts	0x0DCB, r27
				game.player.shared.gravity = GRAVITY;
    c25e:	8f ef       	ldi	r24, 0xFF	; 255
    c260:	80 93 d6 0d 	sts	0x0DD6, r24
				game.player.flags = JUMPING;
    c264:	81 e0       	ldi	r24, 0x01	; 1
    c266:	80 93 d8 0d 	sts	0x0DD8, r24
    c26a:	fd c0       	rjmp	.+506    	; 0xc466 <update_player+0x57c>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    c26c:	10 ff       	sbrs	r17, 0
    c26e:	77 c0       	rjmp	.+238    	; 0xc35e <update_player+0x474>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    c270:	10 91 a2 0f 	lds	r17, 0x0FA2
    c274:	17 ff       	sbrs	r17, 7
    c276:	35 c0       	rjmp	.+106    	; 0xc2e2 <update_player+0x3f8>
    c278:	20 e0       	ldi	r18, 0x00	; 0
    c27a:	30 e0       	ldi	r19, 0x00	; 0
    c27c:	40 e0       	ldi	r20, 0x00	; 0
    c27e:	5e e3       	ldi	r21, 0x3E	; 62
    c280:	60 91 cc 0d 	lds	r22, 0x0DCC
    c284:	70 91 cd 0d 	lds	r23, 0x0DCD
    c288:	80 91 ce 0d 	lds	r24, 0x0DCE
    c28c:	90 91 cf 0d 	lds	r25, 0x0DCF
    c290:	0e 94 10 66 	call	0xcc20	; 0xcc20 <__mulsf3>
    c294:	20 e0       	ldi	r18, 0x00	; 0
    c296:	30 e0       	ldi	r19, 0x00	; 0
    c298:	40 e0       	ldi	r20, 0x00	; 0
    c29a:	50 e4       	ldi	r21, 0x40	; 64
    c29c:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    c2a0:	6b 01       	movw	r12, r22
    c2a2:	7c 01       	movw	r14, r24
    c2a4:	80 91 bc 0d 	lds	r24, 0x0DBC
    c2a8:	68 2f       	mov	r22, r24
    c2aa:	70 e0       	ldi	r23, 0x00	; 0
    c2ac:	80 e0       	ldi	r24, 0x00	; 0
    c2ae:	90 e0       	ldi	r25, 0x00	; 0
    c2b0:	0e 94 5c 65 	call	0xcab8	; 0xcab8 <__floatsisf>
    c2b4:	9b 01       	movw	r18, r22
    c2b6:	ac 01       	movw	r20, r24
    c2b8:	c7 01       	movw	r24, r14
    c2ba:	b6 01       	movw	r22, r12
    c2bc:	0e 94 2a 65 	call	0xca54	; 0xca54 <__cmpsf2>
    c2c0:	87 ff       	sbrs	r24, 7
    c2c2:	0f c0       	rjmp	.+30     	; 0xc2e2 <update_player+0x3f8>
		{
			game.player.shared.vx = RUN_SPEED;
    c2c4:	8c e3       	ldi	r24, 0x3C	; 60
    c2c6:	90 e0       	ldi	r25, 0x00	; 0
    c2c8:	90 93 d5 0d 	sts	0x0DD5, r25
    c2cc:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.direction = D_RIGHT;
    c2d0:	81 e0       	ldi	r24, 0x01	; 1
    c2d2:	80 93 da 0d 	sts	0x0DDA, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    c2d6:	8c e3       	ldi	r24, 0x3C	; 60
    c2d8:	9e e0       	ldi	r25, 0x0E	; 14
    c2da:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c2de:	40 e0       	ldi	r20, 0x00	; 0
    c2e0:	32 c0       	rjmp	.+100    	; 0xc346 <update_player+0x45c>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c2e2:	16 ff       	sbrs	r17, 6
    c2e4:	24 c0       	rjmp	.+72     	; 0xc32e <update_player+0x444>
    c2e6:	60 91 aa 0d 	lds	r22, 0x0DAA
    c2ea:	70 91 ab 0d 	lds	r23, 0x0DAB
    c2ee:	80 e0       	ldi	r24, 0x00	; 0
    c2f0:	90 e0       	ldi	r25, 0x00	; 0
    c2f2:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    c2f6:	9b 01       	movw	r18, r22
    c2f8:	ac 01       	movw	r20, r24
    c2fa:	60 91 cc 0d 	lds	r22, 0x0DCC
    c2fe:	70 91 cd 0d 	lds	r23, 0x0DCD
    c302:	80 91 ce 0d 	lds	r24, 0x0DCE
    c306:	90 91 cf 0d 	lds	r25, 0x0DCF
    c30a:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c30e:	18 16       	cp	r1, r24
    c310:	74 f4       	brge	.+28     	; 0xc32e <update_player+0x444>
		{
			game.player.shared.vx = -RUN_SPEED;
    c312:	84 ec       	ldi	r24, 0xC4	; 196
    c314:	9f ef       	ldi	r25, 0xFF	; 255
    c316:	90 93 d5 0d 	sts	0x0DD5, r25
    c31a:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.direction = D_LEFT;
    c31e:	10 92 da 0d 	sts	0x0DDA, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    c322:	8c e3       	ldi	r24, 0x3C	; 60
    c324:	9e e0       	ldi	r25, 0x0E	; 14
    c326:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c32a:	41 e0       	ldi	r20, 0x01	; 1
    c32c:	0c c0       	rjmp	.+24     	; 0xc346 <update_player+0x45c>
		}
		else
		{
			game.player.shared.vx = 0;
    c32e:	10 92 d5 0d 	sts	0x0DD5, r1
    c332:	10 92 d4 0d 	sts	0x0DD4, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c336:	40 91 b2 0f 	lds	r20, 0x0FB2
    c33a:	8c e3       	ldi	r24, 0x3C	; 60
    c33c:	9e e0       	ldi	r25, 0x0E	; 14
    c33e:	49 83       	std	Y+1, r20	; 0x01
    c340:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c344:	49 81       	ldd	r20, Y+1	; 0x01
    c346:	bc 01       	movw	r22, r24
    c348:	80 e0       	ldi	r24, 0x00	; 0
    c34a:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    c34e:	80 91 d6 0d 	lds	r24, 0x0DD6
    c352:	81 11       	cpse	r24, r1
    c354:	af c0       	rjmp	.+350    	; 0xc4b4 <update_player+0x5ca>
		{
			game.player.flags = IDLE;
    c356:	88 e0       	ldi	r24, 0x08	; 8
    c358:	80 93 d8 0d 	sts	0x0DD8, r24
    c35c:	ab c0       	rjmp	.+342    	; 0xc4b4 <update_player+0x5ca>
		}
	}
	else if (game.player.flags & PRONE)
    c35e:	12 ff       	sbrs	r17, 2
    c360:	a9 c0       	rjmp	.+338    	; 0xc4b4 <update_player+0x5ca>
	{
		if (game.joypadState.pressed & BTN_UP)
    c362:	80 91 9e 0f 	lds	r24, 0x0F9E
    c366:	84 ff       	sbrs	r24, 4
    c368:	3a c0       	rjmp	.+116    	; 0xc3de <update_player+0x4f4>
		{
			game.player.flags = IDLE;	
    c36a:	88 e0       	ldi	r24, 0x08	; 8
    c36c:	80 93 d8 0d 	sts	0x0DD8, r24
			game.player.shared.y -= 16;
    c370:	20 e0       	ldi	r18, 0x00	; 0
    c372:	30 e0       	ldi	r19, 0x00	; 0
    c374:	40 e8       	ldi	r20, 0x80	; 128
    c376:	51 e4       	ldi	r21, 0x41	; 65
    c378:	60 91 d0 0d 	lds	r22, 0x0DD0
    c37c:	70 91 d1 0d 	lds	r23, 0x0DD1
    c380:	80 91 d2 0d 	lds	r24, 0x0DD2
    c384:	90 91 d3 0d 	lds	r25, 0x0DD3
    c388:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    c38c:	60 93 d0 0d 	sts	0x0DD0, r22
    c390:	70 93 d1 0d 	sts	0x0DD1, r23
    c394:	80 93 d2 0d 	sts	0x0DD2, r24
    c398:	90 93 d3 0d 	sts	0x0DD3, r25
			if(game.player.direction == D_RIGHT)
    c39c:	80 91 da 0d 	lds	r24, 0x0DDA
    c3a0:	81 30       	cpi	r24, 0x01	; 1
    c3a2:	b1 f4       	brne	.+44     	; 0xc3d0 <update_player+0x4e6>
			{
				game.player.shared.x += 8;
    c3a4:	20 e0       	ldi	r18, 0x00	; 0
    c3a6:	30 e0       	ldi	r19, 0x00	; 0
    c3a8:	40 e0       	ldi	r20, 0x00	; 0
    c3aa:	51 e4       	ldi	r21, 0x41	; 65
    c3ac:	60 91 cc 0d 	lds	r22, 0x0DCC
    c3b0:	70 91 cd 0d 	lds	r23, 0x0DCD
    c3b4:	80 91 ce 0d 	lds	r24, 0x0DCE
    c3b8:	90 91 cf 0d 	lds	r25, 0x0DCF
    c3bc:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    c3c0:	60 93 cc 0d 	sts	0x0DCC, r22
    c3c4:	70 93 cd 0d 	sts	0x0DCD, r23
    c3c8:	80 93 ce 0d 	sts	0x0DCE, r24
    c3cc:	90 93 cf 0d 	sts	0x0DCF, r25
			}
			game.player.width = 2;
    c3d0:	82 e0       	ldi	r24, 0x02	; 2
    c3d2:	80 93 db 0d 	sts	0x0DDB, r24
			game.player.height = 3;
    c3d6:	83 e0       	ldi	r24, 0x03	; 3
    c3d8:	80 93 dc 0d 	sts	0x0DDC, r24
    c3dc:	6b c0       	rjmp	.+214    	; 0xc4b4 <update_player+0x5ca>
		}
		else if (game.joypadState.pressed & BTN_B)
    c3de:	80 ff       	sbrs	r24, 0
    c3e0:	51 c0       	rjmp	.+162    	; 0xc484 <update_player+0x59a>
		{
			game.player.flags = JUMPING;
    c3e2:	81 e0       	ldi	r24, 0x01	; 1
    c3e4:	80 93 d8 0d 	sts	0x0DD8, r24
			game.player.shared.y -= 16;
    c3e8:	20 e0       	ldi	r18, 0x00	; 0
    c3ea:	30 e0       	ldi	r19, 0x00	; 0
    c3ec:	40 e8       	ldi	r20, 0x80	; 128
    c3ee:	51 e4       	ldi	r21, 0x41	; 65
    c3f0:	60 91 d0 0d 	lds	r22, 0x0DD0
    c3f4:	70 91 d1 0d 	lds	r23, 0x0DD1
    c3f8:	80 91 d2 0d 	lds	r24, 0x0DD2
    c3fc:	90 91 d3 0d 	lds	r25, 0x0DD3
    c400:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    c404:	60 93 d0 0d 	sts	0x0DD0, r22
    c408:	70 93 d1 0d 	sts	0x0DD1, r23
    c40c:	80 93 d2 0d 	sts	0x0DD2, r24
    c410:	90 93 d3 0d 	sts	0x0DD3, r25
			if(game.player.direction == D_RIGHT)
    c414:	80 91 da 0d 	lds	r24, 0x0DDA
    c418:	81 30       	cpi	r24, 0x01	; 1
    c41a:	b1 f4       	brne	.+44     	; 0xc448 <update_player+0x55e>
			{
				game.player.shared.x += 8;
    c41c:	20 e0       	ldi	r18, 0x00	; 0
    c41e:	30 e0       	ldi	r19, 0x00	; 0
    c420:	40 e0       	ldi	r20, 0x00	; 0
    c422:	51 e4       	ldi	r21, 0x41	; 65
    c424:	60 91 cc 0d 	lds	r22, 0x0DCC
    c428:	70 91 cd 0d 	lds	r23, 0x0DCD
    c42c:	80 91 ce 0d 	lds	r24, 0x0DCE
    c430:	90 91 cf 0d 	lds	r25, 0x0DCF
    c434:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
    c438:	60 93 cc 0d 	sts	0x0DCC, r22
    c43c:	70 93 cd 0d 	sts	0x0DCD, r23
    c440:	80 93 ce 0d 	sts	0x0DCE, r24
    c444:	90 93 cf 0d 	sts	0x0DCF, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    c448:	80 e0       	ldi	r24, 0x00	; 0
    c44a:	90 e0       	ldi	r25, 0x00	; 0
    c44c:	a6 e1       	ldi	r26, 0x16	; 22
    c44e:	b3 ec       	ldi	r27, 0xC3	; 195
    c450:	80 93 c8 0d 	sts	0x0DC8, r24
    c454:	90 93 c9 0d 	sts	0x0DC9, r25
    c458:	a0 93 ca 0d 	sts	0x0DCA, r26
    c45c:	b0 93 cb 0d 	sts	0x0DCB, r27
			game.player.shared.gravity = GRAVITY;
    c460:	8f ef       	ldi	r24, 0xFF	; 255
    c462:	80 93 d6 0d 	sts	0x0DD6, r24
			game.player.width = 2;
    c466:	82 e0       	ldi	r24, 0x02	; 2
    c468:	80 93 db 0d 	sts	0x0DDB, r24
			game.player.height = 3;
    c46c:	83 e0       	ldi	r24, 0x03	; 3
    c46e:	80 93 dc 0d 	sts	0x0DDC, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c472:	40 91 b2 0f 	lds	r20, 0x0FB2
    c476:	8c e3       	ldi	r24, 0x3C	; 60
    c478:	9e e0       	ldi	r25, 0x0E	; 14
    c47a:	49 83       	std	Y+1, r20	; 0x01
    c47c:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c480:	49 81       	ldd	r20, Y+1	; 0x01
    c482:	14 c0       	rjmp	.+40     	; 0xc4ac <update_player+0x5c2>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    c484:	86 ff       	sbrs	r24, 6
    c486:	08 c0       	rjmp	.+16     	; 0xc498 <update_player+0x5ae>
		{
			game.player.direction = D_LEFT;
    c488:	10 92 da 0d 	sts	0x0DDA, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    c48c:	84 e4       	ldi	r24, 0x44	; 68
    c48e:	9e e0       	ldi	r25, 0x0E	; 14
    c490:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c494:	41 e0       	ldi	r20, 0x01	; 1
    c496:	0a c0       	rjmp	.+20     	; 0xc4ac <update_player+0x5c2>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    c498:	87 ff       	sbrs	r24, 7
    c49a:	0c c0       	rjmp	.+24     	; 0xc4b4 <update_player+0x5ca>
		{
			game.player.direction = D_RIGHT;
    c49c:	81 e0       	ldi	r24, 0x01	; 1
    c49e:	80 93 da 0d 	sts	0x0DDA, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    c4a2:	84 e4       	ldi	r24, 0x44	; 68
    c4a4:	9e e0       	ldi	r25, 0x0E	; 14
    c4a6:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c4aa:	40 e0       	ldi	r20, 0x00	; 0
    c4ac:	bc 01       	movw	r22, r24
    c4ae:	80 e0       	ldi	r24, 0x00	; 0
    c4b0:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		}
	}
	return 1;
    c4b4:	81 e0       	ldi	r24, 0x01	; 1
}
    c4b6:	0f 90       	pop	r0
    c4b8:	df 91       	pop	r29
    c4ba:	cf 91       	pop	r28
    c4bc:	1f 91       	pop	r17
    c4be:	0f 91       	pop	r16
    c4c0:	ff 90       	pop	r15
    c4c2:	ef 90       	pop	r14
    c4c4:	df 90       	pop	r13
    c4c6:	cf 90       	pop	r12
    c4c8:	08 95       	ret

0000c4ca <update_level>:
		}
	}
}

void update_level()
{
    c4ca:	cf 92       	push	r12
    c4cc:	df 92       	push	r13
    c4ce:	ef 92       	push	r14
    c4d0:	ff 92       	push	r15
    c4d2:	0f 93       	push	r16
    c4d4:	1f 93       	push	r17
    c4d6:	cf 93       	push	r28
    c4d8:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    c4da:	00 91 aa 0d 	lds	r16, 0x0DAA
    c4de:	10 91 ab 0d 	lds	r17, 0x0DAB
    c4e2:	b8 01       	movw	r22, r16
    c4e4:	80 e0       	ldi	r24, 0x00	; 0
    c4e6:	90 e0       	ldi	r25, 0x00	; 0
    c4e8:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    c4ec:	9b 01       	movw	r18, r22
    c4ee:	ac 01       	movw	r20, r24
    c4f0:	60 91 cc 0d 	lds	r22, 0x0DCC
    c4f4:	70 91 cd 0d 	lds	r23, 0x0DCD
    c4f8:	80 91 ce 0d 	lds	r24, 0x0DCE
    c4fc:	90 91 cf 0d 	lds	r25, 0x0DCF
    c500:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    c504:	6b 01       	movw	r12, r22
    c506:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    c508:	80 91 c0 0d 	lds	r24, 0x0DC0
    c50c:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    c50e:	8c 33       	cpi	r24, 0x3C	; 60
    c510:	19 f0       	breq	.+6      	; 0xc518 <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    c512:	80 93 c0 0d 	sts	0x0DC0, r24
    c516:	0f c0       	rjmp	.+30     	; 0xc536 <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    c518:	10 92 c0 0d 	sts	0x0DC0, r1
		if (game.time != 65535) game.time++;
    c51c:	80 91 b2 0d 	lds	r24, 0x0DB2
    c520:	90 91 b3 0d 	lds	r25, 0x0DB3
    c524:	8f 3f       	cpi	r24, 0xFF	; 255
    c526:	2f ef       	ldi	r18, 0xFF	; 255
    c528:	92 07       	cpc	r25, r18
    c52a:	29 f0       	breq	.+10     	; 0xc536 <update_level+0x6c>
    c52c:	01 96       	adiw	r24, 0x01	; 1
    c52e:	90 93 b3 0d 	sts	0x0DB3, r25
    c532:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    c536:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    c53a:	93 e0       	ldi	r25, 0x03	; 3
    c53c:	16 95       	lsr	r17
    c53e:	07 95       	ror	r16
    c540:	9a 95       	dec	r25
    c542:	e1 f7       	brne	.-8      	; 0xc53c <update_level+0x72>
    c544:	c0 91 bc 0d 	lds	r28, 0x0DBC
    c548:	88 23       	and	r24, r24
    c54a:	51 f0       	breq	.+20     	; 0xc560 <update_level+0x96>
    c54c:	2c 2f       	mov	r18, r28
    c54e:	30 e0       	ldi	r19, 0x00	; 0
    c550:	c8 01       	movw	r24, r16
    c552:	4c 96       	adiw	r24, 0x1c	; 28
    c554:	82 17       	cp	r24, r18
    c556:	93 07       	cpc	r25, r19
    c558:	18 f4       	brcc	.+6      	; 0xc560 <update_level+0x96>
	{
		move_camera_x();
    c55a:	0e 94 fa 4c 	call	0x99f4	; 0x99f4 <move_camera_x>
    c55e:	22 c0       	rjmp	.+68     	; 0xc5a4 <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    c560:	80 91 d4 0d 	lds	r24, 0x0DD4
    c564:	90 91 d5 0d 	lds	r25, 0x0DD5
    c568:	18 16       	cp	r1, r24
    c56a:	19 06       	cpc	r1, r25
    c56c:	8c f4       	brge	.+34     	; 0xc590 <update_level+0xc6>
    c56e:	20 e0       	ldi	r18, 0x00	; 0
    c570:	30 e0       	ldi	r19, 0x00	; 0
    c572:	40 ee       	ldi	r20, 0xE0	; 224
    c574:	52 e4       	ldi	r21, 0x42	; 66
    c576:	c7 01       	movw	r24, r14
    c578:	b6 01       	movw	r22, r12
    c57a:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c57e:	87 fd       	sbrc	r24, 7
    c580:	07 c0       	rjmp	.+14     	; 0xc590 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    c582:	2c 2f       	mov	r18, r28
    c584:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    c586:	c8 01       	movw	r24, r16
    c588:	4c 96       	adiw	r24, 0x1c	; 28
    c58a:	82 17       	cp	r24, r18
    c58c:	93 07       	cpc	r25, r19
    c58e:	28 f3       	brcs	.-54     	; 0xc55a <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    c590:	04 5e       	subi	r16, 0xE4	; 228
    c592:	1f 4f       	sbci	r17, 0xFF	; 255
    c594:	8c 2f       	mov	r24, r28
    c596:	90 e0       	ldi	r25, 0x00	; 0
    c598:	08 17       	cp	r16, r24
    c59a:	19 07       	cpc	r17, r25
    c59c:	18 f0       	brcs	.+6      	; 0xc5a4 <update_level+0xda>
	{
		game.level_ended = 1;
    c59e:	81 e0       	ldi	r24, 0x01	; 1
    c5a0:	80 93 c7 0d 	sts	0x0DC7, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    c5a4:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    c5a8:	81 11       	cpse	r24, r1
    c5aa:	40 c0       	rjmp	.+128    	; 0xc62c <update_level+0x162>
    c5ac:	20 e0       	ldi	r18, 0x00	; 0
    c5ae:	30 e0       	ldi	r19, 0x00	; 0
    c5b0:	a9 01       	movw	r20, r18
    c5b2:	60 91 c8 0d 	lds	r22, 0x0DC8
    c5b6:	70 91 c9 0d 	lds	r23, 0x0DC9
    c5ba:	80 91 ca 0d 	lds	r24, 0x0DCA
    c5be:	90 91 cb 0d 	lds	r25, 0x0DCB
    c5c2:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c5c6:	18 16       	cp	r1, r24
    c5c8:	8c f5       	brge	.+98     	; 0xc62c <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    c5ca:	c0 91 ac 0d 	lds	r28, 0x0DAC
    c5ce:	d0 91 ad 0d 	lds	r29, 0x0DAD
    c5d2:	be 01       	movw	r22, r28
    c5d4:	80 e0       	ldi	r24, 0x00	; 0
    c5d6:	90 e0       	ldi	r25, 0x00	; 0
    c5d8:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <__floatunsisf>
    c5dc:	9b 01       	movw	r18, r22
    c5de:	ac 01       	movw	r20, r24
    c5e0:	60 91 d0 0d 	lds	r22, 0x0DD0
    c5e4:	70 91 d1 0d 	lds	r23, 0x0DD1
    c5e8:	80 91 d2 0d 	lds	r24, 0x0DD2
    c5ec:	90 91 d3 0d 	lds	r25, 0x0DD3
    c5f0:	0e 94 c5 64 	call	0xc98a	; 0xc98a <__subsf3>
    c5f4:	20 e0       	ldi	r18, 0x00	; 0
    c5f6:	30 e0       	ldi	r19, 0x00	; 0
    c5f8:	40 ec       	ldi	r20, 0xC0	; 192
    c5fa:	51 e4       	ldi	r21, 0x41	; 65
    c5fc:	0e 94 c6 64 	call	0xc98c	; 0xc98c <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    c600:	20 e0       	ldi	r18, 0x00	; 0
    c602:	30 e0       	ldi	r19, 0x00	; 0
    c604:	48 e3       	ldi	r20, 0x38	; 56
    c606:	53 e4       	ldi	r21, 0x43	; 67
    c608:	0e 94 0c 66 	call	0xcc18	; 0xcc18 <__gesf2>
    c60c:	87 fd       	sbrc	r24, 7
    c60e:	0e c0       	rjmp	.+28     	; 0xc62c <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    c610:	83 e0       	ldi	r24, 0x03	; 3
    c612:	d6 95       	lsr	r29
    c614:	c7 95       	ror	r28
    c616:	8a 95       	dec	r24
    c618:	e1 f7       	brne	.-8      	; 0xc612 <update_level+0x148>
    c61a:	69 96       	adiw	r28, 0x19	; 25
    c61c:	80 91 bd 0d 	lds	r24, 0x0DBD
    c620:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    c622:	c8 17       	cp	r28, r24
    c624:	d9 07       	cpc	r29, r25
    c626:	10 f4       	brcc	.+4      	; 0xc62c <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    c628:	0e 94 13 4d 	call	0x9a26	; 0x9a26 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    c62c:	21 e0       	ldi	r18, 0x01	; 1
    c62e:	40 91 dd 0d 	lds	r20, 0x0DDD
    c632:	6d e1       	ldi	r22, 0x1D	; 29
    c634:	89 e0       	ldi	r24, 0x09	; 9
    c636:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    c63a:	40 91 b2 0d 	lds	r20, 0x0DB2
    c63e:	50 91 b3 0d 	lds	r21, 0x0DB3
    c642:	21 e0       	ldi	r18, 0x01	; 1
    c644:	6d e1       	ldi	r22, 0x1D	; 29
    c646:	8b e1       	ldi	r24, 0x1B	; 27
    c648:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    c64c:	21 e0       	ldi	r18, 0x01	; 1
    c64e:	40 91 b7 0d 	lds	r20, 0x0DB7
    c652:	6e e1       	ldi	r22, 0x1E	; 30
    c654:	89 e0       	ldi	r24, 0x09	; 9
    c656:	0e 94 0f 47 	call	0x8e1e	; 0x8e1e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    c65a:	40 91 b0 0d 	lds	r20, 0x0DB0
    c65e:	50 91 b1 0d 	lds	r21, 0x0DB1
    c662:	21 e0       	ldi	r18, 0x01	; 1
    c664:	6e e1       	ldi	r22, 0x1E	; 30
    c666:	8b e1       	ldi	r24, 0x1B	; 27
    c668:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    c66c:	40 91 ae 0d 	lds	r20, 0x0DAE
    c670:	50 91 af 0d 	lds	r21, 0x0DAF
    c674:	21 e0       	ldi	r18, 0x01	; 1
    c676:	6f e1       	ldi	r22, 0x1F	; 31
    c678:	8b e1       	ldi	r24, 0x1B	; 27
    c67a:	0e 94 40 47 	call	0x8e80	; 0x8e80 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    c67e:	80 91 c7 0d 	lds	r24, 0x0DC7
    c682:	88 23       	and	r24, r24
    c684:	09 f4       	brne	.+2      	; 0xc688 <update_level+0x1be>
    c686:	69 c0       	rjmp	.+210    	; 0xc75a <update_level+0x290>
    c688:	0e 94 93 48 	call	0x9126	; 0x9126 <is_space>
    c68c:	81 11       	cpse	r24, r1
    c68e:	56 c0       	rjmp	.+172    	; 0xc73c <update_level+0x272>
    c690:	80 91 d8 0d 	lds	r24, 0x0DD8
    c694:	8e 70       	andi	r24, 0x0E	; 14
    c696:	09 f4       	brne	.+2      	; 0xc69a <update_level+0x1d0>
    c698:	60 c0       	rjmp	.+192    	; 0xc75a <update_level+0x290>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    c69a:	40 e0       	ldi	r20, 0x00	; 0
    c69c:	6a ed       	ldi	r22, 0xDA	; 218
    c69e:	73 e3       	ldi	r23, 0x33	; 51
    c6a0:	80 e0       	ldi	r24, 0x00	; 0
    c6a2:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    c6a6:	61 e0       	ldi	r22, 0x01	; 1
    c6a8:	8e e0       	ldi	r24, 0x0E	; 14
    c6aa:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
		LBRotateSprites();
    c6ae:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
		map_ship();
    c6b2:	0e 94 2e 4d 	call	0x9a5c	; 0x9a5c <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    c6b6:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    c6b8:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    c6ba:	81 e0       	ldi	r24, 0x01	; 1
    c6bc:	90 e0       	ldi	r25, 0x00	; 0
    c6be:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    c6c2:	8c 2f       	mov	r24, r28
    c6c4:	90 e0       	ldi	r25, 0x00	; 0
    c6c6:	88 3a       	cpi	r24, 0xA8	; 168
    c6c8:	91 05       	cpc	r25, r1
    c6ca:	6c f0       	brlt	.+26     	; 0xc6e6 <update_level+0x21c>
			{
				clear_sprites(0, game.player.width*game.player.height);
    c6cc:	80 91 dc 0d 	lds	r24, 0x0DDC
    c6d0:	60 91 db 0d 	lds	r22, 0x0DDB
    c6d4:	86 9f       	mul	r24, r22
    c6d6:	60 2d       	mov	r22, r0
    c6d8:	11 24       	eor	r1, r1
    c6da:	80 e0       	ldi	r24, 0x00	; 0
    c6dc:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
				LBRotateSprites();
    c6e0:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
				ship_increment = -3;
    c6e4:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    c6e6:	84 e3       	ldi	r24, 0x34	; 52
    c6e8:	9e e0       	ldi	r25, 0x0E	; 14
    c6ea:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <LBGetNextFrame>
    c6ee:	40 e0       	ldi	r20, 0x00	; 0
    c6f0:	bc 01       	movw	r22, r24
    c6f2:	86 e0       	ldi	r24, 0x06	; 6
    c6f4:	0e 94 c4 47 	call	0x8f88	; 0x8f88 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    c6f8:	c7 01       	movw	r24, r14
    c6fa:	b6 01       	movw	r22, r12
    c6fc:	0e 94 2e 65 	call	0xca5c	; 0xca5c <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    c700:	02 e0       	ldi	r16, 0x02	; 2
    c702:	24 e0       	ldi	r18, 0x04	; 4
    c704:	4c 2f       	mov	r20, r28
    c706:	86 e0       	ldi	r24, 0x06	; 6
    c708:	0e 94 16 48 	call	0x902c	; 0x902c <LBMoveSprite>
			ship_y += ship_increment;
    c70c:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    c70e:	99 f4       	brne	.+38     	; 0xc736 <update_level+0x26c>
			{
				clear_sprites(6, 8);
    c710:	68 e0       	ldi	r22, 0x08	; 8
    c712:	86 e0       	ldi	r24, 0x06	; 6
    c714:	0e 94 c6 58 	call	0xb18c	; 0xb18c <clear_sprites>
				LBRotateSprites();
    c718:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    c71c:	64 e6       	ldi	r22, 0x64	; 100
    c71e:	70 e0       	ldi	r23, 0x00	; 0
    c720:	89 e5       	ldi	r24, 0x59	; 89
    c722:	9b e0       	ldi	r25, 0x0B	; 11
    c724:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    c728:	80 91 b9 0d 	lds	r24, 0x0DB9
    c72c:	00 e0       	ldi	r16, 0x00	; 0
    c72e:	23 e0       	ldi	r18, 0x03	; 3
    c730:	4a e1       	ldi	r20, 0x1A	; 26
    c732:	6f ef       	ldi	r22, 0xFF	; 255
    c734:	0f c0       	rjmp	.+30     	; 0xc754 <update_level+0x28a>
				break;
			}
			LBRotateSprites();
    c736:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
		}
    c73a:	bf cf       	rjmp	.-130    	; 0xc6ba <update_level+0x1f0>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    c73c:	64 e6       	ldi	r22, 0x64	; 100
    c73e:	70 e0       	ldi	r23, 0x00	; 0
    c740:	89 e5       	ldi	r24, 0x59	; 89
    c742:	9b e0       	ldi	r25, 0x0B	; 11
    c744:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    c748:	80 91 b9 0d 	lds	r24, 0x0DB9
    c74c:	07 ec       	ldi	r16, 0xC7	; 199
    c74e:	2d ef       	ldi	r18, 0xFD	; 253
    c750:	4c e1       	ldi	r20, 0x1C	; 28
    c752:	61 e0       	ldi	r22, 0x01	; 1
    c754:	8f 5f       	subi	r24, 0xFF	; 255
    c756:	0e 94 df 5a 	call	0xb5be	; 0xb5be <planet_transition>
	}
	
}
    c75a:	df 91       	pop	r29
    c75c:	cf 91       	pop	r28
    c75e:	1f 91       	pop	r17
    c760:	0f 91       	pop	r16
    c762:	ff 90       	pop	r15
    c764:	ef 90       	pop	r14
    c766:	df 90       	pop	r13
    c768:	cf 90       	pop	r12
    c76a:	08 95       	ret

0000c76c <update_pause>:
		}
	}
}

void update_pause()
{
    c76c:	ef 92       	push	r14
    c76e:	ff 92       	push	r15
    c770:	0f 93       	push	r16
    c772:	1f 93       	push	r17
    c774:	cf 93       	push	r28
    c776:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    c778:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    c77c:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    c780:	80 91 9e 0f 	lds	r24, 0x0F9E
    c784:	83 ff       	sbrs	r24, 3
    c786:	63 c0       	rjmp	.+198    	; 0xc84e <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    c788:	06 95       	lsr	r16
    c78a:	06 95       	lsr	r16
    c78c:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c78e:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    c790:	c6 95       	lsr	r28
    c792:	c6 95       	lsr	r28
    c794:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c796:	d0 e0       	ldi	r29, 0x00	; 0
    c798:	c8 01       	movw	r24, r16
    c79a:	06 96       	adiw	r24, 0x06	; 6
    c79c:	2e e1       	ldi	r18, 0x1E	; 30
    c79e:	e2 2e       	mov	r14, r18
    c7a0:	f1 2c       	mov	r15, r1
    c7a2:	b7 01       	movw	r22, r14
    c7a4:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    c7a8:	9e 01       	movw	r18, r28
    c7aa:	28 5f       	subi	r18, 0xF8	; 248
    c7ac:	3f 4f       	sbci	r19, 0xFF	; 255
    c7ae:	4a e6       	ldi	r20, 0x6A	; 106
    c7b0:	54 e5       	ldi	r21, 0x54	; 84
    c7b2:	68 2f       	mov	r22, r24
    c7b4:	82 2f       	mov	r24, r18
    c7b6:	8f 71       	andi	r24, 0x1F	; 31
    c7b8:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    c7bc:	c8 01       	movw	r24, r16
    c7be:	09 96       	adiw	r24, 0x09	; 9
    c7c0:	b7 01       	movw	r22, r14
    c7c2:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    c7c6:	9e 01       	movw	r18, r28
    c7c8:	23 5f       	subi	r18, 0xF3	; 243
    c7ca:	3f 4f       	sbci	r19, 0xFF	; 255
    c7cc:	45 e6       	ldi	r20, 0x65	; 101
    c7ce:	5b e0       	ldi	r21, 0x0B	; 11
    c7d0:	68 2f       	mov	r22, r24
    c7d2:	82 2f       	mov	r24, r18
    c7d4:	8f 71       	andi	r24, 0x1F	; 31
    c7d6:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    c7da:	c8 01       	movw	r24, r16
    c7dc:	0c 96       	adiw	r24, 0x0c	; 12
    c7de:	b7 01       	movw	r22, r14
    c7e0:	0e 94 ab 64 	call	0xc956	; 0xc956 <__divmodhi4>
    c7e4:	2a 96       	adiw	r28, 0x0a	; 10
    c7e6:	4b e6       	ldi	r20, 0x6B	; 107
    c7e8:	5b e0       	ldi	r21, 0x0B	; 11
    c7ea:	68 2f       	mov	r22, r24
    c7ec:	8c 2f       	mov	r24, r28
    c7ee:	8f 71       	andi	r24, 0x1F	; 31
    c7f0:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    c7f4:	64 e1       	ldi	r22, 0x14	; 20
    c7f6:	80 e0       	ldi	r24, 0x00	; 0
    c7f8:	0e 94 02 5a 	call	0xb404	; 0xb404 <hide_sprites>
		LBRotateSprites();
    c7fc:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    c800:	81 e0       	ldi	r24, 0x01	; 1
    c802:	90 e0       	ldi	r25, 0x00	; 0
    c804:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    c808:	60 e0       	ldi	r22, 0x00	; 0
    c80a:	8e e9       	ldi	r24, 0x9E	; 158
    c80c:	9f e0       	ldi	r25, 0x0F	; 15
    c80e:	0e 94 88 46 	call	0x8d10	; 0x8d10 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    c812:	80 91 9e 0f 	lds	r24, 0x0F9E
    c816:	90 91 9f 0f 	lds	r25, 0x0F9F
    c81a:	83 ff       	sbrs	r24, 3
    c81c:	08 c0       	rjmp	.+16     	; 0xc82e <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    c81e:	df 91       	pop	r29
    c820:	cf 91       	pop	r28
    c822:	1f 91       	pop	r17
    c824:	0f 91       	pop	r16
    c826:	ff 90       	pop	r15
    c828:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    c82a:	0c 94 4e 4b 	jmp	0x969c	; 0x969c <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    c82e:	91 ff       	sbrs	r25, 1
    c830:	e7 cf       	rjmp	.-50     	; 0xc800 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    c832:	60 e0       	ldi	r22, 0x00	; 0
    c834:	70 e0       	ldi	r23, 0x00	; 0
    c836:	89 e4       	ldi	r24, 0x49	; 73
    c838:	9b e0       	ldi	r25, 0x0B	; 11
    c83a:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    c83e:	df 91       	pop	r29
    c840:	cf 91       	pop	r28
    c842:	1f 91       	pop	r17
    c844:	0f 91       	pop	r16
    c846:	ff 90       	pop	r15
    c848:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    c84a:	0c 94 11 5d 	jmp	0xba22	; 0xba22 <exit_game>
				break;
			}
		}
	}
}
    c84e:	df 91       	pop	r29
    c850:	cf 91       	pop	r28
    c852:	1f 91       	pop	r17
    c854:	0f 91       	pop	r16
    c856:	ff 90       	pop	r15
    c858:	ef 90       	pop	r14
    c85a:	08 95       	ret

0000c85c <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    c85c:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <GetTrueRandomSeed>
    c860:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    c864:	81 e5       	ldi	r24, 0x51	; 81
    c866:	9d e1       	ldi	r25, 0x1D	; 29
    c868:	0e 94 b6 39 	call	0x736c	; 0x736c <InitMusicPlayer>
	ClearVram();
    c86c:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <ClearVram>
	SetMasterVolume(0x05);
    c870:	85 e0       	ldi	r24, 0x05	; 5
    c872:	0e 94 6a 3d 	call	0x7ad4	; 0x7ad4 <SetMasterVolume>
	SetTileTable(tiles_data);
    c876:	89 e0       	ldi	r24, 0x09	; 9
    c878:	94 e3       	ldi	r25, 0x34	; 52
    c87a:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <SetTileTable>
	SetSpritesTileTable(sprites_data);
    c87e:	80 ed       	ldi	r24, 0xD0	; 208
    c880:	9e e1       	ldi	r25, 0x1E	; 30
    c882:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    c886:	89 e8       	ldi	r24, 0x89	; 137
    c888:	93 e5       	ldi	r25, 0x53	; 83
    c88a:	90 93 83 0d 	sts	0x0D83, r25
    c88e:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    c892:	0e 94 97 48 	call	0x912e	; 0x912e <init_default_high_scores>
	load_splash();
    c896:	0e 94 cb 5b 	call	0xb796	; 0xb796 <load_splash>
	while (1)
	{
		WaitVsync(1);
    c89a:	81 e0       	ldi	r24, 0x01	; 1
    c89c:	90 e0       	ldi	r25, 0x00	; 0
    c89e:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    c8a2:	60 e0       	ldi	r22, 0x00	; 0
    c8a4:	8e e9       	ldi	r24, 0x9E	; 158
    c8a6:	9f e0       	ldi	r25, 0x0F	; 15
    c8a8:	0e 94 88 46 	call	0x8d10	; 0x8d10 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    c8ac:	80 91 b8 0d 	lds	r24, 0x0DB8
    c8b0:	82 30       	cpi	r24, 0x02	; 2
    c8b2:	b9 f4       	brne	.+46     	; 0xc8e2 <main+0x86>
		{
			update_level();
    c8b4:	0e 94 65 62 	call	0xc4ca	; 0xc4ca <update_level>
			if (update_player())
    c8b8:	0e 94 75 5f 	call	0xbeea	; 0xbeea <update_player>
    c8bc:	88 23       	and	r24, r24
    c8be:	d1 f0       	breq	.+52     	; 0xc8f4 <main+0x98>
			{
				update_shot();
    c8c0:	0e 94 58 4e 	call	0x9cb0	; 0x9cb0 <update_shot>
				update_enemies();
    c8c4:	0e 94 e7 55 	call	0xabce	; 0xabce <update_enemies>
				update_enemy_shots();
    c8c8:	0e 94 2c 56 	call	0xac58	; 0xac58 <update_enemy_shots>
				animate_player();
    c8cc:	0e 94 32 55 	call	0xaa64	; 0xaa64 <animate_player>
				animate_shot();
    c8d0:	0e 94 ae 52 	call	0xa55c	; 0xa55c <animate_shot>
				animate_enemies();
    c8d4:	0e 94 c6 56 	call	0xad8c	; 0xad8c <animate_enemies>
				animate_enemy_shots();
    c8d8:	0e 94 8f 57 	call	0xaf1e	; 0xaf1e <animate_enemy_shots>
				update_pause();
    c8dc:	0e 94 b6 63 	call	0xc76c	; 0xc76c <update_pause>
    c8e0:	09 c0       	rjmp	.+18     	; 0xc8f4 <main+0x98>
			}
		}
		else if (game.current_screen == SPLASH)
    c8e2:	81 11       	cpse	r24, r1
    c8e4:	03 c0       	rjmp	.+6      	; 0xc8ec <main+0x90>
		{
			update_splash();
    c8e6:	0e 94 1f 5d 	call	0xba3e	; 0xba3e <update_splash>
    c8ea:	04 c0       	rjmp	.+8      	; 0xc8f4 <main+0x98>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    c8ec:	81 30       	cpi	r24, 0x01	; 1
    c8ee:	11 f4       	brne	.+4      	; 0xc8f4 <main+0x98>
		{
			update_high_scores();
    c8f0:	0e 94 66 5d 	call	0xbacc	; 0xbacc <update_high_scores>
			
		}
		LBRotateSprites();
    c8f4:	0e 94 54 48 	call	0x90a8	; 0x90a8 <LBRotateSprites>
	}
    c8f8:	d0 cf       	rjmp	.-96     	; 0xc89a <main+0x3e>

0000c8fa <__udivmodqi4>:
    c8fa:	99 1b       	sub	r25, r25
    c8fc:	79 e0       	ldi	r23, 0x09	; 9
    c8fe:	04 c0       	rjmp	.+8      	; 0xc908 <__udivmodqi4_ep>

0000c900 <__udivmodqi4_loop>:
    c900:	99 1f       	adc	r25, r25
    c902:	96 17       	cp	r25, r22
    c904:	08 f0       	brcs	.+2      	; 0xc908 <__udivmodqi4_ep>
    c906:	96 1b       	sub	r25, r22

0000c908 <__udivmodqi4_ep>:
    c908:	88 1f       	adc	r24, r24
    c90a:	7a 95       	dec	r23
    c90c:	c9 f7       	brne	.-14     	; 0xc900 <__udivmodqi4_loop>
    c90e:	80 95       	com	r24
    c910:	08 95       	ret

0000c912 <__divmodqi4>:
    c912:	87 fb       	bst	r24, 7
    c914:	08 2e       	mov	r0, r24
    c916:	06 26       	eor	r0, r22
    c918:	87 fd       	sbrc	r24, 7
    c91a:	81 95       	neg	r24
    c91c:	67 fd       	sbrc	r22, 7
    c91e:	61 95       	neg	r22
    c920:	0e 94 7d 64 	call	0xc8fa	; 0xc8fa <__udivmodqi4>
    c924:	0e f4       	brtc	.+2      	; 0xc928 <__divmodqi4_1>
    c926:	91 95       	neg	r25

0000c928 <__divmodqi4_1>:
    c928:	07 fc       	sbrc	r0, 7
    c92a:	81 95       	neg	r24

0000c92c <__divmodqi4_exit>:
    c92c:	08 95       	ret

0000c92e <__udivmodhi4>:
    c92e:	aa 1b       	sub	r26, r26
    c930:	bb 1b       	sub	r27, r27
    c932:	51 e1       	ldi	r21, 0x11	; 17
    c934:	07 c0       	rjmp	.+14     	; 0xc944 <__udivmodhi4_ep>

0000c936 <__udivmodhi4_loop>:
    c936:	aa 1f       	adc	r26, r26
    c938:	bb 1f       	adc	r27, r27
    c93a:	a6 17       	cp	r26, r22
    c93c:	b7 07       	cpc	r27, r23
    c93e:	10 f0       	brcs	.+4      	; 0xc944 <__udivmodhi4_ep>
    c940:	a6 1b       	sub	r26, r22
    c942:	b7 0b       	sbc	r27, r23

0000c944 <__udivmodhi4_ep>:
    c944:	88 1f       	adc	r24, r24
    c946:	99 1f       	adc	r25, r25
    c948:	5a 95       	dec	r21
    c94a:	a9 f7       	brne	.-22     	; 0xc936 <__udivmodhi4_loop>
    c94c:	80 95       	com	r24
    c94e:	90 95       	com	r25
    c950:	bc 01       	movw	r22, r24
    c952:	cd 01       	movw	r24, r26
    c954:	08 95       	ret

0000c956 <__divmodhi4>:
    c956:	97 fb       	bst	r25, 7
    c958:	07 2e       	mov	r0, r23
    c95a:	16 f4       	brtc	.+4      	; 0xc960 <__divmodhi4+0xa>
    c95c:	00 94       	com	r0
    c95e:	07 d0       	rcall	.+14     	; 0xc96e <__divmodhi4_neg1>
    c960:	77 fd       	sbrc	r23, 7
    c962:	09 d0       	rcall	.+18     	; 0xc976 <__divmodhi4_neg2>
    c964:	0e 94 97 64 	call	0xc92e	; 0xc92e <__udivmodhi4>
    c968:	07 fc       	sbrc	r0, 7
    c96a:	05 d0       	rcall	.+10     	; 0xc976 <__divmodhi4_neg2>
    c96c:	3e f4       	brtc	.+14     	; 0xc97c <__divmodhi4_exit>

0000c96e <__divmodhi4_neg1>:
    c96e:	90 95       	com	r25
    c970:	81 95       	neg	r24
    c972:	9f 4f       	sbci	r25, 0xFF	; 255
    c974:	08 95       	ret

0000c976 <__divmodhi4_neg2>:
    c976:	70 95       	com	r23
    c978:	61 95       	neg	r22
    c97a:	7f 4f       	sbci	r23, 0xFF	; 255

0000c97c <__divmodhi4_exit>:
    c97c:	08 95       	ret

0000c97e <__tablejump2__>:
    c97e:	ee 0f       	add	r30, r30
    c980:	ff 1f       	adc	r31, r31
    c982:	05 90       	lpm	r0, Z+
    c984:	f4 91       	lpm	r31, Z
    c986:	e0 2d       	mov	r30, r0
    c988:	09 94       	ijmp

0000c98a <__subsf3>:
    c98a:	50 58       	subi	r21, 0x80	; 128

0000c98c <__addsf3>:
    c98c:	bb 27       	eor	r27, r27
    c98e:	aa 27       	eor	r26, r26
    c990:	0e d0       	rcall	.+28     	; 0xc9ae <__addsf3x>
    c992:	08 c1       	rjmp	.+528    	; 0xcba4 <__fp_round>
    c994:	f9 d0       	rcall	.+498    	; 0xcb88 <__fp_pscA>
    c996:	30 f0       	brcs	.+12     	; 0xc9a4 <__addsf3+0x18>
    c998:	fe d0       	rcall	.+508    	; 0xcb96 <__fp_pscB>
    c99a:	20 f0       	brcs	.+8      	; 0xc9a4 <__addsf3+0x18>
    c99c:	31 f4       	brne	.+12     	; 0xc9aa <__addsf3+0x1e>
    c99e:	9f 3f       	cpi	r25, 0xFF	; 255
    c9a0:	11 f4       	brne	.+4      	; 0xc9a6 <__addsf3+0x1a>
    c9a2:	1e f4       	brtc	.+6      	; 0xc9aa <__addsf3+0x1e>
    c9a4:	ee c0       	rjmp	.+476    	; 0xcb82 <__fp_nan>
    c9a6:	0e f4       	brtc	.+2      	; 0xc9aa <__addsf3+0x1e>
    c9a8:	e0 95       	com	r30
    c9aa:	e7 fb       	bst	r30, 7
    c9ac:	e4 c0       	rjmp	.+456    	; 0xcb76 <__fp_inf>

0000c9ae <__addsf3x>:
    c9ae:	e9 2f       	mov	r30, r25
    c9b0:	0a d1       	rcall	.+532    	; 0xcbc6 <__fp_split3>
    c9b2:	80 f3       	brcs	.-32     	; 0xc994 <__addsf3+0x8>
    c9b4:	ba 17       	cp	r27, r26
    c9b6:	62 07       	cpc	r22, r18
    c9b8:	73 07       	cpc	r23, r19
    c9ba:	84 07       	cpc	r24, r20
    c9bc:	95 07       	cpc	r25, r21
    c9be:	18 f0       	brcs	.+6      	; 0xc9c6 <__addsf3x+0x18>
    c9c0:	71 f4       	brne	.+28     	; 0xc9de <__addsf3x+0x30>
    c9c2:	9e f5       	brtc	.+102    	; 0xca2a <__addsf3x+0x7c>
    c9c4:	22 c1       	rjmp	.+580    	; 0xcc0a <__fp_zero>
    c9c6:	0e f4       	brtc	.+2      	; 0xc9ca <__addsf3x+0x1c>
    c9c8:	e0 95       	com	r30
    c9ca:	0b 2e       	mov	r0, r27
    c9cc:	ba 2f       	mov	r27, r26
    c9ce:	a0 2d       	mov	r26, r0
    c9d0:	0b 01       	movw	r0, r22
    c9d2:	b9 01       	movw	r22, r18
    c9d4:	90 01       	movw	r18, r0
    c9d6:	0c 01       	movw	r0, r24
    c9d8:	ca 01       	movw	r24, r20
    c9da:	a0 01       	movw	r20, r0
    c9dc:	11 24       	eor	r1, r1
    c9de:	ff 27       	eor	r31, r31
    c9e0:	59 1b       	sub	r21, r25
    c9e2:	99 f0       	breq	.+38     	; 0xca0a <__addsf3x+0x5c>
    c9e4:	59 3f       	cpi	r21, 0xF9	; 249
    c9e6:	50 f4       	brcc	.+20     	; 0xc9fc <__addsf3x+0x4e>
    c9e8:	50 3e       	cpi	r21, 0xE0	; 224
    c9ea:	68 f1       	brcs	.+90     	; 0xca46 <__addsf3x+0x98>
    c9ec:	1a 16       	cp	r1, r26
    c9ee:	f0 40       	sbci	r31, 0x00	; 0
    c9f0:	a2 2f       	mov	r26, r18
    c9f2:	23 2f       	mov	r18, r19
    c9f4:	34 2f       	mov	r19, r20
    c9f6:	44 27       	eor	r20, r20
    c9f8:	58 5f       	subi	r21, 0xF8	; 248
    c9fa:	f3 cf       	rjmp	.-26     	; 0xc9e2 <__addsf3x+0x34>
    c9fc:	46 95       	lsr	r20
    c9fe:	37 95       	ror	r19
    ca00:	27 95       	ror	r18
    ca02:	a7 95       	ror	r26
    ca04:	f0 40       	sbci	r31, 0x00	; 0
    ca06:	53 95       	inc	r21
    ca08:	c9 f7       	brne	.-14     	; 0xc9fc <__addsf3x+0x4e>
    ca0a:	7e f4       	brtc	.+30     	; 0xca2a <__addsf3x+0x7c>
    ca0c:	1f 16       	cp	r1, r31
    ca0e:	ba 0b       	sbc	r27, r26
    ca10:	62 0b       	sbc	r22, r18
    ca12:	73 0b       	sbc	r23, r19
    ca14:	84 0b       	sbc	r24, r20
    ca16:	ba f0       	brmi	.+46     	; 0xca46 <__addsf3x+0x98>
    ca18:	91 50       	subi	r25, 0x01	; 1
    ca1a:	a1 f0       	breq	.+40     	; 0xca44 <__addsf3x+0x96>
    ca1c:	ff 0f       	add	r31, r31
    ca1e:	bb 1f       	adc	r27, r27
    ca20:	66 1f       	adc	r22, r22
    ca22:	77 1f       	adc	r23, r23
    ca24:	88 1f       	adc	r24, r24
    ca26:	c2 f7       	brpl	.-16     	; 0xca18 <__addsf3x+0x6a>
    ca28:	0e c0       	rjmp	.+28     	; 0xca46 <__addsf3x+0x98>
    ca2a:	ba 0f       	add	r27, r26
    ca2c:	62 1f       	adc	r22, r18
    ca2e:	73 1f       	adc	r23, r19
    ca30:	84 1f       	adc	r24, r20
    ca32:	48 f4       	brcc	.+18     	; 0xca46 <__addsf3x+0x98>
    ca34:	87 95       	ror	r24
    ca36:	77 95       	ror	r23
    ca38:	67 95       	ror	r22
    ca3a:	b7 95       	ror	r27
    ca3c:	f7 95       	ror	r31
    ca3e:	9e 3f       	cpi	r25, 0xFE	; 254
    ca40:	08 f0       	brcs	.+2      	; 0xca44 <__addsf3x+0x96>
    ca42:	b3 cf       	rjmp	.-154    	; 0xc9aa <__addsf3+0x1e>
    ca44:	93 95       	inc	r25
    ca46:	88 0f       	add	r24, r24
    ca48:	08 f0       	brcs	.+2      	; 0xca4c <__addsf3x+0x9e>
    ca4a:	99 27       	eor	r25, r25
    ca4c:	ee 0f       	add	r30, r30
    ca4e:	97 95       	ror	r25
    ca50:	87 95       	ror	r24
    ca52:	08 95       	ret

0000ca54 <__cmpsf2>:
    ca54:	6c d0       	rcall	.+216    	; 0xcb2e <__fp_cmp>
    ca56:	08 f4       	brcc	.+2      	; 0xca5a <__cmpsf2+0x6>
    ca58:	81 e0       	ldi	r24, 0x01	; 1
    ca5a:	08 95       	ret

0000ca5c <__fixunssfsi>:
    ca5c:	bc d0       	rcall	.+376    	; 0xcbd6 <__fp_splitA>
    ca5e:	88 f0       	brcs	.+34     	; 0xca82 <__fixunssfsi+0x26>
    ca60:	9f 57       	subi	r25, 0x7F	; 127
    ca62:	90 f0       	brcs	.+36     	; 0xca88 <__fixunssfsi+0x2c>
    ca64:	b9 2f       	mov	r27, r25
    ca66:	99 27       	eor	r25, r25
    ca68:	b7 51       	subi	r27, 0x17	; 23
    ca6a:	a0 f0       	brcs	.+40     	; 0xca94 <__fixunssfsi+0x38>
    ca6c:	d1 f0       	breq	.+52     	; 0xcaa2 <__fixunssfsi+0x46>
    ca6e:	66 0f       	add	r22, r22
    ca70:	77 1f       	adc	r23, r23
    ca72:	88 1f       	adc	r24, r24
    ca74:	99 1f       	adc	r25, r25
    ca76:	1a f0       	brmi	.+6      	; 0xca7e <__fixunssfsi+0x22>
    ca78:	ba 95       	dec	r27
    ca7a:	c9 f7       	brne	.-14     	; 0xca6e <__fixunssfsi+0x12>
    ca7c:	12 c0       	rjmp	.+36     	; 0xcaa2 <__fixunssfsi+0x46>
    ca7e:	b1 30       	cpi	r27, 0x01	; 1
    ca80:	81 f0       	breq	.+32     	; 0xcaa2 <__fixunssfsi+0x46>
    ca82:	c3 d0       	rcall	.+390    	; 0xcc0a <__fp_zero>
    ca84:	b1 e0       	ldi	r27, 0x01	; 1
    ca86:	08 95       	ret
    ca88:	c0 c0       	rjmp	.+384    	; 0xcc0a <__fp_zero>
    ca8a:	67 2f       	mov	r22, r23
    ca8c:	78 2f       	mov	r23, r24
    ca8e:	88 27       	eor	r24, r24
    ca90:	b8 5f       	subi	r27, 0xF8	; 248
    ca92:	39 f0       	breq	.+14     	; 0xcaa2 <__fixunssfsi+0x46>
    ca94:	b9 3f       	cpi	r27, 0xF9	; 249
    ca96:	cc f3       	brlt	.-14     	; 0xca8a <__fixunssfsi+0x2e>
    ca98:	86 95       	lsr	r24
    ca9a:	77 95       	ror	r23
    ca9c:	67 95       	ror	r22
    ca9e:	b3 95       	inc	r27
    caa0:	d9 f7       	brne	.-10     	; 0xca98 <__fixunssfsi+0x3c>
    caa2:	3e f4       	brtc	.+14     	; 0xcab2 <__fixunssfsi+0x56>
    caa4:	90 95       	com	r25
    caa6:	80 95       	com	r24
    caa8:	70 95       	com	r23
    caaa:	61 95       	neg	r22
    caac:	7f 4f       	sbci	r23, 0xFF	; 255
    caae:	8f 4f       	sbci	r24, 0xFF	; 255
    cab0:	9f 4f       	sbci	r25, 0xFF	; 255
    cab2:	08 95       	ret

0000cab4 <__floatunsisf>:
    cab4:	e8 94       	clt
    cab6:	09 c0       	rjmp	.+18     	; 0xcaca <__floatsisf+0x12>

0000cab8 <__floatsisf>:
    cab8:	97 fb       	bst	r25, 7
    caba:	3e f4       	brtc	.+14     	; 0xcaca <__floatsisf+0x12>
    cabc:	90 95       	com	r25
    cabe:	80 95       	com	r24
    cac0:	70 95       	com	r23
    cac2:	61 95       	neg	r22
    cac4:	7f 4f       	sbci	r23, 0xFF	; 255
    cac6:	8f 4f       	sbci	r24, 0xFF	; 255
    cac8:	9f 4f       	sbci	r25, 0xFF	; 255
    caca:	99 23       	and	r25, r25
    cacc:	a9 f0       	breq	.+42     	; 0xcaf8 <__floatsisf+0x40>
    cace:	f9 2f       	mov	r31, r25
    cad0:	96 e9       	ldi	r25, 0x96	; 150
    cad2:	bb 27       	eor	r27, r27
    cad4:	93 95       	inc	r25
    cad6:	f6 95       	lsr	r31
    cad8:	87 95       	ror	r24
    cada:	77 95       	ror	r23
    cadc:	67 95       	ror	r22
    cade:	b7 95       	ror	r27
    cae0:	f1 11       	cpse	r31, r1
    cae2:	f8 cf       	rjmp	.-16     	; 0xcad4 <__floatsisf+0x1c>
    cae4:	fa f4       	brpl	.+62     	; 0xcb24 <__floatsisf+0x6c>
    cae6:	bb 0f       	add	r27, r27
    cae8:	11 f4       	brne	.+4      	; 0xcaee <__floatsisf+0x36>
    caea:	60 ff       	sbrs	r22, 0
    caec:	1b c0       	rjmp	.+54     	; 0xcb24 <__floatsisf+0x6c>
    caee:	6f 5f       	subi	r22, 0xFF	; 255
    caf0:	7f 4f       	sbci	r23, 0xFF	; 255
    caf2:	8f 4f       	sbci	r24, 0xFF	; 255
    caf4:	9f 4f       	sbci	r25, 0xFF	; 255
    caf6:	16 c0       	rjmp	.+44     	; 0xcb24 <__floatsisf+0x6c>
    caf8:	88 23       	and	r24, r24
    cafa:	11 f0       	breq	.+4      	; 0xcb00 <__floatsisf+0x48>
    cafc:	96 e9       	ldi	r25, 0x96	; 150
    cafe:	11 c0       	rjmp	.+34     	; 0xcb22 <__floatsisf+0x6a>
    cb00:	77 23       	and	r23, r23
    cb02:	21 f0       	breq	.+8      	; 0xcb0c <__floatsisf+0x54>
    cb04:	9e e8       	ldi	r25, 0x8E	; 142
    cb06:	87 2f       	mov	r24, r23
    cb08:	76 2f       	mov	r23, r22
    cb0a:	05 c0       	rjmp	.+10     	; 0xcb16 <__floatsisf+0x5e>
    cb0c:	66 23       	and	r22, r22
    cb0e:	71 f0       	breq	.+28     	; 0xcb2c <__floatsisf+0x74>
    cb10:	96 e8       	ldi	r25, 0x86	; 134
    cb12:	86 2f       	mov	r24, r22
    cb14:	70 e0       	ldi	r23, 0x00	; 0
    cb16:	60 e0       	ldi	r22, 0x00	; 0
    cb18:	2a f0       	brmi	.+10     	; 0xcb24 <__floatsisf+0x6c>
    cb1a:	9a 95       	dec	r25
    cb1c:	66 0f       	add	r22, r22
    cb1e:	77 1f       	adc	r23, r23
    cb20:	88 1f       	adc	r24, r24
    cb22:	da f7       	brpl	.-10     	; 0xcb1a <__floatsisf+0x62>
    cb24:	88 0f       	add	r24, r24
    cb26:	96 95       	lsr	r25
    cb28:	87 95       	ror	r24
    cb2a:	97 f9       	bld	r25, 7
    cb2c:	08 95       	ret

0000cb2e <__fp_cmp>:
    cb2e:	99 0f       	add	r25, r25
    cb30:	00 08       	sbc	r0, r0
    cb32:	55 0f       	add	r21, r21
    cb34:	aa 0b       	sbc	r26, r26
    cb36:	e0 e8       	ldi	r30, 0x80	; 128
    cb38:	fe ef       	ldi	r31, 0xFE	; 254
    cb3a:	16 16       	cp	r1, r22
    cb3c:	17 06       	cpc	r1, r23
    cb3e:	e8 07       	cpc	r30, r24
    cb40:	f9 07       	cpc	r31, r25
    cb42:	c0 f0       	brcs	.+48     	; 0xcb74 <__fp_cmp+0x46>
    cb44:	12 16       	cp	r1, r18
    cb46:	13 06       	cpc	r1, r19
    cb48:	e4 07       	cpc	r30, r20
    cb4a:	f5 07       	cpc	r31, r21
    cb4c:	98 f0       	brcs	.+38     	; 0xcb74 <__fp_cmp+0x46>
    cb4e:	62 1b       	sub	r22, r18
    cb50:	73 0b       	sbc	r23, r19
    cb52:	84 0b       	sbc	r24, r20
    cb54:	95 0b       	sbc	r25, r21
    cb56:	39 f4       	brne	.+14     	; 0xcb66 <__fp_cmp+0x38>
    cb58:	0a 26       	eor	r0, r26
    cb5a:	61 f0       	breq	.+24     	; 0xcb74 <__fp_cmp+0x46>
    cb5c:	23 2b       	or	r18, r19
    cb5e:	24 2b       	or	r18, r20
    cb60:	25 2b       	or	r18, r21
    cb62:	21 f4       	brne	.+8      	; 0xcb6c <__fp_cmp+0x3e>
    cb64:	08 95       	ret
    cb66:	0a 26       	eor	r0, r26
    cb68:	09 f4       	brne	.+2      	; 0xcb6c <__fp_cmp+0x3e>
    cb6a:	a1 40       	sbci	r26, 0x01	; 1
    cb6c:	a6 95       	lsr	r26
    cb6e:	8f ef       	ldi	r24, 0xFF	; 255
    cb70:	81 1d       	adc	r24, r1
    cb72:	81 1d       	adc	r24, r1
    cb74:	08 95       	ret

0000cb76 <__fp_inf>:
    cb76:	97 f9       	bld	r25, 7
    cb78:	9f 67       	ori	r25, 0x7F	; 127
    cb7a:	80 e8       	ldi	r24, 0x80	; 128
    cb7c:	70 e0       	ldi	r23, 0x00	; 0
    cb7e:	60 e0       	ldi	r22, 0x00	; 0
    cb80:	08 95       	ret

0000cb82 <__fp_nan>:
    cb82:	9f ef       	ldi	r25, 0xFF	; 255
    cb84:	80 ec       	ldi	r24, 0xC0	; 192
    cb86:	08 95       	ret

0000cb88 <__fp_pscA>:
    cb88:	00 24       	eor	r0, r0
    cb8a:	0a 94       	dec	r0
    cb8c:	16 16       	cp	r1, r22
    cb8e:	17 06       	cpc	r1, r23
    cb90:	18 06       	cpc	r1, r24
    cb92:	09 06       	cpc	r0, r25
    cb94:	08 95       	ret

0000cb96 <__fp_pscB>:
    cb96:	00 24       	eor	r0, r0
    cb98:	0a 94       	dec	r0
    cb9a:	12 16       	cp	r1, r18
    cb9c:	13 06       	cpc	r1, r19
    cb9e:	14 06       	cpc	r1, r20
    cba0:	05 06       	cpc	r0, r21
    cba2:	08 95       	ret

0000cba4 <__fp_round>:
    cba4:	09 2e       	mov	r0, r25
    cba6:	03 94       	inc	r0
    cba8:	00 0c       	add	r0, r0
    cbaa:	11 f4       	brne	.+4      	; 0xcbb0 <__fp_round+0xc>
    cbac:	88 23       	and	r24, r24
    cbae:	52 f0       	brmi	.+20     	; 0xcbc4 <__fp_round+0x20>
    cbb0:	bb 0f       	add	r27, r27
    cbb2:	40 f4       	brcc	.+16     	; 0xcbc4 <__fp_round+0x20>
    cbb4:	bf 2b       	or	r27, r31
    cbb6:	11 f4       	brne	.+4      	; 0xcbbc <__fp_round+0x18>
    cbb8:	60 ff       	sbrs	r22, 0
    cbba:	04 c0       	rjmp	.+8      	; 0xcbc4 <__fp_round+0x20>
    cbbc:	6f 5f       	subi	r22, 0xFF	; 255
    cbbe:	7f 4f       	sbci	r23, 0xFF	; 255
    cbc0:	8f 4f       	sbci	r24, 0xFF	; 255
    cbc2:	9f 4f       	sbci	r25, 0xFF	; 255
    cbc4:	08 95       	ret

0000cbc6 <__fp_split3>:
    cbc6:	57 fd       	sbrc	r21, 7
    cbc8:	90 58       	subi	r25, 0x80	; 128
    cbca:	44 0f       	add	r20, r20
    cbcc:	55 1f       	adc	r21, r21
    cbce:	59 f0       	breq	.+22     	; 0xcbe6 <__fp_splitA+0x10>
    cbd0:	5f 3f       	cpi	r21, 0xFF	; 255
    cbd2:	71 f0       	breq	.+28     	; 0xcbf0 <__fp_splitA+0x1a>
    cbd4:	47 95       	ror	r20

0000cbd6 <__fp_splitA>:
    cbd6:	88 0f       	add	r24, r24
    cbd8:	97 fb       	bst	r25, 7
    cbda:	99 1f       	adc	r25, r25
    cbdc:	61 f0       	breq	.+24     	; 0xcbf6 <__fp_splitA+0x20>
    cbde:	9f 3f       	cpi	r25, 0xFF	; 255
    cbe0:	79 f0       	breq	.+30     	; 0xcc00 <__fp_splitA+0x2a>
    cbe2:	87 95       	ror	r24
    cbe4:	08 95       	ret
    cbe6:	12 16       	cp	r1, r18
    cbe8:	13 06       	cpc	r1, r19
    cbea:	14 06       	cpc	r1, r20
    cbec:	55 1f       	adc	r21, r21
    cbee:	f2 cf       	rjmp	.-28     	; 0xcbd4 <__fp_split3+0xe>
    cbf0:	46 95       	lsr	r20
    cbf2:	f1 df       	rcall	.-30     	; 0xcbd6 <__fp_splitA>
    cbf4:	08 c0       	rjmp	.+16     	; 0xcc06 <__fp_splitA+0x30>
    cbf6:	16 16       	cp	r1, r22
    cbf8:	17 06       	cpc	r1, r23
    cbfa:	18 06       	cpc	r1, r24
    cbfc:	99 1f       	adc	r25, r25
    cbfe:	f1 cf       	rjmp	.-30     	; 0xcbe2 <__fp_splitA+0xc>
    cc00:	86 95       	lsr	r24
    cc02:	71 05       	cpc	r23, r1
    cc04:	61 05       	cpc	r22, r1
    cc06:	08 94       	sec
    cc08:	08 95       	ret

0000cc0a <__fp_zero>:
    cc0a:	e8 94       	clt

0000cc0c <__fp_szero>:
    cc0c:	bb 27       	eor	r27, r27
    cc0e:	66 27       	eor	r22, r22
    cc10:	77 27       	eor	r23, r23
    cc12:	cb 01       	movw	r24, r22
    cc14:	97 f9       	bld	r25, 7
    cc16:	08 95       	ret

0000cc18 <__gesf2>:
    cc18:	8a df       	rcall	.-236    	; 0xcb2e <__fp_cmp>
    cc1a:	08 f4       	brcc	.+2      	; 0xcc1e <__gesf2+0x6>
    cc1c:	8f ef       	ldi	r24, 0xFF	; 255
    cc1e:	08 95       	ret

0000cc20 <__mulsf3>:
    cc20:	0b d0       	rcall	.+22     	; 0xcc38 <__mulsf3x>
    cc22:	c0 cf       	rjmp	.-128    	; 0xcba4 <__fp_round>
    cc24:	b1 df       	rcall	.-158    	; 0xcb88 <__fp_pscA>
    cc26:	28 f0       	brcs	.+10     	; 0xcc32 <__mulsf3+0x12>
    cc28:	b6 df       	rcall	.-148    	; 0xcb96 <__fp_pscB>
    cc2a:	18 f0       	brcs	.+6      	; 0xcc32 <__mulsf3+0x12>
    cc2c:	95 23       	and	r25, r21
    cc2e:	09 f0       	breq	.+2      	; 0xcc32 <__mulsf3+0x12>
    cc30:	a2 cf       	rjmp	.-188    	; 0xcb76 <__fp_inf>
    cc32:	a7 cf       	rjmp	.-178    	; 0xcb82 <__fp_nan>
    cc34:	11 24       	eor	r1, r1
    cc36:	ea cf       	rjmp	.-44     	; 0xcc0c <__fp_szero>

0000cc38 <__mulsf3x>:
    cc38:	c6 df       	rcall	.-116    	; 0xcbc6 <__fp_split3>
    cc3a:	a0 f3       	brcs	.-24     	; 0xcc24 <__mulsf3+0x4>

0000cc3c <__mulsf3_pse>:
    cc3c:	95 9f       	mul	r25, r21
    cc3e:	d1 f3       	breq	.-12     	; 0xcc34 <__mulsf3+0x14>
    cc40:	95 0f       	add	r25, r21
    cc42:	50 e0       	ldi	r21, 0x00	; 0
    cc44:	55 1f       	adc	r21, r21
    cc46:	62 9f       	mul	r22, r18
    cc48:	f0 01       	movw	r30, r0
    cc4a:	72 9f       	mul	r23, r18
    cc4c:	bb 27       	eor	r27, r27
    cc4e:	f0 0d       	add	r31, r0
    cc50:	b1 1d       	adc	r27, r1
    cc52:	63 9f       	mul	r22, r19
    cc54:	aa 27       	eor	r26, r26
    cc56:	f0 0d       	add	r31, r0
    cc58:	b1 1d       	adc	r27, r1
    cc5a:	aa 1f       	adc	r26, r26
    cc5c:	64 9f       	mul	r22, r20
    cc5e:	66 27       	eor	r22, r22
    cc60:	b0 0d       	add	r27, r0
    cc62:	a1 1d       	adc	r26, r1
    cc64:	66 1f       	adc	r22, r22
    cc66:	82 9f       	mul	r24, r18
    cc68:	22 27       	eor	r18, r18
    cc6a:	b0 0d       	add	r27, r0
    cc6c:	a1 1d       	adc	r26, r1
    cc6e:	62 1f       	adc	r22, r18
    cc70:	73 9f       	mul	r23, r19
    cc72:	b0 0d       	add	r27, r0
    cc74:	a1 1d       	adc	r26, r1
    cc76:	62 1f       	adc	r22, r18
    cc78:	83 9f       	mul	r24, r19
    cc7a:	a0 0d       	add	r26, r0
    cc7c:	61 1d       	adc	r22, r1
    cc7e:	22 1f       	adc	r18, r18
    cc80:	74 9f       	mul	r23, r20
    cc82:	33 27       	eor	r19, r19
    cc84:	a0 0d       	add	r26, r0
    cc86:	61 1d       	adc	r22, r1
    cc88:	23 1f       	adc	r18, r19
    cc8a:	84 9f       	mul	r24, r20
    cc8c:	60 0d       	add	r22, r0
    cc8e:	21 1d       	adc	r18, r1
    cc90:	82 2f       	mov	r24, r18
    cc92:	76 2f       	mov	r23, r22
    cc94:	6a 2f       	mov	r22, r26
    cc96:	11 24       	eor	r1, r1
    cc98:	9f 57       	subi	r25, 0x7F	; 127
    cc9a:	50 40       	sbci	r21, 0x00	; 0
    cc9c:	8a f0       	brmi	.+34     	; 0xccc0 <__mulsf3_pse+0x84>
    cc9e:	e1 f0       	breq	.+56     	; 0xccd8 <__mulsf3_pse+0x9c>
    cca0:	88 23       	and	r24, r24
    cca2:	4a f0       	brmi	.+18     	; 0xccb6 <__mulsf3_pse+0x7a>
    cca4:	ee 0f       	add	r30, r30
    cca6:	ff 1f       	adc	r31, r31
    cca8:	bb 1f       	adc	r27, r27
    ccaa:	66 1f       	adc	r22, r22
    ccac:	77 1f       	adc	r23, r23
    ccae:	88 1f       	adc	r24, r24
    ccb0:	91 50       	subi	r25, 0x01	; 1
    ccb2:	50 40       	sbci	r21, 0x00	; 0
    ccb4:	a9 f7       	brne	.-22     	; 0xcca0 <__mulsf3_pse+0x64>
    ccb6:	9e 3f       	cpi	r25, 0xFE	; 254
    ccb8:	51 05       	cpc	r21, r1
    ccba:	70 f0       	brcs	.+28     	; 0xccd8 <__mulsf3_pse+0x9c>
    ccbc:	5c cf       	rjmp	.-328    	; 0xcb76 <__fp_inf>
    ccbe:	a6 cf       	rjmp	.-180    	; 0xcc0c <__fp_szero>
    ccc0:	5f 3f       	cpi	r21, 0xFF	; 255
    ccc2:	ec f3       	brlt	.-6      	; 0xccbe <__mulsf3_pse+0x82>
    ccc4:	98 3e       	cpi	r25, 0xE8	; 232
    ccc6:	dc f3       	brlt	.-10     	; 0xccbe <__mulsf3_pse+0x82>
    ccc8:	86 95       	lsr	r24
    ccca:	77 95       	ror	r23
    cccc:	67 95       	ror	r22
    ccce:	b7 95       	ror	r27
    ccd0:	f7 95       	ror	r31
    ccd2:	e7 95       	ror	r30
    ccd4:	9f 5f       	subi	r25, 0xFF	; 255
    ccd6:	c1 f7       	brne	.-16     	; 0xccc8 <__mulsf3_pse+0x8c>
    ccd8:	fe 2b       	or	r31, r30
    ccda:	88 0f       	add	r24, r24
    ccdc:	91 1d       	adc	r25, r1
    ccde:	96 95       	lsr	r25
    cce0:	87 95       	ror	r24
    cce2:	97 f9       	bld	r25, 7
    cce4:	08 95       	ret

0000cce6 <strnlen_P>:
    cce6:	fc 01       	movw	r30, r24
    cce8:	05 90       	lpm	r0, Z+
    ccea:	61 50       	subi	r22, 0x01	; 1
    ccec:	70 40       	sbci	r23, 0x00	; 0
    ccee:	01 10       	cpse	r0, r1
    ccf0:	d8 f7       	brcc	.-10     	; 0xcce8 <strnlen_P+0x2>
    ccf2:	80 95       	com	r24
    ccf4:	90 95       	com	r25
    ccf6:	8e 0f       	add	r24, r30
    ccf8:	9f 1f       	adc	r25, r31
    ccfa:	08 95       	ret

0000ccfc <_exit>:
    ccfc:	f8 94       	cli

0000ccfe <__stop_program>:
    ccfe:	ff cf       	rjmp	.-2      	; 0xccfe <__stop_program>
