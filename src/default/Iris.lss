
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000ba6e  0000bb6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000bb80  2**5
                  CONTENTS, READONLY
  2 .text         0000ba6e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000af2  00800502  00800502  0000bb70  2**1
                  ALLOC
  4 .stab         0000057c  00000000  00000000  0000bf80  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000256  00000000  00000000  0000c4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000c752  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000600  00000000  00000000  0000c768  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000074e7  00000000  00000000  0000cd68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001659  00000000  00000000  0001424f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001eb1  00000000  00000000  000158a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001280  00000000  00000000  0001775c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001948  00000000  00000000  000189dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000649c  00000000  00000000  0001a324  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000730  00000000  00000000  000207c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 31 	jmp	0x63e6	; 0x63e6 <__ctors_end>
       4:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
       8:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
       c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      10:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      14:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      18:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      1c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      20:	0c 94 cf 37 	jmp	0x6f9e	; 0x6f9e <__vector_8>
      24:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      28:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      2c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      30:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      34:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <__vector_13>
      38:	0c 94 e0 35 	jmp	0x6bc0	; 0x6bc0 <__vector_14>
      3c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      40:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      44:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      48:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      4c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      50:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      54:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      58:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      5c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      60:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      64:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      68:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>
      6c:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	17 39 1a 39 76 39 7a 39 81 39 22 39 27 39 2c 39     .9.9v9z9.9"9'9,9
      ce:	89 39 2f 39 32 39 35 39 70 39 73 39 99 39           .9/92959p9s9.9

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <strTwist>:
     92f:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     93f:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     94f:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     95f:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     96f:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     97f:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     98f:	52 20 54 48 49 53 20 47 41 4c 41 58 59 00 00 4e     R THIS GALAXY..N
     99f:	4f 57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00     OW YOU WILL DIE.

000009af <strReveal4>:
     9af:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9bf:	41 54 20 59 4f 55 20 48 41 56 45 20 44 4f 4e 45     AT YOU HAVE DONE
	...

000009d0 <strReveal3>:
     9d0:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9e0:	20 4d 49 53 54 41 4b 45 00                           MISTAKE.

000009e9 <strReveal2>:
     9e9:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     9f9:	45 4d 20 41 4c 4c 00                                EM ALL.

00000a00 <strReveal1>:
     a00:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a10:	4e 54 00                                            NT.

00000a13 <strReveal0>:
     a13:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a23:	44 20 53 45 4e 44 20 59 4f 55 00                    D SEND YOU.

00000a2e <strIntro>:
     a2e:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a3e:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a4e:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a5e:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a6e:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a7e:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     a8e:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     a9e:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     aae:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     abe:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     ace:	58 59 00                                            XY.

00000ad1 <default_scores>:
     ad1:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     ae1:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000aef <strLevels>:
     aef:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000afd <strPaused>:
     afd:	50 41 55 53 45 44 00                                PAUSED.

00000b04 <strExit>:
     b04:	45 58 49 54 20 47 41 4d 45 20 58 00                 EXIT GAME X.

00000b10 <strTime>:
     b10:	54 49 4d 45 20 00                                   TIME .

00000b16 <strLives>:
     b16:	4c 49 56 45 53 20 00                                LIVES .

00000b1d <strShield>:
     b1d:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b25 <strScore>:
     b25:	53 43 4f 52 45 20 00                                SCORE .

00000b2c <strSelectHandle>:
	...

00000b2d <strHighscores>:
     b2d:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b39 <str1Player>:
     b39:	53 54 41 52 54 00                                   START.

00000b3f <strMusic>:
     b3f:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b4f:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b57 <strCopyright>:
     b57:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     b67:	4f 4f 4b 53 00                                      OOKS.

00000b6c <spacesong>:
     b6c:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b7c:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b8c:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     b9c:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bac:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bbc:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     bcc:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     bdc:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     bec:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     bfc:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c0c:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c1c:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c2c:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c3c:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c4c:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c5c:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c6c:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c7c:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c8c:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     c9c:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     cac:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cbc:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     ccc:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     cdc:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     cec:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     cfc:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d0c:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d1c:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d2c:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d3c:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d4c:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d5c:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d6c:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d7c:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d8c:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     d9c:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     dac:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dbc:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     dcc:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     ddc:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     dec:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     dfc:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e0c:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e1c:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e2c:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e3c:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e4c:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e5c:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e6c:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e7c:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e8c:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     e9c:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eac:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     ebc:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     ecc:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     edc:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     eec:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     efc:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f0c:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f1c:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f2c:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f3c:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f4c:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f5c:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f6c:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f7c:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f8c:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     f9c:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fac:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     fbc:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     fcc:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     fdc:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     fec:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     ffc:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    100c:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    101c:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    102c:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    103c:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    104c:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    105c:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    106c:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    107c:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    108c:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    109c:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ac:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10bc:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    10cc:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    10dc:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    10ec:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    10fc:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    110c:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    111c:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    112c:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    113c:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    114c:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    115c:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    116c:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    117c:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    118c:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    119c:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ac:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11bc:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    11cc:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    11dc:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    11ec:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    11fc:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000120c <planetsong>:
    120c:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    121c:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    122c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    123c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    124c:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    125c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    126c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    127c:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    128c:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    129c:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ac:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12bc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    12cc:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    12dc:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    12ec:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    12fc:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    130c:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    131c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    132c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    133c:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    134c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    135c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    136c:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    137c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    138c:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    139c:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ac:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13bc:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    13cc:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    13dc:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    13ec:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    13fc:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    140c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    141c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    142c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    143c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    144c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    145c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    146c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    147c:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    148c:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    149c:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ac:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14bc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    14cc:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    14dc:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    14ec:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    14fc:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    150c:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    151c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    152c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    153c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    154c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    155c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    156c:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    157c:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    158c:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    159c:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ac:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15bc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    15cc:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    15dc:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    15ec:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    15fc:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    160c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    161c:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    162c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    163c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    164c:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    165c:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    166c:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    167c:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    168c:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    169c:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ac:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16bc:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    16cc:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    16dc:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    16ec:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    16fc:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    170c:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    171c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    172c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    173c:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    174c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    175c:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    176c:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    177c:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    178c:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    179c:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ac:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17bc:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    17cc:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    17dc:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    17ec:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    17fc:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    180c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    181c:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    182c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    183c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    184c:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    185c:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    186c:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    187c:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    188c:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    189c:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ac:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18bc:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    18cc:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    18dc:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    18ec:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    18fc:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    190c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    191c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    192c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    193c:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    194c:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    195c:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    196c:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    197c:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    198c:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    199c:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ac:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19bc:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    19cc:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    19dc:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19ec:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    19fc:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a0c:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a1c:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a2c:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a3c:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a4c:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a5c:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a6c:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a7c:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a8c:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1a9c:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aac:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1abc:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1acc:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1adc:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1aec:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1afc:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b0c:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b1c:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b2c:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b3c:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b4c:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b5c:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b6c:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b7c:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b8c:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1b9c:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bac:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bbc:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1bcc:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1bdc:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1bec:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1bfc:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c0c:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c1c:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c2c:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c3c:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c4c:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c5c:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c6c:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c7c:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c8c:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1c9c:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1cac:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cbc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1ccc:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1cdc:	2f 00                                               /.

00001cde <my_patches>:
    1cde:	00 00 00 55 1e 00 00 00 00 00 00 00 55 1e 00 00     ...U........U...
    1cee:	00 00 00 00 00 44 1e 00 00 00 00 00 00 00 ee 1d     .....D..........
    1cfe:	00 00 00 00 00 00 00 44 1e 00 00 00 00 00 00 00     .......D........
    1d0e:	1d 1d 00 00 00 00 00 00 00 1d 1d 00 00 00 00        ...............

00001d1d <explode>:
    1d1d:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d2d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d3d:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d4d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d5d:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d6d:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d7d:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d8d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d9d:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1dad:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dbd:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1dcd:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1ddd:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1ded:	ff                                                  .

00001dee <pshoot>:
    1dee:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1dfe:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e0e:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e1e:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e2e:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e3e:	00 01 05 00 00 ff                                   ......

00001e44 <navigate>:
    1e44:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e54:	ff                                                  .

00001e55 <instrument>:
    1e55:	00 02 04 00 00 dd 00 ff                             ........

00001e5d <sprites_data>:
    1e5d:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e6d:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e7d:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e8d:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1e9d:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1ead:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1ebd:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1ecd:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1edd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1eed:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1efd:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f0d:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f1d:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f2d:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f3d:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f4d:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f6d:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f7d:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f8d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f9d:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fad:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1fbd:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1fcd:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1fdd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fed:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ffd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    200d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    201d:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    202d:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    203d:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    204d:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    205d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    206d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    207d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    208d:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    209d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    20ad:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    20bd:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    20cd:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    20dd:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    20ed:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    20fd:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    210d:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    211d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    212d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    213d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    214d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    215d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    216d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    217d:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    218d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    219d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    21ad:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    21bd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    21cd:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    21dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21ed:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    21fd:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    220d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    221d:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    222d:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    223d:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    224d:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    225d:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    226d:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    227d:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    228d:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    229d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    22ad:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    22bd:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    22cd:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    22dd:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    22ed:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22fd:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    230d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    231d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    232d:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    233d:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    234d:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    235d:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    236d:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    237d:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    238d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    239d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    23ad:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    23bd:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    23cd:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    23dd:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    23ed:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    23fd:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    240d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    241d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    242d:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    243d:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    244d:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    245d:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    246d:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    247d:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    248d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    249d:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    24ad:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    24bd:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    24cd:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    24dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    24ed:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    24fd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    250d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    251d:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    252d:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    253d:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    254d:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    255d:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    256d:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    257d:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    258d:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    259d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    25ad:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    25bd:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    25cd:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    25dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25ed:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    25fd:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    260d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    262d:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    263d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    264d:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    265d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    266d:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    267d:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    268d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    26ad:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    26bd:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    26cd:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    26dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26ed:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26fd:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    270d:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    271d:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    272d:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    273d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    274d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    275d:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    276d:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    277d:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    278d:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    279d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    27ad:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    27bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27dd:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    27ed:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    27fd:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    280d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    281d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    282d:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    283d:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    284d:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    285d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286d:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    287d:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    288d:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    289d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ad:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    28bd:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    28cd:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    28dd:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    28ed:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    28fd:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    290d:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    291d:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    292d:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    293d:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    294d:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    295d:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    296d:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    297d:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    298d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    299d:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    29ad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29dd:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    29ed:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    29fd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2a0d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2a1d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2a2d:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2a3d:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2a4d:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a5d:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2a6d:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2a7d:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2a8d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2a9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2aad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2abd:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2acd:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2add:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2aed:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2afd:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2b0d:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2b1d:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2b2d:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2b3d:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2b4d:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2b5d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2b6d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2b7d:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2b8d:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2b9d:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2bad:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2bbd:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2bcd:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002bdd <map_enemy_spider_1>:
    2bdd:	01 01 24                                            ..$

00002be0 <map_enemy_spider_0>:
    2be0:	01 01 19                                            ...

00002be3 <map_enemy_shark>:
    2be3:	01 01 05                                            ...

00002be6 <map_enemy_shot>:
    2be6:	01 01 0e                                            ...

00002be9 <map_hero_shot>:
    2be9:	01 01 04                                            ...

00002bec <map_hero_ship_large_1>:
    2bec:	04 02 26 27 28 29 34 2b 35 2d                       ..&'()4+5-

00002bf6 <map_hero_ship_large_0>:
    2bf6:	04 02 26 27 28 29 2a 2b 2c 2d                       ..&'()*+,-

00002c00 <map_hero_ship_1>:
    2c00:	03 01 25 1b 1c                                      ..%..

00002c05 <map_hero_ship_0>:
    2c05:	03 01 1a 1b 1c                                      .....

00002c0a <map_hero_prone>:
    2c0a:	03 01 31 32 33                                      ..123

00002c0f <map_hero_jump>:
    2c0f:	02 03 02 03 0a 0d 17 18                             ........

00002c17 <map_hero_step_3>:
    2c17:	02 03 02 03 0a 2e 2f 30                             ....../0

00002c1f <map_hero_step_2>:
    2c1f:	02 03 00 01 07 0c 15 16                             ........

00002c27 <map_hero_step_1>:
    2c27:	02 03 02 03 0a 0b 13 14                             ........

00002c2f <map_hero_step_0>:
    2c2f:	02 03 00 01 07 09 11 12                             ........

00002c37 <map_hero_idle>:
    2c37:	02 03 00 01 07 08 0f 10                             ........

00002c3f <map_explosion_2>:
    2c3f:	01 01 1f                                            ...

00002c42 <map_explosion_1>:
    2c42:	01 01 1e                                            ...

00002c45 <map_explosion_0>:
    2c45:	01 01 1d                                            ...

00002c48 <map_particle>:
    2c48:	01 01 20                                            .. 

00002c4b <map_up_arrow>:
    2c4b:	01 01 23                                            ..#

00002c4e <map_down_arrow>:
    2c4e:	01 01 22                                            .."

00002c51 <map_right_arrow>:
    2c51:	01 01 21                                            ..!

00002c54 <map_none>:
    2c54:	01 01 06                                            ...

00002c57 <map_level_space>:
    2c57:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    2c67:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c77:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c87:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2c97:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ca7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cb7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cc7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cd7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ce7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2cf7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d07:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d17:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d27:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d37:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d47:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    2d57:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d67:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    2d77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2d97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2da7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2db7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2dc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2dd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2de7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2df7:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    2e07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e17:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    2e27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e97:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    2ea7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2eb7:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    2ec7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ed7:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    2ee7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ef7:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    2f07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f17:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    2f27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f37:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    2f47:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    2f57:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    2f67:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    2f77:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    2f87:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    2f97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fe7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3007:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3017:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3027:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3037:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3047:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3057:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3067:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3077:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3087:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3097:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3107:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3117:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3127:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3137:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3147:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3157:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3167:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3177:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3187:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3197:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3207:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3217:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3227:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3237:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3247:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3257:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3267:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3277:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3287:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3297:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32a7:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    32b7:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32c7:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

000032d7 <map_level_4>:
    32d7:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    32e7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32f7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3307:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3317:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3327:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3337:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3347:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3357:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3367:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3377:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3387:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3397:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33b7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33c7:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    33d7:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33e7:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    33f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3407:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3417:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3427:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3437:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3447:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3457:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3467:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3477:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    3487:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3497:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    34a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3507:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3517:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3527:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3537:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    3547:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3557:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    3567:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3577:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    3587:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3597:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    35a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35b7:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    35c7:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    35d7:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    35e7:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    35f7:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    3607:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3617:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3627:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3637:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3647:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3657:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3667:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3677:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3687:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3697:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3707:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3717:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3727:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3737:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3747:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3757:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3767:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3777:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3787:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3797:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3807:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3817:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3827:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3837:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3847:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3857:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3867:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3877:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3887:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3897:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3907:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3917:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3927:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3937:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3947:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003957 <map_level_3>:
    3957:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    3967:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3977:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3987:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3997:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39b7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39c7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39d7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39e7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39f7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a07:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a17:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a27:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a37:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a47:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    3a57:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a67:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    3a77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3aa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ab7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ac7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ad7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ae7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3af7:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    3b07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b17:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    3b27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b97:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3ba7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bb7:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    3bc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bd7:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    3be7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bf7:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    3c07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c17:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    3c27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c37:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    3c47:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    3c57:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    3c67:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    3c77:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    3c87:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3c97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ca7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ce7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cf7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3da7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3db7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3dc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3dd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3de7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3df7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ea7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3eb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ec7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ed7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ee7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ef7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f87:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3f97:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fa7:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3fb7:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fc7:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003fd7 <map_level_2>:
    3fd7:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    3fe7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ff7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4007:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4017:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4027:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4037:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4047:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4057:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4067:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4077:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4087:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4097:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40b7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40c7:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    40d7:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40e7:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    40f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4107:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4117:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4127:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4137:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4147:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4157:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4167:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4177:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4187:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4197:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    41a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4207:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4217:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    4227:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4237:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    4247:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4257:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    4267:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4277:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4287:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4297:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    42a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42b7:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    42c7:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    42d7:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    42e7:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    42f7:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    4307:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    4317:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4327:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4337:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4347:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4357:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4367:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4377:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4387:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4397:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4407:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4417:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4427:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4437:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4447:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4457:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4467:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4477:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4487:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4497:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4507:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4517:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4527:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4537:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4547:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4557:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4567:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4577:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4587:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4597:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4607:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4617:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4627:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    4637:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4647:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00004657 <map_level_1>:
    4657:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    4667:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4677:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4687:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4697:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46b7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46c7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46d7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46e7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46f7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4707:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4717:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4727:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4737:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4747:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    4757:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4767:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4777:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4787:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4797:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47f7:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4807:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4817:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    4827:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4837:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4847:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4857:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4867:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4877:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4887:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4897:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    48a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48b7:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    48c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48d7:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    48e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48f7:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4907:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4917:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    4927:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4937:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    4947:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    4957:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    4967:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    4977:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    4987:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    4997:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4aa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ab7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ac7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ad7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ae7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4af7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ba7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4be7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bf7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c87:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4c97:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ca7:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    4cb7:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cc7:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00004cd7 <map_level_0>:
    4cd7:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    4ce7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cf7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d07:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d17:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d27:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d37:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d47:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d57:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d67:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d77:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d87:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d97:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4da7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4db7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4dc7:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    4dd7:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4de7:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4df7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e77:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4e87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e97:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    4ea7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4eb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ec7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ed7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ee7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ef7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f17:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    4f27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f37:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    4f47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f57:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    4f67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f77:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4f87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f97:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    4fa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fb7:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    4fc7:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    4fd7:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    4fe7:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    4ff7:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    5007:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    5017:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5027:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5037:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5047:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5057:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5067:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5077:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5087:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5097:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5107:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5117:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5127:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5137:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5147:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5157:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5167:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5177:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5187:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5197:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5207:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5217:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5227:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5237:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5247:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5257:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5267:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5277:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5287:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5297:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5307:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    5317:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5327:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    5337:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5347:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00005357 <tiles_data>:
	...
    5397:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53a7:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    53b7:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    53c7:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    53d7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53e7:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    53f7:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    5407:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5417:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5427:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5437:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    5447:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    5457:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    5467:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    5477:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    5487:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5497:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    54a7:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    54b7:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    54c7:	af af af af af af af af af af af af af af af af     ................
    54d7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    54e7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    54f7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5507:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5517:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5527:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5537:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5547:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5557:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5567:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    5577:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    5587:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
	...
    55af:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    55bf:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    55ef:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    55ff:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5617:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5627:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5637:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5647:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    5663:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    5673:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    5683:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    5693:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    56a3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56b3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56c3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    56d3:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    56e3:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    56f3:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    5703:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    5713:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    5723:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    5733:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    5743:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    5753:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5763:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5773:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5783:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5793:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    57a3:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    57b3:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    57c3:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    57d3:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    57e3:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    57f3:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    5803:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    5813:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    5823:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5833:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    5843:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    5853:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    5863:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    5873:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    5883:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    5893:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    58a3:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    58b3:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    58c3:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    58d3:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    58e3:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    58f3:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    5903:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    5913:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    5923:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    5933:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5943:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    5953:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    5963:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    5973:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    5997:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    59a7:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    59b7:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    59c7:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    59d7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59e7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    59f7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    5a1f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5a2f:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    5a3f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5a5f:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    5a6f:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    5a7f:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    5a9f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    5aaf:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5abf:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    5adf:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    5aef:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    5aff:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5b23:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    5b33:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    5b43:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    5b5f:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    5b6f:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    5b7f:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5b9f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    5baf:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    5bbf:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5bdf:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    5bef:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5bff:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    5c1f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c2f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c3f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5c5f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5c6f:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    5c7f:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    5c9f:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    5caf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5cbf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5cdf:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cef:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5cff:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    5d1f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5d2f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5d3f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5d5f:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    5d6f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5d7f:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    5d9f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5daf:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5dbf:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5ddf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5def:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5dff:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5e1f:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5e2f:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    5e3f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    5e5f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e6f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e7f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5e9f:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    5eaf:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    5ebf:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5ee3:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5ef3:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    5f03:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    5f1f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    5f2f:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    5f3f:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    5f5f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f6f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5f7f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5f9f:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    5faf:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    5fbf:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    5fdf:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    5fef:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    5fff:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    601f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    602f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    603f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    605f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    606f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    607f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    609f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    60af:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    60bf:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    60df:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    60ef:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    60ff:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    611f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    612f:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    613f:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    615f:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    616f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    617f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    619f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    61af:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    61bf:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    61df:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61ef:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    61ff:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    621f:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    622f:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    623f:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    625f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    626f:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    627f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    629f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    62af:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    62bf:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    62df:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    62ef:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    62ff:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...

00006317 <map_font>:
    6317:	25 01 00 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27     %....... !"#$%&'
    6327:	28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37     ()*+,-./01234567
    6337:	38 39 3a 3b 3c 3d 3e                                89:;<=>

0000633e <map_atmosphere>:
    633e:	1c 02 15 15 15 15 15 15 15 15 15 15 15 15 15 15     ................
    634e:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 19 19     ................
    635e:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    636e:	19 19 19 19 19 19 19 19 19 19                       ..........

00006378 <map_star_dark>:
    6378:	01 01 0a                                            ...

0000637b <map_star>:
    637b:	01 01 09                                            ...

0000637e <map_ice_cloud>:
    637e:	01 01 08                                            ...

00006381 <map_ice_far>:
    6381:	01 01 07                                            ...

00006384 <map_ice_sky>:
    6384:	01 01 06                                            ...

00006387 <map_ice_horizon>:
    6387:	01 01 05                                            ...

0000638a <map_ice_bottom>:
    638a:	01 01 04                                            ...

0000638d <map_ice_right>:
    638d:	01 01 03                                            ...

00006390 <map_ice_middle>:
    6390:	01 01 02                                            ...

00006393 <map_ice_left>:
    6393:	01 01 01                                            ...

00006396 <map_splash>:
    6396:	0f 05 0b 0b 0b 00 0b 0b 0b 00 0c 0d 0e 09 0b 0b     ................
    63a6:	0b 00 0b 00 00 0b 0a 00 00 0f 10 11 00 0b 00 09     ................
    63b6:	0a 0b 00 09 0b 00 00 00 12 13 14 00 0b 0b 0b 00     ................
    63c6:	0b 00 00 0b 00 09 00 16 17 18 00 00 00 0b 0b 0b     ................
    63d6:	0b 00 0b 00 00 00 1a 00 0a 00 0b 0b 0b              .............

000063e3 <map_tile_none>:
    63e3:	01 01 00                                            ...

000063e6 <__ctors_end>:
    63e6:	11 24       	eor	r1, r1
    63e8:	1f be       	out	0x3f, r1	; 63
    63ea:	cf ef       	ldi	r28, 0xFF	; 255
    63ec:	d0 e1       	ldi	r29, 0x10	; 16
    63ee:	de bf       	out	0x3e, r29	; 62
    63f0:	cd bf       	out	0x3d, r28	; 61

000063f2 <__do_copy_data>:
    63f2:	15 e0       	ldi	r17, 0x05	; 5
    63f4:	a0 e0       	ldi	r26, 0x00	; 0
    63f6:	b5 e0       	ldi	r27, 0x05	; 5
    63f8:	ee e6       	ldi	r30, 0x6E	; 110
    63fa:	fa eb       	ldi	r31, 0xBA	; 186
    63fc:	02 c0       	rjmp	.+4      	; 0x6402 <__do_copy_data+0x10>
    63fe:	05 90       	lpm	r0, Z+
    6400:	0d 92       	st	X+, r0
    6402:	a2 30       	cpi	r26, 0x02	; 2
    6404:	b1 07       	cpc	r27, r17
    6406:	d9 f7       	brne	.-10     	; 0x63fe <__do_copy_data+0xc>

00006408 <__do_clear_bss>:
    6408:	1f e0       	ldi	r17, 0x0F	; 15
    640a:	a2 e0       	ldi	r26, 0x02	; 2
    640c:	b5 e0       	ldi	r27, 0x05	; 5
    640e:	01 c0       	rjmp	.+2      	; 0x6412 <.do_clear_bss_start>

00006410 <.do_clear_bss_loop>:
    6410:	1d 92       	st	X+, r1

00006412 <.do_clear_bss_start>:
    6412:	a4 3f       	cpi	r26, 0xF4	; 244
    6414:	b1 07       	cpc	r27, r17
    6416:	e1 f7       	brne	.-8      	; 0x6410 <.do_clear_bss_loop>

00006418 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6418:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <wdt_randomize>
#endif

    MCUSR = 0;
    641c:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    641e:	88 e1       	ldi	r24, 0x18	; 24
    6420:	0f b6       	in	r0, 0x3f	; 63
    6422:	f8 94       	cli
    6424:	80 93 60 00 	sts	0x0060, r24
    6428:	10 92 60 00 	sts	0x0060, r1
    642c:	0f be       	out	0x3f, r0	; 63

0000642e <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    642e:	0e 94 64 38 	call	0x70c8	; 0x70c8 <isEepromFormatted>
    6432:	81 11       	cpse	r24, r1
    6434:	02 c0       	rjmp	.+4      	; 0x643a <Initialize+0xc>
    6436:	0e 94 42 38 	call	0x7084	; 0x7084 <FormatEeprom>

	cli();
    643a:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    6442:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6446:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    644a:	10 92 b8 0c 	sts	0x0CB8, r1
    644e:	10 92 be 0c 	sts	0x0CBE, r1
    6452:	10 92 c4 0c 	sts	0x0CC4, r1
    6456:	10 92 ca 0c 	sts	0x0CCA, r1
    645a:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    645e:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    6462:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6466:	92 e1       	ldi	r25, 0x12	; 18
    6468:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    646c:	90 ee       	ldi	r25, 0xE0	; 224
    646e:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    6472:	94 e1       	ldi	r25, 0x14	; 20
    6474:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    6478:	10 92 ac 0c 	sts	0x0CAC, r1
    647c:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    6480:	10 92 b0 0c 	sts	0x0CB0, r1
    6484:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    6488:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    648c:	0e 94 4d 45 	call	0x8a9a	; 0x8a9a <InitializeVideoMode>
    6490:	80 e7       	ldi	r24, 0x70	; 112
    6492:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6494:	fc 01       	movw	r30, r24
    6496:	25 91       	lpm	r18, Z+
    6498:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    649a:	f9 01       	movw	r30, r18
    649c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    649e:	30 83       	st	Z, r19
    64a0:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    64a2:	20 e0       	ldi	r18, 0x00	; 0
    64a4:	8e 39       	cpi	r24, 0x9E	; 158
    64a6:	92 07       	cpc	r25, r18
    64a8:	a9 f7       	brne	.-22     	; 0x6494 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    64aa:	78 94       	sei
	
	DisplayLogo();
    64ac:	0e 94 c0 45 	call	0x8b80	; 0x8b80 <DisplayLogo>
    64b0:	0e 94 0d 5b 	call	0xb61a	; 0xb61a <main>
    64b4:	0c 94 35 5d 	jmp	0xba6a	; 0xba6a <_exit>

000064b8 <__bad_interrupt>:
    64b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000064bc <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    64bc:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    64be:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    64c2:	ad e8       	ldi	r26, 0x8D	; 141
    64c4:	aa 95       	dec	r26
    64c6:	f1 f7       	brne	.-4      	; 0x64c4 <sub_video_mode3+0x8>
    64c8:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    64ca:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    64ce:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    64d0:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    64d2:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    64d4:	02 9f       	mul	r16, r18
		add ZL,r0
    64d6:	e0 0d       	add	r30, r0
		adc ZH,r1
    64d8:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    64da:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    64dc:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    64de:	20 91 69 0d 	lds	r18, 0x0D69
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    64e2:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    64e4:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    64e6:	30 0f       	add	r19, r16

		cp r18,r16
    64e8:	20 17       	cp	r18, r16
		breq no_ramtiles
    64ea:	51 f0       	breq	.+20     	; 0x6500 <no_ramtiles>
		nop
    64ec:	00 00       	nop
	...

000064f0 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    64f0:	a1 91       	ld	r26, Z+
		ld XH,Z+
    64f2:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    64f4:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    64f6:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    64f8:	0c 93       	st	X, r16

		inc r16
    64fa:	03 95       	inc	r16
		cp r16,r18
    64fc:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    64fe:	c0 f3       	brcs	.-16     	; 0x64f0 <upd_loop>

00006500 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6500:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6502:	1a 95       	dec	r17
		brne .-4
    6504:	f1 f7       	brne	.-4      	; 0x6502 <no_ramtiles+0x2>
		rjmp .
    6506:	00 c0       	rjmp	.+0      	; 0x6508 <no_ramtiles+0x8>
		dec r19
    6508:	3a 95       	dec	r19
		brne 1b
    650a:	d1 f7       	brne	.-12     	; 0x6500 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    650c:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    650e:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    6510:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    6514:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6516:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6518:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    651a:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    651c:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    6520:	60 2f       	mov	r22, r16
		lsr r16
    6522:	06 95       	lsr	r16
		lsr r16
    6524:	06 95       	lsr	r16
		lsr r16 ;/8
    6526:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6528:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    652c:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    652e:	f1 2e       	mov	r15, r17

        mov r17,r16
    6530:	10 2f       	mov	r17, r16
        lsr r16
    6532:	06 95       	lsr	r16
        lsr r16
    6534:	06 95       	lsr	r16
        lsr r16 ;/8
    6536:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    6538:	d0 0f       	add	r29, r16
		andi r17,0x7
    653a:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    653c:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    653e:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    6540:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    6544:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    6548:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    654c:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    6550:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    6552:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    6554:	5e 01       	movw	r10, r28
		mov r23,r22
    6556:	76 2f       	mov	r23, r22
		mov r24,r15
    6558:	8f 2d       	mov	r24, r15
		mov r9,r25
    655a:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    655c:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    6560:	20 2f       	mov	r18, r16
		lsr r16
    6562:	06 95       	lsr	r16
		lsr r16
    6564:	06 95       	lsr	r16
		lsr r16			;hi8
    6566:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    6568:	03 95       	inc	r16
		andi r18,7		;lo8
    656a:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    656c:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    6570:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    6572:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    6574:	01 fe       	sbrs	r0, 1
		clr r22
    6576:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    6578:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    657a:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    657c:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    657e:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    6580:	01 fe       	sbrs	r0, 1
		ser r24
    6582:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    6584:	01 fe       	sbrs	r0, 1
		clr r9
    6586:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    6588:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    658a:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    658c:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    658e:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    6590:	80 90 a8 0c 	lds	r8, 0x0CA8

00006594 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    6594:	bc d3       	rcall	.+1912   	; 0x6d0e <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    6596:	24 e0       	ldi	r18, 0x04	; 4
    6598:	2a 95       	dec	r18
    659a:	f1 f7       	brne	.-4      	; 0x6598 <next_tile_line+0x4>
    659c:	00 00       	nop
				
		call render_tile_line
    659e:	0e 94 10 33 	call	0x6620	; 0x6620 <render_tile_line>

		WAIT r18,58
    65a2:	23 e1       	ldi	r18, 0x13	; 19
    65a4:	2a 95       	dec	r18
    65a6:	f1 f7       	brne	.-4      	; 0x65a4 <next_tile_line+0x10>
    65a8:	00 00       	nop

		inc r22
    65aa:	63 95       	inc	r22
		dec r8
    65ac:	8a 94       	dec	r8
		breq text_frame_end
    65ae:	09 f1       	breq	.+66     	; 0x65f2 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    65b0:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    65b2:	29 f0       	breq	.+10     	; 0x65be <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    65b4:	08 e0       	ldi	r16, 0x08	; 8
    65b6:	0a 95       	dec	r16
    65b8:	f1 f7       	brne	.-4      	; 0x65b6 <next_tile_line+0x22>
    65ba:	00 00       	nop
		rjmp next_tile_line
    65bc:	eb cf       	rjmp	.-42     	; 0x6594 <next_tile_line>

000065be <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    65be:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    65c0:	0c 2f       	mov	r16, r28
		andi r16,0x7
    65c2:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    65c4:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    65c6:	11 f0       	breq	.+4      	; 0x65cc <next_tile_row+0xe>
		inc YL
    65c8:	c3 95       	inc	r28
		rjmp 2f
    65ca:	02 c0       	rjmp	.+4      	; 0x65d0 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    65cc:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    65ce:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    65d0:	8a 95       	dec	r24
		brne .+2
    65d2:	09 f4       	brne	.+2      	; 0x65d6 <next_tile_row+0x18>
		movw YL,r12
    65d4:	e6 01       	movw	r28, r12

		dec r19
    65d6:	3a 95       	dec	r19
		brne .+2
    65d8:	09 f4       	brne	.+2      	; 0x65dc <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    65da:	67 2f       	mov	r22, r23
		brne .+2
    65dc:	09 f4       	brne	.+2      	; 0x65e0 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    65de:	e5 01       	movw	r28, r10
		brne .+2
    65e0:	09 f4       	brne	.+2      	; 0x65e4 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    65e2:	8f 2d       	mov	r24, r15
		brne .+2
    65e4:	09 f4       	brne	.+2      	; 0x65e8 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    65e6:	99 2e       	mov	r9, r25

		brne .+2
    65e8:	09 f4       	brne	.+2      	; 0x65ec <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    65ea:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    65ec:	09 f4       	brne	.+2      	; 0x65f0 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    65ee:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    65f0:	d1 cf       	rjmp	.-94     	; 0x6594 <next_tile_line>

000065f2 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    65f2:	29 e0       	ldi	r18, 0x09	; 9
    65f4:	2a 95       	dec	r18
    65f6:	f1 f7       	brne	.-4      	; 0x65f4 <text_frame_end+0x2>
    65f8:	00 00       	nop

		rcall hsync_pulse ;145
    65fa:	89 d3       	rcall	.+1810   	; 0x6d0e <hsync_pulse>
	
		clr r1
    65fc:	11 24       	eor	r1, r1
		call RestoreBackground
    65fe:	0e 94 00 44 	call	0x8800	; 0x8800 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6602:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    6606:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6608:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    660a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    660c:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    6610:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    6612:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6614:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6618:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    661a:	e0 93 36 00 	sts	0x0036, r30

		ret
    661e:	08 95       	ret

00006620 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    6620:	cf 93       	push	r28
		push YH
    6622:	df 93       	push	r29
		push r23
    6624:	7f 93       	push	r23
		push r22
    6626:	6f 93       	push	r22
		push r19
    6628:	3f 93       	push	r19
		push r13
    662a:	df 92       	push	r13
		push r12
    662c:	cf 92       	push	r12
		push r9
    662e:	9f 92       	push	r9
		push r7
    6630:	7f 92       	push	r7
		push r6
    6632:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    6634:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    6636:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    6638:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    663a:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    663c:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    663e:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    6640:	00 0d       	add	r16, r0
		adc r17,r1
    6642:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    6644:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6646:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    6648:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    664a:	00 0d       	add	r16, r0
		adc r17,r1
    664c:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    664e:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6650:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    6652:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    6654:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6656:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6658:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    665a:	f8 94       	cli
		breq .+2
    665c:	09 f0       	breq	.+2      	; 0x6660 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    665e:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    6660:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    6662:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    6664:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6666:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6668:	02 0c       	add	r0, r2
	    adc r1,r3
    666a:	13 1c       	adc	r1, r3
		movw ZL,r0
    666c:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    666e:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    6670:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6672:	28 81       	ld	r18, Y
		subi YL,-8
    6674:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6676:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6678:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    667a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    667c:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    667e:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    6680:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    6682:	04 0e       	add	r0, r20
	    adc r1,r21
    6684:	15 1e       	adc	r1, r21
		movw XL,r0
    6686:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6688:	28 81       	ld	r18, Y
		subi YL,-8
    668a:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    668c:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    668e:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    6690:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    6692:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6694:	a1 01       	movw	r20, r2
		brtc .+2
    6696:	0e f4       	brtc	.+2      	; 0x669a <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    6698:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    669a:	04 0e       	add	r0, r20
	    adc r1,r21
    669c:	15 1e       	adc	r1, r21
		movw ZL,r0
    669e:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    66a0:	3f 01       	movw	r6, r30

000066a2 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    66a2:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    66a4:	a6 0f       	add	r26, r22
		adc XH,r0
    66a6:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    66a8:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    66aa:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    66ac:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    66ae:	22 c0       	rjmp	.+68     	; 0x66f4 <rom_fine_scroll>

000066b0 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    66b0:	00 c0       	rjmp	.+0      	; 0x66b2 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    66b2:	60 e6       	ldi	r22, 0x60	; 96
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    66b4:	73 e3       	ldi	r23, 0x33	; 51
		add r22,r0
    66b6:	60 0d       	add	r22, r0
		adc r23,r1
    66b8:	71 1d       	adc	r23, r1
		push r22
    66ba:	6f 93       	push	r22
		push r23	
    66bc:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    66be:	08 95       	ret

000066c0 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    66c0:	0d 91       	ld	r16, X+
    66c2:	c8 95       	lpm
    66c4:	08 b9       	out	0x08, r16	; 8
    66c6:	0d 91       	ld	r16, X+
    66c8:	c8 95       	lpm
    66ca:	08 b9       	out	0x08, r16	; 8
    66cc:	0d 91       	ld	r16, X+
    66ce:	c8 95       	lpm
    66d0:	08 b9       	out	0x08, r16	; 8
    66d2:	0d 91       	ld	r16, X+
    66d4:	c8 95       	lpm
    66d6:	08 b9       	out	0x08, r16	; 8
    66d8:	0d 91       	ld	r16, X+
    66da:	c8 95       	lpm
    66dc:	08 b9       	out	0x08, r16	; 8
    66de:	0d 91       	ld	r16, X+
    66e0:	c8 95       	lpm
    66e2:	08 b9       	out	0x08, r16	; 8
    66e4:	0d 91       	ld	r16, X+
    66e6:	c8 95       	lpm
    66e8:	08 b9       	out	0x08, r16	; 8
    66ea:	0d 91       	ld	r16, X+
    66ec:	c8 95       	lpm
    66ee:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    66f0:	1e f5       	brtc	.+70     	; 0x6738 <romloop>
		rjmp ramloop
    66f2:	40 c0       	rjmp	.+128    	; 0x6774 <ramloop>

000066f4 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    66f4:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    66f6:	62 e8       	ldi	r22, 0x82	; 130
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    66f8:	73 e3       	ldi	r23, 0x33	; 51
		add r22,r0
    66fa:	60 0d       	add	r22, r0
		adc r23,r1
    66fc:	71 1d       	adc	r23, r1
		push r22
    66fe:	6f 93       	push	r22
		push r23	
    6700:	7f 93       	push	r23
		ret
    6702:	08 95       	ret

00006704 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6704:	05 91       	lpm	r16, Z+
    6706:	00 c0       	rjmp	.+0      	; 0x6708 <rom_fine_scroll_loop+0x4>
    6708:	08 b9       	out	0x08, r16	; 8
    670a:	05 91       	lpm	r16, Z+
    670c:	00 c0       	rjmp	.+0      	; 0x670e <rom_fine_scroll_loop+0xa>
    670e:	08 b9       	out	0x08, r16	; 8
    6710:	05 91       	lpm	r16, Z+
    6712:	00 c0       	rjmp	.+0      	; 0x6714 <rom_fine_scroll_loop+0x10>
    6714:	08 b9       	out	0x08, r16	; 8
    6716:	05 91       	lpm	r16, Z+
    6718:	00 c0       	rjmp	.+0      	; 0x671a <rom_fine_scroll_loop+0x16>
    671a:	08 b9       	out	0x08, r16	; 8
    671c:	05 91       	lpm	r16, Z+
    671e:	00 c0       	rjmp	.+0      	; 0x6720 <rom_fine_scroll_loop+0x1c>
    6720:	08 b9       	out	0x08, r16	; 8
    6722:	05 91       	lpm	r16, Z+
    6724:	00 c0       	rjmp	.+0      	; 0x6726 <rom_fine_scroll_loop+0x22>
    6726:	08 b9       	out	0x08, r16	; 8
    6728:	05 91       	lpm	r16, Z+
    672a:	00 c0       	rjmp	.+0      	; 0x672c <rom_fine_scroll_loop+0x28>
    672c:	08 b9       	out	0x08, r16	; 8
    672e:	05 91       	lpm	r16, Z+
    6730:	00 c0       	rjmp	.+0      	; 0x6732 <rom_fine_scroll_loop+0x2e>
    6732:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    6734:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    6736:	f6 f0       	brts	.+60     	; 0x6774 <ramloop>

00006738 <romloop>:

	
	romloop:
	    lpm r16,Z+
    6738:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    673a:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    673c:	28 81       	ld	r18, Y

	    lpm r16,Z+
    673e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6740:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6742:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    6744:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6746:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    6748:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    674a:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    674c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    674e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    6750:	08 f4       	brcc	.+2      	; 0x6754 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6752:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6754:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6756:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6758:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    675a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    675c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    675e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    6760:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    6762:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6764:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6766:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6768:	05 91       	lpm	r16, Z+

		breq end	
    676a:	39 f1       	breq	.+78     	; 0x67ba <end>
	    movw ZL,r0   	;copy next tile adress
    676c:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    676e:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6770:	18 f7       	brcc	.-58     	; 0x6738 <romloop>
	
		rjmp .
    6772:	00 c0       	rjmp	.+0      	; 0x6774 <ramloop>

00006774 <ramloop>:

	ramloop:

	    ld r16,Z+
    6774:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6776:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6778:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    677a:	01 91       	ld	r16, Z+
		subi YL,-8   		
    677c:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    677e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6780:	23 9f       	mul	r18, r19

	    ld r16,Z+
    6782:	01 91       	ld	r16, Z+
		nop
    6784:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6786:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6788:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    678a:	00 c0       	rjmp	.+0      	; 0x678c <ramloop+0x18>
   
	    ld r16,Z+
    678c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    678e:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6790:	08 f0       	brcs	.+2      	; 0x6794 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6792:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6794:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6796:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6798:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    679a:	15 1e       	adc	r1, r21
		rjmp .
    679c:	00 c0       	rjmp	.+0      	; 0x679e <ramloop+0x2a>
    
		ld r16,Z+		
    679e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    67a0:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    67a2:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    67a4:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    67a6:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    67a8:	78 b8       	out	0x08, r7	; 8
		nop
    67aa:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    67ac:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    67ae:	1a 95       	dec	r17
	    breq end
    67b0:	21 f0       	breq	.+8      	; 0x67ba <end>
	
		nop
    67b2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    67b4:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    67b6:	00 f6       	brcc	.-128    	; 0x6738 <romloop>
		rjmp ramloop
    67b8:	dd cf       	rjmp	.-70     	; 0x6774 <ramloop>

000067ba <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    67ba:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    67bc:	27 f5       	brid	.+72     	; 0x6806 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    67be:	30 f4       	brcc	.+12     	; 0x67cc <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    67c0:	f0 01       	movw	r30, r0

000067c2 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    67c2:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    67c4:	08 b9       	out	0x08, r16	; 8
		dec r14
    67c6:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    67c8:	e1 f7       	brne	.-8      	; 0x67c2 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    67ca:	1f c0       	rjmp	.+62     	; 0x680a <end_fine_scroll_ram>

000067cc <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    67cc:	f6 01       	movw	r30, r12
		nop
    67ce:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    67d0:	98 b8       	out	0x08, r9	; 8
		dec r14
    67d2:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    67d4:	c9 f0       	breq	.+50     	; 0x6808 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    67d6:	05 91       	lpm	r16, Z+
    67d8:	08 b9       	out	0x08, r16	; 8
    67da:	ea 94       	dec	r14
    67dc:	a9 f0       	breq	.+42     	; 0x6808 <end_fine_scroll_rom>
    67de:	05 91       	lpm	r16, Z+
    67e0:	08 b9       	out	0x08, r16	; 8
    67e2:	ea 94       	dec	r14
    67e4:	89 f0       	breq	.+34     	; 0x6808 <end_fine_scroll_rom>
    67e6:	05 91       	lpm	r16, Z+
    67e8:	08 b9       	out	0x08, r16	; 8
    67ea:	ea 94       	dec	r14
    67ec:	69 f0       	breq	.+26     	; 0x6808 <end_fine_scroll_rom>
    67ee:	05 91       	lpm	r16, Z+
    67f0:	08 b9       	out	0x08, r16	; 8
    67f2:	ea 94       	dec	r14
    67f4:	49 f0       	breq	.+18     	; 0x6808 <end_fine_scroll_rom>
    67f6:	05 91       	lpm	r16, Z+
    67f8:	08 b9       	out	0x08, r16	; 8
    67fa:	ea 94       	dec	r14
    67fc:	29 f0       	breq	.+10     	; 0x6808 <end_fine_scroll_rom>
    67fe:	05 91       	lpm	r16, Z+
    6800:	08 b9       	out	0x08, r16	; 8
    6802:	ea 94       	dec	r14
    6804:	09 f0       	breq	.+2      	; 0x6808 <end_fine_scroll_rom>

00006806 <end_fine_scroll>:
	...

00006808 <end_fine_scroll_rom>:
	...

0000680a <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    680a:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    680c:	08 b9       	out	0x08, r16	; 8

		pop r6
    680e:	6f 90       	pop	r6
		pop r7
    6810:	7f 90       	pop	r7
		pop r9
    6812:	9f 90       	pop	r9
		pop r12
    6814:	cf 90       	pop	r12
		pop r13
    6816:	df 90       	pop	r13
		pop r19
    6818:	3f 91       	pop	r19
		pop r22
    681a:	6f 91       	pop	r22
		pop r23
    681c:	7f 91       	pop	r23
		pop YH
    681e:	df 91       	pop	r29
		pop YL
    6820:	cf 91       	pop	r28

		ret
    6822:	08 95       	ret

00006824 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6824:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6826:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    682a:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    682e:	82 9f       	mul	r24, r18
	add ZL,r0
    6830:	e0 0d       	add	r30, r0
	adc ZH,r1
    6832:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6834:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    6836:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6838:	62 9f       	mul	r22, r18
	add XL,r0
    683a:	a0 0d       	add	r26, r0
	adc XH,r1
    683c:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    683e:	15 90       	lpm	r1, Z+
    6840:	1d 92       	st	X+, r1
    6842:	15 90       	lpm	r1, Z+
    6844:	1d 92       	st	X+, r1
    6846:	15 90       	lpm	r1, Z+
    6848:	1d 92       	st	X+, r1
    684a:	15 90       	lpm	r1, Z+
    684c:	1d 92       	st	X+, r1
    684e:	15 90       	lpm	r1, Z+
    6850:	1d 92       	st	X+, r1
    6852:	15 90       	lpm	r1, Z+
    6854:	1d 92       	st	X+, r1
    6856:	15 90       	lpm	r1, Z+
    6858:	1d 92       	st	X+, r1
    685a:	15 90       	lpm	r1, Z+
    685c:	1d 92       	st	X+, r1
    685e:	15 90       	lpm	r1, Z+
    6860:	1d 92       	st	X+, r1
    6862:	15 90       	lpm	r1, Z+
    6864:	1d 92       	st	X+, r1
    6866:	15 90       	lpm	r1, Z+
    6868:	1d 92       	st	X+, r1
    686a:	15 90       	lpm	r1, Z+
    686c:	1d 92       	st	X+, r1
    686e:	15 90       	lpm	r1, Z+
    6870:	1d 92       	st	X+, r1
    6872:	15 90       	lpm	r1, Z+
    6874:	1d 92       	st	X+, r1
    6876:	15 90       	lpm	r1, Z+
    6878:	1d 92       	st	X+, r1
    687a:	15 90       	lpm	r1, Z+
    687c:	1d 92       	st	X+, r1
    687e:	15 90       	lpm	r1, Z+
    6880:	1d 92       	st	X+, r1
    6882:	15 90       	lpm	r1, Z+
    6884:	1d 92       	st	X+, r1
    6886:	15 90       	lpm	r1, Z+
    6888:	1d 92       	st	X+, r1
    688a:	15 90       	lpm	r1, Z+
    688c:	1d 92       	st	X+, r1
    688e:	15 90       	lpm	r1, Z+
    6890:	1d 92       	st	X+, r1
    6892:	15 90       	lpm	r1, Z+
    6894:	1d 92       	st	X+, r1
    6896:	15 90       	lpm	r1, Z+
    6898:	1d 92       	st	X+, r1
    689a:	15 90       	lpm	r1, Z+
    689c:	1d 92       	st	X+, r1
    689e:	15 90       	lpm	r1, Z+
    68a0:	1d 92       	st	X+, r1
    68a2:	15 90       	lpm	r1, Z+
    68a4:	1d 92       	st	X+, r1
    68a6:	15 90       	lpm	r1, Z+
    68a8:	1d 92       	st	X+, r1
    68aa:	15 90       	lpm	r1, Z+
    68ac:	1d 92       	st	X+, r1
    68ae:	15 90       	lpm	r1, Z+
    68b0:	1d 92       	st	X+, r1
    68b2:	15 90       	lpm	r1, Z+
    68b4:	1d 92       	st	X+, r1
    68b6:	15 90       	lpm	r1, Z+
    68b8:	1d 92       	st	X+, r1
    68ba:	15 90       	lpm	r1, Z+
    68bc:	1d 92       	st	X+, r1
    68be:	15 90       	lpm	r1, Z+
    68c0:	1d 92       	st	X+, r1
    68c2:	15 90       	lpm	r1, Z+
    68c4:	1d 92       	st	X+, r1
    68c6:	15 90       	lpm	r1, Z+
    68c8:	1d 92       	st	X+, r1
    68ca:	15 90       	lpm	r1, Z+
    68cc:	1d 92       	st	X+, r1
    68ce:	15 90       	lpm	r1, Z+
    68d0:	1d 92       	st	X+, r1
    68d2:	15 90       	lpm	r1, Z+
    68d4:	1d 92       	st	X+, r1
    68d6:	15 90       	lpm	r1, Z+
    68d8:	1d 92       	st	X+, r1
    68da:	15 90       	lpm	r1, Z+
    68dc:	1d 92       	st	X+, r1
    68de:	15 90       	lpm	r1, Z+
    68e0:	1d 92       	st	X+, r1
    68e2:	15 90       	lpm	r1, Z+
    68e4:	1d 92       	st	X+, r1
    68e6:	15 90       	lpm	r1, Z+
    68e8:	1d 92       	st	X+, r1
    68ea:	15 90       	lpm	r1, Z+
    68ec:	1d 92       	st	X+, r1
    68ee:	15 90       	lpm	r1, Z+
    68f0:	1d 92       	st	X+, r1
    68f2:	15 90       	lpm	r1, Z+
    68f4:	1d 92       	st	X+, r1
    68f6:	15 90       	lpm	r1, Z+
    68f8:	1d 92       	st	X+, r1
    68fa:	15 90       	lpm	r1, Z+
    68fc:	1d 92       	st	X+, r1
    68fe:	15 90       	lpm	r1, Z+
    6900:	1d 92       	st	X+, r1
    6902:	15 90       	lpm	r1, Z+
    6904:	1d 92       	st	X+, r1
    6906:	15 90       	lpm	r1, Z+
    6908:	1d 92       	st	X+, r1
    690a:	15 90       	lpm	r1, Z+
    690c:	1d 92       	st	X+, r1
    690e:	15 90       	lpm	r1, Z+
    6910:	1d 92       	st	X+, r1
    6912:	15 90       	lpm	r1, Z+
    6914:	1d 92       	st	X+, r1
    6916:	15 90       	lpm	r1, Z+
    6918:	1d 92       	st	X+, r1
    691a:	15 90       	lpm	r1, Z+
    691c:	1d 92       	st	X+, r1
    691e:	15 90       	lpm	r1, Z+
    6920:	1d 92       	st	X+, r1
    6922:	15 90       	lpm	r1, Z+
    6924:	1d 92       	st	X+, r1
    6926:	15 90       	lpm	r1, Z+
    6928:	1d 92       	st	X+, r1
    692a:	15 90       	lpm	r1, Z+
    692c:	1d 92       	st	X+, r1
    692e:	15 90       	lpm	r1, Z+
    6930:	1d 92       	st	X+, r1
    6932:	15 90       	lpm	r1, Z+
    6934:	1d 92       	st	X+, r1
    6936:	15 90       	lpm	r1, Z+
    6938:	1d 92       	st	X+, r1
    693a:	15 90       	lpm	r1, Z+
    693c:	1d 92       	st	X+, r1
	clr r1
    693e:	11 24       	eor	r1, r1
	ret
    6940:	08 95       	ret

00006942 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6942:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6944:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    6946:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6948:	82 9f       	mul	r24, r18
	add ZL,r0
    694a:	e0 0d       	add	r30, r0
	adc ZH,r1
    694c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    694e:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    6950:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6952:	62 9f       	mul	r22, r18
	add XL,r0
    6954:	a0 0d       	add	r26, r0
	adc XH,r1
    6956:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6958:	11 90       	ld	r1, Z+
    695a:	1d 92       	st	X+, r1
    695c:	11 90       	ld	r1, Z+
    695e:	1d 92       	st	X+, r1
    6960:	11 90       	ld	r1, Z+
    6962:	1d 92       	st	X+, r1
    6964:	11 90       	ld	r1, Z+
    6966:	1d 92       	st	X+, r1
    6968:	11 90       	ld	r1, Z+
    696a:	1d 92       	st	X+, r1
    696c:	11 90       	ld	r1, Z+
    696e:	1d 92       	st	X+, r1
    6970:	11 90       	ld	r1, Z+
    6972:	1d 92       	st	X+, r1
    6974:	11 90       	ld	r1, Z+
    6976:	1d 92       	st	X+, r1
    6978:	11 90       	ld	r1, Z+
    697a:	1d 92       	st	X+, r1
    697c:	11 90       	ld	r1, Z+
    697e:	1d 92       	st	X+, r1
    6980:	11 90       	ld	r1, Z+
    6982:	1d 92       	st	X+, r1
    6984:	11 90       	ld	r1, Z+
    6986:	1d 92       	st	X+, r1
    6988:	11 90       	ld	r1, Z+
    698a:	1d 92       	st	X+, r1
    698c:	11 90       	ld	r1, Z+
    698e:	1d 92       	st	X+, r1
    6990:	11 90       	ld	r1, Z+
    6992:	1d 92       	st	X+, r1
    6994:	11 90       	ld	r1, Z+
    6996:	1d 92       	st	X+, r1
    6998:	11 90       	ld	r1, Z+
    699a:	1d 92       	st	X+, r1
    699c:	11 90       	ld	r1, Z+
    699e:	1d 92       	st	X+, r1
    69a0:	11 90       	ld	r1, Z+
    69a2:	1d 92       	st	X+, r1
    69a4:	11 90       	ld	r1, Z+
    69a6:	1d 92       	st	X+, r1
    69a8:	11 90       	ld	r1, Z+
    69aa:	1d 92       	st	X+, r1
    69ac:	11 90       	ld	r1, Z+
    69ae:	1d 92       	st	X+, r1
    69b0:	11 90       	ld	r1, Z+
    69b2:	1d 92       	st	X+, r1
    69b4:	11 90       	ld	r1, Z+
    69b6:	1d 92       	st	X+, r1
    69b8:	11 90       	ld	r1, Z+
    69ba:	1d 92       	st	X+, r1
    69bc:	11 90       	ld	r1, Z+
    69be:	1d 92       	st	X+, r1
    69c0:	11 90       	ld	r1, Z+
    69c2:	1d 92       	st	X+, r1
    69c4:	11 90       	ld	r1, Z+
    69c6:	1d 92       	st	X+, r1
    69c8:	11 90       	ld	r1, Z+
    69ca:	1d 92       	st	X+, r1
    69cc:	11 90       	ld	r1, Z+
    69ce:	1d 92       	st	X+, r1
    69d0:	11 90       	ld	r1, Z+
    69d2:	1d 92       	st	X+, r1
    69d4:	11 90       	ld	r1, Z+
    69d6:	1d 92       	st	X+, r1
    69d8:	11 90       	ld	r1, Z+
    69da:	1d 92       	st	X+, r1
    69dc:	11 90       	ld	r1, Z+
    69de:	1d 92       	st	X+, r1
    69e0:	11 90       	ld	r1, Z+
    69e2:	1d 92       	st	X+, r1
    69e4:	11 90       	ld	r1, Z+
    69e6:	1d 92       	st	X+, r1
    69e8:	11 90       	ld	r1, Z+
    69ea:	1d 92       	st	X+, r1
    69ec:	11 90       	ld	r1, Z+
    69ee:	1d 92       	st	X+, r1
    69f0:	11 90       	ld	r1, Z+
    69f2:	1d 92       	st	X+, r1
    69f4:	11 90       	ld	r1, Z+
    69f6:	1d 92       	st	X+, r1
    69f8:	11 90       	ld	r1, Z+
    69fa:	1d 92       	st	X+, r1
    69fc:	11 90       	ld	r1, Z+
    69fe:	1d 92       	st	X+, r1
    6a00:	11 90       	ld	r1, Z+
    6a02:	1d 92       	st	X+, r1
    6a04:	11 90       	ld	r1, Z+
    6a06:	1d 92       	st	X+, r1
    6a08:	11 90       	ld	r1, Z+
    6a0a:	1d 92       	st	X+, r1
    6a0c:	11 90       	ld	r1, Z+
    6a0e:	1d 92       	st	X+, r1
    6a10:	11 90       	ld	r1, Z+
    6a12:	1d 92       	st	X+, r1
    6a14:	11 90       	ld	r1, Z+
    6a16:	1d 92       	st	X+, r1
    6a18:	11 90       	ld	r1, Z+
    6a1a:	1d 92       	st	X+, r1
    6a1c:	11 90       	ld	r1, Z+
    6a1e:	1d 92       	st	X+, r1
    6a20:	11 90       	ld	r1, Z+
    6a22:	1d 92       	st	X+, r1
    6a24:	11 90       	ld	r1, Z+
    6a26:	1d 92       	st	X+, r1
    6a28:	11 90       	ld	r1, Z+
    6a2a:	1d 92       	st	X+, r1
    6a2c:	11 90       	ld	r1, Z+
    6a2e:	1d 92       	st	X+, r1
    6a30:	11 90       	ld	r1, Z+
    6a32:	1d 92       	st	X+, r1
    6a34:	11 90       	ld	r1, Z+
    6a36:	1d 92       	st	X+, r1
    6a38:	11 90       	ld	r1, Z+
    6a3a:	1d 92       	st	X+, r1
    6a3c:	11 90       	ld	r1, Z+
    6a3e:	1d 92       	st	X+, r1
    6a40:	11 90       	ld	r1, Z+
    6a42:	1d 92       	st	X+, r1
    6a44:	11 90       	ld	r1, Z+
    6a46:	1d 92       	st	X+, r1
    6a48:	11 90       	ld	r1, Z+
    6a4a:	1d 92       	st	X+, r1
    6a4c:	11 90       	ld	r1, Z+
    6a4e:	1d 92       	st	X+, r1
    6a50:	11 90       	ld	r1, Z+
    6a52:	1d 92       	st	X+, r1
    6a54:	11 90       	ld	r1, Z+
    6a56:	1d 92       	st	X+, r1
	clr r1
    6a58:	11 24       	eor	r1, r1
	ret
    6a5a:	08 95       	ret

00006a5c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6a5c:	0f 93       	push	r16
	push r17
    6a5e:	1f 93       	push	r17
	push YL
    6a60:	cf 93       	push	r28
	push YH
    6a62:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6a64:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6a66:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6a68:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    6a6a:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6a6c:	e0 0d       	add	r30, r0
	adc ZH,r1
    6a6e:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6a70:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6a72:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6a74:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6a76:	8e 9f       	mul	r24, r30
	movw r26,r0
    6a78:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6a7a:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6a7c:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6a7e:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    6a80:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6a82:	00 24       	eor	r0, r0
	add YL,r1
    6a84:	c1 0d       	add	r28, r1
	adc YH,r0		
    6a86:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6a88:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6a8a:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6a8c:	ea 0f       	add	r30, r26
	adc ZH,r27
    6a8e:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6a90:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    6a92:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6a94:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6a96:	69 9f       	mul	r22, r25
	add XL,r0
    6a98:	a0 0d       	add	r26, r0
	adc XH,r1
    6a9a:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6a9c:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6a9e:	dd 27       	eor	r29, r29

	cpi r20,0	
    6aa0:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6aa2:	51 f4       	brne	.+20     	; 0x6ab8 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6aa4:	a2 0f       	add	r26, r18
	adc XH,r1
    6aa6:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6aa8:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6aaa:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6aac:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6aae:	11 c0       	rjmp	.+34     	; 0x6ad2 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6ab0:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6ab2:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6ab4:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6ab6:	0d c0       	rjmp	.+26     	; 0x6ad2 <x_check_end>

00006ab8 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6ab8:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6aba:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6abc:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6abe:	04 c0       	rjmp	.+8      	; 0x6ac8 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6ac0:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6ac2:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6ac4:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6ac6:	05 c0       	rjmp	.+10     	; 0x6ad2 <x_check_end>

00006ac8 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6ac8:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6aca:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6acc:	e2 0f       	add	r30, r18
	adc ZH,r1
    6ace:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6ad0:	31 97       	sbiw	r30, 0x01	; 1

00006ad2 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6ad2:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6ad4:	51 f4       	brne	.+20     	; 0x6aea <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6ad6:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6ad8:	93 9f       	mul	r25, r19
	add XL,r0
    6ada:	a0 0d       	add	r26, r0
	adc XH,r1
    6adc:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6ade:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6ae0:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6ae2:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6ae4:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6ae6:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6ae8:	0a c0       	rjmp	.+20     	; 0x6afe <y_check_end>

00006aea <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6aea:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6aec:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6aee:	63 2f       	mov	r22, r19
	dec r22
    6af0:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6af2:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6af4:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6af6:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6af8:	56 9f       	mul	r21, r22
	add ZL,r0
    6afa:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6afc:	f1 1d       	adc	r31, r1

00006afe <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6afe:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6b00:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6b02:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6b04:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6b06:	00 ff       	sbrs	r16, 0
	clr r23
    6b08:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6b0a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6b0c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6b0e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6b10:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6b12:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6b14:	59 1b       	sub	r21, r25

00006b16 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6b16:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6b18:	48 1b       	sub	r20, r24

00006b1a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6b1a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6b1c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6b1e:	2c 93       	st	X, r18
	adiw XL,1
    6b20:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6b22:	e6 0f       	add	r30, r22
	adc ZH,r23
    6b24:	f7 1f       	adc	r31, r23
	dec r20
    6b26:	4a 95       	dec	r20
	brne x_loop
    6b28:	c1 f7       	brne	.-16     	; 0x6b1a <x_loop>

	add ZL,YL		;src+=srcXdiff
    6b2a:	ec 0f       	add	r30, r28
	adc ZH,YH
    6b2c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6b2e:	a8 0f       	add	r26, r24
	adc XH,r1
    6b30:	b1 1d       	adc	r27, r1
	dec r21
    6b32:	5a 95       	dec	r21
	brne y_loop
    6b34:	81 f7       	brne	.-32     	; 0x6b16 <y_loop>


	pop YH
    6b36:	df 91       	pop	r29
	pop YL
    6b38:	cf 91       	pop	r28
	pop r17
    6b3a:	1f 91       	pop	r17
	pop r16
    6b3c:	0f 91       	pop	r16
	ret
    6b3e:	08 95       	ret

00006b40 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6b40:	0f 92       	push	r0
	push r1
    6b42:	1f 92       	push	r1
	push ZL;2
    6b44:	ef 93       	push	r30
	push ZH;2
    6b46:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6b48:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6b4a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6b4c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6b50:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6b52:	f1 e0       	ldi	r31, 0x01	; 1

00006b54 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6b54:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6b56:	00 f0       	brcs	.+0      	; 0x6b58 <latency_loop+0x4>
	inc ZH
    6b58:	f3 95       	inc	r31
	cpi ZH,10
    6b5a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6b5c:	d8 f3       	brcs	.-10     	; 0x6b54 <latency_loop>
	jmp .
    6b5e:	0c 94 b1 35 	jmp	0x6b62	; 0x6b62 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6b62:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    6b66:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6b68:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    6b6c:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    6b70:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6b72:	57 c0       	rjmp	.+174    	; 0x6c22 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6b74:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6b76:	98 f0       	brcs	.+38     	; 0x6b9e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6b78:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6b7a:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6b7e:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6b80:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6b84:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6b86:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6b88:	26 f4       	brtc	.+8      	; 0x6b92 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6b8a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6b8c:	0e 94 98 36 	call	0x6d30	; 0x6d30 <update_sound>
	rjmp sync_end
    6b90:	b7 c0       	rjmp	.+366    	; 0x6d00 <sync_end>

00006b92 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6b92:	e5 e1       	ldi	r30, 0x15	; 21
    6b94:	ea 95       	dec	r30
    6b96:	f1 f7       	brne	.-4      	; 0x6b94 <sync_pre_eq_no_sound_update+0x2>
    6b98:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6b9a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6b9c:	b1 c0       	rjmp	.+354    	; 0x6d00 <sync_end>

00006b9e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6b9e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6ba0:	38 f1       	brcs	.+78     	; 0x6bf0 <sync_post_eq>

	rjmp .
    6ba2:	00 c0       	rjmp	.+0      	; 0x6ba4 <sync_eq+0x6>
	rjmp .
    6ba4:	00 c0       	rjmp	.+0      	; 0x6ba6 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ba6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6ba8:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6baa:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6bac:	16 f4       	brtc	.+4      	; 0x6bb2 <sync_eq_skip>
	
	call update_sound
    6bae:	0e 94 98 36 	call	0x6d30	; 0x6d30 <update_sound>

00006bb2 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6bb2:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6bb4:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6bb8:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6bba:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6bbe:	a0 c0       	rjmp	.+320    	; 0x6d00 <sync_end>

00006bc0 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6bc0:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6bc2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6bc4:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6bc6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6bca:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6bcc:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6bce:	00 f0       	brcs	.+0      	; 0x6bd0 <__vector_14+0x10>

	cpi ZL,2
    6bd0:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6bd2:	00 f0       	brcs	.+0      	; 0x6bd4 <__vector_14+0x14>

	cpi ZL,3
    6bd4:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6bd6:	00 f0       	brcs	.+0      	; 0x6bd8 <__vector_14+0x18>

	cpi ZL,4
    6bd8:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6bda:	00 f0       	brcs	.+0      	; 0x6bdc <__vector_14+0x1c>

	cpi ZL,5
    6bdc:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6bde:	00 f0       	brcs	.+0      	; 0x6be0 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6be0:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6be2:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6be4:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6be8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6bea:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6bec:	ef 91       	pop	r30
	reti
    6bee:	18 95       	reti

00006bf0 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6bf0:	00 c0       	rjmp	.+0      	; 0x6bf2 <sync_post_eq+0x2>

	bst ZL,0
    6bf2:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6bf4:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6bf6:	26 f4       	brtc	.+8      	; 0x6c00 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6bf8:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6bfa:	0e 94 98 36 	call	0x6d30	; 0x6d30 <update_sound>
	rjmp sync_pre_eq_cont
    6bfe:	05 c0       	rjmp	.+10     	; 0x6c0a <sync_pre_eq_cont>

00006c00 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6c00:	e5 e1       	ldi	r30, 0x15	; 21
    6c02:	ea 95       	dec	r30
    6c04:	f1 f7       	brne	.-4      	; 0x6c02 <sync_post_eq_no_sound_update+0x2>
    6c06:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6c08:	28 9a       	sbi	0x05, 0	; 5

00006c0a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6c0a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    6c0e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6c10:	09 f0       	breq	.+2      	; 0x6c14 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6c12:	76 c0       	rjmp	.+236    	; 0x6d00 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6c14:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6c16:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    6c1a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6c1c:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    6c20:	6f c0       	rjmp	.+222    	; 0x6d00 <sync_end>

00006c22 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6c22:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6c24:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6c28:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6c2a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6c2e:	00 c0       	rjmp	.+0      	; 0x6c30 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c30:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6c32:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6c34:	00 c0       	rjmp	.+0      	; 0x6c36 <sync_hsync+0x14>
	call update_sound
    6c36:	0e 94 98 36 	call	0x6d30	; 0x6d30 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6c3a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6c3c:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    6c40:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6c42:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    6c46:	ef 17       	cp	r30, r31
	brsh no_render
    6c48:	d0 f4       	brcc	.+52     	; 0x6c7e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6c4a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6c4c:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    6c50:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6c52:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    6c56:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6c58:	ef 17       	cp	r30, r31
	brlo no_render
    6c5a:	88 f0       	brcs	.+34     	; 0x6c7e <no_render>

	;push r1-r29
	ldi ZL,29
    6c5c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6c5e:	ff 27       	eor	r31, r31

00006c60 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6c60:	00 80       	ld	r0, Z
	push r0
    6c62:	0f 92       	push	r0
	dec ZL
    6c64:	ea 95       	dec	r30
	brne push_loop	
    6c66:	e1 f7       	brne	.-8      	; 0x6c60 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6c68:	06 e0       	ldi	r16, 0x06	; 6
    6c6a:	0a 95       	dec	r16
    6c6c:	f1 f7       	brne	.-4      	; 0x6c6a <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6c6e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6c72:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6c74:	ff 27       	eor	r31, r31

00006c76 <pop_loop>:
pop_loop:
	pop r0
    6c76:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6c78:	01 92       	st	Z+, r0
	cpi ZL,30
    6c7a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6c7c:	e0 f3       	brcs	.-8      	; 0x6c76 <pop_loop>

00006c7e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6c7e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    6c82:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6c84:	09 f0       	breq	.+2      	; 0x6c88 <no_render+0xa>
	rjmp sync_end
    6c86:	3c c0       	rjmp	.+120    	; 0x6d00 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6c88:	2f 93       	push	r18
	push r19
    6c8a:	3f 93       	push	r19
	push r20
    6c8c:	4f 93       	push	r20
	push r21
    6c8e:	5f 93       	push	r21
	push r22
    6c90:	6f 93       	push	r22
	push r23
    6c92:	7f 93       	push	r23
	push r24
    6c94:	8f 93       	push	r24
	push r25
    6c96:	9f 93       	push	r25
	push r26
    6c98:	af 93       	push	r26
	push r27
    6c9a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6c9c:	78 94       	sei
	clr r1
    6c9e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6ca0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6ca2:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6ca6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6ca8:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6cac:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    6cb0:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    6cb4:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6cb6:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    6cba:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6cbe:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    6cc2:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    6cc6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6cc8:	f1 05       	cpc	r31, r1
	breq .+2 
    6cca:	09 f0       	breq	.+2      	; 0x6cce <no_render+0x50>
	icall
    6ccc:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6cce:	0e 94 32 38 	call	0x7064	; 0x7064 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6cd2:	0e 94 42 46 	call	0x8c84	; 0x8c84 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6cd6:	0e 94 92 36 	call	0x6d24	; 0x6d24 <process_music>
	clr r1
    6cda:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6cdc:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    6ce0:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    6ce4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6ce6:	f1 05       	cpc	r31, r1
	breq .+2 
    6ce8:	09 f0       	breq	.+2      	; 0x6cec <no_render+0x6e>
	icall
    6cea:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6cec:	bf 91       	pop	r27
	pop r26
    6cee:	af 91       	pop	r26
	pop r25
    6cf0:	9f 91       	pop	r25
	pop r24
    6cf2:	8f 91       	pop	r24
	pop r23
    6cf4:	7f 91       	pop	r23
	pop r22
    6cf6:	6f 91       	pop	r22
	pop r21
    6cf8:	5f 91       	pop	r21
	pop r20
    6cfa:	4f 91       	pop	r20
	pop r19
    6cfc:	3f 91       	pop	r19
	pop r18
    6cfe:	2f 91       	pop	r18

00006d00 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6d00:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6d02:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6d04:	ff 91       	pop	r31
	pop ZL
    6d06:	ef 91       	pop	r30
	pop r1
    6d08:	1f 90       	pop	r1
	pop r0
    6d0a:	0f 90       	pop	r0
	reti
    6d0c:	18 95       	reti

00006d0e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d0e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6d10:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6d12:	00 c0       	rjmp	.+0      	; 0x6d14 <hsync_pulse+0x6>
	call update_sound
    6d14:	0e 94 98 36 	call	0x6d30	; 0x6d30 <update_sound>

	lds ZL,sync_pulse
    6d18:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    6d1c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6d1e:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    6d22:	08 95       	ret

00006d24 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6d24:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    6d28:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6d2a:	0e 94 58 3b 	call	0x76b0	; 0x76b0 <ProcessMusic>
#endif

	ret
    6d2e:	08 95       	ret

00006d30 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    6d30:	0f 93       	push	r16
	push r17
    6d32:	1f 93       	push	r17
	push r18
    6d34:	2f 93       	push	r18
	push r28
    6d36:	cf 93       	push	r28
	push r29
    6d38:	df 93       	push	r29

	mov r18,ZL
    6d3a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6d3c:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    6d40:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    6d44:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6d46:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    6d4a:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    6d4e:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    6d52:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6d54:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6d56:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    6d5a:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    6d5e:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    6d62:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6d64:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6d66:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6d68:	d0 2d       	mov	r29, r0
	nop
    6d6a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6d6c:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    6d70:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    6d74:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6d76:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    6d7a:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    6d7e:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    6d82:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6d84:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6d86:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    6d8a:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    6d8e:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6d92:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6d94:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6d96:	20 ff       	sbrs	r18, 0
	rjmp .
    6d98:	00 c0       	rjmp	.+0      	; 0x6d9a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6d9a:	01 03       	mulsu	r16, r17
	clr r0
    6d9c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6d9e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6da0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6da2:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6da4:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    6da8:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    6dac:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6dae:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    6db2:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    6db6:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    6dba:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6dbc:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6dbe:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    6dc2:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    6dc6:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    6dca:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6dcc:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6dce:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6dd0:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6dd2:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    6dd6:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    6dda:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    6dde:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6de0:	92 f4       	brpl	.+36     	; 0x6e06 <ch4_no_shift>

	lds ZH,tr4_params
    6de2:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    6de6:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6de8:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6dea:	00 2e       	mov	r0, r16
	lsr r0
    6dec:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6dee:	00 26       	eor	r0, r16
	bst r0,0
    6df0:	00 fa       	bst	r0, 0
	lsr r17
    6df2:	16 95       	lsr	r17
	ror r16
    6df4:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6df6:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6df8:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6dfa:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6dfc:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    6e00:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    6e04:	03 c0       	rjmp	.+6      	; 0x6e0c <ch4_end>

00006e06 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6e06:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6e08:	1a 95       	dec	r17
	brne .-4
    6e0a:	f1 f7       	brne	.-4      	; 0x6e08 <ch4_no_shift+0x2>

00006e0c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6e0c:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    6e10:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6e12:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6e14:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6e16:	21 ff       	sbrs	r18, 1
	rjmp .
    6e18:	00 c0       	rjmp	.+0      	; 0x6e1a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6e1a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6e1c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6e1e:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    6e22:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6e24:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e26:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6e28:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6e2a:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    6e2e:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    6e32:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6e34:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    6e38:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    6e3c:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    6e40:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6e42:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    6e46:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6e48:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6e4a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6e4c:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    6e50:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    6e54:	00 19       	sub	r16, r0
	sbc r17,r1
    6e56:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6e58:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    6e5c:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    6e60:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6e62:	f1 05       	cpc	r31, r1
	brlo .+2
    6e64:	08 f0       	brcs	.+2      	; 0x6e68 <ch4_end+0x5c>
	movw ZL,r16
    6e66:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6e68:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    6e6c:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    6e70:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6e72:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    6e76:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6e78:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e7a:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6e7c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6e7e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6e80:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6e82:	d0 05       	cpc	r29, r0
	brlt .+2
    6e84:	0c f0       	brlt	.+2      	; 0x6e88 <ch4_end+0x7c>
	ldi r28,127
    6e86:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6e88:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6e8a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6e8c:	d0 05       	cpc	r29, r0
	brge .+2
    6e8e:	0c f4       	brge	.+2      	; 0x6e92 <ch4_end+0x86>
	ldi r28,-128
    6e90:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6e92:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6e94:	c0 93 b3 00 	sts	0x00B3, r28

00006e98 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    6e98:	df 91       	pop	r29
	pop r28
    6e9a:	cf 91       	pop	r28
	pop r18
    6e9c:	2f 91       	pop	r18
	pop r17
    6e9e:	1f 91       	pop	r17
	pop r16
    6ea0:	0f 91       	pop	r16
	
	ret
    6ea2:	08 95       	ret

00006ea4 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6ea4:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    6ea8:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    6eac:	08 95       	ret

00006eae <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6eae:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6eb0:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    6eb2:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    6eb4:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6eb6:	6c e1       	ldi	r22, 0x1C	; 28

00006eb8 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6eb8:	6d 93       	st	X+, r22
	sbiw r30,1
    6eba:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6ebc:	e9 f7       	brne	.-6      	; 0x6eb8 <fill_vram_loop>

	clr r1
    6ebe:	11 24       	eor	r1, r1

	ret
    6ec0:	08 95       	ret

00006ec2 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    6ec2:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    6ec4:	76 2f       	mov	r23, r22
	lsr r22
    6ec6:	66 95       	lsr	r22
	lsr r22
    6ec8:	66 95       	lsr	r22
	lsr r22			;y>>3
    6eca:	66 95       	lsr	r22
	ldi r18,8		
    6ecc:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    6ece:	82 9f       	mul	r24, r18
	movw XL,r0
    6ed0:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    6ed2:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    6ed4:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    6ed6:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    6ed8:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    6eda:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    6edc:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    6ede:	4c 93       	st	X, r20

	clr r1
    6ee0:	11 24       	eor	r1, r1

	ret
    6ee2:	08 95       	ret

00006ee4 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6ee4:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    6ee8:	90 93 97 0c 	sts	0x0C97, r25
	ret
    6eec:	08 95       	ret

00006eee <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6eee:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    6ef2:	81 70       	andi	r24, 0x01	; 1
	ret
    6ef4:	08 95       	ret

00006ef6 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6ef6:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    6efa:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6efc:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    6f00:	08 95       	ret

00006f02 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6f02:	88 23       	and	r24, r24
	brne rj_p2
    6f04:	29 f4       	brne	.+10     	; 0x6f10 <rj_p2>
		
	lds r24,joypad1_status_lo
    6f06:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    6f0a:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    6f0e:	08 95       	ret

00006f10 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6f10:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    6f14:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    6f18:	08 95       	ret

00006f1a <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6f1a:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6f1c:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6f1e:	f1 f7       	brne	.-4      	; 0x6f1c <WaitUs+0x2>
	nop
    6f20:	00 00       	nop
	sbiw r24,1
    6f22:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6f24:	d1 f7       	brne	.-12     	; 0x6f1a <WaitUs>

	ret
    6f26:	08 95       	ret

00006f28 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6f28:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6f2a:	fe cf       	rjmp	.-4      	; 0x6f28 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6f2c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6f2e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6f30:	60 bd       	out	0x20, r22	; 32
   cli
    6f32:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6f34:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6f36:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6f38:	78 94       	sei
   ret
    6f3a:	08 95       	ret

00006f3c <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6f3c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6f3e:	fe cf       	rjmp	.-4      	; 0x6f3c <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6f40:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6f42:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6f44:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6f46:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6f48:	80 b5       	in	r24, 0x20	; 32
   sei
    6f4a:	78 94       	sei
   ret
    6f4c:	08 95       	ret

00006f4e <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    6f4e:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    6f50:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    6f54:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    6f58:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    6f5c:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    6f60:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    6f64:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    6f68:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    6f6c:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    6f70:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    6f74:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    6f76:	80 93 81 00 	sts	0x0081, r24

		cli
    6f7a:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    6f7c:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    6f7e:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    6f82:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    6f84:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    6f88:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    6f8a:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    6f8e:	90 93 60 00 	sts	0x0060, r25
	
		sei
    6f92:	78 94       	sei

00006f94 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    6f94:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    6f98:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    6f9a:	e0 f3       	brcs	.-8      	; 0x6f94 <wait>

		ret
    6f9c:	08 95       	ret

00006f9e <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    6f9e:	0f 93       	push	r16
		push r17
    6fa0:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    6fa2:	0f b7       	in	r16, 0x3f	; 63
		push r16
    6fa4:	0f 93       	push	r16

		lds r16,sync_pulse
    6fa6:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    6faa:	03 95       	inc	r16
		sts sync_pulse,r16
    6fac:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    6fb0:	00 fd       	sbrc	r16, 0
		rjmp 1f
    6fb2:	08 c0       	rjmp	.+16     	; 0x6fc4 <__vector_8+0x26>
		lds r17,random_value
    6fb4:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6fb8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6fbc:	10 27       	eor	r17, r16
		sts random_value,r17
    6fbe:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    6fc2:	07 c0       	rjmp	.+14     	; 0x6fd2 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    6fc4:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6fc8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6fcc:	10 27       	eor	r17, r16
		sts random_value+1,r17
    6fce:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    6fd2:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    6fd4:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    6fd8:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    6fda:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    6fdc:	1f 91       	pop	r17
		pop r16
    6fde:	0f 91       	pop	r16
		reti
    6fe0:	18 95       	reti

00006fe2 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6fe2:	98 e0       	ldi	r25, 0x08	; 8
    6fe4:	88 e1       	ldi	r24, 0x18	; 24
    6fe6:	0f b6       	in	r0, 0x3f	; 63
    6fe8:	f8 94       	cli
    6fea:	a8 95       	wdr
    6fec:	80 93 60 00 	sts	0x0060, r24
    6ff0:	0f be       	out	0x3f, r0	; 63
    6ff2:	90 93 60 00 	sts	0x0060, r25
	while(1);
    6ff6:	ff cf       	rjmp	.-2      	; 0x6ff6 <SoftReset+0x14>

00006ff8 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6ff8:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6ffa:	c8 95       	lpm
    6ffc:	c8 95       	lpm
		Wait200ns();
    6ffe:	c8 95       	lpm
    7000:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7002:	12 98       	cbi	0x02, 2	; 2
    7004:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7006:	80 e0       	ldi	r24, 0x00	; 0
    7008:	90 e0       	ldi	r25, 0x00	; 0
    700a:	20 e0       	ldi	r18, 0x00	; 0
    700c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    700e:	36 95       	lsr	r19
    7010:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7012:	96 95       	lsr	r25
    7014:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7016:	c8 95       	lpm
    7018:	c8 95       	lpm
			Wait200ns();
    701a:	c8 95       	lpm
    701c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    701e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7020:	00 9b       	sbis	0x00, 0	; 0
    7022:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7024:	01 9b       	sbis	0x00, 1	; 0
    7026:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7028:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    702a:	c8 95       	lpm
    702c:	c8 95       	lpm
			Wait200ns();
    702e:	c8 95       	lpm
    7030:	c8 95       	lpm
    7032:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7034:	61 f7       	brne	.-40     	; 0x700e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7036:	30 93 aa 0c 	sts	0x0CAA, r19
    703a:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    703e:	90 93 ae 0c 	sts	0x0CAE, r25
    7042:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7046:	80 91 a9 0c 	lds	r24, 0x0CA9
    704a:	90 91 aa 0c 	lds	r25, 0x0CAA
    704e:	0f 97       	sbiw	r24, 0x0f	; 15
    7050:	31 f0       	breq	.+12     	; 0x705e <ReadButtons+0x66>
    7052:	80 91 ad 0c 	lds	r24, 0x0CAD
    7056:	90 91 ae 0c 	lds	r25, 0x0CAE
    705a:	0f 97       	sbiw	r24, 0x0f	; 15
    705c:	11 f4       	brne	.+4      	; 0x7062 <ReadButtons+0x6a>
		SoftReset();
    705e:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <SoftReset>
    7062:	08 95       	ret

00007064 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7064:	10 92 e3 0c 	sts	0x0CE3, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7068:	00 99       	sbic	0x00, 0	; 0
    706a:	03 c0       	rjmp	.+6      	; 0x7072 <ReadControllers+0xe>
    706c:	81 e0       	ldi	r24, 0x01	; 1
    706e:	80 93 e3 0c 	sts	0x0CE3, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7072:	01 99       	sbic	0x00, 1	; 0
    7074:	05 c0       	rjmp	.+10     	; 0x7080 <ReadControllers+0x1c>
    7076:	80 91 e3 0c 	lds	r24, 0x0CE3
    707a:	82 60       	ori	r24, 0x02	; 2
    707c:	80 93 e3 0c 	sts	0x0CE3, r24
			
	//read the standard buttons
	ReadButtons();
    7080:	0c 94 fc 37 	jmp	0x6ff8	; 0x6ff8 <ReadButtons>

00007084 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7084:	cf 93       	push	r28
    7086:	df 93       	push	r29
    7088:	c0 e0       	ldi	r28, 0x00	; 0
    708a:	d0 e0       	ldi	r29, 0x00	; 0
    708c:	fe 01       	movw	r30, r28
    708e:	e2 56       	subi	r30, 0x62	; 98
    7090:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7092:	64 91       	lpm	r22, Z
    7094:	ce 01       	movw	r24, r28
    7096:	0e 94 94 37 	call	0x6f28	; 0x6f28 <WriteEeprom>
    709a:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    709c:	c0 32       	cpi	r28, 0x20	; 32
    709e:	d1 05       	cpc	r29, r1
    70a0:	a9 f7       	brne	.-22     	; 0x708c <FormatEeprom+0x8>
    70a2:	c0 e2       	ldi	r28, 0x20	; 32
    70a4:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    70a6:	6f ef       	ldi	r22, 0xFF	; 255
    70a8:	ce 01       	movw	r24, r28
    70aa:	0e 94 94 37 	call	0x6f28	; 0x6f28 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    70ae:	6f ef       	ldi	r22, 0xFF	; 255
    70b0:	ce 01       	movw	r24, r28
    70b2:	01 96       	adiw	r24, 0x01	; 1
    70b4:	0e 94 94 37 	call	0x6f28	; 0x6f28 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    70b8:	a0 96       	adiw	r28, 0x20	; 32
    70ba:	c1 15       	cp	r28, r1
    70bc:	88 e0       	ldi	r24, 0x08	; 8
    70be:	d8 07       	cpc	r29, r24
    70c0:	91 f7       	brne	.-28     	; 0x70a6 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    70c2:	df 91       	pop	r29
    70c4:	cf 91       	pop	r28
    70c6:	08 95       	ret

000070c8 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    70c8:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    70ca:	80 e0       	ldi	r24, 0x00	; 0
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <ReadEeprom>
    70d2:	c8 2f       	mov	r28, r24
    70d4:	81 e0       	ldi	r24, 0x01	; 1
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <ReadEeprom>
    70dc:	28 2f       	mov	r18, r24
    70de:	30 e0       	ldi	r19, 0x00	; 0
    70e0:	32 2f       	mov	r19, r18
    70e2:	22 27       	eor	r18, r18
    70e4:	2c 0f       	add	r18, r28
    70e6:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    70e8:	81 e0       	ldi	r24, 0x01	; 1
    70ea:	2a 35       	cpi	r18, 0x5A	; 90
    70ec:	35 45       	sbci	r19, 0x55	; 85
    70ee:	09 f0       	breq	.+2      	; 0x70f2 <isEepromFormatted+0x2a>
    70f0:	80 e0       	ldi	r24, 0x00	; 0
}
    70f2:	cf 91       	pop	r28
    70f4:	08 95       	ret

000070f6 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    70f6:	8f 92       	push	r8
    70f8:	9f 92       	push	r9
    70fa:	af 92       	push	r10
    70fc:	bf 92       	push	r11
    70fe:	cf 92       	push	r12
    7100:	df 92       	push	r13
    7102:	ef 92       	push	r14
    7104:	ff 92       	push	r15
    7106:	0f 93       	push	r16
    7108:	1f 93       	push	r17
    710a:	cf 93       	push	r28
    710c:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    710e:	fb 01       	movw	r30, r22
    7110:	11 82       	std	Z+1, r1	; 0x01
    7112:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7114:	8f 3f       	cpi	r24, 0xFF	; 255
    7116:	ff ef       	ldi	r31, 0xFF	; 255
    7118:	9f 07       	cpc	r25, r31
    711a:	89 f1       	breq	.+98     	; 0x717e <EepromBlockExists+0x88>
    711c:	6a 01       	movw	r12, r20
    711e:	8b 01       	movw	r16, r22
    7120:	7c 01       	movw	r14, r24
    7122:	a1 2c       	mov	r10, r1
    7124:	b1 2c       	mov	r11, r1
    7126:	c0 e0       	ldi	r28, 0x00	; 0
    7128:	d3 e0       	ldi	r29, 0x03	; 3
    712a:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    712c:	c5 01       	movw	r24, r10
    712e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <ReadEeprom>
    7132:	88 2e       	mov	r8, r24
    7134:	c5 01       	movw	r24, r10
    7136:	01 96       	adiw	r24, 0x01	; 1
    7138:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <ReadEeprom>
    713c:	28 2f       	mov	r18, r24
    713e:	30 e0       	ldi	r19, 0x00	; 0
    7140:	32 2f       	mov	r19, r18
    7142:	22 27       	eor	r18, r18
    7144:	28 0d       	add	r18, r8
    7146:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7148:	2e 15       	cp	r18, r14
    714a:	3f 05       	cpc	r19, r15
    714c:	29 f4       	brne	.+10     	; 0x7158 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    714e:	f8 01       	movw	r30, r16
    7150:	b1 82       	std	Z+1, r11	; 0x01
    7152:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7154:	d0 e0       	ldi	r29, 0x00	; 0
    7156:	0b c0       	rjmp	.+22     	; 0x716e <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7158:	2f 3f       	cpi	r18, 0xFF	; 255
    715a:	3f 4f       	sbci	r19, 0xFF	; 255
    715c:	41 f4       	brne	.+16     	; 0x716e <EepromBlockExists+0x78>
    715e:	91 10       	cpse	r9, r1
    7160:	06 c0       	rjmp	.+12     	; 0x716e <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7162:	c1 14       	cp	r12, r1
    7164:	d1 04       	cpc	r13, r1
    7166:	11 f0       	breq	.+4      	; 0x716c <EepromBlockExists+0x76>
    7168:	f6 01       	movw	r30, r12
    716a:	c0 83       	st	Z, r28
    716c:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    716e:	cf 5f       	subi	r28, 0xFF	; 255
    7170:	f0 e2       	ldi	r31, 0x20	; 32
    7172:	af 0e       	add	r10, r31
    7174:	b1 1c       	adc	r11, r1
    7176:	c0 34       	cpi	r28, 0x40	; 64
    7178:	c9 f6       	brne	.-78     	; 0x712c <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    717a:	8d 2f       	mov	r24, r29
    717c:	01 c0       	rjmp	.+2      	; 0x7180 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    717e:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7180:	df 91       	pop	r29
    7182:	cf 91       	pop	r28
    7184:	1f 91       	pop	r17
    7186:	0f 91       	pop	r16
    7188:	ff 90       	pop	r15
    718a:	ef 90       	pop	r14
    718c:	df 90       	pop	r13
    718e:	cf 90       	pop	r12
    7190:	bf 90       	pop	r11
    7192:	af 90       	pop	r10
    7194:	9f 90       	pop	r9
    7196:	8f 90       	pop	r8
    7198:	08 95       	ret

0000719a <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    719a:	ef 92       	push	r14
    719c:	ff 92       	push	r15
    719e:	0f 93       	push	r16
    71a0:	1f 93       	push	r17
    71a2:	cf 93       	push	r28
    71a4:	df 93       	push	r29
    71a6:	00 d0       	rcall	.+0      	; 0x71a8 <EepromWriteBlock+0xe>
    71a8:	1f 92       	push	r1
    71aa:	cd b7       	in	r28, 0x3d	; 61
    71ac:	de b7       	in	r29, 0x3e	; 62
    71ae:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    71b0:	1a 82       	std	Y+2, r1	; 0x02
    71b2:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    71b4:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    71b6:	ae 01       	movw	r20, r28
    71b8:	4d 5f       	subi	r20, 0xFD	; 253
    71ba:	5f 4f       	sbci	r21, 0xFF	; 255
    71bc:	be 01       	movw	r22, r28
    71be:	6f 5f       	subi	r22, 0xFF	; 255
    71c0:	7f 4f       	sbci	r23, 0xFF	; 255
    71c2:	fc 01       	movw	r30, r24
    71c4:	80 81       	ld	r24, Z
    71c6:	91 81       	ldd	r25, Z+1	; 0x01
    71c8:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    71cc:	88 23       	and	r24, r24
    71ce:	11 f0       	breq	.+4      	; 0x71d4 <EepromWriteBlock+0x3a>
    71d0:	83 30       	cpi	r24, 0x03	; 3
    71d2:	19 f5       	brne	.+70     	; 0x721a <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    71d4:	89 81       	ldd	r24, Y+1	; 0x01
    71d6:	9a 81       	ldd	r25, Y+2	; 0x02
    71d8:	89 2b       	or	r24, r25
    71da:	49 f4       	brne	.+18     	; 0x71ee <EepromWriteBlock+0x54>
    71dc:	8b 81       	ldd	r24, Y+3	; 0x03
    71de:	88 23       	and	r24, r24
    71e0:	d9 f0       	breq	.+54     	; 0x7218 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    71e2:	f0 e2       	ldi	r31, 0x20	; 32
    71e4:	8f 9f       	mul	r24, r31
    71e6:	c0 01       	movw	r24, r0
    71e8:	11 24       	eor	r1, r1
    71ea:	9a 83       	std	Y+2, r25	; 0x02
    71ec:	89 83       	std	Y+1, r24	; 0x01
    71ee:	78 01       	movw	r14, r16
    71f0:	20 e2       	ldi	r18, 0x20	; 32
    71f2:	e2 0e       	add	r14, r18
    71f4:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    71f6:	f8 01       	movw	r30, r16
    71f8:	61 91       	ld	r22, Z+
    71fa:	8f 01       	movw	r16, r30
    71fc:	89 81       	ldd	r24, Y+1	; 0x01
    71fe:	9a 81       	ldd	r25, Y+2	; 0x02
    7200:	9c 01       	movw	r18, r24
    7202:	2f 5f       	subi	r18, 0xFF	; 255
    7204:	3f 4f       	sbci	r19, 0xFF	; 255
    7206:	3a 83       	std	Y+2, r19	; 0x02
    7208:	29 83       	std	Y+1, r18	; 0x01
    720a:	0e 94 94 37 	call	0x6f28	; 0x6f28 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    720e:	0e 15       	cp	r16, r14
    7210:	1f 05       	cpc	r17, r15
    7212:	89 f7       	brne	.-30     	; 0x71f6 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7214:	80 e0       	ldi	r24, 0x00	; 0
    7216:	01 c0       	rjmp	.+2      	; 0x721a <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7218:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    721a:	0f 90       	pop	r0
    721c:	0f 90       	pop	r0
    721e:	0f 90       	pop	r0
    7220:	df 91       	pop	r29
    7222:	cf 91       	pop	r28
    7224:	1f 91       	pop	r17
    7226:	0f 91       	pop	r16
    7228:	ff 90       	pop	r15
    722a:	ef 90       	pop	r14
    722c:	08 95       	ret

0000722e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    722e:	fc 01       	movw	r30, r24
    7230:	67 87       	std	Z+15, r22	; 0x0f
    7232:	08 95       	ret

00007234 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7234:	e8 eb       	ldi	r30, 0xB8	; 184
    7236:	fc e0       	ldi	r31, 0x0C	; 12
    7238:	81 e0       	ldi	r24, 0x01	; 1
    723a:	91 e0       	ldi	r25, 0x01	; 1
    723c:	95 8b       	std	Z+21, r25	; 0x15
    723e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7240:	63 8b       	std	Z+19, r22	; 0x13
    7242:	08 95       	ret

00007244 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7244:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7246:	90 81       	ld	r25, Z
    7248:	9f 75       	andi	r25, 0x5F	; 95
    724a:	90 83       	st	Z, r25
    724c:	08 95       	ret

0000724e <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    724e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7250:	90 81       	ld	r25, Z
    7252:	90 64       	ori	r25, 0x40	; 64
    7254:	90 83       	st	Z, r25
    7256:	08 95       	ret

00007258 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    7258:	fc 01       	movw	r30, r24
    725a:	66 87       	std	Z+14, r22	; 0x0e
    725c:	08 95       	ret

0000725e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    725e:	fc 01       	movw	r30, r24
    7260:	62 87       	std	Z+10, r22	; 0x0a
    7262:	08 95       	ret

00007264 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7264:	fc 01       	movw	r30, r24
    7266:	63 87       	std	Z+11, r22	; 0x0b
    7268:	08 95       	ret

0000726a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    726a:	cf 93       	push	r28
    726c:	df 93       	push	r29
    726e:	ec 01       	movw	r28, r24
    7270:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7272:	29 81       	ldd	r18, Y+1	; 0x01
    7274:	30 e0       	ldi	r19, 0x00	; 0
    7276:	f9 01       	movw	r30, r18
    7278:	ee 0f       	add	r30, r30
    727a:	ff 1f       	adc	r31, r31
    727c:	e8 5f       	subi	r30, 0xF8	; 248
    727e:	f3 48       	sbci	r31, 0x83	; 131
    7280:	65 91       	lpm	r22, Z+
    7282:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7284:	f9 01       	movw	r30, r18
    7286:	e4 0f       	add	r30, r20
    7288:	f1 1d       	adc	r31, r1
    728a:	47 fd       	sbrc	r20, 7
    728c:	fa 95       	dec	r31
    728e:	ee 0f       	add	r30, r30
    7290:	ff 1f       	adc	r31, r31
    7292:	e8 5f       	subi	r30, 0xF8	; 248
    7294:	f3 48       	sbci	r31, 0x83	; 131
    7296:	85 91       	lpm	r24, Z+
    7298:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    729a:	86 1b       	sub	r24, r22
    729c:	97 0b       	sbc	r25, r23
    729e:	68 85       	ldd	r22, Y+8	; 0x08
    72a0:	70 e0       	ldi	r23, 0x00	; 0
    72a2:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__divmodhi4>
	if(delta==0)delta++;
    72a6:	61 15       	cp	r22, r1
    72a8:	71 05       	cpc	r23, r1
    72aa:	11 f4       	brne	.+4      	; 0x72b0 <PatchCommand11+0x46>
    72ac:	61 e0       	ldi	r22, 0x01	; 1
    72ae:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    72b0:	ea 81       	ldd	r30, Y+2	; 0x02
    72b2:	86 e0       	ldi	r24, 0x06	; 6
    72b4:	e8 9f       	mul	r30, r24
    72b6:	f0 01       	movw	r30, r0
    72b8:	11 24       	eor	r1, r1
    72ba:	e8 54       	subi	r30, 0x48	; 72
    72bc:	f3 4f       	sbci	r31, 0xF3	; 243
    72be:	81 81       	ldd	r24, Z+1	; 0x01
    72c0:	92 81       	ldd	r25, Z+2	; 0x02
    72c2:	86 0f       	add	r24, r22
    72c4:	97 1f       	adc	r25, r23
    72c6:	92 83       	std	Z+2, r25	; 0x02
    72c8:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    72ca:	7e 83       	std	Y+6, r23	; 0x06
    72cc:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    72ce:	88 81       	ld	r24, Y
    72d0:	88 60       	ori	r24, 0x08	; 8
    72d2:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    72d4:	89 81       	ldd	r24, Y+1	; 0x01
    72d6:	48 0f       	add	r20, r24
    72d8:	4f 83       	std	Y+7, r20	; 0x07
}
    72da:	df 91       	pop	r29
    72dc:	cf 91       	pop	r28
    72de:	08 95       	ret

000072e0 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    72e0:	fc 01       	movw	r30, r24
    72e2:	60 87       	std	Z+8, r22	; 0x08
    72e4:	08 95       	ret

000072e6 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    72e6:	fc 01       	movw	r30, r24
    72e8:	64 83       	std	Z+4, r22	; 0x04
    72ea:	08 95       	ret

000072ec <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    72ec:	fc 01       	movw	r30, r24
    72ee:	82 81       	ldd	r24, Z+2	; 0x02
    72f0:	0c 94 91 3d 	jmp	0x7b22	; 0x7b22 <SetMixerWave>

000072f4 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    72f4:	fc 01       	movw	r30, r24
	track->note+=param;
    72f6:	91 81       	ldd	r25, Z+1	; 0x01
    72f8:	69 0f       	add	r22, r25
    72fa:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    72fc:	82 81       	ldd	r24, Z+2	; 0x02
    72fe:	0c 94 7a 3d 	jmp	0x7af4	; 0x7af4 <SetMixerNote>

00007302 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7302:	fc 01       	movw	r30, r24
	track->note-=param;
    7304:	91 81       	ldd	r25, Z+1	; 0x01
    7306:	96 1b       	sub	r25, r22
    7308:	69 2f       	mov	r22, r25
    730a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    730c:	82 81       	ldd	r24, Z+2	; 0x02
    730e:	0c 94 7a 3d 	jmp	0x7af4	; 0x7af4 <SetMixerNote>

00007312 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7312:	1f 93       	push	r17
    7314:	cf 93       	push	r28
    7316:	df 93       	push	r29
    7318:	ec 01       	movw	r28, r24
    731a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    731c:	8a 81       	ldd	r24, Y+2	; 0x02
    731e:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <SetMixerNote>
	track->note=param;
    7322:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7324:	88 81       	ld	r24, Y
    7326:	87 7f       	andi	r24, 0xF7	; 247
    7328:	88 83       	st	Y, r24
}
    732a:	df 91       	pop	r29
    732c:	cf 91       	pop	r28
    732e:	1f 91       	pop	r17
    7330:	08 95       	ret

00007332 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7332:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7334:	14 96       	adiw	r26, 0x04	; 4
    7336:	8c 91       	ld	r24, X
    7338:	14 97       	sbiw	r26, 0x04	; 4
    733a:	88 23       	and	r24, r24
    733c:	19 f1       	breq	.+70     	; 0x7384 <PatchCommand14+0x52>
    733e:	55 96       	adiw	r26, 0x15	; 21
    7340:	2d 91       	ld	r18, X+
    7342:	3c 91       	ld	r19, X
    7344:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7346:	66 23       	and	r22, r22
    7348:	79 f0       	breq	.+30     	; 0x7368 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    734a:	77 27       	eor	r23, r23
    734c:	67 fd       	sbrc	r22, 7
    734e:	70 95       	com	r23
    7350:	6f 5f       	subi	r22, 0xFF	; 255
    7352:	7f 4f       	sbci	r23, 0xFF	; 255
    7354:	ab 01       	movw	r20, r22
    7356:	44 0f       	add	r20, r20
    7358:	55 1f       	adc	r21, r21
    735a:	64 0f       	add	r22, r20
    735c:	75 1f       	adc	r23, r21
    735e:	26 1b       	sub	r18, r22
    7360:	37 0b       	sbc	r19, r23
    7362:	09 c0       	rjmp	.+18     	; 0x7376 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7364:	ef 3f       	cpi	r30, 0xFF	; 255
    7366:	39 f0       	breq	.+14     	; 0x7376 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7368:	23 50       	subi	r18, 0x03	; 3
    736a:	31 09       	sbc	r19, r1
    736c:	f9 01       	movw	r30, r18
    736e:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7370:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7372:	ed 30       	cpi	r30, 0x0D	; 13
    7374:	b9 f7       	brne	.-18     	; 0x7364 <PatchCommand14+0x32>
    7376:	56 96       	adiw	r26, 0x16	; 22
    7378:	3c 93       	st	X, r19
    737a:	2e 93       	st	-X, r18
    737c:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    737e:	81 50       	subi	r24, 0x01	; 1
    7380:	14 96       	adiw	r26, 0x04	; 4
    7382:	8c 93       	st	X, r24
    7384:	08 95       	ret

00007386 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7386:	90 93 5c 0d 	sts	0x0D5C, r25
    738a:	80 93 5b 0d 	sts	0x0D5B, r24

	masterVolume=DEFAULT_MASTER_VOL;
    738e:	8f e6       	ldi	r24, 0x6F	; 111
    7390:	80 93 5e 0d 	sts	0x0D5E, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7394:	10 92 b6 0c 	sts	0x0CB6, r1
    7398:	e6 ef       	ldi	r30, 0xF6	; 246
    739a:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    739c:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    739e:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    73a0:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    73a2:	28 e1       	ldi	r18, 0x18	; 24
    73a4:	df 01       	movw	r26, r30
    73a6:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    73a8:	8c 93       	st	X, r24
    73aa:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    73ac:	9c 93       	st	X, r25
    73ae:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    73b0:	1c 92       	st	X, r1
    73b2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    73b4:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    73b6:	10 82       	st	Z, r1
    73b8:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    73ba:	2c 93       	st	X, r18
    73bc:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    73be:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    73c0:	8f 5f       	subi	r24, 0xFF	; 255
    73c2:	77 96       	adiw	r30, 0x17	; 23
    73c4:	85 30       	cpi	r24, 0x05	; 5
    73c6:	71 f7       	brne	.-36     	; 0x73a4 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    73c8:	08 95       	ret

000073ca <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    73ca:	e6 ee       	ldi	r30, 0xE6	; 230
    73cc:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73ce:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    73d0:	20 81       	ld	r18, Z
    73d2:	2f 77       	andi	r18, 0x7F	; 127
    73d4:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    73d6:	33 83       	std	Z+3, r19	; 0x03
    73d8:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    73da:	2d e0       	ldi	r18, 0x0D	; 13
    73dc:	e9 35       	cpi	r30, 0x59	; 89
    73de:	f2 07       	cpc	r31, r18
    73e0:	b9 f7       	brne	.-18     	; 0x73d0 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    73e2:	01 96       	adiw	r24, 0x01	; 1
    73e4:	90 93 63 0d 	sts	0x0D63, r25
    73e8:	80 93 62 0d 	sts	0x0D62, r24
		songStart=song+1;//skip first delta-time
    73ec:	90 93 e5 0c 	sts	0x0CE5, r25
    73f0:	80 93 e4 0c 	sts	0x0CE4, r24
		loopStart=song+1;
    73f4:	90 93 65 0d 	sts	0x0D65, r25
    73f8:	80 93 64 0d 	sts	0x0D64, r24
		nextDeltaTime=0;
    73fc:	10 92 60 0d 	sts	0x0D60, r1
    7400:	10 92 5f 0d 	sts	0x0D5F, r1
		currDeltaTime=0;
    7404:	10 92 5a 0d 	sts	0x0D5A, r1
    7408:	10 92 59 0d 	sts	0x0D59, r1
		songSpeed=0;
    740c:	10 92 61 0d 	sts	0x0D61, r1

		lastStatus=0;
    7410:	10 92 5d 0d 	sts	0x0D5D, r1
		playSong=true;
    7414:	81 e0       	ldi	r24, 0x01	; 1
    7416:	80 93 b6 0c 	sts	0x0CB6, r24
    741a:	08 95       	ret

0000741c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    741c:	e6 ee       	ldi	r30, 0xE6	; 230
    741e:	fc e0       	ldi	r31, 0x0C	; 12
    7420:	8a ef       	ldi	r24, 0xFA	; 250
    7422:	87 87       	std	Z+15, r24	; 0x0f
    7424:	86 a3       	std	Z+38, r24	; 0x26
    7426:	80 93 23 0d 	sts	0x0D23, r24
    742a:	80 93 3a 0d 	sts	0x0D3A, r24
    742e:	80 93 51 0d 	sts	0x0D51, r24
	}

	playSong=false;
    7432:	10 92 b6 0c 	sts	0x0CB6, r1
    7436:	08 95       	ret

00007438 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7438:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    743a:	ed 91       	ld	r30, X+
    743c:	fc 91       	ld	r31, X
    743e:	11 97       	sbiw	r26, 0x01	; 1
    7440:	9f 01       	movw	r18, r30
    7442:	2f 5f       	subi	r18, 0xFF	; 255
    7444:	3f 4f       	sbci	r19, 0xFF	; 255
    7446:	11 96       	adiw	r26, 0x01	; 1
    7448:	3c 93       	st	X, r19
    744a:	2e 93       	st	-X, r18
    744c:	e4 91       	lpm	r30, Z
    744e:	e7 fd       	sbrc	r30, 7
    7450:	03 c0       	rjmp	.+6      	; 0x7458 <ReadVarLen+0x20>
    7452:	8e 2f       	mov	r24, r30
    7454:	90 e0       	ldi	r25, 0x00	; 0
    7456:	08 95       	ret
    {
       value &= 0x7F;
    7458:	ef 77       	andi	r30, 0x7F	; 127
    745a:	8e 2f       	mov	r24, r30
    745c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    745e:	96 95       	lsr	r25
    7460:	98 2f       	mov	r25, r24
    7462:	88 27       	eor	r24, r24
    7464:	97 95       	ror	r25
    7466:	87 95       	ror	r24
    7468:	2f 5f       	subi	r18, 0xFF	; 255
    746a:	3f 4f       	sbci	r19, 0xFF	; 255
    746c:	f9 01       	movw	r30, r18
    746e:	31 97       	sbiw	r30, 0x01	; 1
    7470:	e4 91       	lpm	r30, Z
    7472:	4e 2f       	mov	r20, r30
    7474:	4f 77       	andi	r20, 0x7F	; 127
    7476:	84 0f       	add	r24, r20
    7478:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    747a:	e7 fd       	sbrc	r30, 7
    747c:	f0 cf       	rjmp	.-32     	; 0x745e <ReadVarLen+0x26>
    747e:	2d 93       	st	X+, r18
    7480:	3c 93       	st	X, r19
    }


    return value;
}
    7482:	08 95       	ret

00007484 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7484:	ef 92       	push	r14
    7486:	ff 92       	push	r15
    7488:	0f 93       	push	r16
    748a:	1f 93       	push	r17
    748c:	cf 93       	push	r28
    748e:	df 93       	push	r29
    7490:	1f 92       	push	r1
    7492:	cd b7       	in	r28, 0x3d	; 61
    7494:	de b7       	in	r29, 0x3e	; 62
    7496:	7c 01       	movw	r14, r24
    7498:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    749a:	fc 01       	movw	r30, r24
    749c:	80 81       	ld	r24, Z
    749e:	08 2f       	mov	r16, r24
    74a0:	00 1f       	adc	r16, r16
    74a2:	00 27       	eor	r16, r16
    74a4:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    74a6:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    74a8:	9f ef       	ldi	r25, 0xFF	; 255
    74aa:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    74ac:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    74ae:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    74b0:	87 7b       	andi	r24, 0xB7	; 183
    74b2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    74b4:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    74b6:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    74b8:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    74ba:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    74bc:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    74be:	82 81       	ldd	r24, Z+2	; 0x02
    74c0:	83 30       	cpi	r24, 0x03	; 3
    74c2:	69 f4       	brne	.+26     	; 0x74de <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    74c4:	01 11       	cpse	r16, r1
    74c6:	01 c0       	rjmp	.+2      	; 0x74ca <TriggerCommon+0x46>
    74c8:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	91 e0       	ldi	r25, 0x01	; 1
    74ce:	90 93 cd 0c 	sts	0x0CCD, r25
    74d2:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    74d6:	81 e0       	ldi	r24, 0x01	; 1
    74d8:	80 93 cb 0c 	sts	0x0CCB, r24
    74dc:	39 c0       	rjmp	.+114    	; 0x7550 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    74de:	84 30       	cpi	r24, 0x04	; 4
    74e0:	69 f5       	brne	.+90     	; 0x753c <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    74e2:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    74e6:	80 91 5b 0d 	lds	r24, 0x0D5B
    74ea:	90 91 5c 0d 	lds	r25, 0x0D5C
    74ee:	f9 e0       	ldi	r31, 0x09	; 9
    74f0:	6f 9f       	mul	r22, r31
    74f2:	80 0d       	add	r24, r0
    74f4:	91 1d       	adc	r25, r1
    74f6:	11 24       	eor	r1, r1
    74f8:	fc 01       	movw	r30, r24
    74fa:	31 96       	adiw	r30, 0x01	; 1
    74fc:	a5 91       	lpm	r26, Z+
    74fe:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    7500:	b0 93 d5 0c 	sts	0x0CD5, r27
    7504:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7508:	ac 01       	movw	r20, r24
    750a:	49 5f       	subi	r20, 0xF9	; 249
    750c:	5f 4f       	sbci	r21, 0xFF	; 255
    750e:	fa 01       	movw	r30, r20
    7510:	65 91       	lpm	r22, Z+
    7512:	74 91       	lpm	r23, Z
    7514:	05 96       	adiw	r24, 0x05	; 5
    7516:	fc 01       	movw	r30, r24
    7518:	85 91       	lpm	r24, Z+
    751a:	94 91       	lpm	r25, Z
    751c:	68 1b       	sub	r22, r24
    751e:	79 0b       	sbc	r23, r25
    7520:	70 93 d7 0c 	sts	0x0CD7, r23
    7524:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7528:	fa 01       	movw	r30, r20
    752a:	85 91       	lpm	r24, Z+
    752c:	94 91       	lpm	r25, Z
    752e:	a8 0f       	add	r26, r24
    7530:	b9 1f       	adc	r27, r25
    7532:	b0 93 d9 0c 	sts	0x0CD9, r27
    7536:	a0 93 d8 0c 	sts	0x0CD8, r26
    753a:	05 c0       	rjmp	.+10     	; 0x7546 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    753c:	60 e0       	ldi	r22, 0x00	; 0
    753e:	29 83       	std	Y+1, r18	; 0x01
    7540:	0e 94 91 3d 	call	0x7b22	; 0x7b22 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7544:	29 81       	ldd	r18, Y+1	; 0x01
    7546:	62 2f       	mov	r22, r18
    7548:	f7 01       	movw	r30, r14
    754a:	82 81       	ldd	r24, Z+2	; 0x02
    754c:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7550:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7552:	00 23       	and	r16, r16
    7554:	11 f0       	breq	.+4      	; 0x755a <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    7556:	11 8b       	std	Z+17, r17	; 0x11
    7558:	01 c0       	rjmp	.+2      	; 0x755c <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    755a:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    755c:	e0 91 5b 0d 	lds	r30, 0x0D5B
    7560:	f0 91 5c 0d 	lds	r31, 0x0D5C
    7564:	39 e0       	ldi	r19, 0x09	; 9
    7566:	13 9f       	mul	r17, r19
    7568:	e0 0d       	add	r30, r0
    756a:	f1 1d       	adc	r31, r1
    756c:	11 24       	eor	r1, r1
    756e:	33 96       	adiw	r30, 0x03	; 3
    7570:	85 91       	lpm	r24, Z+
    7572:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7574:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7576:	00 97       	sbiw	r24, 0x00	; 0
    7578:	19 f4       	brne	.+6      	; 0x7580 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    757a:	16 8a       	std	Z+22, r1	; 0x16
    757c:	15 8a       	std	Z+21, r1	; 0x15
    757e:	08 c0       	rjmp	.+16     	; 0x7590 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    7580:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7582:	fc 01       	movw	r30, r24
    7584:	24 91       	lpm	r18, Z
    7586:	f7 01       	movw	r30, r14
    7588:	22 8b       	std	Z+18, r18	; 0x12
    758a:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    758c:	96 8b       	std	Z+22, r25	; 0x16
    758e:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7590:	0f 90       	pop	r0
    7592:	df 91       	pop	r29
    7594:	cf 91       	pop	r28
    7596:	1f 91       	pop	r17
    7598:	0f 91       	pop	r16
    759a:	ff 90       	pop	r15
    759c:	ef 90       	pop	r14
    759e:	08 95       	ret

000075a0 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    75a0:	cf 93       	push	r28
    75a2:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    75a4:	e0 91 5b 0d 	lds	r30, 0x0D5B
    75a8:	f0 91 5c 0d 	lds	r31, 0x0D5C
    75ac:	99 e0       	ldi	r25, 0x09	; 9
    75ae:	89 9f       	mul	r24, r25
    75b0:	e0 0d       	add	r30, r0
    75b2:	f1 1d       	adc	r31, r1
    75b4:	11 24       	eor	r1, r1
    75b6:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    75b8:	e1 30       	cpi	r30, 0x01	; 1
    75ba:	e9 f0       	breq	.+58     	; 0x75f6 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    75bc:	e2 30       	cpi	r30, 0x02	; 2
    75be:	e9 f0       	breq	.+58     	; 0x75fa <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    75c0:	20 91 fd 0c 	lds	r18, 0x0CFD
    75c4:	27 ff       	sbrs	r18, 7
    75c6:	1d c0       	rjmp	.+58     	; 0x7602 <TriggerFx+0x62>
    75c8:	20 91 0e 0d 	lds	r18, 0x0D0E
    75cc:	28 13       	cpse	r18, r24
    75ce:	02 c0       	rjmp	.+4      	; 0x75d4 <TriggerFx+0x34>
    75d0:	41 11       	cpse	r20, r1
    75d2:	17 c0       	rjmp	.+46     	; 0x7602 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    75d4:	20 91 14 0d 	lds	r18, 0x0D14
    75d8:	27 ff       	sbrs	r18, 7
    75da:	11 c0       	rjmp	.+34     	; 0x75fe <TriggerFx+0x5e>
    75dc:	20 91 25 0d 	lds	r18, 0x0D25
    75e0:	28 13       	cpse	r18, r24
    75e2:	02 c0       	rjmp	.+4      	; 0x75e8 <TriggerFx+0x48>
    75e4:	41 11       	cpse	r20, r1
    75e6:	0b c0       	rjmp	.+22     	; 0x75fe <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    75e8:	20 91 11 0d 	lds	r18, 0x0D11
    75ec:	90 91 28 0d 	lds	r25, 0x0D28
    75f0:	92 17       	cp	r25, r18
    75f2:	28 f4       	brcc	.+10     	; 0x75fe <TriggerFx+0x5e>
    75f4:	06 c0       	rjmp	.+12     	; 0x7602 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    75f6:	c3 e0       	ldi	r28, 0x03	; 3
    75f8:	05 c0       	rjmp	.+10     	; 0x7604 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    75fa:	c4 e0       	ldi	r28, 0x04	; 4
    75fc:	03 c0       	rjmp	.+6      	; 0x7604 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    75fe:	c2 e0       	ldi	r28, 0x02	; 2
    7600:	01 c0       	rjmp	.+2      	; 0x7604 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7602:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7604:	97 e1       	ldi	r25, 0x17	; 23
    7606:	c9 9f       	mul	r28, r25
    7608:	e0 01       	movw	r28, r0
    760a:	11 24       	eor	r1, r1
    760c:	ca 51       	subi	r28, 0x1A	; 26
    760e:	d3 4f       	sbci	r29, 0xF3	; 243
    7610:	90 e8       	ldi	r25, 0x80	; 128
    7612:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7614:	1e 8a       	std	Y+22, r1	; 0x16
    7616:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7618:	20 e5       	ldi	r18, 0x50	; 80
    761a:	46 2f       	mov	r20, r22
    761c:	68 2f       	mov	r22, r24
    761e:	ce 01       	movw	r24, r28
    7620:	0e 94 42 3a 	call	0x7484	; 0x7484 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7624:	88 81       	ld	r24, Y
    7626:	80 62       	ori	r24, 0x20	; 32
    7628:	88 83       	st	Y, r24
}
    762a:	df 91       	pop	r29
    762c:	cf 91       	pop	r28
    762e:	08 95       	ret

00007630 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7630:	cf 93       	push	r28
    7632:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7634:	a8 2f       	mov	r26, r24
    7636:	b0 e0       	ldi	r27, 0x00	; 0
    7638:	97 e1       	ldi	r25, 0x17	; 23
    763a:	89 9f       	mul	r24, r25
    763c:	f0 01       	movw	r30, r0
    763e:	11 24       	eor	r1, r1
    7640:	ea 51       	subi	r30, 0x1A	; 26
    7642:	f3 4f       	sbci	r31, 0xF3	; 243
    7644:	80 81       	ld	r24, Z
    7646:	85 ff       	sbrs	r24, 5
    7648:	02 c0       	rjmp	.+4      	; 0x764e <TriggerNote+0x1e>
    764a:	87 fd       	sbrc	r24, 7
    764c:	2e c0       	rjmp	.+92     	; 0x76aa <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    764e:	21 11       	cpse	r18, r1
    7650:	18 c0       	rjmp	.+48     	; 0x7682 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7652:	97 e1       	ldi	r25, 0x17	; 23
    7654:	9a 9f       	mul	r25, r26
    7656:	f0 01       	movw	r30, r0
    7658:	9b 9f       	mul	r25, r27
    765a:	f0 0d       	add	r31, r0
    765c:	11 24       	eor	r1, r1
    765e:	ea 51       	subi	r30, 0x1A	; 26
    7660:	f3 4f       	sbci	r31, 0xF3	; 243
    7662:	97 85       	ldd	r25, Z+15	; 0x0f
    7664:	91 11       	cpse	r25, r1
    7666:	02 c0       	rjmp	.+4      	; 0x766c <TriggerNote+0x3c>
    7668:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    766a:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    766c:	97 e1       	ldi	r25, 0x17	; 23
    766e:	9a 9f       	mul	r25, r26
    7670:	f0 01       	movw	r30, r0
    7672:	9b 9f       	mul	r25, r27
    7674:	f0 0d       	add	r31, r0
    7676:	11 24       	eor	r1, r1
    7678:	ea 51       	subi	r30, 0x1A	; 26
    767a:	f3 4f       	sbci	r31, 0xF3	; 243
    767c:	8f 7b       	andi	r24, 0xBF	; 191
    767e:	80 83       	st	Z, r24
    7680:	14 c0       	rjmp	.+40     	; 0x76aa <TriggerNote+0x7a>
    7682:	82 2f       	mov	r24, r18
    7684:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7686:	97 e1       	ldi	r25, 0x17	; 23
    7688:	9a 9f       	mul	r25, r26
    768a:	e0 01       	movw	r28, r0
    768c:	9b 9f       	mul	r25, r27
    768e:	d0 0d       	add	r29, r0
    7690:	11 24       	eor	r1, r1
    7692:	ca 51       	subi	r28, 0x1A	; 26
    7694:	d3 4f       	sbci	r29, 0xF3	; 243
    7696:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7698:	1e 8a       	std	Y+22, r1	; 0x16
    769a:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    769c:	48 2f       	mov	r20, r24
    769e:	ce 01       	movw	r24, r28
    76a0:	0e 94 42 3a 	call	0x7484	; 0x7484 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    76a4:	88 81       	ld	r24, Y
    76a6:	80 62       	ori	r24, 0x20	; 32
    76a8:	88 83       	st	Y, r24
		}

	}
}
    76aa:	df 91       	pop	r29
    76ac:	cf 91       	pop	r28
    76ae:	08 95       	ret

000076b0 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    76b0:	6f 92       	push	r6
    76b2:	7f 92       	push	r7
    76b4:	8f 92       	push	r8
    76b6:	9f 92       	push	r9
    76b8:	af 92       	push	r10
    76ba:	bf 92       	push	r11
    76bc:	cf 92       	push	r12
    76be:	df 92       	push	r13
    76c0:	ef 92       	push	r14
    76c2:	ff 92       	push	r15
    76c4:	0f 93       	push	r16
    76c6:	1f 93       	push	r17
    76c8:	cf 93       	push	r28
    76ca:	df 93       	push	r29
    76cc:	c6 ee       	ldi	r28, 0xE6	; 230
    76ce:	dc e0       	ldi	r29, 0x0C	; 12
    76d0:	08 eb       	ldi	r16, 0xB8	; 184
    76d2:	1c e0       	ldi	r17, 0x0C	; 12
    76d4:	d8 01       	movw	r26, r16
    76d6:	9e 01       	movw	r18, r28
    76d8:	40 e0       	ldi	r20, 0x00	; 0
    76da:	50 e0       	ldi	r21, 0x00	; 0
    76dc:	ca 01       	movw	r24, r20
    76de:	8a 51       	subi	r24, 0x1A	; 26
    76e0:	93 4f       	sbci	r25, 0xF3	; 243
    76e2:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    76e4:	fc 01       	movw	r30, r24
    76e6:	87 85       	ldd	r24, Z+15	; 0x0f
    76e8:	88 23       	and	r24, r24
    76ea:	91 f0       	breq	.+36     	; 0x7710 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    76ec:	66 85       	ldd	r22, Z+14	; 0x0e
    76ee:	99 27       	eor	r25, r25
    76f0:	87 fd       	sbrc	r24, 7
    76f2:	90 95       	com	r25
    76f4:	86 0f       	add	r24, r22
    76f6:	91 1d       	adc	r25, r1
    76f8:	8f 3f       	cpi	r24, 0xFF	; 255
    76fa:	91 05       	cpc	r25, r1
    76fc:	19 f0       	breq	.+6      	; 0x7704 <ProcessMusic+0x54>
    76fe:	14 f0       	brlt	.+4      	; 0x7704 <ProcessMusic+0x54>
    7700:	8f ef       	ldi	r24, 0xFF	; 255
    7702:	90 e0       	ldi	r25, 0x00	; 0
    7704:	97 ff       	sbrs	r25, 7
    7706:	02 c0       	rjmp	.+4      	; 0x770c <ProcessMusic+0x5c>
    7708:	80 e0       	ldi	r24, 0x00	; 0
    770a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    770c:	f6 01       	movw	r30, r12
    770e:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7710:	f9 01       	movw	r30, r18
    7712:	f0 80       	ld	r15, Z
    7714:	f3 fe       	sbrs	r15, 3
    7716:	2a c0       	rjmp	.+84     	; 0x776c <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7718:	65 81       	ldd	r22, Z+5	; 0x05
    771a:	76 81       	ldd	r23, Z+6	; 0x06
    771c:	11 96       	adiw	r26, 0x01	; 1
    771e:	8d 91       	ld	r24, X+
    7720:	9c 91       	ld	r25, X
    7722:	12 97       	sbiw	r26, 0x02	; 2
    7724:	86 0f       	add	r24, r22
    7726:	97 1f       	adc	r25, r23
    7728:	12 96       	adiw	r26, 0x02	; 2
    772a:	9c 93       	st	X, r25
    772c:	8e 93       	st	-X, r24
    772e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7730:	f6 01       	movw	r30, r12
    7732:	e7 80       	ldd	r14, Z+7	; 0x07
    7734:	ee 2d       	mov	r30, r14
    7736:	f0 e0       	ldi	r31, 0x00	; 0
    7738:	ee 0f       	add	r30, r30
    773a:	ff 1f       	adc	r31, r31
    773c:	e8 5f       	subi	r30, 0xF8	; 248
    773e:	f3 48       	sbci	r31, 0x83	; 131
    7740:	c5 90       	lpm	r12, Z+
    7742:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7744:	16 16       	cp	r1, r22
    7746:	17 06       	cpc	r1, r23
    7748:	24 f4       	brge	.+8      	; 0x7752 <ProcessMusic+0xa2>
    774a:	8c 15       	cp	r24, r12
    774c:	9d 05       	cpc	r25, r13
    774e:	30 f4       	brcc	.+12     	; 0x775c <ProcessMusic+0xac>
    7750:	0d c0       	rjmp	.+26     	; 0x776c <ProcessMusic+0xbc>
    7752:	67 2b       	or	r22, r23
    7754:	59 f0       	breq	.+22     	; 0x776c <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7756:	c8 16       	cp	r12, r24
    7758:	d9 06       	cpc	r13, r25
    775a:	40 f0       	brcs	.+16     	; 0x776c <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    775c:	12 96       	adiw	r26, 0x02	; 2
    775e:	dc 92       	st	X, r13
    7760:	ce 92       	st	-X, r12
    7762:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7764:	8f 2d       	mov	r24, r15
    7766:	87 7f       	andi	r24, 0xF7	; 247
    7768:	f9 01       	movw	r30, r18
    776a:	80 83       	st	Z, r24
    776c:	49 5e       	subi	r20, 0xE9	; 233
    776e:	5f 4f       	sbci	r21, 0xFF	; 255
    7770:	29 5e       	subi	r18, 0xE9	; 233
    7772:	3f 4f       	sbci	r19, 0xFF	; 255
    7774:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7776:	43 37       	cpi	r20, 0x73	; 115
    7778:	51 05       	cpc	r21, r1
    777a:	09 f0       	breq	.+2      	; 0x777e <ProcessMusic+0xce>
    777c:	af cf       	rjmp	.-162    	; 0x76dc <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    777e:	80 91 b6 0c 	lds	r24, 0x0CB6
    7782:	88 23       	and	r24, r24
    7784:	09 f4       	brne	.+2      	; 0x7788 <ProcessMusic+0xd8>
    7786:	cc c0       	rjmp	.+408    	; 0x7920 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7788:	57 e1       	ldi	r21, 0x17	; 23
    778a:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    778c:	80 91 59 0d 	lds	r24, 0x0D59
    7790:	90 91 5a 0d 	lds	r25, 0x0D5A
    7794:	20 91 5f 0d 	lds	r18, 0x0D5F
    7798:	30 91 60 0d 	lds	r19, 0x0D60
    779c:	82 17       	cp	r24, r18
    779e:	93 07       	cpc	r25, r19
    77a0:	09 f0       	breq	.+2      	; 0x77a4 <ProcessMusic+0xf4>
    77a2:	b9 c0       	rjmp	.+370    	; 0x7916 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    77a4:	20 91 62 0d 	lds	r18, 0x0D62
    77a8:	30 91 63 0d 	lds	r19, 0x0D63
    77ac:	b9 01       	movw	r22, r18
    77ae:	6f 5f       	subi	r22, 0xFF	; 255
    77b0:	7f 4f       	sbci	r23, 0xFF	; 255
    77b2:	70 93 63 0d 	sts	0x0D63, r23
    77b6:	60 93 62 0d 	sts	0x0D62, r22
    77ba:	f9 01       	movw	r30, r18
    77bc:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    77be:	4f 3f       	cpi	r20, 0xFF	; 255
    77c0:	79 f5       	brne	.+94     	; 0x7820 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    77c2:	a9 01       	movw	r20, r18
    77c4:	4e 5f       	subi	r20, 0xFE	; 254
    77c6:	5f 4f       	sbci	r21, 0xFF	; 255
    77c8:	50 93 63 0d 	sts	0x0D63, r21
    77cc:	40 93 62 0d 	sts	0x0D62, r20
    77d0:	fb 01       	movw	r30, r22
    77d2:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    77d4:	6f 32       	cpi	r22, 0x2F	; 47
    77d6:	19 f4       	brne	.+6      	; 0x77de <ProcessMusic+0x12e>
						playSong=false;
    77d8:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    77dc:	9c c0       	rjmp	.+312    	; 0x7916 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    77de:	66 30       	cpi	r22, 0x06	; 6
    77e0:	09 f0       	breq	.+2      	; 0x77e4 <ProcessMusic+0x134>
    77e2:	8c c0       	rjmp	.+280    	; 0x78fc <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    77e4:	fa 01       	movw	r30, r20
    77e6:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    77e8:	c9 01       	movw	r24, r18
    77ea:	04 96       	adiw	r24, 0x04	; 4
    77ec:	90 93 63 0d 	sts	0x0D63, r25
    77f0:	80 93 62 0d 	sts	0x0D62, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    77f4:	f9 01       	movw	r30, r18
    77f6:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    77f8:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    77fa:	e3 35       	cpi	r30, 0x53	; 83
    77fc:	29 f4       	brne	.+10     	; 0x7808 <ProcessMusic+0x158>
							loopStart=songPos;
    77fe:	90 93 65 0d 	sts	0x0D65, r25
    7802:	80 93 64 0d 	sts	0x0D64, r24
    7806:	7a c0       	rjmp	.+244    	; 0x78fc <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7808:	e5 34       	cpi	r30, 0x45	; 69
    780a:	09 f0       	breq	.+2      	; 0x780e <ProcessMusic+0x15e>
    780c:	77 c0       	rjmp	.+238    	; 0x78fc <ProcessMusic+0x24c>
							songPos=loopStart;
    780e:	80 91 64 0d 	lds	r24, 0x0D64
    7812:	90 91 65 0d 	lds	r25, 0x0D65
    7816:	90 93 63 0d 	sts	0x0D63, r25
    781a:	80 93 62 0d 	sts	0x0D62, r24
    781e:	6e c0       	rjmp	.+220    	; 0x78fc <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7820:	47 fd       	sbrc	r20, 7
    7822:	40 93 5d 0d 	sts	0x0D5D, r20
					channel=lastStatus&0x0f;
    7826:	90 91 5d 0d 	lds	r25, 0x0D5D
    782a:	89 2f       	mov	r24, r25
    782c:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    782e:	47 ff       	sbrs	r20, 7
    7830:	08 c0       	rjmp	.+16     	; 0x7842 <ProcessMusic+0x192>
    7832:	2e 5f       	subi	r18, 0xFE	; 254
    7834:	3f 4f       	sbci	r19, 0xFF	; 255
    7836:	30 93 63 0d 	sts	0x0D63, r19
    783a:	20 93 62 0d 	sts	0x0D62, r18
    783e:	fb 01       	movw	r30, r22
    7840:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7842:	90 7f       	andi	r25, 0xF0	; 240
    7844:	90 3b       	cpi	r25, 0xB0	; 176
    7846:	e1 f0       	breq	.+56     	; 0x7880 <ProcessMusic+0x1d0>
    7848:	90 3c       	cpi	r25, 0xC0	; 192
    784a:	09 f4       	brne	.+2      	; 0x784e <ProcessMusic+0x19e>
    784c:	51 c0       	rjmp	.+162    	; 0x78f0 <ProcessMusic+0x240>
    784e:	90 39       	cpi	r25, 0x90	; 144
    7850:	09 f0       	breq	.+2      	; 0x7854 <ProcessMusic+0x1a4>
    7852:	54 c0       	rjmp	.+168    	; 0x78fc <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7854:	e0 91 62 0d 	lds	r30, 0x0D62
    7858:	f0 91 63 0d 	lds	r31, 0x0D63
    785c:	9f 01       	movw	r18, r30
    785e:	2f 5f       	subi	r18, 0xFF	; 255
    7860:	3f 4f       	sbci	r19, 0xFF	; 255
    7862:	30 93 63 0d 	sts	0x0D63, r19
    7866:	20 93 62 0d 	sts	0x0D62, r18
    786a:	24 91       	lpm	r18, Z
    786c:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    786e:	f8 9e       	mul	r15, r24
    7870:	f0 01       	movw	r30, r0
    7872:	11 24       	eor	r1, r1
    7874:	ea 51       	subi	r30, 0x1A	; 26
    7876:	f3 4f       	sbci	r31, 0xF3	; 243
    7878:	60 89       	ldd	r22, Z+16	; 0x10
    787a:	0e 94 18 3b 	call	0x7630	; 0x7630 <TriggerNote>
    787e:	3e c0       	rjmp	.+124    	; 0x78fc <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7880:	e0 91 62 0d 	lds	r30, 0x0D62
    7884:	f0 91 63 0d 	lds	r31, 0x0D63
    7888:	9f 01       	movw	r18, r30
    788a:	2f 5f       	subi	r18, 0xFF	; 255
    788c:	3f 4f       	sbci	r19, 0xFF	; 255
    788e:	30 93 63 0d 	sts	0x0D63, r19
    7892:	20 93 62 0d 	sts	0x0D62, r18
    7896:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7898:	47 30       	cpi	r20, 0x07	; 7
    789a:	49 f4       	brne	.+18     	; 0x78ae <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    789c:	f8 9e       	mul	r15, r24
    789e:	d0 01       	movw	r26, r0
    78a0:	11 24       	eor	r1, r1
    78a2:	aa 51       	subi	r26, 0x1A	; 26
    78a4:	b3 4f       	sbci	r27, 0xF3	; 243
    78a6:	ee 0f       	add	r30, r30
    78a8:	1c 96       	adiw	r26, 0x0c	; 12
    78aa:	ec 93       	st	X, r30
    78ac:	27 c0       	rjmp	.+78     	; 0x78fc <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    78ae:	4b 30       	cpi	r20, 0x0B	; 11
    78b0:	49 f4       	brne	.+18     	; 0x78c4 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    78b2:	f8 9e       	mul	r15, r24
    78b4:	d0 01       	movw	r26, r0
    78b6:	11 24       	eor	r1, r1
    78b8:	aa 51       	subi	r26, 0x1A	; 26
    78ba:	b3 4f       	sbci	r27, 0xF3	; 243
    78bc:	ee 0f       	add	r30, r30
    78be:	13 96       	adiw	r26, 0x03	; 3
    78c0:	ec 93       	st	X, r30
    78c2:	1c c0       	rjmp	.+56     	; 0x78fc <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    78c4:	4c 35       	cpi	r20, 0x5C	; 92
    78c6:	49 f4       	brne	.+18     	; 0x78da <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    78c8:	f8 9e       	mul	r15, r24
    78ca:	d0 01       	movw	r26, r0
    78cc:	11 24       	eor	r1, r1
    78ce:	aa 51       	subi	r26, 0x1A	; 26
    78d0:	b3 4f       	sbci	r27, 0xF3	; 243
    78d2:	ee 0f       	add	r30, r30
    78d4:	1a 96       	adiw	r26, 0x0a	; 10
    78d6:	ec 93       	st	X, r30
    78d8:	11 c0       	rjmp	.+34     	; 0x78fc <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    78da:	44 36       	cpi	r20, 0x64	; 100
    78dc:	79 f4       	brne	.+30     	; 0x78fc <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    78de:	f8 9e       	mul	r15, r24
    78e0:	d0 01       	movw	r26, r0
    78e2:	11 24       	eor	r1, r1
    78e4:	aa 51       	subi	r26, 0x1A	; 26
    78e6:	b3 4f       	sbci	r27, 0xF3	; 243
    78e8:	ee 0f       	add	r30, r30
    78ea:	1b 96       	adiw	r26, 0x0b	; 11
    78ec:	ec 93       	st	X, r30
    78ee:	06 c0       	rjmp	.+12     	; 0x78fc <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    78f0:	f8 9e       	mul	r15, r24
    78f2:	f0 01       	movw	r30, r0
    78f4:	11 24       	eor	r1, r1
    78f6:	ea 51       	subi	r30, 0x1A	; 26
    78f8:	f3 4f       	sbci	r31, 0xF3	; 243
    78fa:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    78fc:	82 e6       	ldi	r24, 0x62	; 98
    78fe:	9d e0       	ldi	r25, 0x0D	; 13
    7900:	0e 94 1c 3a 	call	0x7438	; 0x7438 <ReadVarLen>
    7904:	90 93 60 0d 	sts	0x0D60, r25
    7908:	80 93 5f 0d 	sts	0x0D5F, r24
				currDeltaTime=0;
    790c:	10 92 5a 0d 	sts	0x0D5A, r1
    7910:	10 92 59 0d 	sts	0x0D59, r1
    7914:	3b cf       	rjmp	.-394    	; 0x778c <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7916:	01 96       	adiw	r24, 0x01	; 1
    7918:	90 93 5a 0d 	sts	0x0D5A, r25
    791c:	80 93 59 0d 	sts	0x0D59, r24
    7920:	9f ee       	ldi	r25, 0xEF	; 239
    7922:	a9 2e       	mov	r10, r25
    7924:	9c e0       	ldi	r25, 0x0C	; 12
    7926:	b9 2e       	mov	r11, r25
    7928:	29 ef       	ldi	r18, 0xF9	; 249
    792a:	c2 2e       	mov	r12, r18
    792c:	2c e0       	ldi	r18, 0x0C	; 12
    792e:	d2 2e       	mov	r13, r18
    7930:	3a ef       	ldi	r19, 0xFA	; 250
    7932:	e3 2e       	mov	r14, r19
    7934:	3c e0       	ldi	r19, 0x0C	; 12
    7936:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7938:	66 24       	eor	r6, r6
    793a:	6a 94       	dec	r6
    793c:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    793e:	88 81       	ld	r24, Y
    7940:	85 ff       	sbrs	r24, 5
    7942:	42 c0       	rjmp	.+132    	; 0x79c8 <ProcessMusic+0x318>
    7944:	2d 89       	ldd	r18, Y+21	; 0x15
    7946:	3e 89       	ldd	r19, Y+22	; 0x16
    7948:	23 2b       	or	r18, r19
    794a:	09 f4       	brne	.+2      	; 0x794e <ProcessMusic+0x29e>
    794c:	3d c0       	rjmp	.+122    	; 0x79c8 <ProcessMusic+0x318>
    794e:	86 fd       	sbrc	r24, 6
    7950:	3b c0       	rjmp	.+118    	; 0x79c8 <ProcessMusic+0x318>
    7952:	47 01       	movw	r8, r14
    7954:	f2 e0       	ldi	r31, 0x02	; 2
    7956:	8f 1a       	sub	r8, r31
    7958:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    795a:	d6 01       	movw	r26, r12
    795c:	9c 91       	ld	r25, X
    795e:	f4 01       	movw	r30, r8
    7960:	80 81       	ld	r24, Z
    7962:	98 13       	cpse	r25, r24
    7964:	2e c0       	rjmp	.+92     	; 0x79c2 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7966:	ed 89       	ldd	r30, Y+21	; 0x15
    7968:	fe 89       	ldd	r31, Y+22	; 0x16
    796a:	bf 01       	movw	r22, r30
    796c:	6f 5f       	subi	r22, 0xFF	; 255
    796e:	7f 4f       	sbci	r23, 0xFF	; 255
    7970:	7e 8b       	std	Y+22, r23	; 0x16
    7972:	6d 8b       	std	Y+21, r22	; 0x15
    7974:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7976:	8f 3f       	cpi	r24, 0xFF	; 255
    7978:	31 f4       	brne	.+12     	; 0x7986 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    797a:	88 81       	ld	r24, Y
    797c:	8f 77       	andi	r24, 0x7F	; 127
    797e:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7980:	1e 8a       	std	Y+22, r1	; 0x16
    7982:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7984:	1e c0       	rjmp	.+60     	; 0x79c2 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7986:	9f 01       	movw	r18, r30
    7988:	2e 5f       	subi	r18, 0xFE	; 254
    798a:	3f 4f       	sbci	r19, 0xFF	; 255
    798c:	3e 8b       	std	Y+22, r19	; 0x16
    798e:	2d 8b       	std	Y+21, r18	; 0x15
    7990:	fb 01       	movw	r30, r22
    7992:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7994:	e8 2f       	mov	r30, r24
    7996:	f0 e0       	ldi	r31, 0x00	; 0
    7998:	ee 0f       	add	r30, r30
    799a:	ff 1f       	adc	r31, r31
    799c:	e2 54       	subi	r30, 0x42	; 66
    799e:	ff 4f       	sbci	r31, 0xFF	; 255
    79a0:	25 91       	lpm	r18, Z+
    79a2:	34 91       	lpm	r19, Z
    79a4:	ce 01       	movw	r24, r28
    79a6:	f9 01       	movw	r30, r18
    79a8:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    79aa:	ed 89       	ldd	r30, Y+21	; 0x15
    79ac:	fe 89       	ldd	r31, Y+22	; 0x16
    79ae:	cf 01       	movw	r24, r30
    79b0:	01 96       	adiw	r24, 0x01	; 1
    79b2:	9e 8b       	std	Y+22, r25	; 0x16
    79b4:	8d 8b       	std	Y+21, r24	; 0x15
    79b6:	e4 91       	lpm	r30, Z
    79b8:	d4 01       	movw	r26, r8
    79ba:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    79bc:	f6 01       	movw	r30, r12
    79be:	10 82       	st	Z, r1
    79c0:	cc cf       	rjmp	.-104    	; 0x795a <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    79c2:	9f 5f       	subi	r25, 0xFF	; 255
    79c4:	d6 01       	movw	r26, r12
    79c6:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    79c8:	98 81       	ld	r25, Y
    79ca:	95 ff       	sbrs	r25, 5
    79cc:	6c c0       	rjmp	.+216    	; 0x7aa6 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    79ce:	f7 01       	movw	r30, r14
    79d0:	80 81       	ld	r24, Z
    79d2:	8f 3f       	cpi	r24, 0xFF	; 255
    79d4:	11 f0       	breq	.+4      	; 0x79da <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    79d6:	8f 5f       	subi	r24, 0xFF	; 255
    79d8:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    79da:	97 fd       	sbrc	r25, 7
    79dc:	04 c0       	rjmp	.+8      	; 0x79e6 <ProcessMusic+0x336>
    79de:	f7 01       	movw	r30, r14
    79e0:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    79e2:	90 81       	ld	r25, Z
    79e4:	01 c0       	rjmp	.+2      	; 0x79e8 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    79e6:	9f ef       	ldi	r25, 0xFF	; 255
    79e8:	f7 01       	movw	r30, r14
    79ea:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    79ec:	80 81       	ld	r24, Z
    79ee:	88 23       	and	r24, r24
    79f0:	09 f4       	brne	.+2      	; 0x79f4 <ProcessMusic+0x344>
    79f2:	4e c0       	rjmp	.+156    	; 0x7a90 <ProcessMusic+0x3e0>
    79f4:	31 96       	adiw	r30, 0x01	; 1
    79f6:	50 81       	ld	r21, Z
    79f8:	55 23       	and	r21, r21
    79fa:	09 f4       	brne	.+2      	; 0x79fe <ProcessMusic+0x34e>
    79fc:	49 c0       	rjmp	.+146    	; 0x7a90 <ProcessMusic+0x3e0>
    79fe:	99 23       	and	r25, r25
    7a00:	09 f4       	brne	.+2      	; 0x7a04 <ProcessMusic+0x354>
    7a02:	46 c0       	rjmp	.+140    	; 0x7a90 <ProcessMusic+0x3e0>
    7a04:	40 91 5e 0d 	lds	r20, 0x0D5E
    7a08:	44 23       	and	r20, r20
    7a0a:	09 f4       	brne	.+2      	; 0x7a0e <ProcessMusic+0x35e>
    7a0c:	41 c0       	rjmp	.+130    	; 0x7a90 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7a0e:	89 9f       	mul	r24, r25
    7a10:	c0 01       	movw	r24, r0
    7a12:	11 24       	eor	r1, r1
    7a14:	93 95       	inc	r25
				uVol>>=8;
    7a16:	89 2f       	mov	r24, r25
    7a18:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7a1a:	58 9f       	mul	r21, r24
    7a1c:	90 01       	movw	r18, r0
    7a1e:	59 9f       	mul	r21, r25
    7a20:	30 0d       	add	r19, r0
    7a22:	11 24       	eor	r1, r1
    7a24:	c9 01       	movw	r24, r18
    7a26:	93 95       	inc	r25
				uVol>>=8;
    7a28:	89 2f       	mov	r24, r25
    7a2a:	99 27       	eor	r25, r25
    7a2c:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7a2e:	50 81       	ld	r21, Z
    7a30:	58 9f       	mul	r21, r24
    7a32:	90 01       	movw	r18, r0
    7a34:	59 9f       	mul	r21, r25
    7a36:	30 0d       	add	r19, r0
    7a38:	11 24       	eor	r1, r1
    7a3a:	33 95       	inc	r19
					uVol>>=8;
    7a3c:	23 2f       	mov	r18, r19
    7a3e:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7a40:	42 9f       	mul	r20, r18
    7a42:	c0 01       	movw	r24, r0
    7a44:	43 9f       	mul	r20, r19
    7a46:	90 0d       	add	r25, r0
    7a48:	11 24       	eor	r1, r1
    7a4a:	93 95       	inc	r25
				uVol>>=8;
    7a4c:	89 2f       	mov	r24, r25
    7a4e:	99 27       	eor	r25, r25
    7a50:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7a52:	20 81       	ld	r18, Z
    7a54:	22 23       	and	r18, r18
    7a56:	f1 f0       	breq	.+60     	; 0x7a94 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7a58:	d5 01       	movw	r26, r10
    7a5a:	ec 91       	ld	r30, X
    7a5c:	f0 e0       	ldi	r31, 0x00	; 0
    7a5e:	e0 50       	subi	r30, 0x00	; 0
    7a60:	f2 48       	sbci	r31, 0x82	; 130
    7a62:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7a64:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7a66:	2e 9f       	mul	r18, r30
    7a68:	f0 01       	movw	r30, r0
    7a6a:	11 24       	eor	r1, r1
    7a6c:	f3 95       	inc	r31
					tVol>>=8;
    7a6e:	ef 2f       	mov	r30, r31
    7a70:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7a72:	a3 01       	movw	r20, r6
    7a74:	4e 1b       	sub	r20, r30
    7a76:	5f 0b       	sbc	r21, r31
    7a78:	48 9f       	mul	r20, r24
    7a7a:	90 01       	movw	r18, r0
    7a7c:	49 9f       	mul	r20, r25
    7a7e:	30 0d       	add	r19, r0
    7a80:	58 9f       	mul	r21, r24
    7a82:	30 0d       	add	r19, r0
    7a84:	11 24       	eor	r1, r1
    7a86:	c9 01       	movw	r24, r18
    7a88:	93 95       	inc	r25
					uVol>>=8;
    7a8a:	89 2f       	mov	r24, r25
    7a8c:	99 27       	eor	r25, r25
    7a8e:	02 c0       	rjmp	.+4      	; 0x7a94 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7a90:	80 e0       	ldi	r24, 0x00	; 0
    7a92:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7a94:	f5 01       	movw	r30, r10
    7a96:	30 81       	ld	r19, Z
    7a98:	f7 01       	movw	r30, r14
    7a9a:	39 97       	sbiw	r30, 0x09	; 9
    7a9c:	20 81       	ld	r18, Z
    7a9e:	23 0f       	add	r18, r19
    7aa0:	d5 01       	movw	r26, r10
    7aa2:	2c 93       	st	X, r18
    7aa4:	02 c0       	rjmp	.+4      	; 0x7aaa <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7aa6:	80 e0       	ldi	r24, 0x00	; 0
    7aa8:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7aaa:	f8 01       	movw	r30, r16
    7aac:	80 83       	st	Z, r24
    7aae:	67 96       	adiw	r28, 0x17	; 23
    7ab0:	0a 5f       	subi	r16, 0xFA	; 250
    7ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    7ab4:	f7 e1       	ldi	r31, 0x17	; 23
    7ab6:	af 0e       	add	r10, r31
    7ab8:	b1 1c       	adc	r11, r1
    7aba:	87 e1       	ldi	r24, 0x17	; 23
    7abc:	c8 0e       	add	r12, r24
    7abe:	d1 1c       	adc	r13, r1
    7ac0:	97 e1       	ldi	r25, 0x17	; 23
    7ac2:	e9 0e       	add	r14, r25
    7ac4:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7ac6:	ad e0       	ldi	r26, 0x0D	; 13
    7ac8:	c9 35       	cpi	r28, 0x59	; 89
    7aca:	da 07       	cpc	r29, r26
    7acc:	09 f0       	breq	.+2      	; 0x7ad0 <ProcessMusic+0x420>
    7ace:	37 cf       	rjmp	.-402    	; 0x793e <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7ad0:	df 91       	pop	r29
    7ad2:	cf 91       	pop	r28
    7ad4:	1f 91       	pop	r17
    7ad6:	0f 91       	pop	r16
    7ad8:	ff 90       	pop	r15
    7ada:	ef 90       	pop	r14
    7adc:	df 90       	pop	r13
    7ade:	cf 90       	pop	r12
    7ae0:	bf 90       	pop	r11
    7ae2:	af 90       	pop	r10
    7ae4:	9f 90       	pop	r9
    7ae6:	8f 90       	pop	r8
    7ae8:	7f 90       	pop	r7
    7aea:	6f 90       	pop	r6
    7aec:	08 95       	ret

00007aee <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7aee:	80 93 5e 0d 	sts	0x0D5E, r24
    7af2:	08 95       	ret

00007af4 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7af4:	99 27       	eor	r25, r25
	clr r23
    7af6:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7af8:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7afa:	09 f4       	brne	.+2      	; 0x7afe <set_note_waves>
		ret
    7afc:	08 95       	ret

00007afe <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7afe:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7b00:	fc e7       	ldi	r31, 0x7C	; 124
	lsl r22
    7b02:	66 0f       	add	r22, r22
	rol r23
    7b04:	77 1f       	adc	r23, r23
	add ZL,r22
    7b06:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7b08:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7b0a:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7b0c:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7b0e:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    7b10:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b12:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7b14:	28 9f       	mul	r18, r24
	add ZL,r0
    7b16:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b18:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7b1a:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7b1c:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7b1e:	11 24       	eor	r1, r1
	

	ret
    7b20:	08 95       	ret

00007b22 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7b22:	99 27       	eor	r25, r25
	clr r23
    7b24:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7b26:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    7b28:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b2a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7b2c:	28 9f       	mul	r18, r24
	add ZL,r0
    7b2e:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b30:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7b32:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7b34:	31 f4       	brne	.+12     	; 0x7b42 <smw1>
	lds r22,tr4_params
    7b36:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    7b3a:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7b3c:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    7b40:	0b c0       	rjmp	.+22     	; 0x7b58 <esmw>

00007b42 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7b42:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7b44:	31 f4       	brne	.+12     	; 0x7b52 <smw2>
	lds r22,tr4_params
    7b46:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    7b4a:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7b4c:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    7b50:	03 c0       	rjmp	.+6      	; 0x7b58 <esmw>

00007b52 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7b52:	7e e7       	ldi	r23, 0x7E	; 126
	add r23,r22
    7b54:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7b56:	75 83       	std	Z+5, r23	; 0x05

00007b58 <esmw>:

esmw:
	clr r1	
    7b58:	11 24       	eor	r1, r1
	ret
    7b5a:	08 95       	ret
	...

00007c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7c02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    7c06:	08 95       	ret

00007c08 <steptable>:
    7c08:	22 00       	.word	0x0022	; ????
    7c0a:	24 00       	.word	0x0024	; ????
    7c0c:	26 00       	.word	0x0026	; ????
    7c0e:	28 00       	.word	0x0028	; ????
    7c10:	2b 00       	.word	0x002b	; ????
    7c12:	2d 00       	.word	0x002d	; ????
    7c14:	30 00       	.word	0x0030	; ????
    7c16:	33 00       	.word	0x0033	; ????
    7c18:	36 00       	.word	0x0036	; ????
    7c1a:	39 00       	.word	0x0039	; ????
    7c1c:	3d 00       	.word	0x003d	; ????
    7c1e:	40 00       	.word	0x0040	; ????
    7c20:	44 00       	.word	0x0044	; ????
    7c22:	48 00       	.word	0x0048	; ????
    7c24:	4c 00       	.word	0x004c	; ????
    7c26:	51 00       	.word	0x0051	; ????
    7c28:	56 00       	.word	0x0056	; ????
    7c2a:	5b 00       	.word	0x005b	; ????
    7c2c:	60 00       	.word	0x0060	; ????
    7c2e:	66 00       	.word	0x0066	; ????
    7c30:	6c 00       	.word	0x006c	; ????
    7c32:	73 00       	.word	0x0073	; ????
    7c34:	79 00       	.word	0x0079	; ????
    7c36:	81 00       	.word	0x0081	; ????
    7c38:	88 00       	.word	0x0088	; ????
    7c3a:	90 00       	.word	0x0090	; ????
    7c3c:	99 00       	.word	0x0099	; ????
    7c3e:	a2 00       	.word	0x00a2	; ????
    7c40:	ac 00       	.word	0x00ac	; ????
    7c42:	b6 00       	.word	0x00b6	; ????
    7c44:	c1 00       	.word	0x00c1	; ????
    7c46:	cc 00       	.word	0x00cc	; ????
    7c48:	d8 00       	.word	0x00d8	; ????
    7c4a:	e5 00       	.word	0x00e5	; ????
    7c4c:	f3 00       	.word	0x00f3	; ????
    7c4e:	01 01       	movw	r0, r2
    7c50:	10 01       	movw	r2, r0
    7c52:	21 01       	movw	r4, r2
    7c54:	32 01       	movw	r6, r4
    7c56:	44 01       	movw	r8, r8
    7c58:	57 01       	movw	r10, r14
    7c5a:	6c 01       	movw	r12, r24
    7c5c:	81 01       	movw	r16, r2
    7c5e:	98 01       	movw	r18, r16
    7c60:	b0 01       	movw	r22, r0
    7c62:	ca 01       	movw	r24, r20
    7c64:	e5 01       	movw	r28, r10
    7c66:	02 02       	muls	r16, r18
    7c68:	21 02       	muls	r18, r17
    7c6a:	41 02       	muls	r20, r17
    7c6c:	64 02       	muls	r22, r20
    7c6e:	88 02       	muls	r24, r24
    7c70:	ae 02       	muls	r26, r30
    7c72:	d7 02       	muls	r29, r23
    7c74:	03 03       	mulsu	r16, r19
    7c76:	30 03       	mulsu	r19, r16
    7c78:	61 03       	mulsu	r22, r17
    7c7a:	94 03       	fmuls	r17, r20
    7c7c:	cb 03       	fmulsu	r20, r19
    7c7e:	05 04       	cpc	r0, r5
    7c80:	42 04       	cpc	r4, r2
    7c82:	83 04       	cpc	r8, r3
    7c84:	c7 04       	cpc	r12, r7
    7c86:	10 05       	cpc	r17, r0
    7c88:	5d 05       	cpc	r21, r13
    7c8a:	af 05       	cpc	r26, r15
    7c8c:	05 06       	cpc	r0, r21
    7c8e:	61 06       	cpc	r6, r17
    7c90:	c2 06       	cpc	r12, r18
    7c92:	29 07       	cpc	r18, r25
    7c94:	96 07       	cpc	r25, r22
    7c96:	09 08       	sbc	r0, r9
    7c98:	83 08       	sbc	r8, r3
    7c9a:	05 09       	sbc	r16, r5
    7c9c:	8e 09       	sbc	r24, r14
    7c9e:	20 0a       	sbc	r2, r16
    7ca0:	ba 0a       	sbc	r11, r26
    7ca2:	5d 0b       	sbc	r21, r29
    7ca4:	0a 0c       	add	r0, r10
    7ca6:	c1 0c       	add	r12, r1
    7ca8:	84 0d       	add	r24, r4
    7caa:	51 0e       	add	r5, r17
    7cac:	2b 0f       	add	r18, r27
    7cae:	12 10       	cpse	r1, r2
    7cb0:	07 11       	cpse	r16, r7
    7cb2:	0a 12       	cpse	r0, r26
    7cb4:	1d 13       	cpse	r17, r29
    7cb6:	40 14       	cp	r4, r0
    7cb8:	74 15       	cp	r23, r4
    7cba:	ba 16       	cp	r11, r26
    7cbc:	14 18       	sub	r1, r4
    7cbe:	83 19       	sub	r24, r3
    7cc0:	07 1b       	sub	r16, r23
    7cc2:	a3 1c       	adc	r10, r3
    7cc4:	57 1e       	adc	r5, r23
    7cc6:	24 20       	and	r2, r4
    7cc8:	0e 22       	and	r0, r30
    7cca:	14 24       	eor	r1, r4
    7ccc:	39 26       	eor	r3, r25
    7cce:	7f 28       	or	r7, r15
    7cd0:	e8 2a       	or	r14, r24
    7cd2:	75 2d       	mov	r23, r5
    7cd4:	29 30       	cpi	r18, 0x09	; 9
    7cd6:	06 33       	cpi	r16, 0x36	; 54
    7cd8:	0f 36       	cpi	r16, 0x6F	; 111
    7cda:	45 39       	cpi	r20, 0x95	; 149
    7cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7cde:	49 40       	sbci	r20, 0x09	; 9
    7ce0:	1b 44       	sbci	r17, 0x4B	; 75
    7ce2:	28 48       	sbci	r18, 0x88	; 136
    7ce4:	73 4c       	sbci	r23, 0xC3	; 195
    7ce6:	fe 50       	subi	r31, 0x0E	; 14
    7ce8:	cf 55       	subi	r28, 0x5F	; 95
    7cea:	ea 5a       	subi	r30, 0xAA	; 170
    7cec:	51 60       	ori	r21, 0x01	; 1
    7cee:	0c 66       	ori	r16, 0x6C	; 108
    7cf0:	1d 6c       	ori	r17, 0xCD	; 205
    7cf2:	8b 72       	andi	r24, 0x2B	; 43
    7cf4:	5a 79       	andi	r21, 0x9A	; 154
    7cf6:	92 80       	ldd	r9, Z+2	; 0x02
    7cf8:	37 88       	ldd	r3, Z+23	; 0x17
    7cfa:	50 90 e5 98 	lds	r5, 0x98E5
    7cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7d00:	9f ab       	std	Y+55, r25	; 0x37
    7d02:	d3 b5       	in	r29, 0x23	; 35
    7d04:	a3 c0       	rjmp	.+326    	; 0x7e4c <waves+0x4c>
	...

00007e00 <waves>:
    7e00:	00 03       	mulsu	r16, r16
    7e02:	06 09       	sbc	r16, r6
    7e04:	0c 10       	cpse	r0, r12
    7e06:	13 16       	cp	r1, r19
    7e08:	19 1c       	adc	r1, r9
    7e0a:	1f 22       	and	r1, r31
    7e0c:	25 28       	or	r2, r5
    7e0e:	2b 2e       	mov	r2, r27
    7e10:	31 33       	cpi	r19, 0x31	; 49
    7e12:	36 39       	cpi	r19, 0x96	; 150
    7e14:	3c 3f       	cpi	r19, 0xFC	; 252
    7e16:	41 44       	sbci	r20, 0x41	; 65
    7e18:	47 49       	sbci	r20, 0x97	; 151
    7e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7e1c:	51 53       	subi	r21, 0x31	; 49
    7e1e:	55 58       	subi	r21, 0x85	; 133
    7e20:	5a 5c       	subi	r21, 0xCA	; 202
    7e22:	5e 60       	ori	r21, 0x0E	; 14
    7e24:	62 64       	ori	r22, 0x42	; 66
    7e26:	66 68       	ori	r22, 0x86	; 134
    7e28:	6a 6b       	ori	r22, 0xBA	; 186
    7e2a:	6d 6f       	ori	r22, 0xFD	; 253
    7e2c:	70 71       	andi	r23, 0x10	; 16
    7e2e:	73 74       	andi	r23, 0x43	; 67
    7e30:	75 76       	andi	r23, 0x65	; 101
    7e32:	78 79       	andi	r23, 0x98	; 152
    7e34:	7a 7a       	andi	r23, 0xAA	; 170
    7e36:	7b 7c       	andi	r23, 0xCB	; 203
    7e38:	7d 7d       	andi	r23, 0xDD	; 221
    7e3a:	7e 7e       	andi	r23, 0xEE	; 238
    7e3c:	7e 7f       	andi	r23, 0xFE	; 254
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7e 7e       	andi	r23, 0xEE	; 238
    7e46:	7e 7d       	andi	r23, 0xDE	; 222
    7e48:	7d 7c       	andi	r23, 0xCD	; 205
    7e4a:	7b 7a       	andi	r23, 0xAB	; 171
    7e4c:	7a 79       	andi	r23, 0x9A	; 154
    7e4e:	78 76       	andi	r23, 0x68	; 104
    7e50:	75 74       	andi	r23, 0x45	; 69
    7e52:	73 71       	andi	r23, 0x13	; 19
    7e54:	70 6f       	ori	r23, 0xF0	; 240
    7e56:	6d 6b       	ori	r22, 0xBD	; 189
    7e58:	6a 68       	ori	r22, 0x8A	; 138
    7e5a:	66 64       	ori	r22, 0x46	; 70
    7e5c:	62 60       	ori	r22, 0x02	; 2
    7e5e:	5e 5c       	subi	r21, 0xCE	; 206
    7e60:	5a 58       	subi	r21, 0x8A	; 138
    7e62:	55 53       	subi	r21, 0x35	; 53
    7e64:	51 4e       	sbci	r21, 0xE1	; 225
    7e66:	4c 49       	sbci	r20, 0x9C	; 156
    7e68:	47 44       	sbci	r20, 0x47	; 71
    7e6a:	41 3f       	cpi	r20, 0xF1	; 241
    7e6c:	3c 39       	cpi	r19, 0x9C	; 156
    7e6e:	36 33       	cpi	r19, 0x36	; 54
    7e70:	31 2e       	mov	r3, r17
    7e72:	2b 28       	or	r2, r11
    7e74:	25 22       	and	r2, r21
    7e76:	1f 1c       	adc	r1, r15
    7e78:	19 16       	cp	r1, r25
    7e7a:	13 10       	cpse	r1, r3
    7e7c:	0c 09       	sbc	r16, r12
    7e7e:	06 03       	mulsu	r16, r22
    7e80:	00 fd       	sbrc	r16, 0
    7e82:	fa f7       	brpl	.-2      	; 0x7e82 <waves+0x82>
    7e84:	f4 f0       	brlt	.+60     	; 0x7ec2 <waves+0xc2>
    7e86:	ed ea       	ldi	r30, 0xAD	; 173
    7e88:	e7 e4       	ldi	r30, 0x47	; 71
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <steptable+0x46>
    7e8c:	db d8       	rcall	.-3658   	; 0x7044 <ReadButtons+0x4c>
    7e8e:	d5 d2       	rcall	.+1450   	; 0x843a <waves+0x63a>
    7e90:	cf cd       	rjmp	.-1122   	; 0x7a30 <ProcessMusic+0x380>
    7e92:	ca c7       	rjmp	.+3988   	; 0x8e28 <LBPrintByte+0x42>
    7e94:	c4 c1       	rjmp	.+904    	; 0x821e <waves+0x41e>
    7e96:	bf bc       	out	0x2f, r11	; 47
    7e98:	b9 b7       	in	r27, 0x39	; 57
    7e9a:	b4 b2       	in	r11, 0x14	; 20
    7e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7ea4:	9e 9c       	mul	r9, r14
    7ea6:	9a 98       	cbi	0x13, 2	; 19
    7ea8:	96 95       	lsr	r25
    7eaa:	93 91       	.word	0x9193	; ????
    7eac:	90 8f       	std	Z+24, r25	; 0x18
    7eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7eb0:	8b 8a       	std	Y+19, r8	; 0x13
    7eb2:	88 87       	std	Y+8, r24	; 0x08
    7eb4:	86 86       	std	Z+14, r8	; 0x0e
    7eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7eb8:	83 83       	std	Z+3, r24	; 0x03
    7eba:	82 82       	std	Z+2, r8	; 0x02
    7ebc:	82 81       	ldd	r24, Z+2	; 0x02
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
    7ec0:	81 81       	ldd	r24, Z+1	; 0x01
    7ec2:	81 81       	ldd	r24, Z+1	; 0x01
    7ec4:	82 82       	std	Z+2, r8	; 0x02
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    7eca:	85 86       	std	Z+13, r8	; 0x0d
    7ecc:	86 87       	std	Z+14, r24	; 0x0e
    7ece:	88 8a       	std	Y+16, r8	; 0x10
    7ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ed4:	90 91 93 95 	lds	r25, 0x9593
    7ed8:	96 98       	cbi	0x12, 6	; 18
    7eda:	9a 9c       	mul	r9, r10
    7edc:	9e a0       	ldd	r9, Y+38	; 0x26
    7ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ee4:	af b2       	in	r10, 0x1f	; 31
    7ee6:	b4 b7       	in	r27, 0x34	; 52
    7ee8:	b9 bc       	out	0x29, r11	; 41
    7eea:	bf c1       	rjmp	.+894    	; 0x826a <waves+0x46a>
    7eec:	c4 c7       	rjmp	.+3976   	; 0x8e76 <LBPrintInt+0x4c>
    7eee:	ca cd       	rjmp	.-1132   	; 0x7a84 <ProcessMusic+0x3d4>
    7ef0:	cf d2       	rcall	.+1438   	; 0x8490 <waves+0x690>
    7ef2:	d5 d8       	rcall	.-3670   	; 0x709e <FormatEeprom+0x1a>
    7ef4:	db de       	rcall	.-586    	; 0x7cac <steptable+0xa4>
    7ef6:	e1 e4       	ldi	r30, 0x41	; 65
    7ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    7efa:	ed f0       	brhs	.+58     	; 0x7f36 <waves+0x136>
    7efc:	f4 f7       	brge	.-4      	; 0x7efa <waves+0xfa>
    7efe:	fa fd       	.word	0xfdfa	; ????
    7f00:	80 81       	ld	r24, Z
    7f02:	82 83       	std	Z+2, r24	; 0x02
    7f04:	84 85       	ldd	r24, Z+12	; 0x0c
    7f06:	86 87       	std	Z+14, r24	; 0x0e
    7f08:	88 89       	ldd	r24, Y+16	; 0x10
    7f0a:	8a 8b       	std	Y+18, r24	; 0x12
    7f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7f10:	90 91 92 93 	lds	r25, 0x9392
    7f14:	94 95       	.word	0x9594	; ????
    7f16:	96 97       	sbiw	r26, 0x26	; 38
    7f18:	98 99       	sbic	0x13, 0	; 19
    7f1a:	9a 9b       	sbis	0x13, 2	; 19
    7f1c:	9c 9d       	mul	r25, r12
    7f1e:	9e 9f       	mul	r25, r30
    7f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f22:	a2 a3       	std	Z+34, r26	; 0x22
    7f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7f26:	a6 a7       	std	Z+46, r26	; 0x2e
    7f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7f2a:	aa ab       	std	Y+50, r26	; 0x32
    7f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7f2e:	ae af       	std	Y+62, r26	; 0x3e
    7f30:	b0 b1       	in	r27, 0x00	; 0
    7f32:	b2 b3       	in	r27, 0x12	; 18
    7f34:	b4 b5       	in	r27, 0x24	; 36
    7f36:	b6 b7       	in	r27, 0x36	; 54
    7f38:	b8 b9       	out	0x08, r27	; 8
    7f3a:	ba bb       	out	0x1a, r27	; 26
    7f3c:	bc bd       	out	0x2c, r27	; 44
    7f3e:	be bf       	out	0x3e, r27	; 62
    7f40:	c0 c1       	rjmp	.+896    	; 0x82c2 <waves+0x4c2>
    7f42:	c2 c3       	rjmp	.+1924   	; 0x86c8 <waves+0x8c8>
    7f44:	c4 c5       	rjmp	.+2952   	; 0x8ace <DrawMap+0x16>
    7f46:	c6 c7       	rjmp	.+3980   	; 0x8ed4 <LBWaitSeconds+0x2>
    7f48:	c8 c9       	rjmp	.-3184   	; 0x72da <PatchCommand11+0x70>
    7f4a:	ca cb       	rjmp	.-2156   	; 0x76e0 <ProcessMusic+0x30>
    7f4c:	cc cd       	rjmp	.-1128   	; 0x7ae6 <ProcessMusic+0x436>
    7f4e:	ce cf       	rjmp	.-100    	; 0x7eec <waves+0xec>
    7f50:	d0 d1       	rcall	.+928    	; 0x82f2 <waves+0x4f2>
    7f52:	d2 d3       	rcall	.+1956   	; 0x86f8 <waves+0x8f8>
    7f54:	d4 d5       	rcall	.+2984   	; 0x8afe <DrawMap+0x46>
    7f56:	d6 d7       	rcall	.+4012   	; 0x8f04 <LBMapSprite+0x14>
    7f58:	d8 d9       	rcall	.-3152   	; 0x730a <PatchCommand04+0x8>
    7f5a:	da db       	rcall	.-2124   	; 0x7710 <ProcessMusic+0x60>
    7f5c:	dc dd       	rcall	.-1096   	; 0x7b16 <set_note_waves+0x18>
    7f5e:	de df       	rcall	.-68     	; 0x7f1c <waves+0x11c>
    7f60:	e0 e1       	ldi	r30, 0x10	; 16
    7f62:	e2 e3       	ldi	r30, 0x32	; 50
    7f64:	e4 e5       	ldi	r30, 0x54	; 84
    7f66:	e6 e7       	ldi	r30, 0x76	; 118
    7f68:	e8 e9       	ldi	r30, 0x98	; 152
    7f6a:	ea eb       	ldi	r30, 0xBA	; 186
    7f6c:	ec ed       	ldi	r30, 0xDC	; 220
    7f6e:	ee ef       	ldi	r30, 0xFE	; 254
    7f70:	f0 f1       	brcs	.+124    	; 0x7fee <waves+0x1ee>
    7f72:	f2 f3       	brmi	.-4      	; 0x7f70 <waves+0x170>
    7f74:	f4 f5       	brge	.+124    	; 0x7ff2 <waves+0x1f2>
    7f76:	f6 f7       	brtc	.-4      	; 0x7f74 <waves+0x174>
    7f78:	f8 f9       	.word	0xf9f8	; ????
    7f7a:	fa fb       	.word	0xfbfa	; ????
    7f7c:	fc fd       	.word	0xfdfc	; ????
    7f7e:	fe ff       	.word	0xfffe	; ????
    7f80:	00 01       	movw	r0, r0
    7f82:	02 03       	mulsu	r16, r18
    7f84:	04 05       	cpc	r16, r4
    7f86:	06 07       	cpc	r16, r22
    7f88:	08 09       	sbc	r16, r8
    7f8a:	0a 0b       	sbc	r16, r26
    7f8c:	0c 0d       	add	r16, r12
    7f8e:	0e 0f       	add	r16, r30
    7f90:	10 11       	cpse	r17, r0
    7f92:	12 13       	cpse	r17, r18
    7f94:	14 15       	cp	r17, r4
    7f96:	16 17       	cp	r17, r22
    7f98:	18 19       	sub	r17, r8
    7f9a:	1a 1b       	sub	r17, r26
    7f9c:	1c 1d       	adc	r17, r12
    7f9e:	1e 1f       	adc	r17, r30
    7fa0:	20 21       	and	r18, r0
    7fa2:	22 23       	and	r18, r18
    7fa4:	24 25       	eor	r18, r4
    7fa6:	26 27       	eor	r18, r22
    7fa8:	28 29       	or	r18, r8
    7faa:	2a 2b       	or	r18, r26
    7fac:	2c 2d       	mov	r18, r12
    7fae:	2e 2f       	mov	r18, r30
    7fb0:	30 31       	cpi	r19, 0x10	; 16
    7fb2:	32 33       	cpi	r19, 0x32	; 50
    7fb4:	34 35       	cpi	r19, 0x54	; 84
    7fb6:	36 37       	cpi	r19, 0x76	; 118
    7fb8:	38 39       	cpi	r19, 0x98	; 152
    7fba:	3a 3b       	cpi	r19, 0xBA	; 186
    7fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    7fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    7fc0:	40 41       	sbci	r20, 0x10	; 16
    7fc2:	42 43       	sbci	r20, 0x32	; 50
    7fc4:	44 45       	sbci	r20, 0x54	; 84
    7fc6:	46 47       	sbci	r20, 0x76	; 118
    7fc8:	48 49       	sbci	r20, 0x98	; 152
    7fca:	4a 4b       	sbci	r20, 0xBA	; 186
    7fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    7fce:	4e 4f       	sbci	r20, 0xFE	; 254
    7fd0:	50 51       	subi	r21, 0x10	; 16
    7fd2:	52 53       	subi	r21, 0x32	; 50
    7fd4:	54 55       	subi	r21, 0x54	; 84
    7fd6:	56 57       	subi	r21, 0x76	; 118
    7fd8:	58 59       	subi	r21, 0x98	; 152
    7fda:	5a 5b       	subi	r21, 0xBA	; 186
    7fdc:	5c 5d       	subi	r21, 0xDC	; 220
    7fde:	5e 5f       	subi	r21, 0xFE	; 254
    7fe0:	60 61       	ori	r22, 0x10	; 16
    7fe2:	62 63       	ori	r22, 0x32	; 50
    7fe4:	64 65       	ori	r22, 0x54	; 84
    7fe6:	66 67       	ori	r22, 0x76	; 118
    7fe8:	68 69       	ori	r22, 0x98	; 152
    7fea:	6a 6b       	ori	r22, 0xBA	; 186
    7fec:	6c 6d       	ori	r22, 0xDC	; 220
    7fee:	6e 6f       	ori	r22, 0xFE	; 254
    7ff0:	70 71       	andi	r23, 0x10	; 16
    7ff2:	72 73       	andi	r23, 0x32	; 50
    7ff4:	74 75       	andi	r23, 0x54	; 84
    7ff6:	76 77       	andi	r23, 0x76	; 118
    7ff8:	78 79       	andi	r23, 0x98	; 152
    7ffa:	7a 7b       	andi	r23, 0xBA	; 186
    7ffc:	7c 7d       	andi	r23, 0xDC	; 220
    7ffe:	7e 7f       	andi	r23, 0xFE	; 254
    8000:	00 02       	muls	r16, r16
    8002:	04 06       	cpc	r0, r20
    8004:	08 0a       	sbc	r0, r24
    8006:	0c 0e       	add	r0, r28
    8008:	10 12       	cpse	r1, r16
    800a:	14 16       	cp	r1, r20
    800c:	18 1a       	sub	r1, r24
    800e:	1c 1e       	adc	r1, r28
    8010:	20 22       	and	r2, r16
    8012:	24 26       	eor	r2, r20
    8014:	28 2a       	or	r2, r24
    8016:	2c 2e       	mov	r2, r28
    8018:	30 32       	cpi	r19, 0x20	; 32
    801a:	34 36       	cpi	r19, 0x64	; 100
    801c:	38 3a       	cpi	r19, 0xA8	; 168
    801e:	3c 3e       	cpi	r19, 0xEC	; 236
    8020:	40 42       	sbci	r20, 0x20	; 32
    8022:	44 46       	sbci	r20, 0x64	; 100
    8024:	48 4a       	sbci	r20, 0xA8	; 168
    8026:	4c 4e       	sbci	r20, 0xEC	; 236
    8028:	50 52       	subi	r21, 0x20	; 32
    802a:	54 56       	subi	r21, 0x64	; 100
    802c:	58 5a       	subi	r21, 0xA8	; 168
    802e:	5c 5e       	subi	r21, 0xEC	; 236
    8030:	60 62       	ori	r22, 0x20	; 32
    8032:	64 66       	ori	r22, 0x64	; 100
    8034:	68 6a       	ori	r22, 0xA8	; 168
    8036:	6c 6e       	ori	r22, 0xEC	; 236
    8038:	70 72       	andi	r23, 0x20	; 32
    803a:	74 76       	andi	r23, 0x64	; 100
    803c:	78 7a       	andi	r23, 0xA8	; 168
    803e:	7c 7e       	andi	r23, 0xEC	; 236
    8040:	7f 7d       	andi	r23, 0xDF	; 223
    8042:	7b 79       	andi	r23, 0x9B	; 155
    8044:	77 75       	andi	r23, 0x57	; 87
    8046:	73 71       	andi	r23, 0x13	; 19
    8048:	6f 6d       	ori	r22, 0xDF	; 223
    804a:	6b 69       	ori	r22, 0x9B	; 155
    804c:	67 65       	ori	r22, 0x57	; 87
    804e:	63 61       	ori	r22, 0x13	; 19
    8050:	5f 5d       	subi	r21, 0xDF	; 223
    8052:	5b 59       	subi	r21, 0x9B	; 155
    8054:	57 55       	subi	r21, 0x57	; 87
    8056:	53 51       	subi	r21, 0x13	; 19
    8058:	4f 4d       	sbci	r20, 0xDF	; 223
    805a:	4b 49       	sbci	r20, 0x9B	; 155
    805c:	47 45       	sbci	r20, 0x57	; 87
    805e:	43 41       	sbci	r20, 0x13	; 19
    8060:	3f 3d       	cpi	r19, 0xDF	; 223
    8062:	3b 39       	cpi	r19, 0x9B	; 155
    8064:	37 35       	cpi	r19, 0x57	; 87
    8066:	33 31       	cpi	r19, 0x13	; 19
    8068:	2f 2d       	mov	r18, r15
    806a:	2b 29       	or	r18, r11
    806c:	27 25       	eor	r18, r7
    806e:	23 21       	and	r18, r3
    8070:	1f 1d       	adc	r17, r15
    8072:	1b 19       	sub	r17, r11
    8074:	17 15       	cp	r17, r7
    8076:	13 11       	cpse	r17, r3
    8078:	0f 0d       	add	r16, r15
    807a:	0b 09       	sbc	r16, r11
    807c:	07 05       	cpc	r16, r7
    807e:	03 01       	movw	r0, r6
    8080:	ff fd       	.word	0xfdff	; ????
    8082:	fb f9       	.word	0xf9fb	; ????
    8084:	f7 f5       	brid	.+124    	; 0x8102 <waves+0x302>
    8086:	f3 f1       	brvs	.+124    	; 0x8104 <waves+0x304>
    8088:	ef ed       	ldi	r30, 0xDF	; 223
    808a:	eb e9       	ldi	r30, 0x9B	; 155
    808c:	e7 e5       	ldi	r30, 0x57	; 87
    808e:	e3 e1       	ldi	r30, 0x13	; 19
    8090:	df dd       	rcall	.-1090   	; 0x7c50 <steptable+0x48>
    8092:	db d9       	rcall	.-3146   	; 0x744a <ReadVarLen+0x12>
    8094:	d7 d5       	rcall	.+2990   	; 0x8c44 <ProcessFading+0xa>
    8096:	d3 d1       	rcall	.+934    	; 0x843e <waves+0x63e>
    8098:	cf cd       	rjmp	.-1122   	; 0x7c38 <steptable+0x30>
    809a:	cb c9       	rjmp	.-3178   	; 0x7432 <StopSong+0x16>
    809c:	c7 c5       	rjmp	.+2958   	; 0x8c2c <FadeOut+0xa>
    809e:	c3 c1       	rjmp	.+902    	; 0x8426 <waves+0x626>
    80a0:	bf bd       	out	0x2f, r27	; 47
    80a2:	bb b9       	out	0x0b, r27	; 11
    80a4:	b7 b5       	in	r27, 0x27	; 39
    80a6:	b3 b1       	in	r27, 0x03	; 3
    80a8:	af ad       	ldd	r26, Y+63	; 0x3f
    80aa:	ab a9       	ldd	r26, Y+51	; 0x33
    80ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    80b0:	9f 9d       	mul	r25, r15
    80b2:	9b 99       	sbic	0x13, 3	; 19
    80b4:	97 95       	ror	r25
    80b6:	93 91       	.word	0x9193	; ????
    80b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	87 85       	ldd	r24, Z+15	; 0x0f
    80be:	83 81       	ldd	r24, Z+3	; 0x03
    80c0:	80 82       	st	Z, r8
    80c2:	84 86       	std	Z+12, r8	; 0x0c
    80c4:	88 8a       	std	Y+16, r8	; 0x10
    80c6:	8c 8e       	std	Y+28, r8	; 0x1c
    80c8:	90 92 94 96 	sts	0x9694, r9
    80cc:	98 9a       	sbi	0x13, 0	; 19
    80ce:	9c 9e       	mul	r9, r28
    80d0:	a0 a2       	std	Z+32, r10	; 0x20
    80d2:	a4 a6       	std	Z+44, r10	; 0x2c
    80d4:	a8 aa       	std	Y+48, r10	; 0x30
    80d6:	ac ae       	std	Y+60, r10	; 0x3c
    80d8:	b0 b2       	in	r11, 0x10	; 16
    80da:	b4 b6       	in	r11, 0x34	; 52
    80dc:	b8 ba       	out	0x18, r11	; 24
    80de:	bc be       	out	0x3c, r11	; 60
    80e0:	c0 c2       	rjmp	.+1408   	; 0x8662 <waves+0x862>
    80e2:	c4 c6       	rjmp	.+3464   	; 0x8e6c <LBPrintInt+0x42>
    80e4:	c8 ca       	rjmp	.-2672   	; 0x7676 <TriggerNote+0x46>
    80e6:	cc ce       	rjmp	.-616    	; 0x7e80 <waves+0x80>
    80e8:	d0 d2       	rcall	.+1440   	; 0x868a <waves+0x88a>
    80ea:	d4 d6       	rcall	.+3496   	; 0x8e94 <LBCollides+0xe>
    80ec:	d8 da       	rcall	.-2640   	; 0x769e <TriggerNote+0x6e>
    80ee:	dc de       	rcall	.-584    	; 0x7ea8 <waves+0xa8>
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	e4 e6       	ldi	r30, 0x64	; 100
    80f4:	e8 ea       	ldi	r30, 0xA8	; 168
    80f6:	ec ee       	ldi	r30, 0xEC	; 236
    80f8:	f0 f2       	brcs	.-68     	; 0x80b6 <waves+0x2b6>
    80fa:	f4 f6       	brge	.-68     	; 0x80b8 <waves+0x2b8>
    80fc:	f8 fa       	.word	0xfaf8	; ????
    80fe:	fc fe       	.word	0xfefc	; ????
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	80 80       	ld	r8, Z
    8142:	80 80       	ld	r8, Z
    8144:	80 80       	ld	r8, Z
    8146:	80 80       	ld	r8, Z
    8148:	80 80       	ld	r8, Z
    814a:	80 80       	ld	r8, Z
    814c:	80 80       	ld	r8, Z
    814e:	80 80       	ld	r8, Z
    8150:	80 80       	ld	r8, Z
    8152:	80 80       	ld	r8, Z
    8154:	80 80       	ld	r8, Z
    8156:	80 80       	ld	r8, Z
    8158:	80 80       	ld	r8, Z
    815a:	80 80       	ld	r8, Z
    815c:	80 80       	ld	r8, Z
    815e:	80 80       	ld	r8, Z
    8160:	80 80       	ld	r8, Z
    8162:	80 80       	ld	r8, Z
    8164:	80 80       	ld	r8, Z
    8166:	80 80       	ld	r8, Z
    8168:	80 80       	ld	r8, Z
    816a:	80 80       	ld	r8, Z
    816c:	80 80       	ld	r8, Z
    816e:	80 80       	ld	r8, Z
    8170:	80 80       	ld	r8, Z
    8172:	80 80       	ld	r8, Z
    8174:	80 80       	ld	r8, Z
    8176:	80 80       	ld	r8, Z
    8178:	80 80       	ld	r8, Z
    817a:	80 80       	ld	r8, Z
    817c:	80 80       	ld	r8, Z
    817e:	80 80       	ld	r8, Z
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	7f 7f       	andi	r23, 0xFF	; 255
    8382:	7f 7f       	andi	r23, 0xFF	; 255
    8384:	7f 7f       	andi	r23, 0xFF	; 255
    8386:	7f 7f       	andi	r23, 0xFF	; 255
    8388:	7f 7f       	andi	r23, 0xFF	; 255
    838a:	7f 7f       	andi	r23, 0xFF	; 255
    838c:	7f 7f       	andi	r23, 0xFF	; 255
    838e:	7f 7f       	andi	r23, 0xFF	; 255
    8390:	7f 7f       	andi	r23, 0xFF	; 255
    8392:	7f 7f       	andi	r23, 0xFF	; 255
    8394:	7f 7f       	andi	r23, 0xFF	; 255
    8396:	7f 7f       	andi	r23, 0xFF	; 255
    8398:	7f 7f       	andi	r23, 0xFF	; 255
    839a:	7f 7f       	andi	r23, 0xFF	; 255
    839c:	7f 7f       	andi	r23, 0xFF	; 255
    839e:	7f 7f       	andi	r23, 0xFF	; 255
    83a0:	7f 7f       	andi	r23, 0xFF	; 255
    83a2:	7f 7f       	andi	r23, 0xFF	; 255
    83a4:	7f 7f       	andi	r23, 0xFF	; 255
    83a6:	7f 7f       	andi	r23, 0xFF	; 255
    83a8:	7f 7f       	andi	r23, 0xFF	; 255
    83aa:	7f 7f       	andi	r23, 0xFF	; 255
    83ac:	7f 7f       	andi	r23, 0xFF	; 255
    83ae:	7f 7f       	andi	r23, 0xFF	; 255
    83b0:	7f 7f       	andi	r23, 0xFF	; 255
    83b2:	7f 7f       	andi	r23, 0xFF	; 255
    83b4:	7f 7f       	andi	r23, 0xFF	; 255
    83b6:	7f 7f       	andi	r23, 0xFF	; 255
    83b8:	7f 7f       	andi	r23, 0xFF	; 255
    83ba:	7f 7f       	andi	r23, 0xFF	; 255
    83bc:	7f 7f       	andi	r23, 0xFF	; 255
    83be:	7f 7f       	andi	r23, 0xFF	; 255
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	03 09       	sbc	r16, r3
    8402:	13 1e       	adc	r1, r19
    8404:	28 31       	cpi	r18, 0x18	; 24
    8406:	3a 40       	sbci	r19, 0x0A	; 10
    8408:	46 4c       	sbci	r20, 0xC6	; 198
    840a:	50 54       	subi	r21, 0x40	; 64
    840c:	58 5b       	subi	r21, 0xB8	; 184
    840e:	5e 61       	ori	r21, 0x1E	; 30
    8410:	63 65       	ori	r22, 0x53	; 83
    8412:	67 69       	ori	r22, 0x97	; 151
    8414:	6b 6c       	ori	r22, 0xCB	; 203
    8416:	6e 6f       	ori	r22, 0xFE	; 254
    8418:	70 71       	andi	r23, 0x10	; 16
    841a:	72 73       	andi	r23, 0x32	; 50
    841c:	74 75       	andi	r23, 0x54	; 84
    841e:	76 77       	andi	r23, 0x76	; 118
    8420:	77 78       	andi	r23, 0x87	; 135
    8422:	79 79       	andi	r23, 0x99	; 153
    8424:	7a 7a       	andi	r23, 0xAA	; 170
    8426:	7b 7b       	andi	r23, 0xBB	; 187
    8428:	7c 7c       	andi	r23, 0xCC	; 204
    842a:	7c 7d       	andi	r23, 0xDC	; 220
    842c:	7d 7d       	andi	r23, 0xDD	; 221
    842e:	7e 7e       	andi	r23, 0xEE	; 238
    8430:	7e 7e       	andi	r23, 0xEE	; 238
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7e       	andi	r23, 0xEF	; 239
    844e:	7e 7e       	andi	r23, 0xEE	; 238
    8450:	7e 7d       	andi	r23, 0xDE	; 222
    8452:	7d 7d       	andi	r23, 0xDD	; 221
    8454:	7c 7c       	andi	r23, 0xCC	; 204
    8456:	7c 7b       	andi	r23, 0xBC	; 188
    8458:	7b 7a       	andi	r23, 0xAB	; 171
    845a:	7a 79       	andi	r23, 0x9A	; 154
    845c:	79 78       	andi	r23, 0x89	; 137
    845e:	77 77       	andi	r23, 0x77	; 119
    8460:	76 75       	andi	r23, 0x56	; 86
    8462:	74 73       	andi	r23, 0x34	; 52
    8464:	72 71       	andi	r23, 0x12	; 18
    8466:	70 6f       	ori	r23, 0xF0	; 240
    8468:	6e 6c       	ori	r22, 0xCE	; 206
    846a:	6b 69       	ori	r22, 0x9B	; 155
    846c:	67 65       	ori	r22, 0x57	; 87
    846e:	63 61       	ori	r22, 0x13	; 19
    8470:	5e 5b       	subi	r21, 0xBE	; 190
    8472:	58 54       	subi	r21, 0x48	; 72
    8474:	50 4c       	sbci	r21, 0xC0	; 192
    8476:	46 40       	sbci	r20, 0x06	; 6
    8478:	3a 31       	cpi	r19, 0x1A	; 26
    847a:	28 1e       	adc	r2, r24
    847c:	13 09       	sbc	r17, r3
    847e:	03 00       	.word	0x0003	; ????
    8480:	c6 cc       	rjmp	.-1652   	; 0x7e0e <waves+0xe>
    8482:	d5 db       	rcall	.-2134   	; 0x7c2e <steptable+0x26>
    8484:	df e3       	ldi	r29, 0x3F	; 63
    8486:	e5 e7       	ldi	r30, 0x75	; 117
    8488:	e9 ea       	ldi	r30, 0xA9	; 169
    848a:	eb ec       	ldi	r30, 0xCB	; 203
    848c:	ed ee       	ldi	r30, 0xED	; 237
    848e:	ef ef       	ldi	r30, 0xFF	; 255
    8490:	f0 f0       	brcs	.+60     	; 0x84ce <waves+0x6ce>
    8492:	f0 f1       	brcs	.+124    	; 0x8510 <waves+0x710>
    8494:	f1 f1       	breq	.+124    	; 0x8512 <waves+0x712>
    8496:	f1 f2       	breq	.-68     	; 0x8454 <waves+0x654>
    8498:	f2 f2       	brmi	.-68     	; 0x8456 <waves+0x656>
    849a:	f2 f2       	brmi	.-68     	; 0x8458 <waves+0x658>
    849c:	f2 f2       	brmi	.-68     	; 0x845a <waves+0x65a>
    849e:	f2 f3       	brmi	.-4      	; 0x849c <waves+0x69c>
    84a0:	f3 f3       	brvs	.-4      	; 0x849e <waves+0x69e>
    84a2:	f3 f3       	brvs	.-4      	; 0x84a0 <waves+0x6a0>
    84a4:	f3 f3       	brvs	.-4      	; 0x84a2 <waves+0x6a2>
    84a6:	f3 f3       	brvs	.-4      	; 0x84a4 <waves+0x6a4>
    84a8:	f3 f3       	brvs	.-4      	; 0x84a6 <waves+0x6a6>
    84aa:	f3 f3       	brvs	.-4      	; 0x84a8 <waves+0x6a8>
    84ac:	f3 f3       	brvs	.-4      	; 0x84aa <waves+0x6aa>
    84ae:	f3 f3       	brvs	.-4      	; 0x84ac <waves+0x6ac>
    84b0:	f3 f3       	brvs	.-4      	; 0x84ae <waves+0x6ae>
    84b2:	f3 f3       	brvs	.-4      	; 0x84b0 <waves+0x6b0>
    84b4:	f3 f3       	brvs	.-4      	; 0x84b2 <waves+0x6b2>
    84b6:	f3 f3       	brvs	.-4      	; 0x84b4 <waves+0x6b4>
    84b8:	f3 f3       	brvs	.-4      	; 0x84b6 <waves+0x6b6>
    84ba:	f3 f3       	brvs	.-4      	; 0x84b8 <waves+0x6b8>
    84bc:	f3 f3       	brvs	.-4      	; 0x84ba <waves+0x6ba>
    84be:	f3 f3       	brvs	.-4      	; 0x84bc <waves+0x6bc>
    84c0:	f3 f3       	brvs	.-4      	; 0x84be <waves+0x6be>
    84c2:	f3 f3       	brvs	.-4      	; 0x84c0 <waves+0x6c0>
    84c4:	f3 f3       	brvs	.-4      	; 0x84c2 <waves+0x6c2>
    84c6:	f3 f3       	brvs	.-4      	; 0x84c4 <waves+0x6c4>
    84c8:	f3 f3       	brvs	.-4      	; 0x84c6 <waves+0x6c6>
    84ca:	f3 f3       	brvs	.-4      	; 0x84c8 <waves+0x6c8>
    84cc:	f3 f3       	brvs	.-4      	; 0x84ca <waves+0x6ca>
    84ce:	f3 f3       	brvs	.-4      	; 0x84cc <waves+0x6cc>
    84d0:	f3 f3       	brvs	.-4      	; 0x84ce <waves+0x6ce>
    84d2:	f3 f3       	brvs	.-4      	; 0x84d0 <waves+0x6d0>
    84d4:	f3 f3       	brvs	.-4      	; 0x84d2 <waves+0x6d2>
    84d6:	f3 f3       	brvs	.-4      	; 0x84d4 <waves+0x6d4>
    84d8:	f3 f3       	brvs	.-4      	; 0x84d6 <waves+0x6d6>
    84da:	f3 f3       	brvs	.-4      	; 0x84d8 <waves+0x6d8>
    84dc:	f3 f3       	brvs	.-4      	; 0x84da <waves+0x6da>
    84de:	f3 f3       	brvs	.-4      	; 0x84dc <waves+0x6dc>
    84e0:	f2 f2       	brmi	.-68     	; 0x849e <waves+0x69e>
    84e2:	f2 f2       	brmi	.-68     	; 0x84a0 <waves+0x6a0>
    84e4:	f2 f2       	brmi	.-68     	; 0x84a2 <waves+0x6a2>
    84e6:	f2 f2       	brmi	.-68     	; 0x84a4 <waves+0x6a4>
    84e8:	f1 f1       	breq	.+124    	; 0x8566 <waves+0x766>
    84ea:	f1 f1       	breq	.+124    	; 0x8568 <waves+0x768>
    84ec:	f0 f0       	brcs	.+60     	; 0x852a <waves+0x72a>
    84ee:	f0 ef       	ldi	r31, 0xF0	; 240
    84f0:	ef ee       	ldi	r30, 0xEF	; 239
    84f2:	ed ec       	ldi	r30, 0xCD	; 205
    84f4:	eb ea       	ldi	r30, 0xAB	; 171
    84f6:	e9 e7       	ldi	r30, 0x79	; 121
    84f8:	e5 e3       	ldi	r30, 0x35	; 53
    84fa:	df db       	rcall	.-2114   	; 0x7cba <steptable+0xb2>
    84fc:	d5 cc       	rjmp	.-1622   	; 0x7ea8 <waves+0xa8>
    84fe:	c6 00       	.word	0x00c6	; ????
    8500:	00 28       	or	r0, r0
    8502:	3d 42       	sbci	r19, 0x2D	; 45
    8504:	30 2d       	mov	r19, r0
    8506:	2c 2b       	or	r18, r28
    8508:	2c 2d       	mov	r18, r12
    850a:	2e 2f       	mov	r18, r30
    850c:	30 32       	cpi	r19, 0x20	; 32
    850e:	33 35       	cpi	r19, 0x53	; 83
    8510:	37 39       	cpi	r19, 0x97	; 151
    8512:	3b 3d       	cpi	r19, 0xDB	; 219
    8514:	3f 41       	sbci	r19, 0x1F	; 31
    8516:	43 45       	sbci	r20, 0x53	; 83
    8518:	48 4a       	sbci	r20, 0xA8	; 168
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	50 53       	subi	r21, 0x30	; 48
    851e:	55 57       	subi	r21, 0x75	; 117
    8520:	59 5b       	subi	r21, 0xB9	; 185
    8522:	5d 5f       	subi	r21, 0xFD	; 253
    8524:	61 63       	ori	r22, 0x31	; 49
    8526:	65 67       	ori	r22, 0x75	; 117
    8528:	69 6b       	ori	r22, 0xB9	; 185
    852a:	6c 6e       	ori	r22, 0xEC	; 236
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 77       	andi	r23, 0x75	; 117
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7b       	andi	r23, 0xBA	; 186
    8536:	7c 7d       	andi	r23, 0xDC	; 220
    8538:	7d 7e       	andi	r23, 0xED	; 237
    853a:	7e 7f       	andi	r23, 0xFE	; 254
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7e 7e       	andi	r23, 0xEE	; 238
    8548:	7d 7d       	andi	r23, 0xDD	; 221
    854a:	7c 7b       	andi	r23, 0xBC	; 188
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 77       	andi	r23, 0x78	; 120
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6e       	ori	r23, 0xE0	; 224
    8556:	6c 6b       	ori	r22, 0xBC	; 188
    8558:	69 67       	ori	r22, 0x79	; 121
    855a:	65 63       	ori	r22, 0x35	; 53
    855c:	61 5f       	subi	r22, 0xF1	; 241
    855e:	5d 5b       	subi	r21, 0xBD	; 189
    8560:	59 57       	subi	r21, 0x79	; 121
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	50 4e       	sbci	r21, 0xE0	; 224
    8566:	4c 4a       	sbci	r20, 0xAC	; 172
    8568:	48 45       	sbci	r20, 0x58	; 88
    856a:	43 41       	sbci	r20, 0x13	; 19
    856c:	3f 3d       	cpi	r19, 0xDF	; 223
    856e:	3b 39       	cpi	r19, 0x9B	; 155
    8570:	37 35       	cpi	r19, 0x57	; 87
    8572:	33 32       	cpi	r19, 0x23	; 35
    8574:	30 2f       	mov	r19, r16
    8576:	2e 2d       	mov	r18, r14
    8578:	2c 2b       	or	r18, r28
    857a:	2c 2d       	mov	r18, r12
    857c:	30 42       	sbci	r19, 0x20	; 32
    857e:	3d 28       	or	r3, r13
    8580:	00 e9       	ldi	r16, 0x90	; 144
    8582:	e5 fe       	sbrs	r14, 5
    8584:	d4 d7       	rcall	.+4008   	; 0x952e <append_tile_column+0x40>
    8586:	d7 d7       	rcall	.+4014   	; 0x9536 <append_tile_column+0x48>
    8588:	d6 d4       	rcall	.+2476   	; 0x8f36 <LBMapSprite+0x46>
    858a:	d2 d0       	rcall	.+420    	; 0x8730 <waves+0x930>
    858c:	ce cc       	rjmp	.-1636   	; 0x7f2a <waves+0x12a>
    858e:	ca c8       	rjmp	.-3692   	; 0x7724 <ProcessMusic+0x74>
    8590:	c6 c3       	rjmp	.+1932   	; 0x8d1e <LBGetJoyPadState+0x46>
    8592:	c1 bf       	out	0x31, r28	; 49
    8594:	bd ba       	out	0x1d, r11	; 29
    8596:	b8 b6       	in	r11, 0x38	; 56
    8598:	b4 b1       	in	r27, 0x04	; 4
    859a:	af ad       	ldd	r26, Y+63	; 0x3f
    859c:	ab a9       	ldd	r26, Y+51	; 0x33
    859e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    85a2:	9f 9e       	mul	r9, r31
    85a4:	9c 9a       	sbi	0x13, 4	; 19
    85a6:	99 97       	sbiw	r26, 0x29	; 41
    85a8:	95 94       	asr	r9
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	89 88       	ldd	r8, Y+17	; 0x11
    85b4:	88 87       	std	Y+8, r24	; 0x08
    85b6:	86 85       	ldd	r24, Z+14	; 0x0e
    85b8:	85 84       	ldd	r8, Z+13	; 0x0d
    85ba:	84 84       	ldd	r8, Z+12	; 0x0c
    85bc:	83 83       	std	Z+3, r24	; 0x03
    85be:	83 83       	std	Z+3, r24	; 0x03
    85c0:	83 83       	std	Z+3, r24	; 0x03
    85c2:	83 83       	std	Z+3, r24	; 0x03
    85c4:	83 84       	ldd	r8, Z+11	; 0x0b
    85c6:	84 84       	ldd	r8, Z+12	; 0x0c
    85c8:	85 85       	ldd	r24, Z+13	; 0x0d
    85ca:	86 87       	std	Z+14, r24	; 0x0e
    85cc:	88 88       	ldd	r8, Y+16	; 0x10
    85ce:	89 8a       	std	Y+17, r8	; 0x11
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 94 	lds	r25, 0x9493
    85d8:	95 97       	sbiw	r26, 0x25	; 37
    85da:	99 9a       	sbi	0x13, 1	; 19
    85dc:	9c 9e       	mul	r9, r28
    85de:	9f a1       	ldd	r25, Y+39	; 0x27
    85e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    85e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    85e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e6:	af b1       	in	r26, 0x0f	; 15
    85e8:	b4 b6       	in	r11, 0x34	; 52
    85ea:	b8 ba       	out	0x18, r11	; 24
    85ec:	bd bf       	out	0x3d, r27	; 61
    85ee:	c1 c3       	rjmp	.+1922   	; 0x8d72 <LBPrintChar+0x4>
    85f0:	c6 c8       	rjmp	.-3700   	; 0x777e <ProcessMusic+0xce>
    85f2:	ca cc       	rjmp	.-1644   	; 0x7f88 <waves+0x188>
    85f4:	ce d0       	rcall	.+412    	; 0x8792 <waves+0x992>
    85f6:	d2 d4       	rcall	.+2468   	; 0x8f9c <LBMoveSprite+0x8>
    85f8:	d6 d7       	rcall	.+4012   	; 0x95a6 <append_tile_column+0xb8>
    85fa:	d7 d7       	rcall	.+4014   	; 0x95aa <append_tile_column+0xbc>
    85fc:	d4 fe       	sbrs	r13, 4
    85fe:	e5 e9       	ldi	r30, 0x95	; 149
    8600:	f9 f8       	.word	0xf8f9	; ????
    8602:	f9 f5       	brne	.+126    	; 0x8682 <waves+0x882>
    8604:	eb e1       	ldi	r30, 0x1B	; 27
    8606:	dd de       	rcall	.-582    	; 0x83c2 <waves+0x5c2>
    8608:	e0 e2       	ldi	r30, 0x20	; 32
    860a:	e4 e5       	ldi	r30, 0x54	; 84
    860c:	e6 e5       	ldi	r30, 0x56	; 86
    860e:	e4 e2       	ldi	r30, 0x24	; 36
    8610:	de d9       	rcall	.-3140   	; 0x79ce <ProcessMusic+0x31e>
    8612:	d2 ca       	rjmp	.-2652   	; 0x7bb8 <esmw+0x60>
    8614:	c1 b7       	in	r28, 0x31	; 49
    8616:	ac a2       	std	Y+36, r10	; 0x24
    8618:	99 91       	ld	r25, Y+
    861a:	8a 86       	std	Y+10, r8	; 0x0a
    861c:	83 81       	ldd	r24, Z+3	; 0x03
    861e:	80 80       	ld	r8, Z
    8620:	81 82       	std	Z+1, r8	; 0x01
    8622:	83 85       	ldd	r24, Z+11	; 0x0b
    8624:	86 88       	ldd	r8, Z+22	; 0x16
    8626:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8628:	8d 8f       	std	Y+29, r24	; 0x1d
    862a:	90 92 93 95 	sts	0x9593, r9
    862e:	96 97       	sbiw	r26, 0x26	; 38
    8630:	98 99       	sbic	0x13, 0	; 19
    8632:	9a 9b       	sbis	0x13, 2	; 19
    8634:	9b 9c       	mul	r9, r11
    8636:	9d 9d       	mul	r25, r13
    8638:	9d 9e       	mul	r9, r29
    863a:	9e 9e       	mul	r9, r30
    863c:	9f 9f       	mul	r25, r31
    863e:	9f 9f       	mul	r25, r31
    8640:	9f 9f       	mul	r25, r31
    8642:	9f 9e       	mul	r9, r31
    8644:	9e 9e       	mul	r9, r30
    8646:	9d 9d       	mul	r25, r13
    8648:	9d 9c       	mul	r9, r13
    864a:	9b 9b       	sbis	0x13, 3	; 19
    864c:	9a 99       	sbic	0x13, 2	; 19
    864e:	98 97       	sbiw	r26, 0x28	; 40
    8650:	96 95       	lsr	r25
    8652:	93 92       	.word	0x9293	; ????
    8654:	90 8f       	std	Z+24, r25	; 0x18
    8656:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8658:	8a 88       	ldd	r8, Y+18	; 0x12
    865a:	86 85       	ldd	r24, Z+14	; 0x0e
    865c:	83 82       	std	Z+3, r8	; 0x03
    865e:	81 80       	ldd	r8, Z+1	; 0x01
    8660:	80 81       	ld	r24, Z
    8662:	83 86       	std	Z+11, r8	; 0x0b
    8664:	8a 91       	ld	r24, -Y
    8666:	99 a2       	std	Y+33, r9	; 0x21
    8668:	ac b7       	in	r26, 0x3c	; 60
    866a:	c1 ca       	rjmp	.-2686   	; 0x7bee <esmw+0x96>
    866c:	d2 d9       	rcall	.-3164   	; 0x7a12 <ProcessMusic+0x362>
    866e:	de e2       	ldi	r29, 0x2E	; 46
    8670:	e4 e5       	ldi	r30, 0x54	; 84
    8672:	e6 e5       	ldi	r30, 0x56	; 86
    8674:	e4 e2       	ldi	r30, 0x24	; 36
    8676:	e0 de       	rcall	.-576    	; 0x8438 <waves+0x638>
    8678:	dd e1       	ldi	r29, 0x1D	; 29
    867a:	eb f5       	brvc	.+122    	; 0x86f6 <waves+0x8f6>
    867c:	f9 f8       	.word	0xf8f9	; ????
    867e:	f9 00       	.word	0x00f9	; ????
    8680:	07 08       	sbc	r0, r7
    8682:	07 0b       	sbc	r16, r23
    8684:	15 1f       	adc	r17, r21
    8686:	23 22       	and	r2, r19
    8688:	20 1e       	adc	r2, r16
    868a:	1c 1b       	sub	r17, r28
    868c:	1a 1b       	sub	r17, r26
    868e:	1c 1e       	adc	r1, r28
    8690:	22 27       	eor	r18, r18
    8692:	2e 36       	cpi	r18, 0x6E	; 110
    8694:	3f 49       	sbci	r19, 0x9F	; 159
    8696:	54 5e       	subi	r21, 0xE4	; 228
    8698:	67 6f       	ori	r22, 0xF7	; 247
    869a:	76 7a       	andi	r23, 0xA6	; 166
    869c:	7e 7f       	andi	r23, 0xFE	; 254
    869e:	7f 7f       	andi	r23, 0xFF	; 255
    86a0:	7f 7e       	andi	r23, 0xEF	; 239
    86a2:	7d 7b       	andi	r23, 0xBD	; 189
    86a4:	7a 78       	andi	r23, 0x8A	; 138
    86a6:	76 74       	andi	r23, 0x46	; 70
    86a8:	73 71       	andi	r23, 0x13	; 19
    86aa:	70 6e       	ori	r23, 0xE0	; 224
    86ac:	6d 6b       	ori	r22, 0xBD	; 189
    86ae:	6a 69       	ori	r22, 0x9A	; 154
    86b0:	68 67       	ori	r22, 0x78	; 120
    86b2:	66 65       	ori	r22, 0x56	; 86
    86b4:	65 64       	ori	r22, 0x45	; 69
    86b6:	64 63       	ori	r22, 0x34	; 52
    86b8:	63 62       	ori	r22, 0x23	; 35
    86ba:	62 62       	ori	r22, 0x22	; 34
    86bc:	61 61       	ori	r22, 0x11	; 17
    86be:	61 61       	ori	r22, 0x11	; 17
    86c0:	61 61       	ori	r22, 0x11	; 17
    86c2:	61 62       	ori	r22, 0x21	; 33
    86c4:	62 62       	ori	r22, 0x22	; 34
    86c6:	63 63       	ori	r22, 0x33	; 51
    86c8:	63 64       	ori	r22, 0x43	; 67
    86ca:	65 65       	ori	r22, 0x55	; 85
    86cc:	66 67       	ori	r22, 0x76	; 118
    86ce:	68 69       	ori	r22, 0x98	; 152
    86d0:	6a 6b       	ori	r22, 0xBA	; 186
    86d2:	6d 6e       	ori	r22, 0xED	; 237
    86d4:	70 71       	andi	r23, 0x10	; 16
    86d6:	73 74       	andi	r23, 0x43	; 67
    86d8:	76 78       	andi	r23, 0x86	; 134
    86da:	7a 7b       	andi	r23, 0xBA	; 186
    86dc:	7d 7e       	andi	r23, 0xED	; 237
    86de:	7f 7f       	andi	r23, 0xFF	; 255
    86e0:	7f 7f       	andi	r23, 0xFF	; 255
    86e2:	7e 7a       	andi	r23, 0xAE	; 174
    86e4:	76 6f       	ori	r23, 0xF6	; 246
    86e6:	67 5e       	subi	r22, 0xE7	; 231
    86e8:	54 49       	sbci	r21, 0x94	; 148
    86ea:	3f 36       	cpi	r19, 0x6F	; 111
    86ec:	2e 27       	eor	r18, r30
    86ee:	22 1e       	adc	r2, r18
    86f0:	1c 1b       	sub	r17, r28
    86f2:	1a 1b       	sub	r17, r26
    86f4:	1c 1e       	adc	r1, r28
    86f6:	20 22       	and	r2, r16
    86f8:	23 1f       	adc	r18, r19
    86fa:	15 0b       	sbc	r17, r21
    86fc:	07 08       	sbc	r0, r7
    86fe:	07 00       	.word	0x0007	; ????
    8700:	1f 31       	cpi	r17, 0x1F	; 31
    8702:	3d 44       	sbci	r19, 0x4D	; 77
    8704:	4e 53       	subi	r20, 0x3E	; 62
    8706:	54 56       	subi	r21, 0x64	; 100
    8708:	5a 5f       	subi	r21, 0xFA	; 250
    870a:	64 69       	ori	r22, 0x94	; 148
    870c:	6e 74       	andi	r22, 0x4E	; 78
    870e:	76 79       	andi	r23, 0x96	; 150
    8710:	7c 7f       	andi	r23, 0xFC	; 252
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7c       	andi	r23, 0xCF	; 207
    877c:	78 71       	andi	r23, 0x18	; 24
    877e:	68 4c       	sbci	r22, 0xC8	; 200
    8780:	2c 1c       	adc	r2, r12
    8782:	12 0c       	add	r1, r2
    8784:	0a 0b       	sbc	r16, r26
    8786:	0a 05       	cpc	r16, r10
    8788:	fd f3       	brhs	.-2      	; 0x8788 <waves+0x988>
    878a:	e9 df       	rcall	.-46     	; 0x875e <waves+0x95e>
    878c:	d4 ca       	rjmp	.-2648   	; 0x7d36 <steptable+0x12e>
    878e:	c0 b7       	in	r28, 0x30	; 48
    8790:	ae a6       	std	Y+46, r10	; 0x2e
    8792:	9e 97       	sbiw	r26, 0x2e	; 46
    8794:	91 8b       	std	Z+17, r25	; 0x11
    8796:	86 85       	ldd	r24, Z+14	; 0x0e
    8798:	82 80       	ldd	r8, Z+2	; 0x02
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 87       	std	Z+8, r24	; 0x08
    87f6:	91 9d       	mul	r25, r1
    87f8:	ac c4       	rjmp	.+2392   	; 0x9152 <init_player_state+0x8a>
    87fa:	cb d4       	rcall	.+2454   	; 0x9192 <init_player_state+0xca>
    87fc:	dd f2       	brhs	.-74     	; 0x87b4 <waves+0x9b4>
    87fe:	fa fa       	.word	0xfafa	; ????

00008800 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8800:	80 91 db 0c 	lds	r24, 0x0CDB
    8804:	90 91 69 0d 	lds	r25, 0x0D69
    8808:	89 17       	cp	r24, r25
    880a:	78 f4       	brcc	.+30     	; 0x882a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    880c:	e8 2f       	mov	r30, r24
    880e:	f0 e0       	ldi	r31, 0x00	; 0
    8810:	9f 01       	movw	r18, r30
    8812:	22 0f       	add	r18, r18
    8814:	33 1f       	adc	r19, r19
    8816:	e2 0f       	add	r30, r18
    8818:	f3 1f       	adc	r31, r19
    881a:	e6 5c       	subi	r30, 0xC6	; 198
    881c:	f3 4f       	sbci	r31, 0xF3	; 243
    881e:	a0 81       	ld	r26, Z
    8820:	b1 81       	ldd	r27, Z+1	; 0x01
    8822:	92 81       	ldd	r25, Z+2	; 0x02
    8824:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8826:	8f 5f       	subi	r24, 0xFF	; 255
    8828:	ed cf       	rjmp	.-38     	; 0x8804 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    882a:	08 95       	ret

0000882c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    882c:	2f 92       	push	r2
    882e:	3f 92       	push	r3
    8830:	4f 92       	push	r4
    8832:	5f 92       	push	r5
    8834:	6f 92       	push	r6
    8836:	7f 92       	push	r7
    8838:	8f 92       	push	r8
    883a:	9f 92       	push	r9
    883c:	af 92       	push	r10
    883e:	bf 92       	push	r11
    8840:	cf 92       	push	r12
    8842:	df 92       	push	r13
    8844:	ef 92       	push	r14
    8846:	ff 92       	push	r15
    8848:	0f 93       	push	r16
    884a:	1f 93       	push	r17
    884c:	cf 93       	push	r28
    884e:	df 93       	push	r29
    8850:	00 d0       	rcall	.+0      	; 0x8852 <ProcessSprites+0x26>
    8852:	00 d0       	rcall	.+0      	; 0x8854 <ProcessSprites+0x28>
    8854:	cd b7       	in	r28, 0x3d	; 61
    8856:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8858:	80 91 00 05 	lds	r24, 0x0500
    885c:	88 23       	and	r24, r24
    885e:	09 f4       	brne	.+2      	; 0x8862 <ProcessSprites+0x36>
    8860:	e0 c0       	rjmp	.+448    	; 0x8a22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8862:	80 91 da 0c 	lds	r24, 0x0CDA
    8866:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    886a:	80 93 69 0d 	sts	0x0D69, r24
    886e:	e2 e0       	ldi	r30, 0x02	; 2
    8870:	ce 2e       	mov	r12, r30
    8872:	e5 e0       	ldi	r30, 0x05	; 5
    8874:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8876:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8878:	f6 01       	movw	r30, r12
    887a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    887c:	20 3e       	cpi	r18, 0xE0	; 224
    887e:	09 f4       	brne	.+2      	; 0x8882 <ProcessSprites+0x56>
    8880:	b1 c0       	rjmp	.+354    	; 0x89e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8882:	80 91 9c 0c 	lds	r24, 0x0C9C
    8886:	90 e0       	ldi	r25, 0x00	; 0
    8888:	82 0f       	add	r24, r18
    888a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    888c:	41 81       	ldd	r20, Z+1	; 0x01
    888e:	20 91 9d 0c 	lds	r18, 0x0C9D
    8892:	30 e0       	ldi	r19, 0x00	; 0
    8894:	24 0f       	add	r18, r20
    8896:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8898:	ac 01       	movw	r20, r24
    889a:	73 e0       	ldi	r23, 0x03	; 3
    889c:	56 95       	lsr	r21
    889e:	47 95       	ror	r20
    88a0:	7a 95       	dec	r23
    88a2:	e1 f7       	brne	.-8      	; 0x889c <ProcessSprites+0x70>
    88a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    88a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    88a8:	11 f0       	breq	.+4      	; 0x88ae <ProcessSprites+0x82>
    88aa:	92 e0       	ldi	r25, 0x02	; 2
    88ac:	01 c0       	rjmp	.+2      	; 0x88b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    88ae:	91 e0       	ldi	r25, 0x01	; 1
    88b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    88b2:	a9 01       	movw	r20, r18
    88b4:	63 e0       	ldi	r22, 0x03	; 3
    88b6:	56 95       	lsr	r21
    88b8:	47 95       	ror	r20
    88ba:	6a 95       	dec	r22
    88bc:	e1 f7       	brne	.-8      	; 0x88b6 <ProcessSprites+0x8a>
    88be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    88c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    88c2:	19 f0       	breq	.+6      	; 0x88ca <ProcessSprites+0x9e>
    88c4:	52 e0       	ldi	r21, 0x02	; 2
    88c6:	35 2e       	mov	r3, r21
    88c8:	02 c0       	rjmp	.+4      	; 0x88ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    88ca:	33 24       	eor	r3, r3
    88cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88ce:	30 e0       	ldi	r19, 0x00	; 0
    88d0:	32 2f       	mov	r19, r18
    88d2:	22 27       	eor	r18, r18
    88d4:	f9 01       	movw	r30, r18
    88d6:	e8 0f       	add	r30, r24
    88d8:	f1 1d       	adc	r31, r1
    88da:	fc 83       	std	Y+4, r31	; 0x04
    88dc:	eb 83       	std	Y+3, r30	; 0x03
    88de:	e1 2c       	mov	r14, r1
    88e0:	f1 2c       	mov	r15, r1
    88e2:	be 2c       	mov	r11, r14
    88e4:	aa 24       	eor	r10, r10
    88e6:	26 2c       	mov	r2, r6
    88e8:	45 2c       	mov	r4, r5
    88ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    88ec:	84 2c       	mov	r8, r4
    88ee:	91 2c       	mov	r9, r1
    88f0:	84 2d       	mov	r24, r4
    88f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    88f6:	42 2f       	mov	r20, r18
    88f8:	50 e0       	ldi	r21, 0x00	; 0
    88fa:	44 0f       	add	r20, r20
    88fc:	55 1f       	adc	r21, r21
    88fe:	84 16       	cp	r8, r20
    8900:	95 06       	cpc	r9, r21
    8902:	14 f0       	brlt	.+4      	; 0x8908 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8904:	22 0f       	add	r18, r18
    8906:	03 c0       	rjmp	.+6      	; 0x890e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8908:	42 16       	cp	r4, r18
    890a:	10 f0       	brcs	.+4      	; 0x8910 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    890c:	84 2d       	mov	r24, r4
    890e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8910:	ff e1       	ldi	r31, 0x1F	; 31
    8912:	f2 15       	cp	r31, r2
    8914:	18 f4       	brcc	.+6      	; 0x891c <ProcessSprites+0xf0>
    8916:	00 ee       	ldi	r16, 0xE0	; 224
    8918:	02 0d       	add	r16, r2
    891a:	01 c0       	rjmp	.+2      	; 0x891e <ProcessSprites+0xf2>
    891c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    891e:	28 2f       	mov	r18, r24
    8920:	26 95       	lsr	r18
    8922:	26 95       	lsr	r18
    8924:	26 95       	lsr	r18
    8926:	10 e0       	ldi	r17, 0x00	; 0
    8928:	40 e2       	ldi	r20, 0x20	; 32
    892a:	24 9f       	mul	r18, r20
    892c:	00 0d       	add	r16, r0
    892e:	11 1d       	adc	r17, r1
    8930:	11 24       	eor	r1, r1
    8932:	23 e0       	ldi	r18, 0x03	; 3
    8934:	00 0f       	add	r16, r16
    8936:	11 1f       	adc	r17, r17
    8938:	2a 95       	dec	r18
    893a:	e1 f7       	brne	.-8      	; 0x8934 <ProcessSprites+0x108>
    893c:	87 70       	andi	r24, 0x07	; 7
    893e:	08 0f       	add	r16, r24
    8940:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8942:	00 50       	subi	r16, 0x00	; 0
    8944:	1f 4f       	sbci	r17, 0xFF	; 255
    8946:	f8 01       	movw	r30, r16
    8948:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    894a:	81 e0       	ldi	r24, 0x01	; 1
    894c:	7c 31       	cpi	r23, 0x1C	; 28
    894e:	08 f4       	brcc	.+2      	; 0x8952 <ProcessSprites+0x126>
    8950:	80 e0       	ldi	r24, 0x00	; 0
    8952:	21 e0       	ldi	r18, 0x01	; 1
    8954:	30 91 db 0c 	lds	r19, 0x0CDB
    8958:	73 17       	cp	r23, r19
    895a:	18 f0       	brcs	.+6      	; 0x8962 <ProcessSprites+0x136>
    895c:	20 e0       	ldi	r18, 0x00	; 0
    895e:	88 23       	and	r24, r24
    8960:	51 f1       	breq	.+84     	; 0x89b6 <ProcessSprites+0x18a>
    8962:	60 91 69 0d 	lds	r22, 0x0D69
    8966:	6c 31       	cpi	r22, 0x1C	; 28
    8968:	20 f5       	brcc	.+72     	; 0x89b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    896a:	88 23       	and	r24, r24
    896c:	31 f0       	breq	.+12     	; 0x897a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    896e:	84 ee       	ldi	r24, 0xE4	; 228
    8970:	87 0f       	add	r24, r23
    8972:	7a 83       	std	Y+2, r23	; 0x02
    8974:	0e 94 12 34 	call	0x6824	; 0x6824 <CopyFlashTile>
    8978:	06 c0       	rjmp	.+12     	; 0x8986 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    897a:	22 23       	and	r18, r18
    897c:	29 f0       	breq	.+10     	; 0x8988 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    897e:	87 2f       	mov	r24, r23
    8980:	7a 83       	std	Y+2, r23	; 0x02
    8982:	0e 94 a1 34 	call	0x6942	; 0x6942 <CopyRamTile>
    8986:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8988:	80 91 69 0d 	lds	r24, 0x0D69
    898c:	e8 2f       	mov	r30, r24
    898e:	f0 e0       	ldi	r31, 0x00	; 0
    8990:	9f 01       	movw	r18, r30
    8992:	22 0f       	add	r18, r18
    8994:	33 1f       	adc	r19, r19
    8996:	e2 0f       	add	r30, r18
    8998:	f3 1f       	adc	r31, r19
    899a:	e6 5c       	subi	r30, 0xC6	; 198
    899c:	f3 4f       	sbci	r31, 0xF3	; 243
    899e:	11 83       	std	Z+1, r17	; 0x01
    89a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    89a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    89a4:	f8 01       	movw	r30, r16
    89a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    89a8:	21 e0       	ldi	r18, 0x01	; 1
    89aa:	28 0f       	add	r18, r24
    89ac:	20 93 69 0d 	sts	0x0D69, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    89b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    89b2:	7c 31       	cpi	r23, 0x1C	; 28
    89b4:	38 f4       	brcc	.+14     	; 0x89c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    89b6:	2b 81       	ldd	r18, Y+3	; 0x03
    89b8:	3c 81       	ldd	r19, Y+4	; 0x04
    89ba:	a5 01       	movw	r20, r10
    89bc:	67 2f       	mov	r22, r23
    89be:	87 2d       	mov	r24, r7
    89c0:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <BlitSprite>
    89c4:	ff ef       	ldi	r31, 0xFF	; 255
    89c6:	af 1a       	sub	r10, r31
    89c8:	bf 0a       	sbc	r11, r31
    89ca:	23 94       	inc	r2
    89cc:	82 2d       	mov	r24, r2
    89ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    89d0:	99 81       	ldd	r25, Y+1	; 0x01
    89d2:	89 17       	cp	r24, r25
    89d4:	08 f4       	brcc	.+2      	; 0x89d8 <ProcessSprites+0x1ac>
    89d6:	8c cf       	rjmp	.-232    	; 0x88f0 <ProcessSprites+0xc4>
    89d8:	ef ef       	ldi	r30, 0xFF	; 255
    89da:	ee 1a       	sub	r14, r30
    89dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    89de:	e3 14       	cp	r14, r3
    89e0:	08 f4       	brcc	.+2      	; 0x89e4 <ProcessSprites+0x1b8>
    89e2:	7f cf       	rjmp	.-258    	; 0x88e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    89e4:	73 94       	inc	r7
    89e6:	f4 e0       	ldi	r31, 0x04	; 4
    89e8:	cf 0e       	add	r12, r31
    89ea:	d1 1c       	adc	r13, r1
    89ec:	4e e0       	ldi	r20, 0x0E	; 14
    89ee:	74 12       	cpse	r7, r20
    89f0:	43 cf       	rjmp	.-378    	; 0x8878 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    89f2:	0f 90       	pop	r0
    89f4:	0f 90       	pop	r0
    89f6:	0f 90       	pop	r0
    89f8:	0f 90       	pop	r0
    89fa:	df 91       	pop	r29
    89fc:	cf 91       	pop	r28
    89fe:	1f 91       	pop	r17
    8a00:	0f 91       	pop	r16
    8a02:	ff 90       	pop	r15
    8a04:	ef 90       	pop	r14
    8a06:	df 90       	pop	r13
    8a08:	cf 90       	pop	r12
    8a0a:	bf 90       	pop	r11
    8a0c:	af 90       	pop	r10
    8a0e:	9f 90       	pop	r9
    8a10:	8f 90       	pop	r8
    8a12:	7f 90       	pop	r7
    8a14:	6f 90       	pop	r6
    8a16:	5f 90       	pop	r5
    8a18:	4f 90       	pop	r4
    8a1a:	3f 90       	pop	r3
    8a1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8a1e:	0c 94 00 44 	jmp	0x8800	; 0x8800 <RestoreBackground>

	}
    8a22:	0f 90       	pop	r0
    8a24:	0f 90       	pop	r0
    8a26:	0f 90       	pop	r0
    8a28:	0f 90       	pop	r0
    8a2a:	df 91       	pop	r29
    8a2c:	cf 91       	pop	r28
    8a2e:	1f 91       	pop	r17
    8a30:	0f 91       	pop	r16
    8a32:	ff 90       	pop	r15
    8a34:	ef 90       	pop	r14
    8a36:	df 90       	pop	r13
    8a38:	cf 90       	pop	r12
    8a3a:	bf 90       	pop	r11
    8a3c:	af 90       	pop	r10
    8a3e:	9f 90       	pop	r9
    8a40:	8f 90       	pop	r8
    8a42:	7f 90       	pop	r7
    8a44:	6f 90       	pop	r6
    8a46:	5f 90       	pop	r5
    8a48:	4f 90       	pop	r4
    8a4a:	3f 90       	pop	r3
    8a4c:	2f 90       	pop	r2
    8a4e:	08 95       	ret

00008a50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8a50:	90 91 9d 0c 	lds	r25, 0x0C9D
    8a54:	96 0f       	add	r25, r22
    8a56:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    8a5a:	20 91 9c 0c 	lds	r18, 0x0C9C
    8a5e:	82 0f       	add	r24, r18
    8a60:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    8a64:	80 91 9e 0c 	lds	r24, 0x0C9E
    8a68:	80 32       	cpi	r24, 0x20	; 32
    8a6a:	b0 f4       	brcc	.+44     	; 0x8a98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    8a6c:	29 2f       	mov	r18, r25
    8a6e:	30 e0       	ldi	r19, 0x00	; 0
    8a70:	78 e0       	ldi	r23, 0x08	; 8
    8a72:	87 9f       	mul	r24, r23
    8a74:	a0 01       	movw	r20, r0
    8a76:	11 24       	eor	r1, r1
    8a78:	24 17       	cp	r18, r20
    8a7a:	35 07       	cpc	r19, r21
    8a7c:	6c f0       	brlt	.+26     	; 0x8a98 <Scroll+0x48>
				if(dy>=0){	
    8a7e:	67 fd       	sbrc	r22, 7
    8a80:	05 c0       	rjmp	.+10     	; 0x8a8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8a82:	28 ef       	ldi	r18, 0xF8	; 248
    8a84:	82 9f       	mul	r24, r18
    8a86:	90 0d       	add	r25, r0
    8a88:	11 24       	eor	r1, r1
    8a8a:	04 c0       	rjmp	.+8      	; 0x8a94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    8a8c:	78 e0       	ldi	r23, 0x08	; 8
    8a8e:	87 9f       	mul	r24, r23
    8a90:	90 0d       	add	r25, r0
    8a92:	11 24       	eor	r1, r1
    8a94:	90 93 9d 0c 	sts	0x0C9D, r25
    8a98:	08 95       	ret

00008a9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8a9a:	e2 e0       	ldi	r30, 0x02	; 2
    8a9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8a9e:	80 ee       	ldi	r24, 0xE0	; 224
    8aa0:	80 83       	st	Z, r24
    8aa2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8aa4:	95 e0       	ldi	r25, 0x05	; 5
    8aa6:	ea 33       	cpi	r30, 0x3A	; 58
    8aa8:	f9 07       	cpc	r31, r25
    8aaa:	d1 f7       	brne	.-12     	; 0x8aa0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    8aac:	80 e2       	ldi	r24, 0x20	; 32
    8aae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    8ab2:	10 92 99 0c 	sts	0x0C99, r1
    8ab6:	08 95       	ret

00008ab8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8ab8:	4f 92       	push	r4
    8aba:	5f 92       	push	r5
    8abc:	6f 92       	push	r6
    8abe:	7f 92       	push	r7
    8ac0:	8f 92       	push	r8
    8ac2:	9f 92       	push	r9
    8ac4:	af 92       	push	r10
    8ac6:	bf 92       	push	r11
    8ac8:	cf 92       	push	r12
    8aca:	df 92       	push	r13
    8acc:	ef 92       	push	r14
    8ace:	ff 92       	push	r15
    8ad0:	0f 93       	push	r16
    8ad2:	1f 93       	push	r17
    8ad4:	cf 93       	push	r28
    8ad6:	df 93       	push	r29
    8ad8:	68 2e       	mov	r6, r24
    8ada:	56 2e       	mov	r5, r22
    8adc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8ade:	fa 01       	movw	r30, r20
    8ae0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    8ae2:	31 96       	adiw	r30, 0x01	; 1
    8ae4:	84 90       	lpm	r8, Z
    8ae6:	c7 2c       	mov	r12, r7
    8ae8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8aea:	00 e0       	ldi	r16, 0x00	; 0
    8aec:	10 e0       	ldi	r17, 0x00	; 0
    8aee:	91 2c       	mov	r9, r1
    8af0:	98 14       	cp	r9, r8
    8af2:	f1 f0       	breq	.+60     	; 0x8b30 <DrawMap+0x78>
    8af4:	c0 e0       	ldi	r28, 0x00	; 0
    8af6:	d0 e0       	ldi	r29, 0x00	; 0
    8af8:	58 01       	movw	r10, r16
    8afa:	f2 e0       	ldi	r31, 0x02	; 2
    8afc:	af 0e       	add	r10, r31
    8afe:	b1 1c       	adc	r11, r1
    8b00:	49 2c       	mov	r4, r9
    8b02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    8b04:	c7 15       	cp	r28, r7
    8b06:	80 f4       	brcc	.+32     	; 0x8b28 <DrawMap+0x70>
    8b08:	95 01       	movw	r18, r10
    8b0a:	2c 0f       	add	r18, r28
    8b0c:	3d 1f       	adc	r19, r29
    8b0e:	f7 01       	movw	r30, r14
    8b10:	e2 0f       	add	r30, r18
    8b12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8b14:	24 91       	lpm	r18, Z
    8b16:	42 2f       	mov	r20, r18
    8b18:	50 e0       	ldi	r21, 0x00	; 0
    8b1a:	64 2d       	mov	r22, r4
    8b1c:	8c 2f       	mov	r24, r28
    8b1e:	86 0d       	add	r24, r6
    8b20:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <SetTile>
    8b24:	21 96       	adiw	r28, 0x01	; 1
    8b26:	ee cf       	rjmp	.-36     	; 0x8b04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8b28:	93 94       	inc	r9
    8b2a:	0c 0d       	add	r16, r12
    8b2c:	1d 1d       	adc	r17, r13
    8b2e:	e0 cf       	rjmp	.-64     	; 0x8af0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    8b30:	df 91       	pop	r29
    8b32:	cf 91       	pop	r28
    8b34:	1f 91       	pop	r17
    8b36:	0f 91       	pop	r16
    8b38:	ff 90       	pop	r15
    8b3a:	ef 90       	pop	r14
    8b3c:	df 90       	pop	r13
    8b3e:	cf 90       	pop	r12
    8b40:	bf 90       	pop	r11
    8b42:	af 90       	pop	r10
    8b44:	9f 90       	pop	r9
    8b46:	8f 90       	pop	r8
    8b48:	7f 90       	pop	r7
    8b4a:	6f 90       	pop	r6
    8b4c:	5f 90       	pop	r5
    8b4e:	4f 90       	pop	r4
    8b50:	08 95       	ret

00008b52 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8b52:	0f 93       	push	r16
    8b54:	1f 93       	push	r17
    8b56:	cf 93       	push	r28
    8b58:	df 93       	push	r29
    8b5a:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b5c:	c0 e0       	ldi	r28, 0x00	; 0
    8b5e:	d0 e0       	ldi	r29, 0x00	; 0
    8b60:	c0 17       	cp	r28, r16
    8b62:	d1 07       	cpc	r29, r17
    8b64:	44 f4       	brge	.+16     	; 0x8b76 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8b66:	0e 94 77 37 	call	0x6eee	; 0x6eee <GetVsyncFlag>
    8b6a:	88 23       	and	r24, r24
    8b6c:	e1 f3       	breq	.-8      	; 0x8b66 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8b6e:	0e 94 7b 37 	call	0x6ef6	; 0x6ef6 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b72:	21 96       	adiw	r28, 0x01	; 1
    8b74:	f5 cf       	rjmp	.-22     	; 0x8b60 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8b76:	df 91       	pop	r29
    8b78:	cf 91       	pop	r28
    8b7a:	1f 91       	pop	r17
    8b7c:	0f 91       	pop	r16
    8b7e:	08 95       	ret

00008b80 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    8b80:	8f e0       	ldi	r24, 0x0F	; 15
    8b82:	99 e0       	ldi	r25, 0x09	; 9
    8b84:	0e 94 c3 39 	call	0x7386	; 0x7386 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    8b88:	8f e0       	ldi	r24, 0x0F	; 15
    8b8a:	91 e0       	ldi	r25, 0x01	; 1
    8b8c:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <SetTileTable>
			
			//draw logo
			ClearVram();
    8b90:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
			WaitVsync(15);		
    8b94:	8f e0       	ldi	r24, 0x0F	; 15
    8b96:	90 e0       	ldi	r25, 0x00	; 0
    8b98:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    8b9c:	41 e0       	ldi	r20, 0x01	; 1
    8b9e:	6f ef       	ldi	r22, 0xFF	; 255
    8ba0:	80 e0       	ldi	r24, 0x00	; 0
    8ba2:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8ba6:	49 ef       	ldi	r20, 0xF9	; 249
    8ba8:	50 e0       	ldi	r21, 0x00	; 0
    8baa:	6c e0       	ldi	r22, 0x0C	; 12
    8bac:	8c e0       	ldi	r24, 0x0C	; 12
    8bae:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			WaitVsync(3);
    8bb2:	83 e0       	ldi	r24, 0x03	; 3
    8bb4:	90 e0       	ldi	r25, 0x00	; 0
    8bb6:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    8bba:	48 ee       	ldi	r20, 0xE8	; 232
    8bbc:	50 e0       	ldi	r21, 0x00	; 0
    8bbe:	6c e0       	ldi	r22, 0x0C	; 12
    8bc0:	8c e0       	ldi	r24, 0x0C	; 12
    8bc2:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			WaitVsync(2);
    8bc6:	82 e0       	ldi	r24, 0x02	; 2
    8bc8:	90 e0       	ldi	r25, 0x00	; 0
    8bca:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8bce:	49 ef       	ldi	r20, 0xF9	; 249
    8bd0:	50 e0       	ldi	r21, 0x00	; 0
    8bd2:	6c e0       	ldi	r22, 0x0C	; 12
    8bd4:	8c e0       	ldi	r24, 0x0C	; 12
    8bd6:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    8bda:	81 e4       	ldi	r24, 0x41	; 65
    8bdc:	90 e0       	ldi	r25, 0x00	; 0
    8bde:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
			ClearVram();
    8be2:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
			WaitVsync(20);
    8be6:	84 e1       	ldi	r24, 0x14	; 20
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	0c 94 a9 45 	jmp	0x8b52	; 0x8b52 <WaitVsync>

00008bee <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8bee:	80 93 67 0d 	sts	0x0D67, r24
	currFadeFrame=0;
    8bf2:	10 92 6b 0d 	sts	0x0D6B, r1
	fadeActive=true;
    8bf6:	81 e0       	ldi	r24, 0x01	; 1
    8bf8:	80 93 6a 0d 	sts	0x0D6A, r24
		
	if(blocking){
    8bfc:	66 23       	and	r22, r22
    8bfe:	21 f0       	breq	.+8      	; 0x8c08 <doFade+0x1a>
		while(fadeActive==true);
    8c00:	80 91 6a 0d 	lds	r24, 0x0D6A
    8c04:	81 11       	cpse	r24, r1
    8c06:	fc cf       	rjmp	.-8      	; 0x8c00 <doFade+0x12>
    8c08:	08 95       	ret

00008c0a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8c0a:	81 11       	cpse	r24, r1
    8c0c:	03 c0       	rjmp	.+6      	; 0x8c14 <FadeIn+0xa>
		DDRC=0xff;
    8c0e:	8f ef       	ldi	r24, 0xFF	; 255
    8c10:	87 b9       	out	0x07, r24	; 7
		return;
    8c12:	08 95       	ret
	}
	fadeStep=1;
    8c14:	91 e0       	ldi	r25, 0x01	; 1
    8c16:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=1;
    8c1a:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    8c1e:	0c 94 f7 45 	jmp	0x8bee	; 0x8bee <doFade>

00008c22 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8c22:	81 11       	cpse	r24, r1
    8c24:	02 c0       	rjmp	.+4      	; 0x8c2a <FadeOut+0x8>
		DDRC=0;
    8c26:	17 b8       	out	0x07, r1	; 7
		return;
    8c28:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8c2a:	9c e0       	ldi	r25, 0x0C	; 12
    8c2c:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=-1;
    8c30:	9f ef       	ldi	r25, 0xFF	; 255
    8c32:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    8c36:	0c 94 f7 45 	jmp	0x8bee	; 0x8bee <doFade>

00008c3a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8c3a:	80 91 6a 0d 	lds	r24, 0x0D6A
    8c3e:	88 23       	and	r24, r24
    8c40:	01 f1       	breq	.+64     	; 0x8c82 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8c42:	80 91 6b 0d 	lds	r24, 0x0D6B
    8c46:	81 11       	cpse	r24, r1
    8c48:	19 c0       	rjmp	.+50     	; 0x8c7c <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8c4a:	80 91 67 0d 	lds	r24, 0x0D67
    8c4e:	80 93 6b 0d 	sts	0x0D6B, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8c52:	e0 91 6c 0d 	lds	r30, 0x0D6C
    8c56:	f0 e0       	ldi	r31, 0x00	; 0
    8c58:	e5 52       	subi	r30, 0x25	; 37
    8c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    8c5c:	e4 91       	lpm	r30, Z
    8c5e:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8c60:	90 91 68 0d 	lds	r25, 0x0D68
    8c64:	80 91 6c 0d 	lds	r24, 0x0D6C
    8c68:	89 0f       	add	r24, r25
    8c6a:	80 93 6c 0d 	sts	0x0D6C, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8c6e:	88 23       	and	r24, r24
    8c70:	11 f0       	breq	.+4      	; 0x8c76 <ProcessFading+0x3c>
    8c72:	8d 30       	cpi	r24, 0x0D	; 13
    8c74:	31 f4       	brne	.+12     	; 0x8c82 <ProcessFading+0x48>
				fadeActive=false;
    8c76:	10 92 6a 0d 	sts	0x0D6A, r1
    8c7a:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8c7c:	81 50       	subi	r24, 0x01	; 1
    8c7e:	80 93 6b 0d 	sts	0x0D6B, r24
    8c82:	08 95       	ret

00008c84 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8c84:	0e 94 1d 46 	call	0x8c3a	; 0x8c3a <ProcessFading>
		ProcessSprites();
    8c88:	0c 94 16 44 	jmp	0x882c	; 0x882c <ProcessSprites>

00008c8c <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    8c8c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    8c8e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    8c90:	93 81       	ldd	r25, Z+3	; 0x03
    8c92:	9f 5f       	subi	r25, 0xFF	; 255
    8c94:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8c96:	42 81       	ldd	r20, Z+2	; 0x02
    8c98:	80 81       	ld	r24, Z
    8c9a:	26 81       	ldd	r18, Z+6	; 0x06
    8c9c:	37 81       	ldd	r19, Z+7	; 0x07
    8c9e:	94 17       	cp	r25, r20
    8ca0:	30 f4       	brcc	.+12     	; 0x8cae <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    8ca2:	f9 01       	movw	r30, r18
    8ca4:	e8 0f       	add	r30, r24
    8ca6:	f1 1d       	adc	r31, r1
    8ca8:	e8 0f       	add	r30, r24
    8caa:	f1 1d       	adc	r31, r1
    8cac:	12 c0       	rjmp	.+36     	; 0x8cd2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    8cae:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8cb0:	90 e0       	ldi	r25, 0x00	; 0
    8cb2:	01 96       	adiw	r24, 0x01	; 1
    8cb4:	61 81       	ldd	r22, Z+1	; 0x01
    8cb6:	70 e0       	ldi	r23, 0x00	; 0
    8cb8:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__divmodhi4>
    8cbc:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    8cbe:	81 11       	cpse	r24, r1
    8cc0:	02 c0       	rjmp	.+4      	; 0x8cc6 <LBGetNextFrame+0x3a>
    8cc2:	41 e0       	ldi	r20, 0x01	; 1
    8cc4:	44 83       	std	Z+4, r20	; 0x04
    8cc6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    8cc8:	88 0f       	add	r24, r24
    8cca:	99 1f       	adc	r25, r25
    8ccc:	f9 01       	movw	r30, r18
    8cce:	e8 0f       	add	r30, r24
    8cd0:	f9 1f       	adc	r31, r25
    8cd2:	80 81       	ld	r24, Z
    8cd4:	91 81       	ldd	r25, Z+1	; 0x01
}
    8cd6:	08 95       	ret

00008cd8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8cd8:	0f 93       	push	r16
    8cda:	1f 93       	push	r17
    8cdc:	cf 93       	push	r28
    8cde:	df 93       	push	r29
    8ce0:	1f 92       	push	r1
    8ce2:	cd b7       	in	r28, 0x3d	; 61
    8ce4:	de b7       	in	r29, 0x3e	; 62
    8ce6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    8ce8:	86 2f       	mov	r24, r22
    8cea:	69 83       	std	Y+1, r22	; 0x01
    8cec:	0e 94 81 37 	call	0x6f02	; 0x6f02 <ReadJoypad>
    8cf0:	d8 01       	movw	r26, r16
    8cf2:	15 96       	adiw	r26, 0x05	; 5
    8cf4:	9c 93       	st	X, r25
    8cf6:	8e 93       	st	-X, r24
    8cf8:	14 97       	sbiw	r26, 0x04	; 4
    8cfa:	69 81       	ldd	r22, Y+1	; 0x01
    8cfc:	e6 2f       	mov	r30, r22
    8cfe:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8d00:	00 97       	sbiw	r24, 0x00	; 0
    8d02:	51 f0       	breq	.+20     	; 0x8d18 <LBGetJoyPadState+0x40>
    8d04:	df 01       	movw	r26, r30
    8d06:	aa 0f       	add	r26, r26
    8d08:	bb 1f       	adc	r27, r27
    8d0a:	a1 52       	subi	r26, 0x21	; 33
    8d0c:	b3 4f       	sbci	r27, 0xF3	; 243
    8d0e:	2d 91       	ld	r18, X+
    8d10:	3c 91       	ld	r19, X
    8d12:	82 17       	cp	r24, r18
    8d14:	93 07       	cpc	r25, r19
    8d16:	21 f0       	breq	.+8      	; 0x8d20 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8d18:	d8 01       	movw	r26, r16
    8d1a:	16 96       	adiw	r26, 0x06	; 6
    8d1c:	1c 92       	st	X, r1
    8d1e:	07 c0       	rjmp	.+14     	; 0x8d2e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8d20:	d8 01       	movw	r26, r16
    8d22:	16 96       	adiw	r26, 0x06	; 6
    8d24:	2c 91       	ld	r18, X
    8d26:	16 97       	sbiw	r26, 0x06	; 6
    8d28:	2f 5f       	subi	r18, 0xFF	; 255
    8d2a:	16 96       	adiw	r26, 0x06	; 6
    8d2c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8d2e:	ee 0f       	add	r30, r30
    8d30:	ff 1f       	adc	r31, r31
    8d32:	e1 52       	subi	r30, 0x21	; 33
    8d34:	f3 4f       	sbci	r31, 0xF3	; 243
    8d36:	20 81       	ld	r18, Z
    8d38:	31 81       	ldd	r19, Z+1	; 0x01
    8d3a:	a9 01       	movw	r20, r18
    8d3c:	40 95       	com	r20
    8d3e:	50 95       	com	r21
    8d40:	48 23       	and	r20, r24
    8d42:	59 23       	and	r21, r25
    8d44:	d8 01       	movw	r26, r16
    8d46:	11 96       	adiw	r26, 0x01	; 1
    8d48:	5c 93       	st	X, r21
    8d4a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8d4c:	ac 01       	movw	r20, r24
    8d4e:	40 95       	com	r20
    8d50:	50 95       	com	r21
    8d52:	24 23       	and	r18, r20
    8d54:	35 23       	and	r19, r21
    8d56:	13 96       	adiw	r26, 0x03	; 3
    8d58:	3c 93       	st	X, r19
    8d5a:	2e 93       	st	-X, r18
    8d5c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8d5e:	91 83       	std	Z+1, r25	; 0x01
    8d60:	80 83       	st	Z, r24
}
    8d62:	0f 90       	pop	r0
    8d64:	df 91       	pop	r29
    8d66:	cf 91       	pop	r28
    8d68:	1f 91       	pop	r17
    8d6a:	0f 91       	pop	r16
    8d6c:	08 95       	ret

00008d6e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    8d6e:	90 ed       	ldi	r25, 0xD0	; 208
    8d70:	94 0f       	add	r25, r20
    8d72:	e0 91 6d 0d 	lds	r30, 0x0D6D
    8d76:	f0 91 6e 0d 	lds	r31, 0x0D6E
    8d7a:	9a 30       	cpi	r25, 0x0A	; 10
    8d7c:	38 f4       	brcc	.+14     	; 0x8d8c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    8d7e:	24 2f       	mov	r18, r20
    8d80:	30 e0       	ldi	r19, 0x00	; 0
    8d82:	2d 52       	subi	r18, 0x2D	; 45
    8d84:	31 09       	sbc	r19, r1
    8d86:	e2 0f       	add	r30, r18
    8d88:	f3 1f       	adc	r31, r19
    8d8a:	0c c0       	rjmp	.+24     	; 0x8da4 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    8d8c:	9f eb       	ldi	r25, 0xBF	; 191
    8d8e:	94 0f       	add	r25, r20
    8d90:	9a 31       	cpi	r25, 0x1A	; 26
    8d92:	38 f4       	brcc	.+14     	; 0x8da2 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    8d94:	50 e0       	ldi	r21, 0x00	; 0
    8d96:	44 53       	subi	r20, 0x34	; 52
    8d98:	51 09       	sbc	r21, r1
    8d9a:	e4 0f       	add	r30, r20
    8d9c:	f5 1f       	adc	r31, r21
    8d9e:	44 91       	lpm	r20, Z
    8da0:	03 c0       	rjmp	.+6      	; 0x8da8 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    8da2:	32 96       	adiw	r30, 0x02	; 2
    8da4:	e4 91       	lpm	r30, Z
    8da6:	4e 2f       	mov	r20, r30
    8da8:	50 e0       	ldi	r21, 0x00	; 0
    8daa:	0c 94 61 37 	jmp	0x6ec2	; 0x6ec2 <SetTile>

00008dae <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    8dae:	ff 92       	push	r15
    8db0:	0f 93       	push	r16
    8db2:	1f 93       	push	r17
    8db4:	cf 93       	push	r28
    8db6:	df 93       	push	r29
    8db8:	d8 2f       	mov	r29, r24
    8dba:	f6 2e       	mov	r15, r22
    8dbc:	8a 01       	movw	r16, r20
	u8 i = 0;
    8dbe:	c0 e0       	ldi	r28, 0x00	; 0
    8dc0:	8c 2f       	mov	r24, r28
    8dc2:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    8dc4:	f8 01       	movw	r30, r16
    8dc6:	ec 0f       	add	r30, r28
    8dc8:	f1 1d       	adc	r31, r1
    8dca:	44 91       	lpm	r20, Z
    8dcc:	44 23       	and	r20, r20
    8dce:	29 f0       	breq	.+10     	; 0x8dda <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    8dd0:	6f 2d       	mov	r22, r15
    8dd2:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
		i++;
    8dd6:	cf 5f       	subi	r28, 0xFF	; 255
    8dd8:	f3 cf       	rjmp	.-26     	; 0x8dc0 <LBPrint+0x12>
	}
}
    8dda:	df 91       	pop	r29
    8ddc:	cf 91       	pop	r28
    8dde:	1f 91       	pop	r17
    8de0:	0f 91       	pop	r16
    8de2:	ff 90       	pop	r15
    8de4:	08 95       	ret

00008de6 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    8de6:	ff 92       	push	r15
    8de8:	0f 93       	push	r16
    8dea:	1f 93       	push	r17
    8dec:	cf 93       	push	r28
    8dee:	df 93       	push	r29
    8df0:	28 2f       	mov	r18, r24
    8df2:	06 2f       	mov	r16, r22
    8df4:	84 2f       	mov	r24, r20
    8df6:	dd ef       	ldi	r29, 0xFD	; 253
    8df8:	d2 0f       	add	r29, r18
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    8dfa:	9a e0       	ldi	r25, 0x0A	; 10
    8dfc:	f9 2e       	mov	r15, r25
    8dfe:	1f ef       	ldi	r17, 0xFF	; 255
    8e00:	12 0f       	add	r17, r18
    8e02:	6f 2d       	mov	r22, r15
    8e04:	0e 94 53 5b 	call	0xb6a6	; 0xb6a6 <__udivmodqi4>
    8e08:	c8 2f       	mov	r28, r24
    8e0a:	40 e3       	ldi	r20, 0x30	; 48
    8e0c:	49 0f       	add	r20, r25
    8e0e:	60 2f       	mov	r22, r16
    8e10:	82 2f       	mov	r24, r18
    8e12:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
		value /= 10;
    8e16:	8c 2f       	mov	r24, r28
    8e18:	21 2f       	mov	r18, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    8e1a:	1d 13       	cpse	r17, r29
    8e1c:	f0 cf       	rjmp	.-32     	; 0x8dfe <LBPrintByte+0x18>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
	}
}
    8e1e:	df 91       	pop	r29
    8e20:	cf 91       	pop	r28
    8e22:	1f 91       	pop	r17
    8e24:	0f 91       	pop	r16
    8e26:	ff 90       	pop	r15
    8e28:	08 95       	ret

00008e2a <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    8e2a:	cf 92       	push	r12
    8e2c:	df 92       	push	r13
    8e2e:	ef 92       	push	r14
    8e30:	ff 92       	push	r15
    8e32:	0f 93       	push	r16
    8e34:	1f 93       	push	r17
    8e36:	cf 93       	push	r28
    8e38:	df 93       	push	r29
    8e3a:	1f 92       	push	r1
    8e3c:	cd b7       	in	r28, 0x3d	; 61
    8e3e:	de b7       	in	r29, 0x3e	; 62
    8e40:	d8 2e       	mov	r13, r24
    8e42:	06 2f       	mov	r16, r22
    8e44:	ca 01       	movw	r24, r20
    8e46:	1b ef       	ldi	r17, 0xFB	; 251
    8e48:	1d 0d       	add	r17, r13
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x, y, value % 10 + 48);
    8e4a:	2a e0       	ldi	r18, 0x0A	; 10
    8e4c:	e2 2e       	mov	r14, r18
    8e4e:	f1 2c       	mov	r15, r1
    8e50:	b7 01       	movw	r22, r14
    8e52:	0e 94 5f 5b 	call	0xb6be	; 0xb6be <__udivmodhi4>
    8e56:	c6 2e       	mov	r12, r22
    8e58:	40 e3       	ldi	r20, 0x30	; 48
    8e5a:	48 0f       	add	r20, r24
    8e5c:	60 2f       	mov	r22, r16
    8e5e:	8d 2d       	mov	r24, r13
    8e60:	79 83       	std	Y+1, r23	; 0x01
    8e62:	0e 94 b7 46 	call	0x8d6e	; 0x8d6e <LBPrintChar>
		value /= 10;
    8e66:	8c 2d       	mov	r24, r12
    8e68:	79 81       	ldd	r23, Y+1	; 0x01
    8e6a:	97 2f       	mov	r25, r23
		x--;
    8e6c:	da 94       	dec	r13
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    8e6e:	d1 12       	cpse	r13, r17
    8e70:	ef cf       	rjmp	.-34     	; 0x8e50 <LBPrintInt+0x26>
	{
		LBPrintChar(x, y, value % 10 + 48);
		value /= 10;
		x--;
	}
}
    8e72:	0f 90       	pop	r0
    8e74:	df 91       	pop	r29
    8e76:	cf 91       	pop	r28
    8e78:	1f 91       	pop	r17
    8e7a:	0f 91       	pop	r16
    8e7c:	ff 90       	pop	r15
    8e7e:	ef 90       	pop	r14
    8e80:	df 90       	pop	r13
    8e82:	cf 90       	pop	r12
    8e84:	08 95       	ret

00008e86 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    8e86:	af 92       	push	r10
    8e88:	cf 92       	push	r12
    8e8a:	ef 92       	push	r14
    8e8c:	ff 92       	push	r15
    8e8e:	0f 93       	push	r16
    8e90:	1f 93       	push	r17
    8e92:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    8e94:	cb 01       	movw	r24, r22
    8e96:	82 0f       	add	r24, r18
    8e98:	91 1d       	adc	r25, r1
    8e9a:	e8 16       	cp	r14, r24
    8e9c:	f9 06       	cpc	r15, r25
    8e9e:	88 f4       	brcc	.+34     	; 0x8ec2 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    8ea0:	ea 0c       	add	r14, r10
    8ea2:	f1 1c       	adc	r15, r1
    8ea4:	6e 15       	cp	r22, r14
    8ea6:	7f 05       	cpc	r23, r15
    8ea8:	60 f4       	brcc	.+24     	; 0x8ec2 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    8eaa:	cf 01       	movw	r24, r30
    8eac:	84 0f       	add	r24, r20
    8eae:	91 1d       	adc	r25, r1
    8eb0:	08 17       	cp	r16, r24
    8eb2:	19 07       	cpc	r17, r25
    8eb4:	30 f4       	brcc	.+12     	; 0x8ec2 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    8eb6:	0c 0d       	add	r16, r12
    8eb8:	11 1d       	adc	r17, r1
    8eba:	81 e0       	ldi	r24, 0x01	; 1
    8ebc:	e0 17       	cp	r30, r16
    8ebe:	f1 07       	cpc	r31, r17
    8ec0:	08 f0       	brcs	.+2      	; 0x8ec4 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    8ec2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    8ec4:	1f 91       	pop	r17
    8ec6:	0f 91       	pop	r16
    8ec8:	ff 90       	pop	r15
    8eca:	ef 90       	pop	r14
    8ecc:	cf 90       	pop	r12
    8ece:	af 90       	pop	r10
    8ed0:	08 95       	ret

00008ed2 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    8ed2:	cf 93       	push	r28
    8ed4:	df 93       	push	r29
    8ed6:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8ed8:	c0 e0       	ldi	r28, 0x00	; 0
    8eda:	cd 17       	cp	r28, r29
    8edc:	31 f0       	breq	.+12     	; 0x8eea <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8ede:	8f ef       	ldi	r24, 0xFF	; 255
    8ee0:	9f ef       	ldi	r25, 0xFF	; 255
    8ee2:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8ee6:	cf 5f       	subi	r28, 0xFF	; 255
    8ee8:	f8 cf       	rjmp	.-16     	; 0x8eda <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8eea:	df 91       	pop	r29
    8eec:	cf 91       	pop	r28
    8eee:	08 95       	ret

00008ef0 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    8ef0:	df 92       	push	r13
    8ef2:	ef 92       	push	r14
    8ef4:	ff 92       	push	r15
    8ef6:	0f 93       	push	r16
    8ef8:	1f 93       	push	r17
    8efa:	cf 93       	push	r28
    8efc:	df 93       	push	r29
    8efe:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8f00:	fb 01       	movw	r30, r22
    8f02:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8f04:	31 96       	adiw	r30, 0x01	; 1
    8f06:	64 91       	lpm	r22, Z
    8f08:	5f ef       	ldi	r21, 0xFF	; 255
    8f0a:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    8f0c:	24 2f       	mov	r18, r20
    8f0e:	21 70       	andi	r18, 0x01	; 1
    8f10:	40 ff       	sbrs	r20, 0
    8f12:	04 c0       	rjmp	.+8      	; 0x8f1c <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    8f14:	95 2f       	mov	r25, r21
		dx=-1;
    8f16:	ff 24       	eor	r15, r15
    8f18:	fa 94       	dec	r15
    8f1a:	03 c0       	rjmp	.+6      	; 0x8f22 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    8f1c:	ff 24       	eor	r15, r15
    8f1e:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    8f20:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    8f22:	41 ff       	sbrs	r20, 1
    8f24:	05 c0       	rjmp	.+10     	; 0x8f30 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    8f26:	7f ef       	ldi	r23, 0xFF	; 255
    8f28:	76 0f       	add	r23, r22
		dy=-1;
    8f2a:	ee 24       	eor	r14, r14
    8f2c:	ea 94       	dec	r14
    8f2e:	03 c0       	rjmp	.+6      	; 0x8f36 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    8f30:	ee 24       	eor	r14, r14
    8f32:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    8f34:	70 e0       	ldi	r23, 0x00	; 0
    8f36:	21 11       	cpse	r18, r1
    8f38:	01 c0       	rjmp	.+2      	; 0x8f3c <LBMapSprite+0x4c>
    8f3a:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8f3c:	00 e0       	ldi	r16, 0x00	; 0
    8f3e:	06 17       	cp	r16, r22
    8f40:	09 f1       	breq	.+66     	; 0x8f84 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8f42:	71 03       	mulsu	r23, r17
    8f44:	e0 01       	movw	r28, r0
    8f46:	11 24       	eor	r1, r1
    8f48:	d8 2e       	mov	r13, r24
    8f4a:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    8f4c:	8d 15       	cp	r24, r13
    8f4e:	b1 f0       	breq	.+44     	; 0x8f7c <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8f50:	9e 01       	movw	r18, r28
    8f52:	29 0f       	add	r18, r25
    8f54:	31 1d       	adc	r19, r1
    8f56:	97 fd       	sbrc	r25, 7
    8f58:	3a 95       	dec	r19
    8f5a:	2e 5f       	subi	r18, 0xFE	; 254
    8f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    8f5e:	fd 01       	movw	r30, r26
    8f60:	e2 0f       	add	r30, r18
    8f62:	f3 1f       	adc	r31, r19
    8f64:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    8f66:	34 e0       	ldi	r19, 0x04	; 4
    8f68:	83 9f       	mul	r24, r19
    8f6a:	f0 01       	movw	r30, r0
    8f6c:	11 24       	eor	r1, r1
    8f6e:	e0 57       	subi	r30, 0x70	; 112
    8f70:	f0 4f       	sbci	r31, 0xF0	; 240
    8f72:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    8f74:	8f 5f       	subi	r24, 0xFF	; 255
    8f76:	43 83       	std	Z+3, r20	; 0x03
    8f78:	9f 0d       	add	r25, r15
    8f7a:	e8 cf       	rjmp	.-48     	; 0x8f4c <LBMapSprite+0x5c>
    8f7c:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8f7e:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8f80:	95 2f       	mov	r25, r21
    8f82:	dd cf       	rjmp	.-70     	; 0x8f3e <LBMapSprite+0x4e>
	}
}
    8f84:	df 91       	pop	r29
    8f86:	cf 91       	pop	r28
    8f88:	1f 91       	pop	r17
    8f8a:	0f 91       	pop	r16
    8f8c:	ff 90       	pop	r15
    8f8e:	ef 90       	pop	r14
    8f90:	df 90       	pop	r13
    8f92:	08 95       	ret

00008f94 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    8f94:	df 92       	push	r13
    8f96:	ef 92       	push	r14
    8f98:	ff 92       	push	r15
    8f9a:	0f 93       	push	r16
    8f9c:	1f 93       	push	r17
    8f9e:	cf 93       	push	r28
    8fa0:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    8fa2:	a0 91 9e 0c 	lds	r26, 0x0C9E
    8fa6:	98 e0       	ldi	r25, 0x08	; 8
    8fa8:	a9 9f       	mul	r26, r25
    8faa:	70 01       	movw	r14, r0
    8fac:	11 24       	eor	r1, r1
    8fae:	50 e0       	ldi	r21, 0x00	; 0
    8fb0:	38 ef       	ldi	r19, 0xF8	; 248
    8fb2:	a3 9f       	mul	r26, r19
    8fb4:	30 2d       	mov	r19, r0
    8fb6:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    8fb8:	70 e0       	ldi	r23, 0x00	; 0
    8fba:	70 17       	cp	r23, r16
    8fbc:	09 f1       	breq	.+66     	; 0x9000 <LBMoveSprite+0x6c>
    8fbe:	d4 2e       	mov	r13, r20
    8fc0:	13 2f       	mov	r17, r19
    8fc2:	14 0f       	add	r17, r20
    8fc4:	b8 2f       	mov	r27, r24
    8fc6:	b2 0f       	add	r27, r18
    8fc8:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    8fca:	8b 17       	cp	r24, r27
    8fcc:	a9 f0       	breq	.+42     	; 0x8ff8 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    8fce:	c4 e0       	ldi	r28, 0x04	; 4
    8fd0:	8c 9f       	mul	r24, r28
    8fd2:	f0 01       	movw	r30, r0
    8fd4:	11 24       	eor	r1, r1
    8fd6:	ef 01       	movw	r28, r30
    8fd8:	c0 57       	subi	r28, 0x70	; 112
    8fda:	d0 4f       	sbci	r29, 0xF0	; 240
    8fdc:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    8fde:	a0 32       	cpi	r26, 0x20	; 32
    8fe0:	28 f4       	brcc	.+10     	; 0x8fec <LBMoveSprite+0x58>
    8fe2:	e4 16       	cp	r14, r20
    8fe4:	f5 06       	cpc	r15, r21
    8fe6:	14 f4       	brge	.+4      	; 0x8fec <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    8fe8:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    8fea:	03 c0       	rjmp	.+6      	; 0x8ff2 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8fec:	e0 57       	subi	r30, 0x70	; 112
    8fee:	f0 4f       	sbci	r31, 0xF0	; 240
    8ff0:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    8ff2:	8f 5f       	subi	r24, 0xFF	; 255
    8ff4:	98 5f       	subi	r25, 0xF8	; 248
    8ff6:	e9 cf       	rjmp	.-46     	; 0x8fca <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    8ff8:	7f 5f       	subi	r23, 0xFF	; 255
    8ffa:	48 5f       	subi	r20, 0xF8	; 248
    8ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    8ffe:	dd cf       	rjmp	.-70     	; 0x8fba <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9000:	df 91       	pop	r29
    9002:	cf 91       	pop	r28
    9004:	1f 91       	pop	r17
    9006:	0f 91       	pop	r16
    9008:	ff 90       	pop	r15
    900a:	ef 90       	pop	r14
    900c:	df 90       	pop	r13
    900e:	08 95       	ret

00009010 <LBRotateSprites>:

void LBRotateSprites()
{
    9010:	80 e0       	ldi	r24, 0x00	; 0
    9012:	90 e0       	ldi	r25, 0x00	; 0
    9014:	dc 01       	movw	r26, r24
    9016:	a0 57       	subi	r26, 0x70	; 112
    9018:	b0 4f       	sbci	r27, 0xF0	; 240
    901a:	fc 01       	movw	r30, r24
    901c:	ee 5f       	subi	r30, 0xFE	; 254
    901e:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9020:	13 96       	adiw	r26, 0x03	; 3
    9022:	2c 91       	ld	r18, X
    9024:	13 97       	sbiw	r26, 0x03	; 3
    9026:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9028:	12 96       	adiw	r26, 0x02	; 2
    902a:	2c 91       	ld	r18, X
    902c:	12 97       	sbiw	r26, 0x02	; 2
    902e:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9030:	2c 91       	ld	r18, X
    9032:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9034:	11 96       	adiw	r26, 0x01	; 1
    9036:	2c 91       	ld	r18, X
    9038:	21 83       	std	Z+1, r18	; 0x01
    903a:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    903c:	8c 32       	cpi	r24, 0x2C	; 44
    903e:	91 05       	cpc	r25, r1
    9040:	49 f7       	brne	.-46     	; 0x9014 <LBRotateSprites+0x4>
    9042:	80 91 01 05 	lds	r24, 0x0501
    9046:	20 e0       	ldi	r18, 0x00	; 0
    9048:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    904a:	94 e0       	ldi	r25, 0x04	; 4
    904c:	89 9f       	mul	r24, r25
    904e:	d0 01       	movw	r26, r0
    9050:	11 24       	eor	r1, r1
    9052:	a0 57       	subi	r26, 0x70	; 112
    9054:	b0 4f       	sbci	r27, 0xF0	; 240
    9056:	13 96       	adiw	r26, 0x03	; 3
    9058:	9c 91       	ld	r25, X
    905a:	13 97       	sbiw	r26, 0x03	; 3
    905c:	f9 01       	movw	r30, r18
    905e:	ee 5f       	subi	r30, 0xFE	; 254
    9060:	fa 4f       	sbci	r31, 0xFA	; 250
    9062:	97 a7       	std	Z+47, r25	; 0x2f
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9064:	12 96       	adiw	r26, 0x02	; 2
    9066:	9c 91       	ld	r25, X
    9068:	12 97       	sbiw	r26, 0x02	; 2
    906a:	96 a7       	std	Z+46, r25	; 0x2e
		sprites[i].x = extendedSprites[rotate_index].x;
    906c:	9c 91       	ld	r25, X
    906e:	94 a7       	std	Z+44, r25	; 0x2c
		sprites[i].y = extendedSprites[rotate_index].y;
    9070:	11 96       	adiw	r26, 0x01	; 1
    9072:	9c 91       	ld	r25, X
    9074:	95 a7       	std	Z+45, r25	; 0x2d
		rotate_index += 1;
    9076:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9078:	84 31       	cpi	r24, 0x14	; 20
    907a:	08 f0       	brcs	.+2      	; 0x907e <LBRotateSprites+0x6e>
    907c:	8b e0       	ldi	r24, 0x0B	; 11
    907e:	2c 5f       	subi	r18, 0xFC	; 252
    9080:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    9082:	2c 30       	cpi	r18, 0x0C	; 12
    9084:	31 05       	cpc	r19, r1
    9086:	09 f7       	brne	.-62     	; 0x904a <LBRotateSprites+0x3a>
    9088:	80 93 01 05 	sts	0x0501, r24
    908c:	08 95       	ret

0000908e <init_game_state>:
char* enemy_shot_anim[1];
char* expl_anim[3];

void init_game_state()
{
	game.lives = LIVES;
    908e:	e1 e9       	ldi	r30, 0x91	; 145
    9090:	fd e0       	ldi	r31, 0x0D	; 13
    9092:	85 e0       	ldi	r24, 0x05	; 5
    9094:	86 87       	std	Z+14, r24	; 0x0e
	game.score = 0;
    9096:	11 86       	std	Z+9, r1	; 0x09
    9098:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    909a:	13 86       	std	Z+11, r1	; 0x0b
    909c:	12 86       	std	Z+10, r1	; 0x0a
    909e:	08 95       	ret

000090a0 <init_enemy_state>:
}

void init_enemy_state()
{
    90a0:	80 e0       	ldi	r24, 0x00	; 0
    90a2:	90 e0       	ldi	r25, 0x00	; 0
    90a4:	9c 01       	movw	r18, r24
    90a6:	2f 56       	subi	r18, 0x6F	; 111
    90a8:	32 4f       	sbci	r19, 0xF2	; 242
    90aa:	f9 01       	movw	r30, r18
    90ac:	eb 54       	subi	r30, 0x4B	; 75
    90ae:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    90b0:	10 82       	st	Z, r1
    90b2:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    90b4:	10 82       	st	Z, r1
    90b6:	8e 5b       	subi	r24, 0xBE	; 190
    90b8:	9f 4f       	sbci	r25, 0xFF	; 255
	game.time = 0;
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    90ba:	8a 34       	cpi	r24, 0x4A	; 74
    90bc:	21 e0       	ldi	r18, 0x01	; 1
    90be:	92 07       	cpc	r25, r18
    90c0:	89 f7       	brne	.-30     	; 0x90a4 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    90c2:	10 92 a9 0d 	sts	0x0DA9, r1
    90c6:	08 95       	ret

000090c8 <init_player_state>:
}

void init_player_state()
{
	game.player.direction = D_RIGHT;
    90c8:	81 e0       	ldi	r24, 0x01	; 1
    90ca:	80 93 bd 0d 	sts	0x0DBD, r24
	game.player.flags = IDLE;
    90ce:	98 e0       	ldi	r25, 0x08	; 8
    90d0:	90 93 bb 0d 	sts	0x0DBB, r25
	game.player.width = 2;
    90d4:	92 e0       	ldi	r25, 0x02	; 2
    90d6:	90 93 be 0d 	sts	0x0DBE, r25
	game.player.height = 3;
    90da:	93 e0       	ldi	r25, 0x03	; 3
    90dc:	90 93 bf 0d 	sts	0x0DBF, r25
	game.player.shield = PLAYER_SHIELD;
    90e0:	2a e0       	ldi	r18, 0x0A	; 10
    90e2:	20 93 c0 0d 	sts	0x0DC0, r18
	game.player.idle.anim_count = 1;
    90e6:	80 93 10 0e 	sts	0x0E10, r24
	game.player.idle.frames_per_anim = 1;
    90ea:	80 93 11 0e 	sts	0x0E11, r24
	game.player.idle.anims = idle_anim;
    90ee:	22 ef       	ldi	r18, 0xF2	; 242
    90f0:	3f e0       	ldi	r19, 0x0F	; 15
    90f2:	30 93 16 0e 	sts	0x0E16, r19
    90f6:	20 93 15 0e 	sts	0x0E15, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    90fa:	27 e3       	ldi	r18, 0x37	; 55
    90fc:	3c e2       	ldi	r19, 0x2C	; 44
    90fe:	30 93 f3 0f 	sts	0x0FF3, r19
    9102:	20 93 f2 0f 	sts	0x0FF2, r18
	
	game.player.jump.anim_count = 1;
    9106:	80 93 20 0e 	sts	0x0E20, r24
	game.player.jump.frames_per_anim = 1;
    910a:	80 93 21 0e 	sts	0x0E21, r24
	game.player.jump.anims = jump_anim;
    910e:	2f e6       	ldi	r18, 0x6F	; 111
    9110:	3d e0       	ldi	r19, 0x0D	; 13
    9112:	30 93 26 0e 	sts	0x0E26, r19
    9116:	20 93 25 0e 	sts	0x0E25, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    911a:	2f e0       	ldi	r18, 0x0F	; 15
    911c:	3c e2       	ldi	r19, 0x2C	; 44
    911e:	30 93 70 0d 	sts	0x0D70, r19
    9122:	20 93 6f 0d 	sts	0x0D6F, r18
	
	game.player.prone.anim_count = 1;
    9126:	80 93 28 0e 	sts	0x0E28, r24
	game.player.prone.frames_per_anim = 1;
    912a:	80 93 29 0e 	sts	0x0E29, r24
	game.player.prone.anims = prone_anim;
    912e:	2a e8       	ldi	r18, 0x8A	; 138
    9130:	3f e0       	ldi	r19, 0x0F	; 15
    9132:	30 93 2e 0e 	sts	0x0E2E, r19
    9136:	20 93 2d 0e 	sts	0x0E2D, r18
	game.player.prone.anims[0] = (char*) map_hero_prone;
    913a:	2a e0       	ldi	r18, 0x0A	; 10
    913c:	3c e2       	ldi	r19, 0x2C	; 44
    913e:	30 93 8b 0f 	sts	0x0F8B, r19
    9142:	20 93 8a 0f 	sts	0x0F8A, r18
	
	game.player.expl.anim_count = 3;
    9146:	90 93 30 0e 	sts	0x0E30, r25
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    914a:	85 e0       	ldi	r24, 0x05	; 5
    914c:	80 93 31 0e 	sts	0x0E31, r24
	game.player.expl.anims = expl_anim;
    9150:	8c ee       	ldi	r24, 0xEC	; 236
    9152:	9f e0       	ldi	r25, 0x0F	; 15
    9154:	90 93 36 0e 	sts	0x0E36, r25
    9158:	80 93 35 0e 	sts	0x0E35, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    915c:	85 e4       	ldi	r24, 0x45	; 69
    915e:	9c e2       	ldi	r25, 0x2C	; 44
    9160:	90 93 ed 0f 	sts	0x0FED, r25
    9164:	80 93 ec 0f 	sts	0x0FEC, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    9168:	82 e4       	ldi	r24, 0x42	; 66
    916a:	9c e2       	ldi	r25, 0x2C	; 44
    916c:	90 93 ef 0f 	sts	0x0FEF, r25
    9170:	80 93 ee 0f 	sts	0x0FEE, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    9174:	8f e3       	ldi	r24, 0x3F	; 63
    9176:	9c e2       	ldi	r25, 0x2C	; 44
    9178:	90 93 f1 0f 	sts	0x0FF1, r25
    917c:	80 93 f0 0f 	sts	0x0FF0, r24
	
	game.player.run.anim_count = 4;
    9180:	84 e0       	ldi	r24, 0x04	; 4
    9182:	80 93 18 0e 	sts	0x0E18, r24
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    9186:	8c e0       	ldi	r24, 0x0C	; 12
    9188:	80 93 19 0e 	sts	0x0E19, r24
	game.player.run.anims = run_anim;
    918c:	80 ee       	ldi	r24, 0xE0	; 224
    918e:	9f e0       	ldi	r25, 0x0F	; 15
    9190:	90 93 1e 0e 	sts	0x0E1E, r25
    9194:	80 93 1d 0e 	sts	0x0E1D, r24
	game.player.run.anims[0] = (char*) map_hero_step_0;
    9198:	8f e2       	ldi	r24, 0x2F	; 47
    919a:	9c e2       	ldi	r25, 0x2C	; 44
    919c:	90 93 e1 0f 	sts	0x0FE1, r25
    91a0:	80 93 e0 0f 	sts	0x0FE0, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    91a4:	87 e2       	ldi	r24, 0x27	; 39
    91a6:	9c e2       	ldi	r25, 0x2C	; 44
    91a8:	90 93 e3 0f 	sts	0x0FE3, r25
    91ac:	80 93 e2 0f 	sts	0x0FE2, r24
	game.player.run.anims[2] = (char*) map_hero_step_2;
    91b0:	8f e1       	ldi	r24, 0x1F	; 31
    91b2:	9c e2       	ldi	r25, 0x2C	; 44
    91b4:	90 93 e5 0f 	sts	0x0FE5, r25
    91b8:	80 93 e4 0f 	sts	0x0FE4, r24
	game.player.run.anims[3] = (char*) map_hero_step_3;
    91bc:	87 e1       	ldi	r24, 0x17	; 23
    91be:	9c e2       	ldi	r25, 0x2C	; 44
    91c0:	90 93 e7 0f 	sts	0x0FE7, r25
    91c4:	80 93 e6 0f 	sts	0x0FE6, r24
    91c8:	e5 ed       	ldi	r30, 0xD5	; 213
    91ca:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    91cc:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    91ce:	2a ee       	ldi	r18, 0xEA	; 234
    91d0:	3f e0       	ldi	r19, 0x0F	; 15
    91d2:	df 01       	movw	r26, r30
    91d4:	14 97       	sbiw	r26, 0x04	; 4
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    91d6:	8c 93       	st	X, r24
    91d8:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    91da:	1c 92       	st	X, r1
    91dc:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    91de:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    91e0:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    91e2:	35 83       	std	Z+5, r19	; 0x05
    91e4:	24 83       	std	Z+4, r18	; 0x04
    91e6:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.run.anims[0] = (char*) map_hero_step_0;
	game.player.run.anims[1] = (char*) map_hero_step_1;
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    91e8:	9e e0       	ldi	r25, 0x0E	; 14
    91ea:	e3 32       	cpi	r30, 0x23	; 35
    91ec:	f9 07       	cpc	r31, r25
    91ee:	89 f7       	brne	.-30     	; 0x91d2 <init_player_state+0x10a>
    91f0:	89 ee       	ldi	r24, 0xE9	; 233
    91f2:	9b e2       	ldi	r25, 0x2B	; 43
    91f4:	90 93 eb 0f 	sts	0x0FEB, r25
    91f8:	80 93 ea 0f 	sts	0x0FEA, r24
    91fc:	08 95       	ret

000091fe <init_enemy_spider>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    91fe:	af 92       	push	r10
    9200:	bf 92       	push	r11
    9202:	cf 92       	push	r12
    9204:	df 92       	push	r13
    9206:	ef 92       	push	r14
    9208:	ff 92       	push	r15
    920a:	1f 93       	push	r17
    920c:	cf 93       	push	r28
    920e:	df 93       	push	r29
    9210:	5a 01       	movw	r10, r20
	game.enemies[i].active = 1;
    9212:	22 e4       	ldi	r18, 0x42	; 66
    9214:	82 9f       	mul	r24, r18
    9216:	c0 01       	movw	r24, r0
    9218:	11 24       	eor	r1, r1
    921a:	ec 01       	movw	r28, r24
    921c:	cf 56       	subi	r28, 0x6F	; 111
    921e:	d2 4f       	sbci	r29, 0xF2	; 242
    9220:	fe 01       	movw	r30, r28
    9222:	eb 54       	subi	r30, 0x4B	; 75
    9224:	ff 4f       	sbci	r31, 0xFF	; 255
    9226:	11 e0       	ldi	r17, 0x01	; 1
    9228:	10 83       	st	Z, r17
	game.enemies[i].direction = D_LEFT;
    922a:	32 96       	adiw	r30, 0x02	; 2
    922c:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    922e:	31 97       	sbiw	r30, 0x01	; 1
    9230:	88 e0       	ldi	r24, 0x08	; 8
    9232:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    9234:	32 96       	adiw	r30, 0x02	; 2
    9236:	10 83       	st	Z, r17
	game.enemies[i].height = 1;
    9238:	31 96       	adiw	r30, 0x01	; 1
    923a:	10 83       	st	Z, r17
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    923c:	31 96       	adiw	r30, 0x01	; 1
    923e:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    9240:	31 96       	adiw	r30, 0x01	; 1
    9242:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    9244:	31 96       	adiw	r30, 0x01	; 1
    9246:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    9248:	31 96       	adiw	r30, 0x01	; 1
    924a:	82 e0       	ldi	r24, 0x02	; 2
    924c:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    924e:	7c 96       	adiw	r30, 0x1c	; 28
    9250:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    9252:	31 96       	adiw	r30, 0x01	; 1
    9254:	8a e0       	ldi	r24, 0x0A	; 10
    9256:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    9258:	de 01       	movw	r26, r28
    925a:	a2 52       	subi	r26, 0x22	; 34
    925c:	bf 4f       	sbci	r27, 0xFF	; 255
    925e:	ec e8       	ldi	r30, 0x8C	; 140
    9260:	ff e0       	ldi	r31, 0x0F	; 15
    9262:	ed 93       	st	X+, r30
    9264:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    9266:	80 ee       	ldi	r24, 0xE0	; 224
    9268:	9b e2       	ldi	r25, 0x2B	; 43
    926a:	91 83       	std	Z+1, r25	; 0x01
    926c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    926e:	8d ed       	ldi	r24, 0xDD	; 221
    9270:	9b e2       	ldi	r25, 0x2B	; 43
    9272:	93 83       	std	Z+3, r25	; 0x03
    9274:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    9276:	fe 01       	movw	r30, r28
    9278:	ec 54       	subi	r30, 0x4C	; 76
    927a:	ff 4f       	sbci	r31, 0xFF	; 255
    927c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    927e:	32 97       	sbiw	r30, 0x02	; 2
    9280:	11 82       	std	Z+1, r1	; 0x01
    9282:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    9284:	3c 97       	sbiw	r30, 0x0c	; 12
    9286:	10 82       	st	Z, r1
    9288:	11 82       	std	Z+1, r1	; 0x01
    928a:	12 82       	std	Z+2, r1	; 0x02
    928c:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    928e:	80 e0       	ldi	r24, 0x00	; 0
    9290:	90 e0       	ldi	r25, 0x00	; 0
    9292:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    9296:	6b 01       	movw	r12, r22
    9298:	7c 01       	movw	r14, r24
    929a:	fe 01       	movw	r30, r28
    929c:	e6 55       	subi	r30, 0x56	; 86
    929e:	ff 4f       	sbci	r31, 0xFF	; 255
    92a0:	60 83       	st	Z, r22
    92a2:	71 83       	std	Z+1, r23	; 0x01
    92a4:	82 83       	std	Z+2, r24	; 0x02
    92a6:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    92a8:	b5 01       	movw	r22, r10
    92aa:	80 e0       	ldi	r24, 0x00	; 0
    92ac:	90 e0       	ldi	r25, 0x00	; 0
    92ae:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    92b2:	fe 01       	movw	r30, r28
    92b4:	e2 55       	subi	r30, 0x52	; 82
    92b6:	ff 4f       	sbci	r31, 0xFF	; 255
    92b8:	60 83       	st	Z, r22
    92ba:	71 83       	std	Z+1, r23	; 0x01
    92bc:	82 83       	std	Z+2, r24	; 0x02
    92be:	93 83       	std	Z+3, r25	; 0x03
	
	game.enemies[i].expl.anim_count = 3;
    92c0:	f3 96       	adiw	r30, 0x33	; 51
    92c2:	23 e0       	ldi	r18, 0x03	; 3
    92c4:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    92c6:	31 96       	adiw	r30, 0x01	; 1
    92c8:	25 e0       	ldi	r18, 0x05	; 5
    92ca:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    92cc:	de 01       	movw	r26, r28
    92ce:	aa 51       	subi	r26, 0x1A	; 26
    92d0:	bf 4f       	sbci	r27, 0xFF	; 255
    92d2:	ec ee       	ldi	r30, 0xEC	; 236
    92d4:	ff e0       	ldi	r31, 0x0F	; 15
    92d6:	11 96       	adiw	r26, 0x01	; 1
    92d8:	fc 93       	st	X, r31
    92da:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    92dc:	25 e4       	ldi	r18, 0x45	; 69
    92de:	3c e2       	ldi	r19, 0x2C	; 44
    92e0:	31 83       	std	Z+1, r19	; 0x01
    92e2:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    92e4:	22 e4       	ldi	r18, 0x42	; 66
    92e6:	3c e2       	ldi	r19, 0x2C	; 44
    92e8:	33 83       	std	Z+3, r19	; 0x03
    92ea:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    92ec:	2f e3       	ldi	r18, 0x3F	; 63
    92ee:	3c e2       	ldi	r19, 0x2C	; 44
    92f0:	35 83       	std	Z+5, r19	; 0x05
    92f2:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    92f4:	fe 01       	movw	r30, r28
    92f6:	e2 53       	subi	r30, 0x32	; 50
    92f8:	ff 4f       	sbci	r31, 0xFF	; 255
    92fa:	10 83       	st	Z, r17
		game.enemies[i].shot[j].active = 0;
    92fc:	31 96       	adiw	r30, 0x01	; 1
    92fe:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    9300:	32 97       	sbiw	r30, 0x02	; 2
    9302:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    9304:	34 96       	adiw	r30, 0x04	; 4
    9306:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    9308:	31 96       	adiw	r30, 0x01	; 1
    930a:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    930c:	50 97       	sbiw	r26, 0x10	; 16
    930e:	e8 ee       	ldi	r30, 0xE8	; 232
    9310:	ff e0       	ldi	r31, 0x0F	; 15
    9312:	ed 93       	st	X+, r30
    9314:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9316:	26 ee       	ldi	r18, 0xE6	; 230
    9318:	3b e2       	ldi	r19, 0x2B	; 43
    931a:	31 83       	std	Z+1, r19	; 0x01
    931c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = 0;
    931e:	fe 01       	movw	r30, r28
    9320:	e6 53       	subi	r30, 0x36	; 54
    9322:	ff 4f       	sbci	r31, 0xFF	; 255
    9324:	11 82       	std	Z+1, r1	; 0x01
    9326:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    9328:	3c 97       	sbiw	r30, 0x0c	; 12
    932a:	10 82       	st	Z, r1
    932c:	11 82       	std	Z+1, r1	; 0x01
    932e:	12 82       	std	Z+2, r1	; 0x02
    9330:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    9332:	34 96       	adiw	r30, 0x04	; 4
    9334:	c0 82       	st	Z, r12
    9336:	d1 82       	std	Z+1, r13	; 0x01
    9338:	e2 82       	std	Z+2, r14	; 0x02
    933a:	f3 82       	std	Z+3, r15	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    933c:	ca 53       	subi	r28, 0x3A	; 58
    933e:	df 4f       	sbci	r29, 0xFF	; 255
    9340:	68 83       	st	Y, r22
    9342:	79 83       	std	Y+1, r23	; 0x01
    9344:	8a 83       	std	Y+2, r24	; 0x02
    9346:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    9348:	df 91       	pop	r29
    934a:	cf 91       	pop	r28
    934c:	1f 91       	pop	r17
    934e:	ff 90       	pop	r15
    9350:	ef 90       	pop	r14
    9352:	df 90       	pop	r13
    9354:	cf 90       	pop	r12
    9356:	bf 90       	pop	r11
    9358:	af 90       	pop	r10
    935a:	08 95       	ret

0000935c <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    935c:	61 e0       	ldi	r22, 0x01	; 1
    935e:	83 e0       	ldi	r24, 0x03	; 3
    9360:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    9364:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9368:	60 e0       	ldi	r22, 0x00	; 0
    936a:	83 e0       	ldi	r24, 0x03	; 3
    936c:	0c 94 05 46 	jmp	0x8c0a	; 0x8c0a <FadeIn>

00009370 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9370:	1f 93       	push	r17
    9372:	cf 93       	push	r28
    9374:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9376:	d0 e0       	ldi	r29, 0x00	; 0
    9378:	10 e2       	ldi	r17, 0x20	; 32
    937a:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    937c:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    937e:	c1 17       	cp	r28, r17
    9380:	41 f0       	breq	.+16     	; 0x9392 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    9382:	40 e0       	ldi	r20, 0x00	; 0
    9384:	50 e0       	ldi	r21, 0x00	; 0
    9386:	6c 2f       	mov	r22, r28
    9388:	8d 2f       	mov	r24, r29
    938a:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <SetTile>
    938e:	cf 5f       	subi	r28, 0xFF	; 255
    9390:	f6 cf       	rjmp	.-20     	; 0x937e <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9392:	df 5f       	subi	r29, 0xFF	; 255
    9394:	dc 31       	cpi	r29, 0x1C	; 28
    9396:	91 f7       	brne	.-28     	; 0x937c <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    9398:	df 91       	pop	r29
    939a:	cf 91       	pop	r28
    939c:	1f 91       	pop	r17
    939e:	08 95       	ret

000093a0 <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    93a0:	fb 01       	movw	r30, r22
    93a2:	ee 0f       	add	r30, r30
    93a4:	ef 2f       	mov	r30, r31
    93a6:	ee 1f       	adc	r30, r30
    93a8:	ff 0b       	sbc	r31, r31
    93aa:	f1 95       	neg	r31
    93ac:	34 e0       	ldi	r19, 0x04	; 4
    93ae:	ee 0f       	add	r30, r30
    93b0:	ff 1f       	adc	r31, r31
    93b2:	3a 95       	dec	r19
    93b4:	e1 f7       	brne	.-8      	; 0x93ae <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    93b6:	9f 01       	movw	r18, r30
    93b8:	43 e0       	ldi	r20, 0x03	; 3
    93ba:	22 0f       	add	r18, r18
    93bc:	33 1f       	adc	r19, r19
    93be:	4a 95       	dec	r20
    93c0:	e1 f7       	brne	.-8      	; 0x93ba <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    93c2:	6f 5f       	subi	r22, 0xFF	; 255
    93c4:	7f 4f       	sbci	r23, 0xFF	; 255
	counter += (u16) level_data;
    93c6:	8e 0f       	add	r24, r30
    93c8:	9f 1f       	adc	r25, r31
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    93ca:	fc 01       	movw	r30, r24
    93cc:	90 e0       	ldi	r25, 0x00	; 0

000093ce <while1>:
    93ce:	95 91       	lpm	r25, Z+
    93d0:	85 91       	lpm	r24, Z+
    93d2:	29 0f       	add	r18, r25
    93d4:	31 1d       	adc	r19, r1
    93d6:	26 17       	cp	r18, r22
    93d8:	37 07       	cpc	r19, r23
    93da:	08 f4       	brcc	.+2      	; 0x93de <while1done>
    93dc:	f8 cf       	rjmp	.-16     	; 0x93ce <while1>

000093de <while1done>:
    93de:	08 95       	ret

000093e0 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    93e0:	6e 5f       	subi	r22, 0xFE	; 254
    93e2:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_data, 2 + y*LEVEL_WIDTH+x);
    93e4:	ef ef       	ldi	r30, 0xFF	; 255
    93e6:	e4 9f       	mul	r30, r20
    93e8:	90 01       	movw	r18, r0
    93ea:	e5 9f       	mul	r30, r21
    93ec:	30 0d       	add	r19, r0
    93ee:	11 24       	eor	r1, r1
    93f0:	62 0f       	add	r22, r18
    93f2:	73 1f       	adc	r23, r19
    93f4:	0c 94 d0 49 	jmp	0x93a0	; 0x93a0 <read_level_byte>

000093f8 <render_camera_view>:
}

void render_camera_view()
{
    93f8:	7f 92       	push	r7
    93fa:	8f 92       	push	r8
    93fc:	9f 92       	push	r9
    93fe:	af 92       	push	r10
    9400:	bf 92       	push	r11
    9402:	cf 92       	push	r12
    9404:	df 92       	push	r13
    9406:	ef 92       	push	r14
    9408:	ff 92       	push	r15
    940a:	0f 93       	push	r16
    940c:	1f 93       	push	r17
    940e:	cf 93       	push	r28
    9410:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    9412:	c0 91 95 0d 	lds	r28, 0x0D95
    9416:	d0 91 96 0d 	lds	r29, 0x0D96
    941a:	83 e0       	ldi	r24, 0x03	; 3
    941c:	d6 95       	lsr	r29
    941e:	c7 95       	ror	r28
    9420:	8a 95       	dec	r24
    9422:	e1 f7       	brne	.-8      	; 0x941c <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    9424:	c0 90 97 0d 	lds	r12, 0x0D97
    9428:	d0 90 98 0d 	lds	r13, 0x0D98
    942c:	93 e0       	ldi	r25, 0x03	; 3
    942e:	d6 94       	lsr	r13
    9430:	c7 94       	ror	r12
    9432:	9a 95       	dec	r25
    9434:	e1 f7       	brne	.-8      	; 0x942e <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9436:	8e 01       	movw	r16, r28
    9438:	5e 01       	movw	r10, r28
    943a:	8c e1       	ldi	r24, 0x1C	; 28
    943c:	a8 0e       	add	r10, r24
    943e:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9440:	46 01       	movw	r8, r12
    9442:	8a e1       	ldi	r24, 0x1A	; 26
    9444:	88 0e       	add	r8, r24
    9446:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9448:	a0 16       	cp	r10, r16
    944a:	b1 06       	cpc	r11, r17
    944c:	e0 f0       	brcs	.+56     	; 0x9486 <render_camera_view+0x8e>
    944e:	76 01       	movw	r14, r12
    9450:	70 2e       	mov	r7, r16
    9452:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9454:	8e 14       	cp	r8, r14
    9456:	9f 04       	cpc	r9, r15
    9458:	98 f0       	brcs	.+38     	; 0x9480 <render_camera_view+0x88>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    945a:	a7 01       	movw	r20, r14
    945c:	b8 01       	movw	r22, r16
    945e:	80 91 88 0f 	lds	r24, 0x0F88
    9462:	90 91 89 0f 	lds	r25, 0x0F89
    9466:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    946a:	48 2f       	mov	r20, r24
    946c:	50 e0       	ldi	r21, 0x00	; 0
    946e:	6e 2d       	mov	r22, r14
    9470:	6c 19       	sub	r22, r12
    9472:	87 2d       	mov	r24, r7
    9474:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9478:	8f ef       	ldi	r24, 0xFF	; 255
    947a:	e8 1a       	sub	r14, r24
    947c:	f8 0a       	sbc	r15, r24
    947e:	ea cf       	rjmp	.-44     	; 0x9454 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9480:	0f 5f       	subi	r16, 0xFF	; 255
    9482:	1f 4f       	sbci	r17, 0xFF	; 255
    9484:	e1 cf       	rjmp	.-62     	; 0x9448 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    9486:	df 91       	pop	r29
    9488:	cf 91       	pop	r28
    948a:	1f 91       	pop	r17
    948c:	0f 91       	pop	r16
    948e:	ff 90       	pop	r15
    9490:	ef 90       	pop	r14
    9492:	df 90       	pop	r13
    9494:	cf 90       	pop	r12
    9496:	bf 90       	pop	r11
    9498:	af 90       	pop	r10
    949a:	9f 90       	pop	r9
    949c:	8f 90       	pop	r8
    949e:	7f 90       	pop	r7
    94a0:	08 95       	ret

000094a2 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    94a2:	fc 01       	movw	r30, r24
    94a4:	21 e9       	ldi	r18, 0x91	; 145
    94a6:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    94a8:	90 e0       	ldi	r25, 0x00	; 0
    94aa:	d9 01       	movw	r26, r18
    94ac:	ab 54       	subi	r26, 0x4B	; 75
    94ae:	bf 4f       	sbci	r27, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    94b0:	8c 91       	ld	r24, X
    94b2:	81 11       	cpse	r24, r1
    94b4:	0f c0       	rjmp	.+30     	; 0x94d4 <spawn_enemy+0x32>
    94b6:	5a 96       	adiw	r26, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    94b8:	8c 91       	ld	r24, X
    94ba:	81 11       	cpse	r24, r1
    94bc:	0b c0       	rjmp	.+22     	; 0x94d4 <spawn_enemy+0x32>
    94be:	ab 01       	movw	r20, r22
    94c0:	bf 01       	movw	r22, r30
				{
					init_enemy_spider(i, x, y);
    94c2:	89 2f       	mov	r24, r25
    94c4:	0e 94 ff 48 	call	0x91fe	; 0x91fe <init_enemy_spider>
					game.active_enemies++;
    94c8:	80 91 a9 0d 	lds	r24, 0x0DA9
    94cc:	8f 5f       	subi	r24, 0xFF	; 255
    94ce:	80 93 a9 0d 	sts	0x0DA9, r24
					return;
    94d2:	08 95       	ret
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    94d4:	9f 5f       	subi	r25, 0xFF	; 255
    94d6:	2e 5b       	subi	r18, 0xBE	; 190
    94d8:	3f 4f       	sbci	r19, 0xFF	; 255
    94da:	95 30       	cpi	r25, 0x05	; 5
    94dc:	31 f7       	brne	.-52     	; 0x94aa <spawn_enemy+0x8>
    94de:	08 95       	ret

000094e0 <solid_tile>:
	}
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    94e0:	81 50       	subi	r24, 0x01	; 1
    94e2:	84 30       	cpi	r24, 0x04	; 4
    94e4:	10 f0       	brcs	.+4      	; 0x94ea <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    94e6:	80 e0       	ldi	r24, 0x00	; 0
    94e8:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    94ea:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    94ec:	08 95       	ret

000094ee <append_tile_column>:

void append_tile_column()
{
    94ee:	ef 92       	push	r14
    94f0:	ff 92       	push	r15
    94f2:	0f 93       	push	r16
    94f4:	1f 93       	push	r17
    94f6:	cf 93       	push	r28
    94f8:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    94fa:	80 91 9d 0d 	lds	r24, 0x0D9D
    94fe:	90 91 9e 0d 	lds	r25, 0x0D9E
    9502:	01 96       	adiw	r24, 0x01	; 1
    9504:	90 93 9e 0d 	sts	0x0D9E, r25
    9508:	80 93 9d 0d 	sts	0x0D9D, r24
    950c:	c0 e0       	ldi	r28, 0x00	; 0
    950e:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    9510:	f1 2c       	mov	r15, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9512:	0e e1       	ldi	r16, 0x1E	; 30
    9514:	10 e0       	ldi	r17, 0x00	; 0
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9516:	40 91 97 0d 	lds	r20, 0x0D97
    951a:	50 91 98 0d 	lds	r21, 0x0D98
    951e:	63 e0       	ldi	r22, 0x03	; 3
    9520:	56 95       	lsr	r21
    9522:	47 95       	ror	r20
    9524:	6a 95       	dec	r22
    9526:	e1 f7       	brne	.-8      	; 0x9520 <append_tile_column+0x32>
    9528:	4c 0f       	add	r20, r28
    952a:	5d 1f       	adc	r21, r29
    952c:	60 91 91 0d 	lds	r22, 0x0D91
    9530:	70 91 92 0d 	lds	r23, 0x0D92
    9534:	80 91 88 0f 	lds	r24, 0x0F88
    9538:	90 91 89 0f 	lds	r25, 0x0F89
    953c:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9540:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9542:	28 2f       	mov	r18, r24
    9544:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9546:	90 91 9d 0c 	lds	r25, 0x0C9D
    954a:	96 95       	lsr	r25
    954c:	96 95       	lsr	r25
    954e:	96 95       	lsr	r25
    9550:	ae 01       	movw	r20, r28
    9552:	49 0f       	add	r20, r25
    9554:	51 1d       	adc	r21, r1
    9556:	ca 01       	movw	r24, r20
    9558:	b8 01       	movw	r22, r16
    955a:	0e 94 73 5b 	call	0xb6e6	; 0xb6e6 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    955e:	a9 01       	movw	r20, r18
    9560:	68 2f       	mov	r22, r24
    9562:	80 91 a7 0d 	lds	r24, 0x0DA7
    9566:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned && solid_tile(level_tile))
    956a:	20 91 aa 0d 	lds	r18, 0x0DAA
    956e:	30 e0       	ldi	r19, 0x00	; 0
    9570:	80 91 9d 0d 	lds	r24, 0x0D9D
    9574:	90 91 9e 0d 	lds	r25, 0x0D9E
    9578:	b9 01       	movw	r22, r18
    957a:	0e 94 5f 5b 	call	0xb6be	; 0xb6be <__udivmodhi4>
    957e:	21 50       	subi	r18, 0x01	; 1
    9580:	31 09       	sbc	r19, r1
    9582:	82 17       	cp	r24, r18
    9584:	93 07       	cpc	r25, r19
    9586:	49 f5       	brne	.+82     	; 0x95da <append_tile_column+0xec>
    9588:	80 91 a9 0d 	lds	r24, 0x0DA9
    958c:	85 30       	cpi	r24, 0x05	; 5
    958e:	28 f5       	brcc	.+74     	; 0x95da <append_tile_column+0xec>
    9590:	f1 10       	cpse	r15, r1
    9592:	21 c0       	rjmp	.+66     	; 0x95d6 <append_tile_column+0xe8>
    9594:	8e 2d       	mov	r24, r14
    9596:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    959a:	88 23       	and	r24, r24
    959c:	f1 f0       	breq	.+60     	; 0x95da <append_tile_column+0xec>
		{
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
    959e:	60 91 97 0d 	lds	r22, 0x0D97
    95a2:	70 91 98 0d 	lds	r23, 0x0D98
    95a6:	cb 01       	movw	r24, r22
    95a8:	23 e0       	ldi	r18, 0x03	; 3
    95aa:	96 95       	lsr	r25
    95ac:	87 95       	ror	r24
    95ae:	2a 95       	dec	r18
    95b0:	e1 f7       	brne	.-8      	; 0x95aa <append_tile_column+0xbc>
    95b2:	bc 01       	movw	r22, r24
    95b4:	61 50       	subi	r22, 0x01	; 1
    95b6:	70 4e       	sbci	r23, 0xE0	; 224
    95b8:	6c 0f       	add	r22, r28
    95ba:	7d 1f       	adc	r23, r29
    95bc:	33 e0       	ldi	r19, 0x03	; 3
    95be:	66 0f       	add	r22, r22
    95c0:	77 1f       	adc	r23, r23
    95c2:	3a 95       	dec	r19
    95c4:	e1 f7       	brne	.-8      	; 0x95be <append_tile_column+0xd0>
    95c6:	80 91 95 0d 	lds	r24, 0x0D95
    95ca:	90 91 96 0d 	lds	r25, 0x0D96
    95ce:	88 51       	subi	r24, 0x18	; 24
    95d0:	9f 4f       	sbci	r25, 0xFF	; 255
    95d2:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <spawn_enemy>
    95d6:	ff 24       	eor	r15, r15
    95d8:	f3 94       	inc	r15
    95da:	21 96       	adiw	r28, 0x01	; 1
{
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    95dc:	cb 31       	cpi	r28, 0x1B	; 27
    95de:	d1 05       	cpc	r29, r1
    95e0:	09 f0       	breq	.+2      	; 0x95e4 <append_tile_column+0xf6>
    95e2:	99 cf       	rjmp	.-206    	; 0x9516 <append_tile_column+0x28>
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
    95e4:	80 91 91 0d 	lds	r24, 0x0D91
    95e8:	90 91 92 0d 	lds	r25, 0x0D92
    95ec:	01 96       	adiw	r24, 0x01	; 1
    95ee:	90 93 92 0d 	sts	0x0D92, r25
    95f2:	80 93 91 0d 	sts	0x0D91, r24
	game.scroll_dest_x++;
    95f6:	80 91 a7 0d 	lds	r24, 0x0DA7
    95fa:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    95fc:	80 32       	cpi	r24, 0x20	; 32
    95fe:	18 f4       	brcc	.+6      	; 0x9606 <append_tile_column+0x118>
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9600:	80 93 a7 0d 	sts	0x0DA7, r24
    9604:	02 c0       	rjmp	.+4      	; 0x960a <append_tile_column+0x11c>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9606:	10 92 a7 0d 	sts	0x0DA7, r1
}
    960a:	df 91       	pop	r29
    960c:	cf 91       	pop	r28
    960e:	1f 91       	pop	r17
    9610:	0f 91       	pop	r16
    9612:	ff 90       	pop	r15
    9614:	ef 90       	pop	r14
    9616:	08 95       	ret

00009618 <append_tile_row>:

void append_tile_row()
{
    9618:	cf 93       	push	r28
    961a:	df 93       	push	r29
    961c:	c0 e0       	ldi	r28, 0x00	; 0
    961e:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    9620:	40 91 93 0d 	lds	r20, 0x0D93
    9624:	50 91 94 0d 	lds	r21, 0x0D94
    9628:	60 91 95 0d 	lds	r22, 0x0D95
    962c:	70 91 96 0d 	lds	r23, 0x0D96
    9630:	83 e0       	ldi	r24, 0x03	; 3
    9632:	76 95       	lsr	r23
    9634:	67 95       	ror	r22
    9636:	8a 95       	dec	r24
    9638:	e1 f7       	brne	.-8      	; 0x9632 <append_tile_row+0x1a>
    963a:	6c 0f       	add	r22, r28
    963c:	7d 1f       	adc	r23, r29
    963e:	80 91 88 0f 	lds	r24, 0x0F88
    9642:	90 91 89 0f 	lds	r25, 0x0F89
    9646:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    964a:	48 2f       	mov	r20, r24
    964c:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    964e:	80 91 9c 0c 	lds	r24, 0x0C9C
    9652:	86 95       	lsr	r24
    9654:	86 95       	lsr	r24
    9656:	86 95       	lsr	r24
    9658:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    965a:	60 91 a8 0d 	lds	r22, 0x0DA8
    965e:	8f 71       	andi	r24, 0x1F	; 31
    9660:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <SetTile>
    9664:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    9666:	cd 31       	cpi	r28, 0x1D	; 29
    9668:	d1 05       	cpc	r29, r1
    966a:	d1 f6       	brne	.-76     	; 0x9620 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    966c:	80 91 93 0d 	lds	r24, 0x0D93
    9670:	90 91 94 0d 	lds	r25, 0x0D94
    9674:	01 96       	adiw	r24, 0x01	; 1
    9676:	90 93 94 0d 	sts	0x0D94, r25
    967a:	80 93 93 0d 	sts	0x0D93, r24
	game.scroll_dest_y++;
    967e:	80 91 a8 0d 	lds	r24, 0x0DA8
    9682:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    9684:	8e 31       	cpi	r24, 0x1E	; 30
    9686:	18 f4       	brcc	.+6      	; 0x968e <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    9688:	80 93 a8 0d 	sts	0x0DA8, r24
    968c:	02 c0       	rjmp	.+4      	; 0x9692 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    968e:	10 92 a8 0d 	sts	0x0DA8, r1
}
    9692:	df 91       	pop	r29
    9694:	cf 91       	pop	r28
    9696:	08 95       	ret

00009698 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    9698:	80 91 95 0d 	lds	r24, 0x0D95
    969c:	90 91 96 0d 	lds	r25, 0x0D96
    96a0:	01 96       	adiw	r24, 0x01	; 1
    96a2:	90 93 96 0d 	sts	0x0D96, r25
    96a6:	80 93 95 0d 	sts	0x0D95, r24
	Scroll(1,0);
    96aa:	60 e0       	ldi	r22, 0x00	; 0
    96ac:	81 e0       	ldi	r24, 0x01	; 1
    96ae:	0e 94 28 45 	call	0x8a50	; 0x8a50 <Scroll>
	if (++game.scroll_x == 8)
    96b2:	80 91 a5 0d 	lds	r24, 0x0DA5
    96b6:	8f 5f       	subi	r24, 0xFF	; 255
    96b8:	88 30       	cpi	r24, 0x08	; 8
    96ba:	19 f0       	breq	.+6      	; 0x96c2 <move_camera_x+0x2a>
    96bc:	80 93 a5 0d 	sts	0x0DA5, r24
    96c0:	08 95       	ret
	{
		game.scroll_x = 0;
    96c2:	10 92 a5 0d 	sts	0x0DA5, r1
		append_tile_column();
    96c6:	0c 94 77 4a 	jmp	0x94ee	; 0x94ee <append_tile_column>

000096ca <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    96ca:	80 91 97 0d 	lds	r24, 0x0D97
    96ce:	90 91 98 0d 	lds	r25, 0x0D98
    96d2:	02 96       	adiw	r24, 0x02	; 2
    96d4:	90 93 98 0d 	sts	0x0D98, r25
    96d8:	80 93 97 0d 	sts	0x0D97, r24
	game.scroll_y+=2;
    96dc:	80 91 a6 0d 	lds	r24, 0x0DA6
    96e0:	8e 5f       	subi	r24, 0xFE	; 254
    96e2:	80 93 a6 0d 	sts	0x0DA6, r24
	Scroll(0,2);
    96e6:	62 e0       	ldi	r22, 0x02	; 2
    96e8:	80 e0       	ldi	r24, 0x00	; 0
    96ea:	0e 94 28 45 	call	0x8a50	; 0x8a50 <Scroll>
	if (game.scroll_y == 8)
    96ee:	80 91 a6 0d 	lds	r24, 0x0DA6
    96f2:	88 30       	cpi	r24, 0x08	; 8
    96f4:	21 f4       	brne	.+8      	; 0x96fe <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    96f6:	10 92 a6 0d 	sts	0x0DA6, r1
		append_tile_row();
    96fa:	0c 94 0c 4b 	jmp	0x9618	; 0x9618 <append_tile_row>
    96fe:	08 95       	ret

00009700 <load_level>:
	}
}

void load_level(u8 index)
{	
    9700:	cf 93       	push	r28
    9702:	c8 2f       	mov	r28, r24
	Screen.scrollX = 0;
    9704:	e9 e9       	ldi	r30, 0x99	; 153
    9706:	fc e0       	ldi	r31, 0x0C	; 12
    9708:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    970a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    970c:	8e e1       	ldi	r24, 0x1E	; 30
    970e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    9710:	87 e5       	ldi	r24, 0x57	; 87
    9712:	93 e5       	ldi	r25, 0x53	; 83
    9714:	92 83       	std	Z+2, r25	; 0x02
    9716:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    9718:	82 e0       	ldi	r24, 0x02	; 2
    971a:	80 83       	st	Z, r24
	clear_overlay(2);
    971c:	0e 94 b8 49 	call	0x9370	; 0x9370 <clear_overlay>
	game.current_level = (char*) map_level_0;
    9720:	e1 e9       	ldi	r30, 0x91	; 145
    9722:	fd e0       	ldi	r31, 0x0D	; 13
    9724:	87 ed       	ldi	r24, 0xD7	; 215
    9726:	9c e4       	ldi	r25, 0x4C	; 76
    9728:	90 93 89 0f 	sts	0x0F89, r25
    972c:	80 93 88 0f 	sts	0x0F88, r24
	game.current_level_index = index;
    9730:	c0 8b       	std	Z+16, r28	; 0x10
	switch (index)
	{
		case 0: game.current_level = (char*) map_level_0; break;
	}
	game.column_count = 0;
    9732:	15 86       	std	Z+13, r1	; 0x0d
    9734:	14 86       	std	Z+12, r1	; 0x0c
	game.camera_x = get_camera_x(index);
    9736:	15 82       	std	Z+5, r1	; 0x05
    9738:	14 82       	std	Z+4, r1	; 0x04
	game.camera_y = get_camera_y(index);
    973a:	17 82       	std	Z+7, r1	; 0x07
    973c:	16 82       	std	Z+6, r1	; 0x06
	game.player.shared.x = get_hero_spawn_x(index)*8;
    973e:	80 e0       	ldi	r24, 0x00	; 0
    9740:	90 e0       	ldi	r25, 0x00	; 0
    9742:	a0 ec       	ldi	r26, 0xC0	; 192
    9744:	b1 e4       	ldi	r27, 0x41	; 65
    9746:	86 8f       	std	Z+30, r24	; 0x1e
    9748:	97 8f       	std	Z+31, r25	; 0x1f
    974a:	a0 a3       	std	Z+32, r26	; 0x20
    974c:	b1 a3       	std	Z+33, r27	; 0x21
	game.player.shared.y = get_hero_spawn_y(index)*8;
    974e:	80 e0       	ldi	r24, 0x00	; 0
    9750:	90 e0       	ldi	r25, 0x00	; 0
    9752:	a8 e2       	ldi	r26, 0x28	; 40
    9754:	b3 e4       	ldi	r27, 0x43	; 67
    9756:	82 a3       	std	Z+34, r24	; 0x22
    9758:	93 a3       	std	Z+35, r25	; 0x23
    975a:	a4 a3       	std	Z+36, r26	; 0x24
    975c:	b5 a3       	std	Z+37, r27	; 0x25
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    975e:	8d e1       	ldi	r24, 0x1D	; 29
    9760:	90 e0       	ldi	r25, 0x00	; 0
    9762:	91 83       	std	Z+1, r25	; 0x01
    9764:	80 83       	st	Z, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    9766:	86 8b       	std	Z+22, r24	; 0x16
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    9768:	8b e1       	ldi	r24, 0x1B	; 27
    976a:	90 e0       	ldi	r25, 0x00	; 0
    976c:	93 83       	std	Z+3, r25	; 0x03
    976e:	82 83       	std	Z+2, r24	; 0x02
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    9770:	87 8b       	std	Z+23, r24	; 0x17
	game.scroll_x = 0;
    9772:	14 8a       	std	Z+20, r1	; 0x14
	game.scroll_y = 0;
    9774:	15 8a       	std	Z+21, r1	; 0x15
	game.spawn_rate = BASE_SPAWN_RATE;
    9776:	8a e0       	ldi	r24, 0x0A	; 10
    9778:	81 8f       	std	Z+25, r24	; 0x19
	render_camera_view();
    977a:	0e 94 fc 49 	call	0x93f8	; 0x93f8 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    977e:	46 e1       	ldi	r20, 0x16	; 22
    9780:	5b e0       	ldi	r21, 0x0B	; 11
    9782:	6f e1       	ldi	r22, 0x1F	; 31
    9784:	80 e0       	ldi	r24, 0x00	; 0
    9786:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    978a:	45 e2       	ldi	r20, 0x25	; 37
    978c:	5b e0       	ldi	r21, 0x0B	; 11
    978e:	6f e1       	ldi	r22, 0x1F	; 31
    9790:	81 e1       	ldi	r24, 0x11	; 17
    9792:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    9796:	4d e1       	ldi	r20, 0x1D	; 29
    9798:	5b e0       	ldi	r21, 0x0B	; 11
    979a:	6e e1       	ldi	r22, 0x1E	; 30
    979c:	80 e0       	ldi	r24, 0x00	; 0
    979e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    97a2:	40 e1       	ldi	r20, 0x10	; 16
    97a4:	5b e0       	ldi	r21, 0x0B	; 11
    97a6:	6e e1       	ldi	r22, 0x1E	; 30
    97a8:	82 e1       	ldi	r24, 0x12	; 18
}
    97aa:	cf 91       	pop	r28
	game.spawn_rate = BASE_SPAWN_RATE;
	render_camera_view();
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    97ac:	0c 94 d7 46 	jmp	0x8dae	; 0x8dae <LBPrint>

000097b0 <on_solid_ground>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    97b0:	2f 92       	push	r2
    97b2:	3f 92       	push	r3
    97b4:	4f 92       	push	r4
    97b6:	5f 92       	push	r5
    97b8:	6f 92       	push	r6
    97ba:	7f 92       	push	r7
    97bc:	8f 92       	push	r8
    97be:	9f 92       	push	r9
    97c0:	af 92       	push	r10
    97c2:	bf 92       	push	r11
    97c4:	cf 92       	push	r12
    97c6:	df 92       	push	r13
    97c8:	ef 92       	push	r14
    97ca:	ff 92       	push	r15
    97cc:	0f 93       	push	r16
    97ce:	1f 93       	push	r17
    97d0:	cf 93       	push	r28
    97d2:	df 93       	push	r29
    97d4:	00 d0       	rcall	.+0      	; 0x97d6 <on_solid_ground+0x26>
    97d6:	00 d0       	rcall	.+0      	; 0x97d8 <on_solid_ground+0x28>
    97d8:	00 d0       	rcall	.+0      	; 0x97da <on_solid_ground+0x2a>
    97da:	cd b7       	in	r28, 0x3d	; 61
    97dc:	de b7       	in	r29, 0x3e	; 62
    97de:	9e 83       	std	Y+6, r25	; 0x06
    97e0:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    97e2:	88 e0       	ldi	r24, 0x08	; 8
    97e4:	48 9f       	mul	r20, r24
    97e6:	a0 01       	movw	r20, r0
    97e8:	11 24       	eor	r1, r1
    97ea:	26 2e       	mov	r2, r22
    97ec:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    97ee:	00 e0       	ldi	r16, 0x00	; 0
    97f0:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    97f2:	ca 01       	movw	r24, r20
    97f4:	aa 27       	eor	r26, r26
    97f6:	97 fd       	sbrc	r25, 7
    97f8:	a0 95       	com	r26
    97fa:	ba 2f       	mov	r27, r26
    97fc:	89 83       	std	Y+1, r24	; 0x01
    97fe:	9a 83       	std	Y+2, r25	; 0x02
    9800:	ab 83       	std	Y+3, r26	; 0x03
    9802:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9804:	02 15       	cp	r16, r2
    9806:	13 05       	cpc	r17, r3
    9808:	09 f4       	brne	.+2      	; 0x980c <on_solid_ground+0x5c>
    980a:	85 c0       	rjmp	.+266    	; 0x9916 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    980c:	69 81       	ldd	r22, Y+1	; 0x01
    980e:	7a 81       	ldd	r23, Y+2	; 0x02
    9810:	8b 81       	ldd	r24, Y+3	; 0x03
    9812:	9c 81       	ldd	r25, Y+4	; 0x04
    9814:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    9818:	4b 01       	movw	r8, r22
    981a:	5c 01       	movw	r10, r24
    981c:	b8 01       	movw	r22, r16
    981e:	88 27       	eor	r24, r24
    9820:	77 fd       	sbrc	r23, 7
    9822:	80 95       	com	r24
    9824:	98 2f       	mov	r25, r24
    9826:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    982a:	6b 01       	movw	r12, r22
    982c:	7c 01       	movw	r14, r24
    982e:	ad 81       	ldd	r26, Y+5	; 0x05
    9830:	be 81       	ldd	r27, Y+6	; 0x06
    9832:	18 96       	adiw	r26, 0x08	; 8
    9834:	2d 91       	ld	r18, X+
    9836:	3d 91       	ld	r19, X+
    9838:	4d 91       	ld	r20, X+
    983a:	5c 91       	ld	r21, X
    983c:	1b 97       	sbiw	r26, 0x0b	; 11
    983e:	c5 01       	movw	r24, r10
    9840:	b4 01       	movw	r22, r8
    9842:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9846:	20 e0       	ldi	r18, 0x00	; 0
    9848:	30 e0       	ldi	r19, 0x00	; 0
    984a:	40 e0       	ldi	r20, 0x00	; 0
    984c:	5e e3       	ldi	r21, 0x3E	; 62
    984e:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9852:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9856:	2b 01       	movw	r4, r22
    9858:	3c 01       	movw	r6, r24
    985a:	20 e0       	ldi	r18, 0x00	; 0
    985c:	30 e0       	ldi	r19, 0x00	; 0
    985e:	40 e0       	ldi	r20, 0x00	; 0
    9860:	5e e3       	ldi	r21, 0x3E	; 62
    9862:	ed 81       	ldd	r30, Y+5	; 0x05
    9864:	fe 81       	ldd	r31, Y+6	; 0x06
    9866:	64 81       	ldd	r22, Z+4	; 0x04
    9868:	75 81       	ldd	r23, Z+5	; 0x05
    986a:	86 81       	ldd	r24, Z+6	; 0x06
    986c:	97 81       	ldd	r25, Z+7	; 0x07
    986e:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9872:	a7 01       	movw	r20, r14
    9874:	96 01       	movw	r18, r12
    9876:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    987a:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    987e:	a2 01       	movw	r20, r4
    9880:	80 91 88 0f 	lds	r24, 0x0F88
    9884:	90 91 89 0f 	lds	r25, 0x0F89
    9888:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    988c:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    988e:	ad 81       	ldd	r26, Y+5	; 0x05
    9890:	be 81       	ldd	r27, Y+6	; 0x06
    9892:	18 96       	adiw	r26, 0x08	; 8
    9894:	2d 91       	ld	r18, X+
    9896:	3d 91       	ld	r19, X+
    9898:	4d 91       	ld	r20, X+
    989a:	5c 91       	ld	r21, X
    989c:	1b 97       	sbiw	r26, 0x0b	; 11
    989e:	c5 01       	movw	r24, r10
    98a0:	b4 01       	movw	r22, r8
    98a2:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    98a6:	20 e0       	ldi	r18, 0x00	; 0
    98a8:	30 e0       	ldi	r19, 0x00	; 0
    98aa:	40 e0       	ldi	r20, 0x00	; 0
    98ac:	5e e3       	ldi	r21, 0x3E	; 62
    98ae:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    98b2:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    98b6:	4b 01       	movw	r8, r22
    98b8:	5c 01       	movw	r10, r24
    98ba:	20 e0       	ldi	r18, 0x00	; 0
    98bc:	30 e0       	ldi	r19, 0x00	; 0
    98be:	40 ee       	ldi	r20, 0xE0	; 224
    98c0:	50 e4       	ldi	r21, 0x40	; 64
    98c2:	ed 81       	ldd	r30, Y+5	; 0x05
    98c4:	fe 81       	ldd	r31, Y+6	; 0x06
    98c6:	64 81       	ldd	r22, Z+4	; 0x04
    98c8:	75 81       	ldd	r23, Z+5	; 0x05
    98ca:	86 81       	ldd	r24, Z+6	; 0x06
    98cc:	97 81       	ldd	r25, Z+7	; 0x07
    98ce:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    98d2:	20 e0       	ldi	r18, 0x00	; 0
    98d4:	30 e0       	ldi	r19, 0x00	; 0
    98d6:	40 e0       	ldi	r20, 0x00	; 0
    98d8:	5e e3       	ldi	r21, 0x3E	; 62
    98da:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    98de:	a7 01       	movw	r20, r14
    98e0:	96 01       	movw	r18, r12
    98e2:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    98e6:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    98ea:	a4 01       	movw	r20, r8
    98ec:	80 91 88 0f 	lds	r24, 0x0F88
    98f0:	90 91 89 0f 	lds	r25, 0x0F89
    98f4:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    98f8:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    98fa:	87 2d       	mov	r24, r7
    98fc:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    9900:	81 11       	cpse	r24, r1
    9902:	0b c0       	rjmp	.+22     	; 0x991a <on_solid_ground+0x16a>
    9904:	8f 2d       	mov	r24, r15
    9906:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    990a:	0f 5f       	subi	r16, 0xFF	; 255
    990c:	1f 4f       	sbci	r17, 0xFF	; 255
    990e:	88 23       	and	r24, r24
    9910:	09 f4       	brne	.+2      	; 0x9914 <on_solid_ground+0x164>
    9912:	78 cf       	rjmp	.-272    	; 0x9804 <on_solid_ground+0x54>
    9914:	02 c0       	rjmp	.+4      	; 0x991a <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    9916:	80 e0       	ldi	r24, 0x00	; 0
    9918:	01 c0       	rjmp	.+2      	; 0x991c <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    991a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    991c:	26 96       	adiw	r28, 0x06	; 6
    991e:	0f b6       	in	r0, 0x3f	; 63
    9920:	f8 94       	cli
    9922:	de bf       	out	0x3e, r29	; 62
    9924:	0f be       	out	0x3f, r0	; 63
    9926:	cd bf       	out	0x3d, r28	; 61
    9928:	df 91       	pop	r29
    992a:	cf 91       	pop	r28
    992c:	1f 91       	pop	r17
    992e:	0f 91       	pop	r16
    9930:	ff 90       	pop	r15
    9932:	ef 90       	pop	r14
    9934:	df 90       	pop	r13
    9936:	cf 90       	pop	r12
    9938:	bf 90       	pop	r11
    993a:	af 90       	pop	r10
    993c:	9f 90       	pop	r9
    993e:	8f 90       	pop	r8
    9940:	7f 90       	pop	r7
    9942:	6f 90       	pop	r6
    9944:	5f 90       	pop	r5
    9946:	4f 90       	pop	r4
    9948:	3f 90       	pop	r3
    994a:	2f 90       	pop	r2
    994c:	08 95       	ret

0000994e <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    994e:	80 91 d2 0d 	lds	r24, 0x0DD2
    9952:	88 23       	and	r24, r24
    9954:	61 f0       	breq	.+24     	; 0x996e <find_shot_slot+0x20>
    9956:	80 91 ec 0d 	lds	r24, 0x0DEC
    995a:	88 23       	and	r24, r24
    995c:	31 f0       	breq	.+12     	; 0x996a <find_shot_slot+0x1c>
    995e:	80 91 06 0e 	lds	r24, 0x0E06
    9962:	81 11       	cpse	r24, r1
    9964:	04 c0       	rjmp	.+8      	; 0x996e <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    9966:	82 e0       	ldi	r24, 0x02	; 2
    9968:	08 95       	ret
    996a:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    996c:	08 95       	ret
	}
	return 0;
    996e:	80 e0       	ldi	r24, 0x00	; 0
}
    9970:	08 95       	ret

00009972 <update_shot>:

void update_shot()
{
    9972:	ef 92       	push	r14
    9974:	ff 92       	push	r15
    9976:	0f 93       	push	r16
    9978:	1f 93       	push	r17
    997a:	cf 93       	push	r28
    997c:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    997e:	80 91 81 0f 	lds	r24, 0x0F81
    9982:	90 91 82 0f 	lds	r25, 0x0F82
    9986:	90 ff       	sbrs	r25, 0
    9988:	97 c0       	rjmp	.+302    	; 0x9ab8 <update_shot+0x146>
    998a:	80 91 ba 0d 	lds	r24, 0x0DBA
    998e:	83 30       	cpi	r24, 0x03	; 3
    9990:	08 f0       	brcs	.+2      	; 0x9994 <update_shot+0x22>
    9992:	92 c0       	rjmp	.+292    	; 0x9ab8 <update_shot+0x146>
	{
		SFX_PLAYER_SHOOT;
    9994:	2f ef       	ldi	r18, 0xFF	; 255
    9996:	43 e2       	ldi	r20, 0x23	; 35
    9998:	63 e0       	ldi	r22, 0x03	; 3
    999a:	82 e0       	ldi	r24, 0x02	; 2
    999c:	0e 94 18 3b 	call	0x7630	; 0x7630 <TriggerNote>
		idx = find_shot_slot();
    99a0:	0e 94 a7 4c 	call	0x994e	; 0x994e <find_shot_slot>
    99a4:	d8 2f       	mov	r29, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    99a6:	08 2f       	mov	r16, r24
    99a8:	10 e0       	ldi	r17, 0x00	; 0
    99aa:	8a e1       	ldi	r24, 0x1A	; 26
    99ac:	d8 9f       	mul	r29, r24
    99ae:	70 01       	movw	r14, r0
    99b0:	11 24       	eor	r1, r1
    99b2:	c7 01       	movw	r24, r14
    99b4:	8d 52       	subi	r24, 0x2D	; 45
    99b6:	92 4f       	sbci	r25, 0xF2	; 242
    99b8:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    99bc:	40 e0       	ldi	r20, 0x00	; 0
    99be:	bc 01       	movw	r22, r24
    99c0:	8b e0       	ldi	r24, 0x0B	; 11
    99c2:	8d 0f       	add	r24, r29
    99c4:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
		game.player.shot[idx].active = 1;
    99c8:	e7 01       	movw	r28, r14
    99ca:	cf 56       	subi	r28, 0x6F	; 111
    99cc:	d2 4f       	sbci	r29, 0xF2	; 242
    99ce:	fe 01       	movw	r30, r28
    99d0:	ef 5b       	subi	r30, 0xBF	; 191
    99d2:	ff 4f       	sbci	r31, 0xFF	; 255
    99d4:	81 e0       	ldi	r24, 0x01	; 1
    99d6:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    99d8:	60 91 b3 0d 	lds	r22, 0x0DB3
    99dc:	70 91 b4 0d 	lds	r23, 0x0DB4
    99e0:	80 91 b5 0d 	lds	r24, 0x0DB5
    99e4:	90 91 b6 0d 	lds	r25, 0x0DB6
    99e8:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    99ec:	83 e0       	ldi	r24, 0x03	; 3
    99ee:	76 95       	lsr	r23
    99f0:	67 95       	ror	r22
    99f2:	8a 95       	dec	r24
    99f4:	e1 f7       	brne	.-8      	; 0x99ee <update_shot+0x7c>
    99f6:	93 e0       	ldi	r25, 0x03	; 3
    99f8:	66 0f       	add	r22, r22
    99fa:	77 1f       	adc	r23, r23
    99fc:	9a 95       	dec	r25
    99fe:	e1 f7       	brne	.-8      	; 0x99f8 <update_shot+0x86>
    9a00:	80 e0       	ldi	r24, 0x00	; 0
    9a02:	90 e0       	ldi	r25, 0x00	; 0
    9a04:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    9a08:	68 af       	std	Y+56, r22	; 0x38
    9a0a:	79 af       	std	Y+57, r23	; 0x39
    9a0c:	8a af       	std	Y+58, r24	; 0x3a
    9a0e:	9b af       	std	Y+59, r25	; 0x3b
		if (!(game.player.flags & PRONE))
    9a10:	20 91 bb 0d 	lds	r18, 0x0DBB
    9a14:	22 fd       	sbrc	r18, 2
    9a16:	0a c0       	rjmp	.+20     	; 0x9a2c <update_shot+0xba>
		{
			game.player.shot[idx].shared.y += 8;
    9a18:	20 e0       	ldi	r18, 0x00	; 0
    9a1a:	30 e0       	ldi	r19, 0x00	; 0
    9a1c:	40 e0       	ldi	r20, 0x00	; 0
    9a1e:	51 e4       	ldi	r21, 0x41	; 65
    9a20:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9a24:	68 af       	std	Y+56, r22	; 0x38
    9a26:	79 af       	std	Y+57, r23	; 0x39
    9a28:	8a af       	std	Y+58, r24	; 0x3a
    9a2a:	9b af       	std	Y+59, r25	; 0x3b
		}
		if (game.player.direction == D_RIGHT)
    9a2c:	80 91 bd 0d 	lds	r24, 0x0DBD
    9a30:	81 30       	cpi	r24, 0x01	; 1
    9a32:	f9 f4       	brne	.+62     	; 0x9a72 <update_shot+0x100>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    9a34:	8a e1       	ldi	r24, 0x1A	; 26
    9a36:	80 9f       	mul	r24, r16
    9a38:	e0 01       	movw	r28, r0
    9a3a:	81 9f       	mul	r24, r17
    9a3c:	d0 0d       	add	r29, r0
    9a3e:	11 24       	eor	r1, r1
    9a40:	cf 56       	subi	r28, 0x6F	; 111
    9a42:	d2 4f       	sbci	r29, 0xF2	; 242
    9a44:	20 e0       	ldi	r18, 0x00	; 0
    9a46:	30 e0       	ldi	r19, 0x00	; 0
    9a48:	40 e8       	ldi	r20, 0x80	; 128
    9a4a:	51 e4       	ldi	r21, 0x41	; 65
    9a4c:	60 91 af 0d 	lds	r22, 0x0DAF
    9a50:	70 91 b0 0d 	lds	r23, 0x0DB0
    9a54:	80 91 b1 0d 	lds	r24, 0x0DB1
    9a58:	90 91 b2 0d 	lds	r25, 0x0DB2
    9a5c:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9a60:	6c ab       	std	Y+52, r22	; 0x34
    9a62:	7d ab       	std	Y+53, r23	; 0x35
    9a64:	8e ab       	std	Y+54, r24	; 0x36
    9a66:	9f ab       	std	Y+55, r25	; 0x37
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    9a68:	80 e9       	ldi	r24, 0x90	; 144
    9a6a:	91 e0       	ldi	r25, 0x01	; 1
    9a6c:	9d af       	std	Y+61, r25	; 0x3d
    9a6e:	8c af       	std	Y+60, r24	; 0x3c
    9a70:	1e c0       	rjmp	.+60     	; 0x9aae <update_shot+0x13c>
		}
		else
		{
			game.player.shot[idx].shared.vx = -SHOT_SPEED;
    9a72:	8a e1       	ldi	r24, 0x1A	; 26
    9a74:	80 9f       	mul	r24, r16
    9a76:	e0 01       	movw	r28, r0
    9a78:	81 9f       	mul	r24, r17
    9a7a:	d0 0d       	add	r29, r0
    9a7c:	11 24       	eor	r1, r1
    9a7e:	cf 56       	subi	r28, 0x6F	; 111
    9a80:	d2 4f       	sbci	r29, 0xF2	; 242
    9a82:	80 e7       	ldi	r24, 0x70	; 112
    9a84:	9e ef       	ldi	r25, 0xFE	; 254
    9a86:	9d af       	std	Y+61, r25	; 0x3d
    9a88:	8c af       	std	Y+60, r24	; 0x3c
			game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    9a8a:	20 e0       	ldi	r18, 0x00	; 0
    9a8c:	30 e0       	ldi	r19, 0x00	; 0
    9a8e:	40 e0       	ldi	r20, 0x00	; 0
    9a90:	51 e4       	ldi	r21, 0x41	; 65
    9a92:	60 91 af 0d 	lds	r22, 0x0DAF
    9a96:	70 91 b0 0d 	lds	r23, 0x0DB0
    9a9a:	80 91 b1 0d 	lds	r24, 0x0DB1
    9a9e:	90 91 b2 0d 	lds	r25, 0x0DB2
    9aa2:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    9aa6:	6c ab       	std	Y+52, r22	; 0x34
    9aa8:	7d ab       	std	Y+53, r23	; 0x35
    9aaa:	8e ab       	std	Y+54, r24	; 0x36
    9aac:	9f ab       	std	Y+55, r25	; 0x37
		}
		game.player.active_shots++;
    9aae:	80 91 ba 0d 	lds	r24, 0x0DBA
    9ab2:	8f 5f       	subi	r24, 0xFF	; 255
    9ab4:	80 93 ba 0d 	sts	0x0DBA, r24
	}
}
    9ab8:	df 91       	pop	r29
    9aba:	cf 91       	pop	r28
    9abc:	1f 91       	pop	r17
    9abe:	0f 91       	pop	r16
    9ac0:	ff 90       	pop	r15
    9ac2:	ef 90       	pop	r14
    9ac4:	08 95       	ret

00009ac6 <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    9ac6:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    9ac8:	86 17       	cp	r24, r22
    9aca:	97 07       	cpc	r25, r23
    9acc:	28 f4       	brcc	.+10     	; 0x9ad8 <pixel_overlap+0x12>
    9ace:	94 2f       	mov	r25, r20
    9ad0:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    9ad2:	89 2f       	mov	r24, r25
    9ad4:	86 1b       	sub	r24, r22
    9ad6:	01 c0       	rjmp	.+2      	; 0x9ada <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    9ad8:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    9ada:	e4 0f       	add	r30, r20
    9adc:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    9ade:	62 0f       	add	r22, r18
    9ae0:	71 1d       	adc	r23, r1
	if (s2 < s1)
    9ae2:	6e 17       	cp	r22, r30
    9ae4:	7f 07       	cpc	r23, r31
    9ae6:	10 f4       	brcc	.+4      	; 0x9aec <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    9ae8:	6e 1b       	sub	r22, r30
    9aea:	86 0f       	add	r24, r22
	}
	return result;
}
    9aec:	08 95       	ret

00009aee <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9aee:	2f 92       	push	r2
    9af0:	3f 92       	push	r3
    9af2:	4f 92       	push	r4
    9af4:	5f 92       	push	r5
    9af6:	6f 92       	push	r6
    9af8:	7f 92       	push	r7
    9afa:	8f 92       	push	r8
    9afc:	9f 92       	push	r9
    9afe:	af 92       	push	r10
    9b00:	bf 92       	push	r11
    9b02:	cf 92       	push	r12
    9b04:	df 92       	push	r13
    9b06:	ef 92       	push	r14
    9b08:	ff 92       	push	r15
    9b0a:	0f 93       	push	r16
    9b0c:	1f 93       	push	r17
    9b0e:	cf 93       	push	r28
    9b10:	df 93       	push	r29
    9b12:	cd b7       	in	r28, 0x3d	; 61
    9b14:	de b7       	in	r29, 0x3e	; 62
    9b16:	68 97       	sbiw	r28, 0x18	; 24
    9b18:	0f b6       	in	r0, 0x3f	; 63
    9b1a:	f8 94       	cli
    9b1c:	de bf       	out	0x3e, r29	; 62
    9b1e:	0f be       	out	0x3f, r0	; 63
    9b20:	cd bf       	out	0x3d, r28	; 61
    9b22:	98 8f       	std	Y+24, r25	; 0x18
    9b24:	8f 8b       	std	Y+23, r24	; 0x17
    9b26:	16 2f       	mov	r17, r22
    9b28:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    9b2a:	dc 01       	movw	r26, r24
    9b2c:	14 96       	adiw	r26, 0x04	; 4
    9b2e:	4d 90       	ld	r4, X+
    9b30:	5d 90       	ld	r5, X+
    9b32:	6d 90       	ld	r6, X+
    9b34:	7c 90       	ld	r7, X
    9b36:	17 97       	sbiw	r26, 0x07	; 7
    9b38:	20 e0       	ldi	r18, 0x00	; 0
    9b3a:	30 e0       	ldi	r19, 0x00	; 0
    9b3c:	40 e0       	ldi	r20, 0x00	; 0
    9b3e:	5e e3       	ldi	r21, 0x3E	; 62
    9b40:	c3 01       	movw	r24, r6
    9b42:	b2 01       	movw	r22, r4
    9b44:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9b48:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9b4c:	4b 01       	movw	r8, r22
    9b4e:	5c 01       	movw	r10, r24
    9b50:	68 87       	std	Y+8, r22	; 0x08
    9b52:	9a 8a       	std	Y+18, r9	; 0x12
	u16 y0_tile = s->y / 8;
    9b54:	ef 89       	ldd	r30, Y+23	; 0x17
    9b56:	f8 8d       	ldd	r31, Y+24	; 0x18
    9b58:	c0 84       	ldd	r12, Z+8	; 0x08
    9b5a:	d1 84       	ldd	r13, Z+9	; 0x09
    9b5c:	e2 84       	ldd	r14, Z+10	; 0x0a
    9b5e:	f3 84       	ldd	r15, Z+11	; 0x0b
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    9b60:	84 85       	ldd	r24, Z+12	; 0x0c
    9b62:	95 85       	ldd	r25, Z+13	; 0x0d
    9b64:	89 2b       	or	r24, r25
    9b66:	61 f4       	brne	.+24     	; 0x9b80 <collision_detect_level+0x92>
    9b68:	20 e0       	ldi	r18, 0x00	; 0
    9b6a:	30 e0       	ldi	r19, 0x00	; 0
    9b6c:	a9 01       	movw	r20, r18
    9b6e:	60 81       	ld	r22, Z
    9b70:	71 81       	ldd	r23, Z+1	; 0x01
    9b72:	82 81       	ldd	r24, Z+2	; 0x02
    9b74:	93 81       	ldd	r25, Z+3	; 0x03
    9b76:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    9b7a:	88 23       	and	r24, r24
    9b7c:	09 f4       	brne	.+2      	; 0x9b80 <collision_detect_level+0x92>
    9b7e:	d2 c2       	rjmp	.+1444   	; 0xa124 <collision_detect_level+0x636>
	
	// Top and Bottom
	if (s->vy != 0)
    9b80:	20 e0       	ldi	r18, 0x00	; 0
    9b82:	30 e0       	ldi	r19, 0x00	; 0
    9b84:	a9 01       	movw	r20, r18
    9b86:	af 89       	ldd	r26, Y+23	; 0x17
    9b88:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b8a:	6d 91       	ld	r22, X+
    9b8c:	7d 91       	ld	r23, X+
    9b8e:	8d 91       	ld	r24, X+
    9b90:	9c 91       	ld	r25, X
    9b92:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    9b96:	88 23       	and	r24, r24
    9b98:	09 f4       	brne	.+2      	; 0x9b9c <collision_detect_level+0xae>
    9b9a:	67 c1       	rjmp	.+718    	; 0x9e6a <collision_detect_level+0x37c>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    9b9c:	20 e0       	ldi	r18, 0x00	; 0
    9b9e:	30 e0       	ldi	r19, 0x00	; 0
    9ba0:	40 e0       	ldi	r20, 0x00	; 0
    9ba2:	5e e3       	ldi	r21, 0x3E	; 62
    9ba4:	c7 01       	movw	r24, r14
    9ba6:	b6 01       	movw	r22, r12
    9ba8:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9bac:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9bb0:	6b 01       	movw	r12, r22
    9bb2:	7c 01       	movw	r14, r24
    9bb4:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    9bb6:	20 e0       	ldi	r18, 0x00	; 0
    9bb8:	30 e0       	ldi	r19, 0x00	; 0
    9bba:	40 ee       	ldi	r20, 0xE0	; 224
    9bbc:	50 e4       	ldi	r21, 0x40	; 64
    9bbe:	c3 01       	movw	r24, r6
    9bc0:	b2 01       	movw	r22, r4
    9bc2:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9bc6:	20 e0       	ldi	r18, 0x00	; 0
    9bc8:	30 e0       	ldi	r19, 0x00	; 0
    9bca:	40 e0       	ldi	r20, 0x00	; 0
    9bcc:	5e e3       	ldi	r21, 0x3E	; 62
    9bce:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9bd2:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9bd6:	f4 01       	movw	r30, r8
    9bd8:	53 e0       	ldi	r21, 0x03	; 3
    9bda:	ee 0f       	add	r30, r30
    9bdc:	ff 1f       	adc	r31, r31
    9bde:	5a 95       	dec	r21
    9be0:	e1 f7       	brne	.-8      	; 0x9bda <collision_detect_level+0xec>
    9be2:	fb 83       	std	Y+3, r31	; 0x03
    9be4:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9be6:	9b 01       	movw	r18, r22
    9be8:	e3 e0       	ldi	r30, 0x03	; 3
    9bea:	22 0f       	add	r18, r18
    9bec:	33 1f       	adc	r19, r19
    9bee:	ea 95       	dec	r30
    9bf0:	e1 f7       	brne	.-8      	; 0x9bea <collision_detect_level+0xfc>
    9bf2:	3d 83       	std	Y+5, r19	; 0x05
    9bf4:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9bf6:	3f ef       	ldi	r19, 0xFF	; 255
    9bf8:	c3 1a       	sub	r12, r19
    9bfa:	d3 0a       	sbc	r13, r19
    9bfc:	f3 e0       	ldi	r31, 0x03	; 3
    9bfe:	cc 0c       	add	r12, r12
    9c00:	dd 1c       	adc	r13, r13
    9c02:	fa 95       	dec	r31
    9c04:	e1 f7       	brne	.-8      	; 0x9bfe <collision_detect_level+0x110>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9c06:	b9 89       	ldd	r27, Y+17	; 0x11
    9c08:	a8 e0       	ldi	r26, 0x08	; 8
    9c0a:	ba 9f       	mul	r27, r26
    9c0c:	a0 01       	movw	r20, r0
    9c0e:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9c10:	96 01       	movw	r18, r12
    9c12:	28 50       	subi	r18, 0x08	; 8
    9c14:	31 09       	sbc	r19, r1
    9c16:	2b 01       	movw	r4, r22
    9c18:	34 01       	movw	r6, r8
    9c1a:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9c1c:	b6 01       	movw	r22, r12
    9c1e:	80 e0       	ldi	r24, 0x00	; 0
    9c20:	90 e0       	ldi	r25, 0x00	; 0
    9c22:	69 87       	std	Y+9, r22	; 0x09
    9c24:	7a 87       	std	Y+10, r23	; 0x0a
    9c26:	8b 87       	std	Y+11, r24	; 0x0b
    9c28:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9c2a:	66 27       	eor	r22, r22
    9c2c:	57 fd       	sbrc	r21, 7
    9c2e:	60 95       	com	r22
    9c30:	76 2f       	mov	r23, r22
    9c32:	4d 87       	std	Y+13, r20	; 0x0d
    9c34:	5e 87       	std	Y+14, r21	; 0x0e
    9c36:	6f 87       	std	Y+15, r22	; 0x0f
    9c38:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9c3a:	b9 01       	movw	r22, r18
    9c3c:	80 e0       	ldi	r24, 0x00	; 0
    9c3e:	90 e0       	ldi	r25, 0x00	; 0
    9c40:	6b 8b       	std	Y+19, r22	; 0x13
    9c42:	7c 8b       	std	Y+20, r23	; 0x14
    9c44:	8d 8b       	std	Y+21, r24	; 0x15
    9c46:	9e 8b       	std	Y+22, r25	; 0x16
    9c48:	86 2d       	mov	r24, r6
    9c4a:	48 85       	ldd	r20, Y+8	; 0x08
    9c4c:	84 1b       	sub	r24, r20
	if (s->vx == 0 && s->vy == 0) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    9c4e:	81 17       	cp	r24, r17
    9c50:	08 f0       	brcs	.+2      	; 0x9c54 <collision_detect_level+0x166>
    9c52:	0c c1       	rjmp	.+536    	; 0x9e6c <collision_detect_level+0x37e>
		{
			if (s->vy < 0)
    9c54:	20 e0       	ldi	r18, 0x00	; 0
    9c56:	30 e0       	ldi	r19, 0x00	; 0
    9c58:	a9 01       	movw	r20, r18
    9c5a:	af 89       	ldd	r26, Y+23	; 0x17
    9c5c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9c5e:	6d 91       	ld	r22, X+
    9c60:	7d 91       	ld	r23, X+
    9c62:	8d 91       	ld	r24, X+
    9c64:	9c 91       	ld	r25, X
    9c66:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    9c6a:	87 ff       	sbrs	r24, 7
    9c6c:	58 c0       	rjmp	.+176    	; 0x9d1e <collision_detect_level+0x230>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    9c6e:	a1 01       	movw	r20, r2
    9c70:	b3 01       	movw	r22, r6
    9c72:	80 91 88 0f 	lds	r24, 0x0F88
    9c76:	90 91 89 0f 	lds	r25, 0x0F89
    9c7a:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9c7e:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    9c80:	a1 01       	movw	r20, r2
    9c82:	b2 01       	movw	r22, r4
    9c84:	80 91 88 0f 	lds	r24, 0x0F88
    9c88:	90 91 89 0f 	lds	r25, 0x0F89
    9c8c:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9c90:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9c92:	8f 2d       	mov	r24, r15
    9c94:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    9c98:	88 23       	and	r24, r24
    9c9a:	91 f0       	breq	.+36     	; 0x9cc0 <collision_detect_level+0x1d2>
    9c9c:	ef 89       	ldd	r30, Y+23	; 0x17
    9c9e:	f8 8d       	ldd	r31, Y+24	; 0x18
    9ca0:	64 81       	ldd	r22, Z+4	; 0x04
    9ca2:	75 81       	ldd	r23, Z+5	; 0x05
    9ca4:	86 81       	ldd	r24, Z+6	; 0x06
    9ca6:	97 81       	ldd	r25, Z+7	; 0x07
    9ca8:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9cac:	dc 01       	movw	r26, r24
    9cae:	cb 01       	movw	r24, r22
    9cb0:	28 e0       	ldi	r18, 0x08	; 8
    9cb2:	48 e0       	ldi	r20, 0x08	; 8
    9cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    9cb6:	7b 81       	ldd	r23, Y+3	; 0x03
    9cb8:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    9cbc:	84 30       	cpi	r24, 0x04	; 4
    9cbe:	c8 f4       	brcc	.+50     	; 0x9cf2 <collision_detect_level+0x204>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9cc0:	80 2f       	mov	r24, r16
    9cc2:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9cc6:	88 23       	and	r24, r24
    9cc8:	51 f1       	breq	.+84     	; 0x9d1e <collision_detect_level+0x230>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9cca:	af 89       	ldd	r26, Y+23	; 0x17
    9ccc:	b8 8d       	ldd	r27, Y+24	; 0x18
    9cce:	14 96       	adiw	r26, 0x04	; 4
    9cd0:	6d 91       	ld	r22, X+
    9cd2:	7d 91       	ld	r23, X+
    9cd4:	8d 91       	ld	r24, X+
    9cd6:	9c 91       	ld	r25, X
    9cd8:	17 97       	sbiw	r26, 0x07	; 7
    9cda:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9cde:	dc 01       	movw	r26, r24
    9ce0:	cb 01       	movw	r24, r22
    9ce2:	28 e0       	ldi	r18, 0x08	; 8
    9ce4:	48 e0       	ldi	r20, 0x08	; 8
    9ce6:	6c 81       	ldd	r22, Y+4	; 0x04
    9ce8:	7d 81       	ldd	r23, Y+5	; 0x05
    9cea:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    9cee:	84 30       	cpi	r24, 0x04	; 4
    9cf0:	b0 f0       	brcs	.+44     	; 0x9d1e <collision_detect_level+0x230>
				{
					s->vy =  0;
    9cf2:	ef 89       	ldd	r30, Y+23	; 0x17
    9cf4:	f8 8d       	ldd	r31, Y+24	; 0x18
    9cf6:	10 82       	st	Z, r1
    9cf8:	11 82       	std	Z+1, r1	; 0x01
    9cfa:	12 82       	std	Z+2, r1	; 0x02
    9cfc:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    9cfe:	69 85       	ldd	r22, Y+9	; 0x09
    9d00:	7a 85       	ldd	r23, Y+10	; 0x0a
    9d02:	8b 85       	ldd	r24, Y+11	; 0x0b
    9d04:	9c 85       	ldd	r25, Y+12	; 0x0c
    9d06:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    9d0a:	af 89       	ldd	r26, Y+23	; 0x17
    9d0c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9d0e:	18 96       	adiw	r26, 0x08	; 8
    9d10:	6d 93       	st	X+, r22
    9d12:	7d 93       	st	X+, r23
    9d14:	8d 93       	st	X+, r24
    9d16:	9c 93       	st	X, r25
    9d18:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    9d1a:	b1 e0       	ldi	r27, 0x01	; 1
    9d1c:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    9d1e:	20 e0       	ldi	r18, 0x00	; 0
    9d20:	30 e0       	ldi	r19, 0x00	; 0
    9d22:	a9 01       	movw	r20, r18
    9d24:	ef 89       	ldd	r30, Y+23	; 0x17
    9d26:	f8 8d       	ldd	r31, Y+24	; 0x18
    9d28:	60 81       	ld	r22, Z
    9d2a:	71 81       	ldd	r23, Z+1	; 0x01
    9d2c:	82 81       	ldd	r24, Z+2	; 0x02
    9d2e:	93 81       	ldd	r25, Z+3	; 0x03
    9d30:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    9d34:	18 16       	cp	r1, r24
    9d36:	0c f0       	brlt	.+2      	; 0x9d3a <collision_detect_level+0x24c>
    9d38:	91 c0       	rjmp	.+290    	; 0x9e5c <collision_detect_level+0x36e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9d3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    9d3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    9d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9d40:	98 89       	ldd	r25, Y+16	; 0x10
    9d42:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    9d46:	6b 01       	movw	r12, r22
    9d48:	7c 01       	movw	r14, r24
    9d4a:	af 89       	ldd	r26, Y+23	; 0x17
    9d4c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9d4e:	18 96       	adiw	r26, 0x08	; 8
    9d50:	2d 91       	ld	r18, X+
    9d52:	3d 91       	ld	r19, X+
    9d54:	4d 91       	ld	r20, X+
    9d56:	5c 91       	ld	r21, X
    9d58:	1b 97       	sbiw	r26, 0x0b	; 11
    9d5a:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9d5e:	20 e0       	ldi	r18, 0x00	; 0
    9d60:	30 e0       	ldi	r19, 0x00	; 0
    9d62:	40 e8       	ldi	r20, 0x80	; 128
    9d64:	5f e3       	ldi	r21, 0x3F	; 63
    9d66:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    9d6a:	20 e0       	ldi	r18, 0x00	; 0
    9d6c:	30 e0       	ldi	r19, 0x00	; 0
    9d6e:	40 e0       	ldi	r20, 0x00	; 0
    9d70:	5e e3       	ldi	r21, 0x3E	; 62
    9d72:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9d76:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9d7a:	ab 01       	movw	r20, r22
    9d7c:	b3 01       	movw	r22, r6
    9d7e:	80 91 88 0f 	lds	r24, 0x0F88
    9d82:	90 91 89 0f 	lds	r25, 0x0F89
    9d86:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9d8a:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    9d8c:	ef 89       	ldd	r30, Y+23	; 0x17
    9d8e:	f8 8d       	ldd	r31, Y+24	; 0x18
    9d90:	20 85       	ldd	r18, Z+8	; 0x08
    9d92:	31 85       	ldd	r19, Z+9	; 0x09
    9d94:	42 85       	ldd	r20, Z+10	; 0x0a
    9d96:	53 85       	ldd	r21, Z+11	; 0x0b
    9d98:	c7 01       	movw	r24, r14
    9d9a:	b6 01       	movw	r22, r12
    9d9c:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9da0:	20 e0       	ldi	r18, 0x00	; 0
    9da2:	30 e0       	ldi	r19, 0x00	; 0
    9da4:	40 e8       	ldi	r20, 0x80	; 128
    9da6:	5f e3       	ldi	r21, 0x3F	; 63
    9da8:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    9dac:	20 e0       	ldi	r18, 0x00	; 0
    9dae:	30 e0       	ldi	r19, 0x00	; 0
    9db0:	40 e0       	ldi	r20, 0x00	; 0
    9db2:	5e e3       	ldi	r21, 0x3E	; 62
    9db4:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9db8:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9dbc:	ab 01       	movw	r20, r22
    9dbe:	b2 01       	movw	r22, r4
    9dc0:	80 91 88 0f 	lds	r24, 0x0F88
    9dc4:	90 91 89 0f 	lds	r25, 0x0F89
    9dc8:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9dcc:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    9dce:	80 2f       	mov	r24, r16
    9dd0:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    9dd4:	88 23       	and	r24, r24
    9dd6:	a1 f0       	breq	.+40     	; 0x9e00 <collision_detect_level+0x312>
    9dd8:	af 89       	ldd	r26, Y+23	; 0x17
    9dda:	b8 8d       	ldd	r27, Y+24	; 0x18
    9ddc:	14 96       	adiw	r26, 0x04	; 4
    9dde:	6d 91       	ld	r22, X+
    9de0:	7d 91       	ld	r23, X+
    9de2:	8d 91       	ld	r24, X+
    9de4:	9c 91       	ld	r25, X
    9de6:	17 97       	sbiw	r26, 0x07	; 7
    9de8:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9dec:	dc 01       	movw	r26, r24
    9dee:	cb 01       	movw	r24, r22
    9df0:	28 e0       	ldi	r18, 0x08	; 8
    9df2:	48 e0       	ldi	r20, 0x08	; 8
    9df4:	6a 81       	ldd	r22, Y+2	; 0x02
    9df6:	7b 81       	ldd	r23, Y+3	; 0x03
    9df8:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    9dfc:	84 30       	cpi	r24, 0x04	; 4
    9dfe:	b8 f4       	brcc	.+46     	; 0x9e2e <collision_detect_level+0x340>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9e00:	8f 2d       	mov	r24, r15
    9e02:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    9e06:	88 23       	and	r24, r24
    9e08:	49 f1       	breq	.+82     	; 0x9e5c <collision_detect_level+0x36e>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9e0a:	ef 89       	ldd	r30, Y+23	; 0x17
    9e0c:	f8 8d       	ldd	r31, Y+24	; 0x18
    9e0e:	64 81       	ldd	r22, Z+4	; 0x04
    9e10:	75 81       	ldd	r23, Z+5	; 0x05
    9e12:	86 81       	ldd	r24, Z+6	; 0x06
    9e14:	97 81       	ldd	r25, Z+7	; 0x07
    9e16:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9e1a:	dc 01       	movw	r26, r24
    9e1c:	cb 01       	movw	r24, r22
    9e1e:	28 e0       	ldi	r18, 0x08	; 8
    9e20:	48 e0       	ldi	r20, 0x08	; 8
    9e22:	6c 81       	ldd	r22, Y+4	; 0x04
    9e24:	7d 81       	ldd	r23, Y+5	; 0x05
    9e26:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    9e2a:	84 30       	cpi	r24, 0x04	; 4
    9e2c:	b8 f0       	brcs	.+46     	; 0x9e5c <collision_detect_level+0x36e>
				{
					s->vy =  0;
    9e2e:	af 89       	ldd	r26, Y+23	; 0x17
    9e30:	b8 8d       	ldd	r27, Y+24	; 0x18
    9e32:	1d 92       	st	X+, r1
    9e34:	1d 92       	st	X+, r1
    9e36:	1d 92       	st	X+, r1
    9e38:	1c 92       	st	X, r1
    9e3a:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    9e3c:	1e 96       	adiw	r26, 0x0e	; 14
    9e3e:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    9e40:	6b 89       	ldd	r22, Y+19	; 0x13
    9e42:	7c 89       	ldd	r23, Y+20	; 0x14
    9e44:	8d 89       	ldd	r24, Y+21	; 0x15
    9e46:	9e 89       	ldd	r25, Y+22	; 0x16
    9e48:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    9e4c:	ef 89       	ldd	r30, Y+23	; 0x17
    9e4e:	f8 8d       	ldd	r31, Y+24	; 0x18
    9e50:	60 87       	std	Z+8, r22	; 0x08
    9e52:	71 87       	std	Z+9, r23	; 0x09
    9e54:	82 87       	std	Z+10, r24	; 0x0a
    9e56:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    9e58:	f1 e0       	ldi	r31, 0x01	; 1
    9e5a:	f9 83       	std	Y+1, r31	; 0x01
    9e5c:	2f ef       	ldi	r18, 0xFF	; 255
    9e5e:	62 1a       	sub	r6, r18
    9e60:	72 0a       	sbc	r7, r18
    9e62:	3f ef       	ldi	r19, 0xFF	; 255
    9e64:	43 1a       	sub	r4, r19
    9e66:	53 0a       	sbc	r5, r19
    9e68:	ef ce       	rjmp	.-546    	; 0x9c48 <collision_detect_level+0x15a>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    9e6a:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    9e6c:	af 89       	ldd	r26, Y+23	; 0x17
    9e6e:	b8 8d       	ldd	r27, Y+24	; 0x18
    9e70:	1c 96       	adiw	r26, 0x0c	; 12
    9e72:	8d 91       	ld	r24, X+
    9e74:	9c 91       	ld	r25, X
    9e76:	1d 97       	sbiw	r26, 0x0d	; 13
    9e78:	89 2b       	or	r24, r25
    9e7a:	09 f4       	brne	.+2      	; 0x9e7e <collision_detect_level+0x390>
    9e7c:	54 c1       	rjmp	.+680    	; 0xa126 <collision_detect_level+0x638>
	{
		y0_tile = s->y / 8;
    9e7e:	18 96       	adiw	r26, 0x08	; 8
    9e80:	cd 90       	ld	r12, X+
    9e82:	dd 90       	ld	r13, X+
    9e84:	ed 90       	ld	r14, X+
    9e86:	fc 90       	ld	r15, X
    9e88:	1b 97       	sbiw	r26, 0x0b	; 11
    9e8a:	20 e0       	ldi	r18, 0x00	; 0
    9e8c:	30 e0       	ldi	r19, 0x00	; 0
    9e8e:	40 e0       	ldi	r20, 0x00	; 0
    9e90:	5e e3       	ldi	r21, 0x3E	; 62
    9e92:	c7 01       	movw	r24, r14
    9e94:	b6 01       	movw	r22, r12
    9e96:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9e9a:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9e9e:	2b 01       	movw	r4, r22
    9ea0:	3c 01       	movw	r6, r24
    9ea2:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    9ea4:	20 e0       	ldi	r18, 0x00	; 0
    9ea6:	30 e0       	ldi	r19, 0x00	; 0
    9ea8:	40 ee       	ldi	r20, 0xE0	; 224
    9eaa:	50 e4       	ldi	r21, 0x40	; 64
    9eac:	c7 01       	movw	r24, r14
    9eae:	b6 01       	movw	r22, r12
    9eb0:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    9eb4:	20 e0       	ldi	r18, 0x00	; 0
    9eb6:	30 e0       	ldi	r19, 0x00	; 0
    9eb8:	40 e0       	ldi	r20, 0x00	; 0
    9eba:	5e e3       	ldi	r21, 0x3E	; 62
    9ebc:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    9ec0:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9ec4:	12 01       	movw	r2, r4
    9ec6:	83 e0       	ldi	r24, 0x03	; 3
    9ec8:	22 0c       	add	r2, r2
    9eca:	33 1c       	adc	r3, r3
    9ecc:	8a 95       	dec	r24
    9ece:	e1 f7       	brne	.-8      	; 0x9ec8 <collision_detect_level+0x3da>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9ed0:	fb 01       	movw	r30, r22
    9ed2:	93 e0       	ldi	r25, 0x03	; 3
    9ed4:	ee 0f       	add	r30, r30
    9ed6:	ff 1f       	adc	r31, r31
    9ed8:	9a 95       	dec	r25
    9eda:	e1 f7       	brne	.-8      	; 0x9ed4 <collision_detect_level+0x3e6>
    9edc:	fb 83       	std	Y+3, r31	; 0x03
    9ede:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    9ee0:	ff ef       	ldi	r31, 0xFF	; 255
    9ee2:	8f 1a       	sub	r8, r31
    9ee4:	9f 0a       	sbc	r9, r31
    9ee6:	94 01       	movw	r18, r8
    9ee8:	43 e0       	ldi	r20, 0x03	; 3
    9eea:	22 0f       	add	r18, r18
    9eec:	33 1f       	adc	r19, r19
    9eee:	4a 95       	dec	r20
    9ef0:	e1 f7       	brne	.-8      	; 0x9eea <collision_detect_level+0x3fc>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9ef2:	a8 e0       	ldi	r26, 0x08	; 8
    9ef4:	1a 9f       	mul	r17, r26
    9ef6:	a0 01       	movw	r20, r0
    9ef8:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    9efa:	49 01       	movw	r8, r18
    9efc:	b8 e0       	ldi	r27, 0x08	; 8
    9efe:	8b 1a       	sub	r8, r27
    9f00:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    9f02:	6b 01       	movw	r12, r22
    9f04:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    9f06:	b9 01       	movw	r22, r18
    9f08:	80 e0       	ldi	r24, 0x00	; 0
    9f0a:	90 e0       	ldi	r25, 0x00	; 0
    9f0c:	6c 83       	std	Y+4, r22	; 0x04
    9f0e:	7d 83       	std	Y+5, r23	; 0x05
    9f10:	8e 83       	std	Y+6, r24	; 0x06
    9f12:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9f14:	ca 01       	movw	r24, r20
    9f16:	aa 27       	eor	r26, r26
    9f18:	97 fd       	sbrc	r25, 7
    9f1a:	a0 95       	com	r26
    9f1c:	ba 2f       	mov	r27, r26
    9f1e:	89 87       	std	Y+9, r24	; 0x09
    9f20:	9a 87       	std	Y+10, r25	; 0x0a
    9f22:	ab 87       	std	Y+11, r26	; 0x0b
    9f24:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    9f26:	a1 2c       	mov	r10, r1
    9f28:	b1 2c       	mov	r11, r1
    9f2a:	80 2f       	mov	r24, r16
    9f2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    9f2e:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    9f30:	49 89       	ldd	r20, Y+17	; 0x11
    9f32:	84 17       	cp	r24, r20
    9f34:	08 f0       	brcs	.+2      	; 0x9f38 <collision_detect_level+0x44a>
    9f36:	f7 c0       	rjmp	.+494    	; 0xa126 <collision_detect_level+0x638>
		{
			if (s->vx < 0)
    9f38:	af 89       	ldd	r26, Y+23	; 0x17
    9f3a:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f3c:	1c 96       	adiw	r26, 0x0c	; 12
    9f3e:	8d 91       	ld	r24, X+
    9f40:	9c 91       	ld	r25, X
    9f42:	1d 97       	sbiw	r26, 0x0d	; 13
    9f44:	97 ff       	sbrs	r25, 7
    9f46:	57 c0       	rjmp	.+174    	; 0x9ff6 <collision_detect_level+0x508>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    9f48:	a8 01       	movw	r20, r16
    9f4a:	68 85       	ldd	r22, Y+8	; 0x08
    9f4c:	7a 89       	ldd	r23, Y+18	; 0x12
    9f4e:	80 91 88 0f 	lds	r24, 0x0F88
    9f52:	90 91 89 0f 	lds	r25, 0x0F89
    9f56:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9f5a:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    9f5c:	a6 01       	movw	r20, r12
    9f5e:	68 85       	ldd	r22, Y+8	; 0x08
    9f60:	7a 89       	ldd	r23, Y+18	; 0x12
    9f62:	80 91 88 0f 	lds	r24, 0x0F88
    9f66:	90 91 89 0f 	lds	r25, 0x0F89
    9f6a:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    9f6e:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9f70:	87 2d       	mov	r24, r7
    9f72:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    9f76:	88 23       	and	r24, r24
    9f78:	89 f0       	breq	.+34     	; 0x9f9c <collision_detect_level+0x4ae>
    9f7a:	ef 89       	ldd	r30, Y+23	; 0x17
    9f7c:	f8 8d       	ldd	r31, Y+24	; 0x18
    9f7e:	60 85       	ldd	r22, Z+8	; 0x08
    9f80:	71 85       	ldd	r23, Z+9	; 0x09
    9f82:	82 85       	ldd	r24, Z+10	; 0x0a
    9f84:	93 85       	ldd	r25, Z+11	; 0x0b
    9f86:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9f8a:	dc 01       	movw	r26, r24
    9f8c:	cb 01       	movw	r24, r22
    9f8e:	28 e0       	ldi	r18, 0x08	; 8
    9f90:	48 e0       	ldi	r20, 0x08	; 8
    9f92:	b1 01       	movw	r22, r2
    9f94:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    9f98:	84 30       	cpi	r24, 0x04	; 4
    9f9a:	c8 f4       	brcc	.+50     	; 0x9fce <collision_detect_level+0x4e0>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9f9c:	8e 2d       	mov	r24, r14
    9f9e:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9fa2:	88 23       	and	r24, r24
    9fa4:	41 f1       	breq	.+80     	; 0x9ff6 <collision_detect_level+0x508>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9fa6:	af 89       	ldd	r26, Y+23	; 0x17
    9fa8:	b8 8d       	ldd	r27, Y+24	; 0x18
    9faa:	18 96       	adiw	r26, 0x08	; 8
    9fac:	6d 91       	ld	r22, X+
    9fae:	7d 91       	ld	r23, X+
    9fb0:	8d 91       	ld	r24, X+
    9fb2:	9c 91       	ld	r25, X
    9fb4:	1b 97       	sbiw	r26, 0x0b	; 11
    9fb6:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    9fba:	dc 01       	movw	r26, r24
    9fbc:	cb 01       	movw	r24, r22
    9fbe:	28 e0       	ldi	r18, 0x08	; 8
    9fc0:	48 e0       	ldi	r20, 0x08	; 8
    9fc2:	6a 81       	ldd	r22, Y+2	; 0x02
    9fc4:	7b 81       	ldd	r23, Y+3	; 0x03
    9fc6:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    9fca:	84 30       	cpi	r24, 0x04	; 4
    9fcc:	a0 f0       	brcs	.+40     	; 0x9ff6 <collision_detect_level+0x508>
				{
					s->vx =  0;
    9fce:	ef 89       	ldd	r30, Y+23	; 0x17
    9fd0:	f8 8d       	ldd	r31, Y+24	; 0x18
    9fd2:	15 86       	std	Z+13, r1	; 0x0d
    9fd4:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    9fd6:	6c 81       	ldd	r22, Y+4	; 0x04
    9fd8:	7d 81       	ldd	r23, Y+5	; 0x05
    9fda:	8e 81       	ldd	r24, Y+6	; 0x06
    9fdc:	9f 81       	ldd	r25, Y+7	; 0x07
    9fde:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    9fe2:	af 89       	ldd	r26, Y+23	; 0x17
    9fe4:	b8 8d       	ldd	r27, Y+24	; 0x18
    9fe6:	14 96       	adiw	r26, 0x04	; 4
    9fe8:	6d 93       	st	X+, r22
    9fea:	7d 93       	st	X+, r23
    9fec:	8d 93       	st	X+, r24
    9fee:	9c 93       	st	X, r25
    9ff0:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    9ff2:	b1 e0       	ldi	r27, 0x01	; 1
    9ff4:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    9ff6:	ef 89       	ldd	r30, Y+23	; 0x17
    9ff8:	f8 8d       	ldd	r31, Y+24	; 0x18
    9ffa:	84 85       	ldd	r24, Z+12	; 0x0c
    9ffc:	95 85       	ldd	r25, Z+13	; 0x0d
    9ffe:	18 16       	cp	r1, r24
    a000:	19 06       	cpc	r1, r25
    a002:	0c f0       	brlt	.+2      	; 0xa006 <collision_detect_level+0x518>
    a004:	89 c0       	rjmp	.+274    	; 0xa118 <collision_detect_level+0x62a>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a006:	69 85       	ldd	r22, Y+9	; 0x09
    a008:	7a 85       	ldd	r23, Y+10	; 0x0a
    a00a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a00c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a00e:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    a012:	2b 01       	movw	r4, r22
    a014:	3c 01       	movw	r6, r24
    a016:	af 89       	ldd	r26, Y+23	; 0x17
    a018:	b8 8d       	ldd	r27, Y+24	; 0x18
    a01a:	14 96       	adiw	r26, 0x04	; 4
    a01c:	2d 91       	ld	r18, X+
    a01e:	3d 91       	ld	r19, X+
    a020:	4d 91       	ld	r20, X+
    a022:	5c 91       	ld	r21, X
    a024:	17 97       	sbiw	r26, 0x07	; 7
    a026:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a02a:	20 e0       	ldi	r18, 0x00	; 0
    a02c:	30 e0       	ldi	r19, 0x00	; 0
    a02e:	40 e8       	ldi	r20, 0x80	; 128
    a030:	5f e3       	ldi	r21, 0x3F	; 63
    a032:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a036:	20 e0       	ldi	r18, 0x00	; 0
    a038:	30 e0       	ldi	r19, 0x00	; 0
    a03a:	40 e0       	ldi	r20, 0x00	; 0
    a03c:	5e e3       	ldi	r21, 0x3E	; 62
    a03e:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a042:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a046:	a8 01       	movw	r20, r16
    a048:	80 91 88 0f 	lds	r24, 0x0F88
    a04c:	90 91 89 0f 	lds	r25, 0x0F89
    a050:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    a054:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a056:	ef 89       	ldd	r30, Y+23	; 0x17
    a058:	f8 8d       	ldd	r31, Y+24	; 0x18
    a05a:	24 81       	ldd	r18, Z+4	; 0x04
    a05c:	35 81       	ldd	r19, Z+5	; 0x05
    a05e:	46 81       	ldd	r20, Z+6	; 0x06
    a060:	57 81       	ldd	r21, Z+7	; 0x07
    a062:	c3 01       	movw	r24, r6
    a064:	b2 01       	movw	r22, r4
    a066:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a06a:	20 e0       	ldi	r18, 0x00	; 0
    a06c:	30 e0       	ldi	r19, 0x00	; 0
    a06e:	40 e8       	ldi	r20, 0x80	; 128
    a070:	5f e3       	ldi	r21, 0x3F	; 63
    a072:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a076:	20 e0       	ldi	r18, 0x00	; 0
    a078:	30 e0       	ldi	r19, 0x00	; 0
    a07a:	40 e0       	ldi	r20, 0x00	; 0
    a07c:	5e e3       	ldi	r21, 0x3E	; 62
    a07e:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a082:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a086:	a6 01       	movw	r20, r12
    a088:	80 91 88 0f 	lds	r24, 0x0F88
    a08c:	90 91 89 0f 	lds	r25, 0x0F89
    a090:	0e 94 f0 49 	call	0x93e0	; 0x93e0 <get_level_tile>
    a094:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a096:	8e 2d       	mov	r24, r14
    a098:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
    a09c:	88 23       	and	r24, r24
    a09e:	99 f0       	breq	.+38     	; 0xa0c6 <collision_detect_level+0x5d8>
    a0a0:	af 89       	ldd	r26, Y+23	; 0x17
    a0a2:	b8 8d       	ldd	r27, Y+24	; 0x18
    a0a4:	18 96       	adiw	r26, 0x08	; 8
    a0a6:	6d 91       	ld	r22, X+
    a0a8:	7d 91       	ld	r23, X+
    a0aa:	8d 91       	ld	r24, X+
    a0ac:	9c 91       	ld	r25, X
    a0ae:	1b 97       	sbiw	r26, 0x0b	; 11
    a0b0:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a0b4:	dc 01       	movw	r26, r24
    a0b6:	cb 01       	movw	r24, r22
    a0b8:	28 e0       	ldi	r18, 0x08	; 8
    a0ba:	48 e0       	ldi	r20, 0x08	; 8
    a0bc:	b1 01       	movw	r22, r2
    a0be:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    a0c2:	84 30       	cpi	r24, 0x04	; 4
    a0c4:	b8 f4       	brcc	.+46     	; 0xa0f4 <collision_detect_level+0x606>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a0c6:	87 2d       	mov	r24, r7
    a0c8:	0e 94 70 4a 	call	0x94e0	; 0x94e0 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a0cc:	88 23       	and	r24, r24
    a0ce:	21 f1       	breq	.+72     	; 0xa118 <collision_detect_level+0x62a>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a0d0:	ef 89       	ldd	r30, Y+23	; 0x17
    a0d2:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0d4:	60 85       	ldd	r22, Z+8	; 0x08
    a0d6:	71 85       	ldd	r23, Z+9	; 0x09
    a0d8:	82 85       	ldd	r24, Z+10	; 0x0a
    a0da:	93 85       	ldd	r25, Z+11	; 0x0b
    a0dc:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a0e0:	dc 01       	movw	r26, r24
    a0e2:	cb 01       	movw	r24, r22
    a0e4:	28 e0       	ldi	r18, 0x08	; 8
    a0e6:	48 e0       	ldi	r20, 0x08	; 8
    a0e8:	6a 81       	ldd	r22, Y+2	; 0x02
    a0ea:	7b 81       	ldd	r23, Y+3	; 0x03
    a0ec:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <pixel_overlap>
    a0f0:	84 30       	cpi	r24, 0x04	; 4
    a0f2:	90 f0       	brcs	.+36     	; 0xa118 <collision_detect_level+0x62a>
				{
					s->vx =  0;
    a0f4:	af 89       	ldd	r26, Y+23	; 0x17
    a0f6:	b8 8d       	ldd	r27, Y+24	; 0x18
    a0f8:	1d 96       	adiw	r26, 0x0d	; 13
    a0fa:	1c 92       	st	X, r1
    a0fc:	1e 92       	st	-X, r1
    a0fe:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a100:	c5 01       	movw	r24, r10
    a102:	b4 01       	movw	r22, r8
    a104:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a108:	ef 89       	ldd	r30, Y+23	; 0x17
    a10a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a10c:	64 83       	std	Z+4, r22	; 0x04
    a10e:	75 83       	std	Z+5, r23	; 0x05
    a110:	86 83       	std	Z+6, r24	; 0x06
    a112:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a114:	f1 e0       	ldi	r31, 0x01	; 1
    a116:	f9 83       	std	Y+1, r31	; 0x01
    a118:	0f 5f       	subi	r16, 0xFF	; 255
    a11a:	1f 4f       	sbci	r17, 0xFF	; 255
    a11c:	2f ef       	ldi	r18, 0xFF	; 255
    a11e:	c2 1a       	sub	r12, r18
    a120:	d2 0a       	sbc	r13, r18
    a122:	03 cf       	rjmp	.-506    	; 0x9f2a <collision_detect_level+0x43c>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    a124:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a126:	89 81       	ldd	r24, Y+1	; 0x01
    a128:	68 96       	adiw	r28, 0x18	; 24
    a12a:	0f b6       	in	r0, 0x3f	; 63
    a12c:	f8 94       	cli
    a12e:	de bf       	out	0x3e, r29	; 62
    a130:	0f be       	out	0x3f, r0	; 63
    a132:	cd bf       	out	0x3d, r28	; 61
    a134:	df 91       	pop	r29
    a136:	cf 91       	pop	r28
    a138:	1f 91       	pop	r17
    a13a:	0f 91       	pop	r16
    a13c:	ff 90       	pop	r15
    a13e:	ef 90       	pop	r14
    a140:	df 90       	pop	r13
    a142:	cf 90       	pop	r12
    a144:	bf 90       	pop	r11
    a146:	af 90       	pop	r10
    a148:	9f 90       	pop	r9
    a14a:	8f 90       	pop	r8
    a14c:	7f 90       	pop	r7
    a14e:	6f 90       	pop	r6
    a150:	5f 90       	pop	r5
    a152:	4f 90       	pop	r4
    a154:	3f 90       	pop	r3
    a156:	2f 90       	pop	r2
    a158:	08 95       	ret

0000a15a <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a15a:	2f 92       	push	r2
    a15c:	3f 92       	push	r3
    a15e:	4f 92       	push	r4
    a160:	5f 92       	push	r5
    a162:	6f 92       	push	r6
    a164:	7f 92       	push	r7
    a166:	8f 92       	push	r8
    a168:	9f 92       	push	r9
    a16a:	af 92       	push	r10
    a16c:	bf 92       	push	r11
    a16e:	cf 92       	push	r12
    a170:	df 92       	push	r13
    a172:	ef 92       	push	r14
    a174:	ff 92       	push	r15
    a176:	0f 93       	push	r16
    a178:	1f 93       	push	r17
    a17a:	cf 93       	push	r28
    a17c:	df 93       	push	r29
    a17e:	cd b7       	in	r28, 0x3d	; 61
    a180:	de b7       	in	r29, 0x3e	; 62
    a182:	2f 97       	sbiw	r28, 0x0f	; 15
    a184:	0f b6       	in	r0, 0x3f	; 63
    a186:	f8 94       	cli
    a188:	de bf       	out	0x3e, r29	; 62
    a18a:	0f be       	out	0x3f, r0	; 63
    a18c:	cd bf       	out	0x3d, r28	; 61
    a18e:	92 ed       	ldi	r25, 0xD2	; 210
    a190:	89 2e       	mov	r8, r25
    a192:	9d e0       	ldi	r25, 0x0D	; 13
    a194:	99 2e       	mov	r9, r25
    a196:	81 ec       	ldi	r24, 0xC1	; 193
    a198:	9d e0       	ldi	r25, 0x0D	; 13
    a19a:	9f 87       	std	Y+15, r25	; 0x0f
    a19c:	8e 87       	std	Y+14, r24	; 0x0e
    a19e:	9b e0       	ldi	r25, 0x0B	; 11
    a1a0:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    a1a2:	20 e1       	ldi	r18, 0x10	; 16
    a1a4:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    a1a6:	f4 01       	movw	r30, r8
    a1a8:	80 81       	ld	r24, Z
    a1aa:	88 23       	and	r24, r24
    a1ac:	09 f4       	brne	.+2      	; 0xa1b0 <animate_shot+0x56>
    a1ae:	46 c1       	rjmp	.+652    	; 0xa43c <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    a1b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1b4:	64 85       	ldd	r22, Z+12	; 0x0c
    a1b6:	75 85       	ldd	r23, Z+13	; 0x0d
    a1b8:	88 27       	eor	r24, r24
    a1ba:	77 fd       	sbrc	r23, 7
    a1bc:	80 95       	com	r24
    a1be:	98 2f       	mov	r25, r24
    a1c0:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    a1c4:	29 e8       	ldi	r18, 0x89	; 137
    a1c6:	38 e8       	ldi	r19, 0x88	; 136
    a1c8:	48 e8       	ldi	r20, 0x88	; 136
    a1ca:	5c e3       	ldi	r21, 0x3C	; 60
    a1cc:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a1d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1d4:	24 81       	ldd	r18, Z+4	; 0x04
    a1d6:	35 81       	ldd	r19, Z+5	; 0x05
    a1d8:	46 81       	ldd	r20, Z+6	; 0x06
    a1da:	57 81       	ldd	r21, Z+7	; 0x07
    a1dc:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a1e0:	2b 01       	movw	r4, r22
    a1e2:	3c 01       	movw	r6, r24
    a1e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    a1e8:	64 83       	std	Z+4, r22	; 0x04
    a1ea:	75 83       	std	Z+5, r23	; 0x05
    a1ec:	86 83       	std	Z+6, r24	; 0x06
    a1ee:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    a1f0:	29 e8       	ldi	r18, 0x89	; 137
    a1f2:	38 e8       	ldi	r19, 0x88	; 136
    a1f4:	48 e8       	ldi	r20, 0x88	; 136
    a1f6:	5c e3       	ldi	r21, 0x3C	; 60
    a1f8:	60 81       	ld	r22, Z
    a1fa:	71 81       	ldd	r23, Z+1	; 0x01
    a1fc:	82 81       	ldd	r24, Z+2	; 0x02
    a1fe:	93 81       	ldd	r25, Z+3	; 0x03
    a200:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a204:	ee 85       	ldd	r30, Y+14	; 0x0e
    a206:	ff 85       	ldd	r31, Y+15	; 0x0f
    a208:	20 85       	ldd	r18, Z+8	; 0x08
    a20a:	31 85       	ldd	r19, Z+9	; 0x09
    a20c:	42 85       	ldd	r20, Z+10	; 0x0a
    a20e:	53 85       	ldd	r21, Z+11	; 0x0b
    a210:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a214:	6b 01       	movw	r12, r22
    a216:	7c 01       	movw	r14, r24
    a218:	ee 85       	ldd	r30, Y+14	; 0x0e
    a21a:	ff 85       	ldd	r31, Y+15	; 0x0f
    a21c:	60 87       	std	Z+8, r22	; 0x08
    a21e:	71 87       	std	Z+9, r23	; 0x09
    a220:	82 87       	std	Z+10, r24	; 0x0a
    a222:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    a224:	60 91 97 0d 	lds	r22, 0x0D97
    a228:	70 91 98 0d 	lds	r23, 0x0D98
    a22c:	80 e0       	ldi	r24, 0x00	; 0
    a22e:	90 e0       	ldi	r25, 0x00	; 0
    a230:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a234:	9b 01       	movw	r18, r22
    a236:	ac 01       	movw	r20, r24
    a238:	c7 01       	movw	r24, r14
    a23a:	b6 01       	movw	r22, r12
    a23c:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a240:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a244:	c6 2e       	mov	r12, r22
    a246:	80 91 95 0d 	lds	r24, 0x0D95
    a24a:	90 91 96 0d 	lds	r25, 0x0D96
    a24e:	bc 01       	movw	r22, r24
    a250:	80 e0       	ldi	r24, 0x00	; 0
    a252:	90 e0       	ldi	r25, 0x00	; 0
    a254:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a258:	9b 01       	movw	r18, r22
    a25a:	ac 01       	movw	r20, r24
    a25c:	c3 01       	movw	r24, r6
    a25e:	b2 01       	movw	r22, r4
    a260:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a264:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a268:	01 e0       	ldi	r16, 0x01	; 1
    a26a:	21 e0       	ldi	r18, 0x01	; 1
    a26c:	4c 2d       	mov	r20, r12
    a26e:	89 81       	ldd	r24, Y+1	; 0x01
    a270:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a274:	ee 85       	ldd	r30, Y+14	; 0x0e
    a276:	ff 85       	ldd	r31, Y+15	; 0x0f
    a278:	c4 80       	ldd	r12, Z+4	; 0x04
    a27a:	d5 80       	ldd	r13, Z+5	; 0x05
    a27c:	e6 80       	ldd	r14, Z+6	; 0x06
    a27e:	f7 80       	ldd	r15, Z+7	; 0x07
    a280:	60 90 95 0d 	lds	r6, 0x0D95
    a284:	70 90 96 0d 	lds	r7, 0x0D96
    a288:	b3 01       	movw	r22, r6
    a28a:	80 e0       	ldi	r24, 0x00	; 0
    a28c:	90 e0       	ldi	r25, 0x00	; 0
    a28e:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a292:	9b 01       	movw	r18, r22
    a294:	ac 01       	movw	r20, r24
    a296:	c7 01       	movw	r24, r14
    a298:	b6 01       	movw	r22, r12
    a29a:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    a29e:	87 ff       	sbrs	r24, 7
    a2a0:	0f c0       	rjmp	.+30     	; 0xa2c0 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    a2a2:	f4 01       	movw	r30, r8
    a2a4:	10 82       	st	Z, r1
				game.player.active_shots--;
    a2a6:	80 91 ba 0d 	lds	r24, 0x0DBA
    a2aa:	81 50       	subi	r24, 0x01	; 1
    a2ac:	80 93 ba 0d 	sts	0x0DBA, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a2b0:	01 e0       	ldi	r16, 0x01	; 1
    a2b2:	21 e0       	ldi	r18, 0x01	; 1
    a2b4:	40 e0       	ldi	r20, 0x00	; 0
    a2b6:	60 ee       	ldi	r22, 0xE0	; 224
    a2b8:	89 81       	ldd	r24, Y+1	; 0x01
    a2ba:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
    a2be:	be c0       	rjmp	.+380    	; 0xa43c <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a2c0:	20 e0       	ldi	r18, 0x00	; 0
    a2c2:	30 e0       	ldi	r19, 0x00	; 0
    a2c4:	40 e0       	ldi	r20, 0x00	; 0
    a2c6:	51 e4       	ldi	r21, 0x41	; 65
    a2c8:	c7 01       	movw	r24, r14
    a2ca:	b6 01       	movw	r22, r12
    a2cc:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a2d0:	1b 01       	movw	r2, r22
    a2d2:	2c 01       	movw	r4, r24
    a2d4:	b3 01       	movw	r22, r6
    a2d6:	60 52       	subi	r22, 0x20	; 32
    a2d8:	7f 4f       	sbci	r23, 0xFF	; 255
    a2da:	80 e0       	ldi	r24, 0x00	; 0
    a2dc:	90 e0       	ldi	r25, 0x00	; 0
    a2de:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a2e2:	9b 01       	movw	r18, r22
    a2e4:	ac 01       	movw	r20, r24
    a2e6:	c2 01       	movw	r24, r4
    a2e8:	b1 01       	movw	r22, r2
    a2ea:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    a2ee:	18 16       	cp	r1, r24
    a2f0:	c4 f2       	brlt	.-80     	; 0xa2a2 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    a2f2:	41 e0       	ldi	r20, 0x01	; 1
    a2f4:	61 e0       	ldi	r22, 0x01	; 1
    a2f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    a2f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    a2fa:	0e 94 77 4d 	call	0x9aee	; 0x9aee <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a2fe:	81 11       	cpse	r24, r1
    a300:	d0 cf       	rjmp	.-96     	; 0xa2a2 <animate_shot+0x148>
    a302:	8e e4       	ldi	r24, 0x4E	; 78
    a304:	28 2e       	mov	r2, r24
    a306:	8e e0       	ldi	r24, 0x0E	; 14
    a308:	38 2e       	mov	r3, r24
    a30a:	61 2c       	mov	r6, r1
    a30c:	71 2c       	mov	r7, r1
    a30e:	24 01       	movw	r4, r8
    a310:	f1 e0       	ldi	r31, 0x01	; 1
    a312:	4f 1a       	sub	r4, r31
    a314:	51 08       	sbc	r5, r1
    a316:	f1 01       	movw	r30, r2
    a318:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a31a:	80 81       	ld	r24, Z
    a31c:	88 23       	and	r24, r24
    a31e:	09 f4       	brne	.+2      	; 0xa322 <animate_shot+0x1c8>
    a320:	82 c0       	rjmp	.+260    	; 0xa426 <animate_shot+0x2cc>
    a322:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    a324:	a0 80       	ld	r10, Z
    a326:	aa 0c       	add	r10, r10
    a328:	aa 0c       	add	r10, r10
    a32a:	aa 0c       	add	r10, r10
    a32c:	31 97       	sbiw	r30, 0x01	; 1
    a32e:	c0 80       	ld	r12, Z
    a330:	cc 0c       	add	r12, r12
    a332:	cc 0c       	add	r12, r12
    a334:	cc 0c       	add	r12, r12
    a336:	3a 97       	sbiw	r30, 0x0a	; 10
    a338:	60 81       	ld	r22, Z
    a33a:	71 81       	ldd	r23, Z+1	; 0x01
    a33c:	82 81       	ldd	r24, Z+2	; 0x02
    a33e:	93 81       	ldd	r25, Z+3	; 0x03
    a340:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a344:	6a 83       	std	Y+2, r22	; 0x02
    a346:	7b 83       	std	Y+3, r23	; 0x03
    a348:	8c 83       	std	Y+4, r24	; 0x04
    a34a:	9d 83       	std	Y+5, r25	; 0x05
    a34c:	f1 01       	movw	r30, r2
    a34e:	73 97       	sbiw	r30, 0x13	; 19
    a350:	60 81       	ld	r22, Z
    a352:	71 81       	ldd	r23, Z+1	; 0x01
    a354:	82 81       	ldd	r24, Z+2	; 0x02
    a356:	93 81       	ldd	r25, Z+3	; 0x03
    a358:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a35c:	6e 83       	std	Y+6, r22	; 0x06
    a35e:	7f 83       	std	Y+7, r23	; 0x07
    a360:	88 87       	std	Y+8, r24	; 0x08
    a362:	99 87       	std	Y+9, r25	; 0x09
    a364:	ee 85       	ldd	r30, Y+14	; 0x0e
    a366:	ff 85       	ldd	r31, Y+15	; 0x0f
    a368:	60 85       	ldd	r22, Z+8	; 0x08
    a36a:	71 85       	ldd	r23, Z+9	; 0x09
    a36c:	82 85       	ldd	r24, Z+10	; 0x0a
    a36e:	93 85       	ldd	r25, Z+11	; 0x0b
    a370:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a374:	6a 87       	std	Y+10, r22	; 0x0a
    a376:	7b 87       	std	Y+11, r23	; 0x0b
    a378:	8c 87       	std	Y+12, r24	; 0x0c
    a37a:	9d 87       	std	Y+13, r25	; 0x0d
    a37c:	ee 85       	ldd	r30, Y+14	; 0x0e
    a37e:	ff 85       	ldd	r31, Y+15	; 0x0f
    a380:	64 81       	ldd	r22, Z+4	; 0x04
    a382:	75 81       	ldd	r23, Z+5	; 0x05
    a384:	86 81       	ldd	r24, Z+6	; 0x06
    a386:	97 81       	ldd	r25, Z+7	; 0x07
    a388:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a38c:	dc 01       	movw	r26, r24
    a38e:	cb 01       	movw	r24, r22
    a390:	ea 80       	ldd	r14, Y+2	; 0x02
    a392:	fb 80       	ldd	r15, Y+3	; 0x03
    a394:	0e 81       	ldd	r16, Y+6	; 0x06
    a396:	1f 81       	ldd	r17, Y+7	; 0x07
    a398:	28 e0       	ldi	r18, 0x08	; 8
    a39a:	48 e0       	ldi	r20, 0x08	; 8
    a39c:	6a 85       	ldd	r22, Y+10	; 0x0a
    a39e:	7b 85       	ldd	r23, Y+11	; 0x0b
    a3a0:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a3a4:	88 23       	and	r24, r24
    a3a6:	09 f4       	brne	.+2      	; 0xa3aa <animate_shot+0x250>
    a3a8:	3e c0       	rjmp	.+124    	; 0xa426 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    a3aa:	41 e0       	ldi	r20, 0x01	; 1
    a3ac:	6f ef       	ldi	r22, 0xFF	; 255
    a3ae:	84 e0       	ldi	r24, 0x04	; 4
    a3b0:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    a3b4:	f1 01       	movw	r30, r2
    a3b6:	80 81       	ld	r24, Z
    a3b8:	f2 01       	movw	r30, r4
    a3ba:	90 81       	ld	r25, Z
    a3bc:	89 1b       	sub	r24, r25
    a3be:	f1 01       	movw	r30, r2
    a3c0:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    a3c2:	18 16       	cp	r1, r24
    a3c4:	14 f1       	brlt	.+68     	; 0xa40a <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    a3c6:	41 e0       	ldi	r20, 0x01	; 1
    a3c8:	6f ef       	ldi	r22, 0xFF	; 255
    a3ca:	86 e0       	ldi	r24, 0x06	; 6
    a3cc:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    a3d0:	f2 e4       	ldi	r31, 0x42	; 66
    a3d2:	f6 9d       	mul	r31, r6
    a3d4:	c0 01       	movw	r24, r0
    a3d6:	f7 9d       	mul	r31, r7
    a3d8:	90 0d       	add	r25, r0
    a3da:	11 24       	eor	r1, r1
    a3dc:	8f 56       	subi	r24, 0x6F	; 111
    a3de:	92 4f       	sbci	r25, 0xF2	; 242
    a3e0:	fc 01       	movw	r30, r24
    a3e2:	ea 54       	subi	r30, 0x4A	; 74
    a3e4:	ff 4f       	sbci	r31, 0xFF	; 255
    a3e6:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    a3e8:	31 97       	sbiw	r30, 0x01	; 1
    a3ea:	10 82       	st	Z, r1
							game.active_enemies--;
    a3ec:	80 91 a9 0d 	lds	r24, 0x0DA9
    a3f0:	81 50       	subi	r24, 0x01	; 1
    a3f2:	80 93 a9 0d 	sts	0x0DA9, r24
							game.score += KILL_SCORE;
    a3f6:	80 91 99 0d 	lds	r24, 0x0D99
    a3fa:	90 91 9a 0d 	lds	r25, 0x0D9A
    a3fe:	0a 96       	adiw	r24, 0x0a	; 10
    a400:	90 93 9a 0d 	sts	0x0D9A, r25
    a404:	80 93 99 0d 	sts	0x0D99, r24
							break;
    a408:	19 c0       	rjmp	.+50     	; 0xa43c <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    a40a:	f4 01       	movw	r30, r8
    a40c:	10 82       	st	Z, r1
						game.player.active_shots--;
    a40e:	80 91 ba 0d 	lds	r24, 0x0DBA
    a412:	81 50       	subi	r24, 0x01	; 1
    a414:	80 93 ba 0d 	sts	0x0DBA, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a418:	01 e0       	ldi	r16, 0x01	; 1
    a41a:	21 e0       	ldi	r18, 0x01	; 1
    a41c:	40 e0       	ldi	r20, 0x00	; 0
    a41e:	60 ee       	ldi	r22, 0xE0	; 224
    a420:	89 81       	ldd	r24, Y+1	; 0x01
    a422:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
    a426:	ff ef       	ldi	r31, 0xFF	; 255
    a428:	6f 1a       	sub	r6, r31
    a42a:	7f 0a       	sbc	r7, r31
    a42c:	22 e4       	ldi	r18, 0x42	; 66
    a42e:	22 0e       	add	r2, r18
    a430:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    a432:	85 e0       	ldi	r24, 0x05	; 5
    a434:	68 16       	cp	r6, r24
    a436:	71 04       	cpc	r7, r1
    a438:	09 f0       	breq	.+2      	; 0xa43c <animate_shot+0x2e2>
    a43a:	6d cf       	rjmp	.-294    	; 0xa316 <animate_shot+0x1bc>
    a43c:	9a e1       	ldi	r25, 0x1A	; 26
    a43e:	89 0e       	add	r8, r25
    a440:	91 1c       	adc	r9, r1
    a442:	e9 81       	ldd	r30, Y+1	; 0x01
    a444:	ef 5f       	subi	r30, 0xFF	; 255
    a446:	e9 83       	std	Y+1, r30	; 0x01
    a448:	8e 85       	ldd	r24, Y+14	; 0x0e
    a44a:	9f 85       	ldd	r25, Y+15	; 0x0f
    a44c:	4a 96       	adiw	r24, 0x1a	; 26
    a44e:	9f 87       	std	Y+15, r25	; 0x0f
    a450:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a452:	ee 30       	cpi	r30, 0x0E	; 14
    a454:	09 f0       	breq	.+2      	; 0xa458 <animate_shot+0x2fe>
    a456:	a7 ce       	rjmp	.-690    	; 0xa1a6 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    a458:	2f 96       	adiw	r28, 0x0f	; 15
    a45a:	0f b6       	in	r0, 0x3f	; 63
    a45c:	f8 94       	cli
    a45e:	de bf       	out	0x3e, r29	; 62
    a460:	0f be       	out	0x3f, r0	; 63
    a462:	cd bf       	out	0x3d, r28	; 61
    a464:	df 91       	pop	r29
    a466:	cf 91       	pop	r28
    a468:	1f 91       	pop	r17
    a46a:	0f 91       	pop	r16
    a46c:	ff 90       	pop	r15
    a46e:	ef 90       	pop	r14
    a470:	df 90       	pop	r13
    a472:	cf 90       	pop	r12
    a474:	bf 90       	pop	r11
    a476:	af 90       	pop	r10
    a478:	9f 90       	pop	r9
    a47a:	8f 90       	pop	r8
    a47c:	7f 90       	pop	r7
    a47e:	6f 90       	pop	r6
    a480:	5f 90       	pop	r5
    a482:	4f 90       	pop	r4
    a484:	3f 90       	pop	r3
    a486:	2f 90       	pop	r2
    a488:	08 95       	ret

0000a48a <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    a48a:	7f 92       	push	r7
    a48c:	8f 92       	push	r8
    a48e:	9f 92       	push	r9
    a490:	af 92       	push	r10
    a492:	bf 92       	push	r11
    a494:	cf 92       	push	r12
    a496:	df 92       	push	r13
    a498:	ef 92       	push	r14
    a49a:	ff 92       	push	r15
    a49c:	0f 93       	push	r16
    a49e:	1f 93       	push	r17
    a4a0:	cf 93       	push	r28
    a4a2:	df 93       	push	r29
    a4a4:	1f 92       	push	r1
    a4a6:	cd b7       	in	r28, 0x3d	; 61
    a4a8:	de b7       	in	r29, 0x3e	; 62
    a4aa:	6c 01       	movw	r12, r24
    a4ac:	7b 01       	movw	r14, r22
    a4ae:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    a4b0:	cb 01       	movw	r24, r22
    a4b2:	29 83       	std	Y+1, r18	; 0x01
    a4b4:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    a4b8:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    a4ba:	29 81       	ldd	r18, Y+1	; 0x01
    a4bc:	20 9f       	mul	r18, r16
    a4be:	50 01       	movw	r10, r0
    a4c0:	11 24       	eor	r1, r1
    a4c2:	10 e0       	ldi	r17, 0x00	; 0
    a4c4:	81 2f       	mov	r24, r17
    a4c6:	90 e0       	ldi	r25, 0x00	; 0
    a4c8:	8a 15       	cp	r24, r10
    a4ca:	9b 05       	cpc	r25, r11
    a4cc:	54 f4       	brge	.+20     	; 0xa4e2 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    a4ce:	40 e0       	ldi	r20, 0x00	; 0
    a4d0:	b4 01       	movw	r22, r8
    a4d2:	81 2f       	mov	r24, r17
    a4d4:	87 0d       	add	r24, r7
    a4d6:	29 83       	std	Y+1, r18	; 0x01
    a4d8:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    a4dc:	1f 5f       	subi	r17, 0xFF	; 255
    a4de:	29 81       	ldd	r18, Y+1	; 0x01
    a4e0:	f1 cf       	rjmp	.-30     	; 0xa4c4 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    a4e2:	f7 01       	movw	r30, r14
    a4e4:	84 81       	ldd	r24, Z+4	; 0x04
    a4e6:	88 23       	and	r24, r24
    a4e8:	51 f0       	breq	.+20     	; 0xa4fe <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    a4ea:	f6 01       	movw	r30, r12
    a4ec:	80 81       	ld	r24, Z
    a4ee:	90 e1       	ldi	r25, 0x10	; 16
    a4f0:	98 27       	eor	r25, r24
    a4f2:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    a4f4:	40 e0       	ldi	r20, 0x00	; 0
    a4f6:	60 ee       	ldi	r22, 0xE0	; 224
    a4f8:	87 2d       	mov	r24, r7
    a4fa:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	}
	return anim->looped;
}
    a4fe:	f7 01       	movw	r30, r14
    a500:	84 81       	ldd	r24, Z+4	; 0x04
    a502:	0f 90       	pop	r0
    a504:	df 91       	pop	r29
    a506:	cf 91       	pop	r28
    a508:	1f 91       	pop	r17
    a50a:	0f 91       	pop	r16
    a50c:	ff 90       	pop	r15
    a50e:	ef 90       	pop	r14
    a510:	df 90       	pop	r13
    a512:	cf 90       	pop	r12
    a514:	bf 90       	pop	r11
    a516:	af 90       	pop	r10
    a518:	9f 90       	pop	r9
    a51a:	8f 90       	pop	r8
    a51c:	7f 90       	pop	r7
    a51e:	08 95       	ret

0000a520 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    a520:	8f 92       	push	r8
    a522:	9f 92       	push	r9
    a524:	af 92       	push	r10
    a526:	bf 92       	push	r11
    a528:	ff 92       	push	r15
    a52a:	0f 93       	push	r16
    a52c:	1f 93       	push	r17
    a52e:	cf 93       	push	r28
    a530:	df 93       	push	r29
    a532:	ec 01       	movw	r28, r24
    a534:	f6 2e       	mov	r15, r22
    a536:	14 2f       	mov	r17, r20
    a538:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a53a:	6e 85       	ldd	r22, Y+14	; 0x0e
    a53c:	70 e0       	ldi	r23, 0x00	; 0
    a53e:	80 e0       	ldi	r24, 0x00	; 0
    a540:	90 e0       	ldi	r25, 0x00	; 0
    a542:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    a546:	29 e8       	ldi	r18, 0x89	; 137
    a548:	38 e8       	ldi	r19, 0x88	; 136
    a54a:	48 e8       	ldi	r20, 0x88	; 136
    a54c:	5c e3       	ldi	r21, 0x3C	; 60
    a54e:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a552:	28 81       	ld	r18, Y
    a554:	39 81       	ldd	r19, Y+1	; 0x01
    a556:	4a 81       	ldd	r20, Y+2	; 0x02
    a558:	5b 81       	ldd	r21, Y+3	; 0x03
    a55a:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a55e:	4b 01       	movw	r8, r22
    a560:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a562:	20 e0       	ldi	r18, 0x00	; 0
    a564:	30 e0       	ldi	r19, 0x00	; 0
    a566:	40 ef       	ldi	r20, 0xF0	; 240
    a568:	52 e4       	ldi	r21, 0x42	; 66
    a56a:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    a56e:	18 16       	cp	r1, r24
    a570:	2c f0       	brlt	.+10     	; 0xa57c <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a572:	88 82       	st	Y, r8
    a574:	99 82       	std	Y+1, r9	; 0x01
    a576:	aa 82       	std	Y+2, r10	; 0x02
    a578:	bb 82       	std	Y+3, r11	; 0x03
    a57a:	08 c0       	rjmp	.+16     	; 0xa58c <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a57c:	80 e0       	ldi	r24, 0x00	; 0
    a57e:	90 e0       	ldi	r25, 0x00	; 0
    a580:	a0 ef       	ldi	r26, 0xF0	; 240
    a582:	b2 e4       	ldi	r27, 0x42	; 66
    a584:	88 83       	st	Y, r24
    a586:	99 83       	std	Y+1, r25	; 0x01
    a588:	aa 83       	std	Y+2, r26	; 0x02
    a58a:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    a58c:	6c 85       	ldd	r22, Y+12	; 0x0c
    a58e:	7d 85       	ldd	r23, Y+13	; 0x0d
    a590:	88 27       	eor	r24, r24
    a592:	77 fd       	sbrc	r23, 7
    a594:	80 95       	com	r24
    a596:	98 2f       	mov	r25, r24
    a598:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    a59c:	29 e8       	ldi	r18, 0x89	; 137
    a59e:	38 e8       	ldi	r19, 0x88	; 136
    a5a0:	48 e8       	ldi	r20, 0x88	; 136
    a5a2:	5c e3       	ldi	r21, 0x3C	; 60
    a5a4:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a5a8:	9b 01       	movw	r18, r22
    a5aa:	ac 01       	movw	r20, r24
    a5ac:	6c 81       	ldd	r22, Y+4	; 0x04
    a5ae:	7d 81       	ldd	r23, Y+5	; 0x05
    a5b0:	8e 81       	ldd	r24, Y+6	; 0x06
    a5b2:	9f 81       	ldd	r25, Y+7	; 0x07
    a5b4:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a5b8:	6c 83       	std	Y+4, r22	; 0x04
    a5ba:	7d 83       	std	Y+5, r23	; 0x05
    a5bc:	8e 83       	std	Y+6, r24	; 0x06
    a5be:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    a5c0:	29 e8       	ldi	r18, 0x89	; 137
    a5c2:	38 e8       	ldi	r19, 0x88	; 136
    a5c4:	48 e8       	ldi	r20, 0x88	; 136
    a5c6:	5c e3       	ldi	r21, 0x3C	; 60
    a5c8:	68 81       	ld	r22, Y
    a5ca:	79 81       	ldd	r23, Y+1	; 0x01
    a5cc:	8a 81       	ldd	r24, Y+2	; 0x02
    a5ce:	9b 81       	ldd	r25, Y+3	; 0x03
    a5d0:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    a5d4:	9b 01       	movw	r18, r22
    a5d6:	ac 01       	movw	r20, r24
    a5d8:	68 85       	ldd	r22, Y+8	; 0x08
    a5da:	79 85       	ldd	r23, Y+9	; 0x09
    a5dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5de:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5e0:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    a5e4:	68 87       	std	Y+8, r22	; 0x08
    a5e6:	79 87       	std	Y+9, r23	; 0x09
    a5e8:	8a 87       	std	Y+10, r24	; 0x0a
    a5ea:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    a5ec:	40 2f       	mov	r20, r16
    a5ee:	61 2f       	mov	r22, r17
    a5f0:	ce 01       	movw	r24, r28
    a5f2:	0e 94 77 4d 	call	0x9aee	; 0x9aee <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    a5f6:	e0 91 97 0d 	lds	r30, 0x0D97
    a5fa:	f0 91 98 0d 	lds	r31, 0x0D98
    a5fe:	bf 01       	movw	r22, r30
    a600:	80 e0       	ldi	r24, 0x00	; 0
    a602:	90 e0       	ldi	r25, 0x00	; 0
    a604:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a608:	9b 01       	movw	r18, r22
    a60a:	ac 01       	movw	r20, r24
    a60c:	68 85       	ldd	r22, Y+8	; 0x08
    a60e:	79 85       	ldd	r23, Y+9	; 0x09
    a610:	8a 85       	ldd	r24, Y+10	; 0x0a
    a612:	9b 85       	ldd	r25, Y+11	; 0x0b
    a614:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a618:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a61c:	b6 2e       	mov	r11, r22
    a61e:	e0 91 95 0d 	lds	r30, 0x0D95
    a622:	f0 91 96 0d 	lds	r31, 0x0D96
    a626:	bf 01       	movw	r22, r30
    a628:	80 e0       	ldi	r24, 0x00	; 0
    a62a:	90 e0       	ldi	r25, 0x00	; 0
    a62c:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a630:	9b 01       	movw	r18, r22
    a632:	ac 01       	movw	r20, r24
    a634:	6c 81       	ldd	r22, Y+4	; 0x04
    a636:	7d 81       	ldd	r23, Y+5	; 0x05
    a638:	8e 81       	ldd	r24, Y+6	; 0x06
    a63a:	9f 81       	ldd	r25, Y+7	; 0x07
    a63c:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a640:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a644:	21 2f       	mov	r18, r17
    a646:	4b 2d       	mov	r20, r11
    a648:	8f 2d       	mov	r24, r15
    a64a:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
}
    a64e:	df 91       	pop	r29
    a650:	cf 91       	pop	r28
    a652:	1f 91       	pop	r17
    a654:	0f 91       	pop	r16
    a656:	ff 90       	pop	r15
    a658:	bf 90       	pop	r11
    a65a:	af 90       	pop	r10
    a65c:	9f 90       	pop	r9
    a65e:	8f 90       	pop	r8
    a660:	08 95       	ret

0000a662 <animate_player>:

void animate_player()
{
    a662:	0f 93       	push	r16
    a664:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    a666:	80 91 bb 0d 	lds	r24, 0x0DBB
    a66a:	84 ff       	sbrs	r24, 4
    a66c:	38 c0       	rjmp	.+112    	; 0xa6de <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    a66e:	60 91 97 0d 	lds	r22, 0x0D97
    a672:	70 91 98 0d 	lds	r23, 0x0D98
    a676:	80 e0       	ldi	r24, 0x00	; 0
    a678:	90 e0       	ldi	r25, 0x00	; 0
    a67a:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a67e:	9b 01       	movw	r18, r22
    a680:	ac 01       	movw	r20, r24
    a682:	60 91 b3 0d 	lds	r22, 0x0DB3
    a686:	70 91 b4 0d 	lds	r23, 0x0DB4
    a68a:	80 91 b5 0d 	lds	r24, 0x0DB5
    a68e:	90 91 b6 0d 	lds	r25, 0x0DB6
    a692:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a696:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a69a:	c6 2f       	mov	r28, r22
    a69c:	60 91 95 0d 	lds	r22, 0x0D95
    a6a0:	70 91 96 0d 	lds	r23, 0x0D96
    a6a4:	80 e0       	ldi	r24, 0x00	; 0
    a6a6:	90 e0       	ldi	r25, 0x00	; 0
    a6a8:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a6ac:	9b 01       	movw	r18, r22
    a6ae:	ac 01       	movw	r20, r24
    a6b0:	60 91 af 0d 	lds	r22, 0x0DAF
    a6b4:	70 91 b0 0d 	lds	r23, 0x0DB0
    a6b8:	80 91 b1 0d 	lds	r24, 0x0DB1
    a6bc:	90 91 b2 0d 	lds	r25, 0x0DB2
    a6c0:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    a6c4:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a6c8:	00 91 bf 0d 	lds	r16, 0x0DBF
    a6cc:	20 91 be 0d 	lds	r18, 0x0DBE
    a6d0:	4c 2f       	mov	r20, r28
    a6d2:	80 e0       	ldi	r24, 0x00	; 0
    a6d4:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    a6d8:	cf 91       	pop	r28
    a6da:	0f 91       	pop	r16
    a6dc:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    a6de:	20 91 bf 0d 	lds	r18, 0x0DBF
    a6e2:	40 91 be 0d 	lds	r20, 0x0DBE
    a6e6:	60 e0       	ldi	r22, 0x00	; 0
    a6e8:	8b ea       	ldi	r24, 0xAB	; 171
    a6ea:	9d e0       	ldi	r25, 0x0D	; 13
}
    a6ec:	cf 91       	pop	r28
    a6ee:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    a6f0:	0c 94 90 52 	jmp	0xa520	; 0xa520 <animate_sprite>

0000a6f4 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    a6f4:	1f 93       	push	r17
    a6f6:	cf 93       	push	r28
    a6f8:	df 93       	push	r29
    a6fa:	ec 01       	movw	r28, r24
    a6fc:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    a6fe:	98 89       	ldd	r25, Y+16	; 0x10
    a700:	89 2f       	mov	r24, r25
    a702:	88 70       	andi	r24, 0x08	; 8
    a704:	93 ff       	sbrs	r25, 3
    a706:	1e c0       	rjmp	.+60     	; 0xa744 <update_spider_enemy+0x50>
    a708:	2d 89       	ldd	r18, Y+21	; 0x15
    a70a:	20 38       	cpi	r18, 0x80	; 128
    a70c:	d9 f4       	brne	.+54     	; 0xa744 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    a70e:	81 e0       	ldi	r24, 0x01	; 1
    a710:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    a712:	80 e0       	ldi	r24, 0x00	; 0
    a714:	90 e0       	ldi	r25, 0x00	; 0
    a716:	a8 ec       	ldi	r26, 0xC8	; 200
    a718:	b2 ec       	ldi	r27, 0xC2	; 194
    a71a:	88 83       	st	Y, r24
    a71c:	99 83       	std	Y+1, r25	; 0x01
    a71e:	aa 83       	std	Y+2, r26	; 0x02
    a720:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    a722:	8f ef       	ldi	r24, 0xFF	; 255
    a724:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    a726:	8c e3       	ldi	r24, 0x3C	; 60
    a728:	90 e0       	ldi	r25, 0x00	; 0
    a72a:	9d 87       	std	Y+13, r25	; 0x0d
    a72c:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    a72e:	89 89       	ldd	r24, Y+17	; 0x11
    a730:	81 11       	cpse	r24, r1
    a732:	04 c0       	rjmp	.+8      	; 0xa73c <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    a734:	84 ec       	ldi	r24, 0xC4	; 196
    a736:	9f ef       	ldi	r25, 0xFF	; 255
    a738:	9d 87       	std	Y+13, r25	; 0x0d
    a73a:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    a73c:	40 e0       	ldi	r20, 0x00	; 0
    a73e:	6d ed       	ldi	r22, 0xDD	; 221
    a740:	7b e2       	ldi	r23, 0x2B	; 43
    a742:	1a c0       	rjmp	.+52     	; 0xa778 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    a744:	90 ff       	sbrs	r25, 0
    a746:	10 c0       	rjmp	.+32     	; 0xa768 <update_spider_enemy+0x74>
    a748:	9e 85       	ldd	r25, Y+14	; 0x0e
    a74a:	91 11       	cpse	r25, r1
    a74c:	0d c0       	rjmp	.+26     	; 0xa768 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    a74e:	88 e0       	ldi	r24, 0x08	; 8
    a750:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    a752:	1d 86       	std	Y+13, r1	; 0x0d
    a754:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    a756:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    a758:	89 89       	ldd	r24, Y+17	; 0x11
    a75a:	81 11       	cpse	r24, r1
    a75c:	03 c0       	rjmp	.+6      	; 0xa764 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    a75e:	81 e0       	ldi	r24, 0x01	; 1
    a760:	89 8b       	std	Y+17, r24	; 0x11
    a762:	0d c0       	rjmp	.+26     	; 0xa77e <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    a764:	19 8a       	std	Y+17, r1	; 0x11
    a766:	0b c0       	rjmp	.+22     	; 0xa77e <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    a768:	88 23       	and	r24, r24
    a76a:	49 f0       	breq	.+18     	; 0xa77e <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    a76c:	ce 01       	movw	r24, r28
    a76e:	c2 96       	adiw	r24, 0x32	; 50
    a770:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    a774:	40 e0       	ldi	r20, 0x00	; 0
    a776:	bc 01       	movw	r22, r24
    a778:	81 2f       	mov	r24, r17
    a77a:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
	}
	e->frame_count++;
    a77e:	8d 89       	ldd	r24, Y+21	; 0x15
    a780:	8f 5f       	subi	r24, 0xFF	; 255
    a782:	8d 8b       	std	Y+21, r24	; 0x15
}
    a784:	df 91       	pop	r29
    a786:	cf 91       	pop	r28
    a788:	1f 91       	pop	r17
    a78a:	08 95       	ret

0000a78c <update_basic_shot>:

void update_basic_shot(Shot* s, u8 slot)
{
    a78c:	cf 93       	push	r28
    a78e:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    a790:	42 96       	adiw	r24, 0x12	; 18
    a792:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    a796:	40 e0       	ldi	r20, 0x00	; 0
    a798:	bc 01       	movw	r22, r24
    a79a:	8c 2f       	mov	r24, r28
}
    a79c:	cf 91       	pop	r28
	e->frame_count++;
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    a79e:	0c 94 78 47 	jmp	0x8ef0	; 0x8ef0 <LBMapSprite>

0000a7a2 <update_enemies>:
}

void update_enemies()
{
    a7a2:	ef 92       	push	r14
    a7a4:	ff 92       	push	r15
    a7a6:	0f 93       	push	r16
    a7a8:	1f 93       	push	r17
    a7aa:	cf 93       	push	r28
    a7ac:	df 93       	push	r29
    a7ae:	ca e4       	ldi	r28, 0x4A	; 74
    a7b0:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    a7b2:	16 e0       	ldi	r17, 0x06	; 6
    a7b4:	ce 01       	movw	r24, r28
    a7b6:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    a7b8:	fc 01       	movw	r30, r24
    a7ba:	20 81       	ld	r18, Z
    a7bc:	ae 01       	movw	r20, r28
    a7be:	41 50       	subi	r20, 0x01	; 1
    a7c0:	51 09       	sbc	r21, r1
    a7c2:	7a 01       	movw	r14, r20
    a7c4:	24 ff       	sbrs	r18, 4
    a7c6:	0a c0       	rjmp	.+20     	; 0xa7dc <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    a7c8:	08 81       	ld	r16, Y
    a7ca:	fa 01       	movw	r30, r20
    a7cc:	20 81       	ld	r18, Z
    a7ce:	41 2f       	mov	r20, r17
    a7d0:	be 01       	movw	r22, r28
    a7d2:	69 5d       	subi	r22, 0xD9	; 217
    a7d4:	7f 4f       	sbci	r23, 0xFF	; 255
    a7d6:	0e 94 45 52 	call	0xa48a	; 0xa48a <map_explosion>
    a7da:	0d c0       	rjmp	.+26     	; 0xa7f6 <update_enemies+0x54>
    a7dc:	fe 01       	movw	r30, r28
    a7de:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    a7e0:	80 81       	ld	r24, Z
    a7e2:	88 23       	and	r24, r24
    a7e4:	41 f0       	breq	.+16     	; 0xa7f6 <update_enemies+0x54>
		{
			switch (game.enemies[i].enemy_type)
    a7e6:	89 81       	ldd	r24, Y+1	; 0x01
    a7e8:	81 11       	cpse	r24, r1
    a7ea:	05 c0       	rjmp	.+10     	; 0xa7f6 <update_enemies+0x54>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    a7ec:	61 2f       	mov	r22, r17
    a7ee:	ce 01       	movw	r24, r28
    a7f0:	43 97       	sbiw	r24, 0x13	; 19
    a7f2:	0e 94 7a 53 	call	0xa6f4	; 0xa6f4 <update_spider_enemy>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    a7f6:	f7 01       	movw	r30, r14
    a7f8:	90 81       	ld	r25, Z
    a7fa:	88 81       	ld	r24, Y
    a7fc:	98 9f       	mul	r25, r24
    a7fe:	10 0d       	add	r17, r0
    a800:	11 24       	eor	r1, r1
    a802:	ce 5b       	subi	r28, 0xBE	; 190
    a804:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a806:	ff e0       	ldi	r31, 0x0F	; 15
    a808:	c4 39       	cpi	r28, 0x94	; 148
    a80a:	df 07       	cpc	r29, r31
    a80c:	99 f6       	brne	.-90     	; 0xa7b4 <update_enemies+0x12>
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    a80e:	df 91       	pop	r29
    a810:	cf 91       	pop	r28
    a812:	1f 91       	pop	r17
    a814:	0f 91       	pop	r16
    a816:	ff 90       	pop	r15
    a818:	ef 90       	pop	r14
    a81a:	08 95       	ret

0000a81c <update_enemy_shots>:

void update_enemy_shots()
{
    a81c:	8f 92       	push	r8
    a81e:	9f 92       	push	r9
    a820:	af 92       	push	r10
    a822:	bf 92       	push	r11
    a824:	cf 92       	push	r12
    a826:	df 92       	push	r13
    a828:	ef 92       	push	r14
    a82a:	ff 92       	push	r15
    a82c:	0f 93       	push	r16
    a82e:	1f 93       	push	r17
    a830:	cf 93       	push	r28
    a832:	df 93       	push	r29
    a834:	00 d0       	rcall	.+0      	; 0xa836 <update_enemy_shots+0x1a>
    a836:	00 d0       	rcall	.+0      	; 0xa838 <update_enemy_shots+0x1c>
    a838:	cd b7       	in	r28, 0x3d	; 61
    a83a:	de b7       	in	r29, 0x3e	; 62
    a83c:	2d e4       	ldi	r18, 0x4D	; 77
    a83e:	82 2e       	mov	r8, r18
    a840:	2e e0       	ldi	r18, 0x0E	; 14
    a842:	92 2e       	mov	r9, r18
    a844:	00 e6       	ldi	r16, 0x60	; 96
    a846:	1e e0       	ldi	r17, 0x0E	; 14
    a848:	3f e0       	ldi	r19, 0x0F	; 15
    a84a:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    a84c:	44 e6       	ldi	r20, 0x64	; 100
    a84e:	e4 2e       	mov	r14, r20
    a850:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    a852:	5c e9       	ldi	r21, 0x9C	; 156
    a854:	c5 2e       	mov	r12, r21
    a856:	dd 24       	eor	r13, r13
    a858:	da 94       	dec	r13
    a85a:	aa 24       	eor	r10, r10
    a85c:	aa 94       	dec	r10
    a85e:	ab 0c       	add	r10, r11
    a860:	f4 01       	movw	r30, r8
    a862:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    a864:	80 81       	ld	r24, Z
    a866:	88 23       	and	r24, r24
    a868:	09 f4       	brne	.+2      	; 0xa86c <update_enemy_shots+0x50>
    a86a:	58 c0       	rjmp	.+176    	; 0xa91c <update_enemy_shots+0x100>
    a86c:	f4 01       	movw	r30, r8
    a86e:	80 81       	ld	r24, Z
    a870:	8c 33       	cpi	r24, 0x3C	; 60
    a872:	08 f4       	brcc	.+2      	; 0xa876 <update_enemy_shots+0x5a>
    a874:	50 c0       	rjmp	.+160    	; 0xa916 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    a876:	10 82       	st	Z, r1
    a878:	f8 01       	movw	r30, r16
    a87a:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    a87c:	80 81       	ld	r24, Z
    a87e:	81 30       	cpi	r24, 0x01	; 1
    a880:	09 f0       	breq	.+2      	; 0xa884 <update_enemy_shots+0x68>
    a882:	4c c0       	rjmp	.+152    	; 0xa91c <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    a884:	f8 01       	movw	r30, r16
    a886:	90 81       	ld	r25, Z
    a888:	91 11       	cpse	r25, r1
    a88a:	3f c0       	rjmp	.+126    	; 0xa90a <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    a88c:	80 83       	st	Z, r24
    a88e:	f4 01       	movw	r30, r8
    a890:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    a892:	20 81       	ld	r18, Z
    a894:	31 81       	ldd	r19, Z+1	; 0x01
    a896:	42 81       	ldd	r20, Z+2	; 0x02
    a898:	53 81       	ldd	r21, Z+3	; 0x03
    a89a:	f4 01       	movw	r30, r8
    a89c:	26 83       	std	Z+6, r18	; 0x06
    a89e:	37 83       	std	Z+7, r19	; 0x07
    a8a0:	40 87       	std	Z+8, r20	; 0x08
    a8a2:	51 87       	std	Z+9, r21	; 0x09
    a8a4:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    a8a6:	60 81       	ld	r22, Z
    a8a8:	71 81       	ldd	r23, Z+1	; 0x01
    a8aa:	82 81       	ldd	r24, Z+2	; 0x02
    a8ac:	93 81       	ldd	r25, Z+3	; 0x03
    a8ae:	29 83       	std	Y+1, r18	; 0x01
    a8b0:	3a 83       	std	Y+2, r19	; 0x02
    a8b2:	4b 83       	std	Y+3, r20	; 0x03
    a8b4:	5c 83       	std	Y+4, r21	; 0x04
    a8b6:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    a8ba:	83 e0       	ldi	r24, 0x03	; 3
    a8bc:	76 95       	lsr	r23
    a8be:	67 95       	ror	r22
    a8c0:	8a 95       	dec	r24
    a8c2:	e1 f7       	brne	.-8      	; 0xa8bc <update_enemy_shots+0xa0>
    a8c4:	93 e0       	ldi	r25, 0x03	; 3
    a8c6:	66 0f       	add	r22, r22
    a8c8:	77 1f       	adc	r23, r23
    a8ca:	9a 95       	dec	r25
    a8cc:	e1 f7       	brne	.-8      	; 0xa8c6 <update_enemy_shots+0xaa>
    a8ce:	80 e0       	ldi	r24, 0x00	; 0
    a8d0:	90 e0       	ldi	r25, 0x00	; 0
    a8d2:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a8d6:	f4 01       	movw	r30, r8
    a8d8:	62 87       	std	Z+10, r22	; 0x0a
    a8da:	73 87       	std	Z+11, r23	; 0x0b
    a8dc:	84 87       	std	Z+12, r24	; 0x0c
    a8de:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    a8e0:	f7 86       	std	Z+15, r15	; 0x0f
    a8e2:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    a8e4:	29 81       	ldd	r18, Y+1	; 0x01
    a8e6:	3a 81       	ldd	r19, Y+2	; 0x02
    a8e8:	4b 81       	ldd	r20, Y+3	; 0x03
    a8ea:	5c 81       	ldd	r21, Y+4	; 0x04
    a8ec:	60 91 af 0d 	lds	r22, 0x0DAF
    a8f0:	70 91 b0 0d 	lds	r23, 0x0DB0
    a8f4:	80 91 b1 0d 	lds	r24, 0x0DB1
    a8f8:	90 91 b2 0d 	lds	r25, 0x0DB2
    a8fc:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    a900:	18 16       	cp	r1, r24
    a902:	1c f0       	brlt	.+6      	; 0xa90a <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    a904:	f4 01       	movw	r30, r8
    a906:	d7 86       	std	Z+15, r13	; 0x0f
    a908:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    a90a:	6a 2d       	mov	r22, r10
    a90c:	c4 01       	movw	r24, r8
    a90e:	02 96       	adiw	r24, 0x02	; 2
    a910:	0e 94 c6 53 	call	0xa78c	; 0xa78c <update_basic_shot>
    a914:	03 c0       	rjmp	.+6      	; 0xa91c <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    a916:	8f 5f       	subi	r24, 0xFF	; 255
    a918:	f4 01       	movw	r30, r8
    a91a:	80 83       	st	Z, r24
    a91c:	b3 94       	inc	r11
    a91e:	f2 e4       	ldi	r31, 0x42	; 66
    a920:	8f 0e       	add	r8, r31
    a922:	91 1c       	adc	r9, r1
    a924:	0e 5b       	subi	r16, 0xBE	; 190
    a926:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a928:	84 e1       	ldi	r24, 0x14	; 20
    a92a:	b8 12       	cpse	r11, r24
    a92c:	96 cf       	rjmp	.-212    	; 0xa85a <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    a92e:	0f 90       	pop	r0
    a930:	0f 90       	pop	r0
    a932:	0f 90       	pop	r0
    a934:	0f 90       	pop	r0
    a936:	df 91       	pop	r29
    a938:	cf 91       	pop	r28
    a93a:	1f 91       	pop	r17
    a93c:	0f 91       	pop	r16
    a93e:	ff 90       	pop	r15
    a940:	ef 90       	pop	r14
    a942:	df 90       	pop	r13
    a944:	cf 90       	pop	r12
    a946:	bf 90       	pop	r11
    a948:	af 90       	pop	r10
    a94a:	9f 90       	pop	r9
    a94c:	8f 90       	pop	r8
    a94e:	08 95       	ret

0000a950 <animate_enemies>:

void animate_enemies()
{
    a950:	2f 92       	push	r2
    a952:	3f 92       	push	r3
    a954:	4f 92       	push	r4
    a956:	5f 92       	push	r5
    a958:	6f 92       	push	r6
    a95a:	7f 92       	push	r7
    a95c:	8f 92       	push	r8
    a95e:	9f 92       	push	r9
    a960:	af 92       	push	r10
    a962:	bf 92       	push	r11
    a964:	cf 92       	push	r12
    a966:	df 92       	push	r13
    a968:	ef 92       	push	r14
    a96a:	ff 92       	push	r15
    a96c:	0f 93       	push	r16
    a96e:	1f 93       	push	r17
    a970:	cf 93       	push	r28
    a972:	df 93       	push	r29
    a974:	cd b7       	in	r28, 0x3d	; 61
    a976:	de b7       	in	r29, 0x3e	; 62
    a978:	2c 97       	sbiw	r28, 0x0c	; 12
    a97a:	0f b6       	in	r0, 0x3f	; 63
    a97c:	f8 94       	cli
    a97e:	de bf       	out	0x3e, r29	; 62
    a980:	0f be       	out	0x3f, r0	; 63
    a982:	cd bf       	out	0x3d, r28	; 61
    a984:	49 e4       	ldi	r20, 0x49	; 73
    a986:	24 2e       	mov	r2, r20
    a988:	4e e0       	ldi	r20, 0x0E	; 14
    a98a:	34 2e       	mov	r3, r20
    a98c:	8a e4       	ldi	r24, 0x4A	; 74
    a98e:	9e e0       	ldi	r25, 0x0E	; 14
    a990:	9c 87       	std	Y+12, r25	; 0x0c
    a992:	8b 87       	std	Y+11, r24	; 0x0b
    a994:	57 e3       	ldi	r21, 0x37	; 55
    a996:	85 2e       	mov	r8, r21
    a998:	5e e0       	ldi	r21, 0x0E	; 14
    a99a:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    a99c:	66 e0       	ldi	r22, 0x06	; 6
    a99e:	b6 2e       	mov	r11, r22
    a9a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9a4:	34 97       	sbiw	r30, 0x04	; 4
    a9a6:	fa 83       	std	Y+2, r31	; 0x02
    a9a8:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    a9aa:	80 81       	ld	r24, Z
    a9ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9b0:	33 97       	sbiw	r30, 0x03	; 3
    a9b2:	88 23       	and	r24, r24
    a9b4:	09 f4       	brne	.+2      	; 0xa9b8 <animate_enemies+0x68>
    a9b6:	a9 c0       	rjmp	.+338    	; 0xab0a <animate_enemies+0x1ba>
    a9b8:	80 81       	ld	r24, Z
    a9ba:	84 fd       	sbrc	r24, 4
    a9bc:	a6 c0       	rjmp	.+332    	; 0xab0a <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    a9be:	f4 01       	movw	r30, r8
    a9c0:	44 80       	ldd	r4, Z+4	; 0x04
    a9c2:	55 80       	ldd	r5, Z+5	; 0x05
    a9c4:	66 80       	ldd	r6, Z+6	; 0x06
    a9c6:	77 80       	ldd	r7, Z+7	; 0x07
    a9c8:	60 91 95 0d 	lds	r22, 0x0D95
    a9cc:	70 91 96 0d 	lds	r23, 0x0D96
    a9d0:	80 e0       	ldi	r24, 0x00	; 0
    a9d2:	90 e0       	ldi	r25, 0x00	; 0
    a9d4:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    a9d8:	9b 01       	movw	r18, r22
    a9da:	ac 01       	movw	r20, r24
    a9dc:	c3 01       	movw	r24, r6
    a9de:	b2 01       	movw	r22, r4
    a9e0:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    a9e4:	87 fd       	sbrc	r24, 7
    a9e6:	25 c0       	rjmp	.+74     	; 0xaa32 <animate_enemies+0xe2>
    a9e8:	f4 01       	movw	r30, r8
    a9ea:	c0 84       	ldd	r12, Z+8	; 0x08
    a9ec:	d1 84       	ldd	r13, Z+9	; 0x09
    a9ee:	e2 84       	ldd	r14, Z+10	; 0x0a
    a9f0:	f3 84       	ldd	r15, Z+11	; 0x0b
    a9f2:	00 91 97 0d 	lds	r16, 0x0D97
    a9f6:	10 91 98 0d 	lds	r17, 0x0D98
    a9fa:	b8 01       	movw	r22, r16
    a9fc:	80 e0       	ldi	r24, 0x00	; 0
    a9fe:	90 e0       	ldi	r25, 0x00	; 0
    aa00:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    aa04:	9b 01       	movw	r18, r22
    aa06:	ac 01       	movw	r20, r24
    aa08:	c7 01       	movw	r24, r14
    aa0a:	b6 01       	movw	r22, r12
    aa0c:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    aa10:	87 fd       	sbrc	r24, 7
    aa12:	0f c0       	rjmp	.+30     	; 0xaa32 <animate_enemies+0xe2>
    aa14:	b8 01       	movw	r22, r16
    aa16:	60 53       	subi	r22, 0x30	; 48
    aa18:	7f 4f       	sbci	r23, 0xFF	; 255
    aa1a:	80 e0       	ldi	r24, 0x00	; 0
    aa1c:	90 e0       	ldi	r25, 0x00	; 0
    aa1e:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    aa22:	9b 01       	movw	r18, r22
    aa24:	ac 01       	movw	r20, r24
    aa26:	c7 01       	movw	r24, r14
    aa28:	b6 01       	movw	r22, r12
    aa2a:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    aa2e:	18 16       	cp	r1, r24
    aa30:	84 f4       	brge	.+32     	; 0xaa52 <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    aa32:	e9 81       	ldd	r30, Y+1	; 0x01
    aa34:	fa 81       	ldd	r31, Y+2	; 0x02
    aa36:	10 82       	st	Z, r1
				game.active_enemies--;
    aa38:	80 91 a9 0d 	lds	r24, 0x0DA9
    aa3c:	81 50       	subi	r24, 0x01	; 1
    aa3e:	80 93 a9 0d 	sts	0x0DA9, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    aa42:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa44:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa46:	00 81       	ld	r16, Z
    aa48:	f1 01       	movw	r30, r2
    aa4a:	20 81       	ld	r18, Z
    aa4c:	40 e0       	ldi	r20, 0x00	; 0
    aa4e:	60 ee       	ldi	r22, 0xE0	; 224
    aa50:	8c c0       	rjmp	.+280    	; 0xab6a <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    aa52:	c7 01       	movw	r24, r14
    aa54:	b6 01       	movw	r22, r12
    aa56:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    aa5a:	69 83       	std	Y+1, r22	; 0x01
    aa5c:	7a 83       	std	Y+2, r23	; 0x02
    aa5e:	8b 83       	std	Y+3, r24	; 0x03
    aa60:	9c 83       	std	Y+4, r25	; 0x04
    aa62:	c3 01       	movw	r24, r6
    aa64:	b2 01       	movw	r22, r4
    aa66:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    aa6a:	6d 83       	std	Y+5, r22	; 0x05
    aa6c:	7e 83       	std	Y+6, r23	; 0x06
    aa6e:	8f 83       	std	Y+7, r24	; 0x07
    aa70:	98 87       	std	Y+8, r25	; 0x08
    aa72:	20 91 bf 0d 	lds	r18, 0x0DBF
    aa76:	22 0f       	add	r18, r18
    aa78:	22 0f       	add	r18, r18
    aa7a:	22 0f       	add	r18, r18
    aa7c:	40 91 be 0d 	lds	r20, 0x0DBE
    aa80:	44 0f       	add	r20, r20
    aa82:	44 0f       	add	r20, r20
    aa84:	44 0f       	add	r20, r20
    aa86:	60 91 b3 0d 	lds	r22, 0x0DB3
    aa8a:	70 91 b4 0d 	lds	r23, 0x0DB4
    aa8e:	80 91 b5 0d 	lds	r24, 0x0DB5
    aa92:	90 91 b6 0d 	lds	r25, 0x0DB6
    aa96:	29 87       	std	Y+9, r18	; 0x09
    aa98:	4a 87       	std	Y+10, r20	; 0x0a
    aa9a:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    aa9e:	2b 01       	movw	r4, r22
    aaa0:	3c 01       	movw	r6, r24
    aaa2:	60 91 af 0d 	lds	r22, 0x0DAF
    aaa6:	70 91 b0 0d 	lds	r23, 0x0DB0
    aaaa:	80 91 b1 0d 	lds	r24, 0x0DB1
    aaae:	90 91 b2 0d 	lds	r25, 0x0DB2
    aab2:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    aab6:	dc 01       	movw	r26, r24
    aab8:	cb 01       	movw	r24, r22
    aaba:	28 e0       	ldi	r18, 0x08	; 8
    aabc:	a2 2e       	mov	r10, r18
    aabe:	38 e0       	ldi	r19, 0x08	; 8
    aac0:	c3 2e       	mov	r12, r19
    aac2:	e9 80       	ldd	r14, Y+1	; 0x01
    aac4:	fa 80       	ldd	r15, Y+2	; 0x02
    aac6:	0d 81       	ldd	r16, Y+5	; 0x05
    aac8:	1e 81       	ldd	r17, Y+6	; 0x06
    aaca:	29 85       	ldd	r18, Y+9	; 0x09
    aacc:	4a 85       	ldd	r20, Y+10	; 0x0a
    aace:	b2 01       	movw	r22, r4
    aad0:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBCollides>
    aad4:	88 23       	and	r24, r24
    aad6:	79 f0       	breq	.+30     	; 0xaaf6 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    aad8:	80 91 bb 0d 	lds	r24, 0x0DBB
    aadc:	84 fd       	sbrc	r24, 4
    aade:	0b c0       	rjmp	.+22     	; 0xaaf6 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    aae0:	41 e0       	ldi	r20, 0x01	; 1
    aae2:	6f ef       	ldi	r22, 0xFF	; 255
    aae4:	85 e0       	ldi	r24, 0x05	; 5
    aae6:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
				game.player.shield = 0;
    aaea:	10 92 c0 0d 	sts	0x0DC0, r1
				game.player.flags = EXPLODING;
    aaee:	80 e1       	ldi	r24, 0x10	; 16
    aaf0:	80 93 bb 0d 	sts	0x0DBB, r24
				return;
    aaf4:	57 c0       	rjmp	.+174    	; 0xaba4 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    aaf6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aaf8:	fc 85       	ldd	r31, Y+12	; 0x0c
    aafa:	20 81       	ld	r18, Z
    aafc:	f1 01       	movw	r30, r2
    aafe:	40 81       	ld	r20, Z
    ab00:	6b 2d       	mov	r22, r11
    ab02:	c4 01       	movw	r24, r8
    ab04:	0e 94 90 52 	call	0xa520	; 0xa520 <animate_sprite>
    ab08:	33 c0       	rjmp	.+102    	; 0xab70 <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    ab0a:	80 81       	ld	r24, Z
    ab0c:	84 ff       	sbrs	r24, 4
    ab0e:	30 c0       	rjmp	.+96     	; 0xab70 <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    ab10:	60 91 97 0d 	lds	r22, 0x0D97
    ab14:	70 91 98 0d 	lds	r23, 0x0D98
    ab18:	80 e0       	ldi	r24, 0x00	; 0
    ab1a:	90 e0       	ldi	r25, 0x00	; 0
    ab1c:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    ab20:	9b 01       	movw	r18, r22
    ab22:	ac 01       	movw	r20, r24
    ab24:	f4 01       	movw	r30, r8
    ab26:	60 85       	ldd	r22, Z+8	; 0x08
    ab28:	71 85       	ldd	r23, Z+9	; 0x09
    ab2a:	82 85       	ldd	r24, Z+10	; 0x0a
    ab2c:	93 85       	ldd	r25, Z+11	; 0x0b
    ab2e:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    ab32:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    ab36:	16 2f       	mov	r17, r22
    ab38:	60 91 95 0d 	lds	r22, 0x0D95
    ab3c:	70 91 96 0d 	lds	r23, 0x0D96
    ab40:	80 e0       	ldi	r24, 0x00	; 0
    ab42:	90 e0       	ldi	r25, 0x00	; 0
    ab44:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    ab48:	9b 01       	movw	r18, r22
    ab4a:	ac 01       	movw	r20, r24
    ab4c:	f4 01       	movw	r30, r8
    ab4e:	64 81       	ldd	r22, Z+4	; 0x04
    ab50:	75 81       	ldd	r23, Z+5	; 0x05
    ab52:	86 81       	ldd	r24, Z+6	; 0x06
    ab54:	97 81       	ldd	r25, Z+7	; 0x07
    ab56:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    ab5a:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    ab5e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab60:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab62:	00 81       	ld	r16, Z
    ab64:	f1 01       	movw	r30, r2
    ab66:	20 81       	ld	r18, Z
    ab68:	41 2f       	mov	r20, r17
    ab6a:	8b 2d       	mov	r24, r11
    ab6c:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    ab70:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab72:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab74:	90 81       	ld	r25, Z
    ab76:	f1 01       	movw	r30, r2
    ab78:	80 81       	ld	r24, Z
    ab7a:	98 9f       	mul	r25, r24
    ab7c:	b0 0c       	add	r11, r0
    ab7e:	11 24       	eor	r1, r1
    ab80:	f2 e4       	ldi	r31, 0x42	; 66
    ab82:	2f 0e       	add	r2, r31
    ab84:	31 1c       	adc	r3, r1
    ab86:	8b 85       	ldd	r24, Y+11	; 0x0b
    ab88:	9c 85       	ldd	r25, Y+12	; 0x0c
    ab8a:	8e 5b       	subi	r24, 0xBE	; 190
    ab8c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab8e:	9c 87       	std	Y+12, r25	; 0x0c
    ab90:	8b 87       	std	Y+11, r24	; 0x0b
    ab92:	92 e4       	ldi	r25, 0x42	; 66
    ab94:	89 0e       	add	r8, r25
    ab96:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ab98:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab9a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab9c:	e4 59       	subi	r30, 0x94	; 148
    ab9e:	ff 40       	sbci	r31, 0x0F	; 15
    aba0:	09 f0       	breq	.+2      	; 0xaba4 <animate_enemies+0x254>
    aba2:	fe ce       	rjmp	.-516    	; 0xa9a0 <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    aba4:	2c 96       	adiw	r28, 0x0c	; 12
    aba6:	0f b6       	in	r0, 0x3f	; 63
    aba8:	f8 94       	cli
    abaa:	de bf       	out	0x3e, r29	; 62
    abac:	0f be       	out	0x3f, r0	; 63
    abae:	cd bf       	out	0x3d, r28	; 61
    abb0:	df 91       	pop	r29
    abb2:	cf 91       	pop	r28
    abb4:	1f 91       	pop	r17
    abb6:	0f 91       	pop	r16
    abb8:	ff 90       	pop	r15
    abba:	ef 90       	pop	r14
    abbc:	df 90       	pop	r13
    abbe:	cf 90       	pop	r12
    abc0:	bf 90       	pop	r11
    abc2:	af 90       	pop	r10
    abc4:	9f 90       	pop	r9
    abc6:	8f 90       	pop	r8
    abc8:	7f 90       	pop	r7
    abca:	6f 90       	pop	r6
    abcc:	5f 90       	pop	r5
    abce:	4f 90       	pop	r4
    abd0:	3f 90       	pop	r3
    abd2:	2f 90       	pop	r2
    abd4:	08 95       	ret

0000abd6 <animate_enemy_shots>:

void animate_enemy_shots()
{
    abd6:	2f 92       	push	r2
    abd8:	3f 92       	push	r3
    abda:	4f 92       	push	r4
    abdc:	5f 92       	push	r5
    abde:	6f 92       	push	r6
    abe0:	7f 92       	push	r7
    abe2:	8f 92       	push	r8
    abe4:	9f 92       	push	r9
    abe6:	af 92       	push	r10
    abe8:	bf 92       	push	r11
    abea:	cf 92       	push	r12
    abec:	df 92       	push	r13
    abee:	ef 92       	push	r14
    abf0:	ff 92       	push	r15
    abf2:	0f 93       	push	r16
    abf4:	1f 93       	push	r17
    abf6:	cf 93       	push	r28
    abf8:	df 93       	push	r29
    abfa:	cd b7       	in	r28, 0x3d	; 61
    abfc:	de b7       	in	r29, 0x3e	; 62
    abfe:	62 97       	sbiw	r28, 0x12	; 18
    ac00:	0f b6       	in	r0, 0x3f	; 63
    ac02:	f8 94       	cli
    ac04:	de bf       	out	0x3e, r29	; 62
    ac06:	0f be       	out	0x3f, r0	; 63
    ac08:	cd bf       	out	0x3d, r28	; 61
    ac0a:	40 e6       	ldi	r20, 0x60	; 96
    ac0c:	24 2e       	mov	r2, r20
    ac0e:	4e e0       	ldi	r20, 0x0E	; 14
    ac10:	34 2e       	mov	r3, r20
    ac12:	5f e4       	ldi	r21, 0x4F	; 79
    ac14:	85 2e       	mov	r8, r21
    ac16:	5e e0       	ldi	r21, 0x0E	; 14
    ac18:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    ac1a:	6e e0       	ldi	r22, 0x0E	; 14
    ac1c:	b6 2e       	mov	r11, r22
    ac1e:	f1 01       	movw	r30, r2
    ac20:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    ac22:	80 81       	ld	r24, Z
    ac24:	81 30       	cpi	r24, 0x01	; 1
    ac26:	09 f0       	breq	.+2      	; 0xac2a <animate_enemy_shots+0x54>
    ac28:	ee c0       	rjmp	.+476    	; 0xae06 <animate_enemy_shots+0x230>
			{
				if (game.enemies[i].shot[j].active)
    ac2a:	d1 01       	movw	r26, r2
    ac2c:	8c 91       	ld	r24, X
    ac2e:	88 23       	and	r24, r24
    ac30:	09 f4       	brne	.+2      	; 0xac34 <animate_enemy_shots+0x5e>
    ac32:	e9 c0       	rjmp	.+466    	; 0xae06 <animate_enemy_shots+0x230>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ac34:	f4 01       	movw	r30, r8
    ac36:	c4 80       	ldd	r12, Z+4	; 0x04
    ac38:	d5 80       	ldd	r13, Z+5	; 0x05
    ac3a:	e6 80       	ldd	r14, Z+6	; 0x06
    ac3c:	f7 80       	ldd	r15, Z+7	; 0x07
    ac3e:	60 90 95 0d 	lds	r6, 0x0D95
    ac42:	70 90 96 0d 	lds	r7, 0x0D96
    ac46:	b3 01       	movw	r22, r6
    ac48:	80 e0       	ldi	r24, 0x00	; 0
    ac4a:	90 e0       	ldi	r25, 0x00	; 0
    ac4c:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    ac50:	9b 01       	movw	r18, r22
    ac52:	ac 01       	movw	r20, r24
    ac54:	c7 01       	movw	r24, r14
    ac56:	b6 01       	movw	r22, r12
    ac58:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    ac5c:	87 ff       	sbrs	r24, 7
    ac5e:	03 c0       	rjmp	.+6      	; 0xac66 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    ac60:	d1 01       	movw	r26, r2
    ac62:	1c 92       	st	X, r1
    ac64:	84 c0       	rjmp	.+264    	; 0xad6e <animate_enemy_shots+0x198>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ac66:	b3 01       	movw	r22, r6
    ac68:	60 52       	subi	r22, 0x20	; 32
    ac6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ac6c:	80 e0       	ldi	r24, 0x00	; 0
    ac6e:	90 e0       	ldi	r25, 0x00	; 0
    ac70:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    ac74:	9b 01       	movw	r18, r22
    ac76:	ac 01       	movw	r20, r24
    ac78:	c7 01       	movw	r24, r14
    ac7a:	b6 01       	movw	r22, r12
    ac7c:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    ac80:	18 16       	cp	r1, r24
    ac82:	74 f3       	brlt	.-36     	; 0xac60 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    ac84:	41 e0       	ldi	r20, 0x01	; 1
    ac86:	61 e0       	ldi	r22, 0x01	; 1
    ac88:	c4 01       	movw	r24, r8
    ac8a:	0e 94 77 4d 	call	0x9aee	; 0x9aee <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ac8e:	81 11       	cpse	r24, r1
    ac90:	e7 cf       	rjmp	.-50     	; 0xac60 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    ac92:	f4 01       	movw	r30, r8
    ac94:	40 84       	ldd	r4, Z+8	; 0x08
    ac96:	51 84       	ldd	r5, Z+9	; 0x09
    ac98:	62 84       	ldd	r6, Z+10	; 0x0a
    ac9a:	73 84       	ldd	r7, Z+11	; 0x0b
    ac9c:	84 81       	ldd	r24, Z+4	; 0x04
    ac9e:	95 81       	ldd	r25, Z+5	; 0x05
    aca0:	a6 81       	ldd	r26, Z+6	; 0x06
    aca2:	b7 81       	ldd	r27, Z+7	; 0x07
    aca4:	89 83       	std	Y+1, r24	; 0x01
    aca6:	9a 83       	std	Y+2, r25	; 0x02
    aca8:	ab 83       	std	Y+3, r26	; 0x03
    acaa:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    acac:	c3 01       	movw	r24, r6
    acae:	b2 01       	movw	r22, r4
    acb0:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    acb4:	6d 83       	std	Y+5, r22	; 0x05
    acb6:	7e 83       	std	Y+6, r23	; 0x06
    acb8:	8f 83       	std	Y+7, r24	; 0x07
    acba:	98 87       	std	Y+8, r25	; 0x08
    acbc:	69 81       	ldd	r22, Y+1	; 0x01
    acbe:	7a 81       	ldd	r23, Y+2	; 0x02
    acc0:	8b 81       	ldd	r24, Y+3	; 0x03
    acc2:	9c 81       	ldd	r25, Y+4	; 0x04
    acc4:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    acc8:	69 87       	std	Y+9, r22	; 0x09
    acca:	7a 87       	std	Y+10, r23	; 0x0a
    accc:	8b 87       	std	Y+11, r24	; 0x0b
    acce:	9c 87       	std	Y+12, r25	; 0x0c
    acd0:	20 91 bf 0d 	lds	r18, 0x0DBF
    acd4:	22 0f       	add	r18, r18
    acd6:	22 0f       	add	r18, r18
    acd8:	22 0f       	add	r18, r18
    acda:	40 91 be 0d 	lds	r20, 0x0DBE
    acde:	44 0f       	add	r20, r20
    ace0:	44 0f       	add	r20, r20
    ace2:	44 0f       	add	r20, r20
    ace4:	60 91 b3 0d 	lds	r22, 0x0DB3
    ace8:	70 91 b4 0d 	lds	r23, 0x0DB4
    acec:	80 91 b5 0d 	lds	r24, 0x0DB5
    acf0:	90 91 b6 0d 	lds	r25, 0x0DB6
    acf4:	29 8b       	std	Y+17, r18	; 0x11
    acf6:	4a 8b       	std	Y+18, r20	; 0x12
    acf8:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    acfc:	6d 87       	std	Y+13, r22	; 0x0d
    acfe:	7e 87       	std	Y+14, r23	; 0x0e
    ad00:	8f 87       	std	Y+15, r24	; 0x0f
    ad02:	98 8b       	std	Y+16, r25	; 0x10
    ad04:	60 91 af 0d 	lds	r22, 0x0DAF
    ad08:	70 91 b0 0d 	lds	r23, 0x0DB0
    ad0c:	80 91 b1 0d 	lds	r24, 0x0DB1
    ad10:	90 91 b2 0d 	lds	r25, 0x0DB2
    ad14:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    ad18:	dc 01       	movw	r26, r24
    ad1a:	cb 01       	movw	r24, r22
    ad1c:	28 e0       	ldi	r18, 0x08	; 8
    ad1e:	a2 2e       	mov	r10, r18
    ad20:	38 e0       	ldi	r19, 0x08	; 8
    ad22:	c3 2e       	mov	r12, r19
    ad24:	ed 80       	ldd	r14, Y+5	; 0x05
    ad26:	fe 80       	ldd	r15, Y+6	; 0x06
    ad28:	09 85       	ldd	r16, Y+9	; 0x09
    ad2a:	1a 85       	ldd	r17, Y+10	; 0x0a
    ad2c:	29 89       	ldd	r18, Y+17	; 0x11
    ad2e:	4a 89       	ldd	r20, Y+18	; 0x12
    ad30:	6d 85       	ldd	r22, Y+13	; 0x0d
    ad32:	7e 85       	ldd	r23, Y+14	; 0x0e
    ad34:	0e 94 43 47 	call	0x8e86	; 0x8e86 <LBCollides>
    ad38:	88 23       	and	r24, r24
    ad3a:	f1 f0       	breq	.+60     	; 0xad78 <animate_enemy_shots+0x1a2>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    ad3c:	41 e0       	ldi	r20, 0x01	; 1
    ad3e:	6f ef       	ldi	r22, 0xFF	; 255
    ad40:	84 e0       	ldi	r24, 0x04	; 4
    ad42:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    ad46:	80 91 c0 0d 	lds	r24, 0x0DC0
    ad4a:	f1 01       	movw	r30, r2
    ad4c:	31 97       	sbiw	r30, 0x01	; 1
    ad4e:	90 81       	ld	r25, Z
    ad50:	89 1b       	sub	r24, r25
    ad52:	80 93 c0 0d 	sts	0x0DC0, r24
						if (game.player.shield <= 0)
    ad56:	18 16       	cp	r1, r24
    ad58:	44 f0       	brlt	.+16     	; 0xad6a <animate_enemy_shots+0x194>
						{
							SFX_PLAYER_EXPLODE;
    ad5a:	41 e0       	ldi	r20, 0x01	; 1
    ad5c:	6f ef       	ldi	r22, 0xFF	; 255
    ad5e:	85 e0       	ldi	r24, 0x05	; 5
    ad60:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
							game.player.flags = EXPLODING;
    ad64:	b0 e1       	ldi	r27, 0x10	; 16
    ad66:	b0 93 bb 0d 	sts	0x0DBB, r27
						}
						game.enemies[i].shot[j].active = 0;
    ad6a:	f1 01       	movw	r30, r2
    ad6c:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    ad6e:	01 e0       	ldi	r16, 0x01	; 1
    ad70:	21 e0       	ldi	r18, 0x01	; 1
    ad72:	40 e0       	ldi	r20, 0x00	; 0
    ad74:	60 ee       	ldi	r22, 0xE0	; 224
    ad76:	44 c0       	rjmp	.+136    	; 0xae00 <animate_enemy_shots+0x22a>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    ad78:	d4 01       	movw	r26, r8
    ad7a:	1c 96       	adiw	r26, 0x0c	; 12
    ad7c:	6d 91       	ld	r22, X+
    ad7e:	7c 91       	ld	r23, X
    ad80:	1d 97       	sbiw	r26, 0x0d	; 13
    ad82:	88 27       	eor	r24, r24
    ad84:	77 fd       	sbrc	r23, 7
    ad86:	80 95       	com	r24
    ad88:	98 2f       	mov	r25, r24
    ad8a:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <__floatsisf>
    ad8e:	29 e8       	ldi	r18, 0x89	; 137
    ad90:	38 e8       	ldi	r19, 0x88	; 136
    ad92:	48 e8       	ldi	r20, 0x88	; 136
    ad94:	5c e3       	ldi	r21, 0x3C	; 60
    ad96:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    ad9a:	9b 01       	movw	r18, r22
    ad9c:	ac 01       	movw	r20, r24
    ad9e:	69 81       	ldd	r22, Y+1	; 0x01
    ada0:	7a 81       	ldd	r23, Y+2	; 0x02
    ada2:	8b 81       	ldd	r24, Y+3	; 0x03
    ada4:	9c 81       	ldd	r25, Y+4	; 0x04
    ada6:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    adaa:	6b 01       	movw	r12, r22
    adac:	7c 01       	movw	r14, r24
    adae:	f4 01       	movw	r30, r8
    adb0:	64 83       	std	Z+4, r22	; 0x04
    adb2:	75 83       	std	Z+5, r23	; 0x05
    adb4:	86 83       	std	Z+6, r24	; 0x06
    adb6:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    adb8:	60 91 97 0d 	lds	r22, 0x0D97
    adbc:	70 91 98 0d 	lds	r23, 0x0D98
    adc0:	80 e0       	ldi	r24, 0x00	; 0
    adc2:	90 e0       	ldi	r25, 0x00	; 0
    adc4:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    adc8:	9b 01       	movw	r18, r22
    adca:	ac 01       	movw	r20, r24
    adcc:	c3 01       	movw	r24, r6
    adce:	b2 01       	movw	r22, r4
    add0:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    add4:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    add8:	76 2e       	mov	r7, r22
    adda:	60 91 95 0d 	lds	r22, 0x0D95
    adde:	70 91 96 0d 	lds	r23, 0x0D96
    ade2:	80 e0       	ldi	r24, 0x00	; 0
    ade4:	90 e0       	ldi	r25, 0x00	; 0
    ade6:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    adea:	9b 01       	movw	r18, r22
    adec:	ac 01       	movw	r20, r24
    adee:	c7 01       	movw	r24, r14
    adf0:	b6 01       	movw	r22, r12
    adf2:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    adf6:	0e 94 f0 5b 	call	0xb7e0	; 0xb7e0 <__fixunssfsi>
    adfa:	01 e0       	ldi	r16, 0x01	; 1
    adfc:	21 e0       	ldi	r18, 0x01	; 1
    adfe:	47 2d       	mov	r20, r7
    ae00:	8b 2d       	mov	r24, r11
    ae02:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
					}
				}
			}
			slot += 1;
    ae06:	b3 94       	inc	r11
    ae08:	f2 e4       	ldi	r31, 0x42	; 66
    ae0a:	2f 0e       	add	r2, r31
    ae0c:	31 1c       	adc	r3, r1
    ae0e:	82 e4       	ldi	r24, 0x42	; 66
    ae10:	88 0e       	add	r8, r24
    ae12:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ae14:	93 e1       	ldi	r25, 0x13	; 19
    ae16:	b9 12       	cpse	r11, r25
    ae18:	02 cf       	rjmp	.-508    	; 0xac1e <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    ae1a:	62 96       	adiw	r28, 0x12	; 18
    ae1c:	0f b6       	in	r0, 0x3f	; 63
    ae1e:	f8 94       	cli
    ae20:	de bf       	out	0x3e, r29	; 62
    ae22:	0f be       	out	0x3f, r0	; 63
    ae24:	cd bf       	out	0x3d, r28	; 61
    ae26:	df 91       	pop	r29
    ae28:	cf 91       	pop	r28
    ae2a:	1f 91       	pop	r17
    ae2c:	0f 91       	pop	r16
    ae2e:	ff 90       	pop	r15
    ae30:	ef 90       	pop	r14
    ae32:	df 90       	pop	r13
    ae34:	cf 90       	pop	r12
    ae36:	bf 90       	pop	r11
    ae38:	af 90       	pop	r10
    ae3a:	9f 90       	pop	r9
    ae3c:	8f 90       	pop	r8
    ae3e:	7f 90       	pop	r7
    ae40:	6f 90       	pop	r6
    ae42:	5f 90       	pop	r5
    ae44:	4f 90       	pop	r4
    ae46:	3f 90       	pop	r3
    ae48:	2f 90       	pop	r2
    ae4a:	08 95       	ret

0000ae4c <update_level>:

void update_level()
{
    ae4c:	cf 93       	push	r28
    ae4e:	df 93       	push	r29
	game.frame_counter++;
    ae50:	80 91 a4 0d 	lds	r24, 0x0DA4
    ae54:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    ae56:	8c 33       	cpi	r24, 0x3C	; 60
    ae58:	19 f0       	breq	.+6      	; 0xae60 <update_level+0x14>
	}
}

void update_level()
{
	game.frame_counter++;
    ae5a:	80 93 a4 0d 	sts	0x0DA4, r24
    ae5e:	0f c0       	rjmp	.+30     	; 0xae7e <update_level+0x32>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    ae60:	10 92 a4 0d 	sts	0x0DA4, r1
		if (game.time != 65535) game.time++;
    ae64:	80 91 9b 0d 	lds	r24, 0x0D9B
    ae68:	90 91 9c 0d 	lds	r25, 0x0D9C
    ae6c:	8f 3f       	cpi	r24, 0xFF	; 255
    ae6e:	2f ef       	ldi	r18, 0xFF	; 255
    ae70:	92 07       	cpc	r25, r18
    ae72:	29 f0       	breq	.+10     	; 0xae7e <update_level+0x32>
    ae74:	01 96       	adiw	r24, 0x01	; 1
    ae76:	90 93 9c 0d 	sts	0x0D9C, r25
    ae7a:	80 93 9b 0d 	sts	0x0D9B, r24
	}
	
	if (game.player.shared.vx > 0 &&
    ae7e:	80 91 b7 0d 	lds	r24, 0x0DB7
    ae82:	90 91 b8 0d 	lds	r25, 0x0DB8
    ae86:	18 16       	cp	r1, r24
    ae88:	19 06       	cpc	r1, r25
    ae8a:	44 f5       	brge	.+80     	; 0xaedc <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    ae8c:	c0 91 95 0d 	lds	r28, 0x0D95
    ae90:	d0 91 96 0d 	lds	r29, 0x0D96
    ae94:	be 01       	movw	r22, r28
    ae96:	80 e0       	ldi	r24, 0x00	; 0
    ae98:	90 e0       	ldi	r25, 0x00	; 0
    ae9a:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    ae9e:	9b 01       	movw	r18, r22
    aea0:	ac 01       	movw	r20, r24
    aea2:	60 91 af 0d 	lds	r22, 0x0DAF
    aea6:	70 91 b0 0d 	lds	r23, 0x0DB0
    aeaa:	80 91 b1 0d 	lds	r24, 0x0DB1
    aeae:	90 91 b2 0d 	lds	r25, 0x0DB2
    aeb2:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
	{
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
    aeb6:	20 e0       	ldi	r18, 0x00	; 0
    aeb8:	30 e0       	ldi	r19, 0x00	; 0
    aeba:	40 ee       	ldi	r20, 0xE0	; 224
    aebc:	52 e4       	ldi	r21, 0x42	; 66
    aebe:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    aec2:	87 fd       	sbrc	r24, 7
    aec4:	0b c0       	rjmp	.+22     	; 0xaedc <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    aec6:	93 e0       	ldi	r25, 0x03	; 3
    aec8:	d6 95       	lsr	r29
    aeca:	c7 95       	ror	r28
    aecc:	9a 95       	dec	r25
    aece:	e1 f7       	brne	.-8      	; 0xaec8 <update_level+0x7c>
    aed0:	6c 96       	adiw	r28, 0x1c	; 28
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    aed2:	cf 3f       	cpi	r28, 0xFF	; 255
    aed4:	d1 05       	cpc	r29, r1
    aed6:	10 f4       	brcc	.+4      	; 0xaedc <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    aed8:	0e 94 4c 4b 	call	0x9698	; 0x9698 <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    aedc:	20 e0       	ldi	r18, 0x00	; 0
    aede:	30 e0       	ldi	r19, 0x00	; 0
    aee0:	a9 01       	movw	r20, r18
    aee2:	60 91 ab 0d 	lds	r22, 0x0DAB
    aee6:	70 91 ac 0d 	lds	r23, 0x0DAC
    aeea:	80 91 ad 0d 	lds	r24, 0x0DAD
    aeee:	90 91 ae 0d 	lds	r25, 0x0DAE
    aef2:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    aef6:	18 16       	cp	r1, r24
    aef8:	6c f5       	brge	.+90     	; 0xaf54 <update_level+0x108>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    aefa:	c0 91 97 0d 	lds	r28, 0x0D97
    aefe:	d0 91 98 0d 	lds	r29, 0x0D98
    af02:	be 01       	movw	r22, r28
    af04:	80 e0       	ldi	r24, 0x00	; 0
    af06:	90 e0       	ldi	r25, 0x00	; 0
    af08:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    af0c:	9b 01       	movw	r18, r22
    af0e:	ac 01       	movw	r20, r24
    af10:	60 91 b3 0d 	lds	r22, 0x0DB3
    af14:	70 91 b4 0d 	lds	r23, 0x0DB4
    af18:	80 91 b5 0d 	lds	r24, 0x0DB5
    af1c:	90 91 b6 0d 	lds	r25, 0x0DB6
    af20:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    af24:	20 e0       	ldi	r18, 0x00	; 0
    af26:	30 e0       	ldi	r19, 0x00	; 0
    af28:	40 ec       	ldi	r20, 0xC0	; 192
    af2a:	51 e4       	ldi	r21, 0x41	; 65
    af2c:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    af30:	20 e0       	ldi	r18, 0x00	; 0
    af32:	30 e0       	ldi	r19, 0x00	; 0
    af34:	40 e4       	ldi	r20, 0x40	; 64
    af36:	53 e4       	ldi	r21, 0x43	; 67
    af38:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    af3c:	87 fd       	sbrc	r24, 7
    af3e:	0a c0       	rjmp	.+20     	; 0xaf54 <update_level+0x108>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    af40:	83 e0       	ldi	r24, 0x03	; 3
    af42:	d6 95       	lsr	r29
    af44:	c7 95       	ror	r28
    af46:	8a 95       	dec	r24
    af48:	e1 f7       	brne	.-8      	; 0xaf42 <update_level+0xf6>
    af4a:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    af4c:	e4 97       	sbiw	r28, 0x34	; 52
    af4e:	10 f4       	brcc	.+4      	; 0xaf54 <update_level+0x108>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    af50:	0e 94 65 4b 	call	0x96ca	; 0x96ca <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    af54:	21 e0       	ldi	r18, 0x01	; 1
    af56:	40 91 9f 0d 	lds	r20, 0x0D9F
    af5a:	6f e1       	ldi	r22, 0x1F	; 31
    af5c:	89 e0       	ldi	r24, 0x09	; 9
    af5e:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    af62:	40 91 99 0d 	lds	r20, 0x0D99
    af66:	50 91 9a 0d 	lds	r21, 0x0D9A
    af6a:	21 e0       	ldi	r18, 0x01	; 1
    af6c:	6f e1       	ldi	r22, 0x1F	; 31
    af6e:	8b e1       	ldi	r24, 0x1B	; 27
    af70:	0e 94 15 47 	call	0x8e2a	; 0x8e2a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    af74:	21 e0       	ldi	r18, 0x01	; 1
    af76:	40 91 c0 0d 	lds	r20, 0x0DC0
    af7a:	6e e1       	ldi	r22, 0x1E	; 30
    af7c:	89 e0       	ldi	r24, 0x09	; 9
    af7e:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    af82:	40 91 9b 0d 	lds	r20, 0x0D9B
    af86:	50 91 9c 0d 	lds	r21, 0x0D9C
    af8a:	21 e0       	ldi	r18, 0x01	; 1
    af8c:	6e e1       	ldi	r22, 0x1E	; 30
    af8e:	8b e1       	ldi	r24, 0x1B	; 27
	
}
    af90:	df 91       	pop	r29
    af92:	cf 91       	pop	r28
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    af94:	0c 94 15 47 	jmp	0x8e2a	; 0x8e2a <LBPrintInt>

0000af98 <clear_sprites>:
	
}

void clear_sprites(u8 from, u8 count)
{
    af98:	ef 92       	push	r14
    af9a:	ff 92       	push	r15
    af9c:	0f 93       	push	r16
    af9e:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    afa0:	c8 2f       	mov	r28, r24
    afa2:	e6 2e       	mov	r14, r22
    afa4:	f1 2c       	mov	r15, r1
    afa6:	e8 0e       	add	r14, r24
    afa8:	f1 1c       	adc	r15, r1
    afaa:	8c 2f       	mov	r24, r28
    afac:	90 e0       	ldi	r25, 0x00	; 0
    afae:	8e 15       	cp	r24, r14
    afb0:	9f 05       	cpc	r25, r15
    afb2:	7c f4       	brge	.+30     	; 0xafd2 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    afb4:	40 e0       	ldi	r20, 0x00	; 0
    afb6:	64 e5       	ldi	r22, 0x54	; 84
    afb8:	7c e2       	ldi	r23, 0x2C	; 44
    afba:	8c 2f       	mov	r24, r28
    afbc:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    afc0:	01 e0       	ldi	r16, 0x01	; 1
    afc2:	21 e0       	ldi	r18, 0x01	; 1
    afc4:	40 e0       	ldi	r20, 0x00	; 0
    afc6:	60 ee       	ldi	r22, 0xE0	; 224
    afc8:	8c 2f       	mov	r24, r28
    afca:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    afce:	cf 5f       	subi	r28, 0xFF	; 255
    afd0:	ec cf       	rjmp	.-40     	; 0xafaa <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    afd2:	cf 91       	pop	r28
    afd4:	0f 91       	pop	r16
    afd6:	ff 90       	pop	r15
    afd8:	ef 90       	pop	r14
    afda:	08 95       	ret

0000afdc <level_transition>:
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
}

void level_transition(u8 index)
{
    afdc:	cf 93       	push	r28
    afde:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    afe0:	61 e0       	ldi	r22, 0x01	; 1
    afe2:	83 e0       	ldi	r24, 0x03	; 3
    afe4:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    afe8:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    afec:	64 e1       	ldi	r22, 0x14	; 20
    afee:	80 e0       	ldi	r24, 0x00	; 0
    aff0:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <clear_sprites>
	LBRotateSprites();
    aff4:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	init_player_state();
    aff8:	0e 94 64 48 	call	0x90c8	; 0x90c8 <init_player_state>
	init_enemy_state();
    affc:	0e 94 50 48 	call	0x90a0	; 0x90a0 <init_enemy_state>
	LBPrint(8, 12, (char*) strLevels+index*16);
    b000:	80 e1       	ldi	r24, 0x10	; 16
    b002:	c8 9f       	mul	r28, r24
    b004:	a0 01       	movw	r20, r0
    b006:	11 24       	eor	r1, r1
    b008:	41 51       	subi	r20, 0x11	; 17
    b00a:	55 4f       	sbci	r21, 0xF5	; 245
    b00c:	6c e0       	ldi	r22, 0x0C	; 12
    b00e:	88 e0       	ldi	r24, 0x08	; 8
    b010:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	FadeIn(1, true);
    b014:	61 e0       	ldi	r22, 0x01	; 1
    b016:	81 e0       	ldi	r24, 0x01	; 1
    b018:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	StartSong(planetsong);
    b01c:	8c e0       	ldi	r24, 0x0C	; 12
    b01e:	92 e1       	ldi	r25, 0x12	; 18
    b020:	0e 94 e5 39 	call	0x73ca	; 0x73ca <StartSong>
	LBWaitSeconds(TEXT_LINGER);
    b024:	83 e0       	ldi	r24, 0x03	; 3
    b026:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <LBWaitSeconds>
	FadeOut(1, true);
    b02a:	61 e0       	ldi	r22, 0x01	; 1
    b02c:	81 e0       	ldi	r24, 0x01	; 1
    b02e:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    b032:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b036:	60 e0       	ldi	r22, 0x00	; 0
    b038:	83 e0       	ldi	r24, 0x03	; 3
    b03a:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	load_level(index);
    b03e:	8c 2f       	mov	r24, r28
}
    b040:	cf 91       	pop	r28
	StartSong(planetsong);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b042:	0c 94 80 4b 	jmp	0x9700	; 0x9700 <load_level>

0000b046 <save_score>:
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b046:	81 e7       	ldi	r24, 0x71	; 113
    b048:	9d e0       	ldi	r25, 0x0D	; 13
    b04a:	0c 94 cd 38 	jmp	0x719a	; 0x719a <EepromWriteBlock>

0000b04e <load_splash>:
	load_splash();
}

void load_splash()
{
	Screen.scrollX = 0;
    b04e:	e9 e9       	ldi	r30, 0x99	; 153
    b050:	fc e0       	ldi	r31, 0x0C	; 12
    b052:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    b054:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    b056:	80 e2       	ldi	r24, 0x20	; 32
    b058:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    b05a:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    b05c:	e1 e9       	ldi	r30, 0x91	; 145
    b05e:	fd e0       	ldi	r31, 0x0D	; 13
    b060:	17 86       	std	Z+15, r1	; 0x0f
	game.selection = START_SELECTED;
    b062:	12 8a       	std	Z+18, r1	; 0x12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b064:	64 e1       	ldi	r22, 0x14	; 20
    b066:	80 e0       	ldi	r24, 0x00	; 0
    b068:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <clear_sprites>
	LBRotateSprites();
    b06c:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    b070:	49 e3       	ldi	r20, 0x39	; 57
    b072:	5b e0       	ldi	r21, 0x0B	; 11
    b074:	6f e0       	ldi	r22, 0x0F	; 15
    b076:	88 e0       	ldi	r24, 0x08	; 8
    b078:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(8, 16, (char*) strHighscores);
    b07c:	4d e2       	ldi	r20, 0x2D	; 45
    b07e:	5b e0       	ldi	r21, 0x0B	; 11
    b080:	60 e1       	ldi	r22, 0x10	; 16
    b082:	88 e0       	ldi	r24, 0x08	; 8
    b084:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    b088:	47 e5       	ldi	r20, 0x57	; 87
    b08a:	5b e0       	ldi	r21, 0x0B	; 11
    b08c:	65 e1       	ldi	r22, 0x15	; 21
    b08e:	84 e0       	ldi	r24, 0x04	; 4
    b090:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    b094:	4f e3       	ldi	r20, 0x3F	; 63
    b096:	5b e0       	ldi	r21, 0x0B	; 11
    b098:	6a e1       	ldi	r22, 0x1A	; 26
    b09a:	83 e0       	ldi	r24, 0x03	; 3
    b09c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <LBPrint>
	DrawMap2(6, 5, (const char*) map_splash);
    b0a0:	46 e9       	ldi	r20, 0x96	; 150
    b0a2:	53 e6       	ldi	r21, 0x63	; 99
    b0a4:	65 e0       	ldi	r22, 0x05	; 5
    b0a6:	86 e0       	ldi	r24, 0x06	; 6
    b0a8:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    b0ac:	40 e0       	ldi	r20, 0x00	; 0
    b0ae:	61 e5       	ldi	r22, 0x51	; 81
    b0b0:	7c e2       	ldi	r23, 0x2C	; 44
    b0b2:	80 e0       	ldi	r24, 0x00	; 0
    b0b4:	0c 94 78 47 	jmp	0x8ef0	; 0x8ef0 <LBMapSprite>

0000b0b8 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b0b8:	0e 94 23 58 	call	0xb046	; 0xb046 <save_score>
	fade_through();
    b0bc:	0e 94 ae 49 	call	0x935c	; 0x935c <fade_through>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b0c0:	64 e1       	ldi	r22, 0x14	; 20
    b0c2:	80 e0       	ldi	r24, 0x00	; 0
    b0c4:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <clear_sprites>
	LBRotateSprites();
    b0c8:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	init_game_state();
    b0cc:	0e 94 47 48 	call	0x908e	; 0x908e <init_game_state>
	init_player_state();
    b0d0:	0e 94 64 48 	call	0x90c8	; 0x90c8 <init_player_state>
	init_enemy_state();
    b0d4:	0e 94 50 48 	call	0x90a0	; 0x90a0 <init_enemy_state>
	StopSong();
    b0d8:	0e 94 0e 3a 	call	0x741c	; 0x741c <StopSong>
	load_splash();
    b0dc:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <load_splash>

0000b0e0 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    b0e0:	80 91 9f 0d 	lds	r24, 0x0D9F
    b0e4:	81 50       	subi	r24, 0x01	; 1
    b0e6:	80 93 9f 0d 	sts	0x0D9F, r24
	clear_sprites(0, 6);
    b0ea:	66 e0       	ldi	r22, 0x06	; 6
    b0ec:	80 e0       	ldi	r24, 0x00	; 0
    b0ee:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <clear_sprites>
	LBRotateSprites();
    b0f2:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	if (game.lives == 0)
    b0f6:	80 91 9f 0d 	lds	r24, 0x0D9F
    b0fa:	81 11       	cpse	r24, r1
    b0fc:	02 c0       	rjmp	.+4      	; 0xb102 <handle_player_death+0x22>
	{
		exit_game();
    b0fe:	0c 94 5c 58 	jmp	0xb0b8	; 0xb0b8 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    b102:	61 e0       	ldi	r22, 0x01	; 1
    b104:	83 e0       	ldi	r24, 0x03	; 3
    b106:	0e 94 11 46 	call	0x8c22	; 0x8c22 <FadeOut>
	ClearVram();
    b10a:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b10e:	64 e1       	ldi	r22, 0x14	; 20
    b110:	80 e0       	ldi	r24, 0x00	; 0
    b112:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <clear_sprites>
	LBRotateSprites();
    b116:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
	init_player_state();
    b11a:	0e 94 64 48 	call	0x90c8	; 0x90c8 <init_player_state>
	init_enemy_state();
    b11e:	0e 94 50 48 	call	0x90a0	; 0x90a0 <init_enemy_state>
	FadeIn(FRAMES_PER_FADE, false);
    b122:	60 e0       	ldi	r22, 0x00	; 0
    b124:	83 e0       	ldi	r24, 0x03	; 3
    b126:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	load_level(game.current_level_index);
    b12a:	80 91 a1 0d 	lds	r24, 0x0DA1
    b12e:	0c 94 80 4b 	jmp	0x9700	; 0x9700 <load_level>

0000b132 <update_player>:
}

void update_player()
{
    b132:	0f 93       	push	r16
    b134:	1f 93       	push	r17
    b136:	cf 93       	push	r28
    b138:	df 93       	push	r29
    b13a:	1f 92       	push	r1
    b13c:	cd b7       	in	r28, 0x3d	; 61
    b13e:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    b140:	80 91 bb 0d 	lds	r24, 0x0DBB
    b144:	84 ff       	sbrs	r24, 4
    b146:	15 c0       	rjmp	.+42     	; 0xb172 <update_player+0x40>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    b148:	00 91 bf 0d 	lds	r16, 0x0DBF
    b14c:	20 91 be 0d 	lds	r18, 0x0DBE
    b150:	40 e0       	ldi	r20, 0x00	; 0
    b152:	6f e2       	ldi	r22, 0x2F	; 47
    b154:	7e e0       	ldi	r23, 0x0E	; 14
    b156:	8b eb       	ldi	r24, 0xBB	; 187
    b158:	9d e0       	ldi	r25, 0x0D	; 13
    b15a:	0e 94 45 52 	call	0xa48a	; 0xa48a <map_explosion>
    b15e:	88 23       	and	r24, r24
    b160:	09 f4       	brne	.+2      	; 0xb164 <update_player+0x32>
    b162:	0c c2       	rjmp	.+1048   	; 0xb57c <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    b164:	0f 90       	pop	r0
    b166:	df 91       	pop	r29
    b168:	cf 91       	pop	r28
    b16a:	1f 91       	pop	r17
    b16c:	0f 91       	pop	r16
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    b16e:	0c 94 70 58 	jmp	0xb0e0	; 0xb0e0 <handle_player_death>
		}
	}
	else if (game.player.flags & (IDLE|RUNNING))
    b172:	98 2f       	mov	r25, r24
    b174:	9a 70       	andi	r25, 0x0A	; 10
    b176:	09 f4       	brne	.+2      	; 0xb17a <update_player+0x48>
    b178:	f0 c0       	rjmp	.+480    	; 0xb35a <update_player+0x228>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    b17a:	40 91 bf 0d 	lds	r20, 0x0DBF
    b17e:	60 91 be 0d 	lds	r22, 0x0DBE
    b182:	8b ea       	ldi	r24, 0xAB	; 171
    b184:	9d e0       	ldi	r25, 0x0D	; 13
    b186:	0e 94 d8 4b 	call	0x97b0	; 0x97b0 <on_solid_ground>
    b18a:	81 11       	cpse	r24, r1
    b18c:	07 c0       	rjmp	.+14     	; 0xb19c <update_player+0x6a>
		{
			game.player.shared.gravity = GRAVITY;
    b18e:	8f ef       	ldi	r24, 0xFF	; 255
    b190:	80 93 b9 0d 	sts	0x0DB9, r24
			game.player.flags = JUMPING;
    b194:	81 e0       	ldi	r24, 0x01	; 1
    b196:	80 93 bb 0d 	sts	0x0DBB, r24
    b19a:	d6 c0       	rjmp	.+428    	; 0xb348 <update_player+0x216>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    b19c:	10 91 85 0f 	lds	r17, 0x0F85
    b1a0:	15 ff       	sbrs	r17, 5
    b1a2:	46 c0       	rjmp	.+140    	; 0xb230 <update_player+0xfe>
			{
				game.player.shared.y += 16;
    b1a4:	20 e0       	ldi	r18, 0x00	; 0
    b1a6:	30 e0       	ldi	r19, 0x00	; 0
    b1a8:	40 e8       	ldi	r20, 0x80	; 128
    b1aa:	51 e4       	ldi	r21, 0x41	; 65
    b1ac:	60 91 b3 0d 	lds	r22, 0x0DB3
    b1b0:	70 91 b4 0d 	lds	r23, 0x0DB4
    b1b4:	80 91 b5 0d 	lds	r24, 0x0DB5
    b1b8:	90 91 b6 0d 	lds	r25, 0x0DB6
    b1bc:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    b1c0:	60 93 b3 0d 	sts	0x0DB3, r22
    b1c4:	70 93 b4 0d 	sts	0x0DB4, r23
    b1c8:	80 93 b5 0d 	sts	0x0DB5, r24
    b1cc:	90 93 b6 0d 	sts	0x0DB6, r25
				if(game.player.direction == D_RIGHT)
    b1d0:	80 91 bd 0d 	lds	r24, 0x0DBD
    b1d4:	81 30       	cpi	r24, 0x01	; 1
    b1d6:	b1 f4       	brne	.+44     	; 0xb204 <update_player+0xd2>
				{
					game.player.shared.x -= 8;
    b1d8:	20 e0       	ldi	r18, 0x00	; 0
    b1da:	30 e0       	ldi	r19, 0x00	; 0
    b1dc:	40 e0       	ldi	r20, 0x00	; 0
    b1de:	51 e4       	ldi	r21, 0x41	; 65
    b1e0:	60 91 af 0d 	lds	r22, 0x0DAF
    b1e4:	70 91 b0 0d 	lds	r23, 0x0DB0
    b1e8:	80 91 b1 0d 	lds	r24, 0x0DB1
    b1ec:	90 91 b2 0d 	lds	r25, 0x0DB2
    b1f0:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    b1f4:	60 93 af 0d 	sts	0x0DAF, r22
    b1f8:	70 93 b0 0d 	sts	0x0DB0, r23
    b1fc:	80 93 b1 0d 	sts	0x0DB1, r24
    b200:	90 93 b2 0d 	sts	0x0DB2, r25
				}
				game.player.shared.vx = 0;
    b204:	10 92 b8 0d 	sts	0x0DB8, r1
    b208:	10 92 b7 0d 	sts	0x0DB7, r1
				game.player.flags = PRONE;
    b20c:	84 e0       	ldi	r24, 0x04	; 4
    b20e:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.width = 3;
    b212:	83 e0       	ldi	r24, 0x03	; 3
    b214:	80 93 be 0d 	sts	0x0DBE, r24
				game.player.height = 1;
    b218:	81 e0       	ldi	r24, 0x01	; 1
    b21a:	80 93 bf 0d 	sts	0x0DBF, r24
				clear_sprites(3, 3);
    b21e:	63 e0       	ldi	r22, 0x03	; 3
    b220:	83 e0       	ldi	r24, 0x03	; 3
    b222:	0e 94 cc 57 	call	0xaf98	; 0xaf98 <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    b226:	40 91 93 0f 	lds	r20, 0x0F93
    b22a:	87 e2       	ldi	r24, 0x27	; 39
    b22c:	9e e0       	ldi	r25, 0x0E	; 14
    b22e:	64 c0       	rjmp	.+200    	; 0xb2f8 <update_player+0x1c6>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    b230:	17 ff       	sbrs	r17, 7
    b232:	2e c0       	rjmp	.+92     	; 0xb290 <update_player+0x15e>
    b234:	20 e0       	ldi	r18, 0x00	; 0
    b236:	30 e0       	ldi	r19, 0x00	; 0
    b238:	40 e0       	ldi	r20, 0x00	; 0
    b23a:	5e e3       	ldi	r21, 0x3E	; 62
    b23c:	60 91 af 0d 	lds	r22, 0x0DAF
    b240:	70 91 b0 0d 	lds	r23, 0x0DB0
    b244:	80 91 b1 0d 	lds	r24, 0x0DB1
    b248:	90 91 b2 0d 	lds	r25, 0x0DB2
    b24c:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    b250:	20 e0       	ldi	r18, 0x00	; 0
    b252:	30 e0       	ldi	r19, 0x00	; 0
    b254:	40 e0       	ldi	r20, 0x00	; 0
    b256:	50 e4       	ldi	r21, 0x40	; 64
    b258:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    b25c:	20 e0       	ldi	r18, 0x00	; 0
    b25e:	30 e0       	ldi	r19, 0x00	; 0
    b260:	4f e7       	ldi	r20, 0x7F	; 127
    b262:	53 e4       	ldi	r21, 0x43	; 67
    b264:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    b268:	87 ff       	sbrs	r24, 7
    b26a:	12 c0       	rjmp	.+36     	; 0xb290 <update_player+0x15e>
			{
				game.player.shared.vx = RUN_SPEED;
    b26c:	8c e3       	ldi	r24, 0x3C	; 60
    b26e:	90 e0       	ldi	r25, 0x00	; 0
    b270:	90 93 b8 0d 	sts	0x0DB8, r25
    b274:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = RUNNING;
    b278:	82 e0       	ldi	r24, 0x02	; 2
    b27a:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.direction = D_RIGHT;
    b27e:	81 e0       	ldi	r24, 0x01	; 1
    b280:	80 93 bd 0d 	sts	0x0DBD, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    b284:	87 e1       	ldi	r24, 0x17	; 23
    b286:	9e e0       	ldi	r25, 0x0E	; 14
    b288:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b28c:	40 e0       	ldi	r20, 0x00	; 0
    b28e:	38 c0       	rjmp	.+112    	; 0xb300 <update_player+0x1ce>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b290:	16 ff       	sbrs	r17, 6
    b292:	27 c0       	rjmp	.+78     	; 0xb2e2 <update_player+0x1b0>
    b294:	60 91 95 0d 	lds	r22, 0x0D95
    b298:	70 91 96 0d 	lds	r23, 0x0D96
    b29c:	80 e0       	ldi	r24, 0x00	; 0
    b29e:	90 e0       	ldi	r25, 0x00	; 0
    b2a0:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    b2a4:	9b 01       	movw	r18, r22
    b2a6:	ac 01       	movw	r20, r24
    b2a8:	60 91 af 0d 	lds	r22, 0x0DAF
    b2ac:	70 91 b0 0d 	lds	r23, 0x0DB0
    b2b0:	80 91 b1 0d 	lds	r24, 0x0DB1
    b2b4:	90 91 b2 0d 	lds	r25, 0x0DB2
    b2b8:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    b2bc:	18 16       	cp	r1, r24
    b2be:	8c f4       	brge	.+34     	; 0xb2e2 <update_player+0x1b0>
			{
				game.player.shared.vx = -RUN_SPEED;
    b2c0:	84 ec       	ldi	r24, 0xC4	; 196
    b2c2:	9f ef       	ldi	r25, 0xFF	; 255
    b2c4:	90 93 b8 0d 	sts	0x0DB8, r25
    b2c8:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = RUNNING;
    b2cc:	82 e0       	ldi	r24, 0x02	; 2
    b2ce:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.direction = D_LEFT;
    b2d2:	10 92 bd 0d 	sts	0x0DBD, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    b2d6:	87 e1       	ldi	r24, 0x17	; 23
    b2d8:	9e e0       	ldi	r25, 0x0E	; 14
    b2da:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b2de:	41 e0       	ldi	r20, 0x01	; 1
    b2e0:	0f c0       	rjmp	.+30     	; 0xb300 <update_player+0x1ce>
			}
			else
			{
				game.player.flags = IDLE;
    b2e2:	88 e0       	ldi	r24, 0x08	; 8
    b2e4:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.shared.vx = 0;
    b2e8:	10 92 b8 0d 	sts	0x0DB8, r1
    b2ec:	10 92 b7 0d 	sts	0x0DB7, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    b2f0:	40 91 93 0f 	lds	r20, 0x0F93
    b2f4:	8f e0       	ldi	r24, 0x0F	; 15
    b2f6:	9e e0       	ldi	r25, 0x0E	; 14
    b2f8:	49 83       	std	Y+1, r20	; 0x01
    b2fa:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b2fe:	49 81       	ldd	r20, Y+1	; 0x01
    b300:	bc 01       	movw	r22, r24
    b302:	80 e0       	ldi	r24, 0x00	; 0
    b304:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    b308:	80 91 81 0f 	lds	r24, 0x0F81
    b30c:	80 ff       	sbrs	r24, 0
    b30e:	36 c1       	rjmp	.+620    	; 0xb57c <update_player+0x44a>
    b310:	80 91 bb 0d 	lds	r24, 0x0DBB
    b314:	82 fd       	sbrc	r24, 2
    b316:	32 c1       	rjmp	.+612    	; 0xb57c <update_player+0x44a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    b318:	80 e0       	ldi	r24, 0x00	; 0
    b31a:	90 e0       	ldi	r25, 0x00	; 0
    b31c:	a6 e1       	ldi	r26, 0x16	; 22
    b31e:	b3 ec       	ldi	r27, 0xC3	; 195
    b320:	80 93 ab 0d 	sts	0x0DAB, r24
    b324:	90 93 ac 0d 	sts	0x0DAC, r25
    b328:	a0 93 ad 0d 	sts	0x0DAD, r26
    b32c:	b0 93 ae 0d 	sts	0x0DAE, r27
				game.player.shared.gravity = GRAVITY;
    b330:	8f ef       	ldi	r24, 0xFF	; 255
    b332:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.flags = JUMPING;
    b336:	81 e0       	ldi	r24, 0x01	; 1
    b338:	80 93 bb 0d 	sts	0x0DBB, r24
				game.player.width = 2;
    b33c:	82 e0       	ldi	r24, 0x02	; 2
    b33e:	80 93 be 0d 	sts	0x0DBE, r24
				game.player.height = 3;
    b342:	83 e0       	ldi	r24, 0x03	; 3
    b344:	80 93 bf 0d 	sts	0x0DBF, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    b348:	40 91 93 0f 	lds	r20, 0x0F93
    b34c:	8f e1       	ldi	r24, 0x1F	; 31
    b34e:	9e e0       	ldi	r25, 0x0E	; 14
    b350:	49 83       	std	Y+1, r20	; 0x01
    b352:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b356:	49 81       	ldd	r20, Y+1	; 0x01
    b358:	08 c1       	rjmp	.+528    	; 0xb56a <update_player+0x438>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    b35a:	80 ff       	sbrs	r24, 0
    b35c:	6d c0       	rjmp	.+218    	; 0xb438 <update_player+0x306>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    b35e:	10 91 85 0f 	lds	r17, 0x0F85
    b362:	17 ff       	sbrs	r17, 7
    b364:	2b c0       	rjmp	.+86     	; 0xb3bc <update_player+0x28a>
    b366:	20 e0       	ldi	r18, 0x00	; 0
    b368:	30 e0       	ldi	r19, 0x00	; 0
    b36a:	40 e0       	ldi	r20, 0x00	; 0
    b36c:	5e e3       	ldi	r21, 0x3E	; 62
    b36e:	60 91 af 0d 	lds	r22, 0x0DAF
    b372:	70 91 b0 0d 	lds	r23, 0x0DB0
    b376:	80 91 b1 0d 	lds	r24, 0x0DB1
    b37a:	90 91 b2 0d 	lds	r25, 0x0DB2
    b37e:	0e 94 d2 5c 	call	0xb9a4	; 0xb9a4 <__mulsf3>
    b382:	20 e0       	ldi	r18, 0x00	; 0
    b384:	30 e0       	ldi	r19, 0x00	; 0
    b386:	40 e0       	ldi	r20, 0x00	; 0
    b388:	50 e4       	ldi	r21, 0x40	; 64
    b38a:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    b38e:	20 e0       	ldi	r18, 0x00	; 0
    b390:	30 e0       	ldi	r19, 0x00	; 0
    b392:	4f e7       	ldi	r20, 0x7F	; 127
    b394:	53 e4       	ldi	r21, 0x43	; 67
    b396:	0e 94 ec 5b 	call	0xb7d8	; 0xb7d8 <__cmpsf2>
    b39a:	87 ff       	sbrs	r24, 7
    b39c:	0f c0       	rjmp	.+30     	; 0xb3bc <update_player+0x28a>
		{
			game.player.shared.vx = RUN_SPEED;
    b39e:	8c e3       	ldi	r24, 0x3C	; 60
    b3a0:	90 e0       	ldi	r25, 0x00	; 0
    b3a2:	90 93 b8 0d 	sts	0x0DB8, r25
    b3a6:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.direction = D_RIGHT;
    b3aa:	81 e0       	ldi	r24, 0x01	; 1
    b3ac:	80 93 bd 0d 	sts	0x0DBD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    b3b0:	8f e1       	ldi	r24, 0x1F	; 31
    b3b2:	9e e0       	ldi	r25, 0x0E	; 14
    b3b4:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b3b8:	40 e0       	ldi	r20, 0x00	; 0
    b3ba:	32 c0       	rjmp	.+100    	; 0xb420 <update_player+0x2ee>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b3bc:	16 ff       	sbrs	r17, 6
    b3be:	24 c0       	rjmp	.+72     	; 0xb408 <update_player+0x2d6>
    b3c0:	60 91 95 0d 	lds	r22, 0x0D95
    b3c4:	70 91 96 0d 	lds	r23, 0x0D96
    b3c8:	80 e0       	ldi	r24, 0x00	; 0
    b3ca:	90 e0       	ldi	r25, 0x00	; 0
    b3cc:	0e 94 1c 5c 	call	0xb838	; 0xb838 <__floatunsisf>
    b3d0:	9b 01       	movw	r18, r22
    b3d2:	ac 01       	movw	r20, r24
    b3d4:	60 91 af 0d 	lds	r22, 0x0DAF
    b3d8:	70 91 b0 0d 	lds	r23, 0x0DB0
    b3dc:	80 91 b1 0d 	lds	r24, 0x0DB1
    b3e0:	90 91 b2 0d 	lds	r25, 0x0DB2
    b3e4:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <__gesf2>
    b3e8:	18 16       	cp	r1, r24
    b3ea:	74 f4       	brge	.+28     	; 0xb408 <update_player+0x2d6>
		{
			game.player.shared.vx = -RUN_SPEED;
    b3ec:	84 ec       	ldi	r24, 0xC4	; 196
    b3ee:	9f ef       	ldi	r25, 0xFF	; 255
    b3f0:	90 93 b8 0d 	sts	0x0DB8, r25
    b3f4:	80 93 b7 0d 	sts	0x0DB7, r24
			game.player.direction = D_LEFT;
    b3f8:	10 92 bd 0d 	sts	0x0DBD, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    b3fc:	8f e1       	ldi	r24, 0x1F	; 31
    b3fe:	9e e0       	ldi	r25, 0x0E	; 14
    b400:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b404:	41 e0       	ldi	r20, 0x01	; 1
    b406:	0c c0       	rjmp	.+24     	; 0xb420 <update_player+0x2ee>
		}
		else
		{
			game.player.shared.vx = 0;
    b408:	10 92 b8 0d 	sts	0x0DB8, r1
    b40c:	10 92 b7 0d 	sts	0x0DB7, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    b410:	40 91 93 0f 	lds	r20, 0x0F93
    b414:	8f e1       	ldi	r24, 0x1F	; 31
    b416:	9e e0       	ldi	r25, 0x0E	; 14
    b418:	49 83       	std	Y+1, r20	; 0x01
    b41a:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b41e:	49 81       	ldd	r20, Y+1	; 0x01
    b420:	bc 01       	movw	r22, r24
    b422:	80 e0       	ldi	r24, 0x00	; 0
    b424:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    b428:	80 91 b9 0d 	lds	r24, 0x0DB9
    b42c:	81 11       	cpse	r24, r1
    b42e:	a6 c0       	rjmp	.+332    	; 0xb57c <update_player+0x44a>
		{
			game.player.flags = IDLE;
    b430:	88 e0       	ldi	r24, 0x08	; 8
    b432:	80 93 bb 0d 	sts	0x0DBB, r24
    b436:	a2 c0       	rjmp	.+324    	; 0xb57c <update_player+0x44a>
		}
	}
	else if (game.player.flags & PRONE)
    b438:	82 ff       	sbrs	r24, 2
    b43a:	a0 c0       	rjmp	.+320    	; 0xb57c <update_player+0x44a>
	{
		if (game.joypadState.pressed & BTN_UP)
    b43c:	80 91 81 0f 	lds	r24, 0x0F81
    b440:	84 ff       	sbrs	r24, 4
    b442:	3a c0       	rjmp	.+116    	; 0xb4b8 <update_player+0x386>
		{
			game.player.flags = IDLE;	
    b444:	88 e0       	ldi	r24, 0x08	; 8
    b446:	80 93 bb 0d 	sts	0x0DBB, r24
			game.player.shared.y -= 16;
    b44a:	20 e0       	ldi	r18, 0x00	; 0
    b44c:	30 e0       	ldi	r19, 0x00	; 0
    b44e:	40 e8       	ldi	r20, 0x80	; 128
    b450:	51 e4       	ldi	r21, 0x41	; 65
    b452:	60 91 b3 0d 	lds	r22, 0x0DB3
    b456:	70 91 b4 0d 	lds	r23, 0x0DB4
    b45a:	80 91 b5 0d 	lds	r24, 0x0DB5
    b45e:	90 91 b6 0d 	lds	r25, 0x0DB6
    b462:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    b466:	60 93 b3 0d 	sts	0x0DB3, r22
    b46a:	70 93 b4 0d 	sts	0x0DB4, r23
    b46e:	80 93 b5 0d 	sts	0x0DB5, r24
    b472:	90 93 b6 0d 	sts	0x0DB6, r25
			if(game.player.direction == D_RIGHT)
    b476:	80 91 bd 0d 	lds	r24, 0x0DBD
    b47a:	81 30       	cpi	r24, 0x01	; 1
    b47c:	b1 f4       	brne	.+44     	; 0xb4aa <update_player+0x378>
			{
				game.player.shared.x += 8;
    b47e:	20 e0       	ldi	r18, 0x00	; 0
    b480:	30 e0       	ldi	r19, 0x00	; 0
    b482:	40 e0       	ldi	r20, 0x00	; 0
    b484:	51 e4       	ldi	r21, 0x41	; 65
    b486:	60 91 af 0d 	lds	r22, 0x0DAF
    b48a:	70 91 b0 0d 	lds	r23, 0x0DB0
    b48e:	80 91 b1 0d 	lds	r24, 0x0DB1
    b492:	90 91 b2 0d 	lds	r25, 0x0DB2
    b496:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    b49a:	60 93 af 0d 	sts	0x0DAF, r22
    b49e:	70 93 b0 0d 	sts	0x0DB0, r23
    b4a2:	80 93 b1 0d 	sts	0x0DB1, r24
    b4a6:	90 93 b2 0d 	sts	0x0DB2, r25
			}
			game.player.width = 2;
    b4aa:	82 e0       	ldi	r24, 0x02	; 2
    b4ac:	80 93 be 0d 	sts	0x0DBE, r24
			game.player.height = 3;
    b4b0:	83 e0       	ldi	r24, 0x03	; 3
    b4b2:	80 93 bf 0d 	sts	0x0DBF, r24
    b4b6:	62 c0       	rjmp	.+196    	; 0xb57c <update_player+0x44a>
		}
		else if (game.joypadState.pressed & BTN_B)
    b4b8:	80 ff       	sbrs	r24, 0
    b4ba:	43 c0       	rjmp	.+134    	; 0xb542 <update_player+0x410>
		{
			game.player.flags = JUMPING;
    b4bc:	81 e0       	ldi	r24, 0x01	; 1
    b4be:	80 93 bb 0d 	sts	0x0DBB, r24
			game.player.shared.y -= 16;
    b4c2:	20 e0       	ldi	r18, 0x00	; 0
    b4c4:	30 e0       	ldi	r19, 0x00	; 0
    b4c6:	40 e8       	ldi	r20, 0x80	; 128
    b4c8:	51 e4       	ldi	r21, 0x41	; 65
    b4ca:	60 91 b3 0d 	lds	r22, 0x0DB3
    b4ce:	70 91 b4 0d 	lds	r23, 0x0DB4
    b4d2:	80 91 b5 0d 	lds	r24, 0x0DB5
    b4d6:	90 91 b6 0d 	lds	r25, 0x0DB6
    b4da:	0e 94 87 5b 	call	0xb70e	; 0xb70e <__subsf3>
    b4de:	60 93 b3 0d 	sts	0x0DB3, r22
    b4e2:	70 93 b4 0d 	sts	0x0DB4, r23
    b4e6:	80 93 b5 0d 	sts	0x0DB5, r24
    b4ea:	90 93 b6 0d 	sts	0x0DB6, r25
			if(game.player.direction == D_RIGHT)
    b4ee:	80 91 bd 0d 	lds	r24, 0x0DBD
    b4f2:	81 30       	cpi	r24, 0x01	; 1
    b4f4:	b1 f4       	brne	.+44     	; 0xb522 <update_player+0x3f0>
			{
				game.player.shared.x += 8;
    b4f6:	20 e0       	ldi	r18, 0x00	; 0
    b4f8:	30 e0       	ldi	r19, 0x00	; 0
    b4fa:	40 e0       	ldi	r20, 0x00	; 0
    b4fc:	51 e4       	ldi	r21, 0x41	; 65
    b4fe:	60 91 af 0d 	lds	r22, 0x0DAF
    b502:	70 91 b0 0d 	lds	r23, 0x0DB0
    b506:	80 91 b1 0d 	lds	r24, 0x0DB1
    b50a:	90 91 b2 0d 	lds	r25, 0x0DB2
    b50e:	0e 94 88 5b 	call	0xb710	; 0xb710 <__addsf3>
    b512:	60 93 af 0d 	sts	0x0DAF, r22
    b516:	70 93 b0 0d 	sts	0x0DB0, r23
    b51a:	80 93 b1 0d 	sts	0x0DB1, r24
    b51e:	90 93 b2 0d 	sts	0x0DB2, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    b522:	80 e0       	ldi	r24, 0x00	; 0
    b524:	90 e0       	ldi	r25, 0x00	; 0
    b526:	a6 e1       	ldi	r26, 0x16	; 22
    b528:	b3 ec       	ldi	r27, 0xC3	; 195
    b52a:	80 93 ab 0d 	sts	0x0DAB, r24
    b52e:	90 93 ac 0d 	sts	0x0DAC, r25
    b532:	a0 93 ad 0d 	sts	0x0DAD, r26
    b536:	b0 93 ae 0d 	sts	0x0DAE, r27
			game.player.shared.gravity = GRAVITY;
    b53a:	8f ef       	ldi	r24, 0xFF	; 255
    b53c:	80 93 b9 0d 	sts	0x0DB9, r24
    b540:	fd ce       	rjmp	.-518    	; 0xb33c <update_player+0x20a>
			game.player.width = 2;
			game.player.height = 3;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    b542:	86 ff       	sbrs	r24, 6
    b544:	08 c0       	rjmp	.+16     	; 0xb556 <update_player+0x424>
		{
			game.player.direction = D_LEFT;
    b546:	10 92 bd 0d 	sts	0x0DBD, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    b54a:	87 e2       	ldi	r24, 0x27	; 39
    b54c:	9e e0       	ldi	r25, 0x0E	; 14
    b54e:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b552:	41 e0       	ldi	r20, 0x01	; 1
    b554:	0a c0       	rjmp	.+20     	; 0xb56a <update_player+0x438>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    b556:	87 ff       	sbrs	r24, 7
    b558:	11 c0       	rjmp	.+34     	; 0xb57c <update_player+0x44a>
		{
			game.player.direction = D_RIGHT;
    b55a:	81 e0       	ldi	r24, 0x01	; 1
    b55c:	80 93 bd 0d 	sts	0x0DBD, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    b560:	87 e2       	ldi	r24, 0x27	; 39
    b562:	9e e0       	ldi	r25, 0x0E	; 14
    b564:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <LBGetNextFrame>
    b568:	40 e0       	ldi	r20, 0x00	; 0
    b56a:	bc 01       	movw	r22, r24
    b56c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    b56e:	0f 90       	pop	r0
    b570:	df 91       	pop	r29
    b572:	cf 91       	pop	r28
    b574:	1f 91       	pop	r17
    b576:	0f 91       	pop	r16
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    b578:	0c 94 78 47 	jmp	0x8ef0	; 0x8ef0 <LBMapSprite>
		}
	}
}
    b57c:	0f 90       	pop	r0
    b57e:	df 91       	pop	r29
    b580:	cf 91       	pop	r28
    b582:	1f 91       	pop	r17
    b584:	0f 91       	pop	r16
    b586:	08 95       	ret

0000b588 <select_pressed>:
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

char select_pressed(JoyPadState* p)
{
    b588:	fc 01       	movw	r30, r24
    b58a:	20 81       	ld	r18, Z
    b58c:	31 81       	ldd	r19, Z+1	; 0x01
    b58e:	28 70       	andi	r18, 0x08	; 8
    b590:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b592:	81 e0       	ldi	r24, 0x01	; 1
    b594:	23 2b       	or	r18, r19
    b596:	09 f4       	brne	.+2      	; 0xb59a <select_pressed+0x12>
    b598:	80 e0       	ldi	r24, 0x00	; 0
}
    b59a:	08 95       	ret

0000b59c <update_splash>:

void update_splash()
{
    b59c:	0f 93       	push	r16
    b59e:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    b5a0:	80 91 81 0f 	lds	r24, 0x0F81
    b5a4:	c0 91 a3 0d 	lds	r28, 0x0DA3
    b5a8:	85 ff       	sbrs	r24, 5
    b5aa:	06 c0       	rjmp	.+12     	; 0xb5b8 <update_splash+0x1c>
    b5ac:	c1 11       	cpse	r28, r1
    b5ae:	04 c0       	rjmp	.+8      	; 0xb5b8 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    b5b0:	81 e0       	ldi	r24, 0x01	; 1
    b5b2:	80 93 a3 0d 	sts	0x0DA3, r24
    b5b6:	06 c0       	rjmp	.+12     	; 0xb5c4 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    b5b8:	84 ff       	sbrs	r24, 4
    b5ba:	0a c0       	rjmp	.+20     	; 0xb5d0 <update_splash+0x34>
    b5bc:	c1 30       	cpi	r28, 0x01	; 1
    b5be:	41 f4       	brne	.+16     	; 0xb5d0 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    b5c0:	10 92 a3 0d 	sts	0x0DA3, r1
		SFX_NAVIGATE;
    b5c4:	41 e0       	ldi	r20, 0x01	; 1
    b5c6:	6f ef       	ldi	r22, 0xFF	; 255
    b5c8:	82 e0       	ldi	r24, 0x02	; 2
    b5ca:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
    b5ce:	14 c0       	rjmp	.+40     	; 0xb5f8 <update_splash+0x5c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    b5d0:	81 e8       	ldi	r24, 0x81	; 129
    b5d2:	9f e0       	ldi	r25, 0x0F	; 15
    b5d4:	0e 94 c4 5a 	call	0xb588	; 0xb588 <select_pressed>
    b5d8:	88 23       	and	r24, r24
    b5da:	71 f0       	breq	.+28     	; 0xb5f8 <update_splash+0x5c>
    b5dc:	c1 11       	cpse	r28, r1
    b5de:	0c c0       	rjmp	.+24     	; 0xb5f8 <update_splash+0x5c>
	{
		game.current_screen = LEVEL;
    b5e0:	82 e0       	ldi	r24, 0x02	; 2
    b5e2:	80 93 a0 0d 	sts	0x0DA0, r24
		SFX_NAVIGATE;
    b5e6:	41 e0       	ldi	r20, 0x01	; 1
    b5e8:	6f ef       	ldi	r22, 0xFF	; 255
    b5ea:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <TriggerFx>
		level_transition(0);
    b5ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    b5f0:	cf 91       	pop	r28
    b5f2:	0f 91       	pop	r16
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		SFX_NAVIGATE;
		level_transition(0);
    b5f4:	0c 94 ee 57 	jmp	0xafdc	; 0xafdc <level_transition>
		return;
	}
	
	if (game.selection == START_SELECTED)
    b5f8:	80 91 a3 0d 	lds	r24, 0x0DA3
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    b5fc:	01 e0       	ldi	r16, 0x01	; 1
    b5fe:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		level_transition(0);
		return;
	}
	
	if (game.selection == START_SELECTED)
    b600:	81 11       	cpse	r24, r1
    b602:	03 c0       	rjmp	.+6      	; 0xb60a <update_splash+0x6e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    b604:	48 e7       	ldi	r20, 0x78	; 120
    b606:	68 e3       	ldi	r22, 0x38	; 56
    b608:	03 c0       	rjmp	.+6      	; 0xb610 <update_splash+0x74>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    b60a:	40 e8       	ldi	r20, 0x80	; 128
    b60c:	68 e3       	ldi	r22, 0x38	; 56
    b60e:	80 e0       	ldi	r24, 0x00	; 0
    b610:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <LBMoveSprite>
	}
}
    b614:	cf 91       	pop	r28
    b616:	0f 91       	pop	r16
    b618:	08 95       	ret

0000b61a <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    b61a:	8e ed       	ldi	r24, 0xDE	; 222
    b61c:	9c e1       	ldi	r25, 0x1C	; 28
    b61e:	0e 94 c3 39 	call	0x7386	; 0x7386 <InitMusicPlayer>
	ClearVram();
    b622:	0e 94 57 37 	call	0x6eae	; 0x6eae <ClearVram>
	SetMasterVolume(0x05);
    b626:	85 e0       	ldi	r24, 0x05	; 5
    b628:	0e 94 77 3d 	call	0x7aee	; 0x7aee <SetMasterVolume>
	SetTileTable(tiles_data);
    b62c:	87 e5       	ldi	r24, 0x57	; 87
    b62e:	93 e5       	ldi	r25, 0x53	; 83
    b630:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    b634:	8d e5       	ldi	r24, 0x5D	; 93
    b636:	9e e1       	ldi	r25, 0x1E	; 30
    b638:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    b63c:	87 e1       	ldi	r24, 0x17	; 23
    b63e:	93 e6       	ldi	r25, 0x63	; 99
    b640:	90 93 6e 0d 	sts	0x0D6E, r25
    b644:	80 93 6d 0d 	sts	0x0D6D, r24
	LBSetFontTilesMap((char*) map_font);
	FadeIn(FRAMES_PER_FADE, false);
    b648:	60 e0       	ldi	r22, 0x00	; 0
    b64a:	83 e0       	ldi	r24, 0x03	; 3
    b64c:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <FadeIn>
	init_game_state();
    b650:	0e 94 47 48 	call	0x908e	; 0x908e <init_game_state>
	load_splash();
    b654:	0e 94 27 58 	call	0xb04e	; 0xb04e <load_splash>
	while (1)
	{
		WaitVsync(1);
    b658:	81 e0       	ldi	r24, 0x01	; 1
    b65a:	90 e0       	ldi	r25, 0x00	; 0
    b65c:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    b660:	60 e0       	ldi	r22, 0x00	; 0
    b662:	81 e8       	ldi	r24, 0x81	; 129
    b664:	9f e0       	ldi	r25, 0x0F	; 15
    b666:	0e 94 6c 46 	call	0x8cd8	; 0x8cd8 <LBGetJoyPadState>
		switch (game.current_screen)
    b66a:	80 91 a0 0d 	lds	r24, 0x0DA0
    b66e:	88 23       	and	r24, r24
    b670:	a9 f0       	breq	.+42     	; 0xb69c <main+0x82>
    b672:	82 30       	cpi	r24, 0x02	; 2
    b674:	89 f7       	brne	.-30     	; 0xb658 <main+0x3e>
			case SPLASH:
				update_splash();
				LBRotateSprites();
				break;
			case LEVEL:
				update_level();
    b676:	0e 94 26 57 	call	0xae4c	; 0xae4c <update_level>
				update_player();
    b67a:	0e 94 99 58 	call	0xb132	; 0xb132 <update_player>
				update_shot();
    b67e:	0e 94 b9 4c 	call	0x9972	; 0x9972 <update_shot>
				update_enemies();
    b682:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <update_enemies>
				update_enemy_shots();
    b686:	0e 94 0e 54 	call	0xa81c	; 0xa81c <update_enemy_shots>
				animate_player();
    b68a:	0e 94 31 53 	call	0xa662	; 0xa662 <animate_player>
				animate_shot();
    b68e:	0e 94 ad 50 	call	0xa15a	; 0xa15a <animate_shot>
				animate_enemies();
    b692:	0e 94 a8 54 	call	0xa950	; 0xa950 <animate_enemies>
				animate_enemy_shots();
    b696:	0e 94 eb 55 	call	0xabd6	; 0xabd6 <animate_enemy_shots>
    b69a:	02 c0       	rjmp	.+4      	; 0xb6a0 <main+0x86>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    b69c:	0e 94 ce 5a 	call	0xb59c	; 0xb59c <update_splash>
				update_enemy_shots();
				animate_player();
				animate_shot();
				animate_enemies();
				animate_enemy_shots();
				LBRotateSprites();
    b6a0:	0e 94 08 48 	call	0x9010	; 0x9010 <LBRotateSprites>
				break;
    b6a4:	d9 cf       	rjmp	.-78     	; 0xb658 <main+0x3e>

0000b6a6 <__udivmodqi4>:
    b6a6:	99 1b       	sub	r25, r25
    b6a8:	79 e0       	ldi	r23, 0x09	; 9
    b6aa:	04 c0       	rjmp	.+8      	; 0xb6b4 <__udivmodqi4_ep>

0000b6ac <__udivmodqi4_loop>:
    b6ac:	99 1f       	adc	r25, r25
    b6ae:	96 17       	cp	r25, r22
    b6b0:	08 f0       	brcs	.+2      	; 0xb6b4 <__udivmodqi4_ep>
    b6b2:	96 1b       	sub	r25, r22

0000b6b4 <__udivmodqi4_ep>:
    b6b4:	88 1f       	adc	r24, r24
    b6b6:	7a 95       	dec	r23
    b6b8:	c9 f7       	brne	.-14     	; 0xb6ac <__udivmodqi4_loop>
    b6ba:	80 95       	com	r24
    b6bc:	08 95       	ret

0000b6be <__udivmodhi4>:
    b6be:	aa 1b       	sub	r26, r26
    b6c0:	bb 1b       	sub	r27, r27
    b6c2:	51 e1       	ldi	r21, 0x11	; 17
    b6c4:	07 c0       	rjmp	.+14     	; 0xb6d4 <__udivmodhi4_ep>

0000b6c6 <__udivmodhi4_loop>:
    b6c6:	aa 1f       	adc	r26, r26
    b6c8:	bb 1f       	adc	r27, r27
    b6ca:	a6 17       	cp	r26, r22
    b6cc:	b7 07       	cpc	r27, r23
    b6ce:	10 f0       	brcs	.+4      	; 0xb6d4 <__udivmodhi4_ep>
    b6d0:	a6 1b       	sub	r26, r22
    b6d2:	b7 0b       	sbc	r27, r23

0000b6d4 <__udivmodhi4_ep>:
    b6d4:	88 1f       	adc	r24, r24
    b6d6:	99 1f       	adc	r25, r25
    b6d8:	5a 95       	dec	r21
    b6da:	a9 f7       	brne	.-22     	; 0xb6c6 <__udivmodhi4_loop>
    b6dc:	80 95       	com	r24
    b6de:	90 95       	com	r25
    b6e0:	bc 01       	movw	r22, r24
    b6e2:	cd 01       	movw	r24, r26
    b6e4:	08 95       	ret

0000b6e6 <__divmodhi4>:
    b6e6:	97 fb       	bst	r25, 7
    b6e8:	07 2e       	mov	r0, r23
    b6ea:	16 f4       	brtc	.+4      	; 0xb6f0 <__divmodhi4+0xa>
    b6ec:	00 94       	com	r0
    b6ee:	07 d0       	rcall	.+14     	; 0xb6fe <__divmodhi4_neg1>
    b6f0:	77 fd       	sbrc	r23, 7
    b6f2:	09 d0       	rcall	.+18     	; 0xb706 <__divmodhi4_neg2>
    b6f4:	0e 94 5f 5b 	call	0xb6be	; 0xb6be <__udivmodhi4>
    b6f8:	07 fc       	sbrc	r0, 7
    b6fa:	05 d0       	rcall	.+10     	; 0xb706 <__divmodhi4_neg2>
    b6fc:	3e f4       	brtc	.+14     	; 0xb70c <__divmodhi4_exit>

0000b6fe <__divmodhi4_neg1>:
    b6fe:	90 95       	com	r25
    b700:	81 95       	neg	r24
    b702:	9f 4f       	sbci	r25, 0xFF	; 255
    b704:	08 95       	ret

0000b706 <__divmodhi4_neg2>:
    b706:	70 95       	com	r23
    b708:	61 95       	neg	r22
    b70a:	7f 4f       	sbci	r23, 0xFF	; 255

0000b70c <__divmodhi4_exit>:
    b70c:	08 95       	ret

0000b70e <__subsf3>:
    b70e:	50 58       	subi	r21, 0x80	; 128

0000b710 <__addsf3>:
    b710:	bb 27       	eor	r27, r27
    b712:	aa 27       	eor	r26, r26
    b714:	0e d0       	rcall	.+28     	; 0xb732 <__addsf3x>
    b716:	08 c1       	rjmp	.+528    	; 0xb928 <__fp_round>
    b718:	f9 d0       	rcall	.+498    	; 0xb90c <__fp_pscA>
    b71a:	30 f0       	brcs	.+12     	; 0xb728 <__addsf3+0x18>
    b71c:	fe d0       	rcall	.+508    	; 0xb91a <__fp_pscB>
    b71e:	20 f0       	brcs	.+8      	; 0xb728 <__addsf3+0x18>
    b720:	31 f4       	brne	.+12     	; 0xb72e <__addsf3+0x1e>
    b722:	9f 3f       	cpi	r25, 0xFF	; 255
    b724:	11 f4       	brne	.+4      	; 0xb72a <__addsf3+0x1a>
    b726:	1e f4       	brtc	.+6      	; 0xb72e <__addsf3+0x1e>
    b728:	ee c0       	rjmp	.+476    	; 0xb906 <__fp_nan>
    b72a:	0e f4       	brtc	.+2      	; 0xb72e <__addsf3+0x1e>
    b72c:	e0 95       	com	r30
    b72e:	e7 fb       	bst	r30, 7
    b730:	e4 c0       	rjmp	.+456    	; 0xb8fa <__fp_inf>

0000b732 <__addsf3x>:
    b732:	e9 2f       	mov	r30, r25
    b734:	0a d1       	rcall	.+532    	; 0xb94a <__fp_split3>
    b736:	80 f3       	brcs	.-32     	; 0xb718 <__addsf3+0x8>
    b738:	ba 17       	cp	r27, r26
    b73a:	62 07       	cpc	r22, r18
    b73c:	73 07       	cpc	r23, r19
    b73e:	84 07       	cpc	r24, r20
    b740:	95 07       	cpc	r25, r21
    b742:	18 f0       	brcs	.+6      	; 0xb74a <__addsf3x+0x18>
    b744:	71 f4       	brne	.+28     	; 0xb762 <__addsf3x+0x30>
    b746:	9e f5       	brtc	.+102    	; 0xb7ae <__addsf3x+0x7c>
    b748:	22 c1       	rjmp	.+580    	; 0xb98e <__fp_zero>
    b74a:	0e f4       	brtc	.+2      	; 0xb74e <__addsf3x+0x1c>
    b74c:	e0 95       	com	r30
    b74e:	0b 2e       	mov	r0, r27
    b750:	ba 2f       	mov	r27, r26
    b752:	a0 2d       	mov	r26, r0
    b754:	0b 01       	movw	r0, r22
    b756:	b9 01       	movw	r22, r18
    b758:	90 01       	movw	r18, r0
    b75a:	0c 01       	movw	r0, r24
    b75c:	ca 01       	movw	r24, r20
    b75e:	a0 01       	movw	r20, r0
    b760:	11 24       	eor	r1, r1
    b762:	ff 27       	eor	r31, r31
    b764:	59 1b       	sub	r21, r25
    b766:	99 f0       	breq	.+38     	; 0xb78e <__addsf3x+0x5c>
    b768:	59 3f       	cpi	r21, 0xF9	; 249
    b76a:	50 f4       	brcc	.+20     	; 0xb780 <__addsf3x+0x4e>
    b76c:	50 3e       	cpi	r21, 0xE0	; 224
    b76e:	68 f1       	brcs	.+90     	; 0xb7ca <__addsf3x+0x98>
    b770:	1a 16       	cp	r1, r26
    b772:	f0 40       	sbci	r31, 0x00	; 0
    b774:	a2 2f       	mov	r26, r18
    b776:	23 2f       	mov	r18, r19
    b778:	34 2f       	mov	r19, r20
    b77a:	44 27       	eor	r20, r20
    b77c:	58 5f       	subi	r21, 0xF8	; 248
    b77e:	f3 cf       	rjmp	.-26     	; 0xb766 <__addsf3x+0x34>
    b780:	46 95       	lsr	r20
    b782:	37 95       	ror	r19
    b784:	27 95       	ror	r18
    b786:	a7 95       	ror	r26
    b788:	f0 40       	sbci	r31, 0x00	; 0
    b78a:	53 95       	inc	r21
    b78c:	c9 f7       	brne	.-14     	; 0xb780 <__addsf3x+0x4e>
    b78e:	7e f4       	brtc	.+30     	; 0xb7ae <__addsf3x+0x7c>
    b790:	1f 16       	cp	r1, r31
    b792:	ba 0b       	sbc	r27, r26
    b794:	62 0b       	sbc	r22, r18
    b796:	73 0b       	sbc	r23, r19
    b798:	84 0b       	sbc	r24, r20
    b79a:	ba f0       	brmi	.+46     	; 0xb7ca <__addsf3x+0x98>
    b79c:	91 50       	subi	r25, 0x01	; 1
    b79e:	a1 f0       	breq	.+40     	; 0xb7c8 <__addsf3x+0x96>
    b7a0:	ff 0f       	add	r31, r31
    b7a2:	bb 1f       	adc	r27, r27
    b7a4:	66 1f       	adc	r22, r22
    b7a6:	77 1f       	adc	r23, r23
    b7a8:	88 1f       	adc	r24, r24
    b7aa:	c2 f7       	brpl	.-16     	; 0xb79c <__addsf3x+0x6a>
    b7ac:	0e c0       	rjmp	.+28     	; 0xb7ca <__addsf3x+0x98>
    b7ae:	ba 0f       	add	r27, r26
    b7b0:	62 1f       	adc	r22, r18
    b7b2:	73 1f       	adc	r23, r19
    b7b4:	84 1f       	adc	r24, r20
    b7b6:	48 f4       	brcc	.+18     	; 0xb7ca <__addsf3x+0x98>
    b7b8:	87 95       	ror	r24
    b7ba:	77 95       	ror	r23
    b7bc:	67 95       	ror	r22
    b7be:	b7 95       	ror	r27
    b7c0:	f7 95       	ror	r31
    b7c2:	9e 3f       	cpi	r25, 0xFE	; 254
    b7c4:	08 f0       	brcs	.+2      	; 0xb7c8 <__addsf3x+0x96>
    b7c6:	b3 cf       	rjmp	.-154    	; 0xb72e <__addsf3+0x1e>
    b7c8:	93 95       	inc	r25
    b7ca:	88 0f       	add	r24, r24
    b7cc:	08 f0       	brcs	.+2      	; 0xb7d0 <__addsf3x+0x9e>
    b7ce:	99 27       	eor	r25, r25
    b7d0:	ee 0f       	add	r30, r30
    b7d2:	97 95       	ror	r25
    b7d4:	87 95       	ror	r24
    b7d6:	08 95       	ret

0000b7d8 <__cmpsf2>:
    b7d8:	6c d0       	rcall	.+216    	; 0xb8b2 <__fp_cmp>
    b7da:	08 f4       	brcc	.+2      	; 0xb7de <__cmpsf2+0x6>
    b7dc:	81 e0       	ldi	r24, 0x01	; 1
    b7de:	08 95       	ret

0000b7e0 <__fixunssfsi>:
    b7e0:	bc d0       	rcall	.+376    	; 0xb95a <__fp_splitA>
    b7e2:	88 f0       	brcs	.+34     	; 0xb806 <__fixunssfsi+0x26>
    b7e4:	9f 57       	subi	r25, 0x7F	; 127
    b7e6:	90 f0       	brcs	.+36     	; 0xb80c <__fixunssfsi+0x2c>
    b7e8:	b9 2f       	mov	r27, r25
    b7ea:	99 27       	eor	r25, r25
    b7ec:	b7 51       	subi	r27, 0x17	; 23
    b7ee:	a0 f0       	brcs	.+40     	; 0xb818 <__fixunssfsi+0x38>
    b7f0:	d1 f0       	breq	.+52     	; 0xb826 <__fixunssfsi+0x46>
    b7f2:	66 0f       	add	r22, r22
    b7f4:	77 1f       	adc	r23, r23
    b7f6:	88 1f       	adc	r24, r24
    b7f8:	99 1f       	adc	r25, r25
    b7fa:	1a f0       	brmi	.+6      	; 0xb802 <__fixunssfsi+0x22>
    b7fc:	ba 95       	dec	r27
    b7fe:	c9 f7       	brne	.-14     	; 0xb7f2 <__fixunssfsi+0x12>
    b800:	12 c0       	rjmp	.+36     	; 0xb826 <__fixunssfsi+0x46>
    b802:	b1 30       	cpi	r27, 0x01	; 1
    b804:	81 f0       	breq	.+32     	; 0xb826 <__fixunssfsi+0x46>
    b806:	c3 d0       	rcall	.+390    	; 0xb98e <__fp_zero>
    b808:	b1 e0       	ldi	r27, 0x01	; 1
    b80a:	08 95       	ret
    b80c:	c0 c0       	rjmp	.+384    	; 0xb98e <__fp_zero>
    b80e:	67 2f       	mov	r22, r23
    b810:	78 2f       	mov	r23, r24
    b812:	88 27       	eor	r24, r24
    b814:	b8 5f       	subi	r27, 0xF8	; 248
    b816:	39 f0       	breq	.+14     	; 0xb826 <__fixunssfsi+0x46>
    b818:	b9 3f       	cpi	r27, 0xF9	; 249
    b81a:	cc f3       	brlt	.-14     	; 0xb80e <__fixunssfsi+0x2e>
    b81c:	86 95       	lsr	r24
    b81e:	77 95       	ror	r23
    b820:	67 95       	ror	r22
    b822:	b3 95       	inc	r27
    b824:	d9 f7       	brne	.-10     	; 0xb81c <__fixunssfsi+0x3c>
    b826:	3e f4       	brtc	.+14     	; 0xb836 <__fixunssfsi+0x56>
    b828:	90 95       	com	r25
    b82a:	80 95       	com	r24
    b82c:	70 95       	com	r23
    b82e:	61 95       	neg	r22
    b830:	7f 4f       	sbci	r23, 0xFF	; 255
    b832:	8f 4f       	sbci	r24, 0xFF	; 255
    b834:	9f 4f       	sbci	r25, 0xFF	; 255
    b836:	08 95       	ret

0000b838 <__floatunsisf>:
    b838:	e8 94       	clt
    b83a:	09 c0       	rjmp	.+18     	; 0xb84e <__floatsisf+0x12>

0000b83c <__floatsisf>:
    b83c:	97 fb       	bst	r25, 7
    b83e:	3e f4       	brtc	.+14     	; 0xb84e <__floatsisf+0x12>
    b840:	90 95       	com	r25
    b842:	80 95       	com	r24
    b844:	70 95       	com	r23
    b846:	61 95       	neg	r22
    b848:	7f 4f       	sbci	r23, 0xFF	; 255
    b84a:	8f 4f       	sbci	r24, 0xFF	; 255
    b84c:	9f 4f       	sbci	r25, 0xFF	; 255
    b84e:	99 23       	and	r25, r25
    b850:	a9 f0       	breq	.+42     	; 0xb87c <__floatsisf+0x40>
    b852:	f9 2f       	mov	r31, r25
    b854:	96 e9       	ldi	r25, 0x96	; 150
    b856:	bb 27       	eor	r27, r27
    b858:	93 95       	inc	r25
    b85a:	f6 95       	lsr	r31
    b85c:	87 95       	ror	r24
    b85e:	77 95       	ror	r23
    b860:	67 95       	ror	r22
    b862:	b7 95       	ror	r27
    b864:	f1 11       	cpse	r31, r1
    b866:	f8 cf       	rjmp	.-16     	; 0xb858 <__floatsisf+0x1c>
    b868:	fa f4       	brpl	.+62     	; 0xb8a8 <__floatsisf+0x6c>
    b86a:	bb 0f       	add	r27, r27
    b86c:	11 f4       	brne	.+4      	; 0xb872 <__floatsisf+0x36>
    b86e:	60 ff       	sbrs	r22, 0
    b870:	1b c0       	rjmp	.+54     	; 0xb8a8 <__floatsisf+0x6c>
    b872:	6f 5f       	subi	r22, 0xFF	; 255
    b874:	7f 4f       	sbci	r23, 0xFF	; 255
    b876:	8f 4f       	sbci	r24, 0xFF	; 255
    b878:	9f 4f       	sbci	r25, 0xFF	; 255
    b87a:	16 c0       	rjmp	.+44     	; 0xb8a8 <__floatsisf+0x6c>
    b87c:	88 23       	and	r24, r24
    b87e:	11 f0       	breq	.+4      	; 0xb884 <__floatsisf+0x48>
    b880:	96 e9       	ldi	r25, 0x96	; 150
    b882:	11 c0       	rjmp	.+34     	; 0xb8a6 <__floatsisf+0x6a>
    b884:	77 23       	and	r23, r23
    b886:	21 f0       	breq	.+8      	; 0xb890 <__floatsisf+0x54>
    b888:	9e e8       	ldi	r25, 0x8E	; 142
    b88a:	87 2f       	mov	r24, r23
    b88c:	76 2f       	mov	r23, r22
    b88e:	05 c0       	rjmp	.+10     	; 0xb89a <__floatsisf+0x5e>
    b890:	66 23       	and	r22, r22
    b892:	71 f0       	breq	.+28     	; 0xb8b0 <__floatsisf+0x74>
    b894:	96 e8       	ldi	r25, 0x86	; 134
    b896:	86 2f       	mov	r24, r22
    b898:	70 e0       	ldi	r23, 0x00	; 0
    b89a:	60 e0       	ldi	r22, 0x00	; 0
    b89c:	2a f0       	brmi	.+10     	; 0xb8a8 <__floatsisf+0x6c>
    b89e:	9a 95       	dec	r25
    b8a0:	66 0f       	add	r22, r22
    b8a2:	77 1f       	adc	r23, r23
    b8a4:	88 1f       	adc	r24, r24
    b8a6:	da f7       	brpl	.-10     	; 0xb89e <__floatsisf+0x62>
    b8a8:	88 0f       	add	r24, r24
    b8aa:	96 95       	lsr	r25
    b8ac:	87 95       	ror	r24
    b8ae:	97 f9       	bld	r25, 7
    b8b0:	08 95       	ret

0000b8b2 <__fp_cmp>:
    b8b2:	99 0f       	add	r25, r25
    b8b4:	00 08       	sbc	r0, r0
    b8b6:	55 0f       	add	r21, r21
    b8b8:	aa 0b       	sbc	r26, r26
    b8ba:	e0 e8       	ldi	r30, 0x80	; 128
    b8bc:	fe ef       	ldi	r31, 0xFE	; 254
    b8be:	16 16       	cp	r1, r22
    b8c0:	17 06       	cpc	r1, r23
    b8c2:	e8 07       	cpc	r30, r24
    b8c4:	f9 07       	cpc	r31, r25
    b8c6:	c0 f0       	brcs	.+48     	; 0xb8f8 <__fp_cmp+0x46>
    b8c8:	12 16       	cp	r1, r18
    b8ca:	13 06       	cpc	r1, r19
    b8cc:	e4 07       	cpc	r30, r20
    b8ce:	f5 07       	cpc	r31, r21
    b8d0:	98 f0       	brcs	.+38     	; 0xb8f8 <__fp_cmp+0x46>
    b8d2:	62 1b       	sub	r22, r18
    b8d4:	73 0b       	sbc	r23, r19
    b8d6:	84 0b       	sbc	r24, r20
    b8d8:	95 0b       	sbc	r25, r21
    b8da:	39 f4       	brne	.+14     	; 0xb8ea <__fp_cmp+0x38>
    b8dc:	0a 26       	eor	r0, r26
    b8de:	61 f0       	breq	.+24     	; 0xb8f8 <__fp_cmp+0x46>
    b8e0:	23 2b       	or	r18, r19
    b8e2:	24 2b       	or	r18, r20
    b8e4:	25 2b       	or	r18, r21
    b8e6:	21 f4       	brne	.+8      	; 0xb8f0 <__fp_cmp+0x3e>
    b8e8:	08 95       	ret
    b8ea:	0a 26       	eor	r0, r26
    b8ec:	09 f4       	brne	.+2      	; 0xb8f0 <__fp_cmp+0x3e>
    b8ee:	a1 40       	sbci	r26, 0x01	; 1
    b8f0:	a6 95       	lsr	r26
    b8f2:	8f ef       	ldi	r24, 0xFF	; 255
    b8f4:	81 1d       	adc	r24, r1
    b8f6:	81 1d       	adc	r24, r1
    b8f8:	08 95       	ret

0000b8fa <__fp_inf>:
    b8fa:	97 f9       	bld	r25, 7
    b8fc:	9f 67       	ori	r25, 0x7F	; 127
    b8fe:	80 e8       	ldi	r24, 0x80	; 128
    b900:	70 e0       	ldi	r23, 0x00	; 0
    b902:	60 e0       	ldi	r22, 0x00	; 0
    b904:	08 95       	ret

0000b906 <__fp_nan>:
    b906:	9f ef       	ldi	r25, 0xFF	; 255
    b908:	80 ec       	ldi	r24, 0xC0	; 192
    b90a:	08 95       	ret

0000b90c <__fp_pscA>:
    b90c:	00 24       	eor	r0, r0
    b90e:	0a 94       	dec	r0
    b910:	16 16       	cp	r1, r22
    b912:	17 06       	cpc	r1, r23
    b914:	18 06       	cpc	r1, r24
    b916:	09 06       	cpc	r0, r25
    b918:	08 95       	ret

0000b91a <__fp_pscB>:
    b91a:	00 24       	eor	r0, r0
    b91c:	0a 94       	dec	r0
    b91e:	12 16       	cp	r1, r18
    b920:	13 06       	cpc	r1, r19
    b922:	14 06       	cpc	r1, r20
    b924:	05 06       	cpc	r0, r21
    b926:	08 95       	ret

0000b928 <__fp_round>:
    b928:	09 2e       	mov	r0, r25
    b92a:	03 94       	inc	r0
    b92c:	00 0c       	add	r0, r0
    b92e:	11 f4       	brne	.+4      	; 0xb934 <__fp_round+0xc>
    b930:	88 23       	and	r24, r24
    b932:	52 f0       	brmi	.+20     	; 0xb948 <__fp_round+0x20>
    b934:	bb 0f       	add	r27, r27
    b936:	40 f4       	brcc	.+16     	; 0xb948 <__fp_round+0x20>
    b938:	bf 2b       	or	r27, r31
    b93a:	11 f4       	brne	.+4      	; 0xb940 <__fp_round+0x18>
    b93c:	60 ff       	sbrs	r22, 0
    b93e:	04 c0       	rjmp	.+8      	; 0xb948 <__fp_round+0x20>
    b940:	6f 5f       	subi	r22, 0xFF	; 255
    b942:	7f 4f       	sbci	r23, 0xFF	; 255
    b944:	8f 4f       	sbci	r24, 0xFF	; 255
    b946:	9f 4f       	sbci	r25, 0xFF	; 255
    b948:	08 95       	ret

0000b94a <__fp_split3>:
    b94a:	57 fd       	sbrc	r21, 7
    b94c:	90 58       	subi	r25, 0x80	; 128
    b94e:	44 0f       	add	r20, r20
    b950:	55 1f       	adc	r21, r21
    b952:	59 f0       	breq	.+22     	; 0xb96a <__fp_splitA+0x10>
    b954:	5f 3f       	cpi	r21, 0xFF	; 255
    b956:	71 f0       	breq	.+28     	; 0xb974 <__fp_splitA+0x1a>
    b958:	47 95       	ror	r20

0000b95a <__fp_splitA>:
    b95a:	88 0f       	add	r24, r24
    b95c:	97 fb       	bst	r25, 7
    b95e:	99 1f       	adc	r25, r25
    b960:	61 f0       	breq	.+24     	; 0xb97a <__fp_splitA+0x20>
    b962:	9f 3f       	cpi	r25, 0xFF	; 255
    b964:	79 f0       	breq	.+30     	; 0xb984 <__fp_splitA+0x2a>
    b966:	87 95       	ror	r24
    b968:	08 95       	ret
    b96a:	12 16       	cp	r1, r18
    b96c:	13 06       	cpc	r1, r19
    b96e:	14 06       	cpc	r1, r20
    b970:	55 1f       	adc	r21, r21
    b972:	f2 cf       	rjmp	.-28     	; 0xb958 <__fp_split3+0xe>
    b974:	46 95       	lsr	r20
    b976:	f1 df       	rcall	.-30     	; 0xb95a <__fp_splitA>
    b978:	08 c0       	rjmp	.+16     	; 0xb98a <__fp_splitA+0x30>
    b97a:	16 16       	cp	r1, r22
    b97c:	17 06       	cpc	r1, r23
    b97e:	18 06       	cpc	r1, r24
    b980:	99 1f       	adc	r25, r25
    b982:	f1 cf       	rjmp	.-30     	; 0xb966 <__fp_splitA+0xc>
    b984:	86 95       	lsr	r24
    b986:	71 05       	cpc	r23, r1
    b988:	61 05       	cpc	r22, r1
    b98a:	08 94       	sec
    b98c:	08 95       	ret

0000b98e <__fp_zero>:
    b98e:	e8 94       	clt

0000b990 <__fp_szero>:
    b990:	bb 27       	eor	r27, r27
    b992:	66 27       	eor	r22, r22
    b994:	77 27       	eor	r23, r23
    b996:	cb 01       	movw	r24, r22
    b998:	97 f9       	bld	r25, 7
    b99a:	08 95       	ret

0000b99c <__gesf2>:
    b99c:	8a df       	rcall	.-236    	; 0xb8b2 <__fp_cmp>
    b99e:	08 f4       	brcc	.+2      	; 0xb9a2 <__gesf2+0x6>
    b9a0:	8f ef       	ldi	r24, 0xFF	; 255
    b9a2:	08 95       	ret

0000b9a4 <__mulsf3>:
    b9a4:	0b d0       	rcall	.+22     	; 0xb9bc <__mulsf3x>
    b9a6:	c0 cf       	rjmp	.-128    	; 0xb928 <__fp_round>
    b9a8:	b1 df       	rcall	.-158    	; 0xb90c <__fp_pscA>
    b9aa:	28 f0       	brcs	.+10     	; 0xb9b6 <__mulsf3+0x12>
    b9ac:	b6 df       	rcall	.-148    	; 0xb91a <__fp_pscB>
    b9ae:	18 f0       	brcs	.+6      	; 0xb9b6 <__mulsf3+0x12>
    b9b0:	95 23       	and	r25, r21
    b9b2:	09 f0       	breq	.+2      	; 0xb9b6 <__mulsf3+0x12>
    b9b4:	a2 cf       	rjmp	.-188    	; 0xb8fa <__fp_inf>
    b9b6:	a7 cf       	rjmp	.-178    	; 0xb906 <__fp_nan>
    b9b8:	11 24       	eor	r1, r1
    b9ba:	ea cf       	rjmp	.-44     	; 0xb990 <__fp_szero>

0000b9bc <__mulsf3x>:
    b9bc:	c6 df       	rcall	.-116    	; 0xb94a <__fp_split3>
    b9be:	a0 f3       	brcs	.-24     	; 0xb9a8 <__mulsf3+0x4>

0000b9c0 <__mulsf3_pse>:
    b9c0:	95 9f       	mul	r25, r21
    b9c2:	d1 f3       	breq	.-12     	; 0xb9b8 <__mulsf3+0x14>
    b9c4:	95 0f       	add	r25, r21
    b9c6:	50 e0       	ldi	r21, 0x00	; 0
    b9c8:	55 1f       	adc	r21, r21
    b9ca:	62 9f       	mul	r22, r18
    b9cc:	f0 01       	movw	r30, r0
    b9ce:	72 9f       	mul	r23, r18
    b9d0:	bb 27       	eor	r27, r27
    b9d2:	f0 0d       	add	r31, r0
    b9d4:	b1 1d       	adc	r27, r1
    b9d6:	63 9f       	mul	r22, r19
    b9d8:	aa 27       	eor	r26, r26
    b9da:	f0 0d       	add	r31, r0
    b9dc:	b1 1d       	adc	r27, r1
    b9de:	aa 1f       	adc	r26, r26
    b9e0:	64 9f       	mul	r22, r20
    b9e2:	66 27       	eor	r22, r22
    b9e4:	b0 0d       	add	r27, r0
    b9e6:	a1 1d       	adc	r26, r1
    b9e8:	66 1f       	adc	r22, r22
    b9ea:	82 9f       	mul	r24, r18
    b9ec:	22 27       	eor	r18, r18
    b9ee:	b0 0d       	add	r27, r0
    b9f0:	a1 1d       	adc	r26, r1
    b9f2:	62 1f       	adc	r22, r18
    b9f4:	73 9f       	mul	r23, r19
    b9f6:	b0 0d       	add	r27, r0
    b9f8:	a1 1d       	adc	r26, r1
    b9fa:	62 1f       	adc	r22, r18
    b9fc:	83 9f       	mul	r24, r19
    b9fe:	a0 0d       	add	r26, r0
    ba00:	61 1d       	adc	r22, r1
    ba02:	22 1f       	adc	r18, r18
    ba04:	74 9f       	mul	r23, r20
    ba06:	33 27       	eor	r19, r19
    ba08:	a0 0d       	add	r26, r0
    ba0a:	61 1d       	adc	r22, r1
    ba0c:	23 1f       	adc	r18, r19
    ba0e:	84 9f       	mul	r24, r20
    ba10:	60 0d       	add	r22, r0
    ba12:	21 1d       	adc	r18, r1
    ba14:	82 2f       	mov	r24, r18
    ba16:	76 2f       	mov	r23, r22
    ba18:	6a 2f       	mov	r22, r26
    ba1a:	11 24       	eor	r1, r1
    ba1c:	9f 57       	subi	r25, 0x7F	; 127
    ba1e:	50 40       	sbci	r21, 0x00	; 0
    ba20:	8a f0       	brmi	.+34     	; 0xba44 <__mulsf3_pse+0x84>
    ba22:	e1 f0       	breq	.+56     	; 0xba5c <__mulsf3_pse+0x9c>
    ba24:	88 23       	and	r24, r24
    ba26:	4a f0       	brmi	.+18     	; 0xba3a <__mulsf3_pse+0x7a>
    ba28:	ee 0f       	add	r30, r30
    ba2a:	ff 1f       	adc	r31, r31
    ba2c:	bb 1f       	adc	r27, r27
    ba2e:	66 1f       	adc	r22, r22
    ba30:	77 1f       	adc	r23, r23
    ba32:	88 1f       	adc	r24, r24
    ba34:	91 50       	subi	r25, 0x01	; 1
    ba36:	50 40       	sbci	r21, 0x00	; 0
    ba38:	a9 f7       	brne	.-22     	; 0xba24 <__mulsf3_pse+0x64>
    ba3a:	9e 3f       	cpi	r25, 0xFE	; 254
    ba3c:	51 05       	cpc	r21, r1
    ba3e:	70 f0       	brcs	.+28     	; 0xba5c <__mulsf3_pse+0x9c>
    ba40:	5c cf       	rjmp	.-328    	; 0xb8fa <__fp_inf>
    ba42:	a6 cf       	rjmp	.-180    	; 0xb990 <__fp_szero>
    ba44:	5f 3f       	cpi	r21, 0xFF	; 255
    ba46:	ec f3       	brlt	.-6      	; 0xba42 <__mulsf3_pse+0x82>
    ba48:	98 3e       	cpi	r25, 0xE8	; 232
    ba4a:	dc f3       	brlt	.-10     	; 0xba42 <__mulsf3_pse+0x82>
    ba4c:	86 95       	lsr	r24
    ba4e:	77 95       	ror	r23
    ba50:	67 95       	ror	r22
    ba52:	b7 95       	ror	r27
    ba54:	f7 95       	ror	r31
    ba56:	e7 95       	ror	r30
    ba58:	9f 5f       	subi	r25, 0xFF	; 255
    ba5a:	c1 f7       	brne	.-16     	; 0xba4c <__mulsf3_pse+0x8c>
    ba5c:	fe 2b       	or	r31, r30
    ba5e:	88 0f       	add	r24, r24
    ba60:	91 1d       	adc	r25, r1
    ba62:	96 95       	lsr	r25
    ba64:	87 95       	ror	r24
    ba66:	97 f9       	bld	r25, 7
    ba68:	08 95       	ret

0000ba6a <_exit>:
    ba6a:	f8 94       	cli

0000ba6c <__stop_program>:
    ba6c:	ff cf       	rjmp	.-2      	; 0xba6c <__stop_program>
