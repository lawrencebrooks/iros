
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  00006b94  00006c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  00006ca0  2**5
                  CONTENTS, READONLY
  2 .text         00006b94  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          0000099b  00800502  00800502  00006c96  2**1
                  ALLOC
  4 .stab         00000528  00000000  00000000  000070a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  000075c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000786d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000528  00000000  00000000  00007880  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005a9b  00000000  00000000  00007da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001506  00000000  00000000  0000d843  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000018cf  00000000  00000000  0000ed49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000d44  00000000  00000000  00010618  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015da  00000000  00000000  0001135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004c1d  00000000  00000000  00012936  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005e0  00000000  00000000  00017558  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__ctors_end>
       4:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
       8:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
       c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      10:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      14:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      18:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      1c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      20:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__vector_8>
      24:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      28:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      2c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      30:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      34:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__vector_13>
      38:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__vector_14>
      3c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      40:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      44:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      48:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      4c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      50:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      54:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      58:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      5c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      60:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      64:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      68:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      6c:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__bad_interrupt>
      70:	e7 30       	cpi	r30, 0x07	; 7
      72:	ea 30       	cpi	r30, 0x0A	; 10
      74:	ed 30       	cpi	r30, 0x0D	; 13
      76:	f0 30       	cpi	r31, 0x00	; 0
      78:	f3 30       	cpi	r31, 0x03	; 3
      7a:	f6 30       	cpi	r31, 0x06	; 6
      7c:	f9 30       	cpi	r31, 0x09	; 9

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	d8 21 db 21 37 22 3b 22 42 22 e3 21 e8 21 ed 21     .!.!7";"B".!.!.!
      dc:	4a 22 f0 21 f3 21 f6 21 31 22 34 22 5a 22           J".!.!.!1"4"Z"

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strLives>:
     979:	4c 49 56 45 53 3a 00                                LIVES:.

00000980 <strShield>:
     980:	53 48 49 45 4c 44 3a 00                             SHIELD:.

00000988 <strScore>:
     988:	53 43 4f 52 45 3a 00                                SCORE:.

0000098f <strSelectHandle>:
     98f:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009a0 <strHighscores>:
     9a0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009ac <str1Player>:
     9ac:	53 54 41 52 54 00                                   START.

000009b2 <strCopyright>:
     9b2:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c2:	4f 4f 4b 53 00                                      OOKS.

000009c7 <my_patches>:
     9c7:	00 00 00 0c 0a 00 00 00 00 00 00 00 04 0a 00 00     ................
     9d7:	00 00 00 00 00 f9 09 00 00 00 00 01 00 00 eb 09     ................
     9e7:	00 00 00 00                                         ....

000009eb <patch03>:
     9eb:	00 01 01 00 07 90 00 00 e2 08 05 00 00 ff           ..............

000009f9 <patch02>:
     9f9:	00 02 02 01 06 00 01 00 e0 00 ff                    ...........

00000a04 <patch01>:
     a04:	00 02 04 00 00 f6 00 ff                             ........

00000a0c <patch00>:
     a0c:	00 02 04 00 00 dd 00 ff                             ........

00000a14 <level_data>:
     a14:	00 00 03 15 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     bf8:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
     c08:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
     c18:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
     c28:	06 06 06 06 06 06 06 06 06 06 06 06 05 05 05 05     ................
     c38:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c48:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c58:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c68:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c78:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c88:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c98:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ca8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cb8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cc8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cd8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ce8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cf8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d08:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d18:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d28:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d38:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d48:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d58:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d68:	05 05 05 05 05 05 05 05 05 05 05 05 02 01 01 01     ................
     d78:	01 01 03 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d88:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d98:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     da8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     db8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     dc8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     dd8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     de8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     df8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e08:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e18:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e28:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e38:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e48:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e58:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e68:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e78:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e88:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e98:	05 02 01 01 01 01 01 03 05 05 05 05 05 05 05 02     ................
     ea8:	01 01 01 01 01 03 05 05 05 05 05 05 05 05 05 05     ................
     eb8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ec8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ed8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ee8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ef8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f08:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f18:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f28:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f38:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f48:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f58:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f68:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f78:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f88:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f98:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fa8:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fb8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fc8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fd8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     fe8:	01 01 01 01 01 01 01 01 01 01 01 01 04 04 04 04     ................
     ff8:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1008:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1018:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1028:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1038:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1048:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1058:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    1068:	04 04 04 04                                         ....

0000106c <sprites_data>:
    106c:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    107c:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    108c:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    109c:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    10ac:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    10bc:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    10cc:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    10dc:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    10ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    10fc:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    110c:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    111c:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    112c:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    113c:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    114c:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    115c:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    116c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    117c:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    118c:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    119c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    11ac:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    11bc:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    11cc:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    11dc:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    11ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    11fc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    120c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    121c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    122c:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    123c:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    124c:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    125c:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    126c:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    127c:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    128c:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    129c:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    12ac:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    12bc:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    12cc:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    12dc:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    12ec:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    12fc:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    130c:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    131c:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    132c:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    133c:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    134c:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    135c:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    136c:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    137c:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    138c:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    139c:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    13ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    13bc:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    13cc:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    13dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    13ec:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    13fc:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    140c:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    141c:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    142c:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    143c:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    144c:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    145c:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    146c:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    147c:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    148c:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    149c:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    14ac:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    14bc:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    14cc:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    14dc:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    14ec:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    14fc:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    150c:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    151c:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    152c:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    153c:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    154c:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    155c:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    156c:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    157c:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    158c:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    159c:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    15ac:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    15bc:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    15cc:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    15dc:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    15ec:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    15fc:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    160c:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    161c:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    162c:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    163c:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    164c:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    165c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    166c:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    167c:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    168c:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    169c:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    16ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    16bc:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    16cc:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    16dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    16ec:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    16fc:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    170c:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    171c:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    172c:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    173c:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    174c:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    175c:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    176c:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    177c:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    178c:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    179c:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    17ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    17bc:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    17cc:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    17dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    17ec:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    17fc:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    180c:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    181c:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    182c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    183c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    184c:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    185c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    186c:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    187c:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    188c:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    189c:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    18ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18bc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18cc:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    18dc:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    18ec:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    18fc:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    190c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    191c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    192c:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    193c:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    194c:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    195c:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    196c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    197c:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    198c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    199c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19ac:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    19bc:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    19cc:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    19dc:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    19ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19fc:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    1a0c:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    1a1c:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    1a2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a3c:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    1a4c:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    1a5c:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    1a6c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a7c:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    1a8c:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    1a9c:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    1aac:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    1abc:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    1acc:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    1adc:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    1aec:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    1afc:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    1b0c:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    1b1c:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    1b2c:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    1b3c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b4c:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    1b5c:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    1b6c:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    1b7c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b8c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b9c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1bac:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    1bbc:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    1bcc:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    1bdc:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1bec:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    1bfc:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    1c0c:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    1c1c:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1c2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c3c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c4c:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    1c5c:	fe a4 87 87 87 87 87 87 a4 a4 ef ef ef ef ef ef     ................
    1c6c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1c7c:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1c8c:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    1c9c:	87 87 87 87 ad 85 87 87 ef ef ef ef ad ad a4 a4     ................
    1cac:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    1cbc:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    1ccc:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    1cdc:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

00001cec <map_enemy_spider_1>:
    1cec:	01 01 23                                            ..#

00001cef <map_enemy_spider_0>:
    1cef:	01 01 18                                            ...

00001cf2 <map_enemy_shark>:
    1cf2:	01 01 05                                            ...

00001cf5 <map_enemy_shot>:
    1cf5:	01 01 0d                                            ...

00001cf8 <map_hero_shot>:
    1cf8:	01 01 04                                            ...

00001cfb <map_hero_ship_large>:
    1cfb:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

00001d05 <map_hero_ship_1>:
    1d05:	03 01 24 1a 1b                                      ..$..

00001d0a <map_hero_ship_0>:
    1d0a:	03 01 19 1a 1b                                      .....

00001d0f <map_hero_prone>:
    1d0f:	03 01 2f 30 31                                      ../01

00001d14 <map_hero_jump>:
    1d14:	02 03 02 03 0a 0c 16 17                             ........

00001d1c <map_hero_step_3>:
    1d1c:	02 03 02 03 0a 0b 2d 2e                             ......-.

00001d24 <map_hero_step_2>:
    1d24:	02 03 00 01 07 09 14 15                             ........

00001d2c <map_hero_step_1>:
    1d2c:	02 03 02 03 0a 0b 12 13                             ........

00001d34 <map_hero_step_0>:
    1d34:	02 03 00 01 07 09 10 11                             ........

00001d3c <map_hero_idle>:
    1d3c:	02 03 00 01 07 08 0e 0f                             ........

00001d44 <map_explosion_2>:
    1d44:	01 01 1e                                            ...

00001d47 <map_explosion_1>:
    1d47:	01 01 1d                                            ...

00001d4a <map_explosion_0>:
    1d4a:	01 01 1c                                            ...

00001d4d <map_meteor>:
    1d4d:	01 01 1f                                            ...

00001d50 <map_up_arrow>:
    1d50:	01 01 22                                            .."

00001d53 <map_down_arrow>:
    1d53:	01 01 21                                            ..!

00001d56 <map_right_arrow>:
    1d56:	01 01 20                                            .. 

00001d59 <map_none>:
    1d59:	01 01 06                                            ...

00001d5c <tiles_data>:
	...
    1d9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dac:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1dbc:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    1dcc:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    1ddc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dec:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1dfc:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    1e0c:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1e1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e2c:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1e3c:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    1e4c:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    1e5c:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    1e6c:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    1e7c:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    1e8c:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1e9c:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    1eac:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    1ebc:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    1ecc:	af af af af af af af af af af af af af af af af     ................
    1edc:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1eec:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1efc:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1f0c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1f1c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1f2c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1f3c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1f4c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1f5c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1f6c:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    1f7c:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    1f8c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1f9c:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    1fac:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    1fbc:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    1fcc:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    1fdc:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    1fec:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    1ffc:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    200c:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    201c:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    202c:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    203c:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    204c:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    2074:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    2084:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    209c:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    20ac:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    20bc:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    20cc:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    20dc:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    20ec:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    20fc:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    210c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    211c:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    212c:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    213c:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    214c:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    215c:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    216c:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    217c:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    218c:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    219c:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    21ac:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    21bc:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    21cc:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    21dc:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    21ec:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    21fc:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    220c:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    221c:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    222c:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    223c:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    224c:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    2268:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    2278:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    2288:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    2298:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    22a8:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    22b8:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    22c8:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    22d8:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    22e8:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    22f8:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    2308:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    2318:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    235c:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    236c:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    237c:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    238c:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    239c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    23ac:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    23bc:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    23cc:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    23dc:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    23ec:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    23fc:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    240c:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    241c:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    242c:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    243c:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    244c:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    245c:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    246c:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    247c:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    248c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    249c:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    24ac:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    24bc:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    24cc:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    2514:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    2524:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    2534:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    2544:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    2554:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    2564:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    2574:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2584:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2594:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    25a4:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    25b4:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    25c4:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    25e0:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    25f0:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    2600:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    2664:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2674:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    268c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2828:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    2838:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    2848:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    2864:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    2874:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2884:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    2944:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2954:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2974:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    29c4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    29e8:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    29f8:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    2a08:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a24:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2a34:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    2a44:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2a64:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    2a74:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    2a84:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    2aa4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2ab4:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    2ac4:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    2ae4:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    2af4:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    2b04:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2b28:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    2b38:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    2b48:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    2b64:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    2b74:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    2b84:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2ba4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    2bb4:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    2bc4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2be4:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    2bf4:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    2c04:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    2c24:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2c34:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2c44:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    2c64:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    2c74:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    2c84:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    2cdc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2cec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2cfc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    2d0c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    2de4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2df4:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    2e0c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e24:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2e34:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    2e44:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    2e64:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    2e74:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    2e84:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    2ea4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2eb4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2ec4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    2ee4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    2ef4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    2f04:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    2f24:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    2f34:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    2f44:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    2f64:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    2f74:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    2f84:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    2fa4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    2fb4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    2fc4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    2fe4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    2ff4:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    3004:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    3024:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3034:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3044:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3064:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3074:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3084:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    30a8:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    30b8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    30c8:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    30e4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    30f4:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    3104:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3124:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3134:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3144:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3164:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    3174:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    3184:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    31a4:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    31b4:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    31c4:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    31e4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    31f4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3204:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3224:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3234:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3244:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    3264:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3274:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3284:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    32a4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    32b4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    32c4:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    32e4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    32f4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    3304:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3324:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3334:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3344:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3364:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3374:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3384:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    33a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    33b4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    33c4:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    33e4:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    33f4:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    3404:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    3424:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3434:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    3444:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3464:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3474:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    3484:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    34a4:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    34b4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    34c4:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    360c:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000361c <map_star>:
    361c:	01 01 0c                                            ...

0000361f <map_ice_moon>:
    361f:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

0000362a <map_ice_cloud>:
    362a:	01 01 08                                            ...

0000362d <map_ice_far>:
    362d:	01 01 07                                            ...

00003630 <map_ice_sky>:
    3630:	01 01 06                                            ...

00003633 <map_ice_horizon>:
    3633:	01 01 05                                            ...

00003636 <map_ice_bottom>:
    3636:	01 01 04                                            ...

00003639 <map_ice_right>:
    3639:	01 01 03                                            ...

0000363c <map_ice_middle>:
    363c:	01 01 02                                            ...

0000363f <map_ice_left>:
    363f:	01 01 01                                            ...

00003642 <map_splash>:
    3642:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    3652:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    3662:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    3672:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    3682:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

0000368f <map_tile_none>:
    368f:	01 01 00                                            ...

00003692 <__ctors_end>:
    3692:	11 24       	eor	r1, r1
    3694:	1f be       	out	0x3f, r1	; 63
    3696:	cf ef       	ldi	r28, 0xFF	; 255
    3698:	d0 e1       	ldi	r29, 0x10	; 16
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	cd bf       	out	0x3d, r28	; 61

0000369e <__do_copy_data>:
    369e:	15 e0       	ldi	r17, 0x05	; 5
    36a0:	a0 e0       	ldi	r26, 0x00	; 0
    36a2:	b5 e0       	ldi	r27, 0x05	; 5
    36a4:	e4 e9       	ldi	r30, 0x94	; 148
    36a6:	fb e6       	ldi	r31, 0x6B	; 107
    36a8:	02 c0       	rjmp	.+4      	; 0x36ae <__do_copy_data+0x10>
    36aa:	05 90       	lpm	r0, Z+
    36ac:	0d 92       	st	X+, r0
    36ae:	a2 30       	cpi	r26, 0x02	; 2
    36b0:	b1 07       	cpc	r27, r17
    36b2:	d9 f7       	brne	.-10     	; 0x36aa <__do_copy_data+0xc>

000036b4 <__do_clear_bss>:
    36b4:	1e e0       	ldi	r17, 0x0E	; 14
    36b6:	a2 e0       	ldi	r26, 0x02	; 2
    36b8:	b5 e0       	ldi	r27, 0x05	; 5
    36ba:	01 c0       	rjmp	.+2      	; 0x36be <.do_clear_bss_start>

000036bc <.do_clear_bss_loop>:
    36bc:	1d 92       	st	X+, r1

000036be <.do_clear_bss_start>:
    36be:	ad 39       	cpi	r26, 0x9D	; 157
    36c0:	b1 07       	cpc	r27, r17
    36c2:	e1 f7       	brne	.-8      	; 0x36bc <.do_clear_bss_loop>

000036c4 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    36c4:	0e 94 04 21 	call	0x4208	; 0x4208 <wdt_randomize>
#endif

    MCUSR = 0;
    36c8:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    36ca:	88 e1       	ldi	r24, 0x18	; 24
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	80 93 60 00 	sts	0x0060, r24
    36d4:	10 92 60 00 	sts	0x0060, r1
    36d8:	0f be       	out	0x3f, r0	; 63

000036da <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    36da:	0e 94 c1 21 	call	0x4382	; 0x4382 <isEepromFormatted>
    36de:	81 11       	cpse	r24, r1
    36e0:	02 c0       	rjmp	.+4      	; 0x36e6 <Initialize+0xc>
    36e2:	0e 94 9f 21 	call	0x433e	; 0x433e <FormatEeprom>

	cli();
    36e6:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    36ee:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    36f2:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    36f6:	10 92 b8 0c 	sts	0x0CB8, r1
    36fa:	10 92 be 0c 	sts	0x0CBE, r1
    36fe:	10 92 c4 0c 	sts	0x0CC4, r1
    3702:	10 92 ca 0c 	sts	0x0CCA, r1
    3706:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    370a:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    370e:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    3712:	92 e1       	ldi	r25, 0x12	; 18
    3714:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    3718:	90 ee       	ldi	r25, 0xE0	; 224
    371a:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    371e:	94 e1       	ldi	r25, 0x14	; 20
    3720:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    3724:	10 92 ac 0c 	sts	0x0CAC, r1
    3728:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    372c:	10 92 b0 0c 	sts	0x0CB0, r1
    3730:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    3734:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    3738:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <InitializeVideoMode>
    373c:	8e e7       	ldi	r24, 0x7E	; 126
    373e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    3740:	fc 01       	movw	r30, r24
    3742:	25 91       	lpm	r18, Z+
    3744:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    3746:	f9 01       	movw	r30, r18
    3748:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    374a:	30 83       	st	Z, r19
    374c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	8c 3a       	cpi	r24, 0xAC	; 172
    3752:	92 07       	cpc	r25, r18
    3754:	a9 f7       	brne	.-22     	; 0x3740 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    3756:	78 94       	sei
	
	DisplayLogo();
    3758:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <DisplayLogo>
    375c:	0e 94 df 33 	call	0x67be	; 0x67be <main>
    3760:	0c 94 c8 35 	jmp	0x6b90	; 0x6b90 <_exit>

00003764 <__bad_interrupt>:
    3764:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003768 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    3768:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    376a:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    376e:	ad e8       	ldi	r26, 0x8D	; 141
    3770:	aa 95       	dec	r26
    3772:	f1 f7       	brne	.-4      	; 0x3770 <sub_video_mode3+0x8>
    3774:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    3776:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    377a:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    377c:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    377e:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    3780:	02 9f       	mul	r16, r18
		add ZL,r0
    3782:	e0 0d       	add	r30, r0
		adc ZH,r1
    3784:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    3786:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    3788:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    378a:	20 91 6a 0d 	lds	r18, 0x0D6A
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    378e:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    3790:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    3792:	30 0f       	add	r19, r16

		cp r18,r16
    3794:	20 17       	cp	r18, r16
		breq no_ramtiles
    3796:	51 f0       	breq	.+20     	; 0x37ac <no_ramtiles>
		nop
    3798:	00 00       	nop
	...

0000379c <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    379c:	a1 91       	ld	r26, Z+
		ld XH,Z+
    379e:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    37a0:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    37a2:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    37a4:	0c 93       	st	X, r16

		inc r16
    37a6:	03 95       	inc	r16
		cp r16,r18
    37a8:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    37aa:	c0 f3       	brcs	.-16     	; 0x379c <upd_loop>

000037ac <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    37ac:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    37ae:	1a 95       	dec	r17
		brne .-4
    37b0:	f1 f7       	brne	.-4      	; 0x37ae <no_ramtiles+0x2>
		rjmp .
    37b2:	00 c0       	rjmp	.+0      	; 0x37b4 <no_ramtiles+0x8>
		dec r19
    37b4:	3a 95       	dec	r19
		brne 1b
    37b6:	d1 f7       	brne	.-12     	; 0x37ac <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    37b8:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    37ba:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    37bc:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    37c0:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    37c2:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    37c4:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    37c6:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    37c8:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    37cc:	60 2f       	mov	r22, r16
		lsr r16
    37ce:	06 95       	lsr	r16
		lsr r16
    37d0:	06 95       	lsr	r16
		lsr r16 ;/8
    37d2:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    37d4:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    37d8:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    37da:	f1 2e       	mov	r15, r17

        mov r17,r16
    37dc:	10 2f       	mov	r17, r16
        lsr r16
    37de:	06 95       	lsr	r16
        lsr r16
    37e0:	06 95       	lsr	r16
        lsr r16 ;/8
    37e2:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    37e4:	d0 0f       	add	r29, r16
		andi r17,0x7
    37e6:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    37e8:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    37ea:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    37ec:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    37f0:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    37f4:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    37f8:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    37fc:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    37fe:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    3800:	5e 01       	movw	r10, r28
		mov r23,r22
    3802:	76 2f       	mov	r23, r22
		mov r24,r15
    3804:	8f 2d       	mov	r24, r15
		mov r9,r25
    3806:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    3808:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    380c:	20 2f       	mov	r18, r16
		lsr r16
    380e:	06 95       	lsr	r16
		lsr r16
    3810:	06 95       	lsr	r16
		lsr r16			;hi8
    3812:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    3814:	03 95       	inc	r16
		andi r18,7		;lo8
    3816:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    3818:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    381c:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    381e:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    3820:	01 fe       	sbrs	r0, 1
		clr r22
    3822:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    3824:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    3826:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    3828:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    382a:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    382c:	01 fe       	sbrs	r0, 1
		ser r24
    382e:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    3830:	01 fe       	sbrs	r0, 1
		clr r9
    3832:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    3834:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    3836:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    3838:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    383a:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    383c:	80 90 a8 0c 	lds	r8, 0x0CA8

00003840 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    3840:	bc d3       	rcall	.+1912   	; 0x3fba <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    3842:	24 e0       	ldi	r18, 0x04	; 4
    3844:	2a 95       	dec	r18
    3846:	f1 f7       	brne	.-4      	; 0x3844 <next_tile_line+0x4>
    3848:	00 00       	nop
				
		call render_tile_line
    384a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <render_tile_line>

		WAIT r18,58
    384e:	23 e1       	ldi	r18, 0x13	; 19
    3850:	2a 95       	dec	r18
    3852:	f1 f7       	brne	.-4      	; 0x3850 <next_tile_line+0x10>
    3854:	00 00       	nop

		inc r22
    3856:	63 95       	inc	r22
		dec r8
    3858:	8a 94       	dec	r8
		breq text_frame_end
    385a:	09 f1       	breq	.+66     	; 0x389e <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    385c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    385e:	29 f0       	breq	.+10     	; 0x386a <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    3860:	08 e0       	ldi	r16, 0x08	; 8
    3862:	0a 95       	dec	r16
    3864:	f1 f7       	brne	.-4      	; 0x3862 <next_tile_line+0x22>
    3866:	00 00       	nop
		rjmp next_tile_line
    3868:	eb cf       	rjmp	.-42     	; 0x3840 <next_tile_line>

0000386a <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    386a:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    386c:	0c 2f       	mov	r16, r28
		andi r16,0x7
    386e:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    3870:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    3872:	11 f0       	breq	.+4      	; 0x3878 <next_tile_row+0xe>
		inc YL
    3874:	c3 95       	inc	r28
		rjmp 2f
    3876:	02 c0       	rjmp	.+4      	; 0x387c <next_tile_row+0x12>
	1:
		andi YL,0xf8
    3878:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    387a:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    387c:	8a 95       	dec	r24
		brne .+2
    387e:	09 f4       	brne	.+2      	; 0x3882 <next_tile_row+0x18>
		movw YL,r12
    3880:	e6 01       	movw	r28, r12

		dec r19
    3882:	3a 95       	dec	r19
		brne .+2
    3884:	09 f4       	brne	.+2      	; 0x3888 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    3886:	67 2f       	mov	r22, r23
		brne .+2
    3888:	09 f4       	brne	.+2      	; 0x388c <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    388a:	e5 01       	movw	r28, r10
		brne .+2
    388c:	09 f4       	brne	.+2      	; 0x3890 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    388e:	8f 2d       	mov	r24, r15
		brne .+2
    3890:	09 f4       	brne	.+2      	; 0x3894 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    3892:	99 2e       	mov	r9, r25

		brne .+2
    3894:	09 f4       	brne	.+2      	; 0x3898 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    3896:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    3898:	09 f4       	brne	.+2      	; 0x389c <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    389a:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    389c:	d1 cf       	rjmp	.-94     	; 0x3840 <next_tile_line>

0000389e <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    389e:	29 e0       	ldi	r18, 0x09	; 9
    38a0:	2a 95       	dec	r18
    38a2:	f1 f7       	brne	.-4      	; 0x38a0 <text_frame_end+0x2>
    38a4:	00 00       	nop

		rcall hsync_pulse ;145
    38a6:	89 d3       	rcall	.+1810   	; 0x3fba <hsync_pulse>
	
		clr r1
    38a8:	11 24       	eor	r1, r1
		call RestoreBackground
    38aa:	0e 94 80 2c 	call	0x5900	; 0x5900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    38ae:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    38b2:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    38b4:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    38b6:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    38b8:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    38bc:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    38be:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    38c0:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    38c4:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    38c6:	e0 93 36 00 	sts	0x0036, r30

		ret
    38ca:	08 95       	ret

000038cc <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    38cc:	cf 93       	push	r28
		push YH
    38ce:	df 93       	push	r29
		push r23
    38d0:	7f 93       	push	r23
		push r22
    38d2:	6f 93       	push	r22
		push r19
    38d4:	3f 93       	push	r19
		push r13
    38d6:	df 92       	push	r13
		push r12
    38d8:	cf 92       	push	r12
		push r9
    38da:	9f 92       	push	r9
		push r7
    38dc:	7f 92       	push	r7
		push r6
    38de:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    38e0:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    38e2:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    38e4:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    38e6:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    38e8:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    38ea:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    38ec:	00 0d       	add	r16, r0
		adc r17,r1
    38ee:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    38f0:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    38f2:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    38f4:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    38f6:	00 0d       	add	r16, r0
		adc r17,r1
    38f8:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    38fa:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    38fc:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    38fe:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    3900:	69 2d       	mov	r22, r9
		andi r22,0x7		
    3902:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    3904:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    3906:	f8 94       	cli
		breq .+2
    3908:	09 f0       	breq	.+2      	; 0x390c <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    390a:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    390c:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    390e:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    3910:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    3912:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    3914:	02 0c       	add	r0, r2
	    adc r1,r3
    3916:	13 1c       	adc	r1, r3
		movw ZL,r0
    3918:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    391a:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    391c:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    391e:	28 81       	ld	r18, Y
		subi YL,-8
    3920:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    3922:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    3924:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    3926:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    3928:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    392a:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    392c:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    392e:	04 0e       	add	r0, r20
	    adc r1,r21
    3930:	15 1e       	adc	r1, r21
		movw XL,r0
    3932:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    3934:	28 81       	ld	r18, Y
		subi YL,-8
    3936:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    3938:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    393a:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    393c:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    393e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    3940:	a1 01       	movw	r20, r2
		brtc .+2
    3942:	0e f4       	brtc	.+2      	; 0x3946 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    3944:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    3946:	04 0e       	add	r0, r20
	    adc r1,r21
    3948:	15 1e       	adc	r1, r21
		movw ZL,r0
    394a:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    394c:	3f 01       	movw	r6, r30

0000394e <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    394e:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    3950:	a6 0f       	add	r26, r22
		adc XH,r0
    3952:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    3954:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    3956:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    3958:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    395a:	22 c0       	rjmp	.+68     	; 0x39a0 <rom_fine_scroll>

0000395c <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    395c:	00 c0       	rjmp	.+0      	; 0x395e <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    395e:	66 eb       	ldi	r22, 0xB6	; 182
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    3960:	7c e1       	ldi	r23, 0x1C	; 28
		add r22,r0
    3962:	60 0d       	add	r22, r0
		adc r23,r1
    3964:	71 1d       	adc	r23, r1
		push r22
    3966:	6f 93       	push	r22
		push r23	
    3968:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    396a:	08 95       	ret

0000396c <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    396c:	0d 91       	ld	r16, X+
    396e:	c8 95       	lpm
    3970:	08 b9       	out	0x08, r16	; 8
    3972:	0d 91       	ld	r16, X+
    3974:	c8 95       	lpm
    3976:	08 b9       	out	0x08, r16	; 8
    3978:	0d 91       	ld	r16, X+
    397a:	c8 95       	lpm
    397c:	08 b9       	out	0x08, r16	; 8
    397e:	0d 91       	ld	r16, X+
    3980:	c8 95       	lpm
    3982:	08 b9       	out	0x08, r16	; 8
    3984:	0d 91       	ld	r16, X+
    3986:	c8 95       	lpm
    3988:	08 b9       	out	0x08, r16	; 8
    398a:	0d 91       	ld	r16, X+
    398c:	c8 95       	lpm
    398e:	08 b9       	out	0x08, r16	; 8
    3990:	0d 91       	ld	r16, X+
    3992:	c8 95       	lpm
    3994:	08 b9       	out	0x08, r16	; 8
    3996:	0d 91       	ld	r16, X+
    3998:	c8 95       	lpm
    399a:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    399c:	1e f5       	brtc	.+70     	; 0x39e4 <romloop>
		rjmp ramloop
    399e:	40 c0       	rjmp	.+128    	; 0x3a20 <ramloop>

000039a0 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    39a0:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    39a2:	68 ed       	ldi	r22, 0xD8	; 216
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    39a4:	7c e1       	ldi	r23, 0x1C	; 28
		add r22,r0
    39a6:	60 0d       	add	r22, r0
		adc r23,r1
    39a8:	71 1d       	adc	r23, r1
		push r22
    39aa:	6f 93       	push	r22
		push r23	
    39ac:	7f 93       	push	r23
		ret
    39ae:	08 95       	ret

000039b0 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    39b0:	05 91       	lpm	r16, Z+
    39b2:	00 c0       	rjmp	.+0      	; 0x39b4 <rom_fine_scroll_loop+0x4>
    39b4:	08 b9       	out	0x08, r16	; 8
    39b6:	05 91       	lpm	r16, Z+
    39b8:	00 c0       	rjmp	.+0      	; 0x39ba <rom_fine_scroll_loop+0xa>
    39ba:	08 b9       	out	0x08, r16	; 8
    39bc:	05 91       	lpm	r16, Z+
    39be:	00 c0       	rjmp	.+0      	; 0x39c0 <rom_fine_scroll_loop+0x10>
    39c0:	08 b9       	out	0x08, r16	; 8
    39c2:	05 91       	lpm	r16, Z+
    39c4:	00 c0       	rjmp	.+0      	; 0x39c6 <rom_fine_scroll_loop+0x16>
    39c6:	08 b9       	out	0x08, r16	; 8
    39c8:	05 91       	lpm	r16, Z+
    39ca:	00 c0       	rjmp	.+0      	; 0x39cc <rom_fine_scroll_loop+0x1c>
    39cc:	08 b9       	out	0x08, r16	; 8
    39ce:	05 91       	lpm	r16, Z+
    39d0:	00 c0       	rjmp	.+0      	; 0x39d2 <rom_fine_scroll_loop+0x22>
    39d2:	08 b9       	out	0x08, r16	; 8
    39d4:	05 91       	lpm	r16, Z+
    39d6:	00 c0       	rjmp	.+0      	; 0x39d8 <rom_fine_scroll_loop+0x28>
    39d8:	08 b9       	out	0x08, r16	; 8
    39da:	05 91       	lpm	r16, Z+
    39dc:	00 c0       	rjmp	.+0      	; 0x39de <rom_fine_scroll_loop+0x2e>
    39de:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    39e0:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    39e2:	f6 f0       	brts	.+60     	; 0x3a20 <ramloop>

000039e4 <romloop>:

	
	romloop:
	    lpm r16,Z+
    39e4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    39e6:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    39e8:	28 81       	ld	r18, Y

	    lpm r16,Z+
    39ea:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    39ec:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    39ee:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    39f0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    39f2:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    39f4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    39f6:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    39f8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    39fa:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    39fc:	08 f4       	brcc	.+2      	; 0x3a00 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    39fe:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    3a00:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    3a02:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    3a04:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    3a06:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    3a08:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    3a0a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    3a0c:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    3a0e:	1a 95       	dec	r17
   
	    lpm r16,Z+
    3a10:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    3a12:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    3a14:	05 91       	lpm	r16, Z+

		breq end	
    3a16:	39 f1       	breq	.+78     	; 0x3a66 <end>
	    movw ZL,r0   	;copy next tile adress
    3a18:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    3a1a:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    3a1c:	18 f7       	brcc	.-58     	; 0x39e4 <romloop>
	
		rjmp .
    3a1e:	00 c0       	rjmp	.+0      	; 0x3a20 <ramloop>

00003a20 <ramloop>:

	ramloop:

	    ld r16,Z+
    3a20:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    3a22:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    3a24:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    3a26:	01 91       	ld	r16, Z+
		subi YL,-8   		
    3a28:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    3a2a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    3a2c:	23 9f       	mul	r18, r19

	    ld r16,Z+
    3a2e:	01 91       	ld	r16, Z+
		nop
    3a30:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    3a32:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    3a34:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    3a36:	00 c0       	rjmp	.+0      	; 0x3a38 <ramloop+0x18>
   
	    ld r16,Z+
    3a38:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    3a3a:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    3a3c:	08 f0       	brcs	.+2      	; 0x3a40 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    3a3e:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    3a40:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    3a42:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    3a44:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    3a46:	15 1e       	adc	r1, r21
		rjmp .
    3a48:	00 c0       	rjmp	.+0      	; 0x3a4a <ramloop+0x2a>
    
		ld r16,Z+		
    3a4a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    3a4c:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    3a4e:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    3a50:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    3a52:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    3a54:	78 b8       	out	0x08, r7	; 8
		nop
    3a56:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    3a58:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    3a5a:	1a 95       	dec	r17
	    breq end
    3a5c:	21 f0       	breq	.+8      	; 0x3a66 <end>
	
		nop
    3a5e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    3a60:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    3a62:	00 f6       	brcc	.-128    	; 0x39e4 <romloop>
		rjmp ramloop
    3a64:	dd cf       	rjmp	.-70     	; 0x3a20 <ramloop>

00003a66 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    3a66:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    3a68:	27 f5       	brid	.+72     	; 0x3ab2 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    3a6a:	30 f4       	brcc	.+12     	; 0x3a78 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    3a6c:	f0 01       	movw	r30, r0

00003a6e <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    3a6e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    3a70:	08 b9       	out	0x08, r16	; 8
		dec r14
    3a72:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    3a74:	e1 f7       	brne	.-8      	; 0x3a6e <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    3a76:	1f c0       	rjmp	.+62     	; 0x3ab6 <end_fine_scroll_ram>

00003a78 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    3a78:	f6 01       	movw	r30, r12
		nop
    3a7a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    3a7c:	98 b8       	out	0x08, r9	; 8
		dec r14
    3a7e:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    3a80:	c9 f0       	breq	.+50     	; 0x3ab4 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    3a82:	05 91       	lpm	r16, Z+
    3a84:	08 b9       	out	0x08, r16	; 8
    3a86:	ea 94       	dec	r14
    3a88:	a9 f0       	breq	.+42     	; 0x3ab4 <end_fine_scroll_rom>
    3a8a:	05 91       	lpm	r16, Z+
    3a8c:	08 b9       	out	0x08, r16	; 8
    3a8e:	ea 94       	dec	r14
    3a90:	89 f0       	breq	.+34     	; 0x3ab4 <end_fine_scroll_rom>
    3a92:	05 91       	lpm	r16, Z+
    3a94:	08 b9       	out	0x08, r16	; 8
    3a96:	ea 94       	dec	r14
    3a98:	69 f0       	breq	.+26     	; 0x3ab4 <end_fine_scroll_rom>
    3a9a:	05 91       	lpm	r16, Z+
    3a9c:	08 b9       	out	0x08, r16	; 8
    3a9e:	ea 94       	dec	r14
    3aa0:	49 f0       	breq	.+18     	; 0x3ab4 <end_fine_scroll_rom>
    3aa2:	05 91       	lpm	r16, Z+
    3aa4:	08 b9       	out	0x08, r16	; 8
    3aa6:	ea 94       	dec	r14
    3aa8:	29 f0       	breq	.+10     	; 0x3ab4 <end_fine_scroll_rom>
    3aaa:	05 91       	lpm	r16, Z+
    3aac:	08 b9       	out	0x08, r16	; 8
    3aae:	ea 94       	dec	r14
    3ab0:	09 f0       	breq	.+2      	; 0x3ab4 <end_fine_scroll_rom>

00003ab2 <end_fine_scroll>:
	...

00003ab4 <end_fine_scroll_rom>:
	...

00003ab6 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    3ab6:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    3ab8:	08 b9       	out	0x08, r16	; 8

		pop r6
    3aba:	6f 90       	pop	r6
		pop r7
    3abc:	7f 90       	pop	r7
		pop r9
    3abe:	9f 90       	pop	r9
		pop r12
    3ac0:	cf 90       	pop	r12
		pop r13
    3ac2:	df 90       	pop	r13
		pop r19
    3ac4:	3f 91       	pop	r19
		pop r22
    3ac6:	6f 91       	pop	r22
		pop r23
    3ac8:	7f 91       	pop	r23
		pop YH
    3aca:	df 91       	pop	r29
		pop YL
    3acc:	cf 91       	pop	r28

		ret
    3ace:	08 95       	ret

00003ad0 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    3ad0:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    3ad2:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    3ad6:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    3ada:	82 9f       	mul	r24, r18
	add ZL,r0
    3adc:	e0 0d       	add	r30, r0
	adc ZH,r1
    3ade:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    3ae0:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3ae2:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    3ae4:	62 9f       	mul	r22, r18
	add XL,r0
    3ae6:	a0 0d       	add	r26, r0
	adc XH,r1
    3ae8:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    3aea:	15 90       	lpm	r1, Z+
    3aec:	1d 92       	st	X+, r1
    3aee:	15 90       	lpm	r1, Z+
    3af0:	1d 92       	st	X+, r1
    3af2:	15 90       	lpm	r1, Z+
    3af4:	1d 92       	st	X+, r1
    3af6:	15 90       	lpm	r1, Z+
    3af8:	1d 92       	st	X+, r1
    3afa:	15 90       	lpm	r1, Z+
    3afc:	1d 92       	st	X+, r1
    3afe:	15 90       	lpm	r1, Z+
    3b00:	1d 92       	st	X+, r1
    3b02:	15 90       	lpm	r1, Z+
    3b04:	1d 92       	st	X+, r1
    3b06:	15 90       	lpm	r1, Z+
    3b08:	1d 92       	st	X+, r1
    3b0a:	15 90       	lpm	r1, Z+
    3b0c:	1d 92       	st	X+, r1
    3b0e:	15 90       	lpm	r1, Z+
    3b10:	1d 92       	st	X+, r1
    3b12:	15 90       	lpm	r1, Z+
    3b14:	1d 92       	st	X+, r1
    3b16:	15 90       	lpm	r1, Z+
    3b18:	1d 92       	st	X+, r1
    3b1a:	15 90       	lpm	r1, Z+
    3b1c:	1d 92       	st	X+, r1
    3b1e:	15 90       	lpm	r1, Z+
    3b20:	1d 92       	st	X+, r1
    3b22:	15 90       	lpm	r1, Z+
    3b24:	1d 92       	st	X+, r1
    3b26:	15 90       	lpm	r1, Z+
    3b28:	1d 92       	st	X+, r1
    3b2a:	15 90       	lpm	r1, Z+
    3b2c:	1d 92       	st	X+, r1
    3b2e:	15 90       	lpm	r1, Z+
    3b30:	1d 92       	st	X+, r1
    3b32:	15 90       	lpm	r1, Z+
    3b34:	1d 92       	st	X+, r1
    3b36:	15 90       	lpm	r1, Z+
    3b38:	1d 92       	st	X+, r1
    3b3a:	15 90       	lpm	r1, Z+
    3b3c:	1d 92       	st	X+, r1
    3b3e:	15 90       	lpm	r1, Z+
    3b40:	1d 92       	st	X+, r1
    3b42:	15 90       	lpm	r1, Z+
    3b44:	1d 92       	st	X+, r1
    3b46:	15 90       	lpm	r1, Z+
    3b48:	1d 92       	st	X+, r1
    3b4a:	15 90       	lpm	r1, Z+
    3b4c:	1d 92       	st	X+, r1
    3b4e:	15 90       	lpm	r1, Z+
    3b50:	1d 92       	st	X+, r1
    3b52:	15 90       	lpm	r1, Z+
    3b54:	1d 92       	st	X+, r1
    3b56:	15 90       	lpm	r1, Z+
    3b58:	1d 92       	st	X+, r1
    3b5a:	15 90       	lpm	r1, Z+
    3b5c:	1d 92       	st	X+, r1
    3b5e:	15 90       	lpm	r1, Z+
    3b60:	1d 92       	st	X+, r1
    3b62:	15 90       	lpm	r1, Z+
    3b64:	1d 92       	st	X+, r1
    3b66:	15 90       	lpm	r1, Z+
    3b68:	1d 92       	st	X+, r1
    3b6a:	15 90       	lpm	r1, Z+
    3b6c:	1d 92       	st	X+, r1
    3b6e:	15 90       	lpm	r1, Z+
    3b70:	1d 92       	st	X+, r1
    3b72:	15 90       	lpm	r1, Z+
    3b74:	1d 92       	st	X+, r1
    3b76:	15 90       	lpm	r1, Z+
    3b78:	1d 92       	st	X+, r1
    3b7a:	15 90       	lpm	r1, Z+
    3b7c:	1d 92       	st	X+, r1
    3b7e:	15 90       	lpm	r1, Z+
    3b80:	1d 92       	st	X+, r1
    3b82:	15 90       	lpm	r1, Z+
    3b84:	1d 92       	st	X+, r1
    3b86:	15 90       	lpm	r1, Z+
    3b88:	1d 92       	st	X+, r1
    3b8a:	15 90       	lpm	r1, Z+
    3b8c:	1d 92       	st	X+, r1
    3b8e:	15 90       	lpm	r1, Z+
    3b90:	1d 92       	st	X+, r1
    3b92:	15 90       	lpm	r1, Z+
    3b94:	1d 92       	st	X+, r1
    3b96:	15 90       	lpm	r1, Z+
    3b98:	1d 92       	st	X+, r1
    3b9a:	15 90       	lpm	r1, Z+
    3b9c:	1d 92       	st	X+, r1
    3b9e:	15 90       	lpm	r1, Z+
    3ba0:	1d 92       	st	X+, r1
    3ba2:	15 90       	lpm	r1, Z+
    3ba4:	1d 92       	st	X+, r1
    3ba6:	15 90       	lpm	r1, Z+
    3ba8:	1d 92       	st	X+, r1
    3baa:	15 90       	lpm	r1, Z+
    3bac:	1d 92       	st	X+, r1
    3bae:	15 90       	lpm	r1, Z+
    3bb0:	1d 92       	st	X+, r1
    3bb2:	15 90       	lpm	r1, Z+
    3bb4:	1d 92       	st	X+, r1
    3bb6:	15 90       	lpm	r1, Z+
    3bb8:	1d 92       	st	X+, r1
    3bba:	15 90       	lpm	r1, Z+
    3bbc:	1d 92       	st	X+, r1
    3bbe:	15 90       	lpm	r1, Z+
    3bc0:	1d 92       	st	X+, r1
    3bc2:	15 90       	lpm	r1, Z+
    3bc4:	1d 92       	st	X+, r1
    3bc6:	15 90       	lpm	r1, Z+
    3bc8:	1d 92       	st	X+, r1
    3bca:	15 90       	lpm	r1, Z+
    3bcc:	1d 92       	st	X+, r1
    3bce:	15 90       	lpm	r1, Z+
    3bd0:	1d 92       	st	X+, r1
    3bd2:	15 90       	lpm	r1, Z+
    3bd4:	1d 92       	st	X+, r1
    3bd6:	15 90       	lpm	r1, Z+
    3bd8:	1d 92       	st	X+, r1
    3bda:	15 90       	lpm	r1, Z+
    3bdc:	1d 92       	st	X+, r1
    3bde:	15 90       	lpm	r1, Z+
    3be0:	1d 92       	st	X+, r1
    3be2:	15 90       	lpm	r1, Z+
    3be4:	1d 92       	st	X+, r1
    3be6:	15 90       	lpm	r1, Z+
    3be8:	1d 92       	st	X+, r1
	clr r1
    3bea:	11 24       	eor	r1, r1
	ret
    3bec:	08 95       	ret

00003bee <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    3bee:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    3bf0:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    3bf2:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    3bf4:	82 9f       	mul	r24, r18
	add ZL,r0
    3bf6:	e0 0d       	add	r30, r0
	adc ZH,r1
    3bf8:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    3bfa:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3bfc:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    3bfe:	62 9f       	mul	r22, r18
	add XL,r0
    3c00:	a0 0d       	add	r26, r0
	adc XH,r1
    3c02:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    3c04:	11 90       	ld	r1, Z+
    3c06:	1d 92       	st	X+, r1
    3c08:	11 90       	ld	r1, Z+
    3c0a:	1d 92       	st	X+, r1
    3c0c:	11 90       	ld	r1, Z+
    3c0e:	1d 92       	st	X+, r1
    3c10:	11 90       	ld	r1, Z+
    3c12:	1d 92       	st	X+, r1
    3c14:	11 90       	ld	r1, Z+
    3c16:	1d 92       	st	X+, r1
    3c18:	11 90       	ld	r1, Z+
    3c1a:	1d 92       	st	X+, r1
    3c1c:	11 90       	ld	r1, Z+
    3c1e:	1d 92       	st	X+, r1
    3c20:	11 90       	ld	r1, Z+
    3c22:	1d 92       	st	X+, r1
    3c24:	11 90       	ld	r1, Z+
    3c26:	1d 92       	st	X+, r1
    3c28:	11 90       	ld	r1, Z+
    3c2a:	1d 92       	st	X+, r1
    3c2c:	11 90       	ld	r1, Z+
    3c2e:	1d 92       	st	X+, r1
    3c30:	11 90       	ld	r1, Z+
    3c32:	1d 92       	st	X+, r1
    3c34:	11 90       	ld	r1, Z+
    3c36:	1d 92       	st	X+, r1
    3c38:	11 90       	ld	r1, Z+
    3c3a:	1d 92       	st	X+, r1
    3c3c:	11 90       	ld	r1, Z+
    3c3e:	1d 92       	st	X+, r1
    3c40:	11 90       	ld	r1, Z+
    3c42:	1d 92       	st	X+, r1
    3c44:	11 90       	ld	r1, Z+
    3c46:	1d 92       	st	X+, r1
    3c48:	11 90       	ld	r1, Z+
    3c4a:	1d 92       	st	X+, r1
    3c4c:	11 90       	ld	r1, Z+
    3c4e:	1d 92       	st	X+, r1
    3c50:	11 90       	ld	r1, Z+
    3c52:	1d 92       	st	X+, r1
    3c54:	11 90       	ld	r1, Z+
    3c56:	1d 92       	st	X+, r1
    3c58:	11 90       	ld	r1, Z+
    3c5a:	1d 92       	st	X+, r1
    3c5c:	11 90       	ld	r1, Z+
    3c5e:	1d 92       	st	X+, r1
    3c60:	11 90       	ld	r1, Z+
    3c62:	1d 92       	st	X+, r1
    3c64:	11 90       	ld	r1, Z+
    3c66:	1d 92       	st	X+, r1
    3c68:	11 90       	ld	r1, Z+
    3c6a:	1d 92       	st	X+, r1
    3c6c:	11 90       	ld	r1, Z+
    3c6e:	1d 92       	st	X+, r1
    3c70:	11 90       	ld	r1, Z+
    3c72:	1d 92       	st	X+, r1
    3c74:	11 90       	ld	r1, Z+
    3c76:	1d 92       	st	X+, r1
    3c78:	11 90       	ld	r1, Z+
    3c7a:	1d 92       	st	X+, r1
    3c7c:	11 90       	ld	r1, Z+
    3c7e:	1d 92       	st	X+, r1
    3c80:	11 90       	ld	r1, Z+
    3c82:	1d 92       	st	X+, r1
    3c84:	11 90       	ld	r1, Z+
    3c86:	1d 92       	st	X+, r1
    3c88:	11 90       	ld	r1, Z+
    3c8a:	1d 92       	st	X+, r1
    3c8c:	11 90       	ld	r1, Z+
    3c8e:	1d 92       	st	X+, r1
    3c90:	11 90       	ld	r1, Z+
    3c92:	1d 92       	st	X+, r1
    3c94:	11 90       	ld	r1, Z+
    3c96:	1d 92       	st	X+, r1
    3c98:	11 90       	ld	r1, Z+
    3c9a:	1d 92       	st	X+, r1
    3c9c:	11 90       	ld	r1, Z+
    3c9e:	1d 92       	st	X+, r1
    3ca0:	11 90       	ld	r1, Z+
    3ca2:	1d 92       	st	X+, r1
    3ca4:	11 90       	ld	r1, Z+
    3ca6:	1d 92       	st	X+, r1
    3ca8:	11 90       	ld	r1, Z+
    3caa:	1d 92       	st	X+, r1
    3cac:	11 90       	ld	r1, Z+
    3cae:	1d 92       	st	X+, r1
    3cb0:	11 90       	ld	r1, Z+
    3cb2:	1d 92       	st	X+, r1
    3cb4:	11 90       	ld	r1, Z+
    3cb6:	1d 92       	st	X+, r1
    3cb8:	11 90       	ld	r1, Z+
    3cba:	1d 92       	st	X+, r1
    3cbc:	11 90       	ld	r1, Z+
    3cbe:	1d 92       	st	X+, r1
    3cc0:	11 90       	ld	r1, Z+
    3cc2:	1d 92       	st	X+, r1
    3cc4:	11 90       	ld	r1, Z+
    3cc6:	1d 92       	st	X+, r1
    3cc8:	11 90       	ld	r1, Z+
    3cca:	1d 92       	st	X+, r1
    3ccc:	11 90       	ld	r1, Z+
    3cce:	1d 92       	st	X+, r1
    3cd0:	11 90       	ld	r1, Z+
    3cd2:	1d 92       	st	X+, r1
    3cd4:	11 90       	ld	r1, Z+
    3cd6:	1d 92       	st	X+, r1
    3cd8:	11 90       	ld	r1, Z+
    3cda:	1d 92       	st	X+, r1
    3cdc:	11 90       	ld	r1, Z+
    3cde:	1d 92       	st	X+, r1
    3ce0:	11 90       	ld	r1, Z+
    3ce2:	1d 92       	st	X+, r1
    3ce4:	11 90       	ld	r1, Z+
    3ce6:	1d 92       	st	X+, r1
    3ce8:	11 90       	ld	r1, Z+
    3cea:	1d 92       	st	X+, r1
    3cec:	11 90       	ld	r1, Z+
    3cee:	1d 92       	st	X+, r1
    3cf0:	11 90       	ld	r1, Z+
    3cf2:	1d 92       	st	X+, r1
    3cf4:	11 90       	ld	r1, Z+
    3cf6:	1d 92       	st	X+, r1
    3cf8:	11 90       	ld	r1, Z+
    3cfa:	1d 92       	st	X+, r1
    3cfc:	11 90       	ld	r1, Z+
    3cfe:	1d 92       	st	X+, r1
    3d00:	11 90       	ld	r1, Z+
    3d02:	1d 92       	st	X+, r1
	clr r1
    3d04:	11 24       	eor	r1, r1
	ret
    3d06:	08 95       	ret

00003d08 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    3d08:	0f 93       	push	r16
	push r17
    3d0a:	1f 93       	push	r17
	push YL
    3d0c:	cf 93       	push	r28
	push YH
    3d0e:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    3d10:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    3d12:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    3d14:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    3d16:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    3d18:	e0 0d       	add	r30, r0
	adc ZH,r1
    3d1a:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    3d1c:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    3d1e:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    3d20:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    3d22:	8e 9f       	mul	r24, r30
	movw r26,r0
    3d24:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    3d26:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    3d28:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    3d2a:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    3d2c:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    3d2e:	00 24       	eor	r0, r0
	add YL,r1
    3d30:	c1 0d       	add	r28, r1
	adc YH,r0		
    3d32:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    3d34:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    3d36:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    3d38:	ea 0f       	add	r30, r26
	adc ZH,r27
    3d3a:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    3d3c:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3d3e:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    3d40:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    3d42:	69 9f       	mul	r22, r25
	add XL,r0
    3d44:	a0 0d       	add	r26, r0
	adc XH,r1
    3d46:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    3d48:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    3d4a:	dd 27       	eor	r29, r29

	cpi r20,0	
    3d4c:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    3d4e:	51 f4       	brne	.+20     	; 0x3d64 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    3d50:	a2 0f       	add	r26, r18
	adc XH,r1
    3d52:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    3d54:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    3d56:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    3d58:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    3d5a:	11 c0       	rjmp	.+34     	; 0x3d7e <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    3d5c:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    3d5e:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    3d60:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    3d62:	0d c0       	rjmp	.+26     	; 0x3d7e <x_check_end>

00003d64 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    3d64:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    3d66:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    3d68:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    3d6a:	04 c0       	rjmp	.+8      	; 0x3d74 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    3d6c:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    3d6e:	e8 0f       	add	r30, r24
	adc ZH,r1	
    3d70:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    3d72:	05 c0       	rjmp	.+10     	; 0x3d7e <x_check_end>

00003d74 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    3d74:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    3d76:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    3d78:	e2 0f       	add	r30, r18
	adc ZH,r1
    3d7a:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    3d7c:	31 97       	sbiw	r30, 0x01	; 1

00003d7e <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    3d7e:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    3d80:	51 f4       	brne	.+20     	; 0x3d96 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    3d82:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    3d84:	93 9f       	mul	r25, r19
	add XL,r0
    3d86:	a0 0d       	add	r26, r0
	adc XH,r1
    3d88:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    3d8a:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    3d8c:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    3d8e:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    3d90:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    3d94:	0a c0       	rjmp	.+20     	; 0x3daa <y_check_end>

00003d96 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    3d96:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    3d98:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    3d9a:	63 2f       	mov	r22, r19
	dec r22
    3d9c:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    3d9e:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    3da0:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    3da2:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    3da4:	56 9f       	mul	r21, r22
	add ZL,r0
    3da6:	e0 0d       	add	r30, r0
	adc ZH,r1	
    3da8:	f1 1d       	adc	r31, r1

00003daa <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    3daa:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    3dac:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    3dae:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    3db0:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    3db2:	00 ff       	sbrs	r16, 0
	clr r23
    3db4:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    3db6:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    3db8:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    3dba:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    3dbc:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    3dbe:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    3dc0:	59 1b       	sub	r21, r25

00003dc2 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    3dc2:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    3dc4:	48 1b       	sub	r20, r24

00003dc6 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    3dc6:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    3dc8:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    3dca:	2c 93       	st	X, r18
	adiw XL,1
    3dcc:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    3dce:	e6 0f       	add	r30, r22
	adc ZH,r23
    3dd0:	f7 1f       	adc	r31, r23
	dec r20
    3dd2:	4a 95       	dec	r20
	brne x_loop
    3dd4:	c1 f7       	brne	.-16     	; 0x3dc6 <x_loop>

	add ZL,YL		;src+=srcXdiff
    3dd6:	ec 0f       	add	r30, r28
	adc ZH,YH
    3dd8:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    3dda:	a8 0f       	add	r26, r24
	adc XH,r1
    3ddc:	b1 1d       	adc	r27, r1
	dec r21
    3dde:	5a 95       	dec	r21
	brne y_loop
    3de0:	81 f7       	brne	.-32     	; 0x3dc2 <y_loop>


	pop YH
    3de2:	df 91       	pop	r29
	pop YL
    3de4:	cf 91       	pop	r28
	pop r17
    3de6:	1f 91       	pop	r17
	pop r16
    3de8:	0f 91       	pop	r16
	ret
    3dea:	08 95       	ret

00003dec <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    3dec:	0f 92       	push	r0
	push r1
    3dee:	1f 92       	push	r1
	push ZL;2
    3df0:	ef 93       	push	r30
	push ZH;2
    3df2:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    3df4:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    3df6:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    3df8:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    3dfc:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    3dfe:	f1 e0       	ldi	r31, 0x01	; 1

00003e00 <latency_loop>:
latency_loop:
	cp ZL,ZH
    3e00:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    3e02:	00 f0       	brcs	.+0      	; 0x3e04 <latency_loop+0x4>
	inc ZH
    3e04:	f3 95       	inc	r31
	cpi ZH,10
    3e06:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    3e08:	d8 f3       	brcs	.-10     	; 0x3e00 <latency_loop>
	jmp .
    3e0a:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    3e0e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    3e12:	ea 95       	dec	r30
	sts sync_pulse,ZL
    3e14:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    3e18:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    3e1c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    3e1e:	57 c0       	rjmp	.+174    	; 0x3ece <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    3e20:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    3e22:	98 f0       	brcs	.+38     	; 0x3e4a <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    3e24:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    3e26:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    3e2a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    3e2c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    3e30:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    3e32:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    3e34:	26 f4       	brtc	.+8      	; 0x3e3e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    3e36:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    3e38:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <update_sound>
	rjmp sync_end
    3e3c:	b7 c0       	rjmp	.+366    	; 0x3fac <sync_end>

00003e3e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    3e3e:	e5 e1       	ldi	r30, 0x15	; 21
    3e40:	ea 95       	dec	r30
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <sync_pre_eq_no_sound_update+0x2>
    3e44:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    3e46:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    3e48:	b1 c0       	rjmp	.+354    	; 0x3fac <sync_end>

00003e4a <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    3e4a:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    3e4c:	38 f1       	brcs	.+78     	; 0x3e9c <sync_post_eq>

	rjmp .
    3e4e:	00 c0       	rjmp	.+0      	; 0x3e50 <sync_eq+0x6>
	rjmp .
    3e50:	00 c0       	rjmp	.+0      	; 0x3e52 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3e52:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    3e54:	e0 fb       	bst	r30, 0
	ldi ZL,4
    3e56:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    3e58:	16 f4       	brtc	.+4      	; 0x3e5e <sync_eq_skip>
	
	call update_sound
    3e5a:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <update_sound>

00003e5e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    3e5e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    3e60:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    3e64:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    3e66:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    3e6a:	a0 c0       	rjmp	.+320    	; 0x3fac <sync_end>

00003e6c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    3e6c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    3e6e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    3e70:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    3e72:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    3e76:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    3e78:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    3e7a:	00 f0       	brcs	.+0      	; 0x3e7c <__vector_14+0x10>

	cpi ZL,2
    3e7c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    3e7e:	00 f0       	brcs	.+0      	; 0x3e80 <__vector_14+0x14>

	cpi ZL,3
    3e80:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    3e82:	00 f0       	brcs	.+0      	; 0x3e84 <__vector_14+0x18>

	cpi ZL,4
    3e84:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    3e86:	00 f0       	brcs	.+0      	; 0x3e88 <__vector_14+0x1c>

	cpi ZL,5
    3e88:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    3e8a:	00 f0       	brcs	.+0      	; 0x3e8c <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    3e8c:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    3e8e:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    3e90:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    3e94:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    3e96:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    3e98:	ef 91       	pop	r30
	reti
    3e9a:	18 95       	reti

00003e9c <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    3e9c:	00 c0       	rjmp	.+0      	; 0x3e9e <sync_post_eq+0x2>

	bst ZL,0
    3e9e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3ea0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    3ea2:	26 f4       	brtc	.+8      	; 0x3eac <sync_post_eq_no_sound_update>
	ldi ZL,1	
    3ea4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    3ea6:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <update_sound>
	rjmp sync_pre_eq_cont
    3eaa:	05 c0       	rjmp	.+10     	; 0x3eb6 <sync_pre_eq_cont>

00003eac <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    3eac:	e5 e1       	ldi	r30, 0x15	; 21
    3eae:	ea 95       	dec	r30
    3eb0:	f1 f7       	brne	.-4      	; 0x3eae <sync_post_eq_no_sound_update+0x2>
    3eb2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    3eb4:	28 9a       	sbi	0x05, 0	; 5

00003eb6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    3eb6:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    3eba:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    3ebe:	76 c0       	rjmp	.+236    	; 0x3fac <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    3ec0:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    3ec2:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    3ec6:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    3ec8:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    3ecc:	6f c0       	rjmp	.+222    	; 0x3fac <sync_end>

00003ece <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    3ece:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    3ed0:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    3ed4:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    3ed6:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    3eda:	00 c0       	rjmp	.+0      	; 0x3edc <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3edc:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    3ede:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    3ee0:	00 c0       	rjmp	.+0      	; 0x3ee2 <sync_hsync+0x14>
	call update_sound
    3ee2:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    3ee6:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    3ee8:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    3eec:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    3eee:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    3ef2:	ef 17       	cp	r30, r31
	brsh no_render
    3ef4:	d0 f4       	brcc	.+52     	; 0x3f2a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    3ef6:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    3ef8:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    3efc:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    3efe:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    3f02:	f0 19       	sub	r31, r0
	cp ZL,ZH
    3f04:	ef 17       	cp	r30, r31
	brlo no_render
    3f06:	88 f0       	brcs	.+34     	; 0x3f2a <no_render>

	;push r1-r29
	ldi ZL,29
    3f08:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    3f0a:	ff 27       	eor	r31, r31

00003f0c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    3f0c:	00 80       	ld	r0, Z
	push r0
    3f0e:	0f 92       	push	r0
	dec ZL
    3f10:	ea 95       	dec	r30
	brne push_loop	
    3f12:	e1 f7       	brne	.-8      	; 0x3f0c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    3f14:	06 e0       	ldi	r16, 0x06	; 6
    3f16:	0a 95       	dec	r16
    3f18:	f1 f7       	brne	.-4      	; 0x3f16 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    3f1a:	0e 94 b4 1b 	call	0x3768	; 0x3768 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    3f1e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    3f20:	ff 27       	eor	r31, r31

00003f22 <pop_loop>:
pop_loop:
	pop r0
    3f22:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    3f24:	01 92       	st	Z+, r0
	cpi ZL,30
    3f26:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    3f28:	e0 f3       	brcs	.-8      	; 0x3f22 <pop_loop>

00003f2a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    3f2a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    3f2e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    3f30:	09 f0       	breq	.+2      	; 0x3f34 <no_render+0xa>
	rjmp sync_end
    3f32:	3c c0       	rjmp	.+120    	; 0x3fac <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    3f34:	2f 93       	push	r18
	push r19
    3f36:	3f 93       	push	r19
	push r20
    3f38:	4f 93       	push	r20
	push r21
    3f3a:	5f 93       	push	r21
	push r22
    3f3c:	6f 93       	push	r22
	push r23
    3f3e:	7f 93       	push	r23
	push r24
    3f40:	8f 93       	push	r24
	push r25
    3f42:	9f 93       	push	r25
	push r26
    3f44:	af 93       	push	r26
	push r27
    3f46:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    3f48:	78 94       	sei
	clr r1
    3f4a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    3f4c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    3f4e:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    3f52:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    3f54:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    3f58:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    3f5c:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    3f60:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    3f62:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    3f66:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    3f6a:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    3f6e:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    3f72:	e1 15       	cp	r30, r1
	cpc ZH,r1
    3f74:	f1 05       	cpc	r31, r1
	breq .+2 
    3f76:	09 f0       	breq	.+2      	; 0x3f7a <no_render+0x50>
	icall
    3f78:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    3f7a:	0e 94 8f 21 	call	0x431e	; 0x431e <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    3f7e:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    3f82:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <process_music>
	clr r1
    3f86:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    3f88:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    3f8c:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    3f90:	e1 15       	cp	r30, r1
	cpc ZH,r1
    3f92:	f1 05       	cpc	r31, r1
	breq .+2 
    3f94:	09 f0       	breq	.+2      	; 0x3f98 <no_render+0x6e>
	icall
    3f96:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    3f98:	bf 91       	pop	r27
	pop r26
    3f9a:	af 91       	pop	r26
	pop r25
    3f9c:	9f 91       	pop	r25
	pop r24
    3f9e:	8f 91       	pop	r24
	pop r23
    3fa0:	7f 91       	pop	r23
	pop r22
    3fa2:	6f 91       	pop	r22
	pop r21
    3fa4:	5f 91       	pop	r21
	pop r20
    3fa6:	4f 91       	pop	r20
	pop r19
    3fa8:	3f 91       	pop	r19
	pop r18
    3faa:	2f 91       	pop	r18

00003fac <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    3fac:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    3fae:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    3fb0:	ff 91       	pop	r31
	pop ZL
    3fb2:	ef 91       	pop	r30
	pop r1
    3fb4:	1f 90       	pop	r1
	pop r0
    3fb6:	0f 90       	pop	r0
	reti
    3fb8:	18 95       	reti

00003fba <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3fba:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    3fbc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    3fbe:	00 c0       	rjmp	.+0      	; 0x3fc0 <hsync_pulse+0x6>
	call update_sound
    3fc0:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <update_sound>

	lds ZL,sync_pulse
    3fc4:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    3fc8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    3fca:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    3fce:	08 95       	ret

00003fd0 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    3fd0:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    3fd4:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    3fd6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ProcessMusic>
#endif

	ret
    3fda:	08 95       	ret

00003fdc <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    3fdc:	0f 93       	push	r16
	push r17
    3fde:	1f 93       	push	r17
	push r18
    3fe0:	2f 93       	push	r18
	push r28
    3fe2:	cf 93       	push	r28
	push r29
    3fe4:	df 93       	push	r29

	mov r18,ZL
    3fe6:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    3fe8:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    3fec:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    3ff0:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    3ff2:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    3ff6:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    3ffa:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    3ffe:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4000:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    4002:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    4006:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    400a:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    400e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    4010:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    4012:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    4014:	d0 2d       	mov	r29, r0
	nop
    4016:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    4018:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    401c:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    4020:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    4022:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    4026:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    402a:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    402e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4030:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    4032:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    4036:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    403a:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    403e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4040:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    4042:	20 ff       	sbrs	r18, 0
	rjmp .
    4044:	00 c0       	rjmp	.+0      	; 0x4046 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    4046:	01 03       	mulsu	r16, r17
	clr r0
    4048:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    404a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    404c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    404e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    4050:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    4054:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    4058:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    405a:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    405e:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    4062:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    4066:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    4068:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    406a:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    406e:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    4072:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    4076:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    4078:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    407a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    407c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    407e:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    4082:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    4086:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    408a:	ea 95       	dec	r30
	brpl ch4_no_shift	
    408c:	92 f4       	brpl	.+36     	; 0x40b2 <ch4_no_shift>

	lds ZH,tr4_params
    408e:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    4092:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    4094:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    4096:	00 2e       	mov	r0, r16
	lsr r0
    4098:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    409a:	00 26       	eor	r0, r16
	bst r0,0
    409c:	00 fa       	bst	r0, 0
	lsr r17
    409e:	16 95       	lsr	r17
	ror r16
    40a0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    40a2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    40a4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    40a6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    40a8:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    40ac:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    40b0:	03 c0       	rjmp	.+6      	; 0x40b8 <ch4_end>

000040b2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    40b2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    40b4:	1a 95       	dec	r17
	brne .-4
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <ch4_no_shift+0x2>

000040b8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    40b8:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    40bc:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    40be:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    40c0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    40c2:	21 ff       	sbrs	r18, 1
	rjmp .
    40c4:	00 c0       	rjmp	.+0      	; 0x40c6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    40c6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    40c8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    40ca:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    40ce:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    40d0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    40d2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    40d4:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    40d6:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    40da:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    40de:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    40e0:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    40e4:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    40e8:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    40ec:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    40ee:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    40f2:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    40f4:	f0 1f       	adc	r31, r16

	movw r16,ZL
    40f6:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    40f8:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    40fc:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    4100:	00 19       	sub	r16, r0
	sbc r17,r1
    4102:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    4104:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    4108:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    410c:	e0 15       	cp	r30, r0
	cpc ZH,r1
    410e:	f1 05       	cpc	r31, r1
	brlo .+2
    4110:	08 f0       	brcs	.+2      	; 0x4114 <ch4_end+0x5c>
	movw ZL,r16
    4112:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    4114:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    4118:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    411c:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    411e:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    4122:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    4124:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4126:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    4128:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    412a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    412c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    412e:	d0 05       	cpc	r29, r0
	brlt .+2
    4130:	0c f0       	brlt	.+2      	; 0x4134 <ch4_end+0x7c>
	ldi r28,127
    4132:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    4134:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    4136:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    4138:	d0 05       	cpc	r29, r0
	brge .+2
    413a:	0c f4       	brge	.+2      	; 0x413e <ch4_end+0x86>
	ldi r28,-128
    413c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    413e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    4140:	c0 93 b3 00 	sts	0x00B3, r28

00004144 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    4144:	df 91       	pop	r29
	pop r28
    4146:	cf 91       	pop	r28
	pop r18
    4148:	2f 91       	pop	r18
	pop r17
    414a:	1f 91       	pop	r17
	pop r16
    414c:	0f 91       	pop	r16
	
	ret
    414e:	08 95       	ret

00004150 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    4150:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    4154:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    4158:	08 95       	ret

0000415a <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    415a:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    415c:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    415e:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    4160:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    4162:	6c e1       	ldi	r22, 0x1C	; 28

00004164 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    4164:	6d 93       	st	X+, r22
	sbiw r30,1
    4166:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    4168:	e9 f7       	brne	.-6      	; 0x4164 <fill_vram_loop>

	clr r1
    416a:	11 24       	eor	r1, r1

	ret
    416c:	08 95       	ret

0000416e <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    416e:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    4172:	45 0f       	add	r20, r21
	rjmp SetTile	
    4174:	00 c0       	rjmp	.+0      	; 0x4176 <SetTile>

00004176 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    4176:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    4178:	76 2f       	mov	r23, r22
	lsr r22
    417a:	66 95       	lsr	r22
	lsr r22
    417c:	66 95       	lsr	r22
	lsr r22			;y>>3
    417e:	66 95       	lsr	r22
	ldi r18,8		
    4180:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    4182:	82 9f       	mul	r24, r18
	movw XL,r0
    4184:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    4186:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    4188:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    418a:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    418c:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    418e:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    4190:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    4192:	4c 93       	st	X, r20

	clr r1
    4194:	11 24       	eor	r1, r1

	ret
    4196:	08 95       	ret

00004198 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    4198:	80 93 98 0c 	sts	0x0C98, r24
	ret
    419c:	08 95       	ret

0000419e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    419e:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    41a2:	90 93 97 0c 	sts	0x0C97, r25
	ret
    41a6:	08 95       	ret

000041a8 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    41a8:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    41ac:	81 70       	andi	r24, 0x01	; 1
	ret
    41ae:	08 95       	ret

000041b0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    41b0:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    41b4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    41b6:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    41ba:	08 95       	ret

000041bc <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    41bc:	88 23       	and	r24, r24
	brne rj_p2
    41be:	29 f4       	brne	.+10     	; 0x41ca <rj_p2>
		
	lds r24,joypad1_status_lo
    41c0:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    41c4:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    41c8:	08 95       	ret

000041ca <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    41ca:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    41ce:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    41d2:	08 95       	ret

000041d4 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    41d4:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    41d6:	7a 95       	dec	r23
	brne .-4 ;~1 us
    41d8:	f1 f7       	brne	.-4      	; 0x41d6 <WaitUs+0x2>
	nop
    41da:	00 00       	nop
	sbiw r24,1
    41dc:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    41de:	d1 f7       	brne	.-12     	; 0x41d4 <WaitUs>

	ret
    41e0:	08 95       	ret

000041e2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    41e2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    41e4:	fe cf       	rjmp	.-4      	; 0x41e2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    41e6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    41e8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    41ea:	60 bd       	out	0x20, r22	; 32
   cli
    41ec:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    41ee:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    41f0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    41f2:	78 94       	sei
   ret
    41f4:	08 95       	ret

000041f6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    41f6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    41f8:	fe cf       	rjmp	.-4      	; 0x41f6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    41fa:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    41fc:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    41fe:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    4200:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    4202:	80 b5       	in	r24, 0x20	; 32
   sei
    4204:	78 94       	sei
   ret
    4206:	08 95       	ret

00004208 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    4208:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    420a:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    420e:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    4212:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    4216:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    421a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    421e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    4222:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    4226:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    422a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    422e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    4230:	80 93 81 00 	sts	0x0081, r24

		cli
    4234:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    4236:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    4238:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    423c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    423e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    4242:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    4244:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    4248:	90 93 60 00 	sts	0x0060, r25
	
		sei
    424c:	78 94       	sei

0000424e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    424e:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    4252:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    4254:	e0 f3       	brcs	.-8      	; 0x424e <wait>

		ret
    4256:	08 95       	ret

00004258 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    4258:	0f 93       	push	r16
		push r17
    425a:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    425c:	0f b7       	in	r16, 0x3f	; 63
		push r16
    425e:	0f 93       	push	r16

		lds r16,sync_pulse
    4260:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    4264:	03 95       	inc	r16
		sts sync_pulse,r16
    4266:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    426a:	00 fd       	sbrc	r16, 0
		rjmp 1f
    426c:	08 c0       	rjmp	.+16     	; 0x427e <__vector_8+0x26>
		lds r17,random_value
    426e:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4272:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    4276:	10 27       	eor	r17, r16
		sts random_value,r17
    4278:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    427c:	07 c0       	rjmp	.+14     	; 0x428c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    427e:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4282:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    4286:	10 27       	eor	r17, r16
		sts random_value+1,r17
    4288:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    428c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    428e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    4292:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    4294:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    4296:	1f 91       	pop	r17
		pop r16
    4298:	0f 91       	pop	r16
		reti
    429a:	18 95       	reti

0000429c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    429c:	98 e0       	ldi	r25, 0x08	; 8
    429e:	88 e1       	ldi	r24, 0x18	; 24
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	a8 95       	wdr
    42a6:	80 93 60 00 	sts	0x0060, r24
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	90 93 60 00 	sts	0x0060, r25
	while(1);
    42b0:	ff cf       	rjmp	.-2      	; 0x42b0 <SoftReset+0x14>

000042b2 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    42b2:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    42b4:	c8 95       	lpm
    42b6:	c8 95       	lpm
		Wait200ns();
    42b8:	c8 95       	lpm
    42ba:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    42bc:	12 98       	cbi	0x02, 2	; 2
    42be:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    42c0:	80 e0       	ldi	r24, 0x00	; 0
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    42c8:	36 95       	lsr	r19
    42ca:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    42cc:	96 95       	lsr	r25
    42ce:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    42d0:	c8 95       	lpm
    42d2:	c8 95       	lpm
			Wait200ns();
    42d4:	c8 95       	lpm
    42d6:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    42d8:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    42da:	00 9b       	sbis	0x00, 0	; 0
    42dc:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    42de:	01 9b       	sbis	0x00, 1	; 0
    42e0:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    42e2:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    42e4:	c8 95       	lpm
    42e6:	c8 95       	lpm
			Wait200ns();
    42e8:	c8 95       	lpm
    42ea:	c8 95       	lpm
    42ec:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    42ee:	61 f7       	brne	.-40     	; 0x42c8 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    42f0:	30 93 aa 0c 	sts	0x0CAA, r19
    42f4:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    42f8:	90 93 ae 0c 	sts	0x0CAE, r25
    42fc:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    4300:	80 91 a9 0c 	lds	r24, 0x0CA9
    4304:	90 91 aa 0c 	lds	r25, 0x0CAA
    4308:	0f 97       	sbiw	r24, 0x0f	; 15
    430a:	31 f0       	breq	.+12     	; 0x4318 <ReadButtons+0x66>
    430c:	80 91 ad 0c 	lds	r24, 0x0CAD
    4310:	90 91 ae 0c 	lds	r25, 0x0CAE
    4314:	0f 97       	sbiw	r24, 0x0f	; 15
    4316:	11 f4       	brne	.+4      	; 0x431c <ReadButtons+0x6a>
		SoftReset();
    4318:	0e 94 4e 21 	call	0x429c	; 0x429c <SoftReset>
    431c:	08 95       	ret

0000431e <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    431e:	10 92 e4 0c 	sts	0x0CE4, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    4322:	00 99       	sbic	0x00, 0	; 0
    4324:	03 c0       	rjmp	.+6      	; 0x432c <ReadControllers+0xe>
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	80 93 e4 0c 	sts	0x0CE4, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    432c:	01 99       	sbic	0x00, 1	; 0
    432e:	05 c0       	rjmp	.+10     	; 0x433a <ReadControllers+0x1c>
    4330:	80 91 e4 0c 	lds	r24, 0x0CE4
    4334:	82 60       	ori	r24, 0x02	; 2
    4336:	80 93 e4 0c 	sts	0x0CE4, r24
			
	//read the standard buttons
	ReadButtons();
    433a:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <ReadButtons>

0000433e <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	c0 e0       	ldi	r28, 0x00	; 0
    4344:	d0 e0       	ldi	r29, 0x00	; 0
    4346:	fe 01       	movw	r30, r28
    4348:	e4 55       	subi	r30, 0x54	; 84
    434a:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    434c:	64 91       	lpm	r22, Z
    434e:	ce 01       	movw	r24, r28
    4350:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <WriteEeprom>
    4354:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    4356:	c0 32       	cpi	r28, 0x20	; 32
    4358:	d1 05       	cpc	r29, r1
    435a:	a9 f7       	brne	.-22     	; 0x4346 <FormatEeprom+0x8>
    435c:	c0 e2       	ldi	r28, 0x20	; 32
    435e:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    4360:	6f ef       	ldi	r22, 0xFF	; 255
    4362:	ce 01       	movw	r24, r28
    4364:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    4368:	6f ef       	ldi	r22, 0xFF	; 255
    436a:	ce 01       	movw	r24, r28
    436c:	01 96       	adiw	r24, 0x01	; 1
    436e:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    4372:	a0 96       	adiw	r28, 0x20	; 32
    4374:	c1 15       	cp	r28, r1
    4376:	88 e0       	ldi	r24, 0x08	; 8
    4378:	d8 07       	cpc	r29, r24
    437a:	91 f7       	brne	.-28     	; 0x4360 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    437c:	df 91       	pop	r29
    437e:	cf 91       	pop	r28
    4380:	08 95       	ret

00004382 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    4382:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <ReadEeprom>
    438c:	c8 2f       	mov	r28, r24
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <ReadEeprom>
    4396:	28 2f       	mov	r18, r24
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	32 2f       	mov	r19, r18
    439c:	22 27       	eor	r18, r18
    439e:	2c 0f       	add	r18, r28
    43a0:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	2a 35       	cpi	r18, 0x5A	; 90
    43a6:	35 45       	sbci	r19, 0x55	; 85
    43a8:	09 f0       	breq	.+2      	; 0x43ac <isEepromFormatted+0x2a>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
}
    43ac:	cf 91       	pop	r28
    43ae:	08 95       	ret

000043b0 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    43b0:	fc 01       	movw	r30, r24
    43b2:	67 87       	std	Z+15, r22	; 0x0f
    43b4:	08 95       	ret

000043b6 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    43b6:	e8 eb       	ldi	r30, 0xB8	; 184
    43b8:	fc e0       	ldi	r31, 0x0C	; 12
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	91 e0       	ldi	r25, 0x01	; 1
    43be:	95 8b       	std	Z+21, r25	; 0x15
    43c0:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    43c2:	63 8b       	std	Z+19, r22	; 0x13
    43c4:	08 95       	ret

000043c6 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    43c6:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    43c8:	90 81       	ld	r25, Z
    43ca:	9f 75       	andi	r25, 0x5F	; 95
    43cc:	90 83       	st	Z, r25
    43ce:	08 95       	ret

000043d0 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    43d0:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    43d2:	90 81       	ld	r25, Z
    43d4:	90 64       	ori	r25, 0x40	; 64
    43d6:	90 83       	st	Z, r25
    43d8:	08 95       	ret

000043da <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    43da:	fc 01       	movw	r30, r24
    43dc:	66 87       	std	Z+14, r22	; 0x0e
    43de:	08 95       	ret

000043e0 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    43e0:	fc 01       	movw	r30, r24
    43e2:	62 87       	std	Z+10, r22	; 0x0a
    43e4:	08 95       	ret

000043e6 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    43e6:	fc 01       	movw	r30, r24
    43e8:	63 87       	std	Z+11, r22	; 0x0b
    43ea:	08 95       	ret

000043ec <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
    43f0:	ec 01       	movw	r28, r24
    43f2:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    43f4:	29 81       	ldd	r18, Y+1	; 0x01
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	f9 01       	movw	r30, r18
    43fa:	ee 0f       	add	r30, r30
    43fc:	ff 1f       	adc	r31, r31
    43fe:	e8 5f       	subi	r30, 0xF8	; 248
    4400:	f2 4b       	sbci	r31, 0xB2	; 178
    4402:	65 91       	lpm	r22, Z+
    4404:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    4406:	f9 01       	movw	r30, r18
    4408:	e4 0f       	add	r30, r20
    440a:	f1 1d       	adc	r31, r1
    440c:	47 fd       	sbrc	r20, 7
    440e:	fa 95       	dec	r31
    4410:	ee 0f       	add	r30, r30
    4412:	ff 1f       	adc	r31, r31
    4414:	e8 5f       	subi	r30, 0xF8	; 248
    4416:	f2 4b       	sbci	r31, 0xB2	; 178
    4418:	85 91       	lpm	r24, Z+
    441a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    441c:	86 1b       	sub	r24, r22
    441e:	97 0b       	sbc	r25, r23
    4420:	68 85       	ldd	r22, Y+8	; 0x08
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	0e 94 2c 34 	call	0x6858	; 0x6858 <__divmodhi4>
	if(delta==0)delta++;
    4428:	61 15       	cp	r22, r1
    442a:	71 05       	cpc	r23, r1
    442c:	11 f4       	brne	.+4      	; 0x4432 <PatchCommand11+0x46>
    442e:	61 e0       	ldi	r22, 0x01	; 1
    4430:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    4432:	ea 81       	ldd	r30, Y+2	; 0x02
    4434:	86 e0       	ldi	r24, 0x06	; 6
    4436:	e8 9f       	mul	r30, r24
    4438:	f0 01       	movw	r30, r0
    443a:	11 24       	eor	r1, r1
    443c:	e8 54       	subi	r30, 0x48	; 72
    443e:	f3 4f       	sbci	r31, 0xF3	; 243
    4440:	81 81       	ldd	r24, Z+1	; 0x01
    4442:	92 81       	ldd	r25, Z+2	; 0x02
    4444:	86 0f       	add	r24, r22
    4446:	97 1f       	adc	r25, r23
    4448:	92 83       	std	Z+2, r25	; 0x02
    444a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    444c:	7e 83       	std	Y+6, r23	; 0x06
    444e:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    4450:	88 81       	ld	r24, Y
    4452:	88 60       	ori	r24, 0x08	; 8
    4454:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	48 0f       	add	r20, r24
    445a:	4f 83       	std	Y+7, r20	; 0x07
}
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	08 95       	ret

00004462 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    4462:	fc 01       	movw	r30, r24
    4464:	60 87       	std	Z+8, r22	; 0x08
    4466:	08 95       	ret

00004468 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    4468:	fc 01       	movw	r30, r24
    446a:	64 83       	std	Z+4, r22	; 0x04
    446c:	08 95       	ret

0000446e <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    446e:	fc 01       	movw	r30, r24
    4470:	82 81       	ldd	r24, Z+2	; 0x02
    4472:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <SetMixerWave>

00004476 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    4476:	fc 01       	movw	r30, r24
	track->note+=param;
    4478:	91 81       	ldd	r25, Z+1	; 0x01
    447a:	69 0f       	add	r22, r25
    447c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    447e:	82 81       	ldd	r24, Z+2	; 0x02
    4480:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <SetMixerNote>

00004484 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    4484:	fc 01       	movw	r30, r24
	track->note-=param;
    4486:	91 81       	ldd	r25, Z+1	; 0x01
    4488:	96 1b       	sub	r25, r22
    448a:	69 2f       	mov	r22, r25
    448c:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    448e:	82 81       	ldd	r24, Z+2	; 0x02
    4490:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <SetMixerNote>

00004494 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    4494:	1f 93       	push	r17
    4496:	cf 93       	push	r28
    4498:	df 93       	push	r29
    449a:	ec 01       	movw	r28, r24
    449c:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    449e:	8a 81       	ldd	r24, Y+2	; 0x02
    44a0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <SetMixerNote>
	track->note=param;
    44a4:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    44a6:	88 81       	ld	r24, Y
    44a8:	87 7f       	andi	r24, 0xF7	; 247
    44aa:	88 83       	st	Y, r24
}
    44ac:	df 91       	pop	r29
    44ae:	cf 91       	pop	r28
    44b0:	1f 91       	pop	r17
    44b2:	08 95       	ret

000044b4 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    44b4:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    44b6:	14 96       	adiw	r26, 0x04	; 4
    44b8:	8c 91       	ld	r24, X
    44ba:	14 97       	sbiw	r26, 0x04	; 4
    44bc:	88 23       	and	r24, r24
    44be:	19 f1       	breq	.+70     	; 0x4506 <PatchCommand14+0x52>
    44c0:	55 96       	adiw	r26, 0x15	; 21
    44c2:	2d 91       	ld	r18, X+
    44c4:	3c 91       	ld	r19, X
    44c6:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    44c8:	66 23       	and	r22, r22
    44ca:	79 f0       	breq	.+30     	; 0x44ea <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    44cc:	77 27       	eor	r23, r23
    44ce:	67 fd       	sbrc	r22, 7
    44d0:	70 95       	com	r23
    44d2:	6f 5f       	subi	r22, 0xFF	; 255
    44d4:	7f 4f       	sbci	r23, 0xFF	; 255
    44d6:	ab 01       	movw	r20, r22
    44d8:	44 0f       	add	r20, r20
    44da:	55 1f       	adc	r21, r21
    44dc:	64 0f       	add	r22, r20
    44de:	75 1f       	adc	r23, r21
    44e0:	26 1b       	sub	r18, r22
    44e2:	37 0b       	sbc	r19, r23
    44e4:	09 c0       	rjmp	.+18     	; 0x44f8 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    44e6:	ef 3f       	cpi	r30, 0xFF	; 255
    44e8:	39 f0       	breq	.+14     	; 0x44f8 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    44ea:	23 50       	subi	r18, 0x03	; 3
    44ec:	31 09       	sbc	r19, r1
    44ee:	f9 01       	movw	r30, r18
    44f0:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    44f2:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    44f4:	ed 30       	cpi	r30, 0x0D	; 13
    44f6:	b9 f7       	brne	.-18     	; 0x44e6 <PatchCommand14+0x32>
    44f8:	56 96       	adiw	r26, 0x16	; 22
    44fa:	3c 93       	st	X, r19
    44fc:	2e 93       	st	-X, r18
    44fe:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    4500:	81 50       	subi	r24, 0x01	; 1
    4502:	14 96       	adiw	r26, 0x04	; 4
    4504:	8c 93       	st	X, r24
    4506:	08 95       	ret

00004508 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    4508:	90 93 5d 0d 	sts	0x0D5D, r25
    450c:	80 93 5c 0d 	sts	0x0D5C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    4510:	8f e6       	ldi	r24, 0x6F	; 111
    4512:	80 93 5f 0d 	sts	0x0D5F, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    4516:	10 92 b6 0c 	sts	0x0CB6, r1
    451a:	e7 ef       	ldi	r30, 0xF7	; 247
    451c:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    451e:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    4520:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    4522:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    4524:	28 e1       	ldi	r18, 0x18	; 24
    4526:	df 01       	movw	r26, r30
    4528:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    452a:	8c 93       	st	X, r24
    452c:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    452e:	9c 93       	st	X, r25
    4530:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    4532:	1c 92       	st	X, r1
    4534:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    4536:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    4538:	10 82       	st	Z, r1
    453a:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    453c:	2c 93       	st	X, r18
    453e:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    4540:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    4542:	8f 5f       	subi	r24, 0xFF	; 255
    4544:	77 96       	adiw	r30, 0x17	; 23
    4546:	85 30       	cpi	r24, 0x05	; 5
    4548:	71 f7       	brne	.-36     	; 0x4526 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    454a:	08 95       	ret

0000454c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    454c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    454e:	ed 91       	ld	r30, X+
    4550:	fc 91       	ld	r31, X
    4552:	11 97       	sbiw	r26, 0x01	; 1
    4554:	9f 01       	movw	r18, r30
    4556:	2f 5f       	subi	r18, 0xFF	; 255
    4558:	3f 4f       	sbci	r19, 0xFF	; 255
    455a:	11 96       	adiw	r26, 0x01	; 1
    455c:	3c 93       	st	X, r19
    455e:	2e 93       	st	-X, r18
    4560:	e4 91       	lpm	r30, Z
    4562:	e7 fd       	sbrc	r30, 7
    4564:	03 c0       	rjmp	.+6      	; 0x456c <ReadVarLen+0x20>
    4566:	8e 2f       	mov	r24, r30
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	08 95       	ret
    {
       value &= 0x7F;
    456c:	ef 77       	andi	r30, 0x7F	; 127
    456e:	8e 2f       	mov	r24, r30
    4570:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    4572:	96 95       	lsr	r25
    4574:	98 2f       	mov	r25, r24
    4576:	88 27       	eor	r24, r24
    4578:	97 95       	ror	r25
    457a:	87 95       	ror	r24
    457c:	2f 5f       	subi	r18, 0xFF	; 255
    457e:	3f 4f       	sbci	r19, 0xFF	; 255
    4580:	f9 01       	movw	r30, r18
    4582:	31 97       	sbiw	r30, 0x01	; 1
    4584:	e4 91       	lpm	r30, Z
    4586:	4e 2f       	mov	r20, r30
    4588:	4f 77       	andi	r20, 0x7F	; 127
    458a:	84 0f       	add	r24, r20
    458c:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    458e:	e7 fd       	sbrc	r30, 7
    4590:	f0 cf       	rjmp	.-32     	; 0x4572 <ReadVarLen+0x26>
    4592:	2d 93       	st	X+, r18
    4594:	3c 93       	st	X, r19
    }


    return value;
}
    4596:	08 95       	ret

00004598 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    4598:	ef 92       	push	r14
    459a:	ff 92       	push	r15
    459c:	0f 93       	push	r16
    459e:	1f 93       	push	r17
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	1f 92       	push	r1
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	7c 01       	movw	r14, r24
    45ac:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    45ae:	fc 01       	movw	r30, r24
    45b0:	80 81       	ld	r24, Z
    45b2:	08 2f       	mov	r16, r24
    45b4:	00 1f       	adc	r16, r16
    45b6:	00 27       	eor	r16, r16
    45b8:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    45ba:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    45bc:	9f ef       	ldi	r25, 0xFF	; 255
    45be:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    45c0:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    45c2:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    45c4:	87 7b       	andi	r24, 0xB7	; 183
    45c6:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    45c8:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    45ca:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    45cc:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    45ce:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    45d0:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	83 30       	cpi	r24, 0x03	; 3
    45d6:	69 f4       	brne	.+26     	; 0x45f2 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    45d8:	01 11       	cpse	r16, r1
    45da:	01 c0       	rjmp	.+2      	; 0x45de <TriggerCommon+0x46>
    45dc:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	91 e0       	ldi	r25, 0x01	; 1
    45e2:	90 93 cd 0c 	sts	0x0CCD, r25
    45e6:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	80 93 cb 0c 	sts	0x0CCB, r24
    45f0:	39 c0       	rjmp	.+114    	; 0x4664 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    45f2:	84 30       	cpi	r24, 0x04	; 4
    45f4:	69 f5       	brne	.+90     	; 0x4650 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    45f6:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    45fa:	80 91 5c 0d 	lds	r24, 0x0D5C
    45fe:	90 91 5d 0d 	lds	r25, 0x0D5D
    4602:	f9 e0       	ldi	r31, 0x09	; 9
    4604:	6f 9f       	mul	r22, r31
    4606:	80 0d       	add	r24, r0
    4608:	91 1d       	adc	r25, r1
    460a:	11 24       	eor	r1, r1
    460c:	fc 01       	movw	r30, r24
    460e:	31 96       	adiw	r30, 0x01	; 1
    4610:	a5 91       	lpm	r26, Z+
    4612:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    4614:	b0 93 d5 0c 	sts	0x0CD5, r27
    4618:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    461c:	ac 01       	movw	r20, r24
    461e:	49 5f       	subi	r20, 0xF9	; 249
    4620:	5f 4f       	sbci	r21, 0xFF	; 255
    4622:	fa 01       	movw	r30, r20
    4624:	65 91       	lpm	r22, Z+
    4626:	74 91       	lpm	r23, Z
    4628:	05 96       	adiw	r24, 0x05	; 5
    462a:	fc 01       	movw	r30, r24
    462c:	85 91       	lpm	r24, Z+
    462e:	94 91       	lpm	r25, Z
    4630:	68 1b       	sub	r22, r24
    4632:	79 0b       	sbc	r23, r25
    4634:	70 93 d7 0c 	sts	0x0CD7, r23
    4638:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    463c:	fa 01       	movw	r30, r20
    463e:	85 91       	lpm	r24, Z+
    4640:	94 91       	lpm	r25, Z
    4642:	a8 0f       	add	r26, r24
    4644:	b9 1f       	adc	r27, r25
    4646:	b0 93 d9 0c 	sts	0x0CD9, r27
    464a:	a0 93 d8 0c 	sts	0x0CD8, r26
    464e:	05 c0       	rjmp	.+10     	; 0x465a <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	29 83       	std	Y+1, r18	; 0x01
    4654:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <SetMixerWave>
			SetMixerNote(track->channel,note);
    4658:	29 81       	ldd	r18, Y+1	; 0x01
    465a:	62 2f       	mov	r22, r18
    465c:	f7 01       	movw	r30, r14
    465e:	82 81       	ldd	r24, Z+2	; 0x02
    4660:	0e 94 04 26 	call	0x4c08	; 0x4c08 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    4664:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    4666:	00 23       	and	r16, r16
    4668:	11 f0       	breq	.+4      	; 0x466e <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    466a:	11 8b       	std	Z+17, r17	; 0x11
    466c:	01 c0       	rjmp	.+2      	; 0x4670 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    466e:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    4670:	e0 91 5c 0d 	lds	r30, 0x0D5C
    4674:	f0 91 5d 0d 	lds	r31, 0x0D5D
    4678:	39 e0       	ldi	r19, 0x09	; 9
    467a:	13 9f       	mul	r17, r19
    467c:	e0 0d       	add	r30, r0
    467e:	f1 1d       	adc	r31, r1
    4680:	11 24       	eor	r1, r1
    4682:	33 96       	adiw	r30, 0x03	; 3
    4684:	85 91       	lpm	r24, Z+
    4686:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    4688:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    468a:	00 97       	sbiw	r24, 0x00	; 0
    468c:	19 f4       	brne	.+6      	; 0x4694 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    468e:	16 8a       	std	Z+22, r1	; 0x16
    4690:	15 8a       	std	Z+21, r1	; 0x15
    4692:	08 c0       	rjmp	.+16     	; 0x46a4 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    4694:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    4696:	fc 01       	movw	r30, r24
    4698:	24 91       	lpm	r18, Z
    469a:	f7 01       	movw	r30, r14
    469c:	22 8b       	std	Z+18, r18	; 0x12
    469e:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    46a0:	96 8b       	std	Z+22, r25	; 0x16
    46a2:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    46a4:	0f 90       	pop	r0
    46a6:	df 91       	pop	r29
    46a8:	cf 91       	pop	r28
    46aa:	1f 91       	pop	r17
    46ac:	0f 91       	pop	r16
    46ae:	ff 90       	pop	r15
    46b0:	ef 90       	pop	r14
    46b2:	08 95       	ret

000046b4 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    46b8:	e0 91 5c 0d 	lds	r30, 0x0D5C
    46bc:	f0 91 5d 0d 	lds	r31, 0x0D5D
    46c0:	99 e0       	ldi	r25, 0x09	; 9
    46c2:	89 9f       	mul	r24, r25
    46c4:	e0 0d       	add	r30, r0
    46c6:	f1 1d       	adc	r31, r1
    46c8:	11 24       	eor	r1, r1
    46ca:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    46cc:	e1 30       	cpi	r30, 0x01	; 1
    46ce:	e9 f0       	breq	.+58     	; 0x470a <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    46d0:	e2 30       	cpi	r30, 0x02	; 2
    46d2:	e9 f0       	breq	.+58     	; 0x470e <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    46d4:	20 91 fe 0c 	lds	r18, 0x0CFE
    46d8:	27 ff       	sbrs	r18, 7
    46da:	1d c0       	rjmp	.+58     	; 0x4716 <TriggerFx+0x62>
    46dc:	20 91 0f 0d 	lds	r18, 0x0D0F
    46e0:	28 13       	cpse	r18, r24
    46e2:	02 c0       	rjmp	.+4      	; 0x46e8 <TriggerFx+0x34>
    46e4:	41 11       	cpse	r20, r1
    46e6:	17 c0       	rjmp	.+46     	; 0x4716 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    46e8:	20 91 15 0d 	lds	r18, 0x0D15
    46ec:	27 ff       	sbrs	r18, 7
    46ee:	11 c0       	rjmp	.+34     	; 0x4712 <TriggerFx+0x5e>
    46f0:	20 91 26 0d 	lds	r18, 0x0D26
    46f4:	28 13       	cpse	r18, r24
    46f6:	02 c0       	rjmp	.+4      	; 0x46fc <TriggerFx+0x48>
    46f8:	41 11       	cpse	r20, r1
    46fa:	0b c0       	rjmp	.+22     	; 0x4712 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    46fc:	20 91 12 0d 	lds	r18, 0x0D12
    4700:	90 91 29 0d 	lds	r25, 0x0D29
    4704:	92 17       	cp	r25, r18
    4706:	28 f4       	brcc	.+10     	; 0x4712 <TriggerFx+0x5e>
    4708:	06 c0       	rjmp	.+12     	; 0x4716 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    470a:	c3 e0       	ldi	r28, 0x03	; 3
    470c:	05 c0       	rjmp	.+10     	; 0x4718 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    470e:	c4 e0       	ldi	r28, 0x04	; 4
    4710:	03 c0       	rjmp	.+6      	; 0x4718 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    4712:	c2 e0       	ldi	r28, 0x02	; 2
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    4716:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    4718:	97 e1       	ldi	r25, 0x17	; 23
    471a:	c9 9f       	mul	r28, r25
    471c:	e0 01       	movw	r28, r0
    471e:	11 24       	eor	r1, r1
    4720:	c9 51       	subi	r28, 0x19	; 25
    4722:	d3 4f       	sbci	r29, 0xF3	; 243
    4724:	90 e8       	ldi	r25, 0x80	; 128
    4726:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    4728:	1e 8a       	std	Y+22, r1	; 0x16
    472a:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    472c:	20 e5       	ldi	r18, 0x50	; 80
    472e:	46 2f       	mov	r20, r22
    4730:	68 2f       	mov	r22, r24
    4732:	ce 01       	movw	r24, r28
    4734:	0e 94 cc 22 	call	0x4598	; 0x4598 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    4738:	88 81       	ld	r24, Y
    473a:	80 62       	ori	r24, 0x20	; 32
    473c:	88 83       	st	Y, r24
}
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	08 95       	ret

00004744 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    4748:	a8 2f       	mov	r26, r24
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	97 e1       	ldi	r25, 0x17	; 23
    474e:	89 9f       	mul	r24, r25
    4750:	f0 01       	movw	r30, r0
    4752:	11 24       	eor	r1, r1
    4754:	e9 51       	subi	r30, 0x19	; 25
    4756:	f3 4f       	sbci	r31, 0xF3	; 243
    4758:	80 81       	ld	r24, Z
    475a:	85 ff       	sbrs	r24, 5
    475c:	02 c0       	rjmp	.+4      	; 0x4762 <TriggerNote+0x1e>
    475e:	87 fd       	sbrc	r24, 7
    4760:	2e c0       	rjmp	.+92     	; 0x47be <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    4762:	21 11       	cpse	r18, r1
    4764:	18 c0       	rjmp	.+48     	; 0x4796 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    4766:	97 e1       	ldi	r25, 0x17	; 23
    4768:	9a 9f       	mul	r25, r26
    476a:	f0 01       	movw	r30, r0
    476c:	9b 9f       	mul	r25, r27
    476e:	f0 0d       	add	r31, r0
    4770:	11 24       	eor	r1, r1
    4772:	e9 51       	subi	r30, 0x19	; 25
    4774:	f3 4f       	sbci	r31, 0xF3	; 243
    4776:	97 85       	ldd	r25, Z+15	; 0x0f
    4778:	91 11       	cpse	r25, r1
    477a:	02 c0       	rjmp	.+4      	; 0x4780 <TriggerNote+0x3c>
    477c:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    477e:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    4780:	97 e1       	ldi	r25, 0x17	; 23
    4782:	9a 9f       	mul	r25, r26
    4784:	f0 01       	movw	r30, r0
    4786:	9b 9f       	mul	r25, r27
    4788:	f0 0d       	add	r31, r0
    478a:	11 24       	eor	r1, r1
    478c:	e9 51       	subi	r30, 0x19	; 25
    478e:	f3 4f       	sbci	r31, 0xF3	; 243
    4790:	8f 7b       	andi	r24, 0xBF	; 191
    4792:	80 83       	st	Z, r24
    4794:	14 c0       	rjmp	.+40     	; 0x47be <TriggerNote+0x7a>
    4796:	82 2f       	mov	r24, r18
    4798:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    479a:	97 e1       	ldi	r25, 0x17	; 23
    479c:	9a 9f       	mul	r25, r26
    479e:	e0 01       	movw	r28, r0
    47a0:	9b 9f       	mul	r25, r27
    47a2:	d0 0d       	add	r29, r0
    47a4:	11 24       	eor	r1, r1
    47a6:	c9 51       	subi	r28, 0x19	; 25
    47a8:	d3 4f       	sbci	r29, 0xF3	; 243
    47aa:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    47ac:	1e 8a       	std	Y+22, r1	; 0x16
    47ae:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    47b0:	48 2f       	mov	r20, r24
    47b2:	ce 01       	movw	r24, r28
    47b4:	0e 94 cc 22 	call	0x4598	; 0x4598 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    47b8:	88 81       	ld	r24, Y
    47ba:	80 62       	ori	r24, 0x20	; 32
    47bc:	88 83       	st	Y, r24
		}

	}
}
    47be:	df 91       	pop	r29
    47c0:	cf 91       	pop	r28
    47c2:	08 95       	ret

000047c4 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    47c4:	6f 92       	push	r6
    47c6:	7f 92       	push	r7
    47c8:	8f 92       	push	r8
    47ca:	9f 92       	push	r9
    47cc:	af 92       	push	r10
    47ce:	bf 92       	push	r11
    47d0:	cf 92       	push	r12
    47d2:	df 92       	push	r13
    47d4:	ef 92       	push	r14
    47d6:	ff 92       	push	r15
    47d8:	0f 93       	push	r16
    47da:	1f 93       	push	r17
    47dc:	cf 93       	push	r28
    47de:	df 93       	push	r29
    47e0:	c7 ee       	ldi	r28, 0xE7	; 231
    47e2:	dc e0       	ldi	r29, 0x0C	; 12
    47e4:	08 eb       	ldi	r16, 0xB8	; 184
    47e6:	1c e0       	ldi	r17, 0x0C	; 12
    47e8:	d8 01       	movw	r26, r16
    47ea:	9e 01       	movw	r18, r28
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	50 e0       	ldi	r21, 0x00	; 0
    47f0:	ca 01       	movw	r24, r20
    47f2:	89 51       	subi	r24, 0x19	; 25
    47f4:	93 4f       	sbci	r25, 0xF3	; 243
    47f6:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    47f8:	fc 01       	movw	r30, r24
    47fa:	87 85       	ldd	r24, Z+15	; 0x0f
    47fc:	88 23       	and	r24, r24
    47fe:	91 f0       	breq	.+36     	; 0x4824 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    4800:	66 85       	ldd	r22, Z+14	; 0x0e
    4802:	99 27       	eor	r25, r25
    4804:	87 fd       	sbrc	r24, 7
    4806:	90 95       	com	r25
    4808:	86 0f       	add	r24, r22
    480a:	91 1d       	adc	r25, r1
    480c:	8f 3f       	cpi	r24, 0xFF	; 255
    480e:	91 05       	cpc	r25, r1
    4810:	19 f0       	breq	.+6      	; 0x4818 <ProcessMusic+0x54>
    4812:	14 f0       	brlt	.+4      	; 0x4818 <ProcessMusic+0x54>
    4814:	8f ef       	ldi	r24, 0xFF	; 255
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	97 ff       	sbrs	r25, 7
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <ProcessMusic+0x5c>
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    4820:	f6 01       	movw	r30, r12
    4822:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    4824:	f9 01       	movw	r30, r18
    4826:	f0 80       	ld	r15, Z
    4828:	f3 fe       	sbrs	r15, 3
    482a:	2a c0       	rjmp	.+84     	; 0x4880 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    482c:	65 81       	ldd	r22, Z+5	; 0x05
    482e:	76 81       	ldd	r23, Z+6	; 0x06
    4830:	11 96       	adiw	r26, 0x01	; 1
    4832:	8d 91       	ld	r24, X+
    4834:	9c 91       	ld	r25, X
    4836:	12 97       	sbiw	r26, 0x02	; 2
    4838:	86 0f       	add	r24, r22
    483a:	97 1f       	adc	r25, r23
    483c:	12 96       	adiw	r26, 0x02	; 2
    483e:	9c 93       	st	X, r25
    4840:	8e 93       	st	-X, r24
    4842:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    4844:	f6 01       	movw	r30, r12
    4846:	e7 80       	ldd	r14, Z+7	; 0x07
    4848:	ee 2d       	mov	r30, r14
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	ee 0f       	add	r30, r30
    484e:	ff 1f       	adc	r31, r31
    4850:	e8 5f       	subi	r30, 0xF8	; 248
    4852:	f2 4b       	sbci	r31, 0xB2	; 178
    4854:	c5 90       	lpm	r12, Z+
    4856:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    4858:	16 16       	cp	r1, r22
    485a:	17 06       	cpc	r1, r23
    485c:	24 f4       	brge	.+8      	; 0x4866 <ProcessMusic+0xa2>
    485e:	8c 15       	cp	r24, r12
    4860:	9d 05       	cpc	r25, r13
    4862:	30 f4       	brcc	.+12     	; 0x4870 <ProcessMusic+0xac>
    4864:	0d c0       	rjmp	.+26     	; 0x4880 <ProcessMusic+0xbc>
    4866:	67 2b       	or	r22, r23
    4868:	59 f0       	breq	.+22     	; 0x4880 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    486a:	c8 16       	cp	r12, r24
    486c:	d9 06       	cpc	r13, r25
    486e:	40 f0       	brcs	.+16     	; 0x4880 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    4870:	12 96       	adiw	r26, 0x02	; 2
    4872:	dc 92       	st	X, r13
    4874:	ce 92       	st	-X, r12
    4876:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    4878:	8f 2d       	mov	r24, r15
    487a:	87 7f       	andi	r24, 0xF7	; 247
    487c:	f9 01       	movw	r30, r18
    487e:	80 83       	st	Z, r24
    4880:	49 5e       	subi	r20, 0xE9	; 233
    4882:	5f 4f       	sbci	r21, 0xFF	; 255
    4884:	29 5e       	subi	r18, 0xE9	; 233
    4886:	3f 4f       	sbci	r19, 0xFF	; 255
    4888:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    488a:	43 37       	cpi	r20, 0x73	; 115
    488c:	51 05       	cpc	r21, r1
    488e:	09 f0       	breq	.+2      	; 0x4892 <ProcessMusic+0xce>
    4890:	af cf       	rjmp	.-162    	; 0x47f0 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    4892:	80 91 b6 0c 	lds	r24, 0x0CB6
    4896:	88 23       	and	r24, r24
    4898:	09 f4       	brne	.+2      	; 0x489c <ProcessMusic+0xd8>
    489a:	cc c0       	rjmp	.+408    	; 0x4a34 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    489c:	57 e1       	ldi	r21, 0x17	; 23
    489e:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    48a0:	80 91 5a 0d 	lds	r24, 0x0D5A
    48a4:	90 91 5b 0d 	lds	r25, 0x0D5B
    48a8:	20 91 60 0d 	lds	r18, 0x0D60
    48ac:	30 91 61 0d 	lds	r19, 0x0D61
    48b0:	82 17       	cp	r24, r18
    48b2:	93 07       	cpc	r25, r19
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <ProcessMusic+0xf4>
    48b6:	b9 c0       	rjmp	.+370    	; 0x4a2a <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    48b8:	20 91 63 0d 	lds	r18, 0x0D63
    48bc:	30 91 64 0d 	lds	r19, 0x0D64
    48c0:	b9 01       	movw	r22, r18
    48c2:	6f 5f       	subi	r22, 0xFF	; 255
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255
    48c6:	70 93 64 0d 	sts	0x0D64, r23
    48ca:	60 93 63 0d 	sts	0x0D63, r22
    48ce:	f9 01       	movw	r30, r18
    48d0:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    48d2:	4f 3f       	cpi	r20, 0xFF	; 255
    48d4:	79 f5       	brne	.+94     	; 0x4934 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    48d6:	a9 01       	movw	r20, r18
    48d8:	4e 5f       	subi	r20, 0xFE	; 254
    48da:	5f 4f       	sbci	r21, 0xFF	; 255
    48dc:	50 93 64 0d 	sts	0x0D64, r21
    48e0:	40 93 63 0d 	sts	0x0D63, r20
    48e4:	fb 01       	movw	r30, r22
    48e6:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    48e8:	6f 32       	cpi	r22, 0x2F	; 47
    48ea:	19 f4       	brne	.+6      	; 0x48f2 <ProcessMusic+0x12e>
						playSong=false;
    48ec:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    48f0:	9c c0       	rjmp	.+312    	; 0x4a2a <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    48f2:	66 30       	cpi	r22, 0x06	; 6
    48f4:	09 f0       	breq	.+2      	; 0x48f8 <ProcessMusic+0x134>
    48f6:	8c c0       	rjmp	.+280    	; 0x4a10 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    48f8:	fa 01       	movw	r30, r20
    48fa:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    48fc:	c9 01       	movw	r24, r18
    48fe:	04 96       	adiw	r24, 0x04	; 4
    4900:	90 93 64 0d 	sts	0x0D64, r25
    4904:	80 93 63 0d 	sts	0x0D63, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    4908:	f9 01       	movw	r30, r18
    490a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    490c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    490e:	e3 35       	cpi	r30, 0x53	; 83
    4910:	29 f4       	brne	.+10     	; 0x491c <ProcessMusic+0x158>
							loopStart=songPos;
    4912:	90 93 66 0d 	sts	0x0D66, r25
    4916:	80 93 65 0d 	sts	0x0D65, r24
    491a:	7a c0       	rjmp	.+244    	; 0x4a10 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    491c:	e5 34       	cpi	r30, 0x45	; 69
    491e:	09 f0       	breq	.+2      	; 0x4922 <ProcessMusic+0x15e>
    4920:	77 c0       	rjmp	.+238    	; 0x4a10 <ProcessMusic+0x24c>
							songPos=loopStart;
    4922:	80 91 65 0d 	lds	r24, 0x0D65
    4926:	90 91 66 0d 	lds	r25, 0x0D66
    492a:	90 93 64 0d 	sts	0x0D64, r25
    492e:	80 93 63 0d 	sts	0x0D63, r24
    4932:	6e c0       	rjmp	.+220    	; 0x4a10 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    4934:	47 fd       	sbrc	r20, 7
    4936:	40 93 5e 0d 	sts	0x0D5E, r20
					channel=lastStatus&0x0f;
    493a:	90 91 5e 0d 	lds	r25, 0x0D5E
    493e:	89 2f       	mov	r24, r25
    4940:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    4942:	47 ff       	sbrs	r20, 7
    4944:	08 c0       	rjmp	.+16     	; 0x4956 <ProcessMusic+0x192>
    4946:	2e 5f       	subi	r18, 0xFE	; 254
    4948:	3f 4f       	sbci	r19, 0xFF	; 255
    494a:	30 93 64 0d 	sts	0x0D64, r19
    494e:	20 93 63 0d 	sts	0x0D63, r18
    4952:	fb 01       	movw	r30, r22
    4954:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    4956:	90 7f       	andi	r25, 0xF0	; 240
    4958:	90 3b       	cpi	r25, 0xB0	; 176
    495a:	e1 f0       	breq	.+56     	; 0x4994 <ProcessMusic+0x1d0>
    495c:	90 3c       	cpi	r25, 0xC0	; 192
    495e:	09 f4       	brne	.+2      	; 0x4962 <ProcessMusic+0x19e>
    4960:	51 c0       	rjmp	.+162    	; 0x4a04 <ProcessMusic+0x240>
    4962:	90 39       	cpi	r25, 0x90	; 144
    4964:	09 f0       	breq	.+2      	; 0x4968 <ProcessMusic+0x1a4>
    4966:	54 c0       	rjmp	.+168    	; 0x4a10 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    4968:	e0 91 63 0d 	lds	r30, 0x0D63
    496c:	f0 91 64 0d 	lds	r31, 0x0D64
    4970:	9f 01       	movw	r18, r30
    4972:	2f 5f       	subi	r18, 0xFF	; 255
    4974:	3f 4f       	sbci	r19, 0xFF	; 255
    4976:	30 93 64 0d 	sts	0x0D64, r19
    497a:	20 93 63 0d 	sts	0x0D63, r18
    497e:	24 91       	lpm	r18, Z
    4980:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    4982:	f8 9e       	mul	r15, r24
    4984:	f0 01       	movw	r30, r0
    4986:	11 24       	eor	r1, r1
    4988:	e9 51       	subi	r30, 0x19	; 25
    498a:	f3 4f       	sbci	r31, 0xF3	; 243
    498c:	60 89       	ldd	r22, Z+16	; 0x10
    498e:	0e 94 a2 23 	call	0x4744	; 0x4744 <TriggerNote>
    4992:	3e c0       	rjmp	.+124    	; 0x4a10 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    4994:	e0 91 63 0d 	lds	r30, 0x0D63
    4998:	f0 91 64 0d 	lds	r31, 0x0D64
    499c:	9f 01       	movw	r18, r30
    499e:	2f 5f       	subi	r18, 0xFF	; 255
    49a0:	3f 4f       	sbci	r19, 0xFF	; 255
    49a2:	30 93 64 0d 	sts	0x0D64, r19
    49a6:	20 93 63 0d 	sts	0x0D63, r18
    49aa:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    49ac:	47 30       	cpi	r20, 0x07	; 7
    49ae:	49 f4       	brne	.+18     	; 0x49c2 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    49b0:	f8 9e       	mul	r15, r24
    49b2:	d0 01       	movw	r26, r0
    49b4:	11 24       	eor	r1, r1
    49b6:	a9 51       	subi	r26, 0x19	; 25
    49b8:	b3 4f       	sbci	r27, 0xF3	; 243
    49ba:	ee 0f       	add	r30, r30
    49bc:	1c 96       	adiw	r26, 0x0c	; 12
    49be:	ec 93       	st	X, r30
    49c0:	27 c0       	rjmp	.+78     	; 0x4a10 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    49c2:	4b 30       	cpi	r20, 0x0B	; 11
    49c4:	49 f4       	brne	.+18     	; 0x49d8 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    49c6:	f8 9e       	mul	r15, r24
    49c8:	d0 01       	movw	r26, r0
    49ca:	11 24       	eor	r1, r1
    49cc:	a9 51       	subi	r26, 0x19	; 25
    49ce:	b3 4f       	sbci	r27, 0xF3	; 243
    49d0:	ee 0f       	add	r30, r30
    49d2:	13 96       	adiw	r26, 0x03	; 3
    49d4:	ec 93       	st	X, r30
    49d6:	1c c0       	rjmp	.+56     	; 0x4a10 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    49d8:	4c 35       	cpi	r20, 0x5C	; 92
    49da:	49 f4       	brne	.+18     	; 0x49ee <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    49dc:	f8 9e       	mul	r15, r24
    49de:	d0 01       	movw	r26, r0
    49e0:	11 24       	eor	r1, r1
    49e2:	a9 51       	subi	r26, 0x19	; 25
    49e4:	b3 4f       	sbci	r27, 0xF3	; 243
    49e6:	ee 0f       	add	r30, r30
    49e8:	1a 96       	adiw	r26, 0x0a	; 10
    49ea:	ec 93       	st	X, r30
    49ec:	11 c0       	rjmp	.+34     	; 0x4a10 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    49ee:	44 36       	cpi	r20, 0x64	; 100
    49f0:	79 f4       	brne	.+30     	; 0x4a10 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    49f2:	f8 9e       	mul	r15, r24
    49f4:	d0 01       	movw	r26, r0
    49f6:	11 24       	eor	r1, r1
    49f8:	a9 51       	subi	r26, 0x19	; 25
    49fa:	b3 4f       	sbci	r27, 0xF3	; 243
    49fc:	ee 0f       	add	r30, r30
    49fe:	1b 96       	adiw	r26, 0x0b	; 11
    4a00:	ec 93       	st	X, r30
    4a02:	06 c0       	rjmp	.+12     	; 0x4a10 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    4a04:	f8 9e       	mul	r15, r24
    4a06:	f0 01       	movw	r30, r0
    4a08:	11 24       	eor	r1, r1
    4a0a:	e9 51       	subi	r30, 0x19	; 25
    4a0c:	f3 4f       	sbci	r31, 0xF3	; 243
    4a0e:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    4a10:	83 e6       	ldi	r24, 0x63	; 99
    4a12:	9d e0       	ldi	r25, 0x0D	; 13
    4a14:	0e 94 a6 22 	call	0x454c	; 0x454c <ReadVarLen>
    4a18:	90 93 61 0d 	sts	0x0D61, r25
    4a1c:	80 93 60 0d 	sts	0x0D60, r24
				currDeltaTime=0;
    4a20:	10 92 5b 0d 	sts	0x0D5B, r1
    4a24:	10 92 5a 0d 	sts	0x0D5A, r1
    4a28:	3b cf       	rjmp	.-394    	; 0x48a0 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    4a2a:	01 96       	adiw	r24, 0x01	; 1
    4a2c:	90 93 5b 0d 	sts	0x0D5B, r25
    4a30:	80 93 5a 0d 	sts	0x0D5A, r24
    4a34:	90 ef       	ldi	r25, 0xF0	; 240
    4a36:	a9 2e       	mov	r10, r25
    4a38:	9c e0       	ldi	r25, 0x0C	; 12
    4a3a:	b9 2e       	mov	r11, r25
    4a3c:	2a ef       	ldi	r18, 0xFA	; 250
    4a3e:	c2 2e       	mov	r12, r18
    4a40:	2c e0       	ldi	r18, 0x0C	; 12
    4a42:	d2 2e       	mov	r13, r18
    4a44:	3b ef       	ldi	r19, 0xFB	; 251
    4a46:	e3 2e       	mov	r14, r19
    4a48:	3c e0       	ldi	r19, 0x0C	; 12
    4a4a:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    4a4c:	66 24       	eor	r6, r6
    4a4e:	6a 94       	dec	r6
    4a50:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    4a52:	88 81       	ld	r24, Y
    4a54:	85 ff       	sbrs	r24, 5
    4a56:	42 c0       	rjmp	.+132    	; 0x4adc <ProcessMusic+0x318>
    4a58:	2d 89       	ldd	r18, Y+21	; 0x15
    4a5a:	3e 89       	ldd	r19, Y+22	; 0x16
    4a5c:	23 2b       	or	r18, r19
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <ProcessMusic+0x29e>
    4a60:	3d c0       	rjmp	.+122    	; 0x4adc <ProcessMusic+0x318>
    4a62:	86 fd       	sbrc	r24, 6
    4a64:	3b c0       	rjmp	.+118    	; 0x4adc <ProcessMusic+0x318>
    4a66:	47 01       	movw	r8, r14
    4a68:	f2 e0       	ldi	r31, 0x02	; 2
    4a6a:	8f 1a       	sub	r8, r31
    4a6c:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    4a6e:	d6 01       	movw	r26, r12
    4a70:	9c 91       	ld	r25, X
    4a72:	f4 01       	movw	r30, r8
    4a74:	80 81       	ld	r24, Z
    4a76:	98 13       	cpse	r25, r24
    4a78:	2e c0       	rjmp	.+92     	; 0x4ad6 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    4a7a:	ed 89       	ldd	r30, Y+21	; 0x15
    4a7c:	fe 89       	ldd	r31, Y+22	; 0x16
    4a7e:	bf 01       	movw	r22, r30
    4a80:	6f 5f       	subi	r22, 0xFF	; 255
    4a82:	7f 4f       	sbci	r23, 0xFF	; 255
    4a84:	7e 8b       	std	Y+22, r23	; 0x16
    4a86:	6d 8b       	std	Y+21, r22	; 0x15
    4a88:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    4a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a8c:	31 f4       	brne	.+12     	; 0x4a9a <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    4a8e:	88 81       	ld	r24, Y
    4a90:	8f 77       	andi	r24, 0x7F	; 127
    4a92:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    4a94:	1e 8a       	std	Y+22, r1	; 0x16
    4a96:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    4a98:	1e c0       	rjmp	.+60     	; 0x4ad6 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    4a9a:	9f 01       	movw	r18, r30
    4a9c:	2e 5f       	subi	r18, 0xFE	; 254
    4a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa0:	3e 8b       	std	Y+22, r19	; 0x16
    4aa2:	2d 8b       	std	Y+21, r18	; 0x15
    4aa4:	fb 01       	movw	r30, r22
    4aa6:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    4aa8:	e8 2f       	mov	r30, r24
    4aaa:	f0 e0       	ldi	r31, 0x00	; 0
    4aac:	ee 0f       	add	r30, r30
    4aae:	ff 1f       	adc	r31, r31
    4ab0:	e4 53       	subi	r30, 0x34	; 52
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	25 91       	lpm	r18, Z+
    4ab6:	34 91       	lpm	r19, Z
    4ab8:	ce 01       	movw	r24, r28
    4aba:	f9 01       	movw	r30, r18
    4abc:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    4abe:	ed 89       	ldd	r30, Y+21	; 0x15
    4ac0:	fe 89       	ldd	r31, Y+22	; 0x16
    4ac2:	cf 01       	movw	r24, r30
    4ac4:	01 96       	adiw	r24, 0x01	; 1
    4ac6:	9e 8b       	std	Y+22, r25	; 0x16
    4ac8:	8d 8b       	std	Y+21, r24	; 0x15
    4aca:	e4 91       	lpm	r30, Z
    4acc:	d4 01       	movw	r26, r8
    4ace:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    4ad0:	f6 01       	movw	r30, r12
    4ad2:	10 82       	st	Z, r1
    4ad4:	cc cf       	rjmp	.-104    	; 0x4a6e <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    4ad6:	9f 5f       	subi	r25, 0xFF	; 255
    4ad8:	d6 01       	movw	r26, r12
    4ada:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    4adc:	98 81       	ld	r25, Y
    4ade:	95 ff       	sbrs	r25, 5
    4ae0:	6c c0       	rjmp	.+216    	; 0x4bba <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    4ae2:	f7 01       	movw	r30, r14
    4ae4:	80 81       	ld	r24, Z
    4ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ae8:	11 f0       	breq	.+4      	; 0x4aee <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    4aea:	8f 5f       	subi	r24, 0xFF	; 255
    4aec:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    4aee:	97 fd       	sbrc	r25, 7
    4af0:	04 c0       	rjmp	.+8      	; 0x4afa <ProcessMusic+0x336>
    4af2:	f7 01       	movw	r30, r14
    4af4:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    4af6:	90 81       	ld	r25, Z
    4af8:	01 c0       	rjmp	.+2      	; 0x4afc <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    4afa:	9f ef       	ldi	r25, 0xFF	; 255
    4afc:	f7 01       	movw	r30, r14
    4afe:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    4b00:	80 81       	ld	r24, Z
    4b02:	88 23       	and	r24, r24
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <ProcessMusic+0x344>
    4b06:	4e c0       	rjmp	.+156    	; 0x4ba4 <ProcessMusic+0x3e0>
    4b08:	31 96       	adiw	r30, 0x01	; 1
    4b0a:	50 81       	ld	r21, Z
    4b0c:	55 23       	and	r21, r21
    4b0e:	09 f4       	brne	.+2      	; 0x4b12 <ProcessMusic+0x34e>
    4b10:	49 c0       	rjmp	.+146    	; 0x4ba4 <ProcessMusic+0x3e0>
    4b12:	99 23       	and	r25, r25
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <ProcessMusic+0x354>
    4b16:	46 c0       	rjmp	.+140    	; 0x4ba4 <ProcessMusic+0x3e0>
    4b18:	40 91 5f 0d 	lds	r20, 0x0D5F
    4b1c:	44 23       	and	r20, r20
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <ProcessMusic+0x35e>
    4b20:	41 c0       	rjmp	.+130    	; 0x4ba4 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    4b22:	89 9f       	mul	r24, r25
    4b24:	c0 01       	movw	r24, r0
    4b26:	11 24       	eor	r1, r1
    4b28:	93 95       	inc	r25
				uVol>>=8;
    4b2a:	89 2f       	mov	r24, r25
    4b2c:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    4b2e:	58 9f       	mul	r21, r24
    4b30:	90 01       	movw	r18, r0
    4b32:	59 9f       	mul	r21, r25
    4b34:	30 0d       	add	r19, r0
    4b36:	11 24       	eor	r1, r1
    4b38:	c9 01       	movw	r24, r18
    4b3a:	93 95       	inc	r25
				uVol>>=8;
    4b3c:	89 2f       	mov	r24, r25
    4b3e:	99 27       	eor	r25, r25
    4b40:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    4b42:	50 81       	ld	r21, Z
    4b44:	58 9f       	mul	r21, r24
    4b46:	90 01       	movw	r18, r0
    4b48:	59 9f       	mul	r21, r25
    4b4a:	30 0d       	add	r19, r0
    4b4c:	11 24       	eor	r1, r1
    4b4e:	33 95       	inc	r19
					uVol>>=8;
    4b50:	23 2f       	mov	r18, r19
    4b52:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    4b54:	42 9f       	mul	r20, r18
    4b56:	c0 01       	movw	r24, r0
    4b58:	43 9f       	mul	r20, r19
    4b5a:	90 0d       	add	r25, r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	93 95       	inc	r25
				uVol>>=8;
    4b60:	89 2f       	mov	r24, r25
    4b62:	99 27       	eor	r25, r25
    4b64:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    4b66:	20 81       	ld	r18, Z
    4b68:	22 23       	and	r18, r18
    4b6a:	f1 f0       	breq	.+60     	; 0x4ba8 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    4b6c:	d5 01       	movw	r26, r10
    4b6e:	ec 91       	ld	r30, X
    4b70:	f0 e0       	ldi	r31, 0x00	; 0
    4b72:	e0 50       	subi	r30, 0x00	; 0
    4b74:	f1 4b       	sbci	r31, 0xB1	; 177
    4b76:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    4b78:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    4b7a:	2e 9f       	mul	r18, r30
    4b7c:	f0 01       	movw	r30, r0
    4b7e:	11 24       	eor	r1, r1
    4b80:	f3 95       	inc	r31
					tVol>>=8;
    4b82:	ef 2f       	mov	r30, r31
    4b84:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    4b86:	a3 01       	movw	r20, r6
    4b88:	4e 1b       	sub	r20, r30
    4b8a:	5f 0b       	sbc	r21, r31
    4b8c:	48 9f       	mul	r20, r24
    4b8e:	90 01       	movw	r18, r0
    4b90:	49 9f       	mul	r20, r25
    4b92:	30 0d       	add	r19, r0
    4b94:	58 9f       	mul	r21, r24
    4b96:	30 0d       	add	r19, r0
    4b98:	11 24       	eor	r1, r1
    4b9a:	c9 01       	movw	r24, r18
    4b9c:	93 95       	inc	r25
					uVol>>=8;
    4b9e:	89 2f       	mov	r24, r25
    4ba0:	99 27       	eor	r25, r25
    4ba2:	02 c0       	rjmp	.+4      	; 0x4ba8 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    4ba8:	f5 01       	movw	r30, r10
    4baa:	30 81       	ld	r19, Z
    4bac:	f7 01       	movw	r30, r14
    4bae:	39 97       	sbiw	r30, 0x09	; 9
    4bb0:	20 81       	ld	r18, Z
    4bb2:	23 0f       	add	r18, r19
    4bb4:	d5 01       	movw	r26, r10
    4bb6:	2c 93       	st	X, r18
    4bb8:	02 c0       	rjmp	.+4      	; 0x4bbe <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    4bba:	80 e0       	ldi	r24, 0x00	; 0
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    4bbe:	f8 01       	movw	r30, r16
    4bc0:	80 83       	st	Z, r24
    4bc2:	67 96       	adiw	r28, 0x17	; 23
    4bc4:	0a 5f       	subi	r16, 0xFA	; 250
    4bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc8:	f7 e1       	ldi	r31, 0x17	; 23
    4bca:	af 0e       	add	r10, r31
    4bcc:	b1 1c       	adc	r11, r1
    4bce:	87 e1       	ldi	r24, 0x17	; 23
    4bd0:	c8 0e       	add	r12, r24
    4bd2:	d1 1c       	adc	r13, r1
    4bd4:	97 e1       	ldi	r25, 0x17	; 23
    4bd6:	e9 0e       	add	r14, r25
    4bd8:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    4bda:	ad e0       	ldi	r26, 0x0D	; 13
    4bdc:	ca 35       	cpi	r28, 0x5A	; 90
    4bde:	da 07       	cpc	r29, r26
    4be0:	09 f0       	breq	.+2      	; 0x4be4 <ProcessMusic+0x420>
    4be2:	37 cf       	rjmp	.-402    	; 0x4a52 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	1f 91       	pop	r17
    4bea:	0f 91       	pop	r16
    4bec:	ff 90       	pop	r15
    4bee:	ef 90       	pop	r14
    4bf0:	df 90       	pop	r13
    4bf2:	cf 90       	pop	r12
    4bf4:	bf 90       	pop	r11
    4bf6:	af 90       	pop	r10
    4bf8:	9f 90       	pop	r9
    4bfa:	8f 90       	pop	r8
    4bfc:	7f 90       	pop	r7
    4bfe:	6f 90       	pop	r6
    4c00:	08 95       	ret

00004c02 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    4c02:	80 93 5f 0d 	sts	0x0D5F, r24
    4c06:	08 95       	ret

00004c08 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    4c08:	99 27       	eor	r25, r25
	clr r23
    4c0a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    4c0c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    4c0e:	09 f4       	brne	.+2      	; 0x4c12 <set_note_waves>
		ret
    4c10:	08 95       	ret

00004c12 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    4c12:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    4c14:	fd e4       	ldi	r31, 0x4D	; 77
	lsl r22
    4c16:	66 0f       	add	r22, r22
	rol r23
    4c18:	77 1f       	adc	r23, r23
	add ZL,r22
    4c1a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    4c1c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    4c1e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    4c20:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    4c22:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    4c24:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    4c26:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    4c28:	28 9f       	mul	r18, r24
	add ZL,r0
    4c2a:	e0 0d       	add	r30, r0
	adc ZH,r1
    4c2c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    4c2e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    4c30:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    4c32:	11 24       	eor	r1, r1
	

	ret
    4c34:	08 95       	ret

00004c36 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    4c36:	99 27       	eor	r25, r25
	clr r23
    4c38:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    4c3a:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    4c3c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    4c3e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    4c40:	28 9f       	mul	r18, r24
	add ZL,r0
    4c42:	e0 0d       	add	r30, r0
	adc ZH,r1
    4c44:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    4c46:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    4c48:	31 f4       	brne	.+12     	; 0x4c56 <smw1>
	lds r22,tr4_params
    4c4a:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    4c4e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    4c50:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    4c54:	0b c0       	rjmp	.+22     	; 0x4c6c <esmw>

00004c56 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    4c56:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    4c58:	31 f4       	brne	.+12     	; 0x4c66 <smw2>
	lds r22,tr4_params
    4c5a:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    4c5e:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    4c60:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    4c64:	03 c0       	rjmp	.+6      	; 0x4c6c <esmw>

00004c66 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    4c66:	7f e4       	ldi	r23, 0x4F	; 79
	add r23,r22
    4c68:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    4c6a:	75 83       	std	Z+5, r23	; 0x05

00004c6c <esmw>:

esmw:
	clr r1	
    4c6c:	11 24       	eor	r1, r1
	ret
    4c6e:	08 95       	ret
	...

00004d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    4d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    4d02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    4d06:	08 95       	ret

00004d08 <steptable>:
    4d08:	22 00       	.word	0x0022	; ????
    4d0a:	24 00       	.word	0x0024	; ????
    4d0c:	26 00       	.word	0x0026	; ????
    4d0e:	28 00       	.word	0x0028	; ????
    4d10:	2b 00       	.word	0x002b	; ????
    4d12:	2d 00       	.word	0x002d	; ????
    4d14:	30 00       	.word	0x0030	; ????
    4d16:	33 00       	.word	0x0033	; ????
    4d18:	36 00       	.word	0x0036	; ????
    4d1a:	39 00       	.word	0x0039	; ????
    4d1c:	3d 00       	.word	0x003d	; ????
    4d1e:	40 00       	.word	0x0040	; ????
    4d20:	44 00       	.word	0x0044	; ????
    4d22:	48 00       	.word	0x0048	; ????
    4d24:	4c 00       	.word	0x004c	; ????
    4d26:	51 00       	.word	0x0051	; ????
    4d28:	56 00       	.word	0x0056	; ????
    4d2a:	5b 00       	.word	0x005b	; ????
    4d2c:	60 00       	.word	0x0060	; ????
    4d2e:	66 00       	.word	0x0066	; ????
    4d30:	6c 00       	.word	0x006c	; ????
    4d32:	73 00       	.word	0x0073	; ????
    4d34:	79 00       	.word	0x0079	; ????
    4d36:	81 00       	.word	0x0081	; ????
    4d38:	88 00       	.word	0x0088	; ????
    4d3a:	90 00       	.word	0x0090	; ????
    4d3c:	99 00       	.word	0x0099	; ????
    4d3e:	a2 00       	.word	0x00a2	; ????
    4d40:	ac 00       	.word	0x00ac	; ????
    4d42:	b6 00       	.word	0x00b6	; ????
    4d44:	c1 00       	.word	0x00c1	; ????
    4d46:	cc 00       	.word	0x00cc	; ????
    4d48:	d8 00       	.word	0x00d8	; ????
    4d4a:	e5 00       	.word	0x00e5	; ????
    4d4c:	f3 00       	.word	0x00f3	; ????
    4d4e:	01 01       	movw	r0, r2
    4d50:	10 01       	movw	r2, r0
    4d52:	21 01       	movw	r4, r2
    4d54:	32 01       	movw	r6, r4
    4d56:	44 01       	movw	r8, r8
    4d58:	57 01       	movw	r10, r14
    4d5a:	6c 01       	movw	r12, r24
    4d5c:	81 01       	movw	r16, r2
    4d5e:	98 01       	movw	r18, r16
    4d60:	b0 01       	movw	r22, r0
    4d62:	ca 01       	movw	r24, r20
    4d64:	e5 01       	movw	r28, r10
    4d66:	02 02       	muls	r16, r18
    4d68:	21 02       	muls	r18, r17
    4d6a:	41 02       	muls	r20, r17
    4d6c:	64 02       	muls	r22, r20
    4d6e:	88 02       	muls	r24, r24
    4d70:	ae 02       	muls	r26, r30
    4d72:	d7 02       	muls	r29, r23
    4d74:	03 03       	mulsu	r16, r19
    4d76:	30 03       	mulsu	r19, r16
    4d78:	61 03       	mulsu	r22, r17
    4d7a:	94 03       	fmuls	r17, r20
    4d7c:	cb 03       	fmulsu	r20, r19
    4d7e:	05 04       	cpc	r0, r5
    4d80:	42 04       	cpc	r4, r2
    4d82:	83 04       	cpc	r8, r3
    4d84:	c7 04       	cpc	r12, r7
    4d86:	10 05       	cpc	r17, r0
    4d88:	5d 05       	cpc	r21, r13
    4d8a:	af 05       	cpc	r26, r15
    4d8c:	05 06       	cpc	r0, r21
    4d8e:	61 06       	cpc	r6, r17
    4d90:	c2 06       	cpc	r12, r18
    4d92:	29 07       	cpc	r18, r25
    4d94:	96 07       	cpc	r25, r22
    4d96:	09 08       	sbc	r0, r9
    4d98:	83 08       	sbc	r8, r3
    4d9a:	05 09       	sbc	r16, r5
    4d9c:	8e 09       	sbc	r24, r14
    4d9e:	20 0a       	sbc	r2, r16
    4da0:	ba 0a       	sbc	r11, r26
    4da2:	5d 0b       	sbc	r21, r29
    4da4:	0a 0c       	add	r0, r10
    4da6:	c1 0c       	add	r12, r1
    4da8:	84 0d       	add	r24, r4
    4daa:	51 0e       	add	r5, r17
    4dac:	2b 0f       	add	r18, r27
    4dae:	12 10       	cpse	r1, r2
    4db0:	07 11       	cpse	r16, r7
    4db2:	0a 12       	cpse	r0, r26
    4db4:	1d 13       	cpse	r17, r29
    4db6:	40 14       	cp	r4, r0
    4db8:	74 15       	cp	r23, r4
    4dba:	ba 16       	cp	r11, r26
    4dbc:	14 18       	sub	r1, r4
    4dbe:	83 19       	sub	r24, r3
    4dc0:	07 1b       	sub	r16, r23
    4dc2:	a3 1c       	adc	r10, r3
    4dc4:	57 1e       	adc	r5, r23
    4dc6:	24 20       	and	r2, r4
    4dc8:	0e 22       	and	r0, r30
    4dca:	14 24       	eor	r1, r4
    4dcc:	39 26       	eor	r3, r25
    4dce:	7f 28       	or	r7, r15
    4dd0:	e8 2a       	or	r14, r24
    4dd2:	75 2d       	mov	r23, r5
    4dd4:	29 30       	cpi	r18, 0x09	; 9
    4dd6:	06 33       	cpi	r16, 0x36	; 54
    4dd8:	0f 36       	cpi	r16, 0x6F	; 111
    4dda:	45 39       	cpi	r20, 0x95	; 149
    4ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    4dde:	49 40       	sbci	r20, 0x09	; 9
    4de0:	1b 44       	sbci	r17, 0x4B	; 75
    4de2:	28 48       	sbci	r18, 0x88	; 136
    4de4:	73 4c       	sbci	r23, 0xC3	; 195
    4de6:	fe 50       	subi	r31, 0x0E	; 14
    4de8:	cf 55       	subi	r28, 0x5F	; 95
    4dea:	ea 5a       	subi	r30, 0xAA	; 170
    4dec:	51 60       	ori	r21, 0x01	; 1
    4dee:	0c 66       	ori	r16, 0x6C	; 108
    4df0:	1d 6c       	ori	r17, 0xCD	; 205
    4df2:	8b 72       	andi	r24, 0x2B	; 43
    4df4:	5a 79       	andi	r21, 0x9A	; 154
    4df6:	92 80       	ldd	r9, Z+2	; 0x02
    4df8:	37 88       	ldd	r3, Z+23	; 0x17
    4dfa:	50 90 e5 98 	lds	r5, 0x98E5
    4dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    4e00:	9f ab       	std	Y+55, r25	; 0x37
    4e02:	d3 b5       	in	r29, 0x23	; 35
    4e04:	a3 c0       	rjmp	.+326    	; 0x4f4c <waves+0x4c>
	...

00004f00 <waves>:
    4f00:	00 03       	mulsu	r16, r16
    4f02:	06 09       	sbc	r16, r6
    4f04:	0c 10       	cpse	r0, r12
    4f06:	13 16       	cp	r1, r19
    4f08:	19 1c       	adc	r1, r9
    4f0a:	1f 22       	and	r1, r31
    4f0c:	25 28       	or	r2, r5
    4f0e:	2b 2e       	mov	r2, r27
    4f10:	31 33       	cpi	r19, 0x31	; 49
    4f12:	36 39       	cpi	r19, 0x96	; 150
    4f14:	3c 3f       	cpi	r19, 0xFC	; 252
    4f16:	41 44       	sbci	r20, 0x41	; 65
    4f18:	47 49       	sbci	r20, 0x97	; 151
    4f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    4f1c:	51 53       	subi	r21, 0x31	; 49
    4f1e:	55 58       	subi	r21, 0x85	; 133
    4f20:	5a 5c       	subi	r21, 0xCA	; 202
    4f22:	5e 60       	ori	r21, 0x0E	; 14
    4f24:	62 64       	ori	r22, 0x42	; 66
    4f26:	66 68       	ori	r22, 0x86	; 134
    4f28:	6a 6b       	ori	r22, 0xBA	; 186
    4f2a:	6d 6f       	ori	r22, 0xFD	; 253
    4f2c:	70 71       	andi	r23, 0x10	; 16
    4f2e:	73 74       	andi	r23, 0x43	; 67
    4f30:	75 76       	andi	r23, 0x65	; 101
    4f32:	78 79       	andi	r23, 0x98	; 152
    4f34:	7a 7a       	andi	r23, 0xAA	; 170
    4f36:	7b 7c       	andi	r23, 0xCB	; 203
    4f38:	7d 7d       	andi	r23, 0xDD	; 221
    4f3a:	7e 7e       	andi	r23, 0xEE	; 238
    4f3c:	7e 7f       	andi	r23, 0xFE	; 254
    4f3e:	7f 7f       	andi	r23, 0xFF	; 255
    4f40:	7f 7f       	andi	r23, 0xFF	; 255
    4f42:	7f 7f       	andi	r23, 0xFF	; 255
    4f44:	7e 7e       	andi	r23, 0xEE	; 238
    4f46:	7e 7d       	andi	r23, 0xDE	; 222
    4f48:	7d 7c       	andi	r23, 0xCD	; 205
    4f4a:	7b 7a       	andi	r23, 0xAB	; 171
    4f4c:	7a 79       	andi	r23, 0x9A	; 154
    4f4e:	78 76       	andi	r23, 0x68	; 104
    4f50:	75 74       	andi	r23, 0x45	; 69
    4f52:	73 71       	andi	r23, 0x13	; 19
    4f54:	70 6f       	ori	r23, 0xF0	; 240
    4f56:	6d 6b       	ori	r22, 0xBD	; 189
    4f58:	6a 68       	ori	r22, 0x8A	; 138
    4f5a:	66 64       	ori	r22, 0x46	; 70
    4f5c:	62 60       	ori	r22, 0x02	; 2
    4f5e:	5e 5c       	subi	r21, 0xCE	; 206
    4f60:	5a 58       	subi	r21, 0x8A	; 138
    4f62:	55 53       	subi	r21, 0x35	; 53
    4f64:	51 4e       	sbci	r21, 0xE1	; 225
    4f66:	4c 49       	sbci	r20, 0x9C	; 156
    4f68:	47 44       	sbci	r20, 0x47	; 71
    4f6a:	41 3f       	cpi	r20, 0xF1	; 241
    4f6c:	3c 39       	cpi	r19, 0x9C	; 156
    4f6e:	36 33       	cpi	r19, 0x36	; 54
    4f70:	31 2e       	mov	r3, r17
    4f72:	2b 28       	or	r2, r11
    4f74:	25 22       	and	r2, r21
    4f76:	1f 1c       	adc	r1, r15
    4f78:	19 16       	cp	r1, r25
    4f7a:	13 10       	cpse	r1, r3
    4f7c:	0c 09       	sbc	r16, r12
    4f7e:	06 03       	mulsu	r16, r22
    4f80:	00 fd       	sbrc	r16, 0
    4f82:	fa f7       	brpl	.-2      	; 0x4f82 <waves+0x82>
    4f84:	f4 f0       	brlt	.+60     	; 0x4fc2 <waves+0xc2>
    4f86:	ed ea       	ldi	r30, 0xAD	; 173
    4f88:	e7 e4       	ldi	r30, 0x47	; 71
    4f8a:	e1 de       	rcall	.-574    	; 0x4d4e <steptable+0x46>
    4f8c:	db d8       	rcall	.-3658   	; 0x4144 <update_sound_end>
    4f8e:	d5 d2       	rcall	.+1450   	; 0x553a <waves+0x63a>
    4f90:	cf cd       	rjmp	.-1122   	; 0x4b30 <ProcessMusic+0x36c>
    4f92:	ca c7       	rjmp	.+3988   	; 0x5f28 <LBMapSprite+0x66>
    4f94:	c4 c1       	rjmp	.+904    	; 0x531e <waves+0x41e>
    4f96:	bf bc       	out	0x2f, r11	; 47
    4f98:	b9 b7       	in	r27, 0x39	; 57
    4f9a:	b4 b2       	in	r11, 0x14	; 20
    4f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    4f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    4fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    4fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    4fa4:	9e 9c       	mul	r9, r14
    4fa6:	9a 98       	cbi	0x13, 2	; 19
    4fa8:	96 95       	lsr	r25
    4faa:	93 91       	.word	0x9193	; ????
    4fac:	90 8f       	std	Z+24, r25	; 0x18
    4fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    4fb0:	8b 8a       	std	Y+19, r8	; 0x13
    4fb2:	88 87       	std	Y+8, r24	; 0x08
    4fb4:	86 86       	std	Z+14, r8	; 0x0e
    4fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    4fb8:	83 83       	std	Z+3, r24	; 0x03
    4fba:	82 82       	std	Z+2, r8	; 0x02
    4fbc:	82 81       	ldd	r24, Z+2	; 0x02
    4fbe:	81 81       	ldd	r24, Z+1	; 0x01
    4fc0:	81 81       	ldd	r24, Z+1	; 0x01
    4fc2:	81 81       	ldd	r24, Z+1	; 0x01
    4fc4:	82 82       	std	Z+2, r8	; 0x02
    4fc6:	82 83       	std	Z+2, r24	; 0x02
    4fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    4fca:	85 86       	std	Z+13, r8	; 0x0d
    4fcc:	86 87       	std	Z+14, r24	; 0x0e
    4fce:	88 8a       	std	Y+16, r8	; 0x10
    4fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    4fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    4fd4:	90 91 93 95 	lds	r25, 0x9593
    4fd8:	96 98       	cbi	0x12, 6	; 18
    4fda:	9a 9c       	mul	r9, r10
    4fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    4fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    4fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    4fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    4fe4:	af b2       	in	r10, 0x1f	; 31
    4fe6:	b4 b7       	in	r27, 0x34	; 52
    4fe8:	b9 bc       	out	0x29, r11	; 41
    4fea:	bf c1       	rjmp	.+894    	; 0x536a <waves+0x46a>
    4fec:	c4 c7       	rjmp	.+3976   	; 0x5f76 <LBMoveSprite+0x10>
    4fee:	ca cd       	rjmp	.-1132   	; 0x4b84 <ProcessMusic+0x3c0>
    4ff0:	cf d2       	rcall	.+1438   	; 0x5590 <waves+0x690>
    4ff2:	d5 d8       	rcall	.-3670   	; 0x419e <SetTileTable>
    4ff4:	db de       	rcall	.-586    	; 0x4dac <steptable+0xa4>
    4ff6:	e1 e4       	ldi	r30, 0x41	; 65
    4ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    4ffa:	ed f0       	brhs	.+58     	; 0x5036 <waves+0x136>
    4ffc:	f4 f7       	brge	.-4      	; 0x4ffa <waves+0xfa>
    4ffe:	fa fd       	.word	0xfdfa	; ????
    5000:	80 81       	ld	r24, Z
    5002:	82 83       	std	Z+2, r24	; 0x02
    5004:	84 85       	ldd	r24, Z+12	; 0x0c
    5006:	86 87       	std	Z+14, r24	; 0x0e
    5008:	88 89       	ldd	r24, Y+16	; 0x10
    500a:	8a 8b       	std	Y+18, r24	; 0x12
    500c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    500e:	8e 8f       	std	Y+30, r24	; 0x1e
    5010:	90 91 92 93 	lds	r25, 0x9392
    5014:	94 95       	.word	0x9594	; ????
    5016:	96 97       	sbiw	r26, 0x26	; 38
    5018:	98 99       	sbic	0x13, 0	; 19
    501a:	9a 9b       	sbis	0x13, 2	; 19
    501c:	9c 9d       	mul	r25, r12
    501e:	9e 9f       	mul	r25, r30
    5020:	a0 a1       	ldd	r26, Z+32	; 0x20
    5022:	a2 a3       	std	Z+34, r26	; 0x22
    5024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5026:	a6 a7       	std	Z+46, r26	; 0x2e
    5028:	a8 a9       	ldd	r26, Y+48	; 0x30
    502a:	aa ab       	std	Y+50, r26	; 0x32
    502c:	ac ad       	ldd	r26, Y+60	; 0x3c
    502e:	ae af       	std	Y+62, r26	; 0x3e
    5030:	b0 b1       	in	r27, 0x00	; 0
    5032:	b2 b3       	in	r27, 0x12	; 18
    5034:	b4 b5       	in	r27, 0x24	; 36
    5036:	b6 b7       	in	r27, 0x36	; 54
    5038:	b8 b9       	out	0x08, r27	; 8
    503a:	ba bb       	out	0x1a, r27	; 26
    503c:	bc bd       	out	0x2c, r27	; 44
    503e:	be bf       	out	0x3e, r27	; 62
    5040:	c0 c1       	rjmp	.+896    	; 0x53c2 <waves+0x4c2>
    5042:	c2 c3       	rjmp	.+1924   	; 0x57c8 <waves+0x8c8>
    5044:	c4 c5       	rjmp	.+2952   	; 0x5bce <DrawMap+0x16>
    5046:	c6 c7       	rjmp	.+3980   	; 0x5fd4 <LBMoveSprite+0x6e>
    5048:	c8 c9       	rjmp	.-3184   	; 0x43da <PatchCommand07>
    504a:	ca cb       	rjmp	.-2156   	; 0x47e0 <ProcessMusic+0x1c>
    504c:	cc cd       	rjmp	.-1128   	; 0x4be6 <ProcessMusic+0x422>
    504e:	ce cf       	rjmp	.-100    	; 0x4fec <waves+0xec>
    5050:	d0 d1       	rcall	.+928    	; 0x53f2 <waves+0x4f2>
    5052:	d2 d3       	rcall	.+1956   	; 0x57f8 <waves+0x8f8>
    5054:	d4 d5       	rcall	.+2984   	; 0x5bfe <DrawMap+0x46>
    5056:	d6 d7       	rcall	.+4012   	; 0x6004 <LBRotateSprites+0x22>
    5058:	d8 d9       	rcall	.-3152   	; 0x440a <PatchCommand11+0x1e>
    505a:	da db       	rcall	.-2124   	; 0x4810 <ProcessMusic+0x4c>
    505c:	dc dd       	rcall	.-1096   	; 0x4c16 <set_note_waves+0x4>
    505e:	de df       	rcall	.-68     	; 0x501c <waves+0x11c>
    5060:	e0 e1       	ldi	r30, 0x10	; 16
    5062:	e2 e3       	ldi	r30, 0x32	; 50
    5064:	e4 e5       	ldi	r30, 0x54	; 84
    5066:	e6 e7       	ldi	r30, 0x76	; 118
    5068:	e8 e9       	ldi	r30, 0x98	; 152
    506a:	ea eb       	ldi	r30, 0xBA	; 186
    506c:	ec ed       	ldi	r30, 0xDC	; 220
    506e:	ee ef       	ldi	r30, 0xFE	; 254
    5070:	f0 f1       	brcs	.+124    	; 0x50ee <waves+0x1ee>
    5072:	f2 f3       	brmi	.-4      	; 0x5070 <waves+0x170>
    5074:	f4 f5       	brge	.+124    	; 0x50f2 <waves+0x1f2>
    5076:	f6 f7       	brtc	.-4      	; 0x5074 <waves+0x174>
    5078:	f8 f9       	.word	0xf9f8	; ????
    507a:	fa fb       	.word	0xfbfa	; ????
    507c:	fc fd       	.word	0xfdfc	; ????
    507e:	fe ff       	.word	0xfffe	; ????
    5080:	00 01       	movw	r0, r0
    5082:	02 03       	mulsu	r16, r18
    5084:	04 05       	cpc	r16, r4
    5086:	06 07       	cpc	r16, r22
    5088:	08 09       	sbc	r16, r8
    508a:	0a 0b       	sbc	r16, r26
    508c:	0c 0d       	add	r16, r12
    508e:	0e 0f       	add	r16, r30
    5090:	10 11       	cpse	r17, r0
    5092:	12 13       	cpse	r17, r18
    5094:	14 15       	cp	r17, r4
    5096:	16 17       	cp	r17, r22
    5098:	18 19       	sub	r17, r8
    509a:	1a 1b       	sub	r17, r26
    509c:	1c 1d       	adc	r17, r12
    509e:	1e 1f       	adc	r17, r30
    50a0:	20 21       	and	r18, r0
    50a2:	22 23       	and	r18, r18
    50a4:	24 25       	eor	r18, r4
    50a6:	26 27       	eor	r18, r22
    50a8:	28 29       	or	r18, r8
    50aa:	2a 2b       	or	r18, r26
    50ac:	2c 2d       	mov	r18, r12
    50ae:	2e 2f       	mov	r18, r30
    50b0:	30 31       	cpi	r19, 0x10	; 16
    50b2:	32 33       	cpi	r19, 0x32	; 50
    50b4:	34 35       	cpi	r19, 0x54	; 84
    50b6:	36 37       	cpi	r19, 0x76	; 118
    50b8:	38 39       	cpi	r19, 0x98	; 152
    50ba:	3a 3b       	cpi	r19, 0xBA	; 186
    50bc:	3c 3d       	cpi	r19, 0xDC	; 220
    50be:	3e 3f       	cpi	r19, 0xFE	; 254
    50c0:	40 41       	sbci	r20, 0x10	; 16
    50c2:	42 43       	sbci	r20, 0x32	; 50
    50c4:	44 45       	sbci	r20, 0x54	; 84
    50c6:	46 47       	sbci	r20, 0x76	; 118
    50c8:	48 49       	sbci	r20, 0x98	; 152
    50ca:	4a 4b       	sbci	r20, 0xBA	; 186
    50cc:	4c 4d       	sbci	r20, 0xDC	; 220
    50ce:	4e 4f       	sbci	r20, 0xFE	; 254
    50d0:	50 51       	subi	r21, 0x10	; 16
    50d2:	52 53       	subi	r21, 0x32	; 50
    50d4:	54 55       	subi	r21, 0x54	; 84
    50d6:	56 57       	subi	r21, 0x76	; 118
    50d8:	58 59       	subi	r21, 0x98	; 152
    50da:	5a 5b       	subi	r21, 0xBA	; 186
    50dc:	5c 5d       	subi	r21, 0xDC	; 220
    50de:	5e 5f       	subi	r21, 0xFE	; 254
    50e0:	60 61       	ori	r22, 0x10	; 16
    50e2:	62 63       	ori	r22, 0x32	; 50
    50e4:	64 65       	ori	r22, 0x54	; 84
    50e6:	66 67       	ori	r22, 0x76	; 118
    50e8:	68 69       	ori	r22, 0x98	; 152
    50ea:	6a 6b       	ori	r22, 0xBA	; 186
    50ec:	6c 6d       	ori	r22, 0xDC	; 220
    50ee:	6e 6f       	ori	r22, 0xFE	; 254
    50f0:	70 71       	andi	r23, 0x10	; 16
    50f2:	72 73       	andi	r23, 0x32	; 50
    50f4:	74 75       	andi	r23, 0x54	; 84
    50f6:	76 77       	andi	r23, 0x76	; 118
    50f8:	78 79       	andi	r23, 0x98	; 152
    50fa:	7a 7b       	andi	r23, 0xBA	; 186
    50fc:	7c 7d       	andi	r23, 0xDC	; 220
    50fe:	7e 7f       	andi	r23, 0xFE	; 254
    5100:	00 02       	muls	r16, r16
    5102:	04 06       	cpc	r0, r20
    5104:	08 0a       	sbc	r0, r24
    5106:	0c 0e       	add	r0, r28
    5108:	10 12       	cpse	r1, r16
    510a:	14 16       	cp	r1, r20
    510c:	18 1a       	sub	r1, r24
    510e:	1c 1e       	adc	r1, r28
    5110:	20 22       	and	r2, r16
    5112:	24 26       	eor	r2, r20
    5114:	28 2a       	or	r2, r24
    5116:	2c 2e       	mov	r2, r28
    5118:	30 32       	cpi	r19, 0x20	; 32
    511a:	34 36       	cpi	r19, 0x64	; 100
    511c:	38 3a       	cpi	r19, 0xA8	; 168
    511e:	3c 3e       	cpi	r19, 0xEC	; 236
    5120:	40 42       	sbci	r20, 0x20	; 32
    5122:	44 46       	sbci	r20, 0x64	; 100
    5124:	48 4a       	sbci	r20, 0xA8	; 168
    5126:	4c 4e       	sbci	r20, 0xEC	; 236
    5128:	50 52       	subi	r21, 0x20	; 32
    512a:	54 56       	subi	r21, 0x64	; 100
    512c:	58 5a       	subi	r21, 0xA8	; 168
    512e:	5c 5e       	subi	r21, 0xEC	; 236
    5130:	60 62       	ori	r22, 0x20	; 32
    5132:	64 66       	ori	r22, 0x64	; 100
    5134:	68 6a       	ori	r22, 0xA8	; 168
    5136:	6c 6e       	ori	r22, 0xEC	; 236
    5138:	70 72       	andi	r23, 0x20	; 32
    513a:	74 76       	andi	r23, 0x64	; 100
    513c:	78 7a       	andi	r23, 0xA8	; 168
    513e:	7c 7e       	andi	r23, 0xEC	; 236
    5140:	7f 7d       	andi	r23, 0xDF	; 223
    5142:	7b 79       	andi	r23, 0x9B	; 155
    5144:	77 75       	andi	r23, 0x57	; 87
    5146:	73 71       	andi	r23, 0x13	; 19
    5148:	6f 6d       	ori	r22, 0xDF	; 223
    514a:	6b 69       	ori	r22, 0x9B	; 155
    514c:	67 65       	ori	r22, 0x57	; 87
    514e:	63 61       	ori	r22, 0x13	; 19
    5150:	5f 5d       	subi	r21, 0xDF	; 223
    5152:	5b 59       	subi	r21, 0x9B	; 155
    5154:	57 55       	subi	r21, 0x57	; 87
    5156:	53 51       	subi	r21, 0x13	; 19
    5158:	4f 4d       	sbci	r20, 0xDF	; 223
    515a:	4b 49       	sbci	r20, 0x9B	; 155
    515c:	47 45       	sbci	r20, 0x57	; 87
    515e:	43 41       	sbci	r20, 0x13	; 19
    5160:	3f 3d       	cpi	r19, 0xDF	; 223
    5162:	3b 39       	cpi	r19, 0x9B	; 155
    5164:	37 35       	cpi	r19, 0x57	; 87
    5166:	33 31       	cpi	r19, 0x13	; 19
    5168:	2f 2d       	mov	r18, r15
    516a:	2b 29       	or	r18, r11
    516c:	27 25       	eor	r18, r7
    516e:	23 21       	and	r18, r3
    5170:	1f 1d       	adc	r17, r15
    5172:	1b 19       	sub	r17, r11
    5174:	17 15       	cp	r17, r7
    5176:	13 11       	cpse	r17, r3
    5178:	0f 0d       	add	r16, r15
    517a:	0b 09       	sbc	r16, r11
    517c:	07 05       	cpc	r16, r7
    517e:	03 01       	movw	r0, r6
    5180:	ff fd       	.word	0xfdff	; ????
    5182:	fb f9       	.word	0xf9fb	; ????
    5184:	f7 f5       	brid	.+124    	; 0x5202 <waves+0x302>
    5186:	f3 f1       	brvs	.+124    	; 0x5204 <waves+0x304>
    5188:	ef ed       	ldi	r30, 0xDF	; 223
    518a:	eb e9       	ldi	r30, 0x9B	; 155
    518c:	e7 e5       	ldi	r30, 0x57	; 87
    518e:	e3 e1       	ldi	r30, 0x13	; 19
    5190:	df dd       	rcall	.-1090   	; 0x4d50 <steptable+0x48>
    5192:	db d9       	rcall	.-3146   	; 0x454a <InitMusicPlayer+0x42>
    5194:	d7 d5       	rcall	.+2990   	; 0x5d44 <FadeIn+0x4>
    5196:	d3 d1       	rcall	.+934    	; 0x553e <waves+0x63e>
    5198:	cf cd       	rjmp	.-1122   	; 0x4d38 <steptable+0x30>
    519a:	cb c9       	rjmp	.-3178   	; 0x4532 <InitMusicPlayer+0x2a>
    519c:	c7 c5       	rjmp	.+2958   	; 0x5d2c <doFade+0x8>
    519e:	c3 c1       	rjmp	.+902    	; 0x5526 <waves+0x626>
    51a0:	bf bd       	out	0x2f, r27	; 47
    51a2:	bb b9       	out	0x0b, r27	; 11
    51a4:	b7 b5       	in	r27, 0x27	; 39
    51a6:	b3 b1       	in	r27, 0x03	; 3
    51a8:	af ad       	ldd	r26, Y+63	; 0x3f
    51aa:	ab a9       	ldd	r26, Y+51	; 0x33
    51ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    51ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    51b0:	9f 9d       	mul	r25, r15
    51b2:	9b 99       	sbic	0x13, 3	; 19
    51b4:	97 95       	ror	r25
    51b6:	93 91       	.word	0x9193	; ????
    51b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51ba:	8b 89       	ldd	r24, Y+19	; 0x13
    51bc:	87 85       	ldd	r24, Z+15	; 0x0f
    51be:	83 81       	ldd	r24, Z+3	; 0x03
    51c0:	80 82       	st	Z, r8
    51c2:	84 86       	std	Z+12, r8	; 0x0c
    51c4:	88 8a       	std	Y+16, r8	; 0x10
    51c6:	8c 8e       	std	Y+28, r8	; 0x1c
    51c8:	90 92 94 96 	sts	0x9694, r9
    51cc:	98 9a       	sbi	0x13, 0	; 19
    51ce:	9c 9e       	mul	r9, r28
    51d0:	a0 a2       	std	Z+32, r10	; 0x20
    51d2:	a4 a6       	std	Z+44, r10	; 0x2c
    51d4:	a8 aa       	std	Y+48, r10	; 0x30
    51d6:	ac ae       	std	Y+60, r10	; 0x3c
    51d8:	b0 b2       	in	r11, 0x10	; 16
    51da:	b4 b6       	in	r11, 0x34	; 52
    51dc:	b8 ba       	out	0x18, r11	; 24
    51de:	bc be       	out	0x3c, r11	; 60
    51e0:	c0 c2       	rjmp	.+1408   	; 0x5762 <waves+0x862>
    51e2:	c4 c6       	rjmp	.+3464   	; 0x5f6c <LBMoveSprite+0x6>
    51e4:	c8 ca       	rjmp	.-2672   	; 0x4776 <TriggerNote+0x32>
    51e6:	cc ce       	rjmp	.-616    	; 0x4f80 <waves+0x80>
    51e8:	d0 d2       	rcall	.+1440   	; 0x578a <waves+0x88a>
    51ea:	d4 d6       	rcall	.+3496   	; 0x5f94 <LBMoveSprite+0x2e>
    51ec:	d8 da       	rcall	.-2640   	; 0x479e <TriggerNote+0x5a>
    51ee:	dc de       	rcall	.-584    	; 0x4fa8 <waves+0xa8>
    51f0:	e0 e2       	ldi	r30, 0x20	; 32
    51f2:	e4 e6       	ldi	r30, 0x64	; 100
    51f4:	e8 ea       	ldi	r30, 0xA8	; 168
    51f6:	ec ee       	ldi	r30, 0xEC	; 236
    51f8:	f0 f2       	brcs	.-68     	; 0x51b6 <waves+0x2b6>
    51fa:	f4 f6       	brge	.-68     	; 0x51b8 <waves+0x2b8>
    51fc:	f8 fa       	.word	0xfaf8	; ????
    51fe:	fc fe       	.word	0xfefc	; ????
    5200:	7f 7f       	andi	r23, 0xFF	; 255
    5202:	7f 7f       	andi	r23, 0xFF	; 255
    5204:	7f 7f       	andi	r23, 0xFF	; 255
    5206:	7f 7f       	andi	r23, 0xFF	; 255
    5208:	7f 7f       	andi	r23, 0xFF	; 255
    520a:	7f 7f       	andi	r23, 0xFF	; 255
    520c:	7f 7f       	andi	r23, 0xFF	; 255
    520e:	7f 7f       	andi	r23, 0xFF	; 255
    5210:	7f 7f       	andi	r23, 0xFF	; 255
    5212:	7f 7f       	andi	r23, 0xFF	; 255
    5214:	7f 7f       	andi	r23, 0xFF	; 255
    5216:	7f 7f       	andi	r23, 0xFF	; 255
    5218:	7f 7f       	andi	r23, 0xFF	; 255
    521a:	7f 7f       	andi	r23, 0xFF	; 255
    521c:	7f 7f       	andi	r23, 0xFF	; 255
    521e:	7f 7f       	andi	r23, 0xFF	; 255
    5220:	7f 7f       	andi	r23, 0xFF	; 255
    5222:	7f 7f       	andi	r23, 0xFF	; 255
    5224:	7f 7f       	andi	r23, 0xFF	; 255
    5226:	7f 7f       	andi	r23, 0xFF	; 255
    5228:	7f 7f       	andi	r23, 0xFF	; 255
    522a:	7f 7f       	andi	r23, 0xFF	; 255
    522c:	7f 7f       	andi	r23, 0xFF	; 255
    522e:	7f 7f       	andi	r23, 0xFF	; 255
    5230:	7f 7f       	andi	r23, 0xFF	; 255
    5232:	7f 7f       	andi	r23, 0xFF	; 255
    5234:	7f 7f       	andi	r23, 0xFF	; 255
    5236:	7f 7f       	andi	r23, 0xFF	; 255
    5238:	7f 7f       	andi	r23, 0xFF	; 255
    523a:	7f 7f       	andi	r23, 0xFF	; 255
    523c:	7f 7f       	andi	r23, 0xFF	; 255
    523e:	7f 7f       	andi	r23, 0xFF	; 255
    5240:	80 80       	ld	r8, Z
    5242:	80 80       	ld	r8, Z
    5244:	80 80       	ld	r8, Z
    5246:	80 80       	ld	r8, Z
    5248:	80 80       	ld	r8, Z
    524a:	80 80       	ld	r8, Z
    524c:	80 80       	ld	r8, Z
    524e:	80 80       	ld	r8, Z
    5250:	80 80       	ld	r8, Z
    5252:	80 80       	ld	r8, Z
    5254:	80 80       	ld	r8, Z
    5256:	80 80       	ld	r8, Z
    5258:	80 80       	ld	r8, Z
    525a:	80 80       	ld	r8, Z
    525c:	80 80       	ld	r8, Z
    525e:	80 80       	ld	r8, Z
    5260:	80 80       	ld	r8, Z
    5262:	80 80       	ld	r8, Z
    5264:	80 80       	ld	r8, Z
    5266:	80 80       	ld	r8, Z
    5268:	80 80       	ld	r8, Z
    526a:	80 80       	ld	r8, Z
    526c:	80 80       	ld	r8, Z
    526e:	80 80       	ld	r8, Z
    5270:	80 80       	ld	r8, Z
    5272:	80 80       	ld	r8, Z
    5274:	80 80       	ld	r8, Z
    5276:	80 80       	ld	r8, Z
    5278:	80 80       	ld	r8, Z
    527a:	80 80       	ld	r8, Z
    527c:	80 80       	ld	r8, Z
    527e:	80 80       	ld	r8, Z
    5280:	80 80       	ld	r8, Z
    5282:	80 80       	ld	r8, Z
    5284:	80 80       	ld	r8, Z
    5286:	80 80       	ld	r8, Z
    5288:	80 80       	ld	r8, Z
    528a:	80 80       	ld	r8, Z
    528c:	80 80       	ld	r8, Z
    528e:	80 80       	ld	r8, Z
    5290:	80 80       	ld	r8, Z
    5292:	80 80       	ld	r8, Z
    5294:	80 80       	ld	r8, Z
    5296:	80 80       	ld	r8, Z
    5298:	80 80       	ld	r8, Z
    529a:	80 80       	ld	r8, Z
    529c:	80 80       	ld	r8, Z
    529e:	80 80       	ld	r8, Z
    52a0:	80 80       	ld	r8, Z
    52a2:	80 80       	ld	r8, Z
    52a4:	80 80       	ld	r8, Z
    52a6:	80 80       	ld	r8, Z
    52a8:	80 80       	ld	r8, Z
    52aa:	80 80       	ld	r8, Z
    52ac:	80 80       	ld	r8, Z
    52ae:	80 80       	ld	r8, Z
    52b0:	80 80       	ld	r8, Z
    52b2:	80 80       	ld	r8, Z
    52b4:	80 80       	ld	r8, Z
    52b6:	80 80       	ld	r8, Z
    52b8:	80 80       	ld	r8, Z
    52ba:	80 80       	ld	r8, Z
    52bc:	80 80       	ld	r8, Z
    52be:	80 80       	ld	r8, Z
    52c0:	80 80       	ld	r8, Z
    52c2:	80 80       	ld	r8, Z
    52c4:	80 80       	ld	r8, Z
    52c6:	80 80       	ld	r8, Z
    52c8:	80 80       	ld	r8, Z
    52ca:	80 80       	ld	r8, Z
    52cc:	80 80       	ld	r8, Z
    52ce:	80 80       	ld	r8, Z
    52d0:	80 80       	ld	r8, Z
    52d2:	80 80       	ld	r8, Z
    52d4:	80 80       	ld	r8, Z
    52d6:	80 80       	ld	r8, Z
    52d8:	80 80       	ld	r8, Z
    52da:	80 80       	ld	r8, Z
    52dc:	80 80       	ld	r8, Z
    52de:	80 80       	ld	r8, Z
    52e0:	80 80       	ld	r8, Z
    52e2:	80 80       	ld	r8, Z
    52e4:	80 80       	ld	r8, Z
    52e6:	80 80       	ld	r8, Z
    52e8:	80 80       	ld	r8, Z
    52ea:	80 80       	ld	r8, Z
    52ec:	80 80       	ld	r8, Z
    52ee:	80 80       	ld	r8, Z
    52f0:	80 80       	ld	r8, Z
    52f2:	80 80       	ld	r8, Z
    52f4:	80 80       	ld	r8, Z
    52f6:	80 80       	ld	r8, Z
    52f8:	80 80       	ld	r8, Z
    52fa:	80 80       	ld	r8, Z
    52fc:	80 80       	ld	r8, Z
    52fe:	80 80       	ld	r8, Z
    5300:	7f 7f       	andi	r23, 0xFF	; 255
    5302:	7f 7f       	andi	r23, 0xFF	; 255
    5304:	7f 7f       	andi	r23, 0xFF	; 255
    5306:	7f 7f       	andi	r23, 0xFF	; 255
    5308:	7f 7f       	andi	r23, 0xFF	; 255
    530a:	7f 7f       	andi	r23, 0xFF	; 255
    530c:	7f 7f       	andi	r23, 0xFF	; 255
    530e:	7f 7f       	andi	r23, 0xFF	; 255
    5310:	7f 7f       	andi	r23, 0xFF	; 255
    5312:	7f 7f       	andi	r23, 0xFF	; 255
    5314:	7f 7f       	andi	r23, 0xFF	; 255
    5316:	7f 7f       	andi	r23, 0xFF	; 255
    5318:	7f 7f       	andi	r23, 0xFF	; 255
    531a:	7f 7f       	andi	r23, 0xFF	; 255
    531c:	7f 7f       	andi	r23, 0xFF	; 255
    531e:	7f 7f       	andi	r23, 0xFF	; 255
    5320:	7f 7f       	andi	r23, 0xFF	; 255
    5322:	7f 7f       	andi	r23, 0xFF	; 255
    5324:	7f 7f       	andi	r23, 0xFF	; 255
    5326:	7f 7f       	andi	r23, 0xFF	; 255
    5328:	7f 7f       	andi	r23, 0xFF	; 255
    532a:	7f 7f       	andi	r23, 0xFF	; 255
    532c:	7f 7f       	andi	r23, 0xFF	; 255
    532e:	7f 7f       	andi	r23, 0xFF	; 255
    5330:	7f 7f       	andi	r23, 0xFF	; 255
    5332:	7f 7f       	andi	r23, 0xFF	; 255
    5334:	7f 7f       	andi	r23, 0xFF	; 255
    5336:	7f 7f       	andi	r23, 0xFF	; 255
    5338:	7f 7f       	andi	r23, 0xFF	; 255
    533a:	7f 7f       	andi	r23, 0xFF	; 255
    533c:	7f 7f       	andi	r23, 0xFF	; 255
    533e:	7f 7f       	andi	r23, 0xFF	; 255
    5340:	7f 7f       	andi	r23, 0xFF	; 255
    5342:	7f 7f       	andi	r23, 0xFF	; 255
    5344:	7f 7f       	andi	r23, 0xFF	; 255
    5346:	7f 7f       	andi	r23, 0xFF	; 255
    5348:	7f 7f       	andi	r23, 0xFF	; 255
    534a:	7f 7f       	andi	r23, 0xFF	; 255
    534c:	7f 7f       	andi	r23, 0xFF	; 255
    534e:	7f 7f       	andi	r23, 0xFF	; 255
    5350:	7f 7f       	andi	r23, 0xFF	; 255
    5352:	7f 7f       	andi	r23, 0xFF	; 255
    5354:	7f 7f       	andi	r23, 0xFF	; 255
    5356:	7f 7f       	andi	r23, 0xFF	; 255
    5358:	7f 7f       	andi	r23, 0xFF	; 255
    535a:	7f 7f       	andi	r23, 0xFF	; 255
    535c:	7f 7f       	andi	r23, 0xFF	; 255
    535e:	7f 7f       	andi	r23, 0xFF	; 255
    5360:	7f 7f       	andi	r23, 0xFF	; 255
    5362:	7f 7f       	andi	r23, 0xFF	; 255
    5364:	7f 7f       	andi	r23, 0xFF	; 255
    5366:	7f 7f       	andi	r23, 0xFF	; 255
    5368:	7f 7f       	andi	r23, 0xFF	; 255
    536a:	7f 7f       	andi	r23, 0xFF	; 255
    536c:	7f 7f       	andi	r23, 0xFF	; 255
    536e:	7f 7f       	andi	r23, 0xFF	; 255
    5370:	7f 7f       	andi	r23, 0xFF	; 255
    5372:	7f 7f       	andi	r23, 0xFF	; 255
    5374:	7f 7f       	andi	r23, 0xFF	; 255
    5376:	7f 7f       	andi	r23, 0xFF	; 255
    5378:	7f 7f       	andi	r23, 0xFF	; 255
    537a:	7f 7f       	andi	r23, 0xFF	; 255
    537c:	7f 7f       	andi	r23, 0xFF	; 255
    537e:	7f 7f       	andi	r23, 0xFF	; 255
    5380:	80 80       	ld	r8, Z
    5382:	80 80       	ld	r8, Z
    5384:	80 80       	ld	r8, Z
    5386:	80 80       	ld	r8, Z
    5388:	80 80       	ld	r8, Z
    538a:	80 80       	ld	r8, Z
    538c:	80 80       	ld	r8, Z
    538e:	80 80       	ld	r8, Z
    5390:	80 80       	ld	r8, Z
    5392:	80 80       	ld	r8, Z
    5394:	80 80       	ld	r8, Z
    5396:	80 80       	ld	r8, Z
    5398:	80 80       	ld	r8, Z
    539a:	80 80       	ld	r8, Z
    539c:	80 80       	ld	r8, Z
    539e:	80 80       	ld	r8, Z
    53a0:	80 80       	ld	r8, Z
    53a2:	80 80       	ld	r8, Z
    53a4:	80 80       	ld	r8, Z
    53a6:	80 80       	ld	r8, Z
    53a8:	80 80       	ld	r8, Z
    53aa:	80 80       	ld	r8, Z
    53ac:	80 80       	ld	r8, Z
    53ae:	80 80       	ld	r8, Z
    53b0:	80 80       	ld	r8, Z
    53b2:	80 80       	ld	r8, Z
    53b4:	80 80       	ld	r8, Z
    53b6:	80 80       	ld	r8, Z
    53b8:	80 80       	ld	r8, Z
    53ba:	80 80       	ld	r8, Z
    53bc:	80 80       	ld	r8, Z
    53be:	80 80       	ld	r8, Z
    53c0:	80 80       	ld	r8, Z
    53c2:	80 80       	ld	r8, Z
    53c4:	80 80       	ld	r8, Z
    53c6:	80 80       	ld	r8, Z
    53c8:	80 80       	ld	r8, Z
    53ca:	80 80       	ld	r8, Z
    53cc:	80 80       	ld	r8, Z
    53ce:	80 80       	ld	r8, Z
    53d0:	80 80       	ld	r8, Z
    53d2:	80 80       	ld	r8, Z
    53d4:	80 80       	ld	r8, Z
    53d6:	80 80       	ld	r8, Z
    53d8:	80 80       	ld	r8, Z
    53da:	80 80       	ld	r8, Z
    53dc:	80 80       	ld	r8, Z
    53de:	80 80       	ld	r8, Z
    53e0:	80 80       	ld	r8, Z
    53e2:	80 80       	ld	r8, Z
    53e4:	80 80       	ld	r8, Z
    53e6:	80 80       	ld	r8, Z
    53e8:	80 80       	ld	r8, Z
    53ea:	80 80       	ld	r8, Z
    53ec:	80 80       	ld	r8, Z
    53ee:	80 80       	ld	r8, Z
    53f0:	80 80       	ld	r8, Z
    53f2:	80 80       	ld	r8, Z
    53f4:	80 80       	ld	r8, Z
    53f6:	80 80       	ld	r8, Z
    53f8:	80 80       	ld	r8, Z
    53fa:	80 80       	ld	r8, Z
    53fc:	80 80       	ld	r8, Z
    53fe:	80 80       	ld	r8, Z
    5400:	7f 7f       	andi	r23, 0xFF	; 255
    5402:	7f 7f       	andi	r23, 0xFF	; 255
    5404:	7f 7f       	andi	r23, 0xFF	; 255
    5406:	7f 7f       	andi	r23, 0xFF	; 255
    5408:	7f 7f       	andi	r23, 0xFF	; 255
    540a:	7f 7f       	andi	r23, 0xFF	; 255
    540c:	7f 7f       	andi	r23, 0xFF	; 255
    540e:	7f 7f       	andi	r23, 0xFF	; 255
    5410:	7f 7f       	andi	r23, 0xFF	; 255
    5412:	7f 7f       	andi	r23, 0xFF	; 255
    5414:	7f 7f       	andi	r23, 0xFF	; 255
    5416:	7f 7f       	andi	r23, 0xFF	; 255
    5418:	7f 7f       	andi	r23, 0xFF	; 255
    541a:	7f 7f       	andi	r23, 0xFF	; 255
    541c:	7f 7f       	andi	r23, 0xFF	; 255
    541e:	7f 7f       	andi	r23, 0xFF	; 255
    5420:	7f 7f       	andi	r23, 0xFF	; 255
    5422:	7f 7f       	andi	r23, 0xFF	; 255
    5424:	7f 7f       	andi	r23, 0xFF	; 255
    5426:	7f 7f       	andi	r23, 0xFF	; 255
    5428:	7f 7f       	andi	r23, 0xFF	; 255
    542a:	7f 7f       	andi	r23, 0xFF	; 255
    542c:	7f 7f       	andi	r23, 0xFF	; 255
    542e:	7f 7f       	andi	r23, 0xFF	; 255
    5430:	7f 7f       	andi	r23, 0xFF	; 255
    5432:	7f 7f       	andi	r23, 0xFF	; 255
    5434:	7f 7f       	andi	r23, 0xFF	; 255
    5436:	7f 7f       	andi	r23, 0xFF	; 255
    5438:	7f 7f       	andi	r23, 0xFF	; 255
    543a:	7f 7f       	andi	r23, 0xFF	; 255
    543c:	7f 7f       	andi	r23, 0xFF	; 255
    543e:	7f 7f       	andi	r23, 0xFF	; 255
    5440:	7f 7f       	andi	r23, 0xFF	; 255
    5442:	7f 7f       	andi	r23, 0xFF	; 255
    5444:	7f 7f       	andi	r23, 0xFF	; 255
    5446:	7f 7f       	andi	r23, 0xFF	; 255
    5448:	7f 7f       	andi	r23, 0xFF	; 255
    544a:	7f 7f       	andi	r23, 0xFF	; 255
    544c:	7f 7f       	andi	r23, 0xFF	; 255
    544e:	7f 7f       	andi	r23, 0xFF	; 255
    5450:	7f 7f       	andi	r23, 0xFF	; 255
    5452:	7f 7f       	andi	r23, 0xFF	; 255
    5454:	7f 7f       	andi	r23, 0xFF	; 255
    5456:	7f 7f       	andi	r23, 0xFF	; 255
    5458:	7f 7f       	andi	r23, 0xFF	; 255
    545a:	7f 7f       	andi	r23, 0xFF	; 255
    545c:	7f 7f       	andi	r23, 0xFF	; 255
    545e:	7f 7f       	andi	r23, 0xFF	; 255
    5460:	7f 7f       	andi	r23, 0xFF	; 255
    5462:	7f 7f       	andi	r23, 0xFF	; 255
    5464:	7f 7f       	andi	r23, 0xFF	; 255
    5466:	7f 7f       	andi	r23, 0xFF	; 255
    5468:	7f 7f       	andi	r23, 0xFF	; 255
    546a:	7f 7f       	andi	r23, 0xFF	; 255
    546c:	7f 7f       	andi	r23, 0xFF	; 255
    546e:	7f 7f       	andi	r23, 0xFF	; 255
    5470:	7f 7f       	andi	r23, 0xFF	; 255
    5472:	7f 7f       	andi	r23, 0xFF	; 255
    5474:	7f 7f       	andi	r23, 0xFF	; 255
    5476:	7f 7f       	andi	r23, 0xFF	; 255
    5478:	7f 7f       	andi	r23, 0xFF	; 255
    547a:	7f 7f       	andi	r23, 0xFF	; 255
    547c:	7f 7f       	andi	r23, 0xFF	; 255
    547e:	7f 7f       	andi	r23, 0xFF	; 255
    5480:	7f 7f       	andi	r23, 0xFF	; 255
    5482:	7f 7f       	andi	r23, 0xFF	; 255
    5484:	7f 7f       	andi	r23, 0xFF	; 255
    5486:	7f 7f       	andi	r23, 0xFF	; 255
    5488:	7f 7f       	andi	r23, 0xFF	; 255
    548a:	7f 7f       	andi	r23, 0xFF	; 255
    548c:	7f 7f       	andi	r23, 0xFF	; 255
    548e:	7f 7f       	andi	r23, 0xFF	; 255
    5490:	7f 7f       	andi	r23, 0xFF	; 255
    5492:	7f 7f       	andi	r23, 0xFF	; 255
    5494:	7f 7f       	andi	r23, 0xFF	; 255
    5496:	7f 7f       	andi	r23, 0xFF	; 255
    5498:	7f 7f       	andi	r23, 0xFF	; 255
    549a:	7f 7f       	andi	r23, 0xFF	; 255
    549c:	7f 7f       	andi	r23, 0xFF	; 255
    549e:	7f 7f       	andi	r23, 0xFF	; 255
    54a0:	7f 7f       	andi	r23, 0xFF	; 255
    54a2:	7f 7f       	andi	r23, 0xFF	; 255
    54a4:	7f 7f       	andi	r23, 0xFF	; 255
    54a6:	7f 7f       	andi	r23, 0xFF	; 255
    54a8:	7f 7f       	andi	r23, 0xFF	; 255
    54aa:	7f 7f       	andi	r23, 0xFF	; 255
    54ac:	7f 7f       	andi	r23, 0xFF	; 255
    54ae:	7f 7f       	andi	r23, 0xFF	; 255
    54b0:	7f 7f       	andi	r23, 0xFF	; 255
    54b2:	7f 7f       	andi	r23, 0xFF	; 255
    54b4:	7f 7f       	andi	r23, 0xFF	; 255
    54b6:	7f 7f       	andi	r23, 0xFF	; 255
    54b8:	7f 7f       	andi	r23, 0xFF	; 255
    54ba:	7f 7f       	andi	r23, 0xFF	; 255
    54bc:	7f 7f       	andi	r23, 0xFF	; 255
    54be:	7f 7f       	andi	r23, 0xFF	; 255
    54c0:	80 80       	ld	r8, Z
    54c2:	80 80       	ld	r8, Z
    54c4:	80 80       	ld	r8, Z
    54c6:	80 80       	ld	r8, Z
    54c8:	80 80       	ld	r8, Z
    54ca:	80 80       	ld	r8, Z
    54cc:	80 80       	ld	r8, Z
    54ce:	80 80       	ld	r8, Z
    54d0:	80 80       	ld	r8, Z
    54d2:	80 80       	ld	r8, Z
    54d4:	80 80       	ld	r8, Z
    54d6:	80 80       	ld	r8, Z
    54d8:	80 80       	ld	r8, Z
    54da:	80 80       	ld	r8, Z
    54dc:	80 80       	ld	r8, Z
    54de:	80 80       	ld	r8, Z
    54e0:	80 80       	ld	r8, Z
    54e2:	80 80       	ld	r8, Z
    54e4:	80 80       	ld	r8, Z
    54e6:	80 80       	ld	r8, Z
    54e8:	80 80       	ld	r8, Z
    54ea:	80 80       	ld	r8, Z
    54ec:	80 80       	ld	r8, Z
    54ee:	80 80       	ld	r8, Z
    54f0:	80 80       	ld	r8, Z
    54f2:	80 80       	ld	r8, Z
    54f4:	80 80       	ld	r8, Z
    54f6:	80 80       	ld	r8, Z
    54f8:	80 80       	ld	r8, Z
    54fa:	80 80       	ld	r8, Z
    54fc:	80 80       	ld	r8, Z
    54fe:	80 80       	ld	r8, Z
    5500:	03 09       	sbc	r16, r3
    5502:	13 1e       	adc	r1, r19
    5504:	28 31       	cpi	r18, 0x18	; 24
    5506:	3a 40       	sbci	r19, 0x0A	; 10
    5508:	46 4c       	sbci	r20, 0xC6	; 198
    550a:	50 54       	subi	r21, 0x40	; 64
    550c:	58 5b       	subi	r21, 0xB8	; 184
    550e:	5e 61       	ori	r21, 0x1E	; 30
    5510:	63 65       	ori	r22, 0x53	; 83
    5512:	67 69       	ori	r22, 0x97	; 151
    5514:	6b 6c       	ori	r22, 0xCB	; 203
    5516:	6e 6f       	ori	r22, 0xFE	; 254
    5518:	70 71       	andi	r23, 0x10	; 16
    551a:	72 73       	andi	r23, 0x32	; 50
    551c:	74 75       	andi	r23, 0x54	; 84
    551e:	76 77       	andi	r23, 0x76	; 118
    5520:	77 78       	andi	r23, 0x87	; 135
    5522:	79 79       	andi	r23, 0x99	; 153
    5524:	7a 7a       	andi	r23, 0xAA	; 170
    5526:	7b 7b       	andi	r23, 0xBB	; 187
    5528:	7c 7c       	andi	r23, 0xCC	; 204
    552a:	7c 7d       	andi	r23, 0xDC	; 220
    552c:	7d 7d       	andi	r23, 0xDD	; 221
    552e:	7e 7e       	andi	r23, 0xEE	; 238
    5530:	7e 7e       	andi	r23, 0xEE	; 238
    5532:	7f 7f       	andi	r23, 0xFF	; 255
    5534:	7f 7f       	andi	r23, 0xFF	; 255
    5536:	7f 7f       	andi	r23, 0xFF	; 255
    5538:	7f 7f       	andi	r23, 0xFF	; 255
    553a:	7f 7f       	andi	r23, 0xFF	; 255
    553c:	7f 7f       	andi	r23, 0xFF	; 255
    553e:	7f 7f       	andi	r23, 0xFF	; 255
    5540:	7f 7f       	andi	r23, 0xFF	; 255
    5542:	7f 7f       	andi	r23, 0xFF	; 255
    5544:	7f 7f       	andi	r23, 0xFF	; 255
    5546:	7f 7f       	andi	r23, 0xFF	; 255
    5548:	7f 7f       	andi	r23, 0xFF	; 255
    554a:	7f 7f       	andi	r23, 0xFF	; 255
    554c:	7f 7e       	andi	r23, 0xEF	; 239
    554e:	7e 7e       	andi	r23, 0xEE	; 238
    5550:	7e 7d       	andi	r23, 0xDE	; 222
    5552:	7d 7d       	andi	r23, 0xDD	; 221
    5554:	7c 7c       	andi	r23, 0xCC	; 204
    5556:	7c 7b       	andi	r23, 0xBC	; 188
    5558:	7b 7a       	andi	r23, 0xAB	; 171
    555a:	7a 79       	andi	r23, 0x9A	; 154
    555c:	79 78       	andi	r23, 0x89	; 137
    555e:	77 77       	andi	r23, 0x77	; 119
    5560:	76 75       	andi	r23, 0x56	; 86
    5562:	74 73       	andi	r23, 0x34	; 52
    5564:	72 71       	andi	r23, 0x12	; 18
    5566:	70 6f       	ori	r23, 0xF0	; 240
    5568:	6e 6c       	ori	r22, 0xCE	; 206
    556a:	6b 69       	ori	r22, 0x9B	; 155
    556c:	67 65       	ori	r22, 0x57	; 87
    556e:	63 61       	ori	r22, 0x13	; 19
    5570:	5e 5b       	subi	r21, 0xBE	; 190
    5572:	58 54       	subi	r21, 0x48	; 72
    5574:	50 4c       	sbci	r21, 0xC0	; 192
    5576:	46 40       	sbci	r20, 0x06	; 6
    5578:	3a 31       	cpi	r19, 0x1A	; 26
    557a:	28 1e       	adc	r2, r24
    557c:	13 09       	sbc	r17, r3
    557e:	03 00       	.word	0x0003	; ????
    5580:	c6 cc       	rjmp	.-1652   	; 0x4f0e <waves+0xe>
    5582:	d5 db       	rcall	.-2134   	; 0x4d2e <steptable+0x26>
    5584:	df e3       	ldi	r29, 0x3F	; 63
    5586:	e5 e7       	ldi	r30, 0x75	; 117
    5588:	e9 ea       	ldi	r30, 0xA9	; 169
    558a:	eb ec       	ldi	r30, 0xCB	; 203
    558c:	ed ee       	ldi	r30, 0xED	; 237
    558e:	ef ef       	ldi	r30, 0xFF	; 255
    5590:	f0 f0       	brcs	.+60     	; 0x55ce <waves+0x6ce>
    5592:	f0 f1       	brcs	.+124    	; 0x5610 <waves+0x710>
    5594:	f1 f1       	breq	.+124    	; 0x5612 <waves+0x712>
    5596:	f1 f2       	breq	.-68     	; 0x5554 <waves+0x654>
    5598:	f2 f2       	brmi	.-68     	; 0x5556 <waves+0x656>
    559a:	f2 f2       	brmi	.-68     	; 0x5558 <waves+0x658>
    559c:	f2 f2       	brmi	.-68     	; 0x555a <waves+0x65a>
    559e:	f2 f3       	brmi	.-4      	; 0x559c <waves+0x69c>
    55a0:	f3 f3       	brvs	.-4      	; 0x559e <waves+0x69e>
    55a2:	f3 f3       	brvs	.-4      	; 0x55a0 <waves+0x6a0>
    55a4:	f3 f3       	brvs	.-4      	; 0x55a2 <waves+0x6a2>
    55a6:	f3 f3       	brvs	.-4      	; 0x55a4 <waves+0x6a4>
    55a8:	f3 f3       	brvs	.-4      	; 0x55a6 <waves+0x6a6>
    55aa:	f3 f3       	brvs	.-4      	; 0x55a8 <waves+0x6a8>
    55ac:	f3 f3       	brvs	.-4      	; 0x55aa <waves+0x6aa>
    55ae:	f3 f3       	brvs	.-4      	; 0x55ac <waves+0x6ac>
    55b0:	f3 f3       	brvs	.-4      	; 0x55ae <waves+0x6ae>
    55b2:	f3 f3       	brvs	.-4      	; 0x55b0 <waves+0x6b0>
    55b4:	f3 f3       	brvs	.-4      	; 0x55b2 <waves+0x6b2>
    55b6:	f3 f3       	brvs	.-4      	; 0x55b4 <waves+0x6b4>
    55b8:	f3 f3       	brvs	.-4      	; 0x55b6 <waves+0x6b6>
    55ba:	f3 f3       	brvs	.-4      	; 0x55b8 <waves+0x6b8>
    55bc:	f3 f3       	brvs	.-4      	; 0x55ba <waves+0x6ba>
    55be:	f3 f3       	brvs	.-4      	; 0x55bc <waves+0x6bc>
    55c0:	f3 f3       	brvs	.-4      	; 0x55be <waves+0x6be>
    55c2:	f3 f3       	brvs	.-4      	; 0x55c0 <waves+0x6c0>
    55c4:	f3 f3       	brvs	.-4      	; 0x55c2 <waves+0x6c2>
    55c6:	f3 f3       	brvs	.-4      	; 0x55c4 <waves+0x6c4>
    55c8:	f3 f3       	brvs	.-4      	; 0x55c6 <waves+0x6c6>
    55ca:	f3 f3       	brvs	.-4      	; 0x55c8 <waves+0x6c8>
    55cc:	f3 f3       	brvs	.-4      	; 0x55ca <waves+0x6ca>
    55ce:	f3 f3       	brvs	.-4      	; 0x55cc <waves+0x6cc>
    55d0:	f3 f3       	brvs	.-4      	; 0x55ce <waves+0x6ce>
    55d2:	f3 f3       	brvs	.-4      	; 0x55d0 <waves+0x6d0>
    55d4:	f3 f3       	brvs	.-4      	; 0x55d2 <waves+0x6d2>
    55d6:	f3 f3       	brvs	.-4      	; 0x55d4 <waves+0x6d4>
    55d8:	f3 f3       	brvs	.-4      	; 0x55d6 <waves+0x6d6>
    55da:	f3 f3       	brvs	.-4      	; 0x55d8 <waves+0x6d8>
    55dc:	f3 f3       	brvs	.-4      	; 0x55da <waves+0x6da>
    55de:	f3 f3       	brvs	.-4      	; 0x55dc <waves+0x6dc>
    55e0:	f2 f2       	brmi	.-68     	; 0x559e <waves+0x69e>
    55e2:	f2 f2       	brmi	.-68     	; 0x55a0 <waves+0x6a0>
    55e4:	f2 f2       	brmi	.-68     	; 0x55a2 <waves+0x6a2>
    55e6:	f2 f2       	brmi	.-68     	; 0x55a4 <waves+0x6a4>
    55e8:	f1 f1       	breq	.+124    	; 0x5666 <waves+0x766>
    55ea:	f1 f1       	breq	.+124    	; 0x5668 <waves+0x768>
    55ec:	f0 f0       	brcs	.+60     	; 0x562a <waves+0x72a>
    55ee:	f0 ef       	ldi	r31, 0xF0	; 240
    55f0:	ef ee       	ldi	r30, 0xEF	; 239
    55f2:	ed ec       	ldi	r30, 0xCD	; 205
    55f4:	eb ea       	ldi	r30, 0xAB	; 171
    55f6:	e9 e7       	ldi	r30, 0x79	; 121
    55f8:	e5 e3       	ldi	r30, 0x35	; 53
    55fa:	df db       	rcall	.-2114   	; 0x4dba <steptable+0xb2>
    55fc:	d5 cc       	rjmp	.-1622   	; 0x4fa8 <waves+0xa8>
    55fe:	c6 00       	.word	0x00c6	; ????
    5600:	00 28       	or	r0, r0
    5602:	3d 42       	sbci	r19, 0x2D	; 45
    5604:	30 2d       	mov	r19, r0
    5606:	2c 2b       	or	r18, r28
    5608:	2c 2d       	mov	r18, r12
    560a:	2e 2f       	mov	r18, r30
    560c:	30 32       	cpi	r19, 0x20	; 32
    560e:	33 35       	cpi	r19, 0x53	; 83
    5610:	37 39       	cpi	r19, 0x97	; 151
    5612:	3b 3d       	cpi	r19, 0xDB	; 219
    5614:	3f 41       	sbci	r19, 0x1F	; 31
    5616:	43 45       	sbci	r20, 0x53	; 83
    5618:	48 4a       	sbci	r20, 0xA8	; 168
    561a:	4c 4e       	sbci	r20, 0xEC	; 236
    561c:	50 53       	subi	r21, 0x30	; 48
    561e:	55 57       	subi	r21, 0x75	; 117
    5620:	59 5b       	subi	r21, 0xB9	; 185
    5622:	5d 5f       	subi	r21, 0xFD	; 253
    5624:	61 63       	ori	r22, 0x31	; 49
    5626:	65 67       	ori	r22, 0x75	; 117
    5628:	69 6b       	ori	r22, 0xB9	; 185
    562a:	6c 6e       	ori	r22, 0xEC	; 236
    562c:	70 71       	andi	r23, 0x10	; 16
    562e:	73 74       	andi	r23, 0x43	; 67
    5630:	75 77       	andi	r23, 0x75	; 117
    5632:	78 79       	andi	r23, 0x98	; 152
    5634:	7a 7b       	andi	r23, 0xBA	; 186
    5636:	7c 7d       	andi	r23, 0xDC	; 220
    5638:	7d 7e       	andi	r23, 0xED	; 237
    563a:	7e 7f       	andi	r23, 0xFE	; 254
    563c:	7f 7f       	andi	r23, 0xFF	; 255
    563e:	7f 7f       	andi	r23, 0xFF	; 255
    5640:	7f 7f       	andi	r23, 0xFF	; 255
    5642:	7f 7f       	andi	r23, 0xFF	; 255
    5644:	7f 7f       	andi	r23, 0xFF	; 255
    5646:	7e 7e       	andi	r23, 0xEE	; 238
    5648:	7d 7d       	andi	r23, 0xDD	; 221
    564a:	7c 7b       	andi	r23, 0xBC	; 188
    564c:	7a 79       	andi	r23, 0x9A	; 154
    564e:	78 77       	andi	r23, 0x78	; 120
    5650:	75 74       	andi	r23, 0x45	; 69
    5652:	73 71       	andi	r23, 0x13	; 19
    5654:	70 6e       	ori	r23, 0xE0	; 224
    5656:	6c 6b       	ori	r22, 0xBC	; 188
    5658:	69 67       	ori	r22, 0x79	; 121
    565a:	65 63       	ori	r22, 0x35	; 53
    565c:	61 5f       	subi	r22, 0xF1	; 241
    565e:	5d 5b       	subi	r21, 0xBD	; 189
    5660:	59 57       	subi	r21, 0x79	; 121
    5662:	55 53       	subi	r21, 0x35	; 53
    5664:	50 4e       	sbci	r21, 0xE0	; 224
    5666:	4c 4a       	sbci	r20, 0xAC	; 172
    5668:	48 45       	sbci	r20, 0x58	; 88
    566a:	43 41       	sbci	r20, 0x13	; 19
    566c:	3f 3d       	cpi	r19, 0xDF	; 223
    566e:	3b 39       	cpi	r19, 0x9B	; 155
    5670:	37 35       	cpi	r19, 0x57	; 87
    5672:	33 32       	cpi	r19, 0x23	; 35
    5674:	30 2f       	mov	r19, r16
    5676:	2e 2d       	mov	r18, r14
    5678:	2c 2b       	or	r18, r28
    567a:	2c 2d       	mov	r18, r12
    567c:	30 42       	sbci	r19, 0x20	; 32
    567e:	3d 28       	or	r3, r13
    5680:	00 e9       	ldi	r16, 0x90	; 144
    5682:	e5 fe       	sbrs	r14, 5
    5684:	d4 d7       	rcall	.+4008   	; 0x662e <update_level+0x2e>
    5686:	d7 d7       	rcall	.+4014   	; 0x6636 <update_level+0x36>
    5688:	d6 d4       	rcall	.+2476   	; 0x6036 <LBRotateSprites+0x54>
    568a:	d2 d0       	rcall	.+420    	; 0x5830 <waves+0x930>
    568c:	ce cc       	rjmp	.-1636   	; 0x502a <waves+0x12a>
    568e:	ca c8       	rjmp	.-3692   	; 0x4824 <ProcessMusic+0x60>
    5690:	c6 c3       	rjmp	.+1932   	; 0x5e1e <LBGetJoyPadState+0x10>
    5692:	c1 bf       	out	0x31, r28	; 49
    5694:	bd ba       	out	0x1d, r11	; 29
    5696:	b8 b6       	in	r11, 0x38	; 56
    5698:	b4 b1       	in	r27, 0x04	; 4
    569a:	af ad       	ldd	r26, Y+63	; 0x3f
    569c:	ab a9       	ldd	r26, Y+51	; 0x33
    569e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    56a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    56a2:	9f 9e       	mul	r9, r31
    56a4:	9c 9a       	sbi	0x13, 4	; 19
    56a6:	99 97       	sbiw	r26, 0x29	; 41
    56a8:	95 94       	asr	r9
    56aa:	93 91       	.word	0x9193	; ????
    56ac:	90 8f       	std	Z+24, r25	; 0x18
    56ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    56b0:	8b 8a       	std	Y+19, r8	; 0x13
    56b2:	89 88       	ldd	r8, Y+17	; 0x11
    56b4:	88 87       	std	Y+8, r24	; 0x08
    56b6:	86 85       	ldd	r24, Z+14	; 0x0e
    56b8:	85 84       	ldd	r8, Z+13	; 0x0d
    56ba:	84 84       	ldd	r8, Z+12	; 0x0c
    56bc:	83 83       	std	Z+3, r24	; 0x03
    56be:	83 83       	std	Z+3, r24	; 0x03
    56c0:	83 83       	std	Z+3, r24	; 0x03
    56c2:	83 83       	std	Z+3, r24	; 0x03
    56c4:	83 84       	ldd	r8, Z+11	; 0x0b
    56c6:	84 84       	ldd	r8, Z+12	; 0x0c
    56c8:	85 85       	ldd	r24, Z+13	; 0x0d
    56ca:	86 87       	std	Z+14, r24	; 0x0e
    56cc:	88 88       	ldd	r8, Y+16	; 0x10
    56ce:	89 8a       	std	Y+17, r8	; 0x11
    56d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    56d2:	8d 8f       	std	Y+29, r24	; 0x1d
    56d4:	90 91 93 94 	lds	r25, 0x9493
    56d8:	95 97       	sbiw	r26, 0x25	; 37
    56da:	99 9a       	sbi	0x13, 1	; 19
    56dc:	9c 9e       	mul	r9, r28
    56de:	9f a1       	ldd	r25, Y+39	; 0x27
    56e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    56e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    56e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    56e6:	af b1       	in	r26, 0x0f	; 15
    56e8:	b4 b6       	in	r11, 0x34	; 52
    56ea:	b8 ba       	out	0x18, r11	; 24
    56ec:	bd bf       	out	0x3d, r27	; 61
    56ee:	c1 c3       	rjmp	.+1922   	; 0x5e72 <LBGetJoyPadState+0x64>
    56f0:	c6 c8       	rjmp	.-3700   	; 0x487e <ProcessMusic+0xba>
    56f2:	ca cc       	rjmp	.-1644   	; 0x5088 <waves+0x188>
    56f4:	ce d0       	rcall	.+412    	; 0x5892 <waves+0x992>
    56f6:	d2 d4       	rcall	.+2468   	; 0x609c <LBRotateSprites+0xba>
    56f8:	d6 d7       	rcall	.+4012   	; 0x66a6 <level_transition+0x34>
    56fa:	d7 d7       	rcall	.+4014   	; 0x66aa <level_transition+0x38>
    56fc:	d4 fe       	sbrs	r13, 4
    56fe:	e5 e9       	ldi	r30, 0x95	; 149
    5700:	f9 f8       	.word	0xf8f9	; ????
    5702:	f9 f5       	brne	.+126    	; 0x5782 <waves+0x882>
    5704:	eb e1       	ldi	r30, 0x1B	; 27
    5706:	dd de       	rcall	.-582    	; 0x54c2 <waves+0x5c2>
    5708:	e0 e2       	ldi	r30, 0x20	; 32
    570a:	e4 e5       	ldi	r30, 0x54	; 84
    570c:	e6 e5       	ldi	r30, 0x56	; 86
    570e:	e4 e2       	ldi	r30, 0x24	; 36
    5710:	de d9       	rcall	.-3140   	; 0x4ace <ProcessMusic+0x30a>
    5712:	d2 ca       	rjmp	.-2652   	; 0x4cb8 <esmw+0x4c>
    5714:	c1 b7       	in	r28, 0x31	; 49
    5716:	ac a2       	std	Y+36, r10	; 0x24
    5718:	99 91       	ld	r25, Y+
    571a:	8a 86       	std	Y+10, r8	; 0x0a
    571c:	83 81       	ldd	r24, Z+3	; 0x03
    571e:	80 80       	ld	r8, Z
    5720:	81 82       	std	Z+1, r8	; 0x01
    5722:	83 85       	ldd	r24, Z+11	; 0x0b
    5724:	86 88       	ldd	r8, Z+22	; 0x16
    5726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    5728:	8d 8f       	std	Y+29, r24	; 0x1d
    572a:	90 92 93 95 	sts	0x9593, r9
    572e:	96 97       	sbiw	r26, 0x26	; 38
    5730:	98 99       	sbic	0x13, 0	; 19
    5732:	9a 9b       	sbis	0x13, 2	; 19
    5734:	9b 9c       	mul	r9, r11
    5736:	9d 9d       	mul	r25, r13
    5738:	9d 9e       	mul	r9, r29
    573a:	9e 9e       	mul	r9, r30
    573c:	9f 9f       	mul	r25, r31
    573e:	9f 9f       	mul	r25, r31
    5740:	9f 9f       	mul	r25, r31
    5742:	9f 9e       	mul	r9, r31
    5744:	9e 9e       	mul	r9, r30
    5746:	9d 9d       	mul	r25, r13
    5748:	9d 9c       	mul	r9, r13
    574a:	9b 9b       	sbis	0x13, 3	; 19
    574c:	9a 99       	sbic	0x13, 2	; 19
    574e:	98 97       	sbiw	r26, 0x28	; 40
    5750:	96 95       	lsr	r25
    5752:	93 92       	.word	0x9293	; ????
    5754:	90 8f       	std	Z+24, r25	; 0x18
    5756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    5758:	8a 88       	ldd	r8, Y+18	; 0x12
    575a:	86 85       	ldd	r24, Z+14	; 0x0e
    575c:	83 82       	std	Z+3, r8	; 0x03
    575e:	81 80       	ldd	r8, Z+1	; 0x01
    5760:	80 81       	ld	r24, Z
    5762:	83 86       	std	Z+11, r8	; 0x0b
    5764:	8a 91       	ld	r24, -Y
    5766:	99 a2       	std	Y+33, r9	; 0x21
    5768:	ac b7       	in	r26, 0x3c	; 60
    576a:	c1 ca       	rjmp	.-2686   	; 0x4cee <esmw+0x82>
    576c:	d2 d9       	rcall	.-3164   	; 0x4b12 <ProcessMusic+0x34e>
    576e:	de e2       	ldi	r29, 0x2E	; 46
    5770:	e4 e5       	ldi	r30, 0x54	; 84
    5772:	e6 e5       	ldi	r30, 0x56	; 86
    5774:	e4 e2       	ldi	r30, 0x24	; 36
    5776:	e0 de       	rcall	.-576    	; 0x5538 <waves+0x638>
    5778:	dd e1       	ldi	r29, 0x1D	; 29
    577a:	eb f5       	brvc	.+122    	; 0x57f6 <waves+0x8f6>
    577c:	f9 f8       	.word	0xf8f9	; ????
    577e:	f9 00       	.word	0x00f9	; ????
    5780:	07 08       	sbc	r0, r7
    5782:	07 0b       	sbc	r16, r23
    5784:	15 1f       	adc	r17, r21
    5786:	23 22       	and	r2, r19
    5788:	20 1e       	adc	r2, r16
    578a:	1c 1b       	sub	r17, r28
    578c:	1a 1b       	sub	r17, r26
    578e:	1c 1e       	adc	r1, r28
    5790:	22 27       	eor	r18, r18
    5792:	2e 36       	cpi	r18, 0x6E	; 110
    5794:	3f 49       	sbci	r19, 0x9F	; 159
    5796:	54 5e       	subi	r21, 0xE4	; 228
    5798:	67 6f       	ori	r22, 0xF7	; 247
    579a:	76 7a       	andi	r23, 0xA6	; 166
    579c:	7e 7f       	andi	r23, 0xFE	; 254
    579e:	7f 7f       	andi	r23, 0xFF	; 255
    57a0:	7f 7e       	andi	r23, 0xEF	; 239
    57a2:	7d 7b       	andi	r23, 0xBD	; 189
    57a4:	7a 78       	andi	r23, 0x8A	; 138
    57a6:	76 74       	andi	r23, 0x46	; 70
    57a8:	73 71       	andi	r23, 0x13	; 19
    57aa:	70 6e       	ori	r23, 0xE0	; 224
    57ac:	6d 6b       	ori	r22, 0xBD	; 189
    57ae:	6a 69       	ori	r22, 0x9A	; 154
    57b0:	68 67       	ori	r22, 0x78	; 120
    57b2:	66 65       	ori	r22, 0x56	; 86
    57b4:	65 64       	ori	r22, 0x45	; 69
    57b6:	64 63       	ori	r22, 0x34	; 52
    57b8:	63 62       	ori	r22, 0x23	; 35
    57ba:	62 62       	ori	r22, 0x22	; 34
    57bc:	61 61       	ori	r22, 0x11	; 17
    57be:	61 61       	ori	r22, 0x11	; 17
    57c0:	61 61       	ori	r22, 0x11	; 17
    57c2:	61 62       	ori	r22, 0x21	; 33
    57c4:	62 62       	ori	r22, 0x22	; 34
    57c6:	63 63       	ori	r22, 0x33	; 51
    57c8:	63 64       	ori	r22, 0x43	; 67
    57ca:	65 65       	ori	r22, 0x55	; 85
    57cc:	66 67       	ori	r22, 0x76	; 118
    57ce:	68 69       	ori	r22, 0x98	; 152
    57d0:	6a 6b       	ori	r22, 0xBA	; 186
    57d2:	6d 6e       	ori	r22, 0xED	; 237
    57d4:	70 71       	andi	r23, 0x10	; 16
    57d6:	73 74       	andi	r23, 0x43	; 67
    57d8:	76 78       	andi	r23, 0x86	; 134
    57da:	7a 7b       	andi	r23, 0xBA	; 186
    57dc:	7d 7e       	andi	r23, 0xED	; 237
    57de:	7f 7f       	andi	r23, 0xFF	; 255
    57e0:	7f 7f       	andi	r23, 0xFF	; 255
    57e2:	7e 7a       	andi	r23, 0xAE	; 174
    57e4:	76 6f       	ori	r23, 0xF6	; 246
    57e6:	67 5e       	subi	r22, 0xE7	; 231
    57e8:	54 49       	sbci	r21, 0x94	; 148
    57ea:	3f 36       	cpi	r19, 0x6F	; 111
    57ec:	2e 27       	eor	r18, r30
    57ee:	22 1e       	adc	r2, r18
    57f0:	1c 1b       	sub	r17, r28
    57f2:	1a 1b       	sub	r17, r26
    57f4:	1c 1e       	adc	r1, r28
    57f6:	20 22       	and	r2, r16
    57f8:	23 1f       	adc	r18, r19
    57fa:	15 0b       	sbc	r17, r21
    57fc:	07 08       	sbc	r0, r7
    57fe:	07 00       	.word	0x0007	; ????
    5800:	1f 31       	cpi	r17, 0x1F	; 31
    5802:	3d 44       	sbci	r19, 0x4D	; 77
    5804:	4e 53       	subi	r20, 0x3E	; 62
    5806:	54 56       	subi	r21, 0x64	; 100
    5808:	5a 5f       	subi	r21, 0xFA	; 250
    580a:	64 69       	ori	r22, 0x94	; 148
    580c:	6e 74       	andi	r22, 0x4E	; 78
    580e:	76 79       	andi	r23, 0x96	; 150
    5810:	7c 7f       	andi	r23, 0xFC	; 252
    5812:	7f 7f       	andi	r23, 0xFF	; 255
    5814:	7f 7f       	andi	r23, 0xFF	; 255
    5816:	7f 7f       	andi	r23, 0xFF	; 255
    5818:	7f 7f       	andi	r23, 0xFF	; 255
    581a:	7f 7f       	andi	r23, 0xFF	; 255
    581c:	7f 7f       	andi	r23, 0xFF	; 255
    581e:	7f 7f       	andi	r23, 0xFF	; 255
    5820:	7f 7f       	andi	r23, 0xFF	; 255
    5822:	7f 7f       	andi	r23, 0xFF	; 255
    5824:	7f 7f       	andi	r23, 0xFF	; 255
    5826:	7f 7f       	andi	r23, 0xFF	; 255
    5828:	7f 7f       	andi	r23, 0xFF	; 255
    582a:	7f 7f       	andi	r23, 0xFF	; 255
    582c:	7f 7f       	andi	r23, 0xFF	; 255
    582e:	7f 7f       	andi	r23, 0xFF	; 255
    5830:	7f 7f       	andi	r23, 0xFF	; 255
    5832:	7f 7f       	andi	r23, 0xFF	; 255
    5834:	7f 7f       	andi	r23, 0xFF	; 255
    5836:	7f 7f       	andi	r23, 0xFF	; 255
    5838:	7f 7f       	andi	r23, 0xFF	; 255
    583a:	7f 7f       	andi	r23, 0xFF	; 255
    583c:	7f 7f       	andi	r23, 0xFF	; 255
    583e:	7f 7f       	andi	r23, 0xFF	; 255
    5840:	7f 7f       	andi	r23, 0xFF	; 255
    5842:	7f 7f       	andi	r23, 0xFF	; 255
    5844:	7f 7f       	andi	r23, 0xFF	; 255
    5846:	7f 7f       	andi	r23, 0xFF	; 255
    5848:	7f 7f       	andi	r23, 0xFF	; 255
    584a:	7f 7f       	andi	r23, 0xFF	; 255
    584c:	7f 7f       	andi	r23, 0xFF	; 255
    584e:	7f 7f       	andi	r23, 0xFF	; 255
    5850:	7f 7f       	andi	r23, 0xFF	; 255
    5852:	7f 7f       	andi	r23, 0xFF	; 255
    5854:	7f 7f       	andi	r23, 0xFF	; 255
    5856:	7f 7f       	andi	r23, 0xFF	; 255
    5858:	7f 7f       	andi	r23, 0xFF	; 255
    585a:	7f 7f       	andi	r23, 0xFF	; 255
    585c:	7f 7f       	andi	r23, 0xFF	; 255
    585e:	7f 7f       	andi	r23, 0xFF	; 255
    5860:	7f 7f       	andi	r23, 0xFF	; 255
    5862:	7f 7f       	andi	r23, 0xFF	; 255
    5864:	7f 7f       	andi	r23, 0xFF	; 255
    5866:	7f 7f       	andi	r23, 0xFF	; 255
    5868:	7f 7f       	andi	r23, 0xFF	; 255
    586a:	7f 7f       	andi	r23, 0xFF	; 255
    586c:	7f 7f       	andi	r23, 0xFF	; 255
    586e:	7f 7f       	andi	r23, 0xFF	; 255
    5870:	7f 7f       	andi	r23, 0xFF	; 255
    5872:	7f 7f       	andi	r23, 0xFF	; 255
    5874:	7f 7f       	andi	r23, 0xFF	; 255
    5876:	7f 7f       	andi	r23, 0xFF	; 255
    5878:	7f 7f       	andi	r23, 0xFF	; 255
    587a:	7f 7c       	andi	r23, 0xCF	; 207
    587c:	78 71       	andi	r23, 0x18	; 24
    587e:	68 4c       	sbci	r22, 0xC8	; 200
    5880:	2c 1c       	adc	r2, r12
    5882:	12 0c       	add	r1, r2
    5884:	0a 0b       	sbc	r16, r26
    5886:	0a 05       	cpc	r16, r10
    5888:	fd f3       	brhs	.-2      	; 0x5888 <waves+0x988>
    588a:	e9 df       	rcall	.-46     	; 0x585e <waves+0x95e>
    588c:	d4 ca       	rjmp	.-2648   	; 0x4e36 <steptable+0x12e>
    588e:	c0 b7       	in	r28, 0x30	; 48
    5890:	ae a6       	std	Y+46, r10	; 0x2e
    5892:	9e 97       	sbiw	r26, 0x2e	; 46
    5894:	91 8b       	std	Z+17, r25	; 0x11
    5896:	86 85       	ldd	r24, Z+14	; 0x0e
    5898:	82 80       	ldd	r8, Z+2	; 0x02
    589a:	80 80       	ld	r8, Z
    589c:	80 80       	ld	r8, Z
    589e:	80 80       	ld	r8, Z
    58a0:	80 80       	ld	r8, Z
    58a2:	80 80       	ld	r8, Z
    58a4:	80 80       	ld	r8, Z
    58a6:	80 80       	ld	r8, Z
    58a8:	80 80       	ld	r8, Z
    58aa:	80 80       	ld	r8, Z
    58ac:	80 80       	ld	r8, Z
    58ae:	80 80       	ld	r8, Z
    58b0:	80 80       	ld	r8, Z
    58b2:	80 80       	ld	r8, Z
    58b4:	80 80       	ld	r8, Z
    58b6:	80 80       	ld	r8, Z
    58b8:	80 80       	ld	r8, Z
    58ba:	80 80       	ld	r8, Z
    58bc:	80 80       	ld	r8, Z
    58be:	80 80       	ld	r8, Z
    58c0:	80 80       	ld	r8, Z
    58c2:	80 80       	ld	r8, Z
    58c4:	80 80       	ld	r8, Z
    58c6:	80 80       	ld	r8, Z
    58c8:	80 80       	ld	r8, Z
    58ca:	80 80       	ld	r8, Z
    58cc:	80 80       	ld	r8, Z
    58ce:	80 80       	ld	r8, Z
    58d0:	80 80       	ld	r8, Z
    58d2:	80 80       	ld	r8, Z
    58d4:	80 80       	ld	r8, Z
    58d6:	80 80       	ld	r8, Z
    58d8:	80 80       	ld	r8, Z
    58da:	80 80       	ld	r8, Z
    58dc:	80 80       	ld	r8, Z
    58de:	80 80       	ld	r8, Z
    58e0:	80 80       	ld	r8, Z
    58e2:	80 80       	ld	r8, Z
    58e4:	80 80       	ld	r8, Z
    58e6:	80 80       	ld	r8, Z
    58e8:	80 80       	ld	r8, Z
    58ea:	80 80       	ld	r8, Z
    58ec:	80 80       	ld	r8, Z
    58ee:	80 80       	ld	r8, Z
    58f0:	80 80       	ld	r8, Z
    58f2:	80 80       	ld	r8, Z
    58f4:	80 87       	std	Z+8, r24	; 0x08
    58f6:	91 9d       	mul	r25, r1
    58f8:	ac c4       	rjmp	.+2392   	; 0x6252 <get_hero_spawn_x+0x4>
    58fa:	cb d4       	rcall	.+2454   	; 0x6292 <get_level_tile+0x10>
    58fc:	dd f2       	brhs	.-74     	; 0x58b4 <waves+0x9b4>
    58fe:	fa fa       	.word	0xfafa	; ????

00005900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    5900:	80 91 db 0c 	lds	r24, 0x0CDB
    5904:	90 91 6a 0d 	lds	r25, 0x0D6A
    5908:	89 17       	cp	r24, r25
    590a:	78 f4       	brcc	.+30     	; 0x592a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    590c:	e8 2f       	mov	r30, r24
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	9f 01       	movw	r18, r30
    5912:	22 0f       	add	r18, r18
    5914:	33 1f       	adc	r19, r19
    5916:	e2 0f       	add	r30, r18
    5918:	f3 1f       	adc	r31, r19
    591a:	e6 5c       	subi	r30, 0xC6	; 198
    591c:	f3 4f       	sbci	r31, 0xF3	; 243
    591e:	a0 81       	ld	r26, Z
    5920:	b1 81       	ldd	r27, Z+1	; 0x01
    5922:	92 81       	ldd	r25, Z+2	; 0x02
    5924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    5926:	8f 5f       	subi	r24, 0xFF	; 255
    5928:	ed cf       	rjmp	.-38     	; 0x5904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    592a:	08 95       	ret

0000592c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    592c:	2f 92       	push	r2
    592e:	3f 92       	push	r3
    5930:	4f 92       	push	r4
    5932:	5f 92       	push	r5
    5934:	6f 92       	push	r6
    5936:	7f 92       	push	r7
    5938:	8f 92       	push	r8
    593a:	9f 92       	push	r9
    593c:	af 92       	push	r10
    593e:	bf 92       	push	r11
    5940:	cf 92       	push	r12
    5942:	df 92       	push	r13
    5944:	ef 92       	push	r14
    5946:	ff 92       	push	r15
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	00 d0       	rcall	.+0      	; 0x5952 <ProcessSprites+0x26>
    5952:	00 d0       	rcall	.+0      	; 0x5954 <ProcessSprites+0x28>
    5954:	cd b7       	in	r28, 0x3d	; 61
    5956:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    5958:	80 91 00 05 	lds	r24, 0x0500
    595c:	88 23       	and	r24, r24
    595e:	09 f4       	brne	.+2      	; 0x5962 <ProcessSprites+0x36>
    5960:	e0 c0       	rjmp	.+448    	; 0x5b22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    5962:	80 91 da 0c 	lds	r24, 0x0CDA
    5966:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    596a:	80 93 6a 0d 	sts	0x0D6A, r24
    596e:	e2 e0       	ldi	r30, 0x02	; 2
    5970:	ce 2e       	mov	r12, r30
    5972:	e5 e0       	ldi	r30, 0x05	; 5
    5974:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    5976:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    5978:	f6 01       	movw	r30, r12
    597a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    597c:	20 3e       	cpi	r18, 0xE0	; 224
    597e:	09 f4       	brne	.+2      	; 0x5982 <ProcessSprites+0x56>
    5980:	b1 c0       	rjmp	.+354    	; 0x5ae4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    5982:	80 91 9c 0c 	lds	r24, 0x0C9C
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	82 0f       	add	r24, r18
    598a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    598c:	41 81       	ldd	r20, Z+1	; 0x01
    598e:	20 91 9d 0c 	lds	r18, 0x0C9D
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	24 0f       	add	r18, r20
    5996:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    5998:	ac 01       	movw	r20, r24
    599a:	73 e0       	ldi	r23, 0x03	; 3
    599c:	56 95       	lsr	r21
    599e:	47 95       	ror	r20
    59a0:	7a 95       	dec	r23
    59a2:	e1 f7       	brne	.-8      	; 0x599c <ProcessSprites+0x70>
    59a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    59a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    59a8:	11 f0       	breq	.+4      	; 0x59ae <ProcessSprites+0x82>
    59aa:	92 e0       	ldi	r25, 0x02	; 2
    59ac:	01 c0       	rjmp	.+2      	; 0x59b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    59ae:	91 e0       	ldi	r25, 0x01	; 1
    59b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    59b2:	a9 01       	movw	r20, r18
    59b4:	63 e0       	ldi	r22, 0x03	; 3
    59b6:	56 95       	lsr	r21
    59b8:	47 95       	ror	r20
    59ba:	6a 95       	dec	r22
    59bc:	e1 f7       	brne	.-8      	; 0x59b6 <ProcessSprites+0x8a>
    59be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    59c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    59c2:	19 f0       	breq	.+6      	; 0x59ca <ProcessSprites+0x9e>
    59c4:	52 e0       	ldi	r21, 0x02	; 2
    59c6:	35 2e       	mov	r3, r21
    59c8:	02 c0       	rjmp	.+4      	; 0x59ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    59ca:	33 24       	eor	r3, r3
    59cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	32 2f       	mov	r19, r18
    59d2:	22 27       	eor	r18, r18
    59d4:	f9 01       	movw	r30, r18
    59d6:	e8 0f       	add	r30, r24
    59d8:	f1 1d       	adc	r31, r1
    59da:	fc 83       	std	Y+4, r31	; 0x04
    59dc:	eb 83       	std	Y+3, r30	; 0x03
    59de:	e1 2c       	mov	r14, r1
    59e0:	f1 2c       	mov	r15, r1
    59e2:	be 2c       	mov	r11, r14
    59e4:	aa 24       	eor	r10, r10
    59e6:	26 2c       	mov	r2, r6
    59e8:	45 2c       	mov	r4, r5
    59ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    59ec:	84 2c       	mov	r8, r4
    59ee:	91 2c       	mov	r9, r1
    59f0:	84 2d       	mov	r24, r4
    59f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    59f6:	42 2f       	mov	r20, r18
    59f8:	50 e0       	ldi	r21, 0x00	; 0
    59fa:	44 0f       	add	r20, r20
    59fc:	55 1f       	adc	r21, r21
    59fe:	84 16       	cp	r8, r20
    5a00:	95 06       	cpc	r9, r21
    5a02:	14 f0       	brlt	.+4      	; 0x5a08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    5a04:	22 0f       	add	r18, r18
    5a06:	03 c0       	rjmp	.+6      	; 0x5a0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    5a08:	42 16       	cp	r4, r18
    5a0a:	10 f0       	brcs	.+4      	; 0x5a10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    5a0c:	84 2d       	mov	r24, r4
    5a0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    5a10:	ff e1       	ldi	r31, 0x1F	; 31
    5a12:	f2 15       	cp	r31, r2
    5a14:	18 f4       	brcc	.+6      	; 0x5a1c <ProcessSprites+0xf0>
    5a16:	00 ee       	ldi	r16, 0xE0	; 224
    5a18:	02 0d       	add	r16, r2
    5a1a:	01 c0       	rjmp	.+2      	; 0x5a1e <ProcessSprites+0xf2>
    5a1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    5a1e:	28 2f       	mov	r18, r24
    5a20:	26 95       	lsr	r18
    5a22:	26 95       	lsr	r18
    5a24:	26 95       	lsr	r18
    5a26:	10 e0       	ldi	r17, 0x00	; 0
    5a28:	40 e2       	ldi	r20, 0x20	; 32
    5a2a:	24 9f       	mul	r18, r20
    5a2c:	00 0d       	add	r16, r0
    5a2e:	11 1d       	adc	r17, r1
    5a30:	11 24       	eor	r1, r1
    5a32:	23 e0       	ldi	r18, 0x03	; 3
    5a34:	00 0f       	add	r16, r16
    5a36:	11 1f       	adc	r17, r17
    5a38:	2a 95       	dec	r18
    5a3a:	e1 f7       	brne	.-8      	; 0x5a34 <ProcessSprites+0x108>
    5a3c:	87 70       	andi	r24, 0x07	; 7
    5a3e:	08 0f       	add	r16, r24
    5a40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    5a42:	00 50       	subi	r16, 0x00	; 0
    5a44:	1f 4f       	sbci	r17, 0xFF	; 255
    5a46:	f8 01       	movw	r30, r16
    5a48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    5a4a:	81 e0       	ldi	r24, 0x01	; 1
    5a4c:	7c 31       	cpi	r23, 0x1C	; 28
    5a4e:	08 f4       	brcc	.+2      	; 0x5a52 <ProcessSprites+0x126>
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	21 e0       	ldi	r18, 0x01	; 1
    5a54:	30 91 db 0c 	lds	r19, 0x0CDB
    5a58:	73 17       	cp	r23, r19
    5a5a:	18 f0       	brcs	.+6      	; 0x5a62 <ProcessSprites+0x136>
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	88 23       	and	r24, r24
    5a60:	51 f1       	breq	.+84     	; 0x5ab6 <ProcessSprites+0x18a>
    5a62:	60 91 6a 0d 	lds	r22, 0x0D6A
    5a66:	6c 31       	cpi	r22, 0x1C	; 28
    5a68:	20 f5       	brcc	.+72     	; 0x5ab2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    5a6a:	88 23       	and	r24, r24
    5a6c:	31 f0       	breq	.+12     	; 0x5a7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    5a6e:	84 ee       	ldi	r24, 0xE4	; 228
    5a70:	87 0f       	add	r24, r23
    5a72:	7a 83       	std	Y+2, r23	; 0x02
    5a74:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <CopyFlashTile>
    5a78:	06 c0       	rjmp	.+12     	; 0x5a86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    5a7a:	22 23       	and	r18, r18
    5a7c:	29 f0       	breq	.+10     	; 0x5a88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    5a7e:	87 2f       	mov	r24, r23
    5a80:	7a 83       	std	Y+2, r23	; 0x02
    5a82:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <CopyRamTile>
    5a86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    5a88:	80 91 6a 0d 	lds	r24, 0x0D6A
    5a8c:	e8 2f       	mov	r30, r24
    5a8e:	f0 e0       	ldi	r31, 0x00	; 0
    5a90:	9f 01       	movw	r18, r30
    5a92:	22 0f       	add	r18, r18
    5a94:	33 1f       	adc	r19, r19
    5a96:	e2 0f       	add	r30, r18
    5a98:	f3 1f       	adc	r31, r19
    5a9a:	e6 5c       	subi	r30, 0xC6	; 198
    5a9c:	f3 4f       	sbci	r31, 0xF3	; 243
    5a9e:	11 83       	std	Z+1, r17	; 0x01
    5aa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    5aa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    5aa4:	f8 01       	movw	r30, r16
    5aa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    5aa8:	21 e0       	ldi	r18, 0x01	; 1
    5aaa:	28 0f       	add	r18, r24
    5aac:	20 93 6a 0d 	sts	0x0D6A, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    5ab0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    5ab2:	7c 31       	cpi	r23, 0x1C	; 28
    5ab4:	38 f4       	brcc	.+14     	; 0x5ac4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    5ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    5ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    5aba:	a5 01       	movw	r20, r10
    5abc:	67 2f       	mov	r22, r23
    5abe:	87 2d       	mov	r24, r7
    5ac0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <BlitSprite>
    5ac4:	ff ef       	ldi	r31, 0xFF	; 255
    5ac6:	af 1a       	sub	r10, r31
    5ac8:	bf 0a       	sbc	r11, r31
    5aca:	23 94       	inc	r2
    5acc:	82 2d       	mov	r24, r2
    5ace:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    5ad0:	99 81       	ldd	r25, Y+1	; 0x01
    5ad2:	89 17       	cp	r24, r25
    5ad4:	08 f4       	brcc	.+2      	; 0x5ad8 <ProcessSprites+0x1ac>
    5ad6:	8c cf       	rjmp	.-232    	; 0x59f0 <ProcessSprites+0xc4>
    5ad8:	ef ef       	ldi	r30, 0xFF	; 255
    5ada:	ee 1a       	sub	r14, r30
    5adc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    5ade:	e3 14       	cp	r14, r3
    5ae0:	08 f4       	brcc	.+2      	; 0x5ae4 <ProcessSprites+0x1b8>
    5ae2:	7f cf       	rjmp	.-258    	; 0x59e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    5ae4:	73 94       	inc	r7
    5ae6:	f4 e0       	ldi	r31, 0x04	; 4
    5ae8:	cf 0e       	add	r12, r31
    5aea:	d1 1c       	adc	r13, r1
    5aec:	4e e0       	ldi	r20, 0x0E	; 14
    5aee:	74 12       	cpse	r7, r20
    5af0:	43 cf       	rjmp	.-378    	; 0x5978 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    5af2:	0f 90       	pop	r0
    5af4:	0f 90       	pop	r0
    5af6:	0f 90       	pop	r0
    5af8:	0f 90       	pop	r0
    5afa:	df 91       	pop	r29
    5afc:	cf 91       	pop	r28
    5afe:	1f 91       	pop	r17
    5b00:	0f 91       	pop	r16
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	df 90       	pop	r13
    5b08:	cf 90       	pop	r12
    5b0a:	bf 90       	pop	r11
    5b0c:	af 90       	pop	r10
    5b0e:	9f 90       	pop	r9
    5b10:	8f 90       	pop	r8
    5b12:	7f 90       	pop	r7
    5b14:	6f 90       	pop	r6
    5b16:	5f 90       	pop	r5
    5b18:	4f 90       	pop	r4
    5b1a:	3f 90       	pop	r3
    5b1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    5b1e:	0c 94 80 2c 	jmp	0x5900	; 0x5900 <RestoreBackground>

	}
    5b22:	0f 90       	pop	r0
    5b24:	0f 90       	pop	r0
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	ff 90       	pop	r15
    5b34:	ef 90       	pop	r14
    5b36:	df 90       	pop	r13
    5b38:	cf 90       	pop	r12
    5b3a:	bf 90       	pop	r11
    5b3c:	af 90       	pop	r10
    5b3e:	9f 90       	pop	r9
    5b40:	8f 90       	pop	r8
    5b42:	7f 90       	pop	r7
    5b44:	6f 90       	pop	r6
    5b46:	5f 90       	pop	r5
    5b48:	4f 90       	pop	r4
    5b4a:	3f 90       	pop	r3
    5b4c:	2f 90       	pop	r2
    5b4e:	08 95       	ret

00005b50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    5b50:	90 91 9d 0c 	lds	r25, 0x0C9D
    5b54:	96 0f       	add	r25, r22
    5b56:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    5b5a:	20 91 9c 0c 	lds	r18, 0x0C9C
    5b5e:	82 0f       	add	r24, r18
    5b60:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    5b64:	80 91 9e 0c 	lds	r24, 0x0C9E
    5b68:	80 32       	cpi	r24, 0x20	; 32
    5b6a:	b0 f4       	brcc	.+44     	; 0x5b98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    5b6c:	29 2f       	mov	r18, r25
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	78 e0       	ldi	r23, 0x08	; 8
    5b72:	87 9f       	mul	r24, r23
    5b74:	a0 01       	movw	r20, r0
    5b76:	11 24       	eor	r1, r1
    5b78:	24 17       	cp	r18, r20
    5b7a:	35 07       	cpc	r19, r21
    5b7c:	6c f0       	brlt	.+26     	; 0x5b98 <Scroll+0x48>
				if(dy>=0){	
    5b7e:	67 fd       	sbrc	r22, 7
    5b80:	05 c0       	rjmp	.+10     	; 0x5b8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    5b82:	28 ef       	ldi	r18, 0xF8	; 248
    5b84:	82 9f       	mul	r24, r18
    5b86:	90 0d       	add	r25, r0
    5b88:	11 24       	eor	r1, r1
    5b8a:	04 c0       	rjmp	.+8      	; 0x5b94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    5b8c:	78 e0       	ldi	r23, 0x08	; 8
    5b8e:	87 9f       	mul	r24, r23
    5b90:	90 0d       	add	r25, r0
    5b92:	11 24       	eor	r1, r1
    5b94:	90 93 9d 0c 	sts	0x0C9D, r25
    5b98:	08 95       	ret

00005b9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    5b9a:	e2 e0       	ldi	r30, 0x02	; 2
    5b9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    5b9e:	80 ee       	ldi	r24, 0xE0	; 224
    5ba0:	80 83       	st	Z, r24
    5ba2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    5ba4:	95 e0       	ldi	r25, 0x05	; 5
    5ba6:	ea 33       	cpi	r30, 0x3A	; 58
    5ba8:	f9 07       	cpc	r31, r25
    5baa:	d1 f7       	brne	.-12     	; 0x5ba0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    5bac:	80 e2       	ldi	r24, 0x20	; 32
    5bae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    5bb2:	10 92 99 0c 	sts	0x0C99, r1
    5bb6:	08 95       	ret

00005bb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    5bb8:	4f 92       	push	r4
    5bba:	5f 92       	push	r5
    5bbc:	6f 92       	push	r6
    5bbe:	7f 92       	push	r7
    5bc0:	8f 92       	push	r8
    5bc2:	9f 92       	push	r9
    5bc4:	af 92       	push	r10
    5bc6:	bf 92       	push	r11
    5bc8:	cf 92       	push	r12
    5bca:	df 92       	push	r13
    5bcc:	ef 92       	push	r14
    5bce:	ff 92       	push	r15
    5bd0:	0f 93       	push	r16
    5bd2:	1f 93       	push	r17
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	68 2e       	mov	r6, r24
    5bda:	56 2e       	mov	r5, r22
    5bdc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    5bde:	fa 01       	movw	r30, r20
    5be0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    5be2:	31 96       	adiw	r30, 0x01	; 1
    5be4:	84 90       	lpm	r8, Z
    5be6:	c7 2c       	mov	r12, r7
    5be8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    5bea:	00 e0       	ldi	r16, 0x00	; 0
    5bec:	10 e0       	ldi	r17, 0x00	; 0
    5bee:	91 2c       	mov	r9, r1
    5bf0:	98 14       	cp	r9, r8
    5bf2:	f1 f0       	breq	.+60     	; 0x5c30 <DrawMap+0x78>
    5bf4:	c0 e0       	ldi	r28, 0x00	; 0
    5bf6:	d0 e0       	ldi	r29, 0x00	; 0
    5bf8:	58 01       	movw	r10, r16
    5bfa:	f2 e0       	ldi	r31, 0x02	; 2
    5bfc:	af 0e       	add	r10, r31
    5bfe:	b1 1c       	adc	r11, r1
    5c00:	49 2c       	mov	r4, r9
    5c02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    5c04:	c7 15       	cp	r28, r7
    5c06:	80 f4       	brcc	.+32     	; 0x5c28 <DrawMap+0x70>
    5c08:	95 01       	movw	r18, r10
    5c0a:	2c 0f       	add	r18, r28
    5c0c:	3d 1f       	adc	r19, r29
    5c0e:	f7 01       	movw	r30, r14
    5c10:	e2 0f       	add	r30, r18
    5c12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    5c14:	24 91       	lpm	r18, Z
    5c16:	42 2f       	mov	r20, r18
    5c18:	50 e0       	ldi	r21, 0x00	; 0
    5c1a:	64 2d       	mov	r22, r4
    5c1c:	8c 2f       	mov	r24, r28
    5c1e:	86 0d       	add	r24, r6
    5c20:	0e 94 bb 20 	call	0x4176	; 0x4176 <SetTile>
    5c24:	21 96       	adiw	r28, 0x01	; 1
    5c26:	ee cf       	rjmp	.-36     	; 0x5c04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    5c28:	93 94       	inc	r9
    5c2a:	0c 0d       	add	r16, r12
    5c2c:	1d 1d       	adc	r17, r13
    5c2e:	e0 cf       	rjmp	.-64     	; 0x5bf0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    5c30:	df 91       	pop	r29
    5c32:	cf 91       	pop	r28
    5c34:	1f 91       	pop	r17
    5c36:	0f 91       	pop	r16
    5c38:	ff 90       	pop	r15
    5c3a:	ef 90       	pop	r14
    5c3c:	df 90       	pop	r13
    5c3e:	cf 90       	pop	r12
    5c40:	bf 90       	pop	r11
    5c42:	af 90       	pop	r10
    5c44:	9f 90       	pop	r9
    5c46:	8f 90       	pop	r8
    5c48:	7f 90       	pop	r7
    5c4a:	6f 90       	pop	r6
    5c4c:	5f 90       	pop	r5
    5c4e:	4f 90       	pop	r4
    5c50:	08 95       	ret

00005c52 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    5c52:	0f 93       	push	r16
    5c54:	1f 93       	push	r17
    5c56:	cf 93       	push	r28
    5c58:	df 93       	push	r29
    5c5a:	06 2f       	mov	r16, r22
    5c5c:	c4 2f       	mov	r28, r20
    5c5e:	d5 2f       	mov	r29, r21
    5c60:	18 2f       	mov	r17, r24
    5c62:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    5c64:	fe 01       	movw	r30, r28
    5c66:	44 91       	lpm	r20, Z
		if(c!=0){
    5c68:	44 23       	and	r20, r20
    5c6a:	49 f0       	breq	.+18     	; 0x5c7e <Print+0x2c>
			c=((c&127)-32);			
    5c6c:	4f 77       	andi	r20, 0x7F	; 127
    5c6e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    5c70:	60 2f       	mov	r22, r16
    5c72:	8c 2f       	mov	r24, r28
    5c74:	81 0f       	add	r24, r17
    5c76:	0e 94 b7 20 	call	0x416e	; 0x416e <SetFont>
    5c7a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    5c7c:	f3 cf       	rjmp	.-26     	; 0x5c64 <Print+0x12>
	
}
    5c7e:	df 91       	pop	r29
    5c80:	cf 91       	pop	r28
    5c82:	1f 91       	pop	r17
    5c84:	0f 91       	pop	r16
    5c86:	08 95       	ret

00005c88 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    5c88:	0f 93       	push	r16
    5c8a:	1f 93       	push	r17
    5c8c:	cf 93       	push	r28
    5c8e:	df 93       	push	r29
    5c90:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    5c92:	c0 e0       	ldi	r28, 0x00	; 0
    5c94:	d0 e0       	ldi	r29, 0x00	; 0
    5c96:	c0 17       	cp	r28, r16
    5c98:	d1 07       	cpc	r29, r17
    5c9a:	44 f4       	brge	.+16     	; 0x5cac <WaitVsync+0x24>
		while(!GetVsyncFlag());
    5c9c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <GetVsyncFlag>
    5ca0:	88 23       	and	r24, r24
    5ca2:	e1 f3       	breq	.-8      	; 0x5c9c <WaitVsync+0x14>
		ClearVsyncFlag();		
    5ca4:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    5ca8:	21 96       	adiw	r28, 0x01	; 1
    5caa:	f5 cf       	rjmp	.-22     	; 0x5c96 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    5cac:	df 91       	pop	r29
    5cae:	cf 91       	pop	r28
    5cb0:	1f 91       	pop	r17
    5cb2:	0f 91       	pop	r16
    5cb4:	08 95       	ret

00005cb6 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    5cb6:	8d e1       	ldi	r24, 0x1D	; 29
    5cb8:	99 e0       	ldi	r25, 0x09	; 9
    5cba:	0e 94 84 22 	call	0x4508	; 0x4508 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    5cbe:	8d e1       	ldi	r24, 0x1D	; 29
    5cc0:	91 e0       	ldi	r25, 0x01	; 1
    5cc2:	0e 94 cf 20 	call	0x419e	; 0x419e <SetTileTable>
			
			//draw logo
			ClearVram();
    5cc6:	0e 94 ad 20 	call	0x415a	; 0x415a <ClearVram>
			WaitVsync(15);		
    5cca:	8f e0       	ldi	r24, 0x0F	; 15
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    5cd2:	41 e0       	ldi	r20, 0x01	; 1
    5cd4:	6f ef       	ldi	r22, 0xFF	; 255
    5cd6:	80 e0       	ldi	r24, 0x00	; 0
    5cd8:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    5cdc:	47 e0       	ldi	r20, 0x07	; 7
    5cde:	51 e0       	ldi	r21, 0x01	; 1
    5ce0:	6c e0       	ldi	r22, 0x0C	; 12
    5ce2:	8c e0       	ldi	r24, 0x0C	; 12
    5ce4:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <DrawMap>
			WaitVsync(3);
    5ce8:	83 e0       	ldi	r24, 0x03	; 3
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    5cf0:	46 ef       	ldi	r20, 0xF6	; 246
    5cf2:	50 e0       	ldi	r21, 0x00	; 0
    5cf4:	6c e0       	ldi	r22, 0x0C	; 12
    5cf6:	8c e0       	ldi	r24, 0x0C	; 12
    5cf8:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <DrawMap>
			WaitVsync(2);
    5cfc:	82 e0       	ldi	r24, 0x02	; 2
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    5d04:	47 e0       	ldi	r20, 0x07	; 7
    5d06:	51 e0       	ldi	r21, 0x01	; 1
    5d08:	6c e0       	ldi	r22, 0x0C	; 12
    5d0a:	8c e0       	ldi	r24, 0x0C	; 12
    5d0c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    5d10:	81 e4       	ldi	r24, 0x41	; 65
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <WaitVsync>
			ClearVram();
    5d18:	0e 94 ad 20 	call	0x415a	; 0x415a <ClearVram>
			WaitVsync(20);
    5d1c:	84 e1       	ldi	r24, 0x14	; 20
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	0c 94 44 2e 	jmp	0x5c88	; 0x5c88 <WaitVsync>

00005d24 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    5d24:	80 93 68 0d 	sts	0x0D68, r24
	currFadeFrame=0;
    5d28:	10 92 6c 0d 	sts	0x0D6C, r1
	fadeActive=true;
    5d2c:	81 e0       	ldi	r24, 0x01	; 1
    5d2e:	80 93 6b 0d 	sts	0x0D6B, r24
		
	if(blocking){
    5d32:	66 23       	and	r22, r22
    5d34:	21 f0       	breq	.+8      	; 0x5d3e <doFade+0x1a>
		while(fadeActive==true);
    5d36:	80 91 6b 0d 	lds	r24, 0x0D6B
    5d3a:	81 11       	cpse	r24, r1
    5d3c:	fc cf       	rjmp	.-8      	; 0x5d36 <doFade+0x12>
    5d3e:	08 95       	ret

00005d40 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    5d40:	81 11       	cpse	r24, r1
    5d42:	03 c0       	rjmp	.+6      	; 0x5d4a <FadeIn+0xa>
		DDRC=0xff;
    5d44:	8f ef       	ldi	r24, 0xFF	; 255
    5d46:	87 b9       	out	0x07, r24	; 7
		return;
    5d48:	08 95       	ret
	}
	fadeStep=1;
    5d4a:	91 e0       	ldi	r25, 0x01	; 1
    5d4c:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=1;
    5d50:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    5d54:	0c 94 92 2e 	jmp	0x5d24	; 0x5d24 <doFade>

00005d58 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    5d58:	81 11       	cpse	r24, r1
    5d5a:	02 c0       	rjmp	.+4      	; 0x5d60 <FadeOut+0x8>
		DDRC=0;
    5d5c:	17 b8       	out	0x07, r1	; 7
		return;
    5d5e:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    5d60:	9c e0       	ldi	r25, 0x0C	; 12
    5d62:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=-1;
    5d66:	9f ef       	ldi	r25, 0xFF	; 255
    5d68:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    5d6c:	0c 94 92 2e 	jmp	0x5d24	; 0x5d24 <doFade>

00005d70 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    5d70:	80 91 6b 0d 	lds	r24, 0x0D6B
    5d74:	88 23       	and	r24, r24
    5d76:	01 f1       	breq	.+64     	; 0x5db8 <ProcessFading+0x48>
		if(currFadeFrame==0){
    5d78:	80 91 6c 0d 	lds	r24, 0x0D6C
    5d7c:	81 11       	cpse	r24, r1
    5d7e:	19 c0       	rjmp	.+50     	; 0x5db2 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    5d80:	80 91 68 0d 	lds	r24, 0x0D68
    5d84:	80 93 6c 0d 	sts	0x0D6C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    5d88:	e0 91 6d 0d 	lds	r30, 0x0D6D
    5d8c:	f0 e0       	ldi	r31, 0x00	; 0
    5d8e:	e7 51       	subi	r30, 0x17	; 23
    5d90:	ff 4f       	sbci	r31, 0xFF	; 255
    5d92:	e4 91       	lpm	r30, Z
    5d94:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    5d96:	90 91 69 0d 	lds	r25, 0x0D69
    5d9a:	80 91 6d 0d 	lds	r24, 0x0D6D
    5d9e:	89 0f       	add	r24, r25
    5da0:	80 93 6d 0d 	sts	0x0D6D, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    5da4:	88 23       	and	r24, r24
    5da6:	11 f0       	breq	.+4      	; 0x5dac <ProcessFading+0x3c>
    5da8:	8d 30       	cpi	r24, 0x0D	; 13
    5daa:	31 f4       	brne	.+12     	; 0x5db8 <ProcessFading+0x48>
				fadeActive=false;
    5dac:	10 92 6b 0d 	sts	0x0D6B, r1
    5db0:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    5db2:	81 50       	subi	r24, 0x01	; 1
    5db4:	80 93 6c 0d 	sts	0x0D6C, r24
    5db8:	08 95       	ret

00005dba <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    5dba:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <ProcessFading>
		ProcessSprites();
    5dbe:	0c 94 96 2c 	jmp	0x592c	; 0x592c <ProcessSprites>

00005dc2 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    5dc2:	fc 01       	movw	r30, r24
	anim->looped = 0;
    5dc4:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    5dc6:	93 81       	ldd	r25, Z+3	; 0x03
    5dc8:	9f 5f       	subi	r25, 0xFF	; 255
    5dca:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    5dcc:	42 81       	ldd	r20, Z+2	; 0x02
    5dce:	80 81       	ld	r24, Z
    5dd0:	26 81       	ldd	r18, Z+6	; 0x06
    5dd2:	37 81       	ldd	r19, Z+7	; 0x07
    5dd4:	94 17       	cp	r25, r20
    5dd6:	30 f4       	brcc	.+12     	; 0x5de4 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    5dd8:	f9 01       	movw	r30, r18
    5dda:	e8 0f       	add	r30, r24
    5ddc:	f1 1d       	adc	r31, r1
    5dde:	e8 0f       	add	r30, r24
    5de0:	f1 1d       	adc	r31, r1
    5de2:	12 c0       	rjmp	.+36     	; 0x5e08 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    5de4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	01 96       	adiw	r24, 0x01	; 1
    5dea:	61 81       	ldd	r22, Z+1	; 0x01
    5dec:	70 e0       	ldi	r23, 0x00	; 0
    5dee:	0e 94 2c 34 	call	0x6858	; 0x6858 <__divmodhi4>
    5df2:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    5df4:	81 11       	cpse	r24, r1
    5df6:	02 c0       	rjmp	.+4      	; 0x5dfc <LBGetNextFrame+0x3a>
    5df8:	41 e0       	ldi	r20, 0x01	; 1
    5dfa:	44 83       	std	Z+4, r20	; 0x04
    5dfc:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    5dfe:	88 0f       	add	r24, r24
    5e00:	99 1f       	adc	r25, r25
    5e02:	f9 01       	movw	r30, r18
    5e04:	e8 0f       	add	r30, r24
    5e06:	f9 1f       	adc	r31, r25
    5e08:	80 81       	ld	r24, Z
    5e0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    5e0c:	08 95       	ret

00005e0e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    5e0e:	0f 93       	push	r16
    5e10:	1f 93       	push	r17
    5e12:	cf 93       	push	r28
    5e14:	df 93       	push	r29
    5e16:	1f 92       	push	r1
    5e18:	cd b7       	in	r28, 0x3d	; 61
    5e1a:	de b7       	in	r29, 0x3e	; 62
    5e1c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    5e1e:	86 2f       	mov	r24, r22
    5e20:	69 83       	std	Y+1, r22	; 0x01
    5e22:	0e 94 de 20 	call	0x41bc	; 0x41bc <ReadJoypad>
    5e26:	d8 01       	movw	r26, r16
    5e28:	15 96       	adiw	r26, 0x05	; 5
    5e2a:	9c 93       	st	X, r25
    5e2c:	8e 93       	st	-X, r24
    5e2e:	14 97       	sbiw	r26, 0x04	; 4
    5e30:	69 81       	ldd	r22, Y+1	; 0x01
    5e32:	e6 2f       	mov	r30, r22
    5e34:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    5e36:	00 97       	sbiw	r24, 0x00	; 0
    5e38:	51 f0       	breq	.+20     	; 0x5e4e <LBGetJoyPadState+0x40>
    5e3a:	df 01       	movw	r26, r30
    5e3c:	aa 0f       	add	r26, r26
    5e3e:	bb 1f       	adc	r27, r27
    5e40:	a0 52       	subi	r26, 0x20	; 32
    5e42:	b3 4f       	sbci	r27, 0xF3	; 243
    5e44:	2d 91       	ld	r18, X+
    5e46:	3c 91       	ld	r19, X
    5e48:	82 17       	cp	r24, r18
    5e4a:	93 07       	cpc	r25, r19
    5e4c:	21 f0       	breq	.+8      	; 0x5e56 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    5e4e:	d8 01       	movw	r26, r16
    5e50:	16 96       	adiw	r26, 0x06	; 6
    5e52:	1c 92       	st	X, r1
    5e54:	07 c0       	rjmp	.+14     	; 0x5e64 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    5e56:	d8 01       	movw	r26, r16
    5e58:	16 96       	adiw	r26, 0x06	; 6
    5e5a:	2c 91       	ld	r18, X
    5e5c:	16 97       	sbiw	r26, 0x06	; 6
    5e5e:	2f 5f       	subi	r18, 0xFF	; 255
    5e60:	16 96       	adiw	r26, 0x06	; 6
    5e62:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    5e64:	ee 0f       	add	r30, r30
    5e66:	ff 1f       	adc	r31, r31
    5e68:	e0 52       	subi	r30, 0x20	; 32
    5e6a:	f3 4f       	sbci	r31, 0xF3	; 243
    5e6c:	20 81       	ld	r18, Z
    5e6e:	31 81       	ldd	r19, Z+1	; 0x01
    5e70:	a9 01       	movw	r20, r18
    5e72:	40 95       	com	r20
    5e74:	50 95       	com	r21
    5e76:	48 23       	and	r20, r24
    5e78:	59 23       	and	r21, r25
    5e7a:	d8 01       	movw	r26, r16
    5e7c:	11 96       	adiw	r26, 0x01	; 1
    5e7e:	5c 93       	st	X, r21
    5e80:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    5e82:	ac 01       	movw	r20, r24
    5e84:	40 95       	com	r20
    5e86:	50 95       	com	r21
    5e88:	24 23       	and	r18, r20
    5e8a:	35 23       	and	r19, r21
    5e8c:	13 96       	adiw	r26, 0x03	; 3
    5e8e:	3c 93       	st	X, r19
    5e90:	2e 93       	st	-X, r18
    5e92:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    5e94:	91 83       	std	Z+1, r25	; 0x01
    5e96:	80 83       	st	Z, r24
}
    5e98:	0f 90       	pop	r0
    5e9a:	df 91       	pop	r29
    5e9c:	cf 91       	pop	r28
    5e9e:	1f 91       	pop	r17
    5ea0:	0f 91       	pop	r16
    5ea2:	08 95       	ret

00005ea4 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
    5ea8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    5eaa:	c0 e0       	ldi	r28, 0x00	; 0
    5eac:	cd 17       	cp	r28, r29
    5eae:	31 f0       	breq	.+12     	; 0x5ebc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    5eb0:	8f ef       	ldi	r24, 0xFF	; 255
    5eb2:	9f ef       	ldi	r25, 0xFF	; 255
    5eb4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    5eb8:	cf 5f       	subi	r28, 0xFF	; 255
    5eba:	f8 cf       	rjmp	.-16     	; 0x5eac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    5ebc:	df 91       	pop	r29
    5ebe:	cf 91       	pop	r28
    5ec0:	08 95       	ret

00005ec2 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    5ec2:	df 92       	push	r13
    5ec4:	ef 92       	push	r14
    5ec6:	ff 92       	push	r15
    5ec8:	0f 93       	push	r16
    5eca:	1f 93       	push	r17
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    5ed2:	fb 01       	movw	r30, r22
    5ed4:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    5ed6:	31 96       	adiw	r30, 0x01	; 1
    5ed8:	64 91       	lpm	r22, Z
    5eda:	5f ef       	ldi	r21, 0xFF	; 255
    5edc:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    5ede:	24 2f       	mov	r18, r20
    5ee0:	21 70       	andi	r18, 0x01	; 1
    5ee2:	40 ff       	sbrs	r20, 0
    5ee4:	04 c0       	rjmp	.+8      	; 0x5eee <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    5ee6:	95 2f       	mov	r25, r21
		dx=-1;
    5ee8:	ff 24       	eor	r15, r15
    5eea:	fa 94       	dec	r15
    5eec:	03 c0       	rjmp	.+6      	; 0x5ef4 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    5eee:	ff 24       	eor	r15, r15
    5ef0:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    5ef4:	41 ff       	sbrs	r20, 1
    5ef6:	05 c0       	rjmp	.+10     	; 0x5f02 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    5ef8:	7f ef       	ldi	r23, 0xFF	; 255
    5efa:	76 0f       	add	r23, r22
		dy=-1;
    5efc:	ee 24       	eor	r14, r14
    5efe:	ea 94       	dec	r14
    5f00:	03 c0       	rjmp	.+6      	; 0x5f08 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    5f02:	ee 24       	eor	r14, r14
    5f04:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    5f06:	70 e0       	ldi	r23, 0x00	; 0
    5f08:	21 11       	cpse	r18, r1
    5f0a:	01 c0       	rjmp	.+2      	; 0x5f0e <LBMapSprite+0x4c>
    5f0c:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    5f0e:	00 e0       	ldi	r16, 0x00	; 0
    5f10:	06 17       	cp	r16, r22
    5f12:	09 f1       	breq	.+66     	; 0x5f56 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    5f14:	71 03       	mulsu	r23, r17
    5f16:	e0 01       	movw	r28, r0
    5f18:	11 24       	eor	r1, r1
    5f1a:	d8 2e       	mov	r13, r24
    5f1c:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    5f1e:	8d 15       	cp	r24, r13
    5f20:	b1 f0       	breq	.+44     	; 0x5f4e <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    5f22:	9e 01       	movw	r18, r28
    5f24:	29 0f       	add	r18, r25
    5f26:	31 1d       	adc	r19, r1
    5f28:	97 fd       	sbrc	r25, 7
    5f2a:	3a 95       	dec	r19
    5f2c:	2e 5f       	subi	r18, 0xFE	; 254
    5f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f30:	fd 01       	movw	r30, r26
    5f32:	e2 0f       	add	r30, r18
    5f34:	f3 1f       	adc	r31, r19
    5f36:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    5f38:	34 e0       	ldi	r19, 0x04	; 4
    5f3a:	83 9f       	mul	r24, r19
    5f3c:	f0 01       	movw	r30, r0
    5f3e:	11 24       	eor	r1, r1
    5f40:	ed 5d       	subi	r30, 0xDD	; 221
    5f42:	f1 4f       	sbci	r31, 0xF1	; 241
    5f44:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    5f46:	8f 5f       	subi	r24, 0xFF	; 255
    5f48:	43 83       	std	Z+3, r20	; 0x03
    5f4a:	9f 0d       	add	r25, r15
    5f4c:	e8 cf       	rjmp	.-48     	; 0x5f1e <LBMapSprite+0x5c>
    5f4e:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    5f50:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    5f52:	95 2f       	mov	r25, r21
    5f54:	dd cf       	rjmp	.-70     	; 0x5f10 <LBMapSprite+0x4e>
	}
}
    5f56:	df 91       	pop	r29
    5f58:	cf 91       	pop	r28
    5f5a:	1f 91       	pop	r17
    5f5c:	0f 91       	pop	r16
    5f5e:	ff 90       	pop	r15
    5f60:	ef 90       	pop	r14
    5f62:	df 90       	pop	r13
    5f64:	08 95       	ret

00005f66 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    5f66:	df 92       	push	r13
    5f68:	ef 92       	push	r14
    5f6a:	ff 92       	push	r15
    5f6c:	0f 93       	push	r16
    5f6e:	1f 93       	push	r17
    5f70:	cf 93       	push	r28
    5f72:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    5f74:	a0 91 9e 0c 	lds	r26, 0x0C9E
    5f78:	98 e0       	ldi	r25, 0x08	; 8
    5f7a:	a9 9f       	mul	r26, r25
    5f7c:	70 01       	movw	r14, r0
    5f7e:	11 24       	eor	r1, r1
    5f80:	50 e0       	ldi	r21, 0x00	; 0
    5f82:	38 ef       	ldi	r19, 0xF8	; 248
    5f84:	a3 9f       	mul	r26, r19
    5f86:	30 2d       	mov	r19, r0
    5f88:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    5f8a:	70 e0       	ldi	r23, 0x00	; 0
    5f8c:	70 17       	cp	r23, r16
    5f8e:	09 f1       	breq	.+66     	; 0x5fd2 <LBMoveSprite+0x6c>
    5f90:	d4 2e       	mov	r13, r20
    5f92:	13 2f       	mov	r17, r19
    5f94:	14 0f       	add	r17, r20
    5f96:	b8 2f       	mov	r27, r24
    5f98:	b2 0f       	add	r27, r18
    5f9a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    5f9c:	8b 17       	cp	r24, r27
    5f9e:	a9 f0       	breq	.+42     	; 0x5fca <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    5fa0:	c4 e0       	ldi	r28, 0x04	; 4
    5fa2:	8c 9f       	mul	r24, r28
    5fa4:	f0 01       	movw	r30, r0
    5fa6:	11 24       	eor	r1, r1
    5fa8:	ef 01       	movw	r28, r30
    5faa:	cd 5d       	subi	r28, 0xDD	; 221
    5fac:	d1 4f       	sbci	r29, 0xF1	; 241
    5fae:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    5fb0:	a0 32       	cpi	r26, 0x20	; 32
    5fb2:	28 f4       	brcc	.+10     	; 0x5fbe <LBMoveSprite+0x58>
    5fb4:	e4 16       	cp	r14, r20
    5fb6:	f5 06       	cpc	r15, r21
    5fb8:	14 f4       	brge	.+4      	; 0x5fbe <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    5fba:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    5fbc:	03 c0       	rjmp	.+6      	; 0x5fc4 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    5fbe:	ed 5d       	subi	r30, 0xDD	; 221
    5fc0:	f1 4f       	sbci	r31, 0xF1	; 241
    5fc2:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    5fc4:	8f 5f       	subi	r24, 0xFF	; 255
    5fc6:	98 5f       	subi	r25, 0xF8	; 248
    5fc8:	e9 cf       	rjmp	.-46     	; 0x5f9c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    5fca:	7f 5f       	subi	r23, 0xFF	; 255
    5fcc:	48 5f       	subi	r20, 0xF8	; 248
    5fce:	5f 4f       	sbci	r21, 0xFF	; 255
    5fd0:	dd cf       	rjmp	.-70     	; 0x5f8c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    5fd2:	df 91       	pop	r29
    5fd4:	cf 91       	pop	r28
    5fd6:	1f 91       	pop	r17
    5fd8:	0f 91       	pop	r16
    5fda:	ff 90       	pop	r15
    5fdc:	ef 90       	pop	r14
    5fde:	df 90       	pop	r13
    5fe0:	08 95       	ret

00005fe2 <LBRotateSprites>:

void LBRotateSprites(u8 mappedSpriteCount)
{
    5fe2:	cf 93       	push	r28
    5fe4:	df 93       	push	r29
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    5fe6:	90 91 dc 0c 	lds	r25, 0x0CDC
    5fea:	99 23       	and	r25, r25
    5fec:	e9 f1       	breq	.+122    	; 0x6068 <LBRotateSprites+0x86>
    5fee:	e5 e0       	ldi	r30, 0x05	; 5
    5ff0:	f5 e0       	ldi	r31, 0x05	; 5
    5ff2:	28 ec       	ldi	r18, 0xC8	; 200
    5ff4:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    5ff6:	88 23       	and	r24, r24
    5ff8:	89 f1       	breq	.+98     	; 0x605c <LBRotateSprites+0x7a>
		{
			sprites[counter].flags = extendedSprites[--mappedSpriteCount].flags;
    5ffa:	af ef       	ldi	r26, 0xFF	; 255
    5ffc:	a8 0f       	add	r26, r24
    5ffe:	34 e0       	ldi	r19, 0x04	; 4
    6000:	a3 9f       	mul	r26, r19
    6002:	d0 01       	movw	r26, r0
    6004:	11 24       	eor	r1, r1
    6006:	ad 5d       	subi	r26, 0xDD	; 221
    6008:	b1 4f       	sbci	r27, 0xF1	; 241
    600a:	13 96       	adiw	r26, 0x03	; 3
    600c:	3c 91       	ld	r19, X
    600e:	30 83       	st	Z, r19
    6010:	ef 01       	movw	r28, r30
    6012:	21 97       	sbiw	r28, 0x01	; 1
			sprites[counter].tileIndex = extendedSprites[--mappedSpriteCount].tileIndex;
    6014:	ae ef       	ldi	r26, 0xFE	; 254
    6016:	a8 0f       	add	r26, r24
    6018:	34 e0       	ldi	r19, 0x04	; 4
    601a:	a3 9f       	mul	r26, r19
    601c:	d0 01       	movw	r26, r0
    601e:	11 24       	eor	r1, r1
    6020:	ad 5d       	subi	r26, 0xDD	; 221
    6022:	b1 4f       	sbci	r27, 0xF1	; 241
    6024:	12 96       	adiw	r26, 0x02	; 2
    6026:	3c 91       	ld	r19, X
    6028:	38 83       	st	Y, r19
    602a:	22 97       	sbiw	r28, 0x02	; 2
			sprites[counter].x = extendedSprites[--mappedSpriteCount].x;
    602c:	ad ef       	ldi	r26, 0xFD	; 253
    602e:	a8 0f       	add	r26, r24
    6030:	34 e0       	ldi	r19, 0x04	; 4
    6032:	a3 9f       	mul	r26, r19
    6034:	d0 01       	movw	r26, r0
    6036:	11 24       	eor	r1, r1
    6038:	ad 5d       	subi	r26, 0xDD	; 221
    603a:	b1 4f       	sbci	r27, 0xF1	; 241
    603c:	3c 91       	ld	r19, X
    603e:	38 83       	st	Y, r19
			sprites[counter].y = extendedSprites[--mappedSpriteCount].y;
    6040:	84 50       	subi	r24, 0x04	; 4
    6042:	21 96       	adiw	r28, 0x01	; 1
    6044:	34 e0       	ldi	r19, 0x04	; 4
    6046:	83 9f       	mul	r24, r19
    6048:	d0 01       	movw	r26, r0
    604a:	11 24       	eor	r1, r1
    604c:	ad 5d       	subi	r26, 0xDD	; 221
    604e:	b1 4f       	sbci	r27, 0xF1	; 241
    6050:	11 96       	adiw	r26, 0x01	; 1
    6052:	3c 91       	ld	r19, X
    6054:	38 83       	st	Y, r19
    6056:	34 96       	adiw	r30, 0x04	; 4
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    6058:	82 13       	cpse	r24, r18
    605a:	cd cf       	rjmp	.-102    	; 0x5ff6 <LBRotateSprites+0x14>
			sprites[counter].x = extendedSprites[counter].x;
			sprites[counter].y = extendedSprites[counter].y;
			counter++;
		}
	}
	swapped = swapped & 1;
    605c:	91 70       	andi	r25, 0x01	; 1
    605e:	90 93 dc 0c 	sts	0x0CDC, r25
}
    6062:	df 91       	pop	r29
    6064:	cf 91       	pop	r28
    6066:	08 95       	ret
    6068:	40 e0       	ldi	r20, 0x00	; 0
    606a:	50 e0       	ldi	r21, 0x00	; 0
    606c:	20 e0       	ldi	r18, 0x00	; 0
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    606e:	28 17       	cp	r18, r24
    6070:	a9 f3       	breq	.-22     	; 0x605c <LBRotateSprites+0x7a>
    6072:	da 01       	movw	r26, r20
    6074:	ad 5d       	subi	r26, 0xDD	; 221
    6076:	b1 4f       	sbci	r27, 0xF1	; 241
    6078:	fa 01       	movw	r30, r20
    607a:	ee 5f       	subi	r30, 0xFE	; 254
    607c:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			sprites[counter].flags = extendedSprites[counter].flags;
    607e:	13 96       	adiw	r26, 0x03	; 3
    6080:	3c 91       	ld	r19, X
    6082:	13 97       	sbiw	r26, 0x03	; 3
    6084:	33 83       	std	Z+3, r19	; 0x03
			sprites[counter].tileIndex = extendedSprites[counter].tileIndex;
    6086:	12 96       	adiw	r26, 0x02	; 2
    6088:	3c 91       	ld	r19, X
    608a:	12 97       	sbiw	r26, 0x02	; 2
    608c:	32 83       	std	Z+2, r19	; 0x02
			sprites[counter].x = extendedSprites[counter].x;
    608e:	3c 91       	ld	r19, X
    6090:	30 83       	st	Z, r19
			sprites[counter].y = extendedSprites[counter].y;
    6092:	11 96       	adiw	r26, 0x01	; 1
    6094:	3c 91       	ld	r19, X
    6096:	31 83       	std	Z+1, r19	; 0x01
			counter++;
    6098:	2f 5f       	subi	r18, 0xFF	; 255
    609a:	4c 5f       	subi	r20, 0xFC	; 252
    609c:	5f 4f       	sbci	r21, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    609e:	2e 30       	cpi	r18, 0x0E	; 14
    60a0:	31 f7       	brne	.-52     	; 0x606e <LBRotateSprites+0x8c>
    60a2:	dc cf       	rjmp	.-72     	; 0x605c <LBRotateSprites+0x7a>

000060a4 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    60a4:	fa 01       	movw	r30, r20
    60a6:	32 96       	adiw	r30, 0x02	; 2
    60a8:	44 91       	lpm	r20, Z
    60aa:	50 e0       	ldi	r21, 0x00	; 0
    60ac:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <SetTile>

000060b0 <init_game_state>:
char* prone_anim[1];
char* run_anim[4];

void init_game_state()
{
	game.camera_x = 0;
    60b0:	e0 e9       	ldi	r30, 0x90	; 144
    60b2:	fd e0       	ldi	r31, 0x0D	; 13
    60b4:	11 86       	std	Z+9, r1	; 0x09
    60b6:	10 86       	std	Z+8, r1	; 0x08
	game.camera_y = 0;
    60b8:	13 86       	std	Z+11, r1	; 0x0b
    60ba:	12 86       	std	Z+10, r1	; 0x0a
	game.current_level = 0;
    60bc:	11 82       	std	Z+1, r1	; 0x01
	game.current_screen = 0;
    60be:	10 82       	st	Z, r1
	game.paused = 0;
    60c0:	12 82       	std	Z+2, r1	; 0x02
	game.selection = 0;
    60c2:	13 82       	std	Z+3, r1	; 0x03
	game.scroll = 0;
    60c4:	14 82       	std	Z+4, r1	; 0x04
	game.scroll_src_x=29;
    60c6:	8d e1       	ldi	r24, 0x1D	; 29
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	97 83       	std	Z+7, r25	; 0x07
    60cc:	86 83       	std	Z+6, r24	; 0x06
    game.scroll_dest_x=29;
    60ce:	85 83       	std	Z+5, r24	; 0x05
	game.player.active_shots = 0;
    60d0:	13 8a       	std	Z+19, r1	; 0x13
	game.player.flags = IDLE;
    60d2:	88 e0       	ldi	r24, 0x08	; 8
    60d4:	84 8b       	std	Z+20, r24	; 0x14
	game.player.grace_frame = 0;
    60d6:	15 8a       	std	Z+21, r1	; 0x15
	game.player.shared.gravity = GRAVITY;
    60d8:	80 e5       	ldi	r24, 0x50	; 80
    60da:	86 87       	std	Z+14, r24	; 0x0e
	game.player.shared.vx = 0;
    60dc:	14 86       	std	Z+12, r1	; 0x0c
	game.player.shared.vy = 0;
    60de:	15 86       	std	Z+13, r1	; 0x0d
	
	game.player.idle.anim_count = 1;
    60e0:	81 e0       	ldi	r24, 0x01	; 1
    60e2:	80 93 f3 0d 	sts	0x0DF3, r24
	game.player.idle.current_anim = 0;
    60e6:	10 92 f2 0d 	sts	0x0DF2, r1
	game.player.idle.frame_count = 0;
    60ea:	10 92 f5 0d 	sts	0x0DF5, r1
	game.player.idle.frames_per_anim = 1;
    60ee:	80 93 f4 0d 	sts	0x0DF4, r24
	game.player.idle.looped = 0;
    60f2:	10 92 f6 0d 	sts	0x0DF6, r1
	game.player.idle.reversing = 0;
    60f6:	10 92 f7 0d 	sts	0x0DF7, r1
	game.player.idle.anims = idle_anim;
    60fa:	eb e9       	ldi	r30, 0x9B	; 155
    60fc:	fe e0       	ldi	r31, 0x0E	; 14
    60fe:	f0 93 f9 0d 	sts	0x0DF9, r31
    6102:	e0 93 f8 0d 	sts	0x0DF8, r30
	game.player.idle.anims[0] = (char*) map_hero_idle;
    6106:	2c e3       	ldi	r18, 0x3C	; 60
    6108:	3d e1       	ldi	r19, 0x1D	; 29
    610a:	31 83       	std	Z+1, r19	; 0x01
    610c:	20 83       	st	Z, r18
	
	game.player.jump.anim_count = 1;
    610e:	80 93 03 0e 	sts	0x0E03, r24
	game.player.jump.current_anim = 0;
    6112:	10 92 02 0e 	sts	0x0E02, r1
	game.player.jump.frame_count = 0;
    6116:	10 92 05 0e 	sts	0x0E05, r1
	game.player.jump.frames_per_anim = 1;
    611a:	80 93 04 0e 	sts	0x0E04, r24
	game.player.jump.looped = 0;
    611e:	10 92 06 0e 	sts	0x0E06, r1
	game.player.jump.reversing = 0;
    6122:	10 92 07 0e 	sts	0x0E07, r1
	game.player.jump.anims = jump_anim;
    6126:	ee e6       	ldi	r30, 0x6E	; 110
    6128:	fd e0       	ldi	r31, 0x0D	; 13
    612a:	f0 93 09 0e 	sts	0x0E09, r31
    612e:	e0 93 08 0e 	sts	0x0E08, r30
	game.player.jump.anims[0] = (char*) map_hero_jump;
    6132:	24 e1       	ldi	r18, 0x14	; 20
    6134:	3d e1       	ldi	r19, 0x1D	; 29
    6136:	31 83       	std	Z+1, r19	; 0x01
    6138:	20 83       	st	Z, r18
	
	game.player.prone.anim_count = 1;
    613a:	80 93 0b 0e 	sts	0x0E0B, r24
	game.player.prone.current_anim = 0;
    613e:	10 92 0a 0e 	sts	0x0E0A, r1
	game.player.prone.frame_count = 0;
    6142:	10 92 0d 0e 	sts	0x0E0D, r1
	game.player.prone.frames_per_anim = 1;
    6146:	80 93 0c 0e 	sts	0x0E0C, r24
	game.player.prone.looped = 0;
    614a:	10 92 0e 0e 	sts	0x0E0E, r1
	game.player.prone.reversing = 0;
    614e:	10 92 0f 0e 	sts	0x0E0F, r1
	game.player.prone.anims = prone_anim;
    6152:	e1 e2       	ldi	r30, 0x21	; 33
    6154:	fe e0       	ldi	r31, 0x0E	; 14
    6156:	f0 93 11 0e 	sts	0x0E11, r31
    615a:	e0 93 10 0e 	sts	0x0E10, r30
	game.player.prone.anims[0] = (char*) map_hero_prone;
    615e:	8f e0       	ldi	r24, 0x0F	; 15
    6160:	9d e1       	ldi	r25, 0x1D	; 29
    6162:	91 83       	std	Z+1, r25	; 0x01
    6164:	80 83       	st	Z, r24
	
	game.player.run.anim_count = 4;
    6166:	84 e0       	ldi	r24, 0x04	; 4
    6168:	80 93 fb 0d 	sts	0x0DFB, r24
	game.player.run.current_anim = 0;
    616c:	10 92 fa 0d 	sts	0x0DFA, r1
	game.player.run.frame_count = 0;
    6170:	10 92 fd 0d 	sts	0x0DFD, r1
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    6174:	8c e0       	ldi	r24, 0x0C	; 12
    6176:	80 93 fc 0d 	sts	0x0DFC, r24
	game.player.run.looped = 0;
    617a:	10 92 fe 0d 	sts	0x0DFE, r1
	game.player.run.reversing = 0;
    617e:	10 92 ff 0d 	sts	0x0DFF, r1
	game.player.run.anims = run_anim;
    6182:	e3 e9       	ldi	r30, 0x93	; 147
    6184:	fe e0       	ldi	r31, 0x0E	; 14
    6186:	f0 93 01 0e 	sts	0x0E01, r31
    618a:	e0 93 00 0e 	sts	0x0E00, r30
	game.player.run.anims[0] = (char*) map_hero_step_0;
    618e:	84 e3       	ldi	r24, 0x34	; 52
    6190:	9d e1       	ldi	r25, 0x1D	; 29
    6192:	91 83       	std	Z+1, r25	; 0x01
    6194:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    6196:	8c e2       	ldi	r24, 0x2C	; 44
    6198:	9d e1       	ldi	r25, 0x1D	; 29
    619a:	93 83       	std	Z+3, r25	; 0x03
    619c:	82 83       	std	Z+2, r24	; 0x02
	game.player.run.anims[2] = (char*) map_hero_step_2;
    619e:	84 e2       	ldi	r24, 0x24	; 36
    61a0:	9d e1       	ldi	r25, 0x1D	; 29
    61a2:	95 83       	std	Z+5, r25	; 0x05
    61a4:	84 83       	std	Z+4, r24	; 0x04
	game.player.run.anims[3] = (char*) map_hero_step_3;
    61a6:	8c e1       	ldi	r24, 0x1C	; 28
    61a8:	9d e1       	ldi	r25, 0x1D	; 29
    61aa:	97 83       	std	Z+7, r25	; 0x07
    61ac:	86 83       	std	Z+6, r24	; 0x06
    61ae:	08 95       	ret

000061b0 <render_level_tile>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    61b0:	0f 93       	push	r16
    61b2:	1f 93       	push	r17
    61b4:	e8 2f       	mov	r30, r24
    61b6:	86 2f       	mov	r24, r22
    61b8:	64 2f       	mov	r22, r20
	switch (level_tile)
    61ba:	0e 2f       	mov	r16, r30
    61bc:	10 e0       	ldi	r17, 0x00	; 0
    61be:	07 30       	cpi	r16, 0x07	; 7
    61c0:	11 05       	cpc	r17, r1
    61c2:	e8 f4       	brcc	.+58     	; 0x61fe <render_level_tile+0x4e>
    61c4:	f8 01       	movw	r30, r16
    61c6:	e8 5c       	subi	r30, 0xC8	; 200
    61c8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ca:	0c 94 40 34 	jmp	0x6880	; 0x6880 <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    61ce:	40 e3       	ldi	r20, 0x30	; 48
    61d0:	56 e3       	ldi	r21, 0x36	; 54
    61d2:	11 c0       	rjmp	.+34     	; 0x61f6 <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    61d4:	4c e3       	ldi	r20, 0x3C	; 60
    61d6:	56 e3       	ldi	r21, 0x36	; 54
    61d8:	0e c0       	rjmp	.+28     	; 0x61f6 <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    61da:	4f e3       	ldi	r20, 0x3F	; 63
    61dc:	56 e3       	ldi	r21, 0x36	; 54
    61de:	0b c0       	rjmp	.+22     	; 0x61f6 <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    61e0:	49 e3       	ldi	r20, 0x39	; 57
    61e2:	56 e3       	ldi	r21, 0x36	; 54
    61e4:	08 c0       	rjmp	.+16     	; 0x61f6 <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    61e6:	46 e3       	ldi	r20, 0x36	; 54
    61e8:	56 e3       	ldi	r21, 0x36	; 54
    61ea:	05 c0       	rjmp	.+10     	; 0x61f6 <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    61ec:	4d e2       	ldi	r20, 0x2D	; 45
    61ee:	56 e3       	ldi	r21, 0x36	; 54
    61f0:	02 c0       	rjmp	.+4      	; 0x61f6 <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    61f2:	43 e3       	ldi	r20, 0x33	; 51
    61f4:	56 e3       	ldi	r21, 0x36	; 54
	}
}
    61f6:	1f 91       	pop	r17
    61f8:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    61fa:	0c 94 52 30 	jmp	0x60a4	; 0x60a4 <LBDrawTile>
	}
}
    61fe:	1f 91       	pop	r17
    6200:	0f 91       	pop	r16
    6202:	08 95       	ret

00006204 <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    6204:	1f 93       	push	r17
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    620a:	d0 e0       	ldi	r29, 0x00	; 0
    620c:	10 e2       	ldi	r17, 0x20	; 32
    620e:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    6210:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    6212:	c1 17       	cp	r28, r17
    6214:	41 f0       	breq	.+16     	; 0x6226 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    6216:	40 e0       	ldi	r20, 0x00	; 0
    6218:	50 e0       	ldi	r21, 0x00	; 0
    621a:	6c 2f       	mov	r22, r28
    621c:	8d 2f       	mov	r24, r29
    621e:	0e 94 bb 20 	call	0x4176	; 0x4176 <SetTile>
    6222:	cf 5f       	subi	r28, 0xFF	; 255
    6224:	f6 cf       	rjmp	.-20     	; 0x6212 <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    6226:	df 5f       	subi	r29, 0xFF	; 255
    6228:	dc 31       	cpi	r29, 0x1C	; 28
    622a:	91 f7       	brne	.-28     	; 0x6210 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    622c:	df 91       	pop	r29
    622e:	cf 91       	pop	r28
    6230:	1f 91       	pop	r17
    6232:	08 95       	ret

00006234 <get_camera_y>:
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0]);
}

u8 get_camera_y(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1]);
    6234:	28 e5       	ldi	r18, 0x58	; 88
    6236:	36 e0       	ldi	r19, 0x06	; 6
    6238:	48 2f       	mov	r20, r24
    623a:	42 9f       	mul	r20, r18
    623c:	c0 01       	movw	r24, r0
    623e:	43 9f       	mul	r20, r19
    6240:	90 0d       	add	r25, r0
    6242:	11 24       	eor	r1, r1
    6244:	fc 01       	movw	r30, r24
    6246:	eb 5e       	subi	r30, 0xEB	; 235
    6248:	f5 4f       	sbci	r31, 0xF5	; 245
    624a:	84 91       	lpm	r24, Z
}
    624c:	08 95       	ret

0000624e <get_hero_spawn_x>:

u8 get_hero_spawn_x(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2]);
    624e:	28 e5       	ldi	r18, 0x58	; 88
    6250:	36 e0       	ldi	r19, 0x06	; 6
    6252:	48 2f       	mov	r20, r24
    6254:	42 9f       	mul	r20, r18
    6256:	c0 01       	movw	r24, r0
    6258:	43 9f       	mul	r20, r19
    625a:	90 0d       	add	r25, r0
    625c:	11 24       	eor	r1, r1
    625e:	fc 01       	movw	r30, r24
    6260:	ea 5e       	subi	r30, 0xEA	; 234
    6262:	f5 4f       	sbci	r31, 0xF5	; 245
    6264:	84 91       	lpm	r24, Z
}
    6266:	08 95       	ret

00006268 <get_hero_spawn_y>:

u8 get_hero_spawn_y(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3]);
    6268:	28 e5       	ldi	r18, 0x58	; 88
    626a:	36 e0       	ldi	r19, 0x06	; 6
    626c:	48 2f       	mov	r20, r24
    626e:	42 9f       	mul	r20, r18
    6270:	c0 01       	movw	r24, r0
    6272:	43 9f       	mul	r20, r19
    6274:	90 0d       	add	r25, r0
    6276:	11 24       	eor	r1, r1
    6278:	fc 01       	movw	r30, r24
    627a:	e9 5e       	subi	r30, 0xE9	; 233
    627c:	f5 4f       	sbci	r31, 0xF5	; 245
    627e:	84 91       	lpm	r24, Z
}
    6280:	08 95       	ret

00006282 <get_level_tile>:

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    6282:	fb 01       	movw	r30, r22
    6284:	34 96       	adiw	r30, 0x04	; 4
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x)]);
    6286:	9c e3       	ldi	r25, 0x3C	; 60
    6288:	94 9f       	mul	r25, r20
    628a:	90 01       	movw	r18, r0
    628c:	95 9f       	mul	r25, r21
    628e:	30 0d       	add	r19, r0
    6290:	11 24       	eor	r1, r1
    6292:	e2 0f       	add	r30, r18
    6294:	f3 1f       	adc	r31, r19
    6296:	28 e5       	ldi	r18, 0x58	; 88
    6298:	36 e0       	ldi	r19, 0x06	; 6
    629a:	48 2f       	mov	r20, r24
    629c:	42 9f       	mul	r20, r18
    629e:	c0 01       	movw	r24, r0
    62a0:	43 9f       	mul	r20, r19
    62a2:	90 0d       	add	r25, r0
    62a4:	11 24       	eor	r1, r1
    62a6:	e8 0f       	add	r30, r24
    62a8:	f9 1f       	adc	r31, r25
    62aa:	ec 5e       	subi	r30, 0xEC	; 236
    62ac:	f5 4f       	sbci	r31, 0xF5	; 245
    62ae:	84 91       	lpm	r24, Z
}
    62b0:	08 95       	ret

000062b2 <render_camera_view>:
#else

#endif

void render_camera_view()
{
    62b2:	7f 92       	push	r7
    62b4:	8f 92       	push	r8
    62b6:	9f 92       	push	r9
    62b8:	af 92       	push	r10
    62ba:	bf 92       	push	r11
    62bc:	cf 92       	push	r12
    62be:	df 92       	push	r13
    62c0:	ef 92       	push	r14
    62c2:	ff 92       	push	r15
    62c4:	0f 93       	push	r16
    62c6:	1f 93       	push	r17
    62c8:	cf 93       	push	r28
    62ca:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    62cc:	c0 91 98 0d 	lds	r28, 0x0D98
    62d0:	d0 91 99 0d 	lds	r29, 0x0D99
    62d4:	83 e0       	ldi	r24, 0x03	; 3
    62d6:	d6 95       	lsr	r29
    62d8:	c7 95       	ror	r28
    62da:	8a 95       	dec	r24
    62dc:	e1 f7       	brne	.-8      	; 0x62d6 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    62de:	c0 90 9a 0d 	lds	r12, 0x0D9A
    62e2:	d0 90 9b 0d 	lds	r13, 0x0D9B
    62e6:	93 e0       	ldi	r25, 0x03	; 3
    62e8:	d6 94       	lsr	r13
    62ea:	c7 94       	ror	r12
    62ec:	9a 95       	dec	r25
    62ee:	e1 f7       	brne	.-8      	; 0x62e8 <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    62f0:	8e 01       	movw	r16, r28
    62f2:	5e 01       	movw	r10, r28
    62f4:	8d e1       	ldi	r24, 0x1D	; 29
    62f6:	a8 0e       	add	r10, r24
    62f8:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    62fa:	46 01       	movw	r8, r12
    62fc:	8b e1       	ldi	r24, 0x1B	; 27
    62fe:	88 0e       	add	r8, r24
    6300:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    6302:	0a 15       	cp	r16, r10
    6304:	1b 05       	cpc	r17, r11
    6306:	c0 f4       	brcc	.+48     	; 0x6338 <render_camera_view+0x86>
    6308:	76 01       	movw	r14, r12
    630a:	70 2e       	mov	r7, r16
    630c:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    630e:	e8 14       	cp	r14, r8
    6310:	f9 04       	cpc	r15, r9
    6312:	78 f4       	brcc	.+30     	; 0x6332 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    6314:	a7 01       	movw	r20, r14
    6316:	b8 01       	movw	r22, r16
    6318:	80 91 91 0d 	lds	r24, 0x0D91
    631c:	0e 94 41 31 	call	0x6282	; 0x6282 <get_level_tile>
    6320:	4e 2d       	mov	r20, r14
    6322:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    6324:	67 2d       	mov	r22, r7
    6326:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
	{
		for (u16 y = camera_y_tile; y < camera_y_tile + CAMERA_HEIGHT + 1; y++)
    632a:	8f ef       	ldi	r24, 0xFF	; 255
    632c:	e8 1a       	sub	r14, r24
    632e:	f8 0a       	sbc	r15, r24
    6330:	ee cf       	rjmp	.-36     	; 0x630e <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x < camara_x_tile + CAMERA_WIDTH + 1; x++)
    6332:	0f 5f       	subi	r16, 0xFF	; 255
    6334:	1f 4f       	sbci	r17, 0xFF	; 255
    6336:	e5 cf       	rjmp	.-54     	; 0x6302 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	1f 91       	pop	r17
    633e:	0f 91       	pop	r16
    6340:	ff 90       	pop	r15
    6342:	ef 90       	pop	r14
    6344:	df 90       	pop	r13
    6346:	cf 90       	pop	r12
    6348:	bf 90       	pop	r11
    634a:	af 90       	pop	r10
    634c:	9f 90       	pop	r9
    634e:	8f 90       	pop	r8
    6350:	7f 90       	pop	r7
    6352:	08 95       	ret

00006354 <append_tile_column>:

void append_tile_column()
{
    6354:	cf 93       	push	r28
    6356:	df 93       	push	r29
    6358:	c0 e0       	ldi	r28, 0x00	; 0
    635a:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
    635c:	60 91 96 0d 	lds	r22, 0x0D96
    6360:	70 91 97 0d 	lds	r23, 0x0D97
    6364:	ae 01       	movw	r20, r28
    6366:	80 91 91 0d 	lds	r24, 0x0D91
    636a:	0e 94 41 31 	call	0x6282	; 0x6282 <get_level_tile>
		render_level_tile(level_tile, game.scroll_dest_x, y);
    636e:	4c 2f       	mov	r20, r28
    6370:	60 91 95 0d 	lds	r22, 0x0D95
    6374:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <render_level_tile>
    6378:	21 96       	adiw	r28, 0x01	; 1

void append_tile_column()
{
	u8 level_tile;

    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    637a:	ca 31       	cpi	r28, 0x1A	; 26
    637c:	d1 05       	cpc	r29, r1
    637e:	71 f7       	brne	.-36     	; 0x635c <append_tile_column+0x8>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
		render_level_tile(level_tile, game.scroll_dest_x, y);
    }
	
    game.scroll_src_x++;
    6380:	80 91 96 0d 	lds	r24, 0x0D96
    6384:	90 91 97 0d 	lds	r25, 0x0D97
    6388:	01 96       	adiw	r24, 0x01	; 1
    638a:	90 93 97 0d 	sts	0x0D97, r25
    638e:	80 93 96 0d 	sts	0x0D96, r24
	game.scroll_dest_x++;
    6392:	80 91 95 0d 	lds	r24, 0x0D95
    6396:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    6398:	80 32       	cpi	r24, 0x20	; 32
    639a:	18 f4       	brcc	.+6      	; 0x63a2 <append_tile_column+0x4e>
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y);
		render_level_tile(level_tile, game.scroll_dest_x, y);
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    639c:	80 93 95 0d 	sts	0x0D95, r24
    63a0:	02 c0       	rjmp	.+4      	; 0x63a6 <append_tile_column+0x52>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    63a2:	10 92 95 0d 	sts	0x0D95, r1
}
    63a6:	df 91       	pop	r29
    63a8:	cf 91       	pop	r28
    63aa:	08 95       	ret

000063ac <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    63ac:	80 91 98 0d 	lds	r24, 0x0D98
    63b0:	90 91 99 0d 	lds	r25, 0x0D99
    63b4:	01 96       	adiw	r24, 0x01	; 1
    63b6:	90 93 99 0d 	sts	0x0D99, r25
    63ba:	80 93 98 0d 	sts	0x0D98, r24
	Scroll(1,0);
    63be:	60 e0       	ldi	r22, 0x00	; 0
    63c0:	81 e0       	ldi	r24, 0x01	; 1
    63c2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <Scroll>
	if (++game.scroll == 8)
    63c6:	80 91 94 0d 	lds	r24, 0x0D94
    63ca:	8f 5f       	subi	r24, 0xFF	; 255
    63cc:	88 30       	cpi	r24, 0x08	; 8
    63ce:	19 f0       	breq	.+6      	; 0x63d6 <move_camera_x+0x2a>
    63d0:	80 93 94 0d 	sts	0x0D94, r24
    63d4:	08 95       	ret
	{
		game.scroll = 0;
    63d6:	10 92 94 0d 	sts	0x0D94, r1
		append_tile_column();
    63da:	0c 94 aa 31 	jmp	0x6354	; 0x6354 <append_tile_column>

000063de <load_level>:
	}
}

void load_level(u8 index)
{	
    63de:	1f 93       	push	r17
    63e0:	cf 93       	push	r28
    63e2:	df 93       	push	r29
    63e4:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    63e6:	e9 e9       	ldi	r30, 0x99	; 153
    63e8:	fc e0       	ldi	r31, 0x0C	; 12
    63ea:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    63ec:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    63ee:	8e e1       	ldi	r24, 0x1E	; 30
    63f0:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    63f2:	8c e5       	ldi	r24, 0x5C	; 92
    63f4:	9d e1       	ldi	r25, 0x1D	; 29
    63f6:	92 83       	std	Z+2, r25	; 0x02
    63f8:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    63fa:	82 e0       	ldi	r24, 0x02	; 2
    63fc:	80 83       	st	Z, r24
	clear_overlay(2);
    63fe:	0e 94 02 31 	call	0x6204	; 0x6204 <clear_overlay>
	game.current_level = index;
    6402:	c0 e9       	ldi	r28, 0x90	; 144
    6404:	dd e0       	ldi	r29, 0x0D	; 13
    6406:	19 83       	std	Y+1, r17	; 0x01

#if RLE == 0

u8 get_camera_x(u8 level_index)
{
	return pgm_read_byte(&level_data[level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0]);
    6408:	88 e5       	ldi	r24, 0x58	; 88
    640a:	96 e0       	ldi	r25, 0x06	; 6
    640c:	18 9f       	mul	r17, r24
    640e:	f0 01       	movw	r30, r0
    6410:	19 9f       	mul	r17, r25
    6412:	f0 0d       	add	r31, r0
    6414:	11 24       	eor	r1, r1
    6416:	ec 5e       	subi	r30, 0xEC	; 236
    6418:	f5 4f       	sbci	r31, 0xF5	; 245
    641a:	e4 91       	lpm	r30, Z
	Screen.scrollHeight = 30;
	Screen.overlayTileTable = tiles_data;
	Screen.overlayHeight = 2;
	clear_overlay(2);
	game.current_level = index;
	game.camera_x = get_camera_x(index);
    641c:	f0 e0       	ldi	r31, 0x00	; 0
    641e:	f9 87       	std	Y+9, r31	; 0x09
    6420:	e8 87       	std	Y+8, r30	; 0x08
	game.camera_y = get_camera_y(index);
    6422:	81 2f       	mov	r24, r17
    6424:	0e 94 1a 31 	call	0x6234	; 0x6234 <get_camera_y>
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	9b 87       	std	Y+11, r25	; 0x0b
    642c:	8a 87       	std	Y+10, r24	; 0x0a
	game.player.shared.x = get_hero_spawn_x(index)*8;
    642e:	81 2f       	mov	r24, r17
    6430:	0e 94 27 31 	call	0x624e	; 0x624e <get_hero_spawn_x>
    6434:	28 e0       	ldi	r18, 0x08	; 8
    6436:	82 9f       	mul	r24, r18
    6438:	c0 01       	movw	r24, r0
    643a:	11 24       	eor	r1, r1
    643c:	98 8b       	std	Y+16, r25	; 0x10
    643e:	8f 87       	std	Y+15, r24	; 0x0f
	game.player.shared.y = get_hero_spawn_y(index)*8;
    6440:	81 2f       	mov	r24, r17
    6442:	0e 94 34 31 	call	0x6268	; 0x6268 <get_hero_spawn_y>
    6446:	28 e0       	ldi	r18, 0x08	; 8
    6448:	82 9f       	mul	r24, r18
    644a:	c0 01       	movw	r24, r0
    644c:	11 24       	eor	r1, r1
    644e:	9a 8b       	std	Y+18, r25	; 0x12
    6450:	89 8b       	std	Y+17, r24	; 0x11
	game.camera_x *= 8;
    6452:	88 85       	ldd	r24, Y+8	; 0x08
    6454:	99 85       	ldd	r25, Y+9	; 0x09
    6456:	23 e0       	ldi	r18, 0x03	; 3
    6458:	88 0f       	add	r24, r24
    645a:	99 1f       	adc	r25, r25
    645c:	2a 95       	dec	r18
    645e:	e1 f7       	brne	.-8      	; 0x6458 <load_level+0x7a>
    6460:	99 87       	std	Y+9, r25	; 0x09
    6462:	88 87       	std	Y+8, r24	; 0x08
	game.camera_y *= 8;
    6464:	8a 85       	ldd	r24, Y+10	; 0x0a
    6466:	9b 85       	ldd	r25, Y+11	; 0x0b
    6468:	33 e0       	ldi	r19, 0x03	; 3
    646a:	88 0f       	add	r24, r24
    646c:	99 1f       	adc	r25, r25
    646e:	3a 95       	dec	r19
    6470:	e1 f7       	brne	.-8      	; 0x646a <load_level+0x8c>
    6472:	9b 87       	std	Y+11, r25	; 0x0b
    6474:	8a 87       	std	Y+10, r24	; 0x0a
	render_camera_view();
    6476:	0e 94 59 31 	call	0x62b2	; 0x62b2 <render_camera_view>
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    647a:	82 ef       	ldi	r24, 0xF2	; 242
    647c:	9d e0       	ldi	r25, 0x0D	; 13
    647e:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <LBGetNextFrame>
    6482:	40 e0       	ldi	r20, 0x00	; 0
    6484:	bc 01       	movw	r22, r24
    6486:	80 e0       	ldi	r24, 0x00	; 0
}
    6488:	df 91       	pop	r29
    648a:	cf 91       	pop	r28
    648c:	1f 91       	pop	r17
	game.player.shared.x = get_hero_spawn_x(index)*8;
	game.player.shared.y = get_hero_spawn_y(index)*8;
	game.camera_x *= 8;
	game.camera_y *= 8;
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    648e:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <LBMapSprite>

00006492 <update_player>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void update_player()
{
    6492:	cf 93       	push	r28
    6494:	df 93       	push	r29
    6496:	1f 92       	push	r1
    6498:	cd b7       	in	r28, 0x3d	; 61
    649a:	de b7       	in	r29, 0x3e	; 62
	if ((game.joypadState.held & BTN_RIGHT) && (game.player.flags & (IDLE|RUNNING)) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    649c:	20 91 1e 0e 	lds	r18, 0x0E1E
    64a0:	27 ff       	sbrs	r18, 7
    64a2:	1c c0       	rjmp	.+56     	; 0x64dc <update_player+0x4a>
    64a4:	80 91 a4 0d 	lds	r24, 0x0DA4
    64a8:	8a 70       	andi	r24, 0x0A	; 10
    64aa:	c1 f0       	breq	.+48     	; 0x64dc <update_player+0x4a>
    64ac:	80 91 9f 0d 	lds	r24, 0x0D9F
    64b0:	90 91 a0 0d 	lds	r25, 0x0DA0
    64b4:	33 e0       	ldi	r19, 0x03	; 3
    64b6:	96 95       	lsr	r25
    64b8:	87 95       	ror	r24
    64ba:	3a 95       	dec	r19
    64bc:	e1 f7       	brne	.-8      	; 0x64b6 <update_player+0x24>
    64be:	02 96       	adiw	r24, 0x02	; 2
    64c0:	cc 97       	sbiw	r24, 0x3c	; 60
    64c2:	60 f4       	brcc	.+24     	; 0x64dc <update_player+0x4a>
	{
		game.player.shared.vx = RUN_SPEED;
    64c4:	8c e3       	ldi	r24, 0x3C	; 60
    64c6:	80 93 9c 0d 	sts	0x0D9C, r24
		game.player.flags = RUNNING;
    64ca:	82 e0       	ldi	r24, 0x02	; 2
    64cc:	80 93 a4 0d 	sts	0x0DA4, r24
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    64d0:	8a ef       	ldi	r24, 0xFA	; 250
    64d2:	9d e0       	ldi	r25, 0x0D	; 13
    64d4:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <LBGetNextFrame>
    64d8:	40 e0       	ldi	r20, 0x00	; 0
    64da:	2a c0       	rjmp	.+84     	; 0x6530 <update_player+0x9e>
	}
	else if ((game.joypadState.held & BTN_LEFT) && (game.player.flags & (IDLE|RUNNING)) && (game.player.shared.x > game.camera_x))
    64dc:	26 ff       	sbrs	r18, 6
    64de:	1b c0       	rjmp	.+54     	; 0x6516 <update_player+0x84>
    64e0:	80 91 a4 0d 	lds	r24, 0x0DA4
    64e4:	8a 70       	andi	r24, 0x0A	; 10
    64e6:	b9 f0       	breq	.+46     	; 0x6516 <update_player+0x84>
    64e8:	20 91 9f 0d 	lds	r18, 0x0D9F
    64ec:	30 91 a0 0d 	lds	r19, 0x0DA0
    64f0:	80 91 98 0d 	lds	r24, 0x0D98
    64f4:	90 91 99 0d 	lds	r25, 0x0D99
    64f8:	82 17       	cp	r24, r18
    64fa:	93 07       	cpc	r25, r19
    64fc:	60 f4       	brcc	.+24     	; 0x6516 <update_player+0x84>
	{
		game.player.shared.vx = -RUN_SPEED;
    64fe:	84 ec       	ldi	r24, 0xC4	; 196
    6500:	80 93 9c 0d 	sts	0x0D9C, r24
		game.player.flags = RUNNING;
    6504:	82 e0       	ldi	r24, 0x02	; 2
    6506:	80 93 a4 0d 	sts	0x0DA4, r24
		LBMapSprite(0, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    650a:	8a ef       	ldi	r24, 0xFA	; 250
    650c:	9d e0       	ldi	r25, 0x0D	; 13
    650e:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <LBGetNextFrame>
    6512:	41 e0       	ldi	r20, 0x01	; 1
    6514:	0d c0       	rjmp	.+26     	; 0x6530 <update_player+0x9e>
	}
	else
	{
		game.player.shared.vx = 0;
    6516:	10 92 9c 0d 	sts	0x0D9C, r1
		game.player.flags = IDLE;
    651a:	88 e0       	ldi	r24, 0x08	; 8
    651c:	80 93 a4 0d 	sts	0x0DA4, r24
		LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    6520:	40 91 05 05 	lds	r20, 0x0505
    6524:	82 ef       	ldi	r24, 0xF2	; 242
    6526:	9d e0       	ldi	r25, 0x0D	; 13
    6528:	49 83       	std	Y+1, r20	; 0x01
    652a:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <LBGetNextFrame>
    652e:	49 81       	ldd	r20, Y+1	; 0x01
    6530:	bc 01       	movw	r22, r24
    6532:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6534:	0f 90       	pop	r0
    6536:	df 91       	pop	r29
    6538:	cf 91       	pop	r28
	}
	else
	{
		game.player.shared.vx = 0;
		game.player.flags = IDLE;
		LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    653a:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <LBMapSprite>

0000653e <update_player_position>:
	}
}

void update_player_position()
{
    653e:	cf 92       	push	r12
    6540:	df 92       	push	r13
    6542:	ef 92       	push	r14
    6544:	ff 92       	push	r15
    6546:	0f 93       	push	r16
    6548:	1f 93       	push	r17
    654a:	cf 93       	push	r28
    654c:	df 93       	push	r29
	game.player.shared.x += game.player.shared.vx*FRAME_TIME;
    654e:	c0 e9       	ldi	r28, 0x90	; 144
    6550:	dd e0       	ldi	r29, 0x0D	; 13
    6552:	6f 85       	ldd	r22, Y+15	; 0x0f
    6554:	78 89       	ldd	r23, Y+16	; 0x10
    6556:	80 e0       	ldi	r24, 0x00	; 0
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__floatunsisf>
    655e:	6b 01       	movw	r12, r22
    6560:	7c 01       	movw	r14, r24
    6562:	8c 85       	ldd	r24, Y+12	; 0x0c
    6564:	68 2f       	mov	r22, r24
    6566:	77 27       	eor	r23, r23
    6568:	67 fd       	sbrc	r22, 7
    656a:	70 95       	com	r23
    656c:	87 2f       	mov	r24, r23
    656e:	97 2f       	mov	r25, r23
    6570:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <__floatsisf>
    6574:	29 e8       	ldi	r18, 0x89	; 137
    6576:	38 e8       	ldi	r19, 0x88	; 136
    6578:	48 e8       	ldi	r20, 0x88	; 136
    657a:	5c e3       	ldi	r21, 0x3C	; 60
    657c:	0e 94 65 35 	call	0x6aca	; 0x6aca <__mulsf3>
    6580:	9b 01       	movw	r18, r22
    6582:	ac 01       	movw	r20, r24
    6584:	c7 01       	movw	r24, r14
    6586:	b6 01       	movw	r22, r12
    6588:	0e 94 47 34 	call	0x688e	; 0x688e <__addsf3>
    658c:	0e 94 ab 34 	call	0x6956	; 0x6956 <__fixunssfsi>
    6590:	16 2f       	mov	r17, r22
    6592:	6f 87       	std	Y+15, r22	; 0x0f
    6594:	78 8b       	std	Y+16, r23	; 0x10
	game.player.shared.y += game.player.shared.vy*FRAME_TIME;
    6596:	69 89       	ldd	r22, Y+17	; 0x11
    6598:	7a 89       	ldd	r23, Y+18	; 0x12
    659a:	80 e0       	ldi	r24, 0x00	; 0
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__floatunsisf>
    65a2:	6b 01       	movw	r12, r22
    65a4:	7c 01       	movw	r14, r24
    65a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    65a8:	68 2f       	mov	r22, r24
    65aa:	77 27       	eor	r23, r23
    65ac:	67 fd       	sbrc	r22, 7
    65ae:	70 95       	com	r23
    65b0:	87 2f       	mov	r24, r23
    65b2:	97 2f       	mov	r25, r23
    65b4:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <__floatsisf>
    65b8:	29 e8       	ldi	r18, 0x89	; 137
    65ba:	38 e8       	ldi	r19, 0x88	; 136
    65bc:	48 e8       	ldi	r20, 0x88	; 136
    65be:	5c e3       	ldi	r21, 0x3C	; 60
    65c0:	0e 94 65 35 	call	0x6aca	; 0x6aca <__mulsf3>
    65c4:	9b 01       	movw	r18, r22
    65c6:	ac 01       	movw	r20, r24
    65c8:	c7 01       	movw	r24, r14
    65ca:	b6 01       	movw	r22, r12
    65cc:	0e 94 47 34 	call	0x688e	; 0x688e <__addsf3>
    65d0:	0e 94 ab 34 	call	0x6956	; 0x6956 <__fixunssfsi>
    65d4:	69 8b       	std	Y+17, r22	; 0x11
    65d6:	7a 8b       	std	Y+18, r23	; 0x12
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
    65d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    65da:	46 2f       	mov	r20, r22
    65dc:	48 1b       	sub	r20, r24
    65de:	88 85       	ldd	r24, Y+8	; 0x08
    65e0:	61 2f       	mov	r22, r17
    65e2:	68 1b       	sub	r22, r24
    65e4:	03 e0       	ldi	r16, 0x03	; 3
    65e6:	22 e0       	ldi	r18, 0x02	; 2
    65e8:	80 e0       	ldi	r24, 0x00	; 0
    65ea:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <LBMoveSprite>
}
    65ee:	df 91       	pop	r29
    65f0:	cf 91       	pop	r28
    65f2:	1f 91       	pop	r17
    65f4:	0f 91       	pop	r16
    65f6:	ff 90       	pop	r15
    65f8:	ef 90       	pop	r14
    65fa:	df 90       	pop	r13
    65fc:	cf 90       	pop	r12
    65fe:	08 95       	ret

00006600 <update_level>:

void update_level()
{
	if (game.player.shared.vx > 0 &&
    6600:	80 91 9c 0d 	lds	r24, 0x0D9C
    6604:	18 16       	cp	r1, r24
    6606:	14 f5       	brge	.+68     	; 0x664c <update_level+0x4c>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    6608:	80 91 98 0d 	lds	r24, 0x0D98
    660c:	90 91 99 0d 	lds	r25, 0x0D99
    6610:	20 91 9f 0d 	lds	r18, 0x0D9F
    6614:	30 91 a0 0d 	lds	r19, 0x0DA0
    6618:	28 1b       	sub	r18, r24
    661a:	39 0b       	sbc	r19, r25
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
    661c:	20 37       	cpi	r18, 0x70	; 112
    661e:	31 05       	cpc	r19, r1
    6620:	a8 f0       	brcs	.+42     	; 0x664c <update_level+0x4c>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
    6622:	33 e0       	ldi	r19, 0x03	; 3
    6624:	96 95       	lsr	r25
    6626:	87 95       	ror	r24
    6628:	3a 95       	dec	r19
    662a:	e1 f7       	brne	.-8      	; 0x6624 <update_level+0x24>
    662c:	4c 96       	adiw	r24, 0x1c	; 28
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    662e:	cc 97       	sbiw	r24, 0x3c	; 60
    6630:	68 f4       	brcc	.+26     	; 0x664c <update_level+0x4c>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    6632:	80 91 9a 0d 	lds	r24, 0x0D9A
    6636:	90 91 9b 0d 	lds	r25, 0x0D9B
    663a:	23 e0       	ldi	r18, 0x03	; 3
    663c:	96 95       	lsr	r25
    663e:	87 95       	ror	r24
    6640:	2a 95       	dec	r18
    6642:	e1 f7       	brne	.-8      	; 0x663c <update_level+0x3c>

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH) &&
    6644:	89 2b       	or	r24, r25
    6646:	11 f4       	brne	.+4      	; 0x664c <update_level+0x4c>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_x();
    6648:	0c 94 d6 31 	jmp	0x63ac	; 0x63ac <move_camera_x>
    664c:	08 95       	ret

0000664e <clear_sprites>:
	}
}

void clear_sprites()
{
    664e:	0f 93       	push	r16
    6650:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    6652:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    6654:	01 e0       	ldi	r16, 0x01	; 1
    6656:	21 e0       	ldi	r18, 0x01	; 1
    6658:	40 e0       	ldi	r20, 0x00	; 0
    665a:	60 ee       	ldi	r22, 0xE0	; 224
    665c:	8c 2f       	mov	r24, r28
    665e:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <LBMoveSprite>
    6662:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    6664:	cc 31       	cpi	r28, 0x1C	; 28
    6666:	b1 f7       	brne	.-20     	; 0x6654 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    6668:	8e e0       	ldi	r24, 0x0E	; 14
}
    666a:	cf 91       	pop	r28
    666c:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    666e:	0c 94 f1 2f 	jmp	0x5fe2	; 0x5fe2 <LBRotateSprites>

00006672 <level_transition>:
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
}

void level_transition(u8 index)
{
    6672:	cf 93       	push	r28
    6674:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    6676:	61 e0       	ldi	r22, 0x01	; 1
    6678:	83 e0       	ldi	r24, 0x03	; 3
    667a:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <FadeOut>
	ClearVram();
    667e:	0e 94 ad 20 	call	0x415a	; 0x415a <ClearVram>
	clear_sprites();
    6682:	0e 94 27 33 	call	0x664e	; 0x664e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    6686:	80 e1       	ldi	r24, 0x10	; 16
    6688:	c8 9f       	mul	r28, r24
    668a:	a0 01       	movw	r20, r0
    668c:	11 24       	eor	r1, r1
    668e:	45 5a       	subi	r20, 0xA5	; 165
    6690:	56 4f       	sbci	r21, 0xF6	; 246
    6692:	6c e0       	ldi	r22, 0x0C	; 12
    6694:	70 e0       	ldi	r23, 0x00	; 0
    6696:	88 e0       	ldi	r24, 0x08	; 8
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <Print>
	FadeIn(1, true);
    669e:	61 e0       	ldi	r22, 0x01	; 1
    66a0:	81 e0       	ldi	r24, 0x01	; 1
    66a2:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    66a6:	83 e0       	ldi	r24, 0x03	; 3
    66a8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <LBWaitSeconds>
	FadeOut(1, true);
    66ac:	61 e0       	ldi	r22, 0x01	; 1
    66ae:	81 e0       	ldi	r24, 0x01	; 1
    66b0:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <FadeOut>
	ClearVram();
    66b4:	0e 94 ad 20 	call	0x415a	; 0x415a <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    66b8:	60 e0       	ldi	r22, 0x00	; 0
    66ba:	83 e0       	ldi	r24, 0x03	; 3
    66bc:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <FadeIn>
	load_level(index);
    66c0:	8c 2f       	mov	r24, r28
}
    66c2:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    66c4:	0c 94 ef 31 	jmp	0x63de	; 0x63de <load_level>

000066c8 <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    66c8:	0f 93       	push	r16
	game.current_screen = SPLASH;
    66ca:	e0 e9       	ldi	r30, 0x90	; 144
    66cc:	fd e0       	ldi	r31, 0x0D	; 13
    66ce:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    66d0:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    66d2:	0e 94 27 33 	call	0x664e	; 0x664e <clear_sprites>
	Print(8, 15, (char*) str1Player);
    66d6:	4c ea       	ldi	r20, 0xAC	; 172
    66d8:	59 e0       	ldi	r21, 0x09	; 9
    66da:	6f e0       	ldi	r22, 0x0F	; 15
    66dc:	70 e0       	ldi	r23, 0x00	; 0
    66de:	88 e0       	ldi	r24, 0x08	; 8
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <Print>
	Print(8, 16, (char*) strHighscores);
    66e6:	40 ea       	ldi	r20, 0xA0	; 160
    66e8:	59 e0       	ldi	r21, 0x09	; 9
    66ea:	60 e1       	ldi	r22, 0x10	; 16
    66ec:	70 e0       	ldi	r23, 0x00	; 0
    66ee:	88 e0       	ldi	r24, 0x08	; 8
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <Print>
	Print(6, 21, (char*) strSelectHandle);
    66f6:	4f e8       	ldi	r20, 0x8F	; 143
    66f8:	59 e0       	ldi	r21, 0x09	; 9
    66fa:	65 e1       	ldi	r22, 0x15	; 21
    66fc:	70 e0       	ldi	r23, 0x00	; 0
    66fe:	86 e0       	ldi	r24, 0x06	; 6
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <Print>
	Print(4, 26, (char*) strCopyright);
    6706:	42 eb       	ldi	r20, 0xB2	; 178
    6708:	59 e0       	ldi	r21, 0x09	; 9
    670a:	6a e1       	ldi	r22, 0x1A	; 26
    670c:	70 e0       	ldi	r23, 0x00	; 0
    670e:	84 e0       	ldi	r24, 0x04	; 4
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    6716:	42 e4       	ldi	r20, 0x42	; 66
    6718:	56 e3       	ldi	r21, 0x36	; 54
    671a:	65 e0       	ldi	r22, 0x05	; 5
    671c:	86 e0       	ldi	r24, 0x06	; 6
    671e:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    6722:	40 e0       	ldi	r20, 0x00	; 0
    6724:	66 e5       	ldi	r22, 0x56	; 86
    6726:	7d e1       	ldi	r23, 0x1D	; 29
    6728:	80 e0       	ldi	r24, 0x00	; 0
    672a:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    672e:	01 e0       	ldi	r16, 0x01	; 1
    6730:	21 e0       	ldi	r18, 0x01	; 1
    6732:	48 e7       	ldi	r20, 0x78	; 120
    6734:	68 e3       	ldi	r22, 0x38	; 56
    6736:	80 e0       	ldi	r24, 0x00	; 0
    6738:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <LBMoveSprite>
	LBRotateSprites(1);
    673c:	81 e0       	ldi	r24, 0x01	; 1
}
    673e:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    6740:	0c 94 f1 2f 	jmp	0x5fe2	; 0x5fe2 <LBRotateSprites>

00006744 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    6744:	fc 01       	movw	r30, r24
    6746:	20 81       	ld	r18, Z
    6748:	31 81       	ldd	r19, Z+1	; 0x01
    674a:	28 70       	andi	r18, 0x08	; 8
    674c:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    674e:	81 e0       	ldi	r24, 0x01	; 1
    6750:	23 2b       	or	r18, r19
    6752:	09 f4       	brne	.+2      	; 0x6756 <select_pressed+0x12>
    6754:	80 e0       	ldi	r24, 0x00	; 0
}
    6756:	08 95       	ret

00006758 <update_splash>:

void update_splash()
{
    6758:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    675a:	80 91 1a 0e 	lds	r24, 0x0E1A
    675e:	85 ff       	sbrs	r24, 5
    6760:	0b c0       	rjmp	.+22     	; 0x6778 <update_splash+0x20>
    6762:	90 91 93 0d 	lds	r25, 0x0D93
    6766:	91 11       	cpse	r25, r1
    6768:	07 c0       	rjmp	.+14     	; 0x6778 <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    676a:	81 e0       	ldi	r24, 0x01	; 1
    676c:	80 93 93 0d 	sts	0x0D93, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    6770:	01 e0       	ldi	r16, 0x01	; 1
    6772:	21 e0       	ldi	r18, 0x01	; 1
    6774:	40 e8       	ldi	r20, 0x80	; 128
    6776:	0b c0       	rjmp	.+22     	; 0x678e <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    6778:	84 ff       	sbrs	r24, 4
    677a:	0e c0       	rjmp	.+28     	; 0x6798 <update_splash+0x40>
    677c:	80 91 93 0d 	lds	r24, 0x0D93
    6780:	81 30       	cpi	r24, 0x01	; 1
    6782:	51 f4       	brne	.+20     	; 0x6798 <update_splash+0x40>
	{
		game.selection = START_SELECTED;
    6784:	10 92 93 0d 	sts	0x0D93, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    6788:	01 e0       	ldi	r16, 0x01	; 1
    678a:	21 e0       	ldi	r18, 0x01	; 1
    678c:	48 e7       	ldi	r20, 0x78	; 120
    678e:	68 e3       	ldi	r22, 0x38	; 56
    6790:	80 e0       	ldi	r24, 0x00	; 0
    6792:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <LBMoveSprite>
    6796:	11 c0       	rjmp	.+34     	; 0x67ba <update_splash+0x62>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    6798:	8a e1       	ldi	r24, 0x1A	; 26
    679a:	9e e0       	ldi	r25, 0x0E	; 14
    679c:	0e 94 a2 33 	call	0x6744	; 0x6744 <select_pressed>
    67a0:	88 23       	and	r24, r24
    67a2:	59 f0       	breq	.+22     	; 0x67ba <update_splash+0x62>
    67a4:	80 91 93 0d 	lds	r24, 0x0D93
    67a8:	81 11       	cpse	r24, r1
    67aa:	07 c0       	rjmp	.+14     	; 0x67ba <update_splash+0x62>
	{
		game.current_screen = LEVEL;
    67ac:	82 e0       	ldi	r24, 0x02	; 2
    67ae:	80 93 90 0d 	sts	0x0D90, r24
		level_transition(0);
    67b2:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}
}
    67b4:	0f 91       	pop	r16
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    67b6:	0c 94 39 33 	jmp	0x6672	; 0x6672 <level_transition>
		return;
	}
}
    67ba:	0f 91       	pop	r16
    67bc:	08 95       	ret

000067be <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    67be:	87 ec       	ldi	r24, 0xC7	; 199
    67c0:	99 e0       	ldi	r25, 0x09	; 9
    67c2:	0e 94 84 22 	call	0x4508	; 0x4508 <InitMusicPlayer>
	ClearVram();
    67c6:	0e 94 ad 20 	call	0x415a	; 0x415a <ClearVram>
	SetMasterVolume(0xff);
    67ca:	8f ef       	ldi	r24, 0xFF	; 255
    67cc:	0e 94 01 26 	call	0x4c02	; 0x4c02 <SetMasterVolume>
	SetTileTable(tiles_data);
    67d0:	8c e5       	ldi	r24, 0x5C	; 92
    67d2:	9d e1       	ldi	r25, 0x1D	; 29
    67d4:	0e 94 cf 20 	call	0x419e	; 0x419e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    67d8:	8c e6       	ldi	r24, 0x6C	; 108
    67da:	90 e1       	ldi	r25, 0x10	; 16
    67dc:	0e 94 a8 20 	call	0x4150	; 0x4150 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    67e0:	83 e2       	ldi	r24, 0x23	; 35
    67e2:	0e 94 cc 20 	call	0x4198	; 0x4198 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    67e6:	60 e0       	ldi	r22, 0x00	; 0
    67e8:	83 e0       	ldi	r24, 0x03	; 3
    67ea:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <FadeIn>
	init_game_state();
    67ee:	0e 94 58 30 	call	0x60b0	; 0x60b0 <init_game_state>
	load_splash();
    67f2:	0e 94 64 33 	call	0x66c8	; 0x66c8 <load_splash>
	while (1)
	{
		WaitVsync(1);
    67f6:	81 e0       	ldi	r24, 0x01	; 1
    67f8:	90 e0       	ldi	r25, 0x00	; 0
    67fa:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    67fe:	60 e0       	ldi	r22, 0x00	; 0
    6800:	8a e1       	ldi	r24, 0x1A	; 26
    6802:	9e e0       	ldi	r25, 0x0E	; 14
    6804:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <LBGetJoyPadState>
		switch (game.current_screen)
    6808:	80 91 90 0d 	lds	r24, 0x0D90
    680c:	88 23       	and	r24, r24
    680e:	51 f0       	breq	.+20     	; 0x6824 <main+0x66>
    6810:	82 30       	cpi	r24, 0x02	; 2
    6812:	89 f7       	brne	.-30     	; 0x67f6 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites(1);
				break;
			case LEVEL:
				update_level();
    6814:	0e 94 00 33 	call	0x6600	; 0x6600 <update_level>
				update_player();
    6818:	0e 94 49 32 	call	0x6492	; 0x6492 <update_player>
				update_player_position();
    681c:	0e 94 9f 32 	call	0x653e	; 0x653e <update_player_position>
				LBRotateSprites(6);
    6820:	86 e0       	ldi	r24, 0x06	; 6
    6822:	03 c0       	rjmp	.+6      	; 0x682a <main+0x6c>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    6824:	0e 94 ac 33 	call	0x6758	; 0x6758 <update_splash>
				LBRotateSprites(1);
    6828:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case LEVEL:
				update_level();
				update_player();
				update_player_position();
				LBRotateSprites(6);
    682a:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <LBRotateSprites>
				break;
    682e:	e3 cf       	rjmp	.-58     	; 0x67f6 <main+0x38>

00006830 <__udivmodhi4>:
    6830:	aa 1b       	sub	r26, r26
    6832:	bb 1b       	sub	r27, r27
    6834:	51 e1       	ldi	r21, 0x11	; 17
    6836:	07 c0       	rjmp	.+14     	; 0x6846 <__udivmodhi4_ep>

00006838 <__udivmodhi4_loop>:
    6838:	aa 1f       	adc	r26, r26
    683a:	bb 1f       	adc	r27, r27
    683c:	a6 17       	cp	r26, r22
    683e:	b7 07       	cpc	r27, r23
    6840:	10 f0       	brcs	.+4      	; 0x6846 <__udivmodhi4_ep>
    6842:	a6 1b       	sub	r26, r22
    6844:	b7 0b       	sbc	r27, r23

00006846 <__udivmodhi4_ep>:
    6846:	88 1f       	adc	r24, r24
    6848:	99 1f       	adc	r25, r25
    684a:	5a 95       	dec	r21
    684c:	a9 f7       	brne	.-22     	; 0x6838 <__udivmodhi4_loop>
    684e:	80 95       	com	r24
    6850:	90 95       	com	r25
    6852:	bc 01       	movw	r22, r24
    6854:	cd 01       	movw	r24, r26
    6856:	08 95       	ret

00006858 <__divmodhi4>:
    6858:	97 fb       	bst	r25, 7
    685a:	07 2e       	mov	r0, r23
    685c:	16 f4       	brtc	.+4      	; 0x6862 <__divmodhi4+0xa>
    685e:	00 94       	com	r0
    6860:	07 d0       	rcall	.+14     	; 0x6870 <__divmodhi4_neg1>
    6862:	77 fd       	sbrc	r23, 7
    6864:	09 d0       	rcall	.+18     	; 0x6878 <__divmodhi4_neg2>
    6866:	0e 94 18 34 	call	0x6830	; 0x6830 <__udivmodhi4>
    686a:	07 fc       	sbrc	r0, 7
    686c:	05 d0       	rcall	.+10     	; 0x6878 <__divmodhi4_neg2>
    686e:	3e f4       	brtc	.+14     	; 0x687e <__divmodhi4_exit>

00006870 <__divmodhi4_neg1>:
    6870:	90 95       	com	r25
    6872:	81 95       	neg	r24
    6874:	9f 4f       	sbci	r25, 0xFF	; 255
    6876:	08 95       	ret

00006878 <__divmodhi4_neg2>:
    6878:	70 95       	com	r23
    687a:	61 95       	neg	r22
    687c:	7f 4f       	sbci	r23, 0xFF	; 255

0000687e <__divmodhi4_exit>:
    687e:	08 95       	ret

00006880 <__tablejump2__>:
    6880:	ee 0f       	add	r30, r30
    6882:	ff 1f       	adc	r31, r31
    6884:	05 90       	lpm	r0, Z+
    6886:	f4 91       	lpm	r31, Z
    6888:	e0 2d       	mov	r30, r0
    688a:	09 94       	ijmp

0000688c <__subsf3>:
    688c:	50 58       	subi	r21, 0x80	; 128

0000688e <__addsf3>:
    688e:	bb 27       	eor	r27, r27
    6890:	aa 27       	eor	r26, r26
    6892:	0e d0       	rcall	.+28     	; 0x68b0 <__addsf3x>
    6894:	e0 c0       	rjmp	.+448    	; 0x6a56 <__fp_round>
    6896:	d1 d0       	rcall	.+418    	; 0x6a3a <__fp_pscA>
    6898:	30 f0       	brcs	.+12     	; 0x68a6 <__addsf3+0x18>
    689a:	d6 d0       	rcall	.+428    	; 0x6a48 <__fp_pscB>
    689c:	20 f0       	brcs	.+8      	; 0x68a6 <__addsf3+0x18>
    689e:	31 f4       	brne	.+12     	; 0x68ac <__addsf3+0x1e>
    68a0:	9f 3f       	cpi	r25, 0xFF	; 255
    68a2:	11 f4       	brne	.+4      	; 0x68a8 <__addsf3+0x1a>
    68a4:	1e f4       	brtc	.+6      	; 0x68ac <__addsf3+0x1e>
    68a6:	c6 c0       	rjmp	.+396    	; 0x6a34 <__fp_nan>
    68a8:	0e f4       	brtc	.+2      	; 0x68ac <__addsf3+0x1e>
    68aa:	e0 95       	com	r30
    68ac:	e7 fb       	bst	r30, 7
    68ae:	bc c0       	rjmp	.+376    	; 0x6a28 <__fp_inf>

000068b0 <__addsf3x>:
    68b0:	e9 2f       	mov	r30, r25
    68b2:	e2 d0       	rcall	.+452    	; 0x6a78 <__fp_split3>
    68b4:	80 f3       	brcs	.-32     	; 0x6896 <__addsf3+0x8>
    68b6:	ba 17       	cp	r27, r26
    68b8:	62 07       	cpc	r22, r18
    68ba:	73 07       	cpc	r23, r19
    68bc:	84 07       	cpc	r24, r20
    68be:	95 07       	cpc	r25, r21
    68c0:	18 f0       	brcs	.+6      	; 0x68c8 <__addsf3x+0x18>
    68c2:	71 f4       	brne	.+28     	; 0x68e0 <__addsf3x+0x30>
    68c4:	9e f5       	brtc	.+102    	; 0x692c <__addsf3x+0x7c>
    68c6:	fa c0       	rjmp	.+500    	; 0x6abc <__fp_zero>
    68c8:	0e f4       	brtc	.+2      	; 0x68cc <__addsf3x+0x1c>
    68ca:	e0 95       	com	r30
    68cc:	0b 2e       	mov	r0, r27
    68ce:	ba 2f       	mov	r27, r26
    68d0:	a0 2d       	mov	r26, r0
    68d2:	0b 01       	movw	r0, r22
    68d4:	b9 01       	movw	r22, r18
    68d6:	90 01       	movw	r18, r0
    68d8:	0c 01       	movw	r0, r24
    68da:	ca 01       	movw	r24, r20
    68dc:	a0 01       	movw	r20, r0
    68de:	11 24       	eor	r1, r1
    68e0:	ff 27       	eor	r31, r31
    68e2:	59 1b       	sub	r21, r25
    68e4:	99 f0       	breq	.+38     	; 0x690c <__addsf3x+0x5c>
    68e6:	59 3f       	cpi	r21, 0xF9	; 249
    68e8:	50 f4       	brcc	.+20     	; 0x68fe <__addsf3x+0x4e>
    68ea:	50 3e       	cpi	r21, 0xE0	; 224
    68ec:	68 f1       	brcs	.+90     	; 0x6948 <__addsf3x+0x98>
    68ee:	1a 16       	cp	r1, r26
    68f0:	f0 40       	sbci	r31, 0x00	; 0
    68f2:	a2 2f       	mov	r26, r18
    68f4:	23 2f       	mov	r18, r19
    68f6:	34 2f       	mov	r19, r20
    68f8:	44 27       	eor	r20, r20
    68fa:	58 5f       	subi	r21, 0xF8	; 248
    68fc:	f3 cf       	rjmp	.-26     	; 0x68e4 <__addsf3x+0x34>
    68fe:	46 95       	lsr	r20
    6900:	37 95       	ror	r19
    6902:	27 95       	ror	r18
    6904:	a7 95       	ror	r26
    6906:	f0 40       	sbci	r31, 0x00	; 0
    6908:	53 95       	inc	r21
    690a:	c9 f7       	brne	.-14     	; 0x68fe <__addsf3x+0x4e>
    690c:	7e f4       	brtc	.+30     	; 0x692c <__addsf3x+0x7c>
    690e:	1f 16       	cp	r1, r31
    6910:	ba 0b       	sbc	r27, r26
    6912:	62 0b       	sbc	r22, r18
    6914:	73 0b       	sbc	r23, r19
    6916:	84 0b       	sbc	r24, r20
    6918:	ba f0       	brmi	.+46     	; 0x6948 <__addsf3x+0x98>
    691a:	91 50       	subi	r25, 0x01	; 1
    691c:	a1 f0       	breq	.+40     	; 0x6946 <__addsf3x+0x96>
    691e:	ff 0f       	add	r31, r31
    6920:	bb 1f       	adc	r27, r27
    6922:	66 1f       	adc	r22, r22
    6924:	77 1f       	adc	r23, r23
    6926:	88 1f       	adc	r24, r24
    6928:	c2 f7       	brpl	.-16     	; 0x691a <__addsf3x+0x6a>
    692a:	0e c0       	rjmp	.+28     	; 0x6948 <__addsf3x+0x98>
    692c:	ba 0f       	add	r27, r26
    692e:	62 1f       	adc	r22, r18
    6930:	73 1f       	adc	r23, r19
    6932:	84 1f       	adc	r24, r20
    6934:	48 f4       	brcc	.+18     	; 0x6948 <__addsf3x+0x98>
    6936:	87 95       	ror	r24
    6938:	77 95       	ror	r23
    693a:	67 95       	ror	r22
    693c:	b7 95       	ror	r27
    693e:	f7 95       	ror	r31
    6940:	9e 3f       	cpi	r25, 0xFE	; 254
    6942:	08 f0       	brcs	.+2      	; 0x6946 <__addsf3x+0x96>
    6944:	b3 cf       	rjmp	.-154    	; 0x68ac <__addsf3+0x1e>
    6946:	93 95       	inc	r25
    6948:	88 0f       	add	r24, r24
    694a:	08 f0       	brcs	.+2      	; 0x694e <__addsf3x+0x9e>
    694c:	99 27       	eor	r25, r25
    694e:	ee 0f       	add	r30, r30
    6950:	97 95       	ror	r25
    6952:	87 95       	ror	r24
    6954:	08 95       	ret

00006956 <__fixunssfsi>:
    6956:	98 d0       	rcall	.+304    	; 0x6a88 <__fp_splitA>
    6958:	88 f0       	brcs	.+34     	; 0x697c <__fixunssfsi+0x26>
    695a:	9f 57       	subi	r25, 0x7F	; 127
    695c:	90 f0       	brcs	.+36     	; 0x6982 <__fixunssfsi+0x2c>
    695e:	b9 2f       	mov	r27, r25
    6960:	99 27       	eor	r25, r25
    6962:	b7 51       	subi	r27, 0x17	; 23
    6964:	a0 f0       	brcs	.+40     	; 0x698e <__fixunssfsi+0x38>
    6966:	d1 f0       	breq	.+52     	; 0x699c <__fixunssfsi+0x46>
    6968:	66 0f       	add	r22, r22
    696a:	77 1f       	adc	r23, r23
    696c:	88 1f       	adc	r24, r24
    696e:	99 1f       	adc	r25, r25
    6970:	1a f0       	brmi	.+6      	; 0x6978 <__fixunssfsi+0x22>
    6972:	ba 95       	dec	r27
    6974:	c9 f7       	brne	.-14     	; 0x6968 <__fixunssfsi+0x12>
    6976:	12 c0       	rjmp	.+36     	; 0x699c <__fixunssfsi+0x46>
    6978:	b1 30       	cpi	r27, 0x01	; 1
    697a:	81 f0       	breq	.+32     	; 0x699c <__fixunssfsi+0x46>
    697c:	9f d0       	rcall	.+318    	; 0x6abc <__fp_zero>
    697e:	b1 e0       	ldi	r27, 0x01	; 1
    6980:	08 95       	ret
    6982:	9c c0       	rjmp	.+312    	; 0x6abc <__fp_zero>
    6984:	67 2f       	mov	r22, r23
    6986:	78 2f       	mov	r23, r24
    6988:	88 27       	eor	r24, r24
    698a:	b8 5f       	subi	r27, 0xF8	; 248
    698c:	39 f0       	breq	.+14     	; 0x699c <__fixunssfsi+0x46>
    698e:	b9 3f       	cpi	r27, 0xF9	; 249
    6990:	cc f3       	brlt	.-14     	; 0x6984 <__fixunssfsi+0x2e>
    6992:	86 95       	lsr	r24
    6994:	77 95       	ror	r23
    6996:	67 95       	ror	r22
    6998:	b3 95       	inc	r27
    699a:	d9 f7       	brne	.-10     	; 0x6992 <__fixunssfsi+0x3c>
    699c:	3e f4       	brtc	.+14     	; 0x69ac <__fixunssfsi+0x56>
    699e:	90 95       	com	r25
    69a0:	80 95       	com	r24
    69a2:	70 95       	com	r23
    69a4:	61 95       	neg	r22
    69a6:	7f 4f       	sbci	r23, 0xFF	; 255
    69a8:	8f 4f       	sbci	r24, 0xFF	; 255
    69aa:	9f 4f       	sbci	r25, 0xFF	; 255
    69ac:	08 95       	ret

000069ae <__floatunsisf>:
    69ae:	e8 94       	clt
    69b0:	09 c0       	rjmp	.+18     	; 0x69c4 <__floatsisf+0x12>

000069b2 <__floatsisf>:
    69b2:	97 fb       	bst	r25, 7
    69b4:	3e f4       	brtc	.+14     	; 0x69c4 <__floatsisf+0x12>
    69b6:	90 95       	com	r25
    69b8:	80 95       	com	r24
    69ba:	70 95       	com	r23
    69bc:	61 95       	neg	r22
    69be:	7f 4f       	sbci	r23, 0xFF	; 255
    69c0:	8f 4f       	sbci	r24, 0xFF	; 255
    69c2:	9f 4f       	sbci	r25, 0xFF	; 255
    69c4:	99 23       	and	r25, r25
    69c6:	a9 f0       	breq	.+42     	; 0x69f2 <__floatsisf+0x40>
    69c8:	f9 2f       	mov	r31, r25
    69ca:	96 e9       	ldi	r25, 0x96	; 150
    69cc:	bb 27       	eor	r27, r27
    69ce:	93 95       	inc	r25
    69d0:	f6 95       	lsr	r31
    69d2:	87 95       	ror	r24
    69d4:	77 95       	ror	r23
    69d6:	67 95       	ror	r22
    69d8:	b7 95       	ror	r27
    69da:	f1 11       	cpse	r31, r1
    69dc:	f8 cf       	rjmp	.-16     	; 0x69ce <__floatsisf+0x1c>
    69de:	fa f4       	brpl	.+62     	; 0x6a1e <__floatsisf+0x6c>
    69e0:	bb 0f       	add	r27, r27
    69e2:	11 f4       	brne	.+4      	; 0x69e8 <__floatsisf+0x36>
    69e4:	60 ff       	sbrs	r22, 0
    69e6:	1b c0       	rjmp	.+54     	; 0x6a1e <__floatsisf+0x6c>
    69e8:	6f 5f       	subi	r22, 0xFF	; 255
    69ea:	7f 4f       	sbci	r23, 0xFF	; 255
    69ec:	8f 4f       	sbci	r24, 0xFF	; 255
    69ee:	9f 4f       	sbci	r25, 0xFF	; 255
    69f0:	16 c0       	rjmp	.+44     	; 0x6a1e <__floatsisf+0x6c>
    69f2:	88 23       	and	r24, r24
    69f4:	11 f0       	breq	.+4      	; 0x69fa <__floatsisf+0x48>
    69f6:	96 e9       	ldi	r25, 0x96	; 150
    69f8:	11 c0       	rjmp	.+34     	; 0x6a1c <__floatsisf+0x6a>
    69fa:	77 23       	and	r23, r23
    69fc:	21 f0       	breq	.+8      	; 0x6a06 <__floatsisf+0x54>
    69fe:	9e e8       	ldi	r25, 0x8E	; 142
    6a00:	87 2f       	mov	r24, r23
    6a02:	76 2f       	mov	r23, r22
    6a04:	05 c0       	rjmp	.+10     	; 0x6a10 <__floatsisf+0x5e>
    6a06:	66 23       	and	r22, r22
    6a08:	71 f0       	breq	.+28     	; 0x6a26 <__floatsisf+0x74>
    6a0a:	96 e8       	ldi	r25, 0x86	; 134
    6a0c:	86 2f       	mov	r24, r22
    6a0e:	70 e0       	ldi	r23, 0x00	; 0
    6a10:	60 e0       	ldi	r22, 0x00	; 0
    6a12:	2a f0       	brmi	.+10     	; 0x6a1e <__floatsisf+0x6c>
    6a14:	9a 95       	dec	r25
    6a16:	66 0f       	add	r22, r22
    6a18:	77 1f       	adc	r23, r23
    6a1a:	88 1f       	adc	r24, r24
    6a1c:	da f7       	brpl	.-10     	; 0x6a14 <__floatsisf+0x62>
    6a1e:	88 0f       	add	r24, r24
    6a20:	96 95       	lsr	r25
    6a22:	87 95       	ror	r24
    6a24:	97 f9       	bld	r25, 7
    6a26:	08 95       	ret

00006a28 <__fp_inf>:
    6a28:	97 f9       	bld	r25, 7
    6a2a:	9f 67       	ori	r25, 0x7F	; 127
    6a2c:	80 e8       	ldi	r24, 0x80	; 128
    6a2e:	70 e0       	ldi	r23, 0x00	; 0
    6a30:	60 e0       	ldi	r22, 0x00	; 0
    6a32:	08 95       	ret

00006a34 <__fp_nan>:
    6a34:	9f ef       	ldi	r25, 0xFF	; 255
    6a36:	80 ec       	ldi	r24, 0xC0	; 192
    6a38:	08 95       	ret

00006a3a <__fp_pscA>:
    6a3a:	00 24       	eor	r0, r0
    6a3c:	0a 94       	dec	r0
    6a3e:	16 16       	cp	r1, r22
    6a40:	17 06       	cpc	r1, r23
    6a42:	18 06       	cpc	r1, r24
    6a44:	09 06       	cpc	r0, r25
    6a46:	08 95       	ret

00006a48 <__fp_pscB>:
    6a48:	00 24       	eor	r0, r0
    6a4a:	0a 94       	dec	r0
    6a4c:	12 16       	cp	r1, r18
    6a4e:	13 06       	cpc	r1, r19
    6a50:	14 06       	cpc	r1, r20
    6a52:	05 06       	cpc	r0, r21
    6a54:	08 95       	ret

00006a56 <__fp_round>:
    6a56:	09 2e       	mov	r0, r25
    6a58:	03 94       	inc	r0
    6a5a:	00 0c       	add	r0, r0
    6a5c:	11 f4       	brne	.+4      	; 0x6a62 <__fp_round+0xc>
    6a5e:	88 23       	and	r24, r24
    6a60:	52 f0       	brmi	.+20     	; 0x6a76 <__fp_round+0x20>
    6a62:	bb 0f       	add	r27, r27
    6a64:	40 f4       	brcc	.+16     	; 0x6a76 <__fp_round+0x20>
    6a66:	bf 2b       	or	r27, r31
    6a68:	11 f4       	brne	.+4      	; 0x6a6e <__fp_round+0x18>
    6a6a:	60 ff       	sbrs	r22, 0
    6a6c:	04 c0       	rjmp	.+8      	; 0x6a76 <__fp_round+0x20>
    6a6e:	6f 5f       	subi	r22, 0xFF	; 255
    6a70:	7f 4f       	sbci	r23, 0xFF	; 255
    6a72:	8f 4f       	sbci	r24, 0xFF	; 255
    6a74:	9f 4f       	sbci	r25, 0xFF	; 255
    6a76:	08 95       	ret

00006a78 <__fp_split3>:
    6a78:	57 fd       	sbrc	r21, 7
    6a7a:	90 58       	subi	r25, 0x80	; 128
    6a7c:	44 0f       	add	r20, r20
    6a7e:	55 1f       	adc	r21, r21
    6a80:	59 f0       	breq	.+22     	; 0x6a98 <__fp_splitA+0x10>
    6a82:	5f 3f       	cpi	r21, 0xFF	; 255
    6a84:	71 f0       	breq	.+28     	; 0x6aa2 <__fp_splitA+0x1a>
    6a86:	47 95       	ror	r20

00006a88 <__fp_splitA>:
    6a88:	88 0f       	add	r24, r24
    6a8a:	97 fb       	bst	r25, 7
    6a8c:	99 1f       	adc	r25, r25
    6a8e:	61 f0       	breq	.+24     	; 0x6aa8 <__fp_splitA+0x20>
    6a90:	9f 3f       	cpi	r25, 0xFF	; 255
    6a92:	79 f0       	breq	.+30     	; 0x6ab2 <__fp_splitA+0x2a>
    6a94:	87 95       	ror	r24
    6a96:	08 95       	ret
    6a98:	12 16       	cp	r1, r18
    6a9a:	13 06       	cpc	r1, r19
    6a9c:	14 06       	cpc	r1, r20
    6a9e:	55 1f       	adc	r21, r21
    6aa0:	f2 cf       	rjmp	.-28     	; 0x6a86 <__fp_split3+0xe>
    6aa2:	46 95       	lsr	r20
    6aa4:	f1 df       	rcall	.-30     	; 0x6a88 <__fp_splitA>
    6aa6:	08 c0       	rjmp	.+16     	; 0x6ab8 <__fp_splitA+0x30>
    6aa8:	16 16       	cp	r1, r22
    6aaa:	17 06       	cpc	r1, r23
    6aac:	18 06       	cpc	r1, r24
    6aae:	99 1f       	adc	r25, r25
    6ab0:	f1 cf       	rjmp	.-30     	; 0x6a94 <__fp_splitA+0xc>
    6ab2:	86 95       	lsr	r24
    6ab4:	71 05       	cpc	r23, r1
    6ab6:	61 05       	cpc	r22, r1
    6ab8:	08 94       	sec
    6aba:	08 95       	ret

00006abc <__fp_zero>:
    6abc:	e8 94       	clt

00006abe <__fp_szero>:
    6abe:	bb 27       	eor	r27, r27
    6ac0:	66 27       	eor	r22, r22
    6ac2:	77 27       	eor	r23, r23
    6ac4:	cb 01       	movw	r24, r22
    6ac6:	97 f9       	bld	r25, 7
    6ac8:	08 95       	ret

00006aca <__mulsf3>:
    6aca:	0b d0       	rcall	.+22     	; 0x6ae2 <__mulsf3x>
    6acc:	c4 cf       	rjmp	.-120    	; 0x6a56 <__fp_round>
    6ace:	b5 df       	rcall	.-150    	; 0x6a3a <__fp_pscA>
    6ad0:	28 f0       	brcs	.+10     	; 0x6adc <__mulsf3+0x12>
    6ad2:	ba df       	rcall	.-140    	; 0x6a48 <__fp_pscB>
    6ad4:	18 f0       	brcs	.+6      	; 0x6adc <__mulsf3+0x12>
    6ad6:	95 23       	and	r25, r21
    6ad8:	09 f0       	breq	.+2      	; 0x6adc <__mulsf3+0x12>
    6ada:	a6 cf       	rjmp	.-180    	; 0x6a28 <__fp_inf>
    6adc:	ab cf       	rjmp	.-170    	; 0x6a34 <__fp_nan>
    6ade:	11 24       	eor	r1, r1
    6ae0:	ee cf       	rjmp	.-36     	; 0x6abe <__fp_szero>

00006ae2 <__mulsf3x>:
    6ae2:	ca df       	rcall	.-108    	; 0x6a78 <__fp_split3>
    6ae4:	a0 f3       	brcs	.-24     	; 0x6ace <__mulsf3+0x4>

00006ae6 <__mulsf3_pse>:
    6ae6:	95 9f       	mul	r25, r21
    6ae8:	d1 f3       	breq	.-12     	; 0x6ade <__mulsf3+0x14>
    6aea:	95 0f       	add	r25, r21
    6aec:	50 e0       	ldi	r21, 0x00	; 0
    6aee:	55 1f       	adc	r21, r21
    6af0:	62 9f       	mul	r22, r18
    6af2:	f0 01       	movw	r30, r0
    6af4:	72 9f       	mul	r23, r18
    6af6:	bb 27       	eor	r27, r27
    6af8:	f0 0d       	add	r31, r0
    6afa:	b1 1d       	adc	r27, r1
    6afc:	63 9f       	mul	r22, r19
    6afe:	aa 27       	eor	r26, r26
    6b00:	f0 0d       	add	r31, r0
    6b02:	b1 1d       	adc	r27, r1
    6b04:	aa 1f       	adc	r26, r26
    6b06:	64 9f       	mul	r22, r20
    6b08:	66 27       	eor	r22, r22
    6b0a:	b0 0d       	add	r27, r0
    6b0c:	a1 1d       	adc	r26, r1
    6b0e:	66 1f       	adc	r22, r22
    6b10:	82 9f       	mul	r24, r18
    6b12:	22 27       	eor	r18, r18
    6b14:	b0 0d       	add	r27, r0
    6b16:	a1 1d       	adc	r26, r1
    6b18:	62 1f       	adc	r22, r18
    6b1a:	73 9f       	mul	r23, r19
    6b1c:	b0 0d       	add	r27, r0
    6b1e:	a1 1d       	adc	r26, r1
    6b20:	62 1f       	adc	r22, r18
    6b22:	83 9f       	mul	r24, r19
    6b24:	a0 0d       	add	r26, r0
    6b26:	61 1d       	adc	r22, r1
    6b28:	22 1f       	adc	r18, r18
    6b2a:	74 9f       	mul	r23, r20
    6b2c:	33 27       	eor	r19, r19
    6b2e:	a0 0d       	add	r26, r0
    6b30:	61 1d       	adc	r22, r1
    6b32:	23 1f       	adc	r18, r19
    6b34:	84 9f       	mul	r24, r20
    6b36:	60 0d       	add	r22, r0
    6b38:	21 1d       	adc	r18, r1
    6b3a:	82 2f       	mov	r24, r18
    6b3c:	76 2f       	mov	r23, r22
    6b3e:	6a 2f       	mov	r22, r26
    6b40:	11 24       	eor	r1, r1
    6b42:	9f 57       	subi	r25, 0x7F	; 127
    6b44:	50 40       	sbci	r21, 0x00	; 0
    6b46:	8a f0       	brmi	.+34     	; 0x6b6a <__mulsf3_pse+0x84>
    6b48:	e1 f0       	breq	.+56     	; 0x6b82 <__mulsf3_pse+0x9c>
    6b4a:	88 23       	and	r24, r24
    6b4c:	4a f0       	brmi	.+18     	; 0x6b60 <__mulsf3_pse+0x7a>
    6b4e:	ee 0f       	add	r30, r30
    6b50:	ff 1f       	adc	r31, r31
    6b52:	bb 1f       	adc	r27, r27
    6b54:	66 1f       	adc	r22, r22
    6b56:	77 1f       	adc	r23, r23
    6b58:	88 1f       	adc	r24, r24
    6b5a:	91 50       	subi	r25, 0x01	; 1
    6b5c:	50 40       	sbci	r21, 0x00	; 0
    6b5e:	a9 f7       	brne	.-22     	; 0x6b4a <__mulsf3_pse+0x64>
    6b60:	9e 3f       	cpi	r25, 0xFE	; 254
    6b62:	51 05       	cpc	r21, r1
    6b64:	70 f0       	brcs	.+28     	; 0x6b82 <__mulsf3_pse+0x9c>
    6b66:	60 cf       	rjmp	.-320    	; 0x6a28 <__fp_inf>
    6b68:	aa cf       	rjmp	.-172    	; 0x6abe <__fp_szero>
    6b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    6b6c:	ec f3       	brlt	.-6      	; 0x6b68 <__mulsf3_pse+0x82>
    6b6e:	98 3e       	cpi	r25, 0xE8	; 232
    6b70:	dc f3       	brlt	.-10     	; 0x6b68 <__mulsf3_pse+0x82>
    6b72:	86 95       	lsr	r24
    6b74:	77 95       	ror	r23
    6b76:	67 95       	ror	r22
    6b78:	b7 95       	ror	r27
    6b7a:	f7 95       	ror	r31
    6b7c:	e7 95       	ror	r30
    6b7e:	9f 5f       	subi	r25, 0xFF	; 255
    6b80:	c1 f7       	brne	.-16     	; 0x6b72 <__mulsf3_pse+0x8c>
    6b82:	fe 2b       	or	r31, r30
    6b84:	88 0f       	add	r24, r24
    6b86:	91 1d       	adc	r25, r1
    6b88:	96 95       	lsr	r25
    6b8a:	87 95       	ror	r24
    6b8c:	97 f9       	bld	r25, 7
    6b8e:	08 95       	ret

00006b90 <_exit>:
    6b90:	f8 94       	cli

00006b92 <__stop_program>:
    6b92:	ff cf       	rjmp	.-2      	; 0x6b92 <__stop_program>
