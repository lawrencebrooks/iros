
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000c902  0000ca02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000ca20  2**5
                  CONTENTS, READONLY
  2 .text         0000c902  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b03  00800510  00800510  0000ca12  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000ce20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000d528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000d819  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000688  00000000  00000000  0000d830  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000913a  00000000  00000000  0000deb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016a1  00000000  00000000  00016ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022aa  00000000  00000000  00018693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001640  00000000  00000000  0001a940  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001c9f  00000000  00000000  0001bf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007aee  00000000  00000000  0001dc1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000808  00000000  00000000  00025710  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 2f 	jmp	0x5e90	; 0x5e90 <__ctors_end>
       4:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
       8:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
       c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      10:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      14:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      18:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      1c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      20:	0c 94 29 35 	jmp	0x6a52	; 0x6a52 <__vector_8>
      24:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      28:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      2c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      30:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      34:	0c 94 f5 32 	jmp	0x65ea	; 0x65ea <__vector_13>
      38:	0c 94 35 33 	jmp	0x666a	; 0x666a <__vector_14>
      3c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      40:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      44:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      48:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      4c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      50:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      54:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      58:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      5c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      60:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      64:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      68:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      6c:	0c 94 b1 2f 	jmp	0x5f62	; 0x5f62 <__bad_interrupt>
      70:	2b 57       	subi	r18, 0x7B	; 123
      72:	3a 57       	subi	r19, 0x7A	; 122
      74:	2e 57       	subi	r18, 0x7E	; 126
      76:	3a 57       	subi	r19, 0x7A	; 122
      78:	31 57       	subi	r19, 0x71	; 113
      7a:	3a 57       	subi	r19, 0x7A	; 122
      7c:	34 57       	subi	r19, 0x74	; 116
      7e:	3a 57       	subi	r19, 0x7A	; 122
      80:	37 57       	subi	r19, 0x77	; 119
      82:	3a 57       	subi	r19, 0x7A	; 122

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	d2 36 d5 36 31 37 35 37 3c 37 dd 36 e2 36 e7 36     .6.61757<7.6.6.6
      e2:	44 37 ea 36 ed 36 f0 36 2b 37 2e 37 54 37           D7.6.6.6+7.7T7

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strTally>:
     b10:	54 41 4c 4c 59 20 00                                TALLY .

00000b17 <strGameOver>:
     b17:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b21 <strLevelBonus>:
     b21:	42 4f 4e 55 53 00                                   BONUS.

00000b27 <strLevelClear>:
     b27:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b33 <strPaused>:
     b33:	50 41 55 53 45 00                                   PAUSE.

00000b39 <strExitGame>:
     b39:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b45 <strMainMenu>:
     b45:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b51 <strTime>:
     b51:	54 49 4d 45 20 00                                   TIME .

00000b57 <strLives>:
     b57:	4c 49 56 45 53 20 00                                LIVES .

00000b5e <strShield>:
     b5e:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b66 <strScore>:
     b66:	53 43 4f 52 45 20 00                                SCORE .

00000b6d <strSelectHandle>:
	...

00000b6e <strHighScores>:
     b6e:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b7a <str1Player>:
     b7a:	53 54 41 52 54 00                                   START.

00000b80 <strMusic>:
     b80:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b90:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b98 <strCopyright>:
     b98:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     ba8:	4f 4f 4b 53 00                                      OOKS.

00000bad <spacesong>:
     bad:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bbd:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bcd:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bdd:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bed:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bfd:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c0d:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c1d:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c2d:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c3d:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c4d:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c5d:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c6d:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c7d:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c8d:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c9d:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cad:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cbd:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ccd:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cdd:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     ced:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cfd:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d0d:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d1d:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d2d:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d3d:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d4d:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d5d:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d6d:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d7d:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d8d:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d9d:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     dad:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     dbd:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dcd:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     ddd:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     ded:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dfd:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e0d:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e1d:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e2d:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e3d:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e4d:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e5d:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e6d:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e7d:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e8d:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e9d:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     ead:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ebd:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ecd:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     edd:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eed:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     efd:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f0d:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f1d:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f2d:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f3d:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f4d:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f5d:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f6d:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f7d:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f8d:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f9d:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fad:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fbd:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fcd:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fdd:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fed:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     ffd:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    100d:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    101d:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    102d:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    103d:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    104d:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    105d:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    106d:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    107d:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    108d:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    109d:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10ad:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10bd:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10cd:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10dd:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ed:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10fd:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    110d:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    111d:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    112d:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    113d:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    114d:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    115d:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    116d:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    117d:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    118d:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    119d:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11ad:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11bd:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11cd:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11dd:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ed:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11fd:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    120d:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    121d:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    122d:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    123d:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000124d <planetsong>:
    124d:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    125d:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    126d:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    127d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    128d:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    129d:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12ad:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12bd:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12cd:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12dd:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ed:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12fd:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    130d:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    131d:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    132d:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    133d:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    134d:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    135d:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    136d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    137d:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    138d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    139d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13ad:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13bd:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13cd:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13dd:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ed:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13fd:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    140d:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    141d:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    142d:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    143d:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    144d:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    145d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    146d:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    147d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    148d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149d:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14ad:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14bd:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14cd:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14dd:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ed:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14fd:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    150d:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    151d:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    152d:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    153d:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    154d:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    155d:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    156d:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    157d:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    158d:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    159d:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15ad:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15bd:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15cd:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15dd:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ed:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15fd:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    160d:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    161d:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    162d:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    163d:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    164d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    165d:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    166d:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    167d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    168d:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    169d:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16ad:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16bd:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16cd:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16dd:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ed:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16fd:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    170d:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    171d:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    172d:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    173d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    174d:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    175d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    176d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177d:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    178d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    179d:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17ad:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17bd:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17cd:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17dd:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ed:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17fd:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    180d:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    181d:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    182d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    183d:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    184d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    185d:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    186d:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    187d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    188d:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    189d:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18ad:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18bd:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18cd:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18dd:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ed:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18fd:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    190d:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    191d:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    192d:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    193d:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    194d:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    195d:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    196d:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    197d:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    198d:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    199d:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19ad:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19bd:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19cd:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19dd:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ed:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19fd:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a0d:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a1d:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a2d:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a3d:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a4d:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a5d:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a6d:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a7d:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a8d:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a9d:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1aad:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1abd:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1acd:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1add:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aed:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1afd:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b0d:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b1d:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b2d:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b3d:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b4d:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b5d:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b6d:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b7d:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b8d:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b9d:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bad:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bbd:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bcd:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bdd:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bed:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bfd:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c0d:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c1d:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c2d:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c3d:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c4d:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c5d:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c6d:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c7d:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c8d:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c9d:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cad:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cbd:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ccd:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cdd:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1ced:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cfd:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d0d:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d1d:	2f 00                                               /.

00001d1f <my_patches>:
    1d1f:	00 00 00 96 1e 00 00 00 00 00 00 00 96 1e 00 00     ................
    1d2f:	00 00 00 00 00 85 1e 00 00 00 00 00 00 00 2f 1e     ............../.
    1d3f:	00 00 00 00 00 00 00 85 1e 00 00 00 00 00 00 00     ................
    1d4f:	5e 1d 00 00 00 00 00 00 00 5e 1d 00 00 00 00        ^........^.....

00001d5e <explode>:
    1d5e:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d6e:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d7e:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d8e:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d9e:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1dae:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1dbe:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dce:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1dde:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1dee:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dfe:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e0e:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e1e:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e2e:	ff                                                  .

00001e2f <pshoot>:
    1e2f:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e3f:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e4f:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e5f:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e6f:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e7f:	00 01 05 00 00 ff                                   ......

00001e85 <navigate>:
    1e85:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e95:	ff                                                  .

00001e96 <instrument>:
    1e96:	00 02 04 00 00 dd 00 ff                             ........

00001e9e <sprites_data>:
    1e9e:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1eae:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ebe:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ece:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1ede:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eee:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1efe:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f0e:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f2e:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f3e:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f4e:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f5e:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f6e:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f7e:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f8e:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fae:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1fbe:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fde:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fee:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ffe:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    200e:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    201e:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    202e:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    203e:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    204e:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    205e:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    206e:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    207e:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    208e:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    209e:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20ae:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20be:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20ce:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20de:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ee:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20fe:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    210e:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211e:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    212e:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    213e:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    214e:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    215e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    218e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    219e:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21ae:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21be:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21ce:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21de:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ee:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21fe:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    220e:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    221e:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    222e:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    223e:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    224e:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    225e:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    226e:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    227e:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    228e:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    229e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22ae:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22be:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22ce:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22de:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ee:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22fe:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    230e:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    231e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    232e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    233e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    234e:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    235e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236e:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    237e:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    238e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    239e:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23ae:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23be:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23ce:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23de:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ee:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23fe:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    240e:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    241e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    242e:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    243e:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    244e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    245e:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    246e:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    247e:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    248e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    249e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24ae:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24be:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24ce:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24de:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ee:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24fe:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    250e:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    251e:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    252e:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    253e:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    254e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    255e:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    256e:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    257e:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    258e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    259e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25ae:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25be:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25ce:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25de:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ee:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25fe:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    260e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261e:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    262e:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    263e:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    264e:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    265e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    266e:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    267e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    268e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269e:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26ae:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26be:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26ce:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26de:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ee:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26fe:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    270e:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    271e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    272e:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    273e:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    274e:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    275e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276e:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    277e:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    278e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27ae:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27be:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27ce:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ee:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27fe:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    280e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281e:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    282e:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    283e:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    284e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    285e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    288e:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    289e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28ae:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28de:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ee:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28fe:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    290e:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    291e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    292e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    293e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295e:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    296e:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    297e:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    298e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    299e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ae:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29be:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29ce:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29de:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ee:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29fe:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a0e:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2e:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a3e:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a4e:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a5e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a6e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a7e:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a8e:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a9e:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2aae:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2abe:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2ace:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2ade:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2aee:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2afe:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b0e:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b1e:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b2e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b6e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b7e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b8e:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b9e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2bae:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bbe:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bce:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bde:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bee:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bfe:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c0e:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c4e:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c6e:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c7e:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c8e:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c9e:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2cae:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cbe:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2cce:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cde:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2cee:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cfe:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d0e:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d1e:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d2e:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d3e:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d4e:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d5e <map_enemy_spider_1>:
    2d5e:	01 01 29                                            ..)

00002d61 <map_enemy_spider_0>:
    2d61:	01 01 1e                                            ...

00002d64 <map_enemy_shark>:
    2d64:	01 01 05                                            ...

00002d67 <map_enemy_shot>:
    2d67:	01 01 13                                            ...

00002d6a <map_hero_shot>:
    2d6a:	01 01 04                                            ...

00002d6d <map_hero_ship_large_1>:
    2d6d:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d77 <map_hero_ship_large_0>:
    2d77:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d81 <map_hero_ship_1>:
    2d81:	03 01 2a 20 21                                      ..* !

00002d86 <map_hero_ship_0>:
    2d86:	03 01 1f 20 21                                      ... !

00002d8b <map_hero_prone>:
    2d8b:	03 01 36 37 38                                      ..678

00002d90 <map_hero_jump>:
    2d90:	02 03 02 03 0f 12 1c 1d                             ........

00002d98 <map_hero_step_3>:
    2d98:	02 03 02 03 0f 33 34 35                             .....345

00002da0 <map_hero_step_2>:
    2da0:	02 03 00 01 0c 11 1a 1b                             ........

00002da8 <map_hero_step_1>:
    2da8:	02 03 02 03 0f 10 18 19                             ........

00002db0 <map_hero_step_0>:
    2db0:	02 03 00 01 0c 0e 16 17                             ........

00002db8 <map_hero_idle>:
    2db8:	02 03 00 01 0c 0d 14 15                             ........

00002dc0 <map_emerald_4>:
    2dc0:	01 01 0a                                            ...

00002dc3 <map_emerald_3>:
    2dc3:	01 01 09                                            ...

00002dc6 <map_emerald_2>:
    2dc6:	01 01 08                                            ...

00002dc9 <map_emerald_0>:
    2dc9:	01 01 07                                            ...

00002dcc <map_emerald_1>:
    2dcc:	01 01 06                                            ...

00002dcf <map_explosion_2>:
    2dcf:	01 01 24                                            ..$

00002dd2 <map_explosion_1>:
    2dd2:	01 01 23                                            ..#

00002dd5 <map_explosion_0>:
    2dd5:	01 01 22                                            .."

00002dd8 <map_particle>:
    2dd8:	01 01 25                                            ..%

00002ddb <map_up_arrow>:
    2ddb:	01 01 28                                            ..(

00002dde <map_down_arrow>:
    2dde:	01 01 27                                            ..'

00002de1 <map_right_arrow>:
    2de1:	01 01 26                                            ..&

00002de4 <map_none>:
    2de4:	01 01 0b                                            ...

00002de7 <tiles_data>:
	...
    2e27:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e37:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2e47:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    2e57:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    2e67:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e77:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2e87:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    2e97:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2ea7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2eb7:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2ec7:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    2ed7:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    2ee7:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    2ef7:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    2f07:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    2f17:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2f27:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    2f37:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    2f47:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    2f57:	af af af af af af af af af af af af af af af af     ................
    2f67:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f77:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f87:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f97:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2fa7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fb7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fc7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fd7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fe7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2ff7:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3007:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3017:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3027:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3037:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3047:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3057:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3067:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3077:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3087:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3097:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    30a7:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30b7:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    30c7:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30d7:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    30e7:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    30f7:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3107:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3117:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3127:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3137:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3147:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3157:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3167:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3177:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3187:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3197:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    31a7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31b7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31c7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31d7:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31e7:	2b 28 2b 28 2b 28 2b 28 28 2b 28 2b 28 2b 28 2b     +(+(+(+((+(+(+(+
    31f7:	28 2b 28 2b 28 2b 28 2b 28 2b 65 6e 65 6e 28 2b     (+(+(+(+(+enen(+
    3207:	28 65 6e 65 6e 65 6e 2b 65 6e 65 6e 65 6e 65 6e     (enenen+enenenen
    3217:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3227:	b5 23 23 b5 b5 23 23 b5 b5 b5 b5 23 23 b5 b5 b5     .##..##....##...
    3237:	b5 06 06 06 06 06 06 b5 06 06 06 06 06 06 06 06     ................
    3247:	b5 06 06 06 06 06 06 b5 b5 b5 06 06 06 06 b5 b5     ................
    3257:	b5 06 06 77 77 06 06 b5 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3267:	23 64 63 62 23 64 63 62 23 64 63 62 23 64 63 62     #dcb#dcb#dcb#dcb
    3277:	23 65 65 65 23 65 65 65 23 65 65 65 23 65 65 65     #eee#eee#eee#eee
    3287:	23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5     #.#.#.#.#.#.#.#.
    3297:	23 23 23 b5 23 b5 23 b5 b5 23 23 b5 b5 23 23 b5     ###.#.#..##..##.
    32a7:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    32b7:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    32c7:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    32d7:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    32e7:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    32f7:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3307:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3317:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3327:	80 80 80 00 80 80 80 80 80 80 80 00 80 80 80 80     ................
    3337:	80 00 00 00 80 80 80 80 80 00 80 80 80 80 80 80     ................
    3347:	80 00 00 00 80 80 80 80 80 80 80 00 00 00 80 80     ................
    3357:	80 80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80     ................
    3367:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3377:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3387:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3397:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    33a7:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    33b7:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    33c7:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    33d7:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    33e7:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    33f7:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3407:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3417:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3427:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3437:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3447:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3457:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3467:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3477:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3487:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3497:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    34a7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    34b7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    34e7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    34f7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3507:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3517:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    353f:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    354f:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    357f:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    358f:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35a7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35b7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35c7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35d7:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35e7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    35f7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3607:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3617:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3627:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3637:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3647:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3657:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3673:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3683:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3693:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    36a3:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    36b3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36c3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36d3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36e3:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    36f3:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3703:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3713:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3723:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3733:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3743:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3753:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3763:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3773:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3783:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3793:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    37a3:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    37b3:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    37c3:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    37d3:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    37e3:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    37f3:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    3803:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    3813:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    3823:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    3833:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3843:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3853:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3863:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    3873:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    3883:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    3893:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    38a3:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    38b3:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    38c3:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    38d3:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    38e3:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    38f3:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    3903:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    3913:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    3923:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    3933:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    3943:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3953:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    3963:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    3973:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    3983:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    39a7:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    39b7:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    39c7:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    39d7:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    39e7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    39f7:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3a07:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    3a2f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3a3f:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    3a4f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3a6f:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    3a7f:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    3a8f:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    3aaf:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    3abf:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3acf:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    3aef:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    3aff:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    3b0f:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3b33:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    3b43:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    3b53:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    3b6f:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    3b7f:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    3b8f:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3baf:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    3bbf:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    3bcf:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3bef:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    3bff:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3c0f:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    3c2f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c3f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c4f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3c6f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c7f:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    3c8f:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    3caf:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    3cbf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3ccf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3cef:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3cff:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3d0f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    3d2f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3d3f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3d4f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    3d6f:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    3d7f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3d8f:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    3daf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3dbf:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3dcf:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3def:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3dff:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3e0f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    3e2f:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3e3f:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    3e4f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    3e6f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e7f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e8f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3eaf:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    3ebf:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    3ecf:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3ef3:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f03:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    3f13:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    3f2f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    3f3f:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    3f4f:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    3f6f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f7f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f8f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3faf:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    3fbf:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    3fcf:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    3fef:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    3fff:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    400f:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    402f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    403f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    404f:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    406f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    407f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    408f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    40af:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    40bf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    40cf:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    40ef:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    40ff:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    410f:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    412f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    413f:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    414f:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    416f:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    417f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    418f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    41af:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41bf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41cf:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    41ef:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    41ff:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    420f:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    422f:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    423f:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    424f:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    426f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    427f:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    428f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    42af:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    42bf:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    42cf:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    42ef:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    42ff:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    430f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4327:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4337:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4347:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4357:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    4387:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4397:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43a7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43b7:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43c7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43d7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43e7:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    43f7:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4407:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4417:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4427:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4437:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4447:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4457:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4467:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4477:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4487:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4497:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44a7:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    44b7:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    44c7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44d7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44e7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    44f7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4507:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4517:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4527:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4537:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4547:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4557:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4567:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4577:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4587:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4597:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    45a7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45b7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45c7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45d7:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45e7:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    45f7:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4607:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4617:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4627:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4637:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4647:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4657:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4667:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4677:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4687:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4697:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    46a7:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    46b7:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    46c7:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    46d7:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    46e7:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    46f7:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4707:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4717:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4727:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4737:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4747:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4757:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4767:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4777:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4787:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4797:	b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6     ................
    47a7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47b7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47c7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47d7:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47e7:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    47f7:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4807:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4817:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4827:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4837:	80 80 80 80 80 80 80 80 80 80 80 e3 80 80 80 80     ................
    4847:	80 80 e3 ff e3 80 80 80 80 80 80 e3 80 80 80 80     ................
    4857:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4867:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    4877:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    4887:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    4897:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    48a7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    48b7:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    48c7:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    48d7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    48e7:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    48f7:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    4907:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    4917:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4927:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4937:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4947:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4957:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4967:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4977:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    4987:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4997:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    49a7:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    49b7:	be be be be be be be be be be be be be be be be     ................
    49c7:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    49d7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    49e7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    49f7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a07:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a17:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a27:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a37:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a47:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a57:	77 77 77 77 77 6d 64 65 77 77 77 77 6e 5b 5b 51     wwwwwmdewwwwn[[Q
    4a67:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a77:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4a87:	77 77 77 77 77 77 77 77 77 77 77 5b 5b 5b 5b 5b     wwwwwwwwwww[[[[[
    4a97:	1c 25 51 00 00 09 09 09 09 08 09 09 09 09 09 09     .%Q.............
    4aa7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4ab7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4ac7:	6e 52 52 5a 6e 6e 77 77 00 00 00 5a 09 5b 64 77     nRRZnnww...Z.[dw
    4ad7:	09 11 09 08 09 09 12 12 09 09 09 09 5b 5b 52 09     ............[[R.
    4ae7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4af7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b07:	77 77 77 77 77 77 77 77 77 6d 64 77 77 77 77 77     wwwwwwwwwmdwwwww
    4b17:	09 52 12 12 1c 6d 6d 6d 00 00 09 09 0a 5a 5b 09     .R...mmm.....Z[.
    4b27:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b37:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b47:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b57:	77 77 77 77 77 77 77 77 5a 5b 5b 6e 77 77 77 77     wwwwwwwwZ[[nwwww
    4b67:	77 64 0a 09 09 00 08 00 5a 52 09 08 00 00 00 10     wd......ZR......
    4b77:	77 77 59 64 6e 09 6d 25 77 77 77 77 77 77 1c 09     wwYdn.m%wwwwww..
    4b87:	77 77 77 77 77 77 77 64 77 77 77 77 77 77 77 77     wwwwwwwdwwwwwwww
    4b97:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4ba7:	00 08 09 5a 09 51 51 50 00 09 09 1b 51 00 7f 1c     ...Z.QQP....Q...
    4bb7:	09 51 09 13 6e 00 1c 77 64 09 12 65 1c 00 11 1c     .Q..n..wd..e....
    4bc7:	00 6e 77 6d 5b 6e 1c 6e 77 65 65 1c 0a 65 6e 00     .nwm[n.nwee..en.
    4bd7:	77 77 77 77 77 12 1c 77 77 77 77 77 77 77 1c 0a     wwwww..wwwwwww..
    4be7:	50 09 09 48 51 51 00 09 13 65 77 6d 09 6d 6e 77     P..HQQ...ewm.mnw
    4bf7:	77 0a 09 00 76 09 12 77 77 09 77 09 1c 64 77 1c     w...v..ww.w..dw.
    4c07:	09 13 13 09 01 09 00 77 6e 1c 09 09 00 25 6e 09     .......wn....%n.
    4c17:	00 12 00 77 1b 08 1b 7f 09 7f 12 77 09 1c 12 77     ...w.......w...w
    4c27:	09 08 09 09 08 09 09 09 13 00 09 09 09 11 5a 09     ..............Z.
    4c37:	12 1c 6e 76 13 11 09 08 00 00 1b 77 6e 25 00 77     ..nv.......wn%.w
    4c47:	6e 6d 77 77 00 09 09 77 65 77 77 65 77 09 0a 09     nmww...wewwew...
    4c57:	77 77 00 52 01 1c 77 7f 7f 00 77 77 77 77 77 77     ww.R..w...wwwwww
    4c67:	09 00 09 5b 11 5a 09 5c 11 1b 13 12 5c 13 64 63     ...[.Z.\....\.dc
    4c77:	09 5a 00 77 77 77 77 77 7f 13 77 77 77 77 77 77     .Z.wwwww..wwwwww
    4c87:	13 7f 77 77 77 77 77 77 77 77 77 77 77 77 77 77     ..wwwwwwwwwwwwww
    4c97:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4ca7:	77 77 77 77 77 77 77 6e 77 77 77 77 77 77 77 77     wwwwwwwnwwwwwwww
    4cb7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4cc7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4cd7:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4ce7:	1c 6d 13 00 77 13 7f 6d 0a 64 00 64 77 13 6e 00     .m..w..m.d.dw.n.
    4cf7:	77 0a 00 77 7f 00 0a 77 77 7f 00 77 08 6e 77 77     w..w...ww..w.nww
    4d07:	77 77 48 00 6e 77 77 77 77 77 65 00 77 77 77 77     wwH.nwwwwwe.wwww
    4d17:	77 77 01 01 77 77 77 77 77 0b 00 01 77 77 77 77     ww..wwwww...wwww
    4d27:	09 7f 77 77 77 77 77 77 6e 77 77 77 77 77 77 77     ..wwwwwwnwwwwwww
    4d37:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d47:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d57:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww

00004d67 <map_font>:
    4d67:	25 01 00 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d     %..123456789:;<=
    4d77:	3e 3f 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d     >?@ABCDEFGHIJKLM
    4d87:	4e 4f 50 51 52 53 54                                NOPQRST

00004d8e <map_atmosphere>:
    4d8e:	1c 02 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b     ..++++++++++++++
    4d9e:	2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2f 2f     ++++++++++++++//
    4dae:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    4dbe:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f                       //////////

00004dc8 <map_star_dark>:
    4dc8:	01 01 1e                                            ...

00004dcb <map_star>:
    4dcb:	01 01 1d                                            ...

00004dce <map_desert_spike_down>:
    4dce:	01 01 18                                            ...

00004dd1 <map_desert_spike_up>:
    4dd1:	01 01 19                                            ...

00004dd4 <map_desert_top>:
    4dd4:	01 01 16                                            ...

00004dd7 <map_desert_bottom>:
    4dd7:	01 01 17                                            ...

00004dda <map_city_spark>:
    4dda:	01 01 15                                            ...

00004ddd <map_city_top>:
    4ddd:	01 01 14                                            ...

00004de0 <map_city_bottom>:
    4de0:	01 01 13                                            ...

00004de3 <map_jungle_branch>:
    4de3:	01 01 12                                            ...

00004de6 <map_jungle_flower>:
    4de6:	01 01 11                                            ...

00004de9 <map_jungle_top>:
    4de9:	01 01 10                                            ...

00004dec <map_jungle_bottom>:
    4dec:	01 01 0f                                            ...

00004def <map_fire_lava>:
    4def:	01 01 0e                                            ...

00004df2 <map_fire_top>:
    4df2:	01 01 0d                                            ...

00004df5 <map_fire_bottom>:
    4df5:	01 01 0c                                            ...

00004df8 <map_icicle_up>:
    4df8:	01 01 0a                                            ...

00004dfb <map_icicle_down>:
    4dfb:	01 01 09                                            ...

00004dfe <map_ice_bottom>:
    4dfe:	01 01 04                                            ...

00004e01 <map_ice_right>:
    4e01:	01 01 03                                            ...

00004e04 <map_ice_middle>:
    4e04:	01 01 02                                            ...

00004e07 <map_ice_left>:
    4e07:	01 01 01                                            ...

00004e0a <map_canvas>:
    4e0a:	0f 09 1a 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    4e1a:	1c 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    4e2a:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    4e46:	00 20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     . ..............
    4e56:	20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20      .............. 
    4e66:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    4e82:	00 20 55 56 56 56 56 56 56 56 56 56 56 56 56 56     . UVVVVVVVVVVVVV
    4e92:	57                                                  W

00004e93 <map_splash>:
    4e93:	0f 05 21 21 21 00 21 21 21 00 22 23 24 1d 21 21     ..!!!.!!!."#$.!!
    4ea3:	21 00 21 00 00 21 1e 00 00 25 26 27 00 21 00 1d     !.!..!...%&'.!..
    4eb3:	1e 21 00 1d 21 00 00 00 28 29 2a 00 21 21 21 00     .!..!...()*.!!!.
    4ec3:	21 00 00 21 00 1d 00 2c 2d 2e 00 00 00 21 21 21     !..!...,-....!!!
    4ed3:	21 00 21 00 00 00 30 00 1e 00 21 21 21              !.!...0...!!!

00004ee0 <map_tile_none>:
    4ee0:	01 01 00                                            ...

00004ee3 <map_space_mega_tiles>:
	...
    4eeb:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    4f13:	00 1e 00 00 00 00 00 00 00 00 00 1d 00 00 00 00     ................
	...
    4f37:	1d 00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    4f47:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 00 00     ................
	...
    4f6b:	1d 00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00     ................
    4f7b:	00 00 1e 00 00 00 00 00 00 00 00 00 00 00 1e 00     ................
	...
    4f93:	00 00 1d 00 00 1d 00 00 00 00 00 00 00 00 00 00     ................
    4fa3:	00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00 00     ................
	...
    4fbb:	00 00 00 1e 00 00 00 1e 1d 00 00 00 00 00 00 00     ................
    4fcb:	00 00 00 1d 00 00 00 00 00 00 00 00 00 1d 00 00     ................
	...
    4fef:	00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5007:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    5023:	1e 00 00 00 00 00 00 00 00 00 00 00 00 1e 00 00     ................
	...
    503b:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1e     ................
    504b:	00 00 00 00 00 00 00 1d 1d 00 00 00 00 00 00 00     ................
    505b:	00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00     ................
    506b:	00 00 00 00 00 1d 00 00 00 00 00 00 00 00 00 00     ................
    507b:	00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00     ................
	...
    5097:	00 00 1e 00 00 00 00 00 00 00 00 00 00 1d 00 00     ................
	...
    50af:	00 1e 00 00 00 00 00 00 00 00 00 00 1d 00 00 00     ................
	...
    50c7:	00 1d 00 00 00 00 00 00 00 00 00 00 00 1d 00 00     ................
    50d7:	00 00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    50ef:	00 00 1d 00 00 00 00 00 00 00 1e 00 00 00 00 00     ................
	...
    5107:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 1d 00     ................
	...
    5133:	00 1e 00 00 00 00 1d 00 00 00 1d 1e 00 00 00 00     ................
	...
    5157:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5167:	00 00 00 1e 00 00 00 00 00 1d 00 00 00 00 00 00     ................

00005177 <map_level_space>:
    5177:	08 05 00 01 02 03 04 05 06 07 08 09 00 0a 0b 00     ................
    5187:	03 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a     ................
    5197:	1b 1c 06 0c 1d 03 1e 1f 03 20                       ......... 

000051a1 <map_level_mega_tiles>:
    51a1:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    51b1:	06 06 06 06 06 06 06 06 06 08 06 06 06 06 06 06     ................
    51c1:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    51d1:	06 06 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    51e1:	04 04 04 04 04 04 04 04 04 04 04 06 06 06 06 06     ................
    51f1:	06 06 06 06 06 05 05 05 05 05 07 07 07 07 07 07     ................
    5201:	07 07 07 07 06 06 08 06 06 06 06 06 06 06 05 05     ................
    5211:	05 05 05 07 07 07 07 07 07 07 07 07 07 04 04 04     ................
    5221:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5231:	04 09 09 09 09 09 07 07 07 07 07 07 07 07 07 07     ................
    5241:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5251:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5261:	07 07 07 02 02 02 02 02 02 02 02 02 02 09 09 09     ................
    5271:	09 09 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5281:	07 07 07 07 07 07 07 07 07 07 07 07 07 58 07 07     .............X..
    5291:	07 07 59 5a 5b 5b 5a 5c 07 07 07 07 07 07 07 07     ..YZ[[Z\........
    52a1:	07 07 07 07 07 07 07 07 07 07 07 07 07 02 07 07     ................
    52b1:	07 02 04 07 07 07 07 02 07 07 07 02 04 07 07 02     ................
    52c1:	04 04 02 02 04 04 04 04 04 04 04 04 02 02 07 07     ................
    52d1:	07 04 04 02 02 07 04 04 04 04 02 04 04 04 04 04     ................
    52e1:	04 04 04 04 04 07 07 07 07 07 07 07 07 07 07 07     ................
    52f1:	07 07 07 07 02 07 07 07 07 04 02 07 07 07 07 07     ................
    5301:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5311:	07 07 07 07 07 07 02 07 07 07 07 07 07 07 07 07     ................
    5321:	07 07 07 07 07 07 07 07 07 07 07 0a 0a 0a 0a 0a     ................
    5331:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5341:	07 07 07 07 02 07 07 07 07 07 07 07 07 07 07 07     ................
    5351:	07 07 07 07 07 07 07 07 02 02 02 02 02 04 04 04     ................
    5361:	04 04 07 07 5c 5b 5a 5a 5b 5c 07 07 07 07 5d 07     ....\[ZZ[\....].
    5371:	07 02 02 02 02 02 04 04 04 04 04 07 07 02 04 04     ................
    5381:	07 02 04 04 04 02 04 04 04 04 04 04 04 04 04 04     ................
    5391:	04 04 04 04 04 04 02 07 07 04 04 04 02 07 04 04     ................
    53a1:	04 04 02 04 04 04 04 04 04 04 04 04 04 07 07 07     ................
    53b1:	07 07 07 07 07 07 07 07 07 07 07 07 0a 0a 0a 0a     ................
    53c1:	0a 04 04 04 04 04 07 07 07 02 04 07 07 02 04 04     ................
    53d1:	07 02 04 04 04 02 04 04 04 04 04 04 04 04 04 04     ................
    53e1:	02 07 07 07 04 04 02 07 07 04 04 04 02 07 04 04     ................
    53f1:	04 04 02 04 04 04 04 04 5e 5e 5e 5e 5e 5e 5e 5e     ........^^^^^^^^
    5401:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     ^^^^^^^^^^^^^^^^
    5411:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 0b 0b 0b 0b 0b     ^^^^^^^^^^^.....
    5421:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5e 5e 5e 5e 5e 5e     __________^^^^^^
    5431:	5e 5e 5e 5e 0b 0b 0b 0b 0b 5f 5f 5f 5f 5f 5f 60     ^^^^.....______`
    5441:	61 62 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ab______________
    5451:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 63 5c 5c 5c     ____________c\\\
    5461:	64 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     d_______________
    5471:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5481:	5f 5f 5f 5f 0d 0d 0d 0d 0d 5f 5f 5f 5f 5f 5f 5f     ____....._______
    5491:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    54a1:	5f 5f 5f 5f 5f 5f 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f     ______._________
    54b1:	5f 5f 5f 5f 5f 5f 0c 5f 5f 5f 5f 0c 0e 0e 0e 0e     ______.____.....
    54c1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    54d1:	5f 5f 0c 5f 0e 0e 0e 0c 0c 5f 5f 5f 5f 5f 5f 5f     __._....._______
    54e1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d     _____________...
    54f1:	0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..______________
    5501:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 5f 5f 5f 0c 0c     __________.___..
    5511:	5f 5f 0c 0c 0c 5f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     __..._..........
    5521:	0c 0c 0c 0c 0c 0c 0e 0e 0e 0c 0c 0c 0c 0c 0c 0c     ................
    5531:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0c     ................
    5541:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5551:	0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f 0c 0c 5f 5f 5f     .......____..___
    5561:	0c 0c 0c 5f 5f 0c 0c 0c 0c 5f 0c 0c 0c 0c 0d 5f     ...__...._....._
    5571:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5581:	5f 5f 5f 0c 0e 0e 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f     ___.....________
    5591:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0e 0e 0e 0c     ____________....
    55a1:	0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ._______________
    55b1:	5f 5f 5f 5f 5f 5f 0c 0c 0e 0e 5f 5f 5f 5f 5f 5f     ______....______
    55c1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0e 0e     ______________..
    55d1:	0e 0e 0e 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..._____________
    55e1:	5f 5f 5f 5f 5f 5f 5f 0c 0c 5f 5f 5f 5f 5f 5f 5f     _______.._______
    55f1:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 0d     ___________.....
    5601:	0c 0c 0c 0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     .....___________
    5611:	5f 5f 5f 5f 0d 0d 5f 5f 5f 0c 0c 0e 0e 0e 5f 5f     ____..___.....__
    5621:	5f 0d 0c 5f 5f 0d 0c 0c 5f 0d 0c 0c 0c 0d 0c 0c     _..__..._.......
    5631:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5641:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5651:	0d 5f 5f 5f 5f 0c 0d 5f 5f 5f 0c 0c 0d 5f 5f 0c     .____..___...__.
    5661:	0c 0c 5f 5f 0c 0c 0c 0e 0e 5f 5f 5f 0c 0c 5f 5f     ..__.....___..__
    5671:	0c 0c 0c 5f 0c 0c 0c 0c 0d 0c 0c 0c 0c 0c 0c 0c     ..._............
    5681:	0c 0c 0c 5f 5f 5f 5f 0c 0c 5f 5f 5f 0c 0c 0c 5f     ...____..___..._
    5691:	5f 0c 0c 0c 0d 0d 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f     _.........._____
    56a1:	5f 5f 5f 5f 0c 5f 5f 5f 0c 0c 0d 0d 0d 0c 0c 0c     ____.___........
    56b1:	0c 0c 0c 0c 0c 0c 0c 0c 0e 0c 0c 0c 0c 0c 0c 0c     ................
    56c1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0e     ................
    56d1:	0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    56e1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 0c 0c 0c 0c 5f     .........__...._
    56f1:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 65     ...............e
    5701:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    5711:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    5721:	65 65 66 66 66 66 66 67 67 67 67 67 67 67 67 67     eefffffggggggggg
    5731:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    5741:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    5751:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 12 12     gggggggggggggg..
    5761:	12 12 12 67 67 11 67 67 67 67 67 67 67 67 67 67     ...gg.gggggggggg
    5771:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    5781:	67 67 67 67 67 67 67 67 67 67 67 10 10 10 10 10     ggggggggggg.....
    5791:	0f 0f 0f 0f 0f 67 67 67 67 67 67 67 67 67 67 67     .....ggggggggggg
    57a1:	67 67 67 67 67 67 67 67 67 04 04 04 04 04 67 67     ggggggggg.....gg
    57b1:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 10 10     gggggggggggggg..
    57c1:	10 67 04 0f 0f 0f 04 68 68 68 68 68 68 68 68 68     .g.....hhhhhhhhh
    57d1:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    57e1:	68 68 68 68 68 68 68 68 68 68 68 68 69 68 68 68     hhhhhhhhhhhhihhh
    57f1:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    5801:	6a 68 68 68 6a 06 68 68 6a 06 06 68 68 6b 6b 6b     jhhhj.hhj..hhkkk
    5811:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    5821:	68 68 68 68 68 68 6b 6b 6b 6b 68 68 68 68 68 68     hhhhhhkkkkhhhhhh
    5831:	68 68 68 68 68 68 68 68 68 68 14 14 14 14 14 68     hhhhhhhhhh.....h
    5841:	68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68     hhhhhhhhhhhhhhhh
    5851:	68 68 68 14 14 14 14 14 68 68 15 68 68 6b 6b 6b     hhh.....hh.hhkkk
    5861:	68 6c 6b 6b 6b 6c 6d 6b 6b 6b 6e 6e 6b 6b 6b 6e     hlkkklmkkknnkkkn
    5871:	6e 6b 6b 6b 6e 6e 6b 6b 6b 6b 68 6b 6b 6b 6b 68     nkkknnkkkkhkkkkh
    5881:	6b 6b 6b 6b 68 6b 6b 6b 6b 68 6b 6b 6b 6b 68 68     kkkkhkkkkhkkkkhh
    5891:	68 68 68 68 68 68 68 68 68 68 68 6e 6e 6e 68 68     hhhhhhhhhhhnnnhh
    58a1:	6e 6e 6e 68 68 6e 6e 6e 68 68 68 68 68 68 68 68     nnnhhnnnhhhhhhhh
    58b1:	68 68 68 68 68 68 68 14 14 14 14 14 13 13 13 13     hhhhhhh.........
    58c1:	13 68 6b 6b 68 68 68 6b 6b 6e 68 68 06 06 6e 68     .hkkhhhkknhh..nh
    58d1:	14 14 14 14 14 13 13 13 13 13 6b 6b 6b 6e 6e 6b     ..........kkknnk
    58e1:	6b 6b 6e 6e 06 06 06 6e 6e 14 14 14 14 14 13 13     kknn...nn.......
    58f1:	13 13 13 6b 6b 6b 6b 68 6b 6b 6b 6b 68 06 06 06     ...kkkkhkkkkh...
    5901:	06 68 14 14 14 14 14 13 13 13 13 13 68 68 6e 6e     .h..........hhnn
    5911:	6e 68 68 6e 6e 6e 68 68 6e 6e 6e 14 14 14 14 14     nhhnnnhhnnn.....
    5921:	13 13 13 13 13 65 65 65 65 65 65 65 65 65 65 6f     .....eeeeeeeeeeo
    5931:	6f 6f 6f 6f 70 70 70 70 70 70 70 70 70 70 70 70     oooopppppppppppp
    5941:	70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70     pppppppppppppppp
    5951:	70 70 70 70 70 70 70 71 72 73 74 75 76 77 78 79     pppppppqrstuvwxy
    5961:	7a 70 7b 7c 7d 70 70 70 70 70 70 70 70 70 70 70     zp{|}ppppppppppp
    5971:	70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 16     ppppppppppppppp.
    5981:	16 16 16 16 17 17 17 17 17                          .........

0000598a <map_level_desert>:
    598a:	33 05 37 37 37 37 37 37 37 37 37 37 37 37 37 37     3.77777777777777
    599a:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    59aa:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    59ba:	37 37 37 37 37 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     77777MMMMMMMMMMM
    59ca:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    59da:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    59ea:	4d 4d 4d 4d 4d 4d 4d 4d 4e 4e 4e 4e 4e 4f 4e 4e     MMMMMMMMNNNNNONN
    59fa:	4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e     NNNNNNNNNNNNNNNN
    5a0a:	4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e     NNNNNNNNNNNNNNNN
    5a1a:	4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4f 4e 4e 4e     NNNNNNNNNNNNONNN
    5a2a:	4e 4e 4f 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e     NNONNNNNNNNNNNNN
    5a3a:	4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e     NNNNNNNNNNNNNNNN
    5a4a:	4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 50 50     NNNNNNNNNNNNNNPP
    5a5a:	50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50     PPPPPPPPPPPPPPPP
    5a6a:	50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50     PPPPPPPPPPPPPPPP
    5a7a:	50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50     PPPPPPPPPPPPPPPP
    5a8a:	50                                                  P

00005a8b <map_level_city>:
    5a8b:	33 05 3f 40 3f 40 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     3.?@?@??????????
    5a9b:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    5aab:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    5abb:	3f 3f 3f 3f 3f 40 3f 40 3f 3f 3f 3f 3f 3f 3f 3f     ?????@?@????????
    5acb:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    5adb:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    5aeb:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 41 3f 3f     ?????????????A??
    5afb:	3f 3f 3f 42 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ???B????????????
    5b0b:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    5b1b:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 43 3f 44 3f     ????????????C?D?
    5b2b:	45 3f 3f 3f 3f 3f 46 3f 3f 47 3f 3f 3f 3f 3f 3f     E?????F??G??????
    5b3b:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    5b4b:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 48 48     ??????????????HH
    5b5b:	49 48 48 4a 48 48 48 48 48 4b 48 48 4c 48 48 48     IHHJHHHHHKHHLHHH
    5b6b:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    5b7b:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    5b8b:	48                                                  H

00005b8c <map_level_forest>:
    5b8c:	33 05 37 37 37 37 37 37 37 37 37 37 37 37 37 37     3.77777777777777
    5b9c:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    5bac:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    5bbc:	37 37 37 37 37 38 38 38 38 38 38 38 38 38 38 38     7777788888888888
    5bcc:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    5bdc:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    5bec:	38 38 38 38 38 38 38 38 39 39 39 39 39 3a 39 39     8888888899999:99
    5bfc:	39 39 39 39 39 39 3a 39 39 39 39 3a 39 39 39 39     999999:9999:9999
    5c0c:	3a 39 39 39 3a 39 39 39 39 3a 39 39 39 39 3a 39     :999:9999:9999:9
    5c1c:	39 39 39 3a 39 39 39 39 39 39 39 39 39 39 39 3a     999:99999999999:
    5c2c:	3b 3a 39 39 39 39 39 39 3a 3b 3a 39 39 3a 3b 3a     ;:999999:;:99:;:
    5c3c:	39 39 3a 3b 3a 39 3a 3b 3a 39 39 3a 3b 3a 39 39     99:;:9:;:99:;:99
    5c4c:	3a 3b 3a 39 39 3a 3b 3a 39 39 39 39 39 39 3c 3c     :;:99:;:999999<<
    5c5c:	3c 3c 3c 3c 3c 3c 3c 3c 3d 3e 3d 3c 3c 3c 3c 3c     <<<<<<<<=>=<<<<<
    5c6c:	3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c     <<<<<<<<<<<<<<<<
    5c7c:	3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c     <<<<<<<<<<<<<<<<
    5c8c:	3c                                                  <

00005c8d <map_level_fire>:
    5c8d:	33 05 18 18 18 18 18 18 18 18 18 18 18 18 18 18     3...............
    5c9d:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    5cad:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    5cbd:	18 18 18 18 18 19 1a 19 19 19 19 1a 19 19 19 19     ................
    5ccd:	1a 19 19 19 19 19 19 19 1a 19 19 19 19 19 19 19     ................
    5cdd:	19 19 19 1a 19 19 19 19 1a 19 19 19 19 19 19 19     ................
    5ced:	19 19 19 19 1a 19 19 19 1b 1c 1b 1b 1b 1b 1c 1b     ................
    5cfd:	1b 1b 1b 1c 1b 1b 1b 1b 1b 1d 1b 1c 1b 1b 1b 1b     ................
    5d0d:	1b 1b 1b 1e 1f 20 1c 1b 1b 1b 1b 1c 1b 1b 1b 1b     ..... ..........
    5d1d:	1b 1b 1b 1b 1b 1b 1b 1c 1b 1b 1b 1b 1b 1b 1b 1b     ................
    5d2d:	1b 1b 1b 1b 1b 1b 1b 1d 1b 1b 1d 1b 1b 1b 21 1b     ..............!.
    5d3d:	1b 1b 1b 1b 1b 22 23 24 25 26 1b 1b 1b 1b 1b 1b     ....."#$%&......
    5d4d:	1e 27 28 1b 1b 29 2a 2b 1b 1b 1b 1b 1b 1b 2c 2c     .'(..)*+......,,
    5d5d:	2c 2d 2a 2d 2a 2d 2a 2d 2a 2c 2c 2c 2c 2c 2c 2c     ,-*-*-*-*,,,,,,,
    5d6d:	2c 2c 2c 2c 2d 2a 2d 2a 2e 2f 2f 2f 2f 30 2a 2d     ,,,,-*-*.////0*-
    5d7d:	2a 2c 2c 31 24 25 32 33 34 35 36 2c 2c 2c 2c 2c     *,,1$%23456,,,,,
    5d8d:	2c                                                  ,

00005d8e <map_level_ice>:
    5d8e:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    5d9e:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    5dae:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    5dbe:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    5dce:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    5dde:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    5dee:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    5dfe:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5e0e:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    5e1e:	06 06 06 06 06 06 06 06 06 06 06 06 06 09 06 06     ................
    5e2e:	06 06 0a 0b 02 02 0c 0d 06 06 06 09 06 06 06 06     ................
    5e3e:	06 06 0e 07 07 07 0f 07 0f 07 0f 10 06 08 08 06     ................
    5e4e:	06 06 08 06 09 06 06 06 06 06 06 06 06 06 11 11     ................
    5e5e:	12 11 11 11 11 13 02 02 02 02 14 11 11 11 12 15     ................
    5e6e:	11 15 11 15 11 16 02 02 02 02 02 02 02 02 17 11     ................
    5e7e:	11 11 11 11 11 11 11 12 11 11 11 11 11 11 11 11     ................
    5e8e:	11 00                                               ..

00005e90 <__ctors_end>:
    5e90:	11 24       	eor	r1, r1
    5e92:	1f be       	out	0x3f, r1	; 63
    5e94:	cf ef       	ldi	r28, 0xFF	; 255
    5e96:	d0 e1       	ldi	r29, 0x10	; 16
    5e98:	de bf       	out	0x3e, r29	; 62
    5e9a:	cd bf       	out	0x3d, r28	; 61

00005e9c <__do_copy_data>:
    5e9c:	15 e0       	ldi	r17, 0x05	; 5
    5e9e:	a0 e0       	ldi	r26, 0x00	; 0
    5ea0:	b5 e0       	ldi	r27, 0x05	; 5
    5ea2:	e2 e0       	ldi	r30, 0x02	; 2
    5ea4:	f9 ec       	ldi	r31, 0xC9	; 201
    5ea6:	02 c0       	rjmp	.+4      	; 0x5eac <__do_copy_data+0x10>
    5ea8:	05 90       	lpm	r0, Z+
    5eaa:	0d 92       	st	X+, r0
    5eac:	a0 31       	cpi	r26, 0x10	; 16
    5eae:	b1 07       	cpc	r27, r17
    5eb0:	d9 f7       	brne	.-10     	; 0x5ea8 <__do_copy_data+0xc>

00005eb2 <__do_clear_bss>:
    5eb2:	10 e1       	ldi	r17, 0x10	; 16
    5eb4:	a0 e1       	ldi	r26, 0x10	; 16
    5eb6:	b5 e0       	ldi	r27, 0x05	; 5
    5eb8:	01 c0       	rjmp	.+2      	; 0x5ebc <.do_clear_bss_start>

00005eba <.do_clear_bss_loop>:
    5eba:	1d 92       	st	X+, r1

00005ebc <.do_clear_bss_start>:
    5ebc:	a3 31       	cpi	r26, 0x13	; 19
    5ebe:	b1 07       	cpc	r27, r17
    5ec0:	e1 f7       	brne	.-8      	; 0x5eba <.do_clear_bss_loop>

00005ec2 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    5ec2:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <wdt_randomize>
#endif

    MCUSR = 0;
    5ec6:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    5ec8:	88 e1       	ldi	r24, 0x18	; 24
    5eca:	0f b6       	in	r0, 0x3f	; 63
    5ecc:	f8 94       	cli
    5ece:	80 93 60 00 	sts	0x0060, r24
    5ed2:	10 92 60 00 	sts	0x0060, r1
    5ed6:	0f be       	out	0x3f, r0	; 63

00005ed8 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    5ed8:	0e 94 be 35 	call	0x6b7c	; 0x6b7c <isEepromFormatted>
    5edc:	81 11       	cpse	r24, r1
    5ede:	02 c0       	rjmp	.+4      	; 0x5ee4 <Initialize+0xc>
    5ee0:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <FormatEeprom>

	cli();
    5ee4:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
    5ee8:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    5eec:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    5ef0:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    5ef4:	10 92 d0 0c 	sts	0x0CD0, r1
    5ef8:	10 92 d6 0c 	sts	0x0CD6, r1
    5efc:	10 92 dc 0c 	sts	0x0CDC, r1
    5f00:	10 92 e2 0c 	sts	0x0CE2, r1
    5f04:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    5f08:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    5f0c:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    5f10:	92 e1       	ldi	r25, 0x12	; 18
    5f12:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    5f16:	90 ee       	ldi	r25, 0xE0	; 224
    5f18:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    5f1c:	94 e1       	ldi	r25, 0x14	; 20
    5f1e:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    5f22:	10 92 c2 0c 	sts	0x0CC2, r1
    5f26:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    5f2a:	10 92 c6 0c 	sts	0x0CC6, r1
    5f2e:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    5f32:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    5f36:	0e 94 cd 42 	call	0x859a	; 0x859a <InitializeVideoMode>
    5f3a:	84 e8       	ldi	r24, 0x84	; 132
    5f3c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    5f3e:	fc 01       	movw	r30, r24
    5f40:	25 91       	lpm	r18, Z+
    5f42:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    5f44:	f9 01       	movw	r30, r18
    5f46:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    5f48:	30 83       	st	Z, r19
    5f4a:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    5f4c:	20 e0       	ldi	r18, 0x00	; 0
    5f4e:	82 3b       	cpi	r24, 0xB2	; 178
    5f50:	92 07       	cpc	r25, r18
    5f52:	a9 f7       	brne	.-22     	; 0x5f3e <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    5f54:	78 94       	sei
	
	DisplayLogo();
    5f56:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <DisplayLogo>
    5f5a:	0e 94 2f 62 	call	0xc45e	; 0xc45e <main>
    5f5e:	0c 94 7f 64 	jmp	0xc8fe	; 0xc8fe <_exit>

00005f62 <__bad_interrupt>:
    5f62:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00005f66 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    5f66:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    5f68:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    5f6c:	ad e8       	ldi	r26, 0x8D	; 141
    5f6e:	aa 95       	dec	r26
    5f70:	f1 f7       	brne	.-4      	; 0x5f6e <sub_video_mode3+0x8>
    5f72:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    5f74:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    5f78:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    5f7a:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    5f7c:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    5f7e:	02 9f       	mul	r16, r18
		add ZL,r0
    5f80:	e0 0d       	add	r30, r0
		adc ZH,r1
    5f82:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    5f84:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    5f86:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    5f88:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    5f8c:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    5f8e:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    5f90:	30 0f       	add	r19, r16

		cp r18,r16
    5f92:	20 17       	cp	r18, r16
		breq no_ramtiles
    5f94:	51 f0       	breq	.+20     	; 0x5faa <no_ramtiles>
		nop
    5f96:	00 00       	nop
	...

00005f9a <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    5f9a:	a1 91       	ld	r26, Z+
		ld XH,Z+
    5f9c:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    5f9e:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    5fa0:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    5fa2:	0c 93       	st	X, r16

		inc r16
    5fa4:	03 95       	inc	r16
		cp r16,r18
    5fa6:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    5fa8:	c0 f3       	brcs	.-16     	; 0x5f9a <upd_loop>

00005faa <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    5faa:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    5fac:	1a 95       	dec	r17
		brne .-4
    5fae:	f1 f7       	brne	.-4      	; 0x5fac <no_ramtiles+0x2>
		rjmp .
    5fb0:	00 c0       	rjmp	.+0      	; 0x5fb2 <no_ramtiles+0x8>
		dec r19
    5fb2:	3a 95       	dec	r19
		brne 1b
    5fb4:	d1 f7       	brne	.-12     	; 0x5faa <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    5fb6:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    5fb8:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    5fba:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    5fbe:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    5fc0:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    5fc2:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    5fc4:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    5fc6:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    5fca:	60 2f       	mov	r22, r16
		lsr r16
    5fcc:	06 95       	lsr	r16
		lsr r16
    5fce:	06 95       	lsr	r16
		lsr r16 ;/8
    5fd0:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    5fd2:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    5fd6:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    5fd8:	f1 2e       	mov	r15, r17

        mov r17,r16
    5fda:	10 2f       	mov	r17, r16
        lsr r16
    5fdc:	06 95       	lsr	r16
        lsr r16
    5fde:	06 95       	lsr	r16
        lsr r16 ;/8
    5fe0:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    5fe2:	d0 0f       	add	r29, r16
		andi r17,0x7
    5fe4:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    5fe6:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    5fe8:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    5fea:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    5fee:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    5ff2:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    5ff6:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    5ffa:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    5ffc:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    5ffe:	5e 01       	movw	r10, r28
		mov r23,r22
    6000:	76 2f       	mov	r23, r22
		mov r24,r15
    6002:	8f 2d       	mov	r24, r15
		mov r9,r25
    6004:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    6006:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    600a:	20 2f       	mov	r18, r16
		lsr r16
    600c:	06 95       	lsr	r16
		lsr r16
    600e:	06 95       	lsr	r16
		lsr r16			;hi8
    6010:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    6012:	03 95       	inc	r16
		andi r18,7		;lo8
    6014:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    6016:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    601a:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    601c:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    601e:	01 fe       	sbrs	r0, 1
		clr r22
    6020:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    6022:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    6024:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    6026:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    6028:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    602a:	01 fe       	sbrs	r0, 1
		ser r24
    602c:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    602e:	01 fe       	sbrs	r0, 1
		clr r9
    6030:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    6032:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    6034:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    6036:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    6038:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    603a:	80 90 be 0c 	lds	r8, 0x0CBE

0000603e <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    603e:	bc d3       	rcall	.+1912   	; 0x67b8 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    6040:	24 e0       	ldi	r18, 0x04	; 4
    6042:	2a 95       	dec	r18
    6044:	f1 f7       	brne	.-4      	; 0x6042 <next_tile_line+0x4>
    6046:	00 00       	nop
				
		call render_tile_line
    6048:	0e 94 65 30 	call	0x60ca	; 0x60ca <render_tile_line>

		WAIT r18,58
    604c:	23 e1       	ldi	r18, 0x13	; 19
    604e:	2a 95       	dec	r18
    6050:	f1 f7       	brne	.-4      	; 0x604e <next_tile_line+0x10>
    6052:	00 00       	nop

		inc r22
    6054:	63 95       	inc	r22
		dec r8
    6056:	8a 94       	dec	r8
		breq text_frame_end
    6058:	09 f1       	breq	.+66     	; 0x609c <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    605a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    605c:	29 f0       	breq	.+10     	; 0x6068 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    605e:	08 e0       	ldi	r16, 0x08	; 8
    6060:	0a 95       	dec	r16
    6062:	f1 f7       	brne	.-4      	; 0x6060 <next_tile_line+0x22>
    6064:	00 00       	nop
		rjmp next_tile_line
    6066:	eb cf       	rjmp	.-42     	; 0x603e <next_tile_line>

00006068 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    6068:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    606a:	0c 2f       	mov	r16, r28
		andi r16,0x7
    606c:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    606e:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    6070:	11 f0       	breq	.+4      	; 0x6076 <next_tile_row+0xe>
		inc YL
    6072:	c3 95       	inc	r28
		rjmp 2f
    6074:	02 c0       	rjmp	.+4      	; 0x607a <next_tile_row+0x12>
	1:
		andi YL,0xf8
    6076:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    6078:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    607a:	8a 95       	dec	r24
		brne .+2
    607c:	09 f4       	brne	.+2      	; 0x6080 <next_tile_row+0x18>
		movw YL,r12
    607e:	e6 01       	movw	r28, r12

		dec r19
    6080:	3a 95       	dec	r19
		brne .+2
    6082:	09 f4       	brne	.+2      	; 0x6086 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    6084:	67 2f       	mov	r22, r23
		brne .+2
    6086:	09 f4       	brne	.+2      	; 0x608a <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    6088:	e5 01       	movw	r28, r10
		brne .+2
    608a:	09 f4       	brne	.+2      	; 0x608e <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    608c:	8f 2d       	mov	r24, r15
		brne .+2
    608e:	09 f4       	brne	.+2      	; 0x6092 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6090:	99 2e       	mov	r9, r25

		brne .+2
    6092:	09 f4       	brne	.+2      	; 0x6096 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    6094:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    6096:	09 f4       	brne	.+2      	; 0x609a <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    6098:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    609a:	d1 cf       	rjmp	.-94     	; 0x603e <next_tile_line>

0000609c <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    609c:	29 e0       	ldi	r18, 0x09	; 9
    609e:	2a 95       	dec	r18
    60a0:	f1 f7       	brne	.-4      	; 0x609e <text_frame_end+0x2>
    60a2:	00 00       	nop

		rcall hsync_pulse ;145
    60a4:	89 d3       	rcall	.+1810   	; 0x67b8 <hsync_pulse>
	
		clr r1
    60a6:	11 24       	eor	r1, r1
		call RestoreBackground
    60a8:	0e 94 80 41 	call	0x8300	; 0x8300 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    60ac:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    60b0:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    60b2:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    60b4:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    60b6:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    60ba:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    60bc:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    60be:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    60c2:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    60c4:	e0 93 36 00 	sts	0x0036, r30

		ret
    60c8:	08 95       	ret

000060ca <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    60ca:	cf 93       	push	r28
		push YH
    60cc:	df 93       	push	r29
		push r23
    60ce:	7f 93       	push	r23
		push r22
    60d0:	6f 93       	push	r22
		push r19
    60d2:	3f 93       	push	r19
		push r13
    60d4:	df 92       	push	r13
		push r12
    60d6:	cf 92       	push	r12
		push r9
    60d8:	9f 92       	push	r9
		push r7
    60da:	7f 92       	push	r7
		push r6
    60dc:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    60de:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    60e0:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    60e2:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    60e4:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    60e6:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    60e8:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    60ea:	00 0d       	add	r16, r0
		adc r17,r1
    60ec:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    60ee:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    60f0:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    60f2:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    60f4:	00 0d       	add	r16, r0
		adc r17,r1
    60f6:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    60f8:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    60fa:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    60fc:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    60fe:	69 2d       	mov	r22, r9
		andi r22,0x7		
    6100:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    6102:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    6104:	f8 94       	cli
		breq .+2
    6106:	09 f0       	breq	.+2      	; 0x610a <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    6108:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    610a:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    610c:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    610e:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    6110:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    6112:	02 0c       	add	r0, r2
	    adc r1,r3
    6114:	13 1c       	adc	r1, r3
		movw ZL,r0
    6116:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    6118:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    611a:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    611c:	28 81       	ld	r18, Y
		subi YL,-8
    611e:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6120:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    6122:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    6124:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    6126:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    6128:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    612a:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    612c:	04 0e       	add	r0, r20
	    adc r1,r21
    612e:	15 1e       	adc	r1, r21
		movw XL,r0
    6130:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    6132:	28 81       	ld	r18, Y
		subi YL,-8
    6134:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    6136:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    6138:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    613a:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    613c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    613e:	a1 01       	movw	r20, r2
		brtc .+2
    6140:	0e f4       	brtc	.+2      	; 0x6144 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    6142:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    6144:	04 0e       	add	r0, r20
	    adc r1,r21
    6146:	15 1e       	adc	r1, r21
		movw ZL,r0
    6148:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    614a:	3f 01       	movw	r6, r30

0000614c <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    614c:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    614e:	a6 0f       	add	r26, r22
		adc XH,r0
    6150:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    6152:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    6154:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    6156:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    6158:	22 c0       	rjmp	.+68     	; 0x619e <rom_fine_scroll>

0000615a <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    615a:	00 c0       	rjmp	.+0      	; 0x615c <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    615c:	65 eb       	ldi	r22, 0xB5	; 181
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    615e:	70 e3       	ldi	r23, 0x30	; 48
		add r22,r0
    6160:	60 0d       	add	r22, r0
		adc r23,r1
    6162:	71 1d       	adc	r23, r1
		push r22
    6164:	6f 93       	push	r22
		push r23	
    6166:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    6168:	08 95       	ret

0000616a <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    616a:	0d 91       	ld	r16, X+
    616c:	c8 95       	lpm
    616e:	08 b9       	out	0x08, r16	; 8
    6170:	0d 91       	ld	r16, X+
    6172:	c8 95       	lpm
    6174:	08 b9       	out	0x08, r16	; 8
    6176:	0d 91       	ld	r16, X+
    6178:	c8 95       	lpm
    617a:	08 b9       	out	0x08, r16	; 8
    617c:	0d 91       	ld	r16, X+
    617e:	c8 95       	lpm
    6180:	08 b9       	out	0x08, r16	; 8
    6182:	0d 91       	ld	r16, X+
    6184:	c8 95       	lpm
    6186:	08 b9       	out	0x08, r16	; 8
    6188:	0d 91       	ld	r16, X+
    618a:	c8 95       	lpm
    618c:	08 b9       	out	0x08, r16	; 8
    618e:	0d 91       	ld	r16, X+
    6190:	c8 95       	lpm
    6192:	08 b9       	out	0x08, r16	; 8
    6194:	0d 91       	ld	r16, X+
    6196:	c8 95       	lpm
    6198:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    619a:	1e f5       	brtc	.+70     	; 0x61e2 <romloop>
		rjmp ramloop
    619c:	40 c0       	rjmp	.+128    	; 0x621e <ramloop>

0000619e <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    619e:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    61a0:	67 ed       	ldi	r22, 0xD7	; 215
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    61a2:	70 e3       	ldi	r23, 0x30	; 48
		add r22,r0
    61a4:	60 0d       	add	r22, r0
		adc r23,r1
    61a6:	71 1d       	adc	r23, r1
		push r22
    61a8:	6f 93       	push	r22
		push r23	
    61aa:	7f 93       	push	r23
		ret
    61ac:	08 95       	ret

000061ae <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    61ae:	05 91       	lpm	r16, Z+
    61b0:	00 c0       	rjmp	.+0      	; 0x61b2 <rom_fine_scroll_loop+0x4>
    61b2:	08 b9       	out	0x08, r16	; 8
    61b4:	05 91       	lpm	r16, Z+
    61b6:	00 c0       	rjmp	.+0      	; 0x61b8 <rom_fine_scroll_loop+0xa>
    61b8:	08 b9       	out	0x08, r16	; 8
    61ba:	05 91       	lpm	r16, Z+
    61bc:	00 c0       	rjmp	.+0      	; 0x61be <rom_fine_scroll_loop+0x10>
    61be:	08 b9       	out	0x08, r16	; 8
    61c0:	05 91       	lpm	r16, Z+
    61c2:	00 c0       	rjmp	.+0      	; 0x61c4 <rom_fine_scroll_loop+0x16>
    61c4:	08 b9       	out	0x08, r16	; 8
    61c6:	05 91       	lpm	r16, Z+
    61c8:	00 c0       	rjmp	.+0      	; 0x61ca <rom_fine_scroll_loop+0x1c>
    61ca:	08 b9       	out	0x08, r16	; 8
    61cc:	05 91       	lpm	r16, Z+
    61ce:	00 c0       	rjmp	.+0      	; 0x61d0 <rom_fine_scroll_loop+0x22>
    61d0:	08 b9       	out	0x08, r16	; 8
    61d2:	05 91       	lpm	r16, Z+
    61d4:	00 c0       	rjmp	.+0      	; 0x61d6 <rom_fine_scroll_loop+0x28>
    61d6:	08 b9       	out	0x08, r16	; 8
    61d8:	05 91       	lpm	r16, Z+
    61da:	00 c0       	rjmp	.+0      	; 0x61dc <rom_fine_scroll_loop+0x2e>
    61dc:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    61de:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    61e0:	f6 f0       	brts	.+60     	; 0x621e <ramloop>

000061e2 <romloop>:

	
	romloop:
	    lpm r16,Z+
    61e2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    61e4:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    61e6:	28 81       	ld	r18, Y

	    lpm r16,Z+
    61e8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    61ea:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    61ec:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    61ee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    61f0:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    61f2:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    61f4:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    61f6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    61f8:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    61fa:	08 f4       	brcc	.+2      	; 0x61fe <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    61fc:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    61fe:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6200:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    6202:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6204:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6206:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6208:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    620a:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    620c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    620e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6210:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6212:	05 91       	lpm	r16, Z+

		breq end	
    6214:	39 f1       	breq	.+78     	; 0x6264 <end>
	    movw ZL,r0   	;copy next tile adress
    6216:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6218:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    621a:	18 f7       	brcc	.-58     	; 0x61e2 <romloop>
	
		rjmp .
    621c:	00 c0       	rjmp	.+0      	; 0x621e <ramloop>

0000621e <ramloop>:

	ramloop:

	    ld r16,Z+
    621e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6220:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    6222:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    6224:	01 91       	ld	r16, Z+
		subi YL,-8   		
    6226:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6228:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    622a:	23 9f       	mul	r18, r19

	    ld r16,Z+
    622c:	01 91       	ld	r16, Z+
		nop
    622e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6230:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6232:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    6234:	00 c0       	rjmp	.+0      	; 0x6236 <ramloop+0x18>
   
	    ld r16,Z+
    6236:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6238:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    623a:	08 f0       	brcs	.+2      	; 0x623e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    623c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    623e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6240:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6242:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6244:	15 1e       	adc	r1, r21
		rjmp .
    6246:	00 c0       	rjmp	.+0      	; 0x6248 <ramloop+0x2a>
    
		ld r16,Z+		
    6248:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    624a:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    624c:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    624e:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    6250:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    6252:	78 b8       	out	0x08, r7	; 8
		nop
    6254:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    6256:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    6258:	1a 95       	dec	r17
	    breq end
    625a:	21 f0       	breq	.+8      	; 0x6264 <end>
	
		nop
    625c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    625e:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6260:	00 f6       	brcc	.-128    	; 0x61e2 <romloop>
		rjmp ramloop
    6262:	dd cf       	rjmp	.-70     	; 0x621e <ramloop>

00006264 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6264:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    6266:	27 f5       	brid	.+72     	; 0x62b0 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    6268:	30 f4       	brcc	.+12     	; 0x6276 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    626a:	f0 01       	movw	r30, r0

0000626c <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    626c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    626e:	08 b9       	out	0x08, r16	; 8
		dec r14
    6270:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    6272:	e1 f7       	brne	.-8      	; 0x626c <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    6274:	1f c0       	rjmp	.+62     	; 0x62b4 <end_fine_scroll_ram>

00006276 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    6276:	f6 01       	movw	r30, r12
		nop
    6278:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    627a:	98 b8       	out	0x08, r9	; 8
		dec r14
    627c:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    627e:	c9 f0       	breq	.+50     	; 0x62b2 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    6280:	05 91       	lpm	r16, Z+
    6282:	08 b9       	out	0x08, r16	; 8
    6284:	ea 94       	dec	r14
    6286:	a9 f0       	breq	.+42     	; 0x62b2 <end_fine_scroll_rom>
    6288:	05 91       	lpm	r16, Z+
    628a:	08 b9       	out	0x08, r16	; 8
    628c:	ea 94       	dec	r14
    628e:	89 f0       	breq	.+34     	; 0x62b2 <end_fine_scroll_rom>
    6290:	05 91       	lpm	r16, Z+
    6292:	08 b9       	out	0x08, r16	; 8
    6294:	ea 94       	dec	r14
    6296:	69 f0       	breq	.+26     	; 0x62b2 <end_fine_scroll_rom>
    6298:	05 91       	lpm	r16, Z+
    629a:	08 b9       	out	0x08, r16	; 8
    629c:	ea 94       	dec	r14
    629e:	49 f0       	breq	.+18     	; 0x62b2 <end_fine_scroll_rom>
    62a0:	05 91       	lpm	r16, Z+
    62a2:	08 b9       	out	0x08, r16	; 8
    62a4:	ea 94       	dec	r14
    62a6:	29 f0       	breq	.+10     	; 0x62b2 <end_fine_scroll_rom>
    62a8:	05 91       	lpm	r16, Z+
    62aa:	08 b9       	out	0x08, r16	; 8
    62ac:	ea 94       	dec	r14
    62ae:	09 f0       	breq	.+2      	; 0x62b2 <end_fine_scroll_rom>

000062b0 <end_fine_scroll>:
	...

000062b2 <end_fine_scroll_rom>:
	...

000062b4 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    62b4:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    62b6:	08 b9       	out	0x08, r16	; 8

		pop r6
    62b8:	6f 90       	pop	r6
		pop r7
    62ba:	7f 90       	pop	r7
		pop r9
    62bc:	9f 90       	pop	r9
		pop r12
    62be:	cf 90       	pop	r12
		pop r13
    62c0:	df 90       	pop	r13
		pop r19
    62c2:	3f 91       	pop	r19
		pop r22
    62c4:	6f 91       	pop	r22
		pop r23
    62c6:	7f 91       	pop	r23
		pop YH
    62c8:	df 91       	pop	r29
		pop YL
    62ca:	cf 91       	pop	r28

		ret
    62cc:	08 95       	ret

000062ce <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    62ce:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    62d0:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    62d4:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    62d8:	82 9f       	mul	r24, r18
	add ZL,r0
    62da:	e0 0d       	add	r30, r0
	adc ZH,r1
    62dc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    62de:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    62e0:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    62e2:	62 9f       	mul	r22, r18
	add XL,r0
    62e4:	a0 0d       	add	r26, r0
	adc XH,r1
    62e6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    62e8:	15 90       	lpm	r1, Z+
    62ea:	1d 92       	st	X+, r1
    62ec:	15 90       	lpm	r1, Z+
    62ee:	1d 92       	st	X+, r1
    62f0:	15 90       	lpm	r1, Z+
    62f2:	1d 92       	st	X+, r1
    62f4:	15 90       	lpm	r1, Z+
    62f6:	1d 92       	st	X+, r1
    62f8:	15 90       	lpm	r1, Z+
    62fa:	1d 92       	st	X+, r1
    62fc:	15 90       	lpm	r1, Z+
    62fe:	1d 92       	st	X+, r1
    6300:	15 90       	lpm	r1, Z+
    6302:	1d 92       	st	X+, r1
    6304:	15 90       	lpm	r1, Z+
    6306:	1d 92       	st	X+, r1
    6308:	15 90       	lpm	r1, Z+
    630a:	1d 92       	st	X+, r1
    630c:	15 90       	lpm	r1, Z+
    630e:	1d 92       	st	X+, r1
    6310:	15 90       	lpm	r1, Z+
    6312:	1d 92       	st	X+, r1
    6314:	15 90       	lpm	r1, Z+
    6316:	1d 92       	st	X+, r1
    6318:	15 90       	lpm	r1, Z+
    631a:	1d 92       	st	X+, r1
    631c:	15 90       	lpm	r1, Z+
    631e:	1d 92       	st	X+, r1
    6320:	15 90       	lpm	r1, Z+
    6322:	1d 92       	st	X+, r1
    6324:	15 90       	lpm	r1, Z+
    6326:	1d 92       	st	X+, r1
    6328:	15 90       	lpm	r1, Z+
    632a:	1d 92       	st	X+, r1
    632c:	15 90       	lpm	r1, Z+
    632e:	1d 92       	st	X+, r1
    6330:	15 90       	lpm	r1, Z+
    6332:	1d 92       	st	X+, r1
    6334:	15 90       	lpm	r1, Z+
    6336:	1d 92       	st	X+, r1
    6338:	15 90       	lpm	r1, Z+
    633a:	1d 92       	st	X+, r1
    633c:	15 90       	lpm	r1, Z+
    633e:	1d 92       	st	X+, r1
    6340:	15 90       	lpm	r1, Z+
    6342:	1d 92       	st	X+, r1
    6344:	15 90       	lpm	r1, Z+
    6346:	1d 92       	st	X+, r1
    6348:	15 90       	lpm	r1, Z+
    634a:	1d 92       	st	X+, r1
    634c:	15 90       	lpm	r1, Z+
    634e:	1d 92       	st	X+, r1
    6350:	15 90       	lpm	r1, Z+
    6352:	1d 92       	st	X+, r1
    6354:	15 90       	lpm	r1, Z+
    6356:	1d 92       	st	X+, r1
    6358:	15 90       	lpm	r1, Z+
    635a:	1d 92       	st	X+, r1
    635c:	15 90       	lpm	r1, Z+
    635e:	1d 92       	st	X+, r1
    6360:	15 90       	lpm	r1, Z+
    6362:	1d 92       	st	X+, r1
    6364:	15 90       	lpm	r1, Z+
    6366:	1d 92       	st	X+, r1
    6368:	15 90       	lpm	r1, Z+
    636a:	1d 92       	st	X+, r1
    636c:	15 90       	lpm	r1, Z+
    636e:	1d 92       	st	X+, r1
    6370:	15 90       	lpm	r1, Z+
    6372:	1d 92       	st	X+, r1
    6374:	15 90       	lpm	r1, Z+
    6376:	1d 92       	st	X+, r1
    6378:	15 90       	lpm	r1, Z+
    637a:	1d 92       	st	X+, r1
    637c:	15 90       	lpm	r1, Z+
    637e:	1d 92       	st	X+, r1
    6380:	15 90       	lpm	r1, Z+
    6382:	1d 92       	st	X+, r1
    6384:	15 90       	lpm	r1, Z+
    6386:	1d 92       	st	X+, r1
    6388:	15 90       	lpm	r1, Z+
    638a:	1d 92       	st	X+, r1
    638c:	15 90       	lpm	r1, Z+
    638e:	1d 92       	st	X+, r1
    6390:	15 90       	lpm	r1, Z+
    6392:	1d 92       	st	X+, r1
    6394:	15 90       	lpm	r1, Z+
    6396:	1d 92       	st	X+, r1
    6398:	15 90       	lpm	r1, Z+
    639a:	1d 92       	st	X+, r1
    639c:	15 90       	lpm	r1, Z+
    639e:	1d 92       	st	X+, r1
    63a0:	15 90       	lpm	r1, Z+
    63a2:	1d 92       	st	X+, r1
    63a4:	15 90       	lpm	r1, Z+
    63a6:	1d 92       	st	X+, r1
    63a8:	15 90       	lpm	r1, Z+
    63aa:	1d 92       	st	X+, r1
    63ac:	15 90       	lpm	r1, Z+
    63ae:	1d 92       	st	X+, r1
    63b0:	15 90       	lpm	r1, Z+
    63b2:	1d 92       	st	X+, r1
    63b4:	15 90       	lpm	r1, Z+
    63b6:	1d 92       	st	X+, r1
    63b8:	15 90       	lpm	r1, Z+
    63ba:	1d 92       	st	X+, r1
    63bc:	15 90       	lpm	r1, Z+
    63be:	1d 92       	st	X+, r1
    63c0:	15 90       	lpm	r1, Z+
    63c2:	1d 92       	st	X+, r1
    63c4:	15 90       	lpm	r1, Z+
    63c6:	1d 92       	st	X+, r1
    63c8:	15 90       	lpm	r1, Z+
    63ca:	1d 92       	st	X+, r1
    63cc:	15 90       	lpm	r1, Z+
    63ce:	1d 92       	st	X+, r1
    63d0:	15 90       	lpm	r1, Z+
    63d2:	1d 92       	st	X+, r1
    63d4:	15 90       	lpm	r1, Z+
    63d6:	1d 92       	st	X+, r1
    63d8:	15 90       	lpm	r1, Z+
    63da:	1d 92       	st	X+, r1
    63dc:	15 90       	lpm	r1, Z+
    63de:	1d 92       	st	X+, r1
    63e0:	15 90       	lpm	r1, Z+
    63e2:	1d 92       	st	X+, r1
    63e4:	15 90       	lpm	r1, Z+
    63e6:	1d 92       	st	X+, r1
	clr r1
    63e8:	11 24       	eor	r1, r1
	ret
    63ea:	08 95       	ret

000063ec <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    63ec:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    63ee:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    63f0:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    63f2:	82 9f       	mul	r24, r18
	add ZL,r0
    63f4:	e0 0d       	add	r30, r0
	adc ZH,r1
    63f6:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    63f8:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    63fa:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    63fc:	62 9f       	mul	r22, r18
	add XL,r0
    63fe:	a0 0d       	add	r26, r0
	adc XH,r1
    6400:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6402:	11 90       	ld	r1, Z+
    6404:	1d 92       	st	X+, r1
    6406:	11 90       	ld	r1, Z+
    6408:	1d 92       	st	X+, r1
    640a:	11 90       	ld	r1, Z+
    640c:	1d 92       	st	X+, r1
    640e:	11 90       	ld	r1, Z+
    6410:	1d 92       	st	X+, r1
    6412:	11 90       	ld	r1, Z+
    6414:	1d 92       	st	X+, r1
    6416:	11 90       	ld	r1, Z+
    6418:	1d 92       	st	X+, r1
    641a:	11 90       	ld	r1, Z+
    641c:	1d 92       	st	X+, r1
    641e:	11 90       	ld	r1, Z+
    6420:	1d 92       	st	X+, r1
    6422:	11 90       	ld	r1, Z+
    6424:	1d 92       	st	X+, r1
    6426:	11 90       	ld	r1, Z+
    6428:	1d 92       	st	X+, r1
    642a:	11 90       	ld	r1, Z+
    642c:	1d 92       	st	X+, r1
    642e:	11 90       	ld	r1, Z+
    6430:	1d 92       	st	X+, r1
    6432:	11 90       	ld	r1, Z+
    6434:	1d 92       	st	X+, r1
    6436:	11 90       	ld	r1, Z+
    6438:	1d 92       	st	X+, r1
    643a:	11 90       	ld	r1, Z+
    643c:	1d 92       	st	X+, r1
    643e:	11 90       	ld	r1, Z+
    6440:	1d 92       	st	X+, r1
    6442:	11 90       	ld	r1, Z+
    6444:	1d 92       	st	X+, r1
    6446:	11 90       	ld	r1, Z+
    6448:	1d 92       	st	X+, r1
    644a:	11 90       	ld	r1, Z+
    644c:	1d 92       	st	X+, r1
    644e:	11 90       	ld	r1, Z+
    6450:	1d 92       	st	X+, r1
    6452:	11 90       	ld	r1, Z+
    6454:	1d 92       	st	X+, r1
    6456:	11 90       	ld	r1, Z+
    6458:	1d 92       	st	X+, r1
    645a:	11 90       	ld	r1, Z+
    645c:	1d 92       	st	X+, r1
    645e:	11 90       	ld	r1, Z+
    6460:	1d 92       	st	X+, r1
    6462:	11 90       	ld	r1, Z+
    6464:	1d 92       	st	X+, r1
    6466:	11 90       	ld	r1, Z+
    6468:	1d 92       	st	X+, r1
    646a:	11 90       	ld	r1, Z+
    646c:	1d 92       	st	X+, r1
    646e:	11 90       	ld	r1, Z+
    6470:	1d 92       	st	X+, r1
    6472:	11 90       	ld	r1, Z+
    6474:	1d 92       	st	X+, r1
    6476:	11 90       	ld	r1, Z+
    6478:	1d 92       	st	X+, r1
    647a:	11 90       	ld	r1, Z+
    647c:	1d 92       	st	X+, r1
    647e:	11 90       	ld	r1, Z+
    6480:	1d 92       	st	X+, r1
    6482:	11 90       	ld	r1, Z+
    6484:	1d 92       	st	X+, r1
    6486:	11 90       	ld	r1, Z+
    6488:	1d 92       	st	X+, r1
    648a:	11 90       	ld	r1, Z+
    648c:	1d 92       	st	X+, r1
    648e:	11 90       	ld	r1, Z+
    6490:	1d 92       	st	X+, r1
    6492:	11 90       	ld	r1, Z+
    6494:	1d 92       	st	X+, r1
    6496:	11 90       	ld	r1, Z+
    6498:	1d 92       	st	X+, r1
    649a:	11 90       	ld	r1, Z+
    649c:	1d 92       	st	X+, r1
    649e:	11 90       	ld	r1, Z+
    64a0:	1d 92       	st	X+, r1
    64a2:	11 90       	ld	r1, Z+
    64a4:	1d 92       	st	X+, r1
    64a6:	11 90       	ld	r1, Z+
    64a8:	1d 92       	st	X+, r1
    64aa:	11 90       	ld	r1, Z+
    64ac:	1d 92       	st	X+, r1
    64ae:	11 90       	ld	r1, Z+
    64b0:	1d 92       	st	X+, r1
    64b2:	11 90       	ld	r1, Z+
    64b4:	1d 92       	st	X+, r1
    64b6:	11 90       	ld	r1, Z+
    64b8:	1d 92       	st	X+, r1
    64ba:	11 90       	ld	r1, Z+
    64bc:	1d 92       	st	X+, r1
    64be:	11 90       	ld	r1, Z+
    64c0:	1d 92       	st	X+, r1
    64c2:	11 90       	ld	r1, Z+
    64c4:	1d 92       	st	X+, r1
    64c6:	11 90       	ld	r1, Z+
    64c8:	1d 92       	st	X+, r1
    64ca:	11 90       	ld	r1, Z+
    64cc:	1d 92       	st	X+, r1
    64ce:	11 90       	ld	r1, Z+
    64d0:	1d 92       	st	X+, r1
    64d2:	11 90       	ld	r1, Z+
    64d4:	1d 92       	st	X+, r1
    64d6:	11 90       	ld	r1, Z+
    64d8:	1d 92       	st	X+, r1
    64da:	11 90       	ld	r1, Z+
    64dc:	1d 92       	st	X+, r1
    64de:	11 90       	ld	r1, Z+
    64e0:	1d 92       	st	X+, r1
    64e2:	11 90       	ld	r1, Z+
    64e4:	1d 92       	st	X+, r1
    64e6:	11 90       	ld	r1, Z+
    64e8:	1d 92       	st	X+, r1
    64ea:	11 90       	ld	r1, Z+
    64ec:	1d 92       	st	X+, r1
    64ee:	11 90       	ld	r1, Z+
    64f0:	1d 92       	st	X+, r1
    64f2:	11 90       	ld	r1, Z+
    64f4:	1d 92       	st	X+, r1
    64f6:	11 90       	ld	r1, Z+
    64f8:	1d 92       	st	X+, r1
    64fa:	11 90       	ld	r1, Z+
    64fc:	1d 92       	st	X+, r1
    64fe:	11 90       	ld	r1, Z+
    6500:	1d 92       	st	X+, r1
	clr r1
    6502:	11 24       	eor	r1, r1
	ret
    6504:	08 95       	ret

00006506 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6506:	0f 93       	push	r16
	push r17
    6508:	1f 93       	push	r17
	push YL
    650a:	cf 93       	push	r28
	push YH
    650c:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    650e:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6510:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6512:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    6514:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6516:	e0 0d       	add	r30, r0
	adc ZH,r1
    6518:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    651a:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    651c:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    651e:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6520:	8e 9f       	mul	r24, r30
	movw r26,r0
    6522:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6524:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6526:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6528:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    652a:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    652c:	00 24       	eor	r0, r0
	add YL,r1
    652e:	c1 0d       	add	r28, r1
	adc YH,r0		
    6530:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6532:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6534:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6536:	ea 0f       	add	r30, r26
	adc ZH,r27
    6538:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    653a:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    653c:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    653e:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6540:	69 9f       	mul	r22, r25
	add XL,r0
    6542:	a0 0d       	add	r26, r0
	adc XH,r1
    6544:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6546:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6548:	dd 27       	eor	r29, r29

	cpi r20,0	
    654a:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    654c:	51 f4       	brne	.+20     	; 0x6562 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    654e:	a2 0f       	add	r26, r18
	adc XH,r1
    6550:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6552:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6554:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6556:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6558:	11 c0       	rjmp	.+34     	; 0x657c <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    655a:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    655c:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    655e:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6560:	0d c0       	rjmp	.+26     	; 0x657c <x_check_end>

00006562 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6562:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6564:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6566:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6568:	04 c0       	rjmp	.+8      	; 0x6572 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    656a:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    656c:	e8 0f       	add	r30, r24
	adc ZH,r1	
    656e:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6570:	05 c0       	rjmp	.+10     	; 0x657c <x_check_end>

00006572 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6572:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6574:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6576:	e2 0f       	add	r30, r18
	adc ZH,r1
    6578:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    657a:	31 97       	sbiw	r30, 0x01	; 1

0000657c <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    657c:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    657e:	51 f4       	brne	.+20     	; 0x6594 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6580:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6582:	93 9f       	mul	r25, r19
	add XL,r0
    6584:	a0 0d       	add	r26, r0
	adc XH,r1
    6586:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6588:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    658a:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    658c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    658e:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6590:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6592:	0a c0       	rjmp	.+20     	; 0x65a8 <y_check_end>

00006594 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6594:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6596:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6598:	63 2f       	mov	r22, r19
	dec r22
    659a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    659c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    659e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    65a0:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    65a2:	56 9f       	mul	r21, r22
	add ZL,r0
    65a4:	e0 0d       	add	r30, r0
	adc ZH,r1	
    65a6:	f1 1d       	adc	r31, r1

000065a8 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    65a8:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    65aa:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    65ac:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    65ae:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    65b0:	00 ff       	sbrs	r16, 0
	clr r23
    65b2:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    65b4:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    65b6:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    65b8:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    65ba:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    65bc:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    65be:	59 1b       	sub	r21, r25

000065c0 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    65c0:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    65c2:	48 1b       	sub	r20, r24

000065c4 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    65c4:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    65c6:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    65c8:	2c 93       	st	X, r18
	adiw XL,1
    65ca:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    65cc:	e6 0f       	add	r30, r22
	adc ZH,r23
    65ce:	f7 1f       	adc	r31, r23
	dec r20
    65d0:	4a 95       	dec	r20
	brne x_loop
    65d2:	c1 f7       	brne	.-16     	; 0x65c4 <x_loop>

	add ZL,YL		;src+=srcXdiff
    65d4:	ec 0f       	add	r30, r28
	adc ZH,YH
    65d6:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    65d8:	a8 0f       	add	r26, r24
	adc XH,r1
    65da:	b1 1d       	adc	r27, r1
	dec r21
    65dc:	5a 95       	dec	r21
	brne y_loop
    65de:	81 f7       	brne	.-32     	; 0x65c0 <y_loop>


	pop YH
    65e0:	df 91       	pop	r29
	pop YL
    65e2:	cf 91       	pop	r28
	pop r17
    65e4:	1f 91       	pop	r17
	pop r16
    65e6:	0f 91       	pop	r16
	ret
    65e8:	08 95       	ret

000065ea <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    65ea:	0f 92       	push	r0
	push r1
    65ec:	1f 92       	push	r1
	push ZL;2
    65ee:	ef 93       	push	r30
	push ZH;2
    65f0:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    65f2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    65f4:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    65f6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    65fa:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    65fc:	f1 e0       	ldi	r31, 0x01	; 1

000065fe <latency_loop>:
latency_loop:
	cp ZL,ZH
    65fe:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6600:	00 f0       	brcs	.+0      	; 0x6602 <latency_loop+0x4>
	inc ZH
    6602:	f3 95       	inc	r31
	cpi ZH,10
    6604:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6606:	d8 f3       	brcs	.-10     	; 0x65fe <latency_loop>
	jmp .
    6608:	0c 94 06 33 	jmp	0x660c	; 0x660c <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    660c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6610:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6612:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    6616:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    661a:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    661c:	57 c0       	rjmp	.+174    	; 0x66cc <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    661e:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6620:	98 f0       	brcs	.+38     	; 0x6648 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6622:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6624:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6628:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    662a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    662e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6630:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6632:	26 f4       	brtc	.+8      	; 0x663c <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6634:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6636:	0e 94 ed 33 	call	0x67da	; 0x67da <update_sound>
	rjmp sync_end
    663a:	b7 c0       	rjmp	.+366    	; 0x67aa <sync_end>

0000663c <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    663c:	e5 e1       	ldi	r30, 0x15	; 21
    663e:	ea 95       	dec	r30
    6640:	f1 f7       	brne	.-4      	; 0x663e <sync_pre_eq_no_sound_update+0x2>
    6642:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6644:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6646:	b1 c0       	rjmp	.+354    	; 0x67aa <sync_end>

00006648 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6648:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    664a:	38 f1       	brcs	.+78     	; 0x669a <sync_post_eq>

	rjmp .
    664c:	00 c0       	rjmp	.+0      	; 0x664e <sync_eq+0x6>
	rjmp .
    664e:	00 c0       	rjmp	.+0      	; 0x6650 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6650:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6652:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6654:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6656:	16 f4       	brtc	.+4      	; 0x665c <sync_eq_skip>
	
	call update_sound
    6658:	0e 94 ed 33 	call	0x67da	; 0x67da <update_sound>

0000665c <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    665c:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    665e:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6662:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6664:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6668:	a0 c0       	rjmp	.+320    	; 0x67aa <sync_end>

0000666a <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    666a:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    666c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    666e:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6670:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6674:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6676:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6678:	00 f0       	brcs	.+0      	; 0x667a <__vector_14+0x10>

	cpi ZL,2
    667a:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    667c:	00 f0       	brcs	.+0      	; 0x667e <__vector_14+0x14>

	cpi ZL,3
    667e:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6680:	00 f0       	brcs	.+0      	; 0x6682 <__vector_14+0x18>

	cpi ZL,4
    6682:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6684:	00 f0       	brcs	.+0      	; 0x6686 <__vector_14+0x1c>

	cpi ZL,5
    6686:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6688:	00 f0       	brcs	.+0      	; 0x668a <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    668a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    668c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    668e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6692:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6694:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6696:	ef 91       	pop	r30
	reti
    6698:	18 95       	reti

0000669a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    669a:	00 c0       	rjmp	.+0      	; 0x669c <sync_post_eq+0x2>

	bst ZL,0
    669c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    669e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    66a0:	26 f4       	brtc	.+8      	; 0x66aa <sync_post_eq_no_sound_update>
	ldi ZL,1	
    66a2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    66a4:	0e 94 ed 33 	call	0x67da	; 0x67da <update_sound>
	rjmp sync_pre_eq_cont
    66a8:	05 c0       	rjmp	.+10     	; 0x66b4 <sync_pre_eq_cont>

000066aa <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    66aa:	e5 e1       	ldi	r30, 0x15	; 21
    66ac:	ea 95       	dec	r30
    66ae:	f1 f7       	brne	.-4      	; 0x66ac <sync_post_eq_no_sound_update+0x2>
    66b0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    66b2:	28 9a       	sbi	0x05, 0	; 5

000066b4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    66b4:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    66b8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    66ba:	09 f0       	breq	.+2      	; 0x66be <sync_pre_eq_cont+0xa>
	rjmp sync_end
    66bc:	76 c0       	rjmp	.+236    	; 0x67aa <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    66be:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    66c0:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    66c4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    66c6:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    66ca:	6f c0       	rjmp	.+222    	; 0x67aa <sync_end>

000066cc <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    66cc:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    66ce:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    66d2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    66d4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    66d8:	00 c0       	rjmp	.+0      	; 0x66da <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    66da:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    66dc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    66de:	00 c0       	rjmp	.+0      	; 0x66e0 <sync_hsync+0x14>
	call update_sound
    66e0:	0e 94 ed 33 	call	0x67da	; 0x67da <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    66e4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    66e6:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    66ea:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    66ec:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    66f0:	ef 17       	cp	r30, r31
	brsh no_render
    66f2:	d0 f4       	brcc	.+52     	; 0x6728 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    66f4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    66f6:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    66fa:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    66fc:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    6700:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6702:	ef 17       	cp	r30, r31
	brlo no_render
    6704:	88 f0       	brcs	.+34     	; 0x6728 <no_render>

	;push r1-r29
	ldi ZL,29
    6706:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6708:	ff 27       	eor	r31, r31

0000670a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    670a:	00 80       	ld	r0, Z
	push r0
    670c:	0f 92       	push	r0
	dec ZL
    670e:	ea 95       	dec	r30
	brne push_loop	
    6710:	e1 f7       	brne	.-8      	; 0x670a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6712:	06 e0       	ldi	r16, 0x06	; 6
    6714:	0a 95       	dec	r16
    6716:	f1 f7       	brne	.-4      	; 0x6714 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6718:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    671c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    671e:	ff 27       	eor	r31, r31

00006720 <pop_loop>:
pop_loop:
	pop r0
    6720:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6722:	01 92       	st	Z+, r0
	cpi ZL,30
    6724:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6726:	e0 f3       	brcs	.-8      	; 0x6720 <pop_loop>

00006728 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6728:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    672c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    672e:	09 f0       	breq	.+2      	; 0x6732 <no_render+0xa>
	rjmp sync_end
    6730:	3c c0       	rjmp	.+120    	; 0x67aa <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6732:	2f 93       	push	r18
	push r19
    6734:	3f 93       	push	r19
	push r20
    6736:	4f 93       	push	r20
	push r21
    6738:	5f 93       	push	r21
	push r22
    673a:	6f 93       	push	r22
	push r23
    673c:	7f 93       	push	r23
	push r24
    673e:	8f 93       	push	r24
	push r25
    6740:	9f 93       	push	r25
	push r26
    6742:	af 93       	push	r26
	push r27
    6744:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6746:	78 94       	sei
	clr r1
    6748:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    674a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    674c:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6750:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6752:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6756:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    675a:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    675e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6760:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    6764:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6768:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    676c:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    6770:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6772:	f1 05       	cpc	r31, r1
	breq .+2 
    6774:	09 f0       	breq	.+2      	; 0x6778 <no_render+0x50>
	icall
    6776:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6778:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    677c:	0e 94 de 43 	call	0x87bc	; 0x87bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6780:	0e 94 e7 33 	call	0x67ce	; 0x67ce <process_music>
	clr r1
    6784:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6786:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    678a:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    678e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6790:	f1 05       	cpc	r31, r1
	breq .+2 
    6792:	09 f0       	breq	.+2      	; 0x6796 <no_render+0x6e>
	icall
    6794:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6796:	bf 91       	pop	r27
	pop r26
    6798:	af 91       	pop	r26
	pop r25
    679a:	9f 91       	pop	r25
	pop r24
    679c:	8f 91       	pop	r24
	pop r23
    679e:	7f 91       	pop	r23
	pop r22
    67a0:	6f 91       	pop	r22
	pop r21
    67a2:	5f 91       	pop	r21
	pop r20
    67a4:	4f 91       	pop	r20
	pop r19
    67a6:	3f 91       	pop	r19
	pop r18
    67a8:	2f 91       	pop	r18

000067aa <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    67aa:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    67ac:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    67ae:	ff 91       	pop	r31
	pop ZL
    67b0:	ef 91       	pop	r30
	pop r1
    67b2:	1f 90       	pop	r1
	pop r0
    67b4:	0f 90       	pop	r0
	reti
    67b6:	18 95       	reti

000067b8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    67b8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    67ba:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    67bc:	00 c0       	rjmp	.+0      	; 0x67be <hsync_pulse+0x6>
	call update_sound
    67be:	0e 94 ed 33 	call	0x67da	; 0x67da <update_sound>

	lds ZL,sync_pulse
    67c2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    67c6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    67c8:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    67cc:	08 95       	ret

000067ce <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    67ce:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    67d2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    67d4:	0e 94 13 39 	call	0x7226	; 0x7226 <ProcessMusic>
#endif

	ret
    67d8:	08 95       	ret

000067da <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    67da:	0f 93       	push	r16
	push r17
    67dc:	1f 93       	push	r17
	push r18
    67de:	2f 93       	push	r18
	push r28
    67e0:	cf 93       	push	r28
	push r29
    67e2:	df 93       	push	r29

	mov r18,ZL
    67e4:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    67e6:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    67ea:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    67ee:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    67f0:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    67f4:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    67f8:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    67fc:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    67fe:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6800:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    6804:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    6808:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    680c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    680e:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6810:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6812:	d0 2d       	mov	r29, r0
	nop
    6814:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6816:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    681a:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    681e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6820:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    6824:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    6828:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    682c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    682e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6830:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    6834:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    6838:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    683c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    683e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6840:	20 ff       	sbrs	r18, 0
	rjmp .
    6842:	00 c0       	rjmp	.+0      	; 0x6844 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6844:	01 03       	mulsu	r16, r17
	clr r0
    6846:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6848:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    684a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    684c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    684e:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    6852:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    6856:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6858:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    685c:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    6860:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    6864:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6866:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6868:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    686c:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    6870:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    6874:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6876:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6878:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    687a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    687c:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    6880:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    6884:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    6888:	ea 95       	dec	r30
	brpl ch4_no_shift	
    688a:	92 f4       	brpl	.+36     	; 0x68b0 <ch4_no_shift>

	lds ZH,tr4_params
    688c:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    6890:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6892:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6894:	00 2e       	mov	r0, r16
	lsr r0
    6896:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6898:	00 26       	eor	r0, r16
	bst r0,0
    689a:	00 fa       	bst	r0, 0
	lsr r17
    689c:	16 95       	lsr	r17
	ror r16
    689e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    68a0:	16 f9       	bld	r17, 6
	sbrs ZH,0
    68a2:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    68a4:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    68a6:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    68aa:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    68ae:	03 c0       	rjmp	.+6      	; 0x68b6 <ch4_end>

000068b0 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    68b0:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    68b2:	1a 95       	dec	r17
	brne .-4
    68b4:	f1 f7       	brne	.-4      	; 0x68b2 <ch4_no_shift+0x2>

000068b6 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    68b6:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    68ba:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    68bc:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    68be:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    68c0:	21 ff       	sbrs	r18, 1
	rjmp .
    68c2:	00 c0       	rjmp	.+0      	; 0x68c4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    68c4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    68c6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    68c8:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    68cc:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    68ce:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    68d0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    68d2:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    68d4:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    68d8:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    68dc:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    68de:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    68e2:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    68e6:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    68ea:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    68ec:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    68f0:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    68f2:	f0 1f       	adc	r31, r16

	movw r16,ZL
    68f4:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    68f6:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    68fa:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    68fe:	00 19       	sub	r16, r0
	sbc r17,r1
    6900:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6902:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    6906:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    690a:	e0 15       	cp	r30, r0
	cpc ZH,r1
    690c:	f1 05       	cpc	r31, r1
	brlo .+2
    690e:	08 f0       	brcs	.+2      	; 0x6912 <ch4_end+0x5c>
	movw ZL,r16
    6910:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6912:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    6916:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    691a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    691c:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    6920:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6922:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6924:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6926:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6928:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    692a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    692c:	d0 05       	cpc	r29, r0
	brlt .+2
    692e:	0c f0       	brlt	.+2      	; 0x6932 <ch4_end+0x7c>
	ldi r28,127
    6930:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6932:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6934:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6936:	d0 05       	cpc	r29, r0
	brge .+2
    6938:	0c f4       	brge	.+2      	; 0x693c <ch4_end+0x86>
	ldi r28,-128
    693a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    693c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    693e:	c0 93 b3 00 	sts	0x00B3, r28

00006942 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    6942:	df 91       	pop	r29
	pop r28
    6944:	cf 91       	pop	r28
	pop r18
    6946:	2f 91       	pop	r18
	pop r17
    6948:	1f 91       	pop	r17
	pop r16
    694a:	0f 91       	pop	r16
	
	ret
    694c:	08 95       	ret

0000694e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    694e:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    6952:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    6956:	08 95       	ret

00006958 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6958:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    695a:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    695c:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    695e:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6960:	6c e1       	ldi	r22, 0x1C	; 28

00006962 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6962:	6d 93       	st	X+, r22
	sbiw r30,1
    6964:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6966:	e9 f7       	brne	.-6      	; 0x6962 <fill_vram_loop>

	clr r1
    6968:	11 24       	eor	r1, r1

	ret
    696a:	08 95       	ret

0000696c <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    696c:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    696e:	76 2f       	mov	r23, r22
	lsr r22
    6970:	66 95       	lsr	r22
	lsr r22
    6972:	66 95       	lsr	r22
	lsr r22			;y>>3
    6974:	66 95       	lsr	r22
	ldi r18,8		
    6976:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    6978:	82 9f       	mul	r24, r18
	movw XL,r0
    697a:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    697c:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    697e:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    6980:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    6982:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    6984:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    6986:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    6988:	4c 93       	st	X, r20

	clr r1
    698a:	11 24       	eor	r1, r1

	ret
    698c:	08 95       	ret

0000698e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    698e:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    6992:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    6996:	08 95       	ret

00006998 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6998:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    699c:	81 70       	andi	r24, 0x01	; 1
	ret
    699e:	08 95       	ret

000069a0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    69a0:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    69a4:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    69a6:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    69aa:	08 95       	ret

000069ac <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    69ac:	88 23       	and	r24, r24
	brne rj_p2
    69ae:	29 f4       	brne	.+10     	; 0x69ba <rj_p2>
		
	lds r24,joypad1_status_lo
    69b0:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    69b4:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    69b8:	08 95       	ret

000069ba <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    69ba:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    69be:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    69c2:	08 95       	ret

000069c4 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    69c4:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    69c6:	7a 95       	dec	r23
	brne .-4 ;~1 us
    69c8:	f1 f7       	brne	.-4      	; 0x69c6 <WaitUs+0x2>
	nop
    69ca:	00 00       	nop
	sbiw r24,1
    69cc:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    69ce:	d1 f7       	brne	.-12     	; 0x69c4 <WaitUs>

	ret
    69d0:	08 95       	ret

000069d2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    69d2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    69d4:	fe cf       	rjmp	.-4      	; 0x69d2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    69d6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    69d8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    69da:	60 bd       	out	0x20, r22	; 32
   cli
    69dc:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    69de:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    69e0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    69e2:	78 94       	sei
   ret
    69e4:	08 95       	ret

000069e6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    69e6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    69e8:	fe cf       	rjmp	.-4      	; 0x69e6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    69ea:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    69ec:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    69ee:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    69f0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    69f2:	80 b5       	in	r24, 0x20	; 32
   sei
    69f4:	78 94       	sei
   ret
    69f6:	08 95       	ret

000069f8 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    69f8:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    69fa:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    69fe:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    6a02:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    6a06:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    6a0a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    6a0e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    6a12:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    6a16:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    6a1a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    6a1e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    6a20:	80 93 81 00 	sts	0x0081, r24

		cli
    6a24:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    6a26:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    6a28:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    6a2c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    6a2e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    6a32:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    6a34:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    6a38:	90 93 60 00 	sts	0x0060, r25
	
		sei
    6a3c:	78 94       	sei

00006a3e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    6a3e:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    6a42:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    6a44:	e0 f3       	brcs	.-8      	; 0x6a3e <wait>

		ret
    6a46:	08 95       	ret

00006a48 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    6a48:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    6a4c:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    6a50:	08 95       	ret

00006a52 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    6a52:	0f 93       	push	r16
		push r17
    6a54:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    6a56:	0f b7       	in	r16, 0x3f	; 63
		push r16
    6a58:	0f 93       	push	r16

		lds r16,sync_pulse
    6a5a:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    6a5e:	03 95       	inc	r16
		sts sync_pulse,r16
    6a60:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    6a64:	00 fd       	sbrc	r16, 0
		rjmp 1f
    6a66:	08 c0       	rjmp	.+16     	; 0x6a78 <__vector_8+0x26>
		lds r17,random_value
    6a68:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6a6c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6a70:	10 27       	eor	r17, r16
		sts random_value,r17
    6a72:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    6a76:	07 c0       	rjmp	.+14     	; 0x6a86 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    6a78:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    6a7c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    6a80:	10 27       	eor	r17, r16
		sts random_value+1,r17
    6a82:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    6a86:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    6a88:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    6a8c:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    6a8e:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    6a90:	1f 91       	pop	r17
		pop r16
    6a92:	0f 91       	pop	r16
		reti
    6a94:	18 95       	reti

00006a96 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6a96:	98 e0       	ldi	r25, 0x08	; 8
    6a98:	88 e1       	ldi	r24, 0x18	; 24
    6a9a:	0f b6       	in	r0, 0x3f	; 63
    6a9c:	f8 94       	cli
    6a9e:	a8 95       	wdr
    6aa0:	80 93 60 00 	sts	0x0060, r24
    6aa4:	0f be       	out	0x3f, r0	; 63
    6aa6:	90 93 60 00 	sts	0x0060, r25
	while(1);
    6aaa:	ff cf       	rjmp	.-2      	; 0x6aaa <SoftReset+0x14>

00006aac <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6aac:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6aae:	c8 95       	lpm
    6ab0:	c8 95       	lpm
		Wait200ns();
    6ab2:	c8 95       	lpm
    6ab4:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    6ab6:	12 98       	cbi	0x02, 2	; 2
    6ab8:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    6aba:	80 e0       	ldi	r24, 0x00	; 0
    6abc:	90 e0       	ldi	r25, 0x00	; 0
    6abe:	20 e0       	ldi	r18, 0x00	; 0
    6ac0:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    6ac2:	36 95       	lsr	r19
    6ac4:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    6ac6:	96 95       	lsr	r25
    6ac8:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6aca:	c8 95       	lpm
    6acc:	c8 95       	lpm
			Wait200ns();
    6ace:	c8 95       	lpm
    6ad0:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    6ad2:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    6ad4:	00 9b       	sbis	0x00, 0	; 0
    6ad6:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    6ad8:	01 9b       	sbis	0x00, 1	; 0
    6ada:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    6adc:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6ade:	c8 95       	lpm
    6ae0:	c8 95       	lpm
			Wait200ns();
    6ae2:	c8 95       	lpm
    6ae4:	c8 95       	lpm
    6ae6:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    6ae8:	61 f7       	brne	.-40     	; 0x6ac2 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    6aea:	30 93 c0 0c 	sts	0x0CC0, r19
    6aee:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    6af2:	90 93 c4 0c 	sts	0x0CC4, r25
    6af6:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    6afa:	80 91 bf 0c 	lds	r24, 0x0CBF
    6afe:	90 91 c0 0c 	lds	r25, 0x0CC0
    6b02:	0f 97       	sbiw	r24, 0x0f	; 15
    6b04:	31 f0       	breq	.+12     	; 0x6b12 <ReadButtons+0x66>
    6b06:	80 91 c3 0c 	lds	r24, 0x0CC3
    6b0a:	90 91 c4 0c 	lds	r25, 0x0CC4
    6b0e:	0f 97       	sbiw	r24, 0x0f	; 15
    6b10:	11 f4       	brne	.+4      	; 0x6b16 <ReadButtons+0x6a>
		SoftReset();
    6b12:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <SoftReset>
    6b16:	08 95       	ret

00006b18 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    6b18:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    6b1c:	00 99       	sbic	0x00, 0	; 0
    6b1e:	03 c0       	rjmp	.+6      	; 0x6b26 <ReadControllers+0xe>
    6b20:	81 e0       	ldi	r24, 0x01	; 1
    6b22:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    6b26:	01 99       	sbic	0x00, 1	; 0
    6b28:	05 c0       	rjmp	.+10     	; 0x6b34 <ReadControllers+0x1c>
    6b2a:	80 91 f8 0c 	lds	r24, 0x0CF8
    6b2e:	82 60       	ori	r24, 0x02	; 2
    6b30:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    6b34:	0c 94 56 35 	jmp	0x6aac	; 0x6aac <ReadButtons>

00006b38 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    6b38:	cf 93       	push	r28
    6b3a:	df 93       	push	r29
    6b3c:	c0 e0       	ldi	r28, 0x00	; 0
    6b3e:	d0 e0       	ldi	r29, 0x00	; 0
    6b40:	fe 01       	movw	r30, r28
    6b42:	ee 54       	subi	r30, 0x4E	; 78
    6b44:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    6b46:	64 91       	lpm	r22, Z
    6b48:	ce 01       	movw	r24, r28
    6b4a:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <WriteEeprom>
    6b4e:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    6b50:	c0 32       	cpi	r28, 0x20	; 32
    6b52:	d1 05       	cpc	r29, r1
    6b54:	a9 f7       	brne	.-22     	; 0x6b40 <FormatEeprom+0x8>
    6b56:	c0 e2       	ldi	r28, 0x20	; 32
    6b58:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    6b5a:	6f ef       	ldi	r22, 0xFF	; 255
    6b5c:	ce 01       	movw	r24, r28
    6b5e:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    6b62:	6f ef       	ldi	r22, 0xFF	; 255
    6b64:	ce 01       	movw	r24, r28
    6b66:	01 96       	adiw	r24, 0x01	; 1
    6b68:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    6b6c:	a0 96       	adiw	r28, 0x20	; 32
    6b6e:	c1 15       	cp	r28, r1
    6b70:	88 e0       	ldi	r24, 0x08	; 8
    6b72:	d8 07       	cpc	r29, r24
    6b74:	91 f7       	brne	.-28     	; 0x6b5a <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    6b76:	df 91       	pop	r29
    6b78:	cf 91       	pop	r28
    6b7a:	08 95       	ret

00006b7c <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    6b7c:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    6b7e:	80 e0       	ldi	r24, 0x00	; 0
    6b80:	90 e0       	ldi	r25, 0x00	; 0
    6b82:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <ReadEeprom>
    6b86:	c8 2f       	mov	r28, r24
    6b88:	81 e0       	ldi	r24, 0x01	; 1
    6b8a:	90 e0       	ldi	r25, 0x00	; 0
    6b8c:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <ReadEeprom>
    6b90:	28 2f       	mov	r18, r24
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	32 2f       	mov	r19, r18
    6b96:	22 27       	eor	r18, r18
    6b98:	2c 0f       	add	r18, r28
    6b9a:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    6b9c:	81 e0       	ldi	r24, 0x01	; 1
    6b9e:	2a 35       	cpi	r18, 0x5A	; 90
    6ba0:	35 45       	sbci	r19, 0x55	; 85
    6ba2:	09 f0       	breq	.+2      	; 0x6ba6 <isEepromFormatted+0x2a>
    6ba4:	80 e0       	ldi	r24, 0x00	; 0
}
    6ba6:	cf 91       	pop	r28
    6ba8:	08 95       	ret

00006baa <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    6baa:	8f 92       	push	r8
    6bac:	9f 92       	push	r9
    6bae:	af 92       	push	r10
    6bb0:	bf 92       	push	r11
    6bb2:	cf 92       	push	r12
    6bb4:	df 92       	push	r13
    6bb6:	ef 92       	push	r14
    6bb8:	ff 92       	push	r15
    6bba:	0f 93       	push	r16
    6bbc:	1f 93       	push	r17
    6bbe:	cf 93       	push	r28
    6bc0:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    6bc2:	fb 01       	movw	r30, r22
    6bc4:	11 82       	std	Z+1, r1	; 0x01
    6bc6:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    6bca:	ff ef       	ldi	r31, 0xFF	; 255
    6bcc:	9f 07       	cpc	r25, r31
    6bce:	89 f1       	breq	.+98     	; 0x6c32 <EepromBlockExists+0x88>
    6bd0:	6a 01       	movw	r12, r20
    6bd2:	8b 01       	movw	r16, r22
    6bd4:	7c 01       	movw	r14, r24
    6bd6:	a1 2c       	mov	r10, r1
    6bd8:	b1 2c       	mov	r11, r1
    6bda:	c0 e0       	ldi	r28, 0x00	; 0
    6bdc:	d3 e0       	ldi	r29, 0x03	; 3
    6bde:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    6be0:	c5 01       	movw	r24, r10
    6be2:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <ReadEeprom>
    6be6:	88 2e       	mov	r8, r24
    6be8:	c5 01       	movw	r24, r10
    6bea:	01 96       	adiw	r24, 0x01	; 1
    6bec:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <ReadEeprom>
    6bf0:	28 2f       	mov	r18, r24
    6bf2:	30 e0       	ldi	r19, 0x00	; 0
    6bf4:	32 2f       	mov	r19, r18
    6bf6:	22 27       	eor	r18, r18
    6bf8:	28 0d       	add	r18, r8
    6bfa:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    6bfc:	2e 15       	cp	r18, r14
    6bfe:	3f 05       	cpc	r19, r15
    6c00:	29 f4       	brne	.+10     	; 0x6c0c <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    6c02:	f8 01       	movw	r30, r16
    6c04:	b1 82       	std	Z+1, r11	; 0x01
    6c06:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    6c08:	d0 e0       	ldi	r29, 0x00	; 0
    6c0a:	0b c0       	rjmp	.+22     	; 0x6c22 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    6c0c:	2f 3f       	cpi	r18, 0xFF	; 255
    6c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c10:	41 f4       	brne	.+16     	; 0x6c22 <EepromBlockExists+0x78>
    6c12:	91 10       	cpse	r9, r1
    6c14:	06 c0       	rjmp	.+12     	; 0x6c22 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    6c16:	c1 14       	cp	r12, r1
    6c18:	d1 04       	cpc	r13, r1
    6c1a:	11 f0       	breq	.+4      	; 0x6c20 <EepromBlockExists+0x76>
    6c1c:	f6 01       	movw	r30, r12
    6c1e:	c0 83       	st	Z, r28
    6c20:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    6c22:	cf 5f       	subi	r28, 0xFF	; 255
    6c24:	f0 e2       	ldi	r31, 0x20	; 32
    6c26:	af 0e       	add	r10, r31
    6c28:	b1 1c       	adc	r11, r1
    6c2a:	c0 34       	cpi	r28, 0x40	; 64
    6c2c:	c9 f6       	brne	.-78     	; 0x6be0 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    6c2e:	8d 2f       	mov	r24, r29
    6c30:	01 c0       	rjmp	.+2      	; 0x6c34 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6c32:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    6c34:	df 91       	pop	r29
    6c36:	cf 91       	pop	r28
    6c38:	1f 91       	pop	r17
    6c3a:	0f 91       	pop	r16
    6c3c:	ff 90       	pop	r15
    6c3e:	ef 90       	pop	r14
    6c40:	df 90       	pop	r13
    6c42:	cf 90       	pop	r12
    6c44:	bf 90       	pop	r11
    6c46:	af 90       	pop	r10
    6c48:	9f 90       	pop	r9
    6c4a:	8f 90       	pop	r8
    6c4c:	08 95       	ret

00006c4e <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    6c4e:	ef 92       	push	r14
    6c50:	ff 92       	push	r15
    6c52:	0f 93       	push	r16
    6c54:	1f 93       	push	r17
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	00 d0       	rcall	.+0      	; 0x6c5c <EepromWriteBlock+0xe>
    6c5c:	1f 92       	push	r1
    6c5e:	cd b7       	in	r28, 0x3d	; 61
    6c60:	de b7       	in	r29, 0x3e	; 62
    6c62:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    6c64:	1a 82       	std	Y+2, r1	; 0x02
    6c66:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    6c68:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    6c6a:	ae 01       	movw	r20, r28
    6c6c:	4d 5f       	subi	r20, 0xFD	; 253
    6c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c70:	be 01       	movw	r22, r28
    6c72:	6f 5f       	subi	r22, 0xFF	; 255
    6c74:	7f 4f       	sbci	r23, 0xFF	; 255
    6c76:	fc 01       	movw	r30, r24
    6c78:	80 81       	ld	r24, Z
    6c7a:	91 81       	ldd	r25, Z+1	; 0x01
    6c7c:	0e 94 d5 35 	call	0x6baa	; 0x6baa <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    6c80:	88 23       	and	r24, r24
    6c82:	11 f0       	breq	.+4      	; 0x6c88 <EepromWriteBlock+0x3a>
    6c84:	83 30       	cpi	r24, 0x03	; 3
    6c86:	19 f5       	brne	.+70     	; 0x6cce <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6c88:	89 81       	ldd	r24, Y+1	; 0x01
    6c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c8c:	89 2b       	or	r24, r25
    6c8e:	49 f4       	brne	.+18     	; 0x6ca2 <EepromWriteBlock+0x54>
    6c90:	8b 81       	ldd	r24, Y+3	; 0x03
    6c92:	88 23       	and	r24, r24
    6c94:	d9 f0       	breq	.+54     	; 0x6ccc <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    6c96:	f0 e2       	ldi	r31, 0x20	; 32
    6c98:	8f 9f       	mul	r24, r31
    6c9a:	c0 01       	movw	r24, r0
    6c9c:	11 24       	eor	r1, r1
    6c9e:	9a 83       	std	Y+2, r25	; 0x02
    6ca0:	89 83       	std	Y+1, r24	; 0x01
    6ca2:	78 01       	movw	r14, r16
    6ca4:	20 e2       	ldi	r18, 0x20	; 32
    6ca6:	e2 0e       	add	r14, r18
    6ca8:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    6caa:	f8 01       	movw	r30, r16
    6cac:	61 91       	ld	r22, Z+
    6cae:	8f 01       	movw	r16, r30
    6cb0:	89 81       	ldd	r24, Y+1	; 0x01
    6cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6cb4:	9c 01       	movw	r18, r24
    6cb6:	2f 5f       	subi	r18, 0xFF	; 255
    6cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    6cba:	3a 83       	std	Y+2, r19	; 0x02
    6cbc:	29 83       	std	Y+1, r18	; 0x01
    6cbe:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    6cc2:	0e 15       	cp	r16, r14
    6cc4:	1f 05       	cpc	r17, r15
    6cc6:	89 f7       	brne	.-30     	; 0x6caa <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	01 c0       	rjmp	.+2      	; 0x6cce <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6ccc:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    6cce:	0f 90       	pop	r0
    6cd0:	0f 90       	pop	r0
    6cd2:	0f 90       	pop	r0
    6cd4:	df 91       	pop	r29
    6cd6:	cf 91       	pop	r28
    6cd8:	1f 91       	pop	r17
    6cda:	0f 91       	pop	r16
    6cdc:	ff 90       	pop	r15
    6cde:	ef 90       	pop	r14
    6ce0:	08 95       	ret

00006ce2 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    6ce2:	cf 92       	push	r12
    6ce4:	df 92       	push	r13
    6ce6:	ff 92       	push	r15
    6ce8:	0f 93       	push	r16
    6cea:	1f 93       	push	r17
    6cec:	cf 93       	push	r28
    6cee:	df 93       	push	r29
    6cf0:	00 d0       	rcall	.+0      	; 0x6cf2 <EepromReadBlock+0x10>
    6cf2:	cd b7       	in	r28, 0x3d	; 61
    6cf4:	de b7       	in	r29, 0x3e	; 62
    6cf6:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    6cf8:	40 e0       	ldi	r20, 0x00	; 0
    6cfa:	50 e0       	ldi	r21, 0x00	; 0
    6cfc:	be 01       	movw	r22, r28
    6cfe:	6f 5f       	subi	r22, 0xFF	; 255
    6d00:	7f 4f       	sbci	r23, 0xFF	; 255
    6d02:	0e 94 d5 35 	call	0x6baa	; 0x6baa <EepromBlockExists>
    6d06:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    6d08:	81 11       	cpse	r24, r1
    6d0a:	13 c0       	rjmp	.+38     	; 0x6d32 <EepromReadBlock+0x50>
    6d0c:	68 01       	movw	r12, r16
    6d0e:	80 e2       	ldi	r24, 0x20	; 32
    6d10:	c8 0e       	add	r12, r24
    6d12:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    6d14:	89 81       	ldd	r24, Y+1	; 0x01
    6d16:	9a 81       	ldd	r25, Y+2	; 0x02
    6d18:	9c 01       	movw	r18, r24
    6d1a:	2f 5f       	subi	r18, 0xFF	; 255
    6d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1e:	3a 83       	std	Y+2, r19	; 0x02
    6d20:	29 83       	std	Y+1, r18	; 0x01
    6d22:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <ReadEeprom>
    6d26:	f8 01       	movw	r30, r16
    6d28:	81 93       	st	Z+, r24
    6d2a:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    6d2c:	ec 15       	cp	r30, r12
    6d2e:	fd 05       	cpc	r31, r13
    6d30:	89 f7       	brne	.-30     	; 0x6d14 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    6d32:	8f 2d       	mov	r24, r15
    6d34:	0f 90       	pop	r0
    6d36:	0f 90       	pop	r0
    6d38:	df 91       	pop	r29
    6d3a:	cf 91       	pop	r28
    6d3c:	1f 91       	pop	r17
    6d3e:	0f 91       	pop	r16
    6d40:	ff 90       	pop	r15
    6d42:	df 90       	pop	r13
    6d44:	cf 90       	pop	r12
    6d46:	08 95       	ret

00006d48 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    6d48:	00 97       	sbiw	r24, 0x00	; 0
    6d4a:	21 f0       	breq	.+8      	; 0x6d54 <GetPrngNumber+0xc>
    6d4c:	90 93 cd 0c 	sts	0x0CCD, r25
    6d50:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    6d54:	20 91 cc 0c 	lds	r18, 0x0CCC
    6d58:	30 91 cd 0c 	lds	r19, 0x0CCD
    6d5c:	a9 01       	movw	r20, r18
    6d5e:	56 95       	lsr	r21
    6d60:	47 95       	ror	r20
    6d62:	56 95       	lsr	r21
    6d64:	47 95       	ror	r20
    6d66:	c9 01       	movw	r24, r18
    6d68:	63 e0       	ldi	r22, 0x03	; 3
    6d6a:	96 95       	lsr	r25
    6d6c:	87 95       	ror	r24
    6d6e:	6a 95       	dec	r22
    6d70:	e1 f7       	brne	.-8      	; 0x6d6a <GetPrngNumber+0x22>
    6d72:	84 27       	eor	r24, r20
    6d74:	95 27       	eor	r25, r21
    6d76:	82 27       	eor	r24, r18
    6d78:	93 27       	eor	r25, r19
    6d7a:	a9 01       	movw	r20, r18
    6d7c:	75 e0       	ldi	r23, 0x05	; 5
    6d7e:	56 95       	lsr	r21
    6d80:	47 95       	ror	r20
    6d82:	7a 95       	dec	r23
    6d84:	e1 f7       	brne	.-8      	; 0x6d7e <GetPrngNumber+0x36>
    6d86:	84 27       	eor	r24, r20
    6d88:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    6d8a:	99 27       	eor	r25, r25
    6d8c:	86 95       	lsr	r24
    6d8e:	97 95       	ror	r25
    6d90:	88 27       	eor	r24, r24
    6d92:	36 95       	lsr	r19
    6d94:	27 95       	ror	r18
    6d96:	82 2b       	or	r24, r18
    6d98:	93 2b       	or	r25, r19
    6d9a:	90 93 cd 0c 	sts	0x0CCD, r25
    6d9e:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    6da2:	08 95       	ret

00006da4 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    6da4:	fc 01       	movw	r30, r24
    6da6:	67 87       	std	Z+15, r22	; 0x0f
    6da8:	08 95       	ret

00006daa <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    6daa:	e0 ed       	ldi	r30, 0xD0	; 208
    6dac:	fc e0       	ldi	r31, 0x0C	; 12
    6dae:	81 e0       	ldi	r24, 0x01	; 1
    6db0:	91 e0       	ldi	r25, 0x01	; 1
    6db2:	95 8b       	std	Z+21, r25	; 0x15
    6db4:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    6db6:	63 8b       	std	Z+19, r22	; 0x13
    6db8:	08 95       	ret

00006dba <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    6dba:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    6dbc:	90 81       	ld	r25, Z
    6dbe:	9f 75       	andi	r25, 0x5F	; 95
    6dc0:	90 83       	st	Z, r25
    6dc2:	08 95       	ret

00006dc4 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    6dc4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    6dc6:	90 81       	ld	r25, Z
    6dc8:	90 64       	ori	r25, 0x40	; 64
    6dca:	90 83       	st	Z, r25
    6dcc:	08 95       	ret

00006dce <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    6dce:	fc 01       	movw	r30, r24
    6dd0:	66 87       	std	Z+14, r22	; 0x0e
    6dd2:	08 95       	ret

00006dd4 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    6dd4:	fc 01       	movw	r30, r24
    6dd6:	62 87       	std	Z+10, r22	; 0x0a
    6dd8:	08 95       	ret

00006dda <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    6dda:	fc 01       	movw	r30, r24
    6ddc:	63 87       	std	Z+11, r22	; 0x0b
    6dde:	08 95       	ret

00006de0 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	ec 01       	movw	r28, r24
    6de6:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    6de8:	29 81       	ldd	r18, Y+1	; 0x01
    6dea:	30 e0       	ldi	r19, 0x00	; 0
    6dec:	f9 01       	movw	r30, r18
    6dee:	ee 0f       	add	r30, r30
    6df0:	ff 1f       	adc	r31, r31
    6df2:	e8 5f       	subi	r30, 0xF8	; 248
    6df4:	f8 48       	sbci	r31, 0x88	; 136
    6df6:	65 91       	lpm	r22, Z+
    6df8:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    6dfa:	f9 01       	movw	r30, r18
    6dfc:	e4 0f       	add	r30, r20
    6dfe:	f1 1d       	adc	r31, r1
    6e00:	47 fd       	sbrc	r20, 7
    6e02:	fa 95       	dec	r31
    6e04:	ee 0f       	add	r30, r30
    6e06:	ff 1f       	adc	r31, r31
    6e08:	e8 5f       	subi	r30, 0xF8	; 248
    6e0a:	f8 48       	sbci	r31, 0x88	; 136
    6e0c:	85 91       	lpm	r24, Z+
    6e0e:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    6e10:	86 1b       	sub	r24, r22
    6e12:	97 0b       	sbc	r25, r23
    6e14:	68 85       	ldd	r22, Y+8	; 0x08
    6e16:	70 e0       	ldi	r23, 0x00	; 0
    6e18:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
	if(delta==0)delta++;
    6e1c:	61 15       	cp	r22, r1
    6e1e:	71 05       	cpc	r23, r1
    6e20:	11 f4       	brne	.+4      	; 0x6e26 <PatchCommand11+0x46>
    6e22:	61 e0       	ldi	r22, 0x01	; 1
    6e24:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    6e26:	ea 81       	ldd	r30, Y+2	; 0x02
    6e28:	86 e0       	ldi	r24, 0x06	; 6
    6e2a:	e8 9f       	mul	r30, r24
    6e2c:	f0 01       	movw	r30, r0
    6e2e:	11 24       	eor	r1, r1
    6e30:	e0 53       	subi	r30, 0x30	; 48
    6e32:	f3 4f       	sbci	r31, 0xF3	; 243
    6e34:	81 81       	ldd	r24, Z+1	; 0x01
    6e36:	92 81       	ldd	r25, Z+2	; 0x02
    6e38:	86 0f       	add	r24, r22
    6e3a:	97 1f       	adc	r25, r23
    6e3c:	92 83       	std	Z+2, r25	; 0x02
    6e3e:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    6e40:	7e 83       	std	Y+6, r23	; 0x06
    6e42:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    6e44:	88 81       	ld	r24, Y
    6e46:	88 60       	ori	r24, 0x08	; 8
    6e48:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    6e4a:	89 81       	ldd	r24, Y+1	; 0x01
    6e4c:	48 0f       	add	r20, r24
    6e4e:	4f 83       	std	Y+7, r20	; 0x07
}
    6e50:	df 91       	pop	r29
    6e52:	cf 91       	pop	r28
    6e54:	08 95       	ret

00006e56 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    6e56:	fc 01       	movw	r30, r24
    6e58:	60 87       	std	Z+8, r22	; 0x08
    6e5a:	08 95       	ret

00006e5c <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    6e5c:	fc 01       	movw	r30, r24
    6e5e:	64 83       	std	Z+4, r22	; 0x04
    6e60:	08 95       	ret

00006e62 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    6e62:	fc 01       	movw	r30, r24
    6e64:	82 81       	ldd	r24, Z+2	; 0x02
    6e66:	0c 94 4c 3b 	jmp	0x7698	; 0x7698 <SetMixerWave>

00006e6a <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    6e6a:	fc 01       	movw	r30, r24
	track->note+=param;
    6e6c:	91 81       	ldd	r25, Z+1	; 0x01
    6e6e:	69 0f       	add	r22, r25
    6e70:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    6e72:	82 81       	ldd	r24, Z+2	; 0x02
    6e74:	0c 94 35 3b 	jmp	0x766a	; 0x766a <SetMixerNote>

00006e78 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    6e78:	fc 01       	movw	r30, r24
	track->note-=param;
    6e7a:	91 81       	ldd	r25, Z+1	; 0x01
    6e7c:	96 1b       	sub	r25, r22
    6e7e:	69 2f       	mov	r22, r25
    6e80:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    6e82:	82 81       	ldd	r24, Z+2	; 0x02
    6e84:	0c 94 35 3b 	jmp	0x766a	; 0x766a <SetMixerNote>

00006e88 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    6e88:	1f 93       	push	r17
    6e8a:	cf 93       	push	r28
    6e8c:	df 93       	push	r29
    6e8e:	ec 01       	movw	r28, r24
    6e90:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    6e92:	8a 81       	ldd	r24, Y+2	; 0x02
    6e94:	0e 94 35 3b 	call	0x766a	; 0x766a <SetMixerNote>
	track->note=param;
    6e98:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6e9a:	88 81       	ld	r24, Y
    6e9c:	87 7f       	andi	r24, 0xF7	; 247
    6e9e:	88 83       	st	Y, r24
}
    6ea0:	df 91       	pop	r29
    6ea2:	cf 91       	pop	r28
    6ea4:	1f 91       	pop	r17
    6ea6:	08 95       	ret

00006ea8 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    6ea8:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    6eaa:	14 96       	adiw	r26, 0x04	; 4
    6eac:	8c 91       	ld	r24, X
    6eae:	14 97       	sbiw	r26, 0x04	; 4
    6eb0:	88 23       	and	r24, r24
    6eb2:	19 f1       	breq	.+70     	; 0x6efa <PatchCommand14+0x52>
    6eb4:	55 96       	adiw	r26, 0x15	; 21
    6eb6:	2d 91       	ld	r18, X+
    6eb8:	3c 91       	ld	r19, X
    6eba:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    6ebc:	66 23       	and	r22, r22
    6ebe:	79 f0       	breq	.+30     	; 0x6ede <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    6ec0:	77 27       	eor	r23, r23
    6ec2:	67 fd       	sbrc	r22, 7
    6ec4:	70 95       	com	r23
    6ec6:	6f 5f       	subi	r22, 0xFF	; 255
    6ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    6eca:	ab 01       	movw	r20, r22
    6ecc:	44 0f       	add	r20, r20
    6ece:	55 1f       	adc	r21, r21
    6ed0:	64 0f       	add	r22, r20
    6ed2:	75 1f       	adc	r23, r21
    6ed4:	26 1b       	sub	r18, r22
    6ed6:	37 0b       	sbc	r19, r23
    6ed8:	09 c0       	rjmp	.+18     	; 0x6eec <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    6eda:	ef 3f       	cpi	r30, 0xFF	; 255
    6edc:	39 f0       	breq	.+14     	; 0x6eec <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    6ede:	23 50       	subi	r18, 0x03	; 3
    6ee0:	31 09       	sbc	r19, r1
    6ee2:	f9 01       	movw	r30, r18
    6ee4:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    6ee6:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    6ee8:	ed 30       	cpi	r30, 0x0D	; 13
    6eea:	b9 f7       	brne	.-18     	; 0x6eda <PatchCommand14+0x32>
    6eec:	56 96       	adiw	r26, 0x16	; 22
    6eee:	3c 93       	st	X, r19
    6ef0:	2e 93       	st	-X, r18
    6ef2:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    6ef4:	81 50       	subi	r24, 0x01	; 1
    6ef6:	14 96       	adiw	r26, 0x04	; 4
    6ef8:	8c 93       	st	X, r24
    6efa:	08 95       	ret

00006efc <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    6efc:	90 93 71 0d 	sts	0x0D71, r25
    6f00:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    6f04:	8f e6       	ldi	r24, 0x6F	; 111
    6f06:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    6f0a:	10 92 ce 0c 	sts	0x0CCE, r1
    6f0e:	eb e0       	ldi	r30, 0x0B	; 11
    6f10:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    6f12:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6f14:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    6f16:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    6f18:	28 e1       	ldi	r18, 0x18	; 24
    6f1a:	df 01       	movw	r26, r30
    6f1c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    6f1e:	8c 93       	st	X, r24
    6f20:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6f22:	9c 93       	st	X, r25
    6f24:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    6f26:	1c 92       	st	X, r1
    6f28:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    6f2a:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    6f2c:	10 82       	st	Z, r1
    6f2e:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    6f30:	2c 93       	st	X, r18
    6f32:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    6f34:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    6f36:	8f 5f       	subi	r24, 0xFF	; 255
    6f38:	77 96       	adiw	r30, 0x17	; 23
    6f3a:	85 30       	cpi	r24, 0x05	; 5
    6f3c:	71 f7       	brne	.-36     	; 0x6f1a <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    6f3e:	08 95       	ret

00006f40 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    6f40:	eb ef       	ldi	r30, 0xFB	; 251
    6f42:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6f44:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6f46:	20 81       	ld	r18, Z
    6f48:	2f 77       	andi	r18, 0x7F	; 127
    6f4a:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6f4c:	33 83       	std	Z+3, r19	; 0x03
    6f4e:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    6f50:	2d e0       	ldi	r18, 0x0D	; 13
    6f52:	ee 36       	cpi	r30, 0x6E	; 110
    6f54:	f2 07       	cpc	r31, r18
    6f56:	b9 f7       	brne	.-18     	; 0x6f46 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    6f58:	01 96       	adiw	r24, 0x01	; 1
    6f5a:	90 93 78 0d 	sts	0x0D78, r25
    6f5e:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    6f62:	90 93 fa 0c 	sts	0x0CFA, r25
    6f66:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    6f6a:	90 93 7a 0d 	sts	0x0D7A, r25
    6f6e:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    6f72:	10 92 75 0d 	sts	0x0D75, r1
    6f76:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    6f7a:	10 92 6f 0d 	sts	0x0D6F, r1
    6f7e:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    6f82:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    6f86:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    6f8a:	81 e0       	ldi	r24, 0x01	; 1
    6f8c:	80 93 ce 0c 	sts	0x0CCE, r24
    6f90:	08 95       	ret

00006f92 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    6f92:	eb ef       	ldi	r30, 0xFB	; 251
    6f94:	fc e0       	ldi	r31, 0x0C	; 12
    6f96:	8a ef       	ldi	r24, 0xFA	; 250
    6f98:	87 87       	std	Z+15, r24	; 0x0f
    6f9a:	86 a3       	std	Z+38, r24	; 0x26
    6f9c:	80 93 38 0d 	sts	0x0D38, r24
    6fa0:	80 93 4f 0d 	sts	0x0D4F, r24
    6fa4:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    6fa8:	10 92 ce 0c 	sts	0x0CCE, r1
    6fac:	08 95       	ret

00006fae <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    6fae:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    6fb0:	ed 91       	ld	r30, X+
    6fb2:	fc 91       	ld	r31, X
    6fb4:	11 97       	sbiw	r26, 0x01	; 1
    6fb6:	9f 01       	movw	r18, r30
    6fb8:	2f 5f       	subi	r18, 0xFF	; 255
    6fba:	3f 4f       	sbci	r19, 0xFF	; 255
    6fbc:	11 96       	adiw	r26, 0x01	; 1
    6fbe:	3c 93       	st	X, r19
    6fc0:	2e 93       	st	-X, r18
    6fc2:	e4 91       	lpm	r30, Z
    6fc4:	e7 fd       	sbrc	r30, 7
    6fc6:	03 c0       	rjmp	.+6      	; 0x6fce <ReadVarLen+0x20>
    6fc8:	8e 2f       	mov	r24, r30
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	08 95       	ret
    {
       value &= 0x7F;
    6fce:	ef 77       	andi	r30, 0x7F	; 127
    6fd0:	8e 2f       	mov	r24, r30
    6fd2:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    6fd4:	96 95       	lsr	r25
    6fd6:	98 2f       	mov	r25, r24
    6fd8:	88 27       	eor	r24, r24
    6fda:	97 95       	ror	r25
    6fdc:	87 95       	ror	r24
    6fde:	2f 5f       	subi	r18, 0xFF	; 255
    6fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe2:	f9 01       	movw	r30, r18
    6fe4:	31 97       	sbiw	r30, 0x01	; 1
    6fe6:	e4 91       	lpm	r30, Z
    6fe8:	4e 2f       	mov	r20, r30
    6fea:	4f 77       	andi	r20, 0x7F	; 127
    6fec:	84 0f       	add	r24, r20
    6fee:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    6ff0:	e7 fd       	sbrc	r30, 7
    6ff2:	f0 cf       	rjmp	.-32     	; 0x6fd4 <ReadVarLen+0x26>
    6ff4:	2d 93       	st	X+, r18
    6ff6:	3c 93       	st	X, r19
    }


    return value;
}
    6ff8:	08 95       	ret

00006ffa <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    6ffa:	ef 92       	push	r14
    6ffc:	ff 92       	push	r15
    6ffe:	0f 93       	push	r16
    7000:	1f 93       	push	r17
    7002:	cf 93       	push	r28
    7004:	df 93       	push	r29
    7006:	1f 92       	push	r1
    7008:	cd b7       	in	r28, 0x3d	; 61
    700a:	de b7       	in	r29, 0x3e	; 62
    700c:	7c 01       	movw	r14, r24
    700e:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7010:	fc 01       	movw	r30, r24
    7012:	80 81       	ld	r24, Z
    7014:	08 2f       	mov	r16, r24
    7016:	00 1f       	adc	r16, r16
    7018:	00 27       	eor	r16, r16
    701a:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    701c:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    701e:	9f ef       	ldi	r25, 0xFF	; 255
    7020:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7022:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7024:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7026:	87 7b       	andi	r24, 0xB7	; 183
    7028:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    702a:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    702c:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    702e:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7030:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7032:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7034:	82 81       	ldd	r24, Z+2	; 0x02
    7036:	83 30       	cpi	r24, 0x03	; 3
    7038:	69 f4       	brne	.+26     	; 0x7054 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    703a:	01 11       	cpse	r16, r1
    703c:	01 c0       	rjmp	.+2      	; 0x7040 <TriggerCommon+0x46>
    703e:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7040:	81 e0       	ldi	r24, 0x01	; 1
    7042:	91 e0       	ldi	r25, 0x01	; 1
    7044:	90 93 e5 0c 	sts	0x0CE5, r25
    7048:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    704c:	81 e0       	ldi	r24, 0x01	; 1
    704e:	80 93 e3 0c 	sts	0x0CE3, r24
    7052:	39 c0       	rjmp	.+114    	; 0x70c6 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    7054:	84 30       	cpi	r24, 0x04	; 4
    7056:	69 f5       	brne	.+90     	; 0x70b2 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7058:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    705c:	80 91 70 0d 	lds	r24, 0x0D70
    7060:	90 91 71 0d 	lds	r25, 0x0D71
    7064:	f9 e0       	ldi	r31, 0x09	; 9
    7066:	6f 9f       	mul	r22, r31
    7068:	80 0d       	add	r24, r0
    706a:	91 1d       	adc	r25, r1
    706c:	11 24       	eor	r1, r1
    706e:	fc 01       	movw	r30, r24
    7070:	31 96       	adiw	r30, 0x01	; 1
    7072:	a5 91       	lpm	r26, Z+
    7074:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    7076:	b0 93 ed 0c 	sts	0x0CED, r27
    707a:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    707e:	ac 01       	movw	r20, r24
    7080:	49 5f       	subi	r20, 0xF9	; 249
    7082:	5f 4f       	sbci	r21, 0xFF	; 255
    7084:	fa 01       	movw	r30, r20
    7086:	65 91       	lpm	r22, Z+
    7088:	74 91       	lpm	r23, Z
    708a:	05 96       	adiw	r24, 0x05	; 5
    708c:	fc 01       	movw	r30, r24
    708e:	85 91       	lpm	r24, Z+
    7090:	94 91       	lpm	r25, Z
    7092:	68 1b       	sub	r22, r24
    7094:	79 0b       	sbc	r23, r25
    7096:	70 93 ef 0c 	sts	0x0CEF, r23
    709a:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    709e:	fa 01       	movw	r30, r20
    70a0:	85 91       	lpm	r24, Z+
    70a2:	94 91       	lpm	r25, Z
    70a4:	a8 0f       	add	r26, r24
    70a6:	b9 1f       	adc	r27, r25
    70a8:	b0 93 f1 0c 	sts	0x0CF1, r27
    70ac:	a0 93 f0 0c 	sts	0x0CF0, r26
    70b0:	05 c0       	rjmp	.+10     	; 0x70bc <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    70b2:	60 e0       	ldi	r22, 0x00	; 0
    70b4:	29 83       	std	Y+1, r18	; 0x01
    70b6:	0e 94 4c 3b 	call	0x7698	; 0x7698 <SetMixerWave>
			SetMixerNote(track->channel,note);
    70ba:	29 81       	ldd	r18, Y+1	; 0x01
    70bc:	62 2f       	mov	r22, r18
    70be:	f7 01       	movw	r30, r14
    70c0:	82 81       	ldd	r24, Z+2	; 0x02
    70c2:	0e 94 35 3b 	call	0x766a	; 0x766a <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    70c6:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    70c8:	00 23       	and	r16, r16
    70ca:	11 f0       	breq	.+4      	; 0x70d0 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    70cc:	11 8b       	std	Z+17, r17	; 0x11
    70ce:	01 c0       	rjmp	.+2      	; 0x70d2 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    70d0:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    70d2:	e0 91 70 0d 	lds	r30, 0x0D70
    70d6:	f0 91 71 0d 	lds	r31, 0x0D71
    70da:	39 e0       	ldi	r19, 0x09	; 9
    70dc:	13 9f       	mul	r17, r19
    70de:	e0 0d       	add	r30, r0
    70e0:	f1 1d       	adc	r31, r1
    70e2:	11 24       	eor	r1, r1
    70e4:	33 96       	adiw	r30, 0x03	; 3
    70e6:	85 91       	lpm	r24, Z+
    70e8:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    70ea:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    70ec:	00 97       	sbiw	r24, 0x00	; 0
    70ee:	19 f4       	brne	.+6      	; 0x70f6 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    70f0:	16 8a       	std	Z+22, r1	; 0x16
    70f2:	15 8a       	std	Z+21, r1	; 0x15
    70f4:	08 c0       	rjmp	.+16     	; 0x7106 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    70f6:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    70f8:	fc 01       	movw	r30, r24
    70fa:	24 91       	lpm	r18, Z
    70fc:	f7 01       	movw	r30, r14
    70fe:	22 8b       	std	Z+18, r18	; 0x12
    7100:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7102:	96 8b       	std	Z+22, r25	; 0x16
    7104:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7106:	0f 90       	pop	r0
    7108:	df 91       	pop	r29
    710a:	cf 91       	pop	r28
    710c:	1f 91       	pop	r17
    710e:	0f 91       	pop	r16
    7110:	ff 90       	pop	r15
    7112:	ef 90       	pop	r14
    7114:	08 95       	ret

00007116 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7116:	cf 93       	push	r28
    7118:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    711a:	e0 91 70 0d 	lds	r30, 0x0D70
    711e:	f0 91 71 0d 	lds	r31, 0x0D71
    7122:	99 e0       	ldi	r25, 0x09	; 9
    7124:	89 9f       	mul	r24, r25
    7126:	e0 0d       	add	r30, r0
    7128:	f1 1d       	adc	r31, r1
    712a:	11 24       	eor	r1, r1
    712c:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    712e:	e1 30       	cpi	r30, 0x01	; 1
    7130:	e9 f0       	breq	.+58     	; 0x716c <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7132:	e2 30       	cpi	r30, 0x02	; 2
    7134:	e9 f0       	breq	.+58     	; 0x7170 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7136:	20 91 12 0d 	lds	r18, 0x0D12
    713a:	27 ff       	sbrs	r18, 7
    713c:	1d c0       	rjmp	.+58     	; 0x7178 <TriggerFx+0x62>
    713e:	20 91 23 0d 	lds	r18, 0x0D23
    7142:	28 13       	cpse	r18, r24
    7144:	02 c0       	rjmp	.+4      	; 0x714a <TriggerFx+0x34>
    7146:	41 11       	cpse	r20, r1
    7148:	17 c0       	rjmp	.+46     	; 0x7178 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    714a:	20 91 29 0d 	lds	r18, 0x0D29
    714e:	27 ff       	sbrs	r18, 7
    7150:	11 c0       	rjmp	.+34     	; 0x7174 <TriggerFx+0x5e>
    7152:	20 91 3a 0d 	lds	r18, 0x0D3A
    7156:	28 13       	cpse	r18, r24
    7158:	02 c0       	rjmp	.+4      	; 0x715e <TriggerFx+0x48>
    715a:	41 11       	cpse	r20, r1
    715c:	0b c0       	rjmp	.+22     	; 0x7174 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    715e:	20 91 26 0d 	lds	r18, 0x0D26
    7162:	90 91 3d 0d 	lds	r25, 0x0D3D
    7166:	92 17       	cp	r25, r18
    7168:	28 f4       	brcc	.+10     	; 0x7174 <TriggerFx+0x5e>
    716a:	06 c0       	rjmp	.+12     	; 0x7178 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    716c:	c3 e0       	ldi	r28, 0x03	; 3
    716e:	05 c0       	rjmp	.+10     	; 0x717a <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7170:	c4 e0       	ldi	r28, 0x04	; 4
    7172:	03 c0       	rjmp	.+6      	; 0x717a <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7174:	c2 e0       	ldi	r28, 0x02	; 2
    7176:	01 c0       	rjmp	.+2      	; 0x717a <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7178:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    717a:	97 e1       	ldi	r25, 0x17	; 23
    717c:	c9 9f       	mul	r28, r25
    717e:	e0 01       	movw	r28, r0
    7180:	11 24       	eor	r1, r1
    7182:	c5 50       	subi	r28, 0x05	; 5
    7184:	d3 4f       	sbci	r29, 0xF3	; 243
    7186:	90 e8       	ldi	r25, 0x80	; 128
    7188:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    718a:	1e 8a       	std	Y+22, r1	; 0x16
    718c:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    718e:	20 e5       	ldi	r18, 0x50	; 80
    7190:	46 2f       	mov	r20, r22
    7192:	68 2f       	mov	r22, r24
    7194:	ce 01       	movw	r24, r28
    7196:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    719a:	88 81       	ld	r24, Y
    719c:	80 62       	ori	r24, 0x20	; 32
    719e:	88 83       	st	Y, r24
}
    71a0:	df 91       	pop	r29
    71a2:	cf 91       	pop	r28
    71a4:	08 95       	ret

000071a6 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    71a6:	cf 93       	push	r28
    71a8:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    71aa:	a8 2f       	mov	r26, r24
    71ac:	b0 e0       	ldi	r27, 0x00	; 0
    71ae:	97 e1       	ldi	r25, 0x17	; 23
    71b0:	89 9f       	mul	r24, r25
    71b2:	f0 01       	movw	r30, r0
    71b4:	11 24       	eor	r1, r1
    71b6:	e5 50       	subi	r30, 0x05	; 5
    71b8:	f3 4f       	sbci	r31, 0xF3	; 243
    71ba:	80 81       	ld	r24, Z
    71bc:	85 ff       	sbrs	r24, 5
    71be:	02 c0       	rjmp	.+4      	; 0x71c4 <TriggerNote+0x1e>
    71c0:	87 fd       	sbrc	r24, 7
    71c2:	2e c0       	rjmp	.+92     	; 0x7220 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    71c4:	21 11       	cpse	r18, r1
    71c6:	18 c0       	rjmp	.+48     	; 0x71f8 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    71c8:	97 e1       	ldi	r25, 0x17	; 23
    71ca:	9a 9f       	mul	r25, r26
    71cc:	f0 01       	movw	r30, r0
    71ce:	9b 9f       	mul	r25, r27
    71d0:	f0 0d       	add	r31, r0
    71d2:	11 24       	eor	r1, r1
    71d4:	e5 50       	subi	r30, 0x05	; 5
    71d6:	f3 4f       	sbci	r31, 0xF3	; 243
    71d8:	97 85       	ldd	r25, Z+15	; 0x0f
    71da:	91 11       	cpse	r25, r1
    71dc:	02 c0       	rjmp	.+4      	; 0x71e2 <TriggerNote+0x3c>
    71de:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    71e0:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    71e2:	97 e1       	ldi	r25, 0x17	; 23
    71e4:	9a 9f       	mul	r25, r26
    71e6:	f0 01       	movw	r30, r0
    71e8:	9b 9f       	mul	r25, r27
    71ea:	f0 0d       	add	r31, r0
    71ec:	11 24       	eor	r1, r1
    71ee:	e5 50       	subi	r30, 0x05	; 5
    71f0:	f3 4f       	sbci	r31, 0xF3	; 243
    71f2:	8f 7b       	andi	r24, 0xBF	; 191
    71f4:	80 83       	st	Z, r24
    71f6:	14 c0       	rjmp	.+40     	; 0x7220 <TriggerNote+0x7a>
    71f8:	82 2f       	mov	r24, r18
    71fa:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    71fc:	97 e1       	ldi	r25, 0x17	; 23
    71fe:	9a 9f       	mul	r25, r26
    7200:	e0 01       	movw	r28, r0
    7202:	9b 9f       	mul	r25, r27
    7204:	d0 0d       	add	r29, r0
    7206:	11 24       	eor	r1, r1
    7208:	c5 50       	subi	r28, 0x05	; 5
    720a:	d3 4f       	sbci	r29, 0xF3	; 243
    720c:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    720e:	1e 8a       	std	Y+22, r1	; 0x16
    7210:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7212:	48 2f       	mov	r20, r24
    7214:	ce 01       	movw	r24, r28
    7216:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    721a:	88 81       	ld	r24, Y
    721c:	80 62       	ori	r24, 0x20	; 32
    721e:	88 83       	st	Y, r24
		}

	}
}
    7220:	df 91       	pop	r29
    7222:	cf 91       	pop	r28
    7224:	08 95       	ret

00007226 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7226:	6f 92       	push	r6
    7228:	7f 92       	push	r7
    722a:	8f 92       	push	r8
    722c:	9f 92       	push	r9
    722e:	af 92       	push	r10
    7230:	bf 92       	push	r11
    7232:	cf 92       	push	r12
    7234:	df 92       	push	r13
    7236:	ef 92       	push	r14
    7238:	ff 92       	push	r15
    723a:	0f 93       	push	r16
    723c:	1f 93       	push	r17
    723e:	cf 93       	push	r28
    7240:	df 93       	push	r29
    7242:	cb ef       	ldi	r28, 0xFB	; 251
    7244:	dc e0       	ldi	r29, 0x0C	; 12
    7246:	00 ed       	ldi	r16, 0xD0	; 208
    7248:	1c e0       	ldi	r17, 0x0C	; 12
    724a:	d8 01       	movw	r26, r16
    724c:	9e 01       	movw	r18, r28
    724e:	40 e0       	ldi	r20, 0x00	; 0
    7250:	50 e0       	ldi	r21, 0x00	; 0
    7252:	ca 01       	movw	r24, r20
    7254:	85 50       	subi	r24, 0x05	; 5
    7256:	93 4f       	sbci	r25, 0xF3	; 243
    7258:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    725a:	fc 01       	movw	r30, r24
    725c:	87 85       	ldd	r24, Z+15	; 0x0f
    725e:	88 23       	and	r24, r24
    7260:	91 f0       	breq	.+36     	; 0x7286 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7262:	66 85       	ldd	r22, Z+14	; 0x0e
    7264:	99 27       	eor	r25, r25
    7266:	87 fd       	sbrc	r24, 7
    7268:	90 95       	com	r25
    726a:	86 0f       	add	r24, r22
    726c:	91 1d       	adc	r25, r1
    726e:	8f 3f       	cpi	r24, 0xFF	; 255
    7270:	91 05       	cpc	r25, r1
    7272:	19 f0       	breq	.+6      	; 0x727a <ProcessMusic+0x54>
    7274:	14 f0       	brlt	.+4      	; 0x727a <ProcessMusic+0x54>
    7276:	8f ef       	ldi	r24, 0xFF	; 255
    7278:	90 e0       	ldi	r25, 0x00	; 0
    727a:	97 ff       	sbrs	r25, 7
    727c:	02 c0       	rjmp	.+4      	; 0x7282 <ProcessMusic+0x5c>
    727e:	80 e0       	ldi	r24, 0x00	; 0
    7280:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7282:	f6 01       	movw	r30, r12
    7284:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7286:	f9 01       	movw	r30, r18
    7288:	f0 80       	ld	r15, Z
    728a:	f3 fe       	sbrs	r15, 3
    728c:	2a c0       	rjmp	.+84     	; 0x72e2 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    728e:	65 81       	ldd	r22, Z+5	; 0x05
    7290:	76 81       	ldd	r23, Z+6	; 0x06
    7292:	11 96       	adiw	r26, 0x01	; 1
    7294:	8d 91       	ld	r24, X+
    7296:	9c 91       	ld	r25, X
    7298:	12 97       	sbiw	r26, 0x02	; 2
    729a:	86 0f       	add	r24, r22
    729c:	97 1f       	adc	r25, r23
    729e:	12 96       	adiw	r26, 0x02	; 2
    72a0:	9c 93       	st	X, r25
    72a2:	8e 93       	st	-X, r24
    72a4:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    72a6:	f6 01       	movw	r30, r12
    72a8:	e7 80       	ldd	r14, Z+7	; 0x07
    72aa:	ee 2d       	mov	r30, r14
    72ac:	f0 e0       	ldi	r31, 0x00	; 0
    72ae:	ee 0f       	add	r30, r30
    72b0:	ff 1f       	adc	r31, r31
    72b2:	e8 5f       	subi	r30, 0xF8	; 248
    72b4:	f8 48       	sbci	r31, 0x88	; 136
    72b6:	c5 90       	lpm	r12, Z+
    72b8:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    72ba:	16 16       	cp	r1, r22
    72bc:	17 06       	cpc	r1, r23
    72be:	24 f4       	brge	.+8      	; 0x72c8 <ProcessMusic+0xa2>
    72c0:	8c 15       	cp	r24, r12
    72c2:	9d 05       	cpc	r25, r13
    72c4:	30 f4       	brcc	.+12     	; 0x72d2 <ProcessMusic+0xac>
    72c6:	0d c0       	rjmp	.+26     	; 0x72e2 <ProcessMusic+0xbc>
    72c8:	67 2b       	or	r22, r23
    72ca:	59 f0       	breq	.+22     	; 0x72e2 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    72cc:	c8 16       	cp	r12, r24
    72ce:	d9 06       	cpc	r13, r25
    72d0:	40 f0       	brcs	.+16     	; 0x72e2 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    72d2:	12 96       	adiw	r26, 0x02	; 2
    72d4:	dc 92       	st	X, r13
    72d6:	ce 92       	st	-X, r12
    72d8:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    72da:	8f 2d       	mov	r24, r15
    72dc:	87 7f       	andi	r24, 0xF7	; 247
    72de:	f9 01       	movw	r30, r18
    72e0:	80 83       	st	Z, r24
    72e2:	49 5e       	subi	r20, 0xE9	; 233
    72e4:	5f 4f       	sbci	r21, 0xFF	; 255
    72e6:	29 5e       	subi	r18, 0xE9	; 233
    72e8:	3f 4f       	sbci	r19, 0xFF	; 255
    72ea:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    72ec:	43 37       	cpi	r20, 0x73	; 115
    72ee:	51 05       	cpc	r21, r1
    72f0:	09 f0       	breq	.+2      	; 0x72f4 <ProcessMusic+0xce>
    72f2:	af cf       	rjmp	.-162    	; 0x7252 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    72f4:	80 91 ce 0c 	lds	r24, 0x0CCE
    72f8:	88 23       	and	r24, r24
    72fa:	09 f4       	brne	.+2      	; 0x72fe <ProcessMusic+0xd8>
    72fc:	cc c0       	rjmp	.+408    	; 0x7496 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    72fe:	57 e1       	ldi	r21, 0x17	; 23
    7300:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7302:	80 91 6e 0d 	lds	r24, 0x0D6E
    7306:	90 91 6f 0d 	lds	r25, 0x0D6F
    730a:	20 91 74 0d 	lds	r18, 0x0D74
    730e:	30 91 75 0d 	lds	r19, 0x0D75
    7312:	82 17       	cp	r24, r18
    7314:	93 07       	cpc	r25, r19
    7316:	09 f0       	breq	.+2      	; 0x731a <ProcessMusic+0xf4>
    7318:	b9 c0       	rjmp	.+370    	; 0x748c <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    731a:	20 91 77 0d 	lds	r18, 0x0D77
    731e:	30 91 78 0d 	lds	r19, 0x0D78
    7322:	b9 01       	movw	r22, r18
    7324:	6f 5f       	subi	r22, 0xFF	; 255
    7326:	7f 4f       	sbci	r23, 0xFF	; 255
    7328:	70 93 78 0d 	sts	0x0D78, r23
    732c:	60 93 77 0d 	sts	0x0D77, r22
    7330:	f9 01       	movw	r30, r18
    7332:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7334:	4f 3f       	cpi	r20, 0xFF	; 255
    7336:	79 f5       	brne	.+94     	; 0x7396 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7338:	a9 01       	movw	r20, r18
    733a:	4e 5f       	subi	r20, 0xFE	; 254
    733c:	5f 4f       	sbci	r21, 0xFF	; 255
    733e:	50 93 78 0d 	sts	0x0D78, r21
    7342:	40 93 77 0d 	sts	0x0D77, r20
    7346:	fb 01       	movw	r30, r22
    7348:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    734a:	6f 32       	cpi	r22, 0x2F	; 47
    734c:	19 f4       	brne	.+6      	; 0x7354 <ProcessMusic+0x12e>
						playSong=false;
    734e:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    7352:	9c c0       	rjmp	.+312    	; 0x748c <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7354:	66 30       	cpi	r22, 0x06	; 6
    7356:	09 f0       	breq	.+2      	; 0x735a <ProcessMusic+0x134>
    7358:	8c c0       	rjmp	.+280    	; 0x7472 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    735a:	fa 01       	movw	r30, r20
    735c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    735e:	c9 01       	movw	r24, r18
    7360:	04 96       	adiw	r24, 0x04	; 4
    7362:	90 93 78 0d 	sts	0x0D78, r25
    7366:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    736a:	f9 01       	movw	r30, r18
    736c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    736e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7370:	e3 35       	cpi	r30, 0x53	; 83
    7372:	29 f4       	brne	.+10     	; 0x737e <ProcessMusic+0x158>
							loopStart=songPos;
    7374:	90 93 7a 0d 	sts	0x0D7A, r25
    7378:	80 93 79 0d 	sts	0x0D79, r24
    737c:	7a c0       	rjmp	.+244    	; 0x7472 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    737e:	e5 34       	cpi	r30, 0x45	; 69
    7380:	09 f0       	breq	.+2      	; 0x7384 <ProcessMusic+0x15e>
    7382:	77 c0       	rjmp	.+238    	; 0x7472 <ProcessMusic+0x24c>
							songPos=loopStart;
    7384:	80 91 79 0d 	lds	r24, 0x0D79
    7388:	90 91 7a 0d 	lds	r25, 0x0D7A
    738c:	90 93 78 0d 	sts	0x0D78, r25
    7390:	80 93 77 0d 	sts	0x0D77, r24
    7394:	6e c0       	rjmp	.+220    	; 0x7472 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7396:	47 fd       	sbrc	r20, 7
    7398:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    739c:	90 91 72 0d 	lds	r25, 0x0D72
    73a0:	89 2f       	mov	r24, r25
    73a2:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    73a4:	47 ff       	sbrs	r20, 7
    73a6:	08 c0       	rjmp	.+16     	; 0x73b8 <ProcessMusic+0x192>
    73a8:	2e 5f       	subi	r18, 0xFE	; 254
    73aa:	3f 4f       	sbci	r19, 0xFF	; 255
    73ac:	30 93 78 0d 	sts	0x0D78, r19
    73b0:	20 93 77 0d 	sts	0x0D77, r18
    73b4:	fb 01       	movw	r30, r22
    73b6:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    73b8:	90 7f       	andi	r25, 0xF0	; 240
    73ba:	90 3b       	cpi	r25, 0xB0	; 176
    73bc:	e1 f0       	breq	.+56     	; 0x73f6 <ProcessMusic+0x1d0>
    73be:	90 3c       	cpi	r25, 0xC0	; 192
    73c0:	09 f4       	brne	.+2      	; 0x73c4 <ProcessMusic+0x19e>
    73c2:	51 c0       	rjmp	.+162    	; 0x7466 <ProcessMusic+0x240>
    73c4:	90 39       	cpi	r25, 0x90	; 144
    73c6:	09 f0       	breq	.+2      	; 0x73ca <ProcessMusic+0x1a4>
    73c8:	54 c0       	rjmp	.+168    	; 0x7472 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    73ca:	e0 91 77 0d 	lds	r30, 0x0D77
    73ce:	f0 91 78 0d 	lds	r31, 0x0D78
    73d2:	9f 01       	movw	r18, r30
    73d4:	2f 5f       	subi	r18, 0xFF	; 255
    73d6:	3f 4f       	sbci	r19, 0xFF	; 255
    73d8:	30 93 78 0d 	sts	0x0D78, r19
    73dc:	20 93 77 0d 	sts	0x0D77, r18
    73e0:	24 91       	lpm	r18, Z
    73e2:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    73e4:	f8 9e       	mul	r15, r24
    73e6:	f0 01       	movw	r30, r0
    73e8:	11 24       	eor	r1, r1
    73ea:	e5 50       	subi	r30, 0x05	; 5
    73ec:	f3 4f       	sbci	r31, 0xF3	; 243
    73ee:	60 89       	ldd	r22, Z+16	; 0x10
    73f0:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <TriggerNote>
    73f4:	3e c0       	rjmp	.+124    	; 0x7472 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    73f6:	e0 91 77 0d 	lds	r30, 0x0D77
    73fa:	f0 91 78 0d 	lds	r31, 0x0D78
    73fe:	9f 01       	movw	r18, r30
    7400:	2f 5f       	subi	r18, 0xFF	; 255
    7402:	3f 4f       	sbci	r19, 0xFF	; 255
    7404:	30 93 78 0d 	sts	0x0D78, r19
    7408:	20 93 77 0d 	sts	0x0D77, r18
    740c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    740e:	47 30       	cpi	r20, 0x07	; 7
    7410:	49 f4       	brne	.+18     	; 0x7424 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7412:	f8 9e       	mul	r15, r24
    7414:	d0 01       	movw	r26, r0
    7416:	11 24       	eor	r1, r1
    7418:	a5 50       	subi	r26, 0x05	; 5
    741a:	b3 4f       	sbci	r27, 0xF3	; 243
    741c:	ee 0f       	add	r30, r30
    741e:	1c 96       	adiw	r26, 0x0c	; 12
    7420:	ec 93       	st	X, r30
    7422:	27 c0       	rjmp	.+78     	; 0x7472 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7424:	4b 30       	cpi	r20, 0x0B	; 11
    7426:	49 f4       	brne	.+18     	; 0x743a <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7428:	f8 9e       	mul	r15, r24
    742a:	d0 01       	movw	r26, r0
    742c:	11 24       	eor	r1, r1
    742e:	a5 50       	subi	r26, 0x05	; 5
    7430:	b3 4f       	sbci	r27, 0xF3	; 243
    7432:	ee 0f       	add	r30, r30
    7434:	13 96       	adiw	r26, 0x03	; 3
    7436:	ec 93       	st	X, r30
    7438:	1c c0       	rjmp	.+56     	; 0x7472 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    743a:	4c 35       	cpi	r20, 0x5C	; 92
    743c:	49 f4       	brne	.+18     	; 0x7450 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    743e:	f8 9e       	mul	r15, r24
    7440:	d0 01       	movw	r26, r0
    7442:	11 24       	eor	r1, r1
    7444:	a5 50       	subi	r26, 0x05	; 5
    7446:	b3 4f       	sbci	r27, 0xF3	; 243
    7448:	ee 0f       	add	r30, r30
    744a:	1a 96       	adiw	r26, 0x0a	; 10
    744c:	ec 93       	st	X, r30
    744e:	11 c0       	rjmp	.+34     	; 0x7472 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7450:	44 36       	cpi	r20, 0x64	; 100
    7452:	79 f4       	brne	.+30     	; 0x7472 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7454:	f8 9e       	mul	r15, r24
    7456:	d0 01       	movw	r26, r0
    7458:	11 24       	eor	r1, r1
    745a:	a5 50       	subi	r26, 0x05	; 5
    745c:	b3 4f       	sbci	r27, 0xF3	; 243
    745e:	ee 0f       	add	r30, r30
    7460:	1b 96       	adiw	r26, 0x0b	; 11
    7462:	ec 93       	st	X, r30
    7464:	06 c0       	rjmp	.+12     	; 0x7472 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7466:	f8 9e       	mul	r15, r24
    7468:	f0 01       	movw	r30, r0
    746a:	11 24       	eor	r1, r1
    746c:	e5 50       	subi	r30, 0x05	; 5
    746e:	f3 4f       	sbci	r31, 0xF3	; 243
    7470:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7472:	87 e7       	ldi	r24, 0x77	; 119
    7474:	9d e0       	ldi	r25, 0x0D	; 13
    7476:	0e 94 d7 37 	call	0x6fae	; 0x6fae <ReadVarLen>
    747a:	90 93 75 0d 	sts	0x0D75, r25
    747e:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    7482:	10 92 6f 0d 	sts	0x0D6F, r1
    7486:	10 92 6e 0d 	sts	0x0D6E, r1
    748a:	3b cf       	rjmp	.-394    	; 0x7302 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    748c:	01 96       	adiw	r24, 0x01	; 1
    748e:	90 93 6f 0d 	sts	0x0D6F, r25
    7492:	80 93 6e 0d 	sts	0x0D6E, r24
    7496:	94 e0       	ldi	r25, 0x04	; 4
    7498:	a9 2e       	mov	r10, r25
    749a:	9d e0       	ldi	r25, 0x0D	; 13
    749c:	b9 2e       	mov	r11, r25
    749e:	2e e0       	ldi	r18, 0x0E	; 14
    74a0:	c2 2e       	mov	r12, r18
    74a2:	2d e0       	ldi	r18, 0x0D	; 13
    74a4:	d2 2e       	mov	r13, r18
    74a6:	3f e0       	ldi	r19, 0x0F	; 15
    74a8:	e3 2e       	mov	r14, r19
    74aa:	3d e0       	ldi	r19, 0x0D	; 13
    74ac:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    74ae:	66 24       	eor	r6, r6
    74b0:	6a 94       	dec	r6
    74b2:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    74b4:	88 81       	ld	r24, Y
    74b6:	85 ff       	sbrs	r24, 5
    74b8:	42 c0       	rjmp	.+132    	; 0x753e <ProcessMusic+0x318>
    74ba:	2d 89       	ldd	r18, Y+21	; 0x15
    74bc:	3e 89       	ldd	r19, Y+22	; 0x16
    74be:	23 2b       	or	r18, r19
    74c0:	09 f4       	brne	.+2      	; 0x74c4 <ProcessMusic+0x29e>
    74c2:	3d c0       	rjmp	.+122    	; 0x753e <ProcessMusic+0x318>
    74c4:	86 fd       	sbrc	r24, 6
    74c6:	3b c0       	rjmp	.+118    	; 0x753e <ProcessMusic+0x318>
    74c8:	47 01       	movw	r8, r14
    74ca:	f2 e0       	ldi	r31, 0x02	; 2
    74cc:	8f 1a       	sub	r8, r31
    74ce:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    74d0:	d6 01       	movw	r26, r12
    74d2:	9c 91       	ld	r25, X
    74d4:	f4 01       	movw	r30, r8
    74d6:	80 81       	ld	r24, Z
    74d8:	98 13       	cpse	r25, r24
    74da:	2e c0       	rjmp	.+92     	; 0x7538 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    74dc:	ed 89       	ldd	r30, Y+21	; 0x15
    74de:	fe 89       	ldd	r31, Y+22	; 0x16
    74e0:	bf 01       	movw	r22, r30
    74e2:	6f 5f       	subi	r22, 0xFF	; 255
    74e4:	7f 4f       	sbci	r23, 0xFF	; 255
    74e6:	7e 8b       	std	Y+22, r23	; 0x16
    74e8:	6d 8b       	std	Y+21, r22	; 0x15
    74ea:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    74ec:	8f 3f       	cpi	r24, 0xFF	; 255
    74ee:	31 f4       	brne	.+12     	; 0x74fc <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    74f0:	88 81       	ld	r24, Y
    74f2:	8f 77       	andi	r24, 0x7F	; 127
    74f4:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    74f6:	1e 8a       	std	Y+22, r1	; 0x16
    74f8:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    74fa:	1e c0       	rjmp	.+60     	; 0x7538 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    74fc:	9f 01       	movw	r18, r30
    74fe:	2e 5f       	subi	r18, 0xFE	; 254
    7500:	3f 4f       	sbci	r19, 0xFF	; 255
    7502:	3e 8b       	std	Y+22, r19	; 0x16
    7504:	2d 8b       	std	Y+21, r18	; 0x15
    7506:	fb 01       	movw	r30, r22
    7508:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    750a:	e8 2f       	mov	r30, r24
    750c:	f0 e0       	ldi	r31, 0x00	; 0
    750e:	ee 0f       	add	r30, r30
    7510:	ff 1f       	adc	r31, r31
    7512:	ee 52       	subi	r30, 0x2E	; 46
    7514:	ff 4f       	sbci	r31, 0xFF	; 255
    7516:	25 91       	lpm	r18, Z+
    7518:	34 91       	lpm	r19, Z
    751a:	ce 01       	movw	r24, r28
    751c:	f9 01       	movw	r30, r18
    751e:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7520:	ed 89       	ldd	r30, Y+21	; 0x15
    7522:	fe 89       	ldd	r31, Y+22	; 0x16
    7524:	cf 01       	movw	r24, r30
    7526:	01 96       	adiw	r24, 0x01	; 1
    7528:	9e 8b       	std	Y+22, r25	; 0x16
    752a:	8d 8b       	std	Y+21, r24	; 0x15
    752c:	e4 91       	lpm	r30, Z
    752e:	d4 01       	movw	r26, r8
    7530:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7532:	f6 01       	movw	r30, r12
    7534:	10 82       	st	Z, r1
    7536:	cc cf       	rjmp	.-104    	; 0x74d0 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7538:	9f 5f       	subi	r25, 0xFF	; 255
    753a:	d6 01       	movw	r26, r12
    753c:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    753e:	98 81       	ld	r25, Y
    7540:	95 ff       	sbrs	r25, 5
    7542:	6c c0       	rjmp	.+216    	; 0x761c <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7544:	f7 01       	movw	r30, r14
    7546:	80 81       	ld	r24, Z
    7548:	8f 3f       	cpi	r24, 0xFF	; 255
    754a:	11 f0       	breq	.+4      	; 0x7550 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    754c:	8f 5f       	subi	r24, 0xFF	; 255
    754e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7550:	97 fd       	sbrc	r25, 7
    7552:	04 c0       	rjmp	.+8      	; 0x755c <ProcessMusic+0x336>
    7554:	f7 01       	movw	r30, r14
    7556:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7558:	90 81       	ld	r25, Z
    755a:	01 c0       	rjmp	.+2      	; 0x755e <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    755c:	9f ef       	ldi	r25, 0xFF	; 255
    755e:	f7 01       	movw	r30, r14
    7560:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7562:	80 81       	ld	r24, Z
    7564:	88 23       	and	r24, r24
    7566:	09 f4       	brne	.+2      	; 0x756a <ProcessMusic+0x344>
    7568:	4e c0       	rjmp	.+156    	; 0x7606 <ProcessMusic+0x3e0>
    756a:	31 96       	adiw	r30, 0x01	; 1
    756c:	50 81       	ld	r21, Z
    756e:	55 23       	and	r21, r21
    7570:	09 f4       	brne	.+2      	; 0x7574 <ProcessMusic+0x34e>
    7572:	49 c0       	rjmp	.+146    	; 0x7606 <ProcessMusic+0x3e0>
    7574:	99 23       	and	r25, r25
    7576:	09 f4       	brne	.+2      	; 0x757a <ProcessMusic+0x354>
    7578:	46 c0       	rjmp	.+140    	; 0x7606 <ProcessMusic+0x3e0>
    757a:	40 91 73 0d 	lds	r20, 0x0D73
    757e:	44 23       	and	r20, r20
    7580:	09 f4       	brne	.+2      	; 0x7584 <ProcessMusic+0x35e>
    7582:	41 c0       	rjmp	.+130    	; 0x7606 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7584:	89 9f       	mul	r24, r25
    7586:	c0 01       	movw	r24, r0
    7588:	11 24       	eor	r1, r1
    758a:	93 95       	inc	r25
				uVol>>=8;
    758c:	89 2f       	mov	r24, r25
    758e:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7590:	58 9f       	mul	r21, r24
    7592:	90 01       	movw	r18, r0
    7594:	59 9f       	mul	r21, r25
    7596:	30 0d       	add	r19, r0
    7598:	11 24       	eor	r1, r1
    759a:	c9 01       	movw	r24, r18
    759c:	93 95       	inc	r25
				uVol>>=8;
    759e:	89 2f       	mov	r24, r25
    75a0:	99 27       	eor	r25, r25
    75a2:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    75a4:	50 81       	ld	r21, Z
    75a6:	58 9f       	mul	r21, r24
    75a8:	90 01       	movw	r18, r0
    75aa:	59 9f       	mul	r21, r25
    75ac:	30 0d       	add	r19, r0
    75ae:	11 24       	eor	r1, r1
    75b0:	33 95       	inc	r19
					uVol>>=8;
    75b2:	23 2f       	mov	r18, r19
    75b4:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    75b6:	42 9f       	mul	r20, r18
    75b8:	c0 01       	movw	r24, r0
    75ba:	43 9f       	mul	r20, r19
    75bc:	90 0d       	add	r25, r0
    75be:	11 24       	eor	r1, r1
    75c0:	93 95       	inc	r25
				uVol>>=8;
    75c2:	89 2f       	mov	r24, r25
    75c4:	99 27       	eor	r25, r25
    75c6:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    75c8:	20 81       	ld	r18, Z
    75ca:	22 23       	and	r18, r18
    75cc:	f1 f0       	breq	.+60     	; 0x760a <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    75ce:	d5 01       	movw	r26, r10
    75d0:	ec 91       	ld	r30, X
    75d2:	f0 e0       	ldi	r31, 0x00	; 0
    75d4:	e0 50       	subi	r30, 0x00	; 0
    75d6:	f7 48       	sbci	r31, 0x87	; 135
    75d8:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    75da:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    75dc:	2e 9f       	mul	r18, r30
    75de:	f0 01       	movw	r30, r0
    75e0:	11 24       	eor	r1, r1
    75e2:	f3 95       	inc	r31
					tVol>>=8;
    75e4:	ef 2f       	mov	r30, r31
    75e6:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    75e8:	a3 01       	movw	r20, r6
    75ea:	4e 1b       	sub	r20, r30
    75ec:	5f 0b       	sbc	r21, r31
    75ee:	48 9f       	mul	r20, r24
    75f0:	90 01       	movw	r18, r0
    75f2:	49 9f       	mul	r20, r25
    75f4:	30 0d       	add	r19, r0
    75f6:	58 9f       	mul	r21, r24
    75f8:	30 0d       	add	r19, r0
    75fa:	11 24       	eor	r1, r1
    75fc:	c9 01       	movw	r24, r18
    75fe:	93 95       	inc	r25
					uVol>>=8;
    7600:	89 2f       	mov	r24, r25
    7602:	99 27       	eor	r25, r25
    7604:	02 c0       	rjmp	.+4      	; 0x760a <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7606:	80 e0       	ldi	r24, 0x00	; 0
    7608:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    760a:	f5 01       	movw	r30, r10
    760c:	30 81       	ld	r19, Z
    760e:	f7 01       	movw	r30, r14
    7610:	39 97       	sbiw	r30, 0x09	; 9
    7612:	20 81       	ld	r18, Z
    7614:	23 0f       	add	r18, r19
    7616:	d5 01       	movw	r26, r10
    7618:	2c 93       	st	X, r18
    761a:	02 c0       	rjmp	.+4      	; 0x7620 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    761c:	80 e0       	ldi	r24, 0x00	; 0
    761e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7620:	f8 01       	movw	r30, r16
    7622:	80 83       	st	Z, r24
    7624:	67 96       	adiw	r28, 0x17	; 23
    7626:	0a 5f       	subi	r16, 0xFA	; 250
    7628:	1f 4f       	sbci	r17, 0xFF	; 255
    762a:	f7 e1       	ldi	r31, 0x17	; 23
    762c:	af 0e       	add	r10, r31
    762e:	b1 1c       	adc	r11, r1
    7630:	87 e1       	ldi	r24, 0x17	; 23
    7632:	c8 0e       	add	r12, r24
    7634:	d1 1c       	adc	r13, r1
    7636:	97 e1       	ldi	r25, 0x17	; 23
    7638:	e9 0e       	add	r14, r25
    763a:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    763c:	ad e0       	ldi	r26, 0x0D	; 13
    763e:	ce 36       	cpi	r28, 0x6E	; 110
    7640:	da 07       	cpc	r29, r26
    7642:	09 f0       	breq	.+2      	; 0x7646 <ProcessMusic+0x420>
    7644:	37 cf       	rjmp	.-402    	; 0x74b4 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7646:	df 91       	pop	r29
    7648:	cf 91       	pop	r28
    764a:	1f 91       	pop	r17
    764c:	0f 91       	pop	r16
    764e:	ff 90       	pop	r15
    7650:	ef 90       	pop	r14
    7652:	df 90       	pop	r13
    7654:	cf 90       	pop	r12
    7656:	bf 90       	pop	r11
    7658:	af 90       	pop	r10
    765a:	9f 90       	pop	r9
    765c:	8f 90       	pop	r8
    765e:	7f 90       	pop	r7
    7660:	6f 90       	pop	r6
    7662:	08 95       	ret

00007664 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7664:	80 93 73 0d 	sts	0x0D73, r24
    7668:	08 95       	ret

0000766a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    766a:	99 27       	eor	r25, r25
	clr r23
    766c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    766e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7670:	09 f4       	brne	.+2      	; 0x7674 <set_note_waves>
		ret
    7672:	08 95       	ret

00007674 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7674:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7676:	f7 e7       	ldi	r31, 0x77	; 119
	lsl r22
    7678:	66 0f       	add	r22, r22
	rol r23
    767a:	77 1f       	adc	r23, r23
	add ZL,r22
    767c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    767e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7680:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7682:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7684:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    7686:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7688:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    768a:	28 9f       	mul	r18, r24
	add ZL,r0
    768c:	e0 0d       	add	r30, r0
	adc ZH,r1
    768e:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7690:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7692:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7694:	11 24       	eor	r1, r1
	

	ret
    7696:	08 95       	ret

00007698 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7698:	99 27       	eor	r25, r25
	clr r23
    769a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    769c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    769e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    76a0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    76a2:	28 9f       	mul	r18, r24
	add ZL,r0
    76a4:	e0 0d       	add	r30, r0
	adc ZH,r1
    76a6:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    76a8:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    76aa:	31 f4       	brne	.+12     	; 0x76b8 <smw1>
	lds r22,tr4_params
    76ac:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    76b0:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    76b2:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    76b6:	0b c0       	rjmp	.+22     	; 0x76ce <esmw>

000076b8 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    76b8:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    76ba:	31 f4       	brne	.+12     	; 0x76c8 <smw2>
	lds r22,tr4_params
    76bc:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    76c0:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    76c2:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    76c6:	03 c0       	rjmp	.+6      	; 0x76ce <esmw>

000076c8 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    76c8:	79 e7       	ldi	r23, 0x79	; 121
	add r23,r22
    76ca:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    76cc:	75 83       	std	Z+5, r23	; 0x05

000076ce <esmw>:

esmw:
	clr r1	
    76ce:	11 24       	eor	r1, r1
	ret
    76d0:	08 95       	ret
	...

00007700 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7700:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7702:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    7706:	08 95       	ret

00007708 <steptable>:
    7708:	22 00       	.word	0x0022	; ????
    770a:	24 00       	.word	0x0024	; ????
    770c:	26 00       	.word	0x0026	; ????
    770e:	28 00       	.word	0x0028	; ????
    7710:	2b 00       	.word	0x002b	; ????
    7712:	2d 00       	.word	0x002d	; ????
    7714:	30 00       	.word	0x0030	; ????
    7716:	33 00       	.word	0x0033	; ????
    7718:	36 00       	.word	0x0036	; ????
    771a:	39 00       	.word	0x0039	; ????
    771c:	3d 00       	.word	0x003d	; ????
    771e:	40 00       	.word	0x0040	; ????
    7720:	44 00       	.word	0x0044	; ????
    7722:	48 00       	.word	0x0048	; ????
    7724:	4c 00       	.word	0x004c	; ????
    7726:	51 00       	.word	0x0051	; ????
    7728:	56 00       	.word	0x0056	; ????
    772a:	5b 00       	.word	0x005b	; ????
    772c:	60 00       	.word	0x0060	; ????
    772e:	66 00       	.word	0x0066	; ????
    7730:	6c 00       	.word	0x006c	; ????
    7732:	73 00       	.word	0x0073	; ????
    7734:	79 00       	.word	0x0079	; ????
    7736:	81 00       	.word	0x0081	; ????
    7738:	88 00       	.word	0x0088	; ????
    773a:	90 00       	.word	0x0090	; ????
    773c:	99 00       	.word	0x0099	; ????
    773e:	a2 00       	.word	0x00a2	; ????
    7740:	ac 00       	.word	0x00ac	; ????
    7742:	b6 00       	.word	0x00b6	; ????
    7744:	c1 00       	.word	0x00c1	; ????
    7746:	cc 00       	.word	0x00cc	; ????
    7748:	d8 00       	.word	0x00d8	; ????
    774a:	e5 00       	.word	0x00e5	; ????
    774c:	f3 00       	.word	0x00f3	; ????
    774e:	01 01       	movw	r0, r2
    7750:	10 01       	movw	r2, r0
    7752:	21 01       	movw	r4, r2
    7754:	32 01       	movw	r6, r4
    7756:	44 01       	movw	r8, r8
    7758:	57 01       	movw	r10, r14
    775a:	6c 01       	movw	r12, r24
    775c:	81 01       	movw	r16, r2
    775e:	98 01       	movw	r18, r16
    7760:	b0 01       	movw	r22, r0
    7762:	ca 01       	movw	r24, r20
    7764:	e5 01       	movw	r28, r10
    7766:	02 02       	muls	r16, r18
    7768:	21 02       	muls	r18, r17
    776a:	41 02       	muls	r20, r17
    776c:	64 02       	muls	r22, r20
    776e:	88 02       	muls	r24, r24
    7770:	ae 02       	muls	r26, r30
    7772:	d7 02       	muls	r29, r23
    7774:	03 03       	mulsu	r16, r19
    7776:	30 03       	mulsu	r19, r16
    7778:	61 03       	mulsu	r22, r17
    777a:	94 03       	fmuls	r17, r20
    777c:	cb 03       	fmulsu	r20, r19
    777e:	05 04       	cpc	r0, r5
    7780:	42 04       	cpc	r4, r2
    7782:	83 04       	cpc	r8, r3
    7784:	c7 04       	cpc	r12, r7
    7786:	10 05       	cpc	r17, r0
    7788:	5d 05       	cpc	r21, r13
    778a:	af 05       	cpc	r26, r15
    778c:	05 06       	cpc	r0, r21
    778e:	61 06       	cpc	r6, r17
    7790:	c2 06       	cpc	r12, r18
    7792:	29 07       	cpc	r18, r25
    7794:	96 07       	cpc	r25, r22
    7796:	09 08       	sbc	r0, r9
    7798:	83 08       	sbc	r8, r3
    779a:	05 09       	sbc	r16, r5
    779c:	8e 09       	sbc	r24, r14
    779e:	20 0a       	sbc	r2, r16
    77a0:	ba 0a       	sbc	r11, r26
    77a2:	5d 0b       	sbc	r21, r29
    77a4:	0a 0c       	add	r0, r10
    77a6:	c1 0c       	add	r12, r1
    77a8:	84 0d       	add	r24, r4
    77aa:	51 0e       	add	r5, r17
    77ac:	2b 0f       	add	r18, r27
    77ae:	12 10       	cpse	r1, r2
    77b0:	07 11       	cpse	r16, r7
    77b2:	0a 12       	cpse	r0, r26
    77b4:	1d 13       	cpse	r17, r29
    77b6:	40 14       	cp	r4, r0
    77b8:	74 15       	cp	r23, r4
    77ba:	ba 16       	cp	r11, r26
    77bc:	14 18       	sub	r1, r4
    77be:	83 19       	sub	r24, r3
    77c0:	07 1b       	sub	r16, r23
    77c2:	a3 1c       	adc	r10, r3
    77c4:	57 1e       	adc	r5, r23
    77c6:	24 20       	and	r2, r4
    77c8:	0e 22       	and	r0, r30
    77ca:	14 24       	eor	r1, r4
    77cc:	39 26       	eor	r3, r25
    77ce:	7f 28       	or	r7, r15
    77d0:	e8 2a       	or	r14, r24
    77d2:	75 2d       	mov	r23, r5
    77d4:	29 30       	cpi	r18, 0x09	; 9
    77d6:	06 33       	cpi	r16, 0x36	; 54
    77d8:	0f 36       	cpi	r16, 0x6F	; 111
    77da:	45 39       	cpi	r20, 0x95	; 149
    77dc:	ad 3c       	cpi	r26, 0xCD	; 205
    77de:	49 40       	sbci	r20, 0x09	; 9
    77e0:	1b 44       	sbci	r17, 0x4B	; 75
    77e2:	28 48       	sbci	r18, 0x88	; 136
    77e4:	73 4c       	sbci	r23, 0xC3	; 195
    77e6:	fe 50       	subi	r31, 0x0E	; 14
    77e8:	cf 55       	subi	r28, 0x5F	; 95
    77ea:	ea 5a       	subi	r30, 0xAA	; 170
    77ec:	51 60       	ori	r21, 0x01	; 1
    77ee:	0c 66       	ori	r16, 0x6C	; 108
    77f0:	1d 6c       	ori	r17, 0xCD	; 205
    77f2:	8b 72       	andi	r24, 0x2B	; 43
    77f4:	5a 79       	andi	r21, 0x9A	; 154
    77f6:	92 80       	ldd	r9, Z+2	; 0x02
    77f8:	37 88       	ldd	r3, Z+23	; 0x17
    77fa:	50 90 e5 98 	lds	r5, 0x98E5
    77fe:	fd a1       	ldd	r31, Y+37	; 0x25
    7800:	9f ab       	std	Y+55, r25	; 0x37
    7802:	d3 b5       	in	r29, 0x23	; 35
    7804:	a3 c0       	rjmp	.+326    	; 0x794c <waves+0x4c>
	...

00007900 <waves>:
    7900:	00 03       	mulsu	r16, r16
    7902:	06 09       	sbc	r16, r6
    7904:	0c 10       	cpse	r0, r12
    7906:	13 16       	cp	r1, r19
    7908:	19 1c       	adc	r1, r9
    790a:	1f 22       	and	r1, r31
    790c:	25 28       	or	r2, r5
    790e:	2b 2e       	mov	r2, r27
    7910:	31 33       	cpi	r19, 0x31	; 49
    7912:	36 39       	cpi	r19, 0x96	; 150
    7914:	3c 3f       	cpi	r19, 0xFC	; 252
    7916:	41 44       	sbci	r20, 0x41	; 65
    7918:	47 49       	sbci	r20, 0x97	; 151
    791a:	4c 4e       	sbci	r20, 0xEC	; 236
    791c:	51 53       	subi	r21, 0x31	; 49
    791e:	55 58       	subi	r21, 0x85	; 133
    7920:	5a 5c       	subi	r21, 0xCA	; 202
    7922:	5e 60       	ori	r21, 0x0E	; 14
    7924:	62 64       	ori	r22, 0x42	; 66
    7926:	66 68       	ori	r22, 0x86	; 134
    7928:	6a 6b       	ori	r22, 0xBA	; 186
    792a:	6d 6f       	ori	r22, 0xFD	; 253
    792c:	70 71       	andi	r23, 0x10	; 16
    792e:	73 74       	andi	r23, 0x43	; 67
    7930:	75 76       	andi	r23, 0x65	; 101
    7932:	78 79       	andi	r23, 0x98	; 152
    7934:	7a 7a       	andi	r23, 0xAA	; 170
    7936:	7b 7c       	andi	r23, 0xCB	; 203
    7938:	7d 7d       	andi	r23, 0xDD	; 221
    793a:	7e 7e       	andi	r23, 0xEE	; 238
    793c:	7e 7f       	andi	r23, 0xFE	; 254
    793e:	7f 7f       	andi	r23, 0xFF	; 255
    7940:	7f 7f       	andi	r23, 0xFF	; 255
    7942:	7f 7f       	andi	r23, 0xFF	; 255
    7944:	7e 7e       	andi	r23, 0xEE	; 238
    7946:	7e 7d       	andi	r23, 0xDE	; 222
    7948:	7d 7c       	andi	r23, 0xCD	; 205
    794a:	7b 7a       	andi	r23, 0xAB	; 171
    794c:	7a 79       	andi	r23, 0x9A	; 154
    794e:	78 76       	andi	r23, 0x68	; 104
    7950:	75 74       	andi	r23, 0x45	; 69
    7952:	73 71       	andi	r23, 0x13	; 19
    7954:	70 6f       	ori	r23, 0xF0	; 240
    7956:	6d 6b       	ori	r22, 0xBD	; 189
    7958:	6a 68       	ori	r22, 0x8A	; 138
    795a:	66 64       	ori	r22, 0x46	; 70
    795c:	62 60       	ori	r22, 0x02	; 2
    795e:	5e 5c       	subi	r21, 0xCE	; 206
    7960:	5a 58       	subi	r21, 0x8A	; 138
    7962:	55 53       	subi	r21, 0x35	; 53
    7964:	51 4e       	sbci	r21, 0xE1	; 225
    7966:	4c 49       	sbci	r20, 0x9C	; 156
    7968:	47 44       	sbci	r20, 0x47	; 71
    796a:	41 3f       	cpi	r20, 0xF1	; 241
    796c:	3c 39       	cpi	r19, 0x9C	; 156
    796e:	36 33       	cpi	r19, 0x36	; 54
    7970:	31 2e       	mov	r3, r17
    7972:	2b 28       	or	r2, r11
    7974:	25 22       	and	r2, r21
    7976:	1f 1c       	adc	r1, r15
    7978:	19 16       	cp	r1, r25
    797a:	13 10       	cpse	r1, r3
    797c:	0c 09       	sbc	r16, r12
    797e:	06 03       	mulsu	r16, r22
    7980:	00 fd       	sbrc	r16, 0
    7982:	fa f7       	brpl	.-2      	; 0x7982 <waves+0x82>
    7984:	f4 f0       	brlt	.+60     	; 0x79c2 <waves+0xc2>
    7986:	ed ea       	ldi	r30, 0xAD	; 173
    7988:	e7 e4       	ldi	r30, 0x47	; 71
    798a:	e1 de       	rcall	.-574    	; 0x774e <steptable+0x46>
    798c:	db d8       	rcall	.-3658   	; 0x6b44 <FormatEeprom+0xc>
    798e:	d5 d2       	rcall	.+1450   	; 0x7f3a <waves+0x63a>
    7990:	cf cd       	rjmp	.-1122   	; 0x7530 <ProcessMusic+0x30a>
    7992:	ca c7       	rjmp	.+3988   	; 0x8928 <LBPrintByte+0xa>
    7994:	c4 c1       	rjmp	.+904    	; 0x7d1e <waves+0x41e>
    7996:	bf bc       	out	0x2f, r11	; 47
    7998:	b9 b7       	in	r27, 0x39	; 57
    799a:	b4 b2       	in	r11, 0x14	; 20
    799c:	af ad       	ldd	r26, Y+63	; 0x3f
    799e:	ab a8       	ldd	r10, Y+51	; 0x33
    79a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    79a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    79a4:	9e 9c       	mul	r9, r14
    79a6:	9a 98       	cbi	0x13, 2	; 19
    79a8:	96 95       	lsr	r25
    79aa:	93 91       	.word	0x9193	; ????
    79ac:	90 8f       	std	Z+24, r25	; 0x18
    79ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    79b0:	8b 8a       	std	Y+19, r8	; 0x13
    79b2:	88 87       	std	Y+8, r24	; 0x08
    79b4:	86 86       	std	Z+14, r8	; 0x0e
    79b6:	85 84       	ldd	r8, Z+13	; 0x0d
    79b8:	83 83       	std	Z+3, r24	; 0x03
    79ba:	82 82       	std	Z+2, r8	; 0x02
    79bc:	82 81       	ldd	r24, Z+2	; 0x02
    79be:	81 81       	ldd	r24, Z+1	; 0x01
    79c0:	81 81       	ldd	r24, Z+1	; 0x01
    79c2:	81 81       	ldd	r24, Z+1	; 0x01
    79c4:	82 82       	std	Z+2, r8	; 0x02
    79c6:	82 83       	std	Z+2, r24	; 0x02
    79c8:	83 84       	ldd	r8, Z+11	; 0x0b
    79ca:	85 86       	std	Z+13, r8	; 0x0d
    79cc:	86 87       	std	Z+14, r24	; 0x0e
    79ce:	88 8a       	std	Y+16, r8	; 0x10
    79d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    79d2:	8d 8f       	std	Y+29, r24	; 0x1d
    79d4:	90 91 93 95 	lds	r25, 0x9593
    79d8:	96 98       	cbi	0x12, 6	; 18
    79da:	9a 9c       	mul	r9, r10
    79dc:	9e a0       	ldd	r9, Y+38	; 0x26
    79de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    79e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    79e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    79e4:	af b2       	in	r10, 0x1f	; 31
    79e6:	b4 b7       	in	r27, 0x34	; 52
    79e8:	b9 bc       	out	0x29, r11	; 41
    79ea:	bf c1       	rjmp	.+894    	; 0x7d6a <waves+0x46a>
    79ec:	c4 c7       	rjmp	.+3976   	; 0x8976 <LBPrintByte+0x58>
    79ee:	ca cd       	rjmp	.-1132   	; 0x7584 <ProcessMusic+0x35e>
    79f0:	cf d2       	rcall	.+1438   	; 0x7f90 <waves+0x690>
    79f2:	d5 d8       	rcall	.-3670   	; 0x6b9e <isEepromFormatted+0x22>
    79f4:	db de       	rcall	.-586    	; 0x77ac <steptable+0xa4>
    79f6:	e1 e4       	ldi	r30, 0x41	; 65
    79f8:	e7 ea       	ldi	r30, 0xA7	; 167
    79fa:	ed f0       	brhs	.+58     	; 0x7a36 <waves+0x136>
    79fc:	f4 f7       	brge	.-4      	; 0x79fa <waves+0xfa>
    79fe:	fa fd       	.word	0xfdfa	; ????
    7a00:	80 81       	ld	r24, Z
    7a02:	82 83       	std	Z+2, r24	; 0x02
    7a04:	84 85       	ldd	r24, Z+12	; 0x0c
    7a06:	86 87       	std	Z+14, r24	; 0x0e
    7a08:	88 89       	ldd	r24, Y+16	; 0x10
    7a0a:	8a 8b       	std	Y+18, r24	; 0x12
    7a0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7a0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7a10:	90 91 92 93 	lds	r25, 0x9392
    7a14:	94 95       	.word	0x9594	; ????
    7a16:	96 97       	sbiw	r26, 0x26	; 38
    7a18:	98 99       	sbic	0x13, 0	; 19
    7a1a:	9a 9b       	sbis	0x13, 2	; 19
    7a1c:	9c 9d       	mul	r25, r12
    7a1e:	9e 9f       	mul	r25, r30
    7a20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7a22:	a2 a3       	std	Z+34, r26	; 0x22
    7a24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7a26:	a6 a7       	std	Z+46, r26	; 0x2e
    7a28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7a2a:	aa ab       	std	Y+50, r26	; 0x32
    7a2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7a2e:	ae af       	std	Y+62, r26	; 0x3e
    7a30:	b0 b1       	in	r27, 0x00	; 0
    7a32:	b2 b3       	in	r27, 0x12	; 18
    7a34:	b4 b5       	in	r27, 0x24	; 36
    7a36:	b6 b7       	in	r27, 0x36	; 54
    7a38:	b8 b9       	out	0x08, r27	; 8
    7a3a:	ba bb       	out	0x1a, r27	; 26
    7a3c:	bc bd       	out	0x2c, r27	; 44
    7a3e:	be bf       	out	0x3e, r27	; 62
    7a40:	c0 c1       	rjmp	.+896    	; 0x7dc2 <waves+0x4c2>
    7a42:	c2 c3       	rjmp	.+1924   	; 0x81c8 <waves+0x8c8>
    7a44:	c4 c5       	rjmp	.+2952   	; 0x85ce <DrawMap+0x16>
    7a46:	c6 c7       	rjmp	.+3980   	; 0x89d4 <LBPrintInt+0x54>
    7a48:	c8 c9       	rjmp	.-3184   	; 0x6dda <PatchCommand10>
    7a4a:	ca cb       	rjmp	.-2156   	; 0x71e0 <TriggerNote+0x3a>
    7a4c:	cc cd       	rjmp	.-1128   	; 0x75e6 <ProcessMusic+0x3c0>
    7a4e:	ce cf       	rjmp	.-100    	; 0x79ec <waves+0xec>
    7a50:	d0 d1       	rcall	.+928    	; 0x7df2 <waves+0x4f2>
    7a52:	d2 d3       	rcall	.+1956   	; 0x81f8 <waves+0x8f8>
    7a54:	d4 d5       	rcall	.+2984   	; 0x85fe <DrawMap+0x46>
    7a56:	d6 d7       	rcall	.+4012   	; 0x8a04 <LBCollides+0x12>
    7a58:	d8 d9       	rcall	.-3152   	; 0x6e0a <PatchCommand11+0x2a>
    7a5a:	da db       	rcall	.-2124   	; 0x7210 <TriggerNote+0x6a>
    7a5c:	dc dd       	rcall	.-1096   	; 0x7616 <ProcessMusic+0x3f0>
    7a5e:	de df       	rcall	.-68     	; 0x7a1c <waves+0x11c>
    7a60:	e0 e1       	ldi	r30, 0x10	; 16
    7a62:	e2 e3       	ldi	r30, 0x32	; 50
    7a64:	e4 e5       	ldi	r30, 0x54	; 84
    7a66:	e6 e7       	ldi	r30, 0x76	; 118
    7a68:	e8 e9       	ldi	r30, 0x98	; 152
    7a6a:	ea eb       	ldi	r30, 0xBA	; 186
    7a6c:	ec ed       	ldi	r30, 0xDC	; 220
    7a6e:	ee ef       	ldi	r30, 0xFE	; 254
    7a70:	f0 f1       	brcs	.+124    	; 0x7aee <waves+0x1ee>
    7a72:	f2 f3       	brmi	.-4      	; 0x7a70 <waves+0x170>
    7a74:	f4 f5       	brge	.+124    	; 0x7af2 <waves+0x1f2>
    7a76:	f6 f7       	brtc	.-4      	; 0x7a74 <waves+0x174>
    7a78:	f8 f9       	.word	0xf9f8	; ????
    7a7a:	fa fb       	.word	0xfbfa	; ????
    7a7c:	fc fd       	.word	0xfdfc	; ????
    7a7e:	fe ff       	.word	0xfffe	; ????
    7a80:	00 01       	movw	r0, r0
    7a82:	02 03       	mulsu	r16, r18
    7a84:	04 05       	cpc	r16, r4
    7a86:	06 07       	cpc	r16, r22
    7a88:	08 09       	sbc	r16, r8
    7a8a:	0a 0b       	sbc	r16, r26
    7a8c:	0c 0d       	add	r16, r12
    7a8e:	0e 0f       	add	r16, r30
    7a90:	10 11       	cpse	r17, r0
    7a92:	12 13       	cpse	r17, r18
    7a94:	14 15       	cp	r17, r4
    7a96:	16 17       	cp	r17, r22
    7a98:	18 19       	sub	r17, r8
    7a9a:	1a 1b       	sub	r17, r26
    7a9c:	1c 1d       	adc	r17, r12
    7a9e:	1e 1f       	adc	r17, r30
    7aa0:	20 21       	and	r18, r0
    7aa2:	22 23       	and	r18, r18
    7aa4:	24 25       	eor	r18, r4
    7aa6:	26 27       	eor	r18, r22
    7aa8:	28 29       	or	r18, r8
    7aaa:	2a 2b       	or	r18, r26
    7aac:	2c 2d       	mov	r18, r12
    7aae:	2e 2f       	mov	r18, r30
    7ab0:	30 31       	cpi	r19, 0x10	; 16
    7ab2:	32 33       	cpi	r19, 0x32	; 50
    7ab4:	34 35       	cpi	r19, 0x54	; 84
    7ab6:	36 37       	cpi	r19, 0x76	; 118
    7ab8:	38 39       	cpi	r19, 0x98	; 152
    7aba:	3a 3b       	cpi	r19, 0xBA	; 186
    7abc:	3c 3d       	cpi	r19, 0xDC	; 220
    7abe:	3e 3f       	cpi	r19, 0xFE	; 254
    7ac0:	40 41       	sbci	r20, 0x10	; 16
    7ac2:	42 43       	sbci	r20, 0x32	; 50
    7ac4:	44 45       	sbci	r20, 0x54	; 84
    7ac6:	46 47       	sbci	r20, 0x76	; 118
    7ac8:	48 49       	sbci	r20, 0x98	; 152
    7aca:	4a 4b       	sbci	r20, 0xBA	; 186
    7acc:	4c 4d       	sbci	r20, 0xDC	; 220
    7ace:	4e 4f       	sbci	r20, 0xFE	; 254
    7ad0:	50 51       	subi	r21, 0x10	; 16
    7ad2:	52 53       	subi	r21, 0x32	; 50
    7ad4:	54 55       	subi	r21, 0x54	; 84
    7ad6:	56 57       	subi	r21, 0x76	; 118
    7ad8:	58 59       	subi	r21, 0x98	; 152
    7ada:	5a 5b       	subi	r21, 0xBA	; 186
    7adc:	5c 5d       	subi	r21, 0xDC	; 220
    7ade:	5e 5f       	subi	r21, 0xFE	; 254
    7ae0:	60 61       	ori	r22, 0x10	; 16
    7ae2:	62 63       	ori	r22, 0x32	; 50
    7ae4:	64 65       	ori	r22, 0x54	; 84
    7ae6:	66 67       	ori	r22, 0x76	; 118
    7ae8:	68 69       	ori	r22, 0x98	; 152
    7aea:	6a 6b       	ori	r22, 0xBA	; 186
    7aec:	6c 6d       	ori	r22, 0xDC	; 220
    7aee:	6e 6f       	ori	r22, 0xFE	; 254
    7af0:	70 71       	andi	r23, 0x10	; 16
    7af2:	72 73       	andi	r23, 0x32	; 50
    7af4:	74 75       	andi	r23, 0x54	; 84
    7af6:	76 77       	andi	r23, 0x76	; 118
    7af8:	78 79       	andi	r23, 0x98	; 152
    7afa:	7a 7b       	andi	r23, 0xBA	; 186
    7afc:	7c 7d       	andi	r23, 0xDC	; 220
    7afe:	7e 7f       	andi	r23, 0xFE	; 254
    7b00:	00 02       	muls	r16, r16
    7b02:	04 06       	cpc	r0, r20
    7b04:	08 0a       	sbc	r0, r24
    7b06:	0c 0e       	add	r0, r28
    7b08:	10 12       	cpse	r1, r16
    7b0a:	14 16       	cp	r1, r20
    7b0c:	18 1a       	sub	r1, r24
    7b0e:	1c 1e       	adc	r1, r28
    7b10:	20 22       	and	r2, r16
    7b12:	24 26       	eor	r2, r20
    7b14:	28 2a       	or	r2, r24
    7b16:	2c 2e       	mov	r2, r28
    7b18:	30 32       	cpi	r19, 0x20	; 32
    7b1a:	34 36       	cpi	r19, 0x64	; 100
    7b1c:	38 3a       	cpi	r19, 0xA8	; 168
    7b1e:	3c 3e       	cpi	r19, 0xEC	; 236
    7b20:	40 42       	sbci	r20, 0x20	; 32
    7b22:	44 46       	sbci	r20, 0x64	; 100
    7b24:	48 4a       	sbci	r20, 0xA8	; 168
    7b26:	4c 4e       	sbci	r20, 0xEC	; 236
    7b28:	50 52       	subi	r21, 0x20	; 32
    7b2a:	54 56       	subi	r21, 0x64	; 100
    7b2c:	58 5a       	subi	r21, 0xA8	; 168
    7b2e:	5c 5e       	subi	r21, 0xEC	; 236
    7b30:	60 62       	ori	r22, 0x20	; 32
    7b32:	64 66       	ori	r22, 0x64	; 100
    7b34:	68 6a       	ori	r22, 0xA8	; 168
    7b36:	6c 6e       	ori	r22, 0xEC	; 236
    7b38:	70 72       	andi	r23, 0x20	; 32
    7b3a:	74 76       	andi	r23, 0x64	; 100
    7b3c:	78 7a       	andi	r23, 0xA8	; 168
    7b3e:	7c 7e       	andi	r23, 0xEC	; 236
    7b40:	7f 7d       	andi	r23, 0xDF	; 223
    7b42:	7b 79       	andi	r23, 0x9B	; 155
    7b44:	77 75       	andi	r23, 0x57	; 87
    7b46:	73 71       	andi	r23, 0x13	; 19
    7b48:	6f 6d       	ori	r22, 0xDF	; 223
    7b4a:	6b 69       	ori	r22, 0x9B	; 155
    7b4c:	67 65       	ori	r22, 0x57	; 87
    7b4e:	63 61       	ori	r22, 0x13	; 19
    7b50:	5f 5d       	subi	r21, 0xDF	; 223
    7b52:	5b 59       	subi	r21, 0x9B	; 155
    7b54:	57 55       	subi	r21, 0x57	; 87
    7b56:	53 51       	subi	r21, 0x13	; 19
    7b58:	4f 4d       	sbci	r20, 0xDF	; 223
    7b5a:	4b 49       	sbci	r20, 0x9B	; 155
    7b5c:	47 45       	sbci	r20, 0x57	; 87
    7b5e:	43 41       	sbci	r20, 0x13	; 19
    7b60:	3f 3d       	cpi	r19, 0xDF	; 223
    7b62:	3b 39       	cpi	r19, 0x9B	; 155
    7b64:	37 35       	cpi	r19, 0x57	; 87
    7b66:	33 31       	cpi	r19, 0x13	; 19
    7b68:	2f 2d       	mov	r18, r15
    7b6a:	2b 29       	or	r18, r11
    7b6c:	27 25       	eor	r18, r7
    7b6e:	23 21       	and	r18, r3
    7b70:	1f 1d       	adc	r17, r15
    7b72:	1b 19       	sub	r17, r11
    7b74:	17 15       	cp	r17, r7
    7b76:	13 11       	cpse	r17, r3
    7b78:	0f 0d       	add	r16, r15
    7b7a:	0b 09       	sbc	r16, r11
    7b7c:	07 05       	cpc	r16, r7
    7b7e:	03 01       	movw	r0, r6
    7b80:	ff fd       	.word	0xfdff	; ????
    7b82:	fb f9       	.word	0xf9fb	; ????
    7b84:	f7 f5       	brid	.+124    	; 0x7c02 <waves+0x302>
    7b86:	f3 f1       	brvs	.+124    	; 0x7c04 <waves+0x304>
    7b88:	ef ed       	ldi	r30, 0xDF	; 223
    7b8a:	eb e9       	ldi	r30, 0x9B	; 155
    7b8c:	e7 e5       	ldi	r30, 0x57	; 87
    7b8e:	e3 e1       	ldi	r30, 0x13	; 19
    7b90:	df dd       	rcall	.-1090   	; 0x7750 <steptable+0x48>
    7b92:	db d9       	rcall	.-3146   	; 0x6f4a <StartSong+0xa>
    7b94:	d7 d5       	rcall	.+2990   	; 0x8744 <FadeIn+0x2>
    7b96:	d3 d1       	rcall	.+934    	; 0x7f3e <waves+0x63e>
    7b98:	cf cd       	rjmp	.-1122   	; 0x7738 <steptable+0x30>
    7b9a:	cb c9       	rjmp	.-3178   	; 0x6f32 <InitMusicPlayer+0x36>
    7b9c:	c7 c5       	rjmp	.+2958   	; 0x872c <doFade+0x6>
    7b9e:	c3 c1       	rjmp	.+902    	; 0x7f26 <waves+0x626>
    7ba0:	bf bd       	out	0x2f, r27	; 47
    7ba2:	bb b9       	out	0x0b, r27	; 11
    7ba4:	b7 b5       	in	r27, 0x27	; 39
    7ba6:	b3 b1       	in	r27, 0x03	; 3
    7ba8:	af ad       	ldd	r26, Y+63	; 0x3f
    7baa:	ab a9       	ldd	r26, Y+51	; 0x33
    7bac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7bae:	a3 a1       	ldd	r26, Z+35	; 0x23
    7bb0:	9f 9d       	mul	r25, r15
    7bb2:	9b 99       	sbic	0x13, 3	; 19
    7bb4:	97 95       	ror	r25
    7bb6:	93 91       	.word	0x9193	; ????
    7bb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7bba:	8b 89       	ldd	r24, Y+19	; 0x13
    7bbc:	87 85       	ldd	r24, Z+15	; 0x0f
    7bbe:	83 81       	ldd	r24, Z+3	; 0x03
    7bc0:	80 82       	st	Z, r8
    7bc2:	84 86       	std	Z+12, r8	; 0x0c
    7bc4:	88 8a       	std	Y+16, r8	; 0x10
    7bc6:	8c 8e       	std	Y+28, r8	; 0x1c
    7bc8:	90 92 94 96 	sts	0x9694, r9
    7bcc:	98 9a       	sbi	0x13, 0	; 19
    7bce:	9c 9e       	mul	r9, r28
    7bd0:	a0 a2       	std	Z+32, r10	; 0x20
    7bd2:	a4 a6       	std	Z+44, r10	; 0x2c
    7bd4:	a8 aa       	std	Y+48, r10	; 0x30
    7bd6:	ac ae       	std	Y+60, r10	; 0x3c
    7bd8:	b0 b2       	in	r11, 0x10	; 16
    7bda:	b4 b6       	in	r11, 0x34	; 52
    7bdc:	b8 ba       	out	0x18, r11	; 24
    7bde:	bc be       	out	0x3c, r11	; 60
    7be0:	c0 c2       	rjmp	.+1408   	; 0x8162 <waves+0x862>
    7be2:	c4 c6       	rjmp	.+3464   	; 0x896c <LBPrintByte+0x4e>
    7be4:	c8 ca       	rjmp	.-2672   	; 0x7176 <TriggerFx+0x60>
    7be6:	cc ce       	rjmp	.-616    	; 0x7980 <waves+0x80>
    7be8:	d0 d2       	rcall	.+1440   	; 0x818a <waves+0x88a>
    7bea:	d4 d6       	rcall	.+3496   	; 0x8994 <LBPrintInt+0x14>
    7bec:	d8 da       	rcall	.-2640   	; 0x719e <TriggerFx+0x88>
    7bee:	dc de       	rcall	.-584    	; 0x79a8 <waves+0xa8>
    7bf0:	e0 e2       	ldi	r30, 0x20	; 32
    7bf2:	e4 e6       	ldi	r30, 0x64	; 100
    7bf4:	e8 ea       	ldi	r30, 0xA8	; 168
    7bf6:	ec ee       	ldi	r30, 0xEC	; 236
    7bf8:	f0 f2       	brcs	.-68     	; 0x7bb6 <waves+0x2b6>
    7bfa:	f4 f6       	brge	.-68     	; 0x7bb8 <waves+0x2b8>
    7bfc:	f8 fa       	.word	0xfaf8	; ????
    7bfe:	fc fe       	.word	0xfefc	; ????
    7c00:	7f 7f       	andi	r23, 0xFF	; 255
    7c02:	7f 7f       	andi	r23, 0xFF	; 255
    7c04:	7f 7f       	andi	r23, 0xFF	; 255
    7c06:	7f 7f       	andi	r23, 0xFF	; 255
    7c08:	7f 7f       	andi	r23, 0xFF	; 255
    7c0a:	7f 7f       	andi	r23, 0xFF	; 255
    7c0c:	7f 7f       	andi	r23, 0xFF	; 255
    7c0e:	7f 7f       	andi	r23, 0xFF	; 255
    7c10:	7f 7f       	andi	r23, 0xFF	; 255
    7c12:	7f 7f       	andi	r23, 0xFF	; 255
    7c14:	7f 7f       	andi	r23, 0xFF	; 255
    7c16:	7f 7f       	andi	r23, 0xFF	; 255
    7c18:	7f 7f       	andi	r23, 0xFF	; 255
    7c1a:	7f 7f       	andi	r23, 0xFF	; 255
    7c1c:	7f 7f       	andi	r23, 0xFF	; 255
    7c1e:	7f 7f       	andi	r23, 0xFF	; 255
    7c20:	7f 7f       	andi	r23, 0xFF	; 255
    7c22:	7f 7f       	andi	r23, 0xFF	; 255
    7c24:	7f 7f       	andi	r23, 0xFF	; 255
    7c26:	7f 7f       	andi	r23, 0xFF	; 255
    7c28:	7f 7f       	andi	r23, 0xFF	; 255
    7c2a:	7f 7f       	andi	r23, 0xFF	; 255
    7c2c:	7f 7f       	andi	r23, 0xFF	; 255
    7c2e:	7f 7f       	andi	r23, 0xFF	; 255
    7c30:	7f 7f       	andi	r23, 0xFF	; 255
    7c32:	7f 7f       	andi	r23, 0xFF	; 255
    7c34:	7f 7f       	andi	r23, 0xFF	; 255
    7c36:	7f 7f       	andi	r23, 0xFF	; 255
    7c38:	7f 7f       	andi	r23, 0xFF	; 255
    7c3a:	7f 7f       	andi	r23, 0xFF	; 255
    7c3c:	7f 7f       	andi	r23, 0xFF	; 255
    7c3e:	7f 7f       	andi	r23, 0xFF	; 255
    7c40:	80 80       	ld	r8, Z
    7c42:	80 80       	ld	r8, Z
    7c44:	80 80       	ld	r8, Z
    7c46:	80 80       	ld	r8, Z
    7c48:	80 80       	ld	r8, Z
    7c4a:	80 80       	ld	r8, Z
    7c4c:	80 80       	ld	r8, Z
    7c4e:	80 80       	ld	r8, Z
    7c50:	80 80       	ld	r8, Z
    7c52:	80 80       	ld	r8, Z
    7c54:	80 80       	ld	r8, Z
    7c56:	80 80       	ld	r8, Z
    7c58:	80 80       	ld	r8, Z
    7c5a:	80 80       	ld	r8, Z
    7c5c:	80 80       	ld	r8, Z
    7c5e:	80 80       	ld	r8, Z
    7c60:	80 80       	ld	r8, Z
    7c62:	80 80       	ld	r8, Z
    7c64:	80 80       	ld	r8, Z
    7c66:	80 80       	ld	r8, Z
    7c68:	80 80       	ld	r8, Z
    7c6a:	80 80       	ld	r8, Z
    7c6c:	80 80       	ld	r8, Z
    7c6e:	80 80       	ld	r8, Z
    7c70:	80 80       	ld	r8, Z
    7c72:	80 80       	ld	r8, Z
    7c74:	80 80       	ld	r8, Z
    7c76:	80 80       	ld	r8, Z
    7c78:	80 80       	ld	r8, Z
    7c7a:	80 80       	ld	r8, Z
    7c7c:	80 80       	ld	r8, Z
    7c7e:	80 80       	ld	r8, Z
    7c80:	80 80       	ld	r8, Z
    7c82:	80 80       	ld	r8, Z
    7c84:	80 80       	ld	r8, Z
    7c86:	80 80       	ld	r8, Z
    7c88:	80 80       	ld	r8, Z
    7c8a:	80 80       	ld	r8, Z
    7c8c:	80 80       	ld	r8, Z
    7c8e:	80 80       	ld	r8, Z
    7c90:	80 80       	ld	r8, Z
    7c92:	80 80       	ld	r8, Z
    7c94:	80 80       	ld	r8, Z
    7c96:	80 80       	ld	r8, Z
    7c98:	80 80       	ld	r8, Z
    7c9a:	80 80       	ld	r8, Z
    7c9c:	80 80       	ld	r8, Z
    7c9e:	80 80       	ld	r8, Z
    7ca0:	80 80       	ld	r8, Z
    7ca2:	80 80       	ld	r8, Z
    7ca4:	80 80       	ld	r8, Z
    7ca6:	80 80       	ld	r8, Z
    7ca8:	80 80       	ld	r8, Z
    7caa:	80 80       	ld	r8, Z
    7cac:	80 80       	ld	r8, Z
    7cae:	80 80       	ld	r8, Z
    7cb0:	80 80       	ld	r8, Z
    7cb2:	80 80       	ld	r8, Z
    7cb4:	80 80       	ld	r8, Z
    7cb6:	80 80       	ld	r8, Z
    7cb8:	80 80       	ld	r8, Z
    7cba:	80 80       	ld	r8, Z
    7cbc:	80 80       	ld	r8, Z
    7cbe:	80 80       	ld	r8, Z
    7cc0:	80 80       	ld	r8, Z
    7cc2:	80 80       	ld	r8, Z
    7cc4:	80 80       	ld	r8, Z
    7cc6:	80 80       	ld	r8, Z
    7cc8:	80 80       	ld	r8, Z
    7cca:	80 80       	ld	r8, Z
    7ccc:	80 80       	ld	r8, Z
    7cce:	80 80       	ld	r8, Z
    7cd0:	80 80       	ld	r8, Z
    7cd2:	80 80       	ld	r8, Z
    7cd4:	80 80       	ld	r8, Z
    7cd6:	80 80       	ld	r8, Z
    7cd8:	80 80       	ld	r8, Z
    7cda:	80 80       	ld	r8, Z
    7cdc:	80 80       	ld	r8, Z
    7cde:	80 80       	ld	r8, Z
    7ce0:	80 80       	ld	r8, Z
    7ce2:	80 80       	ld	r8, Z
    7ce4:	80 80       	ld	r8, Z
    7ce6:	80 80       	ld	r8, Z
    7ce8:	80 80       	ld	r8, Z
    7cea:	80 80       	ld	r8, Z
    7cec:	80 80       	ld	r8, Z
    7cee:	80 80       	ld	r8, Z
    7cf0:	80 80       	ld	r8, Z
    7cf2:	80 80       	ld	r8, Z
    7cf4:	80 80       	ld	r8, Z
    7cf6:	80 80       	ld	r8, Z
    7cf8:	80 80       	ld	r8, Z
    7cfa:	80 80       	ld	r8, Z
    7cfc:	80 80       	ld	r8, Z
    7cfe:	80 80       	ld	r8, Z
    7d00:	7f 7f       	andi	r23, 0xFF	; 255
    7d02:	7f 7f       	andi	r23, 0xFF	; 255
    7d04:	7f 7f       	andi	r23, 0xFF	; 255
    7d06:	7f 7f       	andi	r23, 0xFF	; 255
    7d08:	7f 7f       	andi	r23, 0xFF	; 255
    7d0a:	7f 7f       	andi	r23, 0xFF	; 255
    7d0c:	7f 7f       	andi	r23, 0xFF	; 255
    7d0e:	7f 7f       	andi	r23, 0xFF	; 255
    7d10:	7f 7f       	andi	r23, 0xFF	; 255
    7d12:	7f 7f       	andi	r23, 0xFF	; 255
    7d14:	7f 7f       	andi	r23, 0xFF	; 255
    7d16:	7f 7f       	andi	r23, 0xFF	; 255
    7d18:	7f 7f       	andi	r23, 0xFF	; 255
    7d1a:	7f 7f       	andi	r23, 0xFF	; 255
    7d1c:	7f 7f       	andi	r23, 0xFF	; 255
    7d1e:	7f 7f       	andi	r23, 0xFF	; 255
    7d20:	7f 7f       	andi	r23, 0xFF	; 255
    7d22:	7f 7f       	andi	r23, 0xFF	; 255
    7d24:	7f 7f       	andi	r23, 0xFF	; 255
    7d26:	7f 7f       	andi	r23, 0xFF	; 255
    7d28:	7f 7f       	andi	r23, 0xFF	; 255
    7d2a:	7f 7f       	andi	r23, 0xFF	; 255
    7d2c:	7f 7f       	andi	r23, 0xFF	; 255
    7d2e:	7f 7f       	andi	r23, 0xFF	; 255
    7d30:	7f 7f       	andi	r23, 0xFF	; 255
    7d32:	7f 7f       	andi	r23, 0xFF	; 255
    7d34:	7f 7f       	andi	r23, 0xFF	; 255
    7d36:	7f 7f       	andi	r23, 0xFF	; 255
    7d38:	7f 7f       	andi	r23, 0xFF	; 255
    7d3a:	7f 7f       	andi	r23, 0xFF	; 255
    7d3c:	7f 7f       	andi	r23, 0xFF	; 255
    7d3e:	7f 7f       	andi	r23, 0xFF	; 255
    7d40:	7f 7f       	andi	r23, 0xFF	; 255
    7d42:	7f 7f       	andi	r23, 0xFF	; 255
    7d44:	7f 7f       	andi	r23, 0xFF	; 255
    7d46:	7f 7f       	andi	r23, 0xFF	; 255
    7d48:	7f 7f       	andi	r23, 0xFF	; 255
    7d4a:	7f 7f       	andi	r23, 0xFF	; 255
    7d4c:	7f 7f       	andi	r23, 0xFF	; 255
    7d4e:	7f 7f       	andi	r23, 0xFF	; 255
    7d50:	7f 7f       	andi	r23, 0xFF	; 255
    7d52:	7f 7f       	andi	r23, 0xFF	; 255
    7d54:	7f 7f       	andi	r23, 0xFF	; 255
    7d56:	7f 7f       	andi	r23, 0xFF	; 255
    7d58:	7f 7f       	andi	r23, 0xFF	; 255
    7d5a:	7f 7f       	andi	r23, 0xFF	; 255
    7d5c:	7f 7f       	andi	r23, 0xFF	; 255
    7d5e:	7f 7f       	andi	r23, 0xFF	; 255
    7d60:	7f 7f       	andi	r23, 0xFF	; 255
    7d62:	7f 7f       	andi	r23, 0xFF	; 255
    7d64:	7f 7f       	andi	r23, 0xFF	; 255
    7d66:	7f 7f       	andi	r23, 0xFF	; 255
    7d68:	7f 7f       	andi	r23, 0xFF	; 255
    7d6a:	7f 7f       	andi	r23, 0xFF	; 255
    7d6c:	7f 7f       	andi	r23, 0xFF	; 255
    7d6e:	7f 7f       	andi	r23, 0xFF	; 255
    7d70:	7f 7f       	andi	r23, 0xFF	; 255
    7d72:	7f 7f       	andi	r23, 0xFF	; 255
    7d74:	7f 7f       	andi	r23, 0xFF	; 255
    7d76:	7f 7f       	andi	r23, 0xFF	; 255
    7d78:	7f 7f       	andi	r23, 0xFF	; 255
    7d7a:	7f 7f       	andi	r23, 0xFF	; 255
    7d7c:	7f 7f       	andi	r23, 0xFF	; 255
    7d7e:	7f 7f       	andi	r23, 0xFF	; 255
    7d80:	80 80       	ld	r8, Z
    7d82:	80 80       	ld	r8, Z
    7d84:	80 80       	ld	r8, Z
    7d86:	80 80       	ld	r8, Z
    7d88:	80 80       	ld	r8, Z
    7d8a:	80 80       	ld	r8, Z
    7d8c:	80 80       	ld	r8, Z
    7d8e:	80 80       	ld	r8, Z
    7d90:	80 80       	ld	r8, Z
    7d92:	80 80       	ld	r8, Z
    7d94:	80 80       	ld	r8, Z
    7d96:	80 80       	ld	r8, Z
    7d98:	80 80       	ld	r8, Z
    7d9a:	80 80       	ld	r8, Z
    7d9c:	80 80       	ld	r8, Z
    7d9e:	80 80       	ld	r8, Z
    7da0:	80 80       	ld	r8, Z
    7da2:	80 80       	ld	r8, Z
    7da4:	80 80       	ld	r8, Z
    7da6:	80 80       	ld	r8, Z
    7da8:	80 80       	ld	r8, Z
    7daa:	80 80       	ld	r8, Z
    7dac:	80 80       	ld	r8, Z
    7dae:	80 80       	ld	r8, Z
    7db0:	80 80       	ld	r8, Z
    7db2:	80 80       	ld	r8, Z
    7db4:	80 80       	ld	r8, Z
    7db6:	80 80       	ld	r8, Z
    7db8:	80 80       	ld	r8, Z
    7dba:	80 80       	ld	r8, Z
    7dbc:	80 80       	ld	r8, Z
    7dbe:	80 80       	ld	r8, Z
    7dc0:	80 80       	ld	r8, Z
    7dc2:	80 80       	ld	r8, Z
    7dc4:	80 80       	ld	r8, Z
    7dc6:	80 80       	ld	r8, Z
    7dc8:	80 80       	ld	r8, Z
    7dca:	80 80       	ld	r8, Z
    7dcc:	80 80       	ld	r8, Z
    7dce:	80 80       	ld	r8, Z
    7dd0:	80 80       	ld	r8, Z
    7dd2:	80 80       	ld	r8, Z
    7dd4:	80 80       	ld	r8, Z
    7dd6:	80 80       	ld	r8, Z
    7dd8:	80 80       	ld	r8, Z
    7dda:	80 80       	ld	r8, Z
    7ddc:	80 80       	ld	r8, Z
    7dde:	80 80       	ld	r8, Z
    7de0:	80 80       	ld	r8, Z
    7de2:	80 80       	ld	r8, Z
    7de4:	80 80       	ld	r8, Z
    7de6:	80 80       	ld	r8, Z
    7de8:	80 80       	ld	r8, Z
    7dea:	80 80       	ld	r8, Z
    7dec:	80 80       	ld	r8, Z
    7dee:	80 80       	ld	r8, Z
    7df0:	80 80       	ld	r8, Z
    7df2:	80 80       	ld	r8, Z
    7df4:	80 80       	ld	r8, Z
    7df6:	80 80       	ld	r8, Z
    7df8:	80 80       	ld	r8, Z
    7dfa:	80 80       	ld	r8, Z
    7dfc:	80 80       	ld	r8, Z
    7dfe:	80 80       	ld	r8, Z
    7e00:	7f 7f       	andi	r23, 0xFF	; 255
    7e02:	7f 7f       	andi	r23, 0xFF	; 255
    7e04:	7f 7f       	andi	r23, 0xFF	; 255
    7e06:	7f 7f       	andi	r23, 0xFF	; 255
    7e08:	7f 7f       	andi	r23, 0xFF	; 255
    7e0a:	7f 7f       	andi	r23, 0xFF	; 255
    7e0c:	7f 7f       	andi	r23, 0xFF	; 255
    7e0e:	7f 7f       	andi	r23, 0xFF	; 255
    7e10:	7f 7f       	andi	r23, 0xFF	; 255
    7e12:	7f 7f       	andi	r23, 0xFF	; 255
    7e14:	7f 7f       	andi	r23, 0xFF	; 255
    7e16:	7f 7f       	andi	r23, 0xFF	; 255
    7e18:	7f 7f       	andi	r23, 0xFF	; 255
    7e1a:	7f 7f       	andi	r23, 0xFF	; 255
    7e1c:	7f 7f       	andi	r23, 0xFF	; 255
    7e1e:	7f 7f       	andi	r23, 0xFF	; 255
    7e20:	7f 7f       	andi	r23, 0xFF	; 255
    7e22:	7f 7f       	andi	r23, 0xFF	; 255
    7e24:	7f 7f       	andi	r23, 0xFF	; 255
    7e26:	7f 7f       	andi	r23, 0xFF	; 255
    7e28:	7f 7f       	andi	r23, 0xFF	; 255
    7e2a:	7f 7f       	andi	r23, 0xFF	; 255
    7e2c:	7f 7f       	andi	r23, 0xFF	; 255
    7e2e:	7f 7f       	andi	r23, 0xFF	; 255
    7e30:	7f 7f       	andi	r23, 0xFF	; 255
    7e32:	7f 7f       	andi	r23, 0xFF	; 255
    7e34:	7f 7f       	andi	r23, 0xFF	; 255
    7e36:	7f 7f       	andi	r23, 0xFF	; 255
    7e38:	7f 7f       	andi	r23, 0xFF	; 255
    7e3a:	7f 7f       	andi	r23, 0xFF	; 255
    7e3c:	7f 7f       	andi	r23, 0xFF	; 255
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7f 7f       	andi	r23, 0xFF	; 255
    7e46:	7f 7f       	andi	r23, 0xFF	; 255
    7e48:	7f 7f       	andi	r23, 0xFF	; 255
    7e4a:	7f 7f       	andi	r23, 0xFF	; 255
    7e4c:	7f 7f       	andi	r23, 0xFF	; 255
    7e4e:	7f 7f       	andi	r23, 0xFF	; 255
    7e50:	7f 7f       	andi	r23, 0xFF	; 255
    7e52:	7f 7f       	andi	r23, 0xFF	; 255
    7e54:	7f 7f       	andi	r23, 0xFF	; 255
    7e56:	7f 7f       	andi	r23, 0xFF	; 255
    7e58:	7f 7f       	andi	r23, 0xFF	; 255
    7e5a:	7f 7f       	andi	r23, 0xFF	; 255
    7e5c:	7f 7f       	andi	r23, 0xFF	; 255
    7e5e:	7f 7f       	andi	r23, 0xFF	; 255
    7e60:	7f 7f       	andi	r23, 0xFF	; 255
    7e62:	7f 7f       	andi	r23, 0xFF	; 255
    7e64:	7f 7f       	andi	r23, 0xFF	; 255
    7e66:	7f 7f       	andi	r23, 0xFF	; 255
    7e68:	7f 7f       	andi	r23, 0xFF	; 255
    7e6a:	7f 7f       	andi	r23, 0xFF	; 255
    7e6c:	7f 7f       	andi	r23, 0xFF	; 255
    7e6e:	7f 7f       	andi	r23, 0xFF	; 255
    7e70:	7f 7f       	andi	r23, 0xFF	; 255
    7e72:	7f 7f       	andi	r23, 0xFF	; 255
    7e74:	7f 7f       	andi	r23, 0xFF	; 255
    7e76:	7f 7f       	andi	r23, 0xFF	; 255
    7e78:	7f 7f       	andi	r23, 0xFF	; 255
    7e7a:	7f 7f       	andi	r23, 0xFF	; 255
    7e7c:	7f 7f       	andi	r23, 0xFF	; 255
    7e7e:	7f 7f       	andi	r23, 0xFF	; 255
    7e80:	7f 7f       	andi	r23, 0xFF	; 255
    7e82:	7f 7f       	andi	r23, 0xFF	; 255
    7e84:	7f 7f       	andi	r23, 0xFF	; 255
    7e86:	7f 7f       	andi	r23, 0xFF	; 255
    7e88:	7f 7f       	andi	r23, 0xFF	; 255
    7e8a:	7f 7f       	andi	r23, 0xFF	; 255
    7e8c:	7f 7f       	andi	r23, 0xFF	; 255
    7e8e:	7f 7f       	andi	r23, 0xFF	; 255
    7e90:	7f 7f       	andi	r23, 0xFF	; 255
    7e92:	7f 7f       	andi	r23, 0xFF	; 255
    7e94:	7f 7f       	andi	r23, 0xFF	; 255
    7e96:	7f 7f       	andi	r23, 0xFF	; 255
    7e98:	7f 7f       	andi	r23, 0xFF	; 255
    7e9a:	7f 7f       	andi	r23, 0xFF	; 255
    7e9c:	7f 7f       	andi	r23, 0xFF	; 255
    7e9e:	7f 7f       	andi	r23, 0xFF	; 255
    7ea0:	7f 7f       	andi	r23, 0xFF	; 255
    7ea2:	7f 7f       	andi	r23, 0xFF	; 255
    7ea4:	7f 7f       	andi	r23, 0xFF	; 255
    7ea6:	7f 7f       	andi	r23, 0xFF	; 255
    7ea8:	7f 7f       	andi	r23, 0xFF	; 255
    7eaa:	7f 7f       	andi	r23, 0xFF	; 255
    7eac:	7f 7f       	andi	r23, 0xFF	; 255
    7eae:	7f 7f       	andi	r23, 0xFF	; 255
    7eb0:	7f 7f       	andi	r23, 0xFF	; 255
    7eb2:	7f 7f       	andi	r23, 0xFF	; 255
    7eb4:	7f 7f       	andi	r23, 0xFF	; 255
    7eb6:	7f 7f       	andi	r23, 0xFF	; 255
    7eb8:	7f 7f       	andi	r23, 0xFF	; 255
    7eba:	7f 7f       	andi	r23, 0xFF	; 255
    7ebc:	7f 7f       	andi	r23, 0xFF	; 255
    7ebe:	7f 7f       	andi	r23, 0xFF	; 255
    7ec0:	80 80       	ld	r8, Z
    7ec2:	80 80       	ld	r8, Z
    7ec4:	80 80       	ld	r8, Z
    7ec6:	80 80       	ld	r8, Z
    7ec8:	80 80       	ld	r8, Z
    7eca:	80 80       	ld	r8, Z
    7ecc:	80 80       	ld	r8, Z
    7ece:	80 80       	ld	r8, Z
    7ed0:	80 80       	ld	r8, Z
    7ed2:	80 80       	ld	r8, Z
    7ed4:	80 80       	ld	r8, Z
    7ed6:	80 80       	ld	r8, Z
    7ed8:	80 80       	ld	r8, Z
    7eda:	80 80       	ld	r8, Z
    7edc:	80 80       	ld	r8, Z
    7ede:	80 80       	ld	r8, Z
    7ee0:	80 80       	ld	r8, Z
    7ee2:	80 80       	ld	r8, Z
    7ee4:	80 80       	ld	r8, Z
    7ee6:	80 80       	ld	r8, Z
    7ee8:	80 80       	ld	r8, Z
    7eea:	80 80       	ld	r8, Z
    7eec:	80 80       	ld	r8, Z
    7eee:	80 80       	ld	r8, Z
    7ef0:	80 80       	ld	r8, Z
    7ef2:	80 80       	ld	r8, Z
    7ef4:	80 80       	ld	r8, Z
    7ef6:	80 80       	ld	r8, Z
    7ef8:	80 80       	ld	r8, Z
    7efa:	80 80       	ld	r8, Z
    7efc:	80 80       	ld	r8, Z
    7efe:	80 80       	ld	r8, Z
    7f00:	03 09       	sbc	r16, r3
    7f02:	13 1e       	adc	r1, r19
    7f04:	28 31       	cpi	r18, 0x18	; 24
    7f06:	3a 40       	sbci	r19, 0x0A	; 10
    7f08:	46 4c       	sbci	r20, 0xC6	; 198
    7f0a:	50 54       	subi	r21, 0x40	; 64
    7f0c:	58 5b       	subi	r21, 0xB8	; 184
    7f0e:	5e 61       	ori	r21, 0x1E	; 30
    7f10:	63 65       	ori	r22, 0x53	; 83
    7f12:	67 69       	ori	r22, 0x97	; 151
    7f14:	6b 6c       	ori	r22, 0xCB	; 203
    7f16:	6e 6f       	ori	r22, 0xFE	; 254
    7f18:	70 71       	andi	r23, 0x10	; 16
    7f1a:	72 73       	andi	r23, 0x32	; 50
    7f1c:	74 75       	andi	r23, 0x54	; 84
    7f1e:	76 77       	andi	r23, 0x76	; 118
    7f20:	77 78       	andi	r23, 0x87	; 135
    7f22:	79 79       	andi	r23, 0x99	; 153
    7f24:	7a 7a       	andi	r23, 0xAA	; 170
    7f26:	7b 7b       	andi	r23, 0xBB	; 187
    7f28:	7c 7c       	andi	r23, 0xCC	; 204
    7f2a:	7c 7d       	andi	r23, 0xDC	; 220
    7f2c:	7d 7d       	andi	r23, 0xDD	; 221
    7f2e:	7e 7e       	andi	r23, 0xEE	; 238
    7f30:	7e 7e       	andi	r23, 0xEE	; 238
    7f32:	7f 7f       	andi	r23, 0xFF	; 255
    7f34:	7f 7f       	andi	r23, 0xFF	; 255
    7f36:	7f 7f       	andi	r23, 0xFF	; 255
    7f38:	7f 7f       	andi	r23, 0xFF	; 255
    7f3a:	7f 7f       	andi	r23, 0xFF	; 255
    7f3c:	7f 7f       	andi	r23, 0xFF	; 255
    7f3e:	7f 7f       	andi	r23, 0xFF	; 255
    7f40:	7f 7f       	andi	r23, 0xFF	; 255
    7f42:	7f 7f       	andi	r23, 0xFF	; 255
    7f44:	7f 7f       	andi	r23, 0xFF	; 255
    7f46:	7f 7f       	andi	r23, 0xFF	; 255
    7f48:	7f 7f       	andi	r23, 0xFF	; 255
    7f4a:	7f 7f       	andi	r23, 0xFF	; 255
    7f4c:	7f 7e       	andi	r23, 0xEF	; 239
    7f4e:	7e 7e       	andi	r23, 0xEE	; 238
    7f50:	7e 7d       	andi	r23, 0xDE	; 222
    7f52:	7d 7d       	andi	r23, 0xDD	; 221
    7f54:	7c 7c       	andi	r23, 0xCC	; 204
    7f56:	7c 7b       	andi	r23, 0xBC	; 188
    7f58:	7b 7a       	andi	r23, 0xAB	; 171
    7f5a:	7a 79       	andi	r23, 0x9A	; 154
    7f5c:	79 78       	andi	r23, 0x89	; 137
    7f5e:	77 77       	andi	r23, 0x77	; 119
    7f60:	76 75       	andi	r23, 0x56	; 86
    7f62:	74 73       	andi	r23, 0x34	; 52
    7f64:	72 71       	andi	r23, 0x12	; 18
    7f66:	70 6f       	ori	r23, 0xF0	; 240
    7f68:	6e 6c       	ori	r22, 0xCE	; 206
    7f6a:	6b 69       	ori	r22, 0x9B	; 155
    7f6c:	67 65       	ori	r22, 0x57	; 87
    7f6e:	63 61       	ori	r22, 0x13	; 19
    7f70:	5e 5b       	subi	r21, 0xBE	; 190
    7f72:	58 54       	subi	r21, 0x48	; 72
    7f74:	50 4c       	sbci	r21, 0xC0	; 192
    7f76:	46 40       	sbci	r20, 0x06	; 6
    7f78:	3a 31       	cpi	r19, 0x1A	; 26
    7f7a:	28 1e       	adc	r2, r24
    7f7c:	13 09       	sbc	r17, r3
    7f7e:	03 00       	.word	0x0003	; ????
    7f80:	c6 cc       	rjmp	.-1652   	; 0x790e <waves+0xe>
    7f82:	d5 db       	rcall	.-2134   	; 0x772e <steptable+0x26>
    7f84:	df e3       	ldi	r29, 0x3F	; 63
    7f86:	e5 e7       	ldi	r30, 0x75	; 117
    7f88:	e9 ea       	ldi	r30, 0xA9	; 169
    7f8a:	eb ec       	ldi	r30, 0xCB	; 203
    7f8c:	ed ee       	ldi	r30, 0xED	; 237
    7f8e:	ef ef       	ldi	r30, 0xFF	; 255
    7f90:	f0 f0       	brcs	.+60     	; 0x7fce <waves+0x6ce>
    7f92:	f0 f1       	brcs	.+124    	; 0x8010 <waves+0x710>
    7f94:	f1 f1       	breq	.+124    	; 0x8012 <waves+0x712>
    7f96:	f1 f2       	breq	.-68     	; 0x7f54 <waves+0x654>
    7f98:	f2 f2       	brmi	.-68     	; 0x7f56 <waves+0x656>
    7f9a:	f2 f2       	brmi	.-68     	; 0x7f58 <waves+0x658>
    7f9c:	f2 f2       	brmi	.-68     	; 0x7f5a <waves+0x65a>
    7f9e:	f2 f3       	brmi	.-4      	; 0x7f9c <waves+0x69c>
    7fa0:	f3 f3       	brvs	.-4      	; 0x7f9e <waves+0x69e>
    7fa2:	f3 f3       	brvs	.-4      	; 0x7fa0 <waves+0x6a0>
    7fa4:	f3 f3       	brvs	.-4      	; 0x7fa2 <waves+0x6a2>
    7fa6:	f3 f3       	brvs	.-4      	; 0x7fa4 <waves+0x6a4>
    7fa8:	f3 f3       	brvs	.-4      	; 0x7fa6 <waves+0x6a6>
    7faa:	f3 f3       	brvs	.-4      	; 0x7fa8 <waves+0x6a8>
    7fac:	f3 f3       	brvs	.-4      	; 0x7faa <waves+0x6aa>
    7fae:	f3 f3       	brvs	.-4      	; 0x7fac <waves+0x6ac>
    7fb0:	f3 f3       	brvs	.-4      	; 0x7fae <waves+0x6ae>
    7fb2:	f3 f3       	brvs	.-4      	; 0x7fb0 <waves+0x6b0>
    7fb4:	f3 f3       	brvs	.-4      	; 0x7fb2 <waves+0x6b2>
    7fb6:	f3 f3       	brvs	.-4      	; 0x7fb4 <waves+0x6b4>
    7fb8:	f3 f3       	brvs	.-4      	; 0x7fb6 <waves+0x6b6>
    7fba:	f3 f3       	brvs	.-4      	; 0x7fb8 <waves+0x6b8>
    7fbc:	f3 f3       	brvs	.-4      	; 0x7fba <waves+0x6ba>
    7fbe:	f3 f3       	brvs	.-4      	; 0x7fbc <waves+0x6bc>
    7fc0:	f3 f3       	brvs	.-4      	; 0x7fbe <waves+0x6be>
    7fc2:	f3 f3       	brvs	.-4      	; 0x7fc0 <waves+0x6c0>
    7fc4:	f3 f3       	brvs	.-4      	; 0x7fc2 <waves+0x6c2>
    7fc6:	f3 f3       	brvs	.-4      	; 0x7fc4 <waves+0x6c4>
    7fc8:	f3 f3       	brvs	.-4      	; 0x7fc6 <waves+0x6c6>
    7fca:	f3 f3       	brvs	.-4      	; 0x7fc8 <waves+0x6c8>
    7fcc:	f3 f3       	brvs	.-4      	; 0x7fca <waves+0x6ca>
    7fce:	f3 f3       	brvs	.-4      	; 0x7fcc <waves+0x6cc>
    7fd0:	f3 f3       	brvs	.-4      	; 0x7fce <waves+0x6ce>
    7fd2:	f3 f3       	brvs	.-4      	; 0x7fd0 <waves+0x6d0>
    7fd4:	f3 f3       	brvs	.-4      	; 0x7fd2 <waves+0x6d2>
    7fd6:	f3 f3       	brvs	.-4      	; 0x7fd4 <waves+0x6d4>
    7fd8:	f3 f3       	brvs	.-4      	; 0x7fd6 <waves+0x6d6>
    7fda:	f3 f3       	brvs	.-4      	; 0x7fd8 <waves+0x6d8>
    7fdc:	f3 f3       	brvs	.-4      	; 0x7fda <waves+0x6da>
    7fde:	f3 f3       	brvs	.-4      	; 0x7fdc <waves+0x6dc>
    7fe0:	f2 f2       	brmi	.-68     	; 0x7f9e <waves+0x69e>
    7fe2:	f2 f2       	brmi	.-68     	; 0x7fa0 <waves+0x6a0>
    7fe4:	f2 f2       	brmi	.-68     	; 0x7fa2 <waves+0x6a2>
    7fe6:	f2 f2       	brmi	.-68     	; 0x7fa4 <waves+0x6a4>
    7fe8:	f1 f1       	breq	.+124    	; 0x8066 <waves+0x766>
    7fea:	f1 f1       	breq	.+124    	; 0x8068 <waves+0x768>
    7fec:	f0 f0       	brcs	.+60     	; 0x802a <waves+0x72a>
    7fee:	f0 ef       	ldi	r31, 0xF0	; 240
    7ff0:	ef ee       	ldi	r30, 0xEF	; 239
    7ff2:	ed ec       	ldi	r30, 0xCD	; 205
    7ff4:	eb ea       	ldi	r30, 0xAB	; 171
    7ff6:	e9 e7       	ldi	r30, 0x79	; 121
    7ff8:	e5 e3       	ldi	r30, 0x35	; 53
    7ffa:	df db       	rcall	.-2114   	; 0x77ba <steptable+0xb2>
    7ffc:	d5 cc       	rjmp	.-1622   	; 0x79a8 <waves+0xa8>
    7ffe:	c6 00       	.word	0x00c6	; ????
    8000:	00 28       	or	r0, r0
    8002:	3d 42       	sbci	r19, 0x2D	; 45
    8004:	30 2d       	mov	r19, r0
    8006:	2c 2b       	or	r18, r28
    8008:	2c 2d       	mov	r18, r12
    800a:	2e 2f       	mov	r18, r30
    800c:	30 32       	cpi	r19, 0x20	; 32
    800e:	33 35       	cpi	r19, 0x53	; 83
    8010:	37 39       	cpi	r19, 0x97	; 151
    8012:	3b 3d       	cpi	r19, 0xDB	; 219
    8014:	3f 41       	sbci	r19, 0x1F	; 31
    8016:	43 45       	sbci	r20, 0x53	; 83
    8018:	48 4a       	sbci	r20, 0xA8	; 168
    801a:	4c 4e       	sbci	r20, 0xEC	; 236
    801c:	50 53       	subi	r21, 0x30	; 48
    801e:	55 57       	subi	r21, 0x75	; 117
    8020:	59 5b       	subi	r21, 0xB9	; 185
    8022:	5d 5f       	subi	r21, 0xFD	; 253
    8024:	61 63       	ori	r22, 0x31	; 49
    8026:	65 67       	ori	r22, 0x75	; 117
    8028:	69 6b       	ori	r22, 0xB9	; 185
    802a:	6c 6e       	ori	r22, 0xEC	; 236
    802c:	70 71       	andi	r23, 0x10	; 16
    802e:	73 74       	andi	r23, 0x43	; 67
    8030:	75 77       	andi	r23, 0x75	; 117
    8032:	78 79       	andi	r23, 0x98	; 152
    8034:	7a 7b       	andi	r23, 0xBA	; 186
    8036:	7c 7d       	andi	r23, 0xDC	; 220
    8038:	7d 7e       	andi	r23, 0xED	; 237
    803a:	7e 7f       	andi	r23, 0xFE	; 254
    803c:	7f 7f       	andi	r23, 0xFF	; 255
    803e:	7f 7f       	andi	r23, 0xFF	; 255
    8040:	7f 7f       	andi	r23, 0xFF	; 255
    8042:	7f 7f       	andi	r23, 0xFF	; 255
    8044:	7f 7f       	andi	r23, 0xFF	; 255
    8046:	7e 7e       	andi	r23, 0xEE	; 238
    8048:	7d 7d       	andi	r23, 0xDD	; 221
    804a:	7c 7b       	andi	r23, 0xBC	; 188
    804c:	7a 79       	andi	r23, 0x9A	; 154
    804e:	78 77       	andi	r23, 0x78	; 120
    8050:	75 74       	andi	r23, 0x45	; 69
    8052:	73 71       	andi	r23, 0x13	; 19
    8054:	70 6e       	ori	r23, 0xE0	; 224
    8056:	6c 6b       	ori	r22, 0xBC	; 188
    8058:	69 67       	ori	r22, 0x79	; 121
    805a:	65 63       	ori	r22, 0x35	; 53
    805c:	61 5f       	subi	r22, 0xF1	; 241
    805e:	5d 5b       	subi	r21, 0xBD	; 189
    8060:	59 57       	subi	r21, 0x79	; 121
    8062:	55 53       	subi	r21, 0x35	; 53
    8064:	50 4e       	sbci	r21, 0xE0	; 224
    8066:	4c 4a       	sbci	r20, 0xAC	; 172
    8068:	48 45       	sbci	r20, 0x58	; 88
    806a:	43 41       	sbci	r20, 0x13	; 19
    806c:	3f 3d       	cpi	r19, 0xDF	; 223
    806e:	3b 39       	cpi	r19, 0x9B	; 155
    8070:	37 35       	cpi	r19, 0x57	; 87
    8072:	33 32       	cpi	r19, 0x23	; 35
    8074:	30 2f       	mov	r19, r16
    8076:	2e 2d       	mov	r18, r14
    8078:	2c 2b       	or	r18, r28
    807a:	2c 2d       	mov	r18, r12
    807c:	30 42       	sbci	r19, 0x20	; 32
    807e:	3d 28       	or	r3, r13
    8080:	00 e9       	ldi	r16, 0x90	; 144
    8082:	e5 fe       	sbrs	r14, 5
    8084:	d4 d7       	rcall	.+4008   	; 0x902e <init_enemy_shark+0x7e>
    8086:	d7 d7       	rcall	.+4014   	; 0x9036 <init_enemy_shark+0x86>
    8088:	d6 d4       	rcall	.+2476   	; 0x8a36 <LBCollides+0x44>
    808a:	d2 d0       	rcall	.+420    	; 0x8230 <waves+0x930>
    808c:	ce cc       	rjmp	.-1636   	; 0x7a2a <waves+0x12a>
    808e:	ca c8       	rjmp	.-3692   	; 0x7224 <TriggerNote+0x7e>
    8090:	c6 c3       	rjmp	.+1932   	; 0x881e <LBGetJoyPadState+0xe>
    8092:	c1 bf       	out	0x31, r28	; 49
    8094:	bd ba       	out	0x1d, r11	; 29
    8096:	b8 b6       	in	r11, 0x38	; 56
    8098:	b4 b1       	in	r27, 0x04	; 4
    809a:	af ad       	ldd	r26, Y+63	; 0x3f
    809c:	ab a9       	ldd	r26, Y+51	; 0x33
    809e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    80a2:	9f 9e       	mul	r9, r31
    80a4:	9c 9a       	sbi	0x13, 4	; 19
    80a6:	99 97       	sbiw	r26, 0x29	; 41
    80a8:	95 94       	asr	r9
    80aa:	93 91       	.word	0x9193	; ????
    80ac:	90 8f       	std	Z+24, r25	; 0x18
    80ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    80b0:	8b 8a       	std	Y+19, r8	; 0x13
    80b2:	89 88       	ldd	r8, Y+17	; 0x11
    80b4:	88 87       	std	Y+8, r24	; 0x08
    80b6:	86 85       	ldd	r24, Z+14	; 0x0e
    80b8:	85 84       	ldd	r8, Z+13	; 0x0d
    80ba:	84 84       	ldd	r8, Z+12	; 0x0c
    80bc:	83 83       	std	Z+3, r24	; 0x03
    80be:	83 83       	std	Z+3, r24	; 0x03
    80c0:	83 83       	std	Z+3, r24	; 0x03
    80c2:	83 83       	std	Z+3, r24	; 0x03
    80c4:	83 84       	ldd	r8, Z+11	; 0x0b
    80c6:	84 84       	ldd	r8, Z+12	; 0x0c
    80c8:	85 85       	ldd	r24, Z+13	; 0x0d
    80ca:	86 87       	std	Z+14, r24	; 0x0e
    80cc:	88 88       	ldd	r8, Y+16	; 0x10
    80ce:	89 8a       	std	Y+17, r8	; 0x11
    80d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    80d2:	8d 8f       	std	Y+29, r24	; 0x1d
    80d4:	90 91 93 94 	lds	r25, 0x9493
    80d8:	95 97       	sbiw	r26, 0x25	; 37
    80da:	99 9a       	sbi	0x13, 1	; 19
    80dc:	9c 9e       	mul	r9, r28
    80de:	9f a1       	ldd	r25, Y+39	; 0x27
    80e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    80e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    80e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    80e6:	af b1       	in	r26, 0x0f	; 15
    80e8:	b4 b6       	in	r11, 0x34	; 52
    80ea:	b8 ba       	out	0x18, r11	; 24
    80ec:	bd bf       	out	0x3d, r27	; 61
    80ee:	c1 c3       	rjmp	.+1922   	; 0x8872 <LBGetJoyPadState+0x62>
    80f0:	c6 c8       	rjmp	.-3700   	; 0x727e <ProcessMusic+0x58>
    80f2:	ca cc       	rjmp	.-1644   	; 0x7a88 <waves+0x188>
    80f4:	ce d0       	rcall	.+412    	; 0x8292 <waves+0x992>
    80f6:	d2 d4       	rcall	.+2468   	; 0x8a9c <LBMapSprite+0x14>
    80f8:	d6 d7       	rcall	.+4012   	; 0x90a6 <clear_overlay+0x4>
    80fa:	d7 d7       	rcall	.+4014   	; 0x90aa <clear_overlay+0x8>
    80fc:	d4 fe       	sbrs	r13, 4
    80fe:	e5 e9       	ldi	r30, 0x95	; 149
    8100:	f9 f8       	.word	0xf8f9	; ????
    8102:	f9 f5       	brne	.+126    	; 0x8182 <waves+0x882>
    8104:	eb e1       	ldi	r30, 0x1B	; 27
    8106:	dd de       	rcall	.-582    	; 0x7ec2 <waves+0x5c2>
    8108:	e0 e2       	ldi	r30, 0x20	; 32
    810a:	e4 e5       	ldi	r30, 0x54	; 84
    810c:	e6 e5       	ldi	r30, 0x56	; 86
    810e:	e4 e2       	ldi	r30, 0x24	; 36
    8110:	de d9       	rcall	.-3140   	; 0x74ce <ProcessMusic+0x2a8>
    8112:	d2 ca       	rjmp	.-2652   	; 0x76b8 <smw1>
    8114:	c1 b7       	in	r28, 0x31	; 49
    8116:	ac a2       	std	Y+36, r10	; 0x24
    8118:	99 91       	ld	r25, Y+
    811a:	8a 86       	std	Y+10, r8	; 0x0a
    811c:	83 81       	ldd	r24, Z+3	; 0x03
    811e:	80 80       	ld	r8, Z
    8120:	81 82       	std	Z+1, r8	; 0x01
    8122:	83 85       	ldd	r24, Z+11	; 0x0b
    8124:	86 88       	ldd	r8, Z+22	; 0x16
    8126:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8128:	8d 8f       	std	Y+29, r24	; 0x1d
    812a:	90 92 93 95 	sts	0x9593, r9
    812e:	96 97       	sbiw	r26, 0x26	; 38
    8130:	98 99       	sbic	0x13, 0	; 19
    8132:	9a 9b       	sbis	0x13, 2	; 19
    8134:	9b 9c       	mul	r9, r11
    8136:	9d 9d       	mul	r25, r13
    8138:	9d 9e       	mul	r9, r29
    813a:	9e 9e       	mul	r9, r30
    813c:	9f 9f       	mul	r25, r31
    813e:	9f 9f       	mul	r25, r31
    8140:	9f 9f       	mul	r25, r31
    8142:	9f 9e       	mul	r9, r31
    8144:	9e 9e       	mul	r9, r30
    8146:	9d 9d       	mul	r25, r13
    8148:	9d 9c       	mul	r9, r13
    814a:	9b 9b       	sbis	0x13, 3	; 19
    814c:	9a 99       	sbic	0x13, 2	; 19
    814e:	98 97       	sbiw	r26, 0x28	; 40
    8150:	96 95       	lsr	r25
    8152:	93 92       	.word	0x9293	; ????
    8154:	90 8f       	std	Z+24, r25	; 0x18
    8156:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8158:	8a 88       	ldd	r8, Y+18	; 0x12
    815a:	86 85       	ldd	r24, Z+14	; 0x0e
    815c:	83 82       	std	Z+3, r8	; 0x03
    815e:	81 80       	ldd	r8, Z+1	; 0x01
    8160:	80 81       	ld	r24, Z
    8162:	83 86       	std	Z+11, r8	; 0x0b
    8164:	8a 91       	ld	r24, -Y
    8166:	99 a2       	std	Y+33, r9	; 0x21
    8168:	ac b7       	in	r26, 0x3c	; 60
    816a:	c1 ca       	rjmp	.-2686   	; 0x76ee <esmw+0x20>
    816c:	d2 d9       	rcall	.-3164   	; 0x7512 <ProcessMusic+0x2ec>
    816e:	de e2       	ldi	r29, 0x2E	; 46
    8170:	e4 e5       	ldi	r30, 0x54	; 84
    8172:	e6 e5       	ldi	r30, 0x56	; 86
    8174:	e4 e2       	ldi	r30, 0x24	; 36
    8176:	e0 de       	rcall	.-576    	; 0x7f38 <waves+0x638>
    8178:	dd e1       	ldi	r29, 0x1D	; 29
    817a:	eb f5       	brvc	.+122    	; 0x81f6 <waves+0x8f6>
    817c:	f9 f8       	.word	0xf8f9	; ????
    817e:	f9 00       	.word	0x00f9	; ????
    8180:	07 08       	sbc	r0, r7
    8182:	07 0b       	sbc	r16, r23
    8184:	15 1f       	adc	r17, r21
    8186:	23 22       	and	r2, r19
    8188:	20 1e       	adc	r2, r16
    818a:	1c 1b       	sub	r17, r28
    818c:	1a 1b       	sub	r17, r26
    818e:	1c 1e       	adc	r1, r28
    8190:	22 27       	eor	r18, r18
    8192:	2e 36       	cpi	r18, 0x6E	; 110
    8194:	3f 49       	sbci	r19, 0x9F	; 159
    8196:	54 5e       	subi	r21, 0xE4	; 228
    8198:	67 6f       	ori	r22, 0xF7	; 247
    819a:	76 7a       	andi	r23, 0xA6	; 166
    819c:	7e 7f       	andi	r23, 0xFE	; 254
    819e:	7f 7f       	andi	r23, 0xFF	; 255
    81a0:	7f 7e       	andi	r23, 0xEF	; 239
    81a2:	7d 7b       	andi	r23, 0xBD	; 189
    81a4:	7a 78       	andi	r23, 0x8A	; 138
    81a6:	76 74       	andi	r23, 0x46	; 70
    81a8:	73 71       	andi	r23, 0x13	; 19
    81aa:	70 6e       	ori	r23, 0xE0	; 224
    81ac:	6d 6b       	ori	r22, 0xBD	; 189
    81ae:	6a 69       	ori	r22, 0x9A	; 154
    81b0:	68 67       	ori	r22, 0x78	; 120
    81b2:	66 65       	ori	r22, 0x56	; 86
    81b4:	65 64       	ori	r22, 0x45	; 69
    81b6:	64 63       	ori	r22, 0x34	; 52
    81b8:	63 62       	ori	r22, 0x23	; 35
    81ba:	62 62       	ori	r22, 0x22	; 34
    81bc:	61 61       	ori	r22, 0x11	; 17
    81be:	61 61       	ori	r22, 0x11	; 17
    81c0:	61 61       	ori	r22, 0x11	; 17
    81c2:	61 62       	ori	r22, 0x21	; 33
    81c4:	62 62       	ori	r22, 0x22	; 34
    81c6:	63 63       	ori	r22, 0x33	; 51
    81c8:	63 64       	ori	r22, 0x43	; 67
    81ca:	65 65       	ori	r22, 0x55	; 85
    81cc:	66 67       	ori	r22, 0x76	; 118
    81ce:	68 69       	ori	r22, 0x98	; 152
    81d0:	6a 6b       	ori	r22, 0xBA	; 186
    81d2:	6d 6e       	ori	r22, 0xED	; 237
    81d4:	70 71       	andi	r23, 0x10	; 16
    81d6:	73 74       	andi	r23, 0x43	; 67
    81d8:	76 78       	andi	r23, 0x86	; 134
    81da:	7a 7b       	andi	r23, 0xBA	; 186
    81dc:	7d 7e       	andi	r23, 0xED	; 237
    81de:	7f 7f       	andi	r23, 0xFF	; 255
    81e0:	7f 7f       	andi	r23, 0xFF	; 255
    81e2:	7e 7a       	andi	r23, 0xAE	; 174
    81e4:	76 6f       	ori	r23, 0xF6	; 246
    81e6:	67 5e       	subi	r22, 0xE7	; 231
    81e8:	54 49       	sbci	r21, 0x94	; 148
    81ea:	3f 36       	cpi	r19, 0x6F	; 111
    81ec:	2e 27       	eor	r18, r30
    81ee:	22 1e       	adc	r2, r18
    81f0:	1c 1b       	sub	r17, r28
    81f2:	1a 1b       	sub	r17, r26
    81f4:	1c 1e       	adc	r1, r28
    81f6:	20 22       	and	r2, r16
    81f8:	23 1f       	adc	r18, r19
    81fa:	15 0b       	sbc	r17, r21
    81fc:	07 08       	sbc	r0, r7
    81fe:	07 00       	.word	0x0007	; ????
    8200:	1f 31       	cpi	r17, 0x1F	; 31
    8202:	3d 44       	sbci	r19, 0x4D	; 77
    8204:	4e 53       	subi	r20, 0x3E	; 62
    8206:	54 56       	subi	r21, 0x64	; 100
    8208:	5a 5f       	subi	r21, 0xFA	; 250
    820a:	64 69       	ori	r22, 0x94	; 148
    820c:	6e 74       	andi	r22, 0x4E	; 78
    820e:	76 79       	andi	r23, 0x96	; 150
    8210:	7c 7f       	andi	r23, 0xFC	; 252
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7c       	andi	r23, 0xCF	; 207
    827c:	78 71       	andi	r23, 0x18	; 24
    827e:	68 4c       	sbci	r22, 0xC8	; 200
    8280:	2c 1c       	adc	r2, r12
    8282:	12 0c       	add	r1, r2
    8284:	0a 0b       	sbc	r16, r26
    8286:	0a 05       	cpc	r16, r10
    8288:	fd f3       	brhs	.-2      	; 0x8288 <waves+0x988>
    828a:	e9 df       	rcall	.-46     	; 0x825e <waves+0x95e>
    828c:	d4 ca       	rjmp	.-2648   	; 0x7836 <steptable+0x12e>
    828e:	c0 b7       	in	r28, 0x30	; 48
    8290:	ae a6       	std	Y+46, r10	; 0x2e
    8292:	9e 97       	sbiw	r26, 0x2e	; 46
    8294:	91 8b       	std	Z+17, r25	; 0x11
    8296:	86 85       	ldd	r24, Z+14	; 0x0e
    8298:	82 80       	ldd	r8, Z+2	; 0x02
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 87       	std	Z+8, r24	; 0x08
    82f6:	91 9d       	mul	r25, r1
    82f8:	ac c4       	rjmp	.+2392   	; 0x8c52 <init_default_high_scores+0x24>
    82fa:	cb d4       	rcall	.+2454   	; 0x8c92 <init_player_state+0x10>
    82fc:	dd f2       	brhs	.-74     	; 0x82b4 <waves+0x9b4>
    82fe:	fa fa       	.word	0xfafa	; ????

00008300 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8300:	80 91 f3 0c 	lds	r24, 0x0CF3
    8304:	90 91 7e 0d 	lds	r25, 0x0D7E
    8308:	89 17       	cp	r24, r25
    830a:	78 f4       	brcc	.+30     	; 0x832a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    830c:	e8 2f       	mov	r30, r24
    830e:	f0 e0       	ldi	r31, 0x00	; 0
    8310:	9f 01       	movw	r18, r30
    8312:	22 0f       	add	r18, r18
    8314:	33 1f       	adc	r19, r19
    8316:	e2 0f       	add	r30, r18
    8318:	f3 1f       	adc	r31, r19
    831a:	e0 5b       	subi	r30, 0xB0	; 176
    831c:	f3 4f       	sbci	r31, 0xF3	; 243
    831e:	a0 81       	ld	r26, Z
    8320:	b1 81       	ldd	r27, Z+1	; 0x01
    8322:	92 81       	ldd	r25, Z+2	; 0x02
    8324:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8326:	8f 5f       	subi	r24, 0xFF	; 255
    8328:	ed cf       	rjmp	.-38     	; 0x8304 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    832a:	08 95       	ret

0000832c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    832c:	2f 92       	push	r2
    832e:	3f 92       	push	r3
    8330:	4f 92       	push	r4
    8332:	5f 92       	push	r5
    8334:	6f 92       	push	r6
    8336:	7f 92       	push	r7
    8338:	8f 92       	push	r8
    833a:	9f 92       	push	r9
    833c:	af 92       	push	r10
    833e:	bf 92       	push	r11
    8340:	cf 92       	push	r12
    8342:	df 92       	push	r13
    8344:	ef 92       	push	r14
    8346:	ff 92       	push	r15
    8348:	0f 93       	push	r16
    834a:	1f 93       	push	r17
    834c:	cf 93       	push	r28
    834e:	df 93       	push	r29
    8350:	00 d0       	rcall	.+0      	; 0x8352 <ProcessSprites+0x26>
    8352:	00 d0       	rcall	.+0      	; 0x8354 <ProcessSprites+0x28>
    8354:	cd b7       	in	r28, 0x3d	; 61
    8356:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8358:	80 91 00 05 	lds	r24, 0x0500
    835c:	88 23       	and	r24, r24
    835e:	09 f4       	brne	.+2      	; 0x8362 <ProcessSprites+0x36>
    8360:	e0 c0       	rjmp	.+448    	; 0x8522 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8362:	80 91 f2 0c 	lds	r24, 0x0CF2
    8366:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    836a:	80 93 7e 0d 	sts	0x0D7E, r24
    836e:	e0 e1       	ldi	r30, 0x10	; 16
    8370:	ce 2e       	mov	r12, r30
    8372:	e5 e0       	ldi	r30, 0x05	; 5
    8374:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8376:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8378:	f6 01       	movw	r30, r12
    837a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    837c:	20 3e       	cpi	r18, 0xE0	; 224
    837e:	09 f4       	brne	.+2      	; 0x8382 <ProcessSprites+0x56>
    8380:	b1 c0       	rjmp	.+354    	; 0x84e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8382:	80 91 b2 0c 	lds	r24, 0x0CB2
    8386:	90 e0       	ldi	r25, 0x00	; 0
    8388:	82 0f       	add	r24, r18
    838a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    838c:	41 81       	ldd	r20, Z+1	; 0x01
    838e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8392:	30 e0       	ldi	r19, 0x00	; 0
    8394:	24 0f       	add	r18, r20
    8396:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8398:	ac 01       	movw	r20, r24
    839a:	73 e0       	ldi	r23, 0x03	; 3
    839c:	56 95       	lsr	r21
    839e:	47 95       	ror	r20
    83a0:	7a 95       	dec	r23
    83a2:	e1 f7       	brne	.-8      	; 0x839c <ProcessSprites+0x70>
    83a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    83a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    83a8:	11 f0       	breq	.+4      	; 0x83ae <ProcessSprites+0x82>
    83aa:	92 e0       	ldi	r25, 0x02	; 2
    83ac:	01 c0       	rjmp	.+2      	; 0x83b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    83ae:	91 e0       	ldi	r25, 0x01	; 1
    83b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    83b2:	a9 01       	movw	r20, r18
    83b4:	63 e0       	ldi	r22, 0x03	; 3
    83b6:	56 95       	lsr	r21
    83b8:	47 95       	ror	r20
    83ba:	6a 95       	dec	r22
    83bc:	e1 f7       	brne	.-8      	; 0x83b6 <ProcessSprites+0x8a>
    83be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    83c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    83c2:	19 f0       	breq	.+6      	; 0x83ca <ProcessSprites+0x9e>
    83c4:	52 e0       	ldi	r21, 0x02	; 2
    83c6:	35 2e       	mov	r3, r21
    83c8:	02 c0       	rjmp	.+4      	; 0x83ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    83ca:	33 24       	eor	r3, r3
    83cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    83ce:	30 e0       	ldi	r19, 0x00	; 0
    83d0:	32 2f       	mov	r19, r18
    83d2:	22 27       	eor	r18, r18
    83d4:	f9 01       	movw	r30, r18
    83d6:	e8 0f       	add	r30, r24
    83d8:	f1 1d       	adc	r31, r1
    83da:	fc 83       	std	Y+4, r31	; 0x04
    83dc:	eb 83       	std	Y+3, r30	; 0x03
    83de:	e1 2c       	mov	r14, r1
    83e0:	f1 2c       	mov	r15, r1
    83e2:	be 2c       	mov	r11, r14
    83e4:	aa 24       	eor	r10, r10
    83e6:	26 2c       	mov	r2, r6
    83e8:	45 2c       	mov	r4, r5
    83ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    83ec:	84 2c       	mov	r8, r4
    83ee:	91 2c       	mov	r9, r1
    83f0:	84 2d       	mov	r24, r4
    83f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    83f6:	42 2f       	mov	r20, r18
    83f8:	50 e0       	ldi	r21, 0x00	; 0
    83fa:	44 0f       	add	r20, r20
    83fc:	55 1f       	adc	r21, r21
    83fe:	84 16       	cp	r8, r20
    8400:	95 06       	cpc	r9, r21
    8402:	14 f0       	brlt	.+4      	; 0x8408 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8404:	22 0f       	add	r18, r18
    8406:	03 c0       	rjmp	.+6      	; 0x840e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8408:	42 16       	cp	r4, r18
    840a:	10 f0       	brcs	.+4      	; 0x8410 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    840c:	84 2d       	mov	r24, r4
    840e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8410:	ff e1       	ldi	r31, 0x1F	; 31
    8412:	f2 15       	cp	r31, r2
    8414:	18 f4       	brcc	.+6      	; 0x841c <ProcessSprites+0xf0>
    8416:	00 ee       	ldi	r16, 0xE0	; 224
    8418:	02 0d       	add	r16, r2
    841a:	01 c0       	rjmp	.+2      	; 0x841e <ProcessSprites+0xf2>
    841c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    841e:	28 2f       	mov	r18, r24
    8420:	26 95       	lsr	r18
    8422:	26 95       	lsr	r18
    8424:	26 95       	lsr	r18
    8426:	10 e0       	ldi	r17, 0x00	; 0
    8428:	40 e2       	ldi	r20, 0x20	; 32
    842a:	24 9f       	mul	r18, r20
    842c:	00 0d       	add	r16, r0
    842e:	11 1d       	adc	r17, r1
    8430:	11 24       	eor	r1, r1
    8432:	23 e0       	ldi	r18, 0x03	; 3
    8434:	00 0f       	add	r16, r16
    8436:	11 1f       	adc	r17, r17
    8438:	2a 95       	dec	r18
    843a:	e1 f7       	brne	.-8      	; 0x8434 <ProcessSprites+0x108>
    843c:	87 70       	andi	r24, 0x07	; 7
    843e:	08 0f       	add	r16, r24
    8440:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8442:	00 50       	subi	r16, 0x00	; 0
    8444:	1f 4f       	sbci	r17, 0xFF	; 255
    8446:	f8 01       	movw	r30, r16
    8448:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    844a:	81 e0       	ldi	r24, 0x01	; 1
    844c:	7c 31       	cpi	r23, 0x1C	; 28
    844e:	08 f4       	brcc	.+2      	; 0x8452 <ProcessSprites+0x126>
    8450:	80 e0       	ldi	r24, 0x00	; 0
    8452:	21 e0       	ldi	r18, 0x01	; 1
    8454:	30 91 f3 0c 	lds	r19, 0x0CF3
    8458:	73 17       	cp	r23, r19
    845a:	18 f0       	brcs	.+6      	; 0x8462 <ProcessSprites+0x136>
    845c:	20 e0       	ldi	r18, 0x00	; 0
    845e:	88 23       	and	r24, r24
    8460:	51 f1       	breq	.+84     	; 0x84b6 <ProcessSprites+0x18a>
    8462:	60 91 7e 0d 	lds	r22, 0x0D7E
    8466:	6c 31       	cpi	r22, 0x1C	; 28
    8468:	20 f5       	brcc	.+72     	; 0x84b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    846a:	88 23       	and	r24, r24
    846c:	31 f0       	breq	.+12     	; 0x847a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    846e:	84 ee       	ldi	r24, 0xE4	; 228
    8470:	87 0f       	add	r24, r23
    8472:	7a 83       	std	Y+2, r23	; 0x02
    8474:	0e 94 67 31 	call	0x62ce	; 0x62ce <CopyFlashTile>
    8478:	06 c0       	rjmp	.+12     	; 0x8486 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    847a:	22 23       	and	r18, r18
    847c:	29 f0       	breq	.+10     	; 0x8488 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    847e:	87 2f       	mov	r24, r23
    8480:	7a 83       	std	Y+2, r23	; 0x02
    8482:	0e 94 f6 31 	call	0x63ec	; 0x63ec <CopyRamTile>
    8486:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8488:	80 91 7e 0d 	lds	r24, 0x0D7E
    848c:	e8 2f       	mov	r30, r24
    848e:	f0 e0       	ldi	r31, 0x00	; 0
    8490:	9f 01       	movw	r18, r30
    8492:	22 0f       	add	r18, r18
    8494:	33 1f       	adc	r19, r19
    8496:	e2 0f       	add	r30, r18
    8498:	f3 1f       	adc	r31, r19
    849a:	e0 5b       	subi	r30, 0xB0	; 176
    849c:	f3 4f       	sbci	r31, 0xF3	; 243
    849e:	11 83       	std	Z+1, r17	; 0x01
    84a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    84a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    84a4:	f8 01       	movw	r30, r16
    84a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    84a8:	21 e0       	ldi	r18, 0x01	; 1
    84aa:	28 0f       	add	r18, r24
    84ac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    84b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    84b2:	7c 31       	cpi	r23, 0x1C	; 28
    84b4:	38 f4       	brcc	.+14     	; 0x84c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    84b6:	2b 81       	ldd	r18, Y+3	; 0x03
    84b8:	3c 81       	ldd	r19, Y+4	; 0x04
    84ba:	a5 01       	movw	r20, r10
    84bc:	67 2f       	mov	r22, r23
    84be:	87 2d       	mov	r24, r7
    84c0:	0e 94 83 32 	call	0x6506	; 0x6506 <BlitSprite>
    84c4:	ff ef       	ldi	r31, 0xFF	; 255
    84c6:	af 1a       	sub	r10, r31
    84c8:	bf 0a       	sbc	r11, r31
    84ca:	23 94       	inc	r2
    84cc:	82 2d       	mov	r24, r2
    84ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    84d0:	99 81       	ldd	r25, Y+1	; 0x01
    84d2:	89 17       	cp	r24, r25
    84d4:	08 f4       	brcc	.+2      	; 0x84d8 <ProcessSprites+0x1ac>
    84d6:	8c cf       	rjmp	.-232    	; 0x83f0 <ProcessSprites+0xc4>
    84d8:	ef ef       	ldi	r30, 0xFF	; 255
    84da:	ee 1a       	sub	r14, r30
    84dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    84de:	e3 14       	cp	r14, r3
    84e0:	08 f4       	brcc	.+2      	; 0x84e4 <ProcessSprites+0x1b8>
    84e2:	7f cf       	rjmp	.-258    	; 0x83e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    84e4:	73 94       	inc	r7
    84e6:	f4 e0       	ldi	r31, 0x04	; 4
    84e8:	cf 0e       	add	r12, r31
    84ea:	d1 1c       	adc	r13, r1
    84ec:	40 e1       	ldi	r20, 0x10	; 16
    84ee:	74 12       	cpse	r7, r20
    84f0:	43 cf       	rjmp	.-378    	; 0x8378 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    84f2:	0f 90       	pop	r0
    84f4:	0f 90       	pop	r0
    84f6:	0f 90       	pop	r0
    84f8:	0f 90       	pop	r0
    84fa:	df 91       	pop	r29
    84fc:	cf 91       	pop	r28
    84fe:	1f 91       	pop	r17
    8500:	0f 91       	pop	r16
    8502:	ff 90       	pop	r15
    8504:	ef 90       	pop	r14
    8506:	df 90       	pop	r13
    8508:	cf 90       	pop	r12
    850a:	bf 90       	pop	r11
    850c:	af 90       	pop	r10
    850e:	9f 90       	pop	r9
    8510:	8f 90       	pop	r8
    8512:	7f 90       	pop	r7
    8514:	6f 90       	pop	r6
    8516:	5f 90       	pop	r5
    8518:	4f 90       	pop	r4
    851a:	3f 90       	pop	r3
    851c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    851e:	0c 94 80 41 	jmp	0x8300	; 0x8300 <RestoreBackground>

	}
    8522:	0f 90       	pop	r0
    8524:	0f 90       	pop	r0
    8526:	0f 90       	pop	r0
    8528:	0f 90       	pop	r0
    852a:	df 91       	pop	r29
    852c:	cf 91       	pop	r28
    852e:	1f 91       	pop	r17
    8530:	0f 91       	pop	r16
    8532:	ff 90       	pop	r15
    8534:	ef 90       	pop	r14
    8536:	df 90       	pop	r13
    8538:	cf 90       	pop	r12
    853a:	bf 90       	pop	r11
    853c:	af 90       	pop	r10
    853e:	9f 90       	pop	r9
    8540:	8f 90       	pop	r8
    8542:	7f 90       	pop	r7
    8544:	6f 90       	pop	r6
    8546:	5f 90       	pop	r5
    8548:	4f 90       	pop	r4
    854a:	3f 90       	pop	r3
    854c:	2f 90       	pop	r2
    854e:	08 95       	ret

00008550 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8550:	90 91 b3 0c 	lds	r25, 0x0CB3
    8554:	96 0f       	add	r25, r22
    8556:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    855a:	20 91 b2 0c 	lds	r18, 0x0CB2
    855e:	82 0f       	add	r24, r18
    8560:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    8564:	80 91 b4 0c 	lds	r24, 0x0CB4
    8568:	80 32       	cpi	r24, 0x20	; 32
    856a:	b0 f4       	brcc	.+44     	; 0x8598 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    856c:	29 2f       	mov	r18, r25
    856e:	30 e0       	ldi	r19, 0x00	; 0
    8570:	78 e0       	ldi	r23, 0x08	; 8
    8572:	87 9f       	mul	r24, r23
    8574:	a0 01       	movw	r20, r0
    8576:	11 24       	eor	r1, r1
    8578:	24 17       	cp	r18, r20
    857a:	35 07       	cpc	r19, r21
    857c:	6c f0       	brlt	.+26     	; 0x8598 <Scroll+0x48>
				if(dy>=0){	
    857e:	67 fd       	sbrc	r22, 7
    8580:	05 c0       	rjmp	.+10     	; 0x858c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8582:	28 ef       	ldi	r18, 0xF8	; 248
    8584:	82 9f       	mul	r24, r18
    8586:	90 0d       	add	r25, r0
    8588:	11 24       	eor	r1, r1
    858a:	04 c0       	rjmp	.+8      	; 0x8594 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    858c:	78 e0       	ldi	r23, 0x08	; 8
    858e:	87 9f       	mul	r24, r23
    8590:	90 0d       	add	r25, r0
    8592:	11 24       	eor	r1, r1
    8594:	90 93 b3 0c 	sts	0x0CB3, r25
    8598:	08 95       	ret

0000859a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    859a:	e0 e1       	ldi	r30, 0x10	; 16
    859c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    859e:	80 ee       	ldi	r24, 0xE0	; 224
    85a0:	80 83       	st	Z, r24
    85a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    85a4:	95 e0       	ldi	r25, 0x05	; 5
    85a6:	e0 35       	cpi	r30, 0x50	; 80
    85a8:	f9 07       	cpc	r31, r25
    85aa:	d1 f7       	brne	.-12     	; 0x85a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    85ac:	80 e2       	ldi	r24, 0x20	; 32
    85ae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    85b2:	10 92 af 0c 	sts	0x0CAF, r1
    85b6:	08 95       	ret

000085b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    85b8:	2f 92       	push	r2
    85ba:	3f 92       	push	r3
    85bc:	4f 92       	push	r4
    85be:	5f 92       	push	r5
    85c0:	6f 92       	push	r6
    85c2:	7f 92       	push	r7
    85c4:	8f 92       	push	r8
    85c6:	9f 92       	push	r9
    85c8:	af 92       	push	r10
    85ca:	bf 92       	push	r11
    85cc:	cf 92       	push	r12
    85ce:	df 92       	push	r13
    85d0:	ef 92       	push	r14
    85d2:	ff 92       	push	r15
    85d4:	0f 93       	push	r16
    85d6:	1f 93       	push	r17
    85d8:	cf 93       	push	r28
    85da:	df 93       	push	r29
    85dc:	00 d0       	rcall	.+0      	; 0x85de <DrawMap+0x26>
    85de:	1f 92       	push	r1
    85e0:	cd b7       	in	r28, 0x3d	; 61
    85e2:	de b7       	in	r29, 0x3e	; 62
    85e4:	28 2f       	mov	r18, r24
    85e6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    85e8:	fa 01       	movw	r30, r20
    85ea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    85ec:	31 96       	adiw	r30, 0x01	; 1
    85ee:	34 90       	lpm	r3, Z
    85f0:	42 2c       	mov	r4, r2
    85f2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    85f4:	e1 2c       	mov	r14, r1
    85f6:	f1 2c       	mov	r15, r1
    85f8:	00 e0       	ldi	r16, 0x00	; 0
    85fa:	10 e0       	ldi	r17, 0x00	; 0
    85fc:	c6 2e       	mov	r12, r22
    85fe:	d1 2c       	mov	r13, r1
    8600:	03 15       	cp	r16, r3
    8602:	68 f5       	brcc	.+90     	; 0x865e <DrawMap+0xa6>
    8604:	1b 82       	std	Y+3, r1	; 0x03
    8606:	1a 82       	std	Y+2, r1	; 0x02
    8608:	57 01       	movw	r10, r14
    860a:	92 e0       	ldi	r25, 0x02	; 2
    860c:	a9 0e       	add	r10, r25
    860e:	b1 1c       	adc	r11, r1
    8610:	48 01       	movw	r8, r16
    8612:	8c 0c       	add	r8, r12
    8614:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    8616:	ea 81       	ldd	r30, Y+2	; 0x02
    8618:	e2 15       	cp	r30, r2
    861a:	e0 f4       	brcc	.+56     	; 0x8654 <DrawMap+0x9c>
    861c:	ea 81       	ldd	r30, Y+2	; 0x02
    861e:	fb 81       	ldd	r31, Y+3	; 0x03
    8620:	ea 0d       	add	r30, r10
    8622:	fb 1d       	adc	r31, r11
    8624:	e6 0d       	add	r30, r6
    8626:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8628:	e4 91       	lpm	r30, Z
    862a:	f0 e0       	ldi	r31, 0x00	; 0
    862c:	60 91 b4 0c 	lds	r22, 0x0CB4
    8630:	70 e0       	ldi	r23, 0x00	; 0
    8632:	c4 01       	movw	r24, r8
    8634:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    8638:	af 01       	movw	r20, r30
    863a:	68 2f       	mov	r22, r24
    863c:	8a 81       	ldd	r24, Y+2	; 0x02
    863e:	82 0f       	add	r24, r18
    8640:	29 83       	std	Y+1, r18	; 0x01
    8642:	0e 94 b6 34 	call	0x696c	; 0x696c <SetTile>
    8646:	8a 81       	ldd	r24, Y+2	; 0x02
    8648:	9b 81       	ldd	r25, Y+3	; 0x03
    864a:	01 96       	adiw	r24, 0x01	; 1
    864c:	9b 83       	std	Y+3, r25	; 0x03
    864e:	8a 83       	std	Y+2, r24	; 0x02
    8650:	29 81       	ldd	r18, Y+1	; 0x01
    8652:	e1 cf       	rjmp	.-62     	; 0x8616 <DrawMap+0x5e>
    8654:	0f 5f       	subi	r16, 0xFF	; 255
    8656:	1f 4f       	sbci	r17, 0xFF	; 255
    8658:	e4 0c       	add	r14, r4
    865a:	f5 1c       	adc	r15, r5
    865c:	d1 cf       	rjmp	.-94     	; 0x8600 <DrawMap+0x48>
			}
		}

	}
    865e:	0f 90       	pop	r0
    8660:	0f 90       	pop	r0
    8662:	0f 90       	pop	r0
    8664:	df 91       	pop	r29
    8666:	cf 91       	pop	r28
    8668:	1f 91       	pop	r17
    866a:	0f 91       	pop	r16
    866c:	ff 90       	pop	r15
    866e:	ef 90       	pop	r14
    8670:	df 90       	pop	r13
    8672:	cf 90       	pop	r12
    8674:	bf 90       	pop	r11
    8676:	af 90       	pop	r10
    8678:	9f 90       	pop	r9
    867a:	8f 90       	pop	r8
    867c:	7f 90       	pop	r7
    867e:	6f 90       	pop	r6
    8680:	5f 90       	pop	r5
    8682:	4f 90       	pop	r4
    8684:	3f 90       	pop	r3
    8686:	2f 90       	pop	r2
    8688:	08 95       	ret

0000868a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    868a:	0f 93       	push	r16
    868c:	1f 93       	push	r17
    868e:	cf 93       	push	r28
    8690:	df 93       	push	r29
    8692:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8694:	c0 e0       	ldi	r28, 0x00	; 0
    8696:	d0 e0       	ldi	r29, 0x00	; 0
    8698:	c0 17       	cp	r28, r16
    869a:	d1 07       	cpc	r29, r17
    869c:	44 f4       	brge	.+16     	; 0x86ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    869e:	0e 94 cc 34 	call	0x6998	; 0x6998 <GetVsyncFlag>
    86a2:	88 23       	and	r24, r24
    86a4:	e1 f3       	breq	.-8      	; 0x869e <WaitVsync+0x14>
		ClearVsyncFlag();		
    86a6:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    86aa:	21 96       	adiw	r28, 0x01	; 1
    86ac:	f5 cf       	rjmp	.-22     	; 0x8698 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    86ae:	df 91       	pop	r29
    86b0:	cf 91       	pop	r28
    86b2:	1f 91       	pop	r17
    86b4:	0f 91       	pop	r16
    86b6:	08 95       	ret

000086b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    86b8:	83 e2       	ldi	r24, 0x23	; 35
    86ba:	99 e0       	ldi	r25, 0x09	; 9
    86bc:	0e 94 7e 37 	call	0x6efc	; 0x6efc <InitMusicPlayer>
			SetTileTable(logo_tileset);
    86c0:	83 e2       	ldi	r24, 0x23	; 35
    86c2:	91 e0       	ldi	r25, 0x01	; 1
    86c4:	0e 94 c7 34 	call	0x698e	; 0x698e <SetTileTable>
			
			//draw logo
			ClearVram();
    86c8:	0e 94 ac 34 	call	0x6958	; 0x6958 <ClearVram>
			WaitVsync(15);		
    86cc:	8f e0       	ldi	r24, 0x0F	; 15
    86ce:	90 e0       	ldi	r25, 0x00	; 0
    86d0:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    86d4:	41 e0       	ldi	r20, 0x01	; 1
    86d6:	6f ef       	ldi	r22, 0xFF	; 255
    86d8:	80 e0       	ldi	r24, 0x00	; 0
    86da:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    86de:	4d e0       	ldi	r20, 0x0D	; 13
    86e0:	51 e0       	ldi	r21, 0x01	; 1
    86e2:	6c e0       	ldi	r22, 0x0C	; 12
    86e4:	8c e0       	ldi	r24, 0x0C	; 12
    86e6:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
			WaitVsync(3);
    86ea:	83 e0       	ldi	r24, 0x03	; 3
    86ec:	90 e0       	ldi	r25, 0x00	; 0
    86ee:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    86f2:	4c ef       	ldi	r20, 0xFC	; 252
    86f4:	50 e0       	ldi	r21, 0x00	; 0
    86f6:	6c e0       	ldi	r22, 0x0C	; 12
    86f8:	8c e0       	ldi	r24, 0x0C	; 12
    86fa:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
			WaitVsync(2);
    86fe:	82 e0       	ldi	r24, 0x02	; 2
    8700:	90 e0       	ldi	r25, 0x00	; 0
    8702:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8706:	4d e0       	ldi	r20, 0x0D	; 13
    8708:	51 e0       	ldi	r21, 0x01	; 1
    870a:	6c e0       	ldi	r22, 0x0C	; 12
    870c:	8c e0       	ldi	r24, 0x0C	; 12
    870e:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    8712:	81 e4       	ldi	r24, 0x41	; 65
    8714:	90 e0       	ldi	r25, 0x00	; 0
    8716:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
			ClearVram();
    871a:	0e 94 ac 34 	call	0x6958	; 0x6958 <ClearVram>
			WaitVsync(20);
    871e:	84 e1       	ldi	r24, 0x14	; 20
    8720:	90 e0       	ldi	r25, 0x00	; 0
    8722:	0c 94 45 43 	jmp	0x868a	; 0x868a <WaitVsync>

00008726 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8726:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    872a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    872e:	81 e0       	ldi	r24, 0x01	; 1
    8730:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    8734:	66 23       	and	r22, r22
    8736:	21 f0       	breq	.+8      	; 0x8740 <doFade+0x1a>
		while(fadeActive==true);
    8738:	80 91 7f 0d 	lds	r24, 0x0D7F
    873c:	81 11       	cpse	r24, r1
    873e:	fc cf       	rjmp	.-8      	; 0x8738 <doFade+0x12>
    8740:	08 95       	ret

00008742 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8742:	81 11       	cpse	r24, r1
    8744:	03 c0       	rjmp	.+6      	; 0x874c <FadeIn+0xa>
		DDRC=0xff;
    8746:	8f ef       	ldi	r24, 0xFF	; 255
    8748:	87 b9       	out	0x07, r24	; 7
		return;
    874a:	08 95       	ret
	}
	fadeStep=1;
    874c:	91 e0       	ldi	r25, 0x01	; 1
    874e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    8752:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    8756:	0c 94 93 43 	jmp	0x8726	; 0x8726 <doFade>

0000875a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    875a:	81 11       	cpse	r24, r1
    875c:	02 c0       	rjmp	.+4      	; 0x8762 <FadeOut+0x8>
		DDRC=0;
    875e:	17 b8       	out	0x07, r1	; 7
		return;
    8760:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8762:	9c e0       	ldi	r25, 0x0C	; 12
    8764:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    8768:	9f ef       	ldi	r25, 0xFF	; 255
    876a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    876e:	0c 94 93 43 	jmp	0x8726	; 0x8726 <doFade>

00008772 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8772:	80 91 7f 0d 	lds	r24, 0x0D7F
    8776:	88 23       	and	r24, r24
    8778:	01 f1       	breq	.+64     	; 0x87ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    877a:	80 91 80 0d 	lds	r24, 0x0D80
    877e:	81 11       	cpse	r24, r1
    8780:	19 c0       	rjmp	.+50     	; 0x87b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8782:	80 91 7c 0d 	lds	r24, 0x0D7C
    8786:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    878a:	e0 91 81 0d 	lds	r30, 0x0D81
    878e:	f0 e0       	ldi	r31, 0x00	; 0
    8790:	e1 51       	subi	r30, 0x11	; 17
    8792:	ff 4f       	sbci	r31, 0xFF	; 255
    8794:	e4 91       	lpm	r30, Z
    8796:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8798:	90 91 7d 0d 	lds	r25, 0x0D7D
    879c:	80 91 81 0d 	lds	r24, 0x0D81
    87a0:	89 0f       	add	r24, r25
    87a2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    87a6:	88 23       	and	r24, r24
    87a8:	11 f0       	breq	.+4      	; 0x87ae <ProcessFading+0x3c>
    87aa:	8d 30       	cpi	r24, 0x0D	; 13
    87ac:	31 f4       	brne	.+12     	; 0x87ba <ProcessFading+0x48>
				fadeActive=false;
    87ae:	10 92 7f 0d 	sts	0x0D7F, r1
    87b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    87b4:	81 50       	subi	r24, 0x01	; 1
    87b6:	80 93 80 0d 	sts	0x0D80, r24
    87ba:	08 95       	ret

000087bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    87bc:	0e 94 b9 43 	call	0x8772	; 0x8772 <ProcessFading>
		ProcessSprites();
    87c0:	0c 94 96 41 	jmp	0x832c	; 0x832c <ProcessSprites>

000087c4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    87c4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    87c6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    87c8:	93 81       	ldd	r25, Z+3	; 0x03
    87ca:	9f 5f       	subi	r25, 0xFF	; 255
    87cc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    87ce:	42 81       	ldd	r20, Z+2	; 0x02
    87d0:	80 81       	ld	r24, Z
    87d2:	26 81       	ldd	r18, Z+6	; 0x06
    87d4:	37 81       	ldd	r19, Z+7	; 0x07
    87d6:	94 17       	cp	r25, r20
    87d8:	30 f4       	brcc	.+12     	; 0x87e6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    87da:	f9 01       	movw	r30, r18
    87dc:	e8 0f       	add	r30, r24
    87de:	f1 1d       	adc	r31, r1
    87e0:	e8 0f       	add	r30, r24
    87e2:	f1 1d       	adc	r31, r1
    87e4:	12 c0       	rjmp	.+36     	; 0x880a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    87e6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    87e8:	90 e0       	ldi	r25, 0x00	; 0
    87ea:	01 96       	adiw	r24, 0x01	; 1
    87ec:	61 81       	ldd	r22, Z+1	; 0x01
    87ee:	70 e0       	ldi	r23, 0x00	; 0
    87f0:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    87f4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    87f6:	81 11       	cpse	r24, r1
    87f8:	02 c0       	rjmp	.+4      	; 0x87fe <LBGetNextFrame+0x3a>
    87fa:	41 e0       	ldi	r20, 0x01	; 1
    87fc:	44 83       	std	Z+4, r20	; 0x04
    87fe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    8800:	88 0f       	add	r24, r24
    8802:	99 1f       	adc	r25, r25
    8804:	f9 01       	movw	r30, r18
    8806:	e8 0f       	add	r30, r24
    8808:	f9 1f       	adc	r31, r25
    880a:	80 81       	ld	r24, Z
    880c:	91 81       	ldd	r25, Z+1	; 0x01
}
    880e:	08 95       	ret

00008810 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8810:	0f 93       	push	r16
    8812:	1f 93       	push	r17
    8814:	cf 93       	push	r28
    8816:	df 93       	push	r29
    8818:	1f 92       	push	r1
    881a:	cd b7       	in	r28, 0x3d	; 61
    881c:	de b7       	in	r29, 0x3e	; 62
    881e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    8820:	86 2f       	mov	r24, r22
    8822:	69 83       	std	Y+1, r22	; 0x01
    8824:	0e 94 d6 34 	call	0x69ac	; 0x69ac <ReadJoypad>
    8828:	d8 01       	movw	r26, r16
    882a:	15 96       	adiw	r26, 0x05	; 5
    882c:	9c 93       	st	X, r25
    882e:	8e 93       	st	-X, r24
    8830:	14 97       	sbiw	r26, 0x04	; 4
    8832:	69 81       	ldd	r22, Y+1	; 0x01
    8834:	e6 2f       	mov	r30, r22
    8836:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8838:	00 97       	sbiw	r24, 0x00	; 0
    883a:	51 f0       	breq	.+20     	; 0x8850 <LBGetJoyPadState+0x40>
    883c:	df 01       	movw	r26, r30
    883e:	aa 0f       	add	r26, r26
    8840:	bb 1f       	adc	r27, r27
    8842:	ac 50       	subi	r26, 0x0C	; 12
    8844:	b3 4f       	sbci	r27, 0xF3	; 243
    8846:	2d 91       	ld	r18, X+
    8848:	3c 91       	ld	r19, X
    884a:	82 17       	cp	r24, r18
    884c:	93 07       	cpc	r25, r19
    884e:	21 f0       	breq	.+8      	; 0x8858 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8850:	d8 01       	movw	r26, r16
    8852:	16 96       	adiw	r26, 0x06	; 6
    8854:	1c 92       	st	X, r1
    8856:	07 c0       	rjmp	.+14     	; 0x8866 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8858:	d8 01       	movw	r26, r16
    885a:	16 96       	adiw	r26, 0x06	; 6
    885c:	2c 91       	ld	r18, X
    885e:	16 97       	sbiw	r26, 0x06	; 6
    8860:	2f 5f       	subi	r18, 0xFF	; 255
    8862:	16 96       	adiw	r26, 0x06	; 6
    8864:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8866:	ee 0f       	add	r30, r30
    8868:	ff 1f       	adc	r31, r31
    886a:	ec 50       	subi	r30, 0x0C	; 12
    886c:	f3 4f       	sbci	r31, 0xF3	; 243
    886e:	20 81       	ld	r18, Z
    8870:	31 81       	ldd	r19, Z+1	; 0x01
    8872:	a9 01       	movw	r20, r18
    8874:	40 95       	com	r20
    8876:	50 95       	com	r21
    8878:	48 23       	and	r20, r24
    887a:	59 23       	and	r21, r25
    887c:	d8 01       	movw	r26, r16
    887e:	11 96       	adiw	r26, 0x01	; 1
    8880:	5c 93       	st	X, r21
    8882:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8884:	ac 01       	movw	r20, r24
    8886:	40 95       	com	r20
    8888:	50 95       	com	r21
    888a:	24 23       	and	r18, r20
    888c:	35 23       	and	r19, r21
    888e:	13 96       	adiw	r26, 0x03	; 3
    8890:	3c 93       	st	X, r19
    8892:	2e 93       	st	-X, r18
    8894:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8896:	91 83       	std	Z+1, r25	; 0x01
    8898:	80 83       	st	Z, r24
}
    889a:	0f 90       	pop	r0
    889c:	df 91       	pop	r29
    889e:	cf 91       	pop	r28
    88a0:	1f 91       	pop	r17
    88a2:	0f 91       	pop	r16
    88a4:	08 95       	ret

000088a6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    88a6:	90 ed       	ldi	r25, 0xD0	; 208
    88a8:	94 0f       	add	r25, r20
    88aa:	e0 91 82 0d 	lds	r30, 0x0D82
    88ae:	f0 91 83 0d 	lds	r31, 0x0D83
    88b2:	9a 30       	cpi	r25, 0x0A	; 10
    88b4:	38 f4       	brcc	.+14     	; 0x88c4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    88b6:	24 2f       	mov	r18, r20
    88b8:	30 e0       	ldi	r19, 0x00	; 0
    88ba:	2d 52       	subi	r18, 0x2D	; 45
    88bc:	31 09       	sbc	r19, r1
    88be:	e2 0f       	add	r30, r18
    88c0:	f3 1f       	adc	r31, r19
    88c2:	0c c0       	rjmp	.+24     	; 0x88dc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    88c4:	9f eb       	ldi	r25, 0xBF	; 191
    88c6:	94 0f       	add	r25, r20
    88c8:	9a 31       	cpi	r25, 0x1A	; 26
    88ca:	38 f4       	brcc	.+14     	; 0x88da <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    88cc:	50 e0       	ldi	r21, 0x00	; 0
    88ce:	44 53       	subi	r20, 0x34	; 52
    88d0:	51 09       	sbc	r21, r1
    88d2:	e4 0f       	add	r30, r20
    88d4:	f5 1f       	adc	r31, r21
    88d6:	44 91       	lpm	r20, Z
    88d8:	03 c0       	rjmp	.+6      	; 0x88e0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    88da:	32 96       	adiw	r30, 0x02	; 2
    88dc:	e4 91       	lpm	r30, Z
    88de:	4e 2f       	mov	r20, r30
    88e0:	50 e0       	ldi	r21, 0x00	; 0
    88e2:	0c 94 b6 34 	jmp	0x696c	; 0x696c <SetTile>

000088e6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    88e6:	ff 92       	push	r15
    88e8:	0f 93       	push	r16
    88ea:	1f 93       	push	r17
    88ec:	cf 93       	push	r28
    88ee:	df 93       	push	r29
    88f0:	d8 2f       	mov	r29, r24
    88f2:	f6 2e       	mov	r15, r22
    88f4:	8a 01       	movw	r16, r20
	u8 i = 0;
    88f6:	c0 e0       	ldi	r28, 0x00	; 0
    88f8:	8c 2f       	mov	r24, r28
    88fa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    88fc:	f8 01       	movw	r30, r16
    88fe:	ec 0f       	add	r30, r28
    8900:	f1 1d       	adc	r31, r1
    8902:	44 91       	lpm	r20, Z
    8904:	44 23       	and	r20, r20
    8906:	29 f0       	breq	.+10     	; 0x8912 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    8908:	6f 2d       	mov	r22, r15
    890a:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		i++;
    890e:	cf 5f       	subi	r28, 0xFF	; 255
    8910:	f3 cf       	rjmp	.-26     	; 0x88f8 <LBPrint+0x12>
	}
}
    8912:	df 91       	pop	r29
    8914:	cf 91       	pop	r28
    8916:	1f 91       	pop	r17
    8918:	0f 91       	pop	r16
    891a:	ff 90       	pop	r15
    891c:	08 95       	ret

0000891e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    891e:	df 92       	push	r13
    8920:	ef 92       	push	r14
    8922:	ff 92       	push	r15
    8924:	0f 93       	push	r16
    8926:	1f 93       	push	r17
    8928:	cf 93       	push	r28
    892a:	df 93       	push	r29
    892c:	1f 92       	push	r1
    892e:	cd b7       	in	r28, 0x3d	; 61
    8930:	de b7       	in	r29, 0x3e	; 62
    8932:	38 2f       	mov	r19, r24
    8934:	06 2f       	mov	r16, r22
    8936:	84 2f       	mov	r24, r20
    8938:	9d ef       	ldi	r25, 0xFD	; 253
    893a:	e9 2e       	mov	r14, r25
    893c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    893e:	4a e0       	ldi	r20, 0x0A	; 10
    8940:	f4 2e       	mov	r15, r20
    8942:	1f ef       	ldi	r17, 0xFF	; 255
    8944:	13 0f       	add	r17, r19
    8946:	6f 2d       	mov	r22, r15
    8948:	0e 94 7e 62 	call	0xc4fc	; 0xc4fc <__udivmodqi4>
    894c:	d8 2e       	mov	r13, r24
    894e:	40 e3       	ldi	r20, 0x30	; 48
    8950:	49 0f       	add	r20, r25
    8952:	60 2f       	mov	r22, r16
    8954:	83 2f       	mov	r24, r19
    8956:	29 83       	std	Y+1, r18	; 0x01
    8958:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		value /= 10;
    895c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    895e:	29 81       	ldd	r18, Y+1	; 0x01
    8960:	21 11       	cpse	r18, r1
    8962:	02 c0       	rjmp	.+4      	; 0x8968 <LBPrintByte+0x4a>
    8964:	dd 20       	and	r13, r13
    8966:	19 f0       	breq	.+6      	; 0x896e <LBPrintByte+0x50>
    8968:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    896a:	1e 11       	cpse	r17, r14
    896c:	ea cf       	rjmp	.-44     	; 0x8942 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    896e:	0f 90       	pop	r0
    8970:	df 91       	pop	r29
    8972:	cf 91       	pop	r28
    8974:	1f 91       	pop	r17
    8976:	0f 91       	pop	r16
    8978:	ff 90       	pop	r15
    897a:	ef 90       	pop	r14
    897c:	df 90       	pop	r13
    897e:	08 95       	ret

00008980 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    8980:	cf 92       	push	r12
    8982:	df 92       	push	r13
    8984:	ef 92       	push	r14
    8986:	ff 92       	push	r15
    8988:	0f 93       	push	r16
    898a:	1f 93       	push	r17
    898c:	cf 93       	push	r28
    898e:	df 93       	push	r29
    8990:	00 d0       	rcall	.+0      	; 0x8992 <LBPrintInt+0x12>
    8992:	cd b7       	in	r28, 0x3d	; 61
    8994:	de b7       	in	r29, 0x3e	; 62
    8996:	38 2f       	mov	r19, r24
    8998:	16 2f       	mov	r17, r22
    899a:	ca 01       	movw	r24, r20
    899c:	4b ef       	ldi	r20, 0xFB	; 251
    899e:	d4 2e       	mov	r13, r20
    89a0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    89a2:	5a e0       	ldi	r21, 0x0A	; 10
    89a4:	e5 2e       	mov	r14, r21
    89a6:	f1 2c       	mov	r15, r1
    89a8:	cc 24       	eor	r12, r12
    89aa:	ca 94       	dec	r12
    89ac:	c3 0e       	add	r12, r19
    89ae:	b7 01       	movw	r22, r14
    89b0:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
    89b4:	06 2f       	mov	r16, r22
    89b6:	40 e3       	ldi	r20, 0x30	; 48
    89b8:	48 0f       	add	r20, r24
    89ba:	61 2f       	mov	r22, r17
    89bc:	83 2f       	mov	r24, r19
    89be:	29 83       	std	Y+1, r18	; 0x01
    89c0:	7a 83       	std	Y+2, r23	; 0x02
    89c2:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		value /= 10;
    89c6:	80 2f       	mov	r24, r16
    89c8:	7a 81       	ldd	r23, Y+2	; 0x02
    89ca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    89cc:	29 81       	ldd	r18, Y+1	; 0x01
    89ce:	21 11       	cpse	r18, r1
    89d0:	02 c0       	rjmp	.+4      	; 0x89d6 <LBPrintInt+0x56>
    89d2:	00 97       	sbiw	r24, 0x00	; 0
    89d4:	19 f0       	breq	.+6      	; 0x89dc <LBPrintInt+0x5c>
    89d6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    89d8:	cd 10       	cpse	r12, r13
    89da:	e6 cf       	rjmp	.-52     	; 0x89a8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    89dc:	0f 90       	pop	r0
    89de:	0f 90       	pop	r0
    89e0:	df 91       	pop	r29
    89e2:	cf 91       	pop	r28
    89e4:	1f 91       	pop	r17
    89e6:	0f 91       	pop	r16
    89e8:	ff 90       	pop	r15
    89ea:	ef 90       	pop	r14
    89ec:	df 90       	pop	r13
    89ee:	cf 90       	pop	r12
    89f0:	08 95       	ret

000089f2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    89f2:	af 92       	push	r10
    89f4:	cf 92       	push	r12
    89f6:	ef 92       	push	r14
    89f8:	ff 92       	push	r15
    89fa:	0f 93       	push	r16
    89fc:	1f 93       	push	r17
    89fe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    8a00:	cb 01       	movw	r24, r22
    8a02:	82 0f       	add	r24, r18
    8a04:	91 1d       	adc	r25, r1
    8a06:	e8 16       	cp	r14, r24
    8a08:	f9 06       	cpc	r15, r25
    8a0a:	88 f4       	brcc	.+34     	; 0x8a2e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    8a0c:	ea 0c       	add	r14, r10
    8a0e:	f1 1c       	adc	r15, r1
    8a10:	6e 15       	cp	r22, r14
    8a12:	7f 05       	cpc	r23, r15
    8a14:	60 f4       	brcc	.+24     	; 0x8a2e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    8a16:	cf 01       	movw	r24, r30
    8a18:	84 0f       	add	r24, r20
    8a1a:	91 1d       	adc	r25, r1
    8a1c:	08 17       	cp	r16, r24
    8a1e:	19 07       	cpc	r17, r25
    8a20:	30 f4       	brcc	.+12     	; 0x8a2e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    8a22:	0c 0d       	add	r16, r12
    8a24:	11 1d       	adc	r17, r1
    8a26:	81 e0       	ldi	r24, 0x01	; 1
    8a28:	e0 17       	cp	r30, r16
    8a2a:	f1 07       	cpc	r31, r17
    8a2c:	08 f0       	brcs	.+2      	; 0x8a30 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    8a2e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    8a30:	1f 91       	pop	r17
    8a32:	0f 91       	pop	r16
    8a34:	ff 90       	pop	r15
    8a36:	ef 90       	pop	r14
    8a38:	cf 90       	pop	r12
    8a3a:	af 90       	pop	r10
    8a3c:	08 95       	ret

00008a3e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8a3e:	cf 93       	push	r28
    8a40:	df 93       	push	r29
    8a42:	d8 2f       	mov	r29, r24
    8a44:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    8a46:	80 e0       	ldi	r24, 0x00	; 0
    8a48:	90 e0       	ldi	r25, 0x00	; 0
    8a4a:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <GetPrngNumber>
    8a4e:	6f ef       	ldi	r22, 0xFF	; 255
    8a50:	70 e0       	ldi	r23, 0x00	; 0
    8a52:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    8a56:	6c 2f       	mov	r22, r28
    8a58:	70 e0       	ldi	r23, 0x00	; 0
    8a5a:	6d 1b       	sub	r22, r29
    8a5c:	71 09       	sbc	r23, r1
    8a5e:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
}
    8a62:	8d 0f       	add	r24, r29
    8a64:	df 91       	pop	r29
    8a66:	cf 91       	pop	r28
    8a68:	08 95       	ret

00008a6a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    8a6a:	cf 93       	push	r28
    8a6c:	df 93       	push	r29
    8a6e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8a70:	c0 e0       	ldi	r28, 0x00	; 0
    8a72:	cd 17       	cp	r28, r29
    8a74:	31 f0       	breq	.+12     	; 0x8a82 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8a76:	8f ef       	ldi	r24, 0xFF	; 255
    8a78:	9f ef       	ldi	r25, 0xFF	; 255
    8a7a:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8a7e:	cf 5f       	subi	r28, 0xFF	; 255
    8a80:	f8 cf       	rjmp	.-16     	; 0x8a72 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8a82:	df 91       	pop	r29
    8a84:	cf 91       	pop	r28
    8a86:	08 95       	ret

00008a88 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    8a88:	df 92       	push	r13
    8a8a:	ef 92       	push	r14
    8a8c:	ff 92       	push	r15
    8a8e:	0f 93       	push	r16
    8a90:	1f 93       	push	r17
    8a92:	cf 93       	push	r28
    8a94:	df 93       	push	r29
    8a96:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8a98:	fb 01       	movw	r30, r22
    8a9a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8a9c:	31 96       	adiw	r30, 0x01	; 1
    8a9e:	64 91       	lpm	r22, Z
    8aa0:	5f ef       	ldi	r21, 0xFF	; 255
    8aa2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    8aa4:	24 2f       	mov	r18, r20
    8aa6:	21 70       	andi	r18, 0x01	; 1
    8aa8:	40 ff       	sbrs	r20, 0
    8aaa:	04 c0       	rjmp	.+8      	; 0x8ab4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    8aac:	95 2f       	mov	r25, r21
		dx=-1;
    8aae:	ff 24       	eor	r15, r15
    8ab0:	fa 94       	dec	r15
    8ab2:	03 c0       	rjmp	.+6      	; 0x8aba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    8ab4:	ff 24       	eor	r15, r15
    8ab6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    8ab8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    8aba:	41 ff       	sbrs	r20, 1
    8abc:	05 c0       	rjmp	.+10     	; 0x8ac8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    8abe:	7f ef       	ldi	r23, 0xFF	; 255
    8ac0:	76 0f       	add	r23, r22
		dy=-1;
    8ac2:	ee 24       	eor	r14, r14
    8ac4:	ea 94       	dec	r14
    8ac6:	03 c0       	rjmp	.+6      	; 0x8ace <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    8ac8:	ee 24       	eor	r14, r14
    8aca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    8acc:	70 e0       	ldi	r23, 0x00	; 0
    8ace:	21 11       	cpse	r18, r1
    8ad0:	01 c0       	rjmp	.+2      	; 0x8ad4 <LBMapSprite+0x4c>
    8ad2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8ad4:	00 e0       	ldi	r16, 0x00	; 0
    8ad6:	06 17       	cp	r16, r22
    8ad8:	09 f1       	breq	.+66     	; 0x8b1c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8ada:	71 03       	mulsu	r23, r17
    8adc:	e0 01       	movw	r28, r0
    8ade:	11 24       	eor	r1, r1
    8ae0:	d8 2e       	mov	r13, r24
    8ae2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    8ae4:	8d 15       	cp	r24, r13
    8ae6:	b1 f0       	breq	.+44     	; 0x8b14 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8ae8:	9e 01       	movw	r18, r28
    8aea:	29 0f       	add	r18, r25
    8aec:	31 1d       	adc	r19, r1
    8aee:	97 fd       	sbrc	r25, 7
    8af0:	3a 95       	dec	r19
    8af2:	2e 5f       	subi	r18, 0xFE	; 254
    8af4:	3f 4f       	sbci	r19, 0xFF	; 255
    8af6:	fd 01       	movw	r30, r26
    8af8:	e2 0f       	add	r30, r18
    8afa:	f3 1f       	adc	r31, r19
    8afc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    8afe:	34 e0       	ldi	r19, 0x04	; 4
    8b00:	83 9f       	mul	r24, r19
    8b02:	f0 01       	movw	r30, r0
    8b04:	11 24       	eor	r1, r1
    8b06:	e1 55       	subi	r30, 0x51	; 81
    8b08:	f0 4f       	sbci	r31, 0xF0	; 240
    8b0a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    8b0c:	8f 5f       	subi	r24, 0xFF	; 255
    8b0e:	43 83       	std	Z+3, r20	; 0x03
    8b10:	9f 0d       	add	r25, r15
    8b12:	e8 cf       	rjmp	.-48     	; 0x8ae4 <LBMapSprite+0x5c>
    8b14:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    8b16:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8b18:	95 2f       	mov	r25, r21
    8b1a:	dd cf       	rjmp	.-70     	; 0x8ad6 <LBMapSprite+0x4e>
	}
}
    8b1c:	df 91       	pop	r29
    8b1e:	cf 91       	pop	r28
    8b20:	1f 91       	pop	r17
    8b22:	0f 91       	pop	r16
    8b24:	ff 90       	pop	r15
    8b26:	ef 90       	pop	r14
    8b28:	df 90       	pop	r13
    8b2a:	08 95       	ret

00008b2c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    8b2c:	df 92       	push	r13
    8b2e:	ef 92       	push	r14
    8b30:	ff 92       	push	r15
    8b32:	0f 93       	push	r16
    8b34:	1f 93       	push	r17
    8b36:	cf 93       	push	r28
    8b38:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    8b3a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    8b3e:	98 e0       	ldi	r25, 0x08	; 8
    8b40:	a9 9f       	mul	r26, r25
    8b42:	70 01       	movw	r14, r0
    8b44:	11 24       	eor	r1, r1
    8b46:	50 e0       	ldi	r21, 0x00	; 0
    8b48:	38 ef       	ldi	r19, 0xF8	; 248
    8b4a:	a3 9f       	mul	r26, r19
    8b4c:	30 2d       	mov	r19, r0
    8b4e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    8b50:	70 e0       	ldi	r23, 0x00	; 0
    8b52:	70 17       	cp	r23, r16
    8b54:	09 f1       	breq	.+66     	; 0x8b98 <LBMoveSprite+0x6c>
    8b56:	d4 2e       	mov	r13, r20
    8b58:	13 2f       	mov	r17, r19
    8b5a:	14 0f       	add	r17, r20
    8b5c:	b8 2f       	mov	r27, r24
    8b5e:	b2 0f       	add	r27, r18
    8b60:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    8b62:	8b 17       	cp	r24, r27
    8b64:	a9 f0       	breq	.+42     	; 0x8b90 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    8b66:	c4 e0       	ldi	r28, 0x04	; 4
    8b68:	8c 9f       	mul	r24, r28
    8b6a:	f0 01       	movw	r30, r0
    8b6c:	11 24       	eor	r1, r1
    8b6e:	ef 01       	movw	r28, r30
    8b70:	c1 55       	subi	r28, 0x51	; 81
    8b72:	d0 4f       	sbci	r29, 0xF0	; 240
    8b74:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    8b76:	a0 32       	cpi	r26, 0x20	; 32
    8b78:	28 f4       	brcc	.+10     	; 0x8b84 <LBMoveSprite+0x58>
    8b7a:	e4 16       	cp	r14, r20
    8b7c:	f5 06       	cpc	r15, r21
    8b7e:	14 f4       	brge	.+4      	; 0x8b84 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    8b80:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    8b82:	03 c0       	rjmp	.+6      	; 0x8b8a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8b84:	e1 55       	subi	r30, 0x51	; 81
    8b86:	f0 4f       	sbci	r31, 0xF0	; 240
    8b88:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    8b8a:	8f 5f       	subi	r24, 0xFF	; 255
    8b8c:	98 5f       	subi	r25, 0xF8	; 248
    8b8e:	e9 cf       	rjmp	.-46     	; 0x8b62 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    8b90:	7f 5f       	subi	r23, 0xFF	; 255
    8b92:	48 5f       	subi	r20, 0xF8	; 248
    8b94:	5f 4f       	sbci	r21, 0xFF	; 255
    8b96:	dd cf       	rjmp	.-70     	; 0x8b52 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    8b98:	df 91       	pop	r29
    8b9a:	cf 91       	pop	r28
    8b9c:	1f 91       	pop	r17
    8b9e:	0f 91       	pop	r16
    8ba0:	ff 90       	pop	r15
    8ba2:	ef 90       	pop	r14
    8ba4:	df 90       	pop	r13
    8ba6:	08 95       	ret

00008ba8 <LBRotateSprites>:

void LBRotateSprites()
{
    8ba8:	80 e0       	ldi	r24, 0x00	; 0
    8baa:	90 e0       	ldi	r25, 0x00	; 0
    8bac:	dc 01       	movw	r26, r24
    8bae:	a1 55       	subi	r26, 0x51	; 81
    8bb0:	b0 4f       	sbci	r27, 0xF0	; 240
    8bb2:	fc 01       	movw	r30, r24
    8bb4:	e0 5f       	subi	r30, 0xF0	; 240
    8bb6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    8bb8:	13 96       	adiw	r26, 0x03	; 3
    8bba:	2c 91       	ld	r18, X
    8bbc:	13 97       	sbiw	r26, 0x03	; 3
    8bbe:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    8bc0:	12 96       	adiw	r26, 0x02	; 2
    8bc2:	2c 91       	ld	r18, X
    8bc4:	12 97       	sbiw	r26, 0x02	; 2
    8bc6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    8bc8:	2c 91       	ld	r18, X
    8bca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    8bcc:	11 96       	adiw	r26, 0x01	; 1
    8bce:	2c 91       	ld	r18, X
    8bd0:	21 83       	std	Z+1, r18	; 0x01
    8bd2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    8bd4:	88 33       	cpi	r24, 0x38	; 56
    8bd6:	91 05       	cpc	r25, r1
    8bd8:	49 f7       	brne	.-46     	; 0x8bac <LBRotateSprites+0x4>
    8bda:	80 91 01 05 	lds	r24, 0x0501
    8bde:	20 e0       	ldi	r18, 0x00	; 0
    8be0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    8be2:	94 e0       	ldi	r25, 0x04	; 4
    8be4:	89 9f       	mul	r24, r25
    8be6:	d0 01       	movw	r26, r0
    8be8:	11 24       	eor	r1, r1
    8bea:	a1 55       	subi	r26, 0x51	; 81
    8bec:	b0 4f       	sbci	r27, 0xF0	; 240
    8bee:	13 96       	adiw	r26, 0x03	; 3
    8bf0:	9c 91       	ld	r25, X
    8bf2:	13 97       	sbiw	r26, 0x03	; 3
    8bf4:	f9 01       	movw	r30, r18
    8bf6:	e0 5f       	subi	r30, 0xF0	; 240
    8bf8:	fa 4f       	sbci	r31, 0xFA	; 250
    8bfa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    8bfc:	12 96       	adiw	r26, 0x02	; 2
    8bfe:	9c 91       	ld	r25, X
    8c00:	12 97       	sbiw	r26, 0x02	; 2
    8c02:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    8c04:	9c 91       	ld	r25, X
    8c06:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    8c08:	11 96       	adiw	r26, 0x01	; 1
    8c0a:	9c 91       	ld	r25, X
    8c0c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    8c0e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    8c10:	84 31       	cpi	r24, 0x14	; 20
    8c12:	08 f0       	brcs	.+2      	; 0x8c16 <LBRotateSprites+0x6e>
    8c14:	8e e0       	ldi	r24, 0x0E	; 14
    8c16:	2c 5f       	subi	r18, 0xFC	; 252
    8c18:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    8c1a:	28 30       	cpi	r18, 0x08	; 8
    8c1c:	31 05       	cpc	r19, r1
    8c1e:	09 f7       	brne	.-62     	; 0x8be2 <LBRotateSprites+0x3a>
    8c20:	80 93 01 05 	sts	0x0501, r24
    8c24:	08 95       	ret

00008c26 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    8c26:	80 91 b9 0d 	lds	r24, 0x0DB9
}
    8c2a:	81 70       	andi	r24, 0x01	; 1
    8c2c:	08 95       	ret

00008c2e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    8c2e:	8c e8       	ldi	r24, 0x8C	; 140
    8c30:	90 e0       	ldi	r25, 0x00	; 0
    8c32:	90 93 87 0d 	sts	0x0D87, r25
    8c36:	80 93 86 0d 	sts	0x0D86, r24
    8c3a:	80 e0       	ldi	r24, 0x00	; 0
    8c3c:	90 e0       	ldi	r25, 0x00	; 0
    8c3e:	fc 01       	movw	r30, r24
    8c40:	ee 50       	subi	r30, 0x0E	; 14
    8c42:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    8c44:	e4 91       	lpm	r30, Z
    8c46:	dc 01       	movw	r26, r24
    8c48:	aa 57       	subi	r26, 0x7A	; 122
    8c4a:	b2 4f       	sbci	r27, 0xF2	; 242
    8c4c:	12 96       	adiw	r26, 0x02	; 2
    8c4e:	ec 93       	st	X, r30
    8c50:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    8c52:	8e 31       	cpi	r24, 0x1E	; 30
    8c54:	91 05       	cpc	r25, r1
    8c56:	99 f7       	brne	.-26     	; 0x8c3e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    8c58:	08 95       	ret

00008c5a <init_enemy_state>:

void init_enemy_state()
{
    8c5a:	80 e0       	ldi	r24, 0x00	; 0
    8c5c:	90 e0       	ldi	r25, 0x00	; 0
    8c5e:	9c 01       	movw	r18, r24
    8c60:	2a 55       	subi	r18, 0x5A	; 90
    8c62:	32 4f       	sbci	r19, 0xF2	; 242
    8c64:	f9 01       	movw	r30, r18
    8c66:	e3 54       	subi	r30, 0x43	; 67
    8c68:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    8c6a:	10 82       	st	Z, r1
    8c6c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    8c6e:	10 82       	st	Z, r1
    8c70:	8e 5b       	subi	r24, 0xBE	; 190
    8c72:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    8c74:	8a 34       	cpi	r24, 0x4A	; 74
    8c76:	21 e0       	ldi	r18, 0x01	; 1
    8c78:	92 07       	cpc	r25, r18
    8c7a:	89 f7       	brne	.-30     	; 0x8c5e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    8c7c:	10 92 c5 0d 	sts	0x0DC5, r1
    8c80:	08 95       	ret

00008c82 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    8c82:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    8c86:	88 23       	and	r24, r24
    8c88:	f9 f0       	breq	.+62     	; 0x8cc8 <init_player_state+0x46>
	{
		game.player.width = 3;
    8c8a:	83 e0       	ldi	r24, 0x03	; 3
    8c8c:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 1;
    8c90:	81 e0       	ldi	r24, 0x01	; 1
    8c92:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 2;
    8c96:	82 e0       	ldi	r24, 0x02	; 2
    8c98:	80 93 35 0e 	sts	0x0E35, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    8c9c:	85 e0       	ldi	r24, 0x05	; 5
    8c9e:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims = run_anim;
    8ca2:	8f ef       	ldi	r24, 0xFF	; 255
    8ca4:	9f e0       	ldi	r25, 0x0F	; 15
    8ca6:	90 93 3b 0e 	sts	0x0E3B, r25
    8caa:	80 93 3a 0e 	sts	0x0E3A, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    8cae:	86 e8       	ldi	r24, 0x86	; 134
    8cb0:	9d e2       	ldi	r25, 0x2D	; 45
    8cb2:	90 93 00 10 	sts	0x1000, r25
    8cb6:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    8cba:	81 e8       	ldi	r24, 0x81	; 129
    8cbc:	9d e2       	ldi	r25, 0x2D	; 45
    8cbe:	90 93 02 10 	sts	0x1002, r25
    8cc2:	80 93 01 10 	sts	0x1001, r24
    8cc6:	2a c0       	rjmp	.+84     	; 0x8d1c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    8cc8:	82 e0       	ldi	r24, 0x02	; 2
    8cca:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 3;
    8cce:	83 e0       	ldi	r24, 0x03	; 3
    8cd0:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 4;
    8cd4:	84 e0       	ldi	r24, 0x04	; 4
    8cd6:	80 93 35 0e 	sts	0x0E35, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    8cda:	8c e0       	ldi	r24, 0x0C	; 12
    8cdc:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims = run_anim;
    8ce0:	8f ef       	ldi	r24, 0xFF	; 255
    8ce2:	9f e0       	ldi	r25, 0x0F	; 15
    8ce4:	90 93 3b 0e 	sts	0x0E3B, r25
    8ce8:	80 93 3a 0e 	sts	0x0E3A, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    8cec:	80 eb       	ldi	r24, 0xB0	; 176
    8cee:	9d e2       	ldi	r25, 0x2D	; 45
    8cf0:	90 93 00 10 	sts	0x1000, r25
    8cf4:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    8cf8:	88 ea       	ldi	r24, 0xA8	; 168
    8cfa:	9d e2       	ldi	r25, 0x2D	; 45
    8cfc:	90 93 02 10 	sts	0x1002, r25
    8d00:	80 93 01 10 	sts	0x1001, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    8d04:	80 ea       	ldi	r24, 0xA0	; 160
    8d06:	9d e2       	ldi	r25, 0x2D	; 45
    8d08:	90 93 04 10 	sts	0x1004, r25
    8d0c:	80 93 03 10 	sts	0x1003, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    8d10:	88 e9       	ldi	r24, 0x98	; 152
    8d12:	9d e2       	ldi	r25, 0x2D	; 45
    8d14:	90 93 06 10 	sts	0x1006, r25
    8d18:	80 93 05 10 	sts	0x1005, r24
	}
	game.player.direction = D_RIGHT;
    8d1c:	81 e0       	ldi	r24, 0x01	; 1
    8d1e:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.flags = IDLE;
    8d22:	98 e0       	ldi	r25, 0x08	; 8
    8d24:	90 93 d8 0d 	sts	0x0DD8, r25
	game.player.shield = PLAYER_SHIELD;
    8d28:	9a e0       	ldi	r25, 0x0A	; 10
    8d2a:	90 93 dd 0d 	sts	0x0DDD, r25
	game.player.idle.anim_count = 1;
    8d2e:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.idle.frames_per_anim = 1;
    8d32:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.idle.anims = idle_anim;
    8d36:	21 e1       	ldi	r18, 0x11	; 17
    8d38:	30 e1       	ldi	r19, 0x10	; 16
    8d3a:	30 93 33 0e 	sts	0x0E33, r19
    8d3e:	20 93 32 0e 	sts	0x0E32, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    8d42:	28 eb       	ldi	r18, 0xB8	; 184
    8d44:	3d e2       	ldi	r19, 0x2D	; 45
    8d46:	30 93 12 10 	sts	0x1012, r19
    8d4a:	20 93 11 10 	sts	0x1011, r18
	
	game.player.jump.anim_count = 1;
    8d4e:	80 93 3d 0e 	sts	0x0E3D, r24
	game.player.jump.frames_per_anim = 1;
    8d52:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.jump.anims = jump_anim;
    8d56:	24 e8       	ldi	r18, 0x84	; 132
    8d58:	3d e0       	ldi	r19, 0x0D	; 13
    8d5a:	30 93 43 0e 	sts	0x0E43, r19
    8d5e:	20 93 42 0e 	sts	0x0E42, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    8d62:	20 e9       	ldi	r18, 0x90	; 144
    8d64:	3d e2       	ldi	r19, 0x2D	; 45
    8d66:	30 93 85 0d 	sts	0x0D85, r19
    8d6a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    8d6e:	80 93 45 0e 	sts	0x0E45, r24
	game.player.prone.frames_per_anim = 1;
    8d72:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims = prone_anim;
    8d76:	87 ea       	ldi	r24, 0xA7	; 167
    8d78:	9f e0       	ldi	r25, 0x0F	; 15
    8d7a:	90 93 4b 0e 	sts	0x0E4B, r25
    8d7e:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    8d82:	8b e8       	ldi	r24, 0x8B	; 139
    8d84:	9d e2       	ldi	r25, 0x2D	; 45
    8d86:	90 93 a8 0f 	sts	0x0FA8, r25
    8d8a:	80 93 a7 0f 	sts	0x0FA7, r24
	
	game.player.expl.anim_count = 3;
    8d8e:	83 e0       	ldi	r24, 0x03	; 3
    8d90:	80 93 4d 0e 	sts	0x0E4D, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    8d94:	85 e0       	ldi	r24, 0x05	; 5
    8d96:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims = expl_anim;
    8d9a:	8b e0       	ldi	r24, 0x0B	; 11
    8d9c:	90 e1       	ldi	r25, 0x10	; 16
    8d9e:	90 93 53 0e 	sts	0x0E53, r25
    8da2:	80 93 52 0e 	sts	0x0E52, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    8da6:	85 ed       	ldi	r24, 0xD5	; 213
    8da8:	9d e2       	ldi	r25, 0x2D	; 45
    8daa:	90 93 0c 10 	sts	0x100C, r25
    8dae:	80 93 0b 10 	sts	0x100B, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    8db2:	82 ed       	ldi	r24, 0xD2	; 210
    8db4:	9d e2       	ldi	r25, 0x2D	; 45
    8db6:	90 93 0e 10 	sts	0x100E, r25
    8dba:	80 93 0d 10 	sts	0x100D, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    8dbe:	8f ec       	ldi	r24, 0xCF	; 207
    8dc0:	9d e2       	ldi	r25, 0x2D	; 45
    8dc2:	90 93 10 10 	sts	0x1010, r25
    8dc6:	80 93 0f 10 	sts	0x100F, r24
    8dca:	e2 ef       	ldi	r30, 0xF2	; 242
    8dcc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    8dce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    8dd0:	29 e0       	ldi	r18, 0x09	; 9
    8dd2:	30 e1       	ldi	r19, 0x10	; 16
    8dd4:	df 01       	movw	r26, r30
    8dd6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    8dd8:	8c 93       	st	X, r24
    8dda:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    8ddc:	1c 92       	st	X, r1
    8dde:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    8de0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    8de2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    8de4:	35 83       	std	Z+5, r19	; 0x05
    8de6:	24 83       	std	Z+4, r18	; 0x04
    8de8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    8dea:	9e e0       	ldi	r25, 0x0E	; 14
    8dec:	e0 34       	cpi	r30, 0x40	; 64
    8dee:	f9 07       	cpc	r31, r25
    8df0:	89 f7       	brne	.-30     	; 0x8dd4 <init_player_state+0x152>
    8df2:	8a e6       	ldi	r24, 0x6A	; 106
    8df4:	9d e2       	ldi	r25, 0x2D	; 45
    8df6:	90 93 0a 10 	sts	0x100A, r25
    8dfa:	80 93 09 10 	sts	0x1009, r24
    8dfe:	08 95       	ret

00008e00 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    8e00:	ef 92       	push	r14
    8e02:	ff 92       	push	r15
    8e04:	0f 93       	push	r16
    8e06:	1f 93       	push	r17
    8e08:	cf 93       	push	r28
    8e0a:	df 93       	push	r29
    8e0c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    8e0e:	22 e4       	ldi	r18, 0x42	; 66
    8e10:	82 9f       	mul	r24, r18
    8e12:	c0 01       	movw	r24, r0
    8e14:	11 24       	eor	r1, r1
    8e16:	ec 01       	movw	r28, r24
    8e18:	ca 55       	subi	r28, 0x5A	; 90
    8e1a:	d2 4f       	sbci	r29, 0xF2	; 242
    8e1c:	fe 01       	movw	r30, r28
    8e1e:	e7 51       	subi	r30, 0x17	; 23
    8e20:	ff 4f       	sbci	r31, 0xFF	; 255
    8e22:	83 e0       	ldi	r24, 0x03	; 3
    8e24:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    8e26:	31 96       	adiw	r30, 0x01	; 1
    8e28:	85 e0       	ldi	r24, 0x05	; 5
    8e2a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    8e2c:	de 01       	movw	r26, r28
    8e2e:	a2 51       	subi	r26, 0x12	; 18
    8e30:	bf 4f       	sbci	r27, 0xFF	; 255
    8e32:	eb e0       	ldi	r30, 0x0B	; 11
    8e34:	f0 e1       	ldi	r31, 0x10	; 16
    8e36:	11 96       	adiw	r26, 0x01	; 1
    8e38:	fc 93       	st	X, r31
    8e3a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    8e3c:	85 ed       	ldi	r24, 0xD5	; 213
    8e3e:	9d e2       	ldi	r25, 0x2D	; 45
    8e40:	91 83       	std	Z+1, r25	; 0x01
    8e42:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    8e44:	82 ed       	ldi	r24, 0xD2	; 210
    8e46:	9d e2       	ldi	r25, 0x2D	; 45
    8e48:	93 83       	std	Z+3, r25	; 0x03
    8e4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    8e4c:	8f ec       	ldi	r24, 0xCF	; 207
    8e4e:	9d e2       	ldi	r25, 0x2D	; 45
    8e50:	95 83       	std	Z+5, r25	; 0x05
    8e52:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    8e54:	fe 01       	movw	r30, r28
    8e56:	ea 52       	subi	r30, 0x2A	; 42
    8e58:	ff 4f       	sbci	r31, 0xFF	; 255
    8e5a:	81 e0       	ldi	r24, 0x01	; 1
    8e5c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    8e5e:	31 96       	adiw	r30, 0x01	; 1
    8e60:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    8e62:	32 97       	sbiw	r30, 0x02	; 2
    8e64:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    8e66:	34 96       	adiw	r30, 0x04	; 4
    8e68:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    8e6a:	31 96       	adiw	r30, 0x01	; 1
    8e6c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    8e6e:	50 97       	sbiw	r26, 0x10	; 16
    8e70:	e7 e0       	ldi	r30, 0x07	; 7
    8e72:	f0 e1       	ldi	r31, 0x10	; 16
    8e74:	ed 93       	st	X+, r30
    8e76:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    8e78:	87 e6       	ldi	r24, 0x67	; 103
    8e7a:	9d e2       	ldi	r25, 0x2D	; 45
    8e7c:	91 83       	std	Z+1, r25	; 0x01
    8e7e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    8e80:	fe 01       	movw	r30, r28
    8e82:	ee 52       	subi	r30, 0x2E	; 46
    8e84:	ff 4f       	sbci	r31, 0xFF	; 255
    8e86:	11 82       	std	Z+1, r1	; 0x01
    8e88:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    8e8a:	3c 97       	sbiw	r30, 0x0c	; 12
    8e8c:	10 82       	st	Z, r1
    8e8e:	11 82       	std	Z+1, r1	; 0x01
    8e90:	12 82       	std	Z+2, r1	; 0x02
    8e92:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    8e94:	7e 01       	movw	r14, r28
    8e96:	8a ec       	ldi	r24, 0xCA	; 202
    8e98:	e8 0e       	add	r14, r24
    8e9a:	f1 1c       	adc	r15, r1
    8e9c:	80 e0       	ldi	r24, 0x00	; 0
    8e9e:	90 e0       	ldi	r25, 0x00	; 0
    8ea0:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    8ea4:	f7 01       	movw	r30, r14
    8ea6:	60 83       	st	Z, r22
    8ea8:	71 83       	std	Z+1, r23	; 0x01
    8eaa:	82 83       	std	Z+2, r24	; 0x02
    8eac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    8eae:	c2 53       	subi	r28, 0x32	; 50
    8eb0:	df 4f       	sbci	r29, 0xFF	; 255
    8eb2:	b8 01       	movw	r22, r16
    8eb4:	80 e0       	ldi	r24, 0x00	; 0
    8eb6:	90 e0       	ldi	r25, 0x00	; 0
    8eb8:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    8ebc:	68 83       	st	Y, r22
    8ebe:	79 83       	std	Y+1, r23	; 0x01
    8ec0:	8a 83       	std	Y+2, r24	; 0x02
    8ec2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    8ec4:	df 91       	pop	r29
    8ec6:	cf 91       	pop	r28
    8ec8:	1f 91       	pop	r17
    8eca:	0f 91       	pop	r16
    8ecc:	ff 90       	pop	r15
    8ece:	ef 90       	pop	r14
    8ed0:	08 95       	ret

00008ed2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    8ed2:	af 92       	push	r10
    8ed4:	bf 92       	push	r11
    8ed6:	cf 92       	push	r12
    8ed8:	df 92       	push	r13
    8eda:	ef 92       	push	r14
    8edc:	ff 92       	push	r15
    8ede:	1f 93       	push	r17
    8ee0:	cf 93       	push	r28
    8ee2:	df 93       	push	r29
    8ee4:	18 2f       	mov	r17, r24
    8ee6:	7b 01       	movw	r14, r22
    8ee8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    8eea:	82 e4       	ldi	r24, 0x42	; 66
    8eec:	18 9f       	mul	r17, r24
    8eee:	e0 01       	movw	r28, r0
    8ef0:	11 24       	eor	r1, r1
    8ef2:	ca 55       	subi	r28, 0x5A	; 90
    8ef4:	d2 4f       	sbci	r29, 0xF2	; 242
    8ef6:	fe 01       	movw	r30, r28
    8ef8:	e3 54       	subi	r30, 0x43	; 67
    8efa:	ff 4f       	sbci	r31, 0xFF	; 255
    8efc:	91 e0       	ldi	r25, 0x01	; 1
    8efe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    8f00:	32 96       	adiw	r30, 0x02	; 2
    8f02:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    8f04:	31 97       	sbiw	r30, 0x01	; 1
    8f06:	88 e0       	ldi	r24, 0x08	; 8
    8f08:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    8f0a:	32 96       	adiw	r30, 0x02	; 2
    8f0c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    8f0e:	31 96       	adiw	r30, 0x01	; 1
    8f10:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    8f12:	31 96       	adiw	r30, 0x01	; 1
    8f14:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    8f16:	31 96       	adiw	r30, 0x01	; 1
    8f18:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    8f1a:	31 96       	adiw	r30, 0x01	; 1
    8f1c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    8f1e:	31 96       	adiw	r30, 0x01	; 1
    8f20:	82 e0       	ldi	r24, 0x02	; 2
    8f22:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    8f24:	7c 96       	adiw	r30, 0x1c	; 28
    8f26:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    8f28:	31 96       	adiw	r30, 0x01	; 1
    8f2a:	8a e0       	ldi	r24, 0x0A	; 10
    8f2c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    8f2e:	de 01       	movw	r26, r28
    8f30:	aa 51       	subi	r26, 0x1A	; 26
    8f32:	bf 4f       	sbci	r27, 0xFF	; 255
    8f34:	e9 ea       	ldi	r30, 0xA9	; 169
    8f36:	ff e0       	ldi	r31, 0x0F	; 15
    8f38:	ed 93       	st	X+, r30
    8f3a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    8f3c:	81 e6       	ldi	r24, 0x61	; 97
    8f3e:	9d e2       	ldi	r25, 0x2D	; 45
    8f40:	91 83       	std	Z+1, r25	; 0x01
    8f42:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    8f44:	8e e5       	ldi	r24, 0x5E	; 94
    8f46:	9d e2       	ldi	r25, 0x2D	; 45
    8f48:	93 83       	std	Z+3, r25	; 0x03
    8f4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    8f4c:	fe 01       	movw	r30, r28
    8f4e:	e4 54       	subi	r30, 0x44	; 68
    8f50:	ff 4f       	sbci	r31, 0xFF	; 255
    8f52:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    8f54:	32 97       	sbiw	r30, 0x02	; 2
    8f56:	11 82       	std	Z+1, r1	; 0x01
    8f58:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    8f5a:	3c 97       	sbiw	r30, 0x0c	; 12
    8f5c:	10 82       	st	Z, r1
    8f5e:	11 82       	std	Z+1, r1	; 0x01
    8f60:	12 82       	std	Z+2, r1	; 0x02
    8f62:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    8f64:	5e 01       	movw	r10, r28
    8f66:	e2 eb       	ldi	r30, 0xB2	; 178
    8f68:	ae 0e       	add	r10, r30
    8f6a:	b1 1c       	adc	r11, r1
    8f6c:	80 e0       	ldi	r24, 0x00	; 0
    8f6e:	90 e0       	ldi	r25, 0x00	; 0
    8f70:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    8f74:	f5 01       	movw	r30, r10
    8f76:	60 83       	st	Z, r22
    8f78:	71 83       	std	Z+1, r23	; 0x01
    8f7a:	82 83       	std	Z+2, r24	; 0x02
    8f7c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    8f7e:	ca 54       	subi	r28, 0x4A	; 74
    8f80:	df 4f       	sbci	r29, 0xFF	; 255
    8f82:	b6 01       	movw	r22, r12
    8f84:	80 e0       	ldi	r24, 0x00	; 0
    8f86:	90 e0       	ldi	r25, 0x00	; 0
    8f88:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    8f8c:	68 83       	st	Y, r22
    8f8e:	79 83       	std	Y+1, r23	; 0x01
    8f90:	8a 83       	std	Y+2, r24	; 0x02
    8f92:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    8f94:	a6 01       	movw	r20, r12
    8f96:	b7 01       	movw	r22, r14
    8f98:	81 2f       	mov	r24, r17
}
    8f9a:	df 91       	pop	r29
    8f9c:	cf 91       	pop	r28
    8f9e:	1f 91       	pop	r17
    8fa0:	ff 90       	pop	r15
    8fa2:	ef 90       	pop	r14
    8fa4:	df 90       	pop	r13
    8fa6:	cf 90       	pop	r12
    8fa8:	bf 90       	pop	r11
    8faa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    8fac:	0c 94 00 47 	jmp	0x8e00	; 0x8e00 <init_enemy_shot>

00008fb0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    8fb0:	af 92       	push	r10
    8fb2:	bf 92       	push	r11
    8fb4:	cf 92       	push	r12
    8fb6:	df 92       	push	r13
    8fb8:	ef 92       	push	r14
    8fba:	ff 92       	push	r15
    8fbc:	1f 93       	push	r17
    8fbe:	cf 93       	push	r28
    8fc0:	df 93       	push	r29
    8fc2:	18 2f       	mov	r17, r24
    8fc4:	7b 01       	movw	r14, r22
    8fc6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    8fc8:	82 e4       	ldi	r24, 0x42	; 66
    8fca:	18 9f       	mul	r17, r24
    8fcc:	e0 01       	movw	r28, r0
    8fce:	11 24       	eor	r1, r1
    8fd0:	ca 55       	subi	r28, 0x5A	; 90
    8fd2:	d2 4f       	sbci	r29, 0xF2	; 242
    8fd4:	fe 01       	movw	r30, r28
    8fd6:	e3 54       	subi	r30, 0x43	; 67
    8fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    8fda:	91 e0       	ldi	r25, 0x01	; 1
    8fdc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    8fde:	33 96       	adiw	r30, 0x03	; 3
    8fe0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    8fe2:	31 96       	adiw	r30, 0x01	; 1
    8fe4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    8fe6:	31 96       	adiw	r30, 0x01	; 1
    8fe8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    8fea:	31 96       	adiw	r30, 0x01	; 1
    8fec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    8fee:	31 96       	adiw	r30, 0x01	; 1
    8ff0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    8ff2:	31 96       	adiw	r30, 0x01	; 1
    8ff4:	84 e0       	ldi	r24, 0x04	; 4
    8ff6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    8ff8:	7c 96       	adiw	r30, 0x1c	; 28
    8ffa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    8ffc:	31 96       	adiw	r30, 0x01	; 1
    8ffe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    9000:	de 01       	movw	r26, r28
    9002:	aa 51       	subi	r26, 0x1A	; 26
    9004:	bf 4f       	sbci	r27, 0xFF	; 255
    9006:	ed ea       	ldi	r30, 0xAD	; 173
    9008:	ff e0       	ldi	r31, 0x0F	; 15
    900a:	ed 93       	st	X+, r30
    900c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    900e:	84 e6       	ldi	r24, 0x64	; 100
    9010:	9d e2       	ldi	r25, 0x2D	; 45
    9012:	91 83       	std	Z+1, r25	; 0x01
    9014:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    9016:	fe 01       	movw	r30, r28
    9018:	e4 54       	subi	r30, 0x44	; 68
    901a:	ff 4f       	sbci	r31, 0xFF	; 255
    901c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    901e:	32 97       	sbiw	r30, 0x02	; 2
    9020:	84 e1       	ldi	r24, 0x14	; 20
    9022:	90 e0       	ldi	r25, 0x00	; 0
    9024:	91 83       	std	Z+1, r25	; 0x01
    9026:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    9028:	3c 97       	sbiw	r30, 0x0c	; 12
    902a:	10 82       	st	Z, r1
    902c:	11 82       	std	Z+1, r1	; 0x01
    902e:	12 82       	std	Z+2, r1	; 0x02
    9030:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    9032:	5e 01       	movw	r10, r28
    9034:	e2 eb       	ldi	r30, 0xB2	; 178
    9036:	ae 0e       	add	r10, r30
    9038:	b1 1c       	adc	r11, r1
    903a:	80 e0       	ldi	r24, 0x00	; 0
    903c:	90 e0       	ldi	r25, 0x00	; 0
    903e:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    9042:	f5 01       	movw	r30, r10
    9044:	60 83       	st	Z, r22
    9046:	71 83       	std	Z+1, r23	; 0x01
    9048:	82 83       	std	Z+2, r24	; 0x02
    904a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    904c:	ca 54       	subi	r28, 0x4A	; 74
    904e:	df 4f       	sbci	r29, 0xFF	; 255
    9050:	b6 01       	movw	r22, r12
    9052:	80 e0       	ldi	r24, 0x00	; 0
    9054:	90 e0       	ldi	r25, 0x00	; 0
    9056:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    905a:	68 83       	st	Y, r22
    905c:	79 83       	std	Y+1, r23	; 0x01
    905e:	8a 83       	std	Y+2, r24	; 0x02
    9060:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9062:	a6 01       	movw	r20, r12
    9064:	b7 01       	movw	r22, r14
    9066:	81 2f       	mov	r24, r17
}
    9068:	df 91       	pop	r29
    906a:	cf 91       	pop	r28
    906c:	1f 91       	pop	r17
    906e:	ff 90       	pop	r15
    9070:	ef 90       	pop	r14
    9072:	df 90       	pop	r13
    9074:	cf 90       	pop	r12
    9076:	bf 90       	pop	r11
    9078:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    907a:	0c 94 00 47 	jmp	0x8e00	; 0x8e00 <init_enemy_shot>

0000907e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    907e:	cf 93       	push	r28
    9080:	df 93       	push	r29
    9082:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9084:	bc 01       	movw	r22, r24
    9086:	88 81       	ld	r24, Y
    9088:	99 81       	ldd	r25, Y+1	; 0x01
    908a:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <EepromReadBlock>
	if (status == 0x03)
    908e:	83 30       	cpi	r24, 0x03	; 3
    9090:	29 f4       	brne	.+10     	; 0x909c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9092:	ce 01       	movw	r24, r28
	}
}
    9094:	df 91       	pop	r29
    9096:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9098:	0c 94 27 36 	jmp	0x6c4e	; 0x6c4e <EepromWriteBlock>
	}
}
    909c:	df 91       	pop	r29
    909e:	cf 91       	pop	r28
    90a0:	08 95       	ret

000090a2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    90a2:	1f 93       	push	r17
    90a4:	cf 93       	push	r28
    90a6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    90a8:	d0 e0       	ldi	r29, 0x00	; 0
    90aa:	10 e2       	ldi	r17, 0x20	; 32
    90ac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    90ae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    90b0:	c1 17       	cp	r28, r17
    90b2:	41 f0       	breq	.+16     	; 0x90c4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    90b4:	40 e0       	ldi	r20, 0x00	; 0
    90b6:	50 e0       	ldi	r21, 0x00	; 0
    90b8:	6c 2f       	mov	r22, r28
    90ba:	8d 2f       	mov	r24, r29
    90bc:	0e 94 b6 34 	call	0x696c	; 0x696c <SetTile>
    90c0:	cf 5f       	subi	r28, 0xFF	; 255
    90c2:	f6 cf       	rjmp	.-20     	; 0x90b0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    90c4:	df 5f       	subi	r29, 0xFF	; 255
    90c6:	dc 31       	cpi	r29, 0x1C	; 28
    90c8:	91 f7       	brne	.-28     	; 0x90ae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    90ca:	df 91       	pop	r29
    90cc:	cf 91       	pop	r28
    90ce:	1f 91       	pop	r17
    90d0:	08 95       	ret

000090d2 <get_level_tile>:
{
	return 20;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    90d2:	df 92       	push	r13
    90d4:	ef 92       	push	r14
    90d6:	ff 92       	push	r15
    90d8:	0f 93       	push	r16
    90da:	1f 93       	push	r17
    90dc:	cf 93       	push	r28
    90de:	df 93       	push	r29
    90e0:	8c 01       	movw	r16, r24
    90e2:	7b 01       	movw	r14, r22
    90e4:	ea 01       	movw	r28, r20
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;

	if (is_space())
    90e6:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    90ea:	d0 90 ba 0d 	lds	r13, 0x0DBA
    90ee:	88 23       	and	r24, r24
    90f0:	29 f1       	breq	.+74     	; 0x913c <get_level_tile+0x6a>
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
    90f2:	ce 01       	movw	r24, r28
    90f4:	65 e0       	ldi	r22, 0x05	; 5
    90f6:	70 e0       	ldi	r23, 0x00	; 0
    90f8:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
	u8 map_x = 0;
	u8 map_y = 0;

	if (is_space())
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
    90fc:	f7 01       	movw	r30, r14
    90fe:	f6 95       	lsr	r31
    9100:	e7 95       	ror	r30
    9102:	f6 95       	lsr	r31
    9104:	e7 95       	ror	r30
    9106:	ff 27       	eor	r31, r31
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH);
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    9108:	6d 9d       	mul	r22, r13
    910a:	e0 0d       	add	r30, r0
    910c:	f1 1d       	adc	r31, r1
    910e:	11 24       	eor	r1, r1
    9110:	32 96       	adiw	r30, 0x02	; 2
    9112:	e0 0f       	add	r30, r16
    9114:	f1 1f       	adc	r31, r17
    9116:	64 91       	lpm	r22, Z

	if (is_space())
	{
		map_x = x / MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH);
    9118:	f7 01       	movw	r30, r14
    911a:	e3 70       	andi	r30, 0x03	; 3
    911c:	ff 27       	eor	r31, r31
    911e:	9c 01       	movw	r18, r24
    9120:	22 0f       	add	r18, r18
    9122:	33 1f       	adc	r19, r19
    9124:	22 0f       	add	r18, r18
    9126:	33 1f       	adc	r19, r19
    9128:	e2 0f       	add	r30, r18
    912a:	f3 1f       	adc	r31, r19
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+mega_tile_offset]);
    912c:	84 e1       	ldi	r24, 0x14	; 20
    912e:	68 9f       	mul	r22, r24
    9130:	e0 0d       	add	r30, r0
    9132:	f1 1d       	adc	r31, r1
    9134:	11 24       	eor	r1, r1
    9136:	ed 51       	subi	r30, 0x1D	; 29
    9138:	f1 4b       	sbci	r31, 0xB1	; 177
    913a:	27 c0       	rjmp	.+78     	; 0x918a <get_level_tile+0xb8>
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    913c:	25 e0       	ldi	r18, 0x05	; 5
    913e:	30 e0       	ldi	r19, 0x00	; 0
    9140:	ce 01       	movw	r24, r28
    9142:	b9 01       	movw	r22, r18
    9144:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
    9148:	46 2f       	mov	r20, r22
    914a:	ec 01       	movw	r28, r24
		mega_tile_index *= MAP_SPACE_MEGA_TILES_MEGA_TILE_WIDTH*MAP_SPACE_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_space_mega_tiles[mega_tile_index+mega_tile_offset]);
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    914c:	c7 01       	movw	r24, r14
    914e:	b9 01       	movw	r22, r18
    9150:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
    9154:	77 27       	eor	r23, r23
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    9156:	4d 9d       	mul	r20, r13
    9158:	60 0d       	add	r22, r0
    915a:	71 1d       	adc	r23, r1
    915c:	11 24       	eor	r1, r1
    915e:	6e 5f       	subi	r22, 0xFE	; 254
    9160:	7f 4f       	sbci	r23, 0xFF	; 255
    9162:	f8 01       	movw	r30, r16
    9164:	e6 0f       	add	r30, r22
    9166:	f7 1f       	adc	r31, r23
    9168:	64 91       	lpm	r22, Z
	}
	else
	{
		map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
		map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    916a:	45 e0       	ldi	r20, 0x05	; 5
    916c:	4c 9f       	mul	r20, r28
    916e:	90 01       	movw	r18, r0
    9170:	4d 9f       	mul	r20, r29
    9172:	30 0d       	add	r19, r0
    9174:	11 24       	eor	r1, r1
    9176:	fc 01       	movw	r30, r24
    9178:	e2 0f       	add	r30, r18
    917a:	f3 1f       	adc	r31, r19
		mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
		mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
		return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    917c:	89 e1       	ldi	r24, 0x19	; 25
    917e:	68 9f       	mul	r22, r24
    9180:	e0 0d       	add	r30, r0
    9182:	f1 1d       	adc	r31, r1
    9184:	11 24       	eor	r1, r1
    9186:	ef 55       	subi	r30, 0x5F	; 95
    9188:	fe 4a       	sbci	r31, 0xAE	; 174
    918a:	84 91       	lpm	r24, Z
	}
}
    918c:	df 91       	pop	r29
    918e:	cf 91       	pop	r28
    9190:	1f 91       	pop	r17
    9192:	0f 91       	pop	r16
    9194:	ff 90       	pop	r15
    9196:	ef 90       	pop	r14
    9198:	df 90       	pop	r13
    919a:	08 95       	ret

0000919c <render_camera_view>:

void render_camera_view()
{
    919c:	6f 92       	push	r6
    919e:	7f 92       	push	r7
    91a0:	8f 92       	push	r8
    91a2:	9f 92       	push	r9
    91a4:	af 92       	push	r10
    91a6:	bf 92       	push	r11
    91a8:	cf 92       	push	r12
    91aa:	df 92       	push	r13
    91ac:	ef 92       	push	r14
    91ae:	ff 92       	push	r15
    91b0:	0f 93       	push	r16
    91b2:	1f 93       	push	r17
    91b4:	cf 93       	push	r28
    91b6:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    91b8:	e0 90 aa 0d 	lds	r14, 0x0DAA
    91bc:	f0 90 ab 0d 	lds	r15, 0x0DAB
    91c0:	83 e0       	ldi	r24, 0x03	; 3
    91c2:	f6 94       	lsr	r15
    91c4:	e7 94       	ror	r14
    91c6:	8a 95       	dec	r24
    91c8:	e1 f7       	brne	.-8      	; 0x91c2 <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    91ca:	00 91 ac 0d 	lds	r16, 0x0DAC
    91ce:	10 91 ad 0d 	lds	r17, 0x0DAD
    91d2:	93 e0       	ldi	r25, 0x03	; 3
    91d4:	16 95       	lsr	r17
    91d6:	07 95       	ror	r16
    91d8:	9a 95       	dec	r25
    91da:	e1 f7       	brne	.-8      	; 0x91d4 <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    91dc:	37 01       	movw	r6, r14
    91de:	67 01       	movw	r12, r14
    91e0:	8c e1       	ldi	r24, 0x1C	; 28
    91e2:	c8 0e       	add	r12, r24
    91e4:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    91e6:	58 01       	movw	r10, r16
    91e8:	89 e1       	ldi	r24, 0x19	; 25
    91ea:	a8 0e       	add	r10, r24
    91ec:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    91ee:	2e e1       	ldi	r18, 0x1E	; 30
    91f0:	82 2e       	mov	r8, r18
    91f2:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    91f4:	c6 14       	cp	r12, r6
    91f6:	d7 04       	cpc	r13, r7
    91f8:	70 f1       	brcs	.+92     	; 0x9256 <render_camera_view+0xba>
    91fa:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    91fc:	ac 16       	cp	r10, r28
    91fe:	bd 06       	cpc	r11, r29
    9200:	30 f1       	brcs	.+76     	; 0x924e <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    9202:	ae 01       	movw	r20, r28
    9204:	b3 01       	movw	r22, r6
    9206:	80 91 a5 0f 	lds	r24, 0x0FA5
    920a:	90 91 a6 0f 	lds	r25, 0x0FA6
    920e:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9212:	28 2f       	mov	r18, r24
    9214:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    9216:	80 91 b3 0c 	lds	r24, 0x0CB3
    921a:	86 95       	lsr	r24
    921c:	86 95       	lsr	r24
    921e:	86 95       	lsr	r24
    9220:	90 e0       	ldi	r25, 0x00	; 0
    9222:	80 1b       	sub	r24, r16
    9224:	91 0b       	sbc	r25, r17
    9226:	8c 0f       	add	r24, r28
    9228:	9d 1f       	adc	r25, r29
    922a:	b4 01       	movw	r22, r8
    922c:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
    9230:	90 91 b2 0c 	lds	r25, 0x0CB2
    9234:	96 95       	lsr	r25
    9236:	96 95       	lsr	r25
    9238:	96 95       	lsr	r25
    923a:	9e 19       	sub	r25, r14
    923c:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    923e:	a9 01       	movw	r20, r18
    9240:	68 2f       	mov	r22, r24
    9242:	89 2f       	mov	r24, r25
    9244:	8f 71       	andi	r24, 0x1F	; 31
    9246:	0e 94 b6 34 	call	0x696c	; 0x696c <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    924a:	21 96       	adiw	r28, 0x01	; 1
    924c:	d7 cf       	rjmp	.-82     	; 0x91fc <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    924e:	8f ef       	ldi	r24, 0xFF	; 255
    9250:	68 1a       	sub	r6, r24
    9252:	78 0a       	sbc	r7, r24
    9254:	cf cf       	rjmp	.-98     	; 0x91f4 <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    9256:	df 91       	pop	r29
    9258:	cf 91       	pop	r28
    925a:	1f 91       	pop	r17
    925c:	0f 91       	pop	r16
    925e:	ff 90       	pop	r15
    9260:	ef 90       	pop	r14
    9262:	df 90       	pop	r13
    9264:	cf 90       	pop	r12
    9266:	bf 90       	pop	r11
    9268:	af 90       	pop	r10
    926a:	9f 90       	pop	r9
    926c:	8f 90       	pop	r8
    926e:	7f 90       	pop	r7
    9270:	6f 90       	pop	r6
    9272:	08 95       	ret

00009274 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    9274:	ff 92       	push	r15
    9276:	0f 93       	push	r16
    9278:	1f 93       	push	r17
    927a:	cf 93       	push	r28
    927c:	df 93       	push	r29
    927e:	00 d0       	rcall	.+0      	; 0x9280 <spawn_enemy+0xc>
    9280:	cd b7       	in	r28, 0x3d	; 61
    9282:	de b7       	in	r29, 0x3e	; 62
    9284:	26 ea       	ldi	r18, 0xA6	; 166
    9286:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9288:	f1 2c       	mov	r15, r1
    928a:	f9 01       	movw	r30, r18
    928c:	e3 54       	subi	r30, 0x43	; 67
    928e:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9290:	40 81       	ld	r20, Z
    9292:	41 11       	cpse	r20, r1
    9294:	1c c0       	rjmp	.+56     	; 0x92ce <spawn_enemy+0x5a>
    9296:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    9298:	40 81       	ld	r20, Z
    929a:	41 11       	cpse	r20, r1
    929c:	18 c0       	rjmp	.+48     	; 0x92ce <spawn_enemy+0x5a>
    929e:	ab 01       	movw	r20, r22
    92a0:	8c 01       	movw	r16, r24
				{
					if (is_space())
    92a2:	69 83       	std	Y+1, r22	; 0x01
    92a4:	5a 83       	std	Y+2, r21	; 0x02
    92a6:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    92aa:	49 81       	ldd	r20, Y+1	; 0x01
    92ac:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    92ae:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    92b0:	88 23       	and	r24, r24
    92b2:	21 f0       	breq	.+8      	; 0x92bc <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    92b4:	8f 2d       	mov	r24, r15
    92b6:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <init_enemy_shark>
    92ba:	03 c0       	rjmp	.+6      	; 0x92c2 <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    92bc:	8f 2d       	mov	r24, r15
    92be:	0e 94 69 47 	call	0x8ed2	; 0x8ed2 <init_enemy_spider>
					}
					game.active_enemies++;
    92c2:	80 91 c5 0d 	lds	r24, 0x0DC5
    92c6:	8f 5f       	subi	r24, 0xFF	; 255
    92c8:	80 93 c5 0d 	sts	0x0DC5, r24
    92cc:	06 c0       	rjmp	.+12     	; 0x92da <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    92ce:	f3 94       	inc	r15
    92d0:	2e 5b       	subi	r18, 0xBE	; 190
    92d2:	3f 4f       	sbci	r19, 0xFF	; 255
    92d4:	45 e0       	ldi	r20, 0x05	; 5
    92d6:	f4 12       	cpse	r15, r20
    92d8:	d8 cf       	rjmp	.-80     	; 0x928a <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    92da:	0f 90       	pop	r0
    92dc:	0f 90       	pop	r0
    92de:	df 91       	pop	r29
    92e0:	cf 91       	pop	r28
    92e2:	1f 91       	pop	r17
    92e4:	0f 91       	pop	r16
    92e6:	ff 90       	pop	r15
    92e8:	08 95       	ret

000092ea <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    92ea:	8b 30       	cpi	r24, 0x0B	; 11
    92ec:	30 f4       	brcc	.+12     	; 0x92fa <solid_tile+0x10>
    92ee:	89 30       	cpi	r24, 0x09	; 9
    92f0:	48 f4       	brcc	.+18     	; 0x9304 <solid_tile+0x1a>
    92f2:	81 50       	subi	r24, 0x01	; 1
    92f4:	84 30       	cpi	r24, 0x04	; 4
    92f6:	20 f4       	brcc	.+8      	; 0x9300 <solid_tile+0x16>
    92f8:	05 c0       	rjmp	.+10     	; 0x9304 <solid_tile+0x1a>
    92fa:	8c 50       	subi	r24, 0x0C	; 12
    92fc:	83 30       	cpi	r24, 0x03	; 3
    92fe:	10 f0       	brcs	.+4      	; 0x9304 <solid_tile+0x1a>
		case L_ICICLE_UP : return 1;
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
    9300:	80 e0       	ldi	r24, 0x00	; 0
    9302:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    9304:	81 e0       	ldi	r24, 0x01	; 1
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
}
    9306:	08 95       	ret

00009308 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    9308:	cf 92       	push	r12
    930a:	df 92       	push	r13
    930c:	ef 92       	push	r14
    930e:	ff 92       	push	r15
    9310:	0f 93       	push	r16
    9312:	1f 93       	push	r17
    9314:	cf 93       	push	r28
    9316:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    9318:	68 e1       	ldi	r22, 0x18	; 24
    931a:	80 e0       	ldi	r24, 0x00	; 0
    931c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <LBRandom>
    9320:	88 0f       	add	r24, r24
    9322:	88 0f       	add	r24, r24
    9324:	88 0f       	add	r24, r24

	game.column_count++;
    9326:	20 91 b4 0d 	lds	r18, 0x0DB4
    932a:	30 91 b5 0d 	lds	r19, 0x0DB5
    932e:	2f 5f       	subi	r18, 0xFF	; 255
    9330:	3f 4f       	sbci	r19, 0xFF	; 255
    9332:	30 93 b5 0d 	sts	0x0DB5, r19
    9336:	20 93 b4 0d 	sts	0x0DB4, r18
    933a:	c0 e0       	ldi	r28, 0x00	; 0
    933c:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    933e:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9340:	3e e1       	ldi	r19, 0x1E	; 30
    9342:	e3 2e       	mov	r14, r19
    9344:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    9346:	08 2f       	mov	r16, r24
    9348:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    934a:	40 91 ac 0d 	lds	r20, 0x0DAC
    934e:	50 91 ad 0d 	lds	r21, 0x0DAD
    9352:	23 e0       	ldi	r18, 0x03	; 3
    9354:	56 95       	lsr	r21
    9356:	47 95       	ror	r20
    9358:	2a 95       	dec	r18
    935a:	e1 f7       	brne	.-8      	; 0x9354 <append_tile_column+0x4c>
    935c:	4c 0f       	add	r20, r28
    935e:	5d 1f       	adc	r21, r29
    9360:	60 91 a6 0d 	lds	r22, 0x0DA6
    9364:	70 91 a7 0d 	lds	r23, 0x0DA7
    9368:	80 91 a5 0f 	lds	r24, 0x0FA5
    936c:	90 91 a6 0f 	lds	r25, 0x0FA6
    9370:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9374:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9376:	28 2f       	mov	r18, r24
    9378:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    937a:	90 91 b3 0c 	lds	r25, 0x0CB3
    937e:	96 95       	lsr	r25
    9380:	96 95       	lsr	r25
    9382:	96 95       	lsr	r25
    9384:	ae 01       	movw	r20, r28
    9386:	49 0f       	add	r20, r25
    9388:	51 1d       	adc	r21, r1
    938a:	ca 01       	movw	r24, r20
    938c:	b7 01       	movw	r22, r14
    938e:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9392:	a9 01       	movw	r20, r18
    9394:	68 2f       	mov	r22, r24
    9396:	80 91 c3 0d 	lds	r24, 0x0DC3
    939a:	0e 94 b6 34 	call	0x696c	; 0x696c <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    939e:	20 91 c6 0d 	lds	r18, 0x0DC6
    93a2:	30 e0       	ldi	r19, 0x00	; 0
    93a4:	80 91 b4 0d 	lds	r24, 0x0DB4
    93a8:	90 91 b5 0d 	lds	r25, 0x0DB5
    93ac:	b9 01       	movw	r22, r18
    93ae:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
    93b2:	21 50       	subi	r18, 0x01	; 1
    93b4:	31 09       	sbc	r19, r1
    93b6:	82 17       	cp	r24, r18
    93b8:	93 07       	cpc	r25, r19
    93ba:	91 f5       	brne	.+100    	; 0x9420 <append_tile_column+0x118>
    93bc:	80 91 c5 0d 	lds	r24, 0x0DC5
    93c0:	85 30       	cpi	r24, 0x05	; 5
    93c2:	70 f5       	brcc	.+92     	; 0x9420 <append_tile_column+0x118>
    93c4:	d1 10       	cpse	r13, r1
    93c6:	2a c0       	rjmp	.+84     	; 0x941c <append_tile_column+0x114>
		{
			if (is_space())
    93c8:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    93cc:	88 23       	and	r24, r24
    93ce:	31 f0       	breq	.+12     	; 0x93dc <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    93d0:	80 91 aa 0d 	lds	r24, 0x0DAA
    93d4:	90 91 ab 0d 	lds	r25, 0x0DAB
    93d8:	b8 01       	movw	r22, r16
    93da:	1c c0       	rjmp	.+56     	; 0x9414 <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    93dc:	8c 2d       	mov	r24, r12
    93de:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    93e2:	88 23       	and	r24, r24
    93e4:	e9 f0       	breq	.+58     	; 0x9420 <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    93e6:	20 91 ac 0d 	lds	r18, 0x0DAC
    93ea:	30 91 ad 0d 	lds	r19, 0x0DAD
    93ee:	83 e0       	ldi	r24, 0x03	; 3
    93f0:	36 95       	lsr	r19
    93f2:	27 95       	ror	r18
    93f4:	8a 95       	dec	r24
    93f6:	e1 f7       	brne	.-8      	; 0x93f0 <append_tile_column+0xe8>
    93f8:	21 50       	subi	r18, 0x01	; 1
    93fa:	30 4e       	sbci	r19, 0xE0	; 224
    93fc:	2c 0f       	add	r18, r28
    93fe:	3d 1f       	adc	r19, r29
    9400:	b9 01       	movw	r22, r18
    9402:	93 e0       	ldi	r25, 0x03	; 3
    9404:	66 0f       	add	r22, r22
    9406:	77 1f       	adc	r23, r23
    9408:	9a 95       	dec	r25
    940a:	e1 f7       	brne	.-8      	; 0x9404 <append_tile_column+0xfc>
    940c:	80 91 aa 0d 	lds	r24, 0x0DAA
    9410:	90 91 ab 0d 	lds	r25, 0x0DAB
    9414:	80 52       	subi	r24, 0x20	; 32
    9416:	9f 4f       	sbci	r25, 0xFF	; 255
    9418:	0e 94 3a 49 	call	0x9274	; 0x9274 <spawn_enemy>
    941c:	dd 24       	eor	r13, r13
    941e:	d3 94       	inc	r13
    9420:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    9422:	ca 31       	cpi	r28, 0x1A	; 26
    9424:	d1 05       	cpc	r29, r1
    9426:	09 f0       	breq	.+2      	; 0x942a <append_tile_column+0x122>
    9428:	90 cf       	rjmp	.-224    	; 0x934a <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    942a:	c0 91 a6 0d 	lds	r28, 0x0DA6
    942e:	d0 91 a7 0d 	lds	r29, 0x0DA7
    9432:	21 96       	adiw	r28, 0x01	; 1
    9434:	d0 93 a7 0d 	sts	0x0DA7, r29
    9438:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    943c:	80 91 c3 0d 	lds	r24, 0x0DC3
    9440:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9442:	80 32       	cpi	r24, 0x20	; 32
    9444:	18 f4       	brcc	.+6      	; 0x944c <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9446:	80 93 c3 0d 	sts	0x0DC3, r24
    944a:	02 c0       	rjmp	.+4      	; 0x9450 <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    944c:	10 92 c3 0d 	sts	0x0DC3, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    9450:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    9454:	88 23       	and	r24, r24
    9456:	31 f0       	breq	.+12     	; 0x9464 <append_tile_column+0x15c>
    9458:	a0 97       	sbiw	r28, 0x20	; 32
    945a:	20 f0       	brcs	.+8      	; 0x9464 <append_tile_column+0x15c>
    945c:	10 92 a7 0d 	sts	0x0DA7, r1
    9460:	10 92 a6 0d 	sts	0x0DA6, r1
}
    9464:	df 91       	pop	r29
    9466:	cf 91       	pop	r28
    9468:	1f 91       	pop	r17
    946a:	0f 91       	pop	r16
    946c:	ff 90       	pop	r15
    946e:	ef 90       	pop	r14
    9470:	df 90       	pop	r13
    9472:	cf 90       	pop	r12
    9474:	08 95       	ret

00009476 <append_tile_row>:

void append_tile_row()
{
    9476:	cf 93       	push	r28
    9478:	df 93       	push	r29
    947a:	c0 e0       	ldi	r28, 0x00	; 0
    947c:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    947e:	40 91 a8 0d 	lds	r20, 0x0DA8
    9482:	50 91 a9 0d 	lds	r21, 0x0DA9
    9486:	60 91 aa 0d 	lds	r22, 0x0DAA
    948a:	70 91 ab 0d 	lds	r23, 0x0DAB
    948e:	83 e0       	ldi	r24, 0x03	; 3
    9490:	76 95       	lsr	r23
    9492:	67 95       	ror	r22
    9494:	8a 95       	dec	r24
    9496:	e1 f7       	brne	.-8      	; 0x9490 <append_tile_row+0x1a>
    9498:	6c 0f       	add	r22, r28
    949a:	7d 1f       	adc	r23, r29
    949c:	80 91 a5 0f 	lds	r24, 0x0FA5
    94a0:	90 91 a6 0f 	lds	r25, 0x0FA6
    94a4:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    94a8:	48 2f       	mov	r20, r24
    94aa:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    94ac:	80 91 b2 0c 	lds	r24, 0x0CB2
    94b0:	86 95       	lsr	r24
    94b2:	86 95       	lsr	r24
    94b4:	86 95       	lsr	r24
    94b6:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    94b8:	60 91 c4 0d 	lds	r22, 0x0DC4
    94bc:	8f 71       	andi	r24, 0x1F	; 31
    94be:	0e 94 b6 34 	call	0x696c	; 0x696c <SetTile>
    94c2:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    94c4:	cd 31       	cpi	r28, 0x1D	; 29
    94c6:	d1 05       	cpc	r29, r1
    94c8:	d1 f6       	brne	.-76     	; 0x947e <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    94ca:	80 91 a8 0d 	lds	r24, 0x0DA8
    94ce:	90 91 a9 0d 	lds	r25, 0x0DA9
    94d2:	01 96       	adiw	r24, 0x01	; 1
    94d4:	90 93 a9 0d 	sts	0x0DA9, r25
    94d8:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    94dc:	80 91 c4 0d 	lds	r24, 0x0DC4
    94e0:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    94e2:	8e 31       	cpi	r24, 0x1E	; 30
    94e4:	18 f4       	brcc	.+6      	; 0x94ec <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    94e6:	80 93 c4 0d 	sts	0x0DC4, r24
    94ea:	02 c0       	rjmp	.+4      	; 0x94f0 <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    94ec:	10 92 c4 0d 	sts	0x0DC4, r1
}
    94f0:	df 91       	pop	r29
    94f2:	cf 91       	pop	r28
    94f4:	08 95       	ret

000094f6 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    94f6:	80 91 aa 0d 	lds	r24, 0x0DAA
    94fa:	90 91 ab 0d 	lds	r25, 0x0DAB
    94fe:	01 96       	adiw	r24, 0x01	; 1
    9500:	90 93 ab 0d 	sts	0x0DAB, r25
    9504:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    9508:	60 e0       	ldi	r22, 0x00	; 0
    950a:	81 e0       	ldi	r24, 0x01	; 1
    950c:	0e 94 a8 42 	call	0x8550	; 0x8550 <Scroll>
	if (++game.scroll_x == 8)
    9510:	80 91 c1 0d 	lds	r24, 0x0DC1
    9514:	8f 5f       	subi	r24, 0xFF	; 255
    9516:	88 30       	cpi	r24, 0x08	; 8
    9518:	19 f0       	breq	.+6      	; 0x9520 <move_camera_x+0x2a>
    951a:	80 93 c1 0d 	sts	0x0DC1, r24
    951e:	08 95       	ret
	{
		game.scroll_x = 0;
    9520:	10 92 c1 0d 	sts	0x0DC1, r1
		append_tile_column();
    9524:	0c 94 84 49 	jmp	0x9308	; 0x9308 <append_tile_column>

00009528 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    9528:	80 91 ac 0d 	lds	r24, 0x0DAC
    952c:	90 91 ad 0d 	lds	r25, 0x0DAD
    9530:	02 96       	adiw	r24, 0x02	; 2
    9532:	90 93 ad 0d 	sts	0x0DAD, r25
    9536:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    953a:	80 91 c2 0d 	lds	r24, 0x0DC2
    953e:	8e 5f       	subi	r24, 0xFE	; 254
    9540:	80 93 c2 0d 	sts	0x0DC2, r24
	Scroll(0,2);
    9544:	62 e0       	ldi	r22, 0x02	; 2
    9546:	80 e0       	ldi	r24, 0x00	; 0
    9548:	0e 94 a8 42 	call	0x8550	; 0x8550 <Scroll>
	if (game.scroll_y == 8)
    954c:	80 91 c2 0d 	lds	r24, 0x0DC2
    9550:	88 30       	cpi	r24, 0x08	; 8
    9552:	21 f4       	brne	.+8      	; 0x955c <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    9554:	10 92 c2 0d 	sts	0x0DC2, r1
		append_tile_row();
    9558:	0c 94 3b 4a 	jmp	0x9476	; 0x9476 <append_tile_row>
    955c:	08 95       	ret

0000955e <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    955e:	82 e0       	ldi	r24, 0x02	; 2
    9560:	80 93 35 0e 	sts	0x0E35, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9564:	85 e0       	ldi	r24, 0x05	; 5
    9566:	80 93 36 0e 	sts	0x0E36, r24
	game.player.run.anims = run_anim;
    956a:	ef ef       	ldi	r30, 0xFF	; 255
    956c:	ff e0       	ldi	r31, 0x0F	; 15
    956e:	f0 93 3b 0e 	sts	0x0E3B, r31
    9572:	e0 93 3a 0e 	sts	0x0E3A, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    9576:	87 e7       	ldi	r24, 0x77	; 119
    9578:	9d e2       	ldi	r25, 0x2D	; 45
    957a:	91 83       	std	Z+1, r25	; 0x01
    957c:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    957e:	8d e6       	ldi	r24, 0x6D	; 109
    9580:	9d e2       	ldi	r25, 0x2D	; 45
    9582:	93 83       	std	Z+3, r25	; 0x03
    9584:	82 83       	std	Z+2, r24	; 0x02
    9586:	08 95       	ret

00009588 <map_level_info>:
}

void map_level_info(char* level)
{
    9588:	0f 93       	push	r16
    958a:	1f 93       	push	r17
    958c:	cf 93       	push	r28
    958e:	df 93       	push	r29
    9590:	ec 01       	movw	r28, r24
	game.current_level = level;
    9592:	90 93 a6 0f 	sts	0x0FA6, r25
    9596:	80 93 a5 0f 	sts	0x0FA5, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    959a:	fc 01       	movw	r30, r24
    959c:	84 91       	lpm	r24, Z
    959e:	80 93 ba 0d 	sts	0x0DBA, r24
	game.raw_level_height = pgm_read_byte(&level[1]);
    95a2:	8e 01       	movw	r16, r28
    95a4:	0f 5f       	subi	r16, 0xFF	; 255
    95a6:	1f 4f       	sbci	r17, 0xFF	; 255
    95a8:	f8 01       	movw	r30, r16
    95aa:	84 91       	lpm	r24, Z
    95ac:	80 93 bb 0d 	sts	0x0DBB, r24
	if (!is_space())
    95b0:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    95b4:	81 11       	cpse	r24, r1
    95b6:	11 c0       	rjmp	.+34     	; 0x95da <map_level_info+0x52>
	{
		game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    95b8:	fe 01       	movw	r30, r28
    95ba:	c4 91       	lpm	r28, Z
    95bc:	8c 2f       	mov	r24, r28
    95be:	88 0f       	add	r24, r24
    95c0:	88 0f       	add	r24, r24
    95c2:	c8 0f       	add	r28, r24
    95c4:	c0 93 bc 0d 	sts	0x0DBC, r28
		game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    95c8:	f8 01       	movw	r30, r16
    95ca:	04 91       	lpm	r16, Z
    95cc:	80 2f       	mov	r24, r16
    95ce:	88 0f       	add	r24, r24
    95d0:	88 0f       	add	r24, r24
    95d2:	08 0f       	add	r16, r24
    95d4:	00 93 bd 0d 	sts	0x0DBD, r16
    95d8:	06 c0       	rjmp	.+12     	; 0x95e6 <map_level_info+0x5e>
		
	}
	else
	{
		game.level_width = 255;
    95da:	8f ef       	ldi	r24, 0xFF	; 255
    95dc:	80 93 bc 0d 	sts	0x0DBC, r24
		game.level_height = 25;
    95e0:	89 e1       	ldi	r24, 0x19	; 25
    95e2:	80 93 bd 0d 	sts	0x0DBD, r24
	}
}
    95e6:	df 91       	pop	r29
    95e8:	cf 91       	pop	r28
    95ea:	1f 91       	pop	r17
    95ec:	0f 91       	pop	r16
    95ee:	08 95       	ret

000095f0 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    95f0:	2f 92       	push	r2
    95f2:	3f 92       	push	r3
    95f4:	4f 92       	push	r4
    95f6:	5f 92       	push	r5
    95f8:	6f 92       	push	r6
    95fa:	7f 92       	push	r7
    95fc:	8f 92       	push	r8
    95fe:	9f 92       	push	r9
    9600:	af 92       	push	r10
    9602:	bf 92       	push	r11
    9604:	cf 92       	push	r12
    9606:	df 92       	push	r13
    9608:	ef 92       	push	r14
    960a:	ff 92       	push	r15
    960c:	0f 93       	push	r16
    960e:	1f 93       	push	r17
    9610:	cf 93       	push	r28
    9612:	df 93       	push	r29
    9614:	00 d0       	rcall	.+0      	; 0x9616 <on_solid_ground+0x26>
    9616:	00 d0       	rcall	.+0      	; 0x9618 <on_solid_ground+0x28>
    9618:	00 d0       	rcall	.+0      	; 0x961a <on_solid_ground+0x2a>
    961a:	cd b7       	in	r28, 0x3d	; 61
    961c:	de b7       	in	r29, 0x3e	; 62
    961e:	9e 83       	std	Y+6, r25	; 0x06
    9620:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9622:	88 e0       	ldi	r24, 0x08	; 8
    9624:	48 9f       	mul	r20, r24
    9626:	a0 01       	movw	r20, r0
    9628:	11 24       	eor	r1, r1
    962a:	26 2e       	mov	r2, r22
    962c:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    962e:	00 e0       	ldi	r16, 0x00	; 0
    9630:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9632:	ca 01       	movw	r24, r20
    9634:	aa 27       	eor	r26, r26
    9636:	97 fd       	sbrc	r25, 7
    9638:	a0 95       	com	r26
    963a:	ba 2f       	mov	r27, r26
    963c:	89 83       	std	Y+1, r24	; 0x01
    963e:	9a 83       	std	Y+2, r25	; 0x02
    9640:	ab 83       	std	Y+3, r26	; 0x03
    9642:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9644:	02 15       	cp	r16, r2
    9646:	13 05       	cpc	r17, r3
    9648:	09 f4       	brne	.+2      	; 0x964c <on_solid_ground+0x5c>
    964a:	85 c0       	rjmp	.+266    	; 0x9756 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    964c:	69 81       	ldd	r22, Y+1	; 0x01
    964e:	7a 81       	ldd	r23, Y+2	; 0x02
    9650:	8b 81       	ldd	r24, Y+3	; 0x03
    9652:	9c 81       	ldd	r25, Y+4	; 0x04
    9654:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    9658:	4b 01       	movw	r8, r22
    965a:	5c 01       	movw	r10, r24
    965c:	b8 01       	movw	r22, r16
    965e:	88 27       	eor	r24, r24
    9660:	77 fd       	sbrc	r23, 7
    9662:	80 95       	com	r24
    9664:	98 2f       	mov	r25, r24
    9666:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    966a:	6b 01       	movw	r12, r22
    966c:	7c 01       	movw	r14, r24
    966e:	ad 81       	ldd	r26, Y+5	; 0x05
    9670:	be 81       	ldd	r27, Y+6	; 0x06
    9672:	18 96       	adiw	r26, 0x08	; 8
    9674:	2d 91       	ld	r18, X+
    9676:	3d 91       	ld	r19, X+
    9678:	4d 91       	ld	r20, X+
    967a:	5c 91       	ld	r21, X
    967c:	1b 97       	sbiw	r26, 0x0b	; 11
    967e:	c5 01       	movw	r24, r10
    9680:	b4 01       	movw	r22, r8
    9682:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9686:	20 e0       	ldi	r18, 0x00	; 0
    9688:	30 e0       	ldi	r19, 0x00	; 0
    968a:	40 e0       	ldi	r20, 0x00	; 0
    968c:	5e e3       	ldi	r21, 0x3E	; 62
    968e:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9692:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9696:	2b 01       	movw	r4, r22
    9698:	3c 01       	movw	r6, r24
    969a:	20 e0       	ldi	r18, 0x00	; 0
    969c:	30 e0       	ldi	r19, 0x00	; 0
    969e:	40 e0       	ldi	r20, 0x00	; 0
    96a0:	5e e3       	ldi	r21, 0x3E	; 62
    96a2:	ed 81       	ldd	r30, Y+5	; 0x05
    96a4:	fe 81       	ldd	r31, Y+6	; 0x06
    96a6:	64 81       	ldd	r22, Z+4	; 0x04
    96a8:	75 81       	ldd	r23, Z+5	; 0x05
    96aa:	86 81       	ldd	r24, Z+6	; 0x06
    96ac:	97 81       	ldd	r25, Z+7	; 0x07
    96ae:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    96b2:	a7 01       	movw	r20, r14
    96b4:	96 01       	movw	r18, r12
    96b6:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    96ba:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    96be:	a2 01       	movw	r20, r4
    96c0:	80 91 a5 0f 	lds	r24, 0x0FA5
    96c4:	90 91 a6 0f 	lds	r25, 0x0FA6
    96c8:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    96cc:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    96ce:	ad 81       	ldd	r26, Y+5	; 0x05
    96d0:	be 81       	ldd	r27, Y+6	; 0x06
    96d2:	18 96       	adiw	r26, 0x08	; 8
    96d4:	2d 91       	ld	r18, X+
    96d6:	3d 91       	ld	r19, X+
    96d8:	4d 91       	ld	r20, X+
    96da:	5c 91       	ld	r21, X
    96dc:	1b 97       	sbiw	r26, 0x0b	; 11
    96de:	c5 01       	movw	r24, r10
    96e0:	b4 01       	movw	r22, r8
    96e2:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    96e6:	20 e0       	ldi	r18, 0x00	; 0
    96e8:	30 e0       	ldi	r19, 0x00	; 0
    96ea:	40 e0       	ldi	r20, 0x00	; 0
    96ec:	5e e3       	ldi	r21, 0x3E	; 62
    96ee:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    96f2:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    96f6:	4b 01       	movw	r8, r22
    96f8:	5c 01       	movw	r10, r24
    96fa:	20 e0       	ldi	r18, 0x00	; 0
    96fc:	30 e0       	ldi	r19, 0x00	; 0
    96fe:	40 ee       	ldi	r20, 0xE0	; 224
    9700:	50 e4       	ldi	r21, 0x40	; 64
    9702:	ed 81       	ldd	r30, Y+5	; 0x05
    9704:	fe 81       	ldd	r31, Y+6	; 0x06
    9706:	64 81       	ldd	r22, Z+4	; 0x04
    9708:	75 81       	ldd	r23, Z+5	; 0x05
    970a:	86 81       	ldd	r24, Z+6	; 0x06
    970c:	97 81       	ldd	r25, Z+7	; 0x07
    970e:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9712:	20 e0       	ldi	r18, 0x00	; 0
    9714:	30 e0       	ldi	r19, 0x00	; 0
    9716:	40 e0       	ldi	r20, 0x00	; 0
    9718:	5e e3       	ldi	r21, 0x3E	; 62
    971a:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    971e:	a7 01       	movw	r20, r14
    9720:	96 01       	movw	r18, r12
    9722:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9726:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    972a:	a4 01       	movw	r20, r8
    972c:	80 91 a5 0f 	lds	r24, 0x0FA5
    9730:	90 91 a6 0f 	lds	r25, 0x0FA6
    9734:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9738:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    973a:	87 2d       	mov	r24, r7
    973c:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    9740:	81 11       	cpse	r24, r1
    9742:	0b c0       	rjmp	.+22     	; 0x975a <on_solid_ground+0x16a>
    9744:	8f 2d       	mov	r24, r15
    9746:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    974a:	0f 5f       	subi	r16, 0xFF	; 255
    974c:	1f 4f       	sbci	r17, 0xFF	; 255
    974e:	88 23       	and	r24, r24
    9750:	09 f4       	brne	.+2      	; 0x9754 <on_solid_ground+0x164>
    9752:	78 cf       	rjmp	.-272    	; 0x9644 <on_solid_ground+0x54>
    9754:	02 c0       	rjmp	.+4      	; 0x975a <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    9756:	80 e0       	ldi	r24, 0x00	; 0
    9758:	01 c0       	rjmp	.+2      	; 0x975c <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    975a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    975c:	26 96       	adiw	r28, 0x06	; 6
    975e:	0f b6       	in	r0, 0x3f	; 63
    9760:	f8 94       	cli
    9762:	de bf       	out	0x3e, r29	; 62
    9764:	0f be       	out	0x3f, r0	; 63
    9766:	cd bf       	out	0x3d, r28	; 61
    9768:	df 91       	pop	r29
    976a:	cf 91       	pop	r28
    976c:	1f 91       	pop	r17
    976e:	0f 91       	pop	r16
    9770:	ff 90       	pop	r15
    9772:	ef 90       	pop	r14
    9774:	df 90       	pop	r13
    9776:	cf 90       	pop	r12
    9778:	bf 90       	pop	r11
    977a:	af 90       	pop	r10
    977c:	9f 90       	pop	r9
    977e:	8f 90       	pop	r8
    9780:	7f 90       	pop	r7
    9782:	6f 90       	pop	r6
    9784:	5f 90       	pop	r5
    9786:	4f 90       	pop	r4
    9788:	3f 90       	pop	r3
    978a:	2f 90       	pop	r2
    978c:	08 95       	ret

0000978e <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    978e:	80 91 ef 0d 	lds	r24, 0x0DEF
    9792:	88 23       	and	r24, r24
    9794:	61 f0       	breq	.+24     	; 0x97ae <find_shot_slot+0x20>
    9796:	80 91 09 0e 	lds	r24, 0x0E09
    979a:	88 23       	and	r24, r24
    979c:	31 f0       	breq	.+12     	; 0x97aa <find_shot_slot+0x1c>
    979e:	80 91 23 0e 	lds	r24, 0x0E23
    97a2:	81 11       	cpse	r24, r1
    97a4:	04 c0       	rjmp	.+8      	; 0x97ae <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    97a6:	82 e0       	ldi	r24, 0x02	; 2
    97a8:	08 95       	ret
    97aa:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    97ac:	08 95       	ret
	}
	return 0;
    97ae:	80 e0       	ldi	r24, 0x00	; 0
}
    97b0:	08 95       	ret

000097b2 <update_shot>:

void update_shot()
{
    97b2:	4f 92       	push	r4
    97b4:	5f 92       	push	r5
    97b6:	6f 92       	push	r6
    97b8:	7f 92       	push	r7
    97ba:	af 92       	push	r10
    97bc:	bf 92       	push	r11
    97be:	df 92       	push	r13
    97c0:	ef 92       	push	r14
    97c2:	ff 92       	push	r15
    97c4:	0f 93       	push	r16
    97c6:	1f 93       	push	r17
    97c8:	cf 93       	push	r28
    97ca:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    97cc:	80 91 9e 0f 	lds	r24, 0x0F9E
    97d0:	90 91 9f 0f 	lds	r25, 0x0F9F
    97d4:	90 ff       	sbrs	r25, 0
    97d6:	e5 c0       	rjmp	.+458    	; 0x99a2 <update_shot+0x1f0>
    97d8:	80 91 d7 0d 	lds	r24, 0x0DD7
    97dc:	83 30       	cpi	r24, 0x03	; 3
    97de:	08 f0       	brcs	.+2      	; 0x97e2 <update_shot+0x30>
    97e0:	e0 c0       	rjmp	.+448    	; 0x99a2 <update_shot+0x1f0>
	{
		SFX_PLAYER_SHOOT;
    97e2:	2f ef       	ldi	r18, 0xFF	; 255
    97e4:	43 e2       	ldi	r20, 0x23	; 35
    97e6:	63 e0       	ldi	r22, 0x03	; 3
    97e8:	82 e0       	ldi	r24, 0x02	; 2
    97ea:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <TriggerNote>
		idx = find_shot_slot();
    97ee:	0e 94 c7 4b 	call	0x978e	; 0x978e <find_shot_slot>
    97f2:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    97f4:	08 2f       	mov	r16, r24
    97f6:	10 e0       	ldi	r17, 0x00	; 0
    97f8:	9a e1       	ldi	r25, 0x1A	; 26
    97fa:	d9 2e       	mov	r13, r25
    97fc:	d0 9e       	mul	r13, r16
    97fe:	e0 01       	movw	r28, r0
    9800:	d1 9e       	mul	r13, r17
    9802:	d0 0d       	add	r29, r0
    9804:	11 24       	eor	r1, r1
    9806:	ce 01       	movw	r24, r28
    9808:	80 51       	subi	r24, 0x10	; 16
    980a:	92 4f       	sbci	r25, 0xF2	; 242
    980c:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    9810:	40 e0       	ldi	r20, 0x00	; 0
    9812:	bc 01       	movw	r22, r24
    9814:	8b e0       	ldi	r24, 0x0B	; 11
    9816:	8f 0d       	add	r24, r15
    9818:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		game.player.shot[idx].active = 1;
    981c:	ca 55       	subi	r28, 0x5A	; 90
    981e:	d2 4f       	sbci	r29, 0xF2	; 242
    9820:	fe 01       	movw	r30, r28
    9822:	e7 5b       	subi	r30, 0xB7	; 183
    9824:	ff 4f       	sbci	r31, 0xFF	; 255
    9826:	81 e0       	ldi	r24, 0x01	; 1
    9828:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    982a:	60 91 d0 0d 	lds	r22, 0x0DD0
    982e:	70 91 d1 0d 	lds	r23, 0x0DD1
    9832:	80 91 d2 0d 	lds	r24, 0x0DD2
    9836:	90 91 d3 0d 	lds	r25, 0x0DD3
    983a:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    983e:	23 e0       	ldi	r18, 0x03	; 3
    9840:	76 95       	lsr	r23
    9842:	67 95       	ror	r22
    9844:	2a 95       	dec	r18
    9846:	e1 f7       	brne	.-8      	; 0x9840 <update_shot+0x8e>
    9848:	33 e0       	ldi	r19, 0x03	; 3
    984a:	66 0f       	add	r22, r22
    984c:	77 1f       	adc	r23, r23
    984e:	3a 95       	dec	r19
    9850:	e1 f7       	brne	.-8      	; 0x984a <update_shot+0x98>
    9852:	80 e0       	ldi	r24, 0x00	; 0
    9854:	90 e0       	ldi	r25, 0x00	; 0
    9856:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    985a:	2b 01       	movw	r4, r22
    985c:	3c 01       	movw	r6, r24
    985e:	5e 01       	movw	r10, r28
    9860:	20 e4       	ldi	r18, 0x40	; 64
    9862:	a2 0e       	add	r10, r18
    9864:	b1 1c       	adc	r11, r1
    9866:	f5 01       	movw	r30, r10
    9868:	60 83       	st	Z, r22
    986a:	71 83       	std	Z+1, r23	; 0x01
    986c:	82 83       	std	Z+2, r24	; 0x02
    986e:	93 83       	std	Z+3, r25	; 0x03
		if (is_space())
    9870:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    9874:	98 01       	movw	r18, r16
    9876:	2f 5f       	subi	r18, 0xFF	; 255
    9878:	3f 4f       	sbci	r19, 0xFF	; 255
    987a:	79 01       	movw	r14, r18
    987c:	88 23       	and	r24, r24
    987e:	59 f1       	breq	.+86     	; 0x98d6 <update_shot+0x124>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    9880:	60 91 db 0d 	lds	r22, 0x0DDB
    9884:	d2 9e       	mul	r13, r18
    9886:	80 01       	movw	r16, r0
    9888:	d3 9e       	mul	r13, r19
    988a:	10 0d       	add	r17, r0
    988c:	11 24       	eor	r1, r1
    988e:	0a 55       	subi	r16, 0x5A	; 90
    9890:	12 4f       	sbci	r17, 0xF2	; 242
    9892:	38 e0       	ldi	r19, 0x08	; 8
    9894:	63 9f       	mul	r22, r19
    9896:	b0 01       	movw	r22, r0
    9898:	11 24       	eor	r1, r1
    989a:	88 27       	eor	r24, r24
    989c:	77 fd       	sbrc	r23, 7
    989e:	80 95       	com	r24
    98a0:	98 2f       	mov	r25, r24
    98a2:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    98a6:	9b 01       	movw	r18, r22
    98a8:	ac 01       	movw	r20, r24
    98aa:	60 91 cc 0d 	lds	r22, 0x0DCC
    98ae:	70 91 cd 0d 	lds	r23, 0x0DCD
    98b2:	80 91 ce 0d 	lds	r24, 0x0DCE
    98b6:	90 91 cf 0d 	lds	r25, 0x0DCF
    98ba:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    98be:	f8 01       	movw	r30, r16
    98c0:	62 a3       	std	Z+34, r22	; 0x22
    98c2:	73 a3       	std	Z+35, r23	; 0x23
    98c4:	84 a3       	std	Z+36, r24	; 0x24
    98c6:	95 a3       	std	Z+37, r25	; 0x25
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    98c8:	cc 5b       	subi	r28, 0xBC	; 188
    98ca:	df 4f       	sbci	r29, 0xFF	; 255
    98cc:	80 e9       	ldi	r24, 0x90	; 144
    98ce:	91 e0       	ldi	r25, 0x01	; 1
    98d0:	99 83       	std	Y+1, r25	; 0x01
    98d2:	88 83       	st	Y, r24
    98d4:	61 c0       	rjmp	.+194    	; 0x9998 <update_shot+0x1e6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    98d6:	80 91 d8 0d 	lds	r24, 0x0DD8
    98da:	82 fd       	sbrc	r24, 2
    98dc:	0d c0       	rjmp	.+26     	; 0x98f8 <update_shot+0x146>
			{
				game.player.shot[idx].shared.y += 8;
    98de:	20 e0       	ldi	r18, 0x00	; 0
    98e0:	30 e0       	ldi	r19, 0x00	; 0
    98e2:	40 e0       	ldi	r20, 0x00	; 0
    98e4:	51 e4       	ldi	r21, 0x41	; 65
    98e6:	c3 01       	movw	r24, r6
    98e8:	b2 01       	movw	r22, r4
    98ea:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    98ee:	f5 01       	movw	r30, r10
    98f0:	60 83       	st	Z, r22
    98f2:	71 83       	std	Z+1, r23	; 0x01
    98f4:	82 83       	std	Z+2, r24	; 0x02
    98f6:	93 83       	std	Z+3, r25	; 0x03
			}
			if (game.player.direction == D_RIGHT)
    98f8:	80 91 da 0d 	lds	r24, 0x0DDA
    98fc:	81 30       	cpi	r24, 0x01	; 1
    98fe:	39 f5       	brne	.+78     	; 0x994e <update_shot+0x19c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    9900:	8a e1       	ldi	r24, 0x1A	; 26
    9902:	d8 2e       	mov	r13, r24
    9904:	de 9c       	mul	r13, r14
    9906:	e0 01       	movw	r28, r0
    9908:	df 9c       	mul	r13, r15
    990a:	d0 0d       	add	r29, r0
    990c:	11 24       	eor	r1, r1
    990e:	ca 55       	subi	r28, 0x5A	; 90
    9910:	d2 4f       	sbci	r29, 0xF2	; 242
    9912:	20 e0       	ldi	r18, 0x00	; 0
    9914:	30 e0       	ldi	r19, 0x00	; 0
    9916:	40 e8       	ldi	r20, 0x80	; 128
    9918:	51 e4       	ldi	r21, 0x41	; 65
    991a:	60 91 cc 0d 	lds	r22, 0x0DCC
    991e:	70 91 cd 0d 	lds	r23, 0x0DCD
    9922:	80 91 ce 0d 	lds	r24, 0x0DCE
    9926:	90 91 cf 0d 	lds	r25, 0x0DCF
    992a:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    992e:	6a a3       	std	Y+34, r22	; 0x22
    9930:	7b a3       	std	Y+35, r23	; 0x23
    9932:	8c a3       	std	Y+36, r24	; 0x24
    9934:	9d a3       	std	Y+37, r25	; 0x25
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    9936:	d0 9e       	mul	r13, r16
    9938:	f0 01       	movw	r30, r0
    993a:	d1 9e       	mul	r13, r17
    993c:	f0 0d       	add	r31, r0
    993e:	11 24       	eor	r1, r1
    9940:	e6 51       	subi	r30, 0x16	; 22
    9942:	f2 4f       	sbci	r31, 0xF2	; 242
    9944:	80 e9       	ldi	r24, 0x90	; 144
    9946:	91 e0       	ldi	r25, 0x01	; 1
    9948:	91 83       	std	Z+1, r25	; 0x01
    994a:	80 83       	st	Z, r24
    994c:	25 c0       	rjmp	.+74     	; 0x9998 <update_shot+0x1e6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    994e:	8a e1       	ldi	r24, 0x1A	; 26
    9950:	80 9f       	mul	r24, r16
    9952:	f0 01       	movw	r30, r0
    9954:	81 9f       	mul	r24, r17
    9956:	f0 0d       	add	r31, r0
    9958:	11 24       	eor	r1, r1
    995a:	e6 51       	subi	r30, 0x16	; 22
    995c:	f2 4f       	sbci	r31, 0xF2	; 242
    995e:	20 e7       	ldi	r18, 0x70	; 112
    9960:	3e ef       	ldi	r19, 0xFE	; 254
    9962:	31 83       	std	Z+1, r19	; 0x01
    9964:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    9966:	8e 9d       	mul	r24, r14
    9968:	e0 01       	movw	r28, r0
    996a:	8f 9d       	mul	r24, r15
    996c:	d0 0d       	add	r29, r0
    996e:	11 24       	eor	r1, r1
    9970:	ca 55       	subi	r28, 0x5A	; 90
    9972:	d2 4f       	sbci	r29, 0xF2	; 242
    9974:	20 e0       	ldi	r18, 0x00	; 0
    9976:	30 e0       	ldi	r19, 0x00	; 0
    9978:	40 e0       	ldi	r20, 0x00	; 0
    997a:	51 e4       	ldi	r21, 0x41	; 65
    997c:	60 91 cc 0d 	lds	r22, 0x0DCC
    9980:	70 91 cd 0d 	lds	r23, 0x0DCD
    9984:	80 91 ce 0d 	lds	r24, 0x0DCE
    9988:	90 91 cf 0d 	lds	r25, 0x0DCF
    998c:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    9990:	6a a3       	std	Y+34, r22	; 0x22
    9992:	7b a3       	std	Y+35, r23	; 0x23
    9994:	8c a3       	std	Y+36, r24	; 0x24
    9996:	9d a3       	std	Y+37, r25	; 0x25
			}
		}
		game.player.active_shots++;
    9998:	80 91 d7 0d 	lds	r24, 0x0DD7
    999c:	8f 5f       	subi	r24, 0xFF	; 255
    999e:	80 93 d7 0d 	sts	0x0DD7, r24
	}
}
    99a2:	df 91       	pop	r29
    99a4:	cf 91       	pop	r28
    99a6:	1f 91       	pop	r17
    99a8:	0f 91       	pop	r16
    99aa:	ff 90       	pop	r15
    99ac:	ef 90       	pop	r14
    99ae:	df 90       	pop	r13
    99b0:	bf 90       	pop	r11
    99b2:	af 90       	pop	r10
    99b4:	7f 90       	pop	r7
    99b6:	6f 90       	pop	r6
    99b8:	5f 90       	pop	r5
    99ba:	4f 90       	pop	r4
    99bc:	08 95       	ret

000099be <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    99be:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    99c0:	86 17       	cp	r24, r22
    99c2:	97 07       	cpc	r25, r23
    99c4:	28 f4       	brcc	.+10     	; 0x99d0 <pixel_overlap+0x12>
    99c6:	94 2f       	mov	r25, r20
    99c8:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    99ca:	89 2f       	mov	r24, r25
    99cc:	86 1b       	sub	r24, r22
    99ce:	01 c0       	rjmp	.+2      	; 0x99d2 <pixel_overlap+0x14>
	return 1;
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    99d0:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    99d2:	e4 0f       	add	r30, r20
    99d4:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    99d6:	62 0f       	add	r22, r18
    99d8:	71 1d       	adc	r23, r1
	if (s2 < s1)
    99da:	6e 17       	cp	r22, r30
    99dc:	7f 07       	cpc	r23, r31
    99de:	10 f4       	brcc	.+4      	; 0x99e4 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    99e0:	6e 1b       	sub	r22, r30
    99e2:	86 0f       	add	r24, r22
	}
	return result;
}
    99e4:	08 95       	ret

000099e6 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    99e6:	2f 92       	push	r2
    99e8:	3f 92       	push	r3
    99ea:	4f 92       	push	r4
    99ec:	5f 92       	push	r5
    99ee:	6f 92       	push	r6
    99f0:	7f 92       	push	r7
    99f2:	8f 92       	push	r8
    99f4:	9f 92       	push	r9
    99f6:	af 92       	push	r10
    99f8:	bf 92       	push	r11
    99fa:	cf 92       	push	r12
    99fc:	df 92       	push	r13
    99fe:	ef 92       	push	r14
    9a00:	ff 92       	push	r15
    9a02:	0f 93       	push	r16
    9a04:	1f 93       	push	r17
    9a06:	cf 93       	push	r28
    9a08:	df 93       	push	r29
    9a0a:	cd b7       	in	r28, 0x3d	; 61
    9a0c:	de b7       	in	r29, 0x3e	; 62
    9a0e:	68 97       	sbiw	r28, 0x18	; 24
    9a10:	0f b6       	in	r0, 0x3f	; 63
    9a12:	f8 94       	cli
    9a14:	de bf       	out	0x3e, r29	; 62
    9a16:	0f be       	out	0x3f, r0	; 63
    9a18:	cd bf       	out	0x3d, r28	; 61
    9a1a:	98 8f       	std	Y+24, r25	; 0x18
    9a1c:	8f 8b       	std	Y+23, r24	; 0x17
    9a1e:	16 2f       	mov	r17, r22
    9a20:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    9a22:	dc 01       	movw	r26, r24
    9a24:	14 96       	adiw	r26, 0x04	; 4
    9a26:	4d 90       	ld	r4, X+
    9a28:	5d 90       	ld	r5, X+
    9a2a:	6d 90       	ld	r6, X+
    9a2c:	7c 90       	ld	r7, X
    9a2e:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    9a30:	18 96       	adiw	r26, 0x08	; 8
    9a32:	cd 90       	ld	r12, X+
    9a34:	dd 90       	ld	r13, X+
    9a36:	ed 90       	ld	r14, X+
    9a38:	fc 90       	ld	r15, X
    9a3a:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    9a3c:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    9a40:	81 11       	cpse	r24, r1
    9a42:	f2 c2       	rjmp	.+1508   	; 0xa028 <collision_detect_level+0x642>
    9a44:	ef 89       	ldd	r30, Y+23	; 0x17
    9a46:	f8 8d       	ldd	r31, Y+24	; 0x18
    9a48:	84 85       	ldd	r24, Z+12	; 0x0c
    9a4a:	95 85       	ldd	r25, Z+13	; 0x0d
    9a4c:	89 2b       	or	r24, r25
    9a4e:	61 f4       	brne	.+24     	; 0x9a68 <collision_detect_level+0x82>
    9a50:	20 e0       	ldi	r18, 0x00	; 0
    9a52:	30 e0       	ldi	r19, 0x00	; 0
    9a54:	a9 01       	movw	r20, r18
    9a56:	60 81       	ld	r22, Z
    9a58:	71 81       	ldd	r23, Z+1	; 0x01
    9a5a:	82 81       	ldd	r24, Z+2	; 0x02
    9a5c:	93 81       	ldd	r25, Z+3	; 0x03
    9a5e:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    9a62:	88 23       	and	r24, r24
    9a64:	09 f4       	brne	.+2      	; 0x9a68 <collision_detect_level+0x82>
    9a66:	e0 c2       	rjmp	.+1472   	; 0xa028 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    9a68:	20 e0       	ldi	r18, 0x00	; 0
    9a6a:	30 e0       	ldi	r19, 0x00	; 0
    9a6c:	40 e0       	ldi	r20, 0x00	; 0
    9a6e:	5e e3       	ldi	r21, 0x3E	; 62
    9a70:	c3 01       	movw	r24, r6
    9a72:	b2 01       	movw	r22, r4
    9a74:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9a78:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9a7c:	4b 01       	movw	r8, r22
    9a7e:	5c 01       	movw	r10, r24
    9a80:	68 87       	std	Y+8, r22	; 0x08
    9a82:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    9a84:	20 e0       	ldi	r18, 0x00	; 0
    9a86:	30 e0       	ldi	r19, 0x00	; 0
    9a88:	a9 01       	movw	r20, r18
    9a8a:	af 89       	ldd	r26, Y+23	; 0x17
    9a8c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9a8e:	6d 91       	ld	r22, X+
    9a90:	7d 91       	ld	r23, X+
    9a92:	8d 91       	ld	r24, X+
    9a94:	9c 91       	ld	r25, X
    9a96:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    9a9a:	88 23       	and	r24, r24
    9a9c:	09 f4       	brne	.+2      	; 0x9aa0 <collision_detect_level+0xba>
    9a9e:	67 c1       	rjmp	.+718    	; 0x9d6e <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    9aa0:	20 e0       	ldi	r18, 0x00	; 0
    9aa2:	30 e0       	ldi	r19, 0x00	; 0
    9aa4:	40 e0       	ldi	r20, 0x00	; 0
    9aa6:	5e e3       	ldi	r21, 0x3E	; 62
    9aa8:	c7 01       	movw	r24, r14
    9aaa:	b6 01       	movw	r22, r12
    9aac:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9ab0:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9ab4:	6b 01       	movw	r12, r22
    9ab6:	7c 01       	movw	r14, r24
    9ab8:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    9aba:	20 e0       	ldi	r18, 0x00	; 0
    9abc:	30 e0       	ldi	r19, 0x00	; 0
    9abe:	40 ee       	ldi	r20, 0xE0	; 224
    9ac0:	50 e4       	ldi	r21, 0x40	; 64
    9ac2:	c3 01       	movw	r24, r6
    9ac4:	b2 01       	movw	r22, r4
    9ac6:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9aca:	20 e0       	ldi	r18, 0x00	; 0
    9acc:	30 e0       	ldi	r19, 0x00	; 0
    9ace:	40 e0       	ldi	r20, 0x00	; 0
    9ad0:	5e e3       	ldi	r21, 0x3E	; 62
    9ad2:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9ad6:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9ada:	f4 01       	movw	r30, r8
    9adc:	53 e0       	ldi	r21, 0x03	; 3
    9ade:	ee 0f       	add	r30, r30
    9ae0:	ff 1f       	adc	r31, r31
    9ae2:	5a 95       	dec	r21
    9ae4:	e1 f7       	brne	.-8      	; 0x9ade <collision_detect_level+0xf8>
    9ae6:	fb 83       	std	Y+3, r31	; 0x03
    9ae8:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9aea:	9b 01       	movw	r18, r22
    9aec:	e3 e0       	ldi	r30, 0x03	; 3
    9aee:	22 0f       	add	r18, r18
    9af0:	33 1f       	adc	r19, r19
    9af2:	ea 95       	dec	r30
    9af4:	e1 f7       	brne	.-8      	; 0x9aee <collision_detect_level+0x108>
    9af6:	3d 83       	std	Y+5, r19	; 0x05
    9af8:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9afa:	3f ef       	ldi	r19, 0xFF	; 255
    9afc:	c3 1a       	sub	r12, r19
    9afe:	d3 0a       	sbc	r13, r19
    9b00:	f3 e0       	ldi	r31, 0x03	; 3
    9b02:	cc 0c       	add	r12, r12
    9b04:	dd 1c       	adc	r13, r13
    9b06:	fa 95       	dec	r31
    9b08:	e1 f7       	brne	.-8      	; 0x9b02 <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9b0a:	b9 89       	ldd	r27, Y+17	; 0x11
    9b0c:	a8 e0       	ldi	r26, 0x08	; 8
    9b0e:	ba 9f       	mul	r27, r26
    9b10:	a0 01       	movw	r20, r0
    9b12:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9b14:	96 01       	movw	r18, r12
    9b16:	28 50       	subi	r18, 0x08	; 8
    9b18:	31 09       	sbc	r19, r1
    9b1a:	2b 01       	movw	r4, r22
    9b1c:	34 01       	movw	r6, r8
    9b1e:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9b20:	b6 01       	movw	r22, r12
    9b22:	80 e0       	ldi	r24, 0x00	; 0
    9b24:	90 e0       	ldi	r25, 0x00	; 0
    9b26:	69 87       	std	Y+9, r22	; 0x09
    9b28:	7a 87       	std	Y+10, r23	; 0x0a
    9b2a:	8b 87       	std	Y+11, r24	; 0x0b
    9b2c:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9b2e:	66 27       	eor	r22, r22
    9b30:	57 fd       	sbrc	r21, 7
    9b32:	60 95       	com	r22
    9b34:	76 2f       	mov	r23, r22
    9b36:	4d 87       	std	Y+13, r20	; 0x0d
    9b38:	5e 87       	std	Y+14, r21	; 0x0e
    9b3a:	6f 87       	std	Y+15, r22	; 0x0f
    9b3c:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9b3e:	b9 01       	movw	r22, r18
    9b40:	80 e0       	ldi	r24, 0x00	; 0
    9b42:	90 e0       	ldi	r25, 0x00	; 0
    9b44:	6b 8b       	std	Y+19, r22	; 0x13
    9b46:	7c 8b       	std	Y+20, r23	; 0x14
    9b48:	8d 8b       	std	Y+21, r24	; 0x15
    9b4a:	9e 8b       	std	Y+22, r25	; 0x16
    9b4c:	86 2d       	mov	r24, r6
    9b4e:	48 85       	ldd	r20, Y+8	; 0x08
    9b50:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    9b52:	81 17       	cp	r24, r17
    9b54:	08 f0       	brcs	.+2      	; 0x9b58 <collision_detect_level+0x172>
    9b56:	0c c1       	rjmp	.+536    	; 0x9d70 <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    9b58:	20 e0       	ldi	r18, 0x00	; 0
    9b5a:	30 e0       	ldi	r19, 0x00	; 0
    9b5c:	a9 01       	movw	r20, r18
    9b5e:	af 89       	ldd	r26, Y+23	; 0x17
    9b60:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b62:	6d 91       	ld	r22, X+
    9b64:	7d 91       	ld	r23, X+
    9b66:	8d 91       	ld	r24, X+
    9b68:	9c 91       	ld	r25, X
    9b6a:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    9b6e:	87 ff       	sbrs	r24, 7
    9b70:	58 c0       	rjmp	.+176    	; 0x9c22 <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    9b72:	a1 01       	movw	r20, r2
    9b74:	b3 01       	movw	r22, r6
    9b76:	80 91 a5 0f 	lds	r24, 0x0FA5
    9b7a:	90 91 a6 0f 	lds	r25, 0x0FA6
    9b7e:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9b82:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    9b84:	a1 01       	movw	r20, r2
    9b86:	b2 01       	movw	r22, r4
    9b88:	80 91 a5 0f 	lds	r24, 0x0FA5
    9b8c:	90 91 a6 0f 	lds	r25, 0x0FA6
    9b90:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9b94:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9b96:	8f 2d       	mov	r24, r15
    9b98:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    9b9c:	88 23       	and	r24, r24
    9b9e:	91 f0       	breq	.+36     	; 0x9bc4 <collision_detect_level+0x1de>
    9ba0:	ef 89       	ldd	r30, Y+23	; 0x17
    9ba2:	f8 8d       	ldd	r31, Y+24	; 0x18
    9ba4:	64 81       	ldd	r22, Z+4	; 0x04
    9ba6:	75 81       	ldd	r23, Z+5	; 0x05
    9ba8:	86 81       	ldd	r24, Z+6	; 0x06
    9baa:	97 81       	ldd	r25, Z+7	; 0x07
    9bac:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9bb0:	dc 01       	movw	r26, r24
    9bb2:	cb 01       	movw	r24, r22
    9bb4:	28 e0       	ldi	r18, 0x08	; 8
    9bb6:	48 e0       	ldi	r20, 0x08	; 8
    9bb8:	6a 81       	ldd	r22, Y+2	; 0x02
    9bba:	7b 81       	ldd	r23, Y+3	; 0x03
    9bbc:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9bc0:	84 30       	cpi	r24, 0x04	; 4
    9bc2:	c8 f4       	brcc	.+50     	; 0x9bf6 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9bc4:	80 2f       	mov	r24, r16
    9bc6:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9bca:	88 23       	and	r24, r24
    9bcc:	51 f1       	breq	.+84     	; 0x9c22 <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9bce:	af 89       	ldd	r26, Y+23	; 0x17
    9bd0:	b8 8d       	ldd	r27, Y+24	; 0x18
    9bd2:	14 96       	adiw	r26, 0x04	; 4
    9bd4:	6d 91       	ld	r22, X+
    9bd6:	7d 91       	ld	r23, X+
    9bd8:	8d 91       	ld	r24, X+
    9bda:	9c 91       	ld	r25, X
    9bdc:	17 97       	sbiw	r26, 0x07	; 7
    9bde:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9be2:	dc 01       	movw	r26, r24
    9be4:	cb 01       	movw	r24, r22
    9be6:	28 e0       	ldi	r18, 0x08	; 8
    9be8:	48 e0       	ldi	r20, 0x08	; 8
    9bea:	6c 81       	ldd	r22, Y+4	; 0x04
    9bec:	7d 81       	ldd	r23, Y+5	; 0x05
    9bee:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9bf2:	84 30       	cpi	r24, 0x04	; 4
    9bf4:	b0 f0       	brcs	.+44     	; 0x9c22 <collision_detect_level+0x23c>
				{
					s->vy =  0;
    9bf6:	ef 89       	ldd	r30, Y+23	; 0x17
    9bf8:	f8 8d       	ldd	r31, Y+24	; 0x18
    9bfa:	10 82       	st	Z, r1
    9bfc:	11 82       	std	Z+1, r1	; 0x01
    9bfe:	12 82       	std	Z+2, r1	; 0x02
    9c00:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    9c02:	69 85       	ldd	r22, Y+9	; 0x09
    9c04:	7a 85       	ldd	r23, Y+10	; 0x0a
    9c06:	8b 85       	ldd	r24, Y+11	; 0x0b
    9c08:	9c 85       	ldd	r25, Y+12	; 0x0c
    9c0a:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    9c0e:	af 89       	ldd	r26, Y+23	; 0x17
    9c10:	b8 8d       	ldd	r27, Y+24	; 0x18
    9c12:	18 96       	adiw	r26, 0x08	; 8
    9c14:	6d 93       	st	X+, r22
    9c16:	7d 93       	st	X+, r23
    9c18:	8d 93       	st	X+, r24
    9c1a:	9c 93       	st	X, r25
    9c1c:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    9c1e:	b1 e0       	ldi	r27, 0x01	; 1
    9c20:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    9c22:	20 e0       	ldi	r18, 0x00	; 0
    9c24:	30 e0       	ldi	r19, 0x00	; 0
    9c26:	a9 01       	movw	r20, r18
    9c28:	ef 89       	ldd	r30, Y+23	; 0x17
    9c2a:	f8 8d       	ldd	r31, Y+24	; 0x18
    9c2c:	60 81       	ld	r22, Z
    9c2e:	71 81       	ldd	r23, Z+1	; 0x01
    9c30:	82 81       	ldd	r24, Z+2	; 0x02
    9c32:	93 81       	ldd	r25, Z+3	; 0x03
    9c34:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    9c38:	18 16       	cp	r1, r24
    9c3a:	0c f0       	brlt	.+2      	; 0x9c3e <collision_detect_level+0x258>
    9c3c:	91 c0       	rjmp	.+290    	; 0x9d60 <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9c3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    9c40:	7e 85       	ldd	r23, Y+14	; 0x0e
    9c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    9c44:	98 89       	ldd	r25, Y+16	; 0x10
    9c46:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    9c4a:	6b 01       	movw	r12, r22
    9c4c:	7c 01       	movw	r14, r24
    9c4e:	af 89       	ldd	r26, Y+23	; 0x17
    9c50:	b8 8d       	ldd	r27, Y+24	; 0x18
    9c52:	18 96       	adiw	r26, 0x08	; 8
    9c54:	2d 91       	ld	r18, X+
    9c56:	3d 91       	ld	r19, X+
    9c58:	4d 91       	ld	r20, X+
    9c5a:	5c 91       	ld	r21, X
    9c5c:	1b 97       	sbiw	r26, 0x0b	; 11
    9c5e:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9c62:	20 e0       	ldi	r18, 0x00	; 0
    9c64:	30 e0       	ldi	r19, 0x00	; 0
    9c66:	40 e8       	ldi	r20, 0x80	; 128
    9c68:	5f e3       	ldi	r21, 0x3F	; 63
    9c6a:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    9c6e:	20 e0       	ldi	r18, 0x00	; 0
    9c70:	30 e0       	ldi	r19, 0x00	; 0
    9c72:	40 e0       	ldi	r20, 0x00	; 0
    9c74:	5e e3       	ldi	r21, 0x3E	; 62
    9c76:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9c7a:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9c7e:	ab 01       	movw	r20, r22
    9c80:	b3 01       	movw	r22, r6
    9c82:	80 91 a5 0f 	lds	r24, 0x0FA5
    9c86:	90 91 a6 0f 	lds	r25, 0x0FA6
    9c8a:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9c8e:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    9c90:	ef 89       	ldd	r30, Y+23	; 0x17
    9c92:	f8 8d       	ldd	r31, Y+24	; 0x18
    9c94:	20 85       	ldd	r18, Z+8	; 0x08
    9c96:	31 85       	ldd	r19, Z+9	; 0x09
    9c98:	42 85       	ldd	r20, Z+10	; 0x0a
    9c9a:	53 85       	ldd	r21, Z+11	; 0x0b
    9c9c:	c7 01       	movw	r24, r14
    9c9e:	b6 01       	movw	r22, r12
    9ca0:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9ca4:	20 e0       	ldi	r18, 0x00	; 0
    9ca6:	30 e0       	ldi	r19, 0x00	; 0
    9ca8:	40 e8       	ldi	r20, 0x80	; 128
    9caa:	5f e3       	ldi	r21, 0x3F	; 63
    9cac:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    9cb0:	20 e0       	ldi	r18, 0x00	; 0
    9cb2:	30 e0       	ldi	r19, 0x00	; 0
    9cb4:	40 e0       	ldi	r20, 0x00	; 0
    9cb6:	5e e3       	ldi	r21, 0x3E	; 62
    9cb8:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9cbc:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9cc0:	ab 01       	movw	r20, r22
    9cc2:	b2 01       	movw	r22, r4
    9cc4:	80 91 a5 0f 	lds	r24, 0x0FA5
    9cc8:	90 91 a6 0f 	lds	r25, 0x0FA6
    9ccc:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9cd0:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    9cd2:	80 2f       	mov	r24, r16
    9cd4:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    9cd8:	88 23       	and	r24, r24
    9cda:	a1 f0       	breq	.+40     	; 0x9d04 <collision_detect_level+0x31e>
    9cdc:	af 89       	ldd	r26, Y+23	; 0x17
    9cde:	b8 8d       	ldd	r27, Y+24	; 0x18
    9ce0:	14 96       	adiw	r26, 0x04	; 4
    9ce2:	6d 91       	ld	r22, X+
    9ce4:	7d 91       	ld	r23, X+
    9ce6:	8d 91       	ld	r24, X+
    9ce8:	9c 91       	ld	r25, X
    9cea:	17 97       	sbiw	r26, 0x07	; 7
    9cec:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9cf0:	dc 01       	movw	r26, r24
    9cf2:	cb 01       	movw	r24, r22
    9cf4:	28 e0       	ldi	r18, 0x08	; 8
    9cf6:	48 e0       	ldi	r20, 0x08	; 8
    9cf8:	6a 81       	ldd	r22, Y+2	; 0x02
    9cfa:	7b 81       	ldd	r23, Y+3	; 0x03
    9cfc:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9d00:	84 30       	cpi	r24, 0x04	; 4
    9d02:	b8 f4       	brcc	.+46     	; 0x9d32 <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9d04:	8f 2d       	mov	r24, r15
    9d06:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    9d0a:	88 23       	and	r24, r24
    9d0c:	49 f1       	breq	.+82     	; 0x9d60 <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9d0e:	ef 89       	ldd	r30, Y+23	; 0x17
    9d10:	f8 8d       	ldd	r31, Y+24	; 0x18
    9d12:	64 81       	ldd	r22, Z+4	; 0x04
    9d14:	75 81       	ldd	r23, Z+5	; 0x05
    9d16:	86 81       	ldd	r24, Z+6	; 0x06
    9d18:	97 81       	ldd	r25, Z+7	; 0x07
    9d1a:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9d1e:	dc 01       	movw	r26, r24
    9d20:	cb 01       	movw	r24, r22
    9d22:	28 e0       	ldi	r18, 0x08	; 8
    9d24:	48 e0       	ldi	r20, 0x08	; 8
    9d26:	6c 81       	ldd	r22, Y+4	; 0x04
    9d28:	7d 81       	ldd	r23, Y+5	; 0x05
    9d2a:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9d2e:	84 30       	cpi	r24, 0x04	; 4
    9d30:	b8 f0       	brcs	.+46     	; 0x9d60 <collision_detect_level+0x37a>
				{
					s->vy =  0;
    9d32:	af 89       	ldd	r26, Y+23	; 0x17
    9d34:	b8 8d       	ldd	r27, Y+24	; 0x18
    9d36:	1d 92       	st	X+, r1
    9d38:	1d 92       	st	X+, r1
    9d3a:	1d 92       	st	X+, r1
    9d3c:	1c 92       	st	X, r1
    9d3e:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    9d40:	1e 96       	adiw	r26, 0x0e	; 14
    9d42:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    9d44:	6b 89       	ldd	r22, Y+19	; 0x13
    9d46:	7c 89       	ldd	r23, Y+20	; 0x14
    9d48:	8d 89       	ldd	r24, Y+21	; 0x15
    9d4a:	9e 89       	ldd	r25, Y+22	; 0x16
    9d4c:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    9d50:	ef 89       	ldd	r30, Y+23	; 0x17
    9d52:	f8 8d       	ldd	r31, Y+24	; 0x18
    9d54:	60 87       	std	Z+8, r22	; 0x08
    9d56:	71 87       	std	Z+9, r23	; 0x09
    9d58:	82 87       	std	Z+10, r24	; 0x0a
    9d5a:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    9d5c:	f1 e0       	ldi	r31, 0x01	; 1
    9d5e:	f9 83       	std	Y+1, r31	; 0x01
    9d60:	2f ef       	ldi	r18, 0xFF	; 255
    9d62:	62 1a       	sub	r6, r18
    9d64:	72 0a       	sbc	r7, r18
    9d66:	3f ef       	ldi	r19, 0xFF	; 255
    9d68:	43 1a       	sub	r4, r19
    9d6a:	53 0a       	sbc	r5, r19
    9d6c:	ef ce       	rjmp	.-546    	; 0x9b4c <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    9d6e:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    9d70:	af 89       	ldd	r26, Y+23	; 0x17
    9d72:	b8 8d       	ldd	r27, Y+24	; 0x18
    9d74:	1c 96       	adiw	r26, 0x0c	; 12
    9d76:	8d 91       	ld	r24, X+
    9d78:	9c 91       	ld	r25, X
    9d7a:	1d 97       	sbiw	r26, 0x0d	; 13
    9d7c:	89 2b       	or	r24, r25
    9d7e:	09 f4       	brne	.+2      	; 0x9d82 <collision_detect_level+0x39c>
    9d80:	54 c1       	rjmp	.+680    	; 0xa02a <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    9d82:	18 96       	adiw	r26, 0x08	; 8
    9d84:	cd 90       	ld	r12, X+
    9d86:	dd 90       	ld	r13, X+
    9d88:	ed 90       	ld	r14, X+
    9d8a:	fc 90       	ld	r15, X
    9d8c:	1b 97       	sbiw	r26, 0x0b	; 11
    9d8e:	20 e0       	ldi	r18, 0x00	; 0
    9d90:	30 e0       	ldi	r19, 0x00	; 0
    9d92:	40 e0       	ldi	r20, 0x00	; 0
    9d94:	5e e3       	ldi	r21, 0x3E	; 62
    9d96:	c7 01       	movw	r24, r14
    9d98:	b6 01       	movw	r22, r12
    9d9a:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9d9e:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9da2:	2b 01       	movw	r4, r22
    9da4:	3c 01       	movw	r6, r24
    9da6:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    9da8:	20 e0       	ldi	r18, 0x00	; 0
    9daa:	30 e0       	ldi	r19, 0x00	; 0
    9dac:	40 ee       	ldi	r20, 0xE0	; 224
    9dae:	50 e4       	ldi	r21, 0x40	; 64
    9db0:	c7 01       	movw	r24, r14
    9db2:	b6 01       	movw	r22, r12
    9db4:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9db8:	20 e0       	ldi	r18, 0x00	; 0
    9dba:	30 e0       	ldi	r19, 0x00	; 0
    9dbc:	40 e0       	ldi	r20, 0x00	; 0
    9dbe:	5e e3       	ldi	r21, 0x3E	; 62
    9dc0:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9dc4:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9dc8:	12 01       	movw	r2, r4
    9dca:	83 e0       	ldi	r24, 0x03	; 3
    9dcc:	22 0c       	add	r2, r2
    9dce:	33 1c       	adc	r3, r3
    9dd0:	8a 95       	dec	r24
    9dd2:	e1 f7       	brne	.-8      	; 0x9dcc <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9dd4:	fb 01       	movw	r30, r22
    9dd6:	93 e0       	ldi	r25, 0x03	; 3
    9dd8:	ee 0f       	add	r30, r30
    9dda:	ff 1f       	adc	r31, r31
    9ddc:	9a 95       	dec	r25
    9dde:	e1 f7       	brne	.-8      	; 0x9dd8 <collision_detect_level+0x3f2>
    9de0:	fb 83       	std	Y+3, r31	; 0x03
    9de2:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    9de4:	ff ef       	ldi	r31, 0xFF	; 255
    9de6:	8f 1a       	sub	r8, r31
    9de8:	9f 0a       	sbc	r9, r31
    9dea:	94 01       	movw	r18, r8
    9dec:	43 e0       	ldi	r20, 0x03	; 3
    9dee:	22 0f       	add	r18, r18
    9df0:	33 1f       	adc	r19, r19
    9df2:	4a 95       	dec	r20
    9df4:	e1 f7       	brne	.-8      	; 0x9dee <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9df6:	a8 e0       	ldi	r26, 0x08	; 8
    9df8:	1a 9f       	mul	r17, r26
    9dfa:	a0 01       	movw	r20, r0
    9dfc:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    9dfe:	49 01       	movw	r8, r18
    9e00:	b8 e0       	ldi	r27, 0x08	; 8
    9e02:	8b 1a       	sub	r8, r27
    9e04:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    9e06:	6b 01       	movw	r12, r22
    9e08:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    9e0a:	b9 01       	movw	r22, r18
    9e0c:	80 e0       	ldi	r24, 0x00	; 0
    9e0e:	90 e0       	ldi	r25, 0x00	; 0
    9e10:	6c 83       	std	Y+4, r22	; 0x04
    9e12:	7d 83       	std	Y+5, r23	; 0x05
    9e14:	8e 83       	std	Y+6, r24	; 0x06
    9e16:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9e18:	ca 01       	movw	r24, r20
    9e1a:	aa 27       	eor	r26, r26
    9e1c:	97 fd       	sbrc	r25, 7
    9e1e:	a0 95       	com	r26
    9e20:	ba 2f       	mov	r27, r26
    9e22:	89 87       	std	Y+9, r24	; 0x09
    9e24:	9a 87       	std	Y+10, r25	; 0x0a
    9e26:	ab 87       	std	Y+11, r26	; 0x0b
    9e28:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    9e2a:	a1 2c       	mov	r10, r1
    9e2c:	b1 2c       	mov	r11, r1
    9e2e:	80 2f       	mov	r24, r16
    9e30:	3d 85       	ldd	r19, Y+13	; 0x0d
    9e32:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    9e34:	49 89       	ldd	r20, Y+17	; 0x11
    9e36:	84 17       	cp	r24, r20
    9e38:	08 f0       	brcs	.+2      	; 0x9e3c <collision_detect_level+0x456>
    9e3a:	f7 c0       	rjmp	.+494    	; 0xa02a <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    9e3c:	af 89       	ldd	r26, Y+23	; 0x17
    9e3e:	b8 8d       	ldd	r27, Y+24	; 0x18
    9e40:	1c 96       	adiw	r26, 0x0c	; 12
    9e42:	8d 91       	ld	r24, X+
    9e44:	9c 91       	ld	r25, X
    9e46:	1d 97       	sbiw	r26, 0x0d	; 13
    9e48:	97 ff       	sbrs	r25, 7
    9e4a:	57 c0       	rjmp	.+174    	; 0x9efa <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    9e4c:	a8 01       	movw	r20, r16
    9e4e:	68 85       	ldd	r22, Y+8	; 0x08
    9e50:	7a 89       	ldd	r23, Y+18	; 0x12
    9e52:	80 91 a5 0f 	lds	r24, 0x0FA5
    9e56:	90 91 a6 0f 	lds	r25, 0x0FA6
    9e5a:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9e5e:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    9e60:	a6 01       	movw	r20, r12
    9e62:	68 85       	ldd	r22, Y+8	; 0x08
    9e64:	7a 89       	ldd	r23, Y+18	; 0x12
    9e66:	80 91 a5 0f 	lds	r24, 0x0FA5
    9e6a:	90 91 a6 0f 	lds	r25, 0x0FA6
    9e6e:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9e72:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9e74:	87 2d       	mov	r24, r7
    9e76:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    9e7a:	88 23       	and	r24, r24
    9e7c:	89 f0       	breq	.+34     	; 0x9ea0 <collision_detect_level+0x4ba>
    9e7e:	ef 89       	ldd	r30, Y+23	; 0x17
    9e80:	f8 8d       	ldd	r31, Y+24	; 0x18
    9e82:	60 85       	ldd	r22, Z+8	; 0x08
    9e84:	71 85       	ldd	r23, Z+9	; 0x09
    9e86:	82 85       	ldd	r24, Z+10	; 0x0a
    9e88:	93 85       	ldd	r25, Z+11	; 0x0b
    9e8a:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9e8e:	dc 01       	movw	r26, r24
    9e90:	cb 01       	movw	r24, r22
    9e92:	28 e0       	ldi	r18, 0x08	; 8
    9e94:	48 e0       	ldi	r20, 0x08	; 8
    9e96:	b1 01       	movw	r22, r2
    9e98:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9e9c:	84 30       	cpi	r24, 0x04	; 4
    9e9e:	c8 f4       	brcc	.+50     	; 0x9ed2 <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9ea0:	8e 2d       	mov	r24, r14
    9ea2:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9ea6:	88 23       	and	r24, r24
    9ea8:	41 f1       	breq	.+80     	; 0x9efa <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9eaa:	af 89       	ldd	r26, Y+23	; 0x17
    9eac:	b8 8d       	ldd	r27, Y+24	; 0x18
    9eae:	18 96       	adiw	r26, 0x08	; 8
    9eb0:	6d 91       	ld	r22, X+
    9eb2:	7d 91       	ld	r23, X+
    9eb4:	8d 91       	ld	r24, X+
    9eb6:	9c 91       	ld	r25, X
    9eb8:	1b 97       	sbiw	r26, 0x0b	; 11
    9eba:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9ebe:	dc 01       	movw	r26, r24
    9ec0:	cb 01       	movw	r24, r22
    9ec2:	28 e0       	ldi	r18, 0x08	; 8
    9ec4:	48 e0       	ldi	r20, 0x08	; 8
    9ec6:	6a 81       	ldd	r22, Y+2	; 0x02
    9ec8:	7b 81       	ldd	r23, Y+3	; 0x03
    9eca:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9ece:	84 30       	cpi	r24, 0x04	; 4
    9ed0:	a0 f0       	brcs	.+40     	; 0x9efa <collision_detect_level+0x514>
				{
					s->vx =  0;
    9ed2:	ef 89       	ldd	r30, Y+23	; 0x17
    9ed4:	f8 8d       	ldd	r31, Y+24	; 0x18
    9ed6:	15 86       	std	Z+13, r1	; 0x0d
    9ed8:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    9eda:	6c 81       	ldd	r22, Y+4	; 0x04
    9edc:	7d 81       	ldd	r23, Y+5	; 0x05
    9ede:	8e 81       	ldd	r24, Y+6	; 0x06
    9ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    9ee2:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    9ee6:	af 89       	ldd	r26, Y+23	; 0x17
    9ee8:	b8 8d       	ldd	r27, Y+24	; 0x18
    9eea:	14 96       	adiw	r26, 0x04	; 4
    9eec:	6d 93       	st	X+, r22
    9eee:	7d 93       	st	X+, r23
    9ef0:	8d 93       	st	X+, r24
    9ef2:	9c 93       	st	X, r25
    9ef4:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    9ef6:	b1 e0       	ldi	r27, 0x01	; 1
    9ef8:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    9efa:	ef 89       	ldd	r30, Y+23	; 0x17
    9efc:	f8 8d       	ldd	r31, Y+24	; 0x18
    9efe:	84 85       	ldd	r24, Z+12	; 0x0c
    9f00:	95 85       	ldd	r25, Z+13	; 0x0d
    9f02:	18 16       	cp	r1, r24
    9f04:	19 06       	cpc	r1, r25
    9f06:	0c f0       	brlt	.+2      	; 0x9f0a <collision_detect_level+0x524>
    9f08:	89 c0       	rjmp	.+274    	; 0xa01c <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    9f0a:	69 85       	ldd	r22, Y+9	; 0x09
    9f0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    9f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9f10:	9c 85       	ldd	r25, Y+12	; 0x0c
    9f12:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    9f16:	2b 01       	movw	r4, r22
    9f18:	3c 01       	movw	r6, r24
    9f1a:	af 89       	ldd	r26, Y+23	; 0x17
    9f1c:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f1e:	14 96       	adiw	r26, 0x04	; 4
    9f20:	2d 91       	ld	r18, X+
    9f22:	3d 91       	ld	r19, X+
    9f24:	4d 91       	ld	r20, X+
    9f26:	5c 91       	ld	r21, X
    9f28:	17 97       	sbiw	r26, 0x07	; 7
    9f2a:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9f2e:	20 e0       	ldi	r18, 0x00	; 0
    9f30:	30 e0       	ldi	r19, 0x00	; 0
    9f32:	40 e8       	ldi	r20, 0x80	; 128
    9f34:	5f e3       	ldi	r21, 0x3F	; 63
    9f36:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    9f3a:	20 e0       	ldi	r18, 0x00	; 0
    9f3c:	30 e0       	ldi	r19, 0x00	; 0
    9f3e:	40 e0       	ldi	r20, 0x00	; 0
    9f40:	5e e3       	ldi	r21, 0x3E	; 62
    9f42:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9f46:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9f4a:	a8 01       	movw	r20, r16
    9f4c:	80 91 a5 0f 	lds	r24, 0x0FA5
    9f50:	90 91 a6 0f 	lds	r25, 0x0FA6
    9f54:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9f58:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    9f5a:	ef 89       	ldd	r30, Y+23	; 0x17
    9f5c:	f8 8d       	ldd	r31, Y+24	; 0x18
    9f5e:	24 81       	ldd	r18, Z+4	; 0x04
    9f60:	35 81       	ldd	r19, Z+5	; 0x05
    9f62:	46 81       	ldd	r20, Z+6	; 0x06
    9f64:	57 81       	ldd	r21, Z+7	; 0x07
    9f66:	c3 01       	movw	r24, r6
    9f68:	b2 01       	movw	r22, r4
    9f6a:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    9f6e:	20 e0       	ldi	r18, 0x00	; 0
    9f70:	30 e0       	ldi	r19, 0x00	; 0
    9f72:	40 e8       	ldi	r20, 0x80	; 128
    9f74:	5f e3       	ldi	r21, 0x3F	; 63
    9f76:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    9f7a:	20 e0       	ldi	r18, 0x00	; 0
    9f7c:	30 e0       	ldi	r19, 0x00	; 0
    9f7e:	40 e0       	ldi	r20, 0x00	; 0
    9f80:	5e e3       	ldi	r21, 0x3E	; 62
    9f82:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    9f86:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9f8a:	a6 01       	movw	r20, r12
    9f8c:	80 91 a5 0f 	lds	r24, 0x0FA5
    9f90:	90 91 a6 0f 	lds	r25, 0x0FA6
    9f94:	0e 94 69 48 	call	0x90d2	; 0x90d2 <get_level_tile>
    9f98:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9f9a:	8e 2d       	mov	r24, r14
    9f9c:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
    9fa0:	88 23       	and	r24, r24
    9fa2:	99 f0       	breq	.+38     	; 0x9fca <collision_detect_level+0x5e4>
    9fa4:	af 89       	ldd	r26, Y+23	; 0x17
    9fa6:	b8 8d       	ldd	r27, Y+24	; 0x18
    9fa8:	18 96       	adiw	r26, 0x08	; 8
    9faa:	6d 91       	ld	r22, X+
    9fac:	7d 91       	ld	r23, X+
    9fae:	8d 91       	ld	r24, X+
    9fb0:	9c 91       	ld	r25, X
    9fb2:	1b 97       	sbiw	r26, 0x0b	; 11
    9fb4:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9fb8:	dc 01       	movw	r26, r24
    9fba:	cb 01       	movw	r24, r22
    9fbc:	28 e0       	ldi	r18, 0x08	; 8
    9fbe:	48 e0       	ldi	r20, 0x08	; 8
    9fc0:	b1 01       	movw	r22, r2
    9fc2:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9fc6:	84 30       	cpi	r24, 0x04	; 4
    9fc8:	b8 f4       	brcc	.+46     	; 0x9ff8 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9fca:	87 2d       	mov	r24, r7
    9fcc:	0e 94 75 49 	call	0x92ea	; 0x92ea <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9fd0:	88 23       	and	r24, r24
    9fd2:	21 f1       	breq	.+72     	; 0xa01c <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9fd4:	ef 89       	ldd	r30, Y+23	; 0x17
    9fd6:	f8 8d       	ldd	r31, Y+24	; 0x18
    9fd8:	60 85       	ldd	r22, Z+8	; 0x08
    9fda:	71 85       	ldd	r23, Z+9	; 0x09
    9fdc:	82 85       	ldd	r24, Z+10	; 0x0a
    9fde:	93 85       	ldd	r25, Z+11	; 0x0b
    9fe0:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    9fe4:	dc 01       	movw	r26, r24
    9fe6:	cb 01       	movw	r24, r22
    9fe8:	28 e0       	ldi	r18, 0x08	; 8
    9fea:	48 e0       	ldi	r20, 0x08	; 8
    9fec:	6a 81       	ldd	r22, Y+2	; 0x02
    9fee:	7b 81       	ldd	r23, Y+3	; 0x03
    9ff0:	0e 94 df 4c 	call	0x99be	; 0x99be <pixel_overlap>
    9ff4:	84 30       	cpi	r24, 0x04	; 4
    9ff6:	90 f0       	brcs	.+36     	; 0xa01c <collision_detect_level+0x636>
				{
					s->vx =  0;
    9ff8:	af 89       	ldd	r26, Y+23	; 0x17
    9ffa:	b8 8d       	ldd	r27, Y+24	; 0x18
    9ffc:	1d 96       	adiw	r26, 0x0d	; 13
    9ffe:	1c 92       	st	X, r1
    a000:	1e 92       	st	-X, r1
    a002:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a004:	c5 01       	movw	r24, r10
    a006:	b4 01       	movw	r22, r8
    a008:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a00c:	ef 89       	ldd	r30, Y+23	; 0x17
    a00e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a010:	64 83       	std	Z+4, r22	; 0x04
    a012:	75 83       	std	Z+5, r23	; 0x05
    a014:	86 83       	std	Z+6, r24	; 0x06
    a016:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a018:	f1 e0       	ldi	r31, 0x01	; 1
    a01a:	f9 83       	std	Y+1, r31	; 0x01
    a01c:	0f 5f       	subi	r16, 0xFF	; 255
    a01e:	1f 4f       	sbci	r17, 0xFF	; 255
    a020:	2f ef       	ldi	r18, 0xFF	; 255
    a022:	c2 1a       	sub	r12, r18
    a024:	d2 0a       	sbc	r13, r18
    a026:	03 cf       	rjmp	.-506    	; 0x9e2e <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    a028:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a02a:	89 81       	ldd	r24, Y+1	; 0x01
    a02c:	68 96       	adiw	r28, 0x18	; 24
    a02e:	0f b6       	in	r0, 0x3f	; 63
    a030:	f8 94       	cli
    a032:	de bf       	out	0x3e, r29	; 62
    a034:	0f be       	out	0x3f, r0	; 63
    a036:	cd bf       	out	0x3d, r28	; 61
    a038:	df 91       	pop	r29
    a03a:	cf 91       	pop	r28
    a03c:	1f 91       	pop	r17
    a03e:	0f 91       	pop	r16
    a040:	ff 90       	pop	r15
    a042:	ef 90       	pop	r14
    a044:	df 90       	pop	r13
    a046:	cf 90       	pop	r12
    a048:	bf 90       	pop	r11
    a04a:	af 90       	pop	r10
    a04c:	9f 90       	pop	r9
    a04e:	8f 90       	pop	r8
    a050:	7f 90       	pop	r7
    a052:	6f 90       	pop	r6
    a054:	5f 90       	pop	r5
    a056:	4f 90       	pop	r4
    a058:	3f 90       	pop	r3
    a05a:	2f 90       	pop	r2
    a05c:	08 95       	ret

0000a05e <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a05e:	2f 92       	push	r2
    a060:	3f 92       	push	r3
    a062:	4f 92       	push	r4
    a064:	5f 92       	push	r5
    a066:	6f 92       	push	r6
    a068:	7f 92       	push	r7
    a06a:	8f 92       	push	r8
    a06c:	9f 92       	push	r9
    a06e:	af 92       	push	r10
    a070:	bf 92       	push	r11
    a072:	cf 92       	push	r12
    a074:	df 92       	push	r13
    a076:	ef 92       	push	r14
    a078:	ff 92       	push	r15
    a07a:	0f 93       	push	r16
    a07c:	1f 93       	push	r17
    a07e:	cf 93       	push	r28
    a080:	df 93       	push	r29
    a082:	cd b7       	in	r28, 0x3d	; 61
    a084:	de b7       	in	r29, 0x3e	; 62
    a086:	2f 97       	sbiw	r28, 0x0f	; 15
    a088:	0f b6       	in	r0, 0x3f	; 63
    a08a:	f8 94       	cli
    a08c:	de bf       	out	0x3e, r29	; 62
    a08e:	0f be       	out	0x3f, r0	; 63
    a090:	cd bf       	out	0x3d, r28	; 61
    a092:	9f ee       	ldi	r25, 0xEF	; 239
    a094:	89 2e       	mov	r8, r25
    a096:	9d e0       	ldi	r25, 0x0D	; 13
    a098:	99 2e       	mov	r9, r25
    a09a:	8e ed       	ldi	r24, 0xDE	; 222
    a09c:	9d e0       	ldi	r25, 0x0D	; 13
    a09e:	9f 87       	std	Y+15, r25	; 0x0f
    a0a0:	8e 87       	std	Y+14, r24	; 0x0e
    a0a2:	9b e0       	ldi	r25, 0x0B	; 11
    a0a4:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    a0a6:	20 e1       	ldi	r18, 0x10	; 16
    a0a8:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    a0aa:	f4 01       	movw	r30, r8
    a0ac:	80 81       	ld	r24, Z
    a0ae:	88 23       	and	r24, r24
    a0b0:	09 f4       	brne	.+2      	; 0xa0b4 <animate_shot+0x56>
    a0b2:	46 c1       	rjmp	.+652    	; 0xa340 <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    a0b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    a0b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    a0b8:	64 85       	ldd	r22, Z+12	; 0x0c
    a0ba:	75 85       	ldd	r23, Z+13	; 0x0d
    a0bc:	88 27       	eor	r24, r24
    a0be:	77 fd       	sbrc	r23, 7
    a0c0:	80 95       	com	r24
    a0c2:	98 2f       	mov	r25, r24
    a0c4:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    a0c8:	29 e8       	ldi	r18, 0x89	; 137
    a0ca:	38 e8       	ldi	r19, 0x88	; 136
    a0cc:	48 e8       	ldi	r20, 0x88	; 136
    a0ce:	5c e3       	ldi	r21, 0x3C	; 60
    a0d0:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    a0d4:	ee 85       	ldd	r30, Y+14	; 0x0e
    a0d6:	ff 85       	ldd	r31, Y+15	; 0x0f
    a0d8:	24 81       	ldd	r18, Z+4	; 0x04
    a0da:	35 81       	ldd	r19, Z+5	; 0x05
    a0dc:	46 81       	ldd	r20, Z+6	; 0x06
    a0de:	57 81       	ldd	r21, Z+7	; 0x07
    a0e0:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    a0e4:	2b 01       	movw	r4, r22
    a0e6:	3c 01       	movw	r6, r24
    a0e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    a0ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    a0ec:	64 83       	std	Z+4, r22	; 0x04
    a0ee:	75 83       	std	Z+5, r23	; 0x05
    a0f0:	86 83       	std	Z+6, r24	; 0x06
    a0f2:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    a0f4:	29 e8       	ldi	r18, 0x89	; 137
    a0f6:	38 e8       	ldi	r19, 0x88	; 136
    a0f8:	48 e8       	ldi	r20, 0x88	; 136
    a0fa:	5c e3       	ldi	r21, 0x3C	; 60
    a0fc:	60 81       	ld	r22, Z
    a0fe:	71 81       	ldd	r23, Z+1	; 0x01
    a100:	82 81       	ldd	r24, Z+2	; 0x02
    a102:	93 81       	ldd	r25, Z+3	; 0x03
    a104:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    a108:	ee 85       	ldd	r30, Y+14	; 0x0e
    a10a:	ff 85       	ldd	r31, Y+15	; 0x0f
    a10c:	20 85       	ldd	r18, Z+8	; 0x08
    a10e:	31 85       	ldd	r19, Z+9	; 0x09
    a110:	42 85       	ldd	r20, Z+10	; 0x0a
    a112:	53 85       	ldd	r21, Z+11	; 0x0b
    a114:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    a118:	6b 01       	movw	r12, r22
    a11a:	7c 01       	movw	r14, r24
    a11c:	ee 85       	ldd	r30, Y+14	; 0x0e
    a11e:	ff 85       	ldd	r31, Y+15	; 0x0f
    a120:	60 87       	std	Z+8, r22	; 0x08
    a122:	71 87       	std	Z+9, r23	; 0x09
    a124:	82 87       	std	Z+10, r24	; 0x0a
    a126:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    a128:	60 91 ac 0d 	lds	r22, 0x0DAC
    a12c:	70 91 ad 0d 	lds	r23, 0x0DAD
    a130:	80 e0       	ldi	r24, 0x00	; 0
    a132:	90 e0       	ldi	r25, 0x00	; 0
    a134:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a138:	9b 01       	movw	r18, r22
    a13a:	ac 01       	movw	r20, r24
    a13c:	c7 01       	movw	r24, r14
    a13e:	b6 01       	movw	r22, r12
    a140:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    a144:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a148:	c6 2e       	mov	r12, r22
    a14a:	80 91 aa 0d 	lds	r24, 0x0DAA
    a14e:	90 91 ab 0d 	lds	r25, 0x0DAB
    a152:	bc 01       	movw	r22, r24
    a154:	80 e0       	ldi	r24, 0x00	; 0
    a156:	90 e0       	ldi	r25, 0x00	; 0
    a158:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a15c:	9b 01       	movw	r18, r22
    a15e:	ac 01       	movw	r20, r24
    a160:	c3 01       	movw	r24, r6
    a162:	b2 01       	movw	r22, r4
    a164:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    a168:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a16c:	01 e0       	ldi	r16, 0x01	; 1
    a16e:	21 e0       	ldi	r18, 0x01	; 1
    a170:	4c 2d       	mov	r20, r12
    a172:	89 81       	ldd	r24, Y+1	; 0x01
    a174:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a178:	ee 85       	ldd	r30, Y+14	; 0x0e
    a17a:	ff 85       	ldd	r31, Y+15	; 0x0f
    a17c:	c4 80       	ldd	r12, Z+4	; 0x04
    a17e:	d5 80       	ldd	r13, Z+5	; 0x05
    a180:	e6 80       	ldd	r14, Z+6	; 0x06
    a182:	f7 80       	ldd	r15, Z+7	; 0x07
    a184:	60 90 aa 0d 	lds	r6, 0x0DAA
    a188:	70 90 ab 0d 	lds	r7, 0x0DAB
    a18c:	b3 01       	movw	r22, r6
    a18e:	80 e0       	ldi	r24, 0x00	; 0
    a190:	90 e0       	ldi	r25, 0x00	; 0
    a192:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a196:	9b 01       	movw	r18, r22
    a198:	ac 01       	movw	r20, r24
    a19a:	c7 01       	movw	r24, r14
    a19c:	b6 01       	movw	r22, r12
    a19e:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    a1a2:	87 ff       	sbrs	r24, 7
    a1a4:	0f c0       	rjmp	.+30     	; 0xa1c4 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    a1a6:	f4 01       	movw	r30, r8
    a1a8:	10 82       	st	Z, r1
				game.player.active_shots--;
    a1aa:	80 91 d7 0d 	lds	r24, 0x0DD7
    a1ae:	81 50       	subi	r24, 0x01	; 1
    a1b0:	80 93 d7 0d 	sts	0x0DD7, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a1b4:	01 e0       	ldi	r16, 0x01	; 1
    a1b6:	21 e0       	ldi	r18, 0x01	; 1
    a1b8:	40 e0       	ldi	r20, 0x00	; 0
    a1ba:	60 ee       	ldi	r22, 0xE0	; 224
    a1bc:	89 81       	ldd	r24, Y+1	; 0x01
    a1be:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
    a1c2:	be c0       	rjmp	.+380    	; 0xa340 <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a1c4:	20 e0       	ldi	r18, 0x00	; 0
    a1c6:	30 e0       	ldi	r19, 0x00	; 0
    a1c8:	40 e0       	ldi	r20, 0x00	; 0
    a1ca:	51 e4       	ldi	r21, 0x41	; 65
    a1cc:	c7 01       	movw	r24, r14
    a1ce:	b6 01       	movw	r22, r12
    a1d0:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    a1d4:	1b 01       	movw	r2, r22
    a1d6:	2c 01       	movw	r4, r24
    a1d8:	b3 01       	movw	r22, r6
    a1da:	60 52       	subi	r22, 0x20	; 32
    a1dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a1de:	80 e0       	ldi	r24, 0x00	; 0
    a1e0:	90 e0       	ldi	r25, 0x00	; 0
    a1e2:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a1e6:	9b 01       	movw	r18, r22
    a1e8:	ac 01       	movw	r20, r24
    a1ea:	c2 01       	movw	r24, r4
    a1ec:	b1 01       	movw	r22, r2
    a1ee:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    a1f2:	18 16       	cp	r1, r24
    a1f4:	c4 f2       	brlt	.-80     	; 0xa1a6 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    a1f6:	41 e0       	ldi	r20, 0x01	; 1
    a1f8:	61 e0       	ldi	r22, 0x01	; 1
    a1fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    a1fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    a1fe:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a202:	81 11       	cpse	r24, r1
    a204:	d0 cf       	rjmp	.-96     	; 0xa1a6 <animate_shot+0x148>
    a206:	8b e6       	ldi	r24, 0x6B	; 107
    a208:	28 2e       	mov	r2, r24
    a20a:	8e e0       	ldi	r24, 0x0E	; 14
    a20c:	38 2e       	mov	r3, r24
    a20e:	61 2c       	mov	r6, r1
    a210:	71 2c       	mov	r7, r1
    a212:	24 01       	movw	r4, r8
    a214:	f1 e0       	ldi	r31, 0x01	; 1
    a216:	4f 1a       	sub	r4, r31
    a218:	51 08       	sbc	r5, r1
    a21a:	f1 01       	movw	r30, r2
    a21c:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a21e:	80 81       	ld	r24, Z
    a220:	88 23       	and	r24, r24
    a222:	09 f4       	brne	.+2      	; 0xa226 <animate_shot+0x1c8>
    a224:	82 c0       	rjmp	.+260    	; 0xa32a <animate_shot+0x2cc>
    a226:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    a228:	a0 80       	ld	r10, Z
    a22a:	aa 0c       	add	r10, r10
    a22c:	aa 0c       	add	r10, r10
    a22e:	aa 0c       	add	r10, r10
    a230:	31 97       	sbiw	r30, 0x01	; 1
    a232:	c0 80       	ld	r12, Z
    a234:	cc 0c       	add	r12, r12
    a236:	cc 0c       	add	r12, r12
    a238:	cc 0c       	add	r12, r12
    a23a:	3a 97       	sbiw	r30, 0x0a	; 10
    a23c:	60 81       	ld	r22, Z
    a23e:	71 81       	ldd	r23, Z+1	; 0x01
    a240:	82 81       	ldd	r24, Z+2	; 0x02
    a242:	93 81       	ldd	r25, Z+3	; 0x03
    a244:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a248:	6a 83       	std	Y+2, r22	; 0x02
    a24a:	7b 83       	std	Y+3, r23	; 0x03
    a24c:	8c 83       	std	Y+4, r24	; 0x04
    a24e:	9d 83       	std	Y+5, r25	; 0x05
    a250:	f1 01       	movw	r30, r2
    a252:	73 97       	sbiw	r30, 0x13	; 19
    a254:	60 81       	ld	r22, Z
    a256:	71 81       	ldd	r23, Z+1	; 0x01
    a258:	82 81       	ldd	r24, Z+2	; 0x02
    a25a:	93 81       	ldd	r25, Z+3	; 0x03
    a25c:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a260:	6e 83       	std	Y+6, r22	; 0x06
    a262:	7f 83       	std	Y+7, r23	; 0x07
    a264:	88 87       	std	Y+8, r24	; 0x08
    a266:	99 87       	std	Y+9, r25	; 0x09
    a268:	ee 85       	ldd	r30, Y+14	; 0x0e
    a26a:	ff 85       	ldd	r31, Y+15	; 0x0f
    a26c:	60 85       	ldd	r22, Z+8	; 0x08
    a26e:	71 85       	ldd	r23, Z+9	; 0x09
    a270:	82 85       	ldd	r24, Z+10	; 0x0a
    a272:	93 85       	ldd	r25, Z+11	; 0x0b
    a274:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a278:	6a 87       	std	Y+10, r22	; 0x0a
    a27a:	7b 87       	std	Y+11, r23	; 0x0b
    a27c:	8c 87       	std	Y+12, r24	; 0x0c
    a27e:	9d 87       	std	Y+13, r25	; 0x0d
    a280:	ee 85       	ldd	r30, Y+14	; 0x0e
    a282:	ff 85       	ldd	r31, Y+15	; 0x0f
    a284:	64 81       	ldd	r22, Z+4	; 0x04
    a286:	75 81       	ldd	r23, Z+5	; 0x05
    a288:	86 81       	ldd	r24, Z+6	; 0x06
    a28a:	97 81       	ldd	r25, Z+7	; 0x07
    a28c:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a290:	dc 01       	movw	r26, r24
    a292:	cb 01       	movw	r24, r22
    a294:	ea 80       	ldd	r14, Y+2	; 0x02
    a296:	fb 80       	ldd	r15, Y+3	; 0x03
    a298:	0e 81       	ldd	r16, Y+6	; 0x06
    a29a:	1f 81       	ldd	r17, Y+7	; 0x07
    a29c:	28 e0       	ldi	r18, 0x08	; 8
    a29e:	48 e0       	ldi	r20, 0x08	; 8
    a2a0:	6a 85       	ldd	r22, Y+10	; 0x0a
    a2a2:	7b 85       	ldd	r23, Y+11	; 0x0b
    a2a4:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a2a8:	88 23       	and	r24, r24
    a2aa:	09 f4       	brne	.+2      	; 0xa2ae <animate_shot+0x250>
    a2ac:	3e c0       	rjmp	.+124    	; 0xa32a <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    a2ae:	41 e0       	ldi	r20, 0x01	; 1
    a2b0:	6f ef       	ldi	r22, 0xFF	; 255
    a2b2:	84 e0       	ldi	r24, 0x04	; 4
    a2b4:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    a2b8:	f1 01       	movw	r30, r2
    a2ba:	80 81       	ld	r24, Z
    a2bc:	f2 01       	movw	r30, r4
    a2be:	90 81       	ld	r25, Z
    a2c0:	89 1b       	sub	r24, r25
    a2c2:	f1 01       	movw	r30, r2
    a2c4:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    a2c6:	18 16       	cp	r1, r24
    a2c8:	14 f1       	brlt	.+68     	; 0xa30e <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    a2ca:	41 e0       	ldi	r20, 0x01	; 1
    a2cc:	6f ef       	ldi	r22, 0xFF	; 255
    a2ce:	86 e0       	ldi	r24, 0x06	; 6
    a2d0:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    a2d4:	f2 e4       	ldi	r31, 0x42	; 66
    a2d6:	f6 9d       	mul	r31, r6
    a2d8:	c0 01       	movw	r24, r0
    a2da:	f7 9d       	mul	r31, r7
    a2dc:	90 0d       	add	r25, r0
    a2de:	11 24       	eor	r1, r1
    a2e0:	8a 55       	subi	r24, 0x5A	; 90
    a2e2:	92 4f       	sbci	r25, 0xF2	; 242
    a2e4:	fc 01       	movw	r30, r24
    a2e6:	e2 54       	subi	r30, 0x42	; 66
    a2e8:	ff 4f       	sbci	r31, 0xFF	; 255
    a2ea:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    a2ec:	31 97       	sbiw	r30, 0x01	; 1
    a2ee:	10 82       	st	Z, r1
							game.active_enemies--;
    a2f0:	80 91 c5 0d 	lds	r24, 0x0DC5
    a2f4:	81 50       	subi	r24, 0x01	; 1
    a2f6:	80 93 c5 0d 	sts	0x0DC5, r24
							game.level_score += KILL_SCORE;
    a2fa:	80 91 b0 0d 	lds	r24, 0x0DB0
    a2fe:	90 91 b1 0d 	lds	r25, 0x0DB1
    a302:	0a 96       	adiw	r24, 0x0a	; 10
    a304:	90 93 b1 0d 	sts	0x0DB1, r25
    a308:	80 93 b0 0d 	sts	0x0DB0, r24
							break;
    a30c:	19 c0       	rjmp	.+50     	; 0xa340 <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    a30e:	f4 01       	movw	r30, r8
    a310:	10 82       	st	Z, r1
						game.player.active_shots--;
    a312:	80 91 d7 0d 	lds	r24, 0x0DD7
    a316:	81 50       	subi	r24, 0x01	; 1
    a318:	80 93 d7 0d 	sts	0x0DD7, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a31c:	01 e0       	ldi	r16, 0x01	; 1
    a31e:	21 e0       	ldi	r18, 0x01	; 1
    a320:	40 e0       	ldi	r20, 0x00	; 0
    a322:	60 ee       	ldi	r22, 0xE0	; 224
    a324:	89 81       	ldd	r24, Y+1	; 0x01
    a326:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
    a32a:	ff ef       	ldi	r31, 0xFF	; 255
    a32c:	6f 1a       	sub	r6, r31
    a32e:	7f 0a       	sbc	r7, r31
    a330:	22 e4       	ldi	r18, 0x42	; 66
    a332:	22 0e       	add	r2, r18
    a334:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    a336:	85 e0       	ldi	r24, 0x05	; 5
    a338:	68 16       	cp	r6, r24
    a33a:	71 04       	cpc	r7, r1
    a33c:	09 f0       	breq	.+2      	; 0xa340 <animate_shot+0x2e2>
    a33e:	6d cf       	rjmp	.-294    	; 0xa21a <animate_shot+0x1bc>
    a340:	9a e1       	ldi	r25, 0x1A	; 26
    a342:	89 0e       	add	r8, r25
    a344:	91 1c       	adc	r9, r1
    a346:	e9 81       	ldd	r30, Y+1	; 0x01
    a348:	ef 5f       	subi	r30, 0xFF	; 255
    a34a:	e9 83       	std	Y+1, r30	; 0x01
    a34c:	8e 85       	ldd	r24, Y+14	; 0x0e
    a34e:	9f 85       	ldd	r25, Y+15	; 0x0f
    a350:	4a 96       	adiw	r24, 0x1a	; 26
    a352:	9f 87       	std	Y+15, r25	; 0x0f
    a354:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a356:	ee 30       	cpi	r30, 0x0E	; 14
    a358:	09 f0       	breq	.+2      	; 0xa35c <animate_shot+0x2fe>
    a35a:	a7 ce       	rjmp	.-690    	; 0xa0aa <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    a35c:	2f 96       	adiw	r28, 0x0f	; 15
    a35e:	0f b6       	in	r0, 0x3f	; 63
    a360:	f8 94       	cli
    a362:	de bf       	out	0x3e, r29	; 62
    a364:	0f be       	out	0x3f, r0	; 63
    a366:	cd bf       	out	0x3d, r28	; 61
    a368:	df 91       	pop	r29
    a36a:	cf 91       	pop	r28
    a36c:	1f 91       	pop	r17
    a36e:	0f 91       	pop	r16
    a370:	ff 90       	pop	r15
    a372:	ef 90       	pop	r14
    a374:	df 90       	pop	r13
    a376:	cf 90       	pop	r12
    a378:	bf 90       	pop	r11
    a37a:	af 90       	pop	r10
    a37c:	9f 90       	pop	r9
    a37e:	8f 90       	pop	r8
    a380:	7f 90       	pop	r7
    a382:	6f 90       	pop	r6
    a384:	5f 90       	pop	r5
    a386:	4f 90       	pop	r4
    a388:	3f 90       	pop	r3
    a38a:	2f 90       	pop	r2
    a38c:	08 95       	ret

0000a38e <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    a38e:	7f 92       	push	r7
    a390:	8f 92       	push	r8
    a392:	9f 92       	push	r9
    a394:	af 92       	push	r10
    a396:	bf 92       	push	r11
    a398:	cf 92       	push	r12
    a39a:	df 92       	push	r13
    a39c:	ef 92       	push	r14
    a39e:	ff 92       	push	r15
    a3a0:	0f 93       	push	r16
    a3a2:	1f 93       	push	r17
    a3a4:	cf 93       	push	r28
    a3a6:	df 93       	push	r29
    a3a8:	1f 92       	push	r1
    a3aa:	cd b7       	in	r28, 0x3d	; 61
    a3ac:	de b7       	in	r29, 0x3e	; 62
    a3ae:	6c 01       	movw	r12, r24
    a3b0:	7b 01       	movw	r14, r22
    a3b2:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    a3b4:	cb 01       	movw	r24, r22
    a3b6:	29 83       	std	Y+1, r18	; 0x01
    a3b8:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    a3bc:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    a3be:	29 81       	ldd	r18, Y+1	; 0x01
    a3c0:	20 9f       	mul	r18, r16
    a3c2:	50 01       	movw	r10, r0
    a3c4:	11 24       	eor	r1, r1
    a3c6:	10 e0       	ldi	r17, 0x00	; 0
    a3c8:	81 2f       	mov	r24, r17
    a3ca:	90 e0       	ldi	r25, 0x00	; 0
    a3cc:	8a 15       	cp	r24, r10
    a3ce:	9b 05       	cpc	r25, r11
    a3d0:	54 f4       	brge	.+20     	; 0xa3e6 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    a3d2:	40 e0       	ldi	r20, 0x00	; 0
    a3d4:	b4 01       	movw	r22, r8
    a3d6:	81 2f       	mov	r24, r17
    a3d8:	87 0d       	add	r24, r7
    a3da:	29 83       	std	Y+1, r18	; 0x01
    a3dc:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    a3e0:	1f 5f       	subi	r17, 0xFF	; 255
    a3e2:	29 81       	ldd	r18, Y+1	; 0x01
    a3e4:	f1 cf       	rjmp	.-30     	; 0xa3c8 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    a3e6:	f7 01       	movw	r30, r14
    a3e8:	84 81       	ldd	r24, Z+4	; 0x04
    a3ea:	88 23       	and	r24, r24
    a3ec:	51 f0       	breq	.+20     	; 0xa402 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    a3ee:	f6 01       	movw	r30, r12
    a3f0:	80 81       	ld	r24, Z
    a3f2:	90 e1       	ldi	r25, 0x10	; 16
    a3f4:	98 27       	eor	r25, r24
    a3f6:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    a3f8:	40 e0       	ldi	r20, 0x00	; 0
    a3fa:	60 ee       	ldi	r22, 0xE0	; 224
    a3fc:	87 2d       	mov	r24, r7
    a3fe:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	}
	return anim->looped;
}
    a402:	f7 01       	movw	r30, r14
    a404:	84 81       	ldd	r24, Z+4	; 0x04
    a406:	0f 90       	pop	r0
    a408:	df 91       	pop	r29
    a40a:	cf 91       	pop	r28
    a40c:	1f 91       	pop	r17
    a40e:	0f 91       	pop	r16
    a410:	ff 90       	pop	r15
    a412:	ef 90       	pop	r14
    a414:	df 90       	pop	r13
    a416:	cf 90       	pop	r12
    a418:	bf 90       	pop	r11
    a41a:	af 90       	pop	r10
    a41c:	9f 90       	pop	r9
    a41e:	8f 90       	pop	r8
    a420:	7f 90       	pop	r7
    a422:	08 95       	ret

0000a424 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    a424:	8f 92       	push	r8
    a426:	9f 92       	push	r9
    a428:	af 92       	push	r10
    a42a:	bf 92       	push	r11
    a42c:	ff 92       	push	r15
    a42e:	0f 93       	push	r16
    a430:	1f 93       	push	r17
    a432:	cf 93       	push	r28
    a434:	df 93       	push	r29
    a436:	ec 01       	movw	r28, r24
    a438:	f6 2e       	mov	r15, r22
    a43a:	14 2f       	mov	r17, r20
    a43c:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a43e:	6e 85       	ldd	r22, Y+14	; 0x0e
    a440:	70 e0       	ldi	r23, 0x00	; 0
    a442:	80 e0       	ldi	r24, 0x00	; 0
    a444:	90 e0       	ldi	r25, 0x00	; 0
    a446:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    a44a:	29 e8       	ldi	r18, 0x89	; 137
    a44c:	38 e8       	ldi	r19, 0x88	; 136
    a44e:	48 e8       	ldi	r20, 0x88	; 136
    a450:	5c e3       	ldi	r21, 0x3C	; 60
    a452:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    a456:	28 81       	ld	r18, Y
    a458:	39 81       	ldd	r19, Y+1	; 0x01
    a45a:	4a 81       	ldd	r20, Y+2	; 0x02
    a45c:	5b 81       	ldd	r21, Y+3	; 0x03
    a45e:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    a462:	4b 01       	movw	r8, r22
    a464:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a466:	20 e0       	ldi	r18, 0x00	; 0
    a468:	30 e0       	ldi	r19, 0x00	; 0
    a46a:	40 ef       	ldi	r20, 0xF0	; 240
    a46c:	52 e4       	ldi	r21, 0x42	; 66
    a46e:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    a472:	18 16       	cp	r1, r24
    a474:	2c f0       	brlt	.+10     	; 0xa480 <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a476:	88 82       	st	Y, r8
    a478:	99 82       	std	Y+1, r9	; 0x01
    a47a:	aa 82       	std	Y+2, r10	; 0x02
    a47c:	bb 82       	std	Y+3, r11	; 0x03
    a47e:	08 c0       	rjmp	.+16     	; 0xa490 <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a480:	80 e0       	ldi	r24, 0x00	; 0
    a482:	90 e0       	ldi	r25, 0x00	; 0
    a484:	a0 ef       	ldi	r26, 0xF0	; 240
    a486:	b2 e4       	ldi	r27, 0x42	; 66
    a488:	88 83       	st	Y, r24
    a48a:	99 83       	std	Y+1, r25	; 0x01
    a48c:	aa 83       	std	Y+2, r26	; 0x02
    a48e:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    a490:	6c 85       	ldd	r22, Y+12	; 0x0c
    a492:	7d 85       	ldd	r23, Y+13	; 0x0d
    a494:	88 27       	eor	r24, r24
    a496:	77 fd       	sbrc	r23, 7
    a498:	80 95       	com	r24
    a49a:	98 2f       	mov	r25, r24
    a49c:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    a4a0:	29 e8       	ldi	r18, 0x89	; 137
    a4a2:	38 e8       	ldi	r19, 0x88	; 136
    a4a4:	48 e8       	ldi	r20, 0x88	; 136
    a4a6:	5c e3       	ldi	r21, 0x3C	; 60
    a4a8:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    a4ac:	9b 01       	movw	r18, r22
    a4ae:	ac 01       	movw	r20, r24
    a4b0:	6c 81       	ldd	r22, Y+4	; 0x04
    a4b2:	7d 81       	ldd	r23, Y+5	; 0x05
    a4b4:	8e 81       	ldd	r24, Y+6	; 0x06
    a4b6:	9f 81       	ldd	r25, Y+7	; 0x07
    a4b8:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    a4bc:	6c 83       	std	Y+4, r22	; 0x04
    a4be:	7d 83       	std	Y+5, r23	; 0x05
    a4c0:	8e 83       	std	Y+6, r24	; 0x06
    a4c2:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    a4c4:	29 e8       	ldi	r18, 0x89	; 137
    a4c6:	38 e8       	ldi	r19, 0x88	; 136
    a4c8:	48 e8       	ldi	r20, 0x88	; 136
    a4ca:	5c e3       	ldi	r21, 0x3C	; 60
    a4cc:	68 81       	ld	r22, Y
    a4ce:	79 81       	ldd	r23, Y+1	; 0x01
    a4d0:	8a 81       	ldd	r24, Y+2	; 0x02
    a4d2:	9b 81       	ldd	r25, Y+3	; 0x03
    a4d4:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    a4d8:	9b 01       	movw	r18, r22
    a4da:	ac 01       	movw	r20, r24
    a4dc:	68 85       	ldd	r22, Y+8	; 0x08
    a4de:	79 85       	ldd	r23, Y+9	; 0x09
    a4e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    a4e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    a4e4:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    a4e8:	68 87       	std	Y+8, r22	; 0x08
    a4ea:	79 87       	std	Y+9, r23	; 0x09
    a4ec:	8a 87       	std	Y+10, r24	; 0x0a
    a4ee:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    a4f0:	40 2f       	mov	r20, r16
    a4f2:	61 2f       	mov	r22, r17
    a4f4:	ce 01       	movw	r24, r28
    a4f6:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    a4fa:	e0 91 ac 0d 	lds	r30, 0x0DAC
    a4fe:	f0 91 ad 0d 	lds	r31, 0x0DAD
    a502:	bf 01       	movw	r22, r30
    a504:	80 e0       	ldi	r24, 0x00	; 0
    a506:	90 e0       	ldi	r25, 0x00	; 0
    a508:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a50c:	9b 01       	movw	r18, r22
    a50e:	ac 01       	movw	r20, r24
    a510:	68 85       	ldd	r22, Y+8	; 0x08
    a512:	79 85       	ldd	r23, Y+9	; 0x09
    a514:	8a 85       	ldd	r24, Y+10	; 0x0a
    a516:	9b 85       	ldd	r25, Y+11	; 0x0b
    a518:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    a51c:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a520:	b6 2e       	mov	r11, r22
    a522:	e0 91 aa 0d 	lds	r30, 0x0DAA
    a526:	f0 91 ab 0d 	lds	r31, 0x0DAB
    a52a:	bf 01       	movw	r22, r30
    a52c:	80 e0       	ldi	r24, 0x00	; 0
    a52e:	90 e0       	ldi	r25, 0x00	; 0
    a530:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a534:	9b 01       	movw	r18, r22
    a536:	ac 01       	movw	r20, r24
    a538:	6c 81       	ldd	r22, Y+4	; 0x04
    a53a:	7d 81       	ldd	r23, Y+5	; 0x05
    a53c:	8e 81       	ldd	r24, Y+6	; 0x06
    a53e:	9f 81       	ldd	r25, Y+7	; 0x07
    a540:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    a544:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a548:	21 2f       	mov	r18, r17
    a54a:	4b 2d       	mov	r20, r11
    a54c:	8f 2d       	mov	r24, r15
    a54e:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
}
    a552:	df 91       	pop	r29
    a554:	cf 91       	pop	r28
    a556:	1f 91       	pop	r17
    a558:	0f 91       	pop	r16
    a55a:	ff 90       	pop	r15
    a55c:	bf 90       	pop	r11
    a55e:	af 90       	pop	r10
    a560:	9f 90       	pop	r9
    a562:	8f 90       	pop	r8
    a564:	08 95       	ret

0000a566 <animate_player>:

void animate_player()
{
    a566:	0f 93       	push	r16
    a568:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    a56a:	80 91 d8 0d 	lds	r24, 0x0DD8
    a56e:	84 ff       	sbrs	r24, 4
    a570:	38 c0       	rjmp	.+112    	; 0xa5e2 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    a572:	60 91 ac 0d 	lds	r22, 0x0DAC
    a576:	70 91 ad 0d 	lds	r23, 0x0DAD
    a57a:	80 e0       	ldi	r24, 0x00	; 0
    a57c:	90 e0       	ldi	r25, 0x00	; 0
    a57e:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a582:	9b 01       	movw	r18, r22
    a584:	ac 01       	movw	r20, r24
    a586:	60 91 d0 0d 	lds	r22, 0x0DD0
    a58a:	70 91 d1 0d 	lds	r23, 0x0DD1
    a58e:	80 91 d2 0d 	lds	r24, 0x0DD2
    a592:	90 91 d3 0d 	lds	r25, 0x0DD3
    a596:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    a59a:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a59e:	c6 2f       	mov	r28, r22
    a5a0:	60 91 aa 0d 	lds	r22, 0x0DAA
    a5a4:	70 91 ab 0d 	lds	r23, 0x0DAB
    a5a8:	80 e0       	ldi	r24, 0x00	; 0
    a5aa:	90 e0       	ldi	r25, 0x00	; 0
    a5ac:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a5b0:	9b 01       	movw	r18, r22
    a5b2:	ac 01       	movw	r20, r24
    a5b4:	60 91 cc 0d 	lds	r22, 0x0DCC
    a5b8:	70 91 cd 0d 	lds	r23, 0x0DCD
    a5bc:	80 91 ce 0d 	lds	r24, 0x0DCE
    a5c0:	90 91 cf 0d 	lds	r25, 0x0DCF
    a5c4:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    a5c8:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a5cc:	00 91 dc 0d 	lds	r16, 0x0DDC
    a5d0:	20 91 db 0d 	lds	r18, 0x0DDB
    a5d4:	4c 2f       	mov	r20, r28
    a5d6:	80 e0       	ldi	r24, 0x00	; 0
    a5d8:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    a5dc:	cf 91       	pop	r28
    a5de:	0f 91       	pop	r16
    a5e0:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    a5e2:	20 91 dc 0d 	lds	r18, 0x0DDC
    a5e6:	40 91 db 0d 	lds	r20, 0x0DDB
    a5ea:	60 e0       	ldi	r22, 0x00	; 0
    a5ec:	88 ec       	ldi	r24, 0xC8	; 200
    a5ee:	9d e0       	ldi	r25, 0x0D	; 13
}
    a5f0:	cf 91       	pop	r28
    a5f2:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    a5f4:	0c 94 12 52 	jmp	0xa424	; 0xa424 <animate_sprite>

0000a5f8 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    a5f8:	1f 93       	push	r17
    a5fa:	cf 93       	push	r28
    a5fc:	df 93       	push	r29
    a5fe:	ec 01       	movw	r28, r24
    a600:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    a602:	98 89       	ldd	r25, Y+16	; 0x10
    a604:	89 2f       	mov	r24, r25
    a606:	88 70       	andi	r24, 0x08	; 8
    a608:	93 ff       	sbrs	r25, 3
    a60a:	1e c0       	rjmp	.+60     	; 0xa648 <update_spider_enemy+0x50>
    a60c:	2d 89       	ldd	r18, Y+21	; 0x15
    a60e:	20 38       	cpi	r18, 0x80	; 128
    a610:	d9 f4       	brne	.+54     	; 0xa648 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    a612:	81 e0       	ldi	r24, 0x01	; 1
    a614:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    a616:	80 e0       	ldi	r24, 0x00	; 0
    a618:	90 e0       	ldi	r25, 0x00	; 0
    a61a:	a8 ec       	ldi	r26, 0xC8	; 200
    a61c:	b2 ec       	ldi	r27, 0xC2	; 194
    a61e:	88 83       	st	Y, r24
    a620:	99 83       	std	Y+1, r25	; 0x01
    a622:	aa 83       	std	Y+2, r26	; 0x02
    a624:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    a626:	8f ef       	ldi	r24, 0xFF	; 255
    a628:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    a62a:	8c e3       	ldi	r24, 0x3C	; 60
    a62c:	90 e0       	ldi	r25, 0x00	; 0
    a62e:	9d 87       	std	Y+13, r25	; 0x0d
    a630:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    a632:	89 89       	ldd	r24, Y+17	; 0x11
    a634:	81 11       	cpse	r24, r1
    a636:	04 c0       	rjmp	.+8      	; 0xa640 <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    a638:	84 ec       	ldi	r24, 0xC4	; 196
    a63a:	9f ef       	ldi	r25, 0xFF	; 255
    a63c:	9d 87       	std	Y+13, r25	; 0x0d
    a63e:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    a640:	40 e0       	ldi	r20, 0x00	; 0
    a642:	6e e5       	ldi	r22, 0x5E	; 94
    a644:	7d e2       	ldi	r23, 0x2D	; 45
    a646:	1a c0       	rjmp	.+52     	; 0xa67c <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    a648:	90 ff       	sbrs	r25, 0
    a64a:	10 c0       	rjmp	.+32     	; 0xa66c <update_spider_enemy+0x74>
    a64c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a64e:	91 11       	cpse	r25, r1
    a650:	0d c0       	rjmp	.+26     	; 0xa66c <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    a652:	88 e0       	ldi	r24, 0x08	; 8
    a654:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    a656:	1d 86       	std	Y+13, r1	; 0x0d
    a658:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    a65a:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    a65c:	89 89       	ldd	r24, Y+17	; 0x11
    a65e:	81 11       	cpse	r24, r1
    a660:	03 c0       	rjmp	.+6      	; 0xa668 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    a662:	81 e0       	ldi	r24, 0x01	; 1
    a664:	89 8b       	std	Y+17, r24	; 0x11
    a666:	0d c0       	rjmp	.+26     	; 0xa682 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    a668:	19 8a       	std	Y+17, r1	; 0x11
    a66a:	0b c0       	rjmp	.+22     	; 0xa682 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    a66c:	88 23       	and	r24, r24
    a66e:	49 f0       	breq	.+18     	; 0xa682 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    a670:	ce 01       	movw	r24, r28
    a672:	c2 96       	adiw	r24, 0x32	; 50
    a674:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    a678:	40 e0       	ldi	r20, 0x00	; 0
    a67a:	bc 01       	movw	r22, r24
    a67c:	81 2f       	mov	r24, r17
    a67e:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	}
	e->frame_count++;
    a682:	8d 89       	ldd	r24, Y+21	; 0x15
    a684:	8f 5f       	subi	r24, 0xFF	; 255
    a686:	8d 8b       	std	Y+21, r24	; 0x15
}
    a688:	df 91       	pop	r29
    a68a:	cf 91       	pop	r28
    a68c:	1f 91       	pop	r17
    a68e:	08 95       	ret

0000a690 <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    a690:	cf 93       	push	r28
    a692:	fc 01       	movw	r30, r24
    a694:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    a696:	84 e1       	ldi	r24, 0x14	; 20
    a698:	90 e0       	ldi	r25, 0x00	; 0
    a69a:	95 87       	std	Z+13, r25	; 0x0d
    a69c:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    a69e:	10 82       	st	Z, r1
    a6a0:	11 82       	std	Z+1, r1	; 0x01
    a6a2:	12 82       	std	Z+2, r1	; 0x02
    a6a4:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    a6a6:	cf 01       	movw	r24, r30
    a6a8:	c2 96       	adiw	r24, 0x32	; 50
    a6aa:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    a6ae:	40 e0       	ldi	r20, 0x00	; 0
    a6b0:	bc 01       	movw	r22, r24
    a6b2:	8c 2f       	mov	r24, r28
}
    a6b4:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    a6b6:	0c 94 44 45 	jmp	0x8a88	; 0x8a88 <LBMapSprite>

0000a6ba <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    a6ba:	cf 93       	push	r28
    a6bc:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    a6be:	42 96       	adiw	r24, 0x12	; 18
    a6c0:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    a6c4:	40 e0       	ldi	r20, 0x00	; 0
    a6c6:	bc 01       	movw	r22, r24
    a6c8:	8c 2f       	mov	r24, r28
}
    a6ca:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    a6cc:	0c 94 44 45 	jmp	0x8a88	; 0x8a88 <LBMapSprite>

0000a6d0 <update_enemies>:
}

void update_enemies()
{
    a6d0:	ef 92       	push	r14
    a6d2:	ff 92       	push	r15
    a6d4:	0f 93       	push	r16
    a6d6:	1f 93       	push	r17
    a6d8:	cf 93       	push	r28
    a6da:	df 93       	push	r29
    a6dc:	c7 e6       	ldi	r28, 0x67	; 103
    a6de:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    a6e0:	16 e0       	ldi	r17, 0x06	; 6
    a6e2:	ce 01       	movw	r24, r28
    a6e4:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    a6e6:	fc 01       	movw	r30, r24
    a6e8:	20 81       	ld	r18, Z
    a6ea:	ae 01       	movw	r20, r28
    a6ec:	41 50       	subi	r20, 0x01	; 1
    a6ee:	51 09       	sbc	r21, r1
    a6f0:	7a 01       	movw	r14, r20
    a6f2:	24 ff       	sbrs	r18, 4
    a6f4:	0a c0       	rjmp	.+20     	; 0xa70a <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    a6f6:	08 81       	ld	r16, Y
    a6f8:	fa 01       	movw	r30, r20
    a6fa:	20 81       	ld	r18, Z
    a6fc:	41 2f       	mov	r20, r17
    a6fe:	be 01       	movw	r22, r28
    a700:	69 5d       	subi	r22, 0xD9	; 217
    a702:	7f 4f       	sbci	r23, 0xFF	; 255
    a704:	0e 94 c7 51 	call	0xa38e	; 0xa38e <map_explosion>
    a708:	15 c0       	rjmp	.+42     	; 0xa734 <update_enemies+0x64>
    a70a:	fe 01       	movw	r30, r28
    a70c:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    a70e:	80 81       	ld	r24, Z
    a710:	88 23       	and	r24, r24
    a712:	81 f0       	breq	.+32     	; 0xa734 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    a714:	89 81       	ldd	r24, Y+1	; 0x01
    a716:	88 23       	and	r24, r24
    a718:	41 f0       	breq	.+16     	; 0xa72a <update_enemies+0x5a>
    a71a:	81 30       	cpi	r24, 0x01	; 1
    a71c:	59 f4       	brne	.+22     	; 0xa734 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    a71e:	61 2f       	mov	r22, r17
    a720:	ce 01       	movw	r24, r28
    a722:	43 97       	sbiw	r24, 0x13	; 19
    a724:	0e 94 48 53 	call	0xa690	; 0xa690 <update_shark_enemy>
    a728:	05 c0       	rjmp	.+10     	; 0xa734 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    a72a:	61 2f       	mov	r22, r17
    a72c:	ce 01       	movw	r24, r28
    a72e:	43 97       	sbiw	r24, 0x13	; 19
    a730:	0e 94 fc 52 	call	0xa5f8	; 0xa5f8 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    a734:	f7 01       	movw	r30, r14
    a736:	90 81       	ld	r25, Z
    a738:	88 81       	ld	r24, Y
    a73a:	98 9f       	mul	r25, r24
    a73c:	10 0d       	add	r17, r0
    a73e:	11 24       	eor	r1, r1
    a740:	ce 5b       	subi	r28, 0xBE	; 190
    a742:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a744:	ff e0       	ldi	r31, 0x0F	; 15
    a746:	c1 3b       	cpi	r28, 0xB1	; 177
    a748:	df 07       	cpc	r29, r31
    a74a:	59 f6       	brne	.-106    	; 0xa6e2 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    a74c:	df 91       	pop	r29
    a74e:	cf 91       	pop	r28
    a750:	1f 91       	pop	r17
    a752:	0f 91       	pop	r16
    a754:	ff 90       	pop	r15
    a756:	ef 90       	pop	r14
    a758:	08 95       	ret

0000a75a <update_enemy_shots>:

void update_enemy_shots()
{
    a75a:	8f 92       	push	r8
    a75c:	9f 92       	push	r9
    a75e:	af 92       	push	r10
    a760:	bf 92       	push	r11
    a762:	cf 92       	push	r12
    a764:	df 92       	push	r13
    a766:	ef 92       	push	r14
    a768:	ff 92       	push	r15
    a76a:	0f 93       	push	r16
    a76c:	1f 93       	push	r17
    a76e:	cf 93       	push	r28
    a770:	df 93       	push	r29
    a772:	00 d0       	rcall	.+0      	; 0xa774 <update_enemy_shots+0x1a>
    a774:	00 d0       	rcall	.+0      	; 0xa776 <update_enemy_shots+0x1c>
    a776:	cd b7       	in	r28, 0x3d	; 61
    a778:	de b7       	in	r29, 0x3e	; 62
    a77a:	2a e6       	ldi	r18, 0x6A	; 106
    a77c:	82 2e       	mov	r8, r18
    a77e:	2e e0       	ldi	r18, 0x0E	; 14
    a780:	92 2e       	mov	r9, r18
    a782:	0d e7       	ldi	r16, 0x7D	; 125
    a784:	1e e0       	ldi	r17, 0x0E	; 14
    a786:	3f e0       	ldi	r19, 0x0F	; 15
    a788:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    a78a:	44 e6       	ldi	r20, 0x64	; 100
    a78c:	e4 2e       	mov	r14, r20
    a78e:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    a790:	5c e9       	ldi	r21, 0x9C	; 156
    a792:	c5 2e       	mov	r12, r21
    a794:	dd 24       	eor	r13, r13
    a796:	da 94       	dec	r13
    a798:	aa 24       	eor	r10, r10
    a79a:	aa 94       	dec	r10
    a79c:	ab 0c       	add	r10, r11
    a79e:	f4 01       	movw	r30, r8
    a7a0:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    a7a2:	80 81       	ld	r24, Z
    a7a4:	88 23       	and	r24, r24
    a7a6:	09 f4       	brne	.+2      	; 0xa7aa <update_enemy_shots+0x50>
    a7a8:	58 c0       	rjmp	.+176    	; 0xa85a <update_enemy_shots+0x100>
    a7aa:	f4 01       	movw	r30, r8
    a7ac:	80 81       	ld	r24, Z
    a7ae:	8c 33       	cpi	r24, 0x3C	; 60
    a7b0:	08 f4       	brcc	.+2      	; 0xa7b4 <update_enemy_shots+0x5a>
    a7b2:	50 c0       	rjmp	.+160    	; 0xa854 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    a7b4:	10 82       	st	Z, r1
    a7b6:	f8 01       	movw	r30, r16
    a7b8:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    a7ba:	80 81       	ld	r24, Z
    a7bc:	81 30       	cpi	r24, 0x01	; 1
    a7be:	09 f0       	breq	.+2      	; 0xa7c2 <update_enemy_shots+0x68>
    a7c0:	4c c0       	rjmp	.+152    	; 0xa85a <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    a7c2:	f8 01       	movw	r30, r16
    a7c4:	90 81       	ld	r25, Z
    a7c6:	91 11       	cpse	r25, r1
    a7c8:	3f c0       	rjmp	.+126    	; 0xa848 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    a7ca:	80 83       	st	Z, r24
    a7cc:	f4 01       	movw	r30, r8
    a7ce:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    a7d0:	20 81       	ld	r18, Z
    a7d2:	31 81       	ldd	r19, Z+1	; 0x01
    a7d4:	42 81       	ldd	r20, Z+2	; 0x02
    a7d6:	53 81       	ldd	r21, Z+3	; 0x03
    a7d8:	f4 01       	movw	r30, r8
    a7da:	26 83       	std	Z+6, r18	; 0x06
    a7dc:	37 83       	std	Z+7, r19	; 0x07
    a7de:	40 87       	std	Z+8, r20	; 0x08
    a7e0:	51 87       	std	Z+9, r21	; 0x09
    a7e2:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    a7e4:	60 81       	ld	r22, Z
    a7e6:	71 81       	ldd	r23, Z+1	; 0x01
    a7e8:	82 81       	ldd	r24, Z+2	; 0x02
    a7ea:	93 81       	ldd	r25, Z+3	; 0x03
    a7ec:	29 83       	std	Y+1, r18	; 0x01
    a7ee:	3a 83       	std	Y+2, r19	; 0x02
    a7f0:	4b 83       	std	Y+3, r20	; 0x03
    a7f2:	5c 83       	std	Y+4, r21	; 0x04
    a7f4:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a7f8:	83 e0       	ldi	r24, 0x03	; 3
    a7fa:	76 95       	lsr	r23
    a7fc:	67 95       	ror	r22
    a7fe:	8a 95       	dec	r24
    a800:	e1 f7       	brne	.-8      	; 0xa7fa <update_enemy_shots+0xa0>
    a802:	93 e0       	ldi	r25, 0x03	; 3
    a804:	66 0f       	add	r22, r22
    a806:	77 1f       	adc	r23, r23
    a808:	9a 95       	dec	r25
    a80a:	e1 f7       	brne	.-8      	; 0xa804 <update_enemy_shots+0xaa>
    a80c:	80 e0       	ldi	r24, 0x00	; 0
    a80e:	90 e0       	ldi	r25, 0x00	; 0
    a810:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a814:	f4 01       	movw	r30, r8
    a816:	62 87       	std	Z+10, r22	; 0x0a
    a818:	73 87       	std	Z+11, r23	; 0x0b
    a81a:	84 87       	std	Z+12, r24	; 0x0c
    a81c:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    a81e:	f7 86       	std	Z+15, r15	; 0x0f
    a820:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    a822:	29 81       	ldd	r18, Y+1	; 0x01
    a824:	3a 81       	ldd	r19, Y+2	; 0x02
    a826:	4b 81       	ldd	r20, Y+3	; 0x03
    a828:	5c 81       	ldd	r21, Y+4	; 0x04
    a82a:	60 91 cc 0d 	lds	r22, 0x0DCC
    a82e:	70 91 cd 0d 	lds	r23, 0x0DCD
    a832:	80 91 ce 0d 	lds	r24, 0x0DCE
    a836:	90 91 cf 0d 	lds	r25, 0x0DCF
    a83a:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    a83e:	18 16       	cp	r1, r24
    a840:	1c f0       	brlt	.+6      	; 0xa848 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    a842:	f4 01       	movw	r30, r8
    a844:	d7 86       	std	Z+15, r13	; 0x0f
    a846:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    a848:	6a 2d       	mov	r22, r10
    a84a:	c4 01       	movw	r24, r8
    a84c:	02 96       	adiw	r24, 0x02	; 2
    a84e:	0e 94 5d 53 	call	0xa6ba	; 0xa6ba <update_basic_shot>
    a852:	03 c0       	rjmp	.+6      	; 0xa85a <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    a854:	8f 5f       	subi	r24, 0xFF	; 255
    a856:	f4 01       	movw	r30, r8
    a858:	80 83       	st	Z, r24
    a85a:	b3 94       	inc	r11
    a85c:	f2 e4       	ldi	r31, 0x42	; 66
    a85e:	8f 0e       	add	r8, r31
    a860:	91 1c       	adc	r9, r1
    a862:	0e 5b       	subi	r16, 0xBE	; 190
    a864:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a866:	84 e1       	ldi	r24, 0x14	; 20
    a868:	b8 12       	cpse	r11, r24
    a86a:	96 cf       	rjmp	.-212    	; 0xa798 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    a86c:	0f 90       	pop	r0
    a86e:	0f 90       	pop	r0
    a870:	0f 90       	pop	r0
    a872:	0f 90       	pop	r0
    a874:	df 91       	pop	r29
    a876:	cf 91       	pop	r28
    a878:	1f 91       	pop	r17
    a87a:	0f 91       	pop	r16
    a87c:	ff 90       	pop	r15
    a87e:	ef 90       	pop	r14
    a880:	df 90       	pop	r13
    a882:	cf 90       	pop	r12
    a884:	bf 90       	pop	r11
    a886:	af 90       	pop	r10
    a888:	9f 90       	pop	r9
    a88a:	8f 90       	pop	r8
    a88c:	08 95       	ret

0000a88e <animate_enemies>:

void animate_enemies()
{
    a88e:	2f 92       	push	r2
    a890:	3f 92       	push	r3
    a892:	4f 92       	push	r4
    a894:	5f 92       	push	r5
    a896:	6f 92       	push	r6
    a898:	7f 92       	push	r7
    a89a:	8f 92       	push	r8
    a89c:	9f 92       	push	r9
    a89e:	af 92       	push	r10
    a8a0:	bf 92       	push	r11
    a8a2:	cf 92       	push	r12
    a8a4:	df 92       	push	r13
    a8a6:	ef 92       	push	r14
    a8a8:	ff 92       	push	r15
    a8aa:	0f 93       	push	r16
    a8ac:	1f 93       	push	r17
    a8ae:	cf 93       	push	r28
    a8b0:	df 93       	push	r29
    a8b2:	cd b7       	in	r28, 0x3d	; 61
    a8b4:	de b7       	in	r29, 0x3e	; 62
    a8b6:	2c 97       	sbiw	r28, 0x0c	; 12
    a8b8:	0f b6       	in	r0, 0x3f	; 63
    a8ba:	f8 94       	cli
    a8bc:	de bf       	out	0x3e, r29	; 62
    a8be:	0f be       	out	0x3f, r0	; 63
    a8c0:	cd bf       	out	0x3d, r28	; 61
    a8c2:	46 e6       	ldi	r20, 0x66	; 102
    a8c4:	24 2e       	mov	r2, r20
    a8c6:	4e e0       	ldi	r20, 0x0E	; 14
    a8c8:	34 2e       	mov	r3, r20
    a8ca:	87 e6       	ldi	r24, 0x67	; 103
    a8cc:	9e e0       	ldi	r25, 0x0E	; 14
    a8ce:	9c 87       	std	Y+12, r25	; 0x0c
    a8d0:	8b 87       	std	Y+11, r24	; 0x0b
    a8d2:	54 e5       	ldi	r21, 0x54	; 84
    a8d4:	85 2e       	mov	r8, r21
    a8d6:	5e e0       	ldi	r21, 0x0E	; 14
    a8d8:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    a8da:	66 e0       	ldi	r22, 0x06	; 6
    a8dc:	b6 2e       	mov	r11, r22
    a8de:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8e2:	34 97       	sbiw	r30, 0x04	; 4
    a8e4:	fa 83       	std	Y+2, r31	; 0x02
    a8e6:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    a8e8:	80 81       	ld	r24, Z
    a8ea:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8ec:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8ee:	33 97       	sbiw	r30, 0x03	; 3
    a8f0:	88 23       	and	r24, r24
    a8f2:	09 f4       	brne	.+2      	; 0xa8f6 <animate_enemies+0x68>
    a8f4:	a9 c0       	rjmp	.+338    	; 0xaa48 <animate_enemies+0x1ba>
    a8f6:	80 81       	ld	r24, Z
    a8f8:	84 fd       	sbrc	r24, 4
    a8fa:	a6 c0       	rjmp	.+332    	; 0xaa48 <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    a8fc:	f4 01       	movw	r30, r8
    a8fe:	44 80       	ldd	r4, Z+4	; 0x04
    a900:	55 80       	ldd	r5, Z+5	; 0x05
    a902:	66 80       	ldd	r6, Z+6	; 0x06
    a904:	77 80       	ldd	r7, Z+7	; 0x07
    a906:	60 91 aa 0d 	lds	r22, 0x0DAA
    a90a:	70 91 ab 0d 	lds	r23, 0x0DAB
    a90e:	80 e0       	ldi	r24, 0x00	; 0
    a910:	90 e0       	ldi	r25, 0x00	; 0
    a912:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a916:	9b 01       	movw	r18, r22
    a918:	ac 01       	movw	r20, r24
    a91a:	c3 01       	movw	r24, r6
    a91c:	b2 01       	movw	r22, r4
    a91e:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    a922:	87 fd       	sbrc	r24, 7
    a924:	25 c0       	rjmp	.+74     	; 0xa970 <animate_enemies+0xe2>
    a926:	f4 01       	movw	r30, r8
    a928:	c0 84       	ldd	r12, Z+8	; 0x08
    a92a:	d1 84       	ldd	r13, Z+9	; 0x09
    a92c:	e2 84       	ldd	r14, Z+10	; 0x0a
    a92e:	f3 84       	ldd	r15, Z+11	; 0x0b
    a930:	00 91 ac 0d 	lds	r16, 0x0DAC
    a934:	10 91 ad 0d 	lds	r17, 0x0DAD
    a938:	b8 01       	movw	r22, r16
    a93a:	80 e0       	ldi	r24, 0x00	; 0
    a93c:	90 e0       	ldi	r25, 0x00	; 0
    a93e:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a942:	9b 01       	movw	r18, r22
    a944:	ac 01       	movw	r20, r24
    a946:	c7 01       	movw	r24, r14
    a948:	b6 01       	movw	r22, r12
    a94a:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    a94e:	87 fd       	sbrc	r24, 7
    a950:	0f c0       	rjmp	.+30     	; 0xa970 <animate_enemies+0xe2>
    a952:	b8 01       	movw	r22, r16
    a954:	68 53       	subi	r22, 0x38	; 56
    a956:	7f 4f       	sbci	r23, 0xFF	; 255
    a958:	80 e0       	ldi	r24, 0x00	; 0
    a95a:	90 e0       	ldi	r25, 0x00	; 0
    a95c:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    a960:	9b 01       	movw	r18, r22
    a962:	ac 01       	movw	r20, r24
    a964:	c7 01       	movw	r24, r14
    a966:	b6 01       	movw	r22, r12
    a968:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    a96c:	18 16       	cp	r1, r24
    a96e:	84 f4       	brge	.+32     	; 0xa990 <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    a970:	e9 81       	ldd	r30, Y+1	; 0x01
    a972:	fa 81       	ldd	r31, Y+2	; 0x02
    a974:	10 82       	st	Z, r1
				game.active_enemies--;
    a976:	80 91 c5 0d 	lds	r24, 0x0DC5
    a97a:	81 50       	subi	r24, 0x01	; 1
    a97c:	80 93 c5 0d 	sts	0x0DC5, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    a980:	eb 85       	ldd	r30, Y+11	; 0x0b
    a982:	fc 85       	ldd	r31, Y+12	; 0x0c
    a984:	00 81       	ld	r16, Z
    a986:	f1 01       	movw	r30, r2
    a988:	20 81       	ld	r18, Z
    a98a:	40 e0       	ldi	r20, 0x00	; 0
    a98c:	60 ee       	ldi	r22, 0xE0	; 224
    a98e:	8c c0       	rjmp	.+280    	; 0xaaa8 <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    a990:	c7 01       	movw	r24, r14
    a992:	b6 01       	movw	r22, r12
    a994:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a998:	69 83       	std	Y+1, r22	; 0x01
    a99a:	7a 83       	std	Y+2, r23	; 0x02
    a99c:	8b 83       	std	Y+3, r24	; 0x03
    a99e:	9c 83       	std	Y+4, r25	; 0x04
    a9a0:	c3 01       	movw	r24, r6
    a9a2:	b2 01       	movw	r22, r4
    a9a4:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a9a8:	6d 83       	std	Y+5, r22	; 0x05
    a9aa:	7e 83       	std	Y+6, r23	; 0x06
    a9ac:	8f 83       	std	Y+7, r24	; 0x07
    a9ae:	98 87       	std	Y+8, r25	; 0x08
    a9b0:	20 91 dc 0d 	lds	r18, 0x0DDC
    a9b4:	22 0f       	add	r18, r18
    a9b6:	22 0f       	add	r18, r18
    a9b8:	22 0f       	add	r18, r18
    a9ba:	40 91 db 0d 	lds	r20, 0x0DDB
    a9be:	44 0f       	add	r20, r20
    a9c0:	44 0f       	add	r20, r20
    a9c2:	44 0f       	add	r20, r20
    a9c4:	60 91 d0 0d 	lds	r22, 0x0DD0
    a9c8:	70 91 d1 0d 	lds	r23, 0x0DD1
    a9cc:	80 91 d2 0d 	lds	r24, 0x0DD2
    a9d0:	90 91 d3 0d 	lds	r25, 0x0DD3
    a9d4:	29 87       	std	Y+9, r18	; 0x09
    a9d6:	4a 87       	std	Y+10, r20	; 0x0a
    a9d8:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a9dc:	2b 01       	movw	r4, r22
    a9de:	3c 01       	movw	r6, r24
    a9e0:	60 91 cc 0d 	lds	r22, 0x0DCC
    a9e4:	70 91 cd 0d 	lds	r23, 0x0DCD
    a9e8:	80 91 ce 0d 	lds	r24, 0x0DCE
    a9ec:	90 91 cf 0d 	lds	r25, 0x0DCF
    a9f0:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    a9f4:	dc 01       	movw	r26, r24
    a9f6:	cb 01       	movw	r24, r22
    a9f8:	28 e0       	ldi	r18, 0x08	; 8
    a9fa:	a2 2e       	mov	r10, r18
    a9fc:	38 e0       	ldi	r19, 0x08	; 8
    a9fe:	c3 2e       	mov	r12, r19
    aa00:	e9 80       	ldd	r14, Y+1	; 0x01
    aa02:	fa 80       	ldd	r15, Y+2	; 0x02
    aa04:	0d 81       	ldd	r16, Y+5	; 0x05
    aa06:	1e 81       	ldd	r17, Y+6	; 0x06
    aa08:	29 85       	ldd	r18, Y+9	; 0x09
    aa0a:	4a 85       	ldd	r20, Y+10	; 0x0a
    aa0c:	b2 01       	movw	r22, r4
    aa0e:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <LBCollides>
    aa12:	88 23       	and	r24, r24
    aa14:	79 f0       	breq	.+30     	; 0xaa34 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING) && !GODMODE
    aa16:	80 91 d8 0d 	lds	r24, 0x0DD8
    aa1a:	84 fd       	sbrc	r24, 4
    aa1c:	0b c0       	rjmp	.+22     	; 0xaa34 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    aa1e:	41 e0       	ldi	r20, 0x01	; 1
    aa20:	6f ef       	ldi	r22, 0xFF	; 255
    aa22:	85 e0       	ldi	r24, 0x05	; 5
    aa24:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
				game.player.shield = 0;
    aa28:	10 92 dd 0d 	sts	0x0DDD, r1
				game.player.flags = EXPLODING;
    aa2c:	80 e1       	ldi	r24, 0x10	; 16
    aa2e:	80 93 d8 0d 	sts	0x0DD8, r24
				return;
    aa32:	57 c0       	rjmp	.+174    	; 0xaae2 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    aa34:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa36:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa38:	20 81       	ld	r18, Z
    aa3a:	f1 01       	movw	r30, r2
    aa3c:	40 81       	ld	r20, Z
    aa3e:	6b 2d       	mov	r22, r11
    aa40:	c4 01       	movw	r24, r8
    aa42:	0e 94 12 52 	call	0xa424	; 0xa424 <animate_sprite>
    aa46:	33 c0       	rjmp	.+102    	; 0xaaae <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    aa48:	80 81       	ld	r24, Z
    aa4a:	84 ff       	sbrs	r24, 4
    aa4c:	30 c0       	rjmp	.+96     	; 0xaaae <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    aa4e:	60 91 ac 0d 	lds	r22, 0x0DAC
    aa52:	70 91 ad 0d 	lds	r23, 0x0DAD
    aa56:	80 e0       	ldi	r24, 0x00	; 0
    aa58:	90 e0       	ldi	r25, 0x00	; 0
    aa5a:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    aa5e:	9b 01       	movw	r18, r22
    aa60:	ac 01       	movw	r20, r24
    aa62:	f4 01       	movw	r30, r8
    aa64:	60 85       	ldd	r22, Z+8	; 0x08
    aa66:	71 85       	ldd	r23, Z+9	; 0x09
    aa68:	82 85       	ldd	r24, Z+10	; 0x0a
    aa6a:	93 85       	ldd	r25, Z+11	; 0x0b
    aa6c:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    aa70:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    aa74:	16 2f       	mov	r17, r22
    aa76:	60 91 aa 0d 	lds	r22, 0x0DAA
    aa7a:	70 91 ab 0d 	lds	r23, 0x0DAB
    aa7e:	80 e0       	ldi	r24, 0x00	; 0
    aa80:	90 e0       	ldi	r25, 0x00	; 0
    aa82:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    aa86:	9b 01       	movw	r18, r22
    aa88:	ac 01       	movw	r20, r24
    aa8a:	f4 01       	movw	r30, r8
    aa8c:	64 81       	ldd	r22, Z+4	; 0x04
    aa8e:	75 81       	ldd	r23, Z+5	; 0x05
    aa90:	86 81       	ldd	r24, Z+6	; 0x06
    aa92:	97 81       	ldd	r25, Z+7	; 0x07
    aa94:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    aa98:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    aa9c:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa9e:	fc 85       	ldd	r31, Y+12	; 0x0c
    aaa0:	00 81       	ld	r16, Z
    aaa2:	f1 01       	movw	r30, r2
    aaa4:	20 81       	ld	r18, Z
    aaa6:	41 2f       	mov	r20, r17
    aaa8:	8b 2d       	mov	r24, r11
    aaaa:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    aaae:	eb 85       	ldd	r30, Y+11	; 0x0b
    aab0:	fc 85       	ldd	r31, Y+12	; 0x0c
    aab2:	90 81       	ld	r25, Z
    aab4:	f1 01       	movw	r30, r2
    aab6:	80 81       	ld	r24, Z
    aab8:	98 9f       	mul	r25, r24
    aaba:	b0 0c       	add	r11, r0
    aabc:	11 24       	eor	r1, r1
    aabe:	f2 e4       	ldi	r31, 0x42	; 66
    aac0:	2f 0e       	add	r2, r31
    aac2:	31 1c       	adc	r3, r1
    aac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    aac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    aac8:	8e 5b       	subi	r24, 0xBE	; 190
    aaca:	9f 4f       	sbci	r25, 0xFF	; 255
    aacc:	9c 87       	std	Y+12, r25	; 0x0c
    aace:	8b 87       	std	Y+11, r24	; 0x0b
    aad0:	92 e4       	ldi	r25, 0x42	; 66
    aad2:	89 0e       	add	r8, r25
    aad4:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    aad6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aad8:	fc 85       	ldd	r31, Y+12	; 0x0c
    aada:	e1 5b       	subi	r30, 0xB1	; 177
    aadc:	ff 40       	sbci	r31, 0x0F	; 15
    aade:	09 f0       	breq	.+2      	; 0xaae2 <animate_enemies+0x254>
    aae0:	fe ce       	rjmp	.-516    	; 0xa8de <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    aae2:	2c 96       	adiw	r28, 0x0c	; 12
    aae4:	0f b6       	in	r0, 0x3f	; 63
    aae6:	f8 94       	cli
    aae8:	de bf       	out	0x3e, r29	; 62
    aaea:	0f be       	out	0x3f, r0	; 63
    aaec:	cd bf       	out	0x3d, r28	; 61
    aaee:	df 91       	pop	r29
    aaf0:	cf 91       	pop	r28
    aaf2:	1f 91       	pop	r17
    aaf4:	0f 91       	pop	r16
    aaf6:	ff 90       	pop	r15
    aaf8:	ef 90       	pop	r14
    aafa:	df 90       	pop	r13
    aafc:	cf 90       	pop	r12
    aafe:	bf 90       	pop	r11
    ab00:	af 90       	pop	r10
    ab02:	9f 90       	pop	r9
    ab04:	8f 90       	pop	r8
    ab06:	7f 90       	pop	r7
    ab08:	6f 90       	pop	r6
    ab0a:	5f 90       	pop	r5
    ab0c:	4f 90       	pop	r4
    ab0e:	3f 90       	pop	r3
    ab10:	2f 90       	pop	r2
    ab12:	08 95       	ret

0000ab14 <animate_enemy_shots>:

void animate_enemy_shots()
{
    ab14:	2f 92       	push	r2
    ab16:	3f 92       	push	r3
    ab18:	4f 92       	push	r4
    ab1a:	5f 92       	push	r5
    ab1c:	6f 92       	push	r6
    ab1e:	7f 92       	push	r7
    ab20:	8f 92       	push	r8
    ab22:	9f 92       	push	r9
    ab24:	af 92       	push	r10
    ab26:	bf 92       	push	r11
    ab28:	cf 92       	push	r12
    ab2a:	df 92       	push	r13
    ab2c:	ef 92       	push	r14
    ab2e:	ff 92       	push	r15
    ab30:	0f 93       	push	r16
    ab32:	1f 93       	push	r17
    ab34:	cf 93       	push	r28
    ab36:	df 93       	push	r29
    ab38:	cd b7       	in	r28, 0x3d	; 61
    ab3a:	de b7       	in	r29, 0x3e	; 62
    ab3c:	62 97       	sbiw	r28, 0x12	; 18
    ab3e:	0f b6       	in	r0, 0x3f	; 63
    ab40:	f8 94       	cli
    ab42:	de bf       	out	0x3e, r29	; 62
    ab44:	0f be       	out	0x3f, r0	; 63
    ab46:	cd bf       	out	0x3d, r28	; 61
    ab48:	4d e7       	ldi	r20, 0x7D	; 125
    ab4a:	24 2e       	mov	r2, r20
    ab4c:	4e e0       	ldi	r20, 0x0E	; 14
    ab4e:	34 2e       	mov	r3, r20
    ab50:	5c e6       	ldi	r21, 0x6C	; 108
    ab52:	85 2e       	mov	r8, r21
    ab54:	5e e0       	ldi	r21, 0x0E	; 14
    ab56:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    ab58:	6e e0       	ldi	r22, 0x0E	; 14
    ab5a:	b6 2e       	mov	r11, r22
    ab5c:	f1 01       	movw	r30, r2
    ab5e:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    ab60:	80 81       	ld	r24, Z
    ab62:	81 30       	cpi	r24, 0x01	; 1
    ab64:	09 f0       	breq	.+2      	; 0xab68 <animate_enemy_shots+0x54>
    ab66:	f0 c0       	rjmp	.+480    	; 0xad48 <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    ab68:	d1 01       	movw	r26, r2
    ab6a:	8c 91       	ld	r24, X
    ab6c:	88 23       	and	r24, r24
    ab6e:	09 f4       	brne	.+2      	; 0xab72 <animate_enemy_shots+0x5e>
    ab70:	eb c0       	rjmp	.+470    	; 0xad48 <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    ab72:	f4 01       	movw	r30, r8
    ab74:	c4 80       	ldd	r12, Z+4	; 0x04
    ab76:	d5 80       	ldd	r13, Z+5	; 0x05
    ab78:	e6 80       	ldd	r14, Z+6	; 0x06
    ab7a:	f7 80       	ldd	r15, Z+7	; 0x07
    ab7c:	60 90 aa 0d 	lds	r6, 0x0DAA
    ab80:	70 90 ab 0d 	lds	r7, 0x0DAB
    ab84:	b3 01       	movw	r22, r6
    ab86:	80 e0       	ldi	r24, 0x00	; 0
    ab88:	90 e0       	ldi	r25, 0x00	; 0
    ab8a:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    ab8e:	9b 01       	movw	r18, r22
    ab90:	ac 01       	movw	r20, r24
    ab92:	c7 01       	movw	r24, r14
    ab94:	b6 01       	movw	r22, r12
    ab96:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    ab9a:	87 ff       	sbrs	r24, 7
    ab9c:	03 c0       	rjmp	.+6      	; 0xaba4 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    ab9e:	d1 01       	movw	r26, r2
    aba0:	1c 92       	st	X, r1
    aba2:	86 c0       	rjmp	.+268    	; 0xacb0 <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    aba4:	b3 01       	movw	r22, r6
    aba6:	60 52       	subi	r22, 0x20	; 32
    aba8:	7f 4f       	sbci	r23, 0xFF	; 255
    abaa:	80 e0       	ldi	r24, 0x00	; 0
    abac:	90 e0       	ldi	r25, 0x00	; 0
    abae:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    abb2:	9b 01       	movw	r18, r22
    abb4:	ac 01       	movw	r20, r24
    abb6:	c7 01       	movw	r24, r14
    abb8:	b6 01       	movw	r22, r12
    abba:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    abbe:	18 16       	cp	r1, r24
    abc0:	74 f3       	brlt	.-36     	; 0xab9e <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    abc2:	41 e0       	ldi	r20, 0x01	; 1
    abc4:	61 e0       	ldi	r22, 0x01	; 1
    abc6:	c4 01       	movw	r24, r8
    abc8:	0e 94 f3 4c 	call	0x99e6	; 0x99e6 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    abcc:	81 11       	cpse	r24, r1
    abce:	e7 cf       	rjmp	.-50     	; 0xab9e <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    abd0:	f4 01       	movw	r30, r8
    abd2:	40 84       	ldd	r4, Z+8	; 0x08
    abd4:	51 84       	ldd	r5, Z+9	; 0x09
    abd6:	62 84       	ldd	r6, Z+10	; 0x0a
    abd8:	73 84       	ldd	r7, Z+11	; 0x0b
    abda:	84 81       	ldd	r24, Z+4	; 0x04
    abdc:	95 81       	ldd	r25, Z+5	; 0x05
    abde:	a6 81       	ldd	r26, Z+6	; 0x06
    abe0:	b7 81       	ldd	r27, Z+7	; 0x07
    abe2:	89 83       	std	Y+1, r24	; 0x01
    abe4:	9a 83       	std	Y+2, r25	; 0x02
    abe6:	ab 83       	std	Y+3, r26	; 0x03
    abe8:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    abea:	c3 01       	movw	r24, r6
    abec:	b2 01       	movw	r22, r4
    abee:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    abf2:	6d 83       	std	Y+5, r22	; 0x05
    abf4:	7e 83       	std	Y+6, r23	; 0x06
    abf6:	8f 83       	std	Y+7, r24	; 0x07
    abf8:	98 87       	std	Y+8, r25	; 0x08
    abfa:	69 81       	ldd	r22, Y+1	; 0x01
    abfc:	7a 81       	ldd	r23, Y+2	; 0x02
    abfe:	8b 81       	ldd	r24, Y+3	; 0x03
    ac00:	9c 81       	ldd	r25, Y+4	; 0x04
    ac02:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    ac06:	69 87       	std	Y+9, r22	; 0x09
    ac08:	7a 87       	std	Y+10, r23	; 0x0a
    ac0a:	8b 87       	std	Y+11, r24	; 0x0b
    ac0c:	9c 87       	std	Y+12, r25	; 0x0c
    ac0e:	20 91 dc 0d 	lds	r18, 0x0DDC
    ac12:	22 0f       	add	r18, r18
    ac14:	22 0f       	add	r18, r18
    ac16:	22 0f       	add	r18, r18
    ac18:	40 91 db 0d 	lds	r20, 0x0DDB
    ac1c:	44 0f       	add	r20, r20
    ac1e:	44 0f       	add	r20, r20
    ac20:	44 0f       	add	r20, r20
    ac22:	60 91 d0 0d 	lds	r22, 0x0DD0
    ac26:	70 91 d1 0d 	lds	r23, 0x0DD1
    ac2a:	80 91 d2 0d 	lds	r24, 0x0DD2
    ac2e:	90 91 d3 0d 	lds	r25, 0x0DD3
    ac32:	29 8b       	std	Y+17, r18	; 0x11
    ac34:	4a 8b       	std	Y+18, r20	; 0x12
    ac36:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    ac3a:	6d 87       	std	Y+13, r22	; 0x0d
    ac3c:	7e 87       	std	Y+14, r23	; 0x0e
    ac3e:	8f 87       	std	Y+15, r24	; 0x0f
    ac40:	98 8b       	std	Y+16, r25	; 0x10
    ac42:	60 91 cc 0d 	lds	r22, 0x0DCC
    ac46:	70 91 cd 0d 	lds	r23, 0x0DCD
    ac4a:	80 91 ce 0d 	lds	r24, 0x0DCE
    ac4e:	90 91 cf 0d 	lds	r25, 0x0DCF
    ac52:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    ac56:	dc 01       	movw	r26, r24
    ac58:	cb 01       	movw	r24, r22
    ac5a:	28 e0       	ldi	r18, 0x08	; 8
    ac5c:	a2 2e       	mov	r10, r18
    ac5e:	38 e0       	ldi	r19, 0x08	; 8
    ac60:	c3 2e       	mov	r12, r19
    ac62:	ed 80       	ldd	r14, Y+5	; 0x05
    ac64:	fe 80       	ldd	r15, Y+6	; 0x06
    ac66:	09 85       	ldd	r16, Y+9	; 0x09
    ac68:	1a 85       	ldd	r17, Y+10	; 0x0a
    ac6a:	29 89       	ldd	r18, Y+17	; 0x11
    ac6c:	4a 89       	ldd	r20, Y+18	; 0x12
    ac6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    ac70:	7e 85       	ldd	r23, Y+14	; 0x0e
    ac72:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <LBCollides>
    ac76:	88 23       	and	r24, r24
    ac78:	01 f1       	breq	.+64     	; 0xacba <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    ac7a:	41 e0       	ldi	r20, 0x01	; 1
    ac7c:	6f ef       	ldi	r22, 0xFF	; 255
    ac7e:	84 e0       	ldi	r24, 0x04	; 4
    ac80:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
						if(!GODMODE) game.player.shield -= game.enemies[i].shot[j].hit_count;
    ac84:	80 91 dd 0d 	lds	r24, 0x0DDD
    ac88:	f1 01       	movw	r30, r2
    ac8a:	31 97       	sbiw	r30, 0x01	; 1
    ac8c:	90 81       	ld	r25, Z
    ac8e:	89 1b       	sub	r24, r25
    ac90:	80 93 dd 0d 	sts	0x0DDD, r24
						if (game.player.shield <= 0)
    ac94:	18 16       	cp	r1, r24
    ac96:	54 f0       	brlt	.+20     	; 0xacac <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    ac98:	41 e0       	ldi	r20, 0x01	; 1
    ac9a:	6f ef       	ldi	r22, 0xFF	; 255
    ac9c:	85 e0       	ldi	r24, 0x05	; 5
    ac9e:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
							game.player.shield = 0;
    aca2:	10 92 dd 0d 	sts	0x0DDD, r1
							game.player.flags = EXPLODING;
    aca6:	b0 e1       	ldi	r27, 0x10	; 16
    aca8:	b0 93 d8 0d 	sts	0x0DD8, r27
						}
						game.enemies[i].shot[j].active = 0;
    acac:	f1 01       	movw	r30, r2
    acae:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    acb0:	01 e0       	ldi	r16, 0x01	; 1
    acb2:	21 e0       	ldi	r18, 0x01	; 1
    acb4:	40 e0       	ldi	r20, 0x00	; 0
    acb6:	60 ee       	ldi	r22, 0xE0	; 224
    acb8:	44 c0       	rjmp	.+136    	; 0xad42 <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    acba:	d4 01       	movw	r26, r8
    acbc:	1c 96       	adiw	r26, 0x0c	; 12
    acbe:	6d 91       	ld	r22, X+
    acc0:	7c 91       	ld	r23, X
    acc2:	1d 97       	sbiw	r26, 0x0d	; 13
    acc4:	88 27       	eor	r24, r24
    acc6:	77 fd       	sbrc	r23, 7
    acc8:	80 95       	com	r24
    acca:	98 2f       	mov	r25, r24
    accc:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    acd0:	29 e8       	ldi	r18, 0x89	; 137
    acd2:	38 e8       	ldi	r19, 0x88	; 136
    acd4:	48 e8       	ldi	r20, 0x88	; 136
    acd6:	5c e3       	ldi	r21, 0x3C	; 60
    acd8:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    acdc:	9b 01       	movw	r18, r22
    acde:	ac 01       	movw	r20, r24
    ace0:	69 81       	ldd	r22, Y+1	; 0x01
    ace2:	7a 81       	ldd	r23, Y+2	; 0x02
    ace4:	8b 81       	ldd	r24, Y+3	; 0x03
    ace6:	9c 81       	ldd	r25, Y+4	; 0x04
    ace8:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    acec:	6b 01       	movw	r12, r22
    acee:	7c 01       	movw	r14, r24
    acf0:	f4 01       	movw	r30, r8
    acf2:	64 83       	std	Z+4, r22	; 0x04
    acf4:	75 83       	std	Z+5, r23	; 0x05
    acf6:	86 83       	std	Z+6, r24	; 0x06
    acf8:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    acfa:	60 91 ac 0d 	lds	r22, 0x0DAC
    acfe:	70 91 ad 0d 	lds	r23, 0x0DAD
    ad02:	80 e0       	ldi	r24, 0x00	; 0
    ad04:	90 e0       	ldi	r25, 0x00	; 0
    ad06:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    ad0a:	9b 01       	movw	r18, r22
    ad0c:	ac 01       	movw	r20, r24
    ad0e:	c3 01       	movw	r24, r6
    ad10:	b2 01       	movw	r22, r4
    ad12:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    ad16:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    ad1a:	76 2e       	mov	r7, r22
    ad1c:	60 91 aa 0d 	lds	r22, 0x0DAA
    ad20:	70 91 ab 0d 	lds	r23, 0x0DAB
    ad24:	80 e0       	ldi	r24, 0x00	; 0
    ad26:	90 e0       	ldi	r25, 0x00	; 0
    ad28:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    ad2c:	9b 01       	movw	r18, r22
    ad2e:	ac 01       	movw	r20, r24
    ad30:	c7 01       	movw	r24, r14
    ad32:	b6 01       	movw	r22, r12
    ad34:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    ad38:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
    ad3c:	01 e0       	ldi	r16, 0x01	; 1
    ad3e:	21 e0       	ldi	r18, 0x01	; 1
    ad40:	47 2d       	mov	r20, r7
    ad42:	8b 2d       	mov	r24, r11
    ad44:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    ad48:	b3 94       	inc	r11
    ad4a:	f2 e4       	ldi	r31, 0x42	; 66
    ad4c:	2f 0e       	add	r2, r31
    ad4e:	31 1c       	adc	r3, r1
    ad50:	82 e4       	ldi	r24, 0x42	; 66
    ad52:	88 0e       	add	r8, r24
    ad54:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ad56:	93 e1       	ldi	r25, 0x13	; 19
    ad58:	b9 12       	cpse	r11, r25
    ad5a:	00 cf       	rjmp	.-512    	; 0xab5c <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    ad5c:	62 96       	adiw	r28, 0x12	; 18
    ad5e:	0f b6       	in	r0, 0x3f	; 63
    ad60:	f8 94       	cli
    ad62:	de bf       	out	0x3e, r29	; 62
    ad64:	0f be       	out	0x3f, r0	; 63
    ad66:	cd bf       	out	0x3d, r28	; 61
    ad68:	df 91       	pop	r29
    ad6a:	cf 91       	pop	r28
    ad6c:	1f 91       	pop	r17
    ad6e:	0f 91       	pop	r16
    ad70:	ff 90       	pop	r15
    ad72:	ef 90       	pop	r14
    ad74:	df 90       	pop	r13
    ad76:	cf 90       	pop	r12
    ad78:	bf 90       	pop	r11
    ad7a:	af 90       	pop	r10
    ad7c:	9f 90       	pop	r9
    ad7e:	8f 90       	pop	r8
    ad80:	7f 90       	pop	r7
    ad82:	6f 90       	pop	r6
    ad84:	5f 90       	pop	r5
    ad86:	4f 90       	pop	r4
    ad88:	3f 90       	pop	r3
    ad8a:	2f 90       	pop	r2
    ad8c:	08 95       	ret

0000ad8e <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    ad8e:	ef 92       	push	r14
    ad90:	ff 92       	push	r15
    ad92:	0f 93       	push	r16
    ad94:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    ad96:	c8 2f       	mov	r28, r24
    ad98:	e6 2e       	mov	r14, r22
    ad9a:	f1 2c       	mov	r15, r1
    ad9c:	e8 0e       	add	r14, r24
    ad9e:	f1 1c       	adc	r15, r1
    ada0:	8c 2f       	mov	r24, r28
    ada2:	90 e0       	ldi	r25, 0x00	; 0
    ada4:	8e 15       	cp	r24, r14
    ada6:	9f 05       	cpc	r25, r15
    ada8:	7c f4       	brge	.+30     	; 0xadc8 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    adaa:	40 e0       	ldi	r20, 0x00	; 0
    adac:	64 ee       	ldi	r22, 0xE4	; 228
    adae:	7d e2       	ldi	r23, 0x2D	; 45
    adb0:	8c 2f       	mov	r24, r28
    adb2:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    adb6:	01 e0       	ldi	r16, 0x01	; 1
    adb8:	21 e0       	ldi	r18, 0x01	; 1
    adba:	40 e0       	ldi	r20, 0x00	; 0
    adbc:	60 ee       	ldi	r22, 0xE0	; 224
    adbe:	8c 2f       	mov	r24, r28
    adc0:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    adc4:	cf 5f       	subi	r28, 0xFF	; 255
    adc6:	ec cf       	rjmp	.-40     	; 0xada0 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    adc8:	cf 91       	pop	r28
    adca:	0f 91       	pop	r16
    adcc:	ff 90       	pop	r15
    adce:	ef 90       	pop	r14
    add0:	08 95       	ret

0000add2 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    add2:	61 e0       	ldi	r22, 0x01	; 1
    add4:	81 e0       	ldi	r24, 0x01	; 1
    add6:	0e 94 ad 43 	call	0x875a	; 0x875a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    adda:	64 e1       	ldi	r22, 0x14	; 20
    addc:	80 e0       	ldi	r24, 0x00	; 0
    adde:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
	LBRotateSprites();
    ade2:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	ClearVram();
    ade6:	0e 94 ac 34 	call	0x6958	; 0x6958 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    adea:	60 e0       	ldi	r22, 0x00	; 0
    adec:	81 e0       	ldi	r24, 0x01	; 1
    adee:	0c 94 a1 43 	jmp	0x8742	; 0x8742 <FadeIn>

0000adf2 <load_level>:
		game.level_height = 25;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    adf2:	0f 93       	push	r16
    adf4:	cf 93       	push	r28
    adf6:	df 93       	push	r29
    adf8:	c8 2f       	mov	r28, r24
    adfa:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    adfc:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    ae00:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    ae04:	8d e1       	ldi	r24, 0x1D	; 29
    ae06:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    ae0a:	87 ee       	ldi	r24, 0xE7	; 231
    ae0c:	9d e2       	ldi	r25, 0x2D	; 45
    ae0e:	90 93 b1 0c 	sts	0x0CB1, r25
    ae12:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    ae16:	83 e0       	ldi	r24, 0x03	; 3
    ae18:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    ae1c:	82 e0       	ldi	r24, 0x02	; 2
    ae1e:	0e 94 51 48 	call	0x90a2	; 0x90a2 <clear_overlay>
	game.current_level_index = index;
    ae22:	c0 93 b9 0d 	sts	0x0DB9, r28
	game.level_ended = 0;
    ae26:	10 92 c7 0d 	sts	0x0DC7, r1
	game.joypadState.held = 0;
    ae2a:	10 92 a3 0f 	sts	0x0FA3, r1
    ae2e:	10 92 a2 0f 	sts	0x0FA2, r1
	game.joypadState.pressed = 0;
    ae32:	10 92 9f 0f 	sts	0x0F9F, r1
    ae36:	10 92 9e 0f 	sts	0x0F9E, r1
	game.joypadState.released = 0;
    ae3a:	10 92 a1 0f 	sts	0x0FA1, r1
    ae3e:	10 92 a0 0f 	sts	0x0FA0, r1
	switch (index)
    ae42:	8c 2f       	mov	r24, r28
    ae44:	90 e0       	ldi	r25, 0x00	; 0
    ae46:	8a 30       	cpi	r24, 0x0A	; 10
    ae48:	91 05       	cpc	r25, r1
    ae4a:	c0 f4       	brcc	.+48     	; 0xae7c <load_level+0x8a>
    ae4c:	fc 01       	movw	r30, r24
    ae4e:	e8 5c       	subi	r30, 0xC8	; 200
    ae50:	ff 4f       	sbci	r31, 0xFF	; 255
    ae52:	0c 94 c0 62 	jmp	0xc580	; 0xc580 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    ae56:	8e e8       	ldi	r24, 0x8E	; 142
    ae58:	9d e5       	ldi	r25, 0x5D	; 93
    ae5a:	0e c0       	rjmp	.+28     	; 0xae78 <load_level+0x86>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    ae5c:	8d e8       	ldi	r24, 0x8D	; 141
    ae5e:	9c e5       	ldi	r25, 0x5C	; 92
    ae60:	0b c0       	rjmp	.+22     	; 0xae78 <load_level+0x86>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    ae62:	8c e8       	ldi	r24, 0x8C	; 140
    ae64:	9b e5       	ldi	r25, 0x5B	; 91
    ae66:	08 c0       	rjmp	.+16     	; 0xae78 <load_level+0x86>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    ae68:	8b e8       	ldi	r24, 0x8B	; 139
    ae6a:	9a e5       	ldi	r25, 0x5A	; 90
    ae6c:	05 c0       	rjmp	.+10     	; 0xae78 <load_level+0x86>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    ae6e:	8a e8       	ldi	r24, 0x8A	; 138
    ae70:	99 e5       	ldi	r25, 0x59	; 89
    ae72:	02 c0       	rjmp	.+4      	; 0xae78 <load_level+0x86>
		case 9: map_level_info((char*) map_level_space); break;
    ae74:	87 e7       	ldi	r24, 0x77	; 119
    ae76:	91 e5       	ldi	r25, 0x51	; 81
    ae78:	0e 94 c4 4a 	call	0x9588	; 0x9588 <map_level_info>
	}
	game.column_count = 0;
    ae7c:	10 92 b5 0d 	sts	0x0DB5, r1
    ae80:	10 92 b4 0d 	sts	0x0DB4, r1
	game.camera_x = get_camera_x(index);
    ae84:	10 92 ab 0d 	sts	0x0DAB, r1
    ae88:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    ae8c:	10 92 ad 0d 	sts	0x0DAD, r1
    ae90:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    ae94:	80 e0       	ldi	r24, 0x00	; 0
    ae96:	90 e0       	ldi	r25, 0x00	; 0
    ae98:	a0 ec       	ldi	r26, 0xC0	; 192
    ae9a:	b1 e4       	ldi	r27, 0x41	; 65
    ae9c:	80 93 cc 0d 	sts	0x0DCC, r24
    aea0:	90 93 cd 0d 	sts	0x0DCD, r25
    aea4:	a0 93 ce 0d 	sts	0x0DCE, r26
    aea8:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    aeac:	80 e0       	ldi	r24, 0x00	; 0
    aeae:	90 e0       	ldi	r25, 0x00	; 0
    aeb0:	a0 e2       	ldi	r26, 0x20	; 32
    aeb2:	b3 e4       	ldi	r27, 0x43	; 67
    aeb4:	80 93 d0 0d 	sts	0x0DD0, r24
    aeb8:	90 93 d1 0d 	sts	0x0DD1, r25
    aebc:	a0 93 d2 0d 	sts	0x0DD2, r26
    aec0:	b0 93 d3 0d 	sts	0x0DD3, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    aec4:	8d e1       	ldi	r24, 0x1D	; 29
    aec6:	90 e0       	ldi	r25, 0x00	; 0
    aec8:	90 93 a7 0d 	sts	0x0DA7, r25
    aecc:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    aed0:	80 93 c3 0d 	sts	0x0DC3, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    aed4:	8a e1       	ldi	r24, 0x1A	; 26
    aed6:	90 e0       	ldi	r25, 0x00	; 0
    aed8:	90 93 a9 0d 	sts	0x0DA9, r25
    aedc:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    aee0:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_x = 0;
    aee4:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    aee8:	10 92 c2 0d 	sts	0x0DC2, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    aeec:	8a e0       	ldi	r24, 0x0A	; 10
    aeee:	80 93 c6 0d 	sts	0x0DC6, r24
	render_camera_view();
    aef2:	0e 94 ce 48 	call	0x919c	; 0x919c <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    aef6:	4e e5       	ldi	r20, 0x5E	; 94
    aef8:	5b e0       	ldi	r21, 0x0B	; 11
    aefa:	6d e1       	ldi	r22, 0x1D	; 29
    aefc:	80 e0       	ldi	r24, 0x00	; 0
    aefe:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    af02:	41 e5       	ldi	r20, 0x51	; 81
    af04:	5b e0       	ldi	r21, 0x0B	; 11
    af06:	6d e1       	ldi	r22, 0x1D	; 29
    af08:	82 e1       	ldi	r24, 0x12	; 18
    af0a:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    af0e:	47 e5       	ldi	r20, 0x57	; 87
    af10:	5b e0       	ldi	r21, 0x0B	; 11
    af12:	6e e1       	ldi	r22, 0x1E	; 30
    af14:	80 e0       	ldi	r24, 0x00	; 0
    af16:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    af1a:	46 e6       	ldi	r20, 0x66	; 102
    af1c:	5b e0       	ldi	r21, 0x0B	; 11
    af1e:	6e e1       	ldi	r22, 0x1E	; 30
    af20:	81 e1       	ldi	r24, 0x11	; 17
    af22:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    af26:	40 e1       	ldi	r20, 0x10	; 16
    af28:	5b e0       	ldi	r21, 0x0B	; 11
    af2a:	6f e1       	ldi	r22, 0x1F	; 31
    af2c:	81 e1       	ldi	r24, 0x11	; 17
    af2e:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    af32:	21 e0       	ldi	r18, 0x01	; 1
    af34:	40 91 dd 0d 	lds	r20, 0x0DDD
    af38:	6d e1       	ldi	r22, 0x1D	; 29
    af3a:	89 e0       	ldi	r24, 0x09	; 9
    af3c:	0e 94 8f 44 	call	0x891e	; 0x891e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    af40:	40 91 b2 0d 	lds	r20, 0x0DB2
    af44:	50 91 b3 0d 	lds	r21, 0x0DB3
    af48:	21 e0       	ldi	r18, 0x01	; 1
    af4a:	6d e1       	ldi	r22, 0x1D	; 29
    af4c:	8b e1       	ldi	r24, 0x1B	; 27
    af4e:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    af52:	21 e0       	ldi	r18, 0x01	; 1
    af54:	40 91 b7 0d 	lds	r20, 0x0DB7
    af58:	6e e1       	ldi	r22, 0x1E	; 30
    af5a:	89 e0       	ldi	r24, 0x09	; 9
    af5c:	0e 94 8f 44 	call	0x891e	; 0x891e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    af60:	40 91 b0 0d 	lds	r20, 0x0DB0
    af64:	50 91 b1 0d 	lds	r21, 0x0DB1
    af68:	21 e0       	ldi	r18, 0x01	; 1
    af6a:	6e e1       	ldi	r22, 0x1E	; 30
    af6c:	8b e1       	ldi	r24, 0x1B	; 27
    af6e:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    af72:	40 91 ae 0d 	lds	r20, 0x0DAE
    af76:	50 91 af 0d 	lds	r21, 0x0DAF
    af7a:	21 e0       	ldi	r18, 0x01	; 1
    af7c:	6f e1       	ldi	r22, 0x1F	; 31
    af7e:	8b e1       	ldi	r24, 0x1B	; 27
    af80:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    af84:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    af88:	81 11       	cpse	r24, r1
    af8a:	39 c0       	rjmp	.+114    	; 0xaffe <load_level+0x20c>
    af8c:	dd 23       	and	r29, r29
    af8e:	b9 f1       	breq	.+110    	; 0xaffe <load_level+0x20c>
	{
		map_ship();
    af90:	0e 94 af 4a 	call	0x955e	; 0x955e <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    af94:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    af96:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    af98:	81 e0       	ldi	r24, 0x01	; 1
    af9a:	90 e0       	ldi	r25, 0x00	; 0
    af9c:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    afa0:	8c 2f       	mov	r24, r28
    afa2:	90 e0       	ldi	r25, 0x00	; 0
    afa4:	80 3a       	cpi	r24, 0xA0	; 160
    afa6:	91 05       	cpc	r25, r1
    afa8:	74 f0       	brlt	.+28     	; 0xafc6 <load_level+0x1d4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    afaa:	40 e0       	ldi	r20, 0x00	; 0
    afac:	68 eb       	ldi	r22, 0xB8	; 184
    afae:	7d e2       	ldi	r23, 0x2D	; 45
    afb0:	80 e0       	ldi	r24, 0x00	; 0
    afb2:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    afb6:	03 e0       	ldi	r16, 0x03	; 3
    afb8:	22 e0       	ldi	r18, 0x02	; 2
    afba:	40 ea       	ldi	r20, 0xA0	; 160
    afbc:	68 e1       	ldi	r22, 0x18	; 24
    afbe:	80 e0       	ldi	r24, 0x00	; 0
    afc0:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
				ship_increment = -3;
    afc4:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    afc6:	84 e3       	ldi	r24, 0x34	; 52
    afc8:	9e e0       	ldi	r25, 0x0E	; 14
    afca:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    afce:	40 e0       	ldi	r20, 0x00	; 0
    afd0:	bc 01       	movw	r22, r24
    afd2:	86 e0       	ldi	r24, 0x06	; 6
    afd4:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    afd8:	02 e0       	ldi	r16, 0x02	; 2
    afda:	24 e0       	ldi	r18, 0x04	; 4
    afdc:	4c 2f       	mov	r20, r28
    afde:	68 e0       	ldi	r22, 0x08	; 8
    afe0:	86 e0       	ldi	r24, 0x06	; 6
    afe2:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
			ship_y += ship_increment;
    afe6:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    afe8:	39 f4       	brne	.+14     	; 0xaff8 <load_level+0x206>
			{
				clear_sprites(6, 8);
    afea:	68 e0       	ldi	r22, 0x08	; 8
    afec:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    afee:	df 91       	pop	r29
    aff0:	cf 91       	pop	r28
    aff2:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    aff4:	0c 94 c7 56 	jmp	0xad8e	; 0xad8e <clear_sprites>
				break;
			}
			LBRotateSprites();
    aff8:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
		}
    affc:	cd cf       	rjmp	.-102    	; 0xaf98 <load_level+0x1a6>
	}
}
    affe:	df 91       	pop	r29
    b000:	cf 91       	pop	r28
    b002:	0f 91       	pop	r16
    b004:	08 95       	ret

0000b006 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    b006:	0f 93       	push	r16
    b008:	1f 93       	push	r17
    b00a:	cf 93       	push	r28
    b00c:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    b00e:	18 2f       	mov	r17, r24
    b010:	c6 2f       	mov	r28, r22
    b012:	d0 e0       	ldi	r29, 0x00	; 0
    b014:	c8 0f       	add	r28, r24
    b016:	d1 1d       	adc	r29, r1
    b018:	81 2f       	mov	r24, r17
    b01a:	90 e0       	ldi	r25, 0x00	; 0
    b01c:	8c 17       	cp	r24, r28
    b01e:	9d 07       	cpc	r25, r29
    b020:	4c f4       	brge	.+18     	; 0xb034 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b022:	01 e0       	ldi	r16, 0x01	; 1
    b024:	21 e0       	ldi	r18, 0x01	; 1
    b026:	40 e0       	ldi	r20, 0x00	; 0
    b028:	60 ee       	ldi	r22, 0xE0	; 224
    b02a:	81 2f       	mov	r24, r17
    b02c:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b030:	1f 5f       	subi	r17, 0xFF	; 255
    b032:	f2 cf       	rjmp	.-28     	; 0xb018 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b034:	df 91       	pop	r29
    b036:	cf 91       	pop	r28
    b038:	1f 91       	pop	r17
    b03a:	0f 91       	pop	r16
    b03c:	08 95       	ret

0000b03e <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    b03e:	fc 01       	movw	r30, r24
    b040:	20 81       	ld	r18, Z
    b042:	31 81       	ldd	r19, Z+1	; 0x01
    b044:	28 70       	andi	r18, 0x08	; 8
    b046:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b048:	81 e0       	ldi	r24, 0x01	; 1
    b04a:	23 2b       	or	r18, r19
    b04c:	09 f4       	brne	.+2      	; 0xb050 <select_pressed+0x12>
    b04e:	80 e0       	ldi	r24, 0x00	; 0
}
    b050:	08 95       	ret

0000b052 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    b052:	ff 92       	push	r15
    b054:	0f 93       	push	r16
    b056:	1f 93       	push	r17
    b058:	cf 93       	push	r28
    b05a:	df 93       	push	r29
    b05c:	ec 01       	movw	r28, r24
    b05e:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    b060:	8e e0       	ldi	r24, 0x0E	; 14
    b062:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    b064:	fe 01       	movw	r30, r28
    b066:	84 91       	lpm	r24, Z
    b068:	83 32       	cpi	r24, 0x23	; 35
    b06a:	21 f1       	breq	.+72     	; 0xb0b4 <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    b06c:	6f ef       	ldi	r22, 0xFF	; 255
    b06e:	70 e0       	ldi	r23, 0x00	; 0
    b070:	ce 01       	movw	r24, r28
    b072:	0e 94 74 64 	call	0xc8e8	; 0xc8e8 <strnlen_P>
		x = 14 - ln / 2;
    b076:	86 95       	lsr	r24
    b078:	0f 2d       	mov	r16, r15
    b07a:	08 1b       	sub	r16, r24
    b07c:	0c 1b       	sub	r16, r28
    b07e:	8c 2f       	mov	r24, r28
    b080:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    b082:	21 96       	adiw	r28, 0x01	; 1
    b084:	fe 01       	movw	r30, r28
    b086:	31 97       	sbiw	r30, 0x01	; 1
    b088:	44 91       	lpm	r20, Z
    b08a:	44 23       	and	r20, r20
    b08c:	89 f0       	breq	.+34     	; 0xb0b0 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    b08e:	61 2f       	mov	r22, r17
    b090:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    b094:	60 e0       	ldi	r22, 0x00	; 0
    b096:	8e e9       	ldi	r24, 0x9E	; 158
    b098:	9f e0       	ldi	r25, 0x0F	; 15
    b09a:	0e 94 08 44 	call	0x8810	; 0x8810 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    b09e:	80 91 a2 0f 	lds	r24, 0x0FA2
    b0a2:	80 fd       	sbrc	r24, 0
    b0a4:	ec cf       	rjmp	.-40     	; 0xb07e <stream_dialogue+0x2c>
    b0a6:	80 e7       	ldi	r24, 0x70	; 112
    b0a8:	97 e1       	ldi	r25, 0x17	; 23
    b0aa:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <WaitUs>
    b0ae:	e7 cf       	rjmp	.-50     	; 0xb07e <stream_dialogue+0x2c>
		}
		y++;
    b0b0:	1f 5f       	subi	r17, 0xFF	; 255
    b0b2:	d8 cf       	rjmp	.-80     	; 0xb064 <stream_dialogue+0x12>
	}
}
    b0b4:	df 91       	pop	r29
    b0b6:	cf 91       	pop	r28
    b0b8:	1f 91       	pop	r17
    b0ba:	0f 91       	pop	r16
    b0bc:	ff 90       	pop	r15
    b0be:	08 95       	ret

0000b0c0 <map_particles>:

void map_particles()
{
    b0c0:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    b0c2:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    b0c4:	40 e0       	ldi	r20, 0x00	; 0
    b0c6:	68 ed       	ldi	r22, 0xD8	; 216
    b0c8:	7d e2       	ldi	r23, 0x2D	; 45
    b0ca:	8c 2f       	mov	r24, r28
    b0cc:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    b0d0:	cf 5f       	subi	r28, 0xFF	; 255
    b0d2:	c4 31       	cpi	r28, 0x14	; 20
    b0d4:	b9 f7       	brne	.-18     	; 0xb0c4 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    b0d6:	cf 91       	pop	r28
    b0d8:	08 95       	ret

0000b0da <place_particles>:

void place_particles()
{
    b0da:	0f 93       	push	r16
    b0dc:	1f 93       	push	r17
    b0de:	cf 93       	push	r28
    b0e0:	df 93       	push	r29
    b0e2:	1f 92       	push	r1
    b0e4:	cd b7       	in	r28, 0x3d	; 61
    b0e6:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    b0e8:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    b0ea:	68 ec       	ldi	r22, 0xC8	; 200
    b0ec:	80 e0       	ldi	r24, 0x00	; 0
    b0ee:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <LBRandom>
    b0f2:	48 2f       	mov	r20, r24
    b0f4:	60 ee       	ldi	r22, 0xE0	; 224
    b0f6:	80 e0       	ldi	r24, 0x00	; 0
    b0f8:	49 83       	std	Y+1, r20	; 0x01
    b0fa:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <LBRandom>
    b0fe:	68 2f       	mov	r22, r24
    b100:	01 e0       	ldi	r16, 0x01	; 1
    b102:	21 e0       	ldi	r18, 0x01	; 1
    b104:	49 81       	ldd	r20, Y+1	; 0x01
    b106:	81 2f       	mov	r24, r17
    b108:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    b10c:	1f 5f       	subi	r17, 0xFF	; 255
    b10e:	14 31       	cpi	r17, 0x14	; 20
    b110:	61 f7       	brne	.-40     	; 0xb0ea <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    b112:	0f 90       	pop	r0
    b114:	df 91       	pop	r29
    b116:	cf 91       	pop	r28
    b118:	1f 91       	pop	r17
    b11a:	0f 91       	pop	r16
    b11c:	08 95       	ret

0000b11e <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    b11e:	ef 92       	push	r14
    b120:	ff 92       	push	r15
    b122:	0f 93       	push	r16
    b124:	1f 93       	push	r17
    b126:	cf 93       	push	r28
    b128:	df 93       	push	r29
    b12a:	d8 2f       	mov	r29, r24
    b12c:	16 2f       	mov	r17, r22
    b12e:	84 ed       	ldi	r24, 0xD4	; 212
    b130:	e8 2e       	mov	r14, r24
    b132:	8f e0       	ldi	r24, 0x0F	; 15
    b134:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    b136:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    b138:	f7 01       	movw	r30, r14
    b13a:	40 81       	ld	r20, Z
    b13c:	4d 0f       	add	r20, r29
    b13e:	01 e0       	ldi	r16, 0x01	; 1
    b140:	21 e0       	ldi	r18, 0x01	; 1
    b142:	31 97       	sbiw	r30, 0x01	; 1
    b144:	60 81       	ld	r22, Z
    b146:	8c 2f       	mov	r24, r28
    b148:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    b14c:	f7 01       	movw	r30, r14
    b14e:	80 81       	ld	r24, Z
    b150:	89 3c       	cpi	r24, 0xC9	; 201
    b152:	50 f0       	brcs	.+20     	; 0xb168 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    b154:	60 ee       	ldi	r22, 0xE0	; 224
    b156:	80 e0       	ldi	r24, 0x00	; 0
    b158:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <LBRandom>
    b15c:	21 e0       	ldi	r18, 0x01	; 1
    b15e:	41 2f       	mov	r20, r17
    b160:	68 2f       	mov	r22, r24
    b162:	8c 2f       	mov	r24, r28
    b164:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    b168:	cf 5f       	subi	r28, 0xFF	; 255
    b16a:	f4 e0       	ldi	r31, 0x04	; 4
    b16c:	ef 0e       	add	r14, r31
    b16e:	f1 1c       	adc	r15, r1
    b170:	c4 31       	cpi	r28, 0x14	; 20
    b172:	11 f7       	brne	.-60     	; 0xb138 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    b174:	df 91       	pop	r29
    b176:	cf 91       	pop	r28
    b178:	1f 91       	pop	r17
    b17a:	0f 91       	pop	r16
    b17c:	ff 90       	pop	r15
    b17e:	ef 90       	pop	r14
    b180:	08 95       	ret

0000b182 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    b182:	82 50       	subi	r24, 0x02	; 2
    b184:	87 30       	cpi	r24, 0x07	; 7
    b186:	48 f4       	brcc	.+18     	; 0xb19a <get_emarald_map+0x18>
    b188:	e8 2f       	mov	r30, r24
    b18a:	f0 e0       	ldi	r31, 0x00	; 0
    b18c:	ee 0f       	add	r30, r30
    b18e:	ff 1f       	adc	r31, r31
    b190:	ee 5f       	subi	r30, 0xFE	; 254
    b192:	fa 4f       	sbci	r31, 0xFA	; 250
    b194:	80 81       	ld	r24, Z
    b196:	91 81       	ldd	r25, Z+1	; 0x01
    b198:	08 95       	ret
    b19a:	89 ec       	ldi	r24, 0xC9	; 201
    b19c:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    b19e:	08 95       	ret

0000b1a0 <music_transition>:

void music_transition()
{
	if (is_space())
    b1a0:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    b1a4:	88 23       	and	r24, r24
    b1a6:	19 f0       	breq	.+6      	; 0xb1ae <music_transition+0xe>
	{
		StartSong(spacesong);
    b1a8:	8d ea       	ldi	r24, 0xAD	; 173
    b1aa:	9b e0       	ldi	r25, 0x0B	; 11
    b1ac:	06 c0       	rjmp	.+12     	; 0xb1ba <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    b1ae:	80 91 b9 0d 	lds	r24, 0x0DB9
    b1b2:	88 23       	and	r24, r24
    b1b4:	21 f0       	breq	.+8      	; 0xb1be <music_transition+0x1e>
	{
		StartSong(planetsong);
    b1b6:	8d e4       	ldi	r24, 0x4D	; 77
    b1b8:	92 e1       	ldi	r25, 0x12	; 18
    b1ba:	0c 94 a0 37 	jmp	0x6f40	; 0x6f40 <StartSong>
    b1be:	08 95       	ret

0000b1c0 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    b1c0:	cf 92       	push	r12
    b1c2:	df 92       	push	r13
    b1c4:	ef 92       	push	r14
    b1c6:	ff 92       	push	r15
    b1c8:	0f 93       	push	r16
    b1ca:	1f 93       	push	r17
    b1cc:	cf 93       	push	r28
    b1ce:	df 93       	push	r29
    b1d0:	1f 92       	push	r1
    b1d2:	cd b7       	in	r28, 0x3d	; 61
    b1d4:	de b7       	in	r29, 0x3e	; 62
    b1d6:	c8 2e       	mov	r12, r24
    b1d8:	e6 2e       	mov	r14, r22
    b1da:	12 2f       	mov	r17, r18
    b1dc:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    b1de:	49 83       	std	Y+1, r20	; 0x01
    b1e0:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <fade_through>
	Screen.scrollX = 0;
    b1e4:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b1e8:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    b1ec:	80 e2       	ldi	r24, 0x20	; 32
    b1ee:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    b1f2:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    b1f6:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    b1fa:	10 92 c2 0d 	sts	0x0DC2, r1
	map_particles();
    b1fe:	0e 94 60 58 	call	0xb0c0	; 0xb0c0 <map_particles>
	map_ship();
    b202:	0e 94 af 4a 	call	0x955e	; 0x955e <map_ship>
	place_particles();
    b206:	0e 94 6d 58 	call	0xb0da	; 0xb0da <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    b20a:	4e e8       	ldi	r20, 0x8E	; 142
    b20c:	5d e4       	ldi	r21, 0x4D	; 77
    b20e:	69 81       	ldd	r22, Y+1	; 0x01
    b210:	80 e0       	ldi	r24, 0x00	; 0
    b212:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
	game.current_level_index = index;
    b216:	c0 92 b9 0d 	sts	0x0DB9, r12
	music_transition();
    b21a:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <music_transition>
	if (!is_space())
    b21e:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    b222:	81 11       	cpse	r24, r1
    b224:	0f c0       	rjmp	.+30     	; 0xb244 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    b226:	8c 2d       	mov	r24, r12
    b228:	0e 94 c1 58 	call	0xb182	; 0xb182 <get_emarald_map>
    b22c:	40 e0       	ldi	r20, 0x00	; 0
    b22e:	bc 01       	movw	r22, r24
    b230:	88 e0       	ldi	r24, 0x08	; 8
    b232:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    b236:	01 e0       	ldi	r16, 0x01	; 1
    b238:	21 e0       	ldi	r18, 0x01	; 1
    b23a:	40 e3       	ldi	r20, 0x30	; 48
    b23c:	60 e7       	ldi	r22, 0x70	; 112
    b23e:	88 e0       	ldi	r24, 0x08	; 8
    b240:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    b244:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    b246:	81 e0       	ldi	r24, 0x01	; 1
    b248:	90 e0       	ldi	r25, 0x00	; 0
    b24a:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    b24e:	84 e3       	ldi	r24, 0x34	; 52
    b250:	9e e0       	ldi	r25, 0x0E	; 14
    b252:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    b256:	40 e0       	ldi	r20, 0x00	; 0
    b258:	bc 01       	movw	r22, r24
    b25a:	80 e0       	ldi	r24, 0x00	; 0
    b25c:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    b260:	02 e0       	ldi	r16, 0x02	; 2
    b262:	24 e0       	ldi	r18, 0x04	; 4
    b264:	48 e6       	ldi	r20, 0x68	; 104
    b266:	68 e6       	ldi	r22, 0x68	; 104
    b268:	80 e0       	ldi	r24, 0x00	; 0
    b26a:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
		frame_counter++;
    b26e:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    b270:	8d 2d       	mov	r24, r13
    b272:	8f 70       	andi	r24, 0x0F	; 15
    b274:	29 f4       	brne	.+10     	; 0xb280 <planet_transition+0xc0>
    b276:	90 91 b3 0c 	lds	r25, 0x0CB3
    b27a:	9e 0d       	add	r25, r14
    b27c:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    b280:	6f 2d       	mov	r22, r15
    b282:	81 2f       	mov	r24, r17
    b284:	0e 94 8f 58 	call	0xb11e	; 0xb11e <animate_particles>
		LBRotateSprites();
    b288:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    b28c:	8f ef       	ldi	r24, 0xFF	; 255
    b28e:	d8 12       	cpse	r13, r24
    b290:	da cf       	rjmp	.-76     	; 0xb246 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    b292:	82 e0       	ldi	r24, 0x02	; 2
    b294:	80 93 b8 0d 	sts	0x0DB8, r24
	ClearVram();
    b298:	0e 94 ac 34 	call	0x6958	; 0x6958 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b29c:	64 e1       	ldi	r22, 0x14	; 20
    b29e:	80 e0       	ldi	r24, 0x00	; 0
    b2a0:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
	LBRotateSprites();
    b2a4:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	fade_through();
    b2a8:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <fade_through>
	game.level_score = 0;
    b2ac:	10 92 b1 0d 	sts	0x0DB1, r1
    b2b0:	10 92 b0 0d 	sts	0x0DB0, r1
	load_level(index, true);
    b2b4:	61 e0       	ldi	r22, 0x01	; 1
    b2b6:	8c 2d       	mov	r24, r12
    b2b8:	0e 94 f9 56 	call	0xadf2	; 0xadf2 <load_level>
	init_player_state();
    b2bc:	0e 94 41 46 	call	0x8c82	; 0x8c82 <init_player_state>
	init_enemy_state();
}
    b2c0:	0f 90       	pop	r0
    b2c2:	df 91       	pop	r29
    b2c4:	cf 91       	pop	r28
    b2c6:	1f 91       	pop	r17
    b2c8:	0f 91       	pop	r16
    b2ca:	ff 90       	pop	r15
    b2cc:	ef 90       	pop	r14
    b2ce:	df 90       	pop	r13
    b2d0:	cf 90       	pop	r12
	LBRotateSprites();
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    b2d2:	0c 94 2d 46 	jmp	0x8c5a	; 0x8c5a <init_enemy_state>

0000b2d6 <intro>:
}


void intro()
{
    b2d6:	0f 93       	push	r16
	fade_through();
    b2d8:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <fade_through>
	game.lives = LIVES;
    b2dc:	e6 ea       	ldi	r30, 0xA6	; 166
    b2de:	fd e0       	ldi	r31, 0x0D	; 13
    b2e0:	85 e0       	ldi	r24, 0x05	; 5
    b2e2:	81 8b       	std	Z+17, r24	; 0x11
	game.score = 0;
    b2e4:	11 86       	std	Z+9, r1	; 0x09
    b2e6:	10 86       	std	Z+8, r1	; 0x08
	game.level_score = 0;
    b2e8:	13 86       	std	Z+11, r1	; 0x0b
    b2ea:	12 86       	std	Z+10, r1	; 0x0a
	game.time = 0;
    b2ec:	15 86       	std	Z+13, r1	; 0x0d
    b2ee:	14 86       	std	Z+12, r1	; 0x0c
	StartSong(planetsong);
    b2f0:	8d e4       	ldi	r24, 0x4D	; 77
    b2f2:	92 e1       	ldi	r25, 0x12	; 18
    b2f4:	0e 94 a0 37 	call	0x6f40	; 0x6f40 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    b2f8:	40 e0       	ldi	r20, 0x00	; 0
    b2fa:	69 ec       	ldi	r22, 0xC9	; 201
    b2fc:	7d e2       	ldi	r23, 0x2D	; 45
    b2fe:	80 e0       	ldi	r24, 0x00	; 0
    b300:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    b304:	01 e0       	ldi	r16, 0x01	; 1
    b306:	21 e0       	ldi	r18, 0x01	; 1
    b308:	40 e3       	ldi	r20, 0x30	; 48
    b30a:	60 e5       	ldi	r22, 0x50	; 80
    b30c:	80 e0       	ldi	r24, 0x00	; 0
    b30e:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    b312:	40 e0       	ldi	r20, 0x00	; 0
    b314:	6c ec       	ldi	r22, 0xCC	; 204
    b316:	7d e2       	ldi	r23, 0x2D	; 45
    b318:	81 e0       	ldi	r24, 0x01	; 1
    b31a:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    b31e:	21 e0       	ldi	r18, 0x01	; 1
    b320:	40 e3       	ldi	r20, 0x30	; 48
    b322:	60 e6       	ldi	r22, 0x60	; 96
    b324:	81 e0       	ldi	r24, 0x01	; 1
    b326:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    b32a:	40 e0       	ldi	r20, 0x00	; 0
    b32c:	66 ec       	ldi	r22, 0xC6	; 198
    b32e:	7d e2       	ldi	r23, 0x2D	; 45
    b330:	82 e0       	ldi	r24, 0x02	; 2
    b332:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    b336:	21 e0       	ldi	r18, 0x01	; 1
    b338:	40 e3       	ldi	r20, 0x30	; 48
    b33a:	60 e7       	ldi	r22, 0x70	; 112
    b33c:	82 e0       	ldi	r24, 0x02	; 2
    b33e:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    b342:	40 e0       	ldi	r20, 0x00	; 0
    b344:	63 ec       	ldi	r22, 0xC3	; 195
    b346:	7d e2       	ldi	r23, 0x2D	; 45
    b348:	83 e0       	ldi	r24, 0x03	; 3
    b34a:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    b34e:	21 e0       	ldi	r18, 0x01	; 1
    b350:	40 e3       	ldi	r20, 0x30	; 48
    b352:	60 e8       	ldi	r22, 0x80	; 128
    b354:	83 e0       	ldi	r24, 0x03	; 3
    b356:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    b35a:	40 e0       	ldi	r20, 0x00	; 0
    b35c:	60 ec       	ldi	r22, 0xC0	; 192
    b35e:	7d e2       	ldi	r23, 0x2D	; 45
    b360:	84 e0       	ldi	r24, 0x04	; 4
    b362:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    b366:	21 e0       	ldi	r18, 0x01	; 1
    b368:	40 e3       	ldi	r20, 0x30	; 48
    b36a:	60 e9       	ldi	r22, 0x90	; 144
    b36c:	84 e0       	ldi	r24, 0x04	; 4
    b36e:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	LBRotateSprites();
    b372:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    b376:	6c e0       	ldi	r22, 0x0C	; 12
    b378:	8d e4       	ldi	r24, 0x4D	; 77
    b37a:	9a e0       	ldi	r25, 0x0A	; 10
    b37c:	0e 94 29 58 	call	0xb052	; 0xb052 <stream_dialogue>
	LBWaitSeconds(1);
    b380:	81 e0       	ldi	r24, 0x01	; 1
    b382:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    b386:	07 ec       	ldi	r16, 0xC7	; 199
    b388:	2d ef       	ldi	r18, 0xFD	; 253
    b38a:	4c e1       	ldi	r20, 0x1C	; 28
    b38c:	61 e0       	ldi	r22, 0x01	; 1
    b38e:	80 e0       	ldi	r24, 0x00	; 0
    b390:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <planet_transition>
}
    b394:	0f 91       	pop	r16
    b396:	08 95       	ret

0000b398 <load_splash>:

void load_splash()
{
	fade_through();
    b398:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <fade_through>
	Screen.scrollX = 0;
    b39c:	ef ea       	ldi	r30, 0xAF	; 175
    b39e:	fc e0       	ldi	r31, 0x0C	; 12
    b3a0:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    b3a2:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    b3a4:	80 e2       	ldi	r24, 0x20	; 32
    b3a6:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    b3a8:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    b3aa:	e6 ea       	ldi	r30, 0xA6	; 166
    b3ac:	fd e0       	ldi	r31, 0x0D	; 13
    b3ae:	12 8a       	std	Z+18, r1	; 0x12
	game.selection = START_SELECTED;
    b3b0:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b3b2:	64 e1       	ldi	r22, 0x14	; 20
    b3b4:	80 e0       	ldi	r24, 0x00	; 0
    b3b6:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
	LBRotateSprites();
    b3ba:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    b3be:	4a e7       	ldi	r20, 0x7A	; 122
    b3c0:	5b e0       	ldi	r21, 0x0B	; 11
    b3c2:	6f e0       	ldi	r22, 0x0F	; 15
    b3c4:	88 e0       	ldi	r24, 0x08	; 8
    b3c6:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    b3ca:	4e e6       	ldi	r20, 0x6E	; 110
    b3cc:	5b e0       	ldi	r21, 0x0B	; 11
    b3ce:	60 e1       	ldi	r22, 0x10	; 16
    b3d0:	88 e0       	ldi	r24, 0x08	; 8
    b3d2:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    b3d6:	48 e9       	ldi	r20, 0x98	; 152
    b3d8:	5b e0       	ldi	r21, 0x0B	; 11
    b3da:	65 e1       	ldi	r22, 0x15	; 21
    b3dc:	84 e0       	ldi	r24, 0x04	; 4
    b3de:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    b3e2:	40 e8       	ldi	r20, 0x80	; 128
    b3e4:	5b e0       	ldi	r21, 0x0B	; 11
    b3e6:	6a e1       	ldi	r22, 0x1A	; 26
    b3e8:	83 e0       	ldi	r24, 0x03	; 3
    b3ea:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    b3ee:	43 e9       	ldi	r20, 0x93	; 147
    b3f0:	5e e4       	ldi	r21, 0x4E	; 78
    b3f2:	65 e0       	ldi	r22, 0x05	; 5
    b3f4:	86 e0       	ldi	r24, 0x06	; 6
    b3f6:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    b3fa:	40 e0       	ldi	r20, 0x00	; 0
    b3fc:	61 ee       	ldi	r22, 0xE1	; 225
    b3fe:	7d e2       	ldi	r23, 0x2D	; 45
    b400:	80 e0       	ldi	r24, 0x00	; 0
    b402:	0c 94 44 45 	jmp	0x8a88	; 0x8a88 <LBMapSprite>

0000b406 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    b406:	2f 92       	push	r2
    b408:	3f 92       	push	r3
    b40a:	5f 92       	push	r5
    b40c:	6f 92       	push	r6
    b40e:	7f 92       	push	r7
    b410:	8f 92       	push	r8
    b412:	9f 92       	push	r9
    b414:	af 92       	push	r10
    b416:	bf 92       	push	r11
    b418:	cf 92       	push	r12
    b41a:	df 92       	push	r13
    b41c:	ef 92       	push	r14
    b41e:	ff 92       	push	r15
    b420:	0f 93       	push	r16
    b422:	1f 93       	push	r17
    b424:	cf 93       	push	r28
    b426:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    b428:	81 e0       	ldi	r24, 0x01	; 1
    b42a:	80 93 b8 0d 	sts	0x0DB8, r24
	game.high_score_index = -1;
    b42e:	8f ef       	ldi	r24, 0xFF	; 255
    b430:	80 93 b6 0d 	sts	0x0DB6, r24
	fade_through();
    b434:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <fade_through>
	Screen.scrollX = 0;
    b438:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b43c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    b440:	80 e2       	ldi	r24, 0x20	; 32
    b442:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    b446:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    b44a:	86 e8       	ldi	r24, 0x86	; 134
    b44c:	9d e0       	ldi	r25, 0x0D	; 13
    b44e:	0e 94 3f 48 	call	0x907e	; 0x907e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    b452:	4e e6       	ldi	r20, 0x6E	; 110
    b454:	5b e0       	ldi	r21, 0x0B	; 11
    b456:	63 e0       	ldi	r22, 0x03	; 3
    b458:	89 e0       	ldi	r24, 0x09	; 9
    b45a:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    b45e:	40 e0       	ldi	r20, 0x00	; 0
    b460:	69 ec       	ldi	r22, 0xC9	; 201
    b462:	7d e2       	ldi	r23, 0x2D	; 45
    b464:	80 e0       	ldi	r24, 0x00	; 0
    b466:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    b46a:	40 e0       	ldi	r20, 0x00	; 0
    b46c:	6c ec       	ldi	r22, 0xCC	; 204
    b46e:	7d e2       	ldi	r23, 0x2D	; 45
    b470:	81 e0       	ldi	r24, 0x01	; 1
    b472:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    b476:	01 e0       	ldi	r16, 0x01	; 1
    b478:	21 e0       	ldi	r18, 0x01	; 1
    b47a:	48 e1       	ldi	r20, 0x18	; 24
    b47c:	68 e3       	ldi	r22, 0x38	; 56
    b47e:	80 e0       	ldi	r24, 0x00	; 0
    b480:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    b484:	21 e0       	ldi	r18, 0x01	; 1
    b486:	48 e1       	ldi	r20, 0x18	; 24
    b488:	68 ea       	ldi	r22, 0xA8	; 168
    b48a:	81 e0       	ldi	r24, 0x01	; 1
    b48c:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
    b490:	88 e8       	ldi	r24, 0x88	; 136
    b492:	a8 2e       	mov	r10, r24
    b494:	8d e0       	ldi	r24, 0x0D	; 13
    b496:	b8 2e       	mov	r11, r24
    b498:	99 e8       	ldi	r25, 0x89	; 137
    b49a:	c9 2e       	mov	r12, r25
    b49c:	9d e0       	ldi	r25, 0x0D	; 13
    b49e:	d9 2e       	mov	r13, r25
    b4a0:	2a e8       	ldi	r18, 0x8A	; 138
    b4a2:	82 2e       	mov	r8, r18
    b4a4:	2d e0       	ldi	r18, 0x0D	; 13
    b4a6:	92 2e       	mov	r9, r18
    b4a8:	74 01       	movw	r14, r8
    b4aa:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    b4ac:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    b4ae:	35 e0       	ldi	r19, 0x05	; 5
    b4b0:	53 2e       	mov	r5, r19
    b4b2:	41 ea       	ldi	r20, 0xA1	; 161
    b4b4:	64 2e       	mov	r6, r20
    b4b6:	4d e0       	ldi	r20, 0x0D	; 13
    b4b8:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    b4ba:	11 e4       	ldi	r17, 0x41	; 65
    b4bc:	0e 2d       	mov	r16, r14
    b4be:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    b4c0:	80 2f       	mov	r24, r16
    b4c2:	65 2d       	mov	r22, r5
    b4c4:	0e 94 7e 62 	call	0xc4fc	; 0xc4fc <__udivmodqi4>
    b4c8:	41 e0       	ldi	r20, 0x01	; 1
    b4ca:	48 0f       	add	r20, r24
    b4cc:	20 e0       	ldi	r18, 0x00	; 0
    b4ce:	6c 2f       	mov	r22, r28
    b4d0:	89 e0       	ldi	r24, 0x09	; 9
    b4d2:	0e 94 8f 44 	call	0x891e	; 0x891e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    b4d6:	40 e2       	ldi	r20, 0x20	; 32
    b4d8:	6c 2f       	mov	r22, r28
    b4da:	8a e0       	ldi	r24, 0x0A	; 10
    b4dc:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    b4e0:	f5 01       	movw	r30, r10
    b4e2:	40 81       	ld	r20, Z
    b4e4:	6c 2f       	mov	r22, r28
    b4e6:	8b e0       	ldi	r24, 0x0B	; 11
    b4e8:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    b4ec:	f6 01       	movw	r30, r12
    b4ee:	40 81       	ld	r20, Z
    b4f0:	6c 2f       	mov	r22, r28
    b4f2:	8c e0       	ldi	r24, 0x0C	; 12
    b4f4:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    b4f8:	f7 01       	movw	r30, r14
    b4fa:	40 81       	ld	r20, Z
    b4fc:	6c 2f       	mov	r22, r28
    b4fe:	8d e0       	ldi	r24, 0x0D	; 13
    b500:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    b504:	40 e2       	ldi	r20, 0x20	; 32
    b506:	6c 2f       	mov	r22, r28
    b508:	8e e0       	ldi	r24, 0x0E	; 14
    b50a:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    b50e:	f7 01       	movw	r30, r14
    b510:	21 80       	ldd	r2, Z+1	; 0x01
    b512:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    b514:	21 e0       	ldi	r18, 0x01	; 1
    b516:	a1 01       	movw	r20, r2
    b518:	6c 2f       	mov	r22, r28
    b51a:	83 e1       	ldi	r24, 0x13	; 19
    b51c:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    b520:	20 91 ae 0d 	lds	r18, 0x0DAE
    b524:	30 91 af 0d 	lds	r19, 0x0DAF
    b528:	22 16       	cp	r2, r18
    b52a:	33 06       	cpc	r3, r19
    b52c:	08 f0       	brcs	.+2      	; 0xb530 <load_high_scores+0x12a>
    b52e:	55 c0       	rjmp	.+170    	; 0xb5da <load_high_scores+0x1d4>
    b530:	80 91 b6 0d 	lds	r24, 0x0DB6
    b534:	8f 3f       	cpi	r24, 0xFF	; 255
    b536:	09 f0       	breq	.+2      	; 0xb53a <load_high_scores+0x134>
    b538:	50 c0       	rjmp	.+160    	; 0xb5da <load_high_scores+0x1d4>
    b53a:	a1 ea       	ldi	r26, 0xA1	; 161
    b53c:	bd e0       	ldi	r27, 0x0D	; 13
    b53e:	cd 01       	movw	r24, r26
    b540:	05 97       	sbiw	r24, 0x05	; 5
    b542:	4e e1       	ldi	r20, 0x1E	; 30
    b544:	48 0f       	add	r20, r24
    b546:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    b548:	04 17       	cp	r16, r20
    b54a:	40 f4       	brcc	.+16     	; 0xb55c <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    b54c:	fc 01       	movw	r30, r24
    b54e:	45 2d       	mov	r20, r5
    b550:	01 90       	ld	r0, Z+
    b552:	0d 92       	st	X+, r0
    b554:	4a 95       	dec	r20
    b556:	e1 f7       	brne	.-8      	; 0xb550 <load_high_scores+0x14a>
    b558:	dc 01       	movw	r26, r24
    b55a:	f1 cf       	rjmp	.-30     	; 0xb53e <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    b55c:	f5 01       	movw	r30, r10
    b55e:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    b560:	f6 01       	movw	r30, r12
    b562:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    b564:	f7 01       	movw	r30, r14
    b566:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    b568:	32 83       	std	Z+2, r19	; 0x02
    b56a:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    b56c:	f5 01       	movw	r30, r10
    b56e:	40 81       	ld	r20, Z
    b570:	6c 2f       	mov	r22, r28
    b572:	8b e0       	ldi	r24, 0x0B	; 11
    b574:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    b578:	f6 01       	movw	r30, r12
    b57a:	40 81       	ld	r20, Z
    b57c:	6c 2f       	mov	r22, r28
    b57e:	8c e0       	ldi	r24, 0x0C	; 12
    b580:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    b584:	f7 01       	movw	r30, r14
    b586:	40 81       	ld	r20, Z
    b588:	6c 2f       	mov	r22, r28
    b58a:	8d e0       	ldi	r24, 0x0D	; 13
    b58c:	0e 94 53 44 	call	0x88a6	; 0x88a6 <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    b590:	40 91 ae 0d 	lds	r20, 0x0DAE
    b594:	50 91 af 0d 	lds	r21, 0x0DAF
    b598:	21 e0       	ldi	r18, 0x01	; 1
    b59a:	6c 2f       	mov	r22, r28
    b59c:	83 e1       	ldi	r24, 0x13	; 19
    b59e:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
			game.high_score_index = i;
    b5a2:	00 93 b6 0d 	sts	0x0DB6, r16
			LBMapSprite(2, map_down_arrow, 0);
    b5a6:	40 e0       	ldi	r20, 0x00	; 0
    b5a8:	6e ed       	ldi	r22, 0xDE	; 222
    b5aa:	7d e2       	ldi	r23, 0x2D	; 45
    b5ac:	82 e0       	ldi	r24, 0x02	; 2
    b5ae:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    b5b2:	40 e0       	ldi	r20, 0x00	; 0
    b5b4:	6b ed       	ldi	r22, 0xDB	; 219
    b5b6:	7d e2       	ldi	r23, 0x2D	; 45
    b5b8:	83 e0       	ldi	r24, 0x03	; 3
    b5ba:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    b5be:	01 e0       	ldi	r16, 0x01	; 1
    b5c0:	21 e0       	ldi	r18, 0x01	; 1
    b5c2:	4d 2f       	mov	r20, r29
    b5c4:	68 e5       	ldi	r22, 0x58	; 88
    b5c6:	82 e0       	ldi	r24, 0x02	; 2
    b5c8:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    b5cc:	21 e0       	ldi	r18, 0x01	; 1
    b5ce:	40 e1       	ldi	r20, 0x10	; 16
    b5d0:	4d 0f       	add	r20, r29
    b5d2:	68 e5       	ldi	r22, 0x58	; 88
    b5d4:	83 e0       	ldi	r24, 0x03	; 3
    b5d6:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
		}
		
		ypos += 2;
    b5da:	ce 5f       	subi	r28, 0xFE	; 254
    b5dc:	f5 e0       	ldi	r31, 0x05	; 5
    b5de:	af 0e       	add	r10, r31
    b5e0:	b1 1c       	adc	r11, r1
    b5e2:	85 e0       	ldi	r24, 0x05	; 5
    b5e4:	c8 0e       	add	r12, r24
    b5e6:	d1 1c       	adc	r13, r1
    b5e8:	e5 e0       	ldi	r30, 0x05	; 5
    b5ea:	ee 0e       	add	r14, r30
    b5ec:	f1 1c       	adc	r15, r1
    b5ee:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    b5f0:	c3 31       	cpi	r28, 0x13	; 19
    b5f2:	09 f0       	breq	.+2      	; 0xb5f6 <load_high_scores+0x1f0>
    b5f4:	63 cf       	rjmp	.-314    	; 0xb4bc <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    b5f6:	45 e4       	ldi	r20, 0x45	; 69
    b5f8:	5b e0       	ldi	r21, 0x0B	; 11
    b5fa:	66 e1       	ldi	r22, 0x16	; 22
    b5fc:	89 e0       	ldi	r24, 0x09	; 9
}
    b5fe:	df 91       	pop	r29
    b600:	cf 91       	pop	r28
    b602:	1f 91       	pop	r17
    b604:	0f 91       	pop	r16
    b606:	ff 90       	pop	r15
    b608:	ef 90       	pop	r14
    b60a:	df 90       	pop	r13
    b60c:	cf 90       	pop	r12
    b60e:	bf 90       	pop	r11
    b610:	af 90       	pop	r10
    b612:	9f 90       	pop	r9
    b614:	8f 90       	pop	r8
    b616:	7f 90       	pop	r7
    b618:	6f 90       	pop	r6
    b61a:	5f 90       	pop	r5
    b61c:	3f 90       	pop	r3
    b61e:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    b620:	0c 94 73 44 	jmp	0x88e6	; 0x88e6 <LBPrint>

0000b624 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b624:	64 e1       	ldi	r22, 0x14	; 20
    b626:	80 e0       	ldi	r24, 0x00	; 0
    b628:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
	LBRotateSprites();
    b62c:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	init_player_state();
    b630:	0e 94 41 46 	call	0x8c82	; 0x8c82 <init_player_state>
	init_enemy_state();
    b634:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <init_enemy_state>
	StopSong();
    b638:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <StopSong>
	load_high_scores();
    b63c:	0c 94 03 5a 	jmp	0xb406	; 0xb406 <load_high_scores>

0000b640 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    b640:	0f 93       	push	r16
    b642:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    b644:	80 91 9e 0f 	lds	r24, 0x0F9E
    b648:	c0 91 bf 0d 	lds	r28, 0x0DBF
    b64c:	85 ff       	sbrs	r24, 5
    b64e:	06 c0       	rjmp	.+12     	; 0xb65c <update_splash+0x1c>
    b650:	c1 11       	cpse	r28, r1
    b652:	04 c0       	rjmp	.+8      	; 0xb65c <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    b654:	81 e0       	ldi	r24, 0x01	; 1
    b656:	80 93 bf 0d 	sts	0x0DBF, r24
    b65a:	06 c0       	rjmp	.+12     	; 0xb668 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    b65c:	84 ff       	sbrs	r24, 4
    b65e:	0a c0       	rjmp	.+20     	; 0xb674 <update_splash+0x34>
    b660:	c1 30       	cpi	r28, 0x01	; 1
    b662:	41 f4       	brne	.+16     	; 0xb674 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    b664:	10 92 bf 0d 	sts	0x0DBF, r1
		SFX_NAVIGATE;
    b668:	41 e0       	ldi	r20, 0x01	; 1
    b66a:	6f ef       	ldi	r22, 0xFF	; 255
    b66c:	82 e0       	ldi	r24, 0x02	; 2
    b66e:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
    b672:	1c c0       	rjmp	.+56     	; 0xb6ac <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    b674:	8e e9       	ldi	r24, 0x9E	; 158
    b676:	9f e0       	ldi	r25, 0x0F	; 15
    b678:	0e 94 1f 58 	call	0xb03e	; 0xb03e <select_pressed>
    b67c:	88 23       	and	r24, r24
    b67e:	b1 f0       	breq	.+44     	; 0xb6ac <update_splash+0x6c>
    b680:	c1 11       	cpse	r28, r1
    b682:	09 c0       	rjmp	.+18     	; 0xb696 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    b684:	41 e0       	ldi	r20, 0x01	; 1
    b686:	6f ef       	ldi	r22, 0xFF	; 255
    b688:	82 e0       	ldi	r24, 0x02	; 2
    b68a:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    b68e:	cf 91       	pop	r28
    b690:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    b692:	0c 94 6b 59 	jmp	0xb2d6	; 0xb2d6 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    b696:	c1 30       	cpi	r28, 0x01	; 1
    b698:	49 f4       	brne	.+18     	; 0xb6ac <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    b69a:	41 e0       	ldi	r20, 0x01	; 1
    b69c:	6f ef       	ldi	r22, 0xFF	; 255
    b69e:	82 e0       	ldi	r24, 0x02	; 2
    b6a0:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    b6a4:	cf 91       	pop	r28
    b6a6:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    b6a8:	0c 94 03 5a 	jmp	0xb406	; 0xb406 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    b6ac:	80 91 bf 0d 	lds	r24, 0x0DBF
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    b6b0:	01 e0       	ldi	r16, 0x01	; 1
    b6b2:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    b6b4:	81 11       	cpse	r24, r1
    b6b6:	03 c0       	rjmp	.+6      	; 0xb6be <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    b6b8:	48 e7       	ldi	r20, 0x78	; 120
    b6ba:	68 e3       	ldi	r22, 0x38	; 56
    b6bc:	03 c0       	rjmp	.+6      	; 0xb6c4 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    b6be:	40 e8       	ldi	r20, 0x80	; 128
    b6c0:	68 e3       	ldi	r22, 0x38	; 56
    b6c2:	80 e0       	ldi	r24, 0x00	; 0
    b6c4:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
	}
}
    b6c8:	cf 91       	pop	r28
    b6ca:	0f 91       	pop	r16
    b6cc:	08 95       	ret

0000b6ce <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    b6ce:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    b6d0:	80 91 9e 0f 	lds	r24, 0x0F9E
    b6d4:	90 91 9f 0f 	lds	r25, 0x0F9F
    b6d8:	91 ff       	sbrs	r25, 1
    b6da:	12 c0       	rjmp	.+36     	; 0xb700 <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    b6dc:	41 e0       	ldi	r20, 0x01	; 1
    b6de:	6f ef       	ldi	r22, 0xFF	; 255
    b6e0:	82 e0       	ldi	r24, 0x02	; 2
    b6e2:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
		game.high_score_index = -1;
    b6e6:	8f ef       	ldi	r24, 0xFF	; 255
    b6e8:	80 93 b6 0d 	sts	0x0DB6, r24
		game.score = 0;
    b6ec:	10 92 af 0d 	sts	0x0DAF, r1
    b6f0:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b6f4:	86 e8       	ldi	r24, 0x86	; 134
    b6f6:	9d e0       	ldi	r25, 0x0D	; 13
    b6f8:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    b6fc:	0e 94 cc 59 	call	0xb398	; 0xb398 <load_splash>
	}
	
	if (game.high_score_index != -1)
    b700:	30 91 b6 0d 	lds	r19, 0x0DB6
    b704:	3f 3f       	cpi	r19, 0xFF	; 255
    b706:	09 f4       	brne	.+2      	; 0xb70a <update_high_scores+0x3c>
    b708:	7e c0       	rjmp	.+252    	; 0xb806 <update_high_scores+0x138>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    b70a:	20 91 9e 0f 	lds	r18, 0x0F9E
    b70e:	27 ff       	sbrs	r18, 7
    b710:	1e c0       	rjmp	.+60     	; 0xb74e <update_high_scores+0x80>
    b712:	83 2f       	mov	r24, r19
    b714:	65 e0       	ldi	r22, 0x05	; 5
    b716:	0e 94 8a 62 	call	0xc514	; 0xc514 <__divmodqi4>
    b71a:	92 30       	cpi	r25, 0x02	; 2
    b71c:	c1 f0       	breq	.+48     	; 0xb74e <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    b71e:	41 e0       	ldi	r20, 0x01	; 1
    b720:	6f ef       	ldi	r22, 0xFF	; 255
    b722:	82 e0       	ldi	r24, 0x02	; 2
    b724:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
			game.high_score_index++;
    b728:	80 91 b6 0d 	lds	r24, 0x0DB6
    b72c:	8f 5f       	subi	r24, 0xFF	; 255
    b72e:	80 93 b6 0d 	sts	0x0DB6, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    b732:	60 91 b7 0f 	lds	r22, 0x0FB7
    b736:	68 5f       	subi	r22, 0xF8	; 248
    b738:	01 e0       	ldi	r16, 0x01	; 1
    b73a:	21 e0       	ldi	r18, 0x01	; 1
    b73c:	40 91 b8 0f 	lds	r20, 0x0FB8
    b740:	82 e0       	ldi	r24, 0x02	; 2
    b742:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    b746:	60 91 bb 0f 	lds	r22, 0x0FBB
    b74a:	68 5f       	subi	r22, 0xF8	; 248
    b74c:	1f c0       	rjmp	.+62     	; 0xb78c <update_high_scores+0xbe>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    b74e:	26 ff       	sbrs	r18, 6
    b750:	24 c0       	rjmp	.+72     	; 0xb79a <update_high_scores+0xcc>
    b752:	83 2f       	mov	r24, r19
    b754:	65 e0       	ldi	r22, 0x05	; 5
    b756:	0e 94 8a 62 	call	0xc514	; 0xc514 <__divmodqi4>
    b75a:	99 23       	and	r25, r25
    b75c:	f1 f0       	breq	.+60     	; 0xb79a <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    b75e:	41 e0       	ldi	r20, 0x01	; 1
    b760:	6f ef       	ldi	r22, 0xFF	; 255
    b762:	82 e0       	ldi	r24, 0x02	; 2
    b764:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
			game.high_score_index--;
    b768:	80 91 b6 0d 	lds	r24, 0x0DB6
    b76c:	81 50       	subi	r24, 0x01	; 1
    b76e:	80 93 b6 0d 	sts	0x0DB6, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    b772:	60 91 b7 0f 	lds	r22, 0x0FB7
    b776:	68 50       	subi	r22, 0x08	; 8
    b778:	01 e0       	ldi	r16, 0x01	; 1
    b77a:	21 e0       	ldi	r18, 0x01	; 1
    b77c:	40 91 b8 0f 	lds	r20, 0x0FB8
    b780:	82 e0       	ldi	r24, 0x02	; 2
    b782:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    b786:	60 91 bb 0f 	lds	r22, 0x0FBB
    b78a:	68 50       	subi	r22, 0x08	; 8
    b78c:	21 e0       	ldi	r18, 0x01	; 1
    b78e:	40 91 bc 0f 	lds	r20, 0x0FBC
    b792:	83 e0       	ldi	r24, 0x03	; 3
    b794:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
    b798:	36 c0       	rjmp	.+108    	; 0xb806 <update_high_scores+0x138>
		}
		else if (game.joypadState.pressed & BTN_UP)
    b79a:	24 ff       	sbrs	r18, 4
    b79c:	13 c0       	rjmp	.+38     	; 0xb7c4 <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    b79e:	41 e0       	ldi	r20, 0x01	; 1
    b7a0:	6f ef       	ldi	r22, 0xFF	; 255
    b7a2:	82 e0       	ldi	r24, 0x02	; 2
    b7a4:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    b7a8:	80 91 b6 0d 	lds	r24, 0x0DB6
    b7ac:	e8 2f       	mov	r30, r24
    b7ae:	ff 27       	eor	r31, r31
    b7b0:	e7 fd       	sbrc	r30, 7
    b7b2:	f0 95       	com	r31
    b7b4:	ea 57       	subi	r30, 0x7A	; 122
    b7b6:	f2 4f       	sbci	r31, 0xF2	; 242
    b7b8:	92 81       	ldd	r25, Z+2	; 0x02
    b7ba:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    b7bc:	91 34       	cpi	r25, 0x41	; 65
    b7be:	b0 f4       	brcc	.+44     	; 0xb7ec <update_high_scores+0x11e>
    b7c0:	91 e4       	ldi	r25, 0x41	; 65
    b7c2:	14 c0       	rjmp	.+40     	; 0xb7ec <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    b7c4:	25 ff       	sbrs	r18, 5
    b7c6:	1f c0       	rjmp	.+62     	; 0xb806 <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    b7c8:	41 e0       	ldi	r20, 0x01	; 1
    b7ca:	6f ef       	ldi	r22, 0xFF	; 255
    b7cc:	82 e0       	ldi	r24, 0x02	; 2
    b7ce:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    b7d2:	80 91 b6 0d 	lds	r24, 0x0DB6
    b7d6:	e8 2f       	mov	r30, r24
    b7d8:	ff 27       	eor	r31, r31
    b7da:	e7 fd       	sbrc	r30, 7
    b7dc:	f0 95       	com	r31
    b7de:	ea 57       	subi	r30, 0x7A	; 122
    b7e0:	f2 4f       	sbci	r31, 0xF2	; 242
    b7e2:	92 81       	ldd	r25, Z+2	; 0x02
    b7e4:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    b7e6:	9b 35       	cpi	r25, 0x5B	; 91
    b7e8:	08 f0       	brcs	.+2      	; 0xb7ec <update_high_scores+0x11e>
    b7ea:	9a e5       	ldi	r25, 0x5A	; 90
    b7ec:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    b7ee:	65 e0       	ldi	r22, 0x05	; 5
    b7f0:	0e 94 8a 62 	call	0xc514	; 0xc514 <__divmodqi4>
    b7f4:	68 2f       	mov	r22, r24
    b7f6:	66 0f       	add	r22, r22
    b7f8:	69 5f       	subi	r22, 0xF9	; 249
    b7fa:	42 81       	ldd	r20, Z+2	; 0x02
    b7fc:	8b e0       	ldi	r24, 0x0B	; 11
    b7fe:	89 0f       	add	r24, r25
		}
	}
}
    b800:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    b802:	0c 94 53 44 	jmp	0x88a6	; 0x88a6 <LBPrintChar>
		}
	}
}
    b806:	0f 91       	pop	r16
    b808:	08 95       	ret

0000b80a <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    b80a:	2f 92       	push	r2
    b80c:	3f 92       	push	r3
    b80e:	4f 92       	push	r4
    b810:	5f 92       	push	r5
    b812:	6f 92       	push	r6
    b814:	7f 92       	push	r7
    b816:	8f 92       	push	r8
    b818:	9f 92       	push	r9
    b81a:	af 92       	push	r10
    b81c:	bf 92       	push	r11
    b81e:	cf 92       	push	r12
    b820:	df 92       	push	r13
    b822:	ef 92       	push	r14
    b824:	ff 92       	push	r15
    b826:	0f 93       	push	r16
    b828:	1f 93       	push	r17
    b82a:	cf 93       	push	r28
    b82c:	df 93       	push	r29
    b82e:	7c 01       	movw	r14, r24
    b830:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    b832:	c0 91 b2 0c 	lds	r28, 0x0CB2
    b836:	c6 95       	lsr	r28
    b838:	c6 95       	lsr	r28
    b83a:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    b83c:	00 91 b3 0c 	lds	r16, 0x0CB3
    b840:	06 95       	lsr	r16
    b842:	06 95       	lsr	r16
    b844:	06 95       	lsr	r16
	u16 tally = game.score;
    b846:	a0 90 ae 0d 	lds	r10, 0x0DAE
    b84a:	b0 90 af 0d 	lds	r11, 0x0DAF
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    b84e:	64 e1       	ldi	r22, 0x14	; 20
    b850:	80 e0       	ldi	r24, 0x00	; 0
    b852:	0e 94 03 58 	call	0xb006	; 0xb006 <hide_sprites>
	LBRotateSprites();
    b856:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	
	StopSong();
    b85a:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    b85e:	10 e0       	ldi	r17, 0x00	; 0
    b860:	d0 e0       	ldi	r29, 0x00	; 0
    b862:	c8 01       	movw	r24, r16
    b864:	06 96       	adiw	r24, 0x06	; 6
    b866:	2e e1       	ldi	r18, 0x1E	; 30
    b868:	82 2e       	mov	r8, r18
    b86a:	91 2c       	mov	r9, r1
    b86c:	b4 01       	movw	r22, r8
    b86e:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    b872:	9e 01       	movw	r18, r28
    b874:	28 5f       	subi	r18, 0xF8	; 248
    b876:	3f 4f       	sbci	r19, 0xFF	; 255
    b878:	4a e0       	ldi	r20, 0x0A	; 10
    b87a:	5e e4       	ldi	r21, 0x4E	; 78
    b87c:	68 2f       	mov	r22, r24
    b87e:	82 2f       	mov	r24, r18
    b880:	8f 71       	andi	r24, 0x1F	; 31
    b882:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    b886:	c8 01       	movw	r24, r16
    b888:	07 96       	adiw	r24, 0x07	; 7
    b88a:	b4 01       	movw	r22, r8
    b88c:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    b890:	9e 01       	movw	r18, r28
    b892:	26 5f       	subi	r18, 0xF6	; 246
    b894:	3f 4f       	sbci	r19, 0xFF	; 255
    b896:	a7 01       	movw	r20, r14
    b898:	68 2f       	mov	r22, r24
    b89a:	82 2f       	mov	r24, r18
    b89c:	8f 71       	andi	r24, 0x1F	; 31
    b89e:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    b8a2:	c8 01       	movw	r24, r16
    b8a4:	09 96       	adiw	r24, 0x09	; 9
    b8a6:	b4 01       	movw	r22, r8
    b8a8:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    b8ac:	48 2e       	mov	r4, r24
    b8ae:	78 2e       	mov	r7, r24
    b8b0:	7e 01       	movw	r14, r28
    b8b2:	29 e0       	ldi	r18, 0x09	; 9
    b8b4:	e2 0e       	add	r14, r18
    b8b6:	f1 1c       	adc	r15, r1
    b8b8:	8f e1       	ldi	r24, 0x1F	; 31
    b8ba:	e8 22       	and	r14, r24
    b8bc:	ff 24       	eor	r15, r15
    b8be:	40 e1       	ldi	r20, 0x10	; 16
    b8c0:	5b e0       	ldi	r21, 0x0B	; 11
    b8c2:	64 2d       	mov	r22, r4
    b8c4:	8e 2d       	mov	r24, r14
    b8c6:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    b8ca:	c8 01       	movw	r24, r16
    b8cc:	0b 96       	adiw	r24, 0x0b	; 11
    b8ce:	b4 01       	movw	r22, r8
    b8d0:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    b8d4:	38 2e       	mov	r3, r24
    b8d6:	68 2e       	mov	r6, r24
    b8d8:	46 e6       	ldi	r20, 0x66	; 102
    b8da:	5b e0       	ldi	r21, 0x0B	; 11
    b8dc:	68 2f       	mov	r22, r24
    b8de:	8e 2d       	mov	r24, r14
    b8e0:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    b8e4:	c8 01       	movw	r24, r16
    b8e6:	0c 96       	adiw	r24, 0x0c	; 12
    b8e8:	b4 01       	movw	r22, r8
    b8ea:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    b8ee:	58 2e       	mov	r5, r24
    b8f0:	f8 2e       	mov	r15, r24
    b8f2:	41 e5       	ldi	r20, 0x51	; 81
    b8f4:	5b e0       	ldi	r21, 0x0B	; 11
    b8f6:	68 2f       	mov	r22, r24
    b8f8:	8e 2d       	mov	r24, r14
    b8fa:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    b8fe:	c8 01       	movw	r24, r16
    b900:	0d 96       	adiw	r24, 0x0d	; 13
    b902:	b4 01       	movw	r22, r8
    b904:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    b908:	18 2f       	mov	r17, r24
    b90a:	28 2e       	mov	r2, r24
    b90c:	41 e2       	ldi	r20, 0x21	; 33
    b90e:	5b e0       	ldi	r21, 0x0B	; 11
    b910:	68 2f       	mov	r22, r24
    b912:	8e 2d       	mov	r24, r14
    b914:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    b918:	64 96       	adiw	r28, 0x14	; 20
    b91a:	cf 71       	andi	r28, 0x1F	; 31
    b91c:	dd 27       	eor	r29, r29
    b91e:	ec 2e       	mov	r14, r28
    b920:	21 e0       	ldi	r18, 0x01	; 1
    b922:	a5 01       	movw	r20, r10
    b924:	64 2d       	mov	r22, r4
    b926:	8c 2f       	mov	r24, r28
    b928:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    b92c:	40 91 b0 0d 	lds	r20, 0x0DB0
    b930:	50 91 b1 0d 	lds	r21, 0x0DB1
    b934:	21 e0       	ldi	r18, 0x01	; 1
    b936:	63 2d       	mov	r22, r3
    b938:	8c 2f       	mov	r24, r28
    b93a:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    b93e:	40 91 b2 0d 	lds	r20, 0x0DB2
    b942:	50 91 b3 0d 	lds	r21, 0x0DB3
    b946:	21 e0       	ldi	r18, 0x01	; 1
    b948:	65 2d       	mov	r22, r5
    b94a:	8c 2f       	mov	r24, r28
    b94c:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    b950:	21 e0       	ldi	r18, 0x01	; 1
    b952:	a6 01       	movw	r20, r12
    b954:	61 2f       	mov	r22, r17
    b956:	8c 2f       	mov	r24, r28
    b958:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	
	LBWaitSeconds(2);
    b95c:	82 e0       	ldi	r24, 0x02	; 2
    b95e:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    b962:	80 90 b0 0d 	lds	r8, 0x0DB0
    b966:	90 90 b1 0d 	lds	r9, 0x0DB1
    b96a:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    b96c:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    b96e:	20 97       	sbiw	r28, 0x00	; 0
    b970:	e9 f0       	breq	.+58     	; 0xb9ac <tally_score+0x1a2>
	{
		WaitVsync(1);
    b972:	81 e0       	ldi	r24, 0x01	; 1
    b974:	90 e0       	ldi	r25, 0x00	; 0
    b976:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
		SFX_HIT;
    b97a:	41 e0       	ldi	r20, 0x01	; 1
    b97c:	6f ef       	ldi	r22, 0xFF	; 255
    b97e:	84 e0       	ldi	r24, 0x04	; 4
    b980:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
		tally += 1;
    b984:	0f 5f       	subi	r16, 0xFF	; 255
    b986:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    b988:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    b98a:	21 e0       	ldi	r18, 0x01	; 1
    b98c:	a8 01       	movw	r20, r16
    b98e:	67 2d       	mov	r22, r7
    b990:	8e 2d       	mov	r24, r14
    b992:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    b996:	21 e0       	ldi	r18, 0x01	; 1
    b998:	ae 01       	movw	r20, r28
    b99a:	66 2d       	mov	r22, r6
    b99c:	8e 2d       	mov	r24, r14
    b99e:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    b9a2:	8c ed       	ldi	r24, 0xDC	; 220
    b9a4:	95 e0       	ldi	r25, 0x05	; 5
    b9a6:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <WaitUs>
    b9aa:	e1 cf       	rjmp	.-62     	; 0xb96e <tally_score+0x164>
    b9ac:	a8 0c       	add	r10, r8
    b9ae:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    b9b0:	c0 91 b2 0d 	lds	r28, 0x0DB2
    b9b4:	d0 91 b3 0d 	lds	r29, 0x0DB3
	while (counter > 0)
    b9b8:	20 97       	sbiw	r28, 0x00	; 0
    b9ba:	31 f1       	breq	.+76     	; 0xba08 <tally_score+0x1fe>
	{
		WaitVsync(1);
    b9bc:	81 e0       	ldi	r24, 0x01	; 1
    b9be:	90 e0       	ldi	r25, 0x00	; 0
    b9c0:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
		SFX_HIT;
    b9c4:	41 e0       	ldi	r20, 0x01	; 1
    b9c6:	6f ef       	ldi	r22, 0xFF	; 255
    b9c8:	84 e0       	ldi	r24, 0x04	; 4
    b9ca:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    b9ce:	c5 01       	movw	r24, r10
    b9d0:	02 97       	sbiw	r24, 0x02	; 2
    b9d2:	8e 3f       	cpi	r24, 0xFE	; 254
    b9d4:	9f 4f       	sbci	r25, 0xFF	; 255
    b9d6:	20 f4       	brcc	.+8      	; 0xb9e0 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    b9d8:	81 e0       	ldi	r24, 0x01	; 1
    b9da:	a8 1a       	sub	r10, r24
    b9dc:	b1 08       	sbc	r11, r1
    b9de:	02 c0       	rjmp	.+4      	; 0xb9e4 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    b9e0:	a1 2c       	mov	r10, r1
    b9e2:	b1 2c       	mov	r11, r1
		counter -= 1;
    b9e4:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    b9e6:	21 e0       	ldi	r18, 0x01	; 1
    b9e8:	a5 01       	movw	r20, r10
    b9ea:	67 2d       	mov	r22, r7
    b9ec:	8e 2d       	mov	r24, r14
    b9ee:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    b9f2:	21 e0       	ldi	r18, 0x01	; 1
    b9f4:	ae 01       	movw	r20, r28
    b9f6:	6f 2d       	mov	r22, r15
    b9f8:	8e 2d       	mov	r24, r14
    b9fa:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    b9fe:	8c ed       	ldi	r24, 0xDC	; 220
    ba00:	95 e0       	ldi	r25, 0x05	; 5
    ba02:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <WaitUs>
    ba06:	d8 cf       	rjmp	.-80     	; 0xb9b8 <tally_score+0x1ae>
    ba08:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    ba0a:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    ba0c:	20 97       	sbiw	r28, 0x00	; 0
    ba0e:	e9 f0       	breq	.+58     	; 0xba4a <tally_score+0x240>
	{
		WaitVsync(1);
    ba10:	81 e0       	ldi	r24, 0x01	; 1
    ba12:	90 e0       	ldi	r25, 0x00	; 0
    ba14:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
		SFX_HIT;
    ba18:	41 e0       	ldi	r20, 0x01	; 1
    ba1a:	6f ef       	ldi	r22, 0xFF	; 255
    ba1c:	84 e0       	ldi	r24, 0x04	; 4
    ba1e:	0e 94 8b 38 	call	0x7116	; 0x7116 <TriggerFx>
		tally += 1;
    ba22:	0f 5f       	subi	r16, 0xFF	; 255
    ba24:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    ba26:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    ba28:	21 e0       	ldi	r18, 0x01	; 1
    ba2a:	a8 01       	movw	r20, r16
    ba2c:	67 2d       	mov	r22, r7
    ba2e:	8e 2d       	mov	r24, r14
    ba30:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    ba34:	21 e0       	ldi	r18, 0x01	; 1
    ba36:	ae 01       	movw	r20, r28
    ba38:	62 2d       	mov	r22, r2
    ba3a:	8e 2d       	mov	r24, r14
    ba3c:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    ba40:	8c ed       	ldi	r24, 0xDC	; 220
    ba42:	95 e0       	ldi	r25, 0x05	; 5
    ba44:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <WaitUs>
    ba48:	e1 cf       	rjmp	.-62     	; 0xba0c <tally_score+0x202>
    ba4a:	ac 0c       	add	r10, r12
    ba4c:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    ba4e:	b0 92 af 0d 	sts	0x0DAF, r11
    ba52:	a0 92 ae 0d 	sts	0x0DAE, r10
	game.time = 0;
    ba56:	10 92 b3 0d 	sts	0x0DB3, r1
    ba5a:	10 92 b2 0d 	sts	0x0DB2, r1
	LBWaitSeconds(2);
    ba5e:	82 e0       	ldi	r24, 0x02	; 2
    ba60:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <LBWaitSeconds>
	render_camera_view();
}
    ba64:	df 91       	pop	r29
    ba66:	cf 91       	pop	r28
    ba68:	1f 91       	pop	r17
    ba6a:	0f 91       	pop	r16
    ba6c:	ff 90       	pop	r15
    ba6e:	ef 90       	pop	r14
    ba70:	df 90       	pop	r13
    ba72:	cf 90       	pop	r12
    ba74:	bf 90       	pop	r11
    ba76:	af 90       	pop	r10
    ba78:	9f 90       	pop	r9
    ba7a:	8f 90       	pop	r8
    ba7c:	7f 90       	pop	r7
    ba7e:	6f 90       	pop	r6
    ba80:	5f 90       	pop	r5
    ba82:	4f 90       	pop	r4
    ba84:	3f 90       	pop	r3
    ba86:	2f 90       	pop	r2
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    ba88:	0c 94 ce 48 	jmp	0x919c	; 0x919c <render_camera_view>

0000ba8c <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    ba8c:	80 91 b7 0d 	lds	r24, 0x0DB7
    ba90:	81 50       	subi	r24, 0x01	; 1
    ba92:	80 93 b7 0d 	sts	0x0DB7, r24
	clear_sprites(0, 6);
    ba96:	66 e0       	ldi	r22, 0x06	; 6
    ba98:	80 e0       	ldi	r24, 0x00	; 0
    ba9a:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
	LBRotateSprites();
    ba9e:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	if (game.lives == 0)
    baa2:	80 91 b7 0d 	lds	r24, 0x0DB7
    baa6:	81 11       	cpse	r24, r1
    baa8:	08 c0       	rjmp	.+16     	; 0xbaba <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    baaa:	60 e0       	ldi	r22, 0x00	; 0
    baac:	70 e0       	ldi	r23, 0x00	; 0
    baae:	87 e1       	ldi	r24, 0x17	; 23
    bab0:	9b e0       	ldi	r25, 0x0B	; 11
    bab2:	0e 94 05 5c 	call	0xb80a	; 0xb80a <tally_score>
		exit_game();
    bab6:	0c 94 12 5b 	jmp	0xb624	; 0xb624 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    baba:	61 e0       	ldi	r22, 0x01	; 1
    babc:	81 e0       	ldi	r24, 0x01	; 1
    babe:	0e 94 ad 43 	call	0x875a	; 0x875a <FadeOut>
	ClearVram();
    bac2:	0e 94 ac 34 	call	0x6958	; 0x6958 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bac6:	64 e1       	ldi	r22, 0x14	; 20
    bac8:	80 e0       	ldi	r24, 0x00	; 0
    baca:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
	LBRotateSprites();
    bace:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    bad2:	60 e0       	ldi	r22, 0x00	; 0
    bad4:	81 e0       	ldi	r24, 0x01	; 1
    bad6:	0e 94 a1 43 	call	0x8742	; 0x8742 <FadeIn>
	init_player_state();
    bada:	0e 94 41 46 	call	0x8c82	; 0x8c82 <init_player_state>
	init_enemy_state();
    bade:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <init_enemy_state>
	load_level(game.current_level_index, false);
    bae2:	60 e0       	ldi	r22, 0x00	; 0
    bae4:	80 91 b9 0d 	lds	r24, 0x0DB9
    bae8:	0c 94 f9 56 	jmp	0xadf2	; 0xadf2 <load_level>

0000baec <update_player>:
}

u8 update_player()
{
    baec:	cf 92       	push	r12
    baee:	df 92       	push	r13
    baf0:	ef 92       	push	r14
    baf2:	ff 92       	push	r15
    baf4:	0f 93       	push	r16
    baf6:	1f 93       	push	r17
    baf8:	cf 93       	push	r28
    bafa:	df 93       	push	r29
    bafc:	1f 92       	push	r1
    bafe:	cd b7       	in	r28, 0x3d	; 61
    bb00:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    bb02:	10 91 d8 0d 	lds	r17, 0x0DD8
    bb06:	14 ff       	sbrs	r17, 4
    bb08:	12 c0       	rjmp	.+36     	; 0xbb2e <update_player+0x42>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    bb0a:	00 91 dc 0d 	lds	r16, 0x0DDC
    bb0e:	20 91 db 0d 	lds	r18, 0x0DDB
    bb12:	40 e0       	ldi	r20, 0x00	; 0
    bb14:	6c e4       	ldi	r22, 0x4C	; 76
    bb16:	7e e0       	ldi	r23, 0x0E	; 14
    bb18:	88 ed       	ldi	r24, 0xD8	; 216
    bb1a:	9d e0       	ldi	r25, 0x0D	; 13
    bb1c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <map_explosion>
    bb20:	88 23       	and	r24, r24
    bb22:	09 f4       	brne	.+2      	; 0xbb26 <update_player+0x3a>
    bb24:	c8 c2       	rjmp	.+1424   	; 0xc0b6 <update_player+0x5ca>
		{
			handle_player_death();
    bb26:	0e 94 46 5d 	call	0xba8c	; 0xba8c <handle_player_death>
			return 0;
    bb2a:	80 e0       	ldi	r24, 0x00	; 0
    bb2c:	c5 c2       	rjmp	.+1418   	; 0xc0b8 <update_player+0x5cc>
		}
	}
	else if (is_space())
    bb2e:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    bb32:	88 23       	and	r24, r24
    bb34:	09 f4       	brne	.+2      	; 0xbb38 <update_player+0x4c>
    bb36:	ab c0       	rjmp	.+342    	; 0xbc8e <update_player+0x1a2>
	{
		game.player.shared.vy = 0;
    bb38:	10 92 c8 0d 	sts	0x0DC8, r1
    bb3c:	10 92 c9 0d 	sts	0x0DC9, r1
    bb40:	10 92 ca 0d 	sts	0x0DCA, r1
    bb44:	10 92 cb 0d 	sts	0x0DCB, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    bb48:	8c e3       	ldi	r24, 0x3C	; 60
    bb4a:	90 e0       	ldi	r25, 0x00	; 0
    bb4c:	90 93 d5 0d 	sts	0x0DD5, r25
    bb50:	80 93 d4 0d 	sts	0x0DD4, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    bb54:	10 91 a2 0f 	lds	r17, 0x0FA2
    bb58:	15 ff       	sbrs	r17, 5
    bb5a:	32 c0       	rjmp	.+100    	; 0xbbc0 <update_player+0xd4>
    bb5c:	20 e0       	ldi	r18, 0x00	; 0
    bb5e:	30 e0       	ldi	r19, 0x00	; 0
    bb60:	40 e0       	ldi	r20, 0x00	; 0
    bb62:	5e e3       	ldi	r21, 0x3E	; 62
    bb64:	60 91 d0 0d 	lds	r22, 0x0DD0
    bb68:	70 91 d1 0d 	lds	r23, 0x0DD1
    bb6c:	80 91 d2 0d 	lds	r24, 0x0DD2
    bb70:	90 91 d3 0d 	lds	r25, 0x0DD3
    bb74:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    bb78:	20 e0       	ldi	r18, 0x00	; 0
    bb7a:	30 e0       	ldi	r19, 0x00	; 0
    bb7c:	40 e8       	ldi	r20, 0x80	; 128
    bb7e:	5f e3       	ldi	r21, 0x3F	; 63
    bb80:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    bb84:	6b 01       	movw	r12, r22
    bb86:	7c 01       	movw	r14, r24
    bb88:	80 91 bd 0d 	lds	r24, 0x0DBD
    bb8c:	68 2f       	mov	r22, r24
    bb8e:	70 e0       	ldi	r23, 0x00	; 0
    bb90:	80 e0       	ldi	r24, 0x00	; 0
    bb92:	90 e0       	ldi	r25, 0x00	; 0
    bb94:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    bb98:	9b 01       	movw	r18, r22
    bb9a:	ac 01       	movw	r20, r24
    bb9c:	c7 01       	movw	r24, r14
    bb9e:	b6 01       	movw	r22, r12
    bba0:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    bba4:	87 ff       	sbrs	r24, 7
    bba6:	0c c0       	rjmp	.+24     	; 0xbbc0 <update_player+0xd4>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    bba8:	80 e0       	ldi	r24, 0x00	; 0
    bbaa:	90 e0       	ldi	r25, 0x00	; 0
    bbac:	a0 e7       	ldi	r26, 0x70	; 112
    bbae:	b2 e4       	ldi	r27, 0x42	; 66
    bbb0:	80 93 c8 0d 	sts	0x0DC8, r24
    bbb4:	90 93 c9 0d 	sts	0x0DC9, r25
    bbb8:	a0 93 ca 0d 	sts	0x0DCA, r26
    bbbc:	b0 93 cb 0d 	sts	0x0DCB, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    bbc0:	17 ff       	sbrs	r17, 7
    bbc2:	29 c0       	rjmp	.+82     	; 0xbc16 <update_player+0x12a>
    bbc4:	20 e0       	ldi	r18, 0x00	; 0
    bbc6:	30 e0       	ldi	r19, 0x00	; 0
    bbc8:	40 ec       	ldi	r20, 0xC0	; 192
    bbca:	51 e4       	ldi	r21, 0x41	; 65
    bbcc:	60 91 cc 0d 	lds	r22, 0x0DCC
    bbd0:	70 91 cd 0d 	lds	r23, 0x0DCD
    bbd4:	80 91 ce 0d 	lds	r24, 0x0DCE
    bbd8:	90 91 cf 0d 	lds	r25, 0x0DCF
    bbdc:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    bbe0:	6b 01       	movw	r12, r22
    bbe2:	7c 01       	movw	r14, r24
    bbe4:	80 91 aa 0d 	lds	r24, 0x0DAA
    bbe8:	90 91 ab 0d 	lds	r25, 0x0DAB
    bbec:	80 52       	subi	r24, 0x20	; 32
    bbee:	9f 4f       	sbci	r25, 0xFF	; 255
    bbf0:	bc 01       	movw	r22, r24
    bbf2:	80 e0       	ldi	r24, 0x00	; 0
    bbf4:	90 e0       	ldi	r25, 0x00	; 0
    bbf6:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    bbfa:	9b 01       	movw	r18, r22
    bbfc:	ac 01       	movw	r20, r24
    bbfe:	c7 01       	movw	r24, r14
    bc00:	b6 01       	movw	r22, r12
    bc02:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    bc06:	87 ff       	sbrs	r24, 7
    bc08:	06 c0       	rjmp	.+12     	; 0xbc16 <update_player+0x12a>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    bc0a:	88 e7       	ldi	r24, 0x78	; 120
    bc0c:	90 e0       	ldi	r25, 0x00	; 0
    bc0e:	90 93 d5 0d 	sts	0x0DD5, r25
    bc12:	80 93 d4 0d 	sts	0x0DD4, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    bc16:	16 ff       	sbrs	r17, 6
    bc18:	1a c0       	rjmp	.+52     	; 0xbc4e <update_player+0x162>
    bc1a:	60 91 aa 0d 	lds	r22, 0x0DAA
    bc1e:	70 91 ab 0d 	lds	r23, 0x0DAB
    bc22:	80 e0       	ldi	r24, 0x00	; 0
    bc24:	90 e0       	ldi	r25, 0x00	; 0
    bc26:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    bc2a:	9b 01       	movw	r18, r22
    bc2c:	ac 01       	movw	r20, r24
    bc2e:	60 91 cc 0d 	lds	r22, 0x0DCC
    bc32:	70 91 cd 0d 	lds	r23, 0x0DCD
    bc36:	80 91 ce 0d 	lds	r24, 0x0DCE
    bc3a:	90 91 cf 0d 	lds	r25, 0x0DCF
    bc3e:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    bc42:	18 16       	cp	r1, r24
    bc44:	24 f4       	brge	.+8      	; 0xbc4e <update_player+0x162>
		{
			game.player.shared.vx = 0;
    bc46:	10 92 d5 0d 	sts	0x0DD5, r1
    bc4a:	10 92 d4 0d 	sts	0x0DD4, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    bc4e:	14 ff       	sbrs	r17, 4
    bc50:	1b c0       	rjmp	.+54     	; 0xbc88 <update_player+0x19c>
    bc52:	20 e0       	ldi	r18, 0x00	; 0
    bc54:	30 e0       	ldi	r19, 0x00	; 0
    bc56:	a9 01       	movw	r20, r18
    bc58:	60 91 d0 0d 	lds	r22, 0x0DD0
    bc5c:	70 91 d1 0d 	lds	r23, 0x0DD1
    bc60:	80 91 d2 0d 	lds	r24, 0x0DD2
    bc64:	90 91 d3 0d 	lds	r25, 0x0DD3
    bc68:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    bc6c:	18 16       	cp	r1, r24
    bc6e:	64 f4       	brge	.+24     	; 0xbc88 <update_player+0x19c>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    bc70:	80 e0       	ldi	r24, 0x00	; 0
    bc72:	90 e0       	ldi	r25, 0x00	; 0
    bc74:	a0 e7       	ldi	r26, 0x70	; 112
    bc76:	b2 ec       	ldi	r27, 0xC2	; 194
    bc78:	80 93 c8 0d 	sts	0x0DC8, r24
    bc7c:	90 93 c9 0d 	sts	0x0DC9, r25
    bc80:	a0 93 ca 0d 	sts	0x0DCA, r26
    bc84:	b0 93 cb 0d 	sts	0x0DCB, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    bc88:	84 e3       	ldi	r24, 0x34	; 52
    bc8a:	9e e0       	ldi	r25, 0x0E	; 14
    bc8c:	0d c2       	rjmp	.+1050   	; 0xc0a8 <update_player+0x5bc>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    bc8e:	81 2f       	mov	r24, r17
    bc90:	8a 70       	andi	r24, 0x0A	; 10
    bc92:	09 f4       	brne	.+2      	; 0xbc96 <update_player+0x1aa>
    bc94:	ec c0       	rjmp	.+472    	; 0xbe6e <update_player+0x382>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    bc96:	40 91 dc 0d 	lds	r20, 0x0DDC
    bc9a:	60 91 db 0d 	lds	r22, 0x0DDB
    bc9e:	88 ec       	ldi	r24, 0xC8	; 200
    bca0:	9d e0       	ldi	r25, 0x0D	; 13
    bca2:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <on_solid_ground>
    bca6:	81 11       	cpse	r24, r1
    bca8:	07 c0       	rjmp	.+14     	; 0xbcb8 <update_player+0x1cc>
		{
			game.player.shared.gravity = GRAVITY;
    bcaa:	8f ef       	ldi	r24, 0xFF	; 255
    bcac:	80 93 d6 0d 	sts	0x0DD6, r24
			game.player.flags = JUMPING;
    bcb0:	81 e0       	ldi	r24, 0x01	; 1
    bcb2:	80 93 d8 0d 	sts	0x0DD8, r24
    bcb6:	de c1       	rjmp	.+956    	; 0xc074 <update_player+0x588>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    bcb8:	10 91 a2 0f 	lds	r17, 0x0FA2
    bcbc:	15 ff       	sbrs	r17, 5
    bcbe:	46 c0       	rjmp	.+140    	; 0xbd4c <update_player+0x260>
			{
				game.player.shared.y += 16;
    bcc0:	20 e0       	ldi	r18, 0x00	; 0
    bcc2:	30 e0       	ldi	r19, 0x00	; 0
    bcc4:	40 e8       	ldi	r20, 0x80	; 128
    bcc6:	51 e4       	ldi	r21, 0x41	; 65
    bcc8:	60 91 d0 0d 	lds	r22, 0x0DD0
    bccc:	70 91 d1 0d 	lds	r23, 0x0DD1
    bcd0:	80 91 d2 0d 	lds	r24, 0x0DD2
    bcd4:	90 91 d3 0d 	lds	r25, 0x0DD3
    bcd8:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    bcdc:	60 93 d0 0d 	sts	0x0DD0, r22
    bce0:	70 93 d1 0d 	sts	0x0DD1, r23
    bce4:	80 93 d2 0d 	sts	0x0DD2, r24
    bce8:	90 93 d3 0d 	sts	0x0DD3, r25
				if(game.player.direction == D_RIGHT)
    bcec:	80 91 da 0d 	lds	r24, 0x0DDA
    bcf0:	81 30       	cpi	r24, 0x01	; 1
    bcf2:	b1 f4       	brne	.+44     	; 0xbd20 <update_player+0x234>
				{
					game.player.shared.x -= 8;
    bcf4:	20 e0       	ldi	r18, 0x00	; 0
    bcf6:	30 e0       	ldi	r19, 0x00	; 0
    bcf8:	40 e0       	ldi	r20, 0x00	; 0
    bcfa:	51 e4       	ldi	r21, 0x41	; 65
    bcfc:	60 91 cc 0d 	lds	r22, 0x0DCC
    bd00:	70 91 cd 0d 	lds	r23, 0x0DCD
    bd04:	80 91 ce 0d 	lds	r24, 0x0DCE
    bd08:	90 91 cf 0d 	lds	r25, 0x0DCF
    bd0c:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    bd10:	60 93 cc 0d 	sts	0x0DCC, r22
    bd14:	70 93 cd 0d 	sts	0x0DCD, r23
    bd18:	80 93 ce 0d 	sts	0x0DCE, r24
    bd1c:	90 93 cf 0d 	sts	0x0DCF, r25
				}
				game.player.shared.vx = 0;
    bd20:	10 92 d5 0d 	sts	0x0DD5, r1
    bd24:	10 92 d4 0d 	sts	0x0DD4, r1
				game.player.flags = PRONE;
    bd28:	84 e0       	ldi	r24, 0x04	; 4
    bd2a:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.width = 3;
    bd2e:	83 e0       	ldi	r24, 0x03	; 3
    bd30:	80 93 db 0d 	sts	0x0DDB, r24
				game.player.height = 1;
    bd34:	81 e0       	ldi	r24, 0x01	; 1
    bd36:	80 93 dc 0d 	sts	0x0DDC, r24
				clear_sprites(3, 3);
    bd3a:	63 e0       	ldi	r22, 0x03	; 3
    bd3c:	83 e0       	ldi	r24, 0x03	; 3
    bd3e:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    bd42:	40 91 b2 0f 	lds	r20, 0x0FB2
    bd46:	84 e4       	ldi	r24, 0x44	; 68
    bd48:	9e e0       	ldi	r25, 0x0E	; 14
    bd4a:	6e c0       	rjmp	.+220    	; 0xbe28 <update_player+0x33c>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    bd4c:	17 ff       	sbrs	r17, 7
    bd4e:	38 c0       	rjmp	.+112    	; 0xbdc0 <update_player+0x2d4>
    bd50:	20 e0       	ldi	r18, 0x00	; 0
    bd52:	30 e0       	ldi	r19, 0x00	; 0
    bd54:	40 e0       	ldi	r20, 0x00	; 0
    bd56:	5e e3       	ldi	r21, 0x3E	; 62
    bd58:	60 91 cc 0d 	lds	r22, 0x0DCC
    bd5c:	70 91 cd 0d 	lds	r23, 0x0DCD
    bd60:	80 91 ce 0d 	lds	r24, 0x0DCE
    bd64:	90 91 cf 0d 	lds	r25, 0x0DCF
    bd68:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    bd6c:	20 e0       	ldi	r18, 0x00	; 0
    bd6e:	30 e0       	ldi	r19, 0x00	; 0
    bd70:	40 e0       	ldi	r20, 0x00	; 0
    bd72:	50 e4       	ldi	r21, 0x40	; 64
    bd74:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    bd78:	6b 01       	movw	r12, r22
    bd7a:	7c 01       	movw	r14, r24
    bd7c:	80 91 bc 0d 	lds	r24, 0x0DBC
    bd80:	68 2f       	mov	r22, r24
    bd82:	70 e0       	ldi	r23, 0x00	; 0
    bd84:	80 e0       	ldi	r24, 0x00	; 0
    bd86:	90 e0       	ldi	r25, 0x00	; 0
    bd88:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    bd8c:	9b 01       	movw	r18, r22
    bd8e:	ac 01       	movw	r20, r24
    bd90:	c7 01       	movw	r24, r14
    bd92:	b6 01       	movw	r22, r12
    bd94:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    bd98:	87 ff       	sbrs	r24, 7
    bd9a:	12 c0       	rjmp	.+36     	; 0xbdc0 <update_player+0x2d4>
			{
				game.player.shared.vx = RUN_SPEED;
    bd9c:	8c e3       	ldi	r24, 0x3C	; 60
    bd9e:	90 e0       	ldi	r25, 0x00	; 0
    bda0:	90 93 d5 0d 	sts	0x0DD5, r25
    bda4:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.flags = RUNNING;
    bda8:	82 e0       	ldi	r24, 0x02	; 2
    bdaa:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.direction = D_RIGHT;
    bdae:	81 e0       	ldi	r24, 0x01	; 1
    bdb0:	80 93 da 0d 	sts	0x0DDA, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    bdb4:	84 e3       	ldi	r24, 0x34	; 52
    bdb6:	9e e0       	ldi	r25, 0x0E	; 14
    bdb8:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    bdbc:	40 e0       	ldi	r20, 0x00	; 0
    bdbe:	38 c0       	rjmp	.+112    	; 0xbe30 <update_player+0x344>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    bdc0:	16 ff       	sbrs	r17, 6
    bdc2:	27 c0       	rjmp	.+78     	; 0xbe12 <update_player+0x326>
    bdc4:	60 91 aa 0d 	lds	r22, 0x0DAA
    bdc8:	70 91 ab 0d 	lds	r23, 0x0DAB
    bdcc:	80 e0       	ldi	r24, 0x00	; 0
    bdce:	90 e0       	ldi	r25, 0x00	; 0
    bdd0:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    bdd4:	9b 01       	movw	r18, r22
    bdd6:	ac 01       	movw	r20, r24
    bdd8:	60 91 cc 0d 	lds	r22, 0x0DCC
    bddc:	70 91 cd 0d 	lds	r23, 0x0DCD
    bde0:	80 91 ce 0d 	lds	r24, 0x0DCE
    bde4:	90 91 cf 0d 	lds	r25, 0x0DCF
    bde8:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    bdec:	18 16       	cp	r1, r24
    bdee:	8c f4       	brge	.+34     	; 0xbe12 <update_player+0x326>
			{
				game.player.shared.vx = -RUN_SPEED;
    bdf0:	84 ec       	ldi	r24, 0xC4	; 196
    bdf2:	9f ef       	ldi	r25, 0xFF	; 255
    bdf4:	90 93 d5 0d 	sts	0x0DD5, r25
    bdf8:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.flags = RUNNING;
    bdfc:	82 e0       	ldi	r24, 0x02	; 2
    bdfe:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.direction = D_LEFT;
    be02:	10 92 da 0d 	sts	0x0DDA, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    be06:	84 e3       	ldi	r24, 0x34	; 52
    be08:	9e e0       	ldi	r25, 0x0E	; 14
    be0a:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    be0e:	41 e0       	ldi	r20, 0x01	; 1
    be10:	0f c0       	rjmp	.+30     	; 0xbe30 <update_player+0x344>
			}
			else
			{
				game.player.flags = IDLE;
    be12:	88 e0       	ldi	r24, 0x08	; 8
    be14:	80 93 d8 0d 	sts	0x0DD8, r24
				game.player.shared.vx = 0;
    be18:	10 92 d5 0d 	sts	0x0DD5, r1
    be1c:	10 92 d4 0d 	sts	0x0DD4, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    be20:	40 91 b2 0f 	lds	r20, 0x0FB2
    be24:	8c e2       	ldi	r24, 0x2C	; 44
    be26:	9e e0       	ldi	r25, 0x0E	; 14
    be28:	49 83       	std	Y+1, r20	; 0x01
    be2a:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    be2e:	49 81       	ldd	r20, Y+1	; 0x01
    be30:	bc 01       	movw	r22, r24
    be32:	80 e0       	ldi	r24, 0x00	; 0
    be34:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    be38:	80 91 9e 0f 	lds	r24, 0x0F9E
    be3c:	80 ff       	sbrs	r24, 0
    be3e:	3b c1       	rjmp	.+630    	; 0xc0b6 <update_player+0x5ca>
    be40:	80 91 d8 0d 	lds	r24, 0x0DD8
    be44:	82 fd       	sbrc	r24, 2
    be46:	37 c1       	rjmp	.+622    	; 0xc0b6 <update_player+0x5ca>
			{
				game.player.shared.vy = -JUMP_SPEED;
    be48:	80 e0       	ldi	r24, 0x00	; 0
    be4a:	90 e0       	ldi	r25, 0x00	; 0
    be4c:	a6 e1       	ldi	r26, 0x16	; 22
    be4e:	b3 ec       	ldi	r27, 0xC3	; 195
    be50:	80 93 c8 0d 	sts	0x0DC8, r24
    be54:	90 93 c9 0d 	sts	0x0DC9, r25
    be58:	a0 93 ca 0d 	sts	0x0DCA, r26
    be5c:	b0 93 cb 0d 	sts	0x0DCB, r27
				game.player.shared.gravity = GRAVITY;
    be60:	8f ef       	ldi	r24, 0xFF	; 255
    be62:	80 93 d6 0d 	sts	0x0DD6, r24
				game.player.flags = JUMPING;
    be66:	81 e0       	ldi	r24, 0x01	; 1
    be68:	80 93 d8 0d 	sts	0x0DD8, r24
    be6c:	fd c0       	rjmp	.+506    	; 0xc068 <update_player+0x57c>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    be6e:	10 ff       	sbrs	r17, 0
    be70:	77 c0       	rjmp	.+238    	; 0xbf60 <update_player+0x474>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    be72:	10 91 a2 0f 	lds	r17, 0x0FA2
    be76:	17 ff       	sbrs	r17, 7
    be78:	35 c0       	rjmp	.+106    	; 0xbee4 <update_player+0x3f8>
    be7a:	20 e0       	ldi	r18, 0x00	; 0
    be7c:	30 e0       	ldi	r19, 0x00	; 0
    be7e:	40 e0       	ldi	r20, 0x00	; 0
    be80:	5e e3       	ldi	r21, 0x3E	; 62
    be82:	60 91 cc 0d 	lds	r22, 0x0DCC
    be86:	70 91 cd 0d 	lds	r23, 0x0DCD
    be8a:	80 91 ce 0d 	lds	r24, 0x0DCE
    be8e:	90 91 cf 0d 	lds	r25, 0x0DCF
    be92:	0e 94 11 64 	call	0xc822	; 0xc822 <__mulsf3>
    be96:	20 e0       	ldi	r18, 0x00	; 0
    be98:	30 e0       	ldi	r19, 0x00	; 0
    be9a:	40 e0       	ldi	r20, 0x00	; 0
    be9c:	50 e4       	ldi	r21, 0x40	; 64
    be9e:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    bea2:	6b 01       	movw	r12, r22
    bea4:	7c 01       	movw	r14, r24
    bea6:	80 91 bc 0d 	lds	r24, 0x0DBC
    beaa:	68 2f       	mov	r22, r24
    beac:	70 e0       	ldi	r23, 0x00	; 0
    beae:	80 e0       	ldi	r24, 0x00	; 0
    beb0:	90 e0       	ldi	r25, 0x00	; 0
    beb2:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__floatsisf>
    beb6:	9b 01       	movw	r18, r22
    beb8:	ac 01       	movw	r20, r24
    beba:	c7 01       	movw	r24, r14
    bebc:	b6 01       	movw	r22, r12
    bebe:	0e 94 2b 63 	call	0xc656	; 0xc656 <__cmpsf2>
    bec2:	87 ff       	sbrs	r24, 7
    bec4:	0f c0       	rjmp	.+30     	; 0xbee4 <update_player+0x3f8>
		{
			game.player.shared.vx = RUN_SPEED;
    bec6:	8c e3       	ldi	r24, 0x3C	; 60
    bec8:	90 e0       	ldi	r25, 0x00	; 0
    beca:	90 93 d5 0d 	sts	0x0DD5, r25
    bece:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.direction = D_RIGHT;
    bed2:	81 e0       	ldi	r24, 0x01	; 1
    bed4:	80 93 da 0d 	sts	0x0DDA, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    bed8:	8c e3       	ldi	r24, 0x3C	; 60
    beda:	9e e0       	ldi	r25, 0x0E	; 14
    bedc:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    bee0:	40 e0       	ldi	r20, 0x00	; 0
    bee2:	32 c0       	rjmp	.+100    	; 0xbf48 <update_player+0x45c>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    bee4:	16 ff       	sbrs	r17, 6
    bee6:	24 c0       	rjmp	.+72     	; 0xbf30 <update_player+0x444>
    bee8:	60 91 aa 0d 	lds	r22, 0x0DAA
    beec:	70 91 ab 0d 	lds	r23, 0x0DAB
    bef0:	80 e0       	ldi	r24, 0x00	; 0
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    bef8:	9b 01       	movw	r18, r22
    befa:	ac 01       	movw	r20, r24
    befc:	60 91 cc 0d 	lds	r22, 0x0DCC
    bf00:	70 91 cd 0d 	lds	r23, 0x0DCD
    bf04:	80 91 ce 0d 	lds	r24, 0x0DCE
    bf08:	90 91 cf 0d 	lds	r25, 0x0DCF
    bf0c:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    bf10:	18 16       	cp	r1, r24
    bf12:	74 f4       	brge	.+28     	; 0xbf30 <update_player+0x444>
		{
			game.player.shared.vx = -RUN_SPEED;
    bf14:	84 ec       	ldi	r24, 0xC4	; 196
    bf16:	9f ef       	ldi	r25, 0xFF	; 255
    bf18:	90 93 d5 0d 	sts	0x0DD5, r25
    bf1c:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.direction = D_LEFT;
    bf20:	10 92 da 0d 	sts	0x0DDA, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    bf24:	8c e3       	ldi	r24, 0x3C	; 60
    bf26:	9e e0       	ldi	r25, 0x0E	; 14
    bf28:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    bf2c:	41 e0       	ldi	r20, 0x01	; 1
    bf2e:	0c c0       	rjmp	.+24     	; 0xbf48 <update_player+0x45c>
		}
		else
		{
			game.player.shared.vx = 0;
    bf30:	10 92 d5 0d 	sts	0x0DD5, r1
    bf34:	10 92 d4 0d 	sts	0x0DD4, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    bf38:	40 91 b2 0f 	lds	r20, 0x0FB2
    bf3c:	8c e3       	ldi	r24, 0x3C	; 60
    bf3e:	9e e0       	ldi	r25, 0x0E	; 14
    bf40:	49 83       	std	Y+1, r20	; 0x01
    bf42:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    bf46:	49 81       	ldd	r20, Y+1	; 0x01
    bf48:	bc 01       	movw	r22, r24
    bf4a:	80 e0       	ldi	r24, 0x00	; 0
    bf4c:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    bf50:	80 91 d6 0d 	lds	r24, 0x0DD6
    bf54:	81 11       	cpse	r24, r1
    bf56:	af c0       	rjmp	.+350    	; 0xc0b6 <update_player+0x5ca>
		{
			game.player.flags = IDLE;
    bf58:	88 e0       	ldi	r24, 0x08	; 8
    bf5a:	80 93 d8 0d 	sts	0x0DD8, r24
    bf5e:	ab c0       	rjmp	.+342    	; 0xc0b6 <update_player+0x5ca>
		}
	}
	else if (game.player.flags & PRONE)
    bf60:	12 ff       	sbrs	r17, 2
    bf62:	a9 c0       	rjmp	.+338    	; 0xc0b6 <update_player+0x5ca>
	{
		if (game.joypadState.pressed & BTN_UP)
    bf64:	80 91 9e 0f 	lds	r24, 0x0F9E
    bf68:	84 ff       	sbrs	r24, 4
    bf6a:	3a c0       	rjmp	.+116    	; 0xbfe0 <update_player+0x4f4>
		{
			game.player.flags = IDLE;	
    bf6c:	88 e0       	ldi	r24, 0x08	; 8
    bf6e:	80 93 d8 0d 	sts	0x0DD8, r24
			game.player.shared.y -= 16;
    bf72:	20 e0       	ldi	r18, 0x00	; 0
    bf74:	30 e0       	ldi	r19, 0x00	; 0
    bf76:	40 e8       	ldi	r20, 0x80	; 128
    bf78:	51 e4       	ldi	r21, 0x41	; 65
    bf7a:	60 91 d0 0d 	lds	r22, 0x0DD0
    bf7e:	70 91 d1 0d 	lds	r23, 0x0DD1
    bf82:	80 91 d2 0d 	lds	r24, 0x0DD2
    bf86:	90 91 d3 0d 	lds	r25, 0x0DD3
    bf8a:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    bf8e:	60 93 d0 0d 	sts	0x0DD0, r22
    bf92:	70 93 d1 0d 	sts	0x0DD1, r23
    bf96:	80 93 d2 0d 	sts	0x0DD2, r24
    bf9a:	90 93 d3 0d 	sts	0x0DD3, r25
			if(game.player.direction == D_RIGHT)
    bf9e:	80 91 da 0d 	lds	r24, 0x0DDA
    bfa2:	81 30       	cpi	r24, 0x01	; 1
    bfa4:	b1 f4       	brne	.+44     	; 0xbfd2 <update_player+0x4e6>
			{
				game.player.shared.x += 8;
    bfa6:	20 e0       	ldi	r18, 0x00	; 0
    bfa8:	30 e0       	ldi	r19, 0x00	; 0
    bfaa:	40 e0       	ldi	r20, 0x00	; 0
    bfac:	51 e4       	ldi	r21, 0x41	; 65
    bfae:	60 91 cc 0d 	lds	r22, 0x0DCC
    bfb2:	70 91 cd 0d 	lds	r23, 0x0DCD
    bfb6:	80 91 ce 0d 	lds	r24, 0x0DCE
    bfba:	90 91 cf 0d 	lds	r25, 0x0DCF
    bfbe:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    bfc2:	60 93 cc 0d 	sts	0x0DCC, r22
    bfc6:	70 93 cd 0d 	sts	0x0DCD, r23
    bfca:	80 93 ce 0d 	sts	0x0DCE, r24
    bfce:	90 93 cf 0d 	sts	0x0DCF, r25
			}
			game.player.width = 2;
    bfd2:	82 e0       	ldi	r24, 0x02	; 2
    bfd4:	80 93 db 0d 	sts	0x0DDB, r24
			game.player.height = 3;
    bfd8:	83 e0       	ldi	r24, 0x03	; 3
    bfda:	80 93 dc 0d 	sts	0x0DDC, r24
    bfde:	6b c0       	rjmp	.+214    	; 0xc0b6 <update_player+0x5ca>
		}
		else if (game.joypadState.pressed & BTN_B)
    bfe0:	80 ff       	sbrs	r24, 0
    bfe2:	51 c0       	rjmp	.+162    	; 0xc086 <update_player+0x59a>
		{
			game.player.flags = JUMPING;
    bfe4:	81 e0       	ldi	r24, 0x01	; 1
    bfe6:	80 93 d8 0d 	sts	0x0DD8, r24
			game.player.shared.y -= 16;
    bfea:	20 e0       	ldi	r18, 0x00	; 0
    bfec:	30 e0       	ldi	r19, 0x00	; 0
    bfee:	40 e8       	ldi	r20, 0x80	; 128
    bff0:	51 e4       	ldi	r21, 0x41	; 65
    bff2:	60 91 d0 0d 	lds	r22, 0x0DD0
    bff6:	70 91 d1 0d 	lds	r23, 0x0DD1
    bffa:	80 91 d2 0d 	lds	r24, 0x0DD2
    bffe:	90 91 d3 0d 	lds	r25, 0x0DD3
    c002:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    c006:	60 93 d0 0d 	sts	0x0DD0, r22
    c00a:	70 93 d1 0d 	sts	0x0DD1, r23
    c00e:	80 93 d2 0d 	sts	0x0DD2, r24
    c012:	90 93 d3 0d 	sts	0x0DD3, r25
			if(game.player.direction == D_RIGHT)
    c016:	80 91 da 0d 	lds	r24, 0x0DDA
    c01a:	81 30       	cpi	r24, 0x01	; 1
    c01c:	b1 f4       	brne	.+44     	; 0xc04a <update_player+0x55e>
			{
				game.player.shared.x += 8;
    c01e:	20 e0       	ldi	r18, 0x00	; 0
    c020:	30 e0       	ldi	r19, 0x00	; 0
    c022:	40 e0       	ldi	r20, 0x00	; 0
    c024:	51 e4       	ldi	r21, 0x41	; 65
    c026:	60 91 cc 0d 	lds	r22, 0x0DCC
    c02a:	70 91 cd 0d 	lds	r23, 0x0DCD
    c02e:	80 91 ce 0d 	lds	r24, 0x0DCE
    c032:	90 91 cf 0d 	lds	r25, 0x0DCF
    c036:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
    c03a:	60 93 cc 0d 	sts	0x0DCC, r22
    c03e:	70 93 cd 0d 	sts	0x0DCD, r23
    c042:	80 93 ce 0d 	sts	0x0DCE, r24
    c046:	90 93 cf 0d 	sts	0x0DCF, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    c04a:	80 e0       	ldi	r24, 0x00	; 0
    c04c:	90 e0       	ldi	r25, 0x00	; 0
    c04e:	a6 e1       	ldi	r26, 0x16	; 22
    c050:	b3 ec       	ldi	r27, 0xC3	; 195
    c052:	80 93 c8 0d 	sts	0x0DC8, r24
    c056:	90 93 c9 0d 	sts	0x0DC9, r25
    c05a:	a0 93 ca 0d 	sts	0x0DCA, r26
    c05e:	b0 93 cb 0d 	sts	0x0DCB, r27
			game.player.shared.gravity = GRAVITY;
    c062:	8f ef       	ldi	r24, 0xFF	; 255
    c064:	80 93 d6 0d 	sts	0x0DD6, r24
			game.player.width = 2;
    c068:	82 e0       	ldi	r24, 0x02	; 2
    c06a:	80 93 db 0d 	sts	0x0DDB, r24
			game.player.height = 3;
    c06e:	83 e0       	ldi	r24, 0x03	; 3
    c070:	80 93 dc 0d 	sts	0x0DDC, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    c074:	40 91 b2 0f 	lds	r20, 0x0FB2
    c078:	8c e3       	ldi	r24, 0x3C	; 60
    c07a:	9e e0       	ldi	r25, 0x0E	; 14
    c07c:	49 83       	std	Y+1, r20	; 0x01
    c07e:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    c082:	49 81       	ldd	r20, Y+1	; 0x01
    c084:	14 c0       	rjmp	.+40     	; 0xc0ae <update_player+0x5c2>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    c086:	86 ff       	sbrs	r24, 6
    c088:	08 c0       	rjmp	.+16     	; 0xc09a <update_player+0x5ae>
		{
			game.player.direction = D_LEFT;
    c08a:	10 92 da 0d 	sts	0x0DDA, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    c08e:	84 e4       	ldi	r24, 0x44	; 68
    c090:	9e e0       	ldi	r25, 0x0E	; 14
    c092:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    c096:	41 e0       	ldi	r20, 0x01	; 1
    c098:	0a c0       	rjmp	.+20     	; 0xc0ae <update_player+0x5c2>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    c09a:	87 ff       	sbrs	r24, 7
    c09c:	0c c0       	rjmp	.+24     	; 0xc0b6 <update_player+0x5ca>
		{
			game.player.direction = D_RIGHT;
    c09e:	81 e0       	ldi	r24, 0x01	; 1
    c0a0:	80 93 da 0d 	sts	0x0DDA, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    c0a4:	84 e4       	ldi	r24, 0x44	; 68
    c0a6:	9e e0       	ldi	r25, 0x0E	; 14
    c0a8:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    c0ac:	40 e0       	ldi	r20, 0x00	; 0
    c0ae:	bc 01       	movw	r22, r24
    c0b0:	80 e0       	ldi	r24, 0x00	; 0
    c0b2:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		}
	}
	return 1;
    c0b6:	81 e0       	ldi	r24, 0x01	; 1
}
    c0b8:	0f 90       	pop	r0
    c0ba:	df 91       	pop	r29
    c0bc:	cf 91       	pop	r28
    c0be:	1f 91       	pop	r17
    c0c0:	0f 91       	pop	r16
    c0c2:	ff 90       	pop	r15
    c0c4:	ef 90       	pop	r14
    c0c6:	df 90       	pop	r13
    c0c8:	cf 90       	pop	r12
    c0ca:	08 95       	ret

0000c0cc <update_level>:
		}
	}
}

void update_level()
{
    c0cc:	cf 92       	push	r12
    c0ce:	df 92       	push	r13
    c0d0:	ef 92       	push	r14
    c0d2:	ff 92       	push	r15
    c0d4:	0f 93       	push	r16
    c0d6:	1f 93       	push	r17
    c0d8:	cf 93       	push	r28
    c0da:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    c0dc:	00 91 aa 0d 	lds	r16, 0x0DAA
    c0e0:	10 91 ab 0d 	lds	r17, 0x0DAB
    c0e4:	b8 01       	movw	r22, r16
    c0e6:	80 e0       	ldi	r24, 0x00	; 0
    c0e8:	90 e0       	ldi	r25, 0x00	; 0
    c0ea:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    c0ee:	9b 01       	movw	r18, r22
    c0f0:	ac 01       	movw	r20, r24
    c0f2:	60 91 cc 0d 	lds	r22, 0x0DCC
    c0f6:	70 91 cd 0d 	lds	r23, 0x0DCD
    c0fa:	80 91 ce 0d 	lds	r24, 0x0DCE
    c0fe:	90 91 cf 0d 	lds	r25, 0x0DCF
    c102:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    c106:	6b 01       	movw	r12, r22
    c108:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    c10a:	80 91 c0 0d 	lds	r24, 0x0DC0
    c10e:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    c110:	8c 33       	cpi	r24, 0x3C	; 60
    c112:	19 f0       	breq	.+6      	; 0xc11a <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    c114:	80 93 c0 0d 	sts	0x0DC0, r24
    c118:	0f c0       	rjmp	.+30     	; 0xc138 <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    c11a:	10 92 c0 0d 	sts	0x0DC0, r1
		if (game.time != 65535) game.time++;
    c11e:	80 91 b2 0d 	lds	r24, 0x0DB2
    c122:	90 91 b3 0d 	lds	r25, 0x0DB3
    c126:	8f 3f       	cpi	r24, 0xFF	; 255
    c128:	2f ef       	ldi	r18, 0xFF	; 255
    c12a:	92 07       	cpc	r25, r18
    c12c:	29 f0       	breq	.+10     	; 0xc138 <update_level+0x6c>
    c12e:	01 96       	adiw	r24, 0x01	; 1
    c130:	90 93 b3 0d 	sts	0x0DB3, r25
    c134:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    c138:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    c13c:	93 e0       	ldi	r25, 0x03	; 3
    c13e:	16 95       	lsr	r17
    c140:	07 95       	ror	r16
    c142:	9a 95       	dec	r25
    c144:	e1 f7       	brne	.-8      	; 0xc13e <update_level+0x72>
    c146:	c0 91 bc 0d 	lds	r28, 0x0DBC
    c14a:	88 23       	and	r24, r24
    c14c:	51 f0       	breq	.+20     	; 0xc162 <update_level+0x96>
    c14e:	2c 2f       	mov	r18, r28
    c150:	30 e0       	ldi	r19, 0x00	; 0
    c152:	c8 01       	movw	r24, r16
    c154:	4c 96       	adiw	r24, 0x1c	; 28
    c156:	82 17       	cp	r24, r18
    c158:	93 07       	cpc	r25, r19
    c15a:	18 f4       	brcc	.+6      	; 0xc162 <update_level+0x96>
	{
		move_camera_x();
    c15c:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <move_camera_x>
    c160:	22 c0       	rjmp	.+68     	; 0xc1a6 <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    c162:	80 91 d4 0d 	lds	r24, 0x0DD4
    c166:	90 91 d5 0d 	lds	r25, 0x0DD5
    c16a:	18 16       	cp	r1, r24
    c16c:	19 06       	cpc	r1, r25
    c16e:	8c f4       	brge	.+34     	; 0xc192 <update_level+0xc6>
    c170:	20 e0       	ldi	r18, 0x00	; 0
    c172:	30 e0       	ldi	r19, 0x00	; 0
    c174:	40 ee       	ldi	r20, 0xE0	; 224
    c176:	52 e4       	ldi	r21, 0x42	; 66
    c178:	c7 01       	movw	r24, r14
    c17a:	b6 01       	movw	r22, r12
    c17c:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    c180:	87 fd       	sbrc	r24, 7
    c182:	07 c0       	rjmp	.+14     	; 0xc192 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    c184:	2c 2f       	mov	r18, r28
    c186:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    c188:	c8 01       	movw	r24, r16
    c18a:	4c 96       	adiw	r24, 0x1c	; 28
    c18c:	82 17       	cp	r24, r18
    c18e:	93 07       	cpc	r25, r19
    c190:	28 f3       	brcs	.-54     	; 0xc15c <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    c192:	04 5e       	subi	r16, 0xE4	; 228
    c194:	1f 4f       	sbci	r17, 0xFF	; 255
    c196:	8c 2f       	mov	r24, r28
    c198:	90 e0       	ldi	r25, 0x00	; 0
    c19a:	08 17       	cp	r16, r24
    c19c:	19 07       	cpc	r17, r25
    c19e:	18 f0       	brcs	.+6      	; 0xc1a6 <update_level+0xda>
	{
		game.level_ended = 1;
    c1a0:	81 e0       	ldi	r24, 0x01	; 1
    c1a2:	80 93 c7 0d 	sts	0x0DC7, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    c1a6:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    c1aa:	81 11       	cpse	r24, r1
    c1ac:	40 c0       	rjmp	.+128    	; 0xc22e <update_level+0x162>
    c1ae:	20 e0       	ldi	r18, 0x00	; 0
    c1b0:	30 e0       	ldi	r19, 0x00	; 0
    c1b2:	a9 01       	movw	r20, r18
    c1b4:	60 91 c8 0d 	lds	r22, 0x0DC8
    c1b8:	70 91 c9 0d 	lds	r23, 0x0DC9
    c1bc:	80 91 ca 0d 	lds	r24, 0x0DCA
    c1c0:	90 91 cb 0d 	lds	r25, 0x0DCB
    c1c4:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    c1c8:	18 16       	cp	r1, r24
    c1ca:	8c f5       	brge	.+98     	; 0xc22e <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    c1cc:	c0 91 ac 0d 	lds	r28, 0x0DAC
    c1d0:	d0 91 ad 0d 	lds	r29, 0x0DAD
    c1d4:	be 01       	movw	r22, r28
    c1d6:	80 e0       	ldi	r24, 0x00	; 0
    c1d8:	90 e0       	ldi	r25, 0x00	; 0
    c1da:	0e 94 5b 63 	call	0xc6b6	; 0xc6b6 <__floatunsisf>
    c1de:	9b 01       	movw	r18, r22
    c1e0:	ac 01       	movw	r20, r24
    c1e2:	60 91 d0 0d 	lds	r22, 0x0DD0
    c1e6:	70 91 d1 0d 	lds	r23, 0x0DD1
    c1ea:	80 91 d2 0d 	lds	r24, 0x0DD2
    c1ee:	90 91 d3 0d 	lds	r25, 0x0DD3
    c1f2:	0e 94 c6 62 	call	0xc58c	; 0xc58c <__subsf3>
    c1f6:	20 e0       	ldi	r18, 0x00	; 0
    c1f8:	30 e0       	ldi	r19, 0x00	; 0
    c1fa:	40 ec       	ldi	r20, 0xC0	; 192
    c1fc:	51 e4       	ldi	r21, 0x41	; 65
    c1fe:	0e 94 c7 62 	call	0xc58e	; 0xc58e <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    c202:	20 e0       	ldi	r18, 0x00	; 0
    c204:	30 e0       	ldi	r19, 0x00	; 0
    c206:	48 e3       	ldi	r20, 0x38	; 56
    c208:	53 e4       	ldi	r21, 0x43	; 67
    c20a:	0e 94 0d 64 	call	0xc81a	; 0xc81a <__gesf2>
    c20e:	87 fd       	sbrc	r24, 7
    c210:	0e c0       	rjmp	.+28     	; 0xc22e <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    c212:	83 e0       	ldi	r24, 0x03	; 3
    c214:	d6 95       	lsr	r29
    c216:	c7 95       	ror	r28
    c218:	8a 95       	dec	r24
    c21a:	e1 f7       	brne	.-8      	; 0xc214 <update_level+0x148>
    c21c:	69 96       	adiw	r28, 0x19	; 25
    c21e:	80 91 bd 0d 	lds	r24, 0x0DBD
    c222:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    c224:	c8 17       	cp	r28, r24
    c226:	d9 07       	cpc	r29, r25
    c228:	10 f4       	brcc	.+4      	; 0xc22e <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    c22a:	0e 94 94 4a 	call	0x9528	; 0x9528 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    c22e:	21 e0       	ldi	r18, 0x01	; 1
    c230:	40 91 dd 0d 	lds	r20, 0x0DDD
    c234:	6d e1       	ldi	r22, 0x1D	; 29
    c236:	89 e0       	ldi	r24, 0x09	; 9
    c238:	0e 94 8f 44 	call	0x891e	; 0x891e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    c23c:	40 91 b2 0d 	lds	r20, 0x0DB2
    c240:	50 91 b3 0d 	lds	r21, 0x0DB3
    c244:	21 e0       	ldi	r18, 0x01	; 1
    c246:	6d e1       	ldi	r22, 0x1D	; 29
    c248:	8b e1       	ldi	r24, 0x1B	; 27
    c24a:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    c24e:	21 e0       	ldi	r18, 0x01	; 1
    c250:	40 91 b7 0d 	lds	r20, 0x0DB7
    c254:	6e e1       	ldi	r22, 0x1E	; 30
    c256:	89 e0       	ldi	r24, 0x09	; 9
    c258:	0e 94 8f 44 	call	0x891e	; 0x891e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    c25c:	40 91 b0 0d 	lds	r20, 0x0DB0
    c260:	50 91 b1 0d 	lds	r21, 0x0DB1
    c264:	21 e0       	ldi	r18, 0x01	; 1
    c266:	6e e1       	ldi	r22, 0x1E	; 30
    c268:	8b e1       	ldi	r24, 0x1B	; 27
    c26a:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    c26e:	40 91 ae 0d 	lds	r20, 0x0DAE
    c272:	50 91 af 0d 	lds	r21, 0x0DAF
    c276:	21 e0       	ldi	r18, 0x01	; 1
    c278:	6f e1       	ldi	r22, 0x1F	; 31
    c27a:	8b e1       	ldi	r24, 0x1B	; 27
    c27c:	0e 94 c0 44 	call	0x8980	; 0x8980 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    c280:	80 91 c7 0d 	lds	r24, 0x0DC7
    c284:	88 23       	and	r24, r24
    c286:	09 f4       	brne	.+2      	; 0xc28a <update_level+0x1be>
    c288:	69 c0       	rjmp	.+210    	; 0xc35c <update_level+0x290>
    c28a:	0e 94 13 46 	call	0x8c26	; 0x8c26 <is_space>
    c28e:	81 11       	cpse	r24, r1
    c290:	56 c0       	rjmp	.+172    	; 0xc33e <update_level+0x272>
    c292:	80 91 d8 0d 	lds	r24, 0x0DD8
    c296:	8e 70       	andi	r24, 0x0E	; 14
    c298:	09 f4       	brne	.+2      	; 0xc29c <update_level+0x1d0>
    c29a:	60 c0       	rjmp	.+192    	; 0xc35c <update_level+0x290>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    c29c:	40 e0       	ldi	r20, 0x00	; 0
    c29e:	68 eb       	ldi	r22, 0xB8	; 184
    c2a0:	7d e2       	ldi	r23, 0x2D	; 45
    c2a2:	80 e0       	ldi	r24, 0x00	; 0
    c2a4:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    c2a8:	61 e0       	ldi	r22, 0x01	; 1
    c2aa:	8e e0       	ldi	r24, 0x0E	; 14
    c2ac:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
		LBRotateSprites();
    c2b0:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
		map_ship();
    c2b4:	0e 94 af 4a 	call	0x955e	; 0x955e <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    c2b8:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    c2ba:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    c2bc:	81 e0       	ldi	r24, 0x01	; 1
    c2be:	90 e0       	ldi	r25, 0x00	; 0
    c2c0:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    c2c4:	8c 2f       	mov	r24, r28
    c2c6:	90 e0       	ldi	r25, 0x00	; 0
    c2c8:	80 3a       	cpi	r24, 0xA0	; 160
    c2ca:	91 05       	cpc	r25, r1
    c2cc:	6c f0       	brlt	.+26     	; 0xc2e8 <update_level+0x21c>
			{
				clear_sprites(0, game.player.width*game.player.height);
    c2ce:	80 91 dc 0d 	lds	r24, 0x0DDC
    c2d2:	60 91 db 0d 	lds	r22, 0x0DDB
    c2d6:	86 9f       	mul	r24, r22
    c2d8:	60 2d       	mov	r22, r0
    c2da:	11 24       	eor	r1, r1
    c2dc:	80 e0       	ldi	r24, 0x00	; 0
    c2de:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
				LBRotateSprites();
    c2e2:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
				ship_increment = -3;
    c2e6:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    c2e8:	84 e3       	ldi	r24, 0x34	; 52
    c2ea:	9e e0       	ldi	r25, 0x0E	; 14
    c2ec:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <LBGetNextFrame>
    c2f0:	40 e0       	ldi	r20, 0x00	; 0
    c2f2:	bc 01       	movw	r22, r24
    c2f4:	86 e0       	ldi	r24, 0x06	; 6
    c2f6:	0e 94 44 45 	call	0x8a88	; 0x8a88 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    c2fa:	c7 01       	movw	r24, r14
    c2fc:	b6 01       	movw	r22, r12
    c2fe:	0e 94 2f 63 	call	0xc65e	; 0xc65e <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    c302:	02 e0       	ldi	r16, 0x02	; 2
    c304:	24 e0       	ldi	r18, 0x04	; 4
    c306:	4c 2f       	mov	r20, r28
    c308:	86 e0       	ldi	r24, 0x06	; 6
    c30a:	0e 94 96 45 	call	0x8b2c	; 0x8b2c <LBMoveSprite>
			ship_y += ship_increment;
    c30e:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    c310:	99 f4       	brne	.+38     	; 0xc338 <update_level+0x26c>
			{
				clear_sprites(6, 8);
    c312:	68 e0       	ldi	r22, 0x08	; 8
    c314:	86 e0       	ldi	r24, 0x06	; 6
    c316:	0e 94 c7 56 	call	0xad8e	; 0xad8e <clear_sprites>
				LBRotateSprites();
    c31a:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    c31e:	64 e6       	ldi	r22, 0x64	; 100
    c320:	70 e0       	ldi	r23, 0x00	; 0
    c322:	87 e2       	ldi	r24, 0x27	; 39
    c324:	9b e0       	ldi	r25, 0x0B	; 11
    c326:	0e 94 05 5c 	call	0xb80a	; 0xb80a <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    c32a:	80 91 b9 0d 	lds	r24, 0x0DB9
    c32e:	00 e0       	ldi	r16, 0x00	; 0
    c330:	23 e0       	ldi	r18, 0x03	; 3
    c332:	4a e1       	ldi	r20, 0x1A	; 26
    c334:	6f ef       	ldi	r22, 0xFF	; 255
    c336:	0f c0       	rjmp	.+30     	; 0xc356 <update_level+0x28a>
				break;
			}
			LBRotateSprites();
    c338:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
		}
    c33c:	bf cf       	rjmp	.-130    	; 0xc2bc <update_level+0x1f0>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    c33e:	64 e6       	ldi	r22, 0x64	; 100
    c340:	70 e0       	ldi	r23, 0x00	; 0
    c342:	87 e2       	ldi	r24, 0x27	; 39
    c344:	9b e0       	ldi	r25, 0x0B	; 11
    c346:	0e 94 05 5c 	call	0xb80a	; 0xb80a <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    c34a:	80 91 b9 0d 	lds	r24, 0x0DB9
    c34e:	07 ec       	ldi	r16, 0xC7	; 199
    c350:	2d ef       	ldi	r18, 0xFD	; 253
    c352:	4c e1       	ldi	r20, 0x1C	; 28
    c354:	61 e0       	ldi	r22, 0x01	; 1
    c356:	8f 5f       	subi	r24, 0xFF	; 255
    c358:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <planet_transition>
	}
	
}
    c35c:	df 91       	pop	r29
    c35e:	cf 91       	pop	r28
    c360:	1f 91       	pop	r17
    c362:	0f 91       	pop	r16
    c364:	ff 90       	pop	r15
    c366:	ef 90       	pop	r14
    c368:	df 90       	pop	r13
    c36a:	cf 90       	pop	r12
    c36c:	08 95       	ret

0000c36e <update_pause>:
		}
	}
}

void update_pause()
{
    c36e:	ef 92       	push	r14
    c370:	ff 92       	push	r15
    c372:	0f 93       	push	r16
    c374:	1f 93       	push	r17
    c376:	cf 93       	push	r28
    c378:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    c37a:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    c37e:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    c382:	80 91 9e 0f 	lds	r24, 0x0F9E
    c386:	83 ff       	sbrs	r24, 3
    c388:	63 c0       	rjmp	.+198    	; 0xc450 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    c38a:	06 95       	lsr	r16
    c38c:	06 95       	lsr	r16
    c38e:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c390:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    c392:	c6 95       	lsr	r28
    c394:	c6 95       	lsr	r28
    c396:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    c398:	d0 e0       	ldi	r29, 0x00	; 0
    c39a:	c8 01       	movw	r24, r16
    c39c:	06 96       	adiw	r24, 0x06	; 6
    c39e:	2e e1       	ldi	r18, 0x1E	; 30
    c3a0:	e2 2e       	mov	r14, r18
    c3a2:	f1 2c       	mov	r15, r1
    c3a4:	b7 01       	movw	r22, r14
    c3a6:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    c3aa:	9e 01       	movw	r18, r28
    c3ac:	28 5f       	subi	r18, 0xF8	; 248
    c3ae:	3f 4f       	sbci	r19, 0xFF	; 255
    c3b0:	4a e0       	ldi	r20, 0x0A	; 10
    c3b2:	5e e4       	ldi	r21, 0x4E	; 78
    c3b4:	68 2f       	mov	r22, r24
    c3b6:	82 2f       	mov	r24, r18
    c3b8:	8f 71       	andi	r24, 0x1F	; 31
    c3ba:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    c3be:	c8 01       	movw	r24, r16
    c3c0:	09 96       	adiw	r24, 0x09	; 9
    c3c2:	b7 01       	movw	r22, r14
    c3c4:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    c3c8:	9e 01       	movw	r18, r28
    c3ca:	23 5f       	subi	r18, 0xF3	; 243
    c3cc:	3f 4f       	sbci	r19, 0xFF	; 255
    c3ce:	43 e3       	ldi	r20, 0x33	; 51
    c3d0:	5b e0       	ldi	r21, 0x0B	; 11
    c3d2:	68 2f       	mov	r22, r24
    c3d4:	82 2f       	mov	r24, r18
    c3d6:	8f 71       	andi	r24, 0x1F	; 31
    c3d8:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    c3dc:	c8 01       	movw	r24, r16
    c3de:	0c 96       	adiw	r24, 0x0c	; 12
    c3e0:	b7 01       	movw	r22, r14
    c3e2:	0e 94 ac 62 	call	0xc558	; 0xc558 <__divmodhi4>
    c3e6:	2a 96       	adiw	r28, 0x0a	; 10
    c3e8:	49 e3       	ldi	r20, 0x39	; 57
    c3ea:	5b e0       	ldi	r21, 0x0B	; 11
    c3ec:	68 2f       	mov	r22, r24
    c3ee:	8c 2f       	mov	r24, r28
    c3f0:	8f 71       	andi	r24, 0x1F	; 31
    c3f2:	0e 94 73 44 	call	0x88e6	; 0x88e6 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    c3f6:	64 e1       	ldi	r22, 0x14	; 20
    c3f8:	80 e0       	ldi	r24, 0x00	; 0
    c3fa:	0e 94 03 58 	call	0xb006	; 0xb006 <hide_sprites>
		LBRotateSprites();
    c3fe:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    c402:	81 e0       	ldi	r24, 0x01	; 1
    c404:	90 e0       	ldi	r25, 0x00	; 0
    c406:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    c40a:	60 e0       	ldi	r22, 0x00	; 0
    c40c:	8e e9       	ldi	r24, 0x9E	; 158
    c40e:	9f e0       	ldi	r25, 0x0F	; 15
    c410:	0e 94 08 44 	call	0x8810	; 0x8810 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    c414:	80 91 9e 0f 	lds	r24, 0x0F9E
    c418:	90 91 9f 0f 	lds	r25, 0x0F9F
    c41c:	83 ff       	sbrs	r24, 3
    c41e:	08 c0       	rjmp	.+16     	; 0xc430 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    c420:	df 91       	pop	r29
    c422:	cf 91       	pop	r28
    c424:	1f 91       	pop	r17
    c426:	0f 91       	pop	r16
    c428:	ff 90       	pop	r15
    c42a:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    c42c:	0c 94 ce 48 	jmp	0x919c	; 0x919c <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    c430:	91 ff       	sbrs	r25, 1
    c432:	e7 cf       	rjmp	.-50     	; 0xc402 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    c434:	60 e0       	ldi	r22, 0x00	; 0
    c436:	70 e0       	ldi	r23, 0x00	; 0
    c438:	87 e1       	ldi	r24, 0x17	; 23
    c43a:	9b e0       	ldi	r25, 0x0B	; 11
    c43c:	0e 94 05 5c 	call	0xb80a	; 0xb80a <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    c440:	df 91       	pop	r29
    c442:	cf 91       	pop	r28
    c444:	1f 91       	pop	r17
    c446:	0f 91       	pop	r16
    c448:	ff 90       	pop	r15
    c44a:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    c44c:	0c 94 12 5b 	jmp	0xb624	; 0xb624 <exit_game>
				break;
			}
		}
	}
}
    c450:	df 91       	pop	r29
    c452:	cf 91       	pop	r28
    c454:	1f 91       	pop	r17
    c456:	0f 91       	pop	r16
    c458:	ff 90       	pop	r15
    c45a:	ef 90       	pop	r14
    c45c:	08 95       	ret

0000c45e <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    c45e:	0e 94 24 35 	call	0x6a48	; 0x6a48 <GetTrueRandomSeed>
    c462:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    c466:	8f e1       	ldi	r24, 0x1F	; 31
    c468:	9d e1       	ldi	r25, 0x1D	; 29
    c46a:	0e 94 7e 37 	call	0x6efc	; 0x6efc <InitMusicPlayer>
	ClearVram();
    c46e:	0e 94 ac 34 	call	0x6958	; 0x6958 <ClearVram>
	SetMasterVolume(0x05);
    c472:	85 e0       	ldi	r24, 0x05	; 5
    c474:	0e 94 32 3b 	call	0x7664	; 0x7664 <SetMasterVolume>
	SetTileTable(tiles_data);
    c478:	87 ee       	ldi	r24, 0xE7	; 231
    c47a:	9d e2       	ldi	r25, 0x2D	; 45
    c47c:	0e 94 c7 34 	call	0x698e	; 0x698e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    c480:	8e e9       	ldi	r24, 0x9E	; 158
    c482:	9e e1       	ldi	r25, 0x1E	; 30
    c484:	0e 94 a7 34 	call	0x694e	; 0x694e <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    c488:	87 e6       	ldi	r24, 0x67	; 103
    c48a:	9d e4       	ldi	r25, 0x4D	; 77
    c48c:	90 93 83 0d 	sts	0x0D83, r25
    c490:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    c494:	0e 94 17 46 	call	0x8c2e	; 0x8c2e <init_default_high_scores>
	load_splash();
    c498:	0e 94 cc 59 	call	0xb398	; 0xb398 <load_splash>
	while (1)
	{
		WaitVsync(1);
    c49c:	81 e0       	ldi	r24, 0x01	; 1
    c49e:	90 e0       	ldi	r25, 0x00	; 0
    c4a0:	0e 94 45 43 	call	0x868a	; 0x868a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    c4a4:	60 e0       	ldi	r22, 0x00	; 0
    c4a6:	8e e9       	ldi	r24, 0x9E	; 158
    c4a8:	9f e0       	ldi	r25, 0x0F	; 15
    c4aa:	0e 94 08 44 	call	0x8810	; 0x8810 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    c4ae:	80 91 b8 0d 	lds	r24, 0x0DB8
    c4b2:	82 30       	cpi	r24, 0x02	; 2
    c4b4:	b9 f4       	brne	.+46     	; 0xc4e4 <main+0x86>
		{
			update_level();
    c4b6:	0e 94 66 60 	call	0xc0cc	; 0xc0cc <update_level>
			if (update_player())
    c4ba:	0e 94 76 5d 	call	0xbaec	; 0xbaec <update_player>
    c4be:	88 23       	and	r24, r24
    c4c0:	d1 f0       	breq	.+52     	; 0xc4f6 <main+0x98>
			{
				update_shot();
    c4c2:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <update_shot>
				update_enemies();
    c4c6:	0e 94 68 53 	call	0xa6d0	; 0xa6d0 <update_enemies>
				update_enemy_shots();
    c4ca:	0e 94 ad 53 	call	0xa75a	; 0xa75a <update_enemy_shots>
				animate_player();
    c4ce:	0e 94 b3 52 	call	0xa566	; 0xa566 <animate_player>
				animate_shot();
    c4d2:	0e 94 2f 50 	call	0xa05e	; 0xa05e <animate_shot>
				animate_enemies();
    c4d6:	0e 94 47 54 	call	0xa88e	; 0xa88e <animate_enemies>
				animate_enemy_shots();
    c4da:	0e 94 8a 55 	call	0xab14	; 0xab14 <animate_enemy_shots>
				update_pause();
    c4de:	0e 94 b7 61 	call	0xc36e	; 0xc36e <update_pause>
    c4e2:	09 c0       	rjmp	.+18     	; 0xc4f6 <main+0x98>
			}
		}
		else if (game.current_screen == SPLASH)
    c4e4:	81 11       	cpse	r24, r1
    c4e6:	03 c0       	rjmp	.+6      	; 0xc4ee <main+0x90>
		{
			update_splash();
    c4e8:	0e 94 20 5b 	call	0xb640	; 0xb640 <update_splash>
    c4ec:	04 c0       	rjmp	.+8      	; 0xc4f6 <main+0x98>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    c4ee:	81 30       	cpi	r24, 0x01	; 1
    c4f0:	11 f4       	brne	.+4      	; 0xc4f6 <main+0x98>
		{
			update_high_scores();
    c4f2:	0e 94 67 5b 	call	0xb6ce	; 0xb6ce <update_high_scores>
			
		}
		LBRotateSprites();
    c4f6:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <LBRotateSprites>
	}
    c4fa:	d0 cf       	rjmp	.-96     	; 0xc49c <main+0x3e>

0000c4fc <__udivmodqi4>:
    c4fc:	99 1b       	sub	r25, r25
    c4fe:	79 e0       	ldi	r23, 0x09	; 9
    c500:	04 c0       	rjmp	.+8      	; 0xc50a <__udivmodqi4_ep>

0000c502 <__udivmodqi4_loop>:
    c502:	99 1f       	adc	r25, r25
    c504:	96 17       	cp	r25, r22
    c506:	08 f0       	brcs	.+2      	; 0xc50a <__udivmodqi4_ep>
    c508:	96 1b       	sub	r25, r22

0000c50a <__udivmodqi4_ep>:
    c50a:	88 1f       	adc	r24, r24
    c50c:	7a 95       	dec	r23
    c50e:	c9 f7       	brne	.-14     	; 0xc502 <__udivmodqi4_loop>
    c510:	80 95       	com	r24
    c512:	08 95       	ret

0000c514 <__divmodqi4>:
    c514:	87 fb       	bst	r24, 7
    c516:	08 2e       	mov	r0, r24
    c518:	06 26       	eor	r0, r22
    c51a:	87 fd       	sbrc	r24, 7
    c51c:	81 95       	neg	r24
    c51e:	67 fd       	sbrc	r22, 7
    c520:	61 95       	neg	r22
    c522:	0e 94 7e 62 	call	0xc4fc	; 0xc4fc <__udivmodqi4>
    c526:	0e f4       	brtc	.+2      	; 0xc52a <__divmodqi4_1>
    c528:	91 95       	neg	r25

0000c52a <__divmodqi4_1>:
    c52a:	07 fc       	sbrc	r0, 7
    c52c:	81 95       	neg	r24

0000c52e <__divmodqi4_exit>:
    c52e:	08 95       	ret

0000c530 <__udivmodhi4>:
    c530:	aa 1b       	sub	r26, r26
    c532:	bb 1b       	sub	r27, r27
    c534:	51 e1       	ldi	r21, 0x11	; 17
    c536:	07 c0       	rjmp	.+14     	; 0xc546 <__udivmodhi4_ep>

0000c538 <__udivmodhi4_loop>:
    c538:	aa 1f       	adc	r26, r26
    c53a:	bb 1f       	adc	r27, r27
    c53c:	a6 17       	cp	r26, r22
    c53e:	b7 07       	cpc	r27, r23
    c540:	10 f0       	brcs	.+4      	; 0xc546 <__udivmodhi4_ep>
    c542:	a6 1b       	sub	r26, r22
    c544:	b7 0b       	sbc	r27, r23

0000c546 <__udivmodhi4_ep>:
    c546:	88 1f       	adc	r24, r24
    c548:	99 1f       	adc	r25, r25
    c54a:	5a 95       	dec	r21
    c54c:	a9 f7       	brne	.-22     	; 0xc538 <__udivmodhi4_loop>
    c54e:	80 95       	com	r24
    c550:	90 95       	com	r25
    c552:	bc 01       	movw	r22, r24
    c554:	cd 01       	movw	r24, r26
    c556:	08 95       	ret

0000c558 <__divmodhi4>:
    c558:	97 fb       	bst	r25, 7
    c55a:	07 2e       	mov	r0, r23
    c55c:	16 f4       	brtc	.+4      	; 0xc562 <__divmodhi4+0xa>
    c55e:	00 94       	com	r0
    c560:	07 d0       	rcall	.+14     	; 0xc570 <__divmodhi4_neg1>
    c562:	77 fd       	sbrc	r23, 7
    c564:	09 d0       	rcall	.+18     	; 0xc578 <__divmodhi4_neg2>
    c566:	0e 94 98 62 	call	0xc530	; 0xc530 <__udivmodhi4>
    c56a:	07 fc       	sbrc	r0, 7
    c56c:	05 d0       	rcall	.+10     	; 0xc578 <__divmodhi4_neg2>
    c56e:	3e f4       	brtc	.+14     	; 0xc57e <__divmodhi4_exit>

0000c570 <__divmodhi4_neg1>:
    c570:	90 95       	com	r25
    c572:	81 95       	neg	r24
    c574:	9f 4f       	sbci	r25, 0xFF	; 255
    c576:	08 95       	ret

0000c578 <__divmodhi4_neg2>:
    c578:	70 95       	com	r23
    c57a:	61 95       	neg	r22
    c57c:	7f 4f       	sbci	r23, 0xFF	; 255

0000c57e <__divmodhi4_exit>:
    c57e:	08 95       	ret

0000c580 <__tablejump2__>:
    c580:	ee 0f       	add	r30, r30
    c582:	ff 1f       	adc	r31, r31
    c584:	05 90       	lpm	r0, Z+
    c586:	f4 91       	lpm	r31, Z
    c588:	e0 2d       	mov	r30, r0
    c58a:	09 94       	ijmp

0000c58c <__subsf3>:
    c58c:	50 58       	subi	r21, 0x80	; 128

0000c58e <__addsf3>:
    c58e:	bb 27       	eor	r27, r27
    c590:	aa 27       	eor	r26, r26
    c592:	0e d0       	rcall	.+28     	; 0xc5b0 <__addsf3x>
    c594:	08 c1       	rjmp	.+528    	; 0xc7a6 <__fp_round>
    c596:	f9 d0       	rcall	.+498    	; 0xc78a <__fp_pscA>
    c598:	30 f0       	brcs	.+12     	; 0xc5a6 <__addsf3+0x18>
    c59a:	fe d0       	rcall	.+508    	; 0xc798 <__fp_pscB>
    c59c:	20 f0       	brcs	.+8      	; 0xc5a6 <__addsf3+0x18>
    c59e:	31 f4       	brne	.+12     	; 0xc5ac <__addsf3+0x1e>
    c5a0:	9f 3f       	cpi	r25, 0xFF	; 255
    c5a2:	11 f4       	brne	.+4      	; 0xc5a8 <__addsf3+0x1a>
    c5a4:	1e f4       	brtc	.+6      	; 0xc5ac <__addsf3+0x1e>
    c5a6:	ee c0       	rjmp	.+476    	; 0xc784 <__fp_nan>
    c5a8:	0e f4       	brtc	.+2      	; 0xc5ac <__addsf3+0x1e>
    c5aa:	e0 95       	com	r30
    c5ac:	e7 fb       	bst	r30, 7
    c5ae:	e4 c0       	rjmp	.+456    	; 0xc778 <__fp_inf>

0000c5b0 <__addsf3x>:
    c5b0:	e9 2f       	mov	r30, r25
    c5b2:	0a d1       	rcall	.+532    	; 0xc7c8 <__fp_split3>
    c5b4:	80 f3       	brcs	.-32     	; 0xc596 <__addsf3+0x8>
    c5b6:	ba 17       	cp	r27, r26
    c5b8:	62 07       	cpc	r22, r18
    c5ba:	73 07       	cpc	r23, r19
    c5bc:	84 07       	cpc	r24, r20
    c5be:	95 07       	cpc	r25, r21
    c5c0:	18 f0       	brcs	.+6      	; 0xc5c8 <__addsf3x+0x18>
    c5c2:	71 f4       	brne	.+28     	; 0xc5e0 <__addsf3x+0x30>
    c5c4:	9e f5       	brtc	.+102    	; 0xc62c <__addsf3x+0x7c>
    c5c6:	22 c1       	rjmp	.+580    	; 0xc80c <__fp_zero>
    c5c8:	0e f4       	brtc	.+2      	; 0xc5cc <__addsf3x+0x1c>
    c5ca:	e0 95       	com	r30
    c5cc:	0b 2e       	mov	r0, r27
    c5ce:	ba 2f       	mov	r27, r26
    c5d0:	a0 2d       	mov	r26, r0
    c5d2:	0b 01       	movw	r0, r22
    c5d4:	b9 01       	movw	r22, r18
    c5d6:	90 01       	movw	r18, r0
    c5d8:	0c 01       	movw	r0, r24
    c5da:	ca 01       	movw	r24, r20
    c5dc:	a0 01       	movw	r20, r0
    c5de:	11 24       	eor	r1, r1
    c5e0:	ff 27       	eor	r31, r31
    c5e2:	59 1b       	sub	r21, r25
    c5e4:	99 f0       	breq	.+38     	; 0xc60c <__addsf3x+0x5c>
    c5e6:	59 3f       	cpi	r21, 0xF9	; 249
    c5e8:	50 f4       	brcc	.+20     	; 0xc5fe <__addsf3x+0x4e>
    c5ea:	50 3e       	cpi	r21, 0xE0	; 224
    c5ec:	68 f1       	brcs	.+90     	; 0xc648 <__addsf3x+0x98>
    c5ee:	1a 16       	cp	r1, r26
    c5f0:	f0 40       	sbci	r31, 0x00	; 0
    c5f2:	a2 2f       	mov	r26, r18
    c5f4:	23 2f       	mov	r18, r19
    c5f6:	34 2f       	mov	r19, r20
    c5f8:	44 27       	eor	r20, r20
    c5fa:	58 5f       	subi	r21, 0xF8	; 248
    c5fc:	f3 cf       	rjmp	.-26     	; 0xc5e4 <__addsf3x+0x34>
    c5fe:	46 95       	lsr	r20
    c600:	37 95       	ror	r19
    c602:	27 95       	ror	r18
    c604:	a7 95       	ror	r26
    c606:	f0 40       	sbci	r31, 0x00	; 0
    c608:	53 95       	inc	r21
    c60a:	c9 f7       	brne	.-14     	; 0xc5fe <__addsf3x+0x4e>
    c60c:	7e f4       	brtc	.+30     	; 0xc62c <__addsf3x+0x7c>
    c60e:	1f 16       	cp	r1, r31
    c610:	ba 0b       	sbc	r27, r26
    c612:	62 0b       	sbc	r22, r18
    c614:	73 0b       	sbc	r23, r19
    c616:	84 0b       	sbc	r24, r20
    c618:	ba f0       	brmi	.+46     	; 0xc648 <__addsf3x+0x98>
    c61a:	91 50       	subi	r25, 0x01	; 1
    c61c:	a1 f0       	breq	.+40     	; 0xc646 <__addsf3x+0x96>
    c61e:	ff 0f       	add	r31, r31
    c620:	bb 1f       	adc	r27, r27
    c622:	66 1f       	adc	r22, r22
    c624:	77 1f       	adc	r23, r23
    c626:	88 1f       	adc	r24, r24
    c628:	c2 f7       	brpl	.-16     	; 0xc61a <__addsf3x+0x6a>
    c62a:	0e c0       	rjmp	.+28     	; 0xc648 <__addsf3x+0x98>
    c62c:	ba 0f       	add	r27, r26
    c62e:	62 1f       	adc	r22, r18
    c630:	73 1f       	adc	r23, r19
    c632:	84 1f       	adc	r24, r20
    c634:	48 f4       	brcc	.+18     	; 0xc648 <__addsf3x+0x98>
    c636:	87 95       	ror	r24
    c638:	77 95       	ror	r23
    c63a:	67 95       	ror	r22
    c63c:	b7 95       	ror	r27
    c63e:	f7 95       	ror	r31
    c640:	9e 3f       	cpi	r25, 0xFE	; 254
    c642:	08 f0       	brcs	.+2      	; 0xc646 <__addsf3x+0x96>
    c644:	b3 cf       	rjmp	.-154    	; 0xc5ac <__addsf3+0x1e>
    c646:	93 95       	inc	r25
    c648:	88 0f       	add	r24, r24
    c64a:	08 f0       	brcs	.+2      	; 0xc64e <__addsf3x+0x9e>
    c64c:	99 27       	eor	r25, r25
    c64e:	ee 0f       	add	r30, r30
    c650:	97 95       	ror	r25
    c652:	87 95       	ror	r24
    c654:	08 95       	ret

0000c656 <__cmpsf2>:
    c656:	6c d0       	rcall	.+216    	; 0xc730 <__fp_cmp>
    c658:	08 f4       	brcc	.+2      	; 0xc65c <__cmpsf2+0x6>
    c65a:	81 e0       	ldi	r24, 0x01	; 1
    c65c:	08 95       	ret

0000c65e <__fixunssfsi>:
    c65e:	bc d0       	rcall	.+376    	; 0xc7d8 <__fp_splitA>
    c660:	88 f0       	brcs	.+34     	; 0xc684 <__fixunssfsi+0x26>
    c662:	9f 57       	subi	r25, 0x7F	; 127
    c664:	90 f0       	brcs	.+36     	; 0xc68a <__fixunssfsi+0x2c>
    c666:	b9 2f       	mov	r27, r25
    c668:	99 27       	eor	r25, r25
    c66a:	b7 51       	subi	r27, 0x17	; 23
    c66c:	a0 f0       	brcs	.+40     	; 0xc696 <__fixunssfsi+0x38>
    c66e:	d1 f0       	breq	.+52     	; 0xc6a4 <__fixunssfsi+0x46>
    c670:	66 0f       	add	r22, r22
    c672:	77 1f       	adc	r23, r23
    c674:	88 1f       	adc	r24, r24
    c676:	99 1f       	adc	r25, r25
    c678:	1a f0       	brmi	.+6      	; 0xc680 <__fixunssfsi+0x22>
    c67a:	ba 95       	dec	r27
    c67c:	c9 f7       	brne	.-14     	; 0xc670 <__fixunssfsi+0x12>
    c67e:	12 c0       	rjmp	.+36     	; 0xc6a4 <__fixunssfsi+0x46>
    c680:	b1 30       	cpi	r27, 0x01	; 1
    c682:	81 f0       	breq	.+32     	; 0xc6a4 <__fixunssfsi+0x46>
    c684:	c3 d0       	rcall	.+390    	; 0xc80c <__fp_zero>
    c686:	b1 e0       	ldi	r27, 0x01	; 1
    c688:	08 95       	ret
    c68a:	c0 c0       	rjmp	.+384    	; 0xc80c <__fp_zero>
    c68c:	67 2f       	mov	r22, r23
    c68e:	78 2f       	mov	r23, r24
    c690:	88 27       	eor	r24, r24
    c692:	b8 5f       	subi	r27, 0xF8	; 248
    c694:	39 f0       	breq	.+14     	; 0xc6a4 <__fixunssfsi+0x46>
    c696:	b9 3f       	cpi	r27, 0xF9	; 249
    c698:	cc f3       	brlt	.-14     	; 0xc68c <__fixunssfsi+0x2e>
    c69a:	86 95       	lsr	r24
    c69c:	77 95       	ror	r23
    c69e:	67 95       	ror	r22
    c6a0:	b3 95       	inc	r27
    c6a2:	d9 f7       	brne	.-10     	; 0xc69a <__fixunssfsi+0x3c>
    c6a4:	3e f4       	brtc	.+14     	; 0xc6b4 <__fixunssfsi+0x56>
    c6a6:	90 95       	com	r25
    c6a8:	80 95       	com	r24
    c6aa:	70 95       	com	r23
    c6ac:	61 95       	neg	r22
    c6ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c6b0:	8f 4f       	sbci	r24, 0xFF	; 255
    c6b2:	9f 4f       	sbci	r25, 0xFF	; 255
    c6b4:	08 95       	ret

0000c6b6 <__floatunsisf>:
    c6b6:	e8 94       	clt
    c6b8:	09 c0       	rjmp	.+18     	; 0xc6cc <__floatsisf+0x12>

0000c6ba <__floatsisf>:
    c6ba:	97 fb       	bst	r25, 7
    c6bc:	3e f4       	brtc	.+14     	; 0xc6cc <__floatsisf+0x12>
    c6be:	90 95       	com	r25
    c6c0:	80 95       	com	r24
    c6c2:	70 95       	com	r23
    c6c4:	61 95       	neg	r22
    c6c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c6c8:	8f 4f       	sbci	r24, 0xFF	; 255
    c6ca:	9f 4f       	sbci	r25, 0xFF	; 255
    c6cc:	99 23       	and	r25, r25
    c6ce:	a9 f0       	breq	.+42     	; 0xc6fa <__floatsisf+0x40>
    c6d0:	f9 2f       	mov	r31, r25
    c6d2:	96 e9       	ldi	r25, 0x96	; 150
    c6d4:	bb 27       	eor	r27, r27
    c6d6:	93 95       	inc	r25
    c6d8:	f6 95       	lsr	r31
    c6da:	87 95       	ror	r24
    c6dc:	77 95       	ror	r23
    c6de:	67 95       	ror	r22
    c6e0:	b7 95       	ror	r27
    c6e2:	f1 11       	cpse	r31, r1
    c6e4:	f8 cf       	rjmp	.-16     	; 0xc6d6 <__floatsisf+0x1c>
    c6e6:	fa f4       	brpl	.+62     	; 0xc726 <__floatsisf+0x6c>
    c6e8:	bb 0f       	add	r27, r27
    c6ea:	11 f4       	brne	.+4      	; 0xc6f0 <__floatsisf+0x36>
    c6ec:	60 ff       	sbrs	r22, 0
    c6ee:	1b c0       	rjmp	.+54     	; 0xc726 <__floatsisf+0x6c>
    c6f0:	6f 5f       	subi	r22, 0xFF	; 255
    c6f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c6f4:	8f 4f       	sbci	r24, 0xFF	; 255
    c6f6:	9f 4f       	sbci	r25, 0xFF	; 255
    c6f8:	16 c0       	rjmp	.+44     	; 0xc726 <__floatsisf+0x6c>
    c6fa:	88 23       	and	r24, r24
    c6fc:	11 f0       	breq	.+4      	; 0xc702 <__floatsisf+0x48>
    c6fe:	96 e9       	ldi	r25, 0x96	; 150
    c700:	11 c0       	rjmp	.+34     	; 0xc724 <__floatsisf+0x6a>
    c702:	77 23       	and	r23, r23
    c704:	21 f0       	breq	.+8      	; 0xc70e <__floatsisf+0x54>
    c706:	9e e8       	ldi	r25, 0x8E	; 142
    c708:	87 2f       	mov	r24, r23
    c70a:	76 2f       	mov	r23, r22
    c70c:	05 c0       	rjmp	.+10     	; 0xc718 <__floatsisf+0x5e>
    c70e:	66 23       	and	r22, r22
    c710:	71 f0       	breq	.+28     	; 0xc72e <__floatsisf+0x74>
    c712:	96 e8       	ldi	r25, 0x86	; 134
    c714:	86 2f       	mov	r24, r22
    c716:	70 e0       	ldi	r23, 0x00	; 0
    c718:	60 e0       	ldi	r22, 0x00	; 0
    c71a:	2a f0       	brmi	.+10     	; 0xc726 <__floatsisf+0x6c>
    c71c:	9a 95       	dec	r25
    c71e:	66 0f       	add	r22, r22
    c720:	77 1f       	adc	r23, r23
    c722:	88 1f       	adc	r24, r24
    c724:	da f7       	brpl	.-10     	; 0xc71c <__floatsisf+0x62>
    c726:	88 0f       	add	r24, r24
    c728:	96 95       	lsr	r25
    c72a:	87 95       	ror	r24
    c72c:	97 f9       	bld	r25, 7
    c72e:	08 95       	ret

0000c730 <__fp_cmp>:
    c730:	99 0f       	add	r25, r25
    c732:	00 08       	sbc	r0, r0
    c734:	55 0f       	add	r21, r21
    c736:	aa 0b       	sbc	r26, r26
    c738:	e0 e8       	ldi	r30, 0x80	; 128
    c73a:	fe ef       	ldi	r31, 0xFE	; 254
    c73c:	16 16       	cp	r1, r22
    c73e:	17 06       	cpc	r1, r23
    c740:	e8 07       	cpc	r30, r24
    c742:	f9 07       	cpc	r31, r25
    c744:	c0 f0       	brcs	.+48     	; 0xc776 <__fp_cmp+0x46>
    c746:	12 16       	cp	r1, r18
    c748:	13 06       	cpc	r1, r19
    c74a:	e4 07       	cpc	r30, r20
    c74c:	f5 07       	cpc	r31, r21
    c74e:	98 f0       	brcs	.+38     	; 0xc776 <__fp_cmp+0x46>
    c750:	62 1b       	sub	r22, r18
    c752:	73 0b       	sbc	r23, r19
    c754:	84 0b       	sbc	r24, r20
    c756:	95 0b       	sbc	r25, r21
    c758:	39 f4       	brne	.+14     	; 0xc768 <__fp_cmp+0x38>
    c75a:	0a 26       	eor	r0, r26
    c75c:	61 f0       	breq	.+24     	; 0xc776 <__fp_cmp+0x46>
    c75e:	23 2b       	or	r18, r19
    c760:	24 2b       	or	r18, r20
    c762:	25 2b       	or	r18, r21
    c764:	21 f4       	brne	.+8      	; 0xc76e <__fp_cmp+0x3e>
    c766:	08 95       	ret
    c768:	0a 26       	eor	r0, r26
    c76a:	09 f4       	brne	.+2      	; 0xc76e <__fp_cmp+0x3e>
    c76c:	a1 40       	sbci	r26, 0x01	; 1
    c76e:	a6 95       	lsr	r26
    c770:	8f ef       	ldi	r24, 0xFF	; 255
    c772:	81 1d       	adc	r24, r1
    c774:	81 1d       	adc	r24, r1
    c776:	08 95       	ret

0000c778 <__fp_inf>:
    c778:	97 f9       	bld	r25, 7
    c77a:	9f 67       	ori	r25, 0x7F	; 127
    c77c:	80 e8       	ldi	r24, 0x80	; 128
    c77e:	70 e0       	ldi	r23, 0x00	; 0
    c780:	60 e0       	ldi	r22, 0x00	; 0
    c782:	08 95       	ret

0000c784 <__fp_nan>:
    c784:	9f ef       	ldi	r25, 0xFF	; 255
    c786:	80 ec       	ldi	r24, 0xC0	; 192
    c788:	08 95       	ret

0000c78a <__fp_pscA>:
    c78a:	00 24       	eor	r0, r0
    c78c:	0a 94       	dec	r0
    c78e:	16 16       	cp	r1, r22
    c790:	17 06       	cpc	r1, r23
    c792:	18 06       	cpc	r1, r24
    c794:	09 06       	cpc	r0, r25
    c796:	08 95       	ret

0000c798 <__fp_pscB>:
    c798:	00 24       	eor	r0, r0
    c79a:	0a 94       	dec	r0
    c79c:	12 16       	cp	r1, r18
    c79e:	13 06       	cpc	r1, r19
    c7a0:	14 06       	cpc	r1, r20
    c7a2:	05 06       	cpc	r0, r21
    c7a4:	08 95       	ret

0000c7a6 <__fp_round>:
    c7a6:	09 2e       	mov	r0, r25
    c7a8:	03 94       	inc	r0
    c7aa:	00 0c       	add	r0, r0
    c7ac:	11 f4       	brne	.+4      	; 0xc7b2 <__fp_round+0xc>
    c7ae:	88 23       	and	r24, r24
    c7b0:	52 f0       	brmi	.+20     	; 0xc7c6 <__fp_round+0x20>
    c7b2:	bb 0f       	add	r27, r27
    c7b4:	40 f4       	brcc	.+16     	; 0xc7c6 <__fp_round+0x20>
    c7b6:	bf 2b       	or	r27, r31
    c7b8:	11 f4       	brne	.+4      	; 0xc7be <__fp_round+0x18>
    c7ba:	60 ff       	sbrs	r22, 0
    c7bc:	04 c0       	rjmp	.+8      	; 0xc7c6 <__fp_round+0x20>
    c7be:	6f 5f       	subi	r22, 0xFF	; 255
    c7c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c7c2:	8f 4f       	sbci	r24, 0xFF	; 255
    c7c4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7c6:	08 95       	ret

0000c7c8 <__fp_split3>:
    c7c8:	57 fd       	sbrc	r21, 7
    c7ca:	90 58       	subi	r25, 0x80	; 128
    c7cc:	44 0f       	add	r20, r20
    c7ce:	55 1f       	adc	r21, r21
    c7d0:	59 f0       	breq	.+22     	; 0xc7e8 <__fp_splitA+0x10>
    c7d2:	5f 3f       	cpi	r21, 0xFF	; 255
    c7d4:	71 f0       	breq	.+28     	; 0xc7f2 <__fp_splitA+0x1a>
    c7d6:	47 95       	ror	r20

0000c7d8 <__fp_splitA>:
    c7d8:	88 0f       	add	r24, r24
    c7da:	97 fb       	bst	r25, 7
    c7dc:	99 1f       	adc	r25, r25
    c7de:	61 f0       	breq	.+24     	; 0xc7f8 <__fp_splitA+0x20>
    c7e0:	9f 3f       	cpi	r25, 0xFF	; 255
    c7e2:	79 f0       	breq	.+30     	; 0xc802 <__fp_splitA+0x2a>
    c7e4:	87 95       	ror	r24
    c7e6:	08 95       	ret
    c7e8:	12 16       	cp	r1, r18
    c7ea:	13 06       	cpc	r1, r19
    c7ec:	14 06       	cpc	r1, r20
    c7ee:	55 1f       	adc	r21, r21
    c7f0:	f2 cf       	rjmp	.-28     	; 0xc7d6 <__fp_split3+0xe>
    c7f2:	46 95       	lsr	r20
    c7f4:	f1 df       	rcall	.-30     	; 0xc7d8 <__fp_splitA>
    c7f6:	08 c0       	rjmp	.+16     	; 0xc808 <__fp_splitA+0x30>
    c7f8:	16 16       	cp	r1, r22
    c7fa:	17 06       	cpc	r1, r23
    c7fc:	18 06       	cpc	r1, r24
    c7fe:	99 1f       	adc	r25, r25
    c800:	f1 cf       	rjmp	.-30     	; 0xc7e4 <__fp_splitA+0xc>
    c802:	86 95       	lsr	r24
    c804:	71 05       	cpc	r23, r1
    c806:	61 05       	cpc	r22, r1
    c808:	08 94       	sec
    c80a:	08 95       	ret

0000c80c <__fp_zero>:
    c80c:	e8 94       	clt

0000c80e <__fp_szero>:
    c80e:	bb 27       	eor	r27, r27
    c810:	66 27       	eor	r22, r22
    c812:	77 27       	eor	r23, r23
    c814:	cb 01       	movw	r24, r22
    c816:	97 f9       	bld	r25, 7
    c818:	08 95       	ret

0000c81a <__gesf2>:
    c81a:	8a df       	rcall	.-236    	; 0xc730 <__fp_cmp>
    c81c:	08 f4       	brcc	.+2      	; 0xc820 <__gesf2+0x6>
    c81e:	8f ef       	ldi	r24, 0xFF	; 255
    c820:	08 95       	ret

0000c822 <__mulsf3>:
    c822:	0b d0       	rcall	.+22     	; 0xc83a <__mulsf3x>
    c824:	c0 cf       	rjmp	.-128    	; 0xc7a6 <__fp_round>
    c826:	b1 df       	rcall	.-158    	; 0xc78a <__fp_pscA>
    c828:	28 f0       	brcs	.+10     	; 0xc834 <__mulsf3+0x12>
    c82a:	b6 df       	rcall	.-148    	; 0xc798 <__fp_pscB>
    c82c:	18 f0       	brcs	.+6      	; 0xc834 <__mulsf3+0x12>
    c82e:	95 23       	and	r25, r21
    c830:	09 f0       	breq	.+2      	; 0xc834 <__mulsf3+0x12>
    c832:	a2 cf       	rjmp	.-188    	; 0xc778 <__fp_inf>
    c834:	a7 cf       	rjmp	.-178    	; 0xc784 <__fp_nan>
    c836:	11 24       	eor	r1, r1
    c838:	ea cf       	rjmp	.-44     	; 0xc80e <__fp_szero>

0000c83a <__mulsf3x>:
    c83a:	c6 df       	rcall	.-116    	; 0xc7c8 <__fp_split3>
    c83c:	a0 f3       	brcs	.-24     	; 0xc826 <__mulsf3+0x4>

0000c83e <__mulsf3_pse>:
    c83e:	95 9f       	mul	r25, r21
    c840:	d1 f3       	breq	.-12     	; 0xc836 <__mulsf3+0x14>
    c842:	95 0f       	add	r25, r21
    c844:	50 e0       	ldi	r21, 0x00	; 0
    c846:	55 1f       	adc	r21, r21
    c848:	62 9f       	mul	r22, r18
    c84a:	f0 01       	movw	r30, r0
    c84c:	72 9f       	mul	r23, r18
    c84e:	bb 27       	eor	r27, r27
    c850:	f0 0d       	add	r31, r0
    c852:	b1 1d       	adc	r27, r1
    c854:	63 9f       	mul	r22, r19
    c856:	aa 27       	eor	r26, r26
    c858:	f0 0d       	add	r31, r0
    c85a:	b1 1d       	adc	r27, r1
    c85c:	aa 1f       	adc	r26, r26
    c85e:	64 9f       	mul	r22, r20
    c860:	66 27       	eor	r22, r22
    c862:	b0 0d       	add	r27, r0
    c864:	a1 1d       	adc	r26, r1
    c866:	66 1f       	adc	r22, r22
    c868:	82 9f       	mul	r24, r18
    c86a:	22 27       	eor	r18, r18
    c86c:	b0 0d       	add	r27, r0
    c86e:	a1 1d       	adc	r26, r1
    c870:	62 1f       	adc	r22, r18
    c872:	73 9f       	mul	r23, r19
    c874:	b0 0d       	add	r27, r0
    c876:	a1 1d       	adc	r26, r1
    c878:	62 1f       	adc	r22, r18
    c87a:	83 9f       	mul	r24, r19
    c87c:	a0 0d       	add	r26, r0
    c87e:	61 1d       	adc	r22, r1
    c880:	22 1f       	adc	r18, r18
    c882:	74 9f       	mul	r23, r20
    c884:	33 27       	eor	r19, r19
    c886:	a0 0d       	add	r26, r0
    c888:	61 1d       	adc	r22, r1
    c88a:	23 1f       	adc	r18, r19
    c88c:	84 9f       	mul	r24, r20
    c88e:	60 0d       	add	r22, r0
    c890:	21 1d       	adc	r18, r1
    c892:	82 2f       	mov	r24, r18
    c894:	76 2f       	mov	r23, r22
    c896:	6a 2f       	mov	r22, r26
    c898:	11 24       	eor	r1, r1
    c89a:	9f 57       	subi	r25, 0x7F	; 127
    c89c:	50 40       	sbci	r21, 0x00	; 0
    c89e:	8a f0       	brmi	.+34     	; 0xc8c2 <__mulsf3_pse+0x84>
    c8a0:	e1 f0       	breq	.+56     	; 0xc8da <__mulsf3_pse+0x9c>
    c8a2:	88 23       	and	r24, r24
    c8a4:	4a f0       	brmi	.+18     	; 0xc8b8 <__mulsf3_pse+0x7a>
    c8a6:	ee 0f       	add	r30, r30
    c8a8:	ff 1f       	adc	r31, r31
    c8aa:	bb 1f       	adc	r27, r27
    c8ac:	66 1f       	adc	r22, r22
    c8ae:	77 1f       	adc	r23, r23
    c8b0:	88 1f       	adc	r24, r24
    c8b2:	91 50       	subi	r25, 0x01	; 1
    c8b4:	50 40       	sbci	r21, 0x00	; 0
    c8b6:	a9 f7       	brne	.-22     	; 0xc8a2 <__mulsf3_pse+0x64>
    c8b8:	9e 3f       	cpi	r25, 0xFE	; 254
    c8ba:	51 05       	cpc	r21, r1
    c8bc:	70 f0       	brcs	.+28     	; 0xc8da <__mulsf3_pse+0x9c>
    c8be:	5c cf       	rjmp	.-328    	; 0xc778 <__fp_inf>
    c8c0:	a6 cf       	rjmp	.-180    	; 0xc80e <__fp_szero>
    c8c2:	5f 3f       	cpi	r21, 0xFF	; 255
    c8c4:	ec f3       	brlt	.-6      	; 0xc8c0 <__mulsf3_pse+0x82>
    c8c6:	98 3e       	cpi	r25, 0xE8	; 232
    c8c8:	dc f3       	brlt	.-10     	; 0xc8c0 <__mulsf3_pse+0x82>
    c8ca:	86 95       	lsr	r24
    c8cc:	77 95       	ror	r23
    c8ce:	67 95       	ror	r22
    c8d0:	b7 95       	ror	r27
    c8d2:	f7 95       	ror	r31
    c8d4:	e7 95       	ror	r30
    c8d6:	9f 5f       	subi	r25, 0xFF	; 255
    c8d8:	c1 f7       	brne	.-16     	; 0xc8ca <__mulsf3_pse+0x8c>
    c8da:	fe 2b       	or	r31, r30
    c8dc:	88 0f       	add	r24, r24
    c8de:	91 1d       	adc	r25, r1
    c8e0:	96 95       	lsr	r25
    c8e2:	87 95       	ror	r24
    c8e4:	97 f9       	bld	r25, 7
    c8e6:	08 95       	ret

0000c8e8 <strnlen_P>:
    c8e8:	fc 01       	movw	r30, r24
    c8ea:	05 90       	lpm	r0, Z+
    c8ec:	61 50       	subi	r22, 0x01	; 1
    c8ee:	70 40       	sbci	r23, 0x00	; 0
    c8f0:	01 10       	cpse	r0, r1
    c8f2:	d8 f7       	brcc	.-10     	; 0xc8ea <strnlen_P+0x2>
    c8f4:	80 95       	com	r24
    c8f6:	90 95       	com	r25
    c8f8:	8e 0f       	add	r24, r30
    c8fa:	9f 1f       	adc	r25, r31
    c8fc:	08 95       	ret

0000c8fe <_exit>:
    c8fe:	f8 94       	cli

0000c900 <__stop_program>:
    c900:	ff cf       	rjmp	.-2      	; 0xc900 <__stop_program>
