
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  000086be  000087be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  000087c0  2**5
                  CONTENTS, READONLY
  2 .text         000086be  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000009d1  00800502  00800502  000087c0  2**1
                  ALLOC
  4 .stab         00000528  00000000  00000000  00008bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000938d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000560  00000000  00000000  000093a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000060f4  00000000  00000000  00009900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001526  00000000  00000000  0000f9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001a8c  00000000  00000000  00010f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000e90  00000000  00000000  000129a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001684  00000000  00000000  00013838  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005140  00000000  00000000  00014ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000630  00000000  00000000  0001a000  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__ctors_end>
       4:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
       8:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
       c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      10:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      14:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      18:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      1c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      20:	0c 94 99 27 	jmp	0x4f32	; 0x4f32 <__vector_8>
      24:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      28:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      2c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      30:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      34:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__vector_13>
      38:	0c 94 a3 25 	jmp	0x4b46	; 0x4b46 <__vector_14>
      3c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      40:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      44:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      48:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      4c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      50:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      54:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      58:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      5c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      60:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      64:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      68:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      6c:	0c 94 1f 22 	jmp	0x443e	; 0x443e <__bad_interrupt>
      70:	72 37       	cpi	r23, 0x72	; 114
      72:	75 37       	cpi	r23, 0x75	; 117
      74:	78 37       	cpi	r23, 0x78	; 120
      76:	7b 37       	cpi	r23, 0x7B	; 123
      78:	7e 37       	cpi	r23, 0x7E	; 126
      7a:	81 37       	cpi	r24, 0x71	; 113
      7c:	84 37       	cpi	r24, 0x74	; 116

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	45 28 48 28 a4 28 a8 28 af 28 50 28 55 28 5a 28     E(H(.(.(.(P(U(Z(
      dc:	b7 28 5d 28 60 28 63 28 9e 28 a1 28 c7 28           .(](`(c(.(.(.(

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strLives>:
     979:	4c 49 56 45 53 3a 00                                LIVES:.

00000980 <strShield>:
     980:	53 48 49 45 4c 44 3a 00                             SHIELD:.

00000988 <strScore>:
     988:	53 43 4f 52 45 3a 00                                SCORE:.

0000098f <strSelectHandle>:
     98f:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009a0 <strHighscores>:
     9a0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009ac <str1Player>:
     9ac:	53 54 41 52 54 00                                   START.

000009b2 <strCopyright>:
     9b2:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c2:	4f 4f 4b 53 00                                      OOKS.

000009c7 <spacesong>:
     9c7:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9d7:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9e7:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     9f7:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a07:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a17:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a27:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a37:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a47:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a57:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a67:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a77:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a87:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     a97:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     aa7:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ab7:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ac7:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ad7:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ae7:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     af7:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b07:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b17:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b27:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b37:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b47:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b57:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b67:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b77:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b87:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     b97:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     ba7:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bb7:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bc7:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     bd7:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     be7:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     bf7:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c07:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c17:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c27:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c37:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c47:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c57:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c67:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c77:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c87:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     c97:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ca7:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cb7:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cc7:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     cd7:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ce7:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     cf7:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d07:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d17:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d27:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d37:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d47:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d57:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d67:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d77:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d87:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     d97:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     da7:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     db7:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dc7:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     dd7:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     de7:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     df7:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e07:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e17:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e27:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e37:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e47:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e57:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e67:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e77:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e87:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     e97:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     ea7:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     eb7:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     ec7:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     ed7:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     ee7:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     ef7:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f07:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f17:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f27:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f37:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f47:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f57:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f67:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f77:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f87:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     f97:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     fa7:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fb7:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fc7:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fd7:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     fe7:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     ff7:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1007:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1017:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1027:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1037:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1047:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1057:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001067 <planetsong>:
    1067:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1077:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1087:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1097:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10a7:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10b7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10c7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10d7:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10e7:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    10f7:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1107:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1117:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1127:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1137:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1147:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1157:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1167:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1177:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1187:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1197:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11b7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11c7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11d7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11e7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    11f7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1207:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1217:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1227:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1237:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1247:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1257:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1267:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1277:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1287:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1297:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12a7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12b7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12c7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12d7:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12e7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    12f7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1307:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1317:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1327:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1337:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1347:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1357:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1367:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1377:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1387:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1397:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13a7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13b7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13c7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13d7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13e7:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    13f7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1407:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1417:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1427:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1437:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1447:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1457:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1467:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1477:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1487:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1497:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14a7:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14b7:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14c7:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14d7:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14e7:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    14f7:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1507:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1517:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1527:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1537:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1547:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1557:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1567:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1577:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1587:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1597:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15b7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15c7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15d7:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15e7:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    15f7:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1607:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1617:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1627:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1637:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1647:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1657:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1667:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1677:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1687:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1697:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16a7:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16b7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16c7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16d7:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16e7:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    16f7:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1707:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1717:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1727:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1737:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1747:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1757:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1767:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1777:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1787:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1797:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17a7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17b7:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17c7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17d7:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17e7:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    17f7:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1807:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1817:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1827:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1837:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1847:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1857:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1867:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1877:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1887:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1897:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18a7:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18b7:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18c7:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18d7:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18e7:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    18f7:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1907:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1917:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1927:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1937:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1947:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1957:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1967:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1977:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1987:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1997:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19a7:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19b7:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19c7:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19d7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19e7:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    19f7:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a07:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a17:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a27:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a37:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a47:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a57:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a67:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a77:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a87:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1a97:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1aa7:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ab7:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ac7:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ad7:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ae7:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1af7:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b07:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b17:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b27:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b37:	2f 00                                               /.

00001b39 <my_patches>:
    1b39:	00 00 00 4b 1b 00 00 00 00 00 00 00 4b 1b 00 00     ...K........K...
	...

00001b4b <patch00>:
    1b4b:	00 02 04 00 00 dd 00 ff                             ........

00001b53 <level_data>:
    1b53:	02 00 00 01 00 03 01 00 15 f8 07 00 ff 00 06 0f     ................
    1b63:	05 05 01 00 02 05 00 01 01 00 03 35 00 05 01 00     ...........5....
    1b73:	02 05 00 01 01 00 03 35 00 05 01 00 02 05 00 01     .......5........
    1b83:	01 00 03 35 00 05 01 00 02 05 00 01 01 00 03 39     ...5...........9
    1b93:	04 05 01 00 02 05 00 01 01 00 03 07 00 05 01 00     ................
    1ba3:	02 05 00 01 01 00 03 27 00 05 01 00 02 05 00 01     .......'........
    1bb3:	01 00 03 07 00 05 01 00 02 05 00 01 01 00 03 27     ...............'
    1bc3:	00 05 01 00 02 05 00 01 01 00 03 07 00 05 01 00     ................
    1bd3:	02 05 00 01 01 00 03 27 00 05 01 00 02 05 00 01     .......'........
    1be3:	01 00 03 07 00 05 01 00 02 05 00 01 01 00 03 25     ...............%
    1bf3:	04 05 33 00 01 05 00 05 c7 00 01 33 00 04 05 00     ..3........3....
    1c03:	05 c7 00 04 06 0e 05 01 00 02 05 00 01 01 00 03     ................
    1c13:	35 00 05 01 00 02 05 00 01 01 00 03 35 00 05 01     5...........5...
    1c23:	00 02 05 00 01 01 00 03 35 00 05 01 00 02 05 00     ........5.......
    1c33:	01 01 00 03 39 04 05 01 00 02 05 00 01 01 00 03     ....9...........
    1c43:	07 00 05 01 00 02 05 00 01 01 00 03 27 00 05 01     ............'...
    1c53:	00 02 05 00 01 01 00 03 07 00 05 01 00 02 05 00     ................
    1c63:	01 01 00 03 27 00 05 01 00 02 05 00 01 01 00 03     ....'...........
    1c73:	07 00 05 01 00 02 05 00 01 01 00 03 27 00 05 01     ............'...
    1c83:	00 02 05 00 01 01 00 03 07 00 05 01 00 02 05 00     ................
    1c93:	01 01 00 03 25 04 05 62 00 01 05 00 05 98 00 01     ....%..b........
    1ca3:	62 00 04 05 00 05 98 00 04 06 0e 05 01 00 02 05     b...............
    1cb3:	00 01 01 00 03 35 00 05 01 00 02 05 00 01 01 00     .....5..........
    1cc3:	03 35 00 05 01 00 02 05 00 01 01 00 03 35 00 05     .5...........5..
    1cd3:	01 00 02 05 00 01 01 00 03 39 04 05 01 00 02 05     .........9......
    1ce3:	00 01 01 00 03 07 00 05 01 00 02 05 00 01 01 00     ................
    1cf3:	03 27 00 05 01 00 02 05 00 01 01 00 03 07 00 05     .'..............
    1d03:	01 00 02 05 00 01 01 00 03 27 00 05 01 00 02 05     .........'......
    1d13:	00 01 01 00 03 07 00 05 01 00 02 05 00 01 01 00     ................
    1d23:	03 27 00 05 01 00 02 05 00 01 01 00 03 07 00 05     .'..............
    1d33:	01 00 02 05 00 01 01 00 03 25 04 05 ff 00 01 ff     .........%......
    1d43:	00 04                                               ..

00001d45 <sprites_data>:
    1d45:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1d55:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1d65:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1d75:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1d85:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1d95:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1da5:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    1db5:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    1dc5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1dd5:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1de5:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1df5:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1e05:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1e15:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1e25:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1e35:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    1e45:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e55:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1e65:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1e75:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1e85:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1e95:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ea5:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1eb5:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1ec5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ed5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ee5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ef5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f05:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1f15:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1f25:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1f35:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1f45:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    1f55:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    1f65:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    1f75:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    1f85:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    1f95:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    1fa5:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    1fb5:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    1fc5:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1fd5:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1fe5:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1ff5:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    2005:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    2015:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    2025:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2035:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    2045:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    2055:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    2065:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2075:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    2085:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2095:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    20a5:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    20b5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20c5:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    20d5:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    20e5:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    20f5:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2105:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    2115:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    2125:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    2135:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2145:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2155:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2165:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    2175:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2185:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2195:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    21a5:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    21b5:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    21c5:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    21d5:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    21e5:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    21f5:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2205:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    2215:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    2225:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    2235:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2245:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2255:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2265:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    2275:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2285:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    2295:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    22a5:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    22b5:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    22c5:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    22d5:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    22e5:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    22f5:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2305:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    2315:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    2325:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    2335:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2345:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    2355:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    2365:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    2375:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    2385:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2395:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    23a5:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    23b5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c5:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    23d5:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    23e5:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    23f5:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2405:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2415:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2425:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2435:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2445:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2455:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2465:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2475:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2485:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2495:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    24a5:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    24b5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24c5:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    24d5:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    24e5:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    24f5:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2505:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2515:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2525:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    2535:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2545:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2555:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2565:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2575:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2585:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2595:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25a5:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    25b5:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    25c5:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    25d5:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    25e5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25f5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2605:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    2615:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    2625:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    2635:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2645:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2655:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2665:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2675:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2685:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2695:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    26a5:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    26b5:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    26c5:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26d5:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    26e5:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    26f5:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2705:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2715:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2725:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2735:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    2745:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2755:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2765:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2775:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2785:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2795:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    27a5:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    27b5:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    27c5:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    27d5:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    27e5:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    27f5:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2805:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    2815:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2825:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2835:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2845:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2855:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2865:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2875:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2885:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    2895:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    28a5:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    28b5:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28c5:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    28d5:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    28e5:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    28f5:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2905:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2915:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2925:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2935:	fe a4 87 87 87 87 87 87 a4 a4 ef ef ef ef ef ef     ................
    2945:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2955:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2965:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2975:	87 87 87 87 ad 85 87 87 ef ef ef ef ad ad a4 a4     ................
    2985:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2995:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    29a5:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    29b5:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

000029c5 <map_enemy_spider_1>:
    29c5:	01 01 23                                            ..#

000029c8 <map_enemy_spider_0>:
    29c8:	01 01 18                                            ...

000029cb <map_enemy_shark>:
    29cb:	01 01 05                                            ...

000029ce <map_enemy_shot>:
    29ce:	01 01 0d                                            ...

000029d1 <map_hero_shot>:
    29d1:	01 01 04                                            ...

000029d4 <map_hero_ship_large>:
    29d4:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

000029de <map_hero_ship_1>:
    29de:	03 01 24 1a 1b                                      ..$..

000029e3 <map_hero_ship_0>:
    29e3:	03 01 19 1a 1b                                      .....

000029e8 <map_hero_prone>:
    29e8:	03 01 2f 30 31                                      ../01

000029ed <map_hero_jump>:
    29ed:	02 03 02 03 0a 0c 16 17                             ........

000029f5 <map_hero_step_3>:
    29f5:	02 03 02 03 0a 0b 2d 2e                             ......-.

000029fd <map_hero_step_2>:
    29fd:	02 03 00 01 07 09 14 15                             ........

00002a05 <map_hero_step_1>:
    2a05:	02 03 02 03 0a 0b 12 13                             ........

00002a0d <map_hero_step_0>:
    2a0d:	02 03 00 01 07 09 10 11                             ........

00002a15 <map_hero_idle>:
    2a15:	02 03 00 01 07 08 0e 0f                             ........

00002a1d <map_explosion_2>:
    2a1d:	01 01 1e                                            ...

00002a20 <map_explosion_1>:
    2a20:	01 01 1d                                            ...

00002a23 <map_explosion_0>:
    2a23:	01 01 1c                                            ...

00002a26 <map_meteor>:
    2a26:	01 01 1f                                            ...

00002a29 <map_up_arrow>:
    2a29:	01 01 22                                            .."

00002a2c <map_down_arrow>:
    2a2c:	01 01 21                                            ..!

00002a2f <map_right_arrow>:
    2a2f:	01 01 20                                            .. 

00002a32 <map_none>:
    2a32:	01 01 06                                            ...

00002a35 <tiles_data>:
	...
    2a75:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2a85:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2a95:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    2aa5:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    2ab5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2ac5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2ad5:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    2ae5:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2af5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2b05:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2b15:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    2b25:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    2b35:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    2b45:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    2b55:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    2b65:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2b75:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    2b85:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    2b95:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    2ba5:	af af af af af af af af af af af af af af af af     ................
    2bb5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2bc5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2bd5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2be5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2bf5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2c05:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2c15:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2c25:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2c35:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2c45:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    2c55:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    2c65:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2c75:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    2c85:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    2c95:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    2ca5:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    2cb5:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    2cc5:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    2cd5:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    2ce5:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    2cf5:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    2d05:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    2d15:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    2d25:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    2d4d:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    2d5d:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d75:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2d85:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2d95:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2da5:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    2db5:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2dc5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2dd5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2de5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    2df5:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    2e05:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    2e15:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    2e25:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    2e35:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    2e45:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    2e55:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    2e65:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    2e75:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    2e85:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    2e95:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    2ea5:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    2eb5:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    2ec5:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    2ed5:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    2ee5:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2ef5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    2f05:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    2f15:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    2f25:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    2f41:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    2f51:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    2f61:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    2f71:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    2f81:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2f91:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2fa1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2fb1:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    2fc1:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    2fd1:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    2fe1:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    2ff1:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    3035:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    3045:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3055:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    3065:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    3075:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3085:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3095:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    30a5:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    30b5:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    30c5:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    30d5:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    30e5:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    30f5:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    3105:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    3115:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    3125:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    3135:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    3145:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3155:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    3165:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    3175:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    3185:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    3195:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    31a5:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    31ed:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    31fd:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    320d:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    321d:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    322d:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    323d:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    324d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    325d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    326d:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    327d:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    328d:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    329d:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32b9:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    32c9:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    32d9:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    333d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    334d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3365:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3501:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    3511:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    3521:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    353d:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    354d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    355d:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    361d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    362d:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    364d:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    369d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    36c1:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    36d1:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    36e1:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    36fd:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    370d:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    371d:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    373d:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    374d:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    375d:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    377d:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    378d:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    379d:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    37bd:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    37cd:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    37dd:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3801:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    3811:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    3821:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    383d:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    384d:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    385d:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    387d:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    388d:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    389d:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    38bd:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    38cd:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    38dd:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    38fd:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    390d:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    391d:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    393d:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    394d:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    395d:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    39b5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    39c5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    39d5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    39e5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3abd:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3acd:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3ae5:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3afd:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3b0d:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    3b1d:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    3b3d:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    3b4d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3b5d:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3b7d:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3b8d:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3b9d:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    3bbd:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3bcd:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3bdd:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3bfd:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    3c0d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3c1d:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    3c3d:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3c4d:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3c5d:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3c7d:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3c8d:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3c9d:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    3cbd:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3ccd:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    3cdd:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    3cfd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3d0d:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3d1d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3d3d:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3d4d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3d5d:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3d81:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3d91:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    3da1:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    3dbd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    3dcd:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    3ddd:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3dfd:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3e0d:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3e1d:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3e3d:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    3e4d:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    3e5d:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    3e7d:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    3e8d:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    3e9d:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3ebd:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3ecd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3edd:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3efd:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f0d:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3f1d:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    3f3d:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f4d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3f5d:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    3f7d:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3f8d:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3f9d:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3fbd:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3fcd:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    3fdd:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3ffd:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    400d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    401d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    403d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    404d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    405d:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    407d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    408d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    409d:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    40bd:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    40cd:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    40dd:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    40fd:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    410d:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    411d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    413d:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    414d:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    415d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    417d:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    418d:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    419d:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    42e5:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

000042f5 <map_star>:
    42f5:	01 01 0c                                            ...

000042f8 <map_ice_moon>:
    42f8:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00004303 <map_ice_cloud>:
    4303:	01 01 08                                            ...

00004306 <map_ice_far>:
    4306:	01 01 07                                            ...

00004309 <map_ice_sky>:
    4309:	01 01 06                                            ...

0000430c <map_ice_horizon>:
    430c:	01 01 05                                            ...

0000430f <map_ice_bottom>:
    430f:	01 01 04                                            ...

00004312 <map_ice_right>:
    4312:	01 01 03                                            ...

00004315 <map_ice_middle>:
    4315:	01 01 02                                            ...

00004318 <map_ice_left>:
    4318:	01 01 01                                            ...

0000431b <map_splash>:
    431b:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    432b:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    433b:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    434b:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    435b:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00004368 <map_tile_none>:
    4368:	01 01 00 00                                         ....

0000436c <__ctors_end>:
    436c:	11 24       	eor	r1, r1
    436e:	1f be       	out	0x3f, r1	; 63
    4370:	cf ef       	ldi	r28, 0xFF	; 255
    4372:	d0 e1       	ldi	r29, 0x10	; 16
    4374:	de bf       	out	0x3e, r29	; 62
    4376:	cd bf       	out	0x3d, r28	; 61

00004378 <__do_copy_data>:
    4378:	15 e0       	ldi	r17, 0x05	; 5
    437a:	a0 e0       	ldi	r26, 0x00	; 0
    437c:	b5 e0       	ldi	r27, 0x05	; 5
    437e:	ee eb       	ldi	r30, 0xBE	; 190
    4380:	f6 e8       	ldi	r31, 0x86	; 134
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <__do_copy_data+0x10>
    4384:	05 90       	lpm	r0, Z+
    4386:	0d 92       	st	X+, r0
    4388:	a2 30       	cpi	r26, 0x02	; 2
    438a:	b1 07       	cpc	r27, r17
    438c:	d9 f7       	brne	.-10     	; 0x4384 <__do_copy_data+0xc>

0000438e <__do_clear_bss>:
    438e:	1e e0       	ldi	r17, 0x0E	; 14
    4390:	a2 e0       	ldi	r26, 0x02	; 2
    4392:	b5 e0       	ldi	r27, 0x05	; 5
    4394:	01 c0       	rjmp	.+2      	; 0x4398 <.do_clear_bss_start>

00004396 <.do_clear_bss_loop>:
    4396:	1d 92       	st	X+, r1

00004398 <.do_clear_bss_start>:
    4398:	a3 3d       	cpi	r26, 0xD3	; 211
    439a:	b1 07       	cpc	r27, r17
    439c:	e1 f7       	brne	.-8      	; 0x4396 <.do_clear_bss_loop>

0000439e <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    439e:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <wdt_randomize>
#endif

    MCUSR = 0;
    43a2:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    43a4:	88 e1       	ldi	r24, 0x18	; 24
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	80 93 60 00 	sts	0x0060, r24
    43ae:	10 92 60 00 	sts	0x0060, r1
    43b2:	0f be       	out	0x3f, r0	; 63

000043b4 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    43b4:	0e 94 2e 28 	call	0x505c	; 0x505c <isEepromFormatted>
    43b8:	81 11       	cpse	r24, r1
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <Initialize+0xc>
    43bc:	0e 94 0c 28 	call	0x5018	; 0x5018 <FormatEeprom>

	cli();
    43c0:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    43c8:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    43cc:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    43d0:	10 92 b8 0c 	sts	0x0CB8, r1
    43d4:	10 92 be 0c 	sts	0x0CBE, r1
    43d8:	10 92 c4 0c 	sts	0x0CC4, r1
    43dc:	10 92 ca 0c 	sts	0x0CCA, r1
    43e0:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    43e4:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    43e8:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    43ec:	92 e1       	ldi	r25, 0x12	; 18
    43ee:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    43f2:	90 ee       	ldi	r25, 0xE0	; 224
    43f4:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    43f8:	94 e1       	ldi	r25, 0x14	; 20
    43fa:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    43fe:	10 92 ac 0c 	sts	0x0CAC, r1
    4402:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    4406:	10 92 b0 0c 	sts	0x0CB0, r1
    440a:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    440e:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    4412:	0e 94 4d 34 	call	0x689a	; 0x689a <InitializeVideoMode>
    4416:	8e e7       	ldi	r24, 0x7E	; 126
    4418:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    441a:	fc 01       	movw	r30, r24
    441c:	25 91       	lpm	r18, Z+
    441e:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    4420:	f9 01       	movw	r30, r18
    4422:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    4424:	30 83       	st	Z, r19
    4426:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	8c 3a       	cpi	r24, 0xAC	; 172
    442c:	92 07       	cpc	r25, r18
    442e:	a9 f7       	brne	.-22     	; 0x441a <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    4430:	78 94       	sei
	
	DisplayLogo();
    4432:	0e 94 db 34 	call	0x69b6	; 0x69b6 <DisplayLogo>
    4436:	0e 94 48 41 	call	0x8290	; 0x8290 <main>
    443a:	0c 94 5d 43 	jmp	0x86ba	; 0x86ba <_exit>

0000443e <__bad_interrupt>:
    443e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004442 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    4442:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4444:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    4448:	ad e8       	ldi	r26, 0x8D	; 141
    444a:	aa 95       	dec	r26
    444c:	f1 f7       	brne	.-4      	; 0x444a <sub_video_mode3+0x8>
    444e:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    4450:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    4454:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    4456:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    4458:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    445a:	02 9f       	mul	r16, r18
		add ZL,r0
    445c:	e0 0d       	add	r30, r0
		adc ZH,r1
    445e:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    4460:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4462:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    4464:	20 91 6a 0d 	lds	r18, 0x0D6A
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    4468:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    446a:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    446c:	30 0f       	add	r19, r16

		cp r18,r16
    446e:	20 17       	cp	r18, r16
		breq no_ramtiles
    4470:	51 f0       	breq	.+20     	; 0x4486 <no_ramtiles>
		nop
    4472:	00 00       	nop
	...

00004476 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    4476:	a1 91       	ld	r26, Z+
		ld XH,Z+
    4478:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    447a:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    447c:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    447e:	0c 93       	st	X, r16

		inc r16
    4480:	03 95       	inc	r16
		cp r16,r18
    4482:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    4484:	c0 f3       	brcs	.-16     	; 0x4476 <upd_loop>

00004486 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    4486:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    4488:	1a 95       	dec	r17
		brne .-4
    448a:	f1 f7       	brne	.-4      	; 0x4488 <no_ramtiles+0x2>
		rjmp .
    448c:	00 c0       	rjmp	.+0      	; 0x448e <no_ramtiles+0x8>
		dec r19
    448e:	3a 95       	dec	r19
		brne 1b
    4490:	d1 f7       	brne	.-12     	; 0x4486 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    4492:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4494:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    4496:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    449a:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    449c:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    449e:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    44a0:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    44a2:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    44a6:	60 2f       	mov	r22, r16
		lsr r16
    44a8:	06 95       	lsr	r16
		lsr r16
    44aa:	06 95       	lsr	r16
		lsr r16 ;/8
    44ac:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    44ae:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    44b2:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    44b4:	f1 2e       	mov	r15, r17

        mov r17,r16
    44b6:	10 2f       	mov	r17, r16
        lsr r16
    44b8:	06 95       	lsr	r16
        lsr r16
    44ba:	06 95       	lsr	r16
        lsr r16 ;/8
    44bc:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    44be:	d0 0f       	add	r29, r16
		andi r17,0x7
    44c0:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    44c2:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    44c4:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    44c6:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    44ca:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    44ce:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    44d2:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    44d6:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    44d8:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    44da:	5e 01       	movw	r10, r28
		mov r23,r22
    44dc:	76 2f       	mov	r23, r22
		mov r24,r15
    44de:	8f 2d       	mov	r24, r15
		mov r9,r25
    44e0:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    44e2:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    44e6:	20 2f       	mov	r18, r16
		lsr r16
    44e8:	06 95       	lsr	r16
		lsr r16
    44ea:	06 95       	lsr	r16
		lsr r16			;hi8
    44ec:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    44ee:	03 95       	inc	r16
		andi r18,7		;lo8
    44f0:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    44f2:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    44f6:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    44f8:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    44fa:	01 fe       	sbrs	r0, 1
		clr r22
    44fc:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    44fe:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    4500:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    4502:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    4504:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    4506:	01 fe       	sbrs	r0, 1
		ser r24
    4508:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    450a:	01 fe       	sbrs	r0, 1
		clr r9
    450c:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    450e:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    4510:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    4512:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    4514:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    4516:	80 90 a8 0c 	lds	r8, 0x0CA8

0000451a <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    451a:	bc d3       	rcall	.+1912   	; 0x4c94 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    451c:	24 e0       	ldi	r18, 0x04	; 4
    451e:	2a 95       	dec	r18
    4520:	f1 f7       	brne	.-4      	; 0x451e <next_tile_line+0x4>
    4522:	00 00       	nop
				
		call render_tile_line
    4524:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <render_tile_line>

		WAIT r18,58
    4528:	23 e1       	ldi	r18, 0x13	; 19
    452a:	2a 95       	dec	r18
    452c:	f1 f7       	brne	.-4      	; 0x452a <next_tile_line+0x10>
    452e:	00 00       	nop

		inc r22
    4530:	63 95       	inc	r22
		dec r8
    4532:	8a 94       	dec	r8
		breq text_frame_end
    4534:	09 f1       	breq	.+66     	; 0x4578 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    4536:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    4538:	29 f0       	breq	.+10     	; 0x4544 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    453a:	08 e0       	ldi	r16, 0x08	; 8
    453c:	0a 95       	dec	r16
    453e:	f1 f7       	brne	.-4      	; 0x453c <next_tile_line+0x22>
    4540:	00 00       	nop
		rjmp next_tile_line
    4542:	eb cf       	rjmp	.-42     	; 0x451a <next_tile_line>

00004544 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    4544:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    4546:	0c 2f       	mov	r16, r28
		andi r16,0x7
    4548:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    454a:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    454c:	11 f0       	breq	.+4      	; 0x4552 <next_tile_row+0xe>
		inc YL
    454e:	c3 95       	inc	r28
		rjmp 2f
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    4552:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    4554:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    4556:	8a 95       	dec	r24
		brne .+2
    4558:	09 f4       	brne	.+2      	; 0x455c <next_tile_row+0x18>
		movw YL,r12
    455a:	e6 01       	movw	r28, r12

		dec r19
    455c:	3a 95       	dec	r19
		brne .+2
    455e:	09 f4       	brne	.+2      	; 0x4562 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    4560:	67 2f       	mov	r22, r23
		brne .+2
    4562:	09 f4       	brne	.+2      	; 0x4566 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    4564:	e5 01       	movw	r28, r10
		brne .+2
    4566:	09 f4       	brne	.+2      	; 0x456a <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    4568:	8f 2d       	mov	r24, r15
		brne .+2
    456a:	09 f4       	brne	.+2      	; 0x456e <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    456c:	99 2e       	mov	r9, r25

		brne .+2
    456e:	09 f4       	brne	.+2      	; 0x4572 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    4570:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    4572:	09 f4       	brne	.+2      	; 0x4576 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    4574:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    4576:	d1 cf       	rjmp	.-94     	; 0x451a <next_tile_line>

00004578 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    4578:	29 e0       	ldi	r18, 0x09	; 9
    457a:	2a 95       	dec	r18
    457c:	f1 f7       	brne	.-4      	; 0x457a <text_frame_end+0x2>
    457e:	00 00       	nop

		rcall hsync_pulse ;145
    4580:	89 d3       	rcall	.+1810   	; 0x4c94 <hsync_pulse>
	
		clr r1
    4582:	11 24       	eor	r1, r1
		call RestoreBackground
    4584:	0e 94 00 33 	call	0x6600	; 0x6600 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    4588:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    458c:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    458e:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    4590:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    4592:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    4596:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    4598:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    459a:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    459e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    45a0:	e0 93 36 00 	sts	0x0036, r30

		ret
    45a4:	08 95       	ret

000045a6 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    45a6:	cf 93       	push	r28
		push YH
    45a8:	df 93       	push	r29
		push r23
    45aa:	7f 93       	push	r23
		push r22
    45ac:	6f 93       	push	r22
		push r19
    45ae:	3f 93       	push	r19
		push r13
    45b0:	df 92       	push	r13
		push r12
    45b2:	cf 92       	push	r12
		push r9
    45b4:	9f 92       	push	r9
		push r7
    45b6:	7f 92       	push	r7
		push r6
    45b8:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    45ba:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    45bc:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    45be:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    45c0:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    45c2:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    45c4:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    45c6:	00 0d       	add	r16, r0
		adc r17,r1
    45c8:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    45ca:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    45cc:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    45ce:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    45d0:	00 0d       	add	r16, r0
		adc r17,r1
    45d2:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    45d4:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    45d6:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    45d8:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    45da:	69 2d       	mov	r22, r9
		andi r22,0x7		
    45dc:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    45de:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    45e0:	f8 94       	cli
		breq .+2
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    45e4:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    45e6:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    45e8:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    45ea:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    45ec:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    45ee:	02 0c       	add	r0, r2
	    adc r1,r3
    45f0:	13 1c       	adc	r1, r3
		movw ZL,r0
    45f2:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    45f4:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    45f6:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    45f8:	28 81       	ld	r18, Y
		subi YL,-8
    45fa:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    45fc:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    45fe:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    4600:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    4602:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    4604:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    4606:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    4608:	04 0e       	add	r0, r20
	    adc r1,r21
    460a:	15 1e       	adc	r1, r21
		movw XL,r0
    460c:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    460e:	28 81       	ld	r18, Y
		subi YL,-8
    4610:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4612:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    4614:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    4616:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    4618:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    461a:	a1 01       	movw	r20, r2
		brtc .+2
    461c:	0e f4       	brtc	.+2      	; 0x4620 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    461e:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    4620:	04 0e       	add	r0, r20
	    adc r1,r21
    4622:	15 1e       	adc	r1, r21
		movw ZL,r0
    4624:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    4626:	3f 01       	movw	r6, r30

00004628 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    4628:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    462a:	a6 0f       	add	r26, r22
		adc XH,r0
    462c:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    462e:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    4630:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    4632:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    4634:	22 c0       	rjmp	.+68     	; 0x467a <rom_fine_scroll>

00004636 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    4636:	00 c0       	rjmp	.+0      	; 0x4638 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    4638:	63 e2       	ldi	r22, 0x23	; 35
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    463a:	73 e2       	ldi	r23, 0x23	; 35
		add r22,r0
    463c:	60 0d       	add	r22, r0
		adc r23,r1
    463e:	71 1d       	adc	r23, r1
		push r22
    4640:	6f 93       	push	r22
		push r23	
    4642:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    4644:	08 95       	ret

00004646 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    4646:	0d 91       	ld	r16, X+
    4648:	c8 95       	lpm
    464a:	08 b9       	out	0x08, r16	; 8
    464c:	0d 91       	ld	r16, X+
    464e:	c8 95       	lpm
    4650:	08 b9       	out	0x08, r16	; 8
    4652:	0d 91       	ld	r16, X+
    4654:	c8 95       	lpm
    4656:	08 b9       	out	0x08, r16	; 8
    4658:	0d 91       	ld	r16, X+
    465a:	c8 95       	lpm
    465c:	08 b9       	out	0x08, r16	; 8
    465e:	0d 91       	ld	r16, X+
    4660:	c8 95       	lpm
    4662:	08 b9       	out	0x08, r16	; 8
    4664:	0d 91       	ld	r16, X+
    4666:	c8 95       	lpm
    4668:	08 b9       	out	0x08, r16	; 8
    466a:	0d 91       	ld	r16, X+
    466c:	c8 95       	lpm
    466e:	08 b9       	out	0x08, r16	; 8
    4670:	0d 91       	ld	r16, X+
    4672:	c8 95       	lpm
    4674:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    4676:	1e f5       	brtc	.+70     	; 0x46be <romloop>
		rjmp ramloop
    4678:	40 c0       	rjmp	.+128    	; 0x46fa <ramloop>

0000467a <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    467a:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    467c:	65 e4       	ldi	r22, 0x45	; 69
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    467e:	73 e2       	ldi	r23, 0x23	; 35
		add r22,r0
    4680:	60 0d       	add	r22, r0
		adc r23,r1
    4682:	71 1d       	adc	r23, r1
		push r22
    4684:	6f 93       	push	r22
		push r23	
    4686:	7f 93       	push	r23
		ret
    4688:	08 95       	ret

0000468a <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    468a:	05 91       	lpm	r16, Z+
    468c:	00 c0       	rjmp	.+0      	; 0x468e <rom_fine_scroll_loop+0x4>
    468e:	08 b9       	out	0x08, r16	; 8
    4690:	05 91       	lpm	r16, Z+
    4692:	00 c0       	rjmp	.+0      	; 0x4694 <rom_fine_scroll_loop+0xa>
    4694:	08 b9       	out	0x08, r16	; 8
    4696:	05 91       	lpm	r16, Z+
    4698:	00 c0       	rjmp	.+0      	; 0x469a <rom_fine_scroll_loop+0x10>
    469a:	08 b9       	out	0x08, r16	; 8
    469c:	05 91       	lpm	r16, Z+
    469e:	00 c0       	rjmp	.+0      	; 0x46a0 <rom_fine_scroll_loop+0x16>
    46a0:	08 b9       	out	0x08, r16	; 8
    46a2:	05 91       	lpm	r16, Z+
    46a4:	00 c0       	rjmp	.+0      	; 0x46a6 <rom_fine_scroll_loop+0x1c>
    46a6:	08 b9       	out	0x08, r16	; 8
    46a8:	05 91       	lpm	r16, Z+
    46aa:	00 c0       	rjmp	.+0      	; 0x46ac <rom_fine_scroll_loop+0x22>
    46ac:	08 b9       	out	0x08, r16	; 8
    46ae:	05 91       	lpm	r16, Z+
    46b0:	00 c0       	rjmp	.+0      	; 0x46b2 <rom_fine_scroll_loop+0x28>
    46b2:	08 b9       	out	0x08, r16	; 8
    46b4:	05 91       	lpm	r16, Z+
    46b6:	00 c0       	rjmp	.+0      	; 0x46b8 <rom_fine_scroll_loop+0x2e>
    46b8:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    46ba:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    46bc:	f6 f0       	brts	.+60     	; 0x46fa <ramloop>

000046be <romloop>:

	
	romloop:
	    lpm r16,Z+
    46be:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    46c0:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    46c2:	28 81       	ld	r18, Y

	    lpm r16,Z+
    46c4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    46c6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    46c8:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    46ca:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    46cc:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    46ce:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    46d0:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    46d2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    46d4:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    46d6:	08 f4       	brcc	.+2      	; 0x46da <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    46d8:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    46da:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    46dc:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    46de:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    46e0:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    46e2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    46e4:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    46e6:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    46e8:	1a 95       	dec	r17
   
	    lpm r16,Z+
    46ea:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    46ec:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    46ee:	05 91       	lpm	r16, Z+

		breq end	
    46f0:	39 f1       	breq	.+78     	; 0x4740 <end>
	    movw ZL,r0   	;copy next tile adress
    46f2:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    46f4:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    46f6:	18 f7       	brcc	.-58     	; 0x46be <romloop>
	
		rjmp .
    46f8:	00 c0       	rjmp	.+0      	; 0x46fa <ramloop>

000046fa <ramloop>:

	ramloop:

	    ld r16,Z+
    46fa:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    46fc:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    46fe:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    4700:	01 91       	ld	r16, Z+
		subi YL,-8   		
    4702:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    4704:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4706:	23 9f       	mul	r18, r19

	    ld r16,Z+
    4708:	01 91       	ld	r16, Z+
		nop
    470a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    470c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    470e:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    4710:	00 c0       	rjmp	.+0      	; 0x4712 <ramloop+0x18>
   
	    ld r16,Z+
    4712:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4714:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    4716:	08 f0       	brcs	.+2      	; 0x471a <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    4718:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    471a:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    471c:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    471e:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    4720:	15 1e       	adc	r1, r21
		rjmp .
    4722:	00 c0       	rjmp	.+0      	; 0x4724 <ramloop+0x2a>
    
		ld r16,Z+		
    4724:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    4726:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    4728:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    472a:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    472c:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    472e:	78 b8       	out	0x08, r7	; 8
		nop
    4730:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    4732:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    4734:	1a 95       	dec	r17
	    breq end
    4736:	21 f0       	breq	.+8      	; 0x4740 <end>
	
		nop
    4738:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    473a:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    473c:	00 f6       	brcc	.-128    	; 0x46be <romloop>
		rjmp ramloop
    473e:	dd cf       	rjmp	.-70     	; 0x46fa <ramloop>

00004740 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    4740:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    4742:	27 f5       	brid	.+72     	; 0x478c <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    4744:	30 f4       	brcc	.+12     	; 0x4752 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    4746:	f0 01       	movw	r30, r0

00004748 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    4748:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    474a:	08 b9       	out	0x08, r16	; 8
		dec r14
    474c:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    474e:	e1 f7       	brne	.-8      	; 0x4748 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    4750:	1f c0       	rjmp	.+62     	; 0x4790 <end_fine_scroll_ram>

00004752 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    4752:	f6 01       	movw	r30, r12
		nop
    4754:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    4756:	98 b8       	out	0x08, r9	; 8
		dec r14
    4758:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    475a:	c9 f0       	breq	.+50     	; 0x478e <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    475c:	05 91       	lpm	r16, Z+
    475e:	08 b9       	out	0x08, r16	; 8
    4760:	ea 94       	dec	r14
    4762:	a9 f0       	breq	.+42     	; 0x478e <end_fine_scroll_rom>
    4764:	05 91       	lpm	r16, Z+
    4766:	08 b9       	out	0x08, r16	; 8
    4768:	ea 94       	dec	r14
    476a:	89 f0       	breq	.+34     	; 0x478e <end_fine_scroll_rom>
    476c:	05 91       	lpm	r16, Z+
    476e:	08 b9       	out	0x08, r16	; 8
    4770:	ea 94       	dec	r14
    4772:	69 f0       	breq	.+26     	; 0x478e <end_fine_scroll_rom>
    4774:	05 91       	lpm	r16, Z+
    4776:	08 b9       	out	0x08, r16	; 8
    4778:	ea 94       	dec	r14
    477a:	49 f0       	breq	.+18     	; 0x478e <end_fine_scroll_rom>
    477c:	05 91       	lpm	r16, Z+
    477e:	08 b9       	out	0x08, r16	; 8
    4780:	ea 94       	dec	r14
    4782:	29 f0       	breq	.+10     	; 0x478e <end_fine_scroll_rom>
    4784:	05 91       	lpm	r16, Z+
    4786:	08 b9       	out	0x08, r16	; 8
    4788:	ea 94       	dec	r14
    478a:	09 f0       	breq	.+2      	; 0x478e <end_fine_scroll_rom>

0000478c <end_fine_scroll>:
	...

0000478e <end_fine_scroll_rom>:
	...

00004790 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    4790:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    4792:	08 b9       	out	0x08, r16	; 8

		pop r6
    4794:	6f 90       	pop	r6
		pop r7
    4796:	7f 90       	pop	r7
		pop r9
    4798:	9f 90       	pop	r9
		pop r12
    479a:	cf 90       	pop	r12
		pop r13
    479c:	df 90       	pop	r13
		pop r19
    479e:	3f 91       	pop	r19
		pop r22
    47a0:	6f 91       	pop	r22
		pop r23
    47a2:	7f 91       	pop	r23
		pop YH
    47a4:	df 91       	pop	r29
		pop YL
    47a6:	cf 91       	pop	r28

		ret
    47a8:	08 95       	ret

000047aa <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    47aa:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    47ac:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    47b0:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    47b4:	82 9f       	mul	r24, r18
	add ZL,r0
    47b6:	e0 0d       	add	r30, r0
	adc ZH,r1
    47b8:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    47ba:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    47bc:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    47be:	62 9f       	mul	r22, r18
	add XL,r0
    47c0:	a0 0d       	add	r26, r0
	adc XH,r1
    47c2:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    47c4:	15 90       	lpm	r1, Z+
    47c6:	1d 92       	st	X+, r1
    47c8:	15 90       	lpm	r1, Z+
    47ca:	1d 92       	st	X+, r1
    47cc:	15 90       	lpm	r1, Z+
    47ce:	1d 92       	st	X+, r1
    47d0:	15 90       	lpm	r1, Z+
    47d2:	1d 92       	st	X+, r1
    47d4:	15 90       	lpm	r1, Z+
    47d6:	1d 92       	st	X+, r1
    47d8:	15 90       	lpm	r1, Z+
    47da:	1d 92       	st	X+, r1
    47dc:	15 90       	lpm	r1, Z+
    47de:	1d 92       	st	X+, r1
    47e0:	15 90       	lpm	r1, Z+
    47e2:	1d 92       	st	X+, r1
    47e4:	15 90       	lpm	r1, Z+
    47e6:	1d 92       	st	X+, r1
    47e8:	15 90       	lpm	r1, Z+
    47ea:	1d 92       	st	X+, r1
    47ec:	15 90       	lpm	r1, Z+
    47ee:	1d 92       	st	X+, r1
    47f0:	15 90       	lpm	r1, Z+
    47f2:	1d 92       	st	X+, r1
    47f4:	15 90       	lpm	r1, Z+
    47f6:	1d 92       	st	X+, r1
    47f8:	15 90       	lpm	r1, Z+
    47fa:	1d 92       	st	X+, r1
    47fc:	15 90       	lpm	r1, Z+
    47fe:	1d 92       	st	X+, r1
    4800:	15 90       	lpm	r1, Z+
    4802:	1d 92       	st	X+, r1
    4804:	15 90       	lpm	r1, Z+
    4806:	1d 92       	st	X+, r1
    4808:	15 90       	lpm	r1, Z+
    480a:	1d 92       	st	X+, r1
    480c:	15 90       	lpm	r1, Z+
    480e:	1d 92       	st	X+, r1
    4810:	15 90       	lpm	r1, Z+
    4812:	1d 92       	st	X+, r1
    4814:	15 90       	lpm	r1, Z+
    4816:	1d 92       	st	X+, r1
    4818:	15 90       	lpm	r1, Z+
    481a:	1d 92       	st	X+, r1
    481c:	15 90       	lpm	r1, Z+
    481e:	1d 92       	st	X+, r1
    4820:	15 90       	lpm	r1, Z+
    4822:	1d 92       	st	X+, r1
    4824:	15 90       	lpm	r1, Z+
    4826:	1d 92       	st	X+, r1
    4828:	15 90       	lpm	r1, Z+
    482a:	1d 92       	st	X+, r1
    482c:	15 90       	lpm	r1, Z+
    482e:	1d 92       	st	X+, r1
    4830:	15 90       	lpm	r1, Z+
    4832:	1d 92       	st	X+, r1
    4834:	15 90       	lpm	r1, Z+
    4836:	1d 92       	st	X+, r1
    4838:	15 90       	lpm	r1, Z+
    483a:	1d 92       	st	X+, r1
    483c:	15 90       	lpm	r1, Z+
    483e:	1d 92       	st	X+, r1
    4840:	15 90       	lpm	r1, Z+
    4842:	1d 92       	st	X+, r1
    4844:	15 90       	lpm	r1, Z+
    4846:	1d 92       	st	X+, r1
    4848:	15 90       	lpm	r1, Z+
    484a:	1d 92       	st	X+, r1
    484c:	15 90       	lpm	r1, Z+
    484e:	1d 92       	st	X+, r1
    4850:	15 90       	lpm	r1, Z+
    4852:	1d 92       	st	X+, r1
    4854:	15 90       	lpm	r1, Z+
    4856:	1d 92       	st	X+, r1
    4858:	15 90       	lpm	r1, Z+
    485a:	1d 92       	st	X+, r1
    485c:	15 90       	lpm	r1, Z+
    485e:	1d 92       	st	X+, r1
    4860:	15 90       	lpm	r1, Z+
    4862:	1d 92       	st	X+, r1
    4864:	15 90       	lpm	r1, Z+
    4866:	1d 92       	st	X+, r1
    4868:	15 90       	lpm	r1, Z+
    486a:	1d 92       	st	X+, r1
    486c:	15 90       	lpm	r1, Z+
    486e:	1d 92       	st	X+, r1
    4870:	15 90       	lpm	r1, Z+
    4872:	1d 92       	st	X+, r1
    4874:	15 90       	lpm	r1, Z+
    4876:	1d 92       	st	X+, r1
    4878:	15 90       	lpm	r1, Z+
    487a:	1d 92       	st	X+, r1
    487c:	15 90       	lpm	r1, Z+
    487e:	1d 92       	st	X+, r1
    4880:	15 90       	lpm	r1, Z+
    4882:	1d 92       	st	X+, r1
    4884:	15 90       	lpm	r1, Z+
    4886:	1d 92       	st	X+, r1
    4888:	15 90       	lpm	r1, Z+
    488a:	1d 92       	st	X+, r1
    488c:	15 90       	lpm	r1, Z+
    488e:	1d 92       	st	X+, r1
    4890:	15 90       	lpm	r1, Z+
    4892:	1d 92       	st	X+, r1
    4894:	15 90       	lpm	r1, Z+
    4896:	1d 92       	st	X+, r1
    4898:	15 90       	lpm	r1, Z+
    489a:	1d 92       	st	X+, r1
    489c:	15 90       	lpm	r1, Z+
    489e:	1d 92       	st	X+, r1
    48a0:	15 90       	lpm	r1, Z+
    48a2:	1d 92       	st	X+, r1
    48a4:	15 90       	lpm	r1, Z+
    48a6:	1d 92       	st	X+, r1
    48a8:	15 90       	lpm	r1, Z+
    48aa:	1d 92       	st	X+, r1
    48ac:	15 90       	lpm	r1, Z+
    48ae:	1d 92       	st	X+, r1
    48b0:	15 90       	lpm	r1, Z+
    48b2:	1d 92       	st	X+, r1
    48b4:	15 90       	lpm	r1, Z+
    48b6:	1d 92       	st	X+, r1
    48b8:	15 90       	lpm	r1, Z+
    48ba:	1d 92       	st	X+, r1
    48bc:	15 90       	lpm	r1, Z+
    48be:	1d 92       	st	X+, r1
    48c0:	15 90       	lpm	r1, Z+
    48c2:	1d 92       	st	X+, r1
	clr r1
    48c4:	11 24       	eor	r1, r1
	ret
    48c6:	08 95       	ret

000048c8 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    48c8:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    48ca:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    48cc:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    48ce:	82 9f       	mul	r24, r18
	add ZL,r0
    48d0:	e0 0d       	add	r30, r0
	adc ZH,r1
    48d2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    48d4:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    48d6:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    48d8:	62 9f       	mul	r22, r18
	add XL,r0
    48da:	a0 0d       	add	r26, r0
	adc XH,r1
    48dc:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    48de:	11 90       	ld	r1, Z+
    48e0:	1d 92       	st	X+, r1
    48e2:	11 90       	ld	r1, Z+
    48e4:	1d 92       	st	X+, r1
    48e6:	11 90       	ld	r1, Z+
    48e8:	1d 92       	st	X+, r1
    48ea:	11 90       	ld	r1, Z+
    48ec:	1d 92       	st	X+, r1
    48ee:	11 90       	ld	r1, Z+
    48f0:	1d 92       	st	X+, r1
    48f2:	11 90       	ld	r1, Z+
    48f4:	1d 92       	st	X+, r1
    48f6:	11 90       	ld	r1, Z+
    48f8:	1d 92       	st	X+, r1
    48fa:	11 90       	ld	r1, Z+
    48fc:	1d 92       	st	X+, r1
    48fe:	11 90       	ld	r1, Z+
    4900:	1d 92       	st	X+, r1
    4902:	11 90       	ld	r1, Z+
    4904:	1d 92       	st	X+, r1
    4906:	11 90       	ld	r1, Z+
    4908:	1d 92       	st	X+, r1
    490a:	11 90       	ld	r1, Z+
    490c:	1d 92       	st	X+, r1
    490e:	11 90       	ld	r1, Z+
    4910:	1d 92       	st	X+, r1
    4912:	11 90       	ld	r1, Z+
    4914:	1d 92       	st	X+, r1
    4916:	11 90       	ld	r1, Z+
    4918:	1d 92       	st	X+, r1
    491a:	11 90       	ld	r1, Z+
    491c:	1d 92       	st	X+, r1
    491e:	11 90       	ld	r1, Z+
    4920:	1d 92       	st	X+, r1
    4922:	11 90       	ld	r1, Z+
    4924:	1d 92       	st	X+, r1
    4926:	11 90       	ld	r1, Z+
    4928:	1d 92       	st	X+, r1
    492a:	11 90       	ld	r1, Z+
    492c:	1d 92       	st	X+, r1
    492e:	11 90       	ld	r1, Z+
    4930:	1d 92       	st	X+, r1
    4932:	11 90       	ld	r1, Z+
    4934:	1d 92       	st	X+, r1
    4936:	11 90       	ld	r1, Z+
    4938:	1d 92       	st	X+, r1
    493a:	11 90       	ld	r1, Z+
    493c:	1d 92       	st	X+, r1
    493e:	11 90       	ld	r1, Z+
    4940:	1d 92       	st	X+, r1
    4942:	11 90       	ld	r1, Z+
    4944:	1d 92       	st	X+, r1
    4946:	11 90       	ld	r1, Z+
    4948:	1d 92       	st	X+, r1
    494a:	11 90       	ld	r1, Z+
    494c:	1d 92       	st	X+, r1
    494e:	11 90       	ld	r1, Z+
    4950:	1d 92       	st	X+, r1
    4952:	11 90       	ld	r1, Z+
    4954:	1d 92       	st	X+, r1
    4956:	11 90       	ld	r1, Z+
    4958:	1d 92       	st	X+, r1
    495a:	11 90       	ld	r1, Z+
    495c:	1d 92       	st	X+, r1
    495e:	11 90       	ld	r1, Z+
    4960:	1d 92       	st	X+, r1
    4962:	11 90       	ld	r1, Z+
    4964:	1d 92       	st	X+, r1
    4966:	11 90       	ld	r1, Z+
    4968:	1d 92       	st	X+, r1
    496a:	11 90       	ld	r1, Z+
    496c:	1d 92       	st	X+, r1
    496e:	11 90       	ld	r1, Z+
    4970:	1d 92       	st	X+, r1
    4972:	11 90       	ld	r1, Z+
    4974:	1d 92       	st	X+, r1
    4976:	11 90       	ld	r1, Z+
    4978:	1d 92       	st	X+, r1
    497a:	11 90       	ld	r1, Z+
    497c:	1d 92       	st	X+, r1
    497e:	11 90       	ld	r1, Z+
    4980:	1d 92       	st	X+, r1
    4982:	11 90       	ld	r1, Z+
    4984:	1d 92       	st	X+, r1
    4986:	11 90       	ld	r1, Z+
    4988:	1d 92       	st	X+, r1
    498a:	11 90       	ld	r1, Z+
    498c:	1d 92       	st	X+, r1
    498e:	11 90       	ld	r1, Z+
    4990:	1d 92       	st	X+, r1
    4992:	11 90       	ld	r1, Z+
    4994:	1d 92       	st	X+, r1
    4996:	11 90       	ld	r1, Z+
    4998:	1d 92       	st	X+, r1
    499a:	11 90       	ld	r1, Z+
    499c:	1d 92       	st	X+, r1
    499e:	11 90       	ld	r1, Z+
    49a0:	1d 92       	st	X+, r1
    49a2:	11 90       	ld	r1, Z+
    49a4:	1d 92       	st	X+, r1
    49a6:	11 90       	ld	r1, Z+
    49a8:	1d 92       	st	X+, r1
    49aa:	11 90       	ld	r1, Z+
    49ac:	1d 92       	st	X+, r1
    49ae:	11 90       	ld	r1, Z+
    49b0:	1d 92       	st	X+, r1
    49b2:	11 90       	ld	r1, Z+
    49b4:	1d 92       	st	X+, r1
    49b6:	11 90       	ld	r1, Z+
    49b8:	1d 92       	st	X+, r1
    49ba:	11 90       	ld	r1, Z+
    49bc:	1d 92       	st	X+, r1
    49be:	11 90       	ld	r1, Z+
    49c0:	1d 92       	st	X+, r1
    49c2:	11 90       	ld	r1, Z+
    49c4:	1d 92       	st	X+, r1
    49c6:	11 90       	ld	r1, Z+
    49c8:	1d 92       	st	X+, r1
    49ca:	11 90       	ld	r1, Z+
    49cc:	1d 92       	st	X+, r1
    49ce:	11 90       	ld	r1, Z+
    49d0:	1d 92       	st	X+, r1
    49d2:	11 90       	ld	r1, Z+
    49d4:	1d 92       	st	X+, r1
    49d6:	11 90       	ld	r1, Z+
    49d8:	1d 92       	st	X+, r1
    49da:	11 90       	ld	r1, Z+
    49dc:	1d 92       	st	X+, r1
	clr r1
    49de:	11 24       	eor	r1, r1
	ret
    49e0:	08 95       	ret

000049e2 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    49e2:	0f 93       	push	r16
	push r17
    49e4:	1f 93       	push	r17
	push YL
    49e6:	cf 93       	push	r28
	push YH
    49e8:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    49ea:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    49ec:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    49ee:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    49f0:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    49f2:	e0 0d       	add	r30, r0
	adc ZH,r1
    49f4:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    49f6:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    49fa:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    49fc:	8e 9f       	mul	r24, r30
	movw r26,r0
    49fe:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    4a00:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    4a02:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    4a04:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    4a06:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    4a08:	00 24       	eor	r0, r0
	add YL,r1
    4a0a:	c1 0d       	add	r28, r1
	adc YH,r0		
    4a0c:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    4a0e:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    4a10:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    4a12:	ea 0f       	add	r30, r26
	adc ZH,r27
    4a14:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    4a16:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    4a18:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    4a1a:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    4a1c:	69 9f       	mul	r22, r25
	add XL,r0
    4a1e:	a0 0d       	add	r26, r0
	adc XH,r1
    4a20:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    4a22:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    4a24:	dd 27       	eor	r29, r29

	cpi r20,0	
    4a26:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    4a28:	51 f4       	brne	.+20     	; 0x4a3e <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    4a2a:	a2 0f       	add	r26, r18
	adc XH,r1
    4a2c:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    4a2e:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    4a30:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    4a32:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    4a34:	11 c0       	rjmp	.+34     	; 0x4a58 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    4a36:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    4a38:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    4a3a:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    4a3c:	0d c0       	rjmp	.+26     	; 0x4a58 <x_check_end>

00004a3e <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    4a3e:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    4a40:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    4a42:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    4a44:	04 c0       	rjmp	.+8      	; 0x4a4e <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    4a46:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    4a48:	e8 0f       	add	r30, r24
	adc ZH,r1	
    4a4a:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    4a4c:	05 c0       	rjmp	.+10     	; 0x4a58 <x_check_end>

00004a4e <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    4a4e:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    4a50:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    4a52:	e2 0f       	add	r30, r18
	adc ZH,r1
    4a54:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    4a56:	31 97       	sbiw	r30, 0x01	; 1

00004a58 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    4a58:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    4a5a:	51 f4       	brne	.+20     	; 0x4a70 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    4a5c:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    4a5e:	93 9f       	mul	r25, r19
	add XL,r0
    4a60:	a0 0d       	add	r26, r0
	adc XH,r1
    4a62:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    4a64:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    4a66:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    4a68:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    4a6a:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    4a6e:	0a c0       	rjmp	.+20     	; 0x4a84 <y_check_end>

00004a70 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    4a70:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    4a72:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    4a74:	63 2f       	mov	r22, r19
	dec r22
    4a76:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    4a78:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    4a7a:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    4a7c:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    4a7e:	56 9f       	mul	r21, r22
	add ZL,r0
    4a80:	e0 0d       	add	r30, r0
	adc ZH,r1	
    4a82:	f1 1d       	adc	r31, r1

00004a84 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    4a84:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    4a86:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    4a88:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    4a8c:	00 ff       	sbrs	r16, 0
	clr r23
    4a8e:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    4a90:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    4a92:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    4a94:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    4a96:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    4a98:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    4a9a:	59 1b       	sub	r21, r25

00004a9c <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    4a9c:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    4a9e:	48 1b       	sub	r20, r24

00004aa0 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    4aa0:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    4aa2:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    4aa4:	2c 93       	st	X, r18
	adiw XL,1
    4aa6:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    4aa8:	e6 0f       	add	r30, r22
	adc ZH,r23
    4aaa:	f7 1f       	adc	r31, r23
	dec r20
    4aac:	4a 95       	dec	r20
	brne x_loop
    4aae:	c1 f7       	brne	.-16     	; 0x4aa0 <x_loop>

	add ZL,YL		;src+=srcXdiff
    4ab0:	ec 0f       	add	r30, r28
	adc ZH,YH
    4ab2:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    4ab4:	a8 0f       	add	r26, r24
	adc XH,r1
    4ab6:	b1 1d       	adc	r27, r1
	dec r21
    4ab8:	5a 95       	dec	r21
	brne y_loop
    4aba:	81 f7       	brne	.-32     	; 0x4a9c <y_loop>


	pop YH
    4abc:	df 91       	pop	r29
	pop YL
    4abe:	cf 91       	pop	r28
	pop r17
    4ac0:	1f 91       	pop	r17
	pop r16
    4ac2:	0f 91       	pop	r16
	ret
    4ac4:	08 95       	ret

00004ac6 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    4ac6:	0f 92       	push	r0
	push r1
    4ac8:	1f 92       	push	r1
	push ZL;2
    4aca:	ef 93       	push	r30
	push ZH;2
    4acc:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4ace:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4ad0:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4ad2:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    4ad6:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    4ad8:	f1 e0       	ldi	r31, 0x01	; 1

00004ada <latency_loop>:
latency_loop:
	cp ZL,ZH
    4ada:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    4adc:	00 f0       	brcs	.+0      	; 0x4ade <latency_loop+0x4>
	inc ZH
    4ade:	f3 95       	inc	r31
	cpi ZH,10
    4ae0:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    4ae2:	d8 f3       	brcs	.-10     	; 0x4ada <latency_loop>
	jmp .
    4ae4:	0c 94 74 25 	jmp	0x4ae8	; 0x4ae8 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    4ae8:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    4aec:	ea 95       	dec	r30
	sts sync_pulse,ZL
    4aee:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    4af2:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    4af6:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    4af8:	57 c0       	rjmp	.+174    	; 0x4ba8 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4afa:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    4afc:	98 f0       	brcs	.+38     	; 0x4b24 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    4afe:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    4b00:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    4b04:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    4b06:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    4b0a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    4b0c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    4b0e:	26 f4       	brtc	.+8      	; 0x4b18 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    4b10:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4b12:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <update_sound>
	rjmp sync_end
    4b16:	b7 c0       	rjmp	.+366    	; 0x4c86 <sync_end>

00004b18 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    4b18:	e5 e1       	ldi	r30, 0x15	; 21
    4b1a:	ea 95       	dec	r30
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <sync_pre_eq_no_sound_update+0x2>
    4b1e:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4b20:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    4b22:	b1 c0       	rjmp	.+354    	; 0x4c86 <sync_end>

00004b24 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    4b24:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    4b26:	38 f1       	brcs	.+78     	; 0x4b76 <sync_post_eq>

	rjmp .
    4b28:	00 c0       	rjmp	.+0      	; 0x4b2a <sync_eq+0x6>
	rjmp .
    4b2a:	00 c0       	rjmp	.+0      	; 0x4b2c <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4b2c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    4b2e:	e0 fb       	bst	r30, 0
	ldi ZL,4
    4b30:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    4b32:	16 f4       	brtc	.+4      	; 0x4b38 <sync_eq_skip>
	
	call update_sound
    4b34:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <update_sound>

00004b38 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    4b38:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    4b3a:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    4b3e:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    4b40:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    4b44:	a0 c0       	rjmp	.+320    	; 0x4c86 <sync_end>

00004b46 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    4b46:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4b48:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4b4a:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4b4c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    4b50:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    4b52:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    4b54:	00 f0       	brcs	.+0      	; 0x4b56 <__vector_14+0x10>

	cpi ZL,2
    4b56:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    4b58:	00 f0       	brcs	.+0      	; 0x4b5a <__vector_14+0x14>

	cpi ZL,3
    4b5a:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    4b5c:	00 f0       	brcs	.+0      	; 0x4b5e <__vector_14+0x18>

	cpi ZL,4
    4b5e:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    4b60:	00 f0       	brcs	.+0      	; 0x4b62 <__vector_14+0x1c>

	cpi ZL,5
    4b62:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    4b64:	00 f0       	brcs	.+0      	; 0x4b66 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    4b66:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    4b68:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    4b6a:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    4b6e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    4b70:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    4b72:	ef 91       	pop	r30
	reti
    4b74:	18 95       	reti

00004b76 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    4b76:	00 c0       	rjmp	.+0      	; 0x4b78 <sync_post_eq+0x2>

	bst ZL,0
    4b78:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4b7a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    4b7c:	26 f4       	brtc	.+8      	; 0x4b86 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    4b7e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4b80:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <update_sound>
	rjmp sync_pre_eq_cont
    4b84:	05 c0       	rjmp	.+10     	; 0x4b90 <sync_pre_eq_cont>

00004b86 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    4b86:	e5 e1       	ldi	r30, 0x15	; 21
    4b88:	ea 95       	dec	r30
    4b8a:	f1 f7       	brne	.-4      	; 0x4b88 <sync_post_eq_no_sound_update+0x2>
    4b8c:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    4b8e:	28 9a       	sbi	0x05, 0	; 5

00004b90 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    4b90:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    4b94:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    4b96:	09 f0       	breq	.+2      	; 0x4b9a <sync_pre_eq_cont+0xa>
	rjmp sync_end
    4b98:	76 c0       	rjmp	.+236    	; 0x4c86 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    4b9a:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    4b9c:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    4ba0:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    4ba2:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    4ba6:	6f c0       	rjmp	.+222    	; 0x4c86 <sync_end>

00004ba8 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    4ba8:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    4baa:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    4bae:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    4bb0:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    4bb4:	00 c0       	rjmp	.+0      	; 0x4bb6 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4bb6:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    4bb8:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    4bba:	00 c0       	rjmp	.+0      	; 0x4bbc <sync_hsync+0x14>
	call update_sound
    4bbc:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    4bc0:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    4bc2:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    4bc6:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    4bc8:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    4bcc:	ef 17       	cp	r30, r31
	brsh no_render
    4bce:	d0 f4       	brcc	.+52     	; 0x4c04 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    4bd0:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    4bd2:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    4bd6:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    4bd8:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    4bdc:	f0 19       	sub	r31, r0
	cp ZL,ZH
    4bde:	ef 17       	cp	r30, r31
	brlo no_render
    4be0:	88 f0       	brcs	.+34     	; 0x4c04 <no_render>

	;push r1-r29
	ldi ZL,29
    4be2:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    4be4:	ff 27       	eor	r31, r31

00004be6 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    4be6:	00 80       	ld	r0, Z
	push r0
    4be8:	0f 92       	push	r0
	dec ZL
    4bea:	ea 95       	dec	r30
	brne push_loop	
    4bec:	e1 f7       	brne	.-8      	; 0x4be6 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    4bee:	06 e0       	ldi	r16, 0x06	; 6
    4bf0:	0a 95       	dec	r16
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    4bf4:	0e 94 21 22 	call	0x4442	; 0x4442 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    4bf8:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    4bfa:	ff 27       	eor	r31, r31

00004bfc <pop_loop>:
pop_loop:
	pop r0
    4bfc:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    4bfe:	01 92       	st	Z+, r0
	cpi ZL,30
    4c00:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    4c02:	e0 f3       	brcs	.-8      	; 0x4bfc <pop_loop>

00004c04 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    4c04:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    4c08:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    4c0a:	09 f0       	breq	.+2      	; 0x4c0e <no_render+0xa>
	rjmp sync_end
    4c0c:	3c c0       	rjmp	.+120    	; 0x4c86 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    4c0e:	2f 93       	push	r18
	push r19
    4c10:	3f 93       	push	r19
	push r20
    4c12:	4f 93       	push	r20
	push r21
    4c14:	5f 93       	push	r21
	push r22
    4c16:	6f 93       	push	r22
	push r23
    4c18:	7f 93       	push	r23
	push r24
    4c1a:	8f 93       	push	r24
	push r25
    4c1c:	9f 93       	push	r25
	push r26
    4c1e:	af 93       	push	r26
	push r27
    4c20:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    4c22:	78 94       	sei
	clr r1
    4c24:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    4c26:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    4c28:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4c2c:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    4c2e:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    4c32:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    4c36:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    4c3a:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    4c3c:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    4c40:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    4c44:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    4c48:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    4c4c:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4c4e:	f1 05       	cpc	r31, r1
	breq .+2 
    4c50:	09 f0       	breq	.+2      	; 0x4c54 <no_render+0x50>
	icall
    4c52:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    4c54:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    4c58:	0e 94 5d 35 	call	0x6aba	; 0x6aba <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    4c5c:	0e 94 55 26 	call	0x4caa	; 0x4caa <process_music>
	clr r1
    4c60:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    4c62:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    4c66:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    4c6a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4c6c:	f1 05       	cpc	r31, r1
	breq .+2 
    4c6e:	09 f0       	breq	.+2      	; 0x4c72 <no_render+0x6e>
	icall
    4c70:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    4c72:	bf 91       	pop	r27
	pop r26
    4c74:	af 91       	pop	r26
	pop r25
    4c76:	9f 91       	pop	r25
	pop r24
    4c78:	8f 91       	pop	r24
	pop r23
    4c7a:	7f 91       	pop	r23
	pop r22
    4c7c:	6f 91       	pop	r22
	pop r21
    4c7e:	5f 91       	pop	r21
	pop r20
    4c80:	4f 91       	pop	r20
	pop r19
    4c82:	3f 91       	pop	r19
	pop r18
    4c84:	2f 91       	pop	r18

00004c86 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    4c86:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    4c88:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    4c8a:	ff 91       	pop	r31
	pop ZL
    4c8c:	ef 91       	pop	r30
	pop r1
    4c8e:	1f 90       	pop	r1
	pop r0
    4c90:	0f 90       	pop	r0
	reti
    4c92:	18 95       	reti

00004c94 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4c94:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    4c96:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    4c98:	00 c0       	rjmp	.+0      	; 0x4c9a <hsync_pulse+0x6>
	call update_sound
    4c9a:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <update_sound>

	lds ZL,sync_pulse
    4c9e:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    4ca2:	ea 95       	dec	r30
	sts sync_pulse,ZL
    4ca4:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    4ca8:	08 95       	ret

00004caa <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    4caa:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    4cae:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    4cb0:	0e 94 4f 2a 	call	0x549e	; 0x549e <ProcessMusic>
#endif

	ret
    4cb4:	08 95       	ret

00004cb6 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    4cb6:	0f 93       	push	r16
	push r17
    4cb8:	1f 93       	push	r17
	push r18
    4cba:	2f 93       	push	r18
	push r28
    4cbc:	cf 93       	push	r28
	push r29
    4cbe:	df 93       	push	r29

	mov r18,ZL
    4cc0:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    4cc2:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    4cc6:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    4cca:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    4ccc:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    4cd0:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    4cd4:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    4cd8:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4cda:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    4cdc:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    4ce0:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    4ce4:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    4ce8:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    4cea:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    4cec:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    4cee:	d0 2d       	mov	r29, r0
	nop
    4cf0:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    4cf2:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    4cf6:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    4cfa:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    4cfc:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    4d00:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    4d04:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    4d08:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4d0a:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    4d0c:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    4d10:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    4d14:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    4d18:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4d1a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    4d1c:	20 ff       	sbrs	r18, 0
	rjmp .
    4d1e:	00 c0       	rjmp	.+0      	; 0x4d20 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    4d20:	01 03       	mulsu	r16, r17
	clr r0
    4d22:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    4d24:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4d26:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    4d28:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    4d2a:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    4d2e:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    4d32:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    4d34:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    4d38:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    4d3c:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    4d40:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    4d42:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    4d44:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    4d48:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    4d4c:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    4d50:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    4d52:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    4d54:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    4d56:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    4d58:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    4d5c:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    4d60:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    4d64:	ea 95       	dec	r30
	brpl ch4_no_shift	
    4d66:	92 f4       	brpl	.+36     	; 0x4d8c <ch4_no_shift>

	lds ZH,tr4_params
    4d68:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    4d6c:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    4d6e:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    4d70:	00 2e       	mov	r0, r16
	lsr r0
    4d72:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    4d74:	00 26       	eor	r0, r16
	bst r0,0
    4d76:	00 fa       	bst	r0, 0
	lsr r17
    4d78:	16 95       	lsr	r17
	ror r16
    4d7a:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    4d7c:	16 f9       	bld	r17, 6
	sbrs ZH,0
    4d7e:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    4d80:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    4d82:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    4d86:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    4d8a:	03 c0       	rjmp	.+6      	; 0x4d92 <ch4_end>

00004d8c <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    4d8c:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    4d8e:	1a 95       	dec	r17
	brne .-4
    4d90:	f1 f7       	brne	.-4      	; 0x4d8e <ch4_no_shift+0x2>

00004d92 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    4d92:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    4d96:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    4d98:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    4d9a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    4d9c:	21 ff       	sbrs	r18, 1
	rjmp .
    4d9e:	00 c0       	rjmp	.+0      	; 0x4da0 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    4da0:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    4da2:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    4da4:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    4da8:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    4daa:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4dac:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    4dae:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    4db0:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    4db4:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    4db8:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    4dba:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    4dbe:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    4dc2:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    4dc6:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    4dc8:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    4dcc:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    4dce:	f0 1f       	adc	r31, r16

	movw r16,ZL
    4dd0:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    4dd2:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    4dd6:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    4dda:	00 19       	sub	r16, r0
	sbc r17,r1
    4ddc:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    4dde:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    4de2:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    4de6:	e0 15       	cp	r30, r0
	cpc ZH,r1
    4de8:	f1 05       	cpc	r31, r1
	brlo .+2
    4dea:	08 f0       	brcs	.+2      	; 0x4dee <ch4_end+0x5c>
	movw ZL,r16
    4dec:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    4dee:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    4df2:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    4df6:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    4df8:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    4dfc:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    4dfe:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4e00:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    4e02:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    4e04:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    4e06:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    4e08:	d0 05       	cpc	r29, r0
	brlt .+2
    4e0a:	0c f0       	brlt	.+2      	; 0x4e0e <ch4_end+0x7c>
	ldi r28,127
    4e0c:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    4e0e:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    4e10:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    4e12:	d0 05       	cpc	r29, r0
	brge .+2
    4e14:	0c f4       	brge	.+2      	; 0x4e18 <ch4_end+0x86>
	ldi r28,-128
    4e16:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    4e18:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    4e1a:	c0 93 b3 00 	sts	0x00B3, r28

00004e1e <update_sound_end>:
#endif


update_sound_end:

	pop r29
    4e1e:	df 91       	pop	r29
	pop r28
    4e20:	cf 91       	pop	r28
	pop r18
    4e22:	2f 91       	pop	r18
	pop r17
    4e24:	1f 91       	pop	r17
	pop r16
    4e26:	0f 91       	pop	r16
	
	ret
    4e28:	08 95       	ret

00004e2a <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    4e2a:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    4e2e:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    4e32:	08 95       	ret

00004e34 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    4e34:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    4e36:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    4e38:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    4e3a:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    4e3c:	6c e1       	ldi	r22, 0x1C	; 28

00004e3e <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    4e3e:	6d 93       	st	X+, r22
	sbiw r30,1
    4e40:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    4e42:	e9 f7       	brne	.-6      	; 0x4e3e <fill_vram_loop>

	clr r1
    4e44:	11 24       	eor	r1, r1

	ret
    4e46:	08 95       	ret

00004e48 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    4e48:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    4e4c:	45 0f       	add	r20, r21
	rjmp SetTile	
    4e4e:	00 c0       	rjmp	.+0      	; 0x4e50 <SetTile>

00004e50 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    4e50:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    4e52:	76 2f       	mov	r23, r22
	lsr r22
    4e54:	66 95       	lsr	r22
	lsr r22
    4e56:	66 95       	lsr	r22
	lsr r22			;y>>3
    4e58:	66 95       	lsr	r22
	ldi r18,8		
    4e5a:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    4e5c:	82 9f       	mul	r24, r18
	movw XL,r0
    4e5e:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    4e60:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    4e62:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    4e64:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    4e66:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    4e68:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    4e6a:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    4e6c:	4c 93       	st	X, r20

	clr r1
    4e6e:	11 24       	eor	r1, r1

	ret
    4e70:	08 95       	ret

00004e72 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    4e72:	80 93 98 0c 	sts	0x0C98, r24
	ret
    4e76:	08 95       	ret

00004e78 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    4e78:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    4e7c:	90 93 97 0c 	sts	0x0C97, r25
	ret
    4e80:	08 95       	ret

00004e82 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    4e82:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    4e86:	81 70       	andi	r24, 0x01	; 1
	ret
    4e88:	08 95       	ret

00004e8a <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    4e8a:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    4e8e:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    4e90:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    4e94:	08 95       	ret

00004e96 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    4e96:	88 23       	and	r24, r24
	brne rj_p2
    4e98:	29 f4       	brne	.+10     	; 0x4ea4 <rj_p2>
		
	lds r24,joypad1_status_lo
    4e9a:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    4e9e:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    4ea2:	08 95       	ret

00004ea4 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    4ea4:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    4ea8:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    4eac:	08 95       	ret

00004eae <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    4eae:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    4eb0:	7a 95       	dec	r23
	brne .-4 ;~1 us
    4eb2:	f1 f7       	brne	.-4      	; 0x4eb0 <WaitUs+0x2>
	nop
    4eb4:	00 00       	nop
	sbiw r24,1
    4eb6:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    4eb8:	d1 f7       	brne	.-12     	; 0x4eae <WaitUs>

	ret
    4eba:	08 95       	ret

00004ebc <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    4ebc:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    4ebe:	fe cf       	rjmp	.-4      	; 0x4ebc <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    4ec0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    4ec2:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    4ec4:	60 bd       	out	0x20, r22	; 32
   cli
    4ec6:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    4ec8:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    4eca:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    4ecc:	78 94       	sei
   ret
    4ece:	08 95       	ret

00004ed0 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    4ed0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    4ed2:	fe cf       	rjmp	.-4      	; 0x4ed0 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    4ed4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    4ed6:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    4ed8:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    4eda:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    4edc:	80 b5       	in	r24, 0x20	; 32
   sei
    4ede:	78 94       	sei
   ret
    4ee0:	08 95       	ret

00004ee2 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    4ee4:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    4ee8:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    4eec:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    4ef0:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    4ef4:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    4ef8:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    4efc:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    4f00:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    4f04:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    4f08:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    4f0a:	80 93 81 00 	sts	0x0081, r24

		cli
    4f0e:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    4f10:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    4f12:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    4f16:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    4f18:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    4f1c:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    4f1e:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    4f22:	90 93 60 00 	sts	0x0060, r25
	
		sei
    4f26:	78 94       	sei

00004f28 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    4f28:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    4f2c:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    4f2e:	e0 f3       	brcs	.-8      	; 0x4f28 <wait>

		ret
    4f30:	08 95       	ret

00004f32 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    4f32:	0f 93       	push	r16
		push r17
    4f34:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    4f36:	0f b7       	in	r16, 0x3f	; 63
		push r16
    4f38:	0f 93       	push	r16

		lds r16,sync_pulse
    4f3a:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    4f3e:	03 95       	inc	r16
		sts sync_pulse,r16
    4f40:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    4f44:	00 fd       	sbrc	r16, 0
		rjmp 1f
    4f46:	08 c0       	rjmp	.+16     	; 0x4f58 <__vector_8+0x26>
		lds r17,random_value
    4f48:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4f4c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    4f50:	10 27       	eor	r17, r16
		sts random_value,r17
    4f52:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    4f56:	07 c0       	rjmp	.+14     	; 0x4f66 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    4f58:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4f5c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    4f60:	10 27       	eor	r17, r16
		sts random_value+1,r17
    4f62:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    4f66:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    4f68:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    4f6c:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    4f6e:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    4f70:	1f 91       	pop	r17
		pop r16
    4f72:	0f 91       	pop	r16
		reti
    4f74:	18 95       	reti

00004f76 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    4f76:	98 e0       	ldi	r25, 0x08	; 8
    4f78:	88 e1       	ldi	r24, 0x18	; 24
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	f8 94       	cli
    4f7e:	a8 95       	wdr
    4f80:	80 93 60 00 	sts	0x0060, r24
    4f84:	0f be       	out	0x3f, r0	; 63
    4f86:	90 93 60 00 	sts	0x0060, r25
	while(1);
    4f8a:	ff cf       	rjmp	.-2      	; 0x4f8a <SoftReset+0x14>

00004f8c <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    4f8c:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    4f8e:	c8 95       	lpm
    4f90:	c8 95       	lpm
		Wait200ns();
    4f92:	c8 95       	lpm
    4f94:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    4f96:	12 98       	cbi	0x02, 2	; 2
    4f98:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    4f9a:	80 e0       	ldi	r24, 0x00	; 0
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    4fa2:	36 95       	lsr	r19
    4fa4:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    4fa6:	96 95       	lsr	r25
    4fa8:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    4faa:	c8 95       	lpm
    4fac:	c8 95       	lpm
			Wait200ns();
    4fae:	c8 95       	lpm
    4fb0:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    4fb2:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    4fb4:	00 9b       	sbis	0x00, 0	; 0
    4fb6:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    4fb8:	01 9b       	sbis	0x00, 1	; 0
    4fba:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    4fbc:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    4fbe:	c8 95       	lpm
    4fc0:	c8 95       	lpm
			Wait200ns();
    4fc2:	c8 95       	lpm
    4fc4:	c8 95       	lpm
    4fc6:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    4fc8:	61 f7       	brne	.-40     	; 0x4fa2 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    4fca:	30 93 aa 0c 	sts	0x0CAA, r19
    4fce:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    4fd2:	90 93 ae 0c 	sts	0x0CAE, r25
    4fd6:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    4fda:	80 91 a9 0c 	lds	r24, 0x0CA9
    4fde:	90 91 aa 0c 	lds	r25, 0x0CAA
    4fe2:	0f 97       	sbiw	r24, 0x0f	; 15
    4fe4:	31 f0       	breq	.+12     	; 0x4ff2 <ReadButtons+0x66>
    4fe6:	80 91 ad 0c 	lds	r24, 0x0CAD
    4fea:	90 91 ae 0c 	lds	r25, 0x0CAE
    4fee:	0f 97       	sbiw	r24, 0x0f	; 15
    4ff0:	11 f4       	brne	.+4      	; 0x4ff6 <ReadButtons+0x6a>
		SoftReset();
    4ff2:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <SoftReset>
    4ff6:	08 95       	ret

00004ff8 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    4ff8:	10 92 e4 0c 	sts	0x0CE4, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    4ffc:	00 99       	sbic	0x00, 0	; 0
    4ffe:	03 c0       	rjmp	.+6      	; 0x5006 <ReadControllers+0xe>
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	80 93 e4 0c 	sts	0x0CE4, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5006:	01 99       	sbic	0x00, 1	; 0
    5008:	05 c0       	rjmp	.+10     	; 0x5014 <ReadControllers+0x1c>
    500a:	80 91 e4 0c 	lds	r24, 0x0CE4
    500e:	82 60       	ori	r24, 0x02	; 2
    5010:	80 93 e4 0c 	sts	0x0CE4, r24
			
	//read the standard buttons
	ReadButtons();
    5014:	0c 94 c6 27 	jmp	0x4f8c	; 0x4f8c <ReadButtons>

00005018 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    5018:	cf 93       	push	r28
    501a:	df 93       	push	r29
    501c:	c0 e0       	ldi	r28, 0x00	; 0
    501e:	d0 e0       	ldi	r29, 0x00	; 0
    5020:	fe 01       	movw	r30, r28
    5022:	e4 55       	subi	r30, 0x54	; 84
    5024:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    5026:	64 91       	lpm	r22, Z
    5028:	ce 01       	movw	r24, r28
    502a:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <WriteEeprom>
    502e:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5030:	c0 32       	cpi	r28, 0x20	; 32
    5032:	d1 05       	cpc	r29, r1
    5034:	a9 f7       	brne	.-22     	; 0x5020 <FormatEeprom+0x8>
    5036:	c0 e2       	ldi	r28, 0x20	; 32
    5038:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    503a:	6f ef       	ldi	r22, 0xFF	; 255
    503c:	ce 01       	movw	r24, r28
    503e:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    5042:	6f ef       	ldi	r22, 0xFF	; 255
    5044:	ce 01       	movw	r24, r28
    5046:	01 96       	adiw	r24, 0x01	; 1
    5048:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    504c:	a0 96       	adiw	r28, 0x20	; 32
    504e:	c1 15       	cp	r28, r1
    5050:	88 e0       	ldi	r24, 0x08	; 8
    5052:	d8 07       	cpc	r29, r24
    5054:	91 f7       	brne	.-28     	; 0x503a <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	08 95       	ret

0000505c <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    505c:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <ReadEeprom>
    5066:	c8 2f       	mov	r28, r24
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <ReadEeprom>
    5070:	28 2f       	mov	r18, r24
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	32 2f       	mov	r19, r18
    5076:	22 27       	eor	r18, r18
    5078:	2c 0f       	add	r18, r28
    507a:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	2a 35       	cpi	r18, 0x5A	; 90
    5080:	35 45       	sbci	r19, 0x55	; 85
    5082:	09 f0       	breq	.+2      	; 0x5086 <isEepromFormatted+0x2a>
    5084:	80 e0       	ldi	r24, 0x00	; 0
}
    5086:	cf 91       	pop	r28
    5088:	08 95       	ret

0000508a <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    508a:	fc 01       	movw	r30, r24
    508c:	67 87       	std	Z+15, r22	; 0x0f
    508e:	08 95       	ret

00005090 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5090:	e8 eb       	ldi	r30, 0xB8	; 184
    5092:	fc e0       	ldi	r31, 0x0C	; 12
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	91 e0       	ldi	r25, 0x01	; 1
    5098:	95 8b       	std	Z+21, r25	; 0x15
    509a:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    509c:	63 8b       	std	Z+19, r22	; 0x13
    509e:	08 95       	ret

000050a0 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    50a0:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    50a2:	90 81       	ld	r25, Z
    50a4:	9f 75       	andi	r25, 0x5F	; 95
    50a6:	90 83       	st	Z, r25
    50a8:	08 95       	ret

000050aa <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    50aa:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    50ac:	90 81       	ld	r25, Z
    50ae:	90 64       	ori	r25, 0x40	; 64
    50b0:	90 83       	st	Z, r25
    50b2:	08 95       	ret

000050b4 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    50b4:	fc 01       	movw	r30, r24
    50b6:	66 87       	std	Z+14, r22	; 0x0e
    50b8:	08 95       	ret

000050ba <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    50ba:	fc 01       	movw	r30, r24
    50bc:	62 87       	std	Z+10, r22	; 0x0a
    50be:	08 95       	ret

000050c0 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    50c0:	fc 01       	movw	r30, r24
    50c2:	63 87       	std	Z+11, r22	; 0x0b
    50c4:	08 95       	ret

000050c6 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
    50ca:	ec 01       	movw	r28, r24
    50cc:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    50ce:	29 81       	ldd	r18, Y+1	; 0x01
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	f9 01       	movw	r30, r18
    50d4:	ee 0f       	add	r30, r30
    50d6:	ff 1f       	adc	r31, r31
    50d8:	e8 5f       	subi	r30, 0xF8	; 248
    50da:	f5 4a       	sbci	r31, 0xA5	; 165
    50dc:	65 91       	lpm	r22, Z+
    50de:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    50e0:	f9 01       	movw	r30, r18
    50e2:	e4 0f       	add	r30, r20
    50e4:	f1 1d       	adc	r31, r1
    50e6:	47 fd       	sbrc	r20, 7
    50e8:	fa 95       	dec	r31
    50ea:	ee 0f       	add	r30, r30
    50ec:	ff 1f       	adc	r31, r31
    50ee:	e8 5f       	subi	r30, 0xF8	; 248
    50f0:	f5 4a       	sbci	r31, 0xA5	; 165
    50f2:	85 91       	lpm	r24, Z+
    50f4:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    50f6:	86 1b       	sub	r24, r22
    50f8:	97 0b       	sbc	r25, r23
    50fa:	68 85       	ldd	r22, Y+8	; 0x08
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	0e 94 95 41 	call	0x832a	; 0x832a <__divmodhi4>
	if(delta==0)delta++;
    5102:	61 15       	cp	r22, r1
    5104:	71 05       	cpc	r23, r1
    5106:	11 f4       	brne	.+4      	; 0x510c <PatchCommand11+0x46>
    5108:	61 e0       	ldi	r22, 0x01	; 1
    510a:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    510c:	ea 81       	ldd	r30, Y+2	; 0x02
    510e:	86 e0       	ldi	r24, 0x06	; 6
    5110:	e8 9f       	mul	r30, r24
    5112:	f0 01       	movw	r30, r0
    5114:	11 24       	eor	r1, r1
    5116:	e8 54       	subi	r30, 0x48	; 72
    5118:	f3 4f       	sbci	r31, 0xF3	; 243
    511a:	81 81       	ldd	r24, Z+1	; 0x01
    511c:	92 81       	ldd	r25, Z+2	; 0x02
    511e:	86 0f       	add	r24, r22
    5120:	97 1f       	adc	r25, r23
    5122:	92 83       	std	Z+2, r25	; 0x02
    5124:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5126:	7e 83       	std	Y+6, r23	; 0x06
    5128:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    512a:	88 81       	ld	r24, Y
    512c:	88 60       	ori	r24, 0x08	; 8
    512e:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5130:	89 81       	ldd	r24, Y+1	; 0x01
    5132:	48 0f       	add	r20, r24
    5134:	4f 83       	std	Y+7, r20	; 0x07
}
    5136:	df 91       	pop	r29
    5138:	cf 91       	pop	r28
    513a:	08 95       	ret

0000513c <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    513c:	fc 01       	movw	r30, r24
    513e:	60 87       	std	Z+8, r22	; 0x08
    5140:	08 95       	ret

00005142 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    5142:	fc 01       	movw	r30, r24
    5144:	64 83       	std	Z+4, r22	; 0x04
    5146:	08 95       	ret

00005148 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    5148:	fc 01       	movw	r30, r24
    514a:	82 81       	ldd	r24, Z+2	; 0x02
    514c:	0c 94 88 2c 	jmp	0x5910	; 0x5910 <SetMixerWave>

00005150 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    5150:	fc 01       	movw	r30, r24
	track->note+=param;
    5152:	91 81       	ldd	r25, Z+1	; 0x01
    5154:	69 0f       	add	r22, r25
    5156:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    5158:	82 81       	ldd	r24, Z+2	; 0x02
    515a:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <SetMixerNote>

0000515e <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    515e:	fc 01       	movw	r30, r24
	track->note-=param;
    5160:	91 81       	ldd	r25, Z+1	; 0x01
    5162:	96 1b       	sub	r25, r22
    5164:	69 2f       	mov	r22, r25
    5166:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    5168:	82 81       	ldd	r24, Z+2	; 0x02
    516a:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <SetMixerNote>

0000516e <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    516e:	1f 93       	push	r17
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	ec 01       	movw	r28, r24
    5176:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    5178:	8a 81       	ldd	r24, Y+2	; 0x02
    517a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <SetMixerNote>
	track->note=param;
    517e:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5180:	88 81       	ld	r24, Y
    5182:	87 7f       	andi	r24, 0xF7	; 247
    5184:	88 83       	st	Y, r24
}
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	1f 91       	pop	r17
    518c:	08 95       	ret

0000518e <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    518e:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    5190:	14 96       	adiw	r26, 0x04	; 4
    5192:	8c 91       	ld	r24, X
    5194:	14 97       	sbiw	r26, 0x04	; 4
    5196:	88 23       	and	r24, r24
    5198:	19 f1       	breq	.+70     	; 0x51e0 <PatchCommand14+0x52>
    519a:	55 96       	adiw	r26, 0x15	; 21
    519c:	2d 91       	ld	r18, X+
    519e:	3c 91       	ld	r19, X
    51a0:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    51a2:	66 23       	and	r22, r22
    51a4:	79 f0       	breq	.+30     	; 0x51c4 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    51a6:	77 27       	eor	r23, r23
    51a8:	67 fd       	sbrc	r22, 7
    51aa:	70 95       	com	r23
    51ac:	6f 5f       	subi	r22, 0xFF	; 255
    51ae:	7f 4f       	sbci	r23, 0xFF	; 255
    51b0:	ab 01       	movw	r20, r22
    51b2:	44 0f       	add	r20, r20
    51b4:	55 1f       	adc	r21, r21
    51b6:	64 0f       	add	r22, r20
    51b8:	75 1f       	adc	r23, r21
    51ba:	26 1b       	sub	r18, r22
    51bc:	37 0b       	sbc	r19, r23
    51be:	09 c0       	rjmp	.+18     	; 0x51d2 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    51c0:	ef 3f       	cpi	r30, 0xFF	; 255
    51c2:	39 f0       	breq	.+14     	; 0x51d2 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    51c4:	23 50       	subi	r18, 0x03	; 3
    51c6:	31 09       	sbc	r19, r1
    51c8:	f9 01       	movw	r30, r18
    51ca:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    51cc:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    51ce:	ed 30       	cpi	r30, 0x0D	; 13
    51d0:	b9 f7       	brne	.-18     	; 0x51c0 <PatchCommand14+0x32>
    51d2:	56 96       	adiw	r26, 0x16	; 22
    51d4:	3c 93       	st	X, r19
    51d6:	2e 93       	st	-X, r18
    51d8:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    51da:	81 50       	subi	r24, 0x01	; 1
    51dc:	14 96       	adiw	r26, 0x04	; 4
    51de:	8c 93       	st	X, r24
    51e0:	08 95       	ret

000051e2 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    51e2:	90 93 5d 0d 	sts	0x0D5D, r25
    51e6:	80 93 5c 0d 	sts	0x0D5C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    51ea:	8f e6       	ldi	r24, 0x6F	; 111
    51ec:	80 93 5f 0d 	sts	0x0D5F, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    51f0:	10 92 b6 0c 	sts	0x0CB6, r1
    51f4:	e7 ef       	ldi	r30, 0xF7	; 247
    51f6:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    51f8:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    51fa:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    51fc:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    51fe:	28 e1       	ldi	r18, 0x18	; 24
    5200:	df 01       	movw	r26, r30
    5202:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    5204:	8c 93       	st	X, r24
    5206:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5208:	9c 93       	st	X, r25
    520a:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    520c:	1c 92       	st	X, r1
    520e:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5210:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5212:	10 82       	st	Z, r1
    5214:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    5216:	2c 93       	st	X, r18
    5218:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    521a:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    521c:	8f 5f       	subi	r24, 0xFF	; 255
    521e:	77 96       	adiw	r30, 0x17	; 23
    5220:	85 30       	cpi	r24, 0x05	; 5
    5222:	71 f7       	brne	.-36     	; 0x5200 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5224:	08 95       	ret

00005226 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5226:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5228:	ed 91       	ld	r30, X+
    522a:	fc 91       	ld	r31, X
    522c:	11 97       	sbiw	r26, 0x01	; 1
    522e:	9f 01       	movw	r18, r30
    5230:	2f 5f       	subi	r18, 0xFF	; 255
    5232:	3f 4f       	sbci	r19, 0xFF	; 255
    5234:	11 96       	adiw	r26, 0x01	; 1
    5236:	3c 93       	st	X, r19
    5238:	2e 93       	st	-X, r18
    523a:	e4 91       	lpm	r30, Z
    523c:	e7 fd       	sbrc	r30, 7
    523e:	03 c0       	rjmp	.+6      	; 0x5246 <ReadVarLen+0x20>
    5240:	8e 2f       	mov	r24, r30
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	08 95       	ret
    {
       value &= 0x7F;
    5246:	ef 77       	andi	r30, 0x7F	; 127
    5248:	8e 2f       	mov	r24, r30
    524a:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    524c:	96 95       	lsr	r25
    524e:	98 2f       	mov	r25, r24
    5250:	88 27       	eor	r24, r24
    5252:	97 95       	ror	r25
    5254:	87 95       	ror	r24
    5256:	2f 5f       	subi	r18, 0xFF	; 255
    5258:	3f 4f       	sbci	r19, 0xFF	; 255
    525a:	f9 01       	movw	r30, r18
    525c:	31 97       	sbiw	r30, 0x01	; 1
    525e:	e4 91       	lpm	r30, Z
    5260:	4e 2f       	mov	r20, r30
    5262:	4f 77       	andi	r20, 0x7F	; 127
    5264:	84 0f       	add	r24, r20
    5266:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5268:	e7 fd       	sbrc	r30, 7
    526a:	f0 cf       	rjmp	.-32     	; 0x524c <ReadVarLen+0x26>
    526c:	2d 93       	st	X+, r18
    526e:	3c 93       	st	X, r19
    }


    return value;
}
    5270:	08 95       	ret

00005272 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    5272:	ef 92       	push	r14
    5274:	ff 92       	push	r15
    5276:	0f 93       	push	r16
    5278:	1f 93       	push	r17
    527a:	cf 93       	push	r28
    527c:	df 93       	push	r29
    527e:	1f 92       	push	r1
    5280:	cd b7       	in	r28, 0x3d	; 61
    5282:	de b7       	in	r29, 0x3e	; 62
    5284:	7c 01       	movw	r14, r24
    5286:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5288:	fc 01       	movw	r30, r24
    528a:	80 81       	ld	r24, Z
    528c:	08 2f       	mov	r16, r24
    528e:	00 1f       	adc	r16, r16
    5290:	00 27       	eor	r16, r16
    5292:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    5294:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    5296:	9f ef       	ldi	r25, 0xFF	; 255
    5298:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    529a:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    529c:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    529e:	87 7b       	andi	r24, 0xB7	; 183
    52a0:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    52a2:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    52a4:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    52a6:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    52a8:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    52aa:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    52ac:	82 81       	ldd	r24, Z+2	; 0x02
    52ae:	83 30       	cpi	r24, 0x03	; 3
    52b0:	69 f4       	brne	.+26     	; 0x52cc <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    52b2:	01 11       	cpse	r16, r1
    52b4:	01 c0       	rjmp	.+2      	; 0x52b8 <TriggerCommon+0x46>
    52b6:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	91 e0       	ldi	r25, 0x01	; 1
    52bc:	90 93 cd 0c 	sts	0x0CCD, r25
    52c0:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	80 93 cb 0c 	sts	0x0CCB, r24
    52ca:	39 c0       	rjmp	.+114    	; 0x533e <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    52cc:	84 30       	cpi	r24, 0x04	; 4
    52ce:	69 f5       	brne	.+90     	; 0x532a <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    52d0:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    52d4:	80 91 5c 0d 	lds	r24, 0x0D5C
    52d8:	90 91 5d 0d 	lds	r25, 0x0D5D
    52dc:	f9 e0       	ldi	r31, 0x09	; 9
    52de:	6f 9f       	mul	r22, r31
    52e0:	80 0d       	add	r24, r0
    52e2:	91 1d       	adc	r25, r1
    52e4:	11 24       	eor	r1, r1
    52e6:	fc 01       	movw	r30, r24
    52e8:	31 96       	adiw	r30, 0x01	; 1
    52ea:	a5 91       	lpm	r26, Z+
    52ec:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    52ee:	b0 93 d5 0c 	sts	0x0CD5, r27
    52f2:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    52f6:	ac 01       	movw	r20, r24
    52f8:	49 5f       	subi	r20, 0xF9	; 249
    52fa:	5f 4f       	sbci	r21, 0xFF	; 255
    52fc:	fa 01       	movw	r30, r20
    52fe:	65 91       	lpm	r22, Z+
    5300:	74 91       	lpm	r23, Z
    5302:	05 96       	adiw	r24, 0x05	; 5
    5304:	fc 01       	movw	r30, r24
    5306:	85 91       	lpm	r24, Z+
    5308:	94 91       	lpm	r25, Z
    530a:	68 1b       	sub	r22, r24
    530c:	79 0b       	sbc	r23, r25
    530e:	70 93 d7 0c 	sts	0x0CD7, r23
    5312:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5316:	fa 01       	movw	r30, r20
    5318:	85 91       	lpm	r24, Z+
    531a:	94 91       	lpm	r25, Z
    531c:	a8 0f       	add	r26, r24
    531e:	b9 1f       	adc	r27, r25
    5320:	b0 93 d9 0c 	sts	0x0CD9, r27
    5324:	a0 93 d8 0c 	sts	0x0CD8, r26
    5328:	05 c0       	rjmp	.+10     	; 0x5334 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    532a:	60 e0       	ldi	r22, 0x00	; 0
    532c:	29 83       	std	Y+1, r18	; 0x01
    532e:	0e 94 88 2c 	call	0x5910	; 0x5910 <SetMixerWave>
			SetMixerNote(track->channel,note);
    5332:	29 81       	ldd	r18, Y+1	; 0x01
    5334:	62 2f       	mov	r22, r18
    5336:	f7 01       	movw	r30, r14
    5338:	82 81       	ldd	r24, Z+2	; 0x02
    533a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    533e:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5340:	00 23       	and	r16, r16
    5342:	11 f0       	breq	.+4      	; 0x5348 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    5344:	11 8b       	std	Z+17, r17	; 0x11
    5346:	01 c0       	rjmp	.+2      	; 0x534a <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    5348:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    534a:	e0 91 5c 0d 	lds	r30, 0x0D5C
    534e:	f0 91 5d 0d 	lds	r31, 0x0D5D
    5352:	39 e0       	ldi	r19, 0x09	; 9
    5354:	13 9f       	mul	r17, r19
    5356:	e0 0d       	add	r30, r0
    5358:	f1 1d       	adc	r31, r1
    535a:	11 24       	eor	r1, r1
    535c:	33 96       	adiw	r30, 0x03	; 3
    535e:	85 91       	lpm	r24, Z+
    5360:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    5362:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    5364:	00 97       	sbiw	r24, 0x00	; 0
    5366:	19 f4       	brne	.+6      	; 0x536e <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    5368:	16 8a       	std	Z+22, r1	; 0x16
    536a:	15 8a       	std	Z+21, r1	; 0x15
    536c:	08 c0       	rjmp	.+16     	; 0x537e <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    536e:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    5370:	fc 01       	movw	r30, r24
    5372:	24 91       	lpm	r18, Z
    5374:	f7 01       	movw	r30, r14
    5376:	22 8b       	std	Z+18, r18	; 0x12
    5378:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    537a:	96 8b       	std	Z+22, r25	; 0x16
    537c:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    537e:	0f 90       	pop	r0
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	1f 91       	pop	r17
    5386:	0f 91       	pop	r16
    5388:	ff 90       	pop	r15
    538a:	ef 90       	pop	r14
    538c:	08 95       	ret

0000538e <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    5392:	e0 91 5c 0d 	lds	r30, 0x0D5C
    5396:	f0 91 5d 0d 	lds	r31, 0x0D5D
    539a:	99 e0       	ldi	r25, 0x09	; 9
    539c:	89 9f       	mul	r24, r25
    539e:	e0 0d       	add	r30, r0
    53a0:	f1 1d       	adc	r31, r1
    53a2:	11 24       	eor	r1, r1
    53a4:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    53a6:	e1 30       	cpi	r30, 0x01	; 1
    53a8:	e9 f0       	breq	.+58     	; 0x53e4 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    53aa:	e2 30       	cpi	r30, 0x02	; 2
    53ac:	e9 f0       	breq	.+58     	; 0x53e8 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    53ae:	20 91 fe 0c 	lds	r18, 0x0CFE
    53b2:	27 ff       	sbrs	r18, 7
    53b4:	1d c0       	rjmp	.+58     	; 0x53f0 <TriggerFx+0x62>
    53b6:	20 91 0f 0d 	lds	r18, 0x0D0F
    53ba:	28 13       	cpse	r18, r24
    53bc:	02 c0       	rjmp	.+4      	; 0x53c2 <TriggerFx+0x34>
    53be:	41 11       	cpse	r20, r1
    53c0:	17 c0       	rjmp	.+46     	; 0x53f0 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    53c2:	20 91 15 0d 	lds	r18, 0x0D15
    53c6:	27 ff       	sbrs	r18, 7
    53c8:	11 c0       	rjmp	.+34     	; 0x53ec <TriggerFx+0x5e>
    53ca:	20 91 26 0d 	lds	r18, 0x0D26
    53ce:	28 13       	cpse	r18, r24
    53d0:	02 c0       	rjmp	.+4      	; 0x53d6 <TriggerFx+0x48>
    53d2:	41 11       	cpse	r20, r1
    53d4:	0b c0       	rjmp	.+22     	; 0x53ec <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    53d6:	20 91 12 0d 	lds	r18, 0x0D12
    53da:	90 91 29 0d 	lds	r25, 0x0D29
    53de:	92 17       	cp	r25, r18
    53e0:	28 f4       	brcc	.+10     	; 0x53ec <TriggerFx+0x5e>
    53e2:	06 c0       	rjmp	.+12     	; 0x53f0 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    53e4:	c3 e0       	ldi	r28, 0x03	; 3
    53e6:	05 c0       	rjmp	.+10     	; 0x53f2 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    53e8:	c4 e0       	ldi	r28, 0x04	; 4
    53ea:	03 c0       	rjmp	.+6      	; 0x53f2 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    53ec:	c2 e0       	ldi	r28, 0x02	; 2
    53ee:	01 c0       	rjmp	.+2      	; 0x53f2 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    53f0:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    53f2:	97 e1       	ldi	r25, 0x17	; 23
    53f4:	c9 9f       	mul	r28, r25
    53f6:	e0 01       	movw	r28, r0
    53f8:	11 24       	eor	r1, r1
    53fa:	c9 51       	subi	r28, 0x19	; 25
    53fc:	d3 4f       	sbci	r29, 0xF3	; 243
    53fe:	90 e8       	ldi	r25, 0x80	; 128
    5400:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    5402:	1e 8a       	std	Y+22, r1	; 0x16
    5404:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    5406:	20 e5       	ldi	r18, 0x50	; 80
    5408:	46 2f       	mov	r20, r22
    540a:	68 2f       	mov	r22, r24
    540c:	ce 01       	movw	r24, r28
    540e:	0e 94 39 29 	call	0x5272	; 0x5272 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    5412:	88 81       	ld	r24, Y
    5414:	80 62       	ori	r24, 0x20	; 32
    5416:	88 83       	st	Y, r24
}
    5418:	df 91       	pop	r29
    541a:	cf 91       	pop	r28
    541c:	08 95       	ret

0000541e <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    541e:	cf 93       	push	r28
    5420:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    5422:	a8 2f       	mov	r26, r24
    5424:	b0 e0       	ldi	r27, 0x00	; 0
    5426:	97 e1       	ldi	r25, 0x17	; 23
    5428:	89 9f       	mul	r24, r25
    542a:	f0 01       	movw	r30, r0
    542c:	11 24       	eor	r1, r1
    542e:	e9 51       	subi	r30, 0x19	; 25
    5430:	f3 4f       	sbci	r31, 0xF3	; 243
    5432:	80 81       	ld	r24, Z
    5434:	85 ff       	sbrs	r24, 5
    5436:	02 c0       	rjmp	.+4      	; 0x543c <TriggerNote+0x1e>
    5438:	87 fd       	sbrc	r24, 7
    543a:	2e c0       	rjmp	.+92     	; 0x5498 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    543c:	21 11       	cpse	r18, r1
    543e:	18 c0       	rjmp	.+48     	; 0x5470 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    5440:	97 e1       	ldi	r25, 0x17	; 23
    5442:	9a 9f       	mul	r25, r26
    5444:	f0 01       	movw	r30, r0
    5446:	9b 9f       	mul	r25, r27
    5448:	f0 0d       	add	r31, r0
    544a:	11 24       	eor	r1, r1
    544c:	e9 51       	subi	r30, 0x19	; 25
    544e:	f3 4f       	sbci	r31, 0xF3	; 243
    5450:	97 85       	ldd	r25, Z+15	; 0x0f
    5452:	91 11       	cpse	r25, r1
    5454:	02 c0       	rjmp	.+4      	; 0x545a <TriggerNote+0x3c>
    5456:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    5458:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    545a:	97 e1       	ldi	r25, 0x17	; 23
    545c:	9a 9f       	mul	r25, r26
    545e:	f0 01       	movw	r30, r0
    5460:	9b 9f       	mul	r25, r27
    5462:	f0 0d       	add	r31, r0
    5464:	11 24       	eor	r1, r1
    5466:	e9 51       	subi	r30, 0x19	; 25
    5468:	f3 4f       	sbci	r31, 0xF3	; 243
    546a:	8f 7b       	andi	r24, 0xBF	; 191
    546c:	80 83       	st	Z, r24
    546e:	14 c0       	rjmp	.+40     	; 0x5498 <TriggerNote+0x7a>
    5470:	82 2f       	mov	r24, r18
    5472:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5474:	97 e1       	ldi	r25, 0x17	; 23
    5476:	9a 9f       	mul	r25, r26
    5478:	e0 01       	movw	r28, r0
    547a:	9b 9f       	mul	r25, r27
    547c:	d0 0d       	add	r29, r0
    547e:	11 24       	eor	r1, r1
    5480:	c9 51       	subi	r28, 0x19	; 25
    5482:	d3 4f       	sbci	r29, 0xF3	; 243
    5484:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    5486:	1e 8a       	std	Y+22, r1	; 0x16
    5488:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    548a:	48 2f       	mov	r20, r24
    548c:	ce 01       	movw	r24, r28
    548e:	0e 94 39 29 	call	0x5272	; 0x5272 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    5492:	88 81       	ld	r24, Y
    5494:	80 62       	ori	r24, 0x20	; 32
    5496:	88 83       	st	Y, r24
		}

	}
}
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
    549c:	08 95       	ret

0000549e <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    549e:	6f 92       	push	r6
    54a0:	7f 92       	push	r7
    54a2:	8f 92       	push	r8
    54a4:	9f 92       	push	r9
    54a6:	af 92       	push	r10
    54a8:	bf 92       	push	r11
    54aa:	cf 92       	push	r12
    54ac:	df 92       	push	r13
    54ae:	ef 92       	push	r14
    54b0:	ff 92       	push	r15
    54b2:	0f 93       	push	r16
    54b4:	1f 93       	push	r17
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	c7 ee       	ldi	r28, 0xE7	; 231
    54bc:	dc e0       	ldi	r29, 0x0C	; 12
    54be:	08 eb       	ldi	r16, 0xB8	; 184
    54c0:	1c e0       	ldi	r17, 0x0C	; 12
    54c2:	d8 01       	movw	r26, r16
    54c4:	9e 01       	movw	r18, r28
    54c6:	40 e0       	ldi	r20, 0x00	; 0
    54c8:	50 e0       	ldi	r21, 0x00	; 0
    54ca:	ca 01       	movw	r24, r20
    54cc:	89 51       	subi	r24, 0x19	; 25
    54ce:	93 4f       	sbci	r25, 0xF3	; 243
    54d0:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    54d2:	fc 01       	movw	r30, r24
    54d4:	87 85       	ldd	r24, Z+15	; 0x0f
    54d6:	88 23       	and	r24, r24
    54d8:	91 f0       	breq	.+36     	; 0x54fe <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    54da:	66 85       	ldd	r22, Z+14	; 0x0e
    54dc:	99 27       	eor	r25, r25
    54de:	87 fd       	sbrc	r24, 7
    54e0:	90 95       	com	r25
    54e2:	86 0f       	add	r24, r22
    54e4:	91 1d       	adc	r25, r1
    54e6:	8f 3f       	cpi	r24, 0xFF	; 255
    54e8:	91 05       	cpc	r25, r1
    54ea:	19 f0       	breq	.+6      	; 0x54f2 <ProcessMusic+0x54>
    54ec:	14 f0       	brlt	.+4      	; 0x54f2 <ProcessMusic+0x54>
    54ee:	8f ef       	ldi	r24, 0xFF	; 255
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	97 ff       	sbrs	r25, 7
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <ProcessMusic+0x5c>
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    54fa:	f6 01       	movw	r30, r12
    54fc:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    54fe:	f9 01       	movw	r30, r18
    5500:	f0 80       	ld	r15, Z
    5502:	f3 fe       	sbrs	r15, 3
    5504:	2a c0       	rjmp	.+84     	; 0x555a <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    5506:	65 81       	ldd	r22, Z+5	; 0x05
    5508:	76 81       	ldd	r23, Z+6	; 0x06
    550a:	11 96       	adiw	r26, 0x01	; 1
    550c:	8d 91       	ld	r24, X+
    550e:	9c 91       	ld	r25, X
    5510:	12 97       	sbiw	r26, 0x02	; 2
    5512:	86 0f       	add	r24, r22
    5514:	97 1f       	adc	r25, r23
    5516:	12 96       	adiw	r26, 0x02	; 2
    5518:	9c 93       	st	X, r25
    551a:	8e 93       	st	-X, r24
    551c:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    551e:	f6 01       	movw	r30, r12
    5520:	e7 80       	ldd	r14, Z+7	; 0x07
    5522:	ee 2d       	mov	r30, r14
    5524:	f0 e0       	ldi	r31, 0x00	; 0
    5526:	ee 0f       	add	r30, r30
    5528:	ff 1f       	adc	r31, r31
    552a:	e8 5f       	subi	r30, 0xF8	; 248
    552c:	f5 4a       	sbci	r31, 0xA5	; 165
    552e:	c5 90       	lpm	r12, Z+
    5530:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    5532:	16 16       	cp	r1, r22
    5534:	17 06       	cpc	r1, r23
    5536:	24 f4       	brge	.+8      	; 0x5540 <ProcessMusic+0xa2>
    5538:	8c 15       	cp	r24, r12
    553a:	9d 05       	cpc	r25, r13
    553c:	30 f4       	brcc	.+12     	; 0x554a <ProcessMusic+0xac>
    553e:	0d c0       	rjmp	.+26     	; 0x555a <ProcessMusic+0xbc>
    5540:	67 2b       	or	r22, r23
    5542:	59 f0       	breq	.+22     	; 0x555a <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    5544:	c8 16       	cp	r12, r24
    5546:	d9 06       	cpc	r13, r25
    5548:	40 f0       	brcs	.+16     	; 0x555a <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    554a:	12 96       	adiw	r26, 0x02	; 2
    554c:	dc 92       	st	X, r13
    554e:	ce 92       	st	-X, r12
    5550:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5552:	8f 2d       	mov	r24, r15
    5554:	87 7f       	andi	r24, 0xF7	; 247
    5556:	f9 01       	movw	r30, r18
    5558:	80 83       	st	Z, r24
    555a:	49 5e       	subi	r20, 0xE9	; 233
    555c:	5f 4f       	sbci	r21, 0xFF	; 255
    555e:	29 5e       	subi	r18, 0xE9	; 233
    5560:	3f 4f       	sbci	r19, 0xFF	; 255
    5562:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5564:	43 37       	cpi	r20, 0x73	; 115
    5566:	51 05       	cpc	r21, r1
    5568:	09 f0       	breq	.+2      	; 0x556c <ProcessMusic+0xce>
    556a:	af cf       	rjmp	.-162    	; 0x54ca <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    556c:	80 91 b6 0c 	lds	r24, 0x0CB6
    5570:	88 23       	and	r24, r24
    5572:	09 f4       	brne	.+2      	; 0x5576 <ProcessMusic+0xd8>
    5574:	cc c0       	rjmp	.+408    	; 0x570e <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    5576:	57 e1       	ldi	r21, 0x17	; 23
    5578:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    557a:	80 91 5a 0d 	lds	r24, 0x0D5A
    557e:	90 91 5b 0d 	lds	r25, 0x0D5B
    5582:	20 91 60 0d 	lds	r18, 0x0D60
    5586:	30 91 61 0d 	lds	r19, 0x0D61
    558a:	82 17       	cp	r24, r18
    558c:	93 07       	cpc	r25, r19
    558e:	09 f0       	breq	.+2      	; 0x5592 <ProcessMusic+0xf4>
    5590:	b9 c0       	rjmp	.+370    	; 0x5704 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    5592:	20 91 63 0d 	lds	r18, 0x0D63
    5596:	30 91 64 0d 	lds	r19, 0x0D64
    559a:	b9 01       	movw	r22, r18
    559c:	6f 5f       	subi	r22, 0xFF	; 255
    559e:	7f 4f       	sbci	r23, 0xFF	; 255
    55a0:	70 93 64 0d 	sts	0x0D64, r23
    55a4:	60 93 63 0d 	sts	0x0D63, r22
    55a8:	f9 01       	movw	r30, r18
    55aa:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    55ac:	4f 3f       	cpi	r20, 0xFF	; 255
    55ae:	79 f5       	brne	.+94     	; 0x560e <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    55b0:	a9 01       	movw	r20, r18
    55b2:	4e 5f       	subi	r20, 0xFE	; 254
    55b4:	5f 4f       	sbci	r21, 0xFF	; 255
    55b6:	50 93 64 0d 	sts	0x0D64, r21
    55ba:	40 93 63 0d 	sts	0x0D63, r20
    55be:	fb 01       	movw	r30, r22
    55c0:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    55c2:	6f 32       	cpi	r22, 0x2F	; 47
    55c4:	19 f4       	brne	.+6      	; 0x55cc <ProcessMusic+0x12e>
						playSong=false;
    55c6:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    55ca:	9c c0       	rjmp	.+312    	; 0x5704 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    55cc:	66 30       	cpi	r22, 0x06	; 6
    55ce:	09 f0       	breq	.+2      	; 0x55d2 <ProcessMusic+0x134>
    55d0:	8c c0       	rjmp	.+280    	; 0x56ea <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    55d2:	fa 01       	movw	r30, r20
    55d4:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    55d6:	c9 01       	movw	r24, r18
    55d8:	04 96       	adiw	r24, 0x04	; 4
    55da:	90 93 64 0d 	sts	0x0D64, r25
    55de:	80 93 63 0d 	sts	0x0D63, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    55e2:	f9 01       	movw	r30, r18
    55e4:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    55e6:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    55e8:	e3 35       	cpi	r30, 0x53	; 83
    55ea:	29 f4       	brne	.+10     	; 0x55f6 <ProcessMusic+0x158>
							loopStart=songPos;
    55ec:	90 93 66 0d 	sts	0x0D66, r25
    55f0:	80 93 65 0d 	sts	0x0D65, r24
    55f4:	7a c0       	rjmp	.+244    	; 0x56ea <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    55f6:	e5 34       	cpi	r30, 0x45	; 69
    55f8:	09 f0       	breq	.+2      	; 0x55fc <ProcessMusic+0x15e>
    55fa:	77 c0       	rjmp	.+238    	; 0x56ea <ProcessMusic+0x24c>
							songPos=loopStart;
    55fc:	80 91 65 0d 	lds	r24, 0x0D65
    5600:	90 91 66 0d 	lds	r25, 0x0D66
    5604:	90 93 64 0d 	sts	0x0D64, r25
    5608:	80 93 63 0d 	sts	0x0D63, r24
    560c:	6e c0       	rjmp	.+220    	; 0x56ea <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    560e:	47 fd       	sbrc	r20, 7
    5610:	40 93 5e 0d 	sts	0x0D5E, r20
					channel=lastStatus&0x0f;
    5614:	90 91 5e 0d 	lds	r25, 0x0D5E
    5618:	89 2f       	mov	r24, r25
    561a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    561c:	47 ff       	sbrs	r20, 7
    561e:	08 c0       	rjmp	.+16     	; 0x5630 <ProcessMusic+0x192>
    5620:	2e 5f       	subi	r18, 0xFE	; 254
    5622:	3f 4f       	sbci	r19, 0xFF	; 255
    5624:	30 93 64 0d 	sts	0x0D64, r19
    5628:	20 93 63 0d 	sts	0x0D63, r18
    562c:	fb 01       	movw	r30, r22
    562e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    5630:	90 7f       	andi	r25, 0xF0	; 240
    5632:	90 3b       	cpi	r25, 0xB0	; 176
    5634:	e1 f0       	breq	.+56     	; 0x566e <ProcessMusic+0x1d0>
    5636:	90 3c       	cpi	r25, 0xC0	; 192
    5638:	09 f4       	brne	.+2      	; 0x563c <ProcessMusic+0x19e>
    563a:	51 c0       	rjmp	.+162    	; 0x56de <ProcessMusic+0x240>
    563c:	90 39       	cpi	r25, 0x90	; 144
    563e:	09 f0       	breq	.+2      	; 0x5642 <ProcessMusic+0x1a4>
    5640:	54 c0       	rjmp	.+168    	; 0x56ea <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    5642:	e0 91 63 0d 	lds	r30, 0x0D63
    5646:	f0 91 64 0d 	lds	r31, 0x0D64
    564a:	9f 01       	movw	r18, r30
    564c:	2f 5f       	subi	r18, 0xFF	; 255
    564e:	3f 4f       	sbci	r19, 0xFF	; 255
    5650:	30 93 64 0d 	sts	0x0D64, r19
    5654:	20 93 63 0d 	sts	0x0D63, r18
    5658:	24 91       	lpm	r18, Z
    565a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    565c:	f8 9e       	mul	r15, r24
    565e:	f0 01       	movw	r30, r0
    5660:	11 24       	eor	r1, r1
    5662:	e9 51       	subi	r30, 0x19	; 25
    5664:	f3 4f       	sbci	r31, 0xF3	; 243
    5666:	60 89       	ldd	r22, Z+16	; 0x10
    5668:	0e 94 0f 2a 	call	0x541e	; 0x541e <TriggerNote>
    566c:	3e c0       	rjmp	.+124    	; 0x56ea <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    566e:	e0 91 63 0d 	lds	r30, 0x0D63
    5672:	f0 91 64 0d 	lds	r31, 0x0D64
    5676:	9f 01       	movw	r18, r30
    5678:	2f 5f       	subi	r18, 0xFF	; 255
    567a:	3f 4f       	sbci	r19, 0xFF	; 255
    567c:	30 93 64 0d 	sts	0x0D64, r19
    5680:	20 93 63 0d 	sts	0x0D63, r18
    5684:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    5686:	47 30       	cpi	r20, 0x07	; 7
    5688:	49 f4       	brne	.+18     	; 0x569c <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    568a:	f8 9e       	mul	r15, r24
    568c:	d0 01       	movw	r26, r0
    568e:	11 24       	eor	r1, r1
    5690:	a9 51       	subi	r26, 0x19	; 25
    5692:	b3 4f       	sbci	r27, 0xF3	; 243
    5694:	ee 0f       	add	r30, r30
    5696:	1c 96       	adiw	r26, 0x0c	; 12
    5698:	ec 93       	st	X, r30
    569a:	27 c0       	rjmp	.+78     	; 0x56ea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    569c:	4b 30       	cpi	r20, 0x0B	; 11
    569e:	49 f4       	brne	.+18     	; 0x56b2 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    56a0:	f8 9e       	mul	r15, r24
    56a2:	d0 01       	movw	r26, r0
    56a4:	11 24       	eor	r1, r1
    56a6:	a9 51       	subi	r26, 0x19	; 25
    56a8:	b3 4f       	sbci	r27, 0xF3	; 243
    56aa:	ee 0f       	add	r30, r30
    56ac:	13 96       	adiw	r26, 0x03	; 3
    56ae:	ec 93       	st	X, r30
    56b0:	1c c0       	rjmp	.+56     	; 0x56ea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    56b2:	4c 35       	cpi	r20, 0x5C	; 92
    56b4:	49 f4       	brne	.+18     	; 0x56c8 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    56b6:	f8 9e       	mul	r15, r24
    56b8:	d0 01       	movw	r26, r0
    56ba:	11 24       	eor	r1, r1
    56bc:	a9 51       	subi	r26, 0x19	; 25
    56be:	b3 4f       	sbci	r27, 0xF3	; 243
    56c0:	ee 0f       	add	r30, r30
    56c2:	1a 96       	adiw	r26, 0x0a	; 10
    56c4:	ec 93       	st	X, r30
    56c6:	11 c0       	rjmp	.+34     	; 0x56ea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    56c8:	44 36       	cpi	r20, 0x64	; 100
    56ca:	79 f4       	brne	.+30     	; 0x56ea <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    56cc:	f8 9e       	mul	r15, r24
    56ce:	d0 01       	movw	r26, r0
    56d0:	11 24       	eor	r1, r1
    56d2:	a9 51       	subi	r26, 0x19	; 25
    56d4:	b3 4f       	sbci	r27, 0xF3	; 243
    56d6:	ee 0f       	add	r30, r30
    56d8:	1b 96       	adiw	r26, 0x0b	; 11
    56da:	ec 93       	st	X, r30
    56dc:	06 c0       	rjmp	.+12     	; 0x56ea <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    56de:	f8 9e       	mul	r15, r24
    56e0:	f0 01       	movw	r30, r0
    56e2:	11 24       	eor	r1, r1
    56e4:	e9 51       	subi	r30, 0x19	; 25
    56e6:	f3 4f       	sbci	r31, 0xF3	; 243
    56e8:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    56ea:	83 e6       	ldi	r24, 0x63	; 99
    56ec:	9d e0       	ldi	r25, 0x0D	; 13
    56ee:	0e 94 13 29 	call	0x5226	; 0x5226 <ReadVarLen>
    56f2:	90 93 61 0d 	sts	0x0D61, r25
    56f6:	80 93 60 0d 	sts	0x0D60, r24
				currDeltaTime=0;
    56fa:	10 92 5b 0d 	sts	0x0D5B, r1
    56fe:	10 92 5a 0d 	sts	0x0D5A, r1
    5702:	3b cf       	rjmp	.-394    	; 0x557a <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    5704:	01 96       	adiw	r24, 0x01	; 1
    5706:	90 93 5b 0d 	sts	0x0D5B, r25
    570a:	80 93 5a 0d 	sts	0x0D5A, r24
    570e:	90 ef       	ldi	r25, 0xF0	; 240
    5710:	a9 2e       	mov	r10, r25
    5712:	9c e0       	ldi	r25, 0x0C	; 12
    5714:	b9 2e       	mov	r11, r25
    5716:	2a ef       	ldi	r18, 0xFA	; 250
    5718:	c2 2e       	mov	r12, r18
    571a:	2c e0       	ldi	r18, 0x0C	; 12
    571c:	d2 2e       	mov	r13, r18
    571e:	3b ef       	ldi	r19, 0xFB	; 251
    5720:	e3 2e       	mov	r14, r19
    5722:	3c e0       	ldi	r19, 0x0C	; 12
    5724:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5726:	66 24       	eor	r6, r6
    5728:	6a 94       	dec	r6
    572a:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    572c:	88 81       	ld	r24, Y
    572e:	85 ff       	sbrs	r24, 5
    5730:	42 c0       	rjmp	.+132    	; 0x57b6 <ProcessMusic+0x318>
    5732:	2d 89       	ldd	r18, Y+21	; 0x15
    5734:	3e 89       	ldd	r19, Y+22	; 0x16
    5736:	23 2b       	or	r18, r19
    5738:	09 f4       	brne	.+2      	; 0x573c <ProcessMusic+0x29e>
    573a:	3d c0       	rjmp	.+122    	; 0x57b6 <ProcessMusic+0x318>
    573c:	86 fd       	sbrc	r24, 6
    573e:	3b c0       	rjmp	.+118    	; 0x57b6 <ProcessMusic+0x318>
    5740:	47 01       	movw	r8, r14
    5742:	f2 e0       	ldi	r31, 0x02	; 2
    5744:	8f 1a       	sub	r8, r31
    5746:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    5748:	d6 01       	movw	r26, r12
    574a:	9c 91       	ld	r25, X
    574c:	f4 01       	movw	r30, r8
    574e:	80 81       	ld	r24, Z
    5750:	98 13       	cpse	r25, r24
    5752:	2e c0       	rjmp	.+92     	; 0x57b0 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    5754:	ed 89       	ldd	r30, Y+21	; 0x15
    5756:	fe 89       	ldd	r31, Y+22	; 0x16
    5758:	bf 01       	movw	r22, r30
    575a:	6f 5f       	subi	r22, 0xFF	; 255
    575c:	7f 4f       	sbci	r23, 0xFF	; 255
    575e:	7e 8b       	std	Y+22, r23	; 0x16
    5760:	6d 8b       	std	Y+21, r22	; 0x15
    5762:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    5764:	8f 3f       	cpi	r24, 0xFF	; 255
    5766:	31 f4       	brne	.+12     	; 0x5774 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5768:	88 81       	ld	r24, Y
    576a:	8f 77       	andi	r24, 0x7F	; 127
    576c:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    576e:	1e 8a       	std	Y+22, r1	; 0x16
    5770:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    5772:	1e c0       	rjmp	.+60     	; 0x57b0 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    5774:	9f 01       	movw	r18, r30
    5776:	2e 5f       	subi	r18, 0xFE	; 254
    5778:	3f 4f       	sbci	r19, 0xFF	; 255
    577a:	3e 8b       	std	Y+22, r19	; 0x16
    577c:	2d 8b       	std	Y+21, r18	; 0x15
    577e:	fb 01       	movw	r30, r22
    5780:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    5782:	e8 2f       	mov	r30, r24
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	ee 0f       	add	r30, r30
    5788:	ff 1f       	adc	r31, r31
    578a:	e4 53       	subi	r30, 0x34	; 52
    578c:	ff 4f       	sbci	r31, 0xFF	; 255
    578e:	25 91       	lpm	r18, Z+
    5790:	34 91       	lpm	r19, Z
    5792:	ce 01       	movw	r24, r28
    5794:	f9 01       	movw	r30, r18
    5796:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    5798:	ed 89       	ldd	r30, Y+21	; 0x15
    579a:	fe 89       	ldd	r31, Y+22	; 0x16
    579c:	cf 01       	movw	r24, r30
    579e:	01 96       	adiw	r24, 0x01	; 1
    57a0:	9e 8b       	std	Y+22, r25	; 0x16
    57a2:	8d 8b       	std	Y+21, r24	; 0x15
    57a4:	e4 91       	lpm	r30, Z
    57a6:	d4 01       	movw	r26, r8
    57a8:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    57aa:	f6 01       	movw	r30, r12
    57ac:	10 82       	st	Z, r1
    57ae:	cc cf       	rjmp	.-104    	; 0x5748 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    57b0:	9f 5f       	subi	r25, 0xFF	; 255
    57b2:	d6 01       	movw	r26, r12
    57b4:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    57b6:	98 81       	ld	r25, Y
    57b8:	95 ff       	sbrs	r25, 5
    57ba:	6c c0       	rjmp	.+216    	; 0x5894 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    57bc:	f7 01       	movw	r30, r14
    57be:	80 81       	ld	r24, Z
    57c0:	8f 3f       	cpi	r24, 0xFF	; 255
    57c2:	11 f0       	breq	.+4      	; 0x57c8 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    57c4:	8f 5f       	subi	r24, 0xFF	; 255
    57c6:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    57c8:	97 fd       	sbrc	r25, 7
    57ca:	04 c0       	rjmp	.+8      	; 0x57d4 <ProcessMusic+0x336>
    57cc:	f7 01       	movw	r30, r14
    57ce:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    57d0:	90 81       	ld	r25, Z
    57d2:	01 c0       	rjmp	.+2      	; 0x57d6 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    57d4:	9f ef       	ldi	r25, 0xFF	; 255
    57d6:	f7 01       	movw	r30, r14
    57d8:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    57da:	80 81       	ld	r24, Z
    57dc:	88 23       	and	r24, r24
    57de:	09 f4       	brne	.+2      	; 0x57e2 <ProcessMusic+0x344>
    57e0:	4e c0       	rjmp	.+156    	; 0x587e <ProcessMusic+0x3e0>
    57e2:	31 96       	adiw	r30, 0x01	; 1
    57e4:	50 81       	ld	r21, Z
    57e6:	55 23       	and	r21, r21
    57e8:	09 f4       	brne	.+2      	; 0x57ec <ProcessMusic+0x34e>
    57ea:	49 c0       	rjmp	.+146    	; 0x587e <ProcessMusic+0x3e0>
    57ec:	99 23       	and	r25, r25
    57ee:	09 f4       	brne	.+2      	; 0x57f2 <ProcessMusic+0x354>
    57f0:	46 c0       	rjmp	.+140    	; 0x587e <ProcessMusic+0x3e0>
    57f2:	40 91 5f 0d 	lds	r20, 0x0D5F
    57f6:	44 23       	and	r20, r20
    57f8:	09 f4       	brne	.+2      	; 0x57fc <ProcessMusic+0x35e>
    57fa:	41 c0       	rjmp	.+130    	; 0x587e <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    57fc:	89 9f       	mul	r24, r25
    57fe:	c0 01       	movw	r24, r0
    5800:	11 24       	eor	r1, r1
    5802:	93 95       	inc	r25
				uVol>>=8;
    5804:	89 2f       	mov	r24, r25
    5806:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    5808:	58 9f       	mul	r21, r24
    580a:	90 01       	movw	r18, r0
    580c:	59 9f       	mul	r21, r25
    580e:	30 0d       	add	r19, r0
    5810:	11 24       	eor	r1, r1
    5812:	c9 01       	movw	r24, r18
    5814:	93 95       	inc	r25
				uVol>>=8;
    5816:	89 2f       	mov	r24, r25
    5818:	99 27       	eor	r25, r25
    581a:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    581c:	50 81       	ld	r21, Z
    581e:	58 9f       	mul	r21, r24
    5820:	90 01       	movw	r18, r0
    5822:	59 9f       	mul	r21, r25
    5824:	30 0d       	add	r19, r0
    5826:	11 24       	eor	r1, r1
    5828:	33 95       	inc	r19
					uVol>>=8;
    582a:	23 2f       	mov	r18, r19
    582c:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    582e:	42 9f       	mul	r20, r18
    5830:	c0 01       	movw	r24, r0
    5832:	43 9f       	mul	r20, r19
    5834:	90 0d       	add	r25, r0
    5836:	11 24       	eor	r1, r1
    5838:	93 95       	inc	r25
				uVol>>=8;
    583a:	89 2f       	mov	r24, r25
    583c:	99 27       	eor	r25, r25
    583e:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    5840:	20 81       	ld	r18, Z
    5842:	22 23       	and	r18, r18
    5844:	f1 f0       	breq	.+60     	; 0x5882 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    5846:	d5 01       	movw	r26, r10
    5848:	ec 91       	ld	r30, X
    584a:	f0 e0       	ldi	r31, 0x00	; 0
    584c:	e0 50       	subi	r30, 0x00	; 0
    584e:	f4 4a       	sbci	r31, 0xA4	; 164
    5850:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    5852:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    5854:	2e 9f       	mul	r18, r30
    5856:	f0 01       	movw	r30, r0
    5858:	11 24       	eor	r1, r1
    585a:	f3 95       	inc	r31
					tVol>>=8;
    585c:	ef 2f       	mov	r30, r31
    585e:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5860:	a3 01       	movw	r20, r6
    5862:	4e 1b       	sub	r20, r30
    5864:	5f 0b       	sbc	r21, r31
    5866:	48 9f       	mul	r20, r24
    5868:	90 01       	movw	r18, r0
    586a:	49 9f       	mul	r20, r25
    586c:	30 0d       	add	r19, r0
    586e:	58 9f       	mul	r21, r24
    5870:	30 0d       	add	r19, r0
    5872:	11 24       	eor	r1, r1
    5874:	c9 01       	movw	r24, r18
    5876:	93 95       	inc	r25
					uVol>>=8;
    5878:	89 2f       	mov	r24, r25
    587a:	99 27       	eor	r25, r25
    587c:	02 c0       	rjmp	.+4      	; 0x5882 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    5882:	f5 01       	movw	r30, r10
    5884:	30 81       	ld	r19, Z
    5886:	f7 01       	movw	r30, r14
    5888:	39 97       	sbiw	r30, 0x09	; 9
    588a:	20 81       	ld	r18, Z
    588c:	23 0f       	add	r18, r19
    588e:	d5 01       	movw	r26, r10
    5890:	2c 93       	st	X, r18
    5892:	02 c0       	rjmp	.+4      	; 0x5898 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    5898:	f8 01       	movw	r30, r16
    589a:	80 83       	st	Z, r24
    589c:	67 96       	adiw	r28, 0x17	; 23
    589e:	0a 5f       	subi	r16, 0xFA	; 250
    58a0:	1f 4f       	sbci	r17, 0xFF	; 255
    58a2:	f7 e1       	ldi	r31, 0x17	; 23
    58a4:	af 0e       	add	r10, r31
    58a6:	b1 1c       	adc	r11, r1
    58a8:	87 e1       	ldi	r24, 0x17	; 23
    58aa:	c8 0e       	add	r12, r24
    58ac:	d1 1c       	adc	r13, r1
    58ae:	97 e1       	ldi	r25, 0x17	; 23
    58b0:	e9 0e       	add	r14, r25
    58b2:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    58b4:	ad e0       	ldi	r26, 0x0D	; 13
    58b6:	ca 35       	cpi	r28, 0x5A	; 90
    58b8:	da 07       	cpc	r29, r26
    58ba:	09 f0       	breq	.+2      	; 0x58be <ProcessMusic+0x420>
    58bc:	37 cf       	rjmp	.-402    	; 0x572c <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    58be:	df 91       	pop	r29
    58c0:	cf 91       	pop	r28
    58c2:	1f 91       	pop	r17
    58c4:	0f 91       	pop	r16
    58c6:	ff 90       	pop	r15
    58c8:	ef 90       	pop	r14
    58ca:	df 90       	pop	r13
    58cc:	cf 90       	pop	r12
    58ce:	bf 90       	pop	r11
    58d0:	af 90       	pop	r10
    58d2:	9f 90       	pop	r9
    58d4:	8f 90       	pop	r8
    58d6:	7f 90       	pop	r7
    58d8:	6f 90       	pop	r6
    58da:	08 95       	ret

000058dc <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    58dc:	80 93 5f 0d 	sts	0x0D5F, r24
    58e0:	08 95       	ret

000058e2 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    58e2:	99 27       	eor	r25, r25
	clr r23
    58e4:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    58e6:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    58e8:	09 f4       	brne	.+2      	; 0x58ec <set_note_waves>
		ret
    58ea:	08 95       	ret

000058ec <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    58ec:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    58ee:	fa e5       	ldi	r31, 0x5A	; 90
	lsl r22
    58f0:	66 0f       	add	r22, r22
	rol r23
    58f2:	77 1f       	adc	r23, r23
	add ZL,r22
    58f4:	e6 0f       	add	r30, r22
	adc ZH,r23	
    58f6:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    58f8:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    58fa:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    58fc:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    58fe:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    5900:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    5902:	28 9f       	mul	r18, r24
	add ZL,r0
    5904:	e0 0d       	add	r30, r0
	adc ZH,r1
    5906:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    5908:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    590a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    590c:	11 24       	eor	r1, r1
	

	ret
    590e:	08 95       	ret

00005910 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    5910:	99 27       	eor	r25, r25
	clr r23
    5912:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    5914:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    5916:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    5918:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    591a:	28 9f       	mul	r18, r24
	add ZL,r0
    591c:	e0 0d       	add	r30, r0
	adc ZH,r1
    591e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    5920:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    5922:	31 f4       	brne	.+12     	; 0x5930 <smw1>
	lds r22,tr4_params
    5924:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    5928:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    592a:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    592e:	0b c0       	rjmp	.+22     	; 0x5946 <esmw>

00005930 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    5930:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    5932:	31 f4       	brne	.+12     	; 0x5940 <smw2>
	lds r22,tr4_params
    5934:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    5938:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    593a:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    593e:	03 c0       	rjmp	.+6      	; 0x5946 <esmw>

00005940 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    5940:	7c e5       	ldi	r23, 0x5C	; 92
	add r23,r22
    5942:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    5944:	75 83       	std	Z+5, r23	; 0x05

00005946 <esmw>:

esmw:
	clr r1	
    5946:	11 24       	eor	r1, r1
	ret
    5948:	08 95       	ret
	...

00005a00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    5a00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    5a02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    5a06:	08 95       	ret

00005a08 <steptable>:
    5a08:	22 00       	.word	0x0022	; ????
    5a0a:	24 00       	.word	0x0024	; ????
    5a0c:	26 00       	.word	0x0026	; ????
    5a0e:	28 00       	.word	0x0028	; ????
    5a10:	2b 00       	.word	0x002b	; ????
    5a12:	2d 00       	.word	0x002d	; ????
    5a14:	30 00       	.word	0x0030	; ????
    5a16:	33 00       	.word	0x0033	; ????
    5a18:	36 00       	.word	0x0036	; ????
    5a1a:	39 00       	.word	0x0039	; ????
    5a1c:	3d 00       	.word	0x003d	; ????
    5a1e:	40 00       	.word	0x0040	; ????
    5a20:	44 00       	.word	0x0044	; ????
    5a22:	48 00       	.word	0x0048	; ????
    5a24:	4c 00       	.word	0x004c	; ????
    5a26:	51 00       	.word	0x0051	; ????
    5a28:	56 00       	.word	0x0056	; ????
    5a2a:	5b 00       	.word	0x005b	; ????
    5a2c:	60 00       	.word	0x0060	; ????
    5a2e:	66 00       	.word	0x0066	; ????
    5a30:	6c 00       	.word	0x006c	; ????
    5a32:	73 00       	.word	0x0073	; ????
    5a34:	79 00       	.word	0x0079	; ????
    5a36:	81 00       	.word	0x0081	; ????
    5a38:	88 00       	.word	0x0088	; ????
    5a3a:	90 00       	.word	0x0090	; ????
    5a3c:	99 00       	.word	0x0099	; ????
    5a3e:	a2 00       	.word	0x00a2	; ????
    5a40:	ac 00       	.word	0x00ac	; ????
    5a42:	b6 00       	.word	0x00b6	; ????
    5a44:	c1 00       	.word	0x00c1	; ????
    5a46:	cc 00       	.word	0x00cc	; ????
    5a48:	d8 00       	.word	0x00d8	; ????
    5a4a:	e5 00       	.word	0x00e5	; ????
    5a4c:	f3 00       	.word	0x00f3	; ????
    5a4e:	01 01       	movw	r0, r2
    5a50:	10 01       	movw	r2, r0
    5a52:	21 01       	movw	r4, r2
    5a54:	32 01       	movw	r6, r4
    5a56:	44 01       	movw	r8, r8
    5a58:	57 01       	movw	r10, r14
    5a5a:	6c 01       	movw	r12, r24
    5a5c:	81 01       	movw	r16, r2
    5a5e:	98 01       	movw	r18, r16
    5a60:	b0 01       	movw	r22, r0
    5a62:	ca 01       	movw	r24, r20
    5a64:	e5 01       	movw	r28, r10
    5a66:	02 02       	muls	r16, r18
    5a68:	21 02       	muls	r18, r17
    5a6a:	41 02       	muls	r20, r17
    5a6c:	64 02       	muls	r22, r20
    5a6e:	88 02       	muls	r24, r24
    5a70:	ae 02       	muls	r26, r30
    5a72:	d7 02       	muls	r29, r23
    5a74:	03 03       	mulsu	r16, r19
    5a76:	30 03       	mulsu	r19, r16
    5a78:	61 03       	mulsu	r22, r17
    5a7a:	94 03       	fmuls	r17, r20
    5a7c:	cb 03       	fmulsu	r20, r19
    5a7e:	05 04       	cpc	r0, r5
    5a80:	42 04       	cpc	r4, r2
    5a82:	83 04       	cpc	r8, r3
    5a84:	c7 04       	cpc	r12, r7
    5a86:	10 05       	cpc	r17, r0
    5a88:	5d 05       	cpc	r21, r13
    5a8a:	af 05       	cpc	r26, r15
    5a8c:	05 06       	cpc	r0, r21
    5a8e:	61 06       	cpc	r6, r17
    5a90:	c2 06       	cpc	r12, r18
    5a92:	29 07       	cpc	r18, r25
    5a94:	96 07       	cpc	r25, r22
    5a96:	09 08       	sbc	r0, r9
    5a98:	83 08       	sbc	r8, r3
    5a9a:	05 09       	sbc	r16, r5
    5a9c:	8e 09       	sbc	r24, r14
    5a9e:	20 0a       	sbc	r2, r16
    5aa0:	ba 0a       	sbc	r11, r26
    5aa2:	5d 0b       	sbc	r21, r29
    5aa4:	0a 0c       	add	r0, r10
    5aa6:	c1 0c       	add	r12, r1
    5aa8:	84 0d       	add	r24, r4
    5aaa:	51 0e       	add	r5, r17
    5aac:	2b 0f       	add	r18, r27
    5aae:	12 10       	cpse	r1, r2
    5ab0:	07 11       	cpse	r16, r7
    5ab2:	0a 12       	cpse	r0, r26
    5ab4:	1d 13       	cpse	r17, r29
    5ab6:	40 14       	cp	r4, r0
    5ab8:	74 15       	cp	r23, r4
    5aba:	ba 16       	cp	r11, r26
    5abc:	14 18       	sub	r1, r4
    5abe:	83 19       	sub	r24, r3
    5ac0:	07 1b       	sub	r16, r23
    5ac2:	a3 1c       	adc	r10, r3
    5ac4:	57 1e       	adc	r5, r23
    5ac6:	24 20       	and	r2, r4
    5ac8:	0e 22       	and	r0, r30
    5aca:	14 24       	eor	r1, r4
    5acc:	39 26       	eor	r3, r25
    5ace:	7f 28       	or	r7, r15
    5ad0:	e8 2a       	or	r14, r24
    5ad2:	75 2d       	mov	r23, r5
    5ad4:	29 30       	cpi	r18, 0x09	; 9
    5ad6:	06 33       	cpi	r16, 0x36	; 54
    5ad8:	0f 36       	cpi	r16, 0x6F	; 111
    5ada:	45 39       	cpi	r20, 0x95	; 149
    5adc:	ad 3c       	cpi	r26, 0xCD	; 205
    5ade:	49 40       	sbci	r20, 0x09	; 9
    5ae0:	1b 44       	sbci	r17, 0x4B	; 75
    5ae2:	28 48       	sbci	r18, 0x88	; 136
    5ae4:	73 4c       	sbci	r23, 0xC3	; 195
    5ae6:	fe 50       	subi	r31, 0x0E	; 14
    5ae8:	cf 55       	subi	r28, 0x5F	; 95
    5aea:	ea 5a       	subi	r30, 0xAA	; 170
    5aec:	51 60       	ori	r21, 0x01	; 1
    5aee:	0c 66       	ori	r16, 0x6C	; 108
    5af0:	1d 6c       	ori	r17, 0xCD	; 205
    5af2:	8b 72       	andi	r24, 0x2B	; 43
    5af4:	5a 79       	andi	r21, 0x9A	; 154
    5af6:	92 80       	ldd	r9, Z+2	; 0x02
    5af8:	37 88       	ldd	r3, Z+23	; 0x17
    5afa:	50 90 e5 98 	lds	r5, 0x98E5
    5afe:	fd a1       	ldd	r31, Y+37	; 0x25
    5b00:	9f ab       	std	Y+55, r25	; 0x37
    5b02:	d3 b5       	in	r29, 0x23	; 35
    5b04:	a3 c0       	rjmp	.+326    	; 0x5c4c <waves+0x4c>
	...

00005c00 <waves>:
    5c00:	00 03       	mulsu	r16, r16
    5c02:	06 09       	sbc	r16, r6
    5c04:	0c 10       	cpse	r0, r12
    5c06:	13 16       	cp	r1, r19
    5c08:	19 1c       	adc	r1, r9
    5c0a:	1f 22       	and	r1, r31
    5c0c:	25 28       	or	r2, r5
    5c0e:	2b 2e       	mov	r2, r27
    5c10:	31 33       	cpi	r19, 0x31	; 49
    5c12:	36 39       	cpi	r19, 0x96	; 150
    5c14:	3c 3f       	cpi	r19, 0xFC	; 252
    5c16:	41 44       	sbci	r20, 0x41	; 65
    5c18:	47 49       	sbci	r20, 0x97	; 151
    5c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    5c1c:	51 53       	subi	r21, 0x31	; 49
    5c1e:	55 58       	subi	r21, 0x85	; 133
    5c20:	5a 5c       	subi	r21, 0xCA	; 202
    5c22:	5e 60       	ori	r21, 0x0E	; 14
    5c24:	62 64       	ori	r22, 0x42	; 66
    5c26:	66 68       	ori	r22, 0x86	; 134
    5c28:	6a 6b       	ori	r22, 0xBA	; 186
    5c2a:	6d 6f       	ori	r22, 0xFD	; 253
    5c2c:	70 71       	andi	r23, 0x10	; 16
    5c2e:	73 74       	andi	r23, 0x43	; 67
    5c30:	75 76       	andi	r23, 0x65	; 101
    5c32:	78 79       	andi	r23, 0x98	; 152
    5c34:	7a 7a       	andi	r23, 0xAA	; 170
    5c36:	7b 7c       	andi	r23, 0xCB	; 203
    5c38:	7d 7d       	andi	r23, 0xDD	; 221
    5c3a:	7e 7e       	andi	r23, 0xEE	; 238
    5c3c:	7e 7f       	andi	r23, 0xFE	; 254
    5c3e:	7f 7f       	andi	r23, 0xFF	; 255
    5c40:	7f 7f       	andi	r23, 0xFF	; 255
    5c42:	7f 7f       	andi	r23, 0xFF	; 255
    5c44:	7e 7e       	andi	r23, 0xEE	; 238
    5c46:	7e 7d       	andi	r23, 0xDE	; 222
    5c48:	7d 7c       	andi	r23, 0xCD	; 205
    5c4a:	7b 7a       	andi	r23, 0xAB	; 171
    5c4c:	7a 79       	andi	r23, 0x9A	; 154
    5c4e:	78 76       	andi	r23, 0x68	; 104
    5c50:	75 74       	andi	r23, 0x45	; 69
    5c52:	73 71       	andi	r23, 0x13	; 19
    5c54:	70 6f       	ori	r23, 0xF0	; 240
    5c56:	6d 6b       	ori	r22, 0xBD	; 189
    5c58:	6a 68       	ori	r22, 0x8A	; 138
    5c5a:	66 64       	ori	r22, 0x46	; 70
    5c5c:	62 60       	ori	r22, 0x02	; 2
    5c5e:	5e 5c       	subi	r21, 0xCE	; 206
    5c60:	5a 58       	subi	r21, 0x8A	; 138
    5c62:	55 53       	subi	r21, 0x35	; 53
    5c64:	51 4e       	sbci	r21, 0xE1	; 225
    5c66:	4c 49       	sbci	r20, 0x9C	; 156
    5c68:	47 44       	sbci	r20, 0x47	; 71
    5c6a:	41 3f       	cpi	r20, 0xF1	; 241
    5c6c:	3c 39       	cpi	r19, 0x9C	; 156
    5c6e:	36 33       	cpi	r19, 0x36	; 54
    5c70:	31 2e       	mov	r3, r17
    5c72:	2b 28       	or	r2, r11
    5c74:	25 22       	and	r2, r21
    5c76:	1f 1c       	adc	r1, r15
    5c78:	19 16       	cp	r1, r25
    5c7a:	13 10       	cpse	r1, r3
    5c7c:	0c 09       	sbc	r16, r12
    5c7e:	06 03       	mulsu	r16, r22
    5c80:	00 fd       	sbrc	r16, 0
    5c82:	fa f7       	brpl	.-2      	; 0x5c82 <waves+0x82>
    5c84:	f4 f0       	brlt	.+60     	; 0x5cc2 <waves+0xc2>
    5c86:	ed ea       	ldi	r30, 0xAD	; 173
    5c88:	e7 e4       	ldi	r30, 0x47	; 71
    5c8a:	e1 de       	rcall	.-574    	; 0x5a4e <steptable+0x46>
    5c8c:	db d8       	rcall	.-3658   	; 0x4e44 <fill_vram_loop+0x6>
    5c8e:	d5 d2       	rcall	.+1450   	; 0x623a <waves+0x63a>
    5c90:	cf cd       	rjmp	.-1122   	; 0x5830 <ProcessMusic+0x392>
    5c92:	ca c7       	rjmp	.+3988   	; 0x6c28 <LBMapSprite+0x66>
    5c94:	c4 c1       	rjmp	.+904    	; 0x601e <waves+0x41e>
    5c96:	bf bc       	out	0x2f, r11	; 47
    5c98:	b9 b7       	in	r27, 0x39	; 57
    5c9a:	b4 b2       	in	r11, 0x14	; 20
    5c9c:	af ad       	ldd	r26, Y+63	; 0x3f
    5c9e:	ab a8       	ldd	r10, Y+51	; 0x33
    5ca0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    5ca2:	a2 a0       	ldd	r10, Z+34	; 0x22
    5ca4:	9e 9c       	mul	r9, r14
    5ca6:	9a 98       	cbi	0x13, 2	; 19
    5ca8:	96 95       	lsr	r25
    5caa:	93 91       	.word	0x9193	; ????
    5cac:	90 8f       	std	Z+24, r25	; 0x18
    5cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    5cb0:	8b 8a       	std	Y+19, r8	; 0x13
    5cb2:	88 87       	std	Y+8, r24	; 0x08
    5cb4:	86 86       	std	Z+14, r8	; 0x0e
    5cb6:	85 84       	ldd	r8, Z+13	; 0x0d
    5cb8:	83 83       	std	Z+3, r24	; 0x03
    5cba:	82 82       	std	Z+2, r8	; 0x02
    5cbc:	82 81       	ldd	r24, Z+2	; 0x02
    5cbe:	81 81       	ldd	r24, Z+1	; 0x01
    5cc0:	81 81       	ldd	r24, Z+1	; 0x01
    5cc2:	81 81       	ldd	r24, Z+1	; 0x01
    5cc4:	82 82       	std	Z+2, r8	; 0x02
    5cc6:	82 83       	std	Z+2, r24	; 0x02
    5cc8:	83 84       	ldd	r8, Z+11	; 0x0b
    5cca:	85 86       	std	Z+13, r8	; 0x0d
    5ccc:	86 87       	std	Z+14, r24	; 0x0e
    5cce:	88 8a       	std	Y+16, r8	; 0x10
    5cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    5cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    5cd4:	90 91 93 95 	lds	r25, 0x9593
    5cd8:	96 98       	cbi	0x12, 6	; 18
    5cda:	9a 9c       	mul	r9, r10
    5cdc:	9e a0       	ldd	r9, Y+38	; 0x26
    5cde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    5ce0:	a6 a8       	ldd	r10, Z+54	; 0x36
    5ce2:	ab ad       	ldd	r26, Y+59	; 0x3b
    5ce4:	af b2       	in	r10, 0x1f	; 31
    5ce6:	b4 b7       	in	r27, 0x34	; 52
    5ce8:	b9 bc       	out	0x29, r11	; 41
    5cea:	bf c1       	rjmp	.+894    	; 0x606a <waves+0x46a>
    5cec:	c4 c7       	rjmp	.+3976   	; 0x6c76 <LBMoveSprite+0x10>
    5cee:	ca cd       	rjmp	.-1132   	; 0x5884 <ProcessMusic+0x3e6>
    5cf0:	cf d2       	rcall	.+1438   	; 0x6290 <waves+0x690>
    5cf2:	d5 d8       	rcall	.-3670   	; 0x4e9e <ReadJoypad+0x8>
    5cf4:	db de       	rcall	.-586    	; 0x5aac <steptable+0xa4>
    5cf6:	e1 e4       	ldi	r30, 0x41	; 65
    5cf8:	e7 ea       	ldi	r30, 0xA7	; 167
    5cfa:	ed f0       	brhs	.+58     	; 0x5d36 <waves+0x136>
    5cfc:	f4 f7       	brge	.-4      	; 0x5cfa <waves+0xfa>
    5cfe:	fa fd       	.word	0xfdfa	; ????
    5d00:	80 81       	ld	r24, Z
    5d02:	82 83       	std	Z+2, r24	; 0x02
    5d04:	84 85       	ldd	r24, Z+12	; 0x0c
    5d06:	86 87       	std	Z+14, r24	; 0x0e
    5d08:	88 89       	ldd	r24, Y+16	; 0x10
    5d0a:	8a 8b       	std	Y+18, r24	; 0x12
    5d0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    5d10:	90 91 92 93 	lds	r25, 0x9392
    5d14:	94 95       	.word	0x9594	; ????
    5d16:	96 97       	sbiw	r26, 0x26	; 38
    5d18:	98 99       	sbic	0x13, 0	; 19
    5d1a:	9a 9b       	sbis	0x13, 2	; 19
    5d1c:	9c 9d       	mul	r25, r12
    5d1e:	9e 9f       	mul	r25, r30
    5d20:	a0 a1       	ldd	r26, Z+32	; 0x20
    5d22:	a2 a3       	std	Z+34, r26	; 0x22
    5d24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5d26:	a6 a7       	std	Z+46, r26	; 0x2e
    5d28:	a8 a9       	ldd	r26, Y+48	; 0x30
    5d2a:	aa ab       	std	Y+50, r26	; 0x32
    5d2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    5d2e:	ae af       	std	Y+62, r26	; 0x3e
    5d30:	b0 b1       	in	r27, 0x00	; 0
    5d32:	b2 b3       	in	r27, 0x12	; 18
    5d34:	b4 b5       	in	r27, 0x24	; 36
    5d36:	b6 b7       	in	r27, 0x36	; 54
    5d38:	b8 b9       	out	0x08, r27	; 8
    5d3a:	ba bb       	out	0x1a, r27	; 26
    5d3c:	bc bd       	out	0x2c, r27	; 44
    5d3e:	be bf       	out	0x3e, r27	; 62
    5d40:	c0 c1       	rjmp	.+896    	; 0x60c2 <waves+0x4c2>
    5d42:	c2 c3       	rjmp	.+1924   	; 0x64c8 <waves+0x8c8>
    5d44:	c4 c5       	rjmp	.+2952   	; 0x68ce <DrawMap+0x16>
    5d46:	c6 c7       	rjmp	.+3980   	; 0x6cd4 <LBMoveSprite+0x6e>
    5d48:	c8 c9       	rjmp	.-3184   	; 0x50da <PatchCommand11+0x14>
    5d4a:	ca cb       	rjmp	.-2156   	; 0x54e0 <ProcessMusic+0x42>
    5d4c:	cc cd       	rjmp	.-1128   	; 0x58e6 <SetMixerNote+0x4>
    5d4e:	ce cf       	rjmp	.-100    	; 0x5cec <waves+0xec>
    5d50:	d0 d1       	rcall	.+928    	; 0x60f2 <waves+0x4f2>
    5d52:	d2 d3       	rcall	.+1956   	; 0x64f8 <waves+0x8f8>
    5d54:	d4 d5       	rcall	.+2984   	; 0x68fe <DrawMap+0x46>
    5d56:	d6 d7       	rcall	.+4012   	; 0x6d04 <LBRotateSprites+0x22>
    5d58:	d8 d9       	rcall	.-3152   	; 0x510a <PatchCommand11+0x44>
    5d5a:	da db       	rcall	.-2124   	; 0x5510 <ProcessMusic+0x72>
    5d5c:	dc dd       	rcall	.-1096   	; 0x5916 <SetMixerWave+0x6>
    5d5e:	de df       	rcall	.-68     	; 0x5d1c <waves+0x11c>
    5d60:	e0 e1       	ldi	r30, 0x10	; 16
    5d62:	e2 e3       	ldi	r30, 0x32	; 50
    5d64:	e4 e5       	ldi	r30, 0x54	; 84
    5d66:	e6 e7       	ldi	r30, 0x76	; 118
    5d68:	e8 e9       	ldi	r30, 0x98	; 152
    5d6a:	ea eb       	ldi	r30, 0xBA	; 186
    5d6c:	ec ed       	ldi	r30, 0xDC	; 220
    5d6e:	ee ef       	ldi	r30, 0xFE	; 254
    5d70:	f0 f1       	brcs	.+124    	; 0x5dee <waves+0x1ee>
    5d72:	f2 f3       	brmi	.-4      	; 0x5d70 <waves+0x170>
    5d74:	f4 f5       	brge	.+124    	; 0x5df2 <waves+0x1f2>
    5d76:	f6 f7       	brtc	.-4      	; 0x5d74 <waves+0x174>
    5d78:	f8 f9       	.word	0xf9f8	; ????
    5d7a:	fa fb       	.word	0xfbfa	; ????
    5d7c:	fc fd       	.word	0xfdfc	; ????
    5d7e:	fe ff       	.word	0xfffe	; ????
    5d80:	00 01       	movw	r0, r0
    5d82:	02 03       	mulsu	r16, r18
    5d84:	04 05       	cpc	r16, r4
    5d86:	06 07       	cpc	r16, r22
    5d88:	08 09       	sbc	r16, r8
    5d8a:	0a 0b       	sbc	r16, r26
    5d8c:	0c 0d       	add	r16, r12
    5d8e:	0e 0f       	add	r16, r30
    5d90:	10 11       	cpse	r17, r0
    5d92:	12 13       	cpse	r17, r18
    5d94:	14 15       	cp	r17, r4
    5d96:	16 17       	cp	r17, r22
    5d98:	18 19       	sub	r17, r8
    5d9a:	1a 1b       	sub	r17, r26
    5d9c:	1c 1d       	adc	r17, r12
    5d9e:	1e 1f       	adc	r17, r30
    5da0:	20 21       	and	r18, r0
    5da2:	22 23       	and	r18, r18
    5da4:	24 25       	eor	r18, r4
    5da6:	26 27       	eor	r18, r22
    5da8:	28 29       	or	r18, r8
    5daa:	2a 2b       	or	r18, r26
    5dac:	2c 2d       	mov	r18, r12
    5dae:	2e 2f       	mov	r18, r30
    5db0:	30 31       	cpi	r19, 0x10	; 16
    5db2:	32 33       	cpi	r19, 0x32	; 50
    5db4:	34 35       	cpi	r19, 0x54	; 84
    5db6:	36 37       	cpi	r19, 0x76	; 118
    5db8:	38 39       	cpi	r19, 0x98	; 152
    5dba:	3a 3b       	cpi	r19, 0xBA	; 186
    5dbc:	3c 3d       	cpi	r19, 0xDC	; 220
    5dbe:	3e 3f       	cpi	r19, 0xFE	; 254
    5dc0:	40 41       	sbci	r20, 0x10	; 16
    5dc2:	42 43       	sbci	r20, 0x32	; 50
    5dc4:	44 45       	sbci	r20, 0x54	; 84
    5dc6:	46 47       	sbci	r20, 0x76	; 118
    5dc8:	48 49       	sbci	r20, 0x98	; 152
    5dca:	4a 4b       	sbci	r20, 0xBA	; 186
    5dcc:	4c 4d       	sbci	r20, 0xDC	; 220
    5dce:	4e 4f       	sbci	r20, 0xFE	; 254
    5dd0:	50 51       	subi	r21, 0x10	; 16
    5dd2:	52 53       	subi	r21, 0x32	; 50
    5dd4:	54 55       	subi	r21, 0x54	; 84
    5dd6:	56 57       	subi	r21, 0x76	; 118
    5dd8:	58 59       	subi	r21, 0x98	; 152
    5dda:	5a 5b       	subi	r21, 0xBA	; 186
    5ddc:	5c 5d       	subi	r21, 0xDC	; 220
    5dde:	5e 5f       	subi	r21, 0xFE	; 254
    5de0:	60 61       	ori	r22, 0x10	; 16
    5de2:	62 63       	ori	r22, 0x32	; 50
    5de4:	64 65       	ori	r22, 0x54	; 84
    5de6:	66 67       	ori	r22, 0x76	; 118
    5de8:	68 69       	ori	r22, 0x98	; 152
    5dea:	6a 6b       	ori	r22, 0xBA	; 186
    5dec:	6c 6d       	ori	r22, 0xDC	; 220
    5dee:	6e 6f       	ori	r22, 0xFE	; 254
    5df0:	70 71       	andi	r23, 0x10	; 16
    5df2:	72 73       	andi	r23, 0x32	; 50
    5df4:	74 75       	andi	r23, 0x54	; 84
    5df6:	76 77       	andi	r23, 0x76	; 118
    5df8:	78 79       	andi	r23, 0x98	; 152
    5dfa:	7a 7b       	andi	r23, 0xBA	; 186
    5dfc:	7c 7d       	andi	r23, 0xDC	; 220
    5dfe:	7e 7f       	andi	r23, 0xFE	; 254
    5e00:	00 02       	muls	r16, r16
    5e02:	04 06       	cpc	r0, r20
    5e04:	08 0a       	sbc	r0, r24
    5e06:	0c 0e       	add	r0, r28
    5e08:	10 12       	cpse	r1, r16
    5e0a:	14 16       	cp	r1, r20
    5e0c:	18 1a       	sub	r1, r24
    5e0e:	1c 1e       	adc	r1, r28
    5e10:	20 22       	and	r2, r16
    5e12:	24 26       	eor	r2, r20
    5e14:	28 2a       	or	r2, r24
    5e16:	2c 2e       	mov	r2, r28
    5e18:	30 32       	cpi	r19, 0x20	; 32
    5e1a:	34 36       	cpi	r19, 0x64	; 100
    5e1c:	38 3a       	cpi	r19, 0xA8	; 168
    5e1e:	3c 3e       	cpi	r19, 0xEC	; 236
    5e20:	40 42       	sbci	r20, 0x20	; 32
    5e22:	44 46       	sbci	r20, 0x64	; 100
    5e24:	48 4a       	sbci	r20, 0xA8	; 168
    5e26:	4c 4e       	sbci	r20, 0xEC	; 236
    5e28:	50 52       	subi	r21, 0x20	; 32
    5e2a:	54 56       	subi	r21, 0x64	; 100
    5e2c:	58 5a       	subi	r21, 0xA8	; 168
    5e2e:	5c 5e       	subi	r21, 0xEC	; 236
    5e30:	60 62       	ori	r22, 0x20	; 32
    5e32:	64 66       	ori	r22, 0x64	; 100
    5e34:	68 6a       	ori	r22, 0xA8	; 168
    5e36:	6c 6e       	ori	r22, 0xEC	; 236
    5e38:	70 72       	andi	r23, 0x20	; 32
    5e3a:	74 76       	andi	r23, 0x64	; 100
    5e3c:	78 7a       	andi	r23, 0xA8	; 168
    5e3e:	7c 7e       	andi	r23, 0xEC	; 236
    5e40:	7f 7d       	andi	r23, 0xDF	; 223
    5e42:	7b 79       	andi	r23, 0x9B	; 155
    5e44:	77 75       	andi	r23, 0x57	; 87
    5e46:	73 71       	andi	r23, 0x13	; 19
    5e48:	6f 6d       	ori	r22, 0xDF	; 223
    5e4a:	6b 69       	ori	r22, 0x9B	; 155
    5e4c:	67 65       	ori	r22, 0x57	; 87
    5e4e:	63 61       	ori	r22, 0x13	; 19
    5e50:	5f 5d       	subi	r21, 0xDF	; 223
    5e52:	5b 59       	subi	r21, 0x9B	; 155
    5e54:	57 55       	subi	r21, 0x57	; 87
    5e56:	53 51       	subi	r21, 0x13	; 19
    5e58:	4f 4d       	sbci	r20, 0xDF	; 223
    5e5a:	4b 49       	sbci	r20, 0x9B	; 155
    5e5c:	47 45       	sbci	r20, 0x57	; 87
    5e5e:	43 41       	sbci	r20, 0x13	; 19
    5e60:	3f 3d       	cpi	r19, 0xDF	; 223
    5e62:	3b 39       	cpi	r19, 0x9B	; 155
    5e64:	37 35       	cpi	r19, 0x57	; 87
    5e66:	33 31       	cpi	r19, 0x13	; 19
    5e68:	2f 2d       	mov	r18, r15
    5e6a:	2b 29       	or	r18, r11
    5e6c:	27 25       	eor	r18, r7
    5e6e:	23 21       	and	r18, r3
    5e70:	1f 1d       	adc	r17, r15
    5e72:	1b 19       	sub	r17, r11
    5e74:	17 15       	cp	r17, r7
    5e76:	13 11       	cpse	r17, r3
    5e78:	0f 0d       	add	r16, r15
    5e7a:	0b 09       	sbc	r16, r11
    5e7c:	07 05       	cpc	r16, r7
    5e7e:	03 01       	movw	r0, r6
    5e80:	ff fd       	.word	0xfdff	; ????
    5e82:	fb f9       	.word	0xf9fb	; ????
    5e84:	f7 f5       	brid	.+124    	; 0x5f02 <waves+0x302>
    5e86:	f3 f1       	brvs	.+124    	; 0x5f04 <waves+0x304>
    5e88:	ef ed       	ldi	r30, 0xDF	; 223
    5e8a:	eb e9       	ldi	r30, 0x9B	; 155
    5e8c:	e7 e5       	ldi	r30, 0x57	; 87
    5e8e:	e3 e1       	ldi	r30, 0x13	; 19
    5e90:	df dd       	rcall	.-1090   	; 0x5a50 <steptable+0x48>
    5e92:	db d9       	rcall	.-3146   	; 0x524a <ReadVarLen+0x24>
    5e94:	d7 d5       	rcall	.+2990   	; 0x6a44 <FadeIn+0x4>
    5e96:	d3 d1       	rcall	.+934    	; 0x623e <waves+0x63e>
    5e98:	cf cd       	rjmp	.-1122   	; 0x5a38 <steptable+0x30>
    5e9a:	cb c9       	rjmp	.-3178   	; 0x5232 <ReadVarLen+0xc>
    5e9c:	c7 c5       	rjmp	.+2958   	; 0x6a2c <doFade+0x8>
    5e9e:	c3 c1       	rjmp	.+902    	; 0x6226 <waves+0x626>
    5ea0:	bf bd       	out	0x2f, r27	; 47
    5ea2:	bb b9       	out	0x0b, r27	; 11
    5ea4:	b7 b5       	in	r27, 0x27	; 39
    5ea6:	b3 b1       	in	r27, 0x03	; 3
    5ea8:	af ad       	ldd	r26, Y+63	; 0x3f
    5eaa:	ab a9       	ldd	r26, Y+51	; 0x33
    5eac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    5eae:	a3 a1       	ldd	r26, Z+35	; 0x23
    5eb0:	9f 9d       	mul	r25, r15
    5eb2:	9b 99       	sbic	0x13, 3	; 19
    5eb4:	97 95       	ror	r25
    5eb6:	93 91       	.word	0x9193	; ????
    5eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5eba:	8b 89       	ldd	r24, Y+19	; 0x13
    5ebc:	87 85       	ldd	r24, Z+15	; 0x0f
    5ebe:	83 81       	ldd	r24, Z+3	; 0x03
    5ec0:	80 82       	st	Z, r8
    5ec2:	84 86       	std	Z+12, r8	; 0x0c
    5ec4:	88 8a       	std	Y+16, r8	; 0x10
    5ec6:	8c 8e       	std	Y+28, r8	; 0x1c
    5ec8:	90 92 94 96 	sts	0x9694, r9
    5ecc:	98 9a       	sbi	0x13, 0	; 19
    5ece:	9c 9e       	mul	r9, r28
    5ed0:	a0 a2       	std	Z+32, r10	; 0x20
    5ed2:	a4 a6       	std	Z+44, r10	; 0x2c
    5ed4:	a8 aa       	std	Y+48, r10	; 0x30
    5ed6:	ac ae       	std	Y+60, r10	; 0x3c
    5ed8:	b0 b2       	in	r11, 0x10	; 16
    5eda:	b4 b6       	in	r11, 0x34	; 52
    5edc:	b8 ba       	out	0x18, r11	; 24
    5ede:	bc be       	out	0x3c, r11	; 60
    5ee0:	c0 c2       	rjmp	.+1408   	; 0x6462 <waves+0x862>
    5ee2:	c4 c6       	rjmp	.+3464   	; 0x6c6c <LBMoveSprite+0x6>
    5ee4:	c8 ca       	rjmp	.-2672   	; 0x5476 <TriggerNote+0x58>
    5ee6:	cc ce       	rjmp	.-616    	; 0x5c80 <waves+0x80>
    5ee8:	d0 d2       	rcall	.+1440   	; 0x648a <waves+0x88a>
    5eea:	d4 d6       	rcall	.+3496   	; 0x6c94 <LBMoveSprite+0x2e>
    5eec:	d8 da       	rcall	.-2640   	; 0x549e <ProcessMusic>
    5eee:	dc de       	rcall	.-584    	; 0x5ca8 <waves+0xa8>
    5ef0:	e0 e2       	ldi	r30, 0x20	; 32
    5ef2:	e4 e6       	ldi	r30, 0x64	; 100
    5ef4:	e8 ea       	ldi	r30, 0xA8	; 168
    5ef6:	ec ee       	ldi	r30, 0xEC	; 236
    5ef8:	f0 f2       	brcs	.-68     	; 0x5eb6 <waves+0x2b6>
    5efa:	f4 f6       	brge	.-68     	; 0x5eb8 <waves+0x2b8>
    5efc:	f8 fa       	.word	0xfaf8	; ????
    5efe:	fc fe       	.word	0xfefc	; ????
    5f00:	7f 7f       	andi	r23, 0xFF	; 255
    5f02:	7f 7f       	andi	r23, 0xFF	; 255
    5f04:	7f 7f       	andi	r23, 0xFF	; 255
    5f06:	7f 7f       	andi	r23, 0xFF	; 255
    5f08:	7f 7f       	andi	r23, 0xFF	; 255
    5f0a:	7f 7f       	andi	r23, 0xFF	; 255
    5f0c:	7f 7f       	andi	r23, 0xFF	; 255
    5f0e:	7f 7f       	andi	r23, 0xFF	; 255
    5f10:	7f 7f       	andi	r23, 0xFF	; 255
    5f12:	7f 7f       	andi	r23, 0xFF	; 255
    5f14:	7f 7f       	andi	r23, 0xFF	; 255
    5f16:	7f 7f       	andi	r23, 0xFF	; 255
    5f18:	7f 7f       	andi	r23, 0xFF	; 255
    5f1a:	7f 7f       	andi	r23, 0xFF	; 255
    5f1c:	7f 7f       	andi	r23, 0xFF	; 255
    5f1e:	7f 7f       	andi	r23, 0xFF	; 255
    5f20:	7f 7f       	andi	r23, 0xFF	; 255
    5f22:	7f 7f       	andi	r23, 0xFF	; 255
    5f24:	7f 7f       	andi	r23, 0xFF	; 255
    5f26:	7f 7f       	andi	r23, 0xFF	; 255
    5f28:	7f 7f       	andi	r23, 0xFF	; 255
    5f2a:	7f 7f       	andi	r23, 0xFF	; 255
    5f2c:	7f 7f       	andi	r23, 0xFF	; 255
    5f2e:	7f 7f       	andi	r23, 0xFF	; 255
    5f30:	7f 7f       	andi	r23, 0xFF	; 255
    5f32:	7f 7f       	andi	r23, 0xFF	; 255
    5f34:	7f 7f       	andi	r23, 0xFF	; 255
    5f36:	7f 7f       	andi	r23, 0xFF	; 255
    5f38:	7f 7f       	andi	r23, 0xFF	; 255
    5f3a:	7f 7f       	andi	r23, 0xFF	; 255
    5f3c:	7f 7f       	andi	r23, 0xFF	; 255
    5f3e:	7f 7f       	andi	r23, 0xFF	; 255
    5f40:	80 80       	ld	r8, Z
    5f42:	80 80       	ld	r8, Z
    5f44:	80 80       	ld	r8, Z
    5f46:	80 80       	ld	r8, Z
    5f48:	80 80       	ld	r8, Z
    5f4a:	80 80       	ld	r8, Z
    5f4c:	80 80       	ld	r8, Z
    5f4e:	80 80       	ld	r8, Z
    5f50:	80 80       	ld	r8, Z
    5f52:	80 80       	ld	r8, Z
    5f54:	80 80       	ld	r8, Z
    5f56:	80 80       	ld	r8, Z
    5f58:	80 80       	ld	r8, Z
    5f5a:	80 80       	ld	r8, Z
    5f5c:	80 80       	ld	r8, Z
    5f5e:	80 80       	ld	r8, Z
    5f60:	80 80       	ld	r8, Z
    5f62:	80 80       	ld	r8, Z
    5f64:	80 80       	ld	r8, Z
    5f66:	80 80       	ld	r8, Z
    5f68:	80 80       	ld	r8, Z
    5f6a:	80 80       	ld	r8, Z
    5f6c:	80 80       	ld	r8, Z
    5f6e:	80 80       	ld	r8, Z
    5f70:	80 80       	ld	r8, Z
    5f72:	80 80       	ld	r8, Z
    5f74:	80 80       	ld	r8, Z
    5f76:	80 80       	ld	r8, Z
    5f78:	80 80       	ld	r8, Z
    5f7a:	80 80       	ld	r8, Z
    5f7c:	80 80       	ld	r8, Z
    5f7e:	80 80       	ld	r8, Z
    5f80:	80 80       	ld	r8, Z
    5f82:	80 80       	ld	r8, Z
    5f84:	80 80       	ld	r8, Z
    5f86:	80 80       	ld	r8, Z
    5f88:	80 80       	ld	r8, Z
    5f8a:	80 80       	ld	r8, Z
    5f8c:	80 80       	ld	r8, Z
    5f8e:	80 80       	ld	r8, Z
    5f90:	80 80       	ld	r8, Z
    5f92:	80 80       	ld	r8, Z
    5f94:	80 80       	ld	r8, Z
    5f96:	80 80       	ld	r8, Z
    5f98:	80 80       	ld	r8, Z
    5f9a:	80 80       	ld	r8, Z
    5f9c:	80 80       	ld	r8, Z
    5f9e:	80 80       	ld	r8, Z
    5fa0:	80 80       	ld	r8, Z
    5fa2:	80 80       	ld	r8, Z
    5fa4:	80 80       	ld	r8, Z
    5fa6:	80 80       	ld	r8, Z
    5fa8:	80 80       	ld	r8, Z
    5faa:	80 80       	ld	r8, Z
    5fac:	80 80       	ld	r8, Z
    5fae:	80 80       	ld	r8, Z
    5fb0:	80 80       	ld	r8, Z
    5fb2:	80 80       	ld	r8, Z
    5fb4:	80 80       	ld	r8, Z
    5fb6:	80 80       	ld	r8, Z
    5fb8:	80 80       	ld	r8, Z
    5fba:	80 80       	ld	r8, Z
    5fbc:	80 80       	ld	r8, Z
    5fbe:	80 80       	ld	r8, Z
    5fc0:	80 80       	ld	r8, Z
    5fc2:	80 80       	ld	r8, Z
    5fc4:	80 80       	ld	r8, Z
    5fc6:	80 80       	ld	r8, Z
    5fc8:	80 80       	ld	r8, Z
    5fca:	80 80       	ld	r8, Z
    5fcc:	80 80       	ld	r8, Z
    5fce:	80 80       	ld	r8, Z
    5fd0:	80 80       	ld	r8, Z
    5fd2:	80 80       	ld	r8, Z
    5fd4:	80 80       	ld	r8, Z
    5fd6:	80 80       	ld	r8, Z
    5fd8:	80 80       	ld	r8, Z
    5fda:	80 80       	ld	r8, Z
    5fdc:	80 80       	ld	r8, Z
    5fde:	80 80       	ld	r8, Z
    5fe0:	80 80       	ld	r8, Z
    5fe2:	80 80       	ld	r8, Z
    5fe4:	80 80       	ld	r8, Z
    5fe6:	80 80       	ld	r8, Z
    5fe8:	80 80       	ld	r8, Z
    5fea:	80 80       	ld	r8, Z
    5fec:	80 80       	ld	r8, Z
    5fee:	80 80       	ld	r8, Z
    5ff0:	80 80       	ld	r8, Z
    5ff2:	80 80       	ld	r8, Z
    5ff4:	80 80       	ld	r8, Z
    5ff6:	80 80       	ld	r8, Z
    5ff8:	80 80       	ld	r8, Z
    5ffa:	80 80       	ld	r8, Z
    5ffc:	80 80       	ld	r8, Z
    5ffe:	80 80       	ld	r8, Z
    6000:	7f 7f       	andi	r23, 0xFF	; 255
    6002:	7f 7f       	andi	r23, 0xFF	; 255
    6004:	7f 7f       	andi	r23, 0xFF	; 255
    6006:	7f 7f       	andi	r23, 0xFF	; 255
    6008:	7f 7f       	andi	r23, 0xFF	; 255
    600a:	7f 7f       	andi	r23, 0xFF	; 255
    600c:	7f 7f       	andi	r23, 0xFF	; 255
    600e:	7f 7f       	andi	r23, 0xFF	; 255
    6010:	7f 7f       	andi	r23, 0xFF	; 255
    6012:	7f 7f       	andi	r23, 0xFF	; 255
    6014:	7f 7f       	andi	r23, 0xFF	; 255
    6016:	7f 7f       	andi	r23, 0xFF	; 255
    6018:	7f 7f       	andi	r23, 0xFF	; 255
    601a:	7f 7f       	andi	r23, 0xFF	; 255
    601c:	7f 7f       	andi	r23, 0xFF	; 255
    601e:	7f 7f       	andi	r23, 0xFF	; 255
    6020:	7f 7f       	andi	r23, 0xFF	; 255
    6022:	7f 7f       	andi	r23, 0xFF	; 255
    6024:	7f 7f       	andi	r23, 0xFF	; 255
    6026:	7f 7f       	andi	r23, 0xFF	; 255
    6028:	7f 7f       	andi	r23, 0xFF	; 255
    602a:	7f 7f       	andi	r23, 0xFF	; 255
    602c:	7f 7f       	andi	r23, 0xFF	; 255
    602e:	7f 7f       	andi	r23, 0xFF	; 255
    6030:	7f 7f       	andi	r23, 0xFF	; 255
    6032:	7f 7f       	andi	r23, 0xFF	; 255
    6034:	7f 7f       	andi	r23, 0xFF	; 255
    6036:	7f 7f       	andi	r23, 0xFF	; 255
    6038:	7f 7f       	andi	r23, 0xFF	; 255
    603a:	7f 7f       	andi	r23, 0xFF	; 255
    603c:	7f 7f       	andi	r23, 0xFF	; 255
    603e:	7f 7f       	andi	r23, 0xFF	; 255
    6040:	7f 7f       	andi	r23, 0xFF	; 255
    6042:	7f 7f       	andi	r23, 0xFF	; 255
    6044:	7f 7f       	andi	r23, 0xFF	; 255
    6046:	7f 7f       	andi	r23, 0xFF	; 255
    6048:	7f 7f       	andi	r23, 0xFF	; 255
    604a:	7f 7f       	andi	r23, 0xFF	; 255
    604c:	7f 7f       	andi	r23, 0xFF	; 255
    604e:	7f 7f       	andi	r23, 0xFF	; 255
    6050:	7f 7f       	andi	r23, 0xFF	; 255
    6052:	7f 7f       	andi	r23, 0xFF	; 255
    6054:	7f 7f       	andi	r23, 0xFF	; 255
    6056:	7f 7f       	andi	r23, 0xFF	; 255
    6058:	7f 7f       	andi	r23, 0xFF	; 255
    605a:	7f 7f       	andi	r23, 0xFF	; 255
    605c:	7f 7f       	andi	r23, 0xFF	; 255
    605e:	7f 7f       	andi	r23, 0xFF	; 255
    6060:	7f 7f       	andi	r23, 0xFF	; 255
    6062:	7f 7f       	andi	r23, 0xFF	; 255
    6064:	7f 7f       	andi	r23, 0xFF	; 255
    6066:	7f 7f       	andi	r23, 0xFF	; 255
    6068:	7f 7f       	andi	r23, 0xFF	; 255
    606a:	7f 7f       	andi	r23, 0xFF	; 255
    606c:	7f 7f       	andi	r23, 0xFF	; 255
    606e:	7f 7f       	andi	r23, 0xFF	; 255
    6070:	7f 7f       	andi	r23, 0xFF	; 255
    6072:	7f 7f       	andi	r23, 0xFF	; 255
    6074:	7f 7f       	andi	r23, 0xFF	; 255
    6076:	7f 7f       	andi	r23, 0xFF	; 255
    6078:	7f 7f       	andi	r23, 0xFF	; 255
    607a:	7f 7f       	andi	r23, 0xFF	; 255
    607c:	7f 7f       	andi	r23, 0xFF	; 255
    607e:	7f 7f       	andi	r23, 0xFF	; 255
    6080:	80 80       	ld	r8, Z
    6082:	80 80       	ld	r8, Z
    6084:	80 80       	ld	r8, Z
    6086:	80 80       	ld	r8, Z
    6088:	80 80       	ld	r8, Z
    608a:	80 80       	ld	r8, Z
    608c:	80 80       	ld	r8, Z
    608e:	80 80       	ld	r8, Z
    6090:	80 80       	ld	r8, Z
    6092:	80 80       	ld	r8, Z
    6094:	80 80       	ld	r8, Z
    6096:	80 80       	ld	r8, Z
    6098:	80 80       	ld	r8, Z
    609a:	80 80       	ld	r8, Z
    609c:	80 80       	ld	r8, Z
    609e:	80 80       	ld	r8, Z
    60a0:	80 80       	ld	r8, Z
    60a2:	80 80       	ld	r8, Z
    60a4:	80 80       	ld	r8, Z
    60a6:	80 80       	ld	r8, Z
    60a8:	80 80       	ld	r8, Z
    60aa:	80 80       	ld	r8, Z
    60ac:	80 80       	ld	r8, Z
    60ae:	80 80       	ld	r8, Z
    60b0:	80 80       	ld	r8, Z
    60b2:	80 80       	ld	r8, Z
    60b4:	80 80       	ld	r8, Z
    60b6:	80 80       	ld	r8, Z
    60b8:	80 80       	ld	r8, Z
    60ba:	80 80       	ld	r8, Z
    60bc:	80 80       	ld	r8, Z
    60be:	80 80       	ld	r8, Z
    60c0:	80 80       	ld	r8, Z
    60c2:	80 80       	ld	r8, Z
    60c4:	80 80       	ld	r8, Z
    60c6:	80 80       	ld	r8, Z
    60c8:	80 80       	ld	r8, Z
    60ca:	80 80       	ld	r8, Z
    60cc:	80 80       	ld	r8, Z
    60ce:	80 80       	ld	r8, Z
    60d0:	80 80       	ld	r8, Z
    60d2:	80 80       	ld	r8, Z
    60d4:	80 80       	ld	r8, Z
    60d6:	80 80       	ld	r8, Z
    60d8:	80 80       	ld	r8, Z
    60da:	80 80       	ld	r8, Z
    60dc:	80 80       	ld	r8, Z
    60de:	80 80       	ld	r8, Z
    60e0:	80 80       	ld	r8, Z
    60e2:	80 80       	ld	r8, Z
    60e4:	80 80       	ld	r8, Z
    60e6:	80 80       	ld	r8, Z
    60e8:	80 80       	ld	r8, Z
    60ea:	80 80       	ld	r8, Z
    60ec:	80 80       	ld	r8, Z
    60ee:	80 80       	ld	r8, Z
    60f0:	80 80       	ld	r8, Z
    60f2:	80 80       	ld	r8, Z
    60f4:	80 80       	ld	r8, Z
    60f6:	80 80       	ld	r8, Z
    60f8:	80 80       	ld	r8, Z
    60fa:	80 80       	ld	r8, Z
    60fc:	80 80       	ld	r8, Z
    60fe:	80 80       	ld	r8, Z
    6100:	7f 7f       	andi	r23, 0xFF	; 255
    6102:	7f 7f       	andi	r23, 0xFF	; 255
    6104:	7f 7f       	andi	r23, 0xFF	; 255
    6106:	7f 7f       	andi	r23, 0xFF	; 255
    6108:	7f 7f       	andi	r23, 0xFF	; 255
    610a:	7f 7f       	andi	r23, 0xFF	; 255
    610c:	7f 7f       	andi	r23, 0xFF	; 255
    610e:	7f 7f       	andi	r23, 0xFF	; 255
    6110:	7f 7f       	andi	r23, 0xFF	; 255
    6112:	7f 7f       	andi	r23, 0xFF	; 255
    6114:	7f 7f       	andi	r23, 0xFF	; 255
    6116:	7f 7f       	andi	r23, 0xFF	; 255
    6118:	7f 7f       	andi	r23, 0xFF	; 255
    611a:	7f 7f       	andi	r23, 0xFF	; 255
    611c:	7f 7f       	andi	r23, 0xFF	; 255
    611e:	7f 7f       	andi	r23, 0xFF	; 255
    6120:	7f 7f       	andi	r23, 0xFF	; 255
    6122:	7f 7f       	andi	r23, 0xFF	; 255
    6124:	7f 7f       	andi	r23, 0xFF	; 255
    6126:	7f 7f       	andi	r23, 0xFF	; 255
    6128:	7f 7f       	andi	r23, 0xFF	; 255
    612a:	7f 7f       	andi	r23, 0xFF	; 255
    612c:	7f 7f       	andi	r23, 0xFF	; 255
    612e:	7f 7f       	andi	r23, 0xFF	; 255
    6130:	7f 7f       	andi	r23, 0xFF	; 255
    6132:	7f 7f       	andi	r23, 0xFF	; 255
    6134:	7f 7f       	andi	r23, 0xFF	; 255
    6136:	7f 7f       	andi	r23, 0xFF	; 255
    6138:	7f 7f       	andi	r23, 0xFF	; 255
    613a:	7f 7f       	andi	r23, 0xFF	; 255
    613c:	7f 7f       	andi	r23, 0xFF	; 255
    613e:	7f 7f       	andi	r23, 0xFF	; 255
    6140:	7f 7f       	andi	r23, 0xFF	; 255
    6142:	7f 7f       	andi	r23, 0xFF	; 255
    6144:	7f 7f       	andi	r23, 0xFF	; 255
    6146:	7f 7f       	andi	r23, 0xFF	; 255
    6148:	7f 7f       	andi	r23, 0xFF	; 255
    614a:	7f 7f       	andi	r23, 0xFF	; 255
    614c:	7f 7f       	andi	r23, 0xFF	; 255
    614e:	7f 7f       	andi	r23, 0xFF	; 255
    6150:	7f 7f       	andi	r23, 0xFF	; 255
    6152:	7f 7f       	andi	r23, 0xFF	; 255
    6154:	7f 7f       	andi	r23, 0xFF	; 255
    6156:	7f 7f       	andi	r23, 0xFF	; 255
    6158:	7f 7f       	andi	r23, 0xFF	; 255
    615a:	7f 7f       	andi	r23, 0xFF	; 255
    615c:	7f 7f       	andi	r23, 0xFF	; 255
    615e:	7f 7f       	andi	r23, 0xFF	; 255
    6160:	7f 7f       	andi	r23, 0xFF	; 255
    6162:	7f 7f       	andi	r23, 0xFF	; 255
    6164:	7f 7f       	andi	r23, 0xFF	; 255
    6166:	7f 7f       	andi	r23, 0xFF	; 255
    6168:	7f 7f       	andi	r23, 0xFF	; 255
    616a:	7f 7f       	andi	r23, 0xFF	; 255
    616c:	7f 7f       	andi	r23, 0xFF	; 255
    616e:	7f 7f       	andi	r23, 0xFF	; 255
    6170:	7f 7f       	andi	r23, 0xFF	; 255
    6172:	7f 7f       	andi	r23, 0xFF	; 255
    6174:	7f 7f       	andi	r23, 0xFF	; 255
    6176:	7f 7f       	andi	r23, 0xFF	; 255
    6178:	7f 7f       	andi	r23, 0xFF	; 255
    617a:	7f 7f       	andi	r23, 0xFF	; 255
    617c:	7f 7f       	andi	r23, 0xFF	; 255
    617e:	7f 7f       	andi	r23, 0xFF	; 255
    6180:	7f 7f       	andi	r23, 0xFF	; 255
    6182:	7f 7f       	andi	r23, 0xFF	; 255
    6184:	7f 7f       	andi	r23, 0xFF	; 255
    6186:	7f 7f       	andi	r23, 0xFF	; 255
    6188:	7f 7f       	andi	r23, 0xFF	; 255
    618a:	7f 7f       	andi	r23, 0xFF	; 255
    618c:	7f 7f       	andi	r23, 0xFF	; 255
    618e:	7f 7f       	andi	r23, 0xFF	; 255
    6190:	7f 7f       	andi	r23, 0xFF	; 255
    6192:	7f 7f       	andi	r23, 0xFF	; 255
    6194:	7f 7f       	andi	r23, 0xFF	; 255
    6196:	7f 7f       	andi	r23, 0xFF	; 255
    6198:	7f 7f       	andi	r23, 0xFF	; 255
    619a:	7f 7f       	andi	r23, 0xFF	; 255
    619c:	7f 7f       	andi	r23, 0xFF	; 255
    619e:	7f 7f       	andi	r23, 0xFF	; 255
    61a0:	7f 7f       	andi	r23, 0xFF	; 255
    61a2:	7f 7f       	andi	r23, 0xFF	; 255
    61a4:	7f 7f       	andi	r23, 0xFF	; 255
    61a6:	7f 7f       	andi	r23, 0xFF	; 255
    61a8:	7f 7f       	andi	r23, 0xFF	; 255
    61aa:	7f 7f       	andi	r23, 0xFF	; 255
    61ac:	7f 7f       	andi	r23, 0xFF	; 255
    61ae:	7f 7f       	andi	r23, 0xFF	; 255
    61b0:	7f 7f       	andi	r23, 0xFF	; 255
    61b2:	7f 7f       	andi	r23, 0xFF	; 255
    61b4:	7f 7f       	andi	r23, 0xFF	; 255
    61b6:	7f 7f       	andi	r23, 0xFF	; 255
    61b8:	7f 7f       	andi	r23, 0xFF	; 255
    61ba:	7f 7f       	andi	r23, 0xFF	; 255
    61bc:	7f 7f       	andi	r23, 0xFF	; 255
    61be:	7f 7f       	andi	r23, 0xFF	; 255
    61c0:	80 80       	ld	r8, Z
    61c2:	80 80       	ld	r8, Z
    61c4:	80 80       	ld	r8, Z
    61c6:	80 80       	ld	r8, Z
    61c8:	80 80       	ld	r8, Z
    61ca:	80 80       	ld	r8, Z
    61cc:	80 80       	ld	r8, Z
    61ce:	80 80       	ld	r8, Z
    61d0:	80 80       	ld	r8, Z
    61d2:	80 80       	ld	r8, Z
    61d4:	80 80       	ld	r8, Z
    61d6:	80 80       	ld	r8, Z
    61d8:	80 80       	ld	r8, Z
    61da:	80 80       	ld	r8, Z
    61dc:	80 80       	ld	r8, Z
    61de:	80 80       	ld	r8, Z
    61e0:	80 80       	ld	r8, Z
    61e2:	80 80       	ld	r8, Z
    61e4:	80 80       	ld	r8, Z
    61e6:	80 80       	ld	r8, Z
    61e8:	80 80       	ld	r8, Z
    61ea:	80 80       	ld	r8, Z
    61ec:	80 80       	ld	r8, Z
    61ee:	80 80       	ld	r8, Z
    61f0:	80 80       	ld	r8, Z
    61f2:	80 80       	ld	r8, Z
    61f4:	80 80       	ld	r8, Z
    61f6:	80 80       	ld	r8, Z
    61f8:	80 80       	ld	r8, Z
    61fa:	80 80       	ld	r8, Z
    61fc:	80 80       	ld	r8, Z
    61fe:	80 80       	ld	r8, Z
    6200:	03 09       	sbc	r16, r3
    6202:	13 1e       	adc	r1, r19
    6204:	28 31       	cpi	r18, 0x18	; 24
    6206:	3a 40       	sbci	r19, 0x0A	; 10
    6208:	46 4c       	sbci	r20, 0xC6	; 198
    620a:	50 54       	subi	r21, 0x40	; 64
    620c:	58 5b       	subi	r21, 0xB8	; 184
    620e:	5e 61       	ori	r21, 0x1E	; 30
    6210:	63 65       	ori	r22, 0x53	; 83
    6212:	67 69       	ori	r22, 0x97	; 151
    6214:	6b 6c       	ori	r22, 0xCB	; 203
    6216:	6e 6f       	ori	r22, 0xFE	; 254
    6218:	70 71       	andi	r23, 0x10	; 16
    621a:	72 73       	andi	r23, 0x32	; 50
    621c:	74 75       	andi	r23, 0x54	; 84
    621e:	76 77       	andi	r23, 0x76	; 118
    6220:	77 78       	andi	r23, 0x87	; 135
    6222:	79 79       	andi	r23, 0x99	; 153
    6224:	7a 7a       	andi	r23, 0xAA	; 170
    6226:	7b 7b       	andi	r23, 0xBB	; 187
    6228:	7c 7c       	andi	r23, 0xCC	; 204
    622a:	7c 7d       	andi	r23, 0xDC	; 220
    622c:	7d 7d       	andi	r23, 0xDD	; 221
    622e:	7e 7e       	andi	r23, 0xEE	; 238
    6230:	7e 7e       	andi	r23, 0xEE	; 238
    6232:	7f 7f       	andi	r23, 0xFF	; 255
    6234:	7f 7f       	andi	r23, 0xFF	; 255
    6236:	7f 7f       	andi	r23, 0xFF	; 255
    6238:	7f 7f       	andi	r23, 0xFF	; 255
    623a:	7f 7f       	andi	r23, 0xFF	; 255
    623c:	7f 7f       	andi	r23, 0xFF	; 255
    623e:	7f 7f       	andi	r23, 0xFF	; 255
    6240:	7f 7f       	andi	r23, 0xFF	; 255
    6242:	7f 7f       	andi	r23, 0xFF	; 255
    6244:	7f 7f       	andi	r23, 0xFF	; 255
    6246:	7f 7f       	andi	r23, 0xFF	; 255
    6248:	7f 7f       	andi	r23, 0xFF	; 255
    624a:	7f 7f       	andi	r23, 0xFF	; 255
    624c:	7f 7e       	andi	r23, 0xEF	; 239
    624e:	7e 7e       	andi	r23, 0xEE	; 238
    6250:	7e 7d       	andi	r23, 0xDE	; 222
    6252:	7d 7d       	andi	r23, 0xDD	; 221
    6254:	7c 7c       	andi	r23, 0xCC	; 204
    6256:	7c 7b       	andi	r23, 0xBC	; 188
    6258:	7b 7a       	andi	r23, 0xAB	; 171
    625a:	7a 79       	andi	r23, 0x9A	; 154
    625c:	79 78       	andi	r23, 0x89	; 137
    625e:	77 77       	andi	r23, 0x77	; 119
    6260:	76 75       	andi	r23, 0x56	; 86
    6262:	74 73       	andi	r23, 0x34	; 52
    6264:	72 71       	andi	r23, 0x12	; 18
    6266:	70 6f       	ori	r23, 0xF0	; 240
    6268:	6e 6c       	ori	r22, 0xCE	; 206
    626a:	6b 69       	ori	r22, 0x9B	; 155
    626c:	67 65       	ori	r22, 0x57	; 87
    626e:	63 61       	ori	r22, 0x13	; 19
    6270:	5e 5b       	subi	r21, 0xBE	; 190
    6272:	58 54       	subi	r21, 0x48	; 72
    6274:	50 4c       	sbci	r21, 0xC0	; 192
    6276:	46 40       	sbci	r20, 0x06	; 6
    6278:	3a 31       	cpi	r19, 0x1A	; 26
    627a:	28 1e       	adc	r2, r24
    627c:	13 09       	sbc	r17, r3
    627e:	03 00       	.word	0x0003	; ????
    6280:	c6 cc       	rjmp	.-1652   	; 0x5c0e <waves+0xe>
    6282:	d5 db       	rcall	.-2134   	; 0x5a2e <steptable+0x26>
    6284:	df e3       	ldi	r29, 0x3F	; 63
    6286:	e5 e7       	ldi	r30, 0x75	; 117
    6288:	e9 ea       	ldi	r30, 0xA9	; 169
    628a:	eb ec       	ldi	r30, 0xCB	; 203
    628c:	ed ee       	ldi	r30, 0xED	; 237
    628e:	ef ef       	ldi	r30, 0xFF	; 255
    6290:	f0 f0       	brcs	.+60     	; 0x62ce <waves+0x6ce>
    6292:	f0 f1       	brcs	.+124    	; 0x6310 <waves+0x710>
    6294:	f1 f1       	breq	.+124    	; 0x6312 <waves+0x712>
    6296:	f1 f2       	breq	.-68     	; 0x6254 <waves+0x654>
    6298:	f2 f2       	brmi	.-68     	; 0x6256 <waves+0x656>
    629a:	f2 f2       	brmi	.-68     	; 0x6258 <waves+0x658>
    629c:	f2 f2       	brmi	.-68     	; 0x625a <waves+0x65a>
    629e:	f2 f3       	brmi	.-4      	; 0x629c <waves+0x69c>
    62a0:	f3 f3       	brvs	.-4      	; 0x629e <waves+0x69e>
    62a2:	f3 f3       	brvs	.-4      	; 0x62a0 <waves+0x6a0>
    62a4:	f3 f3       	brvs	.-4      	; 0x62a2 <waves+0x6a2>
    62a6:	f3 f3       	brvs	.-4      	; 0x62a4 <waves+0x6a4>
    62a8:	f3 f3       	brvs	.-4      	; 0x62a6 <waves+0x6a6>
    62aa:	f3 f3       	brvs	.-4      	; 0x62a8 <waves+0x6a8>
    62ac:	f3 f3       	brvs	.-4      	; 0x62aa <waves+0x6aa>
    62ae:	f3 f3       	brvs	.-4      	; 0x62ac <waves+0x6ac>
    62b0:	f3 f3       	brvs	.-4      	; 0x62ae <waves+0x6ae>
    62b2:	f3 f3       	brvs	.-4      	; 0x62b0 <waves+0x6b0>
    62b4:	f3 f3       	brvs	.-4      	; 0x62b2 <waves+0x6b2>
    62b6:	f3 f3       	brvs	.-4      	; 0x62b4 <waves+0x6b4>
    62b8:	f3 f3       	brvs	.-4      	; 0x62b6 <waves+0x6b6>
    62ba:	f3 f3       	brvs	.-4      	; 0x62b8 <waves+0x6b8>
    62bc:	f3 f3       	brvs	.-4      	; 0x62ba <waves+0x6ba>
    62be:	f3 f3       	brvs	.-4      	; 0x62bc <waves+0x6bc>
    62c0:	f3 f3       	brvs	.-4      	; 0x62be <waves+0x6be>
    62c2:	f3 f3       	brvs	.-4      	; 0x62c0 <waves+0x6c0>
    62c4:	f3 f3       	brvs	.-4      	; 0x62c2 <waves+0x6c2>
    62c6:	f3 f3       	brvs	.-4      	; 0x62c4 <waves+0x6c4>
    62c8:	f3 f3       	brvs	.-4      	; 0x62c6 <waves+0x6c6>
    62ca:	f3 f3       	brvs	.-4      	; 0x62c8 <waves+0x6c8>
    62cc:	f3 f3       	brvs	.-4      	; 0x62ca <waves+0x6ca>
    62ce:	f3 f3       	brvs	.-4      	; 0x62cc <waves+0x6cc>
    62d0:	f3 f3       	brvs	.-4      	; 0x62ce <waves+0x6ce>
    62d2:	f3 f3       	brvs	.-4      	; 0x62d0 <waves+0x6d0>
    62d4:	f3 f3       	brvs	.-4      	; 0x62d2 <waves+0x6d2>
    62d6:	f3 f3       	brvs	.-4      	; 0x62d4 <waves+0x6d4>
    62d8:	f3 f3       	brvs	.-4      	; 0x62d6 <waves+0x6d6>
    62da:	f3 f3       	brvs	.-4      	; 0x62d8 <waves+0x6d8>
    62dc:	f3 f3       	brvs	.-4      	; 0x62da <waves+0x6da>
    62de:	f3 f3       	brvs	.-4      	; 0x62dc <waves+0x6dc>
    62e0:	f2 f2       	brmi	.-68     	; 0x629e <waves+0x69e>
    62e2:	f2 f2       	brmi	.-68     	; 0x62a0 <waves+0x6a0>
    62e4:	f2 f2       	brmi	.-68     	; 0x62a2 <waves+0x6a2>
    62e6:	f2 f2       	brmi	.-68     	; 0x62a4 <waves+0x6a4>
    62e8:	f1 f1       	breq	.+124    	; 0x6366 <waves+0x766>
    62ea:	f1 f1       	breq	.+124    	; 0x6368 <waves+0x768>
    62ec:	f0 f0       	brcs	.+60     	; 0x632a <waves+0x72a>
    62ee:	f0 ef       	ldi	r31, 0xF0	; 240
    62f0:	ef ee       	ldi	r30, 0xEF	; 239
    62f2:	ed ec       	ldi	r30, 0xCD	; 205
    62f4:	eb ea       	ldi	r30, 0xAB	; 171
    62f6:	e9 e7       	ldi	r30, 0x79	; 121
    62f8:	e5 e3       	ldi	r30, 0x35	; 53
    62fa:	df db       	rcall	.-2114   	; 0x5aba <steptable+0xb2>
    62fc:	d5 cc       	rjmp	.-1622   	; 0x5ca8 <waves+0xa8>
    62fe:	c6 00       	.word	0x00c6	; ????
    6300:	00 28       	or	r0, r0
    6302:	3d 42       	sbci	r19, 0x2D	; 45
    6304:	30 2d       	mov	r19, r0
    6306:	2c 2b       	or	r18, r28
    6308:	2c 2d       	mov	r18, r12
    630a:	2e 2f       	mov	r18, r30
    630c:	30 32       	cpi	r19, 0x20	; 32
    630e:	33 35       	cpi	r19, 0x53	; 83
    6310:	37 39       	cpi	r19, 0x97	; 151
    6312:	3b 3d       	cpi	r19, 0xDB	; 219
    6314:	3f 41       	sbci	r19, 0x1F	; 31
    6316:	43 45       	sbci	r20, 0x53	; 83
    6318:	48 4a       	sbci	r20, 0xA8	; 168
    631a:	4c 4e       	sbci	r20, 0xEC	; 236
    631c:	50 53       	subi	r21, 0x30	; 48
    631e:	55 57       	subi	r21, 0x75	; 117
    6320:	59 5b       	subi	r21, 0xB9	; 185
    6322:	5d 5f       	subi	r21, 0xFD	; 253
    6324:	61 63       	ori	r22, 0x31	; 49
    6326:	65 67       	ori	r22, 0x75	; 117
    6328:	69 6b       	ori	r22, 0xB9	; 185
    632a:	6c 6e       	ori	r22, 0xEC	; 236
    632c:	70 71       	andi	r23, 0x10	; 16
    632e:	73 74       	andi	r23, 0x43	; 67
    6330:	75 77       	andi	r23, 0x75	; 117
    6332:	78 79       	andi	r23, 0x98	; 152
    6334:	7a 7b       	andi	r23, 0xBA	; 186
    6336:	7c 7d       	andi	r23, 0xDC	; 220
    6338:	7d 7e       	andi	r23, 0xED	; 237
    633a:	7e 7f       	andi	r23, 0xFE	; 254
    633c:	7f 7f       	andi	r23, 0xFF	; 255
    633e:	7f 7f       	andi	r23, 0xFF	; 255
    6340:	7f 7f       	andi	r23, 0xFF	; 255
    6342:	7f 7f       	andi	r23, 0xFF	; 255
    6344:	7f 7f       	andi	r23, 0xFF	; 255
    6346:	7e 7e       	andi	r23, 0xEE	; 238
    6348:	7d 7d       	andi	r23, 0xDD	; 221
    634a:	7c 7b       	andi	r23, 0xBC	; 188
    634c:	7a 79       	andi	r23, 0x9A	; 154
    634e:	78 77       	andi	r23, 0x78	; 120
    6350:	75 74       	andi	r23, 0x45	; 69
    6352:	73 71       	andi	r23, 0x13	; 19
    6354:	70 6e       	ori	r23, 0xE0	; 224
    6356:	6c 6b       	ori	r22, 0xBC	; 188
    6358:	69 67       	ori	r22, 0x79	; 121
    635a:	65 63       	ori	r22, 0x35	; 53
    635c:	61 5f       	subi	r22, 0xF1	; 241
    635e:	5d 5b       	subi	r21, 0xBD	; 189
    6360:	59 57       	subi	r21, 0x79	; 121
    6362:	55 53       	subi	r21, 0x35	; 53
    6364:	50 4e       	sbci	r21, 0xE0	; 224
    6366:	4c 4a       	sbci	r20, 0xAC	; 172
    6368:	48 45       	sbci	r20, 0x58	; 88
    636a:	43 41       	sbci	r20, 0x13	; 19
    636c:	3f 3d       	cpi	r19, 0xDF	; 223
    636e:	3b 39       	cpi	r19, 0x9B	; 155
    6370:	37 35       	cpi	r19, 0x57	; 87
    6372:	33 32       	cpi	r19, 0x23	; 35
    6374:	30 2f       	mov	r19, r16
    6376:	2e 2d       	mov	r18, r14
    6378:	2c 2b       	or	r18, r28
    637a:	2c 2d       	mov	r18, r12
    637c:	30 42       	sbci	r19, 0x20	; 32
    637e:	3d 28       	or	r3, r13
    6380:	00 e9       	ldi	r16, 0x90	; 144
    6382:	e5 fe       	sbrs	r14, 5
    6384:	d4 d7       	rcall	.+4008   	; 0x732e <on_solid_ground+0x48>
    6386:	d7 d7       	rcall	.+4014   	; 0x7336 <on_solid_ground+0x50>
    6388:	d6 d4       	rcall	.+2476   	; 0x6d36 <LBRotateSprites+0x54>
    638a:	d2 d0       	rcall	.+420    	; 0x6530 <waves+0x930>
    638c:	ce cc       	rjmp	.-1636   	; 0x5d2a <waves+0x12a>
    638e:	ca c8       	rjmp	.-3692   	; 0x5524 <ProcessMusic+0x86>
    6390:	c6 c3       	rjmp	.+1932   	; 0x6b1e <LBGetJoyPadState+0x10>
    6392:	c1 bf       	out	0x31, r28	; 49
    6394:	bd ba       	out	0x1d, r11	; 29
    6396:	b8 b6       	in	r11, 0x38	; 56
    6398:	b4 b1       	in	r27, 0x04	; 4
    639a:	af ad       	ldd	r26, Y+63	; 0x3f
    639c:	ab a9       	ldd	r26, Y+51	; 0x33
    639e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    63a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    63a2:	9f 9e       	mul	r9, r31
    63a4:	9c 9a       	sbi	0x13, 4	; 19
    63a6:	99 97       	sbiw	r26, 0x29	; 41
    63a8:	95 94       	asr	r9
    63aa:	93 91       	.word	0x9193	; ????
    63ac:	90 8f       	std	Z+24, r25	; 0x18
    63ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    63b0:	8b 8a       	std	Y+19, r8	; 0x13
    63b2:	89 88       	ldd	r8, Y+17	; 0x11
    63b4:	88 87       	std	Y+8, r24	; 0x08
    63b6:	86 85       	ldd	r24, Z+14	; 0x0e
    63b8:	85 84       	ldd	r8, Z+13	; 0x0d
    63ba:	84 84       	ldd	r8, Z+12	; 0x0c
    63bc:	83 83       	std	Z+3, r24	; 0x03
    63be:	83 83       	std	Z+3, r24	; 0x03
    63c0:	83 83       	std	Z+3, r24	; 0x03
    63c2:	83 83       	std	Z+3, r24	; 0x03
    63c4:	83 84       	ldd	r8, Z+11	; 0x0b
    63c6:	84 84       	ldd	r8, Z+12	; 0x0c
    63c8:	85 85       	ldd	r24, Z+13	; 0x0d
    63ca:	86 87       	std	Z+14, r24	; 0x0e
    63cc:	88 88       	ldd	r8, Y+16	; 0x10
    63ce:	89 8a       	std	Y+17, r8	; 0x11
    63d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    63d2:	8d 8f       	std	Y+29, r24	; 0x1d
    63d4:	90 91 93 94 	lds	r25, 0x9493
    63d8:	95 97       	sbiw	r26, 0x25	; 37
    63da:	99 9a       	sbi	0x13, 1	; 19
    63dc:	9c 9e       	mul	r9, r28
    63de:	9f a1       	ldd	r25, Y+39	; 0x27
    63e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    63e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    63e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    63e6:	af b1       	in	r26, 0x0f	; 15
    63e8:	b4 b6       	in	r11, 0x34	; 52
    63ea:	b8 ba       	out	0x18, r11	; 24
    63ec:	bd bf       	out	0x3d, r27	; 61
    63ee:	c1 c3       	rjmp	.+1922   	; 0x6b72 <LBGetJoyPadState+0x64>
    63f0:	c6 c8       	rjmp	.-3700   	; 0x557e <ProcessMusic+0xe0>
    63f2:	ca cc       	rjmp	.-1644   	; 0x5d88 <waves+0x188>
    63f4:	ce d0       	rcall	.+412    	; 0x6592 <waves+0x992>
    63f6:	d2 d4       	rcall	.+2468   	; 0x6d9c <LBRotateSprites+0xba>
    63f8:	d6 d7       	rcall	.+4012   	; 0x73a6 <on_solid_ground+0xc0>
    63fa:	d7 d7       	rcall	.+4014   	; 0x73aa <on_solid_ground+0xc4>
    63fc:	d4 fe       	sbrs	r13, 4
    63fe:	e5 e9       	ldi	r30, 0x95	; 149
    6400:	f9 f8       	.word	0xf8f9	; ????
    6402:	f9 f5       	brne	.+126    	; 0x6482 <waves+0x882>
    6404:	eb e1       	ldi	r30, 0x1B	; 27
    6406:	dd de       	rcall	.-582    	; 0x61c2 <waves+0x5c2>
    6408:	e0 e2       	ldi	r30, 0x20	; 32
    640a:	e4 e5       	ldi	r30, 0x54	; 84
    640c:	e6 e5       	ldi	r30, 0x56	; 86
    640e:	e4 e2       	ldi	r30, 0x24	; 36
    6410:	de d9       	rcall	.-3140   	; 0x57ce <ProcessMusic+0x330>
    6412:	d2 ca       	rjmp	.-2652   	; 0x59b8 <esmw+0x72>
    6414:	c1 b7       	in	r28, 0x31	; 49
    6416:	ac a2       	std	Y+36, r10	; 0x24
    6418:	99 91       	ld	r25, Y+
    641a:	8a 86       	std	Y+10, r8	; 0x0a
    641c:	83 81       	ldd	r24, Z+3	; 0x03
    641e:	80 80       	ld	r8, Z
    6420:	81 82       	std	Z+1, r8	; 0x01
    6422:	83 85       	ldd	r24, Z+11	; 0x0b
    6424:	86 88       	ldd	r8, Z+22	; 0x16
    6426:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6428:	8d 8f       	std	Y+29, r24	; 0x1d
    642a:	90 92 93 95 	sts	0x9593, r9
    642e:	96 97       	sbiw	r26, 0x26	; 38
    6430:	98 99       	sbic	0x13, 0	; 19
    6432:	9a 9b       	sbis	0x13, 2	; 19
    6434:	9b 9c       	mul	r9, r11
    6436:	9d 9d       	mul	r25, r13
    6438:	9d 9e       	mul	r9, r29
    643a:	9e 9e       	mul	r9, r30
    643c:	9f 9f       	mul	r25, r31
    643e:	9f 9f       	mul	r25, r31
    6440:	9f 9f       	mul	r25, r31
    6442:	9f 9e       	mul	r9, r31
    6444:	9e 9e       	mul	r9, r30
    6446:	9d 9d       	mul	r25, r13
    6448:	9d 9c       	mul	r9, r13
    644a:	9b 9b       	sbis	0x13, 3	; 19
    644c:	9a 99       	sbic	0x13, 2	; 19
    644e:	98 97       	sbiw	r26, 0x28	; 40
    6450:	96 95       	lsr	r25
    6452:	93 92       	.word	0x9293	; ????
    6454:	90 8f       	std	Z+24, r25	; 0x18
    6456:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6458:	8a 88       	ldd	r8, Y+18	; 0x12
    645a:	86 85       	ldd	r24, Z+14	; 0x0e
    645c:	83 82       	std	Z+3, r8	; 0x03
    645e:	81 80       	ldd	r8, Z+1	; 0x01
    6460:	80 81       	ld	r24, Z
    6462:	83 86       	std	Z+11, r8	; 0x0b
    6464:	8a 91       	ld	r24, -Y
    6466:	99 a2       	std	Y+33, r9	; 0x21
    6468:	ac b7       	in	r26, 0x3c	; 60
    646a:	c1 ca       	rjmp	.-2686   	; 0x59ee <esmw+0xa8>
    646c:	d2 d9       	rcall	.-3164   	; 0x5812 <ProcessMusic+0x374>
    646e:	de e2       	ldi	r29, 0x2E	; 46
    6470:	e4 e5       	ldi	r30, 0x54	; 84
    6472:	e6 e5       	ldi	r30, 0x56	; 86
    6474:	e4 e2       	ldi	r30, 0x24	; 36
    6476:	e0 de       	rcall	.-576    	; 0x6238 <waves+0x638>
    6478:	dd e1       	ldi	r29, 0x1D	; 29
    647a:	eb f5       	brvc	.+122    	; 0x64f6 <waves+0x8f6>
    647c:	f9 f8       	.word	0xf8f9	; ????
    647e:	f9 00       	.word	0x00f9	; ????
    6480:	07 08       	sbc	r0, r7
    6482:	07 0b       	sbc	r16, r23
    6484:	15 1f       	adc	r17, r21
    6486:	23 22       	and	r2, r19
    6488:	20 1e       	adc	r2, r16
    648a:	1c 1b       	sub	r17, r28
    648c:	1a 1b       	sub	r17, r26
    648e:	1c 1e       	adc	r1, r28
    6490:	22 27       	eor	r18, r18
    6492:	2e 36       	cpi	r18, 0x6E	; 110
    6494:	3f 49       	sbci	r19, 0x9F	; 159
    6496:	54 5e       	subi	r21, 0xE4	; 228
    6498:	67 6f       	ori	r22, 0xF7	; 247
    649a:	76 7a       	andi	r23, 0xA6	; 166
    649c:	7e 7f       	andi	r23, 0xFE	; 254
    649e:	7f 7f       	andi	r23, 0xFF	; 255
    64a0:	7f 7e       	andi	r23, 0xEF	; 239
    64a2:	7d 7b       	andi	r23, 0xBD	; 189
    64a4:	7a 78       	andi	r23, 0x8A	; 138
    64a6:	76 74       	andi	r23, 0x46	; 70
    64a8:	73 71       	andi	r23, 0x13	; 19
    64aa:	70 6e       	ori	r23, 0xE0	; 224
    64ac:	6d 6b       	ori	r22, 0xBD	; 189
    64ae:	6a 69       	ori	r22, 0x9A	; 154
    64b0:	68 67       	ori	r22, 0x78	; 120
    64b2:	66 65       	ori	r22, 0x56	; 86
    64b4:	65 64       	ori	r22, 0x45	; 69
    64b6:	64 63       	ori	r22, 0x34	; 52
    64b8:	63 62       	ori	r22, 0x23	; 35
    64ba:	62 62       	ori	r22, 0x22	; 34
    64bc:	61 61       	ori	r22, 0x11	; 17
    64be:	61 61       	ori	r22, 0x11	; 17
    64c0:	61 61       	ori	r22, 0x11	; 17
    64c2:	61 62       	ori	r22, 0x21	; 33
    64c4:	62 62       	ori	r22, 0x22	; 34
    64c6:	63 63       	ori	r22, 0x33	; 51
    64c8:	63 64       	ori	r22, 0x43	; 67
    64ca:	65 65       	ori	r22, 0x55	; 85
    64cc:	66 67       	ori	r22, 0x76	; 118
    64ce:	68 69       	ori	r22, 0x98	; 152
    64d0:	6a 6b       	ori	r22, 0xBA	; 186
    64d2:	6d 6e       	ori	r22, 0xED	; 237
    64d4:	70 71       	andi	r23, 0x10	; 16
    64d6:	73 74       	andi	r23, 0x43	; 67
    64d8:	76 78       	andi	r23, 0x86	; 134
    64da:	7a 7b       	andi	r23, 0xBA	; 186
    64dc:	7d 7e       	andi	r23, 0xED	; 237
    64de:	7f 7f       	andi	r23, 0xFF	; 255
    64e0:	7f 7f       	andi	r23, 0xFF	; 255
    64e2:	7e 7a       	andi	r23, 0xAE	; 174
    64e4:	76 6f       	ori	r23, 0xF6	; 246
    64e6:	67 5e       	subi	r22, 0xE7	; 231
    64e8:	54 49       	sbci	r21, 0x94	; 148
    64ea:	3f 36       	cpi	r19, 0x6F	; 111
    64ec:	2e 27       	eor	r18, r30
    64ee:	22 1e       	adc	r2, r18
    64f0:	1c 1b       	sub	r17, r28
    64f2:	1a 1b       	sub	r17, r26
    64f4:	1c 1e       	adc	r1, r28
    64f6:	20 22       	and	r2, r16
    64f8:	23 1f       	adc	r18, r19
    64fa:	15 0b       	sbc	r17, r21
    64fc:	07 08       	sbc	r0, r7
    64fe:	07 00       	.word	0x0007	; ????
    6500:	1f 31       	cpi	r17, 0x1F	; 31
    6502:	3d 44       	sbci	r19, 0x4D	; 77
    6504:	4e 53       	subi	r20, 0x3E	; 62
    6506:	54 56       	subi	r21, 0x64	; 100
    6508:	5a 5f       	subi	r21, 0xFA	; 250
    650a:	64 69       	ori	r22, 0x94	; 148
    650c:	6e 74       	andi	r22, 0x4E	; 78
    650e:	76 79       	andi	r23, 0x96	; 150
    6510:	7c 7f       	andi	r23, 0xFC	; 252
    6512:	7f 7f       	andi	r23, 0xFF	; 255
    6514:	7f 7f       	andi	r23, 0xFF	; 255
    6516:	7f 7f       	andi	r23, 0xFF	; 255
    6518:	7f 7f       	andi	r23, 0xFF	; 255
    651a:	7f 7f       	andi	r23, 0xFF	; 255
    651c:	7f 7f       	andi	r23, 0xFF	; 255
    651e:	7f 7f       	andi	r23, 0xFF	; 255
    6520:	7f 7f       	andi	r23, 0xFF	; 255
    6522:	7f 7f       	andi	r23, 0xFF	; 255
    6524:	7f 7f       	andi	r23, 0xFF	; 255
    6526:	7f 7f       	andi	r23, 0xFF	; 255
    6528:	7f 7f       	andi	r23, 0xFF	; 255
    652a:	7f 7f       	andi	r23, 0xFF	; 255
    652c:	7f 7f       	andi	r23, 0xFF	; 255
    652e:	7f 7f       	andi	r23, 0xFF	; 255
    6530:	7f 7f       	andi	r23, 0xFF	; 255
    6532:	7f 7f       	andi	r23, 0xFF	; 255
    6534:	7f 7f       	andi	r23, 0xFF	; 255
    6536:	7f 7f       	andi	r23, 0xFF	; 255
    6538:	7f 7f       	andi	r23, 0xFF	; 255
    653a:	7f 7f       	andi	r23, 0xFF	; 255
    653c:	7f 7f       	andi	r23, 0xFF	; 255
    653e:	7f 7f       	andi	r23, 0xFF	; 255
    6540:	7f 7f       	andi	r23, 0xFF	; 255
    6542:	7f 7f       	andi	r23, 0xFF	; 255
    6544:	7f 7f       	andi	r23, 0xFF	; 255
    6546:	7f 7f       	andi	r23, 0xFF	; 255
    6548:	7f 7f       	andi	r23, 0xFF	; 255
    654a:	7f 7f       	andi	r23, 0xFF	; 255
    654c:	7f 7f       	andi	r23, 0xFF	; 255
    654e:	7f 7f       	andi	r23, 0xFF	; 255
    6550:	7f 7f       	andi	r23, 0xFF	; 255
    6552:	7f 7f       	andi	r23, 0xFF	; 255
    6554:	7f 7f       	andi	r23, 0xFF	; 255
    6556:	7f 7f       	andi	r23, 0xFF	; 255
    6558:	7f 7f       	andi	r23, 0xFF	; 255
    655a:	7f 7f       	andi	r23, 0xFF	; 255
    655c:	7f 7f       	andi	r23, 0xFF	; 255
    655e:	7f 7f       	andi	r23, 0xFF	; 255
    6560:	7f 7f       	andi	r23, 0xFF	; 255
    6562:	7f 7f       	andi	r23, 0xFF	; 255
    6564:	7f 7f       	andi	r23, 0xFF	; 255
    6566:	7f 7f       	andi	r23, 0xFF	; 255
    6568:	7f 7f       	andi	r23, 0xFF	; 255
    656a:	7f 7f       	andi	r23, 0xFF	; 255
    656c:	7f 7f       	andi	r23, 0xFF	; 255
    656e:	7f 7f       	andi	r23, 0xFF	; 255
    6570:	7f 7f       	andi	r23, 0xFF	; 255
    6572:	7f 7f       	andi	r23, 0xFF	; 255
    6574:	7f 7f       	andi	r23, 0xFF	; 255
    6576:	7f 7f       	andi	r23, 0xFF	; 255
    6578:	7f 7f       	andi	r23, 0xFF	; 255
    657a:	7f 7c       	andi	r23, 0xCF	; 207
    657c:	78 71       	andi	r23, 0x18	; 24
    657e:	68 4c       	sbci	r22, 0xC8	; 200
    6580:	2c 1c       	adc	r2, r12
    6582:	12 0c       	add	r1, r2
    6584:	0a 0b       	sbc	r16, r26
    6586:	0a 05       	cpc	r16, r10
    6588:	fd f3       	brhs	.-2      	; 0x6588 <waves+0x988>
    658a:	e9 df       	rcall	.-46     	; 0x655e <waves+0x95e>
    658c:	d4 ca       	rjmp	.-2648   	; 0x5b36 <steptable+0x12e>
    658e:	c0 b7       	in	r28, 0x30	; 48
    6590:	ae a6       	std	Y+46, r10	; 0x2e
    6592:	9e 97       	sbiw	r26, 0x2e	; 46
    6594:	91 8b       	std	Z+17, r25	; 0x11
    6596:	86 85       	ldd	r24, Z+14	; 0x0e
    6598:	82 80       	ldd	r8, Z+2	; 0x02
    659a:	80 80       	ld	r8, Z
    659c:	80 80       	ld	r8, Z
    659e:	80 80       	ld	r8, Z
    65a0:	80 80       	ld	r8, Z
    65a2:	80 80       	ld	r8, Z
    65a4:	80 80       	ld	r8, Z
    65a6:	80 80       	ld	r8, Z
    65a8:	80 80       	ld	r8, Z
    65aa:	80 80       	ld	r8, Z
    65ac:	80 80       	ld	r8, Z
    65ae:	80 80       	ld	r8, Z
    65b0:	80 80       	ld	r8, Z
    65b2:	80 80       	ld	r8, Z
    65b4:	80 80       	ld	r8, Z
    65b6:	80 80       	ld	r8, Z
    65b8:	80 80       	ld	r8, Z
    65ba:	80 80       	ld	r8, Z
    65bc:	80 80       	ld	r8, Z
    65be:	80 80       	ld	r8, Z
    65c0:	80 80       	ld	r8, Z
    65c2:	80 80       	ld	r8, Z
    65c4:	80 80       	ld	r8, Z
    65c6:	80 80       	ld	r8, Z
    65c8:	80 80       	ld	r8, Z
    65ca:	80 80       	ld	r8, Z
    65cc:	80 80       	ld	r8, Z
    65ce:	80 80       	ld	r8, Z
    65d0:	80 80       	ld	r8, Z
    65d2:	80 80       	ld	r8, Z
    65d4:	80 80       	ld	r8, Z
    65d6:	80 80       	ld	r8, Z
    65d8:	80 80       	ld	r8, Z
    65da:	80 80       	ld	r8, Z
    65dc:	80 80       	ld	r8, Z
    65de:	80 80       	ld	r8, Z
    65e0:	80 80       	ld	r8, Z
    65e2:	80 80       	ld	r8, Z
    65e4:	80 80       	ld	r8, Z
    65e6:	80 80       	ld	r8, Z
    65e8:	80 80       	ld	r8, Z
    65ea:	80 80       	ld	r8, Z
    65ec:	80 80       	ld	r8, Z
    65ee:	80 80       	ld	r8, Z
    65f0:	80 80       	ld	r8, Z
    65f2:	80 80       	ld	r8, Z
    65f4:	80 87       	std	Z+8, r24	; 0x08
    65f6:	91 9d       	mul	r25, r1
    65f8:	ac c4       	rjmp	.+2392   	; 0x6f52 <read_level_byte+0x8>
    65fa:	cb d4       	rcall	.+2454   	; 0x6f92 <get_camera_y+0x8>
    65fc:	dd f2       	brhs	.-74     	; 0x65b4 <waves+0x9b4>
    65fe:	fa fa       	.word	0xfafa	; ????

00006600 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6600:	80 91 db 0c 	lds	r24, 0x0CDB
    6604:	90 91 6a 0d 	lds	r25, 0x0D6A
    6608:	89 17       	cp	r24, r25
    660a:	78 f4       	brcc	.+30     	; 0x662a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    660c:	e8 2f       	mov	r30, r24
    660e:	f0 e0       	ldi	r31, 0x00	; 0
    6610:	9f 01       	movw	r18, r30
    6612:	22 0f       	add	r18, r18
    6614:	33 1f       	adc	r19, r19
    6616:	e2 0f       	add	r30, r18
    6618:	f3 1f       	adc	r31, r19
    661a:	e6 5c       	subi	r30, 0xC6	; 198
    661c:	f3 4f       	sbci	r31, 0xF3	; 243
    661e:	a0 81       	ld	r26, Z
    6620:	b1 81       	ldd	r27, Z+1	; 0x01
    6622:	92 81       	ldd	r25, Z+2	; 0x02
    6624:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6626:	8f 5f       	subi	r24, 0xFF	; 255
    6628:	ed cf       	rjmp	.-38     	; 0x6604 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    662a:	08 95       	ret

0000662c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    662c:	2f 92       	push	r2
    662e:	3f 92       	push	r3
    6630:	4f 92       	push	r4
    6632:	5f 92       	push	r5
    6634:	6f 92       	push	r6
    6636:	7f 92       	push	r7
    6638:	8f 92       	push	r8
    663a:	9f 92       	push	r9
    663c:	af 92       	push	r10
    663e:	bf 92       	push	r11
    6640:	cf 92       	push	r12
    6642:	df 92       	push	r13
    6644:	ef 92       	push	r14
    6646:	ff 92       	push	r15
    6648:	0f 93       	push	r16
    664a:	1f 93       	push	r17
    664c:	cf 93       	push	r28
    664e:	df 93       	push	r29
    6650:	00 d0       	rcall	.+0      	; 0x6652 <ProcessSprites+0x26>
    6652:	00 d0       	rcall	.+0      	; 0x6654 <ProcessSprites+0x28>
    6654:	cd b7       	in	r28, 0x3d	; 61
    6656:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    6658:	80 91 00 05 	lds	r24, 0x0500
    665c:	88 23       	and	r24, r24
    665e:	09 f4       	brne	.+2      	; 0x6662 <ProcessSprites+0x36>
    6660:	e0 c0       	rjmp	.+448    	; 0x6822 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    6662:	80 91 da 0c 	lds	r24, 0x0CDA
    6666:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    666a:	80 93 6a 0d 	sts	0x0D6A, r24
    666e:	e2 e0       	ldi	r30, 0x02	; 2
    6670:	ce 2e       	mov	r12, r30
    6672:	e5 e0       	ldi	r30, 0x05	; 5
    6674:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    6676:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    6678:	f6 01       	movw	r30, r12
    667a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    667c:	20 3e       	cpi	r18, 0xE0	; 224
    667e:	09 f4       	brne	.+2      	; 0x6682 <ProcessSprites+0x56>
    6680:	b1 c0       	rjmp	.+354    	; 0x67e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    6682:	80 91 9c 0c 	lds	r24, 0x0C9C
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	82 0f       	add	r24, r18
    668a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    668c:	41 81       	ldd	r20, Z+1	; 0x01
    668e:	20 91 9d 0c 	lds	r18, 0x0C9D
    6692:	30 e0       	ldi	r19, 0x00	; 0
    6694:	24 0f       	add	r18, r20
    6696:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    6698:	ac 01       	movw	r20, r24
    669a:	73 e0       	ldi	r23, 0x03	; 3
    669c:	56 95       	lsr	r21
    669e:	47 95       	ror	r20
    66a0:	7a 95       	dec	r23
    66a2:	e1 f7       	brne	.-8      	; 0x669c <ProcessSprites+0x70>
    66a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    66a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    66a8:	11 f0       	breq	.+4      	; 0x66ae <ProcessSprites+0x82>
    66aa:	92 e0       	ldi	r25, 0x02	; 2
    66ac:	01 c0       	rjmp	.+2      	; 0x66b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    66ae:	91 e0       	ldi	r25, 0x01	; 1
    66b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    66b2:	a9 01       	movw	r20, r18
    66b4:	63 e0       	ldi	r22, 0x03	; 3
    66b6:	56 95       	lsr	r21
    66b8:	47 95       	ror	r20
    66ba:	6a 95       	dec	r22
    66bc:	e1 f7       	brne	.-8      	; 0x66b6 <ProcessSprites+0x8a>
    66be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    66c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    66c2:	19 f0       	breq	.+6      	; 0x66ca <ProcessSprites+0x9e>
    66c4:	52 e0       	ldi	r21, 0x02	; 2
    66c6:	35 2e       	mov	r3, r21
    66c8:	02 c0       	rjmp	.+4      	; 0x66ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    66ca:	33 24       	eor	r3, r3
    66cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	32 2f       	mov	r19, r18
    66d2:	22 27       	eor	r18, r18
    66d4:	f9 01       	movw	r30, r18
    66d6:	e8 0f       	add	r30, r24
    66d8:	f1 1d       	adc	r31, r1
    66da:	fc 83       	std	Y+4, r31	; 0x04
    66dc:	eb 83       	std	Y+3, r30	; 0x03
    66de:	e1 2c       	mov	r14, r1
    66e0:	f1 2c       	mov	r15, r1
    66e2:	be 2c       	mov	r11, r14
    66e4:	aa 24       	eor	r10, r10
    66e6:	26 2c       	mov	r2, r6
    66e8:	45 2c       	mov	r4, r5
    66ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    66ec:	84 2c       	mov	r8, r4
    66ee:	91 2c       	mov	r9, r1
    66f0:	84 2d       	mov	r24, r4
    66f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    66f6:	42 2f       	mov	r20, r18
    66f8:	50 e0       	ldi	r21, 0x00	; 0
    66fa:	44 0f       	add	r20, r20
    66fc:	55 1f       	adc	r21, r21
    66fe:	84 16       	cp	r8, r20
    6700:	95 06       	cpc	r9, r21
    6702:	14 f0       	brlt	.+4      	; 0x6708 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    6704:	22 0f       	add	r18, r18
    6706:	03 c0       	rjmp	.+6      	; 0x670e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    6708:	42 16       	cp	r4, r18
    670a:	10 f0       	brcs	.+4      	; 0x6710 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    670c:	84 2d       	mov	r24, r4
    670e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    6710:	ff e1       	ldi	r31, 0x1F	; 31
    6712:	f2 15       	cp	r31, r2
    6714:	18 f4       	brcc	.+6      	; 0x671c <ProcessSprites+0xf0>
    6716:	00 ee       	ldi	r16, 0xE0	; 224
    6718:	02 0d       	add	r16, r2
    671a:	01 c0       	rjmp	.+2      	; 0x671e <ProcessSprites+0xf2>
    671c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    671e:	28 2f       	mov	r18, r24
    6720:	26 95       	lsr	r18
    6722:	26 95       	lsr	r18
    6724:	26 95       	lsr	r18
    6726:	10 e0       	ldi	r17, 0x00	; 0
    6728:	40 e2       	ldi	r20, 0x20	; 32
    672a:	24 9f       	mul	r18, r20
    672c:	00 0d       	add	r16, r0
    672e:	11 1d       	adc	r17, r1
    6730:	11 24       	eor	r1, r1
    6732:	23 e0       	ldi	r18, 0x03	; 3
    6734:	00 0f       	add	r16, r16
    6736:	11 1f       	adc	r17, r17
    6738:	2a 95       	dec	r18
    673a:	e1 f7       	brne	.-8      	; 0x6734 <ProcessSprites+0x108>
    673c:	87 70       	andi	r24, 0x07	; 7
    673e:	08 0f       	add	r16, r24
    6740:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    6742:	00 50       	subi	r16, 0x00	; 0
    6744:	1f 4f       	sbci	r17, 0xFF	; 255
    6746:	f8 01       	movw	r30, r16
    6748:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    674a:	81 e0       	ldi	r24, 0x01	; 1
    674c:	7c 31       	cpi	r23, 0x1C	; 28
    674e:	08 f4       	brcc	.+2      	; 0x6752 <ProcessSprites+0x126>
    6750:	80 e0       	ldi	r24, 0x00	; 0
    6752:	21 e0       	ldi	r18, 0x01	; 1
    6754:	30 91 db 0c 	lds	r19, 0x0CDB
    6758:	73 17       	cp	r23, r19
    675a:	18 f0       	brcs	.+6      	; 0x6762 <ProcessSprites+0x136>
    675c:	20 e0       	ldi	r18, 0x00	; 0
    675e:	88 23       	and	r24, r24
    6760:	51 f1       	breq	.+84     	; 0x67b6 <ProcessSprites+0x18a>
    6762:	60 91 6a 0d 	lds	r22, 0x0D6A
    6766:	6c 31       	cpi	r22, 0x1C	; 28
    6768:	20 f5       	brcc	.+72     	; 0x67b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    676a:	88 23       	and	r24, r24
    676c:	31 f0       	breq	.+12     	; 0x677a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    676e:	84 ee       	ldi	r24, 0xE4	; 228
    6770:	87 0f       	add	r24, r23
    6772:	7a 83       	std	Y+2, r23	; 0x02
    6774:	0e 94 d5 23 	call	0x47aa	; 0x47aa <CopyFlashTile>
    6778:	06 c0       	rjmp	.+12     	; 0x6786 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    677a:	22 23       	and	r18, r18
    677c:	29 f0       	breq	.+10     	; 0x6788 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    677e:	87 2f       	mov	r24, r23
    6780:	7a 83       	std	Y+2, r23	; 0x02
    6782:	0e 94 64 24 	call	0x48c8	; 0x48c8 <CopyRamTile>
    6786:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    6788:	80 91 6a 0d 	lds	r24, 0x0D6A
    678c:	e8 2f       	mov	r30, r24
    678e:	f0 e0       	ldi	r31, 0x00	; 0
    6790:	9f 01       	movw	r18, r30
    6792:	22 0f       	add	r18, r18
    6794:	33 1f       	adc	r19, r19
    6796:	e2 0f       	add	r30, r18
    6798:	f3 1f       	adc	r31, r19
    679a:	e6 5c       	subi	r30, 0xC6	; 198
    679c:	f3 4f       	sbci	r31, 0xF3	; 243
    679e:	11 83       	std	Z+1, r17	; 0x01
    67a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    67a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    67a4:	f8 01       	movw	r30, r16
    67a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    67a8:	21 e0       	ldi	r18, 0x01	; 1
    67aa:	28 0f       	add	r18, r24
    67ac:	20 93 6a 0d 	sts	0x0D6A, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    67b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    67b2:	7c 31       	cpi	r23, 0x1C	; 28
    67b4:	38 f4       	brcc	.+14     	; 0x67c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    67b6:	2b 81       	ldd	r18, Y+3	; 0x03
    67b8:	3c 81       	ldd	r19, Y+4	; 0x04
    67ba:	a5 01       	movw	r20, r10
    67bc:	67 2f       	mov	r22, r23
    67be:	87 2d       	mov	r24, r7
    67c0:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <BlitSprite>
    67c4:	ff ef       	ldi	r31, 0xFF	; 255
    67c6:	af 1a       	sub	r10, r31
    67c8:	bf 0a       	sbc	r11, r31
    67ca:	23 94       	inc	r2
    67cc:	82 2d       	mov	r24, r2
    67ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    67d0:	99 81       	ldd	r25, Y+1	; 0x01
    67d2:	89 17       	cp	r24, r25
    67d4:	08 f4       	brcc	.+2      	; 0x67d8 <ProcessSprites+0x1ac>
    67d6:	8c cf       	rjmp	.-232    	; 0x66f0 <ProcessSprites+0xc4>
    67d8:	ef ef       	ldi	r30, 0xFF	; 255
    67da:	ee 1a       	sub	r14, r30
    67dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    67de:	e3 14       	cp	r14, r3
    67e0:	08 f4       	brcc	.+2      	; 0x67e4 <ProcessSprites+0x1b8>
    67e2:	7f cf       	rjmp	.-258    	; 0x66e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    67e4:	73 94       	inc	r7
    67e6:	f4 e0       	ldi	r31, 0x04	; 4
    67e8:	cf 0e       	add	r12, r31
    67ea:	d1 1c       	adc	r13, r1
    67ec:	4e e0       	ldi	r20, 0x0E	; 14
    67ee:	74 12       	cpse	r7, r20
    67f0:	43 cf       	rjmp	.-378    	; 0x6678 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    67f2:	0f 90       	pop	r0
    67f4:	0f 90       	pop	r0
    67f6:	0f 90       	pop	r0
    67f8:	0f 90       	pop	r0
    67fa:	df 91       	pop	r29
    67fc:	cf 91       	pop	r28
    67fe:	1f 91       	pop	r17
    6800:	0f 91       	pop	r16
    6802:	ff 90       	pop	r15
    6804:	ef 90       	pop	r14
    6806:	df 90       	pop	r13
    6808:	cf 90       	pop	r12
    680a:	bf 90       	pop	r11
    680c:	af 90       	pop	r10
    680e:	9f 90       	pop	r9
    6810:	8f 90       	pop	r8
    6812:	7f 90       	pop	r7
    6814:	6f 90       	pop	r6
    6816:	5f 90       	pop	r5
    6818:	4f 90       	pop	r4
    681a:	3f 90       	pop	r3
    681c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    681e:	0c 94 00 33 	jmp	0x6600	; 0x6600 <RestoreBackground>

	}
    6822:	0f 90       	pop	r0
    6824:	0f 90       	pop	r0
    6826:	0f 90       	pop	r0
    6828:	0f 90       	pop	r0
    682a:	df 91       	pop	r29
    682c:	cf 91       	pop	r28
    682e:	1f 91       	pop	r17
    6830:	0f 91       	pop	r16
    6832:	ff 90       	pop	r15
    6834:	ef 90       	pop	r14
    6836:	df 90       	pop	r13
    6838:	cf 90       	pop	r12
    683a:	bf 90       	pop	r11
    683c:	af 90       	pop	r10
    683e:	9f 90       	pop	r9
    6840:	8f 90       	pop	r8
    6842:	7f 90       	pop	r7
    6844:	6f 90       	pop	r6
    6846:	5f 90       	pop	r5
    6848:	4f 90       	pop	r4
    684a:	3f 90       	pop	r3
    684c:	2f 90       	pop	r2
    684e:	08 95       	ret

00006850 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    6850:	90 91 9d 0c 	lds	r25, 0x0C9D
    6854:	96 0f       	add	r25, r22
    6856:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    685a:	20 91 9c 0c 	lds	r18, 0x0C9C
    685e:	82 0f       	add	r24, r18
    6860:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    6864:	80 91 9e 0c 	lds	r24, 0x0C9E
    6868:	80 32       	cpi	r24, 0x20	; 32
    686a:	b0 f4       	brcc	.+44     	; 0x6898 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    686c:	29 2f       	mov	r18, r25
    686e:	30 e0       	ldi	r19, 0x00	; 0
    6870:	78 e0       	ldi	r23, 0x08	; 8
    6872:	87 9f       	mul	r24, r23
    6874:	a0 01       	movw	r20, r0
    6876:	11 24       	eor	r1, r1
    6878:	24 17       	cp	r18, r20
    687a:	35 07       	cpc	r19, r21
    687c:	6c f0       	brlt	.+26     	; 0x6898 <Scroll+0x48>
				if(dy>=0){	
    687e:	67 fd       	sbrc	r22, 7
    6880:	05 c0       	rjmp	.+10     	; 0x688c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    6882:	28 ef       	ldi	r18, 0xF8	; 248
    6884:	82 9f       	mul	r24, r18
    6886:	90 0d       	add	r25, r0
    6888:	11 24       	eor	r1, r1
    688a:	04 c0       	rjmp	.+8      	; 0x6894 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    688c:	78 e0       	ldi	r23, 0x08	; 8
    688e:	87 9f       	mul	r24, r23
    6890:	90 0d       	add	r25, r0
    6892:	11 24       	eor	r1, r1
    6894:	90 93 9d 0c 	sts	0x0C9D, r25
    6898:	08 95       	ret

0000689a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    689a:	e2 e0       	ldi	r30, 0x02	; 2
    689c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    689e:	80 ee       	ldi	r24, 0xE0	; 224
    68a0:	80 83       	st	Z, r24
    68a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    68a4:	95 e0       	ldi	r25, 0x05	; 5
    68a6:	ea 33       	cpi	r30, 0x3A	; 58
    68a8:	f9 07       	cpc	r31, r25
    68aa:	d1 f7       	brne	.-12     	; 0x68a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    68ac:	80 e2       	ldi	r24, 0x20	; 32
    68ae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    68b2:	10 92 99 0c 	sts	0x0C99, r1
    68b6:	08 95       	ret

000068b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    68b8:	4f 92       	push	r4
    68ba:	5f 92       	push	r5
    68bc:	6f 92       	push	r6
    68be:	7f 92       	push	r7
    68c0:	8f 92       	push	r8
    68c2:	9f 92       	push	r9
    68c4:	af 92       	push	r10
    68c6:	bf 92       	push	r11
    68c8:	cf 92       	push	r12
    68ca:	df 92       	push	r13
    68cc:	ef 92       	push	r14
    68ce:	ff 92       	push	r15
    68d0:	0f 93       	push	r16
    68d2:	1f 93       	push	r17
    68d4:	cf 93       	push	r28
    68d6:	df 93       	push	r29
    68d8:	68 2e       	mov	r6, r24
    68da:	56 2e       	mov	r5, r22
    68dc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    68de:	fa 01       	movw	r30, r20
    68e0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    68e2:	31 96       	adiw	r30, 0x01	; 1
    68e4:	84 90       	lpm	r8, Z
    68e6:	c7 2c       	mov	r12, r7
    68e8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    68ea:	00 e0       	ldi	r16, 0x00	; 0
    68ec:	10 e0       	ldi	r17, 0x00	; 0
    68ee:	91 2c       	mov	r9, r1
    68f0:	98 14       	cp	r9, r8
    68f2:	f1 f0       	breq	.+60     	; 0x6930 <DrawMap+0x78>
    68f4:	c0 e0       	ldi	r28, 0x00	; 0
    68f6:	d0 e0       	ldi	r29, 0x00	; 0
    68f8:	58 01       	movw	r10, r16
    68fa:	f2 e0       	ldi	r31, 0x02	; 2
    68fc:	af 0e       	add	r10, r31
    68fe:	b1 1c       	adc	r11, r1
    6900:	49 2c       	mov	r4, r9
    6902:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    6904:	c7 15       	cp	r28, r7
    6906:	80 f4       	brcc	.+32     	; 0x6928 <DrawMap+0x70>
    6908:	95 01       	movw	r18, r10
    690a:	2c 0f       	add	r18, r28
    690c:	3d 1f       	adc	r19, r29
    690e:	f7 01       	movw	r30, r14
    6910:	e2 0f       	add	r30, r18
    6912:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    6914:	24 91       	lpm	r18, Z
    6916:	42 2f       	mov	r20, r18
    6918:	50 e0       	ldi	r21, 0x00	; 0
    691a:	64 2d       	mov	r22, r4
    691c:	8c 2f       	mov	r24, r28
    691e:	86 0d       	add	r24, r6
    6920:	0e 94 28 27 	call	0x4e50	; 0x4e50 <SetTile>
    6924:	21 96       	adiw	r28, 0x01	; 1
    6926:	ee cf       	rjmp	.-36     	; 0x6904 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    6928:	93 94       	inc	r9
    692a:	0c 0d       	add	r16, r12
    692c:	1d 1d       	adc	r17, r13
    692e:	e0 cf       	rjmp	.-64     	; 0x68f0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    6930:	df 91       	pop	r29
    6932:	cf 91       	pop	r28
    6934:	1f 91       	pop	r17
    6936:	0f 91       	pop	r16
    6938:	ff 90       	pop	r15
    693a:	ef 90       	pop	r14
    693c:	df 90       	pop	r13
    693e:	cf 90       	pop	r12
    6940:	bf 90       	pop	r11
    6942:	af 90       	pop	r10
    6944:	9f 90       	pop	r9
    6946:	8f 90       	pop	r8
    6948:	7f 90       	pop	r7
    694a:	6f 90       	pop	r6
    694c:	5f 90       	pop	r5
    694e:	4f 90       	pop	r4
    6950:	08 95       	ret

00006952 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    6952:	0f 93       	push	r16
    6954:	1f 93       	push	r17
    6956:	cf 93       	push	r28
    6958:	df 93       	push	r29
    695a:	06 2f       	mov	r16, r22
    695c:	c4 2f       	mov	r28, r20
    695e:	d5 2f       	mov	r29, r21
    6960:	18 2f       	mov	r17, r24
    6962:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    6964:	fe 01       	movw	r30, r28
    6966:	44 91       	lpm	r20, Z
		if(c!=0){
    6968:	44 23       	and	r20, r20
    696a:	49 f0       	breq	.+18     	; 0x697e <Print+0x2c>
			c=((c&127)-32);			
    696c:	4f 77       	andi	r20, 0x7F	; 127
    696e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    6970:	60 2f       	mov	r22, r16
    6972:	8c 2f       	mov	r24, r28
    6974:	81 0f       	add	r24, r17
    6976:	0e 94 24 27 	call	0x4e48	; 0x4e48 <SetFont>
    697a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    697c:	f3 cf       	rjmp	.-26     	; 0x6964 <Print+0x12>
	
}
    697e:	df 91       	pop	r29
    6980:	cf 91       	pop	r28
    6982:	1f 91       	pop	r17
    6984:	0f 91       	pop	r16
    6986:	08 95       	ret

00006988 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    6988:	0f 93       	push	r16
    698a:	1f 93       	push	r17
    698c:	cf 93       	push	r28
    698e:	df 93       	push	r29
    6990:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6992:	c0 e0       	ldi	r28, 0x00	; 0
    6994:	d0 e0       	ldi	r29, 0x00	; 0
    6996:	c0 17       	cp	r28, r16
    6998:	d1 07       	cpc	r29, r17
    699a:	44 f4       	brge	.+16     	; 0x69ac <WaitVsync+0x24>
		while(!GetVsyncFlag());
    699c:	0e 94 41 27 	call	0x4e82	; 0x4e82 <GetVsyncFlag>
    69a0:	88 23       	and	r24, r24
    69a2:	e1 f3       	breq	.-8      	; 0x699c <WaitVsync+0x14>
		ClearVsyncFlag();		
    69a4:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    69a8:	21 96       	adiw	r28, 0x01	; 1
    69aa:	f5 cf       	rjmp	.-22     	; 0x6996 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    69ac:	df 91       	pop	r29
    69ae:	cf 91       	pop	r28
    69b0:	1f 91       	pop	r17
    69b2:	0f 91       	pop	r16
    69b4:	08 95       	ret

000069b6 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    69b6:	8d e1       	ldi	r24, 0x1D	; 29
    69b8:	99 e0       	ldi	r25, 0x09	; 9
    69ba:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    69be:	8d e1       	ldi	r24, 0x1D	; 29
    69c0:	91 e0       	ldi	r25, 0x01	; 1
    69c2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <SetTileTable>
			
			//draw logo
			ClearVram();
    69c6:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <ClearVram>
			WaitVsync(15);		
    69ca:	8f e0       	ldi	r24, 0x0F	; 15
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	0e 94 c4 34 	call	0x6988	; 0x6988 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    69d2:	41 e0       	ldi	r20, 0x01	; 1
    69d4:	6f ef       	ldi	r22, 0xFF	; 255
    69d6:	80 e0       	ldi	r24, 0x00	; 0
    69d8:	0e 94 c7 29 	call	0x538e	; 0x538e <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    69dc:	47 e0       	ldi	r20, 0x07	; 7
    69de:	51 e0       	ldi	r21, 0x01	; 1
    69e0:	6c e0       	ldi	r22, 0x0C	; 12
    69e2:	8c e0       	ldi	r24, 0x0C	; 12
    69e4:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <DrawMap>
			WaitVsync(3);
    69e8:	83 e0       	ldi	r24, 0x03	; 3
    69ea:	90 e0       	ldi	r25, 0x00	; 0
    69ec:	0e 94 c4 34 	call	0x6988	; 0x6988 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    69f0:	46 ef       	ldi	r20, 0xF6	; 246
    69f2:	50 e0       	ldi	r21, 0x00	; 0
    69f4:	6c e0       	ldi	r22, 0x0C	; 12
    69f6:	8c e0       	ldi	r24, 0x0C	; 12
    69f8:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <DrawMap>
			WaitVsync(2);
    69fc:	82 e0       	ldi	r24, 0x02	; 2
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	0e 94 c4 34 	call	0x6988	; 0x6988 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6a04:	47 e0       	ldi	r20, 0x07	; 7
    6a06:	51 e0       	ldi	r21, 0x01	; 1
    6a08:	6c e0       	ldi	r22, 0x0C	; 12
    6a0a:	8c e0       	ldi	r24, 0x0C	; 12
    6a0c:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    6a10:	81 e4       	ldi	r24, 0x41	; 65
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	0e 94 c4 34 	call	0x6988	; 0x6988 <WaitVsync>
			ClearVram();
    6a18:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <ClearVram>
			WaitVsync(20);
    6a1c:	84 e1       	ldi	r24, 0x14	; 20
    6a1e:	90 e0       	ldi	r25, 0x00	; 0
    6a20:	0c 94 c4 34 	jmp	0x6988	; 0x6988 <WaitVsync>

00006a24 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    6a24:	80 93 68 0d 	sts	0x0D68, r24
	currFadeFrame=0;
    6a28:	10 92 6c 0d 	sts	0x0D6C, r1
	fadeActive=true;
    6a2c:	81 e0       	ldi	r24, 0x01	; 1
    6a2e:	80 93 6b 0d 	sts	0x0D6B, r24
		
	if(blocking){
    6a32:	66 23       	and	r22, r22
    6a34:	21 f0       	breq	.+8      	; 0x6a3e <doFade+0x1a>
		while(fadeActive==true);
    6a36:	80 91 6b 0d 	lds	r24, 0x0D6B
    6a3a:	81 11       	cpse	r24, r1
    6a3c:	fc cf       	rjmp	.-8      	; 0x6a36 <doFade+0x12>
    6a3e:	08 95       	ret

00006a40 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    6a40:	81 11       	cpse	r24, r1
    6a42:	03 c0       	rjmp	.+6      	; 0x6a4a <FadeIn+0xa>
		DDRC=0xff;
    6a44:	8f ef       	ldi	r24, 0xFF	; 255
    6a46:	87 b9       	out	0x07, r24	; 7
		return;
    6a48:	08 95       	ret
	}
	fadeStep=1;
    6a4a:	91 e0       	ldi	r25, 0x01	; 1
    6a4c:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=1;
    6a50:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    6a54:	0c 94 12 35 	jmp	0x6a24	; 0x6a24 <doFade>

00006a58 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    6a58:	81 11       	cpse	r24, r1
    6a5a:	02 c0       	rjmp	.+4      	; 0x6a60 <FadeOut+0x8>
		DDRC=0;
    6a5c:	17 b8       	out	0x07, r1	; 7
		return;
    6a5e:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    6a60:	9c e0       	ldi	r25, 0x0C	; 12
    6a62:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=-1;
    6a66:	9f ef       	ldi	r25, 0xFF	; 255
    6a68:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    6a6c:	0c 94 12 35 	jmp	0x6a24	; 0x6a24 <doFade>

00006a70 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    6a70:	80 91 6b 0d 	lds	r24, 0x0D6B
    6a74:	88 23       	and	r24, r24
    6a76:	01 f1       	breq	.+64     	; 0x6ab8 <ProcessFading+0x48>
		if(currFadeFrame==0){
    6a78:	80 91 6c 0d 	lds	r24, 0x0D6C
    6a7c:	81 11       	cpse	r24, r1
    6a7e:	19 c0       	rjmp	.+50     	; 0x6ab2 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    6a80:	80 91 68 0d 	lds	r24, 0x0D68
    6a84:	80 93 6c 0d 	sts	0x0D6C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    6a88:	e0 91 6d 0d 	lds	r30, 0x0D6D
    6a8c:	f0 e0       	ldi	r31, 0x00	; 0
    6a8e:	e7 51       	subi	r30, 0x17	; 23
    6a90:	ff 4f       	sbci	r31, 0xFF	; 255
    6a92:	e4 91       	lpm	r30, Z
    6a94:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    6a96:	90 91 69 0d 	lds	r25, 0x0D69
    6a9a:	80 91 6d 0d 	lds	r24, 0x0D6D
    6a9e:	89 0f       	add	r24, r25
    6aa0:	80 93 6d 0d 	sts	0x0D6D, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    6aa4:	88 23       	and	r24, r24
    6aa6:	11 f0       	breq	.+4      	; 0x6aac <ProcessFading+0x3c>
    6aa8:	8d 30       	cpi	r24, 0x0D	; 13
    6aaa:	31 f4       	brne	.+12     	; 0x6ab8 <ProcessFading+0x48>
				fadeActive=false;
    6aac:	10 92 6b 0d 	sts	0x0D6B, r1
    6ab0:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    6ab2:	81 50       	subi	r24, 0x01	; 1
    6ab4:	80 93 6c 0d 	sts	0x0D6C, r24
    6ab8:	08 95       	ret

00006aba <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    6aba:	0e 94 38 35 	call	0x6a70	; 0x6a70 <ProcessFading>
		ProcessSprites();
    6abe:	0c 94 16 33 	jmp	0x662c	; 0x662c <ProcessSprites>

00006ac2 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    6ac2:	fc 01       	movw	r30, r24
	anim->looped = 0;
    6ac4:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    6ac6:	93 81       	ldd	r25, Z+3	; 0x03
    6ac8:	9f 5f       	subi	r25, 0xFF	; 255
    6aca:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    6acc:	42 81       	ldd	r20, Z+2	; 0x02
    6ace:	80 81       	ld	r24, Z
    6ad0:	26 81       	ldd	r18, Z+6	; 0x06
    6ad2:	37 81       	ldd	r19, Z+7	; 0x07
    6ad4:	94 17       	cp	r25, r20
    6ad6:	30 f4       	brcc	.+12     	; 0x6ae4 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    6ad8:	f9 01       	movw	r30, r18
    6ada:	e8 0f       	add	r30, r24
    6adc:	f1 1d       	adc	r31, r1
    6ade:	e8 0f       	add	r30, r24
    6ae0:	f1 1d       	adc	r31, r1
    6ae2:	12 c0       	rjmp	.+36     	; 0x6b08 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    6ae4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	01 96       	adiw	r24, 0x01	; 1
    6aea:	61 81       	ldd	r22, Z+1	; 0x01
    6aec:	70 e0       	ldi	r23, 0x00	; 0
    6aee:	0e 94 95 41 	call	0x832a	; 0x832a <__divmodhi4>
    6af2:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    6af4:	81 11       	cpse	r24, r1
    6af6:	02 c0       	rjmp	.+4      	; 0x6afc <LBGetNextFrame+0x3a>
    6af8:	41 e0       	ldi	r20, 0x01	; 1
    6afa:	44 83       	std	Z+4, r20	; 0x04
    6afc:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    6afe:	88 0f       	add	r24, r24
    6b00:	99 1f       	adc	r25, r25
    6b02:	f9 01       	movw	r30, r18
    6b04:	e8 0f       	add	r30, r24
    6b06:	f9 1f       	adc	r31, r25
    6b08:	80 81       	ld	r24, Z
    6b0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    6b0c:	08 95       	ret

00006b0e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    6b0e:	0f 93       	push	r16
    6b10:	1f 93       	push	r17
    6b12:	cf 93       	push	r28
    6b14:	df 93       	push	r29
    6b16:	1f 92       	push	r1
    6b18:	cd b7       	in	r28, 0x3d	; 61
    6b1a:	de b7       	in	r29, 0x3e	; 62
    6b1c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    6b1e:	86 2f       	mov	r24, r22
    6b20:	69 83       	std	Y+1, r22	; 0x01
    6b22:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <ReadJoypad>
    6b26:	d8 01       	movw	r26, r16
    6b28:	15 96       	adiw	r26, 0x05	; 5
    6b2a:	9c 93       	st	X, r25
    6b2c:	8e 93       	st	-X, r24
    6b2e:	14 97       	sbiw	r26, 0x04	; 4
    6b30:	69 81       	ldd	r22, Y+1	; 0x01
    6b32:	e6 2f       	mov	r30, r22
    6b34:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    6b36:	00 97       	sbiw	r24, 0x00	; 0
    6b38:	51 f0       	breq	.+20     	; 0x6b4e <LBGetJoyPadState+0x40>
    6b3a:	df 01       	movw	r26, r30
    6b3c:	aa 0f       	add	r26, r26
    6b3e:	bb 1f       	adc	r27, r27
    6b40:	a0 52       	subi	r26, 0x20	; 32
    6b42:	b3 4f       	sbci	r27, 0xF3	; 243
    6b44:	2d 91       	ld	r18, X+
    6b46:	3c 91       	ld	r19, X
    6b48:	82 17       	cp	r24, r18
    6b4a:	93 07       	cpc	r25, r19
    6b4c:	21 f0       	breq	.+8      	; 0x6b56 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    6b4e:	d8 01       	movw	r26, r16
    6b50:	16 96       	adiw	r26, 0x06	; 6
    6b52:	1c 92       	st	X, r1
    6b54:	07 c0       	rjmp	.+14     	; 0x6b64 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    6b56:	d8 01       	movw	r26, r16
    6b58:	16 96       	adiw	r26, 0x06	; 6
    6b5a:	2c 91       	ld	r18, X
    6b5c:	16 97       	sbiw	r26, 0x06	; 6
    6b5e:	2f 5f       	subi	r18, 0xFF	; 255
    6b60:	16 96       	adiw	r26, 0x06	; 6
    6b62:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    6b64:	ee 0f       	add	r30, r30
    6b66:	ff 1f       	adc	r31, r31
    6b68:	e0 52       	subi	r30, 0x20	; 32
    6b6a:	f3 4f       	sbci	r31, 0xF3	; 243
    6b6c:	20 81       	ld	r18, Z
    6b6e:	31 81       	ldd	r19, Z+1	; 0x01
    6b70:	a9 01       	movw	r20, r18
    6b72:	40 95       	com	r20
    6b74:	50 95       	com	r21
    6b76:	48 23       	and	r20, r24
    6b78:	59 23       	and	r21, r25
    6b7a:	d8 01       	movw	r26, r16
    6b7c:	11 96       	adiw	r26, 0x01	; 1
    6b7e:	5c 93       	st	X, r21
    6b80:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    6b82:	ac 01       	movw	r20, r24
    6b84:	40 95       	com	r20
    6b86:	50 95       	com	r21
    6b88:	24 23       	and	r18, r20
    6b8a:	35 23       	and	r19, r21
    6b8c:	13 96       	adiw	r26, 0x03	; 3
    6b8e:	3c 93       	st	X, r19
    6b90:	2e 93       	st	-X, r18
    6b92:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    6b94:	91 83       	std	Z+1, r25	; 0x01
    6b96:	80 83       	st	Z, r24
}
    6b98:	0f 90       	pop	r0
    6b9a:	df 91       	pop	r29
    6b9c:	cf 91       	pop	r28
    6b9e:	1f 91       	pop	r17
    6ba0:	0f 91       	pop	r16
    6ba2:	08 95       	ret

00006ba4 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    6ba4:	cf 93       	push	r28
    6ba6:	df 93       	push	r29
    6ba8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    6baa:	c0 e0       	ldi	r28, 0x00	; 0
    6bac:	cd 17       	cp	r28, r29
    6bae:	31 f0       	breq	.+12     	; 0x6bbc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    6bb0:	8f ef       	ldi	r24, 0xFF	; 255
    6bb2:	9f ef       	ldi	r25, 0xFF	; 255
    6bb4:	0e 94 57 27 	call	0x4eae	; 0x4eae <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    6bb8:	cf 5f       	subi	r28, 0xFF	; 255
    6bba:	f8 cf       	rjmp	.-16     	; 0x6bac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    6bbc:	df 91       	pop	r29
    6bbe:	cf 91       	pop	r28
    6bc0:	08 95       	ret

00006bc2 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    6bc2:	df 92       	push	r13
    6bc4:	ef 92       	push	r14
    6bc6:	ff 92       	push	r15
    6bc8:	0f 93       	push	r16
    6bca:	1f 93       	push	r17
    6bcc:	cf 93       	push	r28
    6bce:	df 93       	push	r29
    6bd0:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    6bd2:	fb 01       	movw	r30, r22
    6bd4:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    6bd6:	31 96       	adiw	r30, 0x01	; 1
    6bd8:	64 91       	lpm	r22, Z
    6bda:	5f ef       	ldi	r21, 0xFF	; 255
    6bdc:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    6bde:	24 2f       	mov	r18, r20
    6be0:	21 70       	andi	r18, 0x01	; 1
    6be2:	40 ff       	sbrs	r20, 0
    6be4:	04 c0       	rjmp	.+8      	; 0x6bee <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    6be6:	95 2f       	mov	r25, r21
		dx=-1;
    6be8:	ff 24       	eor	r15, r15
    6bea:	fa 94       	dec	r15
    6bec:	03 c0       	rjmp	.+6      	; 0x6bf4 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    6bee:	ff 24       	eor	r15, r15
    6bf0:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    6bf4:	41 ff       	sbrs	r20, 1
    6bf6:	05 c0       	rjmp	.+10     	; 0x6c02 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    6bf8:	7f ef       	ldi	r23, 0xFF	; 255
    6bfa:	76 0f       	add	r23, r22
		dy=-1;
    6bfc:	ee 24       	eor	r14, r14
    6bfe:	ea 94       	dec	r14
    6c00:	03 c0       	rjmp	.+6      	; 0x6c08 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    6c02:	ee 24       	eor	r14, r14
    6c04:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    6c06:	70 e0       	ldi	r23, 0x00	; 0
    6c08:	21 11       	cpse	r18, r1
    6c0a:	01 c0       	rjmp	.+2      	; 0x6c0e <LBMapSprite+0x4c>
    6c0c:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    6c0e:	00 e0       	ldi	r16, 0x00	; 0
    6c10:	06 17       	cp	r16, r22
    6c12:	09 f1       	breq	.+66     	; 0x6c56 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    6c14:	71 03       	mulsu	r23, r17
    6c16:	e0 01       	movw	r28, r0
    6c18:	11 24       	eor	r1, r1
    6c1a:	d8 2e       	mov	r13, r24
    6c1c:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    6c1e:	8d 15       	cp	r24, r13
    6c20:	b1 f0       	breq	.+44     	; 0x6c4e <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    6c22:	9e 01       	movw	r18, r28
    6c24:	29 0f       	add	r18, r25
    6c26:	31 1d       	adc	r19, r1
    6c28:	97 fd       	sbrc	r25, 7
    6c2a:	3a 95       	dec	r19
    6c2c:	2e 5f       	subi	r18, 0xFE	; 254
    6c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c30:	fd 01       	movw	r30, r26
    6c32:	e2 0f       	add	r30, r18
    6c34:	f3 1f       	adc	r31, r19
    6c36:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    6c38:	34 e0       	ldi	r19, 0x04	; 4
    6c3a:	83 9f       	mul	r24, r19
    6c3c:	f0 01       	movw	r30, r0
    6c3e:	11 24       	eor	r1, r1
    6c40:	e7 5a       	subi	r30, 0xA7	; 167
    6c42:	f1 4f       	sbci	r31, 0xF1	; 241
    6c44:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    6c46:	8f 5f       	subi	r24, 0xFF	; 255
    6c48:	43 83       	std	Z+3, r20	; 0x03
    6c4a:	9f 0d       	add	r25, r15
    6c4c:	e8 cf       	rjmp	.-48     	; 0x6c1e <LBMapSprite+0x5c>
    6c4e:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    6c50:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    6c52:	95 2f       	mov	r25, r21
    6c54:	dd cf       	rjmp	.-70     	; 0x6c10 <LBMapSprite+0x4e>
	}
}
    6c56:	df 91       	pop	r29
    6c58:	cf 91       	pop	r28
    6c5a:	1f 91       	pop	r17
    6c5c:	0f 91       	pop	r16
    6c5e:	ff 90       	pop	r15
    6c60:	ef 90       	pop	r14
    6c62:	df 90       	pop	r13
    6c64:	08 95       	ret

00006c66 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    6c66:	df 92       	push	r13
    6c68:	ef 92       	push	r14
    6c6a:	ff 92       	push	r15
    6c6c:	0f 93       	push	r16
    6c6e:	1f 93       	push	r17
    6c70:	cf 93       	push	r28
    6c72:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    6c74:	a0 91 9e 0c 	lds	r26, 0x0C9E
    6c78:	98 e0       	ldi	r25, 0x08	; 8
    6c7a:	a9 9f       	mul	r26, r25
    6c7c:	70 01       	movw	r14, r0
    6c7e:	11 24       	eor	r1, r1
    6c80:	50 e0       	ldi	r21, 0x00	; 0
    6c82:	38 ef       	ldi	r19, 0xF8	; 248
    6c84:	a3 9f       	mul	r26, r19
    6c86:	30 2d       	mov	r19, r0
    6c88:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    6c8a:	70 e0       	ldi	r23, 0x00	; 0
    6c8c:	70 17       	cp	r23, r16
    6c8e:	09 f1       	breq	.+66     	; 0x6cd2 <LBMoveSprite+0x6c>
    6c90:	d4 2e       	mov	r13, r20
    6c92:	13 2f       	mov	r17, r19
    6c94:	14 0f       	add	r17, r20
    6c96:	b8 2f       	mov	r27, r24
    6c98:	b2 0f       	add	r27, r18
    6c9a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    6c9c:	8b 17       	cp	r24, r27
    6c9e:	a9 f0       	breq	.+42     	; 0x6cca <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    6ca0:	c4 e0       	ldi	r28, 0x04	; 4
    6ca2:	8c 9f       	mul	r24, r28
    6ca4:	f0 01       	movw	r30, r0
    6ca6:	11 24       	eor	r1, r1
    6ca8:	ef 01       	movw	r28, r30
    6caa:	c7 5a       	subi	r28, 0xA7	; 167
    6cac:	d1 4f       	sbci	r29, 0xF1	; 241
    6cae:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    6cb0:	a0 32       	cpi	r26, 0x20	; 32
    6cb2:	28 f4       	brcc	.+10     	; 0x6cbe <LBMoveSprite+0x58>
    6cb4:	e4 16       	cp	r14, r20
    6cb6:	f5 06       	cpc	r15, r21
    6cb8:	14 f4       	brge	.+4      	; 0x6cbe <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    6cba:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    6cbc:	03 c0       	rjmp	.+6      	; 0x6cc4 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    6cbe:	e7 5a       	subi	r30, 0xA7	; 167
    6cc0:	f1 4f       	sbci	r31, 0xF1	; 241
    6cc2:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    6cc4:	8f 5f       	subi	r24, 0xFF	; 255
    6cc6:	98 5f       	subi	r25, 0xF8	; 248
    6cc8:	e9 cf       	rjmp	.-46     	; 0x6c9c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    6cca:	7f 5f       	subi	r23, 0xFF	; 255
    6ccc:	48 5f       	subi	r20, 0xF8	; 248
    6cce:	5f 4f       	sbci	r21, 0xFF	; 255
    6cd0:	dd cf       	rjmp	.-70     	; 0x6c8c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    6cd2:	df 91       	pop	r29
    6cd4:	cf 91       	pop	r28
    6cd6:	1f 91       	pop	r17
    6cd8:	0f 91       	pop	r16
    6cda:	ff 90       	pop	r15
    6cdc:	ef 90       	pop	r14
    6cde:	df 90       	pop	r13
    6ce0:	08 95       	ret

00006ce2 <LBRotateSprites>:

void LBRotateSprites(u8 mappedSpriteCount)
{
    6ce2:	cf 93       	push	r28
    6ce4:	df 93       	push	r29
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    6ce6:	90 91 dc 0c 	lds	r25, 0x0CDC
    6cea:	99 23       	and	r25, r25
    6cec:	e9 f1       	breq	.+122    	; 0x6d68 <LBRotateSprites+0x86>
    6cee:	e5 e0       	ldi	r30, 0x05	; 5
    6cf0:	f5 e0       	ldi	r31, 0x05	; 5
    6cf2:	28 ec       	ldi	r18, 0xC8	; 200
    6cf4:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    6cf6:	88 23       	and	r24, r24
    6cf8:	89 f1       	breq	.+98     	; 0x6d5c <LBRotateSprites+0x7a>
		{
			sprites[counter].flags = extendedSprites[--mappedSpriteCount].flags;
    6cfa:	af ef       	ldi	r26, 0xFF	; 255
    6cfc:	a8 0f       	add	r26, r24
    6cfe:	34 e0       	ldi	r19, 0x04	; 4
    6d00:	a3 9f       	mul	r26, r19
    6d02:	d0 01       	movw	r26, r0
    6d04:	11 24       	eor	r1, r1
    6d06:	a7 5a       	subi	r26, 0xA7	; 167
    6d08:	b1 4f       	sbci	r27, 0xF1	; 241
    6d0a:	13 96       	adiw	r26, 0x03	; 3
    6d0c:	3c 91       	ld	r19, X
    6d0e:	30 83       	st	Z, r19
    6d10:	ef 01       	movw	r28, r30
    6d12:	21 97       	sbiw	r28, 0x01	; 1
			sprites[counter].tileIndex = extendedSprites[--mappedSpriteCount].tileIndex;
    6d14:	ae ef       	ldi	r26, 0xFE	; 254
    6d16:	a8 0f       	add	r26, r24
    6d18:	34 e0       	ldi	r19, 0x04	; 4
    6d1a:	a3 9f       	mul	r26, r19
    6d1c:	d0 01       	movw	r26, r0
    6d1e:	11 24       	eor	r1, r1
    6d20:	a7 5a       	subi	r26, 0xA7	; 167
    6d22:	b1 4f       	sbci	r27, 0xF1	; 241
    6d24:	12 96       	adiw	r26, 0x02	; 2
    6d26:	3c 91       	ld	r19, X
    6d28:	38 83       	st	Y, r19
    6d2a:	22 97       	sbiw	r28, 0x02	; 2
			sprites[counter].x = extendedSprites[--mappedSpriteCount].x;
    6d2c:	ad ef       	ldi	r26, 0xFD	; 253
    6d2e:	a8 0f       	add	r26, r24
    6d30:	34 e0       	ldi	r19, 0x04	; 4
    6d32:	a3 9f       	mul	r26, r19
    6d34:	d0 01       	movw	r26, r0
    6d36:	11 24       	eor	r1, r1
    6d38:	a7 5a       	subi	r26, 0xA7	; 167
    6d3a:	b1 4f       	sbci	r27, 0xF1	; 241
    6d3c:	3c 91       	ld	r19, X
    6d3e:	38 83       	st	Y, r19
			sprites[counter].y = extendedSprites[--mappedSpriteCount].y;
    6d40:	84 50       	subi	r24, 0x04	; 4
    6d42:	21 96       	adiw	r28, 0x01	; 1
    6d44:	34 e0       	ldi	r19, 0x04	; 4
    6d46:	83 9f       	mul	r24, r19
    6d48:	d0 01       	movw	r26, r0
    6d4a:	11 24       	eor	r1, r1
    6d4c:	a7 5a       	subi	r26, 0xA7	; 167
    6d4e:	b1 4f       	sbci	r27, 0xF1	; 241
    6d50:	11 96       	adiw	r26, 0x01	; 1
    6d52:	3c 91       	ld	r19, X
    6d54:	38 83       	st	Y, r19
    6d56:	34 96       	adiw	r30, 0x04	; 4
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    6d58:	82 13       	cpse	r24, r18
    6d5a:	cd cf       	rjmp	.-102    	; 0x6cf6 <LBRotateSprites+0x14>
			sprites[counter].x = extendedSprites[counter].x;
			sprites[counter].y = extendedSprites[counter].y;
			counter++;
		}
	}
	swapped = swapped & 1;
    6d5c:	91 70       	andi	r25, 0x01	; 1
    6d5e:	90 93 dc 0c 	sts	0x0CDC, r25
}
    6d62:	df 91       	pop	r29
    6d64:	cf 91       	pop	r28
    6d66:	08 95       	ret
    6d68:	40 e0       	ldi	r20, 0x00	; 0
    6d6a:	50 e0       	ldi	r21, 0x00	; 0
    6d6c:	20 e0       	ldi	r18, 0x00	; 0
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    6d6e:	28 17       	cp	r18, r24
    6d70:	a9 f3       	breq	.-22     	; 0x6d5c <LBRotateSprites+0x7a>
    6d72:	da 01       	movw	r26, r20
    6d74:	a7 5a       	subi	r26, 0xA7	; 167
    6d76:	b1 4f       	sbci	r27, 0xF1	; 241
    6d78:	fa 01       	movw	r30, r20
    6d7a:	ee 5f       	subi	r30, 0xFE	; 254
    6d7c:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			sprites[counter].flags = extendedSprites[counter].flags;
    6d7e:	13 96       	adiw	r26, 0x03	; 3
    6d80:	3c 91       	ld	r19, X
    6d82:	13 97       	sbiw	r26, 0x03	; 3
    6d84:	33 83       	std	Z+3, r19	; 0x03
			sprites[counter].tileIndex = extendedSprites[counter].tileIndex;
    6d86:	12 96       	adiw	r26, 0x02	; 2
    6d88:	3c 91       	ld	r19, X
    6d8a:	12 97       	sbiw	r26, 0x02	; 2
    6d8c:	32 83       	std	Z+2, r19	; 0x02
			sprites[counter].x = extendedSprites[counter].x;
    6d8e:	3c 91       	ld	r19, X
    6d90:	30 83       	st	Z, r19
			sprites[counter].y = extendedSprites[counter].y;
    6d92:	11 96       	adiw	r26, 0x01	; 1
    6d94:	3c 91       	ld	r19, X
    6d96:	31 83       	std	Z+1, r19	; 0x01
			counter++;
    6d98:	2f 5f       	subi	r18, 0xFF	; 255
    6d9a:	4c 5f       	subi	r20, 0xFC	; 252
    6d9c:	5f 4f       	sbci	r21, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    6d9e:	2e 30       	cpi	r18, 0x0E	; 14
    6da0:	31 f7       	brne	.-52     	; 0x6d6e <LBRotateSprites+0x8c>
    6da2:	dc cf       	rjmp	.-72     	; 0x6d5c <LBRotateSprites+0x7a>

00006da4 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    6da4:	fa 01       	movw	r30, r20
    6da6:	32 96       	adiw	r30, 0x02	; 2
    6da8:	44 91       	lpm	r20, Z
    6daa:	50 e0       	ldi	r21, 0x00	; 0
    6dac:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <SetTile>

00006db0 <init_game_state>:
char* prone_anim[1];
char* run_anim[4];

void init_game_state()
{
	game.camera_x = 0;
    6db0:	e0 e9       	ldi	r30, 0x90	; 144
    6db2:	fd e0       	ldi	r31, 0x0D	; 13
    6db4:	15 86       	std	Z+13, r1	; 0x0d
    6db6:	14 86       	std	Z+12, r1	; 0x0c
	game.camera_y = 0;
    6db8:	17 86       	std	Z+15, r1	; 0x0f
    6dba:	16 86       	std	Z+14, r1	; 0x0e
	game.current_level = 0;
    6dbc:	11 82       	std	Z+1, r1	; 0x01
	game.current_screen = 0;
    6dbe:	10 82       	st	Z, r1
	game.paused = 0;
    6dc0:	12 82       	std	Z+2, r1	; 0x02
	game.selection = 0;
    6dc2:	13 82       	std	Z+3, r1	; 0x03
	game.scroll_x = 0;
    6dc4:	14 82       	std	Z+4, r1	; 0x04
	game.scroll_y = 0;
    6dc6:	15 82       	std	Z+5, r1	; 0x05
	game.scroll_src_x=29;
    6dc8:	8d e1       	ldi	r24, 0x1D	; 29
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	91 87       	std	Z+9, r25	; 0x09
    6dce:	80 87       	std	Z+8, r24	; 0x08
    game.scroll_dest_x=29;
    6dd0:	86 83       	std	Z+6, r24	; 0x06
	game.scroll_src_y=27;
    6dd2:	8b e1       	ldi	r24, 0x1B	; 27
    6dd4:	90 e0       	ldi	r25, 0x00	; 0
    6dd6:	93 87       	std	Z+11, r25	; 0x0b
    6dd8:	82 87       	std	Z+10, r24	; 0x0a
    game.scroll_dest_y=27;
    6dda:	87 83       	std	Z+7, r24	; 0x07
	game.player.active_shots = 0;
    6ddc:	11 a2       	std	Z+33, r1	; 0x21
	game.player.flags = IDLE;
    6dde:	88 e0       	ldi	r24, 0x08	; 8
    6de0:	82 a3       	std	Z+34, r24	; 0x22
	game.player.grace_frame = 0;
    6de2:	13 a2       	std	Z+35, r1	; 0x23
	game.player.shared.gravity = 0;
    6de4:	10 a2       	std	Z+32, r1	; 0x20
	game.player.shared.vx = 0;
    6de6:	10 8a       	std	Z+16, r1	; 0x10
    6de8:	11 8a       	std	Z+17, r1	; 0x11
    6dea:	12 8a       	std	Z+18, r1	; 0x12
    6dec:	13 8a       	std	Z+19, r1	; 0x13
	game.player.shared.vy = 0;
    6dee:	14 8a       	std	Z+20, r1	; 0x14
    6df0:	15 8a       	std	Z+21, r1	; 0x15
    6df2:	16 8a       	std	Z+22, r1	; 0x16
    6df4:	17 8a       	std	Z+23, r1	; 0x17
	
	game.player.idle.anim_count = 1;
    6df6:	81 e0       	ldi	r24, 0x01	; 1
    6df8:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.current_anim = 0;
    6dfc:	10 92 28 0e 	sts	0x0E28, r1
	game.player.idle.frame_count = 0;
    6e00:	10 92 2b 0e 	sts	0x0E2B, r1
	game.player.idle.frames_per_anim = 1;
    6e04:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.looped = 0;
    6e08:	10 92 2c 0e 	sts	0x0E2C, r1
	game.player.idle.reversing = 0;
    6e0c:	10 92 2d 0e 	sts	0x0E2D, r1
	game.player.idle.anims = idle_anim;
    6e10:	e1 ed       	ldi	r30, 0xD1	; 209
    6e12:	fe e0       	ldi	r31, 0x0E	; 14
    6e14:	f0 93 2f 0e 	sts	0x0E2F, r31
    6e18:	e0 93 2e 0e 	sts	0x0E2E, r30
	game.player.idle.anims[0] = (char*) map_hero_idle;
    6e1c:	25 e1       	ldi	r18, 0x15	; 21
    6e1e:	3a e2       	ldi	r19, 0x2A	; 42
    6e20:	31 83       	std	Z+1, r19	; 0x01
    6e22:	20 83       	st	Z, r18
	
	game.player.jump.anim_count = 1;
    6e24:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.current_anim = 0;
    6e28:	10 92 38 0e 	sts	0x0E38, r1
	game.player.jump.frame_count = 0;
    6e2c:	10 92 3b 0e 	sts	0x0E3B, r1
	game.player.jump.frames_per_anim = 1;
    6e30:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.looped = 0;
    6e34:	10 92 3c 0e 	sts	0x0E3C, r1
	game.player.jump.reversing = 0;
    6e38:	10 92 3d 0e 	sts	0x0E3D, r1
	game.player.jump.anims = jump_anim;
    6e3c:	ee e6       	ldi	r30, 0x6E	; 110
    6e3e:	fd e0       	ldi	r31, 0x0D	; 13
    6e40:	f0 93 3f 0e 	sts	0x0E3F, r31
    6e44:	e0 93 3e 0e 	sts	0x0E3E, r30
	game.player.jump.anims[0] = (char*) map_hero_jump;
    6e48:	2d ee       	ldi	r18, 0xED	; 237
    6e4a:	39 e2       	ldi	r19, 0x29	; 41
    6e4c:	31 83       	std	Z+1, r19	; 0x01
    6e4e:	20 83       	st	Z, r18
	
	game.player.prone.anim_count = 1;
    6e50:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.current_anim = 0;
    6e54:	10 92 40 0e 	sts	0x0E40, r1
	game.player.prone.frame_count = 0;
    6e58:	10 92 43 0e 	sts	0x0E43, r1
	game.player.prone.frames_per_anim = 1;
    6e5c:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.looped = 0;
    6e60:	10 92 44 0e 	sts	0x0E44, r1
	game.player.prone.reversing = 0;
    6e64:	10 92 45 0e 	sts	0x0E45, r1
	game.player.prone.anims = prone_anim;
    6e68:	e7 e5       	ldi	r30, 0x57	; 87
    6e6a:	fe e0       	ldi	r31, 0x0E	; 14
    6e6c:	f0 93 47 0e 	sts	0x0E47, r31
    6e70:	e0 93 46 0e 	sts	0x0E46, r30
	game.player.prone.anims[0] = (char*) map_hero_prone;
    6e74:	88 ee       	ldi	r24, 0xE8	; 232
    6e76:	99 e2       	ldi	r25, 0x29	; 41
    6e78:	91 83       	std	Z+1, r25	; 0x01
    6e7a:	80 83       	st	Z, r24
	
	game.player.run.anim_count = 4;
    6e7c:	84 e0       	ldi	r24, 0x04	; 4
    6e7e:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.current_anim = 0;
    6e82:	10 92 30 0e 	sts	0x0E30, r1
	game.player.run.frame_count = 0;
    6e86:	10 92 33 0e 	sts	0x0E33, r1
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    6e8a:	8c e0       	ldi	r24, 0x0C	; 12
    6e8c:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.looped = 0;
    6e90:	10 92 34 0e 	sts	0x0E34, r1
	game.player.run.reversing = 0;
    6e94:	10 92 35 0e 	sts	0x0E35, r1
	game.player.run.anims = run_anim;
    6e98:	e9 ec       	ldi	r30, 0xC9	; 201
    6e9a:	fe e0       	ldi	r31, 0x0E	; 14
    6e9c:	f0 93 37 0e 	sts	0x0E37, r31
    6ea0:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_step_0;
    6ea4:	8d e0       	ldi	r24, 0x0D	; 13
    6ea6:	9a e2       	ldi	r25, 0x2A	; 42
    6ea8:	91 83       	std	Z+1, r25	; 0x01
    6eaa:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    6eac:	85 e0       	ldi	r24, 0x05	; 5
    6eae:	9a e2       	ldi	r25, 0x2A	; 42
    6eb0:	93 83       	std	Z+3, r25	; 0x03
    6eb2:	82 83       	std	Z+2, r24	; 0x02
	game.player.run.anims[2] = (char*) map_hero_step_2;
    6eb4:	8d ef       	ldi	r24, 0xFD	; 253
    6eb6:	99 e2       	ldi	r25, 0x29	; 41
    6eb8:	95 83       	std	Z+5, r25	; 0x05
    6eba:	84 83       	std	Z+4, r24	; 0x04
	game.player.run.anims[3] = (char*) map_hero_step_3;
    6ebc:	85 ef       	ldi	r24, 0xF5	; 245
    6ebe:	99 e2       	ldi	r25, 0x29	; 41
    6ec0:	97 83       	std	Z+7, r25	; 0x07
    6ec2:	86 83       	std	Z+6, r24	; 0x06
    6ec4:	08 95       	ret

00006ec6 <render_level_tile>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    6ec6:	0f 93       	push	r16
    6ec8:	1f 93       	push	r17
    6eca:	e8 2f       	mov	r30, r24
    6ecc:	86 2f       	mov	r24, r22
    6ece:	64 2f       	mov	r22, r20
	switch (level_tile)
    6ed0:	0e 2f       	mov	r16, r30
    6ed2:	10 e0       	ldi	r17, 0x00	; 0
    6ed4:	07 30       	cpi	r16, 0x07	; 7
    6ed6:	11 05       	cpc	r17, r1
    6ed8:	e8 f4       	brcc	.+58     	; 0x6f14 <render_level_tile+0x4e>
    6eda:	f8 01       	movw	r30, r16
    6edc:	e8 5c       	subi	r30, 0xC8	; 200
    6ede:	ff 4f       	sbci	r31, 0xFF	; 255
    6ee0:	0c 94 a9 41 	jmp	0x8352	; 0x8352 <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    6ee4:	49 e0       	ldi	r20, 0x09	; 9
    6ee6:	53 e4       	ldi	r21, 0x43	; 67
    6ee8:	11 c0       	rjmp	.+34     	; 0x6f0c <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    6eea:	45 e1       	ldi	r20, 0x15	; 21
    6eec:	53 e4       	ldi	r21, 0x43	; 67
    6eee:	0e c0       	rjmp	.+28     	; 0x6f0c <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    6ef0:	48 e1       	ldi	r20, 0x18	; 24
    6ef2:	53 e4       	ldi	r21, 0x43	; 67
    6ef4:	0b c0       	rjmp	.+22     	; 0x6f0c <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    6ef6:	42 e1       	ldi	r20, 0x12	; 18
    6ef8:	53 e4       	ldi	r21, 0x43	; 67
    6efa:	08 c0       	rjmp	.+16     	; 0x6f0c <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    6efc:	4f e0       	ldi	r20, 0x0F	; 15
    6efe:	53 e4       	ldi	r21, 0x43	; 67
    6f00:	05 c0       	rjmp	.+10     	; 0x6f0c <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    6f02:	46 e0       	ldi	r20, 0x06	; 6
    6f04:	53 e4       	ldi	r21, 0x43	; 67
    6f06:	02 c0       	rjmp	.+4      	; 0x6f0c <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    6f08:	4c e0       	ldi	r20, 0x0C	; 12
    6f0a:	53 e4       	ldi	r21, 0x43	; 67
	}
}
    6f0c:	1f 91       	pop	r17
    6f0e:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    6f10:	0c 94 d2 36 	jmp	0x6da4	; 0x6da4 <LBDrawTile>
	}
}
    6f14:	1f 91       	pop	r17
    6f16:	0f 91       	pop	r16
    6f18:	08 95       	ret

00006f1a <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    6f1a:	1f 93       	push	r17
    6f1c:	cf 93       	push	r28
    6f1e:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    6f20:	d0 e0       	ldi	r29, 0x00	; 0
    6f22:	10 e2       	ldi	r17, 0x20	; 32
    6f24:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    6f26:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    6f28:	c1 17       	cp	r28, r17
    6f2a:	41 f0       	breq	.+16     	; 0x6f3c <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    6f2c:	40 e0       	ldi	r20, 0x00	; 0
    6f2e:	50 e0       	ldi	r21, 0x00	; 0
    6f30:	6c 2f       	mov	r22, r28
    6f32:	8d 2f       	mov	r24, r29
    6f34:	0e 94 28 27 	call	0x4e50	; 0x4e50 <SetTile>
    6f38:	cf 5f       	subi	r28, 0xFF	; 255
    6f3a:	f6 cf       	rjmp	.-20     	; 0x6f28 <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    6f3c:	df 5f       	subi	r29, 0xFF	; 255
    6f3e:	dc 31       	cpi	r29, 0x1C	; 28
    6f40:	91 f7       	brne	.-28     	; 0x6f26 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    6f42:	df 91       	pop	r29
    6f44:	cf 91       	pop	r28
    6f46:	1f 91       	pop	r17
    6f48:	08 95       	ret

00006f4a <read_level_byte>:
{
	return pgm_read_byte(&level_data[index]);
}
#else
u8 read_level_byte(u16 index)
{
    6f4a:	43 e5       	ldi	r20, 0x53	; 83
    6f4c:	5b e1       	ldi	r21, 0x1B	; 27
	u16 rlength = 0;
	u16 cumulative = 0;
    6f4e:	60 e0       	ldi	r22, 0x00	; 0
    6f50:	70 e0       	ldi	r23, 0x00	; 0
    6f52:	9a 01       	movw	r18, r20
    6f54:	23 55       	subi	r18, 0x53	; 83
    6f56:	3b 41       	sbci	r19, 0x1B	; 27
	u16 counter = 0;
	
	while (1)
	{
		rlength = pgm_read_word(&level_data[counter]);
    6f58:	fa 01       	movw	r30, r20
    6f5a:	a5 91       	lpm	r26, Z+
    6f5c:	b4 91       	lpm	r27, Z
		cumulative += rlength;
    6f5e:	6a 0f       	add	r22, r26
    6f60:	7b 1f       	adc	r23, r27
    6f62:	4d 5f       	subi	r20, 0xFD	; 253
    6f64:	5f 4f       	sbci	r21, 0xFF	; 255
		if (cumulative > index)
    6f66:	86 17       	cp	r24, r22
    6f68:	97 07       	cpc	r25, r23
    6f6a:	98 f7       	brcc	.-26     	; 0x6f52 <read_level_byte+0x8>
		{
			return pgm_read_byte(&level_data[counter+2]);
    6f6c:	f9 01       	movw	r30, r18
    6f6e:	eb 5a       	subi	r30, 0xAB	; 171
    6f70:	f4 4e       	sbci	r31, 0xE4	; 228
    6f72:	84 91       	lpm	r24, Z
		}
		counter += 3;
	}
	return 0;
}
    6f74:	08 95       	ret

00006f76 <get_camera_x>:

#endif

u8 get_camera_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0);
    6f76:	25 e0       	ldi	r18, 0x05	; 5
    6f78:	3e ef       	ldi	r19, 0xFE	; 254
    6f7a:	48 2f       	mov	r20, r24
    6f7c:	42 9f       	mul	r20, r18
    6f7e:	c0 01       	movw	r24, r0
    6f80:	43 9f       	mul	r20, r19
    6f82:	90 0d       	add	r25, r0
    6f84:	11 24       	eor	r1, r1
    6f86:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <read_level_byte>

00006f8a <get_camera_y>:
}

u8 get_camera_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1);
    6f8a:	25 e0       	ldi	r18, 0x05	; 5
    6f8c:	3e ef       	ldi	r19, 0xFE	; 254
    6f8e:	48 2f       	mov	r20, r24
    6f90:	42 9f       	mul	r20, r18
    6f92:	c0 01       	movw	r24, r0
    6f94:	43 9f       	mul	r20, r19
    6f96:	90 0d       	add	r25, r0
    6f98:	11 24       	eor	r1, r1
    6f9a:	01 96       	adiw	r24, 0x01	; 1
    6f9c:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <read_level_byte>

00006fa0 <get_hero_spawn_x>:
}

u8 get_hero_spawn_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2);
    6fa0:	25 e0       	ldi	r18, 0x05	; 5
    6fa2:	3e ef       	ldi	r19, 0xFE	; 254
    6fa4:	48 2f       	mov	r20, r24
    6fa6:	42 9f       	mul	r20, r18
    6fa8:	c0 01       	movw	r24, r0
    6faa:	43 9f       	mul	r20, r19
    6fac:	90 0d       	add	r25, r0
    6fae:	11 24       	eor	r1, r1
    6fb0:	02 96       	adiw	r24, 0x02	; 2
    6fb2:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <read_level_byte>

00006fb6 <get_hero_spawn_y>:
}

u8 get_hero_spawn_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3);
    6fb6:	25 e0       	ldi	r18, 0x05	; 5
    6fb8:	3e ef       	ldi	r19, 0xFE	; 254
    6fba:	48 2f       	mov	r20, r24
    6fbc:	42 9f       	mul	r20, r18
    6fbe:	c0 01       	movw	r24, r0
    6fc0:	43 9f       	mul	r20, r19
    6fc2:	90 0d       	add	r25, r0
    6fc4:	11 24       	eor	r1, r1
    6fc6:	03 96       	adiw	r24, 0x03	; 3
    6fc8:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <read_level_byte>

00006fcc <get_level_tile>:
}

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    6fcc:	6c 5f       	subi	r22, 0xFC	; 252
    6fce:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x));
    6fd0:	9f ef       	ldi	r25, 0xFF	; 255
    6fd2:	94 9f       	mul	r25, r20
    6fd4:	90 01       	movw	r18, r0
    6fd6:	95 9f       	mul	r25, r21
    6fd8:	30 0d       	add	r19, r0
    6fda:	11 24       	eor	r1, r1
    6fdc:	62 0f       	add	r22, r18
    6fde:	73 1f       	adc	r23, r19
    6fe0:	25 e0       	ldi	r18, 0x05	; 5
    6fe2:	3e ef       	ldi	r19, 0xFE	; 254
    6fe4:	48 2f       	mov	r20, r24
    6fe6:	42 9f       	mul	r20, r18
    6fe8:	c0 01       	movw	r24, r0
    6fea:	43 9f       	mul	r20, r19
    6fec:	90 0d       	add	r25, r0
    6fee:	11 24       	eor	r1, r1
    6ff0:	86 0f       	add	r24, r22
    6ff2:	97 1f       	adc	r25, r23
    6ff4:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <read_level_byte>

00006ff8 <render_camera_view>:
}

void render_camera_view()
{
    6ff8:	7f 92       	push	r7
    6ffa:	8f 92       	push	r8
    6ffc:	9f 92       	push	r9
    6ffe:	af 92       	push	r10
    7000:	bf 92       	push	r11
    7002:	cf 92       	push	r12
    7004:	df 92       	push	r13
    7006:	ef 92       	push	r14
    7008:	ff 92       	push	r15
    700a:	0f 93       	push	r16
    700c:	1f 93       	push	r17
    700e:	cf 93       	push	r28
    7010:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    7012:	c0 91 9c 0d 	lds	r28, 0x0D9C
    7016:	d0 91 9d 0d 	lds	r29, 0x0D9D
    701a:	83 e0       	ldi	r24, 0x03	; 3
    701c:	d6 95       	lsr	r29
    701e:	c7 95       	ror	r28
    7020:	8a 95       	dec	r24
    7022:	e1 f7       	brne	.-8      	; 0x701c <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    7024:	c0 90 9e 0d 	lds	r12, 0x0D9E
    7028:	d0 90 9f 0d 	lds	r13, 0x0D9F
    702c:	93 e0       	ldi	r25, 0x03	; 3
    702e:	d6 94       	lsr	r13
    7030:	c7 94       	ror	r12
    7032:	9a 95       	dec	r25
    7034:	e1 f7       	brne	.-8      	; 0x702e <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7036:	8e 01       	movw	r16, r28
    7038:	5e 01       	movw	r10, r28
    703a:	8c e1       	ldi	r24, 0x1C	; 28
    703c:	a8 0e       	add	r10, r24
    703e:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7040:	46 01       	movw	r8, r12
    7042:	8a e1       	ldi	r24, 0x1A	; 26
    7044:	88 0e       	add	r8, r24
    7046:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7048:	a0 16       	cp	r10, r16
    704a:	b1 06       	cpc	r11, r17
    704c:	c0 f0       	brcs	.+48     	; 0x707e <render_camera_view+0x86>
    704e:	76 01       	movw	r14, r12
    7050:	70 2e       	mov	r7, r16
    7052:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7054:	8e 14       	cp	r8, r14
    7056:	9f 04       	cpc	r9, r15
    7058:	78 f0       	brcs	.+30     	; 0x7078 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    705a:	a7 01       	movw	r20, r14
    705c:	b8 01       	movw	r22, r16
    705e:	80 91 91 0d 	lds	r24, 0x0D91
    7062:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7066:	4e 2d       	mov	r20, r14
    7068:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    706a:	67 2d       	mov	r22, r7
    706c:	0e 94 63 37 	call	0x6ec6	; 0x6ec6 <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7070:	8f ef       	ldi	r24, 0xFF	; 255
    7072:	e8 1a       	sub	r14, r24
    7074:	f8 0a       	sbc	r15, r24
    7076:	ee cf       	rjmp	.-36     	; 0x7054 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7078:	0f 5f       	subi	r16, 0xFF	; 255
    707a:	1f 4f       	sbci	r17, 0xFF	; 255
    707c:	e5 cf       	rjmp	.-54     	; 0x7048 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    707e:	df 91       	pop	r29
    7080:	cf 91       	pop	r28
    7082:	1f 91       	pop	r17
    7084:	0f 91       	pop	r16
    7086:	ff 90       	pop	r15
    7088:	ef 90       	pop	r14
    708a:	df 90       	pop	r13
    708c:	cf 90       	pop	r12
    708e:	bf 90       	pop	r11
    7090:	af 90       	pop	r10
    7092:	9f 90       	pop	r9
    7094:	8f 90       	pop	r8
    7096:	7f 90       	pop	r7
    7098:	08 95       	ret

0000709a <append_tile_column>:

void append_tile_column()
{
    709a:	0f 93       	push	r16
    709c:	1f 93       	push	r17
    709e:	cf 93       	push	r28
    70a0:	df 93       	push	r29
    70a2:	c0 e0       	ldi	r28, 0x00	; 0
    70a4:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    70a6:	0e e1       	ldi	r16, 0x1E	; 30
    70a8:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    70aa:	40 91 9e 0d 	lds	r20, 0x0D9E
    70ae:	50 91 9f 0d 	lds	r21, 0x0D9F
    70b2:	83 e0       	ldi	r24, 0x03	; 3
    70b4:	56 95       	lsr	r21
    70b6:	47 95       	ror	r20
    70b8:	8a 95       	dec	r24
    70ba:	e1 f7       	brne	.-8      	; 0x70b4 <append_tile_column+0x1a>
    70bc:	4c 0f       	add	r20, r28
    70be:	5d 1f       	adc	r21, r29
    70c0:	60 91 98 0d 	lds	r22, 0x0D98
    70c4:	70 91 99 0d 	lds	r23, 0x0D99
    70c8:	80 91 91 0d 	lds	r24, 0x0D91
    70cc:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    70d0:	28 2f       	mov	r18, r24
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    70d2:	90 91 9d 0c 	lds	r25, 0x0C9D
    70d6:	96 95       	lsr	r25
    70d8:	96 95       	lsr	r25
    70da:	96 95       	lsr	r25
    70dc:	ae 01       	movw	r20, r28
    70de:	49 0f       	add	r20, r25
    70e0:	51 1d       	adc	r21, r1
    70e2:	ca 01       	movw	r24, r20
    70e4:	b8 01       	movw	r22, r16
    70e6:	0e 94 95 41 	call	0x832a	; 0x832a <__divmodhi4>
    70ea:	48 2f       	mov	r20, r24
    70ec:	60 91 96 0d 	lds	r22, 0x0D96
    70f0:	82 2f       	mov	r24, r18
    70f2:	0e 94 63 37 	call	0x6ec6	; 0x6ec6 <render_level_tile>
    70f6:	21 96       	adiw	r28, 0x01	; 1

void append_tile_column()
{
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    70f8:	cb 31       	cpi	r28, 0x1B	; 27
    70fa:	d1 05       	cpc	r29, r1
    70fc:	b1 f6       	brne	.-84     	; 0x70aa <append_tile_column+0x10>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    }
	
    game.scroll_src_x++;
    70fe:	80 91 98 0d 	lds	r24, 0x0D98
    7102:	90 91 99 0d 	lds	r25, 0x0D99
    7106:	01 96       	adiw	r24, 0x01	; 1
    7108:	90 93 99 0d 	sts	0x0D99, r25
    710c:	80 93 98 0d 	sts	0x0D98, r24
	game.scroll_dest_x++;
    7110:	80 91 96 0d 	lds	r24, 0x0D96
    7114:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7116:	80 32       	cpi	r24, 0x20	; 32
    7118:	18 f4       	brcc	.+6      	; 0x7120 <append_tile_column+0x86>
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    711a:	80 93 96 0d 	sts	0x0D96, r24
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <append_tile_column+0x8a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7120:	10 92 96 0d 	sts	0x0D96, r1
}
    7124:	df 91       	pop	r29
    7126:	cf 91       	pop	r28
    7128:	1f 91       	pop	r17
    712a:	0f 91       	pop	r16
    712c:	08 95       	ret

0000712e <append_tile_row>:

void append_tile_row()
{
    712e:	cf 93       	push	r28
    7130:	df 93       	push	r29
    7132:	c0 e0       	ldi	r28, 0x00	; 0
    7134:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    7136:	40 91 9a 0d 	lds	r20, 0x0D9A
    713a:	50 91 9b 0d 	lds	r21, 0x0D9B
    713e:	60 91 9c 0d 	lds	r22, 0x0D9C
    7142:	70 91 9d 0d 	lds	r23, 0x0D9D
    7146:	83 e0       	ldi	r24, 0x03	; 3
    7148:	76 95       	lsr	r23
    714a:	67 95       	ror	r22
    714c:	8a 95       	dec	r24
    714e:	e1 f7       	brne	.-8      	; 0x7148 <append_tile_row+0x1a>
    7150:	6c 0f       	add	r22, r28
    7152:	7d 1f       	adc	r23, r29
    7154:	80 91 91 0d 	lds	r24, 0x0D91
    7158:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    715c:	60 91 9c 0c 	lds	r22, 0x0C9C
    7160:	66 95       	lsr	r22
    7162:	66 95       	lsr	r22
    7164:	66 95       	lsr	r22
    7166:	6c 0f       	add	r22, r28
    7168:	6f 71       	andi	r22, 0x1F	; 31
    716a:	40 91 97 0d 	lds	r20, 0x0D97
    716e:	0e 94 63 37 	call	0x6ec6	; 0x6ec6 <render_level_tile>
    7172:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    7174:	cd 31       	cpi	r28, 0x1D	; 29
    7176:	d1 05       	cpc	r29, r1
    7178:	f1 f6       	brne	.-68     	; 0x7136 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    717a:	80 91 9a 0d 	lds	r24, 0x0D9A
    717e:	90 91 9b 0d 	lds	r25, 0x0D9B
    7182:	01 96       	adiw	r24, 0x01	; 1
    7184:	90 93 9b 0d 	sts	0x0D9B, r25
    7188:	80 93 9a 0d 	sts	0x0D9A, r24
	game.scroll_dest_y++;
    718c:	80 91 97 0d 	lds	r24, 0x0D97
    7190:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    7192:	8e 31       	cpi	r24, 0x1E	; 30
    7194:	18 f4       	brcc	.+6      	; 0x719c <append_tile_row+0x6e>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    7196:	80 93 97 0d 	sts	0x0D97, r24
    719a:	02 c0       	rjmp	.+4      	; 0x71a0 <append_tile_row+0x72>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    719c:	10 92 97 0d 	sts	0x0D97, r1
}
    71a0:	df 91       	pop	r29
    71a2:	cf 91       	pop	r28
    71a4:	08 95       	ret

000071a6 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    71a6:	80 91 9c 0d 	lds	r24, 0x0D9C
    71aa:	90 91 9d 0d 	lds	r25, 0x0D9D
    71ae:	01 96       	adiw	r24, 0x01	; 1
    71b0:	90 93 9d 0d 	sts	0x0D9D, r25
    71b4:	80 93 9c 0d 	sts	0x0D9C, r24
	Scroll(1,0);
    71b8:	60 e0       	ldi	r22, 0x00	; 0
    71ba:	81 e0       	ldi	r24, 0x01	; 1
    71bc:	0e 94 28 34 	call	0x6850	; 0x6850 <Scroll>
	if (++game.scroll_x == 8)
    71c0:	80 91 94 0d 	lds	r24, 0x0D94
    71c4:	8f 5f       	subi	r24, 0xFF	; 255
    71c6:	88 30       	cpi	r24, 0x08	; 8
    71c8:	19 f0       	breq	.+6      	; 0x71d0 <move_camera_x+0x2a>
    71ca:	80 93 94 0d 	sts	0x0D94, r24
    71ce:	08 95       	ret
	{
		game.scroll_x = 0;
    71d0:	10 92 94 0d 	sts	0x0D94, r1
		append_tile_column();
    71d4:	0c 94 4d 38 	jmp	0x709a	; 0x709a <append_tile_column>

000071d8 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    71d8:	80 91 9e 0d 	lds	r24, 0x0D9E
    71dc:	90 91 9f 0d 	lds	r25, 0x0D9F
    71e0:	02 96       	adiw	r24, 0x02	; 2
    71e2:	90 93 9f 0d 	sts	0x0D9F, r25
    71e6:	80 93 9e 0d 	sts	0x0D9E, r24
	game.scroll_y+=2;
    71ea:	80 91 95 0d 	lds	r24, 0x0D95
    71ee:	8e 5f       	subi	r24, 0xFE	; 254
    71f0:	80 93 95 0d 	sts	0x0D95, r24
	Scroll(0,2);
    71f4:	62 e0       	ldi	r22, 0x02	; 2
    71f6:	80 e0       	ldi	r24, 0x00	; 0
    71f8:	0e 94 28 34 	call	0x6850	; 0x6850 <Scroll>
	if (game.scroll_y == 8)
    71fc:	80 91 95 0d 	lds	r24, 0x0D95
    7200:	88 30       	cpi	r24, 0x08	; 8
    7202:	21 f4       	brne	.+8      	; 0x720c <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    7204:	10 92 95 0d 	sts	0x0D95, r1
		append_tile_row();
    7208:	0c 94 97 38 	jmp	0x712e	; 0x712e <append_tile_row>
    720c:	08 95       	ret

0000720e <load_level>:
	}
}

void load_level(u8 index)
{	
    720e:	1f 93       	push	r17
    7210:	cf 93       	push	r28
    7212:	df 93       	push	r29
    7214:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    7216:	e9 e9       	ldi	r30, 0x99	; 153
    7218:	fc e0       	ldi	r31, 0x0C	; 12
    721a:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    721c:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    721e:	8e e1       	ldi	r24, 0x1E	; 30
    7220:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    7222:	85 e3       	ldi	r24, 0x35	; 53
    7224:	9a e2       	ldi	r25, 0x2A	; 42
    7226:	92 83       	std	Z+2, r25	; 0x02
    7228:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    722a:	82 e0       	ldi	r24, 0x02	; 2
    722c:	80 83       	st	Z, r24
	clear_overlay(2);
    722e:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <clear_overlay>
	game.current_level = index;
    7232:	c0 e9       	ldi	r28, 0x90	; 144
    7234:	dd e0       	ldi	r29, 0x0D	; 13
    7236:	19 83       	std	Y+1, r17	; 0x01
	game.camera_x = get_camera_x(index);
    7238:	81 2f       	mov	r24, r17
    723a:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <get_camera_x>
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	9d 87       	std	Y+13, r25	; 0x0d
    7242:	8c 87       	std	Y+12, r24	; 0x0c
	game.camera_y = get_camera_y(index);
    7244:	81 2f       	mov	r24, r17
    7246:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <get_camera_y>
    724a:	90 e0       	ldi	r25, 0x00	; 0
    724c:	9f 87       	std	Y+15, r25	; 0x0f
    724e:	8e 87       	std	Y+14, r24	; 0x0e
	game.player.shared.x = get_hero_spawn_x(index)*8;
    7250:	81 2f       	mov	r24, r17
    7252:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <get_hero_spawn_x>
    7256:	28 e0       	ldi	r18, 0x08	; 8
    7258:	82 9f       	mul	r24, r18
    725a:	c0 01       	movw	r24, r0
    725c:	11 24       	eor	r1, r1
    725e:	bc 01       	movw	r22, r24
    7260:	88 27       	eor	r24, r24
    7262:	77 fd       	sbrc	r23, 7
    7264:	80 95       	com	r24
    7266:	98 2f       	mov	r25, r24
    7268:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    726c:	68 8f       	std	Y+24, r22	; 0x18
    726e:	79 8f       	std	Y+25, r23	; 0x19
    7270:	8a 8f       	std	Y+26, r24	; 0x1a
    7272:	9b 8f       	std	Y+27, r25	; 0x1b
	game.player.shared.y = get_hero_spawn_y(index)*8;
    7274:	81 2f       	mov	r24, r17
    7276:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <get_hero_spawn_y>
    727a:	28 e0       	ldi	r18, 0x08	; 8
    727c:	82 9f       	mul	r24, r18
    727e:	c0 01       	movw	r24, r0
    7280:	11 24       	eor	r1, r1
    7282:	bc 01       	movw	r22, r24
    7284:	88 27       	eor	r24, r24
    7286:	77 fd       	sbrc	r23, 7
    7288:	80 95       	com	r24
    728a:	98 2f       	mov	r25, r24
    728c:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    7290:	6c 8f       	std	Y+28, r22	; 0x1c
    7292:	7d 8f       	std	Y+29, r23	; 0x1d
    7294:	8e 8f       	std	Y+30, r24	; 0x1e
    7296:	9f 8f       	std	Y+31, r25	; 0x1f
	game.camera_x *= 8;
    7298:	8c 85       	ldd	r24, Y+12	; 0x0c
    729a:	9d 85       	ldd	r25, Y+13	; 0x0d
    729c:	23 e0       	ldi	r18, 0x03	; 3
    729e:	88 0f       	add	r24, r24
    72a0:	99 1f       	adc	r25, r25
    72a2:	2a 95       	dec	r18
    72a4:	e1 f7       	brne	.-8      	; 0x729e <load_level+0x90>
    72a6:	9d 87       	std	Y+13, r25	; 0x0d
    72a8:	8c 87       	std	Y+12, r24	; 0x0c
	game.camera_y *= 8;
    72aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    72ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    72ae:	33 e0       	ldi	r19, 0x03	; 3
    72b0:	88 0f       	add	r24, r24
    72b2:	99 1f       	adc	r25, r25
    72b4:	3a 95       	dec	r19
    72b6:	e1 f7       	brne	.-8      	; 0x72b0 <load_level+0xa2>
    72b8:	9f 87       	std	Y+15, r25	; 0x0f
    72ba:	8e 87       	std	Y+14, r24	; 0x0e
	render_camera_view();
    72bc:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <render_camera_view>
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    72c0:	88 e2       	ldi	r24, 0x28	; 40
    72c2:	9e e0       	ldi	r25, 0x0E	; 14
    72c4:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    72c8:	40 e0       	ldi	r20, 0x00	; 0
    72ca:	bc 01       	movw	r22, r24
    72cc:	80 e0       	ldi	r24, 0x00	; 0
}
    72ce:	df 91       	pop	r29
    72d0:	cf 91       	pop	r28
    72d2:	1f 91       	pop	r17
	game.player.shared.x = get_hero_spawn_x(index)*8;
	game.player.shared.y = get_hero_spawn_y(index)*8;
	game.camera_x *= 8;
	game.camera_y *= 8;
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    72d4:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <LBMapSprite>

000072d8 <solid_tile>:
	load_level(index);
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    72d8:	81 50       	subi	r24, 0x01	; 1
    72da:	84 30       	cpi	r24, 0x04	; 4
    72dc:	10 f0       	brcs	.+4      	; 0x72e2 <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    72de:	80 e0       	ldi	r24, 0x00	; 0
    72e0:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    72e2:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    72e4:	08 95       	ret

000072e6 <on_solid_ground>:

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    72e6:	2f 92       	push	r2
    72e8:	3f 92       	push	r3
    72ea:	4f 92       	push	r4
    72ec:	5f 92       	push	r5
    72ee:	6f 92       	push	r6
    72f0:	7f 92       	push	r7
    72f2:	8f 92       	push	r8
    72f4:	9f 92       	push	r9
    72f6:	af 92       	push	r10
    72f8:	bf 92       	push	r11
    72fa:	cf 92       	push	r12
    72fc:	df 92       	push	r13
    72fe:	ef 92       	push	r14
    7300:	ff 92       	push	r15
    7302:	0f 93       	push	r16
    7304:	1f 93       	push	r17
    7306:	cf 93       	push	r28
    7308:	df 93       	push	r29
    730a:	00 d0       	rcall	.+0      	; 0x730c <on_solid_ground+0x26>
    730c:	00 d0       	rcall	.+0      	; 0x730e <on_solid_ground+0x28>
    730e:	00 d0       	rcall	.+0      	; 0x7310 <on_solid_ground+0x2a>
    7310:	cd b7       	in	r28, 0x3d	; 61
    7312:	de b7       	in	r29, 0x3e	; 62
    7314:	9e 83       	std	Y+6, r25	; 0x06
    7316:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7318:	88 e0       	ldi	r24, 0x08	; 8
    731a:	48 9f       	mul	r20, r24
    731c:	a0 01       	movw	r20, r0
    731e:	11 24       	eor	r1, r1
    7320:	26 2e       	mov	r2, r22
    7322:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    7324:	00 e0       	ldi	r16, 0x00	; 0
    7326:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7328:	ca 01       	movw	r24, r20
    732a:	aa 27       	eor	r26, r26
    732c:	97 fd       	sbrc	r25, 7
    732e:	a0 95       	com	r26
    7330:	ba 2f       	mov	r27, r26
    7332:	89 83       	std	Y+1, r24	; 0x01
    7334:	9a 83       	std	Y+2, r25	; 0x02
    7336:	ab 83       	std	Y+3, r26	; 0x03
    7338:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    733a:	02 15       	cp	r16, r2
    733c:	13 05       	cpc	r17, r3
    733e:	09 f4       	brne	.+2      	; 0x7342 <on_solid_ground+0x5c>
    7340:	81 c0       	rjmp	.+258    	; 0x7444 <on_solid_ground+0x15e>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7342:	69 81       	ldd	r22, Y+1	; 0x01
    7344:	7a 81       	ldd	r23, Y+2	; 0x02
    7346:	8b 81       	ldd	r24, Y+3	; 0x03
    7348:	9c 81       	ldd	r25, Y+4	; 0x04
    734a:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    734e:	4b 01       	movw	r8, r22
    7350:	5c 01       	movw	r10, r24
    7352:	b8 01       	movw	r22, r16
    7354:	88 27       	eor	r24, r24
    7356:	77 fd       	sbrc	r23, 7
    7358:	80 95       	com	r24
    735a:	98 2f       	mov	r25, r24
    735c:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    7360:	6b 01       	movw	r12, r22
    7362:	7c 01       	movw	r14, r24
    7364:	ad 81       	ldd	r26, Y+5	; 0x05
    7366:	be 81       	ldd	r27, Y+6	; 0x06
    7368:	1c 96       	adiw	r26, 0x0c	; 12
    736a:	2d 91       	ld	r18, X+
    736c:	3d 91       	ld	r19, X+
    736e:	4d 91       	ld	r20, X+
    7370:	5c 91       	ld	r21, X
    7372:	1f 97       	sbiw	r26, 0x0f	; 15
    7374:	c5 01       	movw	r24, r10
    7376:	b4 01       	movw	r22, r8
    7378:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    737c:	20 e0       	ldi	r18, 0x00	; 0
    737e:	30 e0       	ldi	r19, 0x00	; 0
    7380:	40 e0       	ldi	r20, 0x00	; 0
    7382:	5e e3       	ldi	r21, 0x3E	; 62
    7384:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7388:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    738c:	2b 01       	movw	r4, r22
    738e:	3c 01       	movw	r6, r24
    7390:	20 e0       	ldi	r18, 0x00	; 0
    7392:	30 e0       	ldi	r19, 0x00	; 0
    7394:	40 e0       	ldi	r20, 0x00	; 0
    7396:	5e e3       	ldi	r21, 0x3E	; 62
    7398:	ed 81       	ldd	r30, Y+5	; 0x05
    739a:	fe 81       	ldd	r31, Y+6	; 0x06
    739c:	60 85       	ldd	r22, Z+8	; 0x08
    739e:	71 85       	ldd	r23, Z+9	; 0x09
    73a0:	82 85       	ldd	r24, Z+10	; 0x0a
    73a2:	93 85       	ldd	r25, Z+11	; 0x0b
    73a4:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    73a8:	a7 01       	movw	r20, r14
    73aa:	96 01       	movw	r18, r12
    73ac:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    73b0:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    73b4:	a2 01       	movw	r20, r4
    73b6:	80 91 91 0d 	lds	r24, 0x0D91
    73ba:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    73be:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    73c0:	ad 81       	ldd	r26, Y+5	; 0x05
    73c2:	be 81       	ldd	r27, Y+6	; 0x06
    73c4:	1c 96       	adiw	r26, 0x0c	; 12
    73c6:	2d 91       	ld	r18, X+
    73c8:	3d 91       	ld	r19, X+
    73ca:	4d 91       	ld	r20, X+
    73cc:	5c 91       	ld	r21, X
    73ce:	1f 97       	sbiw	r26, 0x0f	; 15
    73d0:	c5 01       	movw	r24, r10
    73d2:	b4 01       	movw	r22, r8
    73d4:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    73d8:	20 e0       	ldi	r18, 0x00	; 0
    73da:	30 e0       	ldi	r19, 0x00	; 0
    73dc:	40 e0       	ldi	r20, 0x00	; 0
    73de:	5e e3       	ldi	r21, 0x3E	; 62
    73e0:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    73e4:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    73e8:	4b 01       	movw	r8, r22
    73ea:	5c 01       	movw	r10, r24
    73ec:	20 e0       	ldi	r18, 0x00	; 0
    73ee:	30 e0       	ldi	r19, 0x00	; 0
    73f0:	40 ee       	ldi	r20, 0xE0	; 224
    73f2:	50 e4       	ldi	r21, 0x40	; 64
    73f4:	ed 81       	ldd	r30, Y+5	; 0x05
    73f6:	fe 81       	ldd	r31, Y+6	; 0x06
    73f8:	60 85       	ldd	r22, Z+8	; 0x08
    73fa:	71 85       	ldd	r23, Z+9	; 0x09
    73fc:	82 85       	ldd	r24, Z+10	; 0x0a
    73fe:	93 85       	ldd	r25, Z+11	; 0x0b
    7400:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7404:	20 e0       	ldi	r18, 0x00	; 0
    7406:	30 e0       	ldi	r19, 0x00	; 0
    7408:	40 e0       	ldi	r20, 0x00	; 0
    740a:	5e e3       	ldi	r21, 0x3E	; 62
    740c:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7410:	a7 01       	movw	r20, r14
    7412:	96 01       	movw	r18, r12
    7414:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7418:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    741c:	a4 01       	movw	r20, r8
    741e:	80 91 91 0d 	lds	r24, 0x0D91
    7422:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7426:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7428:	87 2d       	mov	r24, r7
    742a:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
    742e:	81 11       	cpse	r24, r1
    7430:	0b c0       	rjmp	.+22     	; 0x7448 <on_solid_ground+0x162>
    7432:	8f 2d       	mov	r24, r15
    7434:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
    7438:	0f 5f       	subi	r16, 0xFF	; 255
    743a:	1f 4f       	sbci	r17, 0xFF	; 255
    743c:	88 23       	and	r24, r24
    743e:	09 f4       	brne	.+2      	; 0x7442 <on_solid_ground+0x15c>
    7440:	7c cf       	rjmp	.-264    	; 0x733a <on_solid_ground+0x54>
    7442:	02 c0       	rjmp	.+4      	; 0x7448 <on_solid_ground+0x162>
		{
			return 1;
		}
	}
	return 0;
    7444:	80 e0       	ldi	r24, 0x00	; 0
    7446:	01 c0       	rjmp	.+2      	; 0x744a <on_solid_ground+0x164>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    7448:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    744a:	26 96       	adiw	r28, 0x06	; 6
    744c:	0f b6       	in	r0, 0x3f	; 63
    744e:	f8 94       	cli
    7450:	de bf       	out	0x3e, r29	; 62
    7452:	0f be       	out	0x3f, r0	; 63
    7454:	cd bf       	out	0x3d, r28	; 61
    7456:	df 91       	pop	r29
    7458:	cf 91       	pop	r28
    745a:	1f 91       	pop	r17
    745c:	0f 91       	pop	r16
    745e:	ff 90       	pop	r15
    7460:	ef 90       	pop	r14
    7462:	df 90       	pop	r13
    7464:	cf 90       	pop	r12
    7466:	bf 90       	pop	r11
    7468:	af 90       	pop	r10
    746a:	9f 90       	pop	r9
    746c:	8f 90       	pop	r8
    746e:	7f 90       	pop	r7
    7470:	6f 90       	pop	r6
    7472:	5f 90       	pop	r5
    7474:	4f 90       	pop	r4
    7476:	3f 90       	pop	r3
    7478:	2f 90       	pop	r2
    747a:	08 95       	ret

0000747c <update_player>:

void update_player()
{
    747c:	1f 93       	push	r17
    747e:	cf 93       	push	r28
    7480:	df 93       	push	r29
    7482:	1f 92       	push	r1
    7484:	cd b7       	in	r28, 0x3d	; 61
    7486:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & (IDLE|RUNNING))
    7488:	80 91 b2 0d 	lds	r24, 0x0DB2
    748c:	98 2f       	mov	r25, r24
    748e:	9a 70       	andi	r25, 0x0A	; 10
    7490:	09 f4       	brne	.+2      	; 0x7494 <update_player+0x18>
    7492:	a8 c0       	rjmp	.+336    	; 0x75e4 <update_player+0x168>
	{
		if (!on_solid_ground(&game.player.shared, 2, 3))
    7494:	43 e0       	ldi	r20, 0x03	; 3
    7496:	62 e0       	ldi	r22, 0x02	; 2
    7498:	80 ea       	ldi	r24, 0xA0	; 160
    749a:	9d e0       	ldi	r25, 0x0D	; 13
    749c:	0e 94 73 39 	call	0x72e6	; 0x72e6 <on_solid_ground>
    74a0:	88 23       	and	r24, r24
    74a2:	09 f4       	brne	.+2      	; 0x74a6 <update_player+0x2a>
    74a4:	89 c0       	rjmp	.+274    	; 0x75b8 <update_player+0x13c>
			game.player.flags = JUMPING;
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
		}
		else
		{
			if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    74a6:	10 91 54 0e 	lds	r17, 0x0E54
    74aa:	17 ff       	sbrs	r17, 7
    74ac:	31 c0       	rjmp	.+98     	; 0x7510 <update_player+0x94>
    74ae:	20 e0       	ldi	r18, 0x00	; 0
    74b0:	30 e0       	ldi	r19, 0x00	; 0
    74b2:	40 e0       	ldi	r20, 0x00	; 0
    74b4:	5e e3       	ldi	r21, 0x3E	; 62
    74b6:	60 91 a8 0d 	lds	r22, 0x0DA8
    74ba:	70 91 a9 0d 	lds	r23, 0x0DA9
    74be:	80 91 aa 0d 	lds	r24, 0x0DAA
    74c2:	90 91 ab 0d 	lds	r25, 0x0DAB
    74c6:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    74ca:	20 e0       	ldi	r18, 0x00	; 0
    74cc:	30 e0       	ldi	r19, 0x00	; 0
    74ce:	40 e0       	ldi	r20, 0x00	; 0
    74d0:	50 e4       	ldi	r21, 0x40	; 64
    74d2:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    74d6:	20 e0       	ldi	r18, 0x00	; 0
    74d8:	30 e0       	ldi	r19, 0x00	; 0
    74da:	4f e7       	ldi	r20, 0x7F	; 127
    74dc:	53 e4       	ldi	r21, 0x43	; 67
    74de:	0e 94 14 42 	call	0x8428	; 0x8428 <__cmpsf2>
    74e2:	87 ff       	sbrs	r24, 7
    74e4:	15 c0       	rjmp	.+42     	; 0x7510 <update_player+0x94>
			{
				game.player.shared.vx = RUN_SPEED;
    74e6:	80 e0       	ldi	r24, 0x00	; 0
    74e8:	90 e0       	ldi	r25, 0x00	; 0
    74ea:	a0 e7       	ldi	r26, 0x70	; 112
    74ec:	b2 e4       	ldi	r27, 0x42	; 66
    74ee:	80 93 a0 0d 	sts	0x0DA0, r24
    74f2:	90 93 a1 0d 	sts	0x0DA1, r25
    74f6:	a0 93 a2 0d 	sts	0x0DA2, r26
    74fa:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.flags = RUNNING;
    74fe:	82 e0       	ldi	r24, 0x02	; 2
    7500:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    7504:	80 e3       	ldi	r24, 0x30	; 48
    7506:	9e e0       	ldi	r25, 0x0E	; 14
    7508:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    750c:	40 e0       	ldi	r20, 0x00	; 0
    750e:	40 c0       	rjmp	.+128    	; 0x7590 <update_player+0x114>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    7510:	16 ff       	sbrs	r17, 6
    7512:	2b c0       	rjmp	.+86     	; 0x756a <update_player+0xee>
    7514:	60 91 9c 0d 	lds	r22, 0x0D9C
    7518:	70 91 9d 0d 	lds	r23, 0x0D9D
    751c:	80 e0       	ldi	r24, 0x00	; 0
    751e:	90 e0       	ldi	r25, 0x00	; 0
    7520:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7524:	9b 01       	movw	r18, r22
    7526:	ac 01       	movw	r20, r24
    7528:	60 91 a8 0d 	lds	r22, 0x0DA8
    752c:	70 91 a9 0d 	lds	r23, 0x0DA9
    7530:	80 91 aa 0d 	lds	r24, 0x0DAA
    7534:	90 91 ab 0d 	lds	r25, 0x0DAB
    7538:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    753c:	18 16       	cp	r1, r24
    753e:	ac f4       	brge	.+42     	; 0x756a <update_player+0xee>
			{
				game.player.shared.vx = -RUN_SPEED;
    7540:	80 e0       	ldi	r24, 0x00	; 0
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	a0 e7       	ldi	r26, 0x70	; 112
    7546:	b2 ec       	ldi	r27, 0xC2	; 194
    7548:	80 93 a0 0d 	sts	0x0DA0, r24
    754c:	90 93 a1 0d 	sts	0x0DA1, r25
    7550:	a0 93 a2 0d 	sts	0x0DA2, r26
    7554:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.flags = RUNNING;
    7558:	82 e0       	ldi	r24, 0x02	; 2
    755a:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    755e:	80 e3       	ldi	r24, 0x30	; 48
    7560:	9e e0       	ldi	r25, 0x0E	; 14
    7562:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    7566:	41 e0       	ldi	r20, 0x01	; 1
    7568:	13 c0       	rjmp	.+38     	; 0x7590 <update_player+0x114>
			}
			else
			{
				game.player.flags = IDLE;
    756a:	88 e0       	ldi	r24, 0x08	; 8
    756c:	80 93 b2 0d 	sts	0x0DB2, r24
				game.player.shared.vx = 0;
    7570:	10 92 a0 0d 	sts	0x0DA0, r1
    7574:	10 92 a1 0d 	sts	0x0DA1, r1
    7578:	10 92 a2 0d 	sts	0x0DA2, r1
    757c:	10 92 a3 0d 	sts	0x0DA3, r1
				LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    7580:	40 91 05 05 	lds	r20, 0x0505
    7584:	88 e2       	ldi	r24, 0x28	; 40
    7586:	9e e0       	ldi	r25, 0x0E	; 14
    7588:	49 83       	std	Y+1, r20	; 0x01
    758a:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    758e:	49 81       	ldd	r20, Y+1	; 0x01
    7590:	bc 01       	movw	r22, r24
    7592:	80 e0       	ldi	r24, 0x00	; 0
    7594:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B)
    7598:	80 91 50 0e 	lds	r24, 0x0E50
    759c:	80 ff       	sbrs	r24, 0
    759e:	9b c0       	rjmp	.+310    	; 0x76d6 <update_player+0x25a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    75a0:	80 e0       	ldi	r24, 0x00	; 0
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	a6 e1       	ldi	r26, 0x16	; 22
    75a6:	b3 ec       	ldi	r27, 0xC3	; 195
    75a8:	80 93 a4 0d 	sts	0x0DA4, r24
    75ac:	90 93 a5 0d 	sts	0x0DA5, r25
    75b0:	a0 93 a6 0d 	sts	0x0DA6, r26
    75b4:	b0 93 a7 0d 	sts	0x0DA7, r27
				game.player.shared.gravity = GRAVITY;
    75b8:	8f ef       	ldi	r24, 0xFF	; 255
    75ba:	80 93 b0 0d 	sts	0x0DB0, r24
				game.player.flags = JUMPING;
    75be:	81 e0       	ldi	r24, 0x01	; 1
    75c0:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    75c4:	40 91 05 05 	lds	r20, 0x0505
    75c8:	88 e3       	ldi	r24, 0x38	; 56
    75ca:	9e e0       	ldi	r25, 0x0E	; 14
    75cc:	49 83       	std	Y+1, r20	; 0x01
    75ce:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    75d2:	49 81       	ldd	r20, Y+1	; 0x01
    75d4:	bc 01       	movw	r22, r24
    75d6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    75d8:	0f 90       	pop	r0
    75da:	df 91       	pop	r29
    75dc:	cf 91       	pop	r28
    75de:	1f 91       	pop	r17
			if (game.joypadState.pressed & BTN_B)
			{
				game.player.shared.vy = -JUMP_SPEED;
				game.player.shared.gravity = GRAVITY;
				game.player.flags = JUMPING;
				LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    75e0:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <LBMapSprite>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    75e4:	80 ff       	sbrs	r24, 0
    75e6:	77 c0       	rjmp	.+238    	; 0x76d6 <update_player+0x25a>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    75e8:	10 91 54 0e 	lds	r17, 0x0E54
    75ec:	17 ff       	sbrs	r17, 7
    75ee:	2e c0       	rjmp	.+92     	; 0x764c <update_player+0x1d0>
    75f0:	20 e0       	ldi	r18, 0x00	; 0
    75f2:	30 e0       	ldi	r19, 0x00	; 0
    75f4:	40 e0       	ldi	r20, 0x00	; 0
    75f6:	5e e3       	ldi	r21, 0x3E	; 62
    75f8:	60 91 a8 0d 	lds	r22, 0x0DA8
    75fc:	70 91 a9 0d 	lds	r23, 0x0DA9
    7600:	80 91 aa 0d 	lds	r24, 0x0DAA
    7604:	90 91 ab 0d 	lds	r25, 0x0DAB
    7608:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    760c:	20 e0       	ldi	r18, 0x00	; 0
    760e:	30 e0       	ldi	r19, 0x00	; 0
    7610:	40 e0       	ldi	r20, 0x00	; 0
    7612:	50 e4       	ldi	r21, 0x40	; 64
    7614:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7618:	20 e0       	ldi	r18, 0x00	; 0
    761a:	30 e0       	ldi	r19, 0x00	; 0
    761c:	4f e7       	ldi	r20, 0x7F	; 127
    761e:	53 e4       	ldi	r21, 0x43	; 67
    7620:	0e 94 14 42 	call	0x8428	; 0x8428 <__cmpsf2>
    7624:	87 ff       	sbrs	r24, 7
    7626:	12 c0       	rjmp	.+36     	; 0x764c <update_player+0x1d0>
		{
			game.player.shared.vx = RUN_SPEED;
    7628:	80 e0       	ldi	r24, 0x00	; 0
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	a0 e7       	ldi	r26, 0x70	; 112
    762e:	b2 e4       	ldi	r27, 0x42	; 66
    7630:	80 93 a0 0d 	sts	0x0DA0, r24
    7634:	90 93 a1 0d 	sts	0x0DA1, r25
    7638:	a0 93 a2 0d 	sts	0x0DA2, r26
    763c:	b0 93 a3 0d 	sts	0x0DA3, r27
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), 0);
    7640:	88 e3       	ldi	r24, 0x38	; 56
    7642:	9e e0       	ldi	r25, 0x0E	; 14
    7644:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    7648:	40 e0       	ldi	r20, 0x00	; 0
    764a:	3a c0       	rjmp	.+116    	; 0x76c0 <update_player+0x244>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    764c:	16 ff       	sbrs	r17, 6
    764e:	28 c0       	rjmp	.+80     	; 0x76a0 <update_player+0x224>
    7650:	60 91 9c 0d 	lds	r22, 0x0D9C
    7654:	70 91 9d 0d 	lds	r23, 0x0D9D
    7658:	80 e0       	ldi	r24, 0x00	; 0
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7660:	9b 01       	movw	r18, r22
    7662:	ac 01       	movw	r20, r24
    7664:	60 91 a8 0d 	lds	r22, 0x0DA8
    7668:	70 91 a9 0d 	lds	r23, 0x0DA9
    766c:	80 91 aa 0d 	lds	r24, 0x0DAA
    7670:	90 91 ab 0d 	lds	r25, 0x0DAB
    7674:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    7678:	18 16       	cp	r1, r24
    767a:	94 f4       	brge	.+36     	; 0x76a0 <update_player+0x224>
		{
			game.player.shared.vx = -RUN_SPEED;
    767c:	80 e0       	ldi	r24, 0x00	; 0
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	a0 e7       	ldi	r26, 0x70	; 112
    7682:	b2 ec       	ldi	r27, 0xC2	; 194
    7684:	80 93 a0 0d 	sts	0x0DA0, r24
    7688:	90 93 a1 0d 	sts	0x0DA1, r25
    768c:	a0 93 a2 0d 	sts	0x0DA2, r26
    7690:	b0 93 a3 0d 	sts	0x0DA3, r27
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    7694:	88 e3       	ldi	r24, 0x38	; 56
    7696:	9e e0       	ldi	r25, 0x0E	; 14
    7698:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    769c:	41 e0       	ldi	r20, 0x01	; 1
    769e:	10 c0       	rjmp	.+32     	; 0x76c0 <update_player+0x244>
		}
		else
		{
			game.player.shared.vx = 0;
    76a0:	10 92 a0 0d 	sts	0x0DA0, r1
    76a4:	10 92 a1 0d 	sts	0x0DA1, r1
    76a8:	10 92 a2 0d 	sts	0x0DA2, r1
    76ac:	10 92 a3 0d 	sts	0x0DA3, r1
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    76b0:	40 91 05 05 	lds	r20, 0x0505
    76b4:	88 e3       	ldi	r24, 0x38	; 56
    76b6:	9e e0       	ldi	r25, 0x0E	; 14
    76b8:	49 83       	std	Y+1, r20	; 0x01
    76ba:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <LBGetNextFrame>
    76be:	49 81       	ldd	r20, Y+1	; 0x01
    76c0:	bc 01       	movw	r22, r24
    76c2:	80 e0       	ldi	r24, 0x00	; 0
    76c4:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    76c8:	80 91 b0 0d 	lds	r24, 0x0DB0
    76cc:	81 11       	cpse	r24, r1
    76ce:	03 c0       	rjmp	.+6      	; 0x76d6 <update_player+0x25a>
		{
			game.player.flags = IDLE;
    76d0:	88 e0       	ldi	r24, 0x08	; 8
    76d2:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    76d6:	0f 90       	pop	r0
    76d8:	df 91       	pop	r29
    76da:	cf 91       	pop	r28
    76dc:	1f 91       	pop	r17
    76de:	08 95       	ret

000076e0 <pixel_overlap>:

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    76e0:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    76e2:	86 17       	cp	r24, r22
    76e4:	97 07       	cpc	r25, r23
    76e6:	28 f4       	brcc	.+10     	; 0x76f2 <pixel_overlap+0x12>
    76e8:	94 2f       	mov	r25, r20
    76ea:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    76ec:	89 2f       	mov	r24, r25
    76ee:	86 1b       	sub	r24, r22
    76f0:	01 c0       	rjmp	.+2      	; 0x76f4 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    76f2:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    76f4:	e4 0f       	add	r30, r20
    76f6:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    76f8:	62 0f       	add	r22, r18
    76fa:	71 1d       	adc	r23, r1
	if (s2 < s1)
    76fc:	6e 17       	cp	r22, r30
    76fe:	7f 07       	cpc	r23, r31
    7700:	10 f4       	brcc	.+4      	; 0x7706 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    7702:	6e 1b       	sub	r22, r30
    7704:	86 0f       	add	r24, r22
	}
	return result;
}
    7706:	08 95       	ret

00007708 <collision_detect_level>:

void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    7708:	2f 92       	push	r2
    770a:	3f 92       	push	r3
    770c:	4f 92       	push	r4
    770e:	5f 92       	push	r5
    7710:	6f 92       	push	r6
    7712:	7f 92       	push	r7
    7714:	8f 92       	push	r8
    7716:	9f 92       	push	r9
    7718:	af 92       	push	r10
    771a:	bf 92       	push	r11
    771c:	cf 92       	push	r12
    771e:	df 92       	push	r13
    7720:	ef 92       	push	r14
    7722:	ff 92       	push	r15
    7724:	0f 93       	push	r16
    7726:	1f 93       	push	r17
    7728:	cf 93       	push	r28
    772a:	df 93       	push	r29
    772c:	cd b7       	in	r28, 0x3d	; 61
    772e:	de b7       	in	r29, 0x3e	; 62
    7730:	2a 97       	sbiw	r28, 0x0a	; 10
    7732:	0f b6       	in	r0, 0x3f	; 63
    7734:	f8 94       	cli
    7736:	de bf       	out	0x3e, r29	; 62
    7738:	0f be       	out	0x3f, r0	; 63
    773a:	cd bf       	out	0x3d, r28	; 61
    773c:	9a 87       	std	Y+10, r25	; 0x0a
    773e:	89 87       	std	Y+9, r24	; 0x09
    7740:	16 2f       	mov	r17, r22
    7742:	04 2f       	mov	r16, r20
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
		{
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7744:	28 e0       	ldi	r18, 0x08	; 8
    7746:	42 9f       	mul	r20, r18
    7748:	c0 01       	movw	r24, r0
    774a:	11 24       	eor	r1, r1
    774c:	e6 2f       	mov	r30, r22
    774e:	f0 e0       	ldi	r31, 0x00	; 0
    7750:	fe 83       	std	Y+6, r31	; 0x06
    7752:	ed 83       	std	Y+5, r30	; 0x05
void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
    7754:	21 2c       	mov	r2, r1
    7756:	31 2c       	mov	r3, r1
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
		{
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7758:	2c 01       	movw	r4, r24
    775a:	66 24       	eor	r6, r6
    775c:	57 fc       	sbrc	r5, 7
    775e:	60 94       	com	r6
    7760:	76 2c       	mov	r7, r6
void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
    7762:	2d 81       	ldd	r18, Y+5	; 0x05
    7764:	3e 81       	ldd	r19, Y+6	; 0x06
    7766:	22 16       	cp	r2, r18
    7768:	33 06       	cpc	r3, r19
    776a:	09 f4       	brne	.+2      	; 0x776e <collision_detect_level+0x66>
    776c:	ba c1       	rjmp	.+884    	; 0x7ae2 <collision_detect_level+0x3da>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
    776e:	b1 01       	movw	r22, r2
    7770:	88 27       	eor	r24, r24
    7772:	77 fd       	sbrc	r23, 7
    7774:	80 95       	com	r24
    7776:	98 2f       	mov	r25, r24
    7778:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    777c:	6b 01       	movw	r12, r22
    777e:	7c 01       	movw	r14, r24
    7780:	20 e0       	ldi	r18, 0x00	; 0
    7782:	30 e0       	ldi	r19, 0x00	; 0
    7784:	40 e0       	ldi	r20, 0x00	; 0
    7786:	5e e3       	ldi	r21, 0x3E	; 62
    7788:	e9 85       	ldd	r30, Y+9	; 0x09
    778a:	fa 85       	ldd	r31, Y+10	; 0x0a
    778c:	64 85       	ldd	r22, Z+12	; 0x0c
    778e:	75 85       	ldd	r23, Z+13	; 0x0d
    7790:	86 85       	ldd	r24, Z+14	; 0x0e
    7792:	97 85       	ldd	r25, Z+15	; 0x0f
    7794:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7798:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    779c:	4b 01       	movw	r8, r22
    779e:	5c 01       	movw	r10, r24
    77a0:	20 e0       	ldi	r18, 0x00	; 0
    77a2:	30 e0       	ldi	r19, 0x00	; 0
    77a4:	40 e0       	ldi	r20, 0x00	; 0
    77a6:	5e e3       	ldi	r21, 0x3E	; 62
    77a8:	e9 85       	ldd	r30, Y+9	; 0x09
    77aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    77ac:	60 85       	ldd	r22, Z+8	; 0x08
    77ae:	71 85       	ldd	r23, Z+9	; 0x09
    77b0:	82 85       	ldd	r24, Z+10	; 0x0a
    77b2:	93 85       	ldd	r25, Z+11	; 0x0b
    77b4:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    77b8:	a7 01       	movw	r20, r14
    77ba:	96 01       	movw	r18, r12
    77bc:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    77c0:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    77c4:	a4 01       	movw	r20, r8
    77c6:	80 91 91 0d 	lds	r24, 0x0D91
    77ca:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    77ce:	89 83       	std	Y+1, r24	; 0x01
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
    77d0:	20 e0       	ldi	r18, 0x00	; 0
    77d2:	30 e0       	ldi	r19, 0x00	; 0
    77d4:	40 e0       	ldi	r20, 0x00	; 0
    77d6:	5e e3       	ldi	r21, 0x3E	; 62
    77d8:	e9 85       	ldd	r30, Y+9	; 0x09
    77da:	fa 85       	ldd	r31, Y+10	; 0x0a
    77dc:	64 85       	ldd	r22, Z+12	; 0x0c
    77de:	75 85       	ldd	r23, Z+13	; 0x0d
    77e0:	86 85       	ldd	r24, Z+14	; 0x0e
    77e2:	97 85       	ldd	r25, Z+15	; 0x0f
    77e4:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    77e8:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    77ec:	4b 01       	movw	r8, r22
    77ee:	5c 01       	movw	r10, r24
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	30 e0       	ldi	r19, 0x00	; 0
    77f4:	40 ee       	ldi	r20, 0xE0	; 224
    77f6:	50 e4       	ldi	r21, 0x40	; 64
    77f8:	e9 85       	ldd	r30, Y+9	; 0x09
    77fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    77fc:	60 85       	ldd	r22, Z+8	; 0x08
    77fe:	71 85       	ldd	r23, Z+9	; 0x09
    7800:	82 85       	ldd	r24, Z+10	; 0x0a
    7802:	93 85       	ldd	r25, Z+11	; 0x0b
    7804:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7808:	20 e0       	ldi	r18, 0x00	; 0
    780a:	30 e0       	ldi	r19, 0x00	; 0
    780c:	40 e0       	ldi	r20, 0x00	; 0
    780e:	5e e3       	ldi	r21, 0x3E	; 62
    7810:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7814:	a7 01       	movw	r20, r14
    7816:	96 01       	movw	r18, r12
    7818:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    781c:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7820:	a4 01       	movw	r20, r8
    7822:	80 91 91 0d 	lds	r24, 0x0D91
    7826:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    782a:	b8 2e       	mov	r11, r24
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    782c:	89 81       	ldd	r24, Y+1	; 0x01
    782e:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
    7832:	88 23       	and	r24, r24
    7834:	e1 f0       	breq	.+56     	; 0x786e <collision_detect_level+0x166>
    7836:	e9 85       	ldd	r30, Y+9	; 0x09
    7838:	fa 85       	ldd	r31, Y+10	; 0x0a
    783a:	60 85       	ldd	r22, Z+8	; 0x08
    783c:	71 85       	ldd	r23, Z+9	; 0x09
    783e:	82 85       	ldd	r24, Z+10	; 0x0a
    7840:	93 85       	ldd	r25, Z+11	; 0x0b
    7842:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7846:	dc 01       	movw	r26, r24
    7848:	cb 01       	movw	r24, r22
    784a:	fc 01       	movw	r30, r24
    784c:	53 e0       	ldi	r21, 0x03	; 3
    784e:	f6 95       	lsr	r31
    7850:	e7 95       	ror	r30
    7852:	5a 95       	dec	r21
    7854:	e1 f7       	brne	.-8      	; 0x784e <collision_detect_level+0x146>
    7856:	bf 01       	movw	r22, r30
    7858:	e3 e0       	ldi	r30, 0x03	; 3
    785a:	66 0f       	add	r22, r22
    785c:	77 1f       	adc	r23, r23
    785e:	ea 95       	dec	r30
    7860:	e1 f7       	brne	.-8      	; 0x785a <collision_detect_level+0x152>
    7862:	28 e0       	ldi	r18, 0x08	; 8
    7864:	48 e0       	ldi	r20, 0x08	; 8
    7866:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    786a:	84 30       	cpi	r24, 0x04	; 4
    786c:	90 f5       	brcc	.+100    	; 0x78d2 <collision_detect_level+0x1ca>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    786e:	8b 2d       	mov	r24, r11
    7870:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7874:	88 23       	and	r24, r24
    7876:	09 f4       	brne	.+2      	; 0x787a <collision_detect_level+0x172>
    7878:	4e c0       	rjmp	.+156    	; 0x7916 <collision_detect_level+0x20e>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    787a:	e9 85       	ldd	r30, Y+9	; 0x09
    787c:	fa 85       	ldd	r31, Y+10	; 0x0a
    787e:	80 84       	ldd	r8, Z+8	; 0x08
    7880:	91 84       	ldd	r9, Z+9	; 0x09
    7882:	a2 84       	ldd	r10, Z+10	; 0x0a
    7884:	b3 84       	ldd	r11, Z+11	; 0x0b
    7886:	20 e0       	ldi	r18, 0x00	; 0
    7888:	30 e0       	ldi	r19, 0x00	; 0
    788a:	40 ee       	ldi	r20, 0xE0	; 224
    788c:	50 e4       	ldi	r21, 0x40	; 64
    788e:	c5 01       	movw	r24, r10
    7890:	b4 01       	movw	r22, r8
    7892:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7896:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    789a:	cb 01       	movw	r24, r22
    789c:	23 e0       	ldi	r18, 0x03	; 3
    789e:	96 95       	lsr	r25
    78a0:	87 95       	ror	r24
    78a2:	2a 95       	dec	r18
    78a4:	e1 f7       	brne	.-8      	; 0x789e <collision_detect_level+0x196>
    78a6:	9c 01       	movw	r18, r24
    78a8:	43 e0       	ldi	r20, 0x03	; 3
    78aa:	22 0f       	add	r18, r18
    78ac:	33 1f       	adc	r19, r19
    78ae:	4a 95       	dec	r20
    78b0:	e1 f7       	brne	.-8      	; 0x78aa <collision_detect_level+0x1a2>
    78b2:	3a 83       	std	Y+2, r19	; 0x02
    78b4:	29 83       	std	Y+1, r18	; 0x01
    78b6:	c5 01       	movw	r24, r10
    78b8:	b4 01       	movw	r22, r8
    78ba:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    78be:	dc 01       	movw	r26, r24
    78c0:	cb 01       	movw	r24, r22
    78c2:	28 e0       	ldi	r18, 0x08	; 8
    78c4:	48 e0       	ldi	r20, 0x08	; 8
    78c6:	69 81       	ldd	r22, Y+1	; 0x01
    78c8:	7a 81       	ldd	r23, Y+2	; 0x02
    78ca:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    78ce:	84 30       	cpi	r24, 0x04	; 4
    78d0:	10 f1       	brcs	.+68     	; 0x7916 <collision_detect_level+0x20e>
		{
			s->vy =  0;
    78d2:	e9 85       	ldd	r30, Y+9	; 0x09
    78d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    78d6:	14 82       	std	Z+4, r1	; 0x04
    78d8:	15 82       	std	Z+5, r1	; 0x05
    78da:	16 82       	std	Z+6, r1	; 0x06
    78dc:	17 82       	std	Z+7, r1	; 0x07
			s->y = (((u16) s->y / 8) + 1) * 8;
    78de:	64 85       	ldd	r22, Z+12	; 0x0c
    78e0:	75 85       	ldd	r23, Z+13	; 0x0d
    78e2:	86 85       	ldd	r24, Z+14	; 0x0e
    78e4:	97 85       	ldd	r25, Z+15	; 0x0f
    78e6:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    78ea:	83 e0       	ldi	r24, 0x03	; 3
    78ec:	76 95       	lsr	r23
    78ee:	67 95       	ror	r22
    78f0:	8a 95       	dec	r24
    78f2:	e1 f7       	brne	.-8      	; 0x78ec <collision_detect_level+0x1e4>
    78f4:	6f 5f       	subi	r22, 0xFF	; 255
    78f6:	7f 4f       	sbci	r23, 0xFF	; 255
    78f8:	93 e0       	ldi	r25, 0x03	; 3
    78fa:	66 0f       	add	r22, r22
    78fc:	77 1f       	adc	r23, r23
    78fe:	9a 95       	dec	r25
    7900:	e1 f7       	brne	.-8      	; 0x78fa <collision_detect_level+0x1f2>
    7902:	80 e0       	ldi	r24, 0x00	; 0
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    790a:	e9 85       	ldd	r30, Y+9	; 0x09
    790c:	fa 85       	ldd	r31, Y+10	; 0x0a
    790e:	64 87       	std	Z+12, r22	; 0x0c
    7910:	75 87       	std	Z+13, r23	; 0x0d
    7912:	86 87       	std	Z+14, r24	; 0x0e
    7914:	97 87       	std	Z+15, r25	; 0x0f
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7916:	c3 01       	movw	r24, r6
    7918:	b2 01       	movw	r22, r4
    791a:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    791e:	4b 01       	movw	r8, r22
    7920:	5c 01       	movw	r10, r24
    7922:	e9 85       	ldd	r30, Y+9	; 0x09
    7924:	fa 85       	ldd	r31, Y+10	; 0x0a
    7926:	24 85       	ldd	r18, Z+12	; 0x0c
    7928:	35 85       	ldd	r19, Z+13	; 0x0d
    792a:	46 85       	ldd	r20, Z+14	; 0x0e
    792c:	57 85       	ldd	r21, Z+15	; 0x0f
    792e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7932:	20 e0       	ldi	r18, 0x00	; 0
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	40 e8       	ldi	r20, 0x80	; 128
    7938:	5f e3       	ldi	r21, 0x3F	; 63
    793a:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    793e:	20 e0       	ldi	r18, 0x00	; 0
    7940:	30 e0       	ldi	r19, 0x00	; 0
    7942:	40 e0       	ldi	r20, 0x00	; 0
    7944:	5e e3       	ldi	r21, 0x3E	; 62
    7946:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    794a:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    794e:	69 83       	std	Y+1, r22	; 0x01
    7950:	7a 83       	std	Y+2, r23	; 0x02
    7952:	8b 83       	std	Y+3, r24	; 0x03
    7954:	9c 83       	std	Y+4, r25	; 0x04
    7956:	20 e0       	ldi	r18, 0x00	; 0
    7958:	30 e0       	ldi	r19, 0x00	; 0
    795a:	40 e0       	ldi	r20, 0x00	; 0
    795c:	5e e3       	ldi	r21, 0x3E	; 62
    795e:	e9 85       	ldd	r30, Y+9	; 0x09
    7960:	fa 85       	ldd	r31, Y+10	; 0x0a
    7962:	60 85       	ldd	r22, Z+8	; 0x08
    7964:	71 85       	ldd	r23, Z+9	; 0x09
    7966:	82 85       	ldd	r24, Z+10	; 0x0a
    7968:	93 85       	ldd	r25, Z+11	; 0x0b
    796a:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    796e:	a7 01       	movw	r20, r14
    7970:	96 01       	movw	r18, r12
    7972:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7976:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    797a:	49 81       	ldd	r20, Y+1	; 0x01
    797c:	5a 81       	ldd	r21, Y+2	; 0x02
    797e:	80 91 91 0d 	lds	r24, 0x0D91
    7982:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7986:	89 83       	std	Y+1, r24	; 0x01
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
    7988:	e9 85       	ldd	r30, Y+9	; 0x09
    798a:	fa 85       	ldd	r31, Y+10	; 0x0a
    798c:	24 85       	ldd	r18, Z+12	; 0x0c
    798e:	35 85       	ldd	r19, Z+13	; 0x0d
    7990:	46 85       	ldd	r20, Z+14	; 0x0e
    7992:	57 85       	ldd	r21, Z+15	; 0x0f
    7994:	c5 01       	movw	r24, r10
    7996:	b4 01       	movw	r22, r8
    7998:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    799c:	20 e0       	ldi	r18, 0x00	; 0
    799e:	30 e0       	ldi	r19, 0x00	; 0
    79a0:	40 e8       	ldi	r20, 0x80	; 128
    79a2:	5f e3       	ldi	r21, 0x3F	; 63
    79a4:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    79a8:	20 e0       	ldi	r18, 0x00	; 0
    79aa:	30 e0       	ldi	r19, 0x00	; 0
    79ac:	40 e0       	ldi	r20, 0x00	; 0
    79ae:	5e e3       	ldi	r21, 0x3E	; 62
    79b0:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    79b4:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    79b8:	4b 01       	movw	r8, r22
    79ba:	5c 01       	movw	r10, r24
    79bc:	20 e0       	ldi	r18, 0x00	; 0
    79be:	30 e0       	ldi	r19, 0x00	; 0
    79c0:	40 ee       	ldi	r20, 0xE0	; 224
    79c2:	50 e4       	ldi	r21, 0x40	; 64
    79c4:	e9 85       	ldd	r30, Y+9	; 0x09
    79c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    79c8:	60 85       	ldd	r22, Z+8	; 0x08
    79ca:	71 85       	ldd	r23, Z+9	; 0x09
    79cc:	82 85       	ldd	r24, Z+10	; 0x0a
    79ce:	93 85       	ldd	r25, Z+11	; 0x0b
    79d0:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    79d4:	20 e0       	ldi	r18, 0x00	; 0
    79d6:	30 e0       	ldi	r19, 0x00	; 0
    79d8:	40 e0       	ldi	r20, 0x00	; 0
    79da:	5e e3       	ldi	r21, 0x3E	; 62
    79dc:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    79e0:	a7 01       	movw	r20, r14
    79e2:	96 01       	movw	r18, r12
    79e4:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    79e8:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    79ec:	a4 01       	movw	r20, r8
    79ee:	80 91 91 0d 	lds	r24, 0x0D91
    79f2:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    79f6:	f8 2e       	mov	r15, r24
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    79f8:	89 81       	ldd	r24, Y+1	; 0x01
    79fa:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
    79fe:	88 23       	and	r24, r24
    7a00:	e1 f0       	breq	.+56     	; 0x7a3a <collision_detect_level+0x332>
    7a02:	e9 85       	ldd	r30, Y+9	; 0x09
    7a04:	fa 85       	ldd	r31, Y+10	; 0x0a
    7a06:	60 85       	ldd	r22, Z+8	; 0x08
    7a08:	71 85       	ldd	r23, Z+9	; 0x09
    7a0a:	82 85       	ldd	r24, Z+10	; 0x0a
    7a0c:	93 85       	ldd	r25, Z+11	; 0x0b
    7a0e:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7a12:	dc 01       	movw	r26, r24
    7a14:	cb 01       	movw	r24, r22
    7a16:	fc 01       	movw	r30, r24
    7a18:	a3 e0       	ldi	r26, 0x03	; 3
    7a1a:	f6 95       	lsr	r31
    7a1c:	e7 95       	ror	r30
    7a1e:	aa 95       	dec	r26
    7a20:	e1 f7       	brne	.-8      	; 0x7a1a <collision_detect_level+0x312>
    7a22:	bf 01       	movw	r22, r30
    7a24:	b3 e0       	ldi	r27, 0x03	; 3
    7a26:	66 0f       	add	r22, r22
    7a28:	77 1f       	adc	r23, r23
    7a2a:	ba 95       	dec	r27
    7a2c:	e1 f7       	brne	.-8      	; 0x7a26 <collision_detect_level+0x31e>
    7a2e:	28 e0       	ldi	r18, 0x08	; 8
    7a30:	48 e0       	ldi	r20, 0x08	; 8
    7a32:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    7a36:	84 30       	cpi	r24, 0x04	; 4
    7a38:	78 f5       	brcc	.+94     	; 0x7a98 <collision_detect_level+0x390>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7a3a:	8f 2d       	mov	r24, r15
    7a3c:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    7a40:	88 23       	and	r24, r24
    7a42:	09 f4       	brne	.+2      	; 0x7a46 <collision_detect_level+0x33e>
    7a44:	4a c0       	rjmp	.+148    	; 0x7ada <collision_detect_level+0x3d2>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7a46:	e9 85       	ldd	r30, Y+9	; 0x09
    7a48:	fa 85       	ldd	r31, Y+10	; 0x0a
    7a4a:	c0 84       	ldd	r12, Z+8	; 0x08
    7a4c:	d1 84       	ldd	r13, Z+9	; 0x09
    7a4e:	e2 84       	ldd	r14, Z+10	; 0x0a
    7a50:	f3 84       	ldd	r15, Z+11	; 0x0b
    7a52:	20 e0       	ldi	r18, 0x00	; 0
    7a54:	30 e0       	ldi	r19, 0x00	; 0
    7a56:	40 ee       	ldi	r20, 0xE0	; 224
    7a58:	50 e4       	ldi	r21, 0x40	; 64
    7a5a:	c7 01       	movw	r24, r14
    7a5c:	b6 01       	movw	r22, r12
    7a5e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7a62:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7a66:	cb 01       	movw	r24, r22
    7a68:	63 e0       	ldi	r22, 0x03	; 3
    7a6a:	96 95       	lsr	r25
    7a6c:	87 95       	ror	r24
    7a6e:	6a 95       	dec	r22
    7a70:	e1 f7       	brne	.-8      	; 0x7a6a <collision_detect_level+0x362>
    7a72:	5c 01       	movw	r10, r24
    7a74:	73 e0       	ldi	r23, 0x03	; 3
    7a76:	aa 0c       	add	r10, r10
    7a78:	bb 1c       	adc	r11, r11
    7a7a:	7a 95       	dec	r23
    7a7c:	e1 f7       	brne	.-8      	; 0x7a76 <collision_detect_level+0x36e>
    7a7e:	c7 01       	movw	r24, r14
    7a80:	b6 01       	movw	r22, r12
    7a82:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7a86:	dc 01       	movw	r26, r24
    7a88:	cb 01       	movw	r24, r22
    7a8a:	28 e0       	ldi	r18, 0x08	; 8
    7a8c:	48 e0       	ldi	r20, 0x08	; 8
    7a8e:	b5 01       	movw	r22, r10
    7a90:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    7a94:	84 30       	cpi	r24, 0x04	; 4
    7a96:	08 f1       	brcs	.+66     	; 0x7ada <collision_detect_level+0x3d2>
		{
			s->vy =  0;
    7a98:	e9 85       	ldd	r30, Y+9	; 0x09
    7a9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    7a9c:	14 82       	std	Z+4, r1	; 0x04
    7a9e:	15 82       	std	Z+5, r1	; 0x05
    7aa0:	16 82       	std	Z+6, r1	; 0x06
    7aa2:	17 82       	std	Z+7, r1	; 0x07
			s->gravity = 0;
    7aa4:	10 8a       	std	Z+16, r1	; 0x10
			s->y = ((u16) s->y / 8) * 8;
    7aa6:	64 85       	ldd	r22, Z+12	; 0x0c
    7aa8:	75 85       	ldd	r23, Z+13	; 0x0d
    7aaa:	86 85       	ldd	r24, Z+14	; 0x0e
    7aac:	97 85       	ldd	r25, Z+15	; 0x0f
    7aae:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7ab2:	43 e0       	ldi	r20, 0x03	; 3
    7ab4:	76 95       	lsr	r23
    7ab6:	67 95       	ror	r22
    7ab8:	4a 95       	dec	r20
    7aba:	e1 f7       	brne	.-8      	; 0x7ab4 <collision_detect_level+0x3ac>
    7abc:	53 e0       	ldi	r21, 0x03	; 3
    7abe:	66 0f       	add	r22, r22
    7ac0:	77 1f       	adc	r23, r23
    7ac2:	5a 95       	dec	r21
    7ac4:	e1 f7       	brne	.-8      	; 0x7abe <collision_detect_level+0x3b6>
    7ac6:	80 e0       	ldi	r24, 0x00	; 0
    7ac8:	90 e0       	ldi	r25, 0x00	; 0
    7aca:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7ace:	e9 85       	ldd	r30, Y+9	; 0x09
    7ad0:	fa 85       	ldd	r31, Y+10	; 0x0a
    7ad2:	64 87       	std	Z+12, r22	; 0x0c
    7ad4:	75 87       	std	Z+13, r23	; 0x0d
    7ad6:	86 87       	std	Z+14, r24	; 0x0e
    7ad8:	97 87       	std	Z+15, r25	; 0x0f
    7ada:	ff ef       	ldi	r31, 0xFF	; 255
    7adc:	2f 1a       	sub	r2, r31
    7ade:	3f 0a       	sbc	r3, r31
    7ae0:	40 ce       	rjmp	.-896    	; 0x7762 <collision_detect_level+0x5a>
		{
			s->vx =  0;
			s->x = (((u16) s->x / 8) + 1) * 8;
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    7ae2:	38 e0       	ldi	r19, 0x08	; 8
    7ae4:	13 9f       	mul	r17, r19
    7ae6:	c0 01       	movw	r24, r0
    7ae8:	11 24       	eor	r1, r1
    7aea:	10 e0       	ldi	r17, 0x00	; 0
    7aec:	1a 82       	std	Y+2, r1	; 0x02
    7aee:	19 82       	std	Y+1, r1	; 0x01
    7af0:	1c 01       	movw	r2, r24
    7af2:	44 24       	eor	r4, r4
    7af4:	37 fc       	sbrc	r3, 7
    7af6:	40 94       	com	r4
    7af8:	54 2c       	mov	r5, r4
			s->y = ((u16) s->y / 8) * 8;
		}
	}
	
	// Left and Right
	for (u8 y = 0; y < tile_height; y++)
    7afa:	89 81       	ldd	r24, Y+1	; 0x01
    7afc:	9a 81       	ldd	r25, Y+2	; 0x02
    7afe:	80 17       	cp	r24, r16
    7b00:	91 07       	cpc	r25, r17
    7b02:	09 f4       	brne	.+2      	; 0x7b06 <collision_detect_level+0x3fe>
    7b04:	bb c1       	rjmp	.+886    	; 0x7e7c <collision_detect_level+0x774>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
    7b06:	e9 81       	ldd	r30, Y+1	; 0x01
    7b08:	fa 81       	ldd	r31, Y+2	; 0x02
    7b0a:	bf 01       	movw	r22, r30
    7b0c:	88 27       	eor	r24, r24
    7b0e:	77 fd       	sbrc	r23, 7
    7b10:	80 95       	com	r24
    7b12:	98 2f       	mov	r25, r24
    7b14:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    7b18:	6b 01       	movw	r12, r22
    7b1a:	7c 01       	movw	r14, r24
    7b1c:	20 e0       	ldi	r18, 0x00	; 0
    7b1e:	30 e0       	ldi	r19, 0x00	; 0
    7b20:	40 e0       	ldi	r20, 0x00	; 0
    7b22:	5e e3       	ldi	r21, 0x3E	; 62
    7b24:	e9 85       	ldd	r30, Y+9	; 0x09
    7b26:	fa 85       	ldd	r31, Y+10	; 0x0a
    7b28:	64 85       	ldd	r22, Z+12	; 0x0c
    7b2a:	75 85       	ldd	r23, Z+13	; 0x0d
    7b2c:	86 85       	ldd	r24, Z+14	; 0x0e
    7b2e:	97 85       	ldd	r25, Z+15	; 0x0f
    7b30:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7b34:	a7 01       	movw	r20, r14
    7b36:	96 01       	movw	r18, r12
    7b38:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7b3c:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7b40:	4b 01       	movw	r8, r22
    7b42:	5c 01       	movw	r10, r24
    7b44:	20 e0       	ldi	r18, 0x00	; 0
    7b46:	30 e0       	ldi	r19, 0x00	; 0
    7b48:	40 e0       	ldi	r20, 0x00	; 0
    7b4a:	5e e3       	ldi	r21, 0x3E	; 62
    7b4c:	e9 85       	ldd	r30, Y+9	; 0x09
    7b4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7b50:	60 85       	ldd	r22, Z+8	; 0x08
    7b52:	71 85       	ldd	r23, Z+9	; 0x09
    7b54:	82 85       	ldd	r24, Z+10	; 0x0a
    7b56:	93 85       	ldd	r25, Z+11	; 0x0b
    7b58:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7b5c:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7b60:	a4 01       	movw	r20, r8
    7b62:	80 91 91 0d 	lds	r24, 0x0D91
    7b66:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7b6a:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
    7b6c:	20 e0       	ldi	r18, 0x00	; 0
    7b6e:	30 e0       	ldi	r19, 0x00	; 0
    7b70:	40 ee       	ldi	r20, 0xE0	; 224
    7b72:	50 e4       	ldi	r21, 0x40	; 64
    7b74:	e9 85       	ldd	r30, Y+9	; 0x09
    7b76:	fa 85       	ldd	r31, Y+10	; 0x0a
    7b78:	64 85       	ldd	r22, Z+12	; 0x0c
    7b7a:	75 85       	ldd	r23, Z+13	; 0x0d
    7b7c:	86 85       	ldd	r24, Z+14	; 0x0e
    7b7e:	97 85       	ldd	r25, Z+15	; 0x0f
    7b80:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7b84:	20 e0       	ldi	r18, 0x00	; 0
    7b86:	30 e0       	ldi	r19, 0x00	; 0
    7b88:	40 e0       	ldi	r20, 0x00	; 0
    7b8a:	5e e3       	ldi	r21, 0x3E	; 62
    7b8c:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7b90:	a7 01       	movw	r20, r14
    7b92:	96 01       	movw	r18, r12
    7b94:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7b98:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7b9c:	4b 01       	movw	r8, r22
    7b9e:	5c 01       	movw	r10, r24
    7ba0:	20 e0       	ldi	r18, 0x00	; 0
    7ba2:	30 e0       	ldi	r19, 0x00	; 0
    7ba4:	40 e0       	ldi	r20, 0x00	; 0
    7ba6:	5e e3       	ldi	r21, 0x3E	; 62
    7ba8:	e9 85       	ldd	r30, Y+9	; 0x09
    7baa:	fa 85       	ldd	r31, Y+10	; 0x0a
    7bac:	60 85       	ldd	r22, Z+8	; 0x08
    7bae:	71 85       	ldd	r23, Z+9	; 0x09
    7bb0:	82 85       	ldd	r24, Z+10	; 0x0a
    7bb2:	93 85       	ldd	r25, Z+11	; 0x0b
    7bb4:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7bb8:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7bbc:	a4 01       	movw	r20, r8
    7bbe:	80 91 91 0d 	lds	r24, 0x0D91
    7bc2:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7bc6:	b8 2e       	mov	r11, r24
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7bc8:	87 2d       	mov	r24, r7
    7bca:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
    7bce:	88 23       	and	r24, r24
    7bd0:	e1 f0       	breq	.+56     	; 0x7c0a <collision_detect_level+0x502>
    7bd2:	e9 85       	ldd	r30, Y+9	; 0x09
    7bd4:	fa 85       	ldd	r31, Y+10	; 0x0a
    7bd6:	64 85       	ldd	r22, Z+12	; 0x0c
    7bd8:	75 85       	ldd	r23, Z+13	; 0x0d
    7bda:	86 85       	ldd	r24, Z+14	; 0x0e
    7bdc:	97 85       	ldd	r25, Z+15	; 0x0f
    7bde:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7be2:	dc 01       	movw	r26, r24
    7be4:	cb 01       	movw	r24, r22
    7be6:	fc 01       	movw	r30, r24
    7be8:	23 e0       	ldi	r18, 0x03	; 3
    7bea:	f6 95       	lsr	r31
    7bec:	e7 95       	ror	r30
    7bee:	2a 95       	dec	r18
    7bf0:	e1 f7       	brne	.-8      	; 0x7bea <collision_detect_level+0x4e2>
    7bf2:	bf 01       	movw	r22, r30
    7bf4:	33 e0       	ldi	r19, 0x03	; 3
    7bf6:	66 0f       	add	r22, r22
    7bf8:	77 1f       	adc	r23, r23
    7bfa:	3a 95       	dec	r19
    7bfc:	e1 f7       	brne	.-8      	; 0x7bf6 <collision_detect_level+0x4ee>
    7bfe:	28 e0       	ldi	r18, 0x08	; 8
    7c00:	48 e0       	ldi	r20, 0x08	; 8
    7c02:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    7c06:	84 30       	cpi	r24, 0x04	; 4
    7c08:	70 f5       	brcc	.+92     	; 0x7c66 <collision_detect_level+0x55e>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7c0a:	8b 2d       	mov	r24, r11
    7c0c:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
	// Left and Right
	for (u8 y = 0; y < tile_height; y++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7c10:	88 23       	and	r24, r24
    7c12:	09 f4       	brne	.+2      	; 0x7c16 <collision_detect_level+0x50e>
    7c14:	4a c0       	rjmp	.+148    	; 0x7caa <collision_detect_level+0x5a2>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7c16:	e9 85       	ldd	r30, Y+9	; 0x09
    7c18:	fa 85       	ldd	r31, Y+10	; 0x0a
    7c1a:	84 84       	ldd	r8, Z+12	; 0x0c
    7c1c:	95 84       	ldd	r9, Z+13	; 0x0d
    7c1e:	a6 84       	ldd	r10, Z+14	; 0x0e
    7c20:	b7 84       	ldd	r11, Z+15	; 0x0f
    7c22:	20 e0       	ldi	r18, 0x00	; 0
    7c24:	30 e0       	ldi	r19, 0x00	; 0
    7c26:	40 ee       	ldi	r20, 0xE0	; 224
    7c28:	50 e4       	ldi	r21, 0x40	; 64
    7c2a:	c5 01       	movw	r24, r10
    7c2c:	b4 01       	movw	r22, r8
    7c2e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7c32:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7c36:	a3 e0       	ldi	r26, 0x03	; 3
    7c38:	76 95       	lsr	r23
    7c3a:	67 95       	ror	r22
    7c3c:	aa 95       	dec	r26
    7c3e:	e1 f7       	brne	.-8      	; 0x7c38 <collision_detect_level+0x530>
    7c40:	3b 01       	movw	r6, r22
    7c42:	b3 e0       	ldi	r27, 0x03	; 3
    7c44:	66 0c       	add	r6, r6
    7c46:	77 1c       	adc	r7, r7
    7c48:	ba 95       	dec	r27
    7c4a:	e1 f7       	brne	.-8      	; 0x7c44 <collision_detect_level+0x53c>
    7c4c:	c5 01       	movw	r24, r10
    7c4e:	b4 01       	movw	r22, r8
    7c50:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7c54:	dc 01       	movw	r26, r24
    7c56:	cb 01       	movw	r24, r22
    7c58:	28 e0       	ldi	r18, 0x08	; 8
    7c5a:	48 e0       	ldi	r20, 0x08	; 8
    7c5c:	b3 01       	movw	r22, r6
    7c5e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    7c62:	84 30       	cpi	r24, 0x04	; 4
    7c64:	10 f1       	brcs	.+68     	; 0x7caa <collision_detect_level+0x5a2>
		{
			s->vx =  0;
    7c66:	e9 85       	ldd	r30, Y+9	; 0x09
    7c68:	fa 85       	ldd	r31, Y+10	; 0x0a
    7c6a:	10 82       	st	Z, r1
    7c6c:	11 82       	std	Z+1, r1	; 0x01
    7c6e:	12 82       	std	Z+2, r1	; 0x02
    7c70:	13 82       	std	Z+3, r1	; 0x03
			s->x = (((u16) s->x / 8) + 1) * 8;
    7c72:	60 85       	ldd	r22, Z+8	; 0x08
    7c74:	71 85       	ldd	r23, Z+9	; 0x09
    7c76:	82 85       	ldd	r24, Z+10	; 0x0a
    7c78:	93 85       	ldd	r25, Z+11	; 0x0b
    7c7a:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7c7e:	e3 e0       	ldi	r30, 0x03	; 3
    7c80:	76 95       	lsr	r23
    7c82:	67 95       	ror	r22
    7c84:	ea 95       	dec	r30
    7c86:	e1 f7       	brne	.-8      	; 0x7c80 <collision_detect_level+0x578>
    7c88:	6f 5f       	subi	r22, 0xFF	; 255
    7c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c8c:	f3 e0       	ldi	r31, 0x03	; 3
    7c8e:	66 0f       	add	r22, r22
    7c90:	77 1f       	adc	r23, r23
    7c92:	fa 95       	dec	r31
    7c94:	e1 f7       	brne	.-8      	; 0x7c8e <collision_detect_level+0x586>
    7c96:	80 e0       	ldi	r24, 0x00	; 0
    7c98:	90 e0       	ldi	r25, 0x00	; 0
    7c9a:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7c9e:	e9 85       	ldd	r30, Y+9	; 0x09
    7ca0:	fa 85       	ldd	r31, Y+10	; 0x0a
    7ca2:	60 87       	std	Z+8, r22	; 0x08
    7ca4:	71 87       	std	Z+9, r23	; 0x09
    7ca6:	82 87       	std	Z+10, r24	; 0x0a
    7ca8:	93 87       	std	Z+11, r25	; 0x0b
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    7caa:	c2 01       	movw	r24, r4
    7cac:	b1 01       	movw	r22, r2
    7cae:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    7cb2:	4b 01       	movw	r8, r22
    7cb4:	5c 01       	movw	r10, r24
    7cb6:	20 e0       	ldi	r18, 0x00	; 0
    7cb8:	30 e0       	ldi	r19, 0x00	; 0
    7cba:	40 e0       	ldi	r20, 0x00	; 0
    7cbc:	5e e3       	ldi	r21, 0x3E	; 62
    7cbe:	e9 85       	ldd	r30, Y+9	; 0x09
    7cc0:	fa 85       	ldd	r31, Y+10	; 0x0a
    7cc2:	64 85       	ldd	r22, Z+12	; 0x0c
    7cc4:	75 85       	ldd	r23, Z+13	; 0x0d
    7cc6:	86 85       	ldd	r24, Z+14	; 0x0e
    7cc8:	97 85       	ldd	r25, Z+15	; 0x0f
    7cca:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7cce:	a7 01       	movw	r20, r14
    7cd0:	96 01       	movw	r18, r12
    7cd2:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7cd6:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7cda:	6d 83       	std	Y+5, r22	; 0x05
    7cdc:	7e 83       	std	Y+6, r23	; 0x06
    7cde:	8f 83       	std	Y+7, r24	; 0x07
    7ce0:	98 87       	std	Y+8, r25	; 0x08
    7ce2:	e9 85       	ldd	r30, Y+9	; 0x09
    7ce4:	fa 85       	ldd	r31, Y+10	; 0x0a
    7ce6:	20 85       	ldd	r18, Z+8	; 0x08
    7ce8:	31 85       	ldd	r19, Z+9	; 0x09
    7cea:	42 85       	ldd	r20, Z+10	; 0x0a
    7cec:	53 85       	ldd	r21, Z+11	; 0x0b
    7cee:	c5 01       	movw	r24, r10
    7cf0:	b4 01       	movw	r22, r8
    7cf2:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7cf6:	20 e0       	ldi	r18, 0x00	; 0
    7cf8:	30 e0       	ldi	r19, 0x00	; 0
    7cfa:	40 e8       	ldi	r20, 0x80	; 128
    7cfc:	5f e3       	ldi	r21, 0x3F	; 63
    7cfe:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    7d02:	20 e0       	ldi	r18, 0x00	; 0
    7d04:	30 e0       	ldi	r19, 0x00	; 0
    7d06:	40 e0       	ldi	r20, 0x00	; 0
    7d08:	5e e3       	ldi	r21, 0x3E	; 62
    7d0a:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7d0e:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7d12:	4d 81       	ldd	r20, Y+5	; 0x05
    7d14:	5e 81       	ldd	r21, Y+6	; 0x06
    7d16:	80 91 91 0d 	lds	r24, 0x0D91
    7d1a:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7d1e:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
    7d20:	20 e0       	ldi	r18, 0x00	; 0
    7d22:	30 e0       	ldi	r19, 0x00	; 0
    7d24:	40 ee       	ldi	r20, 0xE0	; 224
    7d26:	50 e4       	ldi	r21, 0x40	; 64
    7d28:	e9 85       	ldd	r30, Y+9	; 0x09
    7d2a:	fa 85       	ldd	r31, Y+10	; 0x0a
    7d2c:	64 85       	ldd	r22, Z+12	; 0x0c
    7d2e:	75 85       	ldd	r23, Z+13	; 0x0d
    7d30:	86 85       	ldd	r24, Z+14	; 0x0e
    7d32:	97 85       	ldd	r25, Z+15	; 0x0f
    7d34:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7d38:	20 e0       	ldi	r18, 0x00	; 0
    7d3a:	30 e0       	ldi	r19, 0x00	; 0
    7d3c:	40 e0       	ldi	r20, 0x00	; 0
    7d3e:	5e e3       	ldi	r21, 0x3E	; 62
    7d40:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7d44:	a7 01       	movw	r20, r14
    7d46:	96 01       	movw	r18, r12
    7d48:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7d4c:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7d50:	6b 01       	movw	r12, r22
    7d52:	7c 01       	movw	r14, r24
    7d54:	e9 85       	ldd	r30, Y+9	; 0x09
    7d56:	fa 85       	ldd	r31, Y+10	; 0x0a
    7d58:	20 85       	ldd	r18, Z+8	; 0x08
    7d5a:	31 85       	ldd	r19, Z+9	; 0x09
    7d5c:	42 85       	ldd	r20, Z+10	; 0x0a
    7d5e:	53 85       	ldd	r21, Z+11	; 0x0b
    7d60:	c5 01       	movw	r24, r10
    7d62:	b4 01       	movw	r22, r8
    7d64:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7d68:	20 e0       	ldi	r18, 0x00	; 0
    7d6a:	30 e0       	ldi	r19, 0x00	; 0
    7d6c:	40 e8       	ldi	r20, 0x80	; 128
    7d6e:	5f e3       	ldi	r21, 0x3F	; 63
    7d70:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    7d74:	20 e0       	ldi	r18, 0x00	; 0
    7d76:	30 e0       	ldi	r19, 0x00	; 0
    7d78:	40 e0       	ldi	r20, 0x00	; 0
    7d7a:	5e e3       	ldi	r21, 0x3E	; 62
    7d7c:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7d80:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7d84:	a6 01       	movw	r20, r12
    7d86:	80 91 91 0d 	lds	r24, 0x0D91
    7d8a:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <get_level_tile>
    7d8e:	f8 2e       	mov	r15, r24
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7d90:	87 2d       	mov	r24, r7
    7d92:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
    7d96:	88 23       	and	r24, r24
    7d98:	e1 f0       	breq	.+56     	; 0x7dd2 <collision_detect_level+0x6ca>
    7d9a:	e9 85       	ldd	r30, Y+9	; 0x09
    7d9c:	fa 85       	ldd	r31, Y+10	; 0x0a
    7d9e:	64 85       	ldd	r22, Z+12	; 0x0c
    7da0:	75 85       	ldd	r23, Z+13	; 0x0d
    7da2:	86 85       	ldd	r24, Z+14	; 0x0e
    7da4:	97 85       	ldd	r25, Z+15	; 0x0f
    7da6:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7daa:	dc 01       	movw	r26, r24
    7dac:	cb 01       	movw	r24, r22
    7dae:	fc 01       	movw	r30, r24
    7db0:	43 e0       	ldi	r20, 0x03	; 3
    7db2:	f6 95       	lsr	r31
    7db4:	e7 95       	ror	r30
    7db6:	4a 95       	dec	r20
    7db8:	e1 f7       	brne	.-8      	; 0x7db2 <collision_detect_level+0x6aa>
    7dba:	bf 01       	movw	r22, r30
    7dbc:	53 e0       	ldi	r21, 0x03	; 3
    7dbe:	66 0f       	add	r22, r22
    7dc0:	77 1f       	adc	r23, r23
    7dc2:	5a 95       	dec	r21
    7dc4:	e1 f7       	brne	.-8      	; 0x7dbe <collision_detect_level+0x6b6>
    7dc6:	28 e0       	ldi	r18, 0x08	; 8
    7dc8:	48 e0       	ldi	r20, 0x08	; 8
    7dca:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    7dce:	84 30       	cpi	r24, 0x04	; 4
    7dd0:	70 f5       	brcc	.+92     	; 0x7e2e <collision_detect_level+0x726>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7dd2:	8f 2d       	mov	r24, r15
    7dd4:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <solid_tile>
			s->x = (((u16) s->x / 8) + 1) * 8;
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    7dd8:	88 23       	and	r24, r24
    7dda:	09 f4       	brne	.+2      	; 0x7dde <collision_detect_level+0x6d6>
    7ddc:	48 c0       	rjmp	.+144    	; 0x7e6e <collision_detect_level+0x766>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    7dde:	e9 85       	ldd	r30, Y+9	; 0x09
    7de0:	fa 85       	ldd	r31, Y+10	; 0x0a
    7de2:	84 84       	ldd	r8, Z+12	; 0x0c
    7de4:	95 84       	ldd	r9, Z+13	; 0x0d
    7de6:	a6 84       	ldd	r10, Z+14	; 0x0e
    7de8:	b7 84       	ldd	r11, Z+15	; 0x0f
    7dea:	20 e0       	ldi	r18, 0x00	; 0
    7dec:	30 e0       	ldi	r19, 0x00	; 0
    7dee:	40 ee       	ldi	r20, 0xE0	; 224
    7df0:	50 e4       	ldi	r21, 0x40	; 64
    7df2:	c5 01       	movw	r24, r10
    7df4:	b4 01       	movw	r22, r8
    7df6:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7dfa:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7dfe:	23 e0       	ldi	r18, 0x03	; 3
    7e00:	76 95       	lsr	r23
    7e02:	67 95       	ror	r22
    7e04:	2a 95       	dec	r18
    7e06:	e1 f7       	brne	.-8      	; 0x7e00 <collision_detect_level+0x6f8>
    7e08:	7b 01       	movw	r14, r22
    7e0a:	33 e0       	ldi	r19, 0x03	; 3
    7e0c:	ee 0c       	add	r14, r14
    7e0e:	ff 1c       	adc	r15, r15
    7e10:	3a 95       	dec	r19
    7e12:	e1 f7       	brne	.-8      	; 0x7e0c <collision_detect_level+0x704>
    7e14:	c5 01       	movw	r24, r10
    7e16:	b4 01       	movw	r22, r8
    7e18:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7e1c:	dc 01       	movw	r26, r24
    7e1e:	cb 01       	movw	r24, r22
    7e20:	28 e0       	ldi	r18, 0x08	; 8
    7e22:	48 e0       	ldi	r20, 0x08	; 8
    7e24:	b7 01       	movw	r22, r14
    7e26:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <pixel_overlap>
    7e2a:	84 30       	cpi	r24, 0x04	; 4
    7e2c:	00 f1       	brcs	.+64     	; 0x7e6e <collision_detect_level+0x766>
		{
			s->vx =  0;
    7e2e:	e9 85       	ldd	r30, Y+9	; 0x09
    7e30:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e32:	10 82       	st	Z, r1
    7e34:	11 82       	std	Z+1, r1	; 0x01
    7e36:	12 82       	std	Z+2, r1	; 0x02
    7e38:	13 82       	std	Z+3, r1	; 0x03
			s->x = ((u16) s->x / 8) * 8;
    7e3a:	60 85       	ldd	r22, Z+8	; 0x08
    7e3c:	71 85       	ldd	r23, Z+9	; 0x09
    7e3e:	82 85       	ldd	r24, Z+10	; 0x0a
    7e40:	93 85       	ldd	r25, Z+11	; 0x0b
    7e42:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7e46:	83 e0       	ldi	r24, 0x03	; 3
    7e48:	76 95       	lsr	r23
    7e4a:	67 95       	ror	r22
    7e4c:	8a 95       	dec	r24
    7e4e:	e1 f7       	brne	.-8      	; 0x7e48 <collision_detect_level+0x740>
    7e50:	93 e0       	ldi	r25, 0x03	; 3
    7e52:	66 0f       	add	r22, r22
    7e54:	77 1f       	adc	r23, r23
    7e56:	9a 95       	dec	r25
    7e58:	e1 f7       	brne	.-8      	; 0x7e52 <collision_detect_level+0x74a>
    7e5a:	80 e0       	ldi	r24, 0x00	; 0
    7e5c:	90 e0       	ldi	r25, 0x00	; 0
    7e5e:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7e62:	e9 85       	ldd	r30, Y+9	; 0x09
    7e64:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e66:	60 87       	std	Z+8, r22	; 0x08
    7e68:	71 87       	std	Z+9, r23	; 0x09
    7e6a:	82 87       	std	Z+10, r24	; 0x0a
    7e6c:	93 87       	std	Z+11, r25	; 0x0b
    7e6e:	29 81       	ldd	r18, Y+1	; 0x01
    7e70:	3a 81       	ldd	r19, Y+2	; 0x02
    7e72:	2f 5f       	subi	r18, 0xFF	; 255
    7e74:	3f 4f       	sbci	r19, 0xFF	; 255
    7e76:	3a 83       	std	Y+2, r19	; 0x02
    7e78:	29 83       	std	Y+1, r18	; 0x01
    7e7a:	3f ce       	rjmp	.-898    	; 0x7afa <collision_detect_level+0x3f2>
		}
	}
}
    7e7c:	2a 96       	adiw	r28, 0x0a	; 10
    7e7e:	0f b6       	in	r0, 0x3f	; 63
    7e80:	f8 94       	cli
    7e82:	de bf       	out	0x3e, r29	; 62
    7e84:	0f be       	out	0x3f, r0	; 63
    7e86:	cd bf       	out	0x3d, r28	; 61
    7e88:	df 91       	pop	r29
    7e8a:	cf 91       	pop	r28
    7e8c:	1f 91       	pop	r17
    7e8e:	0f 91       	pop	r16
    7e90:	ff 90       	pop	r15
    7e92:	ef 90       	pop	r14
    7e94:	df 90       	pop	r13
    7e96:	cf 90       	pop	r12
    7e98:	bf 90       	pop	r11
    7e9a:	af 90       	pop	r10
    7e9c:	9f 90       	pop	r9
    7e9e:	8f 90       	pop	r8
    7ea0:	7f 90       	pop	r7
    7ea2:	6f 90       	pop	r6
    7ea4:	5f 90       	pop	r5
    7ea6:	4f 90       	pop	r4
    7ea8:	3f 90       	pop	r3
    7eaa:	2f 90       	pop	r2
    7eac:	08 95       	ret

00007eae <update_player_position>:

void update_player_position()
{
    7eae:	cf 92       	push	r12
    7eb0:	df 92       	push	r13
    7eb2:	ef 92       	push	r14
    7eb4:	ff 92       	push	r15
    7eb6:	0f 93       	push	r16
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    7eb8:	60 91 b0 0d 	lds	r22, 0x0DB0
    7ebc:	70 e0       	ldi	r23, 0x00	; 0
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	90 e0       	ldi	r25, 0x00	; 0
    7ec2:	0e 94 46 42 	call	0x848c	; 0x848c <__floatsisf>
    7ec6:	29 e8       	ldi	r18, 0x89	; 137
    7ec8:	38 e8       	ldi	r19, 0x88	; 136
    7eca:	48 e8       	ldi	r20, 0x88	; 136
    7ecc:	5c e3       	ldi	r21, 0x3C	; 60
    7ece:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7ed2:	20 91 a4 0d 	lds	r18, 0x0DA4
    7ed6:	30 91 a5 0d 	lds	r19, 0x0DA5
    7eda:	40 91 a6 0d 	lds	r20, 0x0DA6
    7ede:	50 91 a7 0d 	lds	r21, 0x0DA7
    7ee2:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7ee6:	6b 01       	movw	r12, r22
    7ee8:	7c 01       	movw	r14, r24
	if (game.player.shared.vy > MAX_SPEED) game.player.shared.vy = MAX_SPEED;
    7eea:	20 e0       	ldi	r18, 0x00	; 0
    7eec:	30 e0       	ldi	r19, 0x00	; 0
    7eee:	40 ef       	ldi	r20, 0xF0	; 240
    7ef0:	52 e4       	ldi	r21, 0x42	; 66
    7ef2:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    7ef6:	18 16       	cp	r1, r24
    7ef8:	4c f0       	brlt	.+18     	; 0x7f0c <update_player_position+0x5e>
}

void update_player_position()
{
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    7efa:	c0 92 a4 0d 	sts	0x0DA4, r12
    7efe:	d0 92 a5 0d 	sts	0x0DA5, r13
    7f02:	e0 92 a6 0d 	sts	0x0DA6, r14
    7f06:	f0 92 a7 0d 	sts	0x0DA7, r15
    7f0a:	0c c0       	rjmp	.+24     	; 0x7f24 <update_player_position+0x76>
	if (game.player.shared.vy > MAX_SPEED) game.player.shared.vy = MAX_SPEED;
    7f0c:	80 e0       	ldi	r24, 0x00	; 0
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	a0 ef       	ldi	r26, 0xF0	; 240
    7f12:	b2 e4       	ldi	r27, 0x42	; 66
    7f14:	80 93 a4 0d 	sts	0x0DA4, r24
    7f18:	90 93 a5 0d 	sts	0x0DA5, r25
    7f1c:	a0 93 a6 0d 	sts	0x0DA6, r26
    7f20:	b0 93 a7 0d 	sts	0x0DA7, r27
	game.player.shared.x += game.player.shared.vx*FRAME_TIME;
    7f24:	29 e8       	ldi	r18, 0x89	; 137
    7f26:	38 e8       	ldi	r19, 0x88	; 136
    7f28:	48 e8       	ldi	r20, 0x88	; 136
    7f2a:	5c e3       	ldi	r21, 0x3C	; 60
    7f2c:	60 91 a0 0d 	lds	r22, 0x0DA0
    7f30:	70 91 a1 0d 	lds	r23, 0x0DA1
    7f34:	80 91 a2 0d 	lds	r24, 0x0DA2
    7f38:	90 91 a3 0d 	lds	r25, 0x0DA3
    7f3c:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7f40:	9b 01       	movw	r18, r22
    7f42:	ac 01       	movw	r20, r24
    7f44:	60 91 a8 0d 	lds	r22, 0x0DA8
    7f48:	70 91 a9 0d 	lds	r23, 0x0DA9
    7f4c:	80 91 aa 0d 	lds	r24, 0x0DAA
    7f50:	90 91 ab 0d 	lds	r25, 0x0DAB
    7f54:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7f58:	60 93 a8 0d 	sts	0x0DA8, r22
    7f5c:	70 93 a9 0d 	sts	0x0DA9, r23
    7f60:	80 93 aa 0d 	sts	0x0DAA, r24
    7f64:	90 93 ab 0d 	sts	0x0DAB, r25
	game.player.shared.y += game.player.shared.vy*FRAME_TIME;
    7f68:	29 e8       	ldi	r18, 0x89	; 137
    7f6a:	38 e8       	ldi	r19, 0x88	; 136
    7f6c:	48 e8       	ldi	r20, 0x88	; 136
    7f6e:	5c e3       	ldi	r21, 0x3C	; 60
    7f70:	60 91 a4 0d 	lds	r22, 0x0DA4
    7f74:	70 91 a5 0d 	lds	r23, 0x0DA5
    7f78:	80 91 a6 0d 	lds	r24, 0x0DA6
    7f7c:	90 91 a7 0d 	lds	r25, 0x0DA7
    7f80:	0e 94 fa 42 	call	0x85f4	; 0x85f4 <__mulsf3>
    7f84:	9b 01       	movw	r18, r22
    7f86:	ac 01       	movw	r20, r24
    7f88:	60 91 ac 0d 	lds	r22, 0x0DAC
    7f8c:	70 91 ad 0d 	lds	r23, 0x0DAD
    7f90:	80 91 ae 0d 	lds	r24, 0x0DAE
    7f94:	90 91 af 0d 	lds	r25, 0x0DAF
    7f98:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
    7f9c:	60 93 ac 0d 	sts	0x0DAC, r22
    7fa0:	70 93 ad 0d 	sts	0x0DAD, r23
    7fa4:	80 93 ae 0d 	sts	0x0DAE, r24
    7fa8:	90 93 af 0d 	sts	0x0DAF, r25
	collision_detect_level(&game.player.shared, 2, 3);
    7fac:	43 e0       	ldi	r20, 0x03	; 3
    7fae:	62 e0       	ldi	r22, 0x02	; 2
    7fb0:	80 ea       	ldi	r24, 0xA0	; 160
    7fb2:	9d e0       	ldi	r25, 0x0D	; 13
    7fb4:	0e 94 84 3b 	call	0x7708	; 0x7708 <collision_detect_level>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
    7fb8:	60 91 9e 0d 	lds	r22, 0x0D9E
    7fbc:	70 91 9f 0d 	lds	r23, 0x0D9F
    7fc0:	80 e0       	ldi	r24, 0x00	; 0
    7fc2:	90 e0       	ldi	r25, 0x00	; 0
    7fc4:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7fc8:	9b 01       	movw	r18, r22
    7fca:	ac 01       	movw	r20, r24
    7fcc:	60 91 ac 0d 	lds	r22, 0x0DAC
    7fd0:	70 91 ad 0d 	lds	r23, 0x0DAD
    7fd4:	80 91 ae 0d 	lds	r24, 0x0DAE
    7fd8:	90 91 af 0d 	lds	r25, 0x0DAF
    7fdc:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    7fe0:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    7fe4:	f6 2e       	mov	r15, r22
    7fe6:	60 91 9c 0d 	lds	r22, 0x0D9C
    7fea:	70 91 9d 0d 	lds	r23, 0x0D9D
    7fee:	80 e0       	ldi	r24, 0x00	; 0
    7ff0:	90 e0       	ldi	r25, 0x00	; 0
    7ff2:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    7ff6:	9b 01       	movw	r18, r22
    7ff8:	ac 01       	movw	r20, r24
    7ffa:	60 91 a8 0d 	lds	r22, 0x0DA8
    7ffe:	70 91 a9 0d 	lds	r23, 0x0DA9
    8002:	80 91 aa 0d 	lds	r24, 0x0DAA
    8006:	90 91 ab 0d 	lds	r25, 0x0DAB
    800a:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    800e:	0e 94 18 42 	call	0x8430	; 0x8430 <__fixunssfsi>
    8012:	03 e0       	ldi	r16, 0x03	; 3
    8014:	22 e0       	ldi	r18, 0x02	; 2
    8016:	4f 2d       	mov	r20, r15
    8018:	80 e0       	ldi	r24, 0x00	; 0
    801a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <LBMoveSprite>
}
    801e:	0f 91       	pop	r16
    8020:	ff 90       	pop	r15
    8022:	ef 90       	pop	r14
    8024:	df 90       	pop	r13
    8026:	cf 90       	pop	r12
    8028:	08 95       	ret

0000802a <update_level>:

void update_level()
{
    802a:	cf 93       	push	r28
    802c:	df 93       	push	r29
	if (game.player.shared.vx > 0 &&
    802e:	20 e0       	ldi	r18, 0x00	; 0
    8030:	30 e0       	ldi	r19, 0x00	; 0
    8032:	a9 01       	movw	r20, r18
    8034:	60 91 a0 0d 	lds	r22, 0x0DA0
    8038:	70 91 a1 0d 	lds	r23, 0x0DA1
    803c:	80 91 a2 0d 	lds	r24, 0x0DA2
    8040:	90 91 a3 0d 	lds	r25, 0x0DA3
    8044:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    8048:	18 16       	cp	r1, r24
    804a:	44 f5       	brge	.+80     	; 0x809c <update_level+0x72>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    804c:	c0 91 9c 0d 	lds	r28, 0x0D9C
    8050:	d0 91 9d 0d 	lds	r29, 0x0D9D
    8054:	be 01       	movw	r22, r28
    8056:	80 e0       	ldi	r24, 0x00	; 0
    8058:	90 e0       	ldi	r25, 0x00	; 0
    805a:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    805e:	9b 01       	movw	r18, r22
    8060:	ac 01       	movw	r20, r24
    8062:	60 91 a8 0d 	lds	r22, 0x0DA8
    8066:	70 91 a9 0d 	lds	r23, 0x0DA9
    806a:	80 91 aa 0d 	lds	r24, 0x0DAA
    806e:	90 91 ab 0d 	lds	r25, 0x0DAB
    8072:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
    8076:	20 e0       	ldi	r18, 0x00	; 0
    8078:	30 e0       	ldi	r19, 0x00	; 0
    807a:	40 ee       	ldi	r20, 0xE0	; 224
    807c:	52 e4       	ldi	r21, 0x42	; 66
    807e:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    8082:	87 fd       	sbrc	r24, 7
    8084:	0b c0       	rjmp	.+22     	; 0x809c <update_level+0x72>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    8086:	93 e0       	ldi	r25, 0x03	; 3
    8088:	d6 95       	lsr	r29
    808a:	c7 95       	ror	r28
    808c:	9a 95       	dec	r25
    808e:	e1 f7       	brne	.-8      	; 0x8088 <update_level+0x5e>
    8090:	6c 96       	adiw	r28, 0x1c	; 28
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    8092:	cf 3f       	cpi	r28, 0xFF	; 255
    8094:	d1 05       	cpc	r29, r1
    8096:	10 f4       	brcc	.+4      	; 0x809c <update_level+0x72>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    8098:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    809c:	20 e0       	ldi	r18, 0x00	; 0
    809e:	30 e0       	ldi	r19, 0x00	; 0
    80a0:	a9 01       	movw	r20, r18
    80a2:	60 91 a4 0d 	lds	r22, 0x0DA4
    80a6:	70 91 a5 0d 	lds	r23, 0x0DA5
    80aa:	80 91 a6 0d 	lds	r24, 0x0DA6
    80ae:	90 91 a7 0d 	lds	r25, 0x0DA7
    80b2:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    80b6:	18 16       	cp	r1, r24
    80b8:	84 f5       	brge	.+96     	; 0x811a <update_level+0xf0>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    80ba:	c0 91 9e 0d 	lds	r28, 0x0D9E
    80be:	d0 91 9f 0d 	lds	r29, 0x0D9F
    80c2:	be 01       	movw	r22, r28
    80c4:	80 e0       	ldi	r24, 0x00	; 0
    80c6:	90 e0       	ldi	r25, 0x00	; 0
    80c8:	0e 94 44 42 	call	0x8488	; 0x8488 <__floatunsisf>
    80cc:	9b 01       	movw	r18, r22
    80ce:	ac 01       	movw	r20, r24
    80d0:	60 91 ac 0d 	lds	r22, 0x0DAC
    80d4:	70 91 ad 0d 	lds	r23, 0x0DAD
    80d8:	80 91 ae 0d 	lds	r24, 0x0DAE
    80dc:	90 91 af 0d 	lds	r25, 0x0DAF
    80e0:	0e 94 af 41 	call	0x835e	; 0x835e <__subsf3>
    80e4:	20 e0       	ldi	r18, 0x00	; 0
    80e6:	30 e0       	ldi	r19, 0x00	; 0
    80e8:	40 ec       	ldi	r20, 0xC0	; 192
    80ea:	51 e4       	ldi	r21, 0x41	; 65
    80ec:	0e 94 b0 41 	call	0x8360	; 0x8360 <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    80f0:	20 e0       	ldi	r18, 0x00	; 0
    80f2:	30 e0       	ldi	r19, 0x00	; 0
    80f4:	40 e4       	ldi	r20, 0x40	; 64
    80f6:	53 e4       	ldi	r21, 0x43	; 67
    80f8:	0e 94 f6 42 	call	0x85ec	; 0x85ec <__gesf2>
    80fc:	87 fd       	sbrc	r24, 7
    80fe:	0d c0       	rjmp	.+26     	; 0x811a <update_level+0xf0>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    8100:	83 e0       	ldi	r24, 0x03	; 3
    8102:	d6 95       	lsr	r29
    8104:	c7 95       	ror	r28
    8106:	8a 95       	dec	r24
    8108:	e1 f7       	brne	.-8      	; 0x8102 <update_level+0xd8>
    810a:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    810c:	cf 3f       	cpi	r28, 0xFF	; 255
    810e:	d1 05       	cpc	r29, r1
    8110:	20 f4       	brcc	.+8      	; 0x811a <update_level+0xf0>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
	}
}
    8112:	df 91       	pop	r29
    8114:	cf 91       	pop	r28
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    8116:	0c 94 ec 38 	jmp	0x71d8	; 0x71d8 <move_camera_y>
	}
}
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	08 95       	ret

00008120 <clear_sprites>:

void clear_sprites()
{
    8120:	0f 93       	push	r16
    8122:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    8124:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    8126:	01 e0       	ldi	r16, 0x01	; 1
    8128:	21 e0       	ldi	r18, 0x01	; 1
    812a:	40 e0       	ldi	r20, 0x00	; 0
    812c:	60 ee       	ldi	r22, 0xE0	; 224
    812e:	8c 2f       	mov	r24, r28
    8130:	0e 94 33 36 	call	0x6c66	; 0x6c66 <LBMoveSprite>
    8134:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    8136:	cc 31       	cpi	r28, 0x1C	; 28
    8138:	b1 f7       	brne	.-20     	; 0x8126 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    813a:	8e e0       	ldi	r24, 0x0E	; 14
}
    813c:	cf 91       	pop	r28
    813e:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    8140:	0c 94 71 36 	jmp	0x6ce2	; 0x6ce2 <LBRotateSprites>

00008144 <level_transition>:
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
}

void level_transition(u8 index)
{
    8144:	cf 93       	push	r28
    8146:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    8148:	61 e0       	ldi	r22, 0x01	; 1
    814a:	83 e0       	ldi	r24, 0x03	; 3
    814c:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <FadeOut>
	ClearVram();
    8150:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <ClearVram>
	clear_sprites();
    8154:	0e 94 90 40 	call	0x8120	; 0x8120 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    8158:	80 e1       	ldi	r24, 0x10	; 16
    815a:	c8 9f       	mul	r28, r24
    815c:	a0 01       	movw	r20, r0
    815e:	11 24       	eor	r1, r1
    8160:	45 5a       	subi	r20, 0xA5	; 165
    8162:	56 4f       	sbci	r21, 0xF6	; 246
    8164:	6c e0       	ldi	r22, 0x0C	; 12
    8166:	70 e0       	ldi	r23, 0x00	; 0
    8168:	88 e0       	ldi	r24, 0x08	; 8
    816a:	90 e0       	ldi	r25, 0x00	; 0
    816c:	0e 94 a9 34 	call	0x6952	; 0x6952 <Print>
	FadeIn(1, true);
    8170:	61 e0       	ldi	r22, 0x01	; 1
    8172:	81 e0       	ldi	r24, 0x01	; 1
    8174:	0e 94 20 35 	call	0x6a40	; 0x6a40 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    8178:	83 e0       	ldi	r24, 0x03	; 3
    817a:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <LBWaitSeconds>
	FadeOut(1, true);
    817e:	61 e0       	ldi	r22, 0x01	; 1
    8180:	81 e0       	ldi	r24, 0x01	; 1
    8182:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <FadeOut>
	ClearVram();
    8186:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    818a:	60 e0       	ldi	r22, 0x00	; 0
    818c:	83 e0       	ldi	r24, 0x03	; 3
    818e:	0e 94 20 35 	call	0x6a40	; 0x6a40 <FadeIn>
	load_level(index);
    8192:	8c 2f       	mov	r24, r28
}
    8194:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    8196:	0c 94 07 39 	jmp	0x720e	; 0x720e <load_level>

0000819a <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    819a:	0f 93       	push	r16
	game.current_screen = SPLASH;
    819c:	e0 e9       	ldi	r30, 0x90	; 144
    819e:	fd e0       	ldi	r31, 0x0D	; 13
    81a0:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    81a2:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    81a4:	0e 94 90 40 	call	0x8120	; 0x8120 <clear_sprites>
	Print(8, 15, (char*) str1Player);
    81a8:	4c ea       	ldi	r20, 0xAC	; 172
    81aa:	59 e0       	ldi	r21, 0x09	; 9
    81ac:	6f e0       	ldi	r22, 0x0F	; 15
    81ae:	70 e0       	ldi	r23, 0x00	; 0
    81b0:	88 e0       	ldi	r24, 0x08	; 8
    81b2:	90 e0       	ldi	r25, 0x00	; 0
    81b4:	0e 94 a9 34 	call	0x6952	; 0x6952 <Print>
	Print(8, 16, (char*) strHighscores);
    81b8:	40 ea       	ldi	r20, 0xA0	; 160
    81ba:	59 e0       	ldi	r21, 0x09	; 9
    81bc:	60 e1       	ldi	r22, 0x10	; 16
    81be:	70 e0       	ldi	r23, 0x00	; 0
    81c0:	88 e0       	ldi	r24, 0x08	; 8
    81c2:	90 e0       	ldi	r25, 0x00	; 0
    81c4:	0e 94 a9 34 	call	0x6952	; 0x6952 <Print>
	Print(6, 21, (char*) strSelectHandle);
    81c8:	4f e8       	ldi	r20, 0x8F	; 143
    81ca:	59 e0       	ldi	r21, 0x09	; 9
    81cc:	65 e1       	ldi	r22, 0x15	; 21
    81ce:	70 e0       	ldi	r23, 0x00	; 0
    81d0:	86 e0       	ldi	r24, 0x06	; 6
    81d2:	90 e0       	ldi	r25, 0x00	; 0
    81d4:	0e 94 a9 34 	call	0x6952	; 0x6952 <Print>
	Print(4, 26, (char*) strCopyright);
    81d8:	42 eb       	ldi	r20, 0xB2	; 178
    81da:	59 e0       	ldi	r21, 0x09	; 9
    81dc:	6a e1       	ldi	r22, 0x1A	; 26
    81de:	70 e0       	ldi	r23, 0x00	; 0
    81e0:	84 e0       	ldi	r24, 0x04	; 4
    81e2:	90 e0       	ldi	r25, 0x00	; 0
    81e4:	0e 94 a9 34 	call	0x6952	; 0x6952 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    81e8:	4b e1       	ldi	r20, 0x1B	; 27
    81ea:	53 e4       	ldi	r21, 0x43	; 67
    81ec:	65 e0       	ldi	r22, 0x05	; 5
    81ee:	86 e0       	ldi	r24, 0x06	; 6
    81f0:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    81f4:	40 e0       	ldi	r20, 0x00	; 0
    81f6:	6f e2       	ldi	r22, 0x2F	; 47
    81f8:	7a e2       	ldi	r23, 0x2A	; 42
    81fa:	80 e0       	ldi	r24, 0x00	; 0
    81fc:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    8200:	01 e0       	ldi	r16, 0x01	; 1
    8202:	21 e0       	ldi	r18, 0x01	; 1
    8204:	48 e7       	ldi	r20, 0x78	; 120
    8206:	68 e3       	ldi	r22, 0x38	; 56
    8208:	80 e0       	ldi	r24, 0x00	; 0
    820a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <LBMoveSprite>
	LBRotateSprites(1);
    820e:	81 e0       	ldi	r24, 0x01	; 1
}
    8210:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    8212:	0c 94 71 36 	jmp	0x6ce2	; 0x6ce2 <LBRotateSprites>

00008216 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    8216:	fc 01       	movw	r30, r24
    8218:	20 81       	ld	r18, Z
    821a:	31 81       	ldd	r19, Z+1	; 0x01
    821c:	28 70       	andi	r18, 0x08	; 8
    821e:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    8220:	81 e0       	ldi	r24, 0x01	; 1
    8222:	23 2b       	or	r18, r19
    8224:	09 f4       	brne	.+2      	; 0x8228 <select_pressed+0x12>
    8226:	80 e0       	ldi	r24, 0x00	; 0
}
    8228:	08 95       	ret

0000822a <update_splash>:

void update_splash()
{
    822a:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    822c:	80 91 50 0e 	lds	r24, 0x0E50
    8230:	85 ff       	sbrs	r24, 5
    8232:	0b c0       	rjmp	.+22     	; 0x824a <update_splash+0x20>
    8234:	90 91 93 0d 	lds	r25, 0x0D93
    8238:	91 11       	cpse	r25, r1
    823a:	07 c0       	rjmp	.+14     	; 0x824a <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    823c:	81 e0       	ldi	r24, 0x01	; 1
    823e:	80 93 93 0d 	sts	0x0D93, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    8242:	01 e0       	ldi	r16, 0x01	; 1
    8244:	21 e0       	ldi	r18, 0x01	; 1
    8246:	40 e8       	ldi	r20, 0x80	; 128
    8248:	0b c0       	rjmp	.+22     	; 0x8260 <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    824a:	84 ff       	sbrs	r24, 4
    824c:	0e c0       	rjmp	.+28     	; 0x826a <update_splash+0x40>
    824e:	80 91 93 0d 	lds	r24, 0x0D93
    8252:	81 30       	cpi	r24, 0x01	; 1
    8254:	51 f4       	brne	.+20     	; 0x826a <update_splash+0x40>
	{
		game.selection = START_SELECTED;
    8256:	10 92 93 0d 	sts	0x0D93, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    825a:	01 e0       	ldi	r16, 0x01	; 1
    825c:	21 e0       	ldi	r18, 0x01	; 1
    825e:	48 e7       	ldi	r20, 0x78	; 120
    8260:	68 e3       	ldi	r22, 0x38	; 56
    8262:	80 e0       	ldi	r24, 0x00	; 0
    8264:	0e 94 33 36 	call	0x6c66	; 0x6c66 <LBMoveSprite>
    8268:	11 c0       	rjmp	.+34     	; 0x828c <update_splash+0x62>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    826a:	80 e5       	ldi	r24, 0x50	; 80
    826c:	9e e0       	ldi	r25, 0x0E	; 14
    826e:	0e 94 0b 41 	call	0x8216	; 0x8216 <select_pressed>
    8272:	88 23       	and	r24, r24
    8274:	59 f0       	breq	.+22     	; 0x828c <update_splash+0x62>
    8276:	80 91 93 0d 	lds	r24, 0x0D93
    827a:	81 11       	cpse	r24, r1
    827c:	07 c0       	rjmp	.+14     	; 0x828c <update_splash+0x62>
	{
		game.current_screen = LEVEL;
    827e:	82 e0       	ldi	r24, 0x02	; 2
    8280:	80 93 90 0d 	sts	0x0D90, r24
		level_transition(0);
    8284:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}
}
    8286:	0f 91       	pop	r16
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    8288:	0c 94 a2 40 	jmp	0x8144	; 0x8144 <level_transition>
		return;
	}
}
    828c:	0f 91       	pop	r16
    828e:	08 95       	ret

00008290 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    8290:	89 e3       	ldi	r24, 0x39	; 57
    8292:	9b e1       	ldi	r25, 0x1B	; 27
    8294:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <InitMusicPlayer>
	ClearVram();
    8298:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <ClearVram>
	SetMasterVolume(0x05);
    829c:	85 e0       	ldi	r24, 0x05	; 5
    829e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <SetMasterVolume>
	SetTileTable(tiles_data);
    82a2:	85 e3       	ldi	r24, 0x35	; 53
    82a4:	9a e2       	ldi	r25, 0x2A	; 42
    82a6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    82aa:	85 e4       	ldi	r24, 0x45	; 69
    82ac:	9d e1       	ldi	r25, 0x1D	; 29
    82ae:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    82b2:	83 e2       	ldi	r24, 0x23	; 35
    82b4:	0e 94 39 27 	call	0x4e72	; 0x4e72 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    82b8:	60 e0       	ldi	r22, 0x00	; 0
    82ba:	83 e0       	ldi	r24, 0x03	; 3
    82bc:	0e 94 20 35 	call	0x6a40	; 0x6a40 <FadeIn>
	init_game_state();
    82c0:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <init_game_state>
	load_splash();
    82c4:	0e 94 cd 40 	call	0x819a	; 0x819a <load_splash>
	while (1)
	{
		WaitVsync(1);
    82c8:	81 e0       	ldi	r24, 0x01	; 1
    82ca:	90 e0       	ldi	r25, 0x00	; 0
    82cc:	0e 94 c4 34 	call	0x6988	; 0x6988 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    82d0:	60 e0       	ldi	r22, 0x00	; 0
    82d2:	80 e5       	ldi	r24, 0x50	; 80
    82d4:	9e e0       	ldi	r25, 0x0E	; 14
    82d6:	0e 94 87 35 	call	0x6b0e	; 0x6b0e <LBGetJoyPadState>
		switch (game.current_screen)
    82da:	80 91 90 0d 	lds	r24, 0x0D90
    82de:	88 23       	and	r24, r24
    82e0:	51 f0       	breq	.+20     	; 0x82f6 <main+0x66>
    82e2:	82 30       	cpi	r24, 0x02	; 2
    82e4:	89 f7       	brne	.-30     	; 0x82c8 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites(1);
				break;
			case LEVEL:
				update_level();
    82e6:	0e 94 15 40 	call	0x802a	; 0x802a <update_level>
				update_player();
    82ea:	0e 94 3e 3a 	call	0x747c	; 0x747c <update_player>
				update_player_position();
    82ee:	0e 94 57 3f 	call	0x7eae	; 0x7eae <update_player_position>
				LBRotateSprites(6);
    82f2:	86 e0       	ldi	r24, 0x06	; 6
    82f4:	03 c0       	rjmp	.+6      	; 0x82fc <main+0x6c>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    82f6:	0e 94 15 41 	call	0x822a	; 0x822a <update_splash>
				LBRotateSprites(1);
    82fa:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case LEVEL:
				update_level();
				update_player();
				update_player_position();
				LBRotateSprites(6);
    82fc:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <LBRotateSprites>
				break;
    8300:	e3 cf       	rjmp	.-58     	; 0x82c8 <main+0x38>

00008302 <__udivmodhi4>:
    8302:	aa 1b       	sub	r26, r26
    8304:	bb 1b       	sub	r27, r27
    8306:	51 e1       	ldi	r21, 0x11	; 17
    8308:	07 c0       	rjmp	.+14     	; 0x8318 <__udivmodhi4_ep>

0000830a <__udivmodhi4_loop>:
    830a:	aa 1f       	adc	r26, r26
    830c:	bb 1f       	adc	r27, r27
    830e:	a6 17       	cp	r26, r22
    8310:	b7 07       	cpc	r27, r23
    8312:	10 f0       	brcs	.+4      	; 0x8318 <__udivmodhi4_ep>
    8314:	a6 1b       	sub	r26, r22
    8316:	b7 0b       	sbc	r27, r23

00008318 <__udivmodhi4_ep>:
    8318:	88 1f       	adc	r24, r24
    831a:	99 1f       	adc	r25, r25
    831c:	5a 95       	dec	r21
    831e:	a9 f7       	brne	.-22     	; 0x830a <__udivmodhi4_loop>
    8320:	80 95       	com	r24
    8322:	90 95       	com	r25
    8324:	bc 01       	movw	r22, r24
    8326:	cd 01       	movw	r24, r26
    8328:	08 95       	ret

0000832a <__divmodhi4>:
    832a:	97 fb       	bst	r25, 7
    832c:	07 2e       	mov	r0, r23
    832e:	16 f4       	brtc	.+4      	; 0x8334 <__divmodhi4+0xa>
    8330:	00 94       	com	r0
    8332:	07 d0       	rcall	.+14     	; 0x8342 <__divmodhi4_neg1>
    8334:	77 fd       	sbrc	r23, 7
    8336:	09 d0       	rcall	.+18     	; 0x834a <__divmodhi4_neg2>
    8338:	0e 94 81 41 	call	0x8302	; 0x8302 <__udivmodhi4>
    833c:	07 fc       	sbrc	r0, 7
    833e:	05 d0       	rcall	.+10     	; 0x834a <__divmodhi4_neg2>
    8340:	3e f4       	brtc	.+14     	; 0x8350 <__divmodhi4_exit>

00008342 <__divmodhi4_neg1>:
    8342:	90 95       	com	r25
    8344:	81 95       	neg	r24
    8346:	9f 4f       	sbci	r25, 0xFF	; 255
    8348:	08 95       	ret

0000834a <__divmodhi4_neg2>:
    834a:	70 95       	com	r23
    834c:	61 95       	neg	r22
    834e:	7f 4f       	sbci	r23, 0xFF	; 255

00008350 <__divmodhi4_exit>:
    8350:	08 95       	ret

00008352 <__tablejump2__>:
    8352:	ee 0f       	add	r30, r30
    8354:	ff 1f       	adc	r31, r31
    8356:	05 90       	lpm	r0, Z+
    8358:	f4 91       	lpm	r31, Z
    835a:	e0 2d       	mov	r30, r0
    835c:	09 94       	ijmp

0000835e <__subsf3>:
    835e:	50 58       	subi	r21, 0x80	; 128

00008360 <__addsf3>:
    8360:	bb 27       	eor	r27, r27
    8362:	aa 27       	eor	r26, r26
    8364:	0e d0       	rcall	.+28     	; 0x8382 <__addsf3x>
    8366:	08 c1       	rjmp	.+528    	; 0x8578 <__fp_round>
    8368:	f9 d0       	rcall	.+498    	; 0x855c <__fp_pscA>
    836a:	30 f0       	brcs	.+12     	; 0x8378 <__addsf3+0x18>
    836c:	fe d0       	rcall	.+508    	; 0x856a <__fp_pscB>
    836e:	20 f0       	brcs	.+8      	; 0x8378 <__addsf3+0x18>
    8370:	31 f4       	brne	.+12     	; 0x837e <__addsf3+0x1e>
    8372:	9f 3f       	cpi	r25, 0xFF	; 255
    8374:	11 f4       	brne	.+4      	; 0x837a <__addsf3+0x1a>
    8376:	1e f4       	brtc	.+6      	; 0x837e <__addsf3+0x1e>
    8378:	ee c0       	rjmp	.+476    	; 0x8556 <__fp_nan>
    837a:	0e f4       	brtc	.+2      	; 0x837e <__addsf3+0x1e>
    837c:	e0 95       	com	r30
    837e:	e7 fb       	bst	r30, 7
    8380:	e4 c0       	rjmp	.+456    	; 0x854a <__fp_inf>

00008382 <__addsf3x>:
    8382:	e9 2f       	mov	r30, r25
    8384:	0a d1       	rcall	.+532    	; 0x859a <__fp_split3>
    8386:	80 f3       	brcs	.-32     	; 0x8368 <__addsf3+0x8>
    8388:	ba 17       	cp	r27, r26
    838a:	62 07       	cpc	r22, r18
    838c:	73 07       	cpc	r23, r19
    838e:	84 07       	cpc	r24, r20
    8390:	95 07       	cpc	r25, r21
    8392:	18 f0       	brcs	.+6      	; 0x839a <__addsf3x+0x18>
    8394:	71 f4       	brne	.+28     	; 0x83b2 <__addsf3x+0x30>
    8396:	9e f5       	brtc	.+102    	; 0x83fe <__addsf3x+0x7c>
    8398:	22 c1       	rjmp	.+580    	; 0x85de <__fp_zero>
    839a:	0e f4       	brtc	.+2      	; 0x839e <__addsf3x+0x1c>
    839c:	e0 95       	com	r30
    839e:	0b 2e       	mov	r0, r27
    83a0:	ba 2f       	mov	r27, r26
    83a2:	a0 2d       	mov	r26, r0
    83a4:	0b 01       	movw	r0, r22
    83a6:	b9 01       	movw	r22, r18
    83a8:	90 01       	movw	r18, r0
    83aa:	0c 01       	movw	r0, r24
    83ac:	ca 01       	movw	r24, r20
    83ae:	a0 01       	movw	r20, r0
    83b0:	11 24       	eor	r1, r1
    83b2:	ff 27       	eor	r31, r31
    83b4:	59 1b       	sub	r21, r25
    83b6:	99 f0       	breq	.+38     	; 0x83de <__addsf3x+0x5c>
    83b8:	59 3f       	cpi	r21, 0xF9	; 249
    83ba:	50 f4       	brcc	.+20     	; 0x83d0 <__addsf3x+0x4e>
    83bc:	50 3e       	cpi	r21, 0xE0	; 224
    83be:	68 f1       	brcs	.+90     	; 0x841a <__addsf3x+0x98>
    83c0:	1a 16       	cp	r1, r26
    83c2:	f0 40       	sbci	r31, 0x00	; 0
    83c4:	a2 2f       	mov	r26, r18
    83c6:	23 2f       	mov	r18, r19
    83c8:	34 2f       	mov	r19, r20
    83ca:	44 27       	eor	r20, r20
    83cc:	58 5f       	subi	r21, 0xF8	; 248
    83ce:	f3 cf       	rjmp	.-26     	; 0x83b6 <__addsf3x+0x34>
    83d0:	46 95       	lsr	r20
    83d2:	37 95       	ror	r19
    83d4:	27 95       	ror	r18
    83d6:	a7 95       	ror	r26
    83d8:	f0 40       	sbci	r31, 0x00	; 0
    83da:	53 95       	inc	r21
    83dc:	c9 f7       	brne	.-14     	; 0x83d0 <__addsf3x+0x4e>
    83de:	7e f4       	brtc	.+30     	; 0x83fe <__addsf3x+0x7c>
    83e0:	1f 16       	cp	r1, r31
    83e2:	ba 0b       	sbc	r27, r26
    83e4:	62 0b       	sbc	r22, r18
    83e6:	73 0b       	sbc	r23, r19
    83e8:	84 0b       	sbc	r24, r20
    83ea:	ba f0       	brmi	.+46     	; 0x841a <__addsf3x+0x98>
    83ec:	91 50       	subi	r25, 0x01	; 1
    83ee:	a1 f0       	breq	.+40     	; 0x8418 <__addsf3x+0x96>
    83f0:	ff 0f       	add	r31, r31
    83f2:	bb 1f       	adc	r27, r27
    83f4:	66 1f       	adc	r22, r22
    83f6:	77 1f       	adc	r23, r23
    83f8:	88 1f       	adc	r24, r24
    83fa:	c2 f7       	brpl	.-16     	; 0x83ec <__addsf3x+0x6a>
    83fc:	0e c0       	rjmp	.+28     	; 0x841a <__addsf3x+0x98>
    83fe:	ba 0f       	add	r27, r26
    8400:	62 1f       	adc	r22, r18
    8402:	73 1f       	adc	r23, r19
    8404:	84 1f       	adc	r24, r20
    8406:	48 f4       	brcc	.+18     	; 0x841a <__addsf3x+0x98>
    8408:	87 95       	ror	r24
    840a:	77 95       	ror	r23
    840c:	67 95       	ror	r22
    840e:	b7 95       	ror	r27
    8410:	f7 95       	ror	r31
    8412:	9e 3f       	cpi	r25, 0xFE	; 254
    8414:	08 f0       	brcs	.+2      	; 0x8418 <__addsf3x+0x96>
    8416:	b3 cf       	rjmp	.-154    	; 0x837e <__addsf3+0x1e>
    8418:	93 95       	inc	r25
    841a:	88 0f       	add	r24, r24
    841c:	08 f0       	brcs	.+2      	; 0x8420 <__addsf3x+0x9e>
    841e:	99 27       	eor	r25, r25
    8420:	ee 0f       	add	r30, r30
    8422:	97 95       	ror	r25
    8424:	87 95       	ror	r24
    8426:	08 95       	ret

00008428 <__cmpsf2>:
    8428:	6c d0       	rcall	.+216    	; 0x8502 <__fp_cmp>
    842a:	08 f4       	brcc	.+2      	; 0x842e <__cmpsf2+0x6>
    842c:	81 e0       	ldi	r24, 0x01	; 1
    842e:	08 95       	ret

00008430 <__fixunssfsi>:
    8430:	bc d0       	rcall	.+376    	; 0x85aa <__fp_splitA>
    8432:	88 f0       	brcs	.+34     	; 0x8456 <__fixunssfsi+0x26>
    8434:	9f 57       	subi	r25, 0x7F	; 127
    8436:	90 f0       	brcs	.+36     	; 0x845c <__fixunssfsi+0x2c>
    8438:	b9 2f       	mov	r27, r25
    843a:	99 27       	eor	r25, r25
    843c:	b7 51       	subi	r27, 0x17	; 23
    843e:	a0 f0       	brcs	.+40     	; 0x8468 <__fixunssfsi+0x38>
    8440:	d1 f0       	breq	.+52     	; 0x8476 <__fixunssfsi+0x46>
    8442:	66 0f       	add	r22, r22
    8444:	77 1f       	adc	r23, r23
    8446:	88 1f       	adc	r24, r24
    8448:	99 1f       	adc	r25, r25
    844a:	1a f0       	brmi	.+6      	; 0x8452 <__fixunssfsi+0x22>
    844c:	ba 95       	dec	r27
    844e:	c9 f7       	brne	.-14     	; 0x8442 <__fixunssfsi+0x12>
    8450:	12 c0       	rjmp	.+36     	; 0x8476 <__fixunssfsi+0x46>
    8452:	b1 30       	cpi	r27, 0x01	; 1
    8454:	81 f0       	breq	.+32     	; 0x8476 <__fixunssfsi+0x46>
    8456:	c3 d0       	rcall	.+390    	; 0x85de <__fp_zero>
    8458:	b1 e0       	ldi	r27, 0x01	; 1
    845a:	08 95       	ret
    845c:	c0 c0       	rjmp	.+384    	; 0x85de <__fp_zero>
    845e:	67 2f       	mov	r22, r23
    8460:	78 2f       	mov	r23, r24
    8462:	88 27       	eor	r24, r24
    8464:	b8 5f       	subi	r27, 0xF8	; 248
    8466:	39 f0       	breq	.+14     	; 0x8476 <__fixunssfsi+0x46>
    8468:	b9 3f       	cpi	r27, 0xF9	; 249
    846a:	cc f3       	brlt	.-14     	; 0x845e <__fixunssfsi+0x2e>
    846c:	86 95       	lsr	r24
    846e:	77 95       	ror	r23
    8470:	67 95       	ror	r22
    8472:	b3 95       	inc	r27
    8474:	d9 f7       	brne	.-10     	; 0x846c <__fixunssfsi+0x3c>
    8476:	3e f4       	brtc	.+14     	; 0x8486 <__fixunssfsi+0x56>
    8478:	90 95       	com	r25
    847a:	80 95       	com	r24
    847c:	70 95       	com	r23
    847e:	61 95       	neg	r22
    8480:	7f 4f       	sbci	r23, 0xFF	; 255
    8482:	8f 4f       	sbci	r24, 0xFF	; 255
    8484:	9f 4f       	sbci	r25, 0xFF	; 255
    8486:	08 95       	ret

00008488 <__floatunsisf>:
    8488:	e8 94       	clt
    848a:	09 c0       	rjmp	.+18     	; 0x849e <__floatsisf+0x12>

0000848c <__floatsisf>:
    848c:	97 fb       	bst	r25, 7
    848e:	3e f4       	brtc	.+14     	; 0x849e <__floatsisf+0x12>
    8490:	90 95       	com	r25
    8492:	80 95       	com	r24
    8494:	70 95       	com	r23
    8496:	61 95       	neg	r22
    8498:	7f 4f       	sbci	r23, 0xFF	; 255
    849a:	8f 4f       	sbci	r24, 0xFF	; 255
    849c:	9f 4f       	sbci	r25, 0xFF	; 255
    849e:	99 23       	and	r25, r25
    84a0:	a9 f0       	breq	.+42     	; 0x84cc <__floatsisf+0x40>
    84a2:	f9 2f       	mov	r31, r25
    84a4:	96 e9       	ldi	r25, 0x96	; 150
    84a6:	bb 27       	eor	r27, r27
    84a8:	93 95       	inc	r25
    84aa:	f6 95       	lsr	r31
    84ac:	87 95       	ror	r24
    84ae:	77 95       	ror	r23
    84b0:	67 95       	ror	r22
    84b2:	b7 95       	ror	r27
    84b4:	f1 11       	cpse	r31, r1
    84b6:	f8 cf       	rjmp	.-16     	; 0x84a8 <__floatsisf+0x1c>
    84b8:	fa f4       	brpl	.+62     	; 0x84f8 <__floatsisf+0x6c>
    84ba:	bb 0f       	add	r27, r27
    84bc:	11 f4       	brne	.+4      	; 0x84c2 <__floatsisf+0x36>
    84be:	60 ff       	sbrs	r22, 0
    84c0:	1b c0       	rjmp	.+54     	; 0x84f8 <__floatsisf+0x6c>
    84c2:	6f 5f       	subi	r22, 0xFF	; 255
    84c4:	7f 4f       	sbci	r23, 0xFF	; 255
    84c6:	8f 4f       	sbci	r24, 0xFF	; 255
    84c8:	9f 4f       	sbci	r25, 0xFF	; 255
    84ca:	16 c0       	rjmp	.+44     	; 0x84f8 <__floatsisf+0x6c>
    84cc:	88 23       	and	r24, r24
    84ce:	11 f0       	breq	.+4      	; 0x84d4 <__floatsisf+0x48>
    84d0:	96 e9       	ldi	r25, 0x96	; 150
    84d2:	11 c0       	rjmp	.+34     	; 0x84f6 <__floatsisf+0x6a>
    84d4:	77 23       	and	r23, r23
    84d6:	21 f0       	breq	.+8      	; 0x84e0 <__floatsisf+0x54>
    84d8:	9e e8       	ldi	r25, 0x8E	; 142
    84da:	87 2f       	mov	r24, r23
    84dc:	76 2f       	mov	r23, r22
    84de:	05 c0       	rjmp	.+10     	; 0x84ea <__floatsisf+0x5e>
    84e0:	66 23       	and	r22, r22
    84e2:	71 f0       	breq	.+28     	; 0x8500 <__floatsisf+0x74>
    84e4:	96 e8       	ldi	r25, 0x86	; 134
    84e6:	86 2f       	mov	r24, r22
    84e8:	70 e0       	ldi	r23, 0x00	; 0
    84ea:	60 e0       	ldi	r22, 0x00	; 0
    84ec:	2a f0       	brmi	.+10     	; 0x84f8 <__floatsisf+0x6c>
    84ee:	9a 95       	dec	r25
    84f0:	66 0f       	add	r22, r22
    84f2:	77 1f       	adc	r23, r23
    84f4:	88 1f       	adc	r24, r24
    84f6:	da f7       	brpl	.-10     	; 0x84ee <__floatsisf+0x62>
    84f8:	88 0f       	add	r24, r24
    84fa:	96 95       	lsr	r25
    84fc:	87 95       	ror	r24
    84fe:	97 f9       	bld	r25, 7
    8500:	08 95       	ret

00008502 <__fp_cmp>:
    8502:	99 0f       	add	r25, r25
    8504:	00 08       	sbc	r0, r0
    8506:	55 0f       	add	r21, r21
    8508:	aa 0b       	sbc	r26, r26
    850a:	e0 e8       	ldi	r30, 0x80	; 128
    850c:	fe ef       	ldi	r31, 0xFE	; 254
    850e:	16 16       	cp	r1, r22
    8510:	17 06       	cpc	r1, r23
    8512:	e8 07       	cpc	r30, r24
    8514:	f9 07       	cpc	r31, r25
    8516:	c0 f0       	brcs	.+48     	; 0x8548 <__fp_cmp+0x46>
    8518:	12 16       	cp	r1, r18
    851a:	13 06       	cpc	r1, r19
    851c:	e4 07       	cpc	r30, r20
    851e:	f5 07       	cpc	r31, r21
    8520:	98 f0       	brcs	.+38     	; 0x8548 <__fp_cmp+0x46>
    8522:	62 1b       	sub	r22, r18
    8524:	73 0b       	sbc	r23, r19
    8526:	84 0b       	sbc	r24, r20
    8528:	95 0b       	sbc	r25, r21
    852a:	39 f4       	brne	.+14     	; 0x853a <__fp_cmp+0x38>
    852c:	0a 26       	eor	r0, r26
    852e:	61 f0       	breq	.+24     	; 0x8548 <__fp_cmp+0x46>
    8530:	23 2b       	or	r18, r19
    8532:	24 2b       	or	r18, r20
    8534:	25 2b       	or	r18, r21
    8536:	21 f4       	brne	.+8      	; 0x8540 <__fp_cmp+0x3e>
    8538:	08 95       	ret
    853a:	0a 26       	eor	r0, r26
    853c:	09 f4       	brne	.+2      	; 0x8540 <__fp_cmp+0x3e>
    853e:	a1 40       	sbci	r26, 0x01	; 1
    8540:	a6 95       	lsr	r26
    8542:	8f ef       	ldi	r24, 0xFF	; 255
    8544:	81 1d       	adc	r24, r1
    8546:	81 1d       	adc	r24, r1
    8548:	08 95       	ret

0000854a <__fp_inf>:
    854a:	97 f9       	bld	r25, 7
    854c:	9f 67       	ori	r25, 0x7F	; 127
    854e:	80 e8       	ldi	r24, 0x80	; 128
    8550:	70 e0       	ldi	r23, 0x00	; 0
    8552:	60 e0       	ldi	r22, 0x00	; 0
    8554:	08 95       	ret

00008556 <__fp_nan>:
    8556:	9f ef       	ldi	r25, 0xFF	; 255
    8558:	80 ec       	ldi	r24, 0xC0	; 192
    855a:	08 95       	ret

0000855c <__fp_pscA>:
    855c:	00 24       	eor	r0, r0
    855e:	0a 94       	dec	r0
    8560:	16 16       	cp	r1, r22
    8562:	17 06       	cpc	r1, r23
    8564:	18 06       	cpc	r1, r24
    8566:	09 06       	cpc	r0, r25
    8568:	08 95       	ret

0000856a <__fp_pscB>:
    856a:	00 24       	eor	r0, r0
    856c:	0a 94       	dec	r0
    856e:	12 16       	cp	r1, r18
    8570:	13 06       	cpc	r1, r19
    8572:	14 06       	cpc	r1, r20
    8574:	05 06       	cpc	r0, r21
    8576:	08 95       	ret

00008578 <__fp_round>:
    8578:	09 2e       	mov	r0, r25
    857a:	03 94       	inc	r0
    857c:	00 0c       	add	r0, r0
    857e:	11 f4       	brne	.+4      	; 0x8584 <__fp_round+0xc>
    8580:	88 23       	and	r24, r24
    8582:	52 f0       	brmi	.+20     	; 0x8598 <__fp_round+0x20>
    8584:	bb 0f       	add	r27, r27
    8586:	40 f4       	brcc	.+16     	; 0x8598 <__fp_round+0x20>
    8588:	bf 2b       	or	r27, r31
    858a:	11 f4       	brne	.+4      	; 0x8590 <__fp_round+0x18>
    858c:	60 ff       	sbrs	r22, 0
    858e:	04 c0       	rjmp	.+8      	; 0x8598 <__fp_round+0x20>
    8590:	6f 5f       	subi	r22, 0xFF	; 255
    8592:	7f 4f       	sbci	r23, 0xFF	; 255
    8594:	8f 4f       	sbci	r24, 0xFF	; 255
    8596:	9f 4f       	sbci	r25, 0xFF	; 255
    8598:	08 95       	ret

0000859a <__fp_split3>:
    859a:	57 fd       	sbrc	r21, 7
    859c:	90 58       	subi	r25, 0x80	; 128
    859e:	44 0f       	add	r20, r20
    85a0:	55 1f       	adc	r21, r21
    85a2:	59 f0       	breq	.+22     	; 0x85ba <__fp_splitA+0x10>
    85a4:	5f 3f       	cpi	r21, 0xFF	; 255
    85a6:	71 f0       	breq	.+28     	; 0x85c4 <__fp_splitA+0x1a>
    85a8:	47 95       	ror	r20

000085aa <__fp_splitA>:
    85aa:	88 0f       	add	r24, r24
    85ac:	97 fb       	bst	r25, 7
    85ae:	99 1f       	adc	r25, r25
    85b0:	61 f0       	breq	.+24     	; 0x85ca <__fp_splitA+0x20>
    85b2:	9f 3f       	cpi	r25, 0xFF	; 255
    85b4:	79 f0       	breq	.+30     	; 0x85d4 <__fp_splitA+0x2a>
    85b6:	87 95       	ror	r24
    85b8:	08 95       	ret
    85ba:	12 16       	cp	r1, r18
    85bc:	13 06       	cpc	r1, r19
    85be:	14 06       	cpc	r1, r20
    85c0:	55 1f       	adc	r21, r21
    85c2:	f2 cf       	rjmp	.-28     	; 0x85a8 <__fp_split3+0xe>
    85c4:	46 95       	lsr	r20
    85c6:	f1 df       	rcall	.-30     	; 0x85aa <__fp_splitA>
    85c8:	08 c0       	rjmp	.+16     	; 0x85da <__fp_splitA+0x30>
    85ca:	16 16       	cp	r1, r22
    85cc:	17 06       	cpc	r1, r23
    85ce:	18 06       	cpc	r1, r24
    85d0:	99 1f       	adc	r25, r25
    85d2:	f1 cf       	rjmp	.-30     	; 0x85b6 <__fp_splitA+0xc>
    85d4:	86 95       	lsr	r24
    85d6:	71 05       	cpc	r23, r1
    85d8:	61 05       	cpc	r22, r1
    85da:	08 94       	sec
    85dc:	08 95       	ret

000085de <__fp_zero>:
    85de:	e8 94       	clt

000085e0 <__fp_szero>:
    85e0:	bb 27       	eor	r27, r27
    85e2:	66 27       	eor	r22, r22
    85e4:	77 27       	eor	r23, r23
    85e6:	cb 01       	movw	r24, r22
    85e8:	97 f9       	bld	r25, 7
    85ea:	08 95       	ret

000085ec <__gesf2>:
    85ec:	8a df       	rcall	.-236    	; 0x8502 <__fp_cmp>
    85ee:	08 f4       	brcc	.+2      	; 0x85f2 <__gesf2+0x6>
    85f0:	8f ef       	ldi	r24, 0xFF	; 255
    85f2:	08 95       	ret

000085f4 <__mulsf3>:
    85f4:	0b d0       	rcall	.+22     	; 0x860c <__mulsf3x>
    85f6:	c0 cf       	rjmp	.-128    	; 0x8578 <__fp_round>
    85f8:	b1 df       	rcall	.-158    	; 0x855c <__fp_pscA>
    85fa:	28 f0       	brcs	.+10     	; 0x8606 <__mulsf3+0x12>
    85fc:	b6 df       	rcall	.-148    	; 0x856a <__fp_pscB>
    85fe:	18 f0       	brcs	.+6      	; 0x8606 <__mulsf3+0x12>
    8600:	95 23       	and	r25, r21
    8602:	09 f0       	breq	.+2      	; 0x8606 <__mulsf3+0x12>
    8604:	a2 cf       	rjmp	.-188    	; 0x854a <__fp_inf>
    8606:	a7 cf       	rjmp	.-178    	; 0x8556 <__fp_nan>
    8608:	11 24       	eor	r1, r1
    860a:	ea cf       	rjmp	.-44     	; 0x85e0 <__fp_szero>

0000860c <__mulsf3x>:
    860c:	c6 df       	rcall	.-116    	; 0x859a <__fp_split3>
    860e:	a0 f3       	brcs	.-24     	; 0x85f8 <__mulsf3+0x4>

00008610 <__mulsf3_pse>:
    8610:	95 9f       	mul	r25, r21
    8612:	d1 f3       	breq	.-12     	; 0x8608 <__mulsf3+0x14>
    8614:	95 0f       	add	r25, r21
    8616:	50 e0       	ldi	r21, 0x00	; 0
    8618:	55 1f       	adc	r21, r21
    861a:	62 9f       	mul	r22, r18
    861c:	f0 01       	movw	r30, r0
    861e:	72 9f       	mul	r23, r18
    8620:	bb 27       	eor	r27, r27
    8622:	f0 0d       	add	r31, r0
    8624:	b1 1d       	adc	r27, r1
    8626:	63 9f       	mul	r22, r19
    8628:	aa 27       	eor	r26, r26
    862a:	f0 0d       	add	r31, r0
    862c:	b1 1d       	adc	r27, r1
    862e:	aa 1f       	adc	r26, r26
    8630:	64 9f       	mul	r22, r20
    8632:	66 27       	eor	r22, r22
    8634:	b0 0d       	add	r27, r0
    8636:	a1 1d       	adc	r26, r1
    8638:	66 1f       	adc	r22, r22
    863a:	82 9f       	mul	r24, r18
    863c:	22 27       	eor	r18, r18
    863e:	b0 0d       	add	r27, r0
    8640:	a1 1d       	adc	r26, r1
    8642:	62 1f       	adc	r22, r18
    8644:	73 9f       	mul	r23, r19
    8646:	b0 0d       	add	r27, r0
    8648:	a1 1d       	adc	r26, r1
    864a:	62 1f       	adc	r22, r18
    864c:	83 9f       	mul	r24, r19
    864e:	a0 0d       	add	r26, r0
    8650:	61 1d       	adc	r22, r1
    8652:	22 1f       	adc	r18, r18
    8654:	74 9f       	mul	r23, r20
    8656:	33 27       	eor	r19, r19
    8658:	a0 0d       	add	r26, r0
    865a:	61 1d       	adc	r22, r1
    865c:	23 1f       	adc	r18, r19
    865e:	84 9f       	mul	r24, r20
    8660:	60 0d       	add	r22, r0
    8662:	21 1d       	adc	r18, r1
    8664:	82 2f       	mov	r24, r18
    8666:	76 2f       	mov	r23, r22
    8668:	6a 2f       	mov	r22, r26
    866a:	11 24       	eor	r1, r1
    866c:	9f 57       	subi	r25, 0x7F	; 127
    866e:	50 40       	sbci	r21, 0x00	; 0
    8670:	8a f0       	brmi	.+34     	; 0x8694 <__mulsf3_pse+0x84>
    8672:	e1 f0       	breq	.+56     	; 0x86ac <__mulsf3_pse+0x9c>
    8674:	88 23       	and	r24, r24
    8676:	4a f0       	brmi	.+18     	; 0x868a <__mulsf3_pse+0x7a>
    8678:	ee 0f       	add	r30, r30
    867a:	ff 1f       	adc	r31, r31
    867c:	bb 1f       	adc	r27, r27
    867e:	66 1f       	adc	r22, r22
    8680:	77 1f       	adc	r23, r23
    8682:	88 1f       	adc	r24, r24
    8684:	91 50       	subi	r25, 0x01	; 1
    8686:	50 40       	sbci	r21, 0x00	; 0
    8688:	a9 f7       	brne	.-22     	; 0x8674 <__mulsf3_pse+0x64>
    868a:	9e 3f       	cpi	r25, 0xFE	; 254
    868c:	51 05       	cpc	r21, r1
    868e:	70 f0       	brcs	.+28     	; 0x86ac <__mulsf3_pse+0x9c>
    8690:	5c cf       	rjmp	.-328    	; 0x854a <__fp_inf>
    8692:	a6 cf       	rjmp	.-180    	; 0x85e0 <__fp_szero>
    8694:	5f 3f       	cpi	r21, 0xFF	; 255
    8696:	ec f3       	brlt	.-6      	; 0x8692 <__mulsf3_pse+0x82>
    8698:	98 3e       	cpi	r25, 0xE8	; 232
    869a:	dc f3       	brlt	.-10     	; 0x8692 <__mulsf3_pse+0x82>
    869c:	86 95       	lsr	r24
    869e:	77 95       	ror	r23
    86a0:	67 95       	ror	r22
    86a2:	b7 95       	ror	r27
    86a4:	f7 95       	ror	r31
    86a6:	e7 95       	ror	r30
    86a8:	9f 5f       	subi	r25, 0xFF	; 255
    86aa:	c1 f7       	brne	.-16     	; 0x869c <__mulsf3_pse+0x8c>
    86ac:	fe 2b       	or	r31, r30
    86ae:	88 0f       	add	r24, r24
    86b0:	91 1d       	adc	r25, r1
    86b2:	96 95       	lsr	r25
    86b4:	87 95       	ror	r24
    86b6:	97 f9       	bld	r25, 7
    86b8:	08 95       	ret

000086ba <_exit>:
    86ba:	f8 94       	cli

000086bc <__stop_program>:
    86bc:	ff cf       	rjmp	.-2      	; 0x86bc <__stop_program>
