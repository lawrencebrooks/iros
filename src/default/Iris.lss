
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000922c  0000932c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  00009340  2**5
                  CONTENTS, READONLY
  2 .text         0000922c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000009d0  00800502  00800502  0000932e  2**1
                  ALLOC
  4 .stab         00000528  00000000  00000000  00009740  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  00009c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00009f0d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000578  00000000  00000000  00009f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000623c  00000000  00000000  0000a498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001538  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001b56  00000000  00000000  00011c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f1c  00000000  00000000  00013764  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000016b8  00000000  00000000  00014680  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000526c  00000000  00000000  00015d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000648  00000000  00000000  0001afa8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <__ctors_end>
       4:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
       8:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
       c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      10:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      14:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      18:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      1c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      20:	0c 94 c5 2b 	jmp	0x578a	; 0x578a <__vector_8>
      24:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      28:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      2c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      30:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      34:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__vector_13>
      38:	0c 94 cf 29 	jmp	0x539e	; 0x539e <__vector_14>
      3c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      40:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      44:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      48:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      4c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      50:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      54:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      58:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      5c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      60:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      64:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      68:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      6c:	0c 94 4b 26 	jmp	0x4c96	; 0x4c96 <__bad_interrupt>
      70:	ce 3b       	cpi	r28, 0xBE	; 190
      72:	d1 3b       	cpi	r29, 0xB1	; 177
      74:	d4 3b       	cpi	r29, 0xB4	; 180
      76:	d7 3b       	cpi	r29, 0xB7	; 183
      78:	da 3b       	cpi	r29, 0xBA	; 186
      7a:	dd 3b       	cpi	r29, 0xBD	; 189
      7c:	e0 3b       	cpi	r30, 0xB0	; 176

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	71 2c 74 2c d0 2c d4 2c db 2c 7c 2c 81 2c 86 2c     q,t,.,.,.,|,.,.,
      dc:	e3 2c 89 2c 8c 2c 8f 2c ca 2c cd 2c f3 2c           .,.,.,.,.,.,.,

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strLives>:
     979:	4c 49 56 45 53 3a 00                                LIVES:.

00000980 <strShield>:
     980:	53 48 49 45 4c 44 3a 00                             SHIELD:.

00000988 <strScore>:
     988:	53 43 4f 52 45 3a 00                                SCORE:.

0000098f <strSelectHandle>:
     98f:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009a0 <strHighscores>:
     9a0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009ac <str1Player>:
     9ac:	53 54 41 52 54 00                                   START.

000009b2 <strCopyright>:
     9b2:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c2:	4f 4f 4b 53 00                                      OOKS.

000009c7 <spacesong>:
     9c7:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9d7:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9e7:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     9f7:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a07:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a17:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a27:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a37:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a47:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a57:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a67:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a77:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a87:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     a97:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     aa7:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ab7:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ac7:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ad7:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ae7:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     af7:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b07:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b17:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b27:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b37:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b47:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b57:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b67:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b77:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b87:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     b97:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     ba7:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bb7:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bc7:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     bd7:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     be7:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     bf7:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c07:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c17:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c27:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c37:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c47:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c57:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c67:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c77:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c87:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     c97:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ca7:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cb7:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cc7:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     cd7:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ce7:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     cf7:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d07:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d17:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d27:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d37:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d47:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d57:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d67:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d77:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d87:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     d97:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     da7:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     db7:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dc7:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     dd7:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     de7:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     df7:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e07:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e17:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e27:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e37:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e47:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e57:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e67:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e77:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e87:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     e97:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     ea7:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     eb7:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     ec7:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     ed7:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     ee7:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     ef7:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f07:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f17:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f27:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f37:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f47:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f57:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f67:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f77:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f87:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     f97:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     fa7:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fb7:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fc7:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fd7:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     fe7:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     ff7:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1007:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1017:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1027:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1037:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1047:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1057:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001067 <planetsong>:
    1067:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1077:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1087:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1097:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10a7:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10b7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10c7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10d7:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10e7:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    10f7:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1107:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1117:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1127:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1137:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1147:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1157:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1167:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1177:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1187:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1197:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11b7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11c7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11d7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11e7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    11f7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1207:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1217:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1227:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1237:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1247:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1257:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1267:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1277:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1287:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1297:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12a7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12b7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12c7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12d7:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12e7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    12f7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1307:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1317:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1327:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1337:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1347:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1357:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1367:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1377:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1387:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1397:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13a7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13b7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13c7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13d7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13e7:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    13f7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1407:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1417:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1427:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1437:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1447:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1457:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1467:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1477:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1487:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1497:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14a7:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14b7:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14c7:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14d7:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14e7:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    14f7:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1507:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1517:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1527:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1537:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1547:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1557:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1567:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1577:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1587:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1597:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15b7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15c7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15d7:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15e7:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    15f7:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1607:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1617:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1627:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1637:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1647:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1657:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1667:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1677:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1687:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1697:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16a7:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16b7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16c7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16d7:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16e7:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    16f7:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1707:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1717:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1727:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1737:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1747:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1757:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1767:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1777:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1787:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1797:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17a7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17b7:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17c7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17d7:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17e7:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    17f7:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1807:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1817:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1827:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1837:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1847:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1857:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1867:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1877:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1887:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1897:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18a7:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18b7:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18c7:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18d7:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18e7:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    18f7:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1907:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1917:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1927:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1937:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1947:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1957:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1967:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1977:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1987:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1997:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19a7:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19b7:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19c7:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19d7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19e7:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    19f7:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a07:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a17:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a27:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a37:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a47:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a57:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a67:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a77:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a87:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1a97:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1aa7:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ab7:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ac7:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ad7:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ae7:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1af7:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b07:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b17:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b27:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b37:	2f 00                                               /.

00001b39 <my_patches>:
    1b39:	00 00 00 4b 1b 00 00 00 00 00 00 00 4b 1b 00 00     ...K........K...
	...

00001b4b <patch00>:
    1b4b:	00 02 04 00 00 dd 00 ff                             ........

00001b53 <level_data>:
    1b53:	02 00 01 03 01 15 7c 00 00 00 00 00 00 00 00 00     ......|.........
    1b63:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b73:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b83:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b93:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ba3:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bb3:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bc3:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bd3:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1be3:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bf3:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c03:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c13:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c23:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c33:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c43:	7c 00 04 06 00 00 00 00 00 00 00 00 00 00 00 00     |...............
    1c53:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c63:	7b 06 05 05 00 00 00 00 00 00 00 00 00 00 00 00     {...............
    1c73:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c83:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c93:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ca3:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cb3:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cc3:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cd3:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ce3:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cf3:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d03:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d13:	0a 05 07 01 35 05 07 01 33 05 00 00 00 00 00 00     ....5...3.......
    1d23:	02 05 07 01 35 05 07 01 3b 05 00 00 00 00 00 00     ....5...;.......
    1d33:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d43:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d53:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d63:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d73:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d83:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d93:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1da3:	7e 05 02 01 00 00 00 00 00 00 00 00 00 00 00 00     ~...............
    1db3:	05 01 07 05 07 01 27 05 07 01 07 05 07 01 27 05     ......'.......'.
    1dc3:	07 01 03 05 04 05 07 01 27 05 07 01 07 05 07 01     ........'.......
    1dd3:	39 05 00 00 80 05 00 00 00 00 00 00 00 00 00 00     9...............
    1de3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1df3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e03:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e13:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e23:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e33:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e43:	00 00 00 00 6c 05 14 01 00 00 00 00 00 00 00 00     ....l...........
    1e53:	00 00 00 00 1f 01 05 05 5c 01 00 00 00 00 00 00     ........\.......
    1e63:	00 00 00 00 6b 01 15 04 00 00 00 00 00 00 00 00     ....k...........
    1e73:	00 00 00 00 1e 04 05 05 5d 04 00 00 00 00 00 00     ........].......
    1e83:	00 00 00 00 6a 04 16 05 00 00 00 00 00 00 00 00     ....j...........
    1e93:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ea3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1eb3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ec3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ed3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ee3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ef3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f03:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f13:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f23:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f33:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f43:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f53:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f63:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f73:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f83:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f93:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fa3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fb3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fc3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fd3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fe3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ff3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2003:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2013:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2023:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2033:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2043:	00 00 00 00 70 05 07 01 09 05 00 00 00 00 00 00     ....p...........
    2053:	00 00 00 00 2c 05 07 01 35 05 07 01 11 05 00 00     ....,...5.......
    2063:	00 00 00 00 24 05 07 01 55 05 00 00 00 00 00 00     ....$...U.......
    2073:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2083:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    2093:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20a3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20b3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20c3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20d3:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20e3:	00 00 00 00 64 05 07 01 07 05 07 01 07 05 00 00     ....d...........
    20f3:	00 00 00 00 20 05 07 01 07 05 07 01 27 05 07 01     .... .......'...
    2103:	07 05 07 01 0f 05 18 05 07 01 07 05 07 01 53 05     ..............S.
    2113:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2123:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2133:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2143:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2153:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2163:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2173:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2183:	00 00 00 00 00 00 52 05 2e 01 00 00 00 00 00 00     ......R.........
    2193:	00 00 00 00 00 00 34 01 05 05 47 01 00 00 00 00     ......4...G.....
    21a3:	00 00 00 00 00 00 51 01 2f 04 00 00 00 00 00 00     ......Q./.......
    21b3:	00 00 00 00 00 00 33 04 05 05 48 04 00 00 00 00     ......3...H.....
    21c3:	00 00 00 00 00 00 50 04 30 05 00 00 00 00 00 00     ......P.0.......
    21d3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    21e3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    21f3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2203:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2213:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2223:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2233:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2243:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2253:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2263:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2273:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2283:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2293:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22a3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22b3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22c3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22d3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22e3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22f3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2303:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2313:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2323:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2333:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2343:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2353:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2363:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2373:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2383:	00 00 00 00 00 00 56 05 07 01 23 05 00 00 00 00     ......V...#.....
    2393:	00 00 00 00 00 00 12 05 07 01 35 05 07 01 2b 05     ..........5...+.
    23a3:	00 00 00 00 00 00 0a 05 07 01 6f 05 00 00 00 00     ..........o.....
    23b3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23c3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23d3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23e3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23f3:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2403:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2413:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    2423:	00 00 00 00 00 00 4a 05 07 01 07 05 07 01 21 05     ......J.......!.
    2433:	00 00 00 00 00 00 06 05 07 01 07 05 07 01 27 05     ..............'.
    2443:	07 01 07 05 07 01 27 05 02 01 05 01 07 05 07 01     ......'.........
    2453:	6d 05 00 00 00 00 00 00 00 00 80 05 00 00 00 00     m...............
	...
    246b:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    247b:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    248b:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    249b:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24ab:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24bb:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24cb:	00 00 38 05 48 01 00 00 00 00 00 00 00 00 00 00     ..8.H...........
    24db:	00 00 80 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24eb:	00 00 37 01 49 04 00 00 00 00 00 00 00 00 00 00     ..7.I...........
    24fb:	00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
    250b:	00 00 36 04 00 00 00 00 00 00 00 00 00 00 00 00     ..6.............
	...

0000251d <sprites_data>:
    251d:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    252d:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    253d:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    254d:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    255d:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    256d:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    257d:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    258d:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    259d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    25ad:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    25bd:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    25cd:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    25dd:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    25ed:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    25fd:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    260d:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    261d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    262d:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    263d:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    264d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    265d:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    266d:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    267d:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    268d:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    269d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26ad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26dd:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    26ed:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    26fd:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    270d:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    271d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    272d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    273d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    274d:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    275d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    276d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    277d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    278d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    279d:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    27ad:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    27bd:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    27cd:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    27dd:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    27ed:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    27fd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    280d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    281d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    282d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    283d:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    284d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    285d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    286d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    287d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    288d:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    289d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ad:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    28bd:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    28cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28dd:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    28ed:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    28fd:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    290d:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    291d:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    292d:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    293d:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    294d:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    295d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    296d:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    297d:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    298d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    299d:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    29ad:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    29bd:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    29cd:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    29dd:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    29ed:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    29fd:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2a0d:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a1d:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2a2d:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2a3d:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2a4d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2a5d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2a6d:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2a7d:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2a8d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2a9d:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2aad:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2abd:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2acd:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2add:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2aed:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2afd:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2b0d:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2b1d:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2b2d:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2b3d:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2b4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5d:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    2b6d:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    2b7d:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    2b8d:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    2b9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2bad:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2bbd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2bcd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bdd:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2bed:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2bfd:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2c0d:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2c1d:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2c2d:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2c3d:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2c4d:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c5d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2c6d:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2c7d:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2c8d:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2c9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cad:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2cbd:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2ccd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cdd:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2ced:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2cfd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2d0d:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2d1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d3d:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    2d4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d5d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2d6d:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2d7d:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2d8d:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2d9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dbd:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2dcd:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2ddd:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2ded:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2dfd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e0d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e1d:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    2e2d:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    2e3d:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    2e4d:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2e5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2e6d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2e7d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e8d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e9d:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2ead:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2ebd:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2ecd:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2edd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2eed:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2efd:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2f0d:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2f1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f2d:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2f3d:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2f4d:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    2f5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f6d:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2f7d:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2f8d:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2f9d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2fad:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    2fbd:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    2fcd:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2fdd:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2fed:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2ffd:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    300d:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    301d:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    302d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    303d:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    304d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    305d:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    306d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    307d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    308d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    309d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    30ad:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    30bd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    30cd:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    30dd:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    30ed:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    30fd:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    310d:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    311d:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    312d:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    313d:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    314d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    315d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    316d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    317d:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    318d:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    319d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    31ad:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    31bd:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    31cd:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    31dd:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    31ed:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    31fd:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    320d:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

0000321d <map_enemy_spider_1>:
    321d:	01 01 24                                            ..$

00003220 <map_enemy_spider_0>:
    3220:	01 01 19                                            ...

00003223 <map_enemy_shark>:
    3223:	01 01 05                                            ...

00003226 <map_enemy_shot>:
    3226:	01 01 0e                                            ...

00003229 <map_hero_shot>:
    3229:	01 01 04                                            ...

0000322c <map_hero_ship_large>:
    322c:	04 02 26 27 28 29 2a 2b 2c 2d                       ..&'()*+,-

00003236 <map_hero_ship_1>:
    3236:	03 01 25 1b 1c                                      ..%..

0000323b <map_hero_ship_0>:
    323b:	03 01 1a 1b 1c                                      .....

00003240 <map_hero_prone>:
    3240:	03 01 31 32 33                                      ..123

00003245 <map_hero_jump>:
    3245:	02 03 02 03 0a 0d 17 18                             ........

0000324d <map_hero_step_3>:
    324d:	02 03 02 03 0a 2e 2f 30                             ....../0

00003255 <map_hero_step_2>:
    3255:	02 03 00 01 07 0c 15 16                             ........

0000325d <map_hero_step_1>:
    325d:	02 03 02 03 0a 0b 13 14                             ........

00003265 <map_hero_step_0>:
    3265:	02 03 00 01 07 09 11 12                             ........

0000326d <map_hero_idle>:
    326d:	02 03 00 01 07 08 0f 10                             ........

00003275 <map_explosion_2>:
    3275:	01 01 1f                                            ...

00003278 <map_explosion_1>:
    3278:	01 01 1e                                            ...

0000327b <map_explosion_0>:
    327b:	01 01 1d                                            ...

0000327e <map_meteor>:
    327e:	01 01 20                                            .. 

00003281 <map_up_arrow>:
    3281:	01 01 23                                            ..#

00003284 <map_down_arrow>:
    3284:	01 01 22                                            .."

00003287 <map_right_arrow>:
    3287:	01 01 21                                            ..!

0000328a <map_none>:
    328a:	01 01 06                                            ...

0000328d <tiles_data>:
	...
    32cd:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    32dd:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    32ed:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    32fd:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    330d:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    331d:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    332d:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    333d:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    334d:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    335d:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    336d:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    337d:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    338d:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    339d:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    33ad:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    33bd:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    33cd:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    33dd:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    33ed:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    33fd:	af af af af af af af af af af af af af af af af     ................
    340d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    341d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    342d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    343d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    344d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    345d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    346d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    347d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    348d:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    349d:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    34ad:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    34bd:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    34cd:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    34dd:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    34ed:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    34fd:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    350d:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    351d:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    352d:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    353d:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    354d:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    355d:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    356d:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    357d:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    35a5:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    35b5:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35cd:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35dd:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35ed:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35fd:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    360d:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    361d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    362d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    363d:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    364d:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    365d:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    366d:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    367d:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    368d:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    369d:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    36ad:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    36bd:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    36cd:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    36dd:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    36ed:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    36fd:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    370d:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    371d:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    372d:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    373d:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    374d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    375d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    376d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    377d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3799:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    37a9:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    37b9:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    37c9:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    37d9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    37e9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    37f9:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3809:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3819:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3829:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3839:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3849:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    388d:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    389d:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    38ad:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    38bd:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    38cd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    38dd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    38ed:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    38fd:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    390d:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    391d:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    392d:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    393d:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    394d:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    395d:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    396d:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    397d:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    398d:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    399d:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    39ad:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    39bd:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    39cd:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    39dd:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    39ed:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    39fd:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    3a45:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    3a55:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3a65:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3a75:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3a85:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3a95:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3aa5:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ab5:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ac5:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3ad5:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3ae5:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3af5:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b11:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    3b21:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    3b31:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    3b95:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3ba5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3bbd:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d59:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    3d69:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    3d79:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    3d95:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    3da5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3db5:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    3e75:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3e85:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ea5:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3ef5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3f19:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    3f29:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    3f39:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f55:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3f65:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    3f75:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3f95:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    3fa5:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    3fb5:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    3fd5:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3fe5:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    3ff5:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    4015:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    4025:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    4035:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4059:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    4069:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    4079:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    4095:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    40a5:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    40b5:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    40d5:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    40e5:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    40f5:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4115:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    4125:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    4135:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    4155:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    4165:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    4175:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4195:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    41a5:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    41b5:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    420d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    421d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    422d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    423d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4315:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4325:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    433d:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4355:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4365:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    4375:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    4395:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    43a5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    43b5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    43d5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    43e5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    43f5:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4415:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4425:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4435:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4455:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    4465:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4475:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    4495:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    44a5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    44b5:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    44d5:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    44e5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    44f5:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4515:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4525:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    4535:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    4555:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4565:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4575:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4595:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    45a5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    45b5:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    45d9:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    45e9:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    45f9:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    4615:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4625:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    4635:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4655:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4665:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4675:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4695:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    46a5:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    46b5:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    46d5:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    46e5:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    46f5:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4715:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4725:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4735:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4755:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4765:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4775:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    4795:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    47a5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    47b5:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    47d5:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    47e5:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    47f5:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    4815:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4825:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4835:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4855:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4865:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4875:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4895:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48a5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48b5:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    48d5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48e5:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48f5:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4915:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4925:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4935:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4955:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4965:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4975:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4995:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    49a5:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    49b5:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    49d5:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    49e5:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    49f5:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4b3d:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00004b4d <map_star>:
    4b4d:	01 01 0c                                            ...

00004b50 <map_ice_moon>:
    4b50:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00004b5b <map_ice_cloud>:
    4b5b:	01 01 08                                            ...

00004b5e <map_ice_far>:
    4b5e:	01 01 07                                            ...

00004b61 <map_ice_sky>:
    4b61:	01 01 06                                            ...

00004b64 <map_ice_horizon>:
    4b64:	01 01 05                                            ...

00004b67 <map_ice_bottom>:
    4b67:	01 01 04                                            ...

00004b6a <map_ice_right>:
    4b6a:	01 01 03                                            ...

00004b6d <map_ice_middle>:
    4b6d:	01 01 02                                            ...

00004b70 <map_ice_left>:
    4b70:	01 01 01                                            ...

00004b73 <map_splash>:
    4b73:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    4b83:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    4b93:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    4ba3:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    4bb3:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00004bc0 <map_tile_none>:
    4bc0:	01 01 00 00                                         ....

00004bc4 <__ctors_end>:
    4bc4:	11 24       	eor	r1, r1
    4bc6:	1f be       	out	0x3f, r1	; 63
    4bc8:	cf ef       	ldi	r28, 0xFF	; 255
    4bca:	d0 e1       	ldi	r29, 0x10	; 16
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	cd bf       	out	0x3d, r28	; 61

00004bd0 <__do_copy_data>:
    4bd0:	15 e0       	ldi	r17, 0x05	; 5
    4bd2:	a0 e0       	ldi	r26, 0x00	; 0
    4bd4:	b5 e0       	ldi	r27, 0x05	; 5
    4bd6:	ec e2       	ldi	r30, 0x2C	; 44
    4bd8:	f2 e9       	ldi	r31, 0x92	; 146
    4bda:	02 c0       	rjmp	.+4      	; 0x4be0 <__do_copy_data+0x10>
    4bdc:	05 90       	lpm	r0, Z+
    4bde:	0d 92       	st	X+, r0
    4be0:	a2 30       	cpi	r26, 0x02	; 2
    4be2:	b1 07       	cpc	r27, r17
    4be4:	d9 f7       	brne	.-10     	; 0x4bdc <__do_copy_data+0xc>

00004be6 <__do_clear_bss>:
    4be6:	1e e0       	ldi	r17, 0x0E	; 14
    4be8:	a2 e0       	ldi	r26, 0x02	; 2
    4bea:	b5 e0       	ldi	r27, 0x05	; 5
    4bec:	01 c0       	rjmp	.+2      	; 0x4bf0 <.do_clear_bss_start>

00004bee <.do_clear_bss_loop>:
    4bee:	1d 92       	st	X+, r1

00004bf0 <.do_clear_bss_start>:
    4bf0:	a2 3d       	cpi	r26, 0xD2	; 210
    4bf2:	b1 07       	cpc	r27, r17
    4bf4:	e1 f7       	brne	.-8      	; 0x4bee <.do_clear_bss_loop>

00004bf6 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    4bf6:	0e 94 9d 2b 	call	0x573a	; 0x573a <wdt_randomize>
#endif

    MCUSR = 0;
    4bfa:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    4bfc:	88 e1       	ldi	r24, 0x18	; 24
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	80 93 60 00 	sts	0x0060, r24
    4c06:	10 92 60 00 	sts	0x0060, r1
    4c0a:	0f be       	out	0x3f, r0	; 63

00004c0c <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    4c0c:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <isEepromFormatted>
    4c10:	81 11       	cpse	r24, r1
    4c12:	02 c0       	rjmp	.+4      	; 0x4c18 <Initialize+0xc>
    4c14:	0e 94 38 2c 	call	0x5870	; 0x5870 <FormatEeprom>

	cli();
    4c18:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    4c20:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    4c24:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    4c28:	10 92 b8 0c 	sts	0x0CB8, r1
    4c2c:	10 92 be 0c 	sts	0x0CBE, r1
    4c30:	10 92 c4 0c 	sts	0x0CC4, r1
    4c34:	10 92 ca 0c 	sts	0x0CCA, r1
    4c38:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    4c3c:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    4c40:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    4c44:	92 e1       	ldi	r25, 0x12	; 18
    4c46:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    4c4a:	90 ee       	ldi	r25, 0xE0	; 224
    4c4c:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    4c50:	94 e1       	ldi	r25, 0x14	; 20
    4c52:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    4c56:	10 92 ac 0c 	sts	0x0CAC, r1
    4c5a:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    4c5e:	10 92 b0 0c 	sts	0x0CB0, r1
    4c62:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    4c66:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    4c6a:	0e 94 4d 38 	call	0x709a	; 0x709a <InitializeVideoMode>
    4c6e:	8e e7       	ldi	r24, 0x7E	; 126
    4c70:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    4c72:	fc 01       	movw	r30, r24
    4c74:	25 91       	lpm	r18, Z+
    4c76:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    4c78:	f9 01       	movw	r30, r18
    4c7a:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    4c7c:	30 83       	st	Z, r19
    4c7e:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	8c 3a       	cpi	r24, 0xAC	; 172
    4c84:	92 07       	cpc	r25, r18
    4c86:	a9 f7       	brne	.-22     	; 0x4c72 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    4c88:	78 94       	sei
	
	DisplayLogo();
    4c8a:	0e 94 db 38 	call	0x71b6	; 0x71b6 <DisplayLogo>
    4c8e:	0e 94 fb 46 	call	0x8df6	; 0x8df6 <main>
    4c92:	0c 94 14 49 	jmp	0x9228	; 0x9228 <_exit>

00004c96 <__bad_interrupt>:
    4c96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004c9a <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    4c9a:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4c9c:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    4ca0:	ad e8       	ldi	r26, 0x8D	; 141
    4ca2:	aa 95       	dec	r26
    4ca4:	f1 f7       	brne	.-4      	; 0x4ca2 <sub_video_mode3+0x8>
    4ca6:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    4ca8:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    4cac:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    4cae:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    4cb0:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    4cb2:	02 9f       	mul	r16, r18
		add ZL,r0
    4cb4:	e0 0d       	add	r30, r0
		adc ZH,r1
    4cb6:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    4cb8:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4cba:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    4cbc:	20 91 6a 0d 	lds	r18, 0x0D6A
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    4cc0:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    4cc2:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    4cc4:	30 0f       	add	r19, r16

		cp r18,r16
    4cc6:	20 17       	cp	r18, r16
		breq no_ramtiles
    4cc8:	51 f0       	breq	.+20     	; 0x4cde <no_ramtiles>
		nop
    4cca:	00 00       	nop
	...

00004cce <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    4cce:	a1 91       	ld	r26, Z+
		ld XH,Z+
    4cd0:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    4cd2:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    4cd4:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    4cd6:	0c 93       	st	X, r16

		inc r16
    4cd8:	03 95       	inc	r16
		cp r16,r18
    4cda:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    4cdc:	c0 f3       	brcs	.-16     	; 0x4cce <upd_loop>

00004cde <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    4cde:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    4ce0:	1a 95       	dec	r17
		brne .-4
    4ce2:	f1 f7       	brne	.-4      	; 0x4ce0 <no_ramtiles+0x2>
		rjmp .
    4ce4:	00 c0       	rjmp	.+0      	; 0x4ce6 <no_ramtiles+0x8>
		dec r19
    4ce6:	3a 95       	dec	r19
		brne 1b
    4ce8:	d1 f7       	brne	.-12     	; 0x4cde <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    4cea:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4cec:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    4cee:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    4cf2:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    4cf4:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    4cf6:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    4cf8:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    4cfa:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    4cfe:	60 2f       	mov	r22, r16
		lsr r16
    4d00:	06 95       	lsr	r16
		lsr r16
    4d02:	06 95       	lsr	r16
		lsr r16 ;/8
    4d04:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    4d06:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    4d0a:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    4d0c:	f1 2e       	mov	r15, r17

        mov r17,r16
    4d0e:	10 2f       	mov	r17, r16
        lsr r16
    4d10:	06 95       	lsr	r16
        lsr r16
    4d12:	06 95       	lsr	r16
        lsr r16 ;/8
    4d14:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    4d16:	d0 0f       	add	r29, r16
		andi r17,0x7
    4d18:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    4d1a:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    4d1c:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    4d1e:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    4d22:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    4d26:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    4d2a:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    4d2e:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    4d30:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    4d32:	5e 01       	movw	r10, r28
		mov r23,r22
    4d34:	76 2f       	mov	r23, r22
		mov r24,r15
    4d36:	8f 2d       	mov	r24, r15
		mov r9,r25
    4d38:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    4d3a:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    4d3e:	20 2f       	mov	r18, r16
		lsr r16
    4d40:	06 95       	lsr	r16
		lsr r16
    4d42:	06 95       	lsr	r16
		lsr r16			;hi8
    4d44:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    4d46:	03 95       	inc	r16
		andi r18,7		;lo8
    4d48:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    4d4a:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    4d4e:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    4d50:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    4d52:	01 fe       	sbrs	r0, 1
		clr r22
    4d54:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    4d56:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    4d58:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    4d5a:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    4d5c:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    4d5e:	01 fe       	sbrs	r0, 1
		ser r24
    4d60:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    4d62:	01 fe       	sbrs	r0, 1
		clr r9
    4d64:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    4d66:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    4d68:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    4d6a:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    4d6c:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    4d6e:	80 90 a8 0c 	lds	r8, 0x0CA8

00004d72 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    4d72:	bc d3       	rcall	.+1912   	; 0x54ec <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    4d74:	24 e0       	ldi	r18, 0x04	; 4
    4d76:	2a 95       	dec	r18
    4d78:	f1 f7       	brne	.-4      	; 0x4d76 <next_tile_line+0x4>
    4d7a:	00 00       	nop
				
		call render_tile_line
    4d7c:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <render_tile_line>

		WAIT r18,58
    4d80:	23 e1       	ldi	r18, 0x13	; 19
    4d82:	2a 95       	dec	r18
    4d84:	f1 f7       	brne	.-4      	; 0x4d82 <next_tile_line+0x10>
    4d86:	00 00       	nop

		inc r22
    4d88:	63 95       	inc	r22
		dec r8
    4d8a:	8a 94       	dec	r8
		breq text_frame_end
    4d8c:	09 f1       	breq	.+66     	; 0x4dd0 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    4d8e:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    4d90:	29 f0       	breq	.+10     	; 0x4d9c <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    4d92:	08 e0       	ldi	r16, 0x08	; 8
    4d94:	0a 95       	dec	r16
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <next_tile_line+0x22>
    4d98:	00 00       	nop
		rjmp next_tile_line
    4d9a:	eb cf       	rjmp	.-42     	; 0x4d72 <next_tile_line>

00004d9c <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    4d9c:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    4d9e:	0c 2f       	mov	r16, r28
		andi r16,0x7
    4da0:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    4da2:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    4da4:	11 f0       	breq	.+4      	; 0x4daa <next_tile_row+0xe>
		inc YL
    4da6:	c3 95       	inc	r28
		rjmp 2f
    4da8:	02 c0       	rjmp	.+4      	; 0x4dae <next_tile_row+0x12>
	1:
		andi YL,0xf8
    4daa:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    4dac:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    4dae:	8a 95       	dec	r24
		brne .+2
    4db0:	09 f4       	brne	.+2      	; 0x4db4 <next_tile_row+0x18>
		movw YL,r12
    4db2:	e6 01       	movw	r28, r12

		dec r19
    4db4:	3a 95       	dec	r19
		brne .+2
    4db6:	09 f4       	brne	.+2      	; 0x4dba <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    4db8:	67 2f       	mov	r22, r23
		brne .+2
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    4dbc:	e5 01       	movw	r28, r10
		brne .+2
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    4dc0:	8f 2d       	mov	r24, r15
		brne .+2
    4dc2:	09 f4       	brne	.+2      	; 0x4dc6 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    4dc4:	99 2e       	mov	r9, r25

		brne .+2
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    4dc8:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    4dca:	09 f4       	brne	.+2      	; 0x4dce <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    4dcc:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    4dce:	d1 cf       	rjmp	.-94     	; 0x4d72 <next_tile_line>

00004dd0 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    4dd0:	29 e0       	ldi	r18, 0x09	; 9
    4dd2:	2a 95       	dec	r18
    4dd4:	f1 f7       	brne	.-4      	; 0x4dd2 <text_frame_end+0x2>
    4dd6:	00 00       	nop

		rcall hsync_pulse ;145
    4dd8:	89 d3       	rcall	.+1810   	; 0x54ec <hsync_pulse>
	
		clr r1
    4dda:	11 24       	eor	r1, r1
		call RestoreBackground
    4ddc:	0e 94 00 37 	call	0x6e00	; 0x6e00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    4de0:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    4de4:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    4de6:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    4de8:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    4dea:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    4dee:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    4df0:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4df2:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    4df6:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    4df8:	e0 93 36 00 	sts	0x0036, r30

		ret
    4dfc:	08 95       	ret

00004dfe <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    4dfe:	cf 93       	push	r28
		push YH
    4e00:	df 93       	push	r29
		push r23
    4e02:	7f 93       	push	r23
		push r22
    4e04:	6f 93       	push	r22
		push r19
    4e06:	3f 93       	push	r19
		push r13
    4e08:	df 92       	push	r13
		push r12
    4e0a:	cf 92       	push	r12
		push r9
    4e0c:	9f 92       	push	r9
		push r7
    4e0e:	7f 92       	push	r7
		push r6
    4e10:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    4e12:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    4e14:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    4e16:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    4e18:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4e1a:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4e1c:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    4e1e:	00 0d       	add	r16, r0
		adc r17,r1
    4e20:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    4e22:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    4e24:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    4e26:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    4e28:	00 0d       	add	r16, r0
		adc r17,r1
    4e2a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    4e2c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    4e2e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    4e30:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    4e32:	69 2d       	mov	r22, r9
		andi r22,0x7		
    4e34:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    4e36:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    4e38:	f8 94       	cli
		breq .+2
    4e3a:	09 f0       	breq	.+2      	; 0x4e3e <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    4e3c:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    4e3e:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    4e40:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    4e42:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    4e44:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    4e46:	02 0c       	add	r0, r2
	    adc r1,r3
    4e48:	13 1c       	adc	r1, r3
		movw ZL,r0
    4e4a:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    4e4c:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    4e4e:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4e50:	28 81       	ld	r18, Y
		subi YL,-8
    4e52:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4e54:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    4e56:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    4e58:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    4e5a:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    4e5c:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    4e5e:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    4e60:	04 0e       	add	r0, r20
	    adc r1,r21
    4e62:	15 1e       	adc	r1, r21
		movw XL,r0
    4e64:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4e66:	28 81       	ld	r18, Y
		subi YL,-8
    4e68:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4e6a:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    4e6c:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    4e6e:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    4e70:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    4e72:	a1 01       	movw	r20, r2
		brtc .+2
    4e74:	0e f4       	brtc	.+2      	; 0x4e78 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    4e76:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    4e78:	04 0e       	add	r0, r20
	    adc r1,r21
    4e7a:	15 1e       	adc	r1, r21
		movw ZL,r0
    4e7c:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    4e7e:	3f 01       	movw	r6, r30

00004e80 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    4e80:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    4e82:	a6 0f       	add	r26, r22
		adc XH,r0
    4e84:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    4e86:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    4e88:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    4e8a:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    4e8c:	22 c0       	rjmp	.+68     	; 0x4ed2 <rom_fine_scroll>

00004e8e <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    4e8e:	00 c0       	rjmp	.+0      	; 0x4e90 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    4e90:	6f e4       	ldi	r22, 0x4F	; 79
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    4e92:	77 e2       	ldi	r23, 0x27	; 39
		add r22,r0
    4e94:	60 0d       	add	r22, r0
		adc r23,r1
    4e96:	71 1d       	adc	r23, r1
		push r22
    4e98:	6f 93       	push	r22
		push r23	
    4e9a:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    4e9c:	08 95       	ret

00004e9e <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    4e9e:	0d 91       	ld	r16, X+
    4ea0:	c8 95       	lpm
    4ea2:	08 b9       	out	0x08, r16	; 8
    4ea4:	0d 91       	ld	r16, X+
    4ea6:	c8 95       	lpm
    4ea8:	08 b9       	out	0x08, r16	; 8
    4eaa:	0d 91       	ld	r16, X+
    4eac:	c8 95       	lpm
    4eae:	08 b9       	out	0x08, r16	; 8
    4eb0:	0d 91       	ld	r16, X+
    4eb2:	c8 95       	lpm
    4eb4:	08 b9       	out	0x08, r16	; 8
    4eb6:	0d 91       	ld	r16, X+
    4eb8:	c8 95       	lpm
    4eba:	08 b9       	out	0x08, r16	; 8
    4ebc:	0d 91       	ld	r16, X+
    4ebe:	c8 95       	lpm
    4ec0:	08 b9       	out	0x08, r16	; 8
    4ec2:	0d 91       	ld	r16, X+
    4ec4:	c8 95       	lpm
    4ec6:	08 b9       	out	0x08, r16	; 8
    4ec8:	0d 91       	ld	r16, X+
    4eca:	c8 95       	lpm
    4ecc:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    4ece:	1e f5       	brtc	.+70     	; 0x4f16 <romloop>
		rjmp ramloop
    4ed0:	40 c0       	rjmp	.+128    	; 0x4f52 <ramloop>

00004ed2 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    4ed2:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    4ed4:	61 e7       	ldi	r22, 0x71	; 113
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    4ed6:	77 e2       	ldi	r23, 0x27	; 39
		add r22,r0
    4ed8:	60 0d       	add	r22, r0
		adc r23,r1
    4eda:	71 1d       	adc	r23, r1
		push r22
    4edc:	6f 93       	push	r22
		push r23	
    4ede:	7f 93       	push	r23
		ret
    4ee0:	08 95       	ret

00004ee2 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    4ee2:	05 91       	lpm	r16, Z+
    4ee4:	00 c0       	rjmp	.+0      	; 0x4ee6 <rom_fine_scroll_loop+0x4>
    4ee6:	08 b9       	out	0x08, r16	; 8
    4ee8:	05 91       	lpm	r16, Z+
    4eea:	00 c0       	rjmp	.+0      	; 0x4eec <rom_fine_scroll_loop+0xa>
    4eec:	08 b9       	out	0x08, r16	; 8
    4eee:	05 91       	lpm	r16, Z+
    4ef0:	00 c0       	rjmp	.+0      	; 0x4ef2 <rom_fine_scroll_loop+0x10>
    4ef2:	08 b9       	out	0x08, r16	; 8
    4ef4:	05 91       	lpm	r16, Z+
    4ef6:	00 c0       	rjmp	.+0      	; 0x4ef8 <rom_fine_scroll_loop+0x16>
    4ef8:	08 b9       	out	0x08, r16	; 8
    4efa:	05 91       	lpm	r16, Z+
    4efc:	00 c0       	rjmp	.+0      	; 0x4efe <rom_fine_scroll_loop+0x1c>
    4efe:	08 b9       	out	0x08, r16	; 8
    4f00:	05 91       	lpm	r16, Z+
    4f02:	00 c0       	rjmp	.+0      	; 0x4f04 <rom_fine_scroll_loop+0x22>
    4f04:	08 b9       	out	0x08, r16	; 8
    4f06:	05 91       	lpm	r16, Z+
    4f08:	00 c0       	rjmp	.+0      	; 0x4f0a <rom_fine_scroll_loop+0x28>
    4f0a:	08 b9       	out	0x08, r16	; 8
    4f0c:	05 91       	lpm	r16, Z+
    4f0e:	00 c0       	rjmp	.+0      	; 0x4f10 <rom_fine_scroll_loop+0x2e>
    4f10:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    4f12:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    4f14:	f6 f0       	brts	.+60     	; 0x4f52 <ramloop>

00004f16 <romloop>:

	
	romloop:
	    lpm r16,Z+
    4f16:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4f18:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4f1a:	28 81       	ld	r18, Y

	    lpm r16,Z+
    4f1c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    4f1e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4f20:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    4f22:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    4f24:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    4f26:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    4f28:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    4f2a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4f2c:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    4f2e:	08 f4       	brcc	.+2      	; 0x4f32 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    4f30:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    4f32:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    4f34:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    4f36:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    4f38:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    4f3a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    4f3c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    4f3e:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    4f40:	1a 95       	dec	r17
   
	    lpm r16,Z+
    4f42:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    4f44:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    4f46:	05 91       	lpm	r16, Z+

		breq end	
    4f48:	39 f1       	breq	.+78     	; 0x4f98 <end>
	    movw ZL,r0   	;copy next tile adress
    4f4a:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4f4c:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    4f4e:	18 f7       	brcc	.-58     	; 0x4f16 <romloop>
	
		rjmp .
    4f50:	00 c0       	rjmp	.+0      	; 0x4f52 <ramloop>

00004f52 <ramloop>:

	ramloop:

	    ld r16,Z+
    4f52:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4f54:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4f56:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    4f58:	01 91       	ld	r16, Z+
		subi YL,-8   		
    4f5a:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    4f5c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4f5e:	23 9f       	mul	r18, r19

	    ld r16,Z+
    4f60:	01 91       	ld	r16, Z+
		nop
    4f62:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    4f64:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    4f66:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    4f68:	00 c0       	rjmp	.+0      	; 0x4f6a <ramloop+0x18>
   
	    ld r16,Z+
    4f6a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4f6c:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    4f6e:	08 f0       	brcs	.+2      	; 0x4f72 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    4f70:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    4f72:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    4f74:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    4f76:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    4f78:	15 1e       	adc	r1, r21
		rjmp .
    4f7a:	00 c0       	rjmp	.+0      	; 0x4f7c <ramloop+0x2a>
    
		ld r16,Z+		
    4f7c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    4f7e:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    4f80:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    4f82:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    4f84:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    4f86:	78 b8       	out	0x08, r7	; 8
		nop
    4f88:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    4f8a:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    4f8c:	1a 95       	dec	r17
	    breq end
    4f8e:	21 f0       	breq	.+8      	; 0x4f98 <end>
	
		nop
    4f90:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4f92:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    4f94:	00 f6       	brcc	.-128    	; 0x4f16 <romloop>
		rjmp ramloop
    4f96:	dd cf       	rjmp	.-70     	; 0x4f52 <ramloop>

00004f98 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    4f98:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    4f9a:	27 f5       	brid	.+72     	; 0x4fe4 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    4f9c:	30 f4       	brcc	.+12     	; 0x4faa <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    4f9e:	f0 01       	movw	r30, r0

00004fa0 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    4fa0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    4fa2:	08 b9       	out	0x08, r16	; 8
		dec r14
    4fa4:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    4fa6:	e1 f7       	brne	.-8      	; 0x4fa0 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    4fa8:	1f c0       	rjmp	.+62     	; 0x4fe8 <end_fine_scroll_ram>

00004faa <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    4faa:	f6 01       	movw	r30, r12
		nop
    4fac:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    4fae:	98 b8       	out	0x08, r9	; 8
		dec r14
    4fb0:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    4fb2:	c9 f0       	breq	.+50     	; 0x4fe6 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    4fb4:	05 91       	lpm	r16, Z+
    4fb6:	08 b9       	out	0x08, r16	; 8
    4fb8:	ea 94       	dec	r14
    4fba:	a9 f0       	breq	.+42     	; 0x4fe6 <end_fine_scroll_rom>
    4fbc:	05 91       	lpm	r16, Z+
    4fbe:	08 b9       	out	0x08, r16	; 8
    4fc0:	ea 94       	dec	r14
    4fc2:	89 f0       	breq	.+34     	; 0x4fe6 <end_fine_scroll_rom>
    4fc4:	05 91       	lpm	r16, Z+
    4fc6:	08 b9       	out	0x08, r16	; 8
    4fc8:	ea 94       	dec	r14
    4fca:	69 f0       	breq	.+26     	; 0x4fe6 <end_fine_scroll_rom>
    4fcc:	05 91       	lpm	r16, Z+
    4fce:	08 b9       	out	0x08, r16	; 8
    4fd0:	ea 94       	dec	r14
    4fd2:	49 f0       	breq	.+18     	; 0x4fe6 <end_fine_scroll_rom>
    4fd4:	05 91       	lpm	r16, Z+
    4fd6:	08 b9       	out	0x08, r16	; 8
    4fd8:	ea 94       	dec	r14
    4fda:	29 f0       	breq	.+10     	; 0x4fe6 <end_fine_scroll_rom>
    4fdc:	05 91       	lpm	r16, Z+
    4fde:	08 b9       	out	0x08, r16	; 8
    4fe0:	ea 94       	dec	r14
    4fe2:	09 f0       	breq	.+2      	; 0x4fe6 <end_fine_scroll_rom>

00004fe4 <end_fine_scroll>:
	...

00004fe6 <end_fine_scroll_rom>:
	...

00004fe8 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    4fe8:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    4fea:	08 b9       	out	0x08, r16	; 8

		pop r6
    4fec:	6f 90       	pop	r6
		pop r7
    4fee:	7f 90       	pop	r7
		pop r9
    4ff0:	9f 90       	pop	r9
		pop r12
    4ff2:	cf 90       	pop	r12
		pop r13
    4ff4:	df 90       	pop	r13
		pop r19
    4ff6:	3f 91       	pop	r19
		pop r22
    4ff8:	6f 91       	pop	r22
		pop r23
    4ffa:	7f 91       	pop	r23
		pop YH
    4ffc:	df 91       	pop	r29
		pop YL
    4ffe:	cf 91       	pop	r28

		ret
    5000:	08 95       	ret

00005002 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5002:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    5004:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    5008:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    500c:	82 9f       	mul	r24, r18
	add ZL,r0
    500e:	e0 0d       	add	r30, r0
	adc ZH,r1
    5010:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5012:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5014:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    5016:	62 9f       	mul	r22, r18
	add XL,r0
    5018:	a0 0d       	add	r26, r0
	adc XH,r1
    501a:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    501c:	15 90       	lpm	r1, Z+
    501e:	1d 92       	st	X+, r1
    5020:	15 90       	lpm	r1, Z+
    5022:	1d 92       	st	X+, r1
    5024:	15 90       	lpm	r1, Z+
    5026:	1d 92       	st	X+, r1
    5028:	15 90       	lpm	r1, Z+
    502a:	1d 92       	st	X+, r1
    502c:	15 90       	lpm	r1, Z+
    502e:	1d 92       	st	X+, r1
    5030:	15 90       	lpm	r1, Z+
    5032:	1d 92       	st	X+, r1
    5034:	15 90       	lpm	r1, Z+
    5036:	1d 92       	st	X+, r1
    5038:	15 90       	lpm	r1, Z+
    503a:	1d 92       	st	X+, r1
    503c:	15 90       	lpm	r1, Z+
    503e:	1d 92       	st	X+, r1
    5040:	15 90       	lpm	r1, Z+
    5042:	1d 92       	st	X+, r1
    5044:	15 90       	lpm	r1, Z+
    5046:	1d 92       	st	X+, r1
    5048:	15 90       	lpm	r1, Z+
    504a:	1d 92       	st	X+, r1
    504c:	15 90       	lpm	r1, Z+
    504e:	1d 92       	st	X+, r1
    5050:	15 90       	lpm	r1, Z+
    5052:	1d 92       	st	X+, r1
    5054:	15 90       	lpm	r1, Z+
    5056:	1d 92       	st	X+, r1
    5058:	15 90       	lpm	r1, Z+
    505a:	1d 92       	st	X+, r1
    505c:	15 90       	lpm	r1, Z+
    505e:	1d 92       	st	X+, r1
    5060:	15 90       	lpm	r1, Z+
    5062:	1d 92       	st	X+, r1
    5064:	15 90       	lpm	r1, Z+
    5066:	1d 92       	st	X+, r1
    5068:	15 90       	lpm	r1, Z+
    506a:	1d 92       	st	X+, r1
    506c:	15 90       	lpm	r1, Z+
    506e:	1d 92       	st	X+, r1
    5070:	15 90       	lpm	r1, Z+
    5072:	1d 92       	st	X+, r1
    5074:	15 90       	lpm	r1, Z+
    5076:	1d 92       	st	X+, r1
    5078:	15 90       	lpm	r1, Z+
    507a:	1d 92       	st	X+, r1
    507c:	15 90       	lpm	r1, Z+
    507e:	1d 92       	st	X+, r1
    5080:	15 90       	lpm	r1, Z+
    5082:	1d 92       	st	X+, r1
    5084:	15 90       	lpm	r1, Z+
    5086:	1d 92       	st	X+, r1
    5088:	15 90       	lpm	r1, Z+
    508a:	1d 92       	st	X+, r1
    508c:	15 90       	lpm	r1, Z+
    508e:	1d 92       	st	X+, r1
    5090:	15 90       	lpm	r1, Z+
    5092:	1d 92       	st	X+, r1
    5094:	15 90       	lpm	r1, Z+
    5096:	1d 92       	st	X+, r1
    5098:	15 90       	lpm	r1, Z+
    509a:	1d 92       	st	X+, r1
    509c:	15 90       	lpm	r1, Z+
    509e:	1d 92       	st	X+, r1
    50a0:	15 90       	lpm	r1, Z+
    50a2:	1d 92       	st	X+, r1
    50a4:	15 90       	lpm	r1, Z+
    50a6:	1d 92       	st	X+, r1
    50a8:	15 90       	lpm	r1, Z+
    50aa:	1d 92       	st	X+, r1
    50ac:	15 90       	lpm	r1, Z+
    50ae:	1d 92       	st	X+, r1
    50b0:	15 90       	lpm	r1, Z+
    50b2:	1d 92       	st	X+, r1
    50b4:	15 90       	lpm	r1, Z+
    50b6:	1d 92       	st	X+, r1
    50b8:	15 90       	lpm	r1, Z+
    50ba:	1d 92       	st	X+, r1
    50bc:	15 90       	lpm	r1, Z+
    50be:	1d 92       	st	X+, r1
    50c0:	15 90       	lpm	r1, Z+
    50c2:	1d 92       	st	X+, r1
    50c4:	15 90       	lpm	r1, Z+
    50c6:	1d 92       	st	X+, r1
    50c8:	15 90       	lpm	r1, Z+
    50ca:	1d 92       	st	X+, r1
    50cc:	15 90       	lpm	r1, Z+
    50ce:	1d 92       	st	X+, r1
    50d0:	15 90       	lpm	r1, Z+
    50d2:	1d 92       	st	X+, r1
    50d4:	15 90       	lpm	r1, Z+
    50d6:	1d 92       	st	X+, r1
    50d8:	15 90       	lpm	r1, Z+
    50da:	1d 92       	st	X+, r1
    50dc:	15 90       	lpm	r1, Z+
    50de:	1d 92       	st	X+, r1
    50e0:	15 90       	lpm	r1, Z+
    50e2:	1d 92       	st	X+, r1
    50e4:	15 90       	lpm	r1, Z+
    50e6:	1d 92       	st	X+, r1
    50e8:	15 90       	lpm	r1, Z+
    50ea:	1d 92       	st	X+, r1
    50ec:	15 90       	lpm	r1, Z+
    50ee:	1d 92       	st	X+, r1
    50f0:	15 90       	lpm	r1, Z+
    50f2:	1d 92       	st	X+, r1
    50f4:	15 90       	lpm	r1, Z+
    50f6:	1d 92       	st	X+, r1
    50f8:	15 90       	lpm	r1, Z+
    50fa:	1d 92       	st	X+, r1
    50fc:	15 90       	lpm	r1, Z+
    50fe:	1d 92       	st	X+, r1
    5100:	15 90       	lpm	r1, Z+
    5102:	1d 92       	st	X+, r1
    5104:	15 90       	lpm	r1, Z+
    5106:	1d 92       	st	X+, r1
    5108:	15 90       	lpm	r1, Z+
    510a:	1d 92       	st	X+, r1
    510c:	15 90       	lpm	r1, Z+
    510e:	1d 92       	st	X+, r1
    5110:	15 90       	lpm	r1, Z+
    5112:	1d 92       	st	X+, r1
    5114:	15 90       	lpm	r1, Z+
    5116:	1d 92       	st	X+, r1
    5118:	15 90       	lpm	r1, Z+
    511a:	1d 92       	st	X+, r1
	clr r1
    511c:	11 24       	eor	r1, r1
	ret
    511e:	08 95       	ret

00005120 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    5120:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    5122:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    5124:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    5126:	82 9f       	mul	r24, r18
	add ZL,r0
    5128:	e0 0d       	add	r30, r0
	adc ZH,r1
    512a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    512c:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    512e:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    5130:	62 9f       	mul	r22, r18
	add XL,r0
    5132:	a0 0d       	add	r26, r0
	adc XH,r1
    5134:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    5136:	11 90       	ld	r1, Z+
    5138:	1d 92       	st	X+, r1
    513a:	11 90       	ld	r1, Z+
    513c:	1d 92       	st	X+, r1
    513e:	11 90       	ld	r1, Z+
    5140:	1d 92       	st	X+, r1
    5142:	11 90       	ld	r1, Z+
    5144:	1d 92       	st	X+, r1
    5146:	11 90       	ld	r1, Z+
    5148:	1d 92       	st	X+, r1
    514a:	11 90       	ld	r1, Z+
    514c:	1d 92       	st	X+, r1
    514e:	11 90       	ld	r1, Z+
    5150:	1d 92       	st	X+, r1
    5152:	11 90       	ld	r1, Z+
    5154:	1d 92       	st	X+, r1
    5156:	11 90       	ld	r1, Z+
    5158:	1d 92       	st	X+, r1
    515a:	11 90       	ld	r1, Z+
    515c:	1d 92       	st	X+, r1
    515e:	11 90       	ld	r1, Z+
    5160:	1d 92       	st	X+, r1
    5162:	11 90       	ld	r1, Z+
    5164:	1d 92       	st	X+, r1
    5166:	11 90       	ld	r1, Z+
    5168:	1d 92       	st	X+, r1
    516a:	11 90       	ld	r1, Z+
    516c:	1d 92       	st	X+, r1
    516e:	11 90       	ld	r1, Z+
    5170:	1d 92       	st	X+, r1
    5172:	11 90       	ld	r1, Z+
    5174:	1d 92       	st	X+, r1
    5176:	11 90       	ld	r1, Z+
    5178:	1d 92       	st	X+, r1
    517a:	11 90       	ld	r1, Z+
    517c:	1d 92       	st	X+, r1
    517e:	11 90       	ld	r1, Z+
    5180:	1d 92       	st	X+, r1
    5182:	11 90       	ld	r1, Z+
    5184:	1d 92       	st	X+, r1
    5186:	11 90       	ld	r1, Z+
    5188:	1d 92       	st	X+, r1
    518a:	11 90       	ld	r1, Z+
    518c:	1d 92       	st	X+, r1
    518e:	11 90       	ld	r1, Z+
    5190:	1d 92       	st	X+, r1
    5192:	11 90       	ld	r1, Z+
    5194:	1d 92       	st	X+, r1
    5196:	11 90       	ld	r1, Z+
    5198:	1d 92       	st	X+, r1
    519a:	11 90       	ld	r1, Z+
    519c:	1d 92       	st	X+, r1
    519e:	11 90       	ld	r1, Z+
    51a0:	1d 92       	st	X+, r1
    51a2:	11 90       	ld	r1, Z+
    51a4:	1d 92       	st	X+, r1
    51a6:	11 90       	ld	r1, Z+
    51a8:	1d 92       	st	X+, r1
    51aa:	11 90       	ld	r1, Z+
    51ac:	1d 92       	st	X+, r1
    51ae:	11 90       	ld	r1, Z+
    51b0:	1d 92       	st	X+, r1
    51b2:	11 90       	ld	r1, Z+
    51b4:	1d 92       	st	X+, r1
    51b6:	11 90       	ld	r1, Z+
    51b8:	1d 92       	st	X+, r1
    51ba:	11 90       	ld	r1, Z+
    51bc:	1d 92       	st	X+, r1
    51be:	11 90       	ld	r1, Z+
    51c0:	1d 92       	st	X+, r1
    51c2:	11 90       	ld	r1, Z+
    51c4:	1d 92       	st	X+, r1
    51c6:	11 90       	ld	r1, Z+
    51c8:	1d 92       	st	X+, r1
    51ca:	11 90       	ld	r1, Z+
    51cc:	1d 92       	st	X+, r1
    51ce:	11 90       	ld	r1, Z+
    51d0:	1d 92       	st	X+, r1
    51d2:	11 90       	ld	r1, Z+
    51d4:	1d 92       	st	X+, r1
    51d6:	11 90       	ld	r1, Z+
    51d8:	1d 92       	st	X+, r1
    51da:	11 90       	ld	r1, Z+
    51dc:	1d 92       	st	X+, r1
    51de:	11 90       	ld	r1, Z+
    51e0:	1d 92       	st	X+, r1
    51e2:	11 90       	ld	r1, Z+
    51e4:	1d 92       	st	X+, r1
    51e6:	11 90       	ld	r1, Z+
    51e8:	1d 92       	st	X+, r1
    51ea:	11 90       	ld	r1, Z+
    51ec:	1d 92       	st	X+, r1
    51ee:	11 90       	ld	r1, Z+
    51f0:	1d 92       	st	X+, r1
    51f2:	11 90       	ld	r1, Z+
    51f4:	1d 92       	st	X+, r1
    51f6:	11 90       	ld	r1, Z+
    51f8:	1d 92       	st	X+, r1
    51fa:	11 90       	ld	r1, Z+
    51fc:	1d 92       	st	X+, r1
    51fe:	11 90       	ld	r1, Z+
    5200:	1d 92       	st	X+, r1
    5202:	11 90       	ld	r1, Z+
    5204:	1d 92       	st	X+, r1
    5206:	11 90       	ld	r1, Z+
    5208:	1d 92       	st	X+, r1
    520a:	11 90       	ld	r1, Z+
    520c:	1d 92       	st	X+, r1
    520e:	11 90       	ld	r1, Z+
    5210:	1d 92       	st	X+, r1
    5212:	11 90       	ld	r1, Z+
    5214:	1d 92       	st	X+, r1
    5216:	11 90       	ld	r1, Z+
    5218:	1d 92       	st	X+, r1
    521a:	11 90       	ld	r1, Z+
    521c:	1d 92       	st	X+, r1
    521e:	11 90       	ld	r1, Z+
    5220:	1d 92       	st	X+, r1
    5222:	11 90       	ld	r1, Z+
    5224:	1d 92       	st	X+, r1
    5226:	11 90       	ld	r1, Z+
    5228:	1d 92       	st	X+, r1
    522a:	11 90       	ld	r1, Z+
    522c:	1d 92       	st	X+, r1
    522e:	11 90       	ld	r1, Z+
    5230:	1d 92       	st	X+, r1
    5232:	11 90       	ld	r1, Z+
    5234:	1d 92       	st	X+, r1
	clr r1
    5236:	11 24       	eor	r1, r1
	ret
    5238:	08 95       	ret

0000523a <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    523a:	0f 93       	push	r16
	push r17
    523c:	1f 93       	push	r17
	push YL
    523e:	cf 93       	push	r28
	push YH
    5240:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    5242:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    5244:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    5246:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    5248:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    524a:	e0 0d       	add	r30, r0
	adc ZH,r1
    524c:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    524e:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    5250:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    5252:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    5254:	8e 9f       	mul	r24, r30
	movw r26,r0
    5256:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    5258:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    525a:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    525c:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    525e:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    5260:	00 24       	eor	r0, r0
	add YL,r1
    5262:	c1 0d       	add	r28, r1
	adc YH,r0		
    5264:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    5266:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    5268:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    526a:	ea 0f       	add	r30, r26
	adc ZH,r27
    526c:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    526e:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5270:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    5272:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    5274:	69 9f       	mul	r22, r25
	add XL,r0
    5276:	a0 0d       	add	r26, r0
	adc XH,r1
    5278:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    527a:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    527c:	dd 27       	eor	r29, r29

	cpi r20,0	
    527e:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    5280:	51 f4       	brne	.+20     	; 0x5296 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    5282:	a2 0f       	add	r26, r18
	adc XH,r1
    5284:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    5286:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    5288:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    528a:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    528c:	11 c0       	rjmp	.+34     	; 0x52b0 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    528e:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    5290:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    5292:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    5294:	0d c0       	rjmp	.+26     	; 0x52b0 <x_check_end>

00005296 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    5296:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    5298:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    529a:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    529c:	04 c0       	rjmp	.+8      	; 0x52a6 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    529e:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    52a0:	e8 0f       	add	r30, r24
	adc ZH,r1	
    52a2:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    52a4:	05 c0       	rjmp	.+10     	; 0x52b0 <x_check_end>

000052a6 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    52a6:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    52a8:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    52aa:	e2 0f       	add	r30, r18
	adc ZH,r1
    52ac:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    52ae:	31 97       	sbiw	r30, 0x01	; 1

000052b0 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    52b0:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    52b2:	51 f4       	brne	.+20     	; 0x52c8 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    52b4:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    52b6:	93 9f       	mul	r25, r19
	add XL,r0
    52b8:	a0 0d       	add	r26, r0
	adc XH,r1
    52ba:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    52bc:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    52be:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    52c0:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    52c2:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    52c4:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    52c6:	0a c0       	rjmp	.+20     	; 0x52dc <y_check_end>

000052c8 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    52c8:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    52ca:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    52cc:	63 2f       	mov	r22, r19
	dec r22
    52ce:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    52d0:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    52d2:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    52d4:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    52d6:	56 9f       	mul	r21, r22
	add ZL,r0
    52d8:	e0 0d       	add	r30, r0
	adc ZH,r1	
    52da:	f1 1d       	adc	r31, r1

000052dc <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    52dc:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    52de:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    52e0:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    52e2:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    52e4:	00 ff       	sbrs	r16, 0
	clr r23
    52e6:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    52e8:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    52ea:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    52ec:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    52ee:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    52f0:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    52f2:	59 1b       	sub	r21, r25

000052f4 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    52f4:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    52f6:	48 1b       	sub	r20, r24

000052f8 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    52f8:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    52fa:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    52fc:	2c 93       	st	X, r18
	adiw XL,1
    52fe:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    5300:	e6 0f       	add	r30, r22
	adc ZH,r23
    5302:	f7 1f       	adc	r31, r23
	dec r20
    5304:	4a 95       	dec	r20
	brne x_loop
    5306:	c1 f7       	brne	.-16     	; 0x52f8 <x_loop>

	add ZL,YL		;src+=srcXdiff
    5308:	ec 0f       	add	r30, r28
	adc ZH,YH
    530a:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    530c:	a8 0f       	add	r26, r24
	adc XH,r1
    530e:	b1 1d       	adc	r27, r1
	dec r21
    5310:	5a 95       	dec	r21
	brne y_loop
    5312:	81 f7       	brne	.-32     	; 0x52f4 <y_loop>


	pop YH
    5314:	df 91       	pop	r29
	pop YL
    5316:	cf 91       	pop	r28
	pop r17
    5318:	1f 91       	pop	r17
	pop r16
    531a:	0f 91       	pop	r16
	ret
    531c:	08 95       	ret

0000531e <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    531e:	0f 92       	push	r0
	push r1
    5320:	1f 92       	push	r1
	push ZL;2
    5322:	ef 93       	push	r30
	push ZH;2
    5324:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5326:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5328:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    532a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    532e:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    5330:	f1 e0       	ldi	r31, 0x01	; 1

00005332 <latency_loop>:
latency_loop:
	cp ZL,ZH
    5332:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    5334:	00 f0       	brcs	.+0      	; 0x5336 <latency_loop+0x4>
	inc ZH
    5336:	f3 95       	inc	r31
	cpi ZH,10
    5338:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    533a:	d8 f3       	brcs	.-10     	; 0x5332 <latency_loop>
	jmp .
    533c:	0c 94 a0 29 	jmp	0x5340	; 0x5340 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    5340:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    5344:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5346:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    534a:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    534e:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    5350:	57 c0       	rjmp	.+174    	; 0x5400 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5352:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    5354:	98 f0       	brcs	.+38     	; 0x537c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5356:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    5358:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    535c:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    535e:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    5362:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    5364:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5366:	26 f4       	brtc	.+8      	; 0x5370 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    5368:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    536a:	0e 94 87 2a 	call	0x550e	; 0x550e <update_sound>
	rjmp sync_end
    536e:	b7 c0       	rjmp	.+366    	; 0x54de <sync_end>

00005370 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    5370:	e5 e1       	ldi	r30, 0x15	; 21
    5372:	ea 95       	dec	r30
    5374:	f1 f7       	brne	.-4      	; 0x5372 <sync_pre_eq_no_sound_update+0x2>
    5376:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5378:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    537a:	b1 c0       	rjmp	.+354    	; 0x54de <sync_end>

0000537c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    537c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    537e:	38 f1       	brcs	.+78     	; 0x53ce <sync_post_eq>

	rjmp .
    5380:	00 c0       	rjmp	.+0      	; 0x5382 <sync_eq+0x6>
	rjmp .
    5382:	00 c0       	rjmp	.+0      	; 0x5384 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5384:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5386:	e0 fb       	bst	r30, 0
	ldi ZL,4
    5388:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    538a:	16 f4       	brtc	.+4      	; 0x5390 <sync_eq_skip>
	
	call update_sound
    538c:	0e 94 87 2a 	call	0x550e	; 0x550e <update_sound>

00005390 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    5390:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    5392:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    5396:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    5398:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    539c:	a0 c0       	rjmp	.+320    	; 0x54de <sync_end>

0000539e <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    539e:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    53a0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    53a2:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    53a4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    53a8:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    53aa:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    53ac:	00 f0       	brcs	.+0      	; 0x53ae <__vector_14+0x10>

	cpi ZL,2
    53ae:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    53b0:	00 f0       	brcs	.+0      	; 0x53b2 <__vector_14+0x14>

	cpi ZL,3
    53b2:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    53b4:	00 f0       	brcs	.+0      	; 0x53b6 <__vector_14+0x18>

	cpi ZL,4
    53b6:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    53b8:	00 f0       	brcs	.+0      	; 0x53ba <__vector_14+0x1c>

	cpi ZL,5
    53ba:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    53bc:	00 f0       	brcs	.+0      	; 0x53be <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    53be:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    53c0:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    53c2:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    53c6:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    53c8:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    53ca:	ef 91       	pop	r30
	reti
    53cc:	18 95       	reti

000053ce <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    53ce:	00 c0       	rjmp	.+0      	; 0x53d0 <sync_post_eq+0x2>

	bst ZL,0
    53d0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    53d2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    53d4:	26 f4       	brtc	.+8      	; 0x53de <sync_post_eq_no_sound_update>
	ldi ZL,1	
    53d6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    53d8:	0e 94 87 2a 	call	0x550e	; 0x550e <update_sound>
	rjmp sync_pre_eq_cont
    53dc:	05 c0       	rjmp	.+10     	; 0x53e8 <sync_pre_eq_cont>

000053de <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    53de:	e5 e1       	ldi	r30, 0x15	; 21
    53e0:	ea 95       	dec	r30
    53e2:	f1 f7       	brne	.-4      	; 0x53e0 <sync_post_eq_no_sound_update+0x2>
    53e4:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    53e6:	28 9a       	sbi	0x05, 0	; 5

000053e8 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    53e8:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    53ec:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    53f0:	76 c0       	rjmp	.+236    	; 0x54de <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    53f2:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    53f4:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    53f8:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    53fa:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    53fe:	6f c0       	rjmp	.+222    	; 0x54de <sync_end>

00005400 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    5400:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    5402:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5406:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5408:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    540c:	00 c0       	rjmp	.+0      	; 0x540e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    540e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    5410:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5412:	00 c0       	rjmp	.+0      	; 0x5414 <sync_hsync+0x14>
	call update_sound
    5414:	0e 94 87 2a 	call	0x550e	; 0x550e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5418:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    541a:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    541e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    5420:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    5424:	ef 17       	cp	r30, r31
	brsh no_render
    5426:	d0 f4       	brcc	.+52     	; 0x545c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5428:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    542a:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    542e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    5430:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    5434:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5436:	ef 17       	cp	r30, r31
	brlo no_render
    5438:	88 f0       	brcs	.+34     	; 0x545c <no_render>

	;push r1-r29
	ldi ZL,29
    543a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    543c:	ff 27       	eor	r31, r31

0000543e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    543e:	00 80       	ld	r0, Z
	push r0
    5440:	0f 92       	push	r0
	dec ZL
    5442:	ea 95       	dec	r30
	brne push_loop	
    5444:	e1 f7       	brne	.-8      	; 0x543e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5446:	06 e0       	ldi	r16, 0x06	; 6
    5448:	0a 95       	dec	r16
    544a:	f1 f7       	brne	.-4      	; 0x5448 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    544c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    5450:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    5452:	ff 27       	eor	r31, r31

00005454 <pop_loop>:
pop_loop:
	pop r0
    5454:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5456:	01 92       	st	Z+, r0
	cpi ZL,30
    5458:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    545a:	e0 f3       	brcs	.-8      	; 0x5454 <pop_loop>

0000545c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    545c:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    5460:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5462:	09 f0       	breq	.+2      	; 0x5466 <no_render+0xa>
	rjmp sync_end
    5464:	3c c0       	rjmp	.+120    	; 0x54de <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5466:	2f 93       	push	r18
	push r19
    5468:	3f 93       	push	r19
	push r20
    546a:	4f 93       	push	r20
	push r21
    546c:	5f 93       	push	r21
	push r22
    546e:	6f 93       	push	r22
	push r23
    5470:	7f 93       	push	r23
	push r24
    5472:	8f 93       	push	r24
	push r25
    5474:	9f 93       	push	r25
	push r26
    5476:	af 93       	push	r26
	push r27
    5478:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    547a:	78 94       	sei
	clr r1
    547c:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    547e:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5480:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5484:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5486:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    548a:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    548e:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    5492:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    5494:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    5498:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    549c:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    54a0:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    54a4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    54a6:	f1 05       	cpc	r31, r1
	breq .+2 
    54a8:	09 f0       	breq	.+2      	; 0x54ac <no_render+0x50>
	icall
    54aa:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    54ac:	0e 94 28 2c 	call	0x5850	; 0x5850 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    54b0:	0e 94 5d 39 	call	0x72ba	; 0x72ba <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    54b4:	0e 94 81 2a 	call	0x5502	; 0x5502 <process_music>
	clr r1
    54b8:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    54ba:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    54be:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    54c2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    54c4:	f1 05       	cpc	r31, r1
	breq .+2 
    54c6:	09 f0       	breq	.+2      	; 0x54ca <no_render+0x6e>
	icall
    54c8:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    54ca:	bf 91       	pop	r27
	pop r26
    54cc:	af 91       	pop	r26
	pop r25
    54ce:	9f 91       	pop	r25
	pop r24
    54d0:	8f 91       	pop	r24
	pop r23
    54d2:	7f 91       	pop	r23
	pop r22
    54d4:	6f 91       	pop	r22
	pop r21
    54d6:	5f 91       	pop	r21
	pop r20
    54d8:	4f 91       	pop	r20
	pop r19
    54da:	3f 91       	pop	r19
	pop r18
    54dc:	2f 91       	pop	r18

000054de <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    54de:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    54e0:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    54e2:	ff 91       	pop	r31
	pop ZL
    54e4:	ef 91       	pop	r30
	pop r1
    54e6:	1f 90       	pop	r1
	pop r0
    54e8:	0f 90       	pop	r0
	reti
    54ea:	18 95       	reti

000054ec <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    54ec:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    54ee:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    54f0:	00 c0       	rjmp	.+0      	; 0x54f2 <hsync_pulse+0x6>
	call update_sound
    54f2:	0e 94 87 2a 	call	0x550e	; 0x550e <update_sound>

	lds ZL,sync_pulse
    54f6:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    54fa:	ea 95       	dec	r30
	sts sync_pulse,ZL
    54fc:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    5500:	08 95       	ret

00005502 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    5502:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    5506:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5508:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <ProcessMusic>
#endif

	ret
    550c:	08 95       	ret

0000550e <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    550e:	0f 93       	push	r16
	push r17
    5510:	1f 93       	push	r17
	push r18
    5512:	2f 93       	push	r18
	push r28
    5514:	cf 93       	push	r28
	push r29
    5516:	df 93       	push	r29

	mov r18,ZL
    5518:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    551a:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    551e:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    5522:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    5524:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    5528:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    552c:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    5530:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5532:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    5534:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    5538:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    553c:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    5540:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    5542:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    5544:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    5546:	d0 2d       	mov	r29, r0
	nop
    5548:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    554a:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    554e:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    5552:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    5554:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    5558:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    555c:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    5560:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    5562:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    5564:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    5568:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    556c:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    5570:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5572:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    5574:	20 ff       	sbrs	r18, 0
	rjmp .
    5576:	00 c0       	rjmp	.+0      	; 0x5578 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    5578:	01 03       	mulsu	r16, r17
	clr r0
    557a:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    557c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    557e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    5580:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    5582:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    5586:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    558a:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    558c:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    5590:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    5594:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    5598:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    559a:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    559c:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    55a0:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    55a4:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    55a8:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    55aa:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    55ac:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    55ae:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    55b0:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    55b4:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    55b8:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    55bc:	ea 95       	dec	r30
	brpl ch4_no_shift	
    55be:	92 f4       	brpl	.+36     	; 0x55e4 <ch4_no_shift>

	lds ZH,tr4_params
    55c0:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    55c4:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    55c6:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    55c8:	00 2e       	mov	r0, r16
	lsr r0
    55ca:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    55cc:	00 26       	eor	r0, r16
	bst r0,0
    55ce:	00 fa       	bst	r0, 0
	lsr r17
    55d0:	16 95       	lsr	r17
	ror r16
    55d2:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    55d4:	16 f9       	bld	r17, 6
	sbrs ZH,0
    55d6:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    55d8:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    55da:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    55de:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    55e2:	03 c0       	rjmp	.+6      	; 0x55ea <ch4_end>

000055e4 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    55e4:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    55e6:	1a 95       	dec	r17
	brne .-4
    55e8:	f1 f7       	brne	.-4      	; 0x55e6 <ch4_no_shift+0x2>

000055ea <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    55ea:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    55ee:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    55f0:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    55f2:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    55f4:	21 ff       	sbrs	r18, 1
	rjmp .
    55f6:	00 c0       	rjmp	.+0      	; 0x55f8 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    55f8:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    55fa:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    55fc:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    5600:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    5602:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5604:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    5606:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    5608:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    560c:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    5610:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    5612:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    5616:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    561a:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    561e:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    5620:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    5624:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    5626:	f0 1f       	adc	r31, r16

	movw r16,ZL
    5628:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    562a:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    562e:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    5632:	00 19       	sub	r16, r0
	sbc r17,r1
    5634:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    5636:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    563a:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    563e:	e0 15       	cp	r30, r0
	cpc ZH,r1
    5640:	f1 05       	cpc	r31, r1
	brlo .+2
    5642:	08 f0       	brcs	.+2      	; 0x5646 <ch4_end+0x5c>
	movw ZL,r16
    5644:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    5646:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    564a:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    564e:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    5650:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    5654:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    5656:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5658:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    565a:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    565c:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    565e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    5660:	d0 05       	cpc	r29, r0
	brlt .+2
    5662:	0c f0       	brlt	.+2      	; 0x5666 <ch4_end+0x7c>
	ldi r28,127
    5664:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    5666:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    5668:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    566a:	d0 05       	cpc	r29, r0
	brge .+2
    566c:	0c f4       	brge	.+2      	; 0x5670 <ch4_end+0x86>
	ldi r28,-128
    566e:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    5670:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    5672:	c0 93 b3 00 	sts	0x00B3, r28

00005676 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    5676:	df 91       	pop	r29
	pop r28
    5678:	cf 91       	pop	r28
	pop r18
    567a:	2f 91       	pop	r18
	pop r17
    567c:	1f 91       	pop	r17
	pop r16
    567e:	0f 91       	pop	r16
	
	ret
    5680:	08 95       	ret

00005682 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    5682:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    5686:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    568a:	08 95       	ret

0000568c <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    568c:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    568e:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    5690:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    5692:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    5694:	6c e1       	ldi	r22, 0x1C	; 28

00005696 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    5696:	6d 93       	st	X+, r22
	sbiw r30,1
    5698:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    569a:	e9 f7       	brne	.-6      	; 0x5696 <fill_vram_loop>

	clr r1
    569c:	11 24       	eor	r1, r1

	ret
    569e:	08 95       	ret

000056a0 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    56a0:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    56a4:	45 0f       	add	r20, r21
	rjmp SetTile	
    56a6:	00 c0       	rjmp	.+0      	; 0x56a8 <SetTile>

000056a8 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    56a8:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    56aa:	76 2f       	mov	r23, r22
	lsr r22
    56ac:	66 95       	lsr	r22
	lsr r22
    56ae:	66 95       	lsr	r22
	lsr r22			;y>>3
    56b0:	66 95       	lsr	r22
	ldi r18,8		
    56b2:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    56b4:	82 9f       	mul	r24, r18
	movw XL,r0
    56b6:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    56b8:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    56ba:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    56bc:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    56be:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    56c0:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    56c2:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    56c4:	4c 93       	st	X, r20

	clr r1
    56c6:	11 24       	eor	r1, r1

	ret
    56c8:	08 95       	ret

000056ca <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    56ca:	80 93 98 0c 	sts	0x0C98, r24
	ret
    56ce:	08 95       	ret

000056d0 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    56d0:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    56d4:	90 93 97 0c 	sts	0x0C97, r25
	ret
    56d8:	08 95       	ret

000056da <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    56da:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    56de:	81 70       	andi	r24, 0x01	; 1
	ret
    56e0:	08 95       	ret

000056e2 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    56e2:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    56e6:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    56e8:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    56ec:	08 95       	ret

000056ee <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    56ee:	88 23       	and	r24, r24
	brne rj_p2
    56f0:	29 f4       	brne	.+10     	; 0x56fc <rj_p2>
		
	lds r24,joypad1_status_lo
    56f2:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    56f6:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    56fa:	08 95       	ret

000056fc <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    56fc:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    5700:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    5704:	08 95       	ret

00005706 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    5706:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    5708:	7a 95       	dec	r23
	brne .-4 ;~1 us
    570a:	f1 f7       	brne	.-4      	; 0x5708 <WaitUs+0x2>
	nop
    570c:	00 00       	nop
	sbiw r24,1
    570e:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    5710:	d1 f7       	brne	.-12     	; 0x5706 <WaitUs>

	ret
    5712:	08 95       	ret

00005714 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5714:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5716:	fe cf       	rjmp	.-4      	; 0x5714 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5718:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    571a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    571c:	60 bd       	out	0x20, r22	; 32
   cli
    571e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    5720:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    5722:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    5724:	78 94       	sei
   ret
    5726:	08 95       	ret

00005728 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5728:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    572a:	fe cf       	rjmp	.-4      	; 0x5728 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    572c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    572e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    5730:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    5732:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    5734:	80 b5       	in	r24, 0x20	; 32
   sei
    5736:	78 94       	sei
   ret
    5738:	08 95       	ret

0000573a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    573a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    573c:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    5740:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    5744:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    5748:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    574c:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    5750:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    5754:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    5758:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    575c:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    5760:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    5762:	80 93 81 00 	sts	0x0081, r24

		cli
    5766:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    5768:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    576a:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    576e:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    5770:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    5774:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    5776:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    577a:	90 93 60 00 	sts	0x0060, r25
	
		sei
    577e:	78 94       	sei

00005780 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    5780:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    5784:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    5786:	e0 f3       	brcs	.-8      	; 0x5780 <wait>

		ret
    5788:	08 95       	ret

0000578a <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    578a:	0f 93       	push	r16
		push r17
    578c:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    578e:	0f b7       	in	r16, 0x3f	; 63
		push r16
    5790:	0f 93       	push	r16

		lds r16,sync_pulse
    5792:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    5796:	03 95       	inc	r16
		sts sync_pulse,r16
    5798:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    579c:	00 fd       	sbrc	r16, 0
		rjmp 1f
    579e:	08 c0       	rjmp	.+16     	; 0x57b0 <__vector_8+0x26>
		lds r17,random_value
    57a0:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    57a4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    57a8:	10 27       	eor	r17, r16
		sts random_value,r17
    57aa:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    57ae:	07 c0       	rjmp	.+14     	; 0x57be <__vector_8+0x34>
	1:
		lds r17,random_value+1
    57b0:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    57b4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    57b8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    57ba:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    57be:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    57c0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    57c4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    57c6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    57c8:	1f 91       	pop	r17
		pop r16
    57ca:	0f 91       	pop	r16
		reti
    57cc:	18 95       	reti

000057ce <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    57ce:	98 e0       	ldi	r25, 0x08	; 8
    57d0:	88 e1       	ldi	r24, 0x18	; 24
    57d2:	0f b6       	in	r0, 0x3f	; 63
    57d4:	f8 94       	cli
    57d6:	a8 95       	wdr
    57d8:	80 93 60 00 	sts	0x0060, r24
    57dc:	0f be       	out	0x3f, r0	; 63
    57de:	90 93 60 00 	sts	0x0060, r25
	while(1);
    57e2:	ff cf       	rjmp	.-2      	; 0x57e2 <SoftReset+0x14>

000057e4 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    57e4:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    57e6:	c8 95       	lpm
    57e8:	c8 95       	lpm
		Wait200ns();
    57ea:	c8 95       	lpm
    57ec:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    57ee:	12 98       	cbi	0x02, 2	; 2
    57f0:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    57f2:	80 e0       	ldi	r24, 0x00	; 0
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    57fa:	36 95       	lsr	r19
    57fc:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    57fe:	96 95       	lsr	r25
    5800:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5802:	c8 95       	lpm
    5804:	c8 95       	lpm
			Wait200ns();
    5806:	c8 95       	lpm
    5808:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    580a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    580c:	00 9b       	sbis	0x00, 0	; 0
    580e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    5810:	01 9b       	sbis	0x00, 1	; 0
    5812:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5814:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5816:	c8 95       	lpm
    5818:	c8 95       	lpm
			Wait200ns();
    581a:	c8 95       	lpm
    581c:	c8 95       	lpm
    581e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    5820:	61 f7       	brne	.-40     	; 0x57fa <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    5822:	30 93 aa 0c 	sts	0x0CAA, r19
    5826:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    582a:	90 93 ae 0c 	sts	0x0CAE, r25
    582e:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    5832:	80 91 a9 0c 	lds	r24, 0x0CA9
    5836:	90 91 aa 0c 	lds	r25, 0x0CAA
    583a:	0f 97       	sbiw	r24, 0x0f	; 15
    583c:	31 f0       	breq	.+12     	; 0x584a <ReadButtons+0x66>
    583e:	80 91 ad 0c 	lds	r24, 0x0CAD
    5842:	90 91 ae 0c 	lds	r25, 0x0CAE
    5846:	0f 97       	sbiw	r24, 0x0f	; 15
    5848:	11 f4       	brne	.+4      	; 0x584e <ReadButtons+0x6a>
		SoftReset();
    584a:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <SoftReset>
    584e:	08 95       	ret

00005850 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    5850:	10 92 e4 0c 	sts	0x0CE4, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    5854:	00 99       	sbic	0x00, 0	; 0
    5856:	03 c0       	rjmp	.+6      	; 0x585e <ReadControllers+0xe>
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	80 93 e4 0c 	sts	0x0CE4, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    585e:	01 99       	sbic	0x00, 1	; 0
    5860:	05 c0       	rjmp	.+10     	; 0x586c <ReadControllers+0x1c>
    5862:	80 91 e4 0c 	lds	r24, 0x0CE4
    5866:	82 60       	ori	r24, 0x02	; 2
    5868:	80 93 e4 0c 	sts	0x0CE4, r24
			
	//read the standard buttons
	ReadButtons();
    586c:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <ReadButtons>

00005870 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	c0 e0       	ldi	r28, 0x00	; 0
    5876:	d0 e0       	ldi	r29, 0x00	; 0
    5878:	fe 01       	movw	r30, r28
    587a:	e4 55       	subi	r30, 0x54	; 84
    587c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    587e:	64 91       	lpm	r22, Z
    5880:	ce 01       	movw	r24, r28
    5882:	0e 94 8a 2b 	call	0x5714	; 0x5714 <WriteEeprom>
    5886:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5888:	c0 32       	cpi	r28, 0x20	; 32
    588a:	d1 05       	cpc	r29, r1
    588c:	a9 f7       	brne	.-22     	; 0x5878 <FormatEeprom+0x8>
    588e:	c0 e2       	ldi	r28, 0x20	; 32
    5890:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    5892:	6f ef       	ldi	r22, 0xFF	; 255
    5894:	ce 01       	movw	r24, r28
    5896:	0e 94 8a 2b 	call	0x5714	; 0x5714 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    589a:	6f ef       	ldi	r22, 0xFF	; 255
    589c:	ce 01       	movw	r24, r28
    589e:	01 96       	adiw	r24, 0x01	; 1
    58a0:	0e 94 8a 2b 	call	0x5714	; 0x5714 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    58a4:	a0 96       	adiw	r28, 0x20	; 32
    58a6:	c1 15       	cp	r28, r1
    58a8:	88 e0       	ldi	r24, 0x08	; 8
    58aa:	d8 07       	cpc	r29, r24
    58ac:	91 f7       	brne	.-28     	; 0x5892 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    58ae:	df 91       	pop	r29
    58b0:	cf 91       	pop	r28
    58b2:	08 95       	ret

000058b4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    58b4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    58b6:	80 e0       	ldi	r24, 0x00	; 0
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	0e 94 94 2b 	call	0x5728	; 0x5728 <ReadEeprom>
    58be:	c8 2f       	mov	r28, r24
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	0e 94 94 2b 	call	0x5728	; 0x5728 <ReadEeprom>
    58c8:	28 2f       	mov	r18, r24
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	32 2f       	mov	r19, r18
    58ce:	22 27       	eor	r18, r18
    58d0:	2c 0f       	add	r18, r28
    58d2:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    58d4:	81 e0       	ldi	r24, 0x01	; 1
    58d6:	2a 35       	cpi	r18, 0x5A	; 90
    58d8:	35 45       	sbci	r19, 0x55	; 85
    58da:	09 f0       	breq	.+2      	; 0x58de <isEepromFormatted+0x2a>
    58dc:	80 e0       	ldi	r24, 0x00	; 0
}
    58de:	cf 91       	pop	r28
    58e0:	08 95       	ret

000058e2 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    58e2:	fc 01       	movw	r30, r24
    58e4:	67 87       	std	Z+15, r22	; 0x0f
    58e6:	08 95       	ret

000058e8 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    58e8:	e8 eb       	ldi	r30, 0xB8	; 184
    58ea:	fc e0       	ldi	r31, 0x0C	; 12
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	95 8b       	std	Z+21, r25	; 0x15
    58f2:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    58f4:	63 8b       	std	Z+19, r22	; 0x13
    58f6:	08 95       	ret

000058f8 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    58f8:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    58fa:	90 81       	ld	r25, Z
    58fc:	9f 75       	andi	r25, 0x5F	; 95
    58fe:	90 83       	st	Z, r25
    5900:	08 95       	ret

00005902 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    5902:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5904:	90 81       	ld	r25, Z
    5906:	90 64       	ori	r25, 0x40	; 64
    5908:	90 83       	st	Z, r25
    590a:	08 95       	ret

0000590c <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    590c:	fc 01       	movw	r30, r24
    590e:	66 87       	std	Z+14, r22	; 0x0e
    5910:	08 95       	ret

00005912 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    5912:	fc 01       	movw	r30, r24
    5914:	62 87       	std	Z+10, r22	; 0x0a
    5916:	08 95       	ret

00005918 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5918:	fc 01       	movw	r30, r24
    591a:	63 87       	std	Z+11, r22	; 0x0b
    591c:	08 95       	ret

0000591e <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    591e:	cf 93       	push	r28
    5920:	df 93       	push	r29
    5922:	ec 01       	movw	r28, r24
    5924:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5926:	29 81       	ldd	r18, Y+1	; 0x01
    5928:	30 e0       	ldi	r19, 0x00	; 0
    592a:	f9 01       	movw	r30, r18
    592c:	ee 0f       	add	r30, r30
    592e:	ff 1f       	adc	r31, r31
    5930:	e8 5f       	subi	r30, 0xF8	; 248
    5932:	fd 49       	sbci	r31, 0x9D	; 157
    5934:	65 91       	lpm	r22, Z+
    5936:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5938:	f9 01       	movw	r30, r18
    593a:	e4 0f       	add	r30, r20
    593c:	f1 1d       	adc	r31, r1
    593e:	47 fd       	sbrc	r20, 7
    5940:	fa 95       	dec	r31
    5942:	ee 0f       	add	r30, r30
    5944:	ff 1f       	adc	r31, r31
    5946:	e8 5f       	subi	r30, 0xF8	; 248
    5948:	fd 49       	sbci	r31, 0x9D	; 157
    594a:	85 91       	lpm	r24, Z+
    594c:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    594e:	86 1b       	sub	r24, r22
    5950:	97 0b       	sbc	r25, r23
    5952:	68 85       	ldd	r22, Y+8	; 0x08
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <__divmodhi4>
	if(delta==0)delta++;
    595a:	61 15       	cp	r22, r1
    595c:	71 05       	cpc	r23, r1
    595e:	11 f4       	brne	.+4      	; 0x5964 <PatchCommand11+0x46>
    5960:	61 e0       	ldi	r22, 0x01	; 1
    5962:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    5964:	ea 81       	ldd	r30, Y+2	; 0x02
    5966:	86 e0       	ldi	r24, 0x06	; 6
    5968:	e8 9f       	mul	r30, r24
    596a:	f0 01       	movw	r30, r0
    596c:	11 24       	eor	r1, r1
    596e:	e8 54       	subi	r30, 0x48	; 72
    5970:	f3 4f       	sbci	r31, 0xF3	; 243
    5972:	81 81       	ldd	r24, Z+1	; 0x01
    5974:	92 81       	ldd	r25, Z+2	; 0x02
    5976:	86 0f       	add	r24, r22
    5978:	97 1f       	adc	r25, r23
    597a:	92 83       	std	Z+2, r25	; 0x02
    597c:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    597e:	7e 83       	std	Y+6, r23	; 0x06
    5980:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    5982:	88 81       	ld	r24, Y
    5984:	88 60       	ori	r24, 0x08	; 8
    5986:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5988:	89 81       	ldd	r24, Y+1	; 0x01
    598a:	48 0f       	add	r20, r24
    598c:	4f 83       	std	Y+7, r20	; 0x07
}
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	08 95       	ret

00005994 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    5994:	fc 01       	movw	r30, r24
    5996:	60 87       	std	Z+8, r22	; 0x08
    5998:	08 95       	ret

0000599a <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    599a:	fc 01       	movw	r30, r24
    599c:	64 83       	std	Z+4, r22	; 0x04
    599e:	08 95       	ret

000059a0 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    59a0:	fc 01       	movw	r30, r24
    59a2:	82 81       	ldd	r24, Z+2	; 0x02
    59a4:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <SetMixerWave>

000059a8 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    59a8:	fc 01       	movw	r30, r24
	track->note+=param;
    59aa:	91 81       	ldd	r25, Z+1	; 0x01
    59ac:	69 0f       	add	r22, r25
    59ae:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    59b0:	82 81       	ldd	r24, Z+2	; 0x02
    59b2:	0c 94 c6 30 	jmp	0x618c	; 0x618c <SetMixerNote>

000059b6 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    59b6:	fc 01       	movw	r30, r24
	track->note-=param;
    59b8:	91 81       	ldd	r25, Z+1	; 0x01
    59ba:	96 1b       	sub	r25, r22
    59bc:	69 2f       	mov	r22, r25
    59be:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    59c0:	82 81       	ldd	r24, Z+2	; 0x02
    59c2:	0c 94 c6 30 	jmp	0x618c	; 0x618c <SetMixerNote>

000059c6 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    59c6:	1f 93       	push	r17
    59c8:	cf 93       	push	r28
    59ca:	df 93       	push	r29
    59cc:	ec 01       	movw	r28, r24
    59ce:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    59d0:	8a 81       	ldd	r24, Y+2	; 0x02
    59d2:	0e 94 c6 30 	call	0x618c	; 0x618c <SetMixerNote>
	track->note=param;
    59d6:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    59d8:	88 81       	ld	r24, Y
    59da:	87 7f       	andi	r24, 0xF7	; 247
    59dc:	88 83       	st	Y, r24
}
    59de:	df 91       	pop	r29
    59e0:	cf 91       	pop	r28
    59e2:	1f 91       	pop	r17
    59e4:	08 95       	ret

000059e6 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    59e6:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    59e8:	14 96       	adiw	r26, 0x04	; 4
    59ea:	8c 91       	ld	r24, X
    59ec:	14 97       	sbiw	r26, 0x04	; 4
    59ee:	88 23       	and	r24, r24
    59f0:	19 f1       	breq	.+70     	; 0x5a38 <PatchCommand14+0x52>
    59f2:	55 96       	adiw	r26, 0x15	; 21
    59f4:	2d 91       	ld	r18, X+
    59f6:	3c 91       	ld	r19, X
    59f8:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    59fa:	66 23       	and	r22, r22
    59fc:	79 f0       	breq	.+30     	; 0x5a1c <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    59fe:	77 27       	eor	r23, r23
    5a00:	67 fd       	sbrc	r22, 7
    5a02:	70 95       	com	r23
    5a04:	6f 5f       	subi	r22, 0xFF	; 255
    5a06:	7f 4f       	sbci	r23, 0xFF	; 255
    5a08:	ab 01       	movw	r20, r22
    5a0a:	44 0f       	add	r20, r20
    5a0c:	55 1f       	adc	r21, r21
    5a0e:	64 0f       	add	r22, r20
    5a10:	75 1f       	adc	r23, r21
    5a12:	26 1b       	sub	r18, r22
    5a14:	37 0b       	sbc	r19, r23
    5a16:	09 c0       	rjmp	.+18     	; 0x5a2a <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5a18:	ef 3f       	cpi	r30, 0xFF	; 255
    5a1a:	39 f0       	breq	.+14     	; 0x5a2a <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    5a1c:	23 50       	subi	r18, 0x03	; 3
    5a1e:	31 09       	sbc	r19, r1
    5a20:	f9 01       	movw	r30, r18
    5a22:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5a24:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5a26:	ed 30       	cpi	r30, 0x0D	; 13
    5a28:	b9 f7       	brne	.-18     	; 0x5a18 <PatchCommand14+0x32>
    5a2a:	56 96       	adiw	r26, 0x16	; 22
    5a2c:	3c 93       	st	X, r19
    5a2e:	2e 93       	st	-X, r18
    5a30:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    5a32:	81 50       	subi	r24, 0x01	; 1
    5a34:	14 96       	adiw	r26, 0x04	; 4
    5a36:	8c 93       	st	X, r24
    5a38:	08 95       	ret

00005a3a <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    5a3a:	90 93 5d 0d 	sts	0x0D5D, r25
    5a3e:	80 93 5c 0d 	sts	0x0D5C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5a42:	8f e6       	ldi	r24, 0x6F	; 111
    5a44:	80 93 5f 0d 	sts	0x0D5F, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5a48:	10 92 b6 0c 	sts	0x0CB6, r1
    5a4c:	e7 ef       	ldi	r30, 0xF7	; 247
    5a4e:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5a50:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5a52:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5a54:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5a56:	28 e1       	ldi	r18, 0x18	; 24
    5a58:	df 01       	movw	r26, r30
    5a5a:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    5a5c:	8c 93       	st	X, r24
    5a5e:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5a60:	9c 93       	st	X, r25
    5a62:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    5a64:	1c 92       	st	X, r1
    5a66:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5a68:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5a6a:	10 82       	st	Z, r1
    5a6c:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    5a6e:	2c 93       	st	X, r18
    5a70:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5a72:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5a74:	8f 5f       	subi	r24, 0xFF	; 255
    5a76:	77 96       	adiw	r30, 0x17	; 23
    5a78:	85 30       	cpi	r24, 0x05	; 5
    5a7a:	71 f7       	brne	.-36     	; 0x5a58 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5a7c:	08 95       	ret

00005a7e <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    5a7e:	e7 ee       	ldi	r30, 0xE7	; 231
    5a80:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5a82:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5a84:	20 81       	ld	r18, Z
    5a86:	2f 77       	andi	r18, 0x7F	; 127
    5a88:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5a8a:	33 83       	std	Z+3, r19	; 0x03
    5a8c:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    5a8e:	2d e0       	ldi	r18, 0x0D	; 13
    5a90:	ea 35       	cpi	r30, 0x5A	; 90
    5a92:	f2 07       	cpc	r31, r18
    5a94:	b9 f7       	brne	.-18     	; 0x5a84 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    5a96:	01 96       	adiw	r24, 0x01	; 1
    5a98:	90 93 64 0d 	sts	0x0D64, r25
    5a9c:	80 93 63 0d 	sts	0x0D63, r24
		songStart=song+1;//skip first delta-time
    5aa0:	90 93 e6 0c 	sts	0x0CE6, r25
    5aa4:	80 93 e5 0c 	sts	0x0CE5, r24
		loopStart=song+1;
    5aa8:	90 93 66 0d 	sts	0x0D66, r25
    5aac:	80 93 65 0d 	sts	0x0D65, r24
		nextDeltaTime=0;
    5ab0:	10 92 61 0d 	sts	0x0D61, r1
    5ab4:	10 92 60 0d 	sts	0x0D60, r1
		currDeltaTime=0;
    5ab8:	10 92 5b 0d 	sts	0x0D5B, r1
    5abc:	10 92 5a 0d 	sts	0x0D5A, r1
		songSpeed=0;
    5ac0:	10 92 62 0d 	sts	0x0D62, r1

		lastStatus=0;
    5ac4:	10 92 5e 0d 	sts	0x0D5E, r1
		playSong=true;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	80 93 b6 0c 	sts	0x0CB6, r24
    5ace:	08 95       	ret

00005ad0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5ad0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5ad2:	ed 91       	ld	r30, X+
    5ad4:	fc 91       	ld	r31, X
    5ad6:	11 97       	sbiw	r26, 0x01	; 1
    5ad8:	9f 01       	movw	r18, r30
    5ada:	2f 5f       	subi	r18, 0xFF	; 255
    5adc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ade:	11 96       	adiw	r26, 0x01	; 1
    5ae0:	3c 93       	st	X, r19
    5ae2:	2e 93       	st	-X, r18
    5ae4:	e4 91       	lpm	r30, Z
    5ae6:	e7 fd       	sbrc	r30, 7
    5ae8:	03 c0       	rjmp	.+6      	; 0x5af0 <ReadVarLen+0x20>
    5aea:	8e 2f       	mov	r24, r30
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	08 95       	ret
    {
       value &= 0x7F;
    5af0:	ef 77       	andi	r30, 0x7F	; 127
    5af2:	8e 2f       	mov	r24, r30
    5af4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5af6:	96 95       	lsr	r25
    5af8:	98 2f       	mov	r25, r24
    5afa:	88 27       	eor	r24, r24
    5afc:	97 95       	ror	r25
    5afe:	87 95       	ror	r24
    5b00:	2f 5f       	subi	r18, 0xFF	; 255
    5b02:	3f 4f       	sbci	r19, 0xFF	; 255
    5b04:	f9 01       	movw	r30, r18
    5b06:	31 97       	sbiw	r30, 0x01	; 1
    5b08:	e4 91       	lpm	r30, Z
    5b0a:	4e 2f       	mov	r20, r30
    5b0c:	4f 77       	andi	r20, 0x7F	; 127
    5b0e:	84 0f       	add	r24, r20
    5b10:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5b12:	e7 fd       	sbrc	r30, 7
    5b14:	f0 cf       	rjmp	.-32     	; 0x5af6 <ReadVarLen+0x26>
    5b16:	2d 93       	st	X+, r18
    5b18:	3c 93       	st	X, r19
    }


    return value;
}
    5b1a:	08 95       	ret

00005b1c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    5b1c:	ef 92       	push	r14
    5b1e:	ff 92       	push	r15
    5b20:	0f 93       	push	r16
    5b22:	1f 93       	push	r17
    5b24:	cf 93       	push	r28
    5b26:	df 93       	push	r29
    5b28:	1f 92       	push	r1
    5b2a:	cd b7       	in	r28, 0x3d	; 61
    5b2c:	de b7       	in	r29, 0x3e	; 62
    5b2e:	7c 01       	movw	r14, r24
    5b30:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5b32:	fc 01       	movw	r30, r24
    5b34:	80 81       	ld	r24, Z
    5b36:	08 2f       	mov	r16, r24
    5b38:	00 1f       	adc	r16, r16
    5b3a:	00 27       	eor	r16, r16
    5b3c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    5b3e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    5b40:	9f ef       	ldi	r25, 0xFF	; 255
    5b42:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    5b44:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    5b46:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5b48:	87 7b       	andi	r24, 0xB7	; 183
    5b4a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5b4c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    5b4e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    5b50:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    5b52:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5b54:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    5b56:	82 81       	ldd	r24, Z+2	; 0x02
    5b58:	83 30       	cpi	r24, 0x03	; 3
    5b5a:	69 f4       	brne	.+26     	; 0x5b76 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    5b5c:	01 11       	cpse	r16, r1
    5b5e:	01 c0       	rjmp	.+2      	; 0x5b62 <TriggerCommon+0x46>
    5b60:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    5b62:	81 e0       	ldi	r24, 0x01	; 1
    5b64:	91 e0       	ldi	r25, 0x01	; 1
    5b66:	90 93 cd 0c 	sts	0x0CCD, r25
    5b6a:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	80 93 cb 0c 	sts	0x0CCB, r24
    5b74:	39 c0       	rjmp	.+114    	; 0x5be8 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    5b76:	84 30       	cpi	r24, 0x04	; 4
    5b78:	69 f5       	brne	.+90     	; 0x5bd4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5b7a:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5b7e:	80 91 5c 0d 	lds	r24, 0x0D5C
    5b82:	90 91 5d 0d 	lds	r25, 0x0D5D
    5b86:	f9 e0       	ldi	r31, 0x09	; 9
    5b88:	6f 9f       	mul	r22, r31
    5b8a:	80 0d       	add	r24, r0
    5b8c:	91 1d       	adc	r25, r1
    5b8e:	11 24       	eor	r1, r1
    5b90:	fc 01       	movw	r30, r24
    5b92:	31 96       	adiw	r30, 0x01	; 1
    5b94:	a5 91       	lpm	r26, Z+
    5b96:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5b98:	b0 93 d5 0c 	sts	0x0CD5, r27
    5b9c:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5ba0:	ac 01       	movw	r20, r24
    5ba2:	49 5f       	subi	r20, 0xF9	; 249
    5ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba6:	fa 01       	movw	r30, r20
    5ba8:	65 91       	lpm	r22, Z+
    5baa:	74 91       	lpm	r23, Z
    5bac:	05 96       	adiw	r24, 0x05	; 5
    5bae:	fc 01       	movw	r30, r24
    5bb0:	85 91       	lpm	r24, Z+
    5bb2:	94 91       	lpm	r25, Z
    5bb4:	68 1b       	sub	r22, r24
    5bb6:	79 0b       	sbc	r23, r25
    5bb8:	70 93 d7 0c 	sts	0x0CD7, r23
    5bbc:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5bc0:	fa 01       	movw	r30, r20
    5bc2:	85 91       	lpm	r24, Z+
    5bc4:	94 91       	lpm	r25, Z
    5bc6:	a8 0f       	add	r26, r24
    5bc8:	b9 1f       	adc	r27, r25
    5bca:	b0 93 d9 0c 	sts	0x0CD9, r27
    5bce:	a0 93 d8 0c 	sts	0x0CD8, r26
    5bd2:	05 c0       	rjmp	.+10     	; 0x5bde <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    5bd4:	60 e0       	ldi	r22, 0x00	; 0
    5bd6:	29 83       	std	Y+1, r18	; 0x01
    5bd8:	0e 94 dd 30 	call	0x61ba	; 0x61ba <SetMixerWave>
			SetMixerNote(track->channel,note);
    5bdc:	29 81       	ldd	r18, Y+1	; 0x01
    5bde:	62 2f       	mov	r22, r18
    5be0:	f7 01       	movw	r30, r14
    5be2:	82 81       	ldd	r24, Z+2	; 0x02
    5be4:	0e 94 c6 30 	call	0x618c	; 0x618c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5be8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5bea:	00 23       	and	r16, r16
    5bec:	11 f0       	breq	.+4      	; 0x5bf2 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    5bee:	11 8b       	std	Z+17, r17	; 0x11
    5bf0:	01 c0       	rjmp	.+2      	; 0x5bf4 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    5bf2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    5bf4:	e0 91 5c 0d 	lds	r30, 0x0D5C
    5bf8:	f0 91 5d 0d 	lds	r31, 0x0D5D
    5bfc:	39 e0       	ldi	r19, 0x09	; 9
    5bfe:	13 9f       	mul	r17, r19
    5c00:	e0 0d       	add	r30, r0
    5c02:	f1 1d       	adc	r31, r1
    5c04:	11 24       	eor	r1, r1
    5c06:	33 96       	adiw	r30, 0x03	; 3
    5c08:	85 91       	lpm	r24, Z+
    5c0a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    5c0c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    5c0e:	00 97       	sbiw	r24, 0x00	; 0
    5c10:	19 f4       	brne	.+6      	; 0x5c18 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    5c12:	16 8a       	std	Z+22, r1	; 0x16
    5c14:	15 8a       	std	Z+21, r1	; 0x15
    5c16:	08 c0       	rjmp	.+16     	; 0x5c28 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    5c18:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	24 91       	lpm	r18, Z
    5c1e:	f7 01       	movw	r30, r14
    5c20:	22 8b       	std	Z+18, r18	; 0x12
    5c22:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    5c24:	96 8b       	std	Z+22, r25	; 0x16
    5c26:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    5c28:	0f 90       	pop	r0
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	ff 90       	pop	r15
    5c34:	ef 90       	pop	r14
    5c36:	08 95       	ret

00005c38 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    5c38:	cf 93       	push	r28
    5c3a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    5c3c:	e0 91 5c 0d 	lds	r30, 0x0D5C
    5c40:	f0 91 5d 0d 	lds	r31, 0x0D5D
    5c44:	99 e0       	ldi	r25, 0x09	; 9
    5c46:	89 9f       	mul	r24, r25
    5c48:	e0 0d       	add	r30, r0
    5c4a:	f1 1d       	adc	r31, r1
    5c4c:	11 24       	eor	r1, r1
    5c4e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    5c50:	e1 30       	cpi	r30, 0x01	; 1
    5c52:	e9 f0       	breq	.+58     	; 0x5c8e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    5c54:	e2 30       	cpi	r30, 0x02	; 2
    5c56:	e9 f0       	breq	.+58     	; 0x5c92 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    5c58:	20 91 fe 0c 	lds	r18, 0x0CFE
    5c5c:	27 ff       	sbrs	r18, 7
    5c5e:	1d c0       	rjmp	.+58     	; 0x5c9a <TriggerFx+0x62>
    5c60:	20 91 0f 0d 	lds	r18, 0x0D0F
    5c64:	28 13       	cpse	r18, r24
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <TriggerFx+0x34>
    5c68:	41 11       	cpse	r20, r1
    5c6a:	17 c0       	rjmp	.+46     	; 0x5c9a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    5c6c:	20 91 15 0d 	lds	r18, 0x0D15
    5c70:	27 ff       	sbrs	r18, 7
    5c72:	11 c0       	rjmp	.+34     	; 0x5c96 <TriggerFx+0x5e>
    5c74:	20 91 26 0d 	lds	r18, 0x0D26
    5c78:	28 13       	cpse	r18, r24
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <TriggerFx+0x48>
    5c7c:	41 11       	cpse	r20, r1
    5c7e:	0b c0       	rjmp	.+22     	; 0x5c96 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    5c80:	20 91 12 0d 	lds	r18, 0x0D12
    5c84:	90 91 29 0d 	lds	r25, 0x0D29
    5c88:	92 17       	cp	r25, r18
    5c8a:	28 f4       	brcc	.+10     	; 0x5c96 <TriggerFx+0x5e>
    5c8c:	06 c0       	rjmp	.+12     	; 0x5c9a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    5c8e:	c3 e0       	ldi	r28, 0x03	; 3
    5c90:	05 c0       	rjmp	.+10     	; 0x5c9c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    5c92:	c4 e0       	ldi	r28, 0x04	; 4
    5c94:	03 c0       	rjmp	.+6      	; 0x5c9c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    5c96:	c2 e0       	ldi	r28, 0x02	; 2
    5c98:	01 c0       	rjmp	.+2      	; 0x5c9c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    5c9a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    5c9c:	97 e1       	ldi	r25, 0x17	; 23
    5c9e:	c9 9f       	mul	r28, r25
    5ca0:	e0 01       	movw	r28, r0
    5ca2:	11 24       	eor	r1, r1
    5ca4:	c9 51       	subi	r28, 0x19	; 25
    5ca6:	d3 4f       	sbci	r29, 0xF3	; 243
    5ca8:	90 e8       	ldi	r25, 0x80	; 128
    5caa:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    5cac:	1e 8a       	std	Y+22, r1	; 0x16
    5cae:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    5cb0:	20 e5       	ldi	r18, 0x50	; 80
    5cb2:	46 2f       	mov	r20, r22
    5cb4:	68 2f       	mov	r22, r24
    5cb6:	ce 01       	movw	r24, r28
    5cb8:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    5cbc:	88 81       	ld	r24, Y
    5cbe:	80 62       	ori	r24, 0x20	; 32
    5cc0:	88 83       	st	Y, r24
}
    5cc2:	df 91       	pop	r29
    5cc4:	cf 91       	pop	r28
    5cc6:	08 95       	ret

00005cc8 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    5cc8:	cf 93       	push	r28
    5cca:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    5ccc:	a8 2f       	mov	r26, r24
    5cce:	b0 e0       	ldi	r27, 0x00	; 0
    5cd0:	97 e1       	ldi	r25, 0x17	; 23
    5cd2:	89 9f       	mul	r24, r25
    5cd4:	f0 01       	movw	r30, r0
    5cd6:	11 24       	eor	r1, r1
    5cd8:	e9 51       	subi	r30, 0x19	; 25
    5cda:	f3 4f       	sbci	r31, 0xF3	; 243
    5cdc:	80 81       	ld	r24, Z
    5cde:	85 ff       	sbrs	r24, 5
    5ce0:	02 c0       	rjmp	.+4      	; 0x5ce6 <TriggerNote+0x1e>
    5ce2:	87 fd       	sbrc	r24, 7
    5ce4:	2e c0       	rjmp	.+92     	; 0x5d42 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    5ce6:	21 11       	cpse	r18, r1
    5ce8:	18 c0       	rjmp	.+48     	; 0x5d1a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    5cea:	97 e1       	ldi	r25, 0x17	; 23
    5cec:	9a 9f       	mul	r25, r26
    5cee:	f0 01       	movw	r30, r0
    5cf0:	9b 9f       	mul	r25, r27
    5cf2:	f0 0d       	add	r31, r0
    5cf4:	11 24       	eor	r1, r1
    5cf6:	e9 51       	subi	r30, 0x19	; 25
    5cf8:	f3 4f       	sbci	r31, 0xF3	; 243
    5cfa:	97 85       	ldd	r25, Z+15	; 0x0f
    5cfc:	91 11       	cpse	r25, r1
    5cfe:	02 c0       	rjmp	.+4      	; 0x5d04 <TriggerNote+0x3c>
    5d00:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    5d02:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    5d04:	97 e1       	ldi	r25, 0x17	; 23
    5d06:	9a 9f       	mul	r25, r26
    5d08:	f0 01       	movw	r30, r0
    5d0a:	9b 9f       	mul	r25, r27
    5d0c:	f0 0d       	add	r31, r0
    5d0e:	11 24       	eor	r1, r1
    5d10:	e9 51       	subi	r30, 0x19	; 25
    5d12:	f3 4f       	sbci	r31, 0xF3	; 243
    5d14:	8f 7b       	andi	r24, 0xBF	; 191
    5d16:	80 83       	st	Z, r24
    5d18:	14 c0       	rjmp	.+40     	; 0x5d42 <TriggerNote+0x7a>
    5d1a:	82 2f       	mov	r24, r18
    5d1c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5d1e:	97 e1       	ldi	r25, 0x17	; 23
    5d20:	9a 9f       	mul	r25, r26
    5d22:	e0 01       	movw	r28, r0
    5d24:	9b 9f       	mul	r25, r27
    5d26:	d0 0d       	add	r29, r0
    5d28:	11 24       	eor	r1, r1
    5d2a:	c9 51       	subi	r28, 0x19	; 25
    5d2c:	d3 4f       	sbci	r29, 0xF3	; 243
    5d2e:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    5d30:	1e 8a       	std	Y+22, r1	; 0x16
    5d32:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    5d34:	48 2f       	mov	r20, r24
    5d36:	ce 01       	movw	r24, r28
    5d38:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    5d3c:	88 81       	ld	r24, Y
    5d3e:	80 62       	ori	r24, 0x20	; 32
    5d40:	88 83       	st	Y, r24
		}

	}
}
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	08 95       	ret

00005d48 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    5d48:	6f 92       	push	r6
    5d4a:	7f 92       	push	r7
    5d4c:	8f 92       	push	r8
    5d4e:	9f 92       	push	r9
    5d50:	af 92       	push	r10
    5d52:	bf 92       	push	r11
    5d54:	cf 92       	push	r12
    5d56:	df 92       	push	r13
    5d58:	ef 92       	push	r14
    5d5a:	ff 92       	push	r15
    5d5c:	0f 93       	push	r16
    5d5e:	1f 93       	push	r17
    5d60:	cf 93       	push	r28
    5d62:	df 93       	push	r29
    5d64:	c7 ee       	ldi	r28, 0xE7	; 231
    5d66:	dc e0       	ldi	r29, 0x0C	; 12
    5d68:	08 eb       	ldi	r16, 0xB8	; 184
    5d6a:	1c e0       	ldi	r17, 0x0C	; 12
    5d6c:	d8 01       	movw	r26, r16
    5d6e:	9e 01       	movw	r18, r28
    5d70:	40 e0       	ldi	r20, 0x00	; 0
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	ca 01       	movw	r24, r20
    5d76:	89 51       	subi	r24, 0x19	; 25
    5d78:	93 4f       	sbci	r25, 0xF3	; 243
    5d7a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	87 85       	ldd	r24, Z+15	; 0x0f
    5d80:	88 23       	and	r24, r24
    5d82:	91 f0       	breq	.+36     	; 0x5da8 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    5d84:	66 85       	ldd	r22, Z+14	; 0x0e
    5d86:	99 27       	eor	r25, r25
    5d88:	87 fd       	sbrc	r24, 7
    5d8a:	90 95       	com	r25
    5d8c:	86 0f       	add	r24, r22
    5d8e:	91 1d       	adc	r25, r1
    5d90:	8f 3f       	cpi	r24, 0xFF	; 255
    5d92:	91 05       	cpc	r25, r1
    5d94:	19 f0       	breq	.+6      	; 0x5d9c <ProcessMusic+0x54>
    5d96:	14 f0       	brlt	.+4      	; 0x5d9c <ProcessMusic+0x54>
    5d98:	8f ef       	ldi	r24, 0xFF	; 255
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	97 ff       	sbrs	r25, 7
    5d9e:	02 c0       	rjmp	.+4      	; 0x5da4 <ProcessMusic+0x5c>
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    5da4:	f6 01       	movw	r30, r12
    5da6:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    5da8:	f9 01       	movw	r30, r18
    5daa:	f0 80       	ld	r15, Z
    5dac:	f3 fe       	sbrs	r15, 3
    5dae:	2a c0       	rjmp	.+84     	; 0x5e04 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    5db0:	65 81       	ldd	r22, Z+5	; 0x05
    5db2:	76 81       	ldd	r23, Z+6	; 0x06
    5db4:	11 96       	adiw	r26, 0x01	; 1
    5db6:	8d 91       	ld	r24, X+
    5db8:	9c 91       	ld	r25, X
    5dba:	12 97       	sbiw	r26, 0x02	; 2
    5dbc:	86 0f       	add	r24, r22
    5dbe:	97 1f       	adc	r25, r23
    5dc0:	12 96       	adiw	r26, 0x02	; 2
    5dc2:	9c 93       	st	X, r25
    5dc4:	8e 93       	st	-X, r24
    5dc6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    5dc8:	f6 01       	movw	r30, r12
    5dca:	e7 80       	ldd	r14, Z+7	; 0x07
    5dcc:	ee 2d       	mov	r30, r14
    5dce:	f0 e0       	ldi	r31, 0x00	; 0
    5dd0:	ee 0f       	add	r30, r30
    5dd2:	ff 1f       	adc	r31, r31
    5dd4:	e8 5f       	subi	r30, 0xF8	; 248
    5dd6:	fd 49       	sbci	r31, 0x9D	; 157
    5dd8:	c5 90       	lpm	r12, Z+
    5dda:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    5ddc:	16 16       	cp	r1, r22
    5dde:	17 06       	cpc	r1, r23
    5de0:	24 f4       	brge	.+8      	; 0x5dea <ProcessMusic+0xa2>
    5de2:	8c 15       	cp	r24, r12
    5de4:	9d 05       	cpc	r25, r13
    5de6:	30 f4       	brcc	.+12     	; 0x5df4 <ProcessMusic+0xac>
    5de8:	0d c0       	rjmp	.+26     	; 0x5e04 <ProcessMusic+0xbc>
    5dea:	67 2b       	or	r22, r23
    5dec:	59 f0       	breq	.+22     	; 0x5e04 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    5dee:	c8 16       	cp	r12, r24
    5df0:	d9 06       	cpc	r13, r25
    5df2:	40 f0       	brcs	.+16     	; 0x5e04 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    5df4:	12 96       	adiw	r26, 0x02	; 2
    5df6:	dc 92       	st	X, r13
    5df8:	ce 92       	st	-X, r12
    5dfa:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5dfc:	8f 2d       	mov	r24, r15
    5dfe:	87 7f       	andi	r24, 0xF7	; 247
    5e00:	f9 01       	movw	r30, r18
    5e02:	80 83       	st	Z, r24
    5e04:	49 5e       	subi	r20, 0xE9	; 233
    5e06:	5f 4f       	sbci	r21, 0xFF	; 255
    5e08:	29 5e       	subi	r18, 0xE9	; 233
    5e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e0c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5e0e:	43 37       	cpi	r20, 0x73	; 115
    5e10:	51 05       	cpc	r21, r1
    5e12:	09 f0       	breq	.+2      	; 0x5e16 <ProcessMusic+0xce>
    5e14:	af cf       	rjmp	.-162    	; 0x5d74 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    5e16:	80 91 b6 0c 	lds	r24, 0x0CB6
    5e1a:	88 23       	and	r24, r24
    5e1c:	09 f4       	brne	.+2      	; 0x5e20 <ProcessMusic+0xd8>
    5e1e:	cc c0       	rjmp	.+408    	; 0x5fb8 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    5e20:	57 e1       	ldi	r21, 0x17	; 23
    5e22:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    5e24:	80 91 5a 0d 	lds	r24, 0x0D5A
    5e28:	90 91 5b 0d 	lds	r25, 0x0D5B
    5e2c:	20 91 60 0d 	lds	r18, 0x0D60
    5e30:	30 91 61 0d 	lds	r19, 0x0D61
    5e34:	82 17       	cp	r24, r18
    5e36:	93 07       	cpc	r25, r19
    5e38:	09 f0       	breq	.+2      	; 0x5e3c <ProcessMusic+0xf4>
    5e3a:	b9 c0       	rjmp	.+370    	; 0x5fae <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    5e3c:	20 91 63 0d 	lds	r18, 0x0D63
    5e40:	30 91 64 0d 	lds	r19, 0x0D64
    5e44:	b9 01       	movw	r22, r18
    5e46:	6f 5f       	subi	r22, 0xFF	; 255
    5e48:	7f 4f       	sbci	r23, 0xFF	; 255
    5e4a:	70 93 64 0d 	sts	0x0D64, r23
    5e4e:	60 93 63 0d 	sts	0x0D63, r22
    5e52:	f9 01       	movw	r30, r18
    5e54:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    5e56:	4f 3f       	cpi	r20, 0xFF	; 255
    5e58:	79 f5       	brne	.+94     	; 0x5eb8 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    5e5a:	a9 01       	movw	r20, r18
    5e5c:	4e 5f       	subi	r20, 0xFE	; 254
    5e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e60:	50 93 64 0d 	sts	0x0D64, r21
    5e64:	40 93 63 0d 	sts	0x0D63, r20
    5e68:	fb 01       	movw	r30, r22
    5e6a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    5e6c:	6f 32       	cpi	r22, 0x2F	; 47
    5e6e:	19 f4       	brne	.+6      	; 0x5e76 <ProcessMusic+0x12e>
						playSong=false;
    5e70:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    5e74:	9c c0       	rjmp	.+312    	; 0x5fae <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    5e76:	66 30       	cpi	r22, 0x06	; 6
    5e78:	09 f0       	breq	.+2      	; 0x5e7c <ProcessMusic+0x134>
    5e7a:	8c c0       	rjmp	.+280    	; 0x5f94 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    5e7c:	fa 01       	movw	r30, r20
    5e7e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    5e80:	c9 01       	movw	r24, r18
    5e82:	04 96       	adiw	r24, 0x04	; 4
    5e84:	90 93 64 0d 	sts	0x0D64, r25
    5e88:	80 93 63 0d 	sts	0x0D63, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    5e8c:	f9 01       	movw	r30, r18
    5e8e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    5e90:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    5e92:	e3 35       	cpi	r30, 0x53	; 83
    5e94:	29 f4       	brne	.+10     	; 0x5ea0 <ProcessMusic+0x158>
							loopStart=songPos;
    5e96:	90 93 66 0d 	sts	0x0D66, r25
    5e9a:	80 93 65 0d 	sts	0x0D65, r24
    5e9e:	7a c0       	rjmp	.+244    	; 0x5f94 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    5ea0:	e5 34       	cpi	r30, 0x45	; 69
    5ea2:	09 f0       	breq	.+2      	; 0x5ea6 <ProcessMusic+0x15e>
    5ea4:	77 c0       	rjmp	.+238    	; 0x5f94 <ProcessMusic+0x24c>
							songPos=loopStart;
    5ea6:	80 91 65 0d 	lds	r24, 0x0D65
    5eaa:	90 91 66 0d 	lds	r25, 0x0D66
    5eae:	90 93 64 0d 	sts	0x0D64, r25
    5eb2:	80 93 63 0d 	sts	0x0D63, r24
    5eb6:	6e c0       	rjmp	.+220    	; 0x5f94 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    5eb8:	47 fd       	sbrc	r20, 7
    5eba:	40 93 5e 0d 	sts	0x0D5E, r20
					channel=lastStatus&0x0f;
    5ebe:	90 91 5e 0d 	lds	r25, 0x0D5E
    5ec2:	89 2f       	mov	r24, r25
    5ec4:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    5ec6:	47 ff       	sbrs	r20, 7
    5ec8:	08 c0       	rjmp	.+16     	; 0x5eda <ProcessMusic+0x192>
    5eca:	2e 5f       	subi	r18, 0xFE	; 254
    5ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ece:	30 93 64 0d 	sts	0x0D64, r19
    5ed2:	20 93 63 0d 	sts	0x0D63, r18
    5ed6:	fb 01       	movw	r30, r22
    5ed8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    5eda:	90 7f       	andi	r25, 0xF0	; 240
    5edc:	90 3b       	cpi	r25, 0xB0	; 176
    5ede:	e1 f0       	breq	.+56     	; 0x5f18 <ProcessMusic+0x1d0>
    5ee0:	90 3c       	cpi	r25, 0xC0	; 192
    5ee2:	09 f4       	brne	.+2      	; 0x5ee6 <ProcessMusic+0x19e>
    5ee4:	51 c0       	rjmp	.+162    	; 0x5f88 <ProcessMusic+0x240>
    5ee6:	90 39       	cpi	r25, 0x90	; 144
    5ee8:	09 f0       	breq	.+2      	; 0x5eec <ProcessMusic+0x1a4>
    5eea:	54 c0       	rjmp	.+168    	; 0x5f94 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    5eec:	e0 91 63 0d 	lds	r30, 0x0D63
    5ef0:	f0 91 64 0d 	lds	r31, 0x0D64
    5ef4:	9f 01       	movw	r18, r30
    5ef6:	2f 5f       	subi	r18, 0xFF	; 255
    5ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    5efa:	30 93 64 0d 	sts	0x0D64, r19
    5efe:	20 93 63 0d 	sts	0x0D63, r18
    5f02:	24 91       	lpm	r18, Z
    5f04:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    5f06:	f8 9e       	mul	r15, r24
    5f08:	f0 01       	movw	r30, r0
    5f0a:	11 24       	eor	r1, r1
    5f0c:	e9 51       	subi	r30, 0x19	; 25
    5f0e:	f3 4f       	sbci	r31, 0xF3	; 243
    5f10:	60 89       	ldd	r22, Z+16	; 0x10
    5f12:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <TriggerNote>
    5f16:	3e c0       	rjmp	.+124    	; 0x5f94 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    5f18:	e0 91 63 0d 	lds	r30, 0x0D63
    5f1c:	f0 91 64 0d 	lds	r31, 0x0D64
    5f20:	9f 01       	movw	r18, r30
    5f22:	2f 5f       	subi	r18, 0xFF	; 255
    5f24:	3f 4f       	sbci	r19, 0xFF	; 255
    5f26:	30 93 64 0d 	sts	0x0D64, r19
    5f2a:	20 93 63 0d 	sts	0x0D63, r18
    5f2e:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    5f30:	47 30       	cpi	r20, 0x07	; 7
    5f32:	49 f4       	brne	.+18     	; 0x5f46 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    5f34:	f8 9e       	mul	r15, r24
    5f36:	d0 01       	movw	r26, r0
    5f38:	11 24       	eor	r1, r1
    5f3a:	a9 51       	subi	r26, 0x19	; 25
    5f3c:	b3 4f       	sbci	r27, 0xF3	; 243
    5f3e:	ee 0f       	add	r30, r30
    5f40:	1c 96       	adiw	r26, 0x0c	; 12
    5f42:	ec 93       	st	X, r30
    5f44:	27 c0       	rjmp	.+78     	; 0x5f94 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    5f46:	4b 30       	cpi	r20, 0x0B	; 11
    5f48:	49 f4       	brne	.+18     	; 0x5f5c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    5f4a:	f8 9e       	mul	r15, r24
    5f4c:	d0 01       	movw	r26, r0
    5f4e:	11 24       	eor	r1, r1
    5f50:	a9 51       	subi	r26, 0x19	; 25
    5f52:	b3 4f       	sbci	r27, 0xF3	; 243
    5f54:	ee 0f       	add	r30, r30
    5f56:	13 96       	adiw	r26, 0x03	; 3
    5f58:	ec 93       	st	X, r30
    5f5a:	1c c0       	rjmp	.+56     	; 0x5f94 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    5f5c:	4c 35       	cpi	r20, 0x5C	; 92
    5f5e:	49 f4       	brne	.+18     	; 0x5f72 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    5f60:	f8 9e       	mul	r15, r24
    5f62:	d0 01       	movw	r26, r0
    5f64:	11 24       	eor	r1, r1
    5f66:	a9 51       	subi	r26, 0x19	; 25
    5f68:	b3 4f       	sbci	r27, 0xF3	; 243
    5f6a:	ee 0f       	add	r30, r30
    5f6c:	1a 96       	adiw	r26, 0x0a	; 10
    5f6e:	ec 93       	st	X, r30
    5f70:	11 c0       	rjmp	.+34     	; 0x5f94 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    5f72:	44 36       	cpi	r20, 0x64	; 100
    5f74:	79 f4       	brne	.+30     	; 0x5f94 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    5f76:	f8 9e       	mul	r15, r24
    5f78:	d0 01       	movw	r26, r0
    5f7a:	11 24       	eor	r1, r1
    5f7c:	a9 51       	subi	r26, 0x19	; 25
    5f7e:	b3 4f       	sbci	r27, 0xF3	; 243
    5f80:	ee 0f       	add	r30, r30
    5f82:	1b 96       	adiw	r26, 0x0b	; 11
    5f84:	ec 93       	st	X, r30
    5f86:	06 c0       	rjmp	.+12     	; 0x5f94 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    5f88:	f8 9e       	mul	r15, r24
    5f8a:	f0 01       	movw	r30, r0
    5f8c:	11 24       	eor	r1, r1
    5f8e:	e9 51       	subi	r30, 0x19	; 25
    5f90:	f3 4f       	sbci	r31, 0xF3	; 243
    5f92:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    5f94:	83 e6       	ldi	r24, 0x63	; 99
    5f96:	9d e0       	ldi	r25, 0x0D	; 13
    5f98:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadVarLen>
    5f9c:	90 93 61 0d 	sts	0x0D61, r25
    5fa0:	80 93 60 0d 	sts	0x0D60, r24
				currDeltaTime=0;
    5fa4:	10 92 5b 0d 	sts	0x0D5B, r1
    5fa8:	10 92 5a 0d 	sts	0x0D5A, r1
    5fac:	3b cf       	rjmp	.-394    	; 0x5e24 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    5fae:	01 96       	adiw	r24, 0x01	; 1
    5fb0:	90 93 5b 0d 	sts	0x0D5B, r25
    5fb4:	80 93 5a 0d 	sts	0x0D5A, r24
    5fb8:	90 ef       	ldi	r25, 0xF0	; 240
    5fba:	a9 2e       	mov	r10, r25
    5fbc:	9c e0       	ldi	r25, 0x0C	; 12
    5fbe:	b9 2e       	mov	r11, r25
    5fc0:	2a ef       	ldi	r18, 0xFA	; 250
    5fc2:	c2 2e       	mov	r12, r18
    5fc4:	2c e0       	ldi	r18, 0x0C	; 12
    5fc6:	d2 2e       	mov	r13, r18
    5fc8:	3b ef       	ldi	r19, 0xFB	; 251
    5fca:	e3 2e       	mov	r14, r19
    5fcc:	3c e0       	ldi	r19, 0x0C	; 12
    5fce:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5fd0:	66 24       	eor	r6, r6
    5fd2:	6a 94       	dec	r6
    5fd4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    5fd6:	88 81       	ld	r24, Y
    5fd8:	85 ff       	sbrs	r24, 5
    5fda:	42 c0       	rjmp	.+132    	; 0x6060 <ProcessMusic+0x318>
    5fdc:	2d 89       	ldd	r18, Y+21	; 0x15
    5fde:	3e 89       	ldd	r19, Y+22	; 0x16
    5fe0:	23 2b       	or	r18, r19
    5fe2:	09 f4       	brne	.+2      	; 0x5fe6 <ProcessMusic+0x29e>
    5fe4:	3d c0       	rjmp	.+122    	; 0x6060 <ProcessMusic+0x318>
    5fe6:	86 fd       	sbrc	r24, 6
    5fe8:	3b c0       	rjmp	.+118    	; 0x6060 <ProcessMusic+0x318>
    5fea:	47 01       	movw	r8, r14
    5fec:	f2 e0       	ldi	r31, 0x02	; 2
    5fee:	8f 1a       	sub	r8, r31
    5ff0:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    5ff2:	d6 01       	movw	r26, r12
    5ff4:	9c 91       	ld	r25, X
    5ff6:	f4 01       	movw	r30, r8
    5ff8:	80 81       	ld	r24, Z
    5ffa:	98 13       	cpse	r25, r24
    5ffc:	2e c0       	rjmp	.+92     	; 0x605a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    5ffe:	ed 89       	ldd	r30, Y+21	; 0x15
    6000:	fe 89       	ldd	r31, Y+22	; 0x16
    6002:	bf 01       	movw	r22, r30
    6004:	6f 5f       	subi	r22, 0xFF	; 255
    6006:	7f 4f       	sbci	r23, 0xFF	; 255
    6008:	7e 8b       	std	Y+22, r23	; 0x16
    600a:	6d 8b       	std	Y+21, r22	; 0x15
    600c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    600e:	8f 3f       	cpi	r24, 0xFF	; 255
    6010:	31 f4       	brne	.+12     	; 0x601e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6012:	88 81       	ld	r24, Y
    6014:	8f 77       	andi	r24, 0x7F	; 127
    6016:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    6018:	1e 8a       	std	Y+22, r1	; 0x16
    601a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    601c:	1e c0       	rjmp	.+60     	; 0x605a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    601e:	9f 01       	movw	r18, r30
    6020:	2e 5f       	subi	r18, 0xFE	; 254
    6022:	3f 4f       	sbci	r19, 0xFF	; 255
    6024:	3e 8b       	std	Y+22, r19	; 0x16
    6026:	2d 8b       	std	Y+21, r18	; 0x15
    6028:	fb 01       	movw	r30, r22
    602a:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    602c:	e8 2f       	mov	r30, r24
    602e:	f0 e0       	ldi	r31, 0x00	; 0
    6030:	ee 0f       	add	r30, r30
    6032:	ff 1f       	adc	r31, r31
    6034:	e4 53       	subi	r30, 0x34	; 52
    6036:	ff 4f       	sbci	r31, 0xFF	; 255
    6038:	25 91       	lpm	r18, Z+
    603a:	34 91       	lpm	r19, Z
    603c:	ce 01       	movw	r24, r28
    603e:	f9 01       	movw	r30, r18
    6040:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    6042:	ed 89       	ldd	r30, Y+21	; 0x15
    6044:	fe 89       	ldd	r31, Y+22	; 0x16
    6046:	cf 01       	movw	r24, r30
    6048:	01 96       	adiw	r24, 0x01	; 1
    604a:	9e 8b       	std	Y+22, r25	; 0x16
    604c:	8d 8b       	std	Y+21, r24	; 0x15
    604e:	e4 91       	lpm	r30, Z
    6050:	d4 01       	movw	r26, r8
    6052:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    6054:	f6 01       	movw	r30, r12
    6056:	10 82       	st	Z, r1
    6058:	cc cf       	rjmp	.-104    	; 0x5ff2 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    605a:	9f 5f       	subi	r25, 0xFF	; 255
    605c:	d6 01       	movw	r26, r12
    605e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    6060:	98 81       	ld	r25, Y
    6062:	95 ff       	sbrs	r25, 5
    6064:	6c c0       	rjmp	.+216    	; 0x613e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    6066:	f7 01       	movw	r30, r14
    6068:	80 81       	ld	r24, Z
    606a:	8f 3f       	cpi	r24, 0xFF	; 255
    606c:	11 f0       	breq	.+4      	; 0x6072 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    606e:	8f 5f       	subi	r24, 0xFF	; 255
    6070:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6072:	97 fd       	sbrc	r25, 7
    6074:	04 c0       	rjmp	.+8      	; 0x607e <ProcessMusic+0x336>
    6076:	f7 01       	movw	r30, r14
    6078:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    607a:	90 81       	ld	r25, Z
    607c:	01 c0       	rjmp	.+2      	; 0x6080 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    607e:	9f ef       	ldi	r25, 0xFF	; 255
    6080:	f7 01       	movw	r30, r14
    6082:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6084:	80 81       	ld	r24, Z
    6086:	88 23       	and	r24, r24
    6088:	09 f4       	brne	.+2      	; 0x608c <ProcessMusic+0x344>
    608a:	4e c0       	rjmp	.+156    	; 0x6128 <ProcessMusic+0x3e0>
    608c:	31 96       	adiw	r30, 0x01	; 1
    608e:	50 81       	ld	r21, Z
    6090:	55 23       	and	r21, r21
    6092:	09 f4       	brne	.+2      	; 0x6096 <ProcessMusic+0x34e>
    6094:	49 c0       	rjmp	.+146    	; 0x6128 <ProcessMusic+0x3e0>
    6096:	99 23       	and	r25, r25
    6098:	09 f4       	brne	.+2      	; 0x609c <ProcessMusic+0x354>
    609a:	46 c0       	rjmp	.+140    	; 0x6128 <ProcessMusic+0x3e0>
    609c:	40 91 5f 0d 	lds	r20, 0x0D5F
    60a0:	44 23       	and	r20, r20
    60a2:	09 f4       	brne	.+2      	; 0x60a6 <ProcessMusic+0x35e>
    60a4:	41 c0       	rjmp	.+130    	; 0x6128 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    60a6:	89 9f       	mul	r24, r25
    60a8:	c0 01       	movw	r24, r0
    60aa:	11 24       	eor	r1, r1
    60ac:	93 95       	inc	r25
				uVol>>=8;
    60ae:	89 2f       	mov	r24, r25
    60b0:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    60b2:	58 9f       	mul	r21, r24
    60b4:	90 01       	movw	r18, r0
    60b6:	59 9f       	mul	r21, r25
    60b8:	30 0d       	add	r19, r0
    60ba:	11 24       	eor	r1, r1
    60bc:	c9 01       	movw	r24, r18
    60be:	93 95       	inc	r25
				uVol>>=8;
    60c0:	89 2f       	mov	r24, r25
    60c2:	99 27       	eor	r25, r25
    60c4:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    60c6:	50 81       	ld	r21, Z
    60c8:	58 9f       	mul	r21, r24
    60ca:	90 01       	movw	r18, r0
    60cc:	59 9f       	mul	r21, r25
    60ce:	30 0d       	add	r19, r0
    60d0:	11 24       	eor	r1, r1
    60d2:	33 95       	inc	r19
					uVol>>=8;
    60d4:	23 2f       	mov	r18, r19
    60d6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    60d8:	42 9f       	mul	r20, r18
    60da:	c0 01       	movw	r24, r0
    60dc:	43 9f       	mul	r20, r19
    60de:	90 0d       	add	r25, r0
    60e0:	11 24       	eor	r1, r1
    60e2:	93 95       	inc	r25
				uVol>>=8;
    60e4:	89 2f       	mov	r24, r25
    60e6:	99 27       	eor	r25, r25
    60e8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    60ea:	20 81       	ld	r18, Z
    60ec:	22 23       	and	r18, r18
    60ee:	f1 f0       	breq	.+60     	; 0x612c <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    60f0:	d5 01       	movw	r26, r10
    60f2:	ec 91       	ld	r30, X
    60f4:	f0 e0       	ldi	r31, 0x00	; 0
    60f6:	e0 50       	subi	r30, 0x00	; 0
    60f8:	fc 49       	sbci	r31, 0x9C	; 156
    60fa:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    60fc:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    60fe:	2e 9f       	mul	r18, r30
    6100:	f0 01       	movw	r30, r0
    6102:	11 24       	eor	r1, r1
    6104:	f3 95       	inc	r31
					tVol>>=8;
    6106:	ef 2f       	mov	r30, r31
    6108:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    610a:	a3 01       	movw	r20, r6
    610c:	4e 1b       	sub	r20, r30
    610e:	5f 0b       	sbc	r21, r31
    6110:	48 9f       	mul	r20, r24
    6112:	90 01       	movw	r18, r0
    6114:	49 9f       	mul	r20, r25
    6116:	30 0d       	add	r19, r0
    6118:	58 9f       	mul	r21, r24
    611a:	30 0d       	add	r19, r0
    611c:	11 24       	eor	r1, r1
    611e:	c9 01       	movw	r24, r18
    6120:	93 95       	inc	r25
					uVol>>=8;
    6122:	89 2f       	mov	r24, r25
    6124:	99 27       	eor	r25, r25
    6126:	02 c0       	rjmp	.+4      	; 0x612c <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    6128:	80 e0       	ldi	r24, 0x00	; 0
    612a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    612c:	f5 01       	movw	r30, r10
    612e:	30 81       	ld	r19, Z
    6130:	f7 01       	movw	r30, r14
    6132:	39 97       	sbiw	r30, 0x09	; 9
    6134:	20 81       	ld	r18, Z
    6136:	23 0f       	add	r18, r19
    6138:	d5 01       	movw	r26, r10
    613a:	2c 93       	st	X, r18
    613c:	02 c0       	rjmp	.+4      	; 0x6142 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6142:	f8 01       	movw	r30, r16
    6144:	80 83       	st	Z, r24
    6146:	67 96       	adiw	r28, 0x17	; 23
    6148:	0a 5f       	subi	r16, 0xFA	; 250
    614a:	1f 4f       	sbci	r17, 0xFF	; 255
    614c:	f7 e1       	ldi	r31, 0x17	; 23
    614e:	af 0e       	add	r10, r31
    6150:	b1 1c       	adc	r11, r1
    6152:	87 e1       	ldi	r24, 0x17	; 23
    6154:	c8 0e       	add	r12, r24
    6156:	d1 1c       	adc	r13, r1
    6158:	97 e1       	ldi	r25, 0x17	; 23
    615a:	e9 0e       	add	r14, r25
    615c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    615e:	ad e0       	ldi	r26, 0x0D	; 13
    6160:	ca 35       	cpi	r28, 0x5A	; 90
    6162:	da 07       	cpc	r29, r26
    6164:	09 f0       	breq	.+2      	; 0x6168 <ProcessMusic+0x420>
    6166:	37 cf       	rjmp	.-402    	; 0x5fd6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    6168:	df 91       	pop	r29
    616a:	cf 91       	pop	r28
    616c:	1f 91       	pop	r17
    616e:	0f 91       	pop	r16
    6170:	ff 90       	pop	r15
    6172:	ef 90       	pop	r14
    6174:	df 90       	pop	r13
    6176:	cf 90       	pop	r12
    6178:	bf 90       	pop	r11
    617a:	af 90       	pop	r10
    617c:	9f 90       	pop	r9
    617e:	8f 90       	pop	r8
    6180:	7f 90       	pop	r7
    6182:	6f 90       	pop	r6
    6184:	08 95       	ret

00006186 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6186:	80 93 5f 0d 	sts	0x0D5F, r24
    618a:	08 95       	ret

0000618c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    618c:	99 27       	eor	r25, r25
	clr r23
    618e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    6190:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    6192:	09 f4       	brne	.+2      	; 0x6196 <set_note_waves>
		ret
    6194:	08 95       	ret

00006196 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6196:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    6198:	f2 e6       	ldi	r31, 0x62	; 98
	lsl r22
    619a:	66 0f       	add	r22, r22
	rol r23
    619c:	77 1f       	adc	r23, r23
	add ZL,r22
    619e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    61a0:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    61a2:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    61a4:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    61a6:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    61a8:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    61aa:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    61ac:	28 9f       	mul	r18, r24
	add ZL,r0
    61ae:	e0 0d       	add	r30, r0
	adc ZH,r1
    61b0:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    61b2:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    61b4:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    61b6:	11 24       	eor	r1, r1
	

	ret
    61b8:	08 95       	ret

000061ba <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    61ba:	99 27       	eor	r25, r25
	clr r23
    61bc:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    61be:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    61c0:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    61c2:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    61c4:	28 9f       	mul	r18, r24
	add ZL,r0
    61c6:	e0 0d       	add	r30, r0
	adc ZH,r1
    61c8:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    61ca:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    61cc:	31 f4       	brne	.+12     	; 0x61da <smw1>
	lds r22,tr4_params
    61ce:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    61d2:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    61d4:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    61d8:	0b c0       	rjmp	.+22     	; 0x61f0 <esmw>

000061da <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    61da:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    61dc:	31 f4       	brne	.+12     	; 0x61ea <smw2>
	lds r22,tr4_params
    61de:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    61e2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    61e4:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    61e8:	03 c0       	rjmp	.+6      	; 0x61f0 <esmw>

000061ea <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    61ea:	74 e6       	ldi	r23, 0x64	; 100
	add r23,r22
    61ec:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    61ee:	75 83       	std	Z+5, r23	; 0x05

000061f0 <esmw>:

esmw:
	clr r1	
    61f0:	11 24       	eor	r1, r1
	ret
    61f2:	08 95       	ret
	...

00006200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6202:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    6206:	08 95       	ret

00006208 <steptable>:
    6208:	22 00       	.word	0x0022	; ????
    620a:	24 00       	.word	0x0024	; ????
    620c:	26 00       	.word	0x0026	; ????
    620e:	28 00       	.word	0x0028	; ????
    6210:	2b 00       	.word	0x002b	; ????
    6212:	2d 00       	.word	0x002d	; ????
    6214:	30 00       	.word	0x0030	; ????
    6216:	33 00       	.word	0x0033	; ????
    6218:	36 00       	.word	0x0036	; ????
    621a:	39 00       	.word	0x0039	; ????
    621c:	3d 00       	.word	0x003d	; ????
    621e:	40 00       	.word	0x0040	; ????
    6220:	44 00       	.word	0x0044	; ????
    6222:	48 00       	.word	0x0048	; ????
    6224:	4c 00       	.word	0x004c	; ????
    6226:	51 00       	.word	0x0051	; ????
    6228:	56 00       	.word	0x0056	; ????
    622a:	5b 00       	.word	0x005b	; ????
    622c:	60 00       	.word	0x0060	; ????
    622e:	66 00       	.word	0x0066	; ????
    6230:	6c 00       	.word	0x006c	; ????
    6232:	73 00       	.word	0x0073	; ????
    6234:	79 00       	.word	0x0079	; ????
    6236:	81 00       	.word	0x0081	; ????
    6238:	88 00       	.word	0x0088	; ????
    623a:	90 00       	.word	0x0090	; ????
    623c:	99 00       	.word	0x0099	; ????
    623e:	a2 00       	.word	0x00a2	; ????
    6240:	ac 00       	.word	0x00ac	; ????
    6242:	b6 00       	.word	0x00b6	; ????
    6244:	c1 00       	.word	0x00c1	; ????
    6246:	cc 00       	.word	0x00cc	; ????
    6248:	d8 00       	.word	0x00d8	; ????
    624a:	e5 00       	.word	0x00e5	; ????
    624c:	f3 00       	.word	0x00f3	; ????
    624e:	01 01       	movw	r0, r2
    6250:	10 01       	movw	r2, r0
    6252:	21 01       	movw	r4, r2
    6254:	32 01       	movw	r6, r4
    6256:	44 01       	movw	r8, r8
    6258:	57 01       	movw	r10, r14
    625a:	6c 01       	movw	r12, r24
    625c:	81 01       	movw	r16, r2
    625e:	98 01       	movw	r18, r16
    6260:	b0 01       	movw	r22, r0
    6262:	ca 01       	movw	r24, r20
    6264:	e5 01       	movw	r28, r10
    6266:	02 02       	muls	r16, r18
    6268:	21 02       	muls	r18, r17
    626a:	41 02       	muls	r20, r17
    626c:	64 02       	muls	r22, r20
    626e:	88 02       	muls	r24, r24
    6270:	ae 02       	muls	r26, r30
    6272:	d7 02       	muls	r29, r23
    6274:	03 03       	mulsu	r16, r19
    6276:	30 03       	mulsu	r19, r16
    6278:	61 03       	mulsu	r22, r17
    627a:	94 03       	fmuls	r17, r20
    627c:	cb 03       	fmulsu	r20, r19
    627e:	05 04       	cpc	r0, r5
    6280:	42 04       	cpc	r4, r2
    6282:	83 04       	cpc	r8, r3
    6284:	c7 04       	cpc	r12, r7
    6286:	10 05       	cpc	r17, r0
    6288:	5d 05       	cpc	r21, r13
    628a:	af 05       	cpc	r26, r15
    628c:	05 06       	cpc	r0, r21
    628e:	61 06       	cpc	r6, r17
    6290:	c2 06       	cpc	r12, r18
    6292:	29 07       	cpc	r18, r25
    6294:	96 07       	cpc	r25, r22
    6296:	09 08       	sbc	r0, r9
    6298:	83 08       	sbc	r8, r3
    629a:	05 09       	sbc	r16, r5
    629c:	8e 09       	sbc	r24, r14
    629e:	20 0a       	sbc	r2, r16
    62a0:	ba 0a       	sbc	r11, r26
    62a2:	5d 0b       	sbc	r21, r29
    62a4:	0a 0c       	add	r0, r10
    62a6:	c1 0c       	add	r12, r1
    62a8:	84 0d       	add	r24, r4
    62aa:	51 0e       	add	r5, r17
    62ac:	2b 0f       	add	r18, r27
    62ae:	12 10       	cpse	r1, r2
    62b0:	07 11       	cpse	r16, r7
    62b2:	0a 12       	cpse	r0, r26
    62b4:	1d 13       	cpse	r17, r29
    62b6:	40 14       	cp	r4, r0
    62b8:	74 15       	cp	r23, r4
    62ba:	ba 16       	cp	r11, r26
    62bc:	14 18       	sub	r1, r4
    62be:	83 19       	sub	r24, r3
    62c0:	07 1b       	sub	r16, r23
    62c2:	a3 1c       	adc	r10, r3
    62c4:	57 1e       	adc	r5, r23
    62c6:	24 20       	and	r2, r4
    62c8:	0e 22       	and	r0, r30
    62ca:	14 24       	eor	r1, r4
    62cc:	39 26       	eor	r3, r25
    62ce:	7f 28       	or	r7, r15
    62d0:	e8 2a       	or	r14, r24
    62d2:	75 2d       	mov	r23, r5
    62d4:	29 30       	cpi	r18, 0x09	; 9
    62d6:	06 33       	cpi	r16, 0x36	; 54
    62d8:	0f 36       	cpi	r16, 0x6F	; 111
    62da:	45 39       	cpi	r20, 0x95	; 149
    62dc:	ad 3c       	cpi	r26, 0xCD	; 205
    62de:	49 40       	sbci	r20, 0x09	; 9
    62e0:	1b 44       	sbci	r17, 0x4B	; 75
    62e2:	28 48       	sbci	r18, 0x88	; 136
    62e4:	73 4c       	sbci	r23, 0xC3	; 195
    62e6:	fe 50       	subi	r31, 0x0E	; 14
    62e8:	cf 55       	subi	r28, 0x5F	; 95
    62ea:	ea 5a       	subi	r30, 0xAA	; 170
    62ec:	51 60       	ori	r21, 0x01	; 1
    62ee:	0c 66       	ori	r16, 0x6C	; 108
    62f0:	1d 6c       	ori	r17, 0xCD	; 205
    62f2:	8b 72       	andi	r24, 0x2B	; 43
    62f4:	5a 79       	andi	r21, 0x9A	; 154
    62f6:	92 80       	ldd	r9, Z+2	; 0x02
    62f8:	37 88       	ldd	r3, Z+23	; 0x17
    62fa:	50 90 e5 98 	lds	r5, 0x98E5
    62fe:	fd a1       	ldd	r31, Y+37	; 0x25
    6300:	9f ab       	std	Y+55, r25	; 0x37
    6302:	d3 b5       	in	r29, 0x23	; 35
    6304:	a3 c0       	rjmp	.+326    	; 0x644c <waves+0x4c>
	...

00006400 <waves>:
    6400:	00 03       	mulsu	r16, r16
    6402:	06 09       	sbc	r16, r6
    6404:	0c 10       	cpse	r0, r12
    6406:	13 16       	cp	r1, r19
    6408:	19 1c       	adc	r1, r9
    640a:	1f 22       	and	r1, r31
    640c:	25 28       	or	r2, r5
    640e:	2b 2e       	mov	r2, r27
    6410:	31 33       	cpi	r19, 0x31	; 49
    6412:	36 39       	cpi	r19, 0x96	; 150
    6414:	3c 3f       	cpi	r19, 0xFC	; 252
    6416:	41 44       	sbci	r20, 0x41	; 65
    6418:	47 49       	sbci	r20, 0x97	; 151
    641a:	4c 4e       	sbci	r20, 0xEC	; 236
    641c:	51 53       	subi	r21, 0x31	; 49
    641e:	55 58       	subi	r21, 0x85	; 133
    6420:	5a 5c       	subi	r21, 0xCA	; 202
    6422:	5e 60       	ori	r21, 0x0E	; 14
    6424:	62 64       	ori	r22, 0x42	; 66
    6426:	66 68       	ori	r22, 0x86	; 134
    6428:	6a 6b       	ori	r22, 0xBA	; 186
    642a:	6d 6f       	ori	r22, 0xFD	; 253
    642c:	70 71       	andi	r23, 0x10	; 16
    642e:	73 74       	andi	r23, 0x43	; 67
    6430:	75 76       	andi	r23, 0x65	; 101
    6432:	78 79       	andi	r23, 0x98	; 152
    6434:	7a 7a       	andi	r23, 0xAA	; 170
    6436:	7b 7c       	andi	r23, 0xCB	; 203
    6438:	7d 7d       	andi	r23, 0xDD	; 221
    643a:	7e 7e       	andi	r23, 0xEE	; 238
    643c:	7e 7f       	andi	r23, 0xFE	; 254
    643e:	7f 7f       	andi	r23, 0xFF	; 255
    6440:	7f 7f       	andi	r23, 0xFF	; 255
    6442:	7f 7f       	andi	r23, 0xFF	; 255
    6444:	7e 7e       	andi	r23, 0xEE	; 238
    6446:	7e 7d       	andi	r23, 0xDE	; 222
    6448:	7d 7c       	andi	r23, 0xCD	; 205
    644a:	7b 7a       	andi	r23, 0xAB	; 171
    644c:	7a 79       	andi	r23, 0x9A	; 154
    644e:	78 76       	andi	r23, 0x68	; 104
    6450:	75 74       	andi	r23, 0x45	; 69
    6452:	73 71       	andi	r23, 0x13	; 19
    6454:	70 6f       	ori	r23, 0xF0	; 240
    6456:	6d 6b       	ori	r22, 0xBD	; 189
    6458:	6a 68       	ori	r22, 0x8A	; 138
    645a:	66 64       	ori	r22, 0x46	; 70
    645c:	62 60       	ori	r22, 0x02	; 2
    645e:	5e 5c       	subi	r21, 0xCE	; 206
    6460:	5a 58       	subi	r21, 0x8A	; 138
    6462:	55 53       	subi	r21, 0x35	; 53
    6464:	51 4e       	sbci	r21, 0xE1	; 225
    6466:	4c 49       	sbci	r20, 0x9C	; 156
    6468:	47 44       	sbci	r20, 0x47	; 71
    646a:	41 3f       	cpi	r20, 0xF1	; 241
    646c:	3c 39       	cpi	r19, 0x9C	; 156
    646e:	36 33       	cpi	r19, 0x36	; 54
    6470:	31 2e       	mov	r3, r17
    6472:	2b 28       	or	r2, r11
    6474:	25 22       	and	r2, r21
    6476:	1f 1c       	adc	r1, r15
    6478:	19 16       	cp	r1, r25
    647a:	13 10       	cpse	r1, r3
    647c:	0c 09       	sbc	r16, r12
    647e:	06 03       	mulsu	r16, r22
    6480:	00 fd       	sbrc	r16, 0
    6482:	fa f7       	brpl	.-2      	; 0x6482 <waves+0x82>
    6484:	f4 f0       	brlt	.+60     	; 0x64c2 <waves+0xc2>
    6486:	ed ea       	ldi	r30, 0xAD	; 173
    6488:	e7 e4       	ldi	r30, 0x47	; 71
    648a:	e1 de       	rcall	.-574    	; 0x624e <steptable+0x46>
    648c:	db d8       	rcall	.-3658   	; 0x5644 <ch4_end+0x5a>
    648e:	d5 d2       	rcall	.+1450   	; 0x6a3a <waves+0x63a>
    6490:	cf cd       	rjmp	.-1122   	; 0x6030 <ProcessMusic+0x2e8>
    6492:	ca c7       	rjmp	.+3988   	; 0x7428 <LBMapSprite+0x66>
    6494:	c4 c1       	rjmp	.+904    	; 0x681e <waves+0x41e>
    6496:	bf bc       	out	0x2f, r11	; 47
    6498:	b9 b7       	in	r27, 0x39	; 57
    649a:	b4 b2       	in	r11, 0x14	; 20
    649c:	af ad       	ldd	r26, Y+63	; 0x3f
    649e:	ab a8       	ldd	r10, Y+51	; 0x33
    64a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    64a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    64a4:	9e 9c       	mul	r9, r14
    64a6:	9a 98       	cbi	0x13, 2	; 19
    64a8:	96 95       	lsr	r25
    64aa:	93 91       	.word	0x9193	; ????
    64ac:	90 8f       	std	Z+24, r25	; 0x18
    64ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    64b0:	8b 8a       	std	Y+19, r8	; 0x13
    64b2:	88 87       	std	Y+8, r24	; 0x08
    64b4:	86 86       	std	Z+14, r8	; 0x0e
    64b6:	85 84       	ldd	r8, Z+13	; 0x0d
    64b8:	83 83       	std	Z+3, r24	; 0x03
    64ba:	82 82       	std	Z+2, r8	; 0x02
    64bc:	82 81       	ldd	r24, Z+2	; 0x02
    64be:	81 81       	ldd	r24, Z+1	; 0x01
    64c0:	81 81       	ldd	r24, Z+1	; 0x01
    64c2:	81 81       	ldd	r24, Z+1	; 0x01
    64c4:	82 82       	std	Z+2, r8	; 0x02
    64c6:	82 83       	std	Z+2, r24	; 0x02
    64c8:	83 84       	ldd	r8, Z+11	; 0x0b
    64ca:	85 86       	std	Z+13, r8	; 0x0d
    64cc:	86 87       	std	Z+14, r24	; 0x0e
    64ce:	88 8a       	std	Y+16, r8	; 0x10
    64d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    64d2:	8d 8f       	std	Y+29, r24	; 0x1d
    64d4:	90 91 93 95 	lds	r25, 0x9593
    64d8:	96 98       	cbi	0x12, 6	; 18
    64da:	9a 9c       	mul	r9, r10
    64dc:	9e a0       	ldd	r9, Y+38	; 0x26
    64de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    64e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    64e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    64e4:	af b2       	in	r10, 0x1f	; 31
    64e6:	b4 b7       	in	r27, 0x34	; 52
    64e8:	b9 bc       	out	0x29, r11	; 41
    64ea:	bf c1       	rjmp	.+894    	; 0x686a <waves+0x46a>
    64ec:	c4 c7       	rjmp	.+3976   	; 0x7476 <LBMoveSprite+0x10>
    64ee:	ca cd       	rjmp	.-1132   	; 0x6084 <ProcessMusic+0x33c>
    64f0:	cf d2       	rcall	.+1438   	; 0x6a90 <waves+0x690>
    64f2:	d5 d8       	rcall	.-3670   	; 0x569e <fill_vram_loop+0x8>
    64f4:	db de       	rcall	.-586    	; 0x62ac <steptable+0xa4>
    64f6:	e1 e4       	ldi	r30, 0x41	; 65
    64f8:	e7 ea       	ldi	r30, 0xA7	; 167
    64fa:	ed f0       	brhs	.+58     	; 0x6536 <waves+0x136>
    64fc:	f4 f7       	brge	.-4      	; 0x64fa <waves+0xfa>
    64fe:	fa fd       	.word	0xfdfa	; ????
    6500:	80 81       	ld	r24, Z
    6502:	82 83       	std	Z+2, r24	; 0x02
    6504:	84 85       	ldd	r24, Z+12	; 0x0c
    6506:	86 87       	std	Z+14, r24	; 0x0e
    6508:	88 89       	ldd	r24, Y+16	; 0x10
    650a:	8a 8b       	std	Y+18, r24	; 0x12
    650c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    650e:	8e 8f       	std	Y+30, r24	; 0x1e
    6510:	90 91 92 93 	lds	r25, 0x9392
    6514:	94 95       	.word	0x9594	; ????
    6516:	96 97       	sbiw	r26, 0x26	; 38
    6518:	98 99       	sbic	0x13, 0	; 19
    651a:	9a 9b       	sbis	0x13, 2	; 19
    651c:	9c 9d       	mul	r25, r12
    651e:	9e 9f       	mul	r25, r30
    6520:	a0 a1       	ldd	r26, Z+32	; 0x20
    6522:	a2 a3       	std	Z+34, r26	; 0x22
    6524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6526:	a6 a7       	std	Z+46, r26	; 0x2e
    6528:	a8 a9       	ldd	r26, Y+48	; 0x30
    652a:	aa ab       	std	Y+50, r26	; 0x32
    652c:	ac ad       	ldd	r26, Y+60	; 0x3c
    652e:	ae af       	std	Y+62, r26	; 0x3e
    6530:	b0 b1       	in	r27, 0x00	; 0
    6532:	b2 b3       	in	r27, 0x12	; 18
    6534:	b4 b5       	in	r27, 0x24	; 36
    6536:	b6 b7       	in	r27, 0x36	; 54
    6538:	b8 b9       	out	0x08, r27	; 8
    653a:	ba bb       	out	0x1a, r27	; 26
    653c:	bc bd       	out	0x2c, r27	; 44
    653e:	be bf       	out	0x3e, r27	; 62
    6540:	c0 c1       	rjmp	.+896    	; 0x68c2 <waves+0x4c2>
    6542:	c2 c3       	rjmp	.+1924   	; 0x6cc8 <waves+0x8c8>
    6544:	c4 c5       	rjmp	.+2952   	; 0x70ce <DrawMap+0x16>
    6546:	c6 c7       	rjmp	.+3980   	; 0x74d4 <LBMoveSprite+0x6e>
    6548:	c8 c9       	rjmp	.-3184   	; 0x58da <isEepromFormatted+0x26>
    654a:	ca cb       	rjmp	.-2156   	; 0x5ce0 <TriggerNote+0x18>
    654c:	cc cd       	rjmp	.-1128   	; 0x60e6 <ProcessMusic+0x39e>
    654e:	ce cf       	rjmp	.-100    	; 0x64ec <waves+0xec>
    6550:	d0 d1       	rcall	.+928    	; 0x68f2 <waves+0x4f2>
    6552:	d2 d3       	rcall	.+1956   	; 0x6cf8 <waves+0x8f8>
    6554:	d4 d5       	rcall	.+2984   	; 0x70fe <DrawMap+0x46>
    6556:	d6 d7       	rcall	.+4012   	; 0x7504 <LBRotateSprites+0x22>
    6558:	d8 d9       	rcall	.-3152   	; 0x590a <PatchCommand06+0x8>
    655a:	da db       	rcall	.-2124   	; 0x5d10 <TriggerNote+0x48>
    655c:	dc dd       	rcall	.-1096   	; 0x6116 <ProcessMusic+0x3ce>
    655e:	de df       	rcall	.-68     	; 0x651c <waves+0x11c>
    6560:	e0 e1       	ldi	r30, 0x10	; 16
    6562:	e2 e3       	ldi	r30, 0x32	; 50
    6564:	e4 e5       	ldi	r30, 0x54	; 84
    6566:	e6 e7       	ldi	r30, 0x76	; 118
    6568:	e8 e9       	ldi	r30, 0x98	; 152
    656a:	ea eb       	ldi	r30, 0xBA	; 186
    656c:	ec ed       	ldi	r30, 0xDC	; 220
    656e:	ee ef       	ldi	r30, 0xFE	; 254
    6570:	f0 f1       	brcs	.+124    	; 0x65ee <waves+0x1ee>
    6572:	f2 f3       	brmi	.-4      	; 0x6570 <waves+0x170>
    6574:	f4 f5       	brge	.+124    	; 0x65f2 <waves+0x1f2>
    6576:	f6 f7       	brtc	.-4      	; 0x6574 <waves+0x174>
    6578:	f8 f9       	.word	0xf9f8	; ????
    657a:	fa fb       	.word	0xfbfa	; ????
    657c:	fc fd       	.word	0xfdfc	; ????
    657e:	fe ff       	.word	0xfffe	; ????
    6580:	00 01       	movw	r0, r0
    6582:	02 03       	mulsu	r16, r18
    6584:	04 05       	cpc	r16, r4
    6586:	06 07       	cpc	r16, r22
    6588:	08 09       	sbc	r16, r8
    658a:	0a 0b       	sbc	r16, r26
    658c:	0c 0d       	add	r16, r12
    658e:	0e 0f       	add	r16, r30
    6590:	10 11       	cpse	r17, r0
    6592:	12 13       	cpse	r17, r18
    6594:	14 15       	cp	r17, r4
    6596:	16 17       	cp	r17, r22
    6598:	18 19       	sub	r17, r8
    659a:	1a 1b       	sub	r17, r26
    659c:	1c 1d       	adc	r17, r12
    659e:	1e 1f       	adc	r17, r30
    65a0:	20 21       	and	r18, r0
    65a2:	22 23       	and	r18, r18
    65a4:	24 25       	eor	r18, r4
    65a6:	26 27       	eor	r18, r22
    65a8:	28 29       	or	r18, r8
    65aa:	2a 2b       	or	r18, r26
    65ac:	2c 2d       	mov	r18, r12
    65ae:	2e 2f       	mov	r18, r30
    65b0:	30 31       	cpi	r19, 0x10	; 16
    65b2:	32 33       	cpi	r19, 0x32	; 50
    65b4:	34 35       	cpi	r19, 0x54	; 84
    65b6:	36 37       	cpi	r19, 0x76	; 118
    65b8:	38 39       	cpi	r19, 0x98	; 152
    65ba:	3a 3b       	cpi	r19, 0xBA	; 186
    65bc:	3c 3d       	cpi	r19, 0xDC	; 220
    65be:	3e 3f       	cpi	r19, 0xFE	; 254
    65c0:	40 41       	sbci	r20, 0x10	; 16
    65c2:	42 43       	sbci	r20, 0x32	; 50
    65c4:	44 45       	sbci	r20, 0x54	; 84
    65c6:	46 47       	sbci	r20, 0x76	; 118
    65c8:	48 49       	sbci	r20, 0x98	; 152
    65ca:	4a 4b       	sbci	r20, 0xBA	; 186
    65cc:	4c 4d       	sbci	r20, 0xDC	; 220
    65ce:	4e 4f       	sbci	r20, 0xFE	; 254
    65d0:	50 51       	subi	r21, 0x10	; 16
    65d2:	52 53       	subi	r21, 0x32	; 50
    65d4:	54 55       	subi	r21, 0x54	; 84
    65d6:	56 57       	subi	r21, 0x76	; 118
    65d8:	58 59       	subi	r21, 0x98	; 152
    65da:	5a 5b       	subi	r21, 0xBA	; 186
    65dc:	5c 5d       	subi	r21, 0xDC	; 220
    65de:	5e 5f       	subi	r21, 0xFE	; 254
    65e0:	60 61       	ori	r22, 0x10	; 16
    65e2:	62 63       	ori	r22, 0x32	; 50
    65e4:	64 65       	ori	r22, 0x54	; 84
    65e6:	66 67       	ori	r22, 0x76	; 118
    65e8:	68 69       	ori	r22, 0x98	; 152
    65ea:	6a 6b       	ori	r22, 0xBA	; 186
    65ec:	6c 6d       	ori	r22, 0xDC	; 220
    65ee:	6e 6f       	ori	r22, 0xFE	; 254
    65f0:	70 71       	andi	r23, 0x10	; 16
    65f2:	72 73       	andi	r23, 0x32	; 50
    65f4:	74 75       	andi	r23, 0x54	; 84
    65f6:	76 77       	andi	r23, 0x76	; 118
    65f8:	78 79       	andi	r23, 0x98	; 152
    65fa:	7a 7b       	andi	r23, 0xBA	; 186
    65fc:	7c 7d       	andi	r23, 0xDC	; 220
    65fe:	7e 7f       	andi	r23, 0xFE	; 254
    6600:	00 02       	muls	r16, r16
    6602:	04 06       	cpc	r0, r20
    6604:	08 0a       	sbc	r0, r24
    6606:	0c 0e       	add	r0, r28
    6608:	10 12       	cpse	r1, r16
    660a:	14 16       	cp	r1, r20
    660c:	18 1a       	sub	r1, r24
    660e:	1c 1e       	adc	r1, r28
    6610:	20 22       	and	r2, r16
    6612:	24 26       	eor	r2, r20
    6614:	28 2a       	or	r2, r24
    6616:	2c 2e       	mov	r2, r28
    6618:	30 32       	cpi	r19, 0x20	; 32
    661a:	34 36       	cpi	r19, 0x64	; 100
    661c:	38 3a       	cpi	r19, 0xA8	; 168
    661e:	3c 3e       	cpi	r19, 0xEC	; 236
    6620:	40 42       	sbci	r20, 0x20	; 32
    6622:	44 46       	sbci	r20, 0x64	; 100
    6624:	48 4a       	sbci	r20, 0xA8	; 168
    6626:	4c 4e       	sbci	r20, 0xEC	; 236
    6628:	50 52       	subi	r21, 0x20	; 32
    662a:	54 56       	subi	r21, 0x64	; 100
    662c:	58 5a       	subi	r21, 0xA8	; 168
    662e:	5c 5e       	subi	r21, 0xEC	; 236
    6630:	60 62       	ori	r22, 0x20	; 32
    6632:	64 66       	ori	r22, 0x64	; 100
    6634:	68 6a       	ori	r22, 0xA8	; 168
    6636:	6c 6e       	ori	r22, 0xEC	; 236
    6638:	70 72       	andi	r23, 0x20	; 32
    663a:	74 76       	andi	r23, 0x64	; 100
    663c:	78 7a       	andi	r23, 0xA8	; 168
    663e:	7c 7e       	andi	r23, 0xEC	; 236
    6640:	7f 7d       	andi	r23, 0xDF	; 223
    6642:	7b 79       	andi	r23, 0x9B	; 155
    6644:	77 75       	andi	r23, 0x57	; 87
    6646:	73 71       	andi	r23, 0x13	; 19
    6648:	6f 6d       	ori	r22, 0xDF	; 223
    664a:	6b 69       	ori	r22, 0x9B	; 155
    664c:	67 65       	ori	r22, 0x57	; 87
    664e:	63 61       	ori	r22, 0x13	; 19
    6650:	5f 5d       	subi	r21, 0xDF	; 223
    6652:	5b 59       	subi	r21, 0x9B	; 155
    6654:	57 55       	subi	r21, 0x57	; 87
    6656:	53 51       	subi	r21, 0x13	; 19
    6658:	4f 4d       	sbci	r20, 0xDF	; 223
    665a:	4b 49       	sbci	r20, 0x9B	; 155
    665c:	47 45       	sbci	r20, 0x57	; 87
    665e:	43 41       	sbci	r20, 0x13	; 19
    6660:	3f 3d       	cpi	r19, 0xDF	; 223
    6662:	3b 39       	cpi	r19, 0x9B	; 155
    6664:	37 35       	cpi	r19, 0x57	; 87
    6666:	33 31       	cpi	r19, 0x13	; 19
    6668:	2f 2d       	mov	r18, r15
    666a:	2b 29       	or	r18, r11
    666c:	27 25       	eor	r18, r7
    666e:	23 21       	and	r18, r3
    6670:	1f 1d       	adc	r17, r15
    6672:	1b 19       	sub	r17, r11
    6674:	17 15       	cp	r17, r7
    6676:	13 11       	cpse	r17, r3
    6678:	0f 0d       	add	r16, r15
    667a:	0b 09       	sbc	r16, r11
    667c:	07 05       	cpc	r16, r7
    667e:	03 01       	movw	r0, r6
    6680:	ff fd       	.word	0xfdff	; ????
    6682:	fb f9       	.word	0xf9fb	; ????
    6684:	f7 f5       	brid	.+124    	; 0x6702 <waves+0x302>
    6686:	f3 f1       	brvs	.+124    	; 0x6704 <waves+0x304>
    6688:	ef ed       	ldi	r30, 0xDF	; 223
    668a:	eb e9       	ldi	r30, 0x9B	; 155
    668c:	e7 e5       	ldi	r30, 0x57	; 87
    668e:	e3 e1       	ldi	r30, 0x13	; 19
    6690:	df dd       	rcall	.-1090   	; 0x6250 <steptable+0x48>
    6692:	db d9       	rcall	.-3146   	; 0x5a4a <InitMusicPlayer+0x10>
    6694:	d7 d5       	rcall	.+2990   	; 0x7244 <FadeIn+0x4>
    6696:	d3 d1       	rcall	.+934    	; 0x6a3e <waves+0x63e>
    6698:	cf cd       	rjmp	.-1122   	; 0x6238 <steptable+0x30>
    669a:	cb c9       	rjmp	.-3178   	; 0x5a32 <PatchCommand14+0x4c>
    669c:	c7 c5       	rjmp	.+2958   	; 0x722c <doFade+0x8>
    669e:	c3 c1       	rjmp	.+902    	; 0x6a26 <waves+0x626>
    66a0:	bf bd       	out	0x2f, r27	; 47
    66a2:	bb b9       	out	0x0b, r27	; 11
    66a4:	b7 b5       	in	r27, 0x27	; 39
    66a6:	b3 b1       	in	r27, 0x03	; 3
    66a8:	af ad       	ldd	r26, Y+63	; 0x3f
    66aa:	ab a9       	ldd	r26, Y+51	; 0x33
    66ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    66ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    66b0:	9f 9d       	mul	r25, r15
    66b2:	9b 99       	sbic	0x13, 3	; 19
    66b4:	97 95       	ror	r25
    66b6:	93 91       	.word	0x9193	; ????
    66b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    66ba:	8b 89       	ldd	r24, Y+19	; 0x13
    66bc:	87 85       	ldd	r24, Z+15	; 0x0f
    66be:	83 81       	ldd	r24, Z+3	; 0x03
    66c0:	80 82       	st	Z, r8
    66c2:	84 86       	std	Z+12, r8	; 0x0c
    66c4:	88 8a       	std	Y+16, r8	; 0x10
    66c6:	8c 8e       	std	Y+28, r8	; 0x1c
    66c8:	90 92 94 96 	sts	0x9694, r9
    66cc:	98 9a       	sbi	0x13, 0	; 19
    66ce:	9c 9e       	mul	r9, r28
    66d0:	a0 a2       	std	Z+32, r10	; 0x20
    66d2:	a4 a6       	std	Z+44, r10	; 0x2c
    66d4:	a8 aa       	std	Y+48, r10	; 0x30
    66d6:	ac ae       	std	Y+60, r10	; 0x3c
    66d8:	b0 b2       	in	r11, 0x10	; 16
    66da:	b4 b6       	in	r11, 0x34	; 52
    66dc:	b8 ba       	out	0x18, r11	; 24
    66de:	bc be       	out	0x3c, r11	; 60
    66e0:	c0 c2       	rjmp	.+1408   	; 0x6c62 <waves+0x862>
    66e2:	c4 c6       	rjmp	.+3464   	; 0x746c <LBMoveSprite+0x6>
    66e4:	c8 ca       	rjmp	.-2672   	; 0x5c76 <TriggerFx+0x3e>
    66e6:	cc ce       	rjmp	.-616    	; 0x6480 <waves+0x80>
    66e8:	d0 d2       	rcall	.+1440   	; 0x6c8a <waves+0x88a>
    66ea:	d4 d6       	rcall	.+3496   	; 0x7494 <LBMoveSprite+0x2e>
    66ec:	d8 da       	rcall	.-2640   	; 0x5c9e <TriggerFx+0x66>
    66ee:	dc de       	rcall	.-584    	; 0x64a8 <waves+0xa8>
    66f0:	e0 e2       	ldi	r30, 0x20	; 32
    66f2:	e4 e6       	ldi	r30, 0x64	; 100
    66f4:	e8 ea       	ldi	r30, 0xA8	; 168
    66f6:	ec ee       	ldi	r30, 0xEC	; 236
    66f8:	f0 f2       	brcs	.-68     	; 0x66b6 <waves+0x2b6>
    66fa:	f4 f6       	brge	.-68     	; 0x66b8 <waves+0x2b8>
    66fc:	f8 fa       	.word	0xfaf8	; ????
    66fe:	fc fe       	.word	0xfefc	; ????
    6700:	7f 7f       	andi	r23, 0xFF	; 255
    6702:	7f 7f       	andi	r23, 0xFF	; 255
    6704:	7f 7f       	andi	r23, 0xFF	; 255
    6706:	7f 7f       	andi	r23, 0xFF	; 255
    6708:	7f 7f       	andi	r23, 0xFF	; 255
    670a:	7f 7f       	andi	r23, 0xFF	; 255
    670c:	7f 7f       	andi	r23, 0xFF	; 255
    670e:	7f 7f       	andi	r23, 0xFF	; 255
    6710:	7f 7f       	andi	r23, 0xFF	; 255
    6712:	7f 7f       	andi	r23, 0xFF	; 255
    6714:	7f 7f       	andi	r23, 0xFF	; 255
    6716:	7f 7f       	andi	r23, 0xFF	; 255
    6718:	7f 7f       	andi	r23, 0xFF	; 255
    671a:	7f 7f       	andi	r23, 0xFF	; 255
    671c:	7f 7f       	andi	r23, 0xFF	; 255
    671e:	7f 7f       	andi	r23, 0xFF	; 255
    6720:	7f 7f       	andi	r23, 0xFF	; 255
    6722:	7f 7f       	andi	r23, 0xFF	; 255
    6724:	7f 7f       	andi	r23, 0xFF	; 255
    6726:	7f 7f       	andi	r23, 0xFF	; 255
    6728:	7f 7f       	andi	r23, 0xFF	; 255
    672a:	7f 7f       	andi	r23, 0xFF	; 255
    672c:	7f 7f       	andi	r23, 0xFF	; 255
    672e:	7f 7f       	andi	r23, 0xFF	; 255
    6730:	7f 7f       	andi	r23, 0xFF	; 255
    6732:	7f 7f       	andi	r23, 0xFF	; 255
    6734:	7f 7f       	andi	r23, 0xFF	; 255
    6736:	7f 7f       	andi	r23, 0xFF	; 255
    6738:	7f 7f       	andi	r23, 0xFF	; 255
    673a:	7f 7f       	andi	r23, 0xFF	; 255
    673c:	7f 7f       	andi	r23, 0xFF	; 255
    673e:	7f 7f       	andi	r23, 0xFF	; 255
    6740:	80 80       	ld	r8, Z
    6742:	80 80       	ld	r8, Z
    6744:	80 80       	ld	r8, Z
    6746:	80 80       	ld	r8, Z
    6748:	80 80       	ld	r8, Z
    674a:	80 80       	ld	r8, Z
    674c:	80 80       	ld	r8, Z
    674e:	80 80       	ld	r8, Z
    6750:	80 80       	ld	r8, Z
    6752:	80 80       	ld	r8, Z
    6754:	80 80       	ld	r8, Z
    6756:	80 80       	ld	r8, Z
    6758:	80 80       	ld	r8, Z
    675a:	80 80       	ld	r8, Z
    675c:	80 80       	ld	r8, Z
    675e:	80 80       	ld	r8, Z
    6760:	80 80       	ld	r8, Z
    6762:	80 80       	ld	r8, Z
    6764:	80 80       	ld	r8, Z
    6766:	80 80       	ld	r8, Z
    6768:	80 80       	ld	r8, Z
    676a:	80 80       	ld	r8, Z
    676c:	80 80       	ld	r8, Z
    676e:	80 80       	ld	r8, Z
    6770:	80 80       	ld	r8, Z
    6772:	80 80       	ld	r8, Z
    6774:	80 80       	ld	r8, Z
    6776:	80 80       	ld	r8, Z
    6778:	80 80       	ld	r8, Z
    677a:	80 80       	ld	r8, Z
    677c:	80 80       	ld	r8, Z
    677e:	80 80       	ld	r8, Z
    6780:	80 80       	ld	r8, Z
    6782:	80 80       	ld	r8, Z
    6784:	80 80       	ld	r8, Z
    6786:	80 80       	ld	r8, Z
    6788:	80 80       	ld	r8, Z
    678a:	80 80       	ld	r8, Z
    678c:	80 80       	ld	r8, Z
    678e:	80 80       	ld	r8, Z
    6790:	80 80       	ld	r8, Z
    6792:	80 80       	ld	r8, Z
    6794:	80 80       	ld	r8, Z
    6796:	80 80       	ld	r8, Z
    6798:	80 80       	ld	r8, Z
    679a:	80 80       	ld	r8, Z
    679c:	80 80       	ld	r8, Z
    679e:	80 80       	ld	r8, Z
    67a0:	80 80       	ld	r8, Z
    67a2:	80 80       	ld	r8, Z
    67a4:	80 80       	ld	r8, Z
    67a6:	80 80       	ld	r8, Z
    67a8:	80 80       	ld	r8, Z
    67aa:	80 80       	ld	r8, Z
    67ac:	80 80       	ld	r8, Z
    67ae:	80 80       	ld	r8, Z
    67b0:	80 80       	ld	r8, Z
    67b2:	80 80       	ld	r8, Z
    67b4:	80 80       	ld	r8, Z
    67b6:	80 80       	ld	r8, Z
    67b8:	80 80       	ld	r8, Z
    67ba:	80 80       	ld	r8, Z
    67bc:	80 80       	ld	r8, Z
    67be:	80 80       	ld	r8, Z
    67c0:	80 80       	ld	r8, Z
    67c2:	80 80       	ld	r8, Z
    67c4:	80 80       	ld	r8, Z
    67c6:	80 80       	ld	r8, Z
    67c8:	80 80       	ld	r8, Z
    67ca:	80 80       	ld	r8, Z
    67cc:	80 80       	ld	r8, Z
    67ce:	80 80       	ld	r8, Z
    67d0:	80 80       	ld	r8, Z
    67d2:	80 80       	ld	r8, Z
    67d4:	80 80       	ld	r8, Z
    67d6:	80 80       	ld	r8, Z
    67d8:	80 80       	ld	r8, Z
    67da:	80 80       	ld	r8, Z
    67dc:	80 80       	ld	r8, Z
    67de:	80 80       	ld	r8, Z
    67e0:	80 80       	ld	r8, Z
    67e2:	80 80       	ld	r8, Z
    67e4:	80 80       	ld	r8, Z
    67e6:	80 80       	ld	r8, Z
    67e8:	80 80       	ld	r8, Z
    67ea:	80 80       	ld	r8, Z
    67ec:	80 80       	ld	r8, Z
    67ee:	80 80       	ld	r8, Z
    67f0:	80 80       	ld	r8, Z
    67f2:	80 80       	ld	r8, Z
    67f4:	80 80       	ld	r8, Z
    67f6:	80 80       	ld	r8, Z
    67f8:	80 80       	ld	r8, Z
    67fa:	80 80       	ld	r8, Z
    67fc:	80 80       	ld	r8, Z
    67fe:	80 80       	ld	r8, Z
    6800:	7f 7f       	andi	r23, 0xFF	; 255
    6802:	7f 7f       	andi	r23, 0xFF	; 255
    6804:	7f 7f       	andi	r23, 0xFF	; 255
    6806:	7f 7f       	andi	r23, 0xFF	; 255
    6808:	7f 7f       	andi	r23, 0xFF	; 255
    680a:	7f 7f       	andi	r23, 0xFF	; 255
    680c:	7f 7f       	andi	r23, 0xFF	; 255
    680e:	7f 7f       	andi	r23, 0xFF	; 255
    6810:	7f 7f       	andi	r23, 0xFF	; 255
    6812:	7f 7f       	andi	r23, 0xFF	; 255
    6814:	7f 7f       	andi	r23, 0xFF	; 255
    6816:	7f 7f       	andi	r23, 0xFF	; 255
    6818:	7f 7f       	andi	r23, 0xFF	; 255
    681a:	7f 7f       	andi	r23, 0xFF	; 255
    681c:	7f 7f       	andi	r23, 0xFF	; 255
    681e:	7f 7f       	andi	r23, 0xFF	; 255
    6820:	7f 7f       	andi	r23, 0xFF	; 255
    6822:	7f 7f       	andi	r23, 0xFF	; 255
    6824:	7f 7f       	andi	r23, 0xFF	; 255
    6826:	7f 7f       	andi	r23, 0xFF	; 255
    6828:	7f 7f       	andi	r23, 0xFF	; 255
    682a:	7f 7f       	andi	r23, 0xFF	; 255
    682c:	7f 7f       	andi	r23, 0xFF	; 255
    682e:	7f 7f       	andi	r23, 0xFF	; 255
    6830:	7f 7f       	andi	r23, 0xFF	; 255
    6832:	7f 7f       	andi	r23, 0xFF	; 255
    6834:	7f 7f       	andi	r23, 0xFF	; 255
    6836:	7f 7f       	andi	r23, 0xFF	; 255
    6838:	7f 7f       	andi	r23, 0xFF	; 255
    683a:	7f 7f       	andi	r23, 0xFF	; 255
    683c:	7f 7f       	andi	r23, 0xFF	; 255
    683e:	7f 7f       	andi	r23, 0xFF	; 255
    6840:	7f 7f       	andi	r23, 0xFF	; 255
    6842:	7f 7f       	andi	r23, 0xFF	; 255
    6844:	7f 7f       	andi	r23, 0xFF	; 255
    6846:	7f 7f       	andi	r23, 0xFF	; 255
    6848:	7f 7f       	andi	r23, 0xFF	; 255
    684a:	7f 7f       	andi	r23, 0xFF	; 255
    684c:	7f 7f       	andi	r23, 0xFF	; 255
    684e:	7f 7f       	andi	r23, 0xFF	; 255
    6850:	7f 7f       	andi	r23, 0xFF	; 255
    6852:	7f 7f       	andi	r23, 0xFF	; 255
    6854:	7f 7f       	andi	r23, 0xFF	; 255
    6856:	7f 7f       	andi	r23, 0xFF	; 255
    6858:	7f 7f       	andi	r23, 0xFF	; 255
    685a:	7f 7f       	andi	r23, 0xFF	; 255
    685c:	7f 7f       	andi	r23, 0xFF	; 255
    685e:	7f 7f       	andi	r23, 0xFF	; 255
    6860:	7f 7f       	andi	r23, 0xFF	; 255
    6862:	7f 7f       	andi	r23, 0xFF	; 255
    6864:	7f 7f       	andi	r23, 0xFF	; 255
    6866:	7f 7f       	andi	r23, 0xFF	; 255
    6868:	7f 7f       	andi	r23, 0xFF	; 255
    686a:	7f 7f       	andi	r23, 0xFF	; 255
    686c:	7f 7f       	andi	r23, 0xFF	; 255
    686e:	7f 7f       	andi	r23, 0xFF	; 255
    6870:	7f 7f       	andi	r23, 0xFF	; 255
    6872:	7f 7f       	andi	r23, 0xFF	; 255
    6874:	7f 7f       	andi	r23, 0xFF	; 255
    6876:	7f 7f       	andi	r23, 0xFF	; 255
    6878:	7f 7f       	andi	r23, 0xFF	; 255
    687a:	7f 7f       	andi	r23, 0xFF	; 255
    687c:	7f 7f       	andi	r23, 0xFF	; 255
    687e:	7f 7f       	andi	r23, 0xFF	; 255
    6880:	80 80       	ld	r8, Z
    6882:	80 80       	ld	r8, Z
    6884:	80 80       	ld	r8, Z
    6886:	80 80       	ld	r8, Z
    6888:	80 80       	ld	r8, Z
    688a:	80 80       	ld	r8, Z
    688c:	80 80       	ld	r8, Z
    688e:	80 80       	ld	r8, Z
    6890:	80 80       	ld	r8, Z
    6892:	80 80       	ld	r8, Z
    6894:	80 80       	ld	r8, Z
    6896:	80 80       	ld	r8, Z
    6898:	80 80       	ld	r8, Z
    689a:	80 80       	ld	r8, Z
    689c:	80 80       	ld	r8, Z
    689e:	80 80       	ld	r8, Z
    68a0:	80 80       	ld	r8, Z
    68a2:	80 80       	ld	r8, Z
    68a4:	80 80       	ld	r8, Z
    68a6:	80 80       	ld	r8, Z
    68a8:	80 80       	ld	r8, Z
    68aa:	80 80       	ld	r8, Z
    68ac:	80 80       	ld	r8, Z
    68ae:	80 80       	ld	r8, Z
    68b0:	80 80       	ld	r8, Z
    68b2:	80 80       	ld	r8, Z
    68b4:	80 80       	ld	r8, Z
    68b6:	80 80       	ld	r8, Z
    68b8:	80 80       	ld	r8, Z
    68ba:	80 80       	ld	r8, Z
    68bc:	80 80       	ld	r8, Z
    68be:	80 80       	ld	r8, Z
    68c0:	80 80       	ld	r8, Z
    68c2:	80 80       	ld	r8, Z
    68c4:	80 80       	ld	r8, Z
    68c6:	80 80       	ld	r8, Z
    68c8:	80 80       	ld	r8, Z
    68ca:	80 80       	ld	r8, Z
    68cc:	80 80       	ld	r8, Z
    68ce:	80 80       	ld	r8, Z
    68d0:	80 80       	ld	r8, Z
    68d2:	80 80       	ld	r8, Z
    68d4:	80 80       	ld	r8, Z
    68d6:	80 80       	ld	r8, Z
    68d8:	80 80       	ld	r8, Z
    68da:	80 80       	ld	r8, Z
    68dc:	80 80       	ld	r8, Z
    68de:	80 80       	ld	r8, Z
    68e0:	80 80       	ld	r8, Z
    68e2:	80 80       	ld	r8, Z
    68e4:	80 80       	ld	r8, Z
    68e6:	80 80       	ld	r8, Z
    68e8:	80 80       	ld	r8, Z
    68ea:	80 80       	ld	r8, Z
    68ec:	80 80       	ld	r8, Z
    68ee:	80 80       	ld	r8, Z
    68f0:	80 80       	ld	r8, Z
    68f2:	80 80       	ld	r8, Z
    68f4:	80 80       	ld	r8, Z
    68f6:	80 80       	ld	r8, Z
    68f8:	80 80       	ld	r8, Z
    68fa:	80 80       	ld	r8, Z
    68fc:	80 80       	ld	r8, Z
    68fe:	80 80       	ld	r8, Z
    6900:	7f 7f       	andi	r23, 0xFF	; 255
    6902:	7f 7f       	andi	r23, 0xFF	; 255
    6904:	7f 7f       	andi	r23, 0xFF	; 255
    6906:	7f 7f       	andi	r23, 0xFF	; 255
    6908:	7f 7f       	andi	r23, 0xFF	; 255
    690a:	7f 7f       	andi	r23, 0xFF	; 255
    690c:	7f 7f       	andi	r23, 0xFF	; 255
    690e:	7f 7f       	andi	r23, 0xFF	; 255
    6910:	7f 7f       	andi	r23, 0xFF	; 255
    6912:	7f 7f       	andi	r23, 0xFF	; 255
    6914:	7f 7f       	andi	r23, 0xFF	; 255
    6916:	7f 7f       	andi	r23, 0xFF	; 255
    6918:	7f 7f       	andi	r23, 0xFF	; 255
    691a:	7f 7f       	andi	r23, 0xFF	; 255
    691c:	7f 7f       	andi	r23, 0xFF	; 255
    691e:	7f 7f       	andi	r23, 0xFF	; 255
    6920:	7f 7f       	andi	r23, 0xFF	; 255
    6922:	7f 7f       	andi	r23, 0xFF	; 255
    6924:	7f 7f       	andi	r23, 0xFF	; 255
    6926:	7f 7f       	andi	r23, 0xFF	; 255
    6928:	7f 7f       	andi	r23, 0xFF	; 255
    692a:	7f 7f       	andi	r23, 0xFF	; 255
    692c:	7f 7f       	andi	r23, 0xFF	; 255
    692e:	7f 7f       	andi	r23, 0xFF	; 255
    6930:	7f 7f       	andi	r23, 0xFF	; 255
    6932:	7f 7f       	andi	r23, 0xFF	; 255
    6934:	7f 7f       	andi	r23, 0xFF	; 255
    6936:	7f 7f       	andi	r23, 0xFF	; 255
    6938:	7f 7f       	andi	r23, 0xFF	; 255
    693a:	7f 7f       	andi	r23, 0xFF	; 255
    693c:	7f 7f       	andi	r23, 0xFF	; 255
    693e:	7f 7f       	andi	r23, 0xFF	; 255
    6940:	7f 7f       	andi	r23, 0xFF	; 255
    6942:	7f 7f       	andi	r23, 0xFF	; 255
    6944:	7f 7f       	andi	r23, 0xFF	; 255
    6946:	7f 7f       	andi	r23, 0xFF	; 255
    6948:	7f 7f       	andi	r23, 0xFF	; 255
    694a:	7f 7f       	andi	r23, 0xFF	; 255
    694c:	7f 7f       	andi	r23, 0xFF	; 255
    694e:	7f 7f       	andi	r23, 0xFF	; 255
    6950:	7f 7f       	andi	r23, 0xFF	; 255
    6952:	7f 7f       	andi	r23, 0xFF	; 255
    6954:	7f 7f       	andi	r23, 0xFF	; 255
    6956:	7f 7f       	andi	r23, 0xFF	; 255
    6958:	7f 7f       	andi	r23, 0xFF	; 255
    695a:	7f 7f       	andi	r23, 0xFF	; 255
    695c:	7f 7f       	andi	r23, 0xFF	; 255
    695e:	7f 7f       	andi	r23, 0xFF	; 255
    6960:	7f 7f       	andi	r23, 0xFF	; 255
    6962:	7f 7f       	andi	r23, 0xFF	; 255
    6964:	7f 7f       	andi	r23, 0xFF	; 255
    6966:	7f 7f       	andi	r23, 0xFF	; 255
    6968:	7f 7f       	andi	r23, 0xFF	; 255
    696a:	7f 7f       	andi	r23, 0xFF	; 255
    696c:	7f 7f       	andi	r23, 0xFF	; 255
    696e:	7f 7f       	andi	r23, 0xFF	; 255
    6970:	7f 7f       	andi	r23, 0xFF	; 255
    6972:	7f 7f       	andi	r23, 0xFF	; 255
    6974:	7f 7f       	andi	r23, 0xFF	; 255
    6976:	7f 7f       	andi	r23, 0xFF	; 255
    6978:	7f 7f       	andi	r23, 0xFF	; 255
    697a:	7f 7f       	andi	r23, 0xFF	; 255
    697c:	7f 7f       	andi	r23, 0xFF	; 255
    697e:	7f 7f       	andi	r23, 0xFF	; 255
    6980:	7f 7f       	andi	r23, 0xFF	; 255
    6982:	7f 7f       	andi	r23, 0xFF	; 255
    6984:	7f 7f       	andi	r23, 0xFF	; 255
    6986:	7f 7f       	andi	r23, 0xFF	; 255
    6988:	7f 7f       	andi	r23, 0xFF	; 255
    698a:	7f 7f       	andi	r23, 0xFF	; 255
    698c:	7f 7f       	andi	r23, 0xFF	; 255
    698e:	7f 7f       	andi	r23, 0xFF	; 255
    6990:	7f 7f       	andi	r23, 0xFF	; 255
    6992:	7f 7f       	andi	r23, 0xFF	; 255
    6994:	7f 7f       	andi	r23, 0xFF	; 255
    6996:	7f 7f       	andi	r23, 0xFF	; 255
    6998:	7f 7f       	andi	r23, 0xFF	; 255
    699a:	7f 7f       	andi	r23, 0xFF	; 255
    699c:	7f 7f       	andi	r23, 0xFF	; 255
    699e:	7f 7f       	andi	r23, 0xFF	; 255
    69a0:	7f 7f       	andi	r23, 0xFF	; 255
    69a2:	7f 7f       	andi	r23, 0xFF	; 255
    69a4:	7f 7f       	andi	r23, 0xFF	; 255
    69a6:	7f 7f       	andi	r23, 0xFF	; 255
    69a8:	7f 7f       	andi	r23, 0xFF	; 255
    69aa:	7f 7f       	andi	r23, 0xFF	; 255
    69ac:	7f 7f       	andi	r23, 0xFF	; 255
    69ae:	7f 7f       	andi	r23, 0xFF	; 255
    69b0:	7f 7f       	andi	r23, 0xFF	; 255
    69b2:	7f 7f       	andi	r23, 0xFF	; 255
    69b4:	7f 7f       	andi	r23, 0xFF	; 255
    69b6:	7f 7f       	andi	r23, 0xFF	; 255
    69b8:	7f 7f       	andi	r23, 0xFF	; 255
    69ba:	7f 7f       	andi	r23, 0xFF	; 255
    69bc:	7f 7f       	andi	r23, 0xFF	; 255
    69be:	7f 7f       	andi	r23, 0xFF	; 255
    69c0:	80 80       	ld	r8, Z
    69c2:	80 80       	ld	r8, Z
    69c4:	80 80       	ld	r8, Z
    69c6:	80 80       	ld	r8, Z
    69c8:	80 80       	ld	r8, Z
    69ca:	80 80       	ld	r8, Z
    69cc:	80 80       	ld	r8, Z
    69ce:	80 80       	ld	r8, Z
    69d0:	80 80       	ld	r8, Z
    69d2:	80 80       	ld	r8, Z
    69d4:	80 80       	ld	r8, Z
    69d6:	80 80       	ld	r8, Z
    69d8:	80 80       	ld	r8, Z
    69da:	80 80       	ld	r8, Z
    69dc:	80 80       	ld	r8, Z
    69de:	80 80       	ld	r8, Z
    69e0:	80 80       	ld	r8, Z
    69e2:	80 80       	ld	r8, Z
    69e4:	80 80       	ld	r8, Z
    69e6:	80 80       	ld	r8, Z
    69e8:	80 80       	ld	r8, Z
    69ea:	80 80       	ld	r8, Z
    69ec:	80 80       	ld	r8, Z
    69ee:	80 80       	ld	r8, Z
    69f0:	80 80       	ld	r8, Z
    69f2:	80 80       	ld	r8, Z
    69f4:	80 80       	ld	r8, Z
    69f6:	80 80       	ld	r8, Z
    69f8:	80 80       	ld	r8, Z
    69fa:	80 80       	ld	r8, Z
    69fc:	80 80       	ld	r8, Z
    69fe:	80 80       	ld	r8, Z
    6a00:	03 09       	sbc	r16, r3
    6a02:	13 1e       	adc	r1, r19
    6a04:	28 31       	cpi	r18, 0x18	; 24
    6a06:	3a 40       	sbci	r19, 0x0A	; 10
    6a08:	46 4c       	sbci	r20, 0xC6	; 198
    6a0a:	50 54       	subi	r21, 0x40	; 64
    6a0c:	58 5b       	subi	r21, 0xB8	; 184
    6a0e:	5e 61       	ori	r21, 0x1E	; 30
    6a10:	63 65       	ori	r22, 0x53	; 83
    6a12:	67 69       	ori	r22, 0x97	; 151
    6a14:	6b 6c       	ori	r22, 0xCB	; 203
    6a16:	6e 6f       	ori	r22, 0xFE	; 254
    6a18:	70 71       	andi	r23, 0x10	; 16
    6a1a:	72 73       	andi	r23, 0x32	; 50
    6a1c:	74 75       	andi	r23, 0x54	; 84
    6a1e:	76 77       	andi	r23, 0x76	; 118
    6a20:	77 78       	andi	r23, 0x87	; 135
    6a22:	79 79       	andi	r23, 0x99	; 153
    6a24:	7a 7a       	andi	r23, 0xAA	; 170
    6a26:	7b 7b       	andi	r23, 0xBB	; 187
    6a28:	7c 7c       	andi	r23, 0xCC	; 204
    6a2a:	7c 7d       	andi	r23, 0xDC	; 220
    6a2c:	7d 7d       	andi	r23, 0xDD	; 221
    6a2e:	7e 7e       	andi	r23, 0xEE	; 238
    6a30:	7e 7e       	andi	r23, 0xEE	; 238
    6a32:	7f 7f       	andi	r23, 0xFF	; 255
    6a34:	7f 7f       	andi	r23, 0xFF	; 255
    6a36:	7f 7f       	andi	r23, 0xFF	; 255
    6a38:	7f 7f       	andi	r23, 0xFF	; 255
    6a3a:	7f 7f       	andi	r23, 0xFF	; 255
    6a3c:	7f 7f       	andi	r23, 0xFF	; 255
    6a3e:	7f 7f       	andi	r23, 0xFF	; 255
    6a40:	7f 7f       	andi	r23, 0xFF	; 255
    6a42:	7f 7f       	andi	r23, 0xFF	; 255
    6a44:	7f 7f       	andi	r23, 0xFF	; 255
    6a46:	7f 7f       	andi	r23, 0xFF	; 255
    6a48:	7f 7f       	andi	r23, 0xFF	; 255
    6a4a:	7f 7f       	andi	r23, 0xFF	; 255
    6a4c:	7f 7e       	andi	r23, 0xEF	; 239
    6a4e:	7e 7e       	andi	r23, 0xEE	; 238
    6a50:	7e 7d       	andi	r23, 0xDE	; 222
    6a52:	7d 7d       	andi	r23, 0xDD	; 221
    6a54:	7c 7c       	andi	r23, 0xCC	; 204
    6a56:	7c 7b       	andi	r23, 0xBC	; 188
    6a58:	7b 7a       	andi	r23, 0xAB	; 171
    6a5a:	7a 79       	andi	r23, 0x9A	; 154
    6a5c:	79 78       	andi	r23, 0x89	; 137
    6a5e:	77 77       	andi	r23, 0x77	; 119
    6a60:	76 75       	andi	r23, 0x56	; 86
    6a62:	74 73       	andi	r23, 0x34	; 52
    6a64:	72 71       	andi	r23, 0x12	; 18
    6a66:	70 6f       	ori	r23, 0xF0	; 240
    6a68:	6e 6c       	ori	r22, 0xCE	; 206
    6a6a:	6b 69       	ori	r22, 0x9B	; 155
    6a6c:	67 65       	ori	r22, 0x57	; 87
    6a6e:	63 61       	ori	r22, 0x13	; 19
    6a70:	5e 5b       	subi	r21, 0xBE	; 190
    6a72:	58 54       	subi	r21, 0x48	; 72
    6a74:	50 4c       	sbci	r21, 0xC0	; 192
    6a76:	46 40       	sbci	r20, 0x06	; 6
    6a78:	3a 31       	cpi	r19, 0x1A	; 26
    6a7a:	28 1e       	adc	r2, r24
    6a7c:	13 09       	sbc	r17, r3
    6a7e:	03 00       	.word	0x0003	; ????
    6a80:	c6 cc       	rjmp	.-1652   	; 0x640e <waves+0xe>
    6a82:	d5 db       	rcall	.-2134   	; 0x622e <steptable+0x26>
    6a84:	df e3       	ldi	r29, 0x3F	; 63
    6a86:	e5 e7       	ldi	r30, 0x75	; 117
    6a88:	e9 ea       	ldi	r30, 0xA9	; 169
    6a8a:	eb ec       	ldi	r30, 0xCB	; 203
    6a8c:	ed ee       	ldi	r30, 0xED	; 237
    6a8e:	ef ef       	ldi	r30, 0xFF	; 255
    6a90:	f0 f0       	brcs	.+60     	; 0x6ace <waves+0x6ce>
    6a92:	f0 f1       	brcs	.+124    	; 0x6b10 <waves+0x710>
    6a94:	f1 f1       	breq	.+124    	; 0x6b12 <waves+0x712>
    6a96:	f1 f2       	breq	.-68     	; 0x6a54 <waves+0x654>
    6a98:	f2 f2       	brmi	.-68     	; 0x6a56 <waves+0x656>
    6a9a:	f2 f2       	brmi	.-68     	; 0x6a58 <waves+0x658>
    6a9c:	f2 f2       	brmi	.-68     	; 0x6a5a <waves+0x65a>
    6a9e:	f2 f3       	brmi	.-4      	; 0x6a9c <waves+0x69c>
    6aa0:	f3 f3       	brvs	.-4      	; 0x6a9e <waves+0x69e>
    6aa2:	f3 f3       	brvs	.-4      	; 0x6aa0 <waves+0x6a0>
    6aa4:	f3 f3       	brvs	.-4      	; 0x6aa2 <waves+0x6a2>
    6aa6:	f3 f3       	brvs	.-4      	; 0x6aa4 <waves+0x6a4>
    6aa8:	f3 f3       	brvs	.-4      	; 0x6aa6 <waves+0x6a6>
    6aaa:	f3 f3       	brvs	.-4      	; 0x6aa8 <waves+0x6a8>
    6aac:	f3 f3       	brvs	.-4      	; 0x6aaa <waves+0x6aa>
    6aae:	f3 f3       	brvs	.-4      	; 0x6aac <waves+0x6ac>
    6ab0:	f3 f3       	brvs	.-4      	; 0x6aae <waves+0x6ae>
    6ab2:	f3 f3       	brvs	.-4      	; 0x6ab0 <waves+0x6b0>
    6ab4:	f3 f3       	brvs	.-4      	; 0x6ab2 <waves+0x6b2>
    6ab6:	f3 f3       	brvs	.-4      	; 0x6ab4 <waves+0x6b4>
    6ab8:	f3 f3       	brvs	.-4      	; 0x6ab6 <waves+0x6b6>
    6aba:	f3 f3       	brvs	.-4      	; 0x6ab8 <waves+0x6b8>
    6abc:	f3 f3       	brvs	.-4      	; 0x6aba <waves+0x6ba>
    6abe:	f3 f3       	brvs	.-4      	; 0x6abc <waves+0x6bc>
    6ac0:	f3 f3       	brvs	.-4      	; 0x6abe <waves+0x6be>
    6ac2:	f3 f3       	brvs	.-4      	; 0x6ac0 <waves+0x6c0>
    6ac4:	f3 f3       	brvs	.-4      	; 0x6ac2 <waves+0x6c2>
    6ac6:	f3 f3       	brvs	.-4      	; 0x6ac4 <waves+0x6c4>
    6ac8:	f3 f3       	brvs	.-4      	; 0x6ac6 <waves+0x6c6>
    6aca:	f3 f3       	brvs	.-4      	; 0x6ac8 <waves+0x6c8>
    6acc:	f3 f3       	brvs	.-4      	; 0x6aca <waves+0x6ca>
    6ace:	f3 f3       	brvs	.-4      	; 0x6acc <waves+0x6cc>
    6ad0:	f3 f3       	brvs	.-4      	; 0x6ace <waves+0x6ce>
    6ad2:	f3 f3       	brvs	.-4      	; 0x6ad0 <waves+0x6d0>
    6ad4:	f3 f3       	brvs	.-4      	; 0x6ad2 <waves+0x6d2>
    6ad6:	f3 f3       	brvs	.-4      	; 0x6ad4 <waves+0x6d4>
    6ad8:	f3 f3       	brvs	.-4      	; 0x6ad6 <waves+0x6d6>
    6ada:	f3 f3       	brvs	.-4      	; 0x6ad8 <waves+0x6d8>
    6adc:	f3 f3       	brvs	.-4      	; 0x6ada <waves+0x6da>
    6ade:	f3 f3       	brvs	.-4      	; 0x6adc <waves+0x6dc>
    6ae0:	f2 f2       	brmi	.-68     	; 0x6a9e <waves+0x69e>
    6ae2:	f2 f2       	brmi	.-68     	; 0x6aa0 <waves+0x6a0>
    6ae4:	f2 f2       	brmi	.-68     	; 0x6aa2 <waves+0x6a2>
    6ae6:	f2 f2       	brmi	.-68     	; 0x6aa4 <waves+0x6a4>
    6ae8:	f1 f1       	breq	.+124    	; 0x6b66 <waves+0x766>
    6aea:	f1 f1       	breq	.+124    	; 0x6b68 <waves+0x768>
    6aec:	f0 f0       	brcs	.+60     	; 0x6b2a <waves+0x72a>
    6aee:	f0 ef       	ldi	r31, 0xF0	; 240
    6af0:	ef ee       	ldi	r30, 0xEF	; 239
    6af2:	ed ec       	ldi	r30, 0xCD	; 205
    6af4:	eb ea       	ldi	r30, 0xAB	; 171
    6af6:	e9 e7       	ldi	r30, 0x79	; 121
    6af8:	e5 e3       	ldi	r30, 0x35	; 53
    6afa:	df db       	rcall	.-2114   	; 0x62ba <steptable+0xb2>
    6afc:	d5 cc       	rjmp	.-1622   	; 0x64a8 <waves+0xa8>
    6afe:	c6 00       	.word	0x00c6	; ????
    6b00:	00 28       	or	r0, r0
    6b02:	3d 42       	sbci	r19, 0x2D	; 45
    6b04:	30 2d       	mov	r19, r0
    6b06:	2c 2b       	or	r18, r28
    6b08:	2c 2d       	mov	r18, r12
    6b0a:	2e 2f       	mov	r18, r30
    6b0c:	30 32       	cpi	r19, 0x20	; 32
    6b0e:	33 35       	cpi	r19, 0x53	; 83
    6b10:	37 39       	cpi	r19, 0x97	; 151
    6b12:	3b 3d       	cpi	r19, 0xDB	; 219
    6b14:	3f 41       	sbci	r19, 0x1F	; 31
    6b16:	43 45       	sbci	r20, 0x53	; 83
    6b18:	48 4a       	sbci	r20, 0xA8	; 168
    6b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6b1c:	50 53       	subi	r21, 0x30	; 48
    6b1e:	55 57       	subi	r21, 0x75	; 117
    6b20:	59 5b       	subi	r21, 0xB9	; 185
    6b22:	5d 5f       	subi	r21, 0xFD	; 253
    6b24:	61 63       	ori	r22, 0x31	; 49
    6b26:	65 67       	ori	r22, 0x75	; 117
    6b28:	69 6b       	ori	r22, 0xB9	; 185
    6b2a:	6c 6e       	ori	r22, 0xEC	; 236
    6b2c:	70 71       	andi	r23, 0x10	; 16
    6b2e:	73 74       	andi	r23, 0x43	; 67
    6b30:	75 77       	andi	r23, 0x75	; 117
    6b32:	78 79       	andi	r23, 0x98	; 152
    6b34:	7a 7b       	andi	r23, 0xBA	; 186
    6b36:	7c 7d       	andi	r23, 0xDC	; 220
    6b38:	7d 7e       	andi	r23, 0xED	; 237
    6b3a:	7e 7f       	andi	r23, 0xFE	; 254
    6b3c:	7f 7f       	andi	r23, 0xFF	; 255
    6b3e:	7f 7f       	andi	r23, 0xFF	; 255
    6b40:	7f 7f       	andi	r23, 0xFF	; 255
    6b42:	7f 7f       	andi	r23, 0xFF	; 255
    6b44:	7f 7f       	andi	r23, 0xFF	; 255
    6b46:	7e 7e       	andi	r23, 0xEE	; 238
    6b48:	7d 7d       	andi	r23, 0xDD	; 221
    6b4a:	7c 7b       	andi	r23, 0xBC	; 188
    6b4c:	7a 79       	andi	r23, 0x9A	; 154
    6b4e:	78 77       	andi	r23, 0x78	; 120
    6b50:	75 74       	andi	r23, 0x45	; 69
    6b52:	73 71       	andi	r23, 0x13	; 19
    6b54:	70 6e       	ori	r23, 0xE0	; 224
    6b56:	6c 6b       	ori	r22, 0xBC	; 188
    6b58:	69 67       	ori	r22, 0x79	; 121
    6b5a:	65 63       	ori	r22, 0x35	; 53
    6b5c:	61 5f       	subi	r22, 0xF1	; 241
    6b5e:	5d 5b       	subi	r21, 0xBD	; 189
    6b60:	59 57       	subi	r21, 0x79	; 121
    6b62:	55 53       	subi	r21, 0x35	; 53
    6b64:	50 4e       	sbci	r21, 0xE0	; 224
    6b66:	4c 4a       	sbci	r20, 0xAC	; 172
    6b68:	48 45       	sbci	r20, 0x58	; 88
    6b6a:	43 41       	sbci	r20, 0x13	; 19
    6b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    6b6e:	3b 39       	cpi	r19, 0x9B	; 155
    6b70:	37 35       	cpi	r19, 0x57	; 87
    6b72:	33 32       	cpi	r19, 0x23	; 35
    6b74:	30 2f       	mov	r19, r16
    6b76:	2e 2d       	mov	r18, r14
    6b78:	2c 2b       	or	r18, r28
    6b7a:	2c 2d       	mov	r18, r12
    6b7c:	30 42       	sbci	r19, 0x20	; 32
    6b7e:	3d 28       	or	r3, r13
    6b80:	00 e9       	ldi	r16, 0x90	; 144
    6b82:	e5 fe       	sbrs	r14, 5
    6b84:	d4 d7       	rcall	.+4008   	; 0x7b2e <load_level+0x56>
    6b86:	d7 d7       	rcall	.+4014   	; 0x7b36 <load_level+0x5e>
    6b88:	d6 d4       	rcall	.+2476   	; 0x7536 <LBRotateSprites+0x54>
    6b8a:	d2 d0       	rcall	.+420    	; 0x6d30 <waves+0x930>
    6b8c:	ce cc       	rjmp	.-1636   	; 0x652a <waves+0x12a>
    6b8e:	ca c8       	rjmp	.-3692   	; 0x5d24 <TriggerNote+0x5c>
    6b90:	c6 c3       	rjmp	.+1932   	; 0x731e <LBGetJoyPadState+0x10>
    6b92:	c1 bf       	out	0x31, r28	; 49
    6b94:	bd ba       	out	0x1d, r11	; 29
    6b96:	b8 b6       	in	r11, 0x38	; 56
    6b98:	b4 b1       	in	r27, 0x04	; 4
    6b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    6b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    6b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    6ba2:	9f 9e       	mul	r9, r31
    6ba4:	9c 9a       	sbi	0x13, 4	; 19
    6ba6:	99 97       	sbiw	r26, 0x29	; 41
    6ba8:	95 94       	asr	r9
    6baa:	93 91       	.word	0x9193	; ????
    6bac:	90 8f       	std	Z+24, r25	; 0x18
    6bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6bb0:	8b 8a       	std	Y+19, r8	; 0x13
    6bb2:	89 88       	ldd	r8, Y+17	; 0x11
    6bb4:	88 87       	std	Y+8, r24	; 0x08
    6bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    6bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    6bba:	84 84       	ldd	r8, Z+12	; 0x0c
    6bbc:	83 83       	std	Z+3, r24	; 0x03
    6bbe:	83 83       	std	Z+3, r24	; 0x03
    6bc0:	83 83       	std	Z+3, r24	; 0x03
    6bc2:	83 83       	std	Z+3, r24	; 0x03
    6bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    6bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    6bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    6bca:	86 87       	std	Z+14, r24	; 0x0e
    6bcc:	88 88       	ldd	r8, Y+16	; 0x10
    6bce:	89 8a       	std	Y+17, r8	; 0x11
    6bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    6bd4:	90 91 93 94 	lds	r25, 0x9493
    6bd8:	95 97       	sbiw	r26, 0x25	; 37
    6bda:	99 9a       	sbi	0x13, 1	; 19
    6bdc:	9c 9e       	mul	r9, r28
    6bde:	9f a1       	ldd	r25, Y+39	; 0x27
    6be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    6be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    6be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    6be6:	af b1       	in	r26, 0x0f	; 15
    6be8:	b4 b6       	in	r11, 0x34	; 52
    6bea:	b8 ba       	out	0x18, r11	; 24
    6bec:	bd bf       	out	0x3d, r27	; 61
    6bee:	c1 c3       	rjmp	.+1922   	; 0x7372 <LBGetJoyPadState+0x64>
    6bf0:	c6 c8       	rjmp	.-3700   	; 0x5d7e <ProcessMusic+0x36>
    6bf2:	ca cc       	rjmp	.-1644   	; 0x6588 <waves+0x188>
    6bf4:	ce d0       	rcall	.+412    	; 0x6d92 <waves+0x992>
    6bf6:	d2 d4       	rcall	.+2468   	; 0x759c <LBRotateSprites+0xba>
    6bf8:	d6 d7       	rcall	.+4012   	; 0x7ba6 <on_solid_ground+0x8>
    6bfa:	d7 d7       	rcall	.+4014   	; 0x7baa <on_solid_ground+0xc>
    6bfc:	d4 fe       	sbrs	r13, 4
    6bfe:	e5 e9       	ldi	r30, 0x95	; 149
    6c00:	f9 f8       	.word	0xf8f9	; ????
    6c02:	f9 f5       	brne	.+126    	; 0x6c82 <waves+0x882>
    6c04:	eb e1       	ldi	r30, 0x1B	; 27
    6c06:	dd de       	rcall	.-582    	; 0x69c2 <waves+0x5c2>
    6c08:	e0 e2       	ldi	r30, 0x20	; 32
    6c0a:	e4 e5       	ldi	r30, 0x54	; 84
    6c0c:	e6 e5       	ldi	r30, 0x56	; 86
    6c0e:	e4 e2       	ldi	r30, 0x24	; 36
    6c10:	de d9       	rcall	.-3140   	; 0x5fce <ProcessMusic+0x286>
    6c12:	d2 ca       	rjmp	.-2652   	; 0x61b8 <set_note_waves+0x22>
    6c14:	c1 b7       	in	r28, 0x31	; 49
    6c16:	ac a2       	std	Y+36, r10	; 0x24
    6c18:	99 91       	ld	r25, Y+
    6c1a:	8a 86       	std	Y+10, r8	; 0x0a
    6c1c:	83 81       	ldd	r24, Z+3	; 0x03
    6c1e:	80 80       	ld	r8, Z
    6c20:	81 82       	std	Z+1, r8	; 0x01
    6c22:	83 85       	ldd	r24, Z+11	; 0x0b
    6c24:	86 88       	ldd	r8, Z+22	; 0x16
    6c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6c28:	8d 8f       	std	Y+29, r24	; 0x1d
    6c2a:	90 92 93 95 	sts	0x9593, r9
    6c2e:	96 97       	sbiw	r26, 0x26	; 38
    6c30:	98 99       	sbic	0x13, 0	; 19
    6c32:	9a 9b       	sbis	0x13, 2	; 19
    6c34:	9b 9c       	mul	r9, r11
    6c36:	9d 9d       	mul	r25, r13
    6c38:	9d 9e       	mul	r9, r29
    6c3a:	9e 9e       	mul	r9, r30
    6c3c:	9f 9f       	mul	r25, r31
    6c3e:	9f 9f       	mul	r25, r31
    6c40:	9f 9f       	mul	r25, r31
    6c42:	9f 9e       	mul	r9, r31
    6c44:	9e 9e       	mul	r9, r30
    6c46:	9d 9d       	mul	r25, r13
    6c48:	9d 9c       	mul	r9, r13
    6c4a:	9b 9b       	sbis	0x13, 3	; 19
    6c4c:	9a 99       	sbic	0x13, 2	; 19
    6c4e:	98 97       	sbiw	r26, 0x28	; 40
    6c50:	96 95       	lsr	r25
    6c52:	93 92       	.word	0x9293	; ????
    6c54:	90 8f       	std	Z+24, r25	; 0x18
    6c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6c58:	8a 88       	ldd	r8, Y+18	; 0x12
    6c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    6c5c:	83 82       	std	Z+3, r8	; 0x03
    6c5e:	81 80       	ldd	r8, Z+1	; 0x01
    6c60:	80 81       	ld	r24, Z
    6c62:	83 86       	std	Z+11, r8	; 0x0b
    6c64:	8a 91       	ld	r24, -Y
    6c66:	99 a2       	std	Y+33, r9	; 0x21
    6c68:	ac b7       	in	r26, 0x3c	; 60
    6c6a:	c1 ca       	rjmp	.-2686   	; 0x61ee <smw2+0x4>
    6c6c:	d2 d9       	rcall	.-3164   	; 0x6012 <ProcessMusic+0x2ca>
    6c6e:	de e2       	ldi	r29, 0x2E	; 46
    6c70:	e4 e5       	ldi	r30, 0x54	; 84
    6c72:	e6 e5       	ldi	r30, 0x56	; 86
    6c74:	e4 e2       	ldi	r30, 0x24	; 36
    6c76:	e0 de       	rcall	.-576    	; 0x6a38 <waves+0x638>
    6c78:	dd e1       	ldi	r29, 0x1D	; 29
    6c7a:	eb f5       	brvc	.+122    	; 0x6cf6 <waves+0x8f6>
    6c7c:	f9 f8       	.word	0xf8f9	; ????
    6c7e:	f9 00       	.word	0x00f9	; ????
    6c80:	07 08       	sbc	r0, r7
    6c82:	07 0b       	sbc	r16, r23
    6c84:	15 1f       	adc	r17, r21
    6c86:	23 22       	and	r2, r19
    6c88:	20 1e       	adc	r2, r16
    6c8a:	1c 1b       	sub	r17, r28
    6c8c:	1a 1b       	sub	r17, r26
    6c8e:	1c 1e       	adc	r1, r28
    6c90:	22 27       	eor	r18, r18
    6c92:	2e 36       	cpi	r18, 0x6E	; 110
    6c94:	3f 49       	sbci	r19, 0x9F	; 159
    6c96:	54 5e       	subi	r21, 0xE4	; 228
    6c98:	67 6f       	ori	r22, 0xF7	; 247
    6c9a:	76 7a       	andi	r23, 0xA6	; 166
    6c9c:	7e 7f       	andi	r23, 0xFE	; 254
    6c9e:	7f 7f       	andi	r23, 0xFF	; 255
    6ca0:	7f 7e       	andi	r23, 0xEF	; 239
    6ca2:	7d 7b       	andi	r23, 0xBD	; 189
    6ca4:	7a 78       	andi	r23, 0x8A	; 138
    6ca6:	76 74       	andi	r23, 0x46	; 70
    6ca8:	73 71       	andi	r23, 0x13	; 19
    6caa:	70 6e       	ori	r23, 0xE0	; 224
    6cac:	6d 6b       	ori	r22, 0xBD	; 189
    6cae:	6a 69       	ori	r22, 0x9A	; 154
    6cb0:	68 67       	ori	r22, 0x78	; 120
    6cb2:	66 65       	ori	r22, 0x56	; 86
    6cb4:	65 64       	ori	r22, 0x45	; 69
    6cb6:	64 63       	ori	r22, 0x34	; 52
    6cb8:	63 62       	ori	r22, 0x23	; 35
    6cba:	62 62       	ori	r22, 0x22	; 34
    6cbc:	61 61       	ori	r22, 0x11	; 17
    6cbe:	61 61       	ori	r22, 0x11	; 17
    6cc0:	61 61       	ori	r22, 0x11	; 17
    6cc2:	61 62       	ori	r22, 0x21	; 33
    6cc4:	62 62       	ori	r22, 0x22	; 34
    6cc6:	63 63       	ori	r22, 0x33	; 51
    6cc8:	63 64       	ori	r22, 0x43	; 67
    6cca:	65 65       	ori	r22, 0x55	; 85
    6ccc:	66 67       	ori	r22, 0x76	; 118
    6cce:	68 69       	ori	r22, 0x98	; 152
    6cd0:	6a 6b       	ori	r22, 0xBA	; 186
    6cd2:	6d 6e       	ori	r22, 0xED	; 237
    6cd4:	70 71       	andi	r23, 0x10	; 16
    6cd6:	73 74       	andi	r23, 0x43	; 67
    6cd8:	76 78       	andi	r23, 0x86	; 134
    6cda:	7a 7b       	andi	r23, 0xBA	; 186
    6cdc:	7d 7e       	andi	r23, 0xED	; 237
    6cde:	7f 7f       	andi	r23, 0xFF	; 255
    6ce0:	7f 7f       	andi	r23, 0xFF	; 255
    6ce2:	7e 7a       	andi	r23, 0xAE	; 174
    6ce4:	76 6f       	ori	r23, 0xF6	; 246
    6ce6:	67 5e       	subi	r22, 0xE7	; 231
    6ce8:	54 49       	sbci	r21, 0x94	; 148
    6cea:	3f 36       	cpi	r19, 0x6F	; 111
    6cec:	2e 27       	eor	r18, r30
    6cee:	22 1e       	adc	r2, r18
    6cf0:	1c 1b       	sub	r17, r28
    6cf2:	1a 1b       	sub	r17, r26
    6cf4:	1c 1e       	adc	r1, r28
    6cf6:	20 22       	and	r2, r16
    6cf8:	23 1f       	adc	r18, r19
    6cfa:	15 0b       	sbc	r17, r21
    6cfc:	07 08       	sbc	r0, r7
    6cfe:	07 00       	.word	0x0007	; ????
    6d00:	1f 31       	cpi	r17, 0x1F	; 31
    6d02:	3d 44       	sbci	r19, 0x4D	; 77
    6d04:	4e 53       	subi	r20, 0x3E	; 62
    6d06:	54 56       	subi	r21, 0x64	; 100
    6d08:	5a 5f       	subi	r21, 0xFA	; 250
    6d0a:	64 69       	ori	r22, 0x94	; 148
    6d0c:	6e 74       	andi	r22, 0x4E	; 78
    6d0e:	76 79       	andi	r23, 0x96	; 150
    6d10:	7c 7f       	andi	r23, 0xFC	; 252
    6d12:	7f 7f       	andi	r23, 0xFF	; 255
    6d14:	7f 7f       	andi	r23, 0xFF	; 255
    6d16:	7f 7f       	andi	r23, 0xFF	; 255
    6d18:	7f 7f       	andi	r23, 0xFF	; 255
    6d1a:	7f 7f       	andi	r23, 0xFF	; 255
    6d1c:	7f 7f       	andi	r23, 0xFF	; 255
    6d1e:	7f 7f       	andi	r23, 0xFF	; 255
    6d20:	7f 7f       	andi	r23, 0xFF	; 255
    6d22:	7f 7f       	andi	r23, 0xFF	; 255
    6d24:	7f 7f       	andi	r23, 0xFF	; 255
    6d26:	7f 7f       	andi	r23, 0xFF	; 255
    6d28:	7f 7f       	andi	r23, 0xFF	; 255
    6d2a:	7f 7f       	andi	r23, 0xFF	; 255
    6d2c:	7f 7f       	andi	r23, 0xFF	; 255
    6d2e:	7f 7f       	andi	r23, 0xFF	; 255
    6d30:	7f 7f       	andi	r23, 0xFF	; 255
    6d32:	7f 7f       	andi	r23, 0xFF	; 255
    6d34:	7f 7f       	andi	r23, 0xFF	; 255
    6d36:	7f 7f       	andi	r23, 0xFF	; 255
    6d38:	7f 7f       	andi	r23, 0xFF	; 255
    6d3a:	7f 7f       	andi	r23, 0xFF	; 255
    6d3c:	7f 7f       	andi	r23, 0xFF	; 255
    6d3e:	7f 7f       	andi	r23, 0xFF	; 255
    6d40:	7f 7f       	andi	r23, 0xFF	; 255
    6d42:	7f 7f       	andi	r23, 0xFF	; 255
    6d44:	7f 7f       	andi	r23, 0xFF	; 255
    6d46:	7f 7f       	andi	r23, 0xFF	; 255
    6d48:	7f 7f       	andi	r23, 0xFF	; 255
    6d4a:	7f 7f       	andi	r23, 0xFF	; 255
    6d4c:	7f 7f       	andi	r23, 0xFF	; 255
    6d4e:	7f 7f       	andi	r23, 0xFF	; 255
    6d50:	7f 7f       	andi	r23, 0xFF	; 255
    6d52:	7f 7f       	andi	r23, 0xFF	; 255
    6d54:	7f 7f       	andi	r23, 0xFF	; 255
    6d56:	7f 7f       	andi	r23, 0xFF	; 255
    6d58:	7f 7f       	andi	r23, 0xFF	; 255
    6d5a:	7f 7f       	andi	r23, 0xFF	; 255
    6d5c:	7f 7f       	andi	r23, 0xFF	; 255
    6d5e:	7f 7f       	andi	r23, 0xFF	; 255
    6d60:	7f 7f       	andi	r23, 0xFF	; 255
    6d62:	7f 7f       	andi	r23, 0xFF	; 255
    6d64:	7f 7f       	andi	r23, 0xFF	; 255
    6d66:	7f 7f       	andi	r23, 0xFF	; 255
    6d68:	7f 7f       	andi	r23, 0xFF	; 255
    6d6a:	7f 7f       	andi	r23, 0xFF	; 255
    6d6c:	7f 7f       	andi	r23, 0xFF	; 255
    6d6e:	7f 7f       	andi	r23, 0xFF	; 255
    6d70:	7f 7f       	andi	r23, 0xFF	; 255
    6d72:	7f 7f       	andi	r23, 0xFF	; 255
    6d74:	7f 7f       	andi	r23, 0xFF	; 255
    6d76:	7f 7f       	andi	r23, 0xFF	; 255
    6d78:	7f 7f       	andi	r23, 0xFF	; 255
    6d7a:	7f 7c       	andi	r23, 0xCF	; 207
    6d7c:	78 71       	andi	r23, 0x18	; 24
    6d7e:	68 4c       	sbci	r22, 0xC8	; 200
    6d80:	2c 1c       	adc	r2, r12
    6d82:	12 0c       	add	r1, r2
    6d84:	0a 0b       	sbc	r16, r26
    6d86:	0a 05       	cpc	r16, r10
    6d88:	fd f3       	brhs	.-2      	; 0x6d88 <waves+0x988>
    6d8a:	e9 df       	rcall	.-46     	; 0x6d5e <waves+0x95e>
    6d8c:	d4 ca       	rjmp	.-2648   	; 0x6336 <steptable+0x12e>
    6d8e:	c0 b7       	in	r28, 0x30	; 48
    6d90:	ae a6       	std	Y+46, r10	; 0x2e
    6d92:	9e 97       	sbiw	r26, 0x2e	; 46
    6d94:	91 8b       	std	Z+17, r25	; 0x11
    6d96:	86 85       	ldd	r24, Z+14	; 0x0e
    6d98:	82 80       	ldd	r8, Z+2	; 0x02
    6d9a:	80 80       	ld	r8, Z
    6d9c:	80 80       	ld	r8, Z
    6d9e:	80 80       	ld	r8, Z
    6da0:	80 80       	ld	r8, Z
    6da2:	80 80       	ld	r8, Z
    6da4:	80 80       	ld	r8, Z
    6da6:	80 80       	ld	r8, Z
    6da8:	80 80       	ld	r8, Z
    6daa:	80 80       	ld	r8, Z
    6dac:	80 80       	ld	r8, Z
    6dae:	80 80       	ld	r8, Z
    6db0:	80 80       	ld	r8, Z
    6db2:	80 80       	ld	r8, Z
    6db4:	80 80       	ld	r8, Z
    6db6:	80 80       	ld	r8, Z
    6db8:	80 80       	ld	r8, Z
    6dba:	80 80       	ld	r8, Z
    6dbc:	80 80       	ld	r8, Z
    6dbe:	80 80       	ld	r8, Z
    6dc0:	80 80       	ld	r8, Z
    6dc2:	80 80       	ld	r8, Z
    6dc4:	80 80       	ld	r8, Z
    6dc6:	80 80       	ld	r8, Z
    6dc8:	80 80       	ld	r8, Z
    6dca:	80 80       	ld	r8, Z
    6dcc:	80 80       	ld	r8, Z
    6dce:	80 80       	ld	r8, Z
    6dd0:	80 80       	ld	r8, Z
    6dd2:	80 80       	ld	r8, Z
    6dd4:	80 80       	ld	r8, Z
    6dd6:	80 80       	ld	r8, Z
    6dd8:	80 80       	ld	r8, Z
    6dda:	80 80       	ld	r8, Z
    6ddc:	80 80       	ld	r8, Z
    6dde:	80 80       	ld	r8, Z
    6de0:	80 80       	ld	r8, Z
    6de2:	80 80       	ld	r8, Z
    6de4:	80 80       	ld	r8, Z
    6de6:	80 80       	ld	r8, Z
    6de8:	80 80       	ld	r8, Z
    6dea:	80 80       	ld	r8, Z
    6dec:	80 80       	ld	r8, Z
    6dee:	80 80       	ld	r8, Z
    6df0:	80 80       	ld	r8, Z
    6df2:	80 80       	ld	r8, Z
    6df4:	80 87       	std	Z+8, r24	; 0x08
    6df6:	91 9d       	mul	r25, r1
    6df8:	ac c4       	rjmp	.+2392   	; 0x7752 <init_game_state+0x1a2>
    6dfa:	cb d4       	rcall	.+2454   	; 0x7792 <render_level_tile+0x14>
    6dfc:	dd f2       	brhs	.-74     	; 0x6db4 <waves+0x9b4>
    6dfe:	fa fa       	.word	0xfafa	; ????

00006e00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6e00:	80 91 db 0c 	lds	r24, 0x0CDB
    6e04:	90 91 6a 0d 	lds	r25, 0x0D6A
    6e08:	89 17       	cp	r24, r25
    6e0a:	78 f4       	brcc	.+30     	; 0x6e2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    6e0c:	e8 2f       	mov	r30, r24
    6e0e:	f0 e0       	ldi	r31, 0x00	; 0
    6e10:	9f 01       	movw	r18, r30
    6e12:	22 0f       	add	r18, r18
    6e14:	33 1f       	adc	r19, r19
    6e16:	e2 0f       	add	r30, r18
    6e18:	f3 1f       	adc	r31, r19
    6e1a:	e6 5c       	subi	r30, 0xC6	; 198
    6e1c:	f3 4f       	sbci	r31, 0xF3	; 243
    6e1e:	a0 81       	ld	r26, Z
    6e20:	b1 81       	ldd	r27, Z+1	; 0x01
    6e22:	92 81       	ldd	r25, Z+2	; 0x02
    6e24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6e26:	8f 5f       	subi	r24, 0xFF	; 255
    6e28:	ed cf       	rjmp	.-38     	; 0x6e04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    6e2a:	08 95       	ret

00006e2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    6e2c:	2f 92       	push	r2
    6e2e:	3f 92       	push	r3
    6e30:	4f 92       	push	r4
    6e32:	5f 92       	push	r5
    6e34:	6f 92       	push	r6
    6e36:	7f 92       	push	r7
    6e38:	8f 92       	push	r8
    6e3a:	9f 92       	push	r9
    6e3c:	af 92       	push	r10
    6e3e:	bf 92       	push	r11
    6e40:	cf 92       	push	r12
    6e42:	df 92       	push	r13
    6e44:	ef 92       	push	r14
    6e46:	ff 92       	push	r15
    6e48:	0f 93       	push	r16
    6e4a:	1f 93       	push	r17
    6e4c:	cf 93       	push	r28
    6e4e:	df 93       	push	r29
    6e50:	00 d0       	rcall	.+0      	; 0x6e52 <ProcessSprites+0x26>
    6e52:	00 d0       	rcall	.+0      	; 0x6e54 <ProcessSprites+0x28>
    6e54:	cd b7       	in	r28, 0x3d	; 61
    6e56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    6e58:	80 91 00 05 	lds	r24, 0x0500
    6e5c:	88 23       	and	r24, r24
    6e5e:	09 f4       	brne	.+2      	; 0x6e62 <ProcessSprites+0x36>
    6e60:	e0 c0       	rjmp	.+448    	; 0x7022 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    6e62:	80 91 da 0c 	lds	r24, 0x0CDA
    6e66:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    6e6a:	80 93 6a 0d 	sts	0x0D6A, r24
    6e6e:	e2 e0       	ldi	r30, 0x02	; 2
    6e70:	ce 2e       	mov	r12, r30
    6e72:	e5 e0       	ldi	r30, 0x05	; 5
    6e74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    6e76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    6e78:	f6 01       	movw	r30, r12
    6e7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    6e7c:	20 3e       	cpi	r18, 0xE0	; 224
    6e7e:	09 f4       	brne	.+2      	; 0x6e82 <ProcessSprites+0x56>
    6e80:	b1 c0       	rjmp	.+354    	; 0x6fe4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    6e82:	80 91 9c 0c 	lds	r24, 0x0C9C
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	82 0f       	add	r24, r18
    6e8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    6e8c:	41 81       	ldd	r20, Z+1	; 0x01
    6e8e:	20 91 9d 0c 	lds	r18, 0x0C9D
    6e92:	30 e0       	ldi	r19, 0x00	; 0
    6e94:	24 0f       	add	r18, r20
    6e96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    6e98:	ac 01       	movw	r20, r24
    6e9a:	73 e0       	ldi	r23, 0x03	; 3
    6e9c:	56 95       	lsr	r21
    6e9e:	47 95       	ror	r20
    6ea0:	7a 95       	dec	r23
    6ea2:	e1 f7       	brne	.-8      	; 0x6e9c <ProcessSprites+0x70>
    6ea4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    6ea6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    6ea8:	11 f0       	breq	.+4      	; 0x6eae <ProcessSprites+0x82>
    6eaa:	92 e0       	ldi	r25, 0x02	; 2
    6eac:	01 c0       	rjmp	.+2      	; 0x6eb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    6eae:	91 e0       	ldi	r25, 0x01	; 1
    6eb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    6eb2:	a9 01       	movw	r20, r18
    6eb4:	63 e0       	ldi	r22, 0x03	; 3
    6eb6:	56 95       	lsr	r21
    6eb8:	47 95       	ror	r20
    6eba:	6a 95       	dec	r22
    6ebc:	e1 f7       	brne	.-8      	; 0x6eb6 <ProcessSprites+0x8a>
    6ebe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    6ec0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    6ec2:	19 f0       	breq	.+6      	; 0x6eca <ProcessSprites+0x9e>
    6ec4:	52 e0       	ldi	r21, 0x02	; 2
    6ec6:	35 2e       	mov	r3, r21
    6ec8:	02 c0       	rjmp	.+4      	; 0x6ece <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    6eca:	33 24       	eor	r3, r3
    6ecc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6ece:	30 e0       	ldi	r19, 0x00	; 0
    6ed0:	32 2f       	mov	r19, r18
    6ed2:	22 27       	eor	r18, r18
    6ed4:	f9 01       	movw	r30, r18
    6ed6:	e8 0f       	add	r30, r24
    6ed8:	f1 1d       	adc	r31, r1
    6eda:	fc 83       	std	Y+4, r31	; 0x04
    6edc:	eb 83       	std	Y+3, r30	; 0x03
    6ede:	e1 2c       	mov	r14, r1
    6ee0:	f1 2c       	mov	r15, r1
    6ee2:	be 2c       	mov	r11, r14
    6ee4:	aa 24       	eor	r10, r10
    6ee6:	26 2c       	mov	r2, r6
    6ee8:	45 2c       	mov	r4, r5
    6eea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    6eec:	84 2c       	mov	r8, r4
    6eee:	91 2c       	mov	r9, r1
    6ef0:	84 2d       	mov	r24, r4
    6ef2:	20 91 9e 0c 	lds	r18, 0x0C9E
    6ef6:	42 2f       	mov	r20, r18
    6ef8:	50 e0       	ldi	r21, 0x00	; 0
    6efa:	44 0f       	add	r20, r20
    6efc:	55 1f       	adc	r21, r21
    6efe:	84 16       	cp	r8, r20
    6f00:	95 06       	cpc	r9, r21
    6f02:	14 f0       	brlt	.+4      	; 0x6f08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    6f04:	22 0f       	add	r18, r18
    6f06:	03 c0       	rjmp	.+6      	; 0x6f0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    6f08:	42 16       	cp	r4, r18
    6f0a:	10 f0       	brcs	.+4      	; 0x6f10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    6f0c:	84 2d       	mov	r24, r4
    6f0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    6f10:	ff e1       	ldi	r31, 0x1F	; 31
    6f12:	f2 15       	cp	r31, r2
    6f14:	18 f4       	brcc	.+6      	; 0x6f1c <ProcessSprites+0xf0>
    6f16:	00 ee       	ldi	r16, 0xE0	; 224
    6f18:	02 0d       	add	r16, r2
    6f1a:	01 c0       	rjmp	.+2      	; 0x6f1e <ProcessSprites+0xf2>
    6f1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    6f1e:	28 2f       	mov	r18, r24
    6f20:	26 95       	lsr	r18
    6f22:	26 95       	lsr	r18
    6f24:	26 95       	lsr	r18
    6f26:	10 e0       	ldi	r17, 0x00	; 0
    6f28:	40 e2       	ldi	r20, 0x20	; 32
    6f2a:	24 9f       	mul	r18, r20
    6f2c:	00 0d       	add	r16, r0
    6f2e:	11 1d       	adc	r17, r1
    6f30:	11 24       	eor	r1, r1
    6f32:	23 e0       	ldi	r18, 0x03	; 3
    6f34:	00 0f       	add	r16, r16
    6f36:	11 1f       	adc	r17, r17
    6f38:	2a 95       	dec	r18
    6f3a:	e1 f7       	brne	.-8      	; 0x6f34 <ProcessSprites+0x108>
    6f3c:	87 70       	andi	r24, 0x07	; 7
    6f3e:	08 0f       	add	r16, r24
    6f40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    6f42:	00 50       	subi	r16, 0x00	; 0
    6f44:	1f 4f       	sbci	r17, 0xFF	; 255
    6f46:	f8 01       	movw	r30, r16
    6f48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    6f4a:	81 e0       	ldi	r24, 0x01	; 1
    6f4c:	7c 31       	cpi	r23, 0x1C	; 28
    6f4e:	08 f4       	brcc	.+2      	; 0x6f52 <ProcessSprites+0x126>
    6f50:	80 e0       	ldi	r24, 0x00	; 0
    6f52:	21 e0       	ldi	r18, 0x01	; 1
    6f54:	30 91 db 0c 	lds	r19, 0x0CDB
    6f58:	73 17       	cp	r23, r19
    6f5a:	18 f0       	brcs	.+6      	; 0x6f62 <ProcessSprites+0x136>
    6f5c:	20 e0       	ldi	r18, 0x00	; 0
    6f5e:	88 23       	and	r24, r24
    6f60:	51 f1       	breq	.+84     	; 0x6fb6 <ProcessSprites+0x18a>
    6f62:	60 91 6a 0d 	lds	r22, 0x0D6A
    6f66:	6c 31       	cpi	r22, 0x1C	; 28
    6f68:	20 f5       	brcc	.+72     	; 0x6fb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    6f6a:	88 23       	and	r24, r24
    6f6c:	31 f0       	breq	.+12     	; 0x6f7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    6f6e:	84 ee       	ldi	r24, 0xE4	; 228
    6f70:	87 0f       	add	r24, r23
    6f72:	7a 83       	std	Y+2, r23	; 0x02
    6f74:	0e 94 01 28 	call	0x5002	; 0x5002 <CopyFlashTile>
    6f78:	06 c0       	rjmp	.+12     	; 0x6f86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    6f7a:	22 23       	and	r18, r18
    6f7c:	29 f0       	breq	.+10     	; 0x6f88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    6f7e:	87 2f       	mov	r24, r23
    6f80:	7a 83       	std	Y+2, r23	; 0x02
    6f82:	0e 94 90 28 	call	0x5120	; 0x5120 <CopyRamTile>
    6f86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    6f88:	80 91 6a 0d 	lds	r24, 0x0D6A
    6f8c:	e8 2f       	mov	r30, r24
    6f8e:	f0 e0       	ldi	r31, 0x00	; 0
    6f90:	9f 01       	movw	r18, r30
    6f92:	22 0f       	add	r18, r18
    6f94:	33 1f       	adc	r19, r19
    6f96:	e2 0f       	add	r30, r18
    6f98:	f3 1f       	adc	r31, r19
    6f9a:	e6 5c       	subi	r30, 0xC6	; 198
    6f9c:	f3 4f       	sbci	r31, 0xF3	; 243
    6f9e:	11 83       	std	Z+1, r17	; 0x01
    6fa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    6fa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    6fa4:	f8 01       	movw	r30, r16
    6fa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    6fa8:	21 e0       	ldi	r18, 0x01	; 1
    6faa:	28 0f       	add	r18, r24
    6fac:	20 93 6a 0d 	sts	0x0D6A, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    6fb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    6fb2:	7c 31       	cpi	r23, 0x1C	; 28
    6fb4:	38 f4       	brcc	.+14     	; 0x6fc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    6fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    6fba:	a5 01       	movw	r20, r10
    6fbc:	67 2f       	mov	r22, r23
    6fbe:	87 2d       	mov	r24, r7
    6fc0:	0e 94 1d 29 	call	0x523a	; 0x523a <BlitSprite>
    6fc4:	ff ef       	ldi	r31, 0xFF	; 255
    6fc6:	af 1a       	sub	r10, r31
    6fc8:	bf 0a       	sbc	r11, r31
    6fca:	23 94       	inc	r2
    6fcc:	82 2d       	mov	r24, r2
    6fce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    6fd0:	99 81       	ldd	r25, Y+1	; 0x01
    6fd2:	89 17       	cp	r24, r25
    6fd4:	08 f4       	brcc	.+2      	; 0x6fd8 <ProcessSprites+0x1ac>
    6fd6:	8c cf       	rjmp	.-232    	; 0x6ef0 <ProcessSprites+0xc4>
    6fd8:	ef ef       	ldi	r30, 0xFF	; 255
    6fda:	ee 1a       	sub	r14, r30
    6fdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    6fde:	e3 14       	cp	r14, r3
    6fe0:	08 f4       	brcc	.+2      	; 0x6fe4 <ProcessSprites+0x1b8>
    6fe2:	7f cf       	rjmp	.-258    	; 0x6ee2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    6fe4:	73 94       	inc	r7
    6fe6:	f4 e0       	ldi	r31, 0x04	; 4
    6fe8:	cf 0e       	add	r12, r31
    6fea:	d1 1c       	adc	r13, r1
    6fec:	4e e0       	ldi	r20, 0x0E	; 14
    6fee:	74 12       	cpse	r7, r20
    6ff0:	43 cf       	rjmp	.-378    	; 0x6e78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    6ff2:	0f 90       	pop	r0
    6ff4:	0f 90       	pop	r0
    6ff6:	0f 90       	pop	r0
    6ff8:	0f 90       	pop	r0
    6ffa:	df 91       	pop	r29
    6ffc:	cf 91       	pop	r28
    6ffe:	1f 91       	pop	r17
    7000:	0f 91       	pop	r16
    7002:	ff 90       	pop	r15
    7004:	ef 90       	pop	r14
    7006:	df 90       	pop	r13
    7008:	cf 90       	pop	r12
    700a:	bf 90       	pop	r11
    700c:	af 90       	pop	r10
    700e:	9f 90       	pop	r9
    7010:	8f 90       	pop	r8
    7012:	7f 90       	pop	r7
    7014:	6f 90       	pop	r6
    7016:	5f 90       	pop	r5
    7018:	4f 90       	pop	r4
    701a:	3f 90       	pop	r3
    701c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    701e:	0c 94 00 37 	jmp	0x6e00	; 0x6e00 <RestoreBackground>

	}
    7022:	0f 90       	pop	r0
    7024:	0f 90       	pop	r0
    7026:	0f 90       	pop	r0
    7028:	0f 90       	pop	r0
    702a:	df 91       	pop	r29
    702c:	cf 91       	pop	r28
    702e:	1f 91       	pop	r17
    7030:	0f 91       	pop	r16
    7032:	ff 90       	pop	r15
    7034:	ef 90       	pop	r14
    7036:	df 90       	pop	r13
    7038:	cf 90       	pop	r12
    703a:	bf 90       	pop	r11
    703c:	af 90       	pop	r10
    703e:	9f 90       	pop	r9
    7040:	8f 90       	pop	r8
    7042:	7f 90       	pop	r7
    7044:	6f 90       	pop	r6
    7046:	5f 90       	pop	r5
    7048:	4f 90       	pop	r4
    704a:	3f 90       	pop	r3
    704c:	2f 90       	pop	r2
    704e:	08 95       	ret

00007050 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    7050:	90 91 9d 0c 	lds	r25, 0x0C9D
    7054:	96 0f       	add	r25, r22
    7056:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    705a:	20 91 9c 0c 	lds	r18, 0x0C9C
    705e:	82 0f       	add	r24, r18
    7060:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    7064:	80 91 9e 0c 	lds	r24, 0x0C9E
    7068:	80 32       	cpi	r24, 0x20	; 32
    706a:	b0 f4       	brcc	.+44     	; 0x7098 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    706c:	29 2f       	mov	r18, r25
    706e:	30 e0       	ldi	r19, 0x00	; 0
    7070:	78 e0       	ldi	r23, 0x08	; 8
    7072:	87 9f       	mul	r24, r23
    7074:	a0 01       	movw	r20, r0
    7076:	11 24       	eor	r1, r1
    7078:	24 17       	cp	r18, r20
    707a:	35 07       	cpc	r19, r21
    707c:	6c f0       	brlt	.+26     	; 0x7098 <Scroll+0x48>
				if(dy>=0){	
    707e:	67 fd       	sbrc	r22, 7
    7080:	05 c0       	rjmp	.+10     	; 0x708c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    7082:	28 ef       	ldi	r18, 0xF8	; 248
    7084:	82 9f       	mul	r24, r18
    7086:	90 0d       	add	r25, r0
    7088:	11 24       	eor	r1, r1
    708a:	04 c0       	rjmp	.+8      	; 0x7094 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    708c:	78 e0       	ldi	r23, 0x08	; 8
    708e:	87 9f       	mul	r24, r23
    7090:	90 0d       	add	r25, r0
    7092:	11 24       	eor	r1, r1
    7094:	90 93 9d 0c 	sts	0x0C9D, r25
    7098:	08 95       	ret

0000709a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    709a:	e2 e0       	ldi	r30, 0x02	; 2
    709c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    709e:	80 ee       	ldi	r24, 0xE0	; 224
    70a0:	80 83       	st	Z, r24
    70a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    70a4:	95 e0       	ldi	r25, 0x05	; 5
    70a6:	ea 33       	cpi	r30, 0x3A	; 58
    70a8:	f9 07       	cpc	r31, r25
    70aa:	d1 f7       	brne	.-12     	; 0x70a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    70ac:	80 e2       	ldi	r24, 0x20	; 32
    70ae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    70b2:	10 92 99 0c 	sts	0x0C99, r1
    70b6:	08 95       	ret

000070b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    70b8:	4f 92       	push	r4
    70ba:	5f 92       	push	r5
    70bc:	6f 92       	push	r6
    70be:	7f 92       	push	r7
    70c0:	8f 92       	push	r8
    70c2:	9f 92       	push	r9
    70c4:	af 92       	push	r10
    70c6:	bf 92       	push	r11
    70c8:	cf 92       	push	r12
    70ca:	df 92       	push	r13
    70cc:	ef 92       	push	r14
    70ce:	ff 92       	push	r15
    70d0:	0f 93       	push	r16
    70d2:	1f 93       	push	r17
    70d4:	cf 93       	push	r28
    70d6:	df 93       	push	r29
    70d8:	68 2e       	mov	r6, r24
    70da:	56 2e       	mov	r5, r22
    70dc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    70de:	fa 01       	movw	r30, r20
    70e0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    70e2:	31 96       	adiw	r30, 0x01	; 1
    70e4:	84 90       	lpm	r8, Z
    70e6:	c7 2c       	mov	r12, r7
    70e8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    70ea:	00 e0       	ldi	r16, 0x00	; 0
    70ec:	10 e0       	ldi	r17, 0x00	; 0
    70ee:	91 2c       	mov	r9, r1
    70f0:	98 14       	cp	r9, r8
    70f2:	f1 f0       	breq	.+60     	; 0x7130 <DrawMap+0x78>
    70f4:	c0 e0       	ldi	r28, 0x00	; 0
    70f6:	d0 e0       	ldi	r29, 0x00	; 0
    70f8:	58 01       	movw	r10, r16
    70fa:	f2 e0       	ldi	r31, 0x02	; 2
    70fc:	af 0e       	add	r10, r31
    70fe:	b1 1c       	adc	r11, r1
    7100:	49 2c       	mov	r4, r9
    7102:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    7104:	c7 15       	cp	r28, r7
    7106:	80 f4       	brcc	.+32     	; 0x7128 <DrawMap+0x70>
    7108:	95 01       	movw	r18, r10
    710a:	2c 0f       	add	r18, r28
    710c:	3d 1f       	adc	r19, r29
    710e:	f7 01       	movw	r30, r14
    7110:	e2 0f       	add	r30, r18
    7112:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7114:	24 91       	lpm	r18, Z
    7116:	42 2f       	mov	r20, r18
    7118:	50 e0       	ldi	r21, 0x00	; 0
    711a:	64 2d       	mov	r22, r4
    711c:	8c 2f       	mov	r24, r28
    711e:	86 0d       	add	r24, r6
    7120:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <SetTile>
    7124:	21 96       	adiw	r28, 0x01	; 1
    7126:	ee cf       	rjmp	.-36     	; 0x7104 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7128:	93 94       	inc	r9
    712a:	0c 0d       	add	r16, r12
    712c:	1d 1d       	adc	r17, r13
    712e:	e0 cf       	rjmp	.-64     	; 0x70f0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    7130:	df 91       	pop	r29
    7132:	cf 91       	pop	r28
    7134:	1f 91       	pop	r17
    7136:	0f 91       	pop	r16
    7138:	ff 90       	pop	r15
    713a:	ef 90       	pop	r14
    713c:	df 90       	pop	r13
    713e:	cf 90       	pop	r12
    7140:	bf 90       	pop	r11
    7142:	af 90       	pop	r10
    7144:	9f 90       	pop	r9
    7146:	8f 90       	pop	r8
    7148:	7f 90       	pop	r7
    714a:	6f 90       	pop	r6
    714c:	5f 90       	pop	r5
    714e:	4f 90       	pop	r4
    7150:	08 95       	ret

00007152 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    7152:	0f 93       	push	r16
    7154:	1f 93       	push	r17
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
    715a:	06 2f       	mov	r16, r22
    715c:	c4 2f       	mov	r28, r20
    715e:	d5 2f       	mov	r29, r21
    7160:	18 2f       	mov	r17, r24
    7162:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    7164:	fe 01       	movw	r30, r28
    7166:	44 91       	lpm	r20, Z
		if(c!=0){
    7168:	44 23       	and	r20, r20
    716a:	49 f0       	breq	.+18     	; 0x717e <Print+0x2c>
			c=((c&127)-32);			
    716c:	4f 77       	andi	r20, 0x7F	; 127
    716e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    7170:	60 2f       	mov	r22, r16
    7172:	8c 2f       	mov	r24, r28
    7174:	81 0f       	add	r24, r17
    7176:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <SetFont>
    717a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    717c:	f3 cf       	rjmp	.-26     	; 0x7164 <Print+0x12>
	
}
    717e:	df 91       	pop	r29
    7180:	cf 91       	pop	r28
    7182:	1f 91       	pop	r17
    7184:	0f 91       	pop	r16
    7186:	08 95       	ret

00007188 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    7188:	0f 93       	push	r16
    718a:	1f 93       	push	r17
    718c:	cf 93       	push	r28
    718e:	df 93       	push	r29
    7190:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7192:	c0 e0       	ldi	r28, 0x00	; 0
    7194:	d0 e0       	ldi	r29, 0x00	; 0
    7196:	c0 17       	cp	r28, r16
    7198:	d1 07       	cpc	r29, r17
    719a:	44 f4       	brge	.+16     	; 0x71ac <WaitVsync+0x24>
		while(!GetVsyncFlag());
    719c:	0e 94 6d 2b 	call	0x56da	; 0x56da <GetVsyncFlag>
    71a0:	88 23       	and	r24, r24
    71a2:	e1 f3       	breq	.-8      	; 0x719c <WaitVsync+0x14>
		ClearVsyncFlag();		
    71a4:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    71a8:	21 96       	adiw	r28, 0x01	; 1
    71aa:	f5 cf       	rjmp	.-22     	; 0x7196 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    71ac:	df 91       	pop	r29
    71ae:	cf 91       	pop	r28
    71b0:	1f 91       	pop	r17
    71b2:	0f 91       	pop	r16
    71b4:	08 95       	ret

000071b6 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    71b6:	8d e1       	ldi	r24, 0x1D	; 29
    71b8:	99 e0       	ldi	r25, 0x09	; 9
    71ba:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <InitMusicPlayer>
			SetTileTable(logo_tileset);
    71be:	8d e1       	ldi	r24, 0x1D	; 29
    71c0:	91 e0       	ldi	r25, 0x01	; 1
    71c2:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <SetTileTable>
			
			//draw logo
			ClearVram();
    71c6:	0e 94 46 2b 	call	0x568c	; 0x568c <ClearVram>
			WaitVsync(15);		
    71ca:	8f e0       	ldi	r24, 0x0F	; 15
    71cc:	90 e0       	ldi	r25, 0x00	; 0
    71ce:	0e 94 c4 38 	call	0x7188	; 0x7188 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    71d2:	41 e0       	ldi	r20, 0x01	; 1
    71d4:	6f ef       	ldi	r22, 0xFF	; 255
    71d6:	80 e0       	ldi	r24, 0x00	; 0
    71d8:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    71dc:	47 e0       	ldi	r20, 0x07	; 7
    71de:	51 e0       	ldi	r21, 0x01	; 1
    71e0:	6c e0       	ldi	r22, 0x0C	; 12
    71e2:	8c e0       	ldi	r24, 0x0C	; 12
    71e4:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <DrawMap>
			WaitVsync(3);
    71e8:	83 e0       	ldi	r24, 0x03	; 3
    71ea:	90 e0       	ldi	r25, 0x00	; 0
    71ec:	0e 94 c4 38 	call	0x7188	; 0x7188 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    71f0:	46 ef       	ldi	r20, 0xF6	; 246
    71f2:	50 e0       	ldi	r21, 0x00	; 0
    71f4:	6c e0       	ldi	r22, 0x0C	; 12
    71f6:	8c e0       	ldi	r24, 0x0C	; 12
    71f8:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <DrawMap>
			WaitVsync(2);
    71fc:	82 e0       	ldi	r24, 0x02	; 2
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	0e 94 c4 38 	call	0x7188	; 0x7188 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    7204:	47 e0       	ldi	r20, 0x07	; 7
    7206:	51 e0       	ldi	r21, 0x01	; 1
    7208:	6c e0       	ldi	r22, 0x0C	; 12
    720a:	8c e0       	ldi	r24, 0x0C	; 12
    720c:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    7210:	81 e4       	ldi	r24, 0x41	; 65
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	0e 94 c4 38 	call	0x7188	; 0x7188 <WaitVsync>
			ClearVram();
    7218:	0e 94 46 2b 	call	0x568c	; 0x568c <ClearVram>
			WaitVsync(20);
    721c:	84 e1       	ldi	r24, 0x14	; 20
    721e:	90 e0       	ldi	r25, 0x00	; 0
    7220:	0c 94 c4 38 	jmp	0x7188	; 0x7188 <WaitVsync>

00007224 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    7224:	80 93 68 0d 	sts	0x0D68, r24
	currFadeFrame=0;
    7228:	10 92 6c 0d 	sts	0x0D6C, r1
	fadeActive=true;
    722c:	81 e0       	ldi	r24, 0x01	; 1
    722e:	80 93 6b 0d 	sts	0x0D6B, r24
		
	if(blocking){
    7232:	66 23       	and	r22, r22
    7234:	21 f0       	breq	.+8      	; 0x723e <doFade+0x1a>
		while(fadeActive==true);
    7236:	80 91 6b 0d 	lds	r24, 0x0D6B
    723a:	81 11       	cpse	r24, r1
    723c:	fc cf       	rjmp	.-8      	; 0x7236 <doFade+0x12>
    723e:	08 95       	ret

00007240 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    7240:	81 11       	cpse	r24, r1
    7242:	03 c0       	rjmp	.+6      	; 0x724a <FadeIn+0xa>
		DDRC=0xff;
    7244:	8f ef       	ldi	r24, 0xFF	; 255
    7246:	87 b9       	out	0x07, r24	; 7
		return;
    7248:	08 95       	ret
	}
	fadeStep=1;
    724a:	91 e0       	ldi	r25, 0x01	; 1
    724c:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=1;
    7250:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    7254:	0c 94 12 39 	jmp	0x7224	; 0x7224 <doFade>

00007258 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    7258:	81 11       	cpse	r24, r1
    725a:	02 c0       	rjmp	.+4      	; 0x7260 <FadeOut+0x8>
		DDRC=0;
    725c:	17 b8       	out	0x07, r1	; 7
		return;
    725e:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    7260:	9c e0       	ldi	r25, 0x0C	; 12
    7262:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=-1;
    7266:	9f ef       	ldi	r25, 0xFF	; 255
    7268:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    726c:	0c 94 12 39 	jmp	0x7224	; 0x7224 <doFade>

00007270 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    7270:	80 91 6b 0d 	lds	r24, 0x0D6B
    7274:	88 23       	and	r24, r24
    7276:	01 f1       	breq	.+64     	; 0x72b8 <ProcessFading+0x48>
		if(currFadeFrame==0){
    7278:	80 91 6c 0d 	lds	r24, 0x0D6C
    727c:	81 11       	cpse	r24, r1
    727e:	19 c0       	rjmp	.+50     	; 0x72b2 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    7280:	80 91 68 0d 	lds	r24, 0x0D68
    7284:	80 93 6c 0d 	sts	0x0D6C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    7288:	e0 91 6d 0d 	lds	r30, 0x0D6D
    728c:	f0 e0       	ldi	r31, 0x00	; 0
    728e:	e7 51       	subi	r30, 0x17	; 23
    7290:	ff 4f       	sbci	r31, 0xFF	; 255
    7292:	e4 91       	lpm	r30, Z
    7294:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    7296:	90 91 69 0d 	lds	r25, 0x0D69
    729a:	80 91 6d 0d 	lds	r24, 0x0D6D
    729e:	89 0f       	add	r24, r25
    72a0:	80 93 6d 0d 	sts	0x0D6D, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    72a4:	88 23       	and	r24, r24
    72a6:	11 f0       	breq	.+4      	; 0x72ac <ProcessFading+0x3c>
    72a8:	8d 30       	cpi	r24, 0x0D	; 13
    72aa:	31 f4       	brne	.+12     	; 0x72b8 <ProcessFading+0x48>
				fadeActive=false;
    72ac:	10 92 6b 0d 	sts	0x0D6B, r1
    72b0:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    72b2:	81 50       	subi	r24, 0x01	; 1
    72b4:	80 93 6c 0d 	sts	0x0D6C, r24
    72b8:	08 95       	ret

000072ba <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    72ba:	0e 94 38 39 	call	0x7270	; 0x7270 <ProcessFading>
		ProcessSprites();
    72be:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <ProcessSprites>

000072c2 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    72c2:	fc 01       	movw	r30, r24
	anim->looped = 0;
    72c4:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    72c6:	93 81       	ldd	r25, Z+3	; 0x03
    72c8:	9f 5f       	subi	r25, 0xFF	; 255
    72ca:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    72cc:	42 81       	ldd	r20, Z+2	; 0x02
    72ce:	80 81       	ld	r24, Z
    72d0:	26 81       	ldd	r18, Z+6	; 0x06
    72d2:	37 81       	ldd	r19, Z+7	; 0x07
    72d4:	94 17       	cp	r25, r20
    72d6:	30 f4       	brcc	.+12     	; 0x72e4 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    72d8:	f9 01       	movw	r30, r18
    72da:	e8 0f       	add	r30, r24
    72dc:	f1 1d       	adc	r31, r1
    72de:	e8 0f       	add	r30, r24
    72e0:	f1 1d       	adc	r31, r1
    72e2:	12 c0       	rjmp	.+36     	; 0x7308 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    72e4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    72e6:	90 e0       	ldi	r25, 0x00	; 0
    72e8:	01 96       	adiw	r24, 0x01	; 1
    72ea:	61 81       	ldd	r22, Z+1	; 0x01
    72ec:	70 e0       	ldi	r23, 0x00	; 0
    72ee:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <__divmodhi4>
    72f2:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    72f4:	81 11       	cpse	r24, r1
    72f6:	02 c0       	rjmp	.+4      	; 0x72fc <LBGetNextFrame+0x3a>
    72f8:	41 e0       	ldi	r20, 0x01	; 1
    72fa:	44 83       	std	Z+4, r20	; 0x04
    72fc:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    72fe:	88 0f       	add	r24, r24
    7300:	99 1f       	adc	r25, r25
    7302:	f9 01       	movw	r30, r18
    7304:	e8 0f       	add	r30, r24
    7306:	f9 1f       	adc	r31, r25
    7308:	80 81       	ld	r24, Z
    730a:	91 81       	ldd	r25, Z+1	; 0x01
}
    730c:	08 95       	ret

0000730e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    730e:	0f 93       	push	r16
    7310:	1f 93       	push	r17
    7312:	cf 93       	push	r28
    7314:	df 93       	push	r29
    7316:	1f 92       	push	r1
    7318:	cd b7       	in	r28, 0x3d	; 61
    731a:	de b7       	in	r29, 0x3e	; 62
    731c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    731e:	86 2f       	mov	r24, r22
    7320:	69 83       	std	Y+1, r22	; 0x01
    7322:	0e 94 77 2b 	call	0x56ee	; 0x56ee <ReadJoypad>
    7326:	d8 01       	movw	r26, r16
    7328:	15 96       	adiw	r26, 0x05	; 5
    732a:	9c 93       	st	X, r25
    732c:	8e 93       	st	-X, r24
    732e:	14 97       	sbiw	r26, 0x04	; 4
    7330:	69 81       	ldd	r22, Y+1	; 0x01
    7332:	e6 2f       	mov	r30, r22
    7334:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    7336:	00 97       	sbiw	r24, 0x00	; 0
    7338:	51 f0       	breq	.+20     	; 0x734e <LBGetJoyPadState+0x40>
    733a:	df 01       	movw	r26, r30
    733c:	aa 0f       	add	r26, r26
    733e:	bb 1f       	adc	r27, r27
    7340:	a0 52       	subi	r26, 0x20	; 32
    7342:	b3 4f       	sbci	r27, 0xF3	; 243
    7344:	2d 91       	ld	r18, X+
    7346:	3c 91       	ld	r19, X
    7348:	82 17       	cp	r24, r18
    734a:	93 07       	cpc	r25, r19
    734c:	21 f0       	breq	.+8      	; 0x7356 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    734e:	d8 01       	movw	r26, r16
    7350:	16 96       	adiw	r26, 0x06	; 6
    7352:	1c 92       	st	X, r1
    7354:	07 c0       	rjmp	.+14     	; 0x7364 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    7356:	d8 01       	movw	r26, r16
    7358:	16 96       	adiw	r26, 0x06	; 6
    735a:	2c 91       	ld	r18, X
    735c:	16 97       	sbiw	r26, 0x06	; 6
    735e:	2f 5f       	subi	r18, 0xFF	; 255
    7360:	16 96       	adiw	r26, 0x06	; 6
    7362:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    7364:	ee 0f       	add	r30, r30
    7366:	ff 1f       	adc	r31, r31
    7368:	e0 52       	subi	r30, 0x20	; 32
    736a:	f3 4f       	sbci	r31, 0xF3	; 243
    736c:	20 81       	ld	r18, Z
    736e:	31 81       	ldd	r19, Z+1	; 0x01
    7370:	a9 01       	movw	r20, r18
    7372:	40 95       	com	r20
    7374:	50 95       	com	r21
    7376:	48 23       	and	r20, r24
    7378:	59 23       	and	r21, r25
    737a:	d8 01       	movw	r26, r16
    737c:	11 96       	adiw	r26, 0x01	; 1
    737e:	5c 93       	st	X, r21
    7380:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    7382:	ac 01       	movw	r20, r24
    7384:	40 95       	com	r20
    7386:	50 95       	com	r21
    7388:	24 23       	and	r18, r20
    738a:	35 23       	and	r19, r21
    738c:	13 96       	adiw	r26, 0x03	; 3
    738e:	3c 93       	st	X, r19
    7390:	2e 93       	st	-X, r18
    7392:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    7394:	91 83       	std	Z+1, r25	; 0x01
    7396:	80 83       	st	Z, r24
}
    7398:	0f 90       	pop	r0
    739a:	df 91       	pop	r29
    739c:	cf 91       	pop	r28
    739e:	1f 91       	pop	r17
    73a0:	0f 91       	pop	r16
    73a2:	08 95       	ret

000073a4 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    73a4:	cf 93       	push	r28
    73a6:	df 93       	push	r29
    73a8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    73aa:	c0 e0       	ldi	r28, 0x00	; 0
    73ac:	cd 17       	cp	r28, r29
    73ae:	31 f0       	breq	.+12     	; 0x73bc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    73b0:	8f ef       	ldi	r24, 0xFF	; 255
    73b2:	9f ef       	ldi	r25, 0xFF	; 255
    73b4:	0e 94 83 2b 	call	0x5706	; 0x5706 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    73b8:	cf 5f       	subi	r28, 0xFF	; 255
    73ba:	f8 cf       	rjmp	.-16     	; 0x73ac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    73bc:	df 91       	pop	r29
    73be:	cf 91       	pop	r28
    73c0:	08 95       	ret

000073c2 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    73c2:	df 92       	push	r13
    73c4:	ef 92       	push	r14
    73c6:	ff 92       	push	r15
    73c8:	0f 93       	push	r16
    73ca:	1f 93       	push	r17
    73cc:	cf 93       	push	r28
    73ce:	df 93       	push	r29
    73d0:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    73d2:	fb 01       	movw	r30, r22
    73d4:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    73d6:	31 96       	adiw	r30, 0x01	; 1
    73d8:	64 91       	lpm	r22, Z
    73da:	5f ef       	ldi	r21, 0xFF	; 255
    73dc:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    73de:	24 2f       	mov	r18, r20
    73e0:	21 70       	andi	r18, 0x01	; 1
    73e2:	40 ff       	sbrs	r20, 0
    73e4:	04 c0       	rjmp	.+8      	; 0x73ee <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    73e6:	95 2f       	mov	r25, r21
		dx=-1;
    73e8:	ff 24       	eor	r15, r15
    73ea:	fa 94       	dec	r15
    73ec:	03 c0       	rjmp	.+6      	; 0x73f4 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    73ee:	ff 24       	eor	r15, r15
    73f0:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    73f2:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    73f4:	41 ff       	sbrs	r20, 1
    73f6:	05 c0       	rjmp	.+10     	; 0x7402 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    73f8:	7f ef       	ldi	r23, 0xFF	; 255
    73fa:	76 0f       	add	r23, r22
		dy=-1;
    73fc:	ee 24       	eor	r14, r14
    73fe:	ea 94       	dec	r14
    7400:	03 c0       	rjmp	.+6      	; 0x7408 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    7402:	ee 24       	eor	r14, r14
    7404:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    7406:	70 e0       	ldi	r23, 0x00	; 0
    7408:	21 11       	cpse	r18, r1
    740a:	01 c0       	rjmp	.+2      	; 0x740e <LBMapSprite+0x4c>
    740c:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    740e:	00 e0       	ldi	r16, 0x00	; 0
    7410:	06 17       	cp	r16, r22
    7412:	09 f1       	breq	.+66     	; 0x7456 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7414:	71 03       	mulsu	r23, r17
    7416:	e0 01       	movw	r28, r0
    7418:	11 24       	eor	r1, r1
    741a:	d8 2e       	mov	r13, r24
    741c:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    741e:	8d 15       	cp	r24, r13
    7420:	b1 f0       	breq	.+44     	; 0x744e <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7422:	9e 01       	movw	r18, r28
    7424:	29 0f       	add	r18, r25
    7426:	31 1d       	adc	r19, r1
    7428:	97 fd       	sbrc	r25, 7
    742a:	3a 95       	dec	r19
    742c:	2e 5f       	subi	r18, 0xFE	; 254
    742e:	3f 4f       	sbci	r19, 0xFF	; 255
    7430:	fd 01       	movw	r30, r26
    7432:	e2 0f       	add	r30, r18
    7434:	f3 1f       	adc	r31, r19
    7436:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    7438:	34 e0       	ldi	r19, 0x04	; 4
    743a:	83 9f       	mul	r24, r19
    743c:	f0 01       	movw	r30, r0
    743e:	11 24       	eor	r1, r1
    7440:	ea 5a       	subi	r30, 0xAA	; 170
    7442:	f1 4f       	sbci	r31, 0xF1	; 241
    7444:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    7446:	8f 5f       	subi	r24, 0xFF	; 255
    7448:	43 83       	std	Z+3, r20	; 0x03
    744a:	9f 0d       	add	r25, r15
    744c:	e8 cf       	rjmp	.-48     	; 0x741e <LBMapSprite+0x5c>
    744e:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    7450:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7452:	95 2f       	mov	r25, r21
    7454:	dd cf       	rjmp	.-70     	; 0x7410 <LBMapSprite+0x4e>
	}
}
    7456:	df 91       	pop	r29
    7458:	cf 91       	pop	r28
    745a:	1f 91       	pop	r17
    745c:	0f 91       	pop	r16
    745e:	ff 90       	pop	r15
    7460:	ef 90       	pop	r14
    7462:	df 90       	pop	r13
    7464:	08 95       	ret

00007466 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    7466:	df 92       	push	r13
    7468:	ef 92       	push	r14
    746a:	ff 92       	push	r15
    746c:	0f 93       	push	r16
    746e:	1f 93       	push	r17
    7470:	cf 93       	push	r28
    7472:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    7474:	a0 91 9e 0c 	lds	r26, 0x0C9E
    7478:	98 e0       	ldi	r25, 0x08	; 8
    747a:	a9 9f       	mul	r26, r25
    747c:	70 01       	movw	r14, r0
    747e:	11 24       	eor	r1, r1
    7480:	50 e0       	ldi	r21, 0x00	; 0
    7482:	38 ef       	ldi	r19, 0xF8	; 248
    7484:	a3 9f       	mul	r26, r19
    7486:	30 2d       	mov	r19, r0
    7488:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    748a:	70 e0       	ldi	r23, 0x00	; 0
    748c:	70 17       	cp	r23, r16
    748e:	09 f1       	breq	.+66     	; 0x74d2 <LBMoveSprite+0x6c>
    7490:	d4 2e       	mov	r13, r20
    7492:	13 2f       	mov	r17, r19
    7494:	14 0f       	add	r17, r20
    7496:	b8 2f       	mov	r27, r24
    7498:	b2 0f       	add	r27, r18
    749a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    749c:	8b 17       	cp	r24, r27
    749e:	a9 f0       	breq	.+42     	; 0x74ca <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    74a0:	c4 e0       	ldi	r28, 0x04	; 4
    74a2:	8c 9f       	mul	r24, r28
    74a4:	f0 01       	movw	r30, r0
    74a6:	11 24       	eor	r1, r1
    74a8:	ef 01       	movw	r28, r30
    74aa:	ca 5a       	subi	r28, 0xAA	; 170
    74ac:	d1 4f       	sbci	r29, 0xF1	; 241
    74ae:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    74b0:	a0 32       	cpi	r26, 0x20	; 32
    74b2:	28 f4       	brcc	.+10     	; 0x74be <LBMoveSprite+0x58>
    74b4:	e4 16       	cp	r14, r20
    74b6:	f5 06       	cpc	r15, r21
    74b8:	14 f4       	brge	.+4      	; 0x74be <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    74ba:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    74bc:	03 c0       	rjmp	.+6      	; 0x74c4 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    74be:	ea 5a       	subi	r30, 0xAA	; 170
    74c0:	f1 4f       	sbci	r31, 0xF1	; 241
    74c2:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    74c4:	8f 5f       	subi	r24, 0xFF	; 255
    74c6:	98 5f       	subi	r25, 0xF8	; 248
    74c8:	e9 cf       	rjmp	.-46     	; 0x749c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    74ca:	7f 5f       	subi	r23, 0xFF	; 255
    74cc:	48 5f       	subi	r20, 0xF8	; 248
    74ce:	5f 4f       	sbci	r21, 0xFF	; 255
    74d0:	dd cf       	rjmp	.-70     	; 0x748c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    74d2:	df 91       	pop	r29
    74d4:	cf 91       	pop	r28
    74d6:	1f 91       	pop	r17
    74d8:	0f 91       	pop	r16
    74da:	ff 90       	pop	r15
    74dc:	ef 90       	pop	r14
    74de:	df 90       	pop	r13
    74e0:	08 95       	ret

000074e2 <LBRotateSprites>:

void LBRotateSprites(u8 mappedSpriteCount)
{
    74e2:	cf 93       	push	r28
    74e4:	df 93       	push	r29
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    74e6:	90 91 dc 0c 	lds	r25, 0x0CDC
    74ea:	99 23       	and	r25, r25
    74ec:	e9 f1       	breq	.+122    	; 0x7568 <LBRotateSprites+0x86>
    74ee:	e5 e0       	ldi	r30, 0x05	; 5
    74f0:	f5 e0       	ldi	r31, 0x05	; 5
    74f2:	28 ec       	ldi	r18, 0xC8	; 200
    74f4:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    74f6:	88 23       	and	r24, r24
    74f8:	89 f1       	breq	.+98     	; 0x755c <LBRotateSprites+0x7a>
		{
			sprites[counter].flags = extendedSprites[--mappedSpriteCount].flags;
    74fa:	af ef       	ldi	r26, 0xFF	; 255
    74fc:	a8 0f       	add	r26, r24
    74fe:	34 e0       	ldi	r19, 0x04	; 4
    7500:	a3 9f       	mul	r26, r19
    7502:	d0 01       	movw	r26, r0
    7504:	11 24       	eor	r1, r1
    7506:	aa 5a       	subi	r26, 0xAA	; 170
    7508:	b1 4f       	sbci	r27, 0xF1	; 241
    750a:	13 96       	adiw	r26, 0x03	; 3
    750c:	3c 91       	ld	r19, X
    750e:	30 83       	st	Z, r19
    7510:	ef 01       	movw	r28, r30
    7512:	21 97       	sbiw	r28, 0x01	; 1
			sprites[counter].tileIndex = extendedSprites[--mappedSpriteCount].tileIndex;
    7514:	ae ef       	ldi	r26, 0xFE	; 254
    7516:	a8 0f       	add	r26, r24
    7518:	34 e0       	ldi	r19, 0x04	; 4
    751a:	a3 9f       	mul	r26, r19
    751c:	d0 01       	movw	r26, r0
    751e:	11 24       	eor	r1, r1
    7520:	aa 5a       	subi	r26, 0xAA	; 170
    7522:	b1 4f       	sbci	r27, 0xF1	; 241
    7524:	12 96       	adiw	r26, 0x02	; 2
    7526:	3c 91       	ld	r19, X
    7528:	38 83       	st	Y, r19
    752a:	22 97       	sbiw	r28, 0x02	; 2
			sprites[counter].x = extendedSprites[--mappedSpriteCount].x;
    752c:	ad ef       	ldi	r26, 0xFD	; 253
    752e:	a8 0f       	add	r26, r24
    7530:	34 e0       	ldi	r19, 0x04	; 4
    7532:	a3 9f       	mul	r26, r19
    7534:	d0 01       	movw	r26, r0
    7536:	11 24       	eor	r1, r1
    7538:	aa 5a       	subi	r26, 0xAA	; 170
    753a:	b1 4f       	sbci	r27, 0xF1	; 241
    753c:	3c 91       	ld	r19, X
    753e:	38 83       	st	Y, r19
			sprites[counter].y = extendedSprites[--mappedSpriteCount].y;
    7540:	84 50       	subi	r24, 0x04	; 4
    7542:	21 96       	adiw	r28, 0x01	; 1
    7544:	34 e0       	ldi	r19, 0x04	; 4
    7546:	83 9f       	mul	r24, r19
    7548:	d0 01       	movw	r26, r0
    754a:	11 24       	eor	r1, r1
    754c:	aa 5a       	subi	r26, 0xAA	; 170
    754e:	b1 4f       	sbci	r27, 0xF1	; 241
    7550:	11 96       	adiw	r26, 0x01	; 1
    7552:	3c 91       	ld	r19, X
    7554:	38 83       	st	Y, r19
    7556:	34 96       	adiw	r30, 0x04	; 4
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    7558:	82 13       	cpse	r24, r18
    755a:	cd cf       	rjmp	.-102    	; 0x74f6 <LBRotateSprites+0x14>
			sprites[counter].x = extendedSprites[counter].x;
			sprites[counter].y = extendedSprites[counter].y;
			counter++;
		}
	}
	swapped = swapped & 1;
    755c:	91 70       	andi	r25, 0x01	; 1
    755e:	90 93 dc 0c 	sts	0x0CDC, r25
}
    7562:	df 91       	pop	r29
    7564:	cf 91       	pop	r28
    7566:	08 95       	ret
    7568:	40 e0       	ldi	r20, 0x00	; 0
    756a:	50 e0       	ldi	r21, 0x00	; 0
    756c:	20 e0       	ldi	r18, 0x00	; 0
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    756e:	28 17       	cp	r18, r24
    7570:	a9 f3       	breq	.-22     	; 0x755c <LBRotateSprites+0x7a>
    7572:	da 01       	movw	r26, r20
    7574:	aa 5a       	subi	r26, 0xAA	; 170
    7576:	b1 4f       	sbci	r27, 0xF1	; 241
    7578:	fa 01       	movw	r30, r20
    757a:	ee 5f       	subi	r30, 0xFE	; 254
    757c:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			sprites[counter].flags = extendedSprites[counter].flags;
    757e:	13 96       	adiw	r26, 0x03	; 3
    7580:	3c 91       	ld	r19, X
    7582:	13 97       	sbiw	r26, 0x03	; 3
    7584:	33 83       	std	Z+3, r19	; 0x03
			sprites[counter].tileIndex = extendedSprites[counter].tileIndex;
    7586:	12 96       	adiw	r26, 0x02	; 2
    7588:	3c 91       	ld	r19, X
    758a:	12 97       	sbiw	r26, 0x02	; 2
    758c:	32 83       	std	Z+2, r19	; 0x02
			sprites[counter].x = extendedSprites[counter].x;
    758e:	3c 91       	ld	r19, X
    7590:	30 83       	st	Z, r19
			sprites[counter].y = extendedSprites[counter].y;
    7592:	11 96       	adiw	r26, 0x01	; 1
    7594:	3c 91       	ld	r19, X
    7596:	31 83       	std	Z+1, r19	; 0x01
			counter++;
    7598:	2f 5f       	subi	r18, 0xFF	; 255
    759a:	4c 5f       	subi	r20, 0xFC	; 252
    759c:	5f 4f       	sbci	r21, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    759e:	2e 30       	cpi	r18, 0x0E	; 14
    75a0:	31 f7       	brne	.-52     	; 0x756e <LBRotateSprites+0x8c>
    75a2:	dc cf       	rjmp	.-72     	; 0x755c <LBRotateSprites+0x7a>

000075a4 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    75a4:	fa 01       	movw	r30, r20
    75a6:	32 96       	adiw	r30, 0x02	; 2
    75a8:	44 91       	lpm	r20, Z
    75aa:	50 e0       	ldi	r21, 0x00	; 0
    75ac:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <SetTile>

000075b0 <init_game_state>:
char* run_anim[4];
char* shot_anim[1];

void init_game_state()
{
	game.camera_x = 0;
    75b0:	10 92 9d 0d 	sts	0x0D9D, r1
    75b4:	10 92 9c 0d 	sts	0x0D9C, r1
	game.camera_y = 0;
    75b8:	10 92 9f 0d 	sts	0x0D9F, r1
    75bc:	10 92 9e 0d 	sts	0x0D9E, r1
	game.current_level = 0;
    75c0:	10 92 91 0d 	sts	0x0D91, r1
	game.current_screen = 0;
    75c4:	10 92 90 0d 	sts	0x0D90, r1
	game.paused = 0;
    75c8:	10 92 92 0d 	sts	0x0D92, r1
	game.selection = 0;
    75cc:	10 92 93 0d 	sts	0x0D93, r1
	game.scroll_x = 0;
    75d0:	10 92 94 0d 	sts	0x0D94, r1
	game.scroll_y = 0;
    75d4:	10 92 95 0d 	sts	0x0D95, r1
	game.scroll_src_x=29;
    75d8:	8d e1       	ldi	r24, 0x1D	; 29
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	90 93 99 0d 	sts	0x0D99, r25
    75e0:	80 93 98 0d 	sts	0x0D98, r24
    game.scroll_dest_x=29;
    75e4:	80 93 96 0d 	sts	0x0D96, r24
	game.scroll_src_y=27;
    75e8:	8b e1       	ldi	r24, 0x1B	; 27
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	90 93 9b 0d 	sts	0x0D9B, r25
    75f0:	80 93 9a 0d 	sts	0x0D9A, r24
    game.scroll_dest_y=27;
    75f4:	80 93 97 0d 	sts	0x0D97, r24
	game.player.active_shots = 0;
    75f8:	10 92 b1 0d 	sts	0x0DB1, r1
	game.player.direction = D_RIGHT;
    75fc:	81 e0       	ldi	r24, 0x01	; 1
    75fe:	80 93 b4 0d 	sts	0x0DB4, r24
	game.player.flags = IDLE;
    7602:	98 e0       	ldi	r25, 0x08	; 8
    7604:	90 93 b2 0d 	sts	0x0DB2, r25
	game.player.grace_frame = 0;
    7608:	10 92 b3 0d 	sts	0x0DB3, r1
	game.player.shared.gravity = 0;
    760c:	10 92 b0 0d 	sts	0x0DB0, r1
	game.player.shared.vx = 0;
    7610:	10 92 a0 0d 	sts	0x0DA0, r1
    7614:	10 92 a1 0d 	sts	0x0DA1, r1
    7618:	10 92 a2 0d 	sts	0x0DA2, r1
    761c:	10 92 a3 0d 	sts	0x0DA3, r1
	game.player.shared.vy = 0;
    7620:	10 92 a4 0d 	sts	0x0DA4, r1
    7624:	10 92 a5 0d 	sts	0x0DA5, r1
    7628:	10 92 a6 0d 	sts	0x0DA6, r1
    762c:	10 92 a7 0d 	sts	0x0DA7, r1
	
	game.player.idle.anim_count = 1;
    7630:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.current_anim = 0;
    7634:	10 92 25 0e 	sts	0x0E25, r1
	game.player.idle.frame_count = 0;
    7638:	10 92 28 0e 	sts	0x0E28, r1
	game.player.idle.frames_per_anim = 1;
    763c:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.looped = 0;
    7640:	10 92 29 0e 	sts	0x0E29, r1
	game.player.idle.reversing = 0;
    7644:	10 92 2a 0e 	sts	0x0E2A, r1
	game.player.idle.anims = idle_anim;
    7648:	20 ed       	ldi	r18, 0xD0	; 208
    764a:	3e e0       	ldi	r19, 0x0E	; 14
    764c:	30 93 2c 0e 	sts	0x0E2C, r19
    7650:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    7654:	2d e6       	ldi	r18, 0x6D	; 109
    7656:	32 e3       	ldi	r19, 0x32	; 50
    7658:	30 93 d1 0e 	sts	0x0ED1, r19
    765c:	20 93 d0 0e 	sts	0x0ED0, r18
	
	game.player.jump.anim_count = 1;
    7660:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.current_anim = 0;
    7664:	10 92 35 0e 	sts	0x0E35, r1
	game.player.jump.frame_count = 0;
    7668:	10 92 38 0e 	sts	0x0E38, r1
	game.player.jump.frames_per_anim = 1;
    766c:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.looped = 0;
    7670:	10 92 39 0e 	sts	0x0E39, r1
	game.player.jump.reversing = 0;
    7674:	10 92 3a 0e 	sts	0x0E3A, r1
	game.player.jump.anims = jump_anim;
    7678:	2e e6       	ldi	r18, 0x6E	; 110
    767a:	3d e0       	ldi	r19, 0x0D	; 13
    767c:	30 93 3c 0e 	sts	0x0E3C, r19
    7680:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    7684:	25 e4       	ldi	r18, 0x45	; 69
    7686:	32 e3       	ldi	r19, 0x32	; 50
    7688:	30 93 6f 0d 	sts	0x0D6F, r19
    768c:	20 93 6e 0d 	sts	0x0D6E, r18
	
	game.player.prone.anim_count = 1;
    7690:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.current_anim = 0;
    7694:	10 92 3d 0e 	sts	0x0E3D, r1
	game.player.prone.frame_count = 0;
    7698:	10 92 40 0e 	sts	0x0E40, r1
	game.player.prone.frames_per_anim = 1;
    769c:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.looped = 0;
    76a0:	10 92 41 0e 	sts	0x0E41, r1
	game.player.prone.reversing = 0;
    76a4:	10 92 42 0e 	sts	0x0E42, r1
	game.player.prone.anims = prone_anim;
    76a8:	84 e5       	ldi	r24, 0x54	; 84
    76aa:	9e e0       	ldi	r25, 0x0E	; 14
    76ac:	90 93 44 0e 	sts	0x0E44, r25
    76b0:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    76b4:	80 e4       	ldi	r24, 0x40	; 64
    76b6:	92 e3       	ldi	r25, 0x32	; 50
    76b8:	90 93 55 0e 	sts	0x0E55, r25
    76bc:	80 93 54 0e 	sts	0x0E54, r24
	
	game.player.run.anim_count = 4;
    76c0:	84 e0       	ldi	r24, 0x04	; 4
    76c2:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.current_anim = 0;
    76c6:	10 92 2d 0e 	sts	0x0E2D, r1
	game.player.run.frame_count = 0;
    76ca:	10 92 30 0e 	sts	0x0E30, r1
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    76ce:	8c e0       	ldi	r24, 0x0C	; 12
    76d0:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.looped = 0;
    76d4:	10 92 31 0e 	sts	0x0E31, r1
	game.player.run.reversing = 0;
    76d8:	10 92 32 0e 	sts	0x0E32, r1
	game.player.run.anims = run_anim;
    76dc:	86 ec       	ldi	r24, 0xC6	; 198
    76de:	9e e0       	ldi	r25, 0x0E	; 14
    76e0:	90 93 34 0e 	sts	0x0E34, r25
    76e4:	80 93 33 0e 	sts	0x0E33, r24
	game.player.run.anims[0] = (char*) map_hero_step_0;
    76e8:	85 e6       	ldi	r24, 0x65	; 101
    76ea:	92 e3       	ldi	r25, 0x32	; 50
    76ec:	90 93 c7 0e 	sts	0x0EC7, r25
    76f0:	80 93 c6 0e 	sts	0x0EC6, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    76f4:	8d e5       	ldi	r24, 0x5D	; 93
    76f6:	92 e3       	ldi	r25, 0x32	; 50
    76f8:	90 93 c9 0e 	sts	0x0EC9, r25
    76fc:	80 93 c8 0e 	sts	0x0EC8, r24
	game.player.run.anims[2] = (char*) map_hero_step_2;
    7700:	85 e5       	ldi	r24, 0x55	; 85
    7702:	92 e3       	ldi	r25, 0x32	; 50
    7704:	90 93 cb 0e 	sts	0x0ECB, r25
    7708:	80 93 ca 0e 	sts	0x0ECA, r24
	game.player.run.anims[3] = (char*) map_hero_step_3;
    770c:	8d e4       	ldi	r24, 0x4D	; 77
    770e:	92 e3       	ldi	r25, 0x32	; 50
    7710:	90 93 cd 0e 	sts	0x0ECD, r25
    7714:	80 93 cc 0e 	sts	0x0ECC, r24
    7718:	ee ec       	ldi	r30, 0xCE	; 206
    771a:	fd e0       	ldi	r31, 0x0D	; 13
	{
		game.player.shot[i].shared.gravity = 0;
		game.player.shot[i].shared.vx = 0;
		game.player.shot[i].shared.vy = 0;
		game.player.shot[i].active = 0;
		game.player.shot[i].hit_count = 1;
    771c:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].anim.current_anim = 0;
		game.player.shot[i].anim.frame_count = 0;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.looped = 0;
		game.player.shot[i].anim.reversing = 0;
		game.player.shot[i].anim.anims = shot_anim;
    771e:	2e ec       	ldi	r18, 0xCE	; 206
    7720:	3e e0       	ldi	r19, 0x0E	; 14
    7722:	df 01       	movw	r26, r30
    7724:	19 97       	sbiw	r26, 0x09	; 9
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].shared.gravity = 0;
    7726:	1c 92       	st	X, r1
    7728:	50 97       	sbiw	r26, 0x10	; 16
		game.player.shot[i].shared.vx = 0;
    772a:	1d 92       	st	X+, r1
    772c:	1d 92       	st	X+, r1
    772e:	1d 92       	st	X+, r1
    7730:	1c 92       	st	X, r1
    7732:	13 97       	sbiw	r26, 0x03	; 3
    7734:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].shared.vy = 0;
    7736:	1d 92       	st	X+, r1
    7738:	1d 92       	st	X+, r1
    773a:	1d 92       	st	X+, r1
    773c:	1c 92       	st	X, r1
    773e:	13 97       	sbiw	r26, 0x03	; 3
    7740:	1f 96       	adiw	r26, 0x0f	; 15
		game.player.shot[i].active = 0;
    7742:	1c 92       	st	X, r1
    7744:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].hit_count = 1;
    7746:	8c 93       	st	X, r24
    7748:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    774a:	1c 92       	st	X, r1
    774c:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    774e:	8c 93       	st	X, r24
    7750:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].anim.current_anim = 0;
    7752:	1c 92       	st	X, r1
    7754:	13 96       	adiw	r26, 0x03	; 3
		game.player.shot[i].anim.frame_count = 0;
    7756:	1c 92       	st	X, r1
    7758:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].anim.frames_per_anim = 1;
    775a:	8c 93       	st	X, r24
    775c:	12 96       	adiw	r26, 0x02	; 2
		game.player.shot[i].anim.looped = 0;
    775e:	1c 92       	st	X, r1
		game.player.shot[i].anim.reversing = 0;
    7760:	10 82       	st	Z, r1
		game.player.shot[i].anim.anims = shot_anim;
    7762:	32 83       	std	Z+2, r19	; 0x02
    7764:	21 83       	std	Z+1, r18	; 0x01
    7766:	7c 96       	adiw	r30, 0x1c	; 28
	game.player.run.anims[0] = (char*) map_hero_step_0;
	game.player.run.anims[1] = (char*) map_hero_step_1;
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    7768:	9e e0       	ldi	r25, 0x0E	; 14
    776a:	ee 33       	cpi	r30, 0x3E	; 62
    776c:	f9 07       	cpc	r31, r25
    776e:	c9 f6       	brne	.-78     	; 0x7722 <init_game_state+0x172>
    7770:	89 e2       	ldi	r24, 0x29	; 41
    7772:	92 e3       	ldi	r25, 0x32	; 50
    7774:	90 93 cf 0e 	sts	0x0ECF, r25
    7778:	80 93 ce 0e 	sts	0x0ECE, r24
    777c:	08 95       	ret

0000777e <render_level_tile>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    777e:	0f 93       	push	r16
    7780:	1f 93       	push	r17
    7782:	e8 2f       	mov	r30, r24
    7784:	86 2f       	mov	r24, r22
    7786:	64 2f       	mov	r22, r20
	switch (level_tile)
    7788:	0e 2f       	mov	r16, r30
    778a:	10 e0       	ldi	r17, 0x00	; 0
    778c:	07 30       	cpi	r16, 0x07	; 7
    778e:	11 05       	cpc	r17, r1
    7790:	e8 f4       	brcc	.+58     	; 0x77cc <render_level_tile+0x4e>
    7792:	f8 01       	movw	r30, r16
    7794:	e8 5c       	subi	r30, 0xC8	; 200
    7796:	ff 4f       	sbci	r31, 0xFF	; 255
    7798:	0c 94 60 47 	jmp	0x8ec0	; 0x8ec0 <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    779c:	41 e6       	ldi	r20, 0x61	; 97
    779e:	5b e4       	ldi	r21, 0x4B	; 75
    77a0:	11 c0       	rjmp	.+34     	; 0x77c4 <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    77a2:	4d e6       	ldi	r20, 0x6D	; 109
    77a4:	5b e4       	ldi	r21, 0x4B	; 75
    77a6:	0e c0       	rjmp	.+28     	; 0x77c4 <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    77a8:	40 e7       	ldi	r20, 0x70	; 112
    77aa:	5b e4       	ldi	r21, 0x4B	; 75
    77ac:	0b c0       	rjmp	.+22     	; 0x77c4 <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    77ae:	4a e6       	ldi	r20, 0x6A	; 106
    77b0:	5b e4       	ldi	r21, 0x4B	; 75
    77b2:	08 c0       	rjmp	.+16     	; 0x77c4 <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    77b4:	47 e6       	ldi	r20, 0x67	; 103
    77b6:	5b e4       	ldi	r21, 0x4B	; 75
    77b8:	05 c0       	rjmp	.+10     	; 0x77c4 <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    77ba:	4e e5       	ldi	r20, 0x5E	; 94
    77bc:	5b e4       	ldi	r21, 0x4B	; 75
    77be:	02 c0       	rjmp	.+4      	; 0x77c4 <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    77c0:	44 e6       	ldi	r20, 0x64	; 100
    77c2:	5b e4       	ldi	r21, 0x4B	; 75
	}
}
    77c4:	1f 91       	pop	r17
    77c6:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    77c8:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <LBDrawTile>
	}
}
    77cc:	1f 91       	pop	r17
    77ce:	0f 91       	pop	r16
    77d0:	08 95       	ret

000077d2 <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    77d2:	1f 93       	push	r17
    77d4:	cf 93       	push	r28
    77d6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    77d8:	d0 e0       	ldi	r29, 0x00	; 0
    77da:	10 e2       	ldi	r17, 0x20	; 32
    77dc:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    77de:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    77e0:	c1 17       	cp	r28, r17
    77e2:	41 f0       	breq	.+16     	; 0x77f4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    77e4:	40 e0       	ldi	r20, 0x00	; 0
    77e6:	50 e0       	ldi	r21, 0x00	; 0
    77e8:	6c 2f       	mov	r22, r28
    77ea:	8d 2f       	mov	r24, r29
    77ec:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <SetTile>
    77f0:	cf 5f       	subi	r28, 0xFF	; 255
    77f2:	f6 cf       	rjmp	.-20     	; 0x77e0 <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    77f4:	df 5f       	subi	r29, 0xFF	; 255
    77f6:	dc 31       	cpi	r29, 0x1C	; 28
    77f8:	91 f7       	brne	.-28     	; 0x77de <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    77fa:	df 91       	pop	r29
    77fc:	cf 91       	pop	r28
    77fe:	1f 91       	pop	r17
    7800:	08 95       	ret

00007802 <read_level_byte>:
#else
u8 read_level_byte(u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    7802:	fc 01       	movw	r30, r24
    7804:	ee 0f       	add	r30, r30
    7806:	ef 2f       	mov	r30, r31
    7808:	ee 1f       	adc	r30, r30
    780a:	ff 0b       	sbc	r31, r31
    780c:	f1 95       	neg	r31
    780e:	34 e0       	ldi	r19, 0x04	; 4
    7810:	ee 0f       	add	r30, r30
    7812:	ff 1f       	adc	r31, r31
    7814:	3a 95       	dec	r19
    7816:	e1 f7       	brne	.-8      	; 0x7810 <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    7818:	af 01       	movw	r20, r30
    781a:	63 e0       	ldi	r22, 0x03	; 3
    781c:	44 0f       	add	r20, r20
    781e:	55 1f       	adc	r21, r21
    7820:	6a 95       	dec	r22
    7822:	e1 f7       	brne	.-8      	; 0x781c <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    7824:	01 96       	adiw	r24, 0x01	; 1
	counter += (u16) &level_data;
    7826:	ed 5a       	subi	r30, 0xAD	; 173
    7828:	f4 4e       	sbci	r31, 0xE4	; 228
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    782a:	9c 01       	movw	r18, r24
    782c:	90 e0       	ldi	r25, 0x00	; 0

0000782e <while1>:
    782e:	95 91       	lpm	r25, Z+
    7830:	85 91       	lpm	r24, Z+
    7832:	49 0f       	add	r20, r25
    7834:	51 1d       	adc	r21, r1
    7836:	42 17       	cp	r20, r18
    7838:	53 07       	cpc	r21, r19
    783a:	08 f4       	brcc	.+2      	; 0x783e <while1done>
    783c:	f8 cf       	rjmp	.-16     	; 0x782e <while1>

0000783e <while1done>:
    783e:	08 95       	ret

00007840 <get_camera_x>:

#endif

u8 get_camera_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0);
    7840:	25 e0       	ldi	r18, 0x05	; 5
    7842:	3e ef       	ldi	r19, 0xFE	; 254
    7844:	48 2f       	mov	r20, r24
    7846:	42 9f       	mul	r20, r18
    7848:	c0 01       	movw	r24, r0
    784a:	43 9f       	mul	r20, r19
    784c:	90 0d       	add	r25, r0
    784e:	11 24       	eor	r1, r1
    7850:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <read_level_byte>

00007854 <get_camera_y>:
}

u8 get_camera_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1);
    7854:	25 e0       	ldi	r18, 0x05	; 5
    7856:	3e ef       	ldi	r19, 0xFE	; 254
    7858:	48 2f       	mov	r20, r24
    785a:	42 9f       	mul	r20, r18
    785c:	c0 01       	movw	r24, r0
    785e:	43 9f       	mul	r20, r19
    7860:	90 0d       	add	r25, r0
    7862:	11 24       	eor	r1, r1
    7864:	01 96       	adiw	r24, 0x01	; 1
    7866:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <read_level_byte>

0000786a <get_hero_spawn_x>:
}

u8 get_hero_spawn_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2);
    786a:	25 e0       	ldi	r18, 0x05	; 5
    786c:	3e ef       	ldi	r19, 0xFE	; 254
    786e:	48 2f       	mov	r20, r24
    7870:	42 9f       	mul	r20, r18
    7872:	c0 01       	movw	r24, r0
    7874:	43 9f       	mul	r20, r19
    7876:	90 0d       	add	r25, r0
    7878:	11 24       	eor	r1, r1
    787a:	02 96       	adiw	r24, 0x02	; 2
    787c:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <read_level_byte>

00007880 <get_hero_spawn_y>:
}

u8 get_hero_spawn_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3);
    7880:	25 e0       	ldi	r18, 0x05	; 5
    7882:	3e ef       	ldi	r19, 0xFE	; 254
    7884:	48 2f       	mov	r20, r24
    7886:	42 9f       	mul	r20, r18
    7888:	c0 01       	movw	r24, r0
    788a:	43 9f       	mul	r20, r19
    788c:	90 0d       	add	r25, r0
    788e:	11 24       	eor	r1, r1
    7890:	03 96       	adiw	r24, 0x03	; 3
    7892:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <read_level_byte>

00007896 <get_level_tile>:
}

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    7896:	6c 5f       	subi	r22, 0xFC	; 252
    7898:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x));
    789a:	9f ef       	ldi	r25, 0xFF	; 255
    789c:	94 9f       	mul	r25, r20
    789e:	90 01       	movw	r18, r0
    78a0:	95 9f       	mul	r25, r21
    78a2:	30 0d       	add	r19, r0
    78a4:	11 24       	eor	r1, r1
    78a6:	62 0f       	add	r22, r18
    78a8:	73 1f       	adc	r23, r19
    78aa:	25 e0       	ldi	r18, 0x05	; 5
    78ac:	3e ef       	ldi	r19, 0xFE	; 254
    78ae:	48 2f       	mov	r20, r24
    78b0:	42 9f       	mul	r20, r18
    78b2:	c0 01       	movw	r24, r0
    78b4:	43 9f       	mul	r20, r19
    78b6:	90 0d       	add	r25, r0
    78b8:	11 24       	eor	r1, r1
    78ba:	86 0f       	add	r24, r22
    78bc:	97 1f       	adc	r25, r23
    78be:	0c 94 01 3c 	jmp	0x7802	; 0x7802 <read_level_byte>

000078c2 <render_camera_view>:
}

void render_camera_view()
{
    78c2:	7f 92       	push	r7
    78c4:	8f 92       	push	r8
    78c6:	9f 92       	push	r9
    78c8:	af 92       	push	r10
    78ca:	bf 92       	push	r11
    78cc:	cf 92       	push	r12
    78ce:	df 92       	push	r13
    78d0:	ef 92       	push	r14
    78d2:	ff 92       	push	r15
    78d4:	0f 93       	push	r16
    78d6:	1f 93       	push	r17
    78d8:	cf 93       	push	r28
    78da:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    78dc:	c0 91 9c 0d 	lds	r28, 0x0D9C
    78e0:	d0 91 9d 0d 	lds	r29, 0x0D9D
    78e4:	83 e0       	ldi	r24, 0x03	; 3
    78e6:	d6 95       	lsr	r29
    78e8:	c7 95       	ror	r28
    78ea:	8a 95       	dec	r24
    78ec:	e1 f7       	brne	.-8      	; 0x78e6 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    78ee:	c0 90 9e 0d 	lds	r12, 0x0D9E
    78f2:	d0 90 9f 0d 	lds	r13, 0x0D9F
    78f6:	93 e0       	ldi	r25, 0x03	; 3
    78f8:	d6 94       	lsr	r13
    78fa:	c7 94       	ror	r12
    78fc:	9a 95       	dec	r25
    78fe:	e1 f7       	brne	.-8      	; 0x78f8 <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7900:	8e 01       	movw	r16, r28
    7902:	5e 01       	movw	r10, r28
    7904:	8c e1       	ldi	r24, 0x1C	; 28
    7906:	a8 0e       	add	r10, r24
    7908:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    790a:	46 01       	movw	r8, r12
    790c:	8a e1       	ldi	r24, 0x1A	; 26
    790e:	88 0e       	add	r8, r24
    7910:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7912:	a0 16       	cp	r10, r16
    7914:	b1 06       	cpc	r11, r17
    7916:	c0 f0       	brcs	.+48     	; 0x7948 <render_camera_view+0x86>
    7918:	76 01       	movw	r14, r12
    791a:	70 2e       	mov	r7, r16
    791c:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    791e:	8e 14       	cp	r8, r14
    7920:	9f 04       	cpc	r9, r15
    7922:	78 f0       	brcs	.+30     	; 0x7942 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    7924:	a7 01       	movw	r20, r14
    7926:	b8 01       	movw	r22, r16
    7928:	80 91 91 0d 	lds	r24, 0x0D91
    792c:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    7930:	4e 2d       	mov	r20, r14
    7932:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    7934:	67 2d       	mov	r22, r7
    7936:	0e 94 bf 3b 	call	0x777e	; 0x777e <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    793a:	8f ef       	ldi	r24, 0xFF	; 255
    793c:	e8 1a       	sub	r14, r24
    793e:	f8 0a       	sbc	r15, r24
    7940:	ee cf       	rjmp	.-36     	; 0x791e <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7942:	0f 5f       	subi	r16, 0xFF	; 255
    7944:	1f 4f       	sbci	r17, 0xFF	; 255
    7946:	e5 cf       	rjmp	.-54     	; 0x7912 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    7948:	df 91       	pop	r29
    794a:	cf 91       	pop	r28
    794c:	1f 91       	pop	r17
    794e:	0f 91       	pop	r16
    7950:	ff 90       	pop	r15
    7952:	ef 90       	pop	r14
    7954:	df 90       	pop	r13
    7956:	cf 90       	pop	r12
    7958:	bf 90       	pop	r11
    795a:	af 90       	pop	r10
    795c:	9f 90       	pop	r9
    795e:	8f 90       	pop	r8
    7960:	7f 90       	pop	r7
    7962:	08 95       	ret

00007964 <append_tile_column>:

void append_tile_column()
{
    7964:	0f 93       	push	r16
    7966:	1f 93       	push	r17
    7968:	cf 93       	push	r28
    796a:	df 93       	push	r29
    796c:	c0 e0       	ldi	r28, 0x00	; 0
    796e:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7970:	0e e1       	ldi	r16, 0x1E	; 30
    7972:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    7974:	40 91 9e 0d 	lds	r20, 0x0D9E
    7978:	50 91 9f 0d 	lds	r21, 0x0D9F
    797c:	83 e0       	ldi	r24, 0x03	; 3
    797e:	56 95       	lsr	r21
    7980:	47 95       	ror	r20
    7982:	8a 95       	dec	r24
    7984:	e1 f7       	brne	.-8      	; 0x797e <append_tile_column+0x1a>
    7986:	4c 0f       	add	r20, r28
    7988:	5d 1f       	adc	r21, r29
    798a:	60 91 98 0d 	lds	r22, 0x0D98
    798e:	70 91 99 0d 	lds	r23, 0x0D99
    7992:	80 91 91 0d 	lds	r24, 0x0D91
    7996:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    799a:	28 2f       	mov	r18, r24
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    799c:	90 91 9d 0c 	lds	r25, 0x0C9D
    79a0:	96 95       	lsr	r25
    79a2:	96 95       	lsr	r25
    79a4:	96 95       	lsr	r25
    79a6:	ae 01       	movw	r20, r28
    79a8:	49 0f       	add	r20, r25
    79aa:	51 1d       	adc	r21, r1
    79ac:	ca 01       	movw	r24, r20
    79ae:	b8 01       	movw	r22, r16
    79b0:	0e 94 4c 47 	call	0x8e98	; 0x8e98 <__divmodhi4>
    79b4:	48 2f       	mov	r20, r24
    79b6:	60 91 96 0d 	lds	r22, 0x0D96
    79ba:	82 2f       	mov	r24, r18
    79bc:	0e 94 bf 3b 	call	0x777e	; 0x777e <render_level_tile>
    79c0:	21 96       	adiw	r28, 0x01	; 1

void append_tile_column()
{
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    79c2:	cb 31       	cpi	r28, 0x1B	; 27
    79c4:	d1 05       	cpc	r29, r1
    79c6:	b1 f6       	brne	.-84     	; 0x7974 <append_tile_column+0x10>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    }
	
    game.scroll_src_x++;
    79c8:	80 91 98 0d 	lds	r24, 0x0D98
    79cc:	90 91 99 0d 	lds	r25, 0x0D99
    79d0:	01 96       	adiw	r24, 0x01	; 1
    79d2:	90 93 99 0d 	sts	0x0D99, r25
    79d6:	80 93 98 0d 	sts	0x0D98, r24
	game.scroll_dest_x++;
    79da:	80 91 96 0d 	lds	r24, 0x0D96
    79de:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    79e0:	80 32       	cpi	r24, 0x20	; 32
    79e2:	18 f4       	brcc	.+6      	; 0x79ea <append_tile_column+0x86>
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    79e4:	80 93 96 0d 	sts	0x0D96, r24
    79e8:	02 c0       	rjmp	.+4      	; 0x79ee <append_tile_column+0x8a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    79ea:	10 92 96 0d 	sts	0x0D96, r1
}
    79ee:	df 91       	pop	r29
    79f0:	cf 91       	pop	r28
    79f2:	1f 91       	pop	r17
    79f4:	0f 91       	pop	r16
    79f6:	08 95       	ret

000079f8 <append_tile_row>:

void append_tile_row()
{
    79f8:	cf 93       	push	r28
    79fa:	df 93       	push	r29
    79fc:	c0 e0       	ldi	r28, 0x00	; 0
    79fe:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    7a00:	40 91 9a 0d 	lds	r20, 0x0D9A
    7a04:	50 91 9b 0d 	lds	r21, 0x0D9B
    7a08:	60 91 9c 0d 	lds	r22, 0x0D9C
    7a0c:	70 91 9d 0d 	lds	r23, 0x0D9D
    7a10:	83 e0       	ldi	r24, 0x03	; 3
    7a12:	76 95       	lsr	r23
    7a14:	67 95       	ror	r22
    7a16:	8a 95       	dec	r24
    7a18:	e1 f7       	brne	.-8      	; 0x7a12 <append_tile_row+0x1a>
    7a1a:	6c 0f       	add	r22, r28
    7a1c:	7d 1f       	adc	r23, r29
    7a1e:	80 91 91 0d 	lds	r24, 0x0D91
    7a22:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    7a26:	60 91 9c 0c 	lds	r22, 0x0C9C
    7a2a:	66 95       	lsr	r22
    7a2c:	66 95       	lsr	r22
    7a2e:	66 95       	lsr	r22
    7a30:	6c 0f       	add	r22, r28
    7a32:	6f 71       	andi	r22, 0x1F	; 31
    7a34:	40 91 97 0d 	lds	r20, 0x0D97
    7a38:	0e 94 bf 3b 	call	0x777e	; 0x777e <render_level_tile>
    7a3c:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    7a3e:	cd 31       	cpi	r28, 0x1D	; 29
    7a40:	d1 05       	cpc	r29, r1
    7a42:	f1 f6       	brne	.-68     	; 0x7a00 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    7a44:	80 91 9a 0d 	lds	r24, 0x0D9A
    7a48:	90 91 9b 0d 	lds	r25, 0x0D9B
    7a4c:	01 96       	adiw	r24, 0x01	; 1
    7a4e:	90 93 9b 0d 	sts	0x0D9B, r25
    7a52:	80 93 9a 0d 	sts	0x0D9A, r24
	game.scroll_dest_y++;
    7a56:	80 91 97 0d 	lds	r24, 0x0D97
    7a5a:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    7a5c:	8e 31       	cpi	r24, 0x1E	; 30
    7a5e:	18 f4       	brcc	.+6      	; 0x7a66 <append_tile_row+0x6e>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    7a60:	80 93 97 0d 	sts	0x0D97, r24
    7a64:	02 c0       	rjmp	.+4      	; 0x7a6a <append_tile_row+0x72>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    7a66:	10 92 97 0d 	sts	0x0D97, r1
}
    7a6a:	df 91       	pop	r29
    7a6c:	cf 91       	pop	r28
    7a6e:	08 95       	ret

00007a70 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    7a70:	80 91 9c 0d 	lds	r24, 0x0D9C
    7a74:	90 91 9d 0d 	lds	r25, 0x0D9D
    7a78:	01 96       	adiw	r24, 0x01	; 1
    7a7a:	90 93 9d 0d 	sts	0x0D9D, r25
    7a7e:	80 93 9c 0d 	sts	0x0D9C, r24
	Scroll(1,0);
    7a82:	60 e0       	ldi	r22, 0x00	; 0
    7a84:	81 e0       	ldi	r24, 0x01	; 1
    7a86:	0e 94 28 38 	call	0x7050	; 0x7050 <Scroll>
	if (++game.scroll_x == 8)
    7a8a:	80 91 94 0d 	lds	r24, 0x0D94
    7a8e:	8f 5f       	subi	r24, 0xFF	; 255
    7a90:	88 30       	cpi	r24, 0x08	; 8
    7a92:	19 f0       	breq	.+6      	; 0x7a9a <move_camera_x+0x2a>
    7a94:	80 93 94 0d 	sts	0x0D94, r24
    7a98:	08 95       	ret
	{
		game.scroll_x = 0;
    7a9a:	10 92 94 0d 	sts	0x0D94, r1
		append_tile_column();
    7a9e:	0c 94 b2 3c 	jmp	0x7964	; 0x7964 <append_tile_column>

00007aa2 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    7aa2:	80 91 9e 0d 	lds	r24, 0x0D9E
    7aa6:	90 91 9f 0d 	lds	r25, 0x0D9F
    7aaa:	02 96       	adiw	r24, 0x02	; 2
    7aac:	90 93 9f 0d 	sts	0x0D9F, r25
    7ab0:	80 93 9e 0d 	sts	0x0D9E, r24
	game.scroll_y+=2;
    7ab4:	80 91 95 0d 	lds	r24, 0x0D95
    7ab8:	8e 5f       	subi	r24, 0xFE	; 254
    7aba:	80 93 95 0d 	sts	0x0D95, r24
	Scroll(0,2);
    7abe:	62 e0       	ldi	r22, 0x02	; 2
    7ac0:	80 e0       	ldi	r24, 0x00	; 0
    7ac2:	0e 94 28 38 	call	0x7050	; 0x7050 <Scroll>
	if (game.scroll_y == 8)
    7ac6:	80 91 95 0d 	lds	r24, 0x0D95
    7aca:	88 30       	cpi	r24, 0x08	; 8
    7acc:	21 f4       	brne	.+8      	; 0x7ad6 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    7ace:	10 92 95 0d 	sts	0x0D95, r1
		append_tile_row();
    7ad2:	0c 94 fc 3c 	jmp	0x79f8	; 0x79f8 <append_tile_row>
    7ad6:	08 95       	ret

00007ad8 <load_level>:
	}
}

void load_level(u8 index)
{	
    7ad8:	1f 93       	push	r17
    7ada:	cf 93       	push	r28
    7adc:	df 93       	push	r29
    7ade:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    7ae0:	e9 e9       	ldi	r30, 0x99	; 153
    7ae2:	fc e0       	ldi	r31, 0x0C	; 12
    7ae4:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    7ae6:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    7ae8:	8e e1       	ldi	r24, 0x1E	; 30
    7aea:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    7aec:	8d e8       	ldi	r24, 0x8D	; 141
    7aee:	92 e3       	ldi	r25, 0x32	; 50
    7af0:	92 83       	std	Z+2, r25	; 0x02
    7af2:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    7af4:	82 e0       	ldi	r24, 0x02	; 2
    7af6:	80 83       	st	Z, r24
	clear_overlay(2);
    7af8:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <clear_overlay>
	game.current_level = index;
    7afc:	c0 e9       	ldi	r28, 0x90	; 144
    7afe:	dd e0       	ldi	r29, 0x0D	; 13
    7b00:	19 83       	std	Y+1, r17	; 0x01
	game.camera_x = get_camera_x(index);
    7b02:	81 2f       	mov	r24, r17
    7b04:	0e 94 20 3c 	call	0x7840	; 0x7840 <get_camera_x>
    7b08:	90 e0       	ldi	r25, 0x00	; 0
    7b0a:	9d 87       	std	Y+13, r25	; 0x0d
    7b0c:	8c 87       	std	Y+12, r24	; 0x0c
	game.camera_y = get_camera_y(index);
    7b0e:	81 2f       	mov	r24, r17
    7b10:	0e 94 2a 3c 	call	0x7854	; 0x7854 <get_camera_y>
    7b14:	90 e0       	ldi	r25, 0x00	; 0
    7b16:	9f 87       	std	Y+15, r25	; 0x0f
    7b18:	8e 87       	std	Y+14, r24	; 0x0e
	game.player.shared.x = get_hero_spawn_x(index)*8;
    7b1a:	81 2f       	mov	r24, r17
    7b1c:	0e 94 35 3c 	call	0x786a	; 0x786a <get_hero_spawn_x>
    7b20:	28 e0       	ldi	r18, 0x08	; 8
    7b22:	82 9f       	mul	r24, r18
    7b24:	c0 01       	movw	r24, r0
    7b26:	11 24       	eor	r1, r1
    7b28:	bc 01       	movw	r22, r24
    7b2a:	88 27       	eor	r24, r24
    7b2c:	77 fd       	sbrc	r23, 7
    7b2e:	80 95       	com	r24
    7b30:	98 2f       	mov	r25, r24
    7b32:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    7b36:	68 8f       	std	Y+24, r22	; 0x18
    7b38:	79 8f       	std	Y+25, r23	; 0x19
    7b3a:	8a 8f       	std	Y+26, r24	; 0x1a
    7b3c:	9b 8f       	std	Y+27, r25	; 0x1b
	game.player.shared.y = get_hero_spawn_y(index)*8;
    7b3e:	81 2f       	mov	r24, r17
    7b40:	0e 94 40 3c 	call	0x7880	; 0x7880 <get_hero_spawn_y>
    7b44:	28 e0       	ldi	r18, 0x08	; 8
    7b46:	82 9f       	mul	r24, r18
    7b48:	c0 01       	movw	r24, r0
    7b4a:	11 24       	eor	r1, r1
    7b4c:	bc 01       	movw	r22, r24
    7b4e:	88 27       	eor	r24, r24
    7b50:	77 fd       	sbrc	r23, 7
    7b52:	80 95       	com	r24
    7b54:	98 2f       	mov	r25, r24
    7b56:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    7b5a:	6c 8f       	std	Y+28, r22	; 0x1c
    7b5c:	7d 8f       	std	Y+29, r23	; 0x1d
    7b5e:	8e 8f       	std	Y+30, r24	; 0x1e
    7b60:	9f 8f       	std	Y+31, r25	; 0x1f
	game.camera_x *= 8;
    7b62:	8c 85       	ldd	r24, Y+12	; 0x0c
    7b64:	9d 85       	ldd	r25, Y+13	; 0x0d
    7b66:	23 e0       	ldi	r18, 0x03	; 3
    7b68:	88 0f       	add	r24, r24
    7b6a:	99 1f       	adc	r25, r25
    7b6c:	2a 95       	dec	r18
    7b6e:	e1 f7       	brne	.-8      	; 0x7b68 <load_level+0x90>
    7b70:	9d 87       	std	Y+13, r25	; 0x0d
    7b72:	8c 87       	std	Y+12, r24	; 0x0c
	game.camera_y *= 8;
    7b74:	8e 85       	ldd	r24, Y+14	; 0x0e
    7b76:	9f 85       	ldd	r25, Y+15	; 0x0f
    7b78:	33 e0       	ldi	r19, 0x03	; 3
    7b7a:	88 0f       	add	r24, r24
    7b7c:	99 1f       	adc	r25, r25
    7b7e:	3a 95       	dec	r19
    7b80:	e1 f7       	brne	.-8      	; 0x7b7a <load_level+0xa2>
    7b82:	9f 87       	std	Y+15, r25	; 0x0f
    7b84:	8e 87       	std	Y+14, r24	; 0x0e
	render_camera_view();
}
    7b86:	df 91       	pop	r29
    7b88:	cf 91       	pop	r28
    7b8a:	1f 91       	pop	r17
	game.camera_y = get_camera_y(index);
	game.player.shared.x = get_hero_spawn_x(index)*8;
	game.player.shared.y = get_hero_spawn_y(index)*8;
	game.camera_x *= 8;
	game.camera_y *= 8;
	render_camera_view();
    7b8c:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <render_camera_view>

00007b90 <solid_tile>:
	load_level(index);
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    7b90:	81 50       	subi	r24, 0x01	; 1
    7b92:	84 30       	cpi	r24, 0x04	; 4
    7b94:	10 f0       	brcs	.+4      	; 0x7b9a <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    7b96:	80 e0       	ldi	r24, 0x00	; 0
    7b98:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    7b9a:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    7b9c:	08 95       	ret

00007b9e <on_solid_ground>:

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    7b9e:	2f 92       	push	r2
    7ba0:	3f 92       	push	r3
    7ba2:	4f 92       	push	r4
    7ba4:	5f 92       	push	r5
    7ba6:	6f 92       	push	r6
    7ba8:	7f 92       	push	r7
    7baa:	8f 92       	push	r8
    7bac:	9f 92       	push	r9
    7bae:	af 92       	push	r10
    7bb0:	bf 92       	push	r11
    7bb2:	cf 92       	push	r12
    7bb4:	df 92       	push	r13
    7bb6:	ef 92       	push	r14
    7bb8:	ff 92       	push	r15
    7bba:	0f 93       	push	r16
    7bbc:	1f 93       	push	r17
    7bbe:	cf 93       	push	r28
    7bc0:	df 93       	push	r29
    7bc2:	00 d0       	rcall	.+0      	; 0x7bc4 <on_solid_ground+0x26>
    7bc4:	00 d0       	rcall	.+0      	; 0x7bc6 <on_solid_ground+0x28>
    7bc6:	00 d0       	rcall	.+0      	; 0x7bc8 <on_solid_ground+0x2a>
    7bc8:	cd b7       	in	r28, 0x3d	; 61
    7bca:	de b7       	in	r29, 0x3e	; 62
    7bcc:	9e 83       	std	Y+6, r25	; 0x06
    7bce:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7bd0:	88 e0       	ldi	r24, 0x08	; 8
    7bd2:	48 9f       	mul	r20, r24
    7bd4:	a0 01       	movw	r20, r0
    7bd6:	11 24       	eor	r1, r1
    7bd8:	26 2e       	mov	r2, r22
    7bda:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    7bdc:	00 e0       	ldi	r16, 0x00	; 0
    7bde:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7be0:	ca 01       	movw	r24, r20
    7be2:	aa 27       	eor	r26, r26
    7be4:	97 fd       	sbrc	r25, 7
    7be6:	a0 95       	com	r26
    7be8:	ba 2f       	mov	r27, r26
    7bea:	89 83       	std	Y+1, r24	; 0x01
    7bec:	9a 83       	std	Y+2, r25	; 0x02
    7bee:	ab 83       	std	Y+3, r26	; 0x03
    7bf0:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    7bf2:	02 15       	cp	r16, r2
    7bf4:	13 05       	cpc	r17, r3
    7bf6:	09 f4       	brne	.+2      	; 0x7bfa <on_solid_ground+0x5c>
    7bf8:	81 c0       	rjmp	.+258    	; 0x7cfc <on_solid_ground+0x15e>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7bfa:	69 81       	ldd	r22, Y+1	; 0x01
    7bfc:	7a 81       	ldd	r23, Y+2	; 0x02
    7bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    7c00:	9c 81       	ldd	r25, Y+4	; 0x04
    7c02:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    7c06:	4b 01       	movw	r8, r22
    7c08:	5c 01       	movw	r10, r24
    7c0a:	b8 01       	movw	r22, r16
    7c0c:	88 27       	eor	r24, r24
    7c0e:	77 fd       	sbrc	r23, 7
    7c10:	80 95       	com	r24
    7c12:	98 2f       	mov	r25, r24
    7c14:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    7c18:	6b 01       	movw	r12, r22
    7c1a:	7c 01       	movw	r14, r24
    7c1c:	ad 81       	ldd	r26, Y+5	; 0x05
    7c1e:	be 81       	ldd	r27, Y+6	; 0x06
    7c20:	1c 96       	adiw	r26, 0x0c	; 12
    7c22:	2d 91       	ld	r18, X+
    7c24:	3d 91       	ld	r19, X+
    7c26:	4d 91       	ld	r20, X+
    7c28:	5c 91       	ld	r21, X
    7c2a:	1f 97       	sbiw	r26, 0x0f	; 15
    7c2c:	c5 01       	movw	r24, r10
    7c2e:	b4 01       	movw	r22, r8
    7c30:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7c34:	20 e0       	ldi	r18, 0x00	; 0
    7c36:	30 e0       	ldi	r19, 0x00	; 0
    7c38:	40 e0       	ldi	r20, 0x00	; 0
    7c3a:	5e e3       	ldi	r21, 0x3E	; 62
    7c3c:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    7c40:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    7c44:	2b 01       	movw	r4, r22
    7c46:	3c 01       	movw	r6, r24
    7c48:	20 e0       	ldi	r18, 0x00	; 0
    7c4a:	30 e0       	ldi	r19, 0x00	; 0
    7c4c:	40 e0       	ldi	r20, 0x00	; 0
    7c4e:	5e e3       	ldi	r21, 0x3E	; 62
    7c50:	ed 81       	ldd	r30, Y+5	; 0x05
    7c52:	fe 81       	ldd	r31, Y+6	; 0x06
    7c54:	60 85       	ldd	r22, Z+8	; 0x08
    7c56:	71 85       	ldd	r23, Z+9	; 0x09
    7c58:	82 85       	ldd	r24, Z+10	; 0x0a
    7c5a:	93 85       	ldd	r25, Z+11	; 0x0b
    7c5c:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    7c60:	a7 01       	movw	r20, r14
    7c62:	96 01       	movw	r18, r12
    7c64:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7c68:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    7c6c:	a2 01       	movw	r20, r4
    7c6e:	80 91 91 0d 	lds	r24, 0x0D91
    7c72:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    7c76:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    7c78:	ad 81       	ldd	r26, Y+5	; 0x05
    7c7a:	be 81       	ldd	r27, Y+6	; 0x06
    7c7c:	1c 96       	adiw	r26, 0x0c	; 12
    7c7e:	2d 91       	ld	r18, X+
    7c80:	3d 91       	ld	r19, X+
    7c82:	4d 91       	ld	r20, X+
    7c84:	5c 91       	ld	r21, X
    7c86:	1f 97       	sbiw	r26, 0x0f	; 15
    7c88:	c5 01       	movw	r24, r10
    7c8a:	b4 01       	movw	r22, r8
    7c8c:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7c90:	20 e0       	ldi	r18, 0x00	; 0
    7c92:	30 e0       	ldi	r19, 0x00	; 0
    7c94:	40 e0       	ldi	r20, 0x00	; 0
    7c96:	5e e3       	ldi	r21, 0x3E	; 62
    7c98:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    7c9c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    7ca0:	4b 01       	movw	r8, r22
    7ca2:	5c 01       	movw	r10, r24
    7ca4:	20 e0       	ldi	r18, 0x00	; 0
    7ca6:	30 e0       	ldi	r19, 0x00	; 0
    7ca8:	40 ee       	ldi	r20, 0xE0	; 224
    7caa:	50 e4       	ldi	r21, 0x40	; 64
    7cac:	ed 81       	ldd	r30, Y+5	; 0x05
    7cae:	fe 81       	ldd	r31, Y+6	; 0x06
    7cb0:	60 85       	ldd	r22, Z+8	; 0x08
    7cb2:	71 85       	ldd	r23, Z+9	; 0x09
    7cb4:	82 85       	ldd	r24, Z+10	; 0x0a
    7cb6:	93 85       	ldd	r25, Z+11	; 0x0b
    7cb8:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7cbc:	20 e0       	ldi	r18, 0x00	; 0
    7cbe:	30 e0       	ldi	r19, 0x00	; 0
    7cc0:	40 e0       	ldi	r20, 0x00	; 0
    7cc2:	5e e3       	ldi	r21, 0x3E	; 62
    7cc4:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    7cc8:	a7 01       	movw	r20, r14
    7cca:	96 01       	movw	r18, r12
    7ccc:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7cd0:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    7cd4:	a4 01       	movw	r20, r8
    7cd6:	80 91 91 0d 	lds	r24, 0x0D91
    7cda:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    7cde:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    7ce0:	87 2d       	mov	r24, r7
    7ce2:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
    7ce6:	81 11       	cpse	r24, r1
    7ce8:	0b c0       	rjmp	.+22     	; 0x7d00 <on_solid_ground+0x162>
    7cea:	8f 2d       	mov	r24, r15
    7cec:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
    7cf0:	0f 5f       	subi	r16, 0xFF	; 255
    7cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    7cf4:	88 23       	and	r24, r24
    7cf6:	09 f4       	brne	.+2      	; 0x7cfa <on_solid_ground+0x15c>
    7cf8:	7c cf       	rjmp	.-264    	; 0x7bf2 <on_solid_ground+0x54>
    7cfa:	02 c0       	rjmp	.+4      	; 0x7d00 <on_solid_ground+0x162>
		{
			return 1;
		}
	}
	return 0;
    7cfc:	80 e0       	ldi	r24, 0x00	; 0
    7cfe:	01 c0       	rjmp	.+2      	; 0x7d02 <on_solid_ground+0x164>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    7d00:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    7d02:	26 96       	adiw	r28, 0x06	; 6
    7d04:	0f b6       	in	r0, 0x3f	; 63
    7d06:	f8 94       	cli
    7d08:	de bf       	out	0x3e, r29	; 62
    7d0a:	0f be       	out	0x3f, r0	; 63
    7d0c:	cd bf       	out	0x3d, r28	; 61
    7d0e:	df 91       	pop	r29
    7d10:	cf 91       	pop	r28
    7d12:	1f 91       	pop	r17
    7d14:	0f 91       	pop	r16
    7d16:	ff 90       	pop	r15
    7d18:	ef 90       	pop	r14
    7d1a:	df 90       	pop	r13
    7d1c:	cf 90       	pop	r12
    7d1e:	bf 90       	pop	r11
    7d20:	af 90       	pop	r10
    7d22:	9f 90       	pop	r9
    7d24:	8f 90       	pop	r8
    7d26:	7f 90       	pop	r7
    7d28:	6f 90       	pop	r6
    7d2a:	5f 90       	pop	r5
    7d2c:	4f 90       	pop	r4
    7d2e:	3f 90       	pop	r3
    7d30:	2f 90       	pop	r2
    7d32:	08 95       	ret

00007d34 <find_shot_slot>:

u8 find_shot_slot()
{
    7d34:	e8 ec       	ldi	r30, 0xC8	; 200
    7d36:	fd e0       	ldi	r31, 0x0D	; 13
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    7d38:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!game.player.shot[i].active) return i;
    7d3a:	90 81       	ld	r25, Z
    7d3c:	99 23       	and	r25, r25
    7d3e:	29 f0       	breq	.+10     	; 0x7d4a <find_shot_slot+0x16>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    7d40:	8f 5f       	subi	r24, 0xFF	; 255
    7d42:	7c 96       	adiw	r30, 0x1c	; 28
    7d44:	84 30       	cpi	r24, 0x04	; 4
    7d46:	c9 f7       	brne	.-14     	; 0x7d3a <find_shot_slot+0x6>
	{
		if (!game.player.shot[i].active) return i;
	}
	return 0;
    7d48:	80 e0       	ldi	r24, 0x00	; 0
}
    7d4a:	08 95       	ret

00007d4c <update_shot>:

void update_shot()
{
    7d4c:	1f 93       	push	r17
    7d4e:	cf 93       	push	r28
    7d50:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    7d52:	80 91 4d 0e 	lds	r24, 0x0E4D
    7d56:	90 91 4e 0e 	lds	r25, 0x0E4E
    7d5a:	90 ff       	sbrs	r25, 0
    7d5c:	6b c0       	rjmp	.+214    	; 0x7e34 <update_shot+0xe8>
    7d5e:	80 91 b1 0d 	lds	r24, 0x0DB1
    7d62:	84 30       	cpi	r24, 0x04	; 4
    7d64:	08 f0       	brcs	.+2      	; 0x7d68 <update_shot+0x1c>
    7d66:	66 c0       	rjmp	.+204    	; 0x7e34 <update_shot+0xe8>
	{
		idx = find_shot_slot();
    7d68:	0e 94 9a 3e 	call	0x7d34	; 0x7d34 <find_shot_slot>
    7d6c:	18 2f       	mov	r17, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    7d6e:	8c e1       	ldi	r24, 0x1C	; 28
    7d70:	18 9f       	mul	r17, r24
    7d72:	e0 01       	movw	r28, r0
    7d74:	11 24       	eor	r1, r1
    7d76:	ce 01       	movw	r24, r28
    7d78:	87 53       	subi	r24, 0x37	; 55
    7d7a:	92 4f       	sbci	r25, 0xF2	; 242
    7d7c:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    7d80:	40 e0       	ldi	r20, 0x00	; 0
    7d82:	bc 01       	movw	r22, r24
    7d84:	86 e0       	ldi	r24, 0x06	; 6
    7d86:	81 0f       	add	r24, r17
    7d88:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <LBMapSprite>
		game.player.shot[idx].active = 1;
    7d8c:	c0 57       	subi	r28, 0x70	; 112
    7d8e:	d2 4f       	sbci	r29, 0xF2	; 242
    7d90:	81 e0       	ldi	r24, 0x01	; 1
    7d92:	88 af       	std	Y+56, r24	; 0x38
		game.player.shot[idx].shared.y = game.player.shared.y+1*8;
    7d94:	20 e0       	ldi	r18, 0x00	; 0
    7d96:	30 e0       	ldi	r19, 0x00	; 0
    7d98:	40 e0       	ldi	r20, 0x00	; 0
    7d9a:	51 e4       	ldi	r21, 0x41	; 65
    7d9c:	60 91 ac 0d 	lds	r22, 0x0DAC
    7da0:	70 91 ad 0d 	lds	r23, 0x0DAD
    7da4:	80 91 ae 0d 	lds	r24, 0x0DAE
    7da8:	90 91 af 0d 	lds	r25, 0x0DAF
    7dac:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7db0:	69 ab       	std	Y+49, r22	; 0x31
    7db2:	7a ab       	std	Y+50, r23	; 0x32
    7db4:	8b ab       	std	Y+51, r24	; 0x33
    7db6:	9c ab       	std	Y+52, r25	; 0x34
		if (game.player.direction == D_RIGHT)
    7db8:	80 91 b4 0d 	lds	r24, 0x0DB4
    7dbc:	81 30       	cpi	r24, 0x01	; 1
    7dbe:	d9 f4       	brne	.+54     	; 0x7df6 <update_shot+0xaa>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    7dc0:	20 e0       	ldi	r18, 0x00	; 0
    7dc2:	30 e0       	ldi	r19, 0x00	; 0
    7dc4:	40 e8       	ldi	r20, 0x80	; 128
    7dc6:	51 e4       	ldi	r21, 0x41	; 65
    7dc8:	60 91 a8 0d 	lds	r22, 0x0DA8
    7dcc:	70 91 a9 0d 	lds	r23, 0x0DA9
    7dd0:	80 91 aa 0d 	lds	r24, 0x0DAA
    7dd4:	90 91 ab 0d 	lds	r25, 0x0DAB
    7dd8:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7ddc:	6d a7       	std	Y+45, r22	; 0x2d
    7dde:	7e a7       	std	Y+46, r23	; 0x2e
    7de0:	8f a7       	std	Y+47, r24	; 0x2f
    7de2:	98 ab       	std	Y+48, r25	; 0x30
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    7de4:	80 e0       	ldi	r24, 0x00	; 0
    7de6:	90 e0       	ldi	r25, 0x00	; 0
    7de8:	aa e7       	ldi	r26, 0x7A	; 122
    7dea:	b3 e4       	ldi	r27, 0x43	; 67
    7dec:	8d a3       	std	Y+37, r24	; 0x25
    7dee:	9e a3       	std	Y+38, r25	; 0x26
    7df0:	af a3       	std	Y+39, r26	; 0x27
    7df2:	b8 a7       	std	Y+40, r27	; 0x28
    7df4:	1a c0       	rjmp	.+52     	; 0x7e2a <update_shot+0xde>
		}
		else
		{
			game.player.shot[idx].shared.vx = -SHOT_SPEED;
    7df6:	80 e0       	ldi	r24, 0x00	; 0
    7df8:	90 e0       	ldi	r25, 0x00	; 0
    7dfa:	aa e7       	ldi	r26, 0x7A	; 122
    7dfc:	b3 ec       	ldi	r27, 0xC3	; 195
    7dfe:	8d a3       	std	Y+37, r24	; 0x25
    7e00:	9e a3       	std	Y+38, r25	; 0x26
    7e02:	af a3       	std	Y+39, r26	; 0x27
    7e04:	b8 a7       	std	Y+40, r27	; 0x28
			game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    7e06:	20 e0       	ldi	r18, 0x00	; 0
    7e08:	30 e0       	ldi	r19, 0x00	; 0
    7e0a:	40 e0       	ldi	r20, 0x00	; 0
    7e0c:	51 e4       	ldi	r21, 0x41	; 65
    7e0e:	60 91 a8 0d 	lds	r22, 0x0DA8
    7e12:	70 91 a9 0d 	lds	r23, 0x0DA9
    7e16:	80 91 aa 0d 	lds	r24, 0x0DAA
    7e1a:	90 91 ab 0d 	lds	r25, 0x0DAB
    7e1e:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    7e22:	6d a7       	std	Y+45, r22	; 0x2d
    7e24:	7e a7       	std	Y+46, r23	; 0x2e
    7e26:	8f a7       	std	Y+47, r24	; 0x2f
    7e28:	98 ab       	std	Y+48, r25	; 0x30
		}
		game.player.active_shots++;
    7e2a:	80 91 b1 0d 	lds	r24, 0x0DB1
    7e2e:	8f 5f       	subi	r24, 0xFF	; 255
    7e30:	80 93 b1 0d 	sts	0x0DB1, r24
	}
}
    7e34:	df 91       	pop	r29
    7e36:	cf 91       	pop	r28
    7e38:	1f 91       	pop	r17
    7e3a:	08 95       	ret

00007e3c <animate_shot>:

void animate_shot()
{
    7e3c:	4f 92       	push	r4
    7e3e:	5f 92       	push	r5
    7e40:	6f 92       	push	r6
    7e42:	7f 92       	push	r7
    7e44:	8f 92       	push	r8
    7e46:	9f 92       	push	r9
    7e48:	af 92       	push	r10
    7e4a:	bf 92       	push	r11
    7e4c:	df 92       	push	r13
    7e4e:	ef 92       	push	r14
    7e50:	ff 92       	push	r15
    7e52:	0f 93       	push	r16
    7e54:	1f 93       	push	r17
    7e56:	cf 93       	push	r28
    7e58:	df 93       	push	r29
    7e5a:	88 ec       	ldi	r24, 0xC8	; 200
    7e5c:	e8 2e       	mov	r14, r24
    7e5e:	8d e0       	ldi	r24, 0x0D	; 13
    7e60:	f8 2e       	mov	r15, r24
    7e62:	c5 eb       	ldi	r28, 0xB5	; 181
    7e64:	dd e0       	ldi	r29, 0x0D	; 13
    7e66:	96 e0       	ldi	r25, 0x06	; 6
    7e68:	d9 2e       	mov	r13, r25
	// Animate shots
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    7e6a:	f7 01       	movw	r30, r14
    7e6c:	80 81       	ld	r24, Z
    7e6e:	88 23       	and	r24, r24
    7e70:	09 f4       	brne	.+2      	; 0x7e74 <animate_shot+0x38>
    7e72:	91 c0       	rjmp	.+290    	; 0x7f96 <animate_shot+0x15a>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    7e74:	29 e8       	ldi	r18, 0x89	; 137
    7e76:	38 e8       	ldi	r19, 0x88	; 136
    7e78:	48 e8       	ldi	r20, 0x88	; 136
    7e7a:	5c e3       	ldi	r21, 0x3C	; 60
    7e7c:	68 81       	ld	r22, Y
    7e7e:	79 81       	ldd	r23, Y+1	; 0x01
    7e80:	8a 81       	ldd	r24, Y+2	; 0x02
    7e82:	9b 81       	ldd	r25, Y+3	; 0x03
    7e84:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    7e88:	28 85       	ldd	r18, Y+8	; 0x08
    7e8a:	39 85       	ldd	r19, Y+9	; 0x09
    7e8c:	4a 85       	ldd	r20, Y+10	; 0x0a
    7e8e:	5b 85       	ldd	r21, Y+11	; 0x0b
    7e90:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7e94:	4b 01       	movw	r8, r22
    7e96:	5c 01       	movw	r10, r24
    7e98:	68 87       	std	Y+8, r22	; 0x08
    7e9a:	79 87       	std	Y+9, r23	; 0x09
    7e9c:	8a 87       	std	Y+10, r24	; 0x0a
    7e9e:	9b 87       	std	Y+11, r25	; 0x0b
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    7ea0:	29 e8       	ldi	r18, 0x89	; 137
    7ea2:	38 e8       	ldi	r19, 0x88	; 136
    7ea4:	48 e8       	ldi	r20, 0x88	; 136
    7ea6:	5c e3       	ldi	r21, 0x3C	; 60
    7ea8:	6c 81       	ldd	r22, Y+4	; 0x04
    7eaa:	7d 81       	ldd	r23, Y+5	; 0x05
    7eac:	8e 81       	ldd	r24, Y+6	; 0x06
    7eae:	9f 81       	ldd	r25, Y+7	; 0x07
    7eb0:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    7eb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    7eb6:	3d 85       	ldd	r19, Y+13	; 0x0d
    7eb8:	4e 85       	ldd	r20, Y+14	; 0x0e
    7eba:	5f 85       	ldd	r21, Y+15	; 0x0f
    7ebc:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7ec0:	2b 01       	movw	r4, r22
    7ec2:	3c 01       	movw	r6, r24
    7ec4:	6c 87       	std	Y+12, r22	; 0x0c
    7ec6:	7d 87       	std	Y+13, r23	; 0x0d
    7ec8:	8e 87       	std	Y+14, r24	; 0x0e
    7eca:	9f 87       	std	Y+15, r25	; 0x0f
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    7ecc:	60 91 9e 0d 	lds	r22, 0x0D9E
    7ed0:	70 91 9f 0d 	lds	r23, 0x0D9F
    7ed4:	80 e0       	ldi	r24, 0x00	; 0
    7ed6:	90 e0       	ldi	r25, 0x00	; 0
    7ed8:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    7edc:	9b 01       	movw	r18, r22
    7ede:	ac 01       	movw	r20, r24
    7ee0:	c3 01       	movw	r24, r6
    7ee2:	b2 01       	movw	r22, r4
    7ee4:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    7ee8:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    7eec:	16 2f       	mov	r17, r22
    7eee:	80 91 9c 0d 	lds	r24, 0x0D9C
    7ef2:	90 91 9d 0d 	lds	r25, 0x0D9D
    7ef6:	bc 01       	movw	r22, r24
    7ef8:	80 e0       	ldi	r24, 0x00	; 0
    7efa:	90 e0       	ldi	r25, 0x00	; 0
    7efc:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    7f00:	9b 01       	movw	r18, r22
    7f02:	ac 01       	movw	r20, r24
    7f04:	c5 01       	movw	r24, r10
    7f06:	b4 01       	movw	r22, r8
    7f08:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    7f0c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    7f10:	01 e0       	ldi	r16, 0x01	; 1
    7f12:	21 e0       	ldi	r18, 0x01	; 1
    7f14:	41 2f       	mov	r20, r17
    7f16:	8d 2d       	mov	r24, r13
    7f18:	0e 94 33 3a 	call	0x7466	; 0x7466 <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8)
    7f1c:	88 84       	ldd	r8, Y+8	; 0x08
    7f1e:	99 84       	ldd	r9, Y+9	; 0x09
    7f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    7f22:	bb 84       	ldd	r11, Y+11	; 0x0b
    7f24:	00 91 9c 0d 	lds	r16, 0x0D9C
    7f28:	10 91 9d 0d 	lds	r17, 0x0D9D
    7f2c:	b8 01       	movw	r22, r16
    7f2e:	80 e0       	ldi	r24, 0x00	; 0
    7f30:	90 e0       	ldi	r25, 0x00	; 0
    7f32:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    7f36:	9b 01       	movw	r18, r22
    7f38:	ac 01       	movw	r20, r24
    7f3a:	c5 01       	movw	r24, r10
    7f3c:	b4 01       	movw	r22, r8
    7f3e:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <__cmpsf2>
    7f42:	87 fd       	sbrc	r24, 7
    7f44:	1a c0       	rjmp	.+52     	; 0x7f7a <animate_shot+0x13e>
    7f46:	20 e0       	ldi	r18, 0x00	; 0
    7f48:	30 e0       	ldi	r19, 0x00	; 0
    7f4a:	40 e0       	ldi	r20, 0x00	; 0
    7f4c:	51 e4       	ldi	r21, 0x41	; 65
    7f4e:	c5 01       	movw	r24, r10
    7f50:	b4 01       	movw	r22, r8
    7f52:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    7f56:	4b 01       	movw	r8, r22
    7f58:	5c 01       	movw	r10, r24
    7f5a:	a8 01       	movw	r20, r16
    7f5c:	40 52       	subi	r20, 0x20	; 32
    7f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    7f60:	ba 01       	movw	r22, r20
    7f62:	80 e0       	ldi	r24, 0x00	; 0
    7f64:	90 e0       	ldi	r25, 0x00	; 0
    7f66:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    7f6a:	9b 01       	movw	r18, r22
    7f6c:	ac 01       	movw	r20, r24
    7f6e:	c5 01       	movw	r24, r10
    7f70:	b4 01       	movw	r22, r8
    7f72:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    7f76:	18 16       	cp	r1, r24
    7f78:	74 f4       	brge	.+28     	; 0x7f96 <animate_shot+0x15a>
			{
				game.player.shot[i].active = 0;
    7f7a:	f7 01       	movw	r30, r14
    7f7c:	10 82       	st	Z, r1
				game.player.active_shots--;
    7f7e:	80 91 b1 0d 	lds	r24, 0x0DB1
    7f82:	81 50       	subi	r24, 0x01	; 1
    7f84:	80 93 b1 0d 	sts	0x0DB1, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    7f88:	01 e0       	ldi	r16, 0x01	; 1
    7f8a:	21 e0       	ldi	r18, 0x01	; 1
    7f8c:	40 e0       	ldi	r20, 0x00	; 0
    7f8e:	60 ee       	ldi	r22, 0xE0	; 224
    7f90:	8d 2d       	mov	r24, r13
    7f92:	0e 94 33 3a 	call	0x7466	; 0x7466 <LBMoveSprite>
    7f96:	fc e1       	ldi	r31, 0x1C	; 28
    7f98:	ef 0e       	add	r14, r31
    7f9a:	f1 1c       	adc	r15, r1
    7f9c:	d3 94       	inc	r13
    7f9e:	6c 96       	adiw	r28, 0x1c	; 28
}

void animate_shot()
{
	// Animate shots
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    7fa0:	8a e0       	ldi	r24, 0x0A	; 10
    7fa2:	d8 12       	cpse	r13, r24
    7fa4:	62 cf       	rjmp	.-316    	; 0x7e6a <animate_shot+0x2e>
				game.player.active_shots--;
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
		}
	}
}
    7fa6:	df 91       	pop	r29
    7fa8:	cf 91       	pop	r28
    7faa:	1f 91       	pop	r17
    7fac:	0f 91       	pop	r16
    7fae:	ff 90       	pop	r15
    7fb0:	ef 90       	pop	r14
    7fb2:	df 90       	pop	r13
    7fb4:	bf 90       	pop	r11
    7fb6:	af 90       	pop	r10
    7fb8:	9f 90       	pop	r9
    7fba:	8f 90       	pop	r8
    7fbc:	7f 90       	pop	r7
    7fbe:	6f 90       	pop	r6
    7fc0:	5f 90       	pop	r5
    7fc2:	4f 90       	pop	r4
    7fc4:	08 95       	ret

00007fc6 <update_player>:

void update_player()
{
    7fc6:	1f 93       	push	r17
    7fc8:	cf 93       	push	r28
    7fca:	df 93       	push	r29
    7fcc:	1f 92       	push	r1
    7fce:	cd b7       	in	r28, 0x3d	; 61
    7fd0:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & (IDLE|RUNNING))
    7fd2:	80 91 b2 0d 	lds	r24, 0x0DB2
    7fd6:	98 2f       	mov	r25, r24
    7fd8:	9a 70       	andi	r25, 0x0A	; 10
    7fda:	09 f4       	brne	.+2      	; 0x7fde <update_player+0x18>
    7fdc:	ad c0       	rjmp	.+346    	; 0x8138 <update_player+0x172>
	{
		if (!on_solid_ground(&game.player.shared, 2, 3))
    7fde:	43 e0       	ldi	r20, 0x03	; 3
    7fe0:	62 e0       	ldi	r22, 0x02	; 2
    7fe2:	80 ea       	ldi	r24, 0xA0	; 160
    7fe4:	9d e0       	ldi	r25, 0x0D	; 13
    7fe6:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <on_solid_ground>
    7fea:	88 23       	and	r24, r24
    7fec:	09 f4       	brne	.+2      	; 0x7ff0 <update_player+0x2a>
    7fee:	8e c0       	rjmp	.+284    	; 0x810c <update_player+0x146>
			game.player.flags = JUMPING;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), sprites[0].flags);
		}
		else
		{
			if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    7ff0:	10 91 51 0e 	lds	r17, 0x0E51
    7ff4:	17 ff       	sbrs	r17, 7
    7ff6:	34 c0       	rjmp	.+104    	; 0x8060 <update_player+0x9a>
    7ff8:	20 e0       	ldi	r18, 0x00	; 0
    7ffa:	30 e0       	ldi	r19, 0x00	; 0
    7ffc:	40 e0       	ldi	r20, 0x00	; 0
    7ffe:	5e e3       	ldi	r21, 0x3E	; 62
    8000:	60 91 a8 0d 	lds	r22, 0x0DA8
    8004:	70 91 a9 0d 	lds	r23, 0x0DA9
    8008:	80 91 aa 0d 	lds	r24, 0x0DAA
    800c:	90 91 ab 0d 	lds	r25, 0x0DAB
    8010:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8014:	20 e0       	ldi	r18, 0x00	; 0
    8016:	30 e0       	ldi	r19, 0x00	; 0
    8018:	40 e0       	ldi	r20, 0x00	; 0
    801a:	50 e4       	ldi	r21, 0x40	; 64
    801c:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8020:	20 e0       	ldi	r18, 0x00	; 0
    8022:	30 e0       	ldi	r19, 0x00	; 0
    8024:	4f e7       	ldi	r20, 0x7F	; 127
    8026:	53 e4       	ldi	r21, 0x43	; 67
    8028:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <__cmpsf2>
    802c:	87 ff       	sbrs	r24, 7
    802e:	18 c0       	rjmp	.+48     	; 0x8060 <update_player+0x9a>
			{
				game.player.shared.vx = RUN_SPEED;
    8030:	80 e0       	ldi	r24, 0x00	; 0
    8032:	90 e0       	ldi	r25, 0x00	; 0
    8034:	a0 e7       	ldi	r26, 0x70	; 112
    8036:	b2 e4       	ldi	r27, 0x42	; 66
    8038:	80 93 a0 0d 	sts	0x0DA0, r24
    803c:	90 93 a1 0d 	sts	0x0DA1, r25
    8040:	a0 93 a2 0d 	sts	0x0DA2, r26
    8044:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.flags = RUNNING;
    8048:	82 e0       	ldi	r24, 0x02	; 2
    804a:	80 93 b2 0d 	sts	0x0DB2, r24
				game.player.direction = D_RIGHT;
    804e:	81 e0       	ldi	r24, 0x01	; 1
    8050:	80 93 b4 0d 	sts	0x0DB4, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    8054:	8d e2       	ldi	r24, 0x2D	; 45
    8056:	9e e0       	ldi	r25, 0x0E	; 14
    8058:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    805c:	40 e0       	ldi	r20, 0x00	; 0
    805e:	42 c0       	rjmp	.+132    	; 0x80e4 <update_player+0x11e>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    8060:	16 ff       	sbrs	r17, 6
    8062:	2d c0       	rjmp	.+90     	; 0x80be <update_player+0xf8>
    8064:	60 91 9c 0d 	lds	r22, 0x0D9C
    8068:	70 91 9d 0d 	lds	r23, 0x0D9D
    806c:	80 e0       	ldi	r24, 0x00	; 0
    806e:	90 e0       	ldi	r25, 0x00	; 0
    8070:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    8074:	9b 01       	movw	r18, r22
    8076:	ac 01       	movw	r20, r24
    8078:	60 91 a8 0d 	lds	r22, 0x0DA8
    807c:	70 91 a9 0d 	lds	r23, 0x0DA9
    8080:	80 91 aa 0d 	lds	r24, 0x0DAA
    8084:	90 91 ab 0d 	lds	r25, 0x0DAB
    8088:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    808c:	18 16       	cp	r1, r24
    808e:	bc f4       	brge	.+46     	; 0x80be <update_player+0xf8>
			{
				game.player.shared.vx = -RUN_SPEED;
    8090:	80 e0       	ldi	r24, 0x00	; 0
    8092:	90 e0       	ldi	r25, 0x00	; 0
    8094:	a0 e7       	ldi	r26, 0x70	; 112
    8096:	b2 ec       	ldi	r27, 0xC2	; 194
    8098:	80 93 a0 0d 	sts	0x0DA0, r24
    809c:	90 93 a1 0d 	sts	0x0DA1, r25
    80a0:	a0 93 a2 0d 	sts	0x0DA2, r26
    80a4:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.flags = RUNNING;
    80a8:	82 e0       	ldi	r24, 0x02	; 2
    80aa:	80 93 b2 0d 	sts	0x0DB2, r24
				game.player.direction = D_LEFT;
    80ae:	10 92 b4 0d 	sts	0x0DB4, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    80b2:	8d e2       	ldi	r24, 0x2D	; 45
    80b4:	9e e0       	ldi	r25, 0x0E	; 14
    80b6:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    80ba:	41 e0       	ldi	r20, 0x01	; 1
    80bc:	13 c0       	rjmp	.+38     	; 0x80e4 <update_player+0x11e>
			}
			else
			{
				game.player.flags = IDLE;
    80be:	88 e0       	ldi	r24, 0x08	; 8
    80c0:	80 93 b2 0d 	sts	0x0DB2, r24
				game.player.shared.vx = 0;
    80c4:	10 92 a0 0d 	sts	0x0DA0, r1
    80c8:	10 92 a1 0d 	sts	0x0DA1, r1
    80cc:	10 92 a2 0d 	sts	0x0DA2, r1
    80d0:	10 92 a3 0d 	sts	0x0DA3, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    80d4:	40 91 05 05 	lds	r20, 0x0505
    80d8:	85 e2       	ldi	r24, 0x25	; 37
    80da:	9e e0       	ldi	r25, 0x0E	; 14
    80dc:	49 83       	std	Y+1, r20	; 0x01
    80de:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    80e2:	49 81       	ldd	r20, Y+1	; 0x01
    80e4:	bc 01       	movw	r22, r24
    80e6:	80 e0       	ldi	r24, 0x00	; 0
    80e8:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B)
    80ec:	80 91 4d 0e 	lds	r24, 0x0E4D
    80f0:	80 ff       	sbrs	r24, 0
    80f2:	a0 c0       	rjmp	.+320    	; 0x8234 <update_player+0x26e>
			{
				game.player.shared.vy = -JUMP_SPEED;
    80f4:	80 e0       	ldi	r24, 0x00	; 0
    80f6:	90 e0       	ldi	r25, 0x00	; 0
    80f8:	a6 e1       	ldi	r26, 0x16	; 22
    80fa:	b3 ec       	ldi	r27, 0xC3	; 195
    80fc:	80 93 a4 0d 	sts	0x0DA4, r24
    8100:	90 93 a5 0d 	sts	0x0DA5, r25
    8104:	a0 93 a6 0d 	sts	0x0DA6, r26
    8108:	b0 93 a7 0d 	sts	0x0DA7, r27
				game.player.shared.gravity = GRAVITY;
    810c:	8f ef       	ldi	r24, 0xFF	; 255
    810e:	80 93 b0 0d 	sts	0x0DB0, r24
				game.player.flags = JUMPING;
    8112:	81 e0       	ldi	r24, 0x01	; 1
    8114:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    8118:	40 91 05 05 	lds	r20, 0x0505
    811c:	85 e3       	ldi	r24, 0x35	; 53
    811e:	9e e0       	ldi	r25, 0x0E	; 14
    8120:	49 83       	std	Y+1, r20	; 0x01
    8122:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    8126:	49 81       	ldd	r20, Y+1	; 0x01
    8128:	bc 01       	movw	r22, r24
    812a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    812c:	0f 90       	pop	r0
    812e:	df 91       	pop	r29
    8130:	cf 91       	pop	r28
    8132:	1f 91       	pop	r17
			if (game.joypadState.pressed & BTN_B)
			{
				game.player.shared.vy = -JUMP_SPEED;
				game.player.shared.gravity = GRAVITY;
				game.player.flags = JUMPING;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    8134:	0c 94 e1 39 	jmp	0x73c2	; 0x73c2 <LBMapSprite>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    8138:	80 ff       	sbrs	r24, 0
    813a:	7c c0       	rjmp	.+248    	; 0x8234 <update_player+0x26e>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    813c:	10 91 51 0e 	lds	r17, 0x0E51
    8140:	17 ff       	sbrs	r17, 7
    8142:	31 c0       	rjmp	.+98     	; 0x81a6 <update_player+0x1e0>
    8144:	20 e0       	ldi	r18, 0x00	; 0
    8146:	30 e0       	ldi	r19, 0x00	; 0
    8148:	40 e0       	ldi	r20, 0x00	; 0
    814a:	5e e3       	ldi	r21, 0x3E	; 62
    814c:	60 91 a8 0d 	lds	r22, 0x0DA8
    8150:	70 91 a9 0d 	lds	r23, 0x0DA9
    8154:	80 91 aa 0d 	lds	r24, 0x0DAA
    8158:	90 91 ab 0d 	lds	r25, 0x0DAB
    815c:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8160:	20 e0       	ldi	r18, 0x00	; 0
    8162:	30 e0       	ldi	r19, 0x00	; 0
    8164:	40 e0       	ldi	r20, 0x00	; 0
    8166:	50 e4       	ldi	r21, 0x40	; 64
    8168:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    816c:	20 e0       	ldi	r18, 0x00	; 0
    816e:	30 e0       	ldi	r19, 0x00	; 0
    8170:	4f e7       	ldi	r20, 0x7F	; 127
    8172:	53 e4       	ldi	r21, 0x43	; 67
    8174:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <__cmpsf2>
    8178:	87 ff       	sbrs	r24, 7
    817a:	15 c0       	rjmp	.+42     	; 0x81a6 <update_player+0x1e0>
		{
			game.player.shared.vx = RUN_SPEED;
    817c:	80 e0       	ldi	r24, 0x00	; 0
    817e:	90 e0       	ldi	r25, 0x00	; 0
    8180:	a0 e7       	ldi	r26, 0x70	; 112
    8182:	b2 e4       	ldi	r27, 0x42	; 66
    8184:	80 93 a0 0d 	sts	0x0DA0, r24
    8188:	90 93 a1 0d 	sts	0x0DA1, r25
    818c:	a0 93 a2 0d 	sts	0x0DA2, r26
    8190:	b0 93 a3 0d 	sts	0x0DA3, r27
			game.player.direction = D_RIGHT;
    8194:	81 e0       	ldi	r24, 0x01	; 1
    8196:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    819a:	85 e3       	ldi	r24, 0x35	; 53
    819c:	9e e0       	ldi	r25, 0x0E	; 14
    819e:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    81a2:	40 e0       	ldi	r20, 0x00	; 0
    81a4:	3c c0       	rjmp	.+120    	; 0x821e <update_player+0x258>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    81a6:	16 ff       	sbrs	r17, 6
    81a8:	2a c0       	rjmp	.+84     	; 0x81fe <update_player+0x238>
    81aa:	60 91 9c 0d 	lds	r22, 0x0D9C
    81ae:	70 91 9d 0d 	lds	r23, 0x0D9D
    81b2:	80 e0       	ldi	r24, 0x00	; 0
    81b4:	90 e0       	ldi	r25, 0x00	; 0
    81b6:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    81ba:	9b 01       	movw	r18, r22
    81bc:	ac 01       	movw	r20, r24
    81be:	60 91 a8 0d 	lds	r22, 0x0DA8
    81c2:	70 91 a9 0d 	lds	r23, 0x0DA9
    81c6:	80 91 aa 0d 	lds	r24, 0x0DAA
    81ca:	90 91 ab 0d 	lds	r25, 0x0DAB
    81ce:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    81d2:	18 16       	cp	r1, r24
    81d4:	a4 f4       	brge	.+40     	; 0x81fe <update_player+0x238>
		{
			game.player.shared.vx = -RUN_SPEED;
    81d6:	80 e0       	ldi	r24, 0x00	; 0
    81d8:	90 e0       	ldi	r25, 0x00	; 0
    81da:	a0 e7       	ldi	r26, 0x70	; 112
    81dc:	b2 ec       	ldi	r27, 0xC2	; 194
    81de:	80 93 a0 0d 	sts	0x0DA0, r24
    81e2:	90 93 a1 0d 	sts	0x0DA1, r25
    81e6:	a0 93 a2 0d 	sts	0x0DA2, r26
    81ea:	b0 93 a3 0d 	sts	0x0DA3, r27
			game.player.direction = D_LEFT;
    81ee:	10 92 b4 0d 	sts	0x0DB4, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    81f2:	85 e3       	ldi	r24, 0x35	; 53
    81f4:	9e e0       	ldi	r25, 0x0E	; 14
    81f6:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    81fa:	41 e0       	ldi	r20, 0x01	; 1
    81fc:	10 c0       	rjmp	.+32     	; 0x821e <update_player+0x258>
		}
		else
		{
			game.player.shared.vx = 0;
    81fe:	10 92 a0 0d 	sts	0x0DA0, r1
    8202:	10 92 a1 0d 	sts	0x0DA1, r1
    8206:	10 92 a2 0d 	sts	0x0DA2, r1
    820a:	10 92 a3 0d 	sts	0x0DA3, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    820e:	40 91 05 05 	lds	r20, 0x0505
    8212:	85 e3       	ldi	r24, 0x35	; 53
    8214:	9e e0       	ldi	r25, 0x0E	; 14
    8216:	49 83       	std	Y+1, r20	; 0x01
    8218:	0e 94 61 39 	call	0x72c2	; 0x72c2 <LBGetNextFrame>
    821c:	49 81       	ldd	r20, Y+1	; 0x01
    821e:	bc 01       	movw	r22, r24
    8220:	80 e0       	ldi	r24, 0x00	; 0
    8222:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    8226:	80 91 b0 0d 	lds	r24, 0x0DB0
    822a:	81 11       	cpse	r24, r1
    822c:	03 c0       	rjmp	.+6      	; 0x8234 <update_player+0x26e>
		{
			game.player.flags = IDLE;
    822e:	88 e0       	ldi	r24, 0x08	; 8
    8230:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    8234:	0f 90       	pop	r0
    8236:	df 91       	pop	r29
    8238:	cf 91       	pop	r28
    823a:	1f 91       	pop	r17
    823c:	08 95       	ret

0000823e <pixel_overlap>:

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    823e:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    8240:	86 17       	cp	r24, r22
    8242:	97 07       	cpc	r25, r23
    8244:	28 f4       	brcc	.+10     	; 0x8250 <pixel_overlap+0x12>
    8246:	94 2f       	mov	r25, r20
    8248:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    824a:	89 2f       	mov	r24, r25
    824c:	86 1b       	sub	r24, r22
    824e:	01 c0       	rjmp	.+2      	; 0x8252 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    8250:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    8252:	e4 0f       	add	r30, r20
    8254:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    8256:	62 0f       	add	r22, r18
    8258:	71 1d       	adc	r23, r1
	if (s2 < s1)
    825a:	6e 17       	cp	r22, r30
    825c:	7f 07       	cpc	r23, r31
    825e:	10 f4       	brcc	.+4      	; 0x8264 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    8260:	6e 1b       	sub	r22, r30
    8262:	86 0f       	add	r24, r22
	}
	return result;
}
    8264:	08 95       	ret

00008266 <collision_detect_level>:

void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    8266:	2f 92       	push	r2
    8268:	3f 92       	push	r3
    826a:	4f 92       	push	r4
    826c:	5f 92       	push	r5
    826e:	6f 92       	push	r6
    8270:	7f 92       	push	r7
    8272:	8f 92       	push	r8
    8274:	9f 92       	push	r9
    8276:	af 92       	push	r10
    8278:	bf 92       	push	r11
    827a:	cf 92       	push	r12
    827c:	df 92       	push	r13
    827e:	ef 92       	push	r14
    8280:	ff 92       	push	r15
    8282:	0f 93       	push	r16
    8284:	1f 93       	push	r17
    8286:	cf 93       	push	r28
    8288:	df 93       	push	r29
    828a:	cd b7       	in	r28, 0x3d	; 61
    828c:	de b7       	in	r29, 0x3e	; 62
    828e:	2a 97       	sbiw	r28, 0x0a	; 10
    8290:	0f b6       	in	r0, 0x3f	; 63
    8292:	f8 94       	cli
    8294:	de bf       	out	0x3e, r29	; 62
    8296:	0f be       	out	0x3f, r0	; 63
    8298:	cd bf       	out	0x3d, r28	; 61
    829a:	9a 87       	std	Y+10, r25	; 0x0a
    829c:	89 87       	std	Y+9, r24	; 0x09
    829e:	16 2f       	mov	r17, r22
    82a0:	04 2f       	mov	r16, r20
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
		{
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    82a2:	28 e0       	ldi	r18, 0x08	; 8
    82a4:	42 9f       	mul	r20, r18
    82a6:	c0 01       	movw	r24, r0
    82a8:	11 24       	eor	r1, r1
    82aa:	e6 2f       	mov	r30, r22
    82ac:	f0 e0       	ldi	r31, 0x00	; 0
    82ae:	fe 83       	std	Y+6, r31	; 0x06
    82b0:	ed 83       	std	Y+5, r30	; 0x05
void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
    82b2:	21 2c       	mov	r2, r1
    82b4:	31 2c       	mov	r3, r1
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
		{
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    82b6:	2c 01       	movw	r4, r24
    82b8:	66 24       	eor	r6, r6
    82ba:	57 fc       	sbrc	r5, 7
    82bc:	60 94       	com	r6
    82be:	76 2c       	mov	r7, r6
void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
    82c0:	2d 81       	ldd	r18, Y+5	; 0x05
    82c2:	3e 81       	ldd	r19, Y+6	; 0x06
    82c4:	22 16       	cp	r2, r18
    82c6:	33 06       	cpc	r3, r19
    82c8:	09 f4       	brne	.+2      	; 0x82cc <collision_detect_level+0x66>
    82ca:	ba c1       	rjmp	.+884    	; 0x8640 <collision_detect_level+0x3da>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
    82cc:	b1 01       	movw	r22, r2
    82ce:	88 27       	eor	r24, r24
    82d0:	77 fd       	sbrc	r23, 7
    82d2:	80 95       	com	r24
    82d4:	98 2f       	mov	r25, r24
    82d6:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    82da:	6b 01       	movw	r12, r22
    82dc:	7c 01       	movw	r14, r24
    82de:	20 e0       	ldi	r18, 0x00	; 0
    82e0:	30 e0       	ldi	r19, 0x00	; 0
    82e2:	40 e0       	ldi	r20, 0x00	; 0
    82e4:	5e e3       	ldi	r21, 0x3E	; 62
    82e6:	e9 85       	ldd	r30, Y+9	; 0x09
    82e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    82ea:	64 85       	ldd	r22, Z+12	; 0x0c
    82ec:	75 85       	ldd	r23, Z+13	; 0x0d
    82ee:	86 85       	ldd	r24, Z+14	; 0x0e
    82f0:	97 85       	ldd	r25, Z+15	; 0x0f
    82f2:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    82f6:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    82fa:	4b 01       	movw	r8, r22
    82fc:	5c 01       	movw	r10, r24
    82fe:	20 e0       	ldi	r18, 0x00	; 0
    8300:	30 e0       	ldi	r19, 0x00	; 0
    8302:	40 e0       	ldi	r20, 0x00	; 0
    8304:	5e e3       	ldi	r21, 0x3E	; 62
    8306:	e9 85       	ldd	r30, Y+9	; 0x09
    8308:	fa 85       	ldd	r31, Y+10	; 0x0a
    830a:	60 85       	ldd	r22, Z+8	; 0x08
    830c:	71 85       	ldd	r23, Z+9	; 0x09
    830e:	82 85       	ldd	r24, Z+10	; 0x0a
    8310:	93 85       	ldd	r25, Z+11	; 0x0b
    8312:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8316:	a7 01       	movw	r20, r14
    8318:	96 01       	movw	r18, r12
    831a:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    831e:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8322:	a4 01       	movw	r20, r8
    8324:	80 91 91 0d 	lds	r24, 0x0D91
    8328:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    832c:	89 83       	std	Y+1, r24	; 0x01
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
    832e:	20 e0       	ldi	r18, 0x00	; 0
    8330:	30 e0       	ldi	r19, 0x00	; 0
    8332:	40 e0       	ldi	r20, 0x00	; 0
    8334:	5e e3       	ldi	r21, 0x3E	; 62
    8336:	e9 85       	ldd	r30, Y+9	; 0x09
    8338:	fa 85       	ldd	r31, Y+10	; 0x0a
    833a:	64 85       	ldd	r22, Z+12	; 0x0c
    833c:	75 85       	ldd	r23, Z+13	; 0x0d
    833e:	86 85       	ldd	r24, Z+14	; 0x0e
    8340:	97 85       	ldd	r25, Z+15	; 0x0f
    8342:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8346:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    834a:	4b 01       	movw	r8, r22
    834c:	5c 01       	movw	r10, r24
    834e:	20 e0       	ldi	r18, 0x00	; 0
    8350:	30 e0       	ldi	r19, 0x00	; 0
    8352:	40 ee       	ldi	r20, 0xE0	; 224
    8354:	50 e4       	ldi	r21, 0x40	; 64
    8356:	e9 85       	ldd	r30, Y+9	; 0x09
    8358:	fa 85       	ldd	r31, Y+10	; 0x0a
    835a:	60 85       	ldd	r22, Z+8	; 0x08
    835c:	71 85       	ldd	r23, Z+9	; 0x09
    835e:	82 85       	ldd	r24, Z+10	; 0x0a
    8360:	93 85       	ldd	r25, Z+11	; 0x0b
    8362:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8366:	20 e0       	ldi	r18, 0x00	; 0
    8368:	30 e0       	ldi	r19, 0x00	; 0
    836a:	40 e0       	ldi	r20, 0x00	; 0
    836c:	5e e3       	ldi	r21, 0x3E	; 62
    836e:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8372:	a7 01       	movw	r20, r14
    8374:	96 01       	movw	r18, r12
    8376:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    837a:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    837e:	a4 01       	movw	r20, r8
    8380:	80 91 91 0d 	lds	r24, 0x0D91
    8384:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    8388:	b8 2e       	mov	r11, r24
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    838a:	89 81       	ldd	r24, Y+1	; 0x01
    838c:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
    8390:	88 23       	and	r24, r24
    8392:	e1 f0       	breq	.+56     	; 0x83cc <collision_detect_level+0x166>
    8394:	e9 85       	ldd	r30, Y+9	; 0x09
    8396:	fa 85       	ldd	r31, Y+10	; 0x0a
    8398:	60 85       	ldd	r22, Z+8	; 0x08
    839a:	71 85       	ldd	r23, Z+9	; 0x09
    839c:	82 85       	ldd	r24, Z+10	; 0x0a
    839e:	93 85       	ldd	r25, Z+11	; 0x0b
    83a0:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    83a4:	dc 01       	movw	r26, r24
    83a6:	cb 01       	movw	r24, r22
    83a8:	fc 01       	movw	r30, r24
    83aa:	53 e0       	ldi	r21, 0x03	; 3
    83ac:	f6 95       	lsr	r31
    83ae:	e7 95       	ror	r30
    83b0:	5a 95       	dec	r21
    83b2:	e1 f7       	brne	.-8      	; 0x83ac <collision_detect_level+0x146>
    83b4:	bf 01       	movw	r22, r30
    83b6:	e3 e0       	ldi	r30, 0x03	; 3
    83b8:	66 0f       	add	r22, r22
    83ba:	77 1f       	adc	r23, r23
    83bc:	ea 95       	dec	r30
    83be:	e1 f7       	brne	.-8      	; 0x83b8 <collision_detect_level+0x152>
    83c0:	28 e0       	ldi	r18, 0x08	; 8
    83c2:	48 e0       	ldi	r20, 0x08	; 8
    83c4:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    83c8:	84 30       	cpi	r24, 0x04	; 4
    83ca:	90 f5       	brcc	.+100    	; 0x8430 <collision_detect_level+0x1ca>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    83cc:	8b 2d       	mov	r24, r11
    83ce:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    83d2:	88 23       	and	r24, r24
    83d4:	09 f4       	brne	.+2      	; 0x83d8 <collision_detect_level+0x172>
    83d6:	4e c0       	rjmp	.+156    	; 0x8474 <collision_detect_level+0x20e>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    83d8:	e9 85       	ldd	r30, Y+9	; 0x09
    83da:	fa 85       	ldd	r31, Y+10	; 0x0a
    83dc:	80 84       	ldd	r8, Z+8	; 0x08
    83de:	91 84       	ldd	r9, Z+9	; 0x09
    83e0:	a2 84       	ldd	r10, Z+10	; 0x0a
    83e2:	b3 84       	ldd	r11, Z+11	; 0x0b
    83e4:	20 e0       	ldi	r18, 0x00	; 0
    83e6:	30 e0       	ldi	r19, 0x00	; 0
    83e8:	40 ee       	ldi	r20, 0xE0	; 224
    83ea:	50 e4       	ldi	r21, 0x40	; 64
    83ec:	c5 01       	movw	r24, r10
    83ee:	b4 01       	movw	r22, r8
    83f0:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    83f4:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    83f8:	cb 01       	movw	r24, r22
    83fa:	23 e0       	ldi	r18, 0x03	; 3
    83fc:	96 95       	lsr	r25
    83fe:	87 95       	ror	r24
    8400:	2a 95       	dec	r18
    8402:	e1 f7       	brne	.-8      	; 0x83fc <collision_detect_level+0x196>
    8404:	9c 01       	movw	r18, r24
    8406:	43 e0       	ldi	r20, 0x03	; 3
    8408:	22 0f       	add	r18, r18
    840a:	33 1f       	adc	r19, r19
    840c:	4a 95       	dec	r20
    840e:	e1 f7       	brne	.-8      	; 0x8408 <collision_detect_level+0x1a2>
    8410:	3a 83       	std	Y+2, r19	; 0x02
    8412:	29 83       	std	Y+1, r18	; 0x01
    8414:	c5 01       	movw	r24, r10
    8416:	b4 01       	movw	r22, r8
    8418:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    841c:	dc 01       	movw	r26, r24
    841e:	cb 01       	movw	r24, r22
    8420:	28 e0       	ldi	r18, 0x08	; 8
    8422:	48 e0       	ldi	r20, 0x08	; 8
    8424:	69 81       	ldd	r22, Y+1	; 0x01
    8426:	7a 81       	ldd	r23, Y+2	; 0x02
    8428:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    842c:	84 30       	cpi	r24, 0x04	; 4
    842e:	10 f1       	brcs	.+68     	; 0x8474 <collision_detect_level+0x20e>
		{
			s->vy =  0;
    8430:	e9 85       	ldd	r30, Y+9	; 0x09
    8432:	fa 85       	ldd	r31, Y+10	; 0x0a
    8434:	14 82       	std	Z+4, r1	; 0x04
    8436:	15 82       	std	Z+5, r1	; 0x05
    8438:	16 82       	std	Z+6, r1	; 0x06
    843a:	17 82       	std	Z+7, r1	; 0x07
			s->y = (((u16) s->y / 8) + 1) * 8;
    843c:	64 85       	ldd	r22, Z+12	; 0x0c
    843e:	75 85       	ldd	r23, Z+13	; 0x0d
    8440:	86 85       	ldd	r24, Z+14	; 0x0e
    8442:	97 85       	ldd	r25, Z+15	; 0x0f
    8444:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8448:	83 e0       	ldi	r24, 0x03	; 3
    844a:	76 95       	lsr	r23
    844c:	67 95       	ror	r22
    844e:	8a 95       	dec	r24
    8450:	e1 f7       	brne	.-8      	; 0x844a <collision_detect_level+0x1e4>
    8452:	6f 5f       	subi	r22, 0xFF	; 255
    8454:	7f 4f       	sbci	r23, 0xFF	; 255
    8456:	93 e0       	ldi	r25, 0x03	; 3
    8458:	66 0f       	add	r22, r22
    845a:	77 1f       	adc	r23, r23
    845c:	9a 95       	dec	r25
    845e:	e1 f7       	brne	.-8      	; 0x8458 <collision_detect_level+0x1f2>
    8460:	80 e0       	ldi	r24, 0x00	; 0
    8462:	90 e0       	ldi	r25, 0x00	; 0
    8464:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    8468:	e9 85       	ldd	r30, Y+9	; 0x09
    846a:	fa 85       	ldd	r31, Y+10	; 0x0a
    846c:	64 87       	std	Z+12, r22	; 0x0c
    846e:	75 87       	std	Z+13, r23	; 0x0d
    8470:	86 87       	std	Z+14, r24	; 0x0e
    8472:	97 87       	std	Z+15, r25	; 0x0f
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    8474:	c3 01       	movw	r24, r6
    8476:	b2 01       	movw	r22, r4
    8478:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    847c:	4b 01       	movw	r8, r22
    847e:	5c 01       	movw	r10, r24
    8480:	e9 85       	ldd	r30, Y+9	; 0x09
    8482:	fa 85       	ldd	r31, Y+10	; 0x0a
    8484:	24 85       	ldd	r18, Z+12	; 0x0c
    8486:	35 85       	ldd	r19, Z+13	; 0x0d
    8488:	46 85       	ldd	r20, Z+14	; 0x0e
    848a:	57 85       	ldd	r21, Z+15	; 0x0f
    848c:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8490:	20 e0       	ldi	r18, 0x00	; 0
    8492:	30 e0       	ldi	r19, 0x00	; 0
    8494:	40 e8       	ldi	r20, 0x80	; 128
    8496:	5f e3       	ldi	r21, 0x3F	; 63
    8498:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    849c:	20 e0       	ldi	r18, 0x00	; 0
    849e:	30 e0       	ldi	r19, 0x00	; 0
    84a0:	40 e0       	ldi	r20, 0x00	; 0
    84a2:	5e e3       	ldi	r21, 0x3E	; 62
    84a4:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    84a8:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    84ac:	69 83       	std	Y+1, r22	; 0x01
    84ae:	7a 83       	std	Y+2, r23	; 0x02
    84b0:	8b 83       	std	Y+3, r24	; 0x03
    84b2:	9c 83       	std	Y+4, r25	; 0x04
    84b4:	20 e0       	ldi	r18, 0x00	; 0
    84b6:	30 e0       	ldi	r19, 0x00	; 0
    84b8:	40 e0       	ldi	r20, 0x00	; 0
    84ba:	5e e3       	ldi	r21, 0x3E	; 62
    84bc:	e9 85       	ldd	r30, Y+9	; 0x09
    84be:	fa 85       	ldd	r31, Y+10	; 0x0a
    84c0:	60 85       	ldd	r22, Z+8	; 0x08
    84c2:	71 85       	ldd	r23, Z+9	; 0x09
    84c4:	82 85       	ldd	r24, Z+10	; 0x0a
    84c6:	93 85       	ldd	r25, Z+11	; 0x0b
    84c8:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    84cc:	a7 01       	movw	r20, r14
    84ce:	96 01       	movw	r18, r12
    84d0:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    84d4:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    84d8:	49 81       	ldd	r20, Y+1	; 0x01
    84da:	5a 81       	ldd	r21, Y+2	; 0x02
    84dc:	80 91 91 0d 	lds	r24, 0x0D91
    84e0:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    84e4:	89 83       	std	Y+1, r24	; 0x01
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
    84e6:	e9 85       	ldd	r30, Y+9	; 0x09
    84e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    84ea:	24 85       	ldd	r18, Z+12	; 0x0c
    84ec:	35 85       	ldd	r19, Z+13	; 0x0d
    84ee:	46 85       	ldd	r20, Z+14	; 0x0e
    84f0:	57 85       	ldd	r21, Z+15	; 0x0f
    84f2:	c5 01       	movw	r24, r10
    84f4:	b4 01       	movw	r22, r8
    84f6:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    84fa:	20 e0       	ldi	r18, 0x00	; 0
    84fc:	30 e0       	ldi	r19, 0x00	; 0
    84fe:	40 e8       	ldi	r20, 0x80	; 128
    8500:	5f e3       	ldi	r21, 0x3F	; 63
    8502:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    8506:	20 e0       	ldi	r18, 0x00	; 0
    8508:	30 e0       	ldi	r19, 0x00	; 0
    850a:	40 e0       	ldi	r20, 0x00	; 0
    850c:	5e e3       	ldi	r21, 0x3E	; 62
    850e:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8512:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8516:	4b 01       	movw	r8, r22
    8518:	5c 01       	movw	r10, r24
    851a:	20 e0       	ldi	r18, 0x00	; 0
    851c:	30 e0       	ldi	r19, 0x00	; 0
    851e:	40 ee       	ldi	r20, 0xE0	; 224
    8520:	50 e4       	ldi	r21, 0x40	; 64
    8522:	e9 85       	ldd	r30, Y+9	; 0x09
    8524:	fa 85       	ldd	r31, Y+10	; 0x0a
    8526:	60 85       	ldd	r22, Z+8	; 0x08
    8528:	71 85       	ldd	r23, Z+9	; 0x09
    852a:	82 85       	ldd	r24, Z+10	; 0x0a
    852c:	93 85       	ldd	r25, Z+11	; 0x0b
    852e:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8532:	20 e0       	ldi	r18, 0x00	; 0
    8534:	30 e0       	ldi	r19, 0x00	; 0
    8536:	40 e0       	ldi	r20, 0x00	; 0
    8538:	5e e3       	ldi	r21, 0x3E	; 62
    853a:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    853e:	a7 01       	movw	r20, r14
    8540:	96 01       	movw	r18, r12
    8542:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8546:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    854a:	a4 01       	movw	r20, r8
    854c:	80 91 91 0d 	lds	r24, 0x0D91
    8550:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    8554:	f8 2e       	mov	r15, r24
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    8556:	89 81       	ldd	r24, Y+1	; 0x01
    8558:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
    855c:	88 23       	and	r24, r24
    855e:	e1 f0       	breq	.+56     	; 0x8598 <collision_detect_level+0x332>
    8560:	e9 85       	ldd	r30, Y+9	; 0x09
    8562:	fa 85       	ldd	r31, Y+10	; 0x0a
    8564:	60 85       	ldd	r22, Z+8	; 0x08
    8566:	71 85       	ldd	r23, Z+9	; 0x09
    8568:	82 85       	ldd	r24, Z+10	; 0x0a
    856a:	93 85       	ldd	r25, Z+11	; 0x0b
    856c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8570:	dc 01       	movw	r26, r24
    8572:	cb 01       	movw	r24, r22
    8574:	fc 01       	movw	r30, r24
    8576:	a3 e0       	ldi	r26, 0x03	; 3
    8578:	f6 95       	lsr	r31
    857a:	e7 95       	ror	r30
    857c:	aa 95       	dec	r26
    857e:	e1 f7       	brne	.-8      	; 0x8578 <collision_detect_level+0x312>
    8580:	bf 01       	movw	r22, r30
    8582:	b3 e0       	ldi	r27, 0x03	; 3
    8584:	66 0f       	add	r22, r22
    8586:	77 1f       	adc	r23, r23
    8588:	ba 95       	dec	r27
    858a:	e1 f7       	brne	.-8      	; 0x8584 <collision_detect_level+0x31e>
    858c:	28 e0       	ldi	r18, 0x08	; 8
    858e:	48 e0       	ldi	r20, 0x08	; 8
    8590:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    8594:	84 30       	cpi	r24, 0x04	; 4
    8596:	78 f5       	brcc	.+94     	; 0x85f6 <collision_detect_level+0x390>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8598:	8f 2d       	mov	r24, r15
    859a:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    859e:	88 23       	and	r24, r24
    85a0:	09 f4       	brne	.+2      	; 0x85a4 <collision_detect_level+0x33e>
    85a2:	4a c0       	rjmp	.+148    	; 0x8638 <collision_detect_level+0x3d2>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    85a4:	e9 85       	ldd	r30, Y+9	; 0x09
    85a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    85a8:	c0 84       	ldd	r12, Z+8	; 0x08
    85aa:	d1 84       	ldd	r13, Z+9	; 0x09
    85ac:	e2 84       	ldd	r14, Z+10	; 0x0a
    85ae:	f3 84       	ldd	r15, Z+11	; 0x0b
    85b0:	20 e0       	ldi	r18, 0x00	; 0
    85b2:	30 e0       	ldi	r19, 0x00	; 0
    85b4:	40 ee       	ldi	r20, 0xE0	; 224
    85b6:	50 e4       	ldi	r21, 0x40	; 64
    85b8:	c7 01       	movw	r24, r14
    85ba:	b6 01       	movw	r22, r12
    85bc:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    85c0:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    85c4:	cb 01       	movw	r24, r22
    85c6:	63 e0       	ldi	r22, 0x03	; 3
    85c8:	96 95       	lsr	r25
    85ca:	87 95       	ror	r24
    85cc:	6a 95       	dec	r22
    85ce:	e1 f7       	brne	.-8      	; 0x85c8 <collision_detect_level+0x362>
    85d0:	5c 01       	movw	r10, r24
    85d2:	73 e0       	ldi	r23, 0x03	; 3
    85d4:	aa 0c       	add	r10, r10
    85d6:	bb 1c       	adc	r11, r11
    85d8:	7a 95       	dec	r23
    85da:	e1 f7       	brne	.-8      	; 0x85d4 <collision_detect_level+0x36e>
    85dc:	c7 01       	movw	r24, r14
    85de:	b6 01       	movw	r22, r12
    85e0:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    85e4:	dc 01       	movw	r26, r24
    85e6:	cb 01       	movw	r24, r22
    85e8:	28 e0       	ldi	r18, 0x08	; 8
    85ea:	48 e0       	ldi	r20, 0x08	; 8
    85ec:	b5 01       	movw	r22, r10
    85ee:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    85f2:	84 30       	cpi	r24, 0x04	; 4
    85f4:	08 f1       	brcs	.+66     	; 0x8638 <collision_detect_level+0x3d2>
		{
			s->vy =  0;
    85f6:	e9 85       	ldd	r30, Y+9	; 0x09
    85f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    85fa:	14 82       	std	Z+4, r1	; 0x04
    85fc:	15 82       	std	Z+5, r1	; 0x05
    85fe:	16 82       	std	Z+6, r1	; 0x06
    8600:	17 82       	std	Z+7, r1	; 0x07
			s->gravity = 0;
    8602:	10 8a       	std	Z+16, r1	; 0x10
			s->y = ((u16) s->y / 8) * 8;
    8604:	64 85       	ldd	r22, Z+12	; 0x0c
    8606:	75 85       	ldd	r23, Z+13	; 0x0d
    8608:	86 85       	ldd	r24, Z+14	; 0x0e
    860a:	97 85       	ldd	r25, Z+15	; 0x0f
    860c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8610:	43 e0       	ldi	r20, 0x03	; 3
    8612:	76 95       	lsr	r23
    8614:	67 95       	ror	r22
    8616:	4a 95       	dec	r20
    8618:	e1 f7       	brne	.-8      	; 0x8612 <collision_detect_level+0x3ac>
    861a:	53 e0       	ldi	r21, 0x03	; 3
    861c:	66 0f       	add	r22, r22
    861e:	77 1f       	adc	r23, r23
    8620:	5a 95       	dec	r21
    8622:	e1 f7       	brne	.-8      	; 0x861c <collision_detect_level+0x3b6>
    8624:	80 e0       	ldi	r24, 0x00	; 0
    8626:	90 e0       	ldi	r25, 0x00	; 0
    8628:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    862c:	e9 85       	ldd	r30, Y+9	; 0x09
    862e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8630:	64 87       	std	Z+12, r22	; 0x0c
    8632:	75 87       	std	Z+13, r23	; 0x0d
    8634:	86 87       	std	Z+14, r24	; 0x0e
    8636:	97 87       	std	Z+15, r25	; 0x0f
    8638:	ff ef       	ldi	r31, 0xFF	; 255
    863a:	2f 1a       	sub	r2, r31
    863c:	3f 0a       	sbc	r3, r31
    863e:	40 ce       	rjmp	.-896    	; 0x82c0 <collision_detect_level+0x5a>
		{
			s->vx =  0;
			s->x = (((u16) s->x / 8) + 1) * 8;
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    8640:	38 e0       	ldi	r19, 0x08	; 8
    8642:	13 9f       	mul	r17, r19
    8644:	c0 01       	movw	r24, r0
    8646:	11 24       	eor	r1, r1
    8648:	10 e0       	ldi	r17, 0x00	; 0
    864a:	1a 82       	std	Y+2, r1	; 0x02
    864c:	19 82       	std	Y+1, r1	; 0x01
    864e:	1c 01       	movw	r2, r24
    8650:	44 24       	eor	r4, r4
    8652:	37 fc       	sbrc	r3, 7
    8654:	40 94       	com	r4
    8656:	54 2c       	mov	r5, r4
			s->y = ((u16) s->y / 8) * 8;
		}
	}
	
	// Left and Right
	for (u8 y = 0; y < tile_height; y++)
    8658:	89 81       	ldd	r24, Y+1	; 0x01
    865a:	9a 81       	ldd	r25, Y+2	; 0x02
    865c:	80 17       	cp	r24, r16
    865e:	91 07       	cpc	r25, r17
    8660:	09 f4       	brne	.+2      	; 0x8664 <collision_detect_level+0x3fe>
    8662:	bb c1       	rjmp	.+886    	; 0x89da <collision_detect_level+0x774>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
    8664:	e9 81       	ldd	r30, Y+1	; 0x01
    8666:	fa 81       	ldd	r31, Y+2	; 0x02
    8668:	bf 01       	movw	r22, r30
    866a:	88 27       	eor	r24, r24
    866c:	77 fd       	sbrc	r23, 7
    866e:	80 95       	com	r24
    8670:	98 2f       	mov	r25, r24
    8672:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    8676:	6b 01       	movw	r12, r22
    8678:	7c 01       	movw	r14, r24
    867a:	20 e0       	ldi	r18, 0x00	; 0
    867c:	30 e0       	ldi	r19, 0x00	; 0
    867e:	40 e0       	ldi	r20, 0x00	; 0
    8680:	5e e3       	ldi	r21, 0x3E	; 62
    8682:	e9 85       	ldd	r30, Y+9	; 0x09
    8684:	fa 85       	ldd	r31, Y+10	; 0x0a
    8686:	64 85       	ldd	r22, Z+12	; 0x0c
    8688:	75 85       	ldd	r23, Z+13	; 0x0d
    868a:	86 85       	ldd	r24, Z+14	; 0x0e
    868c:	97 85       	ldd	r25, Z+15	; 0x0f
    868e:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8692:	a7 01       	movw	r20, r14
    8694:	96 01       	movw	r18, r12
    8696:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    869a:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    869e:	4b 01       	movw	r8, r22
    86a0:	5c 01       	movw	r10, r24
    86a2:	20 e0       	ldi	r18, 0x00	; 0
    86a4:	30 e0       	ldi	r19, 0x00	; 0
    86a6:	40 e0       	ldi	r20, 0x00	; 0
    86a8:	5e e3       	ldi	r21, 0x3E	; 62
    86aa:	e9 85       	ldd	r30, Y+9	; 0x09
    86ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    86ae:	60 85       	ldd	r22, Z+8	; 0x08
    86b0:	71 85       	ldd	r23, Z+9	; 0x09
    86b2:	82 85       	ldd	r24, Z+10	; 0x0a
    86b4:	93 85       	ldd	r25, Z+11	; 0x0b
    86b6:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    86ba:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    86be:	a4 01       	movw	r20, r8
    86c0:	80 91 91 0d 	lds	r24, 0x0D91
    86c4:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    86c8:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
    86ca:	20 e0       	ldi	r18, 0x00	; 0
    86cc:	30 e0       	ldi	r19, 0x00	; 0
    86ce:	40 ee       	ldi	r20, 0xE0	; 224
    86d0:	50 e4       	ldi	r21, 0x40	; 64
    86d2:	e9 85       	ldd	r30, Y+9	; 0x09
    86d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    86d6:	64 85       	ldd	r22, Z+12	; 0x0c
    86d8:	75 85       	ldd	r23, Z+13	; 0x0d
    86da:	86 85       	ldd	r24, Z+14	; 0x0e
    86dc:	97 85       	ldd	r25, Z+15	; 0x0f
    86de:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    86e2:	20 e0       	ldi	r18, 0x00	; 0
    86e4:	30 e0       	ldi	r19, 0x00	; 0
    86e6:	40 e0       	ldi	r20, 0x00	; 0
    86e8:	5e e3       	ldi	r21, 0x3E	; 62
    86ea:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    86ee:	a7 01       	movw	r20, r14
    86f0:	96 01       	movw	r18, r12
    86f2:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    86f6:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    86fa:	4b 01       	movw	r8, r22
    86fc:	5c 01       	movw	r10, r24
    86fe:	20 e0       	ldi	r18, 0x00	; 0
    8700:	30 e0       	ldi	r19, 0x00	; 0
    8702:	40 e0       	ldi	r20, 0x00	; 0
    8704:	5e e3       	ldi	r21, 0x3E	; 62
    8706:	e9 85       	ldd	r30, Y+9	; 0x09
    8708:	fa 85       	ldd	r31, Y+10	; 0x0a
    870a:	60 85       	ldd	r22, Z+8	; 0x08
    870c:	71 85       	ldd	r23, Z+9	; 0x09
    870e:	82 85       	ldd	r24, Z+10	; 0x0a
    8710:	93 85       	ldd	r25, Z+11	; 0x0b
    8712:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8716:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    871a:	a4 01       	movw	r20, r8
    871c:	80 91 91 0d 	lds	r24, 0x0D91
    8720:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    8724:	b8 2e       	mov	r11, r24
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8726:	87 2d       	mov	r24, r7
    8728:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
    872c:	88 23       	and	r24, r24
    872e:	e1 f0       	breq	.+56     	; 0x8768 <collision_detect_level+0x502>
    8730:	e9 85       	ldd	r30, Y+9	; 0x09
    8732:	fa 85       	ldd	r31, Y+10	; 0x0a
    8734:	64 85       	ldd	r22, Z+12	; 0x0c
    8736:	75 85       	ldd	r23, Z+13	; 0x0d
    8738:	86 85       	ldd	r24, Z+14	; 0x0e
    873a:	97 85       	ldd	r25, Z+15	; 0x0f
    873c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8740:	dc 01       	movw	r26, r24
    8742:	cb 01       	movw	r24, r22
    8744:	fc 01       	movw	r30, r24
    8746:	23 e0       	ldi	r18, 0x03	; 3
    8748:	f6 95       	lsr	r31
    874a:	e7 95       	ror	r30
    874c:	2a 95       	dec	r18
    874e:	e1 f7       	brne	.-8      	; 0x8748 <collision_detect_level+0x4e2>
    8750:	bf 01       	movw	r22, r30
    8752:	33 e0       	ldi	r19, 0x03	; 3
    8754:	66 0f       	add	r22, r22
    8756:	77 1f       	adc	r23, r23
    8758:	3a 95       	dec	r19
    875a:	e1 f7       	brne	.-8      	; 0x8754 <collision_detect_level+0x4ee>
    875c:	28 e0       	ldi	r18, 0x08	; 8
    875e:	48 e0       	ldi	r20, 0x08	; 8
    8760:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    8764:	84 30       	cpi	r24, 0x04	; 4
    8766:	70 f5       	brcc	.+92     	; 0x87c4 <collision_detect_level+0x55e>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8768:	8b 2d       	mov	r24, r11
    876a:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
	// Left and Right
	for (u8 y = 0; y < tile_height; y++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    876e:	88 23       	and	r24, r24
    8770:	09 f4       	brne	.+2      	; 0x8774 <collision_detect_level+0x50e>
    8772:	4a c0       	rjmp	.+148    	; 0x8808 <collision_detect_level+0x5a2>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8774:	e9 85       	ldd	r30, Y+9	; 0x09
    8776:	fa 85       	ldd	r31, Y+10	; 0x0a
    8778:	84 84       	ldd	r8, Z+12	; 0x0c
    877a:	95 84       	ldd	r9, Z+13	; 0x0d
    877c:	a6 84       	ldd	r10, Z+14	; 0x0e
    877e:	b7 84       	ldd	r11, Z+15	; 0x0f
    8780:	20 e0       	ldi	r18, 0x00	; 0
    8782:	30 e0       	ldi	r19, 0x00	; 0
    8784:	40 ee       	ldi	r20, 0xE0	; 224
    8786:	50 e4       	ldi	r21, 0x40	; 64
    8788:	c5 01       	movw	r24, r10
    878a:	b4 01       	movw	r22, r8
    878c:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8790:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8794:	a3 e0       	ldi	r26, 0x03	; 3
    8796:	76 95       	lsr	r23
    8798:	67 95       	ror	r22
    879a:	aa 95       	dec	r26
    879c:	e1 f7       	brne	.-8      	; 0x8796 <collision_detect_level+0x530>
    879e:	3b 01       	movw	r6, r22
    87a0:	b3 e0       	ldi	r27, 0x03	; 3
    87a2:	66 0c       	add	r6, r6
    87a4:	77 1c       	adc	r7, r7
    87a6:	ba 95       	dec	r27
    87a8:	e1 f7       	brne	.-8      	; 0x87a2 <collision_detect_level+0x53c>
    87aa:	c5 01       	movw	r24, r10
    87ac:	b4 01       	movw	r22, r8
    87ae:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    87b2:	dc 01       	movw	r26, r24
    87b4:	cb 01       	movw	r24, r22
    87b6:	28 e0       	ldi	r18, 0x08	; 8
    87b8:	48 e0       	ldi	r20, 0x08	; 8
    87ba:	b3 01       	movw	r22, r6
    87bc:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    87c0:	84 30       	cpi	r24, 0x04	; 4
    87c2:	10 f1       	brcs	.+68     	; 0x8808 <collision_detect_level+0x5a2>
		{
			s->vx =  0;
    87c4:	e9 85       	ldd	r30, Y+9	; 0x09
    87c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    87c8:	10 82       	st	Z, r1
    87ca:	11 82       	std	Z+1, r1	; 0x01
    87cc:	12 82       	std	Z+2, r1	; 0x02
    87ce:	13 82       	std	Z+3, r1	; 0x03
			s->x = (((u16) s->x / 8) + 1) * 8;
    87d0:	60 85       	ldd	r22, Z+8	; 0x08
    87d2:	71 85       	ldd	r23, Z+9	; 0x09
    87d4:	82 85       	ldd	r24, Z+10	; 0x0a
    87d6:	93 85       	ldd	r25, Z+11	; 0x0b
    87d8:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    87dc:	e3 e0       	ldi	r30, 0x03	; 3
    87de:	76 95       	lsr	r23
    87e0:	67 95       	ror	r22
    87e2:	ea 95       	dec	r30
    87e4:	e1 f7       	brne	.-8      	; 0x87de <collision_detect_level+0x578>
    87e6:	6f 5f       	subi	r22, 0xFF	; 255
    87e8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ea:	f3 e0       	ldi	r31, 0x03	; 3
    87ec:	66 0f       	add	r22, r22
    87ee:	77 1f       	adc	r23, r23
    87f0:	fa 95       	dec	r31
    87f2:	e1 f7       	brne	.-8      	; 0x87ec <collision_detect_level+0x586>
    87f4:	80 e0       	ldi	r24, 0x00	; 0
    87f6:	90 e0       	ldi	r25, 0x00	; 0
    87f8:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    87fc:	e9 85       	ldd	r30, Y+9	; 0x09
    87fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    8800:	60 87       	std	Z+8, r22	; 0x08
    8802:	71 87       	std	Z+9, r23	; 0x09
    8804:	82 87       	std	Z+10, r24	; 0x0a
    8806:	93 87       	std	Z+11, r25	; 0x0b
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    8808:	c2 01       	movw	r24, r4
    880a:	b1 01       	movw	r22, r2
    880c:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    8810:	4b 01       	movw	r8, r22
    8812:	5c 01       	movw	r10, r24
    8814:	20 e0       	ldi	r18, 0x00	; 0
    8816:	30 e0       	ldi	r19, 0x00	; 0
    8818:	40 e0       	ldi	r20, 0x00	; 0
    881a:	5e e3       	ldi	r21, 0x3E	; 62
    881c:	e9 85       	ldd	r30, Y+9	; 0x09
    881e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8820:	64 85       	ldd	r22, Z+12	; 0x0c
    8822:	75 85       	ldd	r23, Z+13	; 0x0d
    8824:	86 85       	ldd	r24, Z+14	; 0x0e
    8826:	97 85       	ldd	r25, Z+15	; 0x0f
    8828:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    882c:	a7 01       	movw	r20, r14
    882e:	96 01       	movw	r18, r12
    8830:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8834:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8838:	6d 83       	std	Y+5, r22	; 0x05
    883a:	7e 83       	std	Y+6, r23	; 0x06
    883c:	8f 83       	std	Y+7, r24	; 0x07
    883e:	98 87       	std	Y+8, r25	; 0x08
    8840:	e9 85       	ldd	r30, Y+9	; 0x09
    8842:	fa 85       	ldd	r31, Y+10	; 0x0a
    8844:	20 85       	ldd	r18, Z+8	; 0x08
    8846:	31 85       	ldd	r19, Z+9	; 0x09
    8848:	42 85       	ldd	r20, Z+10	; 0x0a
    884a:	53 85       	ldd	r21, Z+11	; 0x0b
    884c:	c5 01       	movw	r24, r10
    884e:	b4 01       	movw	r22, r8
    8850:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8854:	20 e0       	ldi	r18, 0x00	; 0
    8856:	30 e0       	ldi	r19, 0x00	; 0
    8858:	40 e8       	ldi	r20, 0x80	; 128
    885a:	5f e3       	ldi	r21, 0x3F	; 63
    885c:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    8860:	20 e0       	ldi	r18, 0x00	; 0
    8862:	30 e0       	ldi	r19, 0x00	; 0
    8864:	40 e0       	ldi	r20, 0x00	; 0
    8866:	5e e3       	ldi	r21, 0x3E	; 62
    8868:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    886c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8870:	4d 81       	ldd	r20, Y+5	; 0x05
    8872:	5e 81       	ldd	r21, Y+6	; 0x06
    8874:	80 91 91 0d 	lds	r24, 0x0D91
    8878:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    887c:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
    887e:	20 e0       	ldi	r18, 0x00	; 0
    8880:	30 e0       	ldi	r19, 0x00	; 0
    8882:	40 ee       	ldi	r20, 0xE0	; 224
    8884:	50 e4       	ldi	r21, 0x40	; 64
    8886:	e9 85       	ldd	r30, Y+9	; 0x09
    8888:	fa 85       	ldd	r31, Y+10	; 0x0a
    888a:	64 85       	ldd	r22, Z+12	; 0x0c
    888c:	75 85       	ldd	r23, Z+13	; 0x0d
    888e:	86 85       	ldd	r24, Z+14	; 0x0e
    8890:	97 85       	ldd	r25, Z+15	; 0x0f
    8892:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8896:	20 e0       	ldi	r18, 0x00	; 0
    8898:	30 e0       	ldi	r19, 0x00	; 0
    889a:	40 e0       	ldi	r20, 0x00	; 0
    889c:	5e e3       	ldi	r21, 0x3E	; 62
    889e:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    88a2:	a7 01       	movw	r20, r14
    88a4:	96 01       	movw	r18, r12
    88a6:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    88aa:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    88ae:	6b 01       	movw	r12, r22
    88b0:	7c 01       	movw	r14, r24
    88b2:	e9 85       	ldd	r30, Y+9	; 0x09
    88b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    88b6:	20 85       	ldd	r18, Z+8	; 0x08
    88b8:	31 85       	ldd	r19, Z+9	; 0x09
    88ba:	42 85       	ldd	r20, Z+10	; 0x0a
    88bc:	53 85       	ldd	r21, Z+11	; 0x0b
    88be:	c5 01       	movw	r24, r10
    88c0:	b4 01       	movw	r22, r8
    88c2:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    88c6:	20 e0       	ldi	r18, 0x00	; 0
    88c8:	30 e0       	ldi	r19, 0x00	; 0
    88ca:	40 e8       	ldi	r20, 0x80	; 128
    88cc:	5f e3       	ldi	r21, 0x3F	; 63
    88ce:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    88d2:	20 e0       	ldi	r18, 0x00	; 0
    88d4:	30 e0       	ldi	r19, 0x00	; 0
    88d6:	40 e0       	ldi	r20, 0x00	; 0
    88d8:	5e e3       	ldi	r21, 0x3E	; 62
    88da:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    88de:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    88e2:	a6 01       	movw	r20, r12
    88e4:	80 91 91 0d 	lds	r24, 0x0D91
    88e8:	0e 94 4b 3c 	call	0x7896	; 0x7896 <get_level_tile>
    88ec:	f8 2e       	mov	r15, r24
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    88ee:	87 2d       	mov	r24, r7
    88f0:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
    88f4:	88 23       	and	r24, r24
    88f6:	e1 f0       	breq	.+56     	; 0x8930 <collision_detect_level+0x6ca>
    88f8:	e9 85       	ldd	r30, Y+9	; 0x09
    88fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    88fc:	64 85       	ldd	r22, Z+12	; 0x0c
    88fe:	75 85       	ldd	r23, Z+13	; 0x0d
    8900:	86 85       	ldd	r24, Z+14	; 0x0e
    8902:	97 85       	ldd	r25, Z+15	; 0x0f
    8904:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8908:	dc 01       	movw	r26, r24
    890a:	cb 01       	movw	r24, r22
    890c:	fc 01       	movw	r30, r24
    890e:	43 e0       	ldi	r20, 0x03	; 3
    8910:	f6 95       	lsr	r31
    8912:	e7 95       	ror	r30
    8914:	4a 95       	dec	r20
    8916:	e1 f7       	brne	.-8      	; 0x8910 <collision_detect_level+0x6aa>
    8918:	bf 01       	movw	r22, r30
    891a:	53 e0       	ldi	r21, 0x03	; 3
    891c:	66 0f       	add	r22, r22
    891e:	77 1f       	adc	r23, r23
    8920:	5a 95       	dec	r21
    8922:	e1 f7       	brne	.-8      	; 0x891c <collision_detect_level+0x6b6>
    8924:	28 e0       	ldi	r18, 0x08	; 8
    8926:	48 e0       	ldi	r20, 0x08	; 8
    8928:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    892c:	84 30       	cpi	r24, 0x04	; 4
    892e:	70 f5       	brcc	.+92     	; 0x898c <collision_detect_level+0x726>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8930:	8f 2d       	mov	r24, r15
    8932:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <solid_tile>
			s->x = (((u16) s->x / 8) + 1) * 8;
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8936:	88 23       	and	r24, r24
    8938:	09 f4       	brne	.+2      	; 0x893c <collision_detect_level+0x6d6>
    893a:	48 c0       	rjmp	.+144    	; 0x89cc <collision_detect_level+0x766>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    893c:	e9 85       	ldd	r30, Y+9	; 0x09
    893e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8940:	84 84       	ldd	r8, Z+12	; 0x0c
    8942:	95 84       	ldd	r9, Z+13	; 0x0d
    8944:	a6 84       	ldd	r10, Z+14	; 0x0e
    8946:	b7 84       	ldd	r11, Z+15	; 0x0f
    8948:	20 e0       	ldi	r18, 0x00	; 0
    894a:	30 e0       	ldi	r19, 0x00	; 0
    894c:	40 ee       	ldi	r20, 0xE0	; 224
    894e:	50 e4       	ldi	r21, 0x40	; 64
    8950:	c5 01       	movw	r24, r10
    8952:	b4 01       	movw	r22, r8
    8954:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8958:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    895c:	23 e0       	ldi	r18, 0x03	; 3
    895e:	76 95       	lsr	r23
    8960:	67 95       	ror	r22
    8962:	2a 95       	dec	r18
    8964:	e1 f7       	brne	.-8      	; 0x895e <collision_detect_level+0x6f8>
    8966:	7b 01       	movw	r14, r22
    8968:	33 e0       	ldi	r19, 0x03	; 3
    896a:	ee 0c       	add	r14, r14
    896c:	ff 1c       	adc	r15, r15
    896e:	3a 95       	dec	r19
    8970:	e1 f7       	brne	.-8      	; 0x896a <collision_detect_level+0x704>
    8972:	c5 01       	movw	r24, r10
    8974:	b4 01       	movw	r22, r8
    8976:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    897a:	dc 01       	movw	r26, r24
    897c:	cb 01       	movw	r24, r22
    897e:	28 e0       	ldi	r18, 0x08	; 8
    8980:	48 e0       	ldi	r20, 0x08	; 8
    8982:	b7 01       	movw	r22, r14
    8984:	0e 94 1f 41 	call	0x823e	; 0x823e <pixel_overlap>
    8988:	84 30       	cpi	r24, 0x04	; 4
    898a:	00 f1       	brcs	.+64     	; 0x89cc <collision_detect_level+0x766>
		{
			s->vx =  0;
    898c:	e9 85       	ldd	r30, Y+9	; 0x09
    898e:	fa 85       	ldd	r31, Y+10	; 0x0a
    8990:	10 82       	st	Z, r1
    8992:	11 82       	std	Z+1, r1	; 0x01
    8994:	12 82       	std	Z+2, r1	; 0x02
    8996:	13 82       	std	Z+3, r1	; 0x03
			s->x = ((u16) s->x / 8) * 8;
    8998:	60 85       	ldd	r22, Z+8	; 0x08
    899a:	71 85       	ldd	r23, Z+9	; 0x09
    899c:	82 85       	ldd	r24, Z+10	; 0x0a
    899e:	93 85       	ldd	r25, Z+11	; 0x0b
    89a0:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    89a4:	83 e0       	ldi	r24, 0x03	; 3
    89a6:	76 95       	lsr	r23
    89a8:	67 95       	ror	r22
    89aa:	8a 95       	dec	r24
    89ac:	e1 f7       	brne	.-8      	; 0x89a6 <collision_detect_level+0x740>
    89ae:	93 e0       	ldi	r25, 0x03	; 3
    89b0:	66 0f       	add	r22, r22
    89b2:	77 1f       	adc	r23, r23
    89b4:	9a 95       	dec	r25
    89b6:	e1 f7       	brne	.-8      	; 0x89b0 <collision_detect_level+0x74a>
    89b8:	80 e0       	ldi	r24, 0x00	; 0
    89ba:	90 e0       	ldi	r25, 0x00	; 0
    89bc:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    89c0:	e9 85       	ldd	r30, Y+9	; 0x09
    89c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    89c4:	60 87       	std	Z+8, r22	; 0x08
    89c6:	71 87       	std	Z+9, r23	; 0x09
    89c8:	82 87       	std	Z+10, r24	; 0x0a
    89ca:	93 87       	std	Z+11, r25	; 0x0b
    89cc:	29 81       	ldd	r18, Y+1	; 0x01
    89ce:	3a 81       	ldd	r19, Y+2	; 0x02
    89d0:	2f 5f       	subi	r18, 0xFF	; 255
    89d2:	3f 4f       	sbci	r19, 0xFF	; 255
    89d4:	3a 83       	std	Y+2, r19	; 0x02
    89d6:	29 83       	std	Y+1, r18	; 0x01
    89d8:	3f ce       	rjmp	.-898    	; 0x8658 <collision_detect_level+0x3f2>
		}
	}
}
    89da:	2a 96       	adiw	r28, 0x0a	; 10
    89dc:	0f b6       	in	r0, 0x3f	; 63
    89de:	f8 94       	cli
    89e0:	de bf       	out	0x3e, r29	; 62
    89e2:	0f be       	out	0x3f, r0	; 63
    89e4:	cd bf       	out	0x3d, r28	; 61
    89e6:	df 91       	pop	r29
    89e8:	cf 91       	pop	r28
    89ea:	1f 91       	pop	r17
    89ec:	0f 91       	pop	r16
    89ee:	ff 90       	pop	r15
    89f0:	ef 90       	pop	r14
    89f2:	df 90       	pop	r13
    89f4:	cf 90       	pop	r12
    89f6:	bf 90       	pop	r11
    89f8:	af 90       	pop	r10
    89fa:	9f 90       	pop	r9
    89fc:	8f 90       	pop	r8
    89fe:	7f 90       	pop	r7
    8a00:	6f 90       	pop	r6
    8a02:	5f 90       	pop	r5
    8a04:	4f 90       	pop	r4
    8a06:	3f 90       	pop	r3
    8a08:	2f 90       	pop	r2
    8a0a:	08 95       	ret

00008a0c <animate_player>:

void animate_player()
{
    8a0c:	cf 92       	push	r12
    8a0e:	df 92       	push	r13
    8a10:	ef 92       	push	r14
    8a12:	ff 92       	push	r15
    8a14:	0f 93       	push	r16
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    8a16:	60 91 b0 0d 	lds	r22, 0x0DB0
    8a1a:	70 e0       	ldi	r23, 0x00	; 0
    8a1c:	80 e0       	ldi	r24, 0x00	; 0
    8a1e:	90 e0       	ldi	r25, 0x00	; 0
    8a20:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <__floatsisf>
    8a24:	29 e8       	ldi	r18, 0x89	; 137
    8a26:	38 e8       	ldi	r19, 0x88	; 136
    8a28:	48 e8       	ldi	r20, 0x88	; 136
    8a2a:	5c e3       	ldi	r21, 0x3C	; 60
    8a2c:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8a30:	20 91 a4 0d 	lds	r18, 0x0DA4
    8a34:	30 91 a5 0d 	lds	r19, 0x0DA5
    8a38:	40 91 a6 0d 	lds	r20, 0x0DA6
    8a3c:	50 91 a7 0d 	lds	r21, 0x0DA7
    8a40:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8a44:	6b 01       	movw	r12, r22
    8a46:	7c 01       	movw	r14, r24
	if (game.player.shared.vy > MAX_SPEED) game.player.shared.vy = MAX_SPEED;
    8a48:	20 e0       	ldi	r18, 0x00	; 0
    8a4a:	30 e0       	ldi	r19, 0x00	; 0
    8a4c:	40 ef       	ldi	r20, 0xF0	; 240
    8a4e:	52 e4       	ldi	r21, 0x42	; 66
    8a50:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    8a54:	18 16       	cp	r1, r24
    8a56:	4c f0       	brlt	.+18     	; 0x8a6a <animate_player+0x5e>
}

void animate_player()
{
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    8a58:	c0 92 a4 0d 	sts	0x0DA4, r12
    8a5c:	d0 92 a5 0d 	sts	0x0DA5, r13
    8a60:	e0 92 a6 0d 	sts	0x0DA6, r14
    8a64:	f0 92 a7 0d 	sts	0x0DA7, r15
    8a68:	0c c0       	rjmp	.+24     	; 0x8a82 <animate_player+0x76>
	if (game.player.shared.vy > MAX_SPEED) game.player.shared.vy = MAX_SPEED;
    8a6a:	80 e0       	ldi	r24, 0x00	; 0
    8a6c:	90 e0       	ldi	r25, 0x00	; 0
    8a6e:	a0 ef       	ldi	r26, 0xF0	; 240
    8a70:	b2 e4       	ldi	r27, 0x42	; 66
    8a72:	80 93 a4 0d 	sts	0x0DA4, r24
    8a76:	90 93 a5 0d 	sts	0x0DA5, r25
    8a7a:	a0 93 a6 0d 	sts	0x0DA6, r26
    8a7e:	b0 93 a7 0d 	sts	0x0DA7, r27
	game.player.shared.x += game.player.shared.vx*FRAME_TIME;
    8a82:	29 e8       	ldi	r18, 0x89	; 137
    8a84:	38 e8       	ldi	r19, 0x88	; 136
    8a86:	48 e8       	ldi	r20, 0x88	; 136
    8a88:	5c e3       	ldi	r21, 0x3C	; 60
    8a8a:	60 91 a0 0d 	lds	r22, 0x0DA0
    8a8e:	70 91 a1 0d 	lds	r23, 0x0DA1
    8a92:	80 91 a2 0d 	lds	r24, 0x0DA2
    8a96:	90 91 a3 0d 	lds	r25, 0x0DA3
    8a9a:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8a9e:	9b 01       	movw	r18, r22
    8aa0:	ac 01       	movw	r20, r24
    8aa2:	60 91 a8 0d 	lds	r22, 0x0DA8
    8aa6:	70 91 a9 0d 	lds	r23, 0x0DA9
    8aaa:	80 91 aa 0d 	lds	r24, 0x0DAA
    8aae:	90 91 ab 0d 	lds	r25, 0x0DAB
    8ab2:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8ab6:	60 93 a8 0d 	sts	0x0DA8, r22
    8aba:	70 93 a9 0d 	sts	0x0DA9, r23
    8abe:	80 93 aa 0d 	sts	0x0DAA, r24
    8ac2:	90 93 ab 0d 	sts	0x0DAB, r25
	game.player.shared.y += game.player.shared.vy*FRAME_TIME;
    8ac6:	29 e8       	ldi	r18, 0x89	; 137
    8ac8:	38 e8       	ldi	r19, 0x88	; 136
    8aca:	48 e8       	ldi	r20, 0x88	; 136
    8acc:	5c e3       	ldi	r21, 0x3C	; 60
    8ace:	60 91 a4 0d 	lds	r22, 0x0DA4
    8ad2:	70 91 a5 0d 	lds	r23, 0x0DA5
    8ad6:	80 91 a6 0d 	lds	r24, 0x0DA6
    8ada:	90 91 a7 0d 	lds	r25, 0x0DA7
    8ade:	0e 94 b1 48 	call	0x9162	; 0x9162 <__mulsf3>
    8ae2:	9b 01       	movw	r18, r22
    8ae4:	ac 01       	movw	r20, r24
    8ae6:	60 91 ac 0d 	lds	r22, 0x0DAC
    8aea:	70 91 ad 0d 	lds	r23, 0x0DAD
    8aee:	80 91 ae 0d 	lds	r24, 0x0DAE
    8af2:	90 91 af 0d 	lds	r25, 0x0DAF
    8af6:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
    8afa:	60 93 ac 0d 	sts	0x0DAC, r22
    8afe:	70 93 ad 0d 	sts	0x0DAD, r23
    8b02:	80 93 ae 0d 	sts	0x0DAE, r24
    8b06:	90 93 af 0d 	sts	0x0DAF, r25
	collision_detect_level(&game.player.shared, 2, 3);
    8b0a:	43 e0       	ldi	r20, 0x03	; 3
    8b0c:	62 e0       	ldi	r22, 0x02	; 2
    8b0e:	80 ea       	ldi	r24, 0xA0	; 160
    8b10:	9d e0       	ldi	r25, 0x0D	; 13
    8b12:	0e 94 33 41 	call	0x8266	; 0x8266 <collision_detect_level>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
    8b16:	60 91 9e 0d 	lds	r22, 0x0D9E
    8b1a:	70 91 9f 0d 	lds	r23, 0x0D9F
    8b1e:	80 e0       	ldi	r24, 0x00	; 0
    8b20:	90 e0       	ldi	r25, 0x00	; 0
    8b22:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    8b26:	9b 01       	movw	r18, r22
    8b28:	ac 01       	movw	r20, r24
    8b2a:	60 91 ac 0d 	lds	r22, 0x0DAC
    8b2e:	70 91 ad 0d 	lds	r23, 0x0DAD
    8b32:	80 91 ae 0d 	lds	r24, 0x0DAE
    8b36:	90 91 af 0d 	lds	r25, 0x0DAF
    8b3a:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    8b3e:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8b42:	f6 2e       	mov	r15, r22
    8b44:	60 91 9c 0d 	lds	r22, 0x0D9C
    8b48:	70 91 9d 0d 	lds	r23, 0x0D9D
    8b4c:	80 e0       	ldi	r24, 0x00	; 0
    8b4e:	90 e0       	ldi	r25, 0x00	; 0
    8b50:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    8b54:	9b 01       	movw	r18, r22
    8b56:	ac 01       	movw	r20, r24
    8b58:	60 91 a8 0d 	lds	r22, 0x0DA8
    8b5c:	70 91 a9 0d 	lds	r23, 0x0DA9
    8b60:	80 91 aa 0d 	lds	r24, 0x0DAA
    8b64:	90 91 ab 0d 	lds	r25, 0x0DAB
    8b68:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    8b6c:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <__fixunssfsi>
    8b70:	03 e0       	ldi	r16, 0x03	; 3
    8b72:	22 e0       	ldi	r18, 0x02	; 2
    8b74:	4f 2d       	mov	r20, r15
    8b76:	80 e0       	ldi	r24, 0x00	; 0
    8b78:	0e 94 33 3a 	call	0x7466	; 0x7466 <LBMoveSprite>
}
    8b7c:	0f 91       	pop	r16
    8b7e:	ff 90       	pop	r15
    8b80:	ef 90       	pop	r14
    8b82:	df 90       	pop	r13
    8b84:	cf 90       	pop	r12
    8b86:	08 95       	ret

00008b88 <update_level>:

void update_level()
{
    8b88:	cf 93       	push	r28
    8b8a:	df 93       	push	r29
	if (game.player.shared.vx > 0 &&
    8b8c:	20 e0       	ldi	r18, 0x00	; 0
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	a9 01       	movw	r20, r18
    8b92:	60 91 a0 0d 	lds	r22, 0x0DA0
    8b96:	70 91 a1 0d 	lds	r23, 0x0DA1
    8b9a:	80 91 a2 0d 	lds	r24, 0x0DA2
    8b9e:	90 91 a3 0d 	lds	r25, 0x0DA3
    8ba2:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    8ba6:	18 16       	cp	r1, r24
    8ba8:	44 f5       	brge	.+80     	; 0x8bfa <update_level+0x72>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    8baa:	c0 91 9c 0d 	lds	r28, 0x0D9C
    8bae:	d0 91 9d 0d 	lds	r29, 0x0D9D
    8bb2:	be 01       	movw	r22, r28
    8bb4:	80 e0       	ldi	r24, 0x00	; 0
    8bb6:	90 e0       	ldi	r25, 0x00	; 0
    8bb8:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    8bbc:	9b 01       	movw	r18, r22
    8bbe:	ac 01       	movw	r20, r24
    8bc0:	60 91 a8 0d 	lds	r22, 0x0DA8
    8bc4:	70 91 a9 0d 	lds	r23, 0x0DA9
    8bc8:	80 91 aa 0d 	lds	r24, 0x0DAA
    8bcc:	90 91 ab 0d 	lds	r25, 0x0DAB
    8bd0:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
    8bd4:	20 e0       	ldi	r18, 0x00	; 0
    8bd6:	30 e0       	ldi	r19, 0x00	; 0
    8bd8:	40 ee       	ldi	r20, 0xE0	; 224
    8bda:	52 e4       	ldi	r21, 0x42	; 66
    8bdc:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    8be0:	87 fd       	sbrc	r24, 7
    8be2:	0b c0       	rjmp	.+22     	; 0x8bfa <update_level+0x72>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    8be4:	93 e0       	ldi	r25, 0x03	; 3
    8be6:	d6 95       	lsr	r29
    8be8:	c7 95       	ror	r28
    8bea:	9a 95       	dec	r25
    8bec:	e1 f7       	brne	.-8      	; 0x8be6 <update_level+0x5e>
    8bee:	6c 96       	adiw	r28, 0x1c	; 28
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    8bf0:	cf 3f       	cpi	r28, 0xFF	; 255
    8bf2:	d1 05       	cpc	r29, r1
    8bf4:	10 f4       	brcc	.+4      	; 0x8bfa <update_level+0x72>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    8bf6:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    8bfa:	20 e0       	ldi	r18, 0x00	; 0
    8bfc:	30 e0       	ldi	r19, 0x00	; 0
    8bfe:	a9 01       	movw	r20, r18
    8c00:	60 91 a4 0d 	lds	r22, 0x0DA4
    8c04:	70 91 a5 0d 	lds	r23, 0x0DA5
    8c08:	80 91 a6 0d 	lds	r24, 0x0DA6
    8c0c:	90 91 a7 0d 	lds	r25, 0x0DA7
    8c10:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    8c14:	18 16       	cp	r1, r24
    8c16:	84 f5       	brge	.+96     	; 0x8c78 <update_level+0xf0>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    8c18:	c0 91 9e 0d 	lds	r28, 0x0D9E
    8c1c:	d0 91 9f 0d 	lds	r29, 0x0D9F
    8c20:	be 01       	movw	r22, r28
    8c22:	80 e0       	ldi	r24, 0x00	; 0
    8c24:	90 e0       	ldi	r25, 0x00	; 0
    8c26:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <__floatunsisf>
    8c2a:	9b 01       	movw	r18, r22
    8c2c:	ac 01       	movw	r20, r24
    8c2e:	60 91 ac 0d 	lds	r22, 0x0DAC
    8c32:	70 91 ad 0d 	lds	r23, 0x0DAD
    8c36:	80 91 ae 0d 	lds	r24, 0x0DAE
    8c3a:	90 91 af 0d 	lds	r25, 0x0DAF
    8c3e:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <__subsf3>
    8c42:	20 e0       	ldi	r18, 0x00	; 0
    8c44:	30 e0       	ldi	r19, 0x00	; 0
    8c46:	40 ec       	ldi	r20, 0xC0	; 192
    8c48:	51 e4       	ldi	r21, 0x41	; 65
    8c4a:	0e 94 67 47 	call	0x8ece	; 0x8ece <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    8c4e:	20 e0       	ldi	r18, 0x00	; 0
    8c50:	30 e0       	ldi	r19, 0x00	; 0
    8c52:	40 e4       	ldi	r20, 0x40	; 64
    8c54:	53 e4       	ldi	r21, 0x43	; 67
    8c56:	0e 94 ad 48 	call	0x915a	; 0x915a <__gesf2>
    8c5a:	87 fd       	sbrc	r24, 7
    8c5c:	0d c0       	rjmp	.+26     	; 0x8c78 <update_level+0xf0>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    8c5e:	83 e0       	ldi	r24, 0x03	; 3
    8c60:	d6 95       	lsr	r29
    8c62:	c7 95       	ror	r28
    8c64:	8a 95       	dec	r24
    8c66:	e1 f7       	brne	.-8      	; 0x8c60 <update_level+0xd8>
    8c68:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    8c6a:	cf 3f       	cpi	r28, 0xFF	; 255
    8c6c:	d1 05       	cpc	r29, r1
    8c6e:	20 f4       	brcc	.+8      	; 0x8c78 <update_level+0xf0>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
	}
}
    8c70:	df 91       	pop	r29
    8c72:	cf 91       	pop	r28
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    8c74:	0c 94 51 3d 	jmp	0x7aa2	; 0x7aa2 <move_camera_y>
	}
}
    8c78:	df 91       	pop	r29
    8c7a:	cf 91       	pop	r28
    8c7c:	08 95       	ret

00008c7e <clear_sprites>:

void clear_sprites()
{
    8c7e:	0f 93       	push	r16
    8c80:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    8c82:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    8c84:	01 e0       	ldi	r16, 0x01	; 1
    8c86:	21 e0       	ldi	r18, 0x01	; 1
    8c88:	40 e0       	ldi	r20, 0x00	; 0
    8c8a:	60 ee       	ldi	r22, 0xE0	; 224
    8c8c:	8c 2f       	mov	r24, r28
    8c8e:	0e 94 33 3a 	call	0x7466	; 0x7466 <LBMoveSprite>
    8c92:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    8c94:	cc 31       	cpi	r28, 0x1C	; 28
    8c96:	b1 f7       	brne	.-20     	; 0x8c84 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    8c98:	8e e0       	ldi	r24, 0x0E	; 14
}
    8c9a:	cf 91       	pop	r28
    8c9c:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    8c9e:	0c 94 71 3a 	jmp	0x74e2	; 0x74e2 <LBRotateSprites>

00008ca2 <level_transition>:
	game.camera_y *= 8;
	render_camera_view();
}

void level_transition(u8 index)
{
    8ca2:	cf 93       	push	r28
    8ca4:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    8ca6:	61 e0       	ldi	r22, 0x01	; 1
    8ca8:	83 e0       	ldi	r24, 0x03	; 3
    8caa:	0e 94 2c 39 	call	0x7258	; 0x7258 <FadeOut>
	ClearVram();
    8cae:	0e 94 46 2b 	call	0x568c	; 0x568c <ClearVram>
	clear_sprites();
    8cb2:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    8cb6:	80 e1       	ldi	r24, 0x10	; 16
    8cb8:	c8 9f       	mul	r28, r24
    8cba:	a0 01       	movw	r20, r0
    8cbc:	11 24       	eor	r1, r1
    8cbe:	45 5a       	subi	r20, 0xA5	; 165
    8cc0:	56 4f       	sbci	r21, 0xF6	; 246
    8cc2:	6c e0       	ldi	r22, 0x0C	; 12
    8cc4:	70 e0       	ldi	r23, 0x00	; 0
    8cc6:	88 e0       	ldi	r24, 0x08	; 8
    8cc8:	90 e0       	ldi	r25, 0x00	; 0
    8cca:	0e 94 a9 38 	call	0x7152	; 0x7152 <Print>
	FadeIn(1, true);
    8cce:	61 e0       	ldi	r22, 0x01	; 1
    8cd0:	81 e0       	ldi	r24, 0x01	; 1
    8cd2:	0e 94 20 39 	call	0x7240	; 0x7240 <FadeIn>
	StartSong(planetsong);
    8cd6:	87 e6       	ldi	r24, 0x67	; 103
    8cd8:	90 e1       	ldi	r25, 0x10	; 16
    8cda:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <StartSong>
	LBWaitSeconds(TEXT_LINGER);
    8cde:	83 e0       	ldi	r24, 0x03	; 3
    8ce0:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <LBWaitSeconds>
	FadeOut(1, true);
    8ce4:	61 e0       	ldi	r22, 0x01	; 1
    8ce6:	81 e0       	ldi	r24, 0x01	; 1
    8ce8:	0e 94 2c 39 	call	0x7258	; 0x7258 <FadeOut>
	ClearVram();
    8cec:	0e 94 46 2b 	call	0x568c	; 0x568c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    8cf0:	60 e0       	ldi	r22, 0x00	; 0
    8cf2:	83 e0       	ldi	r24, 0x03	; 3
    8cf4:	0e 94 20 39 	call	0x7240	; 0x7240 <FadeIn>
	load_level(index);
    8cf8:	8c 2f       	mov	r24, r28
}
    8cfa:	cf 91       	pop	r28
	StartSong(planetsong);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    8cfc:	0c 94 6c 3d 	jmp	0x7ad8	; 0x7ad8 <load_level>

00008d00 <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    8d00:	0f 93       	push	r16
	game.current_screen = SPLASH;
    8d02:	e0 e9       	ldi	r30, 0x90	; 144
    8d04:	fd e0       	ldi	r31, 0x0D	; 13
    8d06:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    8d08:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    8d0a:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <clear_sprites>
	Print(8, 15, (char*) str1Player);
    8d0e:	4c ea       	ldi	r20, 0xAC	; 172
    8d10:	59 e0       	ldi	r21, 0x09	; 9
    8d12:	6f e0       	ldi	r22, 0x0F	; 15
    8d14:	70 e0       	ldi	r23, 0x00	; 0
    8d16:	88 e0       	ldi	r24, 0x08	; 8
    8d18:	90 e0       	ldi	r25, 0x00	; 0
    8d1a:	0e 94 a9 38 	call	0x7152	; 0x7152 <Print>
	Print(8, 16, (char*) strHighscores);
    8d1e:	40 ea       	ldi	r20, 0xA0	; 160
    8d20:	59 e0       	ldi	r21, 0x09	; 9
    8d22:	60 e1       	ldi	r22, 0x10	; 16
    8d24:	70 e0       	ldi	r23, 0x00	; 0
    8d26:	88 e0       	ldi	r24, 0x08	; 8
    8d28:	90 e0       	ldi	r25, 0x00	; 0
    8d2a:	0e 94 a9 38 	call	0x7152	; 0x7152 <Print>
	Print(6, 21, (char*) strSelectHandle);
    8d2e:	4f e8       	ldi	r20, 0x8F	; 143
    8d30:	59 e0       	ldi	r21, 0x09	; 9
    8d32:	65 e1       	ldi	r22, 0x15	; 21
    8d34:	70 e0       	ldi	r23, 0x00	; 0
    8d36:	86 e0       	ldi	r24, 0x06	; 6
    8d38:	90 e0       	ldi	r25, 0x00	; 0
    8d3a:	0e 94 a9 38 	call	0x7152	; 0x7152 <Print>
	Print(4, 26, (char*) strCopyright);
    8d3e:	42 eb       	ldi	r20, 0xB2	; 178
    8d40:	59 e0       	ldi	r21, 0x09	; 9
    8d42:	6a e1       	ldi	r22, 0x1A	; 26
    8d44:	70 e0       	ldi	r23, 0x00	; 0
    8d46:	84 e0       	ldi	r24, 0x04	; 4
    8d48:	90 e0       	ldi	r25, 0x00	; 0
    8d4a:	0e 94 a9 38 	call	0x7152	; 0x7152 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    8d4e:	43 e7       	ldi	r20, 0x73	; 115
    8d50:	5b e4       	ldi	r21, 0x4B	; 75
    8d52:	65 e0       	ldi	r22, 0x05	; 5
    8d54:	86 e0       	ldi	r24, 0x06	; 6
    8d56:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    8d5a:	40 e0       	ldi	r20, 0x00	; 0
    8d5c:	67 e8       	ldi	r22, 0x87	; 135
    8d5e:	72 e3       	ldi	r23, 0x32	; 50
    8d60:	80 e0       	ldi	r24, 0x00	; 0
    8d62:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    8d66:	01 e0       	ldi	r16, 0x01	; 1
    8d68:	21 e0       	ldi	r18, 0x01	; 1
    8d6a:	48 e7       	ldi	r20, 0x78	; 120
    8d6c:	68 e3       	ldi	r22, 0x38	; 56
    8d6e:	80 e0       	ldi	r24, 0x00	; 0
    8d70:	0e 94 33 3a 	call	0x7466	; 0x7466 <LBMoveSprite>
	LBRotateSprites(1);
    8d74:	81 e0       	ldi	r24, 0x01	; 1
}
    8d76:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    8d78:	0c 94 71 3a 	jmp	0x74e2	; 0x74e2 <LBRotateSprites>

00008d7c <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    8d7c:	fc 01       	movw	r30, r24
    8d7e:	20 81       	ld	r18, Z
    8d80:	31 81       	ldd	r19, Z+1	; 0x01
    8d82:	28 70       	andi	r18, 0x08	; 8
    8d84:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    8d86:	81 e0       	ldi	r24, 0x01	; 1
    8d88:	23 2b       	or	r18, r19
    8d8a:	09 f4       	brne	.+2      	; 0x8d8e <select_pressed+0x12>
    8d8c:	80 e0       	ldi	r24, 0x00	; 0
}
    8d8e:	08 95       	ret

00008d90 <update_splash>:

void update_splash()
{
    8d90:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    8d92:	80 91 4d 0e 	lds	r24, 0x0E4D
    8d96:	85 ff       	sbrs	r24, 5
    8d98:	0b c0       	rjmp	.+22     	; 0x8db0 <update_splash+0x20>
    8d9a:	90 91 93 0d 	lds	r25, 0x0D93
    8d9e:	91 11       	cpse	r25, r1
    8da0:	07 c0       	rjmp	.+14     	; 0x8db0 <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    8da2:	81 e0       	ldi	r24, 0x01	; 1
    8da4:	80 93 93 0d 	sts	0x0D93, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    8da8:	01 e0       	ldi	r16, 0x01	; 1
    8daa:	21 e0       	ldi	r18, 0x01	; 1
    8dac:	40 e8       	ldi	r20, 0x80	; 128
    8dae:	0b c0       	rjmp	.+22     	; 0x8dc6 <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    8db0:	84 ff       	sbrs	r24, 4
    8db2:	0e c0       	rjmp	.+28     	; 0x8dd0 <update_splash+0x40>
    8db4:	80 91 93 0d 	lds	r24, 0x0D93
    8db8:	81 30       	cpi	r24, 0x01	; 1
    8dba:	51 f4       	brne	.+20     	; 0x8dd0 <update_splash+0x40>
	{
		game.selection = START_SELECTED;
    8dbc:	10 92 93 0d 	sts	0x0D93, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    8dc0:	01 e0       	ldi	r16, 0x01	; 1
    8dc2:	21 e0       	ldi	r18, 0x01	; 1
    8dc4:	48 e7       	ldi	r20, 0x78	; 120
    8dc6:	68 e3       	ldi	r22, 0x38	; 56
    8dc8:	80 e0       	ldi	r24, 0x00	; 0
    8dca:	0e 94 33 3a 	call	0x7466	; 0x7466 <LBMoveSprite>
    8dce:	11 c0       	rjmp	.+34     	; 0x8df2 <update_splash+0x62>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    8dd0:	8d e4       	ldi	r24, 0x4D	; 77
    8dd2:	9e e0       	ldi	r25, 0x0E	; 14
    8dd4:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <select_pressed>
    8dd8:	88 23       	and	r24, r24
    8dda:	59 f0       	breq	.+22     	; 0x8df2 <update_splash+0x62>
    8ddc:	80 91 93 0d 	lds	r24, 0x0D93
    8de0:	81 11       	cpse	r24, r1
    8de2:	07 c0       	rjmp	.+14     	; 0x8df2 <update_splash+0x62>
	{
		game.current_screen = LEVEL;
    8de4:	82 e0       	ldi	r24, 0x02	; 2
    8de6:	80 93 90 0d 	sts	0x0D90, r24
		level_transition(0);
    8dea:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}
}
    8dec:	0f 91       	pop	r16
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    8dee:	0c 94 51 46 	jmp	0x8ca2	; 0x8ca2 <level_transition>
		return;
	}
}
    8df2:	0f 91       	pop	r16
    8df4:	08 95       	ret

00008df6 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    8df6:	89 e3       	ldi	r24, 0x39	; 57
    8df8:	9b e1       	ldi	r25, 0x1B	; 27
    8dfa:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <InitMusicPlayer>
	ClearVram();
    8dfe:	0e 94 46 2b 	call	0x568c	; 0x568c <ClearVram>
	SetMasterVolume(0x05);
    8e02:	85 e0       	ldi	r24, 0x05	; 5
    8e04:	0e 94 c3 30 	call	0x6186	; 0x6186 <SetMasterVolume>
	SetTileTable(tiles_data);
    8e08:	8d e8       	ldi	r24, 0x8D	; 141
    8e0a:	92 e3       	ldi	r25, 0x32	; 50
    8e0c:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    8e10:	8d e1       	ldi	r24, 0x1D	; 29
    8e12:	95 e2       	ldi	r25, 0x25	; 37
    8e14:	0e 94 41 2b 	call	0x5682	; 0x5682 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    8e18:	83 e2       	ldi	r24, 0x23	; 35
    8e1a:	0e 94 65 2b 	call	0x56ca	; 0x56ca <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    8e1e:	60 e0       	ldi	r22, 0x00	; 0
    8e20:	83 e0       	ldi	r24, 0x03	; 3
    8e22:	0e 94 20 39 	call	0x7240	; 0x7240 <FadeIn>
	init_game_state();
    8e26:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <init_game_state>
	load_splash();
    8e2a:	0e 94 80 46 	call	0x8d00	; 0x8d00 <load_splash>
	while (1)
	{
		WaitVsync(1);
    8e2e:	81 e0       	ldi	r24, 0x01	; 1
    8e30:	90 e0       	ldi	r25, 0x00	; 0
    8e32:	0e 94 c4 38 	call	0x7188	; 0x7188 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    8e36:	60 e0       	ldi	r22, 0x00	; 0
    8e38:	8d e4       	ldi	r24, 0x4D	; 77
    8e3a:	9e e0       	ldi	r25, 0x0E	; 14
    8e3c:	0e 94 87 39 	call	0x730e	; 0x730e <LBGetJoyPadState>
		switch (game.current_screen)
    8e40:	80 91 90 0d 	lds	r24, 0x0D90
    8e44:	88 23       	and	r24, r24
    8e46:	71 f0       	breq	.+28     	; 0x8e64 <main+0x6e>
    8e48:	82 30       	cpi	r24, 0x02	; 2
    8e4a:	89 f7       	brne	.-30     	; 0x8e2e <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites(1);
				break;
			case LEVEL:
				update_level();
    8e4c:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <update_level>
				update_player();
    8e50:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <update_player>
				update_shot();
    8e54:	0e 94 a6 3e 	call	0x7d4c	; 0x7d4c <update_shot>
				animate_player();
    8e58:	0e 94 06 45 	call	0x8a0c	; 0x8a0c <animate_player>
				animate_shot();
    8e5c:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <animate_shot>
				LBRotateSprites(10);
    8e60:	8a e0       	ldi	r24, 0x0A	; 10
    8e62:	03 c0       	rjmp	.+6      	; 0x8e6a <main+0x74>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    8e64:	0e 94 c8 46 	call	0x8d90	; 0x8d90 <update_splash>
				LBRotateSprites(1);
    8e68:	81 e0       	ldi	r24, 0x01	; 1
				update_level();
				update_player();
				update_shot();
				animate_player();
				animate_shot();
				LBRotateSprites(10);
    8e6a:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <LBRotateSprites>
				break;
    8e6e:	df cf       	rjmp	.-66     	; 0x8e2e <main+0x38>

00008e70 <__udivmodhi4>:
    8e70:	aa 1b       	sub	r26, r26
    8e72:	bb 1b       	sub	r27, r27
    8e74:	51 e1       	ldi	r21, 0x11	; 17
    8e76:	07 c0       	rjmp	.+14     	; 0x8e86 <__udivmodhi4_ep>

00008e78 <__udivmodhi4_loop>:
    8e78:	aa 1f       	adc	r26, r26
    8e7a:	bb 1f       	adc	r27, r27
    8e7c:	a6 17       	cp	r26, r22
    8e7e:	b7 07       	cpc	r27, r23
    8e80:	10 f0       	brcs	.+4      	; 0x8e86 <__udivmodhi4_ep>
    8e82:	a6 1b       	sub	r26, r22
    8e84:	b7 0b       	sbc	r27, r23

00008e86 <__udivmodhi4_ep>:
    8e86:	88 1f       	adc	r24, r24
    8e88:	99 1f       	adc	r25, r25
    8e8a:	5a 95       	dec	r21
    8e8c:	a9 f7       	brne	.-22     	; 0x8e78 <__udivmodhi4_loop>
    8e8e:	80 95       	com	r24
    8e90:	90 95       	com	r25
    8e92:	bc 01       	movw	r22, r24
    8e94:	cd 01       	movw	r24, r26
    8e96:	08 95       	ret

00008e98 <__divmodhi4>:
    8e98:	97 fb       	bst	r25, 7
    8e9a:	07 2e       	mov	r0, r23
    8e9c:	16 f4       	brtc	.+4      	; 0x8ea2 <__divmodhi4+0xa>
    8e9e:	00 94       	com	r0
    8ea0:	07 d0       	rcall	.+14     	; 0x8eb0 <__divmodhi4_neg1>
    8ea2:	77 fd       	sbrc	r23, 7
    8ea4:	09 d0       	rcall	.+18     	; 0x8eb8 <__divmodhi4_neg2>
    8ea6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <__udivmodhi4>
    8eaa:	07 fc       	sbrc	r0, 7
    8eac:	05 d0       	rcall	.+10     	; 0x8eb8 <__divmodhi4_neg2>
    8eae:	3e f4       	brtc	.+14     	; 0x8ebe <__divmodhi4_exit>

00008eb0 <__divmodhi4_neg1>:
    8eb0:	90 95       	com	r25
    8eb2:	81 95       	neg	r24
    8eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    8eb6:	08 95       	ret

00008eb8 <__divmodhi4_neg2>:
    8eb8:	70 95       	com	r23
    8eba:	61 95       	neg	r22
    8ebc:	7f 4f       	sbci	r23, 0xFF	; 255

00008ebe <__divmodhi4_exit>:
    8ebe:	08 95       	ret

00008ec0 <__tablejump2__>:
    8ec0:	ee 0f       	add	r30, r30
    8ec2:	ff 1f       	adc	r31, r31
    8ec4:	05 90       	lpm	r0, Z+
    8ec6:	f4 91       	lpm	r31, Z
    8ec8:	e0 2d       	mov	r30, r0
    8eca:	09 94       	ijmp

00008ecc <__subsf3>:
    8ecc:	50 58       	subi	r21, 0x80	; 128

00008ece <__addsf3>:
    8ece:	bb 27       	eor	r27, r27
    8ed0:	aa 27       	eor	r26, r26
    8ed2:	0e d0       	rcall	.+28     	; 0x8ef0 <__addsf3x>
    8ed4:	08 c1       	rjmp	.+528    	; 0x90e6 <__fp_round>
    8ed6:	f9 d0       	rcall	.+498    	; 0x90ca <__fp_pscA>
    8ed8:	30 f0       	brcs	.+12     	; 0x8ee6 <__addsf3+0x18>
    8eda:	fe d0       	rcall	.+508    	; 0x90d8 <__fp_pscB>
    8edc:	20 f0       	brcs	.+8      	; 0x8ee6 <__addsf3+0x18>
    8ede:	31 f4       	brne	.+12     	; 0x8eec <__addsf3+0x1e>
    8ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    8ee2:	11 f4       	brne	.+4      	; 0x8ee8 <__addsf3+0x1a>
    8ee4:	1e f4       	brtc	.+6      	; 0x8eec <__addsf3+0x1e>
    8ee6:	ee c0       	rjmp	.+476    	; 0x90c4 <__fp_nan>
    8ee8:	0e f4       	brtc	.+2      	; 0x8eec <__addsf3+0x1e>
    8eea:	e0 95       	com	r30
    8eec:	e7 fb       	bst	r30, 7
    8eee:	e4 c0       	rjmp	.+456    	; 0x90b8 <__fp_inf>

00008ef0 <__addsf3x>:
    8ef0:	e9 2f       	mov	r30, r25
    8ef2:	0a d1       	rcall	.+532    	; 0x9108 <__fp_split3>
    8ef4:	80 f3       	brcs	.-32     	; 0x8ed6 <__addsf3+0x8>
    8ef6:	ba 17       	cp	r27, r26
    8ef8:	62 07       	cpc	r22, r18
    8efa:	73 07       	cpc	r23, r19
    8efc:	84 07       	cpc	r24, r20
    8efe:	95 07       	cpc	r25, r21
    8f00:	18 f0       	brcs	.+6      	; 0x8f08 <__addsf3x+0x18>
    8f02:	71 f4       	brne	.+28     	; 0x8f20 <__addsf3x+0x30>
    8f04:	9e f5       	brtc	.+102    	; 0x8f6c <__addsf3x+0x7c>
    8f06:	22 c1       	rjmp	.+580    	; 0x914c <__fp_zero>
    8f08:	0e f4       	brtc	.+2      	; 0x8f0c <__addsf3x+0x1c>
    8f0a:	e0 95       	com	r30
    8f0c:	0b 2e       	mov	r0, r27
    8f0e:	ba 2f       	mov	r27, r26
    8f10:	a0 2d       	mov	r26, r0
    8f12:	0b 01       	movw	r0, r22
    8f14:	b9 01       	movw	r22, r18
    8f16:	90 01       	movw	r18, r0
    8f18:	0c 01       	movw	r0, r24
    8f1a:	ca 01       	movw	r24, r20
    8f1c:	a0 01       	movw	r20, r0
    8f1e:	11 24       	eor	r1, r1
    8f20:	ff 27       	eor	r31, r31
    8f22:	59 1b       	sub	r21, r25
    8f24:	99 f0       	breq	.+38     	; 0x8f4c <__addsf3x+0x5c>
    8f26:	59 3f       	cpi	r21, 0xF9	; 249
    8f28:	50 f4       	brcc	.+20     	; 0x8f3e <__addsf3x+0x4e>
    8f2a:	50 3e       	cpi	r21, 0xE0	; 224
    8f2c:	68 f1       	brcs	.+90     	; 0x8f88 <__addsf3x+0x98>
    8f2e:	1a 16       	cp	r1, r26
    8f30:	f0 40       	sbci	r31, 0x00	; 0
    8f32:	a2 2f       	mov	r26, r18
    8f34:	23 2f       	mov	r18, r19
    8f36:	34 2f       	mov	r19, r20
    8f38:	44 27       	eor	r20, r20
    8f3a:	58 5f       	subi	r21, 0xF8	; 248
    8f3c:	f3 cf       	rjmp	.-26     	; 0x8f24 <__addsf3x+0x34>
    8f3e:	46 95       	lsr	r20
    8f40:	37 95       	ror	r19
    8f42:	27 95       	ror	r18
    8f44:	a7 95       	ror	r26
    8f46:	f0 40       	sbci	r31, 0x00	; 0
    8f48:	53 95       	inc	r21
    8f4a:	c9 f7       	brne	.-14     	; 0x8f3e <__addsf3x+0x4e>
    8f4c:	7e f4       	brtc	.+30     	; 0x8f6c <__addsf3x+0x7c>
    8f4e:	1f 16       	cp	r1, r31
    8f50:	ba 0b       	sbc	r27, r26
    8f52:	62 0b       	sbc	r22, r18
    8f54:	73 0b       	sbc	r23, r19
    8f56:	84 0b       	sbc	r24, r20
    8f58:	ba f0       	brmi	.+46     	; 0x8f88 <__addsf3x+0x98>
    8f5a:	91 50       	subi	r25, 0x01	; 1
    8f5c:	a1 f0       	breq	.+40     	; 0x8f86 <__addsf3x+0x96>
    8f5e:	ff 0f       	add	r31, r31
    8f60:	bb 1f       	adc	r27, r27
    8f62:	66 1f       	adc	r22, r22
    8f64:	77 1f       	adc	r23, r23
    8f66:	88 1f       	adc	r24, r24
    8f68:	c2 f7       	brpl	.-16     	; 0x8f5a <__addsf3x+0x6a>
    8f6a:	0e c0       	rjmp	.+28     	; 0x8f88 <__addsf3x+0x98>
    8f6c:	ba 0f       	add	r27, r26
    8f6e:	62 1f       	adc	r22, r18
    8f70:	73 1f       	adc	r23, r19
    8f72:	84 1f       	adc	r24, r20
    8f74:	48 f4       	brcc	.+18     	; 0x8f88 <__addsf3x+0x98>
    8f76:	87 95       	ror	r24
    8f78:	77 95       	ror	r23
    8f7a:	67 95       	ror	r22
    8f7c:	b7 95       	ror	r27
    8f7e:	f7 95       	ror	r31
    8f80:	9e 3f       	cpi	r25, 0xFE	; 254
    8f82:	08 f0       	brcs	.+2      	; 0x8f86 <__addsf3x+0x96>
    8f84:	b3 cf       	rjmp	.-154    	; 0x8eec <__addsf3+0x1e>
    8f86:	93 95       	inc	r25
    8f88:	88 0f       	add	r24, r24
    8f8a:	08 f0       	brcs	.+2      	; 0x8f8e <__addsf3x+0x9e>
    8f8c:	99 27       	eor	r25, r25
    8f8e:	ee 0f       	add	r30, r30
    8f90:	97 95       	ror	r25
    8f92:	87 95       	ror	r24
    8f94:	08 95       	ret

00008f96 <__cmpsf2>:
    8f96:	6c d0       	rcall	.+216    	; 0x9070 <__fp_cmp>
    8f98:	08 f4       	brcc	.+2      	; 0x8f9c <__cmpsf2+0x6>
    8f9a:	81 e0       	ldi	r24, 0x01	; 1
    8f9c:	08 95       	ret

00008f9e <__fixunssfsi>:
    8f9e:	bc d0       	rcall	.+376    	; 0x9118 <__fp_splitA>
    8fa0:	88 f0       	brcs	.+34     	; 0x8fc4 <__fixunssfsi+0x26>
    8fa2:	9f 57       	subi	r25, 0x7F	; 127
    8fa4:	90 f0       	brcs	.+36     	; 0x8fca <__fixunssfsi+0x2c>
    8fa6:	b9 2f       	mov	r27, r25
    8fa8:	99 27       	eor	r25, r25
    8faa:	b7 51       	subi	r27, 0x17	; 23
    8fac:	a0 f0       	brcs	.+40     	; 0x8fd6 <__fixunssfsi+0x38>
    8fae:	d1 f0       	breq	.+52     	; 0x8fe4 <__fixunssfsi+0x46>
    8fb0:	66 0f       	add	r22, r22
    8fb2:	77 1f       	adc	r23, r23
    8fb4:	88 1f       	adc	r24, r24
    8fb6:	99 1f       	adc	r25, r25
    8fb8:	1a f0       	brmi	.+6      	; 0x8fc0 <__fixunssfsi+0x22>
    8fba:	ba 95       	dec	r27
    8fbc:	c9 f7       	brne	.-14     	; 0x8fb0 <__fixunssfsi+0x12>
    8fbe:	12 c0       	rjmp	.+36     	; 0x8fe4 <__fixunssfsi+0x46>
    8fc0:	b1 30       	cpi	r27, 0x01	; 1
    8fc2:	81 f0       	breq	.+32     	; 0x8fe4 <__fixunssfsi+0x46>
    8fc4:	c3 d0       	rcall	.+390    	; 0x914c <__fp_zero>
    8fc6:	b1 e0       	ldi	r27, 0x01	; 1
    8fc8:	08 95       	ret
    8fca:	c0 c0       	rjmp	.+384    	; 0x914c <__fp_zero>
    8fcc:	67 2f       	mov	r22, r23
    8fce:	78 2f       	mov	r23, r24
    8fd0:	88 27       	eor	r24, r24
    8fd2:	b8 5f       	subi	r27, 0xF8	; 248
    8fd4:	39 f0       	breq	.+14     	; 0x8fe4 <__fixunssfsi+0x46>
    8fd6:	b9 3f       	cpi	r27, 0xF9	; 249
    8fd8:	cc f3       	brlt	.-14     	; 0x8fcc <__fixunssfsi+0x2e>
    8fda:	86 95       	lsr	r24
    8fdc:	77 95       	ror	r23
    8fde:	67 95       	ror	r22
    8fe0:	b3 95       	inc	r27
    8fe2:	d9 f7       	brne	.-10     	; 0x8fda <__fixunssfsi+0x3c>
    8fe4:	3e f4       	brtc	.+14     	; 0x8ff4 <__fixunssfsi+0x56>
    8fe6:	90 95       	com	r25
    8fe8:	80 95       	com	r24
    8fea:	70 95       	com	r23
    8fec:	61 95       	neg	r22
    8fee:	7f 4f       	sbci	r23, 0xFF	; 255
    8ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    8ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ff4:	08 95       	ret

00008ff6 <__floatunsisf>:
    8ff6:	e8 94       	clt
    8ff8:	09 c0       	rjmp	.+18     	; 0x900c <__floatsisf+0x12>

00008ffa <__floatsisf>:
    8ffa:	97 fb       	bst	r25, 7
    8ffc:	3e f4       	brtc	.+14     	; 0x900c <__floatsisf+0x12>
    8ffe:	90 95       	com	r25
    9000:	80 95       	com	r24
    9002:	70 95       	com	r23
    9004:	61 95       	neg	r22
    9006:	7f 4f       	sbci	r23, 0xFF	; 255
    9008:	8f 4f       	sbci	r24, 0xFF	; 255
    900a:	9f 4f       	sbci	r25, 0xFF	; 255
    900c:	99 23       	and	r25, r25
    900e:	a9 f0       	breq	.+42     	; 0x903a <__floatsisf+0x40>
    9010:	f9 2f       	mov	r31, r25
    9012:	96 e9       	ldi	r25, 0x96	; 150
    9014:	bb 27       	eor	r27, r27
    9016:	93 95       	inc	r25
    9018:	f6 95       	lsr	r31
    901a:	87 95       	ror	r24
    901c:	77 95       	ror	r23
    901e:	67 95       	ror	r22
    9020:	b7 95       	ror	r27
    9022:	f1 11       	cpse	r31, r1
    9024:	f8 cf       	rjmp	.-16     	; 0x9016 <__floatsisf+0x1c>
    9026:	fa f4       	brpl	.+62     	; 0x9066 <__floatsisf+0x6c>
    9028:	bb 0f       	add	r27, r27
    902a:	11 f4       	brne	.+4      	; 0x9030 <__floatsisf+0x36>
    902c:	60 ff       	sbrs	r22, 0
    902e:	1b c0       	rjmp	.+54     	; 0x9066 <__floatsisf+0x6c>
    9030:	6f 5f       	subi	r22, 0xFF	; 255
    9032:	7f 4f       	sbci	r23, 0xFF	; 255
    9034:	8f 4f       	sbci	r24, 0xFF	; 255
    9036:	9f 4f       	sbci	r25, 0xFF	; 255
    9038:	16 c0       	rjmp	.+44     	; 0x9066 <__floatsisf+0x6c>
    903a:	88 23       	and	r24, r24
    903c:	11 f0       	breq	.+4      	; 0x9042 <__floatsisf+0x48>
    903e:	96 e9       	ldi	r25, 0x96	; 150
    9040:	11 c0       	rjmp	.+34     	; 0x9064 <__floatsisf+0x6a>
    9042:	77 23       	and	r23, r23
    9044:	21 f0       	breq	.+8      	; 0x904e <__floatsisf+0x54>
    9046:	9e e8       	ldi	r25, 0x8E	; 142
    9048:	87 2f       	mov	r24, r23
    904a:	76 2f       	mov	r23, r22
    904c:	05 c0       	rjmp	.+10     	; 0x9058 <__floatsisf+0x5e>
    904e:	66 23       	and	r22, r22
    9050:	71 f0       	breq	.+28     	; 0x906e <__floatsisf+0x74>
    9052:	96 e8       	ldi	r25, 0x86	; 134
    9054:	86 2f       	mov	r24, r22
    9056:	70 e0       	ldi	r23, 0x00	; 0
    9058:	60 e0       	ldi	r22, 0x00	; 0
    905a:	2a f0       	brmi	.+10     	; 0x9066 <__floatsisf+0x6c>
    905c:	9a 95       	dec	r25
    905e:	66 0f       	add	r22, r22
    9060:	77 1f       	adc	r23, r23
    9062:	88 1f       	adc	r24, r24
    9064:	da f7       	brpl	.-10     	; 0x905c <__floatsisf+0x62>
    9066:	88 0f       	add	r24, r24
    9068:	96 95       	lsr	r25
    906a:	87 95       	ror	r24
    906c:	97 f9       	bld	r25, 7
    906e:	08 95       	ret

00009070 <__fp_cmp>:
    9070:	99 0f       	add	r25, r25
    9072:	00 08       	sbc	r0, r0
    9074:	55 0f       	add	r21, r21
    9076:	aa 0b       	sbc	r26, r26
    9078:	e0 e8       	ldi	r30, 0x80	; 128
    907a:	fe ef       	ldi	r31, 0xFE	; 254
    907c:	16 16       	cp	r1, r22
    907e:	17 06       	cpc	r1, r23
    9080:	e8 07       	cpc	r30, r24
    9082:	f9 07       	cpc	r31, r25
    9084:	c0 f0       	brcs	.+48     	; 0x90b6 <__fp_cmp+0x46>
    9086:	12 16       	cp	r1, r18
    9088:	13 06       	cpc	r1, r19
    908a:	e4 07       	cpc	r30, r20
    908c:	f5 07       	cpc	r31, r21
    908e:	98 f0       	brcs	.+38     	; 0x90b6 <__fp_cmp+0x46>
    9090:	62 1b       	sub	r22, r18
    9092:	73 0b       	sbc	r23, r19
    9094:	84 0b       	sbc	r24, r20
    9096:	95 0b       	sbc	r25, r21
    9098:	39 f4       	brne	.+14     	; 0x90a8 <__fp_cmp+0x38>
    909a:	0a 26       	eor	r0, r26
    909c:	61 f0       	breq	.+24     	; 0x90b6 <__fp_cmp+0x46>
    909e:	23 2b       	or	r18, r19
    90a0:	24 2b       	or	r18, r20
    90a2:	25 2b       	or	r18, r21
    90a4:	21 f4       	brne	.+8      	; 0x90ae <__fp_cmp+0x3e>
    90a6:	08 95       	ret
    90a8:	0a 26       	eor	r0, r26
    90aa:	09 f4       	brne	.+2      	; 0x90ae <__fp_cmp+0x3e>
    90ac:	a1 40       	sbci	r26, 0x01	; 1
    90ae:	a6 95       	lsr	r26
    90b0:	8f ef       	ldi	r24, 0xFF	; 255
    90b2:	81 1d       	adc	r24, r1
    90b4:	81 1d       	adc	r24, r1
    90b6:	08 95       	ret

000090b8 <__fp_inf>:
    90b8:	97 f9       	bld	r25, 7
    90ba:	9f 67       	ori	r25, 0x7F	; 127
    90bc:	80 e8       	ldi	r24, 0x80	; 128
    90be:	70 e0       	ldi	r23, 0x00	; 0
    90c0:	60 e0       	ldi	r22, 0x00	; 0
    90c2:	08 95       	ret

000090c4 <__fp_nan>:
    90c4:	9f ef       	ldi	r25, 0xFF	; 255
    90c6:	80 ec       	ldi	r24, 0xC0	; 192
    90c8:	08 95       	ret

000090ca <__fp_pscA>:
    90ca:	00 24       	eor	r0, r0
    90cc:	0a 94       	dec	r0
    90ce:	16 16       	cp	r1, r22
    90d0:	17 06       	cpc	r1, r23
    90d2:	18 06       	cpc	r1, r24
    90d4:	09 06       	cpc	r0, r25
    90d6:	08 95       	ret

000090d8 <__fp_pscB>:
    90d8:	00 24       	eor	r0, r0
    90da:	0a 94       	dec	r0
    90dc:	12 16       	cp	r1, r18
    90de:	13 06       	cpc	r1, r19
    90e0:	14 06       	cpc	r1, r20
    90e2:	05 06       	cpc	r0, r21
    90e4:	08 95       	ret

000090e6 <__fp_round>:
    90e6:	09 2e       	mov	r0, r25
    90e8:	03 94       	inc	r0
    90ea:	00 0c       	add	r0, r0
    90ec:	11 f4       	brne	.+4      	; 0x90f2 <__fp_round+0xc>
    90ee:	88 23       	and	r24, r24
    90f0:	52 f0       	brmi	.+20     	; 0x9106 <__fp_round+0x20>
    90f2:	bb 0f       	add	r27, r27
    90f4:	40 f4       	brcc	.+16     	; 0x9106 <__fp_round+0x20>
    90f6:	bf 2b       	or	r27, r31
    90f8:	11 f4       	brne	.+4      	; 0x90fe <__fp_round+0x18>
    90fa:	60 ff       	sbrs	r22, 0
    90fc:	04 c0       	rjmp	.+8      	; 0x9106 <__fp_round+0x20>
    90fe:	6f 5f       	subi	r22, 0xFF	; 255
    9100:	7f 4f       	sbci	r23, 0xFF	; 255
    9102:	8f 4f       	sbci	r24, 0xFF	; 255
    9104:	9f 4f       	sbci	r25, 0xFF	; 255
    9106:	08 95       	ret

00009108 <__fp_split3>:
    9108:	57 fd       	sbrc	r21, 7
    910a:	90 58       	subi	r25, 0x80	; 128
    910c:	44 0f       	add	r20, r20
    910e:	55 1f       	adc	r21, r21
    9110:	59 f0       	breq	.+22     	; 0x9128 <__fp_splitA+0x10>
    9112:	5f 3f       	cpi	r21, 0xFF	; 255
    9114:	71 f0       	breq	.+28     	; 0x9132 <__fp_splitA+0x1a>
    9116:	47 95       	ror	r20

00009118 <__fp_splitA>:
    9118:	88 0f       	add	r24, r24
    911a:	97 fb       	bst	r25, 7
    911c:	99 1f       	adc	r25, r25
    911e:	61 f0       	breq	.+24     	; 0x9138 <__fp_splitA+0x20>
    9120:	9f 3f       	cpi	r25, 0xFF	; 255
    9122:	79 f0       	breq	.+30     	; 0x9142 <__fp_splitA+0x2a>
    9124:	87 95       	ror	r24
    9126:	08 95       	ret
    9128:	12 16       	cp	r1, r18
    912a:	13 06       	cpc	r1, r19
    912c:	14 06       	cpc	r1, r20
    912e:	55 1f       	adc	r21, r21
    9130:	f2 cf       	rjmp	.-28     	; 0x9116 <__fp_split3+0xe>
    9132:	46 95       	lsr	r20
    9134:	f1 df       	rcall	.-30     	; 0x9118 <__fp_splitA>
    9136:	08 c0       	rjmp	.+16     	; 0x9148 <__fp_splitA+0x30>
    9138:	16 16       	cp	r1, r22
    913a:	17 06       	cpc	r1, r23
    913c:	18 06       	cpc	r1, r24
    913e:	99 1f       	adc	r25, r25
    9140:	f1 cf       	rjmp	.-30     	; 0x9124 <__fp_splitA+0xc>
    9142:	86 95       	lsr	r24
    9144:	71 05       	cpc	r23, r1
    9146:	61 05       	cpc	r22, r1
    9148:	08 94       	sec
    914a:	08 95       	ret

0000914c <__fp_zero>:
    914c:	e8 94       	clt

0000914e <__fp_szero>:
    914e:	bb 27       	eor	r27, r27
    9150:	66 27       	eor	r22, r22
    9152:	77 27       	eor	r23, r23
    9154:	cb 01       	movw	r24, r22
    9156:	97 f9       	bld	r25, 7
    9158:	08 95       	ret

0000915a <__gesf2>:
    915a:	8a df       	rcall	.-236    	; 0x9070 <__fp_cmp>
    915c:	08 f4       	brcc	.+2      	; 0x9160 <__gesf2+0x6>
    915e:	8f ef       	ldi	r24, 0xFF	; 255
    9160:	08 95       	ret

00009162 <__mulsf3>:
    9162:	0b d0       	rcall	.+22     	; 0x917a <__mulsf3x>
    9164:	c0 cf       	rjmp	.-128    	; 0x90e6 <__fp_round>
    9166:	b1 df       	rcall	.-158    	; 0x90ca <__fp_pscA>
    9168:	28 f0       	brcs	.+10     	; 0x9174 <__mulsf3+0x12>
    916a:	b6 df       	rcall	.-148    	; 0x90d8 <__fp_pscB>
    916c:	18 f0       	brcs	.+6      	; 0x9174 <__mulsf3+0x12>
    916e:	95 23       	and	r25, r21
    9170:	09 f0       	breq	.+2      	; 0x9174 <__mulsf3+0x12>
    9172:	a2 cf       	rjmp	.-188    	; 0x90b8 <__fp_inf>
    9174:	a7 cf       	rjmp	.-178    	; 0x90c4 <__fp_nan>
    9176:	11 24       	eor	r1, r1
    9178:	ea cf       	rjmp	.-44     	; 0x914e <__fp_szero>

0000917a <__mulsf3x>:
    917a:	c6 df       	rcall	.-116    	; 0x9108 <__fp_split3>
    917c:	a0 f3       	brcs	.-24     	; 0x9166 <__mulsf3+0x4>

0000917e <__mulsf3_pse>:
    917e:	95 9f       	mul	r25, r21
    9180:	d1 f3       	breq	.-12     	; 0x9176 <__mulsf3+0x14>
    9182:	95 0f       	add	r25, r21
    9184:	50 e0       	ldi	r21, 0x00	; 0
    9186:	55 1f       	adc	r21, r21
    9188:	62 9f       	mul	r22, r18
    918a:	f0 01       	movw	r30, r0
    918c:	72 9f       	mul	r23, r18
    918e:	bb 27       	eor	r27, r27
    9190:	f0 0d       	add	r31, r0
    9192:	b1 1d       	adc	r27, r1
    9194:	63 9f       	mul	r22, r19
    9196:	aa 27       	eor	r26, r26
    9198:	f0 0d       	add	r31, r0
    919a:	b1 1d       	adc	r27, r1
    919c:	aa 1f       	adc	r26, r26
    919e:	64 9f       	mul	r22, r20
    91a0:	66 27       	eor	r22, r22
    91a2:	b0 0d       	add	r27, r0
    91a4:	a1 1d       	adc	r26, r1
    91a6:	66 1f       	adc	r22, r22
    91a8:	82 9f       	mul	r24, r18
    91aa:	22 27       	eor	r18, r18
    91ac:	b0 0d       	add	r27, r0
    91ae:	a1 1d       	adc	r26, r1
    91b0:	62 1f       	adc	r22, r18
    91b2:	73 9f       	mul	r23, r19
    91b4:	b0 0d       	add	r27, r0
    91b6:	a1 1d       	adc	r26, r1
    91b8:	62 1f       	adc	r22, r18
    91ba:	83 9f       	mul	r24, r19
    91bc:	a0 0d       	add	r26, r0
    91be:	61 1d       	adc	r22, r1
    91c0:	22 1f       	adc	r18, r18
    91c2:	74 9f       	mul	r23, r20
    91c4:	33 27       	eor	r19, r19
    91c6:	a0 0d       	add	r26, r0
    91c8:	61 1d       	adc	r22, r1
    91ca:	23 1f       	adc	r18, r19
    91cc:	84 9f       	mul	r24, r20
    91ce:	60 0d       	add	r22, r0
    91d0:	21 1d       	adc	r18, r1
    91d2:	82 2f       	mov	r24, r18
    91d4:	76 2f       	mov	r23, r22
    91d6:	6a 2f       	mov	r22, r26
    91d8:	11 24       	eor	r1, r1
    91da:	9f 57       	subi	r25, 0x7F	; 127
    91dc:	50 40       	sbci	r21, 0x00	; 0
    91de:	8a f0       	brmi	.+34     	; 0x9202 <__mulsf3_pse+0x84>
    91e0:	e1 f0       	breq	.+56     	; 0x921a <__mulsf3_pse+0x9c>
    91e2:	88 23       	and	r24, r24
    91e4:	4a f0       	brmi	.+18     	; 0x91f8 <__mulsf3_pse+0x7a>
    91e6:	ee 0f       	add	r30, r30
    91e8:	ff 1f       	adc	r31, r31
    91ea:	bb 1f       	adc	r27, r27
    91ec:	66 1f       	adc	r22, r22
    91ee:	77 1f       	adc	r23, r23
    91f0:	88 1f       	adc	r24, r24
    91f2:	91 50       	subi	r25, 0x01	; 1
    91f4:	50 40       	sbci	r21, 0x00	; 0
    91f6:	a9 f7       	brne	.-22     	; 0x91e2 <__mulsf3_pse+0x64>
    91f8:	9e 3f       	cpi	r25, 0xFE	; 254
    91fa:	51 05       	cpc	r21, r1
    91fc:	70 f0       	brcs	.+28     	; 0x921a <__mulsf3_pse+0x9c>
    91fe:	5c cf       	rjmp	.-328    	; 0x90b8 <__fp_inf>
    9200:	a6 cf       	rjmp	.-180    	; 0x914e <__fp_szero>
    9202:	5f 3f       	cpi	r21, 0xFF	; 255
    9204:	ec f3       	brlt	.-6      	; 0x9200 <__mulsf3_pse+0x82>
    9206:	98 3e       	cpi	r25, 0xE8	; 232
    9208:	dc f3       	brlt	.-10     	; 0x9200 <__mulsf3_pse+0x82>
    920a:	86 95       	lsr	r24
    920c:	77 95       	ror	r23
    920e:	67 95       	ror	r22
    9210:	b7 95       	ror	r27
    9212:	f7 95       	ror	r31
    9214:	e7 95       	ror	r30
    9216:	9f 5f       	subi	r25, 0xFF	; 255
    9218:	c1 f7       	brne	.-16     	; 0x920a <__mulsf3_pse+0x8c>
    921a:	fe 2b       	or	r31, r30
    921c:	88 0f       	add	r24, r24
    921e:	91 1d       	adc	r25, r1
    9220:	96 95       	lsr	r25
    9222:	87 95       	ror	r24
    9224:	97 f9       	bld	r25, 7
    9226:	08 95       	ret

00009228 <_exit>:
    9228:	f8 94       	cli

0000922a <__stop_program>:
    922a:	ff cf       	rjmp	.-2      	; 0x922a <__stop_program>
