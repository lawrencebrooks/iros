
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e5d2  0000e6d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e700  2**5
                  CONTENTS, READONLY
  2 .text         0000e5d2  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000aff  00800510  00800510  0000e6e2  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000eb00  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f4f9  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000690  00000000  00000000  0000f510  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008fca  00000000  00000000  0000fba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001696  00000000  00000000  00018b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022cb  00000000  00000000  0001a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001628  00000000  00000000  0001c4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001c54  00000000  00000000  0001daf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000077da  00000000  00000000  0001f748  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000828  00000000  00000000  00026f28  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 3e 	jmp	0x7c36	; 0x7c36 <__ctors_end>
       4:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
       8:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
       c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      10:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      14:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      18:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      1c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      20:	0c 94 fc 43 	jmp	0x87f8	; 0x87f8 <__vector_8>
      24:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      28:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      2c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      30:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      34:	0c 94 c8 41 	jmp	0x8390	; 0x8390 <__vector_13>
      38:	0c 94 08 42 	jmp	0x8410	; 0x8410 <__vector_14>
      3c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      40:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      44:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      48:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      4c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      50:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      54:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      58:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      5c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      60:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      64:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      68:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      6c:	0c 94 84 3e 	jmp	0x7d08	; 0x7d08 <__bad_interrupt>
      70:	d0 65       	ori	r29, 0x50	; 80
      72:	df 65       	ori	r29, 0x5F	; 95
      74:	d3 65       	ori	r29, 0x53	; 83
      76:	df 65       	ori	r29, 0x5F	; 95
      78:	d6 65       	ori	r29, 0x56	; 86
      7a:	df 65       	ori	r29, 0x5F	; 95
      7c:	d9 65       	ori	r29, 0x59	; 89
      7e:	df 65       	ori	r29, 0x5F	; 95
      80:	dc 65       	ori	r29, 0x5C	; 92
      82:	df 65       	ori	r29, 0x5F	; 95

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	a5 45 a8 45 04 46 08 46 0f 46 b0 45 b5 45 ba 45     .E.E.F.F.F.E.E.E
      e2:	17 46 bd 45 c0 45 c3 45 fe 45 01 46 27 46           .F.E.E.E.E.F'F

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strTally>:
     b10:	54 41 4c 4c 59 00                                   TALLY.

00000b16 <strGameOver>:
     b16:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b20 <strLevelBonus>:
     b20:	42 4f 4e 55 53 00                                   BONUS.

00000b26 <strLevelClear>:
     b26:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b32 <strPaused>:
     b32:	50 41 55 53 45 00                                   PAUSE.

00000b38 <strExitGame>:
     b38:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b44 <strMainMenu>:
     b44:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000b50 <strTime>:
     b50:	54 49 4d 45 20 00                                   TIME .

00000b56 <strLives>:
     b56:	4c 49 56 45 53 20 00                                LIVES .

00000b5d <strShield>:
     b5d:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b65 <strScore>:
     b65:	53 43 4f 52 45 20 00                                SCORE .

00000b6c <strSelectHandle>:
	...

00000b6d <strHighScores>:
     b6d:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b79 <str1Player>:
     b79:	53 54 41 52 54 00                                   START.

00000b7f <strMusic>:
     b7f:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b8f:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b97 <strCopyright>:
     b97:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     ba7:	4f 4f 4b 53 00                                      OOKS.

00000bac <spacesong>:
     bac:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bbc:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bcc:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bdc:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bec:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bfc:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c0c:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c1c:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c2c:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c3c:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c4c:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c5c:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c6c:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c7c:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c8c:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c9c:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     cac:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cbc:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ccc:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cdc:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     cec:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cfc:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d0c:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d1c:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d2c:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d3c:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d4c:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d5c:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d6c:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d7c:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d8c:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d9c:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     dac:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     dbc:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dcc:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     ddc:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     dec:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     dfc:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e0c:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e1c:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e2c:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e3c:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e4c:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e5c:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e6c:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e7c:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e8c:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e9c:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     eac:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ebc:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ecc:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     edc:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     eec:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     efc:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f0c:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f1c:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f2c:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f3c:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f4c:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f5c:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f6c:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f7c:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f8c:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f9c:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fac:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     fbc:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fcc:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fdc:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fec:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     ffc:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    100c:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    101c:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    102c:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    103c:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    104c:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    105c:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    106c:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    107c:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    108c:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    109c:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10ac:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10bc:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10cc:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10dc:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10ec:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10fc:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    110c:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    111c:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    112c:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    113c:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    114c:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    115c:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    116c:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    117c:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    118c:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    119c:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11ac:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11bc:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11cc:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11dc:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11ec:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11fc:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    120c:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    121c:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    122c:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    123c:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000124c <planetsong>:
    124c:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    125c:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    126c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    127c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    128c:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    129c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12ac:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12bc:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12cc:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12dc:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12ec:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12fc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    130c:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    131c:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    132c:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    133c:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    134c:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    135c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    136c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    137c:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    138c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    139c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13ac:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13bc:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13cc:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13dc:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13ec:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13fc:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    140c:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    141c:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    142c:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    143c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    144c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    145c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    146c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    147c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    148c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    149c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14ac:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14bc:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14cc:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14dc:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14ec:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14fc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    150c:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    151c:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    152c:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    153c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    154c:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    155c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    156c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    157c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    158c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    159c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15ac:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15bc:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15cc:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15dc:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15ec:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15fc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    160c:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    161c:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    162c:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    163c:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    164c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    165c:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    166c:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    167c:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    168c:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    169c:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16ac:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16bc:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16cc:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16dc:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16ec:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16fc:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    170c:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    171c:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    172c:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    173c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    174c:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    175c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    176c:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    177c:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    178c:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    179c:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17ac:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17bc:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17cc:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17dc:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17ec:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17fc:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    180c:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    181c:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    182c:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    183c:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    184c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    185c:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    186c:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    187c:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    188c:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    189c:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18ac:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18bc:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18cc:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18dc:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18ec:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18fc:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    190c:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    191c:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    192c:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    193c:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    194c:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    195c:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    196c:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    197c:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    198c:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    199c:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19ac:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19bc:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19cc:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19dc:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19ec:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19fc:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a0c:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a1c:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a2c:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a3c:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a4c:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a5c:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a6c:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a7c:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a8c:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a9c:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1aac:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1abc:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1acc:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1adc:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1aec:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1afc:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b0c:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b1c:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b2c:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b3c:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b4c:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b5c:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b6c:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b7c:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b8c:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b9c:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1bac:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bbc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bcc:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bdc:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bec:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bfc:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c0c:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c1c:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c2c:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c3c:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c4c:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c5c:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c6c:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c7c:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c8c:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c9c:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1cac:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cbc:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ccc:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cdc:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1cec:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cfc:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d0c:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d1c:	2f 00                                               /.

00001d1e <my_patches>:
    1d1e:	00 00 00 95 1e 00 00 00 00 00 00 00 95 1e 00 00     ................
    1d2e:	00 00 00 00 00 84 1e 00 00 00 00 00 00 00 2e 1e     ................
    1d3e:	00 00 00 00 00 00 00 84 1e 00 00 00 00 00 00 00     ................
    1d4e:	5d 1d 00 00 00 00 00 00 00 5d 1d 00 00 00 00        ]........].....

00001d5d <explode>:
    1d5d:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d6d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d7d:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d8d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d9d:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1dad:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1dbd:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dcd:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1ddd:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1ded:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dfd:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e0d:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e1d:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e2d:	ff                                                  .

00001e2e <pshoot>:
    1e2e:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e3e:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e4e:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e5e:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e6e:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e7e:	00 01 05 00 00 ff                                   ......

00001e84 <navigate>:
    1e84:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e94:	ff                                                  .

00001e95 <instrument>:
    1e95:	00 02 04 00 00 dd 00 ff                             ........

00001e9d <sprites_data>:
    1e9d:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ead:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ebd:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1ecd:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1edd:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1eed:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1efd:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f0d:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f2d:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f3d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f4d:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f5d:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f6d:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f7d:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f8d:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f9d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fad:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1fbd:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fcd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fdd:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fed:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1ffd:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    200d:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    201d:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    202d:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    203d:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    204d:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    205d:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    206d:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    207d:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    208d:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    209d:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20ad:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20bd:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20cd:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20dd:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ed:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20fd:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    210d:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211d:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    212d:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    213d:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    214d:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    215d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    218d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    219d:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21ad:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21bd:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21cd:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21fd:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    220d:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    221d:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    222d:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    223d:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    224d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    225d:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    226d:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    227d:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    228d:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    229d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22ad:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22bd:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22cd:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22dd:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ed:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22fd:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    230d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    231d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    232d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    233d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    234d:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    235d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    236d:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    237d:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    238d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    239d:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    23ad:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    23bd:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23cd:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23dd:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ed:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23fd:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    240d:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    241d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    242d:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    243d:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    244d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    245d:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    246d:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    247d:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    248d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    249d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    24ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    24bd:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24cd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24dd:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ed:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24fd:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    250d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    251d:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    252d:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    253d:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    254d:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    255d:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    256d:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    257d:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    258d:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    259d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    25ad:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    25bd:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25cd:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25dd:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ed:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25fd:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    260d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    261d:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    262d:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    263d:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    264d:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    265d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    266d:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    267d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    268d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    269d:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    26ad:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    26bd:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26cd:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26dd:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ed:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26fd:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    270d:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    271d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    272d:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    273d:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    274d:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    275d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    276d:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    277d:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    278d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    279d:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    27ad:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    27bd:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27cd:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ed:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27fd:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    280d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    281d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    282d:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    283d:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    284d:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    285d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    287d:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    288d:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    289d:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    28ad:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    28bd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28cd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28dd:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ed:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28fd:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    290d:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    291d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    292d:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    293d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    294d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295d:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    296d:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    297d:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    298d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    299d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ad:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    29bd:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29cd:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ed:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29fd:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2a0d:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2a1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a2d:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a3d:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a4d:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a5d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a6d:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a7d:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a8d:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a9d:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2aad:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2abd:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2acd:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2add:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2aed:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2afd:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2b0d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2b1d:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b5d:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b6d:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b7d:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b8d:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b9d:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2bad:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2bbd:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bcd:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bdd:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bed:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bfd:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2c0d:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2c1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c4d:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c6d:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c7d:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c8d:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c9d:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2cad:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2cbd:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2ccd:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cdd:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ced:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cfd:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2d0d:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2d1d:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d2d:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d3d:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d4d:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d5d <map_enemy_spider_1>:
    2d5d:	01 01 29                                            ..)

00002d60 <map_enemy_spider_0>:
    2d60:	01 01 1e                                            ...

00002d63 <map_enemy_shark>:
    2d63:	01 01 05                                            ...

00002d66 <map_enemy_shot>:
    2d66:	01 01 13                                            ...

00002d69 <map_hero_shot>:
    2d69:	01 01 04                                            ...

00002d6c <map_hero_ship_large_1>:
    2d6c:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d76 <map_hero_ship_large_0>:
    2d76:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d80 <map_hero_ship_1>:
    2d80:	03 01 2a 20 21                                      ..* !

00002d85 <map_hero_ship_0>:
    2d85:	03 01 1f 20 21                                      ... !

00002d8a <map_hero_prone>:
    2d8a:	03 01 36 37 38                                      ..678

00002d8f <map_hero_jump>:
    2d8f:	02 03 02 03 0f 12 1c 1d                             ........

00002d97 <map_hero_step_3>:
    2d97:	02 03 02 03 0f 33 34 35                             .....345

00002d9f <map_hero_step_2>:
    2d9f:	02 03 00 01 0c 11 1a 1b                             ........

00002da7 <map_hero_step_1>:
    2da7:	02 03 02 03 0f 10 18 19                             ........

00002daf <map_hero_step_0>:
    2daf:	02 03 00 01 0c 0e 16 17                             ........

00002db7 <map_hero_idle>:
    2db7:	02 03 00 01 0c 0d 14 15                             ........

00002dbf <map_emerald_4>:
    2dbf:	01 01 0a                                            ...

00002dc2 <map_emerald_3>:
    2dc2:	01 01 09                                            ...

00002dc5 <map_emerald_2>:
    2dc5:	01 01 08                                            ...

00002dc8 <map_emerald_0>:
    2dc8:	01 01 07                                            ...

00002dcb <map_emerald_1>:
    2dcb:	01 01 06                                            ...

00002dce <map_explosion_2>:
    2dce:	01 01 24                                            ..$

00002dd1 <map_explosion_1>:
    2dd1:	01 01 23                                            ..#

00002dd4 <map_explosion_0>:
    2dd4:	01 01 22                                            .."

00002dd7 <map_particle>:
    2dd7:	01 01 25                                            ..%

00002dda <map_up_arrow>:
    2dda:	01 01 28                                            ..(

00002ddd <map_down_arrow>:
    2ddd:	01 01 27                                            ..'

00002de0 <map_right_arrow>:
    2de0:	01 01 26                                            ..&

00002de3 <map_none>:
    2de3:	01 01 0b                                            ...

00002de6 <tiles_data>:
	...
    2e26:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e36:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2e46:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    2e56:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    2e66:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e76:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2e86:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    2e96:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2ea6:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2eb6:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    2ec6:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    2ed6:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    2ee6:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    2ef6:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    2f06:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    2f16:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    2f26:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    2f36:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    2f46:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    2f56:	af af af af af af af af af af af af af af af af     ................
    2f66:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f76:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f86:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2f96:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2fa6:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fb6:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fc6:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fd6:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2fe6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2ff6:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    3006:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    3016:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3026:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3036:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3046:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3056:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3066:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3076:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3086:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3096:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    30a6:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30b6:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    30c6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30d6:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    30e6:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    30f6:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3106:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3116:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3126:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    3136:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    3146:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3156:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3166:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3176:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3186:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3196:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    31a6:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31b6:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31c6:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31d6:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    31e6:	2b 28 2b 28 2b 28 2b 28 28 2b 28 2b 28 2b 28 2b     +(+(+(+((+(+(+(+
    31f6:	28 2b 28 2b 28 2b 28 2b 28 2b 65 6e 65 6e 28 2b     (+(+(+(+(+enen(+
    3206:	28 65 6e 65 6e 65 6e 2b 65 6e 65 6e 65 6e 65 6e     (enenen+enenenen
    3216:	6e 65 6e 65 6e 65 6e 65 65 6e 65 6e 65 6e 65 6e     neneneneenenenen
    3226:	b5 23 23 b5 b5 23 23 b5 b5 b5 b5 23 23 b5 b5 b5     .##..##....##...
    3236:	b5 06 06 06 06 06 06 b5 06 06 06 06 06 06 06 06     ................
    3246:	b5 06 06 06 06 06 06 b5 b5 b5 06 06 06 06 b5 b5     ................
    3256:	b5 06 06 77 77 06 06 b5 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3266:	23 64 63 62 23 64 63 62 23 64 63 62 23 64 63 62     #dcb#dcb#dcb#dcb
    3276:	23 65 65 65 23 65 65 65 23 65 65 65 23 65 65 65     #eee#eee#eee#eee
    3286:	23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5 23 b5     #.#.#.#.#.#.#.#.
    3296:	23 23 23 b5 23 b5 23 b5 b5 23 23 b5 b5 23 23 b5     ###.#.#..##..##.
    32a6:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    32b6:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    32c6:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    32d6:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    32e6:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    32f6:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3306:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3316:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3326:	80 80 80 00 80 80 80 80 80 80 80 00 80 80 80 80     ................
    3336:	80 00 00 00 80 80 80 80 80 00 80 80 80 80 80 80     ................
    3346:	80 00 00 00 80 80 80 80 80 80 80 00 00 00 80 80     ................
    3356:	80 80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80     ................
    3366:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3376:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3386:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3396:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    33a6:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    33b6:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    33c6:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    33d6:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    33e6:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    33f6:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3406:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3416:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3426:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3436:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3446:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3456:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3466:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3476:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3486:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    3496:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    34a6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    34b6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    34e6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    34f6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3506:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3516:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
	...
    353e:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    354e:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    357e:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    358e:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35a6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35b6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35c6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35d6:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    35e6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    35f6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3606:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3616:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    3626:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3636:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3646:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3656:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3672:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3682:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3692:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    36a2:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    36b2:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36c2:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36d2:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    36e2:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    36f2:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3702:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3712:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3722:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3732:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3742:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3752:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3762:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3772:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3782:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3792:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    37a2:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    37b2:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    37c2:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    37d2:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    37e2:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    37f2:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    3802:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    3812:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    3822:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    3832:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3842:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    3852:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3862:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    3872:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    3882:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    3892:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    38a2:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    38b2:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    38c2:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    38d2:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    38e2:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    38f2:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    3902:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    3912:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    3922:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    3932:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    3942:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3952:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    3962:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    3972:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    3982:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    39a6:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    39b6:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    39c6:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    39d6:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    39e6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    39f6:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3a06:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    3a2e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3a3e:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    3a4e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3a6e:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    3a7e:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    3a8e:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    3aae:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    3abe:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3ace:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    3aee:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    3afe:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    3b0e:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3b32:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    3b42:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    3b52:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    3b6e:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    3b7e:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    3b8e:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    3bae:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    3bbe:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    3bce:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3bee:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    3bfe:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    3c0e:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    3c2e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c3e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c4e:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    3c6e:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    3c7e:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    3c8e:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    3cae:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    3cbe:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3cce:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3cee:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3cfe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3d0e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    3d2e:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    3d3e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3d4e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    3d6e:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    3d7e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3d8e:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    3dae:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3dbe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3dce:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3dee:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3dfe:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    3e0e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    3e2e:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    3e3e:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    3e4e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    3e6e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e7e:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    3e8e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    3eae:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    3ebe:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    3ece:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3ef2:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f02:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    3f12:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    3f2e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    3f3e:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    3f4e:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    3f6e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f7e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    3f8e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    3fae:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    3fbe:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    3fce:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    3fee:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    3ffe:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    400e:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    402e:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    403e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    404e:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    406e:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    407e:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    408e:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    40ae:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    40be:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    40ce:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    40ee:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    40fe:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    410e:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    412e:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    413e:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    414e:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    416e:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    417e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    418e:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    41ae:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41be:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    41ce:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    41ee:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    41fe:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    420e:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    422e:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    423e:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    424e:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    426e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    427e:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    428e:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    42ae:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    42be:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    42ce:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    42ee:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    42fe:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    430e:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4326:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4336:	bf bf bf bf 00 00 00 00 bf bf bf bf 00 00 00 00     ................
    4346:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4356:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    4386:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4396:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43a6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43b6:	00 00 00 00 bf bf bf bf 00 00 00 00 bf bf bf bf     ................
    43c6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43d6:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43e6:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    43f6:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4406:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4416:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4426:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4436:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4446:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4456:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4466:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4476:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4486:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4496:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44a6:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    44b6:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    44c6:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44d6:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    44e6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    44f6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4506:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4516:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4526:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4536:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4546:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4556:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4566:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4576:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4586:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4596:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    45a6:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45b6:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45c6:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45d6:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    45e6:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    45f6:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4606:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4616:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4626:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4636:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4646:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4656:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4666:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4676:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4686:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4696:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    46a6:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    46b6:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    46c6:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    46d6:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    46e6:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    46f6:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4706:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4716:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4726:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4736:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4746:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4756:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4766:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4776:	fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    4786:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4796:	b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6 b6     ................
    47a6:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47b6:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47c6:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47d6:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    47e6:	b5 b5 b5 b5 b5 b5 19 19 b5 b5 b5 b5 19 19 19 19     ................
    47f6:	b5 b5 b5 19 b5 b5 b5 19 b5 b5 19 b5 b5 b5 b5 b5     ................
    4806:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4816:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4826:	19 b5 b5 b5 b5 b5 b5 19 19 19 19 b5 b5 19 19 19     ................
    4836:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4846:	19 19 19 19 19 19 19 19 b5 19 19 19 19 19 19 b5     ................
    4856:	b5 19 19 19 19 19 19 b5 b5 19 19 19 19 19 19 b5     ................
    4866:	19 19 b5 b5 b5 b5 b5 b5 19 19 19 19 b5 b5 b5 b5     ................
    4876:	19 b5 b5 b5 19 b5 b5 b5 b5 b5 b5 b5 b5 19 b5 b5     ................
    4886:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    4896:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    48a6:	14 14 14 14 14 14 14 14 14 14 14 14 14 19 12 12     ................
    48b6:	14 14 14 19 19 14 14 14 12 12 19 14 14 14 14 14     ................
    48c6:	14 14 14 14 14 14 14 14 14 14 14 14 14 19 12 12     ................
    48d6:	14 14 14 19 19 14 14 14 12 12 19 14 14 14 14 14     ................
    48e6:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    48f6:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4906:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4916:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4926:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4936:	80 80 80 80 80 80 80 80 80 80 80 e3 80 80 80 80     ................
    4946:	80 80 e3 ff e3 80 80 80 80 80 80 e3 80 80 80 80     ................
    4956:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    4966:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    4976:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    4986:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    4996:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49a6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49b6:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    49c6:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    49d6:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49e6:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    49f6:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    4a06:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    4a16:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a26:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a36:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a46:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a56:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a66:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a76:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    4a86:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4a96:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    4aa6:	80 80 00 80 80 80 80 80 80 80 00 80 80 80 80 80     ................
    4ab6:	00 00 00 80 80 80 80 80 00 80 80 80 80 80 80 80     ................
    4ac6:	00 00 00 80 80 80 80 80 80 80 00 00 00 80 80 80     ................
    4ad6:	80 80 80 80 7f 80 80 80 80 80 80 7f 80 7f 80 80     ................
    4ae6:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    4af6:	be be be be be be be be be be be be be be be be     ................
    4b06:	b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7 b7     ................
    4b16:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b26:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b36:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b46:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b56:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b66:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b76:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b86:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4b96:	77 77 77 77 77 77 77 5b 77 77 77 77 77 5b 09 09     wwwwwww[wwwww[..
    4ba6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4bb6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4bc6:	77 77 77 77 5b 5b 09 09 77 77 77 5b 5b 5a 5b 5a     wwww[[..www[[Z[Z
    4bd6:	5a 5b 5b 09 09 09 09 09 09 09 09 00 00 50 08 00     Z[[..........P..
    4be6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4bf6:	77 77 77 77 77 77 5b 5b 77 77 77 77 5b 5a 09 09     wwwwww[[wwww[Z..
    4c06:	5b 09 09 09 09 08 00 00 09 09 09 08 09 09 09 09     [...............
    4c16:	08 09 09 09 09 09 09 00 09 00 5a 08 09 09 5a 5b     ..........Z...Z[
    4c26:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 5b 5a     wwwwwwwwwwwwww[Z
    4c36:	5b 12 5b 5b 5b 5b 5a 00 00 09 09 5a 09 09 08 09     [.[[[[Z....Z....
    4c46:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4c56:	09 09 00 00 09 00 09 00 09 52 5a 5b 59 59 00 59     .........RZ[YY.Y
    4c66:	5b 5b 5b 5b 5b 77 77 77 09 12 09 09 09 09 5b 5b     [[[[[www......[[
    4c76:	08 00 00 09 5a 08 09 5b 09 08 00 08 08 09 09 09     ....Z..[........
    4c86:	12 5a 5b 09 09 09 09 09 09 09 09 09 09 09 5b 5b     .Z[...........[[
    4c96:	09 5b 12 09 09 09 09 00 59 09 5a 00 51 00 59 5a     .[......Y.Z.Q.YZ
    4ca6:	77 77 77 77 77 77 77 77 5b 77 77 77 77 77 77 77     wwwwwwww[wwwwwww
    4cb6:	5b 5b 77 77 77 77 77 5b 5a 5a 5b 5b 5b 09 09 09     [[wwwww[ZZ[[[...
    4cc6:	09 09 09 09 09 09 5b 5b 5b 5b 09 09 09 00 09 00     ......[[[[......
    4cd6:	09 09 09 5b 09 09 09 08 51 00 09 09 09 09 51 00     ...[....Q.....Q.
    4ce6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4cf6:	5b 77 77 77 77 77 77 77 12 5b 5b 5b 77 77 77 77     [wwwwwww.[[[wwww
    4d06:	5a 09 09 09 09 5b 5b 5b 09 09 09 5b 09 5a 12 5b     Z....[[[...[.Z.[
    4d16:	08 00 00 00 00 09 09 09 09 00 09 09 08 09 09 09     ................
    4d26:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d36:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d46:	5b 5b 77 77 77 77 77 77 5a 09 5a 5a 5b 5b 5b 5b     [[wwwwwwZ.ZZ[[[[
    4d56:	09 09 5b 09 09 09 09 5a 09 09 09 09 00 09 09 5b     ..[....Z.......[
    4d66:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d76:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d86:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4d96:	09 09 09 5b 5b 5b 77 77 5b 5a 09 5a 09 09 09 5b     ...[[[ww[Z.Z...[
    4da6:	77 77 77 5b 5b 5b 09 09 77 77 77 5b 5a 08 08 5a     www[[[..www[Z..Z
    4db6:	77 77 77 77 77 77 77 59 77 77 77 77 77 77 77 77     wwwwwwwYwwwwwwww
    4dc6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4dd6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4de6:	09 00 00 00 00 00 00 08 5a 00 00 09 00 00 51 08     ........Z.....Q.
    4df6:	77 59 77 09 09 08 77 77 77 77 77 77 77 00 00 00     wYw...wwwwwww...
    4e06:	77 77 77 77 77 77 77 00 77 77 77 77 77 77 77 77     wwwwwww.wwwwwwww
    4e16:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4e26:	5a 00 5a 09 00 09 09 77 00 00 08 00 5a 51 59 59     Z.Z....w....ZQYY
    4e36:	09 09 00 51 09 09 09 77 77 77 51 09 00 77 77 09     ...Q...wwwQ..ww.
    4e46:	00 09 00 52 00 08 5b 77 00 00 00 77 77 77 77 5b     ...R..[w...wwww[
    4e56:	77 77 77 00 00 00 00 00 77 77 77 77 77 77 77 00     www.....wwwwwww.
    4e66:	59 5b 00 77 77 09 77 09 09 77 00 77 77 77 77 77     Y[.ww.w..w.wwwww
    4e76:	77 00 00 00 77 77 77 77 77 77 00 77 00 77 77 77     w...wwwwww.w.www
    4e86:	09 00 00 00 08 00 09 77 5b 00 77 77 09 77 09 09     .......w[.ww.w..
    4e96:	77 77 09 09 09 09 77 09 00 00 77 77 77 00 09 77     ww....w...www..w
    4ea6:	08 77 77 77 77 09 09 5b 77 09 77 09 09 00 5b 5b     .wwww..[w.w...[[
    4eb6:	77 00 09 00 00 09 77 5b 12 00 5b 77 09 09 77 00     w.....w[..[w..w.
    4ec6:	77 09 77 77 09 09 09 00 77 00 00 77 09 77 00 09     w.ww....w..w.w..
    4ed6:	00 77 09 00 09 77 00 77 77 09 09 09 09 00 00 09     .w...w.ww.......
    4ee6:	77 77 00 77 77 00 00 09 5b 77 77 77 77 77 00 00     ww.ww...[wwwww..
    4ef6:	00 00 77 77 77 09 77 09 77 77 09 77 00 09 09 5b     ..www.w.ww.w...[
    4f06:	77 77 77 09 00 00 00 00 09 00 09 77 00 77 5b 77     www........w.w[w
    4f16:	09 77 77 77 00 5b 77 77 77 77 00 00 00 77 77 77     .www.[wwww...www
    4f26:	09 09 09 09 00 09 09 5b 5a 09 5a 5b 5b 5a 5a 08     .......[Z.Z[[ZZ.
    4f36:	77 09 77 77 09 09 5a 09 77 00 77 00 77 77 77 00     w.ww..Z.w.w.www.
    4f46:	09 00 77 09 77 09 09 00 77 77 77 00 00 09 00 00     ..w.w...www.....
    4f56:	77 77 00 00 77 77 00 77 77 00 77 77 77 09 00 00     ww..ww.ww.www...
    4f66:	09 09 09 09 09 09 09 09 09 09 5a 59 77 77 77 77     ..........ZYwwww
    4f76:	5a 08 09 09 5a 00 00 77 77 77 77 77 77 00 77 77     Z...Z..wwwwww.ww
    4f86:	77 77 77 77 00 77 77 77 77 77 77 00 77 77 77 77     wwww.wwwwww.wwww
    4f96:	77 77 09 77 77 77 77 77 09 00 77 77 77 77 77 77     ww.wwwww..wwwwww
    4fa6:	09 5b 09 09 09 5b 5b 59 77 77 77 77 77 77 77 77     .[...[[Ywwwwwwww
    4fb6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4fc6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4fd6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    4fe6:	77 00 09 09 77 77 09 09 77 77 77 77 12 77 77 00     w...ww..wwww.ww.
    4ff6:	77 77 77 77 00 00 77 09 77 77 77 77 77 77 00 77     wwww..w.wwwwww.w
    5006:	77 77 77 77 77 77 00 00 77 77 77 77 77 77 77 0a     wwwwww..wwwwwww.
    5016:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5026:	09 00 00 00 77 5b 09 09 77 77 00 77 77 09 77 09     ....w[..ww.ww.w.
    5036:	77 77 00 77 77 00 09 77 00 77 00 77 00 00 77 77     ww.ww..w.w.w..ww
    5046:	00 77 00 77 00 77 77 77 77 5b 00 09 5b 77 77 77     .w.w.wwww[..[www
    5056:	00 00 00 00 77 77 77 08 77 0a 00 09 77 77 77 09     ....www.w...www.
    5066:	09 09 5b 77 77 77 77 77 09 77 77 77 77 77 77 5b     ..[wwwww.wwwwww[
    5076:	09 00 77 77 77 77 09 00 09 77 77 77 09 09 77 77     ..wwww...www..ww
    5086:	00 77 77 5b 00 5b 77 77 09 77 5b 00 00 77 77 77     .ww[.[ww.w[..www
    5096:	09 5b 00 77 77 77 77 77 00 00 77 77 77 77 77 77     .[.wwwww..wwwwww
    50a6:	00 00 5b 00 00 00 77 77 00 00 00 00 77 77 77 77     ..[...ww....wwww
    50b6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50c6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50d6:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    50e6:	77 77 00 09 77 77 09 09 77 77 00 09 77 00 00 77     ww..ww..ww..w..w
    50f6:	77 77 59 00 00 00 77 77 77 77 77 00 00 13 77 77     wwY...wwwww...ww
    5106:	77 77 77 00 00 5c 77 77 77 77 02 00 00 77 77 77     www..\wwww...www
    5116:	77 02 02 00 00 5c 77 77 77 02 00 00 00 77 77 77     w....\www....www

00005126 <map_font>:
    5126:	25 01 00 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d     %..123456789:;<=
    5136:	3e 3f 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d     >?@ABCDEFGHIJKLM
    5146:	4e 4f 50 51 52 53 54                                NOPQRST

0000514d <map_atmosphere>:
    514d:	1c 02 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b     ..++++++++++++++
    515d:	2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2f 2f     ++++++++++++++//
    516d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    517d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f                       //////////

00005187 <map_star_dark>:
    5187:	01 01 1e                                            ...

0000518a <map_star>:
    518a:	01 01 1d                                            ...

0000518d <map_desert_spike_down>:
    518d:	01 01 18                                            ...

00005190 <map_desert_spike_up>:
    5190:	01 01 19                                            ...

00005193 <map_desert_top>:
    5193:	01 01 16                                            ...

00005196 <map_desert_bottom>:
    5196:	01 01 17                                            ...

00005199 <map_city_spark>:
    5199:	01 01 15                                            ...

0000519c <map_city_top>:
    519c:	01 01 14                                            ...

0000519f <map_city_bottom>:
    519f:	01 01 13                                            ...

000051a2 <map_jungle_branch>:
    51a2:	01 01 12                                            ...

000051a5 <map_jungle_flower>:
    51a5:	01 01 11                                            ...

000051a8 <map_jungle_top>:
    51a8:	01 01 10                                            ...

000051ab <map_jungle_bottom>:
    51ab:	01 01 0f                                            ...

000051ae <map_fire_lava>:
    51ae:	01 01 0e                                            ...

000051b1 <map_fire_top>:
    51b1:	01 01 0d                                            ...

000051b4 <map_fire_bottom>:
    51b4:	01 01 0c                                            ...

000051b7 <map_icicle_up>:
    51b7:	01 01 0a                                            ...

000051ba <map_icicle_down>:
    51ba:	01 01 09                                            ...

000051bd <map_ice_bottom>:
    51bd:	01 01 04                                            ...

000051c0 <map_ice_right>:
    51c0:	01 01 03                                            ...

000051c3 <map_ice_middle>:
    51c3:	01 01 02                                            ...

000051c6 <map_ice_left>:
    51c6:	01 01 01                                            ...

000051c9 <map_canvas>:
    51c9:	0f 09 1a 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    51d9:	1c 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20     ............... 
    51e9:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    5205:	00 20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     . ..............
    5215:	20 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20      .............. 
    5225:	1f 00 00 00 00 00 00 00 00 00 00 00 00 00 20 1f     .............. .
	...
    5241:	00 20 55 56 56 56 56 56 56 56 56 56 56 56 56 56     . UVVVVVVVVVVVVV
    5251:	57                                                  W

00005252 <map_splash>:
    5252:	0f 05 21 21 21 00 21 21 21 00 22 23 24 1d 21 21     ..!!!.!!!."#$.!!
    5262:	21 00 21 00 00 21 1e 00 00 25 26 27 00 21 00 1d     !.!..!...%&'.!..
    5272:	1e 21 00 1d 21 00 00 00 28 29 2a 00 21 21 21 00     .!..!...()*.!!!.
    5282:	21 00 00 21 00 1d 00 2c 2d 2e 00 00 00 21 21 21     !..!...,-....!!!
    5292:	21 00 21 00 00 00 30 00 1e 00 21 21 21              !.!...0...!!!

0000529f <map_tile_none>:
    529f:	01 01 00                                            ...

000052a2 <map_level_mega_tiles>:
    52a2:	06 06 06 06 06 08 06 06 06 06 06 06 06 06 06 06     ................
    52b2:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    52c2:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    52d2:	06 06 06 06 06 06 06 06 06 08 06 06 06 06 06 06     ................
    52e2:	06 06 06 06 04 04 04 04 04 04 04 04 04 04 04 04     ................
    52f2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5302:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5312:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5322:	06 06 06 06 06 06 08 06 06 06 06 06 06 06 06 06     ................
    5332:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5342:	06 06 06 06 06 06 06 06 06 06 06 06 06 04 04 04     ................
    5352:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5362:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5372:	06 06 06 06 06 06 08 06 06 06 06 06 06 06 06 06     ................
    5382:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5392:	06 06 06 06 06 06 06 06 08 06 06 06 06 04 04 04     ................
    53a2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    53b2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    53c2:	04 04 04 04 04 04 04 04 04 06 06 06 06 06 06 06     ................
    53d2:	06 06 06 06 06 06 06 08 06 06 06 06 06 06 06 06     ................
    53e2:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    53f2:	06 06 08 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5402:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 06 06     ................
    5412:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 04     ................
    5422:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5432:	04 04 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5442:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5452:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5462:	06 08 06 06 06 06 06 06 06 06 06 06 06 06 06 04     ................
    5472:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5482:	04 04 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5492:	06 06 06 06 06 08 06 06 06 06 06 06 06 06 06 06     ................
    54a2:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    54b2:	06 06 06 08 06 06 06 06 06 06 06 06 06 06 06 06     ................
    54c2:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    54d2:	06 06 08 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    54e2:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    54f2:	06 04 04 04 04 04 04 04 06 06 06 06 06 06 06 06     ................
    5502:	06 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5512:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5522:	05 05 05 05 05 05 05 05 05 05 05 05 05 04 04 04     ................
    5532:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5542:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5552:	04 04 04 04 04 04 04 04 04 05 05 05 05 05 05 05     ................
    5562:	05 05 05 05 05 05 02 02 02 02 02 02 02 02 05 05     ................
    5572:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5582:	05 05 05 05 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5592:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    55a2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    55b2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    55c2:	04 04 07 07 07 07 07 07 07 07 07 07 07 07 07 09     ................
    55d2:	09 09 09 09 09 09 09 07 07 07 07 07 07 07 07 07     ................
    55e2:	07 07 07 07 07 07 09 09 09 09 09 09 09 09 09 09     ................
    55f2:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5602:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5612:	09 09 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5622:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5632:	07 07 07 07 07 07 07 07 07 07 02 02 0a 0a 0a 0a     ................
    5642:	0a 0a 0a 0a 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5652:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5662:	07 07 07 07 07 07 02 02 02 02 02 02 02 02 07 07     ................
    5672:	07 04 04 04 04 04 04 04 04 04 04 07 07 07 07 07     ................
    5682:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5692:	07 07 07 07 07 07 07 07 07 07 07 07 02 04 04 04     ................
    56a2:	04 04 04 04 04 02 02 07 07 07 07 07 07 07 07 07     ................
    56b2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    56c2:	07 09 09 09 09 09 09 09 09 09 09 07 07 07 07 07     ................
    56d2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    56e2:	07 07 07 07 07 07 07 07 07 07 07 02 04 04 04 04     ................
    56f2:	04 04 04 04 04 04 04 02 02 07 07 07 07 07 07 07     ................
    5702:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5712:	07 07 07 07 07 07 07 07 07 07 07 07 02 02 02 02     ................
    5722:	02 02 02 02 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5732:	07 07 07 07 07 07 07 02 02 02 02 02 02 02 02 07     ................
    5742:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5752:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5762:	07 07 07 07 07 58 07 07 07 07 07 07 02 04 04 04     .....X..........
    5772:	04 04 04 04 04 04 04 04 04 04 04 02 07 07 07 07     ................
    5782:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5792:	07 07 07 07 07 07 58 07 07 07 07 07 07 07 09 09     ......X.........
    57a2:	09 09 09 09 09 09 07 07 07 07 07 07 07 07 07 07     ................
    57b2:	07 07 07 07 07 07 07 07 07 09 09 09 09 09 09 09     ................
    57c2:	09 07 07 07 07 07 58 07 07 07 07 07 07 07 59 5a     ......X.......YZ
    57d2:	5b 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     [...............
    57e2:	07 07 07 07 07 07 07 07 07 02 02 02 02 02 04 04     ................
    57f2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 02 59     ...............Y
    5802:	5a 5b 07 07 07 07 07 07 07 07 07 07 07 07 07 07     Z[..............
    5812:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5822:	07 07 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5832:	02 02 02 02 0a 0a 0a 0a 0a 0a 02 02 0a 0a 0a 0a     ................
    5842:	0a 0a 02 02 0a 0a 0a 0a 0a 0a 07 07 07 07 07 07     ................
    5852:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5862:	07 59 5a 5b 07 07 07 07 07 07 07 07 07 07 07 07     .YZ[............
    5872:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5882:	5b 5a 5c 07 07 07 07 07 07 07 07 07 07 07 07 07     [Z\.............
    5892:	07 07 07 07 07 07 07 07 07 07 07 07 02 04 04 04     ................
    58a2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    58b2:	04 04 04 02 07 07 07 07 07 07 07 07 07 07 07 07     ................
    58c2:	07 07 07 07 07 07 07 07 07 07 5b 5a 5c 07 07 07     ..........[Z\...
    58d2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    58e2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 02 04     ................
    58f2:	04 04 04 04 04 04 04 04 04 07 5b 5a 5c 07 07 07     ..........[Z\...
    5902:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5912:	07 07 07 07 07 07 07 07 07 07 07 07 07 5c 5b 5a     .............\[Z
    5922:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5932:	07 07 07 07 07 07 02 04 04 04 04 04 04 04 04 04     ................
    5942:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 02     ................
    5952:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5962:	07 07 07 07 07 07 07 5c 5b 5a 07 07 07 07 07 07     .......\[Z......
    5972:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5982:	07 07 07 07 07 07 07 07 02 04 04 04 04 04 04 07     ................
    5992:	07 07 07 07 07 07 07 5c 5b 5a 07 07 07 07 07 07     .......\[Z......
    59a2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    59b2:	07 07 07 07 07 07 5a 5b 5c 07 07 07 07 07 07 07     ......Z[\.......
    59c2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    59d2:	02 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    59e2:	04 04 04 04 04 04 04 04 04 04 04 02 07 07 07 07     ................
    59f2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5a02:	5a 5b 5c 07 07 07 07 07 07 07 07 07 07 07 07 07     Z[\.............
    5a12:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5a22:	07 07 02 04 04 07 07 07 07 07 07 07 07 07 07 07     ................
    5a32:	5a 5b 5c 07 07 07 07 07 07 07 07 07 07 07 07 07     Z[\.............
    5a42:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5a52:	07 07 07 5d 07 07 07 07 07 07 07 07 07 07 07 07     ...]............
    5a62:	07 07 07 07 07 07 07 07 07 07 02 04 04 04 04 04     ................
    5a72:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5a82:	04 04 04 04 04 04 04 02 07 07 07 07 07 07 07 07     ................
    5a92:	07 07 07 07 07 07 07 07 07 07 07 07 07 5d 07 07     .............]..
    5aa2:	07 07 07 02 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5ab2:	04 04 04 04 04 04 04 04 04 04 04 07 07 07 07 07     ................
    5ac2:	07 07 07 07 07 07 07 07 07 07 07 07 07 5d 07 07     .............]..
    5ad2:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5ae2:	07 07 07 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5af2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5b02:	02 02 02 02 02 04 04 04 04 04 02 02 02 02 02 02     ................
    5b12:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5b22:	02 0a 0a 0a 0a 0a 0a 02 02 0a 0a 0a 0a 0a 0a 02     ................
    5b32:	02 0a 0a 0a 0a 0a 0a 02 02 02 02 02 02 02 04 04     ................
    5b42:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5b52:	04 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5b62:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5b72:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 04 04     ................
    5b82:	04 04 04 00 00 00 00 00 00 00 1d 00 00 00 00 00     ................
	...
    5b9a:	00 00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5bb2:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 1d     ................
    5bc2:	00 00 00 00 00 00 1d 00 00 00 00 00 1e 00 00 00     ................
	...
    5bda:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5bf2:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5c02:	00 1e 00 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
	...
    5c1a:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5c2a:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 1e 00     ................
	...
    5c46:	00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 1d     ................
	...
    5c62:	1d 00 00 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
	...
    5c7a:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5c96:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5ca6:	00 1d 00 00 00 1d 00 00 00 00 00 00 00 00 1e 00     ................
	...
    5cce:	00 00 00 1e 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cde:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cee:	00 00 1d 00 00 00 00 1d 00 00 00 00 00 00 1d 00     ................
	...
    5d06:	1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d16:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d26:	00 00 00 1d 00 00 00 00 00 00 00 00 1e 00 00 00     ................
	...
    5d42:	00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5d52:	00 00 00 00 00 00 1e 00 00 00 00 00 1d 00 00 00     ................
	...
    5d6e:	1e 00 00 00 00 00 00 00 00 00 00 1d 00 00 1d 00     ................
    5d7e:	00 00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00     ................
    5d8e:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5da6:	00 1e 00 00 00 00 00 00 00 00 00 00 00 00 1d 00     ................
	...
    5dc2:	1e 00 00 00 00 00 00 00 00 00 00 00 1e 00 00 00     ................
    5dd2:	00 00 00 00 00 00 00 1d 00 00 00 00 00 00 00 00     ................
    5de2:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5dfe:	1d 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5e0e:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5e26:	00 00 00 1d 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5e36:	00 00 00 00 00 00 1e 00 00 00 00 00 00 00 00 00     ................
	...
    5e4e:	00 00 1d 00 00 1d 00 00 00 00 00 00 00 00 00 1d     ................
	...
    5e72:	00 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     .^^^^^^^^^^^^^^^
    5e82:	5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e 5e     ^^^^^^^^^^^^^^^^
    5e92:	5e 5e 5e 5e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ^^^^............
    5ea2:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    5eb2:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    5ec2:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 5f 5f 5f 5f 5f     ..........._____
    5ed2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5ee2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 60 61 62 5f 5f     ___________`ab__
    5ef2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f02:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f12:	5f 5f 5f 5f 5f 60 61 62 5f 5f 5f 5f 5f 5f 5f 5f     _____`ab________
    5f22:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f32:	60 61 62 5f 5f 5f 5f 5f 5f 5f 5f 5f 60 61 62 5f     `ab_________`ab_
    5f42:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f52:	5f 5f 5f 63 5c 5c 5c 64 5f 5f 5f 5f 5f 5f 5f 5f     ___c\\\d________
    5f62:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 60     _______________`
    5f72:	61 62 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ab______________
    5f82:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5f92:	5f 5f 5f 5f 5f 5f 63 5c 5c 5c 64 5f 5f 5f 5f 5f     ______c\\\d_____
    5fa2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    5fb2:	5f 63 5c 5c 5c 64 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     _c\\\d__________
    5fc2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 60 61 62 5f 5f     ___________`ab__
    5fd2:	5f 5f 5f 5f 5f 5f 60 61 62 5f 5f 5f 5f 5f 5f 5f     ______`ab_______
    5fe2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 63     _______________c
    5ff2:	5c 5c 5c 64 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     \\\d____________
    6002:	5f 5f 5f 5f 5f 5f 5f 5f 5f 63 5c 5c 5c 64 5f 5f     _________c\\\d__
    6012:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 63 5c 5c 5c 64 5f     __________c\\\d_
    6022:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6032:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 63 5c     ______________c\
    6042:	5c 5c 64 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     \\d_____________
    6052:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6062:	5f 5f 5f 0d 0d 0d 0d 0d 0d 5f 5f 5f 5f 5f 5f 5f     ___......_______
    6072:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6082:	5f 5f 5f 0c 5f 5f 5f 5f 5f 5f 5f 0c 5f 5f 5f 5f     ___._______.____
    6092:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    60a2:	0c 0c 0e 0e 0e 0e 0e 0e 0e 0c 0c 5f 5f 5f 5f 5f     ..........._____
    60b2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0c 0c 0c     _____________...
    60c2:	0c 0e 0e 0e 0e 0e 0c 0c 0c 0c 5f 5f 5f 5f 5f 5f     ..........______
    60d2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    60e2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    60f2:	5f 5f 5f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ___.............
    6102:	0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..______________
    6112:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6122:	5f 5f 5f 5f 5f 5f 5f 5f 5f 0c 0c 0c 0c 0c 0c 0c     _________.......
    6132:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f 5f     ..........______
    6142:	5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d 0d 0d 5f 5f 5f     _______......___
    6152:	5f 5f 5f 5f 0d 0d 0d 0d 0d 0d 5f 5f 5f 5f 5f 0c     ____......_____.
    6162:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6172:	0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..______________
    6182:	5f 5f 5f 5f 5f 0d 0d 0d 0d 0d 0d 5f 5f 5f 5f 5f     _____......_____
    6192:	5f 5f 5f 5f 5f 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     _____...........
    61a2:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 5f 5f 5f 5f 5f 5f     ..........______
    61b2:	0c 0c 0e 0e 0e 0e 0e 0e 0e 0c 0c 5f 5f 5f 5f 5f     ..........._____
    61c2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0c 0c 0c 0c     ___________.....
    61d2:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    61e2:	0c 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..______________
    61f2:	5f 5f 5f 5f 5f 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f 0c     _____._________.
    6202:	0c 0c 0c 0e 0e 0e 0e 0e 0c 0c 0c 0c 5f 5f 5f 5f     ............____
    6212:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 0d 0c 0c 0c 0c 0c     __________......
    6222:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6232:	0c 0c 0d 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ..._____________
    6242:	0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f 5f 5f 0c 0c     ......._______..
    6252:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 5f     .............___
    6262:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6272:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    6282:	5f 5f 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     __..............
    6292:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 5f 5f 5f     .............___
    62a2:	5f 5f 5f 5f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ____............
    62b2:	0c 5f 5f 5f 5f 5f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ._____..........
    62c2:	0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f 5f 5f 5f 5f     ......._________
    62d2:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f     ________________
    62e2:	5f 5f 5f 5f 5f 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     _____...........
    62f2:	0d 0d 0d 0d 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d     ......________..
    6302:	5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 5f 5f 5f 5f 5f 5f     ________..______
    6312:	5f 5f 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d     __..________....
    6322:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6332:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 5f 5f 5f 5f     ............____
    6342:	5f 5f 5f 5f 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 0d 0c     ____..________..
    6352:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6362:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 5f 5f 5f 5f 5f 5f     ..........______
    6372:	5f 5f 0d 0d 5f 5f 5f 5f 5f 5f 5f 5f 0d 0d 0d 0d     __..________....
    6382:	0d 0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6392:	0c 0c 0c 0c 0c 0c 0c 0d 0d 0d 0d 0d 0c 0c 0c 0c     ................
    63a2:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d     ................
    63b2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    63c2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0c 0c 0c 0c 0c     ................
    63d2:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0e 0e 0e 0e     ................
    63e2:	0e 0e 0e 0e 0c 0c 0e 0e 0e 0e 0e 0e 0e 0e 0c 0c     ................
    63f2:	0e 0e 0e 0e 0e 0e 0e 0e 0c 0c 0e 0e 0e 0e 0e 0e     ................
    6402:	0e 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6412:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6422:	0c 0c 0e 0e 0e 0e 0e 0e 0e 0e 0c 0c 0e 0e 0e 0e     ................
    6432:	0e 0e 0e 0e 0c 0c 0c 0e 0e 0e 0e 0e 0e 0e 0e 0c     ................
    6442:	0c 0e 0e 0e 0e 0e 0e 0e 0e 0c 0c 0c 0c 65 65 65     .............eee
    6452:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    6462:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    6472:	66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66     ffffffffffffffff
    6482:	66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66     ffffffffffffffff
    6492:	66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66     ffffffffffffffff
    64a2:	66 66 66 66 66 66 66 67 67 67 67 67 67 67 67 67     fffffffggggggggg
    64b2:	67 67 67 67 67 67 67 67 68 69 6a 67 67 67 67 67     gggggggghijggggg
    64c2:	67 67 67 67 67 67 67 67 67 67 67 67 67 68 69 6a     ggggggggggggghij
    64d2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    64e2:	67 67 67 67 67 67 67 67 67 68 69 6a 67 67 67 67     ggggggggghijgggg
    64f2:	67 67 67 67 67 67 67 67 67 67 67 67 68 69 6a 67     gggggggggggghijg
    6502:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6512:	67 67 67 67 68 69 6a 67 67 67 67 67 67 67 67 67     gggghijggggggggg
    6522:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6532:	67 68 69 6a 67 67 67 67 67 67 67 67 67 67 67 67     ghijgggggggggggg
    6542:	67 68 69 6a 67 67 67 67 67 67 67 67 67 67 67 67     ghijgggggggggggg
    6552:	67 67 67 67 68 69 6a 67 67 67 67 67 67 67 67 67     gggghijggggggggg
    6562:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6572:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6582:	67 67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67     ggggggkggggggggg
    6592:	67 67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67     gggggggggggkgggg
    65a2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    65b2:	67 67 67 67 67 67 67 6b 67 67 67 67 67 67 67 67     gggggggkgggggggg
    65c2:	67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67 67     ggggggggggkggggg
    65d2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    65e2:	67 67 6b 67 67 67 67 67 67 67 67 67 67 67 67 67     ggkggggggggggggg
    65f2:	67 67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67     ggggggkggggggggg
    6602:	67 67 67 67 67 67 67 67 67 6b 67 67 67 67 67 67     gggggggggkgggggg
    6612:	67 67 67 67 67 67 67 67 67 67 67 12 12 12 12 12     ggggggggggg.....
    6622:	12 6b 67 67 67 67 67 67 67 67 67 67 67 67 67 67     .kgggggggggggggg
    6632:	12 12 12 12 12 12 6b 67 67 67 67 67 67 67 67 67     ......kggggggggg
    6642:	67 67 67 67 67 67 67 67 67 67 67 67 12 12 12 12     gggggggggggg....
    6652:	12 12 6b 67 67 67 67 67 67 67 67 67 67 67 67 12     ..kgggggggggggg.
    6662:	12 12 12 12 12 6b 67 67 67 67 67 67 67 67 67 67     .....kgggggggggg
    6672:	67 67 67 67 67 67 67 12 12 12 12 12 12 6b 67 67     ggggggg......kgg
    6682:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6692:	67 67 67 67 12 12 12 12 12 12 6b 67 67 67 67 67     gggg......kggggg
    66a2:	67 67 67 67 12 12 12 12 12 12 6b 67 67 67 67 67     gggg......kggggg
    66b2:	67 67 67 67 67 67 67 12 12 12 12 12 12 6b 67 67     ggggggg......kgg
    66c2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    66d2:	67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67 67     gggggkgggggggggg
    66e2:	67 67 67 67 67 67 11 67 67 67 6b 67 67 67 67 67     gggggg.gggkggggg
    66f2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6702:	67 67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67     ggggggkggggggggg
    6712:	67 67 67 67 67 67 67 67 67 6b 67 67 67 67 67 67     gggggggggkgggggg
    6722:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6732:	67 6b 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gkgggggggggggggg
    6742:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 6b 67     ggggggggggggggkg
    6752:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 6b 67     ggggggggggggggkg
    6762:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6772:	67 6b 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gkgggggggggggggg
    6782:	67 67 67 67 67 67 67 67 67 6b 67 67 67 67 67 67     gggggggggkgggggg
    6792:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 6b 67     ggggggggggggggkg
    67a2:	67 67 6b 67 67 67 67 67 67 67 67 67 67 67 67 67     ggkggggggggggggg
    67b2:	67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67 67     ggggggggggkggggg
    67c2:	67 67 67 67 67 67 67 67 67 67 67 67 67 6b 67 67     gggggggggggggkgg
    67d2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    67e2:	67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67 67     gggggkgggggggggg
    67f2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6802:	67 67 6b 67 67 67 67 67 67 67 67 6b 67 67 67 67     ggkggggggggkgggg
    6812:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6822:	67 67 67 6b 67 67 67 67 67 67 67 67 67 67 67 67     gggkgggggggggggg
    6832:	67 67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67     ggggggkggggggggg
    6842:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 6b 67     ggggggggggggggkg
    6852:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6862:	67 67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67     gggggggggggkgggg
    6872:	67 67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67     gggggggggggkgggg
    6882:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 6b 67     ggggggggggggggkg
    6892:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    68a2:	67 67 67 67 67 67 67 67 67 67 67 6b 12 12 12 12     gggggggggggk....
    68b2:	12 12 67 67 67 67 67 67 67 67 67 67 67 67 67 67     ..gggggggggggggg
    68c2:	6b 12 12 12 12 12 12 67 67 67 67 67 67 67 67 67     k......ggggggggg
    68d2:	67 67 67 67 67 67 67 67 67 67 67 67 6b 12 12 12     ggggggggggggk...
    68e2:	12 12 12 67 67 67 67 67 67 67 67 67 67 67 67 6b     ...ggggggggggggk
    68f2:	12 12 12 12 12 12 67 67 67 67 67 67 67 67 67 67     ......gggggggggg
    6902:	67 67 67 67 67 67 67 6b 12 12 12 12 12 12 67 67     gggggggk......gg
    6912:	67 67 67 67 67 67 67 67 67 67 67 6b 12 12 12 12     gggggggggggk....
    6922:	12 12 67 67 67 67 67 67 67 67 67 67 67 67 6b 12     ..ggggggggggggk.
    6932:	12 12 12 12 12 67 67 67 67 67 67 67 67 67 67 67     .....ggggggggggg
    6942:	67 67 67 67 67 67 67 67 11 67 67 67 67 67 67 67     gggggggg.ggggggg
    6952:	67 67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67     gggggggggggkgggg
    6962:	67 67 67 12 12 12 12 12 12 6b 67 67 67 67 67 67     ggg......kgggggg
    6972:	67 67 67 67 67 67 67 67 12 12 12 12 12 12 6b 67     gggggggg......kg
    6982:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6992:	67 67 67 67 67 12 12 12 12 12 12 6b 67 67 67 67     ggggg......kgggg
    69a2:	67 67 67 67 67 67 67 67 67 67 67 67 67 12 12 12     ggggggggggggg...
    69b2:	12 12 12 6b 67 67 67 67 67 67 67 67 67 67 67 67     ...kgggggggggggg
    69c2:	12 12 12 12 12 12 6b 67 67 67 67 67 67 67 67 67     ......kggggggggg
    69d2:	67 67 67 67 67 67 67 67 12 12 12 12 12 12 6b 67     gggggggg......kg
    69e2:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    69f2:	67 67 67 67 67 12 12 12 12 12 12 6b 67 67 67 67     ggggg......kgggg
    6a02:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 12 12     gggggggggggggg..
    6a12:	12 12 12 12 6b 67 67 67 67 67 67 67 67 67 12 12     ....kggggggggg..
    6a22:	12 12 12 12 6b 67 67 67 67 67 67 67 67 67 67 67     ....kggggggggggg
    6a32:	67 67 67 67 67 67 67 67 67 67 67 6b 67 67 67 67     gggggggggggkgggg
    6a42:	67 67 67 67 67 67 67 67 67 67 67 67 67 67 67 67     gggggggggggggggg
    6a52:	67 67 67 6b 67 67 67 67 67 67 67 67 67 67 67 67     gggkgggggggggggg
    6a62:	67 67 67 67 67 67 6b 67 67 67 67 67 67 67 67 67     ggggggkggggggggg
    6a72:	67 67 67 67 67 67 67 67 67 6b 67 67 67 67 67 67     gggggggggkgggggg
    6a82:	67 67 67 67 67 67 67 67 67 67 67 67 6b 67 67 67     ggggggggggggkggg
    6a92:	67 67 67 67 67 67 67 67 67 67 67 67 10 10 10 10     gggggggggggg....
    6aa2:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    6ab2:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    6ac2:	10 10 10 10 10 10 10 10 10 10 10 10 67 67 67 67     ............gggg
    6ad2:	67 67 67 67 10 10 67 67 67 67 67 67 67 67 10 10     gggg..gggggggg..
    6ae2:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    6af2:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    6b02:	10 10 10 10 10 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6b12:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6b22:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6b32:	0f 0f 0f 0f 0f 04 04 04 04 04 04 04 04 0f 0f 04     ................
    6b42:	04 04 04 04 04 04 04 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6b52:	0f 0f 0f 0f 0f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     .....lllllllllll
    6b62:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6b72:	6c 6c 6c 6c 6c 6c 6c 6d 6c 6c 6c 6c 6c 6c 6c 6c     lllllllmllllllll
    6b82:	6c 6c 6c 6c 6c 6d 6c 6c 6d 6c 6c 6c 6c 6c 6c 6c     lllllmllmlllllll
    6b92:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6ba2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6bb2:	6c 6c 6c 6c 6c 6c 6d 6c 6c 6c 6c 6e 6c 6c 6c 6c     llllllmllllnllll
    6bc2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6bd2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6be2:	6c 6c 6e 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llnlllllllllllll
    6bf2:	6c 6c 6c 6c 6e 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 6c     llllnlllllllllnl
    6c02:	6c 6c 6c 6c 6c 6c 6c 6c 6e 6c 6c 6c 6c 6c 6c 6c     llllllllnlllllll
    6c12:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6c22:	6c 6c 6c 6c 6c 6c 6c 6e 6c 6c 6c 6c 6c 6c 6c 6c     lllllllnllllllll
    6c32:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6c42:	6c 6e 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lnllllllllllllll
    6c52:	6c 6c 6c 6c 6c 6e 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllln.lllllllll
    6c62:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6c72:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 06 6c 6c     lllllllllllln.ll
    6c82:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 06     lllllllllllllln.
    6c92:	6c 6c 6c 6c 6c 6c 6c 6c 6e 06 6c 6c 6c 6c 6c 6c     lllllllln.llllll
    6ca2:	6c 6c 6e 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lln.llllllllllll
    6cb2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6cc2:	6c 6e 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ln.lllllllllllll
    6cd2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 06 6c 6c 6c     llllllllllln.lll
    6ce2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e     llllllllllllllln
    6cf2:	06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ..llllllllllllll
    6d02:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6d12:	6c 6c 6c 6c 6c 6c 6e 06 06 6c 6c 6c 6c 6c 6c 6c     lllllln..lllllll
    6d22:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6d32:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6d42:	6c 6e 06 06 6c 6c 6c 6c 6c 6c 6c 6e 06 06 6c 6c     ln..llllllln..ll
    6d52:	6c 6c 6c 6c 6c 6e 06 06 6c 6c 6c 6c 6c 6c 6c 6c     llllln..llllllll
    6d62:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6d72:	6c 6c 6c 6c 6e 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     lllln..lllllllll
    6d82:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 06     lllllllllllllln.
    6d92:	06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     .lllllllllllllll
    6da2:	6c 6c 6e 06 14 14 14 14 14 14 14 14 14 6c 6c 6c     lln..........lll
    6db2:	6e 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     n...llllllllllll
    6dc2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6dd2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 06 06 06 6c     llllllllllln...l
    6de2:	6c 6c 6c 6c 6c 6e 06 06 06 6c 6c 6c 6c 6c 6c 6e     llllln...lllllln
    6df2:	06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ...lllllllllllll
    6e02:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6e 06     lllllllllllllln.
    6e12:	06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ..llllllllllllll
    6e22:	6c 6c 6c 6c 6c 6c 6c 6c 6e 06 6c 6c 6c 6c 6c 6c     lllllllln.llllll
    6e32:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f     lllllllllllllooo
    6e42:	6f 6c 6c 70 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ollpllllllllllll
    6e52:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c     lllllllllllooool
    6e62:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6e72:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f     lllllllllllllooo
    6e82:	6f 6c 6c 70 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6f     ollploooollllllo
    6e92:	6f 6f 6f 6c 6c 70 6c 6c 6c 6f 6f 6f 6f 6c 6c 70     ooollpllloooollp
    6ea2:	6c 6c 6c 6f 6f 6f 6f 6c 6c 70 6c 6f 6f 6f 6f 6c     llloooollplooool
    6eb2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6ec2:	6c 6c 6f 6f 6f 6f 6c 6c 70 6c 6f 6f 6f 6f 6c 6c     lloooollplooooll
    6ed2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     lllllllllllloooo
    6ee2:	6c 6c 70 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c     llploooollllllll
    6ef2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6f02:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c 70     lllllllllloooolp
    6f12:	71 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     qlllllllllllllll
    6f22:	6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c 6c 6c 6c     lllllllloooollll
    6f32:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6f42:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c 70     lllllllllloooolp
    6f52:	71 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     qloooolllllloooo
    6f62:	6c 70 71 6c 6c 6c 6f 6f 6f 6f 6c 70 71 6c 6c 6c     lpqllloooolpqlll
    6f72:	6f 6f 6f 6f 6c 70 71 6c 6f 6f 6f 6f 6c 6c 6c 6c     oooolpqloooollll
    6f82:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f     lllllllllllllllo
    6f92:	6f 6f 6f 6c 70 71 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c     ooolpqloooolllll
    6fa2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c 70 71     llllllllloooolpq
    6fb2:	6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f     loooollllllllloo
    6fc2:	6f 6f 70 71 71 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     oopqqlllllllllll
    6fd2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     lllllllllllloooo
    6fe2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6ff2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f     lllllllllllllloo
    7002:	6f 6f 70 71 71 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c     oopqqloooollllll
    7012:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    7022:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 70 71 71     llllllllloooopqq
    7032:	6c 6c 6c 6f 6f 6f 6f 70 71 71 6c 6c 6c 6f 6f 6f     llloooopqqlllooo
    7042:	6f 70 71 71 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c     opqqloooolllllll
    7052:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     lllllllllllloooo
    7062:	70 71 71 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c     pqqloooollllllll
    7072:	6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 70 71 71 6c 6f 6f     lllllloooopqqloo
    7082:	6f 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 72     oollllllllloooor
    7092:	72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rrllllllllllllll
    70a2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 6c 6c 6c     llllllllloooolll
    70b2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 72 72 72 6c 6c     lllllllllllrrrll
    70c2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 72     llllllllllloooor
    70d2:	72 72 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c     rrloooorrrllllll
    70e2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    70f2:	6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c     lllllloooorrrlll
    7102:	6f 6f 6f 6f 72 72 72 6c 6c 6c 6f 6f 6f 6f 72 72     oooorrrllloooorr
    7112:	72 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c     rloooorrrlllllll
    7122:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 72 72 72     llllllllloooorrr
    7132:	6c 6f 6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c 6c     loooorrrllllllll
    7142:	6c 6c 6c 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72     llloooorrrloooor
    7152:	72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rrllllllllllllll
    7162:	6c 6c 6c 6c 6c 6c 6c 14 14 14 14 14 14 14 14 14     lllllll.........
    7172:	6c 6f 6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c 14     loooorrrlllllll.
    7182:	14 14 14 14 14 14 14 14 6c 6c 6c 6c 6c 6c 6c 6f     ........lllllllo
    7192:	6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ooolllllllllllll
    71a2:	6c 72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lrrrllllllllllll
    71b2:	6c 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72 72     loooorrrloooorrr
    71c2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    71d2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     lllllllllllloooo
    71e2:	72 72 72 6c 6c 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c     rrrllloooorrrlll
    71f2:	6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72 72 6c     oooorrrloooorrrl
    7202:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f     lllllllllllllllo
    7212:	6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72 72 6c 6c     ooorrrloooorrrll
    7222:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6c 6c 6c 6c 6c     llllllllloolllll
    7232:	6c 6c 6c 6c 6c 6c 6c 6c 6c 15 6c 6c 6c 6c 6f 6f     lllllllll.lllloo
    7242:	6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 73 6c     oorrrlllllllllsl
    7252:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f     lllllllllllloooo
    7262:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 72 72     llllllllllllllrr
    7272:	72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f     rllllllllllllloo
    7282:	6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c     oorrrloooorrrlll
    7292:	6f 6f 6f 6f 72 72 72 6c 6c 6c 6f 6f 6f 6f 72 72     oooorrrllloooorr
    72a2:	72 6c 6c 6c 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f     rllloooorrrloooo
    72b2:	72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rrrlllllllllllll
    72c2:	6c 6c 6c 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72     llloooorrrloooor
    72d2:	72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rrllllllllllllll
    72e2:	6c 6c 6c 6c 6c 6c 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c     lllllloollllllll
    72f2:	6c 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c     lloooorrrlllllll
    7302:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    7312:	6f 6f 6f 6f 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     oooollllllllllll
    7322:	6c 6c 72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f     llrrrllllllllllo
    7332:	6f 6c 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72     oloooorrrloooorr
    7342:	72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rlllllllllllllll
    7352:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f     lllllllllllllooo
    7362:	6f 72 72 72 6f 6f 6c 6f 6f 6f 6f 72 72 72 6f 6f     orrrooloooorrroo
    7372:	6c 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72 72     loooorrrloooorrr
    7382:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6c     lllllllllllllool
    7392:	6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f 72 72 72 6c     oooorrrloooorrrl
    73a2:	6c 6c 6c 6c 6c 6c 6c 6f 6f 6c 6f 6f 6f 6f 72 72     lllllllooloooorr
    73b2:	72 6c 6f 6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c     rloooorrrlllllll
    73c2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 72 6c     lllllllllllloorl
    73d2:	6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 6f 6f 72 72 72 6c     lllllllloooorrrl
    73e2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 72     lllllllllllllllr
    73f2:	72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 72 6f     rrllllllllllooro
    7402:	6f 6f 6f 72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     ooorrrllllllllll
    7412:	6c 6f 6f 6f 6f 72 72 72 6f 6f 72 6f 6f 6f 6f 72     loooorrrooroooor
    7422:	72 72 6f 6f 72 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f     rrooroooorrrlooo
    7432:	6f 72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     orrrllllllllllll
    7442:	6c 6f 6f 72 6f 6f 6f 6f 72 72 72 6c 6f 6f 6f 6f     looroooorrrloooo
    7452:	72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6f 6f 72 6f 6f     rrrllllllllooroo
    7462:	6f 6f 72 72 72 6c 6f 6f 6f 6f 6c 6c 6c 6c 6c 6c     oorrrloooollllll
    7472:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    7482:	06 06 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 06 06     ..rlllllllll....
    7492:	72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rrrlllllllllllll
    74a2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 06 06 6c 6c     llllllllll....ll
    74b2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 72 72 72 6c     llllllllllllrrrl
    74c2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 72 06 06 06 06     lllllllll..r....
    74d2:	72 72 72 6c 06 06 06 06 72 72 72 6c 6c 6c 6c 6c     rrrl....rrrlllll
    74e2:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    74f2:	6c 6c 6c 6c 6c 6c 6c 06 06 06 06 72 72 72 06 06     lllllll....rrr..
    7502:	72 06 06 06 06 72 72 72 06 06 72 06 06 06 06 72     r....rrr..r....r
    7512:	72 72 6c 06 06 06 06 72 72 72 6c 6c 6c 6c 6c 6c     rrl....rrrllllll
    7522:	6c 6c 6c 6c 6c 6c 6c 06 06 72 06 06 06 06 72 72     lllllll..r....rr
    7532:	72 6c 06 06 06 06 72 72 72 6c 6c 6c 6c 6c 6c 6c     rl....rrrlllllll
    7542:	6c 06 06 72 06 06 06 06 72 72 72 6c 06 06 06 06     l..r....rrrl....
    7552:	72 72 72 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     rrrlllllllllllll
    7562:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    7572:	6c 6c 6c 14 14 14 14 14 14 14 14 14 14 14 14 14     lll.............
    7582:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    7592:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    75a2:	14 14 14 14 14 14 14 14 14 14 13 13 13 13 13 13     ................
    75b2:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    75c2:	13 13 13 13 13 13 13 13 65 65 65 65 65 65 65 65     ........eeeeeeee
    75d2:	65 65 74 74 74 74 74 74 74 74 74 74 74 74 74 74     eetttttttttttttt
    75e2:	74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74     tttttttttttttttt
    75f2:	74 74 74 74 74 74 74 74 74 74 74 74 74 74 74 74     tttttttttttttttt
    7602:	74 74 74 74 74 74 74 74 74 75 75 75 75 75 75 75     tttttttttuuuuuuu
    7612:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    7622:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    7632:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    7642:	75 75 75 75 76 77 78 79 7a 7b 7c 7d 7e 75 75 75     uuuuvwxyz{|}~uuu
    7652:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    7662:	75 75 7f 80 81 82 83 84 85 86 87 75 75 75 75 75     uu.........uuuuu
    7672:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    7682:	75 75 75 88 89 8a 8b 75 75 75 75 75 75 75 75 75     uuu....uuuuuuuuu
    7692:	75 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75     uuuuuuuuuuuuuuuu
    76a2:	75 75 8c 75 75 75 75 75 75 75 75 75 75 75 75 75     uu.uuuuuuuuuuuuu
    76b2:	75 75 75 75 75 75 75 75 16 16 16 16 16 16 16 16     uuuuuuuu........
    76c2:	16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16     ................
    76d2:	16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16     ................
    76e2:	16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17     ................
    76f2:	17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17     ................
    7702:	17 17 17 17 17 17 17 17 17 17 17 17 17              .............

0000770f <map_level_desert>:
    770f:	ff 19 ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    771f:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    772f:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    773f:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    774f:	ad ad ad ad ad ad ad ad ad 40 59 41 41 41 41 41     .........@YAAAAA
    775f:	41 41 41 72 8b 73 73 73 73 73 73 73 73 73 73 73     AAAr.sssssssssss
    776f:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    777f:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    778f:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    779f:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    77af:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    77bf:	73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73     ssssssssssssssss
    77cf:	73 73 73 a4 bd 73 73 73 73 73 73 73 73 73 d6 73     sss..sssssssss.s
    77df:	73 73 73 73 73 73 73 73 ef 73 73 73 73 73 73 73     ssssssss.sssssss
    77ef:	73 73 08 73 73 73 73 73 73 73 73 73 21 3a 22 22     ss.sssssssss!:""
    77ff:	22 22 22 22 22 22 53 6c 54 54 54 54 54 54 54 54     """"""SlTTTTTTTT
    780f:	54                                                  T

00007810 <map_level_city>:
    7810:	ff 19 cd b5 b5 b5 b5 b5 b5 b5 b5 b5 e6 b5 b5 b5     ................
    7820:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    7830:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 ff b5 b5 b5 b5     ................
    7840:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    7850:	b5 b5 b5 b5 b5 b5 b5 b5 b5 18 b5 b5 b5 b5 b5 b5     ................
    7860:	b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5 b5     ................
    7870:	b5 b5 b5 b5 b5 b5 b5 b5 b5 31 b5 4a b5 63 7c 95     .........1.J.c|.
    7880:	ae b5 b5 c7 b5 e0 b5 f9 12 2b 44 b5 b5 5d b5 76     .........+D..].v
    7890:	8f a8 c1 da f3 b5 b5 0c b5 b5 25 3e 57 70 89 77     ..........%>Wp.w
    78a0:	b5 a2 bb d4 ed b5 06 1f 38 51 b5 6a 83 9c b5 b5     ........8Q.j....
    78b0:	ce e7 00 19 b5 b5 32 4b 64 7d 96 af c8 e1 b5 b5     ......2Kd}......
    78c0:	fa 13 2c 45 5e 77 90 a9 c2 b5 db f4 0d 26 3f 58     ..,E^w.......&?X
    78d0:	71 8a 2d b5 a3 bc d5 ee b5 07 20 39 0e b5 52 6b     q.-....... 9..Rk
    78e0:	84 9d b6 cf e8 01 1a b5 33 4c 33 65 aa 7e 97 b0     ........3L3e.~..
    78f0:	c9 9e e2 fb 14 2d 46 5f 78 91 aa c3 dc f5 dd dd     .....-F_x.......
    7900:	dd dd dd dd dd dd 0e 27 0f 0f 0f 0f 0f 0f 0f 0f     .......'........
    7910:	0f                                                  .

00007911 <map_level_forest>:
    7911:	ff 19 c5 ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    7921:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    7931:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    7941:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    7951:	ad ad ad ad ad ad ad ad ad de f7 df df df df df     ................
    7961:	df df df 10 29 42 11 5b 74 8d 2a a6 bf d8 f1 0a     ....)B.[t.*.....
    7971:	d9 23 3c 55 f2 f2 6e c0 87 a0 6f b9 d2 eb 88 04     .#<U..n...o.....
    7981:	1d c0 36 4f 1e 68 81 9a b3 9b cc e5 c0 fe c0 17     ..6O.h..........
    7991:	30 49 62 4a 82 f2 c0 7b cd 63 94 ad c6 cd df f8     0IbJ...{.c......
    79a1:	c0 d9 f2 d9 0b 24 3d f2 f2 56 c0 11 2a f9 43 5c     .....$=..V..*.C\
    79b1:	75 12 12 8e a7 1e c0 1e 50 69 82 9b 9b b4 cd c0     u.......Pi......
    79c1:	e6 c0 ff 18 31 4a 4a 82 f2 c0 d9 f2 0b 24 3d 56     ....1JJ......$=V
    79d1:	6f 88 88 c0 d9 f2 d9 0b 24 3d f2 f2 56 c0 a1 e0     o.......$=..V...
    79e1:	89 ba d3 b4 e0 e0 ec c0 1e 9b 1e 50 69 82 9b 9b     ...........Pi...
    79f1:	b4 cd c0 e6 c0 ff 18 31 4a 4a 82 f2 05 1e 37 50     .......1JJ....7P
    7a01:	06 06 06 06 06 06 69 82 9b b4 6a 6a 6a 6a 6a 6a     ......i...jjjjjj
    7a11:	6a                                                  j

00007a12 <map_level_fire>:
    7a12:	ff 19 e9 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1     ................
    7a22:	d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1     ................
    7a32:	d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1     ................
    7a42:	d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1 d1     ................
    7a52:	d1 d1 d1 d1 d1 d1 d1 d1 d1 02 1b 03 03 03 03 03     ................
    7a62:	03 03 03 34 4d 66 4e 7f 4e 98 4e 4e 4e 4e b1 ca     ...4MfN.N.NNNN..
    7a72:	e3 fc 4e 15 2e 4e 4e 47 60 4e 79 4e 4e 4e 4e 92     ..N..NNG`NyNNNN.
    7a82:	4e ab 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e     N.NNNNNNNNNNNNNN
    7a92:	4e 4e 4e 4e 4e 4e 4e 4e 4e c4 dd 4e f6 4e 4e 4e     NNNNNNNNN..N.NNN
    7aa2:	4e 4e 4e 4e 4e 4e 0f 4e 4e 4e 4e 4e 4e 4e 4e 4e     NNNNNN.NNNNNNNNN
    7ab2:	28 41 4e 4e 4e 4e 4e 4e 4e 4e 5a 73 4e 4e 4e 4e     (ANNNNNNNNZsNNNN
    7ac2:	4e 4e 4e 4e 8c a5 4e 4e 4e 4e 4e 4e be 4e 4e d7     NNNN..NNNNNN.NN.
    7ad2:	4e 4e 4e 4e 4e 4e 4e f0 4e 09 4e f7 22 4e 4e 4e     NNNNNNN.N.N."NNN
    7ae2:	4e 4e 4e 3b 54 10 6d 4e 4e 4e 4e 4e 4e 86 9f 42     NNN;T.mNNNNNN..B
    7af2:	b8 d1 4e 4e 4e 4e 4e ea 03 74 1c 35 4e 67 80 99     ..NNNNN..t.5Ng..
    7b02:	81 b2 cb e4 fd 16 2f 48 61 7a 62 93 62 ac 62 62     ....../Hazb.b.bb
    7b12:	62                                                  b

00007b13 <map_level_space>:
    7b13:	20 19 fb 14 2d 46 5f 78 91 aa c3 dc f5 0e 27 40      ...-F_x......'@
    7b23:	59 72 8b a4 bd d6 2e ef 08 21 3a 53 6c 85 0f 9e     Yr.......!:Sl...
    7b33:	b7 d0                                               ..

00007b35 <map_level_ice>:
    7b35:	ff 19 18 31 19 19 4a 63 7c 19 95 19 19 19 19 19     ...1..Jc|.......
    7b45:	ae 4b c7 19 19 19 19 e0 f9 19 19 12 2b 19 44 e1     .K..........+.D.
    7b55:	19 19 5d 19 76 8f 4b a8 19 19 19 19 19 c1 19 da     ..].v.K.........
    7b65:	4b f3 0c 25 19 3e 19 19 19 57 4b 64 19 19 19 19     K..%.>...WKd....
    7b75:	19 19 19 96 4b af 19 19 19 70 89 71 71 71 a2 bb     ....K....p.qqq..
    7b85:	d4 71 71 ed 06 ee ee ee 1f 4b 38 ee ee ee ee ee     .qq......K8.....
    7b95:	ee ee 51 6a 83 ee ee ee ee ee ee ee ee ee ee ee     ..Qj............
    7ba5:	ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee     ................
    7bb5:	ee ee ee ee ee ee ee ee ee ee ee ee ee 9c b5 ee     ................
    7bc5:	ee ee ce ee ee ee ee ee e7 ee ee ee 00 19 ee ee     ................
    7bd5:	ee ee 32 ee ee ee 4b 64 ee ee ee 7d 96 af ee c8     ..2...Kd...}....
    7be5:	ee e1 fa ee ee ee 13 2c ee ee 45 5e ee 77 90 a9     .......,..E^.w..
    7bf5:	ee c2 db ee f4 0d 26 3f 58 4b 0e ee 71 ee 8a a3     ......&?XK..q...
    7c05:	bc d5 ee 4b a4 ee 07 ee 20 39 52 6b 84 4b 3a ee     ...K.... 9Rk.K:.
    7c15:	9d ee b6 cf e8 01 ee 1a d0 ee 33 ee 4c 65 4b 7e     ..........3.LeK~
    7c25:	97 b0 4b 66 c9 b1 e2 4b 4b 4b 4b 4b 4b 4b 4b 4b     ..Kf...KKKKKKKKK
    7c35:	4b                                                  K

00007c36 <__ctors_end>:
    7c36:	11 24       	eor	r1, r1
    7c38:	1f be       	out	0x3f, r1	; 63
    7c3a:	cf ef       	ldi	r28, 0xFF	; 255
    7c3c:	d0 e1       	ldi	r29, 0x10	; 16
    7c3e:	de bf       	out	0x3e, r29	; 62
    7c40:	cd bf       	out	0x3d, r28	; 61

00007c42 <__do_copy_data>:
    7c42:	15 e0       	ldi	r17, 0x05	; 5
    7c44:	a0 e0       	ldi	r26, 0x00	; 0
    7c46:	b5 e0       	ldi	r27, 0x05	; 5
    7c48:	e2 ed       	ldi	r30, 0xD2	; 210
    7c4a:	f5 ee       	ldi	r31, 0xE5	; 229
    7c4c:	02 c0       	rjmp	.+4      	; 0x7c52 <__do_copy_data+0x10>
    7c4e:	05 90       	lpm	r0, Z+
    7c50:	0d 92       	st	X+, r0
    7c52:	a0 31       	cpi	r26, 0x10	; 16
    7c54:	b1 07       	cpc	r27, r17
    7c56:	d9 f7       	brne	.-10     	; 0x7c4e <__do_copy_data+0xc>

00007c58 <__do_clear_bss>:
    7c58:	10 e1       	ldi	r17, 0x10	; 16
    7c5a:	a0 e1       	ldi	r26, 0x10	; 16
    7c5c:	b5 e0       	ldi	r27, 0x05	; 5
    7c5e:	01 c0       	rjmp	.+2      	; 0x7c62 <.do_clear_bss_start>

00007c60 <.do_clear_bss_loop>:
    7c60:	1d 92       	st	X+, r1

00007c62 <.do_clear_bss_start>:
    7c62:	af 30       	cpi	r26, 0x0F	; 15
    7c64:	b1 07       	cpc	r27, r17
    7c66:	e1 f7       	brne	.-8      	; 0x7c60 <.do_clear_bss_loop>

00007c68 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7c68:	0e 94 cf 43 	call	0x879e	; 0x879e <wdt_randomize>
#endif

    MCUSR = 0;
    7c6c:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7c6e:	88 e1       	ldi	r24, 0x18	; 24
    7c70:	0f b6       	in	r0, 0x3f	; 63
    7c72:	f8 94       	cli
    7c74:	80 93 60 00 	sts	0x0060, r24
    7c78:	10 92 60 00 	sts	0x0060, r1
    7c7c:	0f be       	out	0x3f, r0	; 63

00007c7e <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7c7e:	0e 94 91 44 	call	0x8922	; 0x8922 <isEepromFormatted>
    7c82:	81 11       	cpse	r24, r1
    7c84:	02 c0       	rjmp	.+4      	; 0x7c8a <Initialize+0xc>
    7c86:	0e 94 6f 44 	call	0x88de	; 0x88de <FormatEeprom>

	cli();
    7c8a:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7c8c:	81 e0       	ldi	r24, 0x01	; 1
    7c8e:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    7c92:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7c96:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7c9a:	10 92 d0 0c 	sts	0x0CD0, r1
    7c9e:	10 92 d6 0c 	sts	0x0CD6, r1
    7ca2:	10 92 dc 0c 	sts	0x0CDC, r1
    7ca6:	10 92 e2 0c 	sts	0x0CE2, r1
    7caa:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7cae:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    7cb2:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7cb6:	92 e1       	ldi	r25, 0x12	; 18
    7cb8:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7cbc:	90 ee       	ldi	r25, 0xE0	; 224
    7cbe:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    7cc2:	94 e1       	ldi	r25, 0x14	; 20
    7cc4:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    7cc8:	10 92 c2 0c 	sts	0x0CC2, r1
    7ccc:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    7cd0:	10 92 c6 0c 	sts	0x0CC6, r1
    7cd4:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    7cd8:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    7cdc:	0e 94 cd 51 	call	0xa39a	; 0xa39a <InitializeVideoMode>
    7ce0:	84 e8       	ldi	r24, 0x84	; 132
    7ce2:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7ce4:	fc 01       	movw	r30, r24
    7ce6:	25 91       	lpm	r18, Z+
    7ce8:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7cea:	f9 01       	movw	r30, r18
    7cec:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7cee:	30 83       	st	Z, r19
    7cf0:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7cf2:	20 e0       	ldi	r18, 0x00	; 0
    7cf4:	82 3b       	cpi	r24, 0xB2	; 178
    7cf6:	92 07       	cpc	r25, r18
    7cf8:	a9 f7       	brne	.-22     	; 0x7ce4 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7cfa:	78 94       	sei
	
	DisplayLogo();
    7cfc:	0e 94 5c 52 	call	0xa4b8	; 0xa4b8 <DisplayLogo>
    7d00:	0e 94 99 70 	call	0xe132	; 0xe132 <main>
    7d04:	0c 94 e7 72 	jmp	0xe5ce	; 0xe5ce <_exit>

00007d08 <__bad_interrupt>:
    7d08:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007d0c <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    7d0c:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7d0e:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    7d12:	ad e8       	ldi	r26, 0x8D	; 141
    7d14:	aa 95       	dec	r26
    7d16:	f1 f7       	brne	.-4      	; 0x7d14 <sub_video_mode3+0x8>
    7d18:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    7d1a:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    7d1e:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    7d20:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    7d22:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    7d24:	02 9f       	mul	r16, r18
		add ZL,r0
    7d26:	e0 0d       	add	r30, r0
		adc ZH,r1
    7d28:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7d2a:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7d2c:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7d2e:	20 91 7e 0d 	lds	r18, 0x0D7E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7d32:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7d34:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    7d36:	30 0f       	add	r19, r16

		cp r18,r16
    7d38:	20 17       	cp	r18, r16
		breq no_ramtiles
    7d3a:	51 f0       	breq	.+20     	; 0x7d50 <no_ramtiles>
		nop
    7d3c:	00 00       	nop
	...

00007d40 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7d40:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7d42:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7d44:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    7d46:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    7d48:	0c 93       	st	X, r16

		inc r16
    7d4a:	03 95       	inc	r16
		cp r16,r18
    7d4c:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7d4e:	c0 f3       	brcs	.-16     	; 0x7d40 <upd_loop>

00007d50 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7d50:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7d52:	1a 95       	dec	r17
		brne .-4
    7d54:	f1 f7       	brne	.-4      	; 0x7d52 <no_ramtiles+0x2>
		rjmp .
    7d56:	00 c0       	rjmp	.+0      	; 0x7d58 <no_ramtiles+0x8>
		dec r19
    7d58:	3a 95       	dec	r19
		brne 1b
    7d5a:	d1 f7       	brne	.-12     	; 0x7d50 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    7d5c:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7d5e:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    7d60:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    7d64:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    7d66:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    7d68:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    7d6a:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    7d6c:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    7d70:	60 2f       	mov	r22, r16
		lsr r16
    7d72:	06 95       	lsr	r16
		lsr r16
    7d74:	06 95       	lsr	r16
		lsr r16 ;/8
    7d76:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    7d78:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    7d7c:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    7d7e:	f1 2e       	mov	r15, r17

        mov r17,r16
    7d80:	10 2f       	mov	r17, r16
        lsr r16
    7d82:	06 95       	lsr	r16
        lsr r16
    7d84:	06 95       	lsr	r16
        lsr r16 ;/8
    7d86:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    7d88:	d0 0f       	add	r29, r16
		andi r17,0x7
    7d8a:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    7d8c:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    7d8e:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    7d90:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    7d94:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    7d98:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    7d9c:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    7da0:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    7da2:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    7da4:	5e 01       	movw	r10, r28
		mov r23,r22
    7da6:	76 2f       	mov	r23, r22
		mov r24,r15
    7da8:	8f 2d       	mov	r24, r15
		mov r9,r25
    7daa:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    7dac:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    7db0:	20 2f       	mov	r18, r16
		lsr r16
    7db2:	06 95       	lsr	r16
		lsr r16
    7db4:	06 95       	lsr	r16
		lsr r16			;hi8
    7db6:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    7db8:	03 95       	inc	r16
		andi r18,7		;lo8
    7dba:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    7dbc:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    7dc0:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    7dc2:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    7dc4:	01 fe       	sbrs	r0, 1
		clr r22
    7dc6:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    7dc8:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    7dca:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    7dcc:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    7dce:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    7dd0:	01 fe       	sbrs	r0, 1
		ser r24
    7dd2:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    7dd4:	01 fe       	sbrs	r0, 1
		clr r9
    7dd6:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    7dd8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    7dda:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    7ddc:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    7dde:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    7de0:	80 90 be 0c 	lds	r8, 0x0CBE

00007de4 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    7de4:	bc d3       	rcall	.+1912   	; 0x855e <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    7de6:	24 e0       	ldi	r18, 0x04	; 4
    7de8:	2a 95       	dec	r18
    7dea:	f1 f7       	brne	.-4      	; 0x7de8 <next_tile_line+0x4>
    7dec:	00 00       	nop
				
		call render_tile_line
    7dee:	0e 94 38 3f 	call	0x7e70	; 0x7e70 <render_tile_line>

		WAIT r18,58
    7df2:	23 e1       	ldi	r18, 0x13	; 19
    7df4:	2a 95       	dec	r18
    7df6:	f1 f7       	brne	.-4      	; 0x7df4 <next_tile_line+0x10>
    7df8:	00 00       	nop

		inc r22
    7dfa:	63 95       	inc	r22
		dec r8
    7dfc:	8a 94       	dec	r8
		breq text_frame_end
    7dfe:	09 f1       	breq	.+66     	; 0x7e42 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    7e00:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    7e02:	29 f0       	breq	.+10     	; 0x7e0e <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    7e04:	08 e0       	ldi	r16, 0x08	; 8
    7e06:	0a 95       	dec	r16
    7e08:	f1 f7       	brne	.-4      	; 0x7e06 <next_tile_line+0x22>
    7e0a:	00 00       	nop
		rjmp next_tile_line
    7e0c:	eb cf       	rjmp	.-42     	; 0x7de4 <next_tile_line>

00007e0e <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    7e0e:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    7e10:	0c 2f       	mov	r16, r28
		andi r16,0x7
    7e12:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    7e14:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    7e16:	11 f0       	breq	.+4      	; 0x7e1c <next_tile_row+0xe>
		inc YL
    7e18:	c3 95       	inc	r28
		rjmp 2f
    7e1a:	02 c0       	rjmp	.+4      	; 0x7e20 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    7e1c:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    7e1e:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    7e20:	8a 95       	dec	r24
		brne .+2
    7e22:	09 f4       	brne	.+2      	; 0x7e26 <next_tile_row+0x18>
		movw YL,r12
    7e24:	e6 01       	movw	r28, r12

		dec r19
    7e26:	3a 95       	dec	r19
		brne .+2
    7e28:	09 f4       	brne	.+2      	; 0x7e2c <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    7e2a:	67 2f       	mov	r22, r23
		brne .+2
    7e2c:	09 f4       	brne	.+2      	; 0x7e30 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7e2e:	e5 01       	movw	r28, r10
		brne .+2
    7e30:	09 f4       	brne	.+2      	; 0x7e34 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    7e32:	8f 2d       	mov	r24, r15
		brne .+2
    7e34:	09 f4       	brne	.+2      	; 0x7e38 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    7e36:	99 2e       	mov	r9, r25

		brne .+2
    7e38:	09 f4       	brne	.+2      	; 0x7e3c <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7e3a:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    7e3c:	09 f4       	brne	.+2      	; 0x7e40 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7e3e:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7e40:	d1 cf       	rjmp	.-94     	; 0x7de4 <next_tile_line>

00007e42 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    7e42:	29 e0       	ldi	r18, 0x09	; 9
    7e44:	2a 95       	dec	r18
    7e46:	f1 f7       	brne	.-4      	; 0x7e44 <text_frame_end+0x2>
    7e48:	00 00       	nop

		rcall hsync_pulse ;145
    7e4a:	89 d3       	rcall	.+1810   	; 0x855e <hsync_pulse>
	
		clr r1
    7e4c:	11 24       	eor	r1, r1
		call RestoreBackground
    7e4e:	0e 94 80 50 	call	0xa100	; 0xa100 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7e52:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    7e56:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7e58:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7e5a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7e5c:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    7e60:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    7e62:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7e64:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7e68:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7e6a:	e0 93 36 00 	sts	0x0036, r30

		ret
    7e6e:	08 95       	ret

00007e70 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    7e70:	cf 93       	push	r28
		push YH
    7e72:	df 93       	push	r29
		push r23
    7e74:	7f 93       	push	r23
		push r22
    7e76:	6f 93       	push	r22
		push r19
    7e78:	3f 93       	push	r19
		push r13
    7e7a:	df 92       	push	r13
		push r12
    7e7c:	cf 92       	push	r12
		push r9
    7e7e:	9f 92       	push	r9
		push r7
    7e80:	7f 92       	push	r7
		push r6
    7e82:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    7e84:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    7e86:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    7e88:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    7e8a:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7e8c:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7e8e:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    7e90:	00 0d       	add	r16, r0
		adc r17,r1
    7e92:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    7e94:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7e96:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    7e98:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    7e9a:	00 0d       	add	r16, r0
		adc r17,r1
    7e9c:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    7e9e:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7ea0:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    7ea2:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    7ea4:	69 2d       	mov	r22, r9
		andi r22,0x7		
    7ea6:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    7ea8:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    7eaa:	f8 94       	cli
		breq .+2
    7eac:	09 f0       	breq	.+2      	; 0x7eb0 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    7eae:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    7eb0:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    7eb2:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    7eb4:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    7eb6:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    7eb8:	02 0c       	add	r0, r2
	    adc r1,r3
    7eba:	13 1c       	adc	r1, r3
		movw ZL,r0
    7ebc:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    7ebe:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    7ec0:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7ec2:	28 81       	ld	r18, Y
		subi YL,-8
    7ec4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7ec6:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    7ec8:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    7eca:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    7ecc:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    7ece:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    7ed0:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    7ed2:	04 0e       	add	r0, r20
	    adc r1,r21
    7ed4:	15 1e       	adc	r1, r21
		movw XL,r0
    7ed6:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7ed8:	28 81       	ld	r18, Y
		subi YL,-8
    7eda:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7edc:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    7ede:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    7ee0:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    7ee2:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7ee4:	a1 01       	movw	r20, r2
		brtc .+2
    7ee6:	0e f4       	brtc	.+2      	; 0x7eea <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    7ee8:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    7eea:	04 0e       	add	r0, r20
	    adc r1,r21
    7eec:	15 1e       	adc	r1, r21
		movw ZL,r0
    7eee:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    7ef0:	3f 01       	movw	r6, r30

00007ef2 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    7ef2:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    7ef4:	a6 0f       	add	r26, r22
		adc XH,r0
    7ef6:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    7ef8:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    7efa:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    7efc:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    7efe:	22 c0       	rjmp	.+68     	; 0x7f44 <rom_fine_scroll>

00007f00 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    7f00:	00 c0       	rjmp	.+0      	; 0x7f02 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    7f02:	68 e8       	ldi	r22, 0x88	; 136
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    7f04:	7f e3       	ldi	r23, 0x3F	; 63
		add r22,r0
    7f06:	60 0d       	add	r22, r0
		adc r23,r1
    7f08:	71 1d       	adc	r23, r1
		push r22
    7f0a:	6f 93       	push	r22
		push r23	
    7f0c:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    7f0e:	08 95       	ret

00007f10 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    7f10:	0d 91       	ld	r16, X+
    7f12:	c8 95       	lpm
    7f14:	08 b9       	out	0x08, r16	; 8
    7f16:	0d 91       	ld	r16, X+
    7f18:	c8 95       	lpm
    7f1a:	08 b9       	out	0x08, r16	; 8
    7f1c:	0d 91       	ld	r16, X+
    7f1e:	c8 95       	lpm
    7f20:	08 b9       	out	0x08, r16	; 8
    7f22:	0d 91       	ld	r16, X+
    7f24:	c8 95       	lpm
    7f26:	08 b9       	out	0x08, r16	; 8
    7f28:	0d 91       	ld	r16, X+
    7f2a:	c8 95       	lpm
    7f2c:	08 b9       	out	0x08, r16	; 8
    7f2e:	0d 91       	ld	r16, X+
    7f30:	c8 95       	lpm
    7f32:	08 b9       	out	0x08, r16	; 8
    7f34:	0d 91       	ld	r16, X+
    7f36:	c8 95       	lpm
    7f38:	08 b9       	out	0x08, r16	; 8
    7f3a:	0d 91       	ld	r16, X+
    7f3c:	c8 95       	lpm
    7f3e:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7f40:	1e f5       	brtc	.+70     	; 0x7f88 <romloop>
		rjmp ramloop
    7f42:	40 c0       	rjmp	.+128    	; 0x7fc4 <ramloop>

00007f44 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    7f44:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    7f46:	6a ea       	ldi	r22, 0xAA	; 170
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7f48:	7f e3       	ldi	r23, 0x3F	; 63
		add r22,r0
    7f4a:	60 0d       	add	r22, r0
		adc r23,r1
    7f4c:	71 1d       	adc	r23, r1
		push r22
    7f4e:	6f 93       	push	r22
		push r23	
    7f50:	7f 93       	push	r23
		ret
    7f52:	08 95       	ret

00007f54 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    7f54:	05 91       	lpm	r16, Z+
    7f56:	00 c0       	rjmp	.+0      	; 0x7f58 <rom_fine_scroll_loop+0x4>
    7f58:	08 b9       	out	0x08, r16	; 8
    7f5a:	05 91       	lpm	r16, Z+
    7f5c:	00 c0       	rjmp	.+0      	; 0x7f5e <rom_fine_scroll_loop+0xa>
    7f5e:	08 b9       	out	0x08, r16	; 8
    7f60:	05 91       	lpm	r16, Z+
    7f62:	00 c0       	rjmp	.+0      	; 0x7f64 <rom_fine_scroll_loop+0x10>
    7f64:	08 b9       	out	0x08, r16	; 8
    7f66:	05 91       	lpm	r16, Z+
    7f68:	00 c0       	rjmp	.+0      	; 0x7f6a <rom_fine_scroll_loop+0x16>
    7f6a:	08 b9       	out	0x08, r16	; 8
    7f6c:	05 91       	lpm	r16, Z+
    7f6e:	00 c0       	rjmp	.+0      	; 0x7f70 <rom_fine_scroll_loop+0x1c>
    7f70:	08 b9       	out	0x08, r16	; 8
    7f72:	05 91       	lpm	r16, Z+
    7f74:	00 c0       	rjmp	.+0      	; 0x7f76 <rom_fine_scroll_loop+0x22>
    7f76:	08 b9       	out	0x08, r16	; 8
    7f78:	05 91       	lpm	r16, Z+
    7f7a:	00 c0       	rjmp	.+0      	; 0x7f7c <rom_fine_scroll_loop+0x28>
    7f7c:	08 b9       	out	0x08, r16	; 8
    7f7e:	05 91       	lpm	r16, Z+
    7f80:	00 c0       	rjmp	.+0      	; 0x7f82 <rom_fine_scroll_loop+0x2e>
    7f82:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    7f84:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    7f86:	f6 f0       	brts	.+60     	; 0x7fc4 <ramloop>

00007f88 <romloop>:

	
	romloop:
	    lpm r16,Z+
    7f88:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7f8a:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7f8c:	28 81       	ld	r18, Y

	    lpm r16,Z+
    7f8e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7f90:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7f92:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    7f94:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7f96:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    7f98:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7f9a:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    7f9c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7f9e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    7fa0:	08 f4       	brcc	.+2      	; 0x7fa4 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7fa2:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    7fa4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7fa6:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    7fa8:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7faa:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7fac:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7fae:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    7fb0:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    7fb2:	1a 95       	dec	r17
   
	    lpm r16,Z+
    7fb4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7fb6:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7fb8:	05 91       	lpm	r16, Z+

		breq end	
    7fba:	39 f1       	breq	.+78     	; 0x800a <end>
	    movw ZL,r0   	;copy next tile adress
    7fbc:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7fbe:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7fc0:	18 f7       	brcc	.-58     	; 0x7f88 <romloop>
	
		rjmp .
    7fc2:	00 c0       	rjmp	.+0      	; 0x7fc4 <ramloop>

00007fc4 <ramloop>:

	ramloop:

	    ld r16,Z+
    7fc4:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7fc6:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    7fc8:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    7fca:	01 91       	ld	r16, Z+
		subi YL,-8   		
    7fcc:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7fce:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7fd0:	23 9f       	mul	r18, r19

	    ld r16,Z+
    7fd2:	01 91       	ld	r16, Z+
		nop
    7fd4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7fd6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7fd8:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7fda:	00 c0       	rjmp	.+0      	; 0x7fdc <ramloop+0x18>
   
	    ld r16,Z+
    7fdc:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7fde:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7fe0:	08 f0       	brcs	.+2      	; 0x7fe4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7fe2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7fe4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7fe6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7fe8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7fea:	15 1e       	adc	r1, r21
		rjmp .
    7fec:	00 c0       	rjmp	.+0      	; 0x7fee <ramloop+0x2a>
    
		ld r16,Z+		
    7fee:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7ff0:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    7ff2:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    7ff4:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    7ff6:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7ff8:	78 b8       	out	0x08, r7	; 8
		nop
    7ffa:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7ffc:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7ffe:	1a 95       	dec	r17
	    breq end
    8000:	21 f0       	breq	.+8      	; 0x800a <end>
	
		nop
    8002:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8004:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    8006:	00 f6       	brcc	.-128    	; 0x7f88 <romloop>
		rjmp ramloop
    8008:	dd cf       	rjmp	.-70     	; 0x7fc4 <ramloop>

0000800a <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    800a:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    800c:	27 f5       	brid	.+72     	; 0x8056 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    800e:	30 f4       	brcc	.+12     	; 0x801c <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    8010:	f0 01       	movw	r30, r0

00008012 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    8012:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    8014:	08 b9       	out	0x08, r16	; 8
		dec r14
    8016:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    8018:	e1 f7       	brne	.-8      	; 0x8012 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    801a:	1f c0       	rjmp	.+62     	; 0x805a <end_fine_scroll_ram>

0000801c <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    801c:	f6 01       	movw	r30, r12
		nop
    801e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    8020:	98 b8       	out	0x08, r9	; 8
		dec r14
    8022:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    8024:	c9 f0       	breq	.+50     	; 0x8058 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    8026:	05 91       	lpm	r16, Z+
    8028:	08 b9       	out	0x08, r16	; 8
    802a:	ea 94       	dec	r14
    802c:	a9 f0       	breq	.+42     	; 0x8058 <end_fine_scroll_rom>
    802e:	05 91       	lpm	r16, Z+
    8030:	08 b9       	out	0x08, r16	; 8
    8032:	ea 94       	dec	r14
    8034:	89 f0       	breq	.+34     	; 0x8058 <end_fine_scroll_rom>
    8036:	05 91       	lpm	r16, Z+
    8038:	08 b9       	out	0x08, r16	; 8
    803a:	ea 94       	dec	r14
    803c:	69 f0       	breq	.+26     	; 0x8058 <end_fine_scroll_rom>
    803e:	05 91       	lpm	r16, Z+
    8040:	08 b9       	out	0x08, r16	; 8
    8042:	ea 94       	dec	r14
    8044:	49 f0       	breq	.+18     	; 0x8058 <end_fine_scroll_rom>
    8046:	05 91       	lpm	r16, Z+
    8048:	08 b9       	out	0x08, r16	; 8
    804a:	ea 94       	dec	r14
    804c:	29 f0       	breq	.+10     	; 0x8058 <end_fine_scroll_rom>
    804e:	05 91       	lpm	r16, Z+
    8050:	08 b9       	out	0x08, r16	; 8
    8052:	ea 94       	dec	r14
    8054:	09 f0       	breq	.+2      	; 0x8058 <end_fine_scroll_rom>

00008056 <end_fine_scroll>:
	...

00008058 <end_fine_scroll_rom>:
	...

0000805a <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    805a:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    805c:	08 b9       	out	0x08, r16	; 8

		pop r6
    805e:	6f 90       	pop	r6
		pop r7
    8060:	7f 90       	pop	r7
		pop r9
    8062:	9f 90       	pop	r9
		pop r12
    8064:	cf 90       	pop	r12
		pop r13
    8066:	df 90       	pop	r13
		pop r19
    8068:	3f 91       	pop	r19
		pop r22
    806a:	6f 91       	pop	r22
		pop r23
    806c:	7f 91       	pop	r23
		pop YH
    806e:	df 91       	pop	r29
		pop YL
    8070:	cf 91       	pop	r28

		ret
    8072:	08 95       	ret

00008074 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8074:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    8076:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    807a:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    807e:	82 9f       	mul	r24, r18
	add ZL,r0
    8080:	e0 0d       	add	r30, r0
	adc ZH,r1
    8082:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8084:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    8086:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    8088:	62 9f       	mul	r22, r18
	add XL,r0
    808a:	a0 0d       	add	r26, r0
	adc XH,r1
    808c:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    808e:	15 90       	lpm	r1, Z+
    8090:	1d 92       	st	X+, r1
    8092:	15 90       	lpm	r1, Z+
    8094:	1d 92       	st	X+, r1
    8096:	15 90       	lpm	r1, Z+
    8098:	1d 92       	st	X+, r1
    809a:	15 90       	lpm	r1, Z+
    809c:	1d 92       	st	X+, r1
    809e:	15 90       	lpm	r1, Z+
    80a0:	1d 92       	st	X+, r1
    80a2:	15 90       	lpm	r1, Z+
    80a4:	1d 92       	st	X+, r1
    80a6:	15 90       	lpm	r1, Z+
    80a8:	1d 92       	st	X+, r1
    80aa:	15 90       	lpm	r1, Z+
    80ac:	1d 92       	st	X+, r1
    80ae:	15 90       	lpm	r1, Z+
    80b0:	1d 92       	st	X+, r1
    80b2:	15 90       	lpm	r1, Z+
    80b4:	1d 92       	st	X+, r1
    80b6:	15 90       	lpm	r1, Z+
    80b8:	1d 92       	st	X+, r1
    80ba:	15 90       	lpm	r1, Z+
    80bc:	1d 92       	st	X+, r1
    80be:	15 90       	lpm	r1, Z+
    80c0:	1d 92       	st	X+, r1
    80c2:	15 90       	lpm	r1, Z+
    80c4:	1d 92       	st	X+, r1
    80c6:	15 90       	lpm	r1, Z+
    80c8:	1d 92       	st	X+, r1
    80ca:	15 90       	lpm	r1, Z+
    80cc:	1d 92       	st	X+, r1
    80ce:	15 90       	lpm	r1, Z+
    80d0:	1d 92       	st	X+, r1
    80d2:	15 90       	lpm	r1, Z+
    80d4:	1d 92       	st	X+, r1
    80d6:	15 90       	lpm	r1, Z+
    80d8:	1d 92       	st	X+, r1
    80da:	15 90       	lpm	r1, Z+
    80dc:	1d 92       	st	X+, r1
    80de:	15 90       	lpm	r1, Z+
    80e0:	1d 92       	st	X+, r1
    80e2:	15 90       	lpm	r1, Z+
    80e4:	1d 92       	st	X+, r1
    80e6:	15 90       	lpm	r1, Z+
    80e8:	1d 92       	st	X+, r1
    80ea:	15 90       	lpm	r1, Z+
    80ec:	1d 92       	st	X+, r1
    80ee:	15 90       	lpm	r1, Z+
    80f0:	1d 92       	st	X+, r1
    80f2:	15 90       	lpm	r1, Z+
    80f4:	1d 92       	st	X+, r1
    80f6:	15 90       	lpm	r1, Z+
    80f8:	1d 92       	st	X+, r1
    80fa:	15 90       	lpm	r1, Z+
    80fc:	1d 92       	st	X+, r1
    80fe:	15 90       	lpm	r1, Z+
    8100:	1d 92       	st	X+, r1
    8102:	15 90       	lpm	r1, Z+
    8104:	1d 92       	st	X+, r1
    8106:	15 90       	lpm	r1, Z+
    8108:	1d 92       	st	X+, r1
    810a:	15 90       	lpm	r1, Z+
    810c:	1d 92       	st	X+, r1
    810e:	15 90       	lpm	r1, Z+
    8110:	1d 92       	st	X+, r1
    8112:	15 90       	lpm	r1, Z+
    8114:	1d 92       	st	X+, r1
    8116:	15 90       	lpm	r1, Z+
    8118:	1d 92       	st	X+, r1
    811a:	15 90       	lpm	r1, Z+
    811c:	1d 92       	st	X+, r1
    811e:	15 90       	lpm	r1, Z+
    8120:	1d 92       	st	X+, r1
    8122:	15 90       	lpm	r1, Z+
    8124:	1d 92       	st	X+, r1
    8126:	15 90       	lpm	r1, Z+
    8128:	1d 92       	st	X+, r1
    812a:	15 90       	lpm	r1, Z+
    812c:	1d 92       	st	X+, r1
    812e:	15 90       	lpm	r1, Z+
    8130:	1d 92       	st	X+, r1
    8132:	15 90       	lpm	r1, Z+
    8134:	1d 92       	st	X+, r1
    8136:	15 90       	lpm	r1, Z+
    8138:	1d 92       	st	X+, r1
    813a:	15 90       	lpm	r1, Z+
    813c:	1d 92       	st	X+, r1
    813e:	15 90       	lpm	r1, Z+
    8140:	1d 92       	st	X+, r1
    8142:	15 90       	lpm	r1, Z+
    8144:	1d 92       	st	X+, r1
    8146:	15 90       	lpm	r1, Z+
    8148:	1d 92       	st	X+, r1
    814a:	15 90       	lpm	r1, Z+
    814c:	1d 92       	st	X+, r1
    814e:	15 90       	lpm	r1, Z+
    8150:	1d 92       	st	X+, r1
    8152:	15 90       	lpm	r1, Z+
    8154:	1d 92       	st	X+, r1
    8156:	15 90       	lpm	r1, Z+
    8158:	1d 92       	st	X+, r1
    815a:	15 90       	lpm	r1, Z+
    815c:	1d 92       	st	X+, r1
    815e:	15 90       	lpm	r1, Z+
    8160:	1d 92       	st	X+, r1
    8162:	15 90       	lpm	r1, Z+
    8164:	1d 92       	st	X+, r1
    8166:	15 90       	lpm	r1, Z+
    8168:	1d 92       	st	X+, r1
    816a:	15 90       	lpm	r1, Z+
    816c:	1d 92       	st	X+, r1
    816e:	15 90       	lpm	r1, Z+
    8170:	1d 92       	st	X+, r1
    8172:	15 90       	lpm	r1, Z+
    8174:	1d 92       	st	X+, r1
    8176:	15 90       	lpm	r1, Z+
    8178:	1d 92       	st	X+, r1
    817a:	15 90       	lpm	r1, Z+
    817c:	1d 92       	st	X+, r1
    817e:	15 90       	lpm	r1, Z+
    8180:	1d 92       	st	X+, r1
    8182:	15 90       	lpm	r1, Z+
    8184:	1d 92       	st	X+, r1
    8186:	15 90       	lpm	r1, Z+
    8188:	1d 92       	st	X+, r1
    818a:	15 90       	lpm	r1, Z+
    818c:	1d 92       	st	X+, r1
	clr r1
    818e:	11 24       	eor	r1, r1
	ret
    8190:	08 95       	ret

00008192 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8192:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    8194:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    8196:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    8198:	82 9f       	mul	r24, r18
	add ZL,r0
    819a:	e0 0d       	add	r30, r0
	adc ZH,r1
    819c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    819e:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    81a0:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    81a2:	62 9f       	mul	r22, r18
	add XL,r0
    81a4:	a0 0d       	add	r26, r0
	adc XH,r1
    81a6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    81a8:	11 90       	ld	r1, Z+
    81aa:	1d 92       	st	X+, r1
    81ac:	11 90       	ld	r1, Z+
    81ae:	1d 92       	st	X+, r1
    81b0:	11 90       	ld	r1, Z+
    81b2:	1d 92       	st	X+, r1
    81b4:	11 90       	ld	r1, Z+
    81b6:	1d 92       	st	X+, r1
    81b8:	11 90       	ld	r1, Z+
    81ba:	1d 92       	st	X+, r1
    81bc:	11 90       	ld	r1, Z+
    81be:	1d 92       	st	X+, r1
    81c0:	11 90       	ld	r1, Z+
    81c2:	1d 92       	st	X+, r1
    81c4:	11 90       	ld	r1, Z+
    81c6:	1d 92       	st	X+, r1
    81c8:	11 90       	ld	r1, Z+
    81ca:	1d 92       	st	X+, r1
    81cc:	11 90       	ld	r1, Z+
    81ce:	1d 92       	st	X+, r1
    81d0:	11 90       	ld	r1, Z+
    81d2:	1d 92       	st	X+, r1
    81d4:	11 90       	ld	r1, Z+
    81d6:	1d 92       	st	X+, r1
    81d8:	11 90       	ld	r1, Z+
    81da:	1d 92       	st	X+, r1
    81dc:	11 90       	ld	r1, Z+
    81de:	1d 92       	st	X+, r1
    81e0:	11 90       	ld	r1, Z+
    81e2:	1d 92       	st	X+, r1
    81e4:	11 90       	ld	r1, Z+
    81e6:	1d 92       	st	X+, r1
    81e8:	11 90       	ld	r1, Z+
    81ea:	1d 92       	st	X+, r1
    81ec:	11 90       	ld	r1, Z+
    81ee:	1d 92       	st	X+, r1
    81f0:	11 90       	ld	r1, Z+
    81f2:	1d 92       	st	X+, r1
    81f4:	11 90       	ld	r1, Z+
    81f6:	1d 92       	st	X+, r1
    81f8:	11 90       	ld	r1, Z+
    81fa:	1d 92       	st	X+, r1
    81fc:	11 90       	ld	r1, Z+
    81fe:	1d 92       	st	X+, r1
    8200:	11 90       	ld	r1, Z+
    8202:	1d 92       	st	X+, r1
    8204:	11 90       	ld	r1, Z+
    8206:	1d 92       	st	X+, r1
    8208:	11 90       	ld	r1, Z+
    820a:	1d 92       	st	X+, r1
    820c:	11 90       	ld	r1, Z+
    820e:	1d 92       	st	X+, r1
    8210:	11 90       	ld	r1, Z+
    8212:	1d 92       	st	X+, r1
    8214:	11 90       	ld	r1, Z+
    8216:	1d 92       	st	X+, r1
    8218:	11 90       	ld	r1, Z+
    821a:	1d 92       	st	X+, r1
    821c:	11 90       	ld	r1, Z+
    821e:	1d 92       	st	X+, r1
    8220:	11 90       	ld	r1, Z+
    8222:	1d 92       	st	X+, r1
    8224:	11 90       	ld	r1, Z+
    8226:	1d 92       	st	X+, r1
    8228:	11 90       	ld	r1, Z+
    822a:	1d 92       	st	X+, r1
    822c:	11 90       	ld	r1, Z+
    822e:	1d 92       	st	X+, r1
    8230:	11 90       	ld	r1, Z+
    8232:	1d 92       	st	X+, r1
    8234:	11 90       	ld	r1, Z+
    8236:	1d 92       	st	X+, r1
    8238:	11 90       	ld	r1, Z+
    823a:	1d 92       	st	X+, r1
    823c:	11 90       	ld	r1, Z+
    823e:	1d 92       	st	X+, r1
    8240:	11 90       	ld	r1, Z+
    8242:	1d 92       	st	X+, r1
    8244:	11 90       	ld	r1, Z+
    8246:	1d 92       	st	X+, r1
    8248:	11 90       	ld	r1, Z+
    824a:	1d 92       	st	X+, r1
    824c:	11 90       	ld	r1, Z+
    824e:	1d 92       	st	X+, r1
    8250:	11 90       	ld	r1, Z+
    8252:	1d 92       	st	X+, r1
    8254:	11 90       	ld	r1, Z+
    8256:	1d 92       	st	X+, r1
    8258:	11 90       	ld	r1, Z+
    825a:	1d 92       	st	X+, r1
    825c:	11 90       	ld	r1, Z+
    825e:	1d 92       	st	X+, r1
    8260:	11 90       	ld	r1, Z+
    8262:	1d 92       	st	X+, r1
    8264:	11 90       	ld	r1, Z+
    8266:	1d 92       	st	X+, r1
    8268:	11 90       	ld	r1, Z+
    826a:	1d 92       	st	X+, r1
    826c:	11 90       	ld	r1, Z+
    826e:	1d 92       	st	X+, r1
    8270:	11 90       	ld	r1, Z+
    8272:	1d 92       	st	X+, r1
    8274:	11 90       	ld	r1, Z+
    8276:	1d 92       	st	X+, r1
    8278:	11 90       	ld	r1, Z+
    827a:	1d 92       	st	X+, r1
    827c:	11 90       	ld	r1, Z+
    827e:	1d 92       	st	X+, r1
    8280:	11 90       	ld	r1, Z+
    8282:	1d 92       	st	X+, r1
    8284:	11 90       	ld	r1, Z+
    8286:	1d 92       	st	X+, r1
    8288:	11 90       	ld	r1, Z+
    828a:	1d 92       	st	X+, r1
    828c:	11 90       	ld	r1, Z+
    828e:	1d 92       	st	X+, r1
    8290:	11 90       	ld	r1, Z+
    8292:	1d 92       	st	X+, r1
    8294:	11 90       	ld	r1, Z+
    8296:	1d 92       	st	X+, r1
    8298:	11 90       	ld	r1, Z+
    829a:	1d 92       	st	X+, r1
    829c:	11 90       	ld	r1, Z+
    829e:	1d 92       	st	X+, r1
    82a0:	11 90       	ld	r1, Z+
    82a2:	1d 92       	st	X+, r1
    82a4:	11 90       	ld	r1, Z+
    82a6:	1d 92       	st	X+, r1
	clr r1
    82a8:	11 24       	eor	r1, r1
	ret
    82aa:	08 95       	ret

000082ac <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    82ac:	0f 93       	push	r16
	push r17
    82ae:	1f 93       	push	r17
	push YL
    82b0:	cf 93       	push	r28
	push YH
    82b2:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    82b4:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    82b6:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    82b8:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    82ba:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    82bc:	e0 0d       	add	r30, r0
	adc ZH,r1
    82be:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    82c0:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    82c2:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    82c4:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    82c6:	8e 9f       	mul	r24, r30
	movw r26,r0
    82c8:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    82ca:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    82cc:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    82ce:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    82d0:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    82d2:	00 24       	eor	r0, r0
	add YL,r1
    82d4:	c1 0d       	add	r28, r1
	adc YH,r0		
    82d6:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    82d8:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    82da:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    82dc:	ea 0f       	add	r30, r26
	adc ZH,r27
    82de:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    82e0:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    82e2:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    82e4:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    82e6:	69 9f       	mul	r22, r25
	add XL,r0
    82e8:	a0 0d       	add	r26, r0
	adc XH,r1
    82ea:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    82ec:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    82ee:	dd 27       	eor	r29, r29

	cpi r20,0	
    82f0:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    82f2:	51 f4       	brne	.+20     	; 0x8308 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    82f4:	a2 0f       	add	r26, r18
	adc XH,r1
    82f6:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    82f8:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    82fa:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    82fc:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    82fe:	11 c0       	rjmp	.+34     	; 0x8322 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    8300:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    8302:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    8304:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    8306:	0d c0       	rjmp	.+26     	; 0x8322 <x_check_end>

00008308 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    8308:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    830a:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    830c:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    830e:	04 c0       	rjmp	.+8      	; 0x8318 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    8310:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    8312:	e8 0f       	add	r30, r24
	adc ZH,r1	
    8314:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    8316:	05 c0       	rjmp	.+10     	; 0x8322 <x_check_end>

00008318 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    8318:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    831a:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    831c:	e2 0f       	add	r30, r18
	adc ZH,r1
    831e:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    8320:	31 97       	sbiw	r30, 0x01	; 1

00008322 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    8322:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    8324:	51 f4       	brne	.+20     	; 0x833a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    8326:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    8328:	93 9f       	mul	r25, r19
	add XL,r0
    832a:	a0 0d       	add	r26, r0
	adc XH,r1
    832c:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    832e:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    8330:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    8332:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    8334:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    8336:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    8338:	0a c0       	rjmp	.+20     	; 0x834e <y_check_end>

0000833a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    833a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    833c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    833e:	63 2f       	mov	r22, r19
	dec r22
    8340:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    8342:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    8344:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    8346:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    8348:	56 9f       	mul	r21, r22
	add ZL,r0
    834a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    834c:	f1 1d       	adc	r31, r1

0000834e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    834e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    8350:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    8352:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    8354:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    8356:	00 ff       	sbrs	r16, 0
	clr r23
    8358:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    835a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    835c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    835e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    8360:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    8362:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    8364:	59 1b       	sub	r21, r25

00008366 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    8366:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    8368:	48 1b       	sub	r20, r24

0000836a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    836a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    836c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    836e:	2c 93       	st	X, r18
	adiw XL,1
    8370:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    8372:	e6 0f       	add	r30, r22
	adc ZH,r23
    8374:	f7 1f       	adc	r31, r23
	dec r20
    8376:	4a 95       	dec	r20
	brne x_loop
    8378:	c1 f7       	brne	.-16     	; 0x836a <x_loop>

	add ZL,YL		;src+=srcXdiff
    837a:	ec 0f       	add	r30, r28
	adc ZH,YH
    837c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    837e:	a8 0f       	add	r26, r24
	adc XH,r1
    8380:	b1 1d       	adc	r27, r1
	dec r21
    8382:	5a 95       	dec	r21
	brne y_loop
    8384:	81 f7       	brne	.-32     	; 0x8366 <y_loop>


	pop YH
    8386:	df 91       	pop	r29
	pop YL
    8388:	cf 91       	pop	r28
	pop r17
    838a:	1f 91       	pop	r17
	pop r16
    838c:	0f 91       	pop	r16
	ret
    838e:	08 95       	ret

00008390 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8390:	0f 92       	push	r0
	push r1
    8392:	1f 92       	push	r1
	push ZL;2
    8394:	ef 93       	push	r30
	push ZH;2
    8396:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8398:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    839a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    839c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    83a0:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    83a2:	f1 e0       	ldi	r31, 0x01	; 1

000083a4 <latency_loop>:
latency_loop:
	cp ZL,ZH
    83a4:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    83a6:	00 f0       	brcs	.+0      	; 0x83a8 <latency_loop+0x4>
	inc ZH
    83a8:	f3 95       	inc	r31
	cpi ZH,10
    83aa:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    83ac:	d8 f3       	brcs	.-10     	; 0x83a4 <latency_loop>
	jmp .
    83ae:	0c 94 d9 41 	jmp	0x83b2	; 0x83b2 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    83b2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    83b6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    83b8:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    83bc:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    83c0:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    83c2:	57 c0       	rjmp	.+174    	; 0x8472 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    83c4:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    83c6:	98 f0       	brcs	.+38     	; 0x83ee <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    83c8:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    83ca:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    83ce:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    83d0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    83d4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    83d6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    83d8:	26 f4       	brtc	.+8      	; 0x83e2 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    83da:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    83dc:	0e 94 c0 42 	call	0x8580	; 0x8580 <update_sound>
	rjmp sync_end
    83e0:	b7 c0       	rjmp	.+366    	; 0x8550 <sync_end>

000083e2 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    83e2:	e5 e1       	ldi	r30, 0x15	; 21
    83e4:	ea 95       	dec	r30
    83e6:	f1 f7       	brne	.-4      	; 0x83e4 <sync_pre_eq_no_sound_update+0x2>
    83e8:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    83ea:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    83ec:	b1 c0       	rjmp	.+354    	; 0x8550 <sync_end>

000083ee <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    83ee:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    83f0:	38 f1       	brcs	.+78     	; 0x8440 <sync_post_eq>

	rjmp .
    83f2:	00 c0       	rjmp	.+0      	; 0x83f4 <sync_eq+0x6>
	rjmp .
    83f4:	00 c0       	rjmp	.+0      	; 0x83f6 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    83f6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    83f8:	e0 fb       	bst	r30, 0
	ldi ZL,4
    83fa:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    83fc:	16 f4       	brtc	.+4      	; 0x8402 <sync_eq_skip>
	
	call update_sound
    83fe:	0e 94 c0 42 	call	0x8580	; 0x8580 <update_sound>

00008402 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8402:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8404:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8408:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    840a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    840e:	a0 c0       	rjmp	.+320    	; 0x8550 <sync_end>

00008410 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    8410:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8412:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8414:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8416:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    841a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    841c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    841e:	00 f0       	brcs	.+0      	; 0x8420 <__vector_14+0x10>

	cpi ZL,2
    8420:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    8422:	00 f0       	brcs	.+0      	; 0x8424 <__vector_14+0x14>

	cpi ZL,3
    8424:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    8426:	00 f0       	brcs	.+0      	; 0x8428 <__vector_14+0x18>

	cpi ZL,4
    8428:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    842a:	00 f0       	brcs	.+0      	; 0x842c <__vector_14+0x1c>

	cpi ZL,5
    842c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    842e:	00 f0       	brcs	.+0      	; 0x8430 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8430:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8432:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8434:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    8438:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    843a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    843c:	ef 91       	pop	r30
	reti
    843e:	18 95       	reti

00008440 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8440:	00 c0       	rjmp	.+0      	; 0x8442 <sync_post_eq+0x2>

	bst ZL,0
    8442:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8444:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    8446:	26 f4       	brtc	.+8      	; 0x8450 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    8448:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    844a:	0e 94 c0 42 	call	0x8580	; 0x8580 <update_sound>
	rjmp sync_pre_eq_cont
    844e:	05 c0       	rjmp	.+10     	; 0x845a <sync_pre_eq_cont>

00008450 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8450:	e5 e1       	ldi	r30, 0x15	; 21
    8452:	ea 95       	dec	r30
    8454:	f1 f7       	brne	.-4      	; 0x8452 <sync_post_eq_no_sound_update+0x2>
    8456:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8458:	28 9a       	sbi	0x05, 0	; 5

0000845a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    845a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    845e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    8460:	09 f0       	breq	.+2      	; 0x8464 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    8462:	76 c0       	rjmp	.+236    	; 0x8550 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    8464:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    8466:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    846a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    846c:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    8470:	6f c0       	rjmp	.+222    	; 0x8550 <sync_end>

00008472 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8472:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8474:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    8478:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    847a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    847e:	00 c0       	rjmp	.+0      	; 0x8480 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8480:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8482:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8484:	00 c0       	rjmp	.+0      	; 0x8486 <sync_hsync+0x14>
	call update_sound
    8486:	0e 94 c0 42 	call	0x8580	; 0x8580 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    848a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    848c:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    8490:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8492:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    8496:	ef 17       	cp	r30, r31
	brsh no_render
    8498:	d0 f4       	brcc	.+52     	; 0x84ce <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    849a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    849c:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    84a0:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    84a2:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    84a6:	f0 19       	sub	r31, r0
	cp ZL,ZH
    84a8:	ef 17       	cp	r30, r31
	brlo no_render
    84aa:	88 f0       	brcs	.+34     	; 0x84ce <no_render>

	;push r1-r29
	ldi ZL,29
    84ac:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    84ae:	ff 27       	eor	r31, r31

000084b0 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    84b0:	00 80       	ld	r0, Z
	push r0
    84b2:	0f 92       	push	r0
	dec ZL
    84b4:	ea 95       	dec	r30
	brne push_loop	
    84b6:	e1 f7       	brne	.-8      	; 0x84b0 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    84b8:	06 e0       	ldi	r16, 0x06	; 6
    84ba:	0a 95       	dec	r16
    84bc:	f1 f7       	brne	.-4      	; 0x84ba <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    84be:	0e 94 86 3e 	call	0x7d0c	; 0x7d0c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    84c2:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    84c4:	ff 27       	eor	r31, r31

000084c6 <pop_loop>:
pop_loop:
	pop r0
    84c6:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    84c8:	01 92       	st	Z+, r0
	cpi ZL,30
    84ca:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    84cc:	e0 f3       	brcs	.-8      	; 0x84c6 <pop_loop>

000084ce <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    84ce:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    84d2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    84d4:	09 f0       	breq	.+2      	; 0x84d8 <no_render+0xa>
	rjmp sync_end
    84d6:	3c c0       	rjmp	.+120    	; 0x8550 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    84d8:	2f 93       	push	r18
	push r19
    84da:	3f 93       	push	r19
	push r20
    84dc:	4f 93       	push	r20
	push r21
    84de:	5f 93       	push	r21
	push r22
    84e0:	6f 93       	push	r22
	push r23
    84e2:	7f 93       	push	r23
	push r24
    84e4:	8f 93       	push	r24
	push r25
    84e6:	9f 93       	push	r25
	push r26
    84e8:	af 93       	push	r26
	push r27
    84ea:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    84ec:	78 94       	sei
	clr r1
    84ee:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    84f0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    84f2:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    84f6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    84f8:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    84fc:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    8500:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    8504:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    8506:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    850a:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    850e:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    8512:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    8516:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8518:	f1 05       	cpc	r31, r1
	breq .+2 
    851a:	09 f0       	breq	.+2      	; 0x851e <no_render+0x50>
	icall
    851c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    851e:	0e 94 5f 44 	call	0x88be	; 0x88be <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8522:	0e 94 de 52 	call	0xa5bc	; 0xa5bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    8526:	0e 94 ba 42 	call	0x8574	; 0x8574 <process_music>
	clr r1
    852a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    852c:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    8530:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    8534:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8536:	f1 05       	cpc	r31, r1
	breq .+2 
    8538:	09 f0       	breq	.+2      	; 0x853c <no_render+0x6e>
	icall
    853a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    853c:	bf 91       	pop	r27
	pop r26
    853e:	af 91       	pop	r26
	pop r25
    8540:	9f 91       	pop	r25
	pop r24
    8542:	8f 91       	pop	r24
	pop r23
    8544:	7f 91       	pop	r23
	pop r22
    8546:	6f 91       	pop	r22
	pop r21
    8548:	5f 91       	pop	r21
	pop r20
    854a:	4f 91       	pop	r20
	pop r19
    854c:	3f 91       	pop	r19
	pop r18
    854e:	2f 91       	pop	r18

00008550 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8550:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8552:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8554:	ff 91       	pop	r31
	pop ZL
    8556:	ef 91       	pop	r30
	pop r1
    8558:	1f 90       	pop	r1
	pop r0
    855a:	0f 90       	pop	r0
	reti
    855c:	18 95       	reti

0000855e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    855e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8560:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8562:	00 c0       	rjmp	.+0      	; 0x8564 <hsync_pulse+0x6>
	call update_sound
    8564:	0e 94 c0 42 	call	0x8580	; 0x8580 <update_sound>

	lds ZL,sync_pulse
    8568:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    856c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    856e:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    8572:	08 95       	ret

00008574 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8574:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    8578:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    857a:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <ProcessMusic>
#endif

	ret
    857e:	08 95       	ret

00008580 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8580:	0f 93       	push	r16
	push r17
    8582:	1f 93       	push	r17
	push r18
    8584:	2f 93       	push	r18
	push r28
    8586:	cf 93       	push	r28
	push r29
    8588:	df 93       	push	r29

	mov r18,ZL
    858a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    858c:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    8590:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    8594:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8596:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    859a:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    859e:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    85a2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    85a4:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    85a6:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    85aa:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    85ae:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    85b2:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    85b4:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    85b6:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    85b8:	d0 2d       	mov	r29, r0
	nop
    85ba:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    85bc:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    85c0:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    85c4:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    85c6:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    85ca:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    85ce:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    85d2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    85d4:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    85d6:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    85da:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    85de:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    85e2:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    85e4:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    85e6:	20 ff       	sbrs	r18, 0
	rjmp .
    85e8:	00 c0       	rjmp	.+0      	; 0x85ea <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    85ea:	01 03       	mulsu	r16, r17
	clr r0
    85ec:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    85ee:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    85f0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    85f2:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    85f4:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    85f8:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    85fc:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    85fe:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    8602:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    8606:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    860a:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    860c:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    860e:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    8612:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    8616:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    861a:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    861c:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    861e:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8620:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8622:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    8626:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    862a:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    862e:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8630:	92 f4       	brpl	.+36     	; 0x8656 <ch4_no_shift>

	lds ZH,tr4_params
    8632:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    8636:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8638:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    863a:	00 2e       	mov	r0, r16
	lsr r0
    863c:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    863e:	00 26       	eor	r0, r16
	bst r0,0
    8640:	00 fa       	bst	r0, 0
	lsr r17
    8642:	16 95       	lsr	r17
	ror r16
    8644:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    8646:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8648:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    864a:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    864c:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    8650:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    8654:	03 c0       	rjmp	.+6      	; 0x865c <ch4_end>

00008656 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8656:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8658:	1a 95       	dec	r17
	brne .-4
    865a:	f1 f7       	brne	.-4      	; 0x8658 <ch4_no_shift+0x2>

0000865c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    865c:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    8660:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8662:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8664:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8666:	21 ff       	sbrs	r18, 1
	rjmp .
    8668:	00 c0       	rjmp	.+0      	; 0x866a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    866a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    866c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    866e:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    8672:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8674:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8676:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8678:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    867a:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    867e:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    8682:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8684:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    8688:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    868c:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    8690:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8692:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    8696:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    8698:	f0 1f       	adc	r31, r16

	movw r16,ZL
    869a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    869c:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    86a0:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    86a4:	00 19       	sub	r16, r0
	sbc r17,r1
    86a6:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    86a8:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    86ac:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    86b0:	e0 15       	cp	r30, r0
	cpc ZH,r1
    86b2:	f1 05       	cpc	r31, r1
	brlo .+2
    86b4:	08 f0       	brcs	.+2      	; 0x86b8 <ch4_end+0x5c>
	movw ZL,r16
    86b6:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    86b8:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    86bc:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    86c0:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    86c2:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    86c6:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    86c8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    86ca:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    86cc:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    86ce:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    86d0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    86d2:	d0 05       	cpc	r29, r0
	brlt .+2
    86d4:	0c f0       	brlt	.+2      	; 0x86d8 <ch4_end+0x7c>
	ldi r28,127
    86d6:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    86d8:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    86da:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    86dc:	d0 05       	cpc	r29, r0
	brge .+2
    86de:	0c f4       	brge	.+2      	; 0x86e2 <ch4_end+0x86>
	ldi r28,-128
    86e0:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    86e2:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    86e4:	c0 93 b3 00 	sts	0x00B3, r28

000086e8 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    86e8:	df 91       	pop	r29
	pop r28
    86ea:	cf 91       	pop	r28
	pop r18
    86ec:	2f 91       	pop	r18
	pop r17
    86ee:	1f 91       	pop	r17
	pop r16
    86f0:	0f 91       	pop	r16
	
	ret
    86f2:	08 95       	ret

000086f4 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    86f4:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    86f8:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    86fc:	08 95       	ret

000086fe <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    86fe:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8700:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    8702:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    8704:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8706:	6c e1       	ldi	r22, 0x1C	; 28

00008708 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8708:	6d 93       	st	X+, r22
	sbiw r30,1
    870a:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    870c:	e9 f7       	brne	.-6      	; 0x8708 <fill_vram_loop>

	clr r1
    870e:	11 24       	eor	r1, r1

	ret
    8710:	08 95       	ret

00008712 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    8712:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    8714:	76 2f       	mov	r23, r22
	lsr r22
    8716:	66 95       	lsr	r22
	lsr r22
    8718:	66 95       	lsr	r22
	lsr r22			;y>>3
    871a:	66 95       	lsr	r22
	ldi r18,8		
    871c:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    871e:	82 9f       	mul	r24, r18
	movw XL,r0
    8720:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    8722:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    8724:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    8726:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    8728:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    872a:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    872c:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    872e:	4c 93       	st	X, r20

	clr r1
    8730:	11 24       	eor	r1, r1

	ret
    8732:	08 95       	ret

00008734 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8734:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    8738:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    873c:	08 95       	ret

0000873e <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    873e:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    8742:	81 70       	andi	r24, 0x01	; 1
	ret
    8744:	08 95       	ret

00008746 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8746:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    874a:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    874c:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    8750:	08 95       	ret

00008752 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8752:	88 23       	and	r24, r24
	brne rj_p2
    8754:	29 f4       	brne	.+10     	; 0x8760 <rj_p2>
		
	lds r24,joypad1_status_lo
    8756:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    875a:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    875e:	08 95       	ret

00008760 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8760:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    8764:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    8768:	08 95       	ret

0000876a <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    876a:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    876c:	7a 95       	dec	r23
	brne .-4 ;~1 us
    876e:	f1 f7       	brne	.-4      	; 0x876c <WaitUs+0x2>
	nop
    8770:	00 00       	nop
	sbiw r24,1
    8772:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8774:	d1 f7       	brne	.-12     	; 0x876a <WaitUs>

	ret
    8776:	08 95       	ret

00008778 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8778:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    877a:	fe cf       	rjmp	.-4      	; 0x8778 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    877c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    877e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8780:	60 bd       	out	0x20, r22	; 32
   cli
    8782:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8784:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8786:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8788:	78 94       	sei
   ret
    878a:	08 95       	ret

0000878c <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    878c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    878e:	fe cf       	rjmp	.-4      	; 0x878c <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8790:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8792:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8794:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8796:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8798:	80 b5       	in	r24, 0x20	; 32
   sei
    879a:	78 94       	sei
   ret
    879c:	08 95       	ret

0000879e <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    879e:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    87a0:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    87a4:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    87a8:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    87ac:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    87b0:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    87b4:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    87b8:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    87bc:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    87c0:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    87c4:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    87c6:	80 93 81 00 	sts	0x0081, r24

		cli
    87ca:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    87cc:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    87ce:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    87d2:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    87d4:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    87d8:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    87da:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    87de:	90 93 60 00 	sts	0x0060, r25
	
		sei
    87e2:	78 94       	sei

000087e4 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    87e4:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    87e8:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    87ea:	e0 f3       	brcs	.-8      	; 0x87e4 <wait>

		ret
    87ec:	08 95       	ret

000087ee <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    87ee:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    87f2:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    87f6:	08 95       	ret

000087f8 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    87f8:	0f 93       	push	r16
		push r17
    87fa:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    87fc:	0f b7       	in	r16, 0x3f	; 63
		push r16
    87fe:	0f 93       	push	r16

		lds r16,sync_pulse
    8800:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    8804:	03 95       	inc	r16
		sts sync_pulse,r16
    8806:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    880a:	00 fd       	sbrc	r16, 0
		rjmp 1f
    880c:	08 c0       	rjmp	.+16     	; 0x881e <__vector_8+0x26>
		lds r17,random_value
    880e:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8812:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8816:	10 27       	eor	r17, r16
		sts random_value,r17
    8818:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    881c:	07 c0       	rjmp	.+14     	; 0x882c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    881e:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8822:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8826:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8828:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    882c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    882e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8832:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8834:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8836:	1f 91       	pop	r17
		pop r16
    8838:	0f 91       	pop	r16
		reti
    883a:	18 95       	reti

0000883c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    883c:	98 e0       	ldi	r25, 0x08	; 8
    883e:	88 e1       	ldi	r24, 0x18	; 24
    8840:	0f b6       	in	r0, 0x3f	; 63
    8842:	f8 94       	cli
    8844:	a8 95       	wdr
    8846:	80 93 60 00 	sts	0x0060, r24
    884a:	0f be       	out	0x3f, r0	; 63
    884c:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8850:	ff cf       	rjmp	.-2      	; 0x8850 <SoftReset+0x14>

00008852 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8852:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8854:	c8 95       	lpm
    8856:	c8 95       	lpm
		Wait200ns();
    8858:	c8 95       	lpm
    885a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    885c:	12 98       	cbi	0x02, 2	; 2
    885e:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8860:	80 e0       	ldi	r24, 0x00	; 0
    8862:	90 e0       	ldi	r25, 0x00	; 0
    8864:	20 e0       	ldi	r18, 0x00	; 0
    8866:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8868:	36 95       	lsr	r19
    886a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    886c:	96 95       	lsr	r25
    886e:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8870:	c8 95       	lpm
    8872:	c8 95       	lpm
			Wait200ns();
    8874:	c8 95       	lpm
    8876:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8878:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    887a:	00 9b       	sbis	0x00, 0	; 0
    887c:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    887e:	01 9b       	sbis	0x00, 1	; 0
    8880:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8882:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8884:	c8 95       	lpm
    8886:	c8 95       	lpm
			Wait200ns();
    8888:	c8 95       	lpm
    888a:	c8 95       	lpm
    888c:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    888e:	61 f7       	brne	.-40     	; 0x8868 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8890:	30 93 c0 0c 	sts	0x0CC0, r19
    8894:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    8898:	90 93 c4 0c 	sts	0x0CC4, r25
    889c:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    88a0:	80 91 bf 0c 	lds	r24, 0x0CBF
    88a4:	90 91 c0 0c 	lds	r25, 0x0CC0
    88a8:	0f 97       	sbiw	r24, 0x0f	; 15
    88aa:	31 f0       	breq	.+12     	; 0x88b8 <ReadButtons+0x66>
    88ac:	80 91 c3 0c 	lds	r24, 0x0CC3
    88b0:	90 91 c4 0c 	lds	r25, 0x0CC4
    88b4:	0f 97       	sbiw	r24, 0x0f	; 15
    88b6:	11 f4       	brne	.+4      	; 0x88bc <ReadButtons+0x6a>
		SoftReset();
    88b8:	0e 94 1e 44 	call	0x883c	; 0x883c <SoftReset>
    88bc:	08 95       	ret

000088be <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    88be:	10 92 f8 0c 	sts	0x0CF8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    88c2:	00 99       	sbic	0x00, 0	; 0
    88c4:	03 c0       	rjmp	.+6      	; 0x88cc <ReadControllers+0xe>
    88c6:	81 e0       	ldi	r24, 0x01	; 1
    88c8:	80 93 f8 0c 	sts	0x0CF8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    88cc:	01 99       	sbic	0x00, 1	; 0
    88ce:	05 c0       	rjmp	.+10     	; 0x88da <ReadControllers+0x1c>
    88d0:	80 91 f8 0c 	lds	r24, 0x0CF8
    88d4:	82 60       	ori	r24, 0x02	; 2
    88d6:	80 93 f8 0c 	sts	0x0CF8, r24
			
	//read the standard buttons
	ReadButtons();
    88da:	0c 94 29 44 	jmp	0x8852	; 0x8852 <ReadButtons>

000088de <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    88de:	cf 93       	push	r28
    88e0:	df 93       	push	r29
    88e2:	c0 e0       	ldi	r28, 0x00	; 0
    88e4:	d0 e0       	ldi	r29, 0x00	; 0
    88e6:	fe 01       	movw	r30, r28
    88e8:	ee 54       	subi	r30, 0x4E	; 78
    88ea:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    88ec:	64 91       	lpm	r22, Z
    88ee:	ce 01       	movw	r24, r28
    88f0:	0e 94 bc 43 	call	0x8778	; 0x8778 <WriteEeprom>
    88f4:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    88f6:	c0 32       	cpi	r28, 0x20	; 32
    88f8:	d1 05       	cpc	r29, r1
    88fa:	a9 f7       	brne	.-22     	; 0x88e6 <FormatEeprom+0x8>
    88fc:	c0 e2       	ldi	r28, 0x20	; 32
    88fe:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8900:	6f ef       	ldi	r22, 0xFF	; 255
    8902:	ce 01       	movw	r24, r28
    8904:	0e 94 bc 43 	call	0x8778	; 0x8778 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8908:	6f ef       	ldi	r22, 0xFF	; 255
    890a:	ce 01       	movw	r24, r28
    890c:	01 96       	adiw	r24, 0x01	; 1
    890e:	0e 94 bc 43 	call	0x8778	; 0x8778 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8912:	a0 96       	adiw	r28, 0x20	; 32
    8914:	c1 15       	cp	r28, r1
    8916:	88 e0       	ldi	r24, 0x08	; 8
    8918:	d8 07       	cpc	r29, r24
    891a:	91 f7       	brne	.-28     	; 0x8900 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    891c:	df 91       	pop	r29
    891e:	cf 91       	pop	r28
    8920:	08 95       	ret

00008922 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8922:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8924:	80 e0       	ldi	r24, 0x00	; 0
    8926:	90 e0       	ldi	r25, 0x00	; 0
    8928:	0e 94 c6 43 	call	0x878c	; 0x878c <ReadEeprom>
    892c:	c8 2f       	mov	r28, r24
    892e:	81 e0       	ldi	r24, 0x01	; 1
    8930:	90 e0       	ldi	r25, 0x00	; 0
    8932:	0e 94 c6 43 	call	0x878c	; 0x878c <ReadEeprom>
    8936:	28 2f       	mov	r18, r24
    8938:	30 e0       	ldi	r19, 0x00	; 0
    893a:	32 2f       	mov	r19, r18
    893c:	22 27       	eor	r18, r18
    893e:	2c 0f       	add	r18, r28
    8940:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8942:	81 e0       	ldi	r24, 0x01	; 1
    8944:	2a 35       	cpi	r18, 0x5A	; 90
    8946:	35 45       	sbci	r19, 0x55	; 85
    8948:	09 f0       	breq	.+2      	; 0x894c <isEepromFormatted+0x2a>
    894a:	80 e0       	ldi	r24, 0x00	; 0
}
    894c:	cf 91       	pop	r28
    894e:	08 95       	ret

00008950 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8950:	8f 92       	push	r8
    8952:	9f 92       	push	r9
    8954:	af 92       	push	r10
    8956:	bf 92       	push	r11
    8958:	cf 92       	push	r12
    895a:	df 92       	push	r13
    895c:	ef 92       	push	r14
    895e:	ff 92       	push	r15
    8960:	0f 93       	push	r16
    8962:	1f 93       	push	r17
    8964:	cf 93       	push	r28
    8966:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    8968:	fb 01       	movw	r30, r22
    896a:	11 82       	std	Z+1, r1	; 0x01
    896c:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    896e:	8f 3f       	cpi	r24, 0xFF	; 255
    8970:	ff ef       	ldi	r31, 0xFF	; 255
    8972:	9f 07       	cpc	r25, r31
    8974:	89 f1       	breq	.+98     	; 0x89d8 <EepromBlockExists+0x88>
    8976:	6a 01       	movw	r12, r20
    8978:	8b 01       	movw	r16, r22
    897a:	7c 01       	movw	r14, r24
    897c:	a1 2c       	mov	r10, r1
    897e:	b1 2c       	mov	r11, r1
    8980:	c0 e0       	ldi	r28, 0x00	; 0
    8982:	d3 e0       	ldi	r29, 0x03	; 3
    8984:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8986:	c5 01       	movw	r24, r10
    8988:	0e 94 c6 43 	call	0x878c	; 0x878c <ReadEeprom>
    898c:	88 2e       	mov	r8, r24
    898e:	c5 01       	movw	r24, r10
    8990:	01 96       	adiw	r24, 0x01	; 1
    8992:	0e 94 c6 43 	call	0x878c	; 0x878c <ReadEeprom>
    8996:	28 2f       	mov	r18, r24
    8998:	30 e0       	ldi	r19, 0x00	; 0
    899a:	32 2f       	mov	r19, r18
    899c:	22 27       	eor	r18, r18
    899e:	28 0d       	add	r18, r8
    89a0:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    89a2:	2e 15       	cp	r18, r14
    89a4:	3f 05       	cpc	r19, r15
    89a6:	29 f4       	brne	.+10     	; 0x89b2 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    89a8:	f8 01       	movw	r30, r16
    89aa:	b1 82       	std	Z+1, r11	; 0x01
    89ac:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    89ae:	d0 e0       	ldi	r29, 0x00	; 0
    89b0:	0b c0       	rjmp	.+22     	; 0x89c8 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    89b2:	2f 3f       	cpi	r18, 0xFF	; 255
    89b4:	3f 4f       	sbci	r19, 0xFF	; 255
    89b6:	41 f4       	brne	.+16     	; 0x89c8 <EepromBlockExists+0x78>
    89b8:	91 10       	cpse	r9, r1
    89ba:	06 c0       	rjmp	.+12     	; 0x89c8 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    89bc:	c1 14       	cp	r12, r1
    89be:	d1 04       	cpc	r13, r1
    89c0:	11 f0       	breq	.+4      	; 0x89c6 <EepromBlockExists+0x76>
    89c2:	f6 01       	movw	r30, r12
    89c4:	c0 83       	st	Z, r28
    89c6:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    89c8:	cf 5f       	subi	r28, 0xFF	; 255
    89ca:	f0 e2       	ldi	r31, 0x20	; 32
    89cc:	af 0e       	add	r10, r31
    89ce:	b1 1c       	adc	r11, r1
    89d0:	c0 34       	cpi	r28, 0x40	; 64
    89d2:	c9 f6       	brne	.-78     	; 0x8986 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    89d4:	8d 2f       	mov	r24, r29
    89d6:	01 c0       	rjmp	.+2      	; 0x89da <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    89d8:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    89da:	df 91       	pop	r29
    89dc:	cf 91       	pop	r28
    89de:	1f 91       	pop	r17
    89e0:	0f 91       	pop	r16
    89e2:	ff 90       	pop	r15
    89e4:	ef 90       	pop	r14
    89e6:	df 90       	pop	r13
    89e8:	cf 90       	pop	r12
    89ea:	bf 90       	pop	r11
    89ec:	af 90       	pop	r10
    89ee:	9f 90       	pop	r9
    89f0:	8f 90       	pop	r8
    89f2:	08 95       	ret

000089f4 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    89f4:	ef 92       	push	r14
    89f6:	ff 92       	push	r15
    89f8:	0f 93       	push	r16
    89fa:	1f 93       	push	r17
    89fc:	cf 93       	push	r28
    89fe:	df 93       	push	r29
    8a00:	00 d0       	rcall	.+0      	; 0x8a02 <EepromWriteBlock+0xe>
    8a02:	1f 92       	push	r1
    8a04:	cd b7       	in	r28, 0x3d	; 61
    8a06:	de b7       	in	r29, 0x3e	; 62
    8a08:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8a0a:	1a 82       	std	Y+2, r1	; 0x02
    8a0c:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8a0e:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8a10:	ae 01       	movw	r20, r28
    8a12:	4d 5f       	subi	r20, 0xFD	; 253
    8a14:	5f 4f       	sbci	r21, 0xFF	; 255
    8a16:	be 01       	movw	r22, r28
    8a18:	6f 5f       	subi	r22, 0xFF	; 255
    8a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a1c:	fc 01       	movw	r30, r24
    8a1e:	80 81       	ld	r24, Z
    8a20:	91 81       	ldd	r25, Z+1	; 0x01
    8a22:	0e 94 a8 44 	call	0x8950	; 0x8950 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    8a26:	88 23       	and	r24, r24
    8a28:	11 f0       	breq	.+4      	; 0x8a2e <EepromWriteBlock+0x3a>
    8a2a:	83 30       	cpi	r24, 0x03	; 3
    8a2c:	19 f5       	brne	.+70     	; 0x8a74 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8a2e:	89 81       	ldd	r24, Y+1	; 0x01
    8a30:	9a 81       	ldd	r25, Y+2	; 0x02
    8a32:	89 2b       	or	r24, r25
    8a34:	49 f4       	brne	.+18     	; 0x8a48 <EepromWriteBlock+0x54>
    8a36:	8b 81       	ldd	r24, Y+3	; 0x03
    8a38:	88 23       	and	r24, r24
    8a3a:	d9 f0       	breq	.+54     	; 0x8a72 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8a3c:	f0 e2       	ldi	r31, 0x20	; 32
    8a3e:	8f 9f       	mul	r24, r31
    8a40:	c0 01       	movw	r24, r0
    8a42:	11 24       	eor	r1, r1
    8a44:	9a 83       	std	Y+2, r25	; 0x02
    8a46:	89 83       	std	Y+1, r24	; 0x01
    8a48:	78 01       	movw	r14, r16
    8a4a:	20 e2       	ldi	r18, 0x20	; 32
    8a4c:	e2 0e       	add	r14, r18
    8a4e:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8a50:	f8 01       	movw	r30, r16
    8a52:	61 91       	ld	r22, Z+
    8a54:	8f 01       	movw	r16, r30
    8a56:	89 81       	ldd	r24, Y+1	; 0x01
    8a58:	9a 81       	ldd	r25, Y+2	; 0x02
    8a5a:	9c 01       	movw	r18, r24
    8a5c:	2f 5f       	subi	r18, 0xFF	; 255
    8a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a60:	3a 83       	std	Y+2, r19	; 0x02
    8a62:	29 83       	std	Y+1, r18	; 0x01
    8a64:	0e 94 bc 43 	call	0x8778	; 0x8778 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8a68:	0e 15       	cp	r16, r14
    8a6a:	1f 05       	cpc	r17, r15
    8a6c:	89 f7       	brne	.-30     	; 0x8a50 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8a6e:	80 e0       	ldi	r24, 0x00	; 0
    8a70:	01 c0       	rjmp	.+2      	; 0x8a74 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8a72:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8a74:	0f 90       	pop	r0
    8a76:	0f 90       	pop	r0
    8a78:	0f 90       	pop	r0
    8a7a:	df 91       	pop	r29
    8a7c:	cf 91       	pop	r28
    8a7e:	1f 91       	pop	r17
    8a80:	0f 91       	pop	r16
    8a82:	ff 90       	pop	r15
    8a84:	ef 90       	pop	r14
    8a86:	08 95       	ret

00008a88 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    8a88:	cf 92       	push	r12
    8a8a:	df 92       	push	r13
    8a8c:	ff 92       	push	r15
    8a8e:	0f 93       	push	r16
    8a90:	1f 93       	push	r17
    8a92:	cf 93       	push	r28
    8a94:	df 93       	push	r29
    8a96:	00 d0       	rcall	.+0      	; 0x8a98 <EepromReadBlock+0x10>
    8a98:	cd b7       	in	r28, 0x3d	; 61
    8a9a:	de b7       	in	r29, 0x3e	; 62
    8a9c:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8a9e:	40 e0       	ldi	r20, 0x00	; 0
    8aa0:	50 e0       	ldi	r21, 0x00	; 0
    8aa2:	be 01       	movw	r22, r28
    8aa4:	6f 5f       	subi	r22, 0xFF	; 255
    8aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    8aa8:	0e 94 a8 44 	call	0x8950	; 0x8950 <EepromBlockExists>
    8aac:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8aae:	81 11       	cpse	r24, r1
    8ab0:	13 c0       	rjmp	.+38     	; 0x8ad8 <EepromReadBlock+0x50>
    8ab2:	68 01       	movw	r12, r16
    8ab4:	80 e2       	ldi	r24, 0x20	; 32
    8ab6:	c8 0e       	add	r12, r24
    8ab8:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    8aba:	89 81       	ldd	r24, Y+1	; 0x01
    8abc:	9a 81       	ldd	r25, Y+2	; 0x02
    8abe:	9c 01       	movw	r18, r24
    8ac0:	2f 5f       	subi	r18, 0xFF	; 255
    8ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    8ac4:	3a 83       	std	Y+2, r19	; 0x02
    8ac6:	29 83       	std	Y+1, r18	; 0x01
    8ac8:	0e 94 c6 43 	call	0x878c	; 0x878c <ReadEeprom>
    8acc:	f8 01       	movw	r30, r16
    8ace:	81 93       	st	Z+, r24
    8ad0:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8ad2:	ec 15       	cp	r30, r12
    8ad4:	fd 05       	cpc	r31, r13
    8ad6:	89 f7       	brne	.-30     	; 0x8aba <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8ad8:	8f 2d       	mov	r24, r15
    8ada:	0f 90       	pop	r0
    8adc:	0f 90       	pop	r0
    8ade:	df 91       	pop	r29
    8ae0:	cf 91       	pop	r28
    8ae2:	1f 91       	pop	r17
    8ae4:	0f 91       	pop	r16
    8ae6:	ff 90       	pop	r15
    8ae8:	df 90       	pop	r13
    8aea:	cf 90       	pop	r12
    8aec:	08 95       	ret

00008aee <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8aee:	00 97       	sbiw	r24, 0x00	; 0
    8af0:	21 f0       	breq	.+8      	; 0x8afa <GetPrngNumber+0xc>
    8af2:	90 93 cd 0c 	sts	0x0CCD, r25
    8af6:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8afa:	20 91 cc 0c 	lds	r18, 0x0CCC
    8afe:	30 91 cd 0c 	lds	r19, 0x0CCD
    8b02:	a9 01       	movw	r20, r18
    8b04:	56 95       	lsr	r21
    8b06:	47 95       	ror	r20
    8b08:	56 95       	lsr	r21
    8b0a:	47 95       	ror	r20
    8b0c:	c9 01       	movw	r24, r18
    8b0e:	63 e0       	ldi	r22, 0x03	; 3
    8b10:	96 95       	lsr	r25
    8b12:	87 95       	ror	r24
    8b14:	6a 95       	dec	r22
    8b16:	e1 f7       	brne	.-8      	; 0x8b10 <GetPrngNumber+0x22>
    8b18:	84 27       	eor	r24, r20
    8b1a:	95 27       	eor	r25, r21
    8b1c:	82 27       	eor	r24, r18
    8b1e:	93 27       	eor	r25, r19
    8b20:	a9 01       	movw	r20, r18
    8b22:	75 e0       	ldi	r23, 0x05	; 5
    8b24:	56 95       	lsr	r21
    8b26:	47 95       	ror	r20
    8b28:	7a 95       	dec	r23
    8b2a:	e1 f7       	brne	.-8      	; 0x8b24 <GetPrngNumber+0x36>
    8b2c:	84 27       	eor	r24, r20
    8b2e:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8b30:	99 27       	eor	r25, r25
    8b32:	86 95       	lsr	r24
    8b34:	97 95       	ror	r25
    8b36:	88 27       	eor	r24, r24
    8b38:	36 95       	lsr	r19
    8b3a:	27 95       	ror	r18
    8b3c:	82 2b       	or	r24, r18
    8b3e:	93 2b       	or	r25, r19
    8b40:	90 93 cd 0c 	sts	0x0CCD, r25
    8b44:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    8b48:	08 95       	ret

00008b4a <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8b4a:	fc 01       	movw	r30, r24
    8b4c:	67 87       	std	Z+15, r22	; 0x0f
    8b4e:	08 95       	ret

00008b50 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8b50:	e0 ed       	ldi	r30, 0xD0	; 208
    8b52:	fc e0       	ldi	r31, 0x0C	; 12
    8b54:	81 e0       	ldi	r24, 0x01	; 1
    8b56:	91 e0       	ldi	r25, 0x01	; 1
    8b58:	95 8b       	std	Z+21, r25	; 0x15
    8b5a:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8b5c:	63 8b       	std	Z+19, r22	; 0x13
    8b5e:	08 95       	ret

00008b60 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8b60:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8b62:	90 81       	ld	r25, Z
    8b64:	9f 75       	andi	r25, 0x5F	; 95
    8b66:	90 83       	st	Z, r25
    8b68:	08 95       	ret

00008b6a <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8b6a:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8b6c:	90 81       	ld	r25, Z
    8b6e:	90 64       	ori	r25, 0x40	; 64
    8b70:	90 83       	st	Z, r25
    8b72:	08 95       	ret

00008b74 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8b74:	fc 01       	movw	r30, r24
    8b76:	66 87       	std	Z+14, r22	; 0x0e
    8b78:	08 95       	ret

00008b7a <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8b7a:	fc 01       	movw	r30, r24
    8b7c:	62 87       	std	Z+10, r22	; 0x0a
    8b7e:	08 95       	ret

00008b80 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8b80:	fc 01       	movw	r30, r24
    8b82:	63 87       	std	Z+11, r22	; 0x0b
    8b84:	08 95       	ret

00008b86 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8b86:	cf 93       	push	r28
    8b88:	df 93       	push	r29
    8b8a:	ec 01       	movw	r28, r24
    8b8c:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8b8e:	29 81       	ldd	r18, Y+1	; 0x01
    8b90:	30 e0       	ldi	r19, 0x00	; 0
    8b92:	f9 01       	movw	r30, r18
    8b94:	ee 0f       	add	r30, r30
    8b96:	ff 1f       	adc	r31, r31
    8b98:	e8 5f       	subi	r30, 0xF8	; 248
    8b9a:	fa 46       	sbci	r31, 0x6A	; 106
    8b9c:	65 91       	lpm	r22, Z+
    8b9e:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8ba0:	f9 01       	movw	r30, r18
    8ba2:	e4 0f       	add	r30, r20
    8ba4:	f1 1d       	adc	r31, r1
    8ba6:	47 fd       	sbrc	r20, 7
    8ba8:	fa 95       	dec	r31
    8baa:	ee 0f       	add	r30, r30
    8bac:	ff 1f       	adc	r31, r31
    8bae:	e8 5f       	subi	r30, 0xF8	; 248
    8bb0:	fa 46       	sbci	r31, 0x6A	; 106
    8bb2:	85 91       	lpm	r24, Z+
    8bb4:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8bb6:	86 1b       	sub	r24, r22
    8bb8:	97 0b       	sbc	r25, r23
    8bba:	68 85       	ldd	r22, Y+8	; 0x08
    8bbc:	70 e0       	ldi	r23, 0x00	; 0
    8bbe:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
	if(delta==0)delta++;
    8bc2:	61 15       	cp	r22, r1
    8bc4:	71 05       	cpc	r23, r1
    8bc6:	11 f4       	brne	.+4      	; 0x8bcc <PatchCommand11+0x46>
    8bc8:	61 e0       	ldi	r22, 0x01	; 1
    8bca:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    8bce:	86 e0       	ldi	r24, 0x06	; 6
    8bd0:	e8 9f       	mul	r30, r24
    8bd2:	f0 01       	movw	r30, r0
    8bd4:	11 24       	eor	r1, r1
    8bd6:	e0 53       	subi	r30, 0x30	; 48
    8bd8:	f3 4f       	sbci	r31, 0xF3	; 243
    8bda:	81 81       	ldd	r24, Z+1	; 0x01
    8bdc:	92 81       	ldd	r25, Z+2	; 0x02
    8bde:	86 0f       	add	r24, r22
    8be0:	97 1f       	adc	r25, r23
    8be2:	92 83       	std	Z+2, r25	; 0x02
    8be4:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8be6:	7e 83       	std	Y+6, r23	; 0x06
    8be8:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8bea:	88 81       	ld	r24, Y
    8bec:	88 60       	ori	r24, 0x08	; 8
    8bee:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8bf0:	89 81       	ldd	r24, Y+1	; 0x01
    8bf2:	48 0f       	add	r20, r24
    8bf4:	4f 83       	std	Y+7, r20	; 0x07
}
    8bf6:	df 91       	pop	r29
    8bf8:	cf 91       	pop	r28
    8bfa:	08 95       	ret

00008bfc <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8bfc:	fc 01       	movw	r30, r24
    8bfe:	60 87       	std	Z+8, r22	; 0x08
    8c00:	08 95       	ret

00008c02 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8c02:	fc 01       	movw	r30, r24
    8c04:	64 83       	std	Z+4, r22	; 0x04
    8c06:	08 95       	ret

00008c08 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8c08:	fc 01       	movw	r30, r24
    8c0a:	82 81       	ldd	r24, Z+2	; 0x02
    8c0c:	0c 94 1f 4a 	jmp	0x943e	; 0x943e <SetMixerWave>

00008c10 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8c10:	fc 01       	movw	r30, r24
	track->note+=param;
    8c12:	91 81       	ldd	r25, Z+1	; 0x01
    8c14:	69 0f       	add	r22, r25
    8c16:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8c18:	82 81       	ldd	r24, Z+2	; 0x02
    8c1a:	0c 94 08 4a 	jmp	0x9410	; 0x9410 <SetMixerNote>

00008c1e <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8c1e:	fc 01       	movw	r30, r24
	track->note-=param;
    8c20:	91 81       	ldd	r25, Z+1	; 0x01
    8c22:	96 1b       	sub	r25, r22
    8c24:	69 2f       	mov	r22, r25
    8c26:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8c28:	82 81       	ldd	r24, Z+2	; 0x02
    8c2a:	0c 94 08 4a 	jmp	0x9410	; 0x9410 <SetMixerNote>

00008c2e <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8c2e:	1f 93       	push	r17
    8c30:	cf 93       	push	r28
    8c32:	df 93       	push	r29
    8c34:	ec 01       	movw	r28, r24
    8c36:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8c38:	8a 81       	ldd	r24, Y+2	; 0x02
    8c3a:	0e 94 08 4a 	call	0x9410	; 0x9410 <SetMixerNote>
	track->note=param;
    8c3e:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8c40:	88 81       	ld	r24, Y
    8c42:	87 7f       	andi	r24, 0xF7	; 247
    8c44:	88 83       	st	Y, r24
}
    8c46:	df 91       	pop	r29
    8c48:	cf 91       	pop	r28
    8c4a:	1f 91       	pop	r17
    8c4c:	08 95       	ret

00008c4e <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8c4e:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8c50:	14 96       	adiw	r26, 0x04	; 4
    8c52:	8c 91       	ld	r24, X
    8c54:	14 97       	sbiw	r26, 0x04	; 4
    8c56:	88 23       	and	r24, r24
    8c58:	19 f1       	breq	.+70     	; 0x8ca0 <PatchCommand14+0x52>
    8c5a:	55 96       	adiw	r26, 0x15	; 21
    8c5c:	2d 91       	ld	r18, X+
    8c5e:	3c 91       	ld	r19, X
    8c60:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8c62:	66 23       	and	r22, r22
    8c64:	79 f0       	breq	.+30     	; 0x8c84 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8c66:	77 27       	eor	r23, r23
    8c68:	67 fd       	sbrc	r22, 7
    8c6a:	70 95       	com	r23
    8c6c:	6f 5f       	subi	r22, 0xFF	; 255
    8c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8c70:	ab 01       	movw	r20, r22
    8c72:	44 0f       	add	r20, r20
    8c74:	55 1f       	adc	r21, r21
    8c76:	64 0f       	add	r22, r20
    8c78:	75 1f       	adc	r23, r21
    8c7a:	26 1b       	sub	r18, r22
    8c7c:	37 0b       	sbc	r19, r23
    8c7e:	09 c0       	rjmp	.+18     	; 0x8c92 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8c80:	ef 3f       	cpi	r30, 0xFF	; 255
    8c82:	39 f0       	breq	.+14     	; 0x8c92 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8c84:	23 50       	subi	r18, 0x03	; 3
    8c86:	31 09       	sbc	r19, r1
    8c88:	f9 01       	movw	r30, r18
    8c8a:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8c8c:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8c8e:	ed 30       	cpi	r30, 0x0D	; 13
    8c90:	b9 f7       	brne	.-18     	; 0x8c80 <PatchCommand14+0x32>
    8c92:	56 96       	adiw	r26, 0x16	; 22
    8c94:	3c 93       	st	X, r19
    8c96:	2e 93       	st	-X, r18
    8c98:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8c9a:	81 50       	subi	r24, 0x01	; 1
    8c9c:	14 96       	adiw	r26, 0x04	; 4
    8c9e:	8c 93       	st	X, r24
    8ca0:	08 95       	ret

00008ca2 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8ca2:	90 93 71 0d 	sts	0x0D71, r25
    8ca6:	80 93 70 0d 	sts	0x0D70, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8caa:	8f e6       	ldi	r24, 0x6F	; 111
    8cac:	80 93 73 0d 	sts	0x0D73, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8cb0:	10 92 ce 0c 	sts	0x0CCE, r1
    8cb4:	eb e0       	ldi	r30, 0x0B	; 11
    8cb6:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8cb8:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8cba:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8cbc:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8cbe:	28 e1       	ldi	r18, 0x18	; 24
    8cc0:	df 01       	movw	r26, r30
    8cc2:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8cc4:	8c 93       	st	X, r24
    8cc6:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8cc8:	9c 93       	st	X, r25
    8cca:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8ccc:	1c 92       	st	X, r1
    8cce:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8cd0:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8cd2:	10 82       	st	Z, r1
    8cd4:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8cd6:	2c 93       	st	X, r18
    8cd8:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8cda:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8cdc:	8f 5f       	subi	r24, 0xFF	; 255
    8cde:	77 96       	adiw	r30, 0x17	; 23
    8ce0:	85 30       	cpi	r24, 0x05	; 5
    8ce2:	71 f7       	brne	.-36     	; 0x8cc0 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8ce4:	08 95       	ret

00008ce6 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    8ce6:	eb ef       	ldi	r30, 0xFB	; 251
    8ce8:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8cea:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8cec:	20 81       	ld	r18, Z
    8cee:	2f 77       	andi	r18, 0x7F	; 127
    8cf0:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8cf2:	33 83       	std	Z+3, r19	; 0x03
    8cf4:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    8cf6:	2d e0       	ldi	r18, 0x0D	; 13
    8cf8:	ee 36       	cpi	r30, 0x6E	; 110
    8cfa:	f2 07       	cpc	r31, r18
    8cfc:	b9 f7       	brne	.-18     	; 0x8cec <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8cfe:	01 96       	adiw	r24, 0x01	; 1
    8d00:	90 93 78 0d 	sts	0x0D78, r25
    8d04:	80 93 77 0d 	sts	0x0D77, r24
		songStart=song+1;//skip first delta-time
    8d08:	90 93 fa 0c 	sts	0x0CFA, r25
    8d0c:	80 93 f9 0c 	sts	0x0CF9, r24
		loopStart=song+1;
    8d10:	90 93 7a 0d 	sts	0x0D7A, r25
    8d14:	80 93 79 0d 	sts	0x0D79, r24
		nextDeltaTime=0;
    8d18:	10 92 75 0d 	sts	0x0D75, r1
    8d1c:	10 92 74 0d 	sts	0x0D74, r1
		currDeltaTime=0;
    8d20:	10 92 6f 0d 	sts	0x0D6F, r1
    8d24:	10 92 6e 0d 	sts	0x0D6E, r1
		songSpeed=0;
    8d28:	10 92 76 0d 	sts	0x0D76, r1

		lastStatus=0;
    8d2c:	10 92 72 0d 	sts	0x0D72, r1
		playSong=true;
    8d30:	81 e0       	ldi	r24, 0x01	; 1
    8d32:	80 93 ce 0c 	sts	0x0CCE, r24
    8d36:	08 95       	ret

00008d38 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    8d38:	eb ef       	ldi	r30, 0xFB	; 251
    8d3a:	fc e0       	ldi	r31, 0x0C	; 12
    8d3c:	8a ef       	ldi	r24, 0xFA	; 250
    8d3e:	87 87       	std	Z+15, r24	; 0x0f
    8d40:	86 a3       	std	Z+38, r24	; 0x26
    8d42:	80 93 38 0d 	sts	0x0D38, r24
    8d46:	80 93 4f 0d 	sts	0x0D4F, r24
    8d4a:	80 93 66 0d 	sts	0x0D66, r24
	}

	playSong=false;
    8d4e:	10 92 ce 0c 	sts	0x0CCE, r1
    8d52:	08 95       	ret

00008d54 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8d54:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8d56:	ed 91       	ld	r30, X+
    8d58:	fc 91       	ld	r31, X
    8d5a:	11 97       	sbiw	r26, 0x01	; 1
    8d5c:	9f 01       	movw	r18, r30
    8d5e:	2f 5f       	subi	r18, 0xFF	; 255
    8d60:	3f 4f       	sbci	r19, 0xFF	; 255
    8d62:	11 96       	adiw	r26, 0x01	; 1
    8d64:	3c 93       	st	X, r19
    8d66:	2e 93       	st	-X, r18
    8d68:	e4 91       	lpm	r30, Z
    8d6a:	e7 fd       	sbrc	r30, 7
    8d6c:	03 c0       	rjmp	.+6      	; 0x8d74 <ReadVarLen+0x20>
    8d6e:	8e 2f       	mov	r24, r30
    8d70:	90 e0       	ldi	r25, 0x00	; 0
    8d72:	08 95       	ret
    {
       value &= 0x7F;
    8d74:	ef 77       	andi	r30, 0x7F	; 127
    8d76:	8e 2f       	mov	r24, r30
    8d78:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8d7a:	96 95       	lsr	r25
    8d7c:	98 2f       	mov	r25, r24
    8d7e:	88 27       	eor	r24, r24
    8d80:	97 95       	ror	r25
    8d82:	87 95       	ror	r24
    8d84:	2f 5f       	subi	r18, 0xFF	; 255
    8d86:	3f 4f       	sbci	r19, 0xFF	; 255
    8d88:	f9 01       	movw	r30, r18
    8d8a:	31 97       	sbiw	r30, 0x01	; 1
    8d8c:	e4 91       	lpm	r30, Z
    8d8e:	4e 2f       	mov	r20, r30
    8d90:	4f 77       	andi	r20, 0x7F	; 127
    8d92:	84 0f       	add	r24, r20
    8d94:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8d96:	e7 fd       	sbrc	r30, 7
    8d98:	f0 cf       	rjmp	.-32     	; 0x8d7a <ReadVarLen+0x26>
    8d9a:	2d 93       	st	X+, r18
    8d9c:	3c 93       	st	X, r19
    }


    return value;
}
    8d9e:	08 95       	ret

00008da0 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8da0:	ef 92       	push	r14
    8da2:	ff 92       	push	r15
    8da4:	0f 93       	push	r16
    8da6:	1f 93       	push	r17
    8da8:	cf 93       	push	r28
    8daa:	df 93       	push	r29
    8dac:	1f 92       	push	r1
    8dae:	cd b7       	in	r28, 0x3d	; 61
    8db0:	de b7       	in	r29, 0x3e	; 62
    8db2:	7c 01       	movw	r14, r24
    8db4:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8db6:	fc 01       	movw	r30, r24
    8db8:	80 81       	ld	r24, Z
    8dba:	08 2f       	mov	r16, r24
    8dbc:	00 1f       	adc	r16, r16
    8dbe:	00 27       	eor	r16, r16
    8dc0:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8dc2:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8dc4:	9f ef       	ldi	r25, 0xFF	; 255
    8dc6:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8dc8:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8dca:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8dcc:	87 7b       	andi	r24, 0xB7	; 183
    8dce:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8dd0:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8dd2:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8dd4:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8dd6:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8dd8:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8dda:	82 81       	ldd	r24, Z+2	; 0x02
    8ddc:	83 30       	cpi	r24, 0x03	; 3
    8dde:	69 f4       	brne	.+26     	; 0x8dfa <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8de0:	01 11       	cpse	r16, r1
    8de2:	01 c0       	rjmp	.+2      	; 0x8de6 <TriggerCommon+0x46>
    8de4:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8de6:	81 e0       	ldi	r24, 0x01	; 1
    8de8:	91 e0       	ldi	r25, 0x01	; 1
    8dea:	90 93 e5 0c 	sts	0x0CE5, r25
    8dee:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8df2:	81 e0       	ldi	r24, 0x01	; 1
    8df4:	80 93 e3 0c 	sts	0x0CE3, r24
    8df8:	39 c0       	rjmp	.+114    	; 0x8e6c <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8dfa:	84 30       	cpi	r24, 0x04	; 4
    8dfc:	69 f5       	brne	.+90     	; 0x8e58 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8dfe:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8e02:	80 91 70 0d 	lds	r24, 0x0D70
    8e06:	90 91 71 0d 	lds	r25, 0x0D71
    8e0a:	f9 e0       	ldi	r31, 0x09	; 9
    8e0c:	6f 9f       	mul	r22, r31
    8e0e:	80 0d       	add	r24, r0
    8e10:	91 1d       	adc	r25, r1
    8e12:	11 24       	eor	r1, r1
    8e14:	fc 01       	movw	r30, r24
    8e16:	31 96       	adiw	r30, 0x01	; 1
    8e18:	a5 91       	lpm	r26, Z+
    8e1a:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8e1c:	b0 93 ed 0c 	sts	0x0CED, r27
    8e20:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8e24:	ac 01       	movw	r20, r24
    8e26:	49 5f       	subi	r20, 0xF9	; 249
    8e28:	5f 4f       	sbci	r21, 0xFF	; 255
    8e2a:	fa 01       	movw	r30, r20
    8e2c:	65 91       	lpm	r22, Z+
    8e2e:	74 91       	lpm	r23, Z
    8e30:	05 96       	adiw	r24, 0x05	; 5
    8e32:	fc 01       	movw	r30, r24
    8e34:	85 91       	lpm	r24, Z+
    8e36:	94 91       	lpm	r25, Z
    8e38:	68 1b       	sub	r22, r24
    8e3a:	79 0b       	sbc	r23, r25
    8e3c:	70 93 ef 0c 	sts	0x0CEF, r23
    8e40:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8e44:	fa 01       	movw	r30, r20
    8e46:	85 91       	lpm	r24, Z+
    8e48:	94 91       	lpm	r25, Z
    8e4a:	a8 0f       	add	r26, r24
    8e4c:	b9 1f       	adc	r27, r25
    8e4e:	b0 93 f1 0c 	sts	0x0CF1, r27
    8e52:	a0 93 f0 0c 	sts	0x0CF0, r26
    8e56:	05 c0       	rjmp	.+10     	; 0x8e62 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8e58:	60 e0       	ldi	r22, 0x00	; 0
    8e5a:	29 83       	std	Y+1, r18	; 0x01
    8e5c:	0e 94 1f 4a 	call	0x943e	; 0x943e <SetMixerWave>
			SetMixerNote(track->channel,note);
    8e60:	29 81       	ldd	r18, Y+1	; 0x01
    8e62:	62 2f       	mov	r22, r18
    8e64:	f7 01       	movw	r30, r14
    8e66:	82 81       	ldd	r24, Z+2	; 0x02
    8e68:	0e 94 08 4a 	call	0x9410	; 0x9410 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8e6c:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8e6e:	00 23       	and	r16, r16
    8e70:	11 f0       	breq	.+4      	; 0x8e76 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8e72:	11 8b       	std	Z+17, r17	; 0x11
    8e74:	01 c0       	rjmp	.+2      	; 0x8e78 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8e76:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8e78:	e0 91 70 0d 	lds	r30, 0x0D70
    8e7c:	f0 91 71 0d 	lds	r31, 0x0D71
    8e80:	39 e0       	ldi	r19, 0x09	; 9
    8e82:	13 9f       	mul	r17, r19
    8e84:	e0 0d       	add	r30, r0
    8e86:	f1 1d       	adc	r31, r1
    8e88:	11 24       	eor	r1, r1
    8e8a:	33 96       	adiw	r30, 0x03	; 3
    8e8c:	85 91       	lpm	r24, Z+
    8e8e:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8e90:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8e92:	00 97       	sbiw	r24, 0x00	; 0
    8e94:	19 f4       	brne	.+6      	; 0x8e9c <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8e96:	16 8a       	std	Z+22, r1	; 0x16
    8e98:	15 8a       	std	Z+21, r1	; 0x15
    8e9a:	08 c0       	rjmp	.+16     	; 0x8eac <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8e9c:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8e9e:	fc 01       	movw	r30, r24
    8ea0:	24 91       	lpm	r18, Z
    8ea2:	f7 01       	movw	r30, r14
    8ea4:	22 8b       	std	Z+18, r18	; 0x12
    8ea6:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8ea8:	96 8b       	std	Z+22, r25	; 0x16
    8eaa:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8eac:	0f 90       	pop	r0
    8eae:	df 91       	pop	r29
    8eb0:	cf 91       	pop	r28
    8eb2:	1f 91       	pop	r17
    8eb4:	0f 91       	pop	r16
    8eb6:	ff 90       	pop	r15
    8eb8:	ef 90       	pop	r14
    8eba:	08 95       	ret

00008ebc <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8ebc:	cf 93       	push	r28
    8ebe:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8ec0:	e0 91 70 0d 	lds	r30, 0x0D70
    8ec4:	f0 91 71 0d 	lds	r31, 0x0D71
    8ec8:	99 e0       	ldi	r25, 0x09	; 9
    8eca:	89 9f       	mul	r24, r25
    8ecc:	e0 0d       	add	r30, r0
    8ece:	f1 1d       	adc	r31, r1
    8ed0:	11 24       	eor	r1, r1
    8ed2:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8ed4:	e1 30       	cpi	r30, 0x01	; 1
    8ed6:	e9 f0       	breq	.+58     	; 0x8f12 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8ed8:	e2 30       	cpi	r30, 0x02	; 2
    8eda:	e9 f0       	breq	.+58     	; 0x8f16 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8edc:	20 91 12 0d 	lds	r18, 0x0D12
    8ee0:	27 ff       	sbrs	r18, 7
    8ee2:	1d c0       	rjmp	.+58     	; 0x8f1e <TriggerFx+0x62>
    8ee4:	20 91 23 0d 	lds	r18, 0x0D23
    8ee8:	28 13       	cpse	r18, r24
    8eea:	02 c0       	rjmp	.+4      	; 0x8ef0 <TriggerFx+0x34>
    8eec:	41 11       	cpse	r20, r1
    8eee:	17 c0       	rjmp	.+46     	; 0x8f1e <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8ef0:	20 91 29 0d 	lds	r18, 0x0D29
    8ef4:	27 ff       	sbrs	r18, 7
    8ef6:	11 c0       	rjmp	.+34     	; 0x8f1a <TriggerFx+0x5e>
    8ef8:	20 91 3a 0d 	lds	r18, 0x0D3A
    8efc:	28 13       	cpse	r18, r24
    8efe:	02 c0       	rjmp	.+4      	; 0x8f04 <TriggerFx+0x48>
    8f00:	41 11       	cpse	r20, r1
    8f02:	0b c0       	rjmp	.+22     	; 0x8f1a <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8f04:	20 91 26 0d 	lds	r18, 0x0D26
    8f08:	90 91 3d 0d 	lds	r25, 0x0D3D
    8f0c:	92 17       	cp	r25, r18
    8f0e:	28 f4       	brcc	.+10     	; 0x8f1a <TriggerFx+0x5e>
    8f10:	06 c0       	rjmp	.+12     	; 0x8f1e <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8f12:	c3 e0       	ldi	r28, 0x03	; 3
    8f14:	05 c0       	rjmp	.+10     	; 0x8f20 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8f16:	c4 e0       	ldi	r28, 0x04	; 4
    8f18:	03 c0       	rjmp	.+6      	; 0x8f20 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8f1a:	c2 e0       	ldi	r28, 0x02	; 2
    8f1c:	01 c0       	rjmp	.+2      	; 0x8f20 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8f1e:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8f20:	97 e1       	ldi	r25, 0x17	; 23
    8f22:	c9 9f       	mul	r28, r25
    8f24:	e0 01       	movw	r28, r0
    8f26:	11 24       	eor	r1, r1
    8f28:	c5 50       	subi	r28, 0x05	; 5
    8f2a:	d3 4f       	sbci	r29, 0xF3	; 243
    8f2c:	90 e8       	ldi	r25, 0x80	; 128
    8f2e:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8f30:	1e 8a       	std	Y+22, r1	; 0x16
    8f32:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8f34:	20 e5       	ldi	r18, 0x50	; 80
    8f36:	46 2f       	mov	r20, r22
    8f38:	68 2f       	mov	r22, r24
    8f3a:	ce 01       	movw	r24, r28
    8f3c:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8f40:	88 81       	ld	r24, Y
    8f42:	80 62       	ori	r24, 0x20	; 32
    8f44:	88 83       	st	Y, r24
}
    8f46:	df 91       	pop	r29
    8f48:	cf 91       	pop	r28
    8f4a:	08 95       	ret

00008f4c <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8f4c:	cf 93       	push	r28
    8f4e:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8f50:	a8 2f       	mov	r26, r24
    8f52:	b0 e0       	ldi	r27, 0x00	; 0
    8f54:	97 e1       	ldi	r25, 0x17	; 23
    8f56:	89 9f       	mul	r24, r25
    8f58:	f0 01       	movw	r30, r0
    8f5a:	11 24       	eor	r1, r1
    8f5c:	e5 50       	subi	r30, 0x05	; 5
    8f5e:	f3 4f       	sbci	r31, 0xF3	; 243
    8f60:	80 81       	ld	r24, Z
    8f62:	85 ff       	sbrs	r24, 5
    8f64:	02 c0       	rjmp	.+4      	; 0x8f6a <TriggerNote+0x1e>
    8f66:	87 fd       	sbrc	r24, 7
    8f68:	2e c0       	rjmp	.+92     	; 0x8fc6 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8f6a:	21 11       	cpse	r18, r1
    8f6c:	18 c0       	rjmp	.+48     	; 0x8f9e <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8f6e:	97 e1       	ldi	r25, 0x17	; 23
    8f70:	9a 9f       	mul	r25, r26
    8f72:	f0 01       	movw	r30, r0
    8f74:	9b 9f       	mul	r25, r27
    8f76:	f0 0d       	add	r31, r0
    8f78:	11 24       	eor	r1, r1
    8f7a:	e5 50       	subi	r30, 0x05	; 5
    8f7c:	f3 4f       	sbci	r31, 0xF3	; 243
    8f7e:	97 85       	ldd	r25, Z+15	; 0x0f
    8f80:	91 11       	cpse	r25, r1
    8f82:	02 c0       	rjmp	.+4      	; 0x8f88 <TriggerNote+0x3c>
    8f84:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8f86:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8f88:	97 e1       	ldi	r25, 0x17	; 23
    8f8a:	9a 9f       	mul	r25, r26
    8f8c:	f0 01       	movw	r30, r0
    8f8e:	9b 9f       	mul	r25, r27
    8f90:	f0 0d       	add	r31, r0
    8f92:	11 24       	eor	r1, r1
    8f94:	e5 50       	subi	r30, 0x05	; 5
    8f96:	f3 4f       	sbci	r31, 0xF3	; 243
    8f98:	8f 7b       	andi	r24, 0xBF	; 191
    8f9a:	80 83       	st	Z, r24
    8f9c:	14 c0       	rjmp	.+40     	; 0x8fc6 <TriggerNote+0x7a>
    8f9e:	82 2f       	mov	r24, r18
    8fa0:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8fa2:	97 e1       	ldi	r25, 0x17	; 23
    8fa4:	9a 9f       	mul	r25, r26
    8fa6:	e0 01       	movw	r28, r0
    8fa8:	9b 9f       	mul	r25, r27
    8faa:	d0 0d       	add	r29, r0
    8fac:	11 24       	eor	r1, r1
    8fae:	c5 50       	subi	r28, 0x05	; 5
    8fb0:	d3 4f       	sbci	r29, 0xF3	; 243
    8fb2:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8fb4:	1e 8a       	std	Y+22, r1	; 0x16
    8fb6:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8fb8:	48 2f       	mov	r20, r24
    8fba:	ce 01       	movw	r24, r28
    8fbc:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8fc0:	88 81       	ld	r24, Y
    8fc2:	80 62       	ori	r24, 0x20	; 32
    8fc4:	88 83       	st	Y, r24
		}

	}
}
    8fc6:	df 91       	pop	r29
    8fc8:	cf 91       	pop	r28
    8fca:	08 95       	ret

00008fcc <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8fcc:	6f 92       	push	r6
    8fce:	7f 92       	push	r7
    8fd0:	8f 92       	push	r8
    8fd2:	9f 92       	push	r9
    8fd4:	af 92       	push	r10
    8fd6:	bf 92       	push	r11
    8fd8:	cf 92       	push	r12
    8fda:	df 92       	push	r13
    8fdc:	ef 92       	push	r14
    8fde:	ff 92       	push	r15
    8fe0:	0f 93       	push	r16
    8fe2:	1f 93       	push	r17
    8fe4:	cf 93       	push	r28
    8fe6:	df 93       	push	r29
    8fe8:	cb ef       	ldi	r28, 0xFB	; 251
    8fea:	dc e0       	ldi	r29, 0x0C	; 12
    8fec:	00 ed       	ldi	r16, 0xD0	; 208
    8fee:	1c e0       	ldi	r17, 0x0C	; 12
    8ff0:	d8 01       	movw	r26, r16
    8ff2:	9e 01       	movw	r18, r28
    8ff4:	40 e0       	ldi	r20, 0x00	; 0
    8ff6:	50 e0       	ldi	r21, 0x00	; 0
    8ff8:	ca 01       	movw	r24, r20
    8ffa:	85 50       	subi	r24, 0x05	; 5
    8ffc:	93 4f       	sbci	r25, 0xF3	; 243
    8ffe:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    9000:	fc 01       	movw	r30, r24
    9002:	87 85       	ldd	r24, Z+15	; 0x0f
    9004:	88 23       	and	r24, r24
    9006:	91 f0       	breq	.+36     	; 0x902c <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    9008:	66 85       	ldd	r22, Z+14	; 0x0e
    900a:	99 27       	eor	r25, r25
    900c:	87 fd       	sbrc	r24, 7
    900e:	90 95       	com	r25
    9010:	86 0f       	add	r24, r22
    9012:	91 1d       	adc	r25, r1
    9014:	8f 3f       	cpi	r24, 0xFF	; 255
    9016:	91 05       	cpc	r25, r1
    9018:	19 f0       	breq	.+6      	; 0x9020 <ProcessMusic+0x54>
    901a:	14 f0       	brlt	.+4      	; 0x9020 <ProcessMusic+0x54>
    901c:	8f ef       	ldi	r24, 0xFF	; 255
    901e:	90 e0       	ldi	r25, 0x00	; 0
    9020:	97 ff       	sbrs	r25, 7
    9022:	02 c0       	rjmp	.+4      	; 0x9028 <ProcessMusic+0x5c>
    9024:	80 e0       	ldi	r24, 0x00	; 0
    9026:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9028:	f6 01       	movw	r30, r12
    902a:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    902c:	f9 01       	movw	r30, r18
    902e:	f0 80       	ld	r15, Z
    9030:	f3 fe       	sbrs	r15, 3
    9032:	2a c0       	rjmp	.+84     	; 0x9088 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9034:	65 81       	ldd	r22, Z+5	; 0x05
    9036:	76 81       	ldd	r23, Z+6	; 0x06
    9038:	11 96       	adiw	r26, 0x01	; 1
    903a:	8d 91       	ld	r24, X+
    903c:	9c 91       	ld	r25, X
    903e:	12 97       	sbiw	r26, 0x02	; 2
    9040:	86 0f       	add	r24, r22
    9042:	97 1f       	adc	r25, r23
    9044:	12 96       	adiw	r26, 0x02	; 2
    9046:	9c 93       	st	X, r25
    9048:	8e 93       	st	-X, r24
    904a:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    904c:	f6 01       	movw	r30, r12
    904e:	e7 80       	ldd	r14, Z+7	; 0x07
    9050:	ee 2d       	mov	r30, r14
    9052:	f0 e0       	ldi	r31, 0x00	; 0
    9054:	ee 0f       	add	r30, r30
    9056:	ff 1f       	adc	r31, r31
    9058:	e8 5f       	subi	r30, 0xF8	; 248
    905a:	fa 46       	sbci	r31, 0x6A	; 106
    905c:	c5 90       	lpm	r12, Z+
    905e:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    9060:	16 16       	cp	r1, r22
    9062:	17 06       	cpc	r1, r23
    9064:	24 f4       	brge	.+8      	; 0x906e <ProcessMusic+0xa2>
    9066:	8c 15       	cp	r24, r12
    9068:	9d 05       	cpc	r25, r13
    906a:	30 f4       	brcc	.+12     	; 0x9078 <ProcessMusic+0xac>
    906c:	0d c0       	rjmp	.+26     	; 0x9088 <ProcessMusic+0xbc>
    906e:	67 2b       	or	r22, r23
    9070:	59 f0       	breq	.+22     	; 0x9088 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    9072:	c8 16       	cp	r12, r24
    9074:	d9 06       	cpc	r13, r25
    9076:	40 f0       	brcs	.+16     	; 0x9088 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    9078:	12 96       	adiw	r26, 0x02	; 2
    907a:	dc 92       	st	X, r13
    907c:	ce 92       	st	-X, r12
    907e:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9080:	8f 2d       	mov	r24, r15
    9082:	87 7f       	andi	r24, 0xF7	; 247
    9084:	f9 01       	movw	r30, r18
    9086:	80 83       	st	Z, r24
    9088:	49 5e       	subi	r20, 0xE9	; 233
    908a:	5f 4f       	sbci	r21, 0xFF	; 255
    908c:	29 5e       	subi	r18, 0xE9	; 233
    908e:	3f 4f       	sbci	r19, 0xFF	; 255
    9090:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9092:	43 37       	cpi	r20, 0x73	; 115
    9094:	51 05       	cpc	r21, r1
    9096:	09 f0       	breq	.+2      	; 0x909a <ProcessMusic+0xce>
    9098:	af cf       	rjmp	.-162    	; 0x8ff8 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    909a:	80 91 ce 0c 	lds	r24, 0x0CCE
    909e:	88 23       	and	r24, r24
    90a0:	09 f4       	brne	.+2      	; 0x90a4 <ProcessMusic+0xd8>
    90a2:	cc c0       	rjmp	.+408    	; 0x923c <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    90a4:	57 e1       	ldi	r21, 0x17	; 23
    90a6:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    90a8:	80 91 6e 0d 	lds	r24, 0x0D6E
    90ac:	90 91 6f 0d 	lds	r25, 0x0D6F
    90b0:	20 91 74 0d 	lds	r18, 0x0D74
    90b4:	30 91 75 0d 	lds	r19, 0x0D75
    90b8:	82 17       	cp	r24, r18
    90ba:	93 07       	cpc	r25, r19
    90bc:	09 f0       	breq	.+2      	; 0x90c0 <ProcessMusic+0xf4>
    90be:	b9 c0       	rjmp	.+370    	; 0x9232 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    90c0:	20 91 77 0d 	lds	r18, 0x0D77
    90c4:	30 91 78 0d 	lds	r19, 0x0D78
    90c8:	b9 01       	movw	r22, r18
    90ca:	6f 5f       	subi	r22, 0xFF	; 255
    90cc:	7f 4f       	sbci	r23, 0xFF	; 255
    90ce:	70 93 78 0d 	sts	0x0D78, r23
    90d2:	60 93 77 0d 	sts	0x0D77, r22
    90d6:	f9 01       	movw	r30, r18
    90d8:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    90da:	4f 3f       	cpi	r20, 0xFF	; 255
    90dc:	79 f5       	brne	.+94     	; 0x913c <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    90de:	a9 01       	movw	r20, r18
    90e0:	4e 5f       	subi	r20, 0xFE	; 254
    90e2:	5f 4f       	sbci	r21, 0xFF	; 255
    90e4:	50 93 78 0d 	sts	0x0D78, r21
    90e8:	40 93 77 0d 	sts	0x0D77, r20
    90ec:	fb 01       	movw	r30, r22
    90ee:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    90f0:	6f 32       	cpi	r22, 0x2F	; 47
    90f2:	19 f4       	brne	.+6      	; 0x90fa <ProcessMusic+0x12e>
						playSong=false;
    90f4:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    90f8:	9c c0       	rjmp	.+312    	; 0x9232 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    90fa:	66 30       	cpi	r22, 0x06	; 6
    90fc:	09 f0       	breq	.+2      	; 0x9100 <ProcessMusic+0x134>
    90fe:	8c c0       	rjmp	.+280    	; 0x9218 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    9100:	fa 01       	movw	r30, r20
    9102:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    9104:	c9 01       	movw	r24, r18
    9106:	04 96       	adiw	r24, 0x04	; 4
    9108:	90 93 78 0d 	sts	0x0D78, r25
    910c:	80 93 77 0d 	sts	0x0D77, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    9110:	f9 01       	movw	r30, r18
    9112:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    9114:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    9116:	e3 35       	cpi	r30, 0x53	; 83
    9118:	29 f4       	brne	.+10     	; 0x9124 <ProcessMusic+0x158>
							loopStart=songPos;
    911a:	90 93 7a 0d 	sts	0x0D7A, r25
    911e:	80 93 79 0d 	sts	0x0D79, r24
    9122:	7a c0       	rjmp	.+244    	; 0x9218 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    9124:	e5 34       	cpi	r30, 0x45	; 69
    9126:	09 f0       	breq	.+2      	; 0x912a <ProcessMusic+0x15e>
    9128:	77 c0       	rjmp	.+238    	; 0x9218 <ProcessMusic+0x24c>
							songPos=loopStart;
    912a:	80 91 79 0d 	lds	r24, 0x0D79
    912e:	90 91 7a 0d 	lds	r25, 0x0D7A
    9132:	90 93 78 0d 	sts	0x0D78, r25
    9136:	80 93 77 0d 	sts	0x0D77, r24
    913a:	6e c0       	rjmp	.+220    	; 0x9218 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    913c:	47 fd       	sbrc	r20, 7
    913e:	40 93 72 0d 	sts	0x0D72, r20
					channel=lastStatus&0x0f;
    9142:	90 91 72 0d 	lds	r25, 0x0D72
    9146:	89 2f       	mov	r24, r25
    9148:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    914a:	47 ff       	sbrs	r20, 7
    914c:	08 c0       	rjmp	.+16     	; 0x915e <ProcessMusic+0x192>
    914e:	2e 5f       	subi	r18, 0xFE	; 254
    9150:	3f 4f       	sbci	r19, 0xFF	; 255
    9152:	30 93 78 0d 	sts	0x0D78, r19
    9156:	20 93 77 0d 	sts	0x0D77, r18
    915a:	fb 01       	movw	r30, r22
    915c:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    915e:	90 7f       	andi	r25, 0xF0	; 240
    9160:	90 3b       	cpi	r25, 0xB0	; 176
    9162:	e1 f0       	breq	.+56     	; 0x919c <ProcessMusic+0x1d0>
    9164:	90 3c       	cpi	r25, 0xC0	; 192
    9166:	09 f4       	brne	.+2      	; 0x916a <ProcessMusic+0x19e>
    9168:	51 c0       	rjmp	.+162    	; 0x920c <ProcessMusic+0x240>
    916a:	90 39       	cpi	r25, 0x90	; 144
    916c:	09 f0       	breq	.+2      	; 0x9170 <ProcessMusic+0x1a4>
    916e:	54 c0       	rjmp	.+168    	; 0x9218 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    9170:	e0 91 77 0d 	lds	r30, 0x0D77
    9174:	f0 91 78 0d 	lds	r31, 0x0D78
    9178:	9f 01       	movw	r18, r30
    917a:	2f 5f       	subi	r18, 0xFF	; 255
    917c:	3f 4f       	sbci	r19, 0xFF	; 255
    917e:	30 93 78 0d 	sts	0x0D78, r19
    9182:	20 93 77 0d 	sts	0x0D77, r18
    9186:	24 91       	lpm	r18, Z
    9188:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    918a:	f8 9e       	mul	r15, r24
    918c:	f0 01       	movw	r30, r0
    918e:	11 24       	eor	r1, r1
    9190:	e5 50       	subi	r30, 0x05	; 5
    9192:	f3 4f       	sbci	r31, 0xF3	; 243
    9194:	60 89       	ldd	r22, Z+16	; 0x10
    9196:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <TriggerNote>
    919a:	3e c0       	rjmp	.+124    	; 0x9218 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    919c:	e0 91 77 0d 	lds	r30, 0x0D77
    91a0:	f0 91 78 0d 	lds	r31, 0x0D78
    91a4:	9f 01       	movw	r18, r30
    91a6:	2f 5f       	subi	r18, 0xFF	; 255
    91a8:	3f 4f       	sbci	r19, 0xFF	; 255
    91aa:	30 93 78 0d 	sts	0x0D78, r19
    91ae:	20 93 77 0d 	sts	0x0D77, r18
    91b2:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    91b4:	47 30       	cpi	r20, 0x07	; 7
    91b6:	49 f4       	brne	.+18     	; 0x91ca <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    91b8:	f8 9e       	mul	r15, r24
    91ba:	d0 01       	movw	r26, r0
    91bc:	11 24       	eor	r1, r1
    91be:	a5 50       	subi	r26, 0x05	; 5
    91c0:	b3 4f       	sbci	r27, 0xF3	; 243
    91c2:	ee 0f       	add	r30, r30
    91c4:	1c 96       	adiw	r26, 0x0c	; 12
    91c6:	ec 93       	st	X, r30
    91c8:	27 c0       	rjmp	.+78     	; 0x9218 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    91ca:	4b 30       	cpi	r20, 0x0B	; 11
    91cc:	49 f4       	brne	.+18     	; 0x91e0 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    91ce:	f8 9e       	mul	r15, r24
    91d0:	d0 01       	movw	r26, r0
    91d2:	11 24       	eor	r1, r1
    91d4:	a5 50       	subi	r26, 0x05	; 5
    91d6:	b3 4f       	sbci	r27, 0xF3	; 243
    91d8:	ee 0f       	add	r30, r30
    91da:	13 96       	adiw	r26, 0x03	; 3
    91dc:	ec 93       	st	X, r30
    91de:	1c c0       	rjmp	.+56     	; 0x9218 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    91e0:	4c 35       	cpi	r20, 0x5C	; 92
    91e2:	49 f4       	brne	.+18     	; 0x91f6 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    91e4:	f8 9e       	mul	r15, r24
    91e6:	d0 01       	movw	r26, r0
    91e8:	11 24       	eor	r1, r1
    91ea:	a5 50       	subi	r26, 0x05	; 5
    91ec:	b3 4f       	sbci	r27, 0xF3	; 243
    91ee:	ee 0f       	add	r30, r30
    91f0:	1a 96       	adiw	r26, 0x0a	; 10
    91f2:	ec 93       	st	X, r30
    91f4:	11 c0       	rjmp	.+34     	; 0x9218 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    91f6:	44 36       	cpi	r20, 0x64	; 100
    91f8:	79 f4       	brne	.+30     	; 0x9218 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    91fa:	f8 9e       	mul	r15, r24
    91fc:	d0 01       	movw	r26, r0
    91fe:	11 24       	eor	r1, r1
    9200:	a5 50       	subi	r26, 0x05	; 5
    9202:	b3 4f       	sbci	r27, 0xF3	; 243
    9204:	ee 0f       	add	r30, r30
    9206:	1b 96       	adiw	r26, 0x0b	; 11
    9208:	ec 93       	st	X, r30
    920a:	06 c0       	rjmp	.+12     	; 0x9218 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    920c:	f8 9e       	mul	r15, r24
    920e:	f0 01       	movw	r30, r0
    9210:	11 24       	eor	r1, r1
    9212:	e5 50       	subi	r30, 0x05	; 5
    9214:	f3 4f       	sbci	r31, 0xF3	; 243
    9216:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    9218:	87 e7       	ldi	r24, 0x77	; 119
    921a:	9d e0       	ldi	r25, 0x0D	; 13
    921c:	0e 94 aa 46 	call	0x8d54	; 0x8d54 <ReadVarLen>
    9220:	90 93 75 0d 	sts	0x0D75, r25
    9224:	80 93 74 0d 	sts	0x0D74, r24
				currDeltaTime=0;
    9228:	10 92 6f 0d 	sts	0x0D6F, r1
    922c:	10 92 6e 0d 	sts	0x0D6E, r1
    9230:	3b cf       	rjmp	.-394    	; 0x90a8 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    9232:	01 96       	adiw	r24, 0x01	; 1
    9234:	90 93 6f 0d 	sts	0x0D6F, r25
    9238:	80 93 6e 0d 	sts	0x0D6E, r24
    923c:	94 e0       	ldi	r25, 0x04	; 4
    923e:	a9 2e       	mov	r10, r25
    9240:	9d e0       	ldi	r25, 0x0D	; 13
    9242:	b9 2e       	mov	r11, r25
    9244:	2e e0       	ldi	r18, 0x0E	; 14
    9246:	c2 2e       	mov	r12, r18
    9248:	2d e0       	ldi	r18, 0x0D	; 13
    924a:	d2 2e       	mov	r13, r18
    924c:	3f e0       	ldi	r19, 0x0F	; 15
    924e:	e3 2e       	mov	r14, r19
    9250:	3d e0       	ldi	r19, 0x0D	; 13
    9252:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9254:	66 24       	eor	r6, r6
    9256:	6a 94       	dec	r6
    9258:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    925a:	88 81       	ld	r24, Y
    925c:	85 ff       	sbrs	r24, 5
    925e:	42 c0       	rjmp	.+132    	; 0x92e4 <ProcessMusic+0x318>
    9260:	2d 89       	ldd	r18, Y+21	; 0x15
    9262:	3e 89       	ldd	r19, Y+22	; 0x16
    9264:	23 2b       	or	r18, r19
    9266:	09 f4       	brne	.+2      	; 0x926a <ProcessMusic+0x29e>
    9268:	3d c0       	rjmp	.+122    	; 0x92e4 <ProcessMusic+0x318>
    926a:	86 fd       	sbrc	r24, 6
    926c:	3b c0       	rjmp	.+118    	; 0x92e4 <ProcessMusic+0x318>
    926e:	47 01       	movw	r8, r14
    9270:	f2 e0       	ldi	r31, 0x02	; 2
    9272:	8f 1a       	sub	r8, r31
    9274:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    9276:	d6 01       	movw	r26, r12
    9278:	9c 91       	ld	r25, X
    927a:	f4 01       	movw	r30, r8
    927c:	80 81       	ld	r24, Z
    927e:	98 13       	cpse	r25, r24
    9280:	2e c0       	rjmp	.+92     	; 0x92de <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    9282:	ed 89       	ldd	r30, Y+21	; 0x15
    9284:	fe 89       	ldd	r31, Y+22	; 0x16
    9286:	bf 01       	movw	r22, r30
    9288:	6f 5f       	subi	r22, 0xFF	; 255
    928a:	7f 4f       	sbci	r23, 0xFF	; 255
    928c:	7e 8b       	std	Y+22, r23	; 0x16
    928e:	6d 8b       	std	Y+21, r22	; 0x15
    9290:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    9292:	8f 3f       	cpi	r24, 0xFF	; 255
    9294:	31 f4       	brne	.+12     	; 0x92a2 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9296:	88 81       	ld	r24, Y
    9298:	8f 77       	andi	r24, 0x7F	; 127
    929a:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    929c:	1e 8a       	std	Y+22, r1	; 0x16
    929e:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    92a0:	1e c0       	rjmp	.+60     	; 0x92de <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    92a2:	9f 01       	movw	r18, r30
    92a4:	2e 5f       	subi	r18, 0xFE	; 254
    92a6:	3f 4f       	sbci	r19, 0xFF	; 255
    92a8:	3e 8b       	std	Y+22, r19	; 0x16
    92aa:	2d 8b       	std	Y+21, r18	; 0x15
    92ac:	fb 01       	movw	r30, r22
    92ae:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    92b0:	e8 2f       	mov	r30, r24
    92b2:	f0 e0       	ldi	r31, 0x00	; 0
    92b4:	ee 0f       	add	r30, r30
    92b6:	ff 1f       	adc	r31, r31
    92b8:	ee 52       	subi	r30, 0x2E	; 46
    92ba:	ff 4f       	sbci	r31, 0xFF	; 255
    92bc:	25 91       	lpm	r18, Z+
    92be:	34 91       	lpm	r19, Z
    92c0:	ce 01       	movw	r24, r28
    92c2:	f9 01       	movw	r30, r18
    92c4:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    92c6:	ed 89       	ldd	r30, Y+21	; 0x15
    92c8:	fe 89       	ldd	r31, Y+22	; 0x16
    92ca:	cf 01       	movw	r24, r30
    92cc:	01 96       	adiw	r24, 0x01	; 1
    92ce:	9e 8b       	std	Y+22, r25	; 0x16
    92d0:	8d 8b       	std	Y+21, r24	; 0x15
    92d2:	e4 91       	lpm	r30, Z
    92d4:	d4 01       	movw	r26, r8
    92d6:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    92d8:	f6 01       	movw	r30, r12
    92da:	10 82       	st	Z, r1
    92dc:	cc cf       	rjmp	.-104    	; 0x9276 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    92de:	9f 5f       	subi	r25, 0xFF	; 255
    92e0:	d6 01       	movw	r26, r12
    92e2:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    92e4:	98 81       	ld	r25, Y
    92e6:	95 ff       	sbrs	r25, 5
    92e8:	6c c0       	rjmp	.+216    	; 0x93c2 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    92ea:	f7 01       	movw	r30, r14
    92ec:	80 81       	ld	r24, Z
    92ee:	8f 3f       	cpi	r24, 0xFF	; 255
    92f0:	11 f0       	breq	.+4      	; 0x92f6 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    92f2:	8f 5f       	subi	r24, 0xFF	; 255
    92f4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    92f6:	97 fd       	sbrc	r25, 7
    92f8:	04 c0       	rjmp	.+8      	; 0x9302 <ProcessMusic+0x336>
    92fa:	f7 01       	movw	r30, r14
    92fc:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    92fe:	90 81       	ld	r25, Z
    9300:	01 c0       	rjmp	.+2      	; 0x9304 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    9302:	9f ef       	ldi	r25, 0xFF	; 255
    9304:	f7 01       	movw	r30, r14
    9306:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    9308:	80 81       	ld	r24, Z
    930a:	88 23       	and	r24, r24
    930c:	09 f4       	brne	.+2      	; 0x9310 <ProcessMusic+0x344>
    930e:	4e c0       	rjmp	.+156    	; 0x93ac <ProcessMusic+0x3e0>
    9310:	31 96       	adiw	r30, 0x01	; 1
    9312:	50 81       	ld	r21, Z
    9314:	55 23       	and	r21, r21
    9316:	09 f4       	brne	.+2      	; 0x931a <ProcessMusic+0x34e>
    9318:	49 c0       	rjmp	.+146    	; 0x93ac <ProcessMusic+0x3e0>
    931a:	99 23       	and	r25, r25
    931c:	09 f4       	brne	.+2      	; 0x9320 <ProcessMusic+0x354>
    931e:	46 c0       	rjmp	.+140    	; 0x93ac <ProcessMusic+0x3e0>
    9320:	40 91 73 0d 	lds	r20, 0x0D73
    9324:	44 23       	and	r20, r20
    9326:	09 f4       	brne	.+2      	; 0x932a <ProcessMusic+0x35e>
    9328:	41 c0       	rjmp	.+130    	; 0x93ac <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    932a:	89 9f       	mul	r24, r25
    932c:	c0 01       	movw	r24, r0
    932e:	11 24       	eor	r1, r1
    9330:	93 95       	inc	r25
				uVol>>=8;
    9332:	89 2f       	mov	r24, r25
    9334:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    9336:	58 9f       	mul	r21, r24
    9338:	90 01       	movw	r18, r0
    933a:	59 9f       	mul	r21, r25
    933c:	30 0d       	add	r19, r0
    933e:	11 24       	eor	r1, r1
    9340:	c9 01       	movw	r24, r18
    9342:	93 95       	inc	r25
				uVol>>=8;
    9344:	89 2f       	mov	r24, r25
    9346:	99 27       	eor	r25, r25
    9348:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    934a:	50 81       	ld	r21, Z
    934c:	58 9f       	mul	r21, r24
    934e:	90 01       	movw	r18, r0
    9350:	59 9f       	mul	r21, r25
    9352:	30 0d       	add	r19, r0
    9354:	11 24       	eor	r1, r1
    9356:	33 95       	inc	r19
					uVol>>=8;
    9358:	23 2f       	mov	r18, r19
    935a:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    935c:	42 9f       	mul	r20, r18
    935e:	c0 01       	movw	r24, r0
    9360:	43 9f       	mul	r20, r19
    9362:	90 0d       	add	r25, r0
    9364:	11 24       	eor	r1, r1
    9366:	93 95       	inc	r25
				uVol>>=8;
    9368:	89 2f       	mov	r24, r25
    936a:	99 27       	eor	r25, r25
    936c:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    936e:	20 81       	ld	r18, Z
    9370:	22 23       	and	r18, r18
    9372:	f1 f0       	breq	.+60     	; 0x93b0 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9374:	d5 01       	movw	r26, r10
    9376:	ec 91       	ld	r30, X
    9378:	f0 e0       	ldi	r31, 0x00	; 0
    937a:	e0 50       	subi	r30, 0x00	; 0
    937c:	f9 46       	sbci	r31, 0x69	; 105
    937e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9380:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9382:	2e 9f       	mul	r18, r30
    9384:	f0 01       	movw	r30, r0
    9386:	11 24       	eor	r1, r1
    9388:	f3 95       	inc	r31
					tVol>>=8;
    938a:	ef 2f       	mov	r30, r31
    938c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    938e:	a3 01       	movw	r20, r6
    9390:	4e 1b       	sub	r20, r30
    9392:	5f 0b       	sbc	r21, r31
    9394:	48 9f       	mul	r20, r24
    9396:	90 01       	movw	r18, r0
    9398:	49 9f       	mul	r20, r25
    939a:	30 0d       	add	r19, r0
    939c:	58 9f       	mul	r21, r24
    939e:	30 0d       	add	r19, r0
    93a0:	11 24       	eor	r1, r1
    93a2:	c9 01       	movw	r24, r18
    93a4:	93 95       	inc	r25
					uVol>>=8;
    93a6:	89 2f       	mov	r24, r25
    93a8:	99 27       	eor	r25, r25
    93aa:	02 c0       	rjmp	.+4      	; 0x93b0 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    93ac:	80 e0       	ldi	r24, 0x00	; 0
    93ae:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    93b0:	f5 01       	movw	r30, r10
    93b2:	30 81       	ld	r19, Z
    93b4:	f7 01       	movw	r30, r14
    93b6:	39 97       	sbiw	r30, 0x09	; 9
    93b8:	20 81       	ld	r18, Z
    93ba:	23 0f       	add	r18, r19
    93bc:	d5 01       	movw	r26, r10
    93be:	2c 93       	st	X, r18
    93c0:	02 c0       	rjmp	.+4      	; 0x93c6 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    93c2:	80 e0       	ldi	r24, 0x00	; 0
    93c4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    93c6:	f8 01       	movw	r30, r16
    93c8:	80 83       	st	Z, r24
    93ca:	67 96       	adiw	r28, 0x17	; 23
    93cc:	0a 5f       	subi	r16, 0xFA	; 250
    93ce:	1f 4f       	sbci	r17, 0xFF	; 255
    93d0:	f7 e1       	ldi	r31, 0x17	; 23
    93d2:	af 0e       	add	r10, r31
    93d4:	b1 1c       	adc	r11, r1
    93d6:	87 e1       	ldi	r24, 0x17	; 23
    93d8:	c8 0e       	add	r12, r24
    93da:	d1 1c       	adc	r13, r1
    93dc:	97 e1       	ldi	r25, 0x17	; 23
    93de:	e9 0e       	add	r14, r25
    93e0:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    93e2:	ad e0       	ldi	r26, 0x0D	; 13
    93e4:	ce 36       	cpi	r28, 0x6E	; 110
    93e6:	da 07       	cpc	r29, r26
    93e8:	09 f0       	breq	.+2      	; 0x93ec <ProcessMusic+0x420>
    93ea:	37 cf       	rjmp	.-402    	; 0x925a <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    93ec:	df 91       	pop	r29
    93ee:	cf 91       	pop	r28
    93f0:	1f 91       	pop	r17
    93f2:	0f 91       	pop	r16
    93f4:	ff 90       	pop	r15
    93f6:	ef 90       	pop	r14
    93f8:	df 90       	pop	r13
    93fa:	cf 90       	pop	r12
    93fc:	bf 90       	pop	r11
    93fe:	af 90       	pop	r10
    9400:	9f 90       	pop	r9
    9402:	8f 90       	pop	r8
    9404:	7f 90       	pop	r7
    9406:	6f 90       	pop	r6
    9408:	08 95       	ret

0000940a <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    940a:	80 93 73 0d 	sts	0x0D73, r24
    940e:	08 95       	ret

00009410 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9410:	99 27       	eor	r25, r25
	clr r23
    9412:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9414:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    9416:	09 f4       	brne	.+2      	; 0x941a <set_note_waves>
		ret
    9418:	08 95       	ret

0000941a <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    941a:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    941c:	f5 e9       	ldi	r31, 0x95	; 149
	lsl r22
    941e:	66 0f       	add	r22, r22
	rol r23
    9420:	77 1f       	adc	r23, r23
	add ZL,r22
    9422:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9424:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    9426:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    9428:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    942a:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    942c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    942e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9430:	28 9f       	mul	r18, r24
	add ZL,r0
    9432:	e0 0d       	add	r30, r0
	adc ZH,r1
    9434:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    9436:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    9438:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    943a:	11 24       	eor	r1, r1
	

	ret
    943c:	08 95       	ret

0000943e <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    943e:	99 27       	eor	r25, r25
	clr r23
    9440:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9442:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    9444:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    9446:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    9448:	28 9f       	mul	r18, r24
	add ZL,r0
    944a:	e0 0d       	add	r30, r0
	adc ZH,r1
    944c:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    944e:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9450:	31 f4       	brne	.+12     	; 0x945e <smw1>
	lds r22,tr4_params
    9452:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    9456:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    9458:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    945c:	0b c0       	rjmp	.+22     	; 0x9474 <esmw>

0000945e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    945e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9460:	31 f4       	brne	.+12     	; 0x946e <smw2>
	lds r22,tr4_params
    9462:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    9466:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    9468:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    946c:	03 c0       	rjmp	.+6      	; 0x9474 <esmw>

0000946e <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    946e:	77 e9       	ldi	r23, 0x97	; 151
	add r23,r22
    9470:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9472:	75 83       	std	Z+5, r23	; 0x05

00009474 <esmw>:

esmw:
	clr r1	
    9474:	11 24       	eor	r1, r1
	ret
    9476:	08 95       	ret
	...

00009500 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9500:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9502:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    9506:	08 95       	ret

00009508 <steptable>:
    9508:	22 00       	.word	0x0022	; ????
    950a:	24 00       	.word	0x0024	; ????
    950c:	26 00       	.word	0x0026	; ????
    950e:	28 00       	.word	0x0028	; ????
    9510:	2b 00       	.word	0x002b	; ????
    9512:	2d 00       	.word	0x002d	; ????
    9514:	30 00       	.word	0x0030	; ????
    9516:	33 00       	.word	0x0033	; ????
    9518:	36 00       	.word	0x0036	; ????
    951a:	39 00       	.word	0x0039	; ????
    951c:	3d 00       	.word	0x003d	; ????
    951e:	40 00       	.word	0x0040	; ????
    9520:	44 00       	.word	0x0044	; ????
    9522:	48 00       	.word	0x0048	; ????
    9524:	4c 00       	.word	0x004c	; ????
    9526:	51 00       	.word	0x0051	; ????
    9528:	56 00       	.word	0x0056	; ????
    952a:	5b 00       	.word	0x005b	; ????
    952c:	60 00       	.word	0x0060	; ????
    952e:	66 00       	.word	0x0066	; ????
    9530:	6c 00       	.word	0x006c	; ????
    9532:	73 00       	.word	0x0073	; ????
    9534:	79 00       	.word	0x0079	; ????
    9536:	81 00       	.word	0x0081	; ????
    9538:	88 00       	.word	0x0088	; ????
    953a:	90 00       	.word	0x0090	; ????
    953c:	99 00       	.word	0x0099	; ????
    953e:	a2 00       	.word	0x00a2	; ????
    9540:	ac 00       	.word	0x00ac	; ????
    9542:	b6 00       	.word	0x00b6	; ????
    9544:	c1 00       	.word	0x00c1	; ????
    9546:	cc 00       	.word	0x00cc	; ????
    9548:	d8 00       	.word	0x00d8	; ????
    954a:	e5 00       	.word	0x00e5	; ????
    954c:	f3 00       	.word	0x00f3	; ????
    954e:	01 01       	movw	r0, r2
    9550:	10 01       	movw	r2, r0
    9552:	21 01       	movw	r4, r2
    9554:	32 01       	movw	r6, r4
    9556:	44 01       	movw	r8, r8
    9558:	57 01       	movw	r10, r14
    955a:	6c 01       	movw	r12, r24
    955c:	81 01       	movw	r16, r2
    955e:	98 01       	movw	r18, r16
    9560:	b0 01       	movw	r22, r0
    9562:	ca 01       	movw	r24, r20
    9564:	e5 01       	movw	r28, r10
    9566:	02 02       	muls	r16, r18
    9568:	21 02       	muls	r18, r17
    956a:	41 02       	muls	r20, r17
    956c:	64 02       	muls	r22, r20
    956e:	88 02       	muls	r24, r24
    9570:	ae 02       	muls	r26, r30
    9572:	d7 02       	muls	r29, r23
    9574:	03 03       	mulsu	r16, r19
    9576:	30 03       	mulsu	r19, r16
    9578:	61 03       	mulsu	r22, r17
    957a:	94 03       	fmuls	r17, r20
    957c:	cb 03       	fmulsu	r20, r19
    957e:	05 04       	cpc	r0, r5
    9580:	42 04       	cpc	r4, r2
    9582:	83 04       	cpc	r8, r3
    9584:	c7 04       	cpc	r12, r7
    9586:	10 05       	cpc	r17, r0
    9588:	5d 05       	cpc	r21, r13
    958a:	af 05       	cpc	r26, r15
    958c:	05 06       	cpc	r0, r21
    958e:	61 06       	cpc	r6, r17
    9590:	c2 06       	cpc	r12, r18
    9592:	29 07       	cpc	r18, r25
    9594:	96 07       	cpc	r25, r22
    9596:	09 08       	sbc	r0, r9
    9598:	83 08       	sbc	r8, r3
    959a:	05 09       	sbc	r16, r5
    959c:	8e 09       	sbc	r24, r14
    959e:	20 0a       	sbc	r2, r16
    95a0:	ba 0a       	sbc	r11, r26
    95a2:	5d 0b       	sbc	r21, r29
    95a4:	0a 0c       	add	r0, r10
    95a6:	c1 0c       	add	r12, r1
    95a8:	84 0d       	add	r24, r4
    95aa:	51 0e       	add	r5, r17
    95ac:	2b 0f       	add	r18, r27
    95ae:	12 10       	cpse	r1, r2
    95b0:	07 11       	cpse	r16, r7
    95b2:	0a 12       	cpse	r0, r26
    95b4:	1d 13       	cpse	r17, r29
    95b6:	40 14       	cp	r4, r0
    95b8:	74 15       	cp	r23, r4
    95ba:	ba 16       	cp	r11, r26
    95bc:	14 18       	sub	r1, r4
    95be:	83 19       	sub	r24, r3
    95c0:	07 1b       	sub	r16, r23
    95c2:	a3 1c       	adc	r10, r3
    95c4:	57 1e       	adc	r5, r23
    95c6:	24 20       	and	r2, r4
    95c8:	0e 22       	and	r0, r30
    95ca:	14 24       	eor	r1, r4
    95cc:	39 26       	eor	r3, r25
    95ce:	7f 28       	or	r7, r15
    95d0:	e8 2a       	or	r14, r24
    95d2:	75 2d       	mov	r23, r5
    95d4:	29 30       	cpi	r18, 0x09	; 9
    95d6:	06 33       	cpi	r16, 0x36	; 54
    95d8:	0f 36       	cpi	r16, 0x6F	; 111
    95da:	45 39       	cpi	r20, 0x95	; 149
    95dc:	ad 3c       	cpi	r26, 0xCD	; 205
    95de:	49 40       	sbci	r20, 0x09	; 9
    95e0:	1b 44       	sbci	r17, 0x4B	; 75
    95e2:	28 48       	sbci	r18, 0x88	; 136
    95e4:	73 4c       	sbci	r23, 0xC3	; 195
    95e6:	fe 50       	subi	r31, 0x0E	; 14
    95e8:	cf 55       	subi	r28, 0x5F	; 95
    95ea:	ea 5a       	subi	r30, 0xAA	; 170
    95ec:	51 60       	ori	r21, 0x01	; 1
    95ee:	0c 66       	ori	r16, 0x6C	; 108
    95f0:	1d 6c       	ori	r17, 0xCD	; 205
    95f2:	8b 72       	andi	r24, 0x2B	; 43
    95f4:	5a 79       	andi	r21, 0x9A	; 154
    95f6:	92 80       	ldd	r9, Z+2	; 0x02
    95f8:	37 88       	ldd	r3, Z+23	; 0x17
    95fa:	50 90 e5 98 	lds	r5, 0x98E5
    95fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9600:	9f ab       	std	Y+55, r25	; 0x37
    9602:	d3 b5       	in	r29, 0x23	; 35
    9604:	a3 c0       	rjmp	.+326    	; 0x974c <waves+0x4c>
	...

00009700 <waves>:
    9700:	00 03       	mulsu	r16, r16
    9702:	06 09       	sbc	r16, r6
    9704:	0c 10       	cpse	r0, r12
    9706:	13 16       	cp	r1, r19
    9708:	19 1c       	adc	r1, r9
    970a:	1f 22       	and	r1, r31
    970c:	25 28       	or	r2, r5
    970e:	2b 2e       	mov	r2, r27
    9710:	31 33       	cpi	r19, 0x31	; 49
    9712:	36 39       	cpi	r19, 0x96	; 150
    9714:	3c 3f       	cpi	r19, 0xFC	; 252
    9716:	41 44       	sbci	r20, 0x41	; 65
    9718:	47 49       	sbci	r20, 0x97	; 151
    971a:	4c 4e       	sbci	r20, 0xEC	; 236
    971c:	51 53       	subi	r21, 0x31	; 49
    971e:	55 58       	subi	r21, 0x85	; 133
    9720:	5a 5c       	subi	r21, 0xCA	; 202
    9722:	5e 60       	ori	r21, 0x0E	; 14
    9724:	62 64       	ori	r22, 0x42	; 66
    9726:	66 68       	ori	r22, 0x86	; 134
    9728:	6a 6b       	ori	r22, 0xBA	; 186
    972a:	6d 6f       	ori	r22, 0xFD	; 253
    972c:	70 71       	andi	r23, 0x10	; 16
    972e:	73 74       	andi	r23, 0x43	; 67
    9730:	75 76       	andi	r23, 0x65	; 101
    9732:	78 79       	andi	r23, 0x98	; 152
    9734:	7a 7a       	andi	r23, 0xAA	; 170
    9736:	7b 7c       	andi	r23, 0xCB	; 203
    9738:	7d 7d       	andi	r23, 0xDD	; 221
    973a:	7e 7e       	andi	r23, 0xEE	; 238
    973c:	7e 7f       	andi	r23, 0xFE	; 254
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7e 7e       	andi	r23, 0xEE	; 238
    9746:	7e 7d       	andi	r23, 0xDE	; 222
    9748:	7d 7c       	andi	r23, 0xCD	; 205
    974a:	7b 7a       	andi	r23, 0xAB	; 171
    974c:	7a 79       	andi	r23, 0x9A	; 154
    974e:	78 76       	andi	r23, 0x68	; 104
    9750:	75 74       	andi	r23, 0x45	; 69
    9752:	73 71       	andi	r23, 0x13	; 19
    9754:	70 6f       	ori	r23, 0xF0	; 240
    9756:	6d 6b       	ori	r22, 0xBD	; 189
    9758:	6a 68       	ori	r22, 0x8A	; 138
    975a:	66 64       	ori	r22, 0x46	; 70
    975c:	62 60       	ori	r22, 0x02	; 2
    975e:	5e 5c       	subi	r21, 0xCE	; 206
    9760:	5a 58       	subi	r21, 0x8A	; 138
    9762:	55 53       	subi	r21, 0x35	; 53
    9764:	51 4e       	sbci	r21, 0xE1	; 225
    9766:	4c 49       	sbci	r20, 0x9C	; 156
    9768:	47 44       	sbci	r20, 0x47	; 71
    976a:	41 3f       	cpi	r20, 0xF1	; 241
    976c:	3c 39       	cpi	r19, 0x9C	; 156
    976e:	36 33       	cpi	r19, 0x36	; 54
    9770:	31 2e       	mov	r3, r17
    9772:	2b 28       	or	r2, r11
    9774:	25 22       	and	r2, r21
    9776:	1f 1c       	adc	r1, r15
    9778:	19 16       	cp	r1, r25
    977a:	13 10       	cpse	r1, r3
    977c:	0c 09       	sbc	r16, r12
    977e:	06 03       	mulsu	r16, r22
    9780:	00 fd       	sbrc	r16, 0
    9782:	fa f7       	brpl	.-2      	; 0x9782 <waves+0x82>
    9784:	f4 f0       	brlt	.+60     	; 0x97c2 <waves+0xc2>
    9786:	ed ea       	ldi	r30, 0xAD	; 173
    9788:	e7 e4       	ldi	r30, 0x47	; 71
    978a:	e1 de       	rcall	.-574    	; 0x954e <steptable+0x46>
    978c:	db d8       	rcall	.-3658   	; 0x8944 <isEepromFormatted+0x22>
    978e:	d5 d2       	rcall	.+1450   	; 0x9d3a <waves+0x63a>
    9790:	cf cd       	rjmp	.-1122   	; 0x9330 <ProcessMusic+0x364>
    9792:	ca c7       	rjmp	.+3988   	; 0xa728 <LBPrintByte+0xa>
    9794:	c4 c1       	rjmp	.+904    	; 0x9b1e <waves+0x41e>
    9796:	bf bc       	out	0x2f, r11	; 47
    9798:	b9 b7       	in	r27, 0x39	; 57
    979a:	b4 b2       	in	r11, 0x14	; 20
    979c:	af ad       	ldd	r26, Y+63	; 0x3f
    979e:	ab a8       	ldd	r10, Y+51	; 0x33
    97a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    97a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    97a4:	9e 9c       	mul	r9, r14
    97a6:	9a 98       	cbi	0x13, 2	; 19
    97a8:	96 95       	lsr	r25
    97aa:	93 91       	.word	0x9193	; ????
    97ac:	90 8f       	std	Z+24, r25	; 0x18
    97ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    97b0:	8b 8a       	std	Y+19, r8	; 0x13
    97b2:	88 87       	std	Y+8, r24	; 0x08
    97b4:	86 86       	std	Z+14, r8	; 0x0e
    97b6:	85 84       	ldd	r8, Z+13	; 0x0d
    97b8:	83 83       	std	Z+3, r24	; 0x03
    97ba:	82 82       	std	Z+2, r8	; 0x02
    97bc:	82 81       	ldd	r24, Z+2	; 0x02
    97be:	81 81       	ldd	r24, Z+1	; 0x01
    97c0:	81 81       	ldd	r24, Z+1	; 0x01
    97c2:	81 81       	ldd	r24, Z+1	; 0x01
    97c4:	82 82       	std	Z+2, r8	; 0x02
    97c6:	82 83       	std	Z+2, r24	; 0x02
    97c8:	83 84       	ldd	r8, Z+11	; 0x0b
    97ca:	85 86       	std	Z+13, r8	; 0x0d
    97cc:	86 87       	std	Z+14, r24	; 0x0e
    97ce:	88 8a       	std	Y+16, r8	; 0x10
    97d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    97d2:	8d 8f       	std	Y+29, r24	; 0x1d
    97d4:	90 91 93 95 	lds	r25, 0x9593
    97d8:	96 98       	cbi	0x12, 6	; 18
    97da:	9a 9c       	mul	r9, r10
    97dc:	9e a0       	ldd	r9, Y+38	; 0x26
    97de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    97e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    97e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    97e4:	af b2       	in	r10, 0x1f	; 31
    97e6:	b4 b7       	in	r27, 0x34	; 52
    97e8:	b9 bc       	out	0x29, r11	; 41
    97ea:	bf c1       	rjmp	.+894    	; 0x9b6a <waves+0x46a>
    97ec:	c4 c7       	rjmp	.+3976   	; 0xa776 <LBPrintByte+0x58>
    97ee:	ca cd       	rjmp	.-1132   	; 0x9384 <ProcessMusic+0x3b8>
    97f0:	cf d2       	rcall	.+1438   	; 0x9d90 <waves+0x690>
    97f2:	d5 d8       	rcall	.-3670   	; 0x899e <EepromBlockExists+0x4e>
    97f4:	db de       	rcall	.-586    	; 0x95ac <steptable+0xa4>
    97f6:	e1 e4       	ldi	r30, 0x41	; 65
    97f8:	e7 ea       	ldi	r30, 0xA7	; 167
    97fa:	ed f0       	brhs	.+58     	; 0x9836 <waves+0x136>
    97fc:	f4 f7       	brge	.-4      	; 0x97fa <waves+0xfa>
    97fe:	fa fd       	.word	0xfdfa	; ????
    9800:	80 81       	ld	r24, Z
    9802:	82 83       	std	Z+2, r24	; 0x02
    9804:	84 85       	ldd	r24, Z+12	; 0x0c
    9806:	86 87       	std	Z+14, r24	; 0x0e
    9808:	88 89       	ldd	r24, Y+16	; 0x10
    980a:	8a 8b       	std	Y+18, r24	; 0x12
    980c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    980e:	8e 8f       	std	Y+30, r24	; 0x1e
    9810:	90 91 92 93 	lds	r25, 0x9392
    9814:	94 95       	.word	0x9594	; ????
    9816:	96 97       	sbiw	r26, 0x26	; 38
    9818:	98 99       	sbic	0x13, 0	; 19
    981a:	9a 9b       	sbis	0x13, 2	; 19
    981c:	9c 9d       	mul	r25, r12
    981e:	9e 9f       	mul	r25, r30
    9820:	a0 a1       	ldd	r26, Z+32	; 0x20
    9822:	a2 a3       	std	Z+34, r26	; 0x22
    9824:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9826:	a6 a7       	std	Z+46, r26	; 0x2e
    9828:	a8 a9       	ldd	r26, Y+48	; 0x30
    982a:	aa ab       	std	Y+50, r26	; 0x32
    982c:	ac ad       	ldd	r26, Y+60	; 0x3c
    982e:	ae af       	std	Y+62, r26	; 0x3e
    9830:	b0 b1       	in	r27, 0x00	; 0
    9832:	b2 b3       	in	r27, 0x12	; 18
    9834:	b4 b5       	in	r27, 0x24	; 36
    9836:	b6 b7       	in	r27, 0x36	; 54
    9838:	b8 b9       	out	0x08, r27	; 8
    983a:	ba bb       	out	0x1a, r27	; 26
    983c:	bc bd       	out	0x2c, r27	; 44
    983e:	be bf       	out	0x3e, r27	; 62
    9840:	c0 c1       	rjmp	.+896    	; 0x9bc2 <waves+0x4c2>
    9842:	c2 c3       	rjmp	.+1924   	; 0x9fc8 <waves+0x8c8>
    9844:	c4 c5       	rjmp	.+2952   	; 0xa3ce <DrawMap+0x16>
    9846:	c6 c7       	rjmp	.+3980   	; 0xa7d4 <LBPrintInt+0x54>
    9848:	c8 c9       	rjmp	.-3184   	; 0x8bda <PatchCommand11+0x54>
    984a:	ca cb       	rjmp	.-2156   	; 0x8fe0 <ProcessMusic+0x14>
    984c:	cc cd       	rjmp	.-1128   	; 0x93e6 <ProcessMusic+0x41a>
    984e:	ce cf       	rjmp	.-100    	; 0x97ec <waves+0xec>
    9850:	d0 d1       	rcall	.+928    	; 0x9bf2 <waves+0x4f2>
    9852:	d2 d3       	rcall	.+1956   	; 0x9ff8 <waves+0x8f8>
    9854:	d4 d5       	rcall	.+2984   	; 0xa3fe <DrawMap+0x46>
    9856:	d6 d7       	rcall	.+4012   	; 0xa804 <LBCollides+0x12>
    9858:	d8 d9       	rcall	.-3152   	; 0x8c0a <PatchCommand02+0x2>
    985a:	da db       	rcall	.-2124   	; 0x9010 <ProcessMusic+0x44>
    985c:	dc dd       	rcall	.-1096   	; 0x9416 <SetMixerNote+0x6>
    985e:	de df       	rcall	.-68     	; 0x981c <waves+0x11c>
    9860:	e0 e1       	ldi	r30, 0x10	; 16
    9862:	e2 e3       	ldi	r30, 0x32	; 50
    9864:	e4 e5       	ldi	r30, 0x54	; 84
    9866:	e6 e7       	ldi	r30, 0x76	; 118
    9868:	e8 e9       	ldi	r30, 0x98	; 152
    986a:	ea eb       	ldi	r30, 0xBA	; 186
    986c:	ec ed       	ldi	r30, 0xDC	; 220
    986e:	ee ef       	ldi	r30, 0xFE	; 254
    9870:	f0 f1       	brcs	.+124    	; 0x98ee <waves+0x1ee>
    9872:	f2 f3       	brmi	.-4      	; 0x9870 <waves+0x170>
    9874:	f4 f5       	brge	.+124    	; 0x98f2 <waves+0x1f2>
    9876:	f6 f7       	brtc	.-4      	; 0x9874 <waves+0x174>
    9878:	f8 f9       	.word	0xf9f8	; ????
    987a:	fa fb       	.word	0xfbfa	; ????
    987c:	fc fd       	.word	0xfdfc	; ????
    987e:	fe ff       	.word	0xfffe	; ????
    9880:	00 01       	movw	r0, r0
    9882:	02 03       	mulsu	r16, r18
    9884:	04 05       	cpc	r16, r4
    9886:	06 07       	cpc	r16, r22
    9888:	08 09       	sbc	r16, r8
    988a:	0a 0b       	sbc	r16, r26
    988c:	0c 0d       	add	r16, r12
    988e:	0e 0f       	add	r16, r30
    9890:	10 11       	cpse	r17, r0
    9892:	12 13       	cpse	r17, r18
    9894:	14 15       	cp	r17, r4
    9896:	16 17       	cp	r17, r22
    9898:	18 19       	sub	r17, r8
    989a:	1a 1b       	sub	r17, r26
    989c:	1c 1d       	adc	r17, r12
    989e:	1e 1f       	adc	r17, r30
    98a0:	20 21       	and	r18, r0
    98a2:	22 23       	and	r18, r18
    98a4:	24 25       	eor	r18, r4
    98a6:	26 27       	eor	r18, r22
    98a8:	28 29       	or	r18, r8
    98aa:	2a 2b       	or	r18, r26
    98ac:	2c 2d       	mov	r18, r12
    98ae:	2e 2f       	mov	r18, r30
    98b0:	30 31       	cpi	r19, 0x10	; 16
    98b2:	32 33       	cpi	r19, 0x32	; 50
    98b4:	34 35       	cpi	r19, 0x54	; 84
    98b6:	36 37       	cpi	r19, 0x76	; 118
    98b8:	38 39       	cpi	r19, 0x98	; 152
    98ba:	3a 3b       	cpi	r19, 0xBA	; 186
    98bc:	3c 3d       	cpi	r19, 0xDC	; 220
    98be:	3e 3f       	cpi	r19, 0xFE	; 254
    98c0:	40 41       	sbci	r20, 0x10	; 16
    98c2:	42 43       	sbci	r20, 0x32	; 50
    98c4:	44 45       	sbci	r20, 0x54	; 84
    98c6:	46 47       	sbci	r20, 0x76	; 118
    98c8:	48 49       	sbci	r20, 0x98	; 152
    98ca:	4a 4b       	sbci	r20, 0xBA	; 186
    98cc:	4c 4d       	sbci	r20, 0xDC	; 220
    98ce:	4e 4f       	sbci	r20, 0xFE	; 254
    98d0:	50 51       	subi	r21, 0x10	; 16
    98d2:	52 53       	subi	r21, 0x32	; 50
    98d4:	54 55       	subi	r21, 0x54	; 84
    98d6:	56 57       	subi	r21, 0x76	; 118
    98d8:	58 59       	subi	r21, 0x98	; 152
    98da:	5a 5b       	subi	r21, 0xBA	; 186
    98dc:	5c 5d       	subi	r21, 0xDC	; 220
    98de:	5e 5f       	subi	r21, 0xFE	; 254
    98e0:	60 61       	ori	r22, 0x10	; 16
    98e2:	62 63       	ori	r22, 0x32	; 50
    98e4:	64 65       	ori	r22, 0x54	; 84
    98e6:	66 67       	ori	r22, 0x76	; 118
    98e8:	68 69       	ori	r22, 0x98	; 152
    98ea:	6a 6b       	ori	r22, 0xBA	; 186
    98ec:	6c 6d       	ori	r22, 0xDC	; 220
    98ee:	6e 6f       	ori	r22, 0xFE	; 254
    98f0:	70 71       	andi	r23, 0x10	; 16
    98f2:	72 73       	andi	r23, 0x32	; 50
    98f4:	74 75       	andi	r23, 0x54	; 84
    98f6:	76 77       	andi	r23, 0x76	; 118
    98f8:	78 79       	andi	r23, 0x98	; 152
    98fa:	7a 7b       	andi	r23, 0xBA	; 186
    98fc:	7c 7d       	andi	r23, 0xDC	; 220
    98fe:	7e 7f       	andi	r23, 0xFE	; 254
    9900:	00 02       	muls	r16, r16
    9902:	04 06       	cpc	r0, r20
    9904:	08 0a       	sbc	r0, r24
    9906:	0c 0e       	add	r0, r28
    9908:	10 12       	cpse	r1, r16
    990a:	14 16       	cp	r1, r20
    990c:	18 1a       	sub	r1, r24
    990e:	1c 1e       	adc	r1, r28
    9910:	20 22       	and	r2, r16
    9912:	24 26       	eor	r2, r20
    9914:	28 2a       	or	r2, r24
    9916:	2c 2e       	mov	r2, r28
    9918:	30 32       	cpi	r19, 0x20	; 32
    991a:	34 36       	cpi	r19, 0x64	; 100
    991c:	38 3a       	cpi	r19, 0xA8	; 168
    991e:	3c 3e       	cpi	r19, 0xEC	; 236
    9920:	40 42       	sbci	r20, 0x20	; 32
    9922:	44 46       	sbci	r20, 0x64	; 100
    9924:	48 4a       	sbci	r20, 0xA8	; 168
    9926:	4c 4e       	sbci	r20, 0xEC	; 236
    9928:	50 52       	subi	r21, 0x20	; 32
    992a:	54 56       	subi	r21, 0x64	; 100
    992c:	58 5a       	subi	r21, 0xA8	; 168
    992e:	5c 5e       	subi	r21, 0xEC	; 236
    9930:	60 62       	ori	r22, 0x20	; 32
    9932:	64 66       	ori	r22, 0x64	; 100
    9934:	68 6a       	ori	r22, 0xA8	; 168
    9936:	6c 6e       	ori	r22, 0xEC	; 236
    9938:	70 72       	andi	r23, 0x20	; 32
    993a:	74 76       	andi	r23, 0x64	; 100
    993c:	78 7a       	andi	r23, 0xA8	; 168
    993e:	7c 7e       	andi	r23, 0xEC	; 236
    9940:	7f 7d       	andi	r23, 0xDF	; 223
    9942:	7b 79       	andi	r23, 0x9B	; 155
    9944:	77 75       	andi	r23, 0x57	; 87
    9946:	73 71       	andi	r23, 0x13	; 19
    9948:	6f 6d       	ori	r22, 0xDF	; 223
    994a:	6b 69       	ori	r22, 0x9B	; 155
    994c:	67 65       	ori	r22, 0x57	; 87
    994e:	63 61       	ori	r22, 0x13	; 19
    9950:	5f 5d       	subi	r21, 0xDF	; 223
    9952:	5b 59       	subi	r21, 0x9B	; 155
    9954:	57 55       	subi	r21, 0x57	; 87
    9956:	53 51       	subi	r21, 0x13	; 19
    9958:	4f 4d       	sbci	r20, 0xDF	; 223
    995a:	4b 49       	sbci	r20, 0x9B	; 155
    995c:	47 45       	sbci	r20, 0x57	; 87
    995e:	43 41       	sbci	r20, 0x13	; 19
    9960:	3f 3d       	cpi	r19, 0xDF	; 223
    9962:	3b 39       	cpi	r19, 0x9B	; 155
    9964:	37 35       	cpi	r19, 0x57	; 87
    9966:	33 31       	cpi	r19, 0x13	; 19
    9968:	2f 2d       	mov	r18, r15
    996a:	2b 29       	or	r18, r11
    996c:	27 25       	eor	r18, r7
    996e:	23 21       	and	r18, r3
    9970:	1f 1d       	adc	r17, r15
    9972:	1b 19       	sub	r17, r11
    9974:	17 15       	cp	r17, r7
    9976:	13 11       	cpse	r17, r3
    9978:	0f 0d       	add	r16, r15
    997a:	0b 09       	sbc	r16, r11
    997c:	07 05       	cpc	r16, r7
    997e:	03 01       	movw	r0, r6
    9980:	ff fd       	.word	0xfdff	; ????
    9982:	fb f9       	.word	0xf9fb	; ????
    9984:	f7 f5       	brid	.+124    	; 0x9a02 <waves+0x302>
    9986:	f3 f1       	brvs	.+124    	; 0x9a04 <waves+0x304>
    9988:	ef ed       	ldi	r30, 0xDF	; 223
    998a:	eb e9       	ldi	r30, 0x9B	; 155
    998c:	e7 e5       	ldi	r30, 0x57	; 87
    998e:	e3 e1       	ldi	r30, 0x13	; 19
    9990:	df dd       	rcall	.-1090   	; 0x9550 <steptable+0x48>
    9992:	db d9       	rcall	.-3146   	; 0x8d4a <StopSong+0x12>
    9994:	d7 d5       	rcall	.+2990   	; 0xa544 <FadeIn+0x2>
    9996:	d3 d1       	rcall	.+934    	; 0x9d3e <waves+0x63e>
    9998:	cf cd       	rjmp	.-1122   	; 0x9538 <steptable+0x30>
    999a:	cb c9       	rjmp	.-3178   	; 0x8d32 <StartSong+0x4c>
    999c:	c7 c5       	rjmp	.+2958   	; 0xa52c <doFade+0x6>
    999e:	c3 c1       	rjmp	.+902    	; 0x9d26 <waves+0x626>
    99a0:	bf bd       	out	0x2f, r27	; 47
    99a2:	bb b9       	out	0x0b, r27	; 11
    99a4:	b7 b5       	in	r27, 0x27	; 39
    99a6:	b3 b1       	in	r27, 0x03	; 3
    99a8:	af ad       	ldd	r26, Y+63	; 0x3f
    99aa:	ab a9       	ldd	r26, Y+51	; 0x33
    99ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    99ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    99b0:	9f 9d       	mul	r25, r15
    99b2:	9b 99       	sbic	0x13, 3	; 19
    99b4:	97 95       	ror	r25
    99b6:	93 91       	.word	0x9193	; ????
    99b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    99ba:	8b 89       	ldd	r24, Y+19	; 0x13
    99bc:	87 85       	ldd	r24, Z+15	; 0x0f
    99be:	83 81       	ldd	r24, Z+3	; 0x03
    99c0:	80 82       	st	Z, r8
    99c2:	84 86       	std	Z+12, r8	; 0x0c
    99c4:	88 8a       	std	Y+16, r8	; 0x10
    99c6:	8c 8e       	std	Y+28, r8	; 0x1c
    99c8:	90 92 94 96 	sts	0x9694, r9
    99cc:	98 9a       	sbi	0x13, 0	; 19
    99ce:	9c 9e       	mul	r9, r28
    99d0:	a0 a2       	std	Z+32, r10	; 0x20
    99d2:	a4 a6       	std	Z+44, r10	; 0x2c
    99d4:	a8 aa       	std	Y+48, r10	; 0x30
    99d6:	ac ae       	std	Y+60, r10	; 0x3c
    99d8:	b0 b2       	in	r11, 0x10	; 16
    99da:	b4 b6       	in	r11, 0x34	; 52
    99dc:	b8 ba       	out	0x18, r11	; 24
    99de:	bc be       	out	0x3c, r11	; 60
    99e0:	c0 c2       	rjmp	.+1408   	; 0x9f62 <waves+0x862>
    99e2:	c4 c6       	rjmp	.+3464   	; 0xa76c <LBPrintByte+0x4e>
    99e4:	c8 ca       	rjmp	.-2672   	; 0x8f76 <TriggerNote+0x2a>
    99e6:	cc ce       	rjmp	.-616    	; 0x9780 <waves+0x80>
    99e8:	d0 d2       	rcall	.+1440   	; 0x9f8a <waves+0x88a>
    99ea:	d4 d6       	rcall	.+3496   	; 0xa794 <LBPrintInt+0x14>
    99ec:	d8 da       	rcall	.-2640   	; 0x8f9e <TriggerNote+0x52>
    99ee:	dc de       	rcall	.-584    	; 0x97a8 <waves+0xa8>
    99f0:	e0 e2       	ldi	r30, 0x20	; 32
    99f2:	e4 e6       	ldi	r30, 0x64	; 100
    99f4:	e8 ea       	ldi	r30, 0xA8	; 168
    99f6:	ec ee       	ldi	r30, 0xEC	; 236
    99f8:	f0 f2       	brcs	.-68     	; 0x99b6 <waves+0x2b6>
    99fa:	f4 f6       	brge	.-68     	; 0x99b8 <waves+0x2b8>
    99fc:	f8 fa       	.word	0xfaf8	; ????
    99fe:	fc fe       	.word	0xfefc	; ????
    9a00:	7f 7f       	andi	r23, 0xFF	; 255
    9a02:	7f 7f       	andi	r23, 0xFF	; 255
    9a04:	7f 7f       	andi	r23, 0xFF	; 255
    9a06:	7f 7f       	andi	r23, 0xFF	; 255
    9a08:	7f 7f       	andi	r23, 0xFF	; 255
    9a0a:	7f 7f       	andi	r23, 0xFF	; 255
    9a0c:	7f 7f       	andi	r23, 0xFF	; 255
    9a0e:	7f 7f       	andi	r23, 0xFF	; 255
    9a10:	7f 7f       	andi	r23, 0xFF	; 255
    9a12:	7f 7f       	andi	r23, 0xFF	; 255
    9a14:	7f 7f       	andi	r23, 0xFF	; 255
    9a16:	7f 7f       	andi	r23, 0xFF	; 255
    9a18:	7f 7f       	andi	r23, 0xFF	; 255
    9a1a:	7f 7f       	andi	r23, 0xFF	; 255
    9a1c:	7f 7f       	andi	r23, 0xFF	; 255
    9a1e:	7f 7f       	andi	r23, 0xFF	; 255
    9a20:	7f 7f       	andi	r23, 0xFF	; 255
    9a22:	7f 7f       	andi	r23, 0xFF	; 255
    9a24:	7f 7f       	andi	r23, 0xFF	; 255
    9a26:	7f 7f       	andi	r23, 0xFF	; 255
    9a28:	7f 7f       	andi	r23, 0xFF	; 255
    9a2a:	7f 7f       	andi	r23, 0xFF	; 255
    9a2c:	7f 7f       	andi	r23, 0xFF	; 255
    9a2e:	7f 7f       	andi	r23, 0xFF	; 255
    9a30:	7f 7f       	andi	r23, 0xFF	; 255
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	80 80       	ld	r8, Z
    9a42:	80 80       	ld	r8, Z
    9a44:	80 80       	ld	r8, Z
    9a46:	80 80       	ld	r8, Z
    9a48:	80 80       	ld	r8, Z
    9a4a:	80 80       	ld	r8, Z
    9a4c:	80 80       	ld	r8, Z
    9a4e:	80 80       	ld	r8, Z
    9a50:	80 80       	ld	r8, Z
    9a52:	80 80       	ld	r8, Z
    9a54:	80 80       	ld	r8, Z
    9a56:	80 80       	ld	r8, Z
    9a58:	80 80       	ld	r8, Z
    9a5a:	80 80       	ld	r8, Z
    9a5c:	80 80       	ld	r8, Z
    9a5e:	80 80       	ld	r8, Z
    9a60:	80 80       	ld	r8, Z
    9a62:	80 80       	ld	r8, Z
    9a64:	80 80       	ld	r8, Z
    9a66:	80 80       	ld	r8, Z
    9a68:	80 80       	ld	r8, Z
    9a6a:	80 80       	ld	r8, Z
    9a6c:	80 80       	ld	r8, Z
    9a6e:	80 80       	ld	r8, Z
    9a70:	80 80       	ld	r8, Z
    9a72:	80 80       	ld	r8, Z
    9a74:	80 80       	ld	r8, Z
    9a76:	80 80       	ld	r8, Z
    9a78:	80 80       	ld	r8, Z
    9a7a:	80 80       	ld	r8, Z
    9a7c:	80 80       	ld	r8, Z
    9a7e:	80 80       	ld	r8, Z
    9a80:	80 80       	ld	r8, Z
    9a82:	80 80       	ld	r8, Z
    9a84:	80 80       	ld	r8, Z
    9a86:	80 80       	ld	r8, Z
    9a88:	80 80       	ld	r8, Z
    9a8a:	80 80       	ld	r8, Z
    9a8c:	80 80       	ld	r8, Z
    9a8e:	80 80       	ld	r8, Z
    9a90:	80 80       	ld	r8, Z
    9a92:	80 80       	ld	r8, Z
    9a94:	80 80       	ld	r8, Z
    9a96:	80 80       	ld	r8, Z
    9a98:	80 80       	ld	r8, Z
    9a9a:	80 80       	ld	r8, Z
    9a9c:	80 80       	ld	r8, Z
    9a9e:	80 80       	ld	r8, Z
    9aa0:	80 80       	ld	r8, Z
    9aa2:	80 80       	ld	r8, Z
    9aa4:	80 80       	ld	r8, Z
    9aa6:	80 80       	ld	r8, Z
    9aa8:	80 80       	ld	r8, Z
    9aaa:	80 80       	ld	r8, Z
    9aac:	80 80       	ld	r8, Z
    9aae:	80 80       	ld	r8, Z
    9ab0:	80 80       	ld	r8, Z
    9ab2:	80 80       	ld	r8, Z
    9ab4:	80 80       	ld	r8, Z
    9ab6:	80 80       	ld	r8, Z
    9ab8:	80 80       	ld	r8, Z
    9aba:	80 80       	ld	r8, Z
    9abc:	80 80       	ld	r8, Z
    9abe:	80 80       	ld	r8, Z
    9ac0:	80 80       	ld	r8, Z
    9ac2:	80 80       	ld	r8, Z
    9ac4:	80 80       	ld	r8, Z
    9ac6:	80 80       	ld	r8, Z
    9ac8:	80 80       	ld	r8, Z
    9aca:	80 80       	ld	r8, Z
    9acc:	80 80       	ld	r8, Z
    9ace:	80 80       	ld	r8, Z
    9ad0:	80 80       	ld	r8, Z
    9ad2:	80 80       	ld	r8, Z
    9ad4:	80 80       	ld	r8, Z
    9ad6:	80 80       	ld	r8, Z
    9ad8:	80 80       	ld	r8, Z
    9ada:	80 80       	ld	r8, Z
    9adc:	80 80       	ld	r8, Z
    9ade:	80 80       	ld	r8, Z
    9ae0:	80 80       	ld	r8, Z
    9ae2:	80 80       	ld	r8, Z
    9ae4:	80 80       	ld	r8, Z
    9ae6:	80 80       	ld	r8, Z
    9ae8:	80 80       	ld	r8, Z
    9aea:	80 80       	ld	r8, Z
    9aec:	80 80       	ld	r8, Z
    9aee:	80 80       	ld	r8, Z
    9af0:	80 80       	ld	r8, Z
    9af2:	80 80       	ld	r8, Z
    9af4:	80 80       	ld	r8, Z
    9af6:	80 80       	ld	r8, Z
    9af8:	80 80       	ld	r8, Z
    9afa:	80 80       	ld	r8, Z
    9afc:	80 80       	ld	r8, Z
    9afe:	80 80       	ld	r8, Z
    9b00:	7f 7f       	andi	r23, 0xFF	; 255
    9b02:	7f 7f       	andi	r23, 0xFF	; 255
    9b04:	7f 7f       	andi	r23, 0xFF	; 255
    9b06:	7f 7f       	andi	r23, 0xFF	; 255
    9b08:	7f 7f       	andi	r23, 0xFF	; 255
    9b0a:	7f 7f       	andi	r23, 0xFF	; 255
    9b0c:	7f 7f       	andi	r23, 0xFF	; 255
    9b0e:	7f 7f       	andi	r23, 0xFF	; 255
    9b10:	7f 7f       	andi	r23, 0xFF	; 255
    9b12:	7f 7f       	andi	r23, 0xFF	; 255
    9b14:	7f 7f       	andi	r23, 0xFF	; 255
    9b16:	7f 7f       	andi	r23, 0xFF	; 255
    9b18:	7f 7f       	andi	r23, 0xFF	; 255
    9b1a:	7f 7f       	andi	r23, 0xFF	; 255
    9b1c:	7f 7f       	andi	r23, 0xFF	; 255
    9b1e:	7f 7f       	andi	r23, 0xFF	; 255
    9b20:	7f 7f       	andi	r23, 0xFF	; 255
    9b22:	7f 7f       	andi	r23, 0xFF	; 255
    9b24:	7f 7f       	andi	r23, 0xFF	; 255
    9b26:	7f 7f       	andi	r23, 0xFF	; 255
    9b28:	7f 7f       	andi	r23, 0xFF	; 255
    9b2a:	7f 7f       	andi	r23, 0xFF	; 255
    9b2c:	7f 7f       	andi	r23, 0xFF	; 255
    9b2e:	7f 7f       	andi	r23, 0xFF	; 255
    9b30:	7f 7f       	andi	r23, 0xFF	; 255
    9b32:	7f 7f       	andi	r23, 0xFF	; 255
    9b34:	7f 7f       	andi	r23, 0xFF	; 255
    9b36:	7f 7f       	andi	r23, 0xFF	; 255
    9b38:	7f 7f       	andi	r23, 0xFF	; 255
    9b3a:	7f 7f       	andi	r23, 0xFF	; 255
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7f 7f       	andi	r23, 0xFF	; 255
    9b48:	7f 7f       	andi	r23, 0xFF	; 255
    9b4a:	7f 7f       	andi	r23, 0xFF	; 255
    9b4c:	7f 7f       	andi	r23, 0xFF	; 255
    9b4e:	7f 7f       	andi	r23, 0xFF	; 255
    9b50:	7f 7f       	andi	r23, 0xFF	; 255
    9b52:	7f 7f       	andi	r23, 0xFF	; 255
    9b54:	7f 7f       	andi	r23, 0xFF	; 255
    9b56:	7f 7f       	andi	r23, 0xFF	; 255
    9b58:	7f 7f       	andi	r23, 0xFF	; 255
    9b5a:	7f 7f       	andi	r23, 0xFF	; 255
    9b5c:	7f 7f       	andi	r23, 0xFF	; 255
    9b5e:	7f 7f       	andi	r23, 0xFF	; 255
    9b60:	7f 7f       	andi	r23, 0xFF	; 255
    9b62:	7f 7f       	andi	r23, 0xFF	; 255
    9b64:	7f 7f       	andi	r23, 0xFF	; 255
    9b66:	7f 7f       	andi	r23, 0xFF	; 255
    9b68:	7f 7f       	andi	r23, 0xFF	; 255
    9b6a:	7f 7f       	andi	r23, 0xFF	; 255
    9b6c:	7f 7f       	andi	r23, 0xFF	; 255
    9b6e:	7f 7f       	andi	r23, 0xFF	; 255
    9b70:	7f 7f       	andi	r23, 0xFF	; 255
    9b72:	7f 7f       	andi	r23, 0xFF	; 255
    9b74:	7f 7f       	andi	r23, 0xFF	; 255
    9b76:	7f 7f       	andi	r23, 0xFF	; 255
    9b78:	7f 7f       	andi	r23, 0xFF	; 255
    9b7a:	7f 7f       	andi	r23, 0xFF	; 255
    9b7c:	7f 7f       	andi	r23, 0xFF	; 255
    9b7e:	7f 7f       	andi	r23, 0xFF	; 255
    9b80:	80 80       	ld	r8, Z
    9b82:	80 80       	ld	r8, Z
    9b84:	80 80       	ld	r8, Z
    9b86:	80 80       	ld	r8, Z
    9b88:	80 80       	ld	r8, Z
    9b8a:	80 80       	ld	r8, Z
    9b8c:	80 80       	ld	r8, Z
    9b8e:	80 80       	ld	r8, Z
    9b90:	80 80       	ld	r8, Z
    9b92:	80 80       	ld	r8, Z
    9b94:	80 80       	ld	r8, Z
    9b96:	80 80       	ld	r8, Z
    9b98:	80 80       	ld	r8, Z
    9b9a:	80 80       	ld	r8, Z
    9b9c:	80 80       	ld	r8, Z
    9b9e:	80 80       	ld	r8, Z
    9ba0:	80 80       	ld	r8, Z
    9ba2:	80 80       	ld	r8, Z
    9ba4:	80 80       	ld	r8, Z
    9ba6:	80 80       	ld	r8, Z
    9ba8:	80 80       	ld	r8, Z
    9baa:	80 80       	ld	r8, Z
    9bac:	80 80       	ld	r8, Z
    9bae:	80 80       	ld	r8, Z
    9bb0:	80 80       	ld	r8, Z
    9bb2:	80 80       	ld	r8, Z
    9bb4:	80 80       	ld	r8, Z
    9bb6:	80 80       	ld	r8, Z
    9bb8:	80 80       	ld	r8, Z
    9bba:	80 80       	ld	r8, Z
    9bbc:	80 80       	ld	r8, Z
    9bbe:	80 80       	ld	r8, Z
    9bc0:	80 80       	ld	r8, Z
    9bc2:	80 80       	ld	r8, Z
    9bc4:	80 80       	ld	r8, Z
    9bc6:	80 80       	ld	r8, Z
    9bc8:	80 80       	ld	r8, Z
    9bca:	80 80       	ld	r8, Z
    9bcc:	80 80       	ld	r8, Z
    9bce:	80 80       	ld	r8, Z
    9bd0:	80 80       	ld	r8, Z
    9bd2:	80 80       	ld	r8, Z
    9bd4:	80 80       	ld	r8, Z
    9bd6:	80 80       	ld	r8, Z
    9bd8:	80 80       	ld	r8, Z
    9bda:	80 80       	ld	r8, Z
    9bdc:	80 80       	ld	r8, Z
    9bde:	80 80       	ld	r8, Z
    9be0:	80 80       	ld	r8, Z
    9be2:	80 80       	ld	r8, Z
    9be4:	80 80       	ld	r8, Z
    9be6:	80 80       	ld	r8, Z
    9be8:	80 80       	ld	r8, Z
    9bea:	80 80       	ld	r8, Z
    9bec:	80 80       	ld	r8, Z
    9bee:	80 80       	ld	r8, Z
    9bf0:	80 80       	ld	r8, Z
    9bf2:	80 80       	ld	r8, Z
    9bf4:	80 80       	ld	r8, Z
    9bf6:	80 80       	ld	r8, Z
    9bf8:	80 80       	ld	r8, Z
    9bfa:	80 80       	ld	r8, Z
    9bfc:	80 80       	ld	r8, Z
    9bfe:	80 80       	ld	r8, Z
    9c00:	7f 7f       	andi	r23, 0xFF	; 255
    9c02:	7f 7f       	andi	r23, 0xFF	; 255
    9c04:	7f 7f       	andi	r23, 0xFF	; 255
    9c06:	7f 7f       	andi	r23, 0xFF	; 255
    9c08:	7f 7f       	andi	r23, 0xFF	; 255
    9c0a:	7f 7f       	andi	r23, 0xFF	; 255
    9c0c:	7f 7f       	andi	r23, 0xFF	; 255
    9c0e:	7f 7f       	andi	r23, 0xFF	; 255
    9c10:	7f 7f       	andi	r23, 0xFF	; 255
    9c12:	7f 7f       	andi	r23, 0xFF	; 255
    9c14:	7f 7f       	andi	r23, 0xFF	; 255
    9c16:	7f 7f       	andi	r23, 0xFF	; 255
    9c18:	7f 7f       	andi	r23, 0xFF	; 255
    9c1a:	7f 7f       	andi	r23, 0xFF	; 255
    9c1c:	7f 7f       	andi	r23, 0xFF	; 255
    9c1e:	7f 7f       	andi	r23, 0xFF	; 255
    9c20:	7f 7f       	andi	r23, 0xFF	; 255
    9c22:	7f 7f       	andi	r23, 0xFF	; 255
    9c24:	7f 7f       	andi	r23, 0xFF	; 255
    9c26:	7f 7f       	andi	r23, 0xFF	; 255
    9c28:	7f 7f       	andi	r23, 0xFF	; 255
    9c2a:	7f 7f       	andi	r23, 0xFF	; 255
    9c2c:	7f 7f       	andi	r23, 0xFF	; 255
    9c2e:	7f 7f       	andi	r23, 0xFF	; 255
    9c30:	7f 7f       	andi	r23, 0xFF	; 255
    9c32:	7f 7f       	andi	r23, 0xFF	; 255
    9c34:	7f 7f       	andi	r23, 0xFF	; 255
    9c36:	7f 7f       	andi	r23, 0xFF	; 255
    9c38:	7f 7f       	andi	r23, 0xFF	; 255
    9c3a:	7f 7f       	andi	r23, 0xFF	; 255
    9c3c:	7f 7f       	andi	r23, 0xFF	; 255
    9c3e:	7f 7f       	andi	r23, 0xFF	; 255
    9c40:	7f 7f       	andi	r23, 0xFF	; 255
    9c42:	7f 7f       	andi	r23, 0xFF	; 255
    9c44:	7f 7f       	andi	r23, 0xFF	; 255
    9c46:	7f 7f       	andi	r23, 0xFF	; 255
    9c48:	7f 7f       	andi	r23, 0xFF	; 255
    9c4a:	7f 7f       	andi	r23, 0xFF	; 255
    9c4c:	7f 7f       	andi	r23, 0xFF	; 255
    9c4e:	7f 7f       	andi	r23, 0xFF	; 255
    9c50:	7f 7f       	andi	r23, 0xFF	; 255
    9c52:	7f 7f       	andi	r23, 0xFF	; 255
    9c54:	7f 7f       	andi	r23, 0xFF	; 255
    9c56:	7f 7f       	andi	r23, 0xFF	; 255
    9c58:	7f 7f       	andi	r23, 0xFF	; 255
    9c5a:	7f 7f       	andi	r23, 0xFF	; 255
    9c5c:	7f 7f       	andi	r23, 0xFF	; 255
    9c5e:	7f 7f       	andi	r23, 0xFF	; 255
    9c60:	7f 7f       	andi	r23, 0xFF	; 255
    9c62:	7f 7f       	andi	r23, 0xFF	; 255
    9c64:	7f 7f       	andi	r23, 0xFF	; 255
    9c66:	7f 7f       	andi	r23, 0xFF	; 255
    9c68:	7f 7f       	andi	r23, 0xFF	; 255
    9c6a:	7f 7f       	andi	r23, 0xFF	; 255
    9c6c:	7f 7f       	andi	r23, 0xFF	; 255
    9c6e:	7f 7f       	andi	r23, 0xFF	; 255
    9c70:	7f 7f       	andi	r23, 0xFF	; 255
    9c72:	7f 7f       	andi	r23, 0xFF	; 255
    9c74:	7f 7f       	andi	r23, 0xFF	; 255
    9c76:	7f 7f       	andi	r23, 0xFF	; 255
    9c78:	7f 7f       	andi	r23, 0xFF	; 255
    9c7a:	7f 7f       	andi	r23, 0xFF	; 255
    9c7c:	7f 7f       	andi	r23, 0xFF	; 255
    9c7e:	7f 7f       	andi	r23, 0xFF	; 255
    9c80:	7f 7f       	andi	r23, 0xFF	; 255
    9c82:	7f 7f       	andi	r23, 0xFF	; 255
    9c84:	7f 7f       	andi	r23, 0xFF	; 255
    9c86:	7f 7f       	andi	r23, 0xFF	; 255
    9c88:	7f 7f       	andi	r23, 0xFF	; 255
    9c8a:	7f 7f       	andi	r23, 0xFF	; 255
    9c8c:	7f 7f       	andi	r23, 0xFF	; 255
    9c8e:	7f 7f       	andi	r23, 0xFF	; 255
    9c90:	7f 7f       	andi	r23, 0xFF	; 255
    9c92:	7f 7f       	andi	r23, 0xFF	; 255
    9c94:	7f 7f       	andi	r23, 0xFF	; 255
    9c96:	7f 7f       	andi	r23, 0xFF	; 255
    9c98:	7f 7f       	andi	r23, 0xFF	; 255
    9c9a:	7f 7f       	andi	r23, 0xFF	; 255
    9c9c:	7f 7f       	andi	r23, 0xFF	; 255
    9c9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ca0:	7f 7f       	andi	r23, 0xFF	; 255
    9ca2:	7f 7f       	andi	r23, 0xFF	; 255
    9ca4:	7f 7f       	andi	r23, 0xFF	; 255
    9ca6:	7f 7f       	andi	r23, 0xFF	; 255
    9ca8:	7f 7f       	andi	r23, 0xFF	; 255
    9caa:	7f 7f       	andi	r23, 0xFF	; 255
    9cac:	7f 7f       	andi	r23, 0xFF	; 255
    9cae:	7f 7f       	andi	r23, 0xFF	; 255
    9cb0:	7f 7f       	andi	r23, 0xFF	; 255
    9cb2:	7f 7f       	andi	r23, 0xFF	; 255
    9cb4:	7f 7f       	andi	r23, 0xFF	; 255
    9cb6:	7f 7f       	andi	r23, 0xFF	; 255
    9cb8:	7f 7f       	andi	r23, 0xFF	; 255
    9cba:	7f 7f       	andi	r23, 0xFF	; 255
    9cbc:	7f 7f       	andi	r23, 0xFF	; 255
    9cbe:	7f 7f       	andi	r23, 0xFF	; 255
    9cc0:	80 80       	ld	r8, Z
    9cc2:	80 80       	ld	r8, Z
    9cc4:	80 80       	ld	r8, Z
    9cc6:	80 80       	ld	r8, Z
    9cc8:	80 80       	ld	r8, Z
    9cca:	80 80       	ld	r8, Z
    9ccc:	80 80       	ld	r8, Z
    9cce:	80 80       	ld	r8, Z
    9cd0:	80 80       	ld	r8, Z
    9cd2:	80 80       	ld	r8, Z
    9cd4:	80 80       	ld	r8, Z
    9cd6:	80 80       	ld	r8, Z
    9cd8:	80 80       	ld	r8, Z
    9cda:	80 80       	ld	r8, Z
    9cdc:	80 80       	ld	r8, Z
    9cde:	80 80       	ld	r8, Z
    9ce0:	80 80       	ld	r8, Z
    9ce2:	80 80       	ld	r8, Z
    9ce4:	80 80       	ld	r8, Z
    9ce6:	80 80       	ld	r8, Z
    9ce8:	80 80       	ld	r8, Z
    9cea:	80 80       	ld	r8, Z
    9cec:	80 80       	ld	r8, Z
    9cee:	80 80       	ld	r8, Z
    9cf0:	80 80       	ld	r8, Z
    9cf2:	80 80       	ld	r8, Z
    9cf4:	80 80       	ld	r8, Z
    9cf6:	80 80       	ld	r8, Z
    9cf8:	80 80       	ld	r8, Z
    9cfa:	80 80       	ld	r8, Z
    9cfc:	80 80       	ld	r8, Z
    9cfe:	80 80       	ld	r8, Z
    9d00:	03 09       	sbc	r16, r3
    9d02:	13 1e       	adc	r1, r19
    9d04:	28 31       	cpi	r18, 0x18	; 24
    9d06:	3a 40       	sbci	r19, 0x0A	; 10
    9d08:	46 4c       	sbci	r20, 0xC6	; 198
    9d0a:	50 54       	subi	r21, 0x40	; 64
    9d0c:	58 5b       	subi	r21, 0xB8	; 184
    9d0e:	5e 61       	ori	r21, 0x1E	; 30
    9d10:	63 65       	ori	r22, 0x53	; 83
    9d12:	67 69       	ori	r22, 0x97	; 151
    9d14:	6b 6c       	ori	r22, 0xCB	; 203
    9d16:	6e 6f       	ori	r22, 0xFE	; 254
    9d18:	70 71       	andi	r23, 0x10	; 16
    9d1a:	72 73       	andi	r23, 0x32	; 50
    9d1c:	74 75       	andi	r23, 0x54	; 84
    9d1e:	76 77       	andi	r23, 0x76	; 118
    9d20:	77 78       	andi	r23, 0x87	; 135
    9d22:	79 79       	andi	r23, 0x99	; 153
    9d24:	7a 7a       	andi	r23, 0xAA	; 170
    9d26:	7b 7b       	andi	r23, 0xBB	; 187
    9d28:	7c 7c       	andi	r23, 0xCC	; 204
    9d2a:	7c 7d       	andi	r23, 0xDC	; 220
    9d2c:	7d 7d       	andi	r23, 0xDD	; 221
    9d2e:	7e 7e       	andi	r23, 0xEE	; 238
    9d30:	7e 7e       	andi	r23, 0xEE	; 238
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7f 7f       	andi	r23, 0xFF	; 255
    9d46:	7f 7f       	andi	r23, 0xFF	; 255
    9d48:	7f 7f       	andi	r23, 0xFF	; 255
    9d4a:	7f 7f       	andi	r23, 0xFF	; 255
    9d4c:	7f 7e       	andi	r23, 0xEF	; 239
    9d4e:	7e 7e       	andi	r23, 0xEE	; 238
    9d50:	7e 7d       	andi	r23, 0xDE	; 222
    9d52:	7d 7d       	andi	r23, 0xDD	; 221
    9d54:	7c 7c       	andi	r23, 0xCC	; 204
    9d56:	7c 7b       	andi	r23, 0xBC	; 188
    9d58:	7b 7a       	andi	r23, 0xAB	; 171
    9d5a:	7a 79       	andi	r23, 0x9A	; 154
    9d5c:	79 78       	andi	r23, 0x89	; 137
    9d5e:	77 77       	andi	r23, 0x77	; 119
    9d60:	76 75       	andi	r23, 0x56	; 86
    9d62:	74 73       	andi	r23, 0x34	; 52
    9d64:	72 71       	andi	r23, 0x12	; 18
    9d66:	70 6f       	ori	r23, 0xF0	; 240
    9d68:	6e 6c       	ori	r22, 0xCE	; 206
    9d6a:	6b 69       	ori	r22, 0x9B	; 155
    9d6c:	67 65       	ori	r22, 0x57	; 87
    9d6e:	63 61       	ori	r22, 0x13	; 19
    9d70:	5e 5b       	subi	r21, 0xBE	; 190
    9d72:	58 54       	subi	r21, 0x48	; 72
    9d74:	50 4c       	sbci	r21, 0xC0	; 192
    9d76:	46 40       	sbci	r20, 0x06	; 6
    9d78:	3a 31       	cpi	r19, 0x1A	; 26
    9d7a:	28 1e       	adc	r2, r24
    9d7c:	13 09       	sbc	r17, r3
    9d7e:	03 00       	.word	0x0003	; ????
    9d80:	c6 cc       	rjmp	.-1652   	; 0x970e <waves+0xe>
    9d82:	d5 db       	rcall	.-2134   	; 0x952e <steptable+0x26>
    9d84:	df e3       	ldi	r29, 0x3F	; 63
    9d86:	e5 e7       	ldi	r30, 0x75	; 117
    9d88:	e9 ea       	ldi	r30, 0xA9	; 169
    9d8a:	eb ec       	ldi	r30, 0xCB	; 203
    9d8c:	ed ee       	ldi	r30, 0xED	; 237
    9d8e:	ef ef       	ldi	r30, 0xFF	; 255
    9d90:	f0 f0       	brcs	.+60     	; 0x9dce <waves+0x6ce>
    9d92:	f0 f1       	brcs	.+124    	; 0x9e10 <waves+0x710>
    9d94:	f1 f1       	breq	.+124    	; 0x9e12 <waves+0x712>
    9d96:	f1 f2       	breq	.-68     	; 0x9d54 <waves+0x654>
    9d98:	f2 f2       	brmi	.-68     	; 0x9d56 <waves+0x656>
    9d9a:	f2 f2       	brmi	.-68     	; 0x9d58 <waves+0x658>
    9d9c:	f2 f2       	brmi	.-68     	; 0x9d5a <waves+0x65a>
    9d9e:	f2 f3       	brmi	.-4      	; 0x9d9c <waves+0x69c>
    9da0:	f3 f3       	brvs	.-4      	; 0x9d9e <waves+0x69e>
    9da2:	f3 f3       	brvs	.-4      	; 0x9da0 <waves+0x6a0>
    9da4:	f3 f3       	brvs	.-4      	; 0x9da2 <waves+0x6a2>
    9da6:	f3 f3       	brvs	.-4      	; 0x9da4 <waves+0x6a4>
    9da8:	f3 f3       	brvs	.-4      	; 0x9da6 <waves+0x6a6>
    9daa:	f3 f3       	brvs	.-4      	; 0x9da8 <waves+0x6a8>
    9dac:	f3 f3       	brvs	.-4      	; 0x9daa <waves+0x6aa>
    9dae:	f3 f3       	brvs	.-4      	; 0x9dac <waves+0x6ac>
    9db0:	f3 f3       	brvs	.-4      	; 0x9dae <waves+0x6ae>
    9db2:	f3 f3       	brvs	.-4      	; 0x9db0 <waves+0x6b0>
    9db4:	f3 f3       	brvs	.-4      	; 0x9db2 <waves+0x6b2>
    9db6:	f3 f3       	brvs	.-4      	; 0x9db4 <waves+0x6b4>
    9db8:	f3 f3       	brvs	.-4      	; 0x9db6 <waves+0x6b6>
    9dba:	f3 f3       	brvs	.-4      	; 0x9db8 <waves+0x6b8>
    9dbc:	f3 f3       	brvs	.-4      	; 0x9dba <waves+0x6ba>
    9dbe:	f3 f3       	brvs	.-4      	; 0x9dbc <waves+0x6bc>
    9dc0:	f3 f3       	brvs	.-4      	; 0x9dbe <waves+0x6be>
    9dc2:	f3 f3       	brvs	.-4      	; 0x9dc0 <waves+0x6c0>
    9dc4:	f3 f3       	brvs	.-4      	; 0x9dc2 <waves+0x6c2>
    9dc6:	f3 f3       	brvs	.-4      	; 0x9dc4 <waves+0x6c4>
    9dc8:	f3 f3       	brvs	.-4      	; 0x9dc6 <waves+0x6c6>
    9dca:	f3 f3       	brvs	.-4      	; 0x9dc8 <waves+0x6c8>
    9dcc:	f3 f3       	brvs	.-4      	; 0x9dca <waves+0x6ca>
    9dce:	f3 f3       	brvs	.-4      	; 0x9dcc <waves+0x6cc>
    9dd0:	f3 f3       	brvs	.-4      	; 0x9dce <waves+0x6ce>
    9dd2:	f3 f3       	brvs	.-4      	; 0x9dd0 <waves+0x6d0>
    9dd4:	f3 f3       	brvs	.-4      	; 0x9dd2 <waves+0x6d2>
    9dd6:	f3 f3       	brvs	.-4      	; 0x9dd4 <waves+0x6d4>
    9dd8:	f3 f3       	brvs	.-4      	; 0x9dd6 <waves+0x6d6>
    9dda:	f3 f3       	brvs	.-4      	; 0x9dd8 <waves+0x6d8>
    9ddc:	f3 f3       	brvs	.-4      	; 0x9dda <waves+0x6da>
    9dde:	f3 f3       	brvs	.-4      	; 0x9ddc <waves+0x6dc>
    9de0:	f2 f2       	brmi	.-68     	; 0x9d9e <waves+0x69e>
    9de2:	f2 f2       	brmi	.-68     	; 0x9da0 <waves+0x6a0>
    9de4:	f2 f2       	brmi	.-68     	; 0x9da2 <waves+0x6a2>
    9de6:	f2 f2       	brmi	.-68     	; 0x9da4 <waves+0x6a4>
    9de8:	f1 f1       	breq	.+124    	; 0x9e66 <waves+0x766>
    9dea:	f1 f1       	breq	.+124    	; 0x9e68 <waves+0x768>
    9dec:	f0 f0       	brcs	.+60     	; 0x9e2a <waves+0x72a>
    9dee:	f0 ef       	ldi	r31, 0xF0	; 240
    9df0:	ef ee       	ldi	r30, 0xEF	; 239
    9df2:	ed ec       	ldi	r30, 0xCD	; 205
    9df4:	eb ea       	ldi	r30, 0xAB	; 171
    9df6:	e9 e7       	ldi	r30, 0x79	; 121
    9df8:	e5 e3       	ldi	r30, 0x35	; 53
    9dfa:	df db       	rcall	.-2114   	; 0x95ba <steptable+0xb2>
    9dfc:	d5 cc       	rjmp	.-1622   	; 0x97a8 <waves+0xa8>
    9dfe:	c6 00       	.word	0x00c6	; ????
    9e00:	00 28       	or	r0, r0
    9e02:	3d 42       	sbci	r19, 0x2D	; 45
    9e04:	30 2d       	mov	r19, r0
    9e06:	2c 2b       	or	r18, r28
    9e08:	2c 2d       	mov	r18, r12
    9e0a:	2e 2f       	mov	r18, r30
    9e0c:	30 32       	cpi	r19, 0x20	; 32
    9e0e:	33 35       	cpi	r19, 0x53	; 83
    9e10:	37 39       	cpi	r19, 0x97	; 151
    9e12:	3b 3d       	cpi	r19, 0xDB	; 219
    9e14:	3f 41       	sbci	r19, 0x1F	; 31
    9e16:	43 45       	sbci	r20, 0x53	; 83
    9e18:	48 4a       	sbci	r20, 0xA8	; 168
    9e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9e1c:	50 53       	subi	r21, 0x30	; 48
    9e1e:	55 57       	subi	r21, 0x75	; 117
    9e20:	59 5b       	subi	r21, 0xB9	; 185
    9e22:	5d 5f       	subi	r21, 0xFD	; 253
    9e24:	61 63       	ori	r22, 0x31	; 49
    9e26:	65 67       	ori	r22, 0x75	; 117
    9e28:	69 6b       	ori	r22, 0xB9	; 185
    9e2a:	6c 6e       	ori	r22, 0xEC	; 236
    9e2c:	70 71       	andi	r23, 0x10	; 16
    9e2e:	73 74       	andi	r23, 0x43	; 67
    9e30:	75 77       	andi	r23, 0x75	; 117
    9e32:	78 79       	andi	r23, 0x98	; 152
    9e34:	7a 7b       	andi	r23, 0xBA	; 186
    9e36:	7c 7d       	andi	r23, 0xDC	; 220
    9e38:	7d 7e       	andi	r23, 0xED	; 237
    9e3a:	7e 7f       	andi	r23, 0xFE	; 254
    9e3c:	7f 7f       	andi	r23, 0xFF	; 255
    9e3e:	7f 7f       	andi	r23, 0xFF	; 255
    9e40:	7f 7f       	andi	r23, 0xFF	; 255
    9e42:	7f 7f       	andi	r23, 0xFF	; 255
    9e44:	7f 7f       	andi	r23, 0xFF	; 255
    9e46:	7e 7e       	andi	r23, 0xEE	; 238
    9e48:	7d 7d       	andi	r23, 0xDD	; 221
    9e4a:	7c 7b       	andi	r23, 0xBC	; 188
    9e4c:	7a 79       	andi	r23, 0x9A	; 154
    9e4e:	78 77       	andi	r23, 0x78	; 120
    9e50:	75 74       	andi	r23, 0x45	; 69
    9e52:	73 71       	andi	r23, 0x13	; 19
    9e54:	70 6e       	ori	r23, 0xE0	; 224
    9e56:	6c 6b       	ori	r22, 0xBC	; 188
    9e58:	69 67       	ori	r22, 0x79	; 121
    9e5a:	65 63       	ori	r22, 0x35	; 53
    9e5c:	61 5f       	subi	r22, 0xF1	; 241
    9e5e:	5d 5b       	subi	r21, 0xBD	; 189
    9e60:	59 57       	subi	r21, 0x79	; 121
    9e62:	55 53       	subi	r21, 0x35	; 53
    9e64:	50 4e       	sbci	r21, 0xE0	; 224
    9e66:	4c 4a       	sbci	r20, 0xAC	; 172
    9e68:	48 45       	sbci	r20, 0x58	; 88
    9e6a:	43 41       	sbci	r20, 0x13	; 19
    9e6c:	3f 3d       	cpi	r19, 0xDF	; 223
    9e6e:	3b 39       	cpi	r19, 0x9B	; 155
    9e70:	37 35       	cpi	r19, 0x57	; 87
    9e72:	33 32       	cpi	r19, 0x23	; 35
    9e74:	30 2f       	mov	r19, r16
    9e76:	2e 2d       	mov	r18, r14
    9e78:	2c 2b       	or	r18, r28
    9e7a:	2c 2d       	mov	r18, r12
    9e7c:	30 42       	sbci	r19, 0x20	; 32
    9e7e:	3d 28       	or	r3, r13
    9e80:	00 e9       	ldi	r16, 0x90	; 144
    9e82:	e5 fe       	sbrs	r14, 5
    9e84:	d4 d7       	rcall	.+4008   	; 0xae2e <init_enemy_shark+0x7e>
    9e86:	d7 d7       	rcall	.+4014   	; 0xae36 <init_enemy_shark+0x86>
    9e88:	d6 d4       	rcall	.+2476   	; 0xa836 <LBCollides+0x44>
    9e8a:	d2 d0       	rcall	.+420    	; 0xa030 <waves+0x930>
    9e8c:	ce cc       	rjmp	.-1636   	; 0x982a <waves+0x12a>
    9e8e:	ca c8       	rjmp	.-3692   	; 0x9024 <ProcessMusic+0x58>
    9e90:	c6 c3       	rjmp	.+1932   	; 0xa61e <LBGetJoyPadState+0xe>
    9e92:	c1 bf       	out	0x31, r28	; 49
    9e94:	bd ba       	out	0x1d, r11	; 29
    9e96:	b8 b6       	in	r11, 0x38	; 56
    9e98:	b4 b1       	in	r27, 0x04	; 4
    9e9a:	af ad       	ldd	r26, Y+63	; 0x3f
    9e9c:	ab a9       	ldd	r26, Y+51	; 0x33
    9e9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9ea0:	a3 a1       	ldd	r26, Z+35	; 0x23
    9ea2:	9f 9e       	mul	r9, r31
    9ea4:	9c 9a       	sbi	0x13, 4	; 19
    9ea6:	99 97       	sbiw	r26, 0x29	; 41
    9ea8:	95 94       	asr	r9
    9eaa:	93 91       	.word	0x9193	; ????
    9eac:	90 8f       	std	Z+24, r25	; 0x18
    9eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9eb0:	8b 8a       	std	Y+19, r8	; 0x13
    9eb2:	89 88       	ldd	r8, Y+17	; 0x11
    9eb4:	88 87       	std	Y+8, r24	; 0x08
    9eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    9eb8:	85 84       	ldd	r8, Z+13	; 0x0d
    9eba:	84 84       	ldd	r8, Z+12	; 0x0c
    9ebc:	83 83       	std	Z+3, r24	; 0x03
    9ebe:	83 83       	std	Z+3, r24	; 0x03
    9ec0:	83 83       	std	Z+3, r24	; 0x03
    9ec2:	83 83       	std	Z+3, r24	; 0x03
    9ec4:	83 84       	ldd	r8, Z+11	; 0x0b
    9ec6:	84 84       	ldd	r8, Z+12	; 0x0c
    9ec8:	85 85       	ldd	r24, Z+13	; 0x0d
    9eca:	86 87       	std	Z+14, r24	; 0x0e
    9ecc:	88 88       	ldd	r8, Y+16	; 0x10
    9ece:	89 8a       	std	Y+17, r8	; 0x11
    9ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    9ed4:	90 91 93 94 	lds	r25, 0x9493
    9ed8:	95 97       	sbiw	r26, 0x25	; 37
    9eda:	99 9a       	sbi	0x13, 1	; 19
    9edc:	9c 9e       	mul	r9, r28
    9ede:	9f a1       	ldd	r25, Y+39	; 0x27
    9ee0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ee2:	a7 a9       	ldd	r26, Z+55	; 0x37
    9ee4:	ab ad       	ldd	r26, Y+59	; 0x3b
    9ee6:	af b1       	in	r26, 0x0f	; 15
    9ee8:	b4 b6       	in	r11, 0x34	; 52
    9eea:	b8 ba       	out	0x18, r11	; 24
    9eec:	bd bf       	out	0x3d, r27	; 61
    9eee:	c1 c3       	rjmp	.+1922   	; 0xa672 <LBGetJoyPadState+0x62>
    9ef0:	c6 c8       	rjmp	.-3700   	; 0x907e <ProcessMusic+0xb2>
    9ef2:	ca cc       	rjmp	.-1644   	; 0x9888 <waves+0x188>
    9ef4:	ce d0       	rcall	.+412    	; 0xa092 <waves+0x992>
    9ef6:	d2 d4       	rcall	.+2468   	; 0xa89c <LBMapSprite+0x14>
    9ef8:	d6 d7       	rcall	.+4012   	; 0xaea6 <clear_overlay+0x4>
    9efa:	d7 d7       	rcall	.+4014   	; 0xaeaa <clear_overlay+0x8>
    9efc:	d4 fe       	sbrs	r13, 4
    9efe:	e5 e9       	ldi	r30, 0x95	; 149
    9f00:	f9 f8       	.word	0xf8f9	; ????
    9f02:	f9 f5       	brne	.+126    	; 0x9f82 <waves+0x882>
    9f04:	eb e1       	ldi	r30, 0x1B	; 27
    9f06:	dd de       	rcall	.-582    	; 0x9cc2 <waves+0x5c2>
    9f08:	e0 e2       	ldi	r30, 0x20	; 32
    9f0a:	e4 e5       	ldi	r30, 0x54	; 84
    9f0c:	e6 e5       	ldi	r30, 0x56	; 86
    9f0e:	e4 e2       	ldi	r30, 0x24	; 36
    9f10:	de d9       	rcall	.-3140   	; 0x92ce <ProcessMusic+0x302>
    9f12:	d2 ca       	rjmp	.-2652   	; 0x94b8 <esmw+0x44>
    9f14:	c1 b7       	in	r28, 0x31	; 49
    9f16:	ac a2       	std	Y+36, r10	; 0x24
    9f18:	99 91       	ld	r25, Y+
    9f1a:	8a 86       	std	Y+10, r8	; 0x0a
    9f1c:	83 81       	ldd	r24, Z+3	; 0x03
    9f1e:	80 80       	ld	r8, Z
    9f20:	81 82       	std	Z+1, r8	; 0x01
    9f22:	83 85       	ldd	r24, Z+11	; 0x0b
    9f24:	86 88       	ldd	r8, Z+22	; 0x16
    9f26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9f28:	8d 8f       	std	Y+29, r24	; 0x1d
    9f2a:	90 92 93 95 	sts	0x9593, r9
    9f2e:	96 97       	sbiw	r26, 0x26	; 38
    9f30:	98 99       	sbic	0x13, 0	; 19
    9f32:	9a 9b       	sbis	0x13, 2	; 19
    9f34:	9b 9c       	mul	r9, r11
    9f36:	9d 9d       	mul	r25, r13
    9f38:	9d 9e       	mul	r9, r29
    9f3a:	9e 9e       	mul	r9, r30
    9f3c:	9f 9f       	mul	r25, r31
    9f3e:	9f 9f       	mul	r25, r31
    9f40:	9f 9f       	mul	r25, r31
    9f42:	9f 9e       	mul	r9, r31
    9f44:	9e 9e       	mul	r9, r30
    9f46:	9d 9d       	mul	r25, r13
    9f48:	9d 9c       	mul	r9, r13
    9f4a:	9b 9b       	sbis	0x13, 3	; 19
    9f4c:	9a 99       	sbic	0x13, 2	; 19
    9f4e:	98 97       	sbiw	r26, 0x28	; 40
    9f50:	96 95       	lsr	r25
    9f52:	93 92       	.word	0x9293	; ????
    9f54:	90 8f       	std	Z+24, r25	; 0x18
    9f56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9f58:	8a 88       	ldd	r8, Y+18	; 0x12
    9f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9f5c:	83 82       	std	Z+3, r8	; 0x03
    9f5e:	81 80       	ldd	r8, Z+1	; 0x01
    9f60:	80 81       	ld	r24, Z
    9f62:	83 86       	std	Z+11, r8	; 0x0b
    9f64:	8a 91       	ld	r24, -Y
    9f66:	99 a2       	std	Y+33, r9	; 0x21
    9f68:	ac b7       	in	r26, 0x3c	; 60
    9f6a:	c1 ca       	rjmp	.-2686   	; 0x94ee <esmw+0x7a>
    9f6c:	d2 d9       	rcall	.-3164   	; 0x9312 <ProcessMusic+0x346>
    9f6e:	de e2       	ldi	r29, 0x2E	; 46
    9f70:	e4 e5       	ldi	r30, 0x54	; 84
    9f72:	e6 e5       	ldi	r30, 0x56	; 86
    9f74:	e4 e2       	ldi	r30, 0x24	; 36
    9f76:	e0 de       	rcall	.-576    	; 0x9d38 <waves+0x638>
    9f78:	dd e1       	ldi	r29, 0x1D	; 29
    9f7a:	eb f5       	brvc	.+122    	; 0x9ff6 <waves+0x8f6>
    9f7c:	f9 f8       	.word	0xf8f9	; ????
    9f7e:	f9 00       	.word	0x00f9	; ????
    9f80:	07 08       	sbc	r0, r7
    9f82:	07 0b       	sbc	r16, r23
    9f84:	15 1f       	adc	r17, r21
    9f86:	23 22       	and	r2, r19
    9f88:	20 1e       	adc	r2, r16
    9f8a:	1c 1b       	sub	r17, r28
    9f8c:	1a 1b       	sub	r17, r26
    9f8e:	1c 1e       	adc	r1, r28
    9f90:	22 27       	eor	r18, r18
    9f92:	2e 36       	cpi	r18, 0x6E	; 110
    9f94:	3f 49       	sbci	r19, 0x9F	; 159
    9f96:	54 5e       	subi	r21, 0xE4	; 228
    9f98:	67 6f       	ori	r22, 0xF7	; 247
    9f9a:	76 7a       	andi	r23, 0xA6	; 166
    9f9c:	7e 7f       	andi	r23, 0xFE	; 254
    9f9e:	7f 7f       	andi	r23, 0xFF	; 255
    9fa0:	7f 7e       	andi	r23, 0xEF	; 239
    9fa2:	7d 7b       	andi	r23, 0xBD	; 189
    9fa4:	7a 78       	andi	r23, 0x8A	; 138
    9fa6:	76 74       	andi	r23, 0x46	; 70
    9fa8:	73 71       	andi	r23, 0x13	; 19
    9faa:	70 6e       	ori	r23, 0xE0	; 224
    9fac:	6d 6b       	ori	r22, 0xBD	; 189
    9fae:	6a 69       	ori	r22, 0x9A	; 154
    9fb0:	68 67       	ori	r22, 0x78	; 120
    9fb2:	66 65       	ori	r22, 0x56	; 86
    9fb4:	65 64       	ori	r22, 0x45	; 69
    9fb6:	64 63       	ori	r22, 0x34	; 52
    9fb8:	63 62       	ori	r22, 0x23	; 35
    9fba:	62 62       	ori	r22, 0x22	; 34
    9fbc:	61 61       	ori	r22, 0x11	; 17
    9fbe:	61 61       	ori	r22, 0x11	; 17
    9fc0:	61 61       	ori	r22, 0x11	; 17
    9fc2:	61 62       	ori	r22, 0x21	; 33
    9fc4:	62 62       	ori	r22, 0x22	; 34
    9fc6:	63 63       	ori	r22, 0x33	; 51
    9fc8:	63 64       	ori	r22, 0x43	; 67
    9fca:	65 65       	ori	r22, 0x55	; 85
    9fcc:	66 67       	ori	r22, 0x76	; 118
    9fce:	68 69       	ori	r22, 0x98	; 152
    9fd0:	6a 6b       	ori	r22, 0xBA	; 186
    9fd2:	6d 6e       	ori	r22, 0xED	; 237
    9fd4:	70 71       	andi	r23, 0x10	; 16
    9fd6:	73 74       	andi	r23, 0x43	; 67
    9fd8:	76 78       	andi	r23, 0x86	; 134
    9fda:	7a 7b       	andi	r23, 0xBA	; 186
    9fdc:	7d 7e       	andi	r23, 0xED	; 237
    9fde:	7f 7f       	andi	r23, 0xFF	; 255
    9fe0:	7f 7f       	andi	r23, 0xFF	; 255
    9fe2:	7e 7a       	andi	r23, 0xAE	; 174
    9fe4:	76 6f       	ori	r23, 0xF6	; 246
    9fe6:	67 5e       	subi	r22, 0xE7	; 231
    9fe8:	54 49       	sbci	r21, 0x94	; 148
    9fea:	3f 36       	cpi	r19, 0x6F	; 111
    9fec:	2e 27       	eor	r18, r30
    9fee:	22 1e       	adc	r2, r18
    9ff0:	1c 1b       	sub	r17, r28
    9ff2:	1a 1b       	sub	r17, r26
    9ff4:	1c 1e       	adc	r1, r28
    9ff6:	20 22       	and	r2, r16
    9ff8:	23 1f       	adc	r18, r19
    9ffa:	15 0b       	sbc	r17, r21
    9ffc:	07 08       	sbc	r0, r7
    9ffe:	07 00       	.word	0x0007	; ????
    a000:	1f 31       	cpi	r17, 0x1F	; 31
    a002:	3d 44       	sbci	r19, 0x4D	; 77
    a004:	4e 53       	subi	r20, 0x3E	; 62
    a006:	54 56       	subi	r21, 0x64	; 100
    a008:	5a 5f       	subi	r21, 0xFA	; 250
    a00a:	64 69       	ori	r22, 0x94	; 148
    a00c:	6e 74       	andi	r22, 0x4E	; 78
    a00e:	76 79       	andi	r23, 0x96	; 150
    a010:	7c 7f       	andi	r23, 0xFC	; 252
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7f       	andi	r23, 0xFF	; 255
    a04e:	7f 7f       	andi	r23, 0xFF	; 255
    a050:	7f 7f       	andi	r23, 0xFF	; 255
    a052:	7f 7f       	andi	r23, 0xFF	; 255
    a054:	7f 7f       	andi	r23, 0xFF	; 255
    a056:	7f 7f       	andi	r23, 0xFF	; 255
    a058:	7f 7f       	andi	r23, 0xFF	; 255
    a05a:	7f 7f       	andi	r23, 0xFF	; 255
    a05c:	7f 7f       	andi	r23, 0xFF	; 255
    a05e:	7f 7f       	andi	r23, 0xFF	; 255
    a060:	7f 7f       	andi	r23, 0xFF	; 255
    a062:	7f 7f       	andi	r23, 0xFF	; 255
    a064:	7f 7f       	andi	r23, 0xFF	; 255
    a066:	7f 7f       	andi	r23, 0xFF	; 255
    a068:	7f 7f       	andi	r23, 0xFF	; 255
    a06a:	7f 7f       	andi	r23, 0xFF	; 255
    a06c:	7f 7f       	andi	r23, 0xFF	; 255
    a06e:	7f 7f       	andi	r23, 0xFF	; 255
    a070:	7f 7f       	andi	r23, 0xFF	; 255
    a072:	7f 7f       	andi	r23, 0xFF	; 255
    a074:	7f 7f       	andi	r23, 0xFF	; 255
    a076:	7f 7f       	andi	r23, 0xFF	; 255
    a078:	7f 7f       	andi	r23, 0xFF	; 255
    a07a:	7f 7c       	andi	r23, 0xCF	; 207
    a07c:	78 71       	andi	r23, 0x18	; 24
    a07e:	68 4c       	sbci	r22, 0xC8	; 200
    a080:	2c 1c       	adc	r2, r12
    a082:	12 0c       	add	r1, r2
    a084:	0a 0b       	sbc	r16, r26
    a086:	0a 05       	cpc	r16, r10
    a088:	fd f3       	brhs	.-2      	; 0xa088 <waves+0x988>
    a08a:	e9 df       	rcall	.-46     	; 0xa05e <waves+0x95e>
    a08c:	d4 ca       	rjmp	.-2648   	; 0x9636 <steptable+0x12e>
    a08e:	c0 b7       	in	r28, 0x30	; 48
    a090:	ae a6       	std	Y+46, r10	; 0x2e
    a092:	9e 97       	sbiw	r26, 0x2e	; 46
    a094:	91 8b       	std	Z+17, r25	; 0x11
    a096:	86 85       	ldd	r24, Z+14	; 0x0e
    a098:	82 80       	ldd	r8, Z+2	; 0x02
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 87       	std	Z+8, r24	; 0x08
    a0f6:	91 9d       	mul	r25, r1
    a0f8:	ac c4       	rjmp	.+2392   	; 0xaa52 <init_default_high_scores+0x24>
    a0fa:	cb d4       	rcall	.+2454   	; 0xaa92 <init_player_state+0x10>
    a0fc:	dd f2       	brhs	.-74     	; 0xa0b4 <waves+0x9b4>
    a0fe:	fa fa       	.word	0xfafa	; ????

0000a100 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    a100:	80 91 f3 0c 	lds	r24, 0x0CF3
    a104:	90 91 7e 0d 	lds	r25, 0x0D7E
    a108:	89 17       	cp	r24, r25
    a10a:	78 f4       	brcc	.+30     	; 0xa12a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    a10c:	e8 2f       	mov	r30, r24
    a10e:	f0 e0       	ldi	r31, 0x00	; 0
    a110:	9f 01       	movw	r18, r30
    a112:	22 0f       	add	r18, r18
    a114:	33 1f       	adc	r19, r19
    a116:	e2 0f       	add	r30, r18
    a118:	f3 1f       	adc	r31, r19
    a11a:	e0 5b       	subi	r30, 0xB0	; 176
    a11c:	f3 4f       	sbci	r31, 0xF3	; 243
    a11e:	a0 81       	ld	r26, Z
    a120:	b1 81       	ldd	r27, Z+1	; 0x01
    a122:	92 81       	ldd	r25, Z+2	; 0x02
    a124:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    a126:	8f 5f       	subi	r24, 0xFF	; 255
    a128:	ed cf       	rjmp	.-38     	; 0xa104 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    a12a:	08 95       	ret

0000a12c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a12c:	2f 92       	push	r2
    a12e:	3f 92       	push	r3
    a130:	4f 92       	push	r4
    a132:	5f 92       	push	r5
    a134:	6f 92       	push	r6
    a136:	7f 92       	push	r7
    a138:	8f 92       	push	r8
    a13a:	9f 92       	push	r9
    a13c:	af 92       	push	r10
    a13e:	bf 92       	push	r11
    a140:	cf 92       	push	r12
    a142:	df 92       	push	r13
    a144:	ef 92       	push	r14
    a146:	ff 92       	push	r15
    a148:	0f 93       	push	r16
    a14a:	1f 93       	push	r17
    a14c:	cf 93       	push	r28
    a14e:	df 93       	push	r29
    a150:	00 d0       	rcall	.+0      	; 0xa152 <ProcessSprites+0x26>
    a152:	00 d0       	rcall	.+0      	; 0xa154 <ProcessSprites+0x28>
    a154:	cd b7       	in	r28, 0x3d	; 61
    a156:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    a158:	80 91 00 05 	lds	r24, 0x0500
    a15c:	88 23       	and	r24, r24
    a15e:	09 f4       	brne	.+2      	; 0xa162 <ProcessSprites+0x36>
    a160:	e0 c0       	rjmp	.+448    	; 0xa322 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    a162:	80 91 f2 0c 	lds	r24, 0x0CF2
    a166:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    a16a:	80 93 7e 0d 	sts	0x0D7E, r24
    a16e:	e0 e1       	ldi	r30, 0x10	; 16
    a170:	ce 2e       	mov	r12, r30
    a172:	e5 e0       	ldi	r30, 0x05	; 5
    a174:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    a176:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    a178:	f6 01       	movw	r30, r12
    a17a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a17c:	20 3e       	cpi	r18, 0xE0	; 224
    a17e:	09 f4       	brne	.+2      	; 0xa182 <ProcessSprites+0x56>
    a180:	b1 c0       	rjmp	.+354    	; 0xa2e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    a182:	80 91 b2 0c 	lds	r24, 0x0CB2
    a186:	90 e0       	ldi	r25, 0x00	; 0
    a188:	82 0f       	add	r24, r18
    a18a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    a18c:	41 81       	ldd	r20, Z+1	; 0x01
    a18e:	20 91 b3 0c 	lds	r18, 0x0CB3
    a192:	30 e0       	ldi	r19, 0x00	; 0
    a194:	24 0f       	add	r18, r20
    a196:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a198:	ac 01       	movw	r20, r24
    a19a:	73 e0       	ldi	r23, 0x03	; 3
    a19c:	56 95       	lsr	r21
    a19e:	47 95       	ror	r20
    a1a0:	7a 95       	dec	r23
    a1a2:	e1 f7       	brne	.-8      	; 0xa19c <ProcessSprites+0x70>
    a1a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    a1a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    a1a8:	11 f0       	breq	.+4      	; 0xa1ae <ProcessSprites+0x82>
    a1aa:	92 e0       	ldi	r25, 0x02	; 2
    a1ac:	01 c0       	rjmp	.+2      	; 0xa1b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    a1ae:	91 e0       	ldi	r25, 0x01	; 1
    a1b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a1b2:	a9 01       	movw	r20, r18
    a1b4:	63 e0       	ldi	r22, 0x03	; 3
    a1b6:	56 95       	lsr	r21
    a1b8:	47 95       	ror	r20
    a1ba:	6a 95       	dec	r22
    a1bc:	e1 f7       	brne	.-8      	; 0xa1b6 <ProcessSprites+0x8a>
    a1be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    a1c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    a1c2:	19 f0       	breq	.+6      	; 0xa1ca <ProcessSprites+0x9e>
    a1c4:	52 e0       	ldi	r21, 0x02	; 2
    a1c6:	35 2e       	mov	r3, r21
    a1c8:	02 c0       	rjmp	.+4      	; 0xa1ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    a1ca:	33 24       	eor	r3, r3
    a1cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a1ce:	30 e0       	ldi	r19, 0x00	; 0
    a1d0:	32 2f       	mov	r19, r18
    a1d2:	22 27       	eor	r18, r18
    a1d4:	f9 01       	movw	r30, r18
    a1d6:	e8 0f       	add	r30, r24
    a1d8:	f1 1d       	adc	r31, r1
    a1da:	fc 83       	std	Y+4, r31	; 0x04
    a1dc:	eb 83       	std	Y+3, r30	; 0x03
    a1de:	e1 2c       	mov	r14, r1
    a1e0:	f1 2c       	mov	r15, r1
    a1e2:	be 2c       	mov	r11, r14
    a1e4:	aa 24       	eor	r10, r10
    a1e6:	26 2c       	mov	r2, r6
    a1e8:	45 2c       	mov	r4, r5
    a1ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    a1ec:	84 2c       	mov	r8, r4
    a1ee:	91 2c       	mov	r9, r1
    a1f0:	84 2d       	mov	r24, r4
    a1f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    a1f6:	42 2f       	mov	r20, r18
    a1f8:	50 e0       	ldi	r21, 0x00	; 0
    a1fa:	44 0f       	add	r20, r20
    a1fc:	55 1f       	adc	r21, r21
    a1fe:	84 16       	cp	r8, r20
    a200:	95 06       	cpc	r9, r21
    a202:	14 f0       	brlt	.+4      	; 0xa208 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    a204:	22 0f       	add	r18, r18
    a206:	03 c0       	rjmp	.+6      	; 0xa20e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    a208:	42 16       	cp	r4, r18
    a20a:	10 f0       	brcs	.+4      	; 0xa210 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    a20c:	84 2d       	mov	r24, r4
    a20e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a210:	ff e1       	ldi	r31, 0x1F	; 31
    a212:	f2 15       	cp	r31, r2
    a214:	18 f4       	brcc	.+6      	; 0xa21c <ProcessSprites+0xf0>
    a216:	00 ee       	ldi	r16, 0xE0	; 224
    a218:	02 0d       	add	r16, r2
    a21a:	01 c0       	rjmp	.+2      	; 0xa21e <ProcessSprites+0xf2>
    a21c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    a21e:	28 2f       	mov	r18, r24
    a220:	26 95       	lsr	r18
    a222:	26 95       	lsr	r18
    a224:	26 95       	lsr	r18
    a226:	10 e0       	ldi	r17, 0x00	; 0
    a228:	40 e2       	ldi	r20, 0x20	; 32
    a22a:	24 9f       	mul	r18, r20
    a22c:	00 0d       	add	r16, r0
    a22e:	11 1d       	adc	r17, r1
    a230:	11 24       	eor	r1, r1
    a232:	23 e0       	ldi	r18, 0x03	; 3
    a234:	00 0f       	add	r16, r16
    a236:	11 1f       	adc	r17, r17
    a238:	2a 95       	dec	r18
    a23a:	e1 f7       	brne	.-8      	; 0xa234 <ProcessSprites+0x108>
    a23c:	87 70       	andi	r24, 0x07	; 7
    a23e:	08 0f       	add	r16, r24
    a240:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    a242:	00 50       	subi	r16, 0x00	; 0
    a244:	1f 4f       	sbci	r17, 0xFF	; 255
    a246:	f8 01       	movw	r30, r16
    a248:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    a24a:	81 e0       	ldi	r24, 0x01	; 1
    a24c:	7c 31       	cpi	r23, 0x1C	; 28
    a24e:	08 f4       	brcc	.+2      	; 0xa252 <ProcessSprites+0x126>
    a250:	80 e0       	ldi	r24, 0x00	; 0
    a252:	21 e0       	ldi	r18, 0x01	; 1
    a254:	30 91 f3 0c 	lds	r19, 0x0CF3
    a258:	73 17       	cp	r23, r19
    a25a:	18 f0       	brcs	.+6      	; 0xa262 <ProcessSprites+0x136>
    a25c:	20 e0       	ldi	r18, 0x00	; 0
    a25e:	88 23       	and	r24, r24
    a260:	51 f1       	breq	.+84     	; 0xa2b6 <ProcessSprites+0x18a>
    a262:	60 91 7e 0d 	lds	r22, 0x0D7E
    a266:	6c 31       	cpi	r22, 0x1C	; 28
    a268:	20 f5       	brcc	.+72     	; 0xa2b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    a26a:	88 23       	and	r24, r24
    a26c:	31 f0       	breq	.+12     	; 0xa27a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    a26e:	84 ee       	ldi	r24, 0xE4	; 228
    a270:	87 0f       	add	r24, r23
    a272:	7a 83       	std	Y+2, r23	; 0x02
    a274:	0e 94 3a 40 	call	0x8074	; 0x8074 <CopyFlashTile>
    a278:	06 c0       	rjmp	.+12     	; 0xa286 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    a27a:	22 23       	and	r18, r18
    a27c:	29 f0       	breq	.+10     	; 0xa288 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    a27e:	87 2f       	mov	r24, r23
    a280:	7a 83       	std	Y+2, r23	; 0x02
    a282:	0e 94 c9 40 	call	0x8192	; 0x8192 <CopyRamTile>
    a286:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    a288:	80 91 7e 0d 	lds	r24, 0x0D7E
    a28c:	e8 2f       	mov	r30, r24
    a28e:	f0 e0       	ldi	r31, 0x00	; 0
    a290:	9f 01       	movw	r18, r30
    a292:	22 0f       	add	r18, r18
    a294:	33 1f       	adc	r19, r19
    a296:	e2 0f       	add	r30, r18
    a298:	f3 1f       	adc	r31, r19
    a29a:	e0 5b       	subi	r30, 0xB0	; 176
    a29c:	f3 4f       	sbci	r31, 0xF3	; 243
    a29e:	11 83       	std	Z+1, r17	; 0x01
    a2a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    a2a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    a2a4:	f8 01       	movw	r30, r16
    a2a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    a2a8:	21 e0       	ldi	r18, 0x01	; 1
    a2aa:	28 0f       	add	r18, r24
    a2ac:	20 93 7e 0d 	sts	0x0D7E, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    a2b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    a2b2:	7c 31       	cpi	r23, 0x1C	; 28
    a2b4:	38 f4       	brcc	.+14     	; 0xa2c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a2b6:	2b 81       	ldd	r18, Y+3	; 0x03
    a2b8:	3c 81       	ldd	r19, Y+4	; 0x04
    a2ba:	a5 01       	movw	r20, r10
    a2bc:	67 2f       	mov	r22, r23
    a2be:	87 2d       	mov	r24, r7
    a2c0:	0e 94 56 41 	call	0x82ac	; 0x82ac <BlitSprite>
    a2c4:	ff ef       	ldi	r31, 0xFF	; 255
    a2c6:	af 1a       	sub	r10, r31
    a2c8:	bf 0a       	sbc	r11, r31
    a2ca:	23 94       	inc	r2
    a2cc:	82 2d       	mov	r24, r2
    a2ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    a2d0:	99 81       	ldd	r25, Y+1	; 0x01
    a2d2:	89 17       	cp	r24, r25
    a2d4:	08 f4       	brcc	.+2      	; 0xa2d8 <ProcessSprites+0x1ac>
    a2d6:	8c cf       	rjmp	.-232    	; 0xa1f0 <ProcessSprites+0xc4>
    a2d8:	ef ef       	ldi	r30, 0xFF	; 255
    a2da:	ee 1a       	sub	r14, r30
    a2dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    a2de:	e3 14       	cp	r14, r3
    a2e0:	08 f4       	brcc	.+2      	; 0xa2e4 <ProcessSprites+0x1b8>
    a2e2:	7f cf       	rjmp	.-258    	; 0xa1e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    a2e4:	73 94       	inc	r7
    a2e6:	f4 e0       	ldi	r31, 0x04	; 4
    a2e8:	cf 0e       	add	r12, r31
    a2ea:	d1 1c       	adc	r13, r1
    a2ec:	40 e1       	ldi	r20, 0x10	; 16
    a2ee:	74 12       	cpse	r7, r20
    a2f0:	43 cf       	rjmp	.-378    	; 0xa178 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    a2f2:	0f 90       	pop	r0
    a2f4:	0f 90       	pop	r0
    a2f6:	0f 90       	pop	r0
    a2f8:	0f 90       	pop	r0
    a2fa:	df 91       	pop	r29
    a2fc:	cf 91       	pop	r28
    a2fe:	1f 91       	pop	r17
    a300:	0f 91       	pop	r16
    a302:	ff 90       	pop	r15
    a304:	ef 90       	pop	r14
    a306:	df 90       	pop	r13
    a308:	cf 90       	pop	r12
    a30a:	bf 90       	pop	r11
    a30c:	af 90       	pop	r10
    a30e:	9f 90       	pop	r9
    a310:	8f 90       	pop	r8
    a312:	7f 90       	pop	r7
    a314:	6f 90       	pop	r6
    a316:	5f 90       	pop	r5
    a318:	4f 90       	pop	r4
    a31a:	3f 90       	pop	r3
    a31c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    a31e:	0c 94 80 50 	jmp	0xa100	; 0xa100 <RestoreBackground>

	}
    a322:	0f 90       	pop	r0
    a324:	0f 90       	pop	r0
    a326:	0f 90       	pop	r0
    a328:	0f 90       	pop	r0
    a32a:	df 91       	pop	r29
    a32c:	cf 91       	pop	r28
    a32e:	1f 91       	pop	r17
    a330:	0f 91       	pop	r16
    a332:	ff 90       	pop	r15
    a334:	ef 90       	pop	r14
    a336:	df 90       	pop	r13
    a338:	cf 90       	pop	r12
    a33a:	bf 90       	pop	r11
    a33c:	af 90       	pop	r10
    a33e:	9f 90       	pop	r9
    a340:	8f 90       	pop	r8
    a342:	7f 90       	pop	r7
    a344:	6f 90       	pop	r6
    a346:	5f 90       	pop	r5
    a348:	4f 90       	pop	r4
    a34a:	3f 90       	pop	r3
    a34c:	2f 90       	pop	r2
    a34e:	08 95       	ret

0000a350 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    a350:	90 91 b3 0c 	lds	r25, 0x0CB3
    a354:	96 0f       	add	r25, r22
    a356:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    a35a:	20 91 b2 0c 	lds	r18, 0x0CB2
    a35e:	82 0f       	add	r24, r18
    a360:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    a364:	80 91 b4 0c 	lds	r24, 0x0CB4
    a368:	80 32       	cpi	r24, 0x20	; 32
    a36a:	b0 f4       	brcc	.+44     	; 0xa398 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    a36c:	29 2f       	mov	r18, r25
    a36e:	30 e0       	ldi	r19, 0x00	; 0
    a370:	78 e0       	ldi	r23, 0x08	; 8
    a372:	87 9f       	mul	r24, r23
    a374:	a0 01       	movw	r20, r0
    a376:	11 24       	eor	r1, r1
    a378:	24 17       	cp	r18, r20
    a37a:	35 07       	cpc	r19, r21
    a37c:	6c f0       	brlt	.+26     	; 0xa398 <Scroll+0x48>
				if(dy>=0){	
    a37e:	67 fd       	sbrc	r22, 7
    a380:	05 c0       	rjmp	.+10     	; 0xa38c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    a382:	28 ef       	ldi	r18, 0xF8	; 248
    a384:	82 9f       	mul	r24, r18
    a386:	90 0d       	add	r25, r0
    a388:	11 24       	eor	r1, r1
    a38a:	04 c0       	rjmp	.+8      	; 0xa394 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    a38c:	78 e0       	ldi	r23, 0x08	; 8
    a38e:	87 9f       	mul	r24, r23
    a390:	90 0d       	add	r25, r0
    a392:	11 24       	eor	r1, r1
    a394:	90 93 b3 0c 	sts	0x0CB3, r25
    a398:	08 95       	ret

0000a39a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a39a:	e0 e1       	ldi	r30, 0x10	; 16
    a39c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a39e:	80 ee       	ldi	r24, 0xE0	; 224
    a3a0:	80 83       	st	Z, r24
    a3a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    a3a4:	95 e0       	ldi	r25, 0x05	; 5
    a3a6:	e0 35       	cpi	r30, 0x50	; 80
    a3a8:	f9 07       	cpc	r31, r25
    a3aa:	d1 f7       	brne	.-12     	; 0xa3a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    a3ac:	80 e2       	ldi	r24, 0x20	; 32
    a3ae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    a3b2:	10 92 af 0c 	sts	0x0CAF, r1
    a3b6:	08 95       	ret

0000a3b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    a3b8:	2f 92       	push	r2
    a3ba:	3f 92       	push	r3
    a3bc:	4f 92       	push	r4
    a3be:	5f 92       	push	r5
    a3c0:	6f 92       	push	r6
    a3c2:	7f 92       	push	r7
    a3c4:	8f 92       	push	r8
    a3c6:	9f 92       	push	r9
    a3c8:	af 92       	push	r10
    a3ca:	bf 92       	push	r11
    a3cc:	cf 92       	push	r12
    a3ce:	df 92       	push	r13
    a3d0:	ef 92       	push	r14
    a3d2:	ff 92       	push	r15
    a3d4:	0f 93       	push	r16
    a3d6:	1f 93       	push	r17
    a3d8:	cf 93       	push	r28
    a3da:	df 93       	push	r29
    a3dc:	00 d0       	rcall	.+0      	; 0xa3de <DrawMap+0x26>
    a3de:	1f 92       	push	r1
    a3e0:	cd b7       	in	r28, 0x3d	; 61
    a3e2:	de b7       	in	r29, 0x3e	; 62
    a3e4:	28 2f       	mov	r18, r24
    a3e6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    a3e8:	fa 01       	movw	r30, r20
    a3ea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    a3ec:	31 96       	adiw	r30, 0x01	; 1
    a3ee:	34 90       	lpm	r3, Z
    a3f0:	42 2c       	mov	r4, r2
    a3f2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a3f4:	e1 2c       	mov	r14, r1
    a3f6:	f1 2c       	mov	r15, r1
    a3f8:	00 e0       	ldi	r16, 0x00	; 0
    a3fa:	10 e0       	ldi	r17, 0x00	; 0
    a3fc:	c6 2e       	mov	r12, r22
    a3fe:	d1 2c       	mov	r13, r1
    a400:	03 15       	cp	r16, r3
    a402:	68 f5       	brcc	.+90     	; 0xa45e <DrawMap+0xa6>
    a404:	1b 82       	std	Y+3, r1	; 0x03
    a406:	1a 82       	std	Y+2, r1	; 0x02
    a408:	57 01       	movw	r10, r14
    a40a:	92 e0       	ldi	r25, 0x02	; 2
    a40c:	a9 0e       	add	r10, r25
    a40e:	b1 1c       	adc	r11, r1
    a410:	48 01       	movw	r8, r16
    a412:	8c 0c       	add	r8, r12
    a414:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    a416:	ea 81       	ldd	r30, Y+2	; 0x02
    a418:	e2 15       	cp	r30, r2
    a41a:	e0 f4       	brcc	.+56     	; 0xa454 <DrawMap+0x9c>
    a41c:	ea 81       	ldd	r30, Y+2	; 0x02
    a41e:	fb 81       	ldd	r31, Y+3	; 0x03
    a420:	ea 0d       	add	r30, r10
    a422:	fb 1d       	adc	r31, r11
    a424:	e6 0d       	add	r30, r6
    a426:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a428:	e4 91       	lpm	r30, Z
    a42a:	f0 e0       	ldi	r31, 0x00	; 0
    a42c:	60 91 b4 0c 	lds	r22, 0x0CB4
    a430:	70 e0       	ldi	r23, 0x00	; 0
    a432:	c4 01       	movw	r24, r8
    a434:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    a438:	af 01       	movw	r20, r30
    a43a:	68 2f       	mov	r22, r24
    a43c:	8a 81       	ldd	r24, Y+2	; 0x02
    a43e:	82 0f       	add	r24, r18
    a440:	29 83       	std	Y+1, r18	; 0x01
    a442:	0e 94 89 43 	call	0x8712	; 0x8712 <SetTile>
    a446:	8a 81       	ldd	r24, Y+2	; 0x02
    a448:	9b 81       	ldd	r25, Y+3	; 0x03
    a44a:	01 96       	adiw	r24, 0x01	; 1
    a44c:	9b 83       	std	Y+3, r25	; 0x03
    a44e:	8a 83       	std	Y+2, r24	; 0x02
    a450:	29 81       	ldd	r18, Y+1	; 0x01
    a452:	e1 cf       	rjmp	.-62     	; 0xa416 <DrawMap+0x5e>
    a454:	0f 5f       	subi	r16, 0xFF	; 255
    a456:	1f 4f       	sbci	r17, 0xFF	; 255
    a458:	e4 0c       	add	r14, r4
    a45a:	f5 1c       	adc	r15, r5
    a45c:	d1 cf       	rjmp	.-94     	; 0xa400 <DrawMap+0x48>
			}
		}

	}
    a45e:	0f 90       	pop	r0
    a460:	0f 90       	pop	r0
    a462:	0f 90       	pop	r0
    a464:	df 91       	pop	r29
    a466:	cf 91       	pop	r28
    a468:	1f 91       	pop	r17
    a46a:	0f 91       	pop	r16
    a46c:	ff 90       	pop	r15
    a46e:	ef 90       	pop	r14
    a470:	df 90       	pop	r13
    a472:	cf 90       	pop	r12
    a474:	bf 90       	pop	r11
    a476:	af 90       	pop	r10
    a478:	9f 90       	pop	r9
    a47a:	8f 90       	pop	r8
    a47c:	7f 90       	pop	r7
    a47e:	6f 90       	pop	r6
    a480:	5f 90       	pop	r5
    a482:	4f 90       	pop	r4
    a484:	3f 90       	pop	r3
    a486:	2f 90       	pop	r2
    a488:	08 95       	ret

0000a48a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a48a:	0f 93       	push	r16
    a48c:	1f 93       	push	r17
    a48e:	cf 93       	push	r28
    a490:	df 93       	push	r29
    a492:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a494:	c0 e0       	ldi	r28, 0x00	; 0
    a496:	d0 e0       	ldi	r29, 0x00	; 0
    a498:	c0 17       	cp	r28, r16
    a49a:	d1 07       	cpc	r29, r17
    a49c:	44 f4       	brge	.+16     	; 0xa4ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a49e:	0e 94 9f 43 	call	0x873e	; 0x873e <GetVsyncFlag>
    a4a2:	88 23       	and	r24, r24
    a4a4:	e1 f3       	breq	.-8      	; 0xa49e <WaitVsync+0x14>
		ClearVsyncFlag();		
    a4a6:	0e 94 a3 43 	call	0x8746	; 0x8746 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a4aa:	21 96       	adiw	r28, 0x01	; 1
    a4ac:	f5 cf       	rjmp	.-22     	; 0xa498 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a4ae:	df 91       	pop	r29
    a4b0:	cf 91       	pop	r28
    a4b2:	1f 91       	pop	r17
    a4b4:	0f 91       	pop	r16
    a4b6:	08 95       	ret

0000a4b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    a4b8:	83 e2       	ldi	r24, 0x23	; 35
    a4ba:	99 e0       	ldi	r25, 0x09	; 9
    a4bc:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    a4c0:	83 e2       	ldi	r24, 0x23	; 35
    a4c2:	91 e0       	ldi	r25, 0x01	; 1
    a4c4:	0e 94 9a 43 	call	0x8734	; 0x8734 <SetTileTable>
			
			//draw logo
			ClearVram();
    a4c8:	0e 94 7f 43 	call	0x86fe	; 0x86fe <ClearVram>
			WaitVsync(15);		
    a4cc:	8f e0       	ldi	r24, 0x0F	; 15
    a4ce:	90 e0       	ldi	r25, 0x00	; 0
    a4d0:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    a4d4:	41 e0       	ldi	r20, 0x01	; 1
    a4d6:	6f ef       	ldi	r22, 0xFF	; 255
    a4d8:	80 e0       	ldi	r24, 0x00	; 0
    a4da:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a4de:	4d e0       	ldi	r20, 0x0D	; 13
    a4e0:	51 e0       	ldi	r21, 0x01	; 1
    a4e2:	6c e0       	ldi	r22, 0x0C	; 12
    a4e4:	8c e0       	ldi	r24, 0x0C	; 12
    a4e6:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
			WaitVsync(3);
    a4ea:	83 e0       	ldi	r24, 0x03	; 3
    a4ec:	90 e0       	ldi	r25, 0x00	; 0
    a4ee:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    a4f2:	4c ef       	ldi	r20, 0xFC	; 252
    a4f4:	50 e0       	ldi	r21, 0x00	; 0
    a4f6:	6c e0       	ldi	r22, 0x0C	; 12
    a4f8:	8c e0       	ldi	r24, 0x0C	; 12
    a4fa:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
			WaitVsync(2);
    a4fe:	82 e0       	ldi	r24, 0x02	; 2
    a500:	90 e0       	ldi	r25, 0x00	; 0
    a502:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a506:	4d e0       	ldi	r20, 0x0D	; 13
    a508:	51 e0       	ldi	r21, 0x01	; 1
    a50a:	6c e0       	ldi	r22, 0x0C	; 12
    a50c:	8c e0       	ldi	r24, 0x0C	; 12
    a50e:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a512:	81 e4       	ldi	r24, 0x41	; 65
    a514:	90 e0       	ldi	r25, 0x00	; 0
    a516:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
			ClearVram();
    a51a:	0e 94 7f 43 	call	0x86fe	; 0x86fe <ClearVram>
			WaitVsync(20);
    a51e:	84 e1       	ldi	r24, 0x14	; 20
    a520:	90 e0       	ldi	r25, 0x00	; 0
    a522:	0c 94 45 52 	jmp	0xa48a	; 0xa48a <WaitVsync>

0000a526 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a526:	80 93 7c 0d 	sts	0x0D7C, r24
	currFadeFrame=0;
    a52a:	10 92 80 0d 	sts	0x0D80, r1
	fadeActive=true;
    a52e:	81 e0       	ldi	r24, 0x01	; 1
    a530:	80 93 7f 0d 	sts	0x0D7F, r24
		
	if(blocking){
    a534:	66 23       	and	r22, r22
    a536:	21 f0       	breq	.+8      	; 0xa540 <doFade+0x1a>
		while(fadeActive==true);
    a538:	80 91 7f 0d 	lds	r24, 0x0D7F
    a53c:	81 11       	cpse	r24, r1
    a53e:	fc cf       	rjmp	.-8      	; 0xa538 <doFade+0x12>
    a540:	08 95       	ret

0000a542 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a542:	81 11       	cpse	r24, r1
    a544:	03 c0       	rjmp	.+6      	; 0xa54c <FadeIn+0xa>
		DDRC=0xff;
    a546:	8f ef       	ldi	r24, 0xFF	; 255
    a548:	87 b9       	out	0x07, r24	; 7
		return;
    a54a:	08 95       	ret
	}
	fadeStep=1;
    a54c:	91 e0       	ldi	r25, 0x01	; 1
    a54e:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=1;
    a552:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    a556:	0c 94 93 52 	jmp	0xa526	; 0xa526 <doFade>

0000a55a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a55a:	81 11       	cpse	r24, r1
    a55c:	02 c0       	rjmp	.+4      	; 0xa562 <FadeOut+0x8>
		DDRC=0;
    a55e:	17 b8       	out	0x07, r1	; 7
		return;
    a560:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a562:	9c e0       	ldi	r25, 0x0C	; 12
    a564:	90 93 81 0d 	sts	0x0D81, r25
	fadeDir=-1;
    a568:	9f ef       	ldi	r25, 0xFF	; 255
    a56a:	90 93 7d 0d 	sts	0x0D7D, r25
	doFade(speed,blocking);
    a56e:	0c 94 93 52 	jmp	0xa526	; 0xa526 <doFade>

0000a572 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a572:	80 91 7f 0d 	lds	r24, 0x0D7F
    a576:	88 23       	and	r24, r24
    a578:	01 f1       	breq	.+64     	; 0xa5ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    a57a:	80 91 80 0d 	lds	r24, 0x0D80
    a57e:	81 11       	cpse	r24, r1
    a580:	19 c0       	rjmp	.+50     	; 0xa5b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a582:	80 91 7c 0d 	lds	r24, 0x0D7C
    a586:	80 93 80 0d 	sts	0x0D80, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a58a:	e0 91 81 0d 	lds	r30, 0x0D81
    a58e:	f0 e0       	ldi	r31, 0x00	; 0
    a590:	e1 51       	subi	r30, 0x11	; 17
    a592:	ff 4f       	sbci	r31, 0xFF	; 255
    a594:	e4 91       	lpm	r30, Z
    a596:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a598:	90 91 7d 0d 	lds	r25, 0x0D7D
    a59c:	80 91 81 0d 	lds	r24, 0x0D81
    a5a0:	89 0f       	add	r24, r25
    a5a2:	80 93 81 0d 	sts	0x0D81, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a5a6:	88 23       	and	r24, r24
    a5a8:	11 f0       	breq	.+4      	; 0xa5ae <ProcessFading+0x3c>
    a5aa:	8d 30       	cpi	r24, 0x0D	; 13
    a5ac:	31 f4       	brne	.+12     	; 0xa5ba <ProcessFading+0x48>
				fadeActive=false;
    a5ae:	10 92 7f 0d 	sts	0x0D7F, r1
    a5b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a5b4:	81 50       	subi	r24, 0x01	; 1
    a5b6:	80 93 80 0d 	sts	0x0D80, r24
    a5ba:	08 95       	ret

0000a5bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a5bc:	0e 94 b9 52 	call	0xa572	; 0xa572 <ProcessFading>
		ProcessSprites();
    a5c0:	0c 94 96 50 	jmp	0xa12c	; 0xa12c <ProcessSprites>

0000a5c4 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    a5c4:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a5c6:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a5c8:	93 81       	ldd	r25, Z+3	; 0x03
    a5ca:	9f 5f       	subi	r25, 0xFF	; 255
    a5cc:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a5ce:	42 81       	ldd	r20, Z+2	; 0x02
    a5d0:	80 81       	ld	r24, Z
    a5d2:	26 81       	ldd	r18, Z+6	; 0x06
    a5d4:	37 81       	ldd	r19, Z+7	; 0x07
    a5d6:	94 17       	cp	r25, r20
    a5d8:	30 f4       	brcc	.+12     	; 0xa5e6 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    a5da:	f9 01       	movw	r30, r18
    a5dc:	e8 0f       	add	r30, r24
    a5de:	f1 1d       	adc	r31, r1
    a5e0:	e8 0f       	add	r30, r24
    a5e2:	f1 1d       	adc	r31, r1
    a5e4:	12 c0       	rjmp	.+36     	; 0xa60a <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    a5e6:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a5e8:	90 e0       	ldi	r25, 0x00	; 0
    a5ea:	01 96       	adiw	r24, 0x01	; 1
    a5ec:	61 81       	ldd	r22, Z+1	; 0x01
    a5ee:	70 e0       	ldi	r23, 0x00	; 0
    a5f0:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    a5f4:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a5f6:	81 11       	cpse	r24, r1
    a5f8:	02 c0       	rjmp	.+4      	; 0xa5fe <LBGetNextFrame+0x3a>
    a5fa:	41 e0       	ldi	r20, 0x01	; 1
    a5fc:	44 83       	std	Z+4, r20	; 0x04
    a5fe:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    a600:	88 0f       	add	r24, r24
    a602:	99 1f       	adc	r25, r25
    a604:	f9 01       	movw	r30, r18
    a606:	e8 0f       	add	r30, r24
    a608:	f9 1f       	adc	r31, r25
    a60a:	80 81       	ld	r24, Z
    a60c:	91 81       	ldd	r25, Z+1	; 0x01
}
    a60e:	08 95       	ret

0000a610 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a610:	0f 93       	push	r16
    a612:	1f 93       	push	r17
    a614:	cf 93       	push	r28
    a616:	df 93       	push	r29
    a618:	1f 92       	push	r1
    a61a:	cd b7       	in	r28, 0x3d	; 61
    a61c:	de b7       	in	r29, 0x3e	; 62
    a61e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    a620:	86 2f       	mov	r24, r22
    a622:	69 83       	std	Y+1, r22	; 0x01
    a624:	0e 94 a9 43 	call	0x8752	; 0x8752 <ReadJoypad>
    a628:	d8 01       	movw	r26, r16
    a62a:	15 96       	adiw	r26, 0x05	; 5
    a62c:	9c 93       	st	X, r25
    a62e:	8e 93       	st	-X, r24
    a630:	14 97       	sbiw	r26, 0x04	; 4
    a632:	69 81       	ldd	r22, Y+1	; 0x01
    a634:	e6 2f       	mov	r30, r22
    a636:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a638:	00 97       	sbiw	r24, 0x00	; 0
    a63a:	51 f0       	breq	.+20     	; 0xa650 <LBGetJoyPadState+0x40>
    a63c:	df 01       	movw	r26, r30
    a63e:	aa 0f       	add	r26, r26
    a640:	bb 1f       	adc	r27, r27
    a642:	ac 50       	subi	r26, 0x0C	; 12
    a644:	b3 4f       	sbci	r27, 0xF3	; 243
    a646:	2d 91       	ld	r18, X+
    a648:	3c 91       	ld	r19, X
    a64a:	82 17       	cp	r24, r18
    a64c:	93 07       	cpc	r25, r19
    a64e:	21 f0       	breq	.+8      	; 0xa658 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a650:	d8 01       	movw	r26, r16
    a652:	16 96       	adiw	r26, 0x06	; 6
    a654:	1c 92       	st	X, r1
    a656:	07 c0       	rjmp	.+14     	; 0xa666 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a658:	d8 01       	movw	r26, r16
    a65a:	16 96       	adiw	r26, 0x06	; 6
    a65c:	2c 91       	ld	r18, X
    a65e:	16 97       	sbiw	r26, 0x06	; 6
    a660:	2f 5f       	subi	r18, 0xFF	; 255
    a662:	16 96       	adiw	r26, 0x06	; 6
    a664:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a666:	ee 0f       	add	r30, r30
    a668:	ff 1f       	adc	r31, r31
    a66a:	ec 50       	subi	r30, 0x0C	; 12
    a66c:	f3 4f       	sbci	r31, 0xF3	; 243
    a66e:	20 81       	ld	r18, Z
    a670:	31 81       	ldd	r19, Z+1	; 0x01
    a672:	a9 01       	movw	r20, r18
    a674:	40 95       	com	r20
    a676:	50 95       	com	r21
    a678:	48 23       	and	r20, r24
    a67a:	59 23       	and	r21, r25
    a67c:	d8 01       	movw	r26, r16
    a67e:	11 96       	adiw	r26, 0x01	; 1
    a680:	5c 93       	st	X, r21
    a682:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a684:	ac 01       	movw	r20, r24
    a686:	40 95       	com	r20
    a688:	50 95       	com	r21
    a68a:	24 23       	and	r18, r20
    a68c:	35 23       	and	r19, r21
    a68e:	13 96       	adiw	r26, 0x03	; 3
    a690:	3c 93       	st	X, r19
    a692:	2e 93       	st	-X, r18
    a694:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a696:	91 83       	std	Z+1, r25	; 0x01
    a698:	80 83       	st	Z, r24
}
    a69a:	0f 90       	pop	r0
    a69c:	df 91       	pop	r29
    a69e:	cf 91       	pop	r28
    a6a0:	1f 91       	pop	r17
    a6a2:	0f 91       	pop	r16
    a6a4:	08 95       	ret

0000a6a6 <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    a6a6:	90 ed       	ldi	r25, 0xD0	; 208
    a6a8:	94 0f       	add	r25, r20
    a6aa:	e0 91 82 0d 	lds	r30, 0x0D82
    a6ae:	f0 91 83 0d 	lds	r31, 0x0D83
    a6b2:	9a 30       	cpi	r25, 0x0A	; 10
    a6b4:	38 f4       	brcc	.+14     	; 0xa6c4 <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    a6b6:	24 2f       	mov	r18, r20
    a6b8:	30 e0       	ldi	r19, 0x00	; 0
    a6ba:	2d 52       	subi	r18, 0x2D	; 45
    a6bc:	31 09       	sbc	r19, r1
    a6be:	e2 0f       	add	r30, r18
    a6c0:	f3 1f       	adc	r31, r19
    a6c2:	0c c0       	rjmp	.+24     	; 0xa6dc <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    a6c4:	9f eb       	ldi	r25, 0xBF	; 191
    a6c6:	94 0f       	add	r25, r20
    a6c8:	9a 31       	cpi	r25, 0x1A	; 26
    a6ca:	38 f4       	brcc	.+14     	; 0xa6da <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    a6cc:	50 e0       	ldi	r21, 0x00	; 0
    a6ce:	44 53       	subi	r20, 0x34	; 52
    a6d0:	51 09       	sbc	r21, r1
    a6d2:	e4 0f       	add	r30, r20
    a6d4:	f5 1f       	adc	r31, r21
    a6d6:	44 91       	lpm	r20, Z
    a6d8:	03 c0       	rjmp	.+6      	; 0xa6e0 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    a6da:	32 96       	adiw	r30, 0x02	; 2
    a6dc:	e4 91       	lpm	r30, Z
    a6de:	4e 2f       	mov	r20, r30
    a6e0:	50 e0       	ldi	r21, 0x00	; 0
    a6e2:	0c 94 89 43 	jmp	0x8712	; 0x8712 <SetTile>

0000a6e6 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    a6e6:	ff 92       	push	r15
    a6e8:	0f 93       	push	r16
    a6ea:	1f 93       	push	r17
    a6ec:	cf 93       	push	r28
    a6ee:	df 93       	push	r29
    a6f0:	d8 2f       	mov	r29, r24
    a6f2:	f6 2e       	mov	r15, r22
    a6f4:	8a 01       	movw	r16, r20
	u8 i = 0;
    a6f6:	c0 e0       	ldi	r28, 0x00	; 0
    a6f8:	8c 2f       	mov	r24, r28
    a6fa:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    a6fc:	f8 01       	movw	r30, r16
    a6fe:	ec 0f       	add	r30, r28
    a700:	f1 1d       	adc	r31, r1
    a702:	44 91       	lpm	r20, Z
    a704:	44 23       	and	r20, r20
    a706:	29 f0       	breq	.+10     	; 0xa712 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    a708:	6f 2d       	mov	r22, r15
    a70a:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
		i++;
    a70e:	cf 5f       	subi	r28, 0xFF	; 255
    a710:	f3 cf       	rjmp	.-26     	; 0xa6f8 <LBPrint+0x12>
	}
}
    a712:	df 91       	pop	r29
    a714:	cf 91       	pop	r28
    a716:	1f 91       	pop	r17
    a718:	0f 91       	pop	r16
    a71a:	ff 90       	pop	r15
    a71c:	08 95       	ret

0000a71e <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    a71e:	df 92       	push	r13
    a720:	ef 92       	push	r14
    a722:	ff 92       	push	r15
    a724:	0f 93       	push	r16
    a726:	1f 93       	push	r17
    a728:	cf 93       	push	r28
    a72a:	df 93       	push	r29
    a72c:	1f 92       	push	r1
    a72e:	cd b7       	in	r28, 0x3d	; 61
    a730:	de b7       	in	r29, 0x3e	; 62
    a732:	38 2f       	mov	r19, r24
    a734:	06 2f       	mov	r16, r22
    a736:	84 2f       	mov	r24, r20
    a738:	9d ef       	ldi	r25, 0xFD	; 253
    a73a:	e9 2e       	mov	r14, r25
    a73c:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a73e:	4a e0       	ldi	r20, 0x0A	; 10
    a740:	f4 2e       	mov	r15, r20
    a742:	1f ef       	ldi	r17, 0xFF	; 255
    a744:	13 0f       	add	r17, r19
    a746:	6f 2d       	mov	r22, r15
    a748:	0e 94 e6 70 	call	0xe1cc	; 0xe1cc <__udivmodqi4>
    a74c:	d8 2e       	mov	r13, r24
    a74e:	40 e3       	ldi	r20, 0x30	; 48
    a750:	49 0f       	add	r20, r25
    a752:	60 2f       	mov	r22, r16
    a754:	83 2f       	mov	r24, r19
    a756:	29 83       	std	Y+1, r18	; 0x01
    a758:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
		value /= 10;
    a75c:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    a75e:	29 81       	ldd	r18, Y+1	; 0x01
    a760:	21 11       	cpse	r18, r1
    a762:	02 c0       	rjmp	.+4      	; 0xa768 <LBPrintByte+0x4a>
    a764:	dd 20       	and	r13, r13
    a766:	19 f0       	breq	.+6      	; 0xa76e <LBPrintByte+0x50>
    a768:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    a76a:	1e 11       	cpse	r17, r14
    a76c:	ea cf       	rjmp	.-44     	; 0xa742 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a76e:	0f 90       	pop	r0
    a770:	df 91       	pop	r29
    a772:	cf 91       	pop	r28
    a774:	1f 91       	pop	r17
    a776:	0f 91       	pop	r16
    a778:	ff 90       	pop	r15
    a77a:	ef 90       	pop	r14
    a77c:	df 90       	pop	r13
    a77e:	08 95       	ret

0000a780 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    a780:	cf 92       	push	r12
    a782:	df 92       	push	r13
    a784:	ef 92       	push	r14
    a786:	ff 92       	push	r15
    a788:	0f 93       	push	r16
    a78a:	1f 93       	push	r17
    a78c:	cf 93       	push	r28
    a78e:	df 93       	push	r29
    a790:	00 d0       	rcall	.+0      	; 0xa792 <LBPrintInt+0x12>
    a792:	cd b7       	in	r28, 0x3d	; 61
    a794:	de b7       	in	r29, 0x3e	; 62
    a796:	38 2f       	mov	r19, r24
    a798:	16 2f       	mov	r17, r22
    a79a:	ca 01       	movw	r24, r20
    a79c:	4b ef       	ldi	r20, 0xFB	; 251
    a79e:	d4 2e       	mov	r13, r20
    a7a0:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a7a2:	5a e0       	ldi	r21, 0x0A	; 10
    a7a4:	e5 2e       	mov	r14, r21
    a7a6:	f1 2c       	mov	r15, r1
    a7a8:	cc 24       	eor	r12, r12
    a7aa:	ca 94       	dec	r12
    a7ac:	c3 0e       	add	r12, r19
    a7ae:	b7 01       	movw	r22, r14
    a7b0:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    a7b4:	06 2f       	mov	r16, r22
    a7b6:	40 e3       	ldi	r20, 0x30	; 48
    a7b8:	48 0f       	add	r20, r24
    a7ba:	61 2f       	mov	r22, r17
    a7bc:	83 2f       	mov	r24, r19
    a7be:	29 83       	std	Y+1, r18	; 0x01
    a7c0:	7a 83       	std	Y+2, r23	; 0x02
    a7c2:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
		value /= 10;
    a7c6:	80 2f       	mov	r24, r16
    a7c8:	7a 81       	ldd	r23, Y+2	; 0x02
    a7ca:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a7cc:	29 81       	ldd	r18, Y+1	; 0x01
    a7ce:	21 11       	cpse	r18, r1
    a7d0:	02 c0       	rjmp	.+4      	; 0xa7d6 <LBPrintInt+0x56>
    a7d2:	00 97       	sbiw	r24, 0x00	; 0
    a7d4:	19 f0       	breq	.+6      	; 0xa7dc <LBPrintInt+0x5c>
    a7d6:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a7d8:	cd 10       	cpse	r12, r13
    a7da:	e6 cf       	rjmp	.-52     	; 0xa7a8 <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a7dc:	0f 90       	pop	r0
    a7de:	0f 90       	pop	r0
    a7e0:	df 91       	pop	r29
    a7e2:	cf 91       	pop	r28
    a7e4:	1f 91       	pop	r17
    a7e6:	0f 91       	pop	r16
    a7e8:	ff 90       	pop	r15
    a7ea:	ef 90       	pop	r14
    a7ec:	df 90       	pop	r13
    a7ee:	cf 90       	pop	r12
    a7f0:	08 95       	ret

0000a7f2 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    a7f2:	af 92       	push	r10
    a7f4:	cf 92       	push	r12
    a7f6:	ef 92       	push	r14
    a7f8:	ff 92       	push	r15
    a7fa:	0f 93       	push	r16
    a7fc:	1f 93       	push	r17
    a7fe:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    a800:	cb 01       	movw	r24, r22
    a802:	82 0f       	add	r24, r18
    a804:	91 1d       	adc	r25, r1
    a806:	e8 16       	cp	r14, r24
    a808:	f9 06       	cpc	r15, r25
    a80a:	88 f4       	brcc	.+34     	; 0xa82e <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    a80c:	ea 0c       	add	r14, r10
    a80e:	f1 1c       	adc	r15, r1
    a810:	6e 15       	cp	r22, r14
    a812:	7f 05       	cpc	r23, r15
    a814:	60 f4       	brcc	.+24     	; 0xa82e <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    a816:	cf 01       	movw	r24, r30
    a818:	84 0f       	add	r24, r20
    a81a:	91 1d       	adc	r25, r1
    a81c:	08 17       	cp	r16, r24
    a81e:	19 07       	cpc	r17, r25
    a820:	30 f4       	brcc	.+12     	; 0xa82e <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    a822:	0c 0d       	add	r16, r12
    a824:	11 1d       	adc	r17, r1
    a826:	81 e0       	ldi	r24, 0x01	; 1
    a828:	e0 17       	cp	r30, r16
    a82a:	f1 07       	cpc	r31, r17
    a82c:	08 f0       	brcs	.+2      	; 0xa830 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a82e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a830:	1f 91       	pop	r17
    a832:	0f 91       	pop	r16
    a834:	ff 90       	pop	r15
    a836:	ef 90       	pop	r14
    a838:	cf 90       	pop	r12
    a83a:	af 90       	pop	r10
    a83c:	08 95       	ret

0000a83e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a83e:	cf 93       	push	r28
    a840:	df 93       	push	r29
    a842:	d8 2f       	mov	r29, r24
    a844:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a846:	80 e0       	ldi	r24, 0x00	; 0
    a848:	90 e0       	ldi	r25, 0x00	; 0
    a84a:	0e 94 77 45 	call	0x8aee	; 0x8aee <GetPrngNumber>
    a84e:	6f ef       	ldi	r22, 0xFF	; 255
    a850:	70 e0       	ldi	r23, 0x00	; 0
    a852:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a856:	6c 2f       	mov	r22, r28
    a858:	70 e0       	ldi	r23, 0x00	; 0
    a85a:	6d 1b       	sub	r22, r29
    a85c:	71 09       	sbc	r23, r1
    a85e:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
}
    a862:	8d 0f       	add	r24, r29
    a864:	df 91       	pop	r29
    a866:	cf 91       	pop	r28
    a868:	08 95       	ret

0000a86a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a86a:	cf 93       	push	r28
    a86c:	df 93       	push	r29
    a86e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a870:	c0 e0       	ldi	r28, 0x00	; 0
    a872:	cd 17       	cp	r28, r29
    a874:	31 f0       	breq	.+12     	; 0xa882 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a876:	8f ef       	ldi	r24, 0xFF	; 255
    a878:	9f ef       	ldi	r25, 0xFF	; 255
    a87a:	0e 94 b5 43 	call	0x876a	; 0x876a <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a87e:	cf 5f       	subi	r28, 0xFF	; 255
    a880:	f8 cf       	rjmp	.-16     	; 0xa872 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a882:	df 91       	pop	r29
    a884:	cf 91       	pop	r28
    a886:	08 95       	ret

0000a888 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a888:	df 92       	push	r13
    a88a:	ef 92       	push	r14
    a88c:	ff 92       	push	r15
    a88e:	0f 93       	push	r16
    a890:	1f 93       	push	r17
    a892:	cf 93       	push	r28
    a894:	df 93       	push	r29
    a896:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a898:	fb 01       	movw	r30, r22
    a89a:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a89c:	31 96       	adiw	r30, 0x01	; 1
    a89e:	64 91       	lpm	r22, Z
    a8a0:	5f ef       	ldi	r21, 0xFF	; 255
    a8a2:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a8a4:	24 2f       	mov	r18, r20
    a8a6:	21 70       	andi	r18, 0x01	; 1
    a8a8:	40 ff       	sbrs	r20, 0
    a8aa:	04 c0       	rjmp	.+8      	; 0xa8b4 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a8ac:	95 2f       	mov	r25, r21
		dx=-1;
    a8ae:	ff 24       	eor	r15, r15
    a8b0:	fa 94       	dec	r15
    a8b2:	03 c0       	rjmp	.+6      	; 0xa8ba <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a8b4:	ff 24       	eor	r15, r15
    a8b6:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a8ba:	41 ff       	sbrs	r20, 1
    a8bc:	05 c0       	rjmp	.+10     	; 0xa8c8 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a8be:	7f ef       	ldi	r23, 0xFF	; 255
    a8c0:	76 0f       	add	r23, r22
		dy=-1;
    a8c2:	ee 24       	eor	r14, r14
    a8c4:	ea 94       	dec	r14
    a8c6:	03 c0       	rjmp	.+6      	; 0xa8ce <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a8c8:	ee 24       	eor	r14, r14
    a8ca:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a8cc:	70 e0       	ldi	r23, 0x00	; 0
    a8ce:	21 11       	cpse	r18, r1
    a8d0:	01 c0       	rjmp	.+2      	; 0xa8d4 <LBMapSprite+0x4c>
    a8d2:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a8d4:	00 e0       	ldi	r16, 0x00	; 0
    a8d6:	06 17       	cp	r16, r22
    a8d8:	09 f1       	breq	.+66     	; 0xa91c <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a8da:	71 03       	mulsu	r23, r17
    a8dc:	e0 01       	movw	r28, r0
    a8de:	11 24       	eor	r1, r1
    a8e0:	d8 2e       	mov	r13, r24
    a8e2:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a8e4:	8d 15       	cp	r24, r13
    a8e6:	b1 f0       	breq	.+44     	; 0xa914 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a8e8:	9e 01       	movw	r18, r28
    a8ea:	29 0f       	add	r18, r25
    a8ec:	31 1d       	adc	r19, r1
    a8ee:	97 fd       	sbrc	r25, 7
    a8f0:	3a 95       	dec	r19
    a8f2:	2e 5f       	subi	r18, 0xFE	; 254
    a8f4:	3f 4f       	sbci	r19, 0xFF	; 255
    a8f6:	fd 01       	movw	r30, r26
    a8f8:	e2 0f       	add	r30, r18
    a8fa:	f3 1f       	adc	r31, r19
    a8fc:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a8fe:	34 e0       	ldi	r19, 0x04	; 4
    a900:	83 9f       	mul	r24, r19
    a902:	f0 01       	movw	r30, r0
    a904:	11 24       	eor	r1, r1
    a906:	e5 55       	subi	r30, 0x55	; 85
    a908:	f0 4f       	sbci	r31, 0xF0	; 240
    a90a:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a90c:	8f 5f       	subi	r24, 0xFF	; 255
    a90e:	43 83       	std	Z+3, r20	; 0x03
    a910:	9f 0d       	add	r25, r15
    a912:	e8 cf       	rjmp	.-48     	; 0xa8e4 <LBMapSprite+0x5c>
    a914:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a916:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a918:	95 2f       	mov	r25, r21
    a91a:	dd cf       	rjmp	.-70     	; 0xa8d6 <LBMapSprite+0x4e>
	}
}
    a91c:	df 91       	pop	r29
    a91e:	cf 91       	pop	r28
    a920:	1f 91       	pop	r17
    a922:	0f 91       	pop	r16
    a924:	ff 90       	pop	r15
    a926:	ef 90       	pop	r14
    a928:	df 90       	pop	r13
    a92a:	08 95       	ret

0000a92c <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a92c:	df 92       	push	r13
    a92e:	ef 92       	push	r14
    a930:	ff 92       	push	r15
    a932:	0f 93       	push	r16
    a934:	1f 93       	push	r17
    a936:	cf 93       	push	r28
    a938:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a93a:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a93e:	98 e0       	ldi	r25, 0x08	; 8
    a940:	a9 9f       	mul	r26, r25
    a942:	70 01       	movw	r14, r0
    a944:	11 24       	eor	r1, r1
    a946:	50 e0       	ldi	r21, 0x00	; 0
    a948:	38 ef       	ldi	r19, 0xF8	; 248
    a94a:	a3 9f       	mul	r26, r19
    a94c:	30 2d       	mov	r19, r0
    a94e:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a950:	70 e0       	ldi	r23, 0x00	; 0
    a952:	70 17       	cp	r23, r16
    a954:	09 f1       	breq	.+66     	; 0xa998 <LBMoveSprite+0x6c>
    a956:	d4 2e       	mov	r13, r20
    a958:	13 2f       	mov	r17, r19
    a95a:	14 0f       	add	r17, r20
    a95c:	b8 2f       	mov	r27, r24
    a95e:	b2 0f       	add	r27, r18
    a960:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a962:	8b 17       	cp	r24, r27
    a964:	a9 f0       	breq	.+42     	; 0xa990 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a966:	c4 e0       	ldi	r28, 0x04	; 4
    a968:	8c 9f       	mul	r24, r28
    a96a:	f0 01       	movw	r30, r0
    a96c:	11 24       	eor	r1, r1
    a96e:	ef 01       	movw	r28, r30
    a970:	c5 55       	subi	r28, 0x55	; 85
    a972:	d0 4f       	sbci	r29, 0xF0	; 240
    a974:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a976:	a0 32       	cpi	r26, 0x20	; 32
    a978:	28 f4       	brcc	.+10     	; 0xa984 <LBMoveSprite+0x58>
    a97a:	e4 16       	cp	r14, r20
    a97c:	f5 06       	cpc	r15, r21
    a97e:	14 f4       	brge	.+4      	; 0xa984 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a980:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a982:	03 c0       	rjmp	.+6      	; 0xa98a <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a984:	e5 55       	subi	r30, 0x55	; 85
    a986:	f0 4f       	sbci	r31, 0xF0	; 240
    a988:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a98a:	8f 5f       	subi	r24, 0xFF	; 255
    a98c:	98 5f       	subi	r25, 0xF8	; 248
    a98e:	e9 cf       	rjmp	.-46     	; 0xa962 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a990:	7f 5f       	subi	r23, 0xFF	; 255
    a992:	48 5f       	subi	r20, 0xF8	; 248
    a994:	5f 4f       	sbci	r21, 0xFF	; 255
    a996:	dd cf       	rjmp	.-70     	; 0xa952 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a998:	df 91       	pop	r29
    a99a:	cf 91       	pop	r28
    a99c:	1f 91       	pop	r17
    a99e:	0f 91       	pop	r16
    a9a0:	ff 90       	pop	r15
    a9a2:	ef 90       	pop	r14
    a9a4:	df 90       	pop	r13
    a9a6:	08 95       	ret

0000a9a8 <LBRotateSprites>:

void LBRotateSprites()
{
    a9a8:	80 e0       	ldi	r24, 0x00	; 0
    a9aa:	90 e0       	ldi	r25, 0x00	; 0
    a9ac:	dc 01       	movw	r26, r24
    a9ae:	a5 55       	subi	r26, 0x55	; 85
    a9b0:	b0 4f       	sbci	r27, 0xF0	; 240
    a9b2:	fc 01       	movw	r30, r24
    a9b4:	e0 5f       	subi	r30, 0xF0	; 240
    a9b6:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a9b8:	13 96       	adiw	r26, 0x03	; 3
    a9ba:	2c 91       	ld	r18, X
    a9bc:	13 97       	sbiw	r26, 0x03	; 3
    a9be:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a9c0:	12 96       	adiw	r26, 0x02	; 2
    a9c2:	2c 91       	ld	r18, X
    a9c4:	12 97       	sbiw	r26, 0x02	; 2
    a9c6:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a9c8:	2c 91       	ld	r18, X
    a9ca:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a9cc:	11 96       	adiw	r26, 0x01	; 1
    a9ce:	2c 91       	ld	r18, X
    a9d0:	21 83       	std	Z+1, r18	; 0x01
    a9d2:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a9d4:	88 33       	cpi	r24, 0x38	; 56
    a9d6:	91 05       	cpc	r25, r1
    a9d8:	49 f7       	brne	.-46     	; 0xa9ac <LBRotateSprites+0x4>
    a9da:	80 91 01 05 	lds	r24, 0x0501
    a9de:	20 e0       	ldi	r18, 0x00	; 0
    a9e0:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a9e2:	94 e0       	ldi	r25, 0x04	; 4
    a9e4:	89 9f       	mul	r24, r25
    a9e6:	d0 01       	movw	r26, r0
    a9e8:	11 24       	eor	r1, r1
    a9ea:	a5 55       	subi	r26, 0x55	; 85
    a9ec:	b0 4f       	sbci	r27, 0xF0	; 240
    a9ee:	13 96       	adiw	r26, 0x03	; 3
    a9f0:	9c 91       	ld	r25, X
    a9f2:	13 97       	sbiw	r26, 0x03	; 3
    a9f4:	f9 01       	movw	r30, r18
    a9f6:	e0 5f       	subi	r30, 0xF0	; 240
    a9f8:	fa 4f       	sbci	r31, 0xFA	; 250
    a9fa:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a9fc:	12 96       	adiw	r26, 0x02	; 2
    a9fe:	9c 91       	ld	r25, X
    aa00:	12 97       	sbiw	r26, 0x02	; 2
    aa02:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    aa04:	9c 91       	ld	r25, X
    aa06:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    aa08:	11 96       	adiw	r26, 0x01	; 1
    aa0a:	9c 91       	ld	r25, X
    aa0c:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    aa0e:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    aa10:	84 31       	cpi	r24, 0x14	; 20
    aa12:	08 f0       	brcs	.+2      	; 0xaa16 <LBRotateSprites+0x6e>
    aa14:	8e e0       	ldi	r24, 0x0E	; 14
    aa16:	2c 5f       	subi	r18, 0xFC	; 252
    aa18:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    aa1a:	28 30       	cpi	r18, 0x08	; 8
    aa1c:	31 05       	cpc	r19, r1
    aa1e:	09 f7       	brne	.-62     	; 0xa9e2 <LBRotateSprites+0x3a>
    aa20:	80 93 01 05 	sts	0x0501, r24
    aa24:	08 95       	ret

0000aa26 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    aa26:	80 91 b7 0d 	lds	r24, 0x0DB7
}
    aa2a:	81 70       	andi	r24, 0x01	; 1
    aa2c:	08 95       	ret

0000aa2e <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    aa2e:	8c e8       	ldi	r24, 0x8C	; 140
    aa30:	90 e0       	ldi	r25, 0x00	; 0
    aa32:	90 93 87 0d 	sts	0x0D87, r25
    aa36:	80 93 86 0d 	sts	0x0D86, r24
    aa3a:	80 e0       	ldi	r24, 0x00	; 0
    aa3c:	90 e0       	ldi	r25, 0x00	; 0
    aa3e:	fc 01       	movw	r30, r24
    aa40:	ee 50       	subi	r30, 0x0E	; 14
    aa42:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    aa44:	e4 91       	lpm	r30, Z
    aa46:	dc 01       	movw	r26, r24
    aa48:	aa 57       	subi	r26, 0x7A	; 122
    aa4a:	b2 4f       	sbci	r27, 0xF2	; 242
    aa4c:	12 96       	adiw	r26, 0x02	; 2
    aa4e:	ec 93       	st	X, r30
    aa50:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    aa52:	8e 31       	cpi	r24, 0x1E	; 30
    aa54:	91 05       	cpc	r25, r1
    aa56:	99 f7       	brne	.-26     	; 0xaa3e <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    aa58:	08 95       	ret

0000aa5a <init_enemy_state>:

void init_enemy_state()
{
    aa5a:	80 e0       	ldi	r24, 0x00	; 0
    aa5c:	90 e0       	ldi	r25, 0x00	; 0
    aa5e:	9c 01       	movw	r18, r24
    aa60:	2a 55       	subi	r18, 0x5A	; 90
    aa62:	32 4f       	sbci	r19, 0xF2	; 242
    aa64:	f9 01       	movw	r30, r18
    aa66:	e7 54       	subi	r30, 0x47	; 71
    aa68:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    aa6a:	10 82       	st	Z, r1
    aa6c:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    aa6e:	10 82       	st	Z, r1
    aa70:	8e 5b       	subi	r24, 0xBE	; 190
    aa72:	9f 4f       	sbci	r25, 0xFF	; 255
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    aa74:	8a 34       	cpi	r24, 0x4A	; 74
    aa76:	21 e0       	ldi	r18, 0x01	; 1
    aa78:	92 07       	cpc	r25, r18
    aa7a:	89 f7       	brne	.-30     	; 0xaa5e <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    aa7c:	10 92 c1 0d 	sts	0x0DC1, r1
    aa80:	08 95       	ret

0000aa82 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    aa82:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    aa86:	88 23       	and	r24, r24
    aa88:	f9 f0       	breq	.+62     	; 0xaac8 <init_player_state+0x46>
	{
		game.player.width = 3;
    aa8a:	83 e0       	ldi	r24, 0x03	; 3
    aa8c:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 1;
    aa90:	81 e0       	ldi	r24, 0x01	; 1
    aa92:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 2;
    aa96:	82 e0       	ldi	r24, 0x02	; 2
    aa98:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    aa9c:	85 e0       	ldi	r24, 0x05	; 5
    aa9e:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    aaa2:	8b ef       	ldi	r24, 0xFB	; 251
    aaa4:	9f e0       	ldi	r25, 0x0F	; 15
    aaa6:	90 93 37 0e 	sts	0x0E37, r25
    aaaa:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    aaae:	85 e8       	ldi	r24, 0x85	; 133
    aab0:	9d e2       	ldi	r25, 0x2D	; 45
    aab2:	90 93 fc 0f 	sts	0x0FFC, r25
    aab6:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    aaba:	80 e8       	ldi	r24, 0x80	; 128
    aabc:	9d e2       	ldi	r25, 0x2D	; 45
    aabe:	90 93 fe 0f 	sts	0x0FFE, r25
    aac2:	80 93 fd 0f 	sts	0x0FFD, r24
    aac6:	2a c0       	rjmp	.+84     	; 0xab1c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    aac8:	82 e0       	ldi	r24, 0x02	; 2
    aaca:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 3;
    aace:	83 e0       	ldi	r24, 0x03	; 3
    aad0:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 4;
    aad4:	84 e0       	ldi	r24, 0x04	; 4
    aad6:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    aada:	8c e0       	ldi	r24, 0x0C	; 12
    aadc:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    aae0:	8b ef       	ldi	r24, 0xFB	; 251
    aae2:	9f e0       	ldi	r25, 0x0F	; 15
    aae4:	90 93 37 0e 	sts	0x0E37, r25
    aae8:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    aaec:	8f ea       	ldi	r24, 0xAF	; 175
    aaee:	9d e2       	ldi	r25, 0x2D	; 45
    aaf0:	90 93 fc 0f 	sts	0x0FFC, r25
    aaf4:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    aaf8:	87 ea       	ldi	r24, 0xA7	; 167
    aafa:	9d e2       	ldi	r25, 0x2D	; 45
    aafc:	90 93 fe 0f 	sts	0x0FFE, r25
    ab00:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    ab04:	8f e9       	ldi	r24, 0x9F	; 159
    ab06:	9d e2       	ldi	r25, 0x2D	; 45
    ab08:	90 93 00 10 	sts	0x1000, r25
    ab0c:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    ab10:	87 e9       	ldi	r24, 0x97	; 151
    ab12:	9d e2       	ldi	r25, 0x2D	; 45
    ab14:	90 93 02 10 	sts	0x1002, r25
    ab18:	80 93 01 10 	sts	0x1001, r24
	}
	game.player.direction = D_RIGHT;
    ab1c:	81 e0       	ldi	r24, 0x01	; 1
    ab1e:	80 93 d6 0d 	sts	0x0DD6, r24
	game.player.flags = IDLE;
    ab22:	98 e0       	ldi	r25, 0x08	; 8
    ab24:	90 93 d4 0d 	sts	0x0DD4, r25
	game.player.shield = PLAYER_SHIELD;
    ab28:	9a e0       	ldi	r25, 0x0A	; 10
    ab2a:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.idle.anim_count = 1;
    ab2e:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.frames_per_anim = 1;
    ab32:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.anims = idle_anim;
    ab36:	2d e0       	ldi	r18, 0x0D	; 13
    ab38:	30 e1       	ldi	r19, 0x10	; 16
    ab3a:	30 93 2f 0e 	sts	0x0E2F, r19
    ab3e:	20 93 2e 0e 	sts	0x0E2E, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    ab42:	27 eb       	ldi	r18, 0xB7	; 183
    ab44:	3d e2       	ldi	r19, 0x2D	; 45
    ab46:	30 93 0e 10 	sts	0x100E, r19
    ab4a:	20 93 0d 10 	sts	0x100D, r18
	
	game.player.jump.anim_count = 1;
    ab4e:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.frames_per_anim = 1;
    ab52:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.anims = jump_anim;
    ab56:	24 e8       	ldi	r18, 0x84	; 132
    ab58:	3d e0       	ldi	r19, 0x0D	; 13
    ab5a:	30 93 3f 0e 	sts	0x0E3F, r19
    ab5e:	20 93 3e 0e 	sts	0x0E3E, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    ab62:	2f e8       	ldi	r18, 0x8F	; 143
    ab64:	3d e2       	ldi	r19, 0x2D	; 45
    ab66:	30 93 85 0d 	sts	0x0D85, r19
    ab6a:	20 93 84 0d 	sts	0x0D84, r18
	
	game.player.prone.anim_count = 1;
    ab6e:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.frames_per_anim = 1;
    ab72:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.anims = prone_anim;
    ab76:	83 ea       	ldi	r24, 0xA3	; 163
    ab78:	9f e0       	ldi	r25, 0x0F	; 15
    ab7a:	90 93 47 0e 	sts	0x0E47, r25
    ab7e:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    ab82:	8a e8       	ldi	r24, 0x8A	; 138
    ab84:	9d e2       	ldi	r25, 0x2D	; 45
    ab86:	90 93 a4 0f 	sts	0x0FA4, r25
    ab8a:	80 93 a3 0f 	sts	0x0FA3, r24
	
	game.player.expl.anim_count = 3;
    ab8e:	83 e0       	ldi	r24, 0x03	; 3
    ab90:	80 93 49 0e 	sts	0x0E49, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ab94:	85 e0       	ldi	r24, 0x05	; 5
    ab96:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.expl.anims = expl_anim;
    ab9a:	87 e0       	ldi	r24, 0x07	; 7
    ab9c:	90 e1       	ldi	r25, 0x10	; 16
    ab9e:	90 93 4f 0e 	sts	0x0E4F, r25
    aba2:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    aba6:	84 ed       	ldi	r24, 0xD4	; 212
    aba8:	9d e2       	ldi	r25, 0x2D	; 45
    abaa:	90 93 08 10 	sts	0x1008, r25
    abae:	80 93 07 10 	sts	0x1007, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    abb2:	81 ed       	ldi	r24, 0xD1	; 209
    abb4:	9d e2       	ldi	r25, 0x2D	; 45
    abb6:	90 93 0a 10 	sts	0x100A, r25
    abba:	80 93 09 10 	sts	0x1009, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    abbe:	8e ec       	ldi	r24, 0xCE	; 206
    abc0:	9d e2       	ldi	r25, 0x2D	; 45
    abc2:	90 93 0c 10 	sts	0x100C, r25
    abc6:	80 93 0b 10 	sts	0x100B, r24
    abca:	ee ee       	ldi	r30, 0xEE	; 238
    abcc:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    abce:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    abd0:	25 e0       	ldi	r18, 0x05	; 5
    abd2:	30 e1       	ldi	r19, 0x10	; 16
    abd4:	df 01       	movw	r26, r30
    abd6:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    abd8:	8c 93       	st	X, r24
    abda:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    abdc:	1c 92       	st	X, r1
    abde:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    abe0:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    abe2:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    abe4:	35 83       	std	Z+5, r19	; 0x05
    abe6:	24 83       	std	Z+4, r18	; 0x04
    abe8:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    abea:	9e e0       	ldi	r25, 0x0E	; 14
    abec:	ec 33       	cpi	r30, 0x3C	; 60
    abee:	f9 07       	cpc	r31, r25
    abf0:	89 f7       	brne	.-30     	; 0xabd4 <init_player_state+0x152>
    abf2:	89 e6       	ldi	r24, 0x69	; 105
    abf4:	9d e2       	ldi	r25, 0x2D	; 45
    abf6:	90 93 06 10 	sts	0x1006, r25
    abfa:	80 93 05 10 	sts	0x1005, r24
    abfe:	08 95       	ret

0000ac00 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    ac00:	ef 92       	push	r14
    ac02:	ff 92       	push	r15
    ac04:	0f 93       	push	r16
    ac06:	1f 93       	push	r17
    ac08:	cf 93       	push	r28
    ac0a:	df 93       	push	r29
    ac0c:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    ac0e:	22 e4       	ldi	r18, 0x42	; 66
    ac10:	82 9f       	mul	r24, r18
    ac12:	c0 01       	movw	r24, r0
    ac14:	11 24       	eor	r1, r1
    ac16:	ec 01       	movw	r28, r24
    ac18:	ca 55       	subi	r28, 0x5A	; 90
    ac1a:	d2 4f       	sbci	r29, 0xF2	; 242
    ac1c:	fe 01       	movw	r30, r28
    ac1e:	eb 51       	subi	r30, 0x1B	; 27
    ac20:	ff 4f       	sbci	r31, 0xFF	; 255
    ac22:	83 e0       	ldi	r24, 0x03	; 3
    ac24:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ac26:	31 96       	adiw	r30, 0x01	; 1
    ac28:	85 e0       	ldi	r24, 0x05	; 5
    ac2a:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    ac2c:	de 01       	movw	r26, r28
    ac2e:	a6 51       	subi	r26, 0x16	; 22
    ac30:	bf 4f       	sbci	r27, 0xFF	; 255
    ac32:	e7 e0       	ldi	r30, 0x07	; 7
    ac34:	f0 e1       	ldi	r31, 0x10	; 16
    ac36:	11 96       	adiw	r26, 0x01	; 1
    ac38:	fc 93       	st	X, r31
    ac3a:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    ac3c:	84 ed       	ldi	r24, 0xD4	; 212
    ac3e:	9d e2       	ldi	r25, 0x2D	; 45
    ac40:	91 83       	std	Z+1, r25	; 0x01
    ac42:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    ac44:	81 ed       	ldi	r24, 0xD1	; 209
    ac46:	9d e2       	ldi	r25, 0x2D	; 45
    ac48:	93 83       	std	Z+3, r25	; 0x03
    ac4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    ac4c:	8e ec       	ldi	r24, 0xCE	; 206
    ac4e:	9d e2       	ldi	r25, 0x2D	; 45
    ac50:	95 83       	std	Z+5, r25	; 0x05
    ac52:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    ac54:	fe 01       	movw	r30, r28
    ac56:	ee 52       	subi	r30, 0x2E	; 46
    ac58:	ff 4f       	sbci	r31, 0xFF	; 255
    ac5a:	81 e0       	ldi	r24, 0x01	; 1
    ac5c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    ac5e:	31 96       	adiw	r30, 0x01	; 1
    ac60:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    ac62:	32 97       	sbiw	r30, 0x02	; 2
    ac64:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    ac66:	34 96       	adiw	r30, 0x04	; 4
    ac68:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    ac6a:	31 96       	adiw	r30, 0x01	; 1
    ac6c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    ac6e:	50 97       	sbiw	r26, 0x10	; 16
    ac70:	e3 e0       	ldi	r30, 0x03	; 3
    ac72:	f0 e1       	ldi	r31, 0x10	; 16
    ac74:	ed 93       	st	X+, r30
    ac76:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    ac78:	86 e6       	ldi	r24, 0x66	; 102
    ac7a:	9d e2       	ldi	r25, 0x2D	; 45
    ac7c:	91 83       	std	Z+1, r25	; 0x01
    ac7e:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    ac80:	fe 01       	movw	r30, r28
    ac82:	e2 53       	subi	r30, 0x32	; 50
    ac84:	ff 4f       	sbci	r31, 0xFF	; 255
    ac86:	11 82       	std	Z+1, r1	; 0x01
    ac88:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    ac8a:	3c 97       	sbiw	r30, 0x0c	; 12
    ac8c:	10 82       	st	Z, r1
    ac8e:	11 82       	std	Z+1, r1	; 0x01
    ac90:	12 82       	std	Z+2, r1	; 0x02
    ac92:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    ac94:	7e 01       	movw	r14, r28
    ac96:	86 ec       	ldi	r24, 0xC6	; 198
    ac98:	e8 0e       	add	r14, r24
    ac9a:	f1 1c       	adc	r15, r1
    ac9c:	80 e0       	ldi	r24, 0x00	; 0
    ac9e:	90 e0       	ldi	r25, 0x00	; 0
    aca0:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    aca4:	f7 01       	movw	r30, r14
    aca6:	60 83       	st	Z, r22
    aca8:	71 83       	std	Z+1, r23	; 0x01
    acaa:	82 83       	std	Z+2, r24	; 0x02
    acac:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    acae:	c6 53       	subi	r28, 0x36	; 54
    acb0:	df 4f       	sbci	r29, 0xFF	; 255
    acb2:	b8 01       	movw	r22, r16
    acb4:	80 e0       	ldi	r24, 0x00	; 0
    acb6:	90 e0       	ldi	r25, 0x00	; 0
    acb8:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    acbc:	68 83       	st	Y, r22
    acbe:	79 83       	std	Y+1, r23	; 0x01
    acc0:	8a 83       	std	Y+2, r24	; 0x02
    acc2:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    acc4:	df 91       	pop	r29
    acc6:	cf 91       	pop	r28
    acc8:	1f 91       	pop	r17
    acca:	0f 91       	pop	r16
    accc:	ff 90       	pop	r15
    acce:	ef 90       	pop	r14
    acd0:	08 95       	ret

0000acd2 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    acd2:	af 92       	push	r10
    acd4:	bf 92       	push	r11
    acd6:	cf 92       	push	r12
    acd8:	df 92       	push	r13
    acda:	ef 92       	push	r14
    acdc:	ff 92       	push	r15
    acde:	1f 93       	push	r17
    ace0:	cf 93       	push	r28
    ace2:	df 93       	push	r29
    ace4:	18 2f       	mov	r17, r24
    ace6:	7b 01       	movw	r14, r22
    ace8:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    acea:	82 e4       	ldi	r24, 0x42	; 66
    acec:	18 9f       	mul	r17, r24
    acee:	e0 01       	movw	r28, r0
    acf0:	11 24       	eor	r1, r1
    acf2:	ca 55       	subi	r28, 0x5A	; 90
    acf4:	d2 4f       	sbci	r29, 0xF2	; 242
    acf6:	fe 01       	movw	r30, r28
    acf8:	e7 54       	subi	r30, 0x47	; 71
    acfa:	ff 4f       	sbci	r31, 0xFF	; 255
    acfc:	91 e0       	ldi	r25, 0x01	; 1
    acfe:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ad00:	32 96       	adiw	r30, 0x02	; 2
    ad02:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    ad04:	31 97       	sbiw	r30, 0x01	; 1
    ad06:	88 e0       	ldi	r24, 0x08	; 8
    ad08:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    ad0a:	32 96       	adiw	r30, 0x02	; 2
    ad0c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad0e:	31 96       	adiw	r30, 0x01	; 1
    ad10:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    ad12:	31 96       	adiw	r30, 0x01	; 1
    ad14:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    ad16:	31 96       	adiw	r30, 0x01	; 1
    ad18:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad1a:	31 96       	adiw	r30, 0x01	; 1
    ad1c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    ad1e:	31 96       	adiw	r30, 0x01	; 1
    ad20:	82 e0       	ldi	r24, 0x02	; 2
    ad22:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    ad24:	7c 96       	adiw	r30, 0x1c	; 28
    ad26:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    ad28:	31 96       	adiw	r30, 0x01	; 1
    ad2a:	8a e0       	ldi	r24, 0x0A	; 10
    ad2c:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    ad2e:	de 01       	movw	r26, r28
    ad30:	ae 51       	subi	r26, 0x1E	; 30
    ad32:	bf 4f       	sbci	r27, 0xFF	; 255
    ad34:	e5 ea       	ldi	r30, 0xA5	; 165
    ad36:	ff e0       	ldi	r31, 0x0F	; 15
    ad38:	ed 93       	st	X+, r30
    ad3a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    ad3c:	80 e6       	ldi	r24, 0x60	; 96
    ad3e:	9d e2       	ldi	r25, 0x2D	; 45
    ad40:	91 83       	std	Z+1, r25	; 0x01
    ad42:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    ad44:	8d e5       	ldi	r24, 0x5D	; 93
    ad46:	9d e2       	ldi	r25, 0x2D	; 45
    ad48:	93 83       	std	Z+3, r25	; 0x03
    ad4a:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    ad4c:	fe 01       	movw	r30, r28
    ad4e:	e8 54       	subi	r30, 0x48	; 72
    ad50:	ff 4f       	sbci	r31, 0xFF	; 255
    ad52:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ad54:	32 97       	sbiw	r30, 0x02	; 2
    ad56:	11 82       	std	Z+1, r1	; 0x01
    ad58:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ad5a:	3c 97       	sbiw	r30, 0x0c	; 12
    ad5c:	10 82       	st	Z, r1
    ad5e:	11 82       	std	Z+1, r1	; 0x01
    ad60:	12 82       	std	Z+2, r1	; 0x02
    ad62:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    ad64:	5e 01       	movw	r10, r28
    ad66:	ee ea       	ldi	r30, 0xAE	; 174
    ad68:	ae 0e       	add	r10, r30
    ad6a:	b1 1c       	adc	r11, r1
    ad6c:	80 e0       	ldi	r24, 0x00	; 0
    ad6e:	90 e0       	ldi	r25, 0x00	; 0
    ad70:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ad74:	f5 01       	movw	r30, r10
    ad76:	60 83       	st	Z, r22
    ad78:	71 83       	std	Z+1, r23	; 0x01
    ad7a:	82 83       	std	Z+2, r24	; 0x02
    ad7c:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    ad7e:	ce 54       	subi	r28, 0x4E	; 78
    ad80:	df 4f       	sbci	r29, 0xFF	; 255
    ad82:	b6 01       	movw	r22, r12
    ad84:	80 e0       	ldi	r24, 0x00	; 0
    ad86:	90 e0       	ldi	r25, 0x00	; 0
    ad88:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ad8c:	68 83       	st	Y, r22
    ad8e:	79 83       	std	Y+1, r23	; 0x01
    ad90:	8a 83       	std	Y+2, r24	; 0x02
    ad92:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    ad94:	a6 01       	movw	r20, r12
    ad96:	b7 01       	movw	r22, r14
    ad98:	81 2f       	mov	r24, r17
}
    ad9a:	df 91       	pop	r29
    ad9c:	cf 91       	pop	r28
    ad9e:	1f 91       	pop	r17
    ada0:	ff 90       	pop	r15
    ada2:	ef 90       	pop	r14
    ada4:	df 90       	pop	r13
    ada6:	cf 90       	pop	r12
    ada8:	bf 90       	pop	r11
    adaa:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    adac:	0c 94 00 56 	jmp	0xac00	; 0xac00 <init_enemy_shot>

0000adb0 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    adb0:	af 92       	push	r10
    adb2:	bf 92       	push	r11
    adb4:	cf 92       	push	r12
    adb6:	df 92       	push	r13
    adb8:	ef 92       	push	r14
    adba:	ff 92       	push	r15
    adbc:	1f 93       	push	r17
    adbe:	cf 93       	push	r28
    adc0:	df 93       	push	r29
    adc2:	18 2f       	mov	r17, r24
    adc4:	7b 01       	movw	r14, r22
    adc6:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    adc8:	82 e4       	ldi	r24, 0x42	; 66
    adca:	18 9f       	mul	r17, r24
    adcc:	e0 01       	movw	r28, r0
    adce:	11 24       	eor	r1, r1
    add0:	ca 55       	subi	r28, 0x5A	; 90
    add2:	d2 4f       	sbci	r29, 0xF2	; 242
    add4:	fe 01       	movw	r30, r28
    add6:	e7 54       	subi	r30, 0x47	; 71
    add8:	ff 4f       	sbci	r31, 0xFF	; 255
    adda:	91 e0       	ldi	r25, 0x01	; 1
    addc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    adde:	33 96       	adiw	r30, 0x03	; 3
    ade0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ade2:	31 96       	adiw	r30, 0x01	; 1
    ade4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    ade6:	31 96       	adiw	r30, 0x01	; 1
    ade8:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    adea:	31 96       	adiw	r30, 0x01	; 1
    adec:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    adee:	31 96       	adiw	r30, 0x01	; 1
    adf0:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    adf2:	31 96       	adiw	r30, 0x01	; 1
    adf4:	84 e0       	ldi	r24, 0x04	; 4
    adf6:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    adf8:	7c 96       	adiw	r30, 0x1c	; 28
    adfa:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    adfc:	31 96       	adiw	r30, 0x01	; 1
    adfe:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    ae00:	de 01       	movw	r26, r28
    ae02:	ae 51       	subi	r26, 0x1E	; 30
    ae04:	bf 4f       	sbci	r27, 0xFF	; 255
    ae06:	e9 ea       	ldi	r30, 0xA9	; 169
    ae08:	ff e0       	ldi	r31, 0x0F	; 15
    ae0a:	ed 93       	st	X+, r30
    ae0c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    ae0e:	83 e6       	ldi	r24, 0x63	; 99
    ae10:	9d e2       	ldi	r25, 0x2D	; 45
    ae12:	91 83       	std	Z+1, r25	; 0x01
    ae14:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    ae16:	fe 01       	movw	r30, r28
    ae18:	e8 54       	subi	r30, 0x48	; 72
    ae1a:	ff 4f       	sbci	r31, 0xFF	; 255
    ae1c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    ae1e:	32 97       	sbiw	r30, 0x02	; 2
    ae20:	84 e1       	ldi	r24, 0x14	; 20
    ae22:	90 e0       	ldi	r25, 0x00	; 0
    ae24:	91 83       	std	Z+1, r25	; 0x01
    ae26:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    ae28:	3c 97       	sbiw	r30, 0x0c	; 12
    ae2a:	10 82       	st	Z, r1
    ae2c:	11 82       	std	Z+1, r1	; 0x01
    ae2e:	12 82       	std	Z+2, r1	; 0x02
    ae30:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    ae32:	5e 01       	movw	r10, r28
    ae34:	ee ea       	ldi	r30, 0xAE	; 174
    ae36:	ae 0e       	add	r10, r30
    ae38:	b1 1c       	adc	r11, r1
    ae3a:	80 e0       	ldi	r24, 0x00	; 0
    ae3c:	90 e0       	ldi	r25, 0x00	; 0
    ae3e:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ae42:	f5 01       	movw	r30, r10
    ae44:	60 83       	st	Z, r22
    ae46:	71 83       	std	Z+1, r23	; 0x01
    ae48:	82 83       	std	Z+2, r24	; 0x02
    ae4a:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    ae4c:	ce 54       	subi	r28, 0x4E	; 78
    ae4e:	df 4f       	sbci	r29, 0xFF	; 255
    ae50:	b6 01       	movw	r22, r12
    ae52:	80 e0       	ldi	r24, 0x00	; 0
    ae54:	90 e0       	ldi	r25, 0x00	; 0
    ae56:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ae5a:	68 83       	st	Y, r22
    ae5c:	79 83       	std	Y+1, r23	; 0x01
    ae5e:	8a 83       	std	Y+2, r24	; 0x02
    ae60:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    ae62:	a6 01       	movw	r20, r12
    ae64:	b7 01       	movw	r22, r14
    ae66:	81 2f       	mov	r24, r17
}
    ae68:	df 91       	pop	r29
    ae6a:	cf 91       	pop	r28
    ae6c:	1f 91       	pop	r17
    ae6e:	ff 90       	pop	r15
    ae70:	ef 90       	pop	r14
    ae72:	df 90       	pop	r13
    ae74:	cf 90       	pop	r12
    ae76:	bf 90       	pop	r11
    ae78:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    ae7a:	0c 94 00 56 	jmp	0xac00	; 0xac00 <init_enemy_shot>

0000ae7e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    ae7e:	cf 93       	push	r28
    ae80:	df 93       	push	r29
    ae82:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    ae84:	bc 01       	movw	r22, r24
    ae86:	88 81       	ld	r24, Y
    ae88:	99 81       	ldd	r25, Y+1	; 0x01
    ae8a:	0e 94 44 45 	call	0x8a88	; 0x8a88 <EepromReadBlock>
	if (status == 0x03)
    ae8e:	83 30       	cpi	r24, 0x03	; 3
    ae90:	29 f4       	brne	.+10     	; 0xae9c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    ae92:	ce 01       	movw	r24, r28
	}
}
    ae94:	df 91       	pop	r29
    ae96:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    ae98:	0c 94 fa 44 	jmp	0x89f4	; 0x89f4 <EepromWriteBlock>
	}
}
    ae9c:	df 91       	pop	r29
    ae9e:	cf 91       	pop	r28
    aea0:	08 95       	ret

0000aea2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    aea2:	1f 93       	push	r17
    aea4:	cf 93       	push	r28
    aea6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    aea8:	d0 e0       	ldi	r29, 0x00	; 0
    aeaa:	10 e2       	ldi	r17, 0x20	; 32
    aeac:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    aeae:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    aeb0:	c1 17       	cp	r28, r17
    aeb2:	41 f0       	breq	.+16     	; 0xaec4 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    aeb4:	40 e0       	ldi	r20, 0x00	; 0
    aeb6:	50 e0       	ldi	r21, 0x00	; 0
    aeb8:	6c 2f       	mov	r22, r28
    aeba:	8d 2f       	mov	r24, r29
    aebc:	0e 94 89 43 	call	0x8712	; 0x8712 <SetTile>
    aec0:	cf 5f       	subi	r28, 0xFF	; 255
    aec2:	f6 cf       	rjmp	.-20     	; 0xaeb0 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    aec4:	df 5f       	subi	r29, 0xFF	; 255
    aec6:	dc 31       	cpi	r29, 0x1C	; 28
    aec8:	91 f7       	brne	.-28     	; 0xaeae <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    aeca:	df 91       	pop	r29
    aecc:	cf 91       	pop	r28
    aece:	1f 91       	pop	r17
    aed0:	08 95       	ret

0000aed2 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    aed2:	ef 92       	push	r14
    aed4:	ff 92       	push	r15
    aed6:	0f 93       	push	r16
    aed8:	1f 93       	push	r17
    aeda:	cf 93       	push	r28
    aedc:	df 93       	push	r29
    aede:	8c 01       	movw	r16, r24
    aee0:	7b 01       	movw	r14, r22
    aee2:	ea 01       	movw	r28, r20
	if (is_space())
    aee4:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    aee8:	b7 01       	movw	r22, r14
    aeea:	6e 5f       	subi	r22, 0xFE	; 254
    aeec:	7f 4f       	sbci	r23, 0xFF	; 255
    aeee:	88 23       	and	r24, r24
    aef0:	41 f0       	breq	.+16     	; 0xaf02 <get_level_tile+0x30>
	{
		return read_level_byte(level_data, 2 + y*32+x);
    aef2:	85 e0       	ldi	r24, 0x05	; 5
    aef4:	cc 0f       	add	r28, r28
    aef6:	dd 1f       	adc	r29, r29
    aef8:	8a 95       	dec	r24
    aefa:	e1 f7       	brne	.-8      	; 0xaef4 <get_level_tile+0x22>
    aefc:	6c 0f       	add	r22, r28
    aefe:	7d 1f       	adc	r23, r29
    af00:	09 c0       	rjmp	.+18     	; 0xaf14 <get_level_tile+0x42>
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    af02:	80 91 b8 0d 	lds	r24, 0x0DB8
    af06:	8c 9f       	mul	r24, r28
    af08:	90 01       	movw	r18, r0
    af0a:	8d 9f       	mul	r24, r29
    af0c:	30 0d       	add	r19, r0
    af0e:	11 24       	eor	r1, r1
    af10:	62 0f       	add	r22, r18
    af12:	73 1f       	adc	r23, r19
}

#if RLE == 0
u8 read_level_byte(char* level_data, u16 index)
{
	return pgm_read_byte(&level_data[index]);
    af14:	f8 01       	movw	r30, r16
    af16:	e6 0f       	add	r30, r22
    af18:	f7 1f       	adc	r31, r23
    af1a:	84 91       	lpm	r24, Z
	if (is_space())
	{
		return read_level_byte(level_data, 2 + y*32+x);
	}
	return read_level_byte(level_data, 2 + y*game.level_width+x);
}
    af1c:	df 91       	pop	r29
    af1e:	cf 91       	pop	r28
    af20:	1f 91       	pop	r17
    af22:	0f 91       	pop	r16
    af24:	ff 90       	pop	r15
    af26:	ef 90       	pop	r14
    af28:	08 95       	ret

0000af2a <render_camera_view>:

void render_camera_view()
{
    af2a:	6f 92       	push	r6
    af2c:	7f 92       	push	r7
    af2e:	8f 92       	push	r8
    af30:	9f 92       	push	r9
    af32:	af 92       	push	r10
    af34:	bf 92       	push	r11
    af36:	cf 92       	push	r12
    af38:	df 92       	push	r13
    af3a:	ef 92       	push	r14
    af3c:	ff 92       	push	r15
    af3e:	0f 93       	push	r16
    af40:	1f 93       	push	r17
    af42:	cf 93       	push	r28
    af44:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    af46:	e0 90 aa 0d 	lds	r14, 0x0DAA
    af4a:	f0 90 ab 0d 	lds	r15, 0x0DAB
    af4e:	83 e0       	ldi	r24, 0x03	; 3
    af50:	f6 94       	lsr	r15
    af52:	e7 94       	ror	r14
    af54:	8a 95       	dec	r24
    af56:	e1 f7       	brne	.-8      	; 0xaf50 <render_camera_view+0x26>
	u16 camera_y_tile = game.camera_y/8;
    af58:	00 91 ac 0d 	lds	r16, 0x0DAC
    af5c:	10 91 ad 0d 	lds	r17, 0x0DAD
    af60:	93 e0       	ldi	r25, 0x03	; 3
    af62:	16 95       	lsr	r17
    af64:	07 95       	ror	r16
    af66:	9a 95       	dec	r25
    af68:	e1 f7       	brne	.-8      	; 0xaf62 <render_camera_view+0x38>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    af6a:	37 01       	movw	r6, r14
    af6c:	67 01       	movw	r12, r14
    af6e:	8c e1       	ldi	r24, 0x1C	; 28
    af70:	c8 0e       	add	r12, r24
    af72:	d1 1c       	adc	r13, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    af74:	58 01       	movw	r10, r16
    af76:	8a e1       	ldi	r24, 0x1A	; 26
    af78:	a8 0e       	add	r10, r24
    af7a:	b1 1c       	adc	r11, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    af7c:	2e e1       	ldi	r18, 0x1E	; 30
    af7e:	82 2e       	mov	r8, r18
    af80:	91 2c       	mov	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    af82:	c6 14       	cp	r12, r6
    af84:	d7 04       	cpc	r13, r7
    af86:	70 f1       	brcs	.+92     	; 0xafe4 <render_camera_view+0xba>
    af88:	e8 01       	movw	r28, r16
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    af8a:	ac 16       	cp	r10, r28
    af8c:	bd 06       	cpc	r11, r29
    af8e:	30 f1       	brcs	.+76     	; 0xafdc <render_camera_view+0xb2>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    af90:	ae 01       	movw	r20, r28
    af92:	b3 01       	movw	r22, r6
    af94:	80 91 a1 0f 	lds	r24, 0x0FA1
    af98:	90 91 a2 0f 	lds	r25, 0x0FA2
    af9c:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    afa0:	28 2f       	mov	r18, r24
    afa2:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    afa4:	80 91 b3 0c 	lds	r24, 0x0CB3
    afa8:	86 95       	lsr	r24
    afaa:	86 95       	lsr	r24
    afac:	86 95       	lsr	r24
    afae:	90 e0       	ldi	r25, 0x00	; 0
    afb0:	80 1b       	sub	r24, r16
    afb2:	91 0b       	sbc	r25, r17
    afb4:	8c 0f       	add	r24, r28
    afb6:	9d 1f       	adc	r25, r29
    afb8:	b4 01       	movw	r22, r8
    afba:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    afbe:	90 91 b2 0c 	lds	r25, 0x0CB2
    afc2:	96 95       	lsr	r25
    afc4:	96 95       	lsr	r25
    afc6:	96 95       	lsr	r25
    afc8:	9e 19       	sub	r25, r14
    afca:	96 0d       	add	r25, r6
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    afcc:	a9 01       	movw	r20, r18
    afce:	68 2f       	mov	r22, r24
    afd0:	89 2f       	mov	r24, r25
    afd2:	8f 71       	andi	r24, 0x1F	; 31
    afd4:	0e 94 89 43 	call	0x8712	; 0x8712 <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    afd8:	21 96       	adiw	r28, 0x01	; 1
    afda:	d7 cf       	rjmp	.-82     	; 0xaf8a <render_camera_view+0x60>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    afdc:	8f ef       	ldi	r24, 0xFF	; 255
    afde:	68 1a       	sub	r6, r24
    afe0:	78 0a       	sbc	r7, r24
    afe2:	cf cf       	rjmp	.-98     	; 0xaf82 <render_camera_view+0x58>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    afe4:	df 91       	pop	r29
    afe6:	cf 91       	pop	r28
    afe8:	1f 91       	pop	r17
    afea:	0f 91       	pop	r16
    afec:	ff 90       	pop	r15
    afee:	ef 90       	pop	r14
    aff0:	df 90       	pop	r13
    aff2:	cf 90       	pop	r12
    aff4:	bf 90       	pop	r11
    aff6:	af 90       	pop	r10
    aff8:	9f 90       	pop	r9
    affa:	8f 90       	pop	r8
    affc:	7f 90       	pop	r7
    affe:	6f 90       	pop	r6
    b000:	08 95       	ret

0000b002 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    b002:	ff 92       	push	r15
    b004:	0f 93       	push	r16
    b006:	1f 93       	push	r17
    b008:	cf 93       	push	r28
    b00a:	df 93       	push	r29
    b00c:	00 d0       	rcall	.+0      	; 0xb00e <spawn_enemy+0xc>
    b00e:	cd b7       	in	r28, 0x3d	; 61
    b010:	de b7       	in	r29, 0x3e	; 62
    b012:	26 ea       	ldi	r18, 0xA6	; 166
    b014:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b016:	f1 2c       	mov	r15, r1
    b018:	f9 01       	movw	r30, r18
    b01a:	e7 54       	subi	r30, 0x47	; 71
    b01c:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    b01e:	40 81       	ld	r20, Z
    b020:	41 11       	cpse	r20, r1
    b022:	1c c0       	rjmp	.+56     	; 0xb05c <spawn_enemy+0x5a>
    b024:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    b026:	40 81       	ld	r20, Z
    b028:	41 11       	cpse	r20, r1
    b02a:	18 c0       	rjmp	.+48     	; 0xb05c <spawn_enemy+0x5a>
    b02c:	ab 01       	movw	r20, r22
    b02e:	8c 01       	movw	r16, r24
				{
					if (is_space())
    b030:	69 83       	std	Y+1, r22	; 0x01
    b032:	5a 83       	std	Y+2, r21	; 0x02
    b034:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    b038:	49 81       	ldd	r20, Y+1	; 0x01
    b03a:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    b03c:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    b03e:	88 23       	and	r24, r24
    b040:	21 f0       	breq	.+8      	; 0xb04a <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    b042:	8f 2d       	mov	r24, r15
    b044:	0e 94 d8 56 	call	0xadb0	; 0xadb0 <init_enemy_shark>
    b048:	03 c0       	rjmp	.+6      	; 0xb050 <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    b04a:	8f 2d       	mov	r24, r15
    b04c:	0e 94 69 56 	call	0xacd2	; 0xacd2 <init_enemy_spider>
					}
					game.active_enemies++;
    b050:	80 91 c1 0d 	lds	r24, 0x0DC1
    b054:	8f 5f       	subi	r24, 0xFF	; 255
    b056:	80 93 c1 0d 	sts	0x0DC1, r24
    b05a:	06 c0       	rjmp	.+12     	; 0xb068 <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b05c:	f3 94       	inc	r15
    b05e:	2e 5b       	subi	r18, 0xBE	; 190
    b060:	3f 4f       	sbci	r19, 0xFF	; 255
    b062:	45 e0       	ldi	r20, 0x05	; 5
    b064:	f4 12       	cpse	r15, r20
    b066:	d8 cf       	rjmp	.-80     	; 0xb018 <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    b068:	0f 90       	pop	r0
    b06a:	0f 90       	pop	r0
    b06c:	df 91       	pop	r29
    b06e:	cf 91       	pop	r28
    b070:	1f 91       	pop	r17
    b072:	0f 91       	pop	r16
    b074:	ff 90       	pop	r15
    b076:	08 95       	ret

0000b078 <solid_tile>:

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
    b078:	8b 30       	cpi	r24, 0x0B	; 11
    b07a:	30 f4       	brcc	.+12     	; 0xb088 <solid_tile+0x10>
    b07c:	89 30       	cpi	r24, 0x09	; 9
    b07e:	48 f4       	brcc	.+18     	; 0xb092 <solid_tile+0x1a>
    b080:	81 50       	subi	r24, 0x01	; 1
    b082:	84 30       	cpi	r24, 0x04	; 4
    b084:	20 f4       	brcc	.+8      	; 0xb08e <solid_tile+0x16>
    b086:	05 c0       	rjmp	.+10     	; 0xb092 <solid_tile+0x1a>
    b088:	8c 50       	subi	r24, 0x0C	; 12
    b08a:	83 30       	cpi	r24, 0x03	; 3
    b08c:	10 f0       	brcs	.+4      	; 0xb092 <solid_tile+0x1a>
		case L_ICICLE_UP : return 1;
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
    b08e:	80 e0       	ldi	r24, 0x00	; 0
    b090:	08 95       	ret

u8 solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    b092:	81 e0       	ldi	r24, 0x01	; 1
		case L_FIRE_BOTTOM : return 1;
		case L_FIRE_TOP : return 1;
		case L_FIRE_LAVA : return 1;
	}
	return 0;
}
    b094:	08 95       	ret

0000b096 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b096:	cf 92       	push	r12
    b098:	df 92       	push	r13
    b09a:	ef 92       	push	r14
    b09c:	ff 92       	push	r15
    b09e:	0f 93       	push	r16
    b0a0:	1f 93       	push	r17
    b0a2:	cf 93       	push	r28
    b0a4:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;
    b0a6:	69 e1       	ldi	r22, 0x19	; 25
    b0a8:	80 e0       	ldi	r24, 0x00	; 0
    b0aa:	0e 94 1f 54 	call	0xa83e	; 0xa83e <LBRandom>
    b0ae:	88 0f       	add	r24, r24
    b0b0:	88 0f       	add	r24, r24
    b0b2:	88 0f       	add	r24, r24

	game.column_count++;
    b0b4:	20 91 b2 0d 	lds	r18, 0x0DB2
    b0b8:	30 91 b3 0d 	lds	r19, 0x0DB3
    b0bc:	2f 5f       	subi	r18, 0xFF	; 255
    b0be:	3f 4f       	sbci	r19, 0xFF	; 255
    b0c0:	30 93 b3 0d 	sts	0x0DB3, r19
    b0c4:	20 93 b2 0d 	sts	0x0DB2, r18
    b0c8:	c0 e0       	ldi	r28, 0x00	; 0
    b0ca:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    b0cc:	d1 2c       	mov	r13, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b0ce:	3e e1       	ldi	r19, 0x1E	; 30
    b0d0:	e3 2e       	mov	r14, r19
    b0d2:	f1 2c       	mov	r15, r1
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
		{
			if (is_space())
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    b0d4:	08 2f       	mov	r16, r24
    b0d6:	10 e0       	ldi	r17, 0x00	; 0
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b0d8:	40 91 ac 0d 	lds	r20, 0x0DAC
    b0dc:	50 91 ad 0d 	lds	r21, 0x0DAD
    b0e0:	23 e0       	ldi	r18, 0x03	; 3
    b0e2:	56 95       	lsr	r21
    b0e4:	47 95       	ror	r20
    b0e6:	2a 95       	dec	r18
    b0e8:	e1 f7       	brne	.-8      	; 0xb0e2 <append_tile_column+0x4c>
    b0ea:	4c 0f       	add	r20, r28
    b0ec:	5d 1f       	adc	r21, r29
    b0ee:	60 91 a6 0d 	lds	r22, 0x0DA6
    b0f2:	70 91 a7 0d 	lds	r23, 0x0DA7
    b0f6:	80 91 a1 0f 	lds	r24, 0x0FA1
    b0fa:	90 91 a2 0f 	lds	r25, 0x0FA2
    b0fe:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    b102:	c8 2e       	mov	r12, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b104:	28 2f       	mov	r18, r24
    b106:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b108:	90 91 b3 0c 	lds	r25, 0x0CB3
    b10c:	96 95       	lsr	r25
    b10e:	96 95       	lsr	r25
    b110:	96 95       	lsr	r25
    b112:	ae 01       	movw	r20, r28
    b114:	49 0f       	add	r20, r25
    b116:	51 1d       	adc	r21, r1
    b118:	ca 01       	movw	r24, r20
    b11a:	b7 01       	movw	r22, r14
    b11c:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b120:	a9 01       	movw	r20, r18
    b122:	68 2f       	mov	r22, r24
    b124:	80 91 bf 0d 	lds	r24, 0x0DBF
    b128:	0e 94 89 43 	call	0x8712	; 0x8712 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    b12c:	20 91 c2 0d 	lds	r18, 0x0DC2
    b130:	30 e0       	ldi	r19, 0x00	; 0
    b132:	80 91 b2 0d 	lds	r24, 0x0DB2
    b136:	90 91 b3 0d 	lds	r25, 0x0DB3
    b13a:	b9 01       	movw	r22, r18
    b13c:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    b140:	21 50       	subi	r18, 0x01	; 1
    b142:	31 09       	sbc	r19, r1
    b144:	82 17       	cp	r24, r18
    b146:	93 07       	cpc	r25, r19
    b148:	91 f5       	brne	.+100    	; 0xb1ae <append_tile_column+0x118>
    b14a:	80 91 c1 0d 	lds	r24, 0x0DC1
    b14e:	85 30       	cpi	r24, 0x05	; 5
    b150:	70 f5       	brcc	.+92     	; 0xb1ae <append_tile_column+0x118>
    b152:	d1 10       	cpse	r13, r1
    b154:	2a c0       	rjmp	.+84     	; 0xb1aa <append_tile_column+0x114>
		{
			if (is_space())
    b156:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    b15a:	88 23       	and	r24, r24
    b15c:	31 f0       	breq	.+12     	; 0xb16a <append_tile_column+0xd4>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom);
    b15e:	80 91 aa 0d 	lds	r24, 0x0DAA
    b162:	90 91 ab 0d 	lds	r25, 0x0DAB
    b166:	b8 01       	movw	r22, r16
    b168:	1c c0       	rjmp	.+56     	; 0xb1a2 <append_tile_column+0x10c>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    b16a:	8c 2d       	mov	r24, r12
    b16c:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    b170:	88 23       	and	r24, r24
    b172:	e9 f0       	breq	.+58     	; 0xb1ae <append_tile_column+0x118>
			{
				spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + y - 1)*8);
    b174:	20 91 ac 0d 	lds	r18, 0x0DAC
    b178:	30 91 ad 0d 	lds	r19, 0x0DAD
    b17c:	83 e0       	ldi	r24, 0x03	; 3
    b17e:	36 95       	lsr	r19
    b180:	27 95       	ror	r18
    b182:	8a 95       	dec	r24
    b184:	e1 f7       	brne	.-8      	; 0xb17e <append_tile_column+0xe8>
    b186:	21 50       	subi	r18, 0x01	; 1
    b188:	30 4e       	sbci	r19, 0xE0	; 224
    b18a:	2c 0f       	add	r18, r28
    b18c:	3d 1f       	adc	r19, r29
    b18e:	b9 01       	movw	r22, r18
    b190:	93 e0       	ldi	r25, 0x03	; 3
    b192:	66 0f       	add	r22, r22
    b194:	77 1f       	adc	r23, r23
    b196:	9a 95       	dec	r25
    b198:	e1 f7       	brne	.-8      	; 0xb192 <append_tile_column+0xfc>
    b19a:	80 91 aa 0d 	lds	r24, 0x0DAA
    b19e:	90 91 ab 0d 	lds	r25, 0x0DAB
    b1a2:	80 52       	subi	r24, 0x20	; 32
    b1a4:	9f 4f       	sbci	r25, 0xFF	; 255
    b1a6:	0e 94 01 58 	call	0xb002	; 0xb002 <spawn_enemy>
    b1aa:	dd 24       	eor	r13, r13
    b1ac:	d3 94       	inc	r13
    b1ae:	21 96       	adiw	r28, 0x01	; 1
	u8 enemy_spawned = 0;
	u8 level_tile;
	u8 rndom = LBRandom(0, CAMERA_HEIGHT-1)*8;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    b1b0:	cb 31       	cpi	r28, 0x1B	; 27
    b1b2:	d1 05       	cpc	r29, r1
    b1b4:	09 f0       	breq	.+2      	; 0xb1b8 <append_tile_column+0x122>
    b1b6:	90 cf       	rjmp	.-224    	; 0xb0d8 <append_tile_column+0x42>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    b1b8:	c0 91 a6 0d 	lds	r28, 0x0DA6
    b1bc:	d0 91 a7 0d 	lds	r29, 0x0DA7
    b1c0:	21 96       	adiw	r28, 0x01	; 1
    b1c2:	d0 93 a7 0d 	sts	0x0DA7, r29
    b1c6:	c0 93 a6 0d 	sts	0x0DA6, r28
	game.scroll_dest_x++;
    b1ca:	80 91 bf 0d 	lds	r24, 0x0DBF
    b1ce:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b1d0:	80 32       	cpi	r24, 0x20	; 32
    b1d2:	18 f4       	brcc	.+6      	; 0xb1da <append_tile_column+0x144>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b1d4:	80 93 bf 0d 	sts	0x0DBF, r24
    b1d8:	02 c0       	rjmp	.+4      	; 0xb1de <append_tile_column+0x148>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b1da:	10 92 bf 0d 	sts	0x0DBF, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    b1de:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    b1e2:	88 23       	and	r24, r24
    b1e4:	31 f0       	breq	.+12     	; 0xb1f2 <append_tile_column+0x15c>
    b1e6:	a0 97       	sbiw	r28, 0x20	; 32
    b1e8:	20 f0       	brcs	.+8      	; 0xb1f2 <append_tile_column+0x15c>
    b1ea:	10 92 a7 0d 	sts	0x0DA7, r1
    b1ee:	10 92 a6 0d 	sts	0x0DA6, r1
}
    b1f2:	df 91       	pop	r29
    b1f4:	cf 91       	pop	r28
    b1f6:	1f 91       	pop	r17
    b1f8:	0f 91       	pop	r16
    b1fa:	ff 90       	pop	r15
    b1fc:	ef 90       	pop	r14
    b1fe:	df 90       	pop	r13
    b200:	cf 90       	pop	r12
    b202:	08 95       	ret

0000b204 <append_tile_row>:

void append_tile_row()
{
    b204:	cf 93       	push	r28
    b206:	df 93       	push	r29
    b208:	c0 e0       	ldi	r28, 0x00	; 0
    b20a:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    b20c:	40 91 a8 0d 	lds	r20, 0x0DA8
    b210:	50 91 a9 0d 	lds	r21, 0x0DA9
    b214:	60 91 aa 0d 	lds	r22, 0x0DAA
    b218:	70 91 ab 0d 	lds	r23, 0x0DAB
    b21c:	83 e0       	ldi	r24, 0x03	; 3
    b21e:	76 95       	lsr	r23
    b220:	67 95       	ror	r22
    b222:	8a 95       	dec	r24
    b224:	e1 f7       	brne	.-8      	; 0xb21e <append_tile_row+0x1a>
    b226:	6c 0f       	add	r22, r28
    b228:	7d 1f       	adc	r23, r29
    b22a:	80 91 a1 0f 	lds	r24, 0x0FA1
    b22e:	90 91 a2 0f 	lds	r25, 0x0FA2
    b232:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b236:	48 2f       	mov	r20, r24
    b238:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    b23a:	80 91 b2 0c 	lds	r24, 0x0CB2
    b23e:	86 95       	lsr	r24
    b240:	86 95       	lsr	r24
    b242:	86 95       	lsr	r24
    b244:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b246:	60 91 c0 0d 	lds	r22, 0x0DC0
    b24a:	8f 71       	andi	r24, 0x1F	; 31
    b24c:	0e 94 89 43 	call	0x8712	; 0x8712 <SetTile>
    b250:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    b252:	cd 31       	cpi	r28, 0x1D	; 29
    b254:	d1 05       	cpc	r29, r1
    b256:	d1 f6       	brne	.-76     	; 0xb20c <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    b258:	80 91 a8 0d 	lds	r24, 0x0DA8
    b25c:	90 91 a9 0d 	lds	r25, 0x0DA9
    b260:	01 96       	adiw	r24, 0x01	; 1
    b262:	90 93 a9 0d 	sts	0x0DA9, r25
    b266:	80 93 a8 0d 	sts	0x0DA8, r24
	game.scroll_dest_y++;
    b26a:	80 91 c0 0d 	lds	r24, 0x0DC0
    b26e:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    b270:	8e 31       	cpi	r24, 0x1E	; 30
    b272:	18 f4       	brcc	.+6      	; 0xb27a <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    b274:	80 93 c0 0d 	sts	0x0DC0, r24
    b278:	02 c0       	rjmp	.+4      	; 0xb27e <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    b27a:	10 92 c0 0d 	sts	0x0DC0, r1
}
    b27e:	df 91       	pop	r29
    b280:	cf 91       	pop	r28
    b282:	08 95       	ret

0000b284 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b284:	80 91 aa 0d 	lds	r24, 0x0DAA
    b288:	90 91 ab 0d 	lds	r25, 0x0DAB
    b28c:	01 96       	adiw	r24, 0x01	; 1
    b28e:	90 93 ab 0d 	sts	0x0DAB, r25
    b292:	80 93 aa 0d 	sts	0x0DAA, r24
	Scroll(1,0);
    b296:	60 e0       	ldi	r22, 0x00	; 0
    b298:	81 e0       	ldi	r24, 0x01	; 1
    b29a:	0e 94 a8 51 	call	0xa350	; 0xa350 <Scroll>
	if (++game.scroll_x == 8)
    b29e:	80 91 bd 0d 	lds	r24, 0x0DBD
    b2a2:	8f 5f       	subi	r24, 0xFF	; 255
    b2a4:	88 30       	cpi	r24, 0x08	; 8
    b2a6:	19 f0       	breq	.+6      	; 0xb2ae <move_camera_x+0x2a>
    b2a8:	80 93 bd 0d 	sts	0x0DBD, r24
    b2ac:	08 95       	ret
	{
		game.scroll_x = 0;
    b2ae:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    b2b2:	0c 94 4b 58 	jmp	0xb096	; 0xb096 <append_tile_column>

0000b2b6 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    b2b6:	80 91 ac 0d 	lds	r24, 0x0DAC
    b2ba:	90 91 ad 0d 	lds	r25, 0x0DAD
    b2be:	02 96       	adiw	r24, 0x02	; 2
    b2c0:	90 93 ad 0d 	sts	0x0DAD, r25
    b2c4:	80 93 ac 0d 	sts	0x0DAC, r24
	game.scroll_y+=2;
    b2c8:	80 91 be 0d 	lds	r24, 0x0DBE
    b2cc:	8e 5f       	subi	r24, 0xFE	; 254
    b2ce:	80 93 be 0d 	sts	0x0DBE, r24
	Scroll(0,2);
    b2d2:	62 e0       	ldi	r22, 0x02	; 2
    b2d4:	80 e0       	ldi	r24, 0x00	; 0
    b2d6:	0e 94 a8 51 	call	0xa350	; 0xa350 <Scroll>
	if (game.scroll_y == 8)
    b2da:	80 91 be 0d 	lds	r24, 0x0DBE
    b2de:	88 30       	cpi	r24, 0x08	; 8
    b2e0:	21 f4       	brne	.+8      	; 0xb2ea <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    b2e2:	10 92 be 0d 	sts	0x0DBE, r1
		append_tile_row();
    b2e6:	0c 94 02 59 	jmp	0xb204	; 0xb204 <append_tile_row>
    b2ea:	08 95       	ret

0000b2ec <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b2ec:	82 e0       	ldi	r24, 0x02	; 2
    b2ee:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b2f2:	85 e0       	ldi	r24, 0x05	; 5
    b2f4:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.anims = run_anim;
    b2f8:	eb ef       	ldi	r30, 0xFB	; 251
    b2fa:	ff e0       	ldi	r31, 0x0F	; 15
    b2fc:	f0 93 37 0e 	sts	0x0E37, r31
    b300:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b304:	86 e7       	ldi	r24, 0x76	; 118
    b306:	9d e2       	ldi	r25, 0x2D	; 45
    b308:	91 83       	std	Z+1, r25	; 0x01
    b30a:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b30c:	8c e6       	ldi	r24, 0x6C	; 108
    b30e:	9d e2       	ldi	r25, 0x2D	; 45
    b310:	93 83       	std	Z+3, r25	; 0x03
    b312:	82 83       	std	Z+2, r24	; 0x02
    b314:	08 95       	ret

0000b316 <map_level_info>:
}

void map_level_info(char* level)
{
    b316:	cf 93       	push	r28
    b318:	df 93       	push	r29
    b31a:	ec 01       	movw	r28, r24
	game.current_level = level;
    b31c:	90 93 a2 0f 	sts	0x0FA2, r25
    b320:	80 93 a1 0f 	sts	0x0FA1, r24
	if (!is_space())
    b324:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    b328:	81 11       	cpse	r24, r1
    b32a:	09 c0       	rjmp	.+18     	; 0xb33e <map_level_info+0x28>
}

#if RLE == 0
u8 read_level_byte(char* level_data, u16 index)
{
	return pgm_read_byte(&level_data[index]);
    b32c:	fe 01       	movw	r30, r28
    b32e:	84 91       	lpm	r24, Z
void map_level_info(char* level)
{
	game.current_level = level;
	if (!is_space())
	{
		game.level_width = read_level_byte(level, 0);
    b330:	80 93 b8 0d 	sts	0x0DB8, r24
}

#if RLE == 0
u8 read_level_byte(char* level_data, u16 index)
{
	return pgm_read_byte(&level_data[index]);
    b334:	31 96       	adiw	r30, 0x01	; 1
    b336:	e4 91       	lpm	r30, Z
{
	game.current_level = level;
	if (!is_space())
	{
		game.level_width = read_level_byte(level, 0);
		game.level_height = read_level_byte(level, 1);
    b338:	e0 93 b9 0d 	sts	0x0DB9, r30
    b33c:	06 c0       	rjmp	.+12     	; 0xb34a <map_level_info+0x34>
		
	}
	else
	{
		game.level_width = 255;
    b33e:	8f ef       	ldi	r24, 0xFF	; 255
    b340:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = 26;
    b344:	8a e1       	ldi	r24, 0x1A	; 26
    b346:	80 93 b9 0d 	sts	0x0DB9, r24
	}
}
    b34a:	df 91       	pop	r29
    b34c:	cf 91       	pop	r28
    b34e:	08 95       	ret

0000b350 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b350:	2f 92       	push	r2
    b352:	3f 92       	push	r3
    b354:	4f 92       	push	r4
    b356:	5f 92       	push	r5
    b358:	6f 92       	push	r6
    b35a:	7f 92       	push	r7
    b35c:	8f 92       	push	r8
    b35e:	9f 92       	push	r9
    b360:	af 92       	push	r10
    b362:	bf 92       	push	r11
    b364:	cf 92       	push	r12
    b366:	df 92       	push	r13
    b368:	ef 92       	push	r14
    b36a:	ff 92       	push	r15
    b36c:	0f 93       	push	r16
    b36e:	1f 93       	push	r17
    b370:	cf 93       	push	r28
    b372:	df 93       	push	r29
    b374:	00 d0       	rcall	.+0      	; 0xb376 <on_solid_ground+0x26>
    b376:	00 d0       	rcall	.+0      	; 0xb378 <on_solid_ground+0x28>
    b378:	00 d0       	rcall	.+0      	; 0xb37a <on_solid_ground+0x2a>
    b37a:	cd b7       	in	r28, 0x3d	; 61
    b37c:	de b7       	in	r29, 0x3e	; 62
    b37e:	9e 83       	std	Y+6, r25	; 0x06
    b380:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b382:	88 e0       	ldi	r24, 0x08	; 8
    b384:	48 9f       	mul	r20, r24
    b386:	a0 01       	movw	r20, r0
    b388:	11 24       	eor	r1, r1
    b38a:	26 2e       	mov	r2, r22
    b38c:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b38e:	00 e0       	ldi	r16, 0x00	; 0
    b390:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b392:	ca 01       	movw	r24, r20
    b394:	aa 27       	eor	r26, r26
    b396:	97 fd       	sbrc	r25, 7
    b398:	a0 95       	com	r26
    b39a:	ba 2f       	mov	r27, r26
    b39c:	89 83       	std	Y+1, r24	; 0x01
    b39e:	9a 83       	std	Y+2, r25	; 0x02
    b3a0:	ab 83       	std	Y+3, r26	; 0x03
    b3a2:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b3a4:	02 15       	cp	r16, r2
    b3a6:	13 05       	cpc	r17, r3
    b3a8:	09 f4       	brne	.+2      	; 0xb3ac <on_solid_ground+0x5c>
    b3aa:	85 c0       	rjmp	.+266    	; 0xb4b6 <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b3ac:	69 81       	ldd	r22, Y+1	; 0x01
    b3ae:	7a 81       	ldd	r23, Y+2	; 0x02
    b3b0:	8b 81       	ldd	r24, Y+3	; 0x03
    b3b2:	9c 81       	ldd	r25, Y+4	; 0x04
    b3b4:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    b3b8:	4b 01       	movw	r8, r22
    b3ba:	5c 01       	movw	r10, r24
    b3bc:	b8 01       	movw	r22, r16
    b3be:	88 27       	eor	r24, r24
    b3c0:	77 fd       	sbrc	r23, 7
    b3c2:	80 95       	com	r24
    b3c4:	98 2f       	mov	r25, r24
    b3c6:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    b3ca:	6b 01       	movw	r12, r22
    b3cc:	7c 01       	movw	r14, r24
    b3ce:	ad 81       	ldd	r26, Y+5	; 0x05
    b3d0:	be 81       	ldd	r27, Y+6	; 0x06
    b3d2:	18 96       	adiw	r26, 0x08	; 8
    b3d4:	2d 91       	ld	r18, X+
    b3d6:	3d 91       	ld	r19, X+
    b3d8:	4d 91       	ld	r20, X+
    b3da:	5c 91       	ld	r21, X
    b3dc:	1b 97       	sbiw	r26, 0x0b	; 11
    b3de:	c5 01       	movw	r24, r10
    b3e0:	b4 01       	movw	r22, r8
    b3e2:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b3e6:	20 e0       	ldi	r18, 0x00	; 0
    b3e8:	30 e0       	ldi	r19, 0x00	; 0
    b3ea:	40 e0       	ldi	r20, 0x00	; 0
    b3ec:	5e e3       	ldi	r21, 0x3E	; 62
    b3ee:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b3f2:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b3f6:	2b 01       	movw	r4, r22
    b3f8:	3c 01       	movw	r6, r24
    b3fa:	20 e0       	ldi	r18, 0x00	; 0
    b3fc:	30 e0       	ldi	r19, 0x00	; 0
    b3fe:	40 e0       	ldi	r20, 0x00	; 0
    b400:	5e e3       	ldi	r21, 0x3E	; 62
    b402:	ed 81       	ldd	r30, Y+5	; 0x05
    b404:	fe 81       	ldd	r31, Y+6	; 0x06
    b406:	64 81       	ldd	r22, Z+4	; 0x04
    b408:	75 81       	ldd	r23, Z+5	; 0x05
    b40a:	86 81       	ldd	r24, Z+6	; 0x06
    b40c:	97 81       	ldd	r25, Z+7	; 0x07
    b40e:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b412:	a7 01       	movw	r20, r14
    b414:	96 01       	movw	r18, r12
    b416:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b41a:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b41e:	a2 01       	movw	r20, r4
    b420:	80 91 a1 0f 	lds	r24, 0x0FA1
    b424:	90 91 a2 0f 	lds	r25, 0x0FA2
    b428:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    b42c:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b42e:	ad 81       	ldd	r26, Y+5	; 0x05
    b430:	be 81       	ldd	r27, Y+6	; 0x06
    b432:	18 96       	adiw	r26, 0x08	; 8
    b434:	2d 91       	ld	r18, X+
    b436:	3d 91       	ld	r19, X+
    b438:	4d 91       	ld	r20, X+
    b43a:	5c 91       	ld	r21, X
    b43c:	1b 97       	sbiw	r26, 0x0b	; 11
    b43e:	c5 01       	movw	r24, r10
    b440:	b4 01       	movw	r22, r8
    b442:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b446:	20 e0       	ldi	r18, 0x00	; 0
    b448:	30 e0       	ldi	r19, 0x00	; 0
    b44a:	40 e0       	ldi	r20, 0x00	; 0
    b44c:	5e e3       	ldi	r21, 0x3E	; 62
    b44e:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b452:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b456:	4b 01       	movw	r8, r22
    b458:	5c 01       	movw	r10, r24
    b45a:	20 e0       	ldi	r18, 0x00	; 0
    b45c:	30 e0       	ldi	r19, 0x00	; 0
    b45e:	40 ee       	ldi	r20, 0xE0	; 224
    b460:	50 e4       	ldi	r21, 0x40	; 64
    b462:	ed 81       	ldd	r30, Y+5	; 0x05
    b464:	fe 81       	ldd	r31, Y+6	; 0x06
    b466:	64 81       	ldd	r22, Z+4	; 0x04
    b468:	75 81       	ldd	r23, Z+5	; 0x05
    b46a:	86 81       	ldd	r24, Z+6	; 0x06
    b46c:	97 81       	ldd	r25, Z+7	; 0x07
    b46e:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b472:	20 e0       	ldi	r18, 0x00	; 0
    b474:	30 e0       	ldi	r19, 0x00	; 0
    b476:	40 e0       	ldi	r20, 0x00	; 0
    b478:	5e e3       	ldi	r21, 0x3E	; 62
    b47a:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b47e:	a7 01       	movw	r20, r14
    b480:	96 01       	movw	r18, r12
    b482:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b486:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b48a:	a4 01       	movw	r20, r8
    b48c:	80 91 a1 0f 	lds	r24, 0x0FA1
    b490:	90 91 a2 0f 	lds	r25, 0x0FA2
    b494:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    b498:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    b49a:	87 2d       	mov	r24, r7
    b49c:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    b4a0:	81 11       	cpse	r24, r1
    b4a2:	0b c0       	rjmp	.+22     	; 0xb4ba <on_solid_ground+0x16a>
    b4a4:	8f 2d       	mov	r24, r15
    b4a6:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    b4aa:	0f 5f       	subi	r16, 0xFF	; 255
    b4ac:	1f 4f       	sbci	r17, 0xFF	; 255
    b4ae:	88 23       	and	r24, r24
    b4b0:	09 f4       	brne	.+2      	; 0xb4b4 <on_solid_ground+0x164>
    b4b2:	78 cf       	rjmp	.-272    	; 0xb3a4 <on_solid_ground+0x54>
    b4b4:	02 c0       	rjmp	.+4      	; 0xb4ba <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    b4b6:	80 e0       	ldi	r24, 0x00	; 0
    b4b8:	01 c0       	rjmp	.+2      	; 0xb4bc <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    b4ba:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b4bc:	26 96       	adiw	r28, 0x06	; 6
    b4be:	0f b6       	in	r0, 0x3f	; 63
    b4c0:	f8 94       	cli
    b4c2:	de bf       	out	0x3e, r29	; 62
    b4c4:	0f be       	out	0x3f, r0	; 63
    b4c6:	cd bf       	out	0x3d, r28	; 61
    b4c8:	df 91       	pop	r29
    b4ca:	cf 91       	pop	r28
    b4cc:	1f 91       	pop	r17
    b4ce:	0f 91       	pop	r16
    b4d0:	ff 90       	pop	r15
    b4d2:	ef 90       	pop	r14
    b4d4:	df 90       	pop	r13
    b4d6:	cf 90       	pop	r12
    b4d8:	bf 90       	pop	r11
    b4da:	af 90       	pop	r10
    b4dc:	9f 90       	pop	r9
    b4de:	8f 90       	pop	r8
    b4e0:	7f 90       	pop	r7
    b4e2:	6f 90       	pop	r6
    b4e4:	5f 90       	pop	r5
    b4e6:	4f 90       	pop	r4
    b4e8:	3f 90       	pop	r3
    b4ea:	2f 90       	pop	r2
    b4ec:	08 95       	ret

0000b4ee <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    b4ee:	80 91 eb 0d 	lds	r24, 0x0DEB
    b4f2:	88 23       	and	r24, r24
    b4f4:	61 f0       	breq	.+24     	; 0xb50e <find_shot_slot+0x20>
    b4f6:	80 91 05 0e 	lds	r24, 0x0E05
    b4fa:	88 23       	and	r24, r24
    b4fc:	31 f0       	breq	.+12     	; 0xb50a <find_shot_slot+0x1c>
    b4fe:	80 91 1f 0e 	lds	r24, 0x0E1F
    b502:	81 11       	cpse	r24, r1
    b504:	04 c0       	rjmp	.+8      	; 0xb50e <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    b506:	82 e0       	ldi	r24, 0x02	; 2
    b508:	08 95       	ret
    b50a:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    b50c:	08 95       	ret
	}
	return 0;
    b50e:	80 e0       	ldi	r24, 0x00	; 0
}
    b510:	08 95       	ret

0000b512 <update_shot>:

void update_shot()
{
    b512:	8f 92       	push	r8
    b514:	9f 92       	push	r9
    b516:	af 92       	push	r10
    b518:	bf 92       	push	r11
    b51a:	df 92       	push	r13
    b51c:	ef 92       	push	r14
    b51e:	ff 92       	push	r15
    b520:	0f 93       	push	r16
    b522:	1f 93       	push	r17
    b524:	cf 93       	push	r28
    b526:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    b528:	80 91 9a 0f 	lds	r24, 0x0F9A
    b52c:	90 91 9b 0f 	lds	r25, 0x0F9B
    b530:	90 ff       	sbrs	r25, 0
    b532:	df c0       	rjmp	.+446    	; 0xb6f2 <update_shot+0x1e0>
    b534:	80 91 d3 0d 	lds	r24, 0x0DD3
    b538:	83 30       	cpi	r24, 0x03	; 3
    b53a:	08 f0       	brcs	.+2      	; 0xb53e <update_shot+0x2c>
    b53c:	da c0       	rjmp	.+436    	; 0xb6f2 <update_shot+0x1e0>
	{
		SFX_PLAYER_SHOOT;
    b53e:	2f ef       	ldi	r18, 0xFF	; 255
    b540:	43 e2       	ldi	r20, 0x23	; 35
    b542:	63 e0       	ldi	r22, 0x03	; 3
    b544:	82 e0       	ldi	r24, 0x02	; 2
    b546:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <TriggerNote>
		idx = find_shot_slot();
    b54a:	0e 94 77 5a 	call	0xb4ee	; 0xb4ee <find_shot_slot>
    b54e:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    b550:	08 2f       	mov	r16, r24
    b552:	10 e0       	ldi	r17, 0x00	; 0
    b554:	9a e1       	ldi	r25, 0x1A	; 26
    b556:	d9 2e       	mov	r13, r25
    b558:	d0 9e       	mul	r13, r16
    b55a:	e0 01       	movw	r28, r0
    b55c:	d1 9e       	mul	r13, r17
    b55e:	d0 0d       	add	r29, r0
    b560:	11 24       	eor	r1, r1
    b562:	ce 01       	movw	r24, r28
    b564:	84 51       	subi	r24, 0x14	; 20
    b566:	92 4f       	sbci	r25, 0xF2	; 242
    b568:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    b56c:	40 e0       	ldi	r20, 0x00	; 0
    b56e:	bc 01       	movw	r22, r24
    b570:	8b e0       	ldi	r24, 0x0B	; 11
    b572:	8f 0d       	add	r24, r15
    b574:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
		game.player.shot[idx].active = 1;
    b578:	ca 55       	subi	r28, 0x5A	; 90
    b57a:	d2 4f       	sbci	r29, 0xF2	; 242
    b57c:	fe 01       	movw	r30, r28
    b57e:	eb 5b       	subi	r30, 0xBB	; 187
    b580:	ff 4f       	sbci	r31, 0xFF	; 255
    b582:	81 e0       	ldi	r24, 0x01	; 1
    b584:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    b586:	60 91 cc 0d 	lds	r22, 0x0DCC
    b58a:	70 91 cd 0d 	lds	r23, 0x0DCD
    b58e:	80 91 ce 0d 	lds	r24, 0x0DCE
    b592:	90 91 cf 0d 	lds	r25, 0x0DCF
    b596:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b59a:	23 e0       	ldi	r18, 0x03	; 3
    b59c:	76 95       	lsr	r23
    b59e:	67 95       	ror	r22
    b5a0:	2a 95       	dec	r18
    b5a2:	e1 f7       	brne	.-8      	; 0xb59c <update_shot+0x8a>
    b5a4:	33 e0       	ldi	r19, 0x03	; 3
    b5a6:	66 0f       	add	r22, r22
    b5a8:	77 1f       	adc	r23, r23
    b5aa:	3a 95       	dec	r19
    b5ac:	e1 f7       	brne	.-8      	; 0xb5a6 <update_shot+0x94>
    b5ae:	80 e0       	ldi	r24, 0x00	; 0
    b5b0:	90 e0       	ldi	r25, 0x00	; 0
    b5b2:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    b5b6:	4b 01       	movw	r8, r22
    b5b8:	5c 01       	movw	r10, r24
    b5ba:	6c af       	std	Y+60, r22	; 0x3c
    b5bc:	7d af       	std	Y+61, r23	; 0x3d
    b5be:	8e af       	std	Y+62, r24	; 0x3e
    b5c0:	9f af       	std	Y+63, r25	; 0x3f
		if (is_space())
    b5c2:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    b5c6:	98 01       	movw	r18, r16
    b5c8:	2f 5f       	subi	r18, 0xFF	; 255
    b5ca:	3f 4f       	sbci	r19, 0xFF	; 255
    b5cc:	79 01       	movw	r14, r18
    b5ce:	88 23       	and	r24, r24
    b5d0:	59 f1       	breq	.+86     	; 0xb628 <update_shot+0x116>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    b5d2:	60 91 d7 0d 	lds	r22, 0x0DD7
    b5d6:	d2 9e       	mul	r13, r18
    b5d8:	80 01       	movw	r16, r0
    b5da:	d3 9e       	mul	r13, r19
    b5dc:	10 0d       	add	r17, r0
    b5de:	11 24       	eor	r1, r1
    b5e0:	0a 55       	subi	r16, 0x5A	; 90
    b5e2:	12 4f       	sbci	r17, 0xF2	; 242
    b5e4:	38 e0       	ldi	r19, 0x08	; 8
    b5e6:	63 9f       	mul	r22, r19
    b5e8:	b0 01       	movw	r22, r0
    b5ea:	11 24       	eor	r1, r1
    b5ec:	88 27       	eor	r24, r24
    b5ee:	77 fd       	sbrc	r23, 7
    b5f0:	80 95       	com	r24
    b5f2:	98 2f       	mov	r25, r24
    b5f4:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    b5f8:	9b 01       	movw	r18, r22
    b5fa:	ac 01       	movw	r20, r24
    b5fc:	60 91 c8 0d 	lds	r22, 0x0DC8
    b600:	70 91 c9 0d 	lds	r23, 0x0DC9
    b604:	80 91 ca 0d 	lds	r24, 0x0DCA
    b608:	90 91 cb 0d 	lds	r25, 0x0DCB
    b60c:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b610:	f8 01       	movw	r30, r16
    b612:	66 8f       	std	Z+30, r22	; 0x1e
    b614:	77 8f       	std	Z+31, r23	; 0x1f
    b616:	80 a3       	std	Z+32, r24	; 0x20
    b618:	91 a3       	std	Z+33, r25	; 0x21
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    b61a:	c0 5c       	subi	r28, 0xC0	; 192
    b61c:	df 4f       	sbci	r29, 0xFF	; 255
    b61e:	80 e9       	ldi	r24, 0x90	; 144
    b620:	91 e0       	ldi	r25, 0x01	; 1
    b622:	99 83       	std	Y+1, r25	; 0x01
    b624:	88 83       	st	Y, r24
    b626:	60 c0       	rjmp	.+192    	; 0xb6e8 <update_shot+0x1d6>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    b628:	80 91 d4 0d 	lds	r24, 0x0DD4
    b62c:	82 fd       	sbrc	r24, 2
    b62e:	0c c0       	rjmp	.+24     	; 0xb648 <update_shot+0x136>
			{
				game.player.shot[idx].shared.y += 8;
    b630:	20 e0       	ldi	r18, 0x00	; 0
    b632:	30 e0       	ldi	r19, 0x00	; 0
    b634:	40 e0       	ldi	r20, 0x00	; 0
    b636:	51 e4       	ldi	r21, 0x41	; 65
    b638:	c5 01       	movw	r24, r10
    b63a:	b4 01       	movw	r22, r8
    b63c:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b640:	6c af       	std	Y+60, r22	; 0x3c
    b642:	7d af       	std	Y+61, r23	; 0x3d
    b644:	8e af       	std	Y+62, r24	; 0x3e
    b646:	9f af       	std	Y+63, r25	; 0x3f
			}
			if (game.player.direction == D_RIGHT)
    b648:	80 91 d6 0d 	lds	r24, 0x0DD6
    b64c:	81 30       	cpi	r24, 0x01	; 1
    b64e:	39 f5       	brne	.+78     	; 0xb69e <update_shot+0x18c>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    b650:	8a e1       	ldi	r24, 0x1A	; 26
    b652:	d8 2e       	mov	r13, r24
    b654:	de 9c       	mul	r13, r14
    b656:	e0 01       	movw	r28, r0
    b658:	df 9c       	mul	r13, r15
    b65a:	d0 0d       	add	r29, r0
    b65c:	11 24       	eor	r1, r1
    b65e:	ca 55       	subi	r28, 0x5A	; 90
    b660:	d2 4f       	sbci	r29, 0xF2	; 242
    b662:	20 e0       	ldi	r18, 0x00	; 0
    b664:	30 e0       	ldi	r19, 0x00	; 0
    b666:	40 e8       	ldi	r20, 0x80	; 128
    b668:	51 e4       	ldi	r21, 0x41	; 65
    b66a:	60 91 c8 0d 	lds	r22, 0x0DC8
    b66e:	70 91 c9 0d 	lds	r23, 0x0DC9
    b672:	80 91 ca 0d 	lds	r24, 0x0DCA
    b676:	90 91 cb 0d 	lds	r25, 0x0DCB
    b67a:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b67e:	6e 8f       	std	Y+30, r22	; 0x1e
    b680:	7f 8f       	std	Y+31, r23	; 0x1f
    b682:	88 a3       	std	Y+32, r24	; 0x20
    b684:	99 a3       	std	Y+33, r25	; 0x21
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    b686:	d0 9e       	mul	r13, r16
    b688:	f0 01       	movw	r30, r0
    b68a:	d1 9e       	mul	r13, r17
    b68c:	f0 0d       	add	r31, r0
    b68e:	11 24       	eor	r1, r1
    b690:	ea 51       	subi	r30, 0x1A	; 26
    b692:	f2 4f       	sbci	r31, 0xF2	; 242
    b694:	80 e9       	ldi	r24, 0x90	; 144
    b696:	91 e0       	ldi	r25, 0x01	; 1
    b698:	91 83       	std	Z+1, r25	; 0x01
    b69a:	80 83       	st	Z, r24
    b69c:	25 c0       	rjmp	.+74     	; 0xb6e8 <update_shot+0x1d6>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    b69e:	8a e1       	ldi	r24, 0x1A	; 26
    b6a0:	80 9f       	mul	r24, r16
    b6a2:	f0 01       	movw	r30, r0
    b6a4:	81 9f       	mul	r24, r17
    b6a6:	f0 0d       	add	r31, r0
    b6a8:	11 24       	eor	r1, r1
    b6aa:	ea 51       	subi	r30, 0x1A	; 26
    b6ac:	f2 4f       	sbci	r31, 0xF2	; 242
    b6ae:	20 e7       	ldi	r18, 0x70	; 112
    b6b0:	3e ef       	ldi	r19, 0xFE	; 254
    b6b2:	31 83       	std	Z+1, r19	; 0x01
    b6b4:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    b6b6:	8e 9d       	mul	r24, r14
    b6b8:	e0 01       	movw	r28, r0
    b6ba:	8f 9d       	mul	r24, r15
    b6bc:	d0 0d       	add	r29, r0
    b6be:	11 24       	eor	r1, r1
    b6c0:	ca 55       	subi	r28, 0x5A	; 90
    b6c2:	d2 4f       	sbci	r29, 0xF2	; 242
    b6c4:	20 e0       	ldi	r18, 0x00	; 0
    b6c6:	30 e0       	ldi	r19, 0x00	; 0
    b6c8:	40 e0       	ldi	r20, 0x00	; 0
    b6ca:	51 e4       	ldi	r21, 0x41	; 65
    b6cc:	60 91 c8 0d 	lds	r22, 0x0DC8
    b6d0:	70 91 c9 0d 	lds	r23, 0x0DC9
    b6d4:	80 91 ca 0d 	lds	r24, 0x0DCA
    b6d8:	90 91 cb 0d 	lds	r25, 0x0DCB
    b6dc:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    b6e0:	6e 8f       	std	Y+30, r22	; 0x1e
    b6e2:	7f 8f       	std	Y+31, r23	; 0x1f
    b6e4:	88 a3       	std	Y+32, r24	; 0x20
    b6e6:	99 a3       	std	Y+33, r25	; 0x21
			}
		}
		game.player.active_shots++;
    b6e8:	80 91 d3 0d 	lds	r24, 0x0DD3
    b6ec:	8f 5f       	subi	r24, 0xFF	; 255
    b6ee:	80 93 d3 0d 	sts	0x0DD3, r24
	}
}
    b6f2:	df 91       	pop	r29
    b6f4:	cf 91       	pop	r28
    b6f6:	1f 91       	pop	r17
    b6f8:	0f 91       	pop	r16
    b6fa:	ff 90       	pop	r15
    b6fc:	ef 90       	pop	r14
    b6fe:	df 90       	pop	r13
    b700:	bf 90       	pop	r11
    b702:	af 90       	pop	r10
    b704:	9f 90       	pop	r9
    b706:	8f 90       	pop	r8
    b708:	08 95       	ret

0000b70a <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    b70a:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    b70c:	86 17       	cp	r24, r22
    b70e:	97 07       	cpc	r25, r23
    b710:	28 f4       	brcc	.+10     	; 0xb71c <pixel_overlap+0x12>
    b712:	94 2f       	mov	r25, r20
    b714:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    b716:	89 2f       	mov	r24, r25
    b718:	86 1b       	sub	r24, r22
    b71a:	01 c0       	rjmp	.+2      	; 0xb71e <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    b71c:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    b71e:	e4 0f       	add	r30, r20
    b720:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    b722:	62 0f       	add	r22, r18
    b724:	71 1d       	adc	r23, r1
	if (s2 < s1)
    b726:	6e 17       	cp	r22, r30
    b728:	7f 07       	cpc	r23, r31
    b72a:	10 f4       	brcc	.+4      	; 0xb730 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    b72c:	6e 1b       	sub	r22, r30
    b72e:	86 0f       	add	r24, r22
	}
	return result;
}
    b730:	08 95       	ret

0000b732 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b732:	2f 92       	push	r2
    b734:	3f 92       	push	r3
    b736:	4f 92       	push	r4
    b738:	5f 92       	push	r5
    b73a:	6f 92       	push	r6
    b73c:	7f 92       	push	r7
    b73e:	8f 92       	push	r8
    b740:	9f 92       	push	r9
    b742:	af 92       	push	r10
    b744:	bf 92       	push	r11
    b746:	cf 92       	push	r12
    b748:	df 92       	push	r13
    b74a:	ef 92       	push	r14
    b74c:	ff 92       	push	r15
    b74e:	0f 93       	push	r16
    b750:	1f 93       	push	r17
    b752:	cf 93       	push	r28
    b754:	df 93       	push	r29
    b756:	cd b7       	in	r28, 0x3d	; 61
    b758:	de b7       	in	r29, 0x3e	; 62
    b75a:	68 97       	sbiw	r28, 0x18	; 24
    b75c:	0f b6       	in	r0, 0x3f	; 63
    b75e:	f8 94       	cli
    b760:	de bf       	out	0x3e, r29	; 62
    b762:	0f be       	out	0x3f, r0	; 63
    b764:	cd bf       	out	0x3d, r28	; 61
    b766:	98 8f       	std	Y+24, r25	; 0x18
    b768:	8f 8b       	std	Y+23, r24	; 0x17
    b76a:	16 2f       	mov	r17, r22
    b76c:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    b76e:	dc 01       	movw	r26, r24
    b770:	14 96       	adiw	r26, 0x04	; 4
    b772:	4d 90       	ld	r4, X+
    b774:	5d 90       	ld	r5, X+
    b776:	6d 90       	ld	r6, X+
    b778:	7c 90       	ld	r7, X
    b77a:	17 97       	sbiw	r26, 0x07	; 7
	u16 y0_tile = s->y / 8;
    b77c:	18 96       	adiw	r26, 0x08	; 8
    b77e:	cd 90       	ld	r12, X+
    b780:	dd 90       	ld	r13, X+
    b782:	ed 90       	ld	r14, X+
    b784:	fc 90       	ld	r15, X
    b786:	1b 97       	sbiw	r26, 0x0b	; 11
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    b788:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    b78c:	81 11       	cpse	r24, r1
    b78e:	f2 c2       	rjmp	.+1508   	; 0xbd74 <collision_detect_level+0x642>
    b790:	ef 89       	ldd	r30, Y+23	; 0x17
    b792:	f8 8d       	ldd	r31, Y+24	; 0x18
    b794:	84 85       	ldd	r24, Z+12	; 0x0c
    b796:	95 85       	ldd	r25, Z+13	; 0x0d
    b798:	89 2b       	or	r24, r25
    b79a:	61 f4       	brne	.+24     	; 0xb7b4 <collision_detect_level+0x82>
    b79c:	20 e0       	ldi	r18, 0x00	; 0
    b79e:	30 e0       	ldi	r19, 0x00	; 0
    b7a0:	a9 01       	movw	r20, r18
    b7a2:	60 81       	ld	r22, Z
    b7a4:	71 81       	ldd	r23, Z+1	; 0x01
    b7a6:	82 81       	ldd	r24, Z+2	; 0x02
    b7a8:	93 81       	ldd	r25, Z+3	; 0x03
    b7aa:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    b7ae:	88 23       	and	r24, r24
    b7b0:	09 f4       	brne	.+2      	; 0xb7b4 <collision_detect_level+0x82>
    b7b2:	e0 c2       	rjmp	.+1472   	; 0xbd74 <collision_detect_level+0x642>
	return result;
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
    b7b4:	20 e0       	ldi	r18, 0x00	; 0
    b7b6:	30 e0       	ldi	r19, 0x00	; 0
    b7b8:	40 e0       	ldi	r20, 0x00	; 0
    b7ba:	5e e3       	ldi	r21, 0x3E	; 62
    b7bc:	c3 01       	movw	r24, r6
    b7be:	b2 01       	movw	r22, r4
    b7c0:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b7c4:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b7c8:	4b 01       	movw	r8, r22
    b7ca:	5c 01       	movw	r10, r24
    b7cc:	68 87       	std	Y+8, r22	; 0x08
    b7ce:	9a 8a       	std	Y+18, r9	; 0x12
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
    b7d0:	20 e0       	ldi	r18, 0x00	; 0
    b7d2:	30 e0       	ldi	r19, 0x00	; 0
    b7d4:	a9 01       	movw	r20, r18
    b7d6:	af 89       	ldd	r26, Y+23	; 0x17
    b7d8:	b8 8d       	ldd	r27, Y+24	; 0x18
    b7da:	6d 91       	ld	r22, X+
    b7dc:	7d 91       	ld	r23, X+
    b7de:	8d 91       	ld	r24, X+
    b7e0:	9c 91       	ld	r25, X
    b7e2:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    b7e6:	88 23       	and	r24, r24
    b7e8:	09 f4       	brne	.+2      	; 0xb7ec <collision_detect_level+0xba>
    b7ea:	67 c1       	rjmp	.+718    	; 0xbaba <collision_detect_level+0x388>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    b7ec:	20 e0       	ldi	r18, 0x00	; 0
    b7ee:	30 e0       	ldi	r19, 0x00	; 0
    b7f0:	40 e0       	ldi	r20, 0x00	; 0
    b7f2:	5e e3       	ldi	r21, 0x3E	; 62
    b7f4:	c7 01       	movw	r24, r14
    b7f6:	b6 01       	movw	r22, r12
    b7f8:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b7fc:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b800:	6b 01       	movw	r12, r22
    b802:	7c 01       	movw	r14, r24
    b804:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    b806:	20 e0       	ldi	r18, 0x00	; 0
    b808:	30 e0       	ldi	r19, 0x00	; 0
    b80a:	40 ee       	ldi	r20, 0xE0	; 224
    b80c:	50 e4       	ldi	r21, 0x40	; 64
    b80e:	c3 01       	movw	r24, r6
    b810:	b2 01       	movw	r22, r4
    b812:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b816:	20 e0       	ldi	r18, 0x00	; 0
    b818:	30 e0       	ldi	r19, 0x00	; 0
    b81a:	40 e0       	ldi	r20, 0x00	; 0
    b81c:	5e e3       	ldi	r21, 0x3E	; 62
    b81e:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b822:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b826:	f4 01       	movw	r30, r8
    b828:	53 e0       	ldi	r21, 0x03	; 3
    b82a:	ee 0f       	add	r30, r30
    b82c:	ff 1f       	adc	r31, r31
    b82e:	5a 95       	dec	r21
    b830:	e1 f7       	brne	.-8      	; 0xb82a <collision_detect_level+0xf8>
    b832:	fb 83       	std	Y+3, r31	; 0x03
    b834:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b836:	9b 01       	movw	r18, r22
    b838:	e3 e0       	ldi	r30, 0x03	; 3
    b83a:	22 0f       	add	r18, r18
    b83c:	33 1f       	adc	r19, r19
    b83e:	ea 95       	dec	r30
    b840:	e1 f7       	brne	.-8      	; 0xb83a <collision_detect_level+0x108>
    b842:	3d 83       	std	Y+5, r19	; 0x05
    b844:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b846:	3f ef       	ldi	r19, 0xFF	; 255
    b848:	c3 1a       	sub	r12, r19
    b84a:	d3 0a       	sbc	r13, r19
    b84c:	f3 e0       	ldi	r31, 0x03	; 3
    b84e:	cc 0c       	add	r12, r12
    b850:	dd 1c       	adc	r13, r13
    b852:	fa 95       	dec	r31
    b854:	e1 f7       	brne	.-8      	; 0xb84e <collision_detect_level+0x11c>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b856:	b9 89       	ldd	r27, Y+17	; 0x11
    b858:	a8 e0       	ldi	r26, 0x08	; 8
    b85a:	ba 9f       	mul	r27, r26
    b85c:	a0 01       	movw	r20, r0
    b85e:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b860:	96 01       	movw	r18, r12
    b862:	28 50       	subi	r18, 0x08	; 8
    b864:	31 09       	sbc	r19, r1
    b866:	2b 01       	movw	r4, r22
    b868:	34 01       	movw	r6, r8
    b86a:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b86c:	b6 01       	movw	r22, r12
    b86e:	80 e0       	ldi	r24, 0x00	; 0
    b870:	90 e0       	ldi	r25, 0x00	; 0
    b872:	69 87       	std	Y+9, r22	; 0x09
    b874:	7a 87       	std	Y+10, r23	; 0x0a
    b876:	8b 87       	std	Y+11, r24	; 0x0b
    b878:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b87a:	66 27       	eor	r22, r22
    b87c:	57 fd       	sbrc	r21, 7
    b87e:	60 95       	com	r22
    b880:	76 2f       	mov	r23, r22
    b882:	4d 87       	std	Y+13, r20	; 0x0d
    b884:	5e 87       	std	Y+14, r21	; 0x0e
    b886:	6f 87       	std	Y+15, r22	; 0x0f
    b888:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b88a:	b9 01       	movw	r22, r18
    b88c:	80 e0       	ldi	r24, 0x00	; 0
    b88e:	90 e0       	ldi	r25, 0x00	; 0
    b890:	6b 8b       	std	Y+19, r22	; 0x13
    b892:	7c 8b       	std	Y+20, r23	; 0x14
    b894:	8d 8b       	std	Y+21, r24	; 0x15
    b896:	9e 8b       	std	Y+22, r25	; 0x16
    b898:	86 2d       	mov	r24, r6
    b89a:	48 85       	ldd	r20, Y+8	; 0x08
    b89c:	84 1b       	sub	r24, r20
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b89e:	81 17       	cp	r24, r17
    b8a0:	08 f0       	brcs	.+2      	; 0xb8a4 <collision_detect_level+0x172>
    b8a2:	0c c1       	rjmp	.+536    	; 0xbabc <collision_detect_level+0x38a>
		{
			if (s->vy < 0)
    b8a4:	20 e0       	ldi	r18, 0x00	; 0
    b8a6:	30 e0       	ldi	r19, 0x00	; 0
    b8a8:	a9 01       	movw	r20, r18
    b8aa:	af 89       	ldd	r26, Y+23	; 0x17
    b8ac:	b8 8d       	ldd	r27, Y+24	; 0x18
    b8ae:	6d 91       	ld	r22, X+
    b8b0:	7d 91       	ld	r23, X+
    b8b2:	8d 91       	ld	r24, X+
    b8b4:	9c 91       	ld	r25, X
    b8b6:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    b8ba:	87 ff       	sbrs	r24, 7
    b8bc:	58 c0       	rjmp	.+176    	; 0xb96e <collision_detect_level+0x23c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b8be:	a1 01       	movw	r20, r2
    b8c0:	b3 01       	movw	r22, r6
    b8c2:	80 91 a1 0f 	lds	r24, 0x0FA1
    b8c6:	90 91 a2 0f 	lds	r25, 0x0FA2
    b8ca:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    b8ce:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    b8d0:	a1 01       	movw	r20, r2
    b8d2:	b2 01       	movw	r22, r4
    b8d4:	80 91 a1 0f 	lds	r24, 0x0FA1
    b8d8:	90 91 a2 0f 	lds	r25, 0x0FA2
    b8dc:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    b8e0:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b8e2:	8f 2d       	mov	r24, r15
    b8e4:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    b8e8:	88 23       	and	r24, r24
    b8ea:	91 f0       	breq	.+36     	; 0xb910 <collision_detect_level+0x1de>
    b8ec:	ef 89       	ldd	r30, Y+23	; 0x17
    b8ee:	f8 8d       	ldd	r31, Y+24	; 0x18
    b8f0:	64 81       	ldd	r22, Z+4	; 0x04
    b8f2:	75 81       	ldd	r23, Z+5	; 0x05
    b8f4:	86 81       	ldd	r24, Z+6	; 0x06
    b8f6:	97 81       	ldd	r25, Z+7	; 0x07
    b8f8:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b8fc:	dc 01       	movw	r26, r24
    b8fe:	cb 01       	movw	r24, r22
    b900:	28 e0       	ldi	r18, 0x08	; 8
    b902:	48 e0       	ldi	r20, 0x08	; 8
    b904:	6a 81       	ldd	r22, Y+2	; 0x02
    b906:	7b 81       	ldd	r23, Y+3	; 0x03
    b908:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    b90c:	84 30       	cpi	r24, 0x04	; 4
    b90e:	c8 f4       	brcc	.+50     	; 0xb942 <collision_detect_level+0x210>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b910:	80 2f       	mov	r24, r16
    b912:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    b916:	88 23       	and	r24, r24
    b918:	51 f1       	breq	.+84     	; 0xb96e <collision_detect_level+0x23c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    b91a:	af 89       	ldd	r26, Y+23	; 0x17
    b91c:	b8 8d       	ldd	r27, Y+24	; 0x18
    b91e:	14 96       	adiw	r26, 0x04	; 4
    b920:	6d 91       	ld	r22, X+
    b922:	7d 91       	ld	r23, X+
    b924:	8d 91       	ld	r24, X+
    b926:	9c 91       	ld	r25, X
    b928:	17 97       	sbiw	r26, 0x07	; 7
    b92a:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b92e:	dc 01       	movw	r26, r24
    b930:	cb 01       	movw	r24, r22
    b932:	28 e0       	ldi	r18, 0x08	; 8
    b934:	48 e0       	ldi	r20, 0x08	; 8
    b936:	6c 81       	ldd	r22, Y+4	; 0x04
    b938:	7d 81       	ldd	r23, Y+5	; 0x05
    b93a:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    b93e:	84 30       	cpi	r24, 0x04	; 4
    b940:	b0 f0       	brcs	.+44     	; 0xb96e <collision_detect_level+0x23c>
				{
					s->vy =  0;
    b942:	ef 89       	ldd	r30, Y+23	; 0x17
    b944:	f8 8d       	ldd	r31, Y+24	; 0x18
    b946:	10 82       	st	Z, r1
    b948:	11 82       	std	Z+1, r1	; 0x01
    b94a:	12 82       	std	Z+2, r1	; 0x02
    b94c:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    b94e:	69 85       	ldd	r22, Y+9	; 0x09
    b950:	7a 85       	ldd	r23, Y+10	; 0x0a
    b952:	8b 85       	ldd	r24, Y+11	; 0x0b
    b954:	9c 85       	ldd	r25, Y+12	; 0x0c
    b956:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    b95a:	af 89       	ldd	r26, Y+23	; 0x17
    b95c:	b8 8d       	ldd	r27, Y+24	; 0x18
    b95e:	18 96       	adiw	r26, 0x08	; 8
    b960:	6d 93       	st	X+, r22
    b962:	7d 93       	st	X+, r23
    b964:	8d 93       	st	X+, r24
    b966:	9c 93       	st	X, r25
    b968:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    b96a:	b1 e0       	ldi	r27, 0x01	; 1
    b96c:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    b96e:	20 e0       	ldi	r18, 0x00	; 0
    b970:	30 e0       	ldi	r19, 0x00	; 0
    b972:	a9 01       	movw	r20, r18
    b974:	ef 89       	ldd	r30, Y+23	; 0x17
    b976:	f8 8d       	ldd	r31, Y+24	; 0x18
    b978:	60 81       	ld	r22, Z
    b97a:	71 81       	ldd	r23, Z+1	; 0x01
    b97c:	82 81       	ldd	r24, Z+2	; 0x02
    b97e:	93 81       	ldd	r25, Z+3	; 0x03
    b980:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    b984:	18 16       	cp	r1, r24
    b986:	0c f0       	brlt	.+2      	; 0xb98a <collision_detect_level+0x258>
    b988:	91 c0       	rjmp	.+290    	; 0xbaac <collision_detect_level+0x37a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b98a:	6d 85       	ldd	r22, Y+13	; 0x0d
    b98c:	7e 85       	ldd	r23, Y+14	; 0x0e
    b98e:	8f 85       	ldd	r24, Y+15	; 0x0f
    b990:	98 89       	ldd	r25, Y+16	; 0x10
    b992:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    b996:	6b 01       	movw	r12, r22
    b998:	7c 01       	movw	r14, r24
    b99a:	af 89       	ldd	r26, Y+23	; 0x17
    b99c:	b8 8d       	ldd	r27, Y+24	; 0x18
    b99e:	18 96       	adiw	r26, 0x08	; 8
    b9a0:	2d 91       	ld	r18, X+
    b9a2:	3d 91       	ld	r19, X+
    b9a4:	4d 91       	ld	r20, X+
    b9a6:	5c 91       	ld	r21, X
    b9a8:	1b 97       	sbiw	r26, 0x0b	; 11
    b9aa:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b9ae:	20 e0       	ldi	r18, 0x00	; 0
    b9b0:	30 e0       	ldi	r19, 0x00	; 0
    b9b2:	40 e8       	ldi	r20, 0x80	; 128
    b9b4:	5f e3       	ldi	r21, 0x3F	; 63
    b9b6:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    b9ba:	20 e0       	ldi	r18, 0x00	; 0
    b9bc:	30 e0       	ldi	r19, 0x00	; 0
    b9be:	40 e0       	ldi	r20, 0x00	; 0
    b9c0:	5e e3       	ldi	r21, 0x3E	; 62
    b9c2:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    b9c6:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    b9ca:	ab 01       	movw	r20, r22
    b9cc:	b3 01       	movw	r22, r6
    b9ce:	80 91 a1 0f 	lds	r24, 0x0FA1
    b9d2:	90 91 a2 0f 	lds	r25, 0x0FA2
    b9d6:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    b9da:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    b9dc:	ef 89       	ldd	r30, Y+23	; 0x17
    b9de:	f8 8d       	ldd	r31, Y+24	; 0x18
    b9e0:	20 85       	ldd	r18, Z+8	; 0x08
    b9e2:	31 85       	ldd	r19, Z+9	; 0x09
    b9e4:	42 85       	ldd	r20, Z+10	; 0x0a
    b9e6:	53 85       	ldd	r21, Z+11	; 0x0b
    b9e8:	c7 01       	movw	r24, r14
    b9ea:	b6 01       	movw	r22, r12
    b9ec:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    b9f0:	20 e0       	ldi	r18, 0x00	; 0
    b9f2:	30 e0       	ldi	r19, 0x00	; 0
    b9f4:	40 e8       	ldi	r20, 0x80	; 128
    b9f6:	5f e3       	ldi	r21, 0x3F	; 63
    b9f8:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    b9fc:	20 e0       	ldi	r18, 0x00	; 0
    b9fe:	30 e0       	ldi	r19, 0x00	; 0
    ba00:	40 e0       	ldi	r20, 0x00	; 0
    ba02:	5e e3       	ldi	r21, 0x3E	; 62
    ba04:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    ba08:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    ba0c:	ab 01       	movw	r20, r22
    ba0e:	b2 01       	movw	r22, r4
    ba10:	80 91 a1 0f 	lds	r24, 0x0FA1
    ba14:	90 91 a2 0f 	lds	r25, 0x0FA2
    ba18:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    ba1c:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    ba1e:	80 2f       	mov	r24, r16
    ba20:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    ba24:	88 23       	and	r24, r24
    ba26:	a1 f0       	breq	.+40     	; 0xba50 <collision_detect_level+0x31e>
    ba28:	af 89       	ldd	r26, Y+23	; 0x17
    ba2a:	b8 8d       	ldd	r27, Y+24	; 0x18
    ba2c:	14 96       	adiw	r26, 0x04	; 4
    ba2e:	6d 91       	ld	r22, X+
    ba30:	7d 91       	ld	r23, X+
    ba32:	8d 91       	ld	r24, X+
    ba34:	9c 91       	ld	r25, X
    ba36:	17 97       	sbiw	r26, 0x07	; 7
    ba38:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    ba3c:	dc 01       	movw	r26, r24
    ba3e:	cb 01       	movw	r24, r22
    ba40:	28 e0       	ldi	r18, 0x08	; 8
    ba42:	48 e0       	ldi	r20, 0x08	; 8
    ba44:	6a 81       	ldd	r22, Y+2	; 0x02
    ba46:	7b 81       	ldd	r23, Y+3	; 0x03
    ba48:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    ba4c:	84 30       	cpi	r24, 0x04	; 4
    ba4e:	b8 f4       	brcc	.+46     	; 0xba7e <collision_detect_level+0x34c>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    ba50:	8f 2d       	mov	r24, r15
    ba52:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    ba56:	88 23       	and	r24, r24
    ba58:	49 f1       	breq	.+82     	; 0xbaac <collision_detect_level+0x37a>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    ba5a:	ef 89       	ldd	r30, Y+23	; 0x17
    ba5c:	f8 8d       	ldd	r31, Y+24	; 0x18
    ba5e:	64 81       	ldd	r22, Z+4	; 0x04
    ba60:	75 81       	ldd	r23, Z+5	; 0x05
    ba62:	86 81       	ldd	r24, Z+6	; 0x06
    ba64:	97 81       	ldd	r25, Z+7	; 0x07
    ba66:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    ba6a:	dc 01       	movw	r26, r24
    ba6c:	cb 01       	movw	r24, r22
    ba6e:	28 e0       	ldi	r18, 0x08	; 8
    ba70:	48 e0       	ldi	r20, 0x08	; 8
    ba72:	6c 81       	ldd	r22, Y+4	; 0x04
    ba74:	7d 81       	ldd	r23, Y+5	; 0x05
    ba76:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    ba7a:	84 30       	cpi	r24, 0x04	; 4
    ba7c:	b8 f0       	brcs	.+46     	; 0xbaac <collision_detect_level+0x37a>
				{
					s->vy =  0;
    ba7e:	af 89       	ldd	r26, Y+23	; 0x17
    ba80:	b8 8d       	ldd	r27, Y+24	; 0x18
    ba82:	1d 92       	st	X+, r1
    ba84:	1d 92       	st	X+, r1
    ba86:	1d 92       	st	X+, r1
    ba88:	1c 92       	st	X, r1
    ba8a:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    ba8c:	1e 96       	adiw	r26, 0x0e	; 14
    ba8e:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    ba90:	6b 89       	ldd	r22, Y+19	; 0x13
    ba92:	7c 89       	ldd	r23, Y+20	; 0x14
    ba94:	8d 89       	ldd	r24, Y+21	; 0x15
    ba96:	9e 89       	ldd	r25, Y+22	; 0x16
    ba98:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ba9c:	ef 89       	ldd	r30, Y+23	; 0x17
    ba9e:	f8 8d       	ldd	r31, Y+24	; 0x18
    baa0:	60 87       	std	Z+8, r22	; 0x08
    baa2:	71 87       	std	Z+9, r23	; 0x09
    baa4:	82 87       	std	Z+10, r24	; 0x0a
    baa6:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    baa8:	f1 e0       	ldi	r31, 0x01	; 1
    baaa:	f9 83       	std	Y+1, r31	; 0x01
    baac:	2f ef       	ldi	r18, 0xFF	; 255
    baae:	62 1a       	sub	r6, r18
    bab0:	72 0a       	sbc	r7, r18
    bab2:	3f ef       	ldi	r19, 0xFF	; 255
    bab4:	43 1a       	sub	r4, r19
    bab6:	53 0a       	sbc	r5, r19
    bab8:	ef ce       	rjmp	.-546    	; 0xb898 <collision_detect_level+0x166>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    baba:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    babc:	af 89       	ldd	r26, Y+23	; 0x17
    babe:	b8 8d       	ldd	r27, Y+24	; 0x18
    bac0:	1c 96       	adiw	r26, 0x0c	; 12
    bac2:	8d 91       	ld	r24, X+
    bac4:	9c 91       	ld	r25, X
    bac6:	1d 97       	sbiw	r26, 0x0d	; 13
    bac8:	89 2b       	or	r24, r25
    baca:	09 f4       	brne	.+2      	; 0xbace <collision_detect_level+0x39c>
    bacc:	54 c1       	rjmp	.+680    	; 0xbd76 <collision_detect_level+0x644>
	{
		y0_tile = s->y / 8;
    bace:	18 96       	adiw	r26, 0x08	; 8
    bad0:	cd 90       	ld	r12, X+
    bad2:	dd 90       	ld	r13, X+
    bad4:	ed 90       	ld	r14, X+
    bad6:	fc 90       	ld	r15, X
    bad8:	1b 97       	sbiw	r26, 0x0b	; 11
    bada:	20 e0       	ldi	r18, 0x00	; 0
    badc:	30 e0       	ldi	r19, 0x00	; 0
    bade:	40 e0       	ldi	r20, 0x00	; 0
    bae0:	5e e3       	ldi	r21, 0x3E	; 62
    bae2:	c7 01       	movw	r24, r14
    bae4:	b6 01       	movw	r22, r12
    bae6:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    baea:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    baee:	2b 01       	movw	r4, r22
    baf0:	3c 01       	movw	r6, r24
    baf2:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    baf4:	20 e0       	ldi	r18, 0x00	; 0
    baf6:	30 e0       	ldi	r19, 0x00	; 0
    baf8:	40 ee       	ldi	r20, 0xE0	; 224
    bafa:	50 e4       	ldi	r21, 0x40	; 64
    bafc:	c7 01       	movw	r24, r14
    bafe:	b6 01       	movw	r22, r12
    bb00:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    bb04:	20 e0       	ldi	r18, 0x00	; 0
    bb06:	30 e0       	ldi	r19, 0x00	; 0
    bb08:	40 e0       	ldi	r20, 0x00	; 0
    bb0a:	5e e3       	ldi	r21, 0x3E	; 62
    bb0c:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    bb10:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb14:	12 01       	movw	r2, r4
    bb16:	83 e0       	ldi	r24, 0x03	; 3
    bb18:	22 0c       	add	r2, r2
    bb1a:	33 1c       	adc	r3, r3
    bb1c:	8a 95       	dec	r24
    bb1e:	e1 f7       	brne	.-8      	; 0xbb18 <collision_detect_level+0x3e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    bb20:	fb 01       	movw	r30, r22
    bb22:	93 e0       	ldi	r25, 0x03	; 3
    bb24:	ee 0f       	add	r30, r30
    bb26:	ff 1f       	adc	r31, r31
    bb28:	9a 95       	dec	r25
    bb2a:	e1 f7       	brne	.-8      	; 0xbb24 <collision_detect_level+0x3f2>
    bb2c:	fb 83       	std	Y+3, r31	; 0x03
    bb2e:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bb30:	ff ef       	ldi	r31, 0xFF	; 255
    bb32:	8f 1a       	sub	r8, r31
    bb34:	9f 0a       	sbc	r9, r31
    bb36:	94 01       	movw	r18, r8
    bb38:	43 e0       	ldi	r20, 0x03	; 3
    bb3a:	22 0f       	add	r18, r18
    bb3c:	33 1f       	adc	r19, r19
    bb3e:	4a 95       	dec	r20
    bb40:	e1 f7       	brne	.-8      	; 0xbb3a <collision_detect_level+0x408>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bb42:	a8 e0       	ldi	r26, 0x08	; 8
    bb44:	1a 9f       	mul	r17, r26
    bb46:	a0 01       	movw	r20, r0
    bb48:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bb4a:	49 01       	movw	r8, r18
    bb4c:	b8 e0       	ldi	r27, 0x08	; 8
    bb4e:	8b 1a       	sub	r8, r27
    bb50:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bb52:	6b 01       	movw	r12, r22
    bb54:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bb56:	b9 01       	movw	r22, r18
    bb58:	80 e0       	ldi	r24, 0x00	; 0
    bb5a:	90 e0       	ldi	r25, 0x00	; 0
    bb5c:	6c 83       	std	Y+4, r22	; 0x04
    bb5e:	7d 83       	std	Y+5, r23	; 0x05
    bb60:	8e 83       	std	Y+6, r24	; 0x06
    bb62:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bb64:	ca 01       	movw	r24, r20
    bb66:	aa 27       	eor	r26, r26
    bb68:	97 fd       	sbrc	r25, 7
    bb6a:	a0 95       	com	r26
    bb6c:	ba 2f       	mov	r27, r26
    bb6e:	89 87       	std	Y+9, r24	; 0x09
    bb70:	9a 87       	std	Y+10, r25	; 0x0a
    bb72:	ab 87       	std	Y+11, r26	; 0x0b
    bb74:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bb76:	a1 2c       	mov	r10, r1
    bb78:	b1 2c       	mov	r11, r1
    bb7a:	80 2f       	mov	r24, r16
    bb7c:	3d 85       	ldd	r19, Y+13	; 0x0d
    bb7e:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bb80:	49 89       	ldd	r20, Y+17	; 0x11
    bb82:	84 17       	cp	r24, r20
    bb84:	08 f0       	brcs	.+2      	; 0xbb88 <collision_detect_level+0x456>
    bb86:	f7 c0       	rjmp	.+494    	; 0xbd76 <collision_detect_level+0x644>
		{
			if (s->vx < 0)
    bb88:	af 89       	ldd	r26, Y+23	; 0x17
    bb8a:	b8 8d       	ldd	r27, Y+24	; 0x18
    bb8c:	1c 96       	adiw	r26, 0x0c	; 12
    bb8e:	8d 91       	ld	r24, X+
    bb90:	9c 91       	ld	r25, X
    bb92:	1d 97       	sbiw	r26, 0x0d	; 13
    bb94:	97 ff       	sbrs	r25, 7
    bb96:	57 c0       	rjmp	.+174    	; 0xbc46 <collision_detect_level+0x514>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    bb98:	a8 01       	movw	r20, r16
    bb9a:	68 85       	ldd	r22, Y+8	; 0x08
    bb9c:	7a 89       	ldd	r23, Y+18	; 0x12
    bb9e:	80 91 a1 0f 	lds	r24, 0x0FA1
    bba2:	90 91 a2 0f 	lds	r25, 0x0FA2
    bba6:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    bbaa:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    bbac:	a6 01       	movw	r20, r12
    bbae:	68 85       	ldd	r22, Y+8	; 0x08
    bbb0:	7a 89       	ldd	r23, Y+18	; 0x12
    bbb2:	80 91 a1 0f 	lds	r24, 0x0FA1
    bbb6:	90 91 a2 0f 	lds	r25, 0x0FA2
    bbba:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    bbbe:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    bbc0:	87 2d       	mov	r24, r7
    bbc2:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    bbc6:	88 23       	and	r24, r24
    bbc8:	89 f0       	breq	.+34     	; 0xbbec <collision_detect_level+0x4ba>
    bbca:	ef 89       	ldd	r30, Y+23	; 0x17
    bbcc:	f8 8d       	ldd	r31, Y+24	; 0x18
    bbce:	60 85       	ldd	r22, Z+8	; 0x08
    bbd0:	71 85       	ldd	r23, Z+9	; 0x09
    bbd2:	82 85       	ldd	r24, Z+10	; 0x0a
    bbd4:	93 85       	ldd	r25, Z+11	; 0x0b
    bbd6:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bbda:	dc 01       	movw	r26, r24
    bbdc:	cb 01       	movw	r24, r22
    bbde:	28 e0       	ldi	r18, 0x08	; 8
    bbe0:	48 e0       	ldi	r20, 0x08	; 8
    bbe2:	b1 01       	movw	r22, r2
    bbe4:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    bbe8:	84 30       	cpi	r24, 0x04	; 4
    bbea:	c8 f4       	brcc	.+50     	; 0xbc1e <collision_detect_level+0x4ec>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    bbec:	8e 2d       	mov	r24, r14
    bbee:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    bbf2:	88 23       	and	r24, r24
    bbf4:	41 f1       	breq	.+80     	; 0xbc46 <collision_detect_level+0x514>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    bbf6:	af 89       	ldd	r26, Y+23	; 0x17
    bbf8:	b8 8d       	ldd	r27, Y+24	; 0x18
    bbfa:	18 96       	adiw	r26, 0x08	; 8
    bbfc:	6d 91       	ld	r22, X+
    bbfe:	7d 91       	ld	r23, X+
    bc00:	8d 91       	ld	r24, X+
    bc02:	9c 91       	ld	r25, X
    bc04:	1b 97       	sbiw	r26, 0x0b	; 11
    bc06:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bc0a:	dc 01       	movw	r26, r24
    bc0c:	cb 01       	movw	r24, r22
    bc0e:	28 e0       	ldi	r18, 0x08	; 8
    bc10:	48 e0       	ldi	r20, 0x08	; 8
    bc12:	6a 81       	ldd	r22, Y+2	; 0x02
    bc14:	7b 81       	ldd	r23, Y+3	; 0x03
    bc16:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    bc1a:	84 30       	cpi	r24, 0x04	; 4
    bc1c:	a0 f0       	brcs	.+40     	; 0xbc46 <collision_detect_level+0x514>
				{
					s->vx =  0;
    bc1e:	ef 89       	ldd	r30, Y+23	; 0x17
    bc20:	f8 8d       	ldd	r31, Y+24	; 0x18
    bc22:	15 86       	std	Z+13, r1	; 0x0d
    bc24:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    bc26:	6c 81       	ldd	r22, Y+4	; 0x04
    bc28:	7d 81       	ldd	r23, Y+5	; 0x05
    bc2a:	8e 81       	ldd	r24, Y+6	; 0x06
    bc2c:	9f 81       	ldd	r25, Y+7	; 0x07
    bc2e:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    bc32:	af 89       	ldd	r26, Y+23	; 0x17
    bc34:	b8 8d       	ldd	r27, Y+24	; 0x18
    bc36:	14 96       	adiw	r26, 0x04	; 4
    bc38:	6d 93       	st	X+, r22
    bc3a:	7d 93       	st	X+, r23
    bc3c:	8d 93       	st	X+, r24
    bc3e:	9c 93       	st	X, r25
    bc40:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    bc42:	b1 e0       	ldi	r27, 0x01	; 1
    bc44:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    bc46:	ef 89       	ldd	r30, Y+23	; 0x17
    bc48:	f8 8d       	ldd	r31, Y+24	; 0x18
    bc4a:	84 85       	ldd	r24, Z+12	; 0x0c
    bc4c:	95 85       	ldd	r25, Z+13	; 0x0d
    bc4e:	18 16       	cp	r1, r24
    bc50:	19 06       	cpc	r1, r25
    bc52:	0c f0       	brlt	.+2      	; 0xbc56 <collision_detect_level+0x524>
    bc54:	89 c0       	rjmp	.+274    	; 0xbd68 <collision_detect_level+0x636>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bc56:	69 85       	ldd	r22, Y+9	; 0x09
    bc58:	7a 85       	ldd	r23, Y+10	; 0x0a
    bc5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    bc5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    bc5e:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    bc62:	2b 01       	movw	r4, r22
    bc64:	3c 01       	movw	r6, r24
    bc66:	af 89       	ldd	r26, Y+23	; 0x17
    bc68:	b8 8d       	ldd	r27, Y+24	; 0x18
    bc6a:	14 96       	adiw	r26, 0x04	; 4
    bc6c:	2d 91       	ld	r18, X+
    bc6e:	3d 91       	ld	r19, X+
    bc70:	4d 91       	ld	r20, X+
    bc72:	5c 91       	ld	r21, X
    bc74:	17 97       	sbiw	r26, 0x07	; 7
    bc76:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    bc7a:	20 e0       	ldi	r18, 0x00	; 0
    bc7c:	30 e0       	ldi	r19, 0x00	; 0
    bc7e:	40 e8       	ldi	r20, 0x80	; 128
    bc80:	5f e3       	ldi	r21, 0x3F	; 63
    bc82:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    bc86:	20 e0       	ldi	r18, 0x00	; 0
    bc88:	30 e0       	ldi	r19, 0x00	; 0
    bc8a:	40 e0       	ldi	r20, 0x00	; 0
    bc8c:	5e e3       	ldi	r21, 0x3E	; 62
    bc8e:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    bc92:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bc96:	a8 01       	movw	r20, r16
    bc98:	80 91 a1 0f 	lds	r24, 0x0FA1
    bc9c:	90 91 a2 0f 	lds	r25, 0x0FA2
    bca0:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    bca4:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bca6:	ef 89       	ldd	r30, Y+23	; 0x17
    bca8:	f8 8d       	ldd	r31, Y+24	; 0x18
    bcaa:	24 81       	ldd	r18, Z+4	; 0x04
    bcac:	35 81       	ldd	r19, Z+5	; 0x05
    bcae:	46 81       	ldd	r20, Z+6	; 0x06
    bcb0:	57 81       	ldd	r21, Z+7	; 0x07
    bcb2:	c3 01       	movw	r24, r6
    bcb4:	b2 01       	movw	r22, r4
    bcb6:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    bcba:	20 e0       	ldi	r18, 0x00	; 0
    bcbc:	30 e0       	ldi	r19, 0x00	; 0
    bcbe:	40 e8       	ldi	r20, 0x80	; 128
    bcc0:	5f e3       	ldi	r21, 0x3F	; 63
    bcc2:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    bcc6:	20 e0       	ldi	r18, 0x00	; 0
    bcc8:	30 e0       	ldi	r19, 0x00	; 0
    bcca:	40 e0       	ldi	r20, 0x00	; 0
    bccc:	5e e3       	ldi	r21, 0x3E	; 62
    bcce:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    bcd2:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bcd6:	a6 01       	movw	r20, r12
    bcd8:	80 91 a1 0f 	lds	r24, 0x0FA1
    bcdc:	90 91 a2 0f 	lds	r25, 0x0FA2
    bce0:	0e 94 69 57 	call	0xaed2	; 0xaed2 <get_level_tile>
    bce4:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    bce6:	8e 2d       	mov	r24, r14
    bce8:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
    bcec:	88 23       	and	r24, r24
    bcee:	99 f0       	breq	.+38     	; 0xbd16 <collision_detect_level+0x5e4>
    bcf0:	af 89       	ldd	r26, Y+23	; 0x17
    bcf2:	b8 8d       	ldd	r27, Y+24	; 0x18
    bcf4:	18 96       	adiw	r26, 0x08	; 8
    bcf6:	6d 91       	ld	r22, X+
    bcf8:	7d 91       	ld	r23, X+
    bcfa:	8d 91       	ld	r24, X+
    bcfc:	9c 91       	ld	r25, X
    bcfe:	1b 97       	sbiw	r26, 0x0b	; 11
    bd00:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bd04:	dc 01       	movw	r26, r24
    bd06:	cb 01       	movw	r24, r22
    bd08:	28 e0       	ldi	r18, 0x08	; 8
    bd0a:	48 e0       	ldi	r20, 0x08	; 8
    bd0c:	b1 01       	movw	r22, r2
    bd0e:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    bd12:	84 30       	cpi	r24, 0x04	; 4
    bd14:	b8 f4       	brcc	.+46     	; 0xbd44 <collision_detect_level+0x612>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    bd16:	87 2d       	mov	r24, r7
    bd18:	0e 94 3c 58 	call	0xb078	; 0xb078 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    bd1c:	88 23       	and	r24, r24
    bd1e:	21 f1       	breq	.+72     	; 0xbd68 <collision_detect_level+0x636>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    bd20:	ef 89       	ldd	r30, Y+23	; 0x17
    bd22:	f8 8d       	ldd	r31, Y+24	; 0x18
    bd24:	60 85       	ldd	r22, Z+8	; 0x08
    bd26:	71 85       	ldd	r23, Z+9	; 0x09
    bd28:	82 85       	ldd	r24, Z+10	; 0x0a
    bd2a:	93 85       	ldd	r25, Z+11	; 0x0b
    bd2c:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bd30:	dc 01       	movw	r26, r24
    bd32:	cb 01       	movw	r24, r22
    bd34:	28 e0       	ldi	r18, 0x08	; 8
    bd36:	48 e0       	ldi	r20, 0x08	; 8
    bd38:	6a 81       	ldd	r22, Y+2	; 0x02
    bd3a:	7b 81       	ldd	r23, Y+3	; 0x03
    bd3c:	0e 94 85 5b 	call	0xb70a	; 0xb70a <pixel_overlap>
    bd40:	84 30       	cpi	r24, 0x04	; 4
    bd42:	90 f0       	brcs	.+36     	; 0xbd68 <collision_detect_level+0x636>
				{
					s->vx =  0;
    bd44:	af 89       	ldd	r26, Y+23	; 0x17
    bd46:	b8 8d       	ldd	r27, Y+24	; 0x18
    bd48:	1d 96       	adiw	r26, 0x0d	; 13
    bd4a:	1c 92       	st	X, r1
    bd4c:	1e 92       	st	-X, r1
    bd4e:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    bd50:	c5 01       	movw	r24, r10
    bd52:	b4 01       	movw	r22, r8
    bd54:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    bd58:	ef 89       	ldd	r30, Y+23	; 0x17
    bd5a:	f8 8d       	ldd	r31, Y+24	; 0x18
    bd5c:	64 83       	std	Z+4, r22	; 0x04
    bd5e:	75 83       	std	Z+5, r23	; 0x05
    bd60:	86 83       	std	Z+6, r24	; 0x06
    bd62:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    bd64:	f1 e0       	ldi	r31, 0x01	; 1
    bd66:	f9 83       	std	Y+1, r31	; 0x01
    bd68:	0f 5f       	subi	r16, 0xFF	; 255
    bd6a:	1f 4f       	sbci	r17, 0xFF	; 255
    bd6c:	2f ef       	ldi	r18, 0xFF	; 255
    bd6e:	c2 1a       	sub	r12, r18
    bd70:	d2 0a       	sbc	r13, r18
    bd72:	03 cf       	rjmp	.-506    	; 0xbb7a <collision_detect_level+0x448>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving on planet
	if (is_space() || (s->vx == 0 && s->vy == 0)) return result;
    bd74:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    bd76:	89 81       	ldd	r24, Y+1	; 0x01
    bd78:	68 96       	adiw	r28, 0x18	; 24
    bd7a:	0f b6       	in	r0, 0x3f	; 63
    bd7c:	f8 94       	cli
    bd7e:	de bf       	out	0x3e, r29	; 62
    bd80:	0f be       	out	0x3f, r0	; 63
    bd82:	cd bf       	out	0x3d, r28	; 61
    bd84:	df 91       	pop	r29
    bd86:	cf 91       	pop	r28
    bd88:	1f 91       	pop	r17
    bd8a:	0f 91       	pop	r16
    bd8c:	ff 90       	pop	r15
    bd8e:	ef 90       	pop	r14
    bd90:	df 90       	pop	r13
    bd92:	cf 90       	pop	r12
    bd94:	bf 90       	pop	r11
    bd96:	af 90       	pop	r10
    bd98:	9f 90       	pop	r9
    bd9a:	8f 90       	pop	r8
    bd9c:	7f 90       	pop	r7
    bd9e:	6f 90       	pop	r6
    bda0:	5f 90       	pop	r5
    bda2:	4f 90       	pop	r4
    bda4:	3f 90       	pop	r3
    bda6:	2f 90       	pop	r2
    bda8:	08 95       	ret

0000bdaa <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    bdaa:	2f 92       	push	r2
    bdac:	3f 92       	push	r3
    bdae:	4f 92       	push	r4
    bdb0:	5f 92       	push	r5
    bdb2:	6f 92       	push	r6
    bdb4:	7f 92       	push	r7
    bdb6:	8f 92       	push	r8
    bdb8:	9f 92       	push	r9
    bdba:	af 92       	push	r10
    bdbc:	bf 92       	push	r11
    bdbe:	cf 92       	push	r12
    bdc0:	df 92       	push	r13
    bdc2:	ef 92       	push	r14
    bdc4:	ff 92       	push	r15
    bdc6:	0f 93       	push	r16
    bdc8:	1f 93       	push	r17
    bdca:	cf 93       	push	r28
    bdcc:	df 93       	push	r29
    bdce:	cd b7       	in	r28, 0x3d	; 61
    bdd0:	de b7       	in	r29, 0x3e	; 62
    bdd2:	2f 97       	sbiw	r28, 0x0f	; 15
    bdd4:	0f b6       	in	r0, 0x3f	; 63
    bdd6:	f8 94       	cli
    bdd8:	de bf       	out	0x3e, r29	; 62
    bdda:	0f be       	out	0x3f, r0	; 63
    bddc:	cd bf       	out	0x3d, r28	; 61
    bdde:	9b ee       	ldi	r25, 0xEB	; 235
    bde0:	89 2e       	mov	r8, r25
    bde2:	9d e0       	ldi	r25, 0x0D	; 13
    bde4:	99 2e       	mov	r9, r25
    bde6:	8a ed       	ldi	r24, 0xDA	; 218
    bde8:	9d e0       	ldi	r25, 0x0D	; 13
    bdea:	9f 87       	std	Y+15, r25	; 0x0f
    bdec:	8e 87       	std	Y+14, r24	; 0x0e
    bdee:	9b e0       	ldi	r25, 0x0B	; 11
    bdf0:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    bdf2:	20 e1       	ldi	r18, 0x10	; 16
    bdf4:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    bdf6:	f4 01       	movw	r30, r8
    bdf8:	80 81       	ld	r24, Z
    bdfa:	88 23       	and	r24, r24
    bdfc:	09 f4       	brne	.+2      	; 0xbe00 <animate_shot+0x56>
    bdfe:	46 c1       	rjmp	.+652    	; 0xc08c <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    be00:	ee 85       	ldd	r30, Y+14	; 0x0e
    be02:	ff 85       	ldd	r31, Y+15	; 0x0f
    be04:	64 85       	ldd	r22, Z+12	; 0x0c
    be06:	75 85       	ldd	r23, Z+13	; 0x0d
    be08:	88 27       	eor	r24, r24
    be0a:	77 fd       	sbrc	r23, 7
    be0c:	80 95       	com	r24
    be0e:	98 2f       	mov	r25, r24
    be10:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    be14:	29 e8       	ldi	r18, 0x89	; 137
    be16:	38 e8       	ldi	r19, 0x88	; 136
    be18:	48 e8       	ldi	r20, 0x88	; 136
    be1a:	5c e3       	ldi	r21, 0x3C	; 60
    be1c:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    be20:	ee 85       	ldd	r30, Y+14	; 0x0e
    be22:	ff 85       	ldd	r31, Y+15	; 0x0f
    be24:	24 81       	ldd	r18, Z+4	; 0x04
    be26:	35 81       	ldd	r19, Z+5	; 0x05
    be28:	46 81       	ldd	r20, Z+6	; 0x06
    be2a:	57 81       	ldd	r21, Z+7	; 0x07
    be2c:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    be30:	2b 01       	movw	r4, r22
    be32:	3c 01       	movw	r6, r24
    be34:	ee 85       	ldd	r30, Y+14	; 0x0e
    be36:	ff 85       	ldd	r31, Y+15	; 0x0f
    be38:	64 83       	std	Z+4, r22	; 0x04
    be3a:	75 83       	std	Z+5, r23	; 0x05
    be3c:	86 83       	std	Z+6, r24	; 0x06
    be3e:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    be40:	29 e8       	ldi	r18, 0x89	; 137
    be42:	38 e8       	ldi	r19, 0x88	; 136
    be44:	48 e8       	ldi	r20, 0x88	; 136
    be46:	5c e3       	ldi	r21, 0x3C	; 60
    be48:	60 81       	ld	r22, Z
    be4a:	71 81       	ldd	r23, Z+1	; 0x01
    be4c:	82 81       	ldd	r24, Z+2	; 0x02
    be4e:	93 81       	ldd	r25, Z+3	; 0x03
    be50:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    be54:	ee 85       	ldd	r30, Y+14	; 0x0e
    be56:	ff 85       	ldd	r31, Y+15	; 0x0f
    be58:	20 85       	ldd	r18, Z+8	; 0x08
    be5a:	31 85       	ldd	r19, Z+9	; 0x09
    be5c:	42 85       	ldd	r20, Z+10	; 0x0a
    be5e:	53 85       	ldd	r21, Z+11	; 0x0b
    be60:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    be64:	6b 01       	movw	r12, r22
    be66:	7c 01       	movw	r14, r24
    be68:	ee 85       	ldd	r30, Y+14	; 0x0e
    be6a:	ff 85       	ldd	r31, Y+15	; 0x0f
    be6c:	60 87       	std	Z+8, r22	; 0x08
    be6e:	71 87       	std	Z+9, r23	; 0x09
    be70:	82 87       	std	Z+10, r24	; 0x0a
    be72:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    be74:	60 91 ac 0d 	lds	r22, 0x0DAC
    be78:	70 91 ad 0d 	lds	r23, 0x0DAD
    be7c:	80 e0       	ldi	r24, 0x00	; 0
    be7e:	90 e0       	ldi	r25, 0x00	; 0
    be80:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    be84:	9b 01       	movw	r18, r22
    be86:	ac 01       	movw	r20, r24
    be88:	c7 01       	movw	r24, r14
    be8a:	b6 01       	movw	r22, r12
    be8c:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    be90:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    be94:	c6 2e       	mov	r12, r22
    be96:	80 91 aa 0d 	lds	r24, 0x0DAA
    be9a:	90 91 ab 0d 	lds	r25, 0x0DAB
    be9e:	bc 01       	movw	r22, r24
    bea0:	80 e0       	ldi	r24, 0x00	; 0
    bea2:	90 e0       	ldi	r25, 0x00	; 0
    bea4:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    bea8:	9b 01       	movw	r18, r22
    beaa:	ac 01       	movw	r20, r24
    beac:	c3 01       	movw	r24, r6
    beae:	b2 01       	movw	r22, r4
    beb0:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    beb4:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    beb8:	01 e0       	ldi	r16, 0x01	; 1
    beba:	21 e0       	ldi	r18, 0x01	; 1
    bebc:	4c 2d       	mov	r20, r12
    bebe:	89 81       	ldd	r24, Y+1	; 0x01
    bec0:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    bec4:	ee 85       	ldd	r30, Y+14	; 0x0e
    bec6:	ff 85       	ldd	r31, Y+15	; 0x0f
    bec8:	c4 80       	ldd	r12, Z+4	; 0x04
    beca:	d5 80       	ldd	r13, Z+5	; 0x05
    becc:	e6 80       	ldd	r14, Z+6	; 0x06
    bece:	f7 80       	ldd	r15, Z+7	; 0x07
    bed0:	60 90 aa 0d 	lds	r6, 0x0DAA
    bed4:	70 90 ab 0d 	lds	r7, 0x0DAB
    bed8:	b3 01       	movw	r22, r6
    beda:	80 e0       	ldi	r24, 0x00	; 0
    bedc:	90 e0       	ldi	r25, 0x00	; 0
    bede:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    bee2:	9b 01       	movw	r18, r22
    bee4:	ac 01       	movw	r20, r24
    bee6:	c7 01       	movw	r24, r14
    bee8:	b6 01       	movw	r22, r12
    beea:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    beee:	87 ff       	sbrs	r24, 7
    bef0:	0f c0       	rjmp	.+30     	; 0xbf10 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    bef2:	f4 01       	movw	r30, r8
    bef4:	10 82       	st	Z, r1
				game.player.active_shots--;
    bef6:	80 91 d3 0d 	lds	r24, 0x0DD3
    befa:	81 50       	subi	r24, 0x01	; 1
    befc:	80 93 d3 0d 	sts	0x0DD3, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    bf00:	01 e0       	ldi	r16, 0x01	; 1
    bf02:	21 e0       	ldi	r18, 0x01	; 1
    bf04:	40 e0       	ldi	r20, 0x00	; 0
    bf06:	60 ee       	ldi	r22, 0xE0	; 224
    bf08:	89 81       	ldd	r24, Y+1	; 0x01
    bf0a:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
    bf0e:	be c0       	rjmp	.+380    	; 0xc08c <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    bf10:	20 e0       	ldi	r18, 0x00	; 0
    bf12:	30 e0       	ldi	r19, 0x00	; 0
    bf14:	40 e0       	ldi	r20, 0x00	; 0
    bf16:	51 e4       	ldi	r21, 0x41	; 65
    bf18:	c7 01       	movw	r24, r14
    bf1a:	b6 01       	movw	r22, r12
    bf1c:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    bf20:	1b 01       	movw	r2, r22
    bf22:	2c 01       	movw	r4, r24
    bf24:	b3 01       	movw	r22, r6
    bf26:	60 52       	subi	r22, 0x20	; 32
    bf28:	7f 4f       	sbci	r23, 0xFF	; 255
    bf2a:	80 e0       	ldi	r24, 0x00	; 0
    bf2c:	90 e0       	ldi	r25, 0x00	; 0
    bf2e:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    bf32:	9b 01       	movw	r18, r22
    bf34:	ac 01       	movw	r20, r24
    bf36:	c2 01       	movw	r24, r4
    bf38:	b1 01       	movw	r22, r2
    bf3a:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    bf3e:	18 16       	cp	r1, r24
    bf40:	c4 f2       	brlt	.-80     	; 0xbef2 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    bf42:	41 e0       	ldi	r20, 0x01	; 1
    bf44:	61 e0       	ldi	r22, 0x01	; 1
    bf46:	8e 85       	ldd	r24, Y+14	; 0x0e
    bf48:	9f 85       	ldd	r25, Y+15	; 0x0f
    bf4a:	0e 94 99 5b 	call	0xb732	; 0xb732 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    bf4e:	81 11       	cpse	r24, r1
    bf50:	d0 cf       	rjmp	.-96     	; 0xbef2 <animate_shot+0x148>
    bf52:	87 e6       	ldi	r24, 0x67	; 103
    bf54:	28 2e       	mov	r2, r24
    bf56:	8e e0       	ldi	r24, 0x0E	; 14
    bf58:	38 2e       	mov	r3, r24
    bf5a:	61 2c       	mov	r6, r1
    bf5c:	71 2c       	mov	r7, r1
    bf5e:	24 01       	movw	r4, r8
    bf60:	f1 e0       	ldi	r31, 0x01	; 1
    bf62:	4f 1a       	sub	r4, r31
    bf64:	51 08       	sbc	r5, r1
    bf66:	f1 01       	movw	r30, r2
    bf68:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    bf6a:	80 81       	ld	r24, Z
    bf6c:	88 23       	and	r24, r24
    bf6e:	09 f4       	brne	.+2      	; 0xbf72 <animate_shot+0x1c8>
    bf70:	82 c0       	rjmp	.+260    	; 0xc076 <animate_shot+0x2cc>
    bf72:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    bf74:	a0 80       	ld	r10, Z
    bf76:	aa 0c       	add	r10, r10
    bf78:	aa 0c       	add	r10, r10
    bf7a:	aa 0c       	add	r10, r10
    bf7c:	31 97       	sbiw	r30, 0x01	; 1
    bf7e:	c0 80       	ld	r12, Z
    bf80:	cc 0c       	add	r12, r12
    bf82:	cc 0c       	add	r12, r12
    bf84:	cc 0c       	add	r12, r12
    bf86:	3a 97       	sbiw	r30, 0x0a	; 10
    bf88:	60 81       	ld	r22, Z
    bf8a:	71 81       	ldd	r23, Z+1	; 0x01
    bf8c:	82 81       	ldd	r24, Z+2	; 0x02
    bf8e:	93 81       	ldd	r25, Z+3	; 0x03
    bf90:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bf94:	6a 83       	std	Y+2, r22	; 0x02
    bf96:	7b 83       	std	Y+3, r23	; 0x03
    bf98:	8c 83       	std	Y+4, r24	; 0x04
    bf9a:	9d 83       	std	Y+5, r25	; 0x05
    bf9c:	f1 01       	movw	r30, r2
    bf9e:	73 97       	sbiw	r30, 0x13	; 19
    bfa0:	60 81       	ld	r22, Z
    bfa2:	71 81       	ldd	r23, Z+1	; 0x01
    bfa4:	82 81       	ldd	r24, Z+2	; 0x02
    bfa6:	93 81       	ldd	r25, Z+3	; 0x03
    bfa8:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bfac:	6e 83       	std	Y+6, r22	; 0x06
    bfae:	7f 83       	std	Y+7, r23	; 0x07
    bfb0:	88 87       	std	Y+8, r24	; 0x08
    bfb2:	99 87       	std	Y+9, r25	; 0x09
    bfb4:	ee 85       	ldd	r30, Y+14	; 0x0e
    bfb6:	ff 85       	ldd	r31, Y+15	; 0x0f
    bfb8:	60 85       	ldd	r22, Z+8	; 0x08
    bfba:	71 85       	ldd	r23, Z+9	; 0x09
    bfbc:	82 85       	ldd	r24, Z+10	; 0x0a
    bfbe:	93 85       	ldd	r25, Z+11	; 0x0b
    bfc0:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bfc4:	6a 87       	std	Y+10, r22	; 0x0a
    bfc6:	7b 87       	std	Y+11, r23	; 0x0b
    bfc8:	8c 87       	std	Y+12, r24	; 0x0c
    bfca:	9d 87       	std	Y+13, r25	; 0x0d
    bfcc:	ee 85       	ldd	r30, Y+14	; 0x0e
    bfce:	ff 85       	ldd	r31, Y+15	; 0x0f
    bfd0:	64 81       	ldd	r22, Z+4	; 0x04
    bfd2:	75 81       	ldd	r23, Z+5	; 0x05
    bfd4:	86 81       	ldd	r24, Z+6	; 0x06
    bfd6:	97 81       	ldd	r25, Z+7	; 0x07
    bfd8:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    bfdc:	dc 01       	movw	r26, r24
    bfde:	cb 01       	movw	r24, r22
    bfe0:	ea 80       	ldd	r14, Y+2	; 0x02
    bfe2:	fb 80       	ldd	r15, Y+3	; 0x03
    bfe4:	0e 81       	ldd	r16, Y+6	; 0x06
    bfe6:	1f 81       	ldd	r17, Y+7	; 0x07
    bfe8:	28 e0       	ldi	r18, 0x08	; 8
    bfea:	48 e0       	ldi	r20, 0x08	; 8
    bfec:	6a 85       	ldd	r22, Y+10	; 0x0a
    bfee:	7b 85       	ldd	r23, Y+11	; 0x0b
    bff0:	0e 94 f9 53 	call	0xa7f2	; 0xa7f2 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    bff4:	88 23       	and	r24, r24
    bff6:	09 f4       	brne	.+2      	; 0xbffa <animate_shot+0x250>
    bff8:	3e c0       	rjmp	.+124    	; 0xc076 <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    bffa:	41 e0       	ldi	r20, 0x01	; 1
    bffc:	6f ef       	ldi	r22, 0xFF	; 255
    bffe:	84 e0       	ldi	r24, 0x04	; 4
    c000:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    c004:	f1 01       	movw	r30, r2
    c006:	80 81       	ld	r24, Z
    c008:	f2 01       	movw	r30, r4
    c00a:	90 81       	ld	r25, Z
    c00c:	89 1b       	sub	r24, r25
    c00e:	f1 01       	movw	r30, r2
    c010:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    c012:	18 16       	cp	r1, r24
    c014:	14 f1       	brlt	.+68     	; 0xc05a <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    c016:	41 e0       	ldi	r20, 0x01	; 1
    c018:	6f ef       	ldi	r22, 0xFF	; 255
    c01a:	86 e0       	ldi	r24, 0x06	; 6
    c01c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    c020:	f2 e4       	ldi	r31, 0x42	; 66
    c022:	f6 9d       	mul	r31, r6
    c024:	c0 01       	movw	r24, r0
    c026:	f7 9d       	mul	r31, r7
    c028:	90 0d       	add	r25, r0
    c02a:	11 24       	eor	r1, r1
    c02c:	8a 55       	subi	r24, 0x5A	; 90
    c02e:	92 4f       	sbci	r25, 0xF2	; 242
    c030:	fc 01       	movw	r30, r24
    c032:	e6 54       	subi	r30, 0x46	; 70
    c034:	ff 4f       	sbci	r31, 0xFF	; 255
    c036:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c038:	31 97       	sbiw	r30, 0x01	; 1
    c03a:	10 82       	st	Z, r1
							game.active_enemies--;
    c03c:	80 91 c1 0d 	lds	r24, 0x0DC1
    c040:	81 50       	subi	r24, 0x01	; 1
    c042:	80 93 c1 0d 	sts	0x0DC1, r24
							game.score += KILL_SCORE;
    c046:	80 91 ae 0d 	lds	r24, 0x0DAE
    c04a:	90 91 af 0d 	lds	r25, 0x0DAF
    c04e:	0a 96       	adiw	r24, 0x0a	; 10
    c050:	90 93 af 0d 	sts	0x0DAF, r25
    c054:	80 93 ae 0d 	sts	0x0DAE, r24
							break;
    c058:	19 c0       	rjmp	.+50     	; 0xc08c <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    c05a:	f4 01       	movw	r30, r8
    c05c:	10 82       	st	Z, r1
						game.player.active_shots--;
    c05e:	80 91 d3 0d 	lds	r24, 0x0DD3
    c062:	81 50       	subi	r24, 0x01	; 1
    c064:	80 93 d3 0d 	sts	0x0DD3, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    c068:	01 e0       	ldi	r16, 0x01	; 1
    c06a:	21 e0       	ldi	r18, 0x01	; 1
    c06c:	40 e0       	ldi	r20, 0x00	; 0
    c06e:	60 ee       	ldi	r22, 0xE0	; 224
    c070:	89 81       	ldd	r24, Y+1	; 0x01
    c072:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
    c076:	ff ef       	ldi	r31, 0xFF	; 255
    c078:	6f 1a       	sub	r6, r31
    c07a:	7f 0a       	sbc	r7, r31
    c07c:	22 e4       	ldi	r18, 0x42	; 66
    c07e:	22 0e       	add	r2, r18
    c080:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c082:	85 e0       	ldi	r24, 0x05	; 5
    c084:	68 16       	cp	r6, r24
    c086:	71 04       	cpc	r7, r1
    c088:	09 f0       	breq	.+2      	; 0xc08c <animate_shot+0x2e2>
    c08a:	6d cf       	rjmp	.-294    	; 0xbf66 <animate_shot+0x1bc>
    c08c:	9a e1       	ldi	r25, 0x1A	; 26
    c08e:	89 0e       	add	r8, r25
    c090:	91 1c       	adc	r9, r1
    c092:	e9 81       	ldd	r30, Y+1	; 0x01
    c094:	ef 5f       	subi	r30, 0xFF	; 255
    c096:	e9 83       	std	Y+1, r30	; 0x01
    c098:	8e 85       	ldd	r24, Y+14	; 0x0e
    c09a:	9f 85       	ldd	r25, Y+15	; 0x0f
    c09c:	4a 96       	adiw	r24, 0x1a	; 26
    c09e:	9f 87       	std	Y+15, r25	; 0x0f
    c0a0:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c0a2:	ee 30       	cpi	r30, 0x0E	; 14
    c0a4:	09 f0       	breq	.+2      	; 0xc0a8 <animate_shot+0x2fe>
    c0a6:	a7 ce       	rjmp	.-690    	; 0xbdf6 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    c0a8:	2f 96       	adiw	r28, 0x0f	; 15
    c0aa:	0f b6       	in	r0, 0x3f	; 63
    c0ac:	f8 94       	cli
    c0ae:	de bf       	out	0x3e, r29	; 62
    c0b0:	0f be       	out	0x3f, r0	; 63
    c0b2:	cd bf       	out	0x3d, r28	; 61
    c0b4:	df 91       	pop	r29
    c0b6:	cf 91       	pop	r28
    c0b8:	1f 91       	pop	r17
    c0ba:	0f 91       	pop	r16
    c0bc:	ff 90       	pop	r15
    c0be:	ef 90       	pop	r14
    c0c0:	df 90       	pop	r13
    c0c2:	cf 90       	pop	r12
    c0c4:	bf 90       	pop	r11
    c0c6:	af 90       	pop	r10
    c0c8:	9f 90       	pop	r9
    c0ca:	8f 90       	pop	r8
    c0cc:	7f 90       	pop	r7
    c0ce:	6f 90       	pop	r6
    c0d0:	5f 90       	pop	r5
    c0d2:	4f 90       	pop	r4
    c0d4:	3f 90       	pop	r3
    c0d6:	2f 90       	pop	r2
    c0d8:	08 95       	ret

0000c0da <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c0da:	7f 92       	push	r7
    c0dc:	8f 92       	push	r8
    c0de:	9f 92       	push	r9
    c0e0:	af 92       	push	r10
    c0e2:	bf 92       	push	r11
    c0e4:	cf 92       	push	r12
    c0e6:	df 92       	push	r13
    c0e8:	ef 92       	push	r14
    c0ea:	ff 92       	push	r15
    c0ec:	0f 93       	push	r16
    c0ee:	1f 93       	push	r17
    c0f0:	cf 93       	push	r28
    c0f2:	df 93       	push	r29
    c0f4:	1f 92       	push	r1
    c0f6:	cd b7       	in	r28, 0x3d	; 61
    c0f8:	de b7       	in	r29, 0x3e	; 62
    c0fa:	6c 01       	movw	r12, r24
    c0fc:	7b 01       	movw	r14, r22
    c0fe:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c100:	cb 01       	movw	r24, r22
    c102:	29 83       	std	Y+1, r18	; 0x01
    c104:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    c108:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c10a:	29 81       	ldd	r18, Y+1	; 0x01
    c10c:	20 9f       	mul	r18, r16
    c10e:	50 01       	movw	r10, r0
    c110:	11 24       	eor	r1, r1
    c112:	10 e0       	ldi	r17, 0x00	; 0
    c114:	81 2f       	mov	r24, r17
    c116:	90 e0       	ldi	r25, 0x00	; 0
    c118:	8a 15       	cp	r24, r10
    c11a:	9b 05       	cpc	r25, r11
    c11c:	54 f4       	brge	.+20     	; 0xc132 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c11e:	40 e0       	ldi	r20, 0x00	; 0
    c120:	b4 01       	movw	r22, r8
    c122:	81 2f       	mov	r24, r17
    c124:	87 0d       	add	r24, r7
    c126:	29 83       	std	Y+1, r18	; 0x01
    c128:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c12c:	1f 5f       	subi	r17, 0xFF	; 255
    c12e:	29 81       	ldd	r18, Y+1	; 0x01
    c130:	f1 cf       	rjmp	.-30     	; 0xc114 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c132:	f7 01       	movw	r30, r14
    c134:	84 81       	ldd	r24, Z+4	; 0x04
    c136:	88 23       	and	r24, r24
    c138:	51 f0       	breq	.+20     	; 0xc14e <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c13a:	f6 01       	movw	r30, r12
    c13c:	80 81       	ld	r24, Z
    c13e:	90 e1       	ldi	r25, 0x10	; 16
    c140:	98 27       	eor	r25, r24
    c142:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c144:	40 e0       	ldi	r20, 0x00	; 0
    c146:	60 ee       	ldi	r22, 0xE0	; 224
    c148:	87 2d       	mov	r24, r7
    c14a:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	}
	return anim->looped;
}
    c14e:	f7 01       	movw	r30, r14
    c150:	84 81       	ldd	r24, Z+4	; 0x04
    c152:	0f 90       	pop	r0
    c154:	df 91       	pop	r29
    c156:	cf 91       	pop	r28
    c158:	1f 91       	pop	r17
    c15a:	0f 91       	pop	r16
    c15c:	ff 90       	pop	r15
    c15e:	ef 90       	pop	r14
    c160:	df 90       	pop	r13
    c162:	cf 90       	pop	r12
    c164:	bf 90       	pop	r11
    c166:	af 90       	pop	r10
    c168:	9f 90       	pop	r9
    c16a:	8f 90       	pop	r8
    c16c:	7f 90       	pop	r7
    c16e:	08 95       	ret

0000c170 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    c170:	8f 92       	push	r8
    c172:	9f 92       	push	r9
    c174:	af 92       	push	r10
    c176:	bf 92       	push	r11
    c178:	ff 92       	push	r15
    c17a:	0f 93       	push	r16
    c17c:	1f 93       	push	r17
    c17e:	cf 93       	push	r28
    c180:	df 93       	push	r29
    c182:	ec 01       	movw	r28, r24
    c184:	f6 2e       	mov	r15, r22
    c186:	14 2f       	mov	r17, r20
    c188:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c18a:	6e 85       	ldd	r22, Y+14	; 0x0e
    c18c:	70 e0       	ldi	r23, 0x00	; 0
    c18e:	80 e0       	ldi	r24, 0x00	; 0
    c190:	90 e0       	ldi	r25, 0x00	; 0
    c192:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    c196:	29 e8       	ldi	r18, 0x89	; 137
    c198:	38 e8       	ldi	r19, 0x88	; 136
    c19a:	48 e8       	ldi	r20, 0x88	; 136
    c19c:	5c e3       	ldi	r21, 0x3C	; 60
    c19e:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    c1a2:	28 81       	ld	r18, Y
    c1a4:	39 81       	ldd	r19, Y+1	; 0x01
    c1a6:	4a 81       	ldd	r20, Y+2	; 0x02
    c1a8:	5b 81       	ldd	r21, Y+3	; 0x03
    c1aa:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    c1ae:	4b 01       	movw	r8, r22
    c1b0:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c1b2:	20 e0       	ldi	r18, 0x00	; 0
    c1b4:	30 e0       	ldi	r19, 0x00	; 0
    c1b6:	40 ef       	ldi	r20, 0xF0	; 240
    c1b8:	52 e4       	ldi	r21, 0x42	; 66
    c1ba:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    c1be:	18 16       	cp	r1, r24
    c1c0:	2c f0       	brlt	.+10     	; 0xc1cc <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c1c2:	88 82       	st	Y, r8
    c1c4:	99 82       	std	Y+1, r9	; 0x01
    c1c6:	aa 82       	std	Y+2, r10	; 0x02
    c1c8:	bb 82       	std	Y+3, r11	; 0x03
    c1ca:	08 c0       	rjmp	.+16     	; 0xc1dc <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c1cc:	80 e0       	ldi	r24, 0x00	; 0
    c1ce:	90 e0       	ldi	r25, 0x00	; 0
    c1d0:	a0 ef       	ldi	r26, 0xF0	; 240
    c1d2:	b2 e4       	ldi	r27, 0x42	; 66
    c1d4:	88 83       	st	Y, r24
    c1d6:	99 83       	std	Y+1, r25	; 0x01
    c1d8:	aa 83       	std	Y+2, r26	; 0x02
    c1da:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    c1dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    c1de:	7d 85       	ldd	r23, Y+13	; 0x0d
    c1e0:	88 27       	eor	r24, r24
    c1e2:	77 fd       	sbrc	r23, 7
    c1e4:	80 95       	com	r24
    c1e6:	98 2f       	mov	r25, r24
    c1e8:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    c1ec:	29 e8       	ldi	r18, 0x89	; 137
    c1ee:	38 e8       	ldi	r19, 0x88	; 136
    c1f0:	48 e8       	ldi	r20, 0x88	; 136
    c1f2:	5c e3       	ldi	r21, 0x3C	; 60
    c1f4:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    c1f8:	9b 01       	movw	r18, r22
    c1fa:	ac 01       	movw	r20, r24
    c1fc:	6c 81       	ldd	r22, Y+4	; 0x04
    c1fe:	7d 81       	ldd	r23, Y+5	; 0x05
    c200:	8e 81       	ldd	r24, Y+6	; 0x06
    c202:	9f 81       	ldd	r25, Y+7	; 0x07
    c204:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    c208:	6c 83       	std	Y+4, r22	; 0x04
    c20a:	7d 83       	std	Y+5, r23	; 0x05
    c20c:	8e 83       	std	Y+6, r24	; 0x06
    c20e:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    c210:	29 e8       	ldi	r18, 0x89	; 137
    c212:	38 e8       	ldi	r19, 0x88	; 136
    c214:	48 e8       	ldi	r20, 0x88	; 136
    c216:	5c e3       	ldi	r21, 0x3C	; 60
    c218:	68 81       	ld	r22, Y
    c21a:	79 81       	ldd	r23, Y+1	; 0x01
    c21c:	8a 81       	ldd	r24, Y+2	; 0x02
    c21e:	9b 81       	ldd	r25, Y+3	; 0x03
    c220:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    c224:	9b 01       	movw	r18, r22
    c226:	ac 01       	movw	r20, r24
    c228:	68 85       	ldd	r22, Y+8	; 0x08
    c22a:	79 85       	ldd	r23, Y+9	; 0x09
    c22c:	8a 85       	ldd	r24, Y+10	; 0x0a
    c22e:	9b 85       	ldd	r25, Y+11	; 0x0b
    c230:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    c234:	68 87       	std	Y+8, r22	; 0x08
    c236:	79 87       	std	Y+9, r23	; 0x09
    c238:	8a 87       	std	Y+10, r24	; 0x0a
    c23a:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    c23c:	40 2f       	mov	r20, r16
    c23e:	61 2f       	mov	r22, r17
    c240:	ce 01       	movw	r24, r28
    c242:	0e 94 99 5b 	call	0xb732	; 0xb732 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c246:	e0 91 ac 0d 	lds	r30, 0x0DAC
    c24a:	f0 91 ad 0d 	lds	r31, 0x0DAD
    c24e:	bf 01       	movw	r22, r30
    c250:	80 e0       	ldi	r24, 0x00	; 0
    c252:	90 e0       	ldi	r25, 0x00	; 0
    c254:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c258:	9b 01       	movw	r18, r22
    c25a:	ac 01       	movw	r20, r24
    c25c:	68 85       	ldd	r22, Y+8	; 0x08
    c25e:	79 85       	ldd	r23, Y+9	; 0x09
    c260:	8a 85       	ldd	r24, Y+10	; 0x0a
    c262:	9b 85       	ldd	r25, Y+11	; 0x0b
    c264:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    c268:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c26c:	b6 2e       	mov	r11, r22
    c26e:	e0 91 aa 0d 	lds	r30, 0x0DAA
    c272:	f0 91 ab 0d 	lds	r31, 0x0DAB
    c276:	bf 01       	movw	r22, r30
    c278:	80 e0       	ldi	r24, 0x00	; 0
    c27a:	90 e0       	ldi	r25, 0x00	; 0
    c27c:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c280:	9b 01       	movw	r18, r22
    c282:	ac 01       	movw	r20, r24
    c284:	6c 81       	ldd	r22, Y+4	; 0x04
    c286:	7d 81       	ldd	r23, Y+5	; 0x05
    c288:	8e 81       	ldd	r24, Y+6	; 0x06
    c28a:	9f 81       	ldd	r25, Y+7	; 0x07
    c28c:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    c290:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c294:	21 2f       	mov	r18, r17
    c296:	4b 2d       	mov	r20, r11
    c298:	8f 2d       	mov	r24, r15
    c29a:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
}
    c29e:	df 91       	pop	r29
    c2a0:	cf 91       	pop	r28
    c2a2:	1f 91       	pop	r17
    c2a4:	0f 91       	pop	r16
    c2a6:	ff 90       	pop	r15
    c2a8:	bf 90       	pop	r11
    c2aa:	af 90       	pop	r10
    c2ac:	9f 90       	pop	r9
    c2ae:	8f 90       	pop	r8
    c2b0:	08 95       	ret

0000c2b2 <animate_player>:

void animate_player()
{
    c2b2:	0f 93       	push	r16
    c2b4:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    c2b6:	80 91 d4 0d 	lds	r24, 0x0DD4
    c2ba:	84 ff       	sbrs	r24, 4
    c2bc:	38 c0       	rjmp	.+112    	; 0xc32e <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    c2be:	60 91 ac 0d 	lds	r22, 0x0DAC
    c2c2:	70 91 ad 0d 	lds	r23, 0x0DAD
    c2c6:	80 e0       	ldi	r24, 0x00	; 0
    c2c8:	90 e0       	ldi	r25, 0x00	; 0
    c2ca:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c2ce:	9b 01       	movw	r18, r22
    c2d0:	ac 01       	movw	r20, r24
    c2d2:	60 91 cc 0d 	lds	r22, 0x0DCC
    c2d6:	70 91 cd 0d 	lds	r23, 0x0DCD
    c2da:	80 91 ce 0d 	lds	r24, 0x0DCE
    c2de:	90 91 cf 0d 	lds	r25, 0x0DCF
    c2e2:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    c2e6:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c2ea:	c6 2f       	mov	r28, r22
    c2ec:	60 91 aa 0d 	lds	r22, 0x0DAA
    c2f0:	70 91 ab 0d 	lds	r23, 0x0DAB
    c2f4:	80 e0       	ldi	r24, 0x00	; 0
    c2f6:	90 e0       	ldi	r25, 0x00	; 0
    c2f8:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c2fc:	9b 01       	movw	r18, r22
    c2fe:	ac 01       	movw	r20, r24
    c300:	60 91 c8 0d 	lds	r22, 0x0DC8
    c304:	70 91 c9 0d 	lds	r23, 0x0DC9
    c308:	80 91 ca 0d 	lds	r24, 0x0DCA
    c30c:	90 91 cb 0d 	lds	r25, 0x0DCB
    c310:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    c314:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c318:	00 91 d8 0d 	lds	r16, 0x0DD8
    c31c:	20 91 d7 0d 	lds	r18, 0x0DD7
    c320:	4c 2f       	mov	r20, r28
    c322:	80 e0       	ldi	r24, 0x00	; 0
    c324:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    c328:	cf 91       	pop	r28
    c32a:	0f 91       	pop	r16
    c32c:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    c32e:	20 91 d8 0d 	lds	r18, 0x0DD8
    c332:	40 91 d7 0d 	lds	r20, 0x0DD7
    c336:	60 e0       	ldi	r22, 0x00	; 0
    c338:	84 ec       	ldi	r24, 0xC4	; 196
    c33a:	9d e0       	ldi	r25, 0x0D	; 13
}
    c33c:	cf 91       	pop	r28
    c33e:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    c340:	0c 94 b8 60 	jmp	0xc170	; 0xc170 <animate_sprite>

0000c344 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    c344:	1f 93       	push	r17
    c346:	cf 93       	push	r28
    c348:	df 93       	push	r29
    c34a:	ec 01       	movw	r28, r24
    c34c:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c34e:	98 89       	ldd	r25, Y+16	; 0x10
    c350:	89 2f       	mov	r24, r25
    c352:	88 70       	andi	r24, 0x08	; 8
    c354:	93 ff       	sbrs	r25, 3
    c356:	1e c0       	rjmp	.+60     	; 0xc394 <update_spider_enemy+0x50>
    c358:	2d 89       	ldd	r18, Y+21	; 0x15
    c35a:	20 38       	cpi	r18, 0x80	; 128
    c35c:	d9 f4       	brne	.+54     	; 0xc394 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    c35e:	81 e0       	ldi	r24, 0x01	; 1
    c360:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c362:	80 e0       	ldi	r24, 0x00	; 0
    c364:	90 e0       	ldi	r25, 0x00	; 0
    c366:	a8 ec       	ldi	r26, 0xC8	; 200
    c368:	b2 ec       	ldi	r27, 0xC2	; 194
    c36a:	88 83       	st	Y, r24
    c36c:	99 83       	std	Y+1, r25	; 0x01
    c36e:	aa 83       	std	Y+2, r26	; 0x02
    c370:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    c372:	8f ef       	ldi	r24, 0xFF	; 255
    c374:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    c376:	8c e3       	ldi	r24, 0x3C	; 60
    c378:	90 e0       	ldi	r25, 0x00	; 0
    c37a:	9d 87       	std	Y+13, r25	; 0x0d
    c37c:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    c37e:	89 89       	ldd	r24, Y+17	; 0x11
    c380:	81 11       	cpse	r24, r1
    c382:	04 c0       	rjmp	.+8      	; 0xc38c <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c384:	84 ec       	ldi	r24, 0xC4	; 196
    c386:	9f ef       	ldi	r25, 0xFF	; 255
    c388:	9d 87       	std	Y+13, r25	; 0x0d
    c38a:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c38c:	40 e0       	ldi	r20, 0x00	; 0
    c38e:	6d e5       	ldi	r22, 0x5D	; 93
    c390:	7d e2       	ldi	r23, 0x2D	; 45
    c392:	1a c0       	rjmp	.+52     	; 0xc3c8 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c394:	90 ff       	sbrs	r25, 0
    c396:	10 c0       	rjmp	.+32     	; 0xc3b8 <update_spider_enemy+0x74>
    c398:	9e 85       	ldd	r25, Y+14	; 0x0e
    c39a:	91 11       	cpse	r25, r1
    c39c:	0d c0       	rjmp	.+26     	; 0xc3b8 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    c39e:	88 e0       	ldi	r24, 0x08	; 8
    c3a0:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    c3a2:	1d 86       	std	Y+13, r1	; 0x0d
    c3a4:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    c3a6:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    c3a8:	89 89       	ldd	r24, Y+17	; 0x11
    c3aa:	81 11       	cpse	r24, r1
    c3ac:	03 c0       	rjmp	.+6      	; 0xc3b4 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    c3ae:	81 e0       	ldi	r24, 0x01	; 1
    c3b0:	89 8b       	std	Y+17, r24	; 0x11
    c3b2:	0d c0       	rjmp	.+26     	; 0xc3ce <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    c3b4:	19 8a       	std	Y+17, r1	; 0x11
    c3b6:	0b c0       	rjmp	.+22     	; 0xc3ce <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    c3b8:	88 23       	and	r24, r24
    c3ba:	49 f0       	breq	.+18     	; 0xc3ce <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c3bc:	ce 01       	movw	r24, r28
    c3be:	c2 96       	adiw	r24, 0x32	; 50
    c3c0:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    c3c4:	40 e0       	ldi	r20, 0x00	; 0
    c3c6:	bc 01       	movw	r22, r24
    c3c8:	81 2f       	mov	r24, r17
    c3ca:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	}
	e->frame_count++;
    c3ce:	8d 89       	ldd	r24, Y+21	; 0x15
    c3d0:	8f 5f       	subi	r24, 0xFF	; 255
    c3d2:	8d 8b       	std	Y+21, r24	; 0x15
}
    c3d4:	df 91       	pop	r29
    c3d6:	cf 91       	pop	r28
    c3d8:	1f 91       	pop	r17
    c3da:	08 95       	ret

0000c3dc <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    c3dc:	cf 93       	push	r28
    c3de:	fc 01       	movw	r30, r24
    c3e0:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c3e2:	84 e1       	ldi	r24, 0x14	; 20
    c3e4:	90 e0       	ldi	r25, 0x00	; 0
    c3e6:	95 87       	std	Z+13, r25	; 0x0d
    c3e8:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    c3ea:	10 82       	st	Z, r1
    c3ec:	11 82       	std	Z+1, r1	; 0x01
    c3ee:	12 82       	std	Z+2, r1	; 0x02
    c3f0:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c3f2:	cf 01       	movw	r24, r30
    c3f4:	c2 96       	adiw	r24, 0x32	; 50
    c3f6:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    c3fa:	40 e0       	ldi	r20, 0x00	; 0
    c3fc:	bc 01       	movw	r22, r24
    c3fe:	8c 2f       	mov	r24, r28
}
    c400:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c402:	0c 94 44 54 	jmp	0xa888	; 0xa888 <LBMapSprite>

0000c406 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c406:	cf 93       	push	r28
    c408:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c40a:	42 96       	adiw	r24, 0x12	; 18
    c40c:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    c410:	40 e0       	ldi	r20, 0x00	; 0
    c412:	bc 01       	movw	r22, r24
    c414:	8c 2f       	mov	r24, r28
}
    c416:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c418:	0c 94 44 54 	jmp	0xa888	; 0xa888 <LBMapSprite>

0000c41c <update_enemies>:
}

void update_enemies()
{
    c41c:	ef 92       	push	r14
    c41e:	ff 92       	push	r15
    c420:	0f 93       	push	r16
    c422:	1f 93       	push	r17
    c424:	cf 93       	push	r28
    c426:	df 93       	push	r29
    c428:	c3 e6       	ldi	r28, 0x63	; 99
    c42a:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c42c:	16 e0       	ldi	r17, 0x06	; 6
    c42e:	ce 01       	movw	r24, r28
    c430:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c432:	fc 01       	movw	r30, r24
    c434:	20 81       	ld	r18, Z
    c436:	ae 01       	movw	r20, r28
    c438:	41 50       	subi	r20, 0x01	; 1
    c43a:	51 09       	sbc	r21, r1
    c43c:	7a 01       	movw	r14, r20
    c43e:	24 ff       	sbrs	r18, 4
    c440:	0a c0       	rjmp	.+20     	; 0xc456 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c442:	08 81       	ld	r16, Y
    c444:	fa 01       	movw	r30, r20
    c446:	20 81       	ld	r18, Z
    c448:	41 2f       	mov	r20, r17
    c44a:	be 01       	movw	r22, r28
    c44c:	69 5d       	subi	r22, 0xD9	; 217
    c44e:	7f 4f       	sbci	r23, 0xFF	; 255
    c450:	0e 94 6d 60 	call	0xc0da	; 0xc0da <map_explosion>
    c454:	15 c0       	rjmp	.+42     	; 0xc480 <update_enemies+0x64>
    c456:	fe 01       	movw	r30, r28
    c458:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c45a:	80 81       	ld	r24, Z
    c45c:	88 23       	and	r24, r24
    c45e:	81 f0       	breq	.+32     	; 0xc480 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    c460:	89 81       	ldd	r24, Y+1	; 0x01
    c462:	88 23       	and	r24, r24
    c464:	41 f0       	breq	.+16     	; 0xc476 <update_enemies+0x5a>
    c466:	81 30       	cpi	r24, 0x01	; 1
    c468:	59 f4       	brne	.+22     	; 0xc480 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c46a:	61 2f       	mov	r22, r17
    c46c:	ce 01       	movw	r24, r28
    c46e:	43 97       	sbiw	r24, 0x13	; 19
    c470:	0e 94 ee 61 	call	0xc3dc	; 0xc3dc <update_shark_enemy>
    c474:	05 c0       	rjmp	.+10     	; 0xc480 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c476:	61 2f       	mov	r22, r17
    c478:	ce 01       	movw	r24, r28
    c47a:	43 97       	sbiw	r24, 0x13	; 19
    c47c:	0e 94 a2 61 	call	0xc344	; 0xc344 <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c480:	f7 01       	movw	r30, r14
    c482:	90 81       	ld	r25, Z
    c484:	88 81       	ld	r24, Y
    c486:	98 9f       	mul	r25, r24
    c488:	10 0d       	add	r17, r0
    c48a:	11 24       	eor	r1, r1
    c48c:	ce 5b       	subi	r28, 0xBE	; 190
    c48e:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c490:	ff e0       	ldi	r31, 0x0F	; 15
    c492:	cd 3a       	cpi	r28, 0xAD	; 173
    c494:	df 07       	cpc	r29, r31
    c496:	59 f6       	brne	.-106    	; 0xc42e <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c498:	df 91       	pop	r29
    c49a:	cf 91       	pop	r28
    c49c:	1f 91       	pop	r17
    c49e:	0f 91       	pop	r16
    c4a0:	ff 90       	pop	r15
    c4a2:	ef 90       	pop	r14
    c4a4:	08 95       	ret

0000c4a6 <update_enemy_shots>:

void update_enemy_shots()
{
    c4a6:	8f 92       	push	r8
    c4a8:	9f 92       	push	r9
    c4aa:	af 92       	push	r10
    c4ac:	bf 92       	push	r11
    c4ae:	cf 92       	push	r12
    c4b0:	df 92       	push	r13
    c4b2:	ef 92       	push	r14
    c4b4:	ff 92       	push	r15
    c4b6:	0f 93       	push	r16
    c4b8:	1f 93       	push	r17
    c4ba:	cf 93       	push	r28
    c4bc:	df 93       	push	r29
    c4be:	00 d0       	rcall	.+0      	; 0xc4c0 <update_enemy_shots+0x1a>
    c4c0:	00 d0       	rcall	.+0      	; 0xc4c2 <update_enemy_shots+0x1c>
    c4c2:	cd b7       	in	r28, 0x3d	; 61
    c4c4:	de b7       	in	r29, 0x3e	; 62
    c4c6:	26 e6       	ldi	r18, 0x66	; 102
    c4c8:	82 2e       	mov	r8, r18
    c4ca:	2e e0       	ldi	r18, 0x0E	; 14
    c4cc:	92 2e       	mov	r9, r18
    c4ce:	09 e7       	ldi	r16, 0x79	; 121
    c4d0:	1e e0       	ldi	r17, 0x0E	; 14
    c4d2:	3f e0       	ldi	r19, 0x0F	; 15
    c4d4:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    c4d6:	44 e6       	ldi	r20, 0x64	; 100
    c4d8:	e4 2e       	mov	r14, r20
    c4da:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    c4dc:	5c e9       	ldi	r21, 0x9C	; 156
    c4de:	c5 2e       	mov	r12, r21
    c4e0:	dd 24       	eor	r13, r13
    c4e2:	da 94       	dec	r13
    c4e4:	aa 24       	eor	r10, r10
    c4e6:	aa 94       	dec	r10
    c4e8:	ab 0c       	add	r10, r11
    c4ea:	f4 01       	movw	r30, r8
    c4ec:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c4ee:	80 81       	ld	r24, Z
    c4f0:	88 23       	and	r24, r24
    c4f2:	09 f4       	brne	.+2      	; 0xc4f6 <update_enemy_shots+0x50>
    c4f4:	58 c0       	rjmp	.+176    	; 0xc5a6 <update_enemy_shots+0x100>
    c4f6:	f4 01       	movw	r30, r8
    c4f8:	80 81       	ld	r24, Z
    c4fa:	8c 33       	cpi	r24, 0x3C	; 60
    c4fc:	08 f4       	brcc	.+2      	; 0xc500 <update_enemy_shots+0x5a>
    c4fe:	50 c0       	rjmp	.+160    	; 0xc5a0 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    c500:	10 82       	st	Z, r1
    c502:	f8 01       	movw	r30, r16
    c504:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    c506:	80 81       	ld	r24, Z
    c508:	81 30       	cpi	r24, 0x01	; 1
    c50a:	09 f0       	breq	.+2      	; 0xc50e <update_enemy_shots+0x68>
    c50c:	4c c0       	rjmp	.+152    	; 0xc5a6 <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    c50e:	f8 01       	movw	r30, r16
    c510:	90 81       	ld	r25, Z
    c512:	91 11       	cpse	r25, r1
    c514:	3f c0       	rjmp	.+126    	; 0xc594 <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    c516:	80 83       	st	Z, r24
    c518:	f4 01       	movw	r30, r8
    c51a:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c51c:	20 81       	ld	r18, Z
    c51e:	31 81       	ldd	r19, Z+1	; 0x01
    c520:	42 81       	ldd	r20, Z+2	; 0x02
    c522:	53 81       	ldd	r21, Z+3	; 0x03
    c524:	f4 01       	movw	r30, r8
    c526:	26 83       	std	Z+6, r18	; 0x06
    c528:	37 83       	std	Z+7, r19	; 0x07
    c52a:	40 87       	std	Z+8, r20	; 0x08
    c52c:	51 87       	std	Z+9, r21	; 0x09
    c52e:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c530:	60 81       	ld	r22, Z
    c532:	71 81       	ldd	r23, Z+1	; 0x01
    c534:	82 81       	ldd	r24, Z+2	; 0x02
    c536:	93 81       	ldd	r25, Z+3	; 0x03
    c538:	29 83       	std	Y+1, r18	; 0x01
    c53a:	3a 83       	std	Y+2, r19	; 0x02
    c53c:	4b 83       	std	Y+3, r20	; 0x03
    c53e:	5c 83       	std	Y+4, r21	; 0x04
    c540:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c544:	83 e0       	ldi	r24, 0x03	; 3
    c546:	76 95       	lsr	r23
    c548:	67 95       	ror	r22
    c54a:	8a 95       	dec	r24
    c54c:	e1 f7       	brne	.-8      	; 0xc546 <update_enemy_shots+0xa0>
    c54e:	93 e0       	ldi	r25, 0x03	; 3
    c550:	66 0f       	add	r22, r22
    c552:	77 1f       	adc	r23, r23
    c554:	9a 95       	dec	r25
    c556:	e1 f7       	brne	.-8      	; 0xc550 <update_enemy_shots+0xaa>
    c558:	80 e0       	ldi	r24, 0x00	; 0
    c55a:	90 e0       	ldi	r25, 0x00	; 0
    c55c:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c560:	f4 01       	movw	r30, r8
    c562:	62 87       	std	Z+10, r22	; 0x0a
    c564:	73 87       	std	Z+11, r23	; 0x0b
    c566:	84 87       	std	Z+12, r24	; 0x0c
    c568:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    c56a:	f7 86       	std	Z+15, r15	; 0x0f
    c56c:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    c56e:	29 81       	ldd	r18, Y+1	; 0x01
    c570:	3a 81       	ldd	r19, Y+2	; 0x02
    c572:	4b 81       	ldd	r20, Y+3	; 0x03
    c574:	5c 81       	ldd	r21, Y+4	; 0x04
    c576:	60 91 c8 0d 	lds	r22, 0x0DC8
    c57a:	70 91 c9 0d 	lds	r23, 0x0DC9
    c57e:	80 91 ca 0d 	lds	r24, 0x0DCA
    c582:	90 91 cb 0d 	lds	r25, 0x0DCB
    c586:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    c58a:	18 16       	cp	r1, r24
    c58c:	1c f0       	brlt	.+6      	; 0xc594 <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    c58e:	f4 01       	movw	r30, r8
    c590:	d7 86       	std	Z+15, r13	; 0x0f
    c592:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c594:	6a 2d       	mov	r22, r10
    c596:	c4 01       	movw	r24, r8
    c598:	02 96       	adiw	r24, 0x02	; 2
    c59a:	0e 94 03 62 	call	0xc406	; 0xc406 <update_basic_shot>
    c59e:	03 c0       	rjmp	.+6      	; 0xc5a6 <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    c5a0:	8f 5f       	subi	r24, 0xFF	; 255
    c5a2:	f4 01       	movw	r30, r8
    c5a4:	80 83       	st	Z, r24
    c5a6:	b3 94       	inc	r11
    c5a8:	f2 e4       	ldi	r31, 0x42	; 66
    c5aa:	8f 0e       	add	r8, r31
    c5ac:	91 1c       	adc	r9, r1
    c5ae:	0e 5b       	subi	r16, 0xBE	; 190
    c5b0:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c5b2:	84 e1       	ldi	r24, 0x14	; 20
    c5b4:	b8 12       	cpse	r11, r24
    c5b6:	96 cf       	rjmp	.-212    	; 0xc4e4 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c5b8:	0f 90       	pop	r0
    c5ba:	0f 90       	pop	r0
    c5bc:	0f 90       	pop	r0
    c5be:	0f 90       	pop	r0
    c5c0:	df 91       	pop	r29
    c5c2:	cf 91       	pop	r28
    c5c4:	1f 91       	pop	r17
    c5c6:	0f 91       	pop	r16
    c5c8:	ff 90       	pop	r15
    c5ca:	ef 90       	pop	r14
    c5cc:	df 90       	pop	r13
    c5ce:	cf 90       	pop	r12
    c5d0:	bf 90       	pop	r11
    c5d2:	af 90       	pop	r10
    c5d4:	9f 90       	pop	r9
    c5d6:	8f 90       	pop	r8
    c5d8:	08 95       	ret

0000c5da <animate_enemies>:

void animate_enemies()
{
    c5da:	2f 92       	push	r2
    c5dc:	3f 92       	push	r3
    c5de:	4f 92       	push	r4
    c5e0:	5f 92       	push	r5
    c5e2:	6f 92       	push	r6
    c5e4:	7f 92       	push	r7
    c5e6:	8f 92       	push	r8
    c5e8:	9f 92       	push	r9
    c5ea:	af 92       	push	r10
    c5ec:	bf 92       	push	r11
    c5ee:	cf 92       	push	r12
    c5f0:	df 92       	push	r13
    c5f2:	ef 92       	push	r14
    c5f4:	ff 92       	push	r15
    c5f6:	0f 93       	push	r16
    c5f8:	1f 93       	push	r17
    c5fa:	cf 93       	push	r28
    c5fc:	df 93       	push	r29
    c5fe:	cd b7       	in	r28, 0x3d	; 61
    c600:	de b7       	in	r29, 0x3e	; 62
    c602:	2c 97       	sbiw	r28, 0x0c	; 12
    c604:	0f b6       	in	r0, 0x3f	; 63
    c606:	f8 94       	cli
    c608:	de bf       	out	0x3e, r29	; 62
    c60a:	0f be       	out	0x3f, r0	; 63
    c60c:	cd bf       	out	0x3d, r28	; 61
    c60e:	42 e6       	ldi	r20, 0x62	; 98
    c610:	24 2e       	mov	r2, r20
    c612:	4e e0       	ldi	r20, 0x0E	; 14
    c614:	34 2e       	mov	r3, r20
    c616:	83 e6       	ldi	r24, 0x63	; 99
    c618:	9e e0       	ldi	r25, 0x0E	; 14
    c61a:	9c 87       	std	Y+12, r25	; 0x0c
    c61c:	8b 87       	std	Y+11, r24	; 0x0b
    c61e:	50 e5       	ldi	r21, 0x50	; 80
    c620:	85 2e       	mov	r8, r21
    c622:	5e e0       	ldi	r21, 0x0E	; 14
    c624:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    c626:	66 e0       	ldi	r22, 0x06	; 6
    c628:	b6 2e       	mov	r11, r22
    c62a:	eb 85       	ldd	r30, Y+11	; 0x0b
    c62c:	fc 85       	ldd	r31, Y+12	; 0x0c
    c62e:	34 97       	sbiw	r30, 0x04	; 4
    c630:	fa 83       	std	Y+2, r31	; 0x02
    c632:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c634:	80 81       	ld	r24, Z
    c636:	eb 85       	ldd	r30, Y+11	; 0x0b
    c638:	fc 85       	ldd	r31, Y+12	; 0x0c
    c63a:	33 97       	sbiw	r30, 0x03	; 3
    c63c:	88 23       	and	r24, r24
    c63e:	09 f4       	brne	.+2      	; 0xc642 <animate_enemies+0x68>
    c640:	a9 c0       	rjmp	.+338    	; 0xc794 <animate_enemies+0x1ba>
    c642:	80 81       	ld	r24, Z
    c644:	84 fd       	sbrc	r24, 4
    c646:	a6 c0       	rjmp	.+332    	; 0xc794 <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    c648:	f4 01       	movw	r30, r8
    c64a:	44 80       	ldd	r4, Z+4	; 0x04
    c64c:	55 80       	ldd	r5, Z+5	; 0x05
    c64e:	66 80       	ldd	r6, Z+6	; 0x06
    c650:	77 80       	ldd	r7, Z+7	; 0x07
    c652:	60 91 aa 0d 	lds	r22, 0x0DAA
    c656:	70 91 ab 0d 	lds	r23, 0x0DAB
    c65a:	80 e0       	ldi	r24, 0x00	; 0
    c65c:	90 e0       	ldi	r25, 0x00	; 0
    c65e:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c662:	9b 01       	movw	r18, r22
    c664:	ac 01       	movw	r20, r24
    c666:	c3 01       	movw	r24, r6
    c668:	b2 01       	movw	r22, r4
    c66a:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    c66e:	87 fd       	sbrc	r24, 7
    c670:	25 c0       	rjmp	.+74     	; 0xc6bc <animate_enemies+0xe2>
    c672:	f4 01       	movw	r30, r8
    c674:	c0 84       	ldd	r12, Z+8	; 0x08
    c676:	d1 84       	ldd	r13, Z+9	; 0x09
    c678:	e2 84       	ldd	r14, Z+10	; 0x0a
    c67a:	f3 84       	ldd	r15, Z+11	; 0x0b
    c67c:	00 91 ac 0d 	lds	r16, 0x0DAC
    c680:	10 91 ad 0d 	lds	r17, 0x0DAD
    c684:	b8 01       	movw	r22, r16
    c686:	80 e0       	ldi	r24, 0x00	; 0
    c688:	90 e0       	ldi	r25, 0x00	; 0
    c68a:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c68e:	9b 01       	movw	r18, r22
    c690:	ac 01       	movw	r20, r24
    c692:	c7 01       	movw	r24, r14
    c694:	b6 01       	movw	r22, r12
    c696:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    c69a:	87 fd       	sbrc	r24, 7
    c69c:	0f c0       	rjmp	.+30     	; 0xc6bc <animate_enemies+0xe2>
    c69e:	b8 01       	movw	r22, r16
    c6a0:	60 53       	subi	r22, 0x30	; 48
    c6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c6a4:	80 e0       	ldi	r24, 0x00	; 0
    c6a6:	90 e0       	ldi	r25, 0x00	; 0
    c6a8:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c6ac:	9b 01       	movw	r18, r22
    c6ae:	ac 01       	movw	r20, r24
    c6b0:	c7 01       	movw	r24, r14
    c6b2:	b6 01       	movw	r22, r12
    c6b4:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    c6b8:	18 16       	cp	r1, r24
    c6ba:	84 f4       	brge	.+32     	; 0xc6dc <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    c6bc:	e9 81       	ldd	r30, Y+1	; 0x01
    c6be:	fa 81       	ldd	r31, Y+2	; 0x02
    c6c0:	10 82       	st	Z, r1
				game.active_enemies--;
    c6c2:	80 91 c1 0d 	lds	r24, 0x0DC1
    c6c6:	81 50       	subi	r24, 0x01	; 1
    c6c8:	80 93 c1 0d 	sts	0x0DC1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c6cc:	eb 85       	ldd	r30, Y+11	; 0x0b
    c6ce:	fc 85       	ldd	r31, Y+12	; 0x0c
    c6d0:	00 81       	ld	r16, Z
    c6d2:	f1 01       	movw	r30, r2
    c6d4:	20 81       	ld	r18, Z
    c6d6:	40 e0       	ldi	r20, 0x00	; 0
    c6d8:	60 ee       	ldi	r22, 0xE0	; 224
    c6da:	8c c0       	rjmp	.+280    	; 0xc7f4 <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c6dc:	c7 01       	movw	r24, r14
    c6de:	b6 01       	movw	r22, r12
    c6e0:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c6e4:	69 83       	std	Y+1, r22	; 0x01
    c6e6:	7a 83       	std	Y+2, r23	; 0x02
    c6e8:	8b 83       	std	Y+3, r24	; 0x03
    c6ea:	9c 83       	std	Y+4, r25	; 0x04
    c6ec:	c3 01       	movw	r24, r6
    c6ee:	b2 01       	movw	r22, r4
    c6f0:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c6f4:	6d 83       	std	Y+5, r22	; 0x05
    c6f6:	7e 83       	std	Y+6, r23	; 0x06
    c6f8:	8f 83       	std	Y+7, r24	; 0x07
    c6fa:	98 87       	std	Y+8, r25	; 0x08
    c6fc:	20 91 d8 0d 	lds	r18, 0x0DD8
    c700:	22 0f       	add	r18, r18
    c702:	22 0f       	add	r18, r18
    c704:	22 0f       	add	r18, r18
    c706:	40 91 d7 0d 	lds	r20, 0x0DD7
    c70a:	44 0f       	add	r20, r20
    c70c:	44 0f       	add	r20, r20
    c70e:	44 0f       	add	r20, r20
    c710:	60 91 cc 0d 	lds	r22, 0x0DCC
    c714:	70 91 cd 0d 	lds	r23, 0x0DCD
    c718:	80 91 ce 0d 	lds	r24, 0x0DCE
    c71c:	90 91 cf 0d 	lds	r25, 0x0DCF
    c720:	29 87       	std	Y+9, r18	; 0x09
    c722:	4a 87       	std	Y+10, r20	; 0x0a
    c724:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c728:	2b 01       	movw	r4, r22
    c72a:	3c 01       	movw	r6, r24
    c72c:	60 91 c8 0d 	lds	r22, 0x0DC8
    c730:	70 91 c9 0d 	lds	r23, 0x0DC9
    c734:	80 91 ca 0d 	lds	r24, 0x0DCA
    c738:	90 91 cb 0d 	lds	r25, 0x0DCB
    c73c:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c740:	dc 01       	movw	r26, r24
    c742:	cb 01       	movw	r24, r22
    c744:	28 e0       	ldi	r18, 0x08	; 8
    c746:	a2 2e       	mov	r10, r18
    c748:	38 e0       	ldi	r19, 0x08	; 8
    c74a:	c3 2e       	mov	r12, r19
    c74c:	e9 80       	ldd	r14, Y+1	; 0x01
    c74e:	fa 80       	ldd	r15, Y+2	; 0x02
    c750:	0d 81       	ldd	r16, Y+5	; 0x05
    c752:	1e 81       	ldd	r17, Y+6	; 0x06
    c754:	29 85       	ldd	r18, Y+9	; 0x09
    c756:	4a 85       	ldd	r20, Y+10	; 0x0a
    c758:	b2 01       	movw	r22, r4
    c75a:	0e 94 f9 53 	call	0xa7f2	; 0xa7f2 <LBCollides>
    c75e:	88 23       	and	r24, r24
    c760:	79 f0       	breq	.+30     	; 0xc780 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c762:	80 91 d4 0d 	lds	r24, 0x0DD4
    c766:	84 fd       	sbrc	r24, 4
    c768:	0b c0       	rjmp	.+22     	; 0xc780 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    c76a:	41 e0       	ldi	r20, 0x01	; 1
    c76c:	6f ef       	ldi	r22, 0xFF	; 255
    c76e:	85 e0       	ldi	r24, 0x05	; 5
    c770:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
				game.player.shield = 0;
    c774:	10 92 d9 0d 	sts	0x0DD9, r1
				game.player.flags = EXPLODING;
    c778:	80 e1       	ldi	r24, 0x10	; 16
    c77a:	80 93 d4 0d 	sts	0x0DD4, r24
				return;
    c77e:	57 c0       	rjmp	.+174    	; 0xc82e <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    c780:	eb 85       	ldd	r30, Y+11	; 0x0b
    c782:	fc 85       	ldd	r31, Y+12	; 0x0c
    c784:	20 81       	ld	r18, Z
    c786:	f1 01       	movw	r30, r2
    c788:	40 81       	ld	r20, Z
    c78a:	6b 2d       	mov	r22, r11
    c78c:	c4 01       	movw	r24, r8
    c78e:	0e 94 b8 60 	call	0xc170	; 0xc170 <animate_sprite>
    c792:	33 c0       	rjmp	.+102    	; 0xc7fa <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c794:	80 81       	ld	r24, Z
    c796:	84 ff       	sbrs	r24, 4
    c798:	30 c0       	rjmp	.+96     	; 0xc7fa <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c79a:	60 91 ac 0d 	lds	r22, 0x0DAC
    c79e:	70 91 ad 0d 	lds	r23, 0x0DAD
    c7a2:	80 e0       	ldi	r24, 0x00	; 0
    c7a4:	90 e0       	ldi	r25, 0x00	; 0
    c7a6:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c7aa:	9b 01       	movw	r18, r22
    c7ac:	ac 01       	movw	r20, r24
    c7ae:	f4 01       	movw	r30, r8
    c7b0:	60 85       	ldd	r22, Z+8	; 0x08
    c7b2:	71 85       	ldd	r23, Z+9	; 0x09
    c7b4:	82 85       	ldd	r24, Z+10	; 0x0a
    c7b6:	93 85       	ldd	r25, Z+11	; 0x0b
    c7b8:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    c7bc:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c7c0:	16 2f       	mov	r17, r22
    c7c2:	60 91 aa 0d 	lds	r22, 0x0DAA
    c7c6:	70 91 ab 0d 	lds	r23, 0x0DAB
    c7ca:	80 e0       	ldi	r24, 0x00	; 0
    c7cc:	90 e0       	ldi	r25, 0x00	; 0
    c7ce:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c7d2:	9b 01       	movw	r18, r22
    c7d4:	ac 01       	movw	r20, r24
    c7d6:	f4 01       	movw	r30, r8
    c7d8:	64 81       	ldd	r22, Z+4	; 0x04
    c7da:	75 81       	ldd	r23, Z+5	; 0x05
    c7dc:	86 81       	ldd	r24, Z+6	; 0x06
    c7de:	97 81       	ldd	r25, Z+7	; 0x07
    c7e0:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    c7e4:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c7e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    c7ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    c7ec:	00 81       	ld	r16, Z
    c7ee:	f1 01       	movw	r30, r2
    c7f0:	20 81       	ld	r18, Z
    c7f2:	41 2f       	mov	r20, r17
    c7f4:	8b 2d       	mov	r24, r11
    c7f6:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c7fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    c7fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    c7fe:	90 81       	ld	r25, Z
    c800:	f1 01       	movw	r30, r2
    c802:	80 81       	ld	r24, Z
    c804:	98 9f       	mul	r25, r24
    c806:	b0 0c       	add	r11, r0
    c808:	11 24       	eor	r1, r1
    c80a:	f2 e4       	ldi	r31, 0x42	; 66
    c80c:	2f 0e       	add	r2, r31
    c80e:	31 1c       	adc	r3, r1
    c810:	8b 85       	ldd	r24, Y+11	; 0x0b
    c812:	9c 85       	ldd	r25, Y+12	; 0x0c
    c814:	8e 5b       	subi	r24, 0xBE	; 190
    c816:	9f 4f       	sbci	r25, 0xFF	; 255
    c818:	9c 87       	std	Y+12, r25	; 0x0c
    c81a:	8b 87       	std	Y+11, r24	; 0x0b
    c81c:	92 e4       	ldi	r25, 0x42	; 66
    c81e:	89 0e       	add	r8, r25
    c820:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c822:	eb 85       	ldd	r30, Y+11	; 0x0b
    c824:	fc 85       	ldd	r31, Y+12	; 0x0c
    c826:	ed 5a       	subi	r30, 0xAD	; 173
    c828:	ff 40       	sbci	r31, 0x0F	; 15
    c82a:	09 f0       	breq	.+2      	; 0xc82e <animate_enemies+0x254>
    c82c:	fe ce       	rjmp	.-516    	; 0xc62a <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c82e:	2c 96       	adiw	r28, 0x0c	; 12
    c830:	0f b6       	in	r0, 0x3f	; 63
    c832:	f8 94       	cli
    c834:	de bf       	out	0x3e, r29	; 62
    c836:	0f be       	out	0x3f, r0	; 63
    c838:	cd bf       	out	0x3d, r28	; 61
    c83a:	df 91       	pop	r29
    c83c:	cf 91       	pop	r28
    c83e:	1f 91       	pop	r17
    c840:	0f 91       	pop	r16
    c842:	ff 90       	pop	r15
    c844:	ef 90       	pop	r14
    c846:	df 90       	pop	r13
    c848:	cf 90       	pop	r12
    c84a:	bf 90       	pop	r11
    c84c:	af 90       	pop	r10
    c84e:	9f 90       	pop	r9
    c850:	8f 90       	pop	r8
    c852:	7f 90       	pop	r7
    c854:	6f 90       	pop	r6
    c856:	5f 90       	pop	r5
    c858:	4f 90       	pop	r4
    c85a:	3f 90       	pop	r3
    c85c:	2f 90       	pop	r2
    c85e:	08 95       	ret

0000c860 <animate_enemy_shots>:

void animate_enemy_shots()
{
    c860:	2f 92       	push	r2
    c862:	3f 92       	push	r3
    c864:	4f 92       	push	r4
    c866:	5f 92       	push	r5
    c868:	6f 92       	push	r6
    c86a:	7f 92       	push	r7
    c86c:	8f 92       	push	r8
    c86e:	9f 92       	push	r9
    c870:	af 92       	push	r10
    c872:	bf 92       	push	r11
    c874:	cf 92       	push	r12
    c876:	df 92       	push	r13
    c878:	ef 92       	push	r14
    c87a:	ff 92       	push	r15
    c87c:	0f 93       	push	r16
    c87e:	1f 93       	push	r17
    c880:	cf 93       	push	r28
    c882:	df 93       	push	r29
    c884:	cd b7       	in	r28, 0x3d	; 61
    c886:	de b7       	in	r29, 0x3e	; 62
    c888:	62 97       	sbiw	r28, 0x12	; 18
    c88a:	0f b6       	in	r0, 0x3f	; 63
    c88c:	f8 94       	cli
    c88e:	de bf       	out	0x3e, r29	; 62
    c890:	0f be       	out	0x3f, r0	; 63
    c892:	cd bf       	out	0x3d, r28	; 61
    c894:	49 e7       	ldi	r20, 0x79	; 121
    c896:	24 2e       	mov	r2, r20
    c898:	4e e0       	ldi	r20, 0x0E	; 14
    c89a:	34 2e       	mov	r3, r20
    c89c:	58 e6       	ldi	r21, 0x68	; 104
    c89e:	85 2e       	mov	r8, r21
    c8a0:	5e e0       	ldi	r21, 0x0E	; 14
    c8a2:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    c8a4:	6e e0       	ldi	r22, 0x0E	; 14
    c8a6:	b6 2e       	mov	r11, r22
    c8a8:	f1 01       	movw	r30, r2
    c8aa:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    c8ac:	80 81       	ld	r24, Z
    c8ae:	81 30       	cpi	r24, 0x01	; 1
    c8b0:	09 f0       	breq	.+2      	; 0xc8b4 <animate_enemy_shots+0x54>
    c8b2:	f0 c0       	rjmp	.+480    	; 0xca94 <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    c8b4:	d1 01       	movw	r26, r2
    c8b6:	8c 91       	ld	r24, X
    c8b8:	88 23       	and	r24, r24
    c8ba:	09 f4       	brne	.+2      	; 0xc8be <animate_enemy_shots+0x5e>
    c8bc:	eb c0       	rjmp	.+470    	; 0xca94 <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    c8be:	f4 01       	movw	r30, r8
    c8c0:	c4 80       	ldd	r12, Z+4	; 0x04
    c8c2:	d5 80       	ldd	r13, Z+5	; 0x05
    c8c4:	e6 80       	ldd	r14, Z+6	; 0x06
    c8c6:	f7 80       	ldd	r15, Z+7	; 0x07
    c8c8:	60 90 aa 0d 	lds	r6, 0x0DAA
    c8cc:	70 90 ab 0d 	lds	r7, 0x0DAB
    c8d0:	b3 01       	movw	r22, r6
    c8d2:	80 e0       	ldi	r24, 0x00	; 0
    c8d4:	90 e0       	ldi	r25, 0x00	; 0
    c8d6:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c8da:	9b 01       	movw	r18, r22
    c8dc:	ac 01       	movw	r20, r24
    c8de:	c7 01       	movw	r24, r14
    c8e0:	b6 01       	movw	r22, r12
    c8e2:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    c8e6:	87 ff       	sbrs	r24, 7
    c8e8:	03 c0       	rjmp	.+6      	; 0xc8f0 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    c8ea:	d1 01       	movw	r26, r2
    c8ec:	1c 92       	st	X, r1
    c8ee:	86 c0       	rjmp	.+268    	; 0xc9fc <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    c8f0:	b3 01       	movw	r22, r6
    c8f2:	60 52       	subi	r22, 0x20	; 32
    c8f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c8f6:	80 e0       	ldi	r24, 0x00	; 0
    c8f8:	90 e0       	ldi	r25, 0x00	; 0
    c8fa:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    c8fe:	9b 01       	movw	r18, r22
    c900:	ac 01       	movw	r20, r24
    c902:	c7 01       	movw	r24, r14
    c904:	b6 01       	movw	r22, r12
    c906:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    c90a:	18 16       	cp	r1, r24
    c90c:	74 f3       	brlt	.-36     	; 0xc8ea <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c90e:	41 e0       	ldi	r20, 0x01	; 1
    c910:	61 e0       	ldi	r22, 0x01	; 1
    c912:	c4 01       	movw	r24, r8
    c914:	0e 94 99 5b 	call	0xb732	; 0xb732 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    c918:	81 11       	cpse	r24, r1
    c91a:	e7 cf       	rjmp	.-50     	; 0xc8ea <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    c91c:	f4 01       	movw	r30, r8
    c91e:	40 84       	ldd	r4, Z+8	; 0x08
    c920:	51 84       	ldd	r5, Z+9	; 0x09
    c922:	62 84       	ldd	r6, Z+10	; 0x0a
    c924:	73 84       	ldd	r7, Z+11	; 0x0b
    c926:	84 81       	ldd	r24, Z+4	; 0x04
    c928:	95 81       	ldd	r25, Z+5	; 0x05
    c92a:	a6 81       	ldd	r26, Z+6	; 0x06
    c92c:	b7 81       	ldd	r27, Z+7	; 0x07
    c92e:	89 83       	std	Y+1, r24	; 0x01
    c930:	9a 83       	std	Y+2, r25	; 0x02
    c932:	ab 83       	std	Y+3, r26	; 0x03
    c934:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c936:	c3 01       	movw	r24, r6
    c938:	b2 01       	movw	r22, r4
    c93a:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c93e:	6d 83       	std	Y+5, r22	; 0x05
    c940:	7e 83       	std	Y+6, r23	; 0x06
    c942:	8f 83       	std	Y+7, r24	; 0x07
    c944:	98 87       	std	Y+8, r25	; 0x08
    c946:	69 81       	ldd	r22, Y+1	; 0x01
    c948:	7a 81       	ldd	r23, Y+2	; 0x02
    c94a:	8b 81       	ldd	r24, Y+3	; 0x03
    c94c:	9c 81       	ldd	r25, Y+4	; 0x04
    c94e:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c952:	69 87       	std	Y+9, r22	; 0x09
    c954:	7a 87       	std	Y+10, r23	; 0x0a
    c956:	8b 87       	std	Y+11, r24	; 0x0b
    c958:	9c 87       	std	Y+12, r25	; 0x0c
    c95a:	20 91 d8 0d 	lds	r18, 0x0DD8
    c95e:	22 0f       	add	r18, r18
    c960:	22 0f       	add	r18, r18
    c962:	22 0f       	add	r18, r18
    c964:	40 91 d7 0d 	lds	r20, 0x0DD7
    c968:	44 0f       	add	r20, r20
    c96a:	44 0f       	add	r20, r20
    c96c:	44 0f       	add	r20, r20
    c96e:	60 91 cc 0d 	lds	r22, 0x0DCC
    c972:	70 91 cd 0d 	lds	r23, 0x0DCD
    c976:	80 91 ce 0d 	lds	r24, 0x0DCE
    c97a:	90 91 cf 0d 	lds	r25, 0x0DCF
    c97e:	29 8b       	std	Y+17, r18	; 0x11
    c980:	4a 8b       	std	Y+18, r20	; 0x12
    c982:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c986:	6d 87       	std	Y+13, r22	; 0x0d
    c988:	7e 87       	std	Y+14, r23	; 0x0e
    c98a:	8f 87       	std	Y+15, r24	; 0x0f
    c98c:	98 8b       	std	Y+16, r25	; 0x10
    c98e:	60 91 c8 0d 	lds	r22, 0x0DC8
    c992:	70 91 c9 0d 	lds	r23, 0x0DC9
    c996:	80 91 ca 0d 	lds	r24, 0x0DCA
    c99a:	90 91 cb 0d 	lds	r25, 0x0DCB
    c99e:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    c9a2:	dc 01       	movw	r26, r24
    c9a4:	cb 01       	movw	r24, r22
    c9a6:	28 e0       	ldi	r18, 0x08	; 8
    c9a8:	a2 2e       	mov	r10, r18
    c9aa:	38 e0       	ldi	r19, 0x08	; 8
    c9ac:	c3 2e       	mov	r12, r19
    c9ae:	ed 80       	ldd	r14, Y+5	; 0x05
    c9b0:	fe 80       	ldd	r15, Y+6	; 0x06
    c9b2:	09 85       	ldd	r16, Y+9	; 0x09
    c9b4:	1a 85       	ldd	r17, Y+10	; 0x0a
    c9b6:	29 89       	ldd	r18, Y+17	; 0x11
    c9b8:	4a 89       	ldd	r20, Y+18	; 0x12
    c9ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    c9bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    c9be:	0e 94 f9 53 	call	0xa7f2	; 0xa7f2 <LBCollides>
    c9c2:	88 23       	and	r24, r24
    c9c4:	01 f1       	breq	.+64     	; 0xca06 <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c9c6:	41 e0       	ldi	r20, 0x01	; 1
    c9c8:	6f ef       	ldi	r22, 0xFF	; 255
    c9ca:	84 e0       	ldi	r24, 0x04	; 4
    c9cc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c9d0:	80 91 d9 0d 	lds	r24, 0x0DD9
    c9d4:	f1 01       	movw	r30, r2
    c9d6:	31 97       	sbiw	r30, 0x01	; 1
    c9d8:	90 81       	ld	r25, Z
    c9da:	89 1b       	sub	r24, r25
    c9dc:	80 93 d9 0d 	sts	0x0DD9, r24
						if (game.player.shield <= 0)
    c9e0:	18 16       	cp	r1, r24
    c9e2:	54 f0       	brlt	.+20     	; 0xc9f8 <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    c9e4:	41 e0       	ldi	r20, 0x01	; 1
    c9e6:	6f ef       	ldi	r22, 0xFF	; 255
    c9e8:	85 e0       	ldi	r24, 0x05	; 5
    c9ea:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
							game.player.shield = 0;
    c9ee:	10 92 d9 0d 	sts	0x0DD9, r1
							game.player.flags = EXPLODING;
    c9f2:	b0 e1       	ldi	r27, 0x10	; 16
    c9f4:	b0 93 d4 0d 	sts	0x0DD4, r27
						}
						game.enemies[i].shot[j].active = 0;
    c9f8:	f1 01       	movw	r30, r2
    c9fa:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    c9fc:	01 e0       	ldi	r16, 0x01	; 1
    c9fe:	21 e0       	ldi	r18, 0x01	; 1
    ca00:	40 e0       	ldi	r20, 0x00	; 0
    ca02:	60 ee       	ldi	r22, 0xE0	; 224
    ca04:	44 c0       	rjmp	.+136    	; 0xca8e <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    ca06:	d4 01       	movw	r26, r8
    ca08:	1c 96       	adiw	r26, 0x0c	; 12
    ca0a:	6d 91       	ld	r22, X+
    ca0c:	7c 91       	ld	r23, X
    ca0e:	1d 97       	sbiw	r26, 0x0d	; 13
    ca10:	88 27       	eor	r24, r24
    ca12:	77 fd       	sbrc	r23, 7
    ca14:	80 95       	com	r24
    ca16:	98 2f       	mov	r25, r24
    ca18:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    ca1c:	29 e8       	ldi	r18, 0x89	; 137
    ca1e:	38 e8       	ldi	r19, 0x88	; 136
    ca20:	48 e8       	ldi	r20, 0x88	; 136
    ca22:	5c e3       	ldi	r21, 0x3C	; 60
    ca24:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    ca28:	9b 01       	movw	r18, r22
    ca2a:	ac 01       	movw	r20, r24
    ca2c:	69 81       	ldd	r22, Y+1	; 0x01
    ca2e:	7a 81       	ldd	r23, Y+2	; 0x02
    ca30:	8b 81       	ldd	r24, Y+3	; 0x03
    ca32:	9c 81       	ldd	r25, Y+4	; 0x04
    ca34:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    ca38:	6b 01       	movw	r12, r22
    ca3a:	7c 01       	movw	r14, r24
    ca3c:	f4 01       	movw	r30, r8
    ca3e:	64 83       	std	Z+4, r22	; 0x04
    ca40:	75 83       	std	Z+5, r23	; 0x05
    ca42:	86 83       	std	Z+6, r24	; 0x06
    ca44:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    ca46:	60 91 ac 0d 	lds	r22, 0x0DAC
    ca4a:	70 91 ad 0d 	lds	r23, 0x0DAD
    ca4e:	80 e0       	ldi	r24, 0x00	; 0
    ca50:	90 e0       	ldi	r25, 0x00	; 0
    ca52:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ca56:	9b 01       	movw	r18, r22
    ca58:	ac 01       	movw	r20, r24
    ca5a:	c3 01       	movw	r24, r6
    ca5c:	b2 01       	movw	r22, r4
    ca5e:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    ca62:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    ca66:	76 2e       	mov	r7, r22
    ca68:	60 91 aa 0d 	lds	r22, 0x0DAA
    ca6c:	70 91 ab 0d 	lds	r23, 0x0DAB
    ca70:	80 e0       	ldi	r24, 0x00	; 0
    ca72:	90 e0       	ldi	r25, 0x00	; 0
    ca74:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ca78:	9b 01       	movw	r18, r22
    ca7a:	ac 01       	movw	r20, r24
    ca7c:	c7 01       	movw	r24, r14
    ca7e:	b6 01       	movw	r22, r12
    ca80:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    ca84:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
    ca88:	01 e0       	ldi	r16, 0x01	; 1
    ca8a:	21 e0       	ldi	r18, 0x01	; 1
    ca8c:	47 2d       	mov	r20, r7
    ca8e:	8b 2d       	mov	r24, r11
    ca90:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
					}
				}
			}
			slot += 1;
    ca94:	b3 94       	inc	r11
    ca96:	f2 e4       	ldi	r31, 0x42	; 66
    ca98:	2f 0e       	add	r2, r31
    ca9a:	31 1c       	adc	r3, r1
    ca9c:	82 e4       	ldi	r24, 0x42	; 66
    ca9e:	88 0e       	add	r8, r24
    caa0:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    caa2:	93 e1       	ldi	r25, 0x13	; 19
    caa4:	b9 12       	cpse	r11, r25
    caa6:	00 cf       	rjmp	.-512    	; 0xc8a8 <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    caa8:	62 96       	adiw	r28, 0x12	; 18
    caaa:	0f b6       	in	r0, 0x3f	; 63
    caac:	f8 94       	cli
    caae:	de bf       	out	0x3e, r29	; 62
    cab0:	0f be       	out	0x3f, r0	; 63
    cab2:	cd bf       	out	0x3d, r28	; 61
    cab4:	df 91       	pop	r29
    cab6:	cf 91       	pop	r28
    cab8:	1f 91       	pop	r17
    caba:	0f 91       	pop	r16
    cabc:	ff 90       	pop	r15
    cabe:	ef 90       	pop	r14
    cac0:	df 90       	pop	r13
    cac2:	cf 90       	pop	r12
    cac4:	bf 90       	pop	r11
    cac6:	af 90       	pop	r10
    cac8:	9f 90       	pop	r9
    caca:	8f 90       	pop	r8
    cacc:	7f 90       	pop	r7
    cace:	6f 90       	pop	r6
    cad0:	5f 90       	pop	r5
    cad2:	4f 90       	pop	r4
    cad4:	3f 90       	pop	r3
    cad6:	2f 90       	pop	r2
    cad8:	08 95       	ret

0000cada <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    cada:	ef 92       	push	r14
    cadc:	ff 92       	push	r15
    cade:	0f 93       	push	r16
    cae0:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    cae2:	c8 2f       	mov	r28, r24
    cae4:	e6 2e       	mov	r14, r22
    cae6:	f1 2c       	mov	r15, r1
    cae8:	e8 0e       	add	r14, r24
    caea:	f1 1c       	adc	r15, r1
    caec:	8c 2f       	mov	r24, r28
    caee:	90 e0       	ldi	r25, 0x00	; 0
    caf0:	8e 15       	cp	r24, r14
    caf2:	9f 05       	cpc	r25, r15
    caf4:	7c f4       	brge	.+30     	; 0xcb14 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    caf6:	40 e0       	ldi	r20, 0x00	; 0
    caf8:	63 ee       	ldi	r22, 0xE3	; 227
    cafa:	7d e2       	ldi	r23, 0x2D	; 45
    cafc:	8c 2f       	mov	r24, r28
    cafe:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cb02:	01 e0       	ldi	r16, 0x01	; 1
    cb04:	21 e0       	ldi	r18, 0x01	; 1
    cb06:	40 e0       	ldi	r20, 0x00	; 0
    cb08:	60 ee       	ldi	r22, 0xE0	; 224
    cb0a:	8c 2f       	mov	r24, r28
    cb0c:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cb10:	cf 5f       	subi	r28, 0xFF	; 255
    cb12:	ec cf       	rjmp	.-40     	; 0xcaec <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cb14:	cf 91       	pop	r28
    cb16:	0f 91       	pop	r16
    cb18:	ff 90       	pop	r15
    cb1a:	ef 90       	pop	r14
    cb1c:	08 95       	ret

0000cb1e <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    cb1e:	61 e0       	ldi	r22, 0x01	; 1
    cb20:	81 e0       	ldi	r24, 0x01	; 1
    cb22:	0e 94 ad 52 	call	0xa55a	; 0xa55a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cb26:	64 e1       	ldi	r22, 0x14	; 20
    cb28:	80 e0       	ldi	r24, 0x00	; 0
    cb2a:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
	LBRotateSprites();
    cb2e:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	ClearVram();
    cb32:	0e 94 7f 43 	call	0x86fe	; 0x86fe <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cb36:	60 e0       	ldi	r22, 0x00	; 0
    cb38:	81 e0       	ldi	r24, 0x01	; 1
    cb3a:	0c 94 a1 52 	jmp	0xa542	; 0xa542 <FadeIn>

0000cb3e <load_level>:
		game.level_height = 26;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    cb3e:	0f 93       	push	r16
    cb40:	cf 93       	push	r28
    cb42:	df 93       	push	r29
    cb44:	c8 2f       	mov	r28, r24
    cb46:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    cb48:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cb4c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 30;
    cb50:	8e e1       	ldi	r24, 0x1E	; 30
    cb52:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    cb56:	86 ee       	ldi	r24, 0xE6	; 230
    cb58:	9d e2       	ldi	r25, 0x2D	; 45
    cb5a:	90 93 b1 0c 	sts	0x0CB1, r25
    cb5e:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 2;
    cb62:	82 e0       	ldi	r24, 0x02	; 2
    cb64:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    cb68:	0e 94 51 57 	call	0xaea2	; 0xaea2 <clear_overlay>
	game.current_level_index = index;
    cb6c:	c0 93 b7 0d 	sts	0x0DB7, r28
	game.level_ended = 0;
    cb70:	10 92 c3 0d 	sts	0x0DC3, r1
	game.joypadState.held = 0;
    cb74:	10 92 9f 0f 	sts	0x0F9F, r1
    cb78:	10 92 9e 0f 	sts	0x0F9E, r1
	game.joypadState.pressed = 0;
    cb7c:	10 92 9b 0f 	sts	0x0F9B, r1
    cb80:	10 92 9a 0f 	sts	0x0F9A, r1
	game.joypadState.released = 0;
    cb84:	10 92 9d 0f 	sts	0x0F9D, r1
    cb88:	10 92 9c 0f 	sts	0x0F9C, r1
	switch (index)
    cb8c:	8c 2f       	mov	r24, r28
    cb8e:	90 e0       	ldi	r25, 0x00	; 0
    cb90:	8a 30       	cpi	r24, 0x0A	; 10
    cb92:	91 05       	cpc	r25, r1
    cb94:	c0 f4       	brcc	.+48     	; 0xcbc6 <load_level+0x88>
    cb96:	fc 01       	movw	r30, r24
    cb98:	e8 5c       	subi	r30, 0xC8	; 200
    cb9a:	ff 4f       	sbci	r31, 0xFF	; 255
    cb9c:	0c 94 28 71 	jmp	0xe250	; 0xe250 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cba0:	85 e3       	ldi	r24, 0x35	; 53
    cba2:	9b e7       	ldi	r25, 0x7B	; 123
    cba4:	0e c0       	rjmp	.+28     	; 0xcbc2 <load_level+0x84>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cba6:	82 e1       	ldi	r24, 0x12	; 18
    cba8:	9a e7       	ldi	r25, 0x7A	; 122
    cbaa:	0b c0       	rjmp	.+22     	; 0xcbc2 <load_level+0x84>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    cbac:	81 e1       	ldi	r24, 0x11	; 17
    cbae:	99 e7       	ldi	r25, 0x79	; 121
    cbb0:	08 c0       	rjmp	.+16     	; 0xcbc2 <load_level+0x84>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    cbb2:	80 e1       	ldi	r24, 0x10	; 16
    cbb4:	98 e7       	ldi	r25, 0x78	; 120
    cbb6:	05 c0       	rjmp	.+10     	; 0xcbc2 <load_level+0x84>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    cbb8:	8f e0       	ldi	r24, 0x0F	; 15
    cbba:	97 e7       	ldi	r25, 0x77	; 119
    cbbc:	02 c0       	rjmp	.+4      	; 0xcbc2 <load_level+0x84>
		case 9: map_level_info((char*) map_level_space); break;
    cbbe:	83 e1       	ldi	r24, 0x13	; 19
    cbc0:	9b e7       	ldi	r25, 0x7B	; 123
    cbc2:	0e 94 8b 59 	call	0xb316	; 0xb316 <map_level_info>
	}
	game.column_count = 0;
    cbc6:	10 92 b3 0d 	sts	0x0DB3, r1
    cbca:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_x = get_camera_x(index);
    cbce:	10 92 ab 0d 	sts	0x0DAB, r1
    cbd2:	10 92 aa 0d 	sts	0x0DAA, r1
	game.camera_y = get_camera_y(index);
    cbd6:	10 92 ad 0d 	sts	0x0DAD, r1
    cbda:	10 92 ac 0d 	sts	0x0DAC, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    cbde:	80 e0       	ldi	r24, 0x00	; 0
    cbe0:	90 e0       	ldi	r25, 0x00	; 0
    cbe2:	a0 ec       	ldi	r26, 0xC0	; 192
    cbe4:	b1 e4       	ldi	r27, 0x41	; 65
    cbe6:	80 93 c8 0d 	sts	0x0DC8, r24
    cbea:	90 93 c9 0d 	sts	0x0DC9, r25
    cbee:	a0 93 ca 0d 	sts	0x0DCA, r26
    cbf2:	b0 93 cb 0d 	sts	0x0DCB, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    cbf6:	80 e0       	ldi	r24, 0x00	; 0
    cbf8:	90 e0       	ldi	r25, 0x00	; 0
    cbfa:	a8 e2       	ldi	r26, 0x28	; 40
    cbfc:	b3 e4       	ldi	r27, 0x43	; 67
    cbfe:	80 93 cc 0d 	sts	0x0DCC, r24
    cc02:	90 93 cd 0d 	sts	0x0DCD, r25
    cc06:	a0 93 ce 0d 	sts	0x0DCE, r26
    cc0a:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cc0e:	8d e1       	ldi	r24, 0x1D	; 29
    cc10:	90 e0       	ldi	r25, 0x00	; 0
    cc12:	90 93 a7 0d 	sts	0x0DA7, r25
    cc16:	80 93 a6 0d 	sts	0x0DA6, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cc1a:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cc1e:	8b e1       	ldi	r24, 0x1B	; 27
    cc20:	90 e0       	ldi	r25, 0x00	; 0
    cc22:	90 93 a9 0d 	sts	0x0DA9, r25
    cc26:	80 93 a8 0d 	sts	0x0DA8, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cc2a:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    cc2e:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    cc32:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    cc36:	8a e0       	ldi	r24, 0x0A	; 10
    cc38:	80 93 c2 0d 	sts	0x0DC2, r24
	render_camera_view();
    cc3c:	0e 94 95 57 	call	0xaf2a	; 0xaf2a <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    cc40:	46 e5       	ldi	r20, 0x56	; 86
    cc42:	5b e0       	ldi	r21, 0x0B	; 11
    cc44:	6f e1       	ldi	r22, 0x1F	; 31
    cc46:	80 e0       	ldi	r24, 0x00	; 0
    cc48:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    cc4c:	45 e6       	ldi	r20, 0x65	; 101
    cc4e:	5b e0       	ldi	r21, 0x0B	; 11
    cc50:	6f e1       	ldi	r22, 0x1F	; 31
    cc52:	81 e1       	ldi	r24, 0x11	; 17
    cc54:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    cc58:	4d e5       	ldi	r20, 0x5D	; 93
    cc5a:	5b e0       	ldi	r21, 0x0B	; 11
    cc5c:	6e e1       	ldi	r22, 0x1E	; 30
    cc5e:	80 e0       	ldi	r24, 0x00	; 0
    cc60:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    cc64:	40 e5       	ldi	r20, 0x50	; 80
    cc66:	5b e0       	ldi	r21, 0x0B	; 11
    cc68:	6e e1       	ldi	r22, 0x1E	; 30
    cc6a:	82 e1       	ldi	r24, 0x12	; 18
    cc6c:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    cc70:	21 e0       	ldi	r18, 0x01	; 1
    cc72:	40 91 b5 0d 	lds	r20, 0x0DB5
    cc76:	6f e1       	ldi	r22, 0x1F	; 31
    cc78:	89 e0       	ldi	r24, 0x09	; 9
    cc7a:	0e 94 8f 53 	call	0xa71e	; 0xa71e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cc7e:	40 91 ae 0d 	lds	r20, 0x0DAE
    cc82:	50 91 af 0d 	lds	r21, 0x0DAF
    cc86:	21 e0       	ldi	r18, 0x01	; 1
    cc88:	6f e1       	ldi	r22, 0x1F	; 31
    cc8a:	8b e1       	ldi	r24, 0x1B	; 27
    cc8c:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    cc90:	21 e0       	ldi	r18, 0x01	; 1
    cc92:	40 91 d9 0d 	lds	r20, 0x0DD9
    cc96:	6e e1       	ldi	r22, 0x1E	; 30
    cc98:	89 e0       	ldi	r24, 0x09	; 9
    cc9a:	0e 94 8f 53 	call	0xa71e	; 0xa71e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    cc9e:	40 91 b0 0d 	lds	r20, 0x0DB0
    cca2:	50 91 b1 0d 	lds	r21, 0x0DB1
    cca6:	21 e0       	ldi	r18, 0x01	; 1
    cca8:	6e e1       	ldi	r22, 0x1E	; 30
    ccaa:	8b e1       	ldi	r24, 0x1B	; 27
    ccac:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    ccb0:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    ccb4:	81 11       	cpse	r24, r1
    ccb6:	39 c0       	rjmp	.+114    	; 0xcd2a <load_level+0x1ec>
    ccb8:	dd 23       	and	r29, r29
    ccba:	b9 f1       	breq	.+110    	; 0xcd2a <load_level+0x1ec>
	{
		map_ship();
    ccbc:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    ccc0:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    ccc2:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    ccc4:	81 e0       	ldi	r24, 0x01	; 1
    ccc6:	90 e0       	ldi	r25, 0x00	; 0
    ccc8:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cccc:	8c 2f       	mov	r24, r28
    ccce:	90 e0       	ldi	r25, 0x00	; 0
    ccd0:	88 3a       	cpi	r24, 0xA8	; 168
    ccd2:	91 05       	cpc	r25, r1
    ccd4:	74 f0       	brlt	.+28     	; 0xccf2 <load_level+0x1b4>
			{
				LBMapSprite(0, map_hero_idle, 0);
    ccd6:	40 e0       	ldi	r20, 0x00	; 0
    ccd8:	67 eb       	ldi	r22, 0xB7	; 183
    ccda:	7d e2       	ldi	r23, 0x2D	; 45
    ccdc:	80 e0       	ldi	r24, 0x00	; 0
    ccde:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cce2:	03 e0       	ldi	r16, 0x03	; 3
    cce4:	22 e0       	ldi	r18, 0x02	; 2
    cce6:	48 ea       	ldi	r20, 0xA8	; 168
    cce8:	68 e1       	ldi	r22, 0x18	; 24
    ccea:	80 e0       	ldi	r24, 0x00	; 0
    ccec:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
				ship_increment = -3;
    ccf0:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    ccf2:	80 e3       	ldi	r24, 0x30	; 48
    ccf4:	9e e0       	ldi	r25, 0x0E	; 14
    ccf6:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    ccfa:	40 e0       	ldi	r20, 0x00	; 0
    ccfc:	bc 01       	movw	r22, r24
    ccfe:	86 e0       	ldi	r24, 0x06	; 6
    cd00:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cd04:	02 e0       	ldi	r16, 0x02	; 2
    cd06:	24 e0       	ldi	r18, 0x04	; 4
    cd08:	4c 2f       	mov	r20, r28
    cd0a:	68 e0       	ldi	r22, 0x08	; 8
    cd0c:	86 e0       	ldi	r24, 0x06	; 6
    cd0e:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			ship_y += ship_increment;
    cd12:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cd14:	39 f4       	brne	.+14     	; 0xcd24 <load_level+0x1e6>
			{
				clear_sprites(6, 8);
    cd16:	68 e0       	ldi	r22, 0x08	; 8
    cd18:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cd1a:	df 91       	pop	r29
    cd1c:	cf 91       	pop	r28
    cd1e:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    cd20:	0c 94 6d 65 	jmp	0xcada	; 0xcada <clear_sprites>
				break;
			}
			LBRotateSprites();
    cd24:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
		}
    cd28:	cd cf       	rjmp	.-102    	; 0xccc4 <load_level+0x186>
	}
}
    cd2a:	df 91       	pop	r29
    cd2c:	cf 91       	pop	r28
    cd2e:	0f 91       	pop	r16
    cd30:	08 95       	ret

0000cd32 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cd32:	fc 01       	movw	r30, r24
    cd34:	20 81       	ld	r18, Z
    cd36:	31 81       	ldd	r19, Z+1	; 0x01
    cd38:	28 70       	andi	r18, 0x08	; 8
    cd3a:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    cd3c:	81 e0       	ldi	r24, 0x01	; 1
    cd3e:	23 2b       	or	r18, r19
    cd40:	09 f4       	brne	.+2      	; 0xcd44 <select_pressed+0x12>
    cd42:	80 e0       	ldi	r24, 0x00	; 0
}
    cd44:	08 95       	ret

0000cd46 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    cd46:	ff 92       	push	r15
    cd48:	0f 93       	push	r16
    cd4a:	1f 93       	push	r17
    cd4c:	cf 93       	push	r28
    cd4e:	df 93       	push	r29
    cd50:	ec 01       	movw	r28, r24
    cd52:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    cd54:	8e e0       	ldi	r24, 0x0E	; 14
    cd56:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    cd58:	fe 01       	movw	r30, r28
    cd5a:	84 91       	lpm	r24, Z
    cd5c:	83 32       	cpi	r24, 0x23	; 35
    cd5e:	21 f1       	breq	.+72     	; 0xcda8 <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    cd60:	6f ef       	ldi	r22, 0xFF	; 255
    cd62:	70 e0       	ldi	r23, 0x00	; 0
    cd64:	ce 01       	movw	r24, r28
    cd66:	0e 94 dc 72 	call	0xe5b8	; 0xe5b8 <strnlen_P>
		x = 14 - ln / 2;
    cd6a:	86 95       	lsr	r24
    cd6c:	0f 2d       	mov	r16, r15
    cd6e:	08 1b       	sub	r16, r24
    cd70:	0c 1b       	sub	r16, r28
    cd72:	8c 2f       	mov	r24, r28
    cd74:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    cd76:	21 96       	adiw	r28, 0x01	; 1
    cd78:	fe 01       	movw	r30, r28
    cd7a:	31 97       	sbiw	r30, 0x01	; 1
    cd7c:	44 91       	lpm	r20, Z
    cd7e:	44 23       	and	r20, r20
    cd80:	89 f0       	breq	.+34     	; 0xcda4 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    cd82:	61 2f       	mov	r22, r17
    cd84:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    cd88:	60 e0       	ldi	r22, 0x00	; 0
    cd8a:	8a e9       	ldi	r24, 0x9A	; 154
    cd8c:	9f e0       	ldi	r25, 0x0F	; 15
    cd8e:	0e 94 08 53 	call	0xa610	; 0xa610 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    cd92:	80 91 9e 0f 	lds	r24, 0x0F9E
    cd96:	80 fd       	sbrc	r24, 0
    cd98:	ec cf       	rjmp	.-40     	; 0xcd72 <stream_dialogue+0x2c>
    cd9a:	80 e7       	ldi	r24, 0x70	; 112
    cd9c:	97 e1       	ldi	r25, 0x17	; 23
    cd9e:	0e 94 b5 43 	call	0x876a	; 0x876a <WaitUs>
    cda2:	e7 cf       	rjmp	.-50     	; 0xcd72 <stream_dialogue+0x2c>
		}
		y++;
    cda4:	1f 5f       	subi	r17, 0xFF	; 255
    cda6:	d8 cf       	rjmp	.-80     	; 0xcd58 <stream_dialogue+0x12>
	}
}
    cda8:	df 91       	pop	r29
    cdaa:	cf 91       	pop	r28
    cdac:	1f 91       	pop	r17
    cdae:	0f 91       	pop	r16
    cdb0:	ff 90       	pop	r15
    cdb2:	08 95       	ret

0000cdb4 <map_particles>:

void map_particles()
{
    cdb4:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    cdb6:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    cdb8:	40 e0       	ldi	r20, 0x00	; 0
    cdba:	67 ed       	ldi	r22, 0xD7	; 215
    cdbc:	7d e2       	ldi	r23, 0x2D	; 45
    cdbe:	8c 2f       	mov	r24, r28
    cdc0:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    cdc4:	cf 5f       	subi	r28, 0xFF	; 255
    cdc6:	c4 31       	cpi	r28, 0x14	; 20
    cdc8:	b9 f7       	brne	.-18     	; 0xcdb8 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cdca:	cf 91       	pop	r28
    cdcc:	08 95       	ret

0000cdce <place_particles>:

void place_particles()
{
    cdce:	0f 93       	push	r16
    cdd0:	1f 93       	push	r17
    cdd2:	cf 93       	push	r28
    cdd4:	df 93       	push	r29
    cdd6:	1f 92       	push	r1
    cdd8:	cd b7       	in	r28, 0x3d	; 61
    cdda:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cddc:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cdde:	68 ec       	ldi	r22, 0xC8	; 200
    cde0:	80 e0       	ldi	r24, 0x00	; 0
    cde2:	0e 94 1f 54 	call	0xa83e	; 0xa83e <LBRandom>
    cde6:	48 2f       	mov	r20, r24
    cde8:	60 ee       	ldi	r22, 0xE0	; 224
    cdea:	80 e0       	ldi	r24, 0x00	; 0
    cdec:	49 83       	std	Y+1, r20	; 0x01
    cdee:	0e 94 1f 54 	call	0xa83e	; 0xa83e <LBRandom>
    cdf2:	68 2f       	mov	r22, r24
    cdf4:	01 e0       	ldi	r16, 0x01	; 1
    cdf6:	21 e0       	ldi	r18, 0x01	; 1
    cdf8:	49 81       	ldd	r20, Y+1	; 0x01
    cdfa:	81 2f       	mov	r24, r17
    cdfc:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    ce00:	1f 5f       	subi	r17, 0xFF	; 255
    ce02:	14 31       	cpi	r17, 0x14	; 20
    ce04:	61 f7       	brne	.-40     	; 0xcdde <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    ce06:	0f 90       	pop	r0
    ce08:	df 91       	pop	r29
    ce0a:	cf 91       	pop	r28
    ce0c:	1f 91       	pop	r17
    ce0e:	0f 91       	pop	r16
    ce10:	08 95       	ret

0000ce12 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    ce12:	ef 92       	push	r14
    ce14:	ff 92       	push	r15
    ce16:	0f 93       	push	r16
    ce18:	1f 93       	push	r17
    ce1a:	cf 93       	push	r28
    ce1c:	df 93       	push	r29
    ce1e:	d8 2f       	mov	r29, r24
    ce20:	16 2f       	mov	r17, r22
    ce22:	80 ed       	ldi	r24, 0xD0	; 208
    ce24:	e8 2e       	mov	r14, r24
    ce26:	8f e0       	ldi	r24, 0x0F	; 15
    ce28:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    ce2a:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    ce2c:	f7 01       	movw	r30, r14
    ce2e:	40 81       	ld	r20, Z
    ce30:	4d 0f       	add	r20, r29
    ce32:	01 e0       	ldi	r16, 0x01	; 1
    ce34:	21 e0       	ldi	r18, 0x01	; 1
    ce36:	31 97       	sbiw	r30, 0x01	; 1
    ce38:	60 81       	ld	r22, Z
    ce3a:	8c 2f       	mov	r24, r28
    ce3c:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    ce40:	f7 01       	movw	r30, r14
    ce42:	80 81       	ld	r24, Z
    ce44:	89 3c       	cpi	r24, 0xC9	; 201
    ce46:	50 f0       	brcs	.+20     	; 0xce5c <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    ce48:	60 ee       	ldi	r22, 0xE0	; 224
    ce4a:	80 e0       	ldi	r24, 0x00	; 0
    ce4c:	0e 94 1f 54 	call	0xa83e	; 0xa83e <LBRandom>
    ce50:	21 e0       	ldi	r18, 0x01	; 1
    ce52:	41 2f       	mov	r20, r17
    ce54:	68 2f       	mov	r22, r24
    ce56:	8c 2f       	mov	r24, r28
    ce58:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    ce5c:	cf 5f       	subi	r28, 0xFF	; 255
    ce5e:	f4 e0       	ldi	r31, 0x04	; 4
    ce60:	ef 0e       	add	r14, r31
    ce62:	f1 1c       	adc	r15, r1
    ce64:	c4 31       	cpi	r28, 0x14	; 20
    ce66:	11 f7       	brne	.-60     	; 0xce2c <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    ce68:	df 91       	pop	r29
    ce6a:	cf 91       	pop	r28
    ce6c:	1f 91       	pop	r17
    ce6e:	0f 91       	pop	r16
    ce70:	ff 90       	pop	r15
    ce72:	ef 90       	pop	r14
    ce74:	08 95       	ret

0000ce76 <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    ce76:	82 50       	subi	r24, 0x02	; 2
    ce78:	87 30       	cpi	r24, 0x07	; 7
    ce7a:	48 f4       	brcc	.+18     	; 0xce8e <get_emarald_map+0x18>
    ce7c:	e8 2f       	mov	r30, r24
    ce7e:	f0 e0       	ldi	r31, 0x00	; 0
    ce80:	ee 0f       	add	r30, r30
    ce82:	ff 1f       	adc	r31, r31
    ce84:	ee 5f       	subi	r30, 0xFE	; 254
    ce86:	fa 4f       	sbci	r31, 0xFA	; 250
    ce88:	80 81       	ld	r24, Z
    ce8a:	91 81       	ldd	r25, Z+1	; 0x01
    ce8c:	08 95       	ret
    ce8e:	88 ec       	ldi	r24, 0xC8	; 200
    ce90:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    ce92:	08 95       	ret

0000ce94 <music_transition>:

void music_transition()
{
	if (is_space())
    ce94:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    ce98:	88 23       	and	r24, r24
    ce9a:	19 f0       	breq	.+6      	; 0xcea2 <music_transition+0xe>
	{
		StartSong(spacesong);
    ce9c:	8c ea       	ldi	r24, 0xAC	; 172
    ce9e:	9b e0       	ldi	r25, 0x0B	; 11
    cea0:	06 c0       	rjmp	.+12     	; 0xceae <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    cea2:	80 91 b7 0d 	lds	r24, 0x0DB7
    cea6:	88 23       	and	r24, r24
    cea8:	21 f0       	breq	.+8      	; 0xceb2 <music_transition+0x1e>
	{
		StartSong(planetsong);
    ceaa:	8c e4       	ldi	r24, 0x4C	; 76
    ceac:	92 e1       	ldi	r25, 0x12	; 18
    ceae:	0c 94 73 46 	jmp	0x8ce6	; 0x8ce6 <StartSong>
    ceb2:	08 95       	ret

0000ceb4 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    ceb4:	cf 92       	push	r12
    ceb6:	df 92       	push	r13
    ceb8:	ef 92       	push	r14
    ceba:	ff 92       	push	r15
    cebc:	0f 93       	push	r16
    cebe:	1f 93       	push	r17
    cec0:	cf 93       	push	r28
    cec2:	df 93       	push	r29
    cec4:	1f 92       	push	r1
    cec6:	cd b7       	in	r28, 0x3d	; 61
    cec8:	de b7       	in	r29, 0x3e	; 62
    ceca:	c8 2e       	mov	r12, r24
    cecc:	e6 2e       	mov	r14, r22
    cece:	12 2f       	mov	r17, r18
    ced0:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    ced2:	49 83       	std	Y+1, r20	; 0x01
    ced4:	0e 94 8f 65 	call	0xcb1e	; 0xcb1e <fade_through>
	Screen.scrollX = 0;
    ced8:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cedc:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    cee0:	80 e2       	ldi	r24, 0x20	; 32
    cee2:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    cee6:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    ceea:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    ceee:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    cef2:	0e 94 da 66 	call	0xcdb4	; 0xcdb4 <map_particles>
	map_ship();
    cef6:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <map_ship>
	place_particles();
    cefa:	0e 94 e7 66 	call	0xcdce	; 0xcdce <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    cefe:	4d e4       	ldi	r20, 0x4D	; 77
    cf00:	51 e5       	ldi	r21, 0x51	; 81
    cf02:	69 81       	ldd	r22, Y+1	; 0x01
    cf04:	80 e0       	ldi	r24, 0x00	; 0
    cf06:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
	game.current_level_index = index;
    cf0a:	c0 92 b7 0d 	sts	0x0DB7, r12
	music_transition();
    cf0e:	0e 94 4a 67 	call	0xce94	; 0xce94 <music_transition>
	if (!is_space())
    cf12:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    cf16:	81 11       	cpse	r24, r1
    cf18:	0f c0       	rjmp	.+30     	; 0xcf38 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    cf1a:	8c 2d       	mov	r24, r12
    cf1c:	0e 94 3b 67 	call	0xce76	; 0xce76 <get_emarald_map>
    cf20:	40 e0       	ldi	r20, 0x00	; 0
    cf22:	bc 01       	movw	r22, r24
    cf24:	88 e0       	ldi	r24, 0x08	; 8
    cf26:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    cf2a:	01 e0       	ldi	r16, 0x01	; 1
    cf2c:	21 e0       	ldi	r18, 0x01	; 1
    cf2e:	40 e3       	ldi	r20, 0x30	; 48
    cf30:	60 e7       	ldi	r22, 0x70	; 112
    cf32:	88 e0       	ldi	r24, 0x08	; 8
    cf34:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cf38:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    cf3a:	81 e0       	ldi	r24, 0x01	; 1
    cf3c:	90 e0       	ldi	r25, 0x00	; 0
    cf3e:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    cf42:	80 e3       	ldi	r24, 0x30	; 48
    cf44:	9e e0       	ldi	r25, 0x0E	; 14
    cf46:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    cf4a:	40 e0       	ldi	r20, 0x00	; 0
    cf4c:	bc 01       	movw	r22, r24
    cf4e:	80 e0       	ldi	r24, 0x00	; 0
    cf50:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    cf54:	02 e0       	ldi	r16, 0x02	; 2
    cf56:	24 e0       	ldi	r18, 0x04	; 4
    cf58:	48 e6       	ldi	r20, 0x68	; 104
    cf5a:	68 e6       	ldi	r22, 0x68	; 104
    cf5c:	80 e0       	ldi	r24, 0x00	; 0
    cf5e:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
		frame_counter++;
    cf62:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    cf64:	8d 2d       	mov	r24, r13
    cf66:	8f 70       	andi	r24, 0x0F	; 15
    cf68:	29 f4       	brne	.+10     	; 0xcf74 <planet_transition+0xc0>
    cf6a:	90 91 b3 0c 	lds	r25, 0x0CB3
    cf6e:	9e 0d       	add	r25, r14
    cf70:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    cf74:	6f 2d       	mov	r22, r15
    cf76:	81 2f       	mov	r24, r17
    cf78:	0e 94 09 67 	call	0xce12	; 0xce12 <animate_particles>
		LBRotateSprites();
    cf7c:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    cf80:	8f ef       	ldi	r24, 0xFF	; 255
    cf82:	d8 12       	cpse	r13, r24
    cf84:	da cf       	rjmp	.-76     	; 0xcf3a <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    cf86:	82 e0       	ldi	r24, 0x02	; 2
    cf88:	80 93 b6 0d 	sts	0x0DB6, r24
	ClearVram();
    cf8c:	0e 94 7f 43 	call	0x86fe	; 0x86fe <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cf90:	64 e1       	ldi	r22, 0x14	; 20
    cf92:	80 e0       	ldi	r24, 0x00	; 0
    cf94:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
	LBRotateSprites();
    cf98:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	fade_through();
    cf9c:	0e 94 8f 65 	call	0xcb1e	; 0xcb1e <fade_through>
	load_level(index, true);
    cfa0:	61 e0       	ldi	r22, 0x01	; 1
    cfa2:	8c 2d       	mov	r24, r12
    cfa4:	0e 94 9f 65 	call	0xcb3e	; 0xcb3e <load_level>
	init_player_state();
    cfa8:	0e 94 41 55 	call	0xaa82	; 0xaa82 <init_player_state>
	init_enemy_state();
}
    cfac:	0f 90       	pop	r0
    cfae:	df 91       	pop	r29
    cfb0:	cf 91       	pop	r28
    cfb2:	1f 91       	pop	r17
    cfb4:	0f 91       	pop	r16
    cfb6:	ff 90       	pop	r15
    cfb8:	ef 90       	pop	r14
    cfba:	df 90       	pop	r13
    cfbc:	cf 90       	pop	r12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
	LBRotateSprites();
	fade_through();
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    cfbe:	0c 94 2d 55 	jmp	0xaa5a	; 0xaa5a <init_enemy_state>

0000cfc2 <intro>:
}


void intro()
{
    cfc2:	0f 93       	push	r16
	fade_through();
    cfc4:	0e 94 8f 65 	call	0xcb1e	; 0xcb1e <fade_through>
	game.lives = LIVES;
    cfc8:	e6 ea       	ldi	r30, 0xA6	; 166
    cfca:	fd e0       	ldi	r31, 0x0D	; 13
    cfcc:	85 e0       	ldi	r24, 0x05	; 5
    cfce:	87 87       	std	Z+15, r24	; 0x0f
	game.score = 0;
    cfd0:	11 86       	std	Z+9, r1	; 0x09
    cfd2:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    cfd4:	13 86       	std	Z+11, r1	; 0x0b
    cfd6:	12 86       	std	Z+10, r1	; 0x0a
	StartSong(planetsong);
    cfd8:	8c e4       	ldi	r24, 0x4C	; 76
    cfda:	92 e1       	ldi	r25, 0x12	; 18
    cfdc:	0e 94 73 46 	call	0x8ce6	; 0x8ce6 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    cfe0:	40 e0       	ldi	r20, 0x00	; 0
    cfe2:	68 ec       	ldi	r22, 0xC8	; 200
    cfe4:	7d e2       	ldi	r23, 0x2D	; 45
    cfe6:	80 e0       	ldi	r24, 0x00	; 0
    cfe8:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    cfec:	01 e0       	ldi	r16, 0x01	; 1
    cfee:	21 e0       	ldi	r18, 0x01	; 1
    cff0:	40 e3       	ldi	r20, 0x30	; 48
    cff2:	60 e5       	ldi	r22, 0x50	; 80
    cff4:	80 e0       	ldi	r24, 0x00	; 0
    cff6:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    cffa:	40 e0       	ldi	r20, 0x00	; 0
    cffc:	6b ec       	ldi	r22, 0xCB	; 203
    cffe:	7d e2       	ldi	r23, 0x2D	; 45
    d000:	81 e0       	ldi	r24, 0x01	; 1
    d002:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    d006:	21 e0       	ldi	r18, 0x01	; 1
    d008:	40 e3       	ldi	r20, 0x30	; 48
    d00a:	60 e6       	ldi	r22, 0x60	; 96
    d00c:	81 e0       	ldi	r24, 0x01	; 1
    d00e:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    d012:	40 e0       	ldi	r20, 0x00	; 0
    d014:	65 ec       	ldi	r22, 0xC5	; 197
    d016:	7d e2       	ldi	r23, 0x2D	; 45
    d018:	82 e0       	ldi	r24, 0x02	; 2
    d01a:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    d01e:	21 e0       	ldi	r18, 0x01	; 1
    d020:	40 e3       	ldi	r20, 0x30	; 48
    d022:	60 e7       	ldi	r22, 0x70	; 112
    d024:	82 e0       	ldi	r24, 0x02	; 2
    d026:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    d02a:	40 e0       	ldi	r20, 0x00	; 0
    d02c:	62 ec       	ldi	r22, 0xC2	; 194
    d02e:	7d e2       	ldi	r23, 0x2D	; 45
    d030:	83 e0       	ldi	r24, 0x03	; 3
    d032:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    d036:	21 e0       	ldi	r18, 0x01	; 1
    d038:	40 e3       	ldi	r20, 0x30	; 48
    d03a:	60 e8       	ldi	r22, 0x80	; 128
    d03c:	83 e0       	ldi	r24, 0x03	; 3
    d03e:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    d042:	40 e0       	ldi	r20, 0x00	; 0
    d044:	6f eb       	ldi	r22, 0xBF	; 191
    d046:	7d e2       	ldi	r23, 0x2D	; 45
    d048:	84 e0       	ldi	r24, 0x04	; 4
    d04a:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    d04e:	21 e0       	ldi	r18, 0x01	; 1
    d050:	40 e3       	ldi	r20, 0x30	; 48
    d052:	60 e9       	ldi	r22, 0x90	; 144
    d054:	84 e0       	ldi	r24, 0x04	; 4
    d056:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	LBRotateSprites();
    d05a:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    d05e:	6c e0       	ldi	r22, 0x0C	; 12
    d060:	8d e4       	ldi	r24, 0x4D	; 77
    d062:	9a e0       	ldi	r25, 0x0A	; 10
    d064:	0e 94 a3 66 	call	0xcd46	; 0xcd46 <stream_dialogue>
	LBWaitSeconds(1);
    d068:	81 e0       	ldi	r24, 0x01	; 1
    d06a:	0e 94 35 54 	call	0xa86a	; 0xa86a <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    d06e:	07 ec       	ldi	r16, 0xC7	; 199
    d070:	2d ef       	ldi	r18, 0xFD	; 253
    d072:	4c e1       	ldi	r20, 0x1C	; 28
    d074:	61 e0       	ldi	r22, 0x01	; 1
    d076:	80 e0       	ldi	r24, 0x00	; 0
    d078:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <planet_transition>
}
    d07c:	0f 91       	pop	r16
    d07e:	08 95       	ret

0000d080 <load_splash>:

void load_splash()
{
	fade_through();
    d080:	0e 94 8f 65 	call	0xcb1e	; 0xcb1e <fade_through>
	Screen.scrollX = 0;
    d084:	ef ea       	ldi	r30, 0xAF	; 175
    d086:	fc e0       	ldi	r31, 0x0C	; 12
    d088:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d08a:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d08c:	80 e2       	ldi	r24, 0x20	; 32
    d08e:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d090:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d092:	e6 ea       	ldi	r30, 0xA6	; 166
    d094:	fd e0       	ldi	r31, 0x0D	; 13
    d096:	10 8a       	std	Z+16, r1	; 0x10
	game.selection = START_SELECTED;
    d098:	15 8a       	std	Z+21, r1	; 0x15
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d09a:	64 e1       	ldi	r22, 0x14	; 20
    d09c:	80 e0       	ldi	r24, 0x00	; 0
    d09e:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
	LBRotateSprites();
    d0a2:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d0a6:	49 e7       	ldi	r20, 0x79	; 121
    d0a8:	5b e0       	ldi	r21, 0x0B	; 11
    d0aa:	6f e0       	ldi	r22, 0x0F	; 15
    d0ac:	88 e0       	ldi	r24, 0x08	; 8
    d0ae:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d0b2:	4d e6       	ldi	r20, 0x6D	; 109
    d0b4:	5b e0       	ldi	r21, 0x0B	; 11
    d0b6:	60 e1       	ldi	r22, 0x10	; 16
    d0b8:	88 e0       	ldi	r24, 0x08	; 8
    d0ba:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d0be:	47 e9       	ldi	r20, 0x97	; 151
    d0c0:	5b e0       	ldi	r21, 0x0B	; 11
    d0c2:	65 e1       	ldi	r22, 0x15	; 21
    d0c4:	84 e0       	ldi	r24, 0x04	; 4
    d0c6:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    d0ca:	4f e7       	ldi	r20, 0x7F	; 127
    d0cc:	5b e0       	ldi	r21, 0x0B	; 11
    d0ce:	6a e1       	ldi	r22, 0x1A	; 26
    d0d0:	83 e0       	ldi	r24, 0x03	; 3
    d0d2:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	DrawMap2(6, 5, map_splash);
    d0d6:	42 e5       	ldi	r20, 0x52	; 82
    d0d8:	52 e5       	ldi	r21, 0x52	; 82
    d0da:	65 e0       	ldi	r22, 0x05	; 5
    d0dc:	86 e0       	ldi	r24, 0x06	; 6
    d0de:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d0e2:	40 e0       	ldi	r20, 0x00	; 0
    d0e4:	60 ee       	ldi	r22, 0xE0	; 224
    d0e6:	7d e2       	ldi	r23, 0x2D	; 45
    d0e8:	80 e0       	ldi	r24, 0x00	; 0
    d0ea:	0c 94 44 54 	jmp	0xa888	; 0xa888 <LBMapSprite>

0000d0ee <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d0ee:	4f 92       	push	r4
    d0f0:	5f 92       	push	r5
    d0f2:	6f 92       	push	r6
    d0f4:	7f 92       	push	r7
    d0f6:	8f 92       	push	r8
    d0f8:	9f 92       	push	r9
    d0fa:	af 92       	push	r10
    d0fc:	bf 92       	push	r11
    d0fe:	cf 92       	push	r12
    d100:	df 92       	push	r13
    d102:	ef 92       	push	r14
    d104:	ff 92       	push	r15
    d106:	0f 93       	push	r16
    d108:	1f 93       	push	r17
    d10a:	cf 93       	push	r28
    d10c:	df 93       	push	r29
    d10e:	00 d0       	rcall	.+0      	; 0xd110 <load_high_scores+0x22>
    d110:	cd b7       	in	r28, 0x3d	; 61
    d112:	de b7       	in	r29, 0x3e	; 62
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d114:	81 e0       	ldi	r24, 0x01	; 1
    d116:	80 93 b6 0d 	sts	0x0DB6, r24
	game.high_score_index = -1;
    d11a:	8f ef       	ldi	r24, 0xFF	; 255
    d11c:	80 93 b4 0d 	sts	0x0DB4, r24
	fade_through();
    d120:	0e 94 8f 65 	call	0xcb1e	; 0xcb1e <fade_through>
	Screen.scrollX = 0;
    d124:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d128:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d12c:	80 e2       	ldi	r24, 0x20	; 32
    d12e:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d132:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    d136:	86 e8       	ldi	r24, 0x86	; 134
    d138:	9d e0       	ldi	r25, 0x0D	; 13
    d13a:	0e 94 3f 57 	call	0xae7e	; 0xae7e <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d13e:	4d e6       	ldi	r20, 0x6D	; 109
    d140:	5b e0       	ldi	r21, 0x0B	; 11
    d142:	63 e0       	ldi	r22, 0x03	; 3
    d144:	89 e0       	ldi	r24, 0x09	; 9
    d146:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d14a:	40 e0       	ldi	r20, 0x00	; 0
    d14c:	68 ec       	ldi	r22, 0xC8	; 200
    d14e:	7d e2       	ldi	r23, 0x2D	; 45
    d150:	80 e0       	ldi	r24, 0x00	; 0
    d152:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d156:	40 e0       	ldi	r20, 0x00	; 0
    d158:	6b ec       	ldi	r22, 0xCB	; 203
    d15a:	7d e2       	ldi	r23, 0x2D	; 45
    d15c:	81 e0       	ldi	r24, 0x01	; 1
    d15e:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d162:	01 e0       	ldi	r16, 0x01	; 1
    d164:	21 e0       	ldi	r18, 0x01	; 1
    d166:	48 e1       	ldi	r20, 0x18	; 24
    d168:	68 e3       	ldi	r22, 0x38	; 56
    d16a:	80 e0       	ldi	r24, 0x00	; 0
    d16c:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d170:	21 e0       	ldi	r18, 0x01	; 1
    d172:	48 e1       	ldi	r20, 0x18	; 24
    d174:	68 ea       	ldi	r22, 0xA8	; 168
    d176:	81 e0       	ldi	r24, 0x01	; 1
    d178:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
    d17c:	8c e8       	ldi	r24, 0x8C	; 140
    d17e:	88 2e       	mov	r8, r24
    d180:	8d e0       	ldi	r24, 0x0D	; 13
    d182:	98 2e       	mov	r9, r24
    d184:	74 01       	movw	r14, r8
    d186:	90 e3       	ldi	r25, 0x30	; 48
    d188:	b9 2e       	mov	r11, r25
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d18a:	17 e0       	ldi	r17, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d18c:	25 e0       	ldi	r18, 0x05	; 5
    d18e:	a2 2e       	mov	r10, r18
    d190:	31 ea       	ldi	r19, 0xA1	; 161
    d192:	63 2e       	mov	r6, r19
    d194:	3d e0       	ldi	r19, 0x0D	; 13
    d196:	73 2e       	mov	r7, r19
    d198:	0e 2d       	mov	r16, r14
    d19a:	08 19       	sub	r16, r8
    d19c:	80 2f       	mov	r24, r16
    d19e:	6a 2d       	mov	r22, r10
    d1a0:	0e 94 e6 70 	call	0xe1cc	; 0xe1cc <__udivmodqi4>
    d1a4:	41 e0       	ldi	r20, 0x01	; 1
    d1a6:	48 0f       	add	r20, r24
    d1a8:	20 e0       	ldi	r18, 0x00	; 0
    d1aa:	61 2f       	mov	r22, r17
    d1ac:	89 e0       	ldi	r24, 0x09	; 9
    d1ae:	0e 94 8f 53 	call	0xa71e	; 0xa71e <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d1b2:	40 e2       	ldi	r20, 0x20	; 32
    d1b4:	61 2f       	mov	r22, r17
    d1b6:	8a e0       	ldi	r24, 0x0A	; 10
    d1b8:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
    d1bc:	f7 01       	movw	r30, r14
    d1be:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintChar(11, ypos, scores.data[i]);
    d1c0:	40 81       	ld	r20, Z
    d1c2:	61 2f       	mov	r22, r17
    d1c4:	8b e0       	ldi	r24, 0x0B	; 11
    d1c6:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
    d1ca:	f7 01       	movw	r30, r14
    d1cc:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintChar(12, ypos, scores.data[i+1]);
    d1ce:	40 81       	ld	r20, Z
    d1d0:	61 2f       	mov	r22, r17
    d1d2:	8c e0       	ldi	r24, 0x0C	; 12
    d1d4:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
    d1d8:	f7 01       	movw	r30, r14
    d1da:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintChar(13, ypos, scores.data[i+2]);
    d1dc:	40 81       	ld	r20, Z
    d1de:	61 2f       	mov	r22, r17
    d1e0:	8d e0       	ldi	r24, 0x0D	; 13
    d1e2:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d1e6:	40 e2       	ldi	r20, 0x20	; 32
    d1e8:	61 2f       	mov	r22, r17
    d1ea:	8e e0       	ldi	r24, 0x0E	; 14
    d1ec:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <LBPrintChar>
    d1f0:	27 01       	movw	r4, r14
		(&score)[0] = scores.data[i+3];
    d1f2:	f2 01       	movw	r30, r4
    d1f4:	c2 90       	ld	r12, -Z
    d1f6:	2f 01       	movw	r4, r30
    d1f8:	d1 2c       	mov	r13, r1
    d1fa:	da 82       	std	Y+2, r13	; 0x02
    d1fc:	c9 82       	std	Y+1, r12	; 0x01
		(&score)[1] = scores.data[i+4];
    d1fe:	f7 01       	movw	r30, r14
    d200:	80 81       	ld	r24, Z
    d202:	90 e0       	ldi	r25, 0x00	; 0
    d204:	9c 83       	std	Y+4, r25	; 0x04
    d206:	8b 83       	std	Y+3, r24	; 0x03
		LBPrintInt(19, ypos, score, true);
    d208:	21 e0       	ldi	r18, 0x01	; 1
    d20a:	a6 01       	movw	r20, r12
    d20c:	61 2f       	mov	r22, r17
    d20e:	83 e1       	ldi	r24, 0x13	; 19
    d210:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    d214:	40 91 ae 0d 	lds	r20, 0x0DAE
    d218:	50 91 af 0d 	lds	r21, 0x0DAF
    d21c:	c4 16       	cp	r12, r20
    d21e:	d5 06       	cpc	r13, r21
    d220:	f0 f5       	brcc	.+124    	; 0xd29e <load_high_scores+0x1b0>
    d222:	80 91 b4 0d 	lds	r24, 0x0DB4
    d226:	8f 3f       	cpi	r24, 0xFF	; 255
    d228:	d1 f5       	brne	.+116    	; 0xd29e <load_high_scores+0x1b0>
    d22a:	a1 ea       	ldi	r26, 0xA1	; 161
    d22c:	bd e0       	ldi	r27, 0x0D	; 13
    d22e:	cd 01       	movw	r24, r26
    d230:	05 97       	sbiw	r24, 0x05	; 5
    d232:	2e e1       	ldi	r18, 0x1E	; 30
    d234:	28 0f       	add	r18, r24
    d236:	26 19       	sub	r18, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d238:	02 17       	cp	r16, r18
    d23a:	40 f4       	brcc	.+16     	; 0xd24c <load_high_scores+0x15e>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d23c:	fc 01       	movw	r30, r24
    d23e:	2a 2d       	mov	r18, r10
    d240:	01 90       	ld	r0, Z+
    d242:	0d 92       	st	X+, r0
    d244:	2a 95       	dec	r18
    d246:	e1 f7       	brne	.-8      	; 0xd240 <load_high_scores+0x152>
    d248:	dc 01       	movw	r26, r24
    d24a:	f1 cf       	rjmp	.-30     	; 0xd22e <load_high_scores+0x140>
			}
			LBPrintInt(19, ypos, game.score, true);
    d24c:	21 e0       	ldi	r18, 0x01	; 1
    d24e:	61 2f       	mov	r22, r17
    d250:	83 e1       	ldi	r24, 0x13	; 19
    d252:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
			scores.data[i+3] = (&game.score)[0];
    d256:	80 91 ae 0d 	lds	r24, 0x0DAE
    d25a:	f2 01       	movw	r30, r4
    d25c:	80 83       	st	Z, r24
			scores.data[i+4] = (&game.score)[1];
    d25e:	80 91 b0 0d 	lds	r24, 0x0DB0
    d262:	f7 01       	movw	r30, r14
    d264:	80 83       	st	Z, r24
			game.high_score_index = i;
    d266:	00 93 b4 0d 	sts	0x0DB4, r16
			LBMapSprite(2, map_down_arrow, 0);
    d26a:	40 e0       	ldi	r20, 0x00	; 0
    d26c:	6d ed       	ldi	r22, 0xDD	; 221
    d26e:	7d e2       	ldi	r23, 0x2D	; 45
    d270:	82 e0       	ldi	r24, 0x02	; 2
    d272:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d276:	40 e0       	ldi	r20, 0x00	; 0
    d278:	6a ed       	ldi	r22, 0xDA	; 218
    d27a:	7d e2       	ldi	r23, 0x2D	; 45
    d27c:	83 e0       	ldi	r24, 0x03	; 3
    d27e:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d282:	01 e0       	ldi	r16, 0x01	; 1
    d284:	21 e0       	ldi	r18, 0x01	; 1
    d286:	4b 2d       	mov	r20, r11
    d288:	68 e5       	ldi	r22, 0x58	; 88
    d28a:	82 e0       	ldi	r24, 0x02	; 2
    d28c:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d290:	21 e0       	ldi	r18, 0x01	; 1
    d292:	40 e1       	ldi	r20, 0x10	; 16
    d294:	4b 0d       	add	r20, r11
    d296:	68 e5       	ldi	r22, 0x58	; 88
    d298:	83 e0       	ldi	r24, 0x03	; 3
    d29a:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
		}
		
		ypos += 2;
    d29e:	1e 5f       	subi	r17, 0xFE	; 254
    d2a0:	f5 e0       	ldi	r31, 0x05	; 5
    d2a2:	ef 0e       	add	r14, r31
    d2a4:	f1 1c       	adc	r15, r1
    d2a6:	80 e1       	ldi	r24, 0x10	; 16
    d2a8:	b8 0e       	add	r11, r24
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d2aa:	13 31       	cpi	r17, 0x13	; 19
    d2ac:	09 f0       	breq	.+2      	; 0xd2b0 <load_high_scores+0x1c2>
    d2ae:	74 cf       	rjmp	.-280    	; 0xd198 <load_high_scores+0xaa>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d2b0:	44 e4       	ldi	r20, 0x44	; 68
    d2b2:	5b e0       	ldi	r21, 0x0B	; 11
    d2b4:	66 e1       	ldi	r22, 0x16	; 22
    d2b6:	89 e0       	ldi	r24, 0x09	; 9
}
    d2b8:	0f 90       	pop	r0
    d2ba:	0f 90       	pop	r0
    d2bc:	df 91       	pop	r29
    d2be:	cf 91       	pop	r28
    d2c0:	1f 91       	pop	r17
    d2c2:	0f 91       	pop	r16
    d2c4:	ff 90       	pop	r15
    d2c6:	ef 90       	pop	r14
    d2c8:	df 90       	pop	r13
    d2ca:	cf 90       	pop	r12
    d2cc:	bf 90       	pop	r11
    d2ce:	af 90       	pop	r10
    d2d0:	9f 90       	pop	r9
    d2d2:	8f 90       	pop	r8
    d2d4:	7f 90       	pop	r7
    d2d6:	6f 90       	pop	r6
    d2d8:	5f 90       	pop	r5
    d2da:	4f 90       	pop	r4
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d2dc:	0c 94 73 53 	jmp	0xa6e6	; 0xa6e6 <LBPrint>

0000d2e0 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d2e0:	64 e1       	ldi	r22, 0x14	; 20
    d2e2:	80 e0       	ldi	r24, 0x00	; 0
    d2e4:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
	LBRotateSprites();
    d2e8:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	init_player_state();
    d2ec:	0e 94 41 55 	call	0xaa82	; 0xaa82 <init_player_state>
	init_enemy_state();
    d2f0:	0e 94 2d 55 	call	0xaa5a	; 0xaa5a <init_enemy_state>
	StopSong();
    d2f4:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <StopSong>
	load_high_scores();
    d2f8:	0c 94 77 68 	jmp	0xd0ee	; 0xd0ee <load_high_scores>

0000d2fc <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d2fc:	0f 93       	push	r16
    d2fe:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d300:	80 91 9a 0f 	lds	r24, 0x0F9A
    d304:	c0 91 bb 0d 	lds	r28, 0x0DBB
    d308:	85 ff       	sbrs	r24, 5
    d30a:	06 c0       	rjmp	.+12     	; 0xd318 <update_splash+0x1c>
    d30c:	c1 11       	cpse	r28, r1
    d30e:	04 c0       	rjmp	.+8      	; 0xd318 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d310:	81 e0       	ldi	r24, 0x01	; 1
    d312:	80 93 bb 0d 	sts	0x0DBB, r24
    d316:	06 c0       	rjmp	.+12     	; 0xd324 <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d318:	84 ff       	sbrs	r24, 4
    d31a:	0a c0       	rjmp	.+20     	; 0xd330 <update_splash+0x34>
    d31c:	c1 30       	cpi	r28, 0x01	; 1
    d31e:	41 f4       	brne	.+16     	; 0xd330 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    d320:	10 92 bb 0d 	sts	0x0DBB, r1
		SFX_NAVIGATE;
    d324:	41 e0       	ldi	r20, 0x01	; 1
    d326:	6f ef       	ldi	r22, 0xFF	; 255
    d328:	82 e0       	ldi	r24, 0x02	; 2
    d32a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
    d32e:	1c c0       	rjmp	.+56     	; 0xd368 <update_splash+0x6c>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    d330:	8a e9       	ldi	r24, 0x9A	; 154
    d332:	9f e0       	ldi	r25, 0x0F	; 15
    d334:	0e 94 99 66 	call	0xcd32	; 0xcd32 <select_pressed>
    d338:	88 23       	and	r24, r24
    d33a:	b1 f0       	breq	.+44     	; 0xd368 <update_splash+0x6c>
    d33c:	c1 11       	cpse	r28, r1
    d33e:	09 c0       	rjmp	.+18     	; 0xd352 <update_splash+0x56>
	{
		SFX_NAVIGATE;
    d340:	41 e0       	ldi	r20, 0x01	; 1
    d342:	6f ef       	ldi	r22, 0xFF	; 255
    d344:	82 e0       	ldi	r24, 0x02	; 2
    d346:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d34a:	cf 91       	pop	r28
    d34c:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d34e:	0c 94 e1 67 	jmp	0xcfc2	; 0xcfc2 <intro>
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
    d352:	c1 30       	cpi	r28, 0x01	; 1
    d354:	49 f4       	brne	.+18     	; 0xd368 <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    d356:	41 e0       	ldi	r20, 0x01	; 1
    d358:	6f ef       	ldi	r22, 0xFF	; 255
    d35a:	82 e0       	ldi	r24, 0x02	; 2
    d35c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d360:	cf 91       	pop	r28
    d362:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.joypadState) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d364:	0c 94 77 68 	jmp	0xd0ee	; 0xd0ee <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    d368:	80 91 bb 0d 	lds	r24, 0x0DBB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d36c:	01 e0       	ldi	r16, 0x01	; 1
    d36e:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    d370:	81 11       	cpse	r24, r1
    d372:	03 c0       	rjmp	.+6      	; 0xd37a <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d374:	48 e7       	ldi	r20, 0x78	; 120
    d376:	68 e3       	ldi	r22, 0x38	; 56
    d378:	03 c0       	rjmp	.+6      	; 0xd380 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d37a:	40 e8       	ldi	r20, 0x80	; 128
    d37c:	68 e3       	ldi	r22, 0x38	; 56
    d37e:	80 e0       	ldi	r24, 0x00	; 0
    d380:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
	}
}
    d384:	cf 91       	pop	r28
    d386:	0f 91       	pop	r16
    d388:	08 95       	ret

0000d38a <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    d38a:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_X)
    d38c:	80 91 9a 0f 	lds	r24, 0x0F9A
    d390:	90 91 9b 0f 	lds	r25, 0x0F9B
    d394:	91 ff       	sbrs	r25, 1
    d396:	07 c0       	rjmp	.+14     	; 0xd3a6 <update_high_scores+0x1c>
	{
		SFX_NAVIGATE;
    d398:	41 e0       	ldi	r20, 0x01	; 1
    d39a:	6f ef       	ldi	r22, 0xFF	; 255
    d39c:	82 e0       	ldi	r24, 0x02	; 2
    d39e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
		load_splash();
    d3a2:	0e 94 40 68 	call	0xd080	; 0xd080 <load_splash>
	}
	
	if (game.high_score_index != -1)
    d3a6:	30 91 b4 0d 	lds	r19, 0x0DB4
    d3aa:	3f 3f       	cpi	r19, 0xFF	; 255
    d3ac:	09 f4       	brne	.+2      	; 0xd3b0 <update_high_scores+0x26>
    d3ae:	a2 c0       	rjmp	.+324    	; 0xd4f4 <update_high_scores+0x16a>
	{
		if (game.joypadState.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d3b0:	20 91 9a 0f 	lds	r18, 0x0F9A
    d3b4:	27 ff       	sbrs	r18, 7
    d3b6:	1e c0       	rjmp	.+60     	; 0xd3f4 <update_high_scores+0x6a>
    d3b8:	83 2f       	mov	r24, r19
    d3ba:	65 e0       	ldi	r22, 0x05	; 5
    d3bc:	0e 94 f2 70 	call	0xe1e4	; 0xe1e4 <__divmodqi4>
    d3c0:	92 30       	cpi	r25, 0x02	; 2
    d3c2:	c1 f0       	breq	.+48     	; 0xd3f4 <update_high_scores+0x6a>
		{
			SFX_NAVIGATE;
    d3c4:	41 e0       	ldi	r20, 0x01	; 1
    d3c6:	6f ef       	ldi	r22, 0xFF	; 255
    d3c8:	82 e0       	ldi	r24, 0x02	; 2
    d3ca:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
			game.high_score_index++;
    d3ce:	80 91 b4 0d 	lds	r24, 0x0DB4
    d3d2:	8f 5f       	subi	r24, 0xFF	; 255
    d3d4:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d3d8:	60 91 b3 0f 	lds	r22, 0x0FB3
    d3dc:	68 5f       	subi	r22, 0xF8	; 248
    d3de:	01 e0       	ldi	r16, 0x01	; 1
    d3e0:	21 e0       	ldi	r18, 0x01	; 1
    d3e2:	40 91 b4 0f 	lds	r20, 0x0FB4
    d3e6:	82 e0       	ldi	r24, 0x02	; 2
    d3e8:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d3ec:	60 91 b7 0f 	lds	r22, 0x0FB7
    d3f0:	68 5f       	subi	r22, 0xF8	; 248
    d3f2:	1f c0       	rjmp	.+62     	; 0xd432 <update_high_scores+0xa8>
		}
		else if (game.joypadState.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d3f4:	26 ff       	sbrs	r18, 6
    d3f6:	24 c0       	rjmp	.+72     	; 0xd440 <update_high_scores+0xb6>
    d3f8:	83 2f       	mov	r24, r19
    d3fa:	65 e0       	ldi	r22, 0x05	; 5
    d3fc:	0e 94 f2 70 	call	0xe1e4	; 0xe1e4 <__divmodqi4>
    d400:	99 23       	and	r25, r25
    d402:	f1 f0       	breq	.+60     	; 0xd440 <update_high_scores+0xb6>
		{
			SFX_NAVIGATE;
    d404:	41 e0       	ldi	r20, 0x01	; 1
    d406:	6f ef       	ldi	r22, 0xFF	; 255
    d408:	82 e0       	ldi	r24, 0x02	; 2
    d40a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
			game.high_score_index--;
    d40e:	80 91 b4 0d 	lds	r24, 0x0DB4
    d412:	81 50       	subi	r24, 0x01	; 1
    d414:	80 93 b4 0d 	sts	0x0DB4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d418:	60 91 b3 0f 	lds	r22, 0x0FB3
    d41c:	68 50       	subi	r22, 0x08	; 8
    d41e:	01 e0       	ldi	r16, 0x01	; 1
    d420:	21 e0       	ldi	r18, 0x01	; 1
    d422:	40 91 b4 0f 	lds	r20, 0x0FB4
    d426:	82 e0       	ldi	r24, 0x02	; 2
    d428:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d42c:	60 91 b7 0f 	lds	r22, 0x0FB7
    d430:	68 50       	subi	r22, 0x08	; 8
    d432:	21 e0       	ldi	r18, 0x01	; 1
    d434:	40 91 b8 0f 	lds	r20, 0x0FB8
    d438:	83 e0       	ldi	r24, 0x03	; 3
    d43a:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
    d43e:	5a c0       	rjmp	.+180    	; 0xd4f4 <update_high_scores+0x16a>
		}
		else if (game.joypadState.pressed & BTN_UP)
    d440:	24 ff       	sbrs	r18, 4
    d442:	13 c0       	rjmp	.+38     	; 0xd46a <update_high_scores+0xe0>
		{
			SFX_NAVIGATE;
    d444:	41 e0       	ldi	r20, 0x01	; 1
    d446:	6f ef       	ldi	r22, 0xFF	; 255
    d448:	82 e0       	ldi	r24, 0x02	; 2
    d44a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d44e:	80 91 b4 0d 	lds	r24, 0x0DB4
    d452:	e8 2f       	mov	r30, r24
    d454:	ff 27       	eor	r31, r31
    d456:	e7 fd       	sbrc	r30, 7
    d458:	f0 95       	com	r31
    d45a:	ea 57       	subi	r30, 0x7A	; 122
    d45c:	f2 4f       	sbci	r31, 0xF2	; 242
    d45e:	92 81       	ldd	r25, Z+2	; 0x02
    d460:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d462:	91 34       	cpi	r25, 0x41	; 65
    d464:	b0 f4       	brcc	.+44     	; 0xd492 <update_high_scores+0x108>
    d466:	91 e4       	ldi	r25, 0x41	; 65
    d468:	14 c0       	rjmp	.+40     	; 0xd492 <update_high_scores+0x108>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.joypadState.pressed & BTN_DOWN)
    d46a:	25 ff       	sbrs	r18, 5
    d46c:	1f c0       	rjmp	.+62     	; 0xd4ac <update_high_scores+0x122>
		{
			SFX_NAVIGATE;
    d46e:	41 e0       	ldi	r20, 0x01	; 1
    d470:	6f ef       	ldi	r22, 0xFF	; 255
    d472:	82 e0       	ldi	r24, 0x02	; 2
    d474:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d478:	80 91 b4 0d 	lds	r24, 0x0DB4
    d47c:	e8 2f       	mov	r30, r24
    d47e:	ff 27       	eor	r31, r31
    d480:	e7 fd       	sbrc	r30, 7
    d482:	f0 95       	com	r31
    d484:	ea 57       	subi	r30, 0x7A	; 122
    d486:	f2 4f       	sbci	r31, 0xF2	; 242
    d488:	92 81       	ldd	r25, Z+2	; 0x02
    d48a:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d48c:	9b 35       	cpi	r25, 0x5B	; 91
    d48e:	08 f0       	brcs	.+2      	; 0xd492 <update_high_scores+0x108>
    d490:	9a e5       	ldi	r25, 0x5A	; 90
    d492:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d494:	65 e0       	ldi	r22, 0x05	; 5
    d496:	0e 94 f2 70 	call	0xe1e4	; 0xe1e4 <__divmodqi4>
    d49a:	68 2f       	mov	r22, r24
    d49c:	66 0f       	add	r22, r22
    d49e:	69 5f       	subi	r22, 0xF9	; 249
    d4a0:	42 81       	ldd	r20, Z+2	; 0x02
    d4a2:	8b e0       	ldi	r24, 0x0B	; 11
    d4a4:	89 0f       	add	r24, r25
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    d4a6:	0f 91       	pop	r16
		else if (game.joypadState.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d4a8:	0c 94 53 53 	jmp	0xa6a6	; 0xa6a6 <LBPrintChar>
		}
		else if (select_pressed(&game.joypadState))
    d4ac:	8a e9       	ldi	r24, 0x9A	; 154
    d4ae:	9f e0       	ldi	r25, 0x0F	; 15
    d4b0:	0e 94 99 66 	call	0xcd32	; 0xcd32 <select_pressed>
    d4b4:	88 23       	and	r24, r24
    d4b6:	f1 f0       	breq	.+60     	; 0xd4f4 <update_high_scores+0x16a>
		{
			SFX_NAVIGATE;
    d4b8:	41 e0       	ldi	r20, 0x01	; 1
    d4ba:	6f ef       	ldi	r22, 0xFF	; 255
    d4bc:	82 e0       	ldi	r24, 0x02	; 2
    d4be:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
			LBMoveSprite(2, OFF_SCREEN, 0, 1, 1);
    d4c2:	01 e0       	ldi	r16, 0x01	; 1
    d4c4:	21 e0       	ldi	r18, 0x01	; 1
    d4c6:	40 e0       	ldi	r20, 0x00	; 0
    d4c8:	60 ee       	ldi	r22, 0xE0	; 224
    d4ca:	82 e0       	ldi	r24, 0x02	; 2
    d4cc:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			LBMoveSprite(3, OFF_SCREEN, 0, 1, 1);
    d4d0:	21 e0       	ldi	r18, 0x01	; 1
    d4d2:	40 e0       	ldi	r20, 0x00	; 0
    d4d4:	60 ee       	ldi	r22, 0xE0	; 224
    d4d6:	83 e0       	ldi	r24, 0x03	; 3
    d4d8:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			game.high_score_index = -1;
    d4dc:	8f ef       	ldi	r24, 0xFF	; 255
    d4de:	80 93 b4 0d 	sts	0x0DB4, r24
			game.score = 0;
    d4e2:	10 92 af 0d 	sts	0x0DAF, r1
    d4e6:	10 92 ae 0d 	sts	0x0DAE, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d4ea:	86 e8       	ldi	r24, 0x86	; 134
    d4ec:	9d e0       	ldi	r25, 0x0D	; 13
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    d4ee:	0f 91       	pop	r16
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d4f0:	0c 94 fa 44 	jmp	0x89f4	; 0x89f4 <EepromWriteBlock>
			game.high_score_index = -1;
			game.score = 0;
			save_eeprom(&scores);
		}
	}
}
    d4f4:	0f 91       	pop	r16
    d4f6:	08 95       	ret

0000d4f8 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d4f8:	5f 92       	push	r5
    d4fa:	6f 92       	push	r6
    d4fc:	7f 92       	push	r7
    d4fe:	8f 92       	push	r8
    d500:	9f 92       	push	r9
    d502:	af 92       	push	r10
    d504:	bf 92       	push	r11
    d506:	cf 92       	push	r12
    d508:	df 92       	push	r13
    d50a:	ef 92       	push	r14
    d50c:	ff 92       	push	r15
    d50e:	0f 93       	push	r16
    d510:	1f 93       	push	r17
    d512:	cf 93       	push	r28
    d514:	df 93       	push	r29
    d516:	6c 01       	movw	r12, r24
    d518:	7b 01       	movw	r14, r22
	u8 x = Screen.scrollX / 8;
    d51a:	c0 91 b2 0c 	lds	r28, 0x0CB2
    d51e:	c6 95       	lsr	r28
    d520:	c6 95       	lsr	r28
    d522:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d524:	00 91 b3 0c 	lds	r16, 0x0CB3
    d528:	06 95       	lsr	r16
    d52a:	06 95       	lsr	r16
    d52c:	06 95       	lsr	r16
	u16 counter = 0;
	
	//hide_sprites(0, MAX_EXTENDED_SPRITES);
	//LBRotateSprites();
	
	StopSong();
    d52e:	0e 94 9c 46 	call	0x8d38	; 0x8d38 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d532:	10 e0       	ldi	r17, 0x00	; 0
    d534:	d0 e0       	ldi	r29, 0x00	; 0
    d536:	c8 01       	movw	r24, r16
    d538:	06 96       	adiw	r24, 0x06	; 6
    d53a:	2e e1       	ldi	r18, 0x1E	; 30
    d53c:	a2 2e       	mov	r10, r18
    d53e:	b1 2c       	mov	r11, r1
    d540:	b5 01       	movw	r22, r10
    d542:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d546:	9e 01       	movw	r18, r28
    d548:	28 5f       	subi	r18, 0xF8	; 248
    d54a:	3f 4f       	sbci	r19, 0xFF	; 255
    d54c:	49 ec       	ldi	r20, 0xC9	; 201
    d54e:	51 e5       	ldi	r21, 0x51	; 81
    d550:	68 2f       	mov	r22, r24
    d552:	82 2f       	mov	r24, r18
    d554:	8f 71       	andi	r24, 0x1F	; 31
    d556:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d55a:	c8 01       	movw	r24, r16
    d55c:	07 96       	adiw	r24, 0x07	; 7
    d55e:	b5 01       	movw	r22, r10
    d560:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d564:	9e 01       	movw	r18, r28
    d566:	26 5f       	subi	r18, 0xF6	; 246
    d568:	3f 4f       	sbci	r19, 0xFF	; 255
    d56a:	a6 01       	movw	r20, r12
    d56c:	68 2f       	mov	r22, r24
    d56e:	82 2f       	mov	r24, r18
    d570:	8f 71       	andi	r24, 0x1F	; 31
    d572:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d576:	c8 01       	movw	r24, r16
    d578:	09 96       	adiw	r24, 0x09	; 9
    d57a:	b5 01       	movw	r22, r10
    d57c:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d580:	68 2e       	mov	r6, r24
    d582:	98 2e       	mov	r9, r24
    d584:	6e 01       	movw	r12, r28
    d586:	29 e0       	ldi	r18, 0x09	; 9
    d588:	c2 0e       	add	r12, r18
    d58a:	d1 1c       	adc	r13, r1
    d58c:	8f e1       	ldi	r24, 0x1F	; 31
    d58e:	c8 22       	and	r12, r24
    d590:	dd 24       	eor	r13, r13
    d592:	40 e1       	ldi	r20, 0x10	; 16
    d594:	5b e0       	ldi	r21, 0x0B	; 11
    d596:	66 2d       	mov	r22, r6
    d598:	8c 2d       	mov	r24, r12
    d59a:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d59e:	c8 01       	movw	r24, r16
    d5a0:	0b 96       	adiw	r24, 0x0b	; 11
    d5a2:	b5 01       	movw	r22, r10
    d5a4:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d5a8:	58 2e       	mov	r5, r24
    d5aa:	88 2e       	mov	r8, r24
    d5ac:	45 e6       	ldi	r20, 0x65	; 101
    d5ae:	5b e0       	ldi	r21, 0x0B	; 11
    d5b0:	68 2f       	mov	r22, r24
    d5b2:	8c 2d       	mov	r24, r12
    d5b4:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d5b8:	c8 01       	movw	r24, r16
    d5ba:	0c 96       	adiw	r24, 0x0c	; 12
    d5bc:	b5 01       	movw	r22, r10
    d5be:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d5c2:	78 2e       	mov	r7, r24
    d5c4:	d8 2e       	mov	r13, r24
    d5c6:	40 e5       	ldi	r20, 0x50	; 80
    d5c8:	5b e0       	ldi	r21, 0x0B	; 11
    d5ca:	68 2f       	mov	r22, r24
    d5cc:	8c 2d       	mov	r24, r12
    d5ce:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d5d2:	c8 01       	movw	r24, r16
    d5d4:	0d 96       	adiw	r24, 0x0d	; 13
    d5d6:	b5 01       	movw	r22, r10
    d5d8:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    d5dc:	18 2f       	mov	r17, r24
    d5de:	b8 2e       	mov	r11, r24
    d5e0:	40 e2       	ldi	r20, 0x20	; 32
    d5e2:	5b e0       	ldi	r21, 0x0B	; 11
    d5e4:	68 2f       	mov	r22, r24
    d5e6:	8c 2d       	mov	r24, r12
    d5e8:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, 0, true);
    d5ec:	64 96       	adiw	r28, 0x14	; 20
    d5ee:	cf 71       	andi	r28, 0x1F	; 31
    d5f0:	dd 27       	eor	r29, r29
    d5f2:	cc 2e       	mov	r12, r28
    d5f4:	21 e0       	ldi	r18, 0x01	; 1
    d5f6:	40 e0       	ldi	r20, 0x00	; 0
    d5f8:	50 e0       	ldi	r21, 0x00	; 0
    d5fa:	66 2d       	mov	r22, r6
    d5fc:	8c 2f       	mov	r24, r28
    d5fe:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.score, true);
    d602:	40 91 ae 0d 	lds	r20, 0x0DAE
    d606:	50 91 af 0d 	lds	r21, 0x0DAF
    d60a:	21 e0       	ldi	r18, 0x01	; 1
    d60c:	65 2d       	mov	r22, r5
    d60e:	8c 2f       	mov	r24, r28
    d610:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d614:	40 91 b0 0d 	lds	r20, 0x0DB0
    d618:	50 91 b1 0d 	lds	r21, 0x0DB1
    d61c:	21 e0       	ldi	r18, 0x01	; 1
    d61e:	67 2d       	mov	r22, r7
    d620:	8c 2f       	mov	r24, r28
    d622:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d626:	21 e0       	ldi	r18, 0x01	; 1
    d628:	a7 01       	movw	r20, r14
    d62a:	61 2f       	mov	r22, r17
    d62c:	8c 2f       	mov	r24, r28
    d62e:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	
	LBWaitSeconds(2);
    d632:	82 e0       	ldi	r24, 0x02	; 2
    d634:	0e 94 35 54 	call	0xa86a	; 0xa86a <LBWaitSeconds>
	
	// Tally Score
	counter = game.score;
    d638:	c0 91 ae 0d 	lds	r28, 0x0DAE
    d63c:	d0 91 af 0d 	lds	r29, 0x0DAF

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = 0;
    d640:	00 e0       	ldi	r16, 0x00	; 0
    d642:	10 e0       	ldi	r17, 0x00	; 0
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.score;
	while (counter > 0)
    d644:	0c 17       	cp	r16, r28
    d646:	1d 07       	cpc	r17, r29
    d648:	f9 f0       	breq	.+62     	; 0xd688 <tally_score+0x190>
	{
		WaitVsync(1);
    d64a:	81 e0       	ldi	r24, 0x01	; 1
    d64c:	90 e0       	ldi	r25, 0x00	; 0
    d64e:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
		SFX_HIT;
    d652:	41 e0       	ldi	r20, 0x01	; 1
    d654:	6f ef       	ldi	r22, 0xFF	; 255
    d656:	84 e0       	ldi	r24, 0x04	; 4
    d658:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
		tally += 1;
    d65c:	0f 5f       	subi	r16, 0xFF	; 255
    d65e:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d660:	3e 01       	movw	r6, r28
    d662:	60 1a       	sub	r6, r16
    d664:	71 0a       	sbc	r7, r17
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d666:	21 e0       	ldi	r18, 0x01	; 1
    d668:	a8 01       	movw	r20, r16
    d66a:	69 2d       	mov	r22, r9
    d66c:	8c 2d       	mov	r24, r12
    d66e:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d672:	21 e0       	ldi	r18, 0x01	; 1
    d674:	a3 01       	movw	r20, r6
    d676:	68 2d       	mov	r22, r8
    d678:	8c 2d       	mov	r24, r12
    d67a:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d67e:	8c ed       	ldi	r24, 0xDC	; 220
    d680:	95 e0       	ldi	r25, 0x05	; 5
    d682:	0e 94 b5 43 	call	0x876a	; 0x876a <WaitUs>
    d686:	de cf       	rjmp	.-68     	; 0xd644 <tally_score+0x14c>
	}
	
	// Tally Time
	counter = game.time;
    d688:	00 91 b0 0d 	lds	r16, 0x0DB0
    d68c:	10 91 b1 0d 	lds	r17, 0x0DB1
	while (counter > 0)
    d690:	01 15       	cp	r16, r1
    d692:	11 05       	cpc	r17, r1
    d694:	29 f1       	breq	.+74     	; 0xd6e0 <tally_score+0x1e8>
	{
		WaitVsync(1);
    d696:	81 e0       	ldi	r24, 0x01	; 1
    d698:	90 e0       	ldi	r25, 0x00	; 0
    d69a:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
		SFX_HIT;
    d69e:	41 e0       	ldi	r20, 0x01	; 1
    d6a0:	6f ef       	ldi	r22, 0xFF	; 255
    d6a2:	84 e0       	ldi	r24, 0x04	; 4
    d6a4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d6a8:	ce 01       	movw	r24, r28
    d6aa:	02 97       	sbiw	r24, 0x02	; 2
    d6ac:	8e 3f       	cpi	r24, 0xFE	; 254
    d6ae:	9f 4f       	sbci	r25, 0xFF	; 255
    d6b0:	10 f4       	brcc	.+4      	; 0xd6b6 <tally_score+0x1be>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d6b2:	21 97       	sbiw	r28, 0x01	; 1
    d6b4:	02 c0       	rjmp	.+4      	; 0xd6ba <tally_score+0x1c2>
		if (tally == 0 || tally == 65535) tally = 0;
    d6b6:	c0 e0       	ldi	r28, 0x00	; 0
    d6b8:	d0 e0       	ldi	r29, 0x00	; 0
		counter -= 1;
    d6ba:	01 50       	subi	r16, 0x01	; 1
    d6bc:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d6be:	21 e0       	ldi	r18, 0x01	; 1
    d6c0:	ae 01       	movw	r20, r28
    d6c2:	69 2d       	mov	r22, r9
    d6c4:	8c 2d       	mov	r24, r12
    d6c6:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d6ca:	21 e0       	ldi	r18, 0x01	; 1
    d6cc:	a8 01       	movw	r20, r16
    d6ce:	6d 2d       	mov	r22, r13
    d6d0:	8c 2d       	mov	r24, r12
    d6d2:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d6d6:	8c ed       	ldi	r24, 0xDC	; 220
    d6d8:	95 e0       	ldi	r25, 0x05	; 5
    d6da:	0e 94 b5 43 	call	0x876a	; 0x876a <WaitUs>
    d6de:	d8 cf       	rjmp	.-80     	; 0xd690 <tally_score+0x198>
    d6e0:	3e 01       	movw	r6, r28
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d6e2:	87 01       	movw	r16, r14
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d6e4:	01 15       	cp	r16, r1
    d6e6:	11 05       	cpc	r17, r1
    d6e8:	e9 f0       	breq	.+58     	; 0xd724 <tally_score+0x22c>
	{
		WaitVsync(1);
    d6ea:	81 e0       	ldi	r24, 0x01	; 1
    d6ec:	90 e0       	ldi	r25, 0x00	; 0
    d6ee:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
		SFX_HIT;
    d6f2:	41 e0       	ldi	r20, 0x01	; 1
    d6f4:	6f ef       	ldi	r22, 0xFF	; 255
    d6f6:	84 e0       	ldi	r24, 0x04	; 4
    d6f8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <TriggerFx>
		tally += 1;
    d6fc:	21 96       	adiw	r28, 0x01	; 1
		counter -= 1;
    d6fe:	01 50       	subi	r16, 0x01	; 1
    d700:	11 09       	sbc	r17, r1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d702:	21 e0       	ldi	r18, 0x01	; 1
    d704:	ae 01       	movw	r20, r28
    d706:	69 2d       	mov	r22, r9
    d708:	8c 2d       	mov	r24, r12
    d70a:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d70e:	21 e0       	ldi	r18, 0x01	; 1
    d710:	a8 01       	movw	r20, r16
    d712:	6b 2d       	mov	r22, r11
    d714:	8c 2d       	mov	r24, r12
    d716:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d71a:	8c ed       	ldi	r24, 0xDC	; 220
    d71c:	95 e0       	ldi	r25, 0x05	; 5
    d71e:	0e 94 b5 43 	call	0x876a	; 0x876a <WaitUs>
    d722:	e0 cf       	rjmp	.-64     	; 0xd6e4 <tally_score+0x1ec>
    d724:	e6 0c       	add	r14, r6
    d726:	f7 1c       	adc	r15, r7
	}
	
	game.score = tally;
    d728:	f0 92 af 0d 	sts	0x0DAF, r15
    d72c:	e0 92 ae 0d 	sts	0x0DAE, r14
	game.time = 0;
    d730:	10 92 b1 0d 	sts	0x0DB1, r1
    d734:	10 92 b0 0d 	sts	0x0DB0, r1
	LBWaitSeconds(2);
    d738:	82 e0       	ldi	r24, 0x02	; 2
    d73a:	0e 94 35 54 	call	0xa86a	; 0xa86a <LBWaitSeconds>
	render_camera_view();
}
    d73e:	df 91       	pop	r29
    d740:	cf 91       	pop	r28
    d742:	1f 91       	pop	r17
    d744:	0f 91       	pop	r16
    d746:	ff 90       	pop	r15
    d748:	ef 90       	pop	r14
    d74a:	df 90       	pop	r13
    d74c:	cf 90       	pop	r12
    d74e:	bf 90       	pop	r11
    d750:	af 90       	pop	r10
    d752:	9f 90       	pop	r9
    d754:	8f 90       	pop	r8
    d756:	7f 90       	pop	r7
    d758:	6f 90       	pop	r6
    d75a:	5f 90       	pop	r5
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
	render_camera_view();
    d75c:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <render_camera_view>

0000d760 <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    d760:	80 91 b5 0d 	lds	r24, 0x0DB5
    d764:	81 50       	subi	r24, 0x01	; 1
    d766:	80 93 b5 0d 	sts	0x0DB5, r24
	clear_sprites(0, 6);
    d76a:	66 e0       	ldi	r22, 0x06	; 6
    d76c:	80 e0       	ldi	r24, 0x00	; 0
    d76e:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
	LBRotateSprites();
    d772:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	if (game.lives == 0)
    d776:	80 91 b5 0d 	lds	r24, 0x0DB5
    d77a:	81 11       	cpse	r24, r1
    d77c:	08 c0       	rjmp	.+16     	; 0xd78e <handle_player_death+0x2e>
	{
		tally_score((char*) strGameOver, 0);
    d77e:	60 e0       	ldi	r22, 0x00	; 0
    d780:	70 e0       	ldi	r23, 0x00	; 0
    d782:	86 e1       	ldi	r24, 0x16	; 22
    d784:	9b e0       	ldi	r25, 0x0B	; 11
    d786:	0e 94 7c 6a 	call	0xd4f8	; 0xd4f8 <tally_score>
		exit_game();
    d78a:	0c 94 70 69 	jmp	0xd2e0	; 0xd2e0 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d78e:	61 e0       	ldi	r22, 0x01	; 1
    d790:	81 e0       	ldi	r24, 0x01	; 1
    d792:	0e 94 ad 52 	call	0xa55a	; 0xa55a <FadeOut>
	ClearVram();
    d796:	0e 94 7f 43 	call	0x86fe	; 0x86fe <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d79a:	64 e1       	ldi	r22, 0x14	; 20
    d79c:	80 e0       	ldi	r24, 0x00	; 0
    d79e:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
	LBRotateSprites();
    d7a2:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d7a6:	60 e0       	ldi	r22, 0x00	; 0
    d7a8:	81 e0       	ldi	r24, 0x01	; 1
    d7aa:	0e 94 a1 52 	call	0xa542	; 0xa542 <FadeIn>
	init_player_state();
    d7ae:	0e 94 41 55 	call	0xaa82	; 0xaa82 <init_player_state>
	init_enemy_state();
    d7b2:	0e 94 2d 55 	call	0xaa5a	; 0xaa5a <init_enemy_state>
	load_level(game.current_level_index, false);
    d7b6:	60 e0       	ldi	r22, 0x00	; 0
    d7b8:	80 91 b7 0d 	lds	r24, 0x0DB7
    d7bc:	0c 94 9f 65 	jmp	0xcb3e	; 0xcb3e <load_level>

0000d7c0 <update_player>:
}

void update_player()
{
    d7c0:	cf 92       	push	r12
    d7c2:	df 92       	push	r13
    d7c4:	ef 92       	push	r14
    d7c6:	ff 92       	push	r15
    d7c8:	0f 93       	push	r16
    d7ca:	1f 93       	push	r17
    d7cc:	cf 93       	push	r28
    d7ce:	df 93       	push	r29
    d7d0:	1f 92       	push	r1
    d7d2:	cd b7       	in	r28, 0x3d	; 61
    d7d4:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    d7d6:	10 91 d4 0d 	lds	r17, 0x0DD4
    d7da:	14 ff       	sbrs	r17, 4
    d7dc:	19 c0       	rjmp	.+50     	; 0xd810 <update_player+0x50>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    d7de:	00 91 d8 0d 	lds	r16, 0x0DD8
    d7e2:	20 91 d7 0d 	lds	r18, 0x0DD7
    d7e6:	40 e0       	ldi	r20, 0x00	; 0
    d7e8:	68 e4       	ldi	r22, 0x48	; 72
    d7ea:	7e e0       	ldi	r23, 0x0E	; 14
    d7ec:	84 ed       	ldi	r24, 0xD4	; 212
    d7ee:	9d e0       	ldi	r25, 0x0D	; 13
    d7f0:	0e 94 6d 60 	call	0xc0da	; 0xc0da <map_explosion>
    d7f4:	88 23       	and	r24, r24
    d7f6:	09 f4       	brne	.+2      	; 0xd7fa <update_player+0x3a>
    d7f8:	d8 c2       	rjmp	.+1456   	; 0xddaa <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    d7fa:	0f 90       	pop	r0
    d7fc:	df 91       	pop	r29
    d7fe:	cf 91       	pop	r28
    d800:	1f 91       	pop	r17
    d802:	0f 91       	pop	r16
    d804:	ff 90       	pop	r15
    d806:	ef 90       	pop	r14
    d808:	df 90       	pop	r13
    d80a:	cf 90       	pop	r12
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    d80c:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <handle_player_death>
		}
	}
	else if (is_space())
    d810:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    d814:	88 23       	and	r24, r24
    d816:	09 f4       	brne	.+2      	; 0xd81a <update_player+0x5a>
    d818:	ab c0       	rjmp	.+342    	; 0xd970 <update_player+0x1b0>
	{
		game.player.shared.vy = 0;
    d81a:	10 92 c4 0d 	sts	0x0DC4, r1
    d81e:	10 92 c5 0d 	sts	0x0DC5, r1
    d822:	10 92 c6 0d 	sts	0x0DC6, r1
    d826:	10 92 c7 0d 	sts	0x0DC7, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    d82a:	8c e3       	ldi	r24, 0x3C	; 60
    d82c:	90 e0       	ldi	r25, 0x00	; 0
    d82e:	90 93 d1 0d 	sts	0x0DD1, r25
    d832:	80 93 d0 0d 	sts	0x0DD0, r24
		
		if ((game.joypadState.held & BTN_DOWN) && (game.player.shared.y/8 + 1 < game.level_height))
    d836:	10 91 9e 0f 	lds	r17, 0x0F9E
    d83a:	15 ff       	sbrs	r17, 5
    d83c:	32 c0       	rjmp	.+100    	; 0xd8a2 <update_player+0xe2>
    d83e:	20 e0       	ldi	r18, 0x00	; 0
    d840:	30 e0       	ldi	r19, 0x00	; 0
    d842:	40 e0       	ldi	r20, 0x00	; 0
    d844:	5e e3       	ldi	r21, 0x3E	; 62
    d846:	60 91 cc 0d 	lds	r22, 0x0DCC
    d84a:	70 91 cd 0d 	lds	r23, 0x0DCD
    d84e:	80 91 ce 0d 	lds	r24, 0x0DCE
    d852:	90 91 cf 0d 	lds	r25, 0x0DCF
    d856:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    d85a:	20 e0       	ldi	r18, 0x00	; 0
    d85c:	30 e0       	ldi	r19, 0x00	; 0
    d85e:	40 e8       	ldi	r20, 0x80	; 128
    d860:	5f e3       	ldi	r21, 0x3F	; 63
    d862:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    d866:	6b 01       	movw	r12, r22
    d868:	7c 01       	movw	r14, r24
    d86a:	80 91 b9 0d 	lds	r24, 0x0DB9
    d86e:	68 2f       	mov	r22, r24
    d870:	70 e0       	ldi	r23, 0x00	; 0
    d872:	80 e0       	ldi	r24, 0x00	; 0
    d874:	90 e0       	ldi	r25, 0x00	; 0
    d876:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    d87a:	9b 01       	movw	r18, r22
    d87c:	ac 01       	movw	r20, r24
    d87e:	c7 01       	movw	r24, r14
    d880:	b6 01       	movw	r22, r12
    d882:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    d886:	87 ff       	sbrs	r24, 7
    d888:	0c c0       	rjmp	.+24     	; 0xd8a2 <update_player+0xe2>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    d88a:	80 e0       	ldi	r24, 0x00	; 0
    d88c:	90 e0       	ldi	r25, 0x00	; 0
    d88e:	a0 e7       	ldi	r26, 0x70	; 112
    d890:	b2 e4       	ldi	r27, 0x42	; 66
    d892:	80 93 c4 0d 	sts	0x0DC4, r24
    d896:	90 93 c5 0d 	sts	0x0DC5, r25
    d89a:	a0 93 c6 0d 	sts	0x0DC6, r26
    d89e:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    d8a2:	17 ff       	sbrs	r17, 7
    d8a4:	29 c0       	rjmp	.+82     	; 0xd8f8 <update_player+0x138>
    d8a6:	20 e0       	ldi	r18, 0x00	; 0
    d8a8:	30 e0       	ldi	r19, 0x00	; 0
    d8aa:	40 ec       	ldi	r20, 0xC0	; 192
    d8ac:	51 e4       	ldi	r21, 0x41	; 65
    d8ae:	60 91 c8 0d 	lds	r22, 0x0DC8
    d8b2:	70 91 c9 0d 	lds	r23, 0x0DC9
    d8b6:	80 91 ca 0d 	lds	r24, 0x0DCA
    d8ba:	90 91 cb 0d 	lds	r25, 0x0DCB
    d8be:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    d8c2:	6b 01       	movw	r12, r22
    d8c4:	7c 01       	movw	r14, r24
    d8c6:	80 91 aa 0d 	lds	r24, 0x0DAA
    d8ca:	90 91 ab 0d 	lds	r25, 0x0DAB
    d8ce:	80 52       	subi	r24, 0x20	; 32
    d8d0:	9f 4f       	sbci	r25, 0xFF	; 255
    d8d2:	bc 01       	movw	r22, r24
    d8d4:	80 e0       	ldi	r24, 0x00	; 0
    d8d6:	90 e0       	ldi	r25, 0x00	; 0
    d8d8:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    d8dc:	9b 01       	movw	r18, r22
    d8de:	ac 01       	movw	r20, r24
    d8e0:	c7 01       	movw	r24, r14
    d8e2:	b6 01       	movw	r22, r12
    d8e4:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    d8e8:	87 ff       	sbrs	r24, 7
    d8ea:	06 c0       	rjmp	.+12     	; 0xd8f8 <update_player+0x138>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    d8ec:	88 e7       	ldi	r24, 0x78	; 120
    d8ee:	90 e0       	ldi	r25, 0x00	; 0
    d8f0:	90 93 d1 0d 	sts	0x0DD1, r25
    d8f4:	80 93 d0 0d 	sts	0x0DD0, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    d8f8:	16 ff       	sbrs	r17, 6
    d8fa:	1a c0       	rjmp	.+52     	; 0xd930 <update_player+0x170>
    d8fc:	60 91 aa 0d 	lds	r22, 0x0DAA
    d900:	70 91 ab 0d 	lds	r23, 0x0DAB
    d904:	80 e0       	ldi	r24, 0x00	; 0
    d906:	90 e0       	ldi	r25, 0x00	; 0
    d908:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    d90c:	9b 01       	movw	r18, r22
    d90e:	ac 01       	movw	r20, r24
    d910:	60 91 c8 0d 	lds	r22, 0x0DC8
    d914:	70 91 c9 0d 	lds	r23, 0x0DC9
    d918:	80 91 ca 0d 	lds	r24, 0x0DCA
    d91c:	90 91 cb 0d 	lds	r25, 0x0DCB
    d920:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    d924:	18 16       	cp	r1, r24
    d926:	24 f4       	brge	.+8      	; 0xd930 <update_player+0x170>
		{
			game.player.shared.vx = 0;
    d928:	10 92 d1 0d 	sts	0x0DD1, r1
    d92c:	10 92 d0 0d 	sts	0x0DD0, r1
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    d930:	14 ff       	sbrs	r17, 4
    d932:	1b c0       	rjmp	.+54     	; 0xd96a <update_player+0x1aa>
    d934:	20 e0       	ldi	r18, 0x00	; 0
    d936:	30 e0       	ldi	r19, 0x00	; 0
    d938:	a9 01       	movw	r20, r18
    d93a:	60 91 cc 0d 	lds	r22, 0x0DCC
    d93e:	70 91 cd 0d 	lds	r23, 0x0DCD
    d942:	80 91 ce 0d 	lds	r24, 0x0DCE
    d946:	90 91 cf 0d 	lds	r25, 0x0DCF
    d94a:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    d94e:	18 16       	cp	r1, r24
    d950:	64 f4       	brge	.+24     	; 0xd96a <update_player+0x1aa>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    d952:	80 e0       	ldi	r24, 0x00	; 0
    d954:	90 e0       	ldi	r25, 0x00	; 0
    d956:	a0 e7       	ldi	r26, 0x70	; 112
    d958:	b2 ec       	ldi	r27, 0xC2	; 194
    d95a:	80 93 c4 0d 	sts	0x0DC4, r24
    d95e:	90 93 c5 0d 	sts	0x0DC5, r25
    d962:	a0 93 c6 0d 	sts	0x0DC6, r26
    d966:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    d96a:	80 e3       	ldi	r24, 0x30	; 48
    d96c:	9e e0       	ldi	r25, 0x0E	; 14
    d96e:	0d c2       	rjmp	.+1050   	; 0xdd8a <update_player+0x5ca>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    d970:	81 2f       	mov	r24, r17
    d972:	8a 70       	andi	r24, 0x0A	; 10
    d974:	09 f4       	brne	.+2      	; 0xd978 <update_player+0x1b8>
    d976:	ec c0       	rjmp	.+472    	; 0xdb50 <update_player+0x390>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    d978:	40 91 d8 0d 	lds	r20, 0x0DD8
    d97c:	60 91 d7 0d 	lds	r22, 0x0DD7
    d980:	84 ec       	ldi	r24, 0xC4	; 196
    d982:	9d e0       	ldi	r25, 0x0D	; 13
    d984:	0e 94 a8 59 	call	0xb350	; 0xb350 <on_solid_ground>
    d988:	81 11       	cpse	r24, r1
    d98a:	07 c0       	rjmp	.+14     	; 0xd99a <update_player+0x1da>
		{
			game.player.shared.gravity = GRAVITY;
    d98c:	8f ef       	ldi	r24, 0xFF	; 255
    d98e:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.flags = JUMPING;
    d992:	81 e0       	ldi	r24, 0x01	; 1
    d994:	80 93 d4 0d 	sts	0x0DD4, r24
    d998:	de c1       	rjmp	.+956    	; 0xdd56 <update_player+0x596>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    d99a:	10 91 9e 0f 	lds	r17, 0x0F9E
    d99e:	15 ff       	sbrs	r17, 5
    d9a0:	46 c0       	rjmp	.+140    	; 0xda2e <update_player+0x26e>
			{
				game.player.shared.y += 16;
    d9a2:	20 e0       	ldi	r18, 0x00	; 0
    d9a4:	30 e0       	ldi	r19, 0x00	; 0
    d9a6:	40 e8       	ldi	r20, 0x80	; 128
    d9a8:	51 e4       	ldi	r21, 0x41	; 65
    d9aa:	60 91 cc 0d 	lds	r22, 0x0DCC
    d9ae:	70 91 cd 0d 	lds	r23, 0x0DCD
    d9b2:	80 91 ce 0d 	lds	r24, 0x0DCE
    d9b6:	90 91 cf 0d 	lds	r25, 0x0DCF
    d9ba:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    d9be:	60 93 cc 0d 	sts	0x0DCC, r22
    d9c2:	70 93 cd 0d 	sts	0x0DCD, r23
    d9c6:	80 93 ce 0d 	sts	0x0DCE, r24
    d9ca:	90 93 cf 0d 	sts	0x0DCF, r25
				if(game.player.direction == D_RIGHT)
    d9ce:	80 91 d6 0d 	lds	r24, 0x0DD6
    d9d2:	81 30       	cpi	r24, 0x01	; 1
    d9d4:	b1 f4       	brne	.+44     	; 0xda02 <update_player+0x242>
				{
					game.player.shared.x -= 8;
    d9d6:	20 e0       	ldi	r18, 0x00	; 0
    d9d8:	30 e0       	ldi	r19, 0x00	; 0
    d9da:	40 e0       	ldi	r20, 0x00	; 0
    d9dc:	51 e4       	ldi	r21, 0x41	; 65
    d9de:	60 91 c8 0d 	lds	r22, 0x0DC8
    d9e2:	70 91 c9 0d 	lds	r23, 0x0DC9
    d9e6:	80 91 ca 0d 	lds	r24, 0x0DCA
    d9ea:	90 91 cb 0d 	lds	r25, 0x0DCB
    d9ee:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    d9f2:	60 93 c8 0d 	sts	0x0DC8, r22
    d9f6:	70 93 c9 0d 	sts	0x0DC9, r23
    d9fa:	80 93 ca 0d 	sts	0x0DCA, r24
    d9fe:	90 93 cb 0d 	sts	0x0DCB, r25
				}
				game.player.shared.vx = 0;
    da02:	10 92 d1 0d 	sts	0x0DD1, r1
    da06:	10 92 d0 0d 	sts	0x0DD0, r1
				game.player.flags = PRONE;
    da0a:	84 e0       	ldi	r24, 0x04	; 4
    da0c:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.width = 3;
    da10:	83 e0       	ldi	r24, 0x03	; 3
    da12:	80 93 d7 0d 	sts	0x0DD7, r24
				game.player.height = 1;
    da16:	81 e0       	ldi	r24, 0x01	; 1
    da18:	80 93 d8 0d 	sts	0x0DD8, r24
				clear_sprites(3, 3);
    da1c:	63 e0       	ldi	r22, 0x03	; 3
    da1e:	83 e0       	ldi	r24, 0x03	; 3
    da20:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    da24:	40 91 ae 0f 	lds	r20, 0x0FAE
    da28:	80 e4       	ldi	r24, 0x40	; 64
    da2a:	9e e0       	ldi	r25, 0x0E	; 14
    da2c:	6e c0       	rjmp	.+220    	; 0xdb0a <update_player+0x34a>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    da2e:	17 ff       	sbrs	r17, 7
    da30:	38 c0       	rjmp	.+112    	; 0xdaa2 <update_player+0x2e2>
    da32:	20 e0       	ldi	r18, 0x00	; 0
    da34:	30 e0       	ldi	r19, 0x00	; 0
    da36:	40 e0       	ldi	r20, 0x00	; 0
    da38:	5e e3       	ldi	r21, 0x3E	; 62
    da3a:	60 91 c8 0d 	lds	r22, 0x0DC8
    da3e:	70 91 c9 0d 	lds	r23, 0x0DC9
    da42:	80 91 ca 0d 	lds	r24, 0x0DCA
    da46:	90 91 cb 0d 	lds	r25, 0x0DCB
    da4a:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    da4e:	20 e0       	ldi	r18, 0x00	; 0
    da50:	30 e0       	ldi	r19, 0x00	; 0
    da52:	40 e0       	ldi	r20, 0x00	; 0
    da54:	50 e4       	ldi	r21, 0x40	; 64
    da56:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    da5a:	6b 01       	movw	r12, r22
    da5c:	7c 01       	movw	r14, r24
    da5e:	80 91 b8 0d 	lds	r24, 0x0DB8
    da62:	68 2f       	mov	r22, r24
    da64:	70 e0       	ldi	r23, 0x00	; 0
    da66:	80 e0       	ldi	r24, 0x00	; 0
    da68:	90 e0       	ldi	r25, 0x00	; 0
    da6a:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    da6e:	9b 01       	movw	r18, r22
    da70:	ac 01       	movw	r20, r24
    da72:	c7 01       	movw	r24, r14
    da74:	b6 01       	movw	r22, r12
    da76:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    da7a:	87 ff       	sbrs	r24, 7
    da7c:	12 c0       	rjmp	.+36     	; 0xdaa2 <update_player+0x2e2>
			{
				game.player.shared.vx = RUN_SPEED;
    da7e:	8c e3       	ldi	r24, 0x3C	; 60
    da80:	90 e0       	ldi	r25, 0x00	; 0
    da82:	90 93 d1 0d 	sts	0x0DD1, r25
    da86:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    da8a:	82 e0       	ldi	r24, 0x02	; 2
    da8c:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_RIGHT;
    da90:	81 e0       	ldi	r24, 0x01	; 1
    da92:	80 93 d6 0d 	sts	0x0DD6, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    da96:	80 e3       	ldi	r24, 0x30	; 48
    da98:	9e e0       	ldi	r25, 0x0E	; 14
    da9a:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    da9e:	40 e0       	ldi	r20, 0x00	; 0
    daa0:	38 c0       	rjmp	.+112    	; 0xdb12 <update_player+0x352>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    daa2:	16 ff       	sbrs	r17, 6
    daa4:	27 c0       	rjmp	.+78     	; 0xdaf4 <update_player+0x334>
    daa6:	60 91 aa 0d 	lds	r22, 0x0DAA
    daaa:	70 91 ab 0d 	lds	r23, 0x0DAB
    daae:	80 e0       	ldi	r24, 0x00	; 0
    dab0:	90 e0       	ldi	r25, 0x00	; 0
    dab2:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    dab6:	9b 01       	movw	r18, r22
    dab8:	ac 01       	movw	r20, r24
    daba:	60 91 c8 0d 	lds	r22, 0x0DC8
    dabe:	70 91 c9 0d 	lds	r23, 0x0DC9
    dac2:	80 91 ca 0d 	lds	r24, 0x0DCA
    dac6:	90 91 cb 0d 	lds	r25, 0x0DCB
    daca:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    dace:	18 16       	cp	r1, r24
    dad0:	8c f4       	brge	.+34     	; 0xdaf4 <update_player+0x334>
			{
				game.player.shared.vx = -RUN_SPEED;
    dad2:	84 ec       	ldi	r24, 0xC4	; 196
    dad4:	9f ef       	ldi	r25, 0xFF	; 255
    dad6:	90 93 d1 0d 	sts	0x0DD1, r25
    dada:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    dade:	82 e0       	ldi	r24, 0x02	; 2
    dae0:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_LEFT;
    dae4:	10 92 d6 0d 	sts	0x0DD6, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    dae8:	80 e3       	ldi	r24, 0x30	; 48
    daea:	9e e0       	ldi	r25, 0x0E	; 14
    daec:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    daf0:	41 e0       	ldi	r20, 0x01	; 1
    daf2:	0f c0       	rjmp	.+30     	; 0xdb12 <update_player+0x352>
			}
			else
			{
				game.player.flags = IDLE;
    daf4:	88 e0       	ldi	r24, 0x08	; 8
    daf6:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.shared.vx = 0;
    dafa:	10 92 d1 0d 	sts	0x0DD1, r1
    dafe:	10 92 d0 0d 	sts	0x0DD0, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    db02:	40 91 ae 0f 	lds	r20, 0x0FAE
    db06:	88 e2       	ldi	r24, 0x28	; 40
    db08:	9e e0       	ldi	r25, 0x0E	; 14
    db0a:	49 83       	std	Y+1, r20	; 0x01
    db0c:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    db10:	49 81       	ldd	r20, Y+1	; 0x01
    db12:	bc 01       	movw	r22, r24
    db14:	80 e0       	ldi	r24, 0x00	; 0
    db16:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    db1a:	80 91 9a 0f 	lds	r24, 0x0F9A
    db1e:	80 ff       	sbrs	r24, 0
    db20:	44 c1       	rjmp	.+648    	; 0xddaa <update_player+0x5ea>
    db22:	80 91 d4 0d 	lds	r24, 0x0DD4
    db26:	82 fd       	sbrc	r24, 2
    db28:	40 c1       	rjmp	.+640    	; 0xddaa <update_player+0x5ea>
			{
				game.player.shared.vy = -JUMP_SPEED;
    db2a:	80 e0       	ldi	r24, 0x00	; 0
    db2c:	90 e0       	ldi	r25, 0x00	; 0
    db2e:	a6 e1       	ldi	r26, 0x16	; 22
    db30:	b3 ec       	ldi	r27, 0xC3	; 195
    db32:	80 93 c4 0d 	sts	0x0DC4, r24
    db36:	90 93 c5 0d 	sts	0x0DC5, r25
    db3a:	a0 93 c6 0d 	sts	0x0DC6, r26
    db3e:	b0 93 c7 0d 	sts	0x0DC7, r27
				game.player.shared.gravity = GRAVITY;
    db42:	8f ef       	ldi	r24, 0xFF	; 255
    db44:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = JUMPING;
    db48:	81 e0       	ldi	r24, 0x01	; 1
    db4a:	80 93 d4 0d 	sts	0x0DD4, r24
    db4e:	fd c0       	rjmp	.+506    	; 0xdd4a <update_player+0x58a>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    db50:	10 ff       	sbrs	r17, 0
    db52:	77 c0       	rjmp	.+238    	; 0xdc42 <update_player+0x482>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    db54:	10 91 9e 0f 	lds	r17, 0x0F9E
    db58:	17 ff       	sbrs	r17, 7
    db5a:	35 c0       	rjmp	.+106    	; 0xdbc6 <update_player+0x406>
    db5c:	20 e0       	ldi	r18, 0x00	; 0
    db5e:	30 e0       	ldi	r19, 0x00	; 0
    db60:	40 e0       	ldi	r20, 0x00	; 0
    db62:	5e e3       	ldi	r21, 0x3E	; 62
    db64:	60 91 c8 0d 	lds	r22, 0x0DC8
    db68:	70 91 c9 0d 	lds	r23, 0x0DC9
    db6c:	80 91 ca 0d 	lds	r24, 0x0DCA
    db70:	90 91 cb 0d 	lds	r25, 0x0DCB
    db74:	0e 94 79 72 	call	0xe4f2	; 0xe4f2 <__mulsf3>
    db78:	20 e0       	ldi	r18, 0x00	; 0
    db7a:	30 e0       	ldi	r19, 0x00	; 0
    db7c:	40 e0       	ldi	r20, 0x00	; 0
    db7e:	50 e4       	ldi	r21, 0x40	; 64
    db80:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    db84:	6b 01       	movw	r12, r22
    db86:	7c 01       	movw	r14, r24
    db88:	80 91 b8 0d 	lds	r24, 0x0DB8
    db8c:	68 2f       	mov	r22, r24
    db8e:	70 e0       	ldi	r23, 0x00	; 0
    db90:	80 e0       	ldi	r24, 0x00	; 0
    db92:	90 e0       	ldi	r25, 0x00	; 0
    db94:	0e 94 c5 71 	call	0xe38a	; 0xe38a <__floatsisf>
    db98:	9b 01       	movw	r18, r22
    db9a:	ac 01       	movw	r20, r24
    db9c:	c7 01       	movw	r24, r14
    db9e:	b6 01       	movw	r22, r12
    dba0:	0e 94 93 71 	call	0xe326	; 0xe326 <__cmpsf2>
    dba4:	87 ff       	sbrs	r24, 7
    dba6:	0f c0       	rjmp	.+30     	; 0xdbc6 <update_player+0x406>
		{
			game.player.shared.vx = RUN_SPEED;
    dba8:	8c e3       	ldi	r24, 0x3C	; 60
    dbaa:	90 e0       	ldi	r25, 0x00	; 0
    dbac:	90 93 d1 0d 	sts	0x0DD1, r25
    dbb0:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_RIGHT;
    dbb4:	81 e0       	ldi	r24, 0x01	; 1
    dbb6:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    dbba:	88 e3       	ldi	r24, 0x38	; 56
    dbbc:	9e e0       	ldi	r25, 0x0E	; 14
    dbbe:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dbc2:	40 e0       	ldi	r20, 0x00	; 0
    dbc4:	32 c0       	rjmp	.+100    	; 0xdc2a <update_player+0x46a>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    dbc6:	16 ff       	sbrs	r17, 6
    dbc8:	24 c0       	rjmp	.+72     	; 0xdc12 <update_player+0x452>
    dbca:	60 91 aa 0d 	lds	r22, 0x0DAA
    dbce:	70 91 ab 0d 	lds	r23, 0x0DAB
    dbd2:	80 e0       	ldi	r24, 0x00	; 0
    dbd4:	90 e0       	ldi	r25, 0x00	; 0
    dbd6:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    dbda:	9b 01       	movw	r18, r22
    dbdc:	ac 01       	movw	r20, r24
    dbde:	60 91 c8 0d 	lds	r22, 0x0DC8
    dbe2:	70 91 c9 0d 	lds	r23, 0x0DC9
    dbe6:	80 91 ca 0d 	lds	r24, 0x0DCA
    dbea:	90 91 cb 0d 	lds	r25, 0x0DCB
    dbee:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    dbf2:	18 16       	cp	r1, r24
    dbf4:	74 f4       	brge	.+28     	; 0xdc12 <update_player+0x452>
		{
			game.player.shared.vx = -RUN_SPEED;
    dbf6:	84 ec       	ldi	r24, 0xC4	; 196
    dbf8:	9f ef       	ldi	r25, 0xFF	; 255
    dbfa:	90 93 d1 0d 	sts	0x0DD1, r25
    dbfe:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_LEFT;
    dc02:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    dc06:	88 e3       	ldi	r24, 0x38	; 56
    dc08:	9e e0       	ldi	r25, 0x0E	; 14
    dc0a:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dc0e:	41 e0       	ldi	r20, 0x01	; 1
    dc10:	0c c0       	rjmp	.+24     	; 0xdc2a <update_player+0x46a>
		}
		else
		{
			game.player.shared.vx = 0;
    dc12:	10 92 d1 0d 	sts	0x0DD1, r1
    dc16:	10 92 d0 0d 	sts	0x0DD0, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    dc1a:	40 91 ae 0f 	lds	r20, 0x0FAE
    dc1e:	88 e3       	ldi	r24, 0x38	; 56
    dc20:	9e e0       	ldi	r25, 0x0E	; 14
    dc22:	49 83       	std	Y+1, r20	; 0x01
    dc24:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dc28:	49 81       	ldd	r20, Y+1	; 0x01
    dc2a:	bc 01       	movw	r22, r24
    dc2c:	80 e0       	ldi	r24, 0x00	; 0
    dc2e:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    dc32:	80 91 d2 0d 	lds	r24, 0x0DD2
    dc36:	81 11       	cpse	r24, r1
    dc38:	b8 c0       	rjmp	.+368    	; 0xddaa <update_player+0x5ea>
		{
			game.player.flags = IDLE;
    dc3a:	88 e0       	ldi	r24, 0x08	; 8
    dc3c:	80 93 d4 0d 	sts	0x0DD4, r24
    dc40:	b4 c0       	rjmp	.+360    	; 0xddaa <update_player+0x5ea>
		}
	}
	else if (game.player.flags & PRONE)
    dc42:	12 ff       	sbrs	r17, 2
    dc44:	b2 c0       	rjmp	.+356    	; 0xddaa <update_player+0x5ea>
	{
		if (game.joypadState.pressed & BTN_UP)
    dc46:	80 91 9a 0f 	lds	r24, 0x0F9A
    dc4a:	84 ff       	sbrs	r24, 4
    dc4c:	3a c0       	rjmp	.+116    	; 0xdcc2 <update_player+0x502>
		{
			game.player.flags = IDLE;	
    dc4e:	88 e0       	ldi	r24, 0x08	; 8
    dc50:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    dc54:	20 e0       	ldi	r18, 0x00	; 0
    dc56:	30 e0       	ldi	r19, 0x00	; 0
    dc58:	40 e8       	ldi	r20, 0x80	; 128
    dc5a:	51 e4       	ldi	r21, 0x41	; 65
    dc5c:	60 91 cc 0d 	lds	r22, 0x0DCC
    dc60:	70 91 cd 0d 	lds	r23, 0x0DCD
    dc64:	80 91 ce 0d 	lds	r24, 0x0DCE
    dc68:	90 91 cf 0d 	lds	r25, 0x0DCF
    dc6c:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    dc70:	60 93 cc 0d 	sts	0x0DCC, r22
    dc74:	70 93 cd 0d 	sts	0x0DCD, r23
    dc78:	80 93 ce 0d 	sts	0x0DCE, r24
    dc7c:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    dc80:	80 91 d6 0d 	lds	r24, 0x0DD6
    dc84:	81 30       	cpi	r24, 0x01	; 1
    dc86:	b1 f4       	brne	.+44     	; 0xdcb4 <update_player+0x4f4>
			{
				game.player.shared.x += 8;
    dc88:	20 e0       	ldi	r18, 0x00	; 0
    dc8a:	30 e0       	ldi	r19, 0x00	; 0
    dc8c:	40 e0       	ldi	r20, 0x00	; 0
    dc8e:	51 e4       	ldi	r21, 0x41	; 65
    dc90:	60 91 c8 0d 	lds	r22, 0x0DC8
    dc94:	70 91 c9 0d 	lds	r23, 0x0DC9
    dc98:	80 91 ca 0d 	lds	r24, 0x0DCA
    dc9c:	90 91 cb 0d 	lds	r25, 0x0DCB
    dca0:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    dca4:	60 93 c8 0d 	sts	0x0DC8, r22
    dca8:	70 93 c9 0d 	sts	0x0DC9, r23
    dcac:	80 93 ca 0d 	sts	0x0DCA, r24
    dcb0:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.width = 2;
    dcb4:	82 e0       	ldi	r24, 0x02	; 2
    dcb6:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    dcba:	83 e0       	ldi	r24, 0x03	; 3
    dcbc:	80 93 d8 0d 	sts	0x0DD8, r24
    dcc0:	74 c0       	rjmp	.+232    	; 0xddaa <update_player+0x5ea>
		}
		else if (game.joypadState.pressed & BTN_B)
    dcc2:	80 ff       	sbrs	r24, 0
    dcc4:	51 c0       	rjmp	.+162    	; 0xdd68 <update_player+0x5a8>
		{
			game.player.flags = JUMPING;
    dcc6:	81 e0       	ldi	r24, 0x01	; 1
    dcc8:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    dccc:	20 e0       	ldi	r18, 0x00	; 0
    dcce:	30 e0       	ldi	r19, 0x00	; 0
    dcd0:	40 e8       	ldi	r20, 0x80	; 128
    dcd2:	51 e4       	ldi	r21, 0x41	; 65
    dcd4:	60 91 cc 0d 	lds	r22, 0x0DCC
    dcd8:	70 91 cd 0d 	lds	r23, 0x0DCD
    dcdc:	80 91 ce 0d 	lds	r24, 0x0DCE
    dce0:	90 91 cf 0d 	lds	r25, 0x0DCF
    dce4:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    dce8:	60 93 cc 0d 	sts	0x0DCC, r22
    dcec:	70 93 cd 0d 	sts	0x0DCD, r23
    dcf0:	80 93 ce 0d 	sts	0x0DCE, r24
    dcf4:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    dcf8:	80 91 d6 0d 	lds	r24, 0x0DD6
    dcfc:	81 30       	cpi	r24, 0x01	; 1
    dcfe:	b1 f4       	brne	.+44     	; 0xdd2c <update_player+0x56c>
			{
				game.player.shared.x += 8;
    dd00:	20 e0       	ldi	r18, 0x00	; 0
    dd02:	30 e0       	ldi	r19, 0x00	; 0
    dd04:	40 e0       	ldi	r20, 0x00	; 0
    dd06:	51 e4       	ldi	r21, 0x41	; 65
    dd08:	60 91 c8 0d 	lds	r22, 0x0DC8
    dd0c:	70 91 c9 0d 	lds	r23, 0x0DC9
    dd10:	80 91 ca 0d 	lds	r24, 0x0DCA
    dd14:	90 91 cb 0d 	lds	r25, 0x0DCB
    dd18:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
    dd1c:	60 93 c8 0d 	sts	0x0DC8, r22
    dd20:	70 93 c9 0d 	sts	0x0DC9, r23
    dd24:	80 93 ca 0d 	sts	0x0DCA, r24
    dd28:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    dd2c:	80 e0       	ldi	r24, 0x00	; 0
    dd2e:	90 e0       	ldi	r25, 0x00	; 0
    dd30:	a6 e1       	ldi	r26, 0x16	; 22
    dd32:	b3 ec       	ldi	r27, 0xC3	; 195
    dd34:	80 93 c4 0d 	sts	0x0DC4, r24
    dd38:	90 93 c5 0d 	sts	0x0DC5, r25
    dd3c:	a0 93 c6 0d 	sts	0x0DC6, r26
    dd40:	b0 93 c7 0d 	sts	0x0DC7, r27
			game.player.shared.gravity = GRAVITY;
    dd44:	8f ef       	ldi	r24, 0xFF	; 255
    dd46:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.width = 2;
    dd4a:	82 e0       	ldi	r24, 0x02	; 2
    dd4c:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    dd50:	83 e0       	ldi	r24, 0x03	; 3
    dd52:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    dd56:	40 91 ae 0f 	lds	r20, 0x0FAE
    dd5a:	88 e3       	ldi	r24, 0x38	; 56
    dd5c:	9e e0       	ldi	r25, 0x0E	; 14
    dd5e:	49 83       	std	Y+1, r20	; 0x01
    dd60:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dd64:	49 81       	ldd	r20, Y+1	; 0x01
    dd66:	14 c0       	rjmp	.+40     	; 0xdd90 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    dd68:	86 ff       	sbrs	r24, 6
    dd6a:	08 c0       	rjmp	.+16     	; 0xdd7c <update_player+0x5bc>
		{
			game.player.direction = D_LEFT;
    dd6c:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    dd70:	80 e4       	ldi	r24, 0x40	; 64
    dd72:	9e e0       	ldi	r25, 0x0E	; 14
    dd74:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dd78:	41 e0       	ldi	r20, 0x01	; 1
    dd7a:	0a c0       	rjmp	.+20     	; 0xdd90 <update_player+0x5d0>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    dd7c:	87 ff       	sbrs	r24, 7
    dd7e:	15 c0       	rjmp	.+42     	; 0xddaa <update_player+0x5ea>
		{
			game.player.direction = D_RIGHT;
    dd80:	81 e0       	ldi	r24, 0x01	; 1
    dd82:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    dd86:	80 e4       	ldi	r24, 0x40	; 64
    dd88:	9e e0       	ldi	r25, 0x0E	; 14
    dd8a:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dd8e:	40 e0       	ldi	r20, 0x00	; 0
    dd90:	bc 01       	movw	r22, r24
    dd92:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    dd94:	0f 90       	pop	r0
    dd96:	df 91       	pop	r29
    dd98:	cf 91       	pop	r28
    dd9a:	1f 91       	pop	r17
    dd9c:	0f 91       	pop	r16
    dd9e:	ff 90       	pop	r15
    dda0:	ef 90       	pop	r14
    dda2:	df 90       	pop	r13
    dda4:	cf 90       	pop	r12
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    dda6:	0c 94 44 54 	jmp	0xa888	; 0xa888 <LBMapSprite>
		}
	}
}
    ddaa:	0f 90       	pop	r0
    ddac:	df 91       	pop	r29
    ddae:	cf 91       	pop	r28
    ddb0:	1f 91       	pop	r17
    ddb2:	0f 91       	pop	r16
    ddb4:	ff 90       	pop	r15
    ddb6:	ef 90       	pop	r14
    ddb8:	df 90       	pop	r13
    ddba:	cf 90       	pop	r12
    ddbc:	08 95       	ret

0000ddbe <update_level>:
		}
	}
}

void update_level()
{
    ddbe:	cf 92       	push	r12
    ddc0:	df 92       	push	r13
    ddc2:	ef 92       	push	r14
    ddc4:	ff 92       	push	r15
    ddc6:	0f 93       	push	r16
    ddc8:	1f 93       	push	r17
    ddca:	cf 93       	push	r28
    ddcc:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    ddce:	00 91 aa 0d 	lds	r16, 0x0DAA
    ddd2:	10 91 ab 0d 	lds	r17, 0x0DAB
    ddd6:	b8 01       	movw	r22, r16
    ddd8:	80 e0       	ldi	r24, 0x00	; 0
    ddda:	90 e0       	ldi	r25, 0x00	; 0
    dddc:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    dde0:	9b 01       	movw	r18, r22
    dde2:	ac 01       	movw	r20, r24
    dde4:	60 91 c8 0d 	lds	r22, 0x0DC8
    dde8:	70 91 c9 0d 	lds	r23, 0x0DC9
    ddec:	80 91 ca 0d 	lds	r24, 0x0DCA
    ddf0:	90 91 cb 0d 	lds	r25, 0x0DCB
    ddf4:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    ddf8:	6b 01       	movw	r12, r22
    ddfa:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    ddfc:	80 91 bc 0d 	lds	r24, 0x0DBC
    de00:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    de02:	8c 33       	cpi	r24, 0x3C	; 60
    de04:	19 f0       	breq	.+6      	; 0xde0c <update_level+0x4e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    de06:	80 93 bc 0d 	sts	0x0DBC, r24
    de0a:	0f c0       	rjmp	.+30     	; 0xde2a <update_level+0x6c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    de0c:	10 92 bc 0d 	sts	0x0DBC, r1
		if (game.time != 65535) game.time++;
    de10:	80 91 b0 0d 	lds	r24, 0x0DB0
    de14:	90 91 b1 0d 	lds	r25, 0x0DB1
    de18:	8f 3f       	cpi	r24, 0xFF	; 255
    de1a:	2f ef       	ldi	r18, 0xFF	; 255
    de1c:	92 07       	cpc	r25, r18
    de1e:	29 f0       	breq	.+10     	; 0xde2a <update_level+0x6c>
    de20:	01 96       	adiw	r24, 0x01	; 1
    de22:	90 93 b1 0d 	sts	0x0DB1, r25
    de26:	80 93 b0 0d 	sts	0x0DB0, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    de2a:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    de2e:	93 e0       	ldi	r25, 0x03	; 3
    de30:	16 95       	lsr	r17
    de32:	07 95       	ror	r16
    de34:	9a 95       	dec	r25
    de36:	e1 f7       	brne	.-8      	; 0xde30 <update_level+0x72>
    de38:	c0 91 b8 0d 	lds	r28, 0x0DB8
    de3c:	88 23       	and	r24, r24
    de3e:	51 f0       	breq	.+20     	; 0xde54 <update_level+0x96>
    de40:	2c 2f       	mov	r18, r28
    de42:	30 e0       	ldi	r19, 0x00	; 0
    de44:	c8 01       	movw	r24, r16
    de46:	4c 96       	adiw	r24, 0x1c	; 28
    de48:	82 17       	cp	r24, r18
    de4a:	93 07       	cpc	r25, r19
    de4c:	18 f4       	brcc	.+6      	; 0xde54 <update_level+0x96>
	{
		move_camera_x();
    de4e:	0e 94 42 59 	call	0xb284	; 0xb284 <move_camera_x>
    de52:	22 c0       	rjmp	.+68     	; 0xde98 <update_level+0xda>
	}
	else if (game.player.shared.vx > 0 &&
    de54:	80 91 d0 0d 	lds	r24, 0x0DD0
    de58:	90 91 d1 0d 	lds	r25, 0x0DD1
    de5c:	18 16       	cp	r1, r24
    de5e:	19 06       	cpc	r1, r25
    de60:	8c f4       	brge	.+34     	; 0xde84 <update_level+0xc6>
    de62:	20 e0       	ldi	r18, 0x00	; 0
    de64:	30 e0       	ldi	r19, 0x00	; 0
    de66:	40 ee       	ldi	r20, 0xE0	; 224
    de68:	52 e4       	ldi	r21, 0x42	; 66
    de6a:	c7 01       	movw	r24, r14
    de6c:	b6 01       	movw	r22, r12
    de6e:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    de72:	87 fd       	sbrc	r24, 7
    de74:	07 c0       	rjmp	.+14     	; 0xde84 <update_level+0xc6>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    de76:	2c 2f       	mov	r18, r28
    de78:	30 e0       	ldi	r19, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    de7a:	c8 01       	movw	r24, r16
    de7c:	4c 96       	adiw	r24, 0x1c	; 28
    de7e:	82 17       	cp	r24, r18
    de80:	93 07       	cpc	r25, r19
    de82:	28 f3       	brcs	.-54     	; 0xde4e <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    de84:	04 5e       	subi	r16, 0xE4	; 228
    de86:	1f 4f       	sbci	r17, 0xFF	; 255
    de88:	8c 2f       	mov	r24, r28
    de8a:	90 e0       	ldi	r25, 0x00	; 0
    de8c:	08 17       	cp	r16, r24
    de8e:	19 07       	cpc	r17, r25
    de90:	18 f0       	brcs	.+6      	; 0xde98 <update_level+0xda>
	{
		game.level_ended = 1;
    de92:	81 e0       	ldi	r24, 0x01	; 1
    de94:	80 93 c3 0d 	sts	0x0DC3, r24
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    de98:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    de9c:	81 11       	cpse	r24, r1
    de9e:	40 c0       	rjmp	.+128    	; 0xdf20 <update_level+0x162>
    dea0:	20 e0       	ldi	r18, 0x00	; 0
    dea2:	30 e0       	ldi	r19, 0x00	; 0
    dea4:	a9 01       	movw	r20, r18
    dea6:	60 91 c4 0d 	lds	r22, 0x0DC4
    deaa:	70 91 c5 0d 	lds	r23, 0x0DC5
    deae:	80 91 c6 0d 	lds	r24, 0x0DC6
    deb2:	90 91 c7 0d 	lds	r25, 0x0DC7
    deb6:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    deba:	18 16       	cp	r1, r24
    debc:	8c f5       	brge	.+98     	; 0xdf20 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    debe:	c0 91 ac 0d 	lds	r28, 0x0DAC
    dec2:	d0 91 ad 0d 	lds	r29, 0x0DAD
    dec6:	be 01       	movw	r22, r28
    dec8:	80 e0       	ldi	r24, 0x00	; 0
    deca:	90 e0       	ldi	r25, 0x00	; 0
    decc:	0e 94 c3 71 	call	0xe386	; 0xe386 <__floatunsisf>
    ded0:	9b 01       	movw	r18, r22
    ded2:	ac 01       	movw	r20, r24
    ded4:	60 91 cc 0d 	lds	r22, 0x0DCC
    ded8:	70 91 cd 0d 	lds	r23, 0x0DCD
    dedc:	80 91 ce 0d 	lds	r24, 0x0DCE
    dee0:	90 91 cf 0d 	lds	r25, 0x0DCF
    dee4:	0e 94 2e 71 	call	0xe25c	; 0xe25c <__subsf3>
    dee8:	20 e0       	ldi	r18, 0x00	; 0
    deea:	30 e0       	ldi	r19, 0x00	; 0
    deec:	40 ec       	ldi	r20, 0xC0	; 192
    deee:	51 e4       	ldi	r21, 0x41	; 65
    def0:	0e 94 2f 71 	call	0xe25e	; 0xe25e <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
    def4:	20 e0       	ldi	r18, 0x00	; 0
    def6:	30 e0       	ldi	r19, 0x00	; 0
    def8:	40 e4       	ldi	r20, 0x40	; 64
    defa:	53 e4       	ldi	r21, 0x43	; 67
    defc:	0e 94 75 72 	call	0xe4ea	; 0xe4ea <__gesf2>
    df00:	87 fd       	sbrc	r24, 7
    df02:	0e c0       	rjmp	.+28     	; 0xdf20 <update_level+0x162>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    df04:	83 e0       	ldi	r24, 0x03	; 3
    df06:	d6 95       	lsr	r29
    df08:	c7 95       	ror	r28
    df0a:	8a 95       	dec	r24
    df0c:	e1 f7       	brne	.-8      	; 0xdf06 <update_level+0x148>
    df0e:	6a 96       	adiw	r28, 0x1a	; 26
    df10:	80 91 b9 0d 	lds	r24, 0x0DB9
    df14:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (!is_space() && game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    df16:	c8 17       	cp	r28, r24
    df18:	d9 07       	cpc	r29, r25
    df1a:	10 f4       	brcc	.+4      	; 0xdf20 <update_level+0x162>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    df1c:	0e 94 5b 59 	call	0xb2b6	; 0xb2b6 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    df20:	21 e0       	ldi	r18, 0x01	; 1
    df22:	40 91 b5 0d 	lds	r20, 0x0DB5
    df26:	6f e1       	ldi	r22, 0x1F	; 31
    df28:	89 e0       	ldi	r24, 0x09	; 9
    df2a:	0e 94 8f 53 	call	0xa71e	; 0xa71e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    df2e:	40 91 ae 0d 	lds	r20, 0x0DAE
    df32:	50 91 af 0d 	lds	r21, 0x0DAF
    df36:	21 e0       	ldi	r18, 0x01	; 1
    df38:	6f e1       	ldi	r22, 0x1F	; 31
    df3a:	8b e1       	ldi	r24, 0x1B	; 27
    df3c:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    df40:	21 e0       	ldi	r18, 0x01	; 1
    df42:	40 91 d9 0d 	lds	r20, 0x0DD9
    df46:	6e e1       	ldi	r22, 0x1E	; 30
    df48:	89 e0       	ldi	r24, 0x09	; 9
    df4a:	0e 94 8f 53 	call	0xa71e	; 0xa71e <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    df4e:	40 91 b0 0d 	lds	r20, 0x0DB0
    df52:	50 91 b1 0d 	lds	r21, 0x0DB1
    df56:	21 e0       	ldi	r18, 0x01	; 1
    df58:	6e e1       	ldi	r22, 0x1E	; 30
    df5a:	8b e1       	ldi	r24, 0x1B	; 27
    df5c:	0e 94 c0 53 	call	0xa780	; 0xa780 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    df60:	80 91 c3 0d 	lds	r24, 0x0DC3
    df64:	88 23       	and	r24, r24
    df66:	09 f4       	brne	.+2      	; 0xdf6a <update_level+0x1ac>
    df68:	69 c0       	rjmp	.+210    	; 0xe03c <update_level+0x27e>
    df6a:	0e 94 13 55 	call	0xaa26	; 0xaa26 <is_space>
    df6e:	81 11       	cpse	r24, r1
    df70:	56 c0       	rjmp	.+172    	; 0xe01e <update_level+0x260>
    df72:	80 91 d4 0d 	lds	r24, 0x0DD4
    df76:	8e 70       	andi	r24, 0x0E	; 14
    df78:	09 f4       	brne	.+2      	; 0xdf7c <update_level+0x1be>
    df7a:	60 c0       	rjmp	.+192    	; 0xe03c <update_level+0x27e>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    df7c:	40 e0       	ldi	r20, 0x00	; 0
    df7e:	67 eb       	ldi	r22, 0xB7	; 183
    df80:	7d e2       	ldi	r23, 0x2D	; 45
    df82:	80 e0       	ldi	r24, 0x00	; 0
    df84:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
    df88:	61 e0       	ldi	r22, 0x01	; 1
    df8a:	8e e0       	ldi	r24, 0x0E	; 14
    df8c:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
		LBRotateSprites();
    df90:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
		map_ship();
    df94:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    df98:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    df9a:	c0 e0       	ldi	r28, 0x00	; 0
		clear_sprites(ENEMY_SHOT_SLOT, MAX_ENEMY_SHOTS);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    df9c:	81 e0       	ldi	r24, 0x01	; 1
    df9e:	90 e0       	ldi	r25, 0x00	; 0
    dfa0:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    dfa4:	8c 2f       	mov	r24, r28
    dfa6:	90 e0       	ldi	r25, 0x00	; 0
    dfa8:	88 3a       	cpi	r24, 0xA8	; 168
    dfaa:	91 05       	cpc	r25, r1
    dfac:	6c f0       	brlt	.+26     	; 0xdfc8 <update_level+0x20a>
			{
				clear_sprites(0, game.player.width*game.player.height);
    dfae:	80 91 d8 0d 	lds	r24, 0x0DD8
    dfb2:	60 91 d7 0d 	lds	r22, 0x0DD7
    dfb6:	86 9f       	mul	r24, r22
    dfb8:	60 2d       	mov	r22, r0
    dfba:	11 24       	eor	r1, r1
    dfbc:	80 e0       	ldi	r24, 0x00	; 0
    dfbe:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
				LBRotateSprites();
    dfc2:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
				ship_increment = -3;
    dfc6:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    dfc8:	80 e3       	ldi	r24, 0x30	; 48
    dfca:	9e e0       	ldi	r25, 0x0E	; 14
    dfcc:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <LBGetNextFrame>
    dfd0:	40 e0       	ldi	r20, 0x00	; 0
    dfd2:	bc 01       	movw	r22, r24
    dfd4:	86 e0       	ldi	r24, 0x06	; 6
    dfd6:	0e 94 44 54 	call	0xa888	; 0xa888 <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    dfda:	c7 01       	movw	r24, r14
    dfdc:	b6 01       	movw	r22, r12
    dfde:	0e 94 97 71 	call	0xe32e	; 0xe32e <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    dfe2:	02 e0       	ldi	r16, 0x02	; 2
    dfe4:	24 e0       	ldi	r18, 0x04	; 4
    dfe6:	4c 2f       	mov	r20, r28
    dfe8:	86 e0       	ldi	r24, 0x06	; 6
    dfea:	0e 94 96 54 	call	0xa92c	; 0xa92c <LBMoveSprite>
			ship_y += ship_increment;
    dfee:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    dff0:	99 f4       	brne	.+38     	; 0xe018 <update_level+0x25a>
			{
				clear_sprites(6, 8);
    dff2:	68 e0       	ldi	r22, 0x08	; 8
    dff4:	86 e0       	ldi	r24, 0x06	; 6
    dff6:	0e 94 6d 65 	call	0xcada	; 0xcada <clear_sprites>
				LBRotateSprites();
    dffa:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    dffe:	64 e6       	ldi	r22, 0x64	; 100
    e000:	70 e0       	ldi	r23, 0x00	; 0
    e002:	86 e2       	ldi	r24, 0x26	; 38
    e004:	9b e0       	ldi	r25, 0x0B	; 11
    e006:	0e 94 7c 6a 	call	0xd4f8	; 0xd4f8 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    e00a:	80 91 b7 0d 	lds	r24, 0x0DB7
    e00e:	00 e0       	ldi	r16, 0x00	; 0
    e010:	23 e0       	ldi	r18, 0x03	; 3
    e012:	4a e1       	ldi	r20, 0x1A	; 26
    e014:	6f ef       	ldi	r22, 0xFF	; 255
    e016:	0f c0       	rjmp	.+30     	; 0xe036 <update_level+0x278>
				break;
			}
			LBRotateSprites();
    e018:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
		}
    e01c:	bf cf       	rjmp	.-130    	; 0xdf9c <update_level+0x1de>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    e01e:	64 e6       	ldi	r22, 0x64	; 100
    e020:	70 e0       	ldi	r23, 0x00	; 0
    e022:	86 e2       	ldi	r24, 0x26	; 38
    e024:	9b e0       	ldi	r25, 0x0B	; 11
    e026:	0e 94 7c 6a 	call	0xd4f8	; 0xd4f8 <tally_score>
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    e02a:	80 91 b7 0d 	lds	r24, 0x0DB7
    e02e:	07 ec       	ldi	r16, 0xC7	; 199
    e030:	2d ef       	ldi	r18, 0xFD	; 253
    e032:	4c e1       	ldi	r20, 0x1C	; 28
    e034:	61 e0       	ldi	r22, 0x01	; 1
    e036:	8f 5f       	subi	r24, 0xFF	; 255
    e038:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <planet_transition>
	}
	
}
    e03c:	df 91       	pop	r29
    e03e:	cf 91       	pop	r28
    e040:	1f 91       	pop	r17
    e042:	0f 91       	pop	r16
    e044:	ff 90       	pop	r15
    e046:	ef 90       	pop	r14
    e048:	df 90       	pop	r13
    e04a:	cf 90       	pop	r12
    e04c:	08 95       	ret

0000e04e <update_pause>:
		}
	}
}

void update_pause()
{
    e04e:	ef 92       	push	r14
    e050:	ff 92       	push	r15
    e052:	0f 93       	push	r16
    e054:	1f 93       	push	r17
    e056:	cf 93       	push	r28
    e058:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    e05a:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    e05e:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.joypadState.pressed & BTN_START)
    e062:	80 91 9a 0f 	lds	r24, 0x0F9A
    e066:	83 ff       	sbrs	r24, 3
    e068:	5d c0       	rjmp	.+186    	; 0xe124 <update_pause+0xd6>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e06a:	06 95       	lsr	r16
    e06c:	06 95       	lsr	r16
    e06e:	06 95       	lsr	r16
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e070:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    e072:	c6 95       	lsr	r28
    e074:	c6 95       	lsr	r28
    e076:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.joypadState.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e078:	d0 e0       	ldi	r29, 0x00	; 0
    e07a:	c8 01       	movw	r24, r16
    e07c:	06 96       	adiw	r24, 0x06	; 6
    e07e:	2e e1       	ldi	r18, 0x1E	; 30
    e080:	e2 2e       	mov	r14, r18
    e082:	f1 2c       	mov	r15, r1
    e084:	b7 01       	movw	r22, r14
    e086:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    e08a:	9e 01       	movw	r18, r28
    e08c:	28 5f       	subi	r18, 0xF8	; 248
    e08e:	3f 4f       	sbci	r19, 0xFF	; 255
    e090:	49 ec       	ldi	r20, 0xC9	; 201
    e092:	51 e5       	ldi	r21, 0x51	; 81
    e094:	68 2f       	mov	r22, r24
    e096:	82 2f       	mov	r24, r18
    e098:	8f 71       	andi	r24, 0x1F	; 31
    e09a:	0e 94 dc 51 	call	0xa3b8	; 0xa3b8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    e09e:	c8 01       	movw	r24, r16
    e0a0:	09 96       	adiw	r24, 0x09	; 9
    e0a2:	b7 01       	movw	r22, r14
    e0a4:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    e0a8:	9e 01       	movw	r18, r28
    e0aa:	23 5f       	subi	r18, 0xF3	; 243
    e0ac:	3f 4f       	sbci	r19, 0xFF	; 255
    e0ae:	42 e3       	ldi	r20, 0x32	; 50
    e0b0:	5b e0       	ldi	r21, 0x0B	; 11
    e0b2:	68 2f       	mov	r22, r24
    e0b4:	82 2f       	mov	r24, r18
    e0b6:	8f 71       	andi	r24, 0x1F	; 31
    e0b8:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    e0bc:	c8 01       	movw	r24, r16
    e0be:	0c 96       	adiw	r24, 0x0c	; 12
    e0c0:	b7 01       	movw	r22, r14
    e0c2:	0e 94 14 71 	call	0xe228	; 0xe228 <__divmodhi4>
    e0c6:	2a 96       	adiw	r28, 0x0a	; 10
    e0c8:	48 e3       	ldi	r20, 0x38	; 56
    e0ca:	5b e0       	ldi	r21, 0x0B	; 11
    e0cc:	68 2f       	mov	r22, r24
    e0ce:	8c 2f       	mov	r24, r28
    e0d0:	8f 71       	andi	r24, 0x1F	; 31
    e0d2:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <LBPrint>
		//hide_sprites(0, MAX_EXTENDED_SPRITES);
		//LBRotateSprites();
		while (1)
		{
			WaitVsync(1);
    e0d6:	81 e0       	ldi	r24, 0x01	; 1
    e0d8:	90 e0       	ldi	r25, 0x00	; 0
    e0da:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
			LBGetJoyPadState(&game.joypadState, 0);
    e0de:	60 e0       	ldi	r22, 0x00	; 0
    e0e0:	8a e9       	ldi	r24, 0x9A	; 154
    e0e2:	9f e0       	ldi	r25, 0x0F	; 15
    e0e4:	0e 94 08 53 	call	0xa610	; 0xa610 <LBGetJoyPadState>
			if (game.joypadState.pressed & BTN_START)
    e0e8:	80 91 9a 0f 	lds	r24, 0x0F9A
    e0ec:	90 91 9b 0f 	lds	r25, 0x0F9B
    e0f0:	83 ff       	sbrs	r24, 3
    e0f2:	08 c0       	rjmp	.+16     	; 0xe104 <update_pause+0xb6>
				exit_game();
				break;
			}
		}
	}
}
    e0f4:	df 91       	pop	r29
    e0f6:	cf 91       	pop	r28
    e0f8:	1f 91       	pop	r17
    e0fa:	0f 91       	pop	r16
    e0fc:	ff 90       	pop	r15
    e0fe:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.joypadState, 0);
			if (game.joypadState.pressed & BTN_START)
			{
				render_camera_view();
    e100:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <render_camera_view>
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
    e104:	91 ff       	sbrs	r25, 1
    e106:	e7 cf       	rjmp	.-50     	; 0xe0d6 <update_pause+0x88>
			{
				tally_score((char*)strGameOver, 0);
    e108:	60 e0       	ldi	r22, 0x00	; 0
    e10a:	70 e0       	ldi	r23, 0x00	; 0
    e10c:	86 e1       	ldi	r24, 0x16	; 22
    e10e:	9b e0       	ldi	r25, 0x0B	; 11
    e110:	0e 94 7c 6a 	call	0xd4f8	; 0xd4f8 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e114:	df 91       	pop	r29
    e116:	cf 91       	pop	r28
    e118:	1f 91       	pop	r17
    e11a:	0f 91       	pop	r16
    e11c:	ff 90       	pop	r15
    e11e:	ef 90       	pop	r14
				break;
			}
			else if (game.joypadState.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e120:	0c 94 70 69 	jmp	0xd2e0	; 0xd2e0 <exit_game>
				break;
			}
		}
	}
}
    e124:	df 91       	pop	r29
    e126:	cf 91       	pop	r28
    e128:	1f 91       	pop	r17
    e12a:	0f 91       	pop	r16
    e12c:	ff 90       	pop	r15
    e12e:	ef 90       	pop	r14
    e130:	08 95       	ret

0000e132 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e132:	0e 94 f7 43 	call	0x87ee	; 0x87ee <GetTrueRandomSeed>
    e136:	0e 94 77 45 	call	0x8aee	; 0x8aee <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e13a:	8e e1       	ldi	r24, 0x1E	; 30
    e13c:	9d e1       	ldi	r25, 0x1D	; 29
    e13e:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <InitMusicPlayer>
	ClearVram();
    e142:	0e 94 7f 43 	call	0x86fe	; 0x86fe <ClearVram>
	SetMasterVolume(0x05);
    e146:	85 e0       	ldi	r24, 0x05	; 5
    e148:	0e 94 05 4a 	call	0x940a	; 0x940a <SetMasterVolume>
	SetTileTable(tiles_data);
    e14c:	86 ee       	ldi	r24, 0xE6	; 230
    e14e:	9d e2       	ldi	r25, 0x2D	; 45
    e150:	0e 94 9a 43 	call	0x8734	; 0x8734 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e154:	8d e9       	ldi	r24, 0x9D	; 157
    e156:	9e e1       	ldi	r25, 0x1E	; 30
    e158:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e15c:	86 e2       	ldi	r24, 0x26	; 38
    e15e:	91 e5       	ldi	r25, 0x51	; 81
    e160:	90 93 83 0d 	sts	0x0D83, r25
    e164:	80 93 82 0d 	sts	0x0D82, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e168:	0e 94 17 55 	call	0xaa2e	; 0xaa2e <init_default_high_scores>
	load_splash();
    e16c:	0e 94 40 68 	call	0xd080	; 0xd080 <load_splash>
	while (1)
	{
		WaitVsync(1);
    e170:	81 e0       	ldi	r24, 0x01	; 1
    e172:	90 e0       	ldi	r25, 0x00	; 0
    e174:	0e 94 45 52 	call	0xa48a	; 0xa48a <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    e178:	60 e0       	ldi	r22, 0x00	; 0
    e17a:	8a e9       	ldi	r24, 0x9A	; 154
    e17c:	9f e0       	ldi	r25, 0x0F	; 15
    e17e:	0e 94 08 53 	call	0xa610	; 0xa610 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e182:	80 91 b6 0d 	lds	r24, 0x0DB6
    e186:	82 30       	cpi	r24, 0x02	; 2
    e188:	a9 f4       	brne	.+42     	; 0xe1b4 <main+0x82>
		{
			update_level();
    e18a:	0e 94 df 6e 	call	0xddbe	; 0xddbe <update_level>
			update_player();
    e18e:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <update_player>
			update_shot();
    e192:	0e 94 89 5a 	call	0xb512	; 0xb512 <update_shot>
			update_enemies();
    e196:	0e 94 0e 62 	call	0xc41c	; 0xc41c <update_enemies>
			update_enemy_shots();
    e19a:	0e 94 53 62 	call	0xc4a6	; 0xc4a6 <update_enemy_shots>
			animate_player();
    e19e:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <animate_player>
			animate_shot();
    e1a2:	0e 94 d5 5e 	call	0xbdaa	; 0xbdaa <animate_shot>
			animate_enemies();
    e1a6:	0e 94 ed 62 	call	0xc5da	; 0xc5da <animate_enemies>
			animate_enemy_shots();
    e1aa:	0e 94 30 64 	call	0xc860	; 0xc860 <animate_enemy_shots>
			update_pause();
    e1ae:	0e 94 27 70 	call	0xe04e	; 0xe04e <update_pause>
    e1b2:	09 c0       	rjmp	.+18     	; 0xe1c6 <main+0x94>
		}
		else if (game.current_screen == SPLASH)
    e1b4:	81 11       	cpse	r24, r1
    e1b6:	03 c0       	rjmp	.+6      	; 0xe1be <main+0x8c>
		{
			update_splash();
    e1b8:	0e 94 7e 69 	call	0xd2fc	; 0xd2fc <update_splash>
    e1bc:	04 c0       	rjmp	.+8      	; 0xe1c6 <main+0x94>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e1be:	81 30       	cpi	r24, 0x01	; 1
    e1c0:	11 f4       	brne	.+4      	; 0xe1c6 <main+0x94>
		{
			update_high_scores();
    e1c2:	0e 94 c5 69 	call	0xd38a	; 0xd38a <update_high_scores>
			
		}
		LBRotateSprites();
    e1c6:	0e 94 d4 54 	call	0xa9a8	; 0xa9a8 <LBRotateSprites>
	}
    e1ca:	d2 cf       	rjmp	.-92     	; 0xe170 <main+0x3e>

0000e1cc <__udivmodqi4>:
    e1cc:	99 1b       	sub	r25, r25
    e1ce:	79 e0       	ldi	r23, 0x09	; 9
    e1d0:	04 c0       	rjmp	.+8      	; 0xe1da <__udivmodqi4_ep>

0000e1d2 <__udivmodqi4_loop>:
    e1d2:	99 1f       	adc	r25, r25
    e1d4:	96 17       	cp	r25, r22
    e1d6:	08 f0       	brcs	.+2      	; 0xe1da <__udivmodqi4_ep>
    e1d8:	96 1b       	sub	r25, r22

0000e1da <__udivmodqi4_ep>:
    e1da:	88 1f       	adc	r24, r24
    e1dc:	7a 95       	dec	r23
    e1de:	c9 f7       	brne	.-14     	; 0xe1d2 <__udivmodqi4_loop>
    e1e0:	80 95       	com	r24
    e1e2:	08 95       	ret

0000e1e4 <__divmodqi4>:
    e1e4:	87 fb       	bst	r24, 7
    e1e6:	08 2e       	mov	r0, r24
    e1e8:	06 26       	eor	r0, r22
    e1ea:	87 fd       	sbrc	r24, 7
    e1ec:	81 95       	neg	r24
    e1ee:	67 fd       	sbrc	r22, 7
    e1f0:	61 95       	neg	r22
    e1f2:	0e 94 e6 70 	call	0xe1cc	; 0xe1cc <__udivmodqi4>
    e1f6:	0e f4       	brtc	.+2      	; 0xe1fa <__divmodqi4_1>
    e1f8:	91 95       	neg	r25

0000e1fa <__divmodqi4_1>:
    e1fa:	07 fc       	sbrc	r0, 7
    e1fc:	81 95       	neg	r24

0000e1fe <__divmodqi4_exit>:
    e1fe:	08 95       	ret

0000e200 <__udivmodhi4>:
    e200:	aa 1b       	sub	r26, r26
    e202:	bb 1b       	sub	r27, r27
    e204:	51 e1       	ldi	r21, 0x11	; 17
    e206:	07 c0       	rjmp	.+14     	; 0xe216 <__udivmodhi4_ep>

0000e208 <__udivmodhi4_loop>:
    e208:	aa 1f       	adc	r26, r26
    e20a:	bb 1f       	adc	r27, r27
    e20c:	a6 17       	cp	r26, r22
    e20e:	b7 07       	cpc	r27, r23
    e210:	10 f0       	brcs	.+4      	; 0xe216 <__udivmodhi4_ep>
    e212:	a6 1b       	sub	r26, r22
    e214:	b7 0b       	sbc	r27, r23

0000e216 <__udivmodhi4_ep>:
    e216:	88 1f       	adc	r24, r24
    e218:	99 1f       	adc	r25, r25
    e21a:	5a 95       	dec	r21
    e21c:	a9 f7       	brne	.-22     	; 0xe208 <__udivmodhi4_loop>
    e21e:	80 95       	com	r24
    e220:	90 95       	com	r25
    e222:	bc 01       	movw	r22, r24
    e224:	cd 01       	movw	r24, r26
    e226:	08 95       	ret

0000e228 <__divmodhi4>:
    e228:	97 fb       	bst	r25, 7
    e22a:	07 2e       	mov	r0, r23
    e22c:	16 f4       	brtc	.+4      	; 0xe232 <__divmodhi4+0xa>
    e22e:	00 94       	com	r0
    e230:	07 d0       	rcall	.+14     	; 0xe240 <__divmodhi4_neg1>
    e232:	77 fd       	sbrc	r23, 7
    e234:	09 d0       	rcall	.+18     	; 0xe248 <__divmodhi4_neg2>
    e236:	0e 94 00 71 	call	0xe200	; 0xe200 <__udivmodhi4>
    e23a:	07 fc       	sbrc	r0, 7
    e23c:	05 d0       	rcall	.+10     	; 0xe248 <__divmodhi4_neg2>
    e23e:	3e f4       	brtc	.+14     	; 0xe24e <__divmodhi4_exit>

0000e240 <__divmodhi4_neg1>:
    e240:	90 95       	com	r25
    e242:	81 95       	neg	r24
    e244:	9f 4f       	sbci	r25, 0xFF	; 255
    e246:	08 95       	ret

0000e248 <__divmodhi4_neg2>:
    e248:	70 95       	com	r23
    e24a:	61 95       	neg	r22
    e24c:	7f 4f       	sbci	r23, 0xFF	; 255

0000e24e <__divmodhi4_exit>:
    e24e:	08 95       	ret

0000e250 <__tablejump2__>:
    e250:	ee 0f       	add	r30, r30
    e252:	ff 1f       	adc	r31, r31
    e254:	05 90       	lpm	r0, Z+
    e256:	f4 91       	lpm	r31, Z
    e258:	e0 2d       	mov	r30, r0
    e25a:	09 94       	ijmp

0000e25c <__subsf3>:
    e25c:	50 58       	subi	r21, 0x80	; 128

0000e25e <__addsf3>:
    e25e:	bb 27       	eor	r27, r27
    e260:	aa 27       	eor	r26, r26
    e262:	0e d0       	rcall	.+28     	; 0xe280 <__addsf3x>
    e264:	08 c1       	rjmp	.+528    	; 0xe476 <__fp_round>
    e266:	f9 d0       	rcall	.+498    	; 0xe45a <__fp_pscA>
    e268:	30 f0       	brcs	.+12     	; 0xe276 <__addsf3+0x18>
    e26a:	fe d0       	rcall	.+508    	; 0xe468 <__fp_pscB>
    e26c:	20 f0       	brcs	.+8      	; 0xe276 <__addsf3+0x18>
    e26e:	31 f4       	brne	.+12     	; 0xe27c <__addsf3+0x1e>
    e270:	9f 3f       	cpi	r25, 0xFF	; 255
    e272:	11 f4       	brne	.+4      	; 0xe278 <__addsf3+0x1a>
    e274:	1e f4       	brtc	.+6      	; 0xe27c <__addsf3+0x1e>
    e276:	ee c0       	rjmp	.+476    	; 0xe454 <__fp_nan>
    e278:	0e f4       	brtc	.+2      	; 0xe27c <__addsf3+0x1e>
    e27a:	e0 95       	com	r30
    e27c:	e7 fb       	bst	r30, 7
    e27e:	e4 c0       	rjmp	.+456    	; 0xe448 <__fp_inf>

0000e280 <__addsf3x>:
    e280:	e9 2f       	mov	r30, r25
    e282:	0a d1       	rcall	.+532    	; 0xe498 <__fp_split3>
    e284:	80 f3       	brcs	.-32     	; 0xe266 <__addsf3+0x8>
    e286:	ba 17       	cp	r27, r26
    e288:	62 07       	cpc	r22, r18
    e28a:	73 07       	cpc	r23, r19
    e28c:	84 07       	cpc	r24, r20
    e28e:	95 07       	cpc	r25, r21
    e290:	18 f0       	brcs	.+6      	; 0xe298 <__addsf3x+0x18>
    e292:	71 f4       	brne	.+28     	; 0xe2b0 <__addsf3x+0x30>
    e294:	9e f5       	brtc	.+102    	; 0xe2fc <__addsf3x+0x7c>
    e296:	22 c1       	rjmp	.+580    	; 0xe4dc <__fp_zero>
    e298:	0e f4       	brtc	.+2      	; 0xe29c <__addsf3x+0x1c>
    e29a:	e0 95       	com	r30
    e29c:	0b 2e       	mov	r0, r27
    e29e:	ba 2f       	mov	r27, r26
    e2a0:	a0 2d       	mov	r26, r0
    e2a2:	0b 01       	movw	r0, r22
    e2a4:	b9 01       	movw	r22, r18
    e2a6:	90 01       	movw	r18, r0
    e2a8:	0c 01       	movw	r0, r24
    e2aa:	ca 01       	movw	r24, r20
    e2ac:	a0 01       	movw	r20, r0
    e2ae:	11 24       	eor	r1, r1
    e2b0:	ff 27       	eor	r31, r31
    e2b2:	59 1b       	sub	r21, r25
    e2b4:	99 f0       	breq	.+38     	; 0xe2dc <__addsf3x+0x5c>
    e2b6:	59 3f       	cpi	r21, 0xF9	; 249
    e2b8:	50 f4       	brcc	.+20     	; 0xe2ce <__addsf3x+0x4e>
    e2ba:	50 3e       	cpi	r21, 0xE0	; 224
    e2bc:	68 f1       	brcs	.+90     	; 0xe318 <__addsf3x+0x98>
    e2be:	1a 16       	cp	r1, r26
    e2c0:	f0 40       	sbci	r31, 0x00	; 0
    e2c2:	a2 2f       	mov	r26, r18
    e2c4:	23 2f       	mov	r18, r19
    e2c6:	34 2f       	mov	r19, r20
    e2c8:	44 27       	eor	r20, r20
    e2ca:	58 5f       	subi	r21, 0xF8	; 248
    e2cc:	f3 cf       	rjmp	.-26     	; 0xe2b4 <__addsf3x+0x34>
    e2ce:	46 95       	lsr	r20
    e2d0:	37 95       	ror	r19
    e2d2:	27 95       	ror	r18
    e2d4:	a7 95       	ror	r26
    e2d6:	f0 40       	sbci	r31, 0x00	; 0
    e2d8:	53 95       	inc	r21
    e2da:	c9 f7       	brne	.-14     	; 0xe2ce <__addsf3x+0x4e>
    e2dc:	7e f4       	brtc	.+30     	; 0xe2fc <__addsf3x+0x7c>
    e2de:	1f 16       	cp	r1, r31
    e2e0:	ba 0b       	sbc	r27, r26
    e2e2:	62 0b       	sbc	r22, r18
    e2e4:	73 0b       	sbc	r23, r19
    e2e6:	84 0b       	sbc	r24, r20
    e2e8:	ba f0       	brmi	.+46     	; 0xe318 <__addsf3x+0x98>
    e2ea:	91 50       	subi	r25, 0x01	; 1
    e2ec:	a1 f0       	breq	.+40     	; 0xe316 <__addsf3x+0x96>
    e2ee:	ff 0f       	add	r31, r31
    e2f0:	bb 1f       	adc	r27, r27
    e2f2:	66 1f       	adc	r22, r22
    e2f4:	77 1f       	adc	r23, r23
    e2f6:	88 1f       	adc	r24, r24
    e2f8:	c2 f7       	brpl	.-16     	; 0xe2ea <__addsf3x+0x6a>
    e2fa:	0e c0       	rjmp	.+28     	; 0xe318 <__addsf3x+0x98>
    e2fc:	ba 0f       	add	r27, r26
    e2fe:	62 1f       	adc	r22, r18
    e300:	73 1f       	adc	r23, r19
    e302:	84 1f       	adc	r24, r20
    e304:	48 f4       	brcc	.+18     	; 0xe318 <__addsf3x+0x98>
    e306:	87 95       	ror	r24
    e308:	77 95       	ror	r23
    e30a:	67 95       	ror	r22
    e30c:	b7 95       	ror	r27
    e30e:	f7 95       	ror	r31
    e310:	9e 3f       	cpi	r25, 0xFE	; 254
    e312:	08 f0       	brcs	.+2      	; 0xe316 <__addsf3x+0x96>
    e314:	b3 cf       	rjmp	.-154    	; 0xe27c <__addsf3+0x1e>
    e316:	93 95       	inc	r25
    e318:	88 0f       	add	r24, r24
    e31a:	08 f0       	brcs	.+2      	; 0xe31e <__addsf3x+0x9e>
    e31c:	99 27       	eor	r25, r25
    e31e:	ee 0f       	add	r30, r30
    e320:	97 95       	ror	r25
    e322:	87 95       	ror	r24
    e324:	08 95       	ret

0000e326 <__cmpsf2>:
    e326:	6c d0       	rcall	.+216    	; 0xe400 <__fp_cmp>
    e328:	08 f4       	brcc	.+2      	; 0xe32c <__cmpsf2+0x6>
    e32a:	81 e0       	ldi	r24, 0x01	; 1
    e32c:	08 95       	ret

0000e32e <__fixunssfsi>:
    e32e:	bc d0       	rcall	.+376    	; 0xe4a8 <__fp_splitA>
    e330:	88 f0       	brcs	.+34     	; 0xe354 <__fixunssfsi+0x26>
    e332:	9f 57       	subi	r25, 0x7F	; 127
    e334:	90 f0       	brcs	.+36     	; 0xe35a <__fixunssfsi+0x2c>
    e336:	b9 2f       	mov	r27, r25
    e338:	99 27       	eor	r25, r25
    e33a:	b7 51       	subi	r27, 0x17	; 23
    e33c:	a0 f0       	brcs	.+40     	; 0xe366 <__fixunssfsi+0x38>
    e33e:	d1 f0       	breq	.+52     	; 0xe374 <__fixunssfsi+0x46>
    e340:	66 0f       	add	r22, r22
    e342:	77 1f       	adc	r23, r23
    e344:	88 1f       	adc	r24, r24
    e346:	99 1f       	adc	r25, r25
    e348:	1a f0       	brmi	.+6      	; 0xe350 <__fixunssfsi+0x22>
    e34a:	ba 95       	dec	r27
    e34c:	c9 f7       	brne	.-14     	; 0xe340 <__fixunssfsi+0x12>
    e34e:	12 c0       	rjmp	.+36     	; 0xe374 <__fixunssfsi+0x46>
    e350:	b1 30       	cpi	r27, 0x01	; 1
    e352:	81 f0       	breq	.+32     	; 0xe374 <__fixunssfsi+0x46>
    e354:	c3 d0       	rcall	.+390    	; 0xe4dc <__fp_zero>
    e356:	b1 e0       	ldi	r27, 0x01	; 1
    e358:	08 95       	ret
    e35a:	c0 c0       	rjmp	.+384    	; 0xe4dc <__fp_zero>
    e35c:	67 2f       	mov	r22, r23
    e35e:	78 2f       	mov	r23, r24
    e360:	88 27       	eor	r24, r24
    e362:	b8 5f       	subi	r27, 0xF8	; 248
    e364:	39 f0       	breq	.+14     	; 0xe374 <__fixunssfsi+0x46>
    e366:	b9 3f       	cpi	r27, 0xF9	; 249
    e368:	cc f3       	brlt	.-14     	; 0xe35c <__fixunssfsi+0x2e>
    e36a:	86 95       	lsr	r24
    e36c:	77 95       	ror	r23
    e36e:	67 95       	ror	r22
    e370:	b3 95       	inc	r27
    e372:	d9 f7       	brne	.-10     	; 0xe36a <__fixunssfsi+0x3c>
    e374:	3e f4       	brtc	.+14     	; 0xe384 <__fixunssfsi+0x56>
    e376:	90 95       	com	r25
    e378:	80 95       	com	r24
    e37a:	70 95       	com	r23
    e37c:	61 95       	neg	r22
    e37e:	7f 4f       	sbci	r23, 0xFF	; 255
    e380:	8f 4f       	sbci	r24, 0xFF	; 255
    e382:	9f 4f       	sbci	r25, 0xFF	; 255
    e384:	08 95       	ret

0000e386 <__floatunsisf>:
    e386:	e8 94       	clt
    e388:	09 c0       	rjmp	.+18     	; 0xe39c <__floatsisf+0x12>

0000e38a <__floatsisf>:
    e38a:	97 fb       	bst	r25, 7
    e38c:	3e f4       	brtc	.+14     	; 0xe39c <__floatsisf+0x12>
    e38e:	90 95       	com	r25
    e390:	80 95       	com	r24
    e392:	70 95       	com	r23
    e394:	61 95       	neg	r22
    e396:	7f 4f       	sbci	r23, 0xFF	; 255
    e398:	8f 4f       	sbci	r24, 0xFF	; 255
    e39a:	9f 4f       	sbci	r25, 0xFF	; 255
    e39c:	99 23       	and	r25, r25
    e39e:	a9 f0       	breq	.+42     	; 0xe3ca <__floatsisf+0x40>
    e3a0:	f9 2f       	mov	r31, r25
    e3a2:	96 e9       	ldi	r25, 0x96	; 150
    e3a4:	bb 27       	eor	r27, r27
    e3a6:	93 95       	inc	r25
    e3a8:	f6 95       	lsr	r31
    e3aa:	87 95       	ror	r24
    e3ac:	77 95       	ror	r23
    e3ae:	67 95       	ror	r22
    e3b0:	b7 95       	ror	r27
    e3b2:	f1 11       	cpse	r31, r1
    e3b4:	f8 cf       	rjmp	.-16     	; 0xe3a6 <__floatsisf+0x1c>
    e3b6:	fa f4       	brpl	.+62     	; 0xe3f6 <__floatsisf+0x6c>
    e3b8:	bb 0f       	add	r27, r27
    e3ba:	11 f4       	brne	.+4      	; 0xe3c0 <__floatsisf+0x36>
    e3bc:	60 ff       	sbrs	r22, 0
    e3be:	1b c0       	rjmp	.+54     	; 0xe3f6 <__floatsisf+0x6c>
    e3c0:	6f 5f       	subi	r22, 0xFF	; 255
    e3c2:	7f 4f       	sbci	r23, 0xFF	; 255
    e3c4:	8f 4f       	sbci	r24, 0xFF	; 255
    e3c6:	9f 4f       	sbci	r25, 0xFF	; 255
    e3c8:	16 c0       	rjmp	.+44     	; 0xe3f6 <__floatsisf+0x6c>
    e3ca:	88 23       	and	r24, r24
    e3cc:	11 f0       	breq	.+4      	; 0xe3d2 <__floatsisf+0x48>
    e3ce:	96 e9       	ldi	r25, 0x96	; 150
    e3d0:	11 c0       	rjmp	.+34     	; 0xe3f4 <__floatsisf+0x6a>
    e3d2:	77 23       	and	r23, r23
    e3d4:	21 f0       	breq	.+8      	; 0xe3de <__floatsisf+0x54>
    e3d6:	9e e8       	ldi	r25, 0x8E	; 142
    e3d8:	87 2f       	mov	r24, r23
    e3da:	76 2f       	mov	r23, r22
    e3dc:	05 c0       	rjmp	.+10     	; 0xe3e8 <__floatsisf+0x5e>
    e3de:	66 23       	and	r22, r22
    e3e0:	71 f0       	breq	.+28     	; 0xe3fe <__floatsisf+0x74>
    e3e2:	96 e8       	ldi	r25, 0x86	; 134
    e3e4:	86 2f       	mov	r24, r22
    e3e6:	70 e0       	ldi	r23, 0x00	; 0
    e3e8:	60 e0       	ldi	r22, 0x00	; 0
    e3ea:	2a f0       	brmi	.+10     	; 0xe3f6 <__floatsisf+0x6c>
    e3ec:	9a 95       	dec	r25
    e3ee:	66 0f       	add	r22, r22
    e3f0:	77 1f       	adc	r23, r23
    e3f2:	88 1f       	adc	r24, r24
    e3f4:	da f7       	brpl	.-10     	; 0xe3ec <__floatsisf+0x62>
    e3f6:	88 0f       	add	r24, r24
    e3f8:	96 95       	lsr	r25
    e3fa:	87 95       	ror	r24
    e3fc:	97 f9       	bld	r25, 7
    e3fe:	08 95       	ret

0000e400 <__fp_cmp>:
    e400:	99 0f       	add	r25, r25
    e402:	00 08       	sbc	r0, r0
    e404:	55 0f       	add	r21, r21
    e406:	aa 0b       	sbc	r26, r26
    e408:	e0 e8       	ldi	r30, 0x80	; 128
    e40a:	fe ef       	ldi	r31, 0xFE	; 254
    e40c:	16 16       	cp	r1, r22
    e40e:	17 06       	cpc	r1, r23
    e410:	e8 07       	cpc	r30, r24
    e412:	f9 07       	cpc	r31, r25
    e414:	c0 f0       	brcs	.+48     	; 0xe446 <__fp_cmp+0x46>
    e416:	12 16       	cp	r1, r18
    e418:	13 06       	cpc	r1, r19
    e41a:	e4 07       	cpc	r30, r20
    e41c:	f5 07       	cpc	r31, r21
    e41e:	98 f0       	brcs	.+38     	; 0xe446 <__fp_cmp+0x46>
    e420:	62 1b       	sub	r22, r18
    e422:	73 0b       	sbc	r23, r19
    e424:	84 0b       	sbc	r24, r20
    e426:	95 0b       	sbc	r25, r21
    e428:	39 f4       	brne	.+14     	; 0xe438 <__fp_cmp+0x38>
    e42a:	0a 26       	eor	r0, r26
    e42c:	61 f0       	breq	.+24     	; 0xe446 <__fp_cmp+0x46>
    e42e:	23 2b       	or	r18, r19
    e430:	24 2b       	or	r18, r20
    e432:	25 2b       	or	r18, r21
    e434:	21 f4       	brne	.+8      	; 0xe43e <__fp_cmp+0x3e>
    e436:	08 95       	ret
    e438:	0a 26       	eor	r0, r26
    e43a:	09 f4       	brne	.+2      	; 0xe43e <__fp_cmp+0x3e>
    e43c:	a1 40       	sbci	r26, 0x01	; 1
    e43e:	a6 95       	lsr	r26
    e440:	8f ef       	ldi	r24, 0xFF	; 255
    e442:	81 1d       	adc	r24, r1
    e444:	81 1d       	adc	r24, r1
    e446:	08 95       	ret

0000e448 <__fp_inf>:
    e448:	97 f9       	bld	r25, 7
    e44a:	9f 67       	ori	r25, 0x7F	; 127
    e44c:	80 e8       	ldi	r24, 0x80	; 128
    e44e:	70 e0       	ldi	r23, 0x00	; 0
    e450:	60 e0       	ldi	r22, 0x00	; 0
    e452:	08 95       	ret

0000e454 <__fp_nan>:
    e454:	9f ef       	ldi	r25, 0xFF	; 255
    e456:	80 ec       	ldi	r24, 0xC0	; 192
    e458:	08 95       	ret

0000e45a <__fp_pscA>:
    e45a:	00 24       	eor	r0, r0
    e45c:	0a 94       	dec	r0
    e45e:	16 16       	cp	r1, r22
    e460:	17 06       	cpc	r1, r23
    e462:	18 06       	cpc	r1, r24
    e464:	09 06       	cpc	r0, r25
    e466:	08 95       	ret

0000e468 <__fp_pscB>:
    e468:	00 24       	eor	r0, r0
    e46a:	0a 94       	dec	r0
    e46c:	12 16       	cp	r1, r18
    e46e:	13 06       	cpc	r1, r19
    e470:	14 06       	cpc	r1, r20
    e472:	05 06       	cpc	r0, r21
    e474:	08 95       	ret

0000e476 <__fp_round>:
    e476:	09 2e       	mov	r0, r25
    e478:	03 94       	inc	r0
    e47a:	00 0c       	add	r0, r0
    e47c:	11 f4       	brne	.+4      	; 0xe482 <__fp_round+0xc>
    e47e:	88 23       	and	r24, r24
    e480:	52 f0       	brmi	.+20     	; 0xe496 <__fp_round+0x20>
    e482:	bb 0f       	add	r27, r27
    e484:	40 f4       	brcc	.+16     	; 0xe496 <__fp_round+0x20>
    e486:	bf 2b       	or	r27, r31
    e488:	11 f4       	brne	.+4      	; 0xe48e <__fp_round+0x18>
    e48a:	60 ff       	sbrs	r22, 0
    e48c:	04 c0       	rjmp	.+8      	; 0xe496 <__fp_round+0x20>
    e48e:	6f 5f       	subi	r22, 0xFF	; 255
    e490:	7f 4f       	sbci	r23, 0xFF	; 255
    e492:	8f 4f       	sbci	r24, 0xFF	; 255
    e494:	9f 4f       	sbci	r25, 0xFF	; 255
    e496:	08 95       	ret

0000e498 <__fp_split3>:
    e498:	57 fd       	sbrc	r21, 7
    e49a:	90 58       	subi	r25, 0x80	; 128
    e49c:	44 0f       	add	r20, r20
    e49e:	55 1f       	adc	r21, r21
    e4a0:	59 f0       	breq	.+22     	; 0xe4b8 <__fp_splitA+0x10>
    e4a2:	5f 3f       	cpi	r21, 0xFF	; 255
    e4a4:	71 f0       	breq	.+28     	; 0xe4c2 <__fp_splitA+0x1a>
    e4a6:	47 95       	ror	r20

0000e4a8 <__fp_splitA>:
    e4a8:	88 0f       	add	r24, r24
    e4aa:	97 fb       	bst	r25, 7
    e4ac:	99 1f       	adc	r25, r25
    e4ae:	61 f0       	breq	.+24     	; 0xe4c8 <__fp_splitA+0x20>
    e4b0:	9f 3f       	cpi	r25, 0xFF	; 255
    e4b2:	79 f0       	breq	.+30     	; 0xe4d2 <__fp_splitA+0x2a>
    e4b4:	87 95       	ror	r24
    e4b6:	08 95       	ret
    e4b8:	12 16       	cp	r1, r18
    e4ba:	13 06       	cpc	r1, r19
    e4bc:	14 06       	cpc	r1, r20
    e4be:	55 1f       	adc	r21, r21
    e4c0:	f2 cf       	rjmp	.-28     	; 0xe4a6 <__fp_split3+0xe>
    e4c2:	46 95       	lsr	r20
    e4c4:	f1 df       	rcall	.-30     	; 0xe4a8 <__fp_splitA>
    e4c6:	08 c0       	rjmp	.+16     	; 0xe4d8 <__fp_splitA+0x30>
    e4c8:	16 16       	cp	r1, r22
    e4ca:	17 06       	cpc	r1, r23
    e4cc:	18 06       	cpc	r1, r24
    e4ce:	99 1f       	adc	r25, r25
    e4d0:	f1 cf       	rjmp	.-30     	; 0xe4b4 <__fp_splitA+0xc>
    e4d2:	86 95       	lsr	r24
    e4d4:	71 05       	cpc	r23, r1
    e4d6:	61 05       	cpc	r22, r1
    e4d8:	08 94       	sec
    e4da:	08 95       	ret

0000e4dc <__fp_zero>:
    e4dc:	e8 94       	clt

0000e4de <__fp_szero>:
    e4de:	bb 27       	eor	r27, r27
    e4e0:	66 27       	eor	r22, r22
    e4e2:	77 27       	eor	r23, r23
    e4e4:	cb 01       	movw	r24, r22
    e4e6:	97 f9       	bld	r25, 7
    e4e8:	08 95       	ret

0000e4ea <__gesf2>:
    e4ea:	8a df       	rcall	.-236    	; 0xe400 <__fp_cmp>
    e4ec:	08 f4       	brcc	.+2      	; 0xe4f0 <__gesf2+0x6>
    e4ee:	8f ef       	ldi	r24, 0xFF	; 255
    e4f0:	08 95       	ret

0000e4f2 <__mulsf3>:
    e4f2:	0b d0       	rcall	.+22     	; 0xe50a <__mulsf3x>
    e4f4:	c0 cf       	rjmp	.-128    	; 0xe476 <__fp_round>
    e4f6:	b1 df       	rcall	.-158    	; 0xe45a <__fp_pscA>
    e4f8:	28 f0       	brcs	.+10     	; 0xe504 <__mulsf3+0x12>
    e4fa:	b6 df       	rcall	.-148    	; 0xe468 <__fp_pscB>
    e4fc:	18 f0       	brcs	.+6      	; 0xe504 <__mulsf3+0x12>
    e4fe:	95 23       	and	r25, r21
    e500:	09 f0       	breq	.+2      	; 0xe504 <__mulsf3+0x12>
    e502:	a2 cf       	rjmp	.-188    	; 0xe448 <__fp_inf>
    e504:	a7 cf       	rjmp	.-178    	; 0xe454 <__fp_nan>
    e506:	11 24       	eor	r1, r1
    e508:	ea cf       	rjmp	.-44     	; 0xe4de <__fp_szero>

0000e50a <__mulsf3x>:
    e50a:	c6 df       	rcall	.-116    	; 0xe498 <__fp_split3>
    e50c:	a0 f3       	brcs	.-24     	; 0xe4f6 <__mulsf3+0x4>

0000e50e <__mulsf3_pse>:
    e50e:	95 9f       	mul	r25, r21
    e510:	d1 f3       	breq	.-12     	; 0xe506 <__mulsf3+0x14>
    e512:	95 0f       	add	r25, r21
    e514:	50 e0       	ldi	r21, 0x00	; 0
    e516:	55 1f       	adc	r21, r21
    e518:	62 9f       	mul	r22, r18
    e51a:	f0 01       	movw	r30, r0
    e51c:	72 9f       	mul	r23, r18
    e51e:	bb 27       	eor	r27, r27
    e520:	f0 0d       	add	r31, r0
    e522:	b1 1d       	adc	r27, r1
    e524:	63 9f       	mul	r22, r19
    e526:	aa 27       	eor	r26, r26
    e528:	f0 0d       	add	r31, r0
    e52a:	b1 1d       	adc	r27, r1
    e52c:	aa 1f       	adc	r26, r26
    e52e:	64 9f       	mul	r22, r20
    e530:	66 27       	eor	r22, r22
    e532:	b0 0d       	add	r27, r0
    e534:	a1 1d       	adc	r26, r1
    e536:	66 1f       	adc	r22, r22
    e538:	82 9f       	mul	r24, r18
    e53a:	22 27       	eor	r18, r18
    e53c:	b0 0d       	add	r27, r0
    e53e:	a1 1d       	adc	r26, r1
    e540:	62 1f       	adc	r22, r18
    e542:	73 9f       	mul	r23, r19
    e544:	b0 0d       	add	r27, r0
    e546:	a1 1d       	adc	r26, r1
    e548:	62 1f       	adc	r22, r18
    e54a:	83 9f       	mul	r24, r19
    e54c:	a0 0d       	add	r26, r0
    e54e:	61 1d       	adc	r22, r1
    e550:	22 1f       	adc	r18, r18
    e552:	74 9f       	mul	r23, r20
    e554:	33 27       	eor	r19, r19
    e556:	a0 0d       	add	r26, r0
    e558:	61 1d       	adc	r22, r1
    e55a:	23 1f       	adc	r18, r19
    e55c:	84 9f       	mul	r24, r20
    e55e:	60 0d       	add	r22, r0
    e560:	21 1d       	adc	r18, r1
    e562:	82 2f       	mov	r24, r18
    e564:	76 2f       	mov	r23, r22
    e566:	6a 2f       	mov	r22, r26
    e568:	11 24       	eor	r1, r1
    e56a:	9f 57       	subi	r25, 0x7F	; 127
    e56c:	50 40       	sbci	r21, 0x00	; 0
    e56e:	8a f0       	brmi	.+34     	; 0xe592 <__mulsf3_pse+0x84>
    e570:	e1 f0       	breq	.+56     	; 0xe5aa <__mulsf3_pse+0x9c>
    e572:	88 23       	and	r24, r24
    e574:	4a f0       	brmi	.+18     	; 0xe588 <__mulsf3_pse+0x7a>
    e576:	ee 0f       	add	r30, r30
    e578:	ff 1f       	adc	r31, r31
    e57a:	bb 1f       	adc	r27, r27
    e57c:	66 1f       	adc	r22, r22
    e57e:	77 1f       	adc	r23, r23
    e580:	88 1f       	adc	r24, r24
    e582:	91 50       	subi	r25, 0x01	; 1
    e584:	50 40       	sbci	r21, 0x00	; 0
    e586:	a9 f7       	brne	.-22     	; 0xe572 <__mulsf3_pse+0x64>
    e588:	9e 3f       	cpi	r25, 0xFE	; 254
    e58a:	51 05       	cpc	r21, r1
    e58c:	70 f0       	brcs	.+28     	; 0xe5aa <__mulsf3_pse+0x9c>
    e58e:	5c cf       	rjmp	.-328    	; 0xe448 <__fp_inf>
    e590:	a6 cf       	rjmp	.-180    	; 0xe4de <__fp_szero>
    e592:	5f 3f       	cpi	r21, 0xFF	; 255
    e594:	ec f3       	brlt	.-6      	; 0xe590 <__mulsf3_pse+0x82>
    e596:	98 3e       	cpi	r25, 0xE8	; 232
    e598:	dc f3       	brlt	.-10     	; 0xe590 <__mulsf3_pse+0x82>
    e59a:	86 95       	lsr	r24
    e59c:	77 95       	ror	r23
    e59e:	67 95       	ror	r22
    e5a0:	b7 95       	ror	r27
    e5a2:	f7 95       	ror	r31
    e5a4:	e7 95       	ror	r30
    e5a6:	9f 5f       	subi	r25, 0xFF	; 255
    e5a8:	c1 f7       	brne	.-16     	; 0xe59a <__mulsf3_pse+0x8c>
    e5aa:	fe 2b       	or	r31, r30
    e5ac:	88 0f       	add	r24, r24
    e5ae:	91 1d       	adc	r25, r1
    e5b0:	96 95       	lsr	r25
    e5b2:	87 95       	ror	r24
    e5b4:	97 f9       	bld	r25, 7
    e5b6:	08 95       	ret

0000e5b8 <strnlen_P>:
    e5b8:	fc 01       	movw	r30, r24
    e5ba:	05 90       	lpm	r0, Z+
    e5bc:	61 50       	subi	r22, 0x01	; 1
    e5be:	70 40       	sbci	r23, 0x00	; 0
    e5c0:	01 10       	cpse	r0, r1
    e5c2:	d8 f7       	brcc	.-10     	; 0xe5ba <strnlen_P+0x2>
    e5c4:	80 95       	com	r24
    e5c6:	90 95       	com	r25
    e5c8:	8e 0f       	add	r24, r30
    e5ca:	9f 1f       	adc	r25, r31
    e5cc:	08 95       	ret

0000e5ce <_exit>:
    e5ce:	f8 94       	cli

0000e5d0 <__stop_program>:
    e5d0:	ff cf       	rjmp	.-2      	; 0xe5d0 <__stop_program>
