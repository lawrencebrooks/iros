
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000611a  0000621a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  00006220  2**5
                  CONTENTS, READONLY
  2 .text         0000611a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000993  00800502  00800502  0000621c  2**1
                  ALLOC
  4 .stab         0000048c  00000000  00000000  00006620  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000256  00000000  00000000  00006aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006d02  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004b8  00000000  00000000  00006d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000052f4  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013d0  00000000  00000000  0000c4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000016c5  00000000  00000000  0000d894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000ba4  00000000  00000000  0000ef5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000014bc  00000000  00000000  0000fb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000427f  00000000  00000000  00010fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000540  00000000  00000000  00015240  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <__ctors_end>
       4:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
       8:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
       c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      10:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      14:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      18:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      1c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      20:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__vector_8>
      24:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      28:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      2c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      30:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      34:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__vector_13>
      38:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__vector_14>
      3c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      40:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      44:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      48:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      4c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      50:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      54:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      58:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      5c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      60:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      64:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      68:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>
      6c:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	1b 22 1e 22 7a 22 7e 22 85 22 26 22 2b 22 30 22     ."."z"~"."&"+"0"
      ce:	8d 22 33 22 36 22 39 22 74 22 77 22 9d 22           ."3"6"9"t"w"."

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <map_uzeboxlogo2>:
      e8:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f9 <map_uzeboxlogo>:
      f9:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     109:	00 0e 0f 10 11 12                                   ......

0000010f <logo_tileset>:
	...
     16b:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     17b:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     18b:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     19b:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1ab:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1bb:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1cb:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1db:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1eb:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1fb:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     20b:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     21b:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     22b:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     23b:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     253:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     263:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     273:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     283:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     293:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2a3:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2b3:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2c3:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2d3:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2e3:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2f3:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     303:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     313:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     323:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     333:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     343:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     353:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     363:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38f:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39f:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3af:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bf:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cf:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3df:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3ef:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3ff:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40f:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41f:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42f:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43f:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44f:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45f:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     497:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a7:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b7:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c7:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d7:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e7:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f7:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     507:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     517:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     527:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     537:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     547:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     557:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     567:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     577:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     587:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     597:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a7:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b7:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c7:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5eb:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5fb:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     60b:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     61b:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     62b:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     63b:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     64b:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     65b:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     66b:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     67b:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     68b:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     69b:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6ab:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6bb:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6d3:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6e3:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6f3:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     703:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     713:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     723:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     733:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     743:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     753:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     763:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     773:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     783:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     793:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7a3:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7b3:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7c3:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7d3:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7e3:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80f:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81f:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82f:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83f:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84f:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85f:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86f:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87f:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88f:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89f:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8af:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bf:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cf:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8df:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090f <logoInitPatches>:
     90f:	00 00 00 18 09 00 00 00 00                          .........

00000918 <initPatch>:
     918:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     928:	0a 1e 32 05 00 00 ff                                ..2....

0000092f <default_scores>:
     92f:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     93f:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000094d <strLevels>:
     94d:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

0000095b <strPaused>:
     95b:	50 41 55 53 45 44 00                                PAUSED.

00000962 <strExit>:
     962:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

0000096b <strLives>:
     96b:	4c 49 56 45 53 3a 00                                LIVES:.

00000972 <strShield>:
     972:	53 48 49 45 4c 44 3a 00                             SHIELD:.

0000097a <strScore>:
     97a:	53 43 4f 52 45 3a 00                                SCORE:.

00000981 <strSelectHandle>:
     981:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

00000992 <strHighscores>:
     992:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

0000099e <str1Player>:
     99e:	53 54 41 52 54 00                                   START.

000009a4 <strCopyright>:
     9a4:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9b4:	4f 4f 4b 53 00                                      OOKS.

000009b9 <my_patches>:
     9b9:	00 00 00 c2 09 00 00 00 00                          .........

000009c2 <ad_navigate>:
     9c2:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     9d2:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     9e2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     9f2:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     a02:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a12:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a22:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a32:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     a42:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     a52:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     a62:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     a72:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     a82:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     a92:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     aa2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     ab2:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     ac2:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     ad2:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     ae2:	00 ff                                               ..

00000ae4 <level_data>:
     ae4:	3c 1a 03 15 05 05 05 05 05 05 05 05 05 05 05 05     <...............
     af4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b04:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b24:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b34:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b44:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b54:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b64:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b74:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b84:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     b94:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ba4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     bb4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     bc4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     bd4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     be4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     bf4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c04:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c24:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c34:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c44:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c54:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c64:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c74:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c84:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     c94:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ca4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cb4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cc4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cd4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ce4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     cf4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d04:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d24:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d34:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d44:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d54:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d64:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d74:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d84:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     d94:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     da4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     db4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     dc4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     dd4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     de4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     df4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e04:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e24:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e34:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e44:	02 01 01 01 01 01 03 05 05 05 05 05 05 05 05 05     ................
     e54:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e64:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e74:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e84:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     e94:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ea4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     eb4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ec4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ed4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ee4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ef4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f04:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f14:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f24:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f34:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f44:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f54:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f64:	05 05 05 05 05 02 01 01 01 01 01 03 05 05 05 05     ................
     f74:	05 05 05 02 01 01 01 01 01 03 05 05 05 05 05 05     ................
     f84:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     f94:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fa4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fb4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fc4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fd4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     fe4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
     ff4:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1004:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1014:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1024:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1034:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1044:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1054:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1064:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1074:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    1084:	05 05 05 05 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1094:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    10a4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    10b4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    10c4:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    10d4:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    10e4:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    10f4:	04 04 04 04 04 04 04 04 04 04 04 04                 ............

00001100 <sprites_data>:
    1100:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1110:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1120:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1130:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1140:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1150:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1160:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    1170:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    1180:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1190:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    11a0:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    11b0:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    11c0:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    11d0:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    11e0:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    11f0:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    1200:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1210:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1220:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1230:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1240:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1250:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1260:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1270:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1280:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1290:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    12a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    12b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    12c0:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    12d0:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    12e0:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    12f0:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1300:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    1310:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    1320:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    1330:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    1340:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    1350:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    1360:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    1370:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    1380:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1390:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    13a0:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    13b0:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    13c0:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    13d0:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    13e0:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    13f0:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    1400:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    1410:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    1420:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1430:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    1440:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1450:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1460:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1470:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1480:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1490:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    14a0:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    14b0:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    14c0:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    14d0:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    14e0:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    14f0:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    1500:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1510:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    1520:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    1530:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1540:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1550:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    1560:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    1570:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1580:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    1590:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    15a0:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    15b0:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    15c0:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    15d0:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    15e0:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    15f0:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1600:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1610:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    1620:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    1630:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1640:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    1650:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    1660:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    1670:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1680:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    1690:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    16a0:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    16b0:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    16c0:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    16d0:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    16e0:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    16f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1700:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    1710:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    1720:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    1730:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    1740:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    1750:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    1760:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    1770:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1780:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    1790:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    17a0:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    17b0:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    17c0:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    17d0:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    17e0:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    17f0:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1800:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    1810:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    1820:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    1830:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    1840:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1850:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    1860:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    1870:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1880:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    1890:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    18a0:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    18b0:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    18c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18e0:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    18f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1900:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    1910:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    1920:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    1930:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    1940:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1950:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1960:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    1970:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    1980:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    1990:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    19a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19c0:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    19d0:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    19e0:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    19f0:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    1a00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    1a10:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    1a20:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a30:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a40:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    1a50:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    1a60:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    1a70:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    1a80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a90:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    1aa0:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    1ab0:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    1ac0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ad0:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    1ae0:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    1af0:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    1b00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1b10:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    1b20:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    1b30:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    1b40:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    1b50:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    1b60:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    1b70:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    1b80:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    1b90:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    1ba0:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    1bb0:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    1bc0:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    1bd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1be0:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    1bf0:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    1c00:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    1c10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c20:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c30:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c40:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    1c50:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    1c60:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    1c70:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c80:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    1c90:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    1ca0:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    1cb0:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1cc0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ce0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    1cf0:	fe a4 87 87 87 87 87 87 a4 a4 ef ef ef ef ef ef     ................
    1d00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1d10:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1d20:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    1d30:	87 87 87 87 ad 85 87 87 ef ef ef ef ad ad a4 a4     ................
    1d40:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    1d50:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    1d60:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    1d70:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

00001d80 <map_enemy_spider_1>:
    1d80:	01 01 23                                            ..#

00001d83 <map_enemy_spider_0>:
    1d83:	01 01 18                                            ...

00001d86 <map_enemy_shark>:
    1d86:	01 01 05                                            ...

00001d89 <map_enemy_shot>:
    1d89:	01 01 0d                                            ...

00001d8c <map_hero_shot>:
    1d8c:	01 01 04                                            ...

00001d8f <map_hero_ship_large>:
    1d8f:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

00001d99 <map_hero_ship_1>:
    1d99:	03 01 24 1a 1b                                      ..$..

00001d9e <map_hero_ship_0>:
    1d9e:	03 01 19 1a 1b                                      .....

00001da3 <map_hero_prone>:
    1da3:	03 01 2f 30 31                                      ../01

00001da8 <map_hero_jump>:
    1da8:	02 03 02 03 0a 0c 16 17                             ........

00001db0 <map_hero_step_3>:
    1db0:	02 03 02 03 0a 0b 2d 2e                             ......-.

00001db8 <map_hero_step_2>:
    1db8:	02 03 00 01 07 09 14 15                             ........

00001dc0 <map_hero_step_1>:
    1dc0:	02 03 02 03 0a 0b 12 13                             ........

00001dc8 <map_hero_step_0>:
    1dc8:	02 03 00 01 07 09 10 11                             ........

00001dd0 <map_hero_idle>:
    1dd0:	02 03 00 01 07 08 0e 0f                             ........

00001dd8 <map_explosion_2>:
    1dd8:	01 01 1e                                            ...

00001ddb <map_explosion_1>:
    1ddb:	01 01 1d                                            ...

00001dde <map_explosion_0>:
    1dde:	01 01 1c                                            ...

00001de1 <map_meteor>:
    1de1:	01 01 1f                                            ...

00001de4 <map_up_arrow>:
    1de4:	01 01 22                                            .."

00001de7 <map_down_arrow>:
    1de7:	01 01 21                                            ..!

00001dea <map_right_arrow>:
    1dea:	01 01 20                                            .. 

00001ded <map_none>:
    1ded:	01 01 06                                            ...

00001df0 <tiles_data>:
    1df0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    1e00:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    1e10:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    1e20:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    1e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e40:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1e50:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    1e60:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    1e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e80:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1e90:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    1ea0:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ec0:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    1ed0:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    1ee0:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    1ef0:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    1f00:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    1f10:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    1f20:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1f30:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    1f40:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    1f50:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    1f60:	af af af af af af af af af af af af af af af af     ................
    1f70:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1f80:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1f90:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1fa0:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    1fb0:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1fc0:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1fd0:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1fe0:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    1ff0:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2000:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    2010:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    2020:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    2030:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    2040:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    2050:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    2060:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    2070:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    2080:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    2090:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    20a0:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    20b0:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    20c0:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    20d0:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    20e0:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
    20f0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2100:	40 40 40 40 40 40 40 40 40 40 40 e3 40 40 40 40     @@@@@@@@@@@.@@@@
    2110:	40 40 e3 ff e3 40 40 40 40 40 40 e3 40 40 40 40     @@...@@@@@@.@@@@
    2120:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2130:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2140:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2150:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2160:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    2170:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2180:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    2190:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    21a0:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    21b0:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    21c0:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    21d0:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    21e0:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    21f0:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    2200:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    2210:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    2220:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    2230:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    2240:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    2250:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    2260:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    2270:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    2280:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    2290:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    22a0:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    22b0:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    22c0:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    22d0:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    22e0:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    22f0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 96 96     @@@@@@@@@@@@@@..
    2300:	40 40 40 40 40 96 96 96 40 40 40 40 96 96 96 96     @@@@@...@@@@....
    2310:	40 40 40 96 96 96 96 96 40 40 96 96 96 96 96 96     @@@.....@@......
    2320:	40 40 96 96 96 96 96 96 40 96 96 96 96 96 96 96     @@......@.......
    2330:	40 96 96 96 96 96 96 40 96 96 96 96 96 96 96 96     @......@........
    2340:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2350:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2360:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2370:	40 40 40 40 40 40 40 40 96 96 40 40 40 40 40 40     @@@@@@@@..@@@@@@
    2380:	96 96 96 40 40 40 40 40 96 96 96 96 40 40 40 40     ...@@@@@....@@@@
    2390:	96 96 96 96 96 40 40 40 96 96 96 96 96 96 40 40     .....@@@......@@
    23a0:	96 96 96 96 96 96 40 40 96 96 96 96 96 96 96 40     ......@@.......@
    23b0:	bf bf bf bf bf bf bf bf 40 40 40 40 40 40 40 40     ........@@@@@@@@
    23c0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    23d0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    23e0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    23f0:	40 96 96 96 95 96 96 96 40 96 96 96 95 96 96 96     @.......@.......
    2400:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    2410:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    2420:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    2430:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2440:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2450:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2460:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2470:	96 96 96 95 96 96 96 40 96 96 96 95 96 96 96 40     .......@.......@
    2480:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    2490:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    24a0:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    24b0:	82 82 82 82 82 bf 96 96 40 d8 d8 d8 bf ff bf 82     ........@.......
    24c0:	40 d8 d8 bf ff ff ff bf 40 d8 bf ff ff ff ff ff     @.......@.......
    24d0:	bf bf ff ff ff ff ff ff 40 40 bf ff ff ff ff ff     ........@@......
    24e0:	40 40 94 bf ff ff ff bf 40 40 40 8c bf ff bf d8     @@......@@@.....
    24f0:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    2500:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    2510:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    2520:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    2530:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 40     ...............@
    2540:	82 82 82 83 83 83 83 40 82 82 82 83 83 83 83 40     .......@.......@
    2550:	d8 82 82 83 83 83 83 40 82 82 82 83 83 83 40 40     .......@......@@
    2560:	82 82 83 83 83 95 40 40 82 82 83 83 95 40 40 40     ......@@.....@@@
    2570:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2580:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2590:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    25a0:	40 40 40 40 40 40 40 40 bf bf bf bf bf bf bf bf     @@@@@@@@........
    25b0:	40 40 40 96 95 ff d8 d8 40 40 40 40 96 ff 83 82     @@@.....@@@@....
    25c0:	40 40 40 40 40 ff 96 96 40 40 40 40 40 bf 96 96     @@@@@...@@@@@...
    25d0:	40 40 40 40 40 bf 96 96 40 40 40 40 40 bf 96 96     @@@@@...@@@@@...
    25e0:	40 40 40 40 40 bf 40 40 40 40 40 40 40 77 40 40     @@@@@.@@@@@@@w@@
    25f0:	d8 d8 d8 82 82 82 82 82 82 82 82 82 82 83 83 83     ................
    2600:	8c 8c 83 83 83 83 8c 95 96 96 96 96 96 96 96 96     ................
    2610:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    2620:	96 96 96 96 96 96 96 96 40 96 96 96 96 96 96 40     ........@......@
    2630:	83 83 8c 95 96 40 40 40 83 8c 96 96 40 40 40 40     .....@@@....@@@@
    2640:	96 96 96 40 40 40 40 40 96 96 96 40 40 40 40 40     ...@@@@@...@@@@@
    2650:	96 96 40 40 40 40 40 40 96 96 40 40 40 40 40 40     ..@@@@@@..@@@@@@
    2660:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2670:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    2680:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    2690:	40 40 40 40 40 77 40 40 40 40 40 40 40 77 40 40     @@@@@w@@@@@@@w@@
    26a0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    26b0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    26c0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    26d0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    26e0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    26f0:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    2700:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    2710:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    2720:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    2730:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2740:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2750:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2760:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2770:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2780:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2790:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    27a0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    27b0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    27c0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    27d0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    27e0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    27f0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2800:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2810:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2820:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2830:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2840:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2850:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2860:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2870:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2880:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2890:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    28a0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    28b0:	40 40 40 40 40 40 40 40 40 40 40 40 ff ff ff 40     @@@@@@@@@@@@...@
    28c0:	40 40 40 ff ff ff 40 40 40 40 40 ff ff 40 40 40     @@@...@@@@@..@@@
    28d0:	40 40 40 ff ff 40 40 40 40 40 40 ff ff ff 40 40     @@@..@@@@@@...@@
    28e0:	40 40 40 40 ff ff ff 40 40 40 40 40 40 40 40 40     @@@@...@@@@@@@@@
    28f0:	40 40 40 40 40 40 40 40 40 ff ff ff 40 40 40 40     @@@@@@@@@...@@@@
    2900:	40 40 ff ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@...@@@@@@..@@@
    2910:	40 40 40 ff ff 40 40 40 40 40 ff ff ff 40 40 40     @@@..@@@@@...@@@
    2920:	40 ff ff ff 40 40 40 40 40 40 40 40 40 40 40 40     @...@@@@@@@@@@@@
    2930:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2940:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2950:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2960:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2970:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2980:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2990:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    29a0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    29b0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    29c0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    29d0:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    29e0:	40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40     @@@..@@@@@..@@@@
    29f0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2a00:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    2a10:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2a20:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2a30:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2a40:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2a50:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    2a60:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    2a70:	40 40 40 40 40 40 40 40 40 40 40 40 40 ff ff 40     @@@@@@@@@@@@@..@
    2a80:	40 40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40     @@@@..@@@@@..@@@
    2a90:	40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40 40     @@..@@@@@..@@@@@
    2aa0:	40 ff 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @.@@@@@@@@@@@@@@
    2ab0:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    2ac0:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 6f 6f 6f 40     @oo..oo@@oo.ooo@
    2ad0:	40 6f 6f 6f 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @ooo.oo@@oo..oo@
    2ae0:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    2af0:	40 40 40 40 40 40 40 40 40 40 40 6f 6f 40 40 40     @@@@@@@@@@@oo@@@
    2b00:	40 40 6f 6f 6f 40 40 40 40 40 40 6f 6f 40 40 40     @@ooo@@@@@@oo@@@
    2b10:	40 40 40 6f 6f 40 40 40 40 40 40 6f 6f 40 40 40     @@@oo@@@@@@oo@@@
    2b20:	40 6f 6f 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40     @oooooo@@@@@@@@@
    2b30:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    2b40:	40 6f 6f 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @oo@@oo@@@@@oo@@
    2b50:	40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40 40     @@@oo@@@@@oo@@@@
    2b60:	40 6f 6f 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40     @oooooo@@@@@@@@@
    2b70:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    2b80:	40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40     @@@@oo@@@@@oo@@@
    2b90:	40 40 40 40 6f 6f 40 40 40 6f 6f 40 40 6f 6f 40     @@@@oo@@@oo@@oo@
    2ba0:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    2bb0:	40 40 40 40 40 40 40 40 40 40 40 40 6f 6f 40 40     @@@@@@@@@@@@oo@@
    2bc0:	40 40 40 6f 6f 6f 40 40 40 40 6f 6f 6f 6f 40 40     @@@ooo@@@@oooo@@
    2bd0:	40 6f 6f 00 6f 6f 40 40 40 6f 6f 6f 6f 6f 6f 40     @oo.oo@@@oooooo@
    2be0:	40 40 40 40 6f 6f 40 40 40 40 40 40 40 40 40 40     @@@@oo@@@@@@@@@@
    2bf0:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    2c00:	40 6f 6f 40 40 40 40 40 40 6f 6f 6f 6f 6f 40 40     @oo@@@@@@ooooo@@
    2c10:	40 40 40 40 40 6f 6f 40 40 6f 6f 40 40 6f 6f 40     @@@@@oo@@oo@@oo@
    2c20:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    2c30:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    2c40:	40 6f 6f 40 40 40 40 40 40 6f 6f 6f 6f 6f 40 40     @oo@@@@@@ooooo@@
    2c50:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @oo..oo@@oo..oo@
    2c60:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    2c70:	40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 6f 6f 40     @@@@@@@@@oooooo@
    2c80:	40 40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @@@@@oo@@@@@oo@@
    2c90:	40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40 40 40     @@@oo@@@@@oo@@@@
    2ca0:	40 40 6f 6f 40 40 40 40 40 40 40 40 40 40 40 40     @@oo@@@@@@@@@@@@
    2cb0:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    2cc0:	40 6f 6f 00 00 6f 6f 40 40 40 6f 6f 6f 6f 40 40     @oo..oo@@@oooo@@
    2cd0:	40 6f 6f 00 00 6f 6f 40 40 6f 6f 00 00 6f 6f 40     @oo..oo@@oo..oo@
    2ce0:	40 40 6f 6f 6f 6f 40 40 40 40 40 40 40 40 40 40     @@oooo@@@@@@@@@@
    2cf0:	40 40 40 40 40 40 40 40 40 40 6f 6f 6f 6f 40 40     @@@@@@@@@@oooo@@
    2d00:	40 6f 6f 00 00 6f 6f 40 40 40 6f 6f 6f 6f 6f 40     @oo..oo@@@ooooo@
    2d10:	40 40 40 40 40 6f 6f 40 40 40 40 40 6f 6f 40 40     @@@@@oo@@@@@oo@@
    2d20:	40 40 6f 6f 6f 40 40 40 40 40 40 40 40 40 40 40     @@ooo@@@@@@@@@@@
    2d30:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2d40:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2d50:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2d60:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2d70:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    2d80:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    2d90:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    2da0:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    2db0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2dc0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2dd0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2de0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2df0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e00:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e10:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e20:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e30:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e40:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e50:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e60:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    2e70:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    2e80:	40 ff ff 40 40 ff ff 40 40 40 40 40 ff ff 40 40     @..@@..@@@@@..@@
    2e90:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    2ea0:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    2eb0:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    2ec0:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff ff 40     @..@@..@@..@...@
    2ed0:	40 ff ff 40 ff ff ff 40 40 ff ff 40 40 40 40 40     @..@...@@..@@@@@
    2ee0:	40 40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @@.....@@@@@@@@@
    2ef0:	40 40 40 40 40 40 40 40 40 40 40 ff ff 40 40 40     @@@@@@@@@@@..@@@
    2f00:	40 40 ff ff ff ff 40 40 40 ff ff 40 40 ff ff 40     @@....@@@..@@..@
    2f10:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff ff 40     @..@@..@@......@
    2f20:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    2f30:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    2f40:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff 40 40     @..@@..@@.....@@
    2f50:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    2f60:	40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @.....@@@@@@@@@@
    2f70:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    2f80:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 40 40 40     @..@@..@@..@@@@@
    2f90:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @..@@@@@@..@@..@
    2fa0:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    2fb0:	40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40 40     @@@@@@@@@....@@@
    2fc0:	40 ff ff 40 ff ff 40 40 40 ff ff 40 40 ff ff 40     @..@..@@@..@@..@
    2fd0:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff 40 40     @..@@..@@..@..@@
    2fe0:	40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40 40     @....@@@@@@@@@@@
    2ff0:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    3000:	40 ff ff 40 40 40 40 40 40 ff ff ff ff ff 40 40     @..@@@@@@.....@@
    3010:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    3020:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    3030:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    3040:	40 ff ff 40 40 40 40 40 40 ff ff ff ff ff 40 40     @..@@@@@@.....@@
    3050:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    3060:	40 ff ff 40 40 40 40 40 40 40 40 40 40 40 40 40     @..@@@@@@@@@@@@@
    3070:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40     @@@@@@@@@@.....@
    3080:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    3090:	40 ff ff 40 ff ff ff 40 40 ff ff 40 40 ff ff 40     @..@...@@..@@..@
    30a0:	40 40 ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @@.....@@@@@@@@@
    30b0:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    30c0:	40 ff ff 40 40 ff ff 40 40 ff ff ff ff ff ff 40     @..@@..@@......@
    30d0:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    30e0:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    30f0:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    3100:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    3110:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    3120:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    3130:	40 40 40 40 40 40 40 40 40 40 40 40 ff ff ff 40     @@@@@@@@@@@@...@
    3140:	40 40 40 40 40 ff ff 40 40 40 40 40 40 ff ff 40     @@@@@..@@@@@@..@
    3150:	40 40 40 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @@@@@..@@..@@..@
    3160:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    3170:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    3180:	40 ff ff 40 ff ff 40 40 40 ff ff ff ff 40 40 40     @..@..@@@....@@@
    3190:	40 ff ff ff ff 40 40 40 40 ff ff 40 ff ff 40 40     @....@@@@..@..@@
    31a0:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    31b0:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 40 40     @@@@@@@@@..@@@@@
    31c0:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    31d0:	40 ff ff 40 40 40 40 40 40 ff ff 40 40 40 40 40     @..@@@@@@..@@@@@
    31e0:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    31f0:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 ff ff     @@@@@@@@@..@@@..
    3200:	40 ff ff ff 40 ff ff ff 40 ff ff ff ff ff ff ff     @...@...@.......
    3210:	40 ff ff 40 ff 40 ff ff 40 ff ff 40 40 40 ff ff     @..@.@..@..@@@..
    3220:	40 ff ff 40 40 40 ff ff 40 40 40 40 40 40 40 40     @..@@@..@@@@@@@@
    3230:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    3240:	40 ff ff ff 40 ff ff 40 40 ff ff ff ff ff ff 40     @...@..@@......@
    3250:	40 ff ff ff ff ff ff 40 40 ff ff 40 ff ff ff 40     @......@@..@...@
    3260:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    3270:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    3280:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    3290:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    32a0:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    32b0:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    32c0:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    32d0:	40 ff ff ff ff ff 40 40 40 ff ff 40 40 40 40 40     @.....@@@..@@@@@
    32e0:	40 ff ff 40 40 40 40 40 40 40 40 40 40 40 40 40     @..@@@@@@@@@@@@@
    32f0:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    3300:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    3310:	40 ff ff 40 40 ff ff 40 40 ff ff 40 ff ff 40 40     @..@@..@@..@..@@
    3320:	40 40 ff ff 40 ff ff 40 40 40 40 40 40 40 40 40     @@..@..@@@@@@@@@
    3330:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff 40 40     @@@@@@@@@.....@@
    3340:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    3350:	40 ff ff ff ff ff 40 40 40 ff ff 40 ff ff 40 40     @.....@@@..@..@@
    3360:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    3370:	40 40 40 40 40 40 40 40 40 40 ff ff ff ff 40 40     @@@@@@@@@@....@@
    3380:	40 ff ff 40 40 40 40 40 40 40 ff ff ff ff 40 40     @..@@@@@@@....@@
    3390:	40 40 40 40 40 ff ff 40 40 40 40 40 40 ff ff 40     @@@@@..@@@@@@..@
    33a0:	40 40 ff ff ff ff 40 40 40 40 40 40 40 40 40 40     @@....@@@@@@@@@@
    33b0:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    33c0:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    33d0:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    33e0:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    33f0:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    3400:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    3410:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    3420:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    3430:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    3440:	40 ff ff 40 40 ff ff 40 40 ff ff 40 40 ff ff 40     @..@@..@@..@@..@
    3450:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    3460:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    3470:	40 40 40 40 40 40 40 40 40 ff ff 40 40 40 ff ff     @@@@@@@@@..@@@..
    3480:	40 ff ff 40 40 40 ff ff 40 ff ff 40 ff 40 ff ff     @..@@@..@..@.@..
    3490:	40 ff ff ff ff ff ff ff 40 ff ff ff 40 ff ff ff     @.......@...@...
    34a0:	40 ff ff 40 40 40 ff ff 40 40 40 40 40 40 40 40     @..@@@..@@@@@@@@
    34b0:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    34c0:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    34d0:	40 40 ff ff ff ff 40 40 40 ff ff 40 40 ff ff 40     @@....@@@..@@..@
    34e0:	40 ff ff 40 40 ff ff 40 40 40 40 40 40 40 40 40     @..@@..@@@@@@@@@
    34f0:	40 40 40 40 40 40 40 40 40 ff ff 40 40 ff ff 40     @@@@@@@@@..@@..@
    3500:	40 ff ff 40 40 ff ff 40 40 40 ff ff ff ff 40 40     @..@@..@@@....@@
    3510:	40 40 40 ff ff 40 40 40 40 40 40 ff ff 40 40 40     @@@..@@@@@@..@@@
    3520:	40 40 40 ff ff 40 40 40 40 40 40 40 40 40 40 40     @@@..@@@@@@@@@@@
    3530:	40 40 40 40 40 40 40 40 40 ff ff ff ff ff ff 40     @@@@@@@@@......@
    3540:	40 40 40 40 ff ff 40 40 40 40 40 ff ff 40 40 40     @@@@..@@@@@..@@@
    3550:	40 40 ff ff 40 40 40 40 40 ff ff 40 40 40 40 40     @@..@@@@@..@@@@@
    3560:	40 ff ff ff ff ff ff 40 40 40 40 40 40 40 40 40     @......@@@@@@@@@
    3570:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3580:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3590:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    35a0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    35b0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    35c0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    35d0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    35e0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    35f0:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3600:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3610:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3620:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3630:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3640:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3650:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3660:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3670:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3680:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    3690:	40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40     @@@@@@@@@@@@@@@@
    36a0:	ff ff ff ff ff ff ff ff 40 40 40 40 40 40 40 40     ........@@@@@@@@

000036b0 <map_star>:
    36b0:	01 01 0c                                            ...

000036b3 <map_ice_moon>:
    36b3:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

000036be <map_ice_cloud>:
    36be:	01 01 08                                            ...

000036c1 <map_ice_far>:
    36c1:	01 01 07                                            ...

000036c4 <map_ice_sky>:
    36c4:	01 01 06                                            ...

000036c7 <map_ice_horizon>:
    36c7:	01 01 05                                            ...

000036ca <map_ice_bottom>:
    36ca:	01 01 04                                            ...

000036cd <map_ice_right>:
    36cd:	01 01 03                                            ...

000036d0 <map_ice_middle>:
    36d0:	01 01 02                                            ...

000036d3 <map_ice_left>:
    36d3:	01 01 01                                            ...

000036d6 <map_splash>:
    36d6:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    36e6:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    36f6:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    3706:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    3716:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00003723 <map_tile_none>:
    3723:	01 01 00                                            ...

00003726 <__ctors_end>:
    3726:	11 24       	eor	r1, r1
    3728:	1f be       	out	0x3f, r1	; 63
    372a:	cf ef       	ldi	r28, 0xFF	; 255
    372c:	d0 e1       	ldi	r29, 0x10	; 16
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	cd bf       	out	0x3d, r28	; 61

00003732 <__do_copy_data>:
    3732:	15 e0       	ldi	r17, 0x05	; 5
    3734:	a0 e0       	ldi	r26, 0x00	; 0
    3736:	b5 e0       	ldi	r27, 0x05	; 5
    3738:	ea e1       	ldi	r30, 0x1A	; 26
    373a:	f1 e6       	ldi	r31, 0x61	; 97
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <__do_copy_data+0x10>
    373e:	05 90       	lpm	r0, Z+
    3740:	0d 92       	st	X+, r0
    3742:	a2 30       	cpi	r26, 0x02	; 2
    3744:	b1 07       	cpc	r27, r17
    3746:	d9 f7       	brne	.-10     	; 0x373e <__do_copy_data+0xc>

00003748 <__do_clear_bss>:
    3748:	1e e0       	ldi	r17, 0x0E	; 14
    374a:	a2 e0       	ldi	r26, 0x02	; 2
    374c:	b5 e0       	ldi	r27, 0x05	; 5
    374e:	01 c0       	rjmp	.+2      	; 0x3752 <.do_clear_bss_start>

00003750 <.do_clear_bss_loop>:
    3750:	1d 92       	st	X+, r1

00003752 <.do_clear_bss_start>:
    3752:	a5 39       	cpi	r26, 0x95	; 149
    3754:	b1 07       	cpc	r27, r17
    3756:	e1 f7       	brne	.-8      	; 0x3750 <.do_clear_bss_loop>

00003758 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    3758:	0e 94 47 21 	call	0x428e	; 0x428e <wdt_randomize>
#endif

    MCUSR = 0;
    375c:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    375e:	88 e1       	ldi	r24, 0x18	; 24
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	80 93 60 00 	sts	0x0060, r24
    3768:	10 92 60 00 	sts	0x0060, r1
    376c:	0f be       	out	0x3f, r0	; 63

0000376e <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    376e:	0e 94 04 22 	call	0x4408	; 0x4408 <isEepromFormatted>
    3772:	81 11       	cpse	r24, r1
    3774:	02 c0       	rjmp	.+4      	; 0x377a <Initialize+0xc>
    3776:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <FormatEeprom>

	cli();
    377a:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    3782:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    3786:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    378a:	10 92 b8 0c 	sts	0x0CB8, r1
    378e:	10 92 be 0c 	sts	0x0CBE, r1
    3792:	10 92 c4 0c 	sts	0x0CC4, r1
    3796:	10 92 ca 0c 	sts	0x0CCA, r1
    379a:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    379e:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    37a2:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    37a6:	92 e1       	ldi	r25, 0x12	; 18
    37a8:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    37ac:	90 ee       	ldi	r25, 0xE0	; 224
    37ae:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    37b2:	94 e1       	ldi	r25, 0x14	; 20
    37b4:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    37b8:	10 92 ac 0c 	sts	0x0CAC, r1
    37bc:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    37c0:	10 92 b0 0c 	sts	0x0CB0, r1
    37c4:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    37c8:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    37cc:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <InitializeVideoMode>
    37d0:	80 e7       	ldi	r24, 0x70	; 112
    37d2:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    37d4:	fc 01       	movw	r30, r24
    37d6:	25 91       	lpm	r18, Z+
    37d8:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    37da:	f9 01       	movw	r30, r18
    37dc:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    37de:	30 83       	st	Z, r19
    37e0:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	8e 39       	cpi	r24, 0x9E	; 158
    37e6:	92 07       	cpc	r25, r18
    37e8:	a9 f7       	brne	.-22     	; 0x37d4 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    37ea:	78 94       	sei
	
	DisplayLogo();
    37ec:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <DisplayLogo>
    37f0:	0e 94 39 30 	call	0x6072	; 0x6072 <main>
    37f4:	0c 94 8b 30 	jmp	0x6116	; 0x6116 <_exit>

000037f8 <__bad_interrupt>:
    37f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000037fc <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    37fc:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    37fe:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    3802:	ad e8       	ldi	r26, 0x8D	; 141
    3804:	aa 95       	dec	r26
    3806:	f1 f7       	brne	.-4      	; 0x3804 <sub_video_mode3+0x8>
    3808:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    380a:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    380e:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    3810:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    3812:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    3814:	02 9f       	mul	r16, r18
		add ZL,r0
    3816:	e0 0d       	add	r30, r0
		adc ZH,r1
    3818:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    381a:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    381c:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    381e:	20 91 6a 0d 	lds	r18, 0x0D6A
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    3822:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    3824:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    3826:	30 0f       	add	r19, r16

		cp r18,r16
    3828:	20 17       	cp	r18, r16
		breq no_ramtiles
    382a:	51 f0       	breq	.+20     	; 0x3840 <no_ramtiles>
		nop
    382c:	00 00       	nop
	...

00003830 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    3830:	a1 91       	ld	r26, Z+
		ld XH,Z+
    3832:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    3834:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    3836:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    3838:	0c 93       	st	X, r16

		inc r16
    383a:	03 95       	inc	r16
		cp r16,r18
    383c:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    383e:	c0 f3       	brcs	.-16     	; 0x3830 <upd_loop>

00003840 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    3840:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    3842:	1a 95       	dec	r17
		brne .-4
    3844:	f1 f7       	brne	.-4      	; 0x3842 <no_ramtiles+0x2>
		rjmp .
    3846:	00 c0       	rjmp	.+0      	; 0x3848 <no_ramtiles+0x8>
		dec r19
    3848:	3a 95       	dec	r19
		brne 1b
    384a:	d1 f7       	brne	.-12     	; 0x3840 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    384c:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    384e:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    3850:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    3854:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    3856:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    3858:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    385a:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    385c:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    3860:	60 2f       	mov	r22, r16
		lsr r16
    3862:	06 95       	lsr	r16
		lsr r16
    3864:	06 95       	lsr	r16
		lsr r16 ;/8
    3866:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    3868:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    386c:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    386e:	f1 2e       	mov	r15, r17

        mov r17,r16
    3870:	10 2f       	mov	r17, r16
        lsr r16
    3872:	06 95       	lsr	r16
        lsr r16
    3874:	06 95       	lsr	r16
        lsr r16 ;/8
    3876:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    3878:	d0 0f       	add	r29, r16
		andi r17,0x7
    387a:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    387c:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    387e:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    3880:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    3884:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    3888:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    388c:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    3890:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    3892:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    3894:	5e 01       	movw	r10, r28
		mov r23,r22
    3896:	76 2f       	mov	r23, r22
		mov r24,r15
    3898:	8f 2d       	mov	r24, r15
		mov r9,r25
    389a:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    389c:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    38a0:	20 2f       	mov	r18, r16
		lsr r16
    38a2:	06 95       	lsr	r16
		lsr r16
    38a4:	06 95       	lsr	r16
		lsr r16			;hi8
    38a6:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    38a8:	03 95       	inc	r16
		andi r18,7		;lo8
    38aa:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    38ac:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    38b0:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    38b2:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    38b4:	01 fe       	sbrs	r0, 1
		clr r22
    38b6:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    38b8:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    38ba:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    38bc:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    38be:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    38c0:	01 fe       	sbrs	r0, 1
		ser r24
    38c2:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    38c4:	01 fe       	sbrs	r0, 1
		clr r9
    38c6:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    38c8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    38ca:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    38cc:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    38ce:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    38d0:	80 90 a8 0c 	lds	r8, 0x0CA8

000038d4 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    38d4:	bc d3       	rcall	.+1912   	; 0x404e <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    38d6:	24 e0       	ldi	r18, 0x04	; 4
    38d8:	2a 95       	dec	r18
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <next_tile_line+0x4>
    38dc:	00 00       	nop
				
		call render_tile_line
    38de:	0e 94 b0 1c 	call	0x3960	; 0x3960 <render_tile_line>

		WAIT r18,58
    38e2:	23 e1       	ldi	r18, 0x13	; 19
    38e4:	2a 95       	dec	r18
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <next_tile_line+0x10>
    38e8:	00 00       	nop

		inc r22
    38ea:	63 95       	inc	r22
		dec r8
    38ec:	8a 94       	dec	r8
		breq text_frame_end
    38ee:	09 f1       	breq	.+66     	; 0x3932 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    38f0:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    38f2:	29 f0       	breq	.+10     	; 0x38fe <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    38f4:	08 e0       	ldi	r16, 0x08	; 8
    38f6:	0a 95       	dec	r16
    38f8:	f1 f7       	brne	.-4      	; 0x38f6 <next_tile_line+0x22>
    38fa:	00 00       	nop
		rjmp next_tile_line
    38fc:	eb cf       	rjmp	.-42     	; 0x38d4 <next_tile_line>

000038fe <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    38fe:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    3900:	0c 2f       	mov	r16, r28
		andi r16,0x7
    3902:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    3904:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    3906:	11 f0       	breq	.+4      	; 0x390c <next_tile_row+0xe>
		inc YL
    3908:	c3 95       	inc	r28
		rjmp 2f
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    390c:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    390e:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    3910:	8a 95       	dec	r24
		brne .+2
    3912:	09 f4       	brne	.+2      	; 0x3916 <next_tile_row+0x18>
		movw YL,r12
    3914:	e6 01       	movw	r28, r12

		dec r19
    3916:	3a 95       	dec	r19
		brne .+2
    3918:	09 f4       	brne	.+2      	; 0x391c <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    391a:	67 2f       	mov	r22, r23
		brne .+2
    391c:	09 f4       	brne	.+2      	; 0x3920 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    391e:	e5 01       	movw	r28, r10
		brne .+2
    3920:	09 f4       	brne	.+2      	; 0x3924 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    3922:	8f 2d       	mov	r24, r15
		brne .+2
    3924:	09 f4       	brne	.+2      	; 0x3928 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    3926:	99 2e       	mov	r9, r25

		brne .+2
    3928:	09 f4       	brne	.+2      	; 0x392c <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    392a:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    392c:	09 f4       	brne	.+2      	; 0x3930 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    392e:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    3930:	d1 cf       	rjmp	.-94     	; 0x38d4 <next_tile_line>

00003932 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    3932:	29 e0       	ldi	r18, 0x09	; 9
    3934:	2a 95       	dec	r18
    3936:	f1 f7       	brne	.-4      	; 0x3934 <text_frame_end+0x2>
    3938:	00 00       	nop

		rcall hsync_pulse ;145
    393a:	89 d3       	rcall	.+1810   	; 0x404e <hsync_pulse>
	
		clr r1
    393c:	11 24       	eor	r1, r1
		call RestoreBackground
    393e:	0e 94 80 2c 	call	0x5900	; 0x5900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    3942:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    3946:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    3948:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    394a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    394c:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    3950:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    3952:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    3954:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    3958:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    395a:	e0 93 36 00 	sts	0x0036, r30

		ret
    395e:	08 95       	ret

00003960 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    3960:	cf 93       	push	r28
		push YH
    3962:	df 93       	push	r29
		push r23
    3964:	7f 93       	push	r23
		push r22
    3966:	6f 93       	push	r22
		push r19
    3968:	3f 93       	push	r19
		push r13
    396a:	df 92       	push	r13
		push r12
    396c:	cf 92       	push	r12
		push r9
    396e:	9f 92       	push	r9
		push r7
    3970:	7f 92       	push	r7
		push r6
    3972:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    3974:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    3976:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    3978:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    397a:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    397c:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    397e:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    3980:	00 0d       	add	r16, r0
		adc r17,r1
    3982:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    3984:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    3986:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    3988:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    398a:	00 0d       	add	r16, r0
		adc r17,r1
    398c:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    398e:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    3990:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    3992:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    3994:	69 2d       	mov	r22, r9
		andi r22,0x7		
    3996:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    3998:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    399a:	f8 94       	cli
		breq .+2
    399c:	09 f0       	breq	.+2      	; 0x39a0 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    399e:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    39a0:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    39a2:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    39a4:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    39a6:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    39a8:	02 0c       	add	r0, r2
	    adc r1,r3
    39aa:	13 1c       	adc	r1, r3
		movw ZL,r0
    39ac:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    39ae:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    39b0:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    39b2:	28 81       	ld	r18, Y
		subi YL,-8
    39b4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    39b6:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    39b8:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    39ba:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    39bc:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    39be:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    39c0:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    39c2:	04 0e       	add	r0, r20
	    adc r1,r21
    39c4:	15 1e       	adc	r1, r21
		movw XL,r0
    39c6:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    39c8:	28 81       	ld	r18, Y
		subi YL,-8
    39ca:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    39cc:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    39ce:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    39d0:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    39d2:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    39d4:	a1 01       	movw	r20, r2
		brtc .+2
    39d6:	0e f4       	brtc	.+2      	; 0x39da <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    39d8:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    39da:	04 0e       	add	r0, r20
	    adc r1,r21
    39dc:	15 1e       	adc	r1, r21
		movw ZL,r0
    39de:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    39e0:	3f 01       	movw	r6, r30

000039e2 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    39e2:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    39e4:	a6 0f       	add	r26, r22
		adc XH,r0
    39e6:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    39e8:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    39ea:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    39ec:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    39ee:	22 c0       	rjmp	.+68     	; 0x3a34 <rom_fine_scroll>

000039f0 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    39f0:	00 c0       	rjmp	.+0      	; 0x39f2 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    39f2:	60 e0       	ldi	r22, 0x00	; 0
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    39f4:	7d e1       	ldi	r23, 0x1D	; 29
		add r22,r0
    39f6:	60 0d       	add	r22, r0
		adc r23,r1
    39f8:	71 1d       	adc	r23, r1
		push r22
    39fa:	6f 93       	push	r22
		push r23	
    39fc:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    39fe:	08 95       	ret

00003a00 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    3a00:	0d 91       	ld	r16, X+
    3a02:	c8 95       	lpm
    3a04:	08 b9       	out	0x08, r16	; 8
    3a06:	0d 91       	ld	r16, X+
    3a08:	c8 95       	lpm
    3a0a:	08 b9       	out	0x08, r16	; 8
    3a0c:	0d 91       	ld	r16, X+
    3a0e:	c8 95       	lpm
    3a10:	08 b9       	out	0x08, r16	; 8
    3a12:	0d 91       	ld	r16, X+
    3a14:	c8 95       	lpm
    3a16:	08 b9       	out	0x08, r16	; 8
    3a18:	0d 91       	ld	r16, X+
    3a1a:	c8 95       	lpm
    3a1c:	08 b9       	out	0x08, r16	; 8
    3a1e:	0d 91       	ld	r16, X+
    3a20:	c8 95       	lpm
    3a22:	08 b9       	out	0x08, r16	; 8
    3a24:	0d 91       	ld	r16, X+
    3a26:	c8 95       	lpm
    3a28:	08 b9       	out	0x08, r16	; 8
    3a2a:	0d 91       	ld	r16, X+
    3a2c:	c8 95       	lpm
    3a2e:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    3a30:	1e f5       	brtc	.+70     	; 0x3a78 <romloop>
		rjmp ramloop
    3a32:	40 c0       	rjmp	.+128    	; 0x3ab4 <ramloop>

00003a34 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    3a34:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    3a36:	62 e2       	ldi	r22, 0x22	; 34
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    3a38:	7d e1       	ldi	r23, 0x1D	; 29
		add r22,r0
    3a3a:	60 0d       	add	r22, r0
		adc r23,r1
    3a3c:	71 1d       	adc	r23, r1
		push r22
    3a3e:	6f 93       	push	r22
		push r23	
    3a40:	7f 93       	push	r23
		ret
    3a42:	08 95       	ret

00003a44 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    3a44:	05 91       	lpm	r16, Z+
    3a46:	00 c0       	rjmp	.+0      	; 0x3a48 <rom_fine_scroll_loop+0x4>
    3a48:	08 b9       	out	0x08, r16	; 8
    3a4a:	05 91       	lpm	r16, Z+
    3a4c:	00 c0       	rjmp	.+0      	; 0x3a4e <rom_fine_scroll_loop+0xa>
    3a4e:	08 b9       	out	0x08, r16	; 8
    3a50:	05 91       	lpm	r16, Z+
    3a52:	00 c0       	rjmp	.+0      	; 0x3a54 <rom_fine_scroll_loop+0x10>
    3a54:	08 b9       	out	0x08, r16	; 8
    3a56:	05 91       	lpm	r16, Z+
    3a58:	00 c0       	rjmp	.+0      	; 0x3a5a <rom_fine_scroll_loop+0x16>
    3a5a:	08 b9       	out	0x08, r16	; 8
    3a5c:	05 91       	lpm	r16, Z+
    3a5e:	00 c0       	rjmp	.+0      	; 0x3a60 <rom_fine_scroll_loop+0x1c>
    3a60:	08 b9       	out	0x08, r16	; 8
    3a62:	05 91       	lpm	r16, Z+
    3a64:	00 c0       	rjmp	.+0      	; 0x3a66 <rom_fine_scroll_loop+0x22>
    3a66:	08 b9       	out	0x08, r16	; 8
    3a68:	05 91       	lpm	r16, Z+
    3a6a:	00 c0       	rjmp	.+0      	; 0x3a6c <rom_fine_scroll_loop+0x28>
    3a6c:	08 b9       	out	0x08, r16	; 8
    3a6e:	05 91       	lpm	r16, Z+
    3a70:	00 c0       	rjmp	.+0      	; 0x3a72 <rom_fine_scroll_loop+0x2e>
    3a72:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    3a74:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    3a76:	f6 f0       	brts	.+60     	; 0x3ab4 <ramloop>

00003a78 <romloop>:

	
	romloop:
	    lpm r16,Z+
    3a78:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    3a7a:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    3a7c:	28 81       	ld	r18, Y

	    lpm r16,Z+
    3a7e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    3a80:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    3a82:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    3a84:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    3a86:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    3a88:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    3a8a:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    3a8c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    3a8e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    3a90:	08 f4       	brcc	.+2      	; 0x3a94 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    3a92:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    3a94:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    3a96:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    3a98:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    3a9a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    3a9c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    3a9e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    3aa0:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    3aa2:	1a 95       	dec	r17
   
	    lpm r16,Z+
    3aa4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    3aa6:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    3aa8:	05 91       	lpm	r16, Z+

		breq end	
    3aaa:	39 f1       	breq	.+78     	; 0x3afa <end>
	    movw ZL,r0   	;copy next tile adress
    3aac:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    3aae:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    3ab0:	18 f7       	brcc	.-58     	; 0x3a78 <romloop>
	
		rjmp .
    3ab2:	00 c0       	rjmp	.+0      	; 0x3ab4 <ramloop>

00003ab4 <ramloop>:

	ramloop:

	    ld r16,Z+
    3ab4:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    3ab6:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    3ab8:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    3aba:	01 91       	ld	r16, Z+
		subi YL,-8   		
    3abc:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    3abe:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    3ac0:	23 9f       	mul	r18, r19

	    ld r16,Z+
    3ac2:	01 91       	ld	r16, Z+
		nop
    3ac4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    3ac6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    3ac8:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    3aca:	00 c0       	rjmp	.+0      	; 0x3acc <ramloop+0x18>
   
	    ld r16,Z+
    3acc:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    3ace:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    3ad0:	08 f0       	brcs	.+2      	; 0x3ad4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    3ad2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    3ad4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    3ad6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    3ad8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    3ada:	15 1e       	adc	r1, r21
		rjmp .
    3adc:	00 c0       	rjmp	.+0      	; 0x3ade <ramloop+0x2a>
    
		ld r16,Z+		
    3ade:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    3ae0:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    3ae2:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    3ae4:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    3ae6:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    3ae8:	78 b8       	out	0x08, r7	; 8
		nop
    3aea:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    3aec:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    3aee:	1a 95       	dec	r17
	    breq end
    3af0:	21 f0       	breq	.+8      	; 0x3afa <end>
	
		nop
    3af2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    3af4:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    3af6:	00 f6       	brcc	.-128    	; 0x3a78 <romloop>
		rjmp ramloop
    3af8:	dd cf       	rjmp	.-70     	; 0x3ab4 <ramloop>

00003afa <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    3afa:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    3afc:	27 f5       	brid	.+72     	; 0x3b46 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    3afe:	30 f4       	brcc	.+12     	; 0x3b0c <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    3b00:	f0 01       	movw	r30, r0

00003b02 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    3b02:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    3b04:	08 b9       	out	0x08, r16	; 8
		dec r14
    3b06:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    3b08:	e1 f7       	brne	.-8      	; 0x3b02 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    3b0a:	1f c0       	rjmp	.+62     	; 0x3b4a <end_fine_scroll_ram>

00003b0c <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    3b0c:	f6 01       	movw	r30, r12
		nop
    3b0e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    3b10:	98 b8       	out	0x08, r9	; 8
		dec r14
    3b12:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    3b14:	c9 f0       	breq	.+50     	; 0x3b48 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    3b16:	05 91       	lpm	r16, Z+
    3b18:	08 b9       	out	0x08, r16	; 8
    3b1a:	ea 94       	dec	r14
    3b1c:	a9 f0       	breq	.+42     	; 0x3b48 <end_fine_scroll_rom>
    3b1e:	05 91       	lpm	r16, Z+
    3b20:	08 b9       	out	0x08, r16	; 8
    3b22:	ea 94       	dec	r14
    3b24:	89 f0       	breq	.+34     	; 0x3b48 <end_fine_scroll_rom>
    3b26:	05 91       	lpm	r16, Z+
    3b28:	08 b9       	out	0x08, r16	; 8
    3b2a:	ea 94       	dec	r14
    3b2c:	69 f0       	breq	.+26     	; 0x3b48 <end_fine_scroll_rom>
    3b2e:	05 91       	lpm	r16, Z+
    3b30:	08 b9       	out	0x08, r16	; 8
    3b32:	ea 94       	dec	r14
    3b34:	49 f0       	breq	.+18     	; 0x3b48 <end_fine_scroll_rom>
    3b36:	05 91       	lpm	r16, Z+
    3b38:	08 b9       	out	0x08, r16	; 8
    3b3a:	ea 94       	dec	r14
    3b3c:	29 f0       	breq	.+10     	; 0x3b48 <end_fine_scroll_rom>
    3b3e:	05 91       	lpm	r16, Z+
    3b40:	08 b9       	out	0x08, r16	; 8
    3b42:	ea 94       	dec	r14
    3b44:	09 f0       	breq	.+2      	; 0x3b48 <end_fine_scroll_rom>

00003b46 <end_fine_scroll>:
	...

00003b48 <end_fine_scroll_rom>:
	...

00003b4a <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    3b4a:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    3b4c:	08 b9       	out	0x08, r16	; 8

		pop r6
    3b4e:	6f 90       	pop	r6
		pop r7
    3b50:	7f 90       	pop	r7
		pop r9
    3b52:	9f 90       	pop	r9
		pop r12
    3b54:	cf 90       	pop	r12
		pop r13
    3b56:	df 90       	pop	r13
		pop r19
    3b58:	3f 91       	pop	r19
		pop r22
    3b5a:	6f 91       	pop	r22
		pop r23
    3b5c:	7f 91       	pop	r23
		pop YH
    3b5e:	df 91       	pop	r29
		pop YL
    3b60:	cf 91       	pop	r28

		ret
    3b62:	08 95       	ret

00003b64 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    3b64:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    3b66:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    3b6a:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    3b6e:	82 9f       	mul	r24, r18
	add ZL,r0
    3b70:	e0 0d       	add	r30, r0
	adc ZH,r1
    3b72:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    3b74:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3b76:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    3b78:	62 9f       	mul	r22, r18
	add XL,r0
    3b7a:	a0 0d       	add	r26, r0
	adc XH,r1
    3b7c:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    3b7e:	15 90       	lpm	r1, Z+
    3b80:	1d 92       	st	X+, r1
    3b82:	15 90       	lpm	r1, Z+
    3b84:	1d 92       	st	X+, r1
    3b86:	15 90       	lpm	r1, Z+
    3b88:	1d 92       	st	X+, r1
    3b8a:	15 90       	lpm	r1, Z+
    3b8c:	1d 92       	st	X+, r1
    3b8e:	15 90       	lpm	r1, Z+
    3b90:	1d 92       	st	X+, r1
    3b92:	15 90       	lpm	r1, Z+
    3b94:	1d 92       	st	X+, r1
    3b96:	15 90       	lpm	r1, Z+
    3b98:	1d 92       	st	X+, r1
    3b9a:	15 90       	lpm	r1, Z+
    3b9c:	1d 92       	st	X+, r1
    3b9e:	15 90       	lpm	r1, Z+
    3ba0:	1d 92       	st	X+, r1
    3ba2:	15 90       	lpm	r1, Z+
    3ba4:	1d 92       	st	X+, r1
    3ba6:	15 90       	lpm	r1, Z+
    3ba8:	1d 92       	st	X+, r1
    3baa:	15 90       	lpm	r1, Z+
    3bac:	1d 92       	st	X+, r1
    3bae:	15 90       	lpm	r1, Z+
    3bb0:	1d 92       	st	X+, r1
    3bb2:	15 90       	lpm	r1, Z+
    3bb4:	1d 92       	st	X+, r1
    3bb6:	15 90       	lpm	r1, Z+
    3bb8:	1d 92       	st	X+, r1
    3bba:	15 90       	lpm	r1, Z+
    3bbc:	1d 92       	st	X+, r1
    3bbe:	15 90       	lpm	r1, Z+
    3bc0:	1d 92       	st	X+, r1
    3bc2:	15 90       	lpm	r1, Z+
    3bc4:	1d 92       	st	X+, r1
    3bc6:	15 90       	lpm	r1, Z+
    3bc8:	1d 92       	st	X+, r1
    3bca:	15 90       	lpm	r1, Z+
    3bcc:	1d 92       	st	X+, r1
    3bce:	15 90       	lpm	r1, Z+
    3bd0:	1d 92       	st	X+, r1
    3bd2:	15 90       	lpm	r1, Z+
    3bd4:	1d 92       	st	X+, r1
    3bd6:	15 90       	lpm	r1, Z+
    3bd8:	1d 92       	st	X+, r1
    3bda:	15 90       	lpm	r1, Z+
    3bdc:	1d 92       	st	X+, r1
    3bde:	15 90       	lpm	r1, Z+
    3be0:	1d 92       	st	X+, r1
    3be2:	15 90       	lpm	r1, Z+
    3be4:	1d 92       	st	X+, r1
    3be6:	15 90       	lpm	r1, Z+
    3be8:	1d 92       	st	X+, r1
    3bea:	15 90       	lpm	r1, Z+
    3bec:	1d 92       	st	X+, r1
    3bee:	15 90       	lpm	r1, Z+
    3bf0:	1d 92       	st	X+, r1
    3bf2:	15 90       	lpm	r1, Z+
    3bf4:	1d 92       	st	X+, r1
    3bf6:	15 90       	lpm	r1, Z+
    3bf8:	1d 92       	st	X+, r1
    3bfa:	15 90       	lpm	r1, Z+
    3bfc:	1d 92       	st	X+, r1
    3bfe:	15 90       	lpm	r1, Z+
    3c00:	1d 92       	st	X+, r1
    3c02:	15 90       	lpm	r1, Z+
    3c04:	1d 92       	st	X+, r1
    3c06:	15 90       	lpm	r1, Z+
    3c08:	1d 92       	st	X+, r1
    3c0a:	15 90       	lpm	r1, Z+
    3c0c:	1d 92       	st	X+, r1
    3c0e:	15 90       	lpm	r1, Z+
    3c10:	1d 92       	st	X+, r1
    3c12:	15 90       	lpm	r1, Z+
    3c14:	1d 92       	st	X+, r1
    3c16:	15 90       	lpm	r1, Z+
    3c18:	1d 92       	st	X+, r1
    3c1a:	15 90       	lpm	r1, Z+
    3c1c:	1d 92       	st	X+, r1
    3c1e:	15 90       	lpm	r1, Z+
    3c20:	1d 92       	st	X+, r1
    3c22:	15 90       	lpm	r1, Z+
    3c24:	1d 92       	st	X+, r1
    3c26:	15 90       	lpm	r1, Z+
    3c28:	1d 92       	st	X+, r1
    3c2a:	15 90       	lpm	r1, Z+
    3c2c:	1d 92       	st	X+, r1
    3c2e:	15 90       	lpm	r1, Z+
    3c30:	1d 92       	st	X+, r1
    3c32:	15 90       	lpm	r1, Z+
    3c34:	1d 92       	st	X+, r1
    3c36:	15 90       	lpm	r1, Z+
    3c38:	1d 92       	st	X+, r1
    3c3a:	15 90       	lpm	r1, Z+
    3c3c:	1d 92       	st	X+, r1
    3c3e:	15 90       	lpm	r1, Z+
    3c40:	1d 92       	st	X+, r1
    3c42:	15 90       	lpm	r1, Z+
    3c44:	1d 92       	st	X+, r1
    3c46:	15 90       	lpm	r1, Z+
    3c48:	1d 92       	st	X+, r1
    3c4a:	15 90       	lpm	r1, Z+
    3c4c:	1d 92       	st	X+, r1
    3c4e:	15 90       	lpm	r1, Z+
    3c50:	1d 92       	st	X+, r1
    3c52:	15 90       	lpm	r1, Z+
    3c54:	1d 92       	st	X+, r1
    3c56:	15 90       	lpm	r1, Z+
    3c58:	1d 92       	st	X+, r1
    3c5a:	15 90       	lpm	r1, Z+
    3c5c:	1d 92       	st	X+, r1
    3c5e:	15 90       	lpm	r1, Z+
    3c60:	1d 92       	st	X+, r1
    3c62:	15 90       	lpm	r1, Z+
    3c64:	1d 92       	st	X+, r1
    3c66:	15 90       	lpm	r1, Z+
    3c68:	1d 92       	st	X+, r1
    3c6a:	15 90       	lpm	r1, Z+
    3c6c:	1d 92       	st	X+, r1
    3c6e:	15 90       	lpm	r1, Z+
    3c70:	1d 92       	st	X+, r1
    3c72:	15 90       	lpm	r1, Z+
    3c74:	1d 92       	st	X+, r1
    3c76:	15 90       	lpm	r1, Z+
    3c78:	1d 92       	st	X+, r1
    3c7a:	15 90       	lpm	r1, Z+
    3c7c:	1d 92       	st	X+, r1
	clr r1
    3c7e:	11 24       	eor	r1, r1
	ret
    3c80:	08 95       	ret

00003c82 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    3c82:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    3c84:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    3c86:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    3c88:	82 9f       	mul	r24, r18
	add ZL,r0
    3c8a:	e0 0d       	add	r30, r0
	adc ZH,r1
    3c8c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    3c8e:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3c90:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    3c92:	62 9f       	mul	r22, r18
	add XL,r0
    3c94:	a0 0d       	add	r26, r0
	adc XH,r1
    3c96:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    3c98:	11 90       	ld	r1, Z+
    3c9a:	1d 92       	st	X+, r1
    3c9c:	11 90       	ld	r1, Z+
    3c9e:	1d 92       	st	X+, r1
    3ca0:	11 90       	ld	r1, Z+
    3ca2:	1d 92       	st	X+, r1
    3ca4:	11 90       	ld	r1, Z+
    3ca6:	1d 92       	st	X+, r1
    3ca8:	11 90       	ld	r1, Z+
    3caa:	1d 92       	st	X+, r1
    3cac:	11 90       	ld	r1, Z+
    3cae:	1d 92       	st	X+, r1
    3cb0:	11 90       	ld	r1, Z+
    3cb2:	1d 92       	st	X+, r1
    3cb4:	11 90       	ld	r1, Z+
    3cb6:	1d 92       	st	X+, r1
    3cb8:	11 90       	ld	r1, Z+
    3cba:	1d 92       	st	X+, r1
    3cbc:	11 90       	ld	r1, Z+
    3cbe:	1d 92       	st	X+, r1
    3cc0:	11 90       	ld	r1, Z+
    3cc2:	1d 92       	st	X+, r1
    3cc4:	11 90       	ld	r1, Z+
    3cc6:	1d 92       	st	X+, r1
    3cc8:	11 90       	ld	r1, Z+
    3cca:	1d 92       	st	X+, r1
    3ccc:	11 90       	ld	r1, Z+
    3cce:	1d 92       	st	X+, r1
    3cd0:	11 90       	ld	r1, Z+
    3cd2:	1d 92       	st	X+, r1
    3cd4:	11 90       	ld	r1, Z+
    3cd6:	1d 92       	st	X+, r1
    3cd8:	11 90       	ld	r1, Z+
    3cda:	1d 92       	st	X+, r1
    3cdc:	11 90       	ld	r1, Z+
    3cde:	1d 92       	st	X+, r1
    3ce0:	11 90       	ld	r1, Z+
    3ce2:	1d 92       	st	X+, r1
    3ce4:	11 90       	ld	r1, Z+
    3ce6:	1d 92       	st	X+, r1
    3ce8:	11 90       	ld	r1, Z+
    3cea:	1d 92       	st	X+, r1
    3cec:	11 90       	ld	r1, Z+
    3cee:	1d 92       	st	X+, r1
    3cf0:	11 90       	ld	r1, Z+
    3cf2:	1d 92       	st	X+, r1
    3cf4:	11 90       	ld	r1, Z+
    3cf6:	1d 92       	st	X+, r1
    3cf8:	11 90       	ld	r1, Z+
    3cfa:	1d 92       	st	X+, r1
    3cfc:	11 90       	ld	r1, Z+
    3cfe:	1d 92       	st	X+, r1
    3d00:	11 90       	ld	r1, Z+
    3d02:	1d 92       	st	X+, r1
    3d04:	11 90       	ld	r1, Z+
    3d06:	1d 92       	st	X+, r1
    3d08:	11 90       	ld	r1, Z+
    3d0a:	1d 92       	st	X+, r1
    3d0c:	11 90       	ld	r1, Z+
    3d0e:	1d 92       	st	X+, r1
    3d10:	11 90       	ld	r1, Z+
    3d12:	1d 92       	st	X+, r1
    3d14:	11 90       	ld	r1, Z+
    3d16:	1d 92       	st	X+, r1
    3d18:	11 90       	ld	r1, Z+
    3d1a:	1d 92       	st	X+, r1
    3d1c:	11 90       	ld	r1, Z+
    3d1e:	1d 92       	st	X+, r1
    3d20:	11 90       	ld	r1, Z+
    3d22:	1d 92       	st	X+, r1
    3d24:	11 90       	ld	r1, Z+
    3d26:	1d 92       	st	X+, r1
    3d28:	11 90       	ld	r1, Z+
    3d2a:	1d 92       	st	X+, r1
    3d2c:	11 90       	ld	r1, Z+
    3d2e:	1d 92       	st	X+, r1
    3d30:	11 90       	ld	r1, Z+
    3d32:	1d 92       	st	X+, r1
    3d34:	11 90       	ld	r1, Z+
    3d36:	1d 92       	st	X+, r1
    3d38:	11 90       	ld	r1, Z+
    3d3a:	1d 92       	st	X+, r1
    3d3c:	11 90       	ld	r1, Z+
    3d3e:	1d 92       	st	X+, r1
    3d40:	11 90       	ld	r1, Z+
    3d42:	1d 92       	st	X+, r1
    3d44:	11 90       	ld	r1, Z+
    3d46:	1d 92       	st	X+, r1
    3d48:	11 90       	ld	r1, Z+
    3d4a:	1d 92       	st	X+, r1
    3d4c:	11 90       	ld	r1, Z+
    3d4e:	1d 92       	st	X+, r1
    3d50:	11 90       	ld	r1, Z+
    3d52:	1d 92       	st	X+, r1
    3d54:	11 90       	ld	r1, Z+
    3d56:	1d 92       	st	X+, r1
    3d58:	11 90       	ld	r1, Z+
    3d5a:	1d 92       	st	X+, r1
    3d5c:	11 90       	ld	r1, Z+
    3d5e:	1d 92       	st	X+, r1
    3d60:	11 90       	ld	r1, Z+
    3d62:	1d 92       	st	X+, r1
    3d64:	11 90       	ld	r1, Z+
    3d66:	1d 92       	st	X+, r1
    3d68:	11 90       	ld	r1, Z+
    3d6a:	1d 92       	st	X+, r1
    3d6c:	11 90       	ld	r1, Z+
    3d6e:	1d 92       	st	X+, r1
    3d70:	11 90       	ld	r1, Z+
    3d72:	1d 92       	st	X+, r1
    3d74:	11 90       	ld	r1, Z+
    3d76:	1d 92       	st	X+, r1
    3d78:	11 90       	ld	r1, Z+
    3d7a:	1d 92       	st	X+, r1
    3d7c:	11 90       	ld	r1, Z+
    3d7e:	1d 92       	st	X+, r1
    3d80:	11 90       	ld	r1, Z+
    3d82:	1d 92       	st	X+, r1
    3d84:	11 90       	ld	r1, Z+
    3d86:	1d 92       	st	X+, r1
    3d88:	11 90       	ld	r1, Z+
    3d8a:	1d 92       	st	X+, r1
    3d8c:	11 90       	ld	r1, Z+
    3d8e:	1d 92       	st	X+, r1
    3d90:	11 90       	ld	r1, Z+
    3d92:	1d 92       	st	X+, r1
    3d94:	11 90       	ld	r1, Z+
    3d96:	1d 92       	st	X+, r1
	clr r1
    3d98:	11 24       	eor	r1, r1
	ret
    3d9a:	08 95       	ret

00003d9c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    3d9c:	0f 93       	push	r16
	push r17
    3d9e:	1f 93       	push	r17
	push YL
    3da0:	cf 93       	push	r28
	push YH
    3da2:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    3da4:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    3da6:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    3da8:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    3daa:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    3dac:	e0 0d       	add	r30, r0
	adc ZH,r1
    3dae:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    3db0:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    3db2:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    3db4:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    3db6:	8e 9f       	mul	r24, r30
	movw r26,r0
    3db8:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    3dba:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    3dbc:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    3dbe:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    3dc0:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    3dc2:	00 24       	eor	r0, r0
	add YL,r1
    3dc4:	c1 0d       	add	r28, r1
	adc YH,r0		
    3dc6:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    3dc8:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    3dca:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    3dcc:	ea 0f       	add	r30, r26
	adc ZH,r27
    3dce:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    3dd0:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    3dd2:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    3dd4:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    3dd6:	69 9f       	mul	r22, r25
	add XL,r0
    3dd8:	a0 0d       	add	r26, r0
	adc XH,r1
    3dda:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    3ddc:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    3dde:	dd 27       	eor	r29, r29

	cpi r20,0	
    3de0:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    3de2:	51 f4       	brne	.+20     	; 0x3df8 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    3de4:	a2 0f       	add	r26, r18
	adc XH,r1
    3de6:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    3de8:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    3dea:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    3dec:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    3dee:	11 c0       	rjmp	.+34     	; 0x3e12 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    3df0:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    3df2:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    3df4:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    3df6:	0d c0       	rjmp	.+26     	; 0x3e12 <x_check_end>

00003df8 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    3df8:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    3dfa:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    3dfc:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    3dfe:	04 c0       	rjmp	.+8      	; 0x3e08 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    3e00:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    3e02:	e8 0f       	add	r30, r24
	adc ZH,r1	
    3e04:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    3e06:	05 c0       	rjmp	.+10     	; 0x3e12 <x_check_end>

00003e08 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    3e08:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    3e0a:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    3e0c:	e2 0f       	add	r30, r18
	adc ZH,r1
    3e0e:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    3e10:	31 97       	sbiw	r30, 0x01	; 1

00003e12 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    3e12:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    3e14:	51 f4       	brne	.+20     	; 0x3e2a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    3e16:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    3e18:	93 9f       	mul	r25, r19
	add XL,r0
    3e1a:	a0 0d       	add	r26, r0
	adc XH,r1
    3e1c:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    3e1e:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    3e20:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    3e22:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    3e24:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    3e28:	0a c0       	rjmp	.+20     	; 0x3e3e <y_check_end>

00003e2a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    3e2a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    3e2c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    3e2e:	63 2f       	mov	r22, r19
	dec r22
    3e30:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    3e32:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    3e34:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    3e36:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    3e38:	56 9f       	mul	r21, r22
	add ZL,r0
    3e3a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    3e3c:	f1 1d       	adc	r31, r1

00003e3e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    3e3e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    3e40:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    3e42:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    3e44:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    3e46:	00 ff       	sbrs	r16, 0
	clr r23
    3e48:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    3e4a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    3e4c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    3e4e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    3e50:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    3e52:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    3e54:	59 1b       	sub	r21, r25

00003e56 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    3e56:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    3e58:	48 1b       	sub	r20, r24

00003e5a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    3e5a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    3e5c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    3e5e:	2c 93       	st	X, r18
	adiw XL,1
    3e60:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    3e62:	e6 0f       	add	r30, r22
	adc ZH,r23
    3e64:	f7 1f       	adc	r31, r23
	dec r20
    3e66:	4a 95       	dec	r20
	brne x_loop
    3e68:	c1 f7       	brne	.-16     	; 0x3e5a <x_loop>

	add ZL,YL		;src+=srcXdiff
    3e6a:	ec 0f       	add	r30, r28
	adc ZH,YH
    3e6c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    3e6e:	a8 0f       	add	r26, r24
	adc XH,r1
    3e70:	b1 1d       	adc	r27, r1
	dec r21
    3e72:	5a 95       	dec	r21
	brne y_loop
    3e74:	81 f7       	brne	.-32     	; 0x3e56 <y_loop>


	pop YH
    3e76:	df 91       	pop	r29
	pop YL
    3e78:	cf 91       	pop	r28
	pop r17
    3e7a:	1f 91       	pop	r17
	pop r16
    3e7c:	0f 91       	pop	r16
	ret
    3e7e:	08 95       	ret

00003e80 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    3e80:	0f 92       	push	r0
	push r1
    3e82:	1f 92       	push	r1
	push ZL;2
    3e84:	ef 93       	push	r30
	push ZH;2
    3e86:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    3e88:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    3e8a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    3e8c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    3e90:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    3e92:	f1 e0       	ldi	r31, 0x01	; 1

00003e94 <latency_loop>:
latency_loop:
	cp ZL,ZH
    3e94:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    3e96:	00 f0       	brcs	.+0      	; 0x3e98 <latency_loop+0x4>
	inc ZH
    3e98:	f3 95       	inc	r31
	cpi ZH,10
    3e9a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    3e9c:	d8 f3       	brcs	.-10     	; 0x3e94 <latency_loop>
	jmp .
    3e9e:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    3ea2:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    3ea6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    3ea8:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    3eac:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    3eb0:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    3eb2:	57 c0       	rjmp	.+174    	; 0x3f62 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    3eb4:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    3eb6:	98 f0       	brcs	.+38     	; 0x3ede <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    3eb8:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    3eba:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    3ebe:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    3ec0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    3ec4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    3ec6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    3ec8:	26 f4       	brtc	.+8      	; 0x3ed2 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    3eca:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    3ecc:	0e 94 38 20 	call	0x4070	; 0x4070 <update_sound>
	rjmp sync_end
    3ed0:	b7 c0       	rjmp	.+366    	; 0x4040 <sync_end>

00003ed2 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    3ed2:	e5 e1       	ldi	r30, 0x15	; 21
    3ed4:	ea 95       	dec	r30
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <sync_pre_eq_no_sound_update+0x2>
    3ed8:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    3eda:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    3edc:	b1 c0       	rjmp	.+354    	; 0x4040 <sync_end>

00003ede <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    3ede:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    3ee0:	38 f1       	brcs	.+78     	; 0x3f30 <sync_post_eq>

	rjmp .
    3ee2:	00 c0       	rjmp	.+0      	; 0x3ee4 <sync_eq+0x6>
	rjmp .
    3ee4:	00 c0       	rjmp	.+0      	; 0x3ee6 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3ee6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    3ee8:	e0 fb       	bst	r30, 0
	ldi ZL,4
    3eea:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    3eec:	16 f4       	brtc	.+4      	; 0x3ef2 <sync_eq_skip>
	
	call update_sound
    3eee:	0e 94 38 20 	call	0x4070	; 0x4070 <update_sound>

00003ef2 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    3ef2:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    3ef4:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    3ef8:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    3efa:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    3efe:	a0 c0       	rjmp	.+320    	; 0x4040 <sync_end>

00003f00 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    3f00:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    3f02:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    3f04:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    3f06:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    3f0a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    3f0c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    3f0e:	00 f0       	brcs	.+0      	; 0x3f10 <__vector_14+0x10>

	cpi ZL,2
    3f10:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    3f12:	00 f0       	brcs	.+0      	; 0x3f14 <__vector_14+0x14>

	cpi ZL,3
    3f14:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    3f16:	00 f0       	brcs	.+0      	; 0x3f18 <__vector_14+0x18>

	cpi ZL,4
    3f18:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    3f1a:	00 f0       	brcs	.+0      	; 0x3f1c <__vector_14+0x1c>

	cpi ZL,5
    3f1c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    3f1e:	00 f0       	brcs	.+0      	; 0x3f20 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    3f20:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    3f22:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    3f24:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    3f28:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    3f2a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    3f2c:	ef 91       	pop	r30
	reti
    3f2e:	18 95       	reti

00003f30 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    3f30:	00 c0       	rjmp	.+0      	; 0x3f32 <sync_post_eq+0x2>

	bst ZL,0
    3f32:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3f34:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    3f36:	26 f4       	brtc	.+8      	; 0x3f40 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    3f38:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    3f3a:	0e 94 38 20 	call	0x4070	; 0x4070 <update_sound>
	rjmp sync_pre_eq_cont
    3f3e:	05 c0       	rjmp	.+10     	; 0x3f4a <sync_pre_eq_cont>

00003f40 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    3f40:	e5 e1       	ldi	r30, 0x15	; 21
    3f42:	ea 95       	dec	r30
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <sync_post_eq_no_sound_update+0x2>
    3f46:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    3f48:	28 9a       	sbi	0x05, 0	; 5

00003f4a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    3f4a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    3f4e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    3f50:	09 f0       	breq	.+2      	; 0x3f54 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    3f52:	76 c0       	rjmp	.+236    	; 0x4040 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    3f54:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    3f56:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    3f5a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    3f5c:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    3f60:	6f c0       	rjmp	.+222    	; 0x4040 <sync_end>

00003f62 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    3f62:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    3f64:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    3f68:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    3f6a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    3f6e:	00 c0       	rjmp	.+0      	; 0x3f70 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    3f70:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    3f72:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    3f74:	00 c0       	rjmp	.+0      	; 0x3f76 <sync_hsync+0x14>
	call update_sound
    3f76:	0e 94 38 20 	call	0x4070	; 0x4070 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    3f7a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    3f7c:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    3f80:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    3f82:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    3f86:	ef 17       	cp	r30, r31
	brsh no_render
    3f88:	d0 f4       	brcc	.+52     	; 0x3fbe <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    3f8a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    3f8c:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    3f90:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    3f92:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    3f96:	f0 19       	sub	r31, r0
	cp ZL,ZH
    3f98:	ef 17       	cp	r30, r31
	brlo no_render
    3f9a:	88 f0       	brcs	.+34     	; 0x3fbe <no_render>

	;push r1-r29
	ldi ZL,29
    3f9c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    3f9e:	ff 27       	eor	r31, r31

00003fa0 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    3fa0:	00 80       	ld	r0, Z
	push r0
    3fa2:	0f 92       	push	r0
	dec ZL
    3fa4:	ea 95       	dec	r30
	brne push_loop	
    3fa6:	e1 f7       	brne	.-8      	; 0x3fa0 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    3fa8:	06 e0       	ldi	r16, 0x06	; 6
    3faa:	0a 95       	dec	r16
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    3fae:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    3fb2:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    3fb4:	ff 27       	eor	r31, r31

00003fb6 <pop_loop>:
pop_loop:
	pop r0
    3fb6:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    3fb8:	01 92       	st	Z+, r0
	cpi ZL,30
    3fba:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    3fbc:	e0 f3       	brcs	.-8      	; 0x3fb6 <pop_loop>

00003fbe <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    3fbe:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    3fc2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <no_render+0xa>
	rjmp sync_end
    3fc6:	3c c0       	rjmp	.+120    	; 0x4040 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    3fc8:	2f 93       	push	r18
	push r19
    3fca:	3f 93       	push	r19
	push r20
    3fcc:	4f 93       	push	r20
	push r21
    3fce:	5f 93       	push	r21
	push r22
    3fd0:	6f 93       	push	r22
	push r23
    3fd2:	7f 93       	push	r23
	push r24
    3fd4:	8f 93       	push	r24
	push r25
    3fd6:	9f 93       	push	r25
	push r26
    3fd8:	af 93       	push	r26
	push r27
    3fda:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    3fdc:	78 94       	sei
	clr r1
    3fde:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    3fe0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    3fe2:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    3fe6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    3fe8:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    3fec:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    3ff0:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    3ff4:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    3ff6:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    3ffa:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    3ffe:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    4002:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    4006:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4008:	f1 05       	cpc	r31, r1
	breq .+2 
    400a:	09 f0       	breq	.+2      	; 0x400e <no_render+0x50>
	icall
    400c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    400e:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    4012:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    4016:	0e 94 32 20 	call	0x4064	; 0x4064 <process_music>
	clr r1
    401a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    401c:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    4020:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    4024:	e1 15       	cp	r30, r1
	cpc ZH,r1
    4026:	f1 05       	cpc	r31, r1
	breq .+2 
    4028:	09 f0       	breq	.+2      	; 0x402c <no_render+0x6e>
	icall
    402a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    402c:	bf 91       	pop	r27
	pop r26
    402e:	af 91       	pop	r26
	pop r25
    4030:	9f 91       	pop	r25
	pop r24
    4032:	8f 91       	pop	r24
	pop r23
    4034:	7f 91       	pop	r23
	pop r22
    4036:	6f 91       	pop	r22
	pop r21
    4038:	5f 91       	pop	r21
	pop r20
    403a:	4f 91       	pop	r20
	pop r19
    403c:	3f 91       	pop	r19
	pop r18
    403e:	2f 91       	pop	r18

00004040 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    4040:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    4042:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    4044:	ff 91       	pop	r31
	pop ZL
    4046:	ef 91       	pop	r30
	pop r1
    4048:	1f 90       	pop	r1
	pop r0
    404a:	0f 90       	pop	r0
	reti
    404c:	18 95       	reti

0000404e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    404e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    4050:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    4052:	00 c0       	rjmp	.+0      	; 0x4054 <hsync_pulse+0x6>
	call update_sound
    4054:	0e 94 38 20 	call	0x4070	; 0x4070 <update_sound>

	lds ZL,sync_pulse
    4058:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    405c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    405e:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    4062:	08 95       	ret

00004064 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    4064:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    4068:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    406a:	0e 94 25 24 	call	0x484a	; 0x484a <ProcessMusic>
#endif

	ret
    406e:	08 95       	ret

00004070 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    4070:	0f 93       	push	r16
	push r17
    4072:	1f 93       	push	r17
	push r18
    4074:	2f 93       	push	r18
	push r28
    4076:	cf 93       	push	r28
	push r29
    4078:	df 93       	push	r29

	mov r18,ZL
    407a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    407c:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    4080:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    4084:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    4086:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    408a:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    408e:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    4092:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    4094:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    4096:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    409a:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    409e:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    40a2:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    40a4:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    40a6:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    40a8:	d0 2d       	mov	r29, r0
	nop
    40aa:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    40ac:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    40b0:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    40b4:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    40b6:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    40ba:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    40be:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    40c2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    40c4:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    40c6:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    40ca:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    40ce:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    40d2:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    40d4:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    40d6:	20 ff       	sbrs	r18, 0
	rjmp .
    40d8:	00 c0       	rjmp	.+0      	; 0x40da <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    40da:	01 03       	mulsu	r16, r17
	clr r0
    40dc:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    40de:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    40e0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    40e2:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    40e4:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    40e8:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    40ec:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    40ee:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    40f2:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    40f6:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    40fa:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    40fc:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    40fe:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    4102:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    4106:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    410a:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    410c:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    410e:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    4110:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    4112:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    4116:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    411a:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    411e:	ea 95       	dec	r30
	brpl ch4_no_shift	
    4120:	92 f4       	brpl	.+36     	; 0x4146 <ch4_no_shift>

	lds ZH,tr4_params
    4122:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    4126:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    4128:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    412a:	00 2e       	mov	r0, r16
	lsr r0
    412c:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    412e:	00 26       	eor	r0, r16
	bst r0,0
    4130:	00 fa       	bst	r0, 0
	lsr r17
    4132:	16 95       	lsr	r17
	ror r16
    4134:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    4136:	16 f9       	bld	r17, 6
	sbrs ZH,0
    4138:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    413a:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    413c:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    4140:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    4144:	03 c0       	rjmp	.+6      	; 0x414c <ch4_end>

00004146 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    4146:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    4148:	1a 95       	dec	r17
	brne .-4
    414a:	f1 f7       	brne	.-4      	; 0x4148 <ch4_no_shift+0x2>

0000414c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    414c:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    4150:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    4152:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    4154:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    4156:	21 ff       	sbrs	r18, 1
	rjmp .
    4158:	00 c0       	rjmp	.+0      	; 0x415a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    415a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    415c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    415e:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    4162:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    4164:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    4166:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    4168:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    416a:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    416e:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    4172:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    4174:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    4178:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    417c:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    4180:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    4182:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    4186:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    4188:	f0 1f       	adc	r31, r16

	movw r16,ZL
    418a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    418c:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    4190:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    4194:	00 19       	sub	r16, r0
	sbc r17,r1
    4196:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    4198:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    419c:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    41a0:	e0 15       	cp	r30, r0
	cpc ZH,r1
    41a2:	f1 05       	cpc	r31, r1
	brlo .+2
    41a4:	08 f0       	brcs	.+2      	; 0x41a8 <ch4_end+0x5c>
	movw ZL,r16
    41a6:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    41a8:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    41ac:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    41b0:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    41b2:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    41b6:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    41b8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    41ba:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    41bc:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    41be:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    41c0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    41c2:	d0 05       	cpc	r29, r0
	brlt .+2
    41c4:	0c f0       	brlt	.+2      	; 0x41c8 <ch4_end+0x7c>
	ldi r28,127
    41c6:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    41c8:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    41ca:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    41cc:	d0 05       	cpc	r29, r0
	brge .+2
    41ce:	0c f4       	brge	.+2      	; 0x41d2 <ch4_end+0x86>
	ldi r28,-128
    41d0:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    41d2:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    41d4:	c0 93 b3 00 	sts	0x00B3, r28

000041d8 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    41d8:	df 91       	pop	r29
	pop r28
    41da:	cf 91       	pop	r28
	pop r18
    41dc:	2f 91       	pop	r18
	pop r17
    41de:	1f 91       	pop	r17
	pop r16
    41e0:	0f 91       	pop	r16
	
	ret
    41e2:	08 95       	ret

000041e4 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    41e4:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    41e8:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    41ec:	08 95       	ret

000041ee <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    41ee:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    41f0:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    41f2:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    41f4:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    41f6:	6c e1       	ldi	r22, 0x1C	; 28

000041f8 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    41f8:	6d 93       	st	X+, r22
	sbiw r30,1
    41fa:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    41fc:	e9 f7       	brne	.-6      	; 0x41f8 <fill_vram_loop>

	clr r1
    41fe:	11 24       	eor	r1, r1

	ret
    4200:	08 95       	ret

00004202 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    4202:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    4206:	45 0f       	add	r20, r21
	rjmp SetTile	
    4208:	00 c0       	rjmp	.+0      	; 0x420a <SetTile>

0000420a <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    420a:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    420c:	76 2f       	mov	r23, r22
	lsr r22
    420e:	66 95       	lsr	r22
	lsr r22
    4210:	66 95       	lsr	r22
	lsr r22			;y>>3
    4212:	66 95       	lsr	r22
	ldi r18,8		
    4214:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    4216:	82 9f       	mul	r24, r18
	movw XL,r0
    4218:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    421a:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    421c:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    421e:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    4220:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    4222:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    4224:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    4226:	4c 93       	st	X, r20

	clr r1
    4228:	11 24       	eor	r1, r1

	ret
    422a:	08 95       	ret

0000422c <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    422c:	80 93 98 0c 	sts	0x0C98, r24
	ret
    4230:	08 95       	ret

00004232 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    4232:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    4236:	90 93 97 0c 	sts	0x0C97, r25
	ret
    423a:	08 95       	ret

0000423c <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    423c:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    4240:	81 70       	andi	r24, 0x01	; 1
	ret
    4242:	08 95       	ret

00004244 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    4244:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    4248:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    424a:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    424e:	08 95       	ret

00004250 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    4250:	88 23       	and	r24, r24
	brne rj_p2
    4252:	29 f4       	brne	.+10     	; 0x425e <rj_p2>
		
	lds r24,joypad1_status_lo
    4254:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    4258:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    425c:	08 95       	ret

0000425e <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    425e:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    4262:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    4266:	08 95       	ret

00004268 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    4268:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    426a:	fe cf       	rjmp	.-4      	; 0x4268 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    426c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    426e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    4270:	60 bd       	out	0x20, r22	; 32
   cli
    4272:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    4274:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    4276:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    4278:	78 94       	sei
   ret
    427a:	08 95       	ret

0000427c <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    427c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    427e:	fe cf       	rjmp	.-4      	; 0x427c <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    4280:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    4282:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    4284:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    4286:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    4288:	80 b5       	in	r24, 0x20	; 32
   sei
    428a:	78 94       	sei
   ret
    428c:	08 95       	ret

0000428e <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    428e:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    4290:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    4294:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    4298:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    429c:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    42a0:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    42a4:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    42a8:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    42ac:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    42b0:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    42b4:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    42b6:	80 93 81 00 	sts	0x0081, r24

		cli
    42ba:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    42bc:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    42be:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    42c2:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    42c4:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    42c8:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    42ca:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    42ce:	90 93 60 00 	sts	0x0060, r25
	
		sei
    42d2:	78 94       	sei

000042d4 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    42d4:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    42d8:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    42da:	e0 f3       	brcs	.-8      	; 0x42d4 <wait>

		ret
    42dc:	08 95       	ret

000042de <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    42de:	0f 93       	push	r16
		push r17
    42e0:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    42e2:	0f b7       	in	r16, 0x3f	; 63
		push r16
    42e4:	0f 93       	push	r16

		lds r16,sync_pulse
    42e6:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    42ea:	03 95       	inc	r16
		sts sync_pulse,r16
    42ec:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    42f0:	00 fd       	sbrc	r16, 0
		rjmp 1f
    42f2:	08 c0       	rjmp	.+16     	; 0x4304 <__vector_8+0x26>
		lds r17,random_value
    42f4:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    42f8:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    42fc:	10 27       	eor	r17, r16
		sts random_value,r17
    42fe:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    4302:	07 c0       	rjmp	.+14     	; 0x4312 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    4304:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    4308:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    430c:	10 27       	eor	r17, r16
		sts random_value+1,r17
    430e:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    4312:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    4314:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    4318:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    431a:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    431c:	1f 91       	pop	r17
		pop r16
    431e:	0f 91       	pop	r16
		reti
    4320:	18 95       	reti

00004322 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    4322:	98 e0       	ldi	r25, 0x08	; 8
    4324:	88 e1       	ldi	r24, 0x18	; 24
    4326:	0f b6       	in	r0, 0x3f	; 63
    4328:	f8 94       	cli
    432a:	a8 95       	wdr
    432c:	80 93 60 00 	sts	0x0060, r24
    4330:	0f be       	out	0x3f, r0	; 63
    4332:	90 93 60 00 	sts	0x0060, r25
	while(1);
    4336:	ff cf       	rjmp	.-2      	; 0x4336 <SoftReset+0x14>

00004338 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    4338:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    433a:	c8 95       	lpm
    433c:	c8 95       	lpm
		Wait200ns();
    433e:	c8 95       	lpm
    4340:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    4342:	12 98       	cbi	0x02, 2	; 2
    4344:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    434e:	36 95       	lsr	r19
    4350:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    4352:	96 95       	lsr	r25
    4354:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    4356:	c8 95       	lpm
    4358:	c8 95       	lpm
			Wait200ns();
    435a:	c8 95       	lpm
    435c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    435e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    4360:	00 9b       	sbis	0x00, 0	; 0
    4362:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    4364:	01 9b       	sbis	0x00, 1	; 0
    4366:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    4368:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    436a:	c8 95       	lpm
    436c:	c8 95       	lpm
			Wait200ns();
    436e:	c8 95       	lpm
    4370:	c8 95       	lpm
    4372:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    4374:	61 f7       	brne	.-40     	; 0x434e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    4376:	30 93 aa 0c 	sts	0x0CAA, r19
    437a:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    437e:	90 93 ae 0c 	sts	0x0CAE, r25
    4382:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    4386:	80 91 a9 0c 	lds	r24, 0x0CA9
    438a:	90 91 aa 0c 	lds	r25, 0x0CAA
    438e:	0f 97       	sbiw	r24, 0x0f	; 15
    4390:	31 f0       	breq	.+12     	; 0x439e <ReadButtons+0x66>
    4392:	80 91 ad 0c 	lds	r24, 0x0CAD
    4396:	90 91 ae 0c 	lds	r25, 0x0CAE
    439a:	0f 97       	sbiw	r24, 0x0f	; 15
    439c:	11 f4       	brne	.+4      	; 0x43a2 <ReadButtons+0x6a>
		SoftReset();
    439e:	0e 94 91 21 	call	0x4322	; 0x4322 <SoftReset>
    43a2:	08 95       	ret

000043a4 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    43a4:	10 92 e4 0c 	sts	0x0CE4, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    43a8:	00 99       	sbic	0x00, 0	; 0
    43aa:	03 c0       	rjmp	.+6      	; 0x43b2 <ReadControllers+0xe>
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	80 93 e4 0c 	sts	0x0CE4, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    43b2:	01 99       	sbic	0x00, 1	; 0
    43b4:	05 c0       	rjmp	.+10     	; 0x43c0 <ReadControllers+0x1c>
    43b6:	80 91 e4 0c 	lds	r24, 0x0CE4
    43ba:	82 60       	ori	r24, 0x02	; 2
    43bc:	80 93 e4 0c 	sts	0x0CE4, r24
			
	//read the standard buttons
	ReadButtons();
    43c0:	0c 94 9c 21 	jmp	0x4338	; 0x4338 <ReadButtons>

000043c4 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	c0 e0       	ldi	r28, 0x00	; 0
    43ca:	d0 e0       	ldi	r29, 0x00	; 0
    43cc:	fe 01       	movw	r30, r28
    43ce:	e2 56       	subi	r30, 0x62	; 98
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    43d2:	64 91       	lpm	r22, Z
    43d4:	ce 01       	movw	r24, r28
    43d6:	0e 94 34 21 	call	0x4268	; 0x4268 <WriteEeprom>
    43da:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    43dc:	c0 32       	cpi	r28, 0x20	; 32
    43de:	d1 05       	cpc	r29, r1
    43e0:	a9 f7       	brne	.-22     	; 0x43cc <FormatEeprom+0x8>
    43e2:	c0 e2       	ldi	r28, 0x20	; 32
    43e4:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    43e6:	6f ef       	ldi	r22, 0xFF	; 255
    43e8:	ce 01       	movw	r24, r28
    43ea:	0e 94 34 21 	call	0x4268	; 0x4268 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    43ee:	6f ef       	ldi	r22, 0xFF	; 255
    43f0:	ce 01       	movw	r24, r28
    43f2:	01 96       	adiw	r24, 0x01	; 1
    43f4:	0e 94 34 21 	call	0x4268	; 0x4268 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    43f8:	a0 96       	adiw	r28, 0x20	; 32
    43fa:	c1 15       	cp	r28, r1
    43fc:	88 e0       	ldi	r24, 0x08	; 8
    43fe:	d8 07       	cpc	r29, r24
    4400:	91 f7       	brne	.-28     	; 0x43e6 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    4402:	df 91       	pop	r29
    4404:	cf 91       	pop	r28
    4406:	08 95       	ret

00004408 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    4408:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 3e 21 	call	0x427c	; 0x427c <ReadEeprom>
    4412:	c8 2f       	mov	r28, r24
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0e 94 3e 21 	call	0x427c	; 0x427c <ReadEeprom>
    441c:	28 2f       	mov	r18, r24
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	32 2f       	mov	r19, r18
    4422:	22 27       	eor	r18, r18
    4424:	2c 0f       	add	r18, r28
    4426:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	2a 35       	cpi	r18, 0x5A	; 90
    442c:	35 45       	sbci	r19, 0x55	; 85
    442e:	09 f0       	breq	.+2      	; 0x4432 <isEepromFormatted+0x2a>
    4430:	80 e0       	ldi	r24, 0x00	; 0
}
    4432:	cf 91       	pop	r28
    4434:	08 95       	ret

00004436 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    4436:	fc 01       	movw	r30, r24
    4438:	67 87       	std	Z+15, r22	; 0x0f
    443a:	08 95       	ret

0000443c <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    443c:	e8 eb       	ldi	r30, 0xB8	; 184
    443e:	fc e0       	ldi	r31, 0x0C	; 12
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	91 e0       	ldi	r25, 0x01	; 1
    4444:	95 8b       	std	Z+21, r25	; 0x15
    4446:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    4448:	63 8b       	std	Z+19, r22	; 0x13
    444a:	08 95       	ret

0000444c <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    444c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    444e:	90 81       	ld	r25, Z
    4450:	9f 75       	andi	r25, 0x5F	; 95
    4452:	90 83       	st	Z, r25
    4454:	08 95       	ret

00004456 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    4456:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    4458:	90 81       	ld	r25, Z
    445a:	90 64       	ori	r25, 0x40	; 64
    445c:	90 83       	st	Z, r25
    445e:	08 95       	ret

00004460 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    4460:	fc 01       	movw	r30, r24
    4462:	66 87       	std	Z+14, r22	; 0x0e
    4464:	08 95       	ret

00004466 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    4466:	fc 01       	movw	r30, r24
    4468:	62 87       	std	Z+10, r22	; 0x0a
    446a:	08 95       	ret

0000446c <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    446c:	fc 01       	movw	r30, r24
    446e:	63 87       	std	Z+11, r22	; 0x0b
    4470:	08 95       	ret

00004472 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    4472:	cf 93       	push	r28
    4474:	df 93       	push	r29
    4476:	ec 01       	movw	r28, r24
    4478:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    447a:	29 81       	ldd	r18, Y+1	; 0x01
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	f9 01       	movw	r30, r18
    4480:	ee 0f       	add	r30, r30
    4482:	ff 1f       	adc	r31, r31
    4484:	e8 5f       	subi	r30, 0xF8	; 248
    4486:	f2 4b       	sbci	r31, 0xB2	; 178
    4488:	65 91       	lpm	r22, Z+
    448a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    448c:	f9 01       	movw	r30, r18
    448e:	e4 0f       	add	r30, r20
    4490:	f1 1d       	adc	r31, r1
    4492:	47 fd       	sbrc	r20, 7
    4494:	fa 95       	dec	r31
    4496:	ee 0f       	add	r30, r30
    4498:	ff 1f       	adc	r31, r31
    449a:	e8 5f       	subi	r30, 0xF8	; 248
    449c:	f2 4b       	sbci	r31, 0xB2	; 178
    449e:	85 91       	lpm	r24, Z+
    44a0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    44a2:	86 1b       	sub	r24, r22
    44a4:	97 0b       	sbc	r25, r23
    44a6:	68 85       	ldd	r22, Y+8	; 0x08
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	0e 94 77 30 	call	0x60ee	; 0x60ee <__divmodhi4>
	if(delta==0)delta++;
    44ae:	61 15       	cp	r22, r1
    44b0:	71 05       	cpc	r23, r1
    44b2:	11 f4       	brne	.+4      	; 0x44b8 <PatchCommand11+0x46>
    44b4:	61 e0       	ldi	r22, 0x01	; 1
    44b6:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    44b8:	ea 81       	ldd	r30, Y+2	; 0x02
    44ba:	86 e0       	ldi	r24, 0x06	; 6
    44bc:	e8 9f       	mul	r30, r24
    44be:	f0 01       	movw	r30, r0
    44c0:	11 24       	eor	r1, r1
    44c2:	e8 54       	subi	r30, 0x48	; 72
    44c4:	f3 4f       	sbci	r31, 0xF3	; 243
    44c6:	81 81       	ldd	r24, Z+1	; 0x01
    44c8:	92 81       	ldd	r25, Z+2	; 0x02
    44ca:	86 0f       	add	r24, r22
    44cc:	97 1f       	adc	r25, r23
    44ce:	92 83       	std	Z+2, r25	; 0x02
    44d0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    44d2:	7e 83       	std	Y+6, r23	; 0x06
    44d4:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    44d6:	88 81       	ld	r24, Y
    44d8:	88 60       	ori	r24, 0x08	; 8
    44da:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	48 0f       	add	r20, r24
    44e0:	4f 83       	std	Y+7, r20	; 0x07
}
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	08 95       	ret

000044e8 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    44e8:	fc 01       	movw	r30, r24
    44ea:	60 87       	std	Z+8, r22	; 0x08
    44ec:	08 95       	ret

000044ee <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    44ee:	fc 01       	movw	r30, r24
    44f0:	64 83       	std	Z+4, r22	; 0x04
    44f2:	08 95       	ret

000044f4 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    44f4:	fc 01       	movw	r30, r24
    44f6:	82 81       	ldd	r24, Z+2	; 0x02
    44f8:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <SetMixerWave>

000044fc <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    44fc:	fc 01       	movw	r30, r24
	track->note+=param;
    44fe:	91 81       	ldd	r25, Z+1	; 0x01
    4500:	69 0f       	add	r22, r25
    4502:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    4504:	82 81       	ldd	r24, Z+2	; 0x02
    4506:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <SetMixerNote>

0000450a <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    450a:	fc 01       	movw	r30, r24
	track->note-=param;
    450c:	91 81       	ldd	r25, Z+1	; 0x01
    450e:	96 1b       	sub	r25, r22
    4510:	69 2f       	mov	r22, r25
    4512:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    4514:	82 81       	ldd	r24, Z+2	; 0x02
    4516:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <SetMixerNote>

0000451a <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    451a:	1f 93       	push	r17
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	ec 01       	movw	r28, r24
    4522:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <SetMixerNote>
	track->note=param;
    452a:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    452c:	88 81       	ld	r24, Y
    452e:	87 7f       	andi	r24, 0xF7	; 247
    4530:	88 83       	st	Y, r24
}
    4532:	df 91       	pop	r29
    4534:	cf 91       	pop	r28
    4536:	1f 91       	pop	r17
    4538:	08 95       	ret

0000453a <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    453a:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    453c:	14 96       	adiw	r26, 0x04	; 4
    453e:	8c 91       	ld	r24, X
    4540:	14 97       	sbiw	r26, 0x04	; 4
    4542:	88 23       	and	r24, r24
    4544:	19 f1       	breq	.+70     	; 0x458c <PatchCommand14+0x52>
    4546:	55 96       	adiw	r26, 0x15	; 21
    4548:	2d 91       	ld	r18, X+
    454a:	3c 91       	ld	r19, X
    454c:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    454e:	66 23       	and	r22, r22
    4550:	79 f0       	breq	.+30     	; 0x4570 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    4552:	77 27       	eor	r23, r23
    4554:	67 fd       	sbrc	r22, 7
    4556:	70 95       	com	r23
    4558:	6f 5f       	subi	r22, 0xFF	; 255
    455a:	7f 4f       	sbci	r23, 0xFF	; 255
    455c:	ab 01       	movw	r20, r22
    455e:	44 0f       	add	r20, r20
    4560:	55 1f       	adc	r21, r21
    4562:	64 0f       	add	r22, r20
    4564:	75 1f       	adc	r23, r21
    4566:	26 1b       	sub	r18, r22
    4568:	37 0b       	sbc	r19, r23
    456a:	09 c0       	rjmp	.+18     	; 0x457e <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    456c:	ef 3f       	cpi	r30, 0xFF	; 255
    456e:	39 f0       	breq	.+14     	; 0x457e <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    4570:	23 50       	subi	r18, 0x03	; 3
    4572:	31 09       	sbc	r19, r1
    4574:	f9 01       	movw	r30, r18
    4576:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    4578:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    457a:	ed 30       	cpi	r30, 0x0D	; 13
    457c:	b9 f7       	brne	.-18     	; 0x456c <PatchCommand14+0x32>
    457e:	56 96       	adiw	r26, 0x16	; 22
    4580:	3c 93       	st	X, r19
    4582:	2e 93       	st	-X, r18
    4584:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    4586:	81 50       	subi	r24, 0x01	; 1
    4588:	14 96       	adiw	r26, 0x04	; 4
    458a:	8c 93       	st	X, r24
    458c:	08 95       	ret

0000458e <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    458e:	90 93 5d 0d 	sts	0x0D5D, r25
    4592:	80 93 5c 0d 	sts	0x0D5C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    4596:	8f e6       	ldi	r24, 0x6F	; 111
    4598:	80 93 5f 0d 	sts	0x0D5F, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    459c:	10 92 b6 0c 	sts	0x0CB6, r1
    45a0:	e7 ef       	ldi	r30, 0xF7	; 247
    45a2:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    45a4:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    45a6:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    45a8:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    45aa:	28 e1       	ldi	r18, 0x18	; 24
    45ac:	df 01       	movw	r26, r30
    45ae:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    45b0:	8c 93       	st	X, r24
    45b2:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    45b4:	9c 93       	st	X, r25
    45b6:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    45b8:	1c 92       	st	X, r1
    45ba:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    45bc:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    45be:	10 82       	st	Z, r1
    45c0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    45c2:	2c 93       	st	X, r18
    45c4:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    45c6:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    45c8:	8f 5f       	subi	r24, 0xFF	; 255
    45ca:	77 96       	adiw	r30, 0x17	; 23
    45cc:	85 30       	cpi	r24, 0x05	; 5
    45ce:	71 f7       	brne	.-36     	; 0x45ac <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    45d0:	08 95       	ret

000045d2 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    45d2:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    45d4:	ed 91       	ld	r30, X+
    45d6:	fc 91       	ld	r31, X
    45d8:	11 97       	sbiw	r26, 0x01	; 1
    45da:	9f 01       	movw	r18, r30
    45dc:	2f 5f       	subi	r18, 0xFF	; 255
    45de:	3f 4f       	sbci	r19, 0xFF	; 255
    45e0:	11 96       	adiw	r26, 0x01	; 1
    45e2:	3c 93       	st	X, r19
    45e4:	2e 93       	st	-X, r18
    45e6:	e4 91       	lpm	r30, Z
    45e8:	e7 fd       	sbrc	r30, 7
    45ea:	03 c0       	rjmp	.+6      	; 0x45f2 <ReadVarLen+0x20>
    45ec:	8e 2f       	mov	r24, r30
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	08 95       	ret
    {
       value &= 0x7F;
    45f2:	ef 77       	andi	r30, 0x7F	; 127
    45f4:	8e 2f       	mov	r24, r30
    45f6:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    45f8:	96 95       	lsr	r25
    45fa:	98 2f       	mov	r25, r24
    45fc:	88 27       	eor	r24, r24
    45fe:	97 95       	ror	r25
    4600:	87 95       	ror	r24
    4602:	2f 5f       	subi	r18, 0xFF	; 255
    4604:	3f 4f       	sbci	r19, 0xFF	; 255
    4606:	f9 01       	movw	r30, r18
    4608:	31 97       	sbiw	r30, 0x01	; 1
    460a:	e4 91       	lpm	r30, Z
    460c:	4e 2f       	mov	r20, r30
    460e:	4f 77       	andi	r20, 0x7F	; 127
    4610:	84 0f       	add	r24, r20
    4612:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    4614:	e7 fd       	sbrc	r30, 7
    4616:	f0 cf       	rjmp	.-32     	; 0x45f8 <ReadVarLen+0x26>
    4618:	2d 93       	st	X+, r18
    461a:	3c 93       	st	X, r19
    }


    return value;
}
    461c:	08 95       	ret

0000461e <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    461e:	ef 92       	push	r14
    4620:	ff 92       	push	r15
    4622:	0f 93       	push	r16
    4624:	1f 93       	push	r17
    4626:	cf 93       	push	r28
    4628:	df 93       	push	r29
    462a:	1f 92       	push	r1
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	7c 01       	movw	r14, r24
    4632:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    4634:	fc 01       	movw	r30, r24
    4636:	80 81       	ld	r24, Z
    4638:	08 2f       	mov	r16, r24
    463a:	00 1f       	adc	r16, r16
    463c:	00 27       	eor	r16, r16
    463e:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    4640:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    4642:	9f ef       	ldi	r25, 0xFF	; 255
    4644:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    4646:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    4648:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    464a:	87 7b       	andi	r24, 0xB7	; 183
    464c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    464e:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    4650:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    4652:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    4654:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    4656:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	83 30       	cpi	r24, 0x03	; 3
    465c:	69 f4       	brne	.+26     	; 0x4678 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    465e:	01 11       	cpse	r16, r1
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <TriggerCommon+0x46>
    4662:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	91 e0       	ldi	r25, 0x01	; 1
    4668:	90 93 cd 0c 	sts	0x0CCD, r25
    466c:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	80 93 cb 0c 	sts	0x0CCB, r24
    4676:	39 c0       	rjmp	.+114    	; 0x46ea <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    4678:	84 30       	cpi	r24, 0x04	; 4
    467a:	69 f5       	brne	.+90     	; 0x46d6 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    467c:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    4680:	80 91 5c 0d 	lds	r24, 0x0D5C
    4684:	90 91 5d 0d 	lds	r25, 0x0D5D
    4688:	f9 e0       	ldi	r31, 0x09	; 9
    468a:	6f 9f       	mul	r22, r31
    468c:	80 0d       	add	r24, r0
    468e:	91 1d       	adc	r25, r1
    4690:	11 24       	eor	r1, r1
    4692:	fc 01       	movw	r30, r24
    4694:	31 96       	adiw	r30, 0x01	; 1
    4696:	a5 91       	lpm	r26, Z+
    4698:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    469a:	b0 93 d5 0c 	sts	0x0CD5, r27
    469e:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    46a2:	ac 01       	movw	r20, r24
    46a4:	49 5f       	subi	r20, 0xF9	; 249
    46a6:	5f 4f       	sbci	r21, 0xFF	; 255
    46a8:	fa 01       	movw	r30, r20
    46aa:	65 91       	lpm	r22, Z+
    46ac:	74 91       	lpm	r23, Z
    46ae:	05 96       	adiw	r24, 0x05	; 5
    46b0:	fc 01       	movw	r30, r24
    46b2:	85 91       	lpm	r24, Z+
    46b4:	94 91       	lpm	r25, Z
    46b6:	68 1b       	sub	r22, r24
    46b8:	79 0b       	sbc	r23, r25
    46ba:	70 93 d7 0c 	sts	0x0CD7, r23
    46be:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    46c2:	fa 01       	movw	r30, r20
    46c4:	85 91       	lpm	r24, Z+
    46c6:	94 91       	lpm	r25, Z
    46c8:	a8 0f       	add	r26, r24
    46ca:	b9 1f       	adc	r27, r25
    46cc:	b0 93 d9 0c 	sts	0x0CD9, r27
    46d0:	a0 93 d8 0c 	sts	0x0CD8, r26
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	29 83       	std	Y+1, r18	; 0x01
    46da:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <SetMixerWave>
			SetMixerNote(track->channel,note);
    46de:	29 81       	ldd	r18, Y+1	; 0x01
    46e0:	62 2f       	mov	r22, r18
    46e2:	f7 01       	movw	r30, r14
    46e4:	82 81       	ldd	r24, Z+2	; 0x02
    46e6:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    46ea:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    46ec:	00 23       	and	r16, r16
    46ee:	11 f0       	breq	.+4      	; 0x46f4 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    46f0:	11 8b       	std	Z+17, r17	; 0x11
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    46f4:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    46f6:	e0 91 5c 0d 	lds	r30, 0x0D5C
    46fa:	f0 91 5d 0d 	lds	r31, 0x0D5D
    46fe:	39 e0       	ldi	r19, 0x09	; 9
    4700:	13 9f       	mul	r17, r19
    4702:	e0 0d       	add	r30, r0
    4704:	f1 1d       	adc	r31, r1
    4706:	11 24       	eor	r1, r1
    4708:	33 96       	adiw	r30, 0x03	; 3
    470a:	85 91       	lpm	r24, Z+
    470c:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    470e:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	19 f4       	brne	.+6      	; 0x471a <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    4714:	16 8a       	std	Z+22, r1	; 0x16
    4716:	15 8a       	std	Z+21, r1	; 0x15
    4718:	08 c0       	rjmp	.+16     	; 0x472a <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    471a:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    471c:	fc 01       	movw	r30, r24
    471e:	24 91       	lpm	r18, Z
    4720:	f7 01       	movw	r30, r14
    4722:	22 8b       	std	Z+18, r18	; 0x12
    4724:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    4726:	96 8b       	std	Z+22, r25	; 0x16
    4728:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    472a:	0f 90       	pop	r0
    472c:	df 91       	pop	r29
    472e:	cf 91       	pop	r28
    4730:	1f 91       	pop	r17
    4732:	0f 91       	pop	r16
    4734:	ff 90       	pop	r15
    4736:	ef 90       	pop	r14
    4738:	08 95       	ret

0000473a <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    473a:	cf 93       	push	r28
    473c:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    473e:	e0 91 5c 0d 	lds	r30, 0x0D5C
    4742:	f0 91 5d 0d 	lds	r31, 0x0D5D
    4746:	99 e0       	ldi	r25, 0x09	; 9
    4748:	89 9f       	mul	r24, r25
    474a:	e0 0d       	add	r30, r0
    474c:	f1 1d       	adc	r31, r1
    474e:	11 24       	eor	r1, r1
    4750:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    4752:	e1 30       	cpi	r30, 0x01	; 1
    4754:	e9 f0       	breq	.+58     	; 0x4790 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    4756:	e2 30       	cpi	r30, 0x02	; 2
    4758:	e9 f0       	breq	.+58     	; 0x4794 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    475a:	20 91 fe 0c 	lds	r18, 0x0CFE
    475e:	27 ff       	sbrs	r18, 7
    4760:	1d c0       	rjmp	.+58     	; 0x479c <TriggerFx+0x62>
    4762:	20 91 0f 0d 	lds	r18, 0x0D0F
    4766:	28 13       	cpse	r18, r24
    4768:	02 c0       	rjmp	.+4      	; 0x476e <TriggerFx+0x34>
    476a:	41 11       	cpse	r20, r1
    476c:	17 c0       	rjmp	.+46     	; 0x479c <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    476e:	20 91 15 0d 	lds	r18, 0x0D15
    4772:	27 ff       	sbrs	r18, 7
    4774:	11 c0       	rjmp	.+34     	; 0x4798 <TriggerFx+0x5e>
    4776:	20 91 26 0d 	lds	r18, 0x0D26
    477a:	28 13       	cpse	r18, r24
    477c:	02 c0       	rjmp	.+4      	; 0x4782 <TriggerFx+0x48>
    477e:	41 11       	cpse	r20, r1
    4780:	0b c0       	rjmp	.+22     	; 0x4798 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    4782:	20 91 12 0d 	lds	r18, 0x0D12
    4786:	90 91 29 0d 	lds	r25, 0x0D29
    478a:	92 17       	cp	r25, r18
    478c:	28 f4       	brcc	.+10     	; 0x4798 <TriggerFx+0x5e>
    478e:	06 c0       	rjmp	.+12     	; 0x479c <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    4790:	c3 e0       	ldi	r28, 0x03	; 3
    4792:	05 c0       	rjmp	.+10     	; 0x479e <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    4794:	c4 e0       	ldi	r28, 0x04	; 4
    4796:	03 c0       	rjmp	.+6      	; 0x479e <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    4798:	c2 e0       	ldi	r28, 0x02	; 2
    479a:	01 c0       	rjmp	.+2      	; 0x479e <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    479c:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    479e:	97 e1       	ldi	r25, 0x17	; 23
    47a0:	c9 9f       	mul	r28, r25
    47a2:	e0 01       	movw	r28, r0
    47a4:	11 24       	eor	r1, r1
    47a6:	c9 51       	subi	r28, 0x19	; 25
    47a8:	d3 4f       	sbci	r29, 0xF3	; 243
    47aa:	90 e8       	ldi	r25, 0x80	; 128
    47ac:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    47ae:	1e 8a       	std	Y+22, r1	; 0x16
    47b0:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    47b2:	20 e5       	ldi	r18, 0x50	; 80
    47b4:	46 2f       	mov	r20, r22
    47b6:	68 2f       	mov	r22, r24
    47b8:	ce 01       	movw	r24, r28
    47ba:	0e 94 0f 23 	call	0x461e	; 0x461e <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    47be:	88 81       	ld	r24, Y
    47c0:	80 62       	ori	r24, 0x20	; 32
    47c2:	88 83       	st	Y, r24
}
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	08 95       	ret

000047ca <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    47ce:	a8 2f       	mov	r26, r24
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	97 e1       	ldi	r25, 0x17	; 23
    47d4:	89 9f       	mul	r24, r25
    47d6:	f0 01       	movw	r30, r0
    47d8:	11 24       	eor	r1, r1
    47da:	e9 51       	subi	r30, 0x19	; 25
    47dc:	f3 4f       	sbci	r31, 0xF3	; 243
    47de:	80 81       	ld	r24, Z
    47e0:	85 ff       	sbrs	r24, 5
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <TriggerNote+0x1e>
    47e4:	87 fd       	sbrc	r24, 7
    47e6:	2e c0       	rjmp	.+92     	; 0x4844 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    47e8:	21 11       	cpse	r18, r1
    47ea:	18 c0       	rjmp	.+48     	; 0x481c <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    47ec:	97 e1       	ldi	r25, 0x17	; 23
    47ee:	9a 9f       	mul	r25, r26
    47f0:	f0 01       	movw	r30, r0
    47f2:	9b 9f       	mul	r25, r27
    47f4:	f0 0d       	add	r31, r0
    47f6:	11 24       	eor	r1, r1
    47f8:	e9 51       	subi	r30, 0x19	; 25
    47fa:	f3 4f       	sbci	r31, 0xF3	; 243
    47fc:	97 85       	ldd	r25, Z+15	; 0x0f
    47fe:	91 11       	cpse	r25, r1
    4800:	02 c0       	rjmp	.+4      	; 0x4806 <TriggerNote+0x3c>
    4802:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    4804:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    4806:	97 e1       	ldi	r25, 0x17	; 23
    4808:	9a 9f       	mul	r25, r26
    480a:	f0 01       	movw	r30, r0
    480c:	9b 9f       	mul	r25, r27
    480e:	f0 0d       	add	r31, r0
    4810:	11 24       	eor	r1, r1
    4812:	e9 51       	subi	r30, 0x19	; 25
    4814:	f3 4f       	sbci	r31, 0xF3	; 243
    4816:	8f 7b       	andi	r24, 0xBF	; 191
    4818:	80 83       	st	Z, r24
    481a:	14 c0       	rjmp	.+40     	; 0x4844 <TriggerNote+0x7a>
    481c:	82 2f       	mov	r24, r18
    481e:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    4820:	97 e1       	ldi	r25, 0x17	; 23
    4822:	9a 9f       	mul	r25, r26
    4824:	e0 01       	movw	r28, r0
    4826:	9b 9f       	mul	r25, r27
    4828:	d0 0d       	add	r29, r0
    482a:	11 24       	eor	r1, r1
    482c:	c9 51       	subi	r28, 0x19	; 25
    482e:	d3 4f       	sbci	r29, 0xF3	; 243
    4830:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    4832:	1e 8a       	std	Y+22, r1	; 0x16
    4834:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    4836:	48 2f       	mov	r20, r24
    4838:	ce 01       	movw	r24, r28
    483a:	0e 94 0f 23 	call	0x461e	; 0x461e <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    483e:	88 81       	ld	r24, Y
    4840:	80 62       	ori	r24, 0x20	; 32
    4842:	88 83       	st	Y, r24
		}

	}
}
    4844:	df 91       	pop	r29
    4846:	cf 91       	pop	r28
    4848:	08 95       	ret

0000484a <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    484a:	6f 92       	push	r6
    484c:	7f 92       	push	r7
    484e:	8f 92       	push	r8
    4850:	9f 92       	push	r9
    4852:	af 92       	push	r10
    4854:	bf 92       	push	r11
    4856:	cf 92       	push	r12
    4858:	df 92       	push	r13
    485a:	ef 92       	push	r14
    485c:	ff 92       	push	r15
    485e:	0f 93       	push	r16
    4860:	1f 93       	push	r17
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    4866:	c7 ee       	ldi	r28, 0xE7	; 231
    4868:	dc e0       	ldi	r29, 0x0C	; 12
    486a:	08 eb       	ldi	r16, 0xB8	; 184
    486c:	1c e0       	ldi	r17, 0x0C	; 12
    486e:	d8 01       	movw	r26, r16
    4870:	9e 01       	movw	r18, r28
    4872:	40 e0       	ldi	r20, 0x00	; 0
    4874:	50 e0       	ldi	r21, 0x00	; 0
    4876:	ca 01       	movw	r24, r20
    4878:	89 51       	subi	r24, 0x19	; 25
    487a:	93 4f       	sbci	r25, 0xF3	; 243
    487c:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    487e:	fc 01       	movw	r30, r24
    4880:	87 85       	ldd	r24, Z+15	; 0x0f
    4882:	88 23       	and	r24, r24
    4884:	91 f0       	breq	.+36     	; 0x48aa <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    4886:	66 85       	ldd	r22, Z+14	; 0x0e
    4888:	99 27       	eor	r25, r25
    488a:	87 fd       	sbrc	r24, 7
    488c:	90 95       	com	r25
    488e:	86 0f       	add	r24, r22
    4890:	91 1d       	adc	r25, r1
    4892:	8f 3f       	cpi	r24, 0xFF	; 255
    4894:	91 05       	cpc	r25, r1
    4896:	19 f0       	breq	.+6      	; 0x489e <ProcessMusic+0x54>
    4898:	14 f0       	brlt	.+4      	; 0x489e <ProcessMusic+0x54>
    489a:	8f ef       	ldi	r24, 0xFF	; 255
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	97 ff       	sbrs	r25, 7
    48a0:	02 c0       	rjmp	.+4      	; 0x48a6 <ProcessMusic+0x5c>
    48a2:	80 e0       	ldi	r24, 0x00	; 0
    48a4:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    48a6:	f6 01       	movw	r30, r12
    48a8:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    48aa:	f9 01       	movw	r30, r18
    48ac:	f0 80       	ld	r15, Z
    48ae:	f3 fe       	sbrs	r15, 3
    48b0:	2a c0       	rjmp	.+84     	; 0x4906 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    48b2:	65 81       	ldd	r22, Z+5	; 0x05
    48b4:	76 81       	ldd	r23, Z+6	; 0x06
    48b6:	11 96       	adiw	r26, 0x01	; 1
    48b8:	8d 91       	ld	r24, X+
    48ba:	9c 91       	ld	r25, X
    48bc:	12 97       	sbiw	r26, 0x02	; 2
    48be:	86 0f       	add	r24, r22
    48c0:	97 1f       	adc	r25, r23
    48c2:	12 96       	adiw	r26, 0x02	; 2
    48c4:	9c 93       	st	X, r25
    48c6:	8e 93       	st	-X, r24
    48c8:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    48ca:	f6 01       	movw	r30, r12
    48cc:	e7 80       	ldd	r14, Z+7	; 0x07
    48ce:	ee 2d       	mov	r30, r14
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	ee 0f       	add	r30, r30
    48d4:	ff 1f       	adc	r31, r31
    48d6:	e8 5f       	subi	r30, 0xF8	; 248
    48d8:	f2 4b       	sbci	r31, 0xB2	; 178
    48da:	c5 90       	lpm	r12, Z+
    48dc:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    48de:	16 16       	cp	r1, r22
    48e0:	17 06       	cpc	r1, r23
    48e2:	24 f4       	brge	.+8      	; 0x48ec <ProcessMusic+0xa2>
    48e4:	8c 15       	cp	r24, r12
    48e6:	9d 05       	cpc	r25, r13
    48e8:	30 f4       	brcc	.+12     	; 0x48f6 <ProcessMusic+0xac>
    48ea:	0d c0       	rjmp	.+26     	; 0x4906 <ProcessMusic+0xbc>
    48ec:	67 2b       	or	r22, r23
    48ee:	59 f0       	breq	.+22     	; 0x4906 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    48f0:	c8 16       	cp	r12, r24
    48f2:	d9 06       	cpc	r13, r25
    48f4:	40 f0       	brcs	.+16     	; 0x4906 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    48f6:	12 96       	adiw	r26, 0x02	; 2
    48f8:	dc 92       	st	X, r13
    48fa:	ce 92       	st	-X, r12
    48fc:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    48fe:	8f 2d       	mov	r24, r15
    4900:	87 7f       	andi	r24, 0xF7	; 247
    4902:	f9 01       	movw	r30, r18
    4904:	80 83       	st	Z, r24
    4906:	49 5e       	subi	r20, 0xE9	; 233
    4908:	5f 4f       	sbci	r21, 0xFF	; 255
    490a:	29 5e       	subi	r18, 0xE9	; 233
    490c:	3f 4f       	sbci	r19, 0xFF	; 255
    490e:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    4910:	43 37       	cpi	r20, 0x73	; 115
    4912:	51 05       	cpc	r21, r1
    4914:	09 f0       	breq	.+2      	; 0x4918 <ProcessMusic+0xce>
    4916:	af cf       	rjmp	.-162    	; 0x4876 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    4918:	80 91 b6 0c 	lds	r24, 0x0CB6
    491c:	88 23       	and	r24, r24
    491e:	09 f4       	brne	.+2      	; 0x4922 <ProcessMusic+0xd8>
    4920:	cc c0       	rjmp	.+408    	; 0x4aba <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    4922:	57 e1       	ldi	r21, 0x17	; 23
    4924:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    4926:	80 91 5a 0d 	lds	r24, 0x0D5A
    492a:	90 91 5b 0d 	lds	r25, 0x0D5B
    492e:	20 91 60 0d 	lds	r18, 0x0D60
    4932:	30 91 61 0d 	lds	r19, 0x0D61
    4936:	82 17       	cp	r24, r18
    4938:	93 07       	cpc	r25, r19
    493a:	09 f0       	breq	.+2      	; 0x493e <ProcessMusic+0xf4>
    493c:	b9 c0       	rjmp	.+370    	; 0x4ab0 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    493e:	20 91 63 0d 	lds	r18, 0x0D63
    4942:	30 91 64 0d 	lds	r19, 0x0D64
    4946:	b9 01       	movw	r22, r18
    4948:	6f 5f       	subi	r22, 0xFF	; 255
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	70 93 64 0d 	sts	0x0D64, r23
    4950:	60 93 63 0d 	sts	0x0D63, r22
    4954:	f9 01       	movw	r30, r18
    4956:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    4958:	4f 3f       	cpi	r20, 0xFF	; 255
    495a:	79 f5       	brne	.+94     	; 0x49ba <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    495c:	a9 01       	movw	r20, r18
    495e:	4e 5f       	subi	r20, 0xFE	; 254
    4960:	5f 4f       	sbci	r21, 0xFF	; 255
    4962:	50 93 64 0d 	sts	0x0D64, r21
    4966:	40 93 63 0d 	sts	0x0D63, r20
    496a:	fb 01       	movw	r30, r22
    496c:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    496e:	6f 32       	cpi	r22, 0x2F	; 47
    4970:	19 f4       	brne	.+6      	; 0x4978 <ProcessMusic+0x12e>
						playSong=false;
    4972:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    4976:	9c c0       	rjmp	.+312    	; 0x4ab0 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    4978:	66 30       	cpi	r22, 0x06	; 6
    497a:	09 f0       	breq	.+2      	; 0x497e <ProcessMusic+0x134>
    497c:	8c c0       	rjmp	.+280    	; 0x4a96 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    497e:	fa 01       	movw	r30, r20
    4980:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    4982:	c9 01       	movw	r24, r18
    4984:	04 96       	adiw	r24, 0x04	; 4
    4986:	90 93 64 0d 	sts	0x0D64, r25
    498a:	80 93 63 0d 	sts	0x0D63, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    498e:	f9 01       	movw	r30, r18
    4990:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    4992:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    4994:	e3 35       	cpi	r30, 0x53	; 83
    4996:	29 f4       	brne	.+10     	; 0x49a2 <ProcessMusic+0x158>
							loopStart=songPos;
    4998:	90 93 66 0d 	sts	0x0D66, r25
    499c:	80 93 65 0d 	sts	0x0D65, r24
    49a0:	7a c0       	rjmp	.+244    	; 0x4a96 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    49a2:	e5 34       	cpi	r30, 0x45	; 69
    49a4:	09 f0       	breq	.+2      	; 0x49a8 <ProcessMusic+0x15e>
    49a6:	77 c0       	rjmp	.+238    	; 0x4a96 <ProcessMusic+0x24c>
							songPos=loopStart;
    49a8:	80 91 65 0d 	lds	r24, 0x0D65
    49ac:	90 91 66 0d 	lds	r25, 0x0D66
    49b0:	90 93 64 0d 	sts	0x0D64, r25
    49b4:	80 93 63 0d 	sts	0x0D63, r24
    49b8:	6e c0       	rjmp	.+220    	; 0x4a96 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    49ba:	47 fd       	sbrc	r20, 7
    49bc:	40 93 5e 0d 	sts	0x0D5E, r20
					channel=lastStatus&0x0f;
    49c0:	90 91 5e 0d 	lds	r25, 0x0D5E
    49c4:	89 2f       	mov	r24, r25
    49c6:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    49c8:	47 ff       	sbrs	r20, 7
    49ca:	08 c0       	rjmp	.+16     	; 0x49dc <ProcessMusic+0x192>
    49cc:	2e 5f       	subi	r18, 0xFE	; 254
    49ce:	3f 4f       	sbci	r19, 0xFF	; 255
    49d0:	30 93 64 0d 	sts	0x0D64, r19
    49d4:	20 93 63 0d 	sts	0x0D63, r18
    49d8:	fb 01       	movw	r30, r22
    49da:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    49dc:	90 7f       	andi	r25, 0xF0	; 240
    49de:	90 3b       	cpi	r25, 0xB0	; 176
    49e0:	e1 f0       	breq	.+56     	; 0x4a1a <ProcessMusic+0x1d0>
    49e2:	90 3c       	cpi	r25, 0xC0	; 192
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <ProcessMusic+0x19e>
    49e6:	51 c0       	rjmp	.+162    	; 0x4a8a <ProcessMusic+0x240>
    49e8:	90 39       	cpi	r25, 0x90	; 144
    49ea:	09 f0       	breq	.+2      	; 0x49ee <ProcessMusic+0x1a4>
    49ec:	54 c0       	rjmp	.+168    	; 0x4a96 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    49ee:	e0 91 63 0d 	lds	r30, 0x0D63
    49f2:	f0 91 64 0d 	lds	r31, 0x0D64
    49f6:	9f 01       	movw	r18, r30
    49f8:	2f 5f       	subi	r18, 0xFF	; 255
    49fa:	3f 4f       	sbci	r19, 0xFF	; 255
    49fc:	30 93 64 0d 	sts	0x0D64, r19
    4a00:	20 93 63 0d 	sts	0x0D63, r18
    4a04:	24 91       	lpm	r18, Z
    4a06:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    4a08:	f8 9e       	mul	r15, r24
    4a0a:	f0 01       	movw	r30, r0
    4a0c:	11 24       	eor	r1, r1
    4a0e:	e9 51       	subi	r30, 0x19	; 25
    4a10:	f3 4f       	sbci	r31, 0xF3	; 243
    4a12:	60 89       	ldd	r22, Z+16	; 0x10
    4a14:	0e 94 e5 23 	call	0x47ca	; 0x47ca <TriggerNote>
    4a18:	3e c0       	rjmp	.+124    	; 0x4a96 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    4a1a:	e0 91 63 0d 	lds	r30, 0x0D63
    4a1e:	f0 91 64 0d 	lds	r31, 0x0D64
    4a22:	9f 01       	movw	r18, r30
    4a24:	2f 5f       	subi	r18, 0xFF	; 255
    4a26:	3f 4f       	sbci	r19, 0xFF	; 255
    4a28:	30 93 64 0d 	sts	0x0D64, r19
    4a2c:	20 93 63 0d 	sts	0x0D63, r18
    4a30:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    4a32:	47 30       	cpi	r20, 0x07	; 7
    4a34:	49 f4       	brne	.+18     	; 0x4a48 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    4a36:	f8 9e       	mul	r15, r24
    4a38:	d0 01       	movw	r26, r0
    4a3a:	11 24       	eor	r1, r1
    4a3c:	a9 51       	subi	r26, 0x19	; 25
    4a3e:	b3 4f       	sbci	r27, 0xF3	; 243
    4a40:	ee 0f       	add	r30, r30
    4a42:	1c 96       	adiw	r26, 0x0c	; 12
    4a44:	ec 93       	st	X, r30
    4a46:	27 c0       	rjmp	.+78     	; 0x4a96 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    4a48:	4b 30       	cpi	r20, 0x0B	; 11
    4a4a:	49 f4       	brne	.+18     	; 0x4a5e <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    4a4c:	f8 9e       	mul	r15, r24
    4a4e:	d0 01       	movw	r26, r0
    4a50:	11 24       	eor	r1, r1
    4a52:	a9 51       	subi	r26, 0x19	; 25
    4a54:	b3 4f       	sbci	r27, 0xF3	; 243
    4a56:	ee 0f       	add	r30, r30
    4a58:	13 96       	adiw	r26, 0x03	; 3
    4a5a:	ec 93       	st	X, r30
    4a5c:	1c c0       	rjmp	.+56     	; 0x4a96 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    4a5e:	4c 35       	cpi	r20, 0x5C	; 92
    4a60:	49 f4       	brne	.+18     	; 0x4a74 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    4a62:	f8 9e       	mul	r15, r24
    4a64:	d0 01       	movw	r26, r0
    4a66:	11 24       	eor	r1, r1
    4a68:	a9 51       	subi	r26, 0x19	; 25
    4a6a:	b3 4f       	sbci	r27, 0xF3	; 243
    4a6c:	ee 0f       	add	r30, r30
    4a6e:	1a 96       	adiw	r26, 0x0a	; 10
    4a70:	ec 93       	st	X, r30
    4a72:	11 c0       	rjmp	.+34     	; 0x4a96 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    4a74:	44 36       	cpi	r20, 0x64	; 100
    4a76:	79 f4       	brne	.+30     	; 0x4a96 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    4a78:	f8 9e       	mul	r15, r24
    4a7a:	d0 01       	movw	r26, r0
    4a7c:	11 24       	eor	r1, r1
    4a7e:	a9 51       	subi	r26, 0x19	; 25
    4a80:	b3 4f       	sbci	r27, 0xF3	; 243
    4a82:	ee 0f       	add	r30, r30
    4a84:	1b 96       	adiw	r26, 0x0b	; 11
    4a86:	ec 93       	st	X, r30
    4a88:	06 c0       	rjmp	.+12     	; 0x4a96 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    4a8a:	f8 9e       	mul	r15, r24
    4a8c:	f0 01       	movw	r30, r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	e9 51       	subi	r30, 0x19	; 25
    4a92:	f3 4f       	sbci	r31, 0xF3	; 243
    4a94:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    4a96:	83 e6       	ldi	r24, 0x63	; 99
    4a98:	9d e0       	ldi	r25, 0x0D	; 13
    4a9a:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <ReadVarLen>
    4a9e:	90 93 61 0d 	sts	0x0D61, r25
    4aa2:	80 93 60 0d 	sts	0x0D60, r24
				currDeltaTime=0;
    4aa6:	10 92 5b 0d 	sts	0x0D5B, r1
    4aaa:	10 92 5a 0d 	sts	0x0D5A, r1
    4aae:	3b cf       	rjmp	.-394    	; 0x4926 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    4ab0:	01 96       	adiw	r24, 0x01	; 1
    4ab2:	90 93 5b 0d 	sts	0x0D5B, r25
    4ab6:	80 93 5a 0d 	sts	0x0D5A, r24
    4aba:	90 ef       	ldi	r25, 0xF0	; 240
    4abc:	a9 2e       	mov	r10, r25
    4abe:	9c e0       	ldi	r25, 0x0C	; 12
    4ac0:	b9 2e       	mov	r11, r25
    4ac2:	2a ef       	ldi	r18, 0xFA	; 250
    4ac4:	c2 2e       	mov	r12, r18
    4ac6:	2c e0       	ldi	r18, 0x0C	; 12
    4ac8:	d2 2e       	mov	r13, r18
    4aca:	3b ef       	ldi	r19, 0xFB	; 251
    4acc:	e3 2e       	mov	r14, r19
    4ace:	3c e0       	ldi	r19, 0x0C	; 12
    4ad0:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    4ad2:	66 24       	eor	r6, r6
    4ad4:	6a 94       	dec	r6
    4ad6:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    4ad8:	88 81       	ld	r24, Y
    4ada:	85 ff       	sbrs	r24, 5
    4adc:	42 c0       	rjmp	.+132    	; 0x4b62 <ProcessMusic+0x318>
    4ade:	2d 89       	ldd	r18, Y+21	; 0x15
    4ae0:	3e 89       	ldd	r19, Y+22	; 0x16
    4ae2:	23 2b       	or	r18, r19
    4ae4:	09 f4       	brne	.+2      	; 0x4ae8 <ProcessMusic+0x29e>
    4ae6:	3d c0       	rjmp	.+122    	; 0x4b62 <ProcessMusic+0x318>
    4ae8:	86 fd       	sbrc	r24, 6
    4aea:	3b c0       	rjmp	.+118    	; 0x4b62 <ProcessMusic+0x318>
    4aec:	47 01       	movw	r8, r14
    4aee:	f2 e0       	ldi	r31, 0x02	; 2
    4af0:	8f 1a       	sub	r8, r31
    4af2:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    4af4:	d6 01       	movw	r26, r12
    4af6:	9c 91       	ld	r25, X
    4af8:	f4 01       	movw	r30, r8
    4afa:	80 81       	ld	r24, Z
    4afc:	98 13       	cpse	r25, r24
    4afe:	2e c0       	rjmp	.+92     	; 0x4b5c <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    4b00:	ed 89       	ldd	r30, Y+21	; 0x15
    4b02:	fe 89       	ldd	r31, Y+22	; 0x16
    4b04:	bf 01       	movw	r22, r30
    4b06:	6f 5f       	subi	r22, 0xFF	; 255
    4b08:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0a:	7e 8b       	std	Y+22, r23	; 0x16
    4b0c:	6d 8b       	std	Y+21, r22	; 0x15
    4b0e:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    4b10:	8f 3f       	cpi	r24, 0xFF	; 255
    4b12:	31 f4       	brne	.+12     	; 0x4b20 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    4b14:	88 81       	ld	r24, Y
    4b16:	8f 77       	andi	r24, 0x7F	; 127
    4b18:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    4b1a:	1e 8a       	std	Y+22, r1	; 0x16
    4b1c:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    4b1e:	1e c0       	rjmp	.+60     	; 0x4b5c <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    4b20:	9f 01       	movw	r18, r30
    4b22:	2e 5f       	subi	r18, 0xFE	; 254
    4b24:	3f 4f       	sbci	r19, 0xFF	; 255
    4b26:	3e 8b       	std	Y+22, r19	; 0x16
    4b28:	2d 8b       	std	Y+21, r18	; 0x15
    4b2a:	fb 01       	movw	r30, r22
    4b2c:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    4b2e:	e8 2f       	mov	r30, r24
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	ee 0f       	add	r30, r30
    4b34:	ff 1f       	adc	r31, r31
    4b36:	e2 54       	subi	r30, 0x42	; 66
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	25 91       	lpm	r18, Z+
    4b3c:	34 91       	lpm	r19, Z
    4b3e:	ce 01       	movw	r24, r28
    4b40:	f9 01       	movw	r30, r18
    4b42:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    4b44:	ed 89       	ldd	r30, Y+21	; 0x15
    4b46:	fe 89       	ldd	r31, Y+22	; 0x16
    4b48:	cf 01       	movw	r24, r30
    4b4a:	01 96       	adiw	r24, 0x01	; 1
    4b4c:	9e 8b       	std	Y+22, r25	; 0x16
    4b4e:	8d 8b       	std	Y+21, r24	; 0x15
    4b50:	e4 91       	lpm	r30, Z
    4b52:	d4 01       	movw	r26, r8
    4b54:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    4b56:	f6 01       	movw	r30, r12
    4b58:	10 82       	st	Z, r1
    4b5a:	cc cf       	rjmp	.-104    	; 0x4af4 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    4b5c:	9f 5f       	subi	r25, 0xFF	; 255
    4b5e:	d6 01       	movw	r26, r12
    4b60:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    4b62:	98 81       	ld	r25, Y
    4b64:	95 ff       	sbrs	r25, 5
    4b66:	6c c0       	rjmp	.+216    	; 0x4c40 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    4b68:	f7 01       	movw	r30, r14
    4b6a:	80 81       	ld	r24, Z
    4b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    4b6e:	11 f0       	breq	.+4      	; 0x4b74 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    4b70:	8f 5f       	subi	r24, 0xFF	; 255
    4b72:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    4b74:	97 fd       	sbrc	r25, 7
    4b76:	04 c0       	rjmp	.+8      	; 0x4b80 <ProcessMusic+0x336>
    4b78:	f7 01       	movw	r30, r14
    4b7a:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    4b7c:	90 81       	ld	r25, Z
    4b7e:	01 c0       	rjmp	.+2      	; 0x4b82 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    4b80:	9f ef       	ldi	r25, 0xFF	; 255
    4b82:	f7 01       	movw	r30, r14
    4b84:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    4b86:	80 81       	ld	r24, Z
    4b88:	88 23       	and	r24, r24
    4b8a:	09 f4       	brne	.+2      	; 0x4b8e <ProcessMusic+0x344>
    4b8c:	4e c0       	rjmp	.+156    	; 0x4c2a <ProcessMusic+0x3e0>
    4b8e:	31 96       	adiw	r30, 0x01	; 1
    4b90:	50 81       	ld	r21, Z
    4b92:	55 23       	and	r21, r21
    4b94:	09 f4       	brne	.+2      	; 0x4b98 <ProcessMusic+0x34e>
    4b96:	49 c0       	rjmp	.+146    	; 0x4c2a <ProcessMusic+0x3e0>
    4b98:	99 23       	and	r25, r25
    4b9a:	09 f4       	brne	.+2      	; 0x4b9e <ProcessMusic+0x354>
    4b9c:	46 c0       	rjmp	.+140    	; 0x4c2a <ProcessMusic+0x3e0>
    4b9e:	40 91 5f 0d 	lds	r20, 0x0D5F
    4ba2:	44 23       	and	r20, r20
    4ba4:	09 f4       	brne	.+2      	; 0x4ba8 <ProcessMusic+0x35e>
    4ba6:	41 c0       	rjmp	.+130    	; 0x4c2a <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    4ba8:	89 9f       	mul	r24, r25
    4baa:	c0 01       	movw	r24, r0
    4bac:	11 24       	eor	r1, r1
    4bae:	93 95       	inc	r25
				uVol>>=8;
    4bb0:	89 2f       	mov	r24, r25
    4bb2:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    4bb4:	58 9f       	mul	r21, r24
    4bb6:	90 01       	movw	r18, r0
    4bb8:	59 9f       	mul	r21, r25
    4bba:	30 0d       	add	r19, r0
    4bbc:	11 24       	eor	r1, r1
    4bbe:	c9 01       	movw	r24, r18
    4bc0:	93 95       	inc	r25
				uVol>>=8;
    4bc2:	89 2f       	mov	r24, r25
    4bc4:	99 27       	eor	r25, r25
    4bc6:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    4bc8:	50 81       	ld	r21, Z
    4bca:	58 9f       	mul	r21, r24
    4bcc:	90 01       	movw	r18, r0
    4bce:	59 9f       	mul	r21, r25
    4bd0:	30 0d       	add	r19, r0
    4bd2:	11 24       	eor	r1, r1
    4bd4:	33 95       	inc	r19
					uVol>>=8;
    4bd6:	23 2f       	mov	r18, r19
    4bd8:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    4bda:	42 9f       	mul	r20, r18
    4bdc:	c0 01       	movw	r24, r0
    4bde:	43 9f       	mul	r20, r19
    4be0:	90 0d       	add	r25, r0
    4be2:	11 24       	eor	r1, r1
    4be4:	93 95       	inc	r25
				uVol>>=8;
    4be6:	89 2f       	mov	r24, r25
    4be8:	99 27       	eor	r25, r25
    4bea:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    4bec:	20 81       	ld	r18, Z
    4bee:	22 23       	and	r18, r18
    4bf0:	f1 f0       	breq	.+60     	; 0x4c2e <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    4bf2:	d5 01       	movw	r26, r10
    4bf4:	ec 91       	ld	r30, X
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	e0 50       	subi	r30, 0x00	; 0
    4bfa:	f1 4b       	sbci	r31, 0xB1	; 177
    4bfc:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    4bfe:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    4c00:	2e 9f       	mul	r18, r30
    4c02:	f0 01       	movw	r30, r0
    4c04:	11 24       	eor	r1, r1
    4c06:	f3 95       	inc	r31
					tVol>>=8;
    4c08:	ef 2f       	mov	r30, r31
    4c0a:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    4c0c:	a3 01       	movw	r20, r6
    4c0e:	4e 1b       	sub	r20, r30
    4c10:	5f 0b       	sbc	r21, r31
    4c12:	48 9f       	mul	r20, r24
    4c14:	90 01       	movw	r18, r0
    4c16:	49 9f       	mul	r20, r25
    4c18:	30 0d       	add	r19, r0
    4c1a:	58 9f       	mul	r21, r24
    4c1c:	30 0d       	add	r19, r0
    4c1e:	11 24       	eor	r1, r1
    4c20:	c9 01       	movw	r24, r18
    4c22:	93 95       	inc	r25
					uVol>>=8;
    4c24:	89 2f       	mov	r24, r25
    4c26:	99 27       	eor	r25, r25
    4c28:	02 c0       	rjmp	.+4      	; 0x4c2e <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    4c2a:	80 e0       	ldi	r24, 0x00	; 0
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    4c2e:	f5 01       	movw	r30, r10
    4c30:	30 81       	ld	r19, Z
    4c32:	f7 01       	movw	r30, r14
    4c34:	39 97       	sbiw	r30, 0x09	; 9
    4c36:	20 81       	ld	r18, Z
    4c38:	23 0f       	add	r18, r19
    4c3a:	d5 01       	movw	r26, r10
    4c3c:	2c 93       	st	X, r18
    4c3e:	02 c0       	rjmp	.+4      	; 0x4c44 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    4c44:	f8 01       	movw	r30, r16
    4c46:	80 83       	st	Z, r24
    4c48:	67 96       	adiw	r28, 0x17	; 23
    4c4a:	0a 5f       	subi	r16, 0xFA	; 250
    4c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4e:	f7 e1       	ldi	r31, 0x17	; 23
    4c50:	af 0e       	add	r10, r31
    4c52:	b1 1c       	adc	r11, r1
    4c54:	87 e1       	ldi	r24, 0x17	; 23
    4c56:	c8 0e       	add	r12, r24
    4c58:	d1 1c       	adc	r13, r1
    4c5a:	97 e1       	ldi	r25, 0x17	; 23
    4c5c:	e9 0e       	add	r14, r25
    4c5e:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    4c60:	ad e0       	ldi	r26, 0x0D	; 13
    4c62:	ca 35       	cpi	r28, 0x5A	; 90
    4c64:	da 07       	cpc	r29, r26
    4c66:	09 f0       	breq	.+2      	; 0x4c6a <ProcessMusic+0x420>
    4c68:	37 cf       	rjmp	.-402    	; 0x4ad8 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	ff 90       	pop	r15
    4c74:	ef 90       	pop	r14
    4c76:	df 90       	pop	r13
    4c78:	cf 90       	pop	r12
    4c7a:	bf 90       	pop	r11
    4c7c:	af 90       	pop	r10
    4c7e:	9f 90       	pop	r9
    4c80:	8f 90       	pop	r8
    4c82:	7f 90       	pop	r7
    4c84:	6f 90       	pop	r6
    4c86:	08 95       	ret

00004c88 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    4c88:	80 93 5f 0d 	sts	0x0D5F, r24
    4c8c:	08 95       	ret

00004c8e <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    4c8e:	99 27       	eor	r25, r25
	clr r23
    4c90:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    4c92:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <set_note_waves>
		ret
    4c96:	08 95       	ret

00004c98 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    4c98:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    4c9a:	fd e4       	ldi	r31, 0x4D	; 77
	lsl r22
    4c9c:	66 0f       	add	r22, r22
	rol r23
    4c9e:	77 1f       	adc	r23, r23
	add ZL,r22
    4ca0:	e6 0f       	add	r30, r22
	adc ZH,r23	
    4ca2:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    4ca4:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    4ca6:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    4ca8:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    4caa:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    4cac:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    4cae:	28 9f       	mul	r18, r24
	add ZL,r0
    4cb0:	e0 0d       	add	r30, r0
	adc ZH,r1
    4cb2:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    4cb4:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    4cb6:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    4cb8:	11 24       	eor	r1, r1
	

	ret
    4cba:	08 95       	ret

00004cbc <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    4cbc:	99 27       	eor	r25, r25
	clr r23
    4cbe:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    4cc0:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    4cc2:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    4cc4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    4cc6:	28 9f       	mul	r18, r24
	add ZL,r0
    4cc8:	e0 0d       	add	r30, r0
	adc ZH,r1
    4cca:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    4ccc:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    4cce:	31 f4       	brne	.+12     	; 0x4cdc <smw1>
	lds r22,tr4_params
    4cd0:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    4cd4:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    4cd6:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    4cda:	0b c0       	rjmp	.+22     	; 0x4cf2 <esmw>

00004cdc <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    4cdc:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    4cde:	31 f4       	brne	.+12     	; 0x4cec <smw2>
	lds r22,tr4_params
    4ce0:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    4ce4:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    4ce6:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    4cea:	03 c0       	rjmp	.+6      	; 0x4cf2 <esmw>

00004cec <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    4cec:	7f e4       	ldi	r23, 0x4F	; 79
	add r23,r22
    4cee:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    4cf0:	75 83       	std	Z+5, r23	; 0x05

00004cf2 <esmw>:

esmw:
	clr r1	
    4cf2:	11 24       	eor	r1, r1
	ret
    4cf4:	08 95       	ret
	...

00004d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    4d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    4d02:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    4d06:	08 95       	ret

00004d08 <steptable>:
    4d08:	22 00       	.word	0x0022	; ????
    4d0a:	24 00       	.word	0x0024	; ????
    4d0c:	26 00       	.word	0x0026	; ????
    4d0e:	28 00       	.word	0x0028	; ????
    4d10:	2b 00       	.word	0x002b	; ????
    4d12:	2d 00       	.word	0x002d	; ????
    4d14:	30 00       	.word	0x0030	; ????
    4d16:	33 00       	.word	0x0033	; ????
    4d18:	36 00       	.word	0x0036	; ????
    4d1a:	39 00       	.word	0x0039	; ????
    4d1c:	3d 00       	.word	0x003d	; ????
    4d1e:	40 00       	.word	0x0040	; ????
    4d20:	44 00       	.word	0x0044	; ????
    4d22:	48 00       	.word	0x0048	; ????
    4d24:	4c 00       	.word	0x004c	; ????
    4d26:	51 00       	.word	0x0051	; ????
    4d28:	56 00       	.word	0x0056	; ????
    4d2a:	5b 00       	.word	0x005b	; ????
    4d2c:	60 00       	.word	0x0060	; ????
    4d2e:	66 00       	.word	0x0066	; ????
    4d30:	6c 00       	.word	0x006c	; ????
    4d32:	73 00       	.word	0x0073	; ????
    4d34:	79 00       	.word	0x0079	; ????
    4d36:	81 00       	.word	0x0081	; ????
    4d38:	88 00       	.word	0x0088	; ????
    4d3a:	90 00       	.word	0x0090	; ????
    4d3c:	99 00       	.word	0x0099	; ????
    4d3e:	a2 00       	.word	0x00a2	; ????
    4d40:	ac 00       	.word	0x00ac	; ????
    4d42:	b6 00       	.word	0x00b6	; ????
    4d44:	c1 00       	.word	0x00c1	; ????
    4d46:	cc 00       	.word	0x00cc	; ????
    4d48:	d8 00       	.word	0x00d8	; ????
    4d4a:	e5 00       	.word	0x00e5	; ????
    4d4c:	f3 00       	.word	0x00f3	; ????
    4d4e:	01 01       	movw	r0, r2
    4d50:	10 01       	movw	r2, r0
    4d52:	21 01       	movw	r4, r2
    4d54:	32 01       	movw	r6, r4
    4d56:	44 01       	movw	r8, r8
    4d58:	57 01       	movw	r10, r14
    4d5a:	6c 01       	movw	r12, r24
    4d5c:	81 01       	movw	r16, r2
    4d5e:	98 01       	movw	r18, r16
    4d60:	b0 01       	movw	r22, r0
    4d62:	ca 01       	movw	r24, r20
    4d64:	e5 01       	movw	r28, r10
    4d66:	02 02       	muls	r16, r18
    4d68:	21 02       	muls	r18, r17
    4d6a:	41 02       	muls	r20, r17
    4d6c:	64 02       	muls	r22, r20
    4d6e:	88 02       	muls	r24, r24
    4d70:	ae 02       	muls	r26, r30
    4d72:	d7 02       	muls	r29, r23
    4d74:	03 03       	mulsu	r16, r19
    4d76:	30 03       	mulsu	r19, r16
    4d78:	61 03       	mulsu	r22, r17
    4d7a:	94 03       	fmuls	r17, r20
    4d7c:	cb 03       	fmulsu	r20, r19
    4d7e:	05 04       	cpc	r0, r5
    4d80:	42 04       	cpc	r4, r2
    4d82:	83 04       	cpc	r8, r3
    4d84:	c7 04       	cpc	r12, r7
    4d86:	10 05       	cpc	r17, r0
    4d88:	5d 05       	cpc	r21, r13
    4d8a:	af 05       	cpc	r26, r15
    4d8c:	05 06       	cpc	r0, r21
    4d8e:	61 06       	cpc	r6, r17
    4d90:	c2 06       	cpc	r12, r18
    4d92:	29 07       	cpc	r18, r25
    4d94:	96 07       	cpc	r25, r22
    4d96:	09 08       	sbc	r0, r9
    4d98:	83 08       	sbc	r8, r3
    4d9a:	05 09       	sbc	r16, r5
    4d9c:	8e 09       	sbc	r24, r14
    4d9e:	20 0a       	sbc	r2, r16
    4da0:	ba 0a       	sbc	r11, r26
    4da2:	5d 0b       	sbc	r21, r29
    4da4:	0a 0c       	add	r0, r10
    4da6:	c1 0c       	add	r12, r1
    4da8:	84 0d       	add	r24, r4
    4daa:	51 0e       	add	r5, r17
    4dac:	2b 0f       	add	r18, r27
    4dae:	12 10       	cpse	r1, r2
    4db0:	07 11       	cpse	r16, r7
    4db2:	0a 12       	cpse	r0, r26
    4db4:	1d 13       	cpse	r17, r29
    4db6:	40 14       	cp	r4, r0
    4db8:	74 15       	cp	r23, r4
    4dba:	ba 16       	cp	r11, r26
    4dbc:	14 18       	sub	r1, r4
    4dbe:	83 19       	sub	r24, r3
    4dc0:	07 1b       	sub	r16, r23
    4dc2:	a3 1c       	adc	r10, r3
    4dc4:	57 1e       	adc	r5, r23
    4dc6:	24 20       	and	r2, r4
    4dc8:	0e 22       	and	r0, r30
    4dca:	14 24       	eor	r1, r4
    4dcc:	39 26       	eor	r3, r25
    4dce:	7f 28       	or	r7, r15
    4dd0:	e8 2a       	or	r14, r24
    4dd2:	75 2d       	mov	r23, r5
    4dd4:	29 30       	cpi	r18, 0x09	; 9
    4dd6:	06 33       	cpi	r16, 0x36	; 54
    4dd8:	0f 36       	cpi	r16, 0x6F	; 111
    4dda:	45 39       	cpi	r20, 0x95	; 149
    4ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    4dde:	49 40       	sbci	r20, 0x09	; 9
    4de0:	1b 44       	sbci	r17, 0x4B	; 75
    4de2:	28 48       	sbci	r18, 0x88	; 136
    4de4:	73 4c       	sbci	r23, 0xC3	; 195
    4de6:	fe 50       	subi	r31, 0x0E	; 14
    4de8:	cf 55       	subi	r28, 0x5F	; 95
    4dea:	ea 5a       	subi	r30, 0xAA	; 170
    4dec:	51 60       	ori	r21, 0x01	; 1
    4dee:	0c 66       	ori	r16, 0x6C	; 108
    4df0:	1d 6c       	ori	r17, 0xCD	; 205
    4df2:	8b 72       	andi	r24, 0x2B	; 43
    4df4:	5a 79       	andi	r21, 0x9A	; 154
    4df6:	92 80       	ldd	r9, Z+2	; 0x02
    4df8:	37 88       	ldd	r3, Z+23	; 0x17
    4dfa:	50 90 e5 98 	lds	r5, 0x98E5
    4dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    4e00:	9f ab       	std	Y+55, r25	; 0x37
    4e02:	d3 b5       	in	r29, 0x23	; 35
    4e04:	a3 c0       	rjmp	.+326    	; 0x4f4c <waves+0x4c>
	...

00004f00 <waves>:
    4f00:	00 03       	mulsu	r16, r16
    4f02:	06 09       	sbc	r16, r6
    4f04:	0c 10       	cpse	r0, r12
    4f06:	13 16       	cp	r1, r19
    4f08:	19 1c       	adc	r1, r9
    4f0a:	1f 22       	and	r1, r31
    4f0c:	25 28       	or	r2, r5
    4f0e:	2b 2e       	mov	r2, r27
    4f10:	31 33       	cpi	r19, 0x31	; 49
    4f12:	36 39       	cpi	r19, 0x96	; 150
    4f14:	3c 3f       	cpi	r19, 0xFC	; 252
    4f16:	41 44       	sbci	r20, 0x41	; 65
    4f18:	47 49       	sbci	r20, 0x97	; 151
    4f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    4f1c:	51 53       	subi	r21, 0x31	; 49
    4f1e:	55 58       	subi	r21, 0x85	; 133
    4f20:	5a 5c       	subi	r21, 0xCA	; 202
    4f22:	5e 60       	ori	r21, 0x0E	; 14
    4f24:	62 64       	ori	r22, 0x42	; 66
    4f26:	66 68       	ori	r22, 0x86	; 134
    4f28:	6a 6b       	ori	r22, 0xBA	; 186
    4f2a:	6d 6f       	ori	r22, 0xFD	; 253
    4f2c:	70 71       	andi	r23, 0x10	; 16
    4f2e:	73 74       	andi	r23, 0x43	; 67
    4f30:	75 76       	andi	r23, 0x65	; 101
    4f32:	78 79       	andi	r23, 0x98	; 152
    4f34:	7a 7a       	andi	r23, 0xAA	; 170
    4f36:	7b 7c       	andi	r23, 0xCB	; 203
    4f38:	7d 7d       	andi	r23, 0xDD	; 221
    4f3a:	7e 7e       	andi	r23, 0xEE	; 238
    4f3c:	7e 7f       	andi	r23, 0xFE	; 254
    4f3e:	7f 7f       	andi	r23, 0xFF	; 255
    4f40:	7f 7f       	andi	r23, 0xFF	; 255
    4f42:	7f 7f       	andi	r23, 0xFF	; 255
    4f44:	7e 7e       	andi	r23, 0xEE	; 238
    4f46:	7e 7d       	andi	r23, 0xDE	; 222
    4f48:	7d 7c       	andi	r23, 0xCD	; 205
    4f4a:	7b 7a       	andi	r23, 0xAB	; 171
    4f4c:	7a 79       	andi	r23, 0x9A	; 154
    4f4e:	78 76       	andi	r23, 0x68	; 104
    4f50:	75 74       	andi	r23, 0x45	; 69
    4f52:	73 71       	andi	r23, 0x13	; 19
    4f54:	70 6f       	ori	r23, 0xF0	; 240
    4f56:	6d 6b       	ori	r22, 0xBD	; 189
    4f58:	6a 68       	ori	r22, 0x8A	; 138
    4f5a:	66 64       	ori	r22, 0x46	; 70
    4f5c:	62 60       	ori	r22, 0x02	; 2
    4f5e:	5e 5c       	subi	r21, 0xCE	; 206
    4f60:	5a 58       	subi	r21, 0x8A	; 138
    4f62:	55 53       	subi	r21, 0x35	; 53
    4f64:	51 4e       	sbci	r21, 0xE1	; 225
    4f66:	4c 49       	sbci	r20, 0x9C	; 156
    4f68:	47 44       	sbci	r20, 0x47	; 71
    4f6a:	41 3f       	cpi	r20, 0xF1	; 241
    4f6c:	3c 39       	cpi	r19, 0x9C	; 156
    4f6e:	36 33       	cpi	r19, 0x36	; 54
    4f70:	31 2e       	mov	r3, r17
    4f72:	2b 28       	or	r2, r11
    4f74:	25 22       	and	r2, r21
    4f76:	1f 1c       	adc	r1, r15
    4f78:	19 16       	cp	r1, r25
    4f7a:	13 10       	cpse	r1, r3
    4f7c:	0c 09       	sbc	r16, r12
    4f7e:	06 03       	mulsu	r16, r22
    4f80:	00 fd       	sbrc	r16, 0
    4f82:	fa f7       	brpl	.-2      	; 0x4f82 <waves+0x82>
    4f84:	f4 f0       	brlt	.+60     	; 0x4fc2 <waves+0xc2>
    4f86:	ed ea       	ldi	r30, 0xAD	; 173
    4f88:	e7 e4       	ldi	r30, 0x47	; 71
    4f8a:	e1 de       	rcall	.-574    	; 0x4d4e <steptable+0x46>
    4f8c:	db d8       	rcall	.-3658   	; 0x4144 <update_sound+0xd4>
    4f8e:	d5 d2       	rcall	.+1450   	; 0x553a <waves+0x63a>
    4f90:	cf cd       	rjmp	.-1122   	; 0x4b30 <ProcessMusic+0x2e6>
    4f92:	ca c7       	rjmp	.+3988   	; 0x5f28 <LBRotateSprites+0x12>
    4f94:	c4 c1       	rjmp	.+904    	; 0x531e <waves+0x41e>
    4f96:	bf bc       	out	0x2f, r11	; 47
    4f98:	b9 b7       	in	r27, 0x39	; 57
    4f9a:	b4 b2       	in	r11, 0x14	; 20
    4f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    4f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    4fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    4fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    4fa4:	9e 9c       	mul	r9, r14
    4fa6:	9a 98       	cbi	0x13, 2	; 19
    4fa8:	96 95       	lsr	r25
    4faa:	93 91       	.word	0x9193	; ????
    4fac:	90 8f       	std	Z+24, r25	; 0x18
    4fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    4fb0:	8b 8a       	std	Y+19, r8	; 0x13
    4fb2:	88 87       	std	Y+8, r24	; 0x08
    4fb4:	86 86       	std	Z+14, r8	; 0x0e
    4fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    4fb8:	83 83       	std	Z+3, r24	; 0x03
    4fba:	82 82       	std	Z+2, r8	; 0x02
    4fbc:	82 81       	ldd	r24, Z+2	; 0x02
    4fbe:	81 81       	ldd	r24, Z+1	; 0x01
    4fc0:	81 81       	ldd	r24, Z+1	; 0x01
    4fc2:	81 81       	ldd	r24, Z+1	; 0x01
    4fc4:	82 82       	std	Z+2, r8	; 0x02
    4fc6:	82 83       	std	Z+2, r24	; 0x02
    4fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    4fca:	85 86       	std	Z+13, r8	; 0x0d
    4fcc:	86 87       	std	Z+14, r24	; 0x0e
    4fce:	88 8a       	std	Y+16, r8	; 0x10
    4fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    4fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    4fd4:	90 91 93 95 	lds	r25, 0x9593
    4fd8:	96 98       	cbi	0x12, 6	; 18
    4fda:	9a 9c       	mul	r9, r10
    4fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    4fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    4fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    4fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    4fe4:	af b2       	in	r10, 0x1f	; 31
    4fe6:	b4 b7       	in	r27, 0x34	; 52
    4fe8:	b9 bc       	out	0x29, r11	; 41
    4fea:	bf c1       	rjmp	.+894    	; 0x536a <waves+0x46a>
    4fec:	c4 c7       	rjmp	.+3976   	; 0x5f76 <LBRotateSprites+0x60>
    4fee:	ca cd       	rjmp	.-1132   	; 0x4b84 <ProcessMusic+0x33a>
    4ff0:	cf d2       	rcall	.+1438   	; 0x5590 <waves+0x690>
    4ff2:	d5 d8       	rcall	.-3670   	; 0x419e <ch4_end+0x52>
    4ff4:	db de       	rcall	.-586    	; 0x4dac <steptable+0xa4>
    4ff6:	e1 e4       	ldi	r30, 0x41	; 65
    4ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    4ffa:	ed f0       	brhs	.+58     	; 0x5036 <waves+0x136>
    4ffc:	f4 f7       	brge	.-4      	; 0x4ffa <waves+0xfa>
    4ffe:	fa fd       	.word	0xfdfa	; ????
    5000:	80 81       	ld	r24, Z
    5002:	82 83       	std	Z+2, r24	; 0x02
    5004:	84 85       	ldd	r24, Z+12	; 0x0c
    5006:	86 87       	std	Z+14, r24	; 0x0e
    5008:	88 89       	ldd	r24, Y+16	; 0x10
    500a:	8a 8b       	std	Y+18, r24	; 0x12
    500c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    500e:	8e 8f       	std	Y+30, r24	; 0x1e
    5010:	90 91 92 93 	lds	r25, 0x9392
    5014:	94 95       	.word	0x9594	; ????
    5016:	96 97       	sbiw	r26, 0x26	; 38
    5018:	98 99       	sbic	0x13, 0	; 19
    501a:	9a 9b       	sbis	0x13, 2	; 19
    501c:	9c 9d       	mul	r25, r12
    501e:	9e 9f       	mul	r25, r30
    5020:	a0 a1       	ldd	r26, Z+32	; 0x20
    5022:	a2 a3       	std	Z+34, r26	; 0x22
    5024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5026:	a6 a7       	std	Z+46, r26	; 0x2e
    5028:	a8 a9       	ldd	r26, Y+48	; 0x30
    502a:	aa ab       	std	Y+50, r26	; 0x32
    502c:	ac ad       	ldd	r26, Y+60	; 0x3c
    502e:	ae af       	std	Y+62, r26	; 0x3e
    5030:	b0 b1       	in	r27, 0x00	; 0
    5032:	b2 b3       	in	r27, 0x12	; 18
    5034:	b4 b5       	in	r27, 0x24	; 36
    5036:	b6 b7       	in	r27, 0x36	; 54
    5038:	b8 b9       	out	0x08, r27	; 8
    503a:	ba bb       	out	0x1a, r27	; 26
    503c:	bc bd       	out	0x2c, r27	; 44
    503e:	be bf       	out	0x3e, r27	; 62
    5040:	c0 c1       	rjmp	.+896    	; 0x53c2 <waves+0x4c2>
    5042:	c2 c3       	rjmp	.+1924   	; 0x57c8 <waves+0x8c8>
    5044:	c4 c5       	rjmp	.+2952   	; 0x5bce <DrawMap+0x60>
    5046:	c6 c7       	rjmp	.+3980   	; 0x5fd4 <load_splash+0x34>
    5048:	c8 c9       	rjmp	.-3184   	; 0x43da <FormatEeprom+0x16>
    504a:	ca cb       	rjmp	.-2156   	; 0x47e0 <TriggerNote+0x16>
    504c:	cc cd       	rjmp	.-1128   	; 0x4be6 <ProcessMusic+0x39c>
    504e:	ce cf       	rjmp	.-100    	; 0x4fec <waves+0xec>
    5050:	d0 d1       	rcall	.+928    	; 0x53f2 <waves+0x4f2>
    5052:	d2 d3       	rcall	.+1956   	; 0x57f8 <waves+0x8f8>
    5054:	d4 d5       	rcall	.+2984   	; 0x5bfe <DrawMap+0x90>
    5056:	d6 d7       	rcall	.+4012   	; 0x6004 <load_splash+0x64>
    5058:	d8 d9       	rcall	.-3152   	; 0x440a <isEepromFormatted+0x2>
    505a:	da db       	rcall	.-2124   	; 0x4810 <TriggerNote+0x46>
    505c:	dc dd       	rcall	.-1096   	; 0x4c16 <ProcessMusic+0x3cc>
    505e:	de df       	rcall	.-68     	; 0x501c <waves+0x11c>
    5060:	e0 e1       	ldi	r30, 0x10	; 16
    5062:	e2 e3       	ldi	r30, 0x32	; 50
    5064:	e4 e5       	ldi	r30, 0x54	; 84
    5066:	e6 e7       	ldi	r30, 0x76	; 118
    5068:	e8 e9       	ldi	r30, 0x98	; 152
    506a:	ea eb       	ldi	r30, 0xBA	; 186
    506c:	ec ed       	ldi	r30, 0xDC	; 220
    506e:	ee ef       	ldi	r30, 0xFE	; 254
    5070:	f0 f1       	brcs	.+124    	; 0x50ee <waves+0x1ee>
    5072:	f2 f3       	brmi	.-4      	; 0x5070 <waves+0x170>
    5074:	f4 f5       	brge	.+124    	; 0x50f2 <waves+0x1f2>
    5076:	f6 f7       	brtc	.-4      	; 0x5074 <waves+0x174>
    5078:	f8 f9       	.word	0xf9f8	; ????
    507a:	fa fb       	.word	0xfbfa	; ????
    507c:	fc fd       	.word	0xfdfc	; ????
    507e:	fe ff       	.word	0xfffe	; ????
    5080:	00 01       	movw	r0, r0
    5082:	02 03       	mulsu	r16, r18
    5084:	04 05       	cpc	r16, r4
    5086:	06 07       	cpc	r16, r22
    5088:	08 09       	sbc	r16, r8
    508a:	0a 0b       	sbc	r16, r26
    508c:	0c 0d       	add	r16, r12
    508e:	0e 0f       	add	r16, r30
    5090:	10 11       	cpse	r17, r0
    5092:	12 13       	cpse	r17, r18
    5094:	14 15       	cp	r17, r4
    5096:	16 17       	cp	r17, r22
    5098:	18 19       	sub	r17, r8
    509a:	1a 1b       	sub	r17, r26
    509c:	1c 1d       	adc	r17, r12
    509e:	1e 1f       	adc	r17, r30
    50a0:	20 21       	and	r18, r0
    50a2:	22 23       	and	r18, r18
    50a4:	24 25       	eor	r18, r4
    50a6:	26 27       	eor	r18, r22
    50a8:	28 29       	or	r18, r8
    50aa:	2a 2b       	or	r18, r26
    50ac:	2c 2d       	mov	r18, r12
    50ae:	2e 2f       	mov	r18, r30
    50b0:	30 31       	cpi	r19, 0x10	; 16
    50b2:	32 33       	cpi	r19, 0x32	; 50
    50b4:	34 35       	cpi	r19, 0x54	; 84
    50b6:	36 37       	cpi	r19, 0x76	; 118
    50b8:	38 39       	cpi	r19, 0x98	; 152
    50ba:	3a 3b       	cpi	r19, 0xBA	; 186
    50bc:	3c 3d       	cpi	r19, 0xDC	; 220
    50be:	3e 3f       	cpi	r19, 0xFE	; 254
    50c0:	40 41       	sbci	r20, 0x10	; 16
    50c2:	42 43       	sbci	r20, 0x32	; 50
    50c4:	44 45       	sbci	r20, 0x54	; 84
    50c6:	46 47       	sbci	r20, 0x76	; 118
    50c8:	48 49       	sbci	r20, 0x98	; 152
    50ca:	4a 4b       	sbci	r20, 0xBA	; 186
    50cc:	4c 4d       	sbci	r20, 0xDC	; 220
    50ce:	4e 4f       	sbci	r20, 0xFE	; 254
    50d0:	50 51       	subi	r21, 0x10	; 16
    50d2:	52 53       	subi	r21, 0x32	; 50
    50d4:	54 55       	subi	r21, 0x54	; 84
    50d6:	56 57       	subi	r21, 0x76	; 118
    50d8:	58 59       	subi	r21, 0x98	; 152
    50da:	5a 5b       	subi	r21, 0xBA	; 186
    50dc:	5c 5d       	subi	r21, 0xDC	; 220
    50de:	5e 5f       	subi	r21, 0xFE	; 254
    50e0:	60 61       	ori	r22, 0x10	; 16
    50e2:	62 63       	ori	r22, 0x32	; 50
    50e4:	64 65       	ori	r22, 0x54	; 84
    50e6:	66 67       	ori	r22, 0x76	; 118
    50e8:	68 69       	ori	r22, 0x98	; 152
    50ea:	6a 6b       	ori	r22, 0xBA	; 186
    50ec:	6c 6d       	ori	r22, 0xDC	; 220
    50ee:	6e 6f       	ori	r22, 0xFE	; 254
    50f0:	70 71       	andi	r23, 0x10	; 16
    50f2:	72 73       	andi	r23, 0x32	; 50
    50f4:	74 75       	andi	r23, 0x54	; 84
    50f6:	76 77       	andi	r23, 0x76	; 118
    50f8:	78 79       	andi	r23, 0x98	; 152
    50fa:	7a 7b       	andi	r23, 0xBA	; 186
    50fc:	7c 7d       	andi	r23, 0xDC	; 220
    50fe:	7e 7f       	andi	r23, 0xFE	; 254
    5100:	00 02       	muls	r16, r16
    5102:	04 06       	cpc	r0, r20
    5104:	08 0a       	sbc	r0, r24
    5106:	0c 0e       	add	r0, r28
    5108:	10 12       	cpse	r1, r16
    510a:	14 16       	cp	r1, r20
    510c:	18 1a       	sub	r1, r24
    510e:	1c 1e       	adc	r1, r28
    5110:	20 22       	and	r2, r16
    5112:	24 26       	eor	r2, r20
    5114:	28 2a       	or	r2, r24
    5116:	2c 2e       	mov	r2, r28
    5118:	30 32       	cpi	r19, 0x20	; 32
    511a:	34 36       	cpi	r19, 0x64	; 100
    511c:	38 3a       	cpi	r19, 0xA8	; 168
    511e:	3c 3e       	cpi	r19, 0xEC	; 236
    5120:	40 42       	sbci	r20, 0x20	; 32
    5122:	44 46       	sbci	r20, 0x64	; 100
    5124:	48 4a       	sbci	r20, 0xA8	; 168
    5126:	4c 4e       	sbci	r20, 0xEC	; 236
    5128:	50 52       	subi	r21, 0x20	; 32
    512a:	54 56       	subi	r21, 0x64	; 100
    512c:	58 5a       	subi	r21, 0xA8	; 168
    512e:	5c 5e       	subi	r21, 0xEC	; 236
    5130:	60 62       	ori	r22, 0x20	; 32
    5132:	64 66       	ori	r22, 0x64	; 100
    5134:	68 6a       	ori	r22, 0xA8	; 168
    5136:	6c 6e       	ori	r22, 0xEC	; 236
    5138:	70 72       	andi	r23, 0x20	; 32
    513a:	74 76       	andi	r23, 0x64	; 100
    513c:	78 7a       	andi	r23, 0xA8	; 168
    513e:	7c 7e       	andi	r23, 0xEC	; 236
    5140:	7f 7d       	andi	r23, 0xDF	; 223
    5142:	7b 79       	andi	r23, 0x9B	; 155
    5144:	77 75       	andi	r23, 0x57	; 87
    5146:	73 71       	andi	r23, 0x13	; 19
    5148:	6f 6d       	ori	r22, 0xDF	; 223
    514a:	6b 69       	ori	r22, 0x9B	; 155
    514c:	67 65       	ori	r22, 0x57	; 87
    514e:	63 61       	ori	r22, 0x13	; 19
    5150:	5f 5d       	subi	r21, 0xDF	; 223
    5152:	5b 59       	subi	r21, 0x9B	; 155
    5154:	57 55       	subi	r21, 0x57	; 87
    5156:	53 51       	subi	r21, 0x13	; 19
    5158:	4f 4d       	sbci	r20, 0xDF	; 223
    515a:	4b 49       	sbci	r20, 0x9B	; 155
    515c:	47 45       	sbci	r20, 0x57	; 87
    515e:	43 41       	sbci	r20, 0x13	; 19
    5160:	3f 3d       	cpi	r19, 0xDF	; 223
    5162:	3b 39       	cpi	r19, 0x9B	; 155
    5164:	37 35       	cpi	r19, 0x57	; 87
    5166:	33 31       	cpi	r19, 0x13	; 19
    5168:	2f 2d       	mov	r18, r15
    516a:	2b 29       	or	r18, r11
    516c:	27 25       	eor	r18, r7
    516e:	23 21       	and	r18, r3
    5170:	1f 1d       	adc	r17, r15
    5172:	1b 19       	sub	r17, r11
    5174:	17 15       	cp	r17, r7
    5176:	13 11       	cpse	r17, r3
    5178:	0f 0d       	add	r16, r15
    517a:	0b 09       	sbc	r16, r11
    517c:	07 05       	cpc	r16, r7
    517e:	03 01       	movw	r0, r6
    5180:	ff fd       	.word	0xfdff	; ????
    5182:	fb f9       	.word	0xf9fb	; ????
    5184:	f7 f5       	brid	.+124    	; 0x5202 <waves+0x302>
    5186:	f3 f1       	brvs	.+124    	; 0x5204 <waves+0x304>
    5188:	ef ed       	ldi	r30, 0xDF	; 223
    518a:	eb e9       	ldi	r30, 0x9B	; 155
    518c:	e7 e5       	ldi	r30, 0x57	; 87
    518e:	e3 e1       	ldi	r30, 0x13	; 19
    5190:	df dd       	rcall	.-1090   	; 0x4d50 <steptable+0x48>
    5192:	db d9       	rcall	.-3146   	; 0x454a <PatchCommand14+0x10>
    5194:	d7 d5       	rcall	.+2990   	; 0x5d44 <ProcessFading+0x36>
    5196:	d3 d1       	rcall	.+934    	; 0x553e <waves+0x63e>
    5198:	cf cd       	rjmp	.-1122   	; 0x4d38 <steptable+0x30>
    519a:	cb c9       	rjmp	.-3178   	; 0x4532 <PatchCommand08+0x18>
    519c:	c7 c5       	rjmp	.+2958   	; 0x5d2c <ProcessFading+0x1e>
    519e:	c3 c1       	rjmp	.+902    	; 0x5526 <waves+0x626>
    51a0:	bf bd       	out	0x2f, r27	; 47
    51a2:	bb b9       	out	0x0b, r27	; 11
    51a4:	b7 b5       	in	r27, 0x27	; 39
    51a6:	b3 b1       	in	r27, 0x03	; 3
    51a8:	af ad       	ldd	r26, Y+63	; 0x3f
    51aa:	ab a9       	ldd	r26, Y+51	; 0x33
    51ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    51ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    51b0:	9f 9d       	mul	r25, r15
    51b2:	9b 99       	sbic	0x13, 3	; 19
    51b4:	97 95       	ror	r25
    51b6:	93 91       	.word	0x9193	; ????
    51b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51ba:	8b 89       	ldd	r24, Y+19	; 0x13
    51bc:	87 85       	ldd	r24, Z+15	; 0x0f
    51be:	83 81       	ldd	r24, Z+3	; 0x03
    51c0:	80 82       	st	Z, r8
    51c2:	84 86       	std	Z+12, r8	; 0x0c
    51c4:	88 8a       	std	Y+16, r8	; 0x10
    51c6:	8c 8e       	std	Y+28, r8	; 0x1c
    51c8:	90 92 94 96 	sts	0x9694, r9
    51cc:	98 9a       	sbi	0x13, 0	; 19
    51ce:	9c 9e       	mul	r9, r28
    51d0:	a0 a2       	std	Z+32, r10	; 0x20
    51d2:	a4 a6       	std	Z+44, r10	; 0x2c
    51d4:	a8 aa       	std	Y+48, r10	; 0x30
    51d6:	ac ae       	std	Y+60, r10	; 0x3c
    51d8:	b0 b2       	in	r11, 0x10	; 16
    51da:	b4 b6       	in	r11, 0x34	; 52
    51dc:	b8 ba       	out	0x18, r11	; 24
    51de:	bc be       	out	0x3c, r11	; 60
    51e0:	c0 c2       	rjmp	.+1408   	; 0x5762 <waves+0x862>
    51e2:	c4 c6       	rjmp	.+3464   	; 0x5f6c <LBRotateSprites+0x56>
    51e4:	c8 ca       	rjmp	.-2672   	; 0x4776 <TriggerFx+0x3c>
    51e6:	cc ce       	rjmp	.-616    	; 0x4f80 <waves+0x80>
    51e8:	d0 d2       	rcall	.+1440   	; 0x578a <waves+0x88a>
    51ea:	d4 d6       	rcall	.+3496   	; 0x5f94 <clear_sprites+0x18>
    51ec:	d8 da       	rcall	.-2640   	; 0x479e <TriggerFx+0x64>
    51ee:	dc de       	rcall	.-584    	; 0x4fa8 <waves+0xa8>
    51f0:	e0 e2       	ldi	r30, 0x20	; 32
    51f2:	e4 e6       	ldi	r30, 0x64	; 100
    51f4:	e8 ea       	ldi	r30, 0xA8	; 168
    51f6:	ec ee       	ldi	r30, 0xEC	; 236
    51f8:	f0 f2       	brcs	.-68     	; 0x51b6 <waves+0x2b6>
    51fa:	f4 f6       	brge	.-68     	; 0x51b8 <waves+0x2b8>
    51fc:	f8 fa       	.word	0xfaf8	; ????
    51fe:	fc fe       	.word	0xfefc	; ????
    5200:	7f 7f       	andi	r23, 0xFF	; 255
    5202:	7f 7f       	andi	r23, 0xFF	; 255
    5204:	7f 7f       	andi	r23, 0xFF	; 255
    5206:	7f 7f       	andi	r23, 0xFF	; 255
    5208:	7f 7f       	andi	r23, 0xFF	; 255
    520a:	7f 7f       	andi	r23, 0xFF	; 255
    520c:	7f 7f       	andi	r23, 0xFF	; 255
    520e:	7f 7f       	andi	r23, 0xFF	; 255
    5210:	7f 7f       	andi	r23, 0xFF	; 255
    5212:	7f 7f       	andi	r23, 0xFF	; 255
    5214:	7f 7f       	andi	r23, 0xFF	; 255
    5216:	7f 7f       	andi	r23, 0xFF	; 255
    5218:	7f 7f       	andi	r23, 0xFF	; 255
    521a:	7f 7f       	andi	r23, 0xFF	; 255
    521c:	7f 7f       	andi	r23, 0xFF	; 255
    521e:	7f 7f       	andi	r23, 0xFF	; 255
    5220:	7f 7f       	andi	r23, 0xFF	; 255
    5222:	7f 7f       	andi	r23, 0xFF	; 255
    5224:	7f 7f       	andi	r23, 0xFF	; 255
    5226:	7f 7f       	andi	r23, 0xFF	; 255
    5228:	7f 7f       	andi	r23, 0xFF	; 255
    522a:	7f 7f       	andi	r23, 0xFF	; 255
    522c:	7f 7f       	andi	r23, 0xFF	; 255
    522e:	7f 7f       	andi	r23, 0xFF	; 255
    5230:	7f 7f       	andi	r23, 0xFF	; 255
    5232:	7f 7f       	andi	r23, 0xFF	; 255
    5234:	7f 7f       	andi	r23, 0xFF	; 255
    5236:	7f 7f       	andi	r23, 0xFF	; 255
    5238:	7f 7f       	andi	r23, 0xFF	; 255
    523a:	7f 7f       	andi	r23, 0xFF	; 255
    523c:	7f 7f       	andi	r23, 0xFF	; 255
    523e:	7f 7f       	andi	r23, 0xFF	; 255
    5240:	80 80       	ld	r8, Z
    5242:	80 80       	ld	r8, Z
    5244:	80 80       	ld	r8, Z
    5246:	80 80       	ld	r8, Z
    5248:	80 80       	ld	r8, Z
    524a:	80 80       	ld	r8, Z
    524c:	80 80       	ld	r8, Z
    524e:	80 80       	ld	r8, Z
    5250:	80 80       	ld	r8, Z
    5252:	80 80       	ld	r8, Z
    5254:	80 80       	ld	r8, Z
    5256:	80 80       	ld	r8, Z
    5258:	80 80       	ld	r8, Z
    525a:	80 80       	ld	r8, Z
    525c:	80 80       	ld	r8, Z
    525e:	80 80       	ld	r8, Z
    5260:	80 80       	ld	r8, Z
    5262:	80 80       	ld	r8, Z
    5264:	80 80       	ld	r8, Z
    5266:	80 80       	ld	r8, Z
    5268:	80 80       	ld	r8, Z
    526a:	80 80       	ld	r8, Z
    526c:	80 80       	ld	r8, Z
    526e:	80 80       	ld	r8, Z
    5270:	80 80       	ld	r8, Z
    5272:	80 80       	ld	r8, Z
    5274:	80 80       	ld	r8, Z
    5276:	80 80       	ld	r8, Z
    5278:	80 80       	ld	r8, Z
    527a:	80 80       	ld	r8, Z
    527c:	80 80       	ld	r8, Z
    527e:	80 80       	ld	r8, Z
    5280:	80 80       	ld	r8, Z
    5282:	80 80       	ld	r8, Z
    5284:	80 80       	ld	r8, Z
    5286:	80 80       	ld	r8, Z
    5288:	80 80       	ld	r8, Z
    528a:	80 80       	ld	r8, Z
    528c:	80 80       	ld	r8, Z
    528e:	80 80       	ld	r8, Z
    5290:	80 80       	ld	r8, Z
    5292:	80 80       	ld	r8, Z
    5294:	80 80       	ld	r8, Z
    5296:	80 80       	ld	r8, Z
    5298:	80 80       	ld	r8, Z
    529a:	80 80       	ld	r8, Z
    529c:	80 80       	ld	r8, Z
    529e:	80 80       	ld	r8, Z
    52a0:	80 80       	ld	r8, Z
    52a2:	80 80       	ld	r8, Z
    52a4:	80 80       	ld	r8, Z
    52a6:	80 80       	ld	r8, Z
    52a8:	80 80       	ld	r8, Z
    52aa:	80 80       	ld	r8, Z
    52ac:	80 80       	ld	r8, Z
    52ae:	80 80       	ld	r8, Z
    52b0:	80 80       	ld	r8, Z
    52b2:	80 80       	ld	r8, Z
    52b4:	80 80       	ld	r8, Z
    52b6:	80 80       	ld	r8, Z
    52b8:	80 80       	ld	r8, Z
    52ba:	80 80       	ld	r8, Z
    52bc:	80 80       	ld	r8, Z
    52be:	80 80       	ld	r8, Z
    52c0:	80 80       	ld	r8, Z
    52c2:	80 80       	ld	r8, Z
    52c4:	80 80       	ld	r8, Z
    52c6:	80 80       	ld	r8, Z
    52c8:	80 80       	ld	r8, Z
    52ca:	80 80       	ld	r8, Z
    52cc:	80 80       	ld	r8, Z
    52ce:	80 80       	ld	r8, Z
    52d0:	80 80       	ld	r8, Z
    52d2:	80 80       	ld	r8, Z
    52d4:	80 80       	ld	r8, Z
    52d6:	80 80       	ld	r8, Z
    52d8:	80 80       	ld	r8, Z
    52da:	80 80       	ld	r8, Z
    52dc:	80 80       	ld	r8, Z
    52de:	80 80       	ld	r8, Z
    52e0:	80 80       	ld	r8, Z
    52e2:	80 80       	ld	r8, Z
    52e4:	80 80       	ld	r8, Z
    52e6:	80 80       	ld	r8, Z
    52e8:	80 80       	ld	r8, Z
    52ea:	80 80       	ld	r8, Z
    52ec:	80 80       	ld	r8, Z
    52ee:	80 80       	ld	r8, Z
    52f0:	80 80       	ld	r8, Z
    52f2:	80 80       	ld	r8, Z
    52f4:	80 80       	ld	r8, Z
    52f6:	80 80       	ld	r8, Z
    52f8:	80 80       	ld	r8, Z
    52fa:	80 80       	ld	r8, Z
    52fc:	80 80       	ld	r8, Z
    52fe:	80 80       	ld	r8, Z
    5300:	7f 7f       	andi	r23, 0xFF	; 255
    5302:	7f 7f       	andi	r23, 0xFF	; 255
    5304:	7f 7f       	andi	r23, 0xFF	; 255
    5306:	7f 7f       	andi	r23, 0xFF	; 255
    5308:	7f 7f       	andi	r23, 0xFF	; 255
    530a:	7f 7f       	andi	r23, 0xFF	; 255
    530c:	7f 7f       	andi	r23, 0xFF	; 255
    530e:	7f 7f       	andi	r23, 0xFF	; 255
    5310:	7f 7f       	andi	r23, 0xFF	; 255
    5312:	7f 7f       	andi	r23, 0xFF	; 255
    5314:	7f 7f       	andi	r23, 0xFF	; 255
    5316:	7f 7f       	andi	r23, 0xFF	; 255
    5318:	7f 7f       	andi	r23, 0xFF	; 255
    531a:	7f 7f       	andi	r23, 0xFF	; 255
    531c:	7f 7f       	andi	r23, 0xFF	; 255
    531e:	7f 7f       	andi	r23, 0xFF	; 255
    5320:	7f 7f       	andi	r23, 0xFF	; 255
    5322:	7f 7f       	andi	r23, 0xFF	; 255
    5324:	7f 7f       	andi	r23, 0xFF	; 255
    5326:	7f 7f       	andi	r23, 0xFF	; 255
    5328:	7f 7f       	andi	r23, 0xFF	; 255
    532a:	7f 7f       	andi	r23, 0xFF	; 255
    532c:	7f 7f       	andi	r23, 0xFF	; 255
    532e:	7f 7f       	andi	r23, 0xFF	; 255
    5330:	7f 7f       	andi	r23, 0xFF	; 255
    5332:	7f 7f       	andi	r23, 0xFF	; 255
    5334:	7f 7f       	andi	r23, 0xFF	; 255
    5336:	7f 7f       	andi	r23, 0xFF	; 255
    5338:	7f 7f       	andi	r23, 0xFF	; 255
    533a:	7f 7f       	andi	r23, 0xFF	; 255
    533c:	7f 7f       	andi	r23, 0xFF	; 255
    533e:	7f 7f       	andi	r23, 0xFF	; 255
    5340:	7f 7f       	andi	r23, 0xFF	; 255
    5342:	7f 7f       	andi	r23, 0xFF	; 255
    5344:	7f 7f       	andi	r23, 0xFF	; 255
    5346:	7f 7f       	andi	r23, 0xFF	; 255
    5348:	7f 7f       	andi	r23, 0xFF	; 255
    534a:	7f 7f       	andi	r23, 0xFF	; 255
    534c:	7f 7f       	andi	r23, 0xFF	; 255
    534e:	7f 7f       	andi	r23, 0xFF	; 255
    5350:	7f 7f       	andi	r23, 0xFF	; 255
    5352:	7f 7f       	andi	r23, 0xFF	; 255
    5354:	7f 7f       	andi	r23, 0xFF	; 255
    5356:	7f 7f       	andi	r23, 0xFF	; 255
    5358:	7f 7f       	andi	r23, 0xFF	; 255
    535a:	7f 7f       	andi	r23, 0xFF	; 255
    535c:	7f 7f       	andi	r23, 0xFF	; 255
    535e:	7f 7f       	andi	r23, 0xFF	; 255
    5360:	7f 7f       	andi	r23, 0xFF	; 255
    5362:	7f 7f       	andi	r23, 0xFF	; 255
    5364:	7f 7f       	andi	r23, 0xFF	; 255
    5366:	7f 7f       	andi	r23, 0xFF	; 255
    5368:	7f 7f       	andi	r23, 0xFF	; 255
    536a:	7f 7f       	andi	r23, 0xFF	; 255
    536c:	7f 7f       	andi	r23, 0xFF	; 255
    536e:	7f 7f       	andi	r23, 0xFF	; 255
    5370:	7f 7f       	andi	r23, 0xFF	; 255
    5372:	7f 7f       	andi	r23, 0xFF	; 255
    5374:	7f 7f       	andi	r23, 0xFF	; 255
    5376:	7f 7f       	andi	r23, 0xFF	; 255
    5378:	7f 7f       	andi	r23, 0xFF	; 255
    537a:	7f 7f       	andi	r23, 0xFF	; 255
    537c:	7f 7f       	andi	r23, 0xFF	; 255
    537e:	7f 7f       	andi	r23, 0xFF	; 255
    5380:	80 80       	ld	r8, Z
    5382:	80 80       	ld	r8, Z
    5384:	80 80       	ld	r8, Z
    5386:	80 80       	ld	r8, Z
    5388:	80 80       	ld	r8, Z
    538a:	80 80       	ld	r8, Z
    538c:	80 80       	ld	r8, Z
    538e:	80 80       	ld	r8, Z
    5390:	80 80       	ld	r8, Z
    5392:	80 80       	ld	r8, Z
    5394:	80 80       	ld	r8, Z
    5396:	80 80       	ld	r8, Z
    5398:	80 80       	ld	r8, Z
    539a:	80 80       	ld	r8, Z
    539c:	80 80       	ld	r8, Z
    539e:	80 80       	ld	r8, Z
    53a0:	80 80       	ld	r8, Z
    53a2:	80 80       	ld	r8, Z
    53a4:	80 80       	ld	r8, Z
    53a6:	80 80       	ld	r8, Z
    53a8:	80 80       	ld	r8, Z
    53aa:	80 80       	ld	r8, Z
    53ac:	80 80       	ld	r8, Z
    53ae:	80 80       	ld	r8, Z
    53b0:	80 80       	ld	r8, Z
    53b2:	80 80       	ld	r8, Z
    53b4:	80 80       	ld	r8, Z
    53b6:	80 80       	ld	r8, Z
    53b8:	80 80       	ld	r8, Z
    53ba:	80 80       	ld	r8, Z
    53bc:	80 80       	ld	r8, Z
    53be:	80 80       	ld	r8, Z
    53c0:	80 80       	ld	r8, Z
    53c2:	80 80       	ld	r8, Z
    53c4:	80 80       	ld	r8, Z
    53c6:	80 80       	ld	r8, Z
    53c8:	80 80       	ld	r8, Z
    53ca:	80 80       	ld	r8, Z
    53cc:	80 80       	ld	r8, Z
    53ce:	80 80       	ld	r8, Z
    53d0:	80 80       	ld	r8, Z
    53d2:	80 80       	ld	r8, Z
    53d4:	80 80       	ld	r8, Z
    53d6:	80 80       	ld	r8, Z
    53d8:	80 80       	ld	r8, Z
    53da:	80 80       	ld	r8, Z
    53dc:	80 80       	ld	r8, Z
    53de:	80 80       	ld	r8, Z
    53e0:	80 80       	ld	r8, Z
    53e2:	80 80       	ld	r8, Z
    53e4:	80 80       	ld	r8, Z
    53e6:	80 80       	ld	r8, Z
    53e8:	80 80       	ld	r8, Z
    53ea:	80 80       	ld	r8, Z
    53ec:	80 80       	ld	r8, Z
    53ee:	80 80       	ld	r8, Z
    53f0:	80 80       	ld	r8, Z
    53f2:	80 80       	ld	r8, Z
    53f4:	80 80       	ld	r8, Z
    53f6:	80 80       	ld	r8, Z
    53f8:	80 80       	ld	r8, Z
    53fa:	80 80       	ld	r8, Z
    53fc:	80 80       	ld	r8, Z
    53fe:	80 80       	ld	r8, Z
    5400:	7f 7f       	andi	r23, 0xFF	; 255
    5402:	7f 7f       	andi	r23, 0xFF	; 255
    5404:	7f 7f       	andi	r23, 0xFF	; 255
    5406:	7f 7f       	andi	r23, 0xFF	; 255
    5408:	7f 7f       	andi	r23, 0xFF	; 255
    540a:	7f 7f       	andi	r23, 0xFF	; 255
    540c:	7f 7f       	andi	r23, 0xFF	; 255
    540e:	7f 7f       	andi	r23, 0xFF	; 255
    5410:	7f 7f       	andi	r23, 0xFF	; 255
    5412:	7f 7f       	andi	r23, 0xFF	; 255
    5414:	7f 7f       	andi	r23, 0xFF	; 255
    5416:	7f 7f       	andi	r23, 0xFF	; 255
    5418:	7f 7f       	andi	r23, 0xFF	; 255
    541a:	7f 7f       	andi	r23, 0xFF	; 255
    541c:	7f 7f       	andi	r23, 0xFF	; 255
    541e:	7f 7f       	andi	r23, 0xFF	; 255
    5420:	7f 7f       	andi	r23, 0xFF	; 255
    5422:	7f 7f       	andi	r23, 0xFF	; 255
    5424:	7f 7f       	andi	r23, 0xFF	; 255
    5426:	7f 7f       	andi	r23, 0xFF	; 255
    5428:	7f 7f       	andi	r23, 0xFF	; 255
    542a:	7f 7f       	andi	r23, 0xFF	; 255
    542c:	7f 7f       	andi	r23, 0xFF	; 255
    542e:	7f 7f       	andi	r23, 0xFF	; 255
    5430:	7f 7f       	andi	r23, 0xFF	; 255
    5432:	7f 7f       	andi	r23, 0xFF	; 255
    5434:	7f 7f       	andi	r23, 0xFF	; 255
    5436:	7f 7f       	andi	r23, 0xFF	; 255
    5438:	7f 7f       	andi	r23, 0xFF	; 255
    543a:	7f 7f       	andi	r23, 0xFF	; 255
    543c:	7f 7f       	andi	r23, 0xFF	; 255
    543e:	7f 7f       	andi	r23, 0xFF	; 255
    5440:	7f 7f       	andi	r23, 0xFF	; 255
    5442:	7f 7f       	andi	r23, 0xFF	; 255
    5444:	7f 7f       	andi	r23, 0xFF	; 255
    5446:	7f 7f       	andi	r23, 0xFF	; 255
    5448:	7f 7f       	andi	r23, 0xFF	; 255
    544a:	7f 7f       	andi	r23, 0xFF	; 255
    544c:	7f 7f       	andi	r23, 0xFF	; 255
    544e:	7f 7f       	andi	r23, 0xFF	; 255
    5450:	7f 7f       	andi	r23, 0xFF	; 255
    5452:	7f 7f       	andi	r23, 0xFF	; 255
    5454:	7f 7f       	andi	r23, 0xFF	; 255
    5456:	7f 7f       	andi	r23, 0xFF	; 255
    5458:	7f 7f       	andi	r23, 0xFF	; 255
    545a:	7f 7f       	andi	r23, 0xFF	; 255
    545c:	7f 7f       	andi	r23, 0xFF	; 255
    545e:	7f 7f       	andi	r23, 0xFF	; 255
    5460:	7f 7f       	andi	r23, 0xFF	; 255
    5462:	7f 7f       	andi	r23, 0xFF	; 255
    5464:	7f 7f       	andi	r23, 0xFF	; 255
    5466:	7f 7f       	andi	r23, 0xFF	; 255
    5468:	7f 7f       	andi	r23, 0xFF	; 255
    546a:	7f 7f       	andi	r23, 0xFF	; 255
    546c:	7f 7f       	andi	r23, 0xFF	; 255
    546e:	7f 7f       	andi	r23, 0xFF	; 255
    5470:	7f 7f       	andi	r23, 0xFF	; 255
    5472:	7f 7f       	andi	r23, 0xFF	; 255
    5474:	7f 7f       	andi	r23, 0xFF	; 255
    5476:	7f 7f       	andi	r23, 0xFF	; 255
    5478:	7f 7f       	andi	r23, 0xFF	; 255
    547a:	7f 7f       	andi	r23, 0xFF	; 255
    547c:	7f 7f       	andi	r23, 0xFF	; 255
    547e:	7f 7f       	andi	r23, 0xFF	; 255
    5480:	7f 7f       	andi	r23, 0xFF	; 255
    5482:	7f 7f       	andi	r23, 0xFF	; 255
    5484:	7f 7f       	andi	r23, 0xFF	; 255
    5486:	7f 7f       	andi	r23, 0xFF	; 255
    5488:	7f 7f       	andi	r23, 0xFF	; 255
    548a:	7f 7f       	andi	r23, 0xFF	; 255
    548c:	7f 7f       	andi	r23, 0xFF	; 255
    548e:	7f 7f       	andi	r23, 0xFF	; 255
    5490:	7f 7f       	andi	r23, 0xFF	; 255
    5492:	7f 7f       	andi	r23, 0xFF	; 255
    5494:	7f 7f       	andi	r23, 0xFF	; 255
    5496:	7f 7f       	andi	r23, 0xFF	; 255
    5498:	7f 7f       	andi	r23, 0xFF	; 255
    549a:	7f 7f       	andi	r23, 0xFF	; 255
    549c:	7f 7f       	andi	r23, 0xFF	; 255
    549e:	7f 7f       	andi	r23, 0xFF	; 255
    54a0:	7f 7f       	andi	r23, 0xFF	; 255
    54a2:	7f 7f       	andi	r23, 0xFF	; 255
    54a4:	7f 7f       	andi	r23, 0xFF	; 255
    54a6:	7f 7f       	andi	r23, 0xFF	; 255
    54a8:	7f 7f       	andi	r23, 0xFF	; 255
    54aa:	7f 7f       	andi	r23, 0xFF	; 255
    54ac:	7f 7f       	andi	r23, 0xFF	; 255
    54ae:	7f 7f       	andi	r23, 0xFF	; 255
    54b0:	7f 7f       	andi	r23, 0xFF	; 255
    54b2:	7f 7f       	andi	r23, 0xFF	; 255
    54b4:	7f 7f       	andi	r23, 0xFF	; 255
    54b6:	7f 7f       	andi	r23, 0xFF	; 255
    54b8:	7f 7f       	andi	r23, 0xFF	; 255
    54ba:	7f 7f       	andi	r23, 0xFF	; 255
    54bc:	7f 7f       	andi	r23, 0xFF	; 255
    54be:	7f 7f       	andi	r23, 0xFF	; 255
    54c0:	80 80       	ld	r8, Z
    54c2:	80 80       	ld	r8, Z
    54c4:	80 80       	ld	r8, Z
    54c6:	80 80       	ld	r8, Z
    54c8:	80 80       	ld	r8, Z
    54ca:	80 80       	ld	r8, Z
    54cc:	80 80       	ld	r8, Z
    54ce:	80 80       	ld	r8, Z
    54d0:	80 80       	ld	r8, Z
    54d2:	80 80       	ld	r8, Z
    54d4:	80 80       	ld	r8, Z
    54d6:	80 80       	ld	r8, Z
    54d8:	80 80       	ld	r8, Z
    54da:	80 80       	ld	r8, Z
    54dc:	80 80       	ld	r8, Z
    54de:	80 80       	ld	r8, Z
    54e0:	80 80       	ld	r8, Z
    54e2:	80 80       	ld	r8, Z
    54e4:	80 80       	ld	r8, Z
    54e6:	80 80       	ld	r8, Z
    54e8:	80 80       	ld	r8, Z
    54ea:	80 80       	ld	r8, Z
    54ec:	80 80       	ld	r8, Z
    54ee:	80 80       	ld	r8, Z
    54f0:	80 80       	ld	r8, Z
    54f2:	80 80       	ld	r8, Z
    54f4:	80 80       	ld	r8, Z
    54f6:	80 80       	ld	r8, Z
    54f8:	80 80       	ld	r8, Z
    54fa:	80 80       	ld	r8, Z
    54fc:	80 80       	ld	r8, Z
    54fe:	80 80       	ld	r8, Z
    5500:	03 09       	sbc	r16, r3
    5502:	13 1e       	adc	r1, r19
    5504:	28 31       	cpi	r18, 0x18	; 24
    5506:	3a 40       	sbci	r19, 0x0A	; 10
    5508:	46 4c       	sbci	r20, 0xC6	; 198
    550a:	50 54       	subi	r21, 0x40	; 64
    550c:	58 5b       	subi	r21, 0xB8	; 184
    550e:	5e 61       	ori	r21, 0x1E	; 30
    5510:	63 65       	ori	r22, 0x53	; 83
    5512:	67 69       	ori	r22, 0x97	; 151
    5514:	6b 6c       	ori	r22, 0xCB	; 203
    5516:	6e 6f       	ori	r22, 0xFE	; 254
    5518:	70 71       	andi	r23, 0x10	; 16
    551a:	72 73       	andi	r23, 0x32	; 50
    551c:	74 75       	andi	r23, 0x54	; 84
    551e:	76 77       	andi	r23, 0x76	; 118
    5520:	77 78       	andi	r23, 0x87	; 135
    5522:	79 79       	andi	r23, 0x99	; 153
    5524:	7a 7a       	andi	r23, 0xAA	; 170
    5526:	7b 7b       	andi	r23, 0xBB	; 187
    5528:	7c 7c       	andi	r23, 0xCC	; 204
    552a:	7c 7d       	andi	r23, 0xDC	; 220
    552c:	7d 7d       	andi	r23, 0xDD	; 221
    552e:	7e 7e       	andi	r23, 0xEE	; 238
    5530:	7e 7e       	andi	r23, 0xEE	; 238
    5532:	7f 7f       	andi	r23, 0xFF	; 255
    5534:	7f 7f       	andi	r23, 0xFF	; 255
    5536:	7f 7f       	andi	r23, 0xFF	; 255
    5538:	7f 7f       	andi	r23, 0xFF	; 255
    553a:	7f 7f       	andi	r23, 0xFF	; 255
    553c:	7f 7f       	andi	r23, 0xFF	; 255
    553e:	7f 7f       	andi	r23, 0xFF	; 255
    5540:	7f 7f       	andi	r23, 0xFF	; 255
    5542:	7f 7f       	andi	r23, 0xFF	; 255
    5544:	7f 7f       	andi	r23, 0xFF	; 255
    5546:	7f 7f       	andi	r23, 0xFF	; 255
    5548:	7f 7f       	andi	r23, 0xFF	; 255
    554a:	7f 7f       	andi	r23, 0xFF	; 255
    554c:	7f 7e       	andi	r23, 0xEF	; 239
    554e:	7e 7e       	andi	r23, 0xEE	; 238
    5550:	7e 7d       	andi	r23, 0xDE	; 222
    5552:	7d 7d       	andi	r23, 0xDD	; 221
    5554:	7c 7c       	andi	r23, 0xCC	; 204
    5556:	7c 7b       	andi	r23, 0xBC	; 188
    5558:	7b 7a       	andi	r23, 0xAB	; 171
    555a:	7a 79       	andi	r23, 0x9A	; 154
    555c:	79 78       	andi	r23, 0x89	; 137
    555e:	77 77       	andi	r23, 0x77	; 119
    5560:	76 75       	andi	r23, 0x56	; 86
    5562:	74 73       	andi	r23, 0x34	; 52
    5564:	72 71       	andi	r23, 0x12	; 18
    5566:	70 6f       	ori	r23, 0xF0	; 240
    5568:	6e 6c       	ori	r22, 0xCE	; 206
    556a:	6b 69       	ori	r22, 0x9B	; 155
    556c:	67 65       	ori	r22, 0x57	; 87
    556e:	63 61       	ori	r22, 0x13	; 19
    5570:	5e 5b       	subi	r21, 0xBE	; 190
    5572:	58 54       	subi	r21, 0x48	; 72
    5574:	50 4c       	sbci	r21, 0xC0	; 192
    5576:	46 40       	sbci	r20, 0x06	; 6
    5578:	3a 31       	cpi	r19, 0x1A	; 26
    557a:	28 1e       	adc	r2, r24
    557c:	13 09       	sbc	r17, r3
    557e:	03 00       	.word	0x0003	; ????
    5580:	c6 cc       	rjmp	.-1652   	; 0x4f0e <waves+0xe>
    5582:	d5 db       	rcall	.-2134   	; 0x4d2e <steptable+0x26>
    5584:	df e3       	ldi	r29, 0x3F	; 63
    5586:	e5 e7       	ldi	r30, 0x75	; 117
    5588:	e9 ea       	ldi	r30, 0xA9	; 169
    558a:	eb ec       	ldi	r30, 0xCB	; 203
    558c:	ed ee       	ldi	r30, 0xED	; 237
    558e:	ef ef       	ldi	r30, 0xFF	; 255
    5590:	f0 f0       	brcs	.+60     	; 0x55ce <waves+0x6ce>
    5592:	f0 f1       	brcs	.+124    	; 0x5610 <waves+0x710>
    5594:	f1 f1       	breq	.+124    	; 0x5612 <waves+0x712>
    5596:	f1 f2       	breq	.-68     	; 0x5554 <waves+0x654>
    5598:	f2 f2       	brmi	.-68     	; 0x5556 <waves+0x656>
    559a:	f2 f2       	brmi	.-68     	; 0x5558 <waves+0x658>
    559c:	f2 f2       	brmi	.-68     	; 0x555a <waves+0x65a>
    559e:	f2 f3       	brmi	.-4      	; 0x559c <waves+0x69c>
    55a0:	f3 f3       	brvs	.-4      	; 0x559e <waves+0x69e>
    55a2:	f3 f3       	brvs	.-4      	; 0x55a0 <waves+0x6a0>
    55a4:	f3 f3       	brvs	.-4      	; 0x55a2 <waves+0x6a2>
    55a6:	f3 f3       	brvs	.-4      	; 0x55a4 <waves+0x6a4>
    55a8:	f3 f3       	brvs	.-4      	; 0x55a6 <waves+0x6a6>
    55aa:	f3 f3       	brvs	.-4      	; 0x55a8 <waves+0x6a8>
    55ac:	f3 f3       	brvs	.-4      	; 0x55aa <waves+0x6aa>
    55ae:	f3 f3       	brvs	.-4      	; 0x55ac <waves+0x6ac>
    55b0:	f3 f3       	brvs	.-4      	; 0x55ae <waves+0x6ae>
    55b2:	f3 f3       	brvs	.-4      	; 0x55b0 <waves+0x6b0>
    55b4:	f3 f3       	brvs	.-4      	; 0x55b2 <waves+0x6b2>
    55b6:	f3 f3       	brvs	.-4      	; 0x55b4 <waves+0x6b4>
    55b8:	f3 f3       	brvs	.-4      	; 0x55b6 <waves+0x6b6>
    55ba:	f3 f3       	brvs	.-4      	; 0x55b8 <waves+0x6b8>
    55bc:	f3 f3       	brvs	.-4      	; 0x55ba <waves+0x6ba>
    55be:	f3 f3       	brvs	.-4      	; 0x55bc <waves+0x6bc>
    55c0:	f3 f3       	brvs	.-4      	; 0x55be <waves+0x6be>
    55c2:	f3 f3       	brvs	.-4      	; 0x55c0 <waves+0x6c0>
    55c4:	f3 f3       	brvs	.-4      	; 0x55c2 <waves+0x6c2>
    55c6:	f3 f3       	brvs	.-4      	; 0x55c4 <waves+0x6c4>
    55c8:	f3 f3       	brvs	.-4      	; 0x55c6 <waves+0x6c6>
    55ca:	f3 f3       	brvs	.-4      	; 0x55c8 <waves+0x6c8>
    55cc:	f3 f3       	brvs	.-4      	; 0x55ca <waves+0x6ca>
    55ce:	f3 f3       	brvs	.-4      	; 0x55cc <waves+0x6cc>
    55d0:	f3 f3       	brvs	.-4      	; 0x55ce <waves+0x6ce>
    55d2:	f3 f3       	brvs	.-4      	; 0x55d0 <waves+0x6d0>
    55d4:	f3 f3       	brvs	.-4      	; 0x55d2 <waves+0x6d2>
    55d6:	f3 f3       	brvs	.-4      	; 0x55d4 <waves+0x6d4>
    55d8:	f3 f3       	brvs	.-4      	; 0x55d6 <waves+0x6d6>
    55da:	f3 f3       	brvs	.-4      	; 0x55d8 <waves+0x6d8>
    55dc:	f3 f3       	brvs	.-4      	; 0x55da <waves+0x6da>
    55de:	f3 f3       	brvs	.-4      	; 0x55dc <waves+0x6dc>
    55e0:	f2 f2       	brmi	.-68     	; 0x559e <waves+0x69e>
    55e2:	f2 f2       	brmi	.-68     	; 0x55a0 <waves+0x6a0>
    55e4:	f2 f2       	brmi	.-68     	; 0x55a2 <waves+0x6a2>
    55e6:	f2 f2       	brmi	.-68     	; 0x55a4 <waves+0x6a4>
    55e8:	f1 f1       	breq	.+124    	; 0x5666 <waves+0x766>
    55ea:	f1 f1       	breq	.+124    	; 0x5668 <waves+0x768>
    55ec:	f0 f0       	brcs	.+60     	; 0x562a <waves+0x72a>
    55ee:	f0 ef       	ldi	r31, 0xF0	; 240
    55f0:	ef ee       	ldi	r30, 0xEF	; 239
    55f2:	ed ec       	ldi	r30, 0xCD	; 205
    55f4:	eb ea       	ldi	r30, 0xAB	; 171
    55f6:	e9 e7       	ldi	r30, 0x79	; 121
    55f8:	e5 e3       	ldi	r30, 0x35	; 53
    55fa:	df db       	rcall	.-2114   	; 0x4dba <steptable+0xb2>
    55fc:	d5 cc       	rjmp	.-1622   	; 0x4fa8 <waves+0xa8>
    55fe:	c6 00       	.word	0x00c6	; ????
    5600:	00 28       	or	r0, r0
    5602:	3d 42       	sbci	r19, 0x2D	; 45
    5604:	30 2d       	mov	r19, r0
    5606:	2c 2b       	or	r18, r28
    5608:	2c 2d       	mov	r18, r12
    560a:	2e 2f       	mov	r18, r30
    560c:	30 32       	cpi	r19, 0x20	; 32
    560e:	33 35       	cpi	r19, 0x53	; 83
    5610:	37 39       	cpi	r19, 0x97	; 151
    5612:	3b 3d       	cpi	r19, 0xDB	; 219
    5614:	3f 41       	sbci	r19, 0x1F	; 31
    5616:	43 45       	sbci	r20, 0x53	; 83
    5618:	48 4a       	sbci	r20, 0xA8	; 168
    561a:	4c 4e       	sbci	r20, 0xEC	; 236
    561c:	50 53       	subi	r21, 0x30	; 48
    561e:	55 57       	subi	r21, 0x75	; 117
    5620:	59 5b       	subi	r21, 0xB9	; 185
    5622:	5d 5f       	subi	r21, 0xFD	; 253
    5624:	61 63       	ori	r22, 0x31	; 49
    5626:	65 67       	ori	r22, 0x75	; 117
    5628:	69 6b       	ori	r22, 0xB9	; 185
    562a:	6c 6e       	ori	r22, 0xEC	; 236
    562c:	70 71       	andi	r23, 0x10	; 16
    562e:	73 74       	andi	r23, 0x43	; 67
    5630:	75 77       	andi	r23, 0x75	; 117
    5632:	78 79       	andi	r23, 0x98	; 152
    5634:	7a 7b       	andi	r23, 0xBA	; 186
    5636:	7c 7d       	andi	r23, 0xDC	; 220
    5638:	7d 7e       	andi	r23, 0xED	; 237
    563a:	7e 7f       	andi	r23, 0xFE	; 254
    563c:	7f 7f       	andi	r23, 0xFF	; 255
    563e:	7f 7f       	andi	r23, 0xFF	; 255
    5640:	7f 7f       	andi	r23, 0xFF	; 255
    5642:	7f 7f       	andi	r23, 0xFF	; 255
    5644:	7f 7f       	andi	r23, 0xFF	; 255
    5646:	7e 7e       	andi	r23, 0xEE	; 238
    5648:	7d 7d       	andi	r23, 0xDD	; 221
    564a:	7c 7b       	andi	r23, 0xBC	; 188
    564c:	7a 79       	andi	r23, 0x9A	; 154
    564e:	78 77       	andi	r23, 0x78	; 120
    5650:	75 74       	andi	r23, 0x45	; 69
    5652:	73 71       	andi	r23, 0x13	; 19
    5654:	70 6e       	ori	r23, 0xE0	; 224
    5656:	6c 6b       	ori	r22, 0xBC	; 188
    5658:	69 67       	ori	r22, 0x79	; 121
    565a:	65 63       	ori	r22, 0x35	; 53
    565c:	61 5f       	subi	r22, 0xF1	; 241
    565e:	5d 5b       	subi	r21, 0xBD	; 189
    5660:	59 57       	subi	r21, 0x79	; 121
    5662:	55 53       	subi	r21, 0x35	; 53
    5664:	50 4e       	sbci	r21, 0xE0	; 224
    5666:	4c 4a       	sbci	r20, 0xAC	; 172
    5668:	48 45       	sbci	r20, 0x58	; 88
    566a:	43 41       	sbci	r20, 0x13	; 19
    566c:	3f 3d       	cpi	r19, 0xDF	; 223
    566e:	3b 39       	cpi	r19, 0x9B	; 155
    5670:	37 35       	cpi	r19, 0x57	; 87
    5672:	33 32       	cpi	r19, 0x23	; 35
    5674:	30 2f       	mov	r19, r16
    5676:	2e 2d       	mov	r18, r14
    5678:	2c 2b       	or	r18, r28
    567a:	2c 2d       	mov	r18, r12
    567c:	30 42       	sbci	r19, 0x20	; 32
    567e:	3d 28       	or	r3, r13
    5680:	00 e9       	ldi	r16, 0x90	; 144
    5682:	e5 fe       	sbrs	r14, 5
    5684:	d4 d7       	rcall	.+4008   	; 0x662e <__data_load_end+0x512>
    5686:	d7 d7       	rcall	.+4014   	; 0x6636 <__data_load_end+0x51a>
    5688:	d6 d4       	rcall	.+2476   	; 0x6036 <update_splash+0xa>
    568a:	d2 d0       	rcall	.+420    	; 0x5830 <waves+0x930>
    568c:	ce cc       	rjmp	.-1636   	; 0x502a <waves+0x12a>
    568e:	ca c8       	rjmp	.-3692   	; 0x4824 <TriggerNote+0x5a>
    5690:	c6 c3       	rjmp	.+1932   	; 0x5e1e <LBMapSprite+0x28>
    5692:	c1 bf       	out	0x31, r28	; 49
    5694:	bd ba       	out	0x1d, r11	; 29
    5696:	b8 b6       	in	r11, 0x38	; 56
    5698:	b4 b1       	in	r27, 0x04	; 4
    569a:	af ad       	ldd	r26, Y+63	; 0x3f
    569c:	ab a9       	ldd	r26, Y+51	; 0x33
    569e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    56a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    56a2:	9f 9e       	mul	r9, r31
    56a4:	9c 9a       	sbi	0x13, 4	; 19
    56a6:	99 97       	sbiw	r26, 0x29	; 41
    56a8:	95 94       	asr	r9
    56aa:	93 91       	.word	0x9193	; ????
    56ac:	90 8f       	std	Z+24, r25	; 0x18
    56ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    56b0:	8b 8a       	std	Y+19, r8	; 0x13
    56b2:	89 88       	ldd	r8, Y+17	; 0x11
    56b4:	88 87       	std	Y+8, r24	; 0x08
    56b6:	86 85       	ldd	r24, Z+14	; 0x0e
    56b8:	85 84       	ldd	r8, Z+13	; 0x0d
    56ba:	84 84       	ldd	r8, Z+12	; 0x0c
    56bc:	83 83       	std	Z+3, r24	; 0x03
    56be:	83 83       	std	Z+3, r24	; 0x03
    56c0:	83 83       	std	Z+3, r24	; 0x03
    56c2:	83 83       	std	Z+3, r24	; 0x03
    56c4:	83 84       	ldd	r8, Z+11	; 0x0b
    56c6:	84 84       	ldd	r8, Z+12	; 0x0c
    56c8:	85 85       	ldd	r24, Z+13	; 0x0d
    56ca:	86 87       	std	Z+14, r24	; 0x0e
    56cc:	88 88       	ldd	r8, Y+16	; 0x10
    56ce:	89 8a       	std	Y+17, r8	; 0x11
    56d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    56d2:	8d 8f       	std	Y+29, r24	; 0x1d
    56d4:	90 91 93 94 	lds	r25, 0x9493
    56d8:	95 97       	sbiw	r26, 0x25	; 37
    56da:	99 9a       	sbi	0x13, 1	; 19
    56dc:	9c 9e       	mul	r9, r28
    56de:	9f a1       	ldd	r25, Y+39	; 0x27
    56e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    56e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    56e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    56e6:	af b1       	in	r26, 0x0f	; 15
    56e8:	b4 b6       	in	r11, 0x34	; 52
    56ea:	b8 ba       	out	0x18, r11	; 24
    56ec:	bd bf       	out	0x3d, r27	; 61
    56ee:	c1 c3       	rjmp	.+1922   	; 0x5e72 <LBMapSprite+0x7c>
    56f0:	c6 c8       	rjmp	.-3700   	; 0x487e <ProcessMusic+0x34>
    56f2:	ca cc       	rjmp	.-1644   	; 0x5088 <waves+0x188>
    56f4:	ce d0       	rcall	.+412    	; 0x5892 <waves+0x992>
    56f6:	d2 d4       	rcall	.+2468   	; 0x609c <main+0x2a>
    56f8:	d6 d7       	rcall	.+4012   	; 0x66a6 <__data_load_end+0x58a>
    56fa:	d7 d7       	rcall	.+4014   	; 0x66aa <__data_load_end+0x58e>
    56fc:	d4 fe       	sbrs	r13, 4
    56fe:	e5 e9       	ldi	r30, 0x95	; 149
    5700:	f9 f8       	.word	0xf8f9	; ????
    5702:	f9 f5       	brne	.+126    	; 0x5782 <waves+0x882>
    5704:	eb e1       	ldi	r30, 0x1B	; 27
    5706:	dd de       	rcall	.-582    	; 0x54c2 <waves+0x5c2>
    5708:	e0 e2       	ldi	r30, 0x20	; 32
    570a:	e4 e5       	ldi	r30, 0x54	; 84
    570c:	e6 e5       	ldi	r30, 0x56	; 86
    570e:	e4 e2       	ldi	r30, 0x24	; 36
    5710:	de d9       	rcall	.-3140   	; 0x4ace <ProcessMusic+0x284>
    5712:	d2 ca       	rjmp	.-2652   	; 0x4cb8 <set_note_waves+0x20>
    5714:	c1 b7       	in	r28, 0x31	; 49
    5716:	ac a2       	std	Y+36, r10	; 0x24
    5718:	99 91       	ld	r25, Y+
    571a:	8a 86       	std	Y+10, r8	; 0x0a
    571c:	83 81       	ldd	r24, Z+3	; 0x03
    571e:	80 80       	ld	r8, Z
    5720:	81 82       	std	Z+1, r8	; 0x01
    5722:	83 85       	ldd	r24, Z+11	; 0x0b
    5724:	86 88       	ldd	r8, Z+22	; 0x16
    5726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    5728:	8d 8f       	std	Y+29, r24	; 0x1d
    572a:	90 92 93 95 	sts	0x9593, r9
    572e:	96 97       	sbiw	r26, 0x26	; 38
    5730:	98 99       	sbic	0x13, 0	; 19
    5732:	9a 9b       	sbis	0x13, 2	; 19
    5734:	9b 9c       	mul	r9, r11
    5736:	9d 9d       	mul	r25, r13
    5738:	9d 9e       	mul	r9, r29
    573a:	9e 9e       	mul	r9, r30
    573c:	9f 9f       	mul	r25, r31
    573e:	9f 9f       	mul	r25, r31
    5740:	9f 9f       	mul	r25, r31
    5742:	9f 9e       	mul	r9, r31
    5744:	9e 9e       	mul	r9, r30
    5746:	9d 9d       	mul	r25, r13
    5748:	9d 9c       	mul	r9, r13
    574a:	9b 9b       	sbis	0x13, 3	; 19
    574c:	9a 99       	sbic	0x13, 2	; 19
    574e:	98 97       	sbiw	r26, 0x28	; 40
    5750:	96 95       	lsr	r25
    5752:	93 92       	.word	0x9293	; ????
    5754:	90 8f       	std	Z+24, r25	; 0x18
    5756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    5758:	8a 88       	ldd	r8, Y+18	; 0x12
    575a:	86 85       	ldd	r24, Z+14	; 0x0e
    575c:	83 82       	std	Z+3, r8	; 0x03
    575e:	81 80       	ldd	r8, Z+1	; 0x01
    5760:	80 81       	ld	r24, Z
    5762:	83 86       	std	Z+11, r8	; 0x0b
    5764:	8a 91       	ld	r24, -Y
    5766:	99 a2       	std	Y+33, r9	; 0x21
    5768:	ac b7       	in	r26, 0x3c	; 60
    576a:	c1 ca       	rjmp	.-2686   	; 0x4cee <smw2+0x2>
    576c:	d2 d9       	rcall	.-3164   	; 0x4b12 <ProcessMusic+0x2c8>
    576e:	de e2       	ldi	r29, 0x2E	; 46
    5770:	e4 e5       	ldi	r30, 0x54	; 84
    5772:	e6 e5       	ldi	r30, 0x56	; 86
    5774:	e4 e2       	ldi	r30, 0x24	; 36
    5776:	e0 de       	rcall	.-576    	; 0x5538 <waves+0x638>
    5778:	dd e1       	ldi	r29, 0x1D	; 29
    577a:	eb f5       	brvc	.+122    	; 0x57f6 <waves+0x8f6>
    577c:	f9 f8       	.word	0xf8f9	; ????
    577e:	f9 00       	.word	0x00f9	; ????
    5780:	07 08       	sbc	r0, r7
    5782:	07 0b       	sbc	r16, r23
    5784:	15 1f       	adc	r17, r21
    5786:	23 22       	and	r2, r19
    5788:	20 1e       	adc	r2, r16
    578a:	1c 1b       	sub	r17, r28
    578c:	1a 1b       	sub	r17, r26
    578e:	1c 1e       	adc	r1, r28
    5790:	22 27       	eor	r18, r18
    5792:	2e 36       	cpi	r18, 0x6E	; 110
    5794:	3f 49       	sbci	r19, 0x9F	; 159
    5796:	54 5e       	subi	r21, 0xE4	; 228
    5798:	67 6f       	ori	r22, 0xF7	; 247
    579a:	76 7a       	andi	r23, 0xA6	; 166
    579c:	7e 7f       	andi	r23, 0xFE	; 254
    579e:	7f 7f       	andi	r23, 0xFF	; 255
    57a0:	7f 7e       	andi	r23, 0xEF	; 239
    57a2:	7d 7b       	andi	r23, 0xBD	; 189
    57a4:	7a 78       	andi	r23, 0x8A	; 138
    57a6:	76 74       	andi	r23, 0x46	; 70
    57a8:	73 71       	andi	r23, 0x13	; 19
    57aa:	70 6e       	ori	r23, 0xE0	; 224
    57ac:	6d 6b       	ori	r22, 0xBD	; 189
    57ae:	6a 69       	ori	r22, 0x9A	; 154
    57b0:	68 67       	ori	r22, 0x78	; 120
    57b2:	66 65       	ori	r22, 0x56	; 86
    57b4:	65 64       	ori	r22, 0x45	; 69
    57b6:	64 63       	ori	r22, 0x34	; 52
    57b8:	63 62       	ori	r22, 0x23	; 35
    57ba:	62 62       	ori	r22, 0x22	; 34
    57bc:	61 61       	ori	r22, 0x11	; 17
    57be:	61 61       	ori	r22, 0x11	; 17
    57c0:	61 61       	ori	r22, 0x11	; 17
    57c2:	61 62       	ori	r22, 0x21	; 33
    57c4:	62 62       	ori	r22, 0x22	; 34
    57c6:	63 63       	ori	r22, 0x33	; 51
    57c8:	63 64       	ori	r22, 0x43	; 67
    57ca:	65 65       	ori	r22, 0x55	; 85
    57cc:	66 67       	ori	r22, 0x76	; 118
    57ce:	68 69       	ori	r22, 0x98	; 152
    57d0:	6a 6b       	ori	r22, 0xBA	; 186
    57d2:	6d 6e       	ori	r22, 0xED	; 237
    57d4:	70 71       	andi	r23, 0x10	; 16
    57d6:	73 74       	andi	r23, 0x43	; 67
    57d8:	76 78       	andi	r23, 0x86	; 134
    57da:	7a 7b       	andi	r23, 0xBA	; 186
    57dc:	7d 7e       	andi	r23, 0xED	; 237
    57de:	7f 7f       	andi	r23, 0xFF	; 255
    57e0:	7f 7f       	andi	r23, 0xFF	; 255
    57e2:	7e 7a       	andi	r23, 0xAE	; 174
    57e4:	76 6f       	ori	r23, 0xF6	; 246
    57e6:	67 5e       	subi	r22, 0xE7	; 231
    57e8:	54 49       	sbci	r21, 0x94	; 148
    57ea:	3f 36       	cpi	r19, 0x6F	; 111
    57ec:	2e 27       	eor	r18, r30
    57ee:	22 1e       	adc	r2, r18
    57f0:	1c 1b       	sub	r17, r28
    57f2:	1a 1b       	sub	r17, r26
    57f4:	1c 1e       	adc	r1, r28
    57f6:	20 22       	and	r2, r16
    57f8:	23 1f       	adc	r18, r19
    57fa:	15 0b       	sbc	r17, r21
    57fc:	07 08       	sbc	r0, r7
    57fe:	07 00       	.word	0x0007	; ????
    5800:	1f 31       	cpi	r17, 0x1F	; 31
    5802:	3d 44       	sbci	r19, 0x4D	; 77
    5804:	4e 53       	subi	r20, 0x3E	; 62
    5806:	54 56       	subi	r21, 0x64	; 100
    5808:	5a 5f       	subi	r21, 0xFA	; 250
    580a:	64 69       	ori	r22, 0x94	; 148
    580c:	6e 74       	andi	r22, 0x4E	; 78
    580e:	76 79       	andi	r23, 0x96	; 150
    5810:	7c 7f       	andi	r23, 0xFC	; 252
    5812:	7f 7f       	andi	r23, 0xFF	; 255
    5814:	7f 7f       	andi	r23, 0xFF	; 255
    5816:	7f 7f       	andi	r23, 0xFF	; 255
    5818:	7f 7f       	andi	r23, 0xFF	; 255
    581a:	7f 7f       	andi	r23, 0xFF	; 255
    581c:	7f 7f       	andi	r23, 0xFF	; 255
    581e:	7f 7f       	andi	r23, 0xFF	; 255
    5820:	7f 7f       	andi	r23, 0xFF	; 255
    5822:	7f 7f       	andi	r23, 0xFF	; 255
    5824:	7f 7f       	andi	r23, 0xFF	; 255
    5826:	7f 7f       	andi	r23, 0xFF	; 255
    5828:	7f 7f       	andi	r23, 0xFF	; 255
    582a:	7f 7f       	andi	r23, 0xFF	; 255
    582c:	7f 7f       	andi	r23, 0xFF	; 255
    582e:	7f 7f       	andi	r23, 0xFF	; 255
    5830:	7f 7f       	andi	r23, 0xFF	; 255
    5832:	7f 7f       	andi	r23, 0xFF	; 255
    5834:	7f 7f       	andi	r23, 0xFF	; 255
    5836:	7f 7f       	andi	r23, 0xFF	; 255
    5838:	7f 7f       	andi	r23, 0xFF	; 255
    583a:	7f 7f       	andi	r23, 0xFF	; 255
    583c:	7f 7f       	andi	r23, 0xFF	; 255
    583e:	7f 7f       	andi	r23, 0xFF	; 255
    5840:	7f 7f       	andi	r23, 0xFF	; 255
    5842:	7f 7f       	andi	r23, 0xFF	; 255
    5844:	7f 7f       	andi	r23, 0xFF	; 255
    5846:	7f 7f       	andi	r23, 0xFF	; 255
    5848:	7f 7f       	andi	r23, 0xFF	; 255
    584a:	7f 7f       	andi	r23, 0xFF	; 255
    584c:	7f 7f       	andi	r23, 0xFF	; 255
    584e:	7f 7f       	andi	r23, 0xFF	; 255
    5850:	7f 7f       	andi	r23, 0xFF	; 255
    5852:	7f 7f       	andi	r23, 0xFF	; 255
    5854:	7f 7f       	andi	r23, 0xFF	; 255
    5856:	7f 7f       	andi	r23, 0xFF	; 255
    5858:	7f 7f       	andi	r23, 0xFF	; 255
    585a:	7f 7f       	andi	r23, 0xFF	; 255
    585c:	7f 7f       	andi	r23, 0xFF	; 255
    585e:	7f 7f       	andi	r23, 0xFF	; 255
    5860:	7f 7f       	andi	r23, 0xFF	; 255
    5862:	7f 7f       	andi	r23, 0xFF	; 255
    5864:	7f 7f       	andi	r23, 0xFF	; 255
    5866:	7f 7f       	andi	r23, 0xFF	; 255
    5868:	7f 7f       	andi	r23, 0xFF	; 255
    586a:	7f 7f       	andi	r23, 0xFF	; 255
    586c:	7f 7f       	andi	r23, 0xFF	; 255
    586e:	7f 7f       	andi	r23, 0xFF	; 255
    5870:	7f 7f       	andi	r23, 0xFF	; 255
    5872:	7f 7f       	andi	r23, 0xFF	; 255
    5874:	7f 7f       	andi	r23, 0xFF	; 255
    5876:	7f 7f       	andi	r23, 0xFF	; 255
    5878:	7f 7f       	andi	r23, 0xFF	; 255
    587a:	7f 7c       	andi	r23, 0xCF	; 207
    587c:	78 71       	andi	r23, 0x18	; 24
    587e:	68 4c       	sbci	r22, 0xC8	; 200
    5880:	2c 1c       	adc	r2, r12
    5882:	12 0c       	add	r1, r2
    5884:	0a 0b       	sbc	r16, r26
    5886:	0a 05       	cpc	r16, r10
    5888:	fd f3       	brhs	.-2      	; 0x5888 <waves+0x988>
    588a:	e9 df       	rcall	.-46     	; 0x585e <waves+0x95e>
    588c:	d4 ca       	rjmp	.-2648   	; 0x4e36 <steptable+0x12e>
    588e:	c0 b7       	in	r28, 0x30	; 48
    5890:	ae a6       	std	Y+46, r10	; 0x2e
    5892:	9e 97       	sbiw	r26, 0x2e	; 46
    5894:	91 8b       	std	Z+17, r25	; 0x11
    5896:	86 85       	ldd	r24, Z+14	; 0x0e
    5898:	82 80       	ldd	r8, Z+2	; 0x02
    589a:	80 80       	ld	r8, Z
    589c:	80 80       	ld	r8, Z
    589e:	80 80       	ld	r8, Z
    58a0:	80 80       	ld	r8, Z
    58a2:	80 80       	ld	r8, Z
    58a4:	80 80       	ld	r8, Z
    58a6:	80 80       	ld	r8, Z
    58a8:	80 80       	ld	r8, Z
    58aa:	80 80       	ld	r8, Z
    58ac:	80 80       	ld	r8, Z
    58ae:	80 80       	ld	r8, Z
    58b0:	80 80       	ld	r8, Z
    58b2:	80 80       	ld	r8, Z
    58b4:	80 80       	ld	r8, Z
    58b6:	80 80       	ld	r8, Z
    58b8:	80 80       	ld	r8, Z
    58ba:	80 80       	ld	r8, Z
    58bc:	80 80       	ld	r8, Z
    58be:	80 80       	ld	r8, Z
    58c0:	80 80       	ld	r8, Z
    58c2:	80 80       	ld	r8, Z
    58c4:	80 80       	ld	r8, Z
    58c6:	80 80       	ld	r8, Z
    58c8:	80 80       	ld	r8, Z
    58ca:	80 80       	ld	r8, Z
    58cc:	80 80       	ld	r8, Z
    58ce:	80 80       	ld	r8, Z
    58d0:	80 80       	ld	r8, Z
    58d2:	80 80       	ld	r8, Z
    58d4:	80 80       	ld	r8, Z
    58d6:	80 80       	ld	r8, Z
    58d8:	80 80       	ld	r8, Z
    58da:	80 80       	ld	r8, Z
    58dc:	80 80       	ld	r8, Z
    58de:	80 80       	ld	r8, Z
    58e0:	80 80       	ld	r8, Z
    58e2:	80 80       	ld	r8, Z
    58e4:	80 80       	ld	r8, Z
    58e6:	80 80       	ld	r8, Z
    58e8:	80 80       	ld	r8, Z
    58ea:	80 80       	ld	r8, Z
    58ec:	80 80       	ld	r8, Z
    58ee:	80 80       	ld	r8, Z
    58f0:	80 80       	ld	r8, Z
    58f2:	80 80       	ld	r8, Z
    58f4:	80 87       	std	Z+8, r24	; 0x08
    58f6:	91 9d       	mul	r25, r1
    58f8:	ac c4       	rjmp	.+2392   	; 0x6252 <__data_load_end+0x136>
    58fa:	cb d4       	rcall	.+2454   	; 0x6292 <__data_load_end+0x176>
    58fc:	dd f2       	brhs	.-74     	; 0x58b4 <waves+0x9b4>
    58fe:	fa fa       	.word	0xfafa	; ????

00005900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    5900:	80 91 db 0c 	lds	r24, 0x0CDB
    5904:	90 91 6a 0d 	lds	r25, 0x0D6A
    5908:	89 17       	cp	r24, r25
    590a:	78 f4       	brcc	.+30     	; 0x592a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    590c:	e8 2f       	mov	r30, r24
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	9f 01       	movw	r18, r30
    5912:	22 0f       	add	r18, r18
    5914:	33 1f       	adc	r19, r19
    5916:	e2 0f       	add	r30, r18
    5918:	f3 1f       	adc	r31, r19
    591a:	e6 5c       	subi	r30, 0xC6	; 198
    591c:	f3 4f       	sbci	r31, 0xF3	; 243
    591e:	a0 81       	ld	r26, Z
    5920:	b1 81       	ldd	r27, Z+1	; 0x01
    5922:	92 81       	ldd	r25, Z+2	; 0x02
    5924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    5926:	8f 5f       	subi	r24, 0xFF	; 255
    5928:	ed cf       	rjmp	.-38     	; 0x5904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    592a:	08 95       	ret

0000592c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    592c:	2f 92       	push	r2
    592e:	3f 92       	push	r3
    5930:	4f 92       	push	r4
    5932:	5f 92       	push	r5
    5934:	6f 92       	push	r6
    5936:	7f 92       	push	r7
    5938:	8f 92       	push	r8
    593a:	9f 92       	push	r9
    593c:	af 92       	push	r10
    593e:	bf 92       	push	r11
    5940:	cf 92       	push	r12
    5942:	df 92       	push	r13
    5944:	ef 92       	push	r14
    5946:	ff 92       	push	r15
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	00 d0       	rcall	.+0      	; 0x5952 <ProcessSprites+0x26>
    5952:	00 d0       	rcall	.+0      	; 0x5954 <ProcessSprites+0x28>
    5954:	cd b7       	in	r28, 0x3d	; 61
    5956:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    5958:	80 91 00 05 	lds	r24, 0x0500
    595c:	88 23       	and	r24, r24
    595e:	09 f4       	brne	.+2      	; 0x5962 <ProcessSprites+0x36>
    5960:	e0 c0       	rjmp	.+448    	; 0x5b22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    5962:	80 91 da 0c 	lds	r24, 0x0CDA
    5966:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    596a:	80 93 6a 0d 	sts	0x0D6A, r24
    596e:	e2 e0       	ldi	r30, 0x02	; 2
    5970:	ce 2e       	mov	r12, r30
    5972:	e5 e0       	ldi	r30, 0x05	; 5
    5974:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    5976:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    5978:	f6 01       	movw	r30, r12
    597a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    597c:	20 3e       	cpi	r18, 0xE0	; 224
    597e:	09 f4       	brne	.+2      	; 0x5982 <ProcessSprites+0x56>
    5980:	b1 c0       	rjmp	.+354    	; 0x5ae4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    5982:	80 91 9c 0c 	lds	r24, 0x0C9C
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	82 0f       	add	r24, r18
    598a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    598c:	41 81       	ldd	r20, Z+1	; 0x01
    598e:	20 91 9d 0c 	lds	r18, 0x0C9D
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	24 0f       	add	r18, r20
    5996:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    5998:	ac 01       	movw	r20, r24
    599a:	73 e0       	ldi	r23, 0x03	; 3
    599c:	56 95       	lsr	r21
    599e:	47 95       	ror	r20
    59a0:	7a 95       	dec	r23
    59a2:	e1 f7       	brne	.-8      	; 0x599c <ProcessSprites+0x70>
    59a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    59a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    59a8:	11 f0       	breq	.+4      	; 0x59ae <ProcessSprites+0x82>
    59aa:	92 e0       	ldi	r25, 0x02	; 2
    59ac:	01 c0       	rjmp	.+2      	; 0x59b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    59ae:	91 e0       	ldi	r25, 0x01	; 1
    59b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    59b2:	a9 01       	movw	r20, r18
    59b4:	63 e0       	ldi	r22, 0x03	; 3
    59b6:	56 95       	lsr	r21
    59b8:	47 95       	ror	r20
    59ba:	6a 95       	dec	r22
    59bc:	e1 f7       	brne	.-8      	; 0x59b6 <ProcessSprites+0x8a>
    59be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    59c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    59c2:	19 f0       	breq	.+6      	; 0x59ca <ProcessSprites+0x9e>
    59c4:	52 e0       	ldi	r21, 0x02	; 2
    59c6:	35 2e       	mov	r3, r21
    59c8:	02 c0       	rjmp	.+4      	; 0x59ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    59ca:	33 24       	eor	r3, r3
    59cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	32 2f       	mov	r19, r18
    59d2:	22 27       	eor	r18, r18
    59d4:	f9 01       	movw	r30, r18
    59d6:	e8 0f       	add	r30, r24
    59d8:	f1 1d       	adc	r31, r1
    59da:	fc 83       	std	Y+4, r31	; 0x04
    59dc:	eb 83       	std	Y+3, r30	; 0x03
    59de:	e1 2c       	mov	r14, r1
    59e0:	f1 2c       	mov	r15, r1
    59e2:	be 2c       	mov	r11, r14
    59e4:	aa 24       	eor	r10, r10
    59e6:	26 2c       	mov	r2, r6
    59e8:	45 2c       	mov	r4, r5
    59ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    59ec:	84 2c       	mov	r8, r4
    59ee:	91 2c       	mov	r9, r1
    59f0:	84 2d       	mov	r24, r4
    59f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    59f6:	42 2f       	mov	r20, r18
    59f8:	50 e0       	ldi	r21, 0x00	; 0
    59fa:	44 0f       	add	r20, r20
    59fc:	55 1f       	adc	r21, r21
    59fe:	84 16       	cp	r8, r20
    5a00:	95 06       	cpc	r9, r21
    5a02:	14 f0       	brlt	.+4      	; 0x5a08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    5a04:	22 0f       	add	r18, r18
    5a06:	03 c0       	rjmp	.+6      	; 0x5a0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    5a08:	42 16       	cp	r4, r18
    5a0a:	10 f0       	brcs	.+4      	; 0x5a10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    5a0c:	84 2d       	mov	r24, r4
    5a0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    5a10:	ff e1       	ldi	r31, 0x1F	; 31
    5a12:	f2 15       	cp	r31, r2
    5a14:	18 f4       	brcc	.+6      	; 0x5a1c <ProcessSprites+0xf0>
    5a16:	00 ee       	ldi	r16, 0xE0	; 224
    5a18:	02 0d       	add	r16, r2
    5a1a:	01 c0       	rjmp	.+2      	; 0x5a1e <ProcessSprites+0xf2>
    5a1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    5a1e:	28 2f       	mov	r18, r24
    5a20:	26 95       	lsr	r18
    5a22:	26 95       	lsr	r18
    5a24:	26 95       	lsr	r18
    5a26:	10 e0       	ldi	r17, 0x00	; 0
    5a28:	40 e2       	ldi	r20, 0x20	; 32
    5a2a:	24 9f       	mul	r18, r20
    5a2c:	00 0d       	add	r16, r0
    5a2e:	11 1d       	adc	r17, r1
    5a30:	11 24       	eor	r1, r1
    5a32:	23 e0       	ldi	r18, 0x03	; 3
    5a34:	00 0f       	add	r16, r16
    5a36:	11 1f       	adc	r17, r17
    5a38:	2a 95       	dec	r18
    5a3a:	e1 f7       	brne	.-8      	; 0x5a34 <ProcessSprites+0x108>
    5a3c:	87 70       	andi	r24, 0x07	; 7
    5a3e:	08 0f       	add	r16, r24
    5a40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    5a42:	00 50       	subi	r16, 0x00	; 0
    5a44:	1f 4f       	sbci	r17, 0xFF	; 255
    5a46:	f8 01       	movw	r30, r16
    5a48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    5a4a:	81 e0       	ldi	r24, 0x01	; 1
    5a4c:	7c 31       	cpi	r23, 0x1C	; 28
    5a4e:	08 f4       	brcc	.+2      	; 0x5a52 <ProcessSprites+0x126>
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	21 e0       	ldi	r18, 0x01	; 1
    5a54:	30 91 db 0c 	lds	r19, 0x0CDB
    5a58:	73 17       	cp	r23, r19
    5a5a:	18 f0       	brcs	.+6      	; 0x5a62 <ProcessSprites+0x136>
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	88 23       	and	r24, r24
    5a60:	51 f1       	breq	.+84     	; 0x5ab6 <ProcessSprites+0x18a>
    5a62:	60 91 6a 0d 	lds	r22, 0x0D6A
    5a66:	6c 31       	cpi	r22, 0x1C	; 28
    5a68:	20 f5       	brcc	.+72     	; 0x5ab2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    5a6a:	88 23       	and	r24, r24
    5a6c:	31 f0       	breq	.+12     	; 0x5a7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    5a6e:	84 ee       	ldi	r24, 0xE4	; 228
    5a70:	87 0f       	add	r24, r23
    5a72:	7a 83       	std	Y+2, r23	; 0x02
    5a74:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <CopyFlashTile>
    5a78:	06 c0       	rjmp	.+12     	; 0x5a86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    5a7a:	22 23       	and	r18, r18
    5a7c:	29 f0       	breq	.+10     	; 0x5a88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    5a7e:	87 2f       	mov	r24, r23
    5a80:	7a 83       	std	Y+2, r23	; 0x02
    5a82:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <CopyRamTile>
    5a86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    5a88:	80 91 6a 0d 	lds	r24, 0x0D6A
    5a8c:	e8 2f       	mov	r30, r24
    5a8e:	f0 e0       	ldi	r31, 0x00	; 0
    5a90:	9f 01       	movw	r18, r30
    5a92:	22 0f       	add	r18, r18
    5a94:	33 1f       	adc	r19, r19
    5a96:	e2 0f       	add	r30, r18
    5a98:	f3 1f       	adc	r31, r19
    5a9a:	e6 5c       	subi	r30, 0xC6	; 198
    5a9c:	f3 4f       	sbci	r31, 0xF3	; 243
    5a9e:	11 83       	std	Z+1, r17	; 0x01
    5aa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    5aa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    5aa4:	f8 01       	movw	r30, r16
    5aa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    5aa8:	21 e0       	ldi	r18, 0x01	; 1
    5aaa:	28 0f       	add	r18, r24
    5aac:	20 93 6a 0d 	sts	0x0D6A, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    5ab0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    5ab2:	7c 31       	cpi	r23, 0x1C	; 28
    5ab4:	38 f4       	brcc	.+14     	; 0x5ac4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    5ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    5ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    5aba:	a5 01       	movw	r20, r10
    5abc:	67 2f       	mov	r22, r23
    5abe:	87 2d       	mov	r24, r7
    5ac0:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <BlitSprite>
    5ac4:	ff ef       	ldi	r31, 0xFF	; 255
    5ac6:	af 1a       	sub	r10, r31
    5ac8:	bf 0a       	sbc	r11, r31
    5aca:	23 94       	inc	r2
    5acc:	82 2d       	mov	r24, r2
    5ace:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    5ad0:	99 81       	ldd	r25, Y+1	; 0x01
    5ad2:	89 17       	cp	r24, r25
    5ad4:	08 f4       	brcc	.+2      	; 0x5ad8 <ProcessSprites+0x1ac>
    5ad6:	8c cf       	rjmp	.-232    	; 0x59f0 <ProcessSprites+0xc4>
    5ad8:	ef ef       	ldi	r30, 0xFF	; 255
    5ada:	ee 1a       	sub	r14, r30
    5adc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    5ade:	e3 14       	cp	r14, r3
    5ae0:	08 f4       	brcc	.+2      	; 0x5ae4 <ProcessSprites+0x1b8>
    5ae2:	7f cf       	rjmp	.-258    	; 0x59e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    5ae4:	73 94       	inc	r7
    5ae6:	f4 e0       	ldi	r31, 0x04	; 4
    5ae8:	cf 0e       	add	r12, r31
    5aea:	d1 1c       	adc	r13, r1
    5aec:	4e e0       	ldi	r20, 0x0E	; 14
    5aee:	74 12       	cpse	r7, r20
    5af0:	43 cf       	rjmp	.-378    	; 0x5978 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    5af2:	0f 90       	pop	r0
    5af4:	0f 90       	pop	r0
    5af6:	0f 90       	pop	r0
    5af8:	0f 90       	pop	r0
    5afa:	df 91       	pop	r29
    5afc:	cf 91       	pop	r28
    5afe:	1f 91       	pop	r17
    5b00:	0f 91       	pop	r16
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	df 90       	pop	r13
    5b08:	cf 90       	pop	r12
    5b0a:	bf 90       	pop	r11
    5b0c:	af 90       	pop	r10
    5b0e:	9f 90       	pop	r9
    5b10:	8f 90       	pop	r8
    5b12:	7f 90       	pop	r7
    5b14:	6f 90       	pop	r6
    5b16:	5f 90       	pop	r5
    5b18:	4f 90       	pop	r4
    5b1a:	3f 90       	pop	r3
    5b1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    5b1e:	0c 94 80 2c 	jmp	0x5900	; 0x5900 <RestoreBackground>

	}
    5b22:	0f 90       	pop	r0
    5b24:	0f 90       	pop	r0
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	ff 90       	pop	r15
    5b34:	ef 90       	pop	r14
    5b36:	df 90       	pop	r13
    5b38:	cf 90       	pop	r12
    5b3a:	bf 90       	pop	r11
    5b3c:	af 90       	pop	r10
    5b3e:	9f 90       	pop	r9
    5b40:	8f 90       	pop	r8
    5b42:	7f 90       	pop	r7
    5b44:	6f 90       	pop	r6
    5b46:	5f 90       	pop	r5
    5b48:	4f 90       	pop	r4
    5b4a:	3f 90       	pop	r3
    5b4c:	2f 90       	pop	r2
    5b4e:	08 95       	ret

00005b50 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    5b50:	e2 e0       	ldi	r30, 0x02	; 2
    5b52:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    5b54:	80 ee       	ldi	r24, 0xE0	; 224
    5b56:	80 83       	st	Z, r24
    5b58:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    5b5a:	95 e0       	ldi	r25, 0x05	; 5
    5b5c:	ea 33       	cpi	r30, 0x3A	; 58
    5b5e:	f9 07       	cpc	r31, r25
    5b60:	d1 f7       	brne	.-12     	; 0x5b56 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    5b62:	80 e2       	ldi	r24, 0x20	; 32
    5b64:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    5b68:	10 92 99 0c 	sts	0x0C99, r1
    5b6c:	08 95       	ret

00005b6e <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    5b6e:	4f 92       	push	r4
    5b70:	5f 92       	push	r5
    5b72:	6f 92       	push	r6
    5b74:	7f 92       	push	r7
    5b76:	8f 92       	push	r8
    5b78:	9f 92       	push	r9
    5b7a:	af 92       	push	r10
    5b7c:	bf 92       	push	r11
    5b7e:	cf 92       	push	r12
    5b80:	df 92       	push	r13
    5b82:	ef 92       	push	r14
    5b84:	ff 92       	push	r15
    5b86:	0f 93       	push	r16
    5b88:	1f 93       	push	r17
    5b8a:	cf 93       	push	r28
    5b8c:	df 93       	push	r29
    5b8e:	68 2e       	mov	r6, r24
    5b90:	56 2e       	mov	r5, r22
    5b92:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    5b94:	fa 01       	movw	r30, r20
    5b96:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    5b98:	31 96       	adiw	r30, 0x01	; 1
    5b9a:	84 90       	lpm	r8, Z
    5b9c:	c7 2c       	mov	r12, r7
    5b9e:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    5ba0:	00 e0       	ldi	r16, 0x00	; 0
    5ba2:	10 e0       	ldi	r17, 0x00	; 0
    5ba4:	91 2c       	mov	r9, r1
    5ba6:	98 14       	cp	r9, r8
    5ba8:	f1 f0       	breq	.+60     	; 0x5be6 <DrawMap+0x78>
    5baa:	c0 e0       	ldi	r28, 0x00	; 0
    5bac:	d0 e0       	ldi	r29, 0x00	; 0
    5bae:	58 01       	movw	r10, r16
    5bb0:	f2 e0       	ldi	r31, 0x02	; 2
    5bb2:	af 0e       	add	r10, r31
    5bb4:	b1 1c       	adc	r11, r1
    5bb6:	49 2c       	mov	r4, r9
    5bb8:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    5bba:	c7 15       	cp	r28, r7
    5bbc:	80 f4       	brcc	.+32     	; 0x5bde <DrawMap+0x70>
    5bbe:	95 01       	movw	r18, r10
    5bc0:	2c 0f       	add	r18, r28
    5bc2:	3d 1f       	adc	r19, r29
    5bc4:	f7 01       	movw	r30, r14
    5bc6:	e2 0f       	add	r30, r18
    5bc8:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    5bca:	24 91       	lpm	r18, Z
    5bcc:	42 2f       	mov	r20, r18
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	64 2d       	mov	r22, r4
    5bd2:	8c 2f       	mov	r24, r28
    5bd4:	86 0d       	add	r24, r6
    5bd6:	0e 94 05 21 	call	0x420a	; 0x420a <SetTile>
    5bda:	21 96       	adiw	r28, 0x01	; 1
    5bdc:	ee cf       	rjmp	.-36     	; 0x5bba <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    5bde:	93 94       	inc	r9
    5be0:	0c 0d       	add	r16, r12
    5be2:	1d 1d       	adc	r17, r13
    5be4:	e0 cf       	rjmp	.-64     	; 0x5ba6 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    5be6:	df 91       	pop	r29
    5be8:	cf 91       	pop	r28
    5bea:	1f 91       	pop	r17
    5bec:	0f 91       	pop	r16
    5bee:	ff 90       	pop	r15
    5bf0:	ef 90       	pop	r14
    5bf2:	df 90       	pop	r13
    5bf4:	cf 90       	pop	r12
    5bf6:	bf 90       	pop	r11
    5bf8:	af 90       	pop	r10
    5bfa:	9f 90       	pop	r9
    5bfc:	8f 90       	pop	r8
    5bfe:	7f 90       	pop	r7
    5c00:	6f 90       	pop	r6
    5c02:	5f 90       	pop	r5
    5c04:	4f 90       	pop	r4
    5c06:	08 95       	ret

00005c08 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    5c08:	0f 93       	push	r16
    5c0a:	1f 93       	push	r17
    5c0c:	cf 93       	push	r28
    5c0e:	df 93       	push	r29
    5c10:	06 2f       	mov	r16, r22
    5c12:	c4 2f       	mov	r28, r20
    5c14:	d5 2f       	mov	r29, r21
    5c16:	18 2f       	mov	r17, r24
    5c18:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    5c1a:	fe 01       	movw	r30, r28
    5c1c:	44 91       	lpm	r20, Z
		if(c!=0){
    5c1e:	44 23       	and	r20, r20
    5c20:	49 f0       	breq	.+18     	; 0x5c34 <Print+0x2c>
			c=((c&127)-32);			
    5c22:	4f 77       	andi	r20, 0x7F	; 127
    5c24:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    5c26:	60 2f       	mov	r22, r16
    5c28:	8c 2f       	mov	r24, r28
    5c2a:	81 0f       	add	r24, r17
    5c2c:	0e 94 01 21 	call	0x4202	; 0x4202 <SetFont>
    5c30:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    5c32:	f3 cf       	rjmp	.-26     	; 0x5c1a <Print+0x12>
	
}
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	1f 91       	pop	r17
    5c3a:	0f 91       	pop	r16
    5c3c:	08 95       	ret

00005c3e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    5c3e:	0f 93       	push	r16
    5c40:	1f 93       	push	r17
    5c42:	cf 93       	push	r28
    5c44:	df 93       	push	r29
    5c46:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    5c48:	c0 e0       	ldi	r28, 0x00	; 0
    5c4a:	d0 e0       	ldi	r29, 0x00	; 0
    5c4c:	c0 17       	cp	r28, r16
    5c4e:	d1 07       	cpc	r29, r17
    5c50:	44 f4       	brge	.+16     	; 0x5c62 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    5c52:	0e 94 1e 21 	call	0x423c	; 0x423c <GetVsyncFlag>
    5c56:	88 23       	and	r24, r24
    5c58:	e1 f3       	breq	.-8      	; 0x5c52 <WaitVsync+0x14>
		ClearVsyncFlag();		
    5c5a:	0e 94 22 21 	call	0x4244	; 0x4244 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    5c5e:	21 96       	adiw	r28, 0x01	; 1
    5c60:	f5 cf       	rjmp	.-22     	; 0x5c4c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	08 95       	ret

00005c6c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    5c6c:	8f e0       	ldi	r24, 0x0F	; 15
    5c6e:	99 e0       	ldi	r25, 0x09	; 9
    5c70:	0e 94 c7 22 	call	0x458e	; 0x458e <InitMusicPlayer>
			SetTileTable(logo_tileset);
    5c74:	8f e0       	ldi	r24, 0x0F	; 15
    5c76:	91 e0       	ldi	r25, 0x01	; 1
    5c78:	0e 94 19 21 	call	0x4232	; 0x4232 <SetTileTable>
			
			//draw logo
			ClearVram();
    5c7c:	0e 94 f7 20 	call	0x41ee	; 0x41ee <ClearVram>
			WaitVsync(15);		
    5c80:	8f e0       	ldi	r24, 0x0F	; 15
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    5c88:	41 e0       	ldi	r20, 0x01	; 1
    5c8a:	6f ef       	ldi	r22, 0xFF	; 255
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
    5c8e:	0e 94 9d 23 	call	0x473a	; 0x473a <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    5c92:	49 ef       	ldi	r20, 0xF9	; 249
    5c94:	50 e0       	ldi	r21, 0x00	; 0
    5c96:	6c e0       	ldi	r22, 0x0C	; 12
    5c98:	8c e0       	ldi	r24, 0x0C	; 12
    5c9a:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <DrawMap>
			WaitVsync(3);
    5c9e:	83 e0       	ldi	r24, 0x03	; 3
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    5ca6:	48 ee       	ldi	r20, 0xE8	; 232
    5ca8:	50 e0       	ldi	r21, 0x00	; 0
    5caa:	6c e0       	ldi	r22, 0x0C	; 12
    5cac:	8c e0       	ldi	r24, 0x0C	; 12
    5cae:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <DrawMap>
			WaitVsync(2);
    5cb2:	82 e0       	ldi	r24, 0x02	; 2
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    5cba:	49 ef       	ldi	r20, 0xF9	; 249
    5cbc:	50 e0       	ldi	r21, 0x00	; 0
    5cbe:	6c e0       	ldi	r22, 0x0C	; 12
    5cc0:	8c e0       	ldi	r24, 0x0C	; 12
    5cc2:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    5cc6:	81 e4       	ldi	r24, 0x41	; 65
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <WaitVsync>
			ClearVram();
    5cce:	0e 94 f7 20 	call	0x41ee	; 0x41ee <ClearVram>
			WaitVsync(20);
    5cd2:	84 e1       	ldi	r24, 0x14	; 20
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	0c 94 1f 2e 	jmp	0x5c3e	; 0x5c3e <WaitVsync>

00005cda <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    5cda:	80 93 68 0d 	sts	0x0D68, r24
	currFadeFrame=0;
    5cde:	10 92 6c 0d 	sts	0x0D6C, r1
	fadeActive=true;
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	80 93 6b 0d 	sts	0x0D6B, r24
		
	if(blocking){
    5ce8:	66 23       	and	r22, r22
    5cea:	21 f0       	breq	.+8      	; 0x5cf4 <doFade+0x1a>
		while(fadeActive==true);
    5cec:	80 91 6b 0d 	lds	r24, 0x0D6B
    5cf0:	81 11       	cpse	r24, r1
    5cf2:	fc cf       	rjmp	.-8      	; 0x5cec <doFade+0x12>
    5cf4:	08 95       	ret

00005cf6 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    5cf6:	81 11       	cpse	r24, r1
    5cf8:	03 c0       	rjmp	.+6      	; 0x5d00 <FadeIn+0xa>
		DDRC=0xff;
    5cfa:	8f ef       	ldi	r24, 0xFF	; 255
    5cfc:	87 b9       	out	0x07, r24	; 7
		return;
    5cfe:	08 95       	ret
	}
	fadeStep=1;
    5d00:	91 e0       	ldi	r25, 0x01	; 1
    5d02:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=1;
    5d06:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    5d0a:	0c 94 6d 2e 	jmp	0x5cda	; 0x5cda <doFade>

00005d0e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    5d0e:	80 91 6b 0d 	lds	r24, 0x0D6B
    5d12:	88 23       	and	r24, r24
    5d14:	01 f1       	breq	.+64     	; 0x5d56 <ProcessFading+0x48>
		if(currFadeFrame==0){
    5d16:	80 91 6c 0d 	lds	r24, 0x0D6C
    5d1a:	81 11       	cpse	r24, r1
    5d1c:	19 c0       	rjmp	.+50     	; 0x5d50 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    5d1e:	80 91 68 0d 	lds	r24, 0x0D68
    5d22:	80 93 6c 0d 	sts	0x0D6C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    5d26:	e0 91 6d 0d 	lds	r30, 0x0D6D
    5d2a:	f0 e0       	ldi	r31, 0x00	; 0
    5d2c:	e5 52       	subi	r30, 0x25	; 37
    5d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d30:	e4 91       	lpm	r30, Z
    5d32:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    5d34:	90 91 69 0d 	lds	r25, 0x0D69
    5d38:	80 91 6d 0d 	lds	r24, 0x0D6D
    5d3c:	89 0f       	add	r24, r25
    5d3e:	80 93 6d 0d 	sts	0x0D6D, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    5d42:	88 23       	and	r24, r24
    5d44:	11 f0       	breq	.+4      	; 0x5d4a <ProcessFading+0x3c>
    5d46:	8d 30       	cpi	r24, 0x0D	; 13
    5d48:	31 f4       	brne	.+12     	; 0x5d56 <ProcessFading+0x48>
				fadeActive=false;
    5d4a:	10 92 6b 0d 	sts	0x0D6B, r1
    5d4e:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    5d50:	81 50       	subi	r24, 0x01	; 1
    5d52:	80 93 6c 0d 	sts	0x0D6C, r24
    5d56:	08 95       	ret

00005d58 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    5d58:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <ProcessFading>
		ProcessSprites();
    5d5c:	0c 94 96 2c 	jmp	0x592c	; 0x592c <ProcessSprites>

00005d60 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    5d60:	0f 93       	push	r16
    5d62:	1f 93       	push	r17
    5d64:	cf 93       	push	r28
    5d66:	df 93       	push	r29
    5d68:	1f 92       	push	r1
    5d6a:	cd b7       	in	r28, 0x3d	; 61
    5d6c:	de b7       	in	r29, 0x3e	; 62
    5d6e:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    5d70:	86 2f       	mov	r24, r22
    5d72:	69 83       	std	Y+1, r22	; 0x01
    5d74:	0e 94 28 21 	call	0x4250	; 0x4250 <ReadJoypad>
    5d78:	d8 01       	movw	r26, r16
    5d7a:	15 96       	adiw	r26, 0x05	; 5
    5d7c:	9c 93       	st	X, r25
    5d7e:	8e 93       	st	-X, r24
    5d80:	14 97       	sbiw	r26, 0x04	; 4
    5d82:	69 81       	ldd	r22, Y+1	; 0x01
    5d84:	e6 2f       	mov	r30, r22
    5d86:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    5d88:	00 97       	sbiw	r24, 0x00	; 0
    5d8a:	51 f0       	breq	.+20     	; 0x5da0 <LBGetJoyPadState+0x40>
    5d8c:	df 01       	movw	r26, r30
    5d8e:	aa 0f       	add	r26, r26
    5d90:	bb 1f       	adc	r27, r27
    5d92:	a0 52       	subi	r26, 0x20	; 32
    5d94:	b3 4f       	sbci	r27, 0xF3	; 243
    5d96:	2d 91       	ld	r18, X+
    5d98:	3c 91       	ld	r19, X
    5d9a:	82 17       	cp	r24, r18
    5d9c:	93 07       	cpc	r25, r19
    5d9e:	21 f0       	breq	.+8      	; 0x5da8 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    5da0:	d8 01       	movw	r26, r16
    5da2:	16 96       	adiw	r26, 0x06	; 6
    5da4:	1c 92       	st	X, r1
    5da6:	07 c0       	rjmp	.+14     	; 0x5db6 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    5da8:	d8 01       	movw	r26, r16
    5daa:	16 96       	adiw	r26, 0x06	; 6
    5dac:	2c 91       	ld	r18, X
    5dae:	16 97       	sbiw	r26, 0x06	; 6
    5db0:	2f 5f       	subi	r18, 0xFF	; 255
    5db2:	16 96       	adiw	r26, 0x06	; 6
    5db4:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    5db6:	ee 0f       	add	r30, r30
    5db8:	ff 1f       	adc	r31, r31
    5dba:	e0 52       	subi	r30, 0x20	; 32
    5dbc:	f3 4f       	sbci	r31, 0xF3	; 243
    5dbe:	20 81       	ld	r18, Z
    5dc0:	31 81       	ldd	r19, Z+1	; 0x01
    5dc2:	a9 01       	movw	r20, r18
    5dc4:	40 95       	com	r20
    5dc6:	50 95       	com	r21
    5dc8:	48 23       	and	r20, r24
    5dca:	59 23       	and	r21, r25
    5dcc:	d8 01       	movw	r26, r16
    5dce:	11 96       	adiw	r26, 0x01	; 1
    5dd0:	5c 93       	st	X, r21
    5dd2:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    5dd4:	ac 01       	movw	r20, r24
    5dd6:	40 95       	com	r20
    5dd8:	50 95       	com	r21
    5dda:	24 23       	and	r18, r20
    5ddc:	35 23       	and	r19, r21
    5dde:	13 96       	adiw	r26, 0x03	; 3
    5de0:	3c 93       	st	X, r19
    5de2:	2e 93       	st	-X, r18
    5de4:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    5de6:	91 83       	std	Z+1, r25	; 0x01
    5de8:	80 83       	st	Z, r24
}
    5dea:	0f 90       	pop	r0
    5dec:	df 91       	pop	r29
    5dee:	cf 91       	pop	r28
    5df0:	1f 91       	pop	r17
    5df2:	0f 91       	pop	r16
    5df4:	08 95       	ret

00005df6 <LBMapSprite>:
		WaitUs(65535);
	}
}

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    5df6:	df 92       	push	r13
    5df8:	ef 92       	push	r14
    5dfa:	ff 92       	push	r15
    5dfc:	0f 93       	push	r16
    5dfe:	1f 93       	push	r17
    5e00:	cf 93       	push	r28
    5e02:	df 93       	push	r29
    5e04:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    5e06:	fb 01       	movw	r30, r22
    5e08:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    5e0a:	31 96       	adiw	r30, 0x01	; 1
    5e0c:	64 91       	lpm	r22, Z
    5e0e:	5f ef       	ldi	r21, 0xFF	; 255
    5e10:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    5e12:	24 2f       	mov	r18, r20
    5e14:	21 70       	andi	r18, 0x01	; 1
    5e16:	40 ff       	sbrs	r20, 0
    5e18:	04 c0       	rjmp	.+8      	; 0x5e22 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    5e1a:	95 2f       	mov	r25, r21
		dx=-1;
    5e1c:	ff 24       	eor	r15, r15
    5e1e:	fa 94       	dec	r15
    5e20:	03 c0       	rjmp	.+6      	; 0x5e28 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    5e22:	ff 24       	eor	r15, r15
    5e24:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    5e26:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    5e28:	41 ff       	sbrs	r20, 1
    5e2a:	05 c0       	rjmp	.+10     	; 0x5e36 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    5e2c:	7f ef       	ldi	r23, 0xFF	; 255
    5e2e:	76 0f       	add	r23, r22
		dy=-1;
    5e30:	ee 24       	eor	r14, r14
    5e32:	ea 94       	dec	r14
    5e34:	03 c0       	rjmp	.+6      	; 0x5e3c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    5e36:	ee 24       	eor	r14, r14
    5e38:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    5e3a:	70 e0       	ldi	r23, 0x00	; 0
    5e3c:	21 11       	cpse	r18, r1
    5e3e:	01 c0       	rjmp	.+2      	; 0x5e42 <LBMapSprite+0x4c>
    5e40:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    5e42:	00 e0       	ldi	r16, 0x00	; 0
    5e44:	06 17       	cp	r16, r22
    5e46:	09 f1       	breq	.+66     	; 0x5e8a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    5e48:	71 03       	mulsu	r23, r17
    5e4a:	e0 01       	movw	r28, r0
    5e4c:	11 24       	eor	r1, r1
    5e4e:	d8 2e       	mov	r13, r24
    5e50:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    5e52:	8d 15       	cp	r24, r13
    5e54:	b1 f0       	breq	.+44     	; 0x5e82 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    5e56:	9e 01       	movw	r18, r28
    5e58:	29 0f       	add	r18, r25
    5e5a:	31 1d       	adc	r19, r1
    5e5c:	97 fd       	sbrc	r25, 7
    5e5e:	3a 95       	dec	r19
    5e60:	2e 5f       	subi	r18, 0xFE	; 254
    5e62:	3f 4f       	sbci	r19, 0xFF	; 255
    5e64:	fd 01       	movw	r30, r26
    5e66:	e2 0f       	add	r30, r18
    5e68:	f3 1f       	adc	r31, r19
    5e6a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    5e6c:	34 e0       	ldi	r19, 0x04	; 4
    5e6e:	83 9f       	mul	r24, r19
    5e70:	f0 01       	movw	r30, r0
    5e72:	11 24       	eor	r1, r1
    5e74:	eb 5d       	subi	r30, 0xDB	; 219
    5e76:	f1 4f       	sbci	r31, 0xF1	; 241
    5e78:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    5e7a:	8f 5f       	subi	r24, 0xFF	; 255
    5e7c:	43 83       	std	Z+3, r20	; 0x03
    5e7e:	9f 0d       	add	r25, r15
    5e80:	e8 cf       	rjmp	.-48     	; 0x5e52 <LBMapSprite+0x5c>
    5e82:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    5e84:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    5e86:	95 2f       	mov	r25, r21
    5e88:	dd cf       	rjmp	.-70     	; 0x5e44 <LBMapSprite+0x4e>
	}
}
    5e8a:	df 91       	pop	r29
    5e8c:	cf 91       	pop	r28
    5e8e:	1f 91       	pop	r17
    5e90:	0f 91       	pop	r16
    5e92:	ff 90       	pop	r15
    5e94:	ef 90       	pop	r14
    5e96:	df 90       	pop	r13
    5e98:	08 95       	ret

00005e9a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    5e9a:	df 92       	push	r13
    5e9c:	ef 92       	push	r14
    5e9e:	ff 92       	push	r15
    5ea0:	0f 93       	push	r16
    5ea2:	1f 93       	push	r17
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    5ea8:	a0 91 9e 0c 	lds	r26, 0x0C9E
    5eac:	98 e0       	ldi	r25, 0x08	; 8
    5eae:	a9 9f       	mul	r26, r25
    5eb0:	70 01       	movw	r14, r0
    5eb2:	11 24       	eor	r1, r1
    5eb4:	50 e0       	ldi	r21, 0x00	; 0
    5eb6:	38 ef       	ldi	r19, 0xF8	; 248
    5eb8:	a3 9f       	mul	r26, r19
    5eba:	30 2d       	mov	r19, r0
    5ebc:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    5ebe:	70 e0       	ldi	r23, 0x00	; 0
    5ec0:	70 17       	cp	r23, r16
    5ec2:	09 f1       	breq	.+66     	; 0x5f06 <LBMoveSprite+0x6c>
    5ec4:	d4 2e       	mov	r13, r20
    5ec6:	13 2f       	mov	r17, r19
    5ec8:	14 0f       	add	r17, r20
    5eca:	b8 2f       	mov	r27, r24
    5ecc:	b2 0f       	add	r27, r18
    5ece:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    5ed0:	8b 17       	cp	r24, r27
    5ed2:	a9 f0       	breq	.+42     	; 0x5efe <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    5ed4:	c4 e0       	ldi	r28, 0x04	; 4
    5ed6:	8c 9f       	mul	r24, r28
    5ed8:	f0 01       	movw	r30, r0
    5eda:	11 24       	eor	r1, r1
    5edc:	ef 01       	movw	r28, r30
    5ede:	cb 5d       	subi	r28, 0xDB	; 219
    5ee0:	d1 4f       	sbci	r29, 0xF1	; 241
    5ee2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    5ee4:	a0 32       	cpi	r26, 0x20	; 32
    5ee6:	28 f4       	brcc	.+10     	; 0x5ef2 <LBMoveSprite+0x58>
    5ee8:	e4 16       	cp	r14, r20
    5eea:	f5 06       	cpc	r15, r21
    5eec:	14 f4       	brge	.+4      	; 0x5ef2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    5eee:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    5ef0:	03 c0       	rjmp	.+6      	; 0x5ef8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    5ef2:	eb 5d       	subi	r30, 0xDB	; 219
    5ef4:	f1 4f       	sbci	r31, 0xF1	; 241
    5ef6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    5ef8:	8f 5f       	subi	r24, 0xFF	; 255
    5efa:	98 5f       	subi	r25, 0xF8	; 248
    5efc:	e9 cf       	rjmp	.-46     	; 0x5ed0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    5efe:	7f 5f       	subi	r23, 0xFF	; 255
    5f00:	48 5f       	subi	r20, 0xF8	; 248
    5f02:	5f 4f       	sbci	r21, 0xFF	; 255
    5f04:	dd cf       	rjmp	.-70     	; 0x5ec0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    5f06:	df 91       	pop	r29
    5f08:	cf 91       	pop	r28
    5f0a:	1f 91       	pop	r17
    5f0c:	0f 91       	pop	r16
    5f0e:	ff 90       	pop	r15
    5f10:	ef 90       	pop	r14
    5f12:	df 90       	pop	r13
    5f14:	08 95       	ret

00005f16 <LBRotateSprites>:
void LBRotateSprites(u8 mappedSpriteCount)
{
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    5f16:	90 91 dc 0c 	lds	r25, 0x0CDC
    5f1a:	91 11       	cpse	r25, r1
    5f1c:	06 c0       	rjmp	.+12     	; 0x5f2a <LBRotateSprites+0x14>
    5f1e:	a5 e2       	ldi	r26, 0x25	; 37
    5f20:	be e0       	ldi	r27, 0x0E	; 14
    5f22:	e2 e0       	ldi	r30, 0x02	; 2
    5f24:	f5 e0       	ldi	r31, 0x05	; 5
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	26 c0       	rjmp	.+76     	; 0x5f76 <LBRotateSprites+0x60>
    5f2a:	a2 e0       	ldi	r26, 0x02	; 2
    5f2c:	b5 e0       	ldi	r27, 0x05	; 5
    5f2e:	22 ef       	ldi	r18, 0xF2	; 242
    5f30:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    5f32:	88 23       	and	r24, r24
    5f34:	89 f0       	breq	.+34     	; 0x5f58 <LBRotateSprites+0x42>
		{
			sprites[counter] = extendedSprites[--mappedSpriteCount];
    5f36:	81 50       	subi	r24, 0x01	; 1
    5f38:	34 e0       	ldi	r19, 0x04	; 4
    5f3a:	83 9f       	mul	r24, r19
    5f3c:	f0 01       	movw	r30, r0
    5f3e:	11 24       	eor	r1, r1
    5f40:	eb 5d       	subi	r30, 0xDB	; 219
    5f42:	f1 4f       	sbci	r31, 0xF1	; 241
    5f44:	40 81       	ld	r20, Z
    5f46:	51 81       	ldd	r21, Z+1	; 0x01
    5f48:	62 81       	ldd	r22, Z+2	; 0x02
    5f4a:	73 81       	ldd	r23, Z+3	; 0x03
    5f4c:	4d 93       	st	X+, r20
    5f4e:	5d 93       	st	X+, r21
    5f50:	6d 93       	st	X+, r22
    5f52:	7d 93       	st	X+, r23
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    5f54:	82 13       	cpse	r24, r18
    5f56:	ed cf       	rjmp	.-38     	; 0x5f32 <LBRotateSprites+0x1c>
		{
			sprites[counter] = extendedSprites[counter];
			counter++;
		}
	}
	swapped = swapped & 1;
    5f58:	91 70       	andi	r25, 0x01	; 1
    5f5a:	90 93 dc 0c 	sts	0x0CDC, r25
    5f5e:	08 95       	ret
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
		{
			sprites[counter] = extendedSprites[counter];
    5f60:	4d 91       	ld	r20, X+
    5f62:	5d 91       	ld	r21, X+
    5f64:	6d 91       	ld	r22, X+
    5f66:	7d 91       	ld	r23, X+
    5f68:	41 93       	st	Z+, r20
    5f6a:	51 93       	st	Z+, r21
    5f6c:	61 93       	st	Z+, r22
    5f6e:	71 93       	st	Z+, r23
			counter++;
    5f70:	2f 5f       	subi	r18, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    5f72:	2e 30       	cpi	r18, 0x0E	; 14
    5f74:	89 f3       	breq	.-30     	; 0x5f58 <LBRotateSprites+0x42>
    5f76:	28 13       	cpse	r18, r24
    5f78:	f3 cf       	rjmp	.-26     	; 0x5f60 <LBRotateSprites+0x4a>
    5f7a:	ee cf       	rjmp	.-36     	; 0x5f58 <LBRotateSprites+0x42>

00005f7c <clear_sprites>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
    5f7c:	0f 93       	push	r16
    5f7e:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    5f80:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    5f82:	01 e0       	ldi	r16, 0x01	; 1
    5f84:	21 e0       	ldi	r18, 0x01	; 1
    5f86:	40 e0       	ldi	r20, 0x00	; 0
    5f88:	60 ee       	ldi	r22, 0xE0	; 224
    5f8a:	8c 2f       	mov	r24, r28
    5f8c:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <LBMoveSprite>
    5f90:	cf 5f       	subi	r28, 0xFF	; 255
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    5f92:	cc 31       	cpi	r28, 0x1C	; 28
    5f94:	b1 f7       	brne	.-20     	; 0x5f82 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    5f96:	8e e0       	ldi	r24, 0x0E	; 14
}
    5f98:	cf 91       	pop	r28
    5f9a:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    5f9c:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <LBRotateSprites>

00005fa0 <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    5fa0:	0f 93       	push	r16
	game.current_screen = SPLASH;
    5fa2:	ee e8       	ldi	r30, 0x8E	; 142
    5fa4:	fd e0       	ldi	r31, 0x0D	; 13
    5fa6:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    5fa8:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    5faa:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <clear_sprites>
	Print(0, VRAM_TILES_V, (char*) strCopyright);
    5fae:	44 ea       	ldi	r20, 0xA4	; 164
    5fb0:	59 e0       	ldi	r21, 0x09	; 9
    5fb2:	60 e2       	ldi	r22, 0x20	; 32
    5fb4:	70 e0       	ldi	r23, 0x00	; 0
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
    5fb8:	90 e0       	ldi	r25, 0x00	; 0
    5fba:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <Print>
	Print(8, 15, (char*) str1Player);
    5fbe:	4e e9       	ldi	r20, 0x9E	; 158
    5fc0:	59 e0       	ldi	r21, 0x09	; 9
    5fc2:	6f e0       	ldi	r22, 0x0F	; 15
    5fc4:	70 e0       	ldi	r23, 0x00	; 0
    5fc6:	88 e0       	ldi	r24, 0x08	; 8
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <Print>
	Print(8, 16, (char*) strHighscores);
    5fce:	42 e9       	ldi	r20, 0x92	; 146
    5fd0:	59 e0       	ldi	r21, 0x09	; 9
    5fd2:	60 e1       	ldi	r22, 0x10	; 16
    5fd4:	70 e0       	ldi	r23, 0x00	; 0
    5fd6:	88 e0       	ldi	r24, 0x08	; 8
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <Print>
	Print(6, 21, (char*) strSelectHandle);
    5fde:	41 e8       	ldi	r20, 0x81	; 129
    5fe0:	59 e0       	ldi	r21, 0x09	; 9
    5fe2:	65 e1       	ldi	r22, 0x15	; 21
    5fe4:	70 e0       	ldi	r23, 0x00	; 0
    5fe6:	86 e0       	ldi	r24, 0x06	; 6
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <Print>
	Print(4, 26, (char*) strCopyright);
    5fee:	44 ea       	ldi	r20, 0xA4	; 164
    5ff0:	59 e0       	ldi	r21, 0x09	; 9
    5ff2:	6a e1       	ldi	r22, 0x1A	; 26
    5ff4:	70 e0       	ldi	r23, 0x00	; 0
    5ff6:	84 e0       	ldi	r24, 0x04	; 4
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    5ffe:	46 ed       	ldi	r20, 0xD6	; 214
    6000:	56 e3       	ldi	r21, 0x36	; 54
    6002:	65 e0       	ldi	r22, 0x05	; 5
    6004:	86 e0       	ldi	r24, 0x06	; 6
    6006:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    600a:	40 e0       	ldi	r20, 0x00	; 0
    600c:	6a ee       	ldi	r22, 0xEA	; 234
    600e:	7d e1       	ldi	r23, 0x1D	; 29
    6010:	80 e0       	ldi	r24, 0x00	; 0
    6012:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    6016:	01 e0       	ldi	r16, 0x01	; 1
    6018:	21 e0       	ldi	r18, 0x01	; 1
    601a:	48 e7       	ldi	r20, 0x78	; 120
    601c:	68 e3       	ldi	r22, 0x38	; 56
    601e:	80 e0       	ldi	r24, 0x00	; 0
    6020:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <LBMoveSprite>
	LBRotateSprites(1);
    6024:	81 e0       	ldi	r24, 0x01	; 1
}
    6026:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    6028:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <LBRotateSprites>

0000602c <update_splash>:
{
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
}

void update_splash()
{
    602c:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    602e:	80 91 1e 0e 	lds	r24, 0x0E1E
    6032:	85 ff       	sbrs	r24, 5
    6034:	0b c0       	rjmp	.+22     	; 0x604c <update_splash+0x20>
    6036:	90 91 91 0d 	lds	r25, 0x0D91
    603a:	91 11       	cpse	r25, r1
    603c:	07 c0       	rjmp	.+14     	; 0x604c <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    603e:	81 e0       	ldi	r24, 0x01	; 1
    6040:	80 93 91 0d 	sts	0x0D91, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    6044:	01 e0       	ldi	r16, 0x01	; 1
    6046:	21 e0       	ldi	r18, 0x01	; 1
    6048:	40 e8       	ldi	r20, 0x80	; 128
    604a:	0b c0       	rjmp	.+22     	; 0x6062 <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    604c:	84 ff       	sbrs	r24, 4
    604e:	0d c0       	rjmp	.+26     	; 0x606a <update_splash+0x3e>
    6050:	80 91 91 0d 	lds	r24, 0x0D91
    6054:	81 30       	cpi	r24, 0x01	; 1
    6056:	49 f4       	brne	.+18     	; 0x606a <update_splash+0x3e>
	{
		game.selection = START_SELECTED;
    6058:	10 92 91 0d 	sts	0x0D91, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    605c:	01 e0       	ldi	r16, 0x01	; 1
    605e:	21 e0       	ldi	r18, 0x01	; 1
    6060:	48 e7       	ldi	r20, 0x78	; 120
    6062:	68 e3       	ldi	r22, 0x38	; 56
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <LBMoveSprite>
	}
	LBRotateSprites(1);
    606a:	81 e0       	ldi	r24, 0x01	; 1
}
    606c:	0f 91       	pop	r16
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
	{
		game.selection = START_SELECTED;
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	LBRotateSprites(1);
    606e:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <LBRotateSprites>

00006072 <main>:
}

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    6072:	89 eb       	ldi	r24, 0xB9	; 185
    6074:	99 e0       	ldi	r25, 0x09	; 9
    6076:	0e 94 c7 22 	call	0x458e	; 0x458e <InitMusicPlayer>
	ClearVram();
    607a:	0e 94 f7 20 	call	0x41ee	; 0x41ee <ClearVram>
	SetMasterVolume(0xff);
    607e:	8f ef       	ldi	r24, 0xFF	; 255
    6080:	0e 94 44 26 	call	0x4c88	; 0x4c88 <SetMasterVolume>
	SetTileTable(tiles_data);
    6084:	80 ef       	ldi	r24, 0xF0	; 240
    6086:	9d e1       	ldi	r25, 0x1D	; 29
    6088:	0e 94 19 21 	call	0x4232	; 0x4232 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    608c:	80 e0       	ldi	r24, 0x00	; 0
    608e:	91 e1       	ldi	r25, 0x11	; 17
    6090:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    6094:	83 e2       	ldi	r24, 0x23	; 35
    6096:	0e 94 16 21 	call	0x422c	; 0x422c <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    609a:	60 e0       	ldi	r22, 0x00	; 0
    609c:	83 e0       	ldi	r24, 0x03	; 3
    609e:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <FadeIn>
	init_game_state();
	//Screen.scrollX = 0;
	//Screen.scrollY = 6;
	//Screen.overlayHeight = 1;
	//Screen.overlayTileTable = tiles_data;
	load_splash();
    60a2:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <load_splash>
	while (1)
	{
		WaitVsync(1);
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    60ae:	60 e0       	ldi	r22, 0x00	; 0
    60b0:	8e e1       	ldi	r24, 0x1E	; 30
    60b2:	9e e0       	ldi	r25, 0x0E	; 14
    60b4:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <LBGetJoyPadState>
		switch (game.current_screen)
    60b8:	80 91 8e 0d 	lds	r24, 0x0D8E
    60bc:	81 11       	cpse	r24, r1
    60be:	f3 cf       	rjmp	.-26     	; 0x60a6 <main+0x34>
		{
			case SPLASH:
				update_splash();
    60c0:	0e 94 16 30 	call	0x602c	; 0x602c <update_splash>
				break;
    60c4:	f0 cf       	rjmp	.-32     	; 0x60a6 <main+0x34>

000060c6 <__udivmodhi4>:
    60c6:	aa 1b       	sub	r26, r26
    60c8:	bb 1b       	sub	r27, r27
    60ca:	51 e1       	ldi	r21, 0x11	; 17
    60cc:	07 c0       	rjmp	.+14     	; 0x60dc <__udivmodhi4_ep>

000060ce <__udivmodhi4_loop>:
    60ce:	aa 1f       	adc	r26, r26
    60d0:	bb 1f       	adc	r27, r27
    60d2:	a6 17       	cp	r26, r22
    60d4:	b7 07       	cpc	r27, r23
    60d6:	10 f0       	brcs	.+4      	; 0x60dc <__udivmodhi4_ep>
    60d8:	a6 1b       	sub	r26, r22
    60da:	b7 0b       	sbc	r27, r23

000060dc <__udivmodhi4_ep>:
    60dc:	88 1f       	adc	r24, r24
    60de:	99 1f       	adc	r25, r25
    60e0:	5a 95       	dec	r21
    60e2:	a9 f7       	brne	.-22     	; 0x60ce <__udivmodhi4_loop>
    60e4:	80 95       	com	r24
    60e6:	90 95       	com	r25
    60e8:	bc 01       	movw	r22, r24
    60ea:	cd 01       	movw	r24, r26
    60ec:	08 95       	ret

000060ee <__divmodhi4>:
    60ee:	97 fb       	bst	r25, 7
    60f0:	07 2e       	mov	r0, r23
    60f2:	16 f4       	brtc	.+4      	; 0x60f8 <__divmodhi4+0xa>
    60f4:	00 94       	com	r0
    60f6:	07 d0       	rcall	.+14     	; 0x6106 <__divmodhi4_neg1>
    60f8:	77 fd       	sbrc	r23, 7
    60fa:	09 d0       	rcall	.+18     	; 0x610e <__divmodhi4_neg2>
    60fc:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__udivmodhi4>
    6100:	07 fc       	sbrc	r0, 7
    6102:	05 d0       	rcall	.+10     	; 0x610e <__divmodhi4_neg2>
    6104:	3e f4       	brtc	.+14     	; 0x6114 <__divmodhi4_exit>

00006106 <__divmodhi4_neg1>:
    6106:	90 95       	com	r25
    6108:	81 95       	neg	r24
    610a:	9f 4f       	sbci	r25, 0xFF	; 255
    610c:	08 95       	ret

0000610e <__divmodhi4_neg2>:
    610e:	70 95       	com	r23
    6110:	61 95       	neg	r22
    6112:	7f 4f       	sbci	r23, 0xFF	; 255

00006114 <__divmodhi4_exit>:
    6114:	08 95       	ret

00006116 <_exit>:
    6116:	f8 94       	cli

00006118 <__stop_program>:
    6118:	ff cf       	rjmp	.-2      	; 0x6118 <__stop_program>
