
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000d29c  0000d39c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000d3a0  2**5
                  CONTENTS, READONLY
  2 .text         0000d29c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000009d1  00800502  00800502  0000d39e  2**1
                  ALLOC
  4 .stab         00000528  00000000  00000000  0000d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  0000dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000df6d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000560  00000000  00000000  0000df80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000615c  00000000  00000000  0000e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000156a  00000000  00000000  0001463c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001ab0  00000000  00000000  00015ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000e90  00000000  00000000  00017658  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001671  00000000  00000000  000184e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005453  00000000  00000000  00019b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000630  00000000  00000000  0001efb0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 98 47 	jmp	0x8f30	; 0x8f30 <__ctors_end>
       4:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
       8:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
       c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      10:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      14:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      18:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      1c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      20:	0c 94 7b 4d 	jmp	0x9af6	; 0x9af6 <__vector_8>
      24:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      28:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      2c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      30:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      34:	0c 94 45 4b 	jmp	0x968a	; 0x968a <__vector_13>
      38:	0c 94 85 4b 	jmp	0x970a	; 0x970a <__vector_14>
      3c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      40:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      44:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      48:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      4c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      50:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      54:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      58:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      5c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      60:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      64:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      68:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      6c:	0c 94 01 48 	jmp	0x9002	; 0x9002 <__bad_interrupt>
      70:	72 5d       	subi	r23, 0xD2	; 210
      72:	75 5d       	subi	r23, 0xD5	; 213
      74:	78 5d       	subi	r23, 0xD8	; 216
      76:	7b 5d       	subi	r23, 0xDB	; 219
      78:	7e 5d       	subi	r23, 0xDE	; 222
      7a:	81 5d       	subi	r24, 0xD1	; 209
      7c:	84 5d       	subi	r24, 0xD4	; 212

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	27 4e 2a 4e 86 4e 8a 4e 91 4e 32 4e 37 4e 3c 4e     'N*N.N.N.N2N7N<N
      dc:	99 4e 3f 4e 42 4e 45 4e 80 4e 83 4e a9 4e           .N?NBNEN.N.N.N

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strLives>:
     979:	4c 49 56 45 53 3a 00                                LIVES:.

00000980 <strShield>:
     980:	53 48 49 45 4c 44 3a 00                             SHIELD:.

00000988 <strScore>:
     988:	53 43 4f 52 45 3a 00                                SCORE:.

0000098f <strSelectHandle>:
     98f:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009a0 <strHighscores>:
     9a0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009ac <str1Player>:
     9ac:	53 54 41 52 54 00                                   START.

000009b2 <strCopyright>:
     9b2:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9c2:	4f 4f 4b 53 00                                      OOKS.

000009c7 <spacesong>:
     9c7:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9d7:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9e7:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     9f7:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a07:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a17:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a27:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a37:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a47:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a57:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a67:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a77:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a87:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     a97:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     aa7:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ab7:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ac7:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ad7:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     ae7:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     af7:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b07:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b17:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b27:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b37:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b47:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b57:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b67:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b77:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b87:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     b97:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     ba7:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bb7:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bc7:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     bd7:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     be7:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     bf7:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c07:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c17:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c27:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c37:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c47:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c57:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c67:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c77:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c87:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     c97:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ca7:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cb7:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cc7:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     cd7:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ce7:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     cf7:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d07:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d17:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d27:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d37:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d47:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d57:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d67:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d77:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d87:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     d97:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     da7:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     db7:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dc7:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     dd7:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     de7:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     df7:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e07:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e17:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e27:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e37:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e47:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e57:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e67:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e77:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e87:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     e97:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     ea7:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     eb7:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     ec7:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     ed7:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     ee7:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     ef7:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f07:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f17:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f27:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f37:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f47:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f57:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f67:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f77:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f87:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     f97:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     fa7:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fb7:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fc7:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fd7:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     fe7:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     ff7:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1007:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1017:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1027:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1037:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1047:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1057:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001067 <planetsong>:
    1067:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1077:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1087:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    1097:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10a7:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10b7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10c7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10d7:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10e7:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    10f7:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1107:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1117:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1127:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1137:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1147:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1157:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1167:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1177:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1187:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1197:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11b7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11c7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11d7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11e7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    11f7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1207:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1217:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1227:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1237:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1247:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1257:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1267:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1277:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1287:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1297:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12a7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12b7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12c7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12d7:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12e7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    12f7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1307:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1317:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1327:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1337:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1347:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1357:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1367:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1377:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1387:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1397:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13a7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13b7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13c7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13d7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13e7:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    13f7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1407:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1417:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1427:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1437:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1447:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1457:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1467:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1477:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1487:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    1497:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14a7:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14b7:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14c7:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14d7:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14e7:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    14f7:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1507:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1517:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1527:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1537:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1547:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1557:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1567:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1577:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1587:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1597:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15a7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15b7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15c7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15d7:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15e7:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    15f7:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1607:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1617:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1627:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1637:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1647:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1657:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1667:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1677:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1687:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1697:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16a7:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16b7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16c7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16d7:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16e7:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    16f7:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1707:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1717:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1727:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1737:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1747:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1757:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1767:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1777:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1787:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1797:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17a7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17b7:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17c7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17d7:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17e7:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    17f7:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1807:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1817:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1827:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1837:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1847:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1857:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1867:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1877:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1887:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1897:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18a7:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18b7:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18c7:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18d7:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18e7:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    18f7:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1907:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1917:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1927:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1937:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1947:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1957:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1967:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1977:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1987:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1997:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19a7:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19b7:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19c7:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19d7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19e7:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    19f7:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a07:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a17:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a27:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a37:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a47:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a57:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a67:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a77:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a87:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1a97:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1aa7:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ab7:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ac7:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ad7:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1ae7:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1af7:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b07:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b17:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b27:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b37:	2f 00                                               /.

00001b39 <my_patches>:
    1b39:	00 00 00 4b 1b 00 00 00 00 00 00 00 4b 1b 00 00     ...K........K...
	...

00001b4b <patch00>:
    1b4b:	00 02 04 00 00 dd 00 ff                             ........

00001b53 <level_data>:
    1b53:	00 00 03 15 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    234f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    235f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    236f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    237f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    238f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    239f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    23af:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    23bf:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    23cf:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    23df:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    23ef:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    23ff:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    240f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    241f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    242f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    243f:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 05     ................
    244f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    245f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    246f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    247f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    248f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    249f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    24af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    24bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    24cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    24df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    24ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    24ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    250f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    251f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    252f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    253f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    254f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    255f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    256f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    257f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    258f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    259f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    25af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    25bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    25cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    25df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    25ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    25ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    260f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    261f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    262f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    263f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    264f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    265f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    266f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    267f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    268f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    269f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    26af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    26bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    26cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    26df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    26ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    26ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    270f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    271f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    272f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    273f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    274f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    275f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    276f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    277f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    278f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    279f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    27af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    27bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    27cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    27df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    27ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    27ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    280f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    281f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    282f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    283f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    284f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    285f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    286f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    287f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    288f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    289f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    28af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    28bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    28cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    28df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    28ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    28ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    290f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    291f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    292f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    293f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    294f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 02 01     ................
    295f:	01 01 01 01 03 05 05 05 05 05 05 05 05 05 05 05     ................
    296f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    297f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    298f:	05 05 05 05 05 05 05 05 05 05 02 01 01 01 01 01     ................
    299f:	03 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    29af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    29bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    29cf:	05 05 05 05 05 05 02 01 01 01 01 01 03 05 05 05     ................
    29df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    29ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    29ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a0f:	05 05 02 01 01 01 01 01 03 05 05 05 05 05 05 05     ................
    2a1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2a9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2aaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2abf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2acf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2adf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2aef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2aff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2b9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2baf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2bbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2bcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2bdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2bef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2bff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2c9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2caf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2cbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2ccf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2cdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2cef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2cff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2d9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2daf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2dbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2dcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2ddf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2def:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2dff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2e0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2e1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2e2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2e3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2e4f:	05 05 02 01 01 01 01 01 03 05 05 05 05 05 05 05     ................
    2e5f:	02 01 01 01 01 01 03 05 05 05 05 05 05 05 05 05     ................
    2e6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2e7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 02 01     ................
    2e8f:	01 01 01 01 03 05 05 05 05 05 05 05 02 01 01 01     ................
    2e9f:	01 01 03 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2eaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2ebf:	05 05 05 05 05 05 05 05 05 05 02 01 01 01 01 01     ................
    2ecf:	03 05 05 05 05 05 05 05 02 01 01 01 01 01 03 05     ................
    2edf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2eef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2eff:	05 05 05 05 05 05 02 01 01 01 01 01 03 05 05 05     ................
    2f0f:	05 05 05 05 02 01 01 01 01 01 03 05 05 05 05 05     ................
    2f1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2f9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2faf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2fbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2fcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2fdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2fef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    2fff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    300f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    301f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    302f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    303f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    304f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    305f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    306f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    307f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    308f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    309f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    30ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    310f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    311f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    312f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    313f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    314f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    315f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    316f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    317f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    318f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    319f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    31af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    31bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    31cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    31df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    31ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    31ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    320f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    321f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    322f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    323f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    324f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    325f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    326f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    327f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    328f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    329f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    32af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    32bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    32cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    32df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    32ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    32ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    330f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    331f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    332f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    333f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    334f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    335f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    336f:	01 01 01 05 05 05 05 05 01 01 01 01 01 01 01 01     ................
    337f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    338f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    339f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    33af:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    33bf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    33cf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    33df:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    33ef:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    33ff:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    340f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    341f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    342f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 04     ................
    343f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    344f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    345f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    346f:	04 04 05 05 05 05 05 04 04 04 04 04 04 04 04 04     ................
    347f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    348f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    349f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    34af:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    34bf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    34cf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    34df:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    34ef:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    34ff:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    350f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    351f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    352f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 05 05     ................
    353f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    354f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    355f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    356f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    357f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    358f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    359f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    35af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    35bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    35cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    35df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    35ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    35ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    360f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    361f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    362f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    363f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    364f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    365f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    366f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    367f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    368f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    369f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    36ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    370f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    371f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    372f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    373f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    374f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    375f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    376f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    377f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    378f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    379f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    37af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    37bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    37cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    37df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    37ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    37ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    380f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    381f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    382f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    383f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    384f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    385f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    386f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    387f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    388f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    389f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    38af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    38bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    38cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    38df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    38ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    38ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    390f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    391f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    392f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    393f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    394f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    395f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    396f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    397f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    398f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    399f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    39af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    39bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    39cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    39df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    39ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    39ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3a9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3aaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3abf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3acf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3adf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3aef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3aff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3b9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3baf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3bbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3bcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3bdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3bef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3bff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3c9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3caf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3cbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3ccf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3cdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3cef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3cff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3d9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3daf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3dbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3dcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3ddf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3def:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3dff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3e9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3eaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3ebf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3ecf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3edf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3eef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3eff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3f9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3faf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3fbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3fcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3fdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3fef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    3fff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    400f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    401f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    402f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    403f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    404f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    405f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    406f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    407f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    408f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    409f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    40af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    40bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    40cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    40df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    40ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    40ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    410f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    411f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    412f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    413f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    414f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    415f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    416f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    417f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    418f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    419f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    41af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    41bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    41cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    41df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    41ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    41ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    420f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    421f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    422f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    423f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    424f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    425f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    426f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    427f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    428f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    429f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    42af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    42bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    42cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    42df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    42ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    42ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    430f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    431f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    432f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    433f:	05 05 05 05 02 01 01 01 01 01 03 05 05 05 05 05     ................
    434f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    435f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    436f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    437f:	02 01 01 01 01 01 03 05 05 05 05 05 05 05 05 05     ................
    438f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    439f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    43af:	05 05 05 05 05 05 05 05 05 05 05 05 02 01 01 01     ................
    43bf:	01 01 03 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    43cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    43df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    43ef:	05 05 05 05 05 05 05 05 02 01 01 01 01 01 03 05     ................
    43ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    440f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    441f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    442f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    443f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    444f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    445f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    446f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    447f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    448f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    449f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    44af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    44bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    44cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    44df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    44ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    44ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    450f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    451f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    452f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    453f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    454f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    455f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    456f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    457f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    458f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    459f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    45af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    45bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    45cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    45df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    45ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    45ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    460f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    461f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    462f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    463f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    464f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    465f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    466f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    467f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    468f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    469f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    46af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    46bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    46cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    46df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    46ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    46ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    470f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    471f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    472f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    473f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    474f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    475f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    476f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    477f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    478f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    479f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    47af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    47bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    47cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    47df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    47ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    47ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    480f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    481f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    482f:	05 05 05 05 05 05 05 05 02 01 01 01 01 01 03 05     ................
    483f:	05 05 05 05 05 05 02 01 01 01 01 01 03 05 05 05     ................
    484f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    485f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    486f:	05 05 05 05 02 01 01 01 01 01 03 05 05 05 05 05     ................
    487f:	05 05 02 01 01 01 01 01 03 05 05 05 05 05 05 05     ................
    488f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    489f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    48af:	02 01 01 01 01 01 03 05 05 05 05 05 05 05 02 01     ................
    48bf:	01 01 01 01 03 05 05 05 05 05 05 05 05 05 05 05     ................
    48cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    48df:	05 05 05 05 05 05 05 05 05 05 05 05 02 01 01 01     ................
    48ef:	01 01 03 05 05 05 05 05 05 05 02 01 01 01 01 01     ................
    48ff:	03 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    490f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    491f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    492f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    493f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    494f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    495f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    496f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    497f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    498f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    499f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    49af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    49bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    49cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    49df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    49ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    49ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4a9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4aaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4abf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4acf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4adf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4aef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4aff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4b9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4baf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4bbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4bcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4bdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4bef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4bff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4caf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4cbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4ccf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4cdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4cef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4cff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4d0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4d1f:	05 05 05 05 05 05 01 01 01 01 01 01 01 01 01 01     ................
    4d2f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4d3f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4d4f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4d5f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4d6f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4d7f:	01 01 01 01 01 01 01 01 05 05 05 05 05 01 01 01     ................
    4d8f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4d9f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4daf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4dbf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4dcf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4ddf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4def:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4dff:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4e0f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    4e1f:	01 01 01 01 01 04 04 04 04 04 04 04 04 04 04 04     ................
    4e2f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e3f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e4f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e5f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e6f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e7f:	04 04 04 04 04 04 04 05 05 05 05 05 04 04 04 04     ................
    4e8f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4e9f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4eaf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4ebf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4ecf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4edf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4eef:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4eff:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4f0f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4f1f:	04 04 04 04 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4f9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4faf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4fbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4fcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4fdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4fef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4fff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    500f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    501f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    502f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    503f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    504f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    505f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    506f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    507f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    508f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    509f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    50af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    50bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    50cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    50df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    50ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    50ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    510f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    511f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    512f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    513f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    514f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    515f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    516f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    517f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    518f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    519f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    51ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    520f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    521f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    522f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    523f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    524f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    525f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    526f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    527f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    528f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    529f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    52af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    52bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    52cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    52df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    52ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    52ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    530f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    531f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    532f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    533f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    534f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    535f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    536f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    537f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    538f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    539f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    53af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    53bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    53cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    53df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    53ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    53ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    540f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    541f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    542f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    543f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    544f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    545f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    546f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    547f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    548f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    549f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    54af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    54bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    54cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    54df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    54ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    54ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    550f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    551f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    552f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    553f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    554f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    555f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    556f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    557f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    558f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    559f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    55af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    55bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    55cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    55df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    55ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    55ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    560f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    561f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    562f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    563f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    564f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    565f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    566f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    567f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    568f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    569f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    56af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    56bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    56cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    56df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    56ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    56ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    570f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    571f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    572f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    573f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    574f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    575f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    576f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    577f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    578f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    579f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    57af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    57bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    57cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    57df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    57ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    57ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    580f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    581f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    582f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    583f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    584f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    585f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    586f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    587f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    588f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    589f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    58af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    58bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    58cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    58df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    58ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    58ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    590f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    591f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    592f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    593f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    594f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    595f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    596f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    597f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    598f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    599f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    59af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    59bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    59cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    59df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    59ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    59ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5a9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5aaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5abf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5acf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5adf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5aef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5aff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5b9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5baf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5bbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5bcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5bdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5bef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5bff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5c9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5caf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5cbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5ccf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5cdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5cef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5cff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d1f:	05 05 05 05 05 05 05 05 05 05 02 01 01 01 01 01     ................
    5d2f:	03 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d5f:	05 05 05 05 05 05 02 01 01 01 01 01 03 05 05 05     ................
    5d6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5d9f:	05 05 02 01 01 01 01 01 03 05 05 05 05 05 05 05     ................
    5daf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5dbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5dcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 02 01     ................
    5ddf:	01 01 01 01 03 05 05 05 05 05 05 05 05 05 05 05     ................
    5def:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5dff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5e9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5eaf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5ebf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5ecf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5edf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5eef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5eff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f0f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f1f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f2f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f3f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f4f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f5f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f6f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f7f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f8f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f9f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5faf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fbf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fcf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    600f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    601f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    602f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    603f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    604f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    605f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    606f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    607f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    608f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    609f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    60ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    610f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    611f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    612f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    613f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    614f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    615f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    616f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    617f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    618f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    619f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    61af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    61bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    61cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    61df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    61ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    61ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    620f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 02 01     ................
    621f:	01 01 01 01 03 05 05 05 05 05 05 05 02 01 01 01     ................
    622f:	01 01 03 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    623f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    624f:	05 05 05 05 05 05 05 05 05 05 02 01 01 01 01 01     ................
    625f:	03 05 05 05 05 05 05 05 02 01 01 01 01 01 03 05     ................
    626f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    627f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    628f:	05 05 05 05 05 05 02 01 01 01 01 01 03 05 05 05     ................
    629f:	05 05 05 05 02 01 01 01 01 01 03 05 05 05 05 05     ................
    62af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    62bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    62cf:	05 05 02 01 01 01 01 01 03 05 05 05 05 05 05 05     ................
    62df:	02 01 01 01 01 01 03 05 05 05 05 05 05 05 05 05     ................
    62ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    62ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    630f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    631f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    632f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    633f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    634f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    635f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    636f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    637f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    638f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    639f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    63ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    640f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    641f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    642f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    643f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    644f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    645f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    646f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    647f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    648f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    649f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    64af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    64bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    64cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    64df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    64ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    64ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    650f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    651f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    652f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    653f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    654f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    655f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    656f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    657f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    658f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    659f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    65ff:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    660f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    661f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    662f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    663f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    664f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    665f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    666f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    667f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    668f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    669f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66af:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66bf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66cf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66ef:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66ff:	05 05 05 05 05 05 05 05 05 05 05 05 01 01 01 01     ................
    670f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    671f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    672f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    673f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    674f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    675f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    676f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    677f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    678f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    679f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    67af:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    67bf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    67cf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    67df:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    67ef:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    67ff:	01 01 01 01 01 01 01 01 01 01 01 04 04 04 04 04     ................
    680f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    681f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    682f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    683f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    684f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    685f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    686f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    687f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    688f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    689f:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    68af:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    68bf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    68cf:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    68df:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    68ef:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    68ff:	04 04 04 04 04 04 04 04 04 04                       ..........

00006909 <sprites_data>:
    6909:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    6919:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    6929:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    6939:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    6949:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    6959:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    6969:	85 87 87 d2 fe fe fe fe 87 85 85 87 ef fe fe fe     ................
    6979:	87 ef 87 87 87 ef fe fe ef ff ef 87 87 ef fe fe     ................
    6989:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    6999:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    69a9:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    69b9:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    69c9:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    69d9:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    69e9:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    69f9:	87 85 85 87 ef fe fe fe 87 ef 87 87 87 ef fe fe     ................
    6a09:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6a19:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    6a29:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    6a39:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6a49:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    6a59:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    6a69:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    6a79:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    6a89:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6a99:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6aa9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6ab9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6ac9:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    6ad9:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    6ae9:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    6af9:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    6b09:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    6b19:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    6b29:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    6b39:	87 87 87 ef fe fe fe fe 87 87 87 ef fe fe fe fe     ................
    6b49:	87 ef 87 85 87 ef fe fe 87 87 87 85 87 87 ef fe     ................
    6b59:	ad ad ad ad ad 87 ef fe ad ad ad ad ad ad a4 ad     ................
    6b69:	ad ad ad ad ad a4 a4 a4 87 87 87 ef fe fe fe fe     ................
    6b79:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    6b89:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    6b99:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    6ba9:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    6bb9:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    6bc9:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    6bd9:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    6be9:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    6bf9:	87 87 87 ef fe fe fe fe 87 87 ef fe fe fe fe fe     ................
    6c09:	ef ff ef 87 87 ef fe fe 87 ef 87 85 87 ef fe fe     ................
    6c19:	87 87 87 85 87 87 ef fe ad ad ad ad ad 87 ef fe     ................
    6c29:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    6c39:	87 87 87 ef fe fe fe fe 87 87 87 87 ef fe fe fe     ................
    6c49:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6c59:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    6c69:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    6c79:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6c89:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    6c99:	fe fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef     ................
    6ca9:	fe fe fe fe 85 87 ef fe fe fe fe fe 85 87 ef fe     ................
    6cb9:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    6cc9:	ef fe 85 ef fe fe fe fe ef fe 85 85 ef fe fe fe     ................
    6cd9:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    6ce9:	fe fe 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    6cf9:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    6d09:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    6d19:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    6d29:	fe fe fe a4 87 87 87 ef fe fe fe a4 ef ef ef fe     ................
    6d39:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    6d49:	87 87 85 fe fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    6d59:	87 87 87 ef fe fe fe fe 87 ef ef fe fe fe fe fe     ................
    6d69:	ef 85 ef fe fe fe fe fe 85 85 ef fe fe fe fe fe     ................
    6d79:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    6d89:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    6d99:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 ef fe     ................
    6da9:	a4 a4 85 85 85 85 ef fe a4 a4 ef ef ef ef fe fe     ................
    6db9:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6dc9:	87 87 ef fe fe fe fe fe fe 85 87 ef fe fe fe fe     ................
    6dd9:	fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe fe     ................
    6de9:	fe fe 85 87 87 ef fe fe fe fe fe 85 87 ef fe fe     ................
    6df9:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    6e09:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    6e19:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    6e29:	fe fe fe a4 85 85 85 ef fe fe fe a4 ef ef ef fe     ................
    6e39:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    6e49:	87 87 ef fe fe fe fe fe 85 87 ef 85 fe fe fe fe     ................
    6e59:	85 87 ef ef fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    6e69:	85 87 ef fe fe fe fe fe 85 87 ef fe fe fe fe fe     ................
    6e79:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    6e89:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 ef     ................
    6e99:	fe fe fe fe 85 85 85 ef a4 a4 85 85 85 85 a4 a4     ................
    6ea9:	a4 a4 85 85 85 85 a4 a4 a4 a4 ef ef ef ef a4 a4     ................
    6eb9:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    6ec9:	87 87 85 87 ef fe fe fe fe fe 85 87 87 ef fe fe     ................
    6ed9:	fe fe 85 87 87 ef fe fe 85 85 85 87 ef fe fe fe     ................
    6ee9:	87 87 87 87 ef fe fe fe ef ef ef ef fe fe fe fe     ................
    6ef9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6f09:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    6f19:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    6f29:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    6f39:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    6f49:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    6f59:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    6f69:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    6f79:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6f89:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    6f99:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    6fa9:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    6fb9:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    6fc9:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    6fd9:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    6fe9:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    6ff9:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7009:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    7019:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    7029:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    7039:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    7049:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7059:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    7069:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    7079:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7089:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    7099:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    70a9:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    70b9:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    70c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    70d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    70e9:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    70f9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7109:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    7119:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    7129:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    7139:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    7149:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7159:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7169:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    7179:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    7189:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    7199:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    71a9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    71b9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    71c9:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    71d9:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    71e9:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    71f9:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    7209:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    7219:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    7229:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7239:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7249:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    7259:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    7269:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    7279:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    7289:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7299:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    72a9:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    72b9:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    72c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    72d9:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    72e9:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    72f9:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    7309:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7319:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    7329:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    7339:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    7349:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    7359:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    7369:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    7379:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    7389:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    7399:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    73a9:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    73b9:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    73c9:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    73d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    73e9:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    73f9:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    7409:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    7419:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7429:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7439:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7449:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 ef     ................
    7459:	fe fe fe fe 85 87 87 ef a4 a4 85 85 85 87 ef fe     ................
    7469:	a4 a4 87 87 87 87 ef fe a4 a4 ef ef ef ef fe fe     ................
    7479:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7489:	87 87 ef fe fe fe fe fe fe 85 85 ef fe fe fe fe     ................
    7499:	fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe fe     ................
    74a9:	fe fe 85 85 85 ef fe fe fe fe fe 85 85 ef fe fe     ................
    74b9:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    74c9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    74d9:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    74e9:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    74f9:	fe a4 87 87 87 87 87 87 a4 a4 ef ef ef ef ef ef     ................
    7509:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    7519:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    7529:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    7539:	87 87 87 87 ad 85 87 87 ef ef ef ef ad ad a4 a4     ................
    7549:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    7559:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    7569:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    7579:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

00007589 <map_enemy_spider_1>:
    7589:	01 01 23                                            ..#

0000758c <map_enemy_spider_0>:
    758c:	01 01 18                                            ...

0000758f <map_enemy_shark>:
    758f:	01 01 05                                            ...

00007592 <map_enemy_shot>:
    7592:	01 01 0d                                            ...

00007595 <map_hero_shot>:
    7595:	01 01 04                                            ...

00007598 <map_hero_ship_large>:
    7598:	04 02 25 26 27 28 29 2a 2b 2c                       ..%&'()*+,

000075a2 <map_hero_ship_1>:
    75a2:	03 01 24 1a 1b                                      ..$..

000075a7 <map_hero_ship_0>:
    75a7:	03 01 19 1a 1b                                      .....

000075ac <map_hero_prone>:
    75ac:	03 01 2f 30 31                                      ../01

000075b1 <map_hero_jump>:
    75b1:	02 03 02 03 0a 0c 16 17                             ........

000075b9 <map_hero_step_3>:
    75b9:	02 03 02 03 0a 0b 2d 2e                             ......-.

000075c1 <map_hero_step_2>:
    75c1:	02 03 00 01 07 09 14 15                             ........

000075c9 <map_hero_step_1>:
    75c9:	02 03 02 03 0a 0b 12 13                             ........

000075d1 <map_hero_step_0>:
    75d1:	02 03 00 01 07 09 10 11                             ........

000075d9 <map_hero_idle>:
    75d9:	02 03 00 01 07 08 0e 0f                             ........

000075e1 <map_explosion_2>:
    75e1:	01 01 1e                                            ...

000075e4 <map_explosion_1>:
    75e4:	01 01 1d                                            ...

000075e7 <map_explosion_0>:
    75e7:	01 01 1c                                            ...

000075ea <map_meteor>:
    75ea:	01 01 1f                                            ...

000075ed <map_up_arrow>:
    75ed:	01 01 22                                            .."

000075f0 <map_down_arrow>:
    75f0:	01 01 21                                            ..!

000075f3 <map_right_arrow>:
    75f3:	01 01 20                                            .. 

000075f6 <map_none>:
    75f6:	01 01 06                                            ...

000075f9 <tiles_data>:
	...
    7639:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7649:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    7659:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    7669:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    7679:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7689:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    7699:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    76a9:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    76b9:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    76c9:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    76d9:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    76e9:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    76f9:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    7709:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    7719:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    7729:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    7739:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    7749:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    7759:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    7769:	af af af af af af af af af af af af af af af af     ................
    7779:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    7789:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    7799:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    77a9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    77b9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    77c9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    77d9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    77e9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    77f9:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    7809:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    7819:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    7829:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    7839:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    7849:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    7859:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    7869:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    7879:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    7889:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    7899:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    78a9:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    78b9:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    78c9:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    78d9:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    78e9:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    7911:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    7921:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7939:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    7949:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    7959:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    7969:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    7979:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    7989:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    7999:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    79a9:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    79b9:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    79c9:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    79d9:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    79e9:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    79f9:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    7a09:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    7a19:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    7a29:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    7a39:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    7a49:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    7a59:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    7a69:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    7a79:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    7a89:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    7a99:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    7aa9:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    7ab9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    7ac9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    7ad9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    7ae9:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    7b05:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    7b15:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    7b25:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    7b35:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    7b45:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7b55:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7b65:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7b75:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    7b85:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    7b95:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    7ba5:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    7bb5:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    7bf9:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    7c09:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    7c19:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    7c29:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    7c39:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7c49:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7c59:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7c69:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7c79:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    7c89:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    7c99:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    7ca9:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    7cb9:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    7cc9:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    7cd9:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    7ce9:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    7cf9:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    7d09:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    7d19:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    7d29:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    7d39:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    7d49:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    7d59:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    7d69:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    7db1:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    7dc1:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    7dd1:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    7de1:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    7df1:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    7e01:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    7e11:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7e21:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    7e31:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    7e41:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    7e51:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    7e61:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7e7d:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    7e8d:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    7e9d:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    7f01:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7f11:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7f29:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c5:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    80d5:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    80e5:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    8101:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    8111:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8121:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    81e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    81f1:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8211:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    8261:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8285:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    8295:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    82a5:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    82c1:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    82d1:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    82e1:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    8301:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    8311:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    8321:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    8341:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    8351:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    8361:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    8381:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    8391:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    83a1:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    83c5:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    83d5:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    83e5:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    8401:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    8411:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    8421:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    8441:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    8451:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    8461:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    8481:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    8491:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    84a1:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    84c1:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    84d1:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    84e1:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    8501:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    8511:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    8521:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    8579:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8589:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8599:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    85a9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8681:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8691:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    86a9:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    86c1:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    86d1:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    86e1:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    8701:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    8711:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8721:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    8741:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8751:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8761:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    8781:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8791:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    87a1:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    87c1:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    87d1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    87e1:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    8801:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    8811:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    8821:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    8841:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    8851:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    8861:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    8881:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    8891:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    88a1:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    88c1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    88d1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    88e1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    8901:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    8911:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8921:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    8945:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    8955:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    8965:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    8981:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    8991:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    89a1:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    89c1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    89d1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    89e1:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    8a01:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    8a11:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    8a21:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    8a41:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    8a51:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    8a61:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    8a81:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8a91:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8aa1:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    8ac1:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8ad1:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    8ae1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    8b01:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8b11:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8b21:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    8b41:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    8b51:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    8b61:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    8b81:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    8b91:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    8ba1:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    8bc1:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    8bd1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8be1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8c01:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8c11:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8c21:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    8c41:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8c51:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8c61:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8c81:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    8c91:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    8ca1:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    8cc1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8cd1:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    8ce1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    8d01:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    8d11:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    8d21:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8d41:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    8d51:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    8d61:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    8ea9:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00008eb9 <map_star>:
    8eb9:	01 01 0c                                            ...

00008ebc <map_ice_moon>:
    8ebc:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00008ec7 <map_ice_cloud>:
    8ec7:	01 01 08                                            ...

00008eca <map_ice_far>:
    8eca:	01 01 07                                            ...

00008ecd <map_ice_sky>:
    8ecd:	01 01 06                                            ...

00008ed0 <map_ice_horizon>:
    8ed0:	01 01 05                                            ...

00008ed3 <map_ice_bottom>:
    8ed3:	01 01 04                                            ...

00008ed6 <map_ice_right>:
    8ed6:	01 01 03                                            ...

00008ed9 <map_ice_middle>:
    8ed9:	01 01 02                                            ...

00008edc <map_ice_left>:
    8edc:	01 01 01                                            ...

00008edf <map_splash>:
    8edf:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    8eef:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    8eff:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    8f0f:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    8f1f:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00008f2c <map_tile_none>:
    8f2c:	01 01 00 00                                         ....

00008f30 <__ctors_end>:
    8f30:	11 24       	eor	r1, r1
    8f32:	1f be       	out	0x3f, r1	; 63
    8f34:	cf ef       	ldi	r28, 0xFF	; 255
    8f36:	d0 e1       	ldi	r29, 0x10	; 16
    8f38:	de bf       	out	0x3e, r29	; 62
    8f3a:	cd bf       	out	0x3d, r28	; 61

00008f3c <__do_copy_data>:
    8f3c:	15 e0       	ldi	r17, 0x05	; 5
    8f3e:	a0 e0       	ldi	r26, 0x00	; 0
    8f40:	b5 e0       	ldi	r27, 0x05	; 5
    8f42:	ec e9       	ldi	r30, 0x9C	; 156
    8f44:	f2 ed       	ldi	r31, 0xD2	; 210
    8f46:	02 c0       	rjmp	.+4      	; 0x8f4c <__do_copy_data+0x10>
    8f48:	05 90       	lpm	r0, Z+
    8f4a:	0d 92       	st	X+, r0
    8f4c:	a2 30       	cpi	r26, 0x02	; 2
    8f4e:	b1 07       	cpc	r27, r17
    8f50:	d9 f7       	brne	.-10     	; 0x8f48 <__do_copy_data+0xc>

00008f52 <__do_clear_bss>:
    8f52:	1e e0       	ldi	r17, 0x0E	; 14
    8f54:	a2 e0       	ldi	r26, 0x02	; 2
    8f56:	b5 e0       	ldi	r27, 0x05	; 5
    8f58:	01 c0       	rjmp	.+2      	; 0x8f5c <.do_clear_bss_start>

00008f5a <.do_clear_bss_loop>:
    8f5a:	1d 92       	st	X+, r1

00008f5c <.do_clear_bss_start>:
    8f5c:	a3 3d       	cpi	r26, 0xD3	; 211
    8f5e:	b1 07       	cpc	r27, r17
    8f60:	e1 f7       	brne	.-8      	; 0x8f5a <.do_clear_bss_loop>

00008f62 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    8f62:	0e 94 53 4d 	call	0x9aa6	; 0x9aa6 <wdt_randomize>
#endif

    MCUSR = 0;
    8f66:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    8f68:	88 e1       	ldi	r24, 0x18	; 24
    8f6a:	0f b6       	in	r0, 0x3f	; 63
    8f6c:	f8 94       	cli
    8f6e:	80 93 60 00 	sts	0x0060, r24
    8f72:	10 92 60 00 	sts	0x0060, r1
    8f76:	0f be       	out	0x3f, r0	; 63

00008f78 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    8f78:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <isEepromFormatted>
    8f7c:	81 11       	cpse	r24, r1
    8f7e:	02 c0       	rjmp	.+4      	; 0x8f84 <Initialize+0xc>
    8f80:	0e 94 ee 4d 	call	0x9bdc	; 0x9bdc <FormatEeprom>

	cli();
    8f84:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8f86:	81 e0       	ldi	r24, 0x01	; 1
    8f88:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    8f8c:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    8f90:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    8f94:	10 92 b8 0c 	sts	0x0CB8, r1
    8f98:	10 92 be 0c 	sts	0x0CBE, r1
    8f9c:	10 92 c4 0c 	sts	0x0CC4, r1
    8fa0:	10 92 ca 0c 	sts	0x0CCA, r1
    8fa4:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    8fa8:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    8fac:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    8fb0:	92 e1       	ldi	r25, 0x12	; 18
    8fb2:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    8fb6:	90 ee       	ldi	r25, 0xE0	; 224
    8fb8:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    8fbc:	94 e1       	ldi	r25, 0x14	; 20
    8fbe:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    8fc2:	10 92 ac 0c 	sts	0x0CAC, r1
    8fc6:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    8fca:	10 92 b0 0c 	sts	0x0CB0, r1
    8fce:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    8fd2:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    8fd6:	0e 94 4d 5a 	call	0xb49a	; 0xb49a <InitializeVideoMode>
    8fda:	8e e7       	ldi	r24, 0x7E	; 126
    8fdc:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    8fde:	fc 01       	movw	r30, r24
    8fe0:	25 91       	lpm	r18, Z+
    8fe2:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    8fe4:	f9 01       	movw	r30, r18
    8fe6:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    8fe8:	30 83       	st	Z, r19
    8fea:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    8fec:	20 e0       	ldi	r18, 0x00	; 0
    8fee:	8c 3a       	cpi	r24, 0xAC	; 172
    8ff0:	92 07       	cpc	r25, r18
    8ff2:	a9 f7       	brne	.-22     	; 0x8fde <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    8ff4:	78 94       	sei
	
	DisplayLogo();
    8ff6:	0e 94 db 5a 	call	0xb5b6	; 0xb5b6 <DisplayLogo>
    8ffa:	0e 94 37 67 	call	0xce6e	; 0xce6e <main>
    8ffe:	0c 94 4c 69 	jmp	0xd298	; 0xd298 <_exit>

00009002 <__bad_interrupt>:
    9002:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00009006 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    9006:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    9008:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    900c:	ad e8       	ldi	r26, 0x8D	; 141
    900e:	aa 95       	dec	r26
    9010:	f1 f7       	brne	.-4      	; 0x900e <sub_video_mode3+0x8>
    9012:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    9014:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    9018:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    901a:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    901c:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    901e:	02 9f       	mul	r16, r18
		add ZL,r0
    9020:	e0 0d       	add	r30, r0
		adc ZH,r1
    9022:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    9024:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    9026:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    9028:	20 91 6a 0d 	lds	r18, 0x0D6A
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    902c:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    902e:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    9030:	30 0f       	add	r19, r16

		cp r18,r16
    9032:	20 17       	cp	r18, r16
		breq no_ramtiles
    9034:	51 f0       	breq	.+20     	; 0x904a <no_ramtiles>
		nop
    9036:	00 00       	nop
	...

0000903a <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    903a:	a1 91       	ld	r26, Z+
		ld XH,Z+
    903c:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    903e:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    9040:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    9042:	0c 93       	st	X, r16

		inc r16
    9044:	03 95       	inc	r16
		cp r16,r18
    9046:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    9048:	c0 f3       	brcs	.-16     	; 0x903a <upd_loop>

0000904a <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    904a:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    904c:	1a 95       	dec	r17
		brne .-4
    904e:	f1 f7       	brne	.-4      	; 0x904c <no_ramtiles+0x2>
		rjmp .
    9050:	00 c0       	rjmp	.+0      	; 0x9052 <no_ramtiles+0x8>
		dec r19
    9052:	3a 95       	dec	r19
		brne 1b
    9054:	d1 f7       	brne	.-12     	; 0x904a <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    9056:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    9058:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    905a:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    905e:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    9060:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    9062:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    9064:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    9066:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    906a:	60 2f       	mov	r22, r16
		lsr r16
    906c:	06 95       	lsr	r16
		lsr r16
    906e:	06 95       	lsr	r16
		lsr r16 ;/8
    9070:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    9072:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    9076:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    9078:	f1 2e       	mov	r15, r17

        mov r17,r16
    907a:	10 2f       	mov	r17, r16
        lsr r16
    907c:	06 95       	lsr	r16
        lsr r16
    907e:	06 95       	lsr	r16
        lsr r16 ;/8
    9080:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    9082:	d0 0f       	add	r29, r16
		andi r17,0x7
    9084:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    9086:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    9088:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    908a:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    908e:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    9092:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    9096:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    909a:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    909c:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    909e:	5e 01       	movw	r10, r28
		mov r23,r22
    90a0:	76 2f       	mov	r23, r22
		mov r24,r15
    90a2:	8f 2d       	mov	r24, r15
		mov r9,r25
    90a4:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    90a6:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    90aa:	20 2f       	mov	r18, r16
		lsr r16
    90ac:	06 95       	lsr	r16
		lsr r16
    90ae:	06 95       	lsr	r16
		lsr r16			;hi8
    90b0:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    90b2:	03 95       	inc	r16
		andi r18,7		;lo8
    90b4:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    90b6:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    90ba:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    90bc:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    90be:	01 fe       	sbrs	r0, 1
		clr r22
    90c0:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    90c2:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    90c4:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    90c6:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    90c8:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    90ca:	01 fe       	sbrs	r0, 1
		ser r24
    90cc:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    90ce:	01 fe       	sbrs	r0, 1
		clr r9
    90d0:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    90d2:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    90d4:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    90d6:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    90d8:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    90da:	80 90 a8 0c 	lds	r8, 0x0CA8

000090de <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    90de:	bc d3       	rcall	.+1912   	; 0x9858 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    90e0:	24 e0       	ldi	r18, 0x04	; 4
    90e2:	2a 95       	dec	r18
    90e4:	f1 f7       	brne	.-4      	; 0x90e2 <next_tile_line+0x4>
    90e6:	00 00       	nop
				
		call render_tile_line
    90e8:	0e 94 b5 48 	call	0x916a	; 0x916a <render_tile_line>

		WAIT r18,58
    90ec:	23 e1       	ldi	r18, 0x13	; 19
    90ee:	2a 95       	dec	r18
    90f0:	f1 f7       	brne	.-4      	; 0x90ee <next_tile_line+0x10>
    90f2:	00 00       	nop

		inc r22
    90f4:	63 95       	inc	r22
		dec r8
    90f6:	8a 94       	dec	r8
		breq text_frame_end
    90f8:	09 f1       	breq	.+66     	; 0x913c <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    90fa:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    90fc:	29 f0       	breq	.+10     	; 0x9108 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    90fe:	08 e0       	ldi	r16, 0x08	; 8
    9100:	0a 95       	dec	r16
    9102:	f1 f7       	brne	.-4      	; 0x9100 <next_tile_line+0x22>
    9104:	00 00       	nop
		rjmp next_tile_line
    9106:	eb cf       	rjmp	.-42     	; 0x90de <next_tile_line>

00009108 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    9108:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    910a:	0c 2f       	mov	r16, r28
		andi r16,0x7
    910c:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    910e:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    9110:	11 f0       	breq	.+4      	; 0x9116 <next_tile_row+0xe>
		inc YL
    9112:	c3 95       	inc	r28
		rjmp 2f
    9114:	02 c0       	rjmp	.+4      	; 0x911a <next_tile_row+0x12>
	1:
		andi YL,0xf8
    9116:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    9118:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    911a:	8a 95       	dec	r24
		brne .+2
    911c:	09 f4       	brne	.+2      	; 0x9120 <next_tile_row+0x18>
		movw YL,r12
    911e:	e6 01       	movw	r28, r12

		dec r19
    9120:	3a 95       	dec	r19
		brne .+2
    9122:	09 f4       	brne	.+2      	; 0x9126 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    9124:	67 2f       	mov	r22, r23
		brne .+2
    9126:	09 f4       	brne	.+2      	; 0x912a <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    9128:	e5 01       	movw	r28, r10
		brne .+2
    912a:	09 f4       	brne	.+2      	; 0x912e <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    912c:	8f 2d       	mov	r24, r15
		brne .+2
    912e:	09 f4       	brne	.+2      	; 0x9132 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    9130:	99 2e       	mov	r9, r25

		brne .+2
    9132:	09 f4       	brne	.+2      	; 0x9136 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    9134:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    9136:	09 f4       	brne	.+2      	; 0x913a <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    9138:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    913a:	d1 cf       	rjmp	.-94     	; 0x90de <next_tile_line>

0000913c <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    913c:	29 e0       	ldi	r18, 0x09	; 9
    913e:	2a 95       	dec	r18
    9140:	f1 f7       	brne	.-4      	; 0x913e <text_frame_end+0x2>
    9142:	00 00       	nop

		rcall hsync_pulse ;145
    9144:	89 d3       	rcall	.+1810   	; 0x9858 <hsync_pulse>
	
		clr r1
    9146:	11 24       	eor	r1, r1
		call RestoreBackground
    9148:	0e 94 00 59 	call	0xb200	; 0xb200 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    914c:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    9150:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    9152:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    9154:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    9156:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    915a:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    915c:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    915e:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    9162:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    9164:	e0 93 36 00 	sts	0x0036, r30

		ret
    9168:	08 95       	ret

0000916a <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    916a:	cf 93       	push	r28
		push YH
    916c:	df 93       	push	r29
		push r23
    916e:	7f 93       	push	r23
		push r22
    9170:	6f 93       	push	r22
		push r19
    9172:	3f 93       	push	r19
		push r13
    9174:	df 92       	push	r13
		push r12
    9176:	cf 92       	push	r12
		push r9
    9178:	9f 92       	push	r9
		push r7
    917a:	7f 92       	push	r7
		push r6
    917c:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    917e:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    9180:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    9182:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    9184:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    9186:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    9188:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    918a:	00 0d       	add	r16, r0
		adc r17,r1
    918c:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    918e:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    9190:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    9192:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    9194:	00 0d       	add	r16, r0
		adc r17,r1
    9196:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    9198:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    919a:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    919c:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    919e:	69 2d       	mov	r22, r9
		andi r22,0x7		
    91a0:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    91a2:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    91a4:	f8 94       	cli
		breq .+2
    91a6:	09 f0       	breq	.+2      	; 0x91aa <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    91a8:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    91aa:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    91ac:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    91ae:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    91b0:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    91b2:	02 0c       	add	r0, r2
	    adc r1,r3
    91b4:	13 1c       	adc	r1, r3
		movw ZL,r0
    91b6:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    91b8:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    91ba:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    91bc:	28 81       	ld	r18, Y
		subi YL,-8
    91be:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    91c0:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    91c2:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    91c4:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    91c6:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    91c8:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    91ca:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    91cc:	04 0e       	add	r0, r20
	    adc r1,r21
    91ce:	15 1e       	adc	r1, r21
		movw XL,r0
    91d0:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    91d2:	28 81       	ld	r18, Y
		subi YL,-8
    91d4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    91d6:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    91d8:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    91da:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    91dc:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    91de:	a1 01       	movw	r20, r2
		brtc .+2
    91e0:	0e f4       	brtc	.+2      	; 0x91e4 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    91e2:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    91e4:	04 0e       	add	r0, r20
	    adc r1,r21
    91e6:	15 1e       	adc	r1, r21
		movw ZL,r0
    91e8:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    91ea:	3f 01       	movw	r6, r30

000091ec <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    91ec:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    91ee:	a6 0f       	add	r26, r22
		adc XH,r0
    91f0:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    91f2:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    91f4:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    91f6:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    91f8:	22 c0       	rjmp	.+68     	; 0x923e <rom_fine_scroll>

000091fa <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    91fa:	00 c0       	rjmp	.+0      	; 0x91fc <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    91fc:	65 e0       	ldi	r22, 0x05	; 5
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    91fe:	79 e4       	ldi	r23, 0x49	; 73
		add r22,r0
    9200:	60 0d       	add	r22, r0
		adc r23,r1
    9202:	71 1d       	adc	r23, r1
		push r22
    9204:	6f 93       	push	r22
		push r23	
    9206:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    9208:	08 95       	ret

0000920a <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    920a:	0d 91       	ld	r16, X+
    920c:	c8 95       	lpm
    920e:	08 b9       	out	0x08, r16	; 8
    9210:	0d 91       	ld	r16, X+
    9212:	c8 95       	lpm
    9214:	08 b9       	out	0x08, r16	; 8
    9216:	0d 91       	ld	r16, X+
    9218:	c8 95       	lpm
    921a:	08 b9       	out	0x08, r16	; 8
    921c:	0d 91       	ld	r16, X+
    921e:	c8 95       	lpm
    9220:	08 b9       	out	0x08, r16	; 8
    9222:	0d 91       	ld	r16, X+
    9224:	c8 95       	lpm
    9226:	08 b9       	out	0x08, r16	; 8
    9228:	0d 91       	ld	r16, X+
    922a:	c8 95       	lpm
    922c:	08 b9       	out	0x08, r16	; 8
    922e:	0d 91       	ld	r16, X+
    9230:	c8 95       	lpm
    9232:	08 b9       	out	0x08, r16	; 8
    9234:	0d 91       	ld	r16, X+
    9236:	c8 95       	lpm
    9238:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    923a:	1e f5       	brtc	.+70     	; 0x9282 <romloop>
		rjmp ramloop
    923c:	40 c0       	rjmp	.+128    	; 0x92be <ramloop>

0000923e <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    923e:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    9240:	67 e2       	ldi	r22, 0x27	; 39
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    9242:	79 e4       	ldi	r23, 0x49	; 73
		add r22,r0
    9244:	60 0d       	add	r22, r0
		adc r23,r1
    9246:	71 1d       	adc	r23, r1
		push r22
    9248:	6f 93       	push	r22
		push r23	
    924a:	7f 93       	push	r23
		ret
    924c:	08 95       	ret

0000924e <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    924e:	05 91       	lpm	r16, Z+
    9250:	00 c0       	rjmp	.+0      	; 0x9252 <rom_fine_scroll_loop+0x4>
    9252:	08 b9       	out	0x08, r16	; 8
    9254:	05 91       	lpm	r16, Z+
    9256:	00 c0       	rjmp	.+0      	; 0x9258 <rom_fine_scroll_loop+0xa>
    9258:	08 b9       	out	0x08, r16	; 8
    925a:	05 91       	lpm	r16, Z+
    925c:	00 c0       	rjmp	.+0      	; 0x925e <rom_fine_scroll_loop+0x10>
    925e:	08 b9       	out	0x08, r16	; 8
    9260:	05 91       	lpm	r16, Z+
    9262:	00 c0       	rjmp	.+0      	; 0x9264 <rom_fine_scroll_loop+0x16>
    9264:	08 b9       	out	0x08, r16	; 8
    9266:	05 91       	lpm	r16, Z+
    9268:	00 c0       	rjmp	.+0      	; 0x926a <rom_fine_scroll_loop+0x1c>
    926a:	08 b9       	out	0x08, r16	; 8
    926c:	05 91       	lpm	r16, Z+
    926e:	00 c0       	rjmp	.+0      	; 0x9270 <rom_fine_scroll_loop+0x22>
    9270:	08 b9       	out	0x08, r16	; 8
    9272:	05 91       	lpm	r16, Z+
    9274:	00 c0       	rjmp	.+0      	; 0x9276 <rom_fine_scroll_loop+0x28>
    9276:	08 b9       	out	0x08, r16	; 8
    9278:	05 91       	lpm	r16, Z+
    927a:	00 c0       	rjmp	.+0      	; 0x927c <rom_fine_scroll_loop+0x2e>
    927c:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    927e:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    9280:	f6 f0       	brts	.+60     	; 0x92be <ramloop>

00009282 <romloop>:

	
	romloop:
	    lpm r16,Z+
    9282:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    9284:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    9286:	28 81       	ld	r18, Y

	    lpm r16,Z+
    9288:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    928a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    928c:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    928e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    9290:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    9292:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    9294:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    9296:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    9298:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    929a:	08 f4       	brcc	.+2      	; 0x929e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    929c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    929e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    92a0:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    92a2:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    92a4:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    92a6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    92a8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    92aa:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    92ac:	1a 95       	dec	r17
   
	    lpm r16,Z+
    92ae:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    92b0:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    92b2:	05 91       	lpm	r16, Z+

		breq end	
    92b4:	39 f1       	breq	.+78     	; 0x9304 <end>
	    movw ZL,r0   	;copy next tile adress
    92b6:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    92b8:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    92ba:	18 f7       	brcc	.-58     	; 0x9282 <romloop>
	
		rjmp .
    92bc:	00 c0       	rjmp	.+0      	; 0x92be <ramloop>

000092be <ramloop>:

	ramloop:

	    ld r16,Z+
    92be:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    92c0:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    92c2:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    92c4:	01 91       	ld	r16, Z+
		subi YL,-8   		
    92c6:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    92c8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    92ca:	23 9f       	mul	r18, r19

	    ld r16,Z+
    92cc:	01 91       	ld	r16, Z+
		nop
    92ce:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    92d0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    92d2:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    92d4:	00 c0       	rjmp	.+0      	; 0x92d6 <ramloop+0x18>
   
	    ld r16,Z+
    92d6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    92d8:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    92da:	08 f0       	brcs	.+2      	; 0x92de <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    92dc:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    92de:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    92e0:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    92e2:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    92e4:	15 1e       	adc	r1, r21
		rjmp .
    92e6:	00 c0       	rjmp	.+0      	; 0x92e8 <ramloop+0x2a>
    
		ld r16,Z+		
    92e8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    92ea:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    92ec:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    92ee:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    92f0:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    92f2:	78 b8       	out	0x08, r7	; 8
		nop
    92f4:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    92f6:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    92f8:	1a 95       	dec	r17
	    breq end
    92fa:	21 f0       	breq	.+8      	; 0x9304 <end>
	
		nop
    92fc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    92fe:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    9300:	00 f6       	brcc	.-128    	; 0x9282 <romloop>
		rjmp ramloop
    9302:	dd cf       	rjmp	.-70     	; 0x92be <ramloop>

00009304 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    9304:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    9306:	27 f5       	brid	.+72     	; 0x9350 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    9308:	30 f4       	brcc	.+12     	; 0x9316 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    930a:	f0 01       	movw	r30, r0

0000930c <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    930c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    930e:	08 b9       	out	0x08, r16	; 8
		dec r14
    9310:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    9312:	e1 f7       	brne	.-8      	; 0x930c <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    9314:	1f c0       	rjmp	.+62     	; 0x9354 <end_fine_scroll_ram>

00009316 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    9316:	f6 01       	movw	r30, r12
		nop
    9318:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    931a:	98 b8       	out	0x08, r9	; 8
		dec r14
    931c:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    931e:	c9 f0       	breq	.+50     	; 0x9352 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    9320:	05 91       	lpm	r16, Z+
    9322:	08 b9       	out	0x08, r16	; 8
    9324:	ea 94       	dec	r14
    9326:	a9 f0       	breq	.+42     	; 0x9352 <end_fine_scroll_rom>
    9328:	05 91       	lpm	r16, Z+
    932a:	08 b9       	out	0x08, r16	; 8
    932c:	ea 94       	dec	r14
    932e:	89 f0       	breq	.+34     	; 0x9352 <end_fine_scroll_rom>
    9330:	05 91       	lpm	r16, Z+
    9332:	08 b9       	out	0x08, r16	; 8
    9334:	ea 94       	dec	r14
    9336:	69 f0       	breq	.+26     	; 0x9352 <end_fine_scroll_rom>
    9338:	05 91       	lpm	r16, Z+
    933a:	08 b9       	out	0x08, r16	; 8
    933c:	ea 94       	dec	r14
    933e:	49 f0       	breq	.+18     	; 0x9352 <end_fine_scroll_rom>
    9340:	05 91       	lpm	r16, Z+
    9342:	08 b9       	out	0x08, r16	; 8
    9344:	ea 94       	dec	r14
    9346:	29 f0       	breq	.+10     	; 0x9352 <end_fine_scroll_rom>
    9348:	05 91       	lpm	r16, Z+
    934a:	08 b9       	out	0x08, r16	; 8
    934c:	ea 94       	dec	r14
    934e:	09 f0       	breq	.+2      	; 0x9352 <end_fine_scroll_rom>

00009350 <end_fine_scroll>:
	...

00009352 <end_fine_scroll_rom>:
	...

00009354 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    9354:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    9356:	08 b9       	out	0x08, r16	; 8

		pop r6
    9358:	6f 90       	pop	r6
		pop r7
    935a:	7f 90       	pop	r7
		pop r9
    935c:	9f 90       	pop	r9
		pop r12
    935e:	cf 90       	pop	r12
		pop r13
    9360:	df 90       	pop	r13
		pop r19
    9362:	3f 91       	pop	r19
		pop r22
    9364:	6f 91       	pop	r22
		pop r23
    9366:	7f 91       	pop	r23
		pop YH
    9368:	df 91       	pop	r29
		pop YL
    936a:	cf 91       	pop	r28

		ret
    936c:	08 95       	ret

0000936e <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    936e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    9370:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    9374:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    9378:	82 9f       	mul	r24, r18
	add ZL,r0
    937a:	e0 0d       	add	r30, r0
	adc ZH,r1
    937c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    937e:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    9380:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    9382:	62 9f       	mul	r22, r18
	add XL,r0
    9384:	a0 0d       	add	r26, r0
	adc XH,r1
    9386:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    9388:	15 90       	lpm	r1, Z+
    938a:	1d 92       	st	X+, r1
    938c:	15 90       	lpm	r1, Z+
    938e:	1d 92       	st	X+, r1
    9390:	15 90       	lpm	r1, Z+
    9392:	1d 92       	st	X+, r1
    9394:	15 90       	lpm	r1, Z+
    9396:	1d 92       	st	X+, r1
    9398:	15 90       	lpm	r1, Z+
    939a:	1d 92       	st	X+, r1
    939c:	15 90       	lpm	r1, Z+
    939e:	1d 92       	st	X+, r1
    93a0:	15 90       	lpm	r1, Z+
    93a2:	1d 92       	st	X+, r1
    93a4:	15 90       	lpm	r1, Z+
    93a6:	1d 92       	st	X+, r1
    93a8:	15 90       	lpm	r1, Z+
    93aa:	1d 92       	st	X+, r1
    93ac:	15 90       	lpm	r1, Z+
    93ae:	1d 92       	st	X+, r1
    93b0:	15 90       	lpm	r1, Z+
    93b2:	1d 92       	st	X+, r1
    93b4:	15 90       	lpm	r1, Z+
    93b6:	1d 92       	st	X+, r1
    93b8:	15 90       	lpm	r1, Z+
    93ba:	1d 92       	st	X+, r1
    93bc:	15 90       	lpm	r1, Z+
    93be:	1d 92       	st	X+, r1
    93c0:	15 90       	lpm	r1, Z+
    93c2:	1d 92       	st	X+, r1
    93c4:	15 90       	lpm	r1, Z+
    93c6:	1d 92       	st	X+, r1
    93c8:	15 90       	lpm	r1, Z+
    93ca:	1d 92       	st	X+, r1
    93cc:	15 90       	lpm	r1, Z+
    93ce:	1d 92       	st	X+, r1
    93d0:	15 90       	lpm	r1, Z+
    93d2:	1d 92       	st	X+, r1
    93d4:	15 90       	lpm	r1, Z+
    93d6:	1d 92       	st	X+, r1
    93d8:	15 90       	lpm	r1, Z+
    93da:	1d 92       	st	X+, r1
    93dc:	15 90       	lpm	r1, Z+
    93de:	1d 92       	st	X+, r1
    93e0:	15 90       	lpm	r1, Z+
    93e2:	1d 92       	st	X+, r1
    93e4:	15 90       	lpm	r1, Z+
    93e6:	1d 92       	st	X+, r1
    93e8:	15 90       	lpm	r1, Z+
    93ea:	1d 92       	st	X+, r1
    93ec:	15 90       	lpm	r1, Z+
    93ee:	1d 92       	st	X+, r1
    93f0:	15 90       	lpm	r1, Z+
    93f2:	1d 92       	st	X+, r1
    93f4:	15 90       	lpm	r1, Z+
    93f6:	1d 92       	st	X+, r1
    93f8:	15 90       	lpm	r1, Z+
    93fa:	1d 92       	st	X+, r1
    93fc:	15 90       	lpm	r1, Z+
    93fe:	1d 92       	st	X+, r1
    9400:	15 90       	lpm	r1, Z+
    9402:	1d 92       	st	X+, r1
    9404:	15 90       	lpm	r1, Z+
    9406:	1d 92       	st	X+, r1
    9408:	15 90       	lpm	r1, Z+
    940a:	1d 92       	st	X+, r1
    940c:	15 90       	lpm	r1, Z+
    940e:	1d 92       	st	X+, r1
    9410:	15 90       	lpm	r1, Z+
    9412:	1d 92       	st	X+, r1
    9414:	15 90       	lpm	r1, Z+
    9416:	1d 92       	st	X+, r1
    9418:	15 90       	lpm	r1, Z+
    941a:	1d 92       	st	X+, r1
    941c:	15 90       	lpm	r1, Z+
    941e:	1d 92       	st	X+, r1
    9420:	15 90       	lpm	r1, Z+
    9422:	1d 92       	st	X+, r1
    9424:	15 90       	lpm	r1, Z+
    9426:	1d 92       	st	X+, r1
    9428:	15 90       	lpm	r1, Z+
    942a:	1d 92       	st	X+, r1
    942c:	15 90       	lpm	r1, Z+
    942e:	1d 92       	st	X+, r1
    9430:	15 90       	lpm	r1, Z+
    9432:	1d 92       	st	X+, r1
    9434:	15 90       	lpm	r1, Z+
    9436:	1d 92       	st	X+, r1
    9438:	15 90       	lpm	r1, Z+
    943a:	1d 92       	st	X+, r1
    943c:	15 90       	lpm	r1, Z+
    943e:	1d 92       	st	X+, r1
    9440:	15 90       	lpm	r1, Z+
    9442:	1d 92       	st	X+, r1
    9444:	15 90       	lpm	r1, Z+
    9446:	1d 92       	st	X+, r1
    9448:	15 90       	lpm	r1, Z+
    944a:	1d 92       	st	X+, r1
    944c:	15 90       	lpm	r1, Z+
    944e:	1d 92       	st	X+, r1
    9450:	15 90       	lpm	r1, Z+
    9452:	1d 92       	st	X+, r1
    9454:	15 90       	lpm	r1, Z+
    9456:	1d 92       	st	X+, r1
    9458:	15 90       	lpm	r1, Z+
    945a:	1d 92       	st	X+, r1
    945c:	15 90       	lpm	r1, Z+
    945e:	1d 92       	st	X+, r1
    9460:	15 90       	lpm	r1, Z+
    9462:	1d 92       	st	X+, r1
    9464:	15 90       	lpm	r1, Z+
    9466:	1d 92       	st	X+, r1
    9468:	15 90       	lpm	r1, Z+
    946a:	1d 92       	st	X+, r1
    946c:	15 90       	lpm	r1, Z+
    946e:	1d 92       	st	X+, r1
    9470:	15 90       	lpm	r1, Z+
    9472:	1d 92       	st	X+, r1
    9474:	15 90       	lpm	r1, Z+
    9476:	1d 92       	st	X+, r1
    9478:	15 90       	lpm	r1, Z+
    947a:	1d 92       	st	X+, r1
    947c:	15 90       	lpm	r1, Z+
    947e:	1d 92       	st	X+, r1
    9480:	15 90       	lpm	r1, Z+
    9482:	1d 92       	st	X+, r1
    9484:	15 90       	lpm	r1, Z+
    9486:	1d 92       	st	X+, r1
	clr r1
    9488:	11 24       	eor	r1, r1
	ret
    948a:	08 95       	ret

0000948c <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    948c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    948e:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    9490:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    9492:	82 9f       	mul	r24, r18
	add ZL,r0
    9494:	e0 0d       	add	r30, r0
	adc ZH,r1
    9496:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    9498:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    949a:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    949c:	62 9f       	mul	r22, r18
	add XL,r0
    949e:	a0 0d       	add	r26, r0
	adc XH,r1
    94a0:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    94a2:	11 90       	ld	r1, Z+
    94a4:	1d 92       	st	X+, r1
    94a6:	11 90       	ld	r1, Z+
    94a8:	1d 92       	st	X+, r1
    94aa:	11 90       	ld	r1, Z+
    94ac:	1d 92       	st	X+, r1
    94ae:	11 90       	ld	r1, Z+
    94b0:	1d 92       	st	X+, r1
    94b2:	11 90       	ld	r1, Z+
    94b4:	1d 92       	st	X+, r1
    94b6:	11 90       	ld	r1, Z+
    94b8:	1d 92       	st	X+, r1
    94ba:	11 90       	ld	r1, Z+
    94bc:	1d 92       	st	X+, r1
    94be:	11 90       	ld	r1, Z+
    94c0:	1d 92       	st	X+, r1
    94c2:	11 90       	ld	r1, Z+
    94c4:	1d 92       	st	X+, r1
    94c6:	11 90       	ld	r1, Z+
    94c8:	1d 92       	st	X+, r1
    94ca:	11 90       	ld	r1, Z+
    94cc:	1d 92       	st	X+, r1
    94ce:	11 90       	ld	r1, Z+
    94d0:	1d 92       	st	X+, r1
    94d2:	11 90       	ld	r1, Z+
    94d4:	1d 92       	st	X+, r1
    94d6:	11 90       	ld	r1, Z+
    94d8:	1d 92       	st	X+, r1
    94da:	11 90       	ld	r1, Z+
    94dc:	1d 92       	st	X+, r1
    94de:	11 90       	ld	r1, Z+
    94e0:	1d 92       	st	X+, r1
    94e2:	11 90       	ld	r1, Z+
    94e4:	1d 92       	st	X+, r1
    94e6:	11 90       	ld	r1, Z+
    94e8:	1d 92       	st	X+, r1
    94ea:	11 90       	ld	r1, Z+
    94ec:	1d 92       	st	X+, r1
    94ee:	11 90       	ld	r1, Z+
    94f0:	1d 92       	st	X+, r1
    94f2:	11 90       	ld	r1, Z+
    94f4:	1d 92       	st	X+, r1
    94f6:	11 90       	ld	r1, Z+
    94f8:	1d 92       	st	X+, r1
    94fa:	11 90       	ld	r1, Z+
    94fc:	1d 92       	st	X+, r1
    94fe:	11 90       	ld	r1, Z+
    9500:	1d 92       	st	X+, r1
    9502:	11 90       	ld	r1, Z+
    9504:	1d 92       	st	X+, r1
    9506:	11 90       	ld	r1, Z+
    9508:	1d 92       	st	X+, r1
    950a:	11 90       	ld	r1, Z+
    950c:	1d 92       	st	X+, r1
    950e:	11 90       	ld	r1, Z+
    9510:	1d 92       	st	X+, r1
    9512:	11 90       	ld	r1, Z+
    9514:	1d 92       	st	X+, r1
    9516:	11 90       	ld	r1, Z+
    9518:	1d 92       	st	X+, r1
    951a:	11 90       	ld	r1, Z+
    951c:	1d 92       	st	X+, r1
    951e:	11 90       	ld	r1, Z+
    9520:	1d 92       	st	X+, r1
    9522:	11 90       	ld	r1, Z+
    9524:	1d 92       	st	X+, r1
    9526:	11 90       	ld	r1, Z+
    9528:	1d 92       	st	X+, r1
    952a:	11 90       	ld	r1, Z+
    952c:	1d 92       	st	X+, r1
    952e:	11 90       	ld	r1, Z+
    9530:	1d 92       	st	X+, r1
    9532:	11 90       	ld	r1, Z+
    9534:	1d 92       	st	X+, r1
    9536:	11 90       	ld	r1, Z+
    9538:	1d 92       	st	X+, r1
    953a:	11 90       	ld	r1, Z+
    953c:	1d 92       	st	X+, r1
    953e:	11 90       	ld	r1, Z+
    9540:	1d 92       	st	X+, r1
    9542:	11 90       	ld	r1, Z+
    9544:	1d 92       	st	X+, r1
    9546:	11 90       	ld	r1, Z+
    9548:	1d 92       	st	X+, r1
    954a:	11 90       	ld	r1, Z+
    954c:	1d 92       	st	X+, r1
    954e:	11 90       	ld	r1, Z+
    9550:	1d 92       	st	X+, r1
    9552:	11 90       	ld	r1, Z+
    9554:	1d 92       	st	X+, r1
    9556:	11 90       	ld	r1, Z+
    9558:	1d 92       	st	X+, r1
    955a:	11 90       	ld	r1, Z+
    955c:	1d 92       	st	X+, r1
    955e:	11 90       	ld	r1, Z+
    9560:	1d 92       	st	X+, r1
    9562:	11 90       	ld	r1, Z+
    9564:	1d 92       	st	X+, r1
    9566:	11 90       	ld	r1, Z+
    9568:	1d 92       	st	X+, r1
    956a:	11 90       	ld	r1, Z+
    956c:	1d 92       	st	X+, r1
    956e:	11 90       	ld	r1, Z+
    9570:	1d 92       	st	X+, r1
    9572:	11 90       	ld	r1, Z+
    9574:	1d 92       	st	X+, r1
    9576:	11 90       	ld	r1, Z+
    9578:	1d 92       	st	X+, r1
    957a:	11 90       	ld	r1, Z+
    957c:	1d 92       	st	X+, r1
    957e:	11 90       	ld	r1, Z+
    9580:	1d 92       	st	X+, r1
    9582:	11 90       	ld	r1, Z+
    9584:	1d 92       	st	X+, r1
    9586:	11 90       	ld	r1, Z+
    9588:	1d 92       	st	X+, r1
    958a:	11 90       	ld	r1, Z+
    958c:	1d 92       	st	X+, r1
    958e:	11 90       	ld	r1, Z+
    9590:	1d 92       	st	X+, r1
    9592:	11 90       	ld	r1, Z+
    9594:	1d 92       	st	X+, r1
    9596:	11 90       	ld	r1, Z+
    9598:	1d 92       	st	X+, r1
    959a:	11 90       	ld	r1, Z+
    959c:	1d 92       	st	X+, r1
    959e:	11 90       	ld	r1, Z+
    95a0:	1d 92       	st	X+, r1
	clr r1
    95a2:	11 24       	eor	r1, r1
	ret
    95a4:	08 95       	ret

000095a6 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    95a6:	0f 93       	push	r16
	push r17
    95a8:	1f 93       	push	r17
	push YL
    95aa:	cf 93       	push	r28
	push YH
    95ac:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    95ae:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    95b0:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    95b2:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    95b4:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    95b6:	e0 0d       	add	r30, r0
	adc ZH,r1
    95b8:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    95ba:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    95bc:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    95be:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    95c0:	8e 9f       	mul	r24, r30
	movw r26,r0
    95c2:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    95c4:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    95c6:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    95c8:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    95ca:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    95cc:	00 24       	eor	r0, r0
	add YL,r1
    95ce:	c1 0d       	add	r28, r1
	adc YH,r0		
    95d0:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    95d2:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    95d4:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    95d6:	ea 0f       	add	r30, r26
	adc ZH,r27
    95d8:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    95da:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    95dc:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    95de:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    95e0:	69 9f       	mul	r22, r25
	add XL,r0
    95e2:	a0 0d       	add	r26, r0
	adc XH,r1
    95e4:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    95e6:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    95e8:	dd 27       	eor	r29, r29

	cpi r20,0	
    95ea:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    95ec:	51 f4       	brne	.+20     	; 0x9602 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    95ee:	a2 0f       	add	r26, r18
	adc XH,r1
    95f0:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    95f2:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    95f4:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    95f6:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    95f8:	11 c0       	rjmp	.+34     	; 0x961c <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    95fa:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    95fc:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    95fe:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    9600:	0d c0       	rjmp	.+26     	; 0x961c <x_check_end>

00009602 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    9602:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    9604:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    9606:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    9608:	04 c0       	rjmp	.+8      	; 0x9612 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    960a:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    960c:	e8 0f       	add	r30, r24
	adc ZH,r1	
    960e:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    9610:	05 c0       	rjmp	.+10     	; 0x961c <x_check_end>

00009612 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    9612:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    9614:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    9616:	e2 0f       	add	r30, r18
	adc ZH,r1
    9618:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    961a:	31 97       	sbiw	r30, 0x01	; 1

0000961c <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    961c:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    961e:	51 f4       	brne	.+20     	; 0x9634 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    9620:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    9622:	93 9f       	mul	r25, r19
	add XL,r0
    9624:	a0 0d       	add	r26, r0
	adc XH,r1
    9626:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    9628:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    962a:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    962c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    962e:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    9630:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    9632:	0a c0       	rjmp	.+20     	; 0x9648 <y_check_end>

00009634 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    9634:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    9636:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    9638:	63 2f       	mov	r22, r19
	dec r22
    963a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    963c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    963e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    9640:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    9642:	56 9f       	mul	r21, r22
	add ZL,r0
    9644:	e0 0d       	add	r30, r0
	adc ZH,r1	
    9646:	f1 1d       	adc	r31, r1

00009648 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    9648:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    964a:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    964c:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    964e:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    9650:	00 ff       	sbrs	r16, 0
	clr r23
    9652:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    9654:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    9656:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    9658:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    965a:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    965c:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    965e:	59 1b       	sub	r21, r25

00009660 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    9660:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    9662:	48 1b       	sub	r20, r24

00009664 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    9664:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    9666:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    9668:	2c 93       	st	X, r18
	adiw XL,1
    966a:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    966c:	e6 0f       	add	r30, r22
	adc ZH,r23
    966e:	f7 1f       	adc	r31, r23
	dec r20
    9670:	4a 95       	dec	r20
	brne x_loop
    9672:	c1 f7       	brne	.-16     	; 0x9664 <x_loop>

	add ZL,YL		;src+=srcXdiff
    9674:	ec 0f       	add	r30, r28
	adc ZH,YH
    9676:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    9678:	a8 0f       	add	r26, r24
	adc XH,r1
    967a:	b1 1d       	adc	r27, r1
	dec r21
    967c:	5a 95       	dec	r21
	brne y_loop
    967e:	81 f7       	brne	.-32     	; 0x9660 <y_loop>


	pop YH
    9680:	df 91       	pop	r29
	pop YL
    9682:	cf 91       	pop	r28
	pop r17
    9684:	1f 91       	pop	r17
	pop r16
    9686:	0f 91       	pop	r16
	ret
    9688:	08 95       	ret

0000968a <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    968a:	0f 92       	push	r0
	push r1
    968c:	1f 92       	push	r1
	push ZL;2
    968e:	ef 93       	push	r30
	push ZH;2
    9690:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    9692:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    9694:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    9696:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    969a:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    969c:	f1 e0       	ldi	r31, 0x01	; 1

0000969e <latency_loop>:
latency_loop:
	cp ZL,ZH
    969e:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    96a0:	00 f0       	brcs	.+0      	; 0x96a2 <latency_loop+0x4>
	inc ZH
    96a2:	f3 95       	inc	r31
	cpi ZH,10
    96a4:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    96a6:	d8 f3       	brcs	.-10     	; 0x969e <latency_loop>
	jmp .
    96a8:	0c 94 56 4b 	jmp	0x96ac	; 0x96ac <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    96ac:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    96b0:	ea 95       	dec	r30
	sts sync_pulse,ZL
    96b2:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    96b6:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    96ba:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    96bc:	57 c0       	rjmp	.+174    	; 0x976c <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    96be:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    96c0:	98 f0       	brcs	.+38     	; 0x96e8 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    96c2:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    96c4:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    96c8:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    96ca:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    96ce:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    96d0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    96d2:	26 f4       	brtc	.+8      	; 0x96dc <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    96d4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    96d6:	0e 94 3d 4c 	call	0x987a	; 0x987a <update_sound>
	rjmp sync_end
    96da:	b7 c0       	rjmp	.+366    	; 0x984a <sync_end>

000096dc <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    96dc:	e5 e1       	ldi	r30, 0x15	; 21
    96de:	ea 95       	dec	r30
    96e0:	f1 f7       	brne	.-4      	; 0x96de <sync_pre_eq_no_sound_update+0x2>
    96e2:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    96e4:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    96e6:	b1 c0       	rjmp	.+354    	; 0x984a <sync_end>

000096e8 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    96e8:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    96ea:	38 f1       	brcs	.+78     	; 0x973a <sync_post_eq>

	rjmp .
    96ec:	00 c0       	rjmp	.+0      	; 0x96ee <sync_eq+0x6>
	rjmp .
    96ee:	00 c0       	rjmp	.+0      	; 0x96f0 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    96f0:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    96f2:	e0 fb       	bst	r30, 0
	ldi ZL,4
    96f4:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    96f6:	16 f4       	brtc	.+4      	; 0x96fc <sync_eq_skip>
	
	call update_sound
    96f8:	0e 94 3d 4c 	call	0x987a	; 0x987a <update_sound>

000096fc <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    96fc:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    96fe:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    9702:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    9704:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    9708:	a0 c0       	rjmp	.+320    	; 0x984a <sync_end>

0000970a <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    970a:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    970c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    970e:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    9710:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    9714:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    9716:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    9718:	00 f0       	brcs	.+0      	; 0x971a <__vector_14+0x10>

	cpi ZL,2
    971a:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    971c:	00 f0       	brcs	.+0      	; 0x971e <__vector_14+0x14>

	cpi ZL,3
    971e:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    9720:	00 f0       	brcs	.+0      	; 0x9722 <__vector_14+0x18>

	cpi ZL,4
    9722:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    9724:	00 f0       	brcs	.+0      	; 0x9726 <__vector_14+0x1c>

	cpi ZL,5
    9726:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    9728:	00 f0       	brcs	.+0      	; 0x972a <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    972a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    972c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    972e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    9732:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    9734:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    9736:	ef 91       	pop	r30
	reti
    9738:	18 95       	reti

0000973a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    973a:	00 c0       	rjmp	.+0      	; 0x973c <sync_post_eq+0x2>

	bst ZL,0
    973c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    973e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    9740:	26 f4       	brtc	.+8      	; 0x974a <sync_post_eq_no_sound_update>
	ldi ZL,1	
    9742:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    9744:	0e 94 3d 4c 	call	0x987a	; 0x987a <update_sound>
	rjmp sync_pre_eq_cont
    9748:	05 c0       	rjmp	.+10     	; 0x9754 <sync_pre_eq_cont>

0000974a <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    974a:	e5 e1       	ldi	r30, 0x15	; 21
    974c:	ea 95       	dec	r30
    974e:	f1 f7       	brne	.-4      	; 0x974c <sync_post_eq_no_sound_update+0x2>
    9750:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    9752:	28 9a       	sbi	0x05, 0	; 5

00009754 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    9754:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    9758:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    975a:	09 f0       	breq	.+2      	; 0x975e <sync_pre_eq_cont+0xa>
	rjmp sync_end
    975c:	76 c0       	rjmp	.+236    	; 0x984a <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    975e:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    9760:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    9764:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    9766:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    976a:	6f c0       	rjmp	.+222    	; 0x984a <sync_end>

0000976c <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    976c:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    976e:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    9772:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    9774:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    9778:	00 c0       	rjmp	.+0      	; 0x977a <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    977a:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    977c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    977e:	00 c0       	rjmp	.+0      	; 0x9780 <sync_hsync+0x14>
	call update_sound
    9780:	0e 94 3d 4c 	call	0x987a	; 0x987a <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    9784:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    9786:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    978a:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    978c:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    9790:	ef 17       	cp	r30, r31
	brsh no_render
    9792:	d0 f4       	brcc	.+52     	; 0x97c8 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    9794:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    9796:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    979a:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    979c:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    97a0:	f0 19       	sub	r31, r0
	cp ZL,ZH
    97a2:	ef 17       	cp	r30, r31
	brlo no_render
    97a4:	88 f0       	brcs	.+34     	; 0x97c8 <no_render>

	;push r1-r29
	ldi ZL,29
    97a6:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    97a8:	ff 27       	eor	r31, r31

000097aa <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    97aa:	00 80       	ld	r0, Z
	push r0
    97ac:	0f 92       	push	r0
	dec ZL
    97ae:	ea 95       	dec	r30
	brne push_loop	
    97b0:	e1 f7       	brne	.-8      	; 0x97aa <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    97b2:	06 e0       	ldi	r16, 0x06	; 6
    97b4:	0a 95       	dec	r16
    97b6:	f1 f7       	brne	.-4      	; 0x97b4 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    97b8:	0e 94 03 48 	call	0x9006	; 0x9006 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    97bc:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    97be:	ff 27       	eor	r31, r31

000097c0 <pop_loop>:
pop_loop:
	pop r0
    97c0:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    97c2:	01 92       	st	Z+, r0
	cpi ZL,30
    97c4:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    97c6:	e0 f3       	brcs	.-8      	; 0x97c0 <pop_loop>

000097c8 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    97c8:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    97cc:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    97ce:	09 f0       	breq	.+2      	; 0x97d2 <no_render+0xa>
	rjmp sync_end
    97d0:	3c c0       	rjmp	.+120    	; 0x984a <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    97d2:	2f 93       	push	r18
	push r19
    97d4:	3f 93       	push	r19
	push r20
    97d6:	4f 93       	push	r20
	push r21
    97d8:	5f 93       	push	r21
	push r22
    97da:	6f 93       	push	r22
	push r23
    97dc:	7f 93       	push	r23
	push r24
    97de:	8f 93       	push	r24
	push r25
    97e0:	9f 93       	push	r25
	push r26
    97e2:	af 93       	push	r26
	push r27
    97e4:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    97e6:	78 94       	sei
	clr r1
    97e8:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    97ea:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    97ec:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    97f0:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    97f2:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    97f6:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    97fa:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    97fe:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    9800:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    9804:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    9808:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    980c:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    9810:	e1 15       	cp	r30, r1
	cpc ZH,r1
    9812:	f1 05       	cpc	r31, r1
	breq .+2 
    9814:	09 f0       	breq	.+2      	; 0x9818 <no_render+0x50>
	icall
    9816:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    9818:	0e 94 de 4d 	call	0x9bbc	; 0x9bbc <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    981c:	0e 94 5d 5b 	call	0xb6ba	; 0xb6ba <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    9820:	0e 94 37 4c 	call	0x986e	; 0x986e <process_music>
	clr r1
    9824:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    9826:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    982a:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    982e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    9830:	f1 05       	cpc	r31, r1
	breq .+2 
    9832:	09 f0       	breq	.+2      	; 0x9836 <no_render+0x6e>
	icall
    9834:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    9836:	bf 91       	pop	r27
	pop r26
    9838:	af 91       	pop	r26
	pop r25
    983a:	9f 91       	pop	r25
	pop r24
    983c:	8f 91       	pop	r24
	pop r23
    983e:	7f 91       	pop	r23
	pop r22
    9840:	6f 91       	pop	r22
	pop r21
    9842:	5f 91       	pop	r21
	pop r20
    9844:	4f 91       	pop	r20
	pop r19
    9846:	3f 91       	pop	r19
	pop r18
    9848:	2f 91       	pop	r18

0000984a <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    984a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    984c:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    984e:	ff 91       	pop	r31
	pop ZL
    9850:	ef 91       	pop	r30
	pop r1
    9852:	1f 90       	pop	r1
	pop r0
    9854:	0f 90       	pop	r0
	reti
    9856:	18 95       	reti

00009858 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    9858:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    985a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    985c:	00 c0       	rjmp	.+0      	; 0x985e <hsync_pulse+0x6>
	call update_sound
    985e:	0e 94 3d 4c 	call	0x987a	; 0x987a <update_sound>

	lds ZL,sync_pulse
    9862:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    9866:	ea 95       	dec	r30
	sts sync_pulse,ZL
    9868:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    986c:	08 95       	ret

0000986e <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    986e:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    9872:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    9874:	0e 94 31 50 	call	0xa062	; 0xa062 <ProcessMusic>
#endif

	ret
    9878:	08 95       	ret

0000987a <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    987a:	0f 93       	push	r16
	push r17
    987c:	1f 93       	push	r17
	push r18
    987e:	2f 93       	push	r18
	push r28
    9880:	cf 93       	push	r28
	push r29
    9882:	df 93       	push	r29

	mov r18,ZL
    9884:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    9886:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    988a:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    988e:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    9890:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    9894:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    9898:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    989c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    989e:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    98a0:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    98a4:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    98a8:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    98ac:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    98ae:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    98b0:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    98b2:	d0 2d       	mov	r29, r0
	nop
    98b4:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    98b6:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    98ba:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    98be:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    98c0:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    98c4:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    98c8:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    98cc:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    98ce:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    98d0:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    98d4:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    98d8:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    98dc:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    98de:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    98e0:	20 ff       	sbrs	r18, 0
	rjmp .
    98e2:	00 c0       	rjmp	.+0      	; 0x98e4 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    98e4:	01 03       	mulsu	r16, r17
	clr r0
    98e6:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    98e8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    98ea:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    98ec:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    98ee:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    98f2:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    98f6:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    98f8:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    98fc:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    9900:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    9904:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    9906:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    9908:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    990c:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    9910:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    9914:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    9916:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    9918:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    991a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    991c:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    9920:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    9924:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    9928:	ea 95       	dec	r30
	brpl ch4_no_shift	
    992a:	92 f4       	brpl	.+36     	; 0x9950 <ch4_no_shift>

	lds ZH,tr4_params
    992c:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    9930:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    9932:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    9934:	00 2e       	mov	r0, r16
	lsr r0
    9936:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    9938:	00 26       	eor	r0, r16
	bst r0,0
    993a:	00 fa       	bst	r0, 0
	lsr r17
    993c:	16 95       	lsr	r17
	ror r16
    993e:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    9940:	16 f9       	bld	r17, 6
	sbrs ZH,0
    9942:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    9944:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    9946:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    994a:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    994e:	03 c0       	rjmp	.+6      	; 0x9956 <ch4_end>

00009950 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    9950:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    9952:	1a 95       	dec	r17
	brne .-4
    9954:	f1 f7       	brne	.-4      	; 0x9952 <ch4_no_shift+0x2>

00009956 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    9956:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    995a:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    995c:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    995e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    9960:	21 ff       	sbrs	r18, 1
	rjmp .
    9962:	00 c0       	rjmp	.+0      	; 0x9964 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    9964:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    9966:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    9968:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    996c:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    996e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    9970:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    9972:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    9974:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    9978:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    997c:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    997e:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    9982:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    9986:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    998a:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    998c:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    9990:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    9992:	f0 1f       	adc	r31, r16

	movw r16,ZL
    9994:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    9996:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    999a:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    999e:	00 19       	sub	r16, r0
	sbc r17,r1
    99a0:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    99a2:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    99a6:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    99aa:	e0 15       	cp	r30, r0
	cpc ZH,r1
    99ac:	f1 05       	cpc	r31, r1
	brlo .+2
    99ae:	08 f0       	brcs	.+2      	; 0x99b2 <ch4_end+0x5c>
	movw ZL,r16
    99b0:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    99b2:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    99b6:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    99ba:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    99bc:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    99c0:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    99c2:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    99c4:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    99c6:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    99c8:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    99ca:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    99cc:	d0 05       	cpc	r29, r0
	brlt .+2
    99ce:	0c f0       	brlt	.+2      	; 0x99d2 <ch4_end+0x7c>
	ldi r28,127
    99d0:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    99d2:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    99d4:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    99d6:	d0 05       	cpc	r29, r0
	brge .+2
    99d8:	0c f4       	brge	.+2      	; 0x99dc <ch4_end+0x86>
	ldi r28,-128
    99da:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    99dc:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    99de:	c0 93 b3 00 	sts	0x00B3, r28

000099e2 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    99e2:	df 91       	pop	r29
	pop r28
    99e4:	cf 91       	pop	r28
	pop r18
    99e6:	2f 91       	pop	r18
	pop r17
    99e8:	1f 91       	pop	r17
	pop r16
    99ea:	0f 91       	pop	r16
	
	ret
    99ec:	08 95       	ret

000099ee <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    99ee:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    99f2:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    99f6:	08 95       	ret

000099f8 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    99f8:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    99fa:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    99fc:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    99fe:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    9a00:	6c e1       	ldi	r22, 0x1C	; 28

00009a02 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    9a02:	6d 93       	st	X+, r22
	sbiw r30,1
    9a04:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    9a06:	e9 f7       	brne	.-6      	; 0x9a02 <fill_vram_loop>

	clr r1
    9a08:	11 24       	eor	r1, r1

	ret
    9a0a:	08 95       	ret

00009a0c <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    9a0c:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    9a10:	45 0f       	add	r20, r21
	rjmp SetTile	
    9a12:	00 c0       	rjmp	.+0      	; 0x9a14 <SetTile>

00009a14 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    9a14:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    9a16:	76 2f       	mov	r23, r22
	lsr r22
    9a18:	66 95       	lsr	r22
	lsr r22
    9a1a:	66 95       	lsr	r22
	lsr r22			;y>>3
    9a1c:	66 95       	lsr	r22
	ldi r18,8		
    9a1e:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    9a20:	82 9f       	mul	r24, r18
	movw XL,r0
    9a22:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    9a24:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    9a26:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    9a28:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    9a2a:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    9a2c:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    9a2e:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    9a30:	4c 93       	st	X, r20

	clr r1
    9a32:	11 24       	eor	r1, r1

	ret
    9a34:	08 95       	ret

00009a36 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    9a36:	80 93 98 0c 	sts	0x0C98, r24
	ret
    9a3a:	08 95       	ret

00009a3c <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    9a3c:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    9a40:	90 93 97 0c 	sts	0x0C97, r25
	ret
    9a44:	08 95       	ret

00009a46 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    9a46:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    9a4a:	81 70       	andi	r24, 0x01	; 1
	ret
    9a4c:	08 95       	ret

00009a4e <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    9a4e:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    9a52:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    9a54:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    9a58:	08 95       	ret

00009a5a <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    9a5a:	88 23       	and	r24, r24
	brne rj_p2
    9a5c:	29 f4       	brne	.+10     	; 0x9a68 <rj_p2>
		
	lds r24,joypad1_status_lo
    9a5e:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    9a62:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    9a66:	08 95       	ret

00009a68 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    9a68:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    9a6c:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    9a70:	08 95       	ret

00009a72 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    9a72:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    9a74:	7a 95       	dec	r23
	brne .-4 ;~1 us
    9a76:	f1 f7       	brne	.-4      	; 0x9a74 <WaitUs+0x2>
	nop
    9a78:	00 00       	nop
	sbiw r24,1
    9a7a:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    9a7c:	d1 f7       	brne	.-12     	; 0x9a72 <WaitUs>

	ret
    9a7e:	08 95       	ret

00009a80 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9a80:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    9a82:	fe cf       	rjmp	.-4      	; 0x9a80 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    9a84:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    9a86:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    9a88:	60 bd       	out	0x20, r22	; 32
   cli
    9a8a:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    9a8c:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    9a8e:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    9a90:	78 94       	sei
   ret
    9a92:	08 95       	ret

00009a94 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9a94:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    9a96:	fe cf       	rjmp	.-4      	; 0x9a94 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    9a98:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    9a9a:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    9a9c:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    9a9e:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    9aa0:	80 b5       	in	r24, 0x20	; 32
   sei
    9aa2:	78 94       	sei
   ret
    9aa4:	08 95       	ret

00009aa6 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    9aa6:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    9aa8:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    9aac:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    9ab0:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    9ab4:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    9ab8:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    9abc:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    9ac0:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    9ac4:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    9ac8:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    9acc:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    9ace:	80 93 81 00 	sts	0x0081, r24

		cli
    9ad2:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    9ad4:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    9ad6:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    9ada:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    9adc:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    9ae0:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    9ae2:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    9ae6:	90 93 60 00 	sts	0x0060, r25
	
		sei
    9aea:	78 94       	sei

00009aec <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    9aec:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    9af0:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    9af2:	e0 f3       	brcs	.-8      	; 0x9aec <wait>

		ret
    9af4:	08 95       	ret

00009af6 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    9af6:	0f 93       	push	r16
		push r17
    9af8:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    9afa:	0f b7       	in	r16, 0x3f	; 63
		push r16
    9afc:	0f 93       	push	r16

		lds r16,sync_pulse
    9afe:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    9b02:	03 95       	inc	r16
		sts sync_pulse,r16
    9b04:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    9b08:	00 fd       	sbrc	r16, 0
		rjmp 1f
    9b0a:	08 c0       	rjmp	.+16     	; 0x9b1c <__vector_8+0x26>
		lds r17,random_value
    9b0c:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    9b10:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    9b14:	10 27       	eor	r17, r16
		sts random_value,r17
    9b16:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    9b1a:	07 c0       	rjmp	.+14     	; 0x9b2a <__vector_8+0x34>
	1:
		lds r17,random_value+1
    9b1c:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    9b20:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    9b24:	10 27       	eor	r17, r16
		sts random_value+1,r17
    9b26:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    9b2a:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    9b2c:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    9b30:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    9b32:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    9b34:	1f 91       	pop	r17
		pop r16
    9b36:	0f 91       	pop	r16
		reti
    9b38:	18 95       	reti

00009b3a <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    9b3a:	98 e0       	ldi	r25, 0x08	; 8
    9b3c:	88 e1       	ldi	r24, 0x18	; 24
    9b3e:	0f b6       	in	r0, 0x3f	; 63
    9b40:	f8 94       	cli
    9b42:	a8 95       	wdr
    9b44:	80 93 60 00 	sts	0x0060, r24
    9b48:	0f be       	out	0x3f, r0	; 63
    9b4a:	90 93 60 00 	sts	0x0060, r25
	while(1);
    9b4e:	ff cf       	rjmp	.-2      	; 0x9b4e <SoftReset+0x14>

00009b50 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    9b50:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    9b52:	c8 95       	lpm
    9b54:	c8 95       	lpm
		Wait200ns();
    9b56:	c8 95       	lpm
    9b58:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    9b5a:	12 98       	cbi	0x02, 2	; 2
    9b5c:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    9b5e:	80 e0       	ldi	r24, 0x00	; 0
    9b60:	90 e0       	ldi	r25, 0x00	; 0
    9b62:	20 e0       	ldi	r18, 0x00	; 0
    9b64:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    9b66:	36 95       	lsr	r19
    9b68:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    9b6a:	96 95       	lsr	r25
    9b6c:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    9b6e:	c8 95       	lpm
    9b70:	c8 95       	lpm
			Wait200ns();
    9b72:	c8 95       	lpm
    9b74:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    9b76:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    9b78:	00 9b       	sbis	0x00, 0	; 0
    9b7a:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    9b7c:	01 9b       	sbis	0x00, 1	; 0
    9b7e:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    9b80:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    9b82:	c8 95       	lpm
    9b84:	c8 95       	lpm
			Wait200ns();
    9b86:	c8 95       	lpm
    9b88:	c8 95       	lpm
    9b8a:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    9b8c:	61 f7       	brne	.-40     	; 0x9b66 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    9b8e:	30 93 aa 0c 	sts	0x0CAA, r19
    9b92:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    9b96:	90 93 ae 0c 	sts	0x0CAE, r25
    9b9a:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    9b9e:	80 91 a9 0c 	lds	r24, 0x0CA9
    9ba2:	90 91 aa 0c 	lds	r25, 0x0CAA
    9ba6:	0f 97       	sbiw	r24, 0x0f	; 15
    9ba8:	31 f0       	breq	.+12     	; 0x9bb6 <ReadButtons+0x66>
    9baa:	80 91 ad 0c 	lds	r24, 0x0CAD
    9bae:	90 91 ae 0c 	lds	r25, 0x0CAE
    9bb2:	0f 97       	sbiw	r24, 0x0f	; 15
    9bb4:	11 f4       	brne	.+4      	; 0x9bba <ReadButtons+0x6a>
		SoftReset();
    9bb6:	0e 94 9d 4d 	call	0x9b3a	; 0x9b3a <SoftReset>
    9bba:	08 95       	ret

00009bbc <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    9bbc:	10 92 e4 0c 	sts	0x0CE4, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    9bc0:	00 99       	sbic	0x00, 0	; 0
    9bc2:	03 c0       	rjmp	.+6      	; 0x9bca <ReadControllers+0xe>
    9bc4:	81 e0       	ldi	r24, 0x01	; 1
    9bc6:	80 93 e4 0c 	sts	0x0CE4, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    9bca:	01 99       	sbic	0x00, 1	; 0
    9bcc:	05 c0       	rjmp	.+10     	; 0x9bd8 <ReadControllers+0x1c>
    9bce:	80 91 e4 0c 	lds	r24, 0x0CE4
    9bd2:	82 60       	ori	r24, 0x02	; 2
    9bd4:	80 93 e4 0c 	sts	0x0CE4, r24
			
	//read the standard buttons
	ReadButtons();
    9bd8:	0c 94 a8 4d 	jmp	0x9b50	; 0x9b50 <ReadButtons>

00009bdc <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    9bdc:	cf 93       	push	r28
    9bde:	df 93       	push	r29
    9be0:	c0 e0       	ldi	r28, 0x00	; 0
    9be2:	d0 e0       	ldi	r29, 0x00	; 0
    9be4:	fe 01       	movw	r30, r28
    9be6:	e4 55       	subi	r30, 0x54	; 84
    9be8:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    9bea:	64 91       	lpm	r22, Z
    9bec:	ce 01       	movw	r24, r28
    9bee:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <WriteEeprom>
    9bf2:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    9bf4:	c0 32       	cpi	r28, 0x20	; 32
    9bf6:	d1 05       	cpc	r29, r1
    9bf8:	a9 f7       	brne	.-22     	; 0x9be4 <FormatEeprom+0x8>
    9bfa:	c0 e2       	ldi	r28, 0x20	; 32
    9bfc:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    9bfe:	6f ef       	ldi	r22, 0xFF	; 255
    9c00:	ce 01       	movw	r24, r28
    9c02:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    9c06:	6f ef       	ldi	r22, 0xFF	; 255
    9c08:	ce 01       	movw	r24, r28
    9c0a:	01 96       	adiw	r24, 0x01	; 1
    9c0c:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    9c10:	a0 96       	adiw	r28, 0x20	; 32
    9c12:	c1 15       	cp	r28, r1
    9c14:	88 e0       	ldi	r24, 0x08	; 8
    9c16:	d8 07       	cpc	r29, r24
    9c18:	91 f7       	brne	.-28     	; 0x9bfe <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    9c1a:	df 91       	pop	r29
    9c1c:	cf 91       	pop	r28
    9c1e:	08 95       	ret

00009c20 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    9c20:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    9c22:	80 e0       	ldi	r24, 0x00	; 0
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <ReadEeprom>
    9c2a:	c8 2f       	mov	r28, r24
    9c2c:	81 e0       	ldi	r24, 0x01	; 1
    9c2e:	90 e0       	ldi	r25, 0x00	; 0
    9c30:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <ReadEeprom>
    9c34:	28 2f       	mov	r18, r24
    9c36:	30 e0       	ldi	r19, 0x00	; 0
    9c38:	32 2f       	mov	r19, r18
    9c3a:	22 27       	eor	r18, r18
    9c3c:	2c 0f       	add	r18, r28
    9c3e:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    9c40:	81 e0       	ldi	r24, 0x01	; 1
    9c42:	2a 35       	cpi	r18, 0x5A	; 90
    9c44:	35 45       	sbci	r19, 0x55	; 85
    9c46:	09 f0       	breq	.+2      	; 0x9c4a <isEepromFormatted+0x2a>
    9c48:	80 e0       	ldi	r24, 0x00	; 0
}
    9c4a:	cf 91       	pop	r28
    9c4c:	08 95       	ret

00009c4e <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    9c4e:	fc 01       	movw	r30, r24
    9c50:	67 87       	std	Z+15, r22	; 0x0f
    9c52:	08 95       	ret

00009c54 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    9c54:	e8 eb       	ldi	r30, 0xB8	; 184
    9c56:	fc e0       	ldi	r31, 0x0C	; 12
    9c58:	81 e0       	ldi	r24, 0x01	; 1
    9c5a:	91 e0       	ldi	r25, 0x01	; 1
    9c5c:	95 8b       	std	Z+21, r25	; 0x15
    9c5e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    9c60:	63 8b       	std	Z+19, r22	; 0x13
    9c62:	08 95       	ret

00009c64 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    9c64:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    9c66:	90 81       	ld	r25, Z
    9c68:	9f 75       	andi	r25, 0x5F	; 95
    9c6a:	90 83       	st	Z, r25
    9c6c:	08 95       	ret

00009c6e <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    9c6e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    9c70:	90 81       	ld	r25, Z
    9c72:	90 64       	ori	r25, 0x40	; 64
    9c74:	90 83       	st	Z, r25
    9c76:	08 95       	ret

00009c78 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    9c78:	fc 01       	movw	r30, r24
    9c7a:	66 87       	std	Z+14, r22	; 0x0e
    9c7c:	08 95       	ret

00009c7e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    9c7e:	fc 01       	movw	r30, r24
    9c80:	62 87       	std	Z+10, r22	; 0x0a
    9c82:	08 95       	ret

00009c84 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    9c84:	fc 01       	movw	r30, r24
    9c86:	63 87       	std	Z+11, r22	; 0x0b
    9c88:	08 95       	ret

00009c8a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    9c8a:	cf 93       	push	r28
    9c8c:	df 93       	push	r29
    9c8e:	ec 01       	movw	r28, r24
    9c90:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    9c92:	29 81       	ldd	r18, Y+1	; 0x01
    9c94:	30 e0       	ldi	r19, 0x00	; 0
    9c96:	f9 01       	movw	r30, r18
    9c98:	ee 0f       	add	r30, r30
    9c9a:	ff 1f       	adc	r31, r31
    9c9c:	e8 5f       	subi	r30, 0xF8	; 248
    9c9e:	f9 45       	sbci	r31, 0x59	; 89
    9ca0:	65 91       	lpm	r22, Z+
    9ca2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    9ca4:	f9 01       	movw	r30, r18
    9ca6:	e4 0f       	add	r30, r20
    9ca8:	f1 1d       	adc	r31, r1
    9caa:	47 fd       	sbrc	r20, 7
    9cac:	fa 95       	dec	r31
    9cae:	ee 0f       	add	r30, r30
    9cb0:	ff 1f       	adc	r31, r31
    9cb2:	e8 5f       	subi	r30, 0xF8	; 248
    9cb4:	f9 45       	sbci	r31, 0x59	; 89
    9cb6:	85 91       	lpm	r24, Z+
    9cb8:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    9cba:	86 1b       	sub	r24, r22
    9cbc:	97 0b       	sbc	r25, r23
    9cbe:	68 85       	ldd	r22, Y+8	; 0x08
    9cc0:	70 e0       	ldi	r23, 0x00	; 0
    9cc2:	0e 94 84 67 	call	0xcf08	; 0xcf08 <__divmodhi4>
	if(delta==0)delta++;
    9cc6:	61 15       	cp	r22, r1
    9cc8:	71 05       	cpc	r23, r1
    9cca:	11 f4       	brne	.+4      	; 0x9cd0 <PatchCommand11+0x46>
    9ccc:	61 e0       	ldi	r22, 0x01	; 1
    9cce:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    9cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    9cd2:	86 e0       	ldi	r24, 0x06	; 6
    9cd4:	e8 9f       	mul	r30, r24
    9cd6:	f0 01       	movw	r30, r0
    9cd8:	11 24       	eor	r1, r1
    9cda:	e8 54       	subi	r30, 0x48	; 72
    9cdc:	f3 4f       	sbci	r31, 0xF3	; 243
    9cde:	81 81       	ldd	r24, Z+1	; 0x01
    9ce0:	92 81       	ldd	r25, Z+2	; 0x02
    9ce2:	86 0f       	add	r24, r22
    9ce4:	97 1f       	adc	r25, r23
    9ce6:	92 83       	std	Z+2, r25	; 0x02
    9ce8:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    9cea:	7e 83       	std	Y+6, r23	; 0x06
    9cec:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    9cee:	88 81       	ld	r24, Y
    9cf0:	88 60       	ori	r24, 0x08	; 8
    9cf2:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    9cf4:	89 81       	ldd	r24, Y+1	; 0x01
    9cf6:	48 0f       	add	r20, r24
    9cf8:	4f 83       	std	Y+7, r20	; 0x07
}
    9cfa:	df 91       	pop	r29
    9cfc:	cf 91       	pop	r28
    9cfe:	08 95       	ret

00009d00 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    9d00:	fc 01       	movw	r30, r24
    9d02:	60 87       	std	Z+8, r22	; 0x08
    9d04:	08 95       	ret

00009d06 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    9d06:	fc 01       	movw	r30, r24
    9d08:	64 83       	std	Z+4, r22	; 0x04
    9d0a:	08 95       	ret

00009d0c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    9d0c:	fc 01       	movw	r30, r24
    9d0e:	82 81       	ldd	r24, Z+2	; 0x02
    9d10:	0c 94 6a 52 	jmp	0xa4d4	; 0xa4d4 <SetMixerWave>

00009d14 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    9d14:	fc 01       	movw	r30, r24
	track->note+=param;
    9d16:	91 81       	ldd	r25, Z+1	; 0x01
    9d18:	69 0f       	add	r22, r25
    9d1a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    9d1c:	82 81       	ldd	r24, Z+2	; 0x02
    9d1e:	0c 94 53 52 	jmp	0xa4a6	; 0xa4a6 <SetMixerNote>

00009d22 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    9d22:	fc 01       	movw	r30, r24
	track->note-=param;
    9d24:	91 81       	ldd	r25, Z+1	; 0x01
    9d26:	96 1b       	sub	r25, r22
    9d28:	69 2f       	mov	r22, r25
    9d2a:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    9d2c:	82 81       	ldd	r24, Z+2	; 0x02
    9d2e:	0c 94 53 52 	jmp	0xa4a6	; 0xa4a6 <SetMixerNote>

00009d32 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    9d32:	1f 93       	push	r17
    9d34:	cf 93       	push	r28
    9d36:	df 93       	push	r29
    9d38:	ec 01       	movw	r28, r24
    9d3a:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    9d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9d3e:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <SetMixerNote>
	track->note=param;
    9d42:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9d44:	88 81       	ld	r24, Y
    9d46:	87 7f       	andi	r24, 0xF7	; 247
    9d48:	88 83       	st	Y, r24
}
    9d4a:	df 91       	pop	r29
    9d4c:	cf 91       	pop	r28
    9d4e:	1f 91       	pop	r17
    9d50:	08 95       	ret

00009d52 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    9d52:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    9d54:	14 96       	adiw	r26, 0x04	; 4
    9d56:	8c 91       	ld	r24, X
    9d58:	14 97       	sbiw	r26, 0x04	; 4
    9d5a:	88 23       	and	r24, r24
    9d5c:	19 f1       	breq	.+70     	; 0x9da4 <PatchCommand14+0x52>
    9d5e:	55 96       	adiw	r26, 0x15	; 21
    9d60:	2d 91       	ld	r18, X+
    9d62:	3c 91       	ld	r19, X
    9d64:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    9d66:	66 23       	and	r22, r22
    9d68:	79 f0       	breq	.+30     	; 0x9d88 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    9d6a:	77 27       	eor	r23, r23
    9d6c:	67 fd       	sbrc	r22, 7
    9d6e:	70 95       	com	r23
    9d70:	6f 5f       	subi	r22, 0xFF	; 255
    9d72:	7f 4f       	sbci	r23, 0xFF	; 255
    9d74:	ab 01       	movw	r20, r22
    9d76:	44 0f       	add	r20, r20
    9d78:	55 1f       	adc	r21, r21
    9d7a:	64 0f       	add	r22, r20
    9d7c:	75 1f       	adc	r23, r21
    9d7e:	26 1b       	sub	r18, r22
    9d80:	37 0b       	sbc	r19, r23
    9d82:	09 c0       	rjmp	.+18     	; 0x9d96 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    9d84:	ef 3f       	cpi	r30, 0xFF	; 255
    9d86:	39 f0       	breq	.+14     	; 0x9d96 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    9d88:	23 50       	subi	r18, 0x03	; 3
    9d8a:	31 09       	sbc	r19, r1
    9d8c:	f9 01       	movw	r30, r18
    9d8e:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    9d90:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    9d92:	ed 30       	cpi	r30, 0x0D	; 13
    9d94:	b9 f7       	brne	.-18     	; 0x9d84 <PatchCommand14+0x32>
    9d96:	56 96       	adiw	r26, 0x16	; 22
    9d98:	3c 93       	st	X, r19
    9d9a:	2e 93       	st	-X, r18
    9d9c:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    9d9e:	81 50       	subi	r24, 0x01	; 1
    9da0:	14 96       	adiw	r26, 0x04	; 4
    9da2:	8c 93       	st	X, r24
    9da4:	08 95       	ret

00009da6 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    9da6:	90 93 5d 0d 	sts	0x0D5D, r25
    9daa:	80 93 5c 0d 	sts	0x0D5C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    9dae:	8f e6       	ldi	r24, 0x6F	; 111
    9db0:	80 93 5f 0d 	sts	0x0D5F, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    9db4:	10 92 b6 0c 	sts	0x0CB6, r1
    9db8:	e7 ef       	ldi	r30, 0xF7	; 247
    9dba:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9dbc:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9dbe:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    9dc0:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    9dc2:	28 e1       	ldi	r18, 0x18	; 24
    9dc4:	df 01       	movw	r26, r30
    9dc6:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    9dc8:	8c 93       	st	X, r24
    9dca:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9dcc:	9c 93       	st	X, r25
    9dce:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    9dd0:	1c 92       	st	X, r1
    9dd2:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    9dd4:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    9dd6:	10 82       	st	Z, r1
    9dd8:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    9dda:	2c 93       	st	X, r18
    9ddc:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    9dde:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9de0:	8f 5f       	subi	r24, 0xFF	; 255
    9de2:	77 96       	adiw	r30, 0x17	; 23
    9de4:	85 30       	cpi	r24, 0x05	; 5
    9de6:	71 f7       	brne	.-36     	; 0x9dc4 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    9de8:	08 95       	ret

00009dea <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    9dea:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    9dec:	ed 91       	ld	r30, X+
    9dee:	fc 91       	ld	r31, X
    9df0:	11 97       	sbiw	r26, 0x01	; 1
    9df2:	9f 01       	movw	r18, r30
    9df4:	2f 5f       	subi	r18, 0xFF	; 255
    9df6:	3f 4f       	sbci	r19, 0xFF	; 255
    9df8:	11 96       	adiw	r26, 0x01	; 1
    9dfa:	3c 93       	st	X, r19
    9dfc:	2e 93       	st	-X, r18
    9dfe:	e4 91       	lpm	r30, Z
    9e00:	e7 fd       	sbrc	r30, 7
    9e02:	03 c0       	rjmp	.+6      	; 0x9e0a <ReadVarLen+0x20>
    9e04:	8e 2f       	mov	r24, r30
    9e06:	90 e0       	ldi	r25, 0x00	; 0
    9e08:	08 95       	ret
    {
       value &= 0x7F;
    9e0a:	ef 77       	andi	r30, 0x7F	; 127
    9e0c:	8e 2f       	mov	r24, r30
    9e0e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    9e10:	96 95       	lsr	r25
    9e12:	98 2f       	mov	r25, r24
    9e14:	88 27       	eor	r24, r24
    9e16:	97 95       	ror	r25
    9e18:	87 95       	ror	r24
    9e1a:	2f 5f       	subi	r18, 0xFF	; 255
    9e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    9e1e:	f9 01       	movw	r30, r18
    9e20:	31 97       	sbiw	r30, 0x01	; 1
    9e22:	e4 91       	lpm	r30, Z
    9e24:	4e 2f       	mov	r20, r30
    9e26:	4f 77       	andi	r20, 0x7F	; 127
    9e28:	84 0f       	add	r24, r20
    9e2a:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    9e2c:	e7 fd       	sbrc	r30, 7
    9e2e:	f0 cf       	rjmp	.-32     	; 0x9e10 <ReadVarLen+0x26>
    9e30:	2d 93       	st	X+, r18
    9e32:	3c 93       	st	X, r19
    }


    return value;
}
    9e34:	08 95       	ret

00009e36 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    9e36:	ef 92       	push	r14
    9e38:	ff 92       	push	r15
    9e3a:	0f 93       	push	r16
    9e3c:	1f 93       	push	r17
    9e3e:	cf 93       	push	r28
    9e40:	df 93       	push	r29
    9e42:	1f 92       	push	r1
    9e44:	cd b7       	in	r28, 0x3d	; 61
    9e46:	de b7       	in	r29, 0x3e	; 62
    9e48:	7c 01       	movw	r14, r24
    9e4a:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    9e4c:	fc 01       	movw	r30, r24
    9e4e:	80 81       	ld	r24, Z
    9e50:	08 2f       	mov	r16, r24
    9e52:	00 1f       	adc	r16, r16
    9e54:	00 27       	eor	r16, r16
    9e56:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    9e58:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    9e5a:	9f ef       	ldi	r25, 0xFF	; 255
    9e5c:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    9e5e:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    9e60:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    9e62:	87 7b       	andi	r24, 0xB7	; 183
    9e64:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    9e66:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    9e68:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    9e6a:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    9e6c:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9e6e:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    9e70:	82 81       	ldd	r24, Z+2	; 0x02
    9e72:	83 30       	cpi	r24, 0x03	; 3
    9e74:	69 f4       	brne	.+26     	; 0x9e90 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    9e76:	01 11       	cpse	r16, r1
    9e78:	01 c0       	rjmp	.+2      	; 0x9e7c <TriggerCommon+0x46>
    9e7a:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    9e7c:	81 e0       	ldi	r24, 0x01	; 1
    9e7e:	91 e0       	ldi	r25, 0x01	; 1
    9e80:	90 93 cd 0c 	sts	0x0CCD, r25
    9e84:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    9e88:	81 e0       	ldi	r24, 0x01	; 1
    9e8a:	80 93 cb 0c 	sts	0x0CCB, r24
    9e8e:	39 c0       	rjmp	.+114    	; 0x9f02 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    9e90:	84 30       	cpi	r24, 0x04	; 4
    9e92:	69 f5       	brne	.+90     	; 0x9eee <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    9e94:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    9e98:	80 91 5c 0d 	lds	r24, 0x0D5C
    9e9c:	90 91 5d 0d 	lds	r25, 0x0D5D
    9ea0:	f9 e0       	ldi	r31, 0x09	; 9
    9ea2:	6f 9f       	mul	r22, r31
    9ea4:	80 0d       	add	r24, r0
    9ea6:	91 1d       	adc	r25, r1
    9ea8:	11 24       	eor	r1, r1
    9eaa:	fc 01       	movw	r30, r24
    9eac:	31 96       	adiw	r30, 0x01	; 1
    9eae:	a5 91       	lpm	r26, Z+
    9eb0:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    9eb2:	b0 93 d5 0c 	sts	0x0CD5, r27
    9eb6:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    9eba:	ac 01       	movw	r20, r24
    9ebc:	49 5f       	subi	r20, 0xF9	; 249
    9ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    9ec0:	fa 01       	movw	r30, r20
    9ec2:	65 91       	lpm	r22, Z+
    9ec4:	74 91       	lpm	r23, Z
    9ec6:	05 96       	adiw	r24, 0x05	; 5
    9ec8:	fc 01       	movw	r30, r24
    9eca:	85 91       	lpm	r24, Z+
    9ecc:	94 91       	lpm	r25, Z
    9ece:	68 1b       	sub	r22, r24
    9ed0:	79 0b       	sbc	r23, r25
    9ed2:	70 93 d7 0c 	sts	0x0CD7, r23
    9ed6:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    9eda:	fa 01       	movw	r30, r20
    9edc:	85 91       	lpm	r24, Z+
    9ede:	94 91       	lpm	r25, Z
    9ee0:	a8 0f       	add	r26, r24
    9ee2:	b9 1f       	adc	r27, r25
    9ee4:	b0 93 d9 0c 	sts	0x0CD9, r27
    9ee8:	a0 93 d8 0c 	sts	0x0CD8, r26
    9eec:	05 c0       	rjmp	.+10     	; 0x9ef8 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    9eee:	60 e0       	ldi	r22, 0x00	; 0
    9ef0:	29 83       	std	Y+1, r18	; 0x01
    9ef2:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <SetMixerWave>
			SetMixerNote(track->channel,note);
    9ef6:	29 81       	ldd	r18, Y+1	; 0x01
    9ef8:	62 2f       	mov	r22, r18
    9efa:	f7 01       	movw	r30, r14
    9efc:	82 81       	ldd	r24, Z+2	; 0x02
    9efe:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    9f02:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    9f04:	00 23       	and	r16, r16
    9f06:	11 f0       	breq	.+4      	; 0x9f0c <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    9f08:	11 8b       	std	Z+17, r17	; 0x11
    9f0a:	01 c0       	rjmp	.+2      	; 0x9f0e <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    9f0c:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    9f0e:	e0 91 5c 0d 	lds	r30, 0x0D5C
    9f12:	f0 91 5d 0d 	lds	r31, 0x0D5D
    9f16:	39 e0       	ldi	r19, 0x09	; 9
    9f18:	13 9f       	mul	r17, r19
    9f1a:	e0 0d       	add	r30, r0
    9f1c:	f1 1d       	adc	r31, r1
    9f1e:	11 24       	eor	r1, r1
    9f20:	33 96       	adiw	r30, 0x03	; 3
    9f22:	85 91       	lpm	r24, Z+
    9f24:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    9f26:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    9f28:	00 97       	sbiw	r24, 0x00	; 0
    9f2a:	19 f4       	brne	.+6      	; 0x9f32 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    9f2c:	16 8a       	std	Z+22, r1	; 0x16
    9f2e:	15 8a       	std	Z+21, r1	; 0x15
    9f30:	08 c0       	rjmp	.+16     	; 0x9f42 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    9f32:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    9f34:	fc 01       	movw	r30, r24
    9f36:	24 91       	lpm	r18, Z
    9f38:	f7 01       	movw	r30, r14
    9f3a:	22 8b       	std	Z+18, r18	; 0x12
    9f3c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    9f3e:	96 8b       	std	Z+22, r25	; 0x16
    9f40:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    9f42:	0f 90       	pop	r0
    9f44:	df 91       	pop	r29
    9f46:	cf 91       	pop	r28
    9f48:	1f 91       	pop	r17
    9f4a:	0f 91       	pop	r16
    9f4c:	ff 90       	pop	r15
    9f4e:	ef 90       	pop	r14
    9f50:	08 95       	ret

00009f52 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    9f52:	cf 93       	push	r28
    9f54:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    9f56:	e0 91 5c 0d 	lds	r30, 0x0D5C
    9f5a:	f0 91 5d 0d 	lds	r31, 0x0D5D
    9f5e:	99 e0       	ldi	r25, 0x09	; 9
    9f60:	89 9f       	mul	r24, r25
    9f62:	e0 0d       	add	r30, r0
    9f64:	f1 1d       	adc	r31, r1
    9f66:	11 24       	eor	r1, r1
    9f68:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    9f6a:	e1 30       	cpi	r30, 0x01	; 1
    9f6c:	e9 f0       	breq	.+58     	; 0x9fa8 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    9f6e:	e2 30       	cpi	r30, 0x02	; 2
    9f70:	e9 f0       	breq	.+58     	; 0x9fac <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    9f72:	20 91 fe 0c 	lds	r18, 0x0CFE
    9f76:	27 ff       	sbrs	r18, 7
    9f78:	1d c0       	rjmp	.+58     	; 0x9fb4 <TriggerFx+0x62>
    9f7a:	20 91 0f 0d 	lds	r18, 0x0D0F
    9f7e:	28 13       	cpse	r18, r24
    9f80:	02 c0       	rjmp	.+4      	; 0x9f86 <TriggerFx+0x34>
    9f82:	41 11       	cpse	r20, r1
    9f84:	17 c0       	rjmp	.+46     	; 0x9fb4 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    9f86:	20 91 15 0d 	lds	r18, 0x0D15
    9f8a:	27 ff       	sbrs	r18, 7
    9f8c:	11 c0       	rjmp	.+34     	; 0x9fb0 <TriggerFx+0x5e>
    9f8e:	20 91 26 0d 	lds	r18, 0x0D26
    9f92:	28 13       	cpse	r18, r24
    9f94:	02 c0       	rjmp	.+4      	; 0x9f9a <TriggerFx+0x48>
    9f96:	41 11       	cpse	r20, r1
    9f98:	0b c0       	rjmp	.+22     	; 0x9fb0 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    9f9a:	20 91 12 0d 	lds	r18, 0x0D12
    9f9e:	90 91 29 0d 	lds	r25, 0x0D29
    9fa2:	92 17       	cp	r25, r18
    9fa4:	28 f4       	brcc	.+10     	; 0x9fb0 <TriggerFx+0x5e>
    9fa6:	06 c0       	rjmp	.+12     	; 0x9fb4 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    9fa8:	c3 e0       	ldi	r28, 0x03	; 3
    9faa:	05 c0       	rjmp	.+10     	; 0x9fb6 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    9fac:	c4 e0       	ldi	r28, 0x04	; 4
    9fae:	03 c0       	rjmp	.+6      	; 0x9fb6 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    9fb0:	c2 e0       	ldi	r28, 0x02	; 2
    9fb2:	01 c0       	rjmp	.+2      	; 0x9fb6 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    9fb4:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    9fb6:	97 e1       	ldi	r25, 0x17	; 23
    9fb8:	c9 9f       	mul	r28, r25
    9fba:	e0 01       	movw	r28, r0
    9fbc:	11 24       	eor	r1, r1
    9fbe:	c9 51       	subi	r28, 0x19	; 25
    9fc0:	d3 4f       	sbci	r29, 0xF3	; 243
    9fc2:	90 e8       	ldi	r25, 0x80	; 128
    9fc4:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    9fc6:	1e 8a       	std	Y+22, r1	; 0x16
    9fc8:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    9fca:	20 e5       	ldi	r18, 0x50	; 80
    9fcc:	46 2f       	mov	r20, r22
    9fce:	68 2f       	mov	r22, r24
    9fd0:	ce 01       	movw	r24, r28
    9fd2:	0e 94 1b 4f 	call	0x9e36	; 0x9e36 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    9fd6:	88 81       	ld	r24, Y
    9fd8:	80 62       	ori	r24, 0x20	; 32
    9fda:	88 83       	st	Y, r24
}
    9fdc:	df 91       	pop	r29
    9fde:	cf 91       	pop	r28
    9fe0:	08 95       	ret

00009fe2 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    9fe2:	cf 93       	push	r28
    9fe4:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    9fe6:	a8 2f       	mov	r26, r24
    9fe8:	b0 e0       	ldi	r27, 0x00	; 0
    9fea:	97 e1       	ldi	r25, 0x17	; 23
    9fec:	89 9f       	mul	r24, r25
    9fee:	f0 01       	movw	r30, r0
    9ff0:	11 24       	eor	r1, r1
    9ff2:	e9 51       	subi	r30, 0x19	; 25
    9ff4:	f3 4f       	sbci	r31, 0xF3	; 243
    9ff6:	80 81       	ld	r24, Z
    9ff8:	85 ff       	sbrs	r24, 5
    9ffa:	02 c0       	rjmp	.+4      	; 0xa000 <TriggerNote+0x1e>
    9ffc:	87 fd       	sbrc	r24, 7
    9ffe:	2e c0       	rjmp	.+92     	; 0xa05c <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    a000:	21 11       	cpse	r18, r1
    a002:	18 c0       	rjmp	.+48     	; 0xa034 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    a004:	97 e1       	ldi	r25, 0x17	; 23
    a006:	9a 9f       	mul	r25, r26
    a008:	f0 01       	movw	r30, r0
    a00a:	9b 9f       	mul	r25, r27
    a00c:	f0 0d       	add	r31, r0
    a00e:	11 24       	eor	r1, r1
    a010:	e9 51       	subi	r30, 0x19	; 25
    a012:	f3 4f       	sbci	r31, 0xF3	; 243
    a014:	97 85       	ldd	r25, Z+15	; 0x0f
    a016:	91 11       	cpse	r25, r1
    a018:	02 c0       	rjmp	.+4      	; 0xa01e <TriggerNote+0x3c>
    a01a:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    a01c:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    a01e:	97 e1       	ldi	r25, 0x17	; 23
    a020:	9a 9f       	mul	r25, r26
    a022:	f0 01       	movw	r30, r0
    a024:	9b 9f       	mul	r25, r27
    a026:	f0 0d       	add	r31, r0
    a028:	11 24       	eor	r1, r1
    a02a:	e9 51       	subi	r30, 0x19	; 25
    a02c:	f3 4f       	sbci	r31, 0xF3	; 243
    a02e:	8f 7b       	andi	r24, 0xBF	; 191
    a030:	80 83       	st	Z, r24
    a032:	14 c0       	rjmp	.+40     	; 0xa05c <TriggerNote+0x7a>
    a034:	82 2f       	mov	r24, r18
    a036:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    a038:	97 e1       	ldi	r25, 0x17	; 23
    a03a:	9a 9f       	mul	r25, r26
    a03c:	e0 01       	movw	r28, r0
    a03e:	9b 9f       	mul	r25, r27
    a040:	d0 0d       	add	r29, r0
    a042:	11 24       	eor	r1, r1
    a044:	c9 51       	subi	r28, 0x19	; 25
    a046:	d3 4f       	sbci	r29, 0xF3	; 243
    a048:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    a04a:	1e 8a       	std	Y+22, r1	; 0x16
    a04c:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    a04e:	48 2f       	mov	r20, r24
    a050:	ce 01       	movw	r24, r28
    a052:	0e 94 1b 4f 	call	0x9e36	; 0x9e36 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    a056:	88 81       	ld	r24, Y
    a058:	80 62       	ori	r24, 0x20	; 32
    a05a:	88 83       	st	Y, r24
		}

	}
}
    a05c:	df 91       	pop	r29
    a05e:	cf 91       	pop	r28
    a060:	08 95       	ret

0000a062 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    a062:	6f 92       	push	r6
    a064:	7f 92       	push	r7
    a066:	8f 92       	push	r8
    a068:	9f 92       	push	r9
    a06a:	af 92       	push	r10
    a06c:	bf 92       	push	r11
    a06e:	cf 92       	push	r12
    a070:	df 92       	push	r13
    a072:	ef 92       	push	r14
    a074:	ff 92       	push	r15
    a076:	0f 93       	push	r16
    a078:	1f 93       	push	r17
    a07a:	cf 93       	push	r28
    a07c:	df 93       	push	r29
    a07e:	c7 ee       	ldi	r28, 0xE7	; 231
    a080:	dc e0       	ldi	r29, 0x0C	; 12
    a082:	08 eb       	ldi	r16, 0xB8	; 184
    a084:	1c e0       	ldi	r17, 0x0C	; 12
    a086:	d8 01       	movw	r26, r16
    a088:	9e 01       	movw	r18, r28
    a08a:	40 e0       	ldi	r20, 0x00	; 0
    a08c:	50 e0       	ldi	r21, 0x00	; 0
    a08e:	ca 01       	movw	r24, r20
    a090:	89 51       	subi	r24, 0x19	; 25
    a092:	93 4f       	sbci	r25, 0xF3	; 243
    a094:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    a096:	fc 01       	movw	r30, r24
    a098:	87 85       	ldd	r24, Z+15	; 0x0f
    a09a:	88 23       	and	r24, r24
    a09c:	91 f0       	breq	.+36     	; 0xa0c2 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    a09e:	66 85       	ldd	r22, Z+14	; 0x0e
    a0a0:	99 27       	eor	r25, r25
    a0a2:	87 fd       	sbrc	r24, 7
    a0a4:	90 95       	com	r25
    a0a6:	86 0f       	add	r24, r22
    a0a8:	91 1d       	adc	r25, r1
    a0aa:	8f 3f       	cpi	r24, 0xFF	; 255
    a0ac:	91 05       	cpc	r25, r1
    a0ae:	19 f0       	breq	.+6      	; 0xa0b6 <ProcessMusic+0x54>
    a0b0:	14 f0       	brlt	.+4      	; 0xa0b6 <ProcessMusic+0x54>
    a0b2:	8f ef       	ldi	r24, 0xFF	; 255
    a0b4:	90 e0       	ldi	r25, 0x00	; 0
    a0b6:	97 ff       	sbrs	r25, 7
    a0b8:	02 c0       	rjmp	.+4      	; 0xa0be <ProcessMusic+0x5c>
    a0ba:	80 e0       	ldi	r24, 0x00	; 0
    a0bc:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    a0be:	f6 01       	movw	r30, r12
    a0c0:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    a0c2:	f9 01       	movw	r30, r18
    a0c4:	f0 80       	ld	r15, Z
    a0c6:	f3 fe       	sbrs	r15, 3
    a0c8:	2a c0       	rjmp	.+84     	; 0xa11e <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    a0ca:	65 81       	ldd	r22, Z+5	; 0x05
    a0cc:	76 81       	ldd	r23, Z+6	; 0x06
    a0ce:	11 96       	adiw	r26, 0x01	; 1
    a0d0:	8d 91       	ld	r24, X+
    a0d2:	9c 91       	ld	r25, X
    a0d4:	12 97       	sbiw	r26, 0x02	; 2
    a0d6:	86 0f       	add	r24, r22
    a0d8:	97 1f       	adc	r25, r23
    a0da:	12 96       	adiw	r26, 0x02	; 2
    a0dc:	9c 93       	st	X, r25
    a0de:	8e 93       	st	-X, r24
    a0e0:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    a0e2:	f6 01       	movw	r30, r12
    a0e4:	e7 80       	ldd	r14, Z+7	; 0x07
    a0e6:	ee 2d       	mov	r30, r14
    a0e8:	f0 e0       	ldi	r31, 0x00	; 0
    a0ea:	ee 0f       	add	r30, r30
    a0ec:	ff 1f       	adc	r31, r31
    a0ee:	e8 5f       	subi	r30, 0xF8	; 248
    a0f0:	f9 45       	sbci	r31, 0x59	; 89
    a0f2:	c5 90       	lpm	r12, Z+
    a0f4:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    a0f6:	16 16       	cp	r1, r22
    a0f8:	17 06       	cpc	r1, r23
    a0fa:	24 f4       	brge	.+8      	; 0xa104 <ProcessMusic+0xa2>
    a0fc:	8c 15       	cp	r24, r12
    a0fe:	9d 05       	cpc	r25, r13
    a100:	30 f4       	brcc	.+12     	; 0xa10e <ProcessMusic+0xac>
    a102:	0d c0       	rjmp	.+26     	; 0xa11e <ProcessMusic+0xbc>
    a104:	67 2b       	or	r22, r23
    a106:	59 f0       	breq	.+22     	; 0xa11e <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    a108:	c8 16       	cp	r12, r24
    a10a:	d9 06       	cpc	r13, r25
    a10c:	40 f0       	brcs	.+16     	; 0xa11e <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    a10e:	12 96       	adiw	r26, 0x02	; 2
    a110:	dc 92       	st	X, r13
    a112:	ce 92       	st	-X, r12
    a114:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    a116:	8f 2d       	mov	r24, r15
    a118:	87 7f       	andi	r24, 0xF7	; 247
    a11a:	f9 01       	movw	r30, r18
    a11c:	80 83       	st	Z, r24
    a11e:	49 5e       	subi	r20, 0xE9	; 233
    a120:	5f 4f       	sbci	r21, 0xFF	; 255
    a122:	29 5e       	subi	r18, 0xE9	; 233
    a124:	3f 4f       	sbci	r19, 0xFF	; 255
    a126:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    a128:	43 37       	cpi	r20, 0x73	; 115
    a12a:	51 05       	cpc	r21, r1
    a12c:	09 f0       	breq	.+2      	; 0xa130 <ProcessMusic+0xce>
    a12e:	af cf       	rjmp	.-162    	; 0xa08e <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    a130:	80 91 b6 0c 	lds	r24, 0x0CB6
    a134:	88 23       	and	r24, r24
    a136:	09 f4       	brne	.+2      	; 0xa13a <ProcessMusic+0xd8>
    a138:	cc c0       	rjmp	.+408    	; 0xa2d2 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    a13a:	57 e1       	ldi	r21, 0x17	; 23
    a13c:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    a13e:	80 91 5a 0d 	lds	r24, 0x0D5A
    a142:	90 91 5b 0d 	lds	r25, 0x0D5B
    a146:	20 91 60 0d 	lds	r18, 0x0D60
    a14a:	30 91 61 0d 	lds	r19, 0x0D61
    a14e:	82 17       	cp	r24, r18
    a150:	93 07       	cpc	r25, r19
    a152:	09 f0       	breq	.+2      	; 0xa156 <ProcessMusic+0xf4>
    a154:	b9 c0       	rjmp	.+370    	; 0xa2c8 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    a156:	20 91 63 0d 	lds	r18, 0x0D63
    a15a:	30 91 64 0d 	lds	r19, 0x0D64
    a15e:	b9 01       	movw	r22, r18
    a160:	6f 5f       	subi	r22, 0xFF	; 255
    a162:	7f 4f       	sbci	r23, 0xFF	; 255
    a164:	70 93 64 0d 	sts	0x0D64, r23
    a168:	60 93 63 0d 	sts	0x0D63, r22
    a16c:	f9 01       	movw	r30, r18
    a16e:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    a170:	4f 3f       	cpi	r20, 0xFF	; 255
    a172:	79 f5       	brne	.+94     	; 0xa1d2 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    a174:	a9 01       	movw	r20, r18
    a176:	4e 5f       	subi	r20, 0xFE	; 254
    a178:	5f 4f       	sbci	r21, 0xFF	; 255
    a17a:	50 93 64 0d 	sts	0x0D64, r21
    a17e:	40 93 63 0d 	sts	0x0D63, r20
    a182:	fb 01       	movw	r30, r22
    a184:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    a186:	6f 32       	cpi	r22, 0x2F	; 47
    a188:	19 f4       	brne	.+6      	; 0xa190 <ProcessMusic+0x12e>
						playSong=false;
    a18a:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    a18e:	9c c0       	rjmp	.+312    	; 0xa2c8 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    a190:	66 30       	cpi	r22, 0x06	; 6
    a192:	09 f0       	breq	.+2      	; 0xa196 <ProcessMusic+0x134>
    a194:	8c c0       	rjmp	.+280    	; 0xa2ae <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    a196:	fa 01       	movw	r30, r20
    a198:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    a19a:	c9 01       	movw	r24, r18
    a19c:	04 96       	adiw	r24, 0x04	; 4
    a19e:	90 93 64 0d 	sts	0x0D64, r25
    a1a2:	80 93 63 0d 	sts	0x0D63, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    a1a6:	f9 01       	movw	r30, r18
    a1a8:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    a1aa:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    a1ac:	e3 35       	cpi	r30, 0x53	; 83
    a1ae:	29 f4       	brne	.+10     	; 0xa1ba <ProcessMusic+0x158>
							loopStart=songPos;
    a1b0:	90 93 66 0d 	sts	0x0D66, r25
    a1b4:	80 93 65 0d 	sts	0x0D65, r24
    a1b8:	7a c0       	rjmp	.+244    	; 0xa2ae <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    a1ba:	e5 34       	cpi	r30, 0x45	; 69
    a1bc:	09 f0       	breq	.+2      	; 0xa1c0 <ProcessMusic+0x15e>
    a1be:	77 c0       	rjmp	.+238    	; 0xa2ae <ProcessMusic+0x24c>
							songPos=loopStart;
    a1c0:	80 91 65 0d 	lds	r24, 0x0D65
    a1c4:	90 91 66 0d 	lds	r25, 0x0D66
    a1c8:	90 93 64 0d 	sts	0x0D64, r25
    a1cc:	80 93 63 0d 	sts	0x0D63, r24
    a1d0:	6e c0       	rjmp	.+220    	; 0xa2ae <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    a1d2:	47 fd       	sbrc	r20, 7
    a1d4:	40 93 5e 0d 	sts	0x0D5E, r20
					channel=lastStatus&0x0f;
    a1d8:	90 91 5e 0d 	lds	r25, 0x0D5E
    a1dc:	89 2f       	mov	r24, r25
    a1de:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    a1e0:	47 ff       	sbrs	r20, 7
    a1e2:	08 c0       	rjmp	.+16     	; 0xa1f4 <ProcessMusic+0x192>
    a1e4:	2e 5f       	subi	r18, 0xFE	; 254
    a1e6:	3f 4f       	sbci	r19, 0xFF	; 255
    a1e8:	30 93 64 0d 	sts	0x0D64, r19
    a1ec:	20 93 63 0d 	sts	0x0D63, r18
    a1f0:	fb 01       	movw	r30, r22
    a1f2:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    a1f4:	90 7f       	andi	r25, 0xF0	; 240
    a1f6:	90 3b       	cpi	r25, 0xB0	; 176
    a1f8:	e1 f0       	breq	.+56     	; 0xa232 <ProcessMusic+0x1d0>
    a1fa:	90 3c       	cpi	r25, 0xC0	; 192
    a1fc:	09 f4       	brne	.+2      	; 0xa200 <ProcessMusic+0x19e>
    a1fe:	51 c0       	rjmp	.+162    	; 0xa2a2 <ProcessMusic+0x240>
    a200:	90 39       	cpi	r25, 0x90	; 144
    a202:	09 f0       	breq	.+2      	; 0xa206 <ProcessMusic+0x1a4>
    a204:	54 c0       	rjmp	.+168    	; 0xa2ae <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    a206:	e0 91 63 0d 	lds	r30, 0x0D63
    a20a:	f0 91 64 0d 	lds	r31, 0x0D64
    a20e:	9f 01       	movw	r18, r30
    a210:	2f 5f       	subi	r18, 0xFF	; 255
    a212:	3f 4f       	sbci	r19, 0xFF	; 255
    a214:	30 93 64 0d 	sts	0x0D64, r19
    a218:	20 93 63 0d 	sts	0x0D63, r18
    a21c:	24 91       	lpm	r18, Z
    a21e:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    a220:	f8 9e       	mul	r15, r24
    a222:	f0 01       	movw	r30, r0
    a224:	11 24       	eor	r1, r1
    a226:	e9 51       	subi	r30, 0x19	; 25
    a228:	f3 4f       	sbci	r31, 0xF3	; 243
    a22a:	60 89       	ldd	r22, Z+16	; 0x10
    a22c:	0e 94 f1 4f 	call	0x9fe2	; 0x9fe2 <TriggerNote>
    a230:	3e c0       	rjmp	.+124    	; 0xa2ae <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    a232:	e0 91 63 0d 	lds	r30, 0x0D63
    a236:	f0 91 64 0d 	lds	r31, 0x0D64
    a23a:	9f 01       	movw	r18, r30
    a23c:	2f 5f       	subi	r18, 0xFF	; 255
    a23e:	3f 4f       	sbci	r19, 0xFF	; 255
    a240:	30 93 64 0d 	sts	0x0D64, r19
    a244:	20 93 63 0d 	sts	0x0D63, r18
    a248:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    a24a:	47 30       	cpi	r20, 0x07	; 7
    a24c:	49 f4       	brne	.+18     	; 0xa260 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    a24e:	f8 9e       	mul	r15, r24
    a250:	d0 01       	movw	r26, r0
    a252:	11 24       	eor	r1, r1
    a254:	a9 51       	subi	r26, 0x19	; 25
    a256:	b3 4f       	sbci	r27, 0xF3	; 243
    a258:	ee 0f       	add	r30, r30
    a25a:	1c 96       	adiw	r26, 0x0c	; 12
    a25c:	ec 93       	st	X, r30
    a25e:	27 c0       	rjmp	.+78     	; 0xa2ae <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    a260:	4b 30       	cpi	r20, 0x0B	; 11
    a262:	49 f4       	brne	.+18     	; 0xa276 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    a264:	f8 9e       	mul	r15, r24
    a266:	d0 01       	movw	r26, r0
    a268:	11 24       	eor	r1, r1
    a26a:	a9 51       	subi	r26, 0x19	; 25
    a26c:	b3 4f       	sbci	r27, 0xF3	; 243
    a26e:	ee 0f       	add	r30, r30
    a270:	13 96       	adiw	r26, 0x03	; 3
    a272:	ec 93       	st	X, r30
    a274:	1c c0       	rjmp	.+56     	; 0xa2ae <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    a276:	4c 35       	cpi	r20, 0x5C	; 92
    a278:	49 f4       	brne	.+18     	; 0xa28c <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    a27a:	f8 9e       	mul	r15, r24
    a27c:	d0 01       	movw	r26, r0
    a27e:	11 24       	eor	r1, r1
    a280:	a9 51       	subi	r26, 0x19	; 25
    a282:	b3 4f       	sbci	r27, 0xF3	; 243
    a284:	ee 0f       	add	r30, r30
    a286:	1a 96       	adiw	r26, 0x0a	; 10
    a288:	ec 93       	st	X, r30
    a28a:	11 c0       	rjmp	.+34     	; 0xa2ae <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    a28c:	44 36       	cpi	r20, 0x64	; 100
    a28e:	79 f4       	brne	.+30     	; 0xa2ae <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    a290:	f8 9e       	mul	r15, r24
    a292:	d0 01       	movw	r26, r0
    a294:	11 24       	eor	r1, r1
    a296:	a9 51       	subi	r26, 0x19	; 25
    a298:	b3 4f       	sbci	r27, 0xF3	; 243
    a29a:	ee 0f       	add	r30, r30
    a29c:	1b 96       	adiw	r26, 0x0b	; 11
    a29e:	ec 93       	st	X, r30
    a2a0:	06 c0       	rjmp	.+12     	; 0xa2ae <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    a2a2:	f8 9e       	mul	r15, r24
    a2a4:	f0 01       	movw	r30, r0
    a2a6:	11 24       	eor	r1, r1
    a2a8:	e9 51       	subi	r30, 0x19	; 25
    a2aa:	f3 4f       	sbci	r31, 0xF3	; 243
    a2ac:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    a2ae:	83 e6       	ldi	r24, 0x63	; 99
    a2b0:	9d e0       	ldi	r25, 0x0D	; 13
    a2b2:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <ReadVarLen>
    a2b6:	90 93 61 0d 	sts	0x0D61, r25
    a2ba:	80 93 60 0d 	sts	0x0D60, r24
				currDeltaTime=0;
    a2be:	10 92 5b 0d 	sts	0x0D5B, r1
    a2c2:	10 92 5a 0d 	sts	0x0D5A, r1
    a2c6:	3b cf       	rjmp	.-394    	; 0xa13e <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    a2c8:	01 96       	adiw	r24, 0x01	; 1
    a2ca:	90 93 5b 0d 	sts	0x0D5B, r25
    a2ce:	80 93 5a 0d 	sts	0x0D5A, r24
    a2d2:	90 ef       	ldi	r25, 0xF0	; 240
    a2d4:	a9 2e       	mov	r10, r25
    a2d6:	9c e0       	ldi	r25, 0x0C	; 12
    a2d8:	b9 2e       	mov	r11, r25
    a2da:	2a ef       	ldi	r18, 0xFA	; 250
    a2dc:	c2 2e       	mov	r12, r18
    a2de:	2c e0       	ldi	r18, 0x0C	; 12
    a2e0:	d2 2e       	mov	r13, r18
    a2e2:	3b ef       	ldi	r19, 0xFB	; 251
    a2e4:	e3 2e       	mov	r14, r19
    a2e6:	3c e0       	ldi	r19, 0x0C	; 12
    a2e8:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    a2ea:	66 24       	eor	r6, r6
    a2ec:	6a 94       	dec	r6
    a2ee:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    a2f0:	88 81       	ld	r24, Y
    a2f2:	85 ff       	sbrs	r24, 5
    a2f4:	42 c0       	rjmp	.+132    	; 0xa37a <ProcessMusic+0x318>
    a2f6:	2d 89       	ldd	r18, Y+21	; 0x15
    a2f8:	3e 89       	ldd	r19, Y+22	; 0x16
    a2fa:	23 2b       	or	r18, r19
    a2fc:	09 f4       	brne	.+2      	; 0xa300 <ProcessMusic+0x29e>
    a2fe:	3d c0       	rjmp	.+122    	; 0xa37a <ProcessMusic+0x318>
    a300:	86 fd       	sbrc	r24, 6
    a302:	3b c0       	rjmp	.+118    	; 0xa37a <ProcessMusic+0x318>
    a304:	47 01       	movw	r8, r14
    a306:	f2 e0       	ldi	r31, 0x02	; 2
    a308:	8f 1a       	sub	r8, r31
    a30a:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    a30c:	d6 01       	movw	r26, r12
    a30e:	9c 91       	ld	r25, X
    a310:	f4 01       	movw	r30, r8
    a312:	80 81       	ld	r24, Z
    a314:	98 13       	cpse	r25, r24
    a316:	2e c0       	rjmp	.+92     	; 0xa374 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    a318:	ed 89       	ldd	r30, Y+21	; 0x15
    a31a:	fe 89       	ldd	r31, Y+22	; 0x16
    a31c:	bf 01       	movw	r22, r30
    a31e:	6f 5f       	subi	r22, 0xFF	; 255
    a320:	7f 4f       	sbci	r23, 0xFF	; 255
    a322:	7e 8b       	std	Y+22, r23	; 0x16
    a324:	6d 8b       	std	Y+21, r22	; 0x15
    a326:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    a328:	8f 3f       	cpi	r24, 0xFF	; 255
    a32a:	31 f4       	brne	.+12     	; 0xa338 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    a32c:	88 81       	ld	r24, Y
    a32e:	8f 77       	andi	r24, 0x7F	; 127
    a330:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    a332:	1e 8a       	std	Y+22, r1	; 0x16
    a334:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    a336:	1e c0       	rjmp	.+60     	; 0xa374 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    a338:	9f 01       	movw	r18, r30
    a33a:	2e 5f       	subi	r18, 0xFE	; 254
    a33c:	3f 4f       	sbci	r19, 0xFF	; 255
    a33e:	3e 8b       	std	Y+22, r19	; 0x16
    a340:	2d 8b       	std	Y+21, r18	; 0x15
    a342:	fb 01       	movw	r30, r22
    a344:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    a346:	e8 2f       	mov	r30, r24
    a348:	f0 e0       	ldi	r31, 0x00	; 0
    a34a:	ee 0f       	add	r30, r30
    a34c:	ff 1f       	adc	r31, r31
    a34e:	e4 53       	subi	r30, 0x34	; 52
    a350:	ff 4f       	sbci	r31, 0xFF	; 255
    a352:	25 91       	lpm	r18, Z+
    a354:	34 91       	lpm	r19, Z
    a356:	ce 01       	movw	r24, r28
    a358:	f9 01       	movw	r30, r18
    a35a:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    a35c:	ed 89       	ldd	r30, Y+21	; 0x15
    a35e:	fe 89       	ldd	r31, Y+22	; 0x16
    a360:	cf 01       	movw	r24, r30
    a362:	01 96       	adiw	r24, 0x01	; 1
    a364:	9e 8b       	std	Y+22, r25	; 0x16
    a366:	8d 8b       	std	Y+21, r24	; 0x15
    a368:	e4 91       	lpm	r30, Z
    a36a:	d4 01       	movw	r26, r8
    a36c:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    a36e:	f6 01       	movw	r30, r12
    a370:	10 82       	st	Z, r1
    a372:	cc cf       	rjmp	.-104    	; 0xa30c <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    a374:	9f 5f       	subi	r25, 0xFF	; 255
    a376:	d6 01       	movw	r26, r12
    a378:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    a37a:	98 81       	ld	r25, Y
    a37c:	95 ff       	sbrs	r25, 5
    a37e:	6c c0       	rjmp	.+216    	; 0xa458 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    a380:	f7 01       	movw	r30, r14
    a382:	80 81       	ld	r24, Z
    a384:	8f 3f       	cpi	r24, 0xFF	; 255
    a386:	11 f0       	breq	.+4      	; 0xa38c <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    a388:	8f 5f       	subi	r24, 0xFF	; 255
    a38a:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    a38c:	97 fd       	sbrc	r25, 7
    a38e:	04 c0       	rjmp	.+8      	; 0xa398 <ProcessMusic+0x336>
    a390:	f7 01       	movw	r30, r14
    a392:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    a394:	90 81       	ld	r25, Z
    a396:	01 c0       	rjmp	.+2      	; 0xa39a <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    a398:	9f ef       	ldi	r25, 0xFF	; 255
    a39a:	f7 01       	movw	r30, r14
    a39c:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    a39e:	80 81       	ld	r24, Z
    a3a0:	88 23       	and	r24, r24
    a3a2:	09 f4       	brne	.+2      	; 0xa3a6 <ProcessMusic+0x344>
    a3a4:	4e c0       	rjmp	.+156    	; 0xa442 <ProcessMusic+0x3e0>
    a3a6:	31 96       	adiw	r30, 0x01	; 1
    a3a8:	50 81       	ld	r21, Z
    a3aa:	55 23       	and	r21, r21
    a3ac:	09 f4       	brne	.+2      	; 0xa3b0 <ProcessMusic+0x34e>
    a3ae:	49 c0       	rjmp	.+146    	; 0xa442 <ProcessMusic+0x3e0>
    a3b0:	99 23       	and	r25, r25
    a3b2:	09 f4       	brne	.+2      	; 0xa3b6 <ProcessMusic+0x354>
    a3b4:	46 c0       	rjmp	.+140    	; 0xa442 <ProcessMusic+0x3e0>
    a3b6:	40 91 5f 0d 	lds	r20, 0x0D5F
    a3ba:	44 23       	and	r20, r20
    a3bc:	09 f4       	brne	.+2      	; 0xa3c0 <ProcessMusic+0x35e>
    a3be:	41 c0       	rjmp	.+130    	; 0xa442 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    a3c0:	89 9f       	mul	r24, r25
    a3c2:	c0 01       	movw	r24, r0
    a3c4:	11 24       	eor	r1, r1
    a3c6:	93 95       	inc	r25
				uVol>>=8;
    a3c8:	89 2f       	mov	r24, r25
    a3ca:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    a3cc:	58 9f       	mul	r21, r24
    a3ce:	90 01       	movw	r18, r0
    a3d0:	59 9f       	mul	r21, r25
    a3d2:	30 0d       	add	r19, r0
    a3d4:	11 24       	eor	r1, r1
    a3d6:	c9 01       	movw	r24, r18
    a3d8:	93 95       	inc	r25
				uVol>>=8;
    a3da:	89 2f       	mov	r24, r25
    a3dc:	99 27       	eor	r25, r25
    a3de:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    a3e0:	50 81       	ld	r21, Z
    a3e2:	58 9f       	mul	r21, r24
    a3e4:	90 01       	movw	r18, r0
    a3e6:	59 9f       	mul	r21, r25
    a3e8:	30 0d       	add	r19, r0
    a3ea:	11 24       	eor	r1, r1
    a3ec:	33 95       	inc	r19
					uVol>>=8;
    a3ee:	23 2f       	mov	r18, r19
    a3f0:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    a3f2:	42 9f       	mul	r20, r18
    a3f4:	c0 01       	movw	r24, r0
    a3f6:	43 9f       	mul	r20, r19
    a3f8:	90 0d       	add	r25, r0
    a3fa:	11 24       	eor	r1, r1
    a3fc:	93 95       	inc	r25
				uVol>>=8;
    a3fe:	89 2f       	mov	r24, r25
    a400:	99 27       	eor	r25, r25
    a402:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    a404:	20 81       	ld	r18, Z
    a406:	22 23       	and	r18, r18
    a408:	f1 f0       	breq	.+60     	; 0xa446 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    a40a:	d5 01       	movw	r26, r10
    a40c:	ec 91       	ld	r30, X
    a40e:	f0 e0       	ldi	r31, 0x00	; 0
    a410:	e0 50       	subi	r30, 0x00	; 0
    a412:	f8 45       	sbci	r31, 0x58	; 88
    a414:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    a416:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    a418:	2e 9f       	mul	r18, r30
    a41a:	f0 01       	movw	r30, r0
    a41c:	11 24       	eor	r1, r1
    a41e:	f3 95       	inc	r31
					tVol>>=8;
    a420:	ef 2f       	mov	r30, r31
    a422:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    a424:	a3 01       	movw	r20, r6
    a426:	4e 1b       	sub	r20, r30
    a428:	5f 0b       	sbc	r21, r31
    a42a:	48 9f       	mul	r20, r24
    a42c:	90 01       	movw	r18, r0
    a42e:	49 9f       	mul	r20, r25
    a430:	30 0d       	add	r19, r0
    a432:	58 9f       	mul	r21, r24
    a434:	30 0d       	add	r19, r0
    a436:	11 24       	eor	r1, r1
    a438:	c9 01       	movw	r24, r18
    a43a:	93 95       	inc	r25
					uVol>>=8;
    a43c:	89 2f       	mov	r24, r25
    a43e:	99 27       	eor	r25, r25
    a440:	02 c0       	rjmp	.+4      	; 0xa446 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    a442:	80 e0       	ldi	r24, 0x00	; 0
    a444:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    a446:	f5 01       	movw	r30, r10
    a448:	30 81       	ld	r19, Z
    a44a:	f7 01       	movw	r30, r14
    a44c:	39 97       	sbiw	r30, 0x09	; 9
    a44e:	20 81       	ld	r18, Z
    a450:	23 0f       	add	r18, r19
    a452:	d5 01       	movw	r26, r10
    a454:	2c 93       	st	X, r18
    a456:	02 c0       	rjmp	.+4      	; 0xa45c <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    a458:	80 e0       	ldi	r24, 0x00	; 0
    a45a:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    a45c:	f8 01       	movw	r30, r16
    a45e:	80 83       	st	Z, r24
    a460:	67 96       	adiw	r28, 0x17	; 23
    a462:	0a 5f       	subi	r16, 0xFA	; 250
    a464:	1f 4f       	sbci	r17, 0xFF	; 255
    a466:	f7 e1       	ldi	r31, 0x17	; 23
    a468:	af 0e       	add	r10, r31
    a46a:	b1 1c       	adc	r11, r1
    a46c:	87 e1       	ldi	r24, 0x17	; 23
    a46e:	c8 0e       	add	r12, r24
    a470:	d1 1c       	adc	r13, r1
    a472:	97 e1       	ldi	r25, 0x17	; 23
    a474:	e9 0e       	add	r14, r25
    a476:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    a478:	ad e0       	ldi	r26, 0x0D	; 13
    a47a:	ca 35       	cpi	r28, 0x5A	; 90
    a47c:	da 07       	cpc	r29, r26
    a47e:	09 f0       	breq	.+2      	; 0xa482 <ProcessMusic+0x420>
    a480:	37 cf       	rjmp	.-402    	; 0xa2f0 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    a482:	df 91       	pop	r29
    a484:	cf 91       	pop	r28
    a486:	1f 91       	pop	r17
    a488:	0f 91       	pop	r16
    a48a:	ff 90       	pop	r15
    a48c:	ef 90       	pop	r14
    a48e:	df 90       	pop	r13
    a490:	cf 90       	pop	r12
    a492:	bf 90       	pop	r11
    a494:	af 90       	pop	r10
    a496:	9f 90       	pop	r9
    a498:	8f 90       	pop	r8
    a49a:	7f 90       	pop	r7
    a49c:	6f 90       	pop	r6
    a49e:	08 95       	ret

0000a4a0 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    a4a0:	80 93 5f 0d 	sts	0x0D5F, r24
    a4a4:	08 95       	ret

0000a4a6 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    a4a6:	99 27       	eor	r25, r25
	clr r23
    a4a8:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    a4aa:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    a4ac:	09 f4       	brne	.+2      	; 0xa4b0 <set_note_waves>
		ret
    a4ae:	08 95       	ret

0000a4b0 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    a4b0:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    a4b2:	f6 ea       	ldi	r31, 0xA6	; 166
	lsl r22
    a4b4:	66 0f       	add	r22, r22
	rol r23
    a4b6:	77 1f       	adc	r23, r23
	add ZL,r22
    a4b8:	e6 0f       	add	r30, r22
	adc ZH,r23	
    a4ba:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    a4bc:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    a4be:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    a4c0:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    a4c2:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    a4c4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    a4c6:	28 9f       	mul	r18, r24
	add ZL,r0
    a4c8:	e0 0d       	add	r30, r0
	adc ZH,r1
    a4ca:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    a4cc:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    a4ce:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    a4d0:	11 24       	eor	r1, r1
	

	ret
    a4d2:	08 95       	ret

0000a4d4 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    a4d4:	99 27       	eor	r25, r25
	clr r23
    a4d6:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    a4d8:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    a4da:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    a4dc:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    a4de:	28 9f       	mul	r18, r24
	add ZL,r0
    a4e0:	e0 0d       	add	r30, r0
	adc ZH,r1
    a4e2:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    a4e4:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    a4e6:	31 f4       	brne	.+12     	; 0xa4f4 <smw1>
	lds r22,tr4_params
    a4e8:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    a4ec:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    a4ee:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    a4f2:	0b c0       	rjmp	.+22     	; 0xa50a <esmw>

0000a4f4 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    a4f4:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    a4f6:	31 f4       	brne	.+12     	; 0xa504 <smw2>
	lds r22,tr4_params
    a4f8:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    a4fc:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    a4fe:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    a502:	03 c0       	rjmp	.+6      	; 0xa50a <esmw>

0000a504 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    a504:	78 ea       	ldi	r23, 0xA8	; 168
	add r23,r22
    a506:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    a508:	75 83       	std	Z+5, r23	; 0x05

0000a50a <esmw>:

esmw:
	clr r1	
    a50a:	11 24       	eor	r1, r1
	ret
    a50c:	08 95       	ret
	...

0000a600 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    a600:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    a602:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    a606:	08 95       	ret

0000a608 <steptable>:
    a608:	22 00       	.word	0x0022	; ????
    a60a:	24 00       	.word	0x0024	; ????
    a60c:	26 00       	.word	0x0026	; ????
    a60e:	28 00       	.word	0x0028	; ????
    a610:	2b 00       	.word	0x002b	; ????
    a612:	2d 00       	.word	0x002d	; ????
    a614:	30 00       	.word	0x0030	; ????
    a616:	33 00       	.word	0x0033	; ????
    a618:	36 00       	.word	0x0036	; ????
    a61a:	39 00       	.word	0x0039	; ????
    a61c:	3d 00       	.word	0x003d	; ????
    a61e:	40 00       	.word	0x0040	; ????
    a620:	44 00       	.word	0x0044	; ????
    a622:	48 00       	.word	0x0048	; ????
    a624:	4c 00       	.word	0x004c	; ????
    a626:	51 00       	.word	0x0051	; ????
    a628:	56 00       	.word	0x0056	; ????
    a62a:	5b 00       	.word	0x005b	; ????
    a62c:	60 00       	.word	0x0060	; ????
    a62e:	66 00       	.word	0x0066	; ????
    a630:	6c 00       	.word	0x006c	; ????
    a632:	73 00       	.word	0x0073	; ????
    a634:	79 00       	.word	0x0079	; ????
    a636:	81 00       	.word	0x0081	; ????
    a638:	88 00       	.word	0x0088	; ????
    a63a:	90 00       	.word	0x0090	; ????
    a63c:	99 00       	.word	0x0099	; ????
    a63e:	a2 00       	.word	0x00a2	; ????
    a640:	ac 00       	.word	0x00ac	; ????
    a642:	b6 00       	.word	0x00b6	; ????
    a644:	c1 00       	.word	0x00c1	; ????
    a646:	cc 00       	.word	0x00cc	; ????
    a648:	d8 00       	.word	0x00d8	; ????
    a64a:	e5 00       	.word	0x00e5	; ????
    a64c:	f3 00       	.word	0x00f3	; ????
    a64e:	01 01       	movw	r0, r2
    a650:	10 01       	movw	r2, r0
    a652:	21 01       	movw	r4, r2
    a654:	32 01       	movw	r6, r4
    a656:	44 01       	movw	r8, r8
    a658:	57 01       	movw	r10, r14
    a65a:	6c 01       	movw	r12, r24
    a65c:	81 01       	movw	r16, r2
    a65e:	98 01       	movw	r18, r16
    a660:	b0 01       	movw	r22, r0
    a662:	ca 01       	movw	r24, r20
    a664:	e5 01       	movw	r28, r10
    a666:	02 02       	muls	r16, r18
    a668:	21 02       	muls	r18, r17
    a66a:	41 02       	muls	r20, r17
    a66c:	64 02       	muls	r22, r20
    a66e:	88 02       	muls	r24, r24
    a670:	ae 02       	muls	r26, r30
    a672:	d7 02       	muls	r29, r23
    a674:	03 03       	mulsu	r16, r19
    a676:	30 03       	mulsu	r19, r16
    a678:	61 03       	mulsu	r22, r17
    a67a:	94 03       	fmuls	r17, r20
    a67c:	cb 03       	fmulsu	r20, r19
    a67e:	05 04       	cpc	r0, r5
    a680:	42 04       	cpc	r4, r2
    a682:	83 04       	cpc	r8, r3
    a684:	c7 04       	cpc	r12, r7
    a686:	10 05       	cpc	r17, r0
    a688:	5d 05       	cpc	r21, r13
    a68a:	af 05       	cpc	r26, r15
    a68c:	05 06       	cpc	r0, r21
    a68e:	61 06       	cpc	r6, r17
    a690:	c2 06       	cpc	r12, r18
    a692:	29 07       	cpc	r18, r25
    a694:	96 07       	cpc	r25, r22
    a696:	09 08       	sbc	r0, r9
    a698:	83 08       	sbc	r8, r3
    a69a:	05 09       	sbc	r16, r5
    a69c:	8e 09       	sbc	r24, r14
    a69e:	20 0a       	sbc	r2, r16
    a6a0:	ba 0a       	sbc	r11, r26
    a6a2:	5d 0b       	sbc	r21, r29
    a6a4:	0a 0c       	add	r0, r10
    a6a6:	c1 0c       	add	r12, r1
    a6a8:	84 0d       	add	r24, r4
    a6aa:	51 0e       	add	r5, r17
    a6ac:	2b 0f       	add	r18, r27
    a6ae:	12 10       	cpse	r1, r2
    a6b0:	07 11       	cpse	r16, r7
    a6b2:	0a 12       	cpse	r0, r26
    a6b4:	1d 13       	cpse	r17, r29
    a6b6:	40 14       	cp	r4, r0
    a6b8:	74 15       	cp	r23, r4
    a6ba:	ba 16       	cp	r11, r26
    a6bc:	14 18       	sub	r1, r4
    a6be:	83 19       	sub	r24, r3
    a6c0:	07 1b       	sub	r16, r23
    a6c2:	a3 1c       	adc	r10, r3
    a6c4:	57 1e       	adc	r5, r23
    a6c6:	24 20       	and	r2, r4
    a6c8:	0e 22       	and	r0, r30
    a6ca:	14 24       	eor	r1, r4
    a6cc:	39 26       	eor	r3, r25
    a6ce:	7f 28       	or	r7, r15
    a6d0:	e8 2a       	or	r14, r24
    a6d2:	75 2d       	mov	r23, r5
    a6d4:	29 30       	cpi	r18, 0x09	; 9
    a6d6:	06 33       	cpi	r16, 0x36	; 54
    a6d8:	0f 36       	cpi	r16, 0x6F	; 111
    a6da:	45 39       	cpi	r20, 0x95	; 149
    a6dc:	ad 3c       	cpi	r26, 0xCD	; 205
    a6de:	49 40       	sbci	r20, 0x09	; 9
    a6e0:	1b 44       	sbci	r17, 0x4B	; 75
    a6e2:	28 48       	sbci	r18, 0x88	; 136
    a6e4:	73 4c       	sbci	r23, 0xC3	; 195
    a6e6:	fe 50       	subi	r31, 0x0E	; 14
    a6e8:	cf 55       	subi	r28, 0x5F	; 95
    a6ea:	ea 5a       	subi	r30, 0xAA	; 170
    a6ec:	51 60       	ori	r21, 0x01	; 1
    a6ee:	0c 66       	ori	r16, 0x6C	; 108
    a6f0:	1d 6c       	ori	r17, 0xCD	; 205
    a6f2:	8b 72       	andi	r24, 0x2B	; 43
    a6f4:	5a 79       	andi	r21, 0x9A	; 154
    a6f6:	92 80       	ldd	r9, Z+2	; 0x02
    a6f8:	37 88       	ldd	r3, Z+23	; 0x17
    a6fa:	50 90 e5 98 	lds	r5, 0x98E5
    a6fe:	fd a1       	ldd	r31, Y+37	; 0x25
    a700:	9f ab       	std	Y+55, r25	; 0x37
    a702:	d3 b5       	in	r29, 0x23	; 35
    a704:	a3 c0       	rjmp	.+326    	; 0xa84c <waves+0x4c>
	...

0000a800 <waves>:
    a800:	00 03       	mulsu	r16, r16
    a802:	06 09       	sbc	r16, r6
    a804:	0c 10       	cpse	r0, r12
    a806:	13 16       	cp	r1, r19
    a808:	19 1c       	adc	r1, r9
    a80a:	1f 22       	and	r1, r31
    a80c:	25 28       	or	r2, r5
    a80e:	2b 2e       	mov	r2, r27
    a810:	31 33       	cpi	r19, 0x31	; 49
    a812:	36 39       	cpi	r19, 0x96	; 150
    a814:	3c 3f       	cpi	r19, 0xFC	; 252
    a816:	41 44       	sbci	r20, 0x41	; 65
    a818:	47 49       	sbci	r20, 0x97	; 151
    a81a:	4c 4e       	sbci	r20, 0xEC	; 236
    a81c:	51 53       	subi	r21, 0x31	; 49
    a81e:	55 58       	subi	r21, 0x85	; 133
    a820:	5a 5c       	subi	r21, 0xCA	; 202
    a822:	5e 60       	ori	r21, 0x0E	; 14
    a824:	62 64       	ori	r22, 0x42	; 66
    a826:	66 68       	ori	r22, 0x86	; 134
    a828:	6a 6b       	ori	r22, 0xBA	; 186
    a82a:	6d 6f       	ori	r22, 0xFD	; 253
    a82c:	70 71       	andi	r23, 0x10	; 16
    a82e:	73 74       	andi	r23, 0x43	; 67
    a830:	75 76       	andi	r23, 0x65	; 101
    a832:	78 79       	andi	r23, 0x98	; 152
    a834:	7a 7a       	andi	r23, 0xAA	; 170
    a836:	7b 7c       	andi	r23, 0xCB	; 203
    a838:	7d 7d       	andi	r23, 0xDD	; 221
    a83a:	7e 7e       	andi	r23, 0xEE	; 238
    a83c:	7e 7f       	andi	r23, 0xFE	; 254
    a83e:	7f 7f       	andi	r23, 0xFF	; 255
    a840:	7f 7f       	andi	r23, 0xFF	; 255
    a842:	7f 7f       	andi	r23, 0xFF	; 255
    a844:	7e 7e       	andi	r23, 0xEE	; 238
    a846:	7e 7d       	andi	r23, 0xDE	; 222
    a848:	7d 7c       	andi	r23, 0xCD	; 205
    a84a:	7b 7a       	andi	r23, 0xAB	; 171
    a84c:	7a 79       	andi	r23, 0x9A	; 154
    a84e:	78 76       	andi	r23, 0x68	; 104
    a850:	75 74       	andi	r23, 0x45	; 69
    a852:	73 71       	andi	r23, 0x13	; 19
    a854:	70 6f       	ori	r23, 0xF0	; 240
    a856:	6d 6b       	ori	r22, 0xBD	; 189
    a858:	6a 68       	ori	r22, 0x8A	; 138
    a85a:	66 64       	ori	r22, 0x46	; 70
    a85c:	62 60       	ori	r22, 0x02	; 2
    a85e:	5e 5c       	subi	r21, 0xCE	; 206
    a860:	5a 58       	subi	r21, 0x8A	; 138
    a862:	55 53       	subi	r21, 0x35	; 53
    a864:	51 4e       	sbci	r21, 0xE1	; 225
    a866:	4c 49       	sbci	r20, 0x9C	; 156
    a868:	47 44       	sbci	r20, 0x47	; 71
    a86a:	41 3f       	cpi	r20, 0xF1	; 241
    a86c:	3c 39       	cpi	r19, 0x9C	; 156
    a86e:	36 33       	cpi	r19, 0x36	; 54
    a870:	31 2e       	mov	r3, r17
    a872:	2b 28       	or	r2, r11
    a874:	25 22       	and	r2, r21
    a876:	1f 1c       	adc	r1, r15
    a878:	19 16       	cp	r1, r25
    a87a:	13 10       	cpse	r1, r3
    a87c:	0c 09       	sbc	r16, r12
    a87e:	06 03       	mulsu	r16, r22
    a880:	00 fd       	sbrc	r16, 0
    a882:	fa f7       	brpl	.-2      	; 0xa882 <waves+0x82>
    a884:	f4 f0       	brlt	.+60     	; 0xa8c2 <waves+0xc2>
    a886:	ed ea       	ldi	r30, 0xAD	; 173
    a888:	e7 e4       	ldi	r30, 0x47	; 71
    a88a:	e1 de       	rcall	.-574    	; 0xa64e <steptable+0x46>
    a88c:	db d8       	rcall	.-3658   	; 0x9a44 <SetTileTable+0x8>
    a88e:	d5 d2       	rcall	.+1450   	; 0xae3a <waves+0x63a>
    a890:	cf cd       	rjmp	.-1122   	; 0xa430 <ProcessMusic+0x3ce>
    a892:	ca c7       	rjmp	.+3988   	; 0xb828 <LBMapSprite+0x66>
    a894:	c4 c1       	rjmp	.+904    	; 0xac1e <waves+0x41e>
    a896:	bf bc       	out	0x2f, r11	; 47
    a898:	b9 b7       	in	r27, 0x39	; 57
    a89a:	b4 b2       	in	r11, 0x14	; 20
    a89c:	af ad       	ldd	r26, Y+63	; 0x3f
    a89e:	ab a8       	ldd	r10, Y+51	; 0x33
    a8a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    a8a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    a8a4:	9e 9c       	mul	r9, r14
    a8a6:	9a 98       	cbi	0x13, 2	; 19
    a8a8:	96 95       	lsr	r25
    a8aa:	93 91       	.word	0x9193	; ????
    a8ac:	90 8f       	std	Z+24, r25	; 0x18
    a8ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a8b0:	8b 8a       	std	Y+19, r8	; 0x13
    a8b2:	88 87       	std	Y+8, r24	; 0x08
    a8b4:	86 86       	std	Z+14, r8	; 0x0e
    a8b6:	85 84       	ldd	r8, Z+13	; 0x0d
    a8b8:	83 83       	std	Z+3, r24	; 0x03
    a8ba:	82 82       	std	Z+2, r8	; 0x02
    a8bc:	82 81       	ldd	r24, Z+2	; 0x02
    a8be:	81 81       	ldd	r24, Z+1	; 0x01
    a8c0:	81 81       	ldd	r24, Z+1	; 0x01
    a8c2:	81 81       	ldd	r24, Z+1	; 0x01
    a8c4:	82 82       	std	Z+2, r8	; 0x02
    a8c6:	82 83       	std	Z+2, r24	; 0x02
    a8c8:	83 84       	ldd	r8, Z+11	; 0x0b
    a8ca:	85 86       	std	Z+13, r8	; 0x0d
    a8cc:	86 87       	std	Z+14, r24	; 0x0e
    a8ce:	88 8a       	std	Y+16, r8	; 0x10
    a8d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a8d2:	8d 8f       	std	Y+29, r24	; 0x1d
    a8d4:	90 91 93 95 	lds	r25, 0x9593
    a8d8:	96 98       	cbi	0x12, 6	; 18
    a8da:	9a 9c       	mul	r9, r10
    a8dc:	9e a0       	ldd	r9, Y+38	; 0x26
    a8de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    a8e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    a8e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    a8e4:	af b2       	in	r10, 0x1f	; 31
    a8e6:	b4 b7       	in	r27, 0x34	; 52
    a8e8:	b9 bc       	out	0x29, r11	; 41
    a8ea:	bf c1       	rjmp	.+894    	; 0xac6a <waves+0x46a>
    a8ec:	c4 c7       	rjmp	.+3976   	; 0xb876 <LBMoveSprite+0x10>
    a8ee:	ca cd       	rjmp	.-1132   	; 0xa484 <ProcessMusic+0x422>
    a8f0:	cf d2       	rcall	.+1438   	; 0xae90 <waves+0x690>
    a8f2:	d5 d8       	rcall	.-3670   	; 0x9a9e <ReadEeprom+0xa>
    a8f4:	db de       	rcall	.-586    	; 0xa6ac <steptable+0xa4>
    a8f6:	e1 e4       	ldi	r30, 0x41	; 65
    a8f8:	e7 ea       	ldi	r30, 0xA7	; 167
    a8fa:	ed f0       	brhs	.+58     	; 0xa936 <waves+0x136>
    a8fc:	f4 f7       	brge	.-4      	; 0xa8fa <waves+0xfa>
    a8fe:	fa fd       	.word	0xfdfa	; ????
    a900:	80 81       	ld	r24, Z
    a902:	82 83       	std	Z+2, r24	; 0x02
    a904:	84 85       	ldd	r24, Z+12	; 0x0c
    a906:	86 87       	std	Z+14, r24	; 0x0e
    a908:	88 89       	ldd	r24, Y+16	; 0x10
    a90a:	8a 8b       	std	Y+18, r24	; 0x12
    a90c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    a90e:	8e 8f       	std	Y+30, r24	; 0x1e
    a910:	90 91 92 93 	lds	r25, 0x9392
    a914:	94 95       	.word	0x9594	; ????
    a916:	96 97       	sbiw	r26, 0x26	; 38
    a918:	98 99       	sbic	0x13, 0	; 19
    a91a:	9a 9b       	sbis	0x13, 2	; 19
    a91c:	9c 9d       	mul	r25, r12
    a91e:	9e 9f       	mul	r25, r30
    a920:	a0 a1       	ldd	r26, Z+32	; 0x20
    a922:	a2 a3       	std	Z+34, r26	; 0x22
    a924:	a4 a5       	ldd	r26, Z+44	; 0x2c
    a926:	a6 a7       	std	Z+46, r26	; 0x2e
    a928:	a8 a9       	ldd	r26, Y+48	; 0x30
    a92a:	aa ab       	std	Y+50, r26	; 0x32
    a92c:	ac ad       	ldd	r26, Y+60	; 0x3c
    a92e:	ae af       	std	Y+62, r26	; 0x3e
    a930:	b0 b1       	in	r27, 0x00	; 0
    a932:	b2 b3       	in	r27, 0x12	; 18
    a934:	b4 b5       	in	r27, 0x24	; 36
    a936:	b6 b7       	in	r27, 0x36	; 54
    a938:	b8 b9       	out	0x08, r27	; 8
    a93a:	ba bb       	out	0x1a, r27	; 26
    a93c:	bc bd       	out	0x2c, r27	; 44
    a93e:	be bf       	out	0x3e, r27	; 62
    a940:	c0 c1       	rjmp	.+896    	; 0xacc2 <waves+0x4c2>
    a942:	c2 c3       	rjmp	.+1924   	; 0xb0c8 <waves+0x8c8>
    a944:	c4 c5       	rjmp	.+2952   	; 0xb4ce <DrawMap+0x16>
    a946:	c6 c7       	rjmp	.+3980   	; 0xb8d4 <LBMoveSprite+0x6e>
    a948:	c8 c9       	rjmp	.-3184   	; 0x9cda <PatchCommand11+0x50>
    a94a:	ca cb       	rjmp	.-2156   	; 0xa0e0 <ProcessMusic+0x7e>
    a94c:	cc cd       	rjmp	.-1128   	; 0xa4e6 <SetMixerWave+0x12>
    a94e:	ce cf       	rjmp	.-100    	; 0xa8ec <waves+0xec>
    a950:	d0 d1       	rcall	.+928    	; 0xacf2 <waves+0x4f2>
    a952:	d2 d3       	rcall	.+1956   	; 0xb0f8 <waves+0x8f8>
    a954:	d4 d5       	rcall	.+2984   	; 0xb4fe <DrawMap+0x46>
    a956:	d6 d7       	rcall	.+4012   	; 0xb904 <LBRotateSprites+0x22>
    a958:	d8 d9       	rcall	.-3152   	; 0x9d0a <PatchCommand13+0x4>
    a95a:	da db       	rcall	.-2124   	; 0xa110 <ProcessMusic+0xae>
    a95c:	dc dd       	rcall	.-1096   	; 0xa516 <esmw+0xc>
    a95e:	de df       	rcall	.-68     	; 0xa91c <waves+0x11c>
    a960:	e0 e1       	ldi	r30, 0x10	; 16
    a962:	e2 e3       	ldi	r30, 0x32	; 50
    a964:	e4 e5       	ldi	r30, 0x54	; 84
    a966:	e6 e7       	ldi	r30, 0x76	; 118
    a968:	e8 e9       	ldi	r30, 0x98	; 152
    a96a:	ea eb       	ldi	r30, 0xBA	; 186
    a96c:	ec ed       	ldi	r30, 0xDC	; 220
    a96e:	ee ef       	ldi	r30, 0xFE	; 254
    a970:	f0 f1       	brcs	.+124    	; 0xa9ee <waves+0x1ee>
    a972:	f2 f3       	brmi	.-4      	; 0xa970 <waves+0x170>
    a974:	f4 f5       	brge	.+124    	; 0xa9f2 <waves+0x1f2>
    a976:	f6 f7       	brtc	.-4      	; 0xa974 <waves+0x174>
    a978:	f8 f9       	.word	0xf9f8	; ????
    a97a:	fa fb       	.word	0xfbfa	; ????
    a97c:	fc fd       	.word	0xfdfc	; ????
    a97e:	fe ff       	.word	0xfffe	; ????
    a980:	00 01       	movw	r0, r0
    a982:	02 03       	mulsu	r16, r18
    a984:	04 05       	cpc	r16, r4
    a986:	06 07       	cpc	r16, r22
    a988:	08 09       	sbc	r16, r8
    a98a:	0a 0b       	sbc	r16, r26
    a98c:	0c 0d       	add	r16, r12
    a98e:	0e 0f       	add	r16, r30
    a990:	10 11       	cpse	r17, r0
    a992:	12 13       	cpse	r17, r18
    a994:	14 15       	cp	r17, r4
    a996:	16 17       	cp	r17, r22
    a998:	18 19       	sub	r17, r8
    a99a:	1a 1b       	sub	r17, r26
    a99c:	1c 1d       	adc	r17, r12
    a99e:	1e 1f       	adc	r17, r30
    a9a0:	20 21       	and	r18, r0
    a9a2:	22 23       	and	r18, r18
    a9a4:	24 25       	eor	r18, r4
    a9a6:	26 27       	eor	r18, r22
    a9a8:	28 29       	or	r18, r8
    a9aa:	2a 2b       	or	r18, r26
    a9ac:	2c 2d       	mov	r18, r12
    a9ae:	2e 2f       	mov	r18, r30
    a9b0:	30 31       	cpi	r19, 0x10	; 16
    a9b2:	32 33       	cpi	r19, 0x32	; 50
    a9b4:	34 35       	cpi	r19, 0x54	; 84
    a9b6:	36 37       	cpi	r19, 0x76	; 118
    a9b8:	38 39       	cpi	r19, 0x98	; 152
    a9ba:	3a 3b       	cpi	r19, 0xBA	; 186
    a9bc:	3c 3d       	cpi	r19, 0xDC	; 220
    a9be:	3e 3f       	cpi	r19, 0xFE	; 254
    a9c0:	40 41       	sbci	r20, 0x10	; 16
    a9c2:	42 43       	sbci	r20, 0x32	; 50
    a9c4:	44 45       	sbci	r20, 0x54	; 84
    a9c6:	46 47       	sbci	r20, 0x76	; 118
    a9c8:	48 49       	sbci	r20, 0x98	; 152
    a9ca:	4a 4b       	sbci	r20, 0xBA	; 186
    a9cc:	4c 4d       	sbci	r20, 0xDC	; 220
    a9ce:	4e 4f       	sbci	r20, 0xFE	; 254
    a9d0:	50 51       	subi	r21, 0x10	; 16
    a9d2:	52 53       	subi	r21, 0x32	; 50
    a9d4:	54 55       	subi	r21, 0x54	; 84
    a9d6:	56 57       	subi	r21, 0x76	; 118
    a9d8:	58 59       	subi	r21, 0x98	; 152
    a9da:	5a 5b       	subi	r21, 0xBA	; 186
    a9dc:	5c 5d       	subi	r21, 0xDC	; 220
    a9de:	5e 5f       	subi	r21, 0xFE	; 254
    a9e0:	60 61       	ori	r22, 0x10	; 16
    a9e2:	62 63       	ori	r22, 0x32	; 50
    a9e4:	64 65       	ori	r22, 0x54	; 84
    a9e6:	66 67       	ori	r22, 0x76	; 118
    a9e8:	68 69       	ori	r22, 0x98	; 152
    a9ea:	6a 6b       	ori	r22, 0xBA	; 186
    a9ec:	6c 6d       	ori	r22, 0xDC	; 220
    a9ee:	6e 6f       	ori	r22, 0xFE	; 254
    a9f0:	70 71       	andi	r23, 0x10	; 16
    a9f2:	72 73       	andi	r23, 0x32	; 50
    a9f4:	74 75       	andi	r23, 0x54	; 84
    a9f6:	76 77       	andi	r23, 0x76	; 118
    a9f8:	78 79       	andi	r23, 0x98	; 152
    a9fa:	7a 7b       	andi	r23, 0xBA	; 186
    a9fc:	7c 7d       	andi	r23, 0xDC	; 220
    a9fe:	7e 7f       	andi	r23, 0xFE	; 254
    aa00:	00 02       	muls	r16, r16
    aa02:	04 06       	cpc	r0, r20
    aa04:	08 0a       	sbc	r0, r24
    aa06:	0c 0e       	add	r0, r28
    aa08:	10 12       	cpse	r1, r16
    aa0a:	14 16       	cp	r1, r20
    aa0c:	18 1a       	sub	r1, r24
    aa0e:	1c 1e       	adc	r1, r28
    aa10:	20 22       	and	r2, r16
    aa12:	24 26       	eor	r2, r20
    aa14:	28 2a       	or	r2, r24
    aa16:	2c 2e       	mov	r2, r28
    aa18:	30 32       	cpi	r19, 0x20	; 32
    aa1a:	34 36       	cpi	r19, 0x64	; 100
    aa1c:	38 3a       	cpi	r19, 0xA8	; 168
    aa1e:	3c 3e       	cpi	r19, 0xEC	; 236
    aa20:	40 42       	sbci	r20, 0x20	; 32
    aa22:	44 46       	sbci	r20, 0x64	; 100
    aa24:	48 4a       	sbci	r20, 0xA8	; 168
    aa26:	4c 4e       	sbci	r20, 0xEC	; 236
    aa28:	50 52       	subi	r21, 0x20	; 32
    aa2a:	54 56       	subi	r21, 0x64	; 100
    aa2c:	58 5a       	subi	r21, 0xA8	; 168
    aa2e:	5c 5e       	subi	r21, 0xEC	; 236
    aa30:	60 62       	ori	r22, 0x20	; 32
    aa32:	64 66       	ori	r22, 0x64	; 100
    aa34:	68 6a       	ori	r22, 0xA8	; 168
    aa36:	6c 6e       	ori	r22, 0xEC	; 236
    aa38:	70 72       	andi	r23, 0x20	; 32
    aa3a:	74 76       	andi	r23, 0x64	; 100
    aa3c:	78 7a       	andi	r23, 0xA8	; 168
    aa3e:	7c 7e       	andi	r23, 0xEC	; 236
    aa40:	7f 7d       	andi	r23, 0xDF	; 223
    aa42:	7b 79       	andi	r23, 0x9B	; 155
    aa44:	77 75       	andi	r23, 0x57	; 87
    aa46:	73 71       	andi	r23, 0x13	; 19
    aa48:	6f 6d       	ori	r22, 0xDF	; 223
    aa4a:	6b 69       	ori	r22, 0x9B	; 155
    aa4c:	67 65       	ori	r22, 0x57	; 87
    aa4e:	63 61       	ori	r22, 0x13	; 19
    aa50:	5f 5d       	subi	r21, 0xDF	; 223
    aa52:	5b 59       	subi	r21, 0x9B	; 155
    aa54:	57 55       	subi	r21, 0x57	; 87
    aa56:	53 51       	subi	r21, 0x13	; 19
    aa58:	4f 4d       	sbci	r20, 0xDF	; 223
    aa5a:	4b 49       	sbci	r20, 0x9B	; 155
    aa5c:	47 45       	sbci	r20, 0x57	; 87
    aa5e:	43 41       	sbci	r20, 0x13	; 19
    aa60:	3f 3d       	cpi	r19, 0xDF	; 223
    aa62:	3b 39       	cpi	r19, 0x9B	; 155
    aa64:	37 35       	cpi	r19, 0x57	; 87
    aa66:	33 31       	cpi	r19, 0x13	; 19
    aa68:	2f 2d       	mov	r18, r15
    aa6a:	2b 29       	or	r18, r11
    aa6c:	27 25       	eor	r18, r7
    aa6e:	23 21       	and	r18, r3
    aa70:	1f 1d       	adc	r17, r15
    aa72:	1b 19       	sub	r17, r11
    aa74:	17 15       	cp	r17, r7
    aa76:	13 11       	cpse	r17, r3
    aa78:	0f 0d       	add	r16, r15
    aa7a:	0b 09       	sbc	r16, r11
    aa7c:	07 05       	cpc	r16, r7
    aa7e:	03 01       	movw	r0, r6
    aa80:	ff fd       	.word	0xfdff	; ????
    aa82:	fb f9       	.word	0xf9fb	; ????
    aa84:	f7 f5       	brid	.+124    	; 0xab02 <waves+0x302>
    aa86:	f3 f1       	brvs	.+124    	; 0xab04 <waves+0x304>
    aa88:	ef ed       	ldi	r30, 0xDF	; 223
    aa8a:	eb e9       	ldi	r30, 0x9B	; 155
    aa8c:	e7 e5       	ldi	r30, 0x57	; 87
    aa8e:	e3 e1       	ldi	r30, 0x13	; 19
    aa90:	df dd       	rcall	.-1090   	; 0xa650 <steptable+0x48>
    aa92:	db d9       	rcall	.-3146   	; 0x9e4a <TriggerCommon+0x14>
    aa94:	d7 d5       	rcall	.+2990   	; 0xb644 <FadeIn+0x4>
    aa96:	d3 d1       	rcall	.+934    	; 0xae3e <waves+0x63e>
    aa98:	cf cd       	rjmp	.-1122   	; 0xa638 <steptable+0x30>
    aa9a:	cb c9       	rjmp	.-3178   	; 0x9e32 <ReadVarLen+0x48>
    aa9c:	c7 c5       	rjmp	.+2958   	; 0xb62c <doFade+0x8>
    aa9e:	c3 c1       	rjmp	.+902    	; 0xae26 <waves+0x626>
    aaa0:	bf bd       	out	0x2f, r27	; 47
    aaa2:	bb b9       	out	0x0b, r27	; 11
    aaa4:	b7 b5       	in	r27, 0x27	; 39
    aaa6:	b3 b1       	in	r27, 0x03	; 3
    aaa8:	af ad       	ldd	r26, Y+63	; 0x3f
    aaaa:	ab a9       	ldd	r26, Y+51	; 0x33
    aaac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    aaae:	a3 a1       	ldd	r26, Z+35	; 0x23
    aab0:	9f 9d       	mul	r25, r15
    aab2:	9b 99       	sbic	0x13, 3	; 19
    aab4:	97 95       	ror	r25
    aab6:	93 91       	.word	0x9193	; ????
    aab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    aaba:	8b 89       	ldd	r24, Y+19	; 0x13
    aabc:	87 85       	ldd	r24, Z+15	; 0x0f
    aabe:	83 81       	ldd	r24, Z+3	; 0x03
    aac0:	80 82       	st	Z, r8
    aac2:	84 86       	std	Z+12, r8	; 0x0c
    aac4:	88 8a       	std	Y+16, r8	; 0x10
    aac6:	8c 8e       	std	Y+28, r8	; 0x1c
    aac8:	90 92 94 96 	sts	0x9694, r9
    aacc:	98 9a       	sbi	0x13, 0	; 19
    aace:	9c 9e       	mul	r9, r28
    aad0:	a0 a2       	std	Z+32, r10	; 0x20
    aad2:	a4 a6       	std	Z+44, r10	; 0x2c
    aad4:	a8 aa       	std	Y+48, r10	; 0x30
    aad6:	ac ae       	std	Y+60, r10	; 0x3c
    aad8:	b0 b2       	in	r11, 0x10	; 16
    aada:	b4 b6       	in	r11, 0x34	; 52
    aadc:	b8 ba       	out	0x18, r11	; 24
    aade:	bc be       	out	0x3c, r11	; 60
    aae0:	c0 c2       	rjmp	.+1408   	; 0xb062 <waves+0x862>
    aae2:	c4 c6       	rjmp	.+3464   	; 0xb86c <LBMoveSprite+0x6>
    aae4:	c8 ca       	rjmp	.-2672   	; 0xa076 <ProcessMusic+0x14>
    aae6:	cc ce       	rjmp	.-616    	; 0xa880 <waves+0x80>
    aae8:	d0 d2       	rcall	.+1440   	; 0xb08a <waves+0x88a>
    aaea:	d4 d6       	rcall	.+3496   	; 0xb894 <LBMoveSprite+0x2e>
    aaec:	d8 da       	rcall	.-2640   	; 0xa09e <ProcessMusic+0x3c>
    aaee:	dc de       	rcall	.-584    	; 0xa8a8 <waves+0xa8>
    aaf0:	e0 e2       	ldi	r30, 0x20	; 32
    aaf2:	e4 e6       	ldi	r30, 0x64	; 100
    aaf4:	e8 ea       	ldi	r30, 0xA8	; 168
    aaf6:	ec ee       	ldi	r30, 0xEC	; 236
    aaf8:	f0 f2       	brcs	.-68     	; 0xaab6 <waves+0x2b6>
    aafa:	f4 f6       	brge	.-68     	; 0xaab8 <waves+0x2b8>
    aafc:	f8 fa       	.word	0xfaf8	; ????
    aafe:	fc fe       	.word	0xfefc	; ????
    ab00:	7f 7f       	andi	r23, 0xFF	; 255
    ab02:	7f 7f       	andi	r23, 0xFF	; 255
    ab04:	7f 7f       	andi	r23, 0xFF	; 255
    ab06:	7f 7f       	andi	r23, 0xFF	; 255
    ab08:	7f 7f       	andi	r23, 0xFF	; 255
    ab0a:	7f 7f       	andi	r23, 0xFF	; 255
    ab0c:	7f 7f       	andi	r23, 0xFF	; 255
    ab0e:	7f 7f       	andi	r23, 0xFF	; 255
    ab10:	7f 7f       	andi	r23, 0xFF	; 255
    ab12:	7f 7f       	andi	r23, 0xFF	; 255
    ab14:	7f 7f       	andi	r23, 0xFF	; 255
    ab16:	7f 7f       	andi	r23, 0xFF	; 255
    ab18:	7f 7f       	andi	r23, 0xFF	; 255
    ab1a:	7f 7f       	andi	r23, 0xFF	; 255
    ab1c:	7f 7f       	andi	r23, 0xFF	; 255
    ab1e:	7f 7f       	andi	r23, 0xFF	; 255
    ab20:	7f 7f       	andi	r23, 0xFF	; 255
    ab22:	7f 7f       	andi	r23, 0xFF	; 255
    ab24:	7f 7f       	andi	r23, 0xFF	; 255
    ab26:	7f 7f       	andi	r23, 0xFF	; 255
    ab28:	7f 7f       	andi	r23, 0xFF	; 255
    ab2a:	7f 7f       	andi	r23, 0xFF	; 255
    ab2c:	7f 7f       	andi	r23, 0xFF	; 255
    ab2e:	7f 7f       	andi	r23, 0xFF	; 255
    ab30:	7f 7f       	andi	r23, 0xFF	; 255
    ab32:	7f 7f       	andi	r23, 0xFF	; 255
    ab34:	7f 7f       	andi	r23, 0xFF	; 255
    ab36:	7f 7f       	andi	r23, 0xFF	; 255
    ab38:	7f 7f       	andi	r23, 0xFF	; 255
    ab3a:	7f 7f       	andi	r23, 0xFF	; 255
    ab3c:	7f 7f       	andi	r23, 0xFF	; 255
    ab3e:	7f 7f       	andi	r23, 0xFF	; 255
    ab40:	80 80       	ld	r8, Z
    ab42:	80 80       	ld	r8, Z
    ab44:	80 80       	ld	r8, Z
    ab46:	80 80       	ld	r8, Z
    ab48:	80 80       	ld	r8, Z
    ab4a:	80 80       	ld	r8, Z
    ab4c:	80 80       	ld	r8, Z
    ab4e:	80 80       	ld	r8, Z
    ab50:	80 80       	ld	r8, Z
    ab52:	80 80       	ld	r8, Z
    ab54:	80 80       	ld	r8, Z
    ab56:	80 80       	ld	r8, Z
    ab58:	80 80       	ld	r8, Z
    ab5a:	80 80       	ld	r8, Z
    ab5c:	80 80       	ld	r8, Z
    ab5e:	80 80       	ld	r8, Z
    ab60:	80 80       	ld	r8, Z
    ab62:	80 80       	ld	r8, Z
    ab64:	80 80       	ld	r8, Z
    ab66:	80 80       	ld	r8, Z
    ab68:	80 80       	ld	r8, Z
    ab6a:	80 80       	ld	r8, Z
    ab6c:	80 80       	ld	r8, Z
    ab6e:	80 80       	ld	r8, Z
    ab70:	80 80       	ld	r8, Z
    ab72:	80 80       	ld	r8, Z
    ab74:	80 80       	ld	r8, Z
    ab76:	80 80       	ld	r8, Z
    ab78:	80 80       	ld	r8, Z
    ab7a:	80 80       	ld	r8, Z
    ab7c:	80 80       	ld	r8, Z
    ab7e:	80 80       	ld	r8, Z
    ab80:	80 80       	ld	r8, Z
    ab82:	80 80       	ld	r8, Z
    ab84:	80 80       	ld	r8, Z
    ab86:	80 80       	ld	r8, Z
    ab88:	80 80       	ld	r8, Z
    ab8a:	80 80       	ld	r8, Z
    ab8c:	80 80       	ld	r8, Z
    ab8e:	80 80       	ld	r8, Z
    ab90:	80 80       	ld	r8, Z
    ab92:	80 80       	ld	r8, Z
    ab94:	80 80       	ld	r8, Z
    ab96:	80 80       	ld	r8, Z
    ab98:	80 80       	ld	r8, Z
    ab9a:	80 80       	ld	r8, Z
    ab9c:	80 80       	ld	r8, Z
    ab9e:	80 80       	ld	r8, Z
    aba0:	80 80       	ld	r8, Z
    aba2:	80 80       	ld	r8, Z
    aba4:	80 80       	ld	r8, Z
    aba6:	80 80       	ld	r8, Z
    aba8:	80 80       	ld	r8, Z
    abaa:	80 80       	ld	r8, Z
    abac:	80 80       	ld	r8, Z
    abae:	80 80       	ld	r8, Z
    abb0:	80 80       	ld	r8, Z
    abb2:	80 80       	ld	r8, Z
    abb4:	80 80       	ld	r8, Z
    abb6:	80 80       	ld	r8, Z
    abb8:	80 80       	ld	r8, Z
    abba:	80 80       	ld	r8, Z
    abbc:	80 80       	ld	r8, Z
    abbe:	80 80       	ld	r8, Z
    abc0:	80 80       	ld	r8, Z
    abc2:	80 80       	ld	r8, Z
    abc4:	80 80       	ld	r8, Z
    abc6:	80 80       	ld	r8, Z
    abc8:	80 80       	ld	r8, Z
    abca:	80 80       	ld	r8, Z
    abcc:	80 80       	ld	r8, Z
    abce:	80 80       	ld	r8, Z
    abd0:	80 80       	ld	r8, Z
    abd2:	80 80       	ld	r8, Z
    abd4:	80 80       	ld	r8, Z
    abd6:	80 80       	ld	r8, Z
    abd8:	80 80       	ld	r8, Z
    abda:	80 80       	ld	r8, Z
    abdc:	80 80       	ld	r8, Z
    abde:	80 80       	ld	r8, Z
    abe0:	80 80       	ld	r8, Z
    abe2:	80 80       	ld	r8, Z
    abe4:	80 80       	ld	r8, Z
    abe6:	80 80       	ld	r8, Z
    abe8:	80 80       	ld	r8, Z
    abea:	80 80       	ld	r8, Z
    abec:	80 80       	ld	r8, Z
    abee:	80 80       	ld	r8, Z
    abf0:	80 80       	ld	r8, Z
    abf2:	80 80       	ld	r8, Z
    abf4:	80 80       	ld	r8, Z
    abf6:	80 80       	ld	r8, Z
    abf8:	80 80       	ld	r8, Z
    abfa:	80 80       	ld	r8, Z
    abfc:	80 80       	ld	r8, Z
    abfe:	80 80       	ld	r8, Z
    ac00:	7f 7f       	andi	r23, 0xFF	; 255
    ac02:	7f 7f       	andi	r23, 0xFF	; 255
    ac04:	7f 7f       	andi	r23, 0xFF	; 255
    ac06:	7f 7f       	andi	r23, 0xFF	; 255
    ac08:	7f 7f       	andi	r23, 0xFF	; 255
    ac0a:	7f 7f       	andi	r23, 0xFF	; 255
    ac0c:	7f 7f       	andi	r23, 0xFF	; 255
    ac0e:	7f 7f       	andi	r23, 0xFF	; 255
    ac10:	7f 7f       	andi	r23, 0xFF	; 255
    ac12:	7f 7f       	andi	r23, 0xFF	; 255
    ac14:	7f 7f       	andi	r23, 0xFF	; 255
    ac16:	7f 7f       	andi	r23, 0xFF	; 255
    ac18:	7f 7f       	andi	r23, 0xFF	; 255
    ac1a:	7f 7f       	andi	r23, 0xFF	; 255
    ac1c:	7f 7f       	andi	r23, 0xFF	; 255
    ac1e:	7f 7f       	andi	r23, 0xFF	; 255
    ac20:	7f 7f       	andi	r23, 0xFF	; 255
    ac22:	7f 7f       	andi	r23, 0xFF	; 255
    ac24:	7f 7f       	andi	r23, 0xFF	; 255
    ac26:	7f 7f       	andi	r23, 0xFF	; 255
    ac28:	7f 7f       	andi	r23, 0xFF	; 255
    ac2a:	7f 7f       	andi	r23, 0xFF	; 255
    ac2c:	7f 7f       	andi	r23, 0xFF	; 255
    ac2e:	7f 7f       	andi	r23, 0xFF	; 255
    ac30:	7f 7f       	andi	r23, 0xFF	; 255
    ac32:	7f 7f       	andi	r23, 0xFF	; 255
    ac34:	7f 7f       	andi	r23, 0xFF	; 255
    ac36:	7f 7f       	andi	r23, 0xFF	; 255
    ac38:	7f 7f       	andi	r23, 0xFF	; 255
    ac3a:	7f 7f       	andi	r23, 0xFF	; 255
    ac3c:	7f 7f       	andi	r23, 0xFF	; 255
    ac3e:	7f 7f       	andi	r23, 0xFF	; 255
    ac40:	7f 7f       	andi	r23, 0xFF	; 255
    ac42:	7f 7f       	andi	r23, 0xFF	; 255
    ac44:	7f 7f       	andi	r23, 0xFF	; 255
    ac46:	7f 7f       	andi	r23, 0xFF	; 255
    ac48:	7f 7f       	andi	r23, 0xFF	; 255
    ac4a:	7f 7f       	andi	r23, 0xFF	; 255
    ac4c:	7f 7f       	andi	r23, 0xFF	; 255
    ac4e:	7f 7f       	andi	r23, 0xFF	; 255
    ac50:	7f 7f       	andi	r23, 0xFF	; 255
    ac52:	7f 7f       	andi	r23, 0xFF	; 255
    ac54:	7f 7f       	andi	r23, 0xFF	; 255
    ac56:	7f 7f       	andi	r23, 0xFF	; 255
    ac58:	7f 7f       	andi	r23, 0xFF	; 255
    ac5a:	7f 7f       	andi	r23, 0xFF	; 255
    ac5c:	7f 7f       	andi	r23, 0xFF	; 255
    ac5e:	7f 7f       	andi	r23, 0xFF	; 255
    ac60:	7f 7f       	andi	r23, 0xFF	; 255
    ac62:	7f 7f       	andi	r23, 0xFF	; 255
    ac64:	7f 7f       	andi	r23, 0xFF	; 255
    ac66:	7f 7f       	andi	r23, 0xFF	; 255
    ac68:	7f 7f       	andi	r23, 0xFF	; 255
    ac6a:	7f 7f       	andi	r23, 0xFF	; 255
    ac6c:	7f 7f       	andi	r23, 0xFF	; 255
    ac6e:	7f 7f       	andi	r23, 0xFF	; 255
    ac70:	7f 7f       	andi	r23, 0xFF	; 255
    ac72:	7f 7f       	andi	r23, 0xFF	; 255
    ac74:	7f 7f       	andi	r23, 0xFF	; 255
    ac76:	7f 7f       	andi	r23, 0xFF	; 255
    ac78:	7f 7f       	andi	r23, 0xFF	; 255
    ac7a:	7f 7f       	andi	r23, 0xFF	; 255
    ac7c:	7f 7f       	andi	r23, 0xFF	; 255
    ac7e:	7f 7f       	andi	r23, 0xFF	; 255
    ac80:	80 80       	ld	r8, Z
    ac82:	80 80       	ld	r8, Z
    ac84:	80 80       	ld	r8, Z
    ac86:	80 80       	ld	r8, Z
    ac88:	80 80       	ld	r8, Z
    ac8a:	80 80       	ld	r8, Z
    ac8c:	80 80       	ld	r8, Z
    ac8e:	80 80       	ld	r8, Z
    ac90:	80 80       	ld	r8, Z
    ac92:	80 80       	ld	r8, Z
    ac94:	80 80       	ld	r8, Z
    ac96:	80 80       	ld	r8, Z
    ac98:	80 80       	ld	r8, Z
    ac9a:	80 80       	ld	r8, Z
    ac9c:	80 80       	ld	r8, Z
    ac9e:	80 80       	ld	r8, Z
    aca0:	80 80       	ld	r8, Z
    aca2:	80 80       	ld	r8, Z
    aca4:	80 80       	ld	r8, Z
    aca6:	80 80       	ld	r8, Z
    aca8:	80 80       	ld	r8, Z
    acaa:	80 80       	ld	r8, Z
    acac:	80 80       	ld	r8, Z
    acae:	80 80       	ld	r8, Z
    acb0:	80 80       	ld	r8, Z
    acb2:	80 80       	ld	r8, Z
    acb4:	80 80       	ld	r8, Z
    acb6:	80 80       	ld	r8, Z
    acb8:	80 80       	ld	r8, Z
    acba:	80 80       	ld	r8, Z
    acbc:	80 80       	ld	r8, Z
    acbe:	80 80       	ld	r8, Z
    acc0:	80 80       	ld	r8, Z
    acc2:	80 80       	ld	r8, Z
    acc4:	80 80       	ld	r8, Z
    acc6:	80 80       	ld	r8, Z
    acc8:	80 80       	ld	r8, Z
    acca:	80 80       	ld	r8, Z
    accc:	80 80       	ld	r8, Z
    acce:	80 80       	ld	r8, Z
    acd0:	80 80       	ld	r8, Z
    acd2:	80 80       	ld	r8, Z
    acd4:	80 80       	ld	r8, Z
    acd6:	80 80       	ld	r8, Z
    acd8:	80 80       	ld	r8, Z
    acda:	80 80       	ld	r8, Z
    acdc:	80 80       	ld	r8, Z
    acde:	80 80       	ld	r8, Z
    ace0:	80 80       	ld	r8, Z
    ace2:	80 80       	ld	r8, Z
    ace4:	80 80       	ld	r8, Z
    ace6:	80 80       	ld	r8, Z
    ace8:	80 80       	ld	r8, Z
    acea:	80 80       	ld	r8, Z
    acec:	80 80       	ld	r8, Z
    acee:	80 80       	ld	r8, Z
    acf0:	80 80       	ld	r8, Z
    acf2:	80 80       	ld	r8, Z
    acf4:	80 80       	ld	r8, Z
    acf6:	80 80       	ld	r8, Z
    acf8:	80 80       	ld	r8, Z
    acfa:	80 80       	ld	r8, Z
    acfc:	80 80       	ld	r8, Z
    acfe:	80 80       	ld	r8, Z
    ad00:	7f 7f       	andi	r23, 0xFF	; 255
    ad02:	7f 7f       	andi	r23, 0xFF	; 255
    ad04:	7f 7f       	andi	r23, 0xFF	; 255
    ad06:	7f 7f       	andi	r23, 0xFF	; 255
    ad08:	7f 7f       	andi	r23, 0xFF	; 255
    ad0a:	7f 7f       	andi	r23, 0xFF	; 255
    ad0c:	7f 7f       	andi	r23, 0xFF	; 255
    ad0e:	7f 7f       	andi	r23, 0xFF	; 255
    ad10:	7f 7f       	andi	r23, 0xFF	; 255
    ad12:	7f 7f       	andi	r23, 0xFF	; 255
    ad14:	7f 7f       	andi	r23, 0xFF	; 255
    ad16:	7f 7f       	andi	r23, 0xFF	; 255
    ad18:	7f 7f       	andi	r23, 0xFF	; 255
    ad1a:	7f 7f       	andi	r23, 0xFF	; 255
    ad1c:	7f 7f       	andi	r23, 0xFF	; 255
    ad1e:	7f 7f       	andi	r23, 0xFF	; 255
    ad20:	7f 7f       	andi	r23, 0xFF	; 255
    ad22:	7f 7f       	andi	r23, 0xFF	; 255
    ad24:	7f 7f       	andi	r23, 0xFF	; 255
    ad26:	7f 7f       	andi	r23, 0xFF	; 255
    ad28:	7f 7f       	andi	r23, 0xFF	; 255
    ad2a:	7f 7f       	andi	r23, 0xFF	; 255
    ad2c:	7f 7f       	andi	r23, 0xFF	; 255
    ad2e:	7f 7f       	andi	r23, 0xFF	; 255
    ad30:	7f 7f       	andi	r23, 0xFF	; 255
    ad32:	7f 7f       	andi	r23, 0xFF	; 255
    ad34:	7f 7f       	andi	r23, 0xFF	; 255
    ad36:	7f 7f       	andi	r23, 0xFF	; 255
    ad38:	7f 7f       	andi	r23, 0xFF	; 255
    ad3a:	7f 7f       	andi	r23, 0xFF	; 255
    ad3c:	7f 7f       	andi	r23, 0xFF	; 255
    ad3e:	7f 7f       	andi	r23, 0xFF	; 255
    ad40:	7f 7f       	andi	r23, 0xFF	; 255
    ad42:	7f 7f       	andi	r23, 0xFF	; 255
    ad44:	7f 7f       	andi	r23, 0xFF	; 255
    ad46:	7f 7f       	andi	r23, 0xFF	; 255
    ad48:	7f 7f       	andi	r23, 0xFF	; 255
    ad4a:	7f 7f       	andi	r23, 0xFF	; 255
    ad4c:	7f 7f       	andi	r23, 0xFF	; 255
    ad4e:	7f 7f       	andi	r23, 0xFF	; 255
    ad50:	7f 7f       	andi	r23, 0xFF	; 255
    ad52:	7f 7f       	andi	r23, 0xFF	; 255
    ad54:	7f 7f       	andi	r23, 0xFF	; 255
    ad56:	7f 7f       	andi	r23, 0xFF	; 255
    ad58:	7f 7f       	andi	r23, 0xFF	; 255
    ad5a:	7f 7f       	andi	r23, 0xFF	; 255
    ad5c:	7f 7f       	andi	r23, 0xFF	; 255
    ad5e:	7f 7f       	andi	r23, 0xFF	; 255
    ad60:	7f 7f       	andi	r23, 0xFF	; 255
    ad62:	7f 7f       	andi	r23, 0xFF	; 255
    ad64:	7f 7f       	andi	r23, 0xFF	; 255
    ad66:	7f 7f       	andi	r23, 0xFF	; 255
    ad68:	7f 7f       	andi	r23, 0xFF	; 255
    ad6a:	7f 7f       	andi	r23, 0xFF	; 255
    ad6c:	7f 7f       	andi	r23, 0xFF	; 255
    ad6e:	7f 7f       	andi	r23, 0xFF	; 255
    ad70:	7f 7f       	andi	r23, 0xFF	; 255
    ad72:	7f 7f       	andi	r23, 0xFF	; 255
    ad74:	7f 7f       	andi	r23, 0xFF	; 255
    ad76:	7f 7f       	andi	r23, 0xFF	; 255
    ad78:	7f 7f       	andi	r23, 0xFF	; 255
    ad7a:	7f 7f       	andi	r23, 0xFF	; 255
    ad7c:	7f 7f       	andi	r23, 0xFF	; 255
    ad7e:	7f 7f       	andi	r23, 0xFF	; 255
    ad80:	7f 7f       	andi	r23, 0xFF	; 255
    ad82:	7f 7f       	andi	r23, 0xFF	; 255
    ad84:	7f 7f       	andi	r23, 0xFF	; 255
    ad86:	7f 7f       	andi	r23, 0xFF	; 255
    ad88:	7f 7f       	andi	r23, 0xFF	; 255
    ad8a:	7f 7f       	andi	r23, 0xFF	; 255
    ad8c:	7f 7f       	andi	r23, 0xFF	; 255
    ad8e:	7f 7f       	andi	r23, 0xFF	; 255
    ad90:	7f 7f       	andi	r23, 0xFF	; 255
    ad92:	7f 7f       	andi	r23, 0xFF	; 255
    ad94:	7f 7f       	andi	r23, 0xFF	; 255
    ad96:	7f 7f       	andi	r23, 0xFF	; 255
    ad98:	7f 7f       	andi	r23, 0xFF	; 255
    ad9a:	7f 7f       	andi	r23, 0xFF	; 255
    ad9c:	7f 7f       	andi	r23, 0xFF	; 255
    ad9e:	7f 7f       	andi	r23, 0xFF	; 255
    ada0:	7f 7f       	andi	r23, 0xFF	; 255
    ada2:	7f 7f       	andi	r23, 0xFF	; 255
    ada4:	7f 7f       	andi	r23, 0xFF	; 255
    ada6:	7f 7f       	andi	r23, 0xFF	; 255
    ada8:	7f 7f       	andi	r23, 0xFF	; 255
    adaa:	7f 7f       	andi	r23, 0xFF	; 255
    adac:	7f 7f       	andi	r23, 0xFF	; 255
    adae:	7f 7f       	andi	r23, 0xFF	; 255
    adb0:	7f 7f       	andi	r23, 0xFF	; 255
    adb2:	7f 7f       	andi	r23, 0xFF	; 255
    adb4:	7f 7f       	andi	r23, 0xFF	; 255
    adb6:	7f 7f       	andi	r23, 0xFF	; 255
    adb8:	7f 7f       	andi	r23, 0xFF	; 255
    adba:	7f 7f       	andi	r23, 0xFF	; 255
    adbc:	7f 7f       	andi	r23, 0xFF	; 255
    adbe:	7f 7f       	andi	r23, 0xFF	; 255
    adc0:	80 80       	ld	r8, Z
    adc2:	80 80       	ld	r8, Z
    adc4:	80 80       	ld	r8, Z
    adc6:	80 80       	ld	r8, Z
    adc8:	80 80       	ld	r8, Z
    adca:	80 80       	ld	r8, Z
    adcc:	80 80       	ld	r8, Z
    adce:	80 80       	ld	r8, Z
    add0:	80 80       	ld	r8, Z
    add2:	80 80       	ld	r8, Z
    add4:	80 80       	ld	r8, Z
    add6:	80 80       	ld	r8, Z
    add8:	80 80       	ld	r8, Z
    adda:	80 80       	ld	r8, Z
    addc:	80 80       	ld	r8, Z
    adde:	80 80       	ld	r8, Z
    ade0:	80 80       	ld	r8, Z
    ade2:	80 80       	ld	r8, Z
    ade4:	80 80       	ld	r8, Z
    ade6:	80 80       	ld	r8, Z
    ade8:	80 80       	ld	r8, Z
    adea:	80 80       	ld	r8, Z
    adec:	80 80       	ld	r8, Z
    adee:	80 80       	ld	r8, Z
    adf0:	80 80       	ld	r8, Z
    adf2:	80 80       	ld	r8, Z
    adf4:	80 80       	ld	r8, Z
    adf6:	80 80       	ld	r8, Z
    adf8:	80 80       	ld	r8, Z
    adfa:	80 80       	ld	r8, Z
    adfc:	80 80       	ld	r8, Z
    adfe:	80 80       	ld	r8, Z
    ae00:	03 09       	sbc	r16, r3
    ae02:	13 1e       	adc	r1, r19
    ae04:	28 31       	cpi	r18, 0x18	; 24
    ae06:	3a 40       	sbci	r19, 0x0A	; 10
    ae08:	46 4c       	sbci	r20, 0xC6	; 198
    ae0a:	50 54       	subi	r21, 0x40	; 64
    ae0c:	58 5b       	subi	r21, 0xB8	; 184
    ae0e:	5e 61       	ori	r21, 0x1E	; 30
    ae10:	63 65       	ori	r22, 0x53	; 83
    ae12:	67 69       	ori	r22, 0x97	; 151
    ae14:	6b 6c       	ori	r22, 0xCB	; 203
    ae16:	6e 6f       	ori	r22, 0xFE	; 254
    ae18:	70 71       	andi	r23, 0x10	; 16
    ae1a:	72 73       	andi	r23, 0x32	; 50
    ae1c:	74 75       	andi	r23, 0x54	; 84
    ae1e:	76 77       	andi	r23, 0x76	; 118
    ae20:	77 78       	andi	r23, 0x87	; 135
    ae22:	79 79       	andi	r23, 0x99	; 153
    ae24:	7a 7a       	andi	r23, 0xAA	; 170
    ae26:	7b 7b       	andi	r23, 0xBB	; 187
    ae28:	7c 7c       	andi	r23, 0xCC	; 204
    ae2a:	7c 7d       	andi	r23, 0xDC	; 220
    ae2c:	7d 7d       	andi	r23, 0xDD	; 221
    ae2e:	7e 7e       	andi	r23, 0xEE	; 238
    ae30:	7e 7e       	andi	r23, 0xEE	; 238
    ae32:	7f 7f       	andi	r23, 0xFF	; 255
    ae34:	7f 7f       	andi	r23, 0xFF	; 255
    ae36:	7f 7f       	andi	r23, 0xFF	; 255
    ae38:	7f 7f       	andi	r23, 0xFF	; 255
    ae3a:	7f 7f       	andi	r23, 0xFF	; 255
    ae3c:	7f 7f       	andi	r23, 0xFF	; 255
    ae3e:	7f 7f       	andi	r23, 0xFF	; 255
    ae40:	7f 7f       	andi	r23, 0xFF	; 255
    ae42:	7f 7f       	andi	r23, 0xFF	; 255
    ae44:	7f 7f       	andi	r23, 0xFF	; 255
    ae46:	7f 7f       	andi	r23, 0xFF	; 255
    ae48:	7f 7f       	andi	r23, 0xFF	; 255
    ae4a:	7f 7f       	andi	r23, 0xFF	; 255
    ae4c:	7f 7e       	andi	r23, 0xEF	; 239
    ae4e:	7e 7e       	andi	r23, 0xEE	; 238
    ae50:	7e 7d       	andi	r23, 0xDE	; 222
    ae52:	7d 7d       	andi	r23, 0xDD	; 221
    ae54:	7c 7c       	andi	r23, 0xCC	; 204
    ae56:	7c 7b       	andi	r23, 0xBC	; 188
    ae58:	7b 7a       	andi	r23, 0xAB	; 171
    ae5a:	7a 79       	andi	r23, 0x9A	; 154
    ae5c:	79 78       	andi	r23, 0x89	; 137
    ae5e:	77 77       	andi	r23, 0x77	; 119
    ae60:	76 75       	andi	r23, 0x56	; 86
    ae62:	74 73       	andi	r23, 0x34	; 52
    ae64:	72 71       	andi	r23, 0x12	; 18
    ae66:	70 6f       	ori	r23, 0xF0	; 240
    ae68:	6e 6c       	ori	r22, 0xCE	; 206
    ae6a:	6b 69       	ori	r22, 0x9B	; 155
    ae6c:	67 65       	ori	r22, 0x57	; 87
    ae6e:	63 61       	ori	r22, 0x13	; 19
    ae70:	5e 5b       	subi	r21, 0xBE	; 190
    ae72:	58 54       	subi	r21, 0x48	; 72
    ae74:	50 4c       	sbci	r21, 0xC0	; 192
    ae76:	46 40       	sbci	r20, 0x06	; 6
    ae78:	3a 31       	cpi	r19, 0x1A	; 26
    ae7a:	28 1e       	adc	r2, r24
    ae7c:	13 09       	sbc	r17, r3
    ae7e:	03 00       	.word	0x0003	; ????
    ae80:	c6 cc       	rjmp	.-1652   	; 0xa80e <waves+0xe>
    ae82:	d5 db       	rcall	.-2134   	; 0xa62e <steptable+0x26>
    ae84:	df e3       	ldi	r29, 0x3F	; 63
    ae86:	e5 e7       	ldi	r30, 0x75	; 117
    ae88:	e9 ea       	ldi	r30, 0xA9	; 169
    ae8a:	eb ec       	ldi	r30, 0xCB	; 203
    ae8c:	ed ee       	ldi	r30, 0xED	; 237
    ae8e:	ef ef       	ldi	r30, 0xFF	; 255
    ae90:	f0 f0       	brcs	.+60     	; 0xaece <waves+0x6ce>
    ae92:	f0 f1       	brcs	.+124    	; 0xaf10 <waves+0x710>
    ae94:	f1 f1       	breq	.+124    	; 0xaf12 <waves+0x712>
    ae96:	f1 f2       	breq	.-68     	; 0xae54 <waves+0x654>
    ae98:	f2 f2       	brmi	.-68     	; 0xae56 <waves+0x656>
    ae9a:	f2 f2       	brmi	.-68     	; 0xae58 <waves+0x658>
    ae9c:	f2 f2       	brmi	.-68     	; 0xae5a <waves+0x65a>
    ae9e:	f2 f3       	brmi	.-4      	; 0xae9c <waves+0x69c>
    aea0:	f3 f3       	brvs	.-4      	; 0xae9e <waves+0x69e>
    aea2:	f3 f3       	brvs	.-4      	; 0xaea0 <waves+0x6a0>
    aea4:	f3 f3       	brvs	.-4      	; 0xaea2 <waves+0x6a2>
    aea6:	f3 f3       	brvs	.-4      	; 0xaea4 <waves+0x6a4>
    aea8:	f3 f3       	brvs	.-4      	; 0xaea6 <waves+0x6a6>
    aeaa:	f3 f3       	brvs	.-4      	; 0xaea8 <waves+0x6a8>
    aeac:	f3 f3       	brvs	.-4      	; 0xaeaa <waves+0x6aa>
    aeae:	f3 f3       	brvs	.-4      	; 0xaeac <waves+0x6ac>
    aeb0:	f3 f3       	brvs	.-4      	; 0xaeae <waves+0x6ae>
    aeb2:	f3 f3       	brvs	.-4      	; 0xaeb0 <waves+0x6b0>
    aeb4:	f3 f3       	brvs	.-4      	; 0xaeb2 <waves+0x6b2>
    aeb6:	f3 f3       	brvs	.-4      	; 0xaeb4 <waves+0x6b4>
    aeb8:	f3 f3       	brvs	.-4      	; 0xaeb6 <waves+0x6b6>
    aeba:	f3 f3       	brvs	.-4      	; 0xaeb8 <waves+0x6b8>
    aebc:	f3 f3       	brvs	.-4      	; 0xaeba <waves+0x6ba>
    aebe:	f3 f3       	brvs	.-4      	; 0xaebc <waves+0x6bc>
    aec0:	f3 f3       	brvs	.-4      	; 0xaebe <waves+0x6be>
    aec2:	f3 f3       	brvs	.-4      	; 0xaec0 <waves+0x6c0>
    aec4:	f3 f3       	brvs	.-4      	; 0xaec2 <waves+0x6c2>
    aec6:	f3 f3       	brvs	.-4      	; 0xaec4 <waves+0x6c4>
    aec8:	f3 f3       	brvs	.-4      	; 0xaec6 <waves+0x6c6>
    aeca:	f3 f3       	brvs	.-4      	; 0xaec8 <waves+0x6c8>
    aecc:	f3 f3       	brvs	.-4      	; 0xaeca <waves+0x6ca>
    aece:	f3 f3       	brvs	.-4      	; 0xaecc <waves+0x6cc>
    aed0:	f3 f3       	brvs	.-4      	; 0xaece <waves+0x6ce>
    aed2:	f3 f3       	brvs	.-4      	; 0xaed0 <waves+0x6d0>
    aed4:	f3 f3       	brvs	.-4      	; 0xaed2 <waves+0x6d2>
    aed6:	f3 f3       	brvs	.-4      	; 0xaed4 <waves+0x6d4>
    aed8:	f3 f3       	brvs	.-4      	; 0xaed6 <waves+0x6d6>
    aeda:	f3 f3       	brvs	.-4      	; 0xaed8 <waves+0x6d8>
    aedc:	f3 f3       	brvs	.-4      	; 0xaeda <waves+0x6da>
    aede:	f3 f3       	brvs	.-4      	; 0xaedc <waves+0x6dc>
    aee0:	f2 f2       	brmi	.-68     	; 0xae9e <waves+0x69e>
    aee2:	f2 f2       	brmi	.-68     	; 0xaea0 <waves+0x6a0>
    aee4:	f2 f2       	brmi	.-68     	; 0xaea2 <waves+0x6a2>
    aee6:	f2 f2       	brmi	.-68     	; 0xaea4 <waves+0x6a4>
    aee8:	f1 f1       	breq	.+124    	; 0xaf66 <waves+0x766>
    aeea:	f1 f1       	breq	.+124    	; 0xaf68 <waves+0x768>
    aeec:	f0 f0       	brcs	.+60     	; 0xaf2a <waves+0x72a>
    aeee:	f0 ef       	ldi	r31, 0xF0	; 240
    aef0:	ef ee       	ldi	r30, 0xEF	; 239
    aef2:	ed ec       	ldi	r30, 0xCD	; 205
    aef4:	eb ea       	ldi	r30, 0xAB	; 171
    aef6:	e9 e7       	ldi	r30, 0x79	; 121
    aef8:	e5 e3       	ldi	r30, 0x35	; 53
    aefa:	df db       	rcall	.-2114   	; 0xa6ba <steptable+0xb2>
    aefc:	d5 cc       	rjmp	.-1622   	; 0xa8a8 <waves+0xa8>
    aefe:	c6 00       	.word	0x00c6	; ????
    af00:	00 28       	or	r0, r0
    af02:	3d 42       	sbci	r19, 0x2D	; 45
    af04:	30 2d       	mov	r19, r0
    af06:	2c 2b       	or	r18, r28
    af08:	2c 2d       	mov	r18, r12
    af0a:	2e 2f       	mov	r18, r30
    af0c:	30 32       	cpi	r19, 0x20	; 32
    af0e:	33 35       	cpi	r19, 0x53	; 83
    af10:	37 39       	cpi	r19, 0x97	; 151
    af12:	3b 3d       	cpi	r19, 0xDB	; 219
    af14:	3f 41       	sbci	r19, 0x1F	; 31
    af16:	43 45       	sbci	r20, 0x53	; 83
    af18:	48 4a       	sbci	r20, 0xA8	; 168
    af1a:	4c 4e       	sbci	r20, 0xEC	; 236
    af1c:	50 53       	subi	r21, 0x30	; 48
    af1e:	55 57       	subi	r21, 0x75	; 117
    af20:	59 5b       	subi	r21, 0xB9	; 185
    af22:	5d 5f       	subi	r21, 0xFD	; 253
    af24:	61 63       	ori	r22, 0x31	; 49
    af26:	65 67       	ori	r22, 0x75	; 117
    af28:	69 6b       	ori	r22, 0xB9	; 185
    af2a:	6c 6e       	ori	r22, 0xEC	; 236
    af2c:	70 71       	andi	r23, 0x10	; 16
    af2e:	73 74       	andi	r23, 0x43	; 67
    af30:	75 77       	andi	r23, 0x75	; 117
    af32:	78 79       	andi	r23, 0x98	; 152
    af34:	7a 7b       	andi	r23, 0xBA	; 186
    af36:	7c 7d       	andi	r23, 0xDC	; 220
    af38:	7d 7e       	andi	r23, 0xED	; 237
    af3a:	7e 7f       	andi	r23, 0xFE	; 254
    af3c:	7f 7f       	andi	r23, 0xFF	; 255
    af3e:	7f 7f       	andi	r23, 0xFF	; 255
    af40:	7f 7f       	andi	r23, 0xFF	; 255
    af42:	7f 7f       	andi	r23, 0xFF	; 255
    af44:	7f 7f       	andi	r23, 0xFF	; 255
    af46:	7e 7e       	andi	r23, 0xEE	; 238
    af48:	7d 7d       	andi	r23, 0xDD	; 221
    af4a:	7c 7b       	andi	r23, 0xBC	; 188
    af4c:	7a 79       	andi	r23, 0x9A	; 154
    af4e:	78 77       	andi	r23, 0x78	; 120
    af50:	75 74       	andi	r23, 0x45	; 69
    af52:	73 71       	andi	r23, 0x13	; 19
    af54:	70 6e       	ori	r23, 0xE0	; 224
    af56:	6c 6b       	ori	r22, 0xBC	; 188
    af58:	69 67       	ori	r22, 0x79	; 121
    af5a:	65 63       	ori	r22, 0x35	; 53
    af5c:	61 5f       	subi	r22, 0xF1	; 241
    af5e:	5d 5b       	subi	r21, 0xBD	; 189
    af60:	59 57       	subi	r21, 0x79	; 121
    af62:	55 53       	subi	r21, 0x35	; 53
    af64:	50 4e       	sbci	r21, 0xE0	; 224
    af66:	4c 4a       	sbci	r20, 0xAC	; 172
    af68:	48 45       	sbci	r20, 0x58	; 88
    af6a:	43 41       	sbci	r20, 0x13	; 19
    af6c:	3f 3d       	cpi	r19, 0xDF	; 223
    af6e:	3b 39       	cpi	r19, 0x9B	; 155
    af70:	37 35       	cpi	r19, 0x57	; 87
    af72:	33 32       	cpi	r19, 0x23	; 35
    af74:	30 2f       	mov	r19, r16
    af76:	2e 2d       	mov	r18, r14
    af78:	2c 2b       	or	r18, r28
    af7a:	2c 2d       	mov	r18, r12
    af7c:	30 42       	sbci	r19, 0x20	; 32
    af7e:	3d 28       	or	r3, r13
    af80:	00 e9       	ldi	r16, 0x90	; 144
    af82:	e5 fe       	sbrs	r14, 5
    af84:	d4 d7       	rcall	.+4008   	; 0xbf2e <on_solid_ground+0x6a>
    af86:	d7 d7       	rcall	.+4014   	; 0xbf36 <on_solid_ground+0x72>
    af88:	d6 d4       	rcall	.+2476   	; 0xb936 <LBRotateSprites+0x54>
    af8a:	d2 d0       	rcall	.+420    	; 0xb130 <waves+0x930>
    af8c:	ce cc       	rjmp	.-1636   	; 0xa92a <waves+0x12a>
    af8e:	ca c8       	rjmp	.-3692   	; 0xa124 <ProcessMusic+0xc2>
    af90:	c6 c3       	rjmp	.+1932   	; 0xb71e <LBGetJoyPadState+0x10>
    af92:	c1 bf       	out	0x31, r28	; 49
    af94:	bd ba       	out	0x1d, r11	; 29
    af96:	b8 b6       	in	r11, 0x38	; 56
    af98:	b4 b1       	in	r27, 0x04	; 4
    af9a:	af ad       	ldd	r26, Y+63	; 0x3f
    af9c:	ab a9       	ldd	r26, Y+51	; 0x33
    af9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    afa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    afa2:	9f 9e       	mul	r9, r31
    afa4:	9c 9a       	sbi	0x13, 4	; 19
    afa6:	99 97       	sbiw	r26, 0x29	; 41
    afa8:	95 94       	asr	r9
    afaa:	93 91       	.word	0x9193	; ????
    afac:	90 8f       	std	Z+24, r25	; 0x18
    afae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    afb0:	8b 8a       	std	Y+19, r8	; 0x13
    afb2:	89 88       	ldd	r8, Y+17	; 0x11
    afb4:	88 87       	std	Y+8, r24	; 0x08
    afb6:	86 85       	ldd	r24, Z+14	; 0x0e
    afb8:	85 84       	ldd	r8, Z+13	; 0x0d
    afba:	84 84       	ldd	r8, Z+12	; 0x0c
    afbc:	83 83       	std	Z+3, r24	; 0x03
    afbe:	83 83       	std	Z+3, r24	; 0x03
    afc0:	83 83       	std	Z+3, r24	; 0x03
    afc2:	83 83       	std	Z+3, r24	; 0x03
    afc4:	83 84       	ldd	r8, Z+11	; 0x0b
    afc6:	84 84       	ldd	r8, Z+12	; 0x0c
    afc8:	85 85       	ldd	r24, Z+13	; 0x0d
    afca:	86 87       	std	Z+14, r24	; 0x0e
    afcc:	88 88       	ldd	r8, Y+16	; 0x10
    afce:	89 8a       	std	Y+17, r8	; 0x11
    afd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    afd2:	8d 8f       	std	Y+29, r24	; 0x1d
    afd4:	90 91 93 94 	lds	r25, 0x9493
    afd8:	95 97       	sbiw	r26, 0x25	; 37
    afda:	99 9a       	sbi	0x13, 1	; 19
    afdc:	9c 9e       	mul	r9, r28
    afde:	9f a1       	ldd	r25, Y+39	; 0x27
    afe0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    afe2:	a7 a9       	ldd	r26, Z+55	; 0x37
    afe4:	ab ad       	ldd	r26, Y+59	; 0x3b
    afe6:	af b1       	in	r26, 0x0f	; 15
    afe8:	b4 b6       	in	r11, 0x34	; 52
    afea:	b8 ba       	out	0x18, r11	; 24
    afec:	bd bf       	out	0x3d, r27	; 61
    afee:	c1 c3       	rjmp	.+1922   	; 0xb772 <LBGetJoyPadState+0x64>
    aff0:	c6 c8       	rjmp	.-3700   	; 0xa17e <ProcessMusic+0x11c>
    aff2:	ca cc       	rjmp	.-1644   	; 0xa988 <waves+0x188>
    aff4:	ce d0       	rcall	.+412    	; 0xb192 <waves+0x992>
    aff6:	d2 d4       	rcall	.+2468   	; 0xb99c <LBRotateSprites+0xba>
    aff8:	d6 d7       	rcall	.+4012   	; 0xbfa6 <on_solid_ground+0xe2>
    affa:	d7 d7       	rcall	.+4014   	; 0xbfaa <on_solid_ground+0xe6>
    affc:	d4 fe       	sbrs	r13, 4
    affe:	e5 e9       	ldi	r30, 0x95	; 149
    b000:	f9 f8       	.word	0xf8f9	; ????
    b002:	f9 f5       	brne	.+126    	; 0xb082 <waves+0x882>
    b004:	eb e1       	ldi	r30, 0x1B	; 27
    b006:	dd de       	rcall	.-582    	; 0xadc2 <waves+0x5c2>
    b008:	e0 e2       	ldi	r30, 0x20	; 32
    b00a:	e4 e5       	ldi	r30, 0x54	; 84
    b00c:	e6 e5       	ldi	r30, 0x56	; 86
    b00e:	e4 e2       	ldi	r30, 0x24	; 36
    b010:	de d9       	rcall	.-3140   	; 0xa3ce <ProcessMusic+0x36c>
    b012:	d2 ca       	rjmp	.-2652   	; 0xa5b8 <esmw+0xae>
    b014:	c1 b7       	in	r28, 0x31	; 49
    b016:	ac a2       	std	Y+36, r10	; 0x24
    b018:	99 91       	ld	r25, Y+
    b01a:	8a 86       	std	Y+10, r8	; 0x0a
    b01c:	83 81       	ldd	r24, Z+3	; 0x03
    b01e:	80 80       	ld	r8, Z
    b020:	81 82       	std	Z+1, r8	; 0x01
    b022:	83 85       	ldd	r24, Z+11	; 0x0b
    b024:	86 88       	ldd	r8, Z+22	; 0x16
    b026:	8a 8c       	ldd	r8, Y+26	; 0x1a
    b028:	8d 8f       	std	Y+29, r24	; 0x1d
    b02a:	90 92 93 95 	sts	0x9593, r9
    b02e:	96 97       	sbiw	r26, 0x26	; 38
    b030:	98 99       	sbic	0x13, 0	; 19
    b032:	9a 9b       	sbis	0x13, 2	; 19
    b034:	9b 9c       	mul	r9, r11
    b036:	9d 9d       	mul	r25, r13
    b038:	9d 9e       	mul	r9, r29
    b03a:	9e 9e       	mul	r9, r30
    b03c:	9f 9f       	mul	r25, r31
    b03e:	9f 9f       	mul	r25, r31
    b040:	9f 9f       	mul	r25, r31
    b042:	9f 9e       	mul	r9, r31
    b044:	9e 9e       	mul	r9, r30
    b046:	9d 9d       	mul	r25, r13
    b048:	9d 9c       	mul	r9, r13
    b04a:	9b 9b       	sbis	0x13, 3	; 19
    b04c:	9a 99       	sbic	0x13, 2	; 19
    b04e:	98 97       	sbiw	r26, 0x28	; 40
    b050:	96 95       	lsr	r25
    b052:	93 92       	.word	0x9293	; ????
    b054:	90 8f       	std	Z+24, r25	; 0x18
    b056:	8d 8c       	ldd	r8, Y+29	; 0x1d
    b058:	8a 88       	ldd	r8, Y+18	; 0x12
    b05a:	86 85       	ldd	r24, Z+14	; 0x0e
    b05c:	83 82       	std	Z+3, r8	; 0x03
    b05e:	81 80       	ldd	r8, Z+1	; 0x01
    b060:	80 81       	ld	r24, Z
    b062:	83 86       	std	Z+11, r8	; 0x0b
    b064:	8a 91       	ld	r24, -Y
    b066:	99 a2       	std	Y+33, r9	; 0x21
    b068:	ac b7       	in	r26, 0x3c	; 60
    b06a:	c1 ca       	rjmp	.-2686   	; 0xa5ee <esmw+0xe4>
    b06c:	d2 d9       	rcall	.-3164   	; 0xa412 <ProcessMusic+0x3b0>
    b06e:	de e2       	ldi	r29, 0x2E	; 46
    b070:	e4 e5       	ldi	r30, 0x54	; 84
    b072:	e6 e5       	ldi	r30, 0x56	; 86
    b074:	e4 e2       	ldi	r30, 0x24	; 36
    b076:	e0 de       	rcall	.-576    	; 0xae38 <waves+0x638>
    b078:	dd e1       	ldi	r29, 0x1D	; 29
    b07a:	eb f5       	brvc	.+122    	; 0xb0f6 <waves+0x8f6>
    b07c:	f9 f8       	.word	0xf8f9	; ????
    b07e:	f9 00       	.word	0x00f9	; ????
    b080:	07 08       	sbc	r0, r7
    b082:	07 0b       	sbc	r16, r23
    b084:	15 1f       	adc	r17, r21
    b086:	23 22       	and	r2, r19
    b088:	20 1e       	adc	r2, r16
    b08a:	1c 1b       	sub	r17, r28
    b08c:	1a 1b       	sub	r17, r26
    b08e:	1c 1e       	adc	r1, r28
    b090:	22 27       	eor	r18, r18
    b092:	2e 36       	cpi	r18, 0x6E	; 110
    b094:	3f 49       	sbci	r19, 0x9F	; 159
    b096:	54 5e       	subi	r21, 0xE4	; 228
    b098:	67 6f       	ori	r22, 0xF7	; 247
    b09a:	76 7a       	andi	r23, 0xA6	; 166
    b09c:	7e 7f       	andi	r23, 0xFE	; 254
    b09e:	7f 7f       	andi	r23, 0xFF	; 255
    b0a0:	7f 7e       	andi	r23, 0xEF	; 239
    b0a2:	7d 7b       	andi	r23, 0xBD	; 189
    b0a4:	7a 78       	andi	r23, 0x8A	; 138
    b0a6:	76 74       	andi	r23, 0x46	; 70
    b0a8:	73 71       	andi	r23, 0x13	; 19
    b0aa:	70 6e       	ori	r23, 0xE0	; 224
    b0ac:	6d 6b       	ori	r22, 0xBD	; 189
    b0ae:	6a 69       	ori	r22, 0x9A	; 154
    b0b0:	68 67       	ori	r22, 0x78	; 120
    b0b2:	66 65       	ori	r22, 0x56	; 86
    b0b4:	65 64       	ori	r22, 0x45	; 69
    b0b6:	64 63       	ori	r22, 0x34	; 52
    b0b8:	63 62       	ori	r22, 0x23	; 35
    b0ba:	62 62       	ori	r22, 0x22	; 34
    b0bc:	61 61       	ori	r22, 0x11	; 17
    b0be:	61 61       	ori	r22, 0x11	; 17
    b0c0:	61 61       	ori	r22, 0x11	; 17
    b0c2:	61 62       	ori	r22, 0x21	; 33
    b0c4:	62 62       	ori	r22, 0x22	; 34
    b0c6:	63 63       	ori	r22, 0x33	; 51
    b0c8:	63 64       	ori	r22, 0x43	; 67
    b0ca:	65 65       	ori	r22, 0x55	; 85
    b0cc:	66 67       	ori	r22, 0x76	; 118
    b0ce:	68 69       	ori	r22, 0x98	; 152
    b0d0:	6a 6b       	ori	r22, 0xBA	; 186
    b0d2:	6d 6e       	ori	r22, 0xED	; 237
    b0d4:	70 71       	andi	r23, 0x10	; 16
    b0d6:	73 74       	andi	r23, 0x43	; 67
    b0d8:	76 78       	andi	r23, 0x86	; 134
    b0da:	7a 7b       	andi	r23, 0xBA	; 186
    b0dc:	7d 7e       	andi	r23, 0xED	; 237
    b0de:	7f 7f       	andi	r23, 0xFF	; 255
    b0e0:	7f 7f       	andi	r23, 0xFF	; 255
    b0e2:	7e 7a       	andi	r23, 0xAE	; 174
    b0e4:	76 6f       	ori	r23, 0xF6	; 246
    b0e6:	67 5e       	subi	r22, 0xE7	; 231
    b0e8:	54 49       	sbci	r21, 0x94	; 148
    b0ea:	3f 36       	cpi	r19, 0x6F	; 111
    b0ec:	2e 27       	eor	r18, r30
    b0ee:	22 1e       	adc	r2, r18
    b0f0:	1c 1b       	sub	r17, r28
    b0f2:	1a 1b       	sub	r17, r26
    b0f4:	1c 1e       	adc	r1, r28
    b0f6:	20 22       	and	r2, r16
    b0f8:	23 1f       	adc	r18, r19
    b0fa:	15 0b       	sbc	r17, r21
    b0fc:	07 08       	sbc	r0, r7
    b0fe:	07 00       	.word	0x0007	; ????
    b100:	1f 31       	cpi	r17, 0x1F	; 31
    b102:	3d 44       	sbci	r19, 0x4D	; 77
    b104:	4e 53       	subi	r20, 0x3E	; 62
    b106:	54 56       	subi	r21, 0x64	; 100
    b108:	5a 5f       	subi	r21, 0xFA	; 250
    b10a:	64 69       	ori	r22, 0x94	; 148
    b10c:	6e 74       	andi	r22, 0x4E	; 78
    b10e:	76 79       	andi	r23, 0x96	; 150
    b110:	7c 7f       	andi	r23, 0xFC	; 252
    b112:	7f 7f       	andi	r23, 0xFF	; 255
    b114:	7f 7f       	andi	r23, 0xFF	; 255
    b116:	7f 7f       	andi	r23, 0xFF	; 255
    b118:	7f 7f       	andi	r23, 0xFF	; 255
    b11a:	7f 7f       	andi	r23, 0xFF	; 255
    b11c:	7f 7f       	andi	r23, 0xFF	; 255
    b11e:	7f 7f       	andi	r23, 0xFF	; 255
    b120:	7f 7f       	andi	r23, 0xFF	; 255
    b122:	7f 7f       	andi	r23, 0xFF	; 255
    b124:	7f 7f       	andi	r23, 0xFF	; 255
    b126:	7f 7f       	andi	r23, 0xFF	; 255
    b128:	7f 7f       	andi	r23, 0xFF	; 255
    b12a:	7f 7f       	andi	r23, 0xFF	; 255
    b12c:	7f 7f       	andi	r23, 0xFF	; 255
    b12e:	7f 7f       	andi	r23, 0xFF	; 255
    b130:	7f 7f       	andi	r23, 0xFF	; 255
    b132:	7f 7f       	andi	r23, 0xFF	; 255
    b134:	7f 7f       	andi	r23, 0xFF	; 255
    b136:	7f 7f       	andi	r23, 0xFF	; 255
    b138:	7f 7f       	andi	r23, 0xFF	; 255
    b13a:	7f 7f       	andi	r23, 0xFF	; 255
    b13c:	7f 7f       	andi	r23, 0xFF	; 255
    b13e:	7f 7f       	andi	r23, 0xFF	; 255
    b140:	7f 7f       	andi	r23, 0xFF	; 255
    b142:	7f 7f       	andi	r23, 0xFF	; 255
    b144:	7f 7f       	andi	r23, 0xFF	; 255
    b146:	7f 7f       	andi	r23, 0xFF	; 255
    b148:	7f 7f       	andi	r23, 0xFF	; 255
    b14a:	7f 7f       	andi	r23, 0xFF	; 255
    b14c:	7f 7f       	andi	r23, 0xFF	; 255
    b14e:	7f 7f       	andi	r23, 0xFF	; 255
    b150:	7f 7f       	andi	r23, 0xFF	; 255
    b152:	7f 7f       	andi	r23, 0xFF	; 255
    b154:	7f 7f       	andi	r23, 0xFF	; 255
    b156:	7f 7f       	andi	r23, 0xFF	; 255
    b158:	7f 7f       	andi	r23, 0xFF	; 255
    b15a:	7f 7f       	andi	r23, 0xFF	; 255
    b15c:	7f 7f       	andi	r23, 0xFF	; 255
    b15e:	7f 7f       	andi	r23, 0xFF	; 255
    b160:	7f 7f       	andi	r23, 0xFF	; 255
    b162:	7f 7f       	andi	r23, 0xFF	; 255
    b164:	7f 7f       	andi	r23, 0xFF	; 255
    b166:	7f 7f       	andi	r23, 0xFF	; 255
    b168:	7f 7f       	andi	r23, 0xFF	; 255
    b16a:	7f 7f       	andi	r23, 0xFF	; 255
    b16c:	7f 7f       	andi	r23, 0xFF	; 255
    b16e:	7f 7f       	andi	r23, 0xFF	; 255
    b170:	7f 7f       	andi	r23, 0xFF	; 255
    b172:	7f 7f       	andi	r23, 0xFF	; 255
    b174:	7f 7f       	andi	r23, 0xFF	; 255
    b176:	7f 7f       	andi	r23, 0xFF	; 255
    b178:	7f 7f       	andi	r23, 0xFF	; 255
    b17a:	7f 7c       	andi	r23, 0xCF	; 207
    b17c:	78 71       	andi	r23, 0x18	; 24
    b17e:	68 4c       	sbci	r22, 0xC8	; 200
    b180:	2c 1c       	adc	r2, r12
    b182:	12 0c       	add	r1, r2
    b184:	0a 0b       	sbc	r16, r26
    b186:	0a 05       	cpc	r16, r10
    b188:	fd f3       	brhs	.-2      	; 0xb188 <waves+0x988>
    b18a:	e9 df       	rcall	.-46     	; 0xb15e <waves+0x95e>
    b18c:	d4 ca       	rjmp	.-2648   	; 0xa736 <steptable+0x12e>
    b18e:	c0 b7       	in	r28, 0x30	; 48
    b190:	ae a6       	std	Y+46, r10	; 0x2e
    b192:	9e 97       	sbiw	r26, 0x2e	; 46
    b194:	91 8b       	std	Z+17, r25	; 0x11
    b196:	86 85       	ldd	r24, Z+14	; 0x0e
    b198:	82 80       	ldd	r8, Z+2	; 0x02
    b19a:	80 80       	ld	r8, Z
    b19c:	80 80       	ld	r8, Z
    b19e:	80 80       	ld	r8, Z
    b1a0:	80 80       	ld	r8, Z
    b1a2:	80 80       	ld	r8, Z
    b1a4:	80 80       	ld	r8, Z
    b1a6:	80 80       	ld	r8, Z
    b1a8:	80 80       	ld	r8, Z
    b1aa:	80 80       	ld	r8, Z
    b1ac:	80 80       	ld	r8, Z
    b1ae:	80 80       	ld	r8, Z
    b1b0:	80 80       	ld	r8, Z
    b1b2:	80 80       	ld	r8, Z
    b1b4:	80 80       	ld	r8, Z
    b1b6:	80 80       	ld	r8, Z
    b1b8:	80 80       	ld	r8, Z
    b1ba:	80 80       	ld	r8, Z
    b1bc:	80 80       	ld	r8, Z
    b1be:	80 80       	ld	r8, Z
    b1c0:	80 80       	ld	r8, Z
    b1c2:	80 80       	ld	r8, Z
    b1c4:	80 80       	ld	r8, Z
    b1c6:	80 80       	ld	r8, Z
    b1c8:	80 80       	ld	r8, Z
    b1ca:	80 80       	ld	r8, Z
    b1cc:	80 80       	ld	r8, Z
    b1ce:	80 80       	ld	r8, Z
    b1d0:	80 80       	ld	r8, Z
    b1d2:	80 80       	ld	r8, Z
    b1d4:	80 80       	ld	r8, Z
    b1d6:	80 80       	ld	r8, Z
    b1d8:	80 80       	ld	r8, Z
    b1da:	80 80       	ld	r8, Z
    b1dc:	80 80       	ld	r8, Z
    b1de:	80 80       	ld	r8, Z
    b1e0:	80 80       	ld	r8, Z
    b1e2:	80 80       	ld	r8, Z
    b1e4:	80 80       	ld	r8, Z
    b1e6:	80 80       	ld	r8, Z
    b1e8:	80 80       	ld	r8, Z
    b1ea:	80 80       	ld	r8, Z
    b1ec:	80 80       	ld	r8, Z
    b1ee:	80 80       	ld	r8, Z
    b1f0:	80 80       	ld	r8, Z
    b1f2:	80 80       	ld	r8, Z
    b1f4:	80 87       	std	Z+8, r24	; 0x08
    b1f6:	91 9d       	mul	r25, r1
    b1f8:	ac c4       	rjmp	.+2392   	; 0xbb52 <get_camera_y+0x8>
    b1fa:	cb d4       	rcall	.+2454   	; 0xbb92 <get_hero_spawn_y+0x14>
    b1fc:	dd f2       	brhs	.-74     	; 0xb1b4 <waves+0x9b4>
    b1fe:	fa fa       	.word	0xfafa	; ????

0000b200 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    b200:	80 91 db 0c 	lds	r24, 0x0CDB
    b204:	90 91 6a 0d 	lds	r25, 0x0D6A
    b208:	89 17       	cp	r24, r25
    b20a:	78 f4       	brcc	.+30     	; 0xb22a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    b20c:	e8 2f       	mov	r30, r24
    b20e:	f0 e0       	ldi	r31, 0x00	; 0
    b210:	9f 01       	movw	r18, r30
    b212:	22 0f       	add	r18, r18
    b214:	33 1f       	adc	r19, r19
    b216:	e2 0f       	add	r30, r18
    b218:	f3 1f       	adc	r31, r19
    b21a:	e6 5c       	subi	r30, 0xC6	; 198
    b21c:	f3 4f       	sbci	r31, 0xF3	; 243
    b21e:	a0 81       	ld	r26, Z
    b220:	b1 81       	ldd	r27, Z+1	; 0x01
    b222:	92 81       	ldd	r25, Z+2	; 0x02
    b224:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    b226:	8f 5f       	subi	r24, 0xFF	; 255
    b228:	ed cf       	rjmp	.-38     	; 0xb204 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    b22a:	08 95       	ret

0000b22c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    b22c:	2f 92       	push	r2
    b22e:	3f 92       	push	r3
    b230:	4f 92       	push	r4
    b232:	5f 92       	push	r5
    b234:	6f 92       	push	r6
    b236:	7f 92       	push	r7
    b238:	8f 92       	push	r8
    b23a:	9f 92       	push	r9
    b23c:	af 92       	push	r10
    b23e:	bf 92       	push	r11
    b240:	cf 92       	push	r12
    b242:	df 92       	push	r13
    b244:	ef 92       	push	r14
    b246:	ff 92       	push	r15
    b248:	0f 93       	push	r16
    b24a:	1f 93       	push	r17
    b24c:	cf 93       	push	r28
    b24e:	df 93       	push	r29
    b250:	00 d0       	rcall	.+0      	; 0xb252 <ProcessSprites+0x26>
    b252:	00 d0       	rcall	.+0      	; 0xb254 <ProcessSprites+0x28>
    b254:	cd b7       	in	r28, 0x3d	; 61
    b256:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    b258:	80 91 00 05 	lds	r24, 0x0500
    b25c:	88 23       	and	r24, r24
    b25e:	09 f4       	brne	.+2      	; 0xb262 <ProcessSprites+0x36>
    b260:	e0 c0       	rjmp	.+448    	; 0xb422 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    b262:	80 91 da 0c 	lds	r24, 0x0CDA
    b266:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    b26a:	80 93 6a 0d 	sts	0x0D6A, r24
    b26e:	e2 e0       	ldi	r30, 0x02	; 2
    b270:	ce 2e       	mov	r12, r30
    b272:	e5 e0       	ldi	r30, 0x05	; 5
    b274:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    b276:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    b278:	f6 01       	movw	r30, r12
    b27a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    b27c:	20 3e       	cpi	r18, 0xE0	; 224
    b27e:	09 f4       	brne	.+2      	; 0xb282 <ProcessSprites+0x56>
    b280:	b1 c0       	rjmp	.+354    	; 0xb3e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    b282:	80 91 9c 0c 	lds	r24, 0x0C9C
    b286:	90 e0       	ldi	r25, 0x00	; 0
    b288:	82 0f       	add	r24, r18
    b28a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    b28c:	41 81       	ldd	r20, Z+1	; 0x01
    b28e:	20 91 9d 0c 	lds	r18, 0x0C9D
    b292:	30 e0       	ldi	r19, 0x00	; 0
    b294:	24 0f       	add	r18, r20
    b296:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    b298:	ac 01       	movw	r20, r24
    b29a:	73 e0       	ldi	r23, 0x03	; 3
    b29c:	56 95       	lsr	r21
    b29e:	47 95       	ror	r20
    b2a0:	7a 95       	dec	r23
    b2a2:	e1 f7       	brne	.-8      	; 0xb29c <ProcessSprites+0x70>
    b2a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    b2a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    b2a8:	11 f0       	breq	.+4      	; 0xb2ae <ProcessSprites+0x82>
    b2aa:	92 e0       	ldi	r25, 0x02	; 2
    b2ac:	01 c0       	rjmp	.+2      	; 0xb2b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    b2ae:	91 e0       	ldi	r25, 0x01	; 1
    b2b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    b2b2:	a9 01       	movw	r20, r18
    b2b4:	63 e0       	ldi	r22, 0x03	; 3
    b2b6:	56 95       	lsr	r21
    b2b8:	47 95       	ror	r20
    b2ba:	6a 95       	dec	r22
    b2bc:	e1 f7       	brne	.-8      	; 0xb2b6 <ProcessSprites+0x8a>
    b2be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    b2c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    b2c2:	19 f0       	breq	.+6      	; 0xb2ca <ProcessSprites+0x9e>
    b2c4:	52 e0       	ldi	r21, 0x02	; 2
    b2c6:	35 2e       	mov	r3, r21
    b2c8:	02 c0       	rjmp	.+4      	; 0xb2ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    b2ca:	33 24       	eor	r3, r3
    b2cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    b2ce:	30 e0       	ldi	r19, 0x00	; 0
    b2d0:	32 2f       	mov	r19, r18
    b2d2:	22 27       	eor	r18, r18
    b2d4:	f9 01       	movw	r30, r18
    b2d6:	e8 0f       	add	r30, r24
    b2d8:	f1 1d       	adc	r31, r1
    b2da:	fc 83       	std	Y+4, r31	; 0x04
    b2dc:	eb 83       	std	Y+3, r30	; 0x03
    b2de:	e1 2c       	mov	r14, r1
    b2e0:	f1 2c       	mov	r15, r1
    b2e2:	be 2c       	mov	r11, r14
    b2e4:	aa 24       	eor	r10, r10
    b2e6:	26 2c       	mov	r2, r6
    b2e8:	45 2c       	mov	r4, r5
    b2ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    b2ec:	84 2c       	mov	r8, r4
    b2ee:	91 2c       	mov	r9, r1
    b2f0:	84 2d       	mov	r24, r4
    b2f2:	20 91 9e 0c 	lds	r18, 0x0C9E
    b2f6:	42 2f       	mov	r20, r18
    b2f8:	50 e0       	ldi	r21, 0x00	; 0
    b2fa:	44 0f       	add	r20, r20
    b2fc:	55 1f       	adc	r21, r21
    b2fe:	84 16       	cp	r8, r20
    b300:	95 06       	cpc	r9, r21
    b302:	14 f0       	brlt	.+4      	; 0xb308 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    b304:	22 0f       	add	r18, r18
    b306:	03 c0       	rjmp	.+6      	; 0xb30e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    b308:	42 16       	cp	r4, r18
    b30a:	10 f0       	brcs	.+4      	; 0xb310 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    b30c:	84 2d       	mov	r24, r4
    b30e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    b310:	ff e1       	ldi	r31, 0x1F	; 31
    b312:	f2 15       	cp	r31, r2
    b314:	18 f4       	brcc	.+6      	; 0xb31c <ProcessSprites+0xf0>
    b316:	00 ee       	ldi	r16, 0xE0	; 224
    b318:	02 0d       	add	r16, r2
    b31a:	01 c0       	rjmp	.+2      	; 0xb31e <ProcessSprites+0xf2>
    b31c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    b31e:	28 2f       	mov	r18, r24
    b320:	26 95       	lsr	r18
    b322:	26 95       	lsr	r18
    b324:	26 95       	lsr	r18
    b326:	10 e0       	ldi	r17, 0x00	; 0
    b328:	40 e2       	ldi	r20, 0x20	; 32
    b32a:	24 9f       	mul	r18, r20
    b32c:	00 0d       	add	r16, r0
    b32e:	11 1d       	adc	r17, r1
    b330:	11 24       	eor	r1, r1
    b332:	23 e0       	ldi	r18, 0x03	; 3
    b334:	00 0f       	add	r16, r16
    b336:	11 1f       	adc	r17, r17
    b338:	2a 95       	dec	r18
    b33a:	e1 f7       	brne	.-8      	; 0xb334 <ProcessSprites+0x108>
    b33c:	87 70       	andi	r24, 0x07	; 7
    b33e:	08 0f       	add	r16, r24
    b340:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    b342:	00 50       	subi	r16, 0x00	; 0
    b344:	1f 4f       	sbci	r17, 0xFF	; 255
    b346:	f8 01       	movw	r30, r16
    b348:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    b34a:	81 e0       	ldi	r24, 0x01	; 1
    b34c:	7c 31       	cpi	r23, 0x1C	; 28
    b34e:	08 f4       	brcc	.+2      	; 0xb352 <ProcessSprites+0x126>
    b350:	80 e0       	ldi	r24, 0x00	; 0
    b352:	21 e0       	ldi	r18, 0x01	; 1
    b354:	30 91 db 0c 	lds	r19, 0x0CDB
    b358:	73 17       	cp	r23, r19
    b35a:	18 f0       	brcs	.+6      	; 0xb362 <ProcessSprites+0x136>
    b35c:	20 e0       	ldi	r18, 0x00	; 0
    b35e:	88 23       	and	r24, r24
    b360:	51 f1       	breq	.+84     	; 0xb3b6 <ProcessSprites+0x18a>
    b362:	60 91 6a 0d 	lds	r22, 0x0D6A
    b366:	6c 31       	cpi	r22, 0x1C	; 28
    b368:	20 f5       	brcc	.+72     	; 0xb3b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    b36a:	88 23       	and	r24, r24
    b36c:	31 f0       	breq	.+12     	; 0xb37a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    b36e:	84 ee       	ldi	r24, 0xE4	; 228
    b370:	87 0f       	add	r24, r23
    b372:	7a 83       	std	Y+2, r23	; 0x02
    b374:	0e 94 b7 49 	call	0x936e	; 0x936e <CopyFlashTile>
    b378:	06 c0       	rjmp	.+12     	; 0xb386 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    b37a:	22 23       	and	r18, r18
    b37c:	29 f0       	breq	.+10     	; 0xb388 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    b37e:	87 2f       	mov	r24, r23
    b380:	7a 83       	std	Y+2, r23	; 0x02
    b382:	0e 94 46 4a 	call	0x948c	; 0x948c <CopyRamTile>
    b386:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    b388:	80 91 6a 0d 	lds	r24, 0x0D6A
    b38c:	e8 2f       	mov	r30, r24
    b38e:	f0 e0       	ldi	r31, 0x00	; 0
    b390:	9f 01       	movw	r18, r30
    b392:	22 0f       	add	r18, r18
    b394:	33 1f       	adc	r19, r19
    b396:	e2 0f       	add	r30, r18
    b398:	f3 1f       	adc	r31, r19
    b39a:	e6 5c       	subi	r30, 0xC6	; 198
    b39c:	f3 4f       	sbci	r31, 0xF3	; 243
    b39e:	11 83       	std	Z+1, r17	; 0x01
    b3a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    b3a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    b3a4:	f8 01       	movw	r30, r16
    b3a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    b3a8:	21 e0       	ldi	r18, 0x01	; 1
    b3aa:	28 0f       	add	r18, r24
    b3ac:	20 93 6a 0d 	sts	0x0D6A, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    b3b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    b3b2:	7c 31       	cpi	r23, 0x1C	; 28
    b3b4:	38 f4       	brcc	.+14     	; 0xb3c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    b3b6:	2b 81       	ldd	r18, Y+3	; 0x03
    b3b8:	3c 81       	ldd	r19, Y+4	; 0x04
    b3ba:	a5 01       	movw	r20, r10
    b3bc:	67 2f       	mov	r22, r23
    b3be:	87 2d       	mov	r24, r7
    b3c0:	0e 94 d3 4a 	call	0x95a6	; 0x95a6 <BlitSprite>
    b3c4:	ff ef       	ldi	r31, 0xFF	; 255
    b3c6:	af 1a       	sub	r10, r31
    b3c8:	bf 0a       	sbc	r11, r31
    b3ca:	23 94       	inc	r2
    b3cc:	82 2d       	mov	r24, r2
    b3ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    b3d0:	99 81       	ldd	r25, Y+1	; 0x01
    b3d2:	89 17       	cp	r24, r25
    b3d4:	08 f4       	brcc	.+2      	; 0xb3d8 <ProcessSprites+0x1ac>
    b3d6:	8c cf       	rjmp	.-232    	; 0xb2f0 <ProcessSprites+0xc4>
    b3d8:	ef ef       	ldi	r30, 0xFF	; 255
    b3da:	ee 1a       	sub	r14, r30
    b3dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    b3de:	e3 14       	cp	r14, r3
    b3e0:	08 f4       	brcc	.+2      	; 0xb3e4 <ProcessSprites+0x1b8>
    b3e2:	7f cf       	rjmp	.-258    	; 0xb2e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    b3e4:	73 94       	inc	r7
    b3e6:	f4 e0       	ldi	r31, 0x04	; 4
    b3e8:	cf 0e       	add	r12, r31
    b3ea:	d1 1c       	adc	r13, r1
    b3ec:	4e e0       	ldi	r20, 0x0E	; 14
    b3ee:	74 12       	cpse	r7, r20
    b3f0:	43 cf       	rjmp	.-378    	; 0xb278 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    b3f2:	0f 90       	pop	r0
    b3f4:	0f 90       	pop	r0
    b3f6:	0f 90       	pop	r0
    b3f8:	0f 90       	pop	r0
    b3fa:	df 91       	pop	r29
    b3fc:	cf 91       	pop	r28
    b3fe:	1f 91       	pop	r17
    b400:	0f 91       	pop	r16
    b402:	ff 90       	pop	r15
    b404:	ef 90       	pop	r14
    b406:	df 90       	pop	r13
    b408:	cf 90       	pop	r12
    b40a:	bf 90       	pop	r11
    b40c:	af 90       	pop	r10
    b40e:	9f 90       	pop	r9
    b410:	8f 90       	pop	r8
    b412:	7f 90       	pop	r7
    b414:	6f 90       	pop	r6
    b416:	5f 90       	pop	r5
    b418:	4f 90       	pop	r4
    b41a:	3f 90       	pop	r3
    b41c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    b41e:	0c 94 00 59 	jmp	0xb200	; 0xb200 <RestoreBackground>

	}
    b422:	0f 90       	pop	r0
    b424:	0f 90       	pop	r0
    b426:	0f 90       	pop	r0
    b428:	0f 90       	pop	r0
    b42a:	df 91       	pop	r29
    b42c:	cf 91       	pop	r28
    b42e:	1f 91       	pop	r17
    b430:	0f 91       	pop	r16
    b432:	ff 90       	pop	r15
    b434:	ef 90       	pop	r14
    b436:	df 90       	pop	r13
    b438:	cf 90       	pop	r12
    b43a:	bf 90       	pop	r11
    b43c:	af 90       	pop	r10
    b43e:	9f 90       	pop	r9
    b440:	8f 90       	pop	r8
    b442:	7f 90       	pop	r7
    b444:	6f 90       	pop	r6
    b446:	5f 90       	pop	r5
    b448:	4f 90       	pop	r4
    b44a:	3f 90       	pop	r3
    b44c:	2f 90       	pop	r2
    b44e:	08 95       	ret

0000b450 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    b450:	90 91 9d 0c 	lds	r25, 0x0C9D
    b454:	96 0f       	add	r25, r22
    b456:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    b45a:	20 91 9c 0c 	lds	r18, 0x0C9C
    b45e:	82 0f       	add	r24, r18
    b460:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    b464:	80 91 9e 0c 	lds	r24, 0x0C9E
    b468:	80 32       	cpi	r24, 0x20	; 32
    b46a:	b0 f4       	brcc	.+44     	; 0xb498 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    b46c:	29 2f       	mov	r18, r25
    b46e:	30 e0       	ldi	r19, 0x00	; 0
    b470:	78 e0       	ldi	r23, 0x08	; 8
    b472:	87 9f       	mul	r24, r23
    b474:	a0 01       	movw	r20, r0
    b476:	11 24       	eor	r1, r1
    b478:	24 17       	cp	r18, r20
    b47a:	35 07       	cpc	r19, r21
    b47c:	6c f0       	brlt	.+26     	; 0xb498 <Scroll+0x48>
				if(dy>=0){	
    b47e:	67 fd       	sbrc	r22, 7
    b480:	05 c0       	rjmp	.+10     	; 0xb48c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    b482:	28 ef       	ldi	r18, 0xF8	; 248
    b484:	82 9f       	mul	r24, r18
    b486:	90 0d       	add	r25, r0
    b488:	11 24       	eor	r1, r1
    b48a:	04 c0       	rjmp	.+8      	; 0xb494 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    b48c:	78 e0       	ldi	r23, 0x08	; 8
    b48e:	87 9f       	mul	r24, r23
    b490:	90 0d       	add	r25, r0
    b492:	11 24       	eor	r1, r1
    b494:	90 93 9d 0c 	sts	0x0C9D, r25
    b498:	08 95       	ret

0000b49a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    b49a:	e2 e0       	ldi	r30, 0x02	; 2
    b49c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    b49e:	80 ee       	ldi	r24, 0xE0	; 224
    b4a0:	80 83       	st	Z, r24
    b4a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    b4a4:	95 e0       	ldi	r25, 0x05	; 5
    b4a6:	ea 33       	cpi	r30, 0x3A	; 58
    b4a8:	f9 07       	cpc	r31, r25
    b4aa:	d1 f7       	brne	.-12     	; 0xb4a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    b4ac:	80 e2       	ldi	r24, 0x20	; 32
    b4ae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    b4b2:	10 92 99 0c 	sts	0x0C99, r1
    b4b6:	08 95       	ret

0000b4b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    b4b8:	4f 92       	push	r4
    b4ba:	5f 92       	push	r5
    b4bc:	6f 92       	push	r6
    b4be:	7f 92       	push	r7
    b4c0:	8f 92       	push	r8
    b4c2:	9f 92       	push	r9
    b4c4:	af 92       	push	r10
    b4c6:	bf 92       	push	r11
    b4c8:	cf 92       	push	r12
    b4ca:	df 92       	push	r13
    b4cc:	ef 92       	push	r14
    b4ce:	ff 92       	push	r15
    b4d0:	0f 93       	push	r16
    b4d2:	1f 93       	push	r17
    b4d4:	cf 93       	push	r28
    b4d6:	df 93       	push	r29
    b4d8:	68 2e       	mov	r6, r24
    b4da:	56 2e       	mov	r5, r22
    b4dc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    b4de:	fa 01       	movw	r30, r20
    b4e0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    b4e2:	31 96       	adiw	r30, 0x01	; 1
    b4e4:	84 90       	lpm	r8, Z
    b4e6:	c7 2c       	mov	r12, r7
    b4e8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    b4ea:	00 e0       	ldi	r16, 0x00	; 0
    b4ec:	10 e0       	ldi	r17, 0x00	; 0
    b4ee:	91 2c       	mov	r9, r1
    b4f0:	98 14       	cp	r9, r8
    b4f2:	f1 f0       	breq	.+60     	; 0xb530 <DrawMap+0x78>
    b4f4:	c0 e0       	ldi	r28, 0x00	; 0
    b4f6:	d0 e0       	ldi	r29, 0x00	; 0
    b4f8:	58 01       	movw	r10, r16
    b4fa:	f2 e0       	ldi	r31, 0x02	; 2
    b4fc:	af 0e       	add	r10, r31
    b4fe:	b1 1c       	adc	r11, r1
    b500:	49 2c       	mov	r4, r9
    b502:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    b504:	c7 15       	cp	r28, r7
    b506:	80 f4       	brcc	.+32     	; 0xb528 <DrawMap+0x70>
    b508:	95 01       	movw	r18, r10
    b50a:	2c 0f       	add	r18, r28
    b50c:	3d 1f       	adc	r19, r29
    b50e:	f7 01       	movw	r30, r14
    b510:	e2 0f       	add	r30, r18
    b512:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    b514:	24 91       	lpm	r18, Z
    b516:	42 2f       	mov	r20, r18
    b518:	50 e0       	ldi	r21, 0x00	; 0
    b51a:	64 2d       	mov	r22, r4
    b51c:	8c 2f       	mov	r24, r28
    b51e:	86 0d       	add	r24, r6
    b520:	0e 94 0a 4d 	call	0x9a14	; 0x9a14 <SetTile>
    b524:	21 96       	adiw	r28, 0x01	; 1
    b526:	ee cf       	rjmp	.-36     	; 0xb504 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    b528:	93 94       	inc	r9
    b52a:	0c 0d       	add	r16, r12
    b52c:	1d 1d       	adc	r17, r13
    b52e:	e0 cf       	rjmp	.-64     	; 0xb4f0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    b530:	df 91       	pop	r29
    b532:	cf 91       	pop	r28
    b534:	1f 91       	pop	r17
    b536:	0f 91       	pop	r16
    b538:	ff 90       	pop	r15
    b53a:	ef 90       	pop	r14
    b53c:	df 90       	pop	r13
    b53e:	cf 90       	pop	r12
    b540:	bf 90       	pop	r11
    b542:	af 90       	pop	r10
    b544:	9f 90       	pop	r9
    b546:	8f 90       	pop	r8
    b548:	7f 90       	pop	r7
    b54a:	6f 90       	pop	r6
    b54c:	5f 90       	pop	r5
    b54e:	4f 90       	pop	r4
    b550:	08 95       	ret

0000b552 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    b552:	0f 93       	push	r16
    b554:	1f 93       	push	r17
    b556:	cf 93       	push	r28
    b558:	df 93       	push	r29
    b55a:	06 2f       	mov	r16, r22
    b55c:	c4 2f       	mov	r28, r20
    b55e:	d5 2f       	mov	r29, r21
    b560:	18 2f       	mov	r17, r24
    b562:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    b564:	fe 01       	movw	r30, r28
    b566:	44 91       	lpm	r20, Z
		if(c!=0){
    b568:	44 23       	and	r20, r20
    b56a:	49 f0       	breq	.+18     	; 0xb57e <Print+0x2c>
			c=((c&127)-32);			
    b56c:	4f 77       	andi	r20, 0x7F	; 127
    b56e:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    b570:	60 2f       	mov	r22, r16
    b572:	8c 2f       	mov	r24, r28
    b574:	81 0f       	add	r24, r17
    b576:	0e 94 06 4d 	call	0x9a0c	; 0x9a0c <SetFont>
    b57a:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    b57c:	f3 cf       	rjmp	.-26     	; 0xb564 <Print+0x12>
	
}
    b57e:	df 91       	pop	r29
    b580:	cf 91       	pop	r28
    b582:	1f 91       	pop	r17
    b584:	0f 91       	pop	r16
    b586:	08 95       	ret

0000b588 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    b588:	0f 93       	push	r16
    b58a:	1f 93       	push	r17
    b58c:	cf 93       	push	r28
    b58e:	df 93       	push	r29
    b590:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    b592:	c0 e0       	ldi	r28, 0x00	; 0
    b594:	d0 e0       	ldi	r29, 0x00	; 0
    b596:	c0 17       	cp	r28, r16
    b598:	d1 07       	cpc	r29, r17
    b59a:	44 f4       	brge	.+16     	; 0xb5ac <WaitVsync+0x24>
		while(!GetVsyncFlag());
    b59c:	0e 94 23 4d 	call	0x9a46	; 0x9a46 <GetVsyncFlag>
    b5a0:	88 23       	and	r24, r24
    b5a2:	e1 f3       	breq	.-8      	; 0xb59c <WaitVsync+0x14>
		ClearVsyncFlag();		
    b5a4:	0e 94 27 4d 	call	0x9a4e	; 0x9a4e <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    b5a8:	21 96       	adiw	r28, 0x01	; 1
    b5aa:	f5 cf       	rjmp	.-22     	; 0xb596 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    b5ac:	df 91       	pop	r29
    b5ae:	cf 91       	pop	r28
    b5b0:	1f 91       	pop	r17
    b5b2:	0f 91       	pop	r16
    b5b4:	08 95       	ret

0000b5b6 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    b5b6:	8d e1       	ldi	r24, 0x1D	; 29
    b5b8:	99 e0       	ldi	r25, 0x09	; 9
    b5ba:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    b5be:	8d e1       	ldi	r24, 0x1D	; 29
    b5c0:	91 e0       	ldi	r25, 0x01	; 1
    b5c2:	0e 94 1e 4d 	call	0x9a3c	; 0x9a3c <SetTileTable>
			
			//draw logo
			ClearVram();
    b5c6:	0e 94 fc 4c 	call	0x99f8	; 0x99f8 <ClearVram>
			WaitVsync(15);		
    b5ca:	8f e0       	ldi	r24, 0x0F	; 15
    b5cc:	90 e0       	ldi	r25, 0x00	; 0
    b5ce:	0e 94 c4 5a 	call	0xb588	; 0xb588 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    b5d2:	41 e0       	ldi	r20, 0x01	; 1
    b5d4:	6f ef       	ldi	r22, 0xFF	; 255
    b5d6:	80 e0       	ldi	r24, 0x00	; 0
    b5d8:	0e 94 a9 4f 	call	0x9f52	; 0x9f52 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    b5dc:	47 e0       	ldi	r20, 0x07	; 7
    b5de:	51 e0       	ldi	r21, 0x01	; 1
    b5e0:	6c e0       	ldi	r22, 0x0C	; 12
    b5e2:	8c e0       	ldi	r24, 0x0C	; 12
    b5e4:	0e 94 5c 5a 	call	0xb4b8	; 0xb4b8 <DrawMap>
			WaitVsync(3);
    b5e8:	83 e0       	ldi	r24, 0x03	; 3
    b5ea:	90 e0       	ldi	r25, 0x00	; 0
    b5ec:	0e 94 c4 5a 	call	0xb588	; 0xb588 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    b5f0:	46 ef       	ldi	r20, 0xF6	; 246
    b5f2:	50 e0       	ldi	r21, 0x00	; 0
    b5f4:	6c e0       	ldi	r22, 0x0C	; 12
    b5f6:	8c e0       	ldi	r24, 0x0C	; 12
    b5f8:	0e 94 5c 5a 	call	0xb4b8	; 0xb4b8 <DrawMap>
			WaitVsync(2);
    b5fc:	82 e0       	ldi	r24, 0x02	; 2
    b5fe:	90 e0       	ldi	r25, 0x00	; 0
    b600:	0e 94 c4 5a 	call	0xb588	; 0xb588 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    b604:	47 e0       	ldi	r20, 0x07	; 7
    b606:	51 e0       	ldi	r21, 0x01	; 1
    b608:	6c e0       	ldi	r22, 0x0C	; 12
    b60a:	8c e0       	ldi	r24, 0x0C	; 12
    b60c:	0e 94 5c 5a 	call	0xb4b8	; 0xb4b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    b610:	81 e4       	ldi	r24, 0x41	; 65
    b612:	90 e0       	ldi	r25, 0x00	; 0
    b614:	0e 94 c4 5a 	call	0xb588	; 0xb588 <WaitVsync>
			ClearVram();
    b618:	0e 94 fc 4c 	call	0x99f8	; 0x99f8 <ClearVram>
			WaitVsync(20);
    b61c:	84 e1       	ldi	r24, 0x14	; 20
    b61e:	90 e0       	ldi	r25, 0x00	; 0
    b620:	0c 94 c4 5a 	jmp	0xb588	; 0xb588 <WaitVsync>

0000b624 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    b624:	80 93 68 0d 	sts	0x0D68, r24
	currFadeFrame=0;
    b628:	10 92 6c 0d 	sts	0x0D6C, r1
	fadeActive=true;
    b62c:	81 e0       	ldi	r24, 0x01	; 1
    b62e:	80 93 6b 0d 	sts	0x0D6B, r24
		
	if(blocking){
    b632:	66 23       	and	r22, r22
    b634:	21 f0       	breq	.+8      	; 0xb63e <doFade+0x1a>
		while(fadeActive==true);
    b636:	80 91 6b 0d 	lds	r24, 0x0D6B
    b63a:	81 11       	cpse	r24, r1
    b63c:	fc cf       	rjmp	.-8      	; 0xb636 <doFade+0x12>
    b63e:	08 95       	ret

0000b640 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    b640:	81 11       	cpse	r24, r1
    b642:	03 c0       	rjmp	.+6      	; 0xb64a <FadeIn+0xa>
		DDRC=0xff;
    b644:	8f ef       	ldi	r24, 0xFF	; 255
    b646:	87 b9       	out	0x07, r24	; 7
		return;
    b648:	08 95       	ret
	}
	fadeStep=1;
    b64a:	91 e0       	ldi	r25, 0x01	; 1
    b64c:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=1;
    b650:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    b654:	0c 94 12 5b 	jmp	0xb624	; 0xb624 <doFade>

0000b658 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    b658:	81 11       	cpse	r24, r1
    b65a:	02 c0       	rjmp	.+4      	; 0xb660 <FadeOut+0x8>
		DDRC=0;
    b65c:	17 b8       	out	0x07, r1	; 7
		return;
    b65e:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    b660:	9c e0       	ldi	r25, 0x0C	; 12
    b662:	90 93 6d 0d 	sts	0x0D6D, r25
	fadeDir=-1;
    b666:	9f ef       	ldi	r25, 0xFF	; 255
    b668:	90 93 69 0d 	sts	0x0D69, r25
	doFade(speed,blocking);
    b66c:	0c 94 12 5b 	jmp	0xb624	; 0xb624 <doFade>

0000b670 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    b670:	80 91 6b 0d 	lds	r24, 0x0D6B
    b674:	88 23       	and	r24, r24
    b676:	01 f1       	breq	.+64     	; 0xb6b8 <ProcessFading+0x48>
		if(currFadeFrame==0){
    b678:	80 91 6c 0d 	lds	r24, 0x0D6C
    b67c:	81 11       	cpse	r24, r1
    b67e:	19 c0       	rjmp	.+50     	; 0xb6b2 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    b680:	80 91 68 0d 	lds	r24, 0x0D68
    b684:	80 93 6c 0d 	sts	0x0D6C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    b688:	e0 91 6d 0d 	lds	r30, 0x0D6D
    b68c:	f0 e0       	ldi	r31, 0x00	; 0
    b68e:	e7 51       	subi	r30, 0x17	; 23
    b690:	ff 4f       	sbci	r31, 0xFF	; 255
    b692:	e4 91       	lpm	r30, Z
    b694:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    b696:	90 91 69 0d 	lds	r25, 0x0D69
    b69a:	80 91 6d 0d 	lds	r24, 0x0D6D
    b69e:	89 0f       	add	r24, r25
    b6a0:	80 93 6d 0d 	sts	0x0D6D, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    b6a4:	88 23       	and	r24, r24
    b6a6:	11 f0       	breq	.+4      	; 0xb6ac <ProcessFading+0x3c>
    b6a8:	8d 30       	cpi	r24, 0x0D	; 13
    b6aa:	31 f4       	brne	.+12     	; 0xb6b8 <ProcessFading+0x48>
				fadeActive=false;
    b6ac:	10 92 6b 0d 	sts	0x0D6B, r1
    b6b0:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    b6b2:	81 50       	subi	r24, 0x01	; 1
    b6b4:	80 93 6c 0d 	sts	0x0D6C, r24
    b6b8:	08 95       	ret

0000b6ba <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    b6ba:	0e 94 38 5b 	call	0xb670	; 0xb670 <ProcessFading>
		ProcessSprites();
    b6be:	0c 94 16 59 	jmp	0xb22c	; 0xb22c <ProcessSprites>

0000b6c2 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    b6c2:	fc 01       	movw	r30, r24
	anim->looped = 0;
    b6c4:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    b6c6:	93 81       	ldd	r25, Z+3	; 0x03
    b6c8:	9f 5f       	subi	r25, 0xFF	; 255
    b6ca:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    b6cc:	42 81       	ldd	r20, Z+2	; 0x02
    b6ce:	80 81       	ld	r24, Z
    b6d0:	26 81       	ldd	r18, Z+6	; 0x06
    b6d2:	37 81       	ldd	r19, Z+7	; 0x07
    b6d4:	94 17       	cp	r25, r20
    b6d6:	30 f4       	brcc	.+12     	; 0xb6e4 <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    b6d8:	f9 01       	movw	r30, r18
    b6da:	e8 0f       	add	r30, r24
    b6dc:	f1 1d       	adc	r31, r1
    b6de:	e8 0f       	add	r30, r24
    b6e0:	f1 1d       	adc	r31, r1
    b6e2:	12 c0       	rjmp	.+36     	; 0xb708 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    b6e4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    b6e6:	90 e0       	ldi	r25, 0x00	; 0
    b6e8:	01 96       	adiw	r24, 0x01	; 1
    b6ea:	61 81       	ldd	r22, Z+1	; 0x01
    b6ec:	70 e0       	ldi	r23, 0x00	; 0
    b6ee:	0e 94 84 67 	call	0xcf08	; 0xcf08 <__divmodhi4>
    b6f2:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    b6f4:	81 11       	cpse	r24, r1
    b6f6:	02 c0       	rjmp	.+4      	; 0xb6fc <LBGetNextFrame+0x3a>
    b6f8:	41 e0       	ldi	r20, 0x01	; 1
    b6fa:	44 83       	std	Z+4, r20	; 0x04
    b6fc:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    b6fe:	88 0f       	add	r24, r24
    b700:	99 1f       	adc	r25, r25
    b702:	f9 01       	movw	r30, r18
    b704:	e8 0f       	add	r30, r24
    b706:	f9 1f       	adc	r31, r25
    b708:	80 81       	ld	r24, Z
    b70a:	91 81       	ldd	r25, Z+1	; 0x01
}
    b70c:	08 95       	ret

0000b70e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    b70e:	0f 93       	push	r16
    b710:	1f 93       	push	r17
    b712:	cf 93       	push	r28
    b714:	df 93       	push	r29
    b716:	1f 92       	push	r1
    b718:	cd b7       	in	r28, 0x3d	; 61
    b71a:	de b7       	in	r29, 0x3e	; 62
    b71c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    b71e:	86 2f       	mov	r24, r22
    b720:	69 83       	std	Y+1, r22	; 0x01
    b722:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <ReadJoypad>
    b726:	d8 01       	movw	r26, r16
    b728:	15 96       	adiw	r26, 0x05	; 5
    b72a:	9c 93       	st	X, r25
    b72c:	8e 93       	st	-X, r24
    b72e:	14 97       	sbiw	r26, 0x04	; 4
    b730:	69 81       	ldd	r22, Y+1	; 0x01
    b732:	e6 2f       	mov	r30, r22
    b734:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    b736:	00 97       	sbiw	r24, 0x00	; 0
    b738:	51 f0       	breq	.+20     	; 0xb74e <LBGetJoyPadState+0x40>
    b73a:	df 01       	movw	r26, r30
    b73c:	aa 0f       	add	r26, r26
    b73e:	bb 1f       	adc	r27, r27
    b740:	a0 52       	subi	r26, 0x20	; 32
    b742:	b3 4f       	sbci	r27, 0xF3	; 243
    b744:	2d 91       	ld	r18, X+
    b746:	3c 91       	ld	r19, X
    b748:	82 17       	cp	r24, r18
    b74a:	93 07       	cpc	r25, r19
    b74c:	21 f0       	breq	.+8      	; 0xb756 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    b74e:	d8 01       	movw	r26, r16
    b750:	16 96       	adiw	r26, 0x06	; 6
    b752:	1c 92       	st	X, r1
    b754:	07 c0       	rjmp	.+14     	; 0xb764 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    b756:	d8 01       	movw	r26, r16
    b758:	16 96       	adiw	r26, 0x06	; 6
    b75a:	2c 91       	ld	r18, X
    b75c:	16 97       	sbiw	r26, 0x06	; 6
    b75e:	2f 5f       	subi	r18, 0xFF	; 255
    b760:	16 96       	adiw	r26, 0x06	; 6
    b762:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    b764:	ee 0f       	add	r30, r30
    b766:	ff 1f       	adc	r31, r31
    b768:	e0 52       	subi	r30, 0x20	; 32
    b76a:	f3 4f       	sbci	r31, 0xF3	; 243
    b76c:	20 81       	ld	r18, Z
    b76e:	31 81       	ldd	r19, Z+1	; 0x01
    b770:	a9 01       	movw	r20, r18
    b772:	40 95       	com	r20
    b774:	50 95       	com	r21
    b776:	48 23       	and	r20, r24
    b778:	59 23       	and	r21, r25
    b77a:	d8 01       	movw	r26, r16
    b77c:	11 96       	adiw	r26, 0x01	; 1
    b77e:	5c 93       	st	X, r21
    b780:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    b782:	ac 01       	movw	r20, r24
    b784:	40 95       	com	r20
    b786:	50 95       	com	r21
    b788:	24 23       	and	r18, r20
    b78a:	35 23       	and	r19, r21
    b78c:	13 96       	adiw	r26, 0x03	; 3
    b78e:	3c 93       	st	X, r19
    b790:	2e 93       	st	-X, r18
    b792:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    b794:	91 83       	std	Z+1, r25	; 0x01
    b796:	80 83       	st	Z, r24
}
    b798:	0f 90       	pop	r0
    b79a:	df 91       	pop	r29
    b79c:	cf 91       	pop	r28
    b79e:	1f 91       	pop	r17
    b7a0:	0f 91       	pop	r16
    b7a2:	08 95       	ret

0000b7a4 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    b7a4:	cf 93       	push	r28
    b7a6:	df 93       	push	r29
    b7a8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    b7aa:	c0 e0       	ldi	r28, 0x00	; 0
    b7ac:	cd 17       	cp	r28, r29
    b7ae:	31 f0       	breq	.+12     	; 0xb7bc <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    b7b0:	8f ef       	ldi	r24, 0xFF	; 255
    b7b2:	9f ef       	ldi	r25, 0xFF	; 255
    b7b4:	0e 94 39 4d 	call	0x9a72	; 0x9a72 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    b7b8:	cf 5f       	subi	r28, 0xFF	; 255
    b7ba:	f8 cf       	rjmp	.-16     	; 0xb7ac <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    b7bc:	df 91       	pop	r29
    b7be:	cf 91       	pop	r28
    b7c0:	08 95       	ret

0000b7c2 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    b7c2:	df 92       	push	r13
    b7c4:	ef 92       	push	r14
    b7c6:	ff 92       	push	r15
    b7c8:	0f 93       	push	r16
    b7ca:	1f 93       	push	r17
    b7cc:	cf 93       	push	r28
    b7ce:	df 93       	push	r29
    b7d0:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    b7d2:	fb 01       	movw	r30, r22
    b7d4:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    b7d6:	31 96       	adiw	r30, 0x01	; 1
    b7d8:	64 91       	lpm	r22, Z
    b7da:	5f ef       	ldi	r21, 0xFF	; 255
    b7dc:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    b7de:	24 2f       	mov	r18, r20
    b7e0:	21 70       	andi	r18, 0x01	; 1
    b7e2:	40 ff       	sbrs	r20, 0
    b7e4:	04 c0       	rjmp	.+8      	; 0xb7ee <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    b7e6:	95 2f       	mov	r25, r21
		dx=-1;
    b7e8:	ff 24       	eor	r15, r15
    b7ea:	fa 94       	dec	r15
    b7ec:	03 c0       	rjmp	.+6      	; 0xb7f4 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    b7ee:	ff 24       	eor	r15, r15
    b7f0:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    b7f2:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    b7f4:	41 ff       	sbrs	r20, 1
    b7f6:	05 c0       	rjmp	.+10     	; 0xb802 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    b7f8:	7f ef       	ldi	r23, 0xFF	; 255
    b7fa:	76 0f       	add	r23, r22
		dy=-1;
    b7fc:	ee 24       	eor	r14, r14
    b7fe:	ea 94       	dec	r14
    b800:	03 c0       	rjmp	.+6      	; 0xb808 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    b802:	ee 24       	eor	r14, r14
    b804:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    b806:	70 e0       	ldi	r23, 0x00	; 0
    b808:	21 11       	cpse	r18, r1
    b80a:	01 c0       	rjmp	.+2      	; 0xb80e <LBMapSprite+0x4c>
    b80c:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    b80e:	00 e0       	ldi	r16, 0x00	; 0
    b810:	06 17       	cp	r16, r22
    b812:	09 f1       	breq	.+66     	; 0xb856 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    b814:	71 03       	mulsu	r23, r17
    b816:	e0 01       	movw	r28, r0
    b818:	11 24       	eor	r1, r1
    b81a:	d8 2e       	mov	r13, r24
    b81c:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    b81e:	8d 15       	cp	r24, r13
    b820:	b1 f0       	breq	.+44     	; 0xb84e <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    b822:	9e 01       	movw	r18, r28
    b824:	29 0f       	add	r18, r25
    b826:	31 1d       	adc	r19, r1
    b828:	97 fd       	sbrc	r25, 7
    b82a:	3a 95       	dec	r19
    b82c:	2e 5f       	subi	r18, 0xFE	; 254
    b82e:	3f 4f       	sbci	r19, 0xFF	; 255
    b830:	fd 01       	movw	r30, r26
    b832:	e2 0f       	add	r30, r18
    b834:	f3 1f       	adc	r31, r19
    b836:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    b838:	34 e0       	ldi	r19, 0x04	; 4
    b83a:	83 9f       	mul	r24, r19
    b83c:	f0 01       	movw	r30, r0
    b83e:	11 24       	eor	r1, r1
    b840:	e7 5a       	subi	r30, 0xA7	; 167
    b842:	f1 4f       	sbci	r31, 0xF1	; 241
    b844:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    b846:	8f 5f       	subi	r24, 0xFF	; 255
    b848:	43 83       	std	Z+3, r20	; 0x03
    b84a:	9f 0d       	add	r25, r15
    b84c:	e8 cf       	rjmp	.-48     	; 0xb81e <LBMapSprite+0x5c>
    b84e:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    b850:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    b852:	95 2f       	mov	r25, r21
    b854:	dd cf       	rjmp	.-70     	; 0xb810 <LBMapSprite+0x4e>
	}
}
    b856:	df 91       	pop	r29
    b858:	cf 91       	pop	r28
    b85a:	1f 91       	pop	r17
    b85c:	0f 91       	pop	r16
    b85e:	ff 90       	pop	r15
    b860:	ef 90       	pop	r14
    b862:	df 90       	pop	r13
    b864:	08 95       	ret

0000b866 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    b866:	df 92       	push	r13
    b868:	ef 92       	push	r14
    b86a:	ff 92       	push	r15
    b86c:	0f 93       	push	r16
    b86e:	1f 93       	push	r17
    b870:	cf 93       	push	r28
    b872:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    b874:	a0 91 9e 0c 	lds	r26, 0x0C9E
    b878:	98 e0       	ldi	r25, 0x08	; 8
    b87a:	a9 9f       	mul	r26, r25
    b87c:	70 01       	movw	r14, r0
    b87e:	11 24       	eor	r1, r1
    b880:	50 e0       	ldi	r21, 0x00	; 0
    b882:	38 ef       	ldi	r19, 0xF8	; 248
    b884:	a3 9f       	mul	r26, r19
    b886:	30 2d       	mov	r19, r0
    b888:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    b88a:	70 e0       	ldi	r23, 0x00	; 0
    b88c:	70 17       	cp	r23, r16
    b88e:	09 f1       	breq	.+66     	; 0xb8d2 <LBMoveSprite+0x6c>
    b890:	d4 2e       	mov	r13, r20
    b892:	13 2f       	mov	r17, r19
    b894:	14 0f       	add	r17, r20
    b896:	b8 2f       	mov	r27, r24
    b898:	b2 0f       	add	r27, r18
    b89a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    b89c:	8b 17       	cp	r24, r27
    b89e:	a9 f0       	breq	.+42     	; 0xb8ca <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    b8a0:	c4 e0       	ldi	r28, 0x04	; 4
    b8a2:	8c 9f       	mul	r24, r28
    b8a4:	f0 01       	movw	r30, r0
    b8a6:	11 24       	eor	r1, r1
    b8a8:	ef 01       	movw	r28, r30
    b8aa:	c7 5a       	subi	r28, 0xA7	; 167
    b8ac:	d1 4f       	sbci	r29, 0xF1	; 241
    b8ae:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    b8b0:	a0 32       	cpi	r26, 0x20	; 32
    b8b2:	28 f4       	brcc	.+10     	; 0xb8be <LBMoveSprite+0x58>
    b8b4:	e4 16       	cp	r14, r20
    b8b6:	f5 06       	cpc	r15, r21
    b8b8:	14 f4       	brge	.+4      	; 0xb8be <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    b8ba:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    b8bc:	03 c0       	rjmp	.+6      	; 0xb8c4 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    b8be:	e7 5a       	subi	r30, 0xA7	; 167
    b8c0:	f1 4f       	sbci	r31, 0xF1	; 241
    b8c2:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    b8c4:	8f 5f       	subi	r24, 0xFF	; 255
    b8c6:	98 5f       	subi	r25, 0xF8	; 248
    b8c8:	e9 cf       	rjmp	.-46     	; 0xb89c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    b8ca:	7f 5f       	subi	r23, 0xFF	; 255
    b8cc:	48 5f       	subi	r20, 0xF8	; 248
    b8ce:	5f 4f       	sbci	r21, 0xFF	; 255
    b8d0:	dd cf       	rjmp	.-70     	; 0xb88c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    b8d2:	df 91       	pop	r29
    b8d4:	cf 91       	pop	r28
    b8d6:	1f 91       	pop	r17
    b8d8:	0f 91       	pop	r16
    b8da:	ff 90       	pop	r15
    b8dc:	ef 90       	pop	r14
    b8de:	df 90       	pop	r13
    b8e0:	08 95       	ret

0000b8e2 <LBRotateSprites>:

void LBRotateSprites(u8 mappedSpriteCount)
{
    b8e2:	cf 93       	push	r28
    b8e4:	df 93       	push	r29
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
    b8e6:	90 91 dc 0c 	lds	r25, 0x0CDC
    b8ea:	99 23       	and	r25, r25
    b8ec:	e9 f1       	breq	.+122    	; 0xb968 <LBRotateSprites+0x86>
    b8ee:	e5 e0       	ldi	r30, 0x05	; 5
    b8f0:	f5 e0       	ldi	r31, 0x05	; 5
    b8f2:	28 ec       	ldi	r18, 0xC8	; 200
    b8f4:	28 0f       	add	r18, r24
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    b8f6:	88 23       	and	r24, r24
    b8f8:	89 f1       	breq	.+98     	; 0xb95c <LBRotateSprites+0x7a>
		{
			sprites[counter].flags = extendedSprites[--mappedSpriteCount].flags;
    b8fa:	af ef       	ldi	r26, 0xFF	; 255
    b8fc:	a8 0f       	add	r26, r24
    b8fe:	34 e0       	ldi	r19, 0x04	; 4
    b900:	a3 9f       	mul	r26, r19
    b902:	d0 01       	movw	r26, r0
    b904:	11 24       	eor	r1, r1
    b906:	a7 5a       	subi	r26, 0xA7	; 167
    b908:	b1 4f       	sbci	r27, 0xF1	; 241
    b90a:	13 96       	adiw	r26, 0x03	; 3
    b90c:	3c 91       	ld	r19, X
    b90e:	30 83       	st	Z, r19
    b910:	ef 01       	movw	r28, r30
    b912:	21 97       	sbiw	r28, 0x01	; 1
			sprites[counter].tileIndex = extendedSprites[--mappedSpriteCount].tileIndex;
    b914:	ae ef       	ldi	r26, 0xFE	; 254
    b916:	a8 0f       	add	r26, r24
    b918:	34 e0       	ldi	r19, 0x04	; 4
    b91a:	a3 9f       	mul	r26, r19
    b91c:	d0 01       	movw	r26, r0
    b91e:	11 24       	eor	r1, r1
    b920:	a7 5a       	subi	r26, 0xA7	; 167
    b922:	b1 4f       	sbci	r27, 0xF1	; 241
    b924:	12 96       	adiw	r26, 0x02	; 2
    b926:	3c 91       	ld	r19, X
    b928:	38 83       	st	Y, r19
    b92a:	22 97       	sbiw	r28, 0x02	; 2
			sprites[counter].x = extendedSprites[--mappedSpriteCount].x;
    b92c:	ad ef       	ldi	r26, 0xFD	; 253
    b92e:	a8 0f       	add	r26, r24
    b930:	34 e0       	ldi	r19, 0x04	; 4
    b932:	a3 9f       	mul	r26, r19
    b934:	d0 01       	movw	r26, r0
    b936:	11 24       	eor	r1, r1
    b938:	a7 5a       	subi	r26, 0xA7	; 167
    b93a:	b1 4f       	sbci	r27, 0xF1	; 241
    b93c:	3c 91       	ld	r19, X
    b93e:	38 83       	st	Y, r19
			sprites[counter].y = extendedSprites[--mappedSpriteCount].y;
    b940:	84 50       	subi	r24, 0x04	; 4
    b942:	21 96       	adiw	r28, 0x01	; 1
    b944:	34 e0       	ldi	r19, 0x04	; 4
    b946:	83 9f       	mul	r24, r19
    b948:	d0 01       	movw	r26, r0
    b94a:	11 24       	eor	r1, r1
    b94c:	a7 5a       	subi	r26, 0xA7	; 167
    b94e:	b1 4f       	sbci	r27, 0xF1	; 241
    b950:	11 96       	adiw	r26, 0x01	; 1
    b952:	3c 91       	ld	r19, X
    b954:	38 83       	st	Y, r19
    b956:	34 96       	adiw	r30, 0x04	; 4
	static u8 swapped = 0;
	u8 counter = 0;
	
	if (swapped)
	{
		while (counter < MAX_SPRITES && mappedSpriteCount > 0)
    b958:	82 13       	cpse	r24, r18
    b95a:	cd cf       	rjmp	.-102    	; 0xb8f6 <LBRotateSprites+0x14>
			sprites[counter].x = extendedSprites[counter].x;
			sprites[counter].y = extendedSprites[counter].y;
			counter++;
		}
	}
	swapped = swapped & 1;
    b95c:	91 70       	andi	r25, 0x01	; 1
    b95e:	90 93 dc 0c 	sts	0x0CDC, r25
}
    b962:	df 91       	pop	r29
    b964:	cf 91       	pop	r28
    b966:	08 95       	ret
    b968:	40 e0       	ldi	r20, 0x00	; 0
    b96a:	50 e0       	ldi	r21, 0x00	; 0
    b96c:	20 e0       	ldi	r18, 0x00	; 0
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    b96e:	28 17       	cp	r18, r24
    b970:	a9 f3       	breq	.-22     	; 0xb95c <LBRotateSprites+0x7a>
    b972:	da 01       	movw	r26, r20
    b974:	a7 5a       	subi	r26, 0xA7	; 167
    b976:	b1 4f       	sbci	r27, 0xF1	; 241
    b978:	fa 01       	movw	r30, r20
    b97a:	ee 5f       	subi	r30, 0xFE	; 254
    b97c:	fa 4f       	sbci	r31, 0xFA	; 250
		{
			sprites[counter].flags = extendedSprites[counter].flags;
    b97e:	13 96       	adiw	r26, 0x03	; 3
    b980:	3c 91       	ld	r19, X
    b982:	13 97       	sbiw	r26, 0x03	; 3
    b984:	33 83       	std	Z+3, r19	; 0x03
			sprites[counter].tileIndex = extendedSprites[counter].tileIndex;
    b986:	12 96       	adiw	r26, 0x02	; 2
    b988:	3c 91       	ld	r19, X
    b98a:	12 97       	sbiw	r26, 0x02	; 2
    b98c:	32 83       	std	Z+2, r19	; 0x02
			sprites[counter].x = extendedSprites[counter].x;
    b98e:	3c 91       	ld	r19, X
    b990:	30 83       	st	Z, r19
			sprites[counter].y = extendedSprites[counter].y;
    b992:	11 96       	adiw	r26, 0x01	; 1
    b994:	3c 91       	ld	r19, X
    b996:	31 83       	std	Z+1, r19	; 0x01
			counter++;
    b998:	2f 5f       	subi	r18, 0xFF	; 255
    b99a:	4c 5f       	subi	r20, 0xFC	; 252
    b99c:	5f 4f       	sbci	r21, 0xFF	; 255
			counter++;
		}
	}
	else
	{
		while (counter < MAX_SPRITES && counter < mappedSpriteCount)
    b99e:	2e 30       	cpi	r18, 0x0E	; 14
    b9a0:	31 f7       	brne	.-52     	; 0xb96e <LBRotateSprites+0x8c>
    b9a2:	dc cf       	rjmp	.-72     	; 0xb95c <LBRotateSprites+0x7a>

0000b9a4 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    b9a4:	fa 01       	movw	r30, r20
    b9a6:	32 96       	adiw	r30, 0x02	; 2
    b9a8:	44 91       	lpm	r20, Z
    b9aa:	50 e0       	ldi	r21, 0x00	; 0
    b9ac:	0c 94 0a 4d 	jmp	0x9a14	; 0x9a14 <SetTile>

0000b9b0 <init_game_state>:
char* prone_anim[1];
char* run_anim[4];

void init_game_state()
{
	game.camera_x = 0;
    b9b0:	e0 e9       	ldi	r30, 0x90	; 144
    b9b2:	fd e0       	ldi	r31, 0x0D	; 13
    b9b4:	15 86       	std	Z+13, r1	; 0x0d
    b9b6:	14 86       	std	Z+12, r1	; 0x0c
	game.camera_y = 0;
    b9b8:	17 86       	std	Z+15, r1	; 0x0f
    b9ba:	16 86       	std	Z+14, r1	; 0x0e
	game.current_level = 0;
    b9bc:	11 82       	std	Z+1, r1	; 0x01
	game.current_screen = 0;
    b9be:	10 82       	st	Z, r1
	game.paused = 0;
    b9c0:	12 82       	std	Z+2, r1	; 0x02
	game.selection = 0;
    b9c2:	13 82       	std	Z+3, r1	; 0x03
	game.scroll_x = 0;
    b9c4:	14 82       	std	Z+4, r1	; 0x04
	game.scroll_y = 0;
    b9c6:	15 82       	std	Z+5, r1	; 0x05
	game.scroll_src_x=29;
    b9c8:	8d e1       	ldi	r24, 0x1D	; 29
    b9ca:	90 e0       	ldi	r25, 0x00	; 0
    b9cc:	91 87       	std	Z+9, r25	; 0x09
    b9ce:	80 87       	std	Z+8, r24	; 0x08
    game.scroll_dest_x=29;
    b9d0:	86 83       	std	Z+6, r24	; 0x06
	game.scroll_src_y=27;
    b9d2:	8b e1       	ldi	r24, 0x1B	; 27
    b9d4:	90 e0       	ldi	r25, 0x00	; 0
    b9d6:	93 87       	std	Z+11, r25	; 0x0b
    b9d8:	82 87       	std	Z+10, r24	; 0x0a
    game.scroll_dest_y=27;
    b9da:	87 83       	std	Z+7, r24	; 0x07
	game.player.active_shots = 0;
    b9dc:	11 a2       	std	Z+33, r1	; 0x21
	game.player.flags = IDLE;
    b9de:	88 e0       	ldi	r24, 0x08	; 8
    b9e0:	82 a3       	std	Z+34, r24	; 0x22
	game.player.grace_frame = 0;
    b9e2:	13 a2       	std	Z+35, r1	; 0x23
	game.player.shared.gravity = 0;
    b9e4:	10 a2       	std	Z+32, r1	; 0x20
	game.player.shared.vx = 0;
    b9e6:	10 8a       	std	Z+16, r1	; 0x10
    b9e8:	11 8a       	std	Z+17, r1	; 0x11
    b9ea:	12 8a       	std	Z+18, r1	; 0x12
    b9ec:	13 8a       	std	Z+19, r1	; 0x13
	game.player.shared.vy = 0;
    b9ee:	14 8a       	std	Z+20, r1	; 0x14
    b9f0:	15 8a       	std	Z+21, r1	; 0x15
    b9f2:	16 8a       	std	Z+22, r1	; 0x16
    b9f4:	17 8a       	std	Z+23, r1	; 0x17
	
	game.player.idle.anim_count = 1;
    b9f6:	81 e0       	ldi	r24, 0x01	; 1
    b9f8:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.current_anim = 0;
    b9fc:	10 92 28 0e 	sts	0x0E28, r1
	game.player.idle.frame_count = 0;
    ba00:	10 92 2b 0e 	sts	0x0E2B, r1
	game.player.idle.frames_per_anim = 1;
    ba04:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.looped = 0;
    ba08:	10 92 2c 0e 	sts	0x0E2C, r1
	game.player.idle.reversing = 0;
    ba0c:	10 92 2d 0e 	sts	0x0E2D, r1
	game.player.idle.anims = idle_anim;
    ba10:	e1 ed       	ldi	r30, 0xD1	; 209
    ba12:	fe e0       	ldi	r31, 0x0E	; 14
    ba14:	f0 93 2f 0e 	sts	0x0E2F, r31
    ba18:	e0 93 2e 0e 	sts	0x0E2E, r30
	game.player.idle.anims[0] = (char*) map_hero_idle;
    ba1c:	29 ed       	ldi	r18, 0xD9	; 217
    ba1e:	35 e7       	ldi	r19, 0x75	; 117
    ba20:	31 83       	std	Z+1, r19	; 0x01
    ba22:	20 83       	st	Z, r18
	
	game.player.jump.anim_count = 1;
    ba24:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.current_anim = 0;
    ba28:	10 92 38 0e 	sts	0x0E38, r1
	game.player.jump.frame_count = 0;
    ba2c:	10 92 3b 0e 	sts	0x0E3B, r1
	game.player.jump.frames_per_anim = 1;
    ba30:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.looped = 0;
    ba34:	10 92 3c 0e 	sts	0x0E3C, r1
	game.player.jump.reversing = 0;
    ba38:	10 92 3d 0e 	sts	0x0E3D, r1
	game.player.jump.anims = jump_anim;
    ba3c:	ee e6       	ldi	r30, 0x6E	; 110
    ba3e:	fd e0       	ldi	r31, 0x0D	; 13
    ba40:	f0 93 3f 0e 	sts	0x0E3F, r31
    ba44:	e0 93 3e 0e 	sts	0x0E3E, r30
	game.player.jump.anims[0] = (char*) map_hero_jump;
    ba48:	21 eb       	ldi	r18, 0xB1	; 177
    ba4a:	35 e7       	ldi	r19, 0x75	; 117
    ba4c:	31 83       	std	Z+1, r19	; 0x01
    ba4e:	20 83       	st	Z, r18
	
	game.player.prone.anim_count = 1;
    ba50:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.current_anim = 0;
    ba54:	10 92 40 0e 	sts	0x0E40, r1
	game.player.prone.frame_count = 0;
    ba58:	10 92 43 0e 	sts	0x0E43, r1
	game.player.prone.frames_per_anim = 1;
    ba5c:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.looped = 0;
    ba60:	10 92 44 0e 	sts	0x0E44, r1
	game.player.prone.reversing = 0;
    ba64:	10 92 45 0e 	sts	0x0E45, r1
	game.player.prone.anims = prone_anim;
    ba68:	e7 e5       	ldi	r30, 0x57	; 87
    ba6a:	fe e0       	ldi	r31, 0x0E	; 14
    ba6c:	f0 93 47 0e 	sts	0x0E47, r31
    ba70:	e0 93 46 0e 	sts	0x0E46, r30
	game.player.prone.anims[0] = (char*) map_hero_prone;
    ba74:	8c ea       	ldi	r24, 0xAC	; 172
    ba76:	95 e7       	ldi	r25, 0x75	; 117
    ba78:	91 83       	std	Z+1, r25	; 0x01
    ba7a:	80 83       	st	Z, r24
	
	game.player.run.anim_count = 4;
    ba7c:	84 e0       	ldi	r24, 0x04	; 4
    ba7e:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.current_anim = 0;
    ba82:	10 92 30 0e 	sts	0x0E30, r1
	game.player.run.frame_count = 0;
    ba86:	10 92 33 0e 	sts	0x0E33, r1
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    ba8a:	8c e0       	ldi	r24, 0x0C	; 12
    ba8c:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.looped = 0;
    ba90:	10 92 34 0e 	sts	0x0E34, r1
	game.player.run.reversing = 0;
    ba94:	10 92 35 0e 	sts	0x0E35, r1
	game.player.run.anims = run_anim;
    ba98:	e9 ec       	ldi	r30, 0xC9	; 201
    ba9a:	fe e0       	ldi	r31, 0x0E	; 14
    ba9c:	f0 93 37 0e 	sts	0x0E37, r31
    baa0:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_step_0;
    baa4:	81 ed       	ldi	r24, 0xD1	; 209
    baa6:	95 e7       	ldi	r25, 0x75	; 117
    baa8:	91 83       	std	Z+1, r25	; 0x01
    baaa:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    baac:	89 ec       	ldi	r24, 0xC9	; 201
    baae:	95 e7       	ldi	r25, 0x75	; 117
    bab0:	93 83       	std	Z+3, r25	; 0x03
    bab2:	82 83       	std	Z+2, r24	; 0x02
	game.player.run.anims[2] = (char*) map_hero_step_2;
    bab4:	81 ec       	ldi	r24, 0xC1	; 193
    bab6:	95 e7       	ldi	r25, 0x75	; 117
    bab8:	95 83       	std	Z+5, r25	; 0x05
    baba:	84 83       	std	Z+4, r24	; 0x04
	game.player.run.anims[3] = (char*) map_hero_step_3;
    babc:	89 eb       	ldi	r24, 0xB9	; 185
    babe:	95 e7       	ldi	r25, 0x75	; 117
    bac0:	97 83       	std	Z+7, r25	; 0x07
    bac2:	86 83       	std	Z+6, r24	; 0x06
    bac4:	08 95       	ret

0000bac6 <render_level_tile>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    bac6:	0f 93       	push	r16
    bac8:	1f 93       	push	r17
    baca:	e8 2f       	mov	r30, r24
    bacc:	86 2f       	mov	r24, r22
    bace:	64 2f       	mov	r22, r20
	switch (level_tile)
    bad0:	0e 2f       	mov	r16, r30
    bad2:	10 e0       	ldi	r17, 0x00	; 0
    bad4:	07 30       	cpi	r16, 0x07	; 7
    bad6:	11 05       	cpc	r17, r1
    bad8:	e8 f4       	brcc	.+58     	; 0xbb14 <render_level_tile+0x4e>
    bada:	f8 01       	movw	r30, r16
    badc:	e8 5c       	subi	r30, 0xC8	; 200
    bade:	ff 4f       	sbci	r31, 0xFF	; 255
    bae0:	0c 94 98 67 	jmp	0xcf30	; 0xcf30 <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    bae4:	4d ec       	ldi	r20, 0xCD	; 205
    bae6:	5e e8       	ldi	r21, 0x8E	; 142
    bae8:	11 c0       	rjmp	.+34     	; 0xbb0c <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    baea:	49 ed       	ldi	r20, 0xD9	; 217
    baec:	5e e8       	ldi	r21, 0x8E	; 142
    baee:	0e c0       	rjmp	.+28     	; 0xbb0c <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    baf0:	4c ed       	ldi	r20, 0xDC	; 220
    baf2:	5e e8       	ldi	r21, 0x8E	; 142
    baf4:	0b c0       	rjmp	.+22     	; 0xbb0c <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    baf6:	46 ed       	ldi	r20, 0xD6	; 214
    baf8:	5e e8       	ldi	r21, 0x8E	; 142
    bafa:	08 c0       	rjmp	.+16     	; 0xbb0c <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    bafc:	43 ed       	ldi	r20, 0xD3	; 211
    bafe:	5e e8       	ldi	r21, 0x8E	; 142
    bb00:	05 c0       	rjmp	.+10     	; 0xbb0c <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    bb02:	4a ec       	ldi	r20, 0xCA	; 202
    bb04:	5e e8       	ldi	r21, 0x8E	; 142
    bb06:	02 c0       	rjmp	.+4      	; 0xbb0c <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    bb08:	40 ed       	ldi	r20, 0xD0	; 208
    bb0a:	5e e8       	ldi	r21, 0x8E	; 142
	}
}
    bb0c:	1f 91       	pop	r17
    bb0e:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    bb10:	0c 94 d2 5c 	jmp	0xb9a4	; 0xb9a4 <LBDrawTile>
	}
}
    bb14:	1f 91       	pop	r17
    bb16:	0f 91       	pop	r16
    bb18:	08 95       	ret

0000bb1a <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    bb1a:	1f 93       	push	r17
    bb1c:	cf 93       	push	r28
    bb1e:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    bb20:	d0 e0       	ldi	r29, 0x00	; 0
    bb22:	10 e2       	ldi	r17, 0x20	; 32
    bb24:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    bb26:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    bb28:	c1 17       	cp	r28, r17
    bb2a:	41 f0       	breq	.+16     	; 0xbb3c <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    bb2c:	40 e0       	ldi	r20, 0x00	; 0
    bb2e:	50 e0       	ldi	r21, 0x00	; 0
    bb30:	6c 2f       	mov	r22, r28
    bb32:	8d 2f       	mov	r24, r29
    bb34:	0e 94 0a 4d 	call	0x9a14	; 0x9a14 <SetTile>
    bb38:	cf 5f       	subi	r28, 0xFF	; 255
    bb3a:	f6 cf       	rjmp	.-20     	; 0xbb28 <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    bb3c:	df 5f       	subi	r29, 0xFF	; 255
    bb3e:	dc 31       	cpi	r29, 0x1C	; 28
    bb40:	91 f7       	brne	.-28     	; 0xbb26 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    bb42:	df 91       	pop	r29
    bb44:	cf 91       	pop	r28
    bb46:	1f 91       	pop	r17
    bb48:	08 95       	ret

0000bb4a <get_camera_y>:
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0);
}

u8 get_camera_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1);
    bb4a:	25 e0       	ldi	r18, 0x05	; 5
    bb4c:	3e ef       	ldi	r19, 0xFE	; 254
    bb4e:	48 2f       	mov	r20, r24
    bb50:	42 9f       	mul	r20, r18
    bb52:	c0 01       	movw	r24, r0
    bb54:	43 9f       	mul	r20, r19
    bb56:	90 0d       	add	r25, r0
    bb58:	11 24       	eor	r1, r1
}

#if RLE == 0
u8 read_level_byte(u16 index)
{
	return pgm_read_byte(&level_data[index]);
    bb5a:	fc 01       	movw	r30, r24
    bb5c:	ec 5a       	subi	r30, 0xAC	; 172
    bb5e:	f4 4e       	sbci	r31, 0xE4	; 228
    bb60:	84 91       	lpm	r24, Z
}

u8 get_camera_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1);
}
    bb62:	08 95       	ret

0000bb64 <get_hero_spawn_x>:

u8 get_hero_spawn_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2);
    bb64:	25 e0       	ldi	r18, 0x05	; 5
    bb66:	3e ef       	ldi	r19, 0xFE	; 254
    bb68:	48 2f       	mov	r20, r24
    bb6a:	42 9f       	mul	r20, r18
    bb6c:	c0 01       	movw	r24, r0
    bb6e:	43 9f       	mul	r20, r19
    bb70:	90 0d       	add	r25, r0
    bb72:	11 24       	eor	r1, r1
}

#if RLE == 0
u8 read_level_byte(u16 index)
{
	return pgm_read_byte(&level_data[index]);
    bb74:	fc 01       	movw	r30, r24
    bb76:	eb 5a       	subi	r30, 0xAB	; 171
    bb78:	f4 4e       	sbci	r31, 0xE4	; 228
    bb7a:	84 91       	lpm	r24, Z
}

u8 get_hero_spawn_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2);
}
    bb7c:	08 95       	ret

0000bb7e <get_hero_spawn_y>:

u8 get_hero_spawn_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3);
    bb7e:	25 e0       	ldi	r18, 0x05	; 5
    bb80:	3e ef       	ldi	r19, 0xFE	; 254
    bb82:	48 2f       	mov	r20, r24
    bb84:	42 9f       	mul	r20, r18
    bb86:	c0 01       	movw	r24, r0
    bb88:	43 9f       	mul	r20, r19
    bb8a:	90 0d       	add	r25, r0
    bb8c:	11 24       	eor	r1, r1
}

#if RLE == 0
u8 read_level_byte(u16 index)
{
	return pgm_read_byte(&level_data[index]);
    bb8e:	fc 01       	movw	r30, r24
    bb90:	ea 5a       	subi	r30, 0xAA	; 170
    bb92:	f4 4e       	sbci	r31, 0xE4	; 228
    bb94:	84 91       	lpm	r24, Z
}

u8 get_hero_spawn_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3);
}
    bb96:	08 95       	ret

0000bb98 <get_level_tile>:

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    bb98:	fb 01       	movw	r30, r22
    bb9a:	34 96       	adiw	r30, 0x04	; 4
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x));
    bb9c:	9f ef       	ldi	r25, 0xFF	; 255
    bb9e:	94 9f       	mul	r25, r20
    bba0:	90 01       	movw	r18, r0
    bba2:	95 9f       	mul	r25, r21
    bba4:	30 0d       	add	r19, r0
    bba6:	11 24       	eor	r1, r1
    bba8:	e2 0f       	add	r30, r18
    bbaa:	f3 1f       	adc	r31, r19
    bbac:	25 e0       	ldi	r18, 0x05	; 5
    bbae:	3e ef       	ldi	r19, 0xFE	; 254
    bbb0:	48 2f       	mov	r20, r24
    bbb2:	42 9f       	mul	r20, r18
    bbb4:	c0 01       	movw	r24, r0
    bbb6:	43 9f       	mul	r20, r19
    bbb8:	90 0d       	add	r25, r0
    bbba:	11 24       	eor	r1, r1
    bbbc:	e8 0f       	add	r30, r24
    bbbe:	f9 1f       	adc	r31, r25
}

#if RLE == 0
u8 read_level_byte(u16 index)
{
	return pgm_read_byte(&level_data[index]);
    bbc0:	ed 5a       	subi	r30, 0xAD	; 173
    bbc2:	f4 4e       	sbci	r31, 0xE4	; 228
    bbc4:	84 91       	lpm	r24, Z
}

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x));
}
    bbc6:	08 95       	ret

0000bbc8 <render_camera_view>:

void render_camera_view()
{
    bbc8:	7f 92       	push	r7
    bbca:	8f 92       	push	r8
    bbcc:	9f 92       	push	r9
    bbce:	af 92       	push	r10
    bbd0:	bf 92       	push	r11
    bbd2:	cf 92       	push	r12
    bbd4:	df 92       	push	r13
    bbd6:	ef 92       	push	r14
    bbd8:	ff 92       	push	r15
    bbda:	0f 93       	push	r16
    bbdc:	1f 93       	push	r17
    bbde:	cf 93       	push	r28
    bbe0:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    bbe2:	c0 91 9c 0d 	lds	r28, 0x0D9C
    bbe6:	d0 91 9d 0d 	lds	r29, 0x0D9D
    bbea:	83 e0       	ldi	r24, 0x03	; 3
    bbec:	d6 95       	lsr	r29
    bbee:	c7 95       	ror	r28
    bbf0:	8a 95       	dec	r24
    bbf2:	e1 f7       	brne	.-8      	; 0xbbec <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    bbf4:	c0 90 9e 0d 	lds	r12, 0x0D9E
    bbf8:	d0 90 9f 0d 	lds	r13, 0x0D9F
    bbfc:	93 e0       	ldi	r25, 0x03	; 3
    bbfe:	d6 94       	lsr	r13
    bc00:	c7 94       	ror	r12
    bc02:	9a 95       	dec	r25
    bc04:	e1 f7       	brne	.-8      	; 0xbbfe <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    bc06:	8e 01       	movw	r16, r28
    bc08:	5e 01       	movw	r10, r28
    bc0a:	8c e1       	ldi	r24, 0x1C	; 28
    bc0c:	a8 0e       	add	r10, r24
    bc0e:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    bc10:	46 01       	movw	r8, r12
    bc12:	8a e1       	ldi	r24, 0x1A	; 26
    bc14:	88 0e       	add	r8, r24
    bc16:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    bc18:	a0 16       	cp	r10, r16
    bc1a:	b1 06       	cpc	r11, r17
    bc1c:	c0 f0       	brcs	.+48     	; 0xbc4e <render_camera_view+0x86>
    bc1e:	76 01       	movw	r14, r12
    bc20:	70 2e       	mov	r7, r16
    bc22:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    bc24:	8e 14       	cp	r8, r14
    bc26:	9f 04       	cpc	r9, r15
    bc28:	78 f0       	brcs	.+30     	; 0xbc48 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    bc2a:	a7 01       	movw	r20, r14
    bc2c:	b8 01       	movw	r22, r16
    bc2e:	80 91 91 0d 	lds	r24, 0x0D91
    bc32:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    bc36:	4e 2d       	mov	r20, r14
    bc38:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    bc3a:	67 2d       	mov	r22, r7
    bc3c:	0e 94 63 5d 	call	0xbac6	; 0xbac6 <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    bc40:	8f ef       	ldi	r24, 0xFF	; 255
    bc42:	e8 1a       	sub	r14, r24
    bc44:	f8 0a       	sbc	r15, r24
    bc46:	ee cf       	rjmp	.-36     	; 0xbc24 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    bc48:	0f 5f       	subi	r16, 0xFF	; 255
    bc4a:	1f 4f       	sbci	r17, 0xFF	; 255
    bc4c:	e5 cf       	rjmp	.-54     	; 0xbc18 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    bc4e:	df 91       	pop	r29
    bc50:	cf 91       	pop	r28
    bc52:	1f 91       	pop	r17
    bc54:	0f 91       	pop	r16
    bc56:	ff 90       	pop	r15
    bc58:	ef 90       	pop	r14
    bc5a:	df 90       	pop	r13
    bc5c:	cf 90       	pop	r12
    bc5e:	bf 90       	pop	r11
    bc60:	af 90       	pop	r10
    bc62:	9f 90       	pop	r9
    bc64:	8f 90       	pop	r8
    bc66:	7f 90       	pop	r7
    bc68:	08 95       	ret

0000bc6a <append_tile_column>:

void append_tile_column()
{
    bc6a:	0f 93       	push	r16
    bc6c:	1f 93       	push	r17
    bc6e:	cf 93       	push	r28
    bc70:	df 93       	push	r29
    bc72:	c0 e0       	ldi	r28, 0x00	; 0
    bc74:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    bc76:	0e e1       	ldi	r16, 0x1E	; 30
    bc78:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    bc7a:	40 91 9e 0d 	lds	r20, 0x0D9E
    bc7e:	50 91 9f 0d 	lds	r21, 0x0D9F
    bc82:	83 e0       	ldi	r24, 0x03	; 3
    bc84:	56 95       	lsr	r21
    bc86:	47 95       	ror	r20
    bc88:	8a 95       	dec	r24
    bc8a:	e1 f7       	brne	.-8      	; 0xbc84 <append_tile_column+0x1a>
    bc8c:	4c 0f       	add	r20, r28
    bc8e:	5d 1f       	adc	r21, r29
    bc90:	60 91 98 0d 	lds	r22, 0x0D98
    bc94:	70 91 99 0d 	lds	r23, 0x0D99
    bc98:	80 91 91 0d 	lds	r24, 0x0D91
    bc9c:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    bca0:	28 2f       	mov	r18, r24
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    bca2:	90 91 9d 0c 	lds	r25, 0x0C9D
    bca6:	96 95       	lsr	r25
    bca8:	96 95       	lsr	r25
    bcaa:	96 95       	lsr	r25
    bcac:	ae 01       	movw	r20, r28
    bcae:	49 0f       	add	r20, r25
    bcb0:	51 1d       	adc	r21, r1
    bcb2:	ca 01       	movw	r24, r20
    bcb4:	b8 01       	movw	r22, r16
    bcb6:	0e 94 84 67 	call	0xcf08	; 0xcf08 <__divmodhi4>
    bcba:	48 2f       	mov	r20, r24
    bcbc:	60 91 96 0d 	lds	r22, 0x0D96
    bcc0:	82 2f       	mov	r24, r18
    bcc2:	0e 94 63 5d 	call	0xbac6	; 0xbac6 <render_level_tile>
    bcc6:	21 96       	adiw	r28, 0x01	; 1

void append_tile_column()
{
	u8 level_tile;

    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    bcc8:	cb 31       	cpi	r28, 0x1B	; 27
    bcca:	d1 05       	cpc	r29, r1
    bccc:	b1 f6       	brne	.-84     	; 0xbc7a <append_tile_column+0x10>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    }
	
    game.scroll_src_x++;
    bcce:	80 91 98 0d 	lds	r24, 0x0D98
    bcd2:	90 91 99 0d 	lds	r25, 0x0D99
    bcd6:	01 96       	adiw	r24, 0x01	; 1
    bcd8:	90 93 99 0d 	sts	0x0D99, r25
    bcdc:	80 93 98 0d 	sts	0x0D98, r24
	game.scroll_dest_x++;
    bce0:	80 91 96 0d 	lds	r24, 0x0D96
    bce4:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    bce6:	80 32       	cpi	r24, 0x20	; 32
    bce8:	18 f4       	brcc	.+6      	; 0xbcf0 <append_tile_column+0x86>
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    bcea:	80 93 96 0d 	sts	0x0D96, r24
    bcee:	02 c0       	rjmp	.+4      	; 0xbcf4 <append_tile_column+0x8a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    bcf0:	10 92 96 0d 	sts	0x0D96, r1
}
    bcf4:	df 91       	pop	r29
    bcf6:	cf 91       	pop	r28
    bcf8:	1f 91       	pop	r17
    bcfa:	0f 91       	pop	r16
    bcfc:	08 95       	ret

0000bcfe <append_tile_row>:

void append_tile_row()
{
    bcfe:	cf 93       	push	r28
    bd00:	df 93       	push	r29
    bd02:	c0 e0       	ldi	r28, 0x00	; 0
    bd04:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    bd06:	40 91 9a 0d 	lds	r20, 0x0D9A
    bd0a:	50 91 9b 0d 	lds	r21, 0x0D9B
    bd0e:	60 91 9c 0d 	lds	r22, 0x0D9C
    bd12:	70 91 9d 0d 	lds	r23, 0x0D9D
    bd16:	83 e0       	ldi	r24, 0x03	; 3
    bd18:	76 95       	lsr	r23
    bd1a:	67 95       	ror	r22
    bd1c:	8a 95       	dec	r24
    bd1e:	e1 f7       	brne	.-8      	; 0xbd18 <append_tile_row+0x1a>
    bd20:	6c 0f       	add	r22, r28
    bd22:	7d 1f       	adc	r23, r29
    bd24:	80 91 91 0d 	lds	r24, 0x0D91
    bd28:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    bd2c:	60 91 9c 0c 	lds	r22, 0x0C9C
    bd30:	66 95       	lsr	r22
    bd32:	66 95       	lsr	r22
    bd34:	66 95       	lsr	r22
    bd36:	6c 0f       	add	r22, r28
    bd38:	6f 71       	andi	r22, 0x1F	; 31
    bd3a:	40 91 97 0d 	lds	r20, 0x0D97
    bd3e:	0e 94 63 5d 	call	0xbac6	; 0xbac6 <render_level_tile>
    bd42:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    bd44:	cd 31       	cpi	r28, 0x1D	; 29
    bd46:	d1 05       	cpc	r29, r1
    bd48:	f1 f6       	brne	.-68     	; 0xbd06 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    bd4a:	80 91 9a 0d 	lds	r24, 0x0D9A
    bd4e:	90 91 9b 0d 	lds	r25, 0x0D9B
    bd52:	01 96       	adiw	r24, 0x01	; 1
    bd54:	90 93 9b 0d 	sts	0x0D9B, r25
    bd58:	80 93 9a 0d 	sts	0x0D9A, r24
	game.scroll_dest_y++;
    bd5c:	80 91 97 0d 	lds	r24, 0x0D97
    bd60:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    bd62:	8e 31       	cpi	r24, 0x1E	; 30
    bd64:	18 f4       	brcc	.+6      	; 0xbd6c <append_tile_row+0x6e>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    bd66:	80 93 97 0d 	sts	0x0D97, r24
    bd6a:	02 c0       	rjmp	.+4      	; 0xbd70 <append_tile_row+0x72>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    bd6c:	10 92 97 0d 	sts	0x0D97, r1
}
    bd70:	df 91       	pop	r29
    bd72:	cf 91       	pop	r28
    bd74:	08 95       	ret

0000bd76 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    bd76:	80 91 9c 0d 	lds	r24, 0x0D9C
    bd7a:	90 91 9d 0d 	lds	r25, 0x0D9D
    bd7e:	01 96       	adiw	r24, 0x01	; 1
    bd80:	90 93 9d 0d 	sts	0x0D9D, r25
    bd84:	80 93 9c 0d 	sts	0x0D9C, r24
	Scroll(1,0);
    bd88:	60 e0       	ldi	r22, 0x00	; 0
    bd8a:	81 e0       	ldi	r24, 0x01	; 1
    bd8c:	0e 94 28 5a 	call	0xb450	; 0xb450 <Scroll>
	if (++game.scroll_x == 8)
    bd90:	80 91 94 0d 	lds	r24, 0x0D94
    bd94:	8f 5f       	subi	r24, 0xFF	; 255
    bd96:	88 30       	cpi	r24, 0x08	; 8
    bd98:	19 f0       	breq	.+6      	; 0xbda0 <move_camera_x+0x2a>
    bd9a:	80 93 94 0d 	sts	0x0D94, r24
    bd9e:	08 95       	ret
	{
		game.scroll_x = 0;
    bda0:	10 92 94 0d 	sts	0x0D94, r1
		append_tile_column();
    bda4:	0c 94 35 5e 	jmp	0xbc6a	; 0xbc6a <append_tile_column>

0000bda8 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    bda8:	80 91 9e 0d 	lds	r24, 0x0D9E
    bdac:	90 91 9f 0d 	lds	r25, 0x0D9F
    bdb0:	02 96       	adiw	r24, 0x02	; 2
    bdb2:	90 93 9f 0d 	sts	0x0D9F, r25
    bdb6:	80 93 9e 0d 	sts	0x0D9E, r24
	game.scroll_y+=2;
    bdba:	80 91 95 0d 	lds	r24, 0x0D95
    bdbe:	8e 5f       	subi	r24, 0xFE	; 254
    bdc0:	80 93 95 0d 	sts	0x0D95, r24
	Scroll(0,2);
    bdc4:	62 e0       	ldi	r22, 0x02	; 2
    bdc6:	80 e0       	ldi	r24, 0x00	; 0
    bdc8:	0e 94 28 5a 	call	0xb450	; 0xb450 <Scroll>
	if (game.scroll_y == 8)
    bdcc:	80 91 95 0d 	lds	r24, 0x0D95
    bdd0:	88 30       	cpi	r24, 0x08	; 8
    bdd2:	21 f4       	brne	.+8      	; 0xbddc <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    bdd4:	10 92 95 0d 	sts	0x0D95, r1
		append_tile_row();
    bdd8:	0c 94 7f 5e 	jmp	0xbcfe	; 0xbcfe <append_tile_row>
    bddc:	08 95       	ret

0000bdde <load_level>:
	}
}

void load_level(u8 index)
{	
    bdde:	1f 93       	push	r17
    bde0:	cf 93       	push	r28
    bde2:	df 93       	push	r29
    bde4:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    bde6:	e9 e9       	ldi	r30, 0x99	; 153
    bde8:	fc e0       	ldi	r31, 0x0C	; 12
    bdea:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    bdec:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    bdee:	8e e1       	ldi	r24, 0x1E	; 30
    bdf0:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    bdf2:	89 ef       	ldi	r24, 0xF9	; 249
    bdf4:	95 e7       	ldi	r25, 0x75	; 117
    bdf6:	92 83       	std	Z+2, r25	; 0x02
    bdf8:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    bdfa:	82 e0       	ldi	r24, 0x02	; 2
    bdfc:	80 83       	st	Z, r24
	clear_overlay(2);
    bdfe:	0e 94 8d 5d 	call	0xbb1a	; 0xbb1a <clear_overlay>
	game.current_level = index;
    be02:	c0 e9       	ldi	r28, 0x90	; 144
    be04:	dd e0       	ldi	r29, 0x0D	; 13
    be06:	19 83       	std	Y+1, r17	; 0x01

#endif

u8 get_camera_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0);
    be08:	85 e0       	ldi	r24, 0x05	; 5
    be0a:	9e ef       	ldi	r25, 0xFE	; 254
    be0c:	18 9f       	mul	r17, r24
    be0e:	f0 01       	movw	r30, r0
    be10:	19 9f       	mul	r17, r25
    be12:	f0 0d       	add	r31, r0
    be14:	11 24       	eor	r1, r1
}

#if RLE == 0
u8 read_level_byte(u16 index)
{
	return pgm_read_byte(&level_data[index]);
    be16:	ed 5a       	subi	r30, 0xAD	; 173
    be18:	f4 4e       	sbci	r31, 0xE4	; 228
    be1a:	e4 91       	lpm	r30, Z
	Screen.scrollHeight = 30;
	Screen.overlayTileTable = tiles_data;
	Screen.overlayHeight = 2;
	clear_overlay(2);
	game.current_level = index;
	game.camera_x = get_camera_x(index);
    be1c:	f0 e0       	ldi	r31, 0x00	; 0
    be1e:	fd 87       	std	Y+13, r31	; 0x0d
    be20:	ec 87       	std	Y+12, r30	; 0x0c
	game.camera_y = get_camera_y(index);
    be22:	81 2f       	mov	r24, r17
    be24:	0e 94 a5 5d 	call	0xbb4a	; 0xbb4a <get_camera_y>
    be28:	90 e0       	ldi	r25, 0x00	; 0
    be2a:	9f 87       	std	Y+15, r25	; 0x0f
    be2c:	8e 87       	std	Y+14, r24	; 0x0e
	game.player.shared.x = get_hero_spawn_x(index)*8;
    be2e:	81 2f       	mov	r24, r17
    be30:	0e 94 b2 5d 	call	0xbb64	; 0xbb64 <get_hero_spawn_x>
    be34:	28 e0       	ldi	r18, 0x08	; 8
    be36:	82 9f       	mul	r24, r18
    be38:	c0 01       	movw	r24, r0
    be3a:	11 24       	eor	r1, r1
    be3c:	bc 01       	movw	r22, r24
    be3e:	88 27       	eor	r24, r24
    be40:	77 fd       	sbrc	r23, 7
    be42:	80 95       	com	r24
    be44:	98 2f       	mov	r25, r24
    be46:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    be4a:	68 8f       	std	Y+24, r22	; 0x18
    be4c:	79 8f       	std	Y+25, r23	; 0x19
    be4e:	8a 8f       	std	Y+26, r24	; 0x1a
    be50:	9b 8f       	std	Y+27, r25	; 0x1b
	game.player.shared.y = get_hero_spawn_y(index)*8;
    be52:	81 2f       	mov	r24, r17
    be54:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <get_hero_spawn_y>
    be58:	28 e0       	ldi	r18, 0x08	; 8
    be5a:	82 9f       	mul	r24, r18
    be5c:	c0 01       	movw	r24, r0
    be5e:	11 24       	eor	r1, r1
    be60:	bc 01       	movw	r22, r24
    be62:	88 27       	eor	r24, r24
    be64:	77 fd       	sbrc	r23, 7
    be66:	80 95       	com	r24
    be68:	98 2f       	mov	r25, r24
    be6a:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    be6e:	6c 8f       	std	Y+28, r22	; 0x1c
    be70:	7d 8f       	std	Y+29, r23	; 0x1d
    be72:	8e 8f       	std	Y+30, r24	; 0x1e
    be74:	9f 8f       	std	Y+31, r25	; 0x1f
	game.camera_x *= 8;
    be76:	8c 85       	ldd	r24, Y+12	; 0x0c
    be78:	9d 85       	ldd	r25, Y+13	; 0x0d
    be7a:	23 e0       	ldi	r18, 0x03	; 3
    be7c:	88 0f       	add	r24, r24
    be7e:	99 1f       	adc	r25, r25
    be80:	2a 95       	dec	r18
    be82:	e1 f7       	brne	.-8      	; 0xbe7c <load_level+0x9e>
    be84:	9d 87       	std	Y+13, r25	; 0x0d
    be86:	8c 87       	std	Y+12, r24	; 0x0c
	game.camera_y *= 8;
    be88:	8e 85       	ldd	r24, Y+14	; 0x0e
    be8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    be8c:	33 e0       	ldi	r19, 0x03	; 3
    be8e:	88 0f       	add	r24, r24
    be90:	99 1f       	adc	r25, r25
    be92:	3a 95       	dec	r19
    be94:	e1 f7       	brne	.-8      	; 0xbe8e <load_level+0xb0>
    be96:	9f 87       	std	Y+15, r25	; 0x0f
    be98:	8e 87       	std	Y+14, r24	; 0x0e
	render_camera_view();
    be9a:	0e 94 e4 5d 	call	0xbbc8	; 0xbbc8 <render_camera_view>
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    be9e:	88 e2       	ldi	r24, 0x28	; 40
    bea0:	9e e0       	ldi	r25, 0x0E	; 14
    bea2:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    bea6:	40 e0       	ldi	r20, 0x00	; 0
    bea8:	bc 01       	movw	r22, r24
    beaa:	80 e0       	ldi	r24, 0x00	; 0
}
    beac:	df 91       	pop	r29
    beae:	cf 91       	pop	r28
    beb0:	1f 91       	pop	r17
	game.player.shared.x = get_hero_spawn_x(index)*8;
	game.player.shared.y = get_hero_spawn_y(index)*8;
	game.camera_x *= 8;
	game.camera_y *= 8;
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
    beb2:	0c 94 e1 5b 	jmp	0xb7c2	; 0xb7c2 <LBMapSprite>

0000beb6 <solid_tile>:
	load_level(index);
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    beb6:	81 50       	subi	r24, 0x01	; 1
    beb8:	84 30       	cpi	r24, 0x04	; 4
    beba:	10 f0       	brcs	.+4      	; 0xbec0 <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    bebc:	80 e0       	ldi	r24, 0x00	; 0
    bebe:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    bec0:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    bec2:	08 95       	ret

0000bec4 <on_solid_ground>:

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    bec4:	2f 92       	push	r2
    bec6:	3f 92       	push	r3
    bec8:	4f 92       	push	r4
    beca:	5f 92       	push	r5
    becc:	6f 92       	push	r6
    bece:	7f 92       	push	r7
    bed0:	8f 92       	push	r8
    bed2:	9f 92       	push	r9
    bed4:	af 92       	push	r10
    bed6:	bf 92       	push	r11
    bed8:	cf 92       	push	r12
    beda:	df 92       	push	r13
    bedc:	ef 92       	push	r14
    bede:	ff 92       	push	r15
    bee0:	0f 93       	push	r16
    bee2:	1f 93       	push	r17
    bee4:	cf 93       	push	r28
    bee6:	df 93       	push	r29
    bee8:	00 d0       	rcall	.+0      	; 0xbeea <on_solid_ground+0x26>
    beea:	00 d0       	rcall	.+0      	; 0xbeec <on_solid_ground+0x28>
    beec:	00 d0       	rcall	.+0      	; 0xbeee <on_solid_ground+0x2a>
    beee:	cd b7       	in	r28, 0x3d	; 61
    bef0:	de b7       	in	r29, 0x3e	; 62
    bef2:	9e 83       	std	Y+6, r25	; 0x06
    bef4:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bef6:	88 e0       	ldi	r24, 0x08	; 8
    bef8:	48 9f       	mul	r20, r24
    befa:	a0 01       	movw	r20, r0
    befc:	11 24       	eor	r1, r1
    befe:	26 2e       	mov	r2, r22
    bf00:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bf02:	00 e0       	ldi	r16, 0x00	; 0
    bf04:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bf06:	ca 01       	movw	r24, r20
    bf08:	aa 27       	eor	r26, r26
    bf0a:	97 fd       	sbrc	r25, 7
    bf0c:	a0 95       	com	r26
    bf0e:	ba 2f       	mov	r27, r26
    bf10:	89 83       	std	Y+1, r24	; 0x01
    bf12:	9a 83       	std	Y+2, r25	; 0x02
    bf14:	ab 83       	std	Y+3, r26	; 0x03
    bf16:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bf18:	02 15       	cp	r16, r2
    bf1a:	13 05       	cpc	r17, r3
    bf1c:	09 f4       	brne	.+2      	; 0xbf20 <on_solid_ground+0x5c>
    bf1e:	81 c0       	rjmp	.+258    	; 0xc022 <on_solid_ground+0x15e>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bf20:	69 81       	ldd	r22, Y+1	; 0x01
    bf22:	7a 81       	ldd	r23, Y+2	; 0x02
    bf24:	8b 81       	ldd	r24, Y+3	; 0x03
    bf26:	9c 81       	ldd	r25, Y+4	; 0x04
    bf28:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    bf2c:	4b 01       	movw	r8, r22
    bf2e:	5c 01       	movw	r10, r24
    bf30:	b8 01       	movw	r22, r16
    bf32:	88 27       	eor	r24, r24
    bf34:	77 fd       	sbrc	r23, 7
    bf36:	80 95       	com	r24
    bf38:	98 2f       	mov	r25, r24
    bf3a:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    bf3e:	6b 01       	movw	r12, r22
    bf40:	7c 01       	movw	r14, r24
    bf42:	ad 81       	ldd	r26, Y+5	; 0x05
    bf44:	be 81       	ldd	r27, Y+6	; 0x06
    bf46:	1c 96       	adiw	r26, 0x0c	; 12
    bf48:	2d 91       	ld	r18, X+
    bf4a:	3d 91       	ld	r19, X+
    bf4c:	4d 91       	ld	r20, X+
    bf4e:	5c 91       	ld	r21, X
    bf50:	1f 97       	sbiw	r26, 0x0f	; 15
    bf52:	c5 01       	movw	r24, r10
    bf54:	b4 01       	movw	r22, r8
    bf56:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    bf5a:	20 e0       	ldi	r18, 0x00	; 0
    bf5c:	30 e0       	ldi	r19, 0x00	; 0
    bf5e:	40 e0       	ldi	r20, 0x00	; 0
    bf60:	5e e3       	ldi	r21, 0x3E	; 62
    bf62:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    bf66:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    bf6a:	2b 01       	movw	r4, r22
    bf6c:	3c 01       	movw	r6, r24
    bf6e:	20 e0       	ldi	r18, 0x00	; 0
    bf70:	30 e0       	ldi	r19, 0x00	; 0
    bf72:	40 e0       	ldi	r20, 0x00	; 0
    bf74:	5e e3       	ldi	r21, 0x3E	; 62
    bf76:	ed 81       	ldd	r30, Y+5	; 0x05
    bf78:	fe 81       	ldd	r31, Y+6	; 0x06
    bf7a:	60 85       	ldd	r22, Z+8	; 0x08
    bf7c:	71 85       	ldd	r23, Z+9	; 0x09
    bf7e:	82 85       	ldd	r24, Z+10	; 0x0a
    bf80:	93 85       	ldd	r25, Z+11	; 0x0b
    bf82:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    bf86:	a7 01       	movw	r20, r14
    bf88:	96 01       	movw	r18, r12
    bf8a:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    bf8e:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    bf92:	a2 01       	movw	r20, r4
    bf94:	80 91 91 0d 	lds	r24, 0x0D91
    bf98:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    bf9c:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    bf9e:	ad 81       	ldd	r26, Y+5	; 0x05
    bfa0:	be 81       	ldd	r27, Y+6	; 0x06
    bfa2:	1c 96       	adiw	r26, 0x0c	; 12
    bfa4:	2d 91       	ld	r18, X+
    bfa6:	3d 91       	ld	r19, X+
    bfa8:	4d 91       	ld	r20, X+
    bfaa:	5c 91       	ld	r21, X
    bfac:	1f 97       	sbiw	r26, 0x0f	; 15
    bfae:	c5 01       	movw	r24, r10
    bfb0:	b4 01       	movw	r22, r8
    bfb2:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    bfb6:	20 e0       	ldi	r18, 0x00	; 0
    bfb8:	30 e0       	ldi	r19, 0x00	; 0
    bfba:	40 e0       	ldi	r20, 0x00	; 0
    bfbc:	5e e3       	ldi	r21, 0x3E	; 62
    bfbe:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    bfc2:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    bfc6:	4b 01       	movw	r8, r22
    bfc8:	5c 01       	movw	r10, r24
    bfca:	20 e0       	ldi	r18, 0x00	; 0
    bfcc:	30 e0       	ldi	r19, 0x00	; 0
    bfce:	40 ee       	ldi	r20, 0xE0	; 224
    bfd0:	50 e4       	ldi	r21, 0x40	; 64
    bfd2:	ed 81       	ldd	r30, Y+5	; 0x05
    bfd4:	fe 81       	ldd	r31, Y+6	; 0x06
    bfd6:	60 85       	ldd	r22, Z+8	; 0x08
    bfd8:	71 85       	ldd	r23, Z+9	; 0x09
    bfda:	82 85       	ldd	r24, Z+10	; 0x0a
    bfdc:	93 85       	ldd	r25, Z+11	; 0x0b
    bfde:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    bfe2:	20 e0       	ldi	r18, 0x00	; 0
    bfe4:	30 e0       	ldi	r19, 0x00	; 0
    bfe6:	40 e0       	ldi	r20, 0x00	; 0
    bfe8:	5e e3       	ldi	r21, 0x3E	; 62
    bfea:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    bfee:	a7 01       	movw	r20, r14
    bff0:	96 01       	movw	r18, r12
    bff2:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    bff6:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    bffa:	a4 01       	movw	r20, r8
    bffc:	80 91 91 0d 	lds	r24, 0x0D91
    c000:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c004:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    c006:	87 2d       	mov	r24, r7
    c008:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
    c00c:	81 11       	cpse	r24, r1
    c00e:	0b c0       	rjmp	.+22     	; 0xc026 <on_solid_ground+0x162>
    c010:	8f 2d       	mov	r24, r15
    c012:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
    c016:	0f 5f       	subi	r16, 0xFF	; 255
    c018:	1f 4f       	sbci	r17, 0xFF	; 255
    c01a:	88 23       	and	r24, r24
    c01c:	09 f4       	brne	.+2      	; 0xc020 <on_solid_ground+0x15c>
    c01e:	7c cf       	rjmp	.-264    	; 0xbf18 <on_solid_ground+0x54>
    c020:	02 c0       	rjmp	.+4      	; 0xc026 <on_solid_ground+0x162>
		{
			return 1;
		}
	}
	return 0;
    c022:	80 e0       	ldi	r24, 0x00	; 0
    c024:	01 c0       	rjmp	.+2      	; 0xc028 <on_solid_ground+0x164>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    c026:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    c028:	26 96       	adiw	r28, 0x06	; 6
    c02a:	0f b6       	in	r0, 0x3f	; 63
    c02c:	f8 94       	cli
    c02e:	de bf       	out	0x3e, r29	; 62
    c030:	0f be       	out	0x3f, r0	; 63
    c032:	cd bf       	out	0x3d, r28	; 61
    c034:	df 91       	pop	r29
    c036:	cf 91       	pop	r28
    c038:	1f 91       	pop	r17
    c03a:	0f 91       	pop	r16
    c03c:	ff 90       	pop	r15
    c03e:	ef 90       	pop	r14
    c040:	df 90       	pop	r13
    c042:	cf 90       	pop	r12
    c044:	bf 90       	pop	r11
    c046:	af 90       	pop	r10
    c048:	9f 90       	pop	r9
    c04a:	8f 90       	pop	r8
    c04c:	7f 90       	pop	r7
    c04e:	6f 90       	pop	r6
    c050:	5f 90       	pop	r5
    c052:	4f 90       	pop	r4
    c054:	3f 90       	pop	r3
    c056:	2f 90       	pop	r2
    c058:	08 95       	ret

0000c05a <update_player>:

void update_player()
{
    c05a:	1f 93       	push	r17
    c05c:	cf 93       	push	r28
    c05e:	df 93       	push	r29
    c060:	1f 92       	push	r1
    c062:	cd b7       	in	r28, 0x3d	; 61
    c064:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & (IDLE|RUNNING))
    c066:	80 91 b2 0d 	lds	r24, 0x0DB2
    c06a:	98 2f       	mov	r25, r24
    c06c:	9a 70       	andi	r25, 0x0A	; 10
    c06e:	09 f4       	brne	.+2      	; 0xc072 <update_player+0x18>
    c070:	a8 c0       	rjmp	.+336    	; 0xc1c2 <update_player+0x168>
	{
		if (!on_solid_ground(&game.player.shared, 2, 3))
    c072:	43 e0       	ldi	r20, 0x03	; 3
    c074:	62 e0       	ldi	r22, 0x02	; 2
    c076:	80 ea       	ldi	r24, 0xA0	; 160
    c078:	9d e0       	ldi	r25, 0x0D	; 13
    c07a:	0e 94 62 5f 	call	0xbec4	; 0xbec4 <on_solid_ground>
    c07e:	88 23       	and	r24, r24
    c080:	09 f4       	brne	.+2      	; 0xc084 <update_player+0x2a>
    c082:	89 c0       	rjmp	.+274    	; 0xc196 <update_player+0x13c>
			game.player.flags = JUMPING;
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
		}
		else
		{
			if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    c084:	10 91 54 0e 	lds	r17, 0x0E54
    c088:	17 ff       	sbrs	r17, 7
    c08a:	31 c0       	rjmp	.+98     	; 0xc0ee <update_player+0x94>
    c08c:	20 e0       	ldi	r18, 0x00	; 0
    c08e:	30 e0       	ldi	r19, 0x00	; 0
    c090:	40 e0       	ldi	r20, 0x00	; 0
    c092:	5e e3       	ldi	r21, 0x3E	; 62
    c094:	60 91 a8 0d 	lds	r22, 0x0DA8
    c098:	70 91 a9 0d 	lds	r23, 0x0DA9
    c09c:	80 91 aa 0d 	lds	r24, 0x0DAA
    c0a0:	90 91 ab 0d 	lds	r25, 0x0DAB
    c0a4:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c0a8:	20 e0       	ldi	r18, 0x00	; 0
    c0aa:	30 e0       	ldi	r19, 0x00	; 0
    c0ac:	40 e0       	ldi	r20, 0x00	; 0
    c0ae:	50 e4       	ldi	r21, 0x40	; 64
    c0b0:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c0b4:	20 e0       	ldi	r18, 0x00	; 0
    c0b6:	30 e0       	ldi	r19, 0x00	; 0
    c0b8:	4f e7       	ldi	r20, 0x7F	; 127
    c0ba:	53 e4       	ldi	r21, 0x43	; 67
    c0bc:	0e 94 03 68 	call	0xd006	; 0xd006 <__cmpsf2>
    c0c0:	87 ff       	sbrs	r24, 7
    c0c2:	15 c0       	rjmp	.+42     	; 0xc0ee <update_player+0x94>
			{
				game.player.shared.vx = RUN_SPEED;
    c0c4:	80 e0       	ldi	r24, 0x00	; 0
    c0c6:	90 e0       	ldi	r25, 0x00	; 0
    c0c8:	a0 e7       	ldi	r26, 0x70	; 112
    c0ca:	b2 e4       	ldi	r27, 0x42	; 66
    c0cc:	80 93 a0 0d 	sts	0x0DA0, r24
    c0d0:	90 93 a1 0d 	sts	0x0DA1, r25
    c0d4:	a0 93 a2 0d 	sts	0x0DA2, r26
    c0d8:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.flags = RUNNING;
    c0dc:	82 e0       	ldi	r24, 0x02	; 2
    c0de:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    c0e2:	80 e3       	ldi	r24, 0x30	; 48
    c0e4:	9e e0       	ldi	r25, 0x0E	; 14
    c0e6:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c0ea:	40 e0       	ldi	r20, 0x00	; 0
    c0ec:	40 c0       	rjmp	.+128    	; 0xc16e <update_player+0x114>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c0ee:	16 ff       	sbrs	r17, 6
    c0f0:	2b c0       	rjmp	.+86     	; 0xc148 <update_player+0xee>
    c0f2:	60 91 9c 0d 	lds	r22, 0x0D9C
    c0f6:	70 91 9d 0d 	lds	r23, 0x0D9D
    c0fa:	80 e0       	ldi	r24, 0x00	; 0
    c0fc:	90 e0       	ldi	r25, 0x00	; 0
    c0fe:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    c102:	9b 01       	movw	r18, r22
    c104:	ac 01       	movw	r20, r24
    c106:	60 91 a8 0d 	lds	r22, 0x0DA8
    c10a:	70 91 a9 0d 	lds	r23, 0x0DA9
    c10e:	80 91 aa 0d 	lds	r24, 0x0DAA
    c112:	90 91 ab 0d 	lds	r25, 0x0DAB
    c116:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    c11a:	18 16       	cp	r1, r24
    c11c:	ac f4       	brge	.+42     	; 0xc148 <update_player+0xee>
			{
				game.player.shared.vx = -RUN_SPEED;
    c11e:	80 e0       	ldi	r24, 0x00	; 0
    c120:	90 e0       	ldi	r25, 0x00	; 0
    c122:	a0 e7       	ldi	r26, 0x70	; 112
    c124:	b2 ec       	ldi	r27, 0xC2	; 194
    c126:	80 93 a0 0d 	sts	0x0DA0, r24
    c12a:	90 93 a1 0d 	sts	0x0DA1, r25
    c12e:	a0 93 a2 0d 	sts	0x0DA2, r26
    c132:	b0 93 a3 0d 	sts	0x0DA3, r27
				game.player.flags = RUNNING;
    c136:	82 e0       	ldi	r24, 0x02	; 2
    c138:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    c13c:	80 e3       	ldi	r24, 0x30	; 48
    c13e:	9e e0       	ldi	r25, 0x0E	; 14
    c140:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c144:	41 e0       	ldi	r20, 0x01	; 1
    c146:	13 c0       	rjmp	.+38     	; 0xc16e <update_player+0x114>
			}
			else
			{
				game.player.flags = IDLE;
    c148:	88 e0       	ldi	r24, 0x08	; 8
    c14a:	80 93 b2 0d 	sts	0x0DB2, r24
				game.player.shared.vx = 0;
    c14e:	10 92 a0 0d 	sts	0x0DA0, r1
    c152:	10 92 a1 0d 	sts	0x0DA1, r1
    c156:	10 92 a2 0d 	sts	0x0DA2, r1
    c15a:	10 92 a3 0d 	sts	0x0DA3, r1
				LBMapSprite(0, LBGetNextFrame(&game.player.idle), sprites[0].flags);
    c15e:	40 91 05 05 	lds	r20, 0x0505
    c162:	88 e2       	ldi	r24, 0x28	; 40
    c164:	9e e0       	ldi	r25, 0x0E	; 14
    c166:	49 83       	std	Y+1, r20	; 0x01
    c168:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c16c:	49 81       	ldd	r20, Y+1	; 0x01
    c16e:	bc 01       	movw	r22, r24
    c170:	80 e0       	ldi	r24, 0x00	; 0
    c172:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B)
    c176:	80 91 50 0e 	lds	r24, 0x0E50
    c17a:	80 ff       	sbrs	r24, 0
    c17c:	9b c0       	rjmp	.+310    	; 0xc2b4 <update_player+0x25a>
			{
				game.player.shared.vy = -JUMP_SPEED;
    c17e:	80 e0       	ldi	r24, 0x00	; 0
    c180:	90 e0       	ldi	r25, 0x00	; 0
    c182:	a6 e1       	ldi	r26, 0x16	; 22
    c184:	b3 ec       	ldi	r27, 0xC3	; 195
    c186:	80 93 a4 0d 	sts	0x0DA4, r24
    c18a:	90 93 a5 0d 	sts	0x0DA5, r25
    c18e:	a0 93 a6 0d 	sts	0x0DA6, r26
    c192:	b0 93 a7 0d 	sts	0x0DA7, r27
				game.player.shared.gravity = GRAVITY;
    c196:	8f ef       	ldi	r24, 0xFF	; 255
    c198:	80 93 b0 0d 	sts	0x0DB0, r24
				game.player.flags = JUMPING;
    c19c:	81 e0       	ldi	r24, 0x01	; 1
    c19e:	80 93 b2 0d 	sts	0x0DB2, r24
				LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    c1a2:	40 91 05 05 	lds	r20, 0x0505
    c1a6:	88 e3       	ldi	r24, 0x38	; 56
    c1a8:	9e e0       	ldi	r25, 0x0E	; 14
    c1aa:	49 83       	std	Y+1, r20	; 0x01
    c1ac:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c1b0:	49 81       	ldd	r20, Y+1	; 0x01
    c1b2:	bc 01       	movw	r22, r24
    c1b4:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    c1b6:	0f 90       	pop	r0
    c1b8:	df 91       	pop	r29
    c1ba:	cf 91       	pop	r28
    c1bc:	1f 91       	pop	r17
			if (game.joypadState.pressed & BTN_B)
			{
				game.player.shared.vy = -JUMP_SPEED;
				game.player.shared.gravity = GRAVITY;
				game.player.flags = JUMPING;
				LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    c1be:	0c 94 e1 5b 	jmp	0xb7c2	; 0xb7c2 <LBMapSprite>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    c1c2:	80 ff       	sbrs	r24, 0
    c1c4:	77 c0       	rjmp	.+238    	; 0xc2b4 <update_player+0x25a>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    c1c6:	10 91 54 0e 	lds	r17, 0x0E54
    c1ca:	17 ff       	sbrs	r17, 7
    c1cc:	2e c0       	rjmp	.+92     	; 0xc22a <update_player+0x1d0>
    c1ce:	20 e0       	ldi	r18, 0x00	; 0
    c1d0:	30 e0       	ldi	r19, 0x00	; 0
    c1d2:	40 e0       	ldi	r20, 0x00	; 0
    c1d4:	5e e3       	ldi	r21, 0x3E	; 62
    c1d6:	60 91 a8 0d 	lds	r22, 0x0DA8
    c1da:	70 91 a9 0d 	lds	r23, 0x0DA9
    c1de:	80 91 aa 0d 	lds	r24, 0x0DAA
    c1e2:	90 91 ab 0d 	lds	r25, 0x0DAB
    c1e6:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c1ea:	20 e0       	ldi	r18, 0x00	; 0
    c1ec:	30 e0       	ldi	r19, 0x00	; 0
    c1ee:	40 e0       	ldi	r20, 0x00	; 0
    c1f0:	50 e4       	ldi	r21, 0x40	; 64
    c1f2:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c1f6:	20 e0       	ldi	r18, 0x00	; 0
    c1f8:	30 e0       	ldi	r19, 0x00	; 0
    c1fa:	4f e7       	ldi	r20, 0x7F	; 127
    c1fc:	53 e4       	ldi	r21, 0x43	; 67
    c1fe:	0e 94 03 68 	call	0xd006	; 0xd006 <__cmpsf2>
    c202:	87 ff       	sbrs	r24, 7
    c204:	12 c0       	rjmp	.+36     	; 0xc22a <update_player+0x1d0>
		{
			game.player.shared.vx = RUN_SPEED;
    c206:	80 e0       	ldi	r24, 0x00	; 0
    c208:	90 e0       	ldi	r25, 0x00	; 0
    c20a:	a0 e7       	ldi	r26, 0x70	; 112
    c20c:	b2 e4       	ldi	r27, 0x42	; 66
    c20e:	80 93 a0 0d 	sts	0x0DA0, r24
    c212:	90 93 a1 0d 	sts	0x0DA1, r25
    c216:	a0 93 a2 0d 	sts	0x0DA2, r26
    c21a:	b0 93 a3 0d 	sts	0x0DA3, r27
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), 0);
    c21e:	88 e3       	ldi	r24, 0x38	; 56
    c220:	9e e0       	ldi	r25, 0x0E	; 14
    c222:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c226:	40 e0       	ldi	r20, 0x00	; 0
    c228:	3a c0       	rjmp	.+116    	; 0xc29e <update_player+0x244>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    c22a:	16 ff       	sbrs	r17, 6
    c22c:	28 c0       	rjmp	.+80     	; 0xc27e <update_player+0x224>
    c22e:	60 91 9c 0d 	lds	r22, 0x0D9C
    c232:	70 91 9d 0d 	lds	r23, 0x0D9D
    c236:	80 e0       	ldi	r24, 0x00	; 0
    c238:	90 e0       	ldi	r25, 0x00	; 0
    c23a:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    c23e:	9b 01       	movw	r18, r22
    c240:	ac 01       	movw	r20, r24
    c242:	60 91 a8 0d 	lds	r22, 0x0DA8
    c246:	70 91 a9 0d 	lds	r23, 0x0DA9
    c24a:	80 91 aa 0d 	lds	r24, 0x0DAA
    c24e:	90 91 ab 0d 	lds	r25, 0x0DAB
    c252:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    c256:	18 16       	cp	r1, r24
    c258:	94 f4       	brge	.+36     	; 0xc27e <update_player+0x224>
		{
			game.player.shared.vx = -RUN_SPEED;
    c25a:	80 e0       	ldi	r24, 0x00	; 0
    c25c:	90 e0       	ldi	r25, 0x00	; 0
    c25e:	a0 e7       	ldi	r26, 0x70	; 112
    c260:	b2 ec       	ldi	r27, 0xC2	; 194
    c262:	80 93 a0 0d 	sts	0x0DA0, r24
    c266:	90 93 a1 0d 	sts	0x0DA1, r25
    c26a:	a0 93 a2 0d 	sts	0x0DA2, r26
    c26e:	b0 93 a3 0d 	sts	0x0DA3, r27
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    c272:	88 e3       	ldi	r24, 0x38	; 56
    c274:	9e e0       	ldi	r25, 0x0E	; 14
    c276:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c27a:	41 e0       	ldi	r20, 0x01	; 1
    c27c:	10 c0       	rjmp	.+32     	; 0xc29e <update_player+0x244>
		}
		else
		{
			game.player.shared.vx = 0;
    c27e:	10 92 a0 0d 	sts	0x0DA0, r1
    c282:	10 92 a1 0d 	sts	0x0DA1, r1
    c286:	10 92 a2 0d 	sts	0x0DA2, r1
    c28a:	10 92 a3 0d 	sts	0x0DA3, r1
			LBMapSprite(0, LBGetNextFrame(&game.player.jump), sprites[0].flags);
    c28e:	40 91 05 05 	lds	r20, 0x0505
    c292:	88 e3       	ldi	r24, 0x38	; 56
    c294:	9e e0       	ldi	r25, 0x0E	; 14
    c296:	49 83       	std	Y+1, r20	; 0x01
    c298:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <LBGetNextFrame>
    c29c:	49 81       	ldd	r20, Y+1	; 0x01
    c29e:	bc 01       	movw	r22, r24
    c2a0:	80 e0       	ldi	r24, 0x00	; 0
    c2a2:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    c2a6:	80 91 b0 0d 	lds	r24, 0x0DB0
    c2aa:	81 11       	cpse	r24, r1
    c2ac:	03 c0       	rjmp	.+6      	; 0xc2b4 <update_player+0x25a>
		{
			game.player.flags = IDLE;
    c2ae:	88 e0       	ldi	r24, 0x08	; 8
    c2b0:	80 93 b2 0d 	sts	0x0DB2, r24
	}
	else if (game.player.flags & PRONE)
	{
		
	}
}
    c2b4:	0f 90       	pop	r0
    c2b6:	df 91       	pop	r29
    c2b8:	cf 91       	pop	r28
    c2ba:	1f 91       	pop	r17
    c2bc:	08 95       	ret

0000c2be <pixel_overlap>:

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    c2be:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    c2c0:	86 17       	cp	r24, r22
    c2c2:	97 07       	cpc	r25, r23
    c2c4:	28 f4       	brcc	.+10     	; 0xc2d0 <pixel_overlap+0x12>
    c2c6:	94 2f       	mov	r25, r20
    c2c8:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    c2ca:	89 2f       	mov	r24, r25
    c2cc:	86 1b       	sub	r24, r22
    c2ce:	01 c0       	rjmp	.+2      	; 0xc2d2 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    c2d0:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    c2d2:	e4 0f       	add	r30, r20
    c2d4:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    c2d6:	62 0f       	add	r22, r18
    c2d8:	71 1d       	adc	r23, r1
	if (s2 < s1)
    c2da:	6e 17       	cp	r22, r30
    c2dc:	7f 07       	cpc	r23, r31
    c2de:	10 f4       	brcc	.+4      	; 0xc2e4 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    c2e0:	6e 1b       	sub	r22, r30
    c2e2:	86 0f       	add	r24, r22
	}
	return result;
}
    c2e4:	08 95       	ret

0000c2e6 <collision_detect_level>:

void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    c2e6:	2f 92       	push	r2
    c2e8:	3f 92       	push	r3
    c2ea:	4f 92       	push	r4
    c2ec:	5f 92       	push	r5
    c2ee:	6f 92       	push	r6
    c2f0:	7f 92       	push	r7
    c2f2:	8f 92       	push	r8
    c2f4:	9f 92       	push	r9
    c2f6:	af 92       	push	r10
    c2f8:	bf 92       	push	r11
    c2fa:	cf 92       	push	r12
    c2fc:	df 92       	push	r13
    c2fe:	ef 92       	push	r14
    c300:	ff 92       	push	r15
    c302:	0f 93       	push	r16
    c304:	1f 93       	push	r17
    c306:	cf 93       	push	r28
    c308:	df 93       	push	r29
    c30a:	cd b7       	in	r28, 0x3d	; 61
    c30c:	de b7       	in	r29, 0x3e	; 62
    c30e:	2a 97       	sbiw	r28, 0x0a	; 10
    c310:	0f b6       	in	r0, 0x3f	; 63
    c312:	f8 94       	cli
    c314:	de bf       	out	0x3e, r29	; 62
    c316:	0f be       	out	0x3f, r0	; 63
    c318:	cd bf       	out	0x3d, r28	; 61
    c31a:	9a 87       	std	Y+10, r25	; 0x0a
    c31c:	89 87       	std	Y+9, r24	; 0x09
    c31e:	16 2f       	mov	r17, r22
    c320:	04 2f       	mov	r16, r20
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
		{
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    c322:	28 e0       	ldi	r18, 0x08	; 8
    c324:	42 9f       	mul	r20, r18
    c326:	c0 01       	movw	r24, r0
    c328:	11 24       	eor	r1, r1
    c32a:	e6 2f       	mov	r30, r22
    c32c:	f0 e0       	ldi	r31, 0x00	; 0
    c32e:	fe 83       	std	Y+6, r31	; 0x06
    c330:	ed 83       	std	Y+5, r30	; 0x05
void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
    c332:	21 2c       	mov	r2, r1
    c334:	31 2c       	mov	r3, r1
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
		{
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    c336:	2c 01       	movw	r4, r24
    c338:	66 24       	eor	r6, r6
    c33a:	57 fc       	sbrc	r5, 7
    c33c:	60 94       	com	r6
    c33e:	76 2c       	mov	r7, r6
void collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
    c340:	2d 81       	ldd	r18, Y+5	; 0x05
    c342:	3e 81       	ldd	r19, Y+6	; 0x06
    c344:	22 16       	cp	r2, r18
    c346:	33 06       	cpc	r3, r19
    c348:	09 f4       	brne	.+2      	; 0xc34c <collision_detect_level+0x66>
    c34a:	ba c1       	rjmp	.+884    	; 0xc6c0 <collision_detect_level+0x3da>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
    c34c:	b1 01       	movw	r22, r2
    c34e:	88 27       	eor	r24, r24
    c350:	77 fd       	sbrc	r23, 7
    c352:	80 95       	com	r24
    c354:	98 2f       	mov	r25, r24
    c356:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    c35a:	6b 01       	movw	r12, r22
    c35c:	7c 01       	movw	r14, r24
    c35e:	20 e0       	ldi	r18, 0x00	; 0
    c360:	30 e0       	ldi	r19, 0x00	; 0
    c362:	40 e0       	ldi	r20, 0x00	; 0
    c364:	5e e3       	ldi	r21, 0x3E	; 62
    c366:	e9 85       	ldd	r30, Y+9	; 0x09
    c368:	fa 85       	ldd	r31, Y+10	; 0x0a
    c36a:	64 85       	ldd	r22, Z+12	; 0x0c
    c36c:	75 85       	ldd	r23, Z+13	; 0x0d
    c36e:	86 85       	ldd	r24, Z+14	; 0x0e
    c370:	97 85       	ldd	r25, Z+15	; 0x0f
    c372:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c376:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c37a:	4b 01       	movw	r8, r22
    c37c:	5c 01       	movw	r10, r24
    c37e:	20 e0       	ldi	r18, 0x00	; 0
    c380:	30 e0       	ldi	r19, 0x00	; 0
    c382:	40 e0       	ldi	r20, 0x00	; 0
    c384:	5e e3       	ldi	r21, 0x3E	; 62
    c386:	e9 85       	ldd	r30, Y+9	; 0x09
    c388:	fa 85       	ldd	r31, Y+10	; 0x0a
    c38a:	60 85       	ldd	r22, Z+8	; 0x08
    c38c:	71 85       	ldd	r23, Z+9	; 0x09
    c38e:	82 85       	ldd	r24, Z+10	; 0x0a
    c390:	93 85       	ldd	r25, Z+11	; 0x0b
    c392:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c396:	a7 01       	movw	r20, r14
    c398:	96 01       	movw	r18, r12
    c39a:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c39e:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c3a2:	a4 01       	movw	r20, r8
    c3a4:	80 91 91 0d 	lds	r24, 0x0D91
    c3a8:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c3ac:	89 83       	std	Y+1, r24	; 0x01
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
    c3ae:	20 e0       	ldi	r18, 0x00	; 0
    c3b0:	30 e0       	ldi	r19, 0x00	; 0
    c3b2:	40 e0       	ldi	r20, 0x00	; 0
    c3b4:	5e e3       	ldi	r21, 0x3E	; 62
    c3b6:	e9 85       	ldd	r30, Y+9	; 0x09
    c3b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    c3ba:	64 85       	ldd	r22, Z+12	; 0x0c
    c3bc:	75 85       	ldd	r23, Z+13	; 0x0d
    c3be:	86 85       	ldd	r24, Z+14	; 0x0e
    c3c0:	97 85       	ldd	r25, Z+15	; 0x0f
    c3c2:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c3c6:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c3ca:	4b 01       	movw	r8, r22
    c3cc:	5c 01       	movw	r10, r24
    c3ce:	20 e0       	ldi	r18, 0x00	; 0
    c3d0:	30 e0       	ldi	r19, 0x00	; 0
    c3d2:	40 ee       	ldi	r20, 0xE0	; 224
    c3d4:	50 e4       	ldi	r21, 0x40	; 64
    c3d6:	e9 85       	ldd	r30, Y+9	; 0x09
    c3d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    c3da:	60 85       	ldd	r22, Z+8	; 0x08
    c3dc:	71 85       	ldd	r23, Z+9	; 0x09
    c3de:	82 85       	ldd	r24, Z+10	; 0x0a
    c3e0:	93 85       	ldd	r25, Z+11	; 0x0b
    c3e2:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c3e6:	20 e0       	ldi	r18, 0x00	; 0
    c3e8:	30 e0       	ldi	r19, 0x00	; 0
    c3ea:	40 e0       	ldi	r20, 0x00	; 0
    c3ec:	5e e3       	ldi	r21, 0x3E	; 62
    c3ee:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c3f2:	a7 01       	movw	r20, r14
    c3f4:	96 01       	movw	r18, r12
    c3f6:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c3fa:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c3fe:	a4 01       	movw	r20, r8
    c400:	80 91 91 0d 	lds	r24, 0x0D91
    c404:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c408:	b8 2e       	mov	r11, r24
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    c40a:	89 81       	ldd	r24, Y+1	; 0x01
    c40c:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
    c410:	88 23       	and	r24, r24
    c412:	e1 f0       	breq	.+56     	; 0xc44c <collision_detect_level+0x166>
    c414:	e9 85       	ldd	r30, Y+9	; 0x09
    c416:	fa 85       	ldd	r31, Y+10	; 0x0a
    c418:	60 85       	ldd	r22, Z+8	; 0x08
    c41a:	71 85       	ldd	r23, Z+9	; 0x09
    c41c:	82 85       	ldd	r24, Z+10	; 0x0a
    c41e:	93 85       	ldd	r25, Z+11	; 0x0b
    c420:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c424:	dc 01       	movw	r26, r24
    c426:	cb 01       	movw	r24, r22
    c428:	fc 01       	movw	r30, r24
    c42a:	53 e0       	ldi	r21, 0x03	; 3
    c42c:	f6 95       	lsr	r31
    c42e:	e7 95       	ror	r30
    c430:	5a 95       	dec	r21
    c432:	e1 f7       	brne	.-8      	; 0xc42c <collision_detect_level+0x146>
    c434:	bf 01       	movw	r22, r30
    c436:	e3 e0       	ldi	r30, 0x03	; 3
    c438:	66 0f       	add	r22, r22
    c43a:	77 1f       	adc	r23, r23
    c43c:	ea 95       	dec	r30
    c43e:	e1 f7       	brne	.-8      	; 0xc438 <collision_detect_level+0x152>
    c440:	28 e0       	ldi	r18, 0x08	; 8
    c442:	48 e0       	ldi	r20, 0x08	; 8
    c444:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c448:	84 30       	cpi	r24, 0x04	; 4
    c44a:	90 f5       	brcc	.+100    	; 0xc4b0 <collision_detect_level+0x1ca>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c44c:	8b 2d       	mov	r24, r11
    c44e:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
	// Top and Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, s->y / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, s->y / 8);
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    c452:	88 23       	and	r24, r24
    c454:	09 f4       	brne	.+2      	; 0xc458 <collision_detect_level+0x172>
    c456:	4e c0       	rjmp	.+156    	; 0xc4f4 <collision_detect_level+0x20e>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c458:	e9 85       	ldd	r30, Y+9	; 0x09
    c45a:	fa 85       	ldd	r31, Y+10	; 0x0a
    c45c:	80 84       	ldd	r8, Z+8	; 0x08
    c45e:	91 84       	ldd	r9, Z+9	; 0x09
    c460:	a2 84       	ldd	r10, Z+10	; 0x0a
    c462:	b3 84       	ldd	r11, Z+11	; 0x0b
    c464:	20 e0       	ldi	r18, 0x00	; 0
    c466:	30 e0       	ldi	r19, 0x00	; 0
    c468:	40 ee       	ldi	r20, 0xE0	; 224
    c46a:	50 e4       	ldi	r21, 0x40	; 64
    c46c:	c5 01       	movw	r24, r10
    c46e:	b4 01       	movw	r22, r8
    c470:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c474:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c478:	cb 01       	movw	r24, r22
    c47a:	23 e0       	ldi	r18, 0x03	; 3
    c47c:	96 95       	lsr	r25
    c47e:	87 95       	ror	r24
    c480:	2a 95       	dec	r18
    c482:	e1 f7       	brne	.-8      	; 0xc47c <collision_detect_level+0x196>
    c484:	9c 01       	movw	r18, r24
    c486:	43 e0       	ldi	r20, 0x03	; 3
    c488:	22 0f       	add	r18, r18
    c48a:	33 1f       	adc	r19, r19
    c48c:	4a 95       	dec	r20
    c48e:	e1 f7       	brne	.-8      	; 0xc488 <collision_detect_level+0x1a2>
    c490:	3a 83       	std	Y+2, r19	; 0x02
    c492:	29 83       	std	Y+1, r18	; 0x01
    c494:	c5 01       	movw	r24, r10
    c496:	b4 01       	movw	r22, r8
    c498:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c49c:	dc 01       	movw	r26, r24
    c49e:	cb 01       	movw	r24, r22
    c4a0:	28 e0       	ldi	r18, 0x08	; 8
    c4a2:	48 e0       	ldi	r20, 0x08	; 8
    c4a4:	69 81       	ldd	r22, Y+1	; 0x01
    c4a6:	7a 81       	ldd	r23, Y+2	; 0x02
    c4a8:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c4ac:	84 30       	cpi	r24, 0x04	; 4
    c4ae:	10 f1       	brcs	.+68     	; 0xc4f4 <collision_detect_level+0x20e>
		{
			s->vy =  0;
    c4b0:	e9 85       	ldd	r30, Y+9	; 0x09
    c4b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    c4b4:	14 82       	std	Z+4, r1	; 0x04
    c4b6:	15 82       	std	Z+5, r1	; 0x05
    c4b8:	16 82       	std	Z+6, r1	; 0x06
    c4ba:	17 82       	std	Z+7, r1	; 0x07
			s->y = (((u16) s->y / 8) + 1) * 8;
    c4bc:	64 85       	ldd	r22, Z+12	; 0x0c
    c4be:	75 85       	ldd	r23, Z+13	; 0x0d
    c4c0:	86 85       	ldd	r24, Z+14	; 0x0e
    c4c2:	97 85       	ldd	r25, Z+15	; 0x0f
    c4c4:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c4c8:	83 e0       	ldi	r24, 0x03	; 3
    c4ca:	76 95       	lsr	r23
    c4cc:	67 95       	ror	r22
    c4ce:	8a 95       	dec	r24
    c4d0:	e1 f7       	brne	.-8      	; 0xc4ca <collision_detect_level+0x1e4>
    c4d2:	6f 5f       	subi	r22, 0xFF	; 255
    c4d4:	7f 4f       	sbci	r23, 0xFF	; 255
    c4d6:	93 e0       	ldi	r25, 0x03	; 3
    c4d8:	66 0f       	add	r22, r22
    c4da:	77 1f       	adc	r23, r23
    c4dc:	9a 95       	dec	r25
    c4de:	e1 f7       	brne	.-8      	; 0xc4d8 <collision_detect_level+0x1f2>
    c4e0:	80 e0       	ldi	r24, 0x00	; 0
    c4e2:	90 e0       	ldi	r25, 0x00	; 0
    c4e4:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    c4e8:	e9 85       	ldd	r30, Y+9	; 0x09
    c4ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    c4ec:	64 87       	std	Z+12, r22	; 0x0c
    c4ee:	75 87       	std	Z+13, r23	; 0x0d
    c4f0:	86 87       	std	Z+14, r24	; 0x0e
    c4f2:	97 87       	std	Z+15, r25	; 0x0f
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
    c4f4:	c3 01       	movw	r24, r6
    c4f6:	b2 01       	movw	r22, r4
    c4f8:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    c4fc:	4b 01       	movw	r8, r22
    c4fe:	5c 01       	movw	r10, r24
    c500:	e9 85       	ldd	r30, Y+9	; 0x09
    c502:	fa 85       	ldd	r31, Y+10	; 0x0a
    c504:	24 85       	ldd	r18, Z+12	; 0x0c
    c506:	35 85       	ldd	r19, Z+13	; 0x0d
    c508:	46 85       	ldd	r20, Z+14	; 0x0e
    c50a:	57 85       	ldd	r21, Z+15	; 0x0f
    c50c:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c510:	20 e0       	ldi	r18, 0x00	; 0
    c512:	30 e0       	ldi	r19, 0x00	; 0
    c514:	40 e8       	ldi	r20, 0x80	; 128
    c516:	5f e3       	ldi	r21, 0x3F	; 63
    c518:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    c51c:	20 e0       	ldi	r18, 0x00	; 0
    c51e:	30 e0       	ldi	r19, 0x00	; 0
    c520:	40 e0       	ldi	r20, 0x00	; 0
    c522:	5e e3       	ldi	r21, 0x3E	; 62
    c524:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c528:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c52c:	69 83       	std	Y+1, r22	; 0x01
    c52e:	7a 83       	std	Y+2, r23	; 0x02
    c530:	8b 83       	std	Y+3, r24	; 0x03
    c532:	9c 83       	std	Y+4, r25	; 0x04
    c534:	20 e0       	ldi	r18, 0x00	; 0
    c536:	30 e0       	ldi	r19, 0x00	; 0
    c538:	40 e0       	ldi	r20, 0x00	; 0
    c53a:	5e e3       	ldi	r21, 0x3E	; 62
    c53c:	e9 85       	ldd	r30, Y+9	; 0x09
    c53e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c540:	60 85       	ldd	r22, Z+8	; 0x08
    c542:	71 85       	ldd	r23, Z+9	; 0x09
    c544:	82 85       	ldd	r24, Z+10	; 0x0a
    c546:	93 85       	ldd	r25, Z+11	; 0x0b
    c548:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c54c:	a7 01       	movw	r20, r14
    c54e:	96 01       	movw	r18, r12
    c550:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c554:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c558:	49 81       	ldd	r20, Y+1	; 0x01
    c55a:	5a 81       	ldd	r21, Y+2	; 0x02
    c55c:	80 91 91 0d 	lds	r24, 0x0D91
    c560:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c564:	89 83       	std	Y+1, r24	; 0x01
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
    c566:	e9 85       	ldd	r30, Y+9	; 0x09
    c568:	fa 85       	ldd	r31, Y+10	; 0x0a
    c56a:	24 85       	ldd	r18, Z+12	; 0x0c
    c56c:	35 85       	ldd	r19, Z+13	; 0x0d
    c56e:	46 85       	ldd	r20, Z+14	; 0x0e
    c570:	57 85       	ldd	r21, Z+15	; 0x0f
    c572:	c5 01       	movw	r24, r10
    c574:	b4 01       	movw	r22, r8
    c576:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c57a:	20 e0       	ldi	r18, 0x00	; 0
    c57c:	30 e0       	ldi	r19, 0x00	; 0
    c57e:	40 e8       	ldi	r20, 0x80	; 128
    c580:	5f e3       	ldi	r21, 0x3F	; 63
    c582:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    c586:	20 e0       	ldi	r18, 0x00	; 0
    c588:	30 e0       	ldi	r19, 0x00	; 0
    c58a:	40 e0       	ldi	r20, 0x00	; 0
    c58c:	5e e3       	ldi	r21, 0x3E	; 62
    c58e:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c592:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c596:	4b 01       	movw	r8, r22
    c598:	5c 01       	movw	r10, r24
    c59a:	20 e0       	ldi	r18, 0x00	; 0
    c59c:	30 e0       	ldi	r19, 0x00	; 0
    c59e:	40 ee       	ldi	r20, 0xE0	; 224
    c5a0:	50 e4       	ldi	r21, 0x40	; 64
    c5a2:	e9 85       	ldd	r30, Y+9	; 0x09
    c5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    c5a6:	60 85       	ldd	r22, Z+8	; 0x08
    c5a8:	71 85       	ldd	r23, Z+9	; 0x09
    c5aa:	82 85       	ldd	r24, Z+10	; 0x0a
    c5ac:	93 85       	ldd	r25, Z+11	; 0x0b
    c5ae:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c5b2:	20 e0       	ldi	r18, 0x00	; 0
    c5b4:	30 e0       	ldi	r19, 0x00	; 0
    c5b6:	40 e0       	ldi	r20, 0x00	; 0
    c5b8:	5e e3       	ldi	r21, 0x3E	; 62
    c5ba:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c5be:	a7 01       	movw	r20, r14
    c5c0:	96 01       	movw	r18, r12
    c5c2:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c5c6:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c5ca:	a4 01       	movw	r20, r8
    c5cc:	80 91 91 0d 	lds	r24, 0x0D91
    c5d0:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c5d4:	f8 2e       	mov	r15, r24
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    c5d6:	89 81       	ldd	r24, Y+1	; 0x01
    c5d8:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
    c5dc:	88 23       	and	r24, r24
    c5de:	e1 f0       	breq	.+56     	; 0xc618 <collision_detect_level+0x332>
    c5e0:	e9 85       	ldd	r30, Y+9	; 0x09
    c5e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    c5e4:	60 85       	ldd	r22, Z+8	; 0x08
    c5e6:	71 85       	ldd	r23, Z+9	; 0x09
    c5e8:	82 85       	ldd	r24, Z+10	; 0x0a
    c5ea:	93 85       	ldd	r25, Z+11	; 0x0b
    c5ec:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c5f0:	dc 01       	movw	r26, r24
    c5f2:	cb 01       	movw	r24, r22
    c5f4:	fc 01       	movw	r30, r24
    c5f6:	a3 e0       	ldi	r26, 0x03	; 3
    c5f8:	f6 95       	lsr	r31
    c5fa:	e7 95       	ror	r30
    c5fc:	aa 95       	dec	r26
    c5fe:	e1 f7       	brne	.-8      	; 0xc5f8 <collision_detect_level+0x312>
    c600:	bf 01       	movw	r22, r30
    c602:	b3 e0       	ldi	r27, 0x03	; 3
    c604:	66 0f       	add	r22, r22
    c606:	77 1f       	adc	r23, r23
    c608:	ba 95       	dec	r27
    c60a:	e1 f7       	brne	.-8      	; 0xc604 <collision_detect_level+0x31e>
    c60c:	28 e0       	ldi	r18, 0x08	; 8
    c60e:	48 e0       	ldi	r20, 0x08	; 8
    c610:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c614:	84 30       	cpi	r24, 0x04	; 4
    c616:	78 f5       	brcc	.+94     	; 0xc676 <collision_detect_level+0x390>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c618:	8f 2d       	mov	r24, r15
    c61a:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
			s->vy =  0;
			s->y = (((u16) s->y / 8) + 1) * 8;
		}
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8 - 1) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8 - 1) / 8);
		if ((solid_tile(lt1) && pixel_overlap(s->x, ((u16) s->x / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    c61e:	88 23       	and	r24, r24
    c620:	09 f4       	brne	.+2      	; 0xc624 <collision_detect_level+0x33e>
    c622:	4a c0       	rjmp	.+148    	; 0xc6b8 <collision_detect_level+0x3d2>
		    (solid_tile(lt2) && pixel_overlap(s->x, ((u16) (s->x+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c624:	e9 85       	ldd	r30, Y+9	; 0x09
    c626:	fa 85       	ldd	r31, Y+10	; 0x0a
    c628:	c0 84       	ldd	r12, Z+8	; 0x08
    c62a:	d1 84       	ldd	r13, Z+9	; 0x09
    c62c:	e2 84       	ldd	r14, Z+10	; 0x0a
    c62e:	f3 84       	ldd	r15, Z+11	; 0x0b
    c630:	20 e0       	ldi	r18, 0x00	; 0
    c632:	30 e0       	ldi	r19, 0x00	; 0
    c634:	40 ee       	ldi	r20, 0xE0	; 224
    c636:	50 e4       	ldi	r21, 0x40	; 64
    c638:	c7 01       	movw	r24, r14
    c63a:	b6 01       	movw	r22, r12
    c63c:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c640:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c644:	cb 01       	movw	r24, r22
    c646:	63 e0       	ldi	r22, 0x03	; 3
    c648:	96 95       	lsr	r25
    c64a:	87 95       	ror	r24
    c64c:	6a 95       	dec	r22
    c64e:	e1 f7       	brne	.-8      	; 0xc648 <collision_detect_level+0x362>
    c650:	5c 01       	movw	r10, r24
    c652:	73 e0       	ldi	r23, 0x03	; 3
    c654:	aa 0c       	add	r10, r10
    c656:	bb 1c       	adc	r11, r11
    c658:	7a 95       	dec	r23
    c65a:	e1 f7       	brne	.-8      	; 0xc654 <collision_detect_level+0x36e>
    c65c:	c7 01       	movw	r24, r14
    c65e:	b6 01       	movw	r22, r12
    c660:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c664:	dc 01       	movw	r26, r24
    c666:	cb 01       	movw	r24, r22
    c668:	28 e0       	ldi	r18, 0x08	; 8
    c66a:	48 e0       	ldi	r20, 0x08	; 8
    c66c:	b5 01       	movw	r22, r10
    c66e:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c672:	84 30       	cpi	r24, 0x04	; 4
    c674:	08 f1       	brcs	.+66     	; 0xc6b8 <collision_detect_level+0x3d2>
		{
			s->vy =  0;
    c676:	e9 85       	ldd	r30, Y+9	; 0x09
    c678:	fa 85       	ldd	r31, Y+10	; 0x0a
    c67a:	14 82       	std	Z+4, r1	; 0x04
    c67c:	15 82       	std	Z+5, r1	; 0x05
    c67e:	16 82       	std	Z+6, r1	; 0x06
    c680:	17 82       	std	Z+7, r1	; 0x07
			s->gravity = 0;
    c682:	10 8a       	std	Z+16, r1	; 0x10
			s->y = ((u16) s->y / 8) * 8;
    c684:	64 85       	ldd	r22, Z+12	; 0x0c
    c686:	75 85       	ldd	r23, Z+13	; 0x0d
    c688:	86 85       	ldd	r24, Z+14	; 0x0e
    c68a:	97 85       	ldd	r25, Z+15	; 0x0f
    c68c:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c690:	43 e0       	ldi	r20, 0x03	; 3
    c692:	76 95       	lsr	r23
    c694:	67 95       	ror	r22
    c696:	4a 95       	dec	r20
    c698:	e1 f7       	brne	.-8      	; 0xc692 <collision_detect_level+0x3ac>
    c69a:	53 e0       	ldi	r21, 0x03	; 3
    c69c:	66 0f       	add	r22, r22
    c69e:	77 1f       	adc	r23, r23
    c6a0:	5a 95       	dec	r21
    c6a2:	e1 f7       	brne	.-8      	; 0xc69c <collision_detect_level+0x3b6>
    c6a4:	80 e0       	ldi	r24, 0x00	; 0
    c6a6:	90 e0       	ldi	r25, 0x00	; 0
    c6a8:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    c6ac:	e9 85       	ldd	r30, Y+9	; 0x09
    c6ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    c6b0:	64 87       	std	Z+12, r22	; 0x0c
    c6b2:	75 87       	std	Z+13, r23	; 0x0d
    c6b4:	86 87       	std	Z+14, r24	; 0x0e
    c6b6:	97 87       	std	Z+15, r25	; 0x0f
    c6b8:	ff ef       	ldi	r31, 0xFF	; 255
    c6ba:	2f 1a       	sub	r2, r31
    c6bc:	3f 0a       	sbc	r3, r31
    c6be:	40 ce       	rjmp	.-896    	; 0xc340 <collision_detect_level+0x5a>
		{
			s->vx =  0;
			s->x = (((u16) s->x / 8) + 1) * 8;
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    c6c0:	38 e0       	ldi	r19, 0x08	; 8
    c6c2:	13 9f       	mul	r17, r19
    c6c4:	c0 01       	movw	r24, r0
    c6c6:	11 24       	eor	r1, r1
    c6c8:	10 e0       	ldi	r17, 0x00	; 0
    c6ca:	1a 82       	std	Y+2, r1	; 0x02
    c6cc:	19 82       	std	Y+1, r1	; 0x01
    c6ce:	1c 01       	movw	r2, r24
    c6d0:	44 24       	eor	r4, r4
    c6d2:	37 fc       	sbrc	r3, 7
    c6d4:	40 94       	com	r4
    c6d6:	54 2c       	mov	r5, r4
			s->y = ((u16) s->y / 8) * 8;
		}
	}
	
	// Left and Right
	for (u8 y = 0; y < tile_height; y++)
    c6d8:	89 81       	ldd	r24, Y+1	; 0x01
    c6da:	9a 81       	ldd	r25, Y+2	; 0x02
    c6dc:	80 17       	cp	r24, r16
    c6de:	91 07       	cpc	r25, r17
    c6e0:	09 f4       	brne	.+2      	; 0xc6e4 <collision_detect_level+0x3fe>
    c6e2:	bb c1       	rjmp	.+886    	; 0xca5a <collision_detect_level+0x774>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
    c6e4:	e9 81       	ldd	r30, Y+1	; 0x01
    c6e6:	fa 81       	ldd	r31, Y+2	; 0x02
    c6e8:	bf 01       	movw	r22, r30
    c6ea:	88 27       	eor	r24, r24
    c6ec:	77 fd       	sbrc	r23, 7
    c6ee:	80 95       	com	r24
    c6f0:	98 2f       	mov	r25, r24
    c6f2:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    c6f6:	6b 01       	movw	r12, r22
    c6f8:	7c 01       	movw	r14, r24
    c6fa:	20 e0       	ldi	r18, 0x00	; 0
    c6fc:	30 e0       	ldi	r19, 0x00	; 0
    c6fe:	40 e0       	ldi	r20, 0x00	; 0
    c700:	5e e3       	ldi	r21, 0x3E	; 62
    c702:	e9 85       	ldd	r30, Y+9	; 0x09
    c704:	fa 85       	ldd	r31, Y+10	; 0x0a
    c706:	64 85       	ldd	r22, Z+12	; 0x0c
    c708:	75 85       	ldd	r23, Z+13	; 0x0d
    c70a:	86 85       	ldd	r24, Z+14	; 0x0e
    c70c:	97 85       	ldd	r25, Z+15	; 0x0f
    c70e:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c712:	a7 01       	movw	r20, r14
    c714:	96 01       	movw	r18, r12
    c716:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c71a:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c71e:	4b 01       	movw	r8, r22
    c720:	5c 01       	movw	r10, r24
    c722:	20 e0       	ldi	r18, 0x00	; 0
    c724:	30 e0       	ldi	r19, 0x00	; 0
    c726:	40 e0       	ldi	r20, 0x00	; 0
    c728:	5e e3       	ldi	r21, 0x3E	; 62
    c72a:	e9 85       	ldd	r30, Y+9	; 0x09
    c72c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c72e:	60 85       	ldd	r22, Z+8	; 0x08
    c730:	71 85       	ldd	r23, Z+9	; 0x09
    c732:	82 85       	ldd	r24, Z+10	; 0x0a
    c734:	93 85       	ldd	r25, Z+11	; 0x0b
    c736:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c73a:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c73e:	a4 01       	movw	r20, r8
    c740:	80 91 91 0d 	lds	r24, 0x0D91
    c744:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c748:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
    c74a:	20 e0       	ldi	r18, 0x00	; 0
    c74c:	30 e0       	ldi	r19, 0x00	; 0
    c74e:	40 ee       	ldi	r20, 0xE0	; 224
    c750:	50 e4       	ldi	r21, 0x40	; 64
    c752:	e9 85       	ldd	r30, Y+9	; 0x09
    c754:	fa 85       	ldd	r31, Y+10	; 0x0a
    c756:	64 85       	ldd	r22, Z+12	; 0x0c
    c758:	75 85       	ldd	r23, Z+13	; 0x0d
    c75a:	86 85       	ldd	r24, Z+14	; 0x0e
    c75c:	97 85       	ldd	r25, Z+15	; 0x0f
    c75e:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c762:	20 e0       	ldi	r18, 0x00	; 0
    c764:	30 e0       	ldi	r19, 0x00	; 0
    c766:	40 e0       	ldi	r20, 0x00	; 0
    c768:	5e e3       	ldi	r21, 0x3E	; 62
    c76a:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c76e:	a7 01       	movw	r20, r14
    c770:	96 01       	movw	r18, r12
    c772:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c776:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c77a:	4b 01       	movw	r8, r22
    c77c:	5c 01       	movw	r10, r24
    c77e:	20 e0       	ldi	r18, 0x00	; 0
    c780:	30 e0       	ldi	r19, 0x00	; 0
    c782:	40 e0       	ldi	r20, 0x00	; 0
    c784:	5e e3       	ldi	r21, 0x3E	; 62
    c786:	e9 85       	ldd	r30, Y+9	; 0x09
    c788:	fa 85       	ldd	r31, Y+10	; 0x0a
    c78a:	60 85       	ldd	r22, Z+8	; 0x08
    c78c:	71 85       	ldd	r23, Z+9	; 0x09
    c78e:	82 85       	ldd	r24, Z+10	; 0x0a
    c790:	93 85       	ldd	r25, Z+11	; 0x0b
    c792:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c796:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c79a:	a4 01       	movw	r20, r8
    c79c:	80 91 91 0d 	lds	r24, 0x0D91
    c7a0:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c7a4:	b8 2e       	mov	r11, r24
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    c7a6:	87 2d       	mov	r24, r7
    c7a8:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
    c7ac:	88 23       	and	r24, r24
    c7ae:	e1 f0       	breq	.+56     	; 0xc7e8 <collision_detect_level+0x502>
    c7b0:	e9 85       	ldd	r30, Y+9	; 0x09
    c7b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    c7b4:	64 85       	ldd	r22, Z+12	; 0x0c
    c7b6:	75 85       	ldd	r23, Z+13	; 0x0d
    c7b8:	86 85       	ldd	r24, Z+14	; 0x0e
    c7ba:	97 85       	ldd	r25, Z+15	; 0x0f
    c7bc:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c7c0:	dc 01       	movw	r26, r24
    c7c2:	cb 01       	movw	r24, r22
    c7c4:	fc 01       	movw	r30, r24
    c7c6:	23 e0       	ldi	r18, 0x03	; 3
    c7c8:	f6 95       	lsr	r31
    c7ca:	e7 95       	ror	r30
    c7cc:	2a 95       	dec	r18
    c7ce:	e1 f7       	brne	.-8      	; 0xc7c8 <collision_detect_level+0x4e2>
    c7d0:	bf 01       	movw	r22, r30
    c7d2:	33 e0       	ldi	r19, 0x03	; 3
    c7d4:	66 0f       	add	r22, r22
    c7d6:	77 1f       	adc	r23, r23
    c7d8:	3a 95       	dec	r19
    c7da:	e1 f7       	brne	.-8      	; 0xc7d4 <collision_detect_level+0x4ee>
    c7dc:	28 e0       	ldi	r18, 0x08	; 8
    c7de:	48 e0       	ldi	r20, 0x08	; 8
    c7e0:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c7e4:	84 30       	cpi	r24, 0x04	; 4
    c7e6:	70 f5       	brcc	.+92     	; 0xc844 <collision_detect_level+0x55e>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c7e8:	8b 2d       	mov	r24, r11
    c7ea:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
	// Left and Right
	for (u8 y = 0; y < tile_height; y++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8, s->y / 8 + y);
		lt2 = get_level_tile(game.current_level, s->x / 8, (s->y+7) / 8 + y);
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    c7ee:	88 23       	and	r24, r24
    c7f0:	09 f4       	brne	.+2      	; 0xc7f4 <collision_detect_level+0x50e>
    c7f2:	4a c0       	rjmp	.+148    	; 0xc888 <collision_detect_level+0x5a2>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c7f4:	e9 85       	ldd	r30, Y+9	; 0x09
    c7f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    c7f8:	84 84       	ldd	r8, Z+12	; 0x0c
    c7fa:	95 84       	ldd	r9, Z+13	; 0x0d
    c7fc:	a6 84       	ldd	r10, Z+14	; 0x0e
    c7fe:	b7 84       	ldd	r11, Z+15	; 0x0f
    c800:	20 e0       	ldi	r18, 0x00	; 0
    c802:	30 e0       	ldi	r19, 0x00	; 0
    c804:	40 ee       	ldi	r20, 0xE0	; 224
    c806:	50 e4       	ldi	r21, 0x40	; 64
    c808:	c5 01       	movw	r24, r10
    c80a:	b4 01       	movw	r22, r8
    c80c:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c810:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c814:	a3 e0       	ldi	r26, 0x03	; 3
    c816:	76 95       	lsr	r23
    c818:	67 95       	ror	r22
    c81a:	aa 95       	dec	r26
    c81c:	e1 f7       	brne	.-8      	; 0xc816 <collision_detect_level+0x530>
    c81e:	3b 01       	movw	r6, r22
    c820:	b3 e0       	ldi	r27, 0x03	; 3
    c822:	66 0c       	add	r6, r6
    c824:	77 1c       	adc	r7, r7
    c826:	ba 95       	dec	r27
    c828:	e1 f7       	brne	.-8      	; 0xc822 <collision_detect_level+0x53c>
    c82a:	c5 01       	movw	r24, r10
    c82c:	b4 01       	movw	r22, r8
    c82e:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c832:	dc 01       	movw	r26, r24
    c834:	cb 01       	movw	r24, r22
    c836:	28 e0       	ldi	r18, 0x08	; 8
    c838:	48 e0       	ldi	r20, 0x08	; 8
    c83a:	b3 01       	movw	r22, r6
    c83c:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c840:	84 30       	cpi	r24, 0x04	; 4
    c842:	10 f1       	brcs	.+68     	; 0xc888 <collision_detect_level+0x5a2>
		{
			s->vx =  0;
    c844:	e9 85       	ldd	r30, Y+9	; 0x09
    c846:	fa 85       	ldd	r31, Y+10	; 0x0a
    c848:	10 82       	st	Z, r1
    c84a:	11 82       	std	Z+1, r1	; 0x01
    c84c:	12 82       	std	Z+2, r1	; 0x02
    c84e:	13 82       	std	Z+3, r1	; 0x03
			s->x = (((u16) s->x / 8) + 1) * 8;
    c850:	60 85       	ldd	r22, Z+8	; 0x08
    c852:	71 85       	ldd	r23, Z+9	; 0x09
    c854:	82 85       	ldd	r24, Z+10	; 0x0a
    c856:	93 85       	ldd	r25, Z+11	; 0x0b
    c858:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c85c:	e3 e0       	ldi	r30, 0x03	; 3
    c85e:	76 95       	lsr	r23
    c860:	67 95       	ror	r22
    c862:	ea 95       	dec	r30
    c864:	e1 f7       	brne	.-8      	; 0xc85e <collision_detect_level+0x578>
    c866:	6f 5f       	subi	r22, 0xFF	; 255
    c868:	7f 4f       	sbci	r23, 0xFF	; 255
    c86a:	f3 e0       	ldi	r31, 0x03	; 3
    c86c:	66 0f       	add	r22, r22
    c86e:	77 1f       	adc	r23, r23
    c870:	fa 95       	dec	r31
    c872:	e1 f7       	brne	.-8      	; 0xc86c <collision_detect_level+0x586>
    c874:	80 e0       	ldi	r24, 0x00	; 0
    c876:	90 e0       	ldi	r25, 0x00	; 0
    c878:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    c87c:	e9 85       	ldd	r30, Y+9	; 0x09
    c87e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c880:	60 87       	std	Z+8, r22	; 0x08
    c882:	71 87       	std	Z+9, r23	; 0x09
    c884:	82 87       	std	Z+10, r24	; 0x0a
    c886:	93 87       	std	Z+11, r25	; 0x0b
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
    c888:	c2 01       	movw	r24, r4
    c88a:	b1 01       	movw	r22, r2
    c88c:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    c890:	4b 01       	movw	r8, r22
    c892:	5c 01       	movw	r10, r24
    c894:	20 e0       	ldi	r18, 0x00	; 0
    c896:	30 e0       	ldi	r19, 0x00	; 0
    c898:	40 e0       	ldi	r20, 0x00	; 0
    c89a:	5e e3       	ldi	r21, 0x3E	; 62
    c89c:	e9 85       	ldd	r30, Y+9	; 0x09
    c89e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c8a0:	64 85       	ldd	r22, Z+12	; 0x0c
    c8a2:	75 85       	ldd	r23, Z+13	; 0x0d
    c8a4:	86 85       	ldd	r24, Z+14	; 0x0e
    c8a6:	97 85       	ldd	r25, Z+15	; 0x0f
    c8a8:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c8ac:	a7 01       	movw	r20, r14
    c8ae:	96 01       	movw	r18, r12
    c8b0:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c8b4:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c8b8:	6d 83       	std	Y+5, r22	; 0x05
    c8ba:	7e 83       	std	Y+6, r23	; 0x06
    c8bc:	8f 83       	std	Y+7, r24	; 0x07
    c8be:	98 87       	std	Y+8, r25	; 0x08
    c8c0:	e9 85       	ldd	r30, Y+9	; 0x09
    c8c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    c8c4:	20 85       	ldd	r18, Z+8	; 0x08
    c8c6:	31 85       	ldd	r19, Z+9	; 0x09
    c8c8:	42 85       	ldd	r20, Z+10	; 0x0a
    c8ca:	53 85       	ldd	r21, Z+11	; 0x0b
    c8cc:	c5 01       	movw	r24, r10
    c8ce:	b4 01       	movw	r22, r8
    c8d0:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c8d4:	20 e0       	ldi	r18, 0x00	; 0
    c8d6:	30 e0       	ldi	r19, 0x00	; 0
    c8d8:	40 e8       	ldi	r20, 0x80	; 128
    c8da:	5f e3       	ldi	r21, 0x3F	; 63
    c8dc:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    c8e0:	20 e0       	ldi	r18, 0x00	; 0
    c8e2:	30 e0       	ldi	r19, 0x00	; 0
    c8e4:	40 e0       	ldi	r20, 0x00	; 0
    c8e6:	5e e3       	ldi	r21, 0x3E	; 62
    c8e8:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c8ec:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c8f0:	4d 81       	ldd	r20, Y+5	; 0x05
    c8f2:	5e 81       	ldd	r21, Y+6	; 0x06
    c8f4:	80 91 91 0d 	lds	r24, 0x0D91
    c8f8:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c8fc:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
    c8fe:	20 e0       	ldi	r18, 0x00	; 0
    c900:	30 e0       	ldi	r19, 0x00	; 0
    c902:	40 ee       	ldi	r20, 0xE0	; 224
    c904:	50 e4       	ldi	r21, 0x40	; 64
    c906:	e9 85       	ldd	r30, Y+9	; 0x09
    c908:	fa 85       	ldd	r31, Y+10	; 0x0a
    c90a:	64 85       	ldd	r22, Z+12	; 0x0c
    c90c:	75 85       	ldd	r23, Z+13	; 0x0d
    c90e:	86 85       	ldd	r24, Z+14	; 0x0e
    c910:	97 85       	ldd	r25, Z+15	; 0x0f
    c912:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c916:	20 e0       	ldi	r18, 0x00	; 0
    c918:	30 e0       	ldi	r19, 0x00	; 0
    c91a:	40 e0       	ldi	r20, 0x00	; 0
    c91c:	5e e3       	ldi	r21, 0x3E	; 62
    c91e:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c922:	a7 01       	movw	r20, r14
    c924:	96 01       	movw	r18, r12
    c926:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c92a:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c92e:	6b 01       	movw	r12, r22
    c930:	7c 01       	movw	r14, r24
    c932:	e9 85       	ldd	r30, Y+9	; 0x09
    c934:	fa 85       	ldd	r31, Y+10	; 0x0a
    c936:	20 85       	ldd	r18, Z+8	; 0x08
    c938:	31 85       	ldd	r19, Z+9	; 0x09
    c93a:	42 85       	ldd	r20, Z+10	; 0x0a
    c93c:	53 85       	ldd	r21, Z+11	; 0x0b
    c93e:	c5 01       	movw	r24, r10
    c940:	b4 01       	movw	r22, r8
    c942:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c946:	20 e0       	ldi	r18, 0x00	; 0
    c948:	30 e0       	ldi	r19, 0x00	; 0
    c94a:	40 e8       	ldi	r20, 0x80	; 128
    c94c:	5f e3       	ldi	r21, 0x3F	; 63
    c94e:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    c952:	20 e0       	ldi	r18, 0x00	; 0
    c954:	30 e0       	ldi	r19, 0x00	; 0
    c956:	40 e0       	ldi	r20, 0x00	; 0
    c958:	5e e3       	ldi	r21, 0x3E	; 62
    c95a:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    c95e:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c962:	a6 01       	movw	r20, r12
    c964:	80 91 91 0d 	lds	r24, 0x0D91
    c968:	0e 94 cc 5d 	call	0xbb98	; 0xbb98 <get_level_tile>
    c96c:	f8 2e       	mov	r15, r24
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    c96e:	87 2d       	mov	r24, r7
    c970:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
    c974:	88 23       	and	r24, r24
    c976:	e1 f0       	breq	.+56     	; 0xc9b0 <collision_detect_level+0x6ca>
    c978:	e9 85       	ldd	r30, Y+9	; 0x09
    c97a:	fa 85       	ldd	r31, Y+10	; 0x0a
    c97c:	64 85       	ldd	r22, Z+12	; 0x0c
    c97e:	75 85       	ldd	r23, Z+13	; 0x0d
    c980:	86 85       	ldd	r24, Z+14	; 0x0e
    c982:	97 85       	ldd	r25, Z+15	; 0x0f
    c984:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c988:	dc 01       	movw	r26, r24
    c98a:	cb 01       	movw	r24, r22
    c98c:	fc 01       	movw	r30, r24
    c98e:	43 e0       	ldi	r20, 0x03	; 3
    c990:	f6 95       	lsr	r31
    c992:	e7 95       	ror	r30
    c994:	4a 95       	dec	r20
    c996:	e1 f7       	brne	.-8      	; 0xc990 <collision_detect_level+0x6aa>
    c998:	bf 01       	movw	r22, r30
    c99a:	53 e0       	ldi	r21, 0x03	; 3
    c99c:	66 0f       	add	r22, r22
    c99e:	77 1f       	adc	r23, r23
    c9a0:	5a 95       	dec	r21
    c9a2:	e1 f7       	brne	.-8      	; 0xc99c <collision_detect_level+0x6b6>
    c9a4:	28 e0       	ldi	r18, 0x08	; 8
    c9a6:	48 e0       	ldi	r20, 0x08	; 8
    c9a8:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    c9ac:	84 30       	cpi	r24, 0x04	; 4
    c9ae:	70 f5       	brcc	.+92     	; 0xca0c <collision_detect_level+0x726>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c9b0:	8f 2d       	mov	r24, r15
    c9b2:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <solid_tile>
			s->x = (((u16) s->x / 8) + 1) * 8;
		}
		
		lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, s->y / 8 + y);
		lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, (s->y+7) / 8 + y);
		if ((solid_tile(lt1) && pixel_overlap(s->y, ((u16) s->y / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    c9b6:	88 23       	and	r24, r24
    c9b8:	09 f4       	brne	.+2      	; 0xc9bc <collision_detect_level+0x6d6>
    c9ba:	48 c0       	rjmp	.+144    	; 0xca4c <collision_detect_level+0x766>
		    (solid_tile(lt2) && pixel_overlap(s->y, ((u16) (s->y+7) / 8) * 8, 8, 8) >= OVERLAP_THRESHOLD))
    c9bc:	e9 85       	ldd	r30, Y+9	; 0x09
    c9be:	fa 85       	ldd	r31, Y+10	; 0x0a
    c9c0:	84 84       	ldd	r8, Z+12	; 0x0c
    c9c2:	95 84       	ldd	r9, Z+13	; 0x0d
    c9c4:	a6 84       	ldd	r10, Z+14	; 0x0e
    c9c6:	b7 84       	ldd	r11, Z+15	; 0x0f
    c9c8:	20 e0       	ldi	r18, 0x00	; 0
    c9ca:	30 e0       	ldi	r19, 0x00	; 0
    c9cc:	40 ee       	ldi	r20, 0xE0	; 224
    c9ce:	50 e4       	ldi	r21, 0x40	; 64
    c9d0:	c5 01       	movw	r24, r10
    c9d2:	b4 01       	movw	r22, r8
    c9d4:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    c9d8:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c9dc:	23 e0       	ldi	r18, 0x03	; 3
    c9de:	76 95       	lsr	r23
    c9e0:	67 95       	ror	r22
    c9e2:	2a 95       	dec	r18
    c9e4:	e1 f7       	brne	.-8      	; 0xc9de <collision_detect_level+0x6f8>
    c9e6:	7b 01       	movw	r14, r22
    c9e8:	33 e0       	ldi	r19, 0x03	; 3
    c9ea:	ee 0c       	add	r14, r14
    c9ec:	ff 1c       	adc	r15, r15
    c9ee:	3a 95       	dec	r19
    c9f0:	e1 f7       	brne	.-8      	; 0xc9ea <collision_detect_level+0x704>
    c9f2:	c5 01       	movw	r24, r10
    c9f4:	b4 01       	movw	r22, r8
    c9f6:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    c9fa:	dc 01       	movw	r26, r24
    c9fc:	cb 01       	movw	r24, r22
    c9fe:	28 e0       	ldi	r18, 0x08	; 8
    ca00:	48 e0       	ldi	r20, 0x08	; 8
    ca02:	b7 01       	movw	r22, r14
    ca04:	0e 94 5f 61 	call	0xc2be	; 0xc2be <pixel_overlap>
    ca08:	84 30       	cpi	r24, 0x04	; 4
    ca0a:	00 f1       	brcs	.+64     	; 0xca4c <collision_detect_level+0x766>
		{
			s->vx =  0;
    ca0c:	e9 85       	ldd	r30, Y+9	; 0x09
    ca0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    ca10:	10 82       	st	Z, r1
    ca12:	11 82       	std	Z+1, r1	; 0x01
    ca14:	12 82       	std	Z+2, r1	; 0x02
    ca16:	13 82       	std	Z+3, r1	; 0x03
			s->x = ((u16) s->x / 8) * 8;
    ca18:	60 85       	ldd	r22, Z+8	; 0x08
    ca1a:	71 85       	ldd	r23, Z+9	; 0x09
    ca1c:	82 85       	ldd	r24, Z+10	; 0x0a
    ca1e:	93 85       	ldd	r25, Z+11	; 0x0b
    ca20:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    ca24:	83 e0       	ldi	r24, 0x03	; 3
    ca26:	76 95       	lsr	r23
    ca28:	67 95       	ror	r22
    ca2a:	8a 95       	dec	r24
    ca2c:	e1 f7       	brne	.-8      	; 0xca26 <collision_detect_level+0x740>
    ca2e:	93 e0       	ldi	r25, 0x03	; 3
    ca30:	66 0f       	add	r22, r22
    ca32:	77 1f       	adc	r23, r23
    ca34:	9a 95       	dec	r25
    ca36:	e1 f7       	brne	.-8      	; 0xca30 <collision_detect_level+0x74a>
    ca38:	80 e0       	ldi	r24, 0x00	; 0
    ca3a:	90 e0       	ldi	r25, 0x00	; 0
    ca3c:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    ca40:	e9 85       	ldd	r30, Y+9	; 0x09
    ca42:	fa 85       	ldd	r31, Y+10	; 0x0a
    ca44:	60 87       	std	Z+8, r22	; 0x08
    ca46:	71 87       	std	Z+9, r23	; 0x09
    ca48:	82 87       	std	Z+10, r24	; 0x0a
    ca4a:	93 87       	std	Z+11, r25	; 0x0b
    ca4c:	29 81       	ldd	r18, Y+1	; 0x01
    ca4e:	3a 81       	ldd	r19, Y+2	; 0x02
    ca50:	2f 5f       	subi	r18, 0xFF	; 255
    ca52:	3f 4f       	sbci	r19, 0xFF	; 255
    ca54:	3a 83       	std	Y+2, r19	; 0x02
    ca56:	29 83       	std	Y+1, r18	; 0x01
    ca58:	3f ce       	rjmp	.-898    	; 0xc6d8 <collision_detect_level+0x3f2>
		}
	}
}
    ca5a:	2a 96       	adiw	r28, 0x0a	; 10
    ca5c:	0f b6       	in	r0, 0x3f	; 63
    ca5e:	f8 94       	cli
    ca60:	de bf       	out	0x3e, r29	; 62
    ca62:	0f be       	out	0x3f, r0	; 63
    ca64:	cd bf       	out	0x3d, r28	; 61
    ca66:	df 91       	pop	r29
    ca68:	cf 91       	pop	r28
    ca6a:	1f 91       	pop	r17
    ca6c:	0f 91       	pop	r16
    ca6e:	ff 90       	pop	r15
    ca70:	ef 90       	pop	r14
    ca72:	df 90       	pop	r13
    ca74:	cf 90       	pop	r12
    ca76:	bf 90       	pop	r11
    ca78:	af 90       	pop	r10
    ca7a:	9f 90       	pop	r9
    ca7c:	8f 90       	pop	r8
    ca7e:	7f 90       	pop	r7
    ca80:	6f 90       	pop	r6
    ca82:	5f 90       	pop	r5
    ca84:	4f 90       	pop	r4
    ca86:	3f 90       	pop	r3
    ca88:	2f 90       	pop	r2
    ca8a:	08 95       	ret

0000ca8c <update_player_position>:

void update_player_position()
{
    ca8c:	cf 92       	push	r12
    ca8e:	df 92       	push	r13
    ca90:	ef 92       	push	r14
    ca92:	ff 92       	push	r15
    ca94:	0f 93       	push	r16
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    ca96:	60 91 b0 0d 	lds	r22, 0x0DB0
    ca9a:	70 e0       	ldi	r23, 0x00	; 0
    ca9c:	80 e0       	ldi	r24, 0x00	; 0
    ca9e:	90 e0       	ldi	r25, 0x00	; 0
    caa0:	0e 94 35 68 	call	0xd06a	; 0xd06a <__floatsisf>
    caa4:	29 e8       	ldi	r18, 0x89	; 137
    caa6:	38 e8       	ldi	r19, 0x88	; 136
    caa8:	48 e8       	ldi	r20, 0x88	; 136
    caaa:	5c e3       	ldi	r21, 0x3C	; 60
    caac:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    cab0:	20 91 a4 0d 	lds	r18, 0x0DA4
    cab4:	30 91 a5 0d 	lds	r19, 0x0DA5
    cab8:	40 91 a6 0d 	lds	r20, 0x0DA6
    cabc:	50 91 a7 0d 	lds	r21, 0x0DA7
    cac0:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    cac4:	6b 01       	movw	r12, r22
    cac6:	7c 01       	movw	r14, r24
	if (game.player.shared.vy > MAX_SPEED) game.player.shared.vy = MAX_SPEED;
    cac8:	20 e0       	ldi	r18, 0x00	; 0
    caca:	30 e0       	ldi	r19, 0x00	; 0
    cacc:	40 ef       	ldi	r20, 0xF0	; 240
    cace:	52 e4       	ldi	r21, 0x42	; 66
    cad0:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    cad4:	18 16       	cp	r1, r24
    cad6:	4c f0       	brlt	.+18     	; 0xcaea <update_player_position+0x5e>
}

void update_player_position()
{
	//Gravity
	game.player.shared.vy = game.player.shared.vy + game.player.shared.gravity*FRAME_TIME;
    cad8:	c0 92 a4 0d 	sts	0x0DA4, r12
    cadc:	d0 92 a5 0d 	sts	0x0DA5, r13
    cae0:	e0 92 a6 0d 	sts	0x0DA6, r14
    cae4:	f0 92 a7 0d 	sts	0x0DA7, r15
    cae8:	0c c0       	rjmp	.+24     	; 0xcb02 <update_player_position+0x76>
	if (game.player.shared.vy > MAX_SPEED) game.player.shared.vy = MAX_SPEED;
    caea:	80 e0       	ldi	r24, 0x00	; 0
    caec:	90 e0       	ldi	r25, 0x00	; 0
    caee:	a0 ef       	ldi	r26, 0xF0	; 240
    caf0:	b2 e4       	ldi	r27, 0x42	; 66
    caf2:	80 93 a4 0d 	sts	0x0DA4, r24
    caf6:	90 93 a5 0d 	sts	0x0DA5, r25
    cafa:	a0 93 a6 0d 	sts	0x0DA6, r26
    cafe:	b0 93 a7 0d 	sts	0x0DA7, r27
	game.player.shared.x += game.player.shared.vx*FRAME_TIME;
    cb02:	29 e8       	ldi	r18, 0x89	; 137
    cb04:	38 e8       	ldi	r19, 0x88	; 136
    cb06:	48 e8       	ldi	r20, 0x88	; 136
    cb08:	5c e3       	ldi	r21, 0x3C	; 60
    cb0a:	60 91 a0 0d 	lds	r22, 0x0DA0
    cb0e:	70 91 a1 0d 	lds	r23, 0x0DA1
    cb12:	80 91 a2 0d 	lds	r24, 0x0DA2
    cb16:	90 91 a3 0d 	lds	r25, 0x0DA3
    cb1a:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    cb1e:	9b 01       	movw	r18, r22
    cb20:	ac 01       	movw	r20, r24
    cb22:	60 91 a8 0d 	lds	r22, 0x0DA8
    cb26:	70 91 a9 0d 	lds	r23, 0x0DA9
    cb2a:	80 91 aa 0d 	lds	r24, 0x0DAA
    cb2e:	90 91 ab 0d 	lds	r25, 0x0DAB
    cb32:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    cb36:	60 93 a8 0d 	sts	0x0DA8, r22
    cb3a:	70 93 a9 0d 	sts	0x0DA9, r23
    cb3e:	80 93 aa 0d 	sts	0x0DAA, r24
    cb42:	90 93 ab 0d 	sts	0x0DAB, r25
	game.player.shared.y += game.player.shared.vy*FRAME_TIME;
    cb46:	29 e8       	ldi	r18, 0x89	; 137
    cb48:	38 e8       	ldi	r19, 0x88	; 136
    cb4a:	48 e8       	ldi	r20, 0x88	; 136
    cb4c:	5c e3       	ldi	r21, 0x3C	; 60
    cb4e:	60 91 a4 0d 	lds	r22, 0x0DA4
    cb52:	70 91 a5 0d 	lds	r23, 0x0DA5
    cb56:	80 91 a6 0d 	lds	r24, 0x0DA6
    cb5a:	90 91 a7 0d 	lds	r25, 0x0DA7
    cb5e:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <__mulsf3>
    cb62:	9b 01       	movw	r18, r22
    cb64:	ac 01       	movw	r20, r24
    cb66:	60 91 ac 0d 	lds	r22, 0x0DAC
    cb6a:	70 91 ad 0d 	lds	r23, 0x0DAD
    cb6e:	80 91 ae 0d 	lds	r24, 0x0DAE
    cb72:	90 91 af 0d 	lds	r25, 0x0DAF
    cb76:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
    cb7a:	60 93 ac 0d 	sts	0x0DAC, r22
    cb7e:	70 93 ad 0d 	sts	0x0DAD, r23
    cb82:	80 93 ae 0d 	sts	0x0DAE, r24
    cb86:	90 93 af 0d 	sts	0x0DAF, r25
	collision_detect_level(&game.player.shared, 2, 3);
    cb8a:	43 e0       	ldi	r20, 0x03	; 3
    cb8c:	62 e0       	ldi	r22, 0x02	; 2
    cb8e:	80 ea       	ldi	r24, 0xA0	; 160
    cb90:	9d e0       	ldi	r25, 0x0D	; 13
    cb92:	0e 94 73 61 	call	0xc2e6	; 0xc2e6 <collision_detect_level>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
    cb96:	60 91 9e 0d 	lds	r22, 0x0D9E
    cb9a:	70 91 9f 0d 	lds	r23, 0x0D9F
    cb9e:	80 e0       	ldi	r24, 0x00	; 0
    cba0:	90 e0       	ldi	r25, 0x00	; 0
    cba2:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    cba6:	9b 01       	movw	r18, r22
    cba8:	ac 01       	movw	r20, r24
    cbaa:	60 91 ac 0d 	lds	r22, 0x0DAC
    cbae:	70 91 ad 0d 	lds	r23, 0x0DAD
    cbb2:	80 91 ae 0d 	lds	r24, 0x0DAE
    cbb6:	90 91 af 0d 	lds	r25, 0x0DAF
    cbba:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    cbbe:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    cbc2:	f6 2e       	mov	r15, r22
    cbc4:	60 91 9c 0d 	lds	r22, 0x0D9C
    cbc8:	70 91 9d 0d 	lds	r23, 0x0D9D
    cbcc:	80 e0       	ldi	r24, 0x00	; 0
    cbce:	90 e0       	ldi	r25, 0x00	; 0
    cbd0:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    cbd4:	9b 01       	movw	r18, r22
    cbd6:	ac 01       	movw	r20, r24
    cbd8:	60 91 a8 0d 	lds	r22, 0x0DA8
    cbdc:	70 91 a9 0d 	lds	r23, 0x0DA9
    cbe0:	80 91 aa 0d 	lds	r24, 0x0DAA
    cbe4:	90 91 ab 0d 	lds	r25, 0x0DAB
    cbe8:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    cbec:	0e 94 07 68 	call	0xd00e	; 0xd00e <__fixunssfsi>
    cbf0:	03 e0       	ldi	r16, 0x03	; 3
    cbf2:	22 e0       	ldi	r18, 0x02	; 2
    cbf4:	4f 2d       	mov	r20, r15
    cbf6:	80 e0       	ldi	r24, 0x00	; 0
    cbf8:	0e 94 33 5c 	call	0xb866	; 0xb866 <LBMoveSprite>
}
    cbfc:	0f 91       	pop	r16
    cbfe:	ff 90       	pop	r15
    cc00:	ef 90       	pop	r14
    cc02:	df 90       	pop	r13
    cc04:	cf 90       	pop	r12
    cc06:	08 95       	ret

0000cc08 <update_level>:

void update_level()
{
    cc08:	cf 93       	push	r28
    cc0a:	df 93       	push	r29
	if (game.player.shared.vx > 0 &&
    cc0c:	20 e0       	ldi	r18, 0x00	; 0
    cc0e:	30 e0       	ldi	r19, 0x00	; 0
    cc10:	a9 01       	movw	r20, r18
    cc12:	60 91 a0 0d 	lds	r22, 0x0DA0
    cc16:	70 91 a1 0d 	lds	r23, 0x0DA1
    cc1a:	80 91 a2 0d 	lds	r24, 0x0DA2
    cc1e:	90 91 a3 0d 	lds	r25, 0x0DA3
    cc22:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    cc26:	18 16       	cp	r1, r24
    cc28:	44 f5       	brge	.+80     	; 0xcc7a <update_level+0x72>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cc2a:	c0 91 9c 0d 	lds	r28, 0x0D9C
    cc2e:	d0 91 9d 0d 	lds	r29, 0x0D9D
    cc32:	be 01       	movw	r22, r28
    cc34:	80 e0       	ldi	r24, 0x00	; 0
    cc36:	90 e0       	ldi	r25, 0x00	; 0
    cc38:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    cc3c:	9b 01       	movw	r18, r22
    cc3e:	ac 01       	movw	r20, r24
    cc40:	60 91 a8 0d 	lds	r22, 0x0DA8
    cc44:	70 91 a9 0d 	lds	r23, 0x0DA9
    cc48:	80 91 aa 0d 	lds	r24, 0x0DAA
    cc4c:	90 91 ab 0d 	lds	r25, 0x0DAB
    cc50:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
	LBMoveSprite(0, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, 2, 3);
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
    cc54:	20 e0       	ldi	r18, 0x00	; 0
    cc56:	30 e0       	ldi	r19, 0x00	; 0
    cc58:	40 ee       	ldi	r20, 0xE0	; 224
    cc5a:	52 e4       	ldi	r21, 0x42	; 66
    cc5c:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    cc60:	87 fd       	sbrc	r24, 7
    cc62:	0b c0       	rjmp	.+22     	; 0xcc7a <update_level+0x72>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    cc64:	93 e0       	ldi	r25, 0x03	; 3
    cc66:	d6 95       	lsr	r29
    cc68:	c7 95       	ror	r28
    cc6a:	9a 95       	dec	r25
    cc6c:	e1 f7       	brne	.-8      	; 0xcc66 <update_level+0x5e>
    cc6e:	6c 96       	adiw	r28, 0x1c	; 28
}

void update_level()
{
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    cc70:	cf 3f       	cpi	r28, 0xFF	; 255
    cc72:	d1 05       	cpc	r29, r1
    cc74:	10 f4       	brcc	.+4      	; 0xcc7a <update_level+0x72>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    cc76:	0e 94 bb 5e 	call	0xbd76	; 0xbd76 <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    cc7a:	20 e0       	ldi	r18, 0x00	; 0
    cc7c:	30 e0       	ldi	r19, 0x00	; 0
    cc7e:	a9 01       	movw	r20, r18
    cc80:	60 91 a4 0d 	lds	r22, 0x0DA4
    cc84:	70 91 a5 0d 	lds	r23, 0x0DA5
    cc88:	80 91 a6 0d 	lds	r24, 0x0DA6
    cc8c:	90 91 a7 0d 	lds	r25, 0x0DA7
    cc90:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    cc94:	18 16       	cp	r1, r24
    cc96:	84 f5       	brge	.+96     	; 0xccf8 <update_level+0xf0>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    cc98:	c0 91 9e 0d 	lds	r28, 0x0D9E
    cc9c:	d0 91 9f 0d 	lds	r29, 0x0D9F
    cca0:	be 01       	movw	r22, r28
    cca2:	80 e0       	ldi	r24, 0x00	; 0
    cca4:	90 e0       	ldi	r25, 0x00	; 0
    cca6:	0e 94 33 68 	call	0xd066	; 0xd066 <__floatunsisf>
    ccaa:	9b 01       	movw	r18, r22
    ccac:	ac 01       	movw	r20, r24
    ccae:	60 91 ac 0d 	lds	r22, 0x0DAC
    ccb2:	70 91 ad 0d 	lds	r23, 0x0DAD
    ccb6:	80 91 ae 0d 	lds	r24, 0x0DAE
    ccba:	90 91 af 0d 	lds	r25, 0x0DAF
    ccbe:	0e 94 9e 67 	call	0xcf3c	; 0xcf3c <__subsf3>
    ccc2:	20 e0       	ldi	r18, 0x00	; 0
    ccc4:	30 e0       	ldi	r19, 0x00	; 0
    ccc6:	40 ec       	ldi	r20, 0xC0	; 192
    ccc8:	51 e4       	ldi	r21, 0x41	; 65
    ccca:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    ccce:	20 e0       	ldi	r18, 0x00	; 0
    ccd0:	30 e0       	ldi	r19, 0x00	; 0
    ccd2:	40 e4       	ldi	r20, 0x40	; 64
    ccd4:	53 e4       	ldi	r21, 0x43	; 67
    ccd6:	0e 94 e5 68 	call	0xd1ca	; 0xd1ca <__gesf2>
    ccda:	87 fd       	sbrc	r24, 7
    ccdc:	0d c0       	rjmp	.+26     	; 0xccf8 <update_level+0xf0>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    ccde:	83 e0       	ldi	r24, 0x03	; 3
    cce0:	d6 95       	lsr	r29
    cce2:	c7 95       	ror	r28
    cce4:	8a 95       	dec	r24
    cce6:	e1 f7       	brne	.-8      	; 0xcce0 <update_level+0xd8>
    cce8:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    ccea:	cf 3f       	cpi	r28, 0xFF	; 255
    ccec:	d1 05       	cpc	r29, r1
    ccee:	20 f4       	brcc	.+8      	; 0xccf8 <update_level+0xf0>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
	}
}
    ccf0:	df 91       	pop	r29
    ccf2:	cf 91       	pop	r28
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    ccf4:	0c 94 d4 5e 	jmp	0xbda8	; 0xbda8 <move_camera_y>
	}
}
    ccf8:	df 91       	pop	r29
    ccfa:	cf 91       	pop	r28
    ccfc:	08 95       	ret

0000ccfe <clear_sprites>:

void clear_sprites()
{
    ccfe:	0f 93       	push	r16
    cd00:	cf 93       	push	r28
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    cd02:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cd04:	01 e0       	ldi	r16, 0x01	; 1
    cd06:	21 e0       	ldi	r18, 0x01	; 1
    cd08:	40 e0       	ldi	r20, 0x00	; 0
    cd0a:	60 ee       	ldi	r22, 0xE0	; 224
    cd0c:	8c 2f       	mov	r24, r28
    cd0e:	0e 94 33 5c 	call	0xb866	; 0xb866 <LBMoveSprite>
    cd12:	cf 5f       	subi	r28, 0xFF	; 255
	}
}

void clear_sprites()
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
    cd14:	cc 31       	cpi	r28, 0x1C	; 28
    cd16:	b1 f7       	brne	.-20     	; 0xcd04 <clear_sprites+0x6>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    cd18:	8e e0       	ldi	r24, 0x0E	; 14
}
    cd1a:	cf 91       	pop	r28
    cd1c:	0f 91       	pop	r16
{
	for(char i = 0; i < MAX_EXTENDED_SPRITES; i++)
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
	LBRotateSprites(MAX_SPRITES);
    cd1e:	0c 94 71 5c 	jmp	0xb8e2	; 0xb8e2 <LBRotateSprites>

0000cd22 <level_transition>:
	render_camera_view();
	LBMapSprite(0, LBGetNextFrame(&game.player.idle), 0);
}

void level_transition(u8 index)
{
    cd22:	cf 93       	push	r28
    cd24:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    cd26:	61 e0       	ldi	r22, 0x01	; 1
    cd28:	83 e0       	ldi	r24, 0x03	; 3
    cd2a:	0e 94 2c 5b 	call	0xb658	; 0xb658 <FadeOut>
	ClearVram();
    cd2e:	0e 94 fc 4c 	call	0x99f8	; 0x99f8 <ClearVram>
	clear_sprites();
    cd32:	0e 94 7f 66 	call	0xccfe	; 0xccfe <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    cd36:	80 e1       	ldi	r24, 0x10	; 16
    cd38:	c8 9f       	mul	r28, r24
    cd3a:	a0 01       	movw	r20, r0
    cd3c:	11 24       	eor	r1, r1
    cd3e:	45 5a       	subi	r20, 0xA5	; 165
    cd40:	56 4f       	sbci	r21, 0xF6	; 246
    cd42:	6c e0       	ldi	r22, 0x0C	; 12
    cd44:	70 e0       	ldi	r23, 0x00	; 0
    cd46:	88 e0       	ldi	r24, 0x08	; 8
    cd48:	90 e0       	ldi	r25, 0x00	; 0
    cd4a:	0e 94 a9 5a 	call	0xb552	; 0xb552 <Print>
	FadeIn(1, true);
    cd4e:	61 e0       	ldi	r22, 0x01	; 1
    cd50:	81 e0       	ldi	r24, 0x01	; 1
    cd52:	0e 94 20 5b 	call	0xb640	; 0xb640 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    cd56:	83 e0       	ldi	r24, 0x03	; 3
    cd58:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <LBWaitSeconds>
	FadeOut(1, true);
    cd5c:	61 e0       	ldi	r22, 0x01	; 1
    cd5e:	81 e0       	ldi	r24, 0x01	; 1
    cd60:	0e 94 2c 5b 	call	0xb658	; 0xb658 <FadeOut>
	ClearVram();
    cd64:	0e 94 fc 4c 	call	0x99f8	; 0x99f8 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cd68:	60 e0       	ldi	r22, 0x00	; 0
    cd6a:	83 e0       	ldi	r24, 0x03	; 3
    cd6c:	0e 94 20 5b 	call	0xb640	; 0xb640 <FadeIn>
	load_level(index);
    cd70:	8c 2f       	mov	r24, r28
}
    cd72:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    cd74:	0c 94 ef 5e 	jmp	0xbdde	; 0xbdde <load_level>

0000cd78 <load_splash>:
	init_game_state();
	load_splash();
}

void load_splash()
{
    cd78:	0f 93       	push	r16
	game.current_screen = SPLASH;
    cd7a:	e0 e9       	ldi	r30, 0x90	; 144
    cd7c:	fd e0       	ldi	r31, 0x0D	; 13
    cd7e:	10 82       	st	Z, r1
	game.selection = START_SELECTED;
    cd80:	13 82       	std	Z+3, r1	; 0x03
	clear_sprites();
    cd82:	0e 94 7f 66 	call	0xccfe	; 0xccfe <clear_sprites>
	Print(8, 15, (char*) str1Player);
    cd86:	4c ea       	ldi	r20, 0xAC	; 172
    cd88:	59 e0       	ldi	r21, 0x09	; 9
    cd8a:	6f e0       	ldi	r22, 0x0F	; 15
    cd8c:	70 e0       	ldi	r23, 0x00	; 0
    cd8e:	88 e0       	ldi	r24, 0x08	; 8
    cd90:	90 e0       	ldi	r25, 0x00	; 0
    cd92:	0e 94 a9 5a 	call	0xb552	; 0xb552 <Print>
	Print(8, 16, (char*) strHighscores);
    cd96:	40 ea       	ldi	r20, 0xA0	; 160
    cd98:	59 e0       	ldi	r21, 0x09	; 9
    cd9a:	60 e1       	ldi	r22, 0x10	; 16
    cd9c:	70 e0       	ldi	r23, 0x00	; 0
    cd9e:	88 e0       	ldi	r24, 0x08	; 8
    cda0:	90 e0       	ldi	r25, 0x00	; 0
    cda2:	0e 94 a9 5a 	call	0xb552	; 0xb552 <Print>
	Print(6, 21, (char*) strSelectHandle);
    cda6:	4f e8       	ldi	r20, 0x8F	; 143
    cda8:	59 e0       	ldi	r21, 0x09	; 9
    cdaa:	65 e1       	ldi	r22, 0x15	; 21
    cdac:	70 e0       	ldi	r23, 0x00	; 0
    cdae:	86 e0       	ldi	r24, 0x06	; 6
    cdb0:	90 e0       	ldi	r25, 0x00	; 0
    cdb2:	0e 94 a9 5a 	call	0xb552	; 0xb552 <Print>
	Print(4, 26, (char*) strCopyright);
    cdb6:	42 eb       	ldi	r20, 0xB2	; 178
    cdb8:	59 e0       	ldi	r21, 0x09	; 9
    cdba:	6a e1       	ldi	r22, 0x1A	; 26
    cdbc:	70 e0       	ldi	r23, 0x00	; 0
    cdbe:	84 e0       	ldi	r24, 0x04	; 4
    cdc0:	90 e0       	ldi	r25, 0x00	; 0
    cdc2:	0e 94 a9 5a 	call	0xb552	; 0xb552 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    cdc6:	4f ed       	ldi	r20, 0xDF	; 223
    cdc8:	5e e8       	ldi	r21, 0x8E	; 142
    cdca:	65 e0       	ldi	r22, 0x05	; 5
    cdcc:	86 e0       	ldi	r24, 0x06	; 6
    cdce:	0e 94 5c 5a 	call	0xb4b8	; 0xb4b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    cdd2:	40 e0       	ldi	r20, 0x00	; 0
    cdd4:	63 ef       	ldi	r22, 0xF3	; 243
    cdd6:	75 e7       	ldi	r23, 0x75	; 117
    cdd8:	80 e0       	ldi	r24, 0x00	; 0
    cdda:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <LBMapSprite>
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
    cdde:	01 e0       	ldi	r16, 0x01	; 1
    cde0:	21 e0       	ldi	r18, 0x01	; 1
    cde2:	48 e7       	ldi	r20, 0x78	; 120
    cde4:	68 e3       	ldi	r22, 0x38	; 56
    cde6:	80 e0       	ldi	r24, 0x00	; 0
    cde8:	0e 94 33 5c 	call	0xb866	; 0xb866 <LBMoveSprite>
	LBRotateSprites(1);
    cdec:	81 e0       	ldi	r24, 0x01	; 1
}
    cdee:	0f 91       	pop	r16
	Print(6, 21, (char*) strSelectHandle);
	Print(4, 26, (char*) strCopyright);
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
	LBMoveSprite(0, 7*8, 15*8, 1, 1);
	LBRotateSprites(1);
    cdf0:	0c 94 71 5c 	jmp	0xb8e2	; 0xb8e2 <LBRotateSprites>

0000cdf4 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    cdf4:	fc 01       	movw	r30, r24
    cdf6:	20 81       	ld	r18, Z
    cdf8:	31 81       	ldd	r19, Z+1	; 0x01
    cdfa:	28 70       	andi	r18, 0x08	; 8
    cdfc:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    cdfe:	81 e0       	ldi	r24, 0x01	; 1
    ce00:	23 2b       	or	r18, r19
    ce02:	09 f4       	brne	.+2      	; 0xce06 <select_pressed+0x12>
    ce04:	80 e0       	ldi	r24, 0x00	; 0
}
    ce06:	08 95       	ret

0000ce08 <update_splash>:

void update_splash()
{
    ce08:	0f 93       	push	r16
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    ce0a:	80 91 50 0e 	lds	r24, 0x0E50
    ce0e:	85 ff       	sbrs	r24, 5
    ce10:	0b c0       	rjmp	.+22     	; 0xce28 <update_splash+0x20>
    ce12:	90 91 93 0d 	lds	r25, 0x0D93
    ce16:	91 11       	cpse	r25, r1
    ce18:	07 c0       	rjmp	.+14     	; 0xce28 <update_splash+0x20>
	{
		game.selection = HIGH_SCORES_SELECTED;
    ce1a:	81 e0       	ldi	r24, 0x01	; 1
    ce1c:	80 93 93 0d 	sts	0x0D93, r24
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    ce20:	01 e0       	ldi	r16, 0x01	; 1
    ce22:	21 e0       	ldi	r18, 0x01	; 1
    ce24:	40 e8       	ldi	r20, 0x80	; 128
    ce26:	0b c0       	rjmp	.+22     	; 0xce3e <update_splash+0x36>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    ce28:	84 ff       	sbrs	r24, 4
    ce2a:	0e c0       	rjmp	.+28     	; 0xce48 <update_splash+0x40>
    ce2c:	80 91 93 0d 	lds	r24, 0x0D93
    ce30:	81 30       	cpi	r24, 0x01	; 1
    ce32:	51 f4       	brne	.+20     	; 0xce48 <update_splash+0x40>
	{
		game.selection = START_SELECTED;
    ce34:	10 92 93 0d 	sts	0x0D93, r1
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    ce38:	01 e0       	ldi	r16, 0x01	; 1
    ce3a:	21 e0       	ldi	r18, 0x01	; 1
    ce3c:	48 e7       	ldi	r20, 0x78	; 120
    ce3e:	68 e3       	ldi	r22, 0x38	; 56
    ce40:	80 e0       	ldi	r24, 0x00	; 0
    ce42:	0e 94 33 5c 	call	0xb866	; 0xb866 <LBMoveSprite>
    ce46:	11 c0       	rjmp	.+34     	; 0xce6a <update_splash+0x62>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    ce48:	80 e5       	ldi	r24, 0x50	; 80
    ce4a:	9e e0       	ldi	r25, 0x0E	; 14
    ce4c:	0e 94 fa 66 	call	0xcdf4	; 0xcdf4 <select_pressed>
    ce50:	88 23       	and	r24, r24
    ce52:	59 f0       	breq	.+22     	; 0xce6a <update_splash+0x62>
    ce54:	80 91 93 0d 	lds	r24, 0x0D93
    ce58:	81 11       	cpse	r24, r1
    ce5a:	07 c0       	rjmp	.+14     	; 0xce6a <update_splash+0x62>
	{
		game.current_screen = LEVEL;
    ce5c:	82 e0       	ldi	r24, 0x02	; 2
    ce5e:	80 93 90 0d 	sts	0x0D90, r24
		level_transition(0);
    ce62:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}
}
    ce64:	0f 91       	pop	r16
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    ce66:	0c 94 91 66 	jmp	0xcd22	; 0xcd22 <level_transition>
		return;
	}
}
    ce6a:	0f 91       	pop	r16
    ce6c:	08 95       	ret

0000ce6e <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    ce6e:	89 e3       	ldi	r24, 0x39	; 57
    ce70:	9b e1       	ldi	r25, 0x1B	; 27
    ce72:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <InitMusicPlayer>
	ClearVram();
    ce76:	0e 94 fc 4c 	call	0x99f8	; 0x99f8 <ClearVram>
	SetMasterVolume(0x05);
    ce7a:	85 e0       	ldi	r24, 0x05	; 5
    ce7c:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetMasterVolume>
	SetTileTable(tiles_data);
    ce80:	89 ef       	ldi	r24, 0xF9	; 249
    ce82:	95 e7       	ldi	r25, 0x75	; 117
    ce84:	0e 94 1e 4d 	call	0x9a3c	; 0x9a3c <SetTileTable>
	SetSpritesTileTable(sprites_data);
    ce88:	89 e0       	ldi	r24, 0x09	; 9
    ce8a:	99 e6       	ldi	r25, 0x69	; 105
    ce8c:	0e 94 f7 4c 	call	0x99ee	; 0x99ee <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    ce90:	83 e2       	ldi	r24, 0x23	; 35
    ce92:	0e 94 1b 4d 	call	0x9a36	; 0x9a36 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    ce96:	60 e0       	ldi	r22, 0x00	; 0
    ce98:	83 e0       	ldi	r24, 0x03	; 3
    ce9a:	0e 94 20 5b 	call	0xb640	; 0xb640 <FadeIn>
	init_game_state();
    ce9e:	0e 94 d8 5c 	call	0xb9b0	; 0xb9b0 <init_game_state>
	load_splash();
    cea2:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <load_splash>
	while (1)
	{
		WaitVsync(1);
    cea6:	81 e0       	ldi	r24, 0x01	; 1
    cea8:	90 e0       	ldi	r25, 0x00	; 0
    ceaa:	0e 94 c4 5a 	call	0xb588	; 0xb588 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    ceae:	60 e0       	ldi	r22, 0x00	; 0
    ceb0:	80 e5       	ldi	r24, 0x50	; 80
    ceb2:	9e e0       	ldi	r25, 0x0E	; 14
    ceb4:	0e 94 87 5b 	call	0xb70e	; 0xb70e <LBGetJoyPadState>
		switch (game.current_screen)
    ceb8:	80 91 90 0d 	lds	r24, 0x0D90
    cebc:	88 23       	and	r24, r24
    cebe:	51 f0       	breq	.+20     	; 0xced4 <main+0x66>
    cec0:	82 30       	cpi	r24, 0x02	; 2
    cec2:	89 f7       	brne	.-30     	; 0xcea6 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites(1);
				break;
			case LEVEL:
				update_level();
    cec4:	0e 94 04 66 	call	0xcc08	; 0xcc08 <update_level>
				update_player();
    cec8:	0e 94 2d 60 	call	0xc05a	; 0xc05a <update_player>
				update_player_position();
    cecc:	0e 94 46 65 	call	0xca8c	; 0xca8c <update_player_position>
				LBRotateSprites(6);
    ced0:	86 e0       	ldi	r24, 0x06	; 6
    ced2:	03 c0       	rjmp	.+6      	; 0xceda <main+0x6c>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    ced4:	0e 94 04 67 	call	0xce08	; 0xce08 <update_splash>
				LBRotateSprites(1);
    ced8:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case LEVEL:
				update_level();
				update_player();
				update_player_position();
				LBRotateSprites(6);
    ceda:	0e 94 71 5c 	call	0xb8e2	; 0xb8e2 <LBRotateSprites>
				break;
    cede:	e3 cf       	rjmp	.-58     	; 0xcea6 <main+0x38>

0000cee0 <__udivmodhi4>:
    cee0:	aa 1b       	sub	r26, r26
    cee2:	bb 1b       	sub	r27, r27
    cee4:	51 e1       	ldi	r21, 0x11	; 17
    cee6:	07 c0       	rjmp	.+14     	; 0xcef6 <__udivmodhi4_ep>

0000cee8 <__udivmodhi4_loop>:
    cee8:	aa 1f       	adc	r26, r26
    ceea:	bb 1f       	adc	r27, r27
    ceec:	a6 17       	cp	r26, r22
    ceee:	b7 07       	cpc	r27, r23
    cef0:	10 f0       	brcs	.+4      	; 0xcef6 <__udivmodhi4_ep>
    cef2:	a6 1b       	sub	r26, r22
    cef4:	b7 0b       	sbc	r27, r23

0000cef6 <__udivmodhi4_ep>:
    cef6:	88 1f       	adc	r24, r24
    cef8:	99 1f       	adc	r25, r25
    cefa:	5a 95       	dec	r21
    cefc:	a9 f7       	brne	.-22     	; 0xcee8 <__udivmodhi4_loop>
    cefe:	80 95       	com	r24
    cf00:	90 95       	com	r25
    cf02:	bc 01       	movw	r22, r24
    cf04:	cd 01       	movw	r24, r26
    cf06:	08 95       	ret

0000cf08 <__divmodhi4>:
    cf08:	97 fb       	bst	r25, 7
    cf0a:	07 2e       	mov	r0, r23
    cf0c:	16 f4       	brtc	.+4      	; 0xcf12 <__divmodhi4+0xa>
    cf0e:	00 94       	com	r0
    cf10:	07 d0       	rcall	.+14     	; 0xcf20 <__divmodhi4_neg1>
    cf12:	77 fd       	sbrc	r23, 7
    cf14:	09 d0       	rcall	.+18     	; 0xcf28 <__divmodhi4_neg2>
    cf16:	0e 94 70 67 	call	0xcee0	; 0xcee0 <__udivmodhi4>
    cf1a:	07 fc       	sbrc	r0, 7
    cf1c:	05 d0       	rcall	.+10     	; 0xcf28 <__divmodhi4_neg2>
    cf1e:	3e f4       	brtc	.+14     	; 0xcf2e <__divmodhi4_exit>

0000cf20 <__divmodhi4_neg1>:
    cf20:	90 95       	com	r25
    cf22:	81 95       	neg	r24
    cf24:	9f 4f       	sbci	r25, 0xFF	; 255
    cf26:	08 95       	ret

0000cf28 <__divmodhi4_neg2>:
    cf28:	70 95       	com	r23
    cf2a:	61 95       	neg	r22
    cf2c:	7f 4f       	sbci	r23, 0xFF	; 255

0000cf2e <__divmodhi4_exit>:
    cf2e:	08 95       	ret

0000cf30 <__tablejump2__>:
    cf30:	ee 0f       	add	r30, r30
    cf32:	ff 1f       	adc	r31, r31
    cf34:	05 90       	lpm	r0, Z+
    cf36:	f4 91       	lpm	r31, Z
    cf38:	e0 2d       	mov	r30, r0
    cf3a:	09 94       	ijmp

0000cf3c <__subsf3>:
    cf3c:	50 58       	subi	r21, 0x80	; 128

0000cf3e <__addsf3>:
    cf3e:	bb 27       	eor	r27, r27
    cf40:	aa 27       	eor	r26, r26
    cf42:	0e d0       	rcall	.+28     	; 0xcf60 <__addsf3x>
    cf44:	08 c1       	rjmp	.+528    	; 0xd156 <__fp_round>
    cf46:	f9 d0       	rcall	.+498    	; 0xd13a <__fp_pscA>
    cf48:	30 f0       	brcs	.+12     	; 0xcf56 <__addsf3+0x18>
    cf4a:	fe d0       	rcall	.+508    	; 0xd148 <__fp_pscB>
    cf4c:	20 f0       	brcs	.+8      	; 0xcf56 <__addsf3+0x18>
    cf4e:	31 f4       	brne	.+12     	; 0xcf5c <__addsf3+0x1e>
    cf50:	9f 3f       	cpi	r25, 0xFF	; 255
    cf52:	11 f4       	brne	.+4      	; 0xcf58 <__addsf3+0x1a>
    cf54:	1e f4       	brtc	.+6      	; 0xcf5c <__addsf3+0x1e>
    cf56:	ee c0       	rjmp	.+476    	; 0xd134 <__fp_nan>
    cf58:	0e f4       	brtc	.+2      	; 0xcf5c <__addsf3+0x1e>
    cf5a:	e0 95       	com	r30
    cf5c:	e7 fb       	bst	r30, 7
    cf5e:	e4 c0       	rjmp	.+456    	; 0xd128 <__fp_inf>

0000cf60 <__addsf3x>:
    cf60:	e9 2f       	mov	r30, r25
    cf62:	0a d1       	rcall	.+532    	; 0xd178 <__fp_split3>
    cf64:	80 f3       	brcs	.-32     	; 0xcf46 <__addsf3+0x8>
    cf66:	ba 17       	cp	r27, r26
    cf68:	62 07       	cpc	r22, r18
    cf6a:	73 07       	cpc	r23, r19
    cf6c:	84 07       	cpc	r24, r20
    cf6e:	95 07       	cpc	r25, r21
    cf70:	18 f0       	brcs	.+6      	; 0xcf78 <__addsf3x+0x18>
    cf72:	71 f4       	brne	.+28     	; 0xcf90 <__addsf3x+0x30>
    cf74:	9e f5       	brtc	.+102    	; 0xcfdc <__addsf3x+0x7c>
    cf76:	22 c1       	rjmp	.+580    	; 0xd1bc <__fp_zero>
    cf78:	0e f4       	brtc	.+2      	; 0xcf7c <__addsf3x+0x1c>
    cf7a:	e0 95       	com	r30
    cf7c:	0b 2e       	mov	r0, r27
    cf7e:	ba 2f       	mov	r27, r26
    cf80:	a0 2d       	mov	r26, r0
    cf82:	0b 01       	movw	r0, r22
    cf84:	b9 01       	movw	r22, r18
    cf86:	90 01       	movw	r18, r0
    cf88:	0c 01       	movw	r0, r24
    cf8a:	ca 01       	movw	r24, r20
    cf8c:	a0 01       	movw	r20, r0
    cf8e:	11 24       	eor	r1, r1
    cf90:	ff 27       	eor	r31, r31
    cf92:	59 1b       	sub	r21, r25
    cf94:	99 f0       	breq	.+38     	; 0xcfbc <__addsf3x+0x5c>
    cf96:	59 3f       	cpi	r21, 0xF9	; 249
    cf98:	50 f4       	brcc	.+20     	; 0xcfae <__addsf3x+0x4e>
    cf9a:	50 3e       	cpi	r21, 0xE0	; 224
    cf9c:	68 f1       	brcs	.+90     	; 0xcff8 <__addsf3x+0x98>
    cf9e:	1a 16       	cp	r1, r26
    cfa0:	f0 40       	sbci	r31, 0x00	; 0
    cfa2:	a2 2f       	mov	r26, r18
    cfa4:	23 2f       	mov	r18, r19
    cfa6:	34 2f       	mov	r19, r20
    cfa8:	44 27       	eor	r20, r20
    cfaa:	58 5f       	subi	r21, 0xF8	; 248
    cfac:	f3 cf       	rjmp	.-26     	; 0xcf94 <__addsf3x+0x34>
    cfae:	46 95       	lsr	r20
    cfb0:	37 95       	ror	r19
    cfb2:	27 95       	ror	r18
    cfb4:	a7 95       	ror	r26
    cfb6:	f0 40       	sbci	r31, 0x00	; 0
    cfb8:	53 95       	inc	r21
    cfba:	c9 f7       	brne	.-14     	; 0xcfae <__addsf3x+0x4e>
    cfbc:	7e f4       	brtc	.+30     	; 0xcfdc <__addsf3x+0x7c>
    cfbe:	1f 16       	cp	r1, r31
    cfc0:	ba 0b       	sbc	r27, r26
    cfc2:	62 0b       	sbc	r22, r18
    cfc4:	73 0b       	sbc	r23, r19
    cfc6:	84 0b       	sbc	r24, r20
    cfc8:	ba f0       	brmi	.+46     	; 0xcff8 <__addsf3x+0x98>
    cfca:	91 50       	subi	r25, 0x01	; 1
    cfcc:	a1 f0       	breq	.+40     	; 0xcff6 <__addsf3x+0x96>
    cfce:	ff 0f       	add	r31, r31
    cfd0:	bb 1f       	adc	r27, r27
    cfd2:	66 1f       	adc	r22, r22
    cfd4:	77 1f       	adc	r23, r23
    cfd6:	88 1f       	adc	r24, r24
    cfd8:	c2 f7       	brpl	.-16     	; 0xcfca <__addsf3x+0x6a>
    cfda:	0e c0       	rjmp	.+28     	; 0xcff8 <__addsf3x+0x98>
    cfdc:	ba 0f       	add	r27, r26
    cfde:	62 1f       	adc	r22, r18
    cfe0:	73 1f       	adc	r23, r19
    cfe2:	84 1f       	adc	r24, r20
    cfe4:	48 f4       	brcc	.+18     	; 0xcff8 <__addsf3x+0x98>
    cfe6:	87 95       	ror	r24
    cfe8:	77 95       	ror	r23
    cfea:	67 95       	ror	r22
    cfec:	b7 95       	ror	r27
    cfee:	f7 95       	ror	r31
    cff0:	9e 3f       	cpi	r25, 0xFE	; 254
    cff2:	08 f0       	brcs	.+2      	; 0xcff6 <__addsf3x+0x96>
    cff4:	b3 cf       	rjmp	.-154    	; 0xcf5c <__addsf3+0x1e>
    cff6:	93 95       	inc	r25
    cff8:	88 0f       	add	r24, r24
    cffa:	08 f0       	brcs	.+2      	; 0xcffe <__addsf3x+0x9e>
    cffc:	99 27       	eor	r25, r25
    cffe:	ee 0f       	add	r30, r30
    d000:	97 95       	ror	r25
    d002:	87 95       	ror	r24
    d004:	08 95       	ret

0000d006 <__cmpsf2>:
    d006:	6c d0       	rcall	.+216    	; 0xd0e0 <__fp_cmp>
    d008:	08 f4       	brcc	.+2      	; 0xd00c <__cmpsf2+0x6>
    d00a:	81 e0       	ldi	r24, 0x01	; 1
    d00c:	08 95       	ret

0000d00e <__fixunssfsi>:
    d00e:	bc d0       	rcall	.+376    	; 0xd188 <__fp_splitA>
    d010:	88 f0       	brcs	.+34     	; 0xd034 <__fixunssfsi+0x26>
    d012:	9f 57       	subi	r25, 0x7F	; 127
    d014:	90 f0       	brcs	.+36     	; 0xd03a <__fixunssfsi+0x2c>
    d016:	b9 2f       	mov	r27, r25
    d018:	99 27       	eor	r25, r25
    d01a:	b7 51       	subi	r27, 0x17	; 23
    d01c:	a0 f0       	brcs	.+40     	; 0xd046 <__fixunssfsi+0x38>
    d01e:	d1 f0       	breq	.+52     	; 0xd054 <__fixunssfsi+0x46>
    d020:	66 0f       	add	r22, r22
    d022:	77 1f       	adc	r23, r23
    d024:	88 1f       	adc	r24, r24
    d026:	99 1f       	adc	r25, r25
    d028:	1a f0       	brmi	.+6      	; 0xd030 <__fixunssfsi+0x22>
    d02a:	ba 95       	dec	r27
    d02c:	c9 f7       	brne	.-14     	; 0xd020 <__fixunssfsi+0x12>
    d02e:	12 c0       	rjmp	.+36     	; 0xd054 <__fixunssfsi+0x46>
    d030:	b1 30       	cpi	r27, 0x01	; 1
    d032:	81 f0       	breq	.+32     	; 0xd054 <__fixunssfsi+0x46>
    d034:	c3 d0       	rcall	.+390    	; 0xd1bc <__fp_zero>
    d036:	b1 e0       	ldi	r27, 0x01	; 1
    d038:	08 95       	ret
    d03a:	c0 c0       	rjmp	.+384    	; 0xd1bc <__fp_zero>
    d03c:	67 2f       	mov	r22, r23
    d03e:	78 2f       	mov	r23, r24
    d040:	88 27       	eor	r24, r24
    d042:	b8 5f       	subi	r27, 0xF8	; 248
    d044:	39 f0       	breq	.+14     	; 0xd054 <__fixunssfsi+0x46>
    d046:	b9 3f       	cpi	r27, 0xF9	; 249
    d048:	cc f3       	brlt	.-14     	; 0xd03c <__fixunssfsi+0x2e>
    d04a:	86 95       	lsr	r24
    d04c:	77 95       	ror	r23
    d04e:	67 95       	ror	r22
    d050:	b3 95       	inc	r27
    d052:	d9 f7       	brne	.-10     	; 0xd04a <__fixunssfsi+0x3c>
    d054:	3e f4       	brtc	.+14     	; 0xd064 <__fixunssfsi+0x56>
    d056:	90 95       	com	r25
    d058:	80 95       	com	r24
    d05a:	70 95       	com	r23
    d05c:	61 95       	neg	r22
    d05e:	7f 4f       	sbci	r23, 0xFF	; 255
    d060:	8f 4f       	sbci	r24, 0xFF	; 255
    d062:	9f 4f       	sbci	r25, 0xFF	; 255
    d064:	08 95       	ret

0000d066 <__floatunsisf>:
    d066:	e8 94       	clt
    d068:	09 c0       	rjmp	.+18     	; 0xd07c <__floatsisf+0x12>

0000d06a <__floatsisf>:
    d06a:	97 fb       	bst	r25, 7
    d06c:	3e f4       	brtc	.+14     	; 0xd07c <__floatsisf+0x12>
    d06e:	90 95       	com	r25
    d070:	80 95       	com	r24
    d072:	70 95       	com	r23
    d074:	61 95       	neg	r22
    d076:	7f 4f       	sbci	r23, 0xFF	; 255
    d078:	8f 4f       	sbci	r24, 0xFF	; 255
    d07a:	9f 4f       	sbci	r25, 0xFF	; 255
    d07c:	99 23       	and	r25, r25
    d07e:	a9 f0       	breq	.+42     	; 0xd0aa <__floatsisf+0x40>
    d080:	f9 2f       	mov	r31, r25
    d082:	96 e9       	ldi	r25, 0x96	; 150
    d084:	bb 27       	eor	r27, r27
    d086:	93 95       	inc	r25
    d088:	f6 95       	lsr	r31
    d08a:	87 95       	ror	r24
    d08c:	77 95       	ror	r23
    d08e:	67 95       	ror	r22
    d090:	b7 95       	ror	r27
    d092:	f1 11       	cpse	r31, r1
    d094:	f8 cf       	rjmp	.-16     	; 0xd086 <__floatsisf+0x1c>
    d096:	fa f4       	brpl	.+62     	; 0xd0d6 <__floatsisf+0x6c>
    d098:	bb 0f       	add	r27, r27
    d09a:	11 f4       	brne	.+4      	; 0xd0a0 <__floatsisf+0x36>
    d09c:	60 ff       	sbrs	r22, 0
    d09e:	1b c0       	rjmp	.+54     	; 0xd0d6 <__floatsisf+0x6c>
    d0a0:	6f 5f       	subi	r22, 0xFF	; 255
    d0a2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0a4:	8f 4f       	sbci	r24, 0xFF	; 255
    d0a6:	9f 4f       	sbci	r25, 0xFF	; 255
    d0a8:	16 c0       	rjmp	.+44     	; 0xd0d6 <__floatsisf+0x6c>
    d0aa:	88 23       	and	r24, r24
    d0ac:	11 f0       	breq	.+4      	; 0xd0b2 <__floatsisf+0x48>
    d0ae:	96 e9       	ldi	r25, 0x96	; 150
    d0b0:	11 c0       	rjmp	.+34     	; 0xd0d4 <__floatsisf+0x6a>
    d0b2:	77 23       	and	r23, r23
    d0b4:	21 f0       	breq	.+8      	; 0xd0be <__floatsisf+0x54>
    d0b6:	9e e8       	ldi	r25, 0x8E	; 142
    d0b8:	87 2f       	mov	r24, r23
    d0ba:	76 2f       	mov	r23, r22
    d0bc:	05 c0       	rjmp	.+10     	; 0xd0c8 <__floatsisf+0x5e>
    d0be:	66 23       	and	r22, r22
    d0c0:	71 f0       	breq	.+28     	; 0xd0de <__floatsisf+0x74>
    d0c2:	96 e8       	ldi	r25, 0x86	; 134
    d0c4:	86 2f       	mov	r24, r22
    d0c6:	70 e0       	ldi	r23, 0x00	; 0
    d0c8:	60 e0       	ldi	r22, 0x00	; 0
    d0ca:	2a f0       	brmi	.+10     	; 0xd0d6 <__floatsisf+0x6c>
    d0cc:	9a 95       	dec	r25
    d0ce:	66 0f       	add	r22, r22
    d0d0:	77 1f       	adc	r23, r23
    d0d2:	88 1f       	adc	r24, r24
    d0d4:	da f7       	brpl	.-10     	; 0xd0cc <__floatsisf+0x62>
    d0d6:	88 0f       	add	r24, r24
    d0d8:	96 95       	lsr	r25
    d0da:	87 95       	ror	r24
    d0dc:	97 f9       	bld	r25, 7
    d0de:	08 95       	ret

0000d0e0 <__fp_cmp>:
    d0e0:	99 0f       	add	r25, r25
    d0e2:	00 08       	sbc	r0, r0
    d0e4:	55 0f       	add	r21, r21
    d0e6:	aa 0b       	sbc	r26, r26
    d0e8:	e0 e8       	ldi	r30, 0x80	; 128
    d0ea:	fe ef       	ldi	r31, 0xFE	; 254
    d0ec:	16 16       	cp	r1, r22
    d0ee:	17 06       	cpc	r1, r23
    d0f0:	e8 07       	cpc	r30, r24
    d0f2:	f9 07       	cpc	r31, r25
    d0f4:	c0 f0       	brcs	.+48     	; 0xd126 <__fp_cmp+0x46>
    d0f6:	12 16       	cp	r1, r18
    d0f8:	13 06       	cpc	r1, r19
    d0fa:	e4 07       	cpc	r30, r20
    d0fc:	f5 07       	cpc	r31, r21
    d0fe:	98 f0       	brcs	.+38     	; 0xd126 <__fp_cmp+0x46>
    d100:	62 1b       	sub	r22, r18
    d102:	73 0b       	sbc	r23, r19
    d104:	84 0b       	sbc	r24, r20
    d106:	95 0b       	sbc	r25, r21
    d108:	39 f4       	brne	.+14     	; 0xd118 <__fp_cmp+0x38>
    d10a:	0a 26       	eor	r0, r26
    d10c:	61 f0       	breq	.+24     	; 0xd126 <__fp_cmp+0x46>
    d10e:	23 2b       	or	r18, r19
    d110:	24 2b       	or	r18, r20
    d112:	25 2b       	or	r18, r21
    d114:	21 f4       	brne	.+8      	; 0xd11e <__fp_cmp+0x3e>
    d116:	08 95       	ret
    d118:	0a 26       	eor	r0, r26
    d11a:	09 f4       	brne	.+2      	; 0xd11e <__fp_cmp+0x3e>
    d11c:	a1 40       	sbci	r26, 0x01	; 1
    d11e:	a6 95       	lsr	r26
    d120:	8f ef       	ldi	r24, 0xFF	; 255
    d122:	81 1d       	adc	r24, r1
    d124:	81 1d       	adc	r24, r1
    d126:	08 95       	ret

0000d128 <__fp_inf>:
    d128:	97 f9       	bld	r25, 7
    d12a:	9f 67       	ori	r25, 0x7F	; 127
    d12c:	80 e8       	ldi	r24, 0x80	; 128
    d12e:	70 e0       	ldi	r23, 0x00	; 0
    d130:	60 e0       	ldi	r22, 0x00	; 0
    d132:	08 95       	ret

0000d134 <__fp_nan>:
    d134:	9f ef       	ldi	r25, 0xFF	; 255
    d136:	80 ec       	ldi	r24, 0xC0	; 192
    d138:	08 95       	ret

0000d13a <__fp_pscA>:
    d13a:	00 24       	eor	r0, r0
    d13c:	0a 94       	dec	r0
    d13e:	16 16       	cp	r1, r22
    d140:	17 06       	cpc	r1, r23
    d142:	18 06       	cpc	r1, r24
    d144:	09 06       	cpc	r0, r25
    d146:	08 95       	ret

0000d148 <__fp_pscB>:
    d148:	00 24       	eor	r0, r0
    d14a:	0a 94       	dec	r0
    d14c:	12 16       	cp	r1, r18
    d14e:	13 06       	cpc	r1, r19
    d150:	14 06       	cpc	r1, r20
    d152:	05 06       	cpc	r0, r21
    d154:	08 95       	ret

0000d156 <__fp_round>:
    d156:	09 2e       	mov	r0, r25
    d158:	03 94       	inc	r0
    d15a:	00 0c       	add	r0, r0
    d15c:	11 f4       	brne	.+4      	; 0xd162 <__fp_round+0xc>
    d15e:	88 23       	and	r24, r24
    d160:	52 f0       	brmi	.+20     	; 0xd176 <__fp_round+0x20>
    d162:	bb 0f       	add	r27, r27
    d164:	40 f4       	brcc	.+16     	; 0xd176 <__fp_round+0x20>
    d166:	bf 2b       	or	r27, r31
    d168:	11 f4       	brne	.+4      	; 0xd16e <__fp_round+0x18>
    d16a:	60 ff       	sbrs	r22, 0
    d16c:	04 c0       	rjmp	.+8      	; 0xd176 <__fp_round+0x20>
    d16e:	6f 5f       	subi	r22, 0xFF	; 255
    d170:	7f 4f       	sbci	r23, 0xFF	; 255
    d172:	8f 4f       	sbci	r24, 0xFF	; 255
    d174:	9f 4f       	sbci	r25, 0xFF	; 255
    d176:	08 95       	ret

0000d178 <__fp_split3>:
    d178:	57 fd       	sbrc	r21, 7
    d17a:	90 58       	subi	r25, 0x80	; 128
    d17c:	44 0f       	add	r20, r20
    d17e:	55 1f       	adc	r21, r21
    d180:	59 f0       	breq	.+22     	; 0xd198 <__fp_splitA+0x10>
    d182:	5f 3f       	cpi	r21, 0xFF	; 255
    d184:	71 f0       	breq	.+28     	; 0xd1a2 <__fp_splitA+0x1a>
    d186:	47 95       	ror	r20

0000d188 <__fp_splitA>:
    d188:	88 0f       	add	r24, r24
    d18a:	97 fb       	bst	r25, 7
    d18c:	99 1f       	adc	r25, r25
    d18e:	61 f0       	breq	.+24     	; 0xd1a8 <__fp_splitA+0x20>
    d190:	9f 3f       	cpi	r25, 0xFF	; 255
    d192:	79 f0       	breq	.+30     	; 0xd1b2 <__fp_splitA+0x2a>
    d194:	87 95       	ror	r24
    d196:	08 95       	ret
    d198:	12 16       	cp	r1, r18
    d19a:	13 06       	cpc	r1, r19
    d19c:	14 06       	cpc	r1, r20
    d19e:	55 1f       	adc	r21, r21
    d1a0:	f2 cf       	rjmp	.-28     	; 0xd186 <__fp_split3+0xe>
    d1a2:	46 95       	lsr	r20
    d1a4:	f1 df       	rcall	.-30     	; 0xd188 <__fp_splitA>
    d1a6:	08 c0       	rjmp	.+16     	; 0xd1b8 <__fp_splitA+0x30>
    d1a8:	16 16       	cp	r1, r22
    d1aa:	17 06       	cpc	r1, r23
    d1ac:	18 06       	cpc	r1, r24
    d1ae:	99 1f       	adc	r25, r25
    d1b0:	f1 cf       	rjmp	.-30     	; 0xd194 <__fp_splitA+0xc>
    d1b2:	86 95       	lsr	r24
    d1b4:	71 05       	cpc	r23, r1
    d1b6:	61 05       	cpc	r22, r1
    d1b8:	08 94       	sec
    d1ba:	08 95       	ret

0000d1bc <__fp_zero>:
    d1bc:	e8 94       	clt

0000d1be <__fp_szero>:
    d1be:	bb 27       	eor	r27, r27
    d1c0:	66 27       	eor	r22, r22
    d1c2:	77 27       	eor	r23, r23
    d1c4:	cb 01       	movw	r24, r22
    d1c6:	97 f9       	bld	r25, 7
    d1c8:	08 95       	ret

0000d1ca <__gesf2>:
    d1ca:	8a df       	rcall	.-236    	; 0xd0e0 <__fp_cmp>
    d1cc:	08 f4       	brcc	.+2      	; 0xd1d0 <__gesf2+0x6>
    d1ce:	8f ef       	ldi	r24, 0xFF	; 255
    d1d0:	08 95       	ret

0000d1d2 <__mulsf3>:
    d1d2:	0b d0       	rcall	.+22     	; 0xd1ea <__mulsf3x>
    d1d4:	c0 cf       	rjmp	.-128    	; 0xd156 <__fp_round>
    d1d6:	b1 df       	rcall	.-158    	; 0xd13a <__fp_pscA>
    d1d8:	28 f0       	brcs	.+10     	; 0xd1e4 <__mulsf3+0x12>
    d1da:	b6 df       	rcall	.-148    	; 0xd148 <__fp_pscB>
    d1dc:	18 f0       	brcs	.+6      	; 0xd1e4 <__mulsf3+0x12>
    d1de:	95 23       	and	r25, r21
    d1e0:	09 f0       	breq	.+2      	; 0xd1e4 <__mulsf3+0x12>
    d1e2:	a2 cf       	rjmp	.-188    	; 0xd128 <__fp_inf>
    d1e4:	a7 cf       	rjmp	.-178    	; 0xd134 <__fp_nan>
    d1e6:	11 24       	eor	r1, r1
    d1e8:	ea cf       	rjmp	.-44     	; 0xd1be <__fp_szero>

0000d1ea <__mulsf3x>:
    d1ea:	c6 df       	rcall	.-116    	; 0xd178 <__fp_split3>
    d1ec:	a0 f3       	brcs	.-24     	; 0xd1d6 <__mulsf3+0x4>

0000d1ee <__mulsf3_pse>:
    d1ee:	95 9f       	mul	r25, r21
    d1f0:	d1 f3       	breq	.-12     	; 0xd1e6 <__mulsf3+0x14>
    d1f2:	95 0f       	add	r25, r21
    d1f4:	50 e0       	ldi	r21, 0x00	; 0
    d1f6:	55 1f       	adc	r21, r21
    d1f8:	62 9f       	mul	r22, r18
    d1fa:	f0 01       	movw	r30, r0
    d1fc:	72 9f       	mul	r23, r18
    d1fe:	bb 27       	eor	r27, r27
    d200:	f0 0d       	add	r31, r0
    d202:	b1 1d       	adc	r27, r1
    d204:	63 9f       	mul	r22, r19
    d206:	aa 27       	eor	r26, r26
    d208:	f0 0d       	add	r31, r0
    d20a:	b1 1d       	adc	r27, r1
    d20c:	aa 1f       	adc	r26, r26
    d20e:	64 9f       	mul	r22, r20
    d210:	66 27       	eor	r22, r22
    d212:	b0 0d       	add	r27, r0
    d214:	a1 1d       	adc	r26, r1
    d216:	66 1f       	adc	r22, r22
    d218:	82 9f       	mul	r24, r18
    d21a:	22 27       	eor	r18, r18
    d21c:	b0 0d       	add	r27, r0
    d21e:	a1 1d       	adc	r26, r1
    d220:	62 1f       	adc	r22, r18
    d222:	73 9f       	mul	r23, r19
    d224:	b0 0d       	add	r27, r0
    d226:	a1 1d       	adc	r26, r1
    d228:	62 1f       	adc	r22, r18
    d22a:	83 9f       	mul	r24, r19
    d22c:	a0 0d       	add	r26, r0
    d22e:	61 1d       	adc	r22, r1
    d230:	22 1f       	adc	r18, r18
    d232:	74 9f       	mul	r23, r20
    d234:	33 27       	eor	r19, r19
    d236:	a0 0d       	add	r26, r0
    d238:	61 1d       	adc	r22, r1
    d23a:	23 1f       	adc	r18, r19
    d23c:	84 9f       	mul	r24, r20
    d23e:	60 0d       	add	r22, r0
    d240:	21 1d       	adc	r18, r1
    d242:	82 2f       	mov	r24, r18
    d244:	76 2f       	mov	r23, r22
    d246:	6a 2f       	mov	r22, r26
    d248:	11 24       	eor	r1, r1
    d24a:	9f 57       	subi	r25, 0x7F	; 127
    d24c:	50 40       	sbci	r21, 0x00	; 0
    d24e:	8a f0       	brmi	.+34     	; 0xd272 <__mulsf3_pse+0x84>
    d250:	e1 f0       	breq	.+56     	; 0xd28a <__mulsf3_pse+0x9c>
    d252:	88 23       	and	r24, r24
    d254:	4a f0       	brmi	.+18     	; 0xd268 <__mulsf3_pse+0x7a>
    d256:	ee 0f       	add	r30, r30
    d258:	ff 1f       	adc	r31, r31
    d25a:	bb 1f       	adc	r27, r27
    d25c:	66 1f       	adc	r22, r22
    d25e:	77 1f       	adc	r23, r23
    d260:	88 1f       	adc	r24, r24
    d262:	91 50       	subi	r25, 0x01	; 1
    d264:	50 40       	sbci	r21, 0x00	; 0
    d266:	a9 f7       	brne	.-22     	; 0xd252 <__mulsf3_pse+0x64>
    d268:	9e 3f       	cpi	r25, 0xFE	; 254
    d26a:	51 05       	cpc	r21, r1
    d26c:	70 f0       	brcs	.+28     	; 0xd28a <__mulsf3_pse+0x9c>
    d26e:	5c cf       	rjmp	.-328    	; 0xd128 <__fp_inf>
    d270:	a6 cf       	rjmp	.-180    	; 0xd1be <__fp_szero>
    d272:	5f 3f       	cpi	r21, 0xFF	; 255
    d274:	ec f3       	brlt	.-6      	; 0xd270 <__mulsf3_pse+0x82>
    d276:	98 3e       	cpi	r25, 0xE8	; 232
    d278:	dc f3       	brlt	.-10     	; 0xd270 <__mulsf3_pse+0x82>
    d27a:	86 95       	lsr	r24
    d27c:	77 95       	ror	r23
    d27e:	67 95       	ror	r22
    d280:	b7 95       	ror	r27
    d282:	f7 95       	ror	r31
    d284:	e7 95       	ror	r30
    d286:	9f 5f       	subi	r25, 0xFF	; 255
    d288:	c1 f7       	brne	.-16     	; 0xd27a <__mulsf3_pse+0x8c>
    d28a:	fe 2b       	or	r31, r30
    d28c:	88 0f       	add	r24, r24
    d28e:	91 1d       	adc	r25, r1
    d290:	96 95       	lsr	r25
    d292:	87 95       	ror	r24
    d294:	97 f9       	bld	r25, 7
    d296:	08 95       	ret

0000d298 <_exit>:
    d298:	f8 94       	cli

0000d29a <__stop_program>:
    d29a:	ff cf       	rjmp	.-2      	; 0xd29a <__stop_program>
