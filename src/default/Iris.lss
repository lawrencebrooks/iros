
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000c534  0000c634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000c660  2**5
                  CONTENTS, READONLY
  2 .text         0000c534  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000aff  00800510  00800510  0000c644  2**1
                  ALLOC
  4 .stab         00000618  00000000  00000000  0000ca60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000d31d  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000660  00000000  00000000  0000d330  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008155  00000000  00000000  0000d990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016b4  00000000  00000000  00015ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002106  00000000  00000000  00017199  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000014a0  00000000  00000000  000192a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001abb  00000000  00000000  0001a740  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006f66  00000000  00000000  0001c1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007a8  00000000  00000000  00023168  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 32 	jmp	0x6556	; 0x6556 <__ctors_end>
       4:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
       8:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
       c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      10:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      14:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      18:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      1c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      20:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <__vector_8>
      24:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      28:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      2c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      30:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      34:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <__vector_13>
      38:	0c 94 98 36 	jmp	0x6d30	; 0x6d30 <__vector_14>
      3c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      40:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      44:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      48:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      4c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      50:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      54:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      58:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      5c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      60:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      64:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      68:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      6c:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__bad_interrupt>
      70:	5f 59       	subi	r21, 0x9F	; 159
      72:	6e 59       	subi	r22, 0x9E	; 158
      74:	62 59       	subi	r22, 0x92	; 146
      76:	6e 59       	subi	r22, 0x9E	; 158
      78:	65 59       	subi	r22, 0x95	; 149
      7a:	6e 59       	subi	r22, 0x9E	; 158
      7c:	68 59       	subi	r22, 0x98	; 152
      7e:	6e 59       	subi	r22, 0x9E	; 158
      80:	6b 59       	subi	r22, 0x9B	; 155
      82:	6e 59       	subi	r22, 0x9E	; 158

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	d4 39 d7 39 33 3a 37 3a 3e 3a df 39 e4 39 e9 39     .9.93:7:>:.9.9.9
      e2:	46 3a ec 39 ef 39 f2 39 2d 3a 30 3a 56 3a           F:.9.9.9-:0:V:

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strTwist>:
     943:	49 52 49 53 20 57 41 53 20 41 20 46 4f 4f 4c 00     IRIS WAS A FOOL.
     953:	00 41 4e 44 20 53 4f 20 41 52 45 20 59 4f 55 00     .AND SO ARE YOU.
     963:	57 49 54 48 20 54 48 45 20 45 4d 45 52 41 4c 44     WITH THE EMERALD
     973:	53 20 52 45 54 55 52 4e 45 44 00 54 48 45 52 45     S RETURNED.THERE
     983:	20 49 53 20 4e 4f 20 53 54 4f 50 50 49 4e 47 20      IS NO STOPPING 
     993:	4f 55 52 00 44 4f 4d 49 4e 49 4f 4e 20 4f 56 45     OUR.DOMINION OVE
     9a3:	52 20 54 48 45 20 47 41 4c 41 58 59 00 00 4e 4f     R THE GALAXY..NO
     9b3:	57 20 59 4f 55 20 57 49 4c 4c 20 44 49 45 00 23     W YOU WILL DIE.#
	...

000009c4 <strReveal4>:
     9c4:	59 4f 55 20 44 4f 4e 54 20 4b 4e 4f 57 00 57 48     YOU DONT KNOW.WH
     9d4:	41 54 20 59 4f 55 20 41 52 45 20 44 4f 49 4e 47     AT YOU ARE DOING
     9e4:	00 23 00                                            .#.

000009e7 <strReveal3>:
     9e7:	59 4f 55 20 41 52 45 20 4d 41 4b 49 4e 47 20 41     YOU ARE MAKING A
     9f7:	20 4d 49 53 54 41 4b 45 00 23 00                     MISTAKE.#.

00000a02 <strReveal2>:
     a02:	59 4f 55 20 43 41 4e 54 20 48 41 56 45 20 54 48     YOU CANT HAVE TH
     a12:	45 4d 20 41 4c 4c 00 23 00                          EM ALL.#.

00000a1b <strReveal1>:
     a1b:	59 4f 55 20 41 52 45 20 50 45 52 53 49 53 54 45     YOU ARE PERSISTE
     a2b:	4e 54 00 23 00                                      NT.#.

00000a30 <strReveal0>:
     a30:	49 20 4b 4e 45 57 20 54 48 45 59 20 57 4f 55 4c     I KNEW THEY WOUL
     a40:	44 20 53 45 4e 44 20 59 4f 55 00 23 00              D SEND YOU.#.

00000a4d <strIntro>:
     a4d:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a5d:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a6d:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a7d:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a8d:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a9d:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     aad:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     abd:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     acd:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     add:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     aed:	58 59 00 23 00                                      XY.#.

00000af2 <default_scores>:
     af2:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b02:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b10 <strLevels>:
     b10:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000b1e <strPaused>:
     b1e:	50 41 55 53 45 44 00                                PAUSED.

00000b25 <strExit>:
     b25:	45 58 49 54 20 47 41 4d 45 20 58 00                 EXIT GAME X.

00000b31 <strTime>:
     b31:	54 49 4d 45 20 00                                   TIME .

00000b37 <strLives>:
     b37:	4c 49 56 45 53 20 00                                LIVES .

00000b3e <strShield>:
     b3e:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b46 <strScore>:
     b46:	53 43 4f 52 45 20 00                                SCORE .

00000b4d <strSelectHandle>:
	...

00000b4e <strHighscores>:
     b4e:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b5a <str1Player>:
     b5a:	53 54 41 52 54 00                                   START.

00000b60 <strMusic>:
     b60:	4d 55 53 49 43 20 42 59 20 54 41 4e 4e 45 52 20     MUSIC BY TANNER 
     b70:	48 45 4c 4c 41 4e 44 00                             HELLAND.

00000b78 <strCopyright>:
     b78:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     b88:	4f 4f 4b 53 00                                      OOKS.

00000b8d <spacesong>:
     b8d:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b9d:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     bad:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     bbd:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     bcd:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     bdd:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     bed:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     bfd:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c0d:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c1d:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c2d:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c3d:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     c4d:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c5d:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c6d:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c7d:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c8d:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c9d:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     cad:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     cbd:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     ccd:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     cdd:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     ced:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     cfd:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d0d:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d1d:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d2d:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d3d:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     d4d:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d5d:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d6d:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d7d:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d8d:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d9d:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     dad:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     dbd:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     dcd:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     ddd:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     ded:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     dfd:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e0d:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e1d:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e2d:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e3d:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     e4d:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e5d:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e6d:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e7d:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e8d:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e9d:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     ead:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     ebd:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     ecd:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     edd:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     eed:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     efd:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f0d:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f1d:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f2d:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f3d:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     f4d:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f5d:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f6d:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f7d:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f8d:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f9d:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     fad:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     fbd:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     fcd:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     fdd:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     fed:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     ffd:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    100d:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    101d:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    102d:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    103d:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    104d:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    105d:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    106d:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    107d:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    108d:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    109d:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    10ad:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    10bd:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    10cd:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    10dd:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    10ed:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    10fd:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    110d:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    111d:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    112d:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    113d:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    114d:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    115d:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    116d:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    117d:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    118d:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    119d:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    11ad:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    11bd:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    11cd:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    11dd:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    11ed:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    11fd:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    120d:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    121d:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

0000122d <planetsong>:
    122d:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    123d:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    124d:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    125d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    126d:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    127d:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    128d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    129d:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    12ad:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    12bd:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    12cd:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    12dd:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    12ed:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    12fd:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    130d:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    131d:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    132d:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    133d:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    134d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    135d:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    136d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    137d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    138d:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    139d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    13ad:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    13bd:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    13cd:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    13dd:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    13ed:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    13fd:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    140d:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    141d:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    142d:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    143d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    144d:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    145d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    146d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    147d:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    148d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    149d:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    14ad:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    14bd:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    14cd:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    14dd:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    14ed:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    14fd:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    150d:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    151d:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    152d:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    153d:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    154d:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    155d:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    156d:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    157d:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    158d:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    159d:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    15ad:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    15bd:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    15cd:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    15dd:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    15ed:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    15fd:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    160d:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    161d:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    162d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    163d:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    164d:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    165d:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    166d:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    167d:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    168d:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    169d:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    16ad:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    16bd:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    16cd:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    16dd:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    16ed:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    16fd:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    170d:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    171d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    172d:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    173d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    174d:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    175d:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    176d:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    177d:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    178d:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    179d:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    17ad:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    17bd:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    17cd:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    17dd:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    17ed:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    17fd:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    180d:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    181d:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    182d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    183d:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    184d:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    185d:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    186d:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    187d:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    188d:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    189d:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    18ad:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    18bd:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    18cd:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    18dd:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    18ed:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    18fd:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    190d:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    191d:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    192d:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    193d:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    194d:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    195d:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    196d:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    197d:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    198d:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    199d:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    19ad:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    19bd:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    19cd:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    19dd:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    19ed:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    19fd:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a0d:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a1d:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a2d:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a3d:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1a4d:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a5d:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a6d:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a7d:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a8d:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a9d:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1aad:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1abd:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1acd:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1add:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1aed:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1afd:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b0d:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b1d:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b2d:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b3d:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1b4d:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b5d:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b6d:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b7d:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b8d:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b9d:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1bad:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1bbd:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1bcd:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1bdd:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1bed:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1bfd:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c0d:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c1d:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c2d:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c3d:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1c4d:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c5d:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c6d:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c7d:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c8d:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c9d:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1cad:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1cbd:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1ccd:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1cdd:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1ced:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1cfd:	2f 00                                               /.

00001cff <my_patches>:
    1cff:	00 00 00 76 1e 00 00 00 00 00 00 00 76 1e 00 00     ...v........v...
    1d0f:	00 00 00 00 00 65 1e 00 00 00 00 00 00 00 0f 1e     .....e..........
    1d1f:	00 00 00 00 00 00 00 65 1e 00 00 00 00 00 00 00     .......e........
    1d2f:	3e 1d 00 00 00 00 00 00 00 3e 1d 00 00 00 00        >........>.....

00001d3e <explode>:
    1d3e:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1d4e:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d5e:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d6e:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d7e:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d8e:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d9e:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1dae:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1dbe:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1dce:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dde:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1dee:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1dfe:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e0e:	ff                                                  .

00001e0f <pshoot>:
    1e0f:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e1f:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e2f:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e3f:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1e4f:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e5f:	00 01 05 00 00 ff                                   ......

00001e65 <navigate>:
    1e65:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e75:	ff                                                  .

00001e76 <instrument>:
    1e76:	00 02 04 00 00 dd 00 ff                             ........

00001e7e <sprites_data>:
    1e7e:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e8e:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e9e:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1eae:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1ebe:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1ece:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1ede:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1eee:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1efe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f0e:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f1e:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f2e:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f3e:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1f4e:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f5e:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f6e:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f8e:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f9e:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1fae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fbe:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1fce:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1fde:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1fee:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1ffe:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    200e:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    201e:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    202e:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    203e:	fe fe fe d2 fe fe fe fe fe fe d2 d2 d2 fe fe fe     ................
    204e:	fe d2 d2 e4 d2 d2 fe fe d2 d2 e4 f5 e4 d2 d2 fe     ................
    205e:	fe d2 d2 e4 d2 d2 fe fe fe fe d2 d2 d2 fe fe fe     ................
    206e:	fe fe fe d2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    207e:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    208e:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    209e:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    20ae:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    20be:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ce:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    20de:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    20ee:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20fe:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    210e:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    211e:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    212e:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    213e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    214e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    215e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    216e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    217e:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    218e:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    219e:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    21ae:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    21be:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21ce:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21de:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21ee:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    21fe:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    220e:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    221e:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    222e:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    223e:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    224e:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    225e:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    226e:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    227e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    228e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    229e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22ae:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22be:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    22ce:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    22de:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    22ee:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22fe:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    230e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    231e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    232e:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    233e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    234e:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    235e:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    236e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    237e:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    238e:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    239e:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    23ae:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    23be:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    23ce:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23de:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    23ee:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    23fe:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    240e:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    241e:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    242e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    243e:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    244e:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    245e:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    246e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    247e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    248e:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    249e:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    24ae:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24be:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    24ce:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    24de:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    24ee:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    24fe:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    250e:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    251e:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    252e:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    253e:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    254e:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    255e:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    256e:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    257e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    258e:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    259e:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    25ae:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    25be:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    25ce:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    25de:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    25ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25fe:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    260e:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    261e:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    262e:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    263e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    264e:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    265e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    266e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    267e:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    268e:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    269e:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    26ae:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    26be:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    26ce:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    26de:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    26ee:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26fe:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    270e:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    271e:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    272e:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    273e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    274e:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    275e:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    276e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    277e:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    278e:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    279e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    27ae:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    27be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ce:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    27de:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27fe:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    280e:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    281e:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    282e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    283e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    284e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    285e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    286e:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    287e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    288e:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    289e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28be:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    28ce:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    28de:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    28ee:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    28fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    290e:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    291e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    292e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    293e:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    294e:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    295e:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    296e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    297e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    298e:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    299e:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    29ae:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    29be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ce:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    29de:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    29ee:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    29fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a0e:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2a1e:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2a2e:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2a3e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2a4e:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2a5e:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2a6e:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2a7e:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2a8e:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2a9e:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2aae:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2abe:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2ace:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2ade:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2aee:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2afe:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2b0e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b2e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b3e:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2b4e:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2b5e:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2b6e:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2b7e:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2b8e:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2b9e:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2bae:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bbe:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2bce:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2bde:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2bee:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2bfe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c0e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2c2e:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2c3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2c4e:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2c5e:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2c6e:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2c7e:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2c8e:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2c9e:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2cae:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    2cbe:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2cce:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    2cde:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    2cee:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    2cfe:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    2d0e:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2d1e:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2d2e:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................

00002d3e <map_enemy_spider_1>:
    2d3e:	01 01 29                                            ..)

00002d41 <map_enemy_spider_0>:
    2d41:	01 01 1e                                            ...

00002d44 <map_enemy_shark>:
    2d44:	01 01 05                                            ...

00002d47 <map_enemy_shot>:
    2d47:	01 01 13                                            ...

00002d4a <map_hero_shot>:
    2d4a:	01 01 04                                            ...

00002d4d <map_hero_ship_large_1>:
    2d4d:	04 02 2b 2c 2d 2e 39 30 3a 32                       ..+,-.90:2

00002d57 <map_hero_ship_large_0>:
    2d57:	04 02 2b 2c 2d 2e 2f 30 31 32                       ..+,-./012

00002d61 <map_hero_ship_1>:
    2d61:	03 01 2a 20 21                                      ..* !

00002d66 <map_hero_ship_0>:
    2d66:	03 01 1f 20 21                                      ... !

00002d6b <map_hero_prone>:
    2d6b:	03 01 36 37 38                                      ..678

00002d70 <map_hero_jump>:
    2d70:	02 03 02 03 0f 12 1c 1d                             ........

00002d78 <map_hero_step_3>:
    2d78:	02 03 02 03 0f 33 34 35                             .....345

00002d80 <map_hero_step_2>:
    2d80:	02 03 00 01 0c 11 1a 1b                             ........

00002d88 <map_hero_step_1>:
    2d88:	02 03 02 03 0f 10 18 19                             ........

00002d90 <map_hero_step_0>:
    2d90:	02 03 00 01 0c 0e 16 17                             ........

00002d98 <map_hero_idle>:
    2d98:	02 03 00 01 0c 0d 14 15                             ........

00002da0 <map_emerald_4>:
    2da0:	01 01 0a                                            ...

00002da3 <map_emerald_3>:
    2da3:	01 01 09                                            ...

00002da6 <map_emerald_2>:
    2da6:	01 01 08                                            ...

00002da9 <map_emerald_0>:
    2da9:	01 01 07                                            ...

00002dac <map_emerald_1>:
    2dac:	01 01 06                                            ...

00002daf <map_explosion_2>:
    2daf:	01 01 24                                            ..$

00002db2 <map_explosion_1>:
    2db2:	01 01 23                                            ..#

00002db5 <map_explosion_0>:
    2db5:	01 01 22                                            .."

00002db8 <map_particle>:
    2db8:	01 01 25                                            ..%

00002dbb <map_up_arrow>:
    2dbb:	01 01 28                                            ..(

00002dbe <map_down_arrow>:
    2dbe:	01 01 27                                            ..'

00002dc1 <map_right_arrow>:
    2dc1:	01 01 26                                            ..&

00002dc4 <map_none>:
    2dc4:	01 01 0b                                            ...

00002dc7 <map_level_space>:
    2dc7:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    2dd7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2de7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2df7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e07:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e17:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e27:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e37:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e47:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e57:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e67:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e77:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e87:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2e97:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ea7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2eb7:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    2ec7:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ed7:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    2ee7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ef7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f67:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    2f77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2f87:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    2f97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fe7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3007:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3017:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3027:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    3037:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3047:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    3057:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3067:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    3077:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3087:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    3097:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30a7:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    30b7:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    30c7:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    30d7:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    30e7:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    30f7:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3107:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3117:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3127:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3137:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3147:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3157:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3167:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3177:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3187:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3197:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    31f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3207:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3217:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3227:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3237:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3247:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3257:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3267:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3277:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3287:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3297:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    32f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3307:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3317:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3327:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3337:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3347:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3357:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3367:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3377:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3387:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3397:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    33f7:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3407:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3417:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3427:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3437:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003447 <map_level_4>:
    3447:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    3457:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3467:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3477:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3487:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3497:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34b7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34c7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34d7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34e7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34f7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3507:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3517:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3527:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3537:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    3547:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3557:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    3567:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3577:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3587:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3597:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    35e7:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    35f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3607:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    3617:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3627:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3637:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3647:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3657:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3667:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3677:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3687:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3697:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36a7:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    36b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36c7:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    36d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    36e7:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    36f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3707:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    3717:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3727:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    3737:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    3747:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    3757:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    3767:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    3777:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3787:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3797:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    37f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3807:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3817:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3827:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3837:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3847:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3857:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3867:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3877:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3887:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3897:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3907:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3917:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3927:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3937:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3947:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3957:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3967:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3977:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3987:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3997:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a77:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    3a87:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3a97:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    3aa7:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ab7:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00003ac7 <map_level_3>:
    3ac7:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    3ad7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ae7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3af7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b07:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b17:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b27:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b37:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b47:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b57:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b67:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b77:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b87:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3b97:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ba7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bb7:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    3bc7:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bd7:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    3be7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bf7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c67:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    3c77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3c87:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    3c97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ca7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ce7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3cf7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d07:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    3d17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d27:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    3d37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d47:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    3d57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d67:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    3d77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3d87:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    3d97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3da7:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    3db7:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    3dc7:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    3dd7:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    3de7:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    3df7:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    3e07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3e97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ea7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3eb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ec7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ed7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ee7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ef7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3f97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3fe7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ff7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4007:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4017:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4027:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4037:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4047:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4057:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4067:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4077:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4087:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4097:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    40f7:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4107:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4117:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    4127:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4137:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00004147 <map_level_2>:
    4147:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    4157:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4167:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4177:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4187:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4197:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41b7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41c7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41d7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41e7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    41f7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4207:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4217:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4227:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4237:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    4247:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4257:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4267:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4277:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4287:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4297:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    42e7:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    42f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4307:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    4317:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4327:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4337:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4347:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4357:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4367:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4377:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4387:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    4397:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43a7:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    43b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43c7:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    43d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    43e7:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    43f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4407:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    4417:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4427:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    4437:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    4447:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    4457:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    4467:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    4477:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    4487:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4497:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4507:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4517:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4527:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4537:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4547:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4557:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4567:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4577:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4587:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4597:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4607:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4617:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4627:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4637:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4647:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4657:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4667:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4677:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4687:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4697:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    46f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4707:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4717:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4727:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4737:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4747:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4757:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4767:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4777:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4787:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4797:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    47a7:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47b7:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

000047c7 <map_level_1>:
    47c7:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    47d7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47e7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47f7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4807:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4817:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4827:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4837:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4847:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4857:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4867:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4877:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4887:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4897:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48a7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48b7:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    48c7:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48d7:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    48e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    48f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4907:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4917:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4927:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4937:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4947:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4957:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4967:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4977:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4987:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    4997:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    49f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a07:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    4a17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a27:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    4a37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a47:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    4a57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a67:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    4a77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4a87:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    4a97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4aa7:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    4ab7:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    4ac7:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    4ad7:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    4ae7:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    4af7:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    4b07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4b97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ba7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4be7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4bf7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4c97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ca7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ce7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cf7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d07:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d17:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d27:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d37:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d47:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d57:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4da7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4db7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4dc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4dd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4de7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4df7:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    4e07:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e17:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    4e27:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e37:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

00004e47 <map_level_0>:
    4e47:	01 ff 01 34 7e 06 00 00 00 00 00 00 00 00 00 00     ...4~...........
    4e57:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e67:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e77:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e87:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e97:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ea7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4eb7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ec7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ed7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ee7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ef7:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f07:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f17:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f27:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f37:	7a 06 06 05 00 00 00 00 00 00 00 00 00 00 00 00     z...............
    4f47:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f57:	79 05 07 07 00 00 00 00 00 00 00 00 00 00 00 00     y...............
    4f67:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f77:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f87:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4f97:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fa7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fb7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fc7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fd7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fe7:	32 07 07 02 47 07 00 00 00 00 00 00 00 00 00 00     2...G...........
    4ff7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5007:	0f 07 07 02 6a 07 00 00 00 00 00 00 00 00 00 00     ....j...........
    5017:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5027:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5037:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5047:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5057:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5067:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5077:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5087:	25 07 07 02 54 07 00 00 00 00 00 00 00 00 00 00     %...T...........
    5097:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50a7:	02 07 07 02 2b 07 07 02 45 07 00 00 00 00 00 00     ....+...E.......
    50b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50c7:	11 07 07 02 32 07 0f 02 27 07 00 00 00 00 00 00     ....2...'.......
    50d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    50e7:	49 07 0f 04 28 07 00 00 00 00 00 00 00 00 00 00     I...(...........
    50f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5107:	48 07 0f 04 29 07 00 00 00 00 00 00 00 00 00 00     H...)...........
    5117:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5127:	47 07 0f 04 2a 07 00 00 00 00 00 00 00 00 00 00     G...*...........
    5137:	6a 07 16 02 00 00 00 00 00 00 00 00 00 00 00 00     j...............
    5147:	46 02 0f 04 07 02 04 07 20 02 00 00 00 00 00 00     F....... .......
    5157:	69 02 17 04 00 00 00 00 00 00 00 00 00 00 00 00     i...............
    5167:	5b 04 04 07 21 04 00 00 00 00 00 00 00 00 00 00     [...!...........
    5177:	68 04 18 07 00 00 00 00 00 00 00 00 00 00 00 00     h...............
    5187:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5197:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    51f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5207:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5217:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5227:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5237:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5247:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5257:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5267:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5277:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5287:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5297:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5307:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5317:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5327:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5337:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5347:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5357:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5367:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5377:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5387:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5397:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53a7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53b7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53c7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53d7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53e7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53f7:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5407:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5417:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5427:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5437:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5447:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5457:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5467:	80 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5477:	50 07 30 02 00 00 00 00 00 00 00 00 00 00 00 00     P.0.............
    5487:	80 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5497:	4f 02 31 04 00 00 00 00 00 00 00 00 00 00 00 00     O.1.............
    54a7:	80 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    54b7:	4e 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     N...............

000054c7 <tiles_data>:
	...
    5507:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5517:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5527:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    5537:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    5547:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5557:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    5567:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    5577:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5587:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5597:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    55a7:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    55b7:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    55c7:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    55d7:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    55e7:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    55f7:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    5607:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    5617:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    5627:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    5637:	af af af af af af af af af af af af af af af af     ................
    5647:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5657:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5667:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5677:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5687:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5697:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    56a7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    56b7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    56c7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    56d7:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    56e7:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    56f7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
	...
    571f:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    572f:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    575f:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    576f:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5787:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    5797:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    57a7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    57b7:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    57d3:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    57e3:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    57f3:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    5803:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    5813:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5823:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5833:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5843:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    5853:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    5863:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    5873:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    5883:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    5893:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    58a3:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    58b3:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    58c3:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    58d3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    58e3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    58f3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5903:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    5913:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    5923:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    5933:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    5943:	94 8c 8c 95 82 82 82 82 82 bf 96 96 00 d8 d8 d8     ................
    5953:	bf ff bf 82 00 d8 d8 bf ff ff ff bf 00 d8 bf ff     ................
    5963:	ff ff ff ff bf bf ff ff ff ff ff ff 00 00 bf ff     ................
    5973:	ff ff ff ff 00 00 94 bf ff ff ff bf 00 00 00 8c     ................
    5983:	bf ff bf d8 96 96 96 96 96 96 96 96 83 83 8c 8c     ................
    5993:	8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    59a3:	d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8     ................
    59b3:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    59c3:	d8 d8 82 82 96 96 8c 83 83 8c 8c 8c 83 82 83 83     ................
    59d3:	83 83 8c 00 82 82 82 83 83 83 83 00 82 82 82 83     ................
    59e3:	83 83 83 00 d8 82 82 83 83 83 83 00 82 82 82 83     ................
    59f3:	83 83 00 00 82 82 83 83 83 95 00 00 82 82 83 83     ................
    5a03:	95 00 00 00 40 40 40 40 40 40 40 40 40 40 40 40     ....@@@@@@@@@@@@
    5a13:	40 40 40 40 41 41 41 41 41 41 41 41 41 41 41 41     @@@@AAAAAAAAAAAA
    5a23:	41 41 41 41 42 42 42 42 42 42 42 42 42 42 42 42     AAAABBBBBBBBBBBB
    5a33:	42 42 42 42 43 43 43 43 43 43 43 43 43 43 43 43     BBBBCCCCCCCCCCCC
    5a43:	43 43 43 43 00 00 00 96 95 ff d8 d8 00 00 00 00     CCCC............
    5a53:	96 ff 83 82 00 00 00 00 00 ff 96 96 00 00 00 00     ................
    5a63:	00 bf 96 96 00 00 00 00 00 bf 96 96 00 00 00 00     ................
    5a73:	00 bf 96 96 00 00 00 00 00 bf 00 00 00 00 00 00     ................
    5a83:	00 77 00 00 d8 d8 d8 82 82 82 82 82 82 82 82 82     .w..............
    5a93:	82 83 83 83 8c 8c 83 83 83 83 8c 95 96 96 96 96     ................
    5aa3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    5ab3:	96 96 96 96 96 96 96 96 96 96 96 96 00 96 96 96     ................
    5ac3:	96 96 96 00 83 83 8c 95 96 00 00 00 83 8c 96 96     ................
    5ad3:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 00     ................
    5ae3:	00 00 00 00 96 96 00 00 00 00 00 00 96 96 00 00     ................
	...
    5b07:	44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44     DDDDDDDDDDDDDDDD
    5b17:	45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45     EEEEEEEEEEEEEEEE
    5b27:	46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46     FFFFFFFFFFFFFFFF
    5b37:	47 47 47 47 47 47 47 47 47 47 47 47 47 47 47 47     GGGGGGGGGGGGGGGG
    5b47:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    5b57:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    5b67:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    5b8f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5b9f:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    5baf:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5bcf:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    5bdf:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    5bef:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    5c0f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    5c1f:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5c2f:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    5c4f:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    5c5f:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    5c6f:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5c93:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    5ca3:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    5cb3:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    5ccf:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    5cdf:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    5cef:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    5d0f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    5d1f:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    5d2f:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5d4f:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    5d5f:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    5d6f:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    5d8f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5d9f:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5daf:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    5dcf:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    5ddf:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    5def:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    5e0f:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    5e1f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5e2f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    5e4f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5e5f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5e6f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    5e8f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    5e9f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    5eaf:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    5ecf:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    5edf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5eef:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    5f0f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5f1f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5f2f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5f4f:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5f5f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    5f6f:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    5f8f:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    5f9f:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    5faf:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    5fcf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5fdf:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    5fef:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    600f:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    601f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    602f:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    6053:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    6063:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    6073:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    608f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    609f:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    60af:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    60cf:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    60df:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    60ef:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    610f:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    611f:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    612f:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    614f:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    615f:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    616f:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    618f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    619f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    61af:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    61cf:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    61df:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    61ef:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    620f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    621f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    622f:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    624f:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    625f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    626f:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    628f:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    629f:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    62af:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    62cf:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    62df:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    62ef:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    630f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    631f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    632f:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    634f:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    635f:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    636f:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    638f:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    639f:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    63af:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    63cf:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    63df:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    63ef:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    640f:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    641f:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    642f:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    644f:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    645f:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    646f:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...

00006487 <map_font>:
    6487:	25 01 00 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27     %....... !"#$%&'
    6497:	28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37     ()*+,-./01234567
    64a7:	38 39 3a 3b 3c 3d 3e                                89:;<=>

000064ae <map_atmosphere>:
    64ae:	1c 02 15 15 15 15 15 15 15 15 15 15 15 15 15 15     ................
    64be:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 19 19     ................
    64ce:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    64de:	19 19 19 19 19 19 19 19 19 19                       ..........

000064e8 <map_star_dark>:
    64e8:	01 01 0a                                            ...

000064eb <map_star>:
    64eb:	01 01 09                                            ...

000064ee <map_ice_cloud>:
    64ee:	01 01 08                                            ...

000064f1 <map_ice_far>:
    64f1:	01 01 07                                            ...

000064f4 <map_ice_sky>:
    64f4:	01 01 06                                            ...

000064f7 <map_ice_horizon>:
    64f7:	01 01 05                                            ...

000064fa <map_ice_bottom>:
    64fa:	01 01 04                                            ...

000064fd <map_ice_right>:
    64fd:	01 01 03                                            ...

00006500 <map_ice_middle>:
    6500:	01 01 02                                            ...

00006503 <map_ice_left>:
    6503:	01 01 01                                            ...

00006506 <map_splash>:
    6506:	0f 05 0b 0b 0b 00 0b 0b 0b 00 0c 0d 0e 09 0b 0b     ................
    6516:	0b 00 0b 00 00 0b 0a 00 00 0f 10 11 00 0b 00 09     ................
    6526:	0a 0b 00 09 0b 00 00 00 12 13 14 00 0b 0b 0b 00     ................
    6536:	0b 00 00 0b 00 09 00 16 17 18 00 00 00 0b 0b 0b     ................
    6546:	0b 00 0b 00 00 00 1a 00 0a 00 0b 0b 0b              .............

00006553 <map_tile_none>:
    6553:	01 01 00                                            ...

00006556 <__ctors_end>:
    6556:	11 24       	eor	r1, r1
    6558:	1f be       	out	0x3f, r1	; 63
    655a:	cf ef       	ldi	r28, 0xFF	; 255
    655c:	d0 e1       	ldi	r29, 0x10	; 16
    655e:	de bf       	out	0x3e, r29	; 62
    6560:	cd bf       	out	0x3d, r28	; 61

00006562 <__do_copy_data>:
    6562:	15 e0       	ldi	r17, 0x05	; 5
    6564:	a0 e0       	ldi	r26, 0x00	; 0
    6566:	b5 e0       	ldi	r27, 0x05	; 5
    6568:	e4 e3       	ldi	r30, 0x34	; 52
    656a:	f5 ec       	ldi	r31, 0xC5	; 197
    656c:	02 c0       	rjmp	.+4      	; 0x6572 <__do_copy_data+0x10>
    656e:	05 90       	lpm	r0, Z+
    6570:	0d 92       	st	X+, r0
    6572:	a0 31       	cpi	r26, 0x10	; 16
    6574:	b1 07       	cpc	r27, r17
    6576:	d9 f7       	brne	.-10     	; 0x656e <__do_copy_data+0xc>

00006578 <__do_clear_bss>:
    6578:	10 e1       	ldi	r17, 0x10	; 16
    657a:	a0 e1       	ldi	r26, 0x10	; 16
    657c:	b5 e0       	ldi	r27, 0x05	; 5
    657e:	01 c0       	rjmp	.+2      	; 0x6582 <.do_clear_bss_start>

00006580 <.do_clear_bss_loop>:
    6580:	1d 92       	st	X+, r1

00006582 <.do_clear_bss_start>:
    6582:	af 30       	cpi	r26, 0x0F	; 15
    6584:	b1 07       	cpc	r27, r17
    6586:	e1 f7       	brne	.-8      	; 0x6580 <.do_clear_bss_loop>

00006588 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6588:	0e 94 5f 38 	call	0x70be	; 0x70be <wdt_randomize>
#endif

    MCUSR = 0;
    658c:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    658e:	88 e1       	ldi	r24, 0x18	; 24
    6590:	0f b6       	in	r0, 0x3f	; 63
    6592:	f8 94       	cli
    6594:	80 93 60 00 	sts	0x0060, r24
    6598:	10 92 60 00 	sts	0x0060, r1
    659c:	0f be       	out	0x3f, r0	; 63

0000659e <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    659e:	0e 94 21 39 	call	0x7242	; 0x7242 <isEepromFormatted>
    65a2:	81 11       	cpse	r24, r1
    65a4:	02 c0       	rjmp	.+4      	; 0x65aa <Initialize+0xc>
    65a6:	0e 94 ff 38 	call	0x71fe	; 0x71fe <FormatEeprom>

	cli();
    65aa:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	80 93 e2 0c 	sts	0x0CE2, r24
		tr4_barrel_hi=1;		
    65b2:	80 93 e3 0c 	sts	0x0CE3, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    65b6:	80 93 e1 0c 	sts	0x0CE1, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    65ba:	10 92 ce 0c 	sts	0x0CCE, r1
    65be:	10 92 d4 0c 	sts	0x0CD4, r1
    65c2:	10 92 da 0c 	sts	0x0CDA, r1
    65c6:	10 92 e0 0c 	sts	0x0CE0, r1
    65ca:	10 92 e6 0c 	sts	0x0CE6, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    65ce:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    65d2:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    65d6:	92 e1       	ldi	r25, 0x12	; 18
    65d8:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    65dc:	90 ee       	ldi	r25, 0xE0	; 224
    65de:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    65e2:	94 e1       	ldi	r25, 0x14	; 20
    65e4:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    65e8:	10 92 c2 0c 	sts	0x0CC2, r1
    65ec:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    65f0:	10 92 c6 0c 	sts	0x0CC6, r1
    65f4:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    65f8:	80 93 cd 0c 	sts	0x0CCD, r24

	InitializeVideoMode();
    65fc:	0e 94 cd 45 	call	0x8b9a	; 0x8b9a <InitializeVideoMode>
    6600:	84 e8       	ldi	r24, 0x84	; 132
    6602:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6604:	fc 01       	movw	r30, r24
    6606:	25 91       	lpm	r18, Z+
    6608:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    660a:	f9 01       	movw	r30, r18
    660c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    660e:	30 83       	st	Z, r19
    6610:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6612:	20 e0       	ldi	r18, 0x00	; 0
    6614:	82 3b       	cpi	r24, 0xB2	; 178
    6616:	92 07       	cpc	r25, r18
    6618:	a9 f7       	brne	.-22     	; 0x6604 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    661a:	78 94       	sei
	
	DisplayLogo();
    661c:	0e 94 40 46 	call	0x8c80	; 0x8c80 <DisplayLogo>
    6620:	0e 94 5f 60 	call	0xc0be	; 0xc0be <main>
    6624:	0c 94 98 62 	jmp	0xc530	; 0xc530 <_exit>

00006628 <__bad_interrupt>:
    6628:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000662c <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    662c:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    662e:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    6632:	ad e8       	ldi	r26, 0x8D	; 141
    6634:	aa 95       	dec	r26
    6636:	f1 f7       	brne	.-4      	; 0x6634 <sub_video_mode3+0x8>
    6638:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    663a:	00 91 f1 0c 	lds	r16, 0x0CF1

		ldi ZL,lo8(ram_tiles_restore);
    663e:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    6640:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    6642:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6644:	02 9f       	mul	r16, r18
		add ZL,r0
    6646:	e0 0d       	add	r30, r0
		adc ZH,r1
    6648:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    664a:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    664c:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    664e:	20 91 7f 0d 	lds	r18, 0x0D7F
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6652:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6654:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6656:	30 0f       	add	r19, r16

		cp r18,r16
    6658:	20 17       	cp	r18, r16
		breq no_ramtiles
    665a:	51 f0       	breq	.+20     	; 0x6670 <no_ramtiles>
		nop
    665c:	00 00       	nop
	...

00006660 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    6660:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6662:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6664:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6666:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6668:	0c 93       	st	X, r16

		inc r16
    666a:	03 95       	inc	r16
		cp r16,r18
    666c:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    666e:	c0 f3       	brcs	.-16     	; 0x6660 <upd_loop>

00006670 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6670:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6672:	1a 95       	dec	r17
		brne .-4
    6674:	f1 f7       	brne	.-4      	; 0x6672 <no_ramtiles+0x2>
		rjmp .
    6676:	00 c0       	rjmp	.+0      	; 0x6678 <no_ramtiles+0x8>
		dec r19
    6678:	3a 95       	dec	r19
		brne 1b
    667a:	d1 f7       	brne	.-12     	; 0x6670 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    667c:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    667e:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    6680:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    6684:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    6686:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    6688:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    668a:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    668c:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    6690:	60 2f       	mov	r22, r16
		lsr r16
    6692:	06 95       	lsr	r16
		lsr r16
    6694:	06 95       	lsr	r16
		lsr r16 ;/8
    6696:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    6698:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    669c:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    669e:	f1 2e       	mov	r15, r17

        mov r17,r16
    66a0:	10 2f       	mov	r17, r16
        lsr r16
    66a2:	06 95       	lsr	r16
        lsr r16
    66a4:	06 95       	lsr	r16
        lsr r16 ;/8
    66a6:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    66a8:	d0 0f       	add	r29, r16
		andi r17,0x7
    66aa:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    66ac:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    66ae:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    66b0:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    66b4:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    66b8:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    66bc:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    66c0:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    66c2:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    66c4:	5e 01       	movw	r10, r28
		mov r23,r22
    66c6:	76 2f       	mov	r23, r22
		mov r24,r15
    66c8:	8f 2d       	mov	r24, r15
		mov r9,r25
    66ca:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    66cc:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    66d0:	20 2f       	mov	r18, r16
		lsr r16
    66d2:	06 95       	lsr	r16
		lsr r16
    66d4:	06 95       	lsr	r16
		lsr r16			;hi8
    66d6:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    66d8:	03 95       	inc	r16
		andi r18,7		;lo8
    66da:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    66dc:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    66e0:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    66e2:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    66e4:	01 fe       	sbrs	r0, 1
		clr r22
    66e6:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    66e8:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    66ea:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    66ec:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    66ee:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    66f0:	01 fe       	sbrs	r0, 1
		ser r24
    66f2:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    66f4:	01 fe       	sbrs	r0, 1
		clr r9
    66f6:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    66f8:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    66fa:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    66fc:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    66fe:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    6700:	80 90 be 0c 	lds	r8, 0x0CBE

00006704 <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    6704:	bc d3       	rcall	.+1912   	; 0x6e7e <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    6706:	24 e0       	ldi	r18, 0x04	; 4
    6708:	2a 95       	dec	r18
    670a:	f1 f7       	brne	.-4      	; 0x6708 <next_tile_line+0x4>
    670c:	00 00       	nop
				
		call render_tile_line
    670e:	0e 94 c8 33 	call	0x6790	; 0x6790 <render_tile_line>

		WAIT r18,58
    6712:	23 e1       	ldi	r18, 0x13	; 19
    6714:	2a 95       	dec	r18
    6716:	f1 f7       	brne	.-4      	; 0x6714 <next_tile_line+0x10>
    6718:	00 00       	nop

		inc r22
    671a:	63 95       	inc	r22
		dec r8
    671c:	8a 94       	dec	r8
		breq text_frame_end
    671e:	09 f1       	breq	.+66     	; 0x6762 <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    6720:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    6722:	29 f0       	breq	.+10     	; 0x672e <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    6724:	08 e0       	ldi	r16, 0x08	; 8
    6726:	0a 95       	dec	r16
    6728:	f1 f7       	brne	.-4      	; 0x6726 <next_tile_line+0x22>
    672a:	00 00       	nop
		rjmp next_tile_line
    672c:	eb cf       	rjmp	.-42     	; 0x6704 <next_tile_line>

0000672e <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    672e:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    6730:	0c 2f       	mov	r16, r28
		andi r16,0x7
    6732:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    6734:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    6736:	11 f0       	breq	.+4      	; 0x673c <next_tile_row+0xe>
		inc YL
    6738:	c3 95       	inc	r28
		rjmp 2f
    673a:	02 c0       	rjmp	.+4      	; 0x6740 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    673c:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    673e:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    6740:	8a 95       	dec	r24
		brne .+2
    6742:	09 f4       	brne	.+2      	; 0x6746 <next_tile_row+0x18>
		movw YL,r12
    6744:	e6 01       	movw	r28, r12

		dec r19
    6746:	3a 95       	dec	r19
		brne .+2
    6748:	09 f4       	brne	.+2      	; 0x674c <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    674a:	67 2f       	mov	r22, r23
		brne .+2
    674c:	09 f4       	brne	.+2      	; 0x6750 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    674e:	e5 01       	movw	r28, r10
		brne .+2
    6750:	09 f4       	brne	.+2      	; 0x6754 <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    6752:	8f 2d       	mov	r24, r15
		brne .+2
    6754:	09 f4       	brne	.+2      	; 0x6758 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    6756:	99 2e       	mov	r9, r25

		brne .+2
    6758:	09 f4       	brne	.+2      	; 0x675c <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    675a:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    675c:	09 f4       	brne	.+2      	; 0x6760 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    675e:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    6760:	d1 cf       	rjmp	.-94     	; 0x6704 <next_tile_line>

00006762 <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    6762:	29 e0       	ldi	r18, 0x09	; 9
    6764:	2a 95       	dec	r18
    6766:	f1 f7       	brne	.-4      	; 0x6764 <text_frame_end+0x2>
    6768:	00 00       	nop

		rcall hsync_pulse ;145
    676a:	89 d3       	rcall	.+1810   	; 0x6e7e <hsync_pulse>
	
		clr r1
    676c:	11 24       	eor	r1, r1
		call RestoreBackground
    676e:	0e 94 80 44 	call	0x8900	; 0x8900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6772:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    6776:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6778:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    677a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    677c:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    6780:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    6782:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    6784:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6788:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    678a:	e0 93 36 00 	sts	0x0036, r30

		ret
    678e:	08 95       	ret

00006790 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    6790:	cf 93       	push	r28
		push YH
    6792:	df 93       	push	r29
		push r23
    6794:	7f 93       	push	r23
		push r22
    6796:	6f 93       	push	r22
		push r19
    6798:	3f 93       	push	r19
		push r13
    679a:	df 92       	push	r13
		push r12
    679c:	cf 92       	push	r12
		push r9
    679e:	9f 92       	push	r9
		push r7
    67a0:	7f 92       	push	r7
		push r6
    67a2:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    67a4:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    67a6:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    67a8:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    67aa:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    67ac:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    67ae:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    67b0:	00 0d       	add	r16, r0
		adc r17,r1
    67b2:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    67b4:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    67b6:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    67b8:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    67ba:	00 0d       	add	r16, r0
		adc r17,r1
    67bc:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    67be:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    67c0:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    67c2:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    67c4:	69 2d       	mov	r22, r9
		andi r22,0x7		
    67c6:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    67c8:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    67ca:	f8 94       	cli
		breq .+2
    67cc:	09 f0       	breq	.+2      	; 0x67d0 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    67ce:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    67d0:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    67d2:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    67d4:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    67d6:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    67d8:	02 0c       	add	r0, r2
	    adc r1,r3
    67da:	13 1c       	adc	r1, r3
		movw ZL,r0
    67dc:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    67de:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    67e0:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    67e2:	28 81       	ld	r18, Y
		subi YL,-8
    67e4:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    67e6:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    67e8:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    67ea:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    67ec:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    67ee:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    67f0:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    67f2:	04 0e       	add	r0, r20
	    adc r1,r21
    67f4:	15 1e       	adc	r1, r21
		movw XL,r0
    67f6:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    67f8:	28 81       	ld	r18, Y
		subi YL,-8
    67fa:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    67fc:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    67fe:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    6800:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    6802:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6804:	a1 01       	movw	r20, r2
		brtc .+2
    6806:	0e f4       	brtc	.+2      	; 0x680a <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    6808:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    680a:	04 0e       	add	r0, r20
	    adc r1,r21
    680c:	15 1e       	adc	r1, r21
		movw ZL,r0
    680e:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    6810:	3f 01       	movw	r6, r30

00006812 <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    6812:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    6814:	a6 0f       	add	r26, r22
		adc XH,r0
    6816:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    6818:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    681a:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    681c:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    681e:	22 c0       	rjmp	.+68     	; 0x6864 <rom_fine_scroll>

00006820 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    6820:	00 c0       	rjmp	.+0      	; 0x6822 <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    6822:	68 e1       	ldi	r22, 0x18	; 24
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    6824:	74 e3       	ldi	r23, 0x34	; 52
		add r22,r0
    6826:	60 0d       	add	r22, r0
		adc r23,r1
    6828:	71 1d       	adc	r23, r1
		push r22
    682a:	6f 93       	push	r22
		push r23	
    682c:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    682e:	08 95       	ret

00006830 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    6830:	0d 91       	ld	r16, X+
    6832:	c8 95       	lpm
    6834:	08 b9       	out	0x08, r16	; 8
    6836:	0d 91       	ld	r16, X+
    6838:	c8 95       	lpm
    683a:	08 b9       	out	0x08, r16	; 8
    683c:	0d 91       	ld	r16, X+
    683e:	c8 95       	lpm
    6840:	08 b9       	out	0x08, r16	; 8
    6842:	0d 91       	ld	r16, X+
    6844:	c8 95       	lpm
    6846:	08 b9       	out	0x08, r16	; 8
    6848:	0d 91       	ld	r16, X+
    684a:	c8 95       	lpm
    684c:	08 b9       	out	0x08, r16	; 8
    684e:	0d 91       	ld	r16, X+
    6850:	c8 95       	lpm
    6852:	08 b9       	out	0x08, r16	; 8
    6854:	0d 91       	ld	r16, X+
    6856:	c8 95       	lpm
    6858:	08 b9       	out	0x08, r16	; 8
    685a:	0d 91       	ld	r16, X+
    685c:	c8 95       	lpm
    685e:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    6860:	1e f5       	brtc	.+70     	; 0x68a8 <romloop>
		rjmp ramloop
    6862:	40 c0       	rjmp	.+128    	; 0x68e4 <ramloop>

00006864 <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    6864:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    6866:	6a e3       	ldi	r22, 0x3A	; 58
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    6868:	74 e3       	ldi	r23, 0x34	; 52
		add r22,r0
    686a:	60 0d       	add	r22, r0
		adc r23,r1
    686c:	71 1d       	adc	r23, r1
		push r22
    686e:	6f 93       	push	r22
		push r23	
    6870:	7f 93       	push	r23
		ret
    6872:	08 95       	ret

00006874 <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    6874:	05 91       	lpm	r16, Z+
    6876:	00 c0       	rjmp	.+0      	; 0x6878 <rom_fine_scroll_loop+0x4>
    6878:	08 b9       	out	0x08, r16	; 8
    687a:	05 91       	lpm	r16, Z+
    687c:	00 c0       	rjmp	.+0      	; 0x687e <rom_fine_scroll_loop+0xa>
    687e:	08 b9       	out	0x08, r16	; 8
    6880:	05 91       	lpm	r16, Z+
    6882:	00 c0       	rjmp	.+0      	; 0x6884 <rom_fine_scroll_loop+0x10>
    6884:	08 b9       	out	0x08, r16	; 8
    6886:	05 91       	lpm	r16, Z+
    6888:	00 c0       	rjmp	.+0      	; 0x688a <rom_fine_scroll_loop+0x16>
    688a:	08 b9       	out	0x08, r16	; 8
    688c:	05 91       	lpm	r16, Z+
    688e:	00 c0       	rjmp	.+0      	; 0x6890 <rom_fine_scroll_loop+0x1c>
    6890:	08 b9       	out	0x08, r16	; 8
    6892:	05 91       	lpm	r16, Z+
    6894:	00 c0       	rjmp	.+0      	; 0x6896 <rom_fine_scroll_loop+0x22>
    6896:	08 b9       	out	0x08, r16	; 8
    6898:	05 91       	lpm	r16, Z+
    689a:	00 c0       	rjmp	.+0      	; 0x689c <rom_fine_scroll_loop+0x28>
    689c:	08 b9       	out	0x08, r16	; 8
    689e:	05 91       	lpm	r16, Z+
    68a0:	00 c0       	rjmp	.+0      	; 0x68a2 <rom_fine_scroll_loop+0x2e>
    68a2:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    68a4:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    68a6:	f6 f0       	brts	.+60     	; 0x68e4 <ramloop>

000068a8 <romloop>:

	
	romloop:
	    lpm r16,Z+
    68a8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    68aa:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    68ac:	28 81       	ld	r18, Y

	    lpm r16,Z+
    68ae:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    68b0:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    68b2:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    68b4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    68b6:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    68b8:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    68ba:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    68bc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    68be:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    68c0:	08 f4       	brcc	.+2      	; 0x68c4 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    68c2:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    68c4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    68c6:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    68c8:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    68ca:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    68cc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    68ce:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    68d0:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    68d2:	1a 95       	dec	r17
   
	    lpm r16,Z+
    68d4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    68d6:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    68d8:	05 91       	lpm	r16, Z+

		breq end	
    68da:	39 f1       	breq	.+78     	; 0x692a <end>
	    movw ZL,r0   	;copy next tile adress
    68dc:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    68de:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    68e0:	18 f7       	brcc	.-58     	; 0x68a8 <romloop>
	
		rjmp .
    68e2:	00 c0       	rjmp	.+0      	; 0x68e4 <ramloop>

000068e4 <ramloop>:

	ramloop:

	    ld r16,Z+
    68e4:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    68e6:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    68e8:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    68ea:	01 91       	ld	r16, Z+
		subi YL,-8   		
    68ec:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    68ee:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    68f0:	23 9f       	mul	r18, r19

	    ld r16,Z+
    68f2:	01 91       	ld	r16, Z+
		nop
    68f4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    68f6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    68f8:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    68fa:	00 c0       	rjmp	.+0      	; 0x68fc <ramloop+0x18>
   
	    ld r16,Z+
    68fc:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    68fe:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6900:	08 f0       	brcs	.+2      	; 0x6904 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6902:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6904:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6906:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6908:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    690a:	15 1e       	adc	r1, r21
		rjmp .
    690c:	00 c0       	rjmp	.+0      	; 0x690e <ramloop+0x2a>
    
		ld r16,Z+		
    690e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6910:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    6912:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    6914:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    6916:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    6918:	78 b8       	out	0x08, r7	; 8
		nop
    691a:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    691c:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    691e:	1a 95       	dec	r17
	    breq end
    6920:	21 f0       	breq	.+8      	; 0x692a <end>
	
		nop
    6922:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6924:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6926:	00 f6       	brcc	.-128    	; 0x68a8 <romloop>
		rjmp ramloop
    6928:	dd cf       	rjmp	.-70     	; 0x68e4 <ramloop>

0000692a <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    692a:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    692c:	27 f5       	brid	.+72     	; 0x6976 <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    692e:	30 f4       	brcc	.+12     	; 0x693c <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    6930:	f0 01       	movw	r30, r0

00006932 <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    6932:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    6934:	08 b9       	out	0x08, r16	; 8
		dec r14
    6936:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    6938:	e1 f7       	brne	.-8      	; 0x6932 <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    693a:	1f c0       	rjmp	.+62     	; 0x697a <end_fine_scroll_ram>

0000693c <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    693c:	f6 01       	movw	r30, r12
		nop
    693e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    6940:	98 b8       	out	0x08, r9	; 8
		dec r14
    6942:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    6944:	c9 f0       	breq	.+50     	; 0x6978 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    6946:	05 91       	lpm	r16, Z+
    6948:	08 b9       	out	0x08, r16	; 8
    694a:	ea 94       	dec	r14
    694c:	a9 f0       	breq	.+42     	; 0x6978 <end_fine_scroll_rom>
    694e:	05 91       	lpm	r16, Z+
    6950:	08 b9       	out	0x08, r16	; 8
    6952:	ea 94       	dec	r14
    6954:	89 f0       	breq	.+34     	; 0x6978 <end_fine_scroll_rom>
    6956:	05 91       	lpm	r16, Z+
    6958:	08 b9       	out	0x08, r16	; 8
    695a:	ea 94       	dec	r14
    695c:	69 f0       	breq	.+26     	; 0x6978 <end_fine_scroll_rom>
    695e:	05 91       	lpm	r16, Z+
    6960:	08 b9       	out	0x08, r16	; 8
    6962:	ea 94       	dec	r14
    6964:	49 f0       	breq	.+18     	; 0x6978 <end_fine_scroll_rom>
    6966:	05 91       	lpm	r16, Z+
    6968:	08 b9       	out	0x08, r16	; 8
    696a:	ea 94       	dec	r14
    696c:	29 f0       	breq	.+10     	; 0x6978 <end_fine_scroll_rom>
    696e:	05 91       	lpm	r16, Z+
    6970:	08 b9       	out	0x08, r16	; 8
    6972:	ea 94       	dec	r14
    6974:	09 f0       	breq	.+2      	; 0x6978 <end_fine_scroll_rom>

00006976 <end_fine_scroll>:
	...

00006978 <end_fine_scroll_rom>:
	...

0000697a <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    697a:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    697c:	08 b9       	out	0x08, r16	; 8

		pop r6
    697e:	6f 90       	pop	r6
		pop r7
    6980:	7f 90       	pop	r7
		pop r9
    6982:	9f 90       	pop	r9
		pop r12
    6984:	cf 90       	pop	r12
		pop r13
    6986:	df 90       	pop	r13
		pop r19
    6988:	3f 91       	pop	r19
		pop r22
    698a:	6f 91       	pop	r22
		pop r23
    698c:	7f 91       	pop	r23
		pop YH
    698e:	df 91       	pop	r29
		pop YL
    6990:	cf 91       	pop	r28

		ret
    6992:	08 95       	ret

00006994 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6994:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6996:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    699a:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    699e:	82 9f       	mul	r24, r18
	add ZL,r0
    69a0:	e0 0d       	add	r30, r0
	adc ZH,r1
    69a2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    69a4:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    69a6:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    69a8:	62 9f       	mul	r22, r18
	add XL,r0
    69aa:	a0 0d       	add	r26, r0
	adc XH,r1
    69ac:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    69ae:	15 90       	lpm	r1, Z+
    69b0:	1d 92       	st	X+, r1
    69b2:	15 90       	lpm	r1, Z+
    69b4:	1d 92       	st	X+, r1
    69b6:	15 90       	lpm	r1, Z+
    69b8:	1d 92       	st	X+, r1
    69ba:	15 90       	lpm	r1, Z+
    69bc:	1d 92       	st	X+, r1
    69be:	15 90       	lpm	r1, Z+
    69c0:	1d 92       	st	X+, r1
    69c2:	15 90       	lpm	r1, Z+
    69c4:	1d 92       	st	X+, r1
    69c6:	15 90       	lpm	r1, Z+
    69c8:	1d 92       	st	X+, r1
    69ca:	15 90       	lpm	r1, Z+
    69cc:	1d 92       	st	X+, r1
    69ce:	15 90       	lpm	r1, Z+
    69d0:	1d 92       	st	X+, r1
    69d2:	15 90       	lpm	r1, Z+
    69d4:	1d 92       	st	X+, r1
    69d6:	15 90       	lpm	r1, Z+
    69d8:	1d 92       	st	X+, r1
    69da:	15 90       	lpm	r1, Z+
    69dc:	1d 92       	st	X+, r1
    69de:	15 90       	lpm	r1, Z+
    69e0:	1d 92       	st	X+, r1
    69e2:	15 90       	lpm	r1, Z+
    69e4:	1d 92       	st	X+, r1
    69e6:	15 90       	lpm	r1, Z+
    69e8:	1d 92       	st	X+, r1
    69ea:	15 90       	lpm	r1, Z+
    69ec:	1d 92       	st	X+, r1
    69ee:	15 90       	lpm	r1, Z+
    69f0:	1d 92       	st	X+, r1
    69f2:	15 90       	lpm	r1, Z+
    69f4:	1d 92       	st	X+, r1
    69f6:	15 90       	lpm	r1, Z+
    69f8:	1d 92       	st	X+, r1
    69fa:	15 90       	lpm	r1, Z+
    69fc:	1d 92       	st	X+, r1
    69fe:	15 90       	lpm	r1, Z+
    6a00:	1d 92       	st	X+, r1
    6a02:	15 90       	lpm	r1, Z+
    6a04:	1d 92       	st	X+, r1
    6a06:	15 90       	lpm	r1, Z+
    6a08:	1d 92       	st	X+, r1
    6a0a:	15 90       	lpm	r1, Z+
    6a0c:	1d 92       	st	X+, r1
    6a0e:	15 90       	lpm	r1, Z+
    6a10:	1d 92       	st	X+, r1
    6a12:	15 90       	lpm	r1, Z+
    6a14:	1d 92       	st	X+, r1
    6a16:	15 90       	lpm	r1, Z+
    6a18:	1d 92       	st	X+, r1
    6a1a:	15 90       	lpm	r1, Z+
    6a1c:	1d 92       	st	X+, r1
    6a1e:	15 90       	lpm	r1, Z+
    6a20:	1d 92       	st	X+, r1
    6a22:	15 90       	lpm	r1, Z+
    6a24:	1d 92       	st	X+, r1
    6a26:	15 90       	lpm	r1, Z+
    6a28:	1d 92       	st	X+, r1
    6a2a:	15 90       	lpm	r1, Z+
    6a2c:	1d 92       	st	X+, r1
    6a2e:	15 90       	lpm	r1, Z+
    6a30:	1d 92       	st	X+, r1
    6a32:	15 90       	lpm	r1, Z+
    6a34:	1d 92       	st	X+, r1
    6a36:	15 90       	lpm	r1, Z+
    6a38:	1d 92       	st	X+, r1
    6a3a:	15 90       	lpm	r1, Z+
    6a3c:	1d 92       	st	X+, r1
    6a3e:	15 90       	lpm	r1, Z+
    6a40:	1d 92       	st	X+, r1
    6a42:	15 90       	lpm	r1, Z+
    6a44:	1d 92       	st	X+, r1
    6a46:	15 90       	lpm	r1, Z+
    6a48:	1d 92       	st	X+, r1
    6a4a:	15 90       	lpm	r1, Z+
    6a4c:	1d 92       	st	X+, r1
    6a4e:	15 90       	lpm	r1, Z+
    6a50:	1d 92       	st	X+, r1
    6a52:	15 90       	lpm	r1, Z+
    6a54:	1d 92       	st	X+, r1
    6a56:	15 90       	lpm	r1, Z+
    6a58:	1d 92       	st	X+, r1
    6a5a:	15 90       	lpm	r1, Z+
    6a5c:	1d 92       	st	X+, r1
    6a5e:	15 90       	lpm	r1, Z+
    6a60:	1d 92       	st	X+, r1
    6a62:	15 90       	lpm	r1, Z+
    6a64:	1d 92       	st	X+, r1
    6a66:	15 90       	lpm	r1, Z+
    6a68:	1d 92       	st	X+, r1
    6a6a:	15 90       	lpm	r1, Z+
    6a6c:	1d 92       	st	X+, r1
    6a6e:	15 90       	lpm	r1, Z+
    6a70:	1d 92       	st	X+, r1
    6a72:	15 90       	lpm	r1, Z+
    6a74:	1d 92       	st	X+, r1
    6a76:	15 90       	lpm	r1, Z+
    6a78:	1d 92       	st	X+, r1
    6a7a:	15 90       	lpm	r1, Z+
    6a7c:	1d 92       	st	X+, r1
    6a7e:	15 90       	lpm	r1, Z+
    6a80:	1d 92       	st	X+, r1
    6a82:	15 90       	lpm	r1, Z+
    6a84:	1d 92       	st	X+, r1
    6a86:	15 90       	lpm	r1, Z+
    6a88:	1d 92       	st	X+, r1
    6a8a:	15 90       	lpm	r1, Z+
    6a8c:	1d 92       	st	X+, r1
    6a8e:	15 90       	lpm	r1, Z+
    6a90:	1d 92       	st	X+, r1
    6a92:	15 90       	lpm	r1, Z+
    6a94:	1d 92       	st	X+, r1
    6a96:	15 90       	lpm	r1, Z+
    6a98:	1d 92       	st	X+, r1
    6a9a:	15 90       	lpm	r1, Z+
    6a9c:	1d 92       	st	X+, r1
    6a9e:	15 90       	lpm	r1, Z+
    6aa0:	1d 92       	st	X+, r1
    6aa2:	15 90       	lpm	r1, Z+
    6aa4:	1d 92       	st	X+, r1
    6aa6:	15 90       	lpm	r1, Z+
    6aa8:	1d 92       	st	X+, r1
    6aaa:	15 90       	lpm	r1, Z+
    6aac:	1d 92       	st	X+, r1
	clr r1
    6aae:	11 24       	eor	r1, r1
	ret
    6ab0:	08 95       	ret

00006ab2 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6ab2:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6ab4:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    6ab6:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    6ab8:	82 9f       	mul	r24, r18
	add ZL,r0
    6aba:	e0 0d       	add	r30, r0
	adc ZH,r1
    6abc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6abe:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6ac0:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6ac2:	62 9f       	mul	r22, r18
	add XL,r0
    6ac4:	a0 0d       	add	r26, r0
	adc XH,r1
    6ac6:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6ac8:	11 90       	ld	r1, Z+
    6aca:	1d 92       	st	X+, r1
    6acc:	11 90       	ld	r1, Z+
    6ace:	1d 92       	st	X+, r1
    6ad0:	11 90       	ld	r1, Z+
    6ad2:	1d 92       	st	X+, r1
    6ad4:	11 90       	ld	r1, Z+
    6ad6:	1d 92       	st	X+, r1
    6ad8:	11 90       	ld	r1, Z+
    6ada:	1d 92       	st	X+, r1
    6adc:	11 90       	ld	r1, Z+
    6ade:	1d 92       	st	X+, r1
    6ae0:	11 90       	ld	r1, Z+
    6ae2:	1d 92       	st	X+, r1
    6ae4:	11 90       	ld	r1, Z+
    6ae6:	1d 92       	st	X+, r1
    6ae8:	11 90       	ld	r1, Z+
    6aea:	1d 92       	st	X+, r1
    6aec:	11 90       	ld	r1, Z+
    6aee:	1d 92       	st	X+, r1
    6af0:	11 90       	ld	r1, Z+
    6af2:	1d 92       	st	X+, r1
    6af4:	11 90       	ld	r1, Z+
    6af6:	1d 92       	st	X+, r1
    6af8:	11 90       	ld	r1, Z+
    6afa:	1d 92       	st	X+, r1
    6afc:	11 90       	ld	r1, Z+
    6afe:	1d 92       	st	X+, r1
    6b00:	11 90       	ld	r1, Z+
    6b02:	1d 92       	st	X+, r1
    6b04:	11 90       	ld	r1, Z+
    6b06:	1d 92       	st	X+, r1
    6b08:	11 90       	ld	r1, Z+
    6b0a:	1d 92       	st	X+, r1
    6b0c:	11 90       	ld	r1, Z+
    6b0e:	1d 92       	st	X+, r1
    6b10:	11 90       	ld	r1, Z+
    6b12:	1d 92       	st	X+, r1
    6b14:	11 90       	ld	r1, Z+
    6b16:	1d 92       	st	X+, r1
    6b18:	11 90       	ld	r1, Z+
    6b1a:	1d 92       	st	X+, r1
    6b1c:	11 90       	ld	r1, Z+
    6b1e:	1d 92       	st	X+, r1
    6b20:	11 90       	ld	r1, Z+
    6b22:	1d 92       	st	X+, r1
    6b24:	11 90       	ld	r1, Z+
    6b26:	1d 92       	st	X+, r1
    6b28:	11 90       	ld	r1, Z+
    6b2a:	1d 92       	st	X+, r1
    6b2c:	11 90       	ld	r1, Z+
    6b2e:	1d 92       	st	X+, r1
    6b30:	11 90       	ld	r1, Z+
    6b32:	1d 92       	st	X+, r1
    6b34:	11 90       	ld	r1, Z+
    6b36:	1d 92       	st	X+, r1
    6b38:	11 90       	ld	r1, Z+
    6b3a:	1d 92       	st	X+, r1
    6b3c:	11 90       	ld	r1, Z+
    6b3e:	1d 92       	st	X+, r1
    6b40:	11 90       	ld	r1, Z+
    6b42:	1d 92       	st	X+, r1
    6b44:	11 90       	ld	r1, Z+
    6b46:	1d 92       	st	X+, r1
    6b48:	11 90       	ld	r1, Z+
    6b4a:	1d 92       	st	X+, r1
    6b4c:	11 90       	ld	r1, Z+
    6b4e:	1d 92       	st	X+, r1
    6b50:	11 90       	ld	r1, Z+
    6b52:	1d 92       	st	X+, r1
    6b54:	11 90       	ld	r1, Z+
    6b56:	1d 92       	st	X+, r1
    6b58:	11 90       	ld	r1, Z+
    6b5a:	1d 92       	st	X+, r1
    6b5c:	11 90       	ld	r1, Z+
    6b5e:	1d 92       	st	X+, r1
    6b60:	11 90       	ld	r1, Z+
    6b62:	1d 92       	st	X+, r1
    6b64:	11 90       	ld	r1, Z+
    6b66:	1d 92       	st	X+, r1
    6b68:	11 90       	ld	r1, Z+
    6b6a:	1d 92       	st	X+, r1
    6b6c:	11 90       	ld	r1, Z+
    6b6e:	1d 92       	st	X+, r1
    6b70:	11 90       	ld	r1, Z+
    6b72:	1d 92       	st	X+, r1
    6b74:	11 90       	ld	r1, Z+
    6b76:	1d 92       	st	X+, r1
    6b78:	11 90       	ld	r1, Z+
    6b7a:	1d 92       	st	X+, r1
    6b7c:	11 90       	ld	r1, Z+
    6b7e:	1d 92       	st	X+, r1
    6b80:	11 90       	ld	r1, Z+
    6b82:	1d 92       	st	X+, r1
    6b84:	11 90       	ld	r1, Z+
    6b86:	1d 92       	st	X+, r1
    6b88:	11 90       	ld	r1, Z+
    6b8a:	1d 92       	st	X+, r1
    6b8c:	11 90       	ld	r1, Z+
    6b8e:	1d 92       	st	X+, r1
    6b90:	11 90       	ld	r1, Z+
    6b92:	1d 92       	st	X+, r1
    6b94:	11 90       	ld	r1, Z+
    6b96:	1d 92       	st	X+, r1
    6b98:	11 90       	ld	r1, Z+
    6b9a:	1d 92       	st	X+, r1
    6b9c:	11 90       	ld	r1, Z+
    6b9e:	1d 92       	st	X+, r1
    6ba0:	11 90       	ld	r1, Z+
    6ba2:	1d 92       	st	X+, r1
    6ba4:	11 90       	ld	r1, Z+
    6ba6:	1d 92       	st	X+, r1
    6ba8:	11 90       	ld	r1, Z+
    6baa:	1d 92       	st	X+, r1
    6bac:	11 90       	ld	r1, Z+
    6bae:	1d 92       	st	X+, r1
    6bb0:	11 90       	ld	r1, Z+
    6bb2:	1d 92       	st	X+, r1
    6bb4:	11 90       	ld	r1, Z+
    6bb6:	1d 92       	st	X+, r1
    6bb8:	11 90       	ld	r1, Z+
    6bba:	1d 92       	st	X+, r1
    6bbc:	11 90       	ld	r1, Z+
    6bbe:	1d 92       	st	X+, r1
    6bc0:	11 90       	ld	r1, Z+
    6bc2:	1d 92       	st	X+, r1
    6bc4:	11 90       	ld	r1, Z+
    6bc6:	1d 92       	st	X+, r1
	clr r1
    6bc8:	11 24       	eor	r1, r1
	ret
    6bca:	08 95       	ret

00006bcc <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6bcc:	0f 93       	push	r16
	push r17
    6bce:	1f 93       	push	r17
	push YL
    6bd0:	cf 93       	push	r28
	push YH
    6bd2:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6bd4:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6bd6:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6bd8:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    6bda:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6bdc:	e0 0d       	add	r30, r0
	adc ZH,r1
    6bde:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6be0:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6be2:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6be4:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6be6:	8e 9f       	mul	r24, r30
	movw r26,r0
    6be8:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6bea:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6bec:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6bee:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    6bf0:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6bf2:	00 24       	eor	r0, r0
	add YL,r1
    6bf4:	c1 0d       	add	r28, r1
	adc YH,r0		
    6bf6:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6bf8:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6bfa:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6bfc:	ea 0f       	add	r30, r26
	adc ZH,r27
    6bfe:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6c00:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    6c02:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6c04:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6c06:	69 9f       	mul	r22, r25
	add XL,r0
    6c08:	a0 0d       	add	r26, r0
	adc XH,r1
    6c0a:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6c0c:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6c0e:	dd 27       	eor	r29, r29

	cpi r20,0	
    6c10:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6c12:	51 f4       	brne	.+20     	; 0x6c28 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6c14:	a2 0f       	add	r26, r18
	adc XH,r1
    6c16:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6c18:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6c1a:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6c1c:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6c1e:	11 c0       	rjmp	.+34     	; 0x6c42 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6c20:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6c22:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6c24:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6c26:	0d c0       	rjmp	.+26     	; 0x6c42 <x_check_end>

00006c28 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6c28:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6c2a:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6c2c:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6c2e:	04 c0       	rjmp	.+8      	; 0x6c38 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6c30:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6c32:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6c34:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6c36:	05 c0       	rjmp	.+10     	; 0x6c42 <x_check_end>

00006c38 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6c38:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6c3a:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6c3c:	e2 0f       	add	r30, r18
	adc ZH,r1
    6c3e:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6c40:	31 97       	sbiw	r30, 0x01	; 1

00006c42 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6c42:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6c44:	51 f4       	brne	.+20     	; 0x6c5a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6c46:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6c48:	93 9f       	mul	r25, r19
	add XL,r0
    6c4a:	a0 0d       	add	r26, r0
	adc XH,r1
    6c4c:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6c4e:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6c50:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6c52:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6c54:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6c56:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6c58:	0a c0       	rjmp	.+20     	; 0x6c6e <y_check_end>

00006c5a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6c5a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6c5c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6c5e:	63 2f       	mov	r22, r19
	dec r22
    6c60:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6c62:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6c64:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6c66:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6c68:	56 9f       	mul	r21, r22
	add ZL,r0
    6c6a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6c6c:	f1 1d       	adc	r31, r1

00006c6e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6c6e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6c70:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6c72:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6c74:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6c76:	00 ff       	sbrs	r16, 0
	clr r23
    6c78:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6c7a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6c7c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6c7e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6c80:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6c82:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6c84:	59 1b       	sub	r21, r25

00006c86 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6c86:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6c88:	48 1b       	sub	r20, r24

00006c8a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6c8a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6c8c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6c8e:	2c 93       	st	X, r18
	adiw XL,1
    6c90:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6c92:	e6 0f       	add	r30, r22
	adc ZH,r23
    6c94:	f7 1f       	adc	r31, r23
	dec r20
    6c96:	4a 95       	dec	r20
	brne x_loop
    6c98:	c1 f7       	brne	.-16     	; 0x6c8a <x_loop>

	add ZL,YL		;src+=srcXdiff
    6c9a:	ec 0f       	add	r30, r28
	adc ZH,YH
    6c9c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6c9e:	a8 0f       	add	r26, r24
	adc XH,r1
    6ca0:	b1 1d       	adc	r27, r1
	dec r21
    6ca2:	5a 95       	dec	r21
	brne y_loop
    6ca4:	81 f7       	brne	.-32     	; 0x6c86 <y_loop>


	pop YH
    6ca6:	df 91       	pop	r29
	pop YL
    6ca8:	cf 91       	pop	r28
	pop r17
    6caa:	1f 91       	pop	r17
	pop r16
    6cac:	0f 91       	pop	r16
	ret
    6cae:	08 95       	ret

00006cb0 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6cb0:	0f 92       	push	r0
	push r1
    6cb2:	1f 92       	push	r1
	push ZL;2
    6cb4:	ef 93       	push	r30
	push ZH;2
    6cb6:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6cb8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6cba:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6cbc:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6cc0:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6cc2:	f1 e0       	ldi	r31, 0x01	; 1

00006cc4 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6cc4:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6cc6:	00 f0       	brcs	.+0      	; 0x6cc8 <latency_loop+0x4>
	inc ZH
    6cc8:	f3 95       	inc	r31
	cpi ZH,10
    6cca:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6ccc:	d8 f3       	brcs	.-10     	; 0x6cc4 <latency_loop>
	jmp .
    6cce:	0c 94 69 36 	jmp	0x6cd2	; 0x6cd2 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6cd2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6cd6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6cd8:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    6cdc:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    6ce0:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6ce2:	57 c0       	rjmp	.+174    	; 0x6d92 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6ce4:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6ce6:	98 f0       	brcs	.+38     	; 0x6d0e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6ce8:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6cea:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6cee:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6cf0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6cf4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6cf6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6cf8:	26 f4       	brtc	.+8      	; 0x6d02 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6cfa:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6cfc:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <update_sound>
	rjmp sync_end
    6d00:	b7 c0       	rjmp	.+366    	; 0x6e70 <sync_end>

00006d02 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6d02:	e5 e1       	ldi	r30, 0x15	; 21
    6d04:	ea 95       	dec	r30
    6d06:	f1 f7       	brne	.-4      	; 0x6d04 <sync_pre_eq_no_sound_update+0x2>
    6d08:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6d0a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6d0c:	b1 c0       	rjmp	.+354    	; 0x6e70 <sync_end>

00006d0e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6d0e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6d10:	38 f1       	brcs	.+78     	; 0x6d60 <sync_post_eq>

	rjmp .
    6d12:	00 c0       	rjmp	.+0      	; 0x6d14 <sync_eq+0x6>
	rjmp .
    6d14:	00 c0       	rjmp	.+0      	; 0x6d16 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d16:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6d18:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6d1a:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6d1c:	16 f4       	brtc	.+4      	; 0x6d22 <sync_eq_skip>
	
	call update_sound
    6d1e:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <update_sound>

00006d22 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6d22:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6d24:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6d28:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6d2a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6d2e:	a0 c0       	rjmp	.+320    	; 0x6e70 <sync_end>

00006d30 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6d30:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6d32:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6d34:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6d36:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6d3a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6d3c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6d3e:	00 f0       	brcs	.+0      	; 0x6d40 <__vector_14+0x10>

	cpi ZL,2
    6d40:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6d42:	00 f0       	brcs	.+0      	; 0x6d44 <__vector_14+0x14>

	cpi ZL,3
    6d44:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6d46:	00 f0       	brcs	.+0      	; 0x6d48 <__vector_14+0x18>

	cpi ZL,4
    6d48:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6d4a:	00 f0       	brcs	.+0      	; 0x6d4c <__vector_14+0x1c>

	cpi ZL,5
    6d4c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6d4e:	00 f0       	brcs	.+0      	; 0x6d50 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6d50:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6d52:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6d54:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6d58:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6d5a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6d5c:	ef 91       	pop	r30
	reti
    6d5e:	18 95       	reti

00006d60 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6d60:	00 c0       	rjmp	.+0      	; 0x6d62 <sync_post_eq+0x2>

	bst ZL,0
    6d62:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d64:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6d66:	26 f4       	brtc	.+8      	; 0x6d70 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6d68:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6d6a:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <update_sound>
	rjmp sync_pre_eq_cont
    6d6e:	05 c0       	rjmp	.+10     	; 0x6d7a <sync_pre_eq_cont>

00006d70 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6d70:	e5 e1       	ldi	r30, 0x15	; 21
    6d72:	ea 95       	dec	r30
    6d74:	f1 f7       	brne	.-4      	; 0x6d72 <sync_post_eq_no_sound_update+0x2>
    6d76:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6d78:	28 9a       	sbi	0x05, 0	; 5

00006d7a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6d7a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    6d7e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6d80:	09 f0       	breq	.+2      	; 0x6d84 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6d82:	76 c0       	rjmp	.+236    	; 0x6e70 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6d84:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6d86:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    6d8a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6d8c:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    6d90:	6f c0       	rjmp	.+222    	; 0x6e70 <sync_end>

00006d92 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6d92:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6d94:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6d98:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6d9a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6d9e:	00 c0       	rjmp	.+0      	; 0x6da0 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6da0:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6da2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6da4:	00 c0       	rjmp	.+0      	; 0x6da6 <sync_hsync+0x14>
	call update_sound
    6da6:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6daa:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6dac:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    6db0:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6db2:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    6db6:	ef 17       	cp	r30, r31
	brsh no_render
    6db8:	d0 f4       	brcc	.+52     	; 0x6dee <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6dba:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6dbc:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    6dc0:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6dc2:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    6dc6:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6dc8:	ef 17       	cp	r30, r31
	brlo no_render
    6dca:	88 f0       	brcs	.+34     	; 0x6dee <no_render>

	;push r1-r29
	ldi ZL,29
    6dcc:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6dce:	ff 27       	eor	r31, r31

00006dd0 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6dd0:	00 80       	ld	r0, Z
	push r0
    6dd2:	0f 92       	push	r0
	dec ZL
    6dd4:	ea 95       	dec	r30
	brne push_loop	
    6dd6:	e1 f7       	brne	.-8      	; 0x6dd0 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6dd8:	06 e0       	ldi	r16, 0x06	; 6
    6dda:	0a 95       	dec	r16
    6ddc:	f1 f7       	brne	.-4      	; 0x6dda <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6dde:	0e 94 16 33 	call	0x662c	; 0x662c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6de2:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6de4:	ff 27       	eor	r31, r31

00006de6 <pop_loop>:
pop_loop:
	pop r0
    6de6:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6de8:	01 92       	st	Z+, r0
	cpi ZL,30
    6dea:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6dec:	e0 f3       	brcs	.-8      	; 0x6de6 <pop_loop>

00006dee <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6dee:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    6df2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6df4:	09 f0       	breq	.+2      	; 0x6df8 <no_render+0xa>
	rjmp sync_end
    6df6:	3c c0       	rjmp	.+120    	; 0x6e70 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6df8:	2f 93       	push	r18
	push r19
    6dfa:	3f 93       	push	r19
	push r20
    6dfc:	4f 93       	push	r20
	push r21
    6dfe:	5f 93       	push	r21
	push r22
    6e00:	6f 93       	push	r22
	push r23
    6e02:	7f 93       	push	r23
	push r24
    6e04:	8f 93       	push	r24
	push r25
    6e06:	9f 93       	push	r25
	push r26
    6e08:	af 93       	push	r26
	push r27
    6e0a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6e0c:	78 94       	sei
	clr r1
    6e0e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6e10:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6e12:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6e16:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6e18:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6e1c:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    6e20:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    6e24:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6e26:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    6e2a:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6e2e:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    6e32:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    6e36:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e38:	f1 05       	cpc	r31, r1
	breq .+2 
    6e3a:	09 f0       	breq	.+2      	; 0x6e3e <no_render+0x50>
	icall
    6e3c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6e3e:	0e 94 ef 38 	call	0x71de	; 0x71de <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6e42:	0e 94 c2 46 	call	0x8d84	; 0x8d84 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6e46:	0e 94 4a 37 	call	0x6e94	; 0x6e94 <process_music>
	clr r1
    6e4a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6e4c:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    6e50:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    6e54:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e56:	f1 05       	cpc	r31, r1
	breq .+2 
    6e58:	09 f0       	breq	.+2      	; 0x6e5c <no_render+0x6e>
	icall
    6e5a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6e5c:	bf 91       	pop	r27
	pop r26
    6e5e:	af 91       	pop	r26
	pop r25
    6e60:	9f 91       	pop	r25
	pop r24
    6e62:	8f 91       	pop	r24
	pop r23
    6e64:	7f 91       	pop	r23
	pop r22
    6e66:	6f 91       	pop	r22
	pop r21
    6e68:	5f 91       	pop	r21
	pop r20
    6e6a:	4f 91       	pop	r20
	pop r19
    6e6c:	3f 91       	pop	r19
	pop r18
    6e6e:	2f 91       	pop	r18

00006e70 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6e70:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6e72:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6e74:	ff 91       	pop	r31
	pop ZL
    6e76:	ef 91       	pop	r30
	pop r1
    6e78:	1f 90       	pop	r1
	pop r0
    6e7a:	0f 90       	pop	r0
	reti
    6e7c:	18 95       	reti

00006e7e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6e7e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6e80:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6e82:	00 c0       	rjmp	.+0      	; 0x6e84 <hsync_pulse+0x6>
	call update_sound
    6e84:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <update_sound>

	lds ZL,sync_pulse
    6e88:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    6e8c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6e8e:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    6e92:	08 95       	ret

00006e94 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6e94:	e0 91 cd 0c 	lds	r30, 0x0CCD
	sbrc ZL,0
    6e98:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6e9a:	0e 94 15 3c 	call	0x782a	; 0x782a <ProcessMusic>
#endif

	ret
    6e9e:	08 95       	ret

00006ea0 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    6ea0:	0f 93       	push	r16
	push r17
    6ea2:	1f 93       	push	r17
	push r18
    6ea4:	2f 93       	push	r18
	push r28
    6ea6:	cf 93       	push	r28
	push r29
    6ea8:	df 93       	push	r29

	mov r18,ZL
    6eaa:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6eac:	00 91 cf 0c 	lds	r16, 0x0CCF
	lds r17,tr1_pos_frac
    6eb0:	10 91 d1 0c 	lds	r17, 0x0CD1
	add	r17,r16	;add step to fractional part of sample pos
    6eb4:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6eb6:	00 91 d0 0c 	lds	r16, 0x0CD0
	lds ZL,tr1_pos_lo
    6eba:	e0 91 d2 0c 	lds	r30, 0x0CD2
	lds ZH,tr1_pos_hi 
    6ebe:	f0 91 d3 0c 	lds	r31, 0x0CD3
	adc ZL,r16	;add step to low byte of sample pos
    6ec2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6ec4:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6ec6:	e0 93 d2 0c 	sts	0x0CD2, r30
	sts tr1_pos_frac,r17
    6eca:	10 93 d1 0c 	sts	0x0CD1, r17
	lds r17,tr1_vol
    6ece:	10 91 ce 0c 	lds	r17, 0x0CCE
	mulsu r16,r17;(sample*mixing vol)
    6ed2:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6ed4:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6ed6:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6ed8:	d0 2d       	mov	r29, r0
	nop
    6eda:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6edc:	00 91 d5 0c 	lds	r16, 0x0CD5
	lds r17,tr2_pos_frac
    6ee0:	10 91 d7 0c 	lds	r17, 0x0CD7
	add	r17,r16	;add step to fractional part of sample pos
    6ee4:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6ee6:	00 91 d6 0c 	lds	r16, 0x0CD6
	lds ZL,tr2_pos_lo
    6eea:	e0 91 d8 0c 	lds	r30, 0x0CD8
	lds ZH,tr2_pos_hi 
    6eee:	f0 91 d9 0c 	lds	r31, 0x0CD9
	adc ZL,r16	;add step to low byte of sample pos
    6ef2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6ef4:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6ef6:	e0 93 d8 0c 	sts	0x0CD8, r30
	sts tr2_pos_frac,r17
    6efa:	10 93 d7 0c 	sts	0x0CD7, r17
	lds r17,tr2_vol
    6efe:	10 91 d4 0c 	lds	r17, 0x0CD4

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6f02:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6f04:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6f06:	20 ff       	sbrs	r18, 0
	rjmp .
    6f08:	00 c0       	rjmp	.+0      	; 0x6f0a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6f0a:	01 03       	mulsu	r16, r17
	clr r0
    6f0c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6f0e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f10:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6f12:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6f14:	00 91 db 0c 	lds	r16, 0x0CDB
	lds r17,tr3_pos_frac
    6f18:	10 91 dd 0c 	lds	r17, 0x0CDD
	add	r17,r16				;add step to fractional part of sample pos
    6f1c:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6f1e:	00 91 dc 0c 	lds	r16, 0x0CDC
	lds ZL,tr3_pos_lo
    6f22:	e0 91 de 0c 	lds	r30, 0x0CDE
	lds ZH,tr3_pos_hi 
    6f26:	f0 91 df 0c 	lds	r31, 0x0CDF
	adc ZL,r16				;add step to low byte of sample pos
    6f2a:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6f2c:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6f2e:	e0 93 de 0c 	sts	0x0CDE, r30
	sts tr3_pos_frac,r17
    6f32:	10 93 dd 0c 	sts	0x0CDD, r17
	lds r17,tr3_vol
    6f36:	10 91 da 0c 	lds	r17, 0x0CDA
	mulsu r16,r17			;(sample*mixing vol)
    6f3a:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6f3c:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6f3e:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6f40:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6f42:	00 91 e2 0c 	lds	r16, 0x0CE2
	lds r17,tr4_barrel_hi
    6f46:	10 91 e3 0c 	lds	r17, 0x0CE3
	lds ZL,tr4_divider
    6f4a:	e0 91 e4 0c 	lds	r30, 0x0CE4
	dec ZL	
    6f4e:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6f50:	92 f4       	brpl	.+36     	; 0x6f76 <ch4_no_shift>

	lds ZH,tr4_params
    6f52:	f0 91 e1 0c 	lds	r31, 0x0CE1
	mov ZL,ZH
    6f56:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6f58:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6f5a:	00 2e       	mov	r0, r16
	lsr r0
    6f5c:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6f5e:	00 26       	eor	r0, r16
	bst r0,0
    6f60:	00 fa       	bst	r0, 0
	lsr r17
    6f62:	16 95       	lsr	r17
	ror r16
    6f64:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6f66:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6f68:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6f6a:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6f6c:	00 93 e2 0c 	sts	0x0CE2, r16
	sts tr4_barrel_hi,r17
    6f70:	10 93 e3 0c 	sts	0x0CE3, r17

	rjmp ch4_end
    6f74:	03 c0       	rjmp	.+6      	; 0x6f7c <ch4_end>

00006f76 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6f76:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6f78:	1a 95       	dec	r17
	brne .-4
    6f7a:	f1 f7       	brne	.-4      	; 0x6f78 <ch4_no_shift+0x2>

00006f7c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6f7c:	e0 93 e4 0c 	sts	0x0CE4, r30
	ldi r17,0x80 ;-128
    6f80:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6f82:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6f84:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6f86:	21 ff       	sbrs	r18, 1
	rjmp .
    6f88:	00 c0       	rjmp	.+0      	; 0x6f8a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6f8a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6f8c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6f8e:	00 91 e0 0c 	lds	r16, 0x0CE0

	mulsu r17,r16;(sample*mixing vol)
    6f92:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6f94:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f96:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6f98:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6f9a:	00 91 e9 0c 	lds	r16, 0x0CE9
	lds r17,tr5_step_lo 
    6f9e:	10 91 e7 0c 	lds	r17, 0x0CE7
	add r16,r17
    6fa2:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6fa4:	00 93 e9 0c 	sts	0x0CE9, r16

	;add lo
	lds ZL,tr5_pos_lo
    6fa8:	e0 91 ea 0c 	lds	r30, 0x0CEA
	lds r17,tr5_step_hi 
    6fac:	10 91 e8 0c 	lds	r17, 0x0CE8
	adc ZL,r17
    6fb0:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6fb2:	f0 91 eb 0c 	lds	r31, 0x0CEB
	ldi r16,0
    6fb6:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6fb8:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6fba:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6fbc:	00 90 ec 0c 	lds	r0, 0x0CEC
	lds r1,tr5_loop_len_hi	
    6fc0:	10 90 ed 0c 	lds	r1, 0x0CED
	sub r16,r0
    6fc4:	00 19       	sub	r16, r0
	sbc r17,r1
    6fc6:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6fc8:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_end_hi
    6fcc:	10 90 ef 0c 	lds	r1, 0x0CEF

	cp ZL,r0
    6fd0:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6fd2:	f1 05       	cpc	r31, r1
	brlo .+2
    6fd4:	08 f0       	brcs	.+2      	; 0x6fd8 <ch4_end+0x5c>
	movw ZL,r16
    6fd6:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6fd8:	e0 93 ea 0c 	sts	0x0CEA, r30
	sts tr5_pos_hi,ZH
    6fdc:	f0 93 eb 0c 	sts	0x0CEB, r31

	lpm	r16,Z	;load sample
    6fe0:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6fe2:	10 91 e6 0c 	lds	r17, 0x0CE6

	mulsu r16,r17;(sample*mixing vol)
    6fe6:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6fe8:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6fea:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6fec:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6fee:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6ff0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6ff2:	d0 05       	cpc	r29, r0
	brlt .+2
    6ff4:	0c f0       	brlt	.+2      	; 0x6ff8 <ch4_end+0x7c>
	ldi r28,127
    6ff6:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6ff8:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6ffa:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6ffc:	d0 05       	cpc	r29, r0
	brge .+2
    6ffe:	0c f4       	brge	.+2      	; 0x7002 <ch4_end+0x86>
	ldi r28,-128
    7000:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7002:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7004:	c0 93 b3 00 	sts	0x00B3, r28

00007008 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7008:	df 91       	pop	r29
	pop r28
    700a:	cf 91       	pop	r28
	pop r18
    700c:	2f 91       	pop	r18
	pop r17
    700e:	1f 91       	pop	r17
	pop r16
    7010:	0f 91       	pop	r16
	
	ret
    7012:	08 95       	ret

00007014 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7014:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    7018:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    701c:	08 95       	ret

0000701e <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    701e:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7020:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7022:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7024:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7026:	6c e1       	ldi	r22, 0x1C	; 28

00007028 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7028:	6d 93       	st	X+, r22
	sbiw r30,1
    702a:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    702c:	e9 f7       	brne	.-6      	; 0x7028 <fill_vram_loop>

	clr r1
    702e:	11 24       	eor	r1, r1

	ret
    7030:	08 95       	ret

00007032 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7032:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7034:	76 2f       	mov	r23, r22
	lsr r22
    7036:	66 95       	lsr	r22
	lsr r22
    7038:	66 95       	lsr	r22
	lsr r22			;y>>3
    703a:	66 95       	lsr	r22
	ldi r18,8		
    703c:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    703e:	82 9f       	mul	r24, r18
	movw XL,r0
    7040:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7042:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7044:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7046:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7048:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    704a:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    704c:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    704e:	4c 93       	st	X, r20

	clr r1
    7050:	11 24       	eor	r1, r1

	ret
    7052:	08 95       	ret

00007054 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7054:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    7058:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    705c:	08 95       	ret

0000705e <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    705e:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    7062:	81 70       	andi	r24, 0x01	; 1
	ret
    7064:	08 95       	ret

00007066 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7066:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    706a:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    706c:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    7070:	08 95       	ret

00007072 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7072:	88 23       	and	r24, r24
	brne rj_p2
    7074:	29 f4       	brne	.+10     	; 0x7080 <rj_p2>
		
	lds r24,joypad1_status_lo
    7076:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    707a:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    707e:	08 95       	ret

00007080 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7080:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    7084:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    7088:	08 95       	ret

0000708a <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    708a:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    708c:	7a 95       	dec	r23
	brne .-4 ;~1 us
    708e:	f1 f7       	brne	.-4      	; 0x708c <WaitUs+0x2>
	nop
    7090:	00 00       	nop
	sbiw r24,1
    7092:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7094:	d1 f7       	brne	.-12     	; 0x708a <WaitUs>

	ret
    7096:	08 95       	ret

00007098 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7098:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    709a:	fe cf       	rjmp	.-4      	; 0x7098 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    709c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    709e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    70a0:	60 bd       	out	0x20, r22	; 32
   cli
    70a2:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    70a4:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    70a6:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    70a8:	78 94       	sei
   ret
    70aa:	08 95       	ret

000070ac <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    70ac:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    70ae:	fe cf       	rjmp	.-4      	; 0x70ac <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    70b0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    70b2:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    70b4:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    70b6:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    70b8:	80 b5       	in	r24, 0x20	; 32
   sei
    70ba:	78 94       	sei
   ret
    70bc:	08 95       	ret

000070be <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    70be:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    70c0:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    70c4:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    70c8:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    70cc:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    70d0:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    70d4:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    70d8:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    70dc:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    70e0:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    70e4:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    70e6:	80 93 81 00 	sts	0x0081, r24

		cli
    70ea:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    70ec:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    70ee:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    70f2:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    70f4:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    70f8:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    70fa:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    70fe:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7102:	78 94       	sei

00007104 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7104:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    7108:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    710a:	e0 f3       	brcs	.-8      	; 0x7104 <wait>

		ret
    710c:	08 95       	ret

0000710e <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    710e:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    7112:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    7116:	08 95       	ret

00007118 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7118:	0f 93       	push	r16
		push r17
    711a:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    711c:	0f b7       	in	r16, 0x3f	; 63
		push r16
    711e:	0f 93       	push	r16

		lds r16,sync_pulse
    7120:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    7124:	03 95       	inc	r16
		sts sync_pulse,r16
    7126:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    712a:	00 fd       	sbrc	r16, 0
		rjmp 1f
    712c:	08 c0       	rjmp	.+16     	; 0x713e <__vector_8+0x26>
		lds r17,random_value
    712e:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7132:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7136:	10 27       	eor	r17, r16
		sts random_value,r17
    7138:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    713c:	07 c0       	rjmp	.+14     	; 0x714c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    713e:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7142:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7146:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7148:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    714c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    714e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7152:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7154:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7156:	1f 91       	pop	r17
		pop r16
    7158:	0f 91       	pop	r16
		reti
    715a:	18 95       	reti

0000715c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    715c:	98 e0       	ldi	r25, 0x08	; 8
    715e:	88 e1       	ldi	r24, 0x18	; 24
    7160:	0f b6       	in	r0, 0x3f	; 63
    7162:	f8 94       	cli
    7164:	a8 95       	wdr
    7166:	80 93 60 00 	sts	0x0060, r24
    716a:	0f be       	out	0x3f, r0	; 63
    716c:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7170:	ff cf       	rjmp	.-2      	; 0x7170 <SoftReset+0x14>

00007172 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7172:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7174:	c8 95       	lpm
    7176:	c8 95       	lpm
		Wait200ns();
    7178:	c8 95       	lpm
    717a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    717c:	12 98       	cbi	0x02, 2	; 2
    717e:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7180:	80 e0       	ldi	r24, 0x00	; 0
    7182:	90 e0       	ldi	r25, 0x00	; 0
    7184:	20 e0       	ldi	r18, 0x00	; 0
    7186:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7188:	36 95       	lsr	r19
    718a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    718c:	96 95       	lsr	r25
    718e:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7190:	c8 95       	lpm
    7192:	c8 95       	lpm
			Wait200ns();
    7194:	c8 95       	lpm
    7196:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7198:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    719a:	00 9b       	sbis	0x00, 0	; 0
    719c:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    719e:	01 9b       	sbis	0x00, 1	; 0
    71a0:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    71a2:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    71a4:	c8 95       	lpm
    71a6:	c8 95       	lpm
			Wait200ns();
    71a8:	c8 95       	lpm
    71aa:	c8 95       	lpm
    71ac:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    71ae:	61 f7       	brne	.-40     	; 0x7188 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    71b0:	30 93 c0 0c 	sts	0x0CC0, r19
    71b4:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    71b8:	90 93 c4 0c 	sts	0x0CC4, r25
    71bc:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    71c0:	80 91 bf 0c 	lds	r24, 0x0CBF
    71c4:	90 91 c0 0c 	lds	r25, 0x0CC0
    71c8:	0f 97       	sbiw	r24, 0x0f	; 15
    71ca:	31 f0       	breq	.+12     	; 0x71d8 <ReadButtons+0x66>
    71cc:	80 91 c3 0c 	lds	r24, 0x0CC3
    71d0:	90 91 c4 0c 	lds	r25, 0x0CC4
    71d4:	0f 97       	sbiw	r24, 0x0f	; 15
    71d6:	11 f4       	brne	.+4      	; 0x71dc <ReadButtons+0x6a>
		SoftReset();
    71d8:	0e 94 ae 38 	call	0x715c	; 0x715c <SoftReset>
    71dc:	08 95       	ret

000071de <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    71de:	10 92 f9 0c 	sts	0x0CF9, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    71e2:	00 99       	sbic	0x00, 0	; 0
    71e4:	03 c0       	rjmp	.+6      	; 0x71ec <ReadControllers+0xe>
    71e6:	81 e0       	ldi	r24, 0x01	; 1
    71e8:	80 93 f9 0c 	sts	0x0CF9, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    71ec:	01 99       	sbic	0x00, 1	; 0
    71ee:	05 c0       	rjmp	.+10     	; 0x71fa <ReadControllers+0x1c>
    71f0:	80 91 f9 0c 	lds	r24, 0x0CF9
    71f4:	82 60       	ori	r24, 0x02	; 2
    71f6:	80 93 f9 0c 	sts	0x0CF9, r24
			
	//read the standard buttons
	ReadButtons();
    71fa:	0c 94 b9 38 	jmp	0x7172	; 0x7172 <ReadButtons>

000071fe <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    71fe:	cf 93       	push	r28
    7200:	df 93       	push	r29
    7202:	c0 e0       	ldi	r28, 0x00	; 0
    7204:	d0 e0       	ldi	r29, 0x00	; 0
    7206:	fe 01       	movw	r30, r28
    7208:	ee 54       	subi	r30, 0x4E	; 78
    720a:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    720c:	64 91       	lpm	r22, Z
    720e:	ce 01       	movw	r24, r28
    7210:	0e 94 4c 38 	call	0x7098	; 0x7098 <WriteEeprom>
    7214:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7216:	c0 32       	cpi	r28, 0x20	; 32
    7218:	d1 05       	cpc	r29, r1
    721a:	a9 f7       	brne	.-22     	; 0x7206 <FormatEeprom+0x8>
    721c:	c0 e2       	ldi	r28, 0x20	; 32
    721e:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7220:	6f ef       	ldi	r22, 0xFF	; 255
    7222:	ce 01       	movw	r24, r28
    7224:	0e 94 4c 38 	call	0x7098	; 0x7098 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7228:	6f ef       	ldi	r22, 0xFF	; 255
    722a:	ce 01       	movw	r24, r28
    722c:	01 96       	adiw	r24, 0x01	; 1
    722e:	0e 94 4c 38 	call	0x7098	; 0x7098 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7232:	a0 96       	adiw	r28, 0x20	; 32
    7234:	c1 15       	cp	r28, r1
    7236:	88 e0       	ldi	r24, 0x08	; 8
    7238:	d8 07       	cpc	r29, r24
    723a:	91 f7       	brne	.-28     	; 0x7220 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    723c:	df 91       	pop	r29
    723e:	cf 91       	pop	r28
    7240:	08 95       	ret

00007242 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7242:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7244:	80 e0       	ldi	r24, 0x00	; 0
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	0e 94 56 38 	call	0x70ac	; 0x70ac <ReadEeprom>
    724c:	c8 2f       	mov	r28, r24
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	0e 94 56 38 	call	0x70ac	; 0x70ac <ReadEeprom>
    7256:	28 2f       	mov	r18, r24
    7258:	30 e0       	ldi	r19, 0x00	; 0
    725a:	32 2f       	mov	r19, r18
    725c:	22 27       	eor	r18, r18
    725e:	2c 0f       	add	r18, r28
    7260:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7262:	81 e0       	ldi	r24, 0x01	; 1
    7264:	2a 35       	cpi	r18, 0x5A	; 90
    7266:	35 45       	sbci	r19, 0x55	; 85
    7268:	09 f0       	breq	.+2      	; 0x726c <isEepromFormatted+0x2a>
    726a:	80 e0       	ldi	r24, 0x00	; 0
}
    726c:	cf 91       	pop	r28
    726e:	08 95       	ret

00007270 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7270:	8f 92       	push	r8
    7272:	9f 92       	push	r9
    7274:	af 92       	push	r10
    7276:	bf 92       	push	r11
    7278:	cf 92       	push	r12
    727a:	df 92       	push	r13
    727c:	ef 92       	push	r14
    727e:	ff 92       	push	r15
    7280:	0f 93       	push	r16
    7282:	1f 93       	push	r17
    7284:	cf 93       	push	r28
    7286:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7288:	fb 01       	movw	r30, r22
    728a:	11 82       	std	Z+1, r1	; 0x01
    728c:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    728e:	8f 3f       	cpi	r24, 0xFF	; 255
    7290:	ff ef       	ldi	r31, 0xFF	; 255
    7292:	9f 07       	cpc	r25, r31
    7294:	89 f1       	breq	.+98     	; 0x72f8 <EepromBlockExists+0x88>
    7296:	6a 01       	movw	r12, r20
    7298:	8b 01       	movw	r16, r22
    729a:	7c 01       	movw	r14, r24
    729c:	a1 2c       	mov	r10, r1
    729e:	b1 2c       	mov	r11, r1
    72a0:	c0 e0       	ldi	r28, 0x00	; 0
    72a2:	d3 e0       	ldi	r29, 0x03	; 3
    72a4:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    72a6:	c5 01       	movw	r24, r10
    72a8:	0e 94 56 38 	call	0x70ac	; 0x70ac <ReadEeprom>
    72ac:	88 2e       	mov	r8, r24
    72ae:	c5 01       	movw	r24, r10
    72b0:	01 96       	adiw	r24, 0x01	; 1
    72b2:	0e 94 56 38 	call	0x70ac	; 0x70ac <ReadEeprom>
    72b6:	28 2f       	mov	r18, r24
    72b8:	30 e0       	ldi	r19, 0x00	; 0
    72ba:	32 2f       	mov	r19, r18
    72bc:	22 27       	eor	r18, r18
    72be:	28 0d       	add	r18, r8
    72c0:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    72c2:	2e 15       	cp	r18, r14
    72c4:	3f 05       	cpc	r19, r15
    72c6:	29 f4       	brne	.+10     	; 0x72d2 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    72c8:	f8 01       	movw	r30, r16
    72ca:	b1 82       	std	Z+1, r11	; 0x01
    72cc:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    72ce:	d0 e0       	ldi	r29, 0x00	; 0
    72d0:	0b c0       	rjmp	.+22     	; 0x72e8 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    72d2:	2f 3f       	cpi	r18, 0xFF	; 255
    72d4:	3f 4f       	sbci	r19, 0xFF	; 255
    72d6:	41 f4       	brne	.+16     	; 0x72e8 <EepromBlockExists+0x78>
    72d8:	91 10       	cpse	r9, r1
    72da:	06 c0       	rjmp	.+12     	; 0x72e8 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    72dc:	c1 14       	cp	r12, r1
    72de:	d1 04       	cpc	r13, r1
    72e0:	11 f0       	breq	.+4      	; 0x72e6 <EepromBlockExists+0x76>
    72e2:	f6 01       	movw	r30, r12
    72e4:	c0 83       	st	Z, r28
    72e6:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    72e8:	cf 5f       	subi	r28, 0xFF	; 255
    72ea:	f0 e2       	ldi	r31, 0x20	; 32
    72ec:	af 0e       	add	r10, r31
    72ee:	b1 1c       	adc	r11, r1
    72f0:	c0 34       	cpi	r28, 0x40	; 64
    72f2:	c9 f6       	brne	.-78     	; 0x72a6 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    72f4:	8d 2f       	mov	r24, r29
    72f6:	01 c0       	rjmp	.+2      	; 0x72fa <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    72f8:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    72fa:	df 91       	pop	r29
    72fc:	cf 91       	pop	r28
    72fe:	1f 91       	pop	r17
    7300:	0f 91       	pop	r16
    7302:	ff 90       	pop	r15
    7304:	ef 90       	pop	r14
    7306:	df 90       	pop	r13
    7308:	cf 90       	pop	r12
    730a:	bf 90       	pop	r11
    730c:	af 90       	pop	r10
    730e:	9f 90       	pop	r9
    7310:	8f 90       	pop	r8
    7312:	08 95       	ret

00007314 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7314:	ef 92       	push	r14
    7316:	ff 92       	push	r15
    7318:	0f 93       	push	r16
    731a:	1f 93       	push	r17
    731c:	cf 93       	push	r28
    731e:	df 93       	push	r29
    7320:	00 d0       	rcall	.+0      	; 0x7322 <EepromWriteBlock+0xe>
    7322:	1f 92       	push	r1
    7324:	cd b7       	in	r28, 0x3d	; 61
    7326:	de b7       	in	r29, 0x3e	; 62
    7328:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    732a:	1a 82       	std	Y+2, r1	; 0x02
    732c:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    732e:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7330:	ae 01       	movw	r20, r28
    7332:	4d 5f       	subi	r20, 0xFD	; 253
    7334:	5f 4f       	sbci	r21, 0xFF	; 255
    7336:	be 01       	movw	r22, r28
    7338:	6f 5f       	subi	r22, 0xFF	; 255
    733a:	7f 4f       	sbci	r23, 0xFF	; 255
    733c:	fc 01       	movw	r30, r24
    733e:	80 81       	ld	r24, Z
    7340:	91 81       	ldd	r25, Z+1	; 0x01
    7342:	0e 94 38 39 	call	0x7270	; 0x7270 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7346:	88 23       	and	r24, r24
    7348:	11 f0       	breq	.+4      	; 0x734e <EepromWriteBlock+0x3a>
    734a:	83 30       	cpi	r24, 0x03	; 3
    734c:	19 f5       	brne	.+70     	; 0x7394 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    734e:	89 81       	ldd	r24, Y+1	; 0x01
    7350:	9a 81       	ldd	r25, Y+2	; 0x02
    7352:	89 2b       	or	r24, r25
    7354:	49 f4       	brne	.+18     	; 0x7368 <EepromWriteBlock+0x54>
    7356:	8b 81       	ldd	r24, Y+3	; 0x03
    7358:	88 23       	and	r24, r24
    735a:	d9 f0       	breq	.+54     	; 0x7392 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    735c:	f0 e2       	ldi	r31, 0x20	; 32
    735e:	8f 9f       	mul	r24, r31
    7360:	c0 01       	movw	r24, r0
    7362:	11 24       	eor	r1, r1
    7364:	9a 83       	std	Y+2, r25	; 0x02
    7366:	89 83       	std	Y+1, r24	; 0x01
    7368:	78 01       	movw	r14, r16
    736a:	20 e2       	ldi	r18, 0x20	; 32
    736c:	e2 0e       	add	r14, r18
    736e:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7370:	f8 01       	movw	r30, r16
    7372:	61 91       	ld	r22, Z+
    7374:	8f 01       	movw	r16, r30
    7376:	89 81       	ldd	r24, Y+1	; 0x01
    7378:	9a 81       	ldd	r25, Y+2	; 0x02
    737a:	9c 01       	movw	r18, r24
    737c:	2f 5f       	subi	r18, 0xFF	; 255
    737e:	3f 4f       	sbci	r19, 0xFF	; 255
    7380:	3a 83       	std	Y+2, r19	; 0x02
    7382:	29 83       	std	Y+1, r18	; 0x01
    7384:	0e 94 4c 38 	call	0x7098	; 0x7098 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7388:	0e 15       	cp	r16, r14
    738a:	1f 05       	cpc	r17, r15
    738c:	89 f7       	brne	.-30     	; 0x7370 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    738e:	80 e0       	ldi	r24, 0x00	; 0
    7390:	01 c0       	rjmp	.+2      	; 0x7394 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7392:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7394:	0f 90       	pop	r0
    7396:	0f 90       	pop	r0
    7398:	0f 90       	pop	r0
    739a:	df 91       	pop	r29
    739c:	cf 91       	pop	r28
    739e:	1f 91       	pop	r17
    73a0:	0f 91       	pop	r16
    73a2:	ff 90       	pop	r15
    73a4:	ef 90       	pop	r14
    73a6:	08 95       	ret

000073a8 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    73a8:	fc 01       	movw	r30, r24
    73aa:	67 87       	std	Z+15, r22	; 0x0f
    73ac:	08 95       	ret

000073ae <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    73ae:	ee ec       	ldi	r30, 0xCE	; 206
    73b0:	fc e0       	ldi	r31, 0x0C	; 12
    73b2:	81 e0       	ldi	r24, 0x01	; 1
    73b4:	91 e0       	ldi	r25, 0x01	; 1
    73b6:	95 8b       	std	Z+21, r25	; 0x15
    73b8:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    73ba:	63 8b       	std	Z+19, r22	; 0x13
    73bc:	08 95       	ret

000073be <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    73be:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    73c0:	90 81       	ld	r25, Z
    73c2:	9f 75       	andi	r25, 0x5F	; 95
    73c4:	90 83       	st	Z, r25
    73c6:	08 95       	ret

000073c8 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    73c8:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    73ca:	90 81       	ld	r25, Z
    73cc:	90 64       	ori	r25, 0x40	; 64
    73ce:	90 83       	st	Z, r25
    73d0:	08 95       	ret

000073d2 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    73d2:	fc 01       	movw	r30, r24
    73d4:	66 87       	std	Z+14, r22	; 0x0e
    73d6:	08 95       	ret

000073d8 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    73d8:	fc 01       	movw	r30, r24
    73da:	62 87       	std	Z+10, r22	; 0x0a
    73dc:	08 95       	ret

000073de <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    73de:	fc 01       	movw	r30, r24
    73e0:	63 87       	std	Z+11, r22	; 0x0b
    73e2:	08 95       	ret

000073e4 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    73e4:	cf 93       	push	r28
    73e6:	df 93       	push	r29
    73e8:	ec 01       	movw	r28, r24
    73ea:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    73ec:	29 81       	ldd	r18, Y+1	; 0x01
    73ee:	30 e0       	ldi	r19, 0x00	; 0
    73f0:	f9 01       	movw	r30, r18
    73f2:	ee 0f       	add	r30, r30
    73f4:	ff 1f       	adc	r31, r31
    73f6:	e8 5f       	subi	r30, 0xF8	; 248
    73f8:	f2 48       	sbci	r31, 0x82	; 130
    73fa:	65 91       	lpm	r22, Z+
    73fc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    73fe:	f9 01       	movw	r30, r18
    7400:	e4 0f       	add	r30, r20
    7402:	f1 1d       	adc	r31, r1
    7404:	47 fd       	sbrc	r20, 7
    7406:	fa 95       	dec	r31
    7408:	ee 0f       	add	r30, r30
    740a:	ff 1f       	adc	r31, r31
    740c:	e8 5f       	subi	r30, 0xF8	; 248
    740e:	f2 48       	sbci	r31, 0x82	; 130
    7410:	85 91       	lpm	r24, Z+
    7412:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    7414:	86 1b       	sub	r24, r22
    7416:	97 0b       	sbc	r25, r23
    7418:	68 85       	ldd	r22, Y+8	; 0x08
    741a:	70 e0       	ldi	r23, 0x00	; 0
    741c:	0e 94 c5 60 	call	0xc18a	; 0xc18a <__divmodhi4>
	if(delta==0)delta++;
    7420:	61 15       	cp	r22, r1
    7422:	71 05       	cpc	r23, r1
    7424:	11 f4       	brne	.+4      	; 0x742a <PatchCommand11+0x46>
    7426:	61 e0       	ldi	r22, 0x01	; 1
    7428:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    742a:	ea 81       	ldd	r30, Y+2	; 0x02
    742c:	86 e0       	ldi	r24, 0x06	; 6
    742e:	e8 9f       	mul	r30, r24
    7430:	f0 01       	movw	r30, r0
    7432:	11 24       	eor	r1, r1
    7434:	e2 53       	subi	r30, 0x32	; 50
    7436:	f3 4f       	sbci	r31, 0xF3	; 243
    7438:	81 81       	ldd	r24, Z+1	; 0x01
    743a:	92 81       	ldd	r25, Z+2	; 0x02
    743c:	86 0f       	add	r24, r22
    743e:	97 1f       	adc	r25, r23
    7440:	92 83       	std	Z+2, r25	; 0x02
    7442:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7444:	7e 83       	std	Y+6, r23	; 0x06
    7446:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    7448:	88 81       	ld	r24, Y
    744a:	88 60       	ori	r24, 0x08	; 8
    744c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    744e:	89 81       	ldd	r24, Y+1	; 0x01
    7450:	48 0f       	add	r20, r24
    7452:	4f 83       	std	Y+7, r20	; 0x07
}
    7454:	df 91       	pop	r29
    7456:	cf 91       	pop	r28
    7458:	08 95       	ret

0000745a <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    745a:	fc 01       	movw	r30, r24
    745c:	60 87       	std	Z+8, r22	; 0x08
    745e:	08 95       	ret

00007460 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    7460:	fc 01       	movw	r30, r24
    7462:	64 83       	std	Z+4, r22	; 0x04
    7464:	08 95       	ret

00007466 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7466:	fc 01       	movw	r30, r24
    7468:	82 81       	ldd	r24, Z+2	; 0x02
    746a:	0c 94 4e 3e 	jmp	0x7c9c	; 0x7c9c <SetMixerWave>

0000746e <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    746e:	fc 01       	movw	r30, r24
	track->note+=param;
    7470:	91 81       	ldd	r25, Z+1	; 0x01
    7472:	69 0f       	add	r22, r25
    7474:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7476:	82 81       	ldd	r24, Z+2	; 0x02
    7478:	0c 94 37 3e 	jmp	0x7c6e	; 0x7c6e <SetMixerNote>

0000747c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    747c:	fc 01       	movw	r30, r24
	track->note-=param;
    747e:	91 81       	ldd	r25, Z+1	; 0x01
    7480:	96 1b       	sub	r25, r22
    7482:	69 2f       	mov	r22, r25
    7484:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7486:	82 81       	ldd	r24, Z+2	; 0x02
    7488:	0c 94 37 3e 	jmp	0x7c6e	; 0x7c6e <SetMixerNote>

0000748c <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    748c:	1f 93       	push	r17
    748e:	cf 93       	push	r28
    7490:	df 93       	push	r29
    7492:	ec 01       	movw	r28, r24
    7494:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7496:	8a 81       	ldd	r24, Y+2	; 0x02
    7498:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <SetMixerNote>
	track->note=param;
    749c:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    749e:	88 81       	ld	r24, Y
    74a0:	87 7f       	andi	r24, 0xF7	; 247
    74a2:	88 83       	st	Y, r24
}
    74a4:	df 91       	pop	r29
    74a6:	cf 91       	pop	r28
    74a8:	1f 91       	pop	r17
    74aa:	08 95       	ret

000074ac <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    74ac:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    74ae:	14 96       	adiw	r26, 0x04	; 4
    74b0:	8c 91       	ld	r24, X
    74b2:	14 97       	sbiw	r26, 0x04	; 4
    74b4:	88 23       	and	r24, r24
    74b6:	19 f1       	breq	.+70     	; 0x74fe <PatchCommand14+0x52>
    74b8:	55 96       	adiw	r26, 0x15	; 21
    74ba:	2d 91       	ld	r18, X+
    74bc:	3c 91       	ld	r19, X
    74be:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    74c0:	66 23       	and	r22, r22
    74c2:	79 f0       	breq	.+30     	; 0x74e2 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    74c4:	77 27       	eor	r23, r23
    74c6:	67 fd       	sbrc	r22, 7
    74c8:	70 95       	com	r23
    74ca:	6f 5f       	subi	r22, 0xFF	; 255
    74cc:	7f 4f       	sbci	r23, 0xFF	; 255
    74ce:	ab 01       	movw	r20, r22
    74d0:	44 0f       	add	r20, r20
    74d2:	55 1f       	adc	r21, r21
    74d4:	64 0f       	add	r22, r20
    74d6:	75 1f       	adc	r23, r21
    74d8:	26 1b       	sub	r18, r22
    74da:	37 0b       	sbc	r19, r23
    74dc:	09 c0       	rjmp	.+18     	; 0x74f0 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    74de:	ef 3f       	cpi	r30, 0xFF	; 255
    74e0:	39 f0       	breq	.+14     	; 0x74f0 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    74e2:	23 50       	subi	r18, 0x03	; 3
    74e4:	31 09       	sbc	r19, r1
    74e6:	f9 01       	movw	r30, r18
    74e8:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    74ea:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    74ec:	ed 30       	cpi	r30, 0x0D	; 13
    74ee:	b9 f7       	brne	.-18     	; 0x74de <PatchCommand14+0x32>
    74f0:	56 96       	adiw	r26, 0x16	; 22
    74f2:	3c 93       	st	X, r19
    74f4:	2e 93       	st	-X, r18
    74f6:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    74f8:	81 50       	subi	r24, 0x01	; 1
    74fa:	14 96       	adiw	r26, 0x04	; 4
    74fc:	8c 93       	st	X, r24
    74fe:	08 95       	ret

00007500 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7500:	90 93 72 0d 	sts	0x0D72, r25
    7504:	80 93 71 0d 	sts	0x0D71, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7508:	8f e6       	ldi	r24, 0x6F	; 111
    750a:	80 93 74 0d 	sts	0x0D74, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    750e:	10 92 cc 0c 	sts	0x0CCC, r1
    7512:	ec e0       	ldi	r30, 0x0C	; 12
    7514:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7516:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7518:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    751a:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    751c:	28 e1       	ldi	r18, 0x18	; 24
    751e:	df 01       	movw	r26, r30
    7520:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7522:	8c 93       	st	X, r24
    7524:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7526:	9c 93       	st	X, r25
    7528:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    752a:	1c 92       	st	X, r1
    752c:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    752e:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7530:	10 82       	st	Z, r1
    7532:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7534:	2c 93       	st	X, r18
    7536:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7538:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    753a:	8f 5f       	subi	r24, 0xFF	; 255
    753c:	77 96       	adiw	r30, 0x17	; 23
    753e:	85 30       	cpi	r24, 0x05	; 5
    7540:	71 f7       	brne	.-36     	; 0x751e <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7542:	08 95       	ret

00007544 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    7544:	ec ef       	ldi	r30, 0xFC	; 252
    7546:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7548:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    754a:	20 81       	ld	r18, Z
    754c:	2f 77       	andi	r18, 0x7F	; 127
    754e:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7550:	33 83       	std	Z+3, r19	; 0x03
    7552:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    7554:	2d e0       	ldi	r18, 0x0D	; 13
    7556:	ef 36       	cpi	r30, 0x6F	; 111
    7558:	f2 07       	cpc	r31, r18
    755a:	b9 f7       	brne	.-18     	; 0x754a <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    755c:	01 96       	adiw	r24, 0x01	; 1
    755e:	90 93 79 0d 	sts	0x0D79, r25
    7562:	80 93 78 0d 	sts	0x0D78, r24
		songStart=song+1;//skip first delta-time
    7566:	90 93 fb 0c 	sts	0x0CFB, r25
    756a:	80 93 fa 0c 	sts	0x0CFA, r24
		loopStart=song+1;
    756e:	90 93 7b 0d 	sts	0x0D7B, r25
    7572:	80 93 7a 0d 	sts	0x0D7A, r24
		nextDeltaTime=0;
    7576:	10 92 76 0d 	sts	0x0D76, r1
    757a:	10 92 75 0d 	sts	0x0D75, r1
		currDeltaTime=0;
    757e:	10 92 70 0d 	sts	0x0D70, r1
    7582:	10 92 6f 0d 	sts	0x0D6F, r1
		songSpeed=0;
    7586:	10 92 77 0d 	sts	0x0D77, r1

		lastStatus=0;
    758a:	10 92 73 0d 	sts	0x0D73, r1
		playSong=true;
    758e:	81 e0       	ldi	r24, 0x01	; 1
    7590:	80 93 cc 0c 	sts	0x0CCC, r24
    7594:	08 95       	ret

00007596 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    7596:	ec ef       	ldi	r30, 0xFC	; 252
    7598:	fc e0       	ldi	r31, 0x0C	; 12
    759a:	8a ef       	ldi	r24, 0xFA	; 250
    759c:	87 87       	std	Z+15, r24	; 0x0f
    759e:	86 a3       	std	Z+38, r24	; 0x26
    75a0:	80 93 39 0d 	sts	0x0D39, r24
    75a4:	80 93 50 0d 	sts	0x0D50, r24
    75a8:	80 93 67 0d 	sts	0x0D67, r24
	}

	playSong=false;
    75ac:	10 92 cc 0c 	sts	0x0CCC, r1
    75b0:	08 95       	ret

000075b2 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    75b2:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    75b4:	ed 91       	ld	r30, X+
    75b6:	fc 91       	ld	r31, X
    75b8:	11 97       	sbiw	r26, 0x01	; 1
    75ba:	9f 01       	movw	r18, r30
    75bc:	2f 5f       	subi	r18, 0xFF	; 255
    75be:	3f 4f       	sbci	r19, 0xFF	; 255
    75c0:	11 96       	adiw	r26, 0x01	; 1
    75c2:	3c 93       	st	X, r19
    75c4:	2e 93       	st	-X, r18
    75c6:	e4 91       	lpm	r30, Z
    75c8:	e7 fd       	sbrc	r30, 7
    75ca:	03 c0       	rjmp	.+6      	; 0x75d2 <ReadVarLen+0x20>
    75cc:	8e 2f       	mov	r24, r30
    75ce:	90 e0       	ldi	r25, 0x00	; 0
    75d0:	08 95       	ret
    {
       value &= 0x7F;
    75d2:	ef 77       	andi	r30, 0x7F	; 127
    75d4:	8e 2f       	mov	r24, r30
    75d6:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    75d8:	96 95       	lsr	r25
    75da:	98 2f       	mov	r25, r24
    75dc:	88 27       	eor	r24, r24
    75de:	97 95       	ror	r25
    75e0:	87 95       	ror	r24
    75e2:	2f 5f       	subi	r18, 0xFF	; 255
    75e4:	3f 4f       	sbci	r19, 0xFF	; 255
    75e6:	f9 01       	movw	r30, r18
    75e8:	31 97       	sbiw	r30, 0x01	; 1
    75ea:	e4 91       	lpm	r30, Z
    75ec:	4e 2f       	mov	r20, r30
    75ee:	4f 77       	andi	r20, 0x7F	; 127
    75f0:	84 0f       	add	r24, r20
    75f2:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    75f4:	e7 fd       	sbrc	r30, 7
    75f6:	f0 cf       	rjmp	.-32     	; 0x75d8 <ReadVarLen+0x26>
    75f8:	2d 93       	st	X+, r18
    75fa:	3c 93       	st	X, r19
    }


    return value;
}
    75fc:	08 95       	ret

000075fe <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    75fe:	ef 92       	push	r14
    7600:	ff 92       	push	r15
    7602:	0f 93       	push	r16
    7604:	1f 93       	push	r17
    7606:	cf 93       	push	r28
    7608:	df 93       	push	r29
    760a:	1f 92       	push	r1
    760c:	cd b7       	in	r28, 0x3d	; 61
    760e:	de b7       	in	r29, 0x3e	; 62
    7610:	7c 01       	movw	r14, r24
    7612:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7614:	fc 01       	movw	r30, r24
    7616:	80 81       	ld	r24, Z
    7618:	08 2f       	mov	r16, r24
    761a:	00 1f       	adc	r16, r16
    761c:	00 27       	eor	r16, r16
    761e:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7620:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7622:	9f ef       	ldi	r25, 0xFF	; 255
    7624:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7626:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7628:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    762a:	87 7b       	andi	r24, 0xB7	; 183
    762c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    762e:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7630:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7632:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7634:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7636:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7638:	82 81       	ldd	r24, Z+2	; 0x02
    763a:	83 30       	cpi	r24, 0x03	; 3
    763c:	69 f4       	brne	.+26     	; 0x7658 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    763e:	01 11       	cpse	r16, r1
    7640:	01 c0       	rjmp	.+2      	; 0x7644 <TriggerCommon+0x46>
    7642:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7644:	81 e0       	ldi	r24, 0x01	; 1
    7646:	91 e0       	ldi	r25, 0x01	; 1
    7648:	90 93 e3 0c 	sts	0x0CE3, r25
    764c:	80 93 e2 0c 	sts	0x0CE2, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7650:	81 e0       	ldi	r24, 0x01	; 1
    7652:	80 93 e1 0c 	sts	0x0CE1, r24
    7656:	39 c0       	rjmp	.+114    	; 0x76ca <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    7658:	84 30       	cpi	r24, 0x04	; 4
    765a:	69 f5       	brne	.+90     	; 0x76b6 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    765c:	10 92 e9 0c 	sts	0x0CE9, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    7660:	80 91 71 0d 	lds	r24, 0x0D71
    7664:	90 91 72 0d 	lds	r25, 0x0D72
    7668:	f9 e0       	ldi	r31, 0x09	; 9
    766a:	6f 9f       	mul	r22, r31
    766c:	80 0d       	add	r24, r0
    766e:	91 1d       	adc	r25, r1
    7670:	11 24       	eor	r1, r1
    7672:	fc 01       	movw	r30, r24
    7674:	31 96       	adiw	r30, 0x01	; 1
    7676:	a5 91       	lpm	r26, Z+
    7678:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    767a:	b0 93 eb 0c 	sts	0x0CEB, r27
    767e:	a0 93 ea 0c 	sts	0x0CEA, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7682:	ac 01       	movw	r20, r24
    7684:	49 5f       	subi	r20, 0xF9	; 249
    7686:	5f 4f       	sbci	r21, 0xFF	; 255
    7688:	fa 01       	movw	r30, r20
    768a:	65 91       	lpm	r22, Z+
    768c:	74 91       	lpm	r23, Z
    768e:	05 96       	adiw	r24, 0x05	; 5
    7690:	fc 01       	movw	r30, r24
    7692:	85 91       	lpm	r24, Z+
    7694:	94 91       	lpm	r25, Z
    7696:	68 1b       	sub	r22, r24
    7698:	79 0b       	sbc	r23, r25
    769a:	70 93 ed 0c 	sts	0x0CED, r23
    769e:	60 93 ec 0c 	sts	0x0CEC, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    76a2:	fa 01       	movw	r30, r20
    76a4:	85 91       	lpm	r24, Z+
    76a6:	94 91       	lpm	r25, Z
    76a8:	a8 0f       	add	r26, r24
    76aa:	b9 1f       	adc	r27, r25
    76ac:	b0 93 ef 0c 	sts	0x0CEF, r27
    76b0:	a0 93 ee 0c 	sts	0x0CEE, r26
    76b4:	05 c0       	rjmp	.+10     	; 0x76c0 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    76b6:	60 e0       	ldi	r22, 0x00	; 0
    76b8:	29 83       	std	Y+1, r18	; 0x01
    76ba:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <SetMixerWave>
			SetMixerNote(track->channel,note);
    76be:	29 81       	ldd	r18, Y+1	; 0x01
    76c0:	62 2f       	mov	r22, r18
    76c2:	f7 01       	movw	r30, r14
    76c4:	82 81       	ldd	r24, Z+2	; 0x02
    76c6:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    76ca:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    76cc:	00 23       	and	r16, r16
    76ce:	11 f0       	breq	.+4      	; 0x76d4 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    76d0:	11 8b       	std	Z+17, r17	; 0x11
    76d2:	01 c0       	rjmp	.+2      	; 0x76d6 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    76d4:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    76d6:	e0 91 71 0d 	lds	r30, 0x0D71
    76da:	f0 91 72 0d 	lds	r31, 0x0D72
    76de:	39 e0       	ldi	r19, 0x09	; 9
    76e0:	13 9f       	mul	r17, r19
    76e2:	e0 0d       	add	r30, r0
    76e4:	f1 1d       	adc	r31, r1
    76e6:	11 24       	eor	r1, r1
    76e8:	33 96       	adiw	r30, 0x03	; 3
    76ea:	85 91       	lpm	r24, Z+
    76ec:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    76ee:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    76f0:	00 97       	sbiw	r24, 0x00	; 0
    76f2:	19 f4       	brne	.+6      	; 0x76fa <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    76f4:	16 8a       	std	Z+22, r1	; 0x16
    76f6:	15 8a       	std	Z+21, r1	; 0x15
    76f8:	08 c0       	rjmp	.+16     	; 0x770a <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    76fa:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    76fc:	fc 01       	movw	r30, r24
    76fe:	24 91       	lpm	r18, Z
    7700:	f7 01       	movw	r30, r14
    7702:	22 8b       	std	Z+18, r18	; 0x12
    7704:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7706:	96 8b       	std	Z+22, r25	; 0x16
    7708:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    770a:	0f 90       	pop	r0
    770c:	df 91       	pop	r29
    770e:	cf 91       	pop	r28
    7710:	1f 91       	pop	r17
    7712:	0f 91       	pop	r16
    7714:	ff 90       	pop	r15
    7716:	ef 90       	pop	r14
    7718:	08 95       	ret

0000771a <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    771a:	cf 93       	push	r28
    771c:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    771e:	e0 91 71 0d 	lds	r30, 0x0D71
    7722:	f0 91 72 0d 	lds	r31, 0x0D72
    7726:	99 e0       	ldi	r25, 0x09	; 9
    7728:	89 9f       	mul	r24, r25
    772a:	e0 0d       	add	r30, r0
    772c:	f1 1d       	adc	r31, r1
    772e:	11 24       	eor	r1, r1
    7730:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7732:	e1 30       	cpi	r30, 0x01	; 1
    7734:	e9 f0       	breq	.+58     	; 0x7770 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7736:	e2 30       	cpi	r30, 0x02	; 2
    7738:	e9 f0       	breq	.+58     	; 0x7774 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    773a:	20 91 13 0d 	lds	r18, 0x0D13
    773e:	27 ff       	sbrs	r18, 7
    7740:	1d c0       	rjmp	.+58     	; 0x777c <TriggerFx+0x62>
    7742:	20 91 24 0d 	lds	r18, 0x0D24
    7746:	28 13       	cpse	r18, r24
    7748:	02 c0       	rjmp	.+4      	; 0x774e <TriggerFx+0x34>
    774a:	41 11       	cpse	r20, r1
    774c:	17 c0       	rjmp	.+46     	; 0x777c <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    774e:	20 91 2a 0d 	lds	r18, 0x0D2A
    7752:	27 ff       	sbrs	r18, 7
    7754:	11 c0       	rjmp	.+34     	; 0x7778 <TriggerFx+0x5e>
    7756:	20 91 3b 0d 	lds	r18, 0x0D3B
    775a:	28 13       	cpse	r18, r24
    775c:	02 c0       	rjmp	.+4      	; 0x7762 <TriggerFx+0x48>
    775e:	41 11       	cpse	r20, r1
    7760:	0b c0       	rjmp	.+22     	; 0x7778 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7762:	20 91 27 0d 	lds	r18, 0x0D27
    7766:	90 91 3e 0d 	lds	r25, 0x0D3E
    776a:	92 17       	cp	r25, r18
    776c:	28 f4       	brcc	.+10     	; 0x7778 <TriggerFx+0x5e>
    776e:	06 c0       	rjmp	.+12     	; 0x777c <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7770:	c3 e0       	ldi	r28, 0x03	; 3
    7772:	05 c0       	rjmp	.+10     	; 0x777e <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7774:	c4 e0       	ldi	r28, 0x04	; 4
    7776:	03 c0       	rjmp	.+6      	; 0x777e <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7778:	c2 e0       	ldi	r28, 0x02	; 2
    777a:	01 c0       	rjmp	.+2      	; 0x777e <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    777c:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    777e:	97 e1       	ldi	r25, 0x17	; 23
    7780:	c9 9f       	mul	r28, r25
    7782:	e0 01       	movw	r28, r0
    7784:	11 24       	eor	r1, r1
    7786:	c4 50       	subi	r28, 0x04	; 4
    7788:	d3 4f       	sbci	r29, 0xF3	; 243
    778a:	90 e8       	ldi	r25, 0x80	; 128
    778c:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    778e:	1e 8a       	std	Y+22, r1	; 0x16
    7790:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7792:	20 e5       	ldi	r18, 0x50	; 80
    7794:	46 2f       	mov	r20, r22
    7796:	68 2f       	mov	r22, r24
    7798:	ce 01       	movw	r24, r28
    779a:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    779e:	88 81       	ld	r24, Y
    77a0:	80 62       	ori	r24, 0x20	; 32
    77a2:	88 83       	st	Y, r24
}
    77a4:	df 91       	pop	r29
    77a6:	cf 91       	pop	r28
    77a8:	08 95       	ret

000077aa <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    77aa:	cf 93       	push	r28
    77ac:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    77ae:	a8 2f       	mov	r26, r24
    77b0:	b0 e0       	ldi	r27, 0x00	; 0
    77b2:	97 e1       	ldi	r25, 0x17	; 23
    77b4:	89 9f       	mul	r24, r25
    77b6:	f0 01       	movw	r30, r0
    77b8:	11 24       	eor	r1, r1
    77ba:	e4 50       	subi	r30, 0x04	; 4
    77bc:	f3 4f       	sbci	r31, 0xF3	; 243
    77be:	80 81       	ld	r24, Z
    77c0:	85 ff       	sbrs	r24, 5
    77c2:	02 c0       	rjmp	.+4      	; 0x77c8 <TriggerNote+0x1e>
    77c4:	87 fd       	sbrc	r24, 7
    77c6:	2e c0       	rjmp	.+92     	; 0x7824 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    77c8:	21 11       	cpse	r18, r1
    77ca:	18 c0       	rjmp	.+48     	; 0x77fc <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    77cc:	97 e1       	ldi	r25, 0x17	; 23
    77ce:	9a 9f       	mul	r25, r26
    77d0:	f0 01       	movw	r30, r0
    77d2:	9b 9f       	mul	r25, r27
    77d4:	f0 0d       	add	r31, r0
    77d6:	11 24       	eor	r1, r1
    77d8:	e4 50       	subi	r30, 0x04	; 4
    77da:	f3 4f       	sbci	r31, 0xF3	; 243
    77dc:	97 85       	ldd	r25, Z+15	; 0x0f
    77de:	91 11       	cpse	r25, r1
    77e0:	02 c0       	rjmp	.+4      	; 0x77e6 <TriggerNote+0x3c>
    77e2:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    77e4:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    77e6:	97 e1       	ldi	r25, 0x17	; 23
    77e8:	9a 9f       	mul	r25, r26
    77ea:	f0 01       	movw	r30, r0
    77ec:	9b 9f       	mul	r25, r27
    77ee:	f0 0d       	add	r31, r0
    77f0:	11 24       	eor	r1, r1
    77f2:	e4 50       	subi	r30, 0x04	; 4
    77f4:	f3 4f       	sbci	r31, 0xF3	; 243
    77f6:	8f 7b       	andi	r24, 0xBF	; 191
    77f8:	80 83       	st	Z, r24
    77fa:	14 c0       	rjmp	.+40     	; 0x7824 <TriggerNote+0x7a>
    77fc:	82 2f       	mov	r24, r18
    77fe:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7800:	97 e1       	ldi	r25, 0x17	; 23
    7802:	9a 9f       	mul	r25, r26
    7804:	e0 01       	movw	r28, r0
    7806:	9b 9f       	mul	r25, r27
    7808:	d0 0d       	add	r29, r0
    780a:	11 24       	eor	r1, r1
    780c:	c4 50       	subi	r28, 0x04	; 4
    780e:	d3 4f       	sbci	r29, 0xF3	; 243
    7810:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7812:	1e 8a       	std	Y+22, r1	; 0x16
    7814:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7816:	48 2f       	mov	r20, r24
    7818:	ce 01       	movw	r24, r28
    781a:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    781e:	88 81       	ld	r24, Y
    7820:	80 62       	ori	r24, 0x20	; 32
    7822:	88 83       	st	Y, r24
		}

	}
}
    7824:	df 91       	pop	r29
    7826:	cf 91       	pop	r28
    7828:	08 95       	ret

0000782a <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    782a:	6f 92       	push	r6
    782c:	7f 92       	push	r7
    782e:	8f 92       	push	r8
    7830:	9f 92       	push	r9
    7832:	af 92       	push	r10
    7834:	bf 92       	push	r11
    7836:	cf 92       	push	r12
    7838:	df 92       	push	r13
    783a:	ef 92       	push	r14
    783c:	ff 92       	push	r15
    783e:	0f 93       	push	r16
    7840:	1f 93       	push	r17
    7842:	cf 93       	push	r28
    7844:	df 93       	push	r29
    7846:	cc ef       	ldi	r28, 0xFC	; 252
    7848:	dc e0       	ldi	r29, 0x0C	; 12
    784a:	0e ec       	ldi	r16, 0xCE	; 206
    784c:	1c e0       	ldi	r17, 0x0C	; 12
    784e:	d8 01       	movw	r26, r16
    7850:	9e 01       	movw	r18, r28
    7852:	40 e0       	ldi	r20, 0x00	; 0
    7854:	50 e0       	ldi	r21, 0x00	; 0
    7856:	ca 01       	movw	r24, r20
    7858:	84 50       	subi	r24, 0x04	; 4
    785a:	93 4f       	sbci	r25, 0xF3	; 243
    785c:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    785e:	fc 01       	movw	r30, r24
    7860:	87 85       	ldd	r24, Z+15	; 0x0f
    7862:	88 23       	and	r24, r24
    7864:	91 f0       	breq	.+36     	; 0x788a <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7866:	66 85       	ldd	r22, Z+14	; 0x0e
    7868:	99 27       	eor	r25, r25
    786a:	87 fd       	sbrc	r24, 7
    786c:	90 95       	com	r25
    786e:	86 0f       	add	r24, r22
    7870:	91 1d       	adc	r25, r1
    7872:	8f 3f       	cpi	r24, 0xFF	; 255
    7874:	91 05       	cpc	r25, r1
    7876:	19 f0       	breq	.+6      	; 0x787e <ProcessMusic+0x54>
    7878:	14 f0       	brlt	.+4      	; 0x787e <ProcessMusic+0x54>
    787a:	8f ef       	ldi	r24, 0xFF	; 255
    787c:	90 e0       	ldi	r25, 0x00	; 0
    787e:	97 ff       	sbrs	r25, 7
    7880:	02 c0       	rjmp	.+4      	; 0x7886 <ProcessMusic+0x5c>
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7886:	f6 01       	movw	r30, r12
    7888:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    788a:	f9 01       	movw	r30, r18
    788c:	f0 80       	ld	r15, Z
    788e:	f3 fe       	sbrs	r15, 3
    7890:	2a c0       	rjmp	.+84     	; 0x78e6 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7892:	65 81       	ldd	r22, Z+5	; 0x05
    7894:	76 81       	ldd	r23, Z+6	; 0x06
    7896:	11 96       	adiw	r26, 0x01	; 1
    7898:	8d 91       	ld	r24, X+
    789a:	9c 91       	ld	r25, X
    789c:	12 97       	sbiw	r26, 0x02	; 2
    789e:	86 0f       	add	r24, r22
    78a0:	97 1f       	adc	r25, r23
    78a2:	12 96       	adiw	r26, 0x02	; 2
    78a4:	9c 93       	st	X, r25
    78a6:	8e 93       	st	-X, r24
    78a8:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    78aa:	f6 01       	movw	r30, r12
    78ac:	e7 80       	ldd	r14, Z+7	; 0x07
    78ae:	ee 2d       	mov	r30, r14
    78b0:	f0 e0       	ldi	r31, 0x00	; 0
    78b2:	ee 0f       	add	r30, r30
    78b4:	ff 1f       	adc	r31, r31
    78b6:	e8 5f       	subi	r30, 0xF8	; 248
    78b8:	f2 48       	sbci	r31, 0x82	; 130
    78ba:	c5 90       	lpm	r12, Z+
    78bc:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    78be:	16 16       	cp	r1, r22
    78c0:	17 06       	cpc	r1, r23
    78c2:	24 f4       	brge	.+8      	; 0x78cc <ProcessMusic+0xa2>
    78c4:	8c 15       	cp	r24, r12
    78c6:	9d 05       	cpc	r25, r13
    78c8:	30 f4       	brcc	.+12     	; 0x78d6 <ProcessMusic+0xac>
    78ca:	0d c0       	rjmp	.+26     	; 0x78e6 <ProcessMusic+0xbc>
    78cc:	67 2b       	or	r22, r23
    78ce:	59 f0       	breq	.+22     	; 0x78e6 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    78d0:	c8 16       	cp	r12, r24
    78d2:	d9 06       	cpc	r13, r25
    78d4:	40 f0       	brcs	.+16     	; 0x78e6 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    78d6:	12 96       	adiw	r26, 0x02	; 2
    78d8:	dc 92       	st	X, r13
    78da:	ce 92       	st	-X, r12
    78dc:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    78de:	8f 2d       	mov	r24, r15
    78e0:	87 7f       	andi	r24, 0xF7	; 247
    78e2:	f9 01       	movw	r30, r18
    78e4:	80 83       	st	Z, r24
    78e6:	49 5e       	subi	r20, 0xE9	; 233
    78e8:	5f 4f       	sbci	r21, 0xFF	; 255
    78ea:	29 5e       	subi	r18, 0xE9	; 233
    78ec:	3f 4f       	sbci	r19, 0xFF	; 255
    78ee:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    78f0:	43 37       	cpi	r20, 0x73	; 115
    78f2:	51 05       	cpc	r21, r1
    78f4:	09 f0       	breq	.+2      	; 0x78f8 <ProcessMusic+0xce>
    78f6:	af cf       	rjmp	.-162    	; 0x7856 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    78f8:	80 91 cc 0c 	lds	r24, 0x0CCC
    78fc:	88 23       	and	r24, r24
    78fe:	09 f4       	brne	.+2      	; 0x7902 <ProcessMusic+0xd8>
    7900:	cc c0       	rjmp	.+408    	; 0x7a9a <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7902:	57 e1       	ldi	r21, 0x17	; 23
    7904:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7906:	80 91 6f 0d 	lds	r24, 0x0D6F
    790a:	90 91 70 0d 	lds	r25, 0x0D70
    790e:	20 91 75 0d 	lds	r18, 0x0D75
    7912:	30 91 76 0d 	lds	r19, 0x0D76
    7916:	82 17       	cp	r24, r18
    7918:	93 07       	cpc	r25, r19
    791a:	09 f0       	breq	.+2      	; 0x791e <ProcessMusic+0xf4>
    791c:	b9 c0       	rjmp	.+370    	; 0x7a90 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    791e:	20 91 78 0d 	lds	r18, 0x0D78
    7922:	30 91 79 0d 	lds	r19, 0x0D79
    7926:	b9 01       	movw	r22, r18
    7928:	6f 5f       	subi	r22, 0xFF	; 255
    792a:	7f 4f       	sbci	r23, 0xFF	; 255
    792c:	70 93 79 0d 	sts	0x0D79, r23
    7930:	60 93 78 0d 	sts	0x0D78, r22
    7934:	f9 01       	movw	r30, r18
    7936:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7938:	4f 3f       	cpi	r20, 0xFF	; 255
    793a:	79 f5       	brne	.+94     	; 0x799a <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    793c:	a9 01       	movw	r20, r18
    793e:	4e 5f       	subi	r20, 0xFE	; 254
    7940:	5f 4f       	sbci	r21, 0xFF	; 255
    7942:	50 93 79 0d 	sts	0x0D79, r21
    7946:	40 93 78 0d 	sts	0x0D78, r20
    794a:	fb 01       	movw	r30, r22
    794c:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    794e:	6f 32       	cpi	r22, 0x2F	; 47
    7950:	19 f4       	brne	.+6      	; 0x7958 <ProcessMusic+0x12e>
						playSong=false;
    7952:	10 92 cc 0c 	sts	0x0CCC, r1
						break;	
    7956:	9c c0       	rjmp	.+312    	; 0x7a90 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7958:	66 30       	cpi	r22, 0x06	; 6
    795a:	09 f0       	breq	.+2      	; 0x795e <ProcessMusic+0x134>
    795c:	8c c0       	rjmp	.+280    	; 0x7a76 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    795e:	fa 01       	movw	r30, r20
    7960:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7962:	c9 01       	movw	r24, r18
    7964:	04 96       	adiw	r24, 0x04	; 4
    7966:	90 93 79 0d 	sts	0x0D79, r25
    796a:	80 93 78 0d 	sts	0x0D78, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    796e:	f9 01       	movw	r30, r18
    7970:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7972:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7974:	e3 35       	cpi	r30, 0x53	; 83
    7976:	29 f4       	brne	.+10     	; 0x7982 <ProcessMusic+0x158>
							loopStart=songPos;
    7978:	90 93 7b 0d 	sts	0x0D7B, r25
    797c:	80 93 7a 0d 	sts	0x0D7A, r24
    7980:	7a c0       	rjmp	.+244    	; 0x7a76 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7982:	e5 34       	cpi	r30, 0x45	; 69
    7984:	09 f0       	breq	.+2      	; 0x7988 <ProcessMusic+0x15e>
    7986:	77 c0       	rjmp	.+238    	; 0x7a76 <ProcessMusic+0x24c>
							songPos=loopStart;
    7988:	80 91 7a 0d 	lds	r24, 0x0D7A
    798c:	90 91 7b 0d 	lds	r25, 0x0D7B
    7990:	90 93 79 0d 	sts	0x0D79, r25
    7994:	80 93 78 0d 	sts	0x0D78, r24
    7998:	6e c0       	rjmp	.+220    	; 0x7a76 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    799a:	47 fd       	sbrc	r20, 7
    799c:	40 93 73 0d 	sts	0x0D73, r20
					channel=lastStatus&0x0f;
    79a0:	90 91 73 0d 	lds	r25, 0x0D73
    79a4:	89 2f       	mov	r24, r25
    79a6:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    79a8:	47 ff       	sbrs	r20, 7
    79aa:	08 c0       	rjmp	.+16     	; 0x79bc <ProcessMusic+0x192>
    79ac:	2e 5f       	subi	r18, 0xFE	; 254
    79ae:	3f 4f       	sbci	r19, 0xFF	; 255
    79b0:	30 93 79 0d 	sts	0x0D79, r19
    79b4:	20 93 78 0d 	sts	0x0D78, r18
    79b8:	fb 01       	movw	r30, r22
    79ba:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    79bc:	90 7f       	andi	r25, 0xF0	; 240
    79be:	90 3b       	cpi	r25, 0xB0	; 176
    79c0:	e1 f0       	breq	.+56     	; 0x79fa <ProcessMusic+0x1d0>
    79c2:	90 3c       	cpi	r25, 0xC0	; 192
    79c4:	09 f4       	brne	.+2      	; 0x79c8 <ProcessMusic+0x19e>
    79c6:	51 c0       	rjmp	.+162    	; 0x7a6a <ProcessMusic+0x240>
    79c8:	90 39       	cpi	r25, 0x90	; 144
    79ca:	09 f0       	breq	.+2      	; 0x79ce <ProcessMusic+0x1a4>
    79cc:	54 c0       	rjmp	.+168    	; 0x7a76 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    79ce:	e0 91 78 0d 	lds	r30, 0x0D78
    79d2:	f0 91 79 0d 	lds	r31, 0x0D79
    79d6:	9f 01       	movw	r18, r30
    79d8:	2f 5f       	subi	r18, 0xFF	; 255
    79da:	3f 4f       	sbci	r19, 0xFF	; 255
    79dc:	30 93 79 0d 	sts	0x0D79, r19
    79e0:	20 93 78 0d 	sts	0x0D78, r18
    79e4:	24 91       	lpm	r18, Z
    79e6:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    79e8:	f8 9e       	mul	r15, r24
    79ea:	f0 01       	movw	r30, r0
    79ec:	11 24       	eor	r1, r1
    79ee:	e4 50       	subi	r30, 0x04	; 4
    79f0:	f3 4f       	sbci	r31, 0xF3	; 243
    79f2:	60 89       	ldd	r22, Z+16	; 0x10
    79f4:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <TriggerNote>
    79f8:	3e c0       	rjmp	.+124    	; 0x7a76 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    79fa:	e0 91 78 0d 	lds	r30, 0x0D78
    79fe:	f0 91 79 0d 	lds	r31, 0x0D79
    7a02:	9f 01       	movw	r18, r30
    7a04:	2f 5f       	subi	r18, 0xFF	; 255
    7a06:	3f 4f       	sbci	r19, 0xFF	; 255
    7a08:	30 93 79 0d 	sts	0x0D79, r19
    7a0c:	20 93 78 0d 	sts	0x0D78, r18
    7a10:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7a12:	47 30       	cpi	r20, 0x07	; 7
    7a14:	49 f4       	brne	.+18     	; 0x7a28 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7a16:	f8 9e       	mul	r15, r24
    7a18:	d0 01       	movw	r26, r0
    7a1a:	11 24       	eor	r1, r1
    7a1c:	a4 50       	subi	r26, 0x04	; 4
    7a1e:	b3 4f       	sbci	r27, 0xF3	; 243
    7a20:	ee 0f       	add	r30, r30
    7a22:	1c 96       	adiw	r26, 0x0c	; 12
    7a24:	ec 93       	st	X, r30
    7a26:	27 c0       	rjmp	.+78     	; 0x7a76 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7a28:	4b 30       	cpi	r20, 0x0B	; 11
    7a2a:	49 f4       	brne	.+18     	; 0x7a3e <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7a2c:	f8 9e       	mul	r15, r24
    7a2e:	d0 01       	movw	r26, r0
    7a30:	11 24       	eor	r1, r1
    7a32:	a4 50       	subi	r26, 0x04	; 4
    7a34:	b3 4f       	sbci	r27, 0xF3	; 243
    7a36:	ee 0f       	add	r30, r30
    7a38:	13 96       	adiw	r26, 0x03	; 3
    7a3a:	ec 93       	st	X, r30
    7a3c:	1c c0       	rjmp	.+56     	; 0x7a76 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7a3e:	4c 35       	cpi	r20, 0x5C	; 92
    7a40:	49 f4       	brne	.+18     	; 0x7a54 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7a42:	f8 9e       	mul	r15, r24
    7a44:	d0 01       	movw	r26, r0
    7a46:	11 24       	eor	r1, r1
    7a48:	a4 50       	subi	r26, 0x04	; 4
    7a4a:	b3 4f       	sbci	r27, 0xF3	; 243
    7a4c:	ee 0f       	add	r30, r30
    7a4e:	1a 96       	adiw	r26, 0x0a	; 10
    7a50:	ec 93       	st	X, r30
    7a52:	11 c0       	rjmp	.+34     	; 0x7a76 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7a54:	44 36       	cpi	r20, 0x64	; 100
    7a56:	79 f4       	brne	.+30     	; 0x7a76 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7a58:	f8 9e       	mul	r15, r24
    7a5a:	d0 01       	movw	r26, r0
    7a5c:	11 24       	eor	r1, r1
    7a5e:	a4 50       	subi	r26, 0x04	; 4
    7a60:	b3 4f       	sbci	r27, 0xF3	; 243
    7a62:	ee 0f       	add	r30, r30
    7a64:	1b 96       	adiw	r26, 0x0b	; 11
    7a66:	ec 93       	st	X, r30
    7a68:	06 c0       	rjmp	.+12     	; 0x7a76 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7a6a:	f8 9e       	mul	r15, r24
    7a6c:	f0 01       	movw	r30, r0
    7a6e:	11 24       	eor	r1, r1
    7a70:	e4 50       	subi	r30, 0x04	; 4
    7a72:	f3 4f       	sbci	r31, 0xF3	; 243
    7a74:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7a76:	88 e7       	ldi	r24, 0x78	; 120
    7a78:	9d e0       	ldi	r25, 0x0D	; 13
    7a7a:	0e 94 d9 3a 	call	0x75b2	; 0x75b2 <ReadVarLen>
    7a7e:	90 93 76 0d 	sts	0x0D76, r25
    7a82:	80 93 75 0d 	sts	0x0D75, r24
				currDeltaTime=0;
    7a86:	10 92 70 0d 	sts	0x0D70, r1
    7a8a:	10 92 6f 0d 	sts	0x0D6F, r1
    7a8e:	3b cf       	rjmp	.-394    	; 0x7906 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7a90:	01 96       	adiw	r24, 0x01	; 1
    7a92:	90 93 70 0d 	sts	0x0D70, r25
    7a96:	80 93 6f 0d 	sts	0x0D6F, r24
    7a9a:	95 e0       	ldi	r25, 0x05	; 5
    7a9c:	a9 2e       	mov	r10, r25
    7a9e:	9d e0       	ldi	r25, 0x0D	; 13
    7aa0:	b9 2e       	mov	r11, r25
    7aa2:	2f e0       	ldi	r18, 0x0F	; 15
    7aa4:	c2 2e       	mov	r12, r18
    7aa6:	2d e0       	ldi	r18, 0x0D	; 13
    7aa8:	d2 2e       	mov	r13, r18
    7aaa:	30 e1       	ldi	r19, 0x10	; 16
    7aac:	e3 2e       	mov	r14, r19
    7aae:	3d e0       	ldi	r19, 0x0D	; 13
    7ab0:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7ab2:	66 24       	eor	r6, r6
    7ab4:	6a 94       	dec	r6
    7ab6:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7ab8:	88 81       	ld	r24, Y
    7aba:	85 ff       	sbrs	r24, 5
    7abc:	42 c0       	rjmp	.+132    	; 0x7b42 <ProcessMusic+0x318>
    7abe:	2d 89       	ldd	r18, Y+21	; 0x15
    7ac0:	3e 89       	ldd	r19, Y+22	; 0x16
    7ac2:	23 2b       	or	r18, r19
    7ac4:	09 f4       	brne	.+2      	; 0x7ac8 <ProcessMusic+0x29e>
    7ac6:	3d c0       	rjmp	.+122    	; 0x7b42 <ProcessMusic+0x318>
    7ac8:	86 fd       	sbrc	r24, 6
    7aca:	3b c0       	rjmp	.+118    	; 0x7b42 <ProcessMusic+0x318>
    7acc:	47 01       	movw	r8, r14
    7ace:	f2 e0       	ldi	r31, 0x02	; 2
    7ad0:	8f 1a       	sub	r8, r31
    7ad2:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7ad4:	d6 01       	movw	r26, r12
    7ad6:	9c 91       	ld	r25, X
    7ad8:	f4 01       	movw	r30, r8
    7ada:	80 81       	ld	r24, Z
    7adc:	98 13       	cpse	r25, r24
    7ade:	2e c0       	rjmp	.+92     	; 0x7b3c <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7ae0:	ed 89       	ldd	r30, Y+21	; 0x15
    7ae2:	fe 89       	ldd	r31, Y+22	; 0x16
    7ae4:	bf 01       	movw	r22, r30
    7ae6:	6f 5f       	subi	r22, 0xFF	; 255
    7ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aea:	7e 8b       	std	Y+22, r23	; 0x16
    7aec:	6d 8b       	std	Y+21, r22	; 0x15
    7aee:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7af0:	8f 3f       	cpi	r24, 0xFF	; 255
    7af2:	31 f4       	brne	.+12     	; 0x7b00 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7af4:	88 81       	ld	r24, Y
    7af6:	8f 77       	andi	r24, 0x7F	; 127
    7af8:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7afa:	1e 8a       	std	Y+22, r1	; 0x16
    7afc:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7afe:	1e c0       	rjmp	.+60     	; 0x7b3c <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7b00:	9f 01       	movw	r18, r30
    7b02:	2e 5f       	subi	r18, 0xFE	; 254
    7b04:	3f 4f       	sbci	r19, 0xFF	; 255
    7b06:	3e 8b       	std	Y+22, r19	; 0x16
    7b08:	2d 8b       	std	Y+21, r18	; 0x15
    7b0a:	fb 01       	movw	r30, r22
    7b0c:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7b0e:	e8 2f       	mov	r30, r24
    7b10:	f0 e0       	ldi	r31, 0x00	; 0
    7b12:	ee 0f       	add	r30, r30
    7b14:	ff 1f       	adc	r31, r31
    7b16:	ee 52       	subi	r30, 0x2E	; 46
    7b18:	ff 4f       	sbci	r31, 0xFF	; 255
    7b1a:	25 91       	lpm	r18, Z+
    7b1c:	34 91       	lpm	r19, Z
    7b1e:	ce 01       	movw	r24, r28
    7b20:	f9 01       	movw	r30, r18
    7b22:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7b24:	ed 89       	ldd	r30, Y+21	; 0x15
    7b26:	fe 89       	ldd	r31, Y+22	; 0x16
    7b28:	cf 01       	movw	r24, r30
    7b2a:	01 96       	adiw	r24, 0x01	; 1
    7b2c:	9e 8b       	std	Y+22, r25	; 0x16
    7b2e:	8d 8b       	std	Y+21, r24	; 0x15
    7b30:	e4 91       	lpm	r30, Z
    7b32:	d4 01       	movw	r26, r8
    7b34:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7b36:	f6 01       	movw	r30, r12
    7b38:	10 82       	st	Z, r1
    7b3a:	cc cf       	rjmp	.-104    	; 0x7ad4 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7b3c:	9f 5f       	subi	r25, 0xFF	; 255
    7b3e:	d6 01       	movw	r26, r12
    7b40:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7b42:	98 81       	ld	r25, Y
    7b44:	95 ff       	sbrs	r25, 5
    7b46:	6c c0       	rjmp	.+216    	; 0x7c20 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7b48:	f7 01       	movw	r30, r14
    7b4a:	80 81       	ld	r24, Z
    7b4c:	8f 3f       	cpi	r24, 0xFF	; 255
    7b4e:	11 f0       	breq	.+4      	; 0x7b54 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    7b50:	8f 5f       	subi	r24, 0xFF	; 255
    7b52:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7b54:	97 fd       	sbrc	r25, 7
    7b56:	04 c0       	rjmp	.+8      	; 0x7b60 <ProcessMusic+0x336>
    7b58:	f7 01       	movw	r30, r14
    7b5a:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7b5c:	90 81       	ld	r25, Z
    7b5e:	01 c0       	rjmp	.+2      	; 0x7b62 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7b60:	9f ef       	ldi	r25, 0xFF	; 255
    7b62:	f7 01       	movw	r30, r14
    7b64:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7b66:	80 81       	ld	r24, Z
    7b68:	88 23       	and	r24, r24
    7b6a:	09 f4       	brne	.+2      	; 0x7b6e <ProcessMusic+0x344>
    7b6c:	4e c0       	rjmp	.+156    	; 0x7c0a <ProcessMusic+0x3e0>
    7b6e:	31 96       	adiw	r30, 0x01	; 1
    7b70:	50 81       	ld	r21, Z
    7b72:	55 23       	and	r21, r21
    7b74:	09 f4       	brne	.+2      	; 0x7b78 <ProcessMusic+0x34e>
    7b76:	49 c0       	rjmp	.+146    	; 0x7c0a <ProcessMusic+0x3e0>
    7b78:	99 23       	and	r25, r25
    7b7a:	09 f4       	brne	.+2      	; 0x7b7e <ProcessMusic+0x354>
    7b7c:	46 c0       	rjmp	.+140    	; 0x7c0a <ProcessMusic+0x3e0>
    7b7e:	40 91 74 0d 	lds	r20, 0x0D74
    7b82:	44 23       	and	r20, r20
    7b84:	09 f4       	brne	.+2      	; 0x7b88 <ProcessMusic+0x35e>
    7b86:	41 c0       	rjmp	.+130    	; 0x7c0a <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7b88:	89 9f       	mul	r24, r25
    7b8a:	c0 01       	movw	r24, r0
    7b8c:	11 24       	eor	r1, r1
    7b8e:	93 95       	inc	r25
				uVol>>=8;
    7b90:	89 2f       	mov	r24, r25
    7b92:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7b94:	58 9f       	mul	r21, r24
    7b96:	90 01       	movw	r18, r0
    7b98:	59 9f       	mul	r21, r25
    7b9a:	30 0d       	add	r19, r0
    7b9c:	11 24       	eor	r1, r1
    7b9e:	c9 01       	movw	r24, r18
    7ba0:	93 95       	inc	r25
				uVol>>=8;
    7ba2:	89 2f       	mov	r24, r25
    7ba4:	99 27       	eor	r25, r25
    7ba6:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7ba8:	50 81       	ld	r21, Z
    7baa:	58 9f       	mul	r21, r24
    7bac:	90 01       	movw	r18, r0
    7bae:	59 9f       	mul	r21, r25
    7bb0:	30 0d       	add	r19, r0
    7bb2:	11 24       	eor	r1, r1
    7bb4:	33 95       	inc	r19
					uVol>>=8;
    7bb6:	23 2f       	mov	r18, r19
    7bb8:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7bba:	42 9f       	mul	r20, r18
    7bbc:	c0 01       	movw	r24, r0
    7bbe:	43 9f       	mul	r20, r19
    7bc0:	90 0d       	add	r25, r0
    7bc2:	11 24       	eor	r1, r1
    7bc4:	93 95       	inc	r25
				uVol>>=8;
    7bc6:	89 2f       	mov	r24, r25
    7bc8:	99 27       	eor	r25, r25
    7bca:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7bcc:	20 81       	ld	r18, Z
    7bce:	22 23       	and	r18, r18
    7bd0:	f1 f0       	breq	.+60     	; 0x7c0e <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7bd2:	d5 01       	movw	r26, r10
    7bd4:	ec 91       	ld	r30, X
    7bd6:	f0 e0       	ldi	r31, 0x00	; 0
    7bd8:	e0 50       	subi	r30, 0x00	; 0
    7bda:	f1 48       	sbci	r31, 0x81	; 129
    7bdc:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7bde:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7be0:	2e 9f       	mul	r18, r30
    7be2:	f0 01       	movw	r30, r0
    7be4:	11 24       	eor	r1, r1
    7be6:	f3 95       	inc	r31
					tVol>>=8;
    7be8:	ef 2f       	mov	r30, r31
    7bea:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7bec:	a3 01       	movw	r20, r6
    7bee:	4e 1b       	sub	r20, r30
    7bf0:	5f 0b       	sbc	r21, r31
    7bf2:	48 9f       	mul	r20, r24
    7bf4:	90 01       	movw	r18, r0
    7bf6:	49 9f       	mul	r20, r25
    7bf8:	30 0d       	add	r19, r0
    7bfa:	58 9f       	mul	r21, r24
    7bfc:	30 0d       	add	r19, r0
    7bfe:	11 24       	eor	r1, r1
    7c00:	c9 01       	movw	r24, r18
    7c02:	93 95       	inc	r25
					uVol>>=8;
    7c04:	89 2f       	mov	r24, r25
    7c06:	99 27       	eor	r25, r25
    7c08:	02 c0       	rjmp	.+4      	; 0x7c0e <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7c0a:	80 e0       	ldi	r24, 0x00	; 0
    7c0c:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7c0e:	f5 01       	movw	r30, r10
    7c10:	30 81       	ld	r19, Z
    7c12:	f7 01       	movw	r30, r14
    7c14:	39 97       	sbiw	r30, 0x09	; 9
    7c16:	20 81       	ld	r18, Z
    7c18:	23 0f       	add	r18, r19
    7c1a:	d5 01       	movw	r26, r10
    7c1c:	2c 93       	st	X, r18
    7c1e:	02 c0       	rjmp	.+4      	; 0x7c24 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7c20:	80 e0       	ldi	r24, 0x00	; 0
    7c22:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7c24:	f8 01       	movw	r30, r16
    7c26:	80 83       	st	Z, r24
    7c28:	67 96       	adiw	r28, 0x17	; 23
    7c2a:	0a 5f       	subi	r16, 0xFA	; 250
    7c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    7c2e:	f7 e1       	ldi	r31, 0x17	; 23
    7c30:	af 0e       	add	r10, r31
    7c32:	b1 1c       	adc	r11, r1
    7c34:	87 e1       	ldi	r24, 0x17	; 23
    7c36:	c8 0e       	add	r12, r24
    7c38:	d1 1c       	adc	r13, r1
    7c3a:	97 e1       	ldi	r25, 0x17	; 23
    7c3c:	e9 0e       	add	r14, r25
    7c3e:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7c40:	ad e0       	ldi	r26, 0x0D	; 13
    7c42:	cf 36       	cpi	r28, 0x6F	; 111
    7c44:	da 07       	cpc	r29, r26
    7c46:	09 f0       	breq	.+2      	; 0x7c4a <ProcessMusic+0x420>
    7c48:	37 cf       	rjmp	.-402    	; 0x7ab8 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7c4a:	df 91       	pop	r29
    7c4c:	cf 91       	pop	r28
    7c4e:	1f 91       	pop	r17
    7c50:	0f 91       	pop	r16
    7c52:	ff 90       	pop	r15
    7c54:	ef 90       	pop	r14
    7c56:	df 90       	pop	r13
    7c58:	cf 90       	pop	r12
    7c5a:	bf 90       	pop	r11
    7c5c:	af 90       	pop	r10
    7c5e:	9f 90       	pop	r9
    7c60:	8f 90       	pop	r8
    7c62:	7f 90       	pop	r7
    7c64:	6f 90       	pop	r6
    7c66:	08 95       	ret

00007c68 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7c68:	80 93 74 0d 	sts	0x0D74, r24
    7c6c:	08 95       	ret

00007c6e <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7c6e:	99 27       	eor	r25, r25
	clr r23
    7c70:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7c72:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7c74:	09 f4       	brne	.+2      	; 0x7c78 <set_note_waves>
		ret
    7c76:	08 95       	ret

00007c78 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7c78:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7c7a:	fd e7       	ldi	r31, 0x7D	; 125
	lsl r22
    7c7c:	66 0f       	add	r22, r22
	rol r23
    7c7e:	77 1f       	adc	r23, r23
	add ZL,r22
    7c80:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7c82:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7c84:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7c86:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7c88:	ee ec       	ldi	r30, 0xCE	; 206
	ldi ZH,hi8(mixerStruct)
    7c8a:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7c8c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7c8e:	28 9f       	mul	r18, r24
	add ZL,r0
    7c90:	e0 0d       	add	r30, r0
	adc ZH,r1
    7c92:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7c94:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7c96:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7c98:	11 24       	eor	r1, r1
	

	ret
    7c9a:	08 95       	ret

00007c9c <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7c9c:	99 27       	eor	r25, r25
	clr r23
    7c9e:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7ca0:	ee ec       	ldi	r30, 0xCE	; 206
	ldi ZH,hi8(mixerStruct)
    7ca2:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7ca4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7ca6:	28 9f       	mul	r18, r24
	add ZL,r0
    7ca8:	e0 0d       	add	r30, r0
	adc ZH,r1
    7caa:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7cac:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7cae:	31 f4       	brne	.+12     	; 0x7cbc <smw1>
	lds r22,tr4_params
    7cb0:	60 91 e1 0c 	lds	r22, 0x0CE1
	andi r22,0xfe;
    7cb4:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7cb6:	60 93 e1 0c 	sts	0x0CE1, r22
	rjmp esmw	
    7cba:	0b c0       	rjmp	.+22     	; 0x7cd2 <esmw>

00007cbc <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7cbc:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7cbe:	31 f4       	brne	.+12     	; 0x7ccc <smw2>
	lds r22,tr4_params
    7cc0:	60 91 e1 0c 	lds	r22, 0x0CE1
	ori r22,0xfe;
    7cc4:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7cc6:	60 93 e1 0c 	sts	0x0CE1, r22
	rjmp esmw
    7cca:	03 c0       	rjmp	.+6      	; 0x7cd2 <esmw>

00007ccc <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7ccc:	7f e7       	ldi	r23, 0x7F	; 127
	add r23,r22
    7cce:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7cd0:	75 83       	std	Z+5, r23	; 0x05

00007cd2 <esmw>:

esmw:
	clr r1	
    7cd2:	11 24       	eor	r1, r1
	ret
    7cd4:	08 95       	ret
	...

00007d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7d02:	80 93 cd 0c 	sts	0x0CCD, r24
	ret
    7d06:	08 95       	ret

00007d08 <steptable>:
    7d08:	22 00       	.word	0x0022	; ????
    7d0a:	24 00       	.word	0x0024	; ????
    7d0c:	26 00       	.word	0x0026	; ????
    7d0e:	28 00       	.word	0x0028	; ????
    7d10:	2b 00       	.word	0x002b	; ????
    7d12:	2d 00       	.word	0x002d	; ????
    7d14:	30 00       	.word	0x0030	; ????
    7d16:	33 00       	.word	0x0033	; ????
    7d18:	36 00       	.word	0x0036	; ????
    7d1a:	39 00       	.word	0x0039	; ????
    7d1c:	3d 00       	.word	0x003d	; ????
    7d1e:	40 00       	.word	0x0040	; ????
    7d20:	44 00       	.word	0x0044	; ????
    7d22:	48 00       	.word	0x0048	; ????
    7d24:	4c 00       	.word	0x004c	; ????
    7d26:	51 00       	.word	0x0051	; ????
    7d28:	56 00       	.word	0x0056	; ????
    7d2a:	5b 00       	.word	0x005b	; ????
    7d2c:	60 00       	.word	0x0060	; ????
    7d2e:	66 00       	.word	0x0066	; ????
    7d30:	6c 00       	.word	0x006c	; ????
    7d32:	73 00       	.word	0x0073	; ????
    7d34:	79 00       	.word	0x0079	; ????
    7d36:	81 00       	.word	0x0081	; ????
    7d38:	88 00       	.word	0x0088	; ????
    7d3a:	90 00       	.word	0x0090	; ????
    7d3c:	99 00       	.word	0x0099	; ????
    7d3e:	a2 00       	.word	0x00a2	; ????
    7d40:	ac 00       	.word	0x00ac	; ????
    7d42:	b6 00       	.word	0x00b6	; ????
    7d44:	c1 00       	.word	0x00c1	; ????
    7d46:	cc 00       	.word	0x00cc	; ????
    7d48:	d8 00       	.word	0x00d8	; ????
    7d4a:	e5 00       	.word	0x00e5	; ????
    7d4c:	f3 00       	.word	0x00f3	; ????
    7d4e:	01 01       	movw	r0, r2
    7d50:	10 01       	movw	r2, r0
    7d52:	21 01       	movw	r4, r2
    7d54:	32 01       	movw	r6, r4
    7d56:	44 01       	movw	r8, r8
    7d58:	57 01       	movw	r10, r14
    7d5a:	6c 01       	movw	r12, r24
    7d5c:	81 01       	movw	r16, r2
    7d5e:	98 01       	movw	r18, r16
    7d60:	b0 01       	movw	r22, r0
    7d62:	ca 01       	movw	r24, r20
    7d64:	e5 01       	movw	r28, r10
    7d66:	02 02       	muls	r16, r18
    7d68:	21 02       	muls	r18, r17
    7d6a:	41 02       	muls	r20, r17
    7d6c:	64 02       	muls	r22, r20
    7d6e:	88 02       	muls	r24, r24
    7d70:	ae 02       	muls	r26, r30
    7d72:	d7 02       	muls	r29, r23
    7d74:	03 03       	mulsu	r16, r19
    7d76:	30 03       	mulsu	r19, r16
    7d78:	61 03       	mulsu	r22, r17
    7d7a:	94 03       	fmuls	r17, r20
    7d7c:	cb 03       	fmulsu	r20, r19
    7d7e:	05 04       	cpc	r0, r5
    7d80:	42 04       	cpc	r4, r2
    7d82:	83 04       	cpc	r8, r3
    7d84:	c7 04       	cpc	r12, r7
    7d86:	10 05       	cpc	r17, r0
    7d88:	5d 05       	cpc	r21, r13
    7d8a:	af 05       	cpc	r26, r15
    7d8c:	05 06       	cpc	r0, r21
    7d8e:	61 06       	cpc	r6, r17
    7d90:	c2 06       	cpc	r12, r18
    7d92:	29 07       	cpc	r18, r25
    7d94:	96 07       	cpc	r25, r22
    7d96:	09 08       	sbc	r0, r9
    7d98:	83 08       	sbc	r8, r3
    7d9a:	05 09       	sbc	r16, r5
    7d9c:	8e 09       	sbc	r24, r14
    7d9e:	20 0a       	sbc	r2, r16
    7da0:	ba 0a       	sbc	r11, r26
    7da2:	5d 0b       	sbc	r21, r29
    7da4:	0a 0c       	add	r0, r10
    7da6:	c1 0c       	add	r12, r1
    7da8:	84 0d       	add	r24, r4
    7daa:	51 0e       	add	r5, r17
    7dac:	2b 0f       	add	r18, r27
    7dae:	12 10       	cpse	r1, r2
    7db0:	07 11       	cpse	r16, r7
    7db2:	0a 12       	cpse	r0, r26
    7db4:	1d 13       	cpse	r17, r29
    7db6:	40 14       	cp	r4, r0
    7db8:	74 15       	cp	r23, r4
    7dba:	ba 16       	cp	r11, r26
    7dbc:	14 18       	sub	r1, r4
    7dbe:	83 19       	sub	r24, r3
    7dc0:	07 1b       	sub	r16, r23
    7dc2:	a3 1c       	adc	r10, r3
    7dc4:	57 1e       	adc	r5, r23
    7dc6:	24 20       	and	r2, r4
    7dc8:	0e 22       	and	r0, r30
    7dca:	14 24       	eor	r1, r4
    7dcc:	39 26       	eor	r3, r25
    7dce:	7f 28       	or	r7, r15
    7dd0:	e8 2a       	or	r14, r24
    7dd2:	75 2d       	mov	r23, r5
    7dd4:	29 30       	cpi	r18, 0x09	; 9
    7dd6:	06 33       	cpi	r16, 0x36	; 54
    7dd8:	0f 36       	cpi	r16, 0x6F	; 111
    7dda:	45 39       	cpi	r20, 0x95	; 149
    7ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    7dde:	49 40       	sbci	r20, 0x09	; 9
    7de0:	1b 44       	sbci	r17, 0x4B	; 75
    7de2:	28 48       	sbci	r18, 0x88	; 136
    7de4:	73 4c       	sbci	r23, 0xC3	; 195
    7de6:	fe 50       	subi	r31, 0x0E	; 14
    7de8:	cf 55       	subi	r28, 0x5F	; 95
    7dea:	ea 5a       	subi	r30, 0xAA	; 170
    7dec:	51 60       	ori	r21, 0x01	; 1
    7dee:	0c 66       	ori	r16, 0x6C	; 108
    7df0:	1d 6c       	ori	r17, 0xCD	; 205
    7df2:	8b 72       	andi	r24, 0x2B	; 43
    7df4:	5a 79       	andi	r21, 0x9A	; 154
    7df6:	92 80       	ldd	r9, Z+2	; 0x02
    7df8:	37 88       	ldd	r3, Z+23	; 0x17
    7dfa:	50 90 e5 98 	lds	r5, 0x98E5
    7dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7e00:	9f ab       	std	Y+55, r25	; 0x37
    7e02:	d3 b5       	in	r29, 0x23	; 35
    7e04:	a3 c0       	rjmp	.+326    	; 0x7f4c <waves+0x4c>
	...

00007f00 <waves>:
    7f00:	00 03       	mulsu	r16, r16
    7f02:	06 09       	sbc	r16, r6
    7f04:	0c 10       	cpse	r0, r12
    7f06:	13 16       	cp	r1, r19
    7f08:	19 1c       	adc	r1, r9
    7f0a:	1f 22       	and	r1, r31
    7f0c:	25 28       	or	r2, r5
    7f0e:	2b 2e       	mov	r2, r27
    7f10:	31 33       	cpi	r19, 0x31	; 49
    7f12:	36 39       	cpi	r19, 0x96	; 150
    7f14:	3c 3f       	cpi	r19, 0xFC	; 252
    7f16:	41 44       	sbci	r20, 0x41	; 65
    7f18:	47 49       	sbci	r20, 0x97	; 151
    7f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7f1c:	51 53       	subi	r21, 0x31	; 49
    7f1e:	55 58       	subi	r21, 0x85	; 133
    7f20:	5a 5c       	subi	r21, 0xCA	; 202
    7f22:	5e 60       	ori	r21, 0x0E	; 14
    7f24:	62 64       	ori	r22, 0x42	; 66
    7f26:	66 68       	ori	r22, 0x86	; 134
    7f28:	6a 6b       	ori	r22, 0xBA	; 186
    7f2a:	6d 6f       	ori	r22, 0xFD	; 253
    7f2c:	70 71       	andi	r23, 0x10	; 16
    7f2e:	73 74       	andi	r23, 0x43	; 67
    7f30:	75 76       	andi	r23, 0x65	; 101
    7f32:	78 79       	andi	r23, 0x98	; 152
    7f34:	7a 7a       	andi	r23, 0xAA	; 170
    7f36:	7b 7c       	andi	r23, 0xCB	; 203
    7f38:	7d 7d       	andi	r23, 0xDD	; 221
    7f3a:	7e 7e       	andi	r23, 0xEE	; 238
    7f3c:	7e 7f       	andi	r23, 0xFE	; 254
    7f3e:	7f 7f       	andi	r23, 0xFF	; 255
    7f40:	7f 7f       	andi	r23, 0xFF	; 255
    7f42:	7f 7f       	andi	r23, 0xFF	; 255
    7f44:	7e 7e       	andi	r23, 0xEE	; 238
    7f46:	7e 7d       	andi	r23, 0xDE	; 222
    7f48:	7d 7c       	andi	r23, 0xCD	; 205
    7f4a:	7b 7a       	andi	r23, 0xAB	; 171
    7f4c:	7a 79       	andi	r23, 0x9A	; 154
    7f4e:	78 76       	andi	r23, 0x68	; 104
    7f50:	75 74       	andi	r23, 0x45	; 69
    7f52:	73 71       	andi	r23, 0x13	; 19
    7f54:	70 6f       	ori	r23, 0xF0	; 240
    7f56:	6d 6b       	ori	r22, 0xBD	; 189
    7f58:	6a 68       	ori	r22, 0x8A	; 138
    7f5a:	66 64       	ori	r22, 0x46	; 70
    7f5c:	62 60       	ori	r22, 0x02	; 2
    7f5e:	5e 5c       	subi	r21, 0xCE	; 206
    7f60:	5a 58       	subi	r21, 0x8A	; 138
    7f62:	55 53       	subi	r21, 0x35	; 53
    7f64:	51 4e       	sbci	r21, 0xE1	; 225
    7f66:	4c 49       	sbci	r20, 0x9C	; 156
    7f68:	47 44       	sbci	r20, 0x47	; 71
    7f6a:	41 3f       	cpi	r20, 0xF1	; 241
    7f6c:	3c 39       	cpi	r19, 0x9C	; 156
    7f6e:	36 33       	cpi	r19, 0x36	; 54
    7f70:	31 2e       	mov	r3, r17
    7f72:	2b 28       	or	r2, r11
    7f74:	25 22       	and	r2, r21
    7f76:	1f 1c       	adc	r1, r15
    7f78:	19 16       	cp	r1, r25
    7f7a:	13 10       	cpse	r1, r3
    7f7c:	0c 09       	sbc	r16, r12
    7f7e:	06 03       	mulsu	r16, r22
    7f80:	00 fd       	sbrc	r16, 0
    7f82:	fa f7       	brpl	.-2      	; 0x7f82 <waves+0x82>
    7f84:	f4 f0       	brlt	.+60     	; 0x7fc2 <waves+0xc2>
    7f86:	ed ea       	ldi	r30, 0xAD	; 173
    7f88:	e7 e4       	ldi	r30, 0x47	; 71
    7f8a:	e1 de       	rcall	.-574    	; 0x7d4e <steptable+0x46>
    7f8c:	db d8       	rcall	.-3658   	; 0x7144 <__vector_8+0x2c>
    7f8e:	d5 d2       	rcall	.+1450   	; 0x853a <waves+0x63a>
    7f90:	cf cd       	rjmp	.-1122   	; 0x7b30 <ProcessMusic+0x306>
    7f92:	ca c7       	rjmp	.+3988   	; 0x8f28 <LBPrintByte+0x42>
    7f94:	c4 c1       	rjmp	.+904    	; 0x831e <waves+0x41e>
    7f96:	bf bc       	out	0x2f, r11	; 47
    7f98:	b9 b7       	in	r27, 0x39	; 57
    7f9a:	b4 b2       	in	r11, 0x14	; 20
    7f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7fa4:	9e 9c       	mul	r9, r14
    7fa6:	9a 98       	cbi	0x13, 2	; 19
    7fa8:	96 95       	lsr	r25
    7faa:	93 91       	.word	0x9193	; ????
    7fac:	90 8f       	std	Z+24, r25	; 0x18
    7fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7fb0:	8b 8a       	std	Y+19, r8	; 0x13
    7fb2:	88 87       	std	Y+8, r24	; 0x08
    7fb4:	86 86       	std	Z+14, r8	; 0x0e
    7fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7fb8:	83 83       	std	Z+3, r24	; 0x03
    7fba:	82 82       	std	Z+2, r8	; 0x02
    7fbc:	82 81       	ldd	r24, Z+2	; 0x02
    7fbe:	81 81       	ldd	r24, Z+1	; 0x01
    7fc0:	81 81       	ldd	r24, Z+1	; 0x01
    7fc2:	81 81       	ldd	r24, Z+1	; 0x01
    7fc4:	82 82       	std	Z+2, r8	; 0x02
    7fc6:	82 83       	std	Z+2, r24	; 0x02
    7fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    7fca:	85 86       	std	Z+13, r8	; 0x0d
    7fcc:	86 87       	std	Z+14, r24	; 0x0e
    7fce:	88 8a       	std	Y+16, r8	; 0x10
    7fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    7fd4:	90 91 93 95 	lds	r25, 0x9593
    7fd8:	96 98       	cbi	0x12, 6	; 18
    7fda:	9a 9c       	mul	r9, r10
    7fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    7fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7fe4:	af b2       	in	r10, 0x1f	; 31
    7fe6:	b4 b7       	in	r27, 0x34	; 52
    7fe8:	b9 bc       	out	0x29, r11	; 41
    7fea:	bf c1       	rjmp	.+894    	; 0x836a <waves+0x46a>
    7fec:	c4 c7       	rjmp	.+3976   	; 0x8f76 <LBPrintInt+0x4c>
    7fee:	ca cd       	rjmp	.-1132   	; 0x7b84 <ProcessMusic+0x35a>
    7ff0:	cf d2       	rcall	.+1438   	; 0x8590 <waves+0x690>
    7ff2:	d5 d8       	rcall	.-3670   	; 0x719e <ReadButtons+0x2c>
    7ff4:	db de       	rcall	.-586    	; 0x7dac <steptable+0xa4>
    7ff6:	e1 e4       	ldi	r30, 0x41	; 65
    7ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    7ffa:	ed f0       	brhs	.+58     	; 0x8036 <waves+0x136>
    7ffc:	f4 f7       	brge	.-4      	; 0x7ffa <waves+0xfa>
    7ffe:	fa fd       	.word	0xfdfa	; ????
    8000:	80 81       	ld	r24, Z
    8002:	82 83       	std	Z+2, r24	; 0x02
    8004:	84 85       	ldd	r24, Z+12	; 0x0c
    8006:	86 87       	std	Z+14, r24	; 0x0e
    8008:	88 89       	ldd	r24, Y+16	; 0x10
    800a:	8a 8b       	std	Y+18, r24	; 0x12
    800c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    800e:	8e 8f       	std	Y+30, r24	; 0x1e
    8010:	90 91 92 93 	lds	r25, 0x9392
    8014:	94 95       	.word	0x9594	; ????
    8016:	96 97       	sbiw	r26, 0x26	; 38
    8018:	98 99       	sbic	0x13, 0	; 19
    801a:	9a 9b       	sbis	0x13, 2	; 19
    801c:	9c 9d       	mul	r25, r12
    801e:	9e 9f       	mul	r25, r30
    8020:	a0 a1       	ldd	r26, Z+32	; 0x20
    8022:	a2 a3       	std	Z+34, r26	; 0x22
    8024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8026:	a6 a7       	std	Z+46, r26	; 0x2e
    8028:	a8 a9       	ldd	r26, Y+48	; 0x30
    802a:	aa ab       	std	Y+50, r26	; 0x32
    802c:	ac ad       	ldd	r26, Y+60	; 0x3c
    802e:	ae af       	std	Y+62, r26	; 0x3e
    8030:	b0 b1       	in	r27, 0x00	; 0
    8032:	b2 b3       	in	r27, 0x12	; 18
    8034:	b4 b5       	in	r27, 0x24	; 36
    8036:	b6 b7       	in	r27, 0x36	; 54
    8038:	b8 b9       	out	0x08, r27	; 8
    803a:	ba bb       	out	0x1a, r27	; 26
    803c:	bc bd       	out	0x2c, r27	; 44
    803e:	be bf       	out	0x3e, r27	; 62
    8040:	c0 c1       	rjmp	.+896    	; 0x83c2 <waves+0x4c2>
    8042:	c2 c3       	rjmp	.+1924   	; 0x87c8 <waves+0x8c8>
    8044:	c4 c5       	rjmp	.+2952   	; 0x8bce <DrawMap+0x16>
    8046:	c6 c7       	rjmp	.+3980   	; 0x8fd4 <LBRandom+0x2>
    8048:	c8 c9       	rjmp	.-3184   	; 0x73da <PatchCommand09+0x2>
    804a:	ca cb       	rjmp	.-2156   	; 0x77e0 <TriggerNote+0x36>
    804c:	cc cd       	rjmp	.-1128   	; 0x7be6 <ProcessMusic+0x3bc>
    804e:	ce cf       	rjmp	.-100    	; 0x7fec <waves+0xec>
    8050:	d0 d1       	rcall	.+928    	; 0x83f2 <waves+0x4f2>
    8052:	d2 d3       	rcall	.+1956   	; 0x87f8 <waves+0x8f8>
    8054:	d4 d5       	rcall	.+2984   	; 0x8bfe <DrawMap+0x46>
    8056:	d6 d7       	rcall	.+4012   	; 0x9004 <LBRandom+0x32>
    8058:	d8 d9       	rcall	.-3152   	; 0x740a <PatchCommand11+0x26>
    805a:	da db       	rcall	.-2124   	; 0x7810 <TriggerNote+0x66>
    805c:	dc dd       	rcall	.-1096   	; 0x7c16 <ProcessMusic+0x3ec>
    805e:	de df       	rcall	.-68     	; 0x801c <waves+0x11c>
    8060:	e0 e1       	ldi	r30, 0x10	; 16
    8062:	e2 e3       	ldi	r30, 0x32	; 50
    8064:	e4 e5       	ldi	r30, 0x54	; 84
    8066:	e6 e7       	ldi	r30, 0x76	; 118
    8068:	e8 e9       	ldi	r30, 0x98	; 152
    806a:	ea eb       	ldi	r30, 0xBA	; 186
    806c:	ec ed       	ldi	r30, 0xDC	; 220
    806e:	ee ef       	ldi	r30, 0xFE	; 254
    8070:	f0 f1       	brcs	.+124    	; 0x80ee <waves+0x1ee>
    8072:	f2 f3       	brmi	.-4      	; 0x8070 <waves+0x170>
    8074:	f4 f5       	brge	.+124    	; 0x80f2 <waves+0x1f2>
    8076:	f6 f7       	brtc	.-4      	; 0x8074 <waves+0x174>
    8078:	f8 f9       	.word	0xf9f8	; ????
    807a:	fa fb       	.word	0xfbfa	; ????
    807c:	fc fd       	.word	0xfdfc	; ????
    807e:	fe ff       	.word	0xfffe	; ????
    8080:	00 01       	movw	r0, r0
    8082:	02 03       	mulsu	r16, r18
    8084:	04 05       	cpc	r16, r4
    8086:	06 07       	cpc	r16, r22
    8088:	08 09       	sbc	r16, r8
    808a:	0a 0b       	sbc	r16, r26
    808c:	0c 0d       	add	r16, r12
    808e:	0e 0f       	add	r16, r30
    8090:	10 11       	cpse	r17, r0
    8092:	12 13       	cpse	r17, r18
    8094:	14 15       	cp	r17, r4
    8096:	16 17       	cp	r17, r22
    8098:	18 19       	sub	r17, r8
    809a:	1a 1b       	sub	r17, r26
    809c:	1c 1d       	adc	r17, r12
    809e:	1e 1f       	adc	r17, r30
    80a0:	20 21       	and	r18, r0
    80a2:	22 23       	and	r18, r18
    80a4:	24 25       	eor	r18, r4
    80a6:	26 27       	eor	r18, r22
    80a8:	28 29       	or	r18, r8
    80aa:	2a 2b       	or	r18, r26
    80ac:	2c 2d       	mov	r18, r12
    80ae:	2e 2f       	mov	r18, r30
    80b0:	30 31       	cpi	r19, 0x10	; 16
    80b2:	32 33       	cpi	r19, 0x32	; 50
    80b4:	34 35       	cpi	r19, 0x54	; 84
    80b6:	36 37       	cpi	r19, 0x76	; 118
    80b8:	38 39       	cpi	r19, 0x98	; 152
    80ba:	3a 3b       	cpi	r19, 0xBA	; 186
    80bc:	3c 3d       	cpi	r19, 0xDC	; 220
    80be:	3e 3f       	cpi	r19, 0xFE	; 254
    80c0:	40 41       	sbci	r20, 0x10	; 16
    80c2:	42 43       	sbci	r20, 0x32	; 50
    80c4:	44 45       	sbci	r20, 0x54	; 84
    80c6:	46 47       	sbci	r20, 0x76	; 118
    80c8:	48 49       	sbci	r20, 0x98	; 152
    80ca:	4a 4b       	sbci	r20, 0xBA	; 186
    80cc:	4c 4d       	sbci	r20, 0xDC	; 220
    80ce:	4e 4f       	sbci	r20, 0xFE	; 254
    80d0:	50 51       	subi	r21, 0x10	; 16
    80d2:	52 53       	subi	r21, 0x32	; 50
    80d4:	54 55       	subi	r21, 0x54	; 84
    80d6:	56 57       	subi	r21, 0x76	; 118
    80d8:	58 59       	subi	r21, 0x98	; 152
    80da:	5a 5b       	subi	r21, 0xBA	; 186
    80dc:	5c 5d       	subi	r21, 0xDC	; 220
    80de:	5e 5f       	subi	r21, 0xFE	; 254
    80e0:	60 61       	ori	r22, 0x10	; 16
    80e2:	62 63       	ori	r22, 0x32	; 50
    80e4:	64 65       	ori	r22, 0x54	; 84
    80e6:	66 67       	ori	r22, 0x76	; 118
    80e8:	68 69       	ori	r22, 0x98	; 152
    80ea:	6a 6b       	ori	r22, 0xBA	; 186
    80ec:	6c 6d       	ori	r22, 0xDC	; 220
    80ee:	6e 6f       	ori	r22, 0xFE	; 254
    80f0:	70 71       	andi	r23, 0x10	; 16
    80f2:	72 73       	andi	r23, 0x32	; 50
    80f4:	74 75       	andi	r23, 0x54	; 84
    80f6:	76 77       	andi	r23, 0x76	; 118
    80f8:	78 79       	andi	r23, 0x98	; 152
    80fa:	7a 7b       	andi	r23, 0xBA	; 186
    80fc:	7c 7d       	andi	r23, 0xDC	; 220
    80fe:	7e 7f       	andi	r23, 0xFE	; 254
    8100:	00 02       	muls	r16, r16
    8102:	04 06       	cpc	r0, r20
    8104:	08 0a       	sbc	r0, r24
    8106:	0c 0e       	add	r0, r28
    8108:	10 12       	cpse	r1, r16
    810a:	14 16       	cp	r1, r20
    810c:	18 1a       	sub	r1, r24
    810e:	1c 1e       	adc	r1, r28
    8110:	20 22       	and	r2, r16
    8112:	24 26       	eor	r2, r20
    8114:	28 2a       	or	r2, r24
    8116:	2c 2e       	mov	r2, r28
    8118:	30 32       	cpi	r19, 0x20	; 32
    811a:	34 36       	cpi	r19, 0x64	; 100
    811c:	38 3a       	cpi	r19, 0xA8	; 168
    811e:	3c 3e       	cpi	r19, 0xEC	; 236
    8120:	40 42       	sbci	r20, 0x20	; 32
    8122:	44 46       	sbci	r20, 0x64	; 100
    8124:	48 4a       	sbci	r20, 0xA8	; 168
    8126:	4c 4e       	sbci	r20, 0xEC	; 236
    8128:	50 52       	subi	r21, 0x20	; 32
    812a:	54 56       	subi	r21, 0x64	; 100
    812c:	58 5a       	subi	r21, 0xA8	; 168
    812e:	5c 5e       	subi	r21, 0xEC	; 236
    8130:	60 62       	ori	r22, 0x20	; 32
    8132:	64 66       	ori	r22, 0x64	; 100
    8134:	68 6a       	ori	r22, 0xA8	; 168
    8136:	6c 6e       	ori	r22, 0xEC	; 236
    8138:	70 72       	andi	r23, 0x20	; 32
    813a:	74 76       	andi	r23, 0x64	; 100
    813c:	78 7a       	andi	r23, 0xA8	; 168
    813e:	7c 7e       	andi	r23, 0xEC	; 236
    8140:	7f 7d       	andi	r23, 0xDF	; 223
    8142:	7b 79       	andi	r23, 0x9B	; 155
    8144:	77 75       	andi	r23, 0x57	; 87
    8146:	73 71       	andi	r23, 0x13	; 19
    8148:	6f 6d       	ori	r22, 0xDF	; 223
    814a:	6b 69       	ori	r22, 0x9B	; 155
    814c:	67 65       	ori	r22, 0x57	; 87
    814e:	63 61       	ori	r22, 0x13	; 19
    8150:	5f 5d       	subi	r21, 0xDF	; 223
    8152:	5b 59       	subi	r21, 0x9B	; 155
    8154:	57 55       	subi	r21, 0x57	; 87
    8156:	53 51       	subi	r21, 0x13	; 19
    8158:	4f 4d       	sbci	r20, 0xDF	; 223
    815a:	4b 49       	sbci	r20, 0x9B	; 155
    815c:	47 45       	sbci	r20, 0x57	; 87
    815e:	43 41       	sbci	r20, 0x13	; 19
    8160:	3f 3d       	cpi	r19, 0xDF	; 223
    8162:	3b 39       	cpi	r19, 0x9B	; 155
    8164:	37 35       	cpi	r19, 0x57	; 87
    8166:	33 31       	cpi	r19, 0x13	; 19
    8168:	2f 2d       	mov	r18, r15
    816a:	2b 29       	or	r18, r11
    816c:	27 25       	eor	r18, r7
    816e:	23 21       	and	r18, r3
    8170:	1f 1d       	adc	r17, r15
    8172:	1b 19       	sub	r17, r11
    8174:	17 15       	cp	r17, r7
    8176:	13 11       	cpse	r17, r3
    8178:	0f 0d       	add	r16, r15
    817a:	0b 09       	sbc	r16, r11
    817c:	07 05       	cpc	r16, r7
    817e:	03 01       	movw	r0, r6
    8180:	ff fd       	.word	0xfdff	; ????
    8182:	fb f9       	.word	0xf9fb	; ????
    8184:	f7 f5       	brid	.+124    	; 0x8202 <waves+0x302>
    8186:	f3 f1       	brvs	.+124    	; 0x8204 <waves+0x304>
    8188:	ef ed       	ldi	r30, 0xDF	; 223
    818a:	eb e9       	ldi	r30, 0x9B	; 155
    818c:	e7 e5       	ldi	r30, 0x57	; 87
    818e:	e3 e1       	ldi	r30, 0x13	; 19
    8190:	df dd       	rcall	.-1090   	; 0x7d50 <steptable+0x48>
    8192:	db d9       	rcall	.-3146   	; 0x754a <StartSong+0x6>
    8194:	d7 d5       	rcall	.+2990   	; 0x8d44 <ProcessFading+0xa>
    8196:	d3 d1       	rcall	.+934    	; 0x853e <waves+0x63e>
    8198:	cf cd       	rjmp	.-1122   	; 0x7d38 <steptable+0x30>
    819a:	cb c9       	rjmp	.-3178   	; 0x7532 <InitMusicPlayer+0x32>
    819c:	c7 c5       	rjmp	.+2958   	; 0x8d2c <FadeOut+0xa>
    819e:	c3 c1       	rjmp	.+902    	; 0x8526 <waves+0x626>
    81a0:	bf bd       	out	0x2f, r27	; 47
    81a2:	bb b9       	out	0x0b, r27	; 11
    81a4:	b7 b5       	in	r27, 0x27	; 39
    81a6:	b3 b1       	in	r27, 0x03	; 3
    81a8:	af ad       	ldd	r26, Y+63	; 0x3f
    81aa:	ab a9       	ldd	r26, Y+51	; 0x33
    81ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    81ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    81b0:	9f 9d       	mul	r25, r15
    81b2:	9b 99       	sbic	0x13, 3	; 19
    81b4:	97 95       	ror	r25
    81b6:	93 91       	.word	0x9193	; ????
    81b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    81ba:	8b 89       	ldd	r24, Y+19	; 0x13
    81bc:	87 85       	ldd	r24, Z+15	; 0x0f
    81be:	83 81       	ldd	r24, Z+3	; 0x03
    81c0:	80 82       	st	Z, r8
    81c2:	84 86       	std	Z+12, r8	; 0x0c
    81c4:	88 8a       	std	Y+16, r8	; 0x10
    81c6:	8c 8e       	std	Y+28, r8	; 0x1c
    81c8:	90 92 94 96 	sts	0x9694, r9
    81cc:	98 9a       	sbi	0x13, 0	; 19
    81ce:	9c 9e       	mul	r9, r28
    81d0:	a0 a2       	std	Z+32, r10	; 0x20
    81d2:	a4 a6       	std	Z+44, r10	; 0x2c
    81d4:	a8 aa       	std	Y+48, r10	; 0x30
    81d6:	ac ae       	std	Y+60, r10	; 0x3c
    81d8:	b0 b2       	in	r11, 0x10	; 16
    81da:	b4 b6       	in	r11, 0x34	; 52
    81dc:	b8 ba       	out	0x18, r11	; 24
    81de:	bc be       	out	0x3c, r11	; 60
    81e0:	c0 c2       	rjmp	.+1408   	; 0x8762 <waves+0x862>
    81e2:	c4 c6       	rjmp	.+3464   	; 0x8f6c <LBPrintInt+0x42>
    81e4:	c8 ca       	rjmp	.-2672   	; 0x7776 <TriggerFx+0x5c>
    81e6:	cc ce       	rjmp	.-616    	; 0x7f80 <waves+0x80>
    81e8:	d0 d2       	rcall	.+1440   	; 0x878a <waves+0x88a>
    81ea:	d4 d6       	rcall	.+3496   	; 0x8f94 <LBCollides+0xe>
    81ec:	d8 da       	rcall	.-2640   	; 0x779e <TriggerFx+0x84>
    81ee:	dc de       	rcall	.-584    	; 0x7fa8 <waves+0xa8>
    81f0:	e0 e2       	ldi	r30, 0x20	; 32
    81f2:	e4 e6       	ldi	r30, 0x64	; 100
    81f4:	e8 ea       	ldi	r30, 0xA8	; 168
    81f6:	ec ee       	ldi	r30, 0xEC	; 236
    81f8:	f0 f2       	brcs	.-68     	; 0x81b6 <waves+0x2b6>
    81fa:	f4 f6       	brge	.-68     	; 0x81b8 <waves+0x2b8>
    81fc:	f8 fa       	.word	0xfaf8	; ????
    81fe:	fc fe       	.word	0xfefc	; ????
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	80 80       	ld	r8, Z
    8242:	80 80       	ld	r8, Z
    8244:	80 80       	ld	r8, Z
    8246:	80 80       	ld	r8, Z
    8248:	80 80       	ld	r8, Z
    824a:	80 80       	ld	r8, Z
    824c:	80 80       	ld	r8, Z
    824e:	80 80       	ld	r8, Z
    8250:	80 80       	ld	r8, Z
    8252:	80 80       	ld	r8, Z
    8254:	80 80       	ld	r8, Z
    8256:	80 80       	ld	r8, Z
    8258:	80 80       	ld	r8, Z
    825a:	80 80       	ld	r8, Z
    825c:	80 80       	ld	r8, Z
    825e:	80 80       	ld	r8, Z
    8260:	80 80       	ld	r8, Z
    8262:	80 80       	ld	r8, Z
    8264:	80 80       	ld	r8, Z
    8266:	80 80       	ld	r8, Z
    8268:	80 80       	ld	r8, Z
    826a:	80 80       	ld	r8, Z
    826c:	80 80       	ld	r8, Z
    826e:	80 80       	ld	r8, Z
    8270:	80 80       	ld	r8, Z
    8272:	80 80       	ld	r8, Z
    8274:	80 80       	ld	r8, Z
    8276:	80 80       	ld	r8, Z
    8278:	80 80       	ld	r8, Z
    827a:	80 80       	ld	r8, Z
    827c:	80 80       	ld	r8, Z
    827e:	80 80       	ld	r8, Z
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	80 80       	ld	r8, Z
    8382:	80 80       	ld	r8, Z
    8384:	80 80       	ld	r8, Z
    8386:	80 80       	ld	r8, Z
    8388:	80 80       	ld	r8, Z
    838a:	80 80       	ld	r8, Z
    838c:	80 80       	ld	r8, Z
    838e:	80 80       	ld	r8, Z
    8390:	80 80       	ld	r8, Z
    8392:	80 80       	ld	r8, Z
    8394:	80 80       	ld	r8, Z
    8396:	80 80       	ld	r8, Z
    8398:	80 80       	ld	r8, Z
    839a:	80 80       	ld	r8, Z
    839c:	80 80       	ld	r8, Z
    839e:	80 80       	ld	r8, Z
    83a0:	80 80       	ld	r8, Z
    83a2:	80 80       	ld	r8, Z
    83a4:	80 80       	ld	r8, Z
    83a6:	80 80       	ld	r8, Z
    83a8:	80 80       	ld	r8, Z
    83aa:	80 80       	ld	r8, Z
    83ac:	80 80       	ld	r8, Z
    83ae:	80 80       	ld	r8, Z
    83b0:	80 80       	ld	r8, Z
    83b2:	80 80       	ld	r8, Z
    83b4:	80 80       	ld	r8, Z
    83b6:	80 80       	ld	r8, Z
    83b8:	80 80       	ld	r8, Z
    83ba:	80 80       	ld	r8, Z
    83bc:	80 80       	ld	r8, Z
    83be:	80 80       	ld	r8, Z
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	7f 7f       	andi	r23, 0xFF	; 255
    8402:	7f 7f       	andi	r23, 0xFF	; 255
    8404:	7f 7f       	andi	r23, 0xFF	; 255
    8406:	7f 7f       	andi	r23, 0xFF	; 255
    8408:	7f 7f       	andi	r23, 0xFF	; 255
    840a:	7f 7f       	andi	r23, 0xFF	; 255
    840c:	7f 7f       	andi	r23, 0xFF	; 255
    840e:	7f 7f       	andi	r23, 0xFF	; 255
    8410:	7f 7f       	andi	r23, 0xFF	; 255
    8412:	7f 7f       	andi	r23, 0xFF	; 255
    8414:	7f 7f       	andi	r23, 0xFF	; 255
    8416:	7f 7f       	andi	r23, 0xFF	; 255
    8418:	7f 7f       	andi	r23, 0xFF	; 255
    841a:	7f 7f       	andi	r23, 0xFF	; 255
    841c:	7f 7f       	andi	r23, 0xFF	; 255
    841e:	7f 7f       	andi	r23, 0xFF	; 255
    8420:	7f 7f       	andi	r23, 0xFF	; 255
    8422:	7f 7f       	andi	r23, 0xFF	; 255
    8424:	7f 7f       	andi	r23, 0xFF	; 255
    8426:	7f 7f       	andi	r23, 0xFF	; 255
    8428:	7f 7f       	andi	r23, 0xFF	; 255
    842a:	7f 7f       	andi	r23, 0xFF	; 255
    842c:	7f 7f       	andi	r23, 0xFF	; 255
    842e:	7f 7f       	andi	r23, 0xFF	; 255
    8430:	7f 7f       	andi	r23, 0xFF	; 255
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7f       	andi	r23, 0xFF	; 255
    844e:	7f 7f       	andi	r23, 0xFF	; 255
    8450:	7f 7f       	andi	r23, 0xFF	; 255
    8452:	7f 7f       	andi	r23, 0xFF	; 255
    8454:	7f 7f       	andi	r23, 0xFF	; 255
    8456:	7f 7f       	andi	r23, 0xFF	; 255
    8458:	7f 7f       	andi	r23, 0xFF	; 255
    845a:	7f 7f       	andi	r23, 0xFF	; 255
    845c:	7f 7f       	andi	r23, 0xFF	; 255
    845e:	7f 7f       	andi	r23, 0xFF	; 255
    8460:	7f 7f       	andi	r23, 0xFF	; 255
    8462:	7f 7f       	andi	r23, 0xFF	; 255
    8464:	7f 7f       	andi	r23, 0xFF	; 255
    8466:	7f 7f       	andi	r23, 0xFF	; 255
    8468:	7f 7f       	andi	r23, 0xFF	; 255
    846a:	7f 7f       	andi	r23, 0xFF	; 255
    846c:	7f 7f       	andi	r23, 0xFF	; 255
    846e:	7f 7f       	andi	r23, 0xFF	; 255
    8470:	7f 7f       	andi	r23, 0xFF	; 255
    8472:	7f 7f       	andi	r23, 0xFF	; 255
    8474:	7f 7f       	andi	r23, 0xFF	; 255
    8476:	7f 7f       	andi	r23, 0xFF	; 255
    8478:	7f 7f       	andi	r23, 0xFF	; 255
    847a:	7f 7f       	andi	r23, 0xFF	; 255
    847c:	7f 7f       	andi	r23, 0xFF	; 255
    847e:	7f 7f       	andi	r23, 0xFF	; 255
    8480:	7f 7f       	andi	r23, 0xFF	; 255
    8482:	7f 7f       	andi	r23, 0xFF	; 255
    8484:	7f 7f       	andi	r23, 0xFF	; 255
    8486:	7f 7f       	andi	r23, 0xFF	; 255
    8488:	7f 7f       	andi	r23, 0xFF	; 255
    848a:	7f 7f       	andi	r23, 0xFF	; 255
    848c:	7f 7f       	andi	r23, 0xFF	; 255
    848e:	7f 7f       	andi	r23, 0xFF	; 255
    8490:	7f 7f       	andi	r23, 0xFF	; 255
    8492:	7f 7f       	andi	r23, 0xFF	; 255
    8494:	7f 7f       	andi	r23, 0xFF	; 255
    8496:	7f 7f       	andi	r23, 0xFF	; 255
    8498:	7f 7f       	andi	r23, 0xFF	; 255
    849a:	7f 7f       	andi	r23, 0xFF	; 255
    849c:	7f 7f       	andi	r23, 0xFF	; 255
    849e:	7f 7f       	andi	r23, 0xFF	; 255
    84a0:	7f 7f       	andi	r23, 0xFF	; 255
    84a2:	7f 7f       	andi	r23, 0xFF	; 255
    84a4:	7f 7f       	andi	r23, 0xFF	; 255
    84a6:	7f 7f       	andi	r23, 0xFF	; 255
    84a8:	7f 7f       	andi	r23, 0xFF	; 255
    84aa:	7f 7f       	andi	r23, 0xFF	; 255
    84ac:	7f 7f       	andi	r23, 0xFF	; 255
    84ae:	7f 7f       	andi	r23, 0xFF	; 255
    84b0:	7f 7f       	andi	r23, 0xFF	; 255
    84b2:	7f 7f       	andi	r23, 0xFF	; 255
    84b4:	7f 7f       	andi	r23, 0xFF	; 255
    84b6:	7f 7f       	andi	r23, 0xFF	; 255
    84b8:	7f 7f       	andi	r23, 0xFF	; 255
    84ba:	7f 7f       	andi	r23, 0xFF	; 255
    84bc:	7f 7f       	andi	r23, 0xFF	; 255
    84be:	7f 7f       	andi	r23, 0xFF	; 255
    84c0:	80 80       	ld	r8, Z
    84c2:	80 80       	ld	r8, Z
    84c4:	80 80       	ld	r8, Z
    84c6:	80 80       	ld	r8, Z
    84c8:	80 80       	ld	r8, Z
    84ca:	80 80       	ld	r8, Z
    84cc:	80 80       	ld	r8, Z
    84ce:	80 80       	ld	r8, Z
    84d0:	80 80       	ld	r8, Z
    84d2:	80 80       	ld	r8, Z
    84d4:	80 80       	ld	r8, Z
    84d6:	80 80       	ld	r8, Z
    84d8:	80 80       	ld	r8, Z
    84da:	80 80       	ld	r8, Z
    84dc:	80 80       	ld	r8, Z
    84de:	80 80       	ld	r8, Z
    84e0:	80 80       	ld	r8, Z
    84e2:	80 80       	ld	r8, Z
    84e4:	80 80       	ld	r8, Z
    84e6:	80 80       	ld	r8, Z
    84e8:	80 80       	ld	r8, Z
    84ea:	80 80       	ld	r8, Z
    84ec:	80 80       	ld	r8, Z
    84ee:	80 80       	ld	r8, Z
    84f0:	80 80       	ld	r8, Z
    84f2:	80 80       	ld	r8, Z
    84f4:	80 80       	ld	r8, Z
    84f6:	80 80       	ld	r8, Z
    84f8:	80 80       	ld	r8, Z
    84fa:	80 80       	ld	r8, Z
    84fc:	80 80       	ld	r8, Z
    84fe:	80 80       	ld	r8, Z
    8500:	03 09       	sbc	r16, r3
    8502:	13 1e       	adc	r1, r19
    8504:	28 31       	cpi	r18, 0x18	; 24
    8506:	3a 40       	sbci	r19, 0x0A	; 10
    8508:	46 4c       	sbci	r20, 0xC6	; 198
    850a:	50 54       	subi	r21, 0x40	; 64
    850c:	58 5b       	subi	r21, 0xB8	; 184
    850e:	5e 61       	ori	r21, 0x1E	; 30
    8510:	63 65       	ori	r22, 0x53	; 83
    8512:	67 69       	ori	r22, 0x97	; 151
    8514:	6b 6c       	ori	r22, 0xCB	; 203
    8516:	6e 6f       	ori	r22, 0xFE	; 254
    8518:	70 71       	andi	r23, 0x10	; 16
    851a:	72 73       	andi	r23, 0x32	; 50
    851c:	74 75       	andi	r23, 0x54	; 84
    851e:	76 77       	andi	r23, 0x76	; 118
    8520:	77 78       	andi	r23, 0x87	; 135
    8522:	79 79       	andi	r23, 0x99	; 153
    8524:	7a 7a       	andi	r23, 0xAA	; 170
    8526:	7b 7b       	andi	r23, 0xBB	; 187
    8528:	7c 7c       	andi	r23, 0xCC	; 204
    852a:	7c 7d       	andi	r23, 0xDC	; 220
    852c:	7d 7d       	andi	r23, 0xDD	; 221
    852e:	7e 7e       	andi	r23, 0xEE	; 238
    8530:	7e 7e       	andi	r23, 0xEE	; 238
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7f 7f       	andi	r23, 0xFF	; 255
    8548:	7f 7f       	andi	r23, 0xFF	; 255
    854a:	7f 7f       	andi	r23, 0xFF	; 255
    854c:	7f 7e       	andi	r23, 0xEF	; 239
    854e:	7e 7e       	andi	r23, 0xEE	; 238
    8550:	7e 7d       	andi	r23, 0xDE	; 222
    8552:	7d 7d       	andi	r23, 0xDD	; 221
    8554:	7c 7c       	andi	r23, 0xCC	; 204
    8556:	7c 7b       	andi	r23, 0xBC	; 188
    8558:	7b 7a       	andi	r23, 0xAB	; 171
    855a:	7a 79       	andi	r23, 0x9A	; 154
    855c:	79 78       	andi	r23, 0x89	; 137
    855e:	77 77       	andi	r23, 0x77	; 119
    8560:	76 75       	andi	r23, 0x56	; 86
    8562:	74 73       	andi	r23, 0x34	; 52
    8564:	72 71       	andi	r23, 0x12	; 18
    8566:	70 6f       	ori	r23, 0xF0	; 240
    8568:	6e 6c       	ori	r22, 0xCE	; 206
    856a:	6b 69       	ori	r22, 0x9B	; 155
    856c:	67 65       	ori	r22, 0x57	; 87
    856e:	63 61       	ori	r22, 0x13	; 19
    8570:	5e 5b       	subi	r21, 0xBE	; 190
    8572:	58 54       	subi	r21, 0x48	; 72
    8574:	50 4c       	sbci	r21, 0xC0	; 192
    8576:	46 40       	sbci	r20, 0x06	; 6
    8578:	3a 31       	cpi	r19, 0x1A	; 26
    857a:	28 1e       	adc	r2, r24
    857c:	13 09       	sbc	r17, r3
    857e:	03 00       	.word	0x0003	; ????
    8580:	c6 cc       	rjmp	.-1652   	; 0x7f0e <waves+0xe>
    8582:	d5 db       	rcall	.-2134   	; 0x7d2e <steptable+0x26>
    8584:	df e3       	ldi	r29, 0x3F	; 63
    8586:	e5 e7       	ldi	r30, 0x75	; 117
    8588:	e9 ea       	ldi	r30, 0xA9	; 169
    858a:	eb ec       	ldi	r30, 0xCB	; 203
    858c:	ed ee       	ldi	r30, 0xED	; 237
    858e:	ef ef       	ldi	r30, 0xFF	; 255
    8590:	f0 f0       	brcs	.+60     	; 0x85ce <waves+0x6ce>
    8592:	f0 f1       	brcs	.+124    	; 0x8610 <waves+0x710>
    8594:	f1 f1       	breq	.+124    	; 0x8612 <waves+0x712>
    8596:	f1 f2       	breq	.-68     	; 0x8554 <waves+0x654>
    8598:	f2 f2       	brmi	.-68     	; 0x8556 <waves+0x656>
    859a:	f2 f2       	brmi	.-68     	; 0x8558 <waves+0x658>
    859c:	f2 f2       	brmi	.-68     	; 0x855a <waves+0x65a>
    859e:	f2 f3       	brmi	.-4      	; 0x859c <waves+0x69c>
    85a0:	f3 f3       	brvs	.-4      	; 0x859e <waves+0x69e>
    85a2:	f3 f3       	brvs	.-4      	; 0x85a0 <waves+0x6a0>
    85a4:	f3 f3       	brvs	.-4      	; 0x85a2 <waves+0x6a2>
    85a6:	f3 f3       	brvs	.-4      	; 0x85a4 <waves+0x6a4>
    85a8:	f3 f3       	brvs	.-4      	; 0x85a6 <waves+0x6a6>
    85aa:	f3 f3       	brvs	.-4      	; 0x85a8 <waves+0x6a8>
    85ac:	f3 f3       	brvs	.-4      	; 0x85aa <waves+0x6aa>
    85ae:	f3 f3       	brvs	.-4      	; 0x85ac <waves+0x6ac>
    85b0:	f3 f3       	brvs	.-4      	; 0x85ae <waves+0x6ae>
    85b2:	f3 f3       	brvs	.-4      	; 0x85b0 <waves+0x6b0>
    85b4:	f3 f3       	brvs	.-4      	; 0x85b2 <waves+0x6b2>
    85b6:	f3 f3       	brvs	.-4      	; 0x85b4 <waves+0x6b4>
    85b8:	f3 f3       	brvs	.-4      	; 0x85b6 <waves+0x6b6>
    85ba:	f3 f3       	brvs	.-4      	; 0x85b8 <waves+0x6b8>
    85bc:	f3 f3       	brvs	.-4      	; 0x85ba <waves+0x6ba>
    85be:	f3 f3       	brvs	.-4      	; 0x85bc <waves+0x6bc>
    85c0:	f3 f3       	brvs	.-4      	; 0x85be <waves+0x6be>
    85c2:	f3 f3       	brvs	.-4      	; 0x85c0 <waves+0x6c0>
    85c4:	f3 f3       	brvs	.-4      	; 0x85c2 <waves+0x6c2>
    85c6:	f3 f3       	brvs	.-4      	; 0x85c4 <waves+0x6c4>
    85c8:	f3 f3       	brvs	.-4      	; 0x85c6 <waves+0x6c6>
    85ca:	f3 f3       	brvs	.-4      	; 0x85c8 <waves+0x6c8>
    85cc:	f3 f3       	brvs	.-4      	; 0x85ca <waves+0x6ca>
    85ce:	f3 f3       	brvs	.-4      	; 0x85cc <waves+0x6cc>
    85d0:	f3 f3       	brvs	.-4      	; 0x85ce <waves+0x6ce>
    85d2:	f3 f3       	brvs	.-4      	; 0x85d0 <waves+0x6d0>
    85d4:	f3 f3       	brvs	.-4      	; 0x85d2 <waves+0x6d2>
    85d6:	f3 f3       	brvs	.-4      	; 0x85d4 <waves+0x6d4>
    85d8:	f3 f3       	brvs	.-4      	; 0x85d6 <waves+0x6d6>
    85da:	f3 f3       	brvs	.-4      	; 0x85d8 <waves+0x6d8>
    85dc:	f3 f3       	brvs	.-4      	; 0x85da <waves+0x6da>
    85de:	f3 f3       	brvs	.-4      	; 0x85dc <waves+0x6dc>
    85e0:	f2 f2       	brmi	.-68     	; 0x859e <waves+0x69e>
    85e2:	f2 f2       	brmi	.-68     	; 0x85a0 <waves+0x6a0>
    85e4:	f2 f2       	brmi	.-68     	; 0x85a2 <waves+0x6a2>
    85e6:	f2 f2       	brmi	.-68     	; 0x85a4 <waves+0x6a4>
    85e8:	f1 f1       	breq	.+124    	; 0x8666 <waves+0x766>
    85ea:	f1 f1       	breq	.+124    	; 0x8668 <waves+0x768>
    85ec:	f0 f0       	brcs	.+60     	; 0x862a <waves+0x72a>
    85ee:	f0 ef       	ldi	r31, 0xF0	; 240
    85f0:	ef ee       	ldi	r30, 0xEF	; 239
    85f2:	ed ec       	ldi	r30, 0xCD	; 205
    85f4:	eb ea       	ldi	r30, 0xAB	; 171
    85f6:	e9 e7       	ldi	r30, 0x79	; 121
    85f8:	e5 e3       	ldi	r30, 0x35	; 53
    85fa:	df db       	rcall	.-2114   	; 0x7dba <steptable+0xb2>
    85fc:	d5 cc       	rjmp	.-1622   	; 0x7fa8 <waves+0xa8>
    85fe:	c6 00       	.word	0x00c6	; ????
    8600:	00 28       	or	r0, r0
    8602:	3d 42       	sbci	r19, 0x2D	; 45
    8604:	30 2d       	mov	r19, r0
    8606:	2c 2b       	or	r18, r28
    8608:	2c 2d       	mov	r18, r12
    860a:	2e 2f       	mov	r18, r30
    860c:	30 32       	cpi	r19, 0x20	; 32
    860e:	33 35       	cpi	r19, 0x53	; 83
    8610:	37 39       	cpi	r19, 0x97	; 151
    8612:	3b 3d       	cpi	r19, 0xDB	; 219
    8614:	3f 41       	sbci	r19, 0x1F	; 31
    8616:	43 45       	sbci	r20, 0x53	; 83
    8618:	48 4a       	sbci	r20, 0xA8	; 168
    861a:	4c 4e       	sbci	r20, 0xEC	; 236
    861c:	50 53       	subi	r21, 0x30	; 48
    861e:	55 57       	subi	r21, 0x75	; 117
    8620:	59 5b       	subi	r21, 0xB9	; 185
    8622:	5d 5f       	subi	r21, 0xFD	; 253
    8624:	61 63       	ori	r22, 0x31	; 49
    8626:	65 67       	ori	r22, 0x75	; 117
    8628:	69 6b       	ori	r22, 0xB9	; 185
    862a:	6c 6e       	ori	r22, 0xEC	; 236
    862c:	70 71       	andi	r23, 0x10	; 16
    862e:	73 74       	andi	r23, 0x43	; 67
    8630:	75 77       	andi	r23, 0x75	; 117
    8632:	78 79       	andi	r23, 0x98	; 152
    8634:	7a 7b       	andi	r23, 0xBA	; 186
    8636:	7c 7d       	andi	r23, 0xDC	; 220
    8638:	7d 7e       	andi	r23, 0xED	; 237
    863a:	7e 7f       	andi	r23, 0xFE	; 254
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7e 7e       	andi	r23, 0xEE	; 238
    8648:	7d 7d       	andi	r23, 0xDD	; 221
    864a:	7c 7b       	andi	r23, 0xBC	; 188
    864c:	7a 79       	andi	r23, 0x9A	; 154
    864e:	78 77       	andi	r23, 0x78	; 120
    8650:	75 74       	andi	r23, 0x45	; 69
    8652:	73 71       	andi	r23, 0x13	; 19
    8654:	70 6e       	ori	r23, 0xE0	; 224
    8656:	6c 6b       	ori	r22, 0xBC	; 188
    8658:	69 67       	ori	r22, 0x79	; 121
    865a:	65 63       	ori	r22, 0x35	; 53
    865c:	61 5f       	subi	r22, 0xF1	; 241
    865e:	5d 5b       	subi	r21, 0xBD	; 189
    8660:	59 57       	subi	r21, 0x79	; 121
    8662:	55 53       	subi	r21, 0x35	; 53
    8664:	50 4e       	sbci	r21, 0xE0	; 224
    8666:	4c 4a       	sbci	r20, 0xAC	; 172
    8668:	48 45       	sbci	r20, 0x58	; 88
    866a:	43 41       	sbci	r20, 0x13	; 19
    866c:	3f 3d       	cpi	r19, 0xDF	; 223
    866e:	3b 39       	cpi	r19, 0x9B	; 155
    8670:	37 35       	cpi	r19, 0x57	; 87
    8672:	33 32       	cpi	r19, 0x23	; 35
    8674:	30 2f       	mov	r19, r16
    8676:	2e 2d       	mov	r18, r14
    8678:	2c 2b       	or	r18, r28
    867a:	2c 2d       	mov	r18, r12
    867c:	30 42       	sbci	r19, 0x20	; 32
    867e:	3d 28       	or	r3, r13
    8680:	00 e9       	ldi	r16, 0x90	; 144
    8682:	e5 fe       	sbrs	r14, 5
    8684:	d4 d7       	rcall	.+4008   	; 0x962e <init_enemy_shark+0xc6>
    8686:	d7 d7       	rcall	.+4014   	; 0x9636 <clear_overlay+0x4>
    8688:	d6 d4       	rcall	.+2476   	; 0x9036 <LBRandom+0x64>
    868a:	d2 d0       	rcall	.+420    	; 0x8830 <waves+0x930>
    868c:	ce cc       	rjmp	.-1636   	; 0x802a <waves+0x12a>
    868e:	ca c8       	rjmp	.-3692   	; 0x7824 <TriggerNote+0x7a>
    8690:	c6 c3       	rjmp	.+1932   	; 0x8e1e <LBGetJoyPadState+0x46>
    8692:	c1 bf       	out	0x31, r28	; 49
    8694:	bd ba       	out	0x1d, r11	; 29
    8696:	b8 b6       	in	r11, 0x38	; 56
    8698:	b4 b1       	in	r27, 0x04	; 4
    869a:	af ad       	ldd	r26, Y+63	; 0x3f
    869c:	ab a9       	ldd	r26, Y+51	; 0x33
    869e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    86a2:	9f 9e       	mul	r9, r31
    86a4:	9c 9a       	sbi	0x13, 4	; 19
    86a6:	99 97       	sbiw	r26, 0x29	; 41
    86a8:	95 94       	asr	r9
    86aa:	93 91       	.word	0x9193	; ????
    86ac:	90 8f       	std	Z+24, r25	; 0x18
    86ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    86b0:	8b 8a       	std	Y+19, r8	; 0x13
    86b2:	89 88       	ldd	r8, Y+17	; 0x11
    86b4:	88 87       	std	Y+8, r24	; 0x08
    86b6:	86 85       	ldd	r24, Z+14	; 0x0e
    86b8:	85 84       	ldd	r8, Z+13	; 0x0d
    86ba:	84 84       	ldd	r8, Z+12	; 0x0c
    86bc:	83 83       	std	Z+3, r24	; 0x03
    86be:	83 83       	std	Z+3, r24	; 0x03
    86c0:	83 83       	std	Z+3, r24	; 0x03
    86c2:	83 83       	std	Z+3, r24	; 0x03
    86c4:	83 84       	ldd	r8, Z+11	; 0x0b
    86c6:	84 84       	ldd	r8, Z+12	; 0x0c
    86c8:	85 85       	ldd	r24, Z+13	; 0x0d
    86ca:	86 87       	std	Z+14, r24	; 0x0e
    86cc:	88 88       	ldd	r8, Y+16	; 0x10
    86ce:	89 8a       	std	Y+17, r8	; 0x11
    86d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    86d2:	8d 8f       	std	Y+29, r24	; 0x1d
    86d4:	90 91 93 94 	lds	r25, 0x9493
    86d8:	95 97       	sbiw	r26, 0x25	; 37
    86da:	99 9a       	sbi	0x13, 1	; 19
    86dc:	9c 9e       	mul	r9, r28
    86de:	9f a1       	ldd	r25, Y+39	; 0x27
    86e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    86e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    86e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    86e6:	af b1       	in	r26, 0x0f	; 15
    86e8:	b4 b6       	in	r11, 0x34	; 52
    86ea:	b8 ba       	out	0x18, r11	; 24
    86ec:	bd bf       	out	0x3d, r27	; 61
    86ee:	c1 c3       	rjmp	.+1922   	; 0x8e72 <LBPrintChar+0x4>
    86f0:	c6 c8       	rjmp	.-3700   	; 0x787e <ProcessMusic+0x54>
    86f2:	ca cc       	rjmp	.-1644   	; 0x8088 <waves+0x188>
    86f4:	ce d0       	rcall	.+412    	; 0x8892 <waves+0x992>
    86f6:	d2 d4       	rcall	.+2468   	; 0x909c <LBMapSprite+0x42>
    86f8:	d6 d7       	rcall	.+4012   	; 0x96a6 <get_level_tile+0x4>
    86fa:	d7 d7       	rcall	.+4014   	; 0x96aa <get_level_tile+0x8>
    86fc:	d4 fe       	sbrs	r13, 4
    86fe:	e5 e9       	ldi	r30, 0x95	; 149
    8700:	f9 f8       	.word	0xf8f9	; ????
    8702:	f9 f5       	brne	.+126    	; 0x8782 <waves+0x882>
    8704:	eb e1       	ldi	r30, 0x1B	; 27
    8706:	dd de       	rcall	.-582    	; 0x84c2 <waves+0x5c2>
    8708:	e0 e2       	ldi	r30, 0x20	; 32
    870a:	e4 e5       	ldi	r30, 0x54	; 84
    870c:	e6 e5       	ldi	r30, 0x56	; 86
    870e:	e4 e2       	ldi	r30, 0x24	; 36
    8710:	de d9       	rcall	.-3140   	; 0x7ace <ProcessMusic+0x2a4>
    8712:	d2 ca       	rjmp	.-2652   	; 0x7cb8 <SetMixerWave+0x1c>
    8714:	c1 b7       	in	r28, 0x31	; 49
    8716:	ac a2       	std	Y+36, r10	; 0x24
    8718:	99 91       	ld	r25, Y+
    871a:	8a 86       	std	Y+10, r8	; 0x0a
    871c:	83 81       	ldd	r24, Z+3	; 0x03
    871e:	80 80       	ld	r8, Z
    8720:	81 82       	std	Z+1, r8	; 0x01
    8722:	83 85       	ldd	r24, Z+11	; 0x0b
    8724:	86 88       	ldd	r8, Z+22	; 0x16
    8726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8728:	8d 8f       	std	Y+29, r24	; 0x1d
    872a:	90 92 93 95 	sts	0x9593, r9
    872e:	96 97       	sbiw	r26, 0x26	; 38
    8730:	98 99       	sbic	0x13, 0	; 19
    8732:	9a 9b       	sbis	0x13, 2	; 19
    8734:	9b 9c       	mul	r9, r11
    8736:	9d 9d       	mul	r25, r13
    8738:	9d 9e       	mul	r9, r29
    873a:	9e 9e       	mul	r9, r30
    873c:	9f 9f       	mul	r25, r31
    873e:	9f 9f       	mul	r25, r31
    8740:	9f 9f       	mul	r25, r31
    8742:	9f 9e       	mul	r9, r31
    8744:	9e 9e       	mul	r9, r30
    8746:	9d 9d       	mul	r25, r13
    8748:	9d 9c       	mul	r9, r13
    874a:	9b 9b       	sbis	0x13, 3	; 19
    874c:	9a 99       	sbic	0x13, 2	; 19
    874e:	98 97       	sbiw	r26, 0x28	; 40
    8750:	96 95       	lsr	r25
    8752:	93 92       	.word	0x9293	; ????
    8754:	90 8f       	std	Z+24, r25	; 0x18
    8756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8758:	8a 88       	ldd	r8, Y+18	; 0x12
    875a:	86 85       	ldd	r24, Z+14	; 0x0e
    875c:	83 82       	std	Z+3, r8	; 0x03
    875e:	81 80       	ldd	r8, Z+1	; 0x01
    8760:	80 81       	ld	r24, Z
    8762:	83 86       	std	Z+11, r8	; 0x0b
    8764:	8a 91       	ld	r24, -Y
    8766:	99 a2       	std	Y+33, r9	; 0x21
    8768:	ac b7       	in	r26, 0x3c	; 60
    876a:	c1 ca       	rjmp	.-2686   	; 0x7cee <esmw+0x1c>
    876c:	d2 d9       	rcall	.-3164   	; 0x7b12 <ProcessMusic+0x2e8>
    876e:	de e2       	ldi	r29, 0x2E	; 46
    8770:	e4 e5       	ldi	r30, 0x54	; 84
    8772:	e6 e5       	ldi	r30, 0x56	; 86
    8774:	e4 e2       	ldi	r30, 0x24	; 36
    8776:	e0 de       	rcall	.-576    	; 0x8538 <waves+0x638>
    8778:	dd e1       	ldi	r29, 0x1D	; 29
    877a:	eb f5       	brvc	.+122    	; 0x87f6 <waves+0x8f6>
    877c:	f9 f8       	.word	0xf8f9	; ????
    877e:	f9 00       	.word	0x00f9	; ????
    8780:	07 08       	sbc	r0, r7
    8782:	07 0b       	sbc	r16, r23
    8784:	15 1f       	adc	r17, r21
    8786:	23 22       	and	r2, r19
    8788:	20 1e       	adc	r2, r16
    878a:	1c 1b       	sub	r17, r28
    878c:	1a 1b       	sub	r17, r26
    878e:	1c 1e       	adc	r1, r28
    8790:	22 27       	eor	r18, r18
    8792:	2e 36       	cpi	r18, 0x6E	; 110
    8794:	3f 49       	sbci	r19, 0x9F	; 159
    8796:	54 5e       	subi	r21, 0xE4	; 228
    8798:	67 6f       	ori	r22, 0xF7	; 247
    879a:	76 7a       	andi	r23, 0xA6	; 166
    879c:	7e 7f       	andi	r23, 0xFE	; 254
    879e:	7f 7f       	andi	r23, 0xFF	; 255
    87a0:	7f 7e       	andi	r23, 0xEF	; 239
    87a2:	7d 7b       	andi	r23, 0xBD	; 189
    87a4:	7a 78       	andi	r23, 0x8A	; 138
    87a6:	76 74       	andi	r23, 0x46	; 70
    87a8:	73 71       	andi	r23, 0x13	; 19
    87aa:	70 6e       	ori	r23, 0xE0	; 224
    87ac:	6d 6b       	ori	r22, 0xBD	; 189
    87ae:	6a 69       	ori	r22, 0x9A	; 154
    87b0:	68 67       	ori	r22, 0x78	; 120
    87b2:	66 65       	ori	r22, 0x56	; 86
    87b4:	65 64       	ori	r22, 0x45	; 69
    87b6:	64 63       	ori	r22, 0x34	; 52
    87b8:	63 62       	ori	r22, 0x23	; 35
    87ba:	62 62       	ori	r22, 0x22	; 34
    87bc:	61 61       	ori	r22, 0x11	; 17
    87be:	61 61       	ori	r22, 0x11	; 17
    87c0:	61 61       	ori	r22, 0x11	; 17
    87c2:	61 62       	ori	r22, 0x21	; 33
    87c4:	62 62       	ori	r22, 0x22	; 34
    87c6:	63 63       	ori	r22, 0x33	; 51
    87c8:	63 64       	ori	r22, 0x43	; 67
    87ca:	65 65       	ori	r22, 0x55	; 85
    87cc:	66 67       	ori	r22, 0x76	; 118
    87ce:	68 69       	ori	r22, 0x98	; 152
    87d0:	6a 6b       	ori	r22, 0xBA	; 186
    87d2:	6d 6e       	ori	r22, 0xED	; 237
    87d4:	70 71       	andi	r23, 0x10	; 16
    87d6:	73 74       	andi	r23, 0x43	; 67
    87d8:	76 78       	andi	r23, 0x86	; 134
    87da:	7a 7b       	andi	r23, 0xBA	; 186
    87dc:	7d 7e       	andi	r23, 0xED	; 237
    87de:	7f 7f       	andi	r23, 0xFF	; 255
    87e0:	7f 7f       	andi	r23, 0xFF	; 255
    87e2:	7e 7a       	andi	r23, 0xAE	; 174
    87e4:	76 6f       	ori	r23, 0xF6	; 246
    87e6:	67 5e       	subi	r22, 0xE7	; 231
    87e8:	54 49       	sbci	r21, 0x94	; 148
    87ea:	3f 36       	cpi	r19, 0x6F	; 111
    87ec:	2e 27       	eor	r18, r30
    87ee:	22 1e       	adc	r2, r18
    87f0:	1c 1b       	sub	r17, r28
    87f2:	1a 1b       	sub	r17, r26
    87f4:	1c 1e       	adc	r1, r28
    87f6:	20 22       	and	r2, r16
    87f8:	23 1f       	adc	r18, r19
    87fa:	15 0b       	sbc	r17, r21
    87fc:	07 08       	sbc	r0, r7
    87fe:	07 00       	.word	0x0007	; ????
    8800:	1f 31       	cpi	r17, 0x1F	; 31
    8802:	3d 44       	sbci	r19, 0x4D	; 77
    8804:	4e 53       	subi	r20, 0x3E	; 62
    8806:	54 56       	subi	r21, 0x64	; 100
    8808:	5a 5f       	subi	r21, 0xFA	; 250
    880a:	64 69       	ori	r22, 0x94	; 148
    880c:	6e 74       	andi	r22, 0x4E	; 78
    880e:	76 79       	andi	r23, 0x96	; 150
    8810:	7c 7f       	andi	r23, 0xFC	; 252
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7c       	andi	r23, 0xCF	; 207
    887c:	78 71       	andi	r23, 0x18	; 24
    887e:	68 4c       	sbci	r22, 0xC8	; 200
    8880:	2c 1c       	adc	r2, r12
    8882:	12 0c       	add	r1, r2
    8884:	0a 0b       	sbc	r16, r26
    8886:	0a 05       	cpc	r16, r10
    8888:	fd f3       	brhs	.-2      	; 0x8888 <waves+0x988>
    888a:	e9 df       	rcall	.-46     	; 0x885e <waves+0x95e>
    888c:	d4 ca       	rjmp	.-2648   	; 0x7e36 <steptable+0x12e>
    888e:	c0 b7       	in	r28, 0x30	; 48
    8890:	ae a6       	std	Y+46, r10	; 0x2e
    8892:	9e 97       	sbiw	r26, 0x2e	; 46
    8894:	91 8b       	std	Z+17, r25	; 0x11
    8896:	86 85       	ldd	r24, Z+14	; 0x0e
    8898:	82 80       	ldd	r8, Z+2	; 0x02
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 87       	std	Z+8, r24	; 0x08
    88f6:	91 9d       	mul	r25, r1
    88f8:	ac c4       	rjmp	.+2392   	; 0x9252 <init_player_state+0x18>
    88fa:	cb d4       	rcall	.+2454   	; 0x9292 <init_player_state+0x58>
    88fc:	dd f2       	brhs	.-74     	; 0x88b4 <waves+0x9b4>
    88fe:	fa fa       	.word	0xfafa	; ????

00008900 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8900:	80 91 f1 0c 	lds	r24, 0x0CF1
    8904:	90 91 7f 0d 	lds	r25, 0x0D7F
    8908:	89 17       	cp	r24, r25
    890a:	78 f4       	brcc	.+30     	; 0x892a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    890c:	e8 2f       	mov	r30, r24
    890e:	f0 e0       	ldi	r31, 0x00	; 0
    8910:	9f 01       	movw	r18, r30
    8912:	22 0f       	add	r18, r18
    8914:	33 1f       	adc	r19, r19
    8916:	e2 0f       	add	r30, r18
    8918:	f3 1f       	adc	r31, r19
    891a:	e0 5b       	subi	r30, 0xB0	; 176
    891c:	f3 4f       	sbci	r31, 0xF3	; 243
    891e:	a0 81       	ld	r26, Z
    8920:	b1 81       	ldd	r27, Z+1	; 0x01
    8922:	92 81       	ldd	r25, Z+2	; 0x02
    8924:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8926:	8f 5f       	subi	r24, 0xFF	; 255
    8928:	ed cf       	rjmp	.-38     	; 0x8904 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    892a:	08 95       	ret

0000892c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    892c:	2f 92       	push	r2
    892e:	3f 92       	push	r3
    8930:	4f 92       	push	r4
    8932:	5f 92       	push	r5
    8934:	6f 92       	push	r6
    8936:	7f 92       	push	r7
    8938:	8f 92       	push	r8
    893a:	9f 92       	push	r9
    893c:	af 92       	push	r10
    893e:	bf 92       	push	r11
    8940:	cf 92       	push	r12
    8942:	df 92       	push	r13
    8944:	ef 92       	push	r14
    8946:	ff 92       	push	r15
    8948:	0f 93       	push	r16
    894a:	1f 93       	push	r17
    894c:	cf 93       	push	r28
    894e:	df 93       	push	r29
    8950:	00 d0       	rcall	.+0      	; 0x8952 <ProcessSprites+0x26>
    8952:	00 d0       	rcall	.+0      	; 0x8954 <ProcessSprites+0x28>
    8954:	cd b7       	in	r28, 0x3d	; 61
    8956:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8958:	80 91 00 05 	lds	r24, 0x0500
    895c:	88 23       	and	r24, r24
    895e:	09 f4       	brne	.+2      	; 0x8962 <ProcessSprites+0x36>
    8960:	e0 c0       	rjmp	.+448    	; 0x8b22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    8962:	80 91 f0 0c 	lds	r24, 0x0CF0
    8966:	80 93 f1 0c 	sts	0x0CF1, r24
		free_tile_index=userRamTilesCount;
    896a:	80 93 7f 0d 	sts	0x0D7F, r24
    896e:	e0 e1       	ldi	r30, 0x10	; 16
    8970:	ce 2e       	mov	r12, r30
    8972:	e5 e0       	ldi	r30, 0x05	; 5
    8974:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    8976:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    8978:	f6 01       	movw	r30, r12
    897a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    897c:	20 3e       	cpi	r18, 0xE0	; 224
    897e:	09 f4       	brne	.+2      	; 0x8982 <ProcessSprites+0x56>
    8980:	b1 c0       	rjmp	.+354    	; 0x8ae4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    8982:	80 91 b2 0c 	lds	r24, 0x0CB2
    8986:	90 e0       	ldi	r25, 0x00	; 0
    8988:	82 0f       	add	r24, r18
    898a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    898c:	41 81       	ldd	r20, Z+1	; 0x01
    898e:	20 91 b3 0c 	lds	r18, 0x0CB3
    8992:	30 e0       	ldi	r19, 0x00	; 0
    8994:	24 0f       	add	r18, r20
    8996:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8998:	ac 01       	movw	r20, r24
    899a:	73 e0       	ldi	r23, 0x03	; 3
    899c:	56 95       	lsr	r21
    899e:	47 95       	ror	r20
    89a0:	7a 95       	dec	r23
    89a2:	e1 f7       	brne	.-8      	; 0x899c <ProcessSprites+0x70>
    89a4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    89a6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    89a8:	11 f0       	breq	.+4      	; 0x89ae <ProcessSprites+0x82>
    89aa:	92 e0       	ldi	r25, 0x02	; 2
    89ac:	01 c0       	rjmp	.+2      	; 0x89b0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    89ae:	91 e0       	ldi	r25, 0x01	; 1
    89b0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    89b2:	a9 01       	movw	r20, r18
    89b4:	63 e0       	ldi	r22, 0x03	; 3
    89b6:	56 95       	lsr	r21
    89b8:	47 95       	ror	r20
    89ba:	6a 95       	dec	r22
    89bc:	e1 f7       	brne	.-8      	; 0x89b6 <ProcessSprites+0x8a>
    89be:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    89c0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    89c2:	19 f0       	breq	.+6      	; 0x89ca <ProcessSprites+0x9e>
    89c4:	52 e0       	ldi	r21, 0x02	; 2
    89c6:	35 2e       	mov	r3, r21
    89c8:	02 c0       	rjmp	.+4      	; 0x89ce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    89ca:	33 24       	eor	r3, r3
    89cc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    89ce:	30 e0       	ldi	r19, 0x00	; 0
    89d0:	32 2f       	mov	r19, r18
    89d2:	22 27       	eor	r18, r18
    89d4:	f9 01       	movw	r30, r18
    89d6:	e8 0f       	add	r30, r24
    89d8:	f1 1d       	adc	r31, r1
    89da:	fc 83       	std	Y+4, r31	; 0x04
    89dc:	eb 83       	std	Y+3, r30	; 0x03
    89de:	e1 2c       	mov	r14, r1
    89e0:	f1 2c       	mov	r15, r1
    89e2:	be 2c       	mov	r11, r14
    89e4:	aa 24       	eor	r10, r10
    89e6:	26 2c       	mov	r2, r6
    89e8:	45 2c       	mov	r4, r5
    89ea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    89ec:	84 2c       	mov	r8, r4
    89ee:	91 2c       	mov	r9, r1
    89f0:	84 2d       	mov	r24, r4
    89f2:	20 91 b4 0c 	lds	r18, 0x0CB4
    89f6:	42 2f       	mov	r20, r18
    89f8:	50 e0       	ldi	r21, 0x00	; 0
    89fa:	44 0f       	add	r20, r20
    89fc:	55 1f       	adc	r21, r21
    89fe:	84 16       	cp	r8, r20
    8a00:	95 06       	cpc	r9, r21
    8a02:	14 f0       	brlt	.+4      	; 0x8a08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    8a04:	22 0f       	add	r18, r18
    8a06:	03 c0       	rjmp	.+6      	; 0x8a0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    8a08:	42 16       	cp	r4, r18
    8a0a:	10 f0       	brcs	.+4      	; 0x8a10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    8a0c:	84 2d       	mov	r24, r4
    8a0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8a10:	ff e1       	ldi	r31, 0x1F	; 31
    8a12:	f2 15       	cp	r31, r2
    8a14:	18 f4       	brcc	.+6      	; 0x8a1c <ProcessSprites+0xf0>
    8a16:	00 ee       	ldi	r16, 0xE0	; 224
    8a18:	02 0d       	add	r16, r2
    8a1a:	01 c0       	rjmp	.+2      	; 0x8a1e <ProcessSprites+0xf2>
    8a1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    8a1e:	28 2f       	mov	r18, r24
    8a20:	26 95       	lsr	r18
    8a22:	26 95       	lsr	r18
    8a24:	26 95       	lsr	r18
    8a26:	10 e0       	ldi	r17, 0x00	; 0
    8a28:	40 e2       	ldi	r20, 0x20	; 32
    8a2a:	24 9f       	mul	r18, r20
    8a2c:	00 0d       	add	r16, r0
    8a2e:	11 1d       	adc	r17, r1
    8a30:	11 24       	eor	r1, r1
    8a32:	23 e0       	ldi	r18, 0x03	; 3
    8a34:	00 0f       	add	r16, r16
    8a36:	11 1f       	adc	r17, r17
    8a38:	2a 95       	dec	r18
    8a3a:	e1 f7       	brne	.-8      	; 0x8a34 <ProcessSprites+0x108>
    8a3c:	87 70       	andi	r24, 0x07	; 7
    8a3e:	08 0f       	add	r16, r24
    8a40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    8a42:	00 50       	subi	r16, 0x00	; 0
    8a44:	1f 4f       	sbci	r17, 0xFF	; 255
    8a46:	f8 01       	movw	r30, r16
    8a48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    8a4a:	81 e0       	ldi	r24, 0x01	; 1
    8a4c:	7c 31       	cpi	r23, 0x1C	; 28
    8a4e:	08 f4       	brcc	.+2      	; 0x8a52 <ProcessSprites+0x126>
    8a50:	80 e0       	ldi	r24, 0x00	; 0
    8a52:	21 e0       	ldi	r18, 0x01	; 1
    8a54:	30 91 f1 0c 	lds	r19, 0x0CF1
    8a58:	73 17       	cp	r23, r19
    8a5a:	18 f0       	brcs	.+6      	; 0x8a62 <ProcessSprites+0x136>
    8a5c:	20 e0       	ldi	r18, 0x00	; 0
    8a5e:	88 23       	and	r24, r24
    8a60:	51 f1       	breq	.+84     	; 0x8ab6 <ProcessSprites+0x18a>
    8a62:	60 91 7f 0d 	lds	r22, 0x0D7F
    8a66:	6c 31       	cpi	r22, 0x1C	; 28
    8a68:	20 f5       	brcc	.+72     	; 0x8ab2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    8a6a:	88 23       	and	r24, r24
    8a6c:	31 f0       	breq	.+12     	; 0x8a7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    8a6e:	84 ee       	ldi	r24, 0xE4	; 228
    8a70:	87 0f       	add	r24, r23
    8a72:	7a 83       	std	Y+2, r23	; 0x02
    8a74:	0e 94 ca 34 	call	0x6994	; 0x6994 <CopyFlashTile>
    8a78:	06 c0       	rjmp	.+12     	; 0x8a86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    8a7a:	22 23       	and	r18, r18
    8a7c:	29 f0       	breq	.+10     	; 0x8a88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    8a7e:	87 2f       	mov	r24, r23
    8a80:	7a 83       	std	Y+2, r23	; 0x02
    8a82:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <CopyRamTile>
    8a86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    8a88:	80 91 7f 0d 	lds	r24, 0x0D7F
    8a8c:	e8 2f       	mov	r30, r24
    8a8e:	f0 e0       	ldi	r31, 0x00	; 0
    8a90:	9f 01       	movw	r18, r30
    8a92:	22 0f       	add	r18, r18
    8a94:	33 1f       	adc	r19, r19
    8a96:	e2 0f       	add	r30, r18
    8a98:	f3 1f       	adc	r31, r19
    8a9a:	e0 5b       	subi	r30, 0xB0	; 176
    8a9c:	f3 4f       	sbci	r31, 0xF3	; 243
    8a9e:	11 83       	std	Z+1, r17	; 0x01
    8aa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8aa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    8aa4:	f8 01       	movw	r30, r16
    8aa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    8aa8:	21 e0       	ldi	r18, 0x01	; 1
    8aaa:	28 0f       	add	r18, r24
    8aac:	20 93 7f 0d 	sts	0x0D7F, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    8ab0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    8ab2:	7c 31       	cpi	r23, 0x1C	; 28
    8ab4:	38 f4       	brcc	.+14     	; 0x8ac4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    8ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    8aba:	a5 01       	movw	r20, r10
    8abc:	67 2f       	mov	r22, r23
    8abe:	87 2d       	mov	r24, r7
    8ac0:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <BlitSprite>
    8ac4:	ff ef       	ldi	r31, 0xFF	; 255
    8ac6:	af 1a       	sub	r10, r31
    8ac8:	bf 0a       	sbc	r11, r31
    8aca:	23 94       	inc	r2
    8acc:	82 2d       	mov	r24, r2
    8ace:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8ad0:	99 81       	ldd	r25, Y+1	; 0x01
    8ad2:	89 17       	cp	r24, r25
    8ad4:	08 f4       	brcc	.+2      	; 0x8ad8 <ProcessSprites+0x1ac>
    8ad6:	8c cf       	rjmp	.-232    	; 0x89f0 <ProcessSprites+0xc4>
    8ad8:	ef ef       	ldi	r30, 0xFF	; 255
    8ada:	ee 1a       	sub	r14, r30
    8adc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8ade:	e3 14       	cp	r14, r3
    8ae0:	08 f4       	brcc	.+2      	; 0x8ae4 <ProcessSprites+0x1b8>
    8ae2:	7f cf       	rjmp	.-258    	; 0x89e2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    8ae4:	73 94       	inc	r7
    8ae6:	f4 e0       	ldi	r31, 0x04	; 4
    8ae8:	cf 0e       	add	r12, r31
    8aea:	d1 1c       	adc	r13, r1
    8aec:	40 e1       	ldi	r20, 0x10	; 16
    8aee:	74 12       	cpse	r7, r20
    8af0:	43 cf       	rjmp	.-378    	; 0x8978 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    8af2:	0f 90       	pop	r0
    8af4:	0f 90       	pop	r0
    8af6:	0f 90       	pop	r0
    8af8:	0f 90       	pop	r0
    8afa:	df 91       	pop	r29
    8afc:	cf 91       	pop	r28
    8afe:	1f 91       	pop	r17
    8b00:	0f 91       	pop	r16
    8b02:	ff 90       	pop	r15
    8b04:	ef 90       	pop	r14
    8b06:	df 90       	pop	r13
    8b08:	cf 90       	pop	r12
    8b0a:	bf 90       	pop	r11
    8b0c:	af 90       	pop	r10
    8b0e:	9f 90       	pop	r9
    8b10:	8f 90       	pop	r8
    8b12:	7f 90       	pop	r7
    8b14:	6f 90       	pop	r6
    8b16:	5f 90       	pop	r5
    8b18:	4f 90       	pop	r4
    8b1a:	3f 90       	pop	r3
    8b1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8b1e:	0c 94 80 44 	jmp	0x8900	; 0x8900 <RestoreBackground>

	}
    8b22:	0f 90       	pop	r0
    8b24:	0f 90       	pop	r0
    8b26:	0f 90       	pop	r0
    8b28:	0f 90       	pop	r0
    8b2a:	df 91       	pop	r29
    8b2c:	cf 91       	pop	r28
    8b2e:	1f 91       	pop	r17
    8b30:	0f 91       	pop	r16
    8b32:	ff 90       	pop	r15
    8b34:	ef 90       	pop	r14
    8b36:	df 90       	pop	r13
    8b38:	cf 90       	pop	r12
    8b3a:	bf 90       	pop	r11
    8b3c:	af 90       	pop	r10
    8b3e:	9f 90       	pop	r9
    8b40:	8f 90       	pop	r8
    8b42:	7f 90       	pop	r7
    8b44:	6f 90       	pop	r6
    8b46:	5f 90       	pop	r5
    8b48:	4f 90       	pop	r4
    8b4a:	3f 90       	pop	r3
    8b4c:	2f 90       	pop	r2
    8b4e:	08 95       	ret

00008b50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    8b50:	90 91 b3 0c 	lds	r25, 0x0CB3
    8b54:	96 0f       	add	r25, r22
    8b56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    8b5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    8b5e:	82 0f       	add	r24, r18
    8b60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    8b64:	80 91 b4 0c 	lds	r24, 0x0CB4
    8b68:	80 32       	cpi	r24, 0x20	; 32
    8b6a:	b0 f4       	brcc	.+44     	; 0x8b98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    8b6c:	29 2f       	mov	r18, r25
    8b6e:	30 e0       	ldi	r19, 0x00	; 0
    8b70:	78 e0       	ldi	r23, 0x08	; 8
    8b72:	87 9f       	mul	r24, r23
    8b74:	a0 01       	movw	r20, r0
    8b76:	11 24       	eor	r1, r1
    8b78:	24 17       	cp	r18, r20
    8b7a:	35 07       	cpc	r19, r21
    8b7c:	6c f0       	brlt	.+26     	; 0x8b98 <Scroll+0x48>
				if(dy>=0){	
    8b7e:	67 fd       	sbrc	r22, 7
    8b80:	05 c0       	rjmp	.+10     	; 0x8b8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    8b82:	28 ef       	ldi	r18, 0xF8	; 248
    8b84:	82 9f       	mul	r24, r18
    8b86:	90 0d       	add	r25, r0
    8b88:	11 24       	eor	r1, r1
    8b8a:	04 c0       	rjmp	.+8      	; 0x8b94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    8b8c:	78 e0       	ldi	r23, 0x08	; 8
    8b8e:	87 9f       	mul	r24, r23
    8b90:	90 0d       	add	r25, r0
    8b92:	11 24       	eor	r1, r1
    8b94:	90 93 b3 0c 	sts	0x0CB3, r25
    8b98:	08 95       	ret

00008b9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8b9a:	e0 e1       	ldi	r30, 0x10	; 16
    8b9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8b9e:	80 ee       	ldi	r24, 0xE0	; 224
    8ba0:	80 83       	st	Z, r24
    8ba2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8ba4:	95 e0       	ldi	r25, 0x05	; 5
    8ba6:	e0 35       	cpi	r30, 0x50	; 80
    8ba8:	f9 07       	cpc	r31, r25
    8baa:	d1 f7       	brne	.-12     	; 0x8ba0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    8bac:	80 e2       	ldi	r24, 0x20	; 32
    8bae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    8bb2:	10 92 af 0c 	sts	0x0CAF, r1
    8bb6:	08 95       	ret

00008bb8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8bb8:	4f 92       	push	r4
    8bba:	5f 92       	push	r5
    8bbc:	6f 92       	push	r6
    8bbe:	7f 92       	push	r7
    8bc0:	8f 92       	push	r8
    8bc2:	9f 92       	push	r9
    8bc4:	af 92       	push	r10
    8bc6:	bf 92       	push	r11
    8bc8:	cf 92       	push	r12
    8bca:	df 92       	push	r13
    8bcc:	ef 92       	push	r14
    8bce:	ff 92       	push	r15
    8bd0:	0f 93       	push	r16
    8bd2:	1f 93       	push	r17
    8bd4:	cf 93       	push	r28
    8bd6:	df 93       	push	r29
    8bd8:	68 2e       	mov	r6, r24
    8bda:	56 2e       	mov	r5, r22
    8bdc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8bde:	fa 01       	movw	r30, r20
    8be0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    8be2:	31 96       	adiw	r30, 0x01	; 1
    8be4:	84 90       	lpm	r8, Z
    8be6:	c7 2c       	mov	r12, r7
    8be8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8bea:	00 e0       	ldi	r16, 0x00	; 0
    8bec:	10 e0       	ldi	r17, 0x00	; 0
    8bee:	91 2c       	mov	r9, r1
    8bf0:	98 14       	cp	r9, r8
    8bf2:	f1 f0       	breq	.+60     	; 0x8c30 <DrawMap+0x78>
    8bf4:	c0 e0       	ldi	r28, 0x00	; 0
    8bf6:	d0 e0       	ldi	r29, 0x00	; 0
    8bf8:	58 01       	movw	r10, r16
    8bfa:	f2 e0       	ldi	r31, 0x02	; 2
    8bfc:	af 0e       	add	r10, r31
    8bfe:	b1 1c       	adc	r11, r1
    8c00:	49 2c       	mov	r4, r9
    8c02:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    8c04:	c7 15       	cp	r28, r7
    8c06:	80 f4       	brcc	.+32     	; 0x8c28 <DrawMap+0x70>
    8c08:	95 01       	movw	r18, r10
    8c0a:	2c 0f       	add	r18, r28
    8c0c:	3d 1f       	adc	r19, r29
    8c0e:	f7 01       	movw	r30, r14
    8c10:	e2 0f       	add	r30, r18
    8c12:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8c14:	24 91       	lpm	r18, Z
    8c16:	42 2f       	mov	r20, r18
    8c18:	50 e0       	ldi	r21, 0x00	; 0
    8c1a:	64 2d       	mov	r22, r4
    8c1c:	8c 2f       	mov	r24, r28
    8c1e:	86 0d       	add	r24, r6
    8c20:	0e 94 19 38 	call	0x7032	; 0x7032 <SetTile>
    8c24:	21 96       	adiw	r28, 0x01	; 1
    8c26:	ee cf       	rjmp	.-36     	; 0x8c04 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    8c28:	93 94       	inc	r9
    8c2a:	0c 0d       	add	r16, r12
    8c2c:	1d 1d       	adc	r17, r13
    8c2e:	e0 cf       	rjmp	.-64     	; 0x8bf0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    8c30:	df 91       	pop	r29
    8c32:	cf 91       	pop	r28
    8c34:	1f 91       	pop	r17
    8c36:	0f 91       	pop	r16
    8c38:	ff 90       	pop	r15
    8c3a:	ef 90       	pop	r14
    8c3c:	df 90       	pop	r13
    8c3e:	cf 90       	pop	r12
    8c40:	bf 90       	pop	r11
    8c42:	af 90       	pop	r10
    8c44:	9f 90       	pop	r9
    8c46:	8f 90       	pop	r8
    8c48:	7f 90       	pop	r7
    8c4a:	6f 90       	pop	r6
    8c4c:	5f 90       	pop	r5
    8c4e:	4f 90       	pop	r4
    8c50:	08 95       	ret

00008c52 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8c52:	0f 93       	push	r16
    8c54:	1f 93       	push	r17
    8c56:	cf 93       	push	r28
    8c58:	df 93       	push	r29
    8c5a:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8c5c:	c0 e0       	ldi	r28, 0x00	; 0
    8c5e:	d0 e0       	ldi	r29, 0x00	; 0
    8c60:	c0 17       	cp	r28, r16
    8c62:	d1 07       	cpc	r29, r17
    8c64:	44 f4       	brge	.+16     	; 0x8c76 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8c66:	0e 94 2f 38 	call	0x705e	; 0x705e <GetVsyncFlag>
    8c6a:	88 23       	and	r24, r24
    8c6c:	e1 f3       	breq	.-8      	; 0x8c66 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8c6e:	0e 94 33 38 	call	0x7066	; 0x7066 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8c72:	21 96       	adiw	r28, 0x01	; 1
    8c74:	f5 cf       	rjmp	.-22     	; 0x8c60 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8c76:	df 91       	pop	r29
    8c78:	cf 91       	pop	r28
    8c7a:	1f 91       	pop	r17
    8c7c:	0f 91       	pop	r16
    8c7e:	08 95       	ret

00008c80 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    8c80:	83 e2       	ldi	r24, 0x23	; 35
    8c82:	99 e0       	ldi	r25, 0x09	; 9
    8c84:	0e 94 80 3a 	call	0x7500	; 0x7500 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    8c88:	83 e2       	ldi	r24, 0x23	; 35
    8c8a:	91 e0       	ldi	r25, 0x01	; 1
    8c8c:	0e 94 2a 38 	call	0x7054	; 0x7054 <SetTileTable>
			
			//draw logo
			ClearVram();
    8c90:	0e 94 0f 38 	call	0x701e	; 0x701e <ClearVram>
			WaitVsync(15);		
    8c94:	8f e0       	ldi	r24, 0x0F	; 15
    8c96:	90 e0       	ldi	r25, 0x00	; 0
    8c98:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    8c9c:	41 e0       	ldi	r20, 0x01	; 1
    8c9e:	6f ef       	ldi	r22, 0xFF	; 255
    8ca0:	80 e0       	ldi	r24, 0x00	; 0
    8ca2:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8ca6:	4d e0       	ldi	r20, 0x0D	; 13
    8ca8:	51 e0       	ldi	r21, 0x01	; 1
    8caa:	6c e0       	ldi	r22, 0x0C	; 12
    8cac:	8c e0       	ldi	r24, 0x0C	; 12
    8cae:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <DrawMap>
			WaitVsync(3);
    8cb2:	83 e0       	ldi	r24, 0x03	; 3
    8cb4:	90 e0       	ldi	r25, 0x00	; 0
    8cb6:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    8cba:	4c ef       	ldi	r20, 0xFC	; 252
    8cbc:	50 e0       	ldi	r21, 0x00	; 0
    8cbe:	6c e0       	ldi	r22, 0x0C	; 12
    8cc0:	8c e0       	ldi	r24, 0x0C	; 12
    8cc2:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <DrawMap>
			WaitVsync(2);
    8cc6:	82 e0       	ldi	r24, 0x02	; 2
    8cc8:	90 e0       	ldi	r25, 0x00	; 0
    8cca:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8cce:	4d e0       	ldi	r20, 0x0D	; 13
    8cd0:	51 e0       	ldi	r21, 0x01	; 1
    8cd2:	6c e0       	ldi	r22, 0x0C	; 12
    8cd4:	8c e0       	ldi	r24, 0x0C	; 12
    8cd6:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    8cda:	81 e4       	ldi	r24, 0x41	; 65
    8cdc:	90 e0       	ldi	r25, 0x00	; 0
    8cde:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
			ClearVram();
    8ce2:	0e 94 0f 38 	call	0x701e	; 0x701e <ClearVram>
			WaitVsync(20);
    8ce6:	84 e1       	ldi	r24, 0x14	; 20
    8ce8:	90 e0       	ldi	r25, 0x00	; 0
    8cea:	0c 94 29 46 	jmp	0x8c52	; 0x8c52 <WaitVsync>

00008cee <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8cee:	80 93 7d 0d 	sts	0x0D7D, r24
	currFadeFrame=0;
    8cf2:	10 92 81 0d 	sts	0x0D81, r1
	fadeActive=true;
    8cf6:	81 e0       	ldi	r24, 0x01	; 1
    8cf8:	80 93 80 0d 	sts	0x0D80, r24
		
	if(blocking){
    8cfc:	66 23       	and	r22, r22
    8cfe:	21 f0       	breq	.+8      	; 0x8d08 <doFade+0x1a>
		while(fadeActive==true);
    8d00:	80 91 80 0d 	lds	r24, 0x0D80
    8d04:	81 11       	cpse	r24, r1
    8d06:	fc cf       	rjmp	.-8      	; 0x8d00 <doFade+0x12>
    8d08:	08 95       	ret

00008d0a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8d0a:	81 11       	cpse	r24, r1
    8d0c:	03 c0       	rjmp	.+6      	; 0x8d14 <FadeIn+0xa>
		DDRC=0xff;
    8d0e:	8f ef       	ldi	r24, 0xFF	; 255
    8d10:	87 b9       	out	0x07, r24	; 7
		return;
    8d12:	08 95       	ret
	}
	fadeStep=1;
    8d14:	91 e0       	ldi	r25, 0x01	; 1
    8d16:	90 93 82 0d 	sts	0x0D82, r25
	fadeDir=1;
    8d1a:	90 93 7e 0d 	sts	0x0D7E, r25
	doFade(speed,blocking);
    8d1e:	0c 94 77 46 	jmp	0x8cee	; 0x8cee <doFade>

00008d22 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8d22:	81 11       	cpse	r24, r1
    8d24:	02 c0       	rjmp	.+4      	; 0x8d2a <FadeOut+0x8>
		DDRC=0;
    8d26:	17 b8       	out	0x07, r1	; 7
		return;
    8d28:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8d2a:	9c e0       	ldi	r25, 0x0C	; 12
    8d2c:	90 93 82 0d 	sts	0x0D82, r25
	fadeDir=-1;
    8d30:	9f ef       	ldi	r25, 0xFF	; 255
    8d32:	90 93 7e 0d 	sts	0x0D7E, r25
	doFade(speed,blocking);
    8d36:	0c 94 77 46 	jmp	0x8cee	; 0x8cee <doFade>

00008d3a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8d3a:	80 91 80 0d 	lds	r24, 0x0D80
    8d3e:	88 23       	and	r24, r24
    8d40:	01 f1       	breq	.+64     	; 0x8d82 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8d42:	80 91 81 0d 	lds	r24, 0x0D81
    8d46:	81 11       	cpse	r24, r1
    8d48:	19 c0       	rjmp	.+50     	; 0x8d7c <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8d4a:	80 91 7d 0d 	lds	r24, 0x0D7D
    8d4e:	80 93 81 0d 	sts	0x0D81, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8d52:	e0 91 82 0d 	lds	r30, 0x0D82
    8d56:	f0 e0       	ldi	r31, 0x00	; 0
    8d58:	e1 51       	subi	r30, 0x11	; 17
    8d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    8d5c:	e4 91       	lpm	r30, Z
    8d5e:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8d60:	90 91 7e 0d 	lds	r25, 0x0D7E
    8d64:	80 91 82 0d 	lds	r24, 0x0D82
    8d68:	89 0f       	add	r24, r25
    8d6a:	80 93 82 0d 	sts	0x0D82, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8d6e:	88 23       	and	r24, r24
    8d70:	11 f0       	breq	.+4      	; 0x8d76 <ProcessFading+0x3c>
    8d72:	8d 30       	cpi	r24, 0x0D	; 13
    8d74:	31 f4       	brne	.+12     	; 0x8d82 <ProcessFading+0x48>
				fadeActive=false;
    8d76:	10 92 80 0d 	sts	0x0D80, r1
    8d7a:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8d7c:	81 50       	subi	r24, 0x01	; 1
    8d7e:	80 93 81 0d 	sts	0x0D81, r24
    8d82:	08 95       	ret

00008d84 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8d84:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <ProcessFading>
		ProcessSprites();
    8d88:	0c 94 96 44 	jmp	0x892c	; 0x892c <ProcessSprites>

00008d8c <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    8d8c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    8d8e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    8d90:	93 81       	ldd	r25, Z+3	; 0x03
    8d92:	9f 5f       	subi	r25, 0xFF	; 255
    8d94:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8d96:	42 81       	ldd	r20, Z+2	; 0x02
    8d98:	80 81       	ld	r24, Z
    8d9a:	26 81       	ldd	r18, Z+6	; 0x06
    8d9c:	37 81       	ldd	r19, Z+7	; 0x07
    8d9e:	94 17       	cp	r25, r20
    8da0:	30 f4       	brcc	.+12     	; 0x8dae <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    8da2:	f9 01       	movw	r30, r18
    8da4:	e8 0f       	add	r30, r24
    8da6:	f1 1d       	adc	r31, r1
    8da8:	e8 0f       	add	r30, r24
    8daa:	f1 1d       	adc	r31, r1
    8dac:	12 c0       	rjmp	.+36     	; 0x8dd2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    8dae:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8db0:	90 e0       	ldi	r25, 0x00	; 0
    8db2:	01 96       	adiw	r24, 0x01	; 1
    8db4:	61 81       	ldd	r22, Z+1	; 0x01
    8db6:	70 e0       	ldi	r23, 0x00	; 0
    8db8:	0e 94 c5 60 	call	0xc18a	; 0xc18a <__divmodhi4>
    8dbc:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    8dbe:	81 11       	cpse	r24, r1
    8dc0:	02 c0       	rjmp	.+4      	; 0x8dc6 <LBGetNextFrame+0x3a>
    8dc2:	41 e0       	ldi	r20, 0x01	; 1
    8dc4:	44 83       	std	Z+4, r20	; 0x04
    8dc6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    8dc8:	88 0f       	add	r24, r24
    8dca:	99 1f       	adc	r25, r25
    8dcc:	f9 01       	movw	r30, r18
    8dce:	e8 0f       	add	r30, r24
    8dd0:	f9 1f       	adc	r31, r25
    8dd2:	80 81       	ld	r24, Z
    8dd4:	91 81       	ldd	r25, Z+1	; 0x01
}
    8dd6:	08 95       	ret

00008dd8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    8dd8:	0f 93       	push	r16
    8dda:	1f 93       	push	r17
    8ddc:	cf 93       	push	r28
    8dde:	df 93       	push	r29
    8de0:	1f 92       	push	r1
    8de2:	cd b7       	in	r28, 0x3d	; 61
    8de4:	de b7       	in	r29, 0x3e	; 62
    8de6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    8de8:	86 2f       	mov	r24, r22
    8dea:	69 83       	std	Y+1, r22	; 0x01
    8dec:	0e 94 39 38 	call	0x7072	; 0x7072 <ReadJoypad>
    8df0:	d8 01       	movw	r26, r16
    8df2:	15 96       	adiw	r26, 0x05	; 5
    8df4:	9c 93       	st	X, r25
    8df6:	8e 93       	st	-X, r24
    8df8:	14 97       	sbiw	r26, 0x04	; 4
    8dfa:	69 81       	ldd	r22, Y+1	; 0x01
    8dfc:	e6 2f       	mov	r30, r22
    8dfe:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    8e00:	00 97       	sbiw	r24, 0x00	; 0
    8e02:	51 f0       	breq	.+20     	; 0x8e18 <LBGetJoyPadState+0x40>
    8e04:	df 01       	movw	r26, r30
    8e06:	aa 0f       	add	r26, r26
    8e08:	bb 1f       	adc	r27, r27
    8e0a:	ab 50       	subi	r26, 0x0B	; 11
    8e0c:	b3 4f       	sbci	r27, 0xF3	; 243
    8e0e:	2d 91       	ld	r18, X+
    8e10:	3c 91       	ld	r19, X
    8e12:	82 17       	cp	r24, r18
    8e14:	93 07       	cpc	r25, r19
    8e16:	21 f0       	breq	.+8      	; 0x8e20 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    8e18:	d8 01       	movw	r26, r16
    8e1a:	16 96       	adiw	r26, 0x06	; 6
    8e1c:	1c 92       	st	X, r1
    8e1e:	07 c0       	rjmp	.+14     	; 0x8e2e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    8e20:	d8 01       	movw	r26, r16
    8e22:	16 96       	adiw	r26, 0x06	; 6
    8e24:	2c 91       	ld	r18, X
    8e26:	16 97       	sbiw	r26, 0x06	; 6
    8e28:	2f 5f       	subi	r18, 0xFF	; 255
    8e2a:	16 96       	adiw	r26, 0x06	; 6
    8e2c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    8e2e:	ee 0f       	add	r30, r30
    8e30:	ff 1f       	adc	r31, r31
    8e32:	eb 50       	subi	r30, 0x0B	; 11
    8e34:	f3 4f       	sbci	r31, 0xF3	; 243
    8e36:	20 81       	ld	r18, Z
    8e38:	31 81       	ldd	r19, Z+1	; 0x01
    8e3a:	a9 01       	movw	r20, r18
    8e3c:	40 95       	com	r20
    8e3e:	50 95       	com	r21
    8e40:	48 23       	and	r20, r24
    8e42:	59 23       	and	r21, r25
    8e44:	d8 01       	movw	r26, r16
    8e46:	11 96       	adiw	r26, 0x01	; 1
    8e48:	5c 93       	st	X, r21
    8e4a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    8e4c:	ac 01       	movw	r20, r24
    8e4e:	40 95       	com	r20
    8e50:	50 95       	com	r21
    8e52:	24 23       	and	r18, r20
    8e54:	35 23       	and	r19, r21
    8e56:	13 96       	adiw	r26, 0x03	; 3
    8e58:	3c 93       	st	X, r19
    8e5a:	2e 93       	st	-X, r18
    8e5c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    8e5e:	91 83       	std	Z+1, r25	; 0x01
    8e60:	80 83       	st	Z, r24
}
    8e62:	0f 90       	pop	r0
    8e64:	df 91       	pop	r29
    8e66:	cf 91       	pop	r28
    8e68:	1f 91       	pop	r17
    8e6a:	0f 91       	pop	r16
    8e6c:	08 95       	ret

00008e6e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    8e6e:	90 ed       	ldi	r25, 0xD0	; 208
    8e70:	94 0f       	add	r25, r20
    8e72:	e0 91 83 0d 	lds	r30, 0x0D83
    8e76:	f0 91 84 0d 	lds	r31, 0x0D84
    8e7a:	9a 30       	cpi	r25, 0x0A	; 10
    8e7c:	38 f4       	brcc	.+14     	; 0x8e8c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    8e7e:	24 2f       	mov	r18, r20
    8e80:	30 e0       	ldi	r19, 0x00	; 0
    8e82:	2d 52       	subi	r18, 0x2D	; 45
    8e84:	31 09       	sbc	r19, r1
    8e86:	e2 0f       	add	r30, r18
    8e88:	f3 1f       	adc	r31, r19
    8e8a:	0c c0       	rjmp	.+24     	; 0x8ea4 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    8e8c:	9f eb       	ldi	r25, 0xBF	; 191
    8e8e:	94 0f       	add	r25, r20
    8e90:	9a 31       	cpi	r25, 0x1A	; 26
    8e92:	38 f4       	brcc	.+14     	; 0x8ea2 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    8e94:	50 e0       	ldi	r21, 0x00	; 0
    8e96:	44 53       	subi	r20, 0x34	; 52
    8e98:	51 09       	sbc	r21, r1
    8e9a:	e4 0f       	add	r30, r20
    8e9c:	f5 1f       	adc	r31, r21
    8e9e:	44 91       	lpm	r20, Z
    8ea0:	03 c0       	rjmp	.+6      	; 0x8ea8 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    8ea2:	32 96       	adiw	r30, 0x02	; 2
    8ea4:	e4 91       	lpm	r30, Z
    8ea6:	4e 2f       	mov	r20, r30
    8ea8:	50 e0       	ldi	r21, 0x00	; 0
    8eaa:	0c 94 19 38 	jmp	0x7032	; 0x7032 <SetTile>

00008eae <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    8eae:	ff 92       	push	r15
    8eb0:	0f 93       	push	r16
    8eb2:	1f 93       	push	r17
    8eb4:	cf 93       	push	r28
    8eb6:	df 93       	push	r29
    8eb8:	d8 2f       	mov	r29, r24
    8eba:	f6 2e       	mov	r15, r22
    8ebc:	8a 01       	movw	r16, r20
	u8 i = 0;
    8ebe:	c0 e0       	ldi	r28, 0x00	; 0
    8ec0:	8c 2f       	mov	r24, r28
    8ec2:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    8ec4:	f8 01       	movw	r30, r16
    8ec6:	ec 0f       	add	r30, r28
    8ec8:	f1 1d       	adc	r31, r1
    8eca:	44 91       	lpm	r20, Z
    8ecc:	44 23       	and	r20, r20
    8ece:	29 f0       	breq	.+10     	; 0x8eda <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    8ed0:	6f 2d       	mov	r22, r15
    8ed2:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <LBPrintChar>
		i++;
    8ed6:	cf 5f       	subi	r28, 0xFF	; 255
    8ed8:	f3 cf       	rjmp	.-26     	; 0x8ec0 <LBPrint+0x12>
	}
}
    8eda:	df 91       	pop	r29
    8edc:	cf 91       	pop	r28
    8ede:	1f 91       	pop	r17
    8ee0:	0f 91       	pop	r16
    8ee2:	ff 90       	pop	r15
    8ee4:	08 95       	ret

00008ee6 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    8ee6:	ff 92       	push	r15
    8ee8:	0f 93       	push	r16
    8eea:	1f 93       	push	r17
    8eec:	cf 93       	push	r28
    8eee:	df 93       	push	r29
    8ef0:	28 2f       	mov	r18, r24
    8ef2:	06 2f       	mov	r16, r22
    8ef4:	84 2f       	mov	r24, r20
    8ef6:	dd ef       	ldi	r29, 0xFD	; 253
    8ef8:	d2 0f       	add	r29, r18
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    8efa:	9a e0       	ldi	r25, 0x0A	; 10
    8efc:	f9 2e       	mov	r15, r25
    8efe:	1f ef       	ldi	r17, 0xFF	; 255
    8f00:	12 0f       	add	r17, r18
    8f02:	6f 2d       	mov	r22, r15
    8f04:	0e 94 a5 60 	call	0xc14a	; 0xc14a <__udivmodqi4>
    8f08:	c8 2f       	mov	r28, r24
    8f0a:	40 e3       	ldi	r20, 0x30	; 48
    8f0c:	49 0f       	add	r20, r25
    8f0e:	60 2f       	mov	r22, r16
    8f10:	82 2f       	mov	r24, r18
    8f12:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <LBPrintChar>
		value /= 10;
    8f16:	8c 2f       	mov	r24, r28
    8f18:	21 2f       	mov	r18, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    8f1a:	1d 13       	cpse	r17, r29
    8f1c:	f0 cf       	rjmp	.-32     	; 0x8efe <LBPrintByte+0x18>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
	}
}
    8f1e:	df 91       	pop	r29
    8f20:	cf 91       	pop	r28
    8f22:	1f 91       	pop	r17
    8f24:	0f 91       	pop	r16
    8f26:	ff 90       	pop	r15
    8f28:	08 95       	ret

00008f2a <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    8f2a:	cf 92       	push	r12
    8f2c:	df 92       	push	r13
    8f2e:	ef 92       	push	r14
    8f30:	ff 92       	push	r15
    8f32:	0f 93       	push	r16
    8f34:	1f 93       	push	r17
    8f36:	cf 93       	push	r28
    8f38:	df 93       	push	r29
    8f3a:	1f 92       	push	r1
    8f3c:	cd b7       	in	r28, 0x3d	; 61
    8f3e:	de b7       	in	r29, 0x3e	; 62
    8f40:	d8 2e       	mov	r13, r24
    8f42:	06 2f       	mov	r16, r22
    8f44:	ca 01       	movw	r24, r20
    8f46:	1b ef       	ldi	r17, 0xFB	; 251
    8f48:	1d 0d       	add	r17, r13
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x, y, value % 10 + 48);
    8f4a:	2a e0       	ldi	r18, 0x0A	; 10
    8f4c:	e2 2e       	mov	r14, r18
    8f4e:	f1 2c       	mov	r15, r1
    8f50:	b7 01       	movw	r22, r14
    8f52:	0e 94 b1 60 	call	0xc162	; 0xc162 <__udivmodhi4>
    8f56:	c6 2e       	mov	r12, r22
    8f58:	40 e3       	ldi	r20, 0x30	; 48
    8f5a:	48 0f       	add	r20, r24
    8f5c:	60 2f       	mov	r22, r16
    8f5e:	8d 2d       	mov	r24, r13
    8f60:	79 83       	std	Y+1, r23	; 0x01
    8f62:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <LBPrintChar>
		value /= 10;
    8f66:	8c 2d       	mov	r24, r12
    8f68:	79 81       	ldd	r23, Y+1	; 0x01
    8f6a:	97 2f       	mov	r25, r23
		x--;
    8f6c:	da 94       	dec	r13
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    8f6e:	d1 12       	cpse	r13, r17
    8f70:	ef cf       	rjmp	.-34     	; 0x8f50 <LBPrintInt+0x26>
	{
		LBPrintChar(x, y, value % 10 + 48);
		value /= 10;
		x--;
	}
}
    8f72:	0f 90       	pop	r0
    8f74:	df 91       	pop	r29
    8f76:	cf 91       	pop	r28
    8f78:	1f 91       	pop	r17
    8f7a:	0f 91       	pop	r16
    8f7c:	ff 90       	pop	r15
    8f7e:	ef 90       	pop	r14
    8f80:	df 90       	pop	r13
    8f82:	cf 90       	pop	r12
    8f84:	08 95       	ret

00008f86 <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    8f86:	af 92       	push	r10
    8f88:	cf 92       	push	r12
    8f8a:	ef 92       	push	r14
    8f8c:	ff 92       	push	r15
    8f8e:	0f 93       	push	r16
    8f90:	1f 93       	push	r17
    8f92:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    8f94:	cb 01       	movw	r24, r22
    8f96:	82 0f       	add	r24, r18
    8f98:	91 1d       	adc	r25, r1
    8f9a:	e8 16       	cp	r14, r24
    8f9c:	f9 06       	cpc	r15, r25
    8f9e:	88 f4       	brcc	.+34     	; 0x8fc2 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    8fa0:	ea 0c       	add	r14, r10
    8fa2:	f1 1c       	adc	r15, r1
    8fa4:	6e 15       	cp	r22, r14
    8fa6:	7f 05       	cpc	r23, r15
    8fa8:	60 f4       	brcc	.+24     	; 0x8fc2 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    8faa:	cf 01       	movw	r24, r30
    8fac:	84 0f       	add	r24, r20
    8fae:	91 1d       	adc	r25, r1
    8fb0:	08 17       	cp	r16, r24
    8fb2:	19 07       	cpc	r17, r25
    8fb4:	30 f4       	brcc	.+12     	; 0x8fc2 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    8fb6:	0c 0d       	add	r16, r12
    8fb8:	11 1d       	adc	r17, r1
    8fba:	81 e0       	ldi	r24, 0x01	; 1
    8fbc:	e0 17       	cp	r30, r16
    8fbe:	f1 07       	cpc	r31, r17
    8fc0:	08 f0       	brcs	.+2      	; 0x8fc4 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    8fc2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    8fc4:	1f 91       	pop	r17
    8fc6:	0f 91       	pop	r16
    8fc8:	ff 90       	pop	r15
    8fca:	ef 90       	pop	r14
    8fcc:	cf 90       	pop	r12
    8fce:	af 90       	pop	r10
    8fd0:	08 95       	ret

00008fd2 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8fd2:	0f 93       	push	r16
    8fd4:	1f 93       	push	r17
    8fd6:	cf 93       	push	r28
    8fd8:	df 93       	push	r29
    8fda:	8c 01       	movw	r16, r24
    8fdc:	eb 01       	movw	r28, r22
	static unsigned int random_seed;
	if (random_seed == 0) random_seed = GetTrueRandomSeed();
    8fde:	80 91 f3 0c 	lds	r24, 0x0CF3
    8fe2:	90 91 f4 0c 	lds	r25, 0x0CF4
    8fe6:	89 2b       	or	r24, r25
    8fe8:	31 f4       	brne	.+12     	; 0x8ff6 <LBRandom+0x24>
    8fea:	0e 94 87 38 	call	0x710e	; 0x710e <GetTrueRandomSeed>
    8fee:	90 93 f4 0c 	sts	0x0CF4, r25
    8ff2:	80 93 f3 0c 	sts	0x0CF3, r24
	
	static u8 shift_count;
	unsigned int shifted = random_seed >> shift_count;
    8ff6:	90 91 f2 0c 	lds	r25, 0x0CF2
    8ffa:	20 91 f3 0c 	lds	r18, 0x0CF3
    8ffe:	30 91 f4 0c 	lds	r19, 0x0CF4
    9002:	09 2e       	mov	r0, r25
    9004:	02 c0       	rjmp	.+4      	; 0x900a <LBRandom+0x38>
    9006:	36 95       	lsr	r19
    9008:	27 95       	ror	r18
    900a:	0a 94       	dec	r0
    900c:	e2 f7       	brpl	.-8      	; 0x9006 <LBRandom+0x34>
	unsigned int delta = to - from;
    900e:	be 01       	movw	r22, r28
    9010:	60 1b       	sub	r22, r16
    9012:	71 0b       	sbc	r23, r17

	shift_count++;
    9014:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    9016:	90 31       	cpi	r25, 0x10	; 16
    9018:	18 f4       	brcc	.+6      	; 0x9020 <LBRandom+0x4e>
	
	static u8 shift_count;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    901a:	90 93 f2 0c 	sts	0x0CF2, r25
    901e:	02 c0       	rjmp	.+4      	; 0x9024 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    9020:	10 92 f2 0c 	sts	0x0CF2, r1

	return from + ((delta + shifted) % delta);
    9024:	cb 01       	movw	r24, r22
    9026:	82 0f       	add	r24, r18
    9028:	93 1f       	adc	r25, r19
    902a:	0e 94 b1 60 	call	0xc162	; 0xc162 <__udivmodhi4>
}
    902e:	80 0f       	add	r24, r16
    9030:	91 1f       	adc	r25, r17
    9032:	df 91       	pop	r29
    9034:	cf 91       	pop	r28
    9036:	1f 91       	pop	r17
    9038:	0f 91       	pop	r16
    903a:	08 95       	ret

0000903c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    903c:	cf 93       	push	r28
    903e:	df 93       	push	r29
    9040:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9042:	c0 e0       	ldi	r28, 0x00	; 0
    9044:	cd 17       	cp	r28, r29
    9046:	31 f0       	breq	.+12     	; 0x9054 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9048:	8f ef       	ldi	r24, 0xFF	; 255
    904a:	9f ef       	ldi	r25, 0xFF	; 255
    904c:	0e 94 45 38 	call	0x708a	; 0x708a <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9050:	cf 5f       	subi	r28, 0xFF	; 255
    9052:	f8 cf       	rjmp	.-16     	; 0x9044 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9054:	df 91       	pop	r29
    9056:	cf 91       	pop	r28
    9058:	08 95       	ret

0000905a <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    905a:	df 92       	push	r13
    905c:	ef 92       	push	r14
    905e:	ff 92       	push	r15
    9060:	0f 93       	push	r16
    9062:	1f 93       	push	r17
    9064:	cf 93       	push	r28
    9066:	df 93       	push	r29
    9068:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    906a:	fb 01       	movw	r30, r22
    906c:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    906e:	31 96       	adiw	r30, 0x01	; 1
    9070:	64 91       	lpm	r22, Z
    9072:	5f ef       	ldi	r21, 0xFF	; 255
    9074:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9076:	24 2f       	mov	r18, r20
    9078:	21 70       	andi	r18, 0x01	; 1
    907a:	40 ff       	sbrs	r20, 0
    907c:	04 c0       	rjmp	.+8      	; 0x9086 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    907e:	95 2f       	mov	r25, r21
		dx=-1;
    9080:	ff 24       	eor	r15, r15
    9082:	fa 94       	dec	r15
    9084:	03 c0       	rjmp	.+6      	; 0x908c <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9086:	ff 24       	eor	r15, r15
    9088:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    908a:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    908c:	41 ff       	sbrs	r20, 1
    908e:	05 c0       	rjmp	.+10     	; 0x909a <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9090:	7f ef       	ldi	r23, 0xFF	; 255
    9092:	76 0f       	add	r23, r22
		dy=-1;
    9094:	ee 24       	eor	r14, r14
    9096:	ea 94       	dec	r14
    9098:	03 c0       	rjmp	.+6      	; 0x90a0 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    909a:	ee 24       	eor	r14, r14
    909c:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    909e:	70 e0       	ldi	r23, 0x00	; 0
    90a0:	21 11       	cpse	r18, r1
    90a2:	01 c0       	rjmp	.+2      	; 0x90a6 <LBMapSprite+0x4c>
    90a4:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    90a6:	00 e0       	ldi	r16, 0x00	; 0
    90a8:	06 17       	cp	r16, r22
    90aa:	09 f1       	breq	.+66     	; 0x90ee <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    90ac:	71 03       	mulsu	r23, r17
    90ae:	e0 01       	movw	r28, r0
    90b0:	11 24       	eor	r1, r1
    90b2:	d8 2e       	mov	r13, r24
    90b4:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    90b6:	8d 15       	cp	r24, r13
    90b8:	b1 f0       	breq	.+44     	; 0x90e6 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    90ba:	9e 01       	movw	r18, r28
    90bc:	29 0f       	add	r18, r25
    90be:	31 1d       	adc	r19, r1
    90c0:	97 fd       	sbrc	r25, 7
    90c2:	3a 95       	dec	r19
    90c4:	2e 5f       	subi	r18, 0xFE	; 254
    90c6:	3f 4f       	sbci	r19, 0xFF	; 255
    90c8:	fd 01       	movw	r30, r26
    90ca:	e2 0f       	add	r30, r18
    90cc:	f3 1f       	adc	r31, r19
    90ce:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    90d0:	34 e0       	ldi	r19, 0x04	; 4
    90d2:	83 9f       	mul	r24, r19
    90d4:	f0 01       	movw	r30, r0
    90d6:	11 24       	eor	r1, r1
    90d8:	e5 55       	subi	r30, 0x55	; 85
    90da:	f0 4f       	sbci	r31, 0xF0	; 240
    90dc:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    90de:	8f 5f       	subi	r24, 0xFF	; 255
    90e0:	43 83       	std	Z+3, r20	; 0x03
    90e2:	9f 0d       	add	r25, r15
    90e4:	e8 cf       	rjmp	.-48     	; 0x90b6 <LBMapSprite+0x5c>
    90e6:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    90e8:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    90ea:	95 2f       	mov	r25, r21
    90ec:	dd cf       	rjmp	.-70     	; 0x90a8 <LBMapSprite+0x4e>
	}
}
    90ee:	df 91       	pop	r29
    90f0:	cf 91       	pop	r28
    90f2:	1f 91       	pop	r17
    90f4:	0f 91       	pop	r16
    90f6:	ff 90       	pop	r15
    90f8:	ef 90       	pop	r14
    90fa:	df 90       	pop	r13
    90fc:	08 95       	ret

000090fe <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    90fe:	df 92       	push	r13
    9100:	ef 92       	push	r14
    9102:	ff 92       	push	r15
    9104:	0f 93       	push	r16
    9106:	1f 93       	push	r17
    9108:	cf 93       	push	r28
    910a:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    910c:	a0 91 b4 0c 	lds	r26, 0x0CB4
    9110:	98 e0       	ldi	r25, 0x08	; 8
    9112:	a9 9f       	mul	r26, r25
    9114:	70 01       	movw	r14, r0
    9116:	11 24       	eor	r1, r1
    9118:	50 e0       	ldi	r21, 0x00	; 0
    911a:	38 ef       	ldi	r19, 0xF8	; 248
    911c:	a3 9f       	mul	r26, r19
    911e:	30 2d       	mov	r19, r0
    9120:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9122:	70 e0       	ldi	r23, 0x00	; 0
    9124:	70 17       	cp	r23, r16
    9126:	09 f1       	breq	.+66     	; 0x916a <LBMoveSprite+0x6c>
    9128:	d4 2e       	mov	r13, r20
    912a:	13 2f       	mov	r17, r19
    912c:	14 0f       	add	r17, r20
    912e:	b8 2f       	mov	r27, r24
    9130:	b2 0f       	add	r27, r18
    9132:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9134:	8b 17       	cp	r24, r27
    9136:	a9 f0       	breq	.+42     	; 0x9162 <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9138:	c4 e0       	ldi	r28, 0x04	; 4
    913a:	8c 9f       	mul	r24, r28
    913c:	f0 01       	movw	r30, r0
    913e:	11 24       	eor	r1, r1
    9140:	ef 01       	movw	r28, r30
    9142:	c5 55       	subi	r28, 0x55	; 85
    9144:	d0 4f       	sbci	r29, 0xF0	; 240
    9146:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9148:	a0 32       	cpi	r26, 0x20	; 32
    914a:	28 f4       	brcc	.+10     	; 0x9156 <LBMoveSprite+0x58>
    914c:	e4 16       	cp	r14, r20
    914e:	f5 06       	cpc	r15, r21
    9150:	14 f4       	brge	.+4      	; 0x9156 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9152:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9154:	03 c0       	rjmp	.+6      	; 0x915c <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9156:	e5 55       	subi	r30, 0x55	; 85
    9158:	f0 4f       	sbci	r31, 0xF0	; 240
    915a:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    915c:	8f 5f       	subi	r24, 0xFF	; 255
    915e:	98 5f       	subi	r25, 0xF8	; 248
    9160:	e9 cf       	rjmp	.-46     	; 0x9134 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9162:	7f 5f       	subi	r23, 0xFF	; 255
    9164:	48 5f       	subi	r20, 0xF8	; 248
    9166:	5f 4f       	sbci	r21, 0xFF	; 255
    9168:	dd cf       	rjmp	.-70     	; 0x9124 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    916a:	df 91       	pop	r29
    916c:	cf 91       	pop	r28
    916e:	1f 91       	pop	r17
    9170:	0f 91       	pop	r16
    9172:	ff 90       	pop	r15
    9174:	ef 90       	pop	r14
    9176:	df 90       	pop	r13
    9178:	08 95       	ret

0000917a <LBRotateSprites>:

void LBRotateSprites()
{
    917a:	80 e0       	ldi	r24, 0x00	; 0
    917c:	90 e0       	ldi	r25, 0x00	; 0
    917e:	dc 01       	movw	r26, r24
    9180:	a5 55       	subi	r26, 0x55	; 85
    9182:	b0 4f       	sbci	r27, 0xF0	; 240
    9184:	fc 01       	movw	r30, r24
    9186:	e0 5f       	subi	r30, 0xF0	; 240
    9188:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    918a:	13 96       	adiw	r26, 0x03	; 3
    918c:	2c 91       	ld	r18, X
    918e:	13 97       	sbiw	r26, 0x03	; 3
    9190:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9192:	12 96       	adiw	r26, 0x02	; 2
    9194:	2c 91       	ld	r18, X
    9196:	12 97       	sbiw	r26, 0x02	; 2
    9198:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    919a:	2c 91       	ld	r18, X
    919c:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    919e:	11 96       	adiw	r26, 0x01	; 1
    91a0:	2c 91       	ld	r18, X
    91a2:	21 83       	std	Z+1, r18	; 0x01
    91a4:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    91a6:	88 33       	cpi	r24, 0x38	; 56
    91a8:	91 05       	cpc	r25, r1
    91aa:	49 f7       	brne	.-46     	; 0x917e <LBRotateSprites+0x4>
    91ac:	80 91 01 05 	lds	r24, 0x0501
    91b0:	20 e0       	ldi	r18, 0x00	; 0
    91b2:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    91b4:	94 e0       	ldi	r25, 0x04	; 4
    91b6:	89 9f       	mul	r24, r25
    91b8:	d0 01       	movw	r26, r0
    91ba:	11 24       	eor	r1, r1
    91bc:	a5 55       	subi	r26, 0x55	; 85
    91be:	b0 4f       	sbci	r27, 0xF0	; 240
    91c0:	13 96       	adiw	r26, 0x03	; 3
    91c2:	9c 91       	ld	r25, X
    91c4:	13 97       	sbiw	r26, 0x03	; 3
    91c6:	f9 01       	movw	r30, r18
    91c8:	e0 5f       	subi	r30, 0xF0	; 240
    91ca:	fa 4f       	sbci	r31, 0xFA	; 250
    91cc:	93 af       	std	Z+59, r25	; 0x3b
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    91ce:	12 96       	adiw	r26, 0x02	; 2
    91d0:	9c 91       	ld	r25, X
    91d2:	12 97       	sbiw	r26, 0x02	; 2
    91d4:	92 af       	std	Z+58, r25	; 0x3a
		sprites[i].x = extendedSprites[rotate_index].x;
    91d6:	9c 91       	ld	r25, X
    91d8:	90 af       	std	Z+56, r25	; 0x38
		sprites[i].y = extendedSprites[rotate_index].y;
    91da:	11 96       	adiw	r26, 0x01	; 1
    91dc:	9c 91       	ld	r25, X
    91de:	91 af       	std	Z+57, r25	; 0x39
		rotate_index += 1;
    91e0:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    91e2:	84 31       	cpi	r24, 0x14	; 20
    91e4:	08 f0       	brcs	.+2      	; 0x91e8 <LBRotateSprites+0x6e>
    91e6:	8e e0       	ldi	r24, 0x0E	; 14
    91e8:	2c 5f       	subi	r18, 0xFC	; 252
    91ea:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    91ec:	28 30       	cpi	r18, 0x08	; 8
    91ee:	31 05       	cpc	r19, r1
    91f0:	09 f7       	brne	.-62     	; 0x91b4 <LBRotateSprites+0x3a>
    91f2:	80 93 01 05 	sts	0x0501, r24
    91f6:	08 95       	ret

000091f8 <is_space>:
char* enemy_shot_anim[1];
char* expl_anim[3];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    91f8:	80 91 b7 0d 	lds	r24, 0x0DB7
}
    91fc:	81 70       	andi	r24, 0x01	; 1
    91fe:	08 95       	ret

00009200 <init_game_state>:

void init_game_state()
{
	game.lives = LIVES;
    9200:	e7 ea       	ldi	r30, 0xA7	; 167
    9202:	fd e0       	ldi	r31, 0x0D	; 13
    9204:	85 e0       	ldi	r24, 0x05	; 5
    9206:	86 87       	std	Z+14, r24	; 0x0e
	game.score = 0;
    9208:	11 86       	std	Z+9, r1	; 0x09
    920a:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    920c:	13 86       	std	Z+11, r1	; 0x0b
    920e:	12 86       	std	Z+10, r1	; 0x0a
    9210:	08 95       	ret

00009212 <init_enemy_state>:
}

void init_enemy_state()
{
    9212:	80 e0       	ldi	r24, 0x00	; 0
    9214:	90 e0       	ldi	r25, 0x00	; 0
    9216:	9c 01       	movw	r18, r24
    9218:	29 55       	subi	r18, 0x59	; 89
    921a:	32 4f       	sbci	r19, 0xF2	; 242
    921c:	f9 01       	movw	r30, r18
    921e:	e8 54       	subi	r30, 0x48	; 72
    9220:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9222:	10 82       	st	Z, r1
    9224:	7a 96       	adiw	r30, 0x1a	; 26
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9226:	10 82       	st	Z, r1
    9228:	8e 5b       	subi	r24, 0xBE	; 190
    922a:	9f 4f       	sbci	r25, 0xFF	; 255
	game.time = 0;
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    922c:	8a 34       	cpi	r24, 0x4A	; 74
    922e:	21 e0       	ldi	r18, 0x01	; 1
    9230:	92 07       	cpc	r25, r18
    9232:	89 f7       	brne	.-30     	; 0x9216 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9234:	10 92 c1 0d 	sts	0x0DC1, r1
    9238:	08 95       	ret

0000923a <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    923a:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    923e:	88 23       	and	r24, r24
    9240:	f9 f0       	breq	.+62     	; 0x9280 <init_player_state+0x46>
	{
		game.player.width = 3;
    9242:	83 e0       	ldi	r24, 0x03	; 3
    9244:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 1;
    9248:	81 e0       	ldi	r24, 0x01	; 1
    924a:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 2;
    924e:	82 e0       	ldi	r24, 0x02	; 2
    9250:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9254:	85 e0       	ldi	r24, 0x05	; 5
    9256:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    925a:	8b ef       	ldi	r24, 0xFB	; 251
    925c:	9f e0       	ldi	r25, 0x0F	; 15
    925e:	90 93 37 0e 	sts	0x0E37, r25
    9262:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    9266:	86 e6       	ldi	r24, 0x66	; 102
    9268:	9d e2       	ldi	r25, 0x2D	; 45
    926a:	90 93 fc 0f 	sts	0x0FFC, r25
    926e:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    9272:	81 e6       	ldi	r24, 0x61	; 97
    9274:	9d e2       	ldi	r25, 0x2D	; 45
    9276:	90 93 fe 0f 	sts	0x0FFE, r25
    927a:	80 93 fd 0f 	sts	0x0FFD, r24
    927e:	2a c0       	rjmp	.+84     	; 0x92d4 <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    9280:	82 e0       	ldi	r24, 0x02	; 2
    9282:	80 93 d7 0d 	sts	0x0DD7, r24
		game.player.height = 3;
    9286:	83 e0       	ldi	r24, 0x03	; 3
    9288:	80 93 d8 0d 	sts	0x0DD8, r24
		game.player.run.anim_count = 4;
    928c:	84 e0       	ldi	r24, 0x04	; 4
    928e:	80 93 31 0e 	sts	0x0E31, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    9292:	8c e0       	ldi	r24, 0x0C	; 12
    9294:	80 93 32 0e 	sts	0x0E32, r24
		game.player.run.anims = run_anim;
    9298:	8b ef       	ldi	r24, 0xFB	; 251
    929a:	9f e0       	ldi	r25, 0x0F	; 15
    929c:	90 93 37 0e 	sts	0x0E37, r25
    92a0:	80 93 36 0e 	sts	0x0E36, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    92a4:	80 e9       	ldi	r24, 0x90	; 144
    92a6:	9d e2       	ldi	r25, 0x2D	; 45
    92a8:	90 93 fc 0f 	sts	0x0FFC, r25
    92ac:	80 93 fb 0f 	sts	0x0FFB, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    92b0:	88 e8       	ldi	r24, 0x88	; 136
    92b2:	9d e2       	ldi	r25, 0x2D	; 45
    92b4:	90 93 fe 0f 	sts	0x0FFE, r25
    92b8:	80 93 fd 0f 	sts	0x0FFD, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    92bc:	80 e8       	ldi	r24, 0x80	; 128
    92be:	9d e2       	ldi	r25, 0x2D	; 45
    92c0:	90 93 00 10 	sts	0x1000, r25
    92c4:	80 93 ff 0f 	sts	0x0FFF, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    92c8:	88 e7       	ldi	r24, 0x78	; 120
    92ca:	9d e2       	ldi	r25, 0x2D	; 45
    92cc:	90 93 02 10 	sts	0x1002, r25
    92d0:	80 93 01 10 	sts	0x1001, r24
	}
	game.player.direction = D_RIGHT;
    92d4:	81 e0       	ldi	r24, 0x01	; 1
    92d6:	80 93 d6 0d 	sts	0x0DD6, r24
	game.player.flags = IDLE;
    92da:	98 e0       	ldi	r25, 0x08	; 8
    92dc:	90 93 d4 0d 	sts	0x0DD4, r25
	game.player.shield = PLAYER_SHIELD;
    92e0:	9a e0       	ldi	r25, 0x0A	; 10
    92e2:	90 93 d9 0d 	sts	0x0DD9, r25
	game.player.idle.anim_count = 1;
    92e6:	80 93 29 0e 	sts	0x0E29, r24
	game.player.idle.frames_per_anim = 1;
    92ea:	80 93 2a 0e 	sts	0x0E2A, r24
	game.player.idle.anims = idle_anim;
    92ee:	2d e0       	ldi	r18, 0x0D	; 13
    92f0:	30 e1       	ldi	r19, 0x10	; 16
    92f2:	30 93 2f 0e 	sts	0x0E2F, r19
    92f6:	20 93 2e 0e 	sts	0x0E2E, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    92fa:	28 e9       	ldi	r18, 0x98	; 152
    92fc:	3d e2       	ldi	r19, 0x2D	; 45
    92fe:	30 93 0e 10 	sts	0x100E, r19
    9302:	20 93 0d 10 	sts	0x100D, r18
	
	game.player.jump.anim_count = 1;
    9306:	80 93 39 0e 	sts	0x0E39, r24
	game.player.jump.frames_per_anim = 1;
    930a:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.jump.anims = jump_anim;
    930e:	25 e8       	ldi	r18, 0x85	; 133
    9310:	3d e0       	ldi	r19, 0x0D	; 13
    9312:	30 93 3f 0e 	sts	0x0E3F, r19
    9316:	20 93 3e 0e 	sts	0x0E3E, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    931a:	20 e7       	ldi	r18, 0x70	; 112
    931c:	3d e2       	ldi	r19, 0x2D	; 45
    931e:	30 93 86 0d 	sts	0x0D86, r19
    9322:	20 93 85 0d 	sts	0x0D85, r18
	
	game.player.prone.anim_count = 1;
    9326:	80 93 41 0e 	sts	0x0E41, r24
	game.player.prone.frames_per_anim = 1;
    932a:	80 93 42 0e 	sts	0x0E42, r24
	game.player.prone.anims = prone_anim;
    932e:	83 ea       	ldi	r24, 0xA3	; 163
    9330:	9f e0       	ldi	r25, 0x0F	; 15
    9332:	90 93 47 0e 	sts	0x0E47, r25
    9336:	80 93 46 0e 	sts	0x0E46, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    933a:	8b e6       	ldi	r24, 0x6B	; 107
    933c:	9d e2       	ldi	r25, 0x2D	; 45
    933e:	90 93 a4 0f 	sts	0x0FA4, r25
    9342:	80 93 a3 0f 	sts	0x0FA3, r24
	
	game.player.expl.anim_count = 3;
    9346:	83 e0       	ldi	r24, 0x03	; 3
    9348:	80 93 49 0e 	sts	0x0E49, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    934c:	85 e0       	ldi	r24, 0x05	; 5
    934e:	80 93 4a 0e 	sts	0x0E4A, r24
	game.player.expl.anims = expl_anim;
    9352:	87 e0       	ldi	r24, 0x07	; 7
    9354:	90 e1       	ldi	r25, 0x10	; 16
    9356:	90 93 4f 0e 	sts	0x0E4F, r25
    935a:	80 93 4e 0e 	sts	0x0E4E, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    935e:	85 eb       	ldi	r24, 0xB5	; 181
    9360:	9d e2       	ldi	r25, 0x2D	; 45
    9362:	90 93 08 10 	sts	0x1008, r25
    9366:	80 93 07 10 	sts	0x1007, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    936a:	82 eb       	ldi	r24, 0xB2	; 178
    936c:	9d e2       	ldi	r25, 0x2D	; 45
    936e:	90 93 0a 10 	sts	0x100A, r25
    9372:	80 93 09 10 	sts	0x1009, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    9376:	8f ea       	ldi	r24, 0xAF	; 175
    9378:	9d e2       	ldi	r25, 0x2D	; 45
    937a:	90 93 0c 10 	sts	0x100C, r25
    937e:	80 93 0b 10 	sts	0x100B, r24
    9382:	ee ee       	ldi	r30, 0xEE	; 238
    9384:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    9386:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    9388:	25 e0       	ldi	r18, 0x05	; 5
    938a:	30 e1       	ldi	r19, 0x10	; 16
    938c:	df 01       	movw	r26, r30
    938e:	14 97       	sbiw	r26, 0x04	; 4
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    9390:	8c 93       	st	X, r24
    9392:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    9394:	1c 92       	st	X, r1
    9396:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    9398:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    939a:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    939c:	35 83       	std	Z+5, r19	; 0x05
    939e:	24 83       	std	Z+4, r18	; 0x04
    93a0:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.expl.anims = expl_anim;
	game.player.expl.anims[0] = (char*) map_explosion_0;
	game.player.expl.anims[1] = (char*) map_explosion_1;
	game.player.expl.anims[2] = (char*) map_explosion_2;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    93a2:	9e e0       	ldi	r25, 0x0E	; 14
    93a4:	ec 33       	cpi	r30, 0x3C	; 60
    93a6:	f9 07       	cpc	r31, r25
    93a8:	89 f7       	brne	.-30     	; 0x938c <init_player_state+0x152>
    93aa:	8a e4       	ldi	r24, 0x4A	; 74
    93ac:	9d e2       	ldi	r25, 0x2D	; 45
    93ae:	90 93 06 10 	sts	0x1006, r25
    93b2:	80 93 05 10 	sts	0x1005, r24
    93b6:	08 95       	ret

000093b8 <init_enemy_shot>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
    93b8:	ef 92       	push	r14
    93ba:	ff 92       	push	r15
    93bc:	0f 93       	push	r16
    93be:	1f 93       	push	r17
    93c0:	cf 93       	push	r28
    93c2:	df 93       	push	r29
    93c4:	8a 01       	movw	r16, r20
	game.enemies[i].expl.anim_count = 3;
    93c6:	22 e4       	ldi	r18, 0x42	; 66
    93c8:	82 9f       	mul	r24, r18
    93ca:	c0 01       	movw	r24, r0
    93cc:	11 24       	eor	r1, r1
    93ce:	ec 01       	movw	r28, r24
    93d0:	c9 55       	subi	r28, 0x59	; 89
    93d2:	d2 4f       	sbci	r29, 0xF2	; 242
    93d4:	fe 01       	movw	r30, r28
    93d6:	ec 51       	subi	r30, 0x1C	; 28
    93d8:	ff 4f       	sbci	r31, 0xFF	; 255
    93da:	83 e0       	ldi	r24, 0x03	; 3
    93dc:	80 83       	st	Z, r24
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    93de:	31 96       	adiw	r30, 0x01	; 1
    93e0:	85 e0       	ldi	r24, 0x05	; 5
    93e2:	80 83       	st	Z, r24
	game.enemies[i].expl.anims = expl_anim;
    93e4:	de 01       	movw	r26, r28
    93e6:	a7 51       	subi	r26, 0x17	; 23
    93e8:	bf 4f       	sbci	r27, 0xFF	; 255
    93ea:	e7 e0       	ldi	r30, 0x07	; 7
    93ec:	f0 e1       	ldi	r31, 0x10	; 16
    93ee:	11 96       	adiw	r26, 0x01	; 1
    93f0:	fc 93       	st	X, r31
    93f2:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    93f4:	85 eb       	ldi	r24, 0xB5	; 181
    93f6:	9d e2       	ldi	r25, 0x2D	; 45
    93f8:	91 83       	std	Z+1, r25	; 0x01
    93fa:	80 83       	st	Z, r24
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    93fc:	82 eb       	ldi	r24, 0xB2	; 178
    93fe:	9d e2       	ldi	r25, 0x2D	; 45
    9400:	93 83       	std	Z+3, r25	; 0x03
    9402:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    9404:	8f ea       	ldi	r24, 0xAF	; 175
    9406:	9d e2       	ldi	r25, 0x2D	; 45
    9408:	95 83       	std	Z+5, r25	; 0x05
    940a:	84 83       	std	Z+4, r24	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    940c:	fe 01       	movw	r30, r28
    940e:	ef 52       	subi	r30, 0x2F	; 47
    9410:	ff 4f       	sbci	r31, 0xFF	; 255
    9412:	81 e0       	ldi	r24, 0x01	; 1
    9414:	80 83       	st	Z, r24
		game.enemies[i].shot[j].active = 0;
    9416:	31 96       	adiw	r30, 0x01	; 1
    9418:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    941a:	32 97       	sbiw	r30, 0x02	; 2
    941c:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anim_count = 1;
    941e:	34 96       	adiw	r30, 0x04	; 4
    9420:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    9422:	31 96       	adiw	r30, 0x01	; 1
    9424:	80 83       	st	Z, r24
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    9426:	50 97       	sbiw	r26, 0x10	; 16
    9428:	e3 e0       	ldi	r30, 0x03	; 3
    942a:	f0 e1       	ldi	r31, 0x10	; 16
    942c:	ed 93       	st	X+, r30
    942e:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    9430:	87 e4       	ldi	r24, 0x47	; 71
    9432:	9d e2       	ldi	r25, 0x2D	; 45
    9434:	91 83       	std	Z+1, r25	; 0x01
    9436:	80 83       	st	Z, r24
		game.enemies[i].shot[j].shared.vx = 0;
    9438:	fe 01       	movw	r30, r28
    943a:	e3 53       	subi	r30, 0x33	; 51
    943c:	ff 4f       	sbci	r31, 0xFF	; 255
    943e:	11 82       	std	Z+1, r1	; 0x01
    9440:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    9442:	3c 97       	sbiw	r30, 0x0c	; 12
    9444:	10 82       	st	Z, r1
    9446:	11 82       	std	Z+1, r1	; 0x01
    9448:	12 82       	std	Z+2, r1	; 0x02
    944a:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    944c:	7e 01       	movw	r14, r28
    944e:	85 ec       	ldi	r24, 0xC5	; 197
    9450:	e8 0e       	add	r14, r24
    9452:	f1 1c       	adc	r15, r1
    9454:	80 e0       	ldi	r24, 0x00	; 0
    9456:	90 e0       	ldi	r25, 0x00	; 0
    9458:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    945c:	f7 01       	movw	r30, r14
    945e:	60 83       	st	Z, r22
    9460:	71 83       	std	Z+1, r23	; 0x01
    9462:	82 83       	std	Z+2, r24	; 0x02
    9464:	93 83       	std	Z+3, r25	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    9466:	c7 53       	subi	r28, 0x37	; 55
    9468:	df 4f       	sbci	r29, 0xFF	; 255
    946a:	b8 01       	movw	r22, r16
    946c:	80 e0       	ldi	r24, 0x00	; 0
    946e:	90 e0       	ldi	r25, 0x00	; 0
    9470:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    9474:	68 83       	st	Y, r22
    9476:	79 83       	std	Y+1, r23	; 0x01
    9478:	8a 83       	std	Y+2, r24	; 0x02
    947a:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    947c:	df 91       	pop	r29
    947e:	cf 91       	pop	r28
    9480:	1f 91       	pop	r17
    9482:	0f 91       	pop	r16
    9484:	ff 90       	pop	r15
    9486:	ef 90       	pop	r14
    9488:	08 95       	ret

0000948a <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    948a:	af 92       	push	r10
    948c:	bf 92       	push	r11
    948e:	cf 92       	push	r12
    9490:	df 92       	push	r13
    9492:	ef 92       	push	r14
    9494:	ff 92       	push	r15
    9496:	1f 93       	push	r17
    9498:	cf 93       	push	r28
    949a:	df 93       	push	r29
    949c:	18 2f       	mov	r17, r24
    949e:	7b 01       	movw	r14, r22
    94a0:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    94a2:	82 e4       	ldi	r24, 0x42	; 66
    94a4:	18 9f       	mul	r17, r24
    94a6:	e0 01       	movw	r28, r0
    94a8:	11 24       	eor	r1, r1
    94aa:	c9 55       	subi	r28, 0x59	; 89
    94ac:	d2 4f       	sbci	r29, 0xF2	; 242
    94ae:	fe 01       	movw	r30, r28
    94b0:	e8 54       	subi	r30, 0x48	; 72
    94b2:	ff 4f       	sbci	r31, 0xFF	; 255
    94b4:	91 e0       	ldi	r25, 0x01	; 1
    94b6:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    94b8:	32 96       	adiw	r30, 0x02	; 2
    94ba:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    94bc:	31 97       	sbiw	r30, 0x01	; 1
    94be:	88 e0       	ldi	r24, 0x08	; 8
    94c0:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    94c2:	32 96       	adiw	r30, 0x02	; 2
    94c4:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    94c6:	31 96       	adiw	r30, 0x01	; 1
    94c8:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    94ca:	31 96       	adiw	r30, 0x01	; 1
    94cc:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    94ce:	31 96       	adiw	r30, 0x01	; 1
    94d0:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    94d2:	31 96       	adiw	r30, 0x01	; 1
    94d4:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    94d6:	31 96       	adiw	r30, 0x01	; 1
    94d8:	82 e0       	ldi	r24, 0x02	; 2
    94da:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    94dc:	7c 96       	adiw	r30, 0x1c	; 28
    94de:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    94e0:	31 96       	adiw	r30, 0x01	; 1
    94e2:	8a e0       	ldi	r24, 0x0A	; 10
    94e4:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    94e6:	de 01       	movw	r26, r28
    94e8:	af 51       	subi	r26, 0x1F	; 31
    94ea:	bf 4f       	sbci	r27, 0xFF	; 255
    94ec:	e5 ea       	ldi	r30, 0xA5	; 165
    94ee:	ff e0       	ldi	r31, 0x0F	; 15
    94f0:	ed 93       	st	X+, r30
    94f2:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    94f4:	81 e4       	ldi	r24, 0x41	; 65
    94f6:	9d e2       	ldi	r25, 0x2D	; 45
    94f8:	91 83       	std	Z+1, r25	; 0x01
    94fa:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    94fc:	8e e3       	ldi	r24, 0x3E	; 62
    94fe:	9d e2       	ldi	r25, 0x2D	; 45
    9500:	93 83       	std	Z+3, r25	; 0x03
    9502:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    9504:	fe 01       	movw	r30, r28
    9506:	e9 54       	subi	r30, 0x49	; 73
    9508:	ff 4f       	sbci	r31, 0xFF	; 255
    950a:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    950c:	32 97       	sbiw	r30, 0x02	; 2
    950e:	11 82       	std	Z+1, r1	; 0x01
    9510:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    9512:	3c 97       	sbiw	r30, 0x0c	; 12
    9514:	10 82       	st	Z, r1
    9516:	11 82       	std	Z+1, r1	; 0x01
    9518:	12 82       	std	Z+2, r1	; 0x02
    951a:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    951c:	5e 01       	movw	r10, r28
    951e:	ed ea       	ldi	r30, 0xAD	; 173
    9520:	ae 0e       	add	r10, r30
    9522:	b1 1c       	adc	r11, r1
    9524:	80 e0       	ldi	r24, 0x00	; 0
    9526:	90 e0       	ldi	r25, 0x00	; 0
    9528:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    952c:	f5 01       	movw	r30, r10
    952e:	60 83       	st	Z, r22
    9530:	71 83       	std	Z+1, r23	; 0x01
    9532:	82 83       	std	Z+2, r24	; 0x02
    9534:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9536:	cf 54       	subi	r28, 0x4F	; 79
    9538:	df 4f       	sbci	r29, 0xFF	; 255
    953a:	b6 01       	movw	r22, r12
    953c:	80 e0       	ldi	r24, 0x00	; 0
    953e:	90 e0       	ldi	r25, 0x00	; 0
    9540:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    9544:	68 83       	st	Y, r22
    9546:	79 83       	std	Y+1, r23	; 0x01
    9548:	8a 83       	std	Y+2, r24	; 0x02
    954a:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    954c:	a6 01       	movw	r20, r12
    954e:	b7 01       	movw	r22, r14
    9550:	81 2f       	mov	r24, r17
}
    9552:	df 91       	pop	r29
    9554:	cf 91       	pop	r28
    9556:	1f 91       	pop	r17
    9558:	ff 90       	pop	r15
    955a:	ef 90       	pop	r14
    955c:	df 90       	pop	r13
    955e:	cf 90       	pop	r12
    9560:	bf 90       	pop	r11
    9562:	af 90       	pop	r10
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    9564:	0c 94 dc 49 	jmp	0x93b8	; 0x93b8 <init_enemy_shot>

00009568 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
    9568:	af 92       	push	r10
    956a:	bf 92       	push	r11
    956c:	cf 92       	push	r12
    956e:	df 92       	push	r13
    9570:	ef 92       	push	r14
    9572:	ff 92       	push	r15
    9574:	1f 93       	push	r17
    9576:	cf 93       	push	r28
    9578:	df 93       	push	r29
    957a:	18 2f       	mov	r17, r24
    957c:	7b 01       	movw	r14, r22
    957e:	6a 01       	movw	r12, r20
	game.enemies[i].active = 1;
    9580:	82 e4       	ldi	r24, 0x42	; 66
    9582:	18 9f       	mul	r17, r24
    9584:	e0 01       	movw	r28, r0
    9586:	11 24       	eor	r1, r1
    9588:	c9 55       	subi	r28, 0x59	; 89
    958a:	d2 4f       	sbci	r29, 0xF2	; 242
    958c:	fe 01       	movw	r30, r28
    958e:	e8 54       	subi	r30, 0x48	; 72
    9590:	ff 4f       	sbci	r31, 0xFF	; 255
    9592:	91 e0       	ldi	r25, 0x01	; 1
    9594:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    9596:	33 96       	adiw	r30, 0x03	; 3
    9598:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    959a:	31 96       	adiw	r30, 0x01	; 1
    959c:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    959e:	31 96       	adiw	r30, 0x01	; 1
    95a0:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    95a2:	31 96       	adiw	r30, 0x01	; 1
    95a4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    95a6:	31 96       	adiw	r30, 0x01	; 1
    95a8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    95aa:	31 96       	adiw	r30, 0x01	; 1
    95ac:	84 e0       	ldi	r24, 0x04	; 4
    95ae:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 1;
    95b0:	7c 96       	adiw	r30, 0x1c	; 28
    95b2:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    95b4:	de 01       	movw	r26, r28
    95b6:	af 51       	subi	r26, 0x1F	; 31
    95b8:	bf 4f       	sbci	r27, 0xFF	; 255
    95ba:	e9 ea       	ldi	r30, 0xA9	; 169
    95bc:	ff e0       	ldi	r31, 0x0F	; 15
    95be:	ed 93       	st	X+, r30
    95c0:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    95c2:	84 e4       	ldi	r24, 0x44	; 68
    95c4:	9d e2       	ldi	r25, 0x2D	; 45
    95c6:	91 83       	std	Z+1, r25	; 0x01
    95c8:	80 83       	st	Z, r24
	game.enemies[i].shared.gravity = 0;
    95ca:	fe 01       	movw	r30, r28
    95cc:	e9 54       	subi	r30, 0x49	; 73
    95ce:	ff 4f       	sbci	r31, 0xFF	; 255
    95d0:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    95d2:	32 97       	sbiw	r30, 0x02	; 2
    95d4:	84 e1       	ldi	r24, 0x14	; 20
    95d6:	90 e0       	ldi	r25, 0x00	; 0
    95d8:	91 83       	std	Z+1, r25	; 0x01
    95da:	80 83       	st	Z, r24
	game.enemies[i].shared.vy = 0;
    95dc:	3c 97       	sbiw	r30, 0x0c	; 12
    95de:	10 82       	st	Z, r1
    95e0:	11 82       	std	Z+1, r1	; 0x01
    95e2:	12 82       	std	Z+2, r1	; 0x02
    95e4:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    95e6:	5e 01       	movw	r10, r28
    95e8:	ed ea       	ldi	r30, 0xAD	; 173
    95ea:	ae 0e       	add	r10, r30
    95ec:	b1 1c       	adc	r11, r1
    95ee:	80 e0       	ldi	r24, 0x00	; 0
    95f0:	90 e0       	ldi	r25, 0x00	; 0
    95f2:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    95f6:	f5 01       	movw	r30, r10
    95f8:	60 83       	st	Z, r22
    95fa:	71 83       	std	Z+1, r23	; 0x01
    95fc:	82 83       	std	Z+2, r24	; 0x02
    95fe:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    9600:	cf 54       	subi	r28, 0x4F	; 79
    9602:	df 4f       	sbci	r29, 0xFF	; 255
    9604:	b6 01       	movw	r22, r12
    9606:	80 e0       	ldi	r24, 0x00	; 0
    9608:	90 e0       	ldi	r25, 0x00	; 0
    960a:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    960e:	68 83       	st	Y, r22
    9610:	79 83       	std	Y+1, r23	; 0x01
    9612:	8a 83       	std	Y+2, r24	; 0x02
    9614:	9b 83       	std	Y+3, r25	; 0x03
	
	init_enemy_shot(i, x, y);
    9616:	a6 01       	movw	r20, r12
    9618:	b7 01       	movw	r22, r14
    961a:	81 2f       	mov	r24, r17
}
    961c:	df 91       	pop	r29
    961e:	cf 91       	pop	r28
    9620:	1f 91       	pop	r17
    9622:	ff 90       	pop	r15
    9624:	ef 90       	pop	r14
    9626:	df 90       	pop	r13
    9628:	cf 90       	pop	r12
    962a:	bf 90       	pop	r11
    962c:	af 90       	pop	r10
	game.enemies[i].shared.vx = SHARK_SPEED;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	
	init_enemy_shot(i, x, y);
    962e:	0c 94 dc 49 	jmp	0x93b8	; 0x93b8 <init_enemy_shot>

00009632 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    9632:	1f 93       	push	r17
    9634:	cf 93       	push	r28
    9636:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9638:	d0 e0       	ldi	r29, 0x00	; 0
    963a:	10 e2       	ldi	r17, 0x20	; 32
    963c:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    963e:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    9640:	c1 17       	cp	r28, r17
    9642:	41 f0       	breq	.+16     	; 0x9654 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    9644:	40 e0       	ldi	r20, 0x00	; 0
    9646:	50 e0       	ldi	r21, 0x00	; 0
    9648:	6c 2f       	mov	r22, r28
    964a:	8d 2f       	mov	r24, r29
    964c:	0e 94 19 38 	call	0x7032	; 0x7032 <SetTile>
    9650:	cf 5f       	subi	r28, 0xFF	; 255
    9652:	f6 cf       	rjmp	.-20     	; 0x9640 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    9654:	df 5f       	subi	r29, 0xFF	; 255
    9656:	dc 31       	cpi	r29, 0x1C	; 28
    9658:	91 f7       	brne	.-28     	; 0x963e <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    965a:	df 91       	pop	r29
    965c:	cf 91       	pop	r28
    965e:	1f 91       	pop	r17
    9660:	08 95       	ret

00009662 <read_level_byte>:
#else
u8 read_level_byte(char* level_data, u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    9662:	fb 01       	movw	r30, r22
    9664:	ee 0f       	add	r30, r30
    9666:	ef 2f       	mov	r30, r31
    9668:	ee 1f       	adc	r30, r30
    966a:	ff 0b       	sbc	r31, r31
    966c:	f1 95       	neg	r31
    966e:	34 e0       	ldi	r19, 0x04	; 4
    9670:	ee 0f       	add	r30, r30
    9672:	ff 1f       	adc	r31, r31
    9674:	3a 95       	dec	r19
    9676:	e1 f7       	brne	.-8      	; 0x9670 <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    9678:	9f 01       	movw	r18, r30
    967a:	43 e0       	ldi	r20, 0x03	; 3
    967c:	22 0f       	add	r18, r18
    967e:	33 1f       	adc	r19, r19
    9680:	4a 95       	dec	r20
    9682:	e1 f7       	brne	.-8      	; 0x967c <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    9684:	6f 5f       	subi	r22, 0xFF	; 255
    9686:	7f 4f       	sbci	r23, 0xFF	; 255
	counter += (u16) level_data;
    9688:	8e 0f       	add	r24, r30
    968a:	9f 1f       	adc	r25, r31
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    968c:	fc 01       	movw	r30, r24
    968e:	90 e0       	ldi	r25, 0x00	; 0

00009690 <while1>:
    9690:	95 91       	lpm	r25, Z+
    9692:	85 91       	lpm	r24, Z+
    9694:	29 0f       	add	r18, r25
    9696:	31 1d       	adc	r19, r1
    9698:	26 17       	cp	r18, r22
    969a:	37 07       	cpc	r19, r23
    969c:	08 f4       	brcc	.+2      	; 0x96a0 <while1done>
    969e:	f8 cf       	rjmp	.-16     	; 0x9690 <while1>

000096a0 <while1done>:
    96a0:	08 95       	ret

000096a2 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u16 x, u16 y)
{
    96a2:	6e 5f       	subi	r22, 0xFE	; 254
    96a4:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_data, 2 + y*game.level_width+x);
    96a6:	e0 91 b8 0d 	lds	r30, 0x0DB8
    96aa:	e4 9f       	mul	r30, r20
    96ac:	90 01       	movw	r18, r0
    96ae:	e5 9f       	mul	r30, r21
    96b0:	30 0d       	add	r19, r0
    96b2:	11 24       	eor	r1, r1
    96b4:	62 0f       	add	r22, r18
    96b6:	73 1f       	adc	r23, r19
    96b8:	0c 94 31 4b 	jmp	0x9662	; 0x9662 <read_level_byte>

000096bc <render_camera_view>:
}

void render_camera_view()
{
    96bc:	7f 92       	push	r7
    96be:	8f 92       	push	r8
    96c0:	9f 92       	push	r9
    96c2:	af 92       	push	r10
    96c4:	bf 92       	push	r11
    96c6:	cf 92       	push	r12
    96c8:	df 92       	push	r13
    96ca:	ef 92       	push	r14
    96cc:	ff 92       	push	r15
    96ce:	0f 93       	push	r16
    96d0:	1f 93       	push	r17
    96d2:	cf 93       	push	r28
    96d4:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    96d6:	c0 91 ab 0d 	lds	r28, 0x0DAB
    96da:	d0 91 ac 0d 	lds	r29, 0x0DAC
    96de:	83 e0       	ldi	r24, 0x03	; 3
    96e0:	d6 95       	lsr	r29
    96e2:	c7 95       	ror	r28
    96e4:	8a 95       	dec	r24
    96e6:	e1 f7       	brne	.-8      	; 0x96e0 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    96e8:	c0 90 ad 0d 	lds	r12, 0x0DAD
    96ec:	d0 90 ae 0d 	lds	r13, 0x0DAE
    96f0:	93 e0       	ldi	r25, 0x03	; 3
    96f2:	d6 94       	lsr	r13
    96f4:	c7 94       	ror	r12
    96f6:	9a 95       	dec	r25
    96f8:	e1 f7       	brne	.-8      	; 0x96f2 <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    96fa:	8e 01       	movw	r16, r28
    96fc:	5e 01       	movw	r10, r28
    96fe:	8c e1       	ldi	r24, 0x1C	; 28
    9700:	a8 0e       	add	r10, r24
    9702:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9704:	46 01       	movw	r8, r12
    9706:	8a e1       	ldi	r24, 0x1A	; 26
    9708:	88 0e       	add	r8, r24
    970a:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    970c:	a0 16       	cp	r10, r16
    970e:	b1 06       	cpc	r11, r17
    9710:	e0 f0       	brcs	.+56     	; 0x974a <render_camera_view+0x8e>
    9712:	76 01       	movw	r14, r12
    9714:	70 2e       	mov	r7, r16
    9716:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    9718:	8e 14       	cp	r8, r14
    971a:	9f 04       	cpc	r9, r15
    971c:	98 f0       	brcs	.+38     	; 0x9744 <render_camera_view+0x88>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    971e:	a7 01       	movw	r20, r14
    9720:	b8 01       	movw	r22, r16
    9722:	80 91 a1 0f 	lds	r24, 0x0FA1
    9726:	90 91 a2 0f 	lds	r25, 0x0FA2
    972a:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    972e:	48 2f       	mov	r20, r24
    9730:	50 e0       	ldi	r21, 0x00	; 0
    9732:	6e 2d       	mov	r22, r14
    9734:	6c 19       	sub	r22, r12
    9736:	87 2d       	mov	r24, r7
    9738:	0e 94 19 38 	call	0x7032	; 0x7032 <SetTile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    973c:	8f ef       	ldi	r24, 0xFF	; 255
    973e:	e8 1a       	sub	r14, r24
    9740:	f8 0a       	sbc	r15, r24
    9742:	ea cf       	rjmp	.-44     	; 0x9718 <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    9744:	0f 5f       	subi	r16, 0xFF	; 255
    9746:	1f 4f       	sbci	r17, 0xFF	; 255
    9748:	e1 cf       	rjmp	.-62     	; 0x970c <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    974a:	df 91       	pop	r29
    974c:	cf 91       	pop	r28
    974e:	1f 91       	pop	r17
    9750:	0f 91       	pop	r16
    9752:	ff 90       	pop	r15
    9754:	ef 90       	pop	r14
    9756:	df 90       	pop	r13
    9758:	cf 90       	pop	r12
    975a:	bf 90       	pop	r11
    975c:	af 90       	pop	r10
    975e:	9f 90       	pop	r9
    9760:	8f 90       	pop	r8
    9762:	7f 90       	pop	r7
    9764:	08 95       	ret

00009766 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    9766:	ff 92       	push	r15
    9768:	0f 93       	push	r16
    976a:	1f 93       	push	r17
    976c:	cf 93       	push	r28
    976e:	df 93       	push	r29
    9770:	00 d0       	rcall	.+0      	; 0x9772 <spawn_enemy+0xc>
    9772:	cd b7       	in	r28, 0x3d	; 61
    9774:	de b7       	in	r29, 0x3e	; 62
    9776:	27 ea       	ldi	r18, 0xA7	; 167
    9778:	3d e0       	ldi	r19, 0x0D	; 13
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    977a:	f1 2c       	mov	r15, r1
    977c:	f9 01       	movw	r30, r18
    977e:	e8 54       	subi	r30, 0x48	; 72
    9780:	ff 4f       	sbci	r31, 0xFF	; 255
	{
		if (!game.enemies[i].active)
    9782:	40 81       	ld	r20, Z
    9784:	41 11       	cpse	r20, r1
    9786:	1c c0       	rjmp	.+56     	; 0x97c0 <spawn_enemy+0x5a>
    9788:	7a 96       	adiw	r30, 0x1a	; 26
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
    978a:	40 81       	ld	r20, Z
    978c:	41 11       	cpse	r20, r1
    978e:	18 c0       	rjmp	.+48     	; 0x97c0 <spawn_enemy+0x5a>
    9790:	ab 01       	movw	r20, r22
    9792:	8c 01       	movw	r16, r24
				{
					if (is_space())
    9794:	69 83       	std	Y+1, r22	; 0x01
    9796:	5a 83       	std	Y+2, r21	; 0x02
    9798:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    979c:	49 81       	ldd	r20, Y+1	; 0x01
    979e:	5a 81       	ldd	r21, Y+2	; 0x02
					{
						init_enemy_shark(i, x, y);
    97a0:	b8 01       	movw	r22, r16
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (!game.enemies[i].shot[j].active)
				{
					if (is_space())
    97a2:	88 23       	and	r24, r24
    97a4:	21 f0       	breq	.+8      	; 0x97ae <spawn_enemy+0x48>
					{
						init_enemy_shark(i, x, y);
    97a6:	8f 2d       	mov	r24, r15
    97a8:	0e 94 b4 4a 	call	0x9568	; 0x9568 <init_enemy_shark>
    97ac:	03 c0       	rjmp	.+6      	; 0x97b4 <spawn_enemy+0x4e>
					}
					else
					{
						init_enemy_spider(i, x, y);
    97ae:	8f 2d       	mov	r24, r15
    97b0:	0e 94 45 4a 	call	0x948a	; 0x948a <init_enemy_spider>
					}
					game.active_enemies++;
    97b4:	80 91 c1 0d 	lds	r24, 0x0DC1
    97b8:	8f 5f       	subi	r24, 0xFF	; 255
    97ba:	80 93 c1 0d 	sts	0x0DC1, r24
    97be:	06 c0       	rjmp	.+12     	; 0x97cc <spawn_enemy+0x66>
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    97c0:	f3 94       	inc	r15
    97c2:	2e 5b       	subi	r18, 0xBE	; 190
    97c4:	3f 4f       	sbci	r19, 0xFF	; 255
    97c6:	45 e0       	ldi	r20, 0x05	; 5
    97c8:	f4 12       	cpse	r15, r20
    97ca:	d8 cf       	rjmp	.-80     	; 0x977c <spawn_enemy+0x16>
					return;
				}
			}
		}
	}
}
    97cc:	0f 90       	pop	r0
    97ce:	0f 90       	pop	r0
    97d0:	df 91       	pop	r29
    97d2:	cf 91       	pop	r28
    97d4:	1f 91       	pop	r17
    97d6:	0f 91       	pop	r16
    97d8:	ff 90       	pop	r15
    97da:	08 95       	ret

000097dc <solid_tile>:

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    97dc:	81 50       	subi	r24, 0x01	; 1
    97de:	84 30       	cpi	r24, 0x04	; 4
    97e0:	10 f0       	brcs	.+4      	; 0x97e6 <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    97e2:	80 e0       	ldi	r24, 0x00	; 0
    97e4:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    97e6:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    97e8:	08 95       	ret

000097ea <append_tile_column>:

void append_tile_column()
{
    97ea:	ef 92       	push	r14
    97ec:	ff 92       	push	r15
    97ee:	0f 93       	push	r16
    97f0:	1f 93       	push	r17
    97f2:	cf 93       	push	r28
    97f4:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    97f6:	80 91 b3 0d 	lds	r24, 0x0DB3
    97fa:	90 91 b4 0d 	lds	r25, 0x0DB4
    97fe:	01 96       	adiw	r24, 0x01	; 1
    9800:	90 93 b4 0d 	sts	0x0DB4, r25
    9804:	80 93 b3 0d 	sts	0x0DB3, r24
    9808:	c0 e0       	ldi	r28, 0x00	; 0
    980a:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    980c:	f1 2c       	mov	r15, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    980e:	0e e1       	ldi	r16, 0x1E	; 30
    9810:	10 e0       	ldi	r17, 0x00	; 0
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    9812:	40 91 ad 0d 	lds	r20, 0x0DAD
    9816:	50 91 ae 0d 	lds	r21, 0x0DAE
    981a:	33 e0       	ldi	r19, 0x03	; 3
    981c:	56 95       	lsr	r21
    981e:	47 95       	ror	r20
    9820:	3a 95       	dec	r19
    9822:	e1 f7       	brne	.-8      	; 0x981c <append_tile_column+0x32>
    9824:	4c 0f       	add	r20, r28
    9826:	5d 1f       	adc	r21, r29
    9828:	60 91 a7 0d 	lds	r22, 0x0DA7
    982c:	70 91 a8 0d 	lds	r23, 0x0DA8
    9830:	80 91 a1 0f 	lds	r24, 0x0FA1
    9834:	90 91 a2 0f 	lds	r25, 0x0FA2
    9838:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    983c:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    983e:	28 2f       	mov	r18, r24
    9840:	30 e0       	ldi	r19, 0x00	; 0

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    9842:	90 91 b3 0c 	lds	r25, 0x0CB3
    9846:	96 95       	lsr	r25
    9848:	96 95       	lsr	r25
    984a:	96 95       	lsr	r25
    984c:	ae 01       	movw	r20, r28
    984e:	49 0f       	add	r20, r25
    9850:	51 1d       	adc	r21, r1
    9852:	ca 01       	movw	r24, r20
    9854:	b8 01       	movw	r22, r16
    9856:	0e 94 c5 60 	call	0xc18a	; 0xc18a <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    985a:	a9 01       	movw	r20, r18
    985c:	68 2f       	mov	r22, r24
    985e:	80 91 bf 0d 	lds	r24, 0x0DBF
    9862:	0e 94 19 38 	call	0x7032	; 0x7032 <SetTile>
	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned)
    9866:	20 91 c2 0d 	lds	r18, 0x0DC2
    986a:	30 e0       	ldi	r19, 0x00	; 0
    986c:	80 91 b3 0d 	lds	r24, 0x0DB3
    9870:	90 91 b4 0d 	lds	r25, 0x0DB4
    9874:	b9 01       	movw	r22, r18
    9876:	0e 94 b1 60 	call	0xc162	; 0xc162 <__udivmodhi4>
    987a:	21 50       	subi	r18, 0x01	; 1
    987c:	31 09       	sbc	r19, r1
    987e:	82 17       	cp	r24, r18
    9880:	93 07       	cpc	r25, r19
    9882:	a9 f5       	brne	.+106    	; 0x98ee <append_tile_column+0x104>
    9884:	80 91 c1 0d 	lds	r24, 0x0DC1
    9888:	85 30       	cpi	r24, 0x05	; 5
    988a:	88 f5       	brcc	.+98     	; 0x98ee <append_tile_column+0x104>
    988c:	f1 10       	cpse	r15, r1
    988e:	2d c0       	rjmp	.+90     	; 0x98ea <append_tile_column+0x100>
		{
			if (is_space())
    9890:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    9894:	88 23       	and	r24, r24
    9896:	41 f0       	breq	.+16     	; 0x98a8 <append_tile_column+0xbe>
			{
				spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, LBRandom(0, CAMERA_HEIGHT-1)*8);
    9898:	69 e1       	ldi	r22, 0x19	; 25
    989a:	70 e0       	ldi	r23, 0x00	; 0
    989c:	80 e0       	ldi	r24, 0x00	; 0
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <LBRandom>
    98a4:	bc 01       	movw	r22, r24
    98a6:	14 c0       	rjmp	.+40     	; 0x98d0 <append_tile_column+0xe6>
				enemy_spawned = 1;
			}
			else if (solid_tile(level_tile))
    98a8:	8e 2d       	mov	r24, r14
    98aa:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    98ae:	88 23       	and	r24, r24
    98b0:	f1 f0       	breq	.+60     	; 0x98ee <append_tile_column+0x104>
			{
				spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
    98b2:	60 91 ad 0d 	lds	r22, 0x0DAD
    98b6:	70 91 ae 0d 	lds	r23, 0x0DAE
    98ba:	cb 01       	movw	r24, r22
    98bc:	23 e0       	ldi	r18, 0x03	; 3
    98be:	96 95       	lsr	r25
    98c0:	87 95       	ror	r24
    98c2:	2a 95       	dec	r18
    98c4:	e1 f7       	brne	.-8      	; 0x98be <append_tile_column+0xd4>
    98c6:	bc 01       	movw	r22, r24
    98c8:	61 50       	subi	r22, 0x01	; 1
    98ca:	70 4e       	sbci	r23, 0xE0	; 224
    98cc:	6c 0f       	add	r22, r28
    98ce:	7d 1f       	adc	r23, r29
    98d0:	83 e0       	ldi	r24, 0x03	; 3
    98d2:	66 0f       	add	r22, r22
    98d4:	77 1f       	adc	r23, r23
    98d6:	8a 95       	dec	r24
    98d8:	e1 f7       	brne	.-8      	; 0x98d2 <append_tile_column+0xe8>
    98da:	80 91 ab 0d 	lds	r24, 0x0DAB
    98de:	90 91 ac 0d 	lds	r25, 0x0DAC
    98e2:	88 51       	subi	r24, 0x18	; 24
    98e4:	9f 4f       	sbci	r25, 0xFF	; 255
    98e6:	0e 94 b3 4b 	call	0x9766	; 0x9766 <spawn_enemy>
    98ea:	ff 24       	eor	r15, r15
    98ec:	f3 94       	inc	r15
    98ee:	21 96       	adiw	r28, 0x01	; 1
{
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    98f0:	cb 31       	cpi	r28, 0x1B	; 27
    98f2:	d1 05       	cpc	r29, r1
    98f4:	09 f0       	breq	.+2      	; 0x98f8 <append_tile_column+0x10e>
    98f6:	8d cf       	rjmp	.-230    	; 0x9812 <append_tile_column+0x28>
				enemy_spawned = 1;
			}
		}
    }
	
    game.scroll_src_x++;
    98f8:	c0 91 a7 0d 	lds	r28, 0x0DA7
    98fc:	d0 91 a8 0d 	lds	r29, 0x0DA8
    9900:	21 96       	adiw	r28, 0x01	; 1
    9902:	d0 93 a8 0d 	sts	0x0DA8, r29
    9906:	c0 93 a7 0d 	sts	0x0DA7, r28
	game.scroll_dest_x++;
    990a:	80 91 bf 0d 	lds	r24, 0x0DBF
    990e:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    9910:	80 32       	cpi	r24, 0x20	; 32
    9912:	18 f4       	brcc	.+6      	; 0x991a <append_tile_column+0x130>
			}
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    9914:	80 93 bf 0d 	sts	0x0DBF, r24
    9918:	02 c0       	rjmp	.+4      	; 0x991e <append_tile_column+0x134>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    991a:	10 92 bf 0d 	sts	0x0DBF, r1
	if(is_space() && game.scroll_src_x>=32)game.scroll_src_x=0;
    991e:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    9922:	88 23       	and	r24, r24
    9924:	31 f0       	breq	.+12     	; 0x9932 <append_tile_column+0x148>
    9926:	a0 97       	sbiw	r28, 0x20	; 32
    9928:	20 f0       	brcs	.+8      	; 0x9932 <append_tile_column+0x148>
    992a:	10 92 a8 0d 	sts	0x0DA8, r1
    992e:	10 92 a7 0d 	sts	0x0DA7, r1
}
    9932:	df 91       	pop	r29
    9934:	cf 91       	pop	r28
    9936:	1f 91       	pop	r17
    9938:	0f 91       	pop	r16
    993a:	ff 90       	pop	r15
    993c:	ef 90       	pop	r14
    993e:	08 95       	ret

00009940 <append_tile_row>:

void append_tile_row()
{
    9940:	cf 93       	push	r28
    9942:	df 93       	push	r29
    9944:	c0 e0       	ldi	r28, 0x00	; 0
    9946:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    9948:	40 91 a9 0d 	lds	r20, 0x0DA9
    994c:	50 91 aa 0d 	lds	r21, 0x0DAA
    9950:	60 91 ab 0d 	lds	r22, 0x0DAB
    9954:	70 91 ac 0d 	lds	r23, 0x0DAC
    9958:	83 e0       	ldi	r24, 0x03	; 3
    995a:	76 95       	lsr	r23
    995c:	67 95       	ror	r22
    995e:	8a 95       	dec	r24
    9960:	e1 f7       	brne	.-8      	; 0x995a <append_tile_row+0x1a>
    9962:	6c 0f       	add	r22, r28
    9964:	7d 1f       	adc	r23, r29
    9966:	80 91 a1 0f 	lds	r24, 0x0FA1
    996a:	90 91 a2 0f 	lds	r25, 0x0FA2
    996e:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9972:	48 2f       	mov	r20, r24
    9974:	50 e0       	ldi	r21, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    9976:	80 91 b2 0c 	lds	r24, 0x0CB2
    997a:	86 95       	lsr	r24
    997c:	86 95       	lsr	r24
    997e:	86 95       	lsr	r24
    9980:	8c 0f       	add	r24, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    9982:	60 91 c0 0d 	lds	r22, 0x0DC0
    9986:	8f 71       	andi	r24, 0x1F	; 31
    9988:	0e 94 19 38 	call	0x7032	; 0x7032 <SetTile>
    998c:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    998e:	cd 31       	cpi	r28, 0x1D	; 29
    9990:	d1 05       	cpc	r29, r1
    9992:	d1 f6       	brne	.-76     	; 0x9948 <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    9994:	80 91 a9 0d 	lds	r24, 0x0DA9
    9998:	90 91 aa 0d 	lds	r25, 0x0DAA
    999c:	01 96       	adiw	r24, 0x01	; 1
    999e:	90 93 aa 0d 	sts	0x0DAA, r25
    99a2:	80 93 a9 0d 	sts	0x0DA9, r24
	game.scroll_dest_y++;
    99a6:	80 91 c0 0d 	lds	r24, 0x0DC0
    99aa:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    99ac:	8e 31       	cpi	r24, 0x1E	; 30
    99ae:	18 f4       	brcc	.+6      	; 0x99b6 <append_tile_row+0x76>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    99b0:	80 93 c0 0d 	sts	0x0DC0, r24
    99b4:	02 c0       	rjmp	.+4      	; 0x99ba <append_tile_row+0x7a>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    99b6:	10 92 c0 0d 	sts	0x0DC0, r1
}
    99ba:	df 91       	pop	r29
    99bc:	cf 91       	pop	r28
    99be:	08 95       	ret

000099c0 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    99c0:	80 91 ab 0d 	lds	r24, 0x0DAB
    99c4:	90 91 ac 0d 	lds	r25, 0x0DAC
    99c8:	01 96       	adiw	r24, 0x01	; 1
    99ca:	90 93 ac 0d 	sts	0x0DAC, r25
    99ce:	80 93 ab 0d 	sts	0x0DAB, r24
	Scroll(1,0);
    99d2:	60 e0       	ldi	r22, 0x00	; 0
    99d4:	81 e0       	ldi	r24, 0x01	; 1
    99d6:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <Scroll>
	if (++game.scroll_x == 8)
    99da:	80 91 bd 0d 	lds	r24, 0x0DBD
    99de:	8f 5f       	subi	r24, 0xFF	; 255
    99e0:	88 30       	cpi	r24, 0x08	; 8
    99e2:	19 f0       	breq	.+6      	; 0x99ea <move_camera_x+0x2a>
    99e4:	80 93 bd 0d 	sts	0x0DBD, r24
    99e8:	08 95       	ret
	{
		game.scroll_x = 0;
    99ea:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    99ee:	0c 94 f5 4b 	jmp	0x97ea	; 0x97ea <append_tile_column>

000099f2 <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    99f2:	80 91 ad 0d 	lds	r24, 0x0DAD
    99f6:	90 91 ae 0d 	lds	r25, 0x0DAE
    99fa:	02 96       	adiw	r24, 0x02	; 2
    99fc:	90 93 ae 0d 	sts	0x0DAE, r25
    9a00:	80 93 ad 0d 	sts	0x0DAD, r24
	game.scroll_y+=2;
    9a04:	80 91 be 0d 	lds	r24, 0x0DBE
    9a08:	8e 5f       	subi	r24, 0xFE	; 254
    9a0a:	80 93 be 0d 	sts	0x0DBE, r24
	Scroll(0,2);
    9a0e:	62 e0       	ldi	r22, 0x02	; 2
    9a10:	80 e0       	ldi	r24, 0x00	; 0
    9a12:	0e 94 a8 45 	call	0x8b50	; 0x8b50 <Scroll>
	if (game.scroll_y == 8)
    9a16:	80 91 be 0d 	lds	r24, 0x0DBE
    9a1a:	88 30       	cpi	r24, 0x08	; 8
    9a1c:	21 f4       	brne	.+8      	; 0x9a26 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    9a1e:	10 92 be 0d 	sts	0x0DBE, r1
		append_tile_row();
    9a22:	0c 94 a0 4c 	jmp	0x9940	; 0x9940 <append_tile_row>
    9a26:	08 95       	ret

00009a28 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    9a28:	82 e0       	ldi	r24, 0x02	; 2
    9a2a:	80 93 31 0e 	sts	0x0E31, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    9a2e:	85 e0       	ldi	r24, 0x05	; 5
    9a30:	80 93 32 0e 	sts	0x0E32, r24
	game.player.run.anims = run_anim;
    9a34:	eb ef       	ldi	r30, 0xFB	; 251
    9a36:	ff e0       	ldi	r31, 0x0F	; 15
    9a38:	f0 93 37 0e 	sts	0x0E37, r31
    9a3c:	e0 93 36 0e 	sts	0x0E36, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    9a40:	87 e5       	ldi	r24, 0x57	; 87
    9a42:	9d e2       	ldi	r25, 0x2D	; 45
    9a44:	91 83       	std	Z+1, r25	; 0x01
    9a46:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    9a48:	8d e4       	ldi	r24, 0x4D	; 77
    9a4a:	9d e2       	ldi	r25, 0x2D	; 45
    9a4c:	93 83       	std	Z+3, r25	; 0x03
    9a4e:	82 83       	std	Z+2, r24	; 0x02
    9a50:	08 95       	ret

00009a52 <map_level_info>:
}

void map_level_info(char* level)
{
    9a52:	cf 93       	push	r28
    9a54:	df 93       	push	r29
    9a56:	ec 01       	movw	r28, r24
	game.current_level = level;
    9a58:	90 93 a2 0f 	sts	0x0FA2, r25
    9a5c:	80 93 a1 0f 	sts	0x0FA1, r24
	if (!is_space())
    9a60:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    9a64:	81 11       	cpse	r24, r1
    9a66:	0d c0       	rjmp	.+26     	; 0x9a82 <map_level_info+0x30>
	{
		game.level_width = read_level_byte(level, 0);
    9a68:	60 e0       	ldi	r22, 0x00	; 0
    9a6a:	70 e0       	ldi	r23, 0x00	; 0
    9a6c:	ce 01       	movw	r24, r28
    9a6e:	0e 94 31 4b 	call	0x9662	; 0x9662 <read_level_byte>
    9a72:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = read_level_byte(level, 1);
    9a76:	61 e0       	ldi	r22, 0x01	; 1
    9a78:	70 e0       	ldi	r23, 0x00	; 0
    9a7a:	ce 01       	movw	r24, r28
    9a7c:	0e 94 31 4b 	call	0x9662	; 0x9662 <read_level_byte>
    9a80:	04 c0       	rjmp	.+8      	; 0x9a8a <map_level_info+0x38>
		
	}
	else
	{
		game.level_width = 255;
    9a82:	8f ef       	ldi	r24, 0xFF	; 255
    9a84:	80 93 b8 0d 	sts	0x0DB8, r24
		game.level_height = 26;
    9a88:	8a e1       	ldi	r24, 0x1A	; 26
    9a8a:	80 93 b9 0d 	sts	0x0DB9, r24
	}
}
    9a8e:	df 91       	pop	r29
    9a90:	cf 91       	pop	r28
    9a92:	08 95       	ret

00009a94 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9a94:	2f 92       	push	r2
    9a96:	3f 92       	push	r3
    9a98:	4f 92       	push	r4
    9a9a:	5f 92       	push	r5
    9a9c:	6f 92       	push	r6
    9a9e:	7f 92       	push	r7
    9aa0:	8f 92       	push	r8
    9aa2:	9f 92       	push	r9
    9aa4:	af 92       	push	r10
    9aa6:	bf 92       	push	r11
    9aa8:	cf 92       	push	r12
    9aaa:	df 92       	push	r13
    9aac:	ef 92       	push	r14
    9aae:	ff 92       	push	r15
    9ab0:	0f 93       	push	r16
    9ab2:	1f 93       	push	r17
    9ab4:	cf 93       	push	r28
    9ab6:	df 93       	push	r29
    9ab8:	00 d0       	rcall	.+0      	; 0x9aba <on_solid_ground+0x26>
    9aba:	00 d0       	rcall	.+0      	; 0x9abc <on_solid_ground+0x28>
    9abc:	00 d0       	rcall	.+0      	; 0x9abe <on_solid_ground+0x2a>
    9abe:	cd b7       	in	r28, 0x3d	; 61
    9ac0:	de b7       	in	r29, 0x3e	; 62
    9ac2:	9e 83       	std	Y+6, r25	; 0x06
    9ac4:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9ac6:	88 e0       	ldi	r24, 0x08	; 8
    9ac8:	48 9f       	mul	r20, r24
    9aca:	a0 01       	movw	r20, r0
    9acc:	11 24       	eor	r1, r1
    9ace:	26 2e       	mov	r2, r22
    9ad0:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9ad2:	00 e0       	ldi	r16, 0x00	; 0
    9ad4:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9ad6:	ca 01       	movw	r24, r20
    9ad8:	aa 27       	eor	r26, r26
    9ada:	97 fd       	sbrc	r25, 7
    9adc:	a0 95       	com	r26
    9ade:	ba 2f       	mov	r27, r26
    9ae0:	89 83       	std	Y+1, r24	; 0x01
    9ae2:	9a 83       	std	Y+2, r25	; 0x02
    9ae4:	ab 83       	std	Y+3, r26	; 0x03
    9ae6:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    9ae8:	02 15       	cp	r16, r2
    9aea:	13 05       	cpc	r17, r3
    9aec:	09 f4       	brne	.+2      	; 0x9af0 <on_solid_ground+0x5c>
    9aee:	85 c0       	rjmp	.+266    	; 0x9bfa <on_solid_ground+0x166>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    9af0:	69 81       	ldd	r22, Y+1	; 0x01
    9af2:	7a 81       	ldd	r23, Y+2	; 0x02
    9af4:	8b 81       	ldd	r24, Y+3	; 0x03
    9af6:	9c 81       	ldd	r25, Y+4	; 0x04
    9af8:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    9afc:	4b 01       	movw	r8, r22
    9afe:	5c 01       	movw	r10, r24
    9b00:	b8 01       	movw	r22, r16
    9b02:	88 27       	eor	r24, r24
    9b04:	77 fd       	sbrc	r23, 7
    9b06:	80 95       	com	r24
    9b08:	98 2f       	mov	r25, r24
    9b0a:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    9b0e:	6b 01       	movw	r12, r22
    9b10:	7c 01       	movw	r14, r24
    9b12:	ad 81       	ldd	r26, Y+5	; 0x05
    9b14:	be 81       	ldd	r27, Y+6	; 0x06
    9b16:	18 96       	adiw	r26, 0x08	; 8
    9b18:	2d 91       	ld	r18, X+
    9b1a:	3d 91       	ld	r19, X+
    9b1c:	4d 91       	ld	r20, X+
    9b1e:	5c 91       	ld	r21, X
    9b20:	1b 97       	sbiw	r26, 0x0b	; 11
    9b22:	c5 01       	movw	r24, r10
    9b24:	b4 01       	movw	r22, r8
    9b26:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9b2a:	20 e0       	ldi	r18, 0x00	; 0
    9b2c:	30 e0       	ldi	r19, 0x00	; 0
    9b2e:	40 e0       	ldi	r20, 0x00	; 0
    9b30:	5e e3       	ldi	r21, 0x3E	; 62
    9b32:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9b36:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9b3a:	2b 01       	movw	r4, r22
    9b3c:	3c 01       	movw	r6, r24
    9b3e:	20 e0       	ldi	r18, 0x00	; 0
    9b40:	30 e0       	ldi	r19, 0x00	; 0
    9b42:	40 e0       	ldi	r20, 0x00	; 0
    9b44:	5e e3       	ldi	r21, 0x3E	; 62
    9b46:	ed 81       	ldd	r30, Y+5	; 0x05
    9b48:	fe 81       	ldd	r31, Y+6	; 0x06
    9b4a:	64 81       	ldd	r22, Z+4	; 0x04
    9b4c:	75 81       	ldd	r23, Z+5	; 0x05
    9b4e:	86 81       	ldd	r24, Z+6	; 0x06
    9b50:	97 81       	ldd	r25, Z+7	; 0x07
    9b52:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9b56:	a7 01       	movw	r20, r14
    9b58:	96 01       	movw	r18, r12
    9b5a:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9b5e:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9b62:	a2 01       	movw	r20, r4
    9b64:	80 91 a1 0f 	lds	r24, 0x0FA1
    9b68:	90 91 a2 0f 	lds	r25, 0x0FA2
    9b6c:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    9b70:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    9b72:	ad 81       	ldd	r26, Y+5	; 0x05
    9b74:	be 81       	ldd	r27, Y+6	; 0x06
    9b76:	18 96       	adiw	r26, 0x08	; 8
    9b78:	2d 91       	ld	r18, X+
    9b7a:	3d 91       	ld	r19, X+
    9b7c:	4d 91       	ld	r20, X+
    9b7e:	5c 91       	ld	r21, X
    9b80:	1b 97       	sbiw	r26, 0x0b	; 11
    9b82:	c5 01       	movw	r24, r10
    9b84:	b4 01       	movw	r22, r8
    9b86:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9b8a:	20 e0       	ldi	r18, 0x00	; 0
    9b8c:	30 e0       	ldi	r19, 0x00	; 0
    9b8e:	40 e0       	ldi	r20, 0x00	; 0
    9b90:	5e e3       	ldi	r21, 0x3E	; 62
    9b92:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9b96:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9b9a:	4b 01       	movw	r8, r22
    9b9c:	5c 01       	movw	r10, r24
    9b9e:	20 e0       	ldi	r18, 0x00	; 0
    9ba0:	30 e0       	ldi	r19, 0x00	; 0
    9ba2:	40 ee       	ldi	r20, 0xE0	; 224
    9ba4:	50 e4       	ldi	r21, 0x40	; 64
    9ba6:	ed 81       	ldd	r30, Y+5	; 0x05
    9ba8:	fe 81       	ldd	r31, Y+6	; 0x06
    9baa:	64 81       	ldd	r22, Z+4	; 0x04
    9bac:	75 81       	ldd	r23, Z+5	; 0x05
    9bae:	86 81       	ldd	r24, Z+6	; 0x06
    9bb0:	97 81       	ldd	r25, Z+7	; 0x07
    9bb2:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9bb6:	20 e0       	ldi	r18, 0x00	; 0
    9bb8:	30 e0       	ldi	r19, 0x00	; 0
    9bba:	40 e0       	ldi	r20, 0x00	; 0
    9bbc:	5e e3       	ldi	r21, 0x3E	; 62
    9bbe:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9bc2:	a7 01       	movw	r20, r14
    9bc4:	96 01       	movw	r18, r12
    9bc6:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9bca:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9bce:	a4 01       	movw	r20, r8
    9bd0:	80 91 a1 0f 	lds	r24, 0x0FA1
    9bd4:	90 91 a2 0f 	lds	r25, 0x0FA2
    9bd8:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    9bdc:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    9bde:	87 2d       	mov	r24, r7
    9be0:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    9be4:	81 11       	cpse	r24, r1
    9be6:	0b c0       	rjmp	.+22     	; 0x9bfe <on_solid_ground+0x16a>
    9be8:	8f 2d       	mov	r24, r15
    9bea:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    9bee:	0f 5f       	subi	r16, 0xFF	; 255
    9bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    9bf2:	88 23       	and	r24, r24
    9bf4:	09 f4       	brne	.+2      	; 0x9bf8 <on_solid_ground+0x164>
    9bf6:	78 cf       	rjmp	.-272    	; 0x9ae8 <on_solid_ground+0x54>
    9bf8:	02 c0       	rjmp	.+4      	; 0x9bfe <on_solid_ground+0x16a>
		{
			return 1;
		}
	}
	return 0;
    9bfa:	80 e0       	ldi	r24, 0x00	; 0
    9bfc:	01 c0       	rjmp	.+2      	; 0x9c00 <on_solid_ground+0x16c>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    9bfe:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    9c00:	26 96       	adiw	r28, 0x06	; 6
    9c02:	0f b6       	in	r0, 0x3f	; 63
    9c04:	f8 94       	cli
    9c06:	de bf       	out	0x3e, r29	; 62
    9c08:	0f be       	out	0x3f, r0	; 63
    9c0a:	cd bf       	out	0x3d, r28	; 61
    9c0c:	df 91       	pop	r29
    9c0e:	cf 91       	pop	r28
    9c10:	1f 91       	pop	r17
    9c12:	0f 91       	pop	r16
    9c14:	ff 90       	pop	r15
    9c16:	ef 90       	pop	r14
    9c18:	df 90       	pop	r13
    9c1a:	cf 90       	pop	r12
    9c1c:	bf 90       	pop	r11
    9c1e:	af 90       	pop	r10
    9c20:	9f 90       	pop	r9
    9c22:	8f 90       	pop	r8
    9c24:	7f 90       	pop	r7
    9c26:	6f 90       	pop	r6
    9c28:	5f 90       	pop	r5
    9c2a:	4f 90       	pop	r4
    9c2c:	3f 90       	pop	r3
    9c2e:	2f 90       	pop	r2
    9c30:	08 95       	ret

00009c32 <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    9c32:	80 91 eb 0d 	lds	r24, 0x0DEB
    9c36:	88 23       	and	r24, r24
    9c38:	61 f0       	breq	.+24     	; 0x9c52 <find_shot_slot+0x20>
    9c3a:	80 91 05 0e 	lds	r24, 0x0E05
    9c3e:	88 23       	and	r24, r24
    9c40:	31 f0       	breq	.+12     	; 0x9c4e <find_shot_slot+0x1c>
    9c42:	80 91 1f 0e 	lds	r24, 0x0E1F
    9c46:	81 11       	cpse	r24, r1
    9c48:	04 c0       	rjmp	.+8      	; 0x9c52 <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    9c4a:	82 e0       	ldi	r24, 0x02	; 2
    9c4c:	08 95       	ret
    9c4e:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    9c50:	08 95       	ret
	}
	return 0;
    9c52:	80 e0       	ldi	r24, 0x00	; 0
}
    9c54:	08 95       	ret

00009c56 <update_shot>:

void update_shot()
{
    9c56:	8f 92       	push	r8
    9c58:	9f 92       	push	r9
    9c5a:	af 92       	push	r10
    9c5c:	bf 92       	push	r11
    9c5e:	df 92       	push	r13
    9c60:	ef 92       	push	r14
    9c62:	ff 92       	push	r15
    9c64:	0f 93       	push	r16
    9c66:	1f 93       	push	r17
    9c68:	cf 93       	push	r28
    9c6a:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    9c6c:	80 91 9a 0f 	lds	r24, 0x0F9A
    9c70:	90 91 9b 0f 	lds	r25, 0x0F9B
    9c74:	90 ff       	sbrs	r25, 0
    9c76:	de c0       	rjmp	.+444    	; 0x9e34 <update_shot+0x1de>
    9c78:	80 91 d3 0d 	lds	r24, 0x0DD3
    9c7c:	83 30       	cpi	r24, 0x03	; 3
    9c7e:	08 f0       	brcs	.+2      	; 0x9c82 <update_shot+0x2c>
    9c80:	d9 c0       	rjmp	.+434    	; 0x9e34 <update_shot+0x1de>
	{
		SFX_PLAYER_SHOOT;
    9c82:	2f ef       	ldi	r18, 0xFF	; 255
    9c84:	43 e2       	ldi	r20, 0x23	; 35
    9c86:	63 e0       	ldi	r22, 0x03	; 3
    9c88:	82 e0       	ldi	r24, 0x02	; 2
    9c8a:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <TriggerNote>
		idx = find_shot_slot();
    9c8e:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <find_shot_slot>
    9c92:	f8 2e       	mov	r15, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    9c94:	08 2f       	mov	r16, r24
    9c96:	10 e0       	ldi	r17, 0x00	; 0
    9c98:	9a e1       	ldi	r25, 0x1A	; 26
    9c9a:	d9 2e       	mov	r13, r25
    9c9c:	d0 9e       	mul	r13, r16
    9c9e:	e0 01       	movw	r28, r0
    9ca0:	d1 9e       	mul	r13, r17
    9ca2:	d0 0d       	add	r29, r0
    9ca4:	11 24       	eor	r1, r1
    9ca6:	ce 01       	movw	r24, r28
    9ca8:	84 51       	subi	r24, 0x14	; 20
    9caa:	92 4f       	sbci	r25, 0xF2	; 242
    9cac:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    9cb0:	40 e0       	ldi	r20, 0x00	; 0
    9cb2:	bc 01       	movw	r22, r24
    9cb4:	8b e0       	ldi	r24, 0x0B	; 11
    9cb6:	8f 0d       	add	r24, r15
    9cb8:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
		game.player.shot[idx].active = 1;
    9cbc:	c9 55       	subi	r28, 0x59	; 89
    9cbe:	d2 4f       	sbci	r29, 0xF2	; 242
    9cc0:	fe 01       	movw	r30, r28
    9cc2:	ec 5b       	subi	r30, 0xBC	; 188
    9cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    9cc6:	81 e0       	ldi	r24, 0x01	; 1
    9cc8:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    9cca:	60 91 cc 0d 	lds	r22, 0x0DCC
    9cce:	70 91 cd 0d 	lds	r23, 0x0DCD
    9cd2:	80 91 ce 0d 	lds	r24, 0x0DCE
    9cd6:	90 91 cf 0d 	lds	r25, 0x0DCF
    9cda:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9cde:	23 e0       	ldi	r18, 0x03	; 3
    9ce0:	76 95       	lsr	r23
    9ce2:	67 95       	ror	r22
    9ce4:	2a 95       	dec	r18
    9ce6:	e1 f7       	brne	.-8      	; 0x9ce0 <update_shot+0x8a>
    9ce8:	33 e0       	ldi	r19, 0x03	; 3
    9cea:	66 0f       	add	r22, r22
    9cec:	77 1f       	adc	r23, r23
    9cee:	3a 95       	dec	r19
    9cf0:	e1 f7       	brne	.-8      	; 0x9cea <update_shot+0x94>
    9cf2:	80 e0       	ldi	r24, 0x00	; 0
    9cf4:	90 e0       	ldi	r25, 0x00	; 0
    9cf6:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    9cfa:	4b 01       	movw	r8, r22
    9cfc:	5c 01       	movw	r10, r24
    9cfe:	6b af       	std	Y+59, r22	; 0x3b
    9d00:	7c af       	std	Y+60, r23	; 0x3c
    9d02:	8d af       	std	Y+61, r24	; 0x3d
    9d04:	9e af       	std	Y+62, r25	; 0x3e
		if (is_space())
    9d06:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    9d0a:	98 01       	movw	r18, r16
    9d0c:	2f 5f       	subi	r18, 0xFF	; 255
    9d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    9d10:	79 01       	movw	r14, r18
    9d12:	88 23       	and	r24, r24
    9d14:	51 f1       	breq	.+84     	; 0x9d6a <update_shot+0x114>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+game.player.width*8;
    9d16:	60 91 d7 0d 	lds	r22, 0x0DD7
    9d1a:	d2 9e       	mul	r13, r18
    9d1c:	80 01       	movw	r16, r0
    9d1e:	d3 9e       	mul	r13, r19
    9d20:	10 0d       	add	r17, r0
    9d22:	11 24       	eor	r1, r1
    9d24:	09 55       	subi	r16, 0x59	; 89
    9d26:	12 4f       	sbci	r17, 0xF2	; 242
    9d28:	38 e0       	ldi	r19, 0x08	; 8
    9d2a:	63 9f       	mul	r22, r19
    9d2c:	b0 01       	movw	r22, r0
    9d2e:	11 24       	eor	r1, r1
    9d30:	88 27       	eor	r24, r24
    9d32:	77 fd       	sbrc	r23, 7
    9d34:	80 95       	com	r24
    9d36:	98 2f       	mov	r25, r24
    9d38:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    9d3c:	9b 01       	movw	r18, r22
    9d3e:	ac 01       	movw	r20, r24
    9d40:	60 91 c8 0d 	lds	r22, 0x0DC8
    9d44:	70 91 c9 0d 	lds	r23, 0x0DC9
    9d48:	80 91 ca 0d 	lds	r24, 0x0DCA
    9d4c:	90 91 cb 0d 	lds	r25, 0x0DCB
    9d50:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9d54:	f8 01       	movw	r30, r16
    9d56:	65 8f       	std	Z+29, r22	; 0x1d
    9d58:	76 8f       	std	Z+30, r23	; 0x1e
    9d5a:	87 8f       	std	Z+31, r24	; 0x1f
    9d5c:	90 a3       	std	Z+32, r25	; 0x20
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    9d5e:	ef 96       	adiw	r28, 0x3f	; 63
    9d60:	80 e9       	ldi	r24, 0x90	; 144
    9d62:	91 e0       	ldi	r25, 0x01	; 1
    9d64:	99 83       	std	Y+1, r25	; 0x01
    9d66:	88 83       	st	Y, r24
    9d68:	60 c0       	rjmp	.+192    	; 0x9e2a <update_shot+0x1d4>
		}
		else
		{
			if (!(game.player.flags & PRONE))
    9d6a:	80 91 d4 0d 	lds	r24, 0x0DD4
    9d6e:	82 fd       	sbrc	r24, 2
    9d70:	0c c0       	rjmp	.+24     	; 0x9d8a <update_shot+0x134>
			{
				game.player.shot[idx].shared.y += 8;
    9d72:	20 e0       	ldi	r18, 0x00	; 0
    9d74:	30 e0       	ldi	r19, 0x00	; 0
    9d76:	40 e0       	ldi	r20, 0x00	; 0
    9d78:	51 e4       	ldi	r21, 0x41	; 65
    9d7a:	c5 01       	movw	r24, r10
    9d7c:	b4 01       	movw	r22, r8
    9d7e:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9d82:	6b af       	std	Y+59, r22	; 0x3b
    9d84:	7c af       	std	Y+60, r23	; 0x3c
    9d86:	8d af       	std	Y+61, r24	; 0x3d
    9d88:	9e af       	std	Y+62, r25	; 0x3e
			}
			if (game.player.direction == D_RIGHT)
    9d8a:	80 91 d6 0d 	lds	r24, 0x0DD6
    9d8e:	81 30       	cpi	r24, 0x01	; 1
    9d90:	39 f5       	brne	.+78     	; 0x9de0 <update_shot+0x18a>
			{
				game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    9d92:	8a e1       	ldi	r24, 0x1A	; 26
    9d94:	d8 2e       	mov	r13, r24
    9d96:	de 9c       	mul	r13, r14
    9d98:	e0 01       	movw	r28, r0
    9d9a:	df 9c       	mul	r13, r15
    9d9c:	d0 0d       	add	r29, r0
    9d9e:	11 24       	eor	r1, r1
    9da0:	c9 55       	subi	r28, 0x59	; 89
    9da2:	d2 4f       	sbci	r29, 0xF2	; 242
    9da4:	20 e0       	ldi	r18, 0x00	; 0
    9da6:	30 e0       	ldi	r19, 0x00	; 0
    9da8:	40 e8       	ldi	r20, 0x80	; 128
    9daa:	51 e4       	ldi	r21, 0x41	; 65
    9dac:	60 91 c8 0d 	lds	r22, 0x0DC8
    9db0:	70 91 c9 0d 	lds	r23, 0x0DC9
    9db4:	80 91 ca 0d 	lds	r24, 0x0DCA
    9db8:	90 91 cb 0d 	lds	r25, 0x0DCB
    9dbc:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9dc0:	6d 8f       	std	Y+29, r22	; 0x1d
    9dc2:	7e 8f       	std	Y+30, r23	; 0x1e
    9dc4:	8f 8f       	std	Y+31, r24	; 0x1f
    9dc6:	98 a3       	std	Y+32, r25	; 0x20
				game.player.shot[idx].shared.vx = SHOT_SPEED;
    9dc8:	d0 9e       	mul	r13, r16
    9dca:	f0 01       	movw	r30, r0
    9dcc:	d1 9e       	mul	r13, r17
    9dce:	f0 0d       	add	r31, r0
    9dd0:	11 24       	eor	r1, r1
    9dd2:	ea 51       	subi	r30, 0x1A	; 26
    9dd4:	f2 4f       	sbci	r31, 0xF2	; 242
    9dd6:	80 e9       	ldi	r24, 0x90	; 144
    9dd8:	91 e0       	ldi	r25, 0x01	; 1
    9dda:	91 83       	std	Z+1, r25	; 0x01
    9ddc:	80 83       	st	Z, r24
    9dde:	25 c0       	rjmp	.+74     	; 0x9e2a <update_shot+0x1d4>
			}
			else
			{
				game.player.shot[idx].shared.vx = -SHOT_SPEED;
    9de0:	8a e1       	ldi	r24, 0x1A	; 26
    9de2:	80 9f       	mul	r24, r16
    9de4:	f0 01       	movw	r30, r0
    9de6:	81 9f       	mul	r24, r17
    9de8:	f0 0d       	add	r31, r0
    9dea:	11 24       	eor	r1, r1
    9dec:	ea 51       	subi	r30, 0x1A	; 26
    9dee:	f2 4f       	sbci	r31, 0xF2	; 242
    9df0:	20 e7       	ldi	r18, 0x70	; 112
    9df2:	3e ef       	ldi	r19, 0xFE	; 254
    9df4:	31 83       	std	Z+1, r19	; 0x01
    9df6:	20 83       	st	Z, r18
				game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    9df8:	8e 9d       	mul	r24, r14
    9dfa:	e0 01       	movw	r28, r0
    9dfc:	8f 9d       	mul	r24, r15
    9dfe:	d0 0d       	add	r29, r0
    9e00:	11 24       	eor	r1, r1
    9e02:	c9 55       	subi	r28, 0x59	; 89
    9e04:	d2 4f       	sbci	r29, 0xF2	; 242
    9e06:	20 e0       	ldi	r18, 0x00	; 0
    9e08:	30 e0       	ldi	r19, 0x00	; 0
    9e0a:	40 e0       	ldi	r20, 0x00	; 0
    9e0c:	51 e4       	ldi	r21, 0x41	; 65
    9e0e:	60 91 c8 0d 	lds	r22, 0x0DC8
    9e12:	70 91 c9 0d 	lds	r23, 0x0DC9
    9e16:	80 91 ca 0d 	lds	r24, 0x0DCA
    9e1a:	90 91 cb 0d 	lds	r25, 0x0DCB
    9e1e:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    9e22:	6d 8f       	std	Y+29, r22	; 0x1d
    9e24:	7e 8f       	std	Y+30, r23	; 0x1e
    9e26:	8f 8f       	std	Y+31, r24	; 0x1f
    9e28:	98 a3       	std	Y+32, r25	; 0x20
			}
		}
		game.player.active_shots++;
    9e2a:	80 91 d3 0d 	lds	r24, 0x0DD3
    9e2e:	8f 5f       	subi	r24, 0xFF	; 255
    9e30:	80 93 d3 0d 	sts	0x0DD3, r24
	}
}
    9e34:	df 91       	pop	r29
    9e36:	cf 91       	pop	r28
    9e38:	1f 91       	pop	r17
    9e3a:	0f 91       	pop	r16
    9e3c:	ff 90       	pop	r15
    9e3e:	ef 90       	pop	r14
    9e40:	df 90       	pop	r13
    9e42:	bf 90       	pop	r11
    9e44:	af 90       	pop	r10
    9e46:	9f 90       	pop	r9
    9e48:	8f 90       	pop	r8
    9e4a:	08 95       	ret

00009e4c <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    9e4c:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    9e4e:	86 17       	cp	r24, r22
    9e50:	97 07       	cpc	r25, r23
    9e52:	28 f4       	brcc	.+10     	; 0x9e5e <pixel_overlap+0x12>
    9e54:	94 2f       	mov	r25, r20
    9e56:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    9e58:	89 2f       	mov	r24, r25
    9e5a:	86 1b       	sub	r24, r22
    9e5c:	01 c0       	rjmp	.+2      	; 0x9e60 <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    9e5e:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    9e60:	e4 0f       	add	r30, r20
    9e62:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    9e64:	62 0f       	add	r22, r18
    9e66:	71 1d       	adc	r23, r1
	if (s2 < s1)
    9e68:	6e 17       	cp	r22, r30
    9e6a:	7f 07       	cpc	r23, r31
    9e6c:	10 f4       	brcc	.+4      	; 0x9e72 <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    9e6e:	6e 1b       	sub	r22, r30
    9e70:	86 0f       	add	r24, r22
	}
	return result;
}
    9e72:	08 95       	ret

00009e74 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    9e74:	2f 92       	push	r2
    9e76:	3f 92       	push	r3
    9e78:	4f 92       	push	r4
    9e7a:	5f 92       	push	r5
    9e7c:	6f 92       	push	r6
    9e7e:	7f 92       	push	r7
    9e80:	8f 92       	push	r8
    9e82:	9f 92       	push	r9
    9e84:	af 92       	push	r10
    9e86:	bf 92       	push	r11
    9e88:	cf 92       	push	r12
    9e8a:	df 92       	push	r13
    9e8c:	ef 92       	push	r14
    9e8e:	ff 92       	push	r15
    9e90:	0f 93       	push	r16
    9e92:	1f 93       	push	r17
    9e94:	cf 93       	push	r28
    9e96:	df 93       	push	r29
    9e98:	cd b7       	in	r28, 0x3d	; 61
    9e9a:	de b7       	in	r29, 0x3e	; 62
    9e9c:	68 97       	sbiw	r28, 0x18	; 24
    9e9e:	0f b6       	in	r0, 0x3f	; 63
    9ea0:	f8 94       	cli
    9ea2:	de bf       	out	0x3e, r29	; 62
    9ea4:	0f be       	out	0x3f, r0	; 63
    9ea6:	cd bf       	out	0x3d, r28	; 61
    9ea8:	98 8f       	std	Y+24, r25	; 0x18
    9eaa:	8f 8b       	std	Y+23, r24	; 0x17
    9eac:	16 2f       	mov	r17, r22
    9eae:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    9eb0:	dc 01       	movw	r26, r24
    9eb2:	14 96       	adiw	r26, 0x04	; 4
    9eb4:	4d 90       	ld	r4, X+
    9eb6:	5d 90       	ld	r5, X+
    9eb8:	6d 90       	ld	r6, X+
    9eba:	7c 90       	ld	r7, X
    9ebc:	17 97       	sbiw	r26, 0x07	; 7
    9ebe:	20 e0       	ldi	r18, 0x00	; 0
    9ec0:	30 e0       	ldi	r19, 0x00	; 0
    9ec2:	40 e0       	ldi	r20, 0x00	; 0
    9ec4:	5e e3       	ldi	r21, 0x3E	; 62
    9ec6:	c3 01       	movw	r24, r6
    9ec8:	b2 01       	movw	r22, r4
    9eca:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9ece:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9ed2:	4b 01       	movw	r8, r22
    9ed4:	5c 01       	movw	r10, r24
    9ed6:	68 87       	std	Y+8, r22	; 0x08
    9ed8:	9a 8a       	std	Y+18, r9	; 0x12
	u16 y0_tile = s->y / 8;
    9eda:	ef 89       	ldd	r30, Y+23	; 0x17
    9edc:	f8 8d       	ldd	r31, Y+24	; 0x18
    9ede:	c0 84       	ldd	r12, Z+8	; 0x08
    9ee0:	d1 84       	ldd	r13, Z+9	; 0x09
    9ee2:	e2 84       	ldd	r14, Z+10	; 0x0a
    9ee4:	f3 84       	ldd	r15, Z+11	; 0x0b
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    9ee6:	84 85       	ldd	r24, Z+12	; 0x0c
    9ee8:	95 85       	ldd	r25, Z+13	; 0x0d
    9eea:	89 2b       	or	r24, r25
    9eec:	61 f4       	brne	.+24     	; 0x9f06 <collision_detect_level+0x92>
    9eee:	20 e0       	ldi	r18, 0x00	; 0
    9ef0:	30 e0       	ldi	r19, 0x00	; 0
    9ef2:	a9 01       	movw	r20, r18
    9ef4:	60 81       	ld	r22, Z
    9ef6:	71 81       	ldd	r23, Z+1	; 0x01
    9ef8:	82 81       	ldd	r24, Z+2	; 0x02
    9efa:	93 81       	ldd	r25, Z+3	; 0x03
    9efc:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    9f00:	88 23       	and	r24, r24
    9f02:	09 f4       	brne	.+2      	; 0x9f06 <collision_detect_level+0x92>
    9f04:	d2 c2       	rjmp	.+1444   	; 0xa4aa <collision_detect_level+0x636>
	
	// Top and Bottom
	if (s->vy != 0)
    9f06:	20 e0       	ldi	r18, 0x00	; 0
    9f08:	30 e0       	ldi	r19, 0x00	; 0
    9f0a:	a9 01       	movw	r20, r18
    9f0c:	af 89       	ldd	r26, Y+23	; 0x17
    9f0e:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f10:	6d 91       	ld	r22, X+
    9f12:	7d 91       	ld	r23, X+
    9f14:	8d 91       	ld	r24, X+
    9f16:	9c 91       	ld	r25, X
    9f18:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    9f1c:	88 23       	and	r24, r24
    9f1e:	09 f4       	brne	.+2      	; 0x9f22 <collision_detect_level+0xae>
    9f20:	67 c1       	rjmp	.+718    	; 0xa1f0 <collision_detect_level+0x37c>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    9f22:	20 e0       	ldi	r18, 0x00	; 0
    9f24:	30 e0       	ldi	r19, 0x00	; 0
    9f26:	40 e0       	ldi	r20, 0x00	; 0
    9f28:	5e e3       	ldi	r21, 0x3E	; 62
    9f2a:	c7 01       	movw	r24, r14
    9f2c:	b6 01       	movw	r22, r12
    9f2e:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9f32:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    9f36:	6b 01       	movw	r12, r22
    9f38:	7c 01       	movw	r14, r24
    9f3a:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    9f3c:	20 e0       	ldi	r18, 0x00	; 0
    9f3e:	30 e0       	ldi	r19, 0x00	; 0
    9f40:	40 ee       	ldi	r20, 0xE0	; 224
    9f42:	50 e4       	ldi	r21, 0x40	; 64
    9f44:	c3 01       	movw	r24, r6
    9f46:	b2 01       	movw	r22, r4
    9f48:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    9f4c:	20 e0       	ldi	r18, 0x00	; 0
    9f4e:	30 e0       	ldi	r19, 0x00	; 0
    9f50:	40 e0       	ldi	r20, 0x00	; 0
    9f52:	5e e3       	ldi	r21, 0x3E	; 62
    9f54:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    9f58:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    9f5c:	f4 01       	movw	r30, r8
    9f5e:	53 e0       	ldi	r21, 0x03	; 3
    9f60:	ee 0f       	add	r30, r30
    9f62:	ff 1f       	adc	r31, r31
    9f64:	5a 95       	dec	r21
    9f66:	e1 f7       	brne	.-8      	; 0x9f60 <collision_detect_level+0xec>
    9f68:	fb 83       	std	Y+3, r31	; 0x03
    9f6a:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    9f6c:	9b 01       	movw	r18, r22
    9f6e:	e3 e0       	ldi	r30, 0x03	; 3
    9f70:	22 0f       	add	r18, r18
    9f72:	33 1f       	adc	r19, r19
    9f74:	ea 95       	dec	r30
    9f76:	e1 f7       	brne	.-8      	; 0x9f70 <collision_detect_level+0xfc>
    9f78:	3d 83       	std	Y+5, r19	; 0x05
    9f7a:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9f7c:	3f ef       	ldi	r19, 0xFF	; 255
    9f7e:	c3 1a       	sub	r12, r19
    9f80:	d3 0a       	sbc	r13, r19
    9f82:	f3 e0       	ldi	r31, 0x03	; 3
    9f84:	cc 0c       	add	r12, r12
    9f86:	dd 1c       	adc	r13, r13
    9f88:	fa 95       	dec	r31
    9f8a:	e1 f7       	brne	.-8      	; 0x9f84 <collision_detect_level+0x110>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9f8c:	b9 89       	ldd	r27, Y+17	; 0x11
    9f8e:	a8 e0       	ldi	r26, 0x08	; 8
    9f90:	ba 9f       	mul	r27, r26
    9f92:	a0 01       	movw	r20, r0
    9f94:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9f96:	96 01       	movw	r18, r12
    9f98:	28 50       	subi	r18, 0x08	; 8
    9f9a:	31 09       	sbc	r19, r1
    9f9c:	2b 01       	movw	r4, r22
    9f9e:	34 01       	movw	r6, r8
    9fa0:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    9fa2:	b6 01       	movw	r22, r12
    9fa4:	80 e0       	ldi	r24, 0x00	; 0
    9fa6:	90 e0       	ldi	r25, 0x00	; 0
    9fa8:	69 87       	std	Y+9, r22	; 0x09
    9faa:	7a 87       	std	Y+10, r23	; 0x0a
    9fac:	8b 87       	std	Y+11, r24	; 0x0b
    9fae:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    9fb0:	66 27       	eor	r22, r22
    9fb2:	57 fd       	sbrc	r21, 7
    9fb4:	60 95       	com	r22
    9fb6:	76 2f       	mov	r23, r22
    9fb8:	4d 87       	std	Y+13, r20	; 0x0d
    9fba:	5e 87       	std	Y+14, r21	; 0x0e
    9fbc:	6f 87       	std	Y+15, r22	; 0x0f
    9fbe:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    9fc0:	b9 01       	movw	r22, r18
    9fc2:	80 e0       	ldi	r24, 0x00	; 0
    9fc4:	90 e0       	ldi	r25, 0x00	; 0
    9fc6:	6b 8b       	std	Y+19, r22	; 0x13
    9fc8:	7c 8b       	std	Y+20, r23	; 0x14
    9fca:	8d 8b       	std	Y+21, r24	; 0x15
    9fcc:	9e 8b       	std	Y+22, r25	; 0x16
    9fce:	86 2d       	mov	r24, r6
    9fd0:	48 85       	ldd	r20, Y+8	; 0x08
    9fd2:	84 1b       	sub	r24, r20
	if (s->vx == 0 && s->vy == 0) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    9fd4:	81 17       	cp	r24, r17
    9fd6:	08 f0       	brcs	.+2      	; 0x9fda <collision_detect_level+0x166>
    9fd8:	0c c1       	rjmp	.+536    	; 0xa1f2 <collision_detect_level+0x37e>
		{
			if (s->vy < 0)
    9fda:	20 e0       	ldi	r18, 0x00	; 0
    9fdc:	30 e0       	ldi	r19, 0x00	; 0
    9fde:	a9 01       	movw	r20, r18
    9fe0:	af 89       	ldd	r26, Y+23	; 0x17
    9fe2:	b8 8d       	ldd	r27, Y+24	; 0x18
    9fe4:	6d 91       	ld	r22, X+
    9fe6:	7d 91       	ld	r23, X+
    9fe8:	8d 91       	ld	r24, X+
    9fea:	9c 91       	ld	r25, X
    9fec:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    9ff0:	87 ff       	sbrs	r24, 7
    9ff2:	58 c0       	rjmp	.+176    	; 0xa0a4 <collision_detect_level+0x230>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    9ff4:	a1 01       	movw	r20, r2
    9ff6:	b3 01       	movw	r22, r6
    9ff8:	80 91 a1 0f 	lds	r24, 0x0FA1
    9ffc:	90 91 a2 0f 	lds	r25, 0x0FA2
    a000:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a004:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    a006:	a1 01       	movw	r20, r2
    a008:	b2 01       	movw	r22, r4
    a00a:	80 91 a1 0f 	lds	r24, 0x0FA1
    a00e:	90 91 a2 0f 	lds	r25, 0x0FA2
    a012:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a016:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a018:	8f 2d       	mov	r24, r15
    a01a:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    a01e:	88 23       	and	r24, r24
    a020:	91 f0       	breq	.+36     	; 0xa046 <collision_detect_level+0x1d2>
    a022:	ef 89       	ldd	r30, Y+23	; 0x17
    a024:	f8 8d       	ldd	r31, Y+24	; 0x18
    a026:	64 81       	ldd	r22, Z+4	; 0x04
    a028:	75 81       	ldd	r23, Z+5	; 0x05
    a02a:	86 81       	ldd	r24, Z+6	; 0x06
    a02c:	97 81       	ldd	r25, Z+7	; 0x07
    a02e:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a032:	dc 01       	movw	r26, r24
    a034:	cb 01       	movw	r24, r22
    a036:	28 e0       	ldi	r18, 0x08	; 8
    a038:	48 e0       	ldi	r20, 0x08	; 8
    a03a:	6a 81       	ldd	r22, Y+2	; 0x02
    a03c:	7b 81       	ldd	r23, Y+3	; 0x03
    a03e:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a042:	84 30       	cpi	r24, 0x04	; 4
    a044:	c8 f4       	brcc	.+50     	; 0xa078 <collision_detect_level+0x204>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a046:	80 2f       	mov	r24, r16
    a048:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a04c:	88 23       	and	r24, r24
    a04e:	51 f1       	breq	.+84     	; 0xa0a4 <collision_detect_level+0x230>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a050:	af 89       	ldd	r26, Y+23	; 0x17
    a052:	b8 8d       	ldd	r27, Y+24	; 0x18
    a054:	14 96       	adiw	r26, 0x04	; 4
    a056:	6d 91       	ld	r22, X+
    a058:	7d 91       	ld	r23, X+
    a05a:	8d 91       	ld	r24, X+
    a05c:	9c 91       	ld	r25, X
    a05e:	17 97       	sbiw	r26, 0x07	; 7
    a060:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a064:	dc 01       	movw	r26, r24
    a066:	cb 01       	movw	r24, r22
    a068:	28 e0       	ldi	r18, 0x08	; 8
    a06a:	48 e0       	ldi	r20, 0x08	; 8
    a06c:	6c 81       	ldd	r22, Y+4	; 0x04
    a06e:	7d 81       	ldd	r23, Y+5	; 0x05
    a070:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a074:	84 30       	cpi	r24, 0x04	; 4
    a076:	b0 f0       	brcs	.+44     	; 0xa0a4 <collision_detect_level+0x230>
				{
					s->vy =  0;
    a078:	ef 89       	ldd	r30, Y+23	; 0x17
    a07a:	f8 8d       	ldd	r31, Y+24	; 0x18
    a07c:	10 82       	st	Z, r1
    a07e:	11 82       	std	Z+1, r1	; 0x01
    a080:	12 82       	std	Z+2, r1	; 0x02
    a082:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    a084:	69 85       	ldd	r22, Y+9	; 0x09
    a086:	7a 85       	ldd	r23, Y+10	; 0x0a
    a088:	8b 85       	ldd	r24, Y+11	; 0x0b
    a08a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a08c:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a090:	af 89       	ldd	r26, Y+23	; 0x17
    a092:	b8 8d       	ldd	r27, Y+24	; 0x18
    a094:	18 96       	adiw	r26, 0x08	; 8
    a096:	6d 93       	st	X+, r22
    a098:	7d 93       	st	X+, r23
    a09a:	8d 93       	st	X+, r24
    a09c:	9c 93       	st	X, r25
    a09e:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    a0a0:	b1 e0       	ldi	r27, 0x01	; 1
    a0a2:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    a0a4:	20 e0       	ldi	r18, 0x00	; 0
    a0a6:	30 e0       	ldi	r19, 0x00	; 0
    a0a8:	a9 01       	movw	r20, r18
    a0aa:	ef 89       	ldd	r30, Y+23	; 0x17
    a0ac:	f8 8d       	ldd	r31, Y+24	; 0x18
    a0ae:	60 81       	ld	r22, Z
    a0b0:	71 81       	ldd	r23, Z+1	; 0x01
    a0b2:	82 81       	ldd	r24, Z+2	; 0x02
    a0b4:	93 81       	ldd	r25, Z+3	; 0x03
    a0b6:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    a0ba:	18 16       	cp	r1, r24
    a0bc:	0c f0       	brlt	.+2      	; 0xa0c0 <collision_detect_level+0x24c>
    a0be:	91 c0       	rjmp	.+290    	; 0xa1e2 <collision_detect_level+0x36e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    a0c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    a0c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    a0c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    a0c6:	98 89       	ldd	r25, Y+16	; 0x10
    a0c8:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    a0cc:	6b 01       	movw	r12, r22
    a0ce:	7c 01       	movw	r14, r24
    a0d0:	af 89       	ldd	r26, Y+23	; 0x17
    a0d2:	b8 8d       	ldd	r27, Y+24	; 0x18
    a0d4:	18 96       	adiw	r26, 0x08	; 8
    a0d6:	2d 91       	ld	r18, X+
    a0d8:	3d 91       	ld	r19, X+
    a0da:	4d 91       	ld	r20, X+
    a0dc:	5c 91       	ld	r21, X
    a0de:	1b 97       	sbiw	r26, 0x0b	; 11
    a0e0:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a0e4:	20 e0       	ldi	r18, 0x00	; 0
    a0e6:	30 e0       	ldi	r19, 0x00	; 0
    a0e8:	40 e8       	ldi	r20, 0x80	; 128
    a0ea:	5f e3       	ldi	r21, 0x3F	; 63
    a0ec:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a0f0:	20 e0       	ldi	r18, 0x00	; 0
    a0f2:	30 e0       	ldi	r19, 0x00	; 0
    a0f4:	40 e0       	ldi	r20, 0x00	; 0
    a0f6:	5e e3       	ldi	r21, 0x3E	; 62
    a0f8:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a0fc:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a100:	ab 01       	movw	r20, r22
    a102:	b3 01       	movw	r22, r6
    a104:	80 91 a1 0f 	lds	r24, 0x0FA1
    a108:	90 91 a2 0f 	lds	r25, 0x0FA2
    a10c:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a110:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    a112:	ef 89       	ldd	r30, Y+23	; 0x17
    a114:	f8 8d       	ldd	r31, Y+24	; 0x18
    a116:	20 85       	ldd	r18, Z+8	; 0x08
    a118:	31 85       	ldd	r19, Z+9	; 0x09
    a11a:	42 85       	ldd	r20, Z+10	; 0x0a
    a11c:	53 85       	ldd	r21, Z+11	; 0x0b
    a11e:	c7 01       	movw	r24, r14
    a120:	b6 01       	movw	r22, r12
    a122:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a126:	20 e0       	ldi	r18, 0x00	; 0
    a128:	30 e0       	ldi	r19, 0x00	; 0
    a12a:	40 e8       	ldi	r20, 0x80	; 128
    a12c:	5f e3       	ldi	r21, 0x3F	; 63
    a12e:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a132:	20 e0       	ldi	r18, 0x00	; 0
    a134:	30 e0       	ldi	r19, 0x00	; 0
    a136:	40 e0       	ldi	r20, 0x00	; 0
    a138:	5e e3       	ldi	r21, 0x3E	; 62
    a13a:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a13e:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a142:	ab 01       	movw	r20, r22
    a144:	b2 01       	movw	r22, r4
    a146:	80 91 a1 0f 	lds	r24, 0x0FA1
    a14a:	90 91 a2 0f 	lds	r25, 0x0FA2
    a14e:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a152:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a154:	80 2f       	mov	r24, r16
    a156:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    a15a:	88 23       	and	r24, r24
    a15c:	a1 f0       	breq	.+40     	; 0xa186 <collision_detect_level+0x312>
    a15e:	af 89       	ldd	r26, Y+23	; 0x17
    a160:	b8 8d       	ldd	r27, Y+24	; 0x18
    a162:	14 96       	adiw	r26, 0x04	; 4
    a164:	6d 91       	ld	r22, X+
    a166:	7d 91       	ld	r23, X+
    a168:	8d 91       	ld	r24, X+
    a16a:	9c 91       	ld	r25, X
    a16c:	17 97       	sbiw	r26, 0x07	; 7
    a16e:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a172:	dc 01       	movw	r26, r24
    a174:	cb 01       	movw	r24, r22
    a176:	28 e0       	ldi	r18, 0x08	; 8
    a178:	48 e0       	ldi	r20, 0x08	; 8
    a17a:	6a 81       	ldd	r22, Y+2	; 0x02
    a17c:	7b 81       	ldd	r23, Y+3	; 0x03
    a17e:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a182:	84 30       	cpi	r24, 0x04	; 4
    a184:	b8 f4       	brcc	.+46     	; 0xa1b4 <collision_detect_level+0x340>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a186:	8f 2d       	mov	r24, r15
    a188:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    a18c:	88 23       	and	r24, r24
    a18e:	49 f1       	breq	.+82     	; 0xa1e2 <collision_detect_level+0x36e>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a190:	ef 89       	ldd	r30, Y+23	; 0x17
    a192:	f8 8d       	ldd	r31, Y+24	; 0x18
    a194:	64 81       	ldd	r22, Z+4	; 0x04
    a196:	75 81       	ldd	r23, Z+5	; 0x05
    a198:	86 81       	ldd	r24, Z+6	; 0x06
    a19a:	97 81       	ldd	r25, Z+7	; 0x07
    a19c:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a1a0:	dc 01       	movw	r26, r24
    a1a2:	cb 01       	movw	r24, r22
    a1a4:	28 e0       	ldi	r18, 0x08	; 8
    a1a6:	48 e0       	ldi	r20, 0x08	; 8
    a1a8:	6c 81       	ldd	r22, Y+4	; 0x04
    a1aa:	7d 81       	ldd	r23, Y+5	; 0x05
    a1ac:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a1b0:	84 30       	cpi	r24, 0x04	; 4
    a1b2:	b8 f0       	brcs	.+46     	; 0xa1e2 <collision_detect_level+0x36e>
				{
					s->vy =  0;
    a1b4:	af 89       	ldd	r26, Y+23	; 0x17
    a1b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    a1b8:	1d 92       	st	X+, r1
    a1ba:	1d 92       	st	X+, r1
    a1bc:	1d 92       	st	X+, r1
    a1be:	1c 92       	st	X, r1
    a1c0:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    a1c2:	1e 96       	adiw	r26, 0x0e	; 14
    a1c4:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    a1c6:	6b 89       	ldd	r22, Y+19	; 0x13
    a1c8:	7c 89       	ldd	r23, Y+20	; 0x14
    a1ca:	8d 89       	ldd	r24, Y+21	; 0x15
    a1cc:	9e 89       	ldd	r25, Y+22	; 0x16
    a1ce:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a1d2:	ef 89       	ldd	r30, Y+23	; 0x17
    a1d4:	f8 8d       	ldd	r31, Y+24	; 0x18
    a1d6:	60 87       	std	Z+8, r22	; 0x08
    a1d8:	71 87       	std	Z+9, r23	; 0x09
    a1da:	82 87       	std	Z+10, r24	; 0x0a
    a1dc:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    a1de:	f1 e0       	ldi	r31, 0x01	; 1
    a1e0:	f9 83       	std	Y+1, r31	; 0x01
    a1e2:	2f ef       	ldi	r18, 0xFF	; 255
    a1e4:	62 1a       	sub	r6, r18
    a1e6:	72 0a       	sbc	r7, r18
    a1e8:	3f ef       	ldi	r19, 0xFF	; 255
    a1ea:	43 1a       	sub	r4, r19
    a1ec:	53 0a       	sbc	r5, r19
    a1ee:	ef ce       	rjmp	.-546    	; 0x9fce <collision_detect_level+0x15a>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    a1f0:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    a1f2:	af 89       	ldd	r26, Y+23	; 0x17
    a1f4:	b8 8d       	ldd	r27, Y+24	; 0x18
    a1f6:	1c 96       	adiw	r26, 0x0c	; 12
    a1f8:	8d 91       	ld	r24, X+
    a1fa:	9c 91       	ld	r25, X
    a1fc:	1d 97       	sbiw	r26, 0x0d	; 13
    a1fe:	89 2b       	or	r24, r25
    a200:	09 f4       	brne	.+2      	; 0xa204 <collision_detect_level+0x390>
    a202:	54 c1       	rjmp	.+680    	; 0xa4ac <collision_detect_level+0x638>
	{
		y0_tile = s->y / 8;
    a204:	18 96       	adiw	r26, 0x08	; 8
    a206:	cd 90       	ld	r12, X+
    a208:	dd 90       	ld	r13, X+
    a20a:	ed 90       	ld	r14, X+
    a20c:	fc 90       	ld	r15, X
    a20e:	1b 97       	sbiw	r26, 0x0b	; 11
    a210:	20 e0       	ldi	r18, 0x00	; 0
    a212:	30 e0       	ldi	r19, 0x00	; 0
    a214:	40 e0       	ldi	r20, 0x00	; 0
    a216:	5e e3       	ldi	r21, 0x3E	; 62
    a218:	c7 01       	movw	r24, r14
    a21a:	b6 01       	movw	r22, r12
    a21c:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a220:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a224:	2b 01       	movw	r4, r22
    a226:	3c 01       	movw	r6, r24
    a228:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    a22a:	20 e0       	ldi	r18, 0x00	; 0
    a22c:	30 e0       	ldi	r19, 0x00	; 0
    a22e:	40 ee       	ldi	r20, 0xE0	; 224
    a230:	50 e4       	ldi	r21, 0x40	; 64
    a232:	c7 01       	movw	r24, r14
    a234:	b6 01       	movw	r22, r12
    a236:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a23a:	20 e0       	ldi	r18, 0x00	; 0
    a23c:	30 e0       	ldi	r19, 0x00	; 0
    a23e:	40 e0       	ldi	r20, 0x00	; 0
    a240:	5e e3       	ldi	r21, 0x3E	; 62
    a242:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a246:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a24a:	12 01       	movw	r2, r4
    a24c:	83 e0       	ldi	r24, 0x03	; 3
    a24e:	22 0c       	add	r2, r2
    a250:	33 1c       	adc	r3, r3
    a252:	8a 95       	dec	r24
    a254:	e1 f7       	brne	.-8      	; 0xa24e <collision_detect_level+0x3da>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a256:	fb 01       	movw	r30, r22
    a258:	93 e0       	ldi	r25, 0x03	; 3
    a25a:	ee 0f       	add	r30, r30
    a25c:	ff 1f       	adc	r31, r31
    a25e:	9a 95       	dec	r25
    a260:	e1 f7       	brne	.-8      	; 0xa25a <collision_detect_level+0x3e6>
    a262:	fb 83       	std	Y+3, r31	; 0x03
    a264:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a266:	ff ef       	ldi	r31, 0xFF	; 255
    a268:	8f 1a       	sub	r8, r31
    a26a:	9f 0a       	sbc	r9, r31
    a26c:	94 01       	movw	r18, r8
    a26e:	43 e0       	ldi	r20, 0x03	; 3
    a270:	22 0f       	add	r18, r18
    a272:	33 1f       	adc	r19, r19
    a274:	4a 95       	dec	r20
    a276:	e1 f7       	brne	.-8      	; 0xa270 <collision_detect_level+0x3fc>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a278:	a8 e0       	ldi	r26, 0x08	; 8
    a27a:	1a 9f       	mul	r17, r26
    a27c:	a0 01       	movw	r20, r0
    a27e:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a280:	49 01       	movw	r8, r18
    a282:	b8 e0       	ldi	r27, 0x08	; 8
    a284:	8b 1a       	sub	r8, r27
    a286:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a288:	6b 01       	movw	r12, r22
    a28a:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    a28c:	b9 01       	movw	r22, r18
    a28e:	80 e0       	ldi	r24, 0x00	; 0
    a290:	90 e0       	ldi	r25, 0x00	; 0
    a292:	6c 83       	std	Y+4, r22	; 0x04
    a294:	7d 83       	std	Y+5, r23	; 0x05
    a296:	8e 83       	std	Y+6, r24	; 0x06
    a298:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a29a:	ca 01       	movw	r24, r20
    a29c:	aa 27       	eor	r26, r26
    a29e:	97 fd       	sbrc	r25, 7
    a2a0:	a0 95       	com	r26
    a2a2:	ba 2f       	mov	r27, r26
    a2a4:	89 87       	std	Y+9, r24	; 0x09
    a2a6:	9a 87       	std	Y+10, r25	; 0x0a
    a2a8:	ab 87       	std	Y+11, r26	; 0x0b
    a2aa:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    a2ac:	a1 2c       	mov	r10, r1
    a2ae:	b1 2c       	mov	r11, r1
    a2b0:	80 2f       	mov	r24, r16
    a2b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    a2b4:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    a2b6:	49 89       	ldd	r20, Y+17	; 0x11
    a2b8:	84 17       	cp	r24, r20
    a2ba:	08 f0       	brcs	.+2      	; 0xa2be <collision_detect_level+0x44a>
    a2bc:	f7 c0       	rjmp	.+494    	; 0xa4ac <collision_detect_level+0x638>
		{
			if (s->vx < 0)
    a2be:	af 89       	ldd	r26, Y+23	; 0x17
    a2c0:	b8 8d       	ldd	r27, Y+24	; 0x18
    a2c2:	1c 96       	adiw	r26, 0x0c	; 12
    a2c4:	8d 91       	ld	r24, X+
    a2c6:	9c 91       	ld	r25, X
    a2c8:	1d 97       	sbiw	r26, 0x0d	; 13
    a2ca:	97 ff       	sbrs	r25, 7
    a2cc:	57 c0       	rjmp	.+174    	; 0xa37c <collision_detect_level+0x508>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    a2ce:	a8 01       	movw	r20, r16
    a2d0:	68 85       	ldd	r22, Y+8	; 0x08
    a2d2:	7a 89       	ldd	r23, Y+18	; 0x12
    a2d4:	80 91 a1 0f 	lds	r24, 0x0FA1
    a2d8:	90 91 a2 0f 	lds	r25, 0x0FA2
    a2dc:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a2e0:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    a2e2:	a6 01       	movw	r20, r12
    a2e4:	68 85       	ldd	r22, Y+8	; 0x08
    a2e6:	7a 89       	ldd	r23, Y+18	; 0x12
    a2e8:	80 91 a1 0f 	lds	r24, 0x0FA1
    a2ec:	90 91 a2 0f 	lds	r25, 0x0FA2
    a2f0:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a2f4:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a2f6:	87 2d       	mov	r24, r7
    a2f8:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    a2fc:	88 23       	and	r24, r24
    a2fe:	89 f0       	breq	.+34     	; 0xa322 <collision_detect_level+0x4ae>
    a300:	ef 89       	ldd	r30, Y+23	; 0x17
    a302:	f8 8d       	ldd	r31, Y+24	; 0x18
    a304:	60 85       	ldd	r22, Z+8	; 0x08
    a306:	71 85       	ldd	r23, Z+9	; 0x09
    a308:	82 85       	ldd	r24, Z+10	; 0x0a
    a30a:	93 85       	ldd	r25, Z+11	; 0x0b
    a30c:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a310:	dc 01       	movw	r26, r24
    a312:	cb 01       	movw	r24, r22
    a314:	28 e0       	ldi	r18, 0x08	; 8
    a316:	48 e0       	ldi	r20, 0x08	; 8
    a318:	b1 01       	movw	r22, r2
    a31a:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a31e:	84 30       	cpi	r24, 0x04	; 4
    a320:	c8 f4       	brcc	.+50     	; 0xa354 <collision_detect_level+0x4e0>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a322:	8e 2d       	mov	r24, r14
    a324:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a328:	88 23       	and	r24, r24
    a32a:	41 f1       	breq	.+80     	; 0xa37c <collision_detect_level+0x508>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a32c:	af 89       	ldd	r26, Y+23	; 0x17
    a32e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a330:	18 96       	adiw	r26, 0x08	; 8
    a332:	6d 91       	ld	r22, X+
    a334:	7d 91       	ld	r23, X+
    a336:	8d 91       	ld	r24, X+
    a338:	9c 91       	ld	r25, X
    a33a:	1b 97       	sbiw	r26, 0x0b	; 11
    a33c:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a340:	dc 01       	movw	r26, r24
    a342:	cb 01       	movw	r24, r22
    a344:	28 e0       	ldi	r18, 0x08	; 8
    a346:	48 e0       	ldi	r20, 0x08	; 8
    a348:	6a 81       	ldd	r22, Y+2	; 0x02
    a34a:	7b 81       	ldd	r23, Y+3	; 0x03
    a34c:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a350:	84 30       	cpi	r24, 0x04	; 4
    a352:	a0 f0       	brcs	.+40     	; 0xa37c <collision_detect_level+0x508>
				{
					s->vx =  0;
    a354:	ef 89       	ldd	r30, Y+23	; 0x17
    a356:	f8 8d       	ldd	r31, Y+24	; 0x18
    a358:	15 86       	std	Z+13, r1	; 0x0d
    a35a:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    a35c:	6c 81       	ldd	r22, Y+4	; 0x04
    a35e:	7d 81       	ldd	r23, Y+5	; 0x05
    a360:	8e 81       	ldd	r24, Y+6	; 0x06
    a362:	9f 81       	ldd	r25, Y+7	; 0x07
    a364:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a368:	af 89       	ldd	r26, Y+23	; 0x17
    a36a:	b8 8d       	ldd	r27, Y+24	; 0x18
    a36c:	14 96       	adiw	r26, 0x04	; 4
    a36e:	6d 93       	st	X+, r22
    a370:	7d 93       	st	X+, r23
    a372:	8d 93       	st	X+, r24
    a374:	9c 93       	st	X, r25
    a376:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    a378:	b1 e0       	ldi	r27, 0x01	; 1
    a37a:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    a37c:	ef 89       	ldd	r30, Y+23	; 0x17
    a37e:	f8 8d       	ldd	r31, Y+24	; 0x18
    a380:	84 85       	ldd	r24, Z+12	; 0x0c
    a382:	95 85       	ldd	r25, Z+13	; 0x0d
    a384:	18 16       	cp	r1, r24
    a386:	19 06       	cpc	r1, r25
    a388:	0c f0       	brlt	.+2      	; 0xa38c <collision_detect_level+0x518>
    a38a:	89 c0       	rjmp	.+274    	; 0xa49e <collision_detect_level+0x62a>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    a38c:	69 85       	ldd	r22, Y+9	; 0x09
    a38e:	7a 85       	ldd	r23, Y+10	; 0x0a
    a390:	8b 85       	ldd	r24, Y+11	; 0x0b
    a392:	9c 85       	ldd	r25, Y+12	; 0x0c
    a394:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    a398:	2b 01       	movw	r4, r22
    a39a:	3c 01       	movw	r6, r24
    a39c:	af 89       	ldd	r26, Y+23	; 0x17
    a39e:	b8 8d       	ldd	r27, Y+24	; 0x18
    a3a0:	14 96       	adiw	r26, 0x04	; 4
    a3a2:	2d 91       	ld	r18, X+
    a3a4:	3d 91       	ld	r19, X+
    a3a6:	4d 91       	ld	r20, X+
    a3a8:	5c 91       	ld	r21, X
    a3aa:	17 97       	sbiw	r26, 0x07	; 7
    a3ac:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a3b0:	20 e0       	ldi	r18, 0x00	; 0
    a3b2:	30 e0       	ldi	r19, 0x00	; 0
    a3b4:	40 e8       	ldi	r20, 0x80	; 128
    a3b6:	5f e3       	ldi	r21, 0x3F	; 63
    a3b8:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a3bc:	20 e0       	ldi	r18, 0x00	; 0
    a3be:	30 e0       	ldi	r19, 0x00	; 0
    a3c0:	40 e0       	ldi	r20, 0x00	; 0
    a3c2:	5e e3       	ldi	r21, 0x3E	; 62
    a3c4:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a3c8:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a3cc:	a8 01       	movw	r20, r16
    a3ce:	80 91 a1 0f 	lds	r24, 0x0FA1
    a3d2:	90 91 a2 0f 	lds	r25, 0x0FA2
    a3d6:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a3da:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    a3dc:	ef 89       	ldd	r30, Y+23	; 0x17
    a3de:	f8 8d       	ldd	r31, Y+24	; 0x18
    a3e0:	24 81       	ldd	r18, Z+4	; 0x04
    a3e2:	35 81       	ldd	r19, Z+5	; 0x05
    a3e4:	46 81       	ldd	r20, Z+6	; 0x06
    a3e6:	57 81       	ldd	r21, Z+7	; 0x07
    a3e8:	c3 01       	movw	r24, r6
    a3ea:	b2 01       	movw	r22, r4
    a3ec:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a3f0:	20 e0       	ldi	r18, 0x00	; 0
    a3f2:	30 e0       	ldi	r19, 0x00	; 0
    a3f4:	40 e8       	ldi	r20, 0x80	; 128
    a3f6:	5f e3       	ldi	r21, 0x3F	; 63
    a3f8:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a3fc:	20 e0       	ldi	r18, 0x00	; 0
    a3fe:	30 e0       	ldi	r19, 0x00	; 0
    a400:	40 e0       	ldi	r20, 0x00	; 0
    a402:	5e e3       	ldi	r21, 0x3E	; 62
    a404:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a408:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a40c:	a6 01       	movw	r20, r12
    a40e:	80 91 a1 0f 	lds	r24, 0x0FA1
    a412:	90 91 a2 0f 	lds	r25, 0x0FA2
    a416:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <get_level_tile>
    a41a:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a41c:	8e 2d       	mov	r24, r14
    a41e:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
    a422:	88 23       	and	r24, r24
    a424:	99 f0       	breq	.+38     	; 0xa44c <collision_detect_level+0x5d8>
    a426:	af 89       	ldd	r26, Y+23	; 0x17
    a428:	b8 8d       	ldd	r27, Y+24	; 0x18
    a42a:	18 96       	adiw	r26, 0x08	; 8
    a42c:	6d 91       	ld	r22, X+
    a42e:	7d 91       	ld	r23, X+
    a430:	8d 91       	ld	r24, X+
    a432:	9c 91       	ld	r25, X
    a434:	1b 97       	sbiw	r26, 0x0b	; 11
    a436:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a43a:	dc 01       	movw	r26, r24
    a43c:	cb 01       	movw	r24, r22
    a43e:	28 e0       	ldi	r18, 0x08	; 8
    a440:	48 e0       	ldi	r20, 0x08	; 8
    a442:	b1 01       	movw	r22, r2
    a444:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a448:	84 30       	cpi	r24, 0x04	; 4
    a44a:	b8 f4       	brcc	.+46     	; 0xa47a <collision_detect_level+0x606>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a44c:	87 2d       	mov	r24, r7
    a44e:	0e 94 ee 4b 	call	0x97dc	; 0x97dc <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    a452:	88 23       	and	r24, r24
    a454:	21 f1       	breq	.+72     	; 0xa49e <collision_detect_level+0x62a>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    a456:	ef 89       	ldd	r30, Y+23	; 0x17
    a458:	f8 8d       	ldd	r31, Y+24	; 0x18
    a45a:	60 85       	ldd	r22, Z+8	; 0x08
    a45c:	71 85       	ldd	r23, Z+9	; 0x09
    a45e:	82 85       	ldd	r24, Z+10	; 0x0a
    a460:	93 85       	ldd	r25, Z+11	; 0x0b
    a462:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a466:	dc 01       	movw	r26, r24
    a468:	cb 01       	movw	r24, r22
    a46a:	28 e0       	ldi	r18, 0x08	; 8
    a46c:	48 e0       	ldi	r20, 0x08	; 8
    a46e:	6a 81       	ldd	r22, Y+2	; 0x02
    a470:	7b 81       	ldd	r23, Y+3	; 0x03
    a472:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <pixel_overlap>
    a476:	84 30       	cpi	r24, 0x04	; 4
    a478:	90 f0       	brcs	.+36     	; 0xa49e <collision_detect_level+0x62a>
				{
					s->vx =  0;
    a47a:	af 89       	ldd	r26, Y+23	; 0x17
    a47c:	b8 8d       	ldd	r27, Y+24	; 0x18
    a47e:	1d 96       	adiw	r26, 0x0d	; 13
    a480:	1c 92       	st	X, r1
    a482:	1e 92       	st	-X, r1
    a484:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    a486:	c5 01       	movw	r24, r10
    a488:	b4 01       	movw	r22, r8
    a48a:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a48e:	ef 89       	ldd	r30, Y+23	; 0x17
    a490:	f8 8d       	ldd	r31, Y+24	; 0x18
    a492:	64 83       	std	Z+4, r22	; 0x04
    a494:	75 83       	std	Z+5, r23	; 0x05
    a496:	86 83       	std	Z+6, r24	; 0x06
    a498:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    a49a:	f1 e0       	ldi	r31, 0x01	; 1
    a49c:	f9 83       	std	Y+1, r31	; 0x01
    a49e:	0f 5f       	subi	r16, 0xFF	; 255
    a4a0:	1f 4f       	sbci	r17, 0xFF	; 255
    a4a2:	2f ef       	ldi	r18, 0xFF	; 255
    a4a4:	c2 1a       	sub	r12, r18
    a4a6:	d2 0a       	sbc	r13, r18
    a4a8:	03 cf       	rjmp	.-506    	; 0xa2b0 <collision_detect_level+0x43c>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    a4aa:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    a4ac:	89 81       	ldd	r24, Y+1	; 0x01
    a4ae:	68 96       	adiw	r28, 0x18	; 24
    a4b0:	0f b6       	in	r0, 0x3f	; 63
    a4b2:	f8 94       	cli
    a4b4:	de bf       	out	0x3e, r29	; 62
    a4b6:	0f be       	out	0x3f, r0	; 63
    a4b8:	cd bf       	out	0x3d, r28	; 61
    a4ba:	df 91       	pop	r29
    a4bc:	cf 91       	pop	r28
    a4be:	1f 91       	pop	r17
    a4c0:	0f 91       	pop	r16
    a4c2:	ff 90       	pop	r15
    a4c4:	ef 90       	pop	r14
    a4c6:	df 90       	pop	r13
    a4c8:	cf 90       	pop	r12
    a4ca:	bf 90       	pop	r11
    a4cc:	af 90       	pop	r10
    a4ce:	9f 90       	pop	r9
    a4d0:	8f 90       	pop	r8
    a4d2:	7f 90       	pop	r7
    a4d4:	6f 90       	pop	r6
    a4d6:	5f 90       	pop	r5
    a4d8:	4f 90       	pop	r4
    a4da:	3f 90       	pop	r3
    a4dc:	2f 90       	pop	r2
    a4de:	08 95       	ret

0000a4e0 <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    a4e0:	2f 92       	push	r2
    a4e2:	3f 92       	push	r3
    a4e4:	4f 92       	push	r4
    a4e6:	5f 92       	push	r5
    a4e8:	6f 92       	push	r6
    a4ea:	7f 92       	push	r7
    a4ec:	8f 92       	push	r8
    a4ee:	9f 92       	push	r9
    a4f0:	af 92       	push	r10
    a4f2:	bf 92       	push	r11
    a4f4:	cf 92       	push	r12
    a4f6:	df 92       	push	r13
    a4f8:	ef 92       	push	r14
    a4fa:	ff 92       	push	r15
    a4fc:	0f 93       	push	r16
    a4fe:	1f 93       	push	r17
    a500:	cf 93       	push	r28
    a502:	df 93       	push	r29
    a504:	cd b7       	in	r28, 0x3d	; 61
    a506:	de b7       	in	r29, 0x3e	; 62
    a508:	2f 97       	sbiw	r28, 0x0f	; 15
    a50a:	0f b6       	in	r0, 0x3f	; 63
    a50c:	f8 94       	cli
    a50e:	de bf       	out	0x3e, r29	; 62
    a510:	0f be       	out	0x3f, r0	; 63
    a512:	cd bf       	out	0x3d, r28	; 61
    a514:	9b ee       	ldi	r25, 0xEB	; 235
    a516:	89 2e       	mov	r8, r25
    a518:	9d e0       	ldi	r25, 0x0D	; 13
    a51a:	99 2e       	mov	r9, r25
    a51c:	8a ed       	ldi	r24, 0xDA	; 218
    a51e:	9d e0       	ldi	r25, 0x0D	; 13
    a520:	9f 87       	std	Y+15, r25	; 0x0f
    a522:	8e 87       	std	Y+14, r24	; 0x0e
    a524:	9b e0       	ldi	r25, 0x0B	; 11
    a526:	99 83       	std	Y+1, r25	; 0x01
						SFX_HIT;
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							SFX_ENEMY_EXPLODE;
							game.enemies[j].flags = EXPLODING;
    a528:	20 e1       	ldi	r18, 0x10	; 16
    a52a:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    a52c:	f4 01       	movw	r30, r8
    a52e:	80 81       	ld	r24, Z
    a530:	88 23       	and	r24, r24
    a532:	09 f4       	brne	.+2      	; 0xa536 <animate_shot+0x56>
    a534:	46 c1       	rjmp	.+652    	; 0xa7c2 <animate_shot+0x2e2>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    a536:	ee 85       	ldd	r30, Y+14	; 0x0e
    a538:	ff 85       	ldd	r31, Y+15	; 0x0f
    a53a:	64 85       	ldd	r22, Z+12	; 0x0c
    a53c:	75 85       	ldd	r23, Z+13	; 0x0d
    a53e:	88 27       	eor	r24, r24
    a540:	77 fd       	sbrc	r23, 7
    a542:	80 95       	com	r24
    a544:	98 2f       	mov	r25, r24
    a546:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    a54a:	29 e8       	ldi	r18, 0x89	; 137
    a54c:	38 e8       	ldi	r19, 0x88	; 136
    a54e:	48 e8       	ldi	r20, 0x88	; 136
    a550:	5c e3       	ldi	r21, 0x3C	; 60
    a552:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a556:	ee 85       	ldd	r30, Y+14	; 0x0e
    a558:	ff 85       	ldd	r31, Y+15	; 0x0f
    a55a:	24 81       	ldd	r18, Z+4	; 0x04
    a55c:	35 81       	ldd	r19, Z+5	; 0x05
    a55e:	46 81       	ldd	r20, Z+6	; 0x06
    a560:	57 81       	ldd	r21, Z+7	; 0x07
    a562:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a566:	2b 01       	movw	r4, r22
    a568:	3c 01       	movw	r6, r24
    a56a:	ee 85       	ldd	r30, Y+14	; 0x0e
    a56c:	ff 85       	ldd	r31, Y+15	; 0x0f
    a56e:	64 83       	std	Z+4, r22	; 0x04
    a570:	75 83       	std	Z+5, r23	; 0x05
    a572:	86 83       	std	Z+6, r24	; 0x06
    a574:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    a576:	29 e8       	ldi	r18, 0x89	; 137
    a578:	38 e8       	ldi	r19, 0x88	; 136
    a57a:	48 e8       	ldi	r20, 0x88	; 136
    a57c:	5c e3       	ldi	r21, 0x3C	; 60
    a57e:	60 81       	ld	r22, Z
    a580:	71 81       	ldd	r23, Z+1	; 0x01
    a582:	82 81       	ldd	r24, Z+2	; 0x02
    a584:	93 81       	ldd	r25, Z+3	; 0x03
    a586:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a58a:	ee 85       	ldd	r30, Y+14	; 0x0e
    a58c:	ff 85       	ldd	r31, Y+15	; 0x0f
    a58e:	20 85       	ldd	r18, Z+8	; 0x08
    a590:	31 85       	ldd	r19, Z+9	; 0x09
    a592:	42 85       	ldd	r20, Z+10	; 0x0a
    a594:	53 85       	ldd	r21, Z+11	; 0x0b
    a596:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a59a:	6b 01       	movw	r12, r22
    a59c:	7c 01       	movw	r14, r24
    a59e:	ee 85       	ldd	r30, Y+14	; 0x0e
    a5a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    a5a2:	60 87       	std	Z+8, r22	; 0x08
    a5a4:	71 87       	std	Z+9, r23	; 0x09
    a5a6:	82 87       	std	Z+10, r24	; 0x0a
    a5a8:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    a5aa:	60 91 ad 0d 	lds	r22, 0x0DAD
    a5ae:	70 91 ae 0d 	lds	r23, 0x0DAE
    a5b2:	80 e0       	ldi	r24, 0x00	; 0
    a5b4:	90 e0       	ldi	r25, 0x00	; 0
    a5b6:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a5ba:	9b 01       	movw	r18, r22
    a5bc:	ac 01       	movw	r20, r24
    a5be:	c7 01       	movw	r24, r14
    a5c0:	b6 01       	movw	r22, r12
    a5c2:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a5c6:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a5ca:	c6 2e       	mov	r12, r22
    a5cc:	80 91 ab 0d 	lds	r24, 0x0DAB
    a5d0:	90 91 ac 0d 	lds	r25, 0x0DAC
    a5d4:	bc 01       	movw	r22, r24
    a5d6:	80 e0       	ldi	r24, 0x00	; 0
    a5d8:	90 e0       	ldi	r25, 0x00	; 0
    a5da:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a5de:	9b 01       	movw	r18, r22
    a5e0:	ac 01       	movw	r20, r24
    a5e2:	c3 01       	movw	r24, r6
    a5e4:	b2 01       	movw	r22, r4
    a5e6:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a5ea:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a5ee:	01 e0       	ldi	r16, 0x01	; 1
    a5f0:	21 e0       	ldi	r18, 0x01	; 1
    a5f2:	4c 2d       	mov	r20, r12
    a5f4:	89 81       	ldd	r24, Y+1	; 0x01
    a5f6:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a5fa:	ee 85       	ldd	r30, Y+14	; 0x0e
    a5fc:	ff 85       	ldd	r31, Y+15	; 0x0f
    a5fe:	c4 80       	ldd	r12, Z+4	; 0x04
    a600:	d5 80       	ldd	r13, Z+5	; 0x05
    a602:	e6 80       	ldd	r14, Z+6	; 0x06
    a604:	f7 80       	ldd	r15, Z+7	; 0x07
    a606:	60 90 ab 0d 	lds	r6, 0x0DAB
    a60a:	70 90 ac 0d 	lds	r7, 0x0DAC
    a60e:	b3 01       	movw	r22, r6
    a610:	80 e0       	ldi	r24, 0x00	; 0
    a612:	90 e0       	ldi	r25, 0x00	; 0
    a614:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a618:	9b 01       	movw	r18, r22
    a61a:	ac 01       	movw	r20, r24
    a61c:	c7 01       	movw	r24, r14
    a61e:	b6 01       	movw	r22, r12
    a620:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    a624:	87 ff       	sbrs	r24, 7
    a626:	0f c0       	rjmp	.+30     	; 0xa646 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    a628:	f4 01       	movw	r30, r8
    a62a:	10 82       	st	Z, r1
				game.player.active_shots--;
    a62c:	80 91 d3 0d 	lds	r24, 0x0DD3
    a630:	81 50       	subi	r24, 0x01	; 1
    a632:	80 93 d3 0d 	sts	0x0DD3, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a636:	01 e0       	ldi	r16, 0x01	; 1
    a638:	21 e0       	ldi	r18, 0x01	; 1
    a63a:	40 e0       	ldi	r20, 0x00	; 0
    a63c:	60 ee       	ldi	r22, 0xE0	; 224
    a63e:	89 81       	ldd	r24, Y+1	; 0x01
    a640:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
    a644:	be c0       	rjmp	.+380    	; 0xa7c2 <animate_shot+0x2e2>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a646:	20 e0       	ldi	r18, 0x00	; 0
    a648:	30 e0       	ldi	r19, 0x00	; 0
    a64a:	40 e0       	ldi	r20, 0x00	; 0
    a64c:	51 e4       	ldi	r21, 0x41	; 65
    a64e:	c7 01       	movw	r24, r14
    a650:	b6 01       	movw	r22, r12
    a652:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a656:	1b 01       	movw	r2, r22
    a658:	2c 01       	movw	r4, r24
    a65a:	b3 01       	movw	r22, r6
    a65c:	60 52       	subi	r22, 0x20	; 32
    a65e:	7f 4f       	sbci	r23, 0xFF	; 255
    a660:	80 e0       	ldi	r24, 0x00	; 0
    a662:	90 e0       	ldi	r25, 0x00	; 0
    a664:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a668:	9b 01       	movw	r18, r22
    a66a:	ac 01       	movw	r20, r24
    a66c:	c2 01       	movw	r24, r4
    a66e:	b1 01       	movw	r22, r2
    a670:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    a674:	18 16       	cp	r1, r24
    a676:	c4 f2       	brlt	.-80     	; 0xa628 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    a678:	41 e0       	ldi	r20, 0x01	; 1
    a67a:	61 e0       	ldi	r22, 0x01	; 1
    a67c:	8e 85       	ldd	r24, Y+14	; 0x0e
    a67e:	9f 85       	ldd	r25, Y+15	; 0x0f
    a680:	0e 94 3a 4f 	call	0x9e74	; 0x9e74 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    a684:	81 11       	cpse	r24, r1
    a686:	d0 cf       	rjmp	.-96     	; 0xa628 <animate_shot+0x148>
    a688:	87 e6       	ldi	r24, 0x67	; 103
    a68a:	28 2e       	mov	r2, r24
    a68c:	8e e0       	ldi	r24, 0x0E	; 14
    a68e:	38 2e       	mov	r3, r24
    a690:	61 2c       	mov	r6, r1
    a692:	71 2c       	mov	r7, r1
    a694:	24 01       	movw	r4, r8
    a696:	f1 e0       	ldi	r31, 0x01	; 1
    a698:	4f 1a       	sub	r4, r31
    a69a:	51 08       	sbc	r5, r1
    a69c:	f1 01       	movw	r30, r2
    a69e:	38 97       	sbiw	r30, 0x08	; 8
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a6a0:	80 81       	ld	r24, Z
    a6a2:	88 23       	and	r24, r24
    a6a4:	09 f4       	brne	.+2      	; 0xa6a8 <animate_shot+0x1c8>
    a6a6:	82 c0       	rjmp	.+260    	; 0xa7ac <animate_shot+0x2cc>
    a6a8:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    a6aa:	a0 80       	ld	r10, Z
    a6ac:	aa 0c       	add	r10, r10
    a6ae:	aa 0c       	add	r10, r10
    a6b0:	aa 0c       	add	r10, r10
    a6b2:	31 97       	sbiw	r30, 0x01	; 1
    a6b4:	c0 80       	ld	r12, Z
    a6b6:	cc 0c       	add	r12, r12
    a6b8:	cc 0c       	add	r12, r12
    a6ba:	cc 0c       	add	r12, r12
    a6bc:	3a 97       	sbiw	r30, 0x0a	; 10
    a6be:	60 81       	ld	r22, Z
    a6c0:	71 81       	ldd	r23, Z+1	; 0x01
    a6c2:	82 81       	ldd	r24, Z+2	; 0x02
    a6c4:	93 81       	ldd	r25, Z+3	; 0x03
    a6c6:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a6ca:	6a 83       	std	Y+2, r22	; 0x02
    a6cc:	7b 83       	std	Y+3, r23	; 0x03
    a6ce:	8c 83       	std	Y+4, r24	; 0x04
    a6d0:	9d 83       	std	Y+5, r25	; 0x05
    a6d2:	f1 01       	movw	r30, r2
    a6d4:	73 97       	sbiw	r30, 0x13	; 19
    a6d6:	60 81       	ld	r22, Z
    a6d8:	71 81       	ldd	r23, Z+1	; 0x01
    a6da:	82 81       	ldd	r24, Z+2	; 0x02
    a6dc:	93 81       	ldd	r25, Z+3	; 0x03
    a6de:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a6e2:	6e 83       	std	Y+6, r22	; 0x06
    a6e4:	7f 83       	std	Y+7, r23	; 0x07
    a6e6:	88 87       	std	Y+8, r24	; 0x08
    a6e8:	99 87       	std	Y+9, r25	; 0x09
    a6ea:	ee 85       	ldd	r30, Y+14	; 0x0e
    a6ec:	ff 85       	ldd	r31, Y+15	; 0x0f
    a6ee:	60 85       	ldd	r22, Z+8	; 0x08
    a6f0:	71 85       	ldd	r23, Z+9	; 0x09
    a6f2:	82 85       	ldd	r24, Z+10	; 0x0a
    a6f4:	93 85       	ldd	r25, Z+11	; 0x0b
    a6f6:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a6fa:	6a 87       	std	Y+10, r22	; 0x0a
    a6fc:	7b 87       	std	Y+11, r23	; 0x0b
    a6fe:	8c 87       	std	Y+12, r24	; 0x0c
    a700:	9d 87       	std	Y+13, r25	; 0x0d
    a702:	ee 85       	ldd	r30, Y+14	; 0x0e
    a704:	ff 85       	ldd	r31, Y+15	; 0x0f
    a706:	64 81       	ldd	r22, Z+4	; 0x04
    a708:	75 81       	ldd	r23, Z+5	; 0x05
    a70a:	86 81       	ldd	r24, Z+6	; 0x06
    a70c:	97 81       	ldd	r25, Z+7	; 0x07
    a70e:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a712:	dc 01       	movw	r26, r24
    a714:	cb 01       	movw	r24, r22
    a716:	ea 80       	ldd	r14, Y+2	; 0x02
    a718:	fb 80       	ldd	r15, Y+3	; 0x03
    a71a:	0e 81       	ldd	r16, Y+6	; 0x06
    a71c:	1f 81       	ldd	r17, Y+7	; 0x07
    a71e:	28 e0       	ldi	r18, 0x08	; 8
    a720:	48 e0       	ldi	r20, 0x08	; 8
    a722:	6a 85       	ldd	r22, Y+10	; 0x0a
    a724:	7b 85       	ldd	r23, Y+11	; 0x0b
    a726:	0e 94 c3 47 	call	0x8f86	; 0x8f86 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    a72a:	88 23       	and	r24, r24
    a72c:	09 f4       	brne	.+2      	; 0xa730 <animate_shot+0x250>
    a72e:	3e c0       	rjmp	.+124    	; 0xa7ac <animate_shot+0x2cc>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    a730:	41 e0       	ldi	r20, 0x01	; 1
    a732:	6f ef       	ldi	r22, 0xFF	; 255
    a734:	84 e0       	ldi	r24, 0x04	; 4
    a736:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    a73a:	f1 01       	movw	r30, r2
    a73c:	80 81       	ld	r24, Z
    a73e:	f2 01       	movw	r30, r4
    a740:	90 81       	ld	r25, Z
    a742:	89 1b       	sub	r24, r25
    a744:	f1 01       	movw	r30, r2
    a746:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    a748:	18 16       	cp	r1, r24
    a74a:	14 f1       	brlt	.+68     	; 0xa790 <animate_shot+0x2b0>
						{
							SFX_ENEMY_EXPLODE;
    a74c:	41 e0       	ldi	r20, 0x01	; 1
    a74e:	6f ef       	ldi	r22, 0xFF	; 255
    a750:	86 e0       	ldi	r24, 0x06	; 6
    a752:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    a756:	f2 e4       	ldi	r31, 0x42	; 66
    a758:	f6 9d       	mul	r31, r6
    a75a:	c0 01       	movw	r24, r0
    a75c:	f7 9d       	mul	r31, r7
    a75e:	90 0d       	add	r25, r0
    a760:	11 24       	eor	r1, r1
    a762:	89 55       	subi	r24, 0x59	; 89
    a764:	92 4f       	sbci	r25, 0xF2	; 242
    a766:	fc 01       	movw	r30, r24
    a768:	e7 54       	subi	r30, 0x47	; 71
    a76a:	ff 4f       	sbci	r31, 0xFF	; 255
    a76c:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    a76e:	31 97       	sbiw	r30, 0x01	; 1
    a770:	10 82       	st	Z, r1
							game.active_enemies--;
    a772:	80 91 c1 0d 	lds	r24, 0x0DC1
    a776:	81 50       	subi	r24, 0x01	; 1
    a778:	80 93 c1 0d 	sts	0x0DC1, r24
							game.score += KILL_SCORE;
    a77c:	80 91 af 0d 	lds	r24, 0x0DAF
    a780:	90 91 b0 0d 	lds	r25, 0x0DB0
    a784:	0a 96       	adiw	r24, 0x0a	; 10
    a786:	90 93 b0 0d 	sts	0x0DB0, r25
    a78a:	80 93 af 0d 	sts	0x0DAF, r24
							break;
    a78e:	19 c0       	rjmp	.+50     	; 0xa7c2 <animate_shot+0x2e2>
						}
						game.player.shot[i].active = 0;
    a790:	f4 01       	movw	r30, r8
    a792:	10 82       	st	Z, r1
						game.player.active_shots--;
    a794:	80 91 d3 0d 	lds	r24, 0x0DD3
    a798:	81 50       	subi	r24, 0x01	; 1
    a79a:	80 93 d3 0d 	sts	0x0DD3, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    a79e:	01 e0       	ldi	r16, 0x01	; 1
    a7a0:	21 e0       	ldi	r18, 0x01	; 1
    a7a2:	40 e0       	ldi	r20, 0x00	; 0
    a7a4:	60 ee       	ldi	r22, 0xE0	; 224
    a7a6:	89 81       	ldd	r24, Y+1	; 0x01
    a7a8:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
    a7ac:	ff ef       	ldi	r31, 0xFF	; 255
    a7ae:	6f 1a       	sub	r6, r31
    a7b0:	7f 0a       	sbc	r7, r31
    a7b2:	22 e4       	ldi	r18, 0x42	; 66
    a7b4:	22 0e       	add	r2, r18
    a7b6:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    a7b8:	85 e0       	ldi	r24, 0x05	; 5
    a7ba:	68 16       	cp	r6, r24
    a7bc:	71 04       	cpc	r7, r1
    a7be:	09 f0       	breq	.+2      	; 0xa7c2 <animate_shot+0x2e2>
    a7c0:	6d cf       	rjmp	.-294    	; 0xa69c <animate_shot+0x1bc>
    a7c2:	9a e1       	ldi	r25, 0x1A	; 26
    a7c4:	89 0e       	add	r8, r25
    a7c6:	91 1c       	adc	r9, r1
    a7c8:	e9 81       	ldd	r30, Y+1	; 0x01
    a7ca:	ef 5f       	subi	r30, 0xFF	; 255
    a7cc:	e9 83       	std	Y+1, r30	; 0x01
    a7ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    a7d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    a7d2:	4a 96       	adiw	r24, 0x1a	; 26
    a7d4:	9f 87       	std	Y+15, r25	; 0x0f
    a7d6:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    a7d8:	ee 30       	cpi	r30, 0x0E	; 14
    a7da:	09 f0       	breq	.+2      	; 0xa7de <animate_shot+0x2fe>
    a7dc:	a7 ce       	rjmp	.-690    	; 0xa52c <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    a7de:	2f 96       	adiw	r28, 0x0f	; 15
    a7e0:	0f b6       	in	r0, 0x3f	; 63
    a7e2:	f8 94       	cli
    a7e4:	de bf       	out	0x3e, r29	; 62
    a7e6:	0f be       	out	0x3f, r0	; 63
    a7e8:	cd bf       	out	0x3d, r28	; 61
    a7ea:	df 91       	pop	r29
    a7ec:	cf 91       	pop	r28
    a7ee:	1f 91       	pop	r17
    a7f0:	0f 91       	pop	r16
    a7f2:	ff 90       	pop	r15
    a7f4:	ef 90       	pop	r14
    a7f6:	df 90       	pop	r13
    a7f8:	cf 90       	pop	r12
    a7fa:	bf 90       	pop	r11
    a7fc:	af 90       	pop	r10
    a7fe:	9f 90       	pop	r9
    a800:	8f 90       	pop	r8
    a802:	7f 90       	pop	r7
    a804:	6f 90       	pop	r6
    a806:	5f 90       	pop	r5
    a808:	4f 90       	pop	r4
    a80a:	3f 90       	pop	r3
    a80c:	2f 90       	pop	r2
    a80e:	08 95       	ret

0000a810 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    a810:	7f 92       	push	r7
    a812:	8f 92       	push	r8
    a814:	9f 92       	push	r9
    a816:	af 92       	push	r10
    a818:	bf 92       	push	r11
    a81a:	cf 92       	push	r12
    a81c:	df 92       	push	r13
    a81e:	ef 92       	push	r14
    a820:	ff 92       	push	r15
    a822:	0f 93       	push	r16
    a824:	1f 93       	push	r17
    a826:	cf 93       	push	r28
    a828:	df 93       	push	r29
    a82a:	1f 92       	push	r1
    a82c:	cd b7       	in	r28, 0x3d	; 61
    a82e:	de b7       	in	r29, 0x3e	; 62
    a830:	6c 01       	movw	r12, r24
    a832:	7b 01       	movw	r14, r22
    a834:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    a836:	cb 01       	movw	r24, r22
    a838:	29 83       	std	Y+1, r18	; 0x01
    a83a:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    a83e:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    a840:	29 81       	ldd	r18, Y+1	; 0x01
    a842:	20 9f       	mul	r18, r16
    a844:	50 01       	movw	r10, r0
    a846:	11 24       	eor	r1, r1
    a848:	10 e0       	ldi	r17, 0x00	; 0
    a84a:	81 2f       	mov	r24, r17
    a84c:	90 e0       	ldi	r25, 0x00	; 0
    a84e:	8a 15       	cp	r24, r10
    a850:	9b 05       	cpc	r25, r11
    a852:	54 f4       	brge	.+20     	; 0xa868 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    a854:	40 e0       	ldi	r20, 0x00	; 0
    a856:	b4 01       	movw	r22, r8
    a858:	81 2f       	mov	r24, r17
    a85a:	87 0d       	add	r24, r7
    a85c:	29 83       	std	Y+1, r18	; 0x01
    a85e:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    a862:	1f 5f       	subi	r17, 0xFF	; 255
    a864:	29 81       	ldd	r18, Y+1	; 0x01
    a866:	f1 cf       	rjmp	.-30     	; 0xa84a <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    a868:	f7 01       	movw	r30, r14
    a86a:	84 81       	ldd	r24, Z+4	; 0x04
    a86c:	88 23       	and	r24, r24
    a86e:	51 f0       	breq	.+20     	; 0xa884 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    a870:	f6 01       	movw	r30, r12
    a872:	80 81       	ld	r24, Z
    a874:	90 e1       	ldi	r25, 0x10	; 16
    a876:	98 27       	eor	r25, r24
    a878:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    a87a:	40 e0       	ldi	r20, 0x00	; 0
    a87c:	60 ee       	ldi	r22, 0xE0	; 224
    a87e:	87 2d       	mov	r24, r7
    a880:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	}
	return anim->looped;
}
    a884:	f7 01       	movw	r30, r14
    a886:	84 81       	ldd	r24, Z+4	; 0x04
    a888:	0f 90       	pop	r0
    a88a:	df 91       	pop	r29
    a88c:	cf 91       	pop	r28
    a88e:	1f 91       	pop	r17
    a890:	0f 91       	pop	r16
    a892:	ff 90       	pop	r15
    a894:	ef 90       	pop	r14
    a896:	df 90       	pop	r13
    a898:	cf 90       	pop	r12
    a89a:	bf 90       	pop	r11
    a89c:	af 90       	pop	r10
    a89e:	9f 90       	pop	r9
    a8a0:	8f 90       	pop	r8
    a8a2:	7f 90       	pop	r7
    a8a4:	08 95       	ret

0000a8a6 <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    a8a6:	8f 92       	push	r8
    a8a8:	9f 92       	push	r9
    a8aa:	af 92       	push	r10
    a8ac:	bf 92       	push	r11
    a8ae:	ff 92       	push	r15
    a8b0:	0f 93       	push	r16
    a8b2:	1f 93       	push	r17
    a8b4:	cf 93       	push	r28
    a8b6:	df 93       	push	r29
    a8b8:	ec 01       	movw	r28, r24
    a8ba:	f6 2e       	mov	r15, r22
    a8bc:	14 2f       	mov	r17, r20
    a8be:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a8c0:	6e 85       	ldd	r22, Y+14	; 0x0e
    a8c2:	70 e0       	ldi	r23, 0x00	; 0
    a8c4:	80 e0       	ldi	r24, 0x00	; 0
    a8c6:	90 e0       	ldi	r25, 0x00	; 0
    a8c8:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    a8cc:	29 e8       	ldi	r18, 0x89	; 137
    a8ce:	38 e8       	ldi	r19, 0x88	; 136
    a8d0:	48 e8       	ldi	r20, 0x88	; 136
    a8d2:	5c e3       	ldi	r21, 0x3C	; 60
    a8d4:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a8d8:	28 81       	ld	r18, Y
    a8da:	39 81       	ldd	r19, Y+1	; 0x01
    a8dc:	4a 81       	ldd	r20, Y+2	; 0x02
    a8de:	5b 81       	ldd	r21, Y+3	; 0x03
    a8e0:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a8e4:	4b 01       	movw	r8, r22
    a8e6:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a8e8:	20 e0       	ldi	r18, 0x00	; 0
    a8ea:	30 e0       	ldi	r19, 0x00	; 0
    a8ec:	40 ef       	ldi	r20, 0xF0	; 240
    a8ee:	52 e4       	ldi	r21, 0x42	; 66
    a8f0:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    a8f4:	18 16       	cp	r1, r24
    a8f6:	2c f0       	brlt	.+10     	; 0xa902 <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    a8f8:	88 82       	st	Y, r8
    a8fa:	99 82       	std	Y+1, r9	; 0x01
    a8fc:	aa 82       	std	Y+2, r10	; 0x02
    a8fe:	bb 82       	std	Y+3, r11	; 0x03
    a900:	08 c0       	rjmp	.+16     	; 0xa912 <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    a902:	80 e0       	ldi	r24, 0x00	; 0
    a904:	90 e0       	ldi	r25, 0x00	; 0
    a906:	a0 ef       	ldi	r26, 0xF0	; 240
    a908:	b2 e4       	ldi	r27, 0x42	; 66
    a90a:	88 83       	st	Y, r24
    a90c:	99 83       	std	Y+1, r25	; 0x01
    a90e:	aa 83       	std	Y+2, r26	; 0x02
    a910:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    a912:	6c 85       	ldd	r22, Y+12	; 0x0c
    a914:	7d 85       	ldd	r23, Y+13	; 0x0d
    a916:	88 27       	eor	r24, r24
    a918:	77 fd       	sbrc	r23, 7
    a91a:	80 95       	com	r24
    a91c:	98 2f       	mov	r25, r24
    a91e:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    a922:	29 e8       	ldi	r18, 0x89	; 137
    a924:	38 e8       	ldi	r19, 0x88	; 136
    a926:	48 e8       	ldi	r20, 0x88	; 136
    a928:	5c e3       	ldi	r21, 0x3C	; 60
    a92a:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a92e:	9b 01       	movw	r18, r22
    a930:	ac 01       	movw	r20, r24
    a932:	6c 81       	ldd	r22, Y+4	; 0x04
    a934:	7d 81       	ldd	r23, Y+5	; 0x05
    a936:	8e 81       	ldd	r24, Y+6	; 0x06
    a938:	9f 81       	ldd	r25, Y+7	; 0x07
    a93a:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a93e:	6c 83       	std	Y+4, r22	; 0x04
    a940:	7d 83       	std	Y+5, r23	; 0x05
    a942:	8e 83       	std	Y+6, r24	; 0x06
    a944:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    a946:	29 e8       	ldi	r18, 0x89	; 137
    a948:	38 e8       	ldi	r19, 0x88	; 136
    a94a:	48 e8       	ldi	r20, 0x88	; 136
    a94c:	5c e3       	ldi	r21, 0x3C	; 60
    a94e:	68 81       	ld	r22, Y
    a950:	79 81       	ldd	r23, Y+1	; 0x01
    a952:	8a 81       	ldd	r24, Y+2	; 0x02
    a954:	9b 81       	ldd	r25, Y+3	; 0x03
    a956:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    a95a:	9b 01       	movw	r18, r22
    a95c:	ac 01       	movw	r20, r24
    a95e:	68 85       	ldd	r22, Y+8	; 0x08
    a960:	79 85       	ldd	r23, Y+9	; 0x09
    a962:	8a 85       	ldd	r24, Y+10	; 0x0a
    a964:	9b 85       	ldd	r25, Y+11	; 0x0b
    a966:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    a96a:	68 87       	std	Y+8, r22	; 0x08
    a96c:	79 87       	std	Y+9, r23	; 0x09
    a96e:	8a 87       	std	Y+10, r24	; 0x0a
    a970:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    a972:	40 2f       	mov	r20, r16
    a974:	61 2f       	mov	r22, r17
    a976:	ce 01       	movw	r24, r28
    a978:	0e 94 3a 4f 	call	0x9e74	; 0x9e74 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    a97c:	e0 91 ad 0d 	lds	r30, 0x0DAD
    a980:	f0 91 ae 0d 	lds	r31, 0x0DAE
    a984:	bf 01       	movw	r22, r30
    a986:	80 e0       	ldi	r24, 0x00	; 0
    a988:	90 e0       	ldi	r25, 0x00	; 0
    a98a:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a98e:	9b 01       	movw	r18, r22
    a990:	ac 01       	movw	r20, r24
    a992:	68 85       	ldd	r22, Y+8	; 0x08
    a994:	79 85       	ldd	r23, Y+9	; 0x09
    a996:	8a 85       	ldd	r24, Y+10	; 0x0a
    a998:	9b 85       	ldd	r25, Y+11	; 0x0b
    a99a:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a99e:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a9a2:	b6 2e       	mov	r11, r22
    a9a4:	e0 91 ab 0d 	lds	r30, 0x0DAB
    a9a8:	f0 91 ac 0d 	lds	r31, 0x0DAC
    a9ac:	bf 01       	movw	r22, r30
    a9ae:	80 e0       	ldi	r24, 0x00	; 0
    a9b0:	90 e0       	ldi	r25, 0x00	; 0
    a9b2:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    a9b6:	9b 01       	movw	r18, r22
    a9b8:	ac 01       	movw	r20, r24
    a9ba:	6c 81       	ldd	r22, Y+4	; 0x04
    a9bc:	7d 81       	ldd	r23, Y+5	; 0x05
    a9be:	8e 81       	ldd	r24, Y+6	; 0x06
    a9c0:	9f 81       	ldd	r25, Y+7	; 0x07
    a9c2:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    a9c6:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    a9ca:	21 2f       	mov	r18, r17
    a9cc:	4b 2d       	mov	r20, r11
    a9ce:	8f 2d       	mov	r24, r15
    a9d0:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
}
    a9d4:	df 91       	pop	r29
    a9d6:	cf 91       	pop	r28
    a9d8:	1f 91       	pop	r17
    a9da:	0f 91       	pop	r16
    a9dc:	ff 90       	pop	r15
    a9de:	bf 90       	pop	r11
    a9e0:	af 90       	pop	r10
    a9e2:	9f 90       	pop	r9
    a9e4:	8f 90       	pop	r8
    a9e6:	08 95       	ret

0000a9e8 <animate_player>:

void animate_player()
{
    a9e8:	0f 93       	push	r16
    a9ea:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    a9ec:	80 91 d4 0d 	lds	r24, 0x0DD4
    a9f0:	84 ff       	sbrs	r24, 4
    a9f2:	38 c0       	rjmp	.+112    	; 0xaa64 <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    a9f4:	60 91 ad 0d 	lds	r22, 0x0DAD
    a9f8:	70 91 ae 0d 	lds	r23, 0x0DAE
    a9fc:	80 e0       	ldi	r24, 0x00	; 0
    a9fe:	90 e0       	ldi	r25, 0x00	; 0
    aa00:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    aa04:	9b 01       	movw	r18, r22
    aa06:	ac 01       	movw	r20, r24
    aa08:	60 91 cc 0d 	lds	r22, 0x0DCC
    aa0c:	70 91 cd 0d 	lds	r23, 0x0DCD
    aa10:	80 91 ce 0d 	lds	r24, 0x0DCE
    aa14:	90 91 cf 0d 	lds	r25, 0x0DCF
    aa18:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    aa1c:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    aa20:	c6 2f       	mov	r28, r22
    aa22:	60 91 ab 0d 	lds	r22, 0x0DAB
    aa26:	70 91 ac 0d 	lds	r23, 0x0DAC
    aa2a:	80 e0       	ldi	r24, 0x00	; 0
    aa2c:	90 e0       	ldi	r25, 0x00	; 0
    aa2e:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    aa32:	9b 01       	movw	r18, r22
    aa34:	ac 01       	movw	r20, r24
    aa36:	60 91 c8 0d 	lds	r22, 0x0DC8
    aa3a:	70 91 c9 0d 	lds	r23, 0x0DC9
    aa3e:	80 91 ca 0d 	lds	r24, 0x0DCA
    aa42:	90 91 cb 0d 	lds	r25, 0x0DCB
    aa46:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    aa4a:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    aa4e:	00 91 d8 0d 	lds	r16, 0x0DD8
    aa52:	20 91 d7 0d 	lds	r18, 0x0DD7
    aa56:	4c 2f       	mov	r20, r28
    aa58:	80 e0       	ldi	r24, 0x00	; 0
    aa5a:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    aa5e:	cf 91       	pop	r28
    aa60:	0f 91       	pop	r16
    aa62:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    aa64:	20 91 d8 0d 	lds	r18, 0x0DD8
    aa68:	40 91 d7 0d 	lds	r20, 0x0DD7
    aa6c:	60 e0       	ldi	r22, 0x00	; 0
    aa6e:	84 ec       	ldi	r24, 0xC4	; 196
    aa70:	9d e0       	ldi	r25, 0x0D	; 13
}
    aa72:	cf 91       	pop	r28
    aa74:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    aa76:	0c 94 53 54 	jmp	0xa8a6	; 0xa8a6 <animate_sprite>

0000aa7a <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    aa7a:	1f 93       	push	r17
    aa7c:	cf 93       	push	r28
    aa7e:	df 93       	push	r29
    aa80:	ec 01       	movw	r28, r24
    aa82:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    aa84:	98 89       	ldd	r25, Y+16	; 0x10
    aa86:	89 2f       	mov	r24, r25
    aa88:	88 70       	andi	r24, 0x08	; 8
    aa8a:	93 ff       	sbrs	r25, 3
    aa8c:	1e c0       	rjmp	.+60     	; 0xaaca <update_spider_enemy+0x50>
    aa8e:	2d 89       	ldd	r18, Y+21	; 0x15
    aa90:	20 38       	cpi	r18, 0x80	; 128
    aa92:	d9 f4       	brne	.+54     	; 0xaaca <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    aa94:	81 e0       	ldi	r24, 0x01	; 1
    aa96:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    aa98:	80 e0       	ldi	r24, 0x00	; 0
    aa9a:	90 e0       	ldi	r25, 0x00	; 0
    aa9c:	a8 ec       	ldi	r26, 0xC8	; 200
    aa9e:	b2 ec       	ldi	r27, 0xC2	; 194
    aaa0:	88 83       	st	Y, r24
    aaa2:	99 83       	std	Y+1, r25	; 0x01
    aaa4:	aa 83       	std	Y+2, r26	; 0x02
    aaa6:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    aaa8:	8f ef       	ldi	r24, 0xFF	; 255
    aaaa:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    aaac:	8c e3       	ldi	r24, 0x3C	; 60
    aaae:	90 e0       	ldi	r25, 0x00	; 0
    aab0:	9d 87       	std	Y+13, r25	; 0x0d
    aab2:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    aab4:	89 89       	ldd	r24, Y+17	; 0x11
    aab6:	81 11       	cpse	r24, r1
    aab8:	04 c0       	rjmp	.+8      	; 0xaac2 <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    aaba:	84 ec       	ldi	r24, 0xC4	; 196
    aabc:	9f ef       	ldi	r25, 0xFF	; 255
    aabe:	9d 87       	std	Y+13, r25	; 0x0d
    aac0:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    aac2:	40 e0       	ldi	r20, 0x00	; 0
    aac4:	6e e3       	ldi	r22, 0x3E	; 62
    aac6:	7d e2       	ldi	r23, 0x2D	; 45
    aac8:	1a c0       	rjmp	.+52     	; 0xaafe <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    aaca:	90 ff       	sbrs	r25, 0
    aacc:	10 c0       	rjmp	.+32     	; 0xaaee <update_spider_enemy+0x74>
    aace:	9e 85       	ldd	r25, Y+14	; 0x0e
    aad0:	91 11       	cpse	r25, r1
    aad2:	0d c0       	rjmp	.+26     	; 0xaaee <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    aad4:	88 e0       	ldi	r24, 0x08	; 8
    aad6:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    aad8:	1d 86       	std	Y+13, r1	; 0x0d
    aada:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    aadc:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    aade:	89 89       	ldd	r24, Y+17	; 0x11
    aae0:	81 11       	cpse	r24, r1
    aae2:	03 c0       	rjmp	.+6      	; 0xaaea <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    aae4:	81 e0       	ldi	r24, 0x01	; 1
    aae6:	89 8b       	std	Y+17, r24	; 0x11
    aae8:	0d c0       	rjmp	.+26     	; 0xab04 <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    aaea:	19 8a       	std	Y+17, r1	; 0x11
    aaec:	0b c0       	rjmp	.+22     	; 0xab04 <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    aaee:	88 23       	and	r24, r24
    aaf0:	49 f0       	breq	.+18     	; 0xab04 <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    aaf2:	ce 01       	movw	r24, r28
    aaf4:	c2 96       	adiw	r24, 0x32	; 50
    aaf6:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    aafa:	40 e0       	ldi	r20, 0x00	; 0
    aafc:	bc 01       	movw	r22, r24
    aafe:	81 2f       	mov	r24, r17
    ab00:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	}
	e->frame_count++;
    ab04:	8d 89       	ldd	r24, Y+21	; 0x15
    ab06:	8f 5f       	subi	r24, 0xFF	; 255
    ab08:	8d 8b       	std	Y+21, r24	; 0x15
}
    ab0a:	df 91       	pop	r29
    ab0c:	cf 91       	pop	r28
    ab0e:	1f 91       	pop	r17
    ab10:	08 95       	ret

0000ab12 <update_shark_enemy>:

void update_shark_enemy(Enemy* e, u8 slot)
{
    ab12:	cf 93       	push	r28
    ab14:	fc 01       	movw	r30, r24
    ab16:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    ab18:	84 e1       	ldi	r24, 0x14	; 20
    ab1a:	90 e0       	ldi	r25, 0x00	; 0
    ab1c:	95 87       	std	Z+13, r25	; 0x0d
    ab1e:	84 87       	std	Z+12, r24	; 0x0c
	e->shared.vy = 0;
    ab20:	10 82       	st	Z, r1
    ab22:	11 82       	std	Z+1, r1	; 0x01
    ab24:	12 82       	std	Z+2, r1	; 0x02
    ab26:	13 82       	std	Z+3, r1	; 0x03
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ab28:	cf 01       	movw	r24, r30
    ab2a:	c2 96       	adiw	r24, 0x32	; 50
    ab2c:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    ab30:	40 e0       	ldi	r20, 0x00	; 0
    ab32:	bc 01       	movw	r22, r24
    ab34:	8c 2f       	mov	r24, r28
}
    ab36:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ab38:	0c 94 2d 48 	jmp	0x905a	; 0x905a <LBMapSprite>

0000ab3c <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    ab3c:	cf 93       	push	r28
    ab3e:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    ab40:	42 96       	adiw	r24, 0x12	; 18
    ab42:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    ab46:	40 e0       	ldi	r20, 0x00	; 0
    ab48:	bc 01       	movw	r22, r24
    ab4a:	8c 2f       	mov	r24, r28
}
    ab4c:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    ab4e:	0c 94 2d 48 	jmp	0x905a	; 0x905a <LBMapSprite>

0000ab52 <update_enemies>:
}

void update_enemies()
{
    ab52:	ef 92       	push	r14
    ab54:	ff 92       	push	r15
    ab56:	0f 93       	push	r16
    ab58:	1f 93       	push	r17
    ab5a:	cf 93       	push	r28
    ab5c:	df 93       	push	r29
    ab5e:	c3 e6       	ldi	r28, 0x63	; 99
    ab60:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    ab62:	16 e0       	ldi	r17, 0x06	; 6
    ab64:	ce 01       	movw	r24, r28
    ab66:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    ab68:	fc 01       	movw	r30, r24
    ab6a:	20 81       	ld	r18, Z
    ab6c:	ae 01       	movw	r20, r28
    ab6e:	41 50       	subi	r20, 0x01	; 1
    ab70:	51 09       	sbc	r21, r1
    ab72:	7a 01       	movw	r14, r20
    ab74:	24 ff       	sbrs	r18, 4
    ab76:	0a c0       	rjmp	.+20     	; 0xab8c <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    ab78:	08 81       	ld	r16, Y
    ab7a:	fa 01       	movw	r30, r20
    ab7c:	20 81       	ld	r18, Z
    ab7e:	41 2f       	mov	r20, r17
    ab80:	be 01       	movw	r22, r28
    ab82:	69 5d       	subi	r22, 0xD9	; 217
    ab84:	7f 4f       	sbci	r23, 0xFF	; 255
    ab86:	0e 94 08 54 	call	0xa810	; 0xa810 <map_explosion>
    ab8a:	15 c0       	rjmp	.+42     	; 0xabb6 <update_enemies+0x64>
    ab8c:	fe 01       	movw	r30, r28
    ab8e:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    ab90:	80 81       	ld	r24, Z
    ab92:	88 23       	and	r24, r24
    ab94:	81 f0       	breq	.+32     	; 0xabb6 <update_enemies+0x64>
		{
			switch (game.enemies[i].enemy_type)
    ab96:	89 81       	ldd	r24, Y+1	; 0x01
    ab98:	88 23       	and	r24, r24
    ab9a:	41 f0       	breq	.+16     	; 0xabac <update_enemies+0x5a>
    ab9c:	81 30       	cpi	r24, 0x01	; 1
    ab9e:	59 f4       	brne	.+22     	; 0xabb6 <update_enemies+0x64>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    aba0:	61 2f       	mov	r22, r17
    aba2:	ce 01       	movw	r24, r28
    aba4:	43 97       	sbiw	r24, 0x13	; 19
    aba6:	0e 94 89 55 	call	0xab12	; 0xab12 <update_shark_enemy>
    abaa:	05 c0       	rjmp	.+10     	; 0xabb6 <update_enemies+0x64>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    abac:	61 2f       	mov	r22, r17
    abae:	ce 01       	movw	r24, r28
    abb0:	43 97       	sbiw	r24, 0x13	; 19
    abb2:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <update_spider_enemy>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    abb6:	f7 01       	movw	r30, r14
    abb8:	90 81       	ld	r25, Z
    abba:	88 81       	ld	r24, Y
    abbc:	98 9f       	mul	r25, r24
    abbe:	10 0d       	add	r17, r0
    abc0:	11 24       	eor	r1, r1
    abc2:	ce 5b       	subi	r28, 0xBE	; 190
    abc4:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    abc6:	ff e0       	ldi	r31, 0x0F	; 15
    abc8:	cd 3a       	cpi	r28, 0xAD	; 173
    abca:	df 07       	cpc	r29, r31
    abcc:	59 f6       	brne	.-106    	; 0xab64 <update_enemies+0x12>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    abce:	df 91       	pop	r29
    abd0:	cf 91       	pop	r28
    abd2:	1f 91       	pop	r17
    abd4:	0f 91       	pop	r16
    abd6:	ff 90       	pop	r15
    abd8:	ef 90       	pop	r14
    abda:	08 95       	ret

0000abdc <update_enemy_shots>:

void update_enemy_shots()
{
    abdc:	8f 92       	push	r8
    abde:	9f 92       	push	r9
    abe0:	af 92       	push	r10
    abe2:	bf 92       	push	r11
    abe4:	cf 92       	push	r12
    abe6:	df 92       	push	r13
    abe8:	ef 92       	push	r14
    abea:	ff 92       	push	r15
    abec:	0f 93       	push	r16
    abee:	1f 93       	push	r17
    abf0:	cf 93       	push	r28
    abf2:	df 93       	push	r29
    abf4:	00 d0       	rcall	.+0      	; 0xabf6 <update_enemy_shots+0x1a>
    abf6:	00 d0       	rcall	.+0      	; 0xabf8 <update_enemy_shots+0x1c>
    abf8:	cd b7       	in	r28, 0x3d	; 61
    abfa:	de b7       	in	r29, 0x3e	; 62
    abfc:	26 e6       	ldi	r18, 0x66	; 102
    abfe:	82 2e       	mov	r8, r18
    ac00:	2e e0       	ldi	r18, 0x0E	; 14
    ac02:	92 2e       	mov	r9, r18
    ac04:	09 e7       	ldi	r16, 0x79	; 121
    ac06:	1e e0       	ldi	r17, 0x0E	; 14
    ac08:	3f e0       	ldi	r19, 0x0F	; 15
    ac0a:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    ac0c:	44 e6       	ldi	r20, 0x64	; 100
    ac0e:	e4 2e       	mov	r14, r20
    ac10:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    ac12:	5c e9       	ldi	r21, 0x9C	; 156
    ac14:	c5 2e       	mov	r12, r21
    ac16:	dd 24       	eor	r13, r13
    ac18:	da 94       	dec	r13
    ac1a:	aa 24       	eor	r10, r10
    ac1c:	aa 94       	dec	r10
    ac1e:	ab 0c       	add	r10, r11
    ac20:	f4 01       	movw	r30, r8
    ac22:	37 97       	sbiw	r30, 0x07	; 7
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    ac24:	80 81       	ld	r24, Z
    ac26:	88 23       	and	r24, r24
    ac28:	09 f4       	brne	.+2      	; 0xac2c <update_enemy_shots+0x50>
    ac2a:	58 c0       	rjmp	.+176    	; 0xacdc <update_enemy_shots+0x100>
    ac2c:	f4 01       	movw	r30, r8
    ac2e:	80 81       	ld	r24, Z
    ac30:	8c 33       	cpi	r24, 0x3C	; 60
    ac32:	08 f4       	brcc	.+2      	; 0xac36 <update_enemy_shots+0x5a>
    ac34:	50 c0       	rjmp	.+160    	; 0xacd6 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    ac36:	10 82       	st	Z, r1
    ac38:	f8 01       	movw	r30, r16
    ac3a:	32 97       	sbiw	r30, 0x02	; 2
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    ac3c:	80 81       	ld	r24, Z
    ac3e:	81 30       	cpi	r24, 0x01	; 1
    ac40:	09 f0       	breq	.+2      	; 0xac44 <update_enemy_shots+0x68>
    ac42:	4c c0       	rjmp	.+152    	; 0xacdc <update_enemy_shots+0x100>
				{
					if (!game.enemies[i].shot[j].active)
    ac44:	f8 01       	movw	r30, r16
    ac46:	90 81       	ld	r25, Z
    ac48:	91 11       	cpse	r25, r1
    ac4a:	3f c0       	rjmp	.+126    	; 0xacca <update_enemy_shots+0xee>
					{
						game.enemies[i].shot[j].active = 1;
    ac4c:	80 83       	st	Z, r24
    ac4e:	f4 01       	movw	r30, r8
    ac50:	72 97       	sbiw	r30, 0x12	; 18
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    ac52:	20 81       	ld	r18, Z
    ac54:	31 81       	ldd	r19, Z+1	; 0x01
    ac56:	42 81       	ldd	r20, Z+2	; 0x02
    ac58:	53 81       	ldd	r21, Z+3	; 0x03
    ac5a:	f4 01       	movw	r30, r8
    ac5c:	26 83       	std	Z+6, r18	; 0x06
    ac5e:	37 83       	std	Z+7, r19	; 0x07
    ac60:	40 87       	std	Z+8, r20	; 0x08
    ac62:	51 87       	std	Z+9, r21	; 0x09
    ac64:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    ac66:	60 81       	ld	r22, Z
    ac68:	71 81       	ldd	r23, Z+1	; 0x01
    ac6a:	82 81       	ldd	r24, Z+2	; 0x02
    ac6c:	93 81       	ldd	r25, Z+3	; 0x03
    ac6e:	29 83       	std	Y+1, r18	; 0x01
    ac70:	3a 83       	std	Y+2, r19	; 0x02
    ac72:	4b 83       	std	Y+3, r20	; 0x03
    ac74:	5c 83       	std	Y+4, r21	; 0x04
    ac76:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    ac7a:	83 e0       	ldi	r24, 0x03	; 3
    ac7c:	76 95       	lsr	r23
    ac7e:	67 95       	ror	r22
    ac80:	8a 95       	dec	r24
    ac82:	e1 f7       	brne	.-8      	; 0xac7c <update_enemy_shots+0xa0>
    ac84:	93 e0       	ldi	r25, 0x03	; 3
    ac86:	66 0f       	add	r22, r22
    ac88:	77 1f       	adc	r23, r23
    ac8a:	9a 95       	dec	r25
    ac8c:	e1 f7       	brne	.-8      	; 0xac86 <update_enemy_shots+0xaa>
    ac8e:	80 e0       	ldi	r24, 0x00	; 0
    ac90:	90 e0       	ldi	r25, 0x00	; 0
    ac92:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    ac96:	f4 01       	movw	r30, r8
    ac98:	62 87       	std	Z+10, r22	; 0x0a
    ac9a:	73 87       	std	Z+11, r23	; 0x0b
    ac9c:	84 87       	std	Z+12, r24	; 0x0c
    ac9e:	95 87       	std	Z+13, r25	; 0x0d
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    aca0:	f7 86       	std	Z+15, r15	; 0x0f
    aca2:	e6 86       	std	Z+14, r14	; 0x0e
						if (game.player.shared.x <= game.enemies[i].shared.x)
    aca4:	29 81       	ldd	r18, Y+1	; 0x01
    aca6:	3a 81       	ldd	r19, Y+2	; 0x02
    aca8:	4b 81       	ldd	r20, Y+3	; 0x03
    acaa:	5c 81       	ldd	r21, Y+4	; 0x04
    acac:	60 91 c8 0d 	lds	r22, 0x0DC8
    acb0:	70 91 c9 0d 	lds	r23, 0x0DC9
    acb4:	80 91 ca 0d 	lds	r24, 0x0DCA
    acb8:	90 91 cb 0d 	lds	r25, 0x0DCB
    acbc:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    acc0:	18 16       	cp	r1, r24
    acc2:	1c f0       	brlt	.+6      	; 0xacca <update_enemy_shots+0xee>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    acc4:	f4 01       	movw	r30, r8
    acc6:	d7 86       	std	Z+15, r13	; 0x0f
    acc8:	c6 86       	std	Z+14, r12	; 0x0e
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    acca:	6a 2d       	mov	r22, r10
    accc:	c4 01       	movw	r24, r8
    acce:	02 96       	adiw	r24, 0x02	; 2
    acd0:	0e 94 9e 55 	call	0xab3c	; 0xab3c <update_basic_shot>
    acd4:	03 c0       	rjmp	.+6      	; 0xacdc <update_enemy_shots+0x100>
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
		{
			game.enemies[i].shot_frame_count++;
    acd6:	8f 5f       	subi	r24, 0xFF	; 255
    acd8:	f4 01       	movw	r30, r8
    acda:	80 83       	st	Z, r24
    acdc:	b3 94       	inc	r11
    acde:	f2 e4       	ldi	r31, 0x42	; 66
    ace0:	8f 0e       	add	r8, r31
    ace2:	91 1c       	adc	r9, r1
    ace4:	0e 5b       	subi	r16, 0xBE	; 190
    ace6:	1f 4f       	sbci	r17, 0xFF	; 255

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ace8:	84 e1       	ldi	r24, 0x14	; 20
    acea:	b8 12       	cpse	r11, r24
    acec:	96 cf       	rjmp	.-212    	; 0xac1a <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    acee:	0f 90       	pop	r0
    acf0:	0f 90       	pop	r0
    acf2:	0f 90       	pop	r0
    acf4:	0f 90       	pop	r0
    acf6:	df 91       	pop	r29
    acf8:	cf 91       	pop	r28
    acfa:	1f 91       	pop	r17
    acfc:	0f 91       	pop	r16
    acfe:	ff 90       	pop	r15
    ad00:	ef 90       	pop	r14
    ad02:	df 90       	pop	r13
    ad04:	cf 90       	pop	r12
    ad06:	bf 90       	pop	r11
    ad08:	af 90       	pop	r10
    ad0a:	9f 90       	pop	r9
    ad0c:	8f 90       	pop	r8
    ad0e:	08 95       	ret

0000ad10 <animate_enemies>:

void animate_enemies()
{
    ad10:	2f 92       	push	r2
    ad12:	3f 92       	push	r3
    ad14:	4f 92       	push	r4
    ad16:	5f 92       	push	r5
    ad18:	6f 92       	push	r6
    ad1a:	7f 92       	push	r7
    ad1c:	8f 92       	push	r8
    ad1e:	9f 92       	push	r9
    ad20:	af 92       	push	r10
    ad22:	bf 92       	push	r11
    ad24:	cf 92       	push	r12
    ad26:	df 92       	push	r13
    ad28:	ef 92       	push	r14
    ad2a:	ff 92       	push	r15
    ad2c:	0f 93       	push	r16
    ad2e:	1f 93       	push	r17
    ad30:	cf 93       	push	r28
    ad32:	df 93       	push	r29
    ad34:	cd b7       	in	r28, 0x3d	; 61
    ad36:	de b7       	in	r29, 0x3e	; 62
    ad38:	2c 97       	sbiw	r28, 0x0c	; 12
    ad3a:	0f b6       	in	r0, 0x3f	; 63
    ad3c:	f8 94       	cli
    ad3e:	de bf       	out	0x3e, r29	; 62
    ad40:	0f be       	out	0x3f, r0	; 63
    ad42:	cd bf       	out	0x3d, r28	; 61
    ad44:	42 e6       	ldi	r20, 0x62	; 98
    ad46:	24 2e       	mov	r2, r20
    ad48:	4e e0       	ldi	r20, 0x0E	; 14
    ad4a:	34 2e       	mov	r3, r20
    ad4c:	83 e6       	ldi	r24, 0x63	; 99
    ad4e:	9e e0       	ldi	r25, 0x0E	; 14
    ad50:	9c 87       	std	Y+12, r25	; 0x0c
    ad52:	8b 87       	std	Y+11, r24	; 0x0b
    ad54:	50 e5       	ldi	r21, 0x50	; 80
    ad56:	85 2e       	mov	r8, r21
    ad58:	5e e0       	ldi	r21, 0x0E	; 14
    ad5a:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    ad5c:	66 e0       	ldi	r22, 0x06	; 6
    ad5e:	b6 2e       	mov	r11, r22
    ad60:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad62:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad64:	34 97       	sbiw	r30, 0x04	; 4
    ad66:	fa 83       	std	Y+2, r31	; 0x02
    ad68:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    ad6a:	80 81       	ld	r24, Z
    ad6c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad6e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad70:	33 97       	sbiw	r30, 0x03	; 3
    ad72:	88 23       	and	r24, r24
    ad74:	09 f4       	brne	.+2      	; 0xad78 <animate_enemies+0x68>
    ad76:	a9 c0       	rjmp	.+338    	; 0xaeca <animate_enemies+0x1ba>
    ad78:	80 81       	ld	r24, Z
    ad7a:	84 fd       	sbrc	r24, 4
    ad7c:	a6 c0       	rjmp	.+332    	; 0xaeca <animate_enemies+0x1ba>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    ad7e:	f4 01       	movw	r30, r8
    ad80:	44 80       	ldd	r4, Z+4	; 0x04
    ad82:	55 80       	ldd	r5, Z+5	; 0x05
    ad84:	66 80       	ldd	r6, Z+6	; 0x06
    ad86:	77 80       	ldd	r7, Z+7	; 0x07
    ad88:	60 91 ab 0d 	lds	r22, 0x0DAB
    ad8c:	70 91 ac 0d 	lds	r23, 0x0DAC
    ad90:	80 e0       	ldi	r24, 0x00	; 0
    ad92:	90 e0       	ldi	r25, 0x00	; 0
    ad94:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    ad98:	9b 01       	movw	r18, r22
    ad9a:	ac 01       	movw	r20, r24
    ad9c:	c3 01       	movw	r24, r6
    ad9e:	b2 01       	movw	r22, r4
    ada0:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    ada4:	87 fd       	sbrc	r24, 7
    ada6:	25 c0       	rjmp	.+74     	; 0xadf2 <animate_enemies+0xe2>
    ada8:	f4 01       	movw	r30, r8
    adaa:	c0 84       	ldd	r12, Z+8	; 0x08
    adac:	d1 84       	ldd	r13, Z+9	; 0x09
    adae:	e2 84       	ldd	r14, Z+10	; 0x0a
    adb0:	f3 84       	ldd	r15, Z+11	; 0x0b
    adb2:	00 91 ad 0d 	lds	r16, 0x0DAD
    adb6:	10 91 ae 0d 	lds	r17, 0x0DAE
    adba:	b8 01       	movw	r22, r16
    adbc:	80 e0       	ldi	r24, 0x00	; 0
    adbe:	90 e0       	ldi	r25, 0x00	; 0
    adc0:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    adc4:	9b 01       	movw	r18, r22
    adc6:	ac 01       	movw	r20, r24
    adc8:	c7 01       	movw	r24, r14
    adca:	b6 01       	movw	r22, r12
    adcc:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    add0:	87 fd       	sbrc	r24, 7
    add2:	0f c0       	rjmp	.+30     	; 0xadf2 <animate_enemies+0xe2>
    add4:	b8 01       	movw	r22, r16
    add6:	60 53       	subi	r22, 0x30	; 48
    add8:	7f 4f       	sbci	r23, 0xFF	; 255
    adda:	80 e0       	ldi	r24, 0x00	; 0
    addc:	90 e0       	ldi	r25, 0x00	; 0
    adde:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    ade2:	9b 01       	movw	r18, r22
    ade4:	ac 01       	movw	r20, r24
    ade6:	c7 01       	movw	r24, r14
    ade8:	b6 01       	movw	r22, r12
    adea:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    adee:	18 16       	cp	r1, r24
    adf0:	84 f4       	brge	.+32     	; 0xae12 <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    adf2:	e9 81       	ldd	r30, Y+1	; 0x01
    adf4:	fa 81       	ldd	r31, Y+2	; 0x02
    adf6:	10 82       	st	Z, r1
				game.active_enemies--;
    adf8:	80 91 c1 0d 	lds	r24, 0x0DC1
    adfc:	81 50       	subi	r24, 0x01	; 1
    adfe:	80 93 c1 0d 	sts	0x0DC1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    ae02:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae04:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae06:	00 81       	ld	r16, Z
    ae08:	f1 01       	movw	r30, r2
    ae0a:	20 81       	ld	r18, Z
    ae0c:	40 e0       	ldi	r20, 0x00	; 0
    ae0e:	60 ee       	ldi	r22, 0xE0	; 224
    ae10:	8c c0       	rjmp	.+280    	; 0xaf2a <animate_enemies+0x21a>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    ae12:	c7 01       	movw	r24, r14
    ae14:	b6 01       	movw	r22, r12
    ae16:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    ae1a:	69 83       	std	Y+1, r22	; 0x01
    ae1c:	7a 83       	std	Y+2, r23	; 0x02
    ae1e:	8b 83       	std	Y+3, r24	; 0x03
    ae20:	9c 83       	std	Y+4, r25	; 0x04
    ae22:	c3 01       	movw	r24, r6
    ae24:	b2 01       	movw	r22, r4
    ae26:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    ae2a:	6d 83       	std	Y+5, r22	; 0x05
    ae2c:	7e 83       	std	Y+6, r23	; 0x06
    ae2e:	8f 83       	std	Y+7, r24	; 0x07
    ae30:	98 87       	std	Y+8, r25	; 0x08
    ae32:	20 91 d8 0d 	lds	r18, 0x0DD8
    ae36:	22 0f       	add	r18, r18
    ae38:	22 0f       	add	r18, r18
    ae3a:	22 0f       	add	r18, r18
    ae3c:	40 91 d7 0d 	lds	r20, 0x0DD7
    ae40:	44 0f       	add	r20, r20
    ae42:	44 0f       	add	r20, r20
    ae44:	44 0f       	add	r20, r20
    ae46:	60 91 cc 0d 	lds	r22, 0x0DCC
    ae4a:	70 91 cd 0d 	lds	r23, 0x0DCD
    ae4e:	80 91 ce 0d 	lds	r24, 0x0DCE
    ae52:	90 91 cf 0d 	lds	r25, 0x0DCF
    ae56:	29 87       	std	Y+9, r18	; 0x09
    ae58:	4a 87       	std	Y+10, r20	; 0x0a
    ae5a:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    ae5e:	2b 01       	movw	r4, r22
    ae60:	3c 01       	movw	r6, r24
    ae62:	60 91 c8 0d 	lds	r22, 0x0DC8
    ae66:	70 91 c9 0d 	lds	r23, 0x0DC9
    ae6a:	80 91 ca 0d 	lds	r24, 0x0DCA
    ae6e:	90 91 cb 0d 	lds	r25, 0x0DCB
    ae72:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    ae76:	dc 01       	movw	r26, r24
    ae78:	cb 01       	movw	r24, r22
    ae7a:	28 e0       	ldi	r18, 0x08	; 8
    ae7c:	a2 2e       	mov	r10, r18
    ae7e:	38 e0       	ldi	r19, 0x08	; 8
    ae80:	c3 2e       	mov	r12, r19
    ae82:	e9 80       	ldd	r14, Y+1	; 0x01
    ae84:	fa 80       	ldd	r15, Y+2	; 0x02
    ae86:	0d 81       	ldd	r16, Y+5	; 0x05
    ae88:	1e 81       	ldd	r17, Y+6	; 0x06
    ae8a:	29 85       	ldd	r18, Y+9	; 0x09
    ae8c:	4a 85       	ldd	r20, Y+10	; 0x0a
    ae8e:	b2 01       	movw	r22, r4
    ae90:	0e 94 c3 47 	call	0x8f86	; 0x8f86 <LBCollides>
    ae94:	88 23       	and	r24, r24
    ae96:	79 f0       	breq	.+30     	; 0xaeb6 <animate_enemies+0x1a6>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    ae98:	80 91 d4 0d 	lds	r24, 0x0DD4
    ae9c:	84 fd       	sbrc	r24, 4
    ae9e:	0b c0       	rjmp	.+22     	; 0xaeb6 <animate_enemies+0x1a6>
			)
			{
				SFX_PLAYER_EXPLODE;
    aea0:	41 e0       	ldi	r20, 0x01	; 1
    aea2:	6f ef       	ldi	r22, 0xFF	; 255
    aea4:	85 e0       	ldi	r24, 0x05	; 5
    aea6:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
				game.player.shield = 0;
    aeaa:	10 92 d9 0d 	sts	0x0DD9, r1
				game.player.flags = EXPLODING;
    aeae:	80 e1       	ldi	r24, 0x10	; 16
    aeb0:	80 93 d4 0d 	sts	0x0DD4, r24
				return;
    aeb4:	57 c0       	rjmp	.+174    	; 0xaf64 <animate_enemies+0x254>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    aeb6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aeb8:	fc 85       	ldd	r31, Y+12	; 0x0c
    aeba:	20 81       	ld	r18, Z
    aebc:	f1 01       	movw	r30, r2
    aebe:	40 81       	ld	r20, Z
    aec0:	6b 2d       	mov	r22, r11
    aec2:	c4 01       	movw	r24, r8
    aec4:	0e 94 53 54 	call	0xa8a6	; 0xa8a6 <animate_sprite>
    aec8:	33 c0       	rjmp	.+102    	; 0xaf30 <animate_enemies+0x220>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    aeca:	80 81       	ld	r24, Z
    aecc:	84 ff       	sbrs	r24, 4
    aece:	30 c0       	rjmp	.+96     	; 0xaf30 <animate_enemies+0x220>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    aed0:	60 91 ad 0d 	lds	r22, 0x0DAD
    aed4:	70 91 ae 0d 	lds	r23, 0x0DAE
    aed8:	80 e0       	ldi	r24, 0x00	; 0
    aeda:	90 e0       	ldi	r25, 0x00	; 0
    aedc:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    aee0:	9b 01       	movw	r18, r22
    aee2:	ac 01       	movw	r20, r24
    aee4:	f4 01       	movw	r30, r8
    aee6:	60 85       	ldd	r22, Z+8	; 0x08
    aee8:	71 85       	ldd	r23, Z+9	; 0x09
    aeea:	82 85       	ldd	r24, Z+10	; 0x0a
    aeec:	93 85       	ldd	r25, Z+11	; 0x0b
    aeee:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    aef2:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    aef6:	16 2f       	mov	r17, r22
    aef8:	60 91 ab 0d 	lds	r22, 0x0DAB
    aefc:	70 91 ac 0d 	lds	r23, 0x0DAC
    af00:	80 e0       	ldi	r24, 0x00	; 0
    af02:	90 e0       	ldi	r25, 0x00	; 0
    af04:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    af08:	9b 01       	movw	r18, r22
    af0a:	ac 01       	movw	r20, r24
    af0c:	f4 01       	movw	r30, r8
    af0e:	64 81       	ldd	r22, Z+4	; 0x04
    af10:	75 81       	ldd	r23, Z+5	; 0x05
    af12:	86 81       	ldd	r24, Z+6	; 0x06
    af14:	97 81       	ldd	r25, Z+7	; 0x07
    af16:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    af1a:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    af1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    af20:	fc 85       	ldd	r31, Y+12	; 0x0c
    af22:	00 81       	ld	r16, Z
    af24:	f1 01       	movw	r30, r2
    af26:	20 81       	ld	r18, Z
    af28:	41 2f       	mov	r20, r17
    af2a:	8b 2d       	mov	r24, r11
    af2c:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    af30:	eb 85       	ldd	r30, Y+11	; 0x0b
    af32:	fc 85       	ldd	r31, Y+12	; 0x0c
    af34:	90 81       	ld	r25, Z
    af36:	f1 01       	movw	r30, r2
    af38:	80 81       	ld	r24, Z
    af3a:	98 9f       	mul	r25, r24
    af3c:	b0 0c       	add	r11, r0
    af3e:	11 24       	eor	r1, r1
    af40:	f2 e4       	ldi	r31, 0x42	; 66
    af42:	2f 0e       	add	r2, r31
    af44:	31 1c       	adc	r3, r1
    af46:	8b 85       	ldd	r24, Y+11	; 0x0b
    af48:	9c 85       	ldd	r25, Y+12	; 0x0c
    af4a:	8e 5b       	subi	r24, 0xBE	; 190
    af4c:	9f 4f       	sbci	r25, 0xFF	; 255
    af4e:	9c 87       	std	Y+12, r25	; 0x0c
    af50:	8b 87       	std	Y+11, r24	; 0x0b
    af52:	92 e4       	ldi	r25, 0x42	; 66
    af54:	89 0e       	add	r8, r25
    af56:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    af58:	eb 85       	ldd	r30, Y+11	; 0x0b
    af5a:	fc 85       	ldd	r31, Y+12	; 0x0c
    af5c:	ed 5a       	subi	r30, 0xAD	; 173
    af5e:	ff 40       	sbci	r31, 0x0F	; 15
    af60:	09 f0       	breq	.+2      	; 0xaf64 <animate_enemies+0x254>
    af62:	fe ce       	rjmp	.-516    	; 0xad60 <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    af64:	2c 96       	adiw	r28, 0x0c	; 12
    af66:	0f b6       	in	r0, 0x3f	; 63
    af68:	f8 94       	cli
    af6a:	de bf       	out	0x3e, r29	; 62
    af6c:	0f be       	out	0x3f, r0	; 63
    af6e:	cd bf       	out	0x3d, r28	; 61
    af70:	df 91       	pop	r29
    af72:	cf 91       	pop	r28
    af74:	1f 91       	pop	r17
    af76:	0f 91       	pop	r16
    af78:	ff 90       	pop	r15
    af7a:	ef 90       	pop	r14
    af7c:	df 90       	pop	r13
    af7e:	cf 90       	pop	r12
    af80:	bf 90       	pop	r11
    af82:	af 90       	pop	r10
    af84:	9f 90       	pop	r9
    af86:	8f 90       	pop	r8
    af88:	7f 90       	pop	r7
    af8a:	6f 90       	pop	r6
    af8c:	5f 90       	pop	r5
    af8e:	4f 90       	pop	r4
    af90:	3f 90       	pop	r3
    af92:	2f 90       	pop	r2
    af94:	08 95       	ret

0000af96 <animate_enemy_shots>:

void animate_enemy_shots()
{
    af96:	2f 92       	push	r2
    af98:	3f 92       	push	r3
    af9a:	4f 92       	push	r4
    af9c:	5f 92       	push	r5
    af9e:	6f 92       	push	r6
    afa0:	7f 92       	push	r7
    afa2:	8f 92       	push	r8
    afa4:	9f 92       	push	r9
    afa6:	af 92       	push	r10
    afa8:	bf 92       	push	r11
    afaa:	cf 92       	push	r12
    afac:	df 92       	push	r13
    afae:	ef 92       	push	r14
    afb0:	ff 92       	push	r15
    afb2:	0f 93       	push	r16
    afb4:	1f 93       	push	r17
    afb6:	cf 93       	push	r28
    afb8:	df 93       	push	r29
    afba:	cd b7       	in	r28, 0x3d	; 61
    afbc:	de b7       	in	r29, 0x3e	; 62
    afbe:	62 97       	sbiw	r28, 0x12	; 18
    afc0:	0f b6       	in	r0, 0x3f	; 63
    afc2:	f8 94       	cli
    afc4:	de bf       	out	0x3e, r29	; 62
    afc6:	0f be       	out	0x3f, r0	; 63
    afc8:	cd bf       	out	0x3d, r28	; 61
    afca:	49 e7       	ldi	r20, 0x79	; 121
    afcc:	24 2e       	mov	r2, r20
    afce:	4e e0       	ldi	r20, 0x0E	; 14
    afd0:	34 2e       	mov	r3, r20
    afd2:	58 e6       	ldi	r21, 0x68	; 104
    afd4:	85 2e       	mov	r8, r21
    afd6:	5e e0       	ldi	r21, 0x0E	; 14
    afd8:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    afda:	6e e0       	ldi	r22, 0x0E	; 14
    afdc:	b6 2e       	mov	r11, r22
    afde:	f1 01       	movw	r30, r2
    afe0:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    afe2:	80 81       	ld	r24, Z
    afe4:	81 30       	cpi	r24, 0x01	; 1
    afe6:	09 f0       	breq	.+2      	; 0xafea <animate_enemy_shots+0x54>
    afe8:	f0 c0       	rjmp	.+480    	; 0xb1ca <animate_enemy_shots+0x234>
			{
				if (game.enemies[i].shot[j].active)
    afea:	d1 01       	movw	r26, r2
    afec:	8c 91       	ld	r24, X
    afee:	88 23       	and	r24, r24
    aff0:	09 f4       	brne	.+2      	; 0xaff4 <animate_enemy_shots+0x5e>
    aff2:	eb c0       	rjmp	.+470    	; 0xb1ca <animate_enemy_shots+0x234>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    aff4:	f4 01       	movw	r30, r8
    aff6:	c4 80       	ldd	r12, Z+4	; 0x04
    aff8:	d5 80       	ldd	r13, Z+5	; 0x05
    affa:	e6 80       	ldd	r14, Z+6	; 0x06
    affc:	f7 80       	ldd	r15, Z+7	; 0x07
    affe:	60 90 ab 0d 	lds	r6, 0x0DAB
    b002:	70 90 ac 0d 	lds	r7, 0x0DAC
    b006:	b3 01       	movw	r22, r6
    b008:	80 e0       	ldi	r24, 0x00	; 0
    b00a:	90 e0       	ldi	r25, 0x00	; 0
    b00c:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b010:	9b 01       	movw	r18, r22
    b012:	ac 01       	movw	r20, r24
    b014:	c7 01       	movw	r24, r14
    b016:	b6 01       	movw	r22, r12
    b018:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    b01c:	87 ff       	sbrs	r24, 7
    b01e:	03 c0       	rjmp	.+6      	; 0xb026 <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    b020:	d1 01       	movw	r26, r2
    b022:	1c 92       	st	X, r1
    b024:	86 c0       	rjmp	.+268    	; 0xb132 <animate_enemy_shots+0x19c>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b026:	b3 01       	movw	r22, r6
    b028:	60 52       	subi	r22, 0x20	; 32
    b02a:	7f 4f       	sbci	r23, 0xFF	; 255
    b02c:	80 e0       	ldi	r24, 0x00	; 0
    b02e:	90 e0       	ldi	r25, 0x00	; 0
    b030:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b034:	9b 01       	movw	r18, r22
    b036:	ac 01       	movw	r20, r24
    b038:	c7 01       	movw	r24, r14
    b03a:	b6 01       	movw	r22, r12
    b03c:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    b040:	18 16       	cp	r1, r24
    b042:	74 f3       	brlt	.-36     	; 0xb020 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    b044:	41 e0       	ldi	r20, 0x01	; 1
    b046:	61 e0       	ldi	r22, 0x01	; 1
    b048:	c4 01       	movw	r24, r8
    b04a:	0e 94 3a 4f 	call	0x9e74	; 0x9e74 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    b04e:	81 11       	cpse	r24, r1
    b050:	e7 cf       	rjmp	.-50     	; 0xb020 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    b052:	f4 01       	movw	r30, r8
    b054:	40 84       	ldd	r4, Z+8	; 0x08
    b056:	51 84       	ldd	r5, Z+9	; 0x09
    b058:	62 84       	ldd	r6, Z+10	; 0x0a
    b05a:	73 84       	ldd	r7, Z+11	; 0x0b
    b05c:	84 81       	ldd	r24, Z+4	; 0x04
    b05e:	95 81       	ldd	r25, Z+5	; 0x05
    b060:	a6 81       	ldd	r26, Z+6	; 0x06
    b062:	b7 81       	ldd	r27, Z+7	; 0x07
    b064:	89 83       	std	Y+1, r24	; 0x01
    b066:	9a 83       	std	Y+2, r25	; 0x02
    b068:	ab 83       	std	Y+3, r26	; 0x03
    b06a:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    b06c:	c3 01       	movw	r24, r6
    b06e:	b2 01       	movw	r22, r4
    b070:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    b074:	6d 83       	std	Y+5, r22	; 0x05
    b076:	7e 83       	std	Y+6, r23	; 0x06
    b078:	8f 83       	std	Y+7, r24	; 0x07
    b07a:	98 87       	std	Y+8, r25	; 0x08
    b07c:	69 81       	ldd	r22, Y+1	; 0x01
    b07e:	7a 81       	ldd	r23, Y+2	; 0x02
    b080:	8b 81       	ldd	r24, Y+3	; 0x03
    b082:	9c 81       	ldd	r25, Y+4	; 0x04
    b084:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    b088:	69 87       	std	Y+9, r22	; 0x09
    b08a:	7a 87       	std	Y+10, r23	; 0x0a
    b08c:	8b 87       	std	Y+11, r24	; 0x0b
    b08e:	9c 87       	std	Y+12, r25	; 0x0c
    b090:	20 91 d8 0d 	lds	r18, 0x0DD8
    b094:	22 0f       	add	r18, r18
    b096:	22 0f       	add	r18, r18
    b098:	22 0f       	add	r18, r18
    b09a:	40 91 d7 0d 	lds	r20, 0x0DD7
    b09e:	44 0f       	add	r20, r20
    b0a0:	44 0f       	add	r20, r20
    b0a2:	44 0f       	add	r20, r20
    b0a4:	60 91 cc 0d 	lds	r22, 0x0DCC
    b0a8:	70 91 cd 0d 	lds	r23, 0x0DCD
    b0ac:	80 91 ce 0d 	lds	r24, 0x0DCE
    b0b0:	90 91 cf 0d 	lds	r25, 0x0DCF
    b0b4:	29 8b       	std	Y+17, r18	; 0x11
    b0b6:	4a 8b       	std	Y+18, r20	; 0x12
    b0b8:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    b0bc:	6d 87       	std	Y+13, r22	; 0x0d
    b0be:	7e 87       	std	Y+14, r23	; 0x0e
    b0c0:	8f 87       	std	Y+15, r24	; 0x0f
    b0c2:	98 8b       	std	Y+16, r25	; 0x10
    b0c4:	60 91 c8 0d 	lds	r22, 0x0DC8
    b0c8:	70 91 c9 0d 	lds	r23, 0x0DC9
    b0cc:	80 91 ca 0d 	lds	r24, 0x0DCA
    b0d0:	90 91 cb 0d 	lds	r25, 0x0DCB
    b0d4:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    b0d8:	dc 01       	movw	r26, r24
    b0da:	cb 01       	movw	r24, r22
    b0dc:	28 e0       	ldi	r18, 0x08	; 8
    b0de:	a2 2e       	mov	r10, r18
    b0e0:	38 e0       	ldi	r19, 0x08	; 8
    b0e2:	c3 2e       	mov	r12, r19
    b0e4:	ed 80       	ldd	r14, Y+5	; 0x05
    b0e6:	fe 80       	ldd	r15, Y+6	; 0x06
    b0e8:	09 85       	ldd	r16, Y+9	; 0x09
    b0ea:	1a 85       	ldd	r17, Y+10	; 0x0a
    b0ec:	29 89       	ldd	r18, Y+17	; 0x11
    b0ee:	4a 89       	ldd	r20, Y+18	; 0x12
    b0f0:	6d 85       	ldd	r22, Y+13	; 0x0d
    b0f2:	7e 85       	ldd	r23, Y+14	; 0x0e
    b0f4:	0e 94 c3 47 	call	0x8f86	; 0x8f86 <LBCollides>
    b0f8:	88 23       	and	r24, r24
    b0fa:	01 f1       	breq	.+64     	; 0xb13c <animate_enemy_shots+0x1a6>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    b0fc:	41 e0       	ldi	r20, 0x01	; 1
    b0fe:	6f ef       	ldi	r22, 0xFF	; 255
    b100:	84 e0       	ldi	r24, 0x04	; 4
    b102:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    b106:	80 91 d9 0d 	lds	r24, 0x0DD9
    b10a:	f1 01       	movw	r30, r2
    b10c:	31 97       	sbiw	r30, 0x01	; 1
    b10e:	90 81       	ld	r25, Z
    b110:	89 1b       	sub	r24, r25
    b112:	80 93 d9 0d 	sts	0x0DD9, r24
						if (game.player.shield <= 0)
    b116:	18 16       	cp	r1, r24
    b118:	54 f0       	brlt	.+20     	; 0xb12e <animate_enemy_shots+0x198>
						{
							SFX_PLAYER_EXPLODE;
    b11a:	41 e0       	ldi	r20, 0x01	; 1
    b11c:	6f ef       	ldi	r22, 0xFF	; 255
    b11e:	85 e0       	ldi	r24, 0x05	; 5
    b120:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
							game.player.shield = 0;
    b124:	10 92 d9 0d 	sts	0x0DD9, r1
							game.player.flags = EXPLODING;
    b128:	b0 e1       	ldi	r27, 0x10	; 16
    b12a:	b0 93 d4 0d 	sts	0x0DD4, r27
						}
						game.enemies[i].shot[j].active = 0;
    b12e:	f1 01       	movw	r30, r2
    b130:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    b132:	01 e0       	ldi	r16, 0x01	; 1
    b134:	21 e0       	ldi	r18, 0x01	; 1
    b136:	40 e0       	ldi	r20, 0x00	; 0
    b138:	60 ee       	ldi	r22, 0xE0	; 224
    b13a:	44 c0       	rjmp	.+136    	; 0xb1c4 <animate_enemy_shots+0x22e>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    b13c:	d4 01       	movw	r26, r8
    b13e:	1c 96       	adiw	r26, 0x0c	; 12
    b140:	6d 91       	ld	r22, X+
    b142:	7c 91       	ld	r23, X
    b144:	1d 97       	sbiw	r26, 0x0d	; 13
    b146:	88 27       	eor	r24, r24
    b148:	77 fd       	sbrc	r23, 7
    b14a:	80 95       	com	r24
    b14c:	98 2f       	mov	r25, r24
    b14e:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    b152:	29 e8       	ldi	r18, 0x89	; 137
    b154:	38 e8       	ldi	r19, 0x88	; 136
    b156:	48 e8       	ldi	r20, 0x88	; 136
    b158:	5c e3       	ldi	r21, 0x3C	; 60
    b15a:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    b15e:	9b 01       	movw	r18, r22
    b160:	ac 01       	movw	r20, r24
    b162:	69 81       	ldd	r22, Y+1	; 0x01
    b164:	7a 81       	ldd	r23, Y+2	; 0x02
    b166:	8b 81       	ldd	r24, Y+3	; 0x03
    b168:	9c 81       	ldd	r25, Y+4	; 0x04
    b16a:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    b16e:	6b 01       	movw	r12, r22
    b170:	7c 01       	movw	r14, r24
    b172:	f4 01       	movw	r30, r8
    b174:	64 83       	std	Z+4, r22	; 0x04
    b176:	75 83       	std	Z+5, r23	; 0x05
    b178:	86 83       	std	Z+6, r24	; 0x06
    b17a:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    b17c:	60 91 ad 0d 	lds	r22, 0x0DAD
    b180:	70 91 ae 0d 	lds	r23, 0x0DAE
    b184:	80 e0       	ldi	r24, 0x00	; 0
    b186:	90 e0       	ldi	r25, 0x00	; 0
    b188:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b18c:	9b 01       	movw	r18, r22
    b18e:	ac 01       	movw	r20, r24
    b190:	c3 01       	movw	r24, r6
    b192:	b2 01       	movw	r22, r4
    b194:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    b198:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    b19c:	76 2e       	mov	r7, r22
    b19e:	60 91 ab 0d 	lds	r22, 0x0DAB
    b1a2:	70 91 ac 0d 	lds	r23, 0x0DAC
    b1a6:	80 e0       	ldi	r24, 0x00	; 0
    b1a8:	90 e0       	ldi	r25, 0x00	; 0
    b1aa:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b1ae:	9b 01       	movw	r18, r22
    b1b0:	ac 01       	movw	r20, r24
    b1b2:	c7 01       	movw	r24, r14
    b1b4:	b6 01       	movw	r22, r12
    b1b6:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    b1ba:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
    b1be:	01 e0       	ldi	r16, 0x01	; 1
    b1c0:	21 e0       	ldi	r18, 0x01	; 1
    b1c2:	47 2d       	mov	r20, r7
    b1c4:	8b 2d       	mov	r24, r11
    b1c6:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
					}
				}
			}
			slot += 1;
    b1ca:	b3 94       	inc	r11
    b1cc:	f2 e4       	ldi	r31, 0x42	; 66
    b1ce:	2f 0e       	add	r2, r31
    b1d0:	31 1c       	adc	r3, r1
    b1d2:	82 e4       	ldi	r24, 0x42	; 66
    b1d4:	88 0e       	add	r8, r24
    b1d6:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b1d8:	93 e1       	ldi	r25, 0x13	; 19
    b1da:	b9 12       	cpse	r11, r25
    b1dc:	00 cf       	rjmp	.-512    	; 0xafde <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    b1de:	62 96       	adiw	r28, 0x12	; 18
    b1e0:	0f b6       	in	r0, 0x3f	; 63
    b1e2:	f8 94       	cli
    b1e4:	de bf       	out	0x3e, r29	; 62
    b1e6:	0f be       	out	0x3f, r0	; 63
    b1e8:	cd bf       	out	0x3d, r28	; 61
    b1ea:	df 91       	pop	r29
    b1ec:	cf 91       	pop	r28
    b1ee:	1f 91       	pop	r17
    b1f0:	0f 91       	pop	r16
    b1f2:	ff 90       	pop	r15
    b1f4:	ef 90       	pop	r14
    b1f6:	df 90       	pop	r13
    b1f8:	cf 90       	pop	r12
    b1fa:	bf 90       	pop	r11
    b1fc:	af 90       	pop	r10
    b1fe:	9f 90       	pop	r9
    b200:	8f 90       	pop	r8
    b202:	7f 90       	pop	r7
    b204:	6f 90       	pop	r6
    b206:	5f 90       	pop	r5
    b208:	4f 90       	pop	r4
    b20a:	3f 90       	pop	r3
    b20c:	2f 90       	pop	r2
    b20e:	08 95       	ret

0000b210 <clear_sprites>:
	}
	
}

void clear_sprites(u8 from, u8 count)
{
    b210:	ef 92       	push	r14
    b212:	ff 92       	push	r15
    b214:	0f 93       	push	r16
    b216:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    b218:	c8 2f       	mov	r28, r24
    b21a:	e6 2e       	mov	r14, r22
    b21c:	f1 2c       	mov	r15, r1
    b21e:	e8 0e       	add	r14, r24
    b220:	f1 1c       	adc	r15, r1
    b222:	8c 2f       	mov	r24, r28
    b224:	90 e0       	ldi	r25, 0x00	; 0
    b226:	8e 15       	cp	r24, r14
    b228:	9f 05       	cpc	r25, r15
    b22a:	7c f4       	brge	.+30     	; 0xb24a <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    b22c:	40 e0       	ldi	r20, 0x00	; 0
    b22e:	64 ec       	ldi	r22, 0xC4	; 196
    b230:	7d e2       	ldi	r23, 0x2D	; 45
    b232:	8c 2f       	mov	r24, r28
    b234:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    b238:	01 e0       	ldi	r16, 0x01	; 1
    b23a:	21 e0       	ldi	r18, 0x01	; 1
    b23c:	40 e0       	ldi	r20, 0x00	; 0
    b23e:	60 ee       	ldi	r22, 0xE0	; 224
    b240:	8c 2f       	mov	r24, r28
    b242:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    b246:	cf 5f       	subi	r28, 0xFF	; 255
    b248:	ec cf       	rjmp	.-40     	; 0xb222 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    b24a:	cf 91       	pop	r28
    b24c:	0f 91       	pop	r16
    b24e:	ff 90       	pop	r15
    b250:	ef 90       	pop	r14
    b252:	08 95       	ret

0000b254 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b254:	61 e0       	ldi	r22, 0x01	; 1
    b256:	81 e0       	ldi	r24, 0x01	; 1
    b258:	0e 94 91 46 	call	0x8d22	; 0x8d22 <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b25c:	64 e1       	ldi	r22, 0x14	; 20
    b25e:	80 e0       	ldi	r24, 0x00	; 0
    b260:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
	LBRotateSprites();
    b264:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	ClearVram();
    b268:	0e 94 0f 38 	call	0x701e	; 0x701e <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b26c:	60 e0       	ldi	r22, 0x00	; 0
    b26e:	81 e0       	ldi	r24, 0x01	; 1
    b270:	0c 94 85 46 	jmp	0x8d0a	; 0x8d0a <FadeIn>

0000b274 <load_level>:
		game.level_height = 26;
	}
}

void load_level(u8 index, u8 drop_ship)
{	
    b274:	0f 93       	push	r16
    b276:	cf 93       	push	r28
    b278:	df 93       	push	r29
    b27a:	c8 2f       	mov	r28, r24
    b27c:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    b27e:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    b282:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 30;
    b286:	8e e1       	ldi	r24, 0x1E	; 30
    b288:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    b28c:	87 ec       	ldi	r24, 0xC7	; 199
    b28e:	94 e5       	ldi	r25, 0x54	; 84
    b290:	90 93 b1 0c 	sts	0x0CB1, r25
    b294:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 2;
    b298:	82 e0       	ldi	r24, 0x02	; 2
    b29a:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    b29e:	0e 94 19 4b 	call	0x9632	; 0x9632 <clear_overlay>
	game.current_level_index = index;
    b2a2:	c0 93 b7 0d 	sts	0x0DB7, r28
	game.level_ended = 0;
    b2a6:	10 92 c3 0d 	sts	0x0DC3, r1
	switch (index)
    b2aa:	8c 2f       	mov	r24, r28
    b2ac:	90 e0       	ldi	r25, 0x00	; 0
    b2ae:	8a 30       	cpi	r24, 0x0A	; 10
    b2b0:	91 05       	cpc	r25, r1
    b2b2:	c0 f4       	brcc	.+48     	; 0xb2e4 <load_level+0x70>
    b2b4:	fc 01       	movw	r30, r24
    b2b6:	e8 5c       	subi	r30, 0xC8	; 200
    b2b8:	ff 4f       	sbci	r31, 0xFF	; 255
    b2ba:	0c 94 d9 60 	jmp	0xc1b2	; 0xc1b2 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_0); break;
    b2be:	87 e4       	ldi	r24, 0x47	; 71
    b2c0:	9e e4       	ldi	r25, 0x4E	; 78
    b2c2:	0e c0       	rjmp	.+28     	; 0xb2e0 <load_level+0x6c>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_1); break;
    b2c4:	87 ec       	ldi	r24, 0xC7	; 199
    b2c6:	97 e4       	ldi	r25, 0x47	; 71
    b2c8:	0b c0       	rjmp	.+22     	; 0xb2e0 <load_level+0x6c>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_2); break;
    b2ca:	87 e4       	ldi	r24, 0x47	; 71
    b2cc:	91 e4       	ldi	r25, 0x41	; 65
    b2ce:	08 c0       	rjmp	.+16     	; 0xb2e0 <load_level+0x6c>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_3); break;
    b2d0:	87 ec       	ldi	r24, 0xC7	; 199
    b2d2:	9a e3       	ldi	r25, 0x3A	; 58
    b2d4:	05 c0       	rjmp	.+10     	; 0xb2e0 <load_level+0x6c>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_4); break;
    b2d6:	87 e4       	ldi	r24, 0x47	; 71
    b2d8:	94 e3       	ldi	r25, 0x34	; 52
    b2da:	02 c0       	rjmp	.+4      	; 0xb2e0 <load_level+0x6c>
		case 9: map_level_info((char*) map_level_space); break;
    b2dc:	87 ec       	ldi	r24, 0xC7	; 199
    b2de:	9d e2       	ldi	r25, 0x2D	; 45
    b2e0:	0e 94 29 4d 	call	0x9a52	; 0x9a52 <map_level_info>
	}
	game.column_count = 0;
    b2e4:	10 92 b4 0d 	sts	0x0DB4, r1
    b2e8:	10 92 b3 0d 	sts	0x0DB3, r1
	game.camera_x = get_camera_x(index);
    b2ec:	10 92 ac 0d 	sts	0x0DAC, r1
    b2f0:	10 92 ab 0d 	sts	0x0DAB, r1
	game.camera_y = get_camera_y(index);
    b2f4:	10 92 ae 0d 	sts	0x0DAE, r1
    b2f8:	10 92 ad 0d 	sts	0x0DAD, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    b2fc:	80 e0       	ldi	r24, 0x00	; 0
    b2fe:	90 e0       	ldi	r25, 0x00	; 0
    b300:	a0 ec       	ldi	r26, 0xC0	; 192
    b302:	b1 e4       	ldi	r27, 0x41	; 65
    b304:	80 93 c8 0d 	sts	0x0DC8, r24
    b308:	90 93 c9 0d 	sts	0x0DC9, r25
    b30c:	a0 93 ca 0d 	sts	0x0DCA, r26
    b310:	b0 93 cb 0d 	sts	0x0DCB, r27
	game.player.shared.y = get_hero_spawn_y(index)*8;
    b314:	80 e0       	ldi	r24, 0x00	; 0
    b316:	90 e0       	ldi	r25, 0x00	; 0
    b318:	a8 e2       	ldi	r26, 0x28	; 40
    b31a:	b3 e4       	ldi	r27, 0x43	; 67
    b31c:	80 93 cc 0d 	sts	0x0DCC, r24
    b320:	90 93 cd 0d 	sts	0x0DCD, r25
    b324:	a0 93 ce 0d 	sts	0x0DCE, r26
    b328:	b0 93 cf 0d 	sts	0x0DCF, r27
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b32c:	8d e1       	ldi	r24, 0x1D	; 29
    b32e:	90 e0       	ldi	r25, 0x00	; 0
    b330:	90 93 a8 0d 	sts	0x0DA8, r25
    b334:	80 93 a7 0d 	sts	0x0DA7, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    b338:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b33c:	8b e1       	ldi	r24, 0x1B	; 27
    b33e:	90 e0       	ldi	r25, 0x00	; 0
    b340:	90 93 aa 0d 	sts	0x0DAA, r25
    b344:	80 93 a9 0d 	sts	0x0DA9, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    b348:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    b34c:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    b350:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    b354:	8a e0       	ldi	r24, 0x0A	; 10
    b356:	80 93 c2 0d 	sts	0x0DC2, r24
	render_camera_view();
    b35a:	0e 94 5e 4b 	call	0x96bc	; 0x96bc <render_camera_view>
	LBPrint(0, VRAM_TILES_V-1, (char*) strLives);
    b35e:	47 e3       	ldi	r20, 0x37	; 55
    b360:	5b e0       	ldi	r21, 0x0B	; 11
    b362:	6f e1       	ldi	r22, 0x1F	; 31
    b364:	80 e0       	ldi	r24, 0x00	; 0
    b366:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strScore);
    b36a:	46 e4       	ldi	r20, 0x46	; 70
    b36c:	5b e0       	ldi	r21, 0x0B	; 11
    b36e:	6f e1       	ldi	r22, 0x1F	; 31
    b370:	81 e1       	ldi	r24, 0x11	; 17
    b372:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strShield);
    b376:	4e e3       	ldi	r20, 0x3E	; 62
    b378:	5b e0       	ldi	r21, 0x0B	; 11
    b37a:	6e e1       	ldi	r22, 0x1E	; 30
    b37c:	80 e0       	ldi	r24, 0x00	; 0
    b37e:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrint(18, VRAM_TILES_V-2, (char*) strTime);
    b382:	41 e3       	ldi	r20, 0x31	; 49
    b384:	5b e0       	ldi	r21, 0x0B	; 11
    b386:	6e e1       	ldi	r22, 0x1E	; 30
    b388:	82 e1       	ldi	r24, 0x12	; 18
    b38a:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    b38e:	21 e0       	ldi	r18, 0x01	; 1
    b390:	40 91 b5 0d 	lds	r20, 0x0DB5
    b394:	6f e1       	ldi	r22, 0x1F	; 31
    b396:	89 e0       	ldi	r24, 0x09	; 9
    b398:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    b39c:	40 91 af 0d 	lds	r20, 0x0DAF
    b3a0:	50 91 b0 0d 	lds	r21, 0x0DB0
    b3a4:	21 e0       	ldi	r18, 0x01	; 1
    b3a6:	6f e1       	ldi	r22, 0x1F	; 31
    b3a8:	8b e1       	ldi	r24, 0x1B	; 27
    b3aa:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    b3ae:	21 e0       	ldi	r18, 0x01	; 1
    b3b0:	40 91 d9 0d 	lds	r20, 0x0DD9
    b3b4:	6e e1       	ldi	r22, 0x1E	; 30
    b3b6:	89 e0       	ldi	r24, 0x09	; 9
    b3b8:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    b3bc:	40 91 b1 0d 	lds	r20, 0x0DB1
    b3c0:	50 91 b2 0d 	lds	r21, 0x0DB2
    b3c4:	21 e0       	ldi	r18, 0x01	; 1
    b3c6:	6e e1       	ldi	r22, 0x1E	; 30
    b3c8:	8b e1       	ldi	r24, 0x1B	; 27
    b3ca:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    b3ce:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    b3d2:	81 11       	cpse	r24, r1
    b3d4:	39 c0       	rjmp	.+114    	; 0xb448 <load_level+0x1d4>
    b3d6:	dd 23       	and	r29, r29
    b3d8:	b9 f1       	breq	.+110    	; 0xb448 <load_level+0x1d4>
	{
		map_ship();
    b3da:	0e 94 14 4d 	call	0x9a28	; 0x9a28 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    b3de:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    b3e0:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    b3e2:	81 e0       	ldi	r24, 0x01	; 1
    b3e4:	90 e0       	ldi	r25, 0x00	; 0
    b3e6:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    b3ea:	8c 2f       	mov	r24, r28
    b3ec:	90 e0       	ldi	r25, 0x00	; 0
    b3ee:	88 3a       	cpi	r24, 0xA8	; 168
    b3f0:	91 05       	cpc	r25, r1
    b3f2:	74 f0       	brlt	.+28     	; 0xb410 <load_level+0x19c>
			{
				LBMapSprite(0, map_hero_idle, 0);
    b3f4:	40 e0       	ldi	r20, 0x00	; 0
    b3f6:	68 e9       	ldi	r22, 0x98	; 152
    b3f8:	7d e2       	ldi	r23, 0x2D	; 45
    b3fa:	80 e0       	ldi	r24, 0x00	; 0
    b3fc:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    b400:	03 e0       	ldi	r16, 0x03	; 3
    b402:	22 e0       	ldi	r18, 0x02	; 2
    b404:	48 ea       	ldi	r20, 0xA8	; 168
    b406:	68 e1       	ldi	r22, 0x18	; 24
    b408:	80 e0       	ldi	r24, 0x00	; 0
    b40a:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
				ship_increment = -3;
    b40e:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    b410:	80 e3       	ldi	r24, 0x30	; 48
    b412:	9e e0       	ldi	r25, 0x0E	; 14
    b414:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b418:	40 e0       	ldi	r20, 0x00	; 0
    b41a:	bc 01       	movw	r22, r24
    b41c:	86 e0       	ldi	r24, 0x06	; 6
    b41e:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    b422:	02 e0       	ldi	r16, 0x02	; 2
    b424:	24 e0       	ldi	r18, 0x04	; 4
    b426:	4c 2f       	mov	r20, r28
    b428:	68 e0       	ldi	r22, 0x08	; 8
    b42a:	86 e0       	ldi	r24, 0x06	; 6
    b42c:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
			ship_y += ship_increment;
    b430:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    b432:	39 f4       	brne	.+14     	; 0xb442 <load_level+0x1ce>
			{
				clear_sprites(6, 8);
    b434:	68 e0       	ldi	r22, 0x08	; 8
    b436:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    b438:	df 91       	pop	r29
    b43a:	cf 91       	pop	r28
    b43c:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    b43e:	0c 94 08 59 	jmp	0xb210	; 0xb210 <clear_sprites>
				break;
			}
			LBRotateSprites();
    b442:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
		}
    b446:	cd cf       	rjmp	.-102    	; 0xb3e2 <load_level+0x16e>
	}
}
    b448:	df 91       	pop	r29
    b44a:	cf 91       	pop	r28
    b44c:	0f 91       	pop	r16
    b44e:	08 95       	ret

0000b450 <save_score>:
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b450:	87 e8       	ldi	r24, 0x87	; 135
    b452:	9d e0       	ldi	r25, 0x0D	; 13
    b454:	0c 94 8a 39 	jmp	0x7314	; 0x7314 <EepromWriteBlock>

0000b458 <load_splash>:
	load_splash();
}

void load_splash()
{
	Screen.scrollX = 0;
    b458:	ef ea       	ldi	r30, 0xAF	; 175
    b45a:	fc e0       	ldi	r31, 0x0C	; 12
    b45c:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    b45e:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    b460:	80 e2       	ldi	r24, 0x20	; 32
    b462:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    b464:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    b466:	e7 ea       	ldi	r30, 0xA7	; 167
    b468:	fd e0       	ldi	r31, 0x0D	; 13
    b46a:	17 86       	std	Z+15, r1	; 0x0f
	game.selection = START_SELECTED;
    b46c:	14 8a       	std	Z+20, r1	; 0x14
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b46e:	64 e1       	ldi	r22, 0x14	; 20
    b470:	80 e0       	ldi	r24, 0x00	; 0
    b472:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
	LBRotateSprites();
    b476:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    b47a:	4a e5       	ldi	r20, 0x5A	; 90
    b47c:	5b e0       	ldi	r21, 0x0B	; 11
    b47e:	6f e0       	ldi	r22, 0x0F	; 15
    b480:	88 e0       	ldi	r24, 0x08	; 8
    b482:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrint(8, 16, (char*) strHighscores);
    b486:	4e e4       	ldi	r20, 0x4E	; 78
    b488:	5b e0       	ldi	r21, 0x0B	; 11
    b48a:	60 e1       	ldi	r22, 0x10	; 16
    b48c:	88 e0       	ldi	r24, 0x08	; 8
    b48e:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    b492:	48 e7       	ldi	r20, 0x78	; 120
    b494:	5b e0       	ldi	r21, 0x0B	; 11
    b496:	65 e1       	ldi	r22, 0x15	; 21
    b498:	84 e0       	ldi	r24, 0x04	; 4
    b49a:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	LBPrint(3, 26, (char*) strMusic);
    b49e:	40 e6       	ldi	r20, 0x60	; 96
    b4a0:	5b e0       	ldi	r21, 0x0B	; 11
    b4a2:	6a e1       	ldi	r22, 0x1A	; 26
    b4a4:	83 e0       	ldi	r24, 0x03	; 3
    b4a6:	0e 94 57 47 	call	0x8eae	; 0x8eae <LBPrint>
	DrawMap2(6, 5, (const char*) map_splash);
    b4aa:	46 e0       	ldi	r20, 0x06	; 6
    b4ac:	55 e6       	ldi	r21, 0x65	; 101
    b4ae:	65 e0       	ldi	r22, 0x05	; 5
    b4b0:	86 e0       	ldi	r24, 0x06	; 6
    b4b2:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    b4b6:	40 e0       	ldi	r20, 0x00	; 0
    b4b8:	61 ec       	ldi	r22, 0xC1	; 193
    b4ba:	7d e2       	ldi	r23, 0x2D	; 45
    b4bc:	80 e0       	ldi	r24, 0x00	; 0
    b4be:	0c 94 2d 48 	jmp	0x905a	; 0x905a <LBMapSprite>

0000b4c2 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b4c2:	0e 94 28 5a 	call	0xb450	; 0xb450 <save_score>
	fade_through();
    b4c6:	0e 94 2a 59 	call	0xb254	; 0xb254 <fade_through>
	init_game_state();
    b4ca:	0e 94 00 49 	call	0x9200	; 0x9200 <init_game_state>
	init_player_state();
    b4ce:	0e 94 1d 49 	call	0x923a	; 0x923a <init_player_state>
	init_enemy_state();
    b4d2:	0e 94 09 49 	call	0x9212	; 0x9212 <init_enemy_state>
	StopSong();
    b4d6:	0e 94 cb 3a 	call	0x7596	; 0x7596 <StopSong>
	load_splash();
    b4da:	0c 94 2c 5a 	jmp	0xb458	; 0xb458 <load_splash>

0000b4de <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    b4de:	80 91 b5 0d 	lds	r24, 0x0DB5
    b4e2:	81 50       	subi	r24, 0x01	; 1
    b4e4:	80 93 b5 0d 	sts	0x0DB5, r24
	clear_sprites(0, 6);
    b4e8:	66 e0       	ldi	r22, 0x06	; 6
    b4ea:	80 e0       	ldi	r24, 0x00	; 0
    b4ec:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
	LBRotateSprites();
    b4f0:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	if (game.lives == 0)
    b4f4:	80 91 b5 0d 	lds	r24, 0x0DB5
    b4f8:	81 11       	cpse	r24, r1
    b4fa:	02 c0       	rjmp	.+4      	; 0xb500 <handle_player_death+0x22>
	{
		exit_game();
    b4fc:	0c 94 61 5a 	jmp	0xb4c2	; 0xb4c2 <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    b500:	61 e0       	ldi	r22, 0x01	; 1
    b502:	81 e0       	ldi	r24, 0x01	; 1
    b504:	0e 94 91 46 	call	0x8d22	; 0x8d22 <FadeOut>
	ClearVram();
    b508:	0e 94 0f 38 	call	0x701e	; 0x701e <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    b50c:	64 e1       	ldi	r22, 0x14	; 20
    b50e:	80 e0       	ldi	r24, 0x00	; 0
    b510:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
	LBRotateSprites();
    b514:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    b518:	60 e0       	ldi	r22, 0x00	; 0
    b51a:	81 e0       	ldi	r24, 0x01	; 1
    b51c:	0e 94 85 46 	call	0x8d0a	; 0x8d0a <FadeIn>
	init_player_state();
    b520:	0e 94 1d 49 	call	0x923a	; 0x923a <init_player_state>
	init_enemy_state();
    b524:	0e 94 09 49 	call	0x9212	; 0x9212 <init_enemy_state>
	load_level(game.current_level_index, false);
    b528:	60 e0       	ldi	r22, 0x00	; 0
    b52a:	80 91 b7 0d 	lds	r24, 0x0DB7
    b52e:	0c 94 3a 59 	jmp	0xb274	; 0xb274 <load_level>

0000b532 <update_player>:
}

void update_player()
{
    b532:	cf 92       	push	r12
    b534:	df 92       	push	r13
    b536:	ef 92       	push	r14
    b538:	ff 92       	push	r15
    b53a:	0f 93       	push	r16
    b53c:	1f 93       	push	r17
    b53e:	cf 93       	push	r28
    b540:	df 93       	push	r29
    b542:	1f 92       	push	r1
    b544:	cd b7       	in	r28, 0x3d	; 61
    b546:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    b548:	10 91 d4 0d 	lds	r17, 0x0DD4
    b54c:	14 ff       	sbrs	r17, 4
    b54e:	19 c0       	rjmp	.+50     	; 0xb582 <update_player+0x50>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    b550:	00 91 d8 0d 	lds	r16, 0x0DD8
    b554:	20 91 d7 0d 	lds	r18, 0x0DD7
    b558:	40 e0       	ldi	r20, 0x00	; 0
    b55a:	68 e4       	ldi	r22, 0x48	; 72
    b55c:	7e e0       	ldi	r23, 0x0E	; 14
    b55e:	84 ed       	ldi	r24, 0xD4	; 212
    b560:	9d e0       	ldi	r25, 0x0D	; 13
    b562:	0e 94 08 54 	call	0xa810	; 0xa810 <map_explosion>
    b566:	88 23       	and	r24, r24
    b568:	09 f4       	brne	.+2      	; 0xb56c <update_player+0x3a>
    b56a:	b7 c2       	rjmp	.+1390   	; 0xbada <update_player+0x5a8>
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
		}
	}
}
    b56c:	0f 90       	pop	r0
    b56e:	df 91       	pop	r29
    b570:	cf 91       	pop	r28
    b572:	1f 91       	pop	r17
    b574:	0f 91       	pop	r16
    b576:	ff 90       	pop	r15
    b578:	ef 90       	pop	r14
    b57a:	df 90       	pop	r13
    b57c:	cf 90       	pop	r12
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    b57e:	0c 94 6f 5a 	jmp	0xb4de	; 0xb4de <handle_player_death>
		}
	}
	else if (is_space())
    b582:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    b586:	88 23       	and	r24, r24
    b588:	09 f4       	brne	.+2      	; 0xb58c <update_player+0x5a>
    b58a:	8a c0       	rjmp	.+276    	; 0xb6a0 <update_player+0x16e>
	{
		game.player.shared.vy = 0;
    b58c:	10 92 c4 0d 	sts	0x0DC4, r1
    b590:	10 92 c5 0d 	sts	0x0DC5, r1
    b594:	10 92 c6 0d 	sts	0x0DC6, r1
    b598:	10 92 c7 0d 	sts	0x0DC7, r1
		game.player.shared.vx = SPACE_SHIP_SPEED;
    b59c:	8c e3       	ldi	r24, 0x3C	; 60
    b59e:	90 e0       	ldi	r25, 0x00	; 0
    b5a0:	90 93 d1 0d 	sts	0x0DD1, r25
    b5a4:	80 93 d0 0d 	sts	0x0DD0, r24
		
		if (game.joypadState.held & BTN_DOWN)
    b5a8:	10 91 9e 0f 	lds	r17, 0x0F9E
    b5ac:	15 ff       	sbrs	r17, 5
    b5ae:	0c c0       	rjmp	.+24     	; 0xb5c8 <update_player+0x96>
		{
			game.player.shared.vy = SPACE_SHIP_SPEED;
    b5b0:	80 e0       	ldi	r24, 0x00	; 0
    b5b2:	90 e0       	ldi	r25, 0x00	; 0
    b5b4:	a0 e7       	ldi	r26, 0x70	; 112
    b5b6:	b2 e4       	ldi	r27, 0x42	; 66
    b5b8:	80 93 c4 0d 	sts	0x0DC4, r24
    b5bc:	90 93 c5 0d 	sts	0x0DC5, r25
    b5c0:	a0 93 c6 0d 	sts	0x0DC6, r26
    b5c4:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    b5c8:	17 ff       	sbrs	r17, 7
    b5ca:	2c c0       	rjmp	.+88     	; 0xb624 <update_player+0xf2>
    b5cc:	20 e0       	ldi	r18, 0x00	; 0
    b5ce:	30 e0       	ldi	r19, 0x00	; 0
    b5d0:	40 e0       	ldi	r20, 0x00	; 0
    b5d2:	5e e3       	ldi	r21, 0x3E	; 62
    b5d4:	60 91 c8 0d 	lds	r22, 0x0DC8
    b5d8:	70 91 c9 0d 	lds	r23, 0x0DC9
    b5dc:	80 91 ca 0d 	lds	r24, 0x0DCA
    b5e0:	90 91 cb 0d 	lds	r25, 0x0DCB
    b5e4:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    b5e8:	20 e0       	ldi	r18, 0x00	; 0
    b5ea:	30 e0       	ldi	r19, 0x00	; 0
    b5ec:	40 e0       	ldi	r20, 0x00	; 0
    b5ee:	50 e4       	ldi	r21, 0x40	; 64
    b5f0:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    b5f4:	6b 01       	movw	r12, r22
    b5f6:	7c 01       	movw	r14, r24
    b5f8:	80 91 b8 0d 	lds	r24, 0x0DB8
    b5fc:	68 2f       	mov	r22, r24
    b5fe:	70 e0       	ldi	r23, 0x00	; 0
    b600:	80 e0       	ldi	r24, 0x00	; 0
    b602:	90 e0       	ldi	r25, 0x00	; 0
    b604:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    b608:	9b 01       	movw	r18, r22
    b60a:	ac 01       	movw	r20, r24
    b60c:	c7 01       	movw	r24, r14
    b60e:	b6 01       	movw	r22, r12
    b610:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    b614:	87 ff       	sbrs	r24, 7
    b616:	06 c0       	rjmp	.+12     	; 0xb624 <update_player+0xf2>
		{
			game.player.shared.vx = SPACE_SHIP_SPEED*2;
    b618:	88 e7       	ldi	r24, 0x78	; 120
    b61a:	90 e0       	ldi	r25, 0x00	; 0
    b61c:	90 93 d1 0d 	sts	0x0DD1, r25
    b620:	80 93 d0 0d 	sts	0x0DD0, r24
		}
		if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b624:	16 ff       	sbrs	r17, 6
    b626:	1c c0       	rjmp	.+56     	; 0xb660 <update_player+0x12e>
    b628:	60 91 ab 0d 	lds	r22, 0x0DAB
    b62c:	70 91 ac 0d 	lds	r23, 0x0DAC
    b630:	80 e0       	ldi	r24, 0x00	; 0
    b632:	90 e0       	ldi	r25, 0x00	; 0
    b634:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b638:	9b 01       	movw	r18, r22
    b63a:	ac 01       	movw	r20, r24
    b63c:	60 91 c8 0d 	lds	r22, 0x0DC8
    b640:	70 91 c9 0d 	lds	r23, 0x0DC9
    b644:	80 91 ca 0d 	lds	r24, 0x0DCA
    b648:	90 91 cb 0d 	lds	r25, 0x0DCB
    b64c:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    b650:	18 16       	cp	r1, r24
    b652:	34 f4       	brge	.+12     	; 0xb660 <update_player+0x12e>
		{
			game.player.shared.vx = -SPACE_SHIP_SPEED*2;
    b654:	88 e8       	ldi	r24, 0x88	; 136
    b656:	9f ef       	ldi	r25, 0xFF	; 255
    b658:	90 93 d1 0d 	sts	0x0DD1, r25
    b65c:	80 93 d0 0d 	sts	0x0DD0, r24
		}
		if ((game.joypadState.held & BTN_UP) && (game.player.shared.y > 0))
    b660:	14 ff       	sbrs	r17, 4
    b662:	1b c0       	rjmp	.+54     	; 0xb69a <update_player+0x168>
    b664:	20 e0       	ldi	r18, 0x00	; 0
    b666:	30 e0       	ldi	r19, 0x00	; 0
    b668:	a9 01       	movw	r20, r18
    b66a:	60 91 cc 0d 	lds	r22, 0x0DCC
    b66e:	70 91 cd 0d 	lds	r23, 0x0DCD
    b672:	80 91 ce 0d 	lds	r24, 0x0DCE
    b676:	90 91 cf 0d 	lds	r25, 0x0DCF
    b67a:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    b67e:	18 16       	cp	r1, r24
    b680:	64 f4       	brge	.+24     	; 0xb69a <update_player+0x168>
		{
			game.player.shared.vy = -SPACE_SHIP_SPEED;
    b682:	80 e0       	ldi	r24, 0x00	; 0
    b684:	90 e0       	ldi	r25, 0x00	; 0
    b686:	a0 e7       	ldi	r26, 0x70	; 112
    b688:	b2 ec       	ldi	r27, 0xC2	; 194
    b68a:	80 93 c4 0d 	sts	0x0DC4, r24
    b68e:	90 93 c5 0d 	sts	0x0DC5, r25
    b692:	a0 93 c6 0d 	sts	0x0DC6, r26
    b696:	b0 93 c7 0d 	sts	0x0DC7, r27
		}
		LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    b69a:	80 e3       	ldi	r24, 0x30	; 48
    b69c:	9e e0       	ldi	r25, 0x0E	; 14
    b69e:	0d c2       	rjmp	.+1050   	; 0xbaba <update_player+0x588>
	}
	else if (game.player.flags & (IDLE|RUNNING))
    b6a0:	81 2f       	mov	r24, r17
    b6a2:	8a 70       	andi	r24, 0x0A	; 10
    b6a4:	09 f4       	brne	.+2      	; 0xb6a8 <update_player+0x176>
    b6a6:	ec c0       	rjmp	.+472    	; 0xb880 <update_player+0x34e>
	{
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    b6a8:	40 91 d8 0d 	lds	r20, 0x0DD8
    b6ac:	60 91 d7 0d 	lds	r22, 0x0DD7
    b6b0:	84 ec       	ldi	r24, 0xC4	; 196
    b6b2:	9d e0       	ldi	r25, 0x0D	; 13
    b6b4:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <on_solid_ground>
    b6b8:	81 11       	cpse	r24, r1
    b6ba:	07 c0       	rjmp	.+14     	; 0xb6ca <update_player+0x198>
		{
			game.player.shared.gravity = GRAVITY;
    b6bc:	8f ef       	ldi	r24, 0xFF	; 255
    b6be:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.flags = JUMPING;
    b6c2:	81 e0       	ldi	r24, 0x01	; 1
    b6c4:	80 93 d4 0d 	sts	0x0DD4, r24
    b6c8:	de c1       	rjmp	.+956    	; 0xba86 <update_player+0x554>
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if (game.joypadState.held & BTN_DOWN)
    b6ca:	10 91 9e 0f 	lds	r17, 0x0F9E
    b6ce:	15 ff       	sbrs	r17, 5
    b6d0:	46 c0       	rjmp	.+140    	; 0xb75e <update_player+0x22c>
			{
				game.player.shared.y += 16;
    b6d2:	20 e0       	ldi	r18, 0x00	; 0
    b6d4:	30 e0       	ldi	r19, 0x00	; 0
    b6d6:	40 e8       	ldi	r20, 0x80	; 128
    b6d8:	51 e4       	ldi	r21, 0x41	; 65
    b6da:	60 91 cc 0d 	lds	r22, 0x0DCC
    b6de:	70 91 cd 0d 	lds	r23, 0x0DCD
    b6e2:	80 91 ce 0d 	lds	r24, 0x0DCE
    b6e6:	90 91 cf 0d 	lds	r25, 0x0DCF
    b6ea:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    b6ee:	60 93 cc 0d 	sts	0x0DCC, r22
    b6f2:	70 93 cd 0d 	sts	0x0DCD, r23
    b6f6:	80 93 ce 0d 	sts	0x0DCE, r24
    b6fa:	90 93 cf 0d 	sts	0x0DCF, r25
				if(game.player.direction == D_RIGHT)
    b6fe:	80 91 d6 0d 	lds	r24, 0x0DD6
    b702:	81 30       	cpi	r24, 0x01	; 1
    b704:	b1 f4       	brne	.+44     	; 0xb732 <update_player+0x200>
				{
					game.player.shared.x -= 8;
    b706:	20 e0       	ldi	r18, 0x00	; 0
    b708:	30 e0       	ldi	r19, 0x00	; 0
    b70a:	40 e0       	ldi	r20, 0x00	; 0
    b70c:	51 e4       	ldi	r21, 0x41	; 65
    b70e:	60 91 c8 0d 	lds	r22, 0x0DC8
    b712:	70 91 c9 0d 	lds	r23, 0x0DC9
    b716:	80 91 ca 0d 	lds	r24, 0x0DCA
    b71a:	90 91 cb 0d 	lds	r25, 0x0DCB
    b71e:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    b722:	60 93 c8 0d 	sts	0x0DC8, r22
    b726:	70 93 c9 0d 	sts	0x0DC9, r23
    b72a:	80 93 ca 0d 	sts	0x0DCA, r24
    b72e:	90 93 cb 0d 	sts	0x0DCB, r25
				}
				game.player.shared.vx = 0;
    b732:	10 92 d1 0d 	sts	0x0DD1, r1
    b736:	10 92 d0 0d 	sts	0x0DD0, r1
				game.player.flags = PRONE;
    b73a:	84 e0       	ldi	r24, 0x04	; 4
    b73c:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.width = 3;
    b740:	83 e0       	ldi	r24, 0x03	; 3
    b742:	80 93 d7 0d 	sts	0x0DD7, r24
				game.player.height = 1;
    b746:	81 e0       	ldi	r24, 0x01	; 1
    b748:	80 93 d8 0d 	sts	0x0DD8, r24
				clear_sprites(3, 3);
    b74c:	63 e0       	ldi	r22, 0x03	; 3
    b74e:	83 e0       	ldi	r24, 0x03	; 3
    b750:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    b754:	40 91 ae 0f 	lds	r20, 0x0FAE
    b758:	80 e4       	ldi	r24, 0x40	; 64
    b75a:	9e e0       	ldi	r25, 0x0E	; 14
    b75c:	6e c0       	rjmp	.+220    	; 0xb83a <update_player+0x308>
			}
			else if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    b75e:	17 ff       	sbrs	r17, 7
    b760:	38 c0       	rjmp	.+112    	; 0xb7d2 <update_player+0x2a0>
    b762:	20 e0       	ldi	r18, 0x00	; 0
    b764:	30 e0       	ldi	r19, 0x00	; 0
    b766:	40 e0       	ldi	r20, 0x00	; 0
    b768:	5e e3       	ldi	r21, 0x3E	; 62
    b76a:	60 91 c8 0d 	lds	r22, 0x0DC8
    b76e:	70 91 c9 0d 	lds	r23, 0x0DC9
    b772:	80 91 ca 0d 	lds	r24, 0x0DCA
    b776:	90 91 cb 0d 	lds	r25, 0x0DCB
    b77a:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    b77e:	20 e0       	ldi	r18, 0x00	; 0
    b780:	30 e0       	ldi	r19, 0x00	; 0
    b782:	40 e0       	ldi	r20, 0x00	; 0
    b784:	50 e4       	ldi	r21, 0x40	; 64
    b786:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    b78a:	6b 01       	movw	r12, r22
    b78c:	7c 01       	movw	r14, r24
    b78e:	80 91 b8 0d 	lds	r24, 0x0DB8
    b792:	68 2f       	mov	r22, r24
    b794:	70 e0       	ldi	r23, 0x00	; 0
    b796:	80 e0       	ldi	r24, 0x00	; 0
    b798:	90 e0       	ldi	r25, 0x00	; 0
    b79a:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    b79e:	9b 01       	movw	r18, r22
    b7a0:	ac 01       	movw	r20, r24
    b7a2:	c7 01       	movw	r24, r14
    b7a4:	b6 01       	movw	r22, r12
    b7a6:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    b7aa:	87 ff       	sbrs	r24, 7
    b7ac:	12 c0       	rjmp	.+36     	; 0xb7d2 <update_player+0x2a0>
			{
				game.player.shared.vx = RUN_SPEED;
    b7ae:	8c e3       	ldi	r24, 0x3C	; 60
    b7b0:	90 e0       	ldi	r25, 0x00	; 0
    b7b2:	90 93 d1 0d 	sts	0x0DD1, r25
    b7b6:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    b7ba:	82 e0       	ldi	r24, 0x02	; 2
    b7bc:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_RIGHT;
    b7c0:	81 e0       	ldi	r24, 0x01	; 1
    b7c2:	80 93 d6 0d 	sts	0x0DD6, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    b7c6:	80 e3       	ldi	r24, 0x30	; 48
    b7c8:	9e e0       	ldi	r25, 0x0E	; 14
    b7ca:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b7ce:	40 e0       	ldi	r20, 0x00	; 0
    b7d0:	38 c0       	rjmp	.+112    	; 0xb842 <update_player+0x310>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b7d2:	16 ff       	sbrs	r17, 6
    b7d4:	27 c0       	rjmp	.+78     	; 0xb824 <update_player+0x2f2>
    b7d6:	60 91 ab 0d 	lds	r22, 0x0DAB
    b7da:	70 91 ac 0d 	lds	r23, 0x0DAC
    b7de:	80 e0       	ldi	r24, 0x00	; 0
    b7e0:	90 e0       	ldi	r25, 0x00	; 0
    b7e2:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b7e6:	9b 01       	movw	r18, r22
    b7e8:	ac 01       	movw	r20, r24
    b7ea:	60 91 c8 0d 	lds	r22, 0x0DC8
    b7ee:	70 91 c9 0d 	lds	r23, 0x0DC9
    b7f2:	80 91 ca 0d 	lds	r24, 0x0DCA
    b7f6:	90 91 cb 0d 	lds	r25, 0x0DCB
    b7fa:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    b7fe:	18 16       	cp	r1, r24
    b800:	8c f4       	brge	.+34     	; 0xb824 <update_player+0x2f2>
			{
				game.player.shared.vx = -RUN_SPEED;
    b802:	84 ec       	ldi	r24, 0xC4	; 196
    b804:	9f ef       	ldi	r25, 0xFF	; 255
    b806:	90 93 d1 0d 	sts	0x0DD1, r25
    b80a:	80 93 d0 0d 	sts	0x0DD0, r24
				game.player.flags = RUNNING;
    b80e:	82 e0       	ldi	r24, 0x02	; 2
    b810:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.direction = D_LEFT;
    b814:	10 92 d6 0d 	sts	0x0DD6, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    b818:	80 e3       	ldi	r24, 0x30	; 48
    b81a:	9e e0       	ldi	r25, 0x0E	; 14
    b81c:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b820:	41 e0       	ldi	r20, 0x01	; 1
    b822:	0f c0       	rjmp	.+30     	; 0xb842 <update_player+0x310>
			}
			else
			{
				game.player.flags = IDLE;
    b824:	88 e0       	ldi	r24, 0x08	; 8
    b826:	80 93 d4 0d 	sts	0x0DD4, r24
				game.player.shared.vx = 0;
    b82a:	10 92 d1 0d 	sts	0x0DD1, r1
    b82e:	10 92 d0 0d 	sts	0x0DD0, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    b832:	40 91 ae 0f 	lds	r20, 0x0FAE
    b836:	88 e2       	ldi	r24, 0x28	; 40
    b838:	9e e0       	ldi	r25, 0x0E	; 14
    b83a:	49 83       	std	Y+1, r20	; 0x01
    b83c:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b840:	49 81       	ldd	r20, Y+1	; 0x01
    b842:	bc 01       	movw	r22, r24
    b844:	80 e0       	ldi	r24, 0x00	; 0
    b846:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B && !(game.player.flags & PRONE))
    b84a:	80 91 9a 0f 	lds	r24, 0x0F9A
    b84e:	80 ff       	sbrs	r24, 0
    b850:	44 c1       	rjmp	.+648    	; 0xbada <update_player+0x5a8>
    b852:	80 91 d4 0d 	lds	r24, 0x0DD4
    b856:	82 fd       	sbrc	r24, 2
    b858:	40 c1       	rjmp	.+640    	; 0xbada <update_player+0x5a8>
			{
				game.player.shared.vy = -JUMP_SPEED;
    b85a:	80 e0       	ldi	r24, 0x00	; 0
    b85c:	90 e0       	ldi	r25, 0x00	; 0
    b85e:	a6 e1       	ldi	r26, 0x16	; 22
    b860:	b3 ec       	ldi	r27, 0xC3	; 195
    b862:	80 93 c4 0d 	sts	0x0DC4, r24
    b866:	90 93 c5 0d 	sts	0x0DC5, r25
    b86a:	a0 93 c6 0d 	sts	0x0DC6, r26
    b86e:	b0 93 c7 0d 	sts	0x0DC7, r27
				game.player.shared.gravity = GRAVITY;
    b872:	8f ef       	ldi	r24, 0xFF	; 255
    b874:	80 93 d2 0d 	sts	0x0DD2, r24
				game.player.flags = JUMPING;
    b878:	81 e0       	ldi	r24, 0x01	; 1
    b87a:	80 93 d4 0d 	sts	0x0DD4, r24
    b87e:	fd c0       	rjmp	.+506    	; 0xba7a <update_player+0x548>
				game.player.height = 3;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
			}
		}
	}
	else if (game.player.flags & JUMPING)
    b880:	10 ff       	sbrs	r17, 0
    b882:	77 c0       	rjmp	.+238    	; 0xb972 <update_player+0x440>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < game.level_width))
    b884:	10 91 9e 0f 	lds	r17, 0x0F9E
    b888:	17 ff       	sbrs	r17, 7
    b88a:	35 c0       	rjmp	.+106    	; 0xb8f6 <update_player+0x3c4>
    b88c:	20 e0       	ldi	r18, 0x00	; 0
    b88e:	30 e0       	ldi	r19, 0x00	; 0
    b890:	40 e0       	ldi	r20, 0x00	; 0
    b892:	5e e3       	ldi	r21, 0x3E	; 62
    b894:	60 91 c8 0d 	lds	r22, 0x0DC8
    b898:	70 91 c9 0d 	lds	r23, 0x0DC9
    b89c:	80 91 ca 0d 	lds	r24, 0x0DCA
    b8a0:	90 91 cb 0d 	lds	r25, 0x0DCB
    b8a4:	0e 94 2a 62 	call	0xc454	; 0xc454 <__mulsf3>
    b8a8:	20 e0       	ldi	r18, 0x00	; 0
    b8aa:	30 e0       	ldi	r19, 0x00	; 0
    b8ac:	40 e0       	ldi	r20, 0x00	; 0
    b8ae:	50 e4       	ldi	r21, 0x40	; 64
    b8b0:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    b8b4:	6b 01       	movw	r12, r22
    b8b6:	7c 01       	movw	r14, r24
    b8b8:	80 91 b8 0d 	lds	r24, 0x0DB8
    b8bc:	68 2f       	mov	r22, r24
    b8be:	70 e0       	ldi	r23, 0x00	; 0
    b8c0:	80 e0       	ldi	r24, 0x00	; 0
    b8c2:	90 e0       	ldi	r25, 0x00	; 0
    b8c4:	0e 94 76 61 	call	0xc2ec	; 0xc2ec <__floatsisf>
    b8c8:	9b 01       	movw	r18, r22
    b8ca:	ac 01       	movw	r20, r24
    b8cc:	c7 01       	movw	r24, r14
    b8ce:	b6 01       	movw	r22, r12
    b8d0:	0e 94 44 61 	call	0xc288	; 0xc288 <__cmpsf2>
    b8d4:	87 ff       	sbrs	r24, 7
    b8d6:	0f c0       	rjmp	.+30     	; 0xb8f6 <update_player+0x3c4>
		{
			game.player.shared.vx = RUN_SPEED;
    b8d8:	8c e3       	ldi	r24, 0x3C	; 60
    b8da:	90 e0       	ldi	r25, 0x00	; 0
    b8dc:	90 93 d1 0d 	sts	0x0DD1, r25
    b8e0:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_RIGHT;
    b8e4:	81 e0       	ldi	r24, 0x01	; 1
    b8e6:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    b8ea:	88 e3       	ldi	r24, 0x38	; 56
    b8ec:	9e e0       	ldi	r25, 0x0E	; 14
    b8ee:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b8f2:	40 e0       	ldi	r20, 0x00	; 0
    b8f4:	32 c0       	rjmp	.+100    	; 0xb95a <update_player+0x428>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    b8f6:	16 ff       	sbrs	r17, 6
    b8f8:	24 c0       	rjmp	.+72     	; 0xb942 <update_player+0x410>
    b8fa:	60 91 ab 0d 	lds	r22, 0x0DAB
    b8fe:	70 91 ac 0d 	lds	r23, 0x0DAC
    b902:	80 e0       	ldi	r24, 0x00	; 0
    b904:	90 e0       	ldi	r25, 0x00	; 0
    b906:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    b90a:	9b 01       	movw	r18, r22
    b90c:	ac 01       	movw	r20, r24
    b90e:	60 91 c8 0d 	lds	r22, 0x0DC8
    b912:	70 91 c9 0d 	lds	r23, 0x0DC9
    b916:	80 91 ca 0d 	lds	r24, 0x0DCA
    b91a:	90 91 cb 0d 	lds	r25, 0x0DCB
    b91e:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    b922:	18 16       	cp	r1, r24
    b924:	74 f4       	brge	.+28     	; 0xb942 <update_player+0x410>
		{
			game.player.shared.vx = -RUN_SPEED;
    b926:	84 ec       	ldi	r24, 0xC4	; 196
    b928:	9f ef       	ldi	r25, 0xFF	; 255
    b92a:	90 93 d1 0d 	sts	0x0DD1, r25
    b92e:	80 93 d0 0d 	sts	0x0DD0, r24
			game.player.direction = D_LEFT;
    b932:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    b936:	88 e3       	ldi	r24, 0x38	; 56
    b938:	9e e0       	ldi	r25, 0x0E	; 14
    b93a:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b93e:	41 e0       	ldi	r20, 0x01	; 1
    b940:	0c c0       	rjmp	.+24     	; 0xb95a <update_player+0x428>
		}
		else
		{
			game.player.shared.vx = 0;
    b942:	10 92 d1 0d 	sts	0x0DD1, r1
    b946:	10 92 d0 0d 	sts	0x0DD0, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    b94a:	40 91 ae 0f 	lds	r20, 0x0FAE
    b94e:	88 e3       	ldi	r24, 0x38	; 56
    b950:	9e e0       	ldi	r25, 0x0E	; 14
    b952:	49 83       	std	Y+1, r20	; 0x01
    b954:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    b958:	49 81       	ldd	r20, Y+1	; 0x01
    b95a:	bc 01       	movw	r22, r24
    b95c:	80 e0       	ldi	r24, 0x00	; 0
    b95e:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    b962:	80 91 d2 0d 	lds	r24, 0x0DD2
    b966:	81 11       	cpse	r24, r1
    b968:	b8 c0       	rjmp	.+368    	; 0xbada <update_player+0x5a8>
		{
			game.player.flags = IDLE;
    b96a:	88 e0       	ldi	r24, 0x08	; 8
    b96c:	80 93 d4 0d 	sts	0x0DD4, r24
    b970:	b4 c0       	rjmp	.+360    	; 0xbada <update_player+0x5a8>
		}
	}
	else if (game.player.flags & PRONE)
    b972:	12 ff       	sbrs	r17, 2
    b974:	b2 c0       	rjmp	.+356    	; 0xbada <update_player+0x5a8>
	{
		if (game.joypadState.pressed & BTN_UP)
    b976:	80 91 9a 0f 	lds	r24, 0x0F9A
    b97a:	84 ff       	sbrs	r24, 4
    b97c:	3a c0       	rjmp	.+116    	; 0xb9f2 <update_player+0x4c0>
		{
			game.player.flags = IDLE;	
    b97e:	88 e0       	ldi	r24, 0x08	; 8
    b980:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    b984:	20 e0       	ldi	r18, 0x00	; 0
    b986:	30 e0       	ldi	r19, 0x00	; 0
    b988:	40 e8       	ldi	r20, 0x80	; 128
    b98a:	51 e4       	ldi	r21, 0x41	; 65
    b98c:	60 91 cc 0d 	lds	r22, 0x0DCC
    b990:	70 91 cd 0d 	lds	r23, 0x0DCD
    b994:	80 91 ce 0d 	lds	r24, 0x0DCE
    b998:	90 91 cf 0d 	lds	r25, 0x0DCF
    b99c:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    b9a0:	60 93 cc 0d 	sts	0x0DCC, r22
    b9a4:	70 93 cd 0d 	sts	0x0DCD, r23
    b9a8:	80 93 ce 0d 	sts	0x0DCE, r24
    b9ac:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    b9b0:	80 91 d6 0d 	lds	r24, 0x0DD6
    b9b4:	81 30       	cpi	r24, 0x01	; 1
    b9b6:	b1 f4       	brne	.+44     	; 0xb9e4 <update_player+0x4b2>
			{
				game.player.shared.x += 8;
    b9b8:	20 e0       	ldi	r18, 0x00	; 0
    b9ba:	30 e0       	ldi	r19, 0x00	; 0
    b9bc:	40 e0       	ldi	r20, 0x00	; 0
    b9be:	51 e4       	ldi	r21, 0x41	; 65
    b9c0:	60 91 c8 0d 	lds	r22, 0x0DC8
    b9c4:	70 91 c9 0d 	lds	r23, 0x0DC9
    b9c8:	80 91 ca 0d 	lds	r24, 0x0DCA
    b9cc:	90 91 cb 0d 	lds	r25, 0x0DCB
    b9d0:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    b9d4:	60 93 c8 0d 	sts	0x0DC8, r22
    b9d8:	70 93 c9 0d 	sts	0x0DC9, r23
    b9dc:	80 93 ca 0d 	sts	0x0DCA, r24
    b9e0:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.width = 2;
    b9e4:	82 e0       	ldi	r24, 0x02	; 2
    b9e6:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    b9ea:	83 e0       	ldi	r24, 0x03	; 3
    b9ec:	80 93 d8 0d 	sts	0x0DD8, r24
    b9f0:	74 c0       	rjmp	.+232    	; 0xbada <update_player+0x5a8>
		}
		else if (game.joypadState.pressed & BTN_B)
    b9f2:	80 ff       	sbrs	r24, 0
    b9f4:	51 c0       	rjmp	.+162    	; 0xba98 <update_player+0x566>
		{
			game.player.flags = JUMPING;
    b9f6:	81 e0       	ldi	r24, 0x01	; 1
    b9f8:	80 93 d4 0d 	sts	0x0DD4, r24
			game.player.shared.y -= 16;
    b9fc:	20 e0       	ldi	r18, 0x00	; 0
    b9fe:	30 e0       	ldi	r19, 0x00	; 0
    ba00:	40 e8       	ldi	r20, 0x80	; 128
    ba02:	51 e4       	ldi	r21, 0x41	; 65
    ba04:	60 91 cc 0d 	lds	r22, 0x0DCC
    ba08:	70 91 cd 0d 	lds	r23, 0x0DCD
    ba0c:	80 91 ce 0d 	lds	r24, 0x0DCE
    ba10:	90 91 cf 0d 	lds	r25, 0x0DCF
    ba14:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    ba18:	60 93 cc 0d 	sts	0x0DCC, r22
    ba1c:	70 93 cd 0d 	sts	0x0DCD, r23
    ba20:	80 93 ce 0d 	sts	0x0DCE, r24
    ba24:	90 93 cf 0d 	sts	0x0DCF, r25
			if(game.player.direction == D_RIGHT)
    ba28:	80 91 d6 0d 	lds	r24, 0x0DD6
    ba2c:	81 30       	cpi	r24, 0x01	; 1
    ba2e:	b1 f4       	brne	.+44     	; 0xba5c <update_player+0x52a>
			{
				game.player.shared.x += 8;
    ba30:	20 e0       	ldi	r18, 0x00	; 0
    ba32:	30 e0       	ldi	r19, 0x00	; 0
    ba34:	40 e0       	ldi	r20, 0x00	; 0
    ba36:	51 e4       	ldi	r21, 0x41	; 65
    ba38:	60 91 c8 0d 	lds	r22, 0x0DC8
    ba3c:	70 91 c9 0d 	lds	r23, 0x0DC9
    ba40:	80 91 ca 0d 	lds	r24, 0x0DCA
    ba44:	90 91 cb 0d 	lds	r25, 0x0DCB
    ba48:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
    ba4c:	60 93 c8 0d 	sts	0x0DC8, r22
    ba50:	70 93 c9 0d 	sts	0x0DC9, r23
    ba54:	80 93 ca 0d 	sts	0x0DCA, r24
    ba58:	90 93 cb 0d 	sts	0x0DCB, r25
			}
			game.player.shared.vy = -JUMP_SPEED;
    ba5c:	80 e0       	ldi	r24, 0x00	; 0
    ba5e:	90 e0       	ldi	r25, 0x00	; 0
    ba60:	a6 e1       	ldi	r26, 0x16	; 22
    ba62:	b3 ec       	ldi	r27, 0xC3	; 195
    ba64:	80 93 c4 0d 	sts	0x0DC4, r24
    ba68:	90 93 c5 0d 	sts	0x0DC5, r25
    ba6c:	a0 93 c6 0d 	sts	0x0DC6, r26
    ba70:	b0 93 c7 0d 	sts	0x0DC7, r27
			game.player.shared.gravity = GRAVITY;
    ba74:	8f ef       	ldi	r24, 0xFF	; 255
    ba76:	80 93 d2 0d 	sts	0x0DD2, r24
			game.player.width = 2;
    ba7a:	82 e0       	ldi	r24, 0x02	; 2
    ba7c:	80 93 d7 0d 	sts	0x0DD7, r24
			game.player.height = 3;
    ba80:	83 e0       	ldi	r24, 0x03	; 3
    ba82:	80 93 d8 0d 	sts	0x0DD8, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    ba86:	40 91 ae 0f 	lds	r20, 0x0FAE
    ba8a:	88 e3       	ldi	r24, 0x38	; 56
    ba8c:	9e e0       	ldi	r25, 0x0E	; 14
    ba8e:	49 83       	std	Y+1, r20	; 0x01
    ba90:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    ba94:	49 81       	ldd	r20, Y+1	; 0x01
    ba96:	14 c0       	rjmp	.+40     	; 0xbac0 <update_player+0x58e>
		}
		else if (game.joypadState.pressed & BTN_LEFT)
    ba98:	86 ff       	sbrs	r24, 6
    ba9a:	08 c0       	rjmp	.+16     	; 0xbaac <update_player+0x57a>
		{
			game.player.direction = D_LEFT;
    ba9c:	10 92 d6 0d 	sts	0x0DD6, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
    baa0:	80 e4       	ldi	r24, 0x40	; 64
    baa2:	9e e0       	ldi	r25, 0x0E	; 14
    baa4:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    baa8:	41 e0       	ldi	r20, 0x01	; 1
    baaa:	0a c0       	rjmp	.+20     	; 0xbac0 <update_player+0x58e>
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
    baac:	87 ff       	sbrs	r24, 7
    baae:	15 c0       	rjmp	.+42     	; 0xbada <update_player+0x5a8>
		{
			game.player.direction = D_RIGHT;
    bab0:	81 e0       	ldi	r24, 0x01	; 1
    bab2:	80 93 d6 0d 	sts	0x0DD6, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    bab6:	80 e4       	ldi	r24, 0x40	; 64
    bab8:	9e e0       	ldi	r25, 0x0E	; 14
    baba:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    babe:	40 e0       	ldi	r20, 0x00	; 0
    bac0:	bc 01       	movw	r22, r24
    bac2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    bac4:	0f 90       	pop	r0
    bac6:	df 91       	pop	r29
    bac8:	cf 91       	pop	r28
    baca:	1f 91       	pop	r17
    bacc:	0f 91       	pop	r16
    bace:	ff 90       	pop	r15
    bad0:	ef 90       	pop	r14
    bad2:	df 90       	pop	r13
    bad4:	cf 90       	pop	r12
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), SPRITE_FLIP_X);
		}
		else if (game.joypadState.pressed & BTN_RIGHT)
		{
			game.player.direction = D_RIGHT;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), 0);
    bad6:	0c 94 2d 48 	jmp	0x905a	; 0x905a <LBMapSprite>
		}
	}
}
    bada:	0f 90       	pop	r0
    badc:	df 91       	pop	r29
    bade:	cf 91       	pop	r28
    bae0:	1f 91       	pop	r17
    bae2:	0f 91       	pop	r16
    bae4:	ff 90       	pop	r15
    bae6:	ef 90       	pop	r14
    bae8:	df 90       	pop	r13
    baea:	cf 90       	pop	r12
    baec:	08 95       	ret

0000baee <select_pressed>:
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

char select_pressed(JoyPadState* p)
{
    baee:	fc 01       	movw	r30, r24
    baf0:	20 81       	ld	r18, Z
    baf2:	31 81       	ldd	r19, Z+1	; 0x01
    baf4:	28 70       	andi	r18, 0x08	; 8
    baf6:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    baf8:	81 e0       	ldi	r24, 0x01	; 1
    bafa:	23 2b       	or	r18, r19
    bafc:	09 f4       	brne	.+2      	; 0xbb00 <select_pressed+0x12>
    bafe:	80 e0       	ldi	r24, 0x00	; 0
}
    bb00:	08 95       	ret

0000bb02 <stream_dialogue>:


void stream_dialogue(const char* dialogue, u8 y)
{
    bb02:	ff 92       	push	r15
    bb04:	0f 93       	push	r16
    bb06:	1f 93       	push	r17
    bb08:	cf 93       	push	r28
    bb0a:	df 93       	push	r29
    bb0c:	ec 01       	movw	r28, r24
    bb0e:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    bb10:	8e e0       	ldi	r24, 0x0E	; 14
    bb12:	f8 2e       	mov	r15, r24

void stream_dialogue(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    bb14:	fe 01       	movw	r30, r28
    bb16:	84 91       	lpm	r24, Z
    bb18:	83 32       	cpi	r24, 0x23	; 35
    bb1a:	21 f1       	breq	.+72     	; 0xbb64 <stream_dialogue+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    bb1c:	6f ef       	ldi	r22, 0xFF	; 255
    bb1e:	70 e0       	ldi	r23, 0x00	; 0
    bb20:	ce 01       	movw	r24, r28
    bb22:	0e 94 8d 62 	call	0xc51a	; 0xc51a <strnlen_P>
		x = 14 - ln / 2;
    bb26:	86 95       	lsr	r24
    bb28:	0f 2d       	mov	r16, r15
    bb2a:	08 1b       	sub	r16, r24
    bb2c:	0c 1b       	sub	r16, r28
    bb2e:	8c 2f       	mov	r24, r28
    bb30:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    bb32:	21 96       	adiw	r28, 0x01	; 1
    bb34:	fe 01       	movw	r30, r28
    bb36:	31 97       	sbiw	r30, 0x01	; 1
    bb38:	44 91       	lpm	r20, Z
    bb3a:	44 23       	and	r20, r20
    bb3c:	89 f0       	breq	.+34     	; 0xbb60 <stream_dialogue+0x5e>
		{
			LBPrintChar(x++, y, c);
    bb3e:	61 2f       	mov	r22, r17
    bb40:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <LBPrintChar>
			LBGetJoyPadState(&game.joypadState, 0);
    bb44:	60 e0       	ldi	r22, 0x00	; 0
    bb46:	8a e9       	ldi	r24, 0x9A	; 154
    bb48:	9f e0       	ldi	r25, 0x0F	; 15
    bb4a:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <LBGetJoyPadState>
			if (!(game.joypadState.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    bb4e:	80 91 9e 0f 	lds	r24, 0x0F9E
    bb52:	80 fd       	sbrc	r24, 0
    bb54:	ec cf       	rjmp	.-40     	; 0xbb2e <stream_dialogue+0x2c>
    bb56:	80 e7       	ldi	r24, 0x70	; 112
    bb58:	97 e1       	ldi	r25, 0x17	; 23
    bb5a:	0e 94 45 38 	call	0x708a	; 0x708a <WaitUs>
    bb5e:	e7 cf       	rjmp	.-50     	; 0xbb2e <stream_dialogue+0x2c>
		}
		y++;
    bb60:	1f 5f       	subi	r17, 0xFF	; 255
    bb62:	d8 cf       	rjmp	.-80     	; 0xbb14 <stream_dialogue+0x12>
	}
}
    bb64:	df 91       	pop	r29
    bb66:	cf 91       	pop	r28
    bb68:	1f 91       	pop	r17
    bb6a:	0f 91       	pop	r16
    bb6c:	ff 90       	pop	r15
    bb6e:	08 95       	ret

0000bb70 <map_particles>:

void map_particles()
{
    bb70:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    bb72:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    bb74:	40 e0       	ldi	r20, 0x00	; 0
    bb76:	68 eb       	ldi	r22, 0xB8	; 184
    bb78:	7d e2       	ldi	r23, 0x2D	; 45
    bb7a:	8c 2f       	mov	r24, r28
    bb7c:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    bb80:	cf 5f       	subi	r28, 0xFF	; 255
    bb82:	c4 31       	cpi	r28, 0x14	; 20
    bb84:	b9 f7       	brne	.-18     	; 0xbb74 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    bb86:	cf 91       	pop	r28
    bb88:	08 95       	ret

0000bb8a <place_particles>:

void place_particles()
{
    bb8a:	0f 93       	push	r16
    bb8c:	1f 93       	push	r17
    bb8e:	cf 93       	push	r28
    bb90:	df 93       	push	r29
    bb92:	1f 92       	push	r1
    bb94:	cd b7       	in	r28, 0x3d	; 61
    bb96:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    bb98:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    bb9a:	68 ec       	ldi	r22, 0xC8	; 200
    bb9c:	70 e0       	ldi	r23, 0x00	; 0
    bb9e:	80 e0       	ldi	r24, 0x00	; 0
    bba0:	90 e0       	ldi	r25, 0x00	; 0
    bba2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <LBRandom>
    bba6:	48 2f       	mov	r20, r24
    bba8:	60 ee       	ldi	r22, 0xE0	; 224
    bbaa:	70 e0       	ldi	r23, 0x00	; 0
    bbac:	80 e0       	ldi	r24, 0x00	; 0
    bbae:	90 e0       	ldi	r25, 0x00	; 0
    bbb0:	49 83       	std	Y+1, r20	; 0x01
    bbb2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <LBRandom>
    bbb6:	68 2f       	mov	r22, r24
    bbb8:	01 e0       	ldi	r16, 0x01	; 1
    bbba:	21 e0       	ldi	r18, 0x01	; 1
    bbbc:	49 81       	ldd	r20, Y+1	; 0x01
    bbbe:	81 2f       	mov	r24, r17
    bbc0:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    bbc4:	1f 5f       	subi	r17, 0xFF	; 255
    bbc6:	14 31       	cpi	r17, 0x14	; 20
    bbc8:	41 f7       	brne	.-48     	; 0xbb9a <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    bbca:	0f 90       	pop	r0
    bbcc:	df 91       	pop	r29
    bbce:	cf 91       	pop	r28
    bbd0:	1f 91       	pop	r17
    bbd2:	0f 91       	pop	r16
    bbd4:	08 95       	ret

0000bbd6 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    bbd6:	ef 92       	push	r14
    bbd8:	ff 92       	push	r15
    bbda:	0f 93       	push	r16
    bbdc:	1f 93       	push	r17
    bbde:	cf 93       	push	r28
    bbe0:	df 93       	push	r29
    bbe2:	d8 2f       	mov	r29, r24
    bbe4:	16 2f       	mov	r17, r22
    bbe6:	80 ed       	ldi	r24, 0xD0	; 208
    bbe8:	e8 2e       	mov	r14, r24
    bbea:	8f e0       	ldi	r24, 0x0F	; 15
    bbec:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    bbee:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    bbf0:	f7 01       	movw	r30, r14
    bbf2:	40 81       	ld	r20, Z
    bbf4:	4d 0f       	add	r20, r29
    bbf6:	01 e0       	ldi	r16, 0x01	; 1
    bbf8:	21 e0       	ldi	r18, 0x01	; 1
    bbfa:	31 97       	sbiw	r30, 0x01	; 1
    bbfc:	60 81       	ld	r22, Z
    bbfe:	8c 2f       	mov	r24, r28
    bc00:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    bc04:	f7 01       	movw	r30, r14
    bc06:	80 81       	ld	r24, Z
    bc08:	89 3c       	cpi	r24, 0xC9	; 201
    bc0a:	60 f0       	brcs	.+24     	; 0xbc24 <animate_particles+0x4e>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    bc0c:	60 ee       	ldi	r22, 0xE0	; 224
    bc0e:	70 e0       	ldi	r23, 0x00	; 0
    bc10:	80 e0       	ldi	r24, 0x00	; 0
    bc12:	90 e0       	ldi	r25, 0x00	; 0
    bc14:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <LBRandom>
    bc18:	21 e0       	ldi	r18, 0x01	; 1
    bc1a:	41 2f       	mov	r20, r17
    bc1c:	68 2f       	mov	r22, r24
    bc1e:	8c 2f       	mov	r24, r28
    bc20:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    bc24:	cf 5f       	subi	r28, 0xFF	; 255
    bc26:	f4 e0       	ldi	r31, 0x04	; 4
    bc28:	ef 0e       	add	r14, r31
    bc2a:	f1 1c       	adc	r15, r1
    bc2c:	c4 31       	cpi	r28, 0x14	; 20
    bc2e:	01 f7       	brne	.-64     	; 0xbbf0 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    bc30:	df 91       	pop	r29
    bc32:	cf 91       	pop	r28
    bc34:	1f 91       	pop	r17
    bc36:	0f 91       	pop	r16
    bc38:	ff 90       	pop	r15
    bc3a:	ef 90       	pop	r14
    bc3c:	08 95       	ret

0000bc3e <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    bc3e:	82 50       	subi	r24, 0x02	; 2
    bc40:	87 30       	cpi	r24, 0x07	; 7
    bc42:	48 f4       	brcc	.+18     	; 0xbc56 <get_emarald_map+0x18>
    bc44:	e8 2f       	mov	r30, r24
    bc46:	f0 e0       	ldi	r31, 0x00	; 0
    bc48:	ee 0f       	add	r30, r30
    bc4a:	ff 1f       	adc	r31, r31
    bc4c:	ee 5f       	subi	r30, 0xFE	; 254
    bc4e:	fa 4f       	sbci	r31, 0xFA	; 250
    bc50:	80 81       	ld	r24, Z
    bc52:	91 81       	ldd	r25, Z+1	; 0x01
    bc54:	08 95       	ret
    bc56:	89 ea       	ldi	r24, 0xA9	; 169
    bc58:	9d e2       	ldi	r25, 0x2D	; 45
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    bc5a:	08 95       	ret

0000bc5c <planet_transition>:

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bc5c:	cf 92       	push	r12
    bc5e:	df 92       	push	r13
    bc60:	ef 92       	push	r14
    bc62:	ff 92       	push	r15
    bc64:	0f 93       	push	r16
    bc66:	1f 93       	push	r17
    bc68:	cf 93       	push	r28
    bc6a:	df 93       	push	r29
    bc6c:	1f 92       	push	r1
    bc6e:	cd b7       	in	r28, 0x3d	; 61
    bc70:	de b7       	in	r29, 0x3e	; 62
    bc72:	c8 2e       	mov	r12, r24
    bc74:	e6 2e       	mov	r14, r22
    bc76:	12 2f       	mov	r17, r18
    bc78:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    bc7a:	49 83       	std	Y+1, r20	; 0x01
    bc7c:	0e 94 2a 59 	call	0xb254	; 0xb254 <fade_through>
	map_particles();
    bc80:	0e 94 b8 5d 	call	0xbb70	; 0xbb70 <map_particles>
	map_ship();
    bc84:	0e 94 14 4d 	call	0x9a28	; 0x9a28 <map_ship>
	place_particles();
    bc88:	0e 94 c5 5d 	call	0xbb8a	; 0xbb8a <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    bc8c:	4e ea       	ldi	r20, 0xAE	; 174
    bc8e:	54 e6       	ldi	r21, 0x64	; 100
    bc90:	69 81       	ldd	r22, Y+1	; 0x01
    bc92:	80 e0       	ldi	r24, 0x00	; 0
    bc94:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <DrawMap>
	game.current_level_index = index;
    bc98:	c0 92 b7 0d 	sts	0x0DB7, r12
	if (!is_space())
    bc9c:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    bca0:	81 11       	cpse	r24, r1
    bca2:	0f c0       	rjmp	.+30     	; 0xbcc2 <planet_transition+0x66>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    bca4:	8c 2d       	mov	r24, r12
    bca6:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <get_emarald_map>
    bcaa:	40 e0       	ldi	r20, 0x00	; 0
    bcac:	bc 01       	movw	r22, r24
    bcae:	88 e0       	ldi	r24, 0x08	; 8
    bcb0:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    bcb4:	01 e0       	ldi	r16, 0x01	; 1
    bcb6:	21 e0       	ldi	r18, 0x01	; 1
    bcb8:	40 e3       	ldi	r20, 0x30	; 48
    bcba:	60 e7       	ldi	r22, 0x70	; 112
    bcbc:	88 e0       	ldi	r24, 0x08	; 8
    bcbe:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
		default: return map_emerald_0;
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    bcc2:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    bcc4:	81 e0       	ldi	r24, 0x01	; 1
    bcc6:	90 e0       	ldi	r25, 0x00	; 0
    bcc8:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    bccc:	80 e3       	ldi	r24, 0x30	; 48
    bcce:	9e e0       	ldi	r25, 0x0E	; 14
    bcd0:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    bcd4:	40 e0       	ldi	r20, 0x00	; 0
    bcd6:	bc 01       	movw	r22, r24
    bcd8:	80 e0       	ldi	r24, 0x00	; 0
    bcda:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    bcde:	02 e0       	ldi	r16, 0x02	; 2
    bce0:	24 e0       	ldi	r18, 0x04	; 4
    bce2:	48 e6       	ldi	r20, 0x68	; 104
    bce4:	68 e6       	ldi	r22, 0x68	; 104
    bce6:	80 e0       	ldi	r24, 0x00	; 0
    bce8:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
		frame_counter++;
    bcec:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    bcee:	8d 2d       	mov	r24, r13
    bcf0:	8f 70       	andi	r24, 0x0F	; 15
    bcf2:	29 f4       	brne	.+10     	; 0xbcfe <planet_transition+0xa2>
    bcf4:	90 91 b3 0c 	lds	r25, 0x0CB3
    bcf8:	9e 0d       	add	r25, r14
    bcfa:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    bcfe:	6f 2d       	mov	r22, r15
    bd00:	81 2f       	mov	r24, r17
    bd02:	0e 94 eb 5d 	call	0xbbd6	; 0xbbd6 <animate_particles>
		LBRotateSprites();
    bd06:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    bd0a:	8f ef       	ldi	r24, 0xFF	; 255
    bd0c:	d8 12       	cpse	r13, r24
    bd0e:	da cf       	rjmp	.-76     	; 0xbcc4 <planet_transition+0x68>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    bd10:	82 e0       	ldi	r24, 0x02	; 2
    bd12:	80 93 b6 0d 	sts	0x0DB6, r24
	ClearVram();
    bd16:	0e 94 0f 38 	call	0x701e	; 0x701e <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    bd1a:	64 e1       	ldi	r22, 0x14	; 20
    bd1c:	80 e0       	ldi	r24, 0x00	; 0
    bd1e:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
	LBRotateSprites();
    bd22:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	fade_through();
    bd26:	0e 94 2a 59 	call	0xb254	; 0xb254 <fade_through>
	load_level(index, true);
    bd2a:	61 e0       	ldi	r22, 0x01	; 1
    bd2c:	8c 2d       	mov	r24, r12
    bd2e:	0e 94 3a 59 	call	0xb274	; 0xb274 <load_level>
	init_player_state();
    bd32:	0e 94 1d 49 	call	0x923a	; 0x923a <init_player_state>
	init_enemy_state();
}
    bd36:	0f 90       	pop	r0
    bd38:	df 91       	pop	r29
    bd3a:	cf 91       	pop	r28
    bd3c:	1f 91       	pop	r17
    bd3e:	0f 91       	pop	r16
    bd40:	ff 90       	pop	r15
    bd42:	ef 90       	pop	r14
    bd44:	df 90       	pop	r13
    bd46:	cf 90       	pop	r12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
	LBRotateSprites();
	fade_through();
	load_level(index, true);
	init_player_state();
	init_enemy_state();
    bd48:	0c 94 09 49 	jmp	0x9212	; 0x9212 <init_enemy_state>

0000bd4c <update_level>:
		}
	}
}

void update_level()
{
    bd4c:	cf 92       	push	r12
    bd4e:	df 92       	push	r13
    bd50:	ef 92       	push	r14
    bd52:	ff 92       	push	r15
    bd54:	0f 93       	push	r16
    bd56:	cf 93       	push	r28
    bd58:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    bd5a:	c0 91 ab 0d 	lds	r28, 0x0DAB
    bd5e:	d0 91 ac 0d 	lds	r29, 0x0DAC
    bd62:	be 01       	movw	r22, r28
    bd64:	80 e0       	ldi	r24, 0x00	; 0
    bd66:	90 e0       	ldi	r25, 0x00	; 0
    bd68:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    bd6c:	9b 01       	movw	r18, r22
    bd6e:	ac 01       	movw	r20, r24
    bd70:	60 91 c8 0d 	lds	r22, 0x0DC8
    bd74:	70 91 c9 0d 	lds	r23, 0x0DC9
    bd78:	80 91 ca 0d 	lds	r24, 0x0DCA
    bd7c:	90 91 cb 0d 	lds	r25, 0x0DCB
    bd80:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    bd84:	6b 01       	movw	r12, r22
    bd86:	7c 01       	movw	r14, r24
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    bd88:	80 91 bc 0d 	lds	r24, 0x0DBC
    bd8c:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    bd8e:	8c 33       	cpi	r24, 0x3C	; 60
    bd90:	19 f0       	breq	.+6      	; 0xbd98 <update_level+0x4c>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    bd92:	80 93 bc 0d 	sts	0x0DBC, r24
    bd96:	0f c0       	rjmp	.+30     	; 0xbdb6 <update_level+0x6a>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    bd98:	10 92 bc 0d 	sts	0x0DBC, r1
		if (game.time != 65535) game.time++;
    bd9c:	80 91 b1 0d 	lds	r24, 0x0DB1
    bda0:	90 91 b2 0d 	lds	r25, 0x0DB2
    bda4:	8f 3f       	cpi	r24, 0xFF	; 255
    bda6:	2f ef       	ldi	r18, 0xFF	; 255
    bda8:	92 07       	cpc	r25, r18
    bdaa:	29 f0       	breq	.+10     	; 0xbdb6 <update_level+0x6a>
    bdac:	01 96       	adiw	r24, 0x01	; 1
    bdae:	90 93 b2 0d 	sts	0x0DB2, r25
    bdb2:	80 93 b1 0d 	sts	0x0DB1, r24
	}
	
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    bdb6:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    bdba:	93 e0       	ldi	r25, 0x03	; 3
    bdbc:	d6 95       	lsr	r29
    bdbe:	c7 95       	ror	r28
    bdc0:	9a 95       	dec	r25
    bdc2:	e1 f7       	brne	.-8      	; 0xbdbc <update_level+0x70>
    bdc4:	88 23       	and	r24, r24
    bdc6:	61 f0       	breq	.+24     	; 0xbde0 <update_level+0x94>
    bdc8:	80 91 b8 0d 	lds	r24, 0x0DB8
    bdcc:	90 e0       	ldi	r25, 0x00	; 0
    bdce:	9e 01       	movw	r18, r28
    bdd0:	24 5e       	subi	r18, 0xE4	; 228
    bdd2:	3f 4f       	sbci	r19, 0xFF	; 255
    bdd4:	28 17       	cp	r18, r24
    bdd6:	39 07       	cpc	r19, r25
    bdd8:	18 f4       	brcc	.+6      	; 0xbde0 <update_level+0x94>
	{
		move_camera_x();
    bdda:	0e 94 e0 4c 	call	0x99c0	; 0x99c0 <move_camera_x>
    bdde:	20 c0       	rjmp	.+64     	; 0xbe20 <update_level+0xd4>
	}
	else if (game.player.shared.vx > 0 &&
    bde0:	80 91 d0 0d 	lds	r24, 0x0DD0
    bde4:	90 91 d1 0d 	lds	r25, 0x0DD1
    bde8:	18 16       	cp	r1, r24
    bdea:	19 06       	cpc	r1, r25
    bdec:	9c f4       	brge	.+38     	; 0xbe14 <update_level+0xc8>
    bdee:	20 e0       	ldi	r18, 0x00	; 0
    bdf0:	30 e0       	ldi	r19, 0x00	; 0
    bdf2:	40 ee       	ldi	r20, 0xE0	; 224
    bdf4:	52 e4       	ldi	r21, 0x42	; 66
    bdf6:	c7 01       	movw	r24, r14
    bdf8:	b6 01       	movw	r22, r12
    bdfa:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    bdfe:	87 fd       	sbrc	r24, 7
    be00:	09 c0       	rjmp	.+18     	; 0xbe14 <update_level+0xc8>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    be02:	80 91 b8 0d 	lds	r24, 0x0DB8
    be06:	90 e0       	ldi	r25, 0x00	; 0
	if (is_space() && game.camera_x/8 + CAMERA_WIDTH < game.level_width)
	{
		move_camera_x();
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    be08:	9e 01       	movw	r18, r28
    be0a:	24 5e       	subi	r18, 0xE4	; 228
    be0c:	3f 4f       	sbci	r19, 0xFF	; 255
    be0e:	28 17       	cp	r18, r24
    be10:	39 07       	cpc	r19, r25
    be12:	18 f3       	brcs	.-58     	; 0xbdda <update_level+0x8e>
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
	{
		move_camera_x();
	}
	else if (game.camera_x/8 + CAMERA_WIDTH >= 50)//game.level_width)
    be14:	6c 96       	adiw	r28, 0x1c	; 28
    be16:	e2 97       	sbiw	r28, 0x32	; 50
    be18:	18 f0       	brcs	.+6      	; 0xbe20 <update_level+0xd4>
	{
		game.level_ended = 1;
    be1a:	81 e0       	ldi	r24, 0x01	; 1
    be1c:	80 93 c3 0d 	sts	0x0DC3, r24
	}
	
	if (game.player.shared.vy > 0 &&
    be20:	20 e0       	ldi	r18, 0x00	; 0
    be22:	30 e0       	ldi	r19, 0x00	; 0
    be24:	a9 01       	movw	r20, r18
    be26:	60 91 c4 0d 	lds	r22, 0x0DC4
    be2a:	70 91 c5 0d 	lds	r23, 0x0DC5
    be2e:	80 91 c6 0d 	lds	r24, 0x0DC6
    be32:	90 91 c7 0d 	lds	r25, 0x0DC7
    be36:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    be3a:	18 16       	cp	r1, r24
    be3c:	8c f5       	brge	.+98     	; 0xbea0 <update_level+0x154>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    be3e:	c0 91 ad 0d 	lds	r28, 0x0DAD
    be42:	d0 91 ae 0d 	lds	r29, 0x0DAE
    be46:	be 01       	movw	r22, r28
    be48:	80 e0       	ldi	r24, 0x00	; 0
    be4a:	90 e0       	ldi	r25, 0x00	; 0
    be4c:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <__floatunsisf>
    be50:	9b 01       	movw	r18, r22
    be52:	ac 01       	movw	r20, r24
    be54:	60 91 cc 0d 	lds	r22, 0x0DCC
    be58:	70 91 cd 0d 	lds	r23, 0x0DCD
    be5c:	80 91 ce 0d 	lds	r24, 0x0DCE
    be60:	90 91 cf 0d 	lds	r25, 0x0DCF
    be64:	0e 94 df 60 	call	0xc1be	; 0xc1be <__subsf3>
    be68:	20 e0       	ldi	r18, 0x00	; 0
    be6a:	30 e0       	ldi	r19, 0x00	; 0
    be6c:	40 ec       	ldi	r20, 0xC0	; 192
    be6e:	51 e4       	ldi	r21, 0x41	; 65
    be70:	0e 94 e0 60 	call	0xc1c0	; 0xc1c0 <__addsf3>
	else if (game.camera_x/8 + CAMERA_WIDTH >= 50)//game.level_width)
	{
		game.level_ended = 1;
	}
	
	if (game.player.shared.vy > 0 &&
    be74:	20 e0       	ldi	r18, 0x00	; 0
    be76:	30 e0       	ldi	r19, 0x00	; 0
    be78:	40 e4       	ldi	r20, 0x40	; 64
    be7a:	53 e4       	ldi	r21, 0x43	; 67
    be7c:	0e 94 26 62 	call	0xc44c	; 0xc44c <__gesf2>
    be80:	87 fd       	sbrc	r24, 7
    be82:	0e c0       	rjmp	.+28     	; 0xbea0 <update_level+0x154>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
    be84:	83 e0       	ldi	r24, 0x03	; 3
    be86:	d6 95       	lsr	r29
    be88:	c7 95       	ror	r28
    be8a:	8a 95       	dec	r24
    be8c:	e1 f7       	brne	.-8      	; 0xbe86 <update_level+0x13a>
    be8e:	6a 96       	adiw	r28, 0x1a	; 26
    be90:	80 91 b9 0d 	lds	r24, 0x0DB9
    be94:	90 e0       	ldi	r25, 0x00	; 0
	{
		game.level_ended = 1;
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    be96:	c8 17       	cp	r28, r24
    be98:	d9 07       	cpc	r29, r25
    be9a:	10 f4       	brcc	.+4      	; 0xbea0 <update_level+0x154>
		(game.camera_y/8 + CAMERA_HEIGHT < game.level_height))
	{
		move_camera_y();
    be9c:	0e 94 f9 4c 	call	0x99f2	; 0x99f2 <move_camera_y>
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    bea0:	21 e0       	ldi	r18, 0x01	; 1
    bea2:	40 91 b5 0d 	lds	r20, 0x0DB5
    bea6:	6f e1       	ldi	r22, 0x1F	; 31
    bea8:	89 e0       	ldi	r24, 0x09	; 9
    beaa:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    beae:	40 91 af 0d 	lds	r20, 0x0DAF
    beb2:	50 91 b0 0d 	lds	r21, 0x0DB0
    beb6:	21 e0       	ldi	r18, 0x01	; 1
    beb8:	6f e1       	ldi	r22, 0x1F	; 31
    beba:	8b e1       	ldi	r24, 0x1B	; 27
    bebc:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    bec0:	21 e0       	ldi	r18, 0x01	; 1
    bec2:	40 91 d9 0d 	lds	r20, 0x0DD9
    bec6:	6e e1       	ldi	r22, 0x1E	; 30
    bec8:	89 e0       	ldi	r24, 0x09	; 9
    beca:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.time ,true);
    bece:	40 91 b1 0d 	lds	r20, 0x0DB1
    bed2:	50 91 b2 0d 	lds	r21, 0x0DB2
    bed6:	21 e0       	ldi	r18, 0x01	; 1
    bed8:	6e e1       	ldi	r22, 0x1E	; 30
    beda:	8b e1       	ldi	r24, 0x1B	; 27
    bedc:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    bee0:	80 91 c3 0d 	lds	r24, 0x0DC3
    bee4:	88 23       	and	r24, r24
    bee6:	09 f4       	brne	.+2      	; 0xbeea <update_level+0x19e>
    bee8:	4f c0       	rjmp	.+158    	; 0xbf88 <update_level+0x23c>
    beea:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <is_space>
    beee:	81 11       	cpse	r24, r1
    bef0:	42 c0       	rjmp	.+132    	; 0xbf76 <update_level+0x22a>
    bef2:	80 91 d4 0d 	lds	r24, 0x0DD4
    bef6:	8e 70       	andi	r24, 0x0E	; 14
    bef8:	09 f4       	brne	.+2      	; 0xbefc <update_level+0x1b0>
    befa:	46 c0       	rjmp	.+140    	; 0xbf88 <update_level+0x23c>
	{
		map_ship();
    befc:	0e 94 14 4d 	call	0x9a28	; 0x9a28 <map_ship>

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    bf00:	d3 e0       	ldi	r29, 0x03	; 3
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    bf02:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    bf04:	81 e0       	ldi	r24, 0x01	; 1
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    bf0c:	8c 2f       	mov	r24, r28
    bf0e:	90 e0       	ldi	r25, 0x00	; 0
    bf10:	88 3a       	cpi	r24, 0xA8	; 168
    bf12:	91 05       	cpc	r25, r1
    bf14:	6c f0       	brlt	.+26     	; 0xbf30 <update_level+0x1e4>
			{
				clear_sprites(0, game.player.width*game.player.height);
    bf16:	80 91 d8 0d 	lds	r24, 0x0DD8
    bf1a:	60 91 d7 0d 	lds	r22, 0x0DD7
    bf1e:	86 9f       	mul	r24, r22
    bf20:	60 2d       	mov	r22, r0
    bf22:	11 24       	eor	r1, r1
    bf24:	80 e0       	ldi	r24, 0x00	; 0
    bf26:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
				LBRotateSprites();
    bf2a:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
				ship_increment = -3;
    bf2e:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    bf30:	80 e3       	ldi	r24, 0x30	; 48
    bf32:	9e e0       	ldi	r25, 0x0E	; 14
    bf34:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <LBGetNextFrame>
    bf38:	40 e0       	ldi	r20, 0x00	; 0
    bf3a:	bc 01       	movw	r22, r24
    bf3c:	86 e0       	ldi	r24, 0x06	; 6
    bf3e:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	}
}

void update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    bf42:	c7 01       	movw	r24, r14
    bf44:	b6 01       	movw	r22, r12
    bf46:	0e 94 48 61 	call	0xc290	; 0xc290 <__fixunssfsi>
				clear_sprites(0, game.player.width*game.player.height);
				LBRotateSprites();
				ship_increment = -3;
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    bf4a:	02 e0       	ldi	r16, 0x02	; 2
    bf4c:	24 e0       	ldi	r18, 0x04	; 4
    bf4e:	4c 2f       	mov	r20, r28
    bf50:	86 e0       	ldi	r24, 0x06	; 6
    bf52:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
			ship_y += ship_increment;
    bf56:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    bf58:	59 f4       	brne	.+22     	; 0xbf70 <update_level+0x224>
			{
				clear_sprites(6, 8);
    bf5a:	68 e0       	ldi	r22, 0x08	; 8
    bf5c:	86 e0       	ldi	r24, 0x06	; 6
    bf5e:	0e 94 08 59 	call	0xb210	; 0xb210 <clear_sprites>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    bf62:	80 91 b7 0d 	lds	r24, 0x0DB7
    bf66:	00 e0       	ldi	r16, 0x00	; 0
    bf68:	23 e0       	ldi	r18, 0x03	; 3
    bf6a:	4a e1       	ldi	r20, 0x1A	; 26
    bf6c:	6f ef       	ldi	r22, 0xFF	; 255
    bf6e:	09 c0       	rjmp	.+18     	; 0xbf82 <update_level+0x236>
				break;
			}
			LBRotateSprites();
    bf70:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
		}
    bf74:	c7 cf       	rjmp	.-114    	; 0xbf04 <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    bf76:	80 91 b7 0d 	lds	r24, 0x0DB7
    bf7a:	07 ec       	ldi	r16, 0xC7	; 199
    bf7c:	2d ef       	ldi	r18, 0xFD	; 253
    bf7e:	4c e1       	ldi	r20, 0x1C	; 28
    bf80:	61 e0       	ldi	r22, 0x01	; 1
    bf82:	8f 5f       	subi	r24, 0xFF	; 255
    bf84:	0e 94 2e 5e 	call	0xbc5c	; 0xbc5c <planet_transition>
	}
	
}
    bf88:	df 91       	pop	r29
    bf8a:	cf 91       	pop	r28
    bf8c:	0f 91       	pop	r16
    bf8e:	ff 90       	pop	r15
    bf90:	ef 90       	pop	r14
    bf92:	df 90       	pop	r13
    bf94:	cf 90       	pop	r12
    bf96:	08 95       	ret

0000bf98 <intro>:
	init_enemy_state();
}


void intro()
{
    bf98:	0f 93       	push	r16
	fade_through();
    bf9a:	0e 94 2a 59 	call	0xb254	; 0xb254 <fade_through>
	StartSong(planetsong);
    bf9e:	8d e2       	ldi	r24, 0x2D	; 45
    bfa0:	92 e1       	ldi	r25, 0x12	; 18
    bfa2:	0e 94 a2 3a 	call	0x7544	; 0x7544 <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    bfa6:	40 e0       	ldi	r20, 0x00	; 0
    bfa8:	69 ea       	ldi	r22, 0xA9	; 169
    bfaa:	7d e2       	ldi	r23, 0x2D	; 45
    bfac:	80 e0       	ldi	r24, 0x00	; 0
    bfae:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    bfb2:	01 e0       	ldi	r16, 0x01	; 1
    bfb4:	21 e0       	ldi	r18, 0x01	; 1
    bfb6:	40 e3       	ldi	r20, 0x30	; 48
    bfb8:	60 e5       	ldi	r22, 0x50	; 80
    bfba:	80 e0       	ldi	r24, 0x00	; 0
    bfbc:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    bfc0:	40 e0       	ldi	r20, 0x00	; 0
    bfc2:	6c ea       	ldi	r22, 0xAC	; 172
    bfc4:	7d e2       	ldi	r23, 0x2D	; 45
    bfc6:	81 e0       	ldi	r24, 0x01	; 1
    bfc8:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    bfcc:	21 e0       	ldi	r18, 0x01	; 1
    bfce:	40 e3       	ldi	r20, 0x30	; 48
    bfd0:	60 e6       	ldi	r22, 0x60	; 96
    bfd2:	81 e0       	ldi	r24, 0x01	; 1
    bfd4:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    bfd8:	40 e0       	ldi	r20, 0x00	; 0
    bfda:	66 ea       	ldi	r22, 0xA6	; 166
    bfdc:	7d e2       	ldi	r23, 0x2D	; 45
    bfde:	82 e0       	ldi	r24, 0x02	; 2
    bfe0:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    bfe4:	21 e0       	ldi	r18, 0x01	; 1
    bfe6:	40 e3       	ldi	r20, 0x30	; 48
    bfe8:	60 e7       	ldi	r22, 0x70	; 112
    bfea:	82 e0       	ldi	r24, 0x02	; 2
    bfec:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    bff0:	40 e0       	ldi	r20, 0x00	; 0
    bff2:	63 ea       	ldi	r22, 0xA3	; 163
    bff4:	7d e2       	ldi	r23, 0x2D	; 45
    bff6:	83 e0       	ldi	r24, 0x03	; 3
    bff8:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    bffc:	21 e0       	ldi	r18, 0x01	; 1
    bffe:	40 e3       	ldi	r20, 0x30	; 48
    c000:	60 e8       	ldi	r22, 0x80	; 128
    c002:	83 e0       	ldi	r24, 0x03	; 3
    c004:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c008:	40 e0       	ldi	r20, 0x00	; 0
    c00a:	60 ea       	ldi	r22, 0xA0	; 160
    c00c:	7d e2       	ldi	r23, 0x2D	; 45
    c00e:	84 e0       	ldi	r24, 0x04	; 4
    c010:	0e 94 2d 48 	call	0x905a	; 0x905a <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c014:	21 e0       	ldi	r18, 0x01	; 1
    c016:	40 e3       	ldi	r20, 0x30	; 48
    c018:	60 e9       	ldi	r22, 0x90	; 144
    c01a:	84 e0       	ldi	r24, 0x04	; 4
    c01c:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	LBRotateSprites();
    c020:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	stream_dialogue((const char*) strIntro, 12);
    c024:	6c e0       	ldi	r22, 0x0C	; 12
    c026:	8d e4       	ldi	r24, 0x4D	; 77
    c028:	9a e0       	ldi	r25, 0x0A	; 10
    c02a:	0e 94 81 5d 	call	0xbb02	; 0xbb02 <stream_dialogue>
	LBWaitSeconds(1);
    c02e:	81 e0       	ldi	r24, 0x01	; 1
    c030:	0e 94 1e 48 	call	0x903c	; 0x903c <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    c034:	07 ec       	ldi	r16, 0xC7	; 199
    c036:	2d ef       	ldi	r18, 0xFD	; 253
    c038:	4c e1       	ldi	r20, 0x1C	; 28
    c03a:	61 e0       	ldi	r22, 0x01	; 1
    c03c:	80 e0       	ldi	r24, 0x00	; 0
    c03e:	0e 94 2e 5e 	call	0xbc5c	; 0xbc5c <planet_transition>
}
    c042:	0f 91       	pop	r16
    c044:	08 95       	ret

0000c046 <update_splash>:

void update_splash()
{
    c046:	0f 93       	push	r16
    c048:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    c04a:	80 91 9a 0f 	lds	r24, 0x0F9A
    c04e:	c0 91 bb 0d 	lds	r28, 0x0DBB
    c052:	85 ff       	sbrs	r24, 5
    c054:	06 c0       	rjmp	.+12     	; 0xc062 <update_splash+0x1c>
    c056:	c1 11       	cpse	r28, r1
    c058:	04 c0       	rjmp	.+8      	; 0xc062 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    c05a:	81 e0       	ldi	r24, 0x01	; 1
    c05c:	80 93 bb 0d 	sts	0x0DBB, r24
    c060:	06 c0       	rjmp	.+12     	; 0xc06e <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    c062:	84 ff       	sbrs	r24, 4
    c064:	0a c0       	rjmp	.+20     	; 0xc07a <update_splash+0x34>
    c066:	c1 30       	cpi	r28, 0x01	; 1
    c068:	41 f4       	brne	.+16     	; 0xc07a <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    c06a:	10 92 bb 0d 	sts	0x0DBB, r1
		SFX_NAVIGATE;
    c06e:	41 e0       	ldi	r20, 0x01	; 1
    c070:	6f ef       	ldi	r22, 0xFF	; 255
    c072:	82 e0       	ldi	r24, 0x02	; 2
    c074:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
    c078:	11 c0       	rjmp	.+34     	; 0xc09c <update_splash+0x56>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    c07a:	8a e9       	ldi	r24, 0x9A	; 154
    c07c:	9f e0       	ldi	r25, 0x0F	; 15
    c07e:	0e 94 77 5d 	call	0xbaee	; 0xbaee <select_pressed>
    c082:	88 23       	and	r24, r24
    c084:	59 f0       	breq	.+22     	; 0xc09c <update_splash+0x56>
    c086:	c1 11       	cpse	r28, r1
    c088:	09 c0       	rjmp	.+18     	; 0xc09c <update_splash+0x56>
	{
		SFX_NAVIGATE;
    c08a:	41 e0       	ldi	r20, 0x01	; 1
    c08c:	6f ef       	ldi	r22, 0xFF	; 255
    c08e:	82 e0       	ldi	r24, 0x02	; 2
    c090:	0e 94 8d 3b 	call	0x771a	; 0x771a <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    c094:	cf 91       	pop	r28
    c096:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    c098:	0c 94 cc 5f 	jmp	0xbf98	; 0xbf98 <intro>
		return;
	}
	
	if (game.selection == START_SELECTED)
    c09c:	80 91 bb 0d 	lds	r24, 0x0DBB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c0a0:	01 e0       	ldi	r16, 0x01	; 1
    c0a2:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		intro();
		return;
	}
	
	if (game.selection == START_SELECTED)
    c0a4:	81 11       	cpse	r24, r1
    c0a6:	03 c0       	rjmp	.+6      	; 0xc0ae <update_splash+0x68>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    c0a8:	48 e7       	ldi	r20, 0x78	; 120
    c0aa:	68 e3       	ldi	r22, 0x38	; 56
    c0ac:	03 c0       	rjmp	.+6      	; 0xc0b4 <update_splash+0x6e>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    c0ae:	40 e8       	ldi	r20, 0x80	; 128
    c0b0:	68 e3       	ldi	r22, 0x38	; 56
    c0b2:	80 e0       	ldi	r24, 0x00	; 0
    c0b4:	0e 94 7f 48 	call	0x90fe	; 0x90fe <LBMoveSprite>
	}
}
    c0b8:	cf 91       	pop	r28
    c0ba:	0f 91       	pop	r16
    c0bc:	08 95       	ret

0000c0be <main>:
int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    c0be:	8f ef       	ldi	r24, 0xFF	; 255
    c0c0:	9c e1       	ldi	r25, 0x1C	; 28
    c0c2:	0e 94 80 3a 	call	0x7500	; 0x7500 <InitMusicPlayer>
	ClearVram();
    c0c6:	0e 94 0f 38 	call	0x701e	; 0x701e <ClearVram>
	SetMasterVolume(0x05);
    c0ca:	85 e0       	ldi	r24, 0x05	; 5
    c0cc:	0e 94 34 3e 	call	0x7c68	; 0x7c68 <SetMasterVolume>
	SetTileTable(tiles_data);
    c0d0:	87 ec       	ldi	r24, 0xC7	; 199
    c0d2:	94 e5       	ldi	r25, 0x54	; 84
    c0d4:	0e 94 2a 38 	call	0x7054	; 0x7054 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    c0d8:	8e e7       	ldi	r24, 0x7E	; 126
    c0da:	9e e1       	ldi	r25, 0x1E	; 30
    c0dc:	0e 94 0a 38 	call	0x7014	; 0x7014 <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    c0e0:	87 e8       	ldi	r24, 0x87	; 135
    c0e2:	94 e6       	ldi	r25, 0x64	; 100
    c0e4:	90 93 84 0d 	sts	0x0D84, r25
    c0e8:	80 93 83 0d 	sts	0x0D83, r24
	LBSetFontTilesMap((char*) map_font);
	FadeIn(FRAMES_PER_FADE, false);
    c0ec:	60 e0       	ldi	r22, 0x00	; 0
    c0ee:	81 e0       	ldi	r24, 0x01	; 1
    c0f0:	0e 94 85 46 	call	0x8d0a	; 0x8d0a <FadeIn>
	init_game_state();
    c0f4:	0e 94 00 49 	call	0x9200	; 0x9200 <init_game_state>
	load_splash();
    c0f8:	0e 94 2c 5a 	call	0xb458	; 0xb458 <load_splash>
	while (1)
	{
		WaitVsync(1);
    c0fc:	81 e0       	ldi	r24, 0x01	; 1
    c0fe:	90 e0       	ldi	r25, 0x00	; 0
    c100:	0e 94 29 46 	call	0x8c52	; 0x8c52 <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    c104:	60 e0       	ldi	r22, 0x00	; 0
    c106:	8a e9       	ldi	r24, 0x9A	; 154
    c108:	9f e0       	ldi	r25, 0x0F	; 15
    c10a:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    c10e:	80 91 b6 0d 	lds	r24, 0x0DB6
    c112:	82 30       	cpi	r24, 0x02	; 2
    c114:	99 f4       	brne	.+38     	; 0xc13c <main+0x7e>
		{
			update_level();
    c116:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <update_level>
			update_player();
    c11a:	0e 94 99 5a 	call	0xb532	; 0xb532 <update_player>
			update_shot();
    c11e:	0e 94 2b 4e 	call	0x9c56	; 0x9c56 <update_shot>
			update_enemies();
    c122:	0e 94 a9 55 	call	0xab52	; 0xab52 <update_enemies>
			update_enemy_shots();
    c126:	0e 94 ee 55 	call	0xabdc	; 0xabdc <update_enemy_shots>
			animate_player();
    c12a:	0e 94 f4 54 	call	0xa9e8	; 0xa9e8 <animate_player>
			animate_shot();
    c12e:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <animate_shot>
			animate_enemies();
    c132:	0e 94 88 56 	call	0xad10	; 0xad10 <animate_enemies>
			animate_enemy_shots();
    c136:	0e 94 cb 57 	call	0xaf96	; 0xaf96 <animate_enemy_shots>
    c13a:	04 c0       	rjmp	.+8      	; 0xc144 <main+0x86>
		}
		else if (game.current_screen == SPLASH)
    c13c:	81 11       	cpse	r24, r1
    c13e:	02 c0       	rjmp	.+4      	; 0xc144 <main+0x86>
		{
			update_splash();
    c140:	0e 94 23 60 	call	0xc046	; 0xc046 <update_splash>
			
		}
		LBRotateSprites();
    c144:	0e 94 bd 48 	call	0x917a	; 0x917a <LBRotateSprites>
	}
    c148:	d9 cf       	rjmp	.-78     	; 0xc0fc <main+0x3e>

0000c14a <__udivmodqi4>:
    c14a:	99 1b       	sub	r25, r25
    c14c:	79 e0       	ldi	r23, 0x09	; 9
    c14e:	04 c0       	rjmp	.+8      	; 0xc158 <__udivmodqi4_ep>

0000c150 <__udivmodqi4_loop>:
    c150:	99 1f       	adc	r25, r25
    c152:	96 17       	cp	r25, r22
    c154:	08 f0       	brcs	.+2      	; 0xc158 <__udivmodqi4_ep>
    c156:	96 1b       	sub	r25, r22

0000c158 <__udivmodqi4_ep>:
    c158:	88 1f       	adc	r24, r24
    c15a:	7a 95       	dec	r23
    c15c:	c9 f7       	brne	.-14     	; 0xc150 <__udivmodqi4_loop>
    c15e:	80 95       	com	r24
    c160:	08 95       	ret

0000c162 <__udivmodhi4>:
    c162:	aa 1b       	sub	r26, r26
    c164:	bb 1b       	sub	r27, r27
    c166:	51 e1       	ldi	r21, 0x11	; 17
    c168:	07 c0       	rjmp	.+14     	; 0xc178 <__udivmodhi4_ep>

0000c16a <__udivmodhi4_loop>:
    c16a:	aa 1f       	adc	r26, r26
    c16c:	bb 1f       	adc	r27, r27
    c16e:	a6 17       	cp	r26, r22
    c170:	b7 07       	cpc	r27, r23
    c172:	10 f0       	brcs	.+4      	; 0xc178 <__udivmodhi4_ep>
    c174:	a6 1b       	sub	r26, r22
    c176:	b7 0b       	sbc	r27, r23

0000c178 <__udivmodhi4_ep>:
    c178:	88 1f       	adc	r24, r24
    c17a:	99 1f       	adc	r25, r25
    c17c:	5a 95       	dec	r21
    c17e:	a9 f7       	brne	.-22     	; 0xc16a <__udivmodhi4_loop>
    c180:	80 95       	com	r24
    c182:	90 95       	com	r25
    c184:	bc 01       	movw	r22, r24
    c186:	cd 01       	movw	r24, r26
    c188:	08 95       	ret

0000c18a <__divmodhi4>:
    c18a:	97 fb       	bst	r25, 7
    c18c:	07 2e       	mov	r0, r23
    c18e:	16 f4       	brtc	.+4      	; 0xc194 <__divmodhi4+0xa>
    c190:	00 94       	com	r0
    c192:	07 d0       	rcall	.+14     	; 0xc1a2 <__divmodhi4_neg1>
    c194:	77 fd       	sbrc	r23, 7
    c196:	09 d0       	rcall	.+18     	; 0xc1aa <__divmodhi4_neg2>
    c198:	0e 94 b1 60 	call	0xc162	; 0xc162 <__udivmodhi4>
    c19c:	07 fc       	sbrc	r0, 7
    c19e:	05 d0       	rcall	.+10     	; 0xc1aa <__divmodhi4_neg2>
    c1a0:	3e f4       	brtc	.+14     	; 0xc1b0 <__divmodhi4_exit>

0000c1a2 <__divmodhi4_neg1>:
    c1a2:	90 95       	com	r25
    c1a4:	81 95       	neg	r24
    c1a6:	9f 4f       	sbci	r25, 0xFF	; 255
    c1a8:	08 95       	ret

0000c1aa <__divmodhi4_neg2>:
    c1aa:	70 95       	com	r23
    c1ac:	61 95       	neg	r22
    c1ae:	7f 4f       	sbci	r23, 0xFF	; 255

0000c1b0 <__divmodhi4_exit>:
    c1b0:	08 95       	ret

0000c1b2 <__tablejump2__>:
    c1b2:	ee 0f       	add	r30, r30
    c1b4:	ff 1f       	adc	r31, r31
    c1b6:	05 90       	lpm	r0, Z+
    c1b8:	f4 91       	lpm	r31, Z
    c1ba:	e0 2d       	mov	r30, r0
    c1bc:	09 94       	ijmp

0000c1be <__subsf3>:
    c1be:	50 58       	subi	r21, 0x80	; 128

0000c1c0 <__addsf3>:
    c1c0:	bb 27       	eor	r27, r27
    c1c2:	aa 27       	eor	r26, r26
    c1c4:	0e d0       	rcall	.+28     	; 0xc1e2 <__addsf3x>
    c1c6:	08 c1       	rjmp	.+528    	; 0xc3d8 <__fp_round>
    c1c8:	f9 d0       	rcall	.+498    	; 0xc3bc <__fp_pscA>
    c1ca:	30 f0       	brcs	.+12     	; 0xc1d8 <__addsf3+0x18>
    c1cc:	fe d0       	rcall	.+508    	; 0xc3ca <__fp_pscB>
    c1ce:	20 f0       	brcs	.+8      	; 0xc1d8 <__addsf3+0x18>
    c1d0:	31 f4       	brne	.+12     	; 0xc1de <__addsf3+0x1e>
    c1d2:	9f 3f       	cpi	r25, 0xFF	; 255
    c1d4:	11 f4       	brne	.+4      	; 0xc1da <__addsf3+0x1a>
    c1d6:	1e f4       	brtc	.+6      	; 0xc1de <__addsf3+0x1e>
    c1d8:	ee c0       	rjmp	.+476    	; 0xc3b6 <__fp_nan>
    c1da:	0e f4       	brtc	.+2      	; 0xc1de <__addsf3+0x1e>
    c1dc:	e0 95       	com	r30
    c1de:	e7 fb       	bst	r30, 7
    c1e0:	e4 c0       	rjmp	.+456    	; 0xc3aa <__fp_inf>

0000c1e2 <__addsf3x>:
    c1e2:	e9 2f       	mov	r30, r25
    c1e4:	0a d1       	rcall	.+532    	; 0xc3fa <__fp_split3>
    c1e6:	80 f3       	brcs	.-32     	; 0xc1c8 <__addsf3+0x8>
    c1e8:	ba 17       	cp	r27, r26
    c1ea:	62 07       	cpc	r22, r18
    c1ec:	73 07       	cpc	r23, r19
    c1ee:	84 07       	cpc	r24, r20
    c1f0:	95 07       	cpc	r25, r21
    c1f2:	18 f0       	brcs	.+6      	; 0xc1fa <__addsf3x+0x18>
    c1f4:	71 f4       	brne	.+28     	; 0xc212 <__addsf3x+0x30>
    c1f6:	9e f5       	brtc	.+102    	; 0xc25e <__addsf3x+0x7c>
    c1f8:	22 c1       	rjmp	.+580    	; 0xc43e <__fp_zero>
    c1fa:	0e f4       	brtc	.+2      	; 0xc1fe <__addsf3x+0x1c>
    c1fc:	e0 95       	com	r30
    c1fe:	0b 2e       	mov	r0, r27
    c200:	ba 2f       	mov	r27, r26
    c202:	a0 2d       	mov	r26, r0
    c204:	0b 01       	movw	r0, r22
    c206:	b9 01       	movw	r22, r18
    c208:	90 01       	movw	r18, r0
    c20a:	0c 01       	movw	r0, r24
    c20c:	ca 01       	movw	r24, r20
    c20e:	a0 01       	movw	r20, r0
    c210:	11 24       	eor	r1, r1
    c212:	ff 27       	eor	r31, r31
    c214:	59 1b       	sub	r21, r25
    c216:	99 f0       	breq	.+38     	; 0xc23e <__addsf3x+0x5c>
    c218:	59 3f       	cpi	r21, 0xF9	; 249
    c21a:	50 f4       	brcc	.+20     	; 0xc230 <__addsf3x+0x4e>
    c21c:	50 3e       	cpi	r21, 0xE0	; 224
    c21e:	68 f1       	brcs	.+90     	; 0xc27a <__addsf3x+0x98>
    c220:	1a 16       	cp	r1, r26
    c222:	f0 40       	sbci	r31, 0x00	; 0
    c224:	a2 2f       	mov	r26, r18
    c226:	23 2f       	mov	r18, r19
    c228:	34 2f       	mov	r19, r20
    c22a:	44 27       	eor	r20, r20
    c22c:	58 5f       	subi	r21, 0xF8	; 248
    c22e:	f3 cf       	rjmp	.-26     	; 0xc216 <__addsf3x+0x34>
    c230:	46 95       	lsr	r20
    c232:	37 95       	ror	r19
    c234:	27 95       	ror	r18
    c236:	a7 95       	ror	r26
    c238:	f0 40       	sbci	r31, 0x00	; 0
    c23a:	53 95       	inc	r21
    c23c:	c9 f7       	brne	.-14     	; 0xc230 <__addsf3x+0x4e>
    c23e:	7e f4       	brtc	.+30     	; 0xc25e <__addsf3x+0x7c>
    c240:	1f 16       	cp	r1, r31
    c242:	ba 0b       	sbc	r27, r26
    c244:	62 0b       	sbc	r22, r18
    c246:	73 0b       	sbc	r23, r19
    c248:	84 0b       	sbc	r24, r20
    c24a:	ba f0       	brmi	.+46     	; 0xc27a <__addsf3x+0x98>
    c24c:	91 50       	subi	r25, 0x01	; 1
    c24e:	a1 f0       	breq	.+40     	; 0xc278 <__addsf3x+0x96>
    c250:	ff 0f       	add	r31, r31
    c252:	bb 1f       	adc	r27, r27
    c254:	66 1f       	adc	r22, r22
    c256:	77 1f       	adc	r23, r23
    c258:	88 1f       	adc	r24, r24
    c25a:	c2 f7       	brpl	.-16     	; 0xc24c <__addsf3x+0x6a>
    c25c:	0e c0       	rjmp	.+28     	; 0xc27a <__addsf3x+0x98>
    c25e:	ba 0f       	add	r27, r26
    c260:	62 1f       	adc	r22, r18
    c262:	73 1f       	adc	r23, r19
    c264:	84 1f       	adc	r24, r20
    c266:	48 f4       	brcc	.+18     	; 0xc27a <__addsf3x+0x98>
    c268:	87 95       	ror	r24
    c26a:	77 95       	ror	r23
    c26c:	67 95       	ror	r22
    c26e:	b7 95       	ror	r27
    c270:	f7 95       	ror	r31
    c272:	9e 3f       	cpi	r25, 0xFE	; 254
    c274:	08 f0       	brcs	.+2      	; 0xc278 <__addsf3x+0x96>
    c276:	b3 cf       	rjmp	.-154    	; 0xc1de <__addsf3+0x1e>
    c278:	93 95       	inc	r25
    c27a:	88 0f       	add	r24, r24
    c27c:	08 f0       	brcs	.+2      	; 0xc280 <__addsf3x+0x9e>
    c27e:	99 27       	eor	r25, r25
    c280:	ee 0f       	add	r30, r30
    c282:	97 95       	ror	r25
    c284:	87 95       	ror	r24
    c286:	08 95       	ret

0000c288 <__cmpsf2>:
    c288:	6c d0       	rcall	.+216    	; 0xc362 <__fp_cmp>
    c28a:	08 f4       	brcc	.+2      	; 0xc28e <__cmpsf2+0x6>
    c28c:	81 e0       	ldi	r24, 0x01	; 1
    c28e:	08 95       	ret

0000c290 <__fixunssfsi>:
    c290:	bc d0       	rcall	.+376    	; 0xc40a <__fp_splitA>
    c292:	88 f0       	brcs	.+34     	; 0xc2b6 <__fixunssfsi+0x26>
    c294:	9f 57       	subi	r25, 0x7F	; 127
    c296:	90 f0       	brcs	.+36     	; 0xc2bc <__fixunssfsi+0x2c>
    c298:	b9 2f       	mov	r27, r25
    c29a:	99 27       	eor	r25, r25
    c29c:	b7 51       	subi	r27, 0x17	; 23
    c29e:	a0 f0       	brcs	.+40     	; 0xc2c8 <__fixunssfsi+0x38>
    c2a0:	d1 f0       	breq	.+52     	; 0xc2d6 <__fixunssfsi+0x46>
    c2a2:	66 0f       	add	r22, r22
    c2a4:	77 1f       	adc	r23, r23
    c2a6:	88 1f       	adc	r24, r24
    c2a8:	99 1f       	adc	r25, r25
    c2aa:	1a f0       	brmi	.+6      	; 0xc2b2 <__fixunssfsi+0x22>
    c2ac:	ba 95       	dec	r27
    c2ae:	c9 f7       	brne	.-14     	; 0xc2a2 <__fixunssfsi+0x12>
    c2b0:	12 c0       	rjmp	.+36     	; 0xc2d6 <__fixunssfsi+0x46>
    c2b2:	b1 30       	cpi	r27, 0x01	; 1
    c2b4:	81 f0       	breq	.+32     	; 0xc2d6 <__fixunssfsi+0x46>
    c2b6:	c3 d0       	rcall	.+390    	; 0xc43e <__fp_zero>
    c2b8:	b1 e0       	ldi	r27, 0x01	; 1
    c2ba:	08 95       	ret
    c2bc:	c0 c0       	rjmp	.+384    	; 0xc43e <__fp_zero>
    c2be:	67 2f       	mov	r22, r23
    c2c0:	78 2f       	mov	r23, r24
    c2c2:	88 27       	eor	r24, r24
    c2c4:	b8 5f       	subi	r27, 0xF8	; 248
    c2c6:	39 f0       	breq	.+14     	; 0xc2d6 <__fixunssfsi+0x46>
    c2c8:	b9 3f       	cpi	r27, 0xF9	; 249
    c2ca:	cc f3       	brlt	.-14     	; 0xc2be <__fixunssfsi+0x2e>
    c2cc:	86 95       	lsr	r24
    c2ce:	77 95       	ror	r23
    c2d0:	67 95       	ror	r22
    c2d2:	b3 95       	inc	r27
    c2d4:	d9 f7       	brne	.-10     	; 0xc2cc <__fixunssfsi+0x3c>
    c2d6:	3e f4       	brtc	.+14     	; 0xc2e6 <__fixunssfsi+0x56>
    c2d8:	90 95       	com	r25
    c2da:	80 95       	com	r24
    c2dc:	70 95       	com	r23
    c2de:	61 95       	neg	r22
    c2e0:	7f 4f       	sbci	r23, 0xFF	; 255
    c2e2:	8f 4f       	sbci	r24, 0xFF	; 255
    c2e4:	9f 4f       	sbci	r25, 0xFF	; 255
    c2e6:	08 95       	ret

0000c2e8 <__floatunsisf>:
    c2e8:	e8 94       	clt
    c2ea:	09 c0       	rjmp	.+18     	; 0xc2fe <__floatsisf+0x12>

0000c2ec <__floatsisf>:
    c2ec:	97 fb       	bst	r25, 7
    c2ee:	3e f4       	brtc	.+14     	; 0xc2fe <__floatsisf+0x12>
    c2f0:	90 95       	com	r25
    c2f2:	80 95       	com	r24
    c2f4:	70 95       	com	r23
    c2f6:	61 95       	neg	r22
    c2f8:	7f 4f       	sbci	r23, 0xFF	; 255
    c2fa:	8f 4f       	sbci	r24, 0xFF	; 255
    c2fc:	9f 4f       	sbci	r25, 0xFF	; 255
    c2fe:	99 23       	and	r25, r25
    c300:	a9 f0       	breq	.+42     	; 0xc32c <__floatsisf+0x40>
    c302:	f9 2f       	mov	r31, r25
    c304:	96 e9       	ldi	r25, 0x96	; 150
    c306:	bb 27       	eor	r27, r27
    c308:	93 95       	inc	r25
    c30a:	f6 95       	lsr	r31
    c30c:	87 95       	ror	r24
    c30e:	77 95       	ror	r23
    c310:	67 95       	ror	r22
    c312:	b7 95       	ror	r27
    c314:	f1 11       	cpse	r31, r1
    c316:	f8 cf       	rjmp	.-16     	; 0xc308 <__floatsisf+0x1c>
    c318:	fa f4       	brpl	.+62     	; 0xc358 <__floatsisf+0x6c>
    c31a:	bb 0f       	add	r27, r27
    c31c:	11 f4       	brne	.+4      	; 0xc322 <__floatsisf+0x36>
    c31e:	60 ff       	sbrs	r22, 0
    c320:	1b c0       	rjmp	.+54     	; 0xc358 <__floatsisf+0x6c>
    c322:	6f 5f       	subi	r22, 0xFF	; 255
    c324:	7f 4f       	sbci	r23, 0xFF	; 255
    c326:	8f 4f       	sbci	r24, 0xFF	; 255
    c328:	9f 4f       	sbci	r25, 0xFF	; 255
    c32a:	16 c0       	rjmp	.+44     	; 0xc358 <__floatsisf+0x6c>
    c32c:	88 23       	and	r24, r24
    c32e:	11 f0       	breq	.+4      	; 0xc334 <__floatsisf+0x48>
    c330:	96 e9       	ldi	r25, 0x96	; 150
    c332:	11 c0       	rjmp	.+34     	; 0xc356 <__floatsisf+0x6a>
    c334:	77 23       	and	r23, r23
    c336:	21 f0       	breq	.+8      	; 0xc340 <__floatsisf+0x54>
    c338:	9e e8       	ldi	r25, 0x8E	; 142
    c33a:	87 2f       	mov	r24, r23
    c33c:	76 2f       	mov	r23, r22
    c33e:	05 c0       	rjmp	.+10     	; 0xc34a <__floatsisf+0x5e>
    c340:	66 23       	and	r22, r22
    c342:	71 f0       	breq	.+28     	; 0xc360 <__floatsisf+0x74>
    c344:	96 e8       	ldi	r25, 0x86	; 134
    c346:	86 2f       	mov	r24, r22
    c348:	70 e0       	ldi	r23, 0x00	; 0
    c34a:	60 e0       	ldi	r22, 0x00	; 0
    c34c:	2a f0       	brmi	.+10     	; 0xc358 <__floatsisf+0x6c>
    c34e:	9a 95       	dec	r25
    c350:	66 0f       	add	r22, r22
    c352:	77 1f       	adc	r23, r23
    c354:	88 1f       	adc	r24, r24
    c356:	da f7       	brpl	.-10     	; 0xc34e <__floatsisf+0x62>
    c358:	88 0f       	add	r24, r24
    c35a:	96 95       	lsr	r25
    c35c:	87 95       	ror	r24
    c35e:	97 f9       	bld	r25, 7
    c360:	08 95       	ret

0000c362 <__fp_cmp>:
    c362:	99 0f       	add	r25, r25
    c364:	00 08       	sbc	r0, r0
    c366:	55 0f       	add	r21, r21
    c368:	aa 0b       	sbc	r26, r26
    c36a:	e0 e8       	ldi	r30, 0x80	; 128
    c36c:	fe ef       	ldi	r31, 0xFE	; 254
    c36e:	16 16       	cp	r1, r22
    c370:	17 06       	cpc	r1, r23
    c372:	e8 07       	cpc	r30, r24
    c374:	f9 07       	cpc	r31, r25
    c376:	c0 f0       	brcs	.+48     	; 0xc3a8 <__fp_cmp+0x46>
    c378:	12 16       	cp	r1, r18
    c37a:	13 06       	cpc	r1, r19
    c37c:	e4 07       	cpc	r30, r20
    c37e:	f5 07       	cpc	r31, r21
    c380:	98 f0       	brcs	.+38     	; 0xc3a8 <__fp_cmp+0x46>
    c382:	62 1b       	sub	r22, r18
    c384:	73 0b       	sbc	r23, r19
    c386:	84 0b       	sbc	r24, r20
    c388:	95 0b       	sbc	r25, r21
    c38a:	39 f4       	brne	.+14     	; 0xc39a <__fp_cmp+0x38>
    c38c:	0a 26       	eor	r0, r26
    c38e:	61 f0       	breq	.+24     	; 0xc3a8 <__fp_cmp+0x46>
    c390:	23 2b       	or	r18, r19
    c392:	24 2b       	or	r18, r20
    c394:	25 2b       	or	r18, r21
    c396:	21 f4       	brne	.+8      	; 0xc3a0 <__fp_cmp+0x3e>
    c398:	08 95       	ret
    c39a:	0a 26       	eor	r0, r26
    c39c:	09 f4       	brne	.+2      	; 0xc3a0 <__fp_cmp+0x3e>
    c39e:	a1 40       	sbci	r26, 0x01	; 1
    c3a0:	a6 95       	lsr	r26
    c3a2:	8f ef       	ldi	r24, 0xFF	; 255
    c3a4:	81 1d       	adc	r24, r1
    c3a6:	81 1d       	adc	r24, r1
    c3a8:	08 95       	ret

0000c3aa <__fp_inf>:
    c3aa:	97 f9       	bld	r25, 7
    c3ac:	9f 67       	ori	r25, 0x7F	; 127
    c3ae:	80 e8       	ldi	r24, 0x80	; 128
    c3b0:	70 e0       	ldi	r23, 0x00	; 0
    c3b2:	60 e0       	ldi	r22, 0x00	; 0
    c3b4:	08 95       	ret

0000c3b6 <__fp_nan>:
    c3b6:	9f ef       	ldi	r25, 0xFF	; 255
    c3b8:	80 ec       	ldi	r24, 0xC0	; 192
    c3ba:	08 95       	ret

0000c3bc <__fp_pscA>:
    c3bc:	00 24       	eor	r0, r0
    c3be:	0a 94       	dec	r0
    c3c0:	16 16       	cp	r1, r22
    c3c2:	17 06       	cpc	r1, r23
    c3c4:	18 06       	cpc	r1, r24
    c3c6:	09 06       	cpc	r0, r25
    c3c8:	08 95       	ret

0000c3ca <__fp_pscB>:
    c3ca:	00 24       	eor	r0, r0
    c3cc:	0a 94       	dec	r0
    c3ce:	12 16       	cp	r1, r18
    c3d0:	13 06       	cpc	r1, r19
    c3d2:	14 06       	cpc	r1, r20
    c3d4:	05 06       	cpc	r0, r21
    c3d6:	08 95       	ret

0000c3d8 <__fp_round>:
    c3d8:	09 2e       	mov	r0, r25
    c3da:	03 94       	inc	r0
    c3dc:	00 0c       	add	r0, r0
    c3de:	11 f4       	brne	.+4      	; 0xc3e4 <__fp_round+0xc>
    c3e0:	88 23       	and	r24, r24
    c3e2:	52 f0       	brmi	.+20     	; 0xc3f8 <__fp_round+0x20>
    c3e4:	bb 0f       	add	r27, r27
    c3e6:	40 f4       	brcc	.+16     	; 0xc3f8 <__fp_round+0x20>
    c3e8:	bf 2b       	or	r27, r31
    c3ea:	11 f4       	brne	.+4      	; 0xc3f0 <__fp_round+0x18>
    c3ec:	60 ff       	sbrs	r22, 0
    c3ee:	04 c0       	rjmp	.+8      	; 0xc3f8 <__fp_round+0x20>
    c3f0:	6f 5f       	subi	r22, 0xFF	; 255
    c3f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3f4:	8f 4f       	sbci	r24, 0xFF	; 255
    c3f6:	9f 4f       	sbci	r25, 0xFF	; 255
    c3f8:	08 95       	ret

0000c3fa <__fp_split3>:
    c3fa:	57 fd       	sbrc	r21, 7
    c3fc:	90 58       	subi	r25, 0x80	; 128
    c3fe:	44 0f       	add	r20, r20
    c400:	55 1f       	adc	r21, r21
    c402:	59 f0       	breq	.+22     	; 0xc41a <__fp_splitA+0x10>
    c404:	5f 3f       	cpi	r21, 0xFF	; 255
    c406:	71 f0       	breq	.+28     	; 0xc424 <__fp_splitA+0x1a>
    c408:	47 95       	ror	r20

0000c40a <__fp_splitA>:
    c40a:	88 0f       	add	r24, r24
    c40c:	97 fb       	bst	r25, 7
    c40e:	99 1f       	adc	r25, r25
    c410:	61 f0       	breq	.+24     	; 0xc42a <__fp_splitA+0x20>
    c412:	9f 3f       	cpi	r25, 0xFF	; 255
    c414:	79 f0       	breq	.+30     	; 0xc434 <__fp_splitA+0x2a>
    c416:	87 95       	ror	r24
    c418:	08 95       	ret
    c41a:	12 16       	cp	r1, r18
    c41c:	13 06       	cpc	r1, r19
    c41e:	14 06       	cpc	r1, r20
    c420:	55 1f       	adc	r21, r21
    c422:	f2 cf       	rjmp	.-28     	; 0xc408 <__fp_split3+0xe>
    c424:	46 95       	lsr	r20
    c426:	f1 df       	rcall	.-30     	; 0xc40a <__fp_splitA>
    c428:	08 c0       	rjmp	.+16     	; 0xc43a <__fp_splitA+0x30>
    c42a:	16 16       	cp	r1, r22
    c42c:	17 06       	cpc	r1, r23
    c42e:	18 06       	cpc	r1, r24
    c430:	99 1f       	adc	r25, r25
    c432:	f1 cf       	rjmp	.-30     	; 0xc416 <__fp_splitA+0xc>
    c434:	86 95       	lsr	r24
    c436:	71 05       	cpc	r23, r1
    c438:	61 05       	cpc	r22, r1
    c43a:	08 94       	sec
    c43c:	08 95       	ret

0000c43e <__fp_zero>:
    c43e:	e8 94       	clt

0000c440 <__fp_szero>:
    c440:	bb 27       	eor	r27, r27
    c442:	66 27       	eor	r22, r22
    c444:	77 27       	eor	r23, r23
    c446:	cb 01       	movw	r24, r22
    c448:	97 f9       	bld	r25, 7
    c44a:	08 95       	ret

0000c44c <__gesf2>:
    c44c:	8a df       	rcall	.-236    	; 0xc362 <__fp_cmp>
    c44e:	08 f4       	brcc	.+2      	; 0xc452 <__gesf2+0x6>
    c450:	8f ef       	ldi	r24, 0xFF	; 255
    c452:	08 95       	ret

0000c454 <__mulsf3>:
    c454:	0b d0       	rcall	.+22     	; 0xc46c <__mulsf3x>
    c456:	c0 cf       	rjmp	.-128    	; 0xc3d8 <__fp_round>
    c458:	b1 df       	rcall	.-158    	; 0xc3bc <__fp_pscA>
    c45a:	28 f0       	brcs	.+10     	; 0xc466 <__mulsf3+0x12>
    c45c:	b6 df       	rcall	.-148    	; 0xc3ca <__fp_pscB>
    c45e:	18 f0       	brcs	.+6      	; 0xc466 <__mulsf3+0x12>
    c460:	95 23       	and	r25, r21
    c462:	09 f0       	breq	.+2      	; 0xc466 <__mulsf3+0x12>
    c464:	a2 cf       	rjmp	.-188    	; 0xc3aa <__fp_inf>
    c466:	a7 cf       	rjmp	.-178    	; 0xc3b6 <__fp_nan>
    c468:	11 24       	eor	r1, r1
    c46a:	ea cf       	rjmp	.-44     	; 0xc440 <__fp_szero>

0000c46c <__mulsf3x>:
    c46c:	c6 df       	rcall	.-116    	; 0xc3fa <__fp_split3>
    c46e:	a0 f3       	brcs	.-24     	; 0xc458 <__mulsf3+0x4>

0000c470 <__mulsf3_pse>:
    c470:	95 9f       	mul	r25, r21
    c472:	d1 f3       	breq	.-12     	; 0xc468 <__mulsf3+0x14>
    c474:	95 0f       	add	r25, r21
    c476:	50 e0       	ldi	r21, 0x00	; 0
    c478:	55 1f       	adc	r21, r21
    c47a:	62 9f       	mul	r22, r18
    c47c:	f0 01       	movw	r30, r0
    c47e:	72 9f       	mul	r23, r18
    c480:	bb 27       	eor	r27, r27
    c482:	f0 0d       	add	r31, r0
    c484:	b1 1d       	adc	r27, r1
    c486:	63 9f       	mul	r22, r19
    c488:	aa 27       	eor	r26, r26
    c48a:	f0 0d       	add	r31, r0
    c48c:	b1 1d       	adc	r27, r1
    c48e:	aa 1f       	adc	r26, r26
    c490:	64 9f       	mul	r22, r20
    c492:	66 27       	eor	r22, r22
    c494:	b0 0d       	add	r27, r0
    c496:	a1 1d       	adc	r26, r1
    c498:	66 1f       	adc	r22, r22
    c49a:	82 9f       	mul	r24, r18
    c49c:	22 27       	eor	r18, r18
    c49e:	b0 0d       	add	r27, r0
    c4a0:	a1 1d       	adc	r26, r1
    c4a2:	62 1f       	adc	r22, r18
    c4a4:	73 9f       	mul	r23, r19
    c4a6:	b0 0d       	add	r27, r0
    c4a8:	a1 1d       	adc	r26, r1
    c4aa:	62 1f       	adc	r22, r18
    c4ac:	83 9f       	mul	r24, r19
    c4ae:	a0 0d       	add	r26, r0
    c4b0:	61 1d       	adc	r22, r1
    c4b2:	22 1f       	adc	r18, r18
    c4b4:	74 9f       	mul	r23, r20
    c4b6:	33 27       	eor	r19, r19
    c4b8:	a0 0d       	add	r26, r0
    c4ba:	61 1d       	adc	r22, r1
    c4bc:	23 1f       	adc	r18, r19
    c4be:	84 9f       	mul	r24, r20
    c4c0:	60 0d       	add	r22, r0
    c4c2:	21 1d       	adc	r18, r1
    c4c4:	82 2f       	mov	r24, r18
    c4c6:	76 2f       	mov	r23, r22
    c4c8:	6a 2f       	mov	r22, r26
    c4ca:	11 24       	eor	r1, r1
    c4cc:	9f 57       	subi	r25, 0x7F	; 127
    c4ce:	50 40       	sbci	r21, 0x00	; 0
    c4d0:	8a f0       	brmi	.+34     	; 0xc4f4 <__mulsf3_pse+0x84>
    c4d2:	e1 f0       	breq	.+56     	; 0xc50c <__mulsf3_pse+0x9c>
    c4d4:	88 23       	and	r24, r24
    c4d6:	4a f0       	brmi	.+18     	; 0xc4ea <__mulsf3_pse+0x7a>
    c4d8:	ee 0f       	add	r30, r30
    c4da:	ff 1f       	adc	r31, r31
    c4dc:	bb 1f       	adc	r27, r27
    c4de:	66 1f       	adc	r22, r22
    c4e0:	77 1f       	adc	r23, r23
    c4e2:	88 1f       	adc	r24, r24
    c4e4:	91 50       	subi	r25, 0x01	; 1
    c4e6:	50 40       	sbci	r21, 0x00	; 0
    c4e8:	a9 f7       	brne	.-22     	; 0xc4d4 <__mulsf3_pse+0x64>
    c4ea:	9e 3f       	cpi	r25, 0xFE	; 254
    c4ec:	51 05       	cpc	r21, r1
    c4ee:	70 f0       	brcs	.+28     	; 0xc50c <__mulsf3_pse+0x9c>
    c4f0:	5c cf       	rjmp	.-328    	; 0xc3aa <__fp_inf>
    c4f2:	a6 cf       	rjmp	.-180    	; 0xc440 <__fp_szero>
    c4f4:	5f 3f       	cpi	r21, 0xFF	; 255
    c4f6:	ec f3       	brlt	.-6      	; 0xc4f2 <__mulsf3_pse+0x82>
    c4f8:	98 3e       	cpi	r25, 0xE8	; 232
    c4fa:	dc f3       	brlt	.-10     	; 0xc4f2 <__mulsf3_pse+0x82>
    c4fc:	86 95       	lsr	r24
    c4fe:	77 95       	ror	r23
    c500:	67 95       	ror	r22
    c502:	b7 95       	ror	r27
    c504:	f7 95       	ror	r31
    c506:	e7 95       	ror	r30
    c508:	9f 5f       	subi	r25, 0xFF	; 255
    c50a:	c1 f7       	brne	.-16     	; 0xc4fc <__mulsf3_pse+0x8c>
    c50c:	fe 2b       	or	r31, r30
    c50e:	88 0f       	add	r24, r24
    c510:	91 1d       	adc	r25, r1
    c512:	96 95       	lsr	r25
    c514:	87 95       	ror	r24
    c516:	97 f9       	bld	r25, 7
    c518:	08 95       	ret

0000c51a <strnlen_P>:
    c51a:	fc 01       	movw	r30, r24
    c51c:	05 90       	lpm	r0, Z+
    c51e:	61 50       	subi	r22, 0x01	; 1
    c520:	70 40       	sbci	r23, 0x00	; 0
    c522:	01 10       	cpse	r0, r1
    c524:	d8 f7       	brcc	.-10     	; 0xc51c <strnlen_P+0x2>
    c526:	80 95       	com	r24
    c528:	90 95       	com	r25
    c52a:	8e 0f       	add	r24, r30
    c52c:	9f 1f       	adc	r25, r31
    c52e:	08 95       	ret

0000c530 <_exit>:
    c530:	f8 94       	cli

0000c532 <__stop_program>:
    c532:	ff cf       	rjmp	.-2      	; 0xc532 <__stop_program>
