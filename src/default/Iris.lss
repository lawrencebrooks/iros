
Iris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800500  0000a118  0000a218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000a220  2**5
                  CONTENTS, READONLY
  2 .text         0000a118  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000ae9  00800502  00800502  0000a21a  2**1
                  ALLOC
  4 .stab         00000618  00000000  00000000  0000a620  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002a5  00000000  00000000  0000ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000aedd  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005e0  00000000  00000000  0000aef0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00006eaa  00000000  00000000  0000b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015b8  00000000  00000000  0001237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001df8  00000000  00000000  00013932  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000011e8  00000000  00000000  0001572c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000183e  00000000  00000000  00016914  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005fd0  00000000  00000000  00018152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e0  00000000  00000000  0001e128  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__ctors_end>
       4:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
       8:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
       c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      10:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      14:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      18:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      1c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      20:	0c 94 ca 2b 	jmp	0x5794	; 0x5794 <__vector_8>
      24:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      28:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      2c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      30:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      34:	0c 94 94 29 	jmp	0x5328	; 0x5328 <__vector_13>
      38:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__vector_14>
      3c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      40:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      44:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      48:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      4c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      50:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      54:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      58:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      5c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      60:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      64:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      68:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      6c:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__bad_interrupt>
      70:	45 3d       	cpi	r20, 0xD5	; 213
      72:	48 3d       	cpi	r20, 0xD8	; 216
      74:	4b 3d       	cpi	r20, 0xDB	; 219
      76:	4e 3d       	cpi	r20, 0xDE	; 222
      78:	51 3d       	cpi	r21, 0xD1	; 209
      7a:	54 3d       	cpi	r21, 0xD4	; 212
      7c:	57 3d       	cpi	r21, 0xD7	; 215

0000007e <__trampolines_end>:
      7e:	81 00       	.word	0x0081	; ????
      80:	45 00       	.word	0x0045	; ????
      82:	27 ff       	sbrs	r18, 7
      84:	24 ff       	sbrs	r18, 4
      86:	2a 90       	ld	r2, -Y
      88:	2b 1c       	adc	r2, r11
      8a:	21 0c       	add	r2, r1
      8c:	22 fb       	bst	r18, 2
      8e:	85 00       	.word	0x0085	; ????
      90:	84 00       	.word	0x0084	; ????
      92:	89 03       	fmulsu	r16, r17
      94:	88 8d       	ldd	r24, Y+24	; 0x18
      96:	81 09       	sbc	r24, r1
      98:	6f 02       	muls	r22, r31
      9a:	44 42       	sbci	r20, 0x24	; 36
      9c:	47 00       	.word	0x0047	; ????
      9e:	45 01       	movw	r8, r10
      a0:	b0 83       	st	Z, r27
      a2:	b3 00       	.word	0x00b3	; ????
      a4:	b1 01       	movw	r22, r2
      a6:	25 11       	cpse	r18, r5
      a8:	8a 4f       	sbci	r24, 0xFA	; 250
      aa:	8b 03       	fmulsu	r16, r19

000000ac <eeprom_format_table>:
      ac:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000cc <patchCommands>:
      cc:	12 2d 15 2d 71 2d 75 2d 7c 2d 1d 2d 22 2d 27 2d     .-.-q-u-|-.-"-'-
      dc:	84 2d 2a 2d 2d 2d 30 2d 6b 2d 6e 2d 94 2d           .-*---0-k-n-.-

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 00 00 26 09 00 00 00 00                          ...&.....

00000926 <initPatch>:
     926:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     936:	0a 1e 32 05 00 00 ff                                ..2....

0000093d <default_scores>:
     93d:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     94d:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000095b <strLevels>:
     95b:	20 20 20 47 4c 41 43 49 45 53 20 20 20 00              GLACIES   .

00000969 <strPaused>:
     969:	50 41 55 53 45 44 00                                PAUSED.

00000970 <strExit>:
     970:	45 58 49 54 20 2d 20 58 00                          EXIT - X.

00000979 <strTime>:
     979:	54 49 4d 45 3a 20 00                                TIME: .

00000980 <strLives>:
     980:	4c 49 56 45 53 3a 20 00                             LIVES: .

00000988 <strShield>:
     988:	53 48 49 45 4c 44 3a 20 00                          SHIELD: .

00000991 <strScore>:
     991:	53 43 4f 52 45 3a 20 00                             SCORE: .

00000999 <strSelectHandle>:
     999:	53 45 4c 45 43 54 20 2d 20 41 2f 53 54 41 52 54     SELECT - A/START
	...

000009aa <strHighscores>:
     9aa:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

000009b6 <str1Player>:
     9b6:	53 54 41 52 54 00                                   START.

000009bc <strCopyright>:
     9bc:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     9cc:	4f 4f 4b 53 00                                      OOKS.

000009d1 <spacesong>:
     9d1:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     9e1:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     9f1:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     a01:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     a11:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     a21:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     a31:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     a41:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     a51:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     a61:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     a71:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     a81:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     a91:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     aa1:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     ab1:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     ac1:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ad1:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     ae1:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     af1:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     b01:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     b11:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     b21:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     b31:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     b41:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     b51:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     b61:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     b71:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     b81:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     b91:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     ba1:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     bb1:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     bc1:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     bd1:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     be1:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     bf1:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     c01:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     c11:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     c21:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     c31:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     c41:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     c51:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     c61:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     c71:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     c81:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     c91:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     ca1:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     cb1:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     cc1:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     cd1:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ce1:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     cf1:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     d01:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     d11:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     d21:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     d31:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     d41:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     d51:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     d61:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     d71:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     d81:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     d91:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     da1:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     db1:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     dc1:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     dd1:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     de1:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     df1:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     e01:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     e11:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     e21:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     e31:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     e41:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     e51:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     e61:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     e71:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     e81:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     e91:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     ea1:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     eb1:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     ec1:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     ed1:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     ee1:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     ef1:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     f01:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     f11:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     f21:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     f31:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     f41:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     f51:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     f61:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     f71:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     f81:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     f91:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     fa1:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     fb1:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     fc1:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     fd1:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     fe1:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     ff1:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1001:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1011:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1021:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1031:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1041:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1051:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1061:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001071 <planetsong>:
    1071:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1081:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    1091:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    10a1:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    10b1:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    10c1:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    10d1:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    10e1:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    10f1:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1101:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1111:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1121:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1131:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1141:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1151:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1161:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1171:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1181:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1191:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11a1:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    11b1:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    11c1:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    11d1:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    11e1:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    11f1:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1201:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1211:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1221:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1231:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1241:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1251:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1261:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1271:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1281:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1291:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    12a1:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    12b1:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    12c1:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    12d1:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    12e1:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    12f1:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1301:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1311:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1321:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1331:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1341:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1351:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1361:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1371:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1381:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1391:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    13a1:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    13b1:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    13c1:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    13d1:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    13e1:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    13f1:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1401:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1411:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1421:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1431:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1441:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1451:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1461:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1471:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1481:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    1491:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    14a1:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    14b1:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    14c1:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    14d1:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    14e1:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    14f1:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1501:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1511:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1521:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1531:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1541:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1551:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1561:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1571:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1581:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    1591:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    15a1:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    15b1:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    15c1:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    15d1:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    15e1:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    15f1:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1601:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1611:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1621:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1631:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1641:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1651:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1661:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1671:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1681:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    1691:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    16a1:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    16b1:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    16c1:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    16d1:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    16e1:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    16f1:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1701:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1711:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1721:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1731:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1741:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1751:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1761:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1771:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1781:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    1791:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    17a1:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    17b1:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    17c1:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    17d1:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    17e1:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    17f1:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1801:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1811:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1821:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1831:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1841:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1851:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1861:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1871:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1881:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1891:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    18a1:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    18b1:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    18c1:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    18d1:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    18e1:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    18f1:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1901:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1911:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1921:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1931:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1941:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1951:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1961:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1971:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1981:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1991:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    19a1:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    19b1:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19c1:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    19d1:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    19e1:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    19f1:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1a01:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1a11:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1a21:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1a31:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1a41:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1a51:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1a61:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1a71:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1a81:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1a91:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1aa1:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1ab1:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1ac1:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ad1:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1ae1:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1af1:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1b01:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1b11:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1b21:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b31:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1b41:	2f 00                                               /.

00001b43 <my_patches>:
    1b43:	00 00 00 55 1b 00 00 00 00 00 00 00 55 1b 00 00     ...U........U...
	...

00001b55 <patch00>:
    1b55:	00 02 04 00 00 dd 00 ff                             ........

00001b5d <level_data>:
    1b5d:	02 00 01 03 01 15 7c 00 00 00 00 00 00 00 00 00     ......|.........
    1b6d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b7d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b8d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b9d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bad:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bbd:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bcd:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bdd:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bed:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bfd:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c0d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c1d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c2d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c3d:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c4d:	7c 00 04 06 00 00 00 00 00 00 00 00 00 00 00 00     |...............
    1c5d:	80 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c6d:	7b 06 05 05 00 00 00 00 00 00 00 00 00 00 00 00     {...............
    1c7d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c8d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c9d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cad:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cbd:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ccd:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cdd:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ced:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cfd:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d0d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d1d:	0a 05 07 01 35 05 07 01 33 05 00 00 00 00 00 00     ....5...3.......
    1d2d:	02 05 07 01 35 05 07 01 3b 05 00 00 00 00 00 00     ....5...;.......
    1d3d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d4d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d5d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d6d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d7d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d8d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d9d:	80 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1dad:	7e 05 02 01 00 00 00 00 00 00 00 00 00 00 00 00     ~...............
    1dbd:	05 01 07 05 07 01 27 05 07 01 07 05 07 01 27 05     ......'.......'.
    1dcd:	07 01 03 05 04 05 07 01 27 05 07 01 07 05 07 01     ........'.......
    1ddd:	39 05 00 00 80 05 00 00 00 00 00 00 00 00 00 00     9...............
    1ded:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1dfd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e0d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e1d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e2d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e3d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1e4d:	00 00 00 00 6c 05 14 01 00 00 00 00 00 00 00 00     ....l...........
    1e5d:	00 00 00 00 1f 01 05 05 5c 01 00 00 00 00 00 00     ........\.......
    1e6d:	00 00 00 00 6b 01 15 04 00 00 00 00 00 00 00 00     ....k...........
    1e7d:	00 00 00 00 1e 04 05 05 5d 04 00 00 00 00 00 00     ........].......
    1e8d:	00 00 00 00 6a 04 16 05 00 00 00 00 00 00 00 00     ....j...........
    1e9d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ead:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ebd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ecd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1edd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1eed:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1efd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f0d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f1d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f2d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f3d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f4d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f5d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f6d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f7d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f8d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1f9d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fad:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fbd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fcd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fdd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1fed:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    1ffd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    200d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    201d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    202d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    203d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    204d:	00 00 00 00 70 05 07 01 09 05 00 00 00 00 00 00     ....p...........
    205d:	00 00 00 00 2c 05 07 01 35 05 07 01 11 05 00 00     ....,...5.......
    206d:	00 00 00 00 24 05 07 01 55 05 00 00 00 00 00 00     ....$...U.......
    207d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    208d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    209d:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20ad:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20bd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20cd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20dd:	00 00 00 00 80 05 00 00 00 00 00 00 00 00 00 00     ................
    20ed:	00 00 00 00 64 05 07 01 07 05 07 01 07 05 00 00     ....d...........
    20fd:	00 00 00 00 20 05 07 01 07 05 07 01 27 05 07 01     .... .......'...
    210d:	07 05 07 01 0f 05 18 05 07 01 07 05 07 01 53 05     ..............S.
    211d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    212d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    213d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    214d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    215d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    216d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    217d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    218d:	00 00 00 00 00 00 52 05 2e 01 00 00 00 00 00 00     ......R.........
    219d:	00 00 00 00 00 00 34 01 05 05 47 01 00 00 00 00     ......4...G.....
    21ad:	00 00 00 00 00 00 51 01 2f 04 00 00 00 00 00 00     ......Q./.......
    21bd:	00 00 00 00 00 00 33 04 05 05 48 04 00 00 00 00     ......3...H.....
    21cd:	00 00 00 00 00 00 50 04 30 05 00 00 00 00 00 00     ......P.0.......
    21dd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    21ed:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    21fd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    220d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    221d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    222d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    223d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    224d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    225d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    226d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    227d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    228d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    229d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22ad:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22bd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22cd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22dd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22ed:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    22fd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    230d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    231d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    232d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    233d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    234d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    235d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    236d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    237d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    238d:	00 00 00 00 00 00 56 05 07 01 23 05 00 00 00 00     ......V...#.....
    239d:	00 00 00 00 00 00 12 05 07 01 35 05 07 01 2b 05     ..........5...+.
    23ad:	00 00 00 00 00 00 0a 05 07 01 6f 05 00 00 00 00     ..........o.....
    23bd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23cd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23dd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23ed:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    23fd:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    240d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    241d:	00 00 00 00 00 00 80 05 00 00 00 00 00 00 00 00     ................
    242d:	00 00 00 00 00 00 4a 05 07 01 07 05 07 01 21 05     ......J.......!.
    243d:	00 00 00 00 00 00 06 05 07 01 07 05 07 01 27 05     ..............'.
    244d:	07 01 07 05 07 01 27 05 02 01 05 01 07 05 07 01     ......'.........
    245d:	6d 05 00 00 00 00 00 00 00 00 80 05 00 00 00 00     m...............
	...
    2475:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2485:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2495:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24a5:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24b5:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24c5:	00 00 80 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24d5:	00 00 38 05 48 01 00 00 00 00 00 00 00 00 00 00     ..8.H...........
    24e5:	00 00 80 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24f5:	00 00 37 01 49 04 00 00 00 00 00 00 00 00 00 00     ..7.I...........
    2505:	00 00 80 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2515:	00 00 36 04 00 00 00 00 00 00 00 00 00 00 00 00     ..6.............
	...

00002527 <sprites_data>:
    2527:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    2537:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    2547:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    2557:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    2567:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    2577:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    2587:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    2597:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    25a7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    25b7:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    25c7:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    25d7:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    25e7:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    25f7:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    2607:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    2617:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    2627:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2637:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    2647:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2657:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2667:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2677:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2687:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2697:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    26a7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26b7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26c7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26d7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26e7:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    26f7:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    2707:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2717:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2727:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2737:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2747:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2757:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2767:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2777:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2787:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2797:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    27a7:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    27b7:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    27c7:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    27d7:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    27e7:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    27f7:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2807:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2817:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2827:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2837:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2847:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2857:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2867:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2877:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2887:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2897:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    28a7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28b7:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    28c7:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    28d7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28e7:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    28f7:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2907:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2917:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2927:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2937:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2947:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2957:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2967:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2977:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    2987:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    2997:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    29a7:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    29b7:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    29c7:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    29d7:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    29e7:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    29f7:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2a07:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2a17:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a27:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2a37:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2a47:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2a57:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2a67:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    2a77:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    2a87:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    2a97:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    2aa7:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    2ab7:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2ac7:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2ad7:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2ae7:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2af7:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2b07:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2b17:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2b27:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2b37:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2b47:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2b57:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b67:	fe fe fe fe fe fe fe fe fe fe 12 12 12 12 fe fe     ................
    2b77:	ad 12 0f 1f 1f 0f 12 ad ad 12 12 12 12 12 12 ad     ................
    2b87:	ad ad 12 12 12 12 ad ad ad 12 ad 12 12 ad 12 ad     ................
    2b97:	ad fe 12 12 12 12 fe ad ad fe fe fe fe fe fe ad     ................
    2ba7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2bb7:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2bc7:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2bd7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2be7:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    2bf7:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2c07:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2c17:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2c27:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2c37:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2c47:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2c57:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c67:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2c77:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2c87:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2c97:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2ca7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cb7:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2cc7:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2cd7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ce7:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2cf7:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2d07:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2d17:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2d27:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d37:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d47:	fe fe fe bf e3 fe fe fe fe fe fe fe fe fe fe fe     ................
    2d57:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d67:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2d77:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2d87:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2d97:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2da7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2db7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dc7:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2dd7:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2de7:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2df7:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2e07:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e17:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e27:	fe fe 12 12 12 12 fe fe fe 12 0f 1f 1f 0f 12 fe     ................
    2e37:	ad 12 12 12 12 12 12 ad ad 12 ad 12 12 ad 12 ad     ................
    2e47:	ad ad 12 12 12 12 ad ad ad fe 12 12 12 12 fe ad     ................
    2e57:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2e67:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2e77:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2e87:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e97:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ea7:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2eb7:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2ec7:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2ed7:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ee7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ef7:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2f07:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2f17:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2f27:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f37:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2f47:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2f57:	f6 f6 ff ff ff ff ff ff f6 ff ff fe fe ff ff ff     ................
    2f67:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f77:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2f87:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2f97:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2fa7:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2fb7:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 fe fe fe     ................
    2fc7:	a4 a4 ad ad fe fe fe fe a4 a4 ad fe fe fe fe fe     ................
    2fd7:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2fe7:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2ff7:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    3007:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    3017:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    3027:	ff ff fe fe fe fe ff ff ff fe fe fe fe fe fe ff     ................
    3037:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3047:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    3057:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    3067:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    3077:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3087:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3097:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30a7:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    30b7:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    30c7:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    30d7:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    30e7:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    30f7:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    3107:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    3117:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3127:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    3137:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    3147:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    3157:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    3167:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3177:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3187:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    3197:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    31a7:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    31b7:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    31c7:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    31d7:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    31e7:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    31f7:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    3207:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    3217:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................

00003227 <map_enemy_spider_1>:
    3227:	01 01 24                                            ..$

0000322a <map_enemy_spider_0>:
    322a:	01 01 19                                            ...

0000322d <map_enemy_shark>:
    322d:	01 01 05                                            ...

00003230 <map_enemy_shot>:
    3230:	01 01 0e                                            ...

00003233 <map_hero_shot>:
    3233:	01 01 04                                            ...

00003236 <map_hero_ship_large>:
    3236:	04 02 26 27 28 29 2a 2b 2c 2d                       ..&'()*+,-

00003240 <map_hero_ship_1>:
    3240:	03 01 25 1b 1c                                      ..%..

00003245 <map_hero_ship_0>:
    3245:	03 01 1a 1b 1c                                      .....

0000324a <map_hero_prone>:
    324a:	03 01 31 32 33                                      ..123

0000324f <map_hero_jump>:
    324f:	02 03 02 03 0a 0d 17 18                             ........

00003257 <map_hero_step_3>:
    3257:	02 03 02 03 0a 2e 2f 30                             ....../0

0000325f <map_hero_step_2>:
    325f:	02 03 00 01 07 0c 15 16                             ........

00003267 <map_hero_step_1>:
    3267:	02 03 02 03 0a 0b 13 14                             ........

0000326f <map_hero_step_0>:
    326f:	02 03 00 01 07 09 11 12                             ........

00003277 <map_hero_idle>:
    3277:	02 03 00 01 07 08 0f 10                             ........

0000327f <map_explosion_2>:
    327f:	01 01 1f                                            ...

00003282 <map_explosion_1>:
    3282:	01 01 1e                                            ...

00003285 <map_explosion_0>:
    3285:	01 01 1d                                            ...

00003288 <map_meteor>:
    3288:	01 01 20                                            .. 

0000328b <map_up_arrow>:
    328b:	01 01 23                                            ..#

0000328e <map_down_arrow>:
    328e:	01 01 22                                            .."

00003291 <map_right_arrow>:
    3291:	01 01 21                                            ..!

00003294 <map_none>:
    3294:	01 01 06                                            ...

00003297 <tiles_data>:
	...
    32d7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    32e7:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    32f7:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3307:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3317:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3327:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3337:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    3347:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3357:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3367:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3377:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3387:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3397:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    33a7:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    33b7:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    33c7:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    33d7:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    33e7:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    33f7:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    3407:	af af af af af af af af af af af af af af af af     ................
    3417:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3427:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3437:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3447:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3457:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3467:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3477:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3487:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3497:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    34a7:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    34b7:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    34c7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    34d7:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab a0     ................
    34e7:	ab ab ab ab ab a0 a0 a0 ab ab ab ab a0 a0 a0 a0     ................
    34f7:	ab ab ab a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    3507:	ab ab a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    3517:	ab a4 ff ff ff ff ff ab a0 a0 a4 ff ff ff ff ff     ................
    3527:	a0 a0 a0 a4 ff ff ff ff a0 a0 a0 a0 a4 ff ff ff     ................
    3537:	a0 a0 a0 a0 a0 a4 ff ff a0 a0 a0 a0 a0 a0 a4 ff     ................
    3547:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a0 a0 a4     ................
    3557:	ab ab ab ab ab ab ab ab ff ab ab ab ab ab ab ab     ................
    3567:	ff ff ff ab ab ab ab ab ff ff ff ff ab ab ab ab     ................
    3577:	ff ff ff ff ff ab ab ab ff ff ff ff ff ff ab ab     ................
    3587:	ff ff ff ff ff ff ab ab ff ff ff ff ff ff ff ab     ................
	...
    35af:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    35bf:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35d7:	ab a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35e7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    35f7:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3607:	a0 a0 a0 a0 a0 a0 a0 a0 ab a0 a0 a0 a0 a0 a0 a0     ................
    3617:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3627:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3637:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    3647:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a4     ................
    3657:	ff ff ff ff ff ff ff ab a4 ff ff ff ff ff ff ff     ................
    3667:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    3677:	a4 ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff     ................
    3687:	a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ab     ................
    3697:	ab a0 a0 a0 a0 a0 a0 a0 ab ab a0 a0 a0 a0 a0 a0     ................
    36a7:	ab ab a0 a0 a0 a0 a0 a0 ab ab ab a0 a0 a0 a0 a0     ................
    36b7:	ab ab ab ab a0 a0 a0 a0 ab ab ab ab ab a0 a0 a0     ................
    36c7:	ab ab ab ab ab ab ab a0 ab ab ab ab ab ab ab ab     ................
    36d7:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a4 ff     ................
    36e7:	a0 a0 a0 a0 a0 a0 a4 ff a0 a0 a0 a0 a0 a4 ff ff     ................
    36f7:	a0 a0 a0 a0 a4 ff ff ff a0 a0 a0 a4 ff ff ff ff     ................
    3707:	a0 a0 a4 ff ff ff ff ff ab a4 ff ff ff ff ff ab     ................
    3717:	ff ff ff ff ff ff ff ab ff ff ff ff ff ff ab ab     ................
    3727:	ff ff ff ff ff ff ab ab ff ff ff ff ff ab ab ab     ................
    3737:	ff ff ff ff ab ab ab ab ff ff ff ab ab ab ab ab     ................
    3747:	ff ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    3757:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3767:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3777:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3787:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    37a3:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    37b3:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    37c3:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    37d3:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    37e3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    37f3:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3803:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3813:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3823:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3833:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3843:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3853:	96 96 96 00 bf bf bf bf bf bf bf bf 00 00 00 00     ................
	...
    3897:	00 96 96 96 95 96 96 96 00 96 96 96 95 96 96 96     ................
    38a7:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    38b7:	96 96 96 96 96 96 95 96 96 96 96 96 96 bf 95 96     ................
    38c7:	95 84 96 96 96 bf 96 95 8c 83 83 8c 96 bf 96 96     ................
    38d7:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    38e7:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    38f7:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3907:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3917:	96 96 96 95 96 96 96 00 96 96 96 95 96 96 96 00     ................
    3927:	96 96 95 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3937:	96 95 96 96 96 96 96 96 96 95 96 96 96 96 95 96     ................
    3947:	95 96 96 96 96 95 95 95 96 96 96 96 94 8c 8c 95     ................
    3957:	82 82 82 82 82 bf 96 96 00 d8 d8 d8 bf ff bf 82     ................
    3967:	00 d8 d8 bf ff ff ff bf 00 d8 bf ff ff ff ff ff     ................
    3977:	bf bf ff ff ff ff ff ff 00 00 bf ff ff ff ff ff     ................
    3987:	00 00 94 bf ff ff ff bf 00 00 00 8c bf ff bf d8     ................
    3997:	96 96 96 96 96 96 96 96 83 83 8c 8c 8c 8c 8c 83     ................
    39a7:	d8 d8 d8 d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    39b7:	ff bf bf d8 d8 d8 d8 d8 bf d8 d8 d8 d8 d8 d8 d8     ................
    39c7:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 82 82     ................
    39d7:	96 96 8c 83 83 8c 8c 8c 83 82 83 83 83 83 8c 00     ................
    39e7:	82 82 82 83 83 83 83 00 82 82 82 83 83 83 83 00     ................
    39f7:	d8 82 82 83 83 83 83 00 82 82 82 83 83 83 00 00     ................
    3a07:	82 82 83 83 83 95 00 00 82 82 83 83 95 00 00 00     ................
	...
    3a4f:	bf bf bf bf bf bf bf bf 00 00 00 96 95 ff d8 d8     ................
    3a5f:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3a6f:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3a7f:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3a8f:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3a9f:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3aaf:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3abf:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3acf:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3adf:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3aef:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3aff:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b1b:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    3b2b:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
    3b3b:	00 77 00 00 00 00 00 00 00 77 00 00 00 00 00 00     .w.......w......
	...
    3b9f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3baf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3bc7:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d63:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    3d73:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    3d83:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    3d9f:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    3daf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3dbf:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    3e7f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3e8f:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eaf:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3eff:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3f23:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    3f33:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    3f43:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f5f:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3f6f:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    3f7f:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    3f9f:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    3faf:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    3fbf:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    3fdf:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    3fef:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    3fff:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    401f:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    402f:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    403f:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    4063:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    4073:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    4083:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    409f:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    40af:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    40bf:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    40df:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    40ef:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    40ff:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    411f:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    412f:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    413f:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    415f:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    416f:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    417f:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    419f:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    41af:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    41bf:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    4217:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4227:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4237:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4247:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    431f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    432f:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4347:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    435f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    436f:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    437f:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    439f:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    43af:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    43bf:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    43df:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    43ef:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    43ff:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    441f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    442f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    443f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    445f:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    446f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    447f:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    449f:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    44af:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    44bf:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    44df:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    44ef:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    44ff:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    451f:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    452f:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    453f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    455f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    456f:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    457f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    459f:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    45af:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    45bf:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    45e3:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    45f3:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    4603:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    461f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    462f:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    463f:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    465f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    466f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    467f:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    469f:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    46af:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    46bf:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    46df:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    46ef:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    46ff:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    471f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    472f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    473f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    475f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    476f:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    477f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    479f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    47af:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    47bf:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    47df:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    47ef:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    47ff:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    481f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    482f:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    483f:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    485f:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    486f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    487f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    489f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48af:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48bf:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    48df:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48ef:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    48ff:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    491f:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    492f:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    493f:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    495f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    496f:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    497f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    499f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    49af:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    49bf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    49df:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    49ef:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    49ff:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4b47:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00004b57 <map_star>:
    4b57:	01 01 0c                                            ...

00004b5a <map_ice_moon>:
    4b5a:	03 03 09 0a 0b 0d 0e 0f 10 11 12                    ...........

00004b65 <map_ice_cloud>:
    4b65:	01 01 08                                            ...

00004b68 <map_ice_far>:
    4b68:	01 01 07                                            ...

00004b6b <map_ice_sky>:
    4b6b:	01 01 06                                            ...

00004b6e <map_ice_horizon>:
    4b6e:	01 01 05                                            ...

00004b71 <map_ice_bottom>:
    4b71:	01 01 04                                            ...

00004b74 <map_ice_right>:
    4b74:	01 01 03                                            ...

00004b77 <map_ice_middle>:
    4b77:	01 01 02                                            ...

00004b7a <map_ice_left>:
    4b7a:	01 01 01                                            ...

00004b7d <map_splash>:
    4b7d:	0f 05 13 13 13 00 13 13 13 00 14 15 16 00 13 13     ................
    4b8d:	13 17 13 17 00 13 17 17 00 18 19 1a 00 13 17 17     ................
    4b9d:	00 13 00 00 13 00 00 00 1b 1c 1d 00 13 13 13 1e     ................
    4bad:	13 1e 00 13 00 00 00 1f 20 21 00 1e 1e 13 13 13     ........ !......
    4bbd:	13 00 13 00 00 00 22 00 00 00 13 13 13              ......"......

00004bca <map_tile_none>:
    4bca:	01 01 00 00                                         ....

00004bce <__ctors_end>:
    4bce:	11 24       	eor	r1, r1
    4bd0:	1f be       	out	0x3f, r1	; 63
    4bd2:	cf ef       	ldi	r28, 0xFF	; 255
    4bd4:	d0 e1       	ldi	r29, 0x10	; 16
    4bd6:	de bf       	out	0x3e, r29	; 62
    4bd8:	cd bf       	out	0x3d, r28	; 61

00004bda <__do_copy_data>:
    4bda:	15 e0       	ldi	r17, 0x05	; 5
    4bdc:	a0 e0       	ldi	r26, 0x00	; 0
    4bde:	b5 e0       	ldi	r27, 0x05	; 5
    4be0:	e8 e1       	ldi	r30, 0x18	; 24
    4be2:	f1 ea       	ldi	r31, 0xA1	; 161
    4be4:	02 c0       	rjmp	.+4      	; 0x4bea <__do_copy_data+0x10>
    4be6:	05 90       	lpm	r0, Z+
    4be8:	0d 92       	st	X+, r0
    4bea:	a2 30       	cpi	r26, 0x02	; 2
    4bec:	b1 07       	cpc	r27, r17
    4bee:	d9 f7       	brne	.-10     	; 0x4be6 <__do_copy_data+0xc>

00004bf0 <__do_clear_bss>:
    4bf0:	1f e0       	ldi	r17, 0x0F	; 15
    4bf2:	a2 e0       	ldi	r26, 0x02	; 2
    4bf4:	b5 e0       	ldi	r27, 0x05	; 5
    4bf6:	01 c0       	rjmp	.+2      	; 0x4bfa <.do_clear_bss_start>

00004bf8 <.do_clear_bss_loop>:
    4bf8:	1d 92       	st	X+, r1

00004bfa <.do_clear_bss_start>:
    4bfa:	ab 3e       	cpi	r26, 0xEB	; 235
    4bfc:	b1 07       	cpc	r27, r17
    4bfe:	e1 f7       	brne	.-8      	; 0x4bf8 <.do_clear_bss_loop>

00004c00 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    4c00:	0e 94 a2 2b 	call	0x5744	; 0x5744 <wdt_randomize>
#endif

    MCUSR = 0;
    4c04:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    4c06:	88 e1       	ldi	r24, 0x18	; 24
    4c08:	0f b6       	in	r0, 0x3f	; 63
    4c0a:	f8 94       	cli
    4c0c:	80 93 60 00 	sts	0x0060, r24
    4c10:	10 92 60 00 	sts	0x0060, r1
    4c14:	0f be       	out	0x3f, r0	; 63

00004c16 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    4c16:	0e 94 5f 2c 	call	0x58be	; 0x58be <isEepromFormatted>
    4c1a:	81 11       	cpse	r24, r1
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <Initialize+0xc>
    4c1e:	0e 94 3d 2c 	call	0x587a	; 0x587a <FormatEeprom>

	cli();
    4c22:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	80 93 cc 0c 	sts	0x0CCC, r24
		tr4_barrel_hi=1;		
    4c2a:	80 93 cd 0c 	sts	0x0CCD, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    4c2e:	80 93 cb 0c 	sts	0x0CCB, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    4c32:	10 92 b8 0c 	sts	0x0CB8, r1
    4c36:	10 92 be 0c 	sts	0x0CBE, r1
    4c3a:	10 92 c4 0c 	sts	0x0CC4, r1
    4c3e:	10 92 ca 0c 	sts	0x0CCA, r1
    4c42:	10 92 d0 0c 	sts	0x0CD0, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    4c46:	10 92 a0 0c 	sts	0x0CA0, r1
	sync_flags=0;
    4c4a:	10 92 a2 0c 	sts	0x0CA2, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    4c4e:	92 e1       	ldi	r25, 0x12	; 18
    4c50:	90 93 a1 0c 	sts	0x0CA1, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    4c54:	90 ee       	ldi	r25, 0xE0	; 224
    4c56:	90 93 a8 0c 	sts	0x0CA8, r25
	first_render_line=FIRST_RENDER_LINE;
    4c5a:	94 e1       	ldi	r25, 0x14	; 20
    4c5c:	90 93 a7 0c 	sts	0x0CA7, r25

	joypad1_status_hi=0;
    4c60:	10 92 ac 0c 	sts	0x0CAC, r1
    4c64:	10 92 ab 0c 	sts	0x0CAB, r1
	joypad2_status_hi=0;
    4c68:	10 92 b0 0c 	sts	0x0CB0, r1
    4c6c:	10 92 af 0c 	sts	0x0CAF, r1
	sound_enabled=1;
    4c70:	80 93 b7 0c 	sts	0x0CB7, r24

	InitializeVideoMode();
    4c74:	0e 94 cd 38 	call	0x719a	; 0x719a <InitializeVideoMode>
    4c78:	8e e7       	ldi	r24, 0x7E	; 126
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	25 91       	lpm	r18, Z+
    4c80:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    4c82:	f9 01       	movw	r30, r18
    4c84:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    4c86:	30 83       	st	Z, r19
    4c88:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	8c 3a       	cpi	r24, 0xAC	; 172
    4c8e:	92 07       	cpc	r25, r18
    4c90:	a9 f7       	brne	.-22     	; 0x4c7c <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    4c92:	78 94       	sei
	
	DisplayLogo();
    4c94:	0e 94 c6 39 	call	0x738c	; 0x738c <DisplayLogo>
    4c98:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <main>
    4c9c:	0c 94 8a 50 	jmp	0xa114	; 0xa114 <_exit>

00004ca0 <__bad_interrupt>:
    4ca0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004ca4 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    4ca4:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4ca6:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    4caa:	ad e8       	ldi	r26, 0x8D	; 141
    4cac:	aa 95       	dec	r26
    4cae:	f1 f7       	brne	.-4      	; 0x4cac <sub_video_mode3+0x8>
    4cb0:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    4cb2:	00 91 db 0c 	lds	r16, 0x0CDB

		ldi ZL,lo8(ram_tiles_restore);
    4cb6:	ea e3       	ldi	r30, 0x3A	; 58
		ldi ZH,hi8(ram_tiles_restore);
    4cb8:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    4cba:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    4cbc:	02 9f       	mul	r16, r18
		add ZL,r0
    4cbe:	e0 0d       	add	r30, r0
		adc ZH,r1
    4cc0:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    4cc2:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4cc4:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    4cc6:	20 91 69 0d 	lds	r18, 0x0D69
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    4cca:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    4ccc:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    4cce:	30 0f       	add	r19, r16

		cp r18,r16
    4cd0:	20 17       	cp	r18, r16
		breq no_ramtiles
    4cd2:	51 f0       	breq	.+20     	; 0x4ce8 <no_ramtiles>
		nop
    4cd4:	00 00       	nop
	...

00004cd8 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    4cd8:	a1 91       	ld	r26, Z+
		ld XH,Z+
    4cda:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    4cdc:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    4cde:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    4ce0:	0c 93       	st	X, r16

		inc r16
    4ce2:	03 95       	inc	r16
		cp r16,r18
    4ce4:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    4ce6:	c0 f3       	brcs	.-16     	; 0x4cd8 <upd_loop>

00004ce8 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    4ce8:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    4cea:	1a 95       	dec	r17
		brne .-4
    4cec:	f1 f7       	brne	.-4      	; 0x4cea <no_ramtiles+0x2>
		rjmp .
    4cee:	00 c0       	rjmp	.+0      	; 0x4cf0 <no_ramtiles+0x8>
		dec r19
    4cf0:	3a 95       	dec	r19
		brne 1b
    4cf2:	d1 f7       	brne	.-12     	; 0x4ce8 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    4cf4:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    4cf6:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    4cf8:	20 91 9c 0c 	lds	r18, 0x0C9C
		mov r25,r18
    4cfc:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    4cfe:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    4d00:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    4d02:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    4d04:	00 91 9d 0c 	lds	r16, 0x0C9D
		mov r22,r16
    4d08:	60 2f       	mov	r22, r16
		lsr r16
    4d0a:	06 95       	lsr	r16
		lsr r16
    4d0c:	06 95       	lsr	r16
		lsr r16 ;/8
    4d0e:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    4d10:	10 91 9e 0c 	lds	r17, 0x0C9E
        sub r17,r16
    4d14:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    4d16:	f1 2e       	mov	r15, r17

        mov r17,r16
    4d18:	10 2f       	mov	r17, r16
        lsr r16
    4d1a:	06 95       	lsr	r16
        lsr r16
    4d1c:	06 95       	lsr	r16
        lsr r16 ;/8
    4d1e:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    4d20:	d0 0f       	add	r29, r16
		andi r17,0x7
    4d22:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    4d24:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    4d26:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    4d28:	40 91 9a 0c 	lds	r20, 0x0C9A
		lds r21,overlay_tile_table+1
    4d2c:	50 91 9b 0c 	lds	r21, 0x0C9B
		lds r6,tile_table_lo
    4d30:	60 90 96 0c 	lds	r6, 0x0C96
		lds r7,tile_table_hi
    4d34:	70 90 97 0c 	lds	r7, 0x0C97
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    4d38:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    4d3a:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    4d3c:	5e 01       	movw	r10, r28
		mov r23,r22
    4d3e:	76 2f       	mov	r23, r22
		mov r24,r15
    4d40:	8f 2d       	mov	r24, r15
		mov r9,r25
    4d42:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    4d44:	00 91 9e 0c 	lds	r16, 0x0C9E
		mov r18,r16
    4d48:	20 2f       	mov	r18, r16
		lsr r16
    4d4a:	06 95       	lsr	r16
		lsr r16
    4d4c:	06 95       	lsr	r16
		lsr r16			;hi8
    4d4e:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    4d50:	03 95       	inc	r16
		andi r18,7		;lo8
    4d52:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    4d54:	30 91 99 0c 	lds	r19, 0x0C99
		cpi r19,0
    4d58:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    4d5a:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    4d5c:	01 fe       	sbrs	r0, 1
		clr r22
    4d5e:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    4d60:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    4d62:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    4d64:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    4d66:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    4d68:	01 fe       	sbrs	r0, 1
		ser r24
    4d6a:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    4d6c:	01 fe       	sbrs	r0, 1
		clr r9
    4d6e:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    4d70:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    4d72:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    4d74:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    4d76:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    4d78:	80 90 a8 0c 	lds	r8, 0x0CA8

00004d7c <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    4d7c:	bc d3       	rcall	.+1912   	; 0x54f6 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    4d7e:	24 e0       	ldi	r18, 0x04	; 4
    4d80:	2a 95       	dec	r18
    4d82:	f1 f7       	brne	.-4      	; 0x4d80 <next_tile_line+0x4>
    4d84:	00 00       	nop
				
		call render_tile_line
    4d86:	0e 94 04 27 	call	0x4e08	; 0x4e08 <render_tile_line>

		WAIT r18,58
    4d8a:	23 e1       	ldi	r18, 0x13	; 19
    4d8c:	2a 95       	dec	r18
    4d8e:	f1 f7       	brne	.-4      	; 0x4d8c <next_tile_line+0x10>
    4d90:	00 00       	nop

		inc r22
    4d92:	63 95       	inc	r22
		dec r8
    4d94:	8a 94       	dec	r8
		breq text_frame_end
    4d96:	09 f1       	breq	.+66     	; 0x4dda <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    4d98:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    4d9a:	29 f0       	breq	.+10     	; 0x4da6 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    4d9c:	08 e0       	ldi	r16, 0x08	; 8
    4d9e:	0a 95       	dec	r16
    4da0:	f1 f7       	brne	.-4      	; 0x4d9e <next_tile_line+0x22>
    4da2:	00 00       	nop
		rjmp next_tile_line
    4da4:	eb cf       	rjmp	.-42     	; 0x4d7c <next_tile_line>

00004da6 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    4da6:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    4da8:	0c 2f       	mov	r16, r28
		andi r16,0x7
    4daa:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    4dac:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    4dae:	11 f0       	breq	.+4      	; 0x4db4 <next_tile_row+0xe>
		inc YL
    4db0:	c3 95       	inc	r28
		rjmp 2f
    4db2:	02 c0       	rjmp	.+4      	; 0x4db8 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    4db4:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    4db6:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    4db8:	8a 95       	dec	r24
		brne .+2
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <next_tile_row+0x18>
		movw YL,r12
    4dbc:	e6 01       	movw	r28, r12

		dec r19
    4dbe:	3a 95       	dec	r19
		brne .+2
    4dc0:	09 f4       	brne	.+2      	; 0x4dc4 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    4dc2:	67 2f       	mov	r22, r23
		brne .+2
    4dc4:	09 f4       	brne	.+2      	; 0x4dc8 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    4dc6:	e5 01       	movw	r28, r10
		brne .+2
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    4dca:	8f 2d       	mov	r24, r15
		brne .+2
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    4dce:	99 2e       	mov	r9, r25

		brne .+2
    4dd0:	09 f4       	brne	.+2      	; 0x4dd4 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    4dd2:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    4dd6:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    4dd8:	d1 cf       	rjmp	.-94     	; 0x4d7c <next_tile_line>

00004dda <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    4dda:	29 e0       	ldi	r18, 0x09	; 9
    4ddc:	2a 95       	dec	r18
    4dde:	f1 f7       	brne	.-4      	; 0x4ddc <text_frame_end+0x2>
    4de0:	00 00       	nop

		rcall hsync_pulse ;145
    4de2:	89 d3       	rcall	.+1810   	; 0x54f6 <hsync_pulse>
	
		clr r1
    4de4:	11 24       	eor	r1, r1
		call RestoreBackground
    4de6:	0e 94 80 37 	call	0x6f00	; 0x6f00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    4dea:	e0 91 a2 0c 	lds	r30, 0x0CA2
		ldi r20,SYNC_FLAG_FIELD
    4dee:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    4df0:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    4df2:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    4df4:	e0 93 a2 0c 	sts	0x0CA2, r30
	
		cli 
    4df8:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    4dfa:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    4dfc:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    4e00:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    4e02:	e0 93 36 00 	sts	0x0036, r30

		ret
    4e06:	08 95       	ret

00004e08 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    4e08:	cf 93       	push	r28
		push YH
    4e0a:	df 93       	push	r29
		push r23
    4e0c:	7f 93       	push	r23
		push r22
    4e0e:	6f 93       	push	r22
		push r19
    4e10:	3f 93       	push	r19
		push r13
    4e12:	df 92       	push	r13
		push r12
    4e14:	cf 92       	push	r12
		push r9
    4e16:	9f 92       	push	r9
		push r7
    4e18:	7f 92       	push	r7
		push r6
    4e1a:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    4e1c:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    4e1e:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    4e20:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    4e22:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4e24:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4e26:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    4e28:	00 0d       	add	r16, r0
		adc r17,r1
    4e2a:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    4e2c:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    4e2e:	0a e3       	ldi	r16, 0x3A	; 58
		ldi r17,hi8(ram_tiles)
    4e30:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    4e32:	00 0d       	add	r16, r0
		adc r17,r1
    4e34:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    4e36:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    4e38:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    4e3a:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    4e3c:	69 2d       	mov	r22, r9
		andi r22,0x7		
    4e3e:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    4e40:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    4e42:	f8 94       	cli
		breq .+2
    4e44:	09 f0       	breq	.+2      	; 0x4e48 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    4e46:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    4e48:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    4e4a:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    4e4c:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    4e4e:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    4e50:	02 0c       	add	r0, r2
	    adc r1,r3
    4e52:	13 1c       	adc	r1, r3
		movw ZL,r0
    4e54:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    4e56:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    4e58:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4e5a:	28 81       	ld	r18, Y
		subi YL,-8
    4e5c:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4e5e:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    4e60:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    4e62:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    4e64:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    4e66:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    4e68:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    4e6a:	04 0e       	add	r0, r20
	    adc r1,r21
    4e6c:	15 1e       	adc	r1, r21
		movw XL,r0
    4e6e:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    4e70:	28 81       	ld	r18, Y
		subi YL,-8
    4e72:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    4e74:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    4e76:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    4e78:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    4e7a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    4e7c:	a1 01       	movw	r20, r2
		brtc .+2
    4e7e:	0e f4       	brtc	.+2      	; 0x4e82 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    4e80:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    4e82:	04 0e       	add	r0, r20
	    adc r1,r21
    4e84:	15 1e       	adc	r1, r21
		movw ZL,r0
    4e86:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    4e88:	3f 01       	movw	r6, r30

00004e8a <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    4e8a:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    4e8c:	a6 0f       	add	r26, r22
		adc XH,r0
    4e8e:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    4e90:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    4e92:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    4e94:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    4e96:	22 c0       	rjmp	.+68     	; 0x4edc <rom_fine_scroll>

00004e98 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    4e98:	00 c0       	rjmp	.+0      	; 0x4e9a <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    4e9a:	64 e5       	ldi	r22, 0x54	; 84
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    4e9c:	77 e2       	ldi	r23, 0x27	; 39
		add r22,r0
    4e9e:	60 0d       	add	r22, r0
		adc r23,r1
    4ea0:	71 1d       	adc	r23, r1
		push r22
    4ea2:	6f 93       	push	r22
		push r23	
    4ea4:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    4ea6:	08 95       	ret

00004ea8 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    4ea8:	0d 91       	ld	r16, X+
    4eaa:	c8 95       	lpm
    4eac:	08 b9       	out	0x08, r16	; 8
    4eae:	0d 91       	ld	r16, X+
    4eb0:	c8 95       	lpm
    4eb2:	08 b9       	out	0x08, r16	; 8
    4eb4:	0d 91       	ld	r16, X+
    4eb6:	c8 95       	lpm
    4eb8:	08 b9       	out	0x08, r16	; 8
    4eba:	0d 91       	ld	r16, X+
    4ebc:	c8 95       	lpm
    4ebe:	08 b9       	out	0x08, r16	; 8
    4ec0:	0d 91       	ld	r16, X+
    4ec2:	c8 95       	lpm
    4ec4:	08 b9       	out	0x08, r16	; 8
    4ec6:	0d 91       	ld	r16, X+
    4ec8:	c8 95       	lpm
    4eca:	08 b9       	out	0x08, r16	; 8
    4ecc:	0d 91       	ld	r16, X+
    4ece:	c8 95       	lpm
    4ed0:	08 b9       	out	0x08, r16	; 8
    4ed2:	0d 91       	ld	r16, X+
    4ed4:	c8 95       	lpm
    4ed6:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    4ed8:	1e f5       	brtc	.+70     	; 0x4f20 <romloop>
		rjmp ramloop
    4eda:	40 c0       	rjmp	.+128    	; 0x4f5c <ramloop>

00004edc <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    4edc:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    4ede:	66 e7       	ldi	r22, 0x76	; 118
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    4ee0:	77 e2       	ldi	r23, 0x27	; 39
		add r22,r0
    4ee2:	60 0d       	add	r22, r0
		adc r23,r1
    4ee4:	71 1d       	adc	r23, r1
		push r22
    4ee6:	6f 93       	push	r22
		push r23	
    4ee8:	7f 93       	push	r23
		ret
    4eea:	08 95       	ret

00004eec <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    4eec:	05 91       	lpm	r16, Z+
    4eee:	00 c0       	rjmp	.+0      	; 0x4ef0 <rom_fine_scroll_loop+0x4>
    4ef0:	08 b9       	out	0x08, r16	; 8
    4ef2:	05 91       	lpm	r16, Z+
    4ef4:	00 c0       	rjmp	.+0      	; 0x4ef6 <rom_fine_scroll_loop+0xa>
    4ef6:	08 b9       	out	0x08, r16	; 8
    4ef8:	05 91       	lpm	r16, Z+
    4efa:	00 c0       	rjmp	.+0      	; 0x4efc <rom_fine_scroll_loop+0x10>
    4efc:	08 b9       	out	0x08, r16	; 8
    4efe:	05 91       	lpm	r16, Z+
    4f00:	00 c0       	rjmp	.+0      	; 0x4f02 <rom_fine_scroll_loop+0x16>
    4f02:	08 b9       	out	0x08, r16	; 8
    4f04:	05 91       	lpm	r16, Z+
    4f06:	00 c0       	rjmp	.+0      	; 0x4f08 <rom_fine_scroll_loop+0x1c>
    4f08:	08 b9       	out	0x08, r16	; 8
    4f0a:	05 91       	lpm	r16, Z+
    4f0c:	00 c0       	rjmp	.+0      	; 0x4f0e <rom_fine_scroll_loop+0x22>
    4f0e:	08 b9       	out	0x08, r16	; 8
    4f10:	05 91       	lpm	r16, Z+
    4f12:	00 c0       	rjmp	.+0      	; 0x4f14 <rom_fine_scroll_loop+0x28>
    4f14:	08 b9       	out	0x08, r16	; 8
    4f16:	05 91       	lpm	r16, Z+
    4f18:	00 c0       	rjmp	.+0      	; 0x4f1a <rom_fine_scroll_loop+0x2e>
    4f1a:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    4f1c:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    4f1e:	f6 f0       	brts	.+60     	; 0x4f5c <ramloop>

00004f20 <romloop>:

	
	romloop:
	    lpm r16,Z+
    4f20:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4f22:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4f24:	28 81       	ld	r18, Y

	    lpm r16,Z+
    4f26:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    4f28:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4f2a:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    4f2c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    4f2e:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    4f30:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    4f32:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    4f34:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4f36:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    4f38:	08 f4       	brcc	.+2      	; 0x4f3c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    4f3a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    4f3c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    4f3e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    4f40:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    4f42:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    4f44:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    4f46:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    4f48:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    4f4a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    4f4c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    4f4e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    4f50:	05 91       	lpm	r16, Z+

		breq end	
    4f52:	39 f1       	breq	.+78     	; 0x4fa2 <end>
	    movw ZL,r0   	;copy next tile adress
    4f54:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4f56:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    4f58:	18 f7       	brcc	.-58     	; 0x4f20 <romloop>
	
		rjmp .
    4f5a:	00 c0       	rjmp	.+0      	; 0x4f5c <ramloop>

00004f5c <ramloop>:

	ramloop:

	    ld r16,Z+
    4f5c:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4f5e:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    4f60:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    4f62:	01 91       	ld	r16, Z+
		subi YL,-8   		
    4f64:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    4f66:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4f68:	23 9f       	mul	r18, r19

	    ld r16,Z+
    4f6a:	01 91       	ld	r16, Z+
		nop
    4f6c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    4f6e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    4f70:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    4f72:	00 c0       	rjmp	.+0      	; 0x4f74 <ramloop+0x18>
   
	    ld r16,Z+
    4f74:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4f76:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    4f78:	08 f0       	brcs	.+2      	; 0x4f7c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    4f7a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    4f7c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    4f7e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    4f80:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    4f82:	15 1e       	adc	r1, r21
		rjmp .
    4f84:	00 c0       	rjmp	.+0      	; 0x4f86 <ramloop+0x2a>
    
		ld r16,Z+		
    4f86:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    4f88:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    4f8a:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    4f8c:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    4f8e:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    4f90:	78 b8       	out	0x08, r7	; 8
		nop
    4f92:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    4f94:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    4f96:	1a 95       	dec	r17
	    breq end
    4f98:	21 f0       	breq	.+8      	; 0x4fa2 <end>
	
		nop
    4f9a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4f9c:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    4f9e:	00 f6       	brcc	.-128    	; 0x4f20 <romloop>
		rjmp ramloop
    4fa0:	dd cf       	rjmp	.-70     	; 0x4f5c <ramloop>

00004fa2 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    4fa2:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    4fa4:	27 f5       	brid	.+72     	; 0x4fee <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    4fa6:	30 f4       	brcc	.+12     	; 0x4fb4 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    4fa8:	f0 01       	movw	r30, r0

00004faa <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    4faa:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    4fac:	08 b9       	out	0x08, r16	; 8
		dec r14
    4fae:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    4fb0:	e1 f7       	brne	.-8      	; 0x4faa <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    4fb2:	1f c0       	rjmp	.+62     	; 0x4ff2 <end_fine_scroll_ram>

00004fb4 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    4fb4:	f6 01       	movw	r30, r12
		nop
    4fb6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    4fb8:	98 b8       	out	0x08, r9	; 8
		dec r14
    4fba:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    4fbc:	c9 f0       	breq	.+50     	; 0x4ff0 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    4fbe:	05 91       	lpm	r16, Z+
    4fc0:	08 b9       	out	0x08, r16	; 8
    4fc2:	ea 94       	dec	r14
    4fc4:	a9 f0       	breq	.+42     	; 0x4ff0 <end_fine_scroll_rom>
    4fc6:	05 91       	lpm	r16, Z+
    4fc8:	08 b9       	out	0x08, r16	; 8
    4fca:	ea 94       	dec	r14
    4fcc:	89 f0       	breq	.+34     	; 0x4ff0 <end_fine_scroll_rom>
    4fce:	05 91       	lpm	r16, Z+
    4fd0:	08 b9       	out	0x08, r16	; 8
    4fd2:	ea 94       	dec	r14
    4fd4:	69 f0       	breq	.+26     	; 0x4ff0 <end_fine_scroll_rom>
    4fd6:	05 91       	lpm	r16, Z+
    4fd8:	08 b9       	out	0x08, r16	; 8
    4fda:	ea 94       	dec	r14
    4fdc:	49 f0       	breq	.+18     	; 0x4ff0 <end_fine_scroll_rom>
    4fde:	05 91       	lpm	r16, Z+
    4fe0:	08 b9       	out	0x08, r16	; 8
    4fe2:	ea 94       	dec	r14
    4fe4:	29 f0       	breq	.+10     	; 0x4ff0 <end_fine_scroll_rom>
    4fe6:	05 91       	lpm	r16, Z+
    4fe8:	08 b9       	out	0x08, r16	; 8
    4fea:	ea 94       	dec	r14
    4fec:	09 f0       	breq	.+2      	; 0x4ff0 <end_fine_scroll_rom>

00004fee <end_fine_scroll>:
	...

00004ff0 <end_fine_scroll_rom>:
	...

00004ff2 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    4ff2:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    4ff4:	08 b9       	out	0x08, r16	; 8

		pop r6
    4ff6:	6f 90       	pop	r6
		pop r7
    4ff8:	7f 90       	pop	r7
		pop r9
    4ffa:	9f 90       	pop	r9
		pop r12
    4ffc:	cf 90       	pop	r12
		pop r13
    4ffe:	df 90       	pop	r13
		pop r19
    5000:	3f 91       	pop	r19
		pop r22
    5002:	6f 91       	pop	r22
		pop r23
    5004:	7f 91       	pop	r23
		pop YH
    5006:	df 91       	pop	r29
		pop YL
    5008:	cf 91       	pop	r28

		ret
    500a:	08 95       	ret

0000500c <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    500c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    500e:	e0 91 96 0c 	lds	r30, 0x0C96
	lds ZH,tile_table_hi
    5012:	f0 91 97 0c 	lds	r31, 0x0C97
	mul r24,r18
    5016:	82 9f       	mul	r24, r18
	add ZL,r0
    5018:	e0 0d       	add	r30, r0
	adc ZH,r1
    501a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    501c:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    501e:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    5020:	62 9f       	mul	r22, r18
	add XL,r0
    5022:	a0 0d       	add	r26, r0
	adc XH,r1
    5024:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    5026:	15 90       	lpm	r1, Z+
    5028:	1d 92       	st	X+, r1
    502a:	15 90       	lpm	r1, Z+
    502c:	1d 92       	st	X+, r1
    502e:	15 90       	lpm	r1, Z+
    5030:	1d 92       	st	X+, r1
    5032:	15 90       	lpm	r1, Z+
    5034:	1d 92       	st	X+, r1
    5036:	15 90       	lpm	r1, Z+
    5038:	1d 92       	st	X+, r1
    503a:	15 90       	lpm	r1, Z+
    503c:	1d 92       	st	X+, r1
    503e:	15 90       	lpm	r1, Z+
    5040:	1d 92       	st	X+, r1
    5042:	15 90       	lpm	r1, Z+
    5044:	1d 92       	st	X+, r1
    5046:	15 90       	lpm	r1, Z+
    5048:	1d 92       	st	X+, r1
    504a:	15 90       	lpm	r1, Z+
    504c:	1d 92       	st	X+, r1
    504e:	15 90       	lpm	r1, Z+
    5050:	1d 92       	st	X+, r1
    5052:	15 90       	lpm	r1, Z+
    5054:	1d 92       	st	X+, r1
    5056:	15 90       	lpm	r1, Z+
    5058:	1d 92       	st	X+, r1
    505a:	15 90       	lpm	r1, Z+
    505c:	1d 92       	st	X+, r1
    505e:	15 90       	lpm	r1, Z+
    5060:	1d 92       	st	X+, r1
    5062:	15 90       	lpm	r1, Z+
    5064:	1d 92       	st	X+, r1
    5066:	15 90       	lpm	r1, Z+
    5068:	1d 92       	st	X+, r1
    506a:	15 90       	lpm	r1, Z+
    506c:	1d 92       	st	X+, r1
    506e:	15 90       	lpm	r1, Z+
    5070:	1d 92       	st	X+, r1
    5072:	15 90       	lpm	r1, Z+
    5074:	1d 92       	st	X+, r1
    5076:	15 90       	lpm	r1, Z+
    5078:	1d 92       	st	X+, r1
    507a:	15 90       	lpm	r1, Z+
    507c:	1d 92       	st	X+, r1
    507e:	15 90       	lpm	r1, Z+
    5080:	1d 92       	st	X+, r1
    5082:	15 90       	lpm	r1, Z+
    5084:	1d 92       	st	X+, r1
    5086:	15 90       	lpm	r1, Z+
    5088:	1d 92       	st	X+, r1
    508a:	15 90       	lpm	r1, Z+
    508c:	1d 92       	st	X+, r1
    508e:	15 90       	lpm	r1, Z+
    5090:	1d 92       	st	X+, r1
    5092:	15 90       	lpm	r1, Z+
    5094:	1d 92       	st	X+, r1
    5096:	15 90       	lpm	r1, Z+
    5098:	1d 92       	st	X+, r1
    509a:	15 90       	lpm	r1, Z+
    509c:	1d 92       	st	X+, r1
    509e:	15 90       	lpm	r1, Z+
    50a0:	1d 92       	st	X+, r1
    50a2:	15 90       	lpm	r1, Z+
    50a4:	1d 92       	st	X+, r1
    50a6:	15 90       	lpm	r1, Z+
    50a8:	1d 92       	st	X+, r1
    50aa:	15 90       	lpm	r1, Z+
    50ac:	1d 92       	st	X+, r1
    50ae:	15 90       	lpm	r1, Z+
    50b0:	1d 92       	st	X+, r1
    50b2:	15 90       	lpm	r1, Z+
    50b4:	1d 92       	st	X+, r1
    50b6:	15 90       	lpm	r1, Z+
    50b8:	1d 92       	st	X+, r1
    50ba:	15 90       	lpm	r1, Z+
    50bc:	1d 92       	st	X+, r1
    50be:	15 90       	lpm	r1, Z+
    50c0:	1d 92       	st	X+, r1
    50c2:	15 90       	lpm	r1, Z+
    50c4:	1d 92       	st	X+, r1
    50c6:	15 90       	lpm	r1, Z+
    50c8:	1d 92       	st	X+, r1
    50ca:	15 90       	lpm	r1, Z+
    50cc:	1d 92       	st	X+, r1
    50ce:	15 90       	lpm	r1, Z+
    50d0:	1d 92       	st	X+, r1
    50d2:	15 90       	lpm	r1, Z+
    50d4:	1d 92       	st	X+, r1
    50d6:	15 90       	lpm	r1, Z+
    50d8:	1d 92       	st	X+, r1
    50da:	15 90       	lpm	r1, Z+
    50dc:	1d 92       	st	X+, r1
    50de:	15 90       	lpm	r1, Z+
    50e0:	1d 92       	st	X+, r1
    50e2:	15 90       	lpm	r1, Z+
    50e4:	1d 92       	st	X+, r1
    50e6:	15 90       	lpm	r1, Z+
    50e8:	1d 92       	st	X+, r1
    50ea:	15 90       	lpm	r1, Z+
    50ec:	1d 92       	st	X+, r1
    50ee:	15 90       	lpm	r1, Z+
    50f0:	1d 92       	st	X+, r1
    50f2:	15 90       	lpm	r1, Z+
    50f4:	1d 92       	st	X+, r1
    50f6:	15 90       	lpm	r1, Z+
    50f8:	1d 92       	st	X+, r1
    50fa:	15 90       	lpm	r1, Z+
    50fc:	1d 92       	st	X+, r1
    50fe:	15 90       	lpm	r1, Z+
    5100:	1d 92       	st	X+, r1
    5102:	15 90       	lpm	r1, Z+
    5104:	1d 92       	st	X+, r1
    5106:	15 90       	lpm	r1, Z+
    5108:	1d 92       	st	X+, r1
    510a:	15 90       	lpm	r1, Z+
    510c:	1d 92       	st	X+, r1
    510e:	15 90       	lpm	r1, Z+
    5110:	1d 92       	st	X+, r1
    5112:	15 90       	lpm	r1, Z+
    5114:	1d 92       	st	X+, r1
    5116:	15 90       	lpm	r1, Z+
    5118:	1d 92       	st	X+, r1
    511a:	15 90       	lpm	r1, Z+
    511c:	1d 92       	st	X+, r1
    511e:	15 90       	lpm	r1, Z+
    5120:	1d 92       	st	X+, r1
    5122:	15 90       	lpm	r1, Z+
    5124:	1d 92       	st	X+, r1
	clr r1
    5126:	11 24       	eor	r1, r1
	ret
    5128:	08 95       	ret

0000512a <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    512a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    512c:	ea e3       	ldi	r30, 0x3A	; 58
	ldi ZH,hi8(ram_tiles)
    512e:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    5130:	82 9f       	mul	r24, r18
	add ZL,r0
    5132:	e0 0d       	add	r30, r0
	adc ZH,r1
    5134:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    5136:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    5138:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    513a:	62 9f       	mul	r22, r18
	add XL,r0
    513c:	a0 0d       	add	r26, r0
	adc XH,r1
    513e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    5140:	11 90       	ld	r1, Z+
    5142:	1d 92       	st	X+, r1
    5144:	11 90       	ld	r1, Z+
    5146:	1d 92       	st	X+, r1
    5148:	11 90       	ld	r1, Z+
    514a:	1d 92       	st	X+, r1
    514c:	11 90       	ld	r1, Z+
    514e:	1d 92       	st	X+, r1
    5150:	11 90       	ld	r1, Z+
    5152:	1d 92       	st	X+, r1
    5154:	11 90       	ld	r1, Z+
    5156:	1d 92       	st	X+, r1
    5158:	11 90       	ld	r1, Z+
    515a:	1d 92       	st	X+, r1
    515c:	11 90       	ld	r1, Z+
    515e:	1d 92       	st	X+, r1
    5160:	11 90       	ld	r1, Z+
    5162:	1d 92       	st	X+, r1
    5164:	11 90       	ld	r1, Z+
    5166:	1d 92       	st	X+, r1
    5168:	11 90       	ld	r1, Z+
    516a:	1d 92       	st	X+, r1
    516c:	11 90       	ld	r1, Z+
    516e:	1d 92       	st	X+, r1
    5170:	11 90       	ld	r1, Z+
    5172:	1d 92       	st	X+, r1
    5174:	11 90       	ld	r1, Z+
    5176:	1d 92       	st	X+, r1
    5178:	11 90       	ld	r1, Z+
    517a:	1d 92       	st	X+, r1
    517c:	11 90       	ld	r1, Z+
    517e:	1d 92       	st	X+, r1
    5180:	11 90       	ld	r1, Z+
    5182:	1d 92       	st	X+, r1
    5184:	11 90       	ld	r1, Z+
    5186:	1d 92       	st	X+, r1
    5188:	11 90       	ld	r1, Z+
    518a:	1d 92       	st	X+, r1
    518c:	11 90       	ld	r1, Z+
    518e:	1d 92       	st	X+, r1
    5190:	11 90       	ld	r1, Z+
    5192:	1d 92       	st	X+, r1
    5194:	11 90       	ld	r1, Z+
    5196:	1d 92       	st	X+, r1
    5198:	11 90       	ld	r1, Z+
    519a:	1d 92       	st	X+, r1
    519c:	11 90       	ld	r1, Z+
    519e:	1d 92       	st	X+, r1
    51a0:	11 90       	ld	r1, Z+
    51a2:	1d 92       	st	X+, r1
    51a4:	11 90       	ld	r1, Z+
    51a6:	1d 92       	st	X+, r1
    51a8:	11 90       	ld	r1, Z+
    51aa:	1d 92       	st	X+, r1
    51ac:	11 90       	ld	r1, Z+
    51ae:	1d 92       	st	X+, r1
    51b0:	11 90       	ld	r1, Z+
    51b2:	1d 92       	st	X+, r1
    51b4:	11 90       	ld	r1, Z+
    51b6:	1d 92       	st	X+, r1
    51b8:	11 90       	ld	r1, Z+
    51ba:	1d 92       	st	X+, r1
    51bc:	11 90       	ld	r1, Z+
    51be:	1d 92       	st	X+, r1
    51c0:	11 90       	ld	r1, Z+
    51c2:	1d 92       	st	X+, r1
    51c4:	11 90       	ld	r1, Z+
    51c6:	1d 92       	st	X+, r1
    51c8:	11 90       	ld	r1, Z+
    51ca:	1d 92       	st	X+, r1
    51cc:	11 90       	ld	r1, Z+
    51ce:	1d 92       	st	X+, r1
    51d0:	11 90       	ld	r1, Z+
    51d2:	1d 92       	st	X+, r1
    51d4:	11 90       	ld	r1, Z+
    51d6:	1d 92       	st	X+, r1
    51d8:	11 90       	ld	r1, Z+
    51da:	1d 92       	st	X+, r1
    51dc:	11 90       	ld	r1, Z+
    51de:	1d 92       	st	X+, r1
    51e0:	11 90       	ld	r1, Z+
    51e2:	1d 92       	st	X+, r1
    51e4:	11 90       	ld	r1, Z+
    51e6:	1d 92       	st	X+, r1
    51e8:	11 90       	ld	r1, Z+
    51ea:	1d 92       	st	X+, r1
    51ec:	11 90       	ld	r1, Z+
    51ee:	1d 92       	st	X+, r1
    51f0:	11 90       	ld	r1, Z+
    51f2:	1d 92       	st	X+, r1
    51f4:	11 90       	ld	r1, Z+
    51f6:	1d 92       	st	X+, r1
    51f8:	11 90       	ld	r1, Z+
    51fa:	1d 92       	st	X+, r1
    51fc:	11 90       	ld	r1, Z+
    51fe:	1d 92       	st	X+, r1
    5200:	11 90       	ld	r1, Z+
    5202:	1d 92       	st	X+, r1
    5204:	11 90       	ld	r1, Z+
    5206:	1d 92       	st	X+, r1
    5208:	11 90       	ld	r1, Z+
    520a:	1d 92       	st	X+, r1
    520c:	11 90       	ld	r1, Z+
    520e:	1d 92       	st	X+, r1
    5210:	11 90       	ld	r1, Z+
    5212:	1d 92       	st	X+, r1
    5214:	11 90       	ld	r1, Z+
    5216:	1d 92       	st	X+, r1
    5218:	11 90       	ld	r1, Z+
    521a:	1d 92       	st	X+, r1
    521c:	11 90       	ld	r1, Z+
    521e:	1d 92       	st	X+, r1
    5220:	11 90       	ld	r1, Z+
    5222:	1d 92       	st	X+, r1
    5224:	11 90       	ld	r1, Z+
    5226:	1d 92       	st	X+, r1
    5228:	11 90       	ld	r1, Z+
    522a:	1d 92       	st	X+, r1
    522c:	11 90       	ld	r1, Z+
    522e:	1d 92       	st	X+, r1
    5230:	11 90       	ld	r1, Z+
    5232:	1d 92       	st	X+, r1
    5234:	11 90       	ld	r1, Z+
    5236:	1d 92       	st	X+, r1
    5238:	11 90       	ld	r1, Z+
    523a:	1d 92       	st	X+, r1
    523c:	11 90       	ld	r1, Z+
    523e:	1d 92       	st	X+, r1
	clr r1
    5240:	11 24       	eor	r1, r1
	ret
    5242:	08 95       	ret

00005244 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    5244:	0f 93       	push	r16
	push r17
    5246:	1f 93       	push	r17
	push YL
    5248:	cf 93       	push	r28
	push YH
    524a:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    524c:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    524e:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    5250:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(sprites)	
    5252:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    5254:	e0 0d       	add	r30, r0
	adc ZH,r1
    5256:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    5258:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    525a:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    525c:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    525e:	8e 9f       	mul	r24, r30
	movw r26,r0
    5260:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    5262:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    5264:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    5266:	ce e8       	ldi	r28, 0x8E	; 142
	ldi YH,hi8(sprites_tile_banks)	
    5268:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    526a:	00 24       	eor	r0, r0
	add YL,r1
    526c:	c1 0d       	add	r28, r1
	adc YH,r0		
    526e:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    5270:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    5272:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    5274:	ea 0f       	add	r30, r26
	adc ZH,r27
    5276:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    5278:	aa e3       	ldi	r26, 0x3A	; 58
	ldi XH,hi8(ram_tiles)
    527a:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    527c:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    527e:	69 9f       	mul	r22, r25
	add XL,r0
    5280:	a0 0d       	add	r26, r0
	adc XH,r1
    5282:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    5284:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    5286:	dd 27       	eor	r29, r29

	cpi r20,0	
    5288:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    528a:	51 f4       	brne	.+20     	; 0x52a0 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    528c:	a2 0f       	add	r26, r18
	adc XH,r1
    528e:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    5290:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    5292:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    5294:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    5296:	11 c0       	rjmp	.+34     	; 0x52ba <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    5298:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    529a:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    529c:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    529e:	0d c0       	rjmp	.+26     	; 0x52ba <x_check_end>

000052a0 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    52a0:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    52a2:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    52a4:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    52a6:	04 c0       	rjmp	.+8      	; 0x52b0 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    52a8:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    52aa:	e8 0f       	add	r30, r24
	adc ZH,r1	
    52ac:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    52ae:	05 c0       	rjmp	.+10     	; 0x52ba <x_check_end>

000052b0 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    52b0:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    52b2:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    52b4:	e2 0f       	add	r30, r18
	adc ZH,r1
    52b6:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    52b8:	31 97       	sbiw	r30, 0x01	; 1

000052ba <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    52ba:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    52bc:	51 f4       	brne	.+20     	; 0x52d2 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    52be:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    52c0:	93 9f       	mul	r25, r19
	add XL,r0
    52c2:	a0 0d       	add	r26, r0
	adc XH,r1
    52c4:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    52c6:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    52c8:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    52ca:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    52cc:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    52ce:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    52d0:	0a c0       	rjmp	.+20     	; 0x52e6 <y_check_end>

000052d2 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    52d2:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    52d4:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    52d6:	63 2f       	mov	r22, r19
	dec r22
    52d8:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    52da:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    52dc:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    52de:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    52e0:	56 9f       	mul	r21, r22
	add ZL,r0
    52e2:	e0 0d       	add	r30, r0
	adc ZH,r1	
    52e4:	f1 1d       	adc	r31, r1

000052e6 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    52e6:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    52e8:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    52ea:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    52ec:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    52ee:	00 ff       	sbrs	r16, 0
	clr r23
    52f0:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    52f2:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    52f4:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    52f6:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    52f8:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    52fa:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    52fc:	59 1b       	sub	r21, r25

000052fe <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    52fe:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    5300:	48 1b       	sub	r20, r24

00005302 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    5302:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    5304:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    5306:	2c 93       	st	X, r18
	adiw XL,1
    5308:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    530a:	e6 0f       	add	r30, r22
	adc ZH,r23
    530c:	f7 1f       	adc	r31, r23
	dec r20
    530e:	4a 95       	dec	r20
	brne x_loop
    5310:	c1 f7       	brne	.-16     	; 0x5302 <x_loop>

	add ZL,YL		;src+=srcXdiff
    5312:	ec 0f       	add	r30, r28
	adc ZH,YH
    5314:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    5316:	a8 0f       	add	r26, r24
	adc XH,r1
    5318:	b1 1d       	adc	r27, r1
	dec r21
    531a:	5a 95       	dec	r21
	brne y_loop
    531c:	81 f7       	brne	.-32     	; 0x52fe <y_loop>


	pop YH
    531e:	df 91       	pop	r29
	pop YL
    5320:	cf 91       	pop	r28
	pop r17
    5322:	1f 91       	pop	r17
	pop r16
    5324:	0f 91       	pop	r16
	ret
    5326:	08 95       	ret

00005328 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    5328:	0f 92       	push	r0
	push r1
    532a:	1f 92       	push	r1
	push ZL;2
    532c:	ef 93       	push	r30
	push ZH;2
    532e:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    5330:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    5332:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    5334:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    5338:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    533a:	f1 e0       	ldi	r31, 0x01	; 1

0000533c <latency_loop>:
latency_loop:
	cp ZL,ZH
    533c:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    533e:	00 f0       	brcs	.+0      	; 0x5340 <latency_loop+0x4>
	inc ZH
    5340:	f3 95       	inc	r31
	cpi ZH,10
    5342:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    5344:	d8 f3       	brcs	.-10     	; 0x533c <latency_loop>
	jmp .
    5346:	0c 94 a5 29 	jmp	0x534a	; 0x534a <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    534a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    534e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5350:	e0 93 a1 0c 	sts	0x0CA1, r30

	;process sync phases
	lds ZH,sync_phase
    5354:	f0 91 a0 0c 	lds	r31, 0x0CA0
	sbrc ZH,0
    5358:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    535a:	57 c0       	rjmp	.+174    	; 0x540a <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    535c:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    535e:	98 f0       	brcs	.+38     	; 0x5386 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    5360:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    5362:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    5366:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    5368:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    536c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    536e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    5370:	26 f4       	brtc	.+8      	; 0x537a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    5372:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    5374:	0e 94 8c 2a 	call	0x5518	; 0x5518 <update_sound>
	rjmp sync_end
    5378:	b7 c0       	rjmp	.+366    	; 0x54e8 <sync_end>

0000537a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    537a:	e5 e1       	ldi	r30, 0x15	; 21
    537c:	ea 95       	dec	r30
    537e:	f1 f7       	brne	.-4      	; 0x537c <sync_pre_eq_no_sound_update+0x2>
    5380:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    5382:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    5384:	b1 c0       	rjmp	.+354    	; 0x54e8 <sync_end>

00005386 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    5386:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    5388:	38 f1       	brcs	.+78     	; 0x53d8 <sync_post_eq>

	rjmp .
    538a:	00 c0       	rjmp	.+0      	; 0x538c <sync_eq+0x6>
	rjmp .
    538c:	00 c0       	rjmp	.+0      	; 0x538e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    538e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    5390:	e0 fb       	bst	r30, 0
	ldi ZL,4
    5392:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    5394:	16 f4       	brtc	.+4      	; 0x539a <sync_eq_skip>
	
	call update_sound
    5396:	0e 94 8c 2a 	call	0x5518	; 0x5518 <update_sound>

0000539a <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    539a:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    539c:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    53a0:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    53a2:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    53a6:	a0 c0       	rjmp	.+320    	; 0x54e8 <sync_end>

000053a8 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    53a8:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    53aa:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    53ac:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    53ae:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    53b2:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    53b4:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    53b6:	00 f0       	brcs	.+0      	; 0x53b8 <__vector_14+0x10>

	cpi ZL,2
    53b8:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    53ba:	00 f0       	brcs	.+0      	; 0x53bc <__vector_14+0x14>

	cpi ZL,3
    53bc:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    53be:	00 f0       	brcs	.+0      	; 0x53c0 <__vector_14+0x18>

	cpi ZL,4
    53c0:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    53c2:	00 f0       	brcs	.+0      	; 0x53c4 <__vector_14+0x1c>

	cpi ZL,5
    53c4:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    53c6:	00 f0       	brcs	.+0      	; 0x53c8 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    53c8:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    53ca:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    53cc:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    53d0:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    53d2:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    53d4:	ef 91       	pop	r30
	reti
    53d6:	18 95       	reti

000053d8 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    53d8:	00 c0       	rjmp	.+0      	; 0x53da <sync_post_eq+0x2>

	bst ZL,0
    53da:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    53dc:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    53de:	26 f4       	brtc	.+8      	; 0x53e8 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    53e0:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    53e2:	0e 94 8c 2a 	call	0x5518	; 0x5518 <update_sound>
	rjmp sync_pre_eq_cont
    53e6:	05 c0       	rjmp	.+10     	; 0x53f2 <sync_pre_eq_cont>

000053e8 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    53e8:	e5 e1       	ldi	r30, 0x15	; 21
    53ea:	ea 95       	dec	r30
    53ec:	f1 f7       	brne	.-4      	; 0x53ea <sync_post_eq_no_sound_update+0x2>
    53ee:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    53f0:	28 9a       	sbi	0x05, 0	; 5

000053f2 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    53f2:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    53f6:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    53f8:	09 f0       	breq	.+2      	; 0x53fc <sync_pre_eq_cont+0xa>
	rjmp sync_end
    53fa:	76 c0       	rjmp	.+236    	; 0x54e8 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    53fc:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    53fe:	e0 93 a1 0c 	sts	0x0CA1, r30
	ldi ZL,1
    5402:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    5404:	e0 93 a0 0c 	sts	0x0CA0, r30
	
	rjmp sync_end
    5408:	6f c0       	rjmp	.+222    	; 0x54e8 <sync_end>

0000540a <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    540a:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    540c:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    5410:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    5412:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    5416:	00 c0       	rjmp	.+0      	; 0x5418 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    5418:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    541a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    541c:	00 c0       	rjmp	.+0      	; 0x541e <sync_hsync+0x14>
	call update_sound
    541e:	0e 94 8c 2a 	call	0x5518	; 0x5518 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    5422:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5424:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    5428:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    542a:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cp ZL,ZH
    542e:	ef 17       	cp	r30, r31
	brsh no_render
    5430:	d0 f4       	brcc	.+52     	; 0x5466 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    5432:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    5434:	00 90 a7 0c 	lds	r0, 0x0CA7
	sub ZH,r0				
    5438:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    543a:	00 90 a8 0c 	lds	r0, 0x0CA8
	sub ZH,r0			
    543e:	f0 19       	sub	r31, r0
	cp ZL,ZH
    5440:	ef 17       	cp	r30, r31
	brlo no_render
    5442:	88 f0       	brcs	.+34     	; 0x5466 <no_render>

	;push r1-r29
	ldi ZL,29
    5444:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    5446:	ff 27       	eor	r31, r31

00005448 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    5448:	00 80       	ld	r0, Z
	push r0
    544a:	0f 92       	push	r0
	dec ZL
    544c:	ea 95       	dec	r30
	brne push_loop	
    544e:	e1 f7       	brne	.-8      	; 0x5448 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    5450:	06 e0       	ldi	r16, 0x06	; 6
    5452:	0a 95       	dec	r16
    5454:	f1 f7       	brne	.-4      	; 0x5452 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    5456:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    545a:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    545c:	ff 27       	eor	r31, r31

0000545e <pop_loop>:
pop_loop:
	pop r0
    545e:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    5460:	01 92       	st	Z+, r0
	cpi ZL,30
    5462:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    5464:	e0 f3       	brcs	.-8      	; 0x545e <pop_loop>

00005466 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5466:	e0 91 a1 0c 	lds	r30, 0x0CA1
	cpi ZL,0
    546a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    546c:	09 f0       	breq	.+2      	; 0x5470 <no_render+0xa>
	rjmp sync_end
    546e:	3c c0       	rjmp	.+120    	; 0x54e8 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    5470:	2f 93       	push	r18
	push r19
    5472:	3f 93       	push	r19
	push r20
    5474:	4f 93       	push	r20
	push r21
    5476:	5f 93       	push	r21
	push r22
    5478:	6f 93       	push	r22
	push r23
    547a:	7f 93       	push	r23
	push r24
    547c:	8f 93       	push	r24
	push r25
    547e:	9f 93       	push	r25
	push r26
    5480:	af 93       	push	r26
	push r27
    5482:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    5484:	78 94       	sei
	clr r1
    5486:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5488:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    548a:	e0 93 a0 0c 	sts	0x0CA0, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    548e:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    5490:	e0 93 a1 0c 	sts	0x0CA1, r30



	;increment the vsync counter
	lds r24,vsync_counter
    5494:	80 91 b1 0c 	lds	r24, 0x0CB1
	lds r25,vsync_counter+1
    5498:	90 91 b2 0c 	lds	r25, 0x0CB2
	adiw r24,1
    549c:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    549e:	80 93 b1 0c 	sts	0x0CB1, r24
	sts vsync_counter+1,r25
    54a2:	90 93 b2 0c 	sts	0x0CB2, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    54a6:	e0 91 a3 0c 	lds	r30, 0x0CA3
	lds ZH,pre_vsync_user_callback+1
    54aa:	f0 91 a4 0c 	lds	r31, 0x0CA4
	cp  ZL,r1
    54ae:	e1 15       	cp	r30, r1
	cpc ZH,r1
    54b0:	f1 05       	cpc	r31, r1
	breq .+2 
    54b2:	09 f0       	breq	.+2      	; 0x54b6 <no_render+0x50>
	icall
    54b4:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    54b6:	0e 94 2d 2c 	call	0x585a	; 0x585a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    54ba:	0e 94 48 3a 	call	0x7490	; 0x7490 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    54be:	0e 94 86 2a 	call	0x550c	; 0x550c <process_music>
	clr r1
    54c2:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    54c4:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,post_vsync_user_callback+1
    54c8:	f0 91 a6 0c 	lds	r31, 0x0CA6
	cp  ZL,r1
    54cc:	e1 15       	cp	r30, r1
	cpc ZH,r1
    54ce:	f1 05       	cpc	r31, r1
	breq .+2 
    54d0:	09 f0       	breq	.+2      	; 0x54d4 <no_render+0x6e>
	icall
    54d2:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    54d4:	bf 91       	pop	r27
	pop r26
    54d6:	af 91       	pop	r26
	pop r25
    54d8:	9f 91       	pop	r25
	pop r24
    54da:	8f 91       	pop	r24
	pop r23
    54dc:	7f 91       	pop	r23
	pop r22
    54de:	6f 91       	pop	r22
	pop r21
    54e0:	5f 91       	pop	r21
	pop r20
    54e2:	4f 91       	pop	r20
	pop r19
    54e4:	3f 91       	pop	r19
	pop r18
    54e6:	2f 91       	pop	r18

000054e8 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    54e8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    54ea:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    54ec:	ff 91       	pop	r31
	pop ZL
    54ee:	ef 91       	pop	r30
	pop r1
    54f0:	1f 90       	pop	r1
	pop r0
    54f2:	0f 90       	pop	r0
	reti
    54f4:	18 95       	reti

000054f6 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    54f6:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    54f8:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    54fa:	00 c0       	rjmp	.+0      	; 0x54fc <hsync_pulse+0x6>
	call update_sound
    54fc:	0e 94 8c 2a 	call	0x5518	; 0x5518 <update_sound>

	lds ZL,sync_pulse
    5500:	e0 91 a1 0c 	lds	r30, 0x0CA1
	dec ZL
    5504:	ea 95       	dec	r30
	sts sync_pulse,ZL
    5506:	e0 93 a1 0c 	sts	0x0CA1, r30

	ret
    550a:	08 95       	ret

0000550c <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    550c:	e0 91 b7 0c 	lds	r30, 0x0CB7
	sbrc ZL,0
    5510:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    5512:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <ProcessMusic>
#endif

	ret
    5516:	08 95       	ret

00005518 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    5518:	0f 93       	push	r16
	push r17
    551a:	1f 93       	push	r17
	push r18
    551c:	2f 93       	push	r18
	push r28
    551e:	cf 93       	push	r28
	push r29
    5520:	df 93       	push	r29

	mov r18,ZL
    5522:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    5524:	00 91 b9 0c 	lds	r16, 0x0CB9
	lds r17,tr1_pos_frac
    5528:	10 91 bb 0c 	lds	r17, 0x0CBB
	add	r17,r16	;add step to fractional part of sample pos
    552c:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    552e:	00 91 ba 0c 	lds	r16, 0x0CBA
	lds ZL,tr1_pos_lo
    5532:	e0 91 bc 0c 	lds	r30, 0x0CBC
	lds ZH,tr1_pos_hi 
    5536:	f0 91 bd 0c 	lds	r31, 0x0CBD
	adc ZL,r16	;add step to low byte of sample pos
    553a:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    553c:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    553e:	e0 93 bc 0c 	sts	0x0CBC, r30
	sts tr1_pos_frac,r17
    5542:	10 93 bb 0c 	sts	0x0CBB, r17
	lds r17,tr1_vol
    5546:	10 91 b8 0c 	lds	r17, 0x0CB8
	mulsu r16,r17;(sample*mixing vol)
    554a:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    554c:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    554e:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    5550:	d0 2d       	mov	r29, r0
	nop
    5552:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    5554:	00 91 bf 0c 	lds	r16, 0x0CBF
	lds r17,tr2_pos_frac
    5558:	10 91 c1 0c 	lds	r17, 0x0CC1
	add	r17,r16	;add step to fractional part of sample pos
    555c:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    555e:	00 91 c0 0c 	lds	r16, 0x0CC0
	lds ZL,tr2_pos_lo
    5562:	e0 91 c2 0c 	lds	r30, 0x0CC2
	lds ZH,tr2_pos_hi 
    5566:	f0 91 c3 0c 	lds	r31, 0x0CC3
	adc ZL,r16	;add step to low byte of sample pos
    556a:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    556c:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    556e:	e0 93 c2 0c 	sts	0x0CC2, r30
	sts tr2_pos_frac,r17
    5572:	10 93 c1 0c 	sts	0x0CC1, r17
	lds r17,tr2_vol
    5576:	10 91 be 0c 	lds	r17, 0x0CBE

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    557a:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    557c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    557e:	20 ff       	sbrs	r18, 0
	rjmp .
    5580:	00 c0       	rjmp	.+0      	; 0x5582 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    5582:	01 03       	mulsu	r16, r17
	clr r0
    5584:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    5586:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5588:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    558a:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    558c:	00 91 c5 0c 	lds	r16, 0x0CC5
	lds r17,tr3_pos_frac
    5590:	10 91 c7 0c 	lds	r17, 0x0CC7
	add	r17,r16				;add step to fractional part of sample pos
    5594:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    5596:	00 91 c6 0c 	lds	r16, 0x0CC6
	lds ZL,tr3_pos_lo
    559a:	e0 91 c8 0c 	lds	r30, 0x0CC8
	lds ZH,tr3_pos_hi 
    559e:	f0 91 c9 0c 	lds	r31, 0x0CC9
	adc ZL,r16				;add step to low byte of sample pos
    55a2:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    55a4:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    55a6:	e0 93 c8 0c 	sts	0x0CC8, r30
	sts tr3_pos_frac,r17
    55aa:	10 93 c7 0c 	sts	0x0CC7, r17
	lds r17,tr3_vol
    55ae:	10 91 c4 0c 	lds	r17, 0x0CC4
	mulsu r16,r17			;(sample*mixing vol)
    55b2:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    55b4:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    55b6:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    55b8:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    55ba:	00 91 cc 0c 	lds	r16, 0x0CCC
	lds r17,tr4_barrel_hi
    55be:	10 91 cd 0c 	lds	r17, 0x0CCD
	lds ZL,tr4_divider
    55c2:	e0 91 ce 0c 	lds	r30, 0x0CCE
	dec ZL	
    55c6:	ea 95       	dec	r30
	brpl ch4_no_shift	
    55c8:	92 f4       	brpl	.+36     	; 0x55ee <ch4_no_shift>

	lds ZH,tr4_params
    55ca:	f0 91 cb 0c 	lds	r31, 0x0CCB
	mov ZL,ZH
    55ce:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    55d0:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    55d2:	00 2e       	mov	r0, r16
	lsr r0
    55d4:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    55d6:	00 26       	eor	r0, r16
	bst r0,0
    55d8:	00 fa       	bst	r0, 0
	lsr r17
    55da:	16 95       	lsr	r17
	ror r16
    55dc:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    55de:	16 f9       	bld	r17, 6
	sbrs ZH,0
    55e0:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    55e2:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    55e4:	00 93 cc 0c 	sts	0x0CCC, r16
	sts tr4_barrel_hi,r17
    55e8:	10 93 cd 0c 	sts	0x0CCD, r17

	rjmp ch4_end
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <ch4_end>

000055ee <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    55ee:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    55f0:	1a 95       	dec	r17
	brne .-4
    55f2:	f1 f7       	brne	.-4      	; 0x55f0 <ch4_no_shift+0x2>

000055f4 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    55f4:	e0 93 ce 0c 	sts	0x0CCE, r30
	ldi r17,0x80 ;-128
    55f8:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    55fa:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    55fc:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    55fe:	21 ff       	sbrs	r18, 1
	rjmp .
    5600:	00 c0       	rjmp	.+0      	; 0x5602 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    5602:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    5604:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    5606:	00 91 ca 0c 	lds	r16, 0x0CCA

	mulsu r17,r16;(sample*mixing vol)
    560a:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    560c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    560e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    5610:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    5612:	00 91 d3 0c 	lds	r16, 0x0CD3
	lds r17,tr5_step_lo 
    5616:	10 91 d1 0c 	lds	r17, 0x0CD1
	add r16,r17
    561a:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    561c:	00 93 d3 0c 	sts	0x0CD3, r16

	;add lo
	lds ZL,tr5_pos_lo
    5620:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds r17,tr5_step_hi 
    5624:	10 91 d2 0c 	lds	r17, 0x0CD2
	adc ZL,r17
    5628:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    562a:	f0 91 d5 0c 	lds	r31, 0x0CD5
	ldi r16,0
    562e:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    5630:	f0 1f       	adc	r31, r16

	movw r16,ZL
    5632:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    5634:	00 90 d6 0c 	lds	r0, 0x0CD6
	lds r1,tr5_loop_len_hi	
    5638:	10 90 d7 0c 	lds	r1, 0x0CD7
	sub r16,r0
    563c:	00 19       	sub	r16, r0
	sbc r17,r1
    563e:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    5640:	00 90 d8 0c 	lds	r0, 0x0CD8
	lds r1,tr5_loop_end_hi
    5644:	10 90 d9 0c 	lds	r1, 0x0CD9

	cp ZL,r0
    5648:	e0 15       	cp	r30, r0
	cpc ZH,r1
    564a:	f1 05       	cpc	r31, r1
	brlo .+2
    564c:	08 f0       	brcs	.+2      	; 0x5650 <ch4_end+0x5c>
	movw ZL,r16
    564e:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    5650:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr5_pos_hi,ZH
    5654:	f0 93 d5 0c 	sts	0x0CD5, r31

	lpm	r16,Z	;load sample
    5658:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    565a:	10 91 d0 0c 	lds	r17, 0x0CD0

	mulsu r16,r17;(sample*mixing vol)
    565e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    5660:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    5662:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    5664:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    5666:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    5668:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    566a:	d0 05       	cpc	r29, r0
	brlt .+2
    566c:	0c f0       	brlt	.+2      	; 0x5670 <ch4_end+0x7c>
	ldi r28,127
    566e:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    5670:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    5672:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    5674:	d0 05       	cpc	r29, r0
	brge .+2
    5676:	0c f4       	brge	.+2      	; 0x567a <ch4_end+0x86>
	ldi r28,-128
    5678:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    567a:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    567c:	c0 93 b3 00 	sts	0x00B3, r28

00005680 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    5680:	df 91       	pop	r29
	pop r28
    5682:	cf 91       	pop	r28
	pop r18
    5684:	2f 91       	pop	r18
	pop r17
    5686:	1f 91       	pop	r17
	pop r16
    5688:	0f 91       	pop	r16
	
	ret
    568a:	08 95       	ret

0000568c <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    568c:	80 93 8e 0c 	sts	0x0C8E, r24
	sts sprites_tile_banks+1,r25
    5690:	90 93 8f 0c 	sts	0x0C8F, r25
	ret
    5694:	08 95       	ret

00005696 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    5696:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    5698:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    569a:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    569c:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    569e:	6c e1       	ldi	r22, 0x1C	; 28

000056a0 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    56a0:	6d 93       	st	X+, r22
	sbiw r30,1
    56a2:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    56a4:	e9 f7       	brne	.-6      	; 0x56a0 <fill_vram_loop>

	clr r1
    56a6:	11 24       	eor	r1, r1

	ret
    56a8:	08 95       	ret

000056aa <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    56aa:	50 91 98 0c 	lds	r21, 0x0C98
	add r20,21
    56ae:	45 0f       	add	r20, r21
	rjmp SetTile	
    56b0:	00 c0       	rjmp	.+0      	; 0x56b2 <SetTile>

000056b2 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    56b2:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    56b4:	76 2f       	mov	r23, r22
	lsr r22
    56b6:	66 95       	lsr	r22
	lsr r22
    56b8:	66 95       	lsr	r22
	lsr r22			;y>>3
    56ba:	66 95       	lsr	r22
	ldi r18,8		
    56bc:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    56be:	82 9f       	mul	r24, r18
	movw XL,r0
    56c0:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    56c2:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    56c4:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    56c6:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    56c8:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    56ca:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    56cc:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    56ce:	4c 93       	st	X, r20

	clr r1
    56d0:	11 24       	eor	r1, r1

	ret
    56d2:	08 95       	ret

000056d4 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    56d4:	80 93 98 0c 	sts	0x0C98, r24
	ret
    56d8:	08 95       	ret

000056da <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    56da:	80 93 96 0c 	sts	0x0C96, r24
	sts tile_table_hi,r25	
    56de:	90 93 97 0c 	sts	0x0C97, r25
	ret
    56e2:	08 95       	ret

000056e4 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    56e4:	80 91 a2 0c 	lds	r24, 0x0CA2
	andi r24,SYNC_FLAG_VSYNC
    56e8:	81 70       	andi	r24, 0x01	; 1
	ret
    56ea:	08 95       	ret

000056ec <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    56ec:	20 91 a2 0c 	lds	r18, 0x0CA2
	andi r18,~SYNC_FLAG_VSYNC
    56f0:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    56f2:	20 93 a2 0c 	sts	0x0CA2, r18
	ret
    56f6:	08 95       	ret

000056f8 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    56f8:	88 23       	and	r24, r24
	brne rj_p2
    56fa:	29 f4       	brne	.+10     	; 0x5706 <rj_p2>
		
	lds r24,joypad1_status_lo
    56fc:	80 91 a9 0c 	lds	r24, 0x0CA9
	lds r25,joypad1_status_lo+1
    5700:	90 91 aa 0c 	lds	r25, 0x0CAA
	ret
    5704:	08 95       	ret

00005706 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    5706:	80 91 ad 0c 	lds	r24, 0x0CAD
	lds r25,joypad2_status_lo+1	
    570a:	90 91 ae 0c 	lds	r25, 0x0CAE

	ret
    570e:	08 95       	ret

00005710 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    5710:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    5712:	7a 95       	dec	r23
	brne .-4 ;~1 us
    5714:	f1 f7       	brne	.-4      	; 0x5712 <WaitUs+0x2>
	nop
    5716:	00 00       	nop
	sbiw r24,1
    5718:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    571a:	d1 f7       	brne	.-12     	; 0x5710 <WaitUs>

	ret
    571c:	08 95       	ret

0000571e <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    571e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5720:	fe cf       	rjmp	.-4      	; 0x571e <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5722:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5724:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    5726:	60 bd       	out	0x20, r22	; 32
   cli
    5728:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    572a:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    572c:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    572e:	78 94       	sei
   ret
    5730:	08 95       	ret

00005732 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5732:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    5734:	fe cf       	rjmp	.-4      	; 0x5732 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5736:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5738:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    573a:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    573c:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    573e:	80 b5       	in	r24, 0x20	; 32
   sei
    5740:	78 94       	sei
   ret
    5742:	08 95       	ret

00005744 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    5744:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    5746:	80 93 a1 0c 	sts	0x0CA1, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    574a:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    574e:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    5752:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    5756:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    575a:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    575e:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    5762:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    5766:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    576a:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    576c:	80 93 81 00 	sts	0x0081, r24

		cli
    5770:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    5772:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    5774:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    5778:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    577a:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    577e:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    5780:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    5784:	90 93 60 00 	sts	0x0060, r25
	
		sei
    5788:	78 94       	sei

0000578a <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    578a:	80 91 a1 0c 	lds	r24, 0x0CA1
		cpi r24,8
    578e:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    5790:	e0 f3       	brcs	.-8      	; 0x578a <wait>

		ret
    5792:	08 95       	ret

00005794 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    5794:	0f 93       	push	r16
		push r17
    5796:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    5798:	0f b7       	in	r16, 0x3f	; 63
		push r16
    579a:	0f 93       	push	r16

		lds r16,sync_pulse
    579c:	00 91 a1 0c 	lds	r16, 0x0CA1
		inc r16
    57a0:	03 95       	inc	r16
		sts sync_pulse,r16
    57a2:	00 93 a1 0c 	sts	0x0CA1, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    57a6:	00 fd       	sbrc	r16, 0
		rjmp 1f
    57a8:	08 c0       	rjmp	.+16     	; 0x57ba <__vector_8+0x26>
		lds r17,random_value
    57aa:	10 91 b3 0c 	lds	r17, 0x0CB3
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    57ae:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    57b2:	10 27       	eor	r17, r16
		sts random_value,r17
    57b4:	10 93 b3 0c 	sts	0x0CB3, r17
		rjmp 2f
    57b8:	07 c0       	rjmp	.+14     	; 0x57c8 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    57ba:	10 91 b4 0c 	lds	r17, 0x0CB4
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    57be:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    57c2:	10 27       	eor	r17, r16
		sts random_value+1,r17
    57c4:	10 93 b4 0c 	sts	0x0CB4, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    57c8:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    57ca:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    57ce:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    57d0:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    57d2:	1f 91       	pop	r17
		pop r16
    57d4:	0f 91       	pop	r16
		reti
    57d6:	18 95       	reti

000057d8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    57d8:	98 e0       	ldi	r25, 0x08	; 8
    57da:	88 e1       	ldi	r24, 0x18	; 24
    57dc:	0f b6       	in	r0, 0x3f	; 63
    57de:	f8 94       	cli
    57e0:	a8 95       	wdr
    57e2:	80 93 60 00 	sts	0x0060, r24
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	90 93 60 00 	sts	0x0060, r25
	while(1);
    57ec:	ff cf       	rjmp	.-2      	; 0x57ec <SoftReset+0x14>

000057ee <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    57ee:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    57f0:	c8 95       	lpm
    57f2:	c8 95       	lpm
		Wait200ns();
    57f4:	c8 95       	lpm
    57f6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    57f8:	12 98       	cbi	0x02, 2	; 2
    57fa:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    5804:	36 95       	lsr	r19
    5806:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    5808:	96 95       	lsr	r25
    580a:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    580c:	c8 95       	lpm
    580e:	c8 95       	lpm
			Wait200ns();
    5810:	c8 95       	lpm
    5812:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5814:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    5816:	00 9b       	sbis	0x00, 0	; 0
    5818:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    581a:	01 9b       	sbis	0x00, 1	; 0
    581c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    581e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    5820:	c8 95       	lpm
    5822:	c8 95       	lpm
			Wait200ns();
    5824:	c8 95       	lpm
    5826:	c8 95       	lpm
    5828:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    582a:	61 f7       	brne	.-40     	; 0x5804 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    582c:	30 93 aa 0c 	sts	0x0CAA, r19
    5830:	20 93 a9 0c 	sts	0x0CA9, r18
		joypad2_status_lo=p2ButtonsLo;
    5834:	90 93 ae 0c 	sts	0x0CAE, r25
    5838:	80 93 ad 0c 	sts	0x0CAD, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    583c:	80 91 a9 0c 	lds	r24, 0x0CA9
    5840:	90 91 aa 0c 	lds	r25, 0x0CAA
    5844:	0f 97       	sbiw	r24, 0x0f	; 15
    5846:	31 f0       	breq	.+12     	; 0x5854 <ReadButtons+0x66>
    5848:	80 91 ad 0c 	lds	r24, 0x0CAD
    584c:	90 91 ae 0c 	lds	r25, 0x0CAE
    5850:	0f 97       	sbiw	r24, 0x0f	; 15
    5852:	11 f4       	brne	.+4      	; 0x5858 <ReadButtons+0x6a>
		SoftReset();
    5854:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <SoftReset>
    5858:	08 95       	ret

0000585a <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    585a:	10 92 e3 0c 	sts	0x0CE3, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    585e:	00 99       	sbic	0x00, 0	; 0
    5860:	03 c0       	rjmp	.+6      	; 0x5868 <ReadControllers+0xe>
    5862:	81 e0       	ldi	r24, 0x01	; 1
    5864:	80 93 e3 0c 	sts	0x0CE3, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5868:	01 99       	sbic	0x00, 1	; 0
    586a:	05 c0       	rjmp	.+10     	; 0x5876 <ReadControllers+0x1c>
    586c:	80 91 e3 0c 	lds	r24, 0x0CE3
    5870:	82 60       	ori	r24, 0x02	; 2
    5872:	80 93 e3 0c 	sts	0x0CE3, r24
			
	//read the standard buttons
	ReadButtons();
    5876:	0c 94 f7 2b 	jmp	0x57ee	; 0x57ee <ReadButtons>

0000587a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    587a:	cf 93       	push	r28
    587c:	df 93       	push	r29
    587e:	c0 e0       	ldi	r28, 0x00	; 0
    5880:	d0 e0       	ldi	r29, 0x00	; 0
    5882:	fe 01       	movw	r30, r28
    5884:	e4 55       	subi	r30, 0x54	; 84
    5886:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    5888:	64 91       	lpm	r22, Z
    588a:	ce 01       	movw	r24, r28
    588c:	0e 94 8f 2b 	call	0x571e	; 0x571e <WriteEeprom>
    5890:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    5892:	c0 32       	cpi	r28, 0x20	; 32
    5894:	d1 05       	cpc	r29, r1
    5896:	a9 f7       	brne	.-22     	; 0x5882 <FormatEeprom+0x8>
    5898:	c0 e2       	ldi	r28, 0x20	; 32
    589a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    589c:	6f ef       	ldi	r22, 0xFF	; 255
    589e:	ce 01       	movw	r24, r28
    58a0:	0e 94 8f 2b 	call	0x571e	; 0x571e <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    58a4:	6f ef       	ldi	r22, 0xFF	; 255
    58a6:	ce 01       	movw	r24, r28
    58a8:	01 96       	adiw	r24, 0x01	; 1
    58aa:	0e 94 8f 2b 	call	0x571e	; 0x571e <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    58ae:	a0 96       	adiw	r28, 0x20	; 32
    58b0:	c1 15       	cp	r28, r1
    58b2:	88 e0       	ldi	r24, 0x08	; 8
    58b4:	d8 07       	cpc	r29, r24
    58b6:	91 f7       	brne	.-28     	; 0x589c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    58b8:	df 91       	pop	r29
    58ba:	cf 91       	pop	r28
    58bc:	08 95       	ret

000058be <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    58be:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	0e 94 99 2b 	call	0x5732	; 0x5732 <ReadEeprom>
    58c8:	c8 2f       	mov	r28, r24
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	0e 94 99 2b 	call	0x5732	; 0x5732 <ReadEeprom>
    58d2:	28 2f       	mov	r18, r24
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	32 2f       	mov	r19, r18
    58d8:	22 27       	eor	r18, r18
    58da:	2c 0f       	add	r18, r28
    58dc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	2a 35       	cpi	r18, 0x5A	; 90
    58e2:	35 45       	sbci	r19, 0x55	; 85
    58e4:	09 f0       	breq	.+2      	; 0x58e8 <isEepromFormatted+0x2a>
    58e6:	80 e0       	ldi	r24, 0x00	; 0
}
    58e8:	cf 91       	pop	r28
    58ea:	08 95       	ret

000058ec <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    58ec:	8f 92       	push	r8
    58ee:	9f 92       	push	r9
    58f0:	af 92       	push	r10
    58f2:	bf 92       	push	r11
    58f4:	cf 92       	push	r12
    58f6:	df 92       	push	r13
    58f8:	ef 92       	push	r14
    58fa:	ff 92       	push	r15
    58fc:	0f 93       	push	r16
    58fe:	1f 93       	push	r17
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    5904:	fb 01       	movw	r30, r22
    5906:	11 82       	std	Z+1, r1	; 0x01
    5908:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    590a:	8f 3f       	cpi	r24, 0xFF	; 255
    590c:	ff ef       	ldi	r31, 0xFF	; 255
    590e:	9f 07       	cpc	r25, r31
    5910:	89 f1       	breq	.+98     	; 0x5974 <EepromBlockExists+0x88>
    5912:	6a 01       	movw	r12, r20
    5914:	8b 01       	movw	r16, r22
    5916:	7c 01       	movw	r14, r24
    5918:	a1 2c       	mov	r10, r1
    591a:	b1 2c       	mov	r11, r1
    591c:	c0 e0       	ldi	r28, 0x00	; 0
    591e:	d3 e0       	ldi	r29, 0x03	; 3
    5920:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    5922:	c5 01       	movw	r24, r10
    5924:	0e 94 99 2b 	call	0x5732	; 0x5732 <ReadEeprom>
    5928:	88 2e       	mov	r8, r24
    592a:	c5 01       	movw	r24, r10
    592c:	01 96       	adiw	r24, 0x01	; 1
    592e:	0e 94 99 2b 	call	0x5732	; 0x5732 <ReadEeprom>
    5932:	28 2f       	mov	r18, r24
    5934:	30 e0       	ldi	r19, 0x00	; 0
    5936:	32 2f       	mov	r19, r18
    5938:	22 27       	eor	r18, r18
    593a:	28 0d       	add	r18, r8
    593c:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    593e:	2e 15       	cp	r18, r14
    5940:	3f 05       	cpc	r19, r15
    5942:	29 f4       	brne	.+10     	; 0x594e <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    5944:	f8 01       	movw	r30, r16
    5946:	b1 82       	std	Z+1, r11	; 0x01
    5948:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    594a:	d0 e0       	ldi	r29, 0x00	; 0
    594c:	0b c0       	rjmp	.+22     	; 0x5964 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    594e:	2f 3f       	cpi	r18, 0xFF	; 255
    5950:	3f 4f       	sbci	r19, 0xFF	; 255
    5952:	41 f4       	brne	.+16     	; 0x5964 <EepromBlockExists+0x78>
    5954:	91 10       	cpse	r9, r1
    5956:	06 c0       	rjmp	.+12     	; 0x5964 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    5958:	c1 14       	cp	r12, r1
    595a:	d1 04       	cpc	r13, r1
    595c:	11 f0       	breq	.+4      	; 0x5962 <EepromBlockExists+0x76>
    595e:	f6 01       	movw	r30, r12
    5960:	c0 83       	st	Z, r28
    5962:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    5964:	cf 5f       	subi	r28, 0xFF	; 255
    5966:	f0 e2       	ldi	r31, 0x20	; 32
    5968:	af 0e       	add	r10, r31
    596a:	b1 1c       	adc	r11, r1
    596c:	c0 34       	cpi	r28, 0x40	; 64
    596e:	c9 f6       	brne	.-78     	; 0x5922 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    5970:	8d 2f       	mov	r24, r29
    5972:	01 c0       	rjmp	.+2      	; 0x5976 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    5974:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	ff 90       	pop	r15
    5980:	ef 90       	pop	r14
    5982:	df 90       	pop	r13
    5984:	cf 90       	pop	r12
    5986:	bf 90       	pop	r11
    5988:	af 90       	pop	r10
    598a:	9f 90       	pop	r9
    598c:	8f 90       	pop	r8
    598e:	08 95       	ret

00005990 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    5990:	ef 92       	push	r14
    5992:	ff 92       	push	r15
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	cf 93       	push	r28
    599a:	df 93       	push	r29
    599c:	00 d0       	rcall	.+0      	; 0x599e <EepromWriteBlock+0xe>
    599e:	1f 92       	push	r1
    59a0:	cd b7       	in	r28, 0x3d	; 61
    59a2:	de b7       	in	r29, 0x3e	; 62
    59a4:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    59a6:	1a 82       	std	Y+2, r1	; 0x02
    59a8:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    59aa:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    59ac:	ae 01       	movw	r20, r28
    59ae:	4d 5f       	subi	r20, 0xFD	; 253
    59b0:	5f 4f       	sbci	r21, 0xFF	; 255
    59b2:	be 01       	movw	r22, r28
    59b4:	6f 5f       	subi	r22, 0xFF	; 255
    59b6:	7f 4f       	sbci	r23, 0xFF	; 255
    59b8:	fc 01       	movw	r30, r24
    59ba:	80 81       	ld	r24, Z
    59bc:	91 81       	ldd	r25, Z+1	; 0x01
    59be:	0e 94 76 2c 	call	0x58ec	; 0x58ec <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    59c2:	88 23       	and	r24, r24
    59c4:	11 f0       	breq	.+4      	; 0x59ca <EepromWriteBlock+0x3a>
    59c6:	83 30       	cpi	r24, 0x03	; 3
    59c8:	19 f5       	brne	.+70     	; 0x5a10 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    59ca:	89 81       	ldd	r24, Y+1	; 0x01
    59cc:	9a 81       	ldd	r25, Y+2	; 0x02
    59ce:	89 2b       	or	r24, r25
    59d0:	49 f4       	brne	.+18     	; 0x59e4 <EepromWriteBlock+0x54>
    59d2:	8b 81       	ldd	r24, Y+3	; 0x03
    59d4:	88 23       	and	r24, r24
    59d6:	d9 f0       	breq	.+54     	; 0x5a0e <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    59d8:	f0 e2       	ldi	r31, 0x20	; 32
    59da:	8f 9f       	mul	r24, r31
    59dc:	c0 01       	movw	r24, r0
    59de:	11 24       	eor	r1, r1
    59e0:	9a 83       	std	Y+2, r25	; 0x02
    59e2:	89 83       	std	Y+1, r24	; 0x01
    59e4:	78 01       	movw	r14, r16
    59e6:	20 e2       	ldi	r18, 0x20	; 32
    59e8:	e2 0e       	add	r14, r18
    59ea:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    59ec:	f8 01       	movw	r30, r16
    59ee:	61 91       	ld	r22, Z+
    59f0:	8f 01       	movw	r16, r30
    59f2:	89 81       	ldd	r24, Y+1	; 0x01
    59f4:	9a 81       	ldd	r25, Y+2	; 0x02
    59f6:	9c 01       	movw	r18, r24
    59f8:	2f 5f       	subi	r18, 0xFF	; 255
    59fa:	3f 4f       	sbci	r19, 0xFF	; 255
    59fc:	3a 83       	std	Y+2, r19	; 0x02
    59fe:	29 83       	std	Y+1, r18	; 0x01
    5a00:	0e 94 8f 2b 	call	0x571e	; 0x571e <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    5a04:	0e 15       	cp	r16, r14
    5a06:	1f 05       	cpc	r17, r15
    5a08:	89 f7       	brne	.-30     	; 0x59ec <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	01 c0       	rjmp	.+2      	; 0x5a10 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5a0e:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    5a10:	0f 90       	pop	r0
    5a12:	0f 90       	pop	r0
    5a14:	0f 90       	pop	r0
    5a16:	df 91       	pop	r29
    5a18:	cf 91       	pop	r28
    5a1a:	1f 91       	pop	r17
    5a1c:	0f 91       	pop	r16
    5a1e:	ff 90       	pop	r15
    5a20:	ef 90       	pop	r14
    5a22:	08 95       	ret

00005a24 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    5a24:	fc 01       	movw	r30, r24
    5a26:	67 87       	std	Z+15, r22	; 0x0f
    5a28:	08 95       	ret

00005a2a <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    5a2a:	e8 eb       	ldi	r30, 0xB8	; 184
    5a2c:	fc e0       	ldi	r31, 0x0C	; 12
    5a2e:	81 e0       	ldi	r24, 0x01	; 1
    5a30:	91 e0       	ldi	r25, 0x01	; 1
    5a32:	95 8b       	std	Z+21, r25	; 0x15
    5a34:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    5a36:	63 8b       	std	Z+19, r22	; 0x13
    5a38:	08 95       	ret

00005a3a <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    5a3a:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    5a3c:	90 81       	ld	r25, Z
    5a3e:	9f 75       	andi	r25, 0x5F	; 95
    5a40:	90 83       	st	Z, r25
    5a42:	08 95       	ret

00005a44 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    5a44:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5a46:	90 81       	ld	r25, Z
    5a48:	90 64       	ori	r25, 0x40	; 64
    5a4a:	90 83       	st	Z, r25
    5a4c:	08 95       	ret

00005a4e <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    5a4e:	fc 01       	movw	r30, r24
    5a50:	66 87       	std	Z+14, r22	; 0x0e
    5a52:	08 95       	ret

00005a54 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    5a54:	fc 01       	movw	r30, r24
    5a56:	62 87       	std	Z+10, r22	; 0x0a
    5a58:	08 95       	ret

00005a5a <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	63 87       	std	Z+11, r22	; 0x0b
    5a5e:	08 95       	ret

00005a60 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    5a60:	cf 93       	push	r28
    5a62:	df 93       	push	r29
    5a64:	ec 01       	movw	r28, r24
    5a66:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    5a68:	29 81       	ldd	r18, Y+1	; 0x01
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	f9 01       	movw	r30, r18
    5a6e:	ee 0f       	add	r30, r30
    5a70:	ff 1f       	adc	r31, r31
    5a72:	e8 5f       	subi	r30, 0xF8	; 248
    5a74:	fc 49       	sbci	r31, 0x9C	; 156
    5a76:	65 91       	lpm	r22, Z+
    5a78:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    5a7a:	f9 01       	movw	r30, r18
    5a7c:	e4 0f       	add	r30, r20
    5a7e:	f1 1d       	adc	r31, r1
    5a80:	47 fd       	sbrc	r20, 7
    5a82:	fa 95       	dec	r31
    5a84:	ee 0f       	add	r30, r30
    5a86:	ff 1f       	adc	r31, r31
    5a88:	e8 5f       	subi	r30, 0xF8	; 248
    5a8a:	fc 49       	sbci	r31, 0x9C	; 156
    5a8c:	85 91       	lpm	r24, Z+
    5a8e:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    5a90:	86 1b       	sub	r24, r22
    5a92:	97 0b       	sbc	r25, r23
    5a94:	68 85       	ldd	r22, Y+8	; 0x08
    5a96:	70 e0       	ldi	r23, 0x00	; 0
    5a98:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <__divmodhi4>
	if(delta==0)delta++;
    5a9c:	61 15       	cp	r22, r1
    5a9e:	71 05       	cpc	r23, r1
    5aa0:	11 f4       	brne	.+4      	; 0x5aa6 <PatchCommand11+0x46>
    5aa2:	61 e0       	ldi	r22, 0x01	; 1
    5aa4:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    5aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    5aa8:	86 e0       	ldi	r24, 0x06	; 6
    5aaa:	e8 9f       	mul	r30, r24
    5aac:	f0 01       	movw	r30, r0
    5aae:	11 24       	eor	r1, r1
    5ab0:	e8 54       	subi	r30, 0x48	; 72
    5ab2:	f3 4f       	sbci	r31, 0xF3	; 243
    5ab4:	81 81       	ldd	r24, Z+1	; 0x01
    5ab6:	92 81       	ldd	r25, Z+2	; 0x02
    5ab8:	86 0f       	add	r24, r22
    5aba:	97 1f       	adc	r25, r23
    5abc:	92 83       	std	Z+2, r25	; 0x02
    5abe:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5ac0:	7e 83       	std	Y+6, r23	; 0x06
    5ac2:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    5ac4:	88 81       	ld	r24, Y
    5ac6:	88 60       	ori	r24, 0x08	; 8
    5ac8:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    5aca:	89 81       	ldd	r24, Y+1	; 0x01
    5acc:	48 0f       	add	r20, r24
    5ace:	4f 83       	std	Y+7, r20	; 0x07
}
    5ad0:	df 91       	pop	r29
    5ad2:	cf 91       	pop	r28
    5ad4:	08 95       	ret

00005ad6 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	60 87       	std	Z+8, r22	; 0x08
    5ada:	08 95       	ret

00005adc <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    5adc:	fc 01       	movw	r30, r24
    5ade:	64 83       	std	Z+4, r22	; 0x04
    5ae0:	08 95       	ret

00005ae2 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	82 81       	ldd	r24, Z+2	; 0x02
    5ae6:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <SetMixerWave>

00005aea <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    5aea:	fc 01       	movw	r30, r24
	track->note+=param;
    5aec:	91 81       	ldd	r25, Z+1	; 0x01
    5aee:	69 0f       	add	r22, r25
    5af0:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    5af2:	82 81       	ldd	r24, Z+2	; 0x02
    5af4:	0c 94 3e 31 	jmp	0x627c	; 0x627c <SetMixerNote>

00005af8 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    5af8:	fc 01       	movw	r30, r24
	track->note-=param;
    5afa:	91 81       	ldd	r25, Z+1	; 0x01
    5afc:	96 1b       	sub	r25, r22
    5afe:	69 2f       	mov	r22, r25
    5b00:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    5b02:	82 81       	ldd	r24, Z+2	; 0x02
    5b04:	0c 94 3e 31 	jmp	0x627c	; 0x627c <SetMixerNote>

00005b08 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    5b08:	1f 93       	push	r17
    5b0a:	cf 93       	push	r28
    5b0c:	df 93       	push	r29
    5b0e:	ec 01       	movw	r28, r24
    5b10:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    5b12:	8a 81       	ldd	r24, Y+2	; 0x02
    5b14:	0e 94 3e 31 	call	0x627c	; 0x627c <SetMixerNote>
	track->note=param;
    5b18:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5b1a:	88 81       	ld	r24, Y
    5b1c:	87 7f       	andi	r24, 0xF7	; 247
    5b1e:	88 83       	st	Y, r24
}
    5b20:	df 91       	pop	r29
    5b22:	cf 91       	pop	r28
    5b24:	1f 91       	pop	r17
    5b26:	08 95       	ret

00005b28 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    5b28:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    5b2a:	14 96       	adiw	r26, 0x04	; 4
    5b2c:	8c 91       	ld	r24, X
    5b2e:	14 97       	sbiw	r26, 0x04	; 4
    5b30:	88 23       	and	r24, r24
    5b32:	19 f1       	breq	.+70     	; 0x5b7a <PatchCommand14+0x52>
    5b34:	55 96       	adiw	r26, 0x15	; 21
    5b36:	2d 91       	ld	r18, X+
    5b38:	3c 91       	ld	r19, X
    5b3a:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    5b3c:	66 23       	and	r22, r22
    5b3e:	79 f0       	breq	.+30     	; 0x5b5e <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    5b40:	77 27       	eor	r23, r23
    5b42:	67 fd       	sbrc	r22, 7
    5b44:	70 95       	com	r23
    5b46:	6f 5f       	subi	r22, 0xFF	; 255
    5b48:	7f 4f       	sbci	r23, 0xFF	; 255
    5b4a:	ab 01       	movw	r20, r22
    5b4c:	44 0f       	add	r20, r20
    5b4e:	55 1f       	adc	r21, r21
    5b50:	64 0f       	add	r22, r20
    5b52:	75 1f       	adc	r23, r21
    5b54:	26 1b       	sub	r18, r22
    5b56:	37 0b       	sbc	r19, r23
    5b58:	09 c0       	rjmp	.+18     	; 0x5b6c <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5b5a:	ef 3f       	cpi	r30, 0xFF	; 255
    5b5c:	39 f0       	breq	.+14     	; 0x5b6c <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    5b5e:	23 50       	subi	r18, 0x03	; 3
    5b60:	31 09       	sbc	r19, r1
    5b62:	f9 01       	movw	r30, r18
    5b64:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    5b66:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    5b68:	ed 30       	cpi	r30, 0x0D	; 13
    5b6a:	b9 f7       	brne	.-18     	; 0x5b5a <PatchCommand14+0x32>
    5b6c:	56 96       	adiw	r26, 0x16	; 22
    5b6e:	3c 93       	st	X, r19
    5b70:	2e 93       	st	-X, r18
    5b72:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    5b74:	81 50       	subi	r24, 0x01	; 1
    5b76:	14 96       	adiw	r26, 0x04	; 4
    5b78:	8c 93       	st	X, r24
    5b7a:	08 95       	ret

00005b7c <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    5b7c:	90 93 5c 0d 	sts	0x0D5C, r25
    5b80:	80 93 5b 0d 	sts	0x0D5B, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5b84:	8f e6       	ldi	r24, 0x6F	; 111
    5b86:	80 93 5e 0d 	sts	0x0D5E, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    5b8a:	10 92 b6 0c 	sts	0x0CB6, r1
    5b8e:	e6 ef       	ldi	r30, 0xF6	; 246
    5b90:	fc e0       	ldi	r31, 0x0C	; 12

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5b92:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5b94:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5b96:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5b98:	28 e1       	ldi	r18, 0x18	; 24
    5b9a:	df 01       	movw	r26, r30
    5b9c:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    5b9e:	8c 93       	st	X, r24
    5ba0:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5ba2:	9c 93       	st	X, r25
    5ba4:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    5ba6:	1c 92       	st	X, r1
    5ba8:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5baa:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    5bac:	10 82       	st	Z, r1
    5bae:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    5bb0:	2c 93       	st	X, r18
    5bb2:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5bb4:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5bb6:	8f 5f       	subi	r24, 0xFF	; 255
    5bb8:	77 96       	adiw	r30, 0x17	; 23
    5bba:	85 30       	cpi	r24, 0x05	; 5
    5bbc:	71 f7       	brne	.-36     	; 0x5b9a <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    5bbe:	08 95       	ret

00005bc0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5bc0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5bc2:	ed 91       	ld	r30, X+
    5bc4:	fc 91       	ld	r31, X
    5bc6:	11 97       	sbiw	r26, 0x01	; 1
    5bc8:	9f 01       	movw	r18, r30
    5bca:	2f 5f       	subi	r18, 0xFF	; 255
    5bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    5bce:	11 96       	adiw	r26, 0x01	; 1
    5bd0:	3c 93       	st	X, r19
    5bd2:	2e 93       	st	-X, r18
    5bd4:	e4 91       	lpm	r30, Z
    5bd6:	e7 fd       	sbrc	r30, 7
    5bd8:	03 c0       	rjmp	.+6      	; 0x5be0 <ReadVarLen+0x20>
    5bda:	8e 2f       	mov	r24, r30
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	08 95       	ret
    {
       value &= 0x7F;
    5be0:	ef 77       	andi	r30, 0x7F	; 127
    5be2:	8e 2f       	mov	r24, r30
    5be4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5be6:	96 95       	lsr	r25
    5be8:	98 2f       	mov	r25, r24
    5bea:	88 27       	eor	r24, r24
    5bec:	97 95       	ror	r25
    5bee:	87 95       	ror	r24
    5bf0:	2f 5f       	subi	r18, 0xFF	; 255
    5bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf4:	f9 01       	movw	r30, r18
    5bf6:	31 97       	sbiw	r30, 0x01	; 1
    5bf8:	e4 91       	lpm	r30, Z
    5bfa:	4e 2f       	mov	r20, r30
    5bfc:	4f 77       	andi	r20, 0x7F	; 127
    5bfe:	84 0f       	add	r24, r20
    5c00:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5c02:	e7 fd       	sbrc	r30, 7
    5c04:	f0 cf       	rjmp	.-32     	; 0x5be6 <ReadVarLen+0x26>
    5c06:	2d 93       	st	X+, r18
    5c08:	3c 93       	st	X, r19
    }


    return value;
}
    5c0a:	08 95       	ret

00005c0c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    5c0c:	ef 92       	push	r14
    5c0e:	ff 92       	push	r15
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	1f 92       	push	r1
    5c1a:	cd b7       	in	r28, 0x3d	; 61
    5c1c:	de b7       	in	r29, 0x3e	; 62
    5c1e:	7c 01       	movw	r14, r24
    5c20:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    5c22:	fc 01       	movw	r30, r24
    5c24:	80 81       	ld	r24, Z
    5c26:	08 2f       	mov	r16, r24
    5c28:	00 1f       	adc	r16, r16
    5c2a:	00 27       	eor	r16, r16
    5c2c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    5c2e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    5c30:	9f ef       	ldi	r25, 0xFF	; 255
    5c32:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    5c34:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    5c36:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    5c38:	87 7b       	andi	r24, 0xB7	; 183
    5c3a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    5c3c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    5c3e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    5c40:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    5c42:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    5c44:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    5c46:	82 81       	ldd	r24, Z+2	; 0x02
    5c48:	83 30       	cpi	r24, 0x03	; 3
    5c4a:	69 f4       	brne	.+26     	; 0x5c66 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    5c4c:	01 11       	cpse	r16, r1
    5c4e:	01 c0       	rjmp	.+2      	; 0x5c52 <TriggerCommon+0x46>
    5c50:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    5c52:	81 e0       	ldi	r24, 0x01	; 1
    5c54:	91 e0       	ldi	r25, 0x01	; 1
    5c56:	90 93 cd 0c 	sts	0x0CCD, r25
    5c5a:	80 93 cc 0c 	sts	0x0CCC, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	80 93 cb 0c 	sts	0x0CCB, r24
    5c64:	39 c0       	rjmp	.+114    	; 0x5cd8 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    5c66:	84 30       	cpi	r24, 0x04	; 4
    5c68:	69 f5       	brne	.+90     	; 0x5cc4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    5c6a:	10 92 d3 0c 	sts	0x0CD3, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    5c6e:	80 91 5b 0d 	lds	r24, 0x0D5B
    5c72:	90 91 5c 0d 	lds	r25, 0x0D5C
    5c76:	f9 e0       	ldi	r31, 0x09	; 9
    5c78:	6f 9f       	mul	r22, r31
    5c7a:	80 0d       	add	r24, r0
    5c7c:	91 1d       	adc	r25, r1
    5c7e:	11 24       	eor	r1, r1
    5c80:	fc 01       	movw	r30, r24
    5c82:	31 96       	adiw	r30, 0x01	; 1
    5c84:	a5 91       	lpm	r26, Z+
    5c86:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    5c88:	b0 93 d5 0c 	sts	0x0CD5, r27
    5c8c:	a0 93 d4 0c 	sts	0x0CD4, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    5c90:	ac 01       	movw	r20, r24
    5c92:	49 5f       	subi	r20, 0xF9	; 249
    5c94:	5f 4f       	sbci	r21, 0xFF	; 255
    5c96:	fa 01       	movw	r30, r20
    5c98:	65 91       	lpm	r22, Z+
    5c9a:	74 91       	lpm	r23, Z
    5c9c:	05 96       	adiw	r24, 0x05	; 5
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	85 91       	lpm	r24, Z+
    5ca2:	94 91       	lpm	r25, Z
    5ca4:	68 1b       	sub	r22, r24
    5ca6:	79 0b       	sbc	r23, r25
    5ca8:	70 93 d7 0c 	sts	0x0CD7, r23
    5cac:	60 93 d6 0c 	sts	0x0CD6, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    5cb0:	fa 01       	movw	r30, r20
    5cb2:	85 91       	lpm	r24, Z+
    5cb4:	94 91       	lpm	r25, Z
    5cb6:	a8 0f       	add	r26, r24
    5cb8:	b9 1f       	adc	r27, r25
    5cba:	b0 93 d9 0c 	sts	0x0CD9, r27
    5cbe:	a0 93 d8 0c 	sts	0x0CD8, r26
    5cc2:	05 c0       	rjmp	.+10     	; 0x5cce <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    5cc4:	60 e0       	ldi	r22, 0x00	; 0
    5cc6:	29 83       	std	Y+1, r18	; 0x01
    5cc8:	0e 94 55 31 	call	0x62aa	; 0x62aa <SetMixerWave>
			SetMixerNote(track->channel,note);
    5ccc:	29 81       	ldd	r18, Y+1	; 0x01
    5cce:	62 2f       	mov	r22, r18
    5cd0:	f7 01       	movw	r30, r14
    5cd2:	82 81       	ldd	r24, Z+2	; 0x02
    5cd4:	0e 94 3e 31 	call	0x627c	; 0x627c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5cd8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5cda:	00 23       	and	r16, r16
    5cdc:	11 f0       	breq	.+4      	; 0x5ce2 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    5cde:	11 8b       	std	Z+17, r17	; 0x11
    5ce0:	01 c0       	rjmp	.+2      	; 0x5ce4 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    5ce2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    5ce4:	e0 91 5b 0d 	lds	r30, 0x0D5B
    5ce8:	f0 91 5c 0d 	lds	r31, 0x0D5C
    5cec:	39 e0       	ldi	r19, 0x09	; 9
    5cee:	13 9f       	mul	r17, r19
    5cf0:	e0 0d       	add	r30, r0
    5cf2:	f1 1d       	adc	r31, r1
    5cf4:	11 24       	eor	r1, r1
    5cf6:	33 96       	adiw	r30, 0x03	; 3
    5cf8:	85 91       	lpm	r24, Z+
    5cfa:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    5cfc:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    5cfe:	00 97       	sbiw	r24, 0x00	; 0
    5d00:	19 f4       	brne	.+6      	; 0x5d08 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    5d02:	16 8a       	std	Z+22, r1	; 0x16
    5d04:	15 8a       	std	Z+21, r1	; 0x15
    5d06:	08 c0       	rjmp	.+16     	; 0x5d18 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    5d08:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	24 91       	lpm	r18, Z
    5d0e:	f7 01       	movw	r30, r14
    5d10:	22 8b       	std	Z+18, r18	; 0x12
    5d12:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    5d14:	96 8b       	std	Z+22, r25	; 0x16
    5d16:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    5d18:	0f 90       	pop	r0
    5d1a:	df 91       	pop	r29
    5d1c:	cf 91       	pop	r28
    5d1e:	1f 91       	pop	r17
    5d20:	0f 91       	pop	r16
    5d22:	ff 90       	pop	r15
    5d24:	ef 90       	pop	r14
    5d26:	08 95       	ret

00005d28 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    5d28:	cf 93       	push	r28
    5d2a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    5d2c:	e0 91 5b 0d 	lds	r30, 0x0D5B
    5d30:	f0 91 5c 0d 	lds	r31, 0x0D5C
    5d34:	99 e0       	ldi	r25, 0x09	; 9
    5d36:	89 9f       	mul	r24, r25
    5d38:	e0 0d       	add	r30, r0
    5d3a:	f1 1d       	adc	r31, r1
    5d3c:	11 24       	eor	r1, r1
    5d3e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    5d40:	e1 30       	cpi	r30, 0x01	; 1
    5d42:	e9 f0       	breq	.+58     	; 0x5d7e <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    5d44:	e2 30       	cpi	r30, 0x02	; 2
    5d46:	e9 f0       	breq	.+58     	; 0x5d82 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    5d48:	20 91 fd 0c 	lds	r18, 0x0CFD
    5d4c:	27 ff       	sbrs	r18, 7
    5d4e:	1d c0       	rjmp	.+58     	; 0x5d8a <TriggerFx+0x62>
    5d50:	20 91 0e 0d 	lds	r18, 0x0D0E
    5d54:	28 13       	cpse	r18, r24
    5d56:	02 c0       	rjmp	.+4      	; 0x5d5c <TriggerFx+0x34>
    5d58:	41 11       	cpse	r20, r1
    5d5a:	17 c0       	rjmp	.+46     	; 0x5d8a <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    5d5c:	20 91 14 0d 	lds	r18, 0x0D14
    5d60:	27 ff       	sbrs	r18, 7
    5d62:	11 c0       	rjmp	.+34     	; 0x5d86 <TriggerFx+0x5e>
    5d64:	20 91 25 0d 	lds	r18, 0x0D25
    5d68:	28 13       	cpse	r18, r24
    5d6a:	02 c0       	rjmp	.+4      	; 0x5d70 <TriggerFx+0x48>
    5d6c:	41 11       	cpse	r20, r1
    5d6e:	0b c0       	rjmp	.+22     	; 0x5d86 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    5d70:	20 91 11 0d 	lds	r18, 0x0D11
    5d74:	90 91 28 0d 	lds	r25, 0x0D28
    5d78:	92 17       	cp	r25, r18
    5d7a:	28 f4       	brcc	.+10     	; 0x5d86 <TriggerFx+0x5e>
    5d7c:	06 c0       	rjmp	.+12     	; 0x5d8a <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    5d7e:	c3 e0       	ldi	r28, 0x03	; 3
    5d80:	05 c0       	rjmp	.+10     	; 0x5d8c <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    5d82:	c4 e0       	ldi	r28, 0x04	; 4
    5d84:	03 c0       	rjmp	.+6      	; 0x5d8c <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    5d86:	c2 e0       	ldi	r28, 0x02	; 2
    5d88:	01 c0       	rjmp	.+2      	; 0x5d8c <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    5d8a:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    5d8c:	97 e1       	ldi	r25, 0x17	; 23
    5d8e:	c9 9f       	mul	r28, r25
    5d90:	e0 01       	movw	r28, r0
    5d92:	11 24       	eor	r1, r1
    5d94:	ca 51       	subi	r28, 0x1A	; 26
    5d96:	d3 4f       	sbci	r29, 0xF3	; 243
    5d98:	90 e8       	ldi	r25, 0x80	; 128
    5d9a:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    5d9c:	1e 8a       	std	Y+22, r1	; 0x16
    5d9e:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    5da0:	20 e5       	ldi	r18, 0x50	; 80
    5da2:	46 2f       	mov	r20, r22
    5da4:	68 2f       	mov	r22, r24
    5da6:	ce 01       	movw	r24, r28
    5da8:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    5dac:	88 81       	ld	r24, Y
    5dae:	80 62       	ori	r24, 0x20	; 32
    5db0:	88 83       	st	Y, r24
}
    5db2:	df 91       	pop	r29
    5db4:	cf 91       	pop	r28
    5db6:	08 95       	ret

00005db8 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    5db8:	cf 93       	push	r28
    5dba:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    5dbc:	a8 2f       	mov	r26, r24
    5dbe:	b0 e0       	ldi	r27, 0x00	; 0
    5dc0:	97 e1       	ldi	r25, 0x17	; 23
    5dc2:	89 9f       	mul	r24, r25
    5dc4:	f0 01       	movw	r30, r0
    5dc6:	11 24       	eor	r1, r1
    5dc8:	ea 51       	subi	r30, 0x1A	; 26
    5dca:	f3 4f       	sbci	r31, 0xF3	; 243
    5dcc:	80 81       	ld	r24, Z
    5dce:	85 ff       	sbrs	r24, 5
    5dd0:	02 c0       	rjmp	.+4      	; 0x5dd6 <TriggerNote+0x1e>
    5dd2:	87 fd       	sbrc	r24, 7
    5dd4:	2e c0       	rjmp	.+92     	; 0x5e32 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    5dd6:	21 11       	cpse	r18, r1
    5dd8:	18 c0       	rjmp	.+48     	; 0x5e0a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    5dda:	97 e1       	ldi	r25, 0x17	; 23
    5ddc:	9a 9f       	mul	r25, r26
    5dde:	f0 01       	movw	r30, r0
    5de0:	9b 9f       	mul	r25, r27
    5de2:	f0 0d       	add	r31, r0
    5de4:	11 24       	eor	r1, r1
    5de6:	ea 51       	subi	r30, 0x1A	; 26
    5de8:	f3 4f       	sbci	r31, 0xF3	; 243
    5dea:	97 85       	ldd	r25, Z+15	; 0x0f
    5dec:	91 11       	cpse	r25, r1
    5dee:	02 c0       	rjmp	.+4      	; 0x5df4 <TriggerNote+0x3c>
    5df0:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    5df2:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    5df4:	97 e1       	ldi	r25, 0x17	; 23
    5df6:	9a 9f       	mul	r25, r26
    5df8:	f0 01       	movw	r30, r0
    5dfa:	9b 9f       	mul	r25, r27
    5dfc:	f0 0d       	add	r31, r0
    5dfe:	11 24       	eor	r1, r1
    5e00:	ea 51       	subi	r30, 0x1A	; 26
    5e02:	f3 4f       	sbci	r31, 0xF3	; 243
    5e04:	8f 7b       	andi	r24, 0xBF	; 191
    5e06:	80 83       	st	Z, r24
    5e08:	14 c0       	rjmp	.+40     	; 0x5e32 <TriggerNote+0x7a>
    5e0a:	82 2f       	mov	r24, r18
    5e0c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5e0e:	97 e1       	ldi	r25, 0x17	; 23
    5e10:	9a 9f       	mul	r25, r26
    5e12:	e0 01       	movw	r28, r0
    5e14:	9b 9f       	mul	r25, r27
    5e16:	d0 0d       	add	r29, r0
    5e18:	11 24       	eor	r1, r1
    5e1a:	ca 51       	subi	r28, 0x1A	; 26
    5e1c:	d3 4f       	sbci	r29, 0xF3	; 243
    5e1e:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    5e20:	1e 8a       	std	Y+22, r1	; 0x16
    5e22:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    5e24:	48 2f       	mov	r20, r24
    5e26:	ce 01       	movw	r24, r28
    5e28:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    5e2c:	88 81       	ld	r24, Y
    5e2e:	80 62       	ori	r24, 0x20	; 32
    5e30:	88 83       	st	Y, r24
		}

	}
}
    5e32:	df 91       	pop	r29
    5e34:	cf 91       	pop	r28
    5e36:	08 95       	ret

00005e38 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    5e38:	6f 92       	push	r6
    5e3a:	7f 92       	push	r7
    5e3c:	8f 92       	push	r8
    5e3e:	9f 92       	push	r9
    5e40:	af 92       	push	r10
    5e42:	bf 92       	push	r11
    5e44:	cf 92       	push	r12
    5e46:	df 92       	push	r13
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	cf 93       	push	r28
    5e52:	df 93       	push	r29
    5e54:	c6 ee       	ldi	r28, 0xE6	; 230
    5e56:	dc e0       	ldi	r29, 0x0C	; 12
    5e58:	08 eb       	ldi	r16, 0xB8	; 184
    5e5a:	1c e0       	ldi	r17, 0x0C	; 12
    5e5c:	d8 01       	movw	r26, r16
    5e5e:	9e 01       	movw	r18, r28
    5e60:	40 e0       	ldi	r20, 0x00	; 0
    5e62:	50 e0       	ldi	r21, 0x00	; 0
    5e64:	ca 01       	movw	r24, r20
    5e66:	8a 51       	subi	r24, 0x1A	; 26
    5e68:	93 4f       	sbci	r25, 0xF3	; 243
    5e6a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    5e6c:	fc 01       	movw	r30, r24
    5e6e:	87 85       	ldd	r24, Z+15	; 0x0f
    5e70:	88 23       	and	r24, r24
    5e72:	91 f0       	breq	.+36     	; 0x5e98 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    5e74:	66 85       	ldd	r22, Z+14	; 0x0e
    5e76:	99 27       	eor	r25, r25
    5e78:	87 fd       	sbrc	r24, 7
    5e7a:	90 95       	com	r25
    5e7c:	86 0f       	add	r24, r22
    5e7e:	91 1d       	adc	r25, r1
    5e80:	8f 3f       	cpi	r24, 0xFF	; 255
    5e82:	91 05       	cpc	r25, r1
    5e84:	19 f0       	breq	.+6      	; 0x5e8c <ProcessMusic+0x54>
    5e86:	14 f0       	brlt	.+4      	; 0x5e8c <ProcessMusic+0x54>
    5e88:	8f ef       	ldi	r24, 0xFF	; 255
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	97 ff       	sbrs	r25, 7
    5e8e:	02 c0       	rjmp	.+4      	; 0x5e94 <ProcessMusic+0x5c>
    5e90:	80 e0       	ldi	r24, 0x00	; 0
    5e92:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    5e94:	f6 01       	movw	r30, r12
    5e96:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    5e98:	f9 01       	movw	r30, r18
    5e9a:	f0 80       	ld	r15, Z
    5e9c:	f3 fe       	sbrs	r15, 3
    5e9e:	2a c0       	rjmp	.+84     	; 0x5ef4 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    5ea0:	65 81       	ldd	r22, Z+5	; 0x05
    5ea2:	76 81       	ldd	r23, Z+6	; 0x06
    5ea4:	11 96       	adiw	r26, 0x01	; 1
    5ea6:	8d 91       	ld	r24, X+
    5ea8:	9c 91       	ld	r25, X
    5eaa:	12 97       	sbiw	r26, 0x02	; 2
    5eac:	86 0f       	add	r24, r22
    5eae:	97 1f       	adc	r25, r23
    5eb0:	12 96       	adiw	r26, 0x02	; 2
    5eb2:	9c 93       	st	X, r25
    5eb4:	8e 93       	st	-X, r24
    5eb6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    5eb8:	f6 01       	movw	r30, r12
    5eba:	e7 80       	ldd	r14, Z+7	; 0x07
    5ebc:	ee 2d       	mov	r30, r14
    5ebe:	f0 e0       	ldi	r31, 0x00	; 0
    5ec0:	ee 0f       	add	r30, r30
    5ec2:	ff 1f       	adc	r31, r31
    5ec4:	e8 5f       	subi	r30, 0xF8	; 248
    5ec6:	fc 49       	sbci	r31, 0x9C	; 156
    5ec8:	c5 90       	lpm	r12, Z+
    5eca:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    5ecc:	16 16       	cp	r1, r22
    5ece:	17 06       	cpc	r1, r23
    5ed0:	24 f4       	brge	.+8      	; 0x5eda <ProcessMusic+0xa2>
    5ed2:	8c 15       	cp	r24, r12
    5ed4:	9d 05       	cpc	r25, r13
    5ed6:	30 f4       	brcc	.+12     	; 0x5ee4 <ProcessMusic+0xac>
    5ed8:	0d c0       	rjmp	.+26     	; 0x5ef4 <ProcessMusic+0xbc>
    5eda:	67 2b       	or	r22, r23
    5edc:	59 f0       	breq	.+22     	; 0x5ef4 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    5ede:	c8 16       	cp	r12, r24
    5ee0:	d9 06       	cpc	r13, r25
    5ee2:	40 f0       	brcs	.+16     	; 0x5ef4 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    5ee4:	12 96       	adiw	r26, 0x02	; 2
    5ee6:	dc 92       	st	X, r13
    5ee8:	ce 92       	st	-X, r12
    5eea:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5eec:	8f 2d       	mov	r24, r15
    5eee:	87 7f       	andi	r24, 0xF7	; 247
    5ef0:	f9 01       	movw	r30, r18
    5ef2:	80 83       	st	Z, r24
    5ef4:	49 5e       	subi	r20, 0xE9	; 233
    5ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ef8:	29 5e       	subi	r18, 0xE9	; 233
    5efa:	3f 4f       	sbci	r19, 0xFF	; 255
    5efc:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5efe:	43 37       	cpi	r20, 0x73	; 115
    5f00:	51 05       	cpc	r21, r1
    5f02:	09 f0       	breq	.+2      	; 0x5f06 <ProcessMusic+0xce>
    5f04:	af cf       	rjmp	.-162    	; 0x5e64 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    5f06:	80 91 b6 0c 	lds	r24, 0x0CB6
    5f0a:	88 23       	and	r24, r24
    5f0c:	09 f4       	brne	.+2      	; 0x5f10 <ProcessMusic+0xd8>
    5f0e:	cc c0       	rjmp	.+408    	; 0x60a8 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    5f10:	57 e1       	ldi	r21, 0x17	; 23
    5f12:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    5f14:	80 91 59 0d 	lds	r24, 0x0D59
    5f18:	90 91 5a 0d 	lds	r25, 0x0D5A
    5f1c:	20 91 5f 0d 	lds	r18, 0x0D5F
    5f20:	30 91 60 0d 	lds	r19, 0x0D60
    5f24:	82 17       	cp	r24, r18
    5f26:	93 07       	cpc	r25, r19
    5f28:	09 f0       	breq	.+2      	; 0x5f2c <ProcessMusic+0xf4>
    5f2a:	b9 c0       	rjmp	.+370    	; 0x609e <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    5f2c:	20 91 62 0d 	lds	r18, 0x0D62
    5f30:	30 91 63 0d 	lds	r19, 0x0D63
    5f34:	b9 01       	movw	r22, r18
    5f36:	6f 5f       	subi	r22, 0xFF	; 255
    5f38:	7f 4f       	sbci	r23, 0xFF	; 255
    5f3a:	70 93 63 0d 	sts	0x0D63, r23
    5f3e:	60 93 62 0d 	sts	0x0D62, r22
    5f42:	f9 01       	movw	r30, r18
    5f44:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    5f46:	4f 3f       	cpi	r20, 0xFF	; 255
    5f48:	79 f5       	brne	.+94     	; 0x5fa8 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    5f4a:	a9 01       	movw	r20, r18
    5f4c:	4e 5f       	subi	r20, 0xFE	; 254
    5f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5f50:	50 93 63 0d 	sts	0x0D63, r21
    5f54:	40 93 62 0d 	sts	0x0D62, r20
    5f58:	fb 01       	movw	r30, r22
    5f5a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    5f5c:	6f 32       	cpi	r22, 0x2F	; 47
    5f5e:	19 f4       	brne	.+6      	; 0x5f66 <ProcessMusic+0x12e>
						playSong=false;
    5f60:	10 92 b6 0c 	sts	0x0CB6, r1
						break;	
    5f64:	9c c0       	rjmp	.+312    	; 0x609e <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    5f66:	66 30       	cpi	r22, 0x06	; 6
    5f68:	09 f0       	breq	.+2      	; 0x5f6c <ProcessMusic+0x134>
    5f6a:	8c c0       	rjmp	.+280    	; 0x6084 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    5f6c:	fa 01       	movw	r30, r20
    5f6e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    5f70:	c9 01       	movw	r24, r18
    5f72:	04 96       	adiw	r24, 0x04	; 4
    5f74:	90 93 63 0d 	sts	0x0D63, r25
    5f78:	80 93 62 0d 	sts	0x0D62, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    5f7c:	f9 01       	movw	r30, r18
    5f7e:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    5f80:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    5f82:	e3 35       	cpi	r30, 0x53	; 83
    5f84:	29 f4       	brne	.+10     	; 0x5f90 <ProcessMusic+0x158>
							loopStart=songPos;
    5f86:	90 93 65 0d 	sts	0x0D65, r25
    5f8a:	80 93 64 0d 	sts	0x0D64, r24
    5f8e:	7a c0       	rjmp	.+244    	; 0x6084 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    5f90:	e5 34       	cpi	r30, 0x45	; 69
    5f92:	09 f0       	breq	.+2      	; 0x5f96 <ProcessMusic+0x15e>
    5f94:	77 c0       	rjmp	.+238    	; 0x6084 <ProcessMusic+0x24c>
							songPos=loopStart;
    5f96:	80 91 64 0d 	lds	r24, 0x0D64
    5f9a:	90 91 65 0d 	lds	r25, 0x0D65
    5f9e:	90 93 63 0d 	sts	0x0D63, r25
    5fa2:	80 93 62 0d 	sts	0x0D62, r24
    5fa6:	6e c0       	rjmp	.+220    	; 0x6084 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    5fa8:	47 fd       	sbrc	r20, 7
    5faa:	40 93 5d 0d 	sts	0x0D5D, r20
					channel=lastStatus&0x0f;
    5fae:	90 91 5d 0d 	lds	r25, 0x0D5D
    5fb2:	89 2f       	mov	r24, r25
    5fb4:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    5fb6:	47 ff       	sbrs	r20, 7
    5fb8:	08 c0       	rjmp	.+16     	; 0x5fca <ProcessMusic+0x192>
    5fba:	2e 5f       	subi	r18, 0xFE	; 254
    5fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5fbe:	30 93 63 0d 	sts	0x0D63, r19
    5fc2:	20 93 62 0d 	sts	0x0D62, r18
    5fc6:	fb 01       	movw	r30, r22
    5fc8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    5fca:	90 7f       	andi	r25, 0xF0	; 240
    5fcc:	90 3b       	cpi	r25, 0xB0	; 176
    5fce:	e1 f0       	breq	.+56     	; 0x6008 <ProcessMusic+0x1d0>
    5fd0:	90 3c       	cpi	r25, 0xC0	; 192
    5fd2:	09 f4       	brne	.+2      	; 0x5fd6 <ProcessMusic+0x19e>
    5fd4:	51 c0       	rjmp	.+162    	; 0x6078 <ProcessMusic+0x240>
    5fd6:	90 39       	cpi	r25, 0x90	; 144
    5fd8:	09 f0       	breq	.+2      	; 0x5fdc <ProcessMusic+0x1a4>
    5fda:	54 c0       	rjmp	.+168    	; 0x6084 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    5fdc:	e0 91 62 0d 	lds	r30, 0x0D62
    5fe0:	f0 91 63 0d 	lds	r31, 0x0D63
    5fe4:	9f 01       	movw	r18, r30
    5fe6:	2f 5f       	subi	r18, 0xFF	; 255
    5fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    5fea:	30 93 63 0d 	sts	0x0D63, r19
    5fee:	20 93 62 0d 	sts	0x0D62, r18
    5ff2:	24 91       	lpm	r18, Z
    5ff4:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    5ff6:	f8 9e       	mul	r15, r24
    5ff8:	f0 01       	movw	r30, r0
    5ffa:	11 24       	eor	r1, r1
    5ffc:	ea 51       	subi	r30, 0x1A	; 26
    5ffe:	f3 4f       	sbci	r31, 0xF3	; 243
    6000:	60 89       	ldd	r22, Z+16	; 0x10
    6002:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <TriggerNote>
    6006:	3e c0       	rjmp	.+124    	; 0x6084 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    6008:	e0 91 62 0d 	lds	r30, 0x0D62
    600c:	f0 91 63 0d 	lds	r31, 0x0D63
    6010:	9f 01       	movw	r18, r30
    6012:	2f 5f       	subi	r18, 0xFF	; 255
    6014:	3f 4f       	sbci	r19, 0xFF	; 255
    6016:	30 93 63 0d 	sts	0x0D63, r19
    601a:	20 93 62 0d 	sts	0x0D62, r18
    601e:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    6020:	47 30       	cpi	r20, 0x07	; 7
    6022:	49 f4       	brne	.+18     	; 0x6036 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    6024:	f8 9e       	mul	r15, r24
    6026:	d0 01       	movw	r26, r0
    6028:	11 24       	eor	r1, r1
    602a:	aa 51       	subi	r26, 0x1A	; 26
    602c:	b3 4f       	sbci	r27, 0xF3	; 243
    602e:	ee 0f       	add	r30, r30
    6030:	1c 96       	adiw	r26, 0x0c	; 12
    6032:	ec 93       	st	X, r30
    6034:	27 c0       	rjmp	.+78     	; 0x6084 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    6036:	4b 30       	cpi	r20, 0x0B	; 11
    6038:	49 f4       	brne	.+18     	; 0x604c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    603a:	f8 9e       	mul	r15, r24
    603c:	d0 01       	movw	r26, r0
    603e:	11 24       	eor	r1, r1
    6040:	aa 51       	subi	r26, 0x1A	; 26
    6042:	b3 4f       	sbci	r27, 0xF3	; 243
    6044:	ee 0f       	add	r30, r30
    6046:	13 96       	adiw	r26, 0x03	; 3
    6048:	ec 93       	st	X, r30
    604a:	1c c0       	rjmp	.+56     	; 0x6084 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    604c:	4c 35       	cpi	r20, 0x5C	; 92
    604e:	49 f4       	brne	.+18     	; 0x6062 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    6050:	f8 9e       	mul	r15, r24
    6052:	d0 01       	movw	r26, r0
    6054:	11 24       	eor	r1, r1
    6056:	aa 51       	subi	r26, 0x1A	; 26
    6058:	b3 4f       	sbci	r27, 0xF3	; 243
    605a:	ee 0f       	add	r30, r30
    605c:	1a 96       	adiw	r26, 0x0a	; 10
    605e:	ec 93       	st	X, r30
    6060:	11 c0       	rjmp	.+34     	; 0x6084 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    6062:	44 36       	cpi	r20, 0x64	; 100
    6064:	79 f4       	brne	.+30     	; 0x6084 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    6066:	f8 9e       	mul	r15, r24
    6068:	d0 01       	movw	r26, r0
    606a:	11 24       	eor	r1, r1
    606c:	aa 51       	subi	r26, 0x1A	; 26
    606e:	b3 4f       	sbci	r27, 0xF3	; 243
    6070:	ee 0f       	add	r30, r30
    6072:	1b 96       	adiw	r26, 0x0b	; 11
    6074:	ec 93       	st	X, r30
    6076:	06 c0       	rjmp	.+12     	; 0x6084 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    6078:	f8 9e       	mul	r15, r24
    607a:	f0 01       	movw	r30, r0
    607c:	11 24       	eor	r1, r1
    607e:	ea 51       	subi	r30, 0x1A	; 26
    6080:	f3 4f       	sbci	r31, 0xF3	; 243
    6082:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    6084:	82 e6       	ldi	r24, 0x62	; 98
    6086:	9d e0       	ldi	r25, 0x0D	; 13
    6088:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <ReadVarLen>
    608c:	90 93 60 0d 	sts	0x0D60, r25
    6090:	80 93 5f 0d 	sts	0x0D5F, r24
				currDeltaTime=0;
    6094:	10 92 5a 0d 	sts	0x0D5A, r1
    6098:	10 92 59 0d 	sts	0x0D59, r1
    609c:	3b cf       	rjmp	.-394    	; 0x5f14 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    609e:	01 96       	adiw	r24, 0x01	; 1
    60a0:	90 93 5a 0d 	sts	0x0D5A, r25
    60a4:	80 93 59 0d 	sts	0x0D59, r24
    60a8:	9f ee       	ldi	r25, 0xEF	; 239
    60aa:	a9 2e       	mov	r10, r25
    60ac:	9c e0       	ldi	r25, 0x0C	; 12
    60ae:	b9 2e       	mov	r11, r25
    60b0:	29 ef       	ldi	r18, 0xF9	; 249
    60b2:	c2 2e       	mov	r12, r18
    60b4:	2c e0       	ldi	r18, 0x0C	; 12
    60b6:	d2 2e       	mov	r13, r18
    60b8:	3a ef       	ldi	r19, 0xFA	; 250
    60ba:	e3 2e       	mov	r14, r19
    60bc:	3c e0       	ldi	r19, 0x0C	; 12
    60be:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    60c0:	66 24       	eor	r6, r6
    60c2:	6a 94       	dec	r6
    60c4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    60c6:	88 81       	ld	r24, Y
    60c8:	85 ff       	sbrs	r24, 5
    60ca:	42 c0       	rjmp	.+132    	; 0x6150 <ProcessMusic+0x318>
    60cc:	2d 89       	ldd	r18, Y+21	; 0x15
    60ce:	3e 89       	ldd	r19, Y+22	; 0x16
    60d0:	23 2b       	or	r18, r19
    60d2:	09 f4       	brne	.+2      	; 0x60d6 <ProcessMusic+0x29e>
    60d4:	3d c0       	rjmp	.+122    	; 0x6150 <ProcessMusic+0x318>
    60d6:	86 fd       	sbrc	r24, 6
    60d8:	3b c0       	rjmp	.+118    	; 0x6150 <ProcessMusic+0x318>
    60da:	47 01       	movw	r8, r14
    60dc:	f2 e0       	ldi	r31, 0x02	; 2
    60de:	8f 1a       	sub	r8, r31
    60e0:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    60e2:	d6 01       	movw	r26, r12
    60e4:	9c 91       	ld	r25, X
    60e6:	f4 01       	movw	r30, r8
    60e8:	80 81       	ld	r24, Z
    60ea:	98 13       	cpse	r25, r24
    60ec:	2e c0       	rjmp	.+92     	; 0x614a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    60ee:	ed 89       	ldd	r30, Y+21	; 0x15
    60f0:	fe 89       	ldd	r31, Y+22	; 0x16
    60f2:	bf 01       	movw	r22, r30
    60f4:	6f 5f       	subi	r22, 0xFF	; 255
    60f6:	7f 4f       	sbci	r23, 0xFF	; 255
    60f8:	7e 8b       	std	Y+22, r23	; 0x16
    60fa:	6d 8b       	std	Y+21, r22	; 0x15
    60fc:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    60fe:	8f 3f       	cpi	r24, 0xFF	; 255
    6100:	31 f4       	brne	.+12     	; 0x610e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    6102:	88 81       	ld	r24, Y
    6104:	8f 77       	andi	r24, 0x7F	; 127
    6106:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    6108:	1e 8a       	std	Y+22, r1	; 0x16
    610a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    610c:	1e c0       	rjmp	.+60     	; 0x614a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    610e:	9f 01       	movw	r18, r30
    6110:	2e 5f       	subi	r18, 0xFE	; 254
    6112:	3f 4f       	sbci	r19, 0xFF	; 255
    6114:	3e 8b       	std	Y+22, r19	; 0x16
    6116:	2d 8b       	std	Y+21, r18	; 0x15
    6118:	fb 01       	movw	r30, r22
    611a:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    611c:	e8 2f       	mov	r30, r24
    611e:	f0 e0       	ldi	r31, 0x00	; 0
    6120:	ee 0f       	add	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	e4 53       	subi	r30, 0x34	; 52
    6126:	ff 4f       	sbci	r31, 0xFF	; 255
    6128:	25 91       	lpm	r18, Z+
    612a:	34 91       	lpm	r19, Z
    612c:	ce 01       	movw	r24, r28
    612e:	f9 01       	movw	r30, r18
    6130:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    6132:	ed 89       	ldd	r30, Y+21	; 0x15
    6134:	fe 89       	ldd	r31, Y+22	; 0x16
    6136:	cf 01       	movw	r24, r30
    6138:	01 96       	adiw	r24, 0x01	; 1
    613a:	9e 8b       	std	Y+22, r25	; 0x16
    613c:	8d 8b       	std	Y+21, r24	; 0x15
    613e:	e4 91       	lpm	r30, Z
    6140:	d4 01       	movw	r26, r8
    6142:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    6144:	f6 01       	movw	r30, r12
    6146:	10 82       	st	Z, r1
    6148:	cc cf       	rjmp	.-104    	; 0x60e2 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    614a:	9f 5f       	subi	r25, 0xFF	; 255
    614c:	d6 01       	movw	r26, r12
    614e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    6150:	98 81       	ld	r25, Y
    6152:	95 ff       	sbrs	r25, 5
    6154:	6c c0       	rjmp	.+216    	; 0x622e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    6156:	f7 01       	movw	r30, r14
    6158:	80 81       	ld	r24, Z
    615a:	8f 3f       	cpi	r24, 0xFF	; 255
    615c:	11 f0       	breq	.+4      	; 0x6162 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    615e:	8f 5f       	subi	r24, 0xFF	; 255
    6160:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    6162:	97 fd       	sbrc	r25, 7
    6164:	04 c0       	rjmp	.+8      	; 0x616e <ProcessMusic+0x336>
    6166:	f7 01       	movw	r30, r14
    6168:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    616a:	90 81       	ld	r25, Z
    616c:	01 c0       	rjmp	.+2      	; 0x6170 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    616e:	9f ef       	ldi	r25, 0xFF	; 255
    6170:	f7 01       	movw	r30, r14
    6172:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    6174:	80 81       	ld	r24, Z
    6176:	88 23       	and	r24, r24
    6178:	09 f4       	brne	.+2      	; 0x617c <ProcessMusic+0x344>
    617a:	4e c0       	rjmp	.+156    	; 0x6218 <ProcessMusic+0x3e0>
    617c:	31 96       	adiw	r30, 0x01	; 1
    617e:	50 81       	ld	r21, Z
    6180:	55 23       	and	r21, r21
    6182:	09 f4       	brne	.+2      	; 0x6186 <ProcessMusic+0x34e>
    6184:	49 c0       	rjmp	.+146    	; 0x6218 <ProcessMusic+0x3e0>
    6186:	99 23       	and	r25, r25
    6188:	09 f4       	brne	.+2      	; 0x618c <ProcessMusic+0x354>
    618a:	46 c0       	rjmp	.+140    	; 0x6218 <ProcessMusic+0x3e0>
    618c:	40 91 5e 0d 	lds	r20, 0x0D5E
    6190:	44 23       	and	r20, r20
    6192:	09 f4       	brne	.+2      	; 0x6196 <ProcessMusic+0x35e>
    6194:	41 c0       	rjmp	.+130    	; 0x6218 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    6196:	89 9f       	mul	r24, r25
    6198:	c0 01       	movw	r24, r0
    619a:	11 24       	eor	r1, r1
    619c:	93 95       	inc	r25
				uVol>>=8;
    619e:	89 2f       	mov	r24, r25
    61a0:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    61a2:	58 9f       	mul	r21, r24
    61a4:	90 01       	movw	r18, r0
    61a6:	59 9f       	mul	r21, r25
    61a8:	30 0d       	add	r19, r0
    61aa:	11 24       	eor	r1, r1
    61ac:	c9 01       	movw	r24, r18
    61ae:	93 95       	inc	r25
				uVol>>=8;
    61b0:	89 2f       	mov	r24, r25
    61b2:	99 27       	eor	r25, r25
    61b4:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    61b6:	50 81       	ld	r21, Z
    61b8:	58 9f       	mul	r21, r24
    61ba:	90 01       	movw	r18, r0
    61bc:	59 9f       	mul	r21, r25
    61be:	30 0d       	add	r19, r0
    61c0:	11 24       	eor	r1, r1
    61c2:	33 95       	inc	r19
					uVol>>=8;
    61c4:	23 2f       	mov	r18, r19
    61c6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    61c8:	42 9f       	mul	r20, r18
    61ca:	c0 01       	movw	r24, r0
    61cc:	43 9f       	mul	r20, r19
    61ce:	90 0d       	add	r25, r0
    61d0:	11 24       	eor	r1, r1
    61d2:	93 95       	inc	r25
				uVol>>=8;
    61d4:	89 2f       	mov	r24, r25
    61d6:	99 27       	eor	r25, r25
    61d8:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    61da:	20 81       	ld	r18, Z
    61dc:	22 23       	and	r18, r18
    61de:	f1 f0       	breq	.+60     	; 0x621c <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    61e0:	d5 01       	movw	r26, r10
    61e2:	ec 91       	ld	r30, X
    61e4:	f0 e0       	ldi	r31, 0x00	; 0
    61e6:	e0 50       	subi	r30, 0x00	; 0
    61e8:	fb 49       	sbci	r31, 0x9B	; 155
    61ea:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    61ec:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    61ee:	2e 9f       	mul	r18, r30
    61f0:	f0 01       	movw	r30, r0
    61f2:	11 24       	eor	r1, r1
    61f4:	f3 95       	inc	r31
					tVol>>=8;
    61f6:	ef 2f       	mov	r30, r31
    61f8:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    61fa:	a3 01       	movw	r20, r6
    61fc:	4e 1b       	sub	r20, r30
    61fe:	5f 0b       	sbc	r21, r31
    6200:	48 9f       	mul	r20, r24
    6202:	90 01       	movw	r18, r0
    6204:	49 9f       	mul	r20, r25
    6206:	30 0d       	add	r19, r0
    6208:	58 9f       	mul	r21, r24
    620a:	30 0d       	add	r19, r0
    620c:	11 24       	eor	r1, r1
    620e:	c9 01       	movw	r24, r18
    6210:	93 95       	inc	r25
					uVol>>=8;
    6212:	89 2f       	mov	r24, r25
    6214:	99 27       	eor	r25, r25
    6216:	02 c0       	rjmp	.+4      	; 0x621c <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    6218:	80 e0       	ldi	r24, 0x00	; 0
    621a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    621c:	f5 01       	movw	r30, r10
    621e:	30 81       	ld	r19, Z
    6220:	f7 01       	movw	r30, r14
    6222:	39 97       	sbiw	r30, 0x09	; 9
    6224:	20 81       	ld	r18, Z
    6226:	23 0f       	add	r18, r19
    6228:	d5 01       	movw	r26, r10
    622a:	2c 93       	st	X, r18
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    6232:	f8 01       	movw	r30, r16
    6234:	80 83       	st	Z, r24
    6236:	67 96       	adiw	r28, 0x17	; 23
    6238:	0a 5f       	subi	r16, 0xFA	; 250
    623a:	1f 4f       	sbci	r17, 0xFF	; 255
    623c:	f7 e1       	ldi	r31, 0x17	; 23
    623e:	af 0e       	add	r10, r31
    6240:	b1 1c       	adc	r11, r1
    6242:	87 e1       	ldi	r24, 0x17	; 23
    6244:	c8 0e       	add	r12, r24
    6246:	d1 1c       	adc	r13, r1
    6248:	97 e1       	ldi	r25, 0x17	; 23
    624a:	e9 0e       	add	r14, r25
    624c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    624e:	ad e0       	ldi	r26, 0x0D	; 13
    6250:	c9 35       	cpi	r28, 0x59	; 89
    6252:	da 07       	cpc	r29, r26
    6254:	09 f0       	breq	.+2      	; 0x6258 <ProcessMusic+0x420>
    6256:	37 cf       	rjmp	.-402    	; 0x60c6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    6258:	df 91       	pop	r29
    625a:	cf 91       	pop	r28
    625c:	1f 91       	pop	r17
    625e:	0f 91       	pop	r16
    6260:	ff 90       	pop	r15
    6262:	ef 90       	pop	r14
    6264:	df 90       	pop	r13
    6266:	cf 90       	pop	r12
    6268:	bf 90       	pop	r11
    626a:	af 90       	pop	r10
    626c:	9f 90       	pop	r9
    626e:	8f 90       	pop	r8
    6270:	7f 90       	pop	r7
    6272:	6f 90       	pop	r6
    6274:	08 95       	ret

00006276 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    6276:	80 93 5e 0d 	sts	0x0D5E, r24
    627a:	08 95       	ret

0000627c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    627c:	99 27       	eor	r25, r25
	clr r23
    627e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    6280:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    6282:	09 f4       	brne	.+2      	; 0x6286 <set_note_waves>
		ret
    6284:	08 95       	ret

00006286 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    6286:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    6288:	f3 e6       	ldi	r31, 0x63	; 99
	lsl r22
    628a:	66 0f       	add	r22, r22
	rol r23
    628c:	77 1f       	adc	r23, r23
	add ZL,r22
    628e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    6290:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    6292:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    6294:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    6296:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    6298:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    629a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    629c:	28 9f       	mul	r18, r24
	add ZL,r0
    629e:	e0 0d       	add	r30, r0
	adc ZH,r1
    62a0:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    62a2:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    62a4:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    62a6:	11 24       	eor	r1, r1
	

	ret
    62a8:	08 95       	ret

000062aa <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    62aa:	99 27       	eor	r25, r25
	clr r23
    62ac:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    62ae:	e8 eb       	ldi	r30, 0xB8	; 184
	ldi ZH,hi8(mixerStruct)
    62b0:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    62b2:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    62b4:	28 9f       	mul	r18, r24
	add ZL,r0
    62b6:	e0 0d       	add	r30, r0
	adc ZH,r1
    62b8:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    62ba:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    62bc:	31 f4       	brne	.+12     	; 0x62ca <smw1>
	lds r22,tr4_params
    62be:	60 91 cb 0c 	lds	r22, 0x0CCB
	andi r22,0xfe;
    62c2:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    62c4:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw	
    62c8:	0b c0       	rjmp	.+22     	; 0x62e0 <esmw>

000062ca <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    62ca:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    62cc:	31 f4       	brne	.+12     	; 0x62da <smw2>
	lds r22,tr4_params
    62ce:	60 91 cb 0c 	lds	r22, 0x0CCB
	ori r22,0xfe;
    62d2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    62d4:	60 93 cb 0c 	sts	0x0CCB, r22
	rjmp esmw
    62d8:	03 c0       	rjmp	.+6      	; 0x62e0 <esmw>

000062da <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    62da:	75 e6       	ldi	r23, 0x65	; 101
	add r23,r22
    62dc:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    62de:	75 83       	std	Z+5, r23	; 0x05

000062e0 <esmw>:

esmw:
	clr r1	
    62e0:	11 24       	eor	r1, r1
	ret
    62e2:	08 95       	ret
	...

00006300 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    6300:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    6302:	80 93 b7 0c 	sts	0x0CB7, r24
	ret
    6306:	08 95       	ret

00006308 <steptable>:
    6308:	22 00       	.word	0x0022	; ????
    630a:	24 00       	.word	0x0024	; ????
    630c:	26 00       	.word	0x0026	; ????
    630e:	28 00       	.word	0x0028	; ????
    6310:	2b 00       	.word	0x002b	; ????
    6312:	2d 00       	.word	0x002d	; ????
    6314:	30 00       	.word	0x0030	; ????
    6316:	33 00       	.word	0x0033	; ????
    6318:	36 00       	.word	0x0036	; ????
    631a:	39 00       	.word	0x0039	; ????
    631c:	3d 00       	.word	0x003d	; ????
    631e:	40 00       	.word	0x0040	; ????
    6320:	44 00       	.word	0x0044	; ????
    6322:	48 00       	.word	0x0048	; ????
    6324:	4c 00       	.word	0x004c	; ????
    6326:	51 00       	.word	0x0051	; ????
    6328:	56 00       	.word	0x0056	; ????
    632a:	5b 00       	.word	0x005b	; ????
    632c:	60 00       	.word	0x0060	; ????
    632e:	66 00       	.word	0x0066	; ????
    6330:	6c 00       	.word	0x006c	; ????
    6332:	73 00       	.word	0x0073	; ????
    6334:	79 00       	.word	0x0079	; ????
    6336:	81 00       	.word	0x0081	; ????
    6338:	88 00       	.word	0x0088	; ????
    633a:	90 00       	.word	0x0090	; ????
    633c:	99 00       	.word	0x0099	; ????
    633e:	a2 00       	.word	0x00a2	; ????
    6340:	ac 00       	.word	0x00ac	; ????
    6342:	b6 00       	.word	0x00b6	; ????
    6344:	c1 00       	.word	0x00c1	; ????
    6346:	cc 00       	.word	0x00cc	; ????
    6348:	d8 00       	.word	0x00d8	; ????
    634a:	e5 00       	.word	0x00e5	; ????
    634c:	f3 00       	.word	0x00f3	; ????
    634e:	01 01       	movw	r0, r2
    6350:	10 01       	movw	r2, r0
    6352:	21 01       	movw	r4, r2
    6354:	32 01       	movw	r6, r4
    6356:	44 01       	movw	r8, r8
    6358:	57 01       	movw	r10, r14
    635a:	6c 01       	movw	r12, r24
    635c:	81 01       	movw	r16, r2
    635e:	98 01       	movw	r18, r16
    6360:	b0 01       	movw	r22, r0
    6362:	ca 01       	movw	r24, r20
    6364:	e5 01       	movw	r28, r10
    6366:	02 02       	muls	r16, r18
    6368:	21 02       	muls	r18, r17
    636a:	41 02       	muls	r20, r17
    636c:	64 02       	muls	r22, r20
    636e:	88 02       	muls	r24, r24
    6370:	ae 02       	muls	r26, r30
    6372:	d7 02       	muls	r29, r23
    6374:	03 03       	mulsu	r16, r19
    6376:	30 03       	mulsu	r19, r16
    6378:	61 03       	mulsu	r22, r17
    637a:	94 03       	fmuls	r17, r20
    637c:	cb 03       	fmulsu	r20, r19
    637e:	05 04       	cpc	r0, r5
    6380:	42 04       	cpc	r4, r2
    6382:	83 04       	cpc	r8, r3
    6384:	c7 04       	cpc	r12, r7
    6386:	10 05       	cpc	r17, r0
    6388:	5d 05       	cpc	r21, r13
    638a:	af 05       	cpc	r26, r15
    638c:	05 06       	cpc	r0, r21
    638e:	61 06       	cpc	r6, r17
    6390:	c2 06       	cpc	r12, r18
    6392:	29 07       	cpc	r18, r25
    6394:	96 07       	cpc	r25, r22
    6396:	09 08       	sbc	r0, r9
    6398:	83 08       	sbc	r8, r3
    639a:	05 09       	sbc	r16, r5
    639c:	8e 09       	sbc	r24, r14
    639e:	20 0a       	sbc	r2, r16
    63a0:	ba 0a       	sbc	r11, r26
    63a2:	5d 0b       	sbc	r21, r29
    63a4:	0a 0c       	add	r0, r10
    63a6:	c1 0c       	add	r12, r1
    63a8:	84 0d       	add	r24, r4
    63aa:	51 0e       	add	r5, r17
    63ac:	2b 0f       	add	r18, r27
    63ae:	12 10       	cpse	r1, r2
    63b0:	07 11       	cpse	r16, r7
    63b2:	0a 12       	cpse	r0, r26
    63b4:	1d 13       	cpse	r17, r29
    63b6:	40 14       	cp	r4, r0
    63b8:	74 15       	cp	r23, r4
    63ba:	ba 16       	cp	r11, r26
    63bc:	14 18       	sub	r1, r4
    63be:	83 19       	sub	r24, r3
    63c0:	07 1b       	sub	r16, r23
    63c2:	a3 1c       	adc	r10, r3
    63c4:	57 1e       	adc	r5, r23
    63c6:	24 20       	and	r2, r4
    63c8:	0e 22       	and	r0, r30
    63ca:	14 24       	eor	r1, r4
    63cc:	39 26       	eor	r3, r25
    63ce:	7f 28       	or	r7, r15
    63d0:	e8 2a       	or	r14, r24
    63d2:	75 2d       	mov	r23, r5
    63d4:	29 30       	cpi	r18, 0x09	; 9
    63d6:	06 33       	cpi	r16, 0x36	; 54
    63d8:	0f 36       	cpi	r16, 0x6F	; 111
    63da:	45 39       	cpi	r20, 0x95	; 149
    63dc:	ad 3c       	cpi	r26, 0xCD	; 205
    63de:	49 40       	sbci	r20, 0x09	; 9
    63e0:	1b 44       	sbci	r17, 0x4B	; 75
    63e2:	28 48       	sbci	r18, 0x88	; 136
    63e4:	73 4c       	sbci	r23, 0xC3	; 195
    63e6:	fe 50       	subi	r31, 0x0E	; 14
    63e8:	cf 55       	subi	r28, 0x5F	; 95
    63ea:	ea 5a       	subi	r30, 0xAA	; 170
    63ec:	51 60       	ori	r21, 0x01	; 1
    63ee:	0c 66       	ori	r16, 0x6C	; 108
    63f0:	1d 6c       	ori	r17, 0xCD	; 205
    63f2:	8b 72       	andi	r24, 0x2B	; 43
    63f4:	5a 79       	andi	r21, 0x9A	; 154
    63f6:	92 80       	ldd	r9, Z+2	; 0x02
    63f8:	37 88       	ldd	r3, Z+23	; 0x17
    63fa:	50 90 e5 98 	lds	r5, 0x98E5
    63fe:	fd a1       	ldd	r31, Y+37	; 0x25
    6400:	9f ab       	std	Y+55, r25	; 0x37
    6402:	d3 b5       	in	r29, 0x23	; 35
    6404:	a3 c0       	rjmp	.+326    	; 0x654c <waves+0x4c>
	...

00006500 <waves>:
    6500:	00 03       	mulsu	r16, r16
    6502:	06 09       	sbc	r16, r6
    6504:	0c 10       	cpse	r0, r12
    6506:	13 16       	cp	r1, r19
    6508:	19 1c       	adc	r1, r9
    650a:	1f 22       	and	r1, r31
    650c:	25 28       	or	r2, r5
    650e:	2b 2e       	mov	r2, r27
    6510:	31 33       	cpi	r19, 0x31	; 49
    6512:	36 39       	cpi	r19, 0x96	; 150
    6514:	3c 3f       	cpi	r19, 0xFC	; 252
    6516:	41 44       	sbci	r20, 0x41	; 65
    6518:	47 49       	sbci	r20, 0x97	; 151
    651a:	4c 4e       	sbci	r20, 0xEC	; 236
    651c:	51 53       	subi	r21, 0x31	; 49
    651e:	55 58       	subi	r21, 0x85	; 133
    6520:	5a 5c       	subi	r21, 0xCA	; 202
    6522:	5e 60       	ori	r21, 0x0E	; 14
    6524:	62 64       	ori	r22, 0x42	; 66
    6526:	66 68       	ori	r22, 0x86	; 134
    6528:	6a 6b       	ori	r22, 0xBA	; 186
    652a:	6d 6f       	ori	r22, 0xFD	; 253
    652c:	70 71       	andi	r23, 0x10	; 16
    652e:	73 74       	andi	r23, 0x43	; 67
    6530:	75 76       	andi	r23, 0x65	; 101
    6532:	78 79       	andi	r23, 0x98	; 152
    6534:	7a 7a       	andi	r23, 0xAA	; 170
    6536:	7b 7c       	andi	r23, 0xCB	; 203
    6538:	7d 7d       	andi	r23, 0xDD	; 221
    653a:	7e 7e       	andi	r23, 0xEE	; 238
    653c:	7e 7f       	andi	r23, 0xFE	; 254
    653e:	7f 7f       	andi	r23, 0xFF	; 255
    6540:	7f 7f       	andi	r23, 0xFF	; 255
    6542:	7f 7f       	andi	r23, 0xFF	; 255
    6544:	7e 7e       	andi	r23, 0xEE	; 238
    6546:	7e 7d       	andi	r23, 0xDE	; 222
    6548:	7d 7c       	andi	r23, 0xCD	; 205
    654a:	7b 7a       	andi	r23, 0xAB	; 171
    654c:	7a 79       	andi	r23, 0x9A	; 154
    654e:	78 76       	andi	r23, 0x68	; 104
    6550:	75 74       	andi	r23, 0x45	; 69
    6552:	73 71       	andi	r23, 0x13	; 19
    6554:	70 6f       	ori	r23, 0xF0	; 240
    6556:	6d 6b       	ori	r22, 0xBD	; 189
    6558:	6a 68       	ori	r22, 0x8A	; 138
    655a:	66 64       	ori	r22, 0x46	; 70
    655c:	62 60       	ori	r22, 0x02	; 2
    655e:	5e 5c       	subi	r21, 0xCE	; 206
    6560:	5a 58       	subi	r21, 0x8A	; 138
    6562:	55 53       	subi	r21, 0x35	; 53
    6564:	51 4e       	sbci	r21, 0xE1	; 225
    6566:	4c 49       	sbci	r20, 0x9C	; 156
    6568:	47 44       	sbci	r20, 0x47	; 71
    656a:	41 3f       	cpi	r20, 0xF1	; 241
    656c:	3c 39       	cpi	r19, 0x9C	; 156
    656e:	36 33       	cpi	r19, 0x36	; 54
    6570:	31 2e       	mov	r3, r17
    6572:	2b 28       	or	r2, r11
    6574:	25 22       	and	r2, r21
    6576:	1f 1c       	adc	r1, r15
    6578:	19 16       	cp	r1, r25
    657a:	13 10       	cpse	r1, r3
    657c:	0c 09       	sbc	r16, r12
    657e:	06 03       	mulsu	r16, r22
    6580:	00 fd       	sbrc	r16, 0
    6582:	fa f7       	brpl	.-2      	; 0x6582 <waves+0x82>
    6584:	f4 f0       	brlt	.+60     	; 0x65c2 <waves+0xc2>
    6586:	ed ea       	ldi	r30, 0xAD	; 173
    6588:	e7 e4       	ldi	r30, 0x47	; 71
    658a:	e1 de       	rcall	.-574    	; 0x634e <steptable+0x46>
    658c:	db d8       	rcall	.-3658   	; 0x5744 <wdt_randomize>
    658e:	d5 d2       	rcall	.+1450   	; 0x6b3a <waves+0x63a>
    6590:	cf cd       	rjmp	.-1122   	; 0x6130 <ProcessMusic+0x2f8>
    6592:	ca c7       	rjmp	.+3988   	; 0x7528 <LBGetJoyPadState+0x44>
    6594:	c4 c1       	rjmp	.+904    	; 0x691e <waves+0x41e>
    6596:	bf bc       	out	0x2f, r11	; 47
    6598:	b9 b7       	in	r27, 0x39	; 57
    659a:	b4 b2       	in	r11, 0x14	; 20
    659c:	af ad       	ldd	r26, Y+63	; 0x3f
    659e:	ab a8       	ldd	r10, Y+51	; 0x33
    65a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    65a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    65a4:	9e 9c       	mul	r9, r14
    65a6:	9a 98       	cbi	0x13, 2	; 19
    65a8:	96 95       	lsr	r25
    65aa:	93 91       	.word	0x9193	; ????
    65ac:	90 8f       	std	Z+24, r25	; 0x18
    65ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    65b0:	8b 8a       	std	Y+19, r8	; 0x13
    65b2:	88 87       	std	Y+8, r24	; 0x08
    65b4:	86 86       	std	Z+14, r8	; 0x0e
    65b6:	85 84       	ldd	r8, Z+13	; 0x0d
    65b8:	83 83       	std	Z+3, r24	; 0x03
    65ba:	82 82       	std	Z+2, r8	; 0x02
    65bc:	82 81       	ldd	r24, Z+2	; 0x02
    65be:	81 81       	ldd	r24, Z+1	; 0x01
    65c0:	81 81       	ldd	r24, Z+1	; 0x01
    65c2:	81 81       	ldd	r24, Z+1	; 0x01
    65c4:	82 82       	std	Z+2, r8	; 0x02
    65c6:	82 83       	std	Z+2, r24	; 0x02
    65c8:	83 84       	ldd	r8, Z+11	; 0x0b
    65ca:	85 86       	std	Z+13, r8	; 0x0d
    65cc:	86 87       	std	Z+14, r24	; 0x0e
    65ce:	88 8a       	std	Y+16, r8	; 0x10
    65d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    65d2:	8d 8f       	std	Y+29, r24	; 0x1d
    65d4:	90 91 93 95 	lds	r25, 0x9593
    65d8:	96 98       	cbi	0x12, 6	; 18
    65da:	9a 9c       	mul	r9, r10
    65dc:	9e a0       	ldd	r9, Y+38	; 0x26
    65de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    65e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    65e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    65e4:	af b2       	in	r10, 0x1f	; 31
    65e6:	b4 b7       	in	r27, 0x34	; 52
    65e8:	b9 bc       	out	0x29, r11	; 41
    65ea:	bf c1       	rjmp	.+894    	; 0x696a <waves+0x46a>
    65ec:	c4 c7       	rjmp	.+3976   	; 0x7576 <LBGetJoyPadState+0x92>
    65ee:	ca cd       	rjmp	.-1132   	; 0x6184 <ProcessMusic+0x34c>
    65f0:	cf d2       	rcall	.+1438   	; 0x6b90 <waves+0x690>
    65f2:	d5 d8       	rcall	.-3670   	; 0x579e <__vector_8+0xa>
    65f4:	db de       	rcall	.-586    	; 0x63ac <steptable+0xa4>
    65f6:	e1 e4       	ldi	r30, 0x41	; 65
    65f8:	e7 ea       	ldi	r30, 0xA7	; 167
    65fa:	ed f0       	brhs	.+58     	; 0x6636 <waves+0x136>
    65fc:	f4 f7       	brge	.-4      	; 0x65fa <waves+0xfa>
    65fe:	fa fd       	.word	0xfdfa	; ????
    6600:	80 81       	ld	r24, Z
    6602:	82 83       	std	Z+2, r24	; 0x02
    6604:	84 85       	ldd	r24, Z+12	; 0x0c
    6606:	86 87       	std	Z+14, r24	; 0x0e
    6608:	88 89       	ldd	r24, Y+16	; 0x10
    660a:	8a 8b       	std	Y+18, r24	; 0x12
    660c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    660e:	8e 8f       	std	Y+30, r24	; 0x1e
    6610:	90 91 92 93 	lds	r25, 0x9392
    6614:	94 95       	.word	0x9594	; ????
    6616:	96 97       	sbiw	r26, 0x26	; 38
    6618:	98 99       	sbic	0x13, 0	; 19
    661a:	9a 9b       	sbis	0x13, 2	; 19
    661c:	9c 9d       	mul	r25, r12
    661e:	9e 9f       	mul	r25, r30
    6620:	a0 a1       	ldd	r26, Z+32	; 0x20
    6622:	a2 a3       	std	Z+34, r26	; 0x22
    6624:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6626:	a6 a7       	std	Z+46, r26	; 0x2e
    6628:	a8 a9       	ldd	r26, Y+48	; 0x30
    662a:	aa ab       	std	Y+50, r26	; 0x32
    662c:	ac ad       	ldd	r26, Y+60	; 0x3c
    662e:	ae af       	std	Y+62, r26	; 0x3e
    6630:	b0 b1       	in	r27, 0x00	; 0
    6632:	b2 b3       	in	r27, 0x12	; 18
    6634:	b4 b5       	in	r27, 0x24	; 36
    6636:	b6 b7       	in	r27, 0x36	; 54
    6638:	b8 b9       	out	0x08, r27	; 8
    663a:	ba bb       	out	0x1a, r27	; 26
    663c:	bc bd       	out	0x2c, r27	; 44
    663e:	be bf       	out	0x3e, r27	; 62
    6640:	c0 c1       	rjmp	.+896    	; 0x69c2 <waves+0x4c2>
    6642:	c2 c3       	rjmp	.+1924   	; 0x6dc8 <waves+0x8c8>
    6644:	c4 c5       	rjmp	.+2952   	; 0x71ce <DrawMap+0x16>
    6646:	c6 c7       	rjmp	.+3980   	; 0x75d4 <LBWaitSeconds+0xe>
    6648:	c8 c9       	rjmp	.-3184   	; 0x59da <EepromWriteBlock+0x4a>
    664a:	ca cb       	rjmp	.-2156   	; 0x5de0 <TriggerNote+0x28>
    664c:	cc cd       	rjmp	.-1128   	; 0x61e6 <ProcessMusic+0x3ae>
    664e:	ce cf       	rjmp	.-100    	; 0x65ec <waves+0xec>
    6650:	d0 d1       	rcall	.+928    	; 0x69f2 <waves+0x4f2>
    6652:	d2 d3       	rcall	.+1956   	; 0x6df8 <waves+0x8f8>
    6654:	d4 d5       	rcall	.+2984   	; 0x71fe <DrawMap+0x46>
    6656:	d6 d7       	rcall	.+4012   	; 0x7604 <LBMapSprite+0x20>
    6658:	d8 d9       	rcall	.-3152   	; 0x5a0a <EepromWriteBlock+0x7a>
    665a:	da db       	rcall	.-2124   	; 0x5e10 <TriggerNote+0x58>
    665c:	dc dd       	rcall	.-1096   	; 0x6216 <ProcessMusic+0x3de>
    665e:	de df       	rcall	.-68     	; 0x661c <waves+0x11c>
    6660:	e0 e1       	ldi	r30, 0x10	; 16
    6662:	e2 e3       	ldi	r30, 0x32	; 50
    6664:	e4 e5       	ldi	r30, 0x54	; 84
    6666:	e6 e7       	ldi	r30, 0x76	; 118
    6668:	e8 e9       	ldi	r30, 0x98	; 152
    666a:	ea eb       	ldi	r30, 0xBA	; 186
    666c:	ec ed       	ldi	r30, 0xDC	; 220
    666e:	ee ef       	ldi	r30, 0xFE	; 254
    6670:	f0 f1       	brcs	.+124    	; 0x66ee <waves+0x1ee>
    6672:	f2 f3       	brmi	.-4      	; 0x6670 <waves+0x170>
    6674:	f4 f5       	brge	.+124    	; 0x66f2 <waves+0x1f2>
    6676:	f6 f7       	brtc	.-4      	; 0x6674 <waves+0x174>
    6678:	f8 f9       	.word	0xf9f8	; ????
    667a:	fa fb       	.word	0xfbfa	; ????
    667c:	fc fd       	.word	0xfdfc	; ????
    667e:	fe ff       	.word	0xfffe	; ????
    6680:	00 01       	movw	r0, r0
    6682:	02 03       	mulsu	r16, r18
    6684:	04 05       	cpc	r16, r4
    6686:	06 07       	cpc	r16, r22
    6688:	08 09       	sbc	r16, r8
    668a:	0a 0b       	sbc	r16, r26
    668c:	0c 0d       	add	r16, r12
    668e:	0e 0f       	add	r16, r30
    6690:	10 11       	cpse	r17, r0
    6692:	12 13       	cpse	r17, r18
    6694:	14 15       	cp	r17, r4
    6696:	16 17       	cp	r17, r22
    6698:	18 19       	sub	r17, r8
    669a:	1a 1b       	sub	r17, r26
    669c:	1c 1d       	adc	r17, r12
    669e:	1e 1f       	adc	r17, r30
    66a0:	20 21       	and	r18, r0
    66a2:	22 23       	and	r18, r18
    66a4:	24 25       	eor	r18, r4
    66a6:	26 27       	eor	r18, r22
    66a8:	28 29       	or	r18, r8
    66aa:	2a 2b       	or	r18, r26
    66ac:	2c 2d       	mov	r18, r12
    66ae:	2e 2f       	mov	r18, r30
    66b0:	30 31       	cpi	r19, 0x10	; 16
    66b2:	32 33       	cpi	r19, 0x32	; 50
    66b4:	34 35       	cpi	r19, 0x54	; 84
    66b6:	36 37       	cpi	r19, 0x76	; 118
    66b8:	38 39       	cpi	r19, 0x98	; 152
    66ba:	3a 3b       	cpi	r19, 0xBA	; 186
    66bc:	3c 3d       	cpi	r19, 0xDC	; 220
    66be:	3e 3f       	cpi	r19, 0xFE	; 254
    66c0:	40 41       	sbci	r20, 0x10	; 16
    66c2:	42 43       	sbci	r20, 0x32	; 50
    66c4:	44 45       	sbci	r20, 0x54	; 84
    66c6:	46 47       	sbci	r20, 0x76	; 118
    66c8:	48 49       	sbci	r20, 0x98	; 152
    66ca:	4a 4b       	sbci	r20, 0xBA	; 186
    66cc:	4c 4d       	sbci	r20, 0xDC	; 220
    66ce:	4e 4f       	sbci	r20, 0xFE	; 254
    66d0:	50 51       	subi	r21, 0x10	; 16
    66d2:	52 53       	subi	r21, 0x32	; 50
    66d4:	54 55       	subi	r21, 0x54	; 84
    66d6:	56 57       	subi	r21, 0x76	; 118
    66d8:	58 59       	subi	r21, 0x98	; 152
    66da:	5a 5b       	subi	r21, 0xBA	; 186
    66dc:	5c 5d       	subi	r21, 0xDC	; 220
    66de:	5e 5f       	subi	r21, 0xFE	; 254
    66e0:	60 61       	ori	r22, 0x10	; 16
    66e2:	62 63       	ori	r22, 0x32	; 50
    66e4:	64 65       	ori	r22, 0x54	; 84
    66e6:	66 67       	ori	r22, 0x76	; 118
    66e8:	68 69       	ori	r22, 0x98	; 152
    66ea:	6a 6b       	ori	r22, 0xBA	; 186
    66ec:	6c 6d       	ori	r22, 0xDC	; 220
    66ee:	6e 6f       	ori	r22, 0xFE	; 254
    66f0:	70 71       	andi	r23, 0x10	; 16
    66f2:	72 73       	andi	r23, 0x32	; 50
    66f4:	74 75       	andi	r23, 0x54	; 84
    66f6:	76 77       	andi	r23, 0x76	; 118
    66f8:	78 79       	andi	r23, 0x98	; 152
    66fa:	7a 7b       	andi	r23, 0xBA	; 186
    66fc:	7c 7d       	andi	r23, 0xDC	; 220
    66fe:	7e 7f       	andi	r23, 0xFE	; 254
    6700:	00 02       	muls	r16, r16
    6702:	04 06       	cpc	r0, r20
    6704:	08 0a       	sbc	r0, r24
    6706:	0c 0e       	add	r0, r28
    6708:	10 12       	cpse	r1, r16
    670a:	14 16       	cp	r1, r20
    670c:	18 1a       	sub	r1, r24
    670e:	1c 1e       	adc	r1, r28
    6710:	20 22       	and	r2, r16
    6712:	24 26       	eor	r2, r20
    6714:	28 2a       	or	r2, r24
    6716:	2c 2e       	mov	r2, r28
    6718:	30 32       	cpi	r19, 0x20	; 32
    671a:	34 36       	cpi	r19, 0x64	; 100
    671c:	38 3a       	cpi	r19, 0xA8	; 168
    671e:	3c 3e       	cpi	r19, 0xEC	; 236
    6720:	40 42       	sbci	r20, 0x20	; 32
    6722:	44 46       	sbci	r20, 0x64	; 100
    6724:	48 4a       	sbci	r20, 0xA8	; 168
    6726:	4c 4e       	sbci	r20, 0xEC	; 236
    6728:	50 52       	subi	r21, 0x20	; 32
    672a:	54 56       	subi	r21, 0x64	; 100
    672c:	58 5a       	subi	r21, 0xA8	; 168
    672e:	5c 5e       	subi	r21, 0xEC	; 236
    6730:	60 62       	ori	r22, 0x20	; 32
    6732:	64 66       	ori	r22, 0x64	; 100
    6734:	68 6a       	ori	r22, 0xA8	; 168
    6736:	6c 6e       	ori	r22, 0xEC	; 236
    6738:	70 72       	andi	r23, 0x20	; 32
    673a:	74 76       	andi	r23, 0x64	; 100
    673c:	78 7a       	andi	r23, 0xA8	; 168
    673e:	7c 7e       	andi	r23, 0xEC	; 236
    6740:	7f 7d       	andi	r23, 0xDF	; 223
    6742:	7b 79       	andi	r23, 0x9B	; 155
    6744:	77 75       	andi	r23, 0x57	; 87
    6746:	73 71       	andi	r23, 0x13	; 19
    6748:	6f 6d       	ori	r22, 0xDF	; 223
    674a:	6b 69       	ori	r22, 0x9B	; 155
    674c:	67 65       	ori	r22, 0x57	; 87
    674e:	63 61       	ori	r22, 0x13	; 19
    6750:	5f 5d       	subi	r21, 0xDF	; 223
    6752:	5b 59       	subi	r21, 0x9B	; 155
    6754:	57 55       	subi	r21, 0x57	; 87
    6756:	53 51       	subi	r21, 0x13	; 19
    6758:	4f 4d       	sbci	r20, 0xDF	; 223
    675a:	4b 49       	sbci	r20, 0x9B	; 155
    675c:	47 45       	sbci	r20, 0x57	; 87
    675e:	43 41       	sbci	r20, 0x13	; 19
    6760:	3f 3d       	cpi	r19, 0xDF	; 223
    6762:	3b 39       	cpi	r19, 0x9B	; 155
    6764:	37 35       	cpi	r19, 0x57	; 87
    6766:	33 31       	cpi	r19, 0x13	; 19
    6768:	2f 2d       	mov	r18, r15
    676a:	2b 29       	or	r18, r11
    676c:	27 25       	eor	r18, r7
    676e:	23 21       	and	r18, r3
    6770:	1f 1d       	adc	r17, r15
    6772:	1b 19       	sub	r17, r11
    6774:	17 15       	cp	r17, r7
    6776:	13 11       	cpse	r17, r3
    6778:	0f 0d       	add	r16, r15
    677a:	0b 09       	sbc	r16, r11
    677c:	07 05       	cpc	r16, r7
    677e:	03 01       	movw	r0, r6
    6780:	ff fd       	.word	0xfdff	; ????
    6782:	fb f9       	.word	0xf9fb	; ????
    6784:	f7 f5       	brid	.+124    	; 0x6802 <waves+0x302>
    6786:	f3 f1       	brvs	.+124    	; 0x6804 <waves+0x304>
    6788:	ef ed       	ldi	r30, 0xDF	; 223
    678a:	eb e9       	ldi	r30, 0x9B	; 155
    678c:	e7 e5       	ldi	r30, 0x57	; 87
    678e:	e3 e1       	ldi	r30, 0x13	; 19
    6790:	df dd       	rcall	.-1090   	; 0x6350 <steptable+0x48>
    6792:	db d9       	rcall	.-3146   	; 0x5b4a <PatchCommand14+0x22>
    6794:	d7 d5       	rcall	.+2990   	; 0x7344 <Print+0x1c>
    6796:	d3 d1       	rcall	.+934    	; 0x6b3e <waves+0x63e>
    6798:	cf cd       	rjmp	.-1122   	; 0x6338 <steptable+0x30>
    679a:	cb c9       	rjmp	.-3178   	; 0x5b32 <PatchCommand14+0xa>
    679c:	c7 c5       	rjmp	.+2958   	; 0x732c <Print+0x4>
    679e:	c3 c1       	rjmp	.+902    	; 0x6b26 <waves+0x626>
    67a0:	bf bd       	out	0x2f, r27	; 47
    67a2:	bb b9       	out	0x0b, r27	; 11
    67a4:	b7 b5       	in	r27, 0x27	; 39
    67a6:	b3 b1       	in	r27, 0x03	; 3
    67a8:	af ad       	ldd	r26, Y+63	; 0x3f
    67aa:	ab a9       	ldd	r26, Y+51	; 0x33
    67ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    67ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    67b0:	9f 9d       	mul	r25, r15
    67b2:	9b 99       	sbic	0x13, 3	; 19
    67b4:	97 95       	ror	r25
    67b6:	93 91       	.word	0x9193	; ????
    67b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    67ba:	8b 89       	ldd	r24, Y+19	; 0x13
    67bc:	87 85       	ldd	r24, Z+15	; 0x0f
    67be:	83 81       	ldd	r24, Z+3	; 0x03
    67c0:	80 82       	st	Z, r8
    67c2:	84 86       	std	Z+12, r8	; 0x0c
    67c4:	88 8a       	std	Y+16, r8	; 0x10
    67c6:	8c 8e       	std	Y+28, r8	; 0x1c
    67c8:	90 92 94 96 	sts	0x9694, r9
    67cc:	98 9a       	sbi	0x13, 0	; 19
    67ce:	9c 9e       	mul	r9, r28
    67d0:	a0 a2       	std	Z+32, r10	; 0x20
    67d2:	a4 a6       	std	Z+44, r10	; 0x2c
    67d4:	a8 aa       	std	Y+48, r10	; 0x30
    67d6:	ac ae       	std	Y+60, r10	; 0x3c
    67d8:	b0 b2       	in	r11, 0x10	; 16
    67da:	b4 b6       	in	r11, 0x34	; 52
    67dc:	b8 ba       	out	0x18, r11	; 24
    67de:	bc be       	out	0x3c, r11	; 60
    67e0:	c0 c2       	rjmp	.+1408   	; 0x6d62 <waves+0x862>
    67e2:	c4 c6       	rjmp	.+3464   	; 0x756c <LBGetJoyPadState+0x88>
    67e4:	c8 ca       	rjmp	.-2672   	; 0x5d76 <TriggerFx+0x4e>
    67e6:	cc ce       	rjmp	.-616    	; 0x6580 <waves+0x80>
    67e8:	d0 d2       	rcall	.+1440   	; 0x6d8a <waves+0x88a>
    67ea:	d4 d6       	rcall	.+3496   	; 0x7594 <LBCollides+0x1a>
    67ec:	d8 da       	rcall	.-2640   	; 0x5d9e <TriggerFx+0x76>
    67ee:	dc de       	rcall	.-584    	; 0x65a8 <waves+0xa8>
    67f0:	e0 e2       	ldi	r30, 0x20	; 32
    67f2:	e4 e6       	ldi	r30, 0x64	; 100
    67f4:	e8 ea       	ldi	r30, 0xA8	; 168
    67f6:	ec ee       	ldi	r30, 0xEC	; 236
    67f8:	f0 f2       	brcs	.-68     	; 0x67b6 <waves+0x2b6>
    67fa:	f4 f6       	brge	.-68     	; 0x67b8 <waves+0x2b8>
    67fc:	f8 fa       	.word	0xfaf8	; ????
    67fe:	fc fe       	.word	0xfefc	; ????
    6800:	7f 7f       	andi	r23, 0xFF	; 255
    6802:	7f 7f       	andi	r23, 0xFF	; 255
    6804:	7f 7f       	andi	r23, 0xFF	; 255
    6806:	7f 7f       	andi	r23, 0xFF	; 255
    6808:	7f 7f       	andi	r23, 0xFF	; 255
    680a:	7f 7f       	andi	r23, 0xFF	; 255
    680c:	7f 7f       	andi	r23, 0xFF	; 255
    680e:	7f 7f       	andi	r23, 0xFF	; 255
    6810:	7f 7f       	andi	r23, 0xFF	; 255
    6812:	7f 7f       	andi	r23, 0xFF	; 255
    6814:	7f 7f       	andi	r23, 0xFF	; 255
    6816:	7f 7f       	andi	r23, 0xFF	; 255
    6818:	7f 7f       	andi	r23, 0xFF	; 255
    681a:	7f 7f       	andi	r23, 0xFF	; 255
    681c:	7f 7f       	andi	r23, 0xFF	; 255
    681e:	7f 7f       	andi	r23, 0xFF	; 255
    6820:	7f 7f       	andi	r23, 0xFF	; 255
    6822:	7f 7f       	andi	r23, 0xFF	; 255
    6824:	7f 7f       	andi	r23, 0xFF	; 255
    6826:	7f 7f       	andi	r23, 0xFF	; 255
    6828:	7f 7f       	andi	r23, 0xFF	; 255
    682a:	7f 7f       	andi	r23, 0xFF	; 255
    682c:	7f 7f       	andi	r23, 0xFF	; 255
    682e:	7f 7f       	andi	r23, 0xFF	; 255
    6830:	7f 7f       	andi	r23, 0xFF	; 255
    6832:	7f 7f       	andi	r23, 0xFF	; 255
    6834:	7f 7f       	andi	r23, 0xFF	; 255
    6836:	7f 7f       	andi	r23, 0xFF	; 255
    6838:	7f 7f       	andi	r23, 0xFF	; 255
    683a:	7f 7f       	andi	r23, 0xFF	; 255
    683c:	7f 7f       	andi	r23, 0xFF	; 255
    683e:	7f 7f       	andi	r23, 0xFF	; 255
    6840:	80 80       	ld	r8, Z
    6842:	80 80       	ld	r8, Z
    6844:	80 80       	ld	r8, Z
    6846:	80 80       	ld	r8, Z
    6848:	80 80       	ld	r8, Z
    684a:	80 80       	ld	r8, Z
    684c:	80 80       	ld	r8, Z
    684e:	80 80       	ld	r8, Z
    6850:	80 80       	ld	r8, Z
    6852:	80 80       	ld	r8, Z
    6854:	80 80       	ld	r8, Z
    6856:	80 80       	ld	r8, Z
    6858:	80 80       	ld	r8, Z
    685a:	80 80       	ld	r8, Z
    685c:	80 80       	ld	r8, Z
    685e:	80 80       	ld	r8, Z
    6860:	80 80       	ld	r8, Z
    6862:	80 80       	ld	r8, Z
    6864:	80 80       	ld	r8, Z
    6866:	80 80       	ld	r8, Z
    6868:	80 80       	ld	r8, Z
    686a:	80 80       	ld	r8, Z
    686c:	80 80       	ld	r8, Z
    686e:	80 80       	ld	r8, Z
    6870:	80 80       	ld	r8, Z
    6872:	80 80       	ld	r8, Z
    6874:	80 80       	ld	r8, Z
    6876:	80 80       	ld	r8, Z
    6878:	80 80       	ld	r8, Z
    687a:	80 80       	ld	r8, Z
    687c:	80 80       	ld	r8, Z
    687e:	80 80       	ld	r8, Z
    6880:	80 80       	ld	r8, Z
    6882:	80 80       	ld	r8, Z
    6884:	80 80       	ld	r8, Z
    6886:	80 80       	ld	r8, Z
    6888:	80 80       	ld	r8, Z
    688a:	80 80       	ld	r8, Z
    688c:	80 80       	ld	r8, Z
    688e:	80 80       	ld	r8, Z
    6890:	80 80       	ld	r8, Z
    6892:	80 80       	ld	r8, Z
    6894:	80 80       	ld	r8, Z
    6896:	80 80       	ld	r8, Z
    6898:	80 80       	ld	r8, Z
    689a:	80 80       	ld	r8, Z
    689c:	80 80       	ld	r8, Z
    689e:	80 80       	ld	r8, Z
    68a0:	80 80       	ld	r8, Z
    68a2:	80 80       	ld	r8, Z
    68a4:	80 80       	ld	r8, Z
    68a6:	80 80       	ld	r8, Z
    68a8:	80 80       	ld	r8, Z
    68aa:	80 80       	ld	r8, Z
    68ac:	80 80       	ld	r8, Z
    68ae:	80 80       	ld	r8, Z
    68b0:	80 80       	ld	r8, Z
    68b2:	80 80       	ld	r8, Z
    68b4:	80 80       	ld	r8, Z
    68b6:	80 80       	ld	r8, Z
    68b8:	80 80       	ld	r8, Z
    68ba:	80 80       	ld	r8, Z
    68bc:	80 80       	ld	r8, Z
    68be:	80 80       	ld	r8, Z
    68c0:	80 80       	ld	r8, Z
    68c2:	80 80       	ld	r8, Z
    68c4:	80 80       	ld	r8, Z
    68c6:	80 80       	ld	r8, Z
    68c8:	80 80       	ld	r8, Z
    68ca:	80 80       	ld	r8, Z
    68cc:	80 80       	ld	r8, Z
    68ce:	80 80       	ld	r8, Z
    68d0:	80 80       	ld	r8, Z
    68d2:	80 80       	ld	r8, Z
    68d4:	80 80       	ld	r8, Z
    68d6:	80 80       	ld	r8, Z
    68d8:	80 80       	ld	r8, Z
    68da:	80 80       	ld	r8, Z
    68dc:	80 80       	ld	r8, Z
    68de:	80 80       	ld	r8, Z
    68e0:	80 80       	ld	r8, Z
    68e2:	80 80       	ld	r8, Z
    68e4:	80 80       	ld	r8, Z
    68e6:	80 80       	ld	r8, Z
    68e8:	80 80       	ld	r8, Z
    68ea:	80 80       	ld	r8, Z
    68ec:	80 80       	ld	r8, Z
    68ee:	80 80       	ld	r8, Z
    68f0:	80 80       	ld	r8, Z
    68f2:	80 80       	ld	r8, Z
    68f4:	80 80       	ld	r8, Z
    68f6:	80 80       	ld	r8, Z
    68f8:	80 80       	ld	r8, Z
    68fa:	80 80       	ld	r8, Z
    68fc:	80 80       	ld	r8, Z
    68fe:	80 80       	ld	r8, Z
    6900:	7f 7f       	andi	r23, 0xFF	; 255
    6902:	7f 7f       	andi	r23, 0xFF	; 255
    6904:	7f 7f       	andi	r23, 0xFF	; 255
    6906:	7f 7f       	andi	r23, 0xFF	; 255
    6908:	7f 7f       	andi	r23, 0xFF	; 255
    690a:	7f 7f       	andi	r23, 0xFF	; 255
    690c:	7f 7f       	andi	r23, 0xFF	; 255
    690e:	7f 7f       	andi	r23, 0xFF	; 255
    6910:	7f 7f       	andi	r23, 0xFF	; 255
    6912:	7f 7f       	andi	r23, 0xFF	; 255
    6914:	7f 7f       	andi	r23, 0xFF	; 255
    6916:	7f 7f       	andi	r23, 0xFF	; 255
    6918:	7f 7f       	andi	r23, 0xFF	; 255
    691a:	7f 7f       	andi	r23, 0xFF	; 255
    691c:	7f 7f       	andi	r23, 0xFF	; 255
    691e:	7f 7f       	andi	r23, 0xFF	; 255
    6920:	7f 7f       	andi	r23, 0xFF	; 255
    6922:	7f 7f       	andi	r23, 0xFF	; 255
    6924:	7f 7f       	andi	r23, 0xFF	; 255
    6926:	7f 7f       	andi	r23, 0xFF	; 255
    6928:	7f 7f       	andi	r23, 0xFF	; 255
    692a:	7f 7f       	andi	r23, 0xFF	; 255
    692c:	7f 7f       	andi	r23, 0xFF	; 255
    692e:	7f 7f       	andi	r23, 0xFF	; 255
    6930:	7f 7f       	andi	r23, 0xFF	; 255
    6932:	7f 7f       	andi	r23, 0xFF	; 255
    6934:	7f 7f       	andi	r23, 0xFF	; 255
    6936:	7f 7f       	andi	r23, 0xFF	; 255
    6938:	7f 7f       	andi	r23, 0xFF	; 255
    693a:	7f 7f       	andi	r23, 0xFF	; 255
    693c:	7f 7f       	andi	r23, 0xFF	; 255
    693e:	7f 7f       	andi	r23, 0xFF	; 255
    6940:	7f 7f       	andi	r23, 0xFF	; 255
    6942:	7f 7f       	andi	r23, 0xFF	; 255
    6944:	7f 7f       	andi	r23, 0xFF	; 255
    6946:	7f 7f       	andi	r23, 0xFF	; 255
    6948:	7f 7f       	andi	r23, 0xFF	; 255
    694a:	7f 7f       	andi	r23, 0xFF	; 255
    694c:	7f 7f       	andi	r23, 0xFF	; 255
    694e:	7f 7f       	andi	r23, 0xFF	; 255
    6950:	7f 7f       	andi	r23, 0xFF	; 255
    6952:	7f 7f       	andi	r23, 0xFF	; 255
    6954:	7f 7f       	andi	r23, 0xFF	; 255
    6956:	7f 7f       	andi	r23, 0xFF	; 255
    6958:	7f 7f       	andi	r23, 0xFF	; 255
    695a:	7f 7f       	andi	r23, 0xFF	; 255
    695c:	7f 7f       	andi	r23, 0xFF	; 255
    695e:	7f 7f       	andi	r23, 0xFF	; 255
    6960:	7f 7f       	andi	r23, 0xFF	; 255
    6962:	7f 7f       	andi	r23, 0xFF	; 255
    6964:	7f 7f       	andi	r23, 0xFF	; 255
    6966:	7f 7f       	andi	r23, 0xFF	; 255
    6968:	7f 7f       	andi	r23, 0xFF	; 255
    696a:	7f 7f       	andi	r23, 0xFF	; 255
    696c:	7f 7f       	andi	r23, 0xFF	; 255
    696e:	7f 7f       	andi	r23, 0xFF	; 255
    6970:	7f 7f       	andi	r23, 0xFF	; 255
    6972:	7f 7f       	andi	r23, 0xFF	; 255
    6974:	7f 7f       	andi	r23, 0xFF	; 255
    6976:	7f 7f       	andi	r23, 0xFF	; 255
    6978:	7f 7f       	andi	r23, 0xFF	; 255
    697a:	7f 7f       	andi	r23, 0xFF	; 255
    697c:	7f 7f       	andi	r23, 0xFF	; 255
    697e:	7f 7f       	andi	r23, 0xFF	; 255
    6980:	80 80       	ld	r8, Z
    6982:	80 80       	ld	r8, Z
    6984:	80 80       	ld	r8, Z
    6986:	80 80       	ld	r8, Z
    6988:	80 80       	ld	r8, Z
    698a:	80 80       	ld	r8, Z
    698c:	80 80       	ld	r8, Z
    698e:	80 80       	ld	r8, Z
    6990:	80 80       	ld	r8, Z
    6992:	80 80       	ld	r8, Z
    6994:	80 80       	ld	r8, Z
    6996:	80 80       	ld	r8, Z
    6998:	80 80       	ld	r8, Z
    699a:	80 80       	ld	r8, Z
    699c:	80 80       	ld	r8, Z
    699e:	80 80       	ld	r8, Z
    69a0:	80 80       	ld	r8, Z
    69a2:	80 80       	ld	r8, Z
    69a4:	80 80       	ld	r8, Z
    69a6:	80 80       	ld	r8, Z
    69a8:	80 80       	ld	r8, Z
    69aa:	80 80       	ld	r8, Z
    69ac:	80 80       	ld	r8, Z
    69ae:	80 80       	ld	r8, Z
    69b0:	80 80       	ld	r8, Z
    69b2:	80 80       	ld	r8, Z
    69b4:	80 80       	ld	r8, Z
    69b6:	80 80       	ld	r8, Z
    69b8:	80 80       	ld	r8, Z
    69ba:	80 80       	ld	r8, Z
    69bc:	80 80       	ld	r8, Z
    69be:	80 80       	ld	r8, Z
    69c0:	80 80       	ld	r8, Z
    69c2:	80 80       	ld	r8, Z
    69c4:	80 80       	ld	r8, Z
    69c6:	80 80       	ld	r8, Z
    69c8:	80 80       	ld	r8, Z
    69ca:	80 80       	ld	r8, Z
    69cc:	80 80       	ld	r8, Z
    69ce:	80 80       	ld	r8, Z
    69d0:	80 80       	ld	r8, Z
    69d2:	80 80       	ld	r8, Z
    69d4:	80 80       	ld	r8, Z
    69d6:	80 80       	ld	r8, Z
    69d8:	80 80       	ld	r8, Z
    69da:	80 80       	ld	r8, Z
    69dc:	80 80       	ld	r8, Z
    69de:	80 80       	ld	r8, Z
    69e0:	80 80       	ld	r8, Z
    69e2:	80 80       	ld	r8, Z
    69e4:	80 80       	ld	r8, Z
    69e6:	80 80       	ld	r8, Z
    69e8:	80 80       	ld	r8, Z
    69ea:	80 80       	ld	r8, Z
    69ec:	80 80       	ld	r8, Z
    69ee:	80 80       	ld	r8, Z
    69f0:	80 80       	ld	r8, Z
    69f2:	80 80       	ld	r8, Z
    69f4:	80 80       	ld	r8, Z
    69f6:	80 80       	ld	r8, Z
    69f8:	80 80       	ld	r8, Z
    69fa:	80 80       	ld	r8, Z
    69fc:	80 80       	ld	r8, Z
    69fe:	80 80       	ld	r8, Z
    6a00:	7f 7f       	andi	r23, 0xFF	; 255
    6a02:	7f 7f       	andi	r23, 0xFF	; 255
    6a04:	7f 7f       	andi	r23, 0xFF	; 255
    6a06:	7f 7f       	andi	r23, 0xFF	; 255
    6a08:	7f 7f       	andi	r23, 0xFF	; 255
    6a0a:	7f 7f       	andi	r23, 0xFF	; 255
    6a0c:	7f 7f       	andi	r23, 0xFF	; 255
    6a0e:	7f 7f       	andi	r23, 0xFF	; 255
    6a10:	7f 7f       	andi	r23, 0xFF	; 255
    6a12:	7f 7f       	andi	r23, 0xFF	; 255
    6a14:	7f 7f       	andi	r23, 0xFF	; 255
    6a16:	7f 7f       	andi	r23, 0xFF	; 255
    6a18:	7f 7f       	andi	r23, 0xFF	; 255
    6a1a:	7f 7f       	andi	r23, 0xFF	; 255
    6a1c:	7f 7f       	andi	r23, 0xFF	; 255
    6a1e:	7f 7f       	andi	r23, 0xFF	; 255
    6a20:	7f 7f       	andi	r23, 0xFF	; 255
    6a22:	7f 7f       	andi	r23, 0xFF	; 255
    6a24:	7f 7f       	andi	r23, 0xFF	; 255
    6a26:	7f 7f       	andi	r23, 0xFF	; 255
    6a28:	7f 7f       	andi	r23, 0xFF	; 255
    6a2a:	7f 7f       	andi	r23, 0xFF	; 255
    6a2c:	7f 7f       	andi	r23, 0xFF	; 255
    6a2e:	7f 7f       	andi	r23, 0xFF	; 255
    6a30:	7f 7f       	andi	r23, 0xFF	; 255
    6a32:	7f 7f       	andi	r23, 0xFF	; 255
    6a34:	7f 7f       	andi	r23, 0xFF	; 255
    6a36:	7f 7f       	andi	r23, 0xFF	; 255
    6a38:	7f 7f       	andi	r23, 0xFF	; 255
    6a3a:	7f 7f       	andi	r23, 0xFF	; 255
    6a3c:	7f 7f       	andi	r23, 0xFF	; 255
    6a3e:	7f 7f       	andi	r23, 0xFF	; 255
    6a40:	7f 7f       	andi	r23, 0xFF	; 255
    6a42:	7f 7f       	andi	r23, 0xFF	; 255
    6a44:	7f 7f       	andi	r23, 0xFF	; 255
    6a46:	7f 7f       	andi	r23, 0xFF	; 255
    6a48:	7f 7f       	andi	r23, 0xFF	; 255
    6a4a:	7f 7f       	andi	r23, 0xFF	; 255
    6a4c:	7f 7f       	andi	r23, 0xFF	; 255
    6a4e:	7f 7f       	andi	r23, 0xFF	; 255
    6a50:	7f 7f       	andi	r23, 0xFF	; 255
    6a52:	7f 7f       	andi	r23, 0xFF	; 255
    6a54:	7f 7f       	andi	r23, 0xFF	; 255
    6a56:	7f 7f       	andi	r23, 0xFF	; 255
    6a58:	7f 7f       	andi	r23, 0xFF	; 255
    6a5a:	7f 7f       	andi	r23, 0xFF	; 255
    6a5c:	7f 7f       	andi	r23, 0xFF	; 255
    6a5e:	7f 7f       	andi	r23, 0xFF	; 255
    6a60:	7f 7f       	andi	r23, 0xFF	; 255
    6a62:	7f 7f       	andi	r23, 0xFF	; 255
    6a64:	7f 7f       	andi	r23, 0xFF	; 255
    6a66:	7f 7f       	andi	r23, 0xFF	; 255
    6a68:	7f 7f       	andi	r23, 0xFF	; 255
    6a6a:	7f 7f       	andi	r23, 0xFF	; 255
    6a6c:	7f 7f       	andi	r23, 0xFF	; 255
    6a6e:	7f 7f       	andi	r23, 0xFF	; 255
    6a70:	7f 7f       	andi	r23, 0xFF	; 255
    6a72:	7f 7f       	andi	r23, 0xFF	; 255
    6a74:	7f 7f       	andi	r23, 0xFF	; 255
    6a76:	7f 7f       	andi	r23, 0xFF	; 255
    6a78:	7f 7f       	andi	r23, 0xFF	; 255
    6a7a:	7f 7f       	andi	r23, 0xFF	; 255
    6a7c:	7f 7f       	andi	r23, 0xFF	; 255
    6a7e:	7f 7f       	andi	r23, 0xFF	; 255
    6a80:	7f 7f       	andi	r23, 0xFF	; 255
    6a82:	7f 7f       	andi	r23, 0xFF	; 255
    6a84:	7f 7f       	andi	r23, 0xFF	; 255
    6a86:	7f 7f       	andi	r23, 0xFF	; 255
    6a88:	7f 7f       	andi	r23, 0xFF	; 255
    6a8a:	7f 7f       	andi	r23, 0xFF	; 255
    6a8c:	7f 7f       	andi	r23, 0xFF	; 255
    6a8e:	7f 7f       	andi	r23, 0xFF	; 255
    6a90:	7f 7f       	andi	r23, 0xFF	; 255
    6a92:	7f 7f       	andi	r23, 0xFF	; 255
    6a94:	7f 7f       	andi	r23, 0xFF	; 255
    6a96:	7f 7f       	andi	r23, 0xFF	; 255
    6a98:	7f 7f       	andi	r23, 0xFF	; 255
    6a9a:	7f 7f       	andi	r23, 0xFF	; 255
    6a9c:	7f 7f       	andi	r23, 0xFF	; 255
    6a9e:	7f 7f       	andi	r23, 0xFF	; 255
    6aa0:	7f 7f       	andi	r23, 0xFF	; 255
    6aa2:	7f 7f       	andi	r23, 0xFF	; 255
    6aa4:	7f 7f       	andi	r23, 0xFF	; 255
    6aa6:	7f 7f       	andi	r23, 0xFF	; 255
    6aa8:	7f 7f       	andi	r23, 0xFF	; 255
    6aaa:	7f 7f       	andi	r23, 0xFF	; 255
    6aac:	7f 7f       	andi	r23, 0xFF	; 255
    6aae:	7f 7f       	andi	r23, 0xFF	; 255
    6ab0:	7f 7f       	andi	r23, 0xFF	; 255
    6ab2:	7f 7f       	andi	r23, 0xFF	; 255
    6ab4:	7f 7f       	andi	r23, 0xFF	; 255
    6ab6:	7f 7f       	andi	r23, 0xFF	; 255
    6ab8:	7f 7f       	andi	r23, 0xFF	; 255
    6aba:	7f 7f       	andi	r23, 0xFF	; 255
    6abc:	7f 7f       	andi	r23, 0xFF	; 255
    6abe:	7f 7f       	andi	r23, 0xFF	; 255
    6ac0:	80 80       	ld	r8, Z
    6ac2:	80 80       	ld	r8, Z
    6ac4:	80 80       	ld	r8, Z
    6ac6:	80 80       	ld	r8, Z
    6ac8:	80 80       	ld	r8, Z
    6aca:	80 80       	ld	r8, Z
    6acc:	80 80       	ld	r8, Z
    6ace:	80 80       	ld	r8, Z
    6ad0:	80 80       	ld	r8, Z
    6ad2:	80 80       	ld	r8, Z
    6ad4:	80 80       	ld	r8, Z
    6ad6:	80 80       	ld	r8, Z
    6ad8:	80 80       	ld	r8, Z
    6ada:	80 80       	ld	r8, Z
    6adc:	80 80       	ld	r8, Z
    6ade:	80 80       	ld	r8, Z
    6ae0:	80 80       	ld	r8, Z
    6ae2:	80 80       	ld	r8, Z
    6ae4:	80 80       	ld	r8, Z
    6ae6:	80 80       	ld	r8, Z
    6ae8:	80 80       	ld	r8, Z
    6aea:	80 80       	ld	r8, Z
    6aec:	80 80       	ld	r8, Z
    6aee:	80 80       	ld	r8, Z
    6af0:	80 80       	ld	r8, Z
    6af2:	80 80       	ld	r8, Z
    6af4:	80 80       	ld	r8, Z
    6af6:	80 80       	ld	r8, Z
    6af8:	80 80       	ld	r8, Z
    6afa:	80 80       	ld	r8, Z
    6afc:	80 80       	ld	r8, Z
    6afe:	80 80       	ld	r8, Z
    6b00:	03 09       	sbc	r16, r3
    6b02:	13 1e       	adc	r1, r19
    6b04:	28 31       	cpi	r18, 0x18	; 24
    6b06:	3a 40       	sbci	r19, 0x0A	; 10
    6b08:	46 4c       	sbci	r20, 0xC6	; 198
    6b0a:	50 54       	subi	r21, 0x40	; 64
    6b0c:	58 5b       	subi	r21, 0xB8	; 184
    6b0e:	5e 61       	ori	r21, 0x1E	; 30
    6b10:	63 65       	ori	r22, 0x53	; 83
    6b12:	67 69       	ori	r22, 0x97	; 151
    6b14:	6b 6c       	ori	r22, 0xCB	; 203
    6b16:	6e 6f       	ori	r22, 0xFE	; 254
    6b18:	70 71       	andi	r23, 0x10	; 16
    6b1a:	72 73       	andi	r23, 0x32	; 50
    6b1c:	74 75       	andi	r23, 0x54	; 84
    6b1e:	76 77       	andi	r23, 0x76	; 118
    6b20:	77 78       	andi	r23, 0x87	; 135
    6b22:	79 79       	andi	r23, 0x99	; 153
    6b24:	7a 7a       	andi	r23, 0xAA	; 170
    6b26:	7b 7b       	andi	r23, 0xBB	; 187
    6b28:	7c 7c       	andi	r23, 0xCC	; 204
    6b2a:	7c 7d       	andi	r23, 0xDC	; 220
    6b2c:	7d 7d       	andi	r23, 0xDD	; 221
    6b2e:	7e 7e       	andi	r23, 0xEE	; 238
    6b30:	7e 7e       	andi	r23, 0xEE	; 238
    6b32:	7f 7f       	andi	r23, 0xFF	; 255
    6b34:	7f 7f       	andi	r23, 0xFF	; 255
    6b36:	7f 7f       	andi	r23, 0xFF	; 255
    6b38:	7f 7f       	andi	r23, 0xFF	; 255
    6b3a:	7f 7f       	andi	r23, 0xFF	; 255
    6b3c:	7f 7f       	andi	r23, 0xFF	; 255
    6b3e:	7f 7f       	andi	r23, 0xFF	; 255
    6b40:	7f 7f       	andi	r23, 0xFF	; 255
    6b42:	7f 7f       	andi	r23, 0xFF	; 255
    6b44:	7f 7f       	andi	r23, 0xFF	; 255
    6b46:	7f 7f       	andi	r23, 0xFF	; 255
    6b48:	7f 7f       	andi	r23, 0xFF	; 255
    6b4a:	7f 7f       	andi	r23, 0xFF	; 255
    6b4c:	7f 7e       	andi	r23, 0xEF	; 239
    6b4e:	7e 7e       	andi	r23, 0xEE	; 238
    6b50:	7e 7d       	andi	r23, 0xDE	; 222
    6b52:	7d 7d       	andi	r23, 0xDD	; 221
    6b54:	7c 7c       	andi	r23, 0xCC	; 204
    6b56:	7c 7b       	andi	r23, 0xBC	; 188
    6b58:	7b 7a       	andi	r23, 0xAB	; 171
    6b5a:	7a 79       	andi	r23, 0x9A	; 154
    6b5c:	79 78       	andi	r23, 0x89	; 137
    6b5e:	77 77       	andi	r23, 0x77	; 119
    6b60:	76 75       	andi	r23, 0x56	; 86
    6b62:	74 73       	andi	r23, 0x34	; 52
    6b64:	72 71       	andi	r23, 0x12	; 18
    6b66:	70 6f       	ori	r23, 0xF0	; 240
    6b68:	6e 6c       	ori	r22, 0xCE	; 206
    6b6a:	6b 69       	ori	r22, 0x9B	; 155
    6b6c:	67 65       	ori	r22, 0x57	; 87
    6b6e:	63 61       	ori	r22, 0x13	; 19
    6b70:	5e 5b       	subi	r21, 0xBE	; 190
    6b72:	58 54       	subi	r21, 0x48	; 72
    6b74:	50 4c       	sbci	r21, 0xC0	; 192
    6b76:	46 40       	sbci	r20, 0x06	; 6
    6b78:	3a 31       	cpi	r19, 0x1A	; 26
    6b7a:	28 1e       	adc	r2, r24
    6b7c:	13 09       	sbc	r17, r3
    6b7e:	03 00       	.word	0x0003	; ????
    6b80:	c6 cc       	rjmp	.-1652   	; 0x650e <waves+0xe>
    6b82:	d5 db       	rcall	.-2134   	; 0x632e <steptable+0x26>
    6b84:	df e3       	ldi	r29, 0x3F	; 63
    6b86:	e5 e7       	ldi	r30, 0x75	; 117
    6b88:	e9 ea       	ldi	r30, 0xA9	; 169
    6b8a:	eb ec       	ldi	r30, 0xCB	; 203
    6b8c:	ed ee       	ldi	r30, 0xED	; 237
    6b8e:	ef ef       	ldi	r30, 0xFF	; 255
    6b90:	f0 f0       	brcs	.+60     	; 0x6bce <waves+0x6ce>
    6b92:	f0 f1       	brcs	.+124    	; 0x6c10 <waves+0x710>
    6b94:	f1 f1       	breq	.+124    	; 0x6c12 <waves+0x712>
    6b96:	f1 f2       	breq	.-68     	; 0x6b54 <waves+0x654>
    6b98:	f2 f2       	brmi	.-68     	; 0x6b56 <waves+0x656>
    6b9a:	f2 f2       	brmi	.-68     	; 0x6b58 <waves+0x658>
    6b9c:	f2 f2       	brmi	.-68     	; 0x6b5a <waves+0x65a>
    6b9e:	f2 f3       	brmi	.-4      	; 0x6b9c <waves+0x69c>
    6ba0:	f3 f3       	brvs	.-4      	; 0x6b9e <waves+0x69e>
    6ba2:	f3 f3       	brvs	.-4      	; 0x6ba0 <waves+0x6a0>
    6ba4:	f3 f3       	brvs	.-4      	; 0x6ba2 <waves+0x6a2>
    6ba6:	f3 f3       	brvs	.-4      	; 0x6ba4 <waves+0x6a4>
    6ba8:	f3 f3       	brvs	.-4      	; 0x6ba6 <waves+0x6a6>
    6baa:	f3 f3       	brvs	.-4      	; 0x6ba8 <waves+0x6a8>
    6bac:	f3 f3       	brvs	.-4      	; 0x6baa <waves+0x6aa>
    6bae:	f3 f3       	brvs	.-4      	; 0x6bac <waves+0x6ac>
    6bb0:	f3 f3       	brvs	.-4      	; 0x6bae <waves+0x6ae>
    6bb2:	f3 f3       	brvs	.-4      	; 0x6bb0 <waves+0x6b0>
    6bb4:	f3 f3       	brvs	.-4      	; 0x6bb2 <waves+0x6b2>
    6bb6:	f3 f3       	brvs	.-4      	; 0x6bb4 <waves+0x6b4>
    6bb8:	f3 f3       	brvs	.-4      	; 0x6bb6 <waves+0x6b6>
    6bba:	f3 f3       	brvs	.-4      	; 0x6bb8 <waves+0x6b8>
    6bbc:	f3 f3       	brvs	.-4      	; 0x6bba <waves+0x6ba>
    6bbe:	f3 f3       	brvs	.-4      	; 0x6bbc <waves+0x6bc>
    6bc0:	f3 f3       	brvs	.-4      	; 0x6bbe <waves+0x6be>
    6bc2:	f3 f3       	brvs	.-4      	; 0x6bc0 <waves+0x6c0>
    6bc4:	f3 f3       	brvs	.-4      	; 0x6bc2 <waves+0x6c2>
    6bc6:	f3 f3       	brvs	.-4      	; 0x6bc4 <waves+0x6c4>
    6bc8:	f3 f3       	brvs	.-4      	; 0x6bc6 <waves+0x6c6>
    6bca:	f3 f3       	brvs	.-4      	; 0x6bc8 <waves+0x6c8>
    6bcc:	f3 f3       	brvs	.-4      	; 0x6bca <waves+0x6ca>
    6bce:	f3 f3       	brvs	.-4      	; 0x6bcc <waves+0x6cc>
    6bd0:	f3 f3       	brvs	.-4      	; 0x6bce <waves+0x6ce>
    6bd2:	f3 f3       	brvs	.-4      	; 0x6bd0 <waves+0x6d0>
    6bd4:	f3 f3       	brvs	.-4      	; 0x6bd2 <waves+0x6d2>
    6bd6:	f3 f3       	brvs	.-4      	; 0x6bd4 <waves+0x6d4>
    6bd8:	f3 f3       	brvs	.-4      	; 0x6bd6 <waves+0x6d6>
    6bda:	f3 f3       	brvs	.-4      	; 0x6bd8 <waves+0x6d8>
    6bdc:	f3 f3       	brvs	.-4      	; 0x6bda <waves+0x6da>
    6bde:	f3 f3       	brvs	.-4      	; 0x6bdc <waves+0x6dc>
    6be0:	f2 f2       	brmi	.-68     	; 0x6b9e <waves+0x69e>
    6be2:	f2 f2       	brmi	.-68     	; 0x6ba0 <waves+0x6a0>
    6be4:	f2 f2       	brmi	.-68     	; 0x6ba2 <waves+0x6a2>
    6be6:	f2 f2       	brmi	.-68     	; 0x6ba4 <waves+0x6a4>
    6be8:	f1 f1       	breq	.+124    	; 0x6c66 <waves+0x766>
    6bea:	f1 f1       	breq	.+124    	; 0x6c68 <waves+0x768>
    6bec:	f0 f0       	brcs	.+60     	; 0x6c2a <waves+0x72a>
    6bee:	f0 ef       	ldi	r31, 0xF0	; 240
    6bf0:	ef ee       	ldi	r30, 0xEF	; 239
    6bf2:	ed ec       	ldi	r30, 0xCD	; 205
    6bf4:	eb ea       	ldi	r30, 0xAB	; 171
    6bf6:	e9 e7       	ldi	r30, 0x79	; 121
    6bf8:	e5 e3       	ldi	r30, 0x35	; 53
    6bfa:	df db       	rcall	.-2114   	; 0x63ba <steptable+0xb2>
    6bfc:	d5 cc       	rjmp	.-1622   	; 0x65a8 <waves+0xa8>
    6bfe:	c6 00       	.word	0x00c6	; ????
    6c00:	00 28       	or	r0, r0
    6c02:	3d 42       	sbci	r19, 0x2D	; 45
    6c04:	30 2d       	mov	r19, r0
    6c06:	2c 2b       	or	r18, r28
    6c08:	2c 2d       	mov	r18, r12
    6c0a:	2e 2f       	mov	r18, r30
    6c0c:	30 32       	cpi	r19, 0x20	; 32
    6c0e:	33 35       	cpi	r19, 0x53	; 83
    6c10:	37 39       	cpi	r19, 0x97	; 151
    6c12:	3b 3d       	cpi	r19, 0xDB	; 219
    6c14:	3f 41       	sbci	r19, 0x1F	; 31
    6c16:	43 45       	sbci	r20, 0x53	; 83
    6c18:	48 4a       	sbci	r20, 0xA8	; 168
    6c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    6c1c:	50 53       	subi	r21, 0x30	; 48
    6c1e:	55 57       	subi	r21, 0x75	; 117
    6c20:	59 5b       	subi	r21, 0xB9	; 185
    6c22:	5d 5f       	subi	r21, 0xFD	; 253
    6c24:	61 63       	ori	r22, 0x31	; 49
    6c26:	65 67       	ori	r22, 0x75	; 117
    6c28:	69 6b       	ori	r22, 0xB9	; 185
    6c2a:	6c 6e       	ori	r22, 0xEC	; 236
    6c2c:	70 71       	andi	r23, 0x10	; 16
    6c2e:	73 74       	andi	r23, 0x43	; 67
    6c30:	75 77       	andi	r23, 0x75	; 117
    6c32:	78 79       	andi	r23, 0x98	; 152
    6c34:	7a 7b       	andi	r23, 0xBA	; 186
    6c36:	7c 7d       	andi	r23, 0xDC	; 220
    6c38:	7d 7e       	andi	r23, 0xED	; 237
    6c3a:	7e 7f       	andi	r23, 0xFE	; 254
    6c3c:	7f 7f       	andi	r23, 0xFF	; 255
    6c3e:	7f 7f       	andi	r23, 0xFF	; 255
    6c40:	7f 7f       	andi	r23, 0xFF	; 255
    6c42:	7f 7f       	andi	r23, 0xFF	; 255
    6c44:	7f 7f       	andi	r23, 0xFF	; 255
    6c46:	7e 7e       	andi	r23, 0xEE	; 238
    6c48:	7d 7d       	andi	r23, 0xDD	; 221
    6c4a:	7c 7b       	andi	r23, 0xBC	; 188
    6c4c:	7a 79       	andi	r23, 0x9A	; 154
    6c4e:	78 77       	andi	r23, 0x78	; 120
    6c50:	75 74       	andi	r23, 0x45	; 69
    6c52:	73 71       	andi	r23, 0x13	; 19
    6c54:	70 6e       	ori	r23, 0xE0	; 224
    6c56:	6c 6b       	ori	r22, 0xBC	; 188
    6c58:	69 67       	ori	r22, 0x79	; 121
    6c5a:	65 63       	ori	r22, 0x35	; 53
    6c5c:	61 5f       	subi	r22, 0xF1	; 241
    6c5e:	5d 5b       	subi	r21, 0xBD	; 189
    6c60:	59 57       	subi	r21, 0x79	; 121
    6c62:	55 53       	subi	r21, 0x35	; 53
    6c64:	50 4e       	sbci	r21, 0xE0	; 224
    6c66:	4c 4a       	sbci	r20, 0xAC	; 172
    6c68:	48 45       	sbci	r20, 0x58	; 88
    6c6a:	43 41       	sbci	r20, 0x13	; 19
    6c6c:	3f 3d       	cpi	r19, 0xDF	; 223
    6c6e:	3b 39       	cpi	r19, 0x9B	; 155
    6c70:	37 35       	cpi	r19, 0x57	; 87
    6c72:	33 32       	cpi	r19, 0x23	; 35
    6c74:	30 2f       	mov	r19, r16
    6c76:	2e 2d       	mov	r18, r14
    6c78:	2c 2b       	or	r18, r28
    6c7a:	2c 2d       	mov	r18, r12
    6c7c:	30 42       	sbci	r19, 0x20	; 32
    6c7e:	3d 28       	or	r3, r13
    6c80:	00 e9       	ldi	r16, 0x90	; 144
    6c82:	e5 fe       	sbrs	r14, 5
    6c84:	d4 d7       	rcall	.+4008   	; 0x7c2e <render_camera_view+0x7e>
    6c86:	d7 d7       	rcall	.+4014   	; 0x7c36 <render_camera_view+0x86>
    6c88:	d6 d4       	rcall	.+2476   	; 0x7636 <LBMapSprite+0x52>
    6c8a:	d2 d0       	rcall	.+420    	; 0x6e30 <waves+0x930>
    6c8c:	ce cc       	rjmp	.-1636   	; 0x662a <waves+0x12a>
    6c8e:	ca c8       	rjmp	.-3692   	; 0x5e24 <TriggerNote+0x6c>
    6c90:	c6 c3       	rjmp	.+1932   	; 0x741e <FadeIn+0x8>
    6c92:	c1 bf       	out	0x31, r28	; 49
    6c94:	bd ba       	out	0x1d, r11	; 29
    6c96:	b8 b6       	in	r11, 0x38	; 56
    6c98:	b4 b1       	in	r27, 0x04	; 4
    6c9a:	af ad       	ldd	r26, Y+63	; 0x3f
    6c9c:	ab a9       	ldd	r26, Y+51	; 0x33
    6c9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    6ca0:	a3 a1       	ldd	r26, Z+35	; 0x23
    6ca2:	9f 9e       	mul	r9, r31
    6ca4:	9c 9a       	sbi	0x13, 4	; 19
    6ca6:	99 97       	sbiw	r26, 0x29	; 41
    6ca8:	95 94       	asr	r9
    6caa:	93 91       	.word	0x9193	; ????
    6cac:	90 8f       	std	Z+24, r25	; 0x18
    6cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6cb0:	8b 8a       	std	Y+19, r8	; 0x13
    6cb2:	89 88       	ldd	r8, Y+17	; 0x11
    6cb4:	88 87       	std	Y+8, r24	; 0x08
    6cb6:	86 85       	ldd	r24, Z+14	; 0x0e
    6cb8:	85 84       	ldd	r8, Z+13	; 0x0d
    6cba:	84 84       	ldd	r8, Z+12	; 0x0c
    6cbc:	83 83       	std	Z+3, r24	; 0x03
    6cbe:	83 83       	std	Z+3, r24	; 0x03
    6cc0:	83 83       	std	Z+3, r24	; 0x03
    6cc2:	83 83       	std	Z+3, r24	; 0x03
    6cc4:	83 84       	ldd	r8, Z+11	; 0x0b
    6cc6:	84 84       	ldd	r8, Z+12	; 0x0c
    6cc8:	85 85       	ldd	r24, Z+13	; 0x0d
    6cca:	86 87       	std	Z+14, r24	; 0x0e
    6ccc:	88 88       	ldd	r8, Y+16	; 0x10
    6cce:	89 8a       	std	Y+17, r8	; 0x11
    6cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    6cd4:	90 91 93 94 	lds	r25, 0x9493
    6cd8:	95 97       	sbiw	r26, 0x25	; 37
    6cda:	99 9a       	sbi	0x13, 1	; 19
    6cdc:	9c 9e       	mul	r9, r28
    6cde:	9f a1       	ldd	r25, Y+39	; 0x27
    6ce0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    6ce2:	a7 a9       	ldd	r26, Z+55	; 0x37
    6ce4:	ab ad       	ldd	r26, Y+59	; 0x3b
    6ce6:	af b1       	in	r26, 0x0f	; 15
    6ce8:	b4 b6       	in	r11, 0x34	; 52
    6cea:	b8 ba       	out	0x18, r11	; 24
    6cec:	bd bf       	out	0x3d, r27	; 61
    6cee:	c1 c3       	rjmp	.+1922   	; 0x7472 <ProcessFading+0x2c>
    6cf0:	c6 c8       	rjmp	.-3700   	; 0x5e7e <ProcessMusic+0x46>
    6cf2:	ca cc       	rjmp	.-1644   	; 0x6688 <waves+0x188>
    6cf4:	ce d0       	rcall	.+412    	; 0x6e92 <waves+0x992>
    6cf6:	d2 d4       	rcall	.+2468   	; 0x769c <LBMoveSprite+0x14>
    6cf8:	d6 d7       	rcall	.+4012   	; 0x7ca6 <append_tile_column+0x16>
    6cfa:	d7 d7       	rcall	.+4014   	; 0x7caa <append_tile_column+0x1a>
    6cfc:	d4 fe       	sbrs	r13, 4
    6cfe:	e5 e9       	ldi	r30, 0x95	; 149
    6d00:	f9 f8       	.word	0xf8f9	; ????
    6d02:	f9 f5       	brne	.+126    	; 0x6d82 <waves+0x882>
    6d04:	eb e1       	ldi	r30, 0x1B	; 27
    6d06:	dd de       	rcall	.-582    	; 0x6ac2 <waves+0x5c2>
    6d08:	e0 e2       	ldi	r30, 0x20	; 32
    6d0a:	e4 e5       	ldi	r30, 0x54	; 84
    6d0c:	e6 e5       	ldi	r30, 0x56	; 86
    6d0e:	e4 e2       	ldi	r30, 0x24	; 36
    6d10:	de d9       	rcall	.-3140   	; 0x60ce <ProcessMusic+0x296>
    6d12:	d2 ca       	rjmp	.-2652   	; 0x62b8 <SetMixerWave+0xe>
    6d14:	c1 b7       	in	r28, 0x31	; 49
    6d16:	ac a2       	std	Y+36, r10	; 0x24
    6d18:	99 91       	ld	r25, Y+
    6d1a:	8a 86       	std	Y+10, r8	; 0x0a
    6d1c:	83 81       	ldd	r24, Z+3	; 0x03
    6d1e:	80 80       	ld	r8, Z
    6d20:	81 82       	std	Z+1, r8	; 0x01
    6d22:	83 85       	ldd	r24, Z+11	; 0x0b
    6d24:	86 88       	ldd	r8, Z+22	; 0x16
    6d26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6d28:	8d 8f       	std	Y+29, r24	; 0x1d
    6d2a:	90 92 93 95 	sts	0x9593, r9
    6d2e:	96 97       	sbiw	r26, 0x26	; 38
    6d30:	98 99       	sbic	0x13, 0	; 19
    6d32:	9a 9b       	sbis	0x13, 2	; 19
    6d34:	9b 9c       	mul	r9, r11
    6d36:	9d 9d       	mul	r25, r13
    6d38:	9d 9e       	mul	r9, r29
    6d3a:	9e 9e       	mul	r9, r30
    6d3c:	9f 9f       	mul	r25, r31
    6d3e:	9f 9f       	mul	r25, r31
    6d40:	9f 9f       	mul	r25, r31
    6d42:	9f 9e       	mul	r9, r31
    6d44:	9e 9e       	mul	r9, r30
    6d46:	9d 9d       	mul	r25, r13
    6d48:	9d 9c       	mul	r9, r13
    6d4a:	9b 9b       	sbis	0x13, 3	; 19
    6d4c:	9a 99       	sbic	0x13, 2	; 19
    6d4e:	98 97       	sbiw	r26, 0x28	; 40
    6d50:	96 95       	lsr	r25
    6d52:	93 92       	.word	0x9293	; ????
    6d54:	90 8f       	std	Z+24, r25	; 0x18
    6d56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6d58:	8a 88       	ldd	r8, Y+18	; 0x12
    6d5a:	86 85       	ldd	r24, Z+14	; 0x0e
    6d5c:	83 82       	std	Z+3, r8	; 0x03
    6d5e:	81 80       	ldd	r8, Z+1	; 0x01
    6d60:	80 81       	ld	r24, Z
    6d62:	83 86       	std	Z+11, r8	; 0x0b
    6d64:	8a 91       	ld	r24, -Y
    6d66:	99 a2       	std	Y+33, r9	; 0x21
    6d68:	ac b7       	in	r26, 0x3c	; 60
    6d6a:	c1 ca       	rjmp	.-2686   	; 0x62ee <esmw+0xe>
    6d6c:	d2 d9       	rcall	.-3164   	; 0x6112 <ProcessMusic+0x2da>
    6d6e:	de e2       	ldi	r29, 0x2E	; 46
    6d70:	e4 e5       	ldi	r30, 0x54	; 84
    6d72:	e6 e5       	ldi	r30, 0x56	; 86
    6d74:	e4 e2       	ldi	r30, 0x24	; 36
    6d76:	e0 de       	rcall	.-576    	; 0x6b38 <waves+0x638>
    6d78:	dd e1       	ldi	r29, 0x1D	; 29
    6d7a:	eb f5       	brvc	.+122    	; 0x6df6 <waves+0x8f6>
    6d7c:	f9 f8       	.word	0xf8f9	; ????
    6d7e:	f9 00       	.word	0x00f9	; ????
    6d80:	07 08       	sbc	r0, r7
    6d82:	07 0b       	sbc	r16, r23
    6d84:	15 1f       	adc	r17, r21
    6d86:	23 22       	and	r2, r19
    6d88:	20 1e       	adc	r2, r16
    6d8a:	1c 1b       	sub	r17, r28
    6d8c:	1a 1b       	sub	r17, r26
    6d8e:	1c 1e       	adc	r1, r28
    6d90:	22 27       	eor	r18, r18
    6d92:	2e 36       	cpi	r18, 0x6E	; 110
    6d94:	3f 49       	sbci	r19, 0x9F	; 159
    6d96:	54 5e       	subi	r21, 0xE4	; 228
    6d98:	67 6f       	ori	r22, 0xF7	; 247
    6d9a:	76 7a       	andi	r23, 0xA6	; 166
    6d9c:	7e 7f       	andi	r23, 0xFE	; 254
    6d9e:	7f 7f       	andi	r23, 0xFF	; 255
    6da0:	7f 7e       	andi	r23, 0xEF	; 239
    6da2:	7d 7b       	andi	r23, 0xBD	; 189
    6da4:	7a 78       	andi	r23, 0x8A	; 138
    6da6:	76 74       	andi	r23, 0x46	; 70
    6da8:	73 71       	andi	r23, 0x13	; 19
    6daa:	70 6e       	ori	r23, 0xE0	; 224
    6dac:	6d 6b       	ori	r22, 0xBD	; 189
    6dae:	6a 69       	ori	r22, 0x9A	; 154
    6db0:	68 67       	ori	r22, 0x78	; 120
    6db2:	66 65       	ori	r22, 0x56	; 86
    6db4:	65 64       	ori	r22, 0x45	; 69
    6db6:	64 63       	ori	r22, 0x34	; 52
    6db8:	63 62       	ori	r22, 0x23	; 35
    6dba:	62 62       	ori	r22, 0x22	; 34
    6dbc:	61 61       	ori	r22, 0x11	; 17
    6dbe:	61 61       	ori	r22, 0x11	; 17
    6dc0:	61 61       	ori	r22, 0x11	; 17
    6dc2:	61 62       	ori	r22, 0x21	; 33
    6dc4:	62 62       	ori	r22, 0x22	; 34
    6dc6:	63 63       	ori	r22, 0x33	; 51
    6dc8:	63 64       	ori	r22, 0x43	; 67
    6dca:	65 65       	ori	r22, 0x55	; 85
    6dcc:	66 67       	ori	r22, 0x76	; 118
    6dce:	68 69       	ori	r22, 0x98	; 152
    6dd0:	6a 6b       	ori	r22, 0xBA	; 186
    6dd2:	6d 6e       	ori	r22, 0xED	; 237
    6dd4:	70 71       	andi	r23, 0x10	; 16
    6dd6:	73 74       	andi	r23, 0x43	; 67
    6dd8:	76 78       	andi	r23, 0x86	; 134
    6dda:	7a 7b       	andi	r23, 0xBA	; 186
    6ddc:	7d 7e       	andi	r23, 0xED	; 237
    6dde:	7f 7f       	andi	r23, 0xFF	; 255
    6de0:	7f 7f       	andi	r23, 0xFF	; 255
    6de2:	7e 7a       	andi	r23, 0xAE	; 174
    6de4:	76 6f       	ori	r23, 0xF6	; 246
    6de6:	67 5e       	subi	r22, 0xE7	; 231
    6de8:	54 49       	sbci	r21, 0x94	; 148
    6dea:	3f 36       	cpi	r19, 0x6F	; 111
    6dec:	2e 27       	eor	r18, r30
    6dee:	22 1e       	adc	r2, r18
    6df0:	1c 1b       	sub	r17, r28
    6df2:	1a 1b       	sub	r17, r26
    6df4:	1c 1e       	adc	r1, r28
    6df6:	20 22       	and	r2, r16
    6df8:	23 1f       	adc	r18, r19
    6dfa:	15 0b       	sbc	r17, r21
    6dfc:	07 08       	sbc	r0, r7
    6dfe:	07 00       	.word	0x0007	; ????
    6e00:	1f 31       	cpi	r17, 0x1F	; 31
    6e02:	3d 44       	sbci	r19, 0x4D	; 77
    6e04:	4e 53       	subi	r20, 0x3E	; 62
    6e06:	54 56       	subi	r21, 0x64	; 100
    6e08:	5a 5f       	subi	r21, 0xFA	; 250
    6e0a:	64 69       	ori	r22, 0x94	; 148
    6e0c:	6e 74       	andi	r22, 0x4E	; 78
    6e0e:	76 79       	andi	r23, 0x96	; 150
    6e10:	7c 7f       	andi	r23, 0xFC	; 252
    6e12:	7f 7f       	andi	r23, 0xFF	; 255
    6e14:	7f 7f       	andi	r23, 0xFF	; 255
    6e16:	7f 7f       	andi	r23, 0xFF	; 255
    6e18:	7f 7f       	andi	r23, 0xFF	; 255
    6e1a:	7f 7f       	andi	r23, 0xFF	; 255
    6e1c:	7f 7f       	andi	r23, 0xFF	; 255
    6e1e:	7f 7f       	andi	r23, 0xFF	; 255
    6e20:	7f 7f       	andi	r23, 0xFF	; 255
    6e22:	7f 7f       	andi	r23, 0xFF	; 255
    6e24:	7f 7f       	andi	r23, 0xFF	; 255
    6e26:	7f 7f       	andi	r23, 0xFF	; 255
    6e28:	7f 7f       	andi	r23, 0xFF	; 255
    6e2a:	7f 7f       	andi	r23, 0xFF	; 255
    6e2c:	7f 7f       	andi	r23, 0xFF	; 255
    6e2e:	7f 7f       	andi	r23, 0xFF	; 255
    6e30:	7f 7f       	andi	r23, 0xFF	; 255
    6e32:	7f 7f       	andi	r23, 0xFF	; 255
    6e34:	7f 7f       	andi	r23, 0xFF	; 255
    6e36:	7f 7f       	andi	r23, 0xFF	; 255
    6e38:	7f 7f       	andi	r23, 0xFF	; 255
    6e3a:	7f 7f       	andi	r23, 0xFF	; 255
    6e3c:	7f 7f       	andi	r23, 0xFF	; 255
    6e3e:	7f 7f       	andi	r23, 0xFF	; 255
    6e40:	7f 7f       	andi	r23, 0xFF	; 255
    6e42:	7f 7f       	andi	r23, 0xFF	; 255
    6e44:	7f 7f       	andi	r23, 0xFF	; 255
    6e46:	7f 7f       	andi	r23, 0xFF	; 255
    6e48:	7f 7f       	andi	r23, 0xFF	; 255
    6e4a:	7f 7f       	andi	r23, 0xFF	; 255
    6e4c:	7f 7f       	andi	r23, 0xFF	; 255
    6e4e:	7f 7f       	andi	r23, 0xFF	; 255
    6e50:	7f 7f       	andi	r23, 0xFF	; 255
    6e52:	7f 7f       	andi	r23, 0xFF	; 255
    6e54:	7f 7f       	andi	r23, 0xFF	; 255
    6e56:	7f 7f       	andi	r23, 0xFF	; 255
    6e58:	7f 7f       	andi	r23, 0xFF	; 255
    6e5a:	7f 7f       	andi	r23, 0xFF	; 255
    6e5c:	7f 7f       	andi	r23, 0xFF	; 255
    6e5e:	7f 7f       	andi	r23, 0xFF	; 255
    6e60:	7f 7f       	andi	r23, 0xFF	; 255
    6e62:	7f 7f       	andi	r23, 0xFF	; 255
    6e64:	7f 7f       	andi	r23, 0xFF	; 255
    6e66:	7f 7f       	andi	r23, 0xFF	; 255
    6e68:	7f 7f       	andi	r23, 0xFF	; 255
    6e6a:	7f 7f       	andi	r23, 0xFF	; 255
    6e6c:	7f 7f       	andi	r23, 0xFF	; 255
    6e6e:	7f 7f       	andi	r23, 0xFF	; 255
    6e70:	7f 7f       	andi	r23, 0xFF	; 255
    6e72:	7f 7f       	andi	r23, 0xFF	; 255
    6e74:	7f 7f       	andi	r23, 0xFF	; 255
    6e76:	7f 7f       	andi	r23, 0xFF	; 255
    6e78:	7f 7f       	andi	r23, 0xFF	; 255
    6e7a:	7f 7c       	andi	r23, 0xCF	; 207
    6e7c:	78 71       	andi	r23, 0x18	; 24
    6e7e:	68 4c       	sbci	r22, 0xC8	; 200
    6e80:	2c 1c       	adc	r2, r12
    6e82:	12 0c       	add	r1, r2
    6e84:	0a 0b       	sbc	r16, r26
    6e86:	0a 05       	cpc	r16, r10
    6e88:	fd f3       	brhs	.-2      	; 0x6e88 <waves+0x988>
    6e8a:	e9 df       	rcall	.-46     	; 0x6e5e <waves+0x95e>
    6e8c:	d4 ca       	rjmp	.-2648   	; 0x6436 <steptable+0x12e>
    6e8e:	c0 b7       	in	r28, 0x30	; 48
    6e90:	ae a6       	std	Y+46, r10	; 0x2e
    6e92:	9e 97       	sbiw	r26, 0x2e	; 46
    6e94:	91 8b       	std	Z+17, r25	; 0x11
    6e96:	86 85       	ldd	r24, Z+14	; 0x0e
    6e98:	82 80       	ldd	r8, Z+2	; 0x02
    6e9a:	80 80       	ld	r8, Z
    6e9c:	80 80       	ld	r8, Z
    6e9e:	80 80       	ld	r8, Z
    6ea0:	80 80       	ld	r8, Z
    6ea2:	80 80       	ld	r8, Z
    6ea4:	80 80       	ld	r8, Z
    6ea6:	80 80       	ld	r8, Z
    6ea8:	80 80       	ld	r8, Z
    6eaa:	80 80       	ld	r8, Z
    6eac:	80 80       	ld	r8, Z
    6eae:	80 80       	ld	r8, Z
    6eb0:	80 80       	ld	r8, Z
    6eb2:	80 80       	ld	r8, Z
    6eb4:	80 80       	ld	r8, Z
    6eb6:	80 80       	ld	r8, Z
    6eb8:	80 80       	ld	r8, Z
    6eba:	80 80       	ld	r8, Z
    6ebc:	80 80       	ld	r8, Z
    6ebe:	80 80       	ld	r8, Z
    6ec0:	80 80       	ld	r8, Z
    6ec2:	80 80       	ld	r8, Z
    6ec4:	80 80       	ld	r8, Z
    6ec6:	80 80       	ld	r8, Z
    6ec8:	80 80       	ld	r8, Z
    6eca:	80 80       	ld	r8, Z
    6ecc:	80 80       	ld	r8, Z
    6ece:	80 80       	ld	r8, Z
    6ed0:	80 80       	ld	r8, Z
    6ed2:	80 80       	ld	r8, Z
    6ed4:	80 80       	ld	r8, Z
    6ed6:	80 80       	ld	r8, Z
    6ed8:	80 80       	ld	r8, Z
    6eda:	80 80       	ld	r8, Z
    6edc:	80 80       	ld	r8, Z
    6ede:	80 80       	ld	r8, Z
    6ee0:	80 80       	ld	r8, Z
    6ee2:	80 80       	ld	r8, Z
    6ee4:	80 80       	ld	r8, Z
    6ee6:	80 80       	ld	r8, Z
    6ee8:	80 80       	ld	r8, Z
    6eea:	80 80       	ld	r8, Z
    6eec:	80 80       	ld	r8, Z
    6eee:	80 80       	ld	r8, Z
    6ef0:	80 80       	ld	r8, Z
    6ef2:	80 80       	ld	r8, Z
    6ef4:	80 87       	std	Z+8, r24	; 0x08
    6ef6:	91 9d       	mul	r25, r1
    6ef8:	ac c4       	rjmp	.+2392   	; 0x7852 <init_player_state+0x8a>
    6efa:	cb d4       	rcall	.+2454   	; 0x7892 <init_player_state+0xca>
    6efc:	dd f2       	brhs	.-74     	; 0x6eb4 <waves+0x9b4>
    6efe:	fa fa       	.word	0xfafa	; ????

00006f00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6f00:	80 91 db 0c 	lds	r24, 0x0CDB
    6f04:	90 91 69 0d 	lds	r25, 0x0D69
    6f08:	89 17       	cp	r24, r25
    6f0a:	78 f4       	brcc	.+30     	; 0x6f2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    6f0c:	e8 2f       	mov	r30, r24
    6f0e:	f0 e0       	ldi	r31, 0x00	; 0
    6f10:	9f 01       	movw	r18, r30
    6f12:	22 0f       	add	r18, r18
    6f14:	33 1f       	adc	r19, r19
    6f16:	e2 0f       	add	r30, r18
    6f18:	f3 1f       	adc	r31, r19
    6f1a:	e6 5c       	subi	r30, 0xC6	; 198
    6f1c:	f3 4f       	sbci	r31, 0xF3	; 243
    6f1e:	a0 81       	ld	r26, Z
    6f20:	b1 81       	ldd	r27, Z+1	; 0x01
    6f22:	92 81       	ldd	r25, Z+2	; 0x02
    6f24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    6f26:	8f 5f       	subi	r24, 0xFF	; 255
    6f28:	ed cf       	rjmp	.-38     	; 0x6f04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    6f2a:	08 95       	ret

00006f2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    6f2c:	2f 92       	push	r2
    6f2e:	3f 92       	push	r3
    6f30:	4f 92       	push	r4
    6f32:	5f 92       	push	r5
    6f34:	6f 92       	push	r6
    6f36:	7f 92       	push	r7
    6f38:	8f 92       	push	r8
    6f3a:	9f 92       	push	r9
    6f3c:	af 92       	push	r10
    6f3e:	bf 92       	push	r11
    6f40:	cf 92       	push	r12
    6f42:	df 92       	push	r13
    6f44:	ef 92       	push	r14
    6f46:	ff 92       	push	r15
    6f48:	0f 93       	push	r16
    6f4a:	1f 93       	push	r17
    6f4c:	cf 93       	push	r28
    6f4e:	df 93       	push	r29
    6f50:	00 d0       	rcall	.+0      	; 0x6f52 <ProcessSprites+0x26>
    6f52:	00 d0       	rcall	.+0      	; 0x6f54 <ProcessSprites+0x28>
    6f54:	cd b7       	in	r28, 0x3d	; 61
    6f56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    6f58:	80 91 00 05 	lds	r24, 0x0500
    6f5c:	88 23       	and	r24, r24
    6f5e:	09 f4       	brne	.+2      	; 0x6f62 <ProcessSprites+0x36>
    6f60:	e0 c0       	rjmp	.+448    	; 0x7122 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    6f62:	80 91 da 0c 	lds	r24, 0x0CDA
    6f66:	80 93 db 0c 	sts	0x0CDB, r24
		free_tile_index=userRamTilesCount;
    6f6a:	80 93 69 0d 	sts	0x0D69, r24
    6f6e:	e2 e0       	ldi	r30, 0x02	; 2
    6f70:	ce 2e       	mov	r12, r30
    6f72:	e5 e0       	ldi	r30, 0x05	; 5
    6f74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    6f76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    6f78:	f6 01       	movw	r30, r12
    6f7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    6f7c:	20 3e       	cpi	r18, 0xE0	; 224
    6f7e:	09 f4       	brne	.+2      	; 0x6f82 <ProcessSprites+0x56>
    6f80:	b1 c0       	rjmp	.+354    	; 0x70e4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    6f82:	80 91 9c 0c 	lds	r24, 0x0C9C
    6f86:	90 e0       	ldi	r25, 0x00	; 0
    6f88:	82 0f       	add	r24, r18
    6f8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    6f8c:	41 81       	ldd	r20, Z+1	; 0x01
    6f8e:	20 91 9d 0c 	lds	r18, 0x0C9D
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	24 0f       	add	r18, r20
    6f96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    6f98:	ac 01       	movw	r20, r24
    6f9a:	73 e0       	ldi	r23, 0x03	; 3
    6f9c:	56 95       	lsr	r21
    6f9e:	47 95       	ror	r20
    6fa0:	7a 95       	dec	r23
    6fa2:	e1 f7       	brne	.-8      	; 0x6f9c <ProcessSprites+0x70>
    6fa4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    6fa6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    6fa8:	11 f0       	breq	.+4      	; 0x6fae <ProcessSprites+0x82>
    6faa:	92 e0       	ldi	r25, 0x02	; 2
    6fac:	01 c0       	rjmp	.+2      	; 0x6fb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    6fae:	91 e0       	ldi	r25, 0x01	; 1
    6fb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    6fb2:	a9 01       	movw	r20, r18
    6fb4:	63 e0       	ldi	r22, 0x03	; 3
    6fb6:	56 95       	lsr	r21
    6fb8:	47 95       	ror	r20
    6fba:	6a 95       	dec	r22
    6fbc:	e1 f7       	brne	.-8      	; 0x6fb6 <ProcessSprites+0x8a>
    6fbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    6fc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    6fc2:	19 f0       	breq	.+6      	; 0x6fca <ProcessSprites+0x9e>
    6fc4:	52 e0       	ldi	r21, 0x02	; 2
    6fc6:	35 2e       	mov	r3, r21
    6fc8:	02 c0       	rjmp	.+4      	; 0x6fce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    6fca:	33 24       	eor	r3, r3
    6fcc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6fce:	30 e0       	ldi	r19, 0x00	; 0
    6fd0:	32 2f       	mov	r19, r18
    6fd2:	22 27       	eor	r18, r18
    6fd4:	f9 01       	movw	r30, r18
    6fd6:	e8 0f       	add	r30, r24
    6fd8:	f1 1d       	adc	r31, r1
    6fda:	fc 83       	std	Y+4, r31	; 0x04
    6fdc:	eb 83       	std	Y+3, r30	; 0x03
    6fde:	e1 2c       	mov	r14, r1
    6fe0:	f1 2c       	mov	r15, r1
    6fe2:	be 2c       	mov	r11, r14
    6fe4:	aa 24       	eor	r10, r10
    6fe6:	26 2c       	mov	r2, r6
    6fe8:	45 2c       	mov	r4, r5
    6fea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    6fec:	84 2c       	mov	r8, r4
    6fee:	91 2c       	mov	r9, r1
    6ff0:	84 2d       	mov	r24, r4
    6ff2:	20 91 9e 0c 	lds	r18, 0x0C9E
    6ff6:	42 2f       	mov	r20, r18
    6ff8:	50 e0       	ldi	r21, 0x00	; 0
    6ffa:	44 0f       	add	r20, r20
    6ffc:	55 1f       	adc	r21, r21
    6ffe:	84 16       	cp	r8, r20
    7000:	95 06       	cpc	r9, r21
    7002:	14 f0       	brlt	.+4      	; 0x7008 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    7004:	22 0f       	add	r18, r18
    7006:	03 c0       	rjmp	.+6      	; 0x700e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    7008:	42 16       	cp	r4, r18
    700a:	10 f0       	brcs	.+4      	; 0x7010 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    700c:	84 2d       	mov	r24, r4
    700e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    7010:	ff e1       	ldi	r31, 0x1F	; 31
    7012:	f2 15       	cp	r31, r2
    7014:	18 f4       	brcc	.+6      	; 0x701c <ProcessSprites+0xf0>
    7016:	00 ee       	ldi	r16, 0xE0	; 224
    7018:	02 0d       	add	r16, r2
    701a:	01 c0       	rjmp	.+2      	; 0x701e <ProcessSprites+0xf2>
    701c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    701e:	28 2f       	mov	r18, r24
    7020:	26 95       	lsr	r18
    7022:	26 95       	lsr	r18
    7024:	26 95       	lsr	r18
    7026:	10 e0       	ldi	r17, 0x00	; 0
    7028:	40 e2       	ldi	r20, 0x20	; 32
    702a:	24 9f       	mul	r18, r20
    702c:	00 0d       	add	r16, r0
    702e:	11 1d       	adc	r17, r1
    7030:	11 24       	eor	r1, r1
    7032:	23 e0       	ldi	r18, 0x03	; 3
    7034:	00 0f       	add	r16, r16
    7036:	11 1f       	adc	r17, r17
    7038:	2a 95       	dec	r18
    703a:	e1 f7       	brne	.-8      	; 0x7034 <ProcessSprites+0x108>
    703c:	87 70       	andi	r24, 0x07	; 7
    703e:	08 0f       	add	r16, r24
    7040:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    7042:	00 50       	subi	r16, 0x00	; 0
    7044:	1f 4f       	sbci	r17, 0xFF	; 255
    7046:	f8 01       	movw	r30, r16
    7048:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    704a:	81 e0       	ldi	r24, 0x01	; 1
    704c:	7c 31       	cpi	r23, 0x1C	; 28
    704e:	08 f4       	brcc	.+2      	; 0x7052 <ProcessSprites+0x126>
    7050:	80 e0       	ldi	r24, 0x00	; 0
    7052:	21 e0       	ldi	r18, 0x01	; 1
    7054:	30 91 db 0c 	lds	r19, 0x0CDB
    7058:	73 17       	cp	r23, r19
    705a:	18 f0       	brcs	.+6      	; 0x7062 <ProcessSprites+0x136>
    705c:	20 e0       	ldi	r18, 0x00	; 0
    705e:	88 23       	and	r24, r24
    7060:	51 f1       	breq	.+84     	; 0x70b6 <ProcessSprites+0x18a>
    7062:	60 91 69 0d 	lds	r22, 0x0D69
    7066:	6c 31       	cpi	r22, 0x1C	; 28
    7068:	20 f5       	brcc	.+72     	; 0x70b2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    706a:	88 23       	and	r24, r24
    706c:	31 f0       	breq	.+12     	; 0x707a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    706e:	84 ee       	ldi	r24, 0xE4	; 228
    7070:	87 0f       	add	r24, r23
    7072:	7a 83       	std	Y+2, r23	; 0x02
    7074:	0e 94 06 28 	call	0x500c	; 0x500c <CopyFlashTile>
    7078:	06 c0       	rjmp	.+12     	; 0x7086 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    707a:	22 23       	and	r18, r18
    707c:	29 f0       	breq	.+10     	; 0x7088 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    707e:	87 2f       	mov	r24, r23
    7080:	7a 83       	std	Y+2, r23	; 0x02
    7082:	0e 94 95 28 	call	0x512a	; 0x512a <CopyRamTile>
    7086:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    7088:	80 91 69 0d 	lds	r24, 0x0D69
    708c:	e8 2f       	mov	r30, r24
    708e:	f0 e0       	ldi	r31, 0x00	; 0
    7090:	9f 01       	movw	r18, r30
    7092:	22 0f       	add	r18, r18
    7094:	33 1f       	adc	r19, r19
    7096:	e2 0f       	add	r30, r18
    7098:	f3 1f       	adc	r31, r19
    709a:	e6 5c       	subi	r30, 0xC6	; 198
    709c:	f3 4f       	sbci	r31, 0xF3	; 243
    709e:	11 83       	std	Z+1, r17	; 0x01
    70a0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    70a2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    70a4:	f8 01       	movw	r30, r16
    70a6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    70a8:	21 e0       	ldi	r18, 0x01	; 1
    70aa:	28 0f       	add	r18, r24
    70ac:	20 93 69 0d 	sts	0x0D69, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    70b0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    70b2:	7c 31       	cpi	r23, 0x1C	; 28
    70b4:	38 f4       	brcc	.+14     	; 0x70c4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    70b6:	2b 81       	ldd	r18, Y+3	; 0x03
    70b8:	3c 81       	ldd	r19, Y+4	; 0x04
    70ba:	a5 01       	movw	r20, r10
    70bc:	67 2f       	mov	r22, r23
    70be:	87 2d       	mov	r24, r7
    70c0:	0e 94 22 29 	call	0x5244	; 0x5244 <BlitSprite>
    70c4:	ff ef       	ldi	r31, 0xFF	; 255
    70c6:	af 1a       	sub	r10, r31
    70c8:	bf 0a       	sbc	r11, r31
    70ca:	23 94       	inc	r2
    70cc:	82 2d       	mov	r24, r2
    70ce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    70d0:	99 81       	ldd	r25, Y+1	; 0x01
    70d2:	89 17       	cp	r24, r25
    70d4:	08 f4       	brcc	.+2      	; 0x70d8 <ProcessSprites+0x1ac>
    70d6:	8c cf       	rjmp	.-232    	; 0x6ff0 <ProcessSprites+0xc4>
    70d8:	ef ef       	ldi	r30, 0xFF	; 255
    70da:	ee 1a       	sub	r14, r30
    70dc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    70de:	e3 14       	cp	r14, r3
    70e0:	08 f4       	brcc	.+2      	; 0x70e4 <ProcessSprites+0x1b8>
    70e2:	7f cf       	rjmp	.-258    	; 0x6fe2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    70e4:	73 94       	inc	r7
    70e6:	f4 e0       	ldi	r31, 0x04	; 4
    70e8:	cf 0e       	add	r12, r31
    70ea:	d1 1c       	adc	r13, r1
    70ec:	4e e0       	ldi	r20, 0x0E	; 14
    70ee:	74 12       	cpse	r7, r20
    70f0:	43 cf       	rjmp	.-378    	; 0x6f78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    70f2:	0f 90       	pop	r0
    70f4:	0f 90       	pop	r0
    70f6:	0f 90       	pop	r0
    70f8:	0f 90       	pop	r0
    70fa:	df 91       	pop	r29
    70fc:	cf 91       	pop	r28
    70fe:	1f 91       	pop	r17
    7100:	0f 91       	pop	r16
    7102:	ff 90       	pop	r15
    7104:	ef 90       	pop	r14
    7106:	df 90       	pop	r13
    7108:	cf 90       	pop	r12
    710a:	bf 90       	pop	r11
    710c:	af 90       	pop	r10
    710e:	9f 90       	pop	r9
    7110:	8f 90       	pop	r8
    7112:	7f 90       	pop	r7
    7114:	6f 90       	pop	r6
    7116:	5f 90       	pop	r5
    7118:	4f 90       	pop	r4
    711a:	3f 90       	pop	r3
    711c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    711e:	0c 94 80 37 	jmp	0x6f00	; 0x6f00 <RestoreBackground>

	}
    7122:	0f 90       	pop	r0
    7124:	0f 90       	pop	r0
    7126:	0f 90       	pop	r0
    7128:	0f 90       	pop	r0
    712a:	df 91       	pop	r29
    712c:	cf 91       	pop	r28
    712e:	1f 91       	pop	r17
    7130:	0f 91       	pop	r16
    7132:	ff 90       	pop	r15
    7134:	ef 90       	pop	r14
    7136:	df 90       	pop	r13
    7138:	cf 90       	pop	r12
    713a:	bf 90       	pop	r11
    713c:	af 90       	pop	r10
    713e:	9f 90       	pop	r9
    7140:	8f 90       	pop	r8
    7142:	7f 90       	pop	r7
    7144:	6f 90       	pop	r6
    7146:	5f 90       	pop	r5
    7148:	4f 90       	pop	r4
    714a:	3f 90       	pop	r3
    714c:	2f 90       	pop	r2
    714e:	08 95       	ret

00007150 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    7150:	90 91 9d 0c 	lds	r25, 0x0C9D
    7154:	96 0f       	add	r25, r22
    7156:	90 93 9d 0c 	sts	0x0C9D, r25
		Screen.scrollX+=dx;
    715a:	20 91 9c 0c 	lds	r18, 0x0C9C
    715e:	82 0f       	add	r24, r18
    7160:	80 93 9c 0c 	sts	0x0C9C, r24

		if(Screen.scrollHeight<32){
    7164:	80 91 9e 0c 	lds	r24, 0x0C9E
    7168:	80 32       	cpi	r24, 0x20	; 32
    716a:	b0 f4       	brcc	.+44     	; 0x7198 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    716c:	29 2f       	mov	r18, r25
    716e:	30 e0       	ldi	r19, 0x00	; 0
    7170:	78 e0       	ldi	r23, 0x08	; 8
    7172:	87 9f       	mul	r24, r23
    7174:	a0 01       	movw	r20, r0
    7176:	11 24       	eor	r1, r1
    7178:	24 17       	cp	r18, r20
    717a:	35 07       	cpc	r19, r21
    717c:	6c f0       	brlt	.+26     	; 0x7198 <Scroll+0x48>
				if(dy>=0){	
    717e:	67 fd       	sbrc	r22, 7
    7180:	05 c0       	rjmp	.+10     	; 0x718c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    7182:	28 ef       	ldi	r18, 0xF8	; 248
    7184:	82 9f       	mul	r24, r18
    7186:	90 0d       	add	r25, r0
    7188:	11 24       	eor	r1, r1
    718a:	04 c0       	rjmp	.+8      	; 0x7194 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    718c:	78 e0       	ldi	r23, 0x08	; 8
    718e:	87 9f       	mul	r24, r23
    7190:	90 0d       	add	r25, r0
    7192:	11 24       	eor	r1, r1
    7194:	90 93 9d 0c 	sts	0x0C9D, r25
    7198:	08 95       	ret

0000719a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    719a:	e2 e0       	ldi	r30, 0x02	; 2
    719c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    719e:	80 ee       	ldi	r24, 0xE0	; 224
    71a0:	80 83       	st	Z, r24
    71a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    71a4:	95 e0       	ldi	r25, 0x05	; 5
    71a6:	ea 33       	cpi	r30, 0x3A	; 58
    71a8:	f9 07       	cpc	r31, r25
    71aa:	d1 f7       	brne	.-12     	; 0x71a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    71ac:	80 e2       	ldi	r24, 0x20	; 32
    71ae:	80 93 9e 0c 	sts	0x0C9E, r24
			Screen.overlayHeight=0;
    71b2:	10 92 99 0c 	sts	0x0C99, r1
    71b6:	08 95       	ret

000071b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    71b8:	4f 92       	push	r4
    71ba:	5f 92       	push	r5
    71bc:	6f 92       	push	r6
    71be:	7f 92       	push	r7
    71c0:	8f 92       	push	r8
    71c2:	9f 92       	push	r9
    71c4:	af 92       	push	r10
    71c6:	bf 92       	push	r11
    71c8:	cf 92       	push	r12
    71ca:	df 92       	push	r13
    71cc:	ef 92       	push	r14
    71ce:	ff 92       	push	r15
    71d0:	0f 93       	push	r16
    71d2:	1f 93       	push	r17
    71d4:	cf 93       	push	r28
    71d6:	df 93       	push	r29
    71d8:	68 2e       	mov	r6, r24
    71da:	56 2e       	mov	r5, r22
    71dc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    71de:	fa 01       	movw	r30, r20
    71e0:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    71e2:	31 96       	adiw	r30, 0x01	; 1
    71e4:	84 90       	lpm	r8, Z
    71e6:	c7 2c       	mov	r12, r7
    71e8:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    71ea:	00 e0       	ldi	r16, 0x00	; 0
    71ec:	10 e0       	ldi	r17, 0x00	; 0
    71ee:	91 2c       	mov	r9, r1
    71f0:	98 14       	cp	r9, r8
    71f2:	f1 f0       	breq	.+60     	; 0x7230 <DrawMap+0x78>
    71f4:	c0 e0       	ldi	r28, 0x00	; 0
    71f6:	d0 e0       	ldi	r29, 0x00	; 0
    71f8:	58 01       	movw	r10, r16
    71fa:	f2 e0       	ldi	r31, 0x02	; 2
    71fc:	af 0e       	add	r10, r31
    71fe:	b1 1c       	adc	r11, r1
    7200:	49 2c       	mov	r4, r9
    7202:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    7204:	c7 15       	cp	r28, r7
    7206:	80 f4       	brcc	.+32     	; 0x7228 <DrawMap+0x70>
    7208:	95 01       	movw	r18, r10
    720a:	2c 0f       	add	r18, r28
    720c:	3d 1f       	adc	r19, r29
    720e:	f7 01       	movw	r30, r14
    7210:	e2 0f       	add	r30, r18
    7212:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    7214:	24 91       	lpm	r18, Z
    7216:	42 2f       	mov	r20, r18
    7218:	50 e0       	ldi	r21, 0x00	; 0
    721a:	64 2d       	mov	r22, r4
    721c:	8c 2f       	mov	r24, r28
    721e:	86 0d       	add	r24, r6
    7220:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <SetTile>
    7224:	21 96       	adiw	r28, 0x01	; 1
    7226:	ee cf       	rjmp	.-36     	; 0x7204 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    7228:	93 94       	inc	r9
    722a:	0c 0d       	add	r16, r12
    722c:	1d 1d       	adc	r17, r13
    722e:	e0 cf       	rjmp	.-64     	; 0x71f0 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    7230:	df 91       	pop	r29
    7232:	cf 91       	pop	r28
    7234:	1f 91       	pop	r17
    7236:	0f 91       	pop	r16
    7238:	ff 90       	pop	r15
    723a:	ef 90       	pop	r14
    723c:	df 90       	pop	r13
    723e:	cf 90       	pop	r12
    7240:	bf 90       	pop	r11
    7242:	af 90       	pop	r10
    7244:	9f 90       	pop	r9
    7246:	8f 90       	pop	r8
    7248:	7f 90       	pop	r7
    724a:	6f 90       	pop	r6
    724c:	5f 90       	pop	r5
    724e:	4f 90       	pop	r4
    7250:	08 95       	ret

00007252 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    7252:	df 92       	push	r13
    7254:	ef 92       	push	r14
    7256:	ff 92       	push	r15
    7258:	0f 93       	push	r16
    725a:	1f 93       	push	r17
    725c:	cf 93       	push	r28
    725e:	df 93       	push	r29
    7260:	f6 2e       	mov	r15, r22
    7262:	04 2f       	mov	r16, r20
    7264:	d2 2e       	mov	r13, r18
    7266:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    7268:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    726a:	8a e0       	ldi	r24, 0x0A	; 10
    726c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    726e:	01 11       	cpse	r16, r1
    7270:	02 c0       	rjmp	.+4      	; 0x7276 <PrintByte+0x24>
    7272:	11 11       	cpse	r17, r1
    7274:	07 c0       	rjmp	.+14     	; 0x7284 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    7276:	80 2f       	mov	r24, r16
    7278:	6e 2d       	mov	r22, r14
    727a:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    727e:	40 e1       	ldi	r20, 0x10	; 16
    7280:	49 0f       	add	r20, r25
    7282:	05 c0       	rjmp	.+10     	; 0x728e <PrintByte+0x3c>
		}else{
			if(zeropad){
    7284:	dd 20       	and	r13, r13
    7286:	11 f0       	breq	.+4      	; 0x728c <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    7288:	40 e1       	ldi	r20, 0x10	; 16
    728a:	01 c0       	rjmp	.+2      	; 0x728e <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    728c:	40 e0       	ldi	r20, 0x00	; 0
    728e:	6f 2d       	mov	r22, r15
    7290:	8c 2f       	mov	r24, r28
    7292:	0e 94 55 2b 	call	0x56aa	; 0x56aa <SetFont>
			}
		}
		val=val/10;
    7296:	80 2f       	mov	r24, r16
    7298:	6e 2d       	mov	r22, r14
    729a:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__udivmodqi4>
    729e:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    72a0:	1f 5f       	subi	r17, 0xFF	; 255
    72a2:	21 97       	sbiw	r28, 0x01	; 1
    72a4:	13 30       	cpi	r17, 0x03	; 3
    72a6:	19 f7       	brne	.-58     	; 0x726e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    72a8:	df 91       	pop	r29
    72aa:	cf 91       	pop	r28
    72ac:	1f 91       	pop	r17
    72ae:	0f 91       	pop	r16
    72b0:	ff 90       	pop	r15
    72b2:	ef 90       	pop	r14
    72b4:	df 90       	pop	r13
    72b6:	08 95       	ret

000072b8 <PrintInt>:

//Print an unsigned byte in decimal
void PrintInt(int x,int y, unsigned int val,bool zeropad){
    72b8:	cf 92       	push	r12
    72ba:	df 92       	push	r13
    72bc:	ef 92       	push	r14
    72be:	ff 92       	push	r15
    72c0:	0f 93       	push	r16
    72c2:	1f 93       	push	r17
    72c4:	cf 93       	push	r28
    72c6:	df 93       	push	r29
    72c8:	c8 2e       	mov	r12, r24
    72ca:	d6 2f       	mov	r29, r22
    72cc:	8a 01       	movw	r16, r20
    72ce:	d2 2e       	mov	r13, r18
	unsigned char c,i;

	for(i=0;i<5;i++){
    72d0:	c0 e0       	ldi	r28, 0x00	; 0
		c=val%10;
    72d2:	8a e0       	ldi	r24, 0x0A	; 10
    72d4:	e8 2e       	mov	r14, r24
    72d6:	f1 2c       	mov	r15, r1
    72d8:	3c 2d       	mov	r19, r12
    72da:	3c 1b       	sub	r19, r28
		if(val>0 || i==0){
    72dc:	01 15       	cp	r16, r1
    72de:	11 05       	cpc	r17, r1
    72e0:	11 f4       	brne	.+4      	; 0x72e6 <PrintInt+0x2e>
    72e2:	c1 11       	cpse	r28, r1
    72e4:	07 c0       	rjmp	.+14     	; 0x72f4 <PrintInt+0x3c>
//Print an unsigned byte in decimal
void PrintInt(int x,int y, unsigned int val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<5;i++){
		c=val%10;
    72e6:	c8 01       	movw	r24, r16
    72e8:	b7 01       	movw	r22, r14
    72ea:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <__udivmodhi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    72ee:	40 e1       	ldi	r20, 0x10	; 16
    72f0:	48 0f       	add	r20, r24
    72f2:	05 c0       	rjmp	.+10     	; 0x72fe <PrintInt+0x46>
		}else{
			if(zeropad){
    72f4:	dd 20       	and	r13, r13
    72f6:	11 f0       	breq	.+4      	; 0x72fc <PrintInt+0x44>
				SetFont(x--,y,CHAR_ZERO);
    72f8:	40 e1       	ldi	r20, 0x10	; 16
    72fa:	01 c0       	rjmp	.+2      	; 0x72fe <PrintInt+0x46>
			}else{
				SetFont(x--,y,0);
    72fc:	40 e0       	ldi	r20, 0x00	; 0
    72fe:	6d 2f       	mov	r22, r29
    7300:	83 2f       	mov	r24, r19
    7302:	0e 94 55 2b 	call	0x56aa	; 0x56aa <SetFont>
			}
		}
		val=val/10;
    7306:	c8 01       	movw	r24, r16
    7308:	b7 01       	movw	r22, r14
    730a:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <__udivmodhi4>
    730e:	8b 01       	movw	r16, r22

//Print an unsigned byte in decimal
void PrintInt(int x,int y, unsigned int val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<5;i++){
    7310:	cf 5f       	subi	r28, 0xFF	; 255
    7312:	c5 30       	cpi	r28, 0x05	; 5
    7314:	09 f7       	brne	.-62     	; 0x72d8 <PrintInt+0x20>
			}
		}
		val=val/10;
	}
		
}
    7316:	df 91       	pop	r29
    7318:	cf 91       	pop	r28
    731a:	1f 91       	pop	r17
    731c:	0f 91       	pop	r16
    731e:	ff 90       	pop	r15
    7320:	ef 90       	pop	r14
    7322:	df 90       	pop	r13
    7324:	cf 90       	pop	r12
    7326:	08 95       	ret

00007328 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    7328:	0f 93       	push	r16
    732a:	1f 93       	push	r17
    732c:	cf 93       	push	r28
    732e:	df 93       	push	r29
    7330:	06 2f       	mov	r16, r22
    7332:	c4 2f       	mov	r28, r20
    7334:	d5 2f       	mov	r29, r21
    7336:	18 2f       	mov	r17, r24
    7338:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    733a:	fe 01       	movw	r30, r28
    733c:	44 91       	lpm	r20, Z
		if(c!=0){
    733e:	44 23       	and	r20, r20
    7340:	49 f0       	breq	.+18     	; 0x7354 <Print+0x2c>
			c=((c&127)-32);			
    7342:	4f 77       	andi	r20, 0x7F	; 127
    7344:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    7346:	60 2f       	mov	r22, r16
    7348:	8c 2f       	mov	r24, r28
    734a:	81 0f       	add	r24, r17
    734c:	0e 94 55 2b 	call	0x56aa	; 0x56aa <SetFont>
    7350:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    7352:	f3 cf       	rjmp	.-26     	; 0x733a <Print+0x12>
	
}
    7354:	df 91       	pop	r29
    7356:	cf 91       	pop	r28
    7358:	1f 91       	pop	r17
    735a:	0f 91       	pop	r16
    735c:	08 95       	ret

0000735e <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    735e:	0f 93       	push	r16
    7360:	1f 93       	push	r17
    7362:	cf 93       	push	r28
    7364:	df 93       	push	r29
    7366:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    7368:	c0 e0       	ldi	r28, 0x00	; 0
    736a:	d0 e0       	ldi	r29, 0x00	; 0
    736c:	c0 17       	cp	r28, r16
    736e:	d1 07       	cpc	r29, r17
    7370:	44 f4       	brge	.+16     	; 0x7382 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    7372:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <GetVsyncFlag>
    7376:	88 23       	and	r24, r24
    7378:	e1 f3       	breq	.-8      	; 0x7372 <WaitVsync+0x14>
		ClearVsyncFlag();		
    737a:	0e 94 76 2b 	call	0x56ec	; 0x56ec <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    737e:	21 96       	adiw	r28, 0x01	; 1
    7380:	f5 cf       	rjmp	.-22     	; 0x736c <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    7382:	df 91       	pop	r29
    7384:	cf 91       	pop	r28
    7386:	1f 91       	pop	r17
    7388:	0f 91       	pop	r16
    738a:	08 95       	ret

0000738c <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    738c:	8d e1       	ldi	r24, 0x1D	; 29
    738e:	99 e0       	ldi	r25, 0x09	; 9
    7390:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <InitMusicPlayer>
			SetTileTable(logo_tileset);
    7394:	8d e1       	ldi	r24, 0x1D	; 29
    7396:	91 e0       	ldi	r25, 0x01	; 1
    7398:	0e 94 6d 2b 	call	0x56da	; 0x56da <SetTileTable>
			
			//draw logo
			ClearVram();
    739c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
			WaitVsync(15);		
    73a0:	8f e0       	ldi	r24, 0x0F	; 15
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	0e 94 af 39 	call	0x735e	; 0x735e <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    73a8:	41 e0       	ldi	r20, 0x01	; 1
    73aa:	6f ef       	ldi	r22, 0xFF	; 255
    73ac:	80 e0       	ldi	r24, 0x00	; 0
    73ae:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    73b2:	47 e0       	ldi	r20, 0x07	; 7
    73b4:	51 e0       	ldi	r21, 0x01	; 1
    73b6:	6c e0       	ldi	r22, 0x0C	; 12
    73b8:	8c e0       	ldi	r24, 0x0C	; 12
    73ba:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <DrawMap>
			WaitVsync(3);
    73be:	83 e0       	ldi	r24, 0x03	; 3
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	0e 94 af 39 	call	0x735e	; 0x735e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    73c6:	46 ef       	ldi	r20, 0xF6	; 246
    73c8:	50 e0       	ldi	r21, 0x00	; 0
    73ca:	6c e0       	ldi	r22, 0x0C	; 12
    73cc:	8c e0       	ldi	r24, 0x0C	; 12
    73ce:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <DrawMap>
			WaitVsync(2);
    73d2:	82 e0       	ldi	r24, 0x02	; 2
    73d4:	90 e0       	ldi	r25, 0x00	; 0
    73d6:	0e 94 af 39 	call	0x735e	; 0x735e <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    73da:	47 e0       	ldi	r20, 0x07	; 7
    73dc:	51 e0       	ldi	r21, 0x01	; 1
    73de:	6c e0       	ldi	r22, 0x0C	; 12
    73e0:	8c e0       	ldi	r24, 0x0C	; 12
    73e2:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    73e6:	81 e4       	ldi	r24, 0x41	; 65
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	0e 94 af 39 	call	0x735e	; 0x735e <WaitVsync>
			ClearVram();
    73ee:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
			WaitVsync(20);
    73f2:	84 e1       	ldi	r24, 0x14	; 20
    73f4:	90 e0       	ldi	r25, 0x00	; 0
    73f6:	0c 94 af 39 	jmp	0x735e	; 0x735e <WaitVsync>

000073fa <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    73fa:	80 93 67 0d 	sts	0x0D67, r24
	currFadeFrame=0;
    73fe:	10 92 6b 0d 	sts	0x0D6B, r1
	fadeActive=true;
    7402:	81 e0       	ldi	r24, 0x01	; 1
    7404:	80 93 6a 0d 	sts	0x0D6A, r24
		
	if(blocking){
    7408:	66 23       	and	r22, r22
    740a:	21 f0       	breq	.+8      	; 0x7414 <doFade+0x1a>
		while(fadeActive==true);
    740c:	80 91 6a 0d 	lds	r24, 0x0D6A
    7410:	81 11       	cpse	r24, r1
    7412:	fc cf       	rjmp	.-8      	; 0x740c <doFade+0x12>
    7414:	08 95       	ret

00007416 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    7416:	81 11       	cpse	r24, r1
    7418:	03 c0       	rjmp	.+6      	; 0x7420 <FadeIn+0xa>
		DDRC=0xff;
    741a:	8f ef       	ldi	r24, 0xFF	; 255
    741c:	87 b9       	out	0x07, r24	; 7
		return;
    741e:	08 95       	ret
	}
	fadeStep=1;
    7420:	91 e0       	ldi	r25, 0x01	; 1
    7422:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=1;
    7426:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    742a:	0c 94 fd 39 	jmp	0x73fa	; 0x73fa <doFade>

0000742e <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    742e:	81 11       	cpse	r24, r1
    7430:	02 c0       	rjmp	.+4      	; 0x7436 <FadeOut+0x8>
		DDRC=0;
    7432:	17 b8       	out	0x07, r1	; 7
		return;
    7434:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    7436:	9c e0       	ldi	r25, 0x0C	; 12
    7438:	90 93 6c 0d 	sts	0x0D6C, r25
	fadeDir=-1;
    743c:	9f ef       	ldi	r25, 0xFF	; 255
    743e:	90 93 68 0d 	sts	0x0D68, r25
	doFade(speed,blocking);
    7442:	0c 94 fd 39 	jmp	0x73fa	; 0x73fa <doFade>

00007446 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    7446:	80 91 6a 0d 	lds	r24, 0x0D6A
    744a:	88 23       	and	r24, r24
    744c:	01 f1       	breq	.+64     	; 0x748e <ProcessFading+0x48>
		if(currFadeFrame==0){
    744e:	80 91 6b 0d 	lds	r24, 0x0D6B
    7452:	81 11       	cpse	r24, r1
    7454:	19 c0       	rjmp	.+50     	; 0x7488 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    7456:	80 91 67 0d 	lds	r24, 0x0D67
    745a:	80 93 6b 0d 	sts	0x0D6B, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    745e:	e0 91 6c 0d 	lds	r30, 0x0D6C
    7462:	f0 e0       	ldi	r31, 0x00	; 0
    7464:	e7 51       	subi	r30, 0x17	; 23
    7466:	ff 4f       	sbci	r31, 0xFF	; 255
    7468:	e4 91       	lpm	r30, Z
    746a:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    746c:	90 91 68 0d 	lds	r25, 0x0D68
    7470:	80 91 6c 0d 	lds	r24, 0x0D6C
    7474:	89 0f       	add	r24, r25
    7476:	80 93 6c 0d 	sts	0x0D6C, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    747a:	88 23       	and	r24, r24
    747c:	11 f0       	breq	.+4      	; 0x7482 <ProcessFading+0x3c>
    747e:	8d 30       	cpi	r24, 0x0D	; 13
    7480:	31 f4       	brne	.+12     	; 0x748e <ProcessFading+0x48>
				fadeActive=false;
    7482:	10 92 6a 0d 	sts	0x0D6A, r1
    7486:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    7488:	81 50       	subi	r24, 0x01	; 1
    748a:	80 93 6b 0d 	sts	0x0D6B, r24
    748e:	08 95       	ret

00007490 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    7490:	0e 94 23 3a 	call	0x7446	; 0x7446 <ProcessFading>
		ProcessSprites();
    7494:	0c 94 96 37 	jmp	0x6f2c	; 0x6f2c <ProcessSprites>

00007498 <LBGetNextFrame>:
	u8 reversing;
	char** anims;
} Animation;

char* LBGetNextFrame(Animation* anim)
{
    7498:	fc 01       	movw	r30, r24
	anim->looped = 0;
    749a:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    749c:	93 81       	ldd	r25, Z+3	; 0x03
    749e:	9f 5f       	subi	r25, 0xFF	; 255
    74a0:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    74a2:	42 81       	ldd	r20, Z+2	; 0x02
    74a4:	80 81       	ld	r24, Z
    74a6:	26 81       	ldd	r18, Z+6	; 0x06
    74a8:	37 81       	ldd	r19, Z+7	; 0x07
    74aa:	94 17       	cp	r25, r20
    74ac:	30 f4       	brcc	.+12     	; 0x74ba <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    74ae:	f9 01       	movw	r30, r18
    74b0:	e8 0f       	add	r30, r24
    74b2:	f1 1d       	adc	r31, r1
    74b4:	e8 0f       	add	r30, r24
    74b6:	f1 1d       	adc	r31, r1
    74b8:	12 c0       	rjmp	.+36     	; 0x74de <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    74ba:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	01 96       	adiw	r24, 0x01	; 1
    74c0:	61 81       	ldd	r22, Z+1	; 0x01
    74c2:	70 e0       	ldi	r23, 0x00	; 0
    74c4:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <__divmodhi4>
    74c8:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    74ca:	81 11       	cpse	r24, r1
    74cc:	02 c0       	rjmp	.+4      	; 0x74d2 <LBGetNextFrame+0x3a>
    74ce:	41 e0       	ldi	r20, 0x01	; 1
    74d0:	44 83       	std	Z+4, r20	; 0x04
    74d2:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    74d4:	88 0f       	add	r24, r24
    74d6:	99 1f       	adc	r25, r25
    74d8:	f9 01       	movw	r30, r18
    74da:	e8 0f       	add	r30, r24
    74dc:	f9 1f       	adc	r31, r25
    74de:	80 81       	ld	r24, Z
    74e0:	91 81       	ldd	r25, Z+1	; 0x01
}
    74e2:	08 95       	ret

000074e4 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    74e4:	0f 93       	push	r16
    74e6:	1f 93       	push	r17
    74e8:	cf 93       	push	r28
    74ea:	df 93       	push	r29
    74ec:	1f 92       	push	r1
    74ee:	cd b7       	in	r28, 0x3d	; 61
    74f0:	de b7       	in	r29, 0x3e	; 62
    74f2:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    74f4:	86 2f       	mov	r24, r22
    74f6:	69 83       	std	Y+1, r22	; 0x01
    74f8:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <ReadJoypad>
    74fc:	d8 01       	movw	r26, r16
    74fe:	15 96       	adiw	r26, 0x05	; 5
    7500:	9c 93       	st	X, r25
    7502:	8e 93       	st	-X, r24
    7504:	14 97       	sbiw	r26, 0x04	; 4
    7506:	69 81       	ldd	r22, Y+1	; 0x01
    7508:	e6 2f       	mov	r30, r22
    750a:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    750c:	00 97       	sbiw	r24, 0x00	; 0
    750e:	51 f0       	breq	.+20     	; 0x7524 <LBGetJoyPadState+0x40>
    7510:	df 01       	movw	r26, r30
    7512:	aa 0f       	add	r26, r26
    7514:	bb 1f       	adc	r27, r27
    7516:	a1 52       	subi	r26, 0x21	; 33
    7518:	b3 4f       	sbci	r27, 0xF3	; 243
    751a:	2d 91       	ld	r18, X+
    751c:	3c 91       	ld	r19, X
    751e:	82 17       	cp	r24, r18
    7520:	93 07       	cpc	r25, r19
    7522:	21 f0       	breq	.+8      	; 0x752c <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    7524:	d8 01       	movw	r26, r16
    7526:	16 96       	adiw	r26, 0x06	; 6
    7528:	1c 92       	st	X, r1
    752a:	07 c0       	rjmp	.+14     	; 0x753a <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    752c:	d8 01       	movw	r26, r16
    752e:	16 96       	adiw	r26, 0x06	; 6
    7530:	2c 91       	ld	r18, X
    7532:	16 97       	sbiw	r26, 0x06	; 6
    7534:	2f 5f       	subi	r18, 0xFF	; 255
    7536:	16 96       	adiw	r26, 0x06	; 6
    7538:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    753a:	ee 0f       	add	r30, r30
    753c:	ff 1f       	adc	r31, r31
    753e:	e1 52       	subi	r30, 0x21	; 33
    7540:	f3 4f       	sbci	r31, 0xF3	; 243
    7542:	20 81       	ld	r18, Z
    7544:	31 81       	ldd	r19, Z+1	; 0x01
    7546:	a9 01       	movw	r20, r18
    7548:	40 95       	com	r20
    754a:	50 95       	com	r21
    754c:	48 23       	and	r20, r24
    754e:	59 23       	and	r21, r25
    7550:	d8 01       	movw	r26, r16
    7552:	11 96       	adiw	r26, 0x01	; 1
    7554:	5c 93       	st	X, r21
    7556:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    7558:	ac 01       	movw	r20, r24
    755a:	40 95       	com	r20
    755c:	50 95       	com	r21
    755e:	24 23       	and	r18, r20
    7560:	35 23       	and	r19, r21
    7562:	13 96       	adiw	r26, 0x03	; 3
    7564:	3c 93       	st	X, r19
    7566:	2e 93       	st	-X, r18
    7568:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    756a:	91 83       	std	Z+1, r25	; 0x01
    756c:	80 83       	st	Z, r24
}
    756e:	0f 90       	pop	r0
    7570:	df 91       	pop	r29
    7572:	cf 91       	pop	r28
    7574:	1f 91       	pop	r17
    7576:	0f 91       	pop	r16
    7578:	08 95       	ret

0000757a <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
    757a:	af 92       	push	r10
    757c:	cf 92       	push	r12
    757e:	ef 92       	push	r14
    7580:	ff 92       	push	r15
    7582:	0f 93       	push	r16
    7584:	1f 93       	push	r17
    7586:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    7588:	cb 01       	movw	r24, r22
    758a:	82 0f       	add	r24, r18
    758c:	91 1d       	adc	r25, r1
    758e:	e8 16       	cp	r14, r24
    7590:	f9 06       	cpc	r15, r25
    7592:	88 f4       	brcc	.+34     	; 0x75b6 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    7594:	ea 0c       	add	r14, r10
    7596:	f1 1c       	adc	r15, r1
    7598:	6e 15       	cp	r22, r14
    759a:	7f 05       	cpc	r23, r15
    759c:	60 f4       	brcc	.+24     	; 0x75b6 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    759e:	cf 01       	movw	r24, r30
    75a0:	84 0f       	add	r24, r20
    75a2:	91 1d       	adc	r25, r1
    75a4:	08 17       	cp	r16, r24
    75a6:	19 07       	cpc	r17, r25
    75a8:	30 f4       	brcc	.+12     	; 0x75b6 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    75aa:	0c 0d       	add	r16, r12
    75ac:	11 1d       	adc	r17, r1
    75ae:	81 e0       	ldi	r24, 0x01	; 1
    75b0:	e0 17       	cp	r30, r16
    75b2:	f1 07       	cpc	r31, r17
    75b4:	08 f0       	brcs	.+2      	; 0x75b8 <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u8 width1, u8 height1,
						 u16 x2, u16 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    75b6:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    75b8:	1f 91       	pop	r17
    75ba:	0f 91       	pop	r16
    75bc:	ff 90       	pop	r15
    75be:	ef 90       	pop	r14
    75c0:	cf 90       	pop	r12
    75c2:	af 90       	pop	r10
    75c4:	08 95       	ret

000075c6 <LBWaitSeconds>:

	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
    75c6:	cf 93       	push	r28
    75c8:	df 93       	push	r29
    75ca:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    75cc:	c0 e0       	ldi	r28, 0x00	; 0
    75ce:	cd 17       	cp	r28, r29
    75d0:	31 f0       	breq	.+12     	; 0x75de <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    75d2:	8f ef       	ldi	r24, 0xFF	; 255
    75d4:	9f ef       	ldi	r25, 0xFF	; 255
    75d6:	0e 94 88 2b 	call	0x5710	; 0x5710 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    75da:	cf 5f       	subi	r28, 0xFF	; 255
    75dc:	f8 cf       	rjmp	.-16     	; 0x75ce <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    75de:	df 91       	pop	r29
    75e0:	cf 91       	pop	r28
    75e2:	08 95       	ret

000075e4 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    75e4:	df 92       	push	r13
    75e6:	ef 92       	push	r14
    75e8:	ff 92       	push	r15
    75ea:	0f 93       	push	r16
    75ec:	1f 93       	push	r17
    75ee:	cf 93       	push	r28
    75f0:	df 93       	push	r29
    75f2:	db 01       	movw	r26, r22
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    75f4:	fb 01       	movw	r30, r22
    75f6:	14 91       	lpm	r17, Z
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    75f8:	31 96       	adiw	r30, 0x01	; 1
    75fa:	64 91       	lpm	r22, Z
    75fc:	5f ef       	ldi	r21, 0xFF	; 255
    75fe:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    7600:	24 2f       	mov	r18, r20
    7602:	21 70       	andi	r18, 0x01	; 1
    7604:	40 ff       	sbrs	r20, 0
    7606:	04 c0       	rjmp	.+8      	; 0x7610 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    7608:	95 2f       	mov	r25, r21
		dx=-1;
    760a:	ff 24       	eor	r15, r15
    760c:	fa 94       	dec	r15
    760e:	03 c0       	rjmp	.+6      	; 0x7616 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    7610:	ff 24       	eor	r15, r15
    7612:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    7614:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    7616:	41 ff       	sbrs	r20, 1
    7618:	05 c0       	rjmp	.+10     	; 0x7624 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    761a:	7f ef       	ldi	r23, 0xFF	; 255
    761c:	76 0f       	add	r23, r22
		dy=-1;
    761e:	ee 24       	eor	r14, r14
    7620:	ea 94       	dec	r14
    7622:	03 c0       	rjmp	.+6      	; 0x762a <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    7624:	ee 24       	eor	r14, r14
    7626:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    7628:	70 e0       	ldi	r23, 0x00	; 0
    762a:	21 11       	cpse	r18, r1
    762c:	01 c0       	rjmp	.+2      	; 0x7630 <LBMapSprite+0x4c>
    762e:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    7630:	00 e0       	ldi	r16, 0x00	; 0
    7632:	06 17       	cp	r16, r22
    7634:	09 f1       	breq	.+66     	; 0x7678 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7636:	71 03       	mulsu	r23, r17
    7638:	e0 01       	movw	r28, r0
    763a:	11 24       	eor	r1, r1
    763c:	d8 2e       	mov	r13, r24
    763e:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    7640:	8d 15       	cp	r24, r13
    7642:	b1 f0       	breq	.+44     	; 0x7670 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    7644:	9e 01       	movw	r18, r28
    7646:	29 0f       	add	r18, r25
    7648:	31 1d       	adc	r19, r1
    764a:	97 fd       	sbrc	r25, 7
    764c:	3a 95       	dec	r19
    764e:	2e 5f       	subi	r18, 0xFE	; 254
    7650:	3f 4f       	sbci	r19, 0xFF	; 255
    7652:	fd 01       	movw	r30, r26
    7654:	e2 0f       	add	r30, r18
    7656:	f3 1f       	adc	r31, r19
    7658:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    765a:	34 e0       	ldi	r19, 0x04	; 4
    765c:	83 9f       	mul	r24, r19
    765e:	f0 01       	movw	r30, r0
    7660:	11 24       	eor	r1, r1
    7662:	e9 57       	subi	r30, 0x79	; 121
    7664:	f0 4f       	sbci	r31, 0xF0	; 240
    7666:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    7668:	8f 5f       	subi	r24, 0xFF	; 255
    766a:	43 83       	std	Z+3, r20	; 0x03
    766c:	9f 0d       	add	r25, r15
    766e:	e8 cf       	rjmp	.-48     	; 0x7640 <LBMapSprite+0x5c>
    7670:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    7672:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    7674:	95 2f       	mov	r25, r21
    7676:	dd cf       	rjmp	.-70     	; 0x7632 <LBMapSprite+0x4e>
	}
}
    7678:	df 91       	pop	r29
    767a:	cf 91       	pop	r28
    767c:	1f 91       	pop	r17
    767e:	0f 91       	pop	r16
    7680:	ff 90       	pop	r15
    7682:	ef 90       	pop	r14
    7684:	df 90       	pop	r13
    7686:	08 95       	ret

00007688 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    7688:	df 92       	push	r13
    768a:	ef 92       	push	r14
    768c:	ff 92       	push	r15
    768e:	0f 93       	push	r16
    7690:	1f 93       	push	r17
    7692:	cf 93       	push	r28
    7694:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    7696:	a0 91 9e 0c 	lds	r26, 0x0C9E
    769a:	98 e0       	ldi	r25, 0x08	; 8
    769c:	a9 9f       	mul	r26, r25
    769e:	70 01       	movw	r14, r0
    76a0:	11 24       	eor	r1, r1
    76a2:	50 e0       	ldi	r21, 0x00	; 0
    76a4:	38 ef       	ldi	r19, 0xF8	; 248
    76a6:	a3 9f       	mul	r26, r19
    76a8:	30 2d       	mov	r19, r0
    76aa:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    76ac:	70 e0       	ldi	r23, 0x00	; 0
    76ae:	70 17       	cp	r23, r16
    76b0:	09 f1       	breq	.+66     	; 0x76f4 <LBMoveSprite+0x6c>
    76b2:	d4 2e       	mov	r13, r20
    76b4:	13 2f       	mov	r17, r19
    76b6:	14 0f       	add	r17, r20
    76b8:	b8 2f       	mov	r27, r24
    76ba:	b2 0f       	add	r27, r18
    76bc:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    76be:	8b 17       	cp	r24, r27
    76c0:	a9 f0       	breq	.+42     	; 0x76ec <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    76c2:	c4 e0       	ldi	r28, 0x04	; 4
    76c4:	8c 9f       	mul	r24, r28
    76c6:	f0 01       	movw	r30, r0
    76c8:	11 24       	eor	r1, r1
    76ca:	ef 01       	movw	r28, r30
    76cc:	c9 57       	subi	r28, 0x79	; 121
    76ce:	d0 4f       	sbci	r29, 0xF0	; 240
    76d0:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    76d2:	a0 32       	cpi	r26, 0x20	; 32
    76d4:	28 f4       	brcc	.+10     	; 0x76e0 <LBMoveSprite+0x58>
    76d6:	e4 16       	cp	r14, r20
    76d8:	f5 06       	cpc	r15, r21
    76da:	14 f4       	brge	.+4      	; 0x76e0 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    76dc:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    76de:	03 c0       	rjmp	.+6      	; 0x76e6 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    76e0:	e9 57       	subi	r30, 0x79	; 121
    76e2:	f0 4f       	sbci	r31, 0xF0	; 240
    76e4:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    76e6:	8f 5f       	subi	r24, 0xFF	; 255
    76e8:	98 5f       	subi	r25, 0xF8	; 248
    76ea:	e9 cf       	rjmp	.-46     	; 0x76be <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    76ec:	7f 5f       	subi	r23, 0xFF	; 255
    76ee:	48 5f       	subi	r20, 0xF8	; 248
    76f0:	5f 4f       	sbci	r21, 0xFF	; 255
    76f2:	dd cf       	rjmp	.-70     	; 0x76ae <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    76f4:	df 91       	pop	r29
    76f6:	cf 91       	pop	r28
    76f8:	1f 91       	pop	r17
    76fa:	0f 91       	pop	r16
    76fc:	ff 90       	pop	r15
    76fe:	ef 90       	pop	r14
    7700:	df 90       	pop	r13
    7702:	08 95       	ret

00007704 <LBRotateSprites>:

void LBRotateSprites()
{
    7704:	80 e0       	ldi	r24, 0x00	; 0
    7706:	90 e0       	ldi	r25, 0x00	; 0
    7708:	dc 01       	movw	r26, r24
    770a:	a9 57       	subi	r26, 0x79	; 121
    770c:	b0 4f       	sbci	r27, 0xF0	; 240
    770e:	fc 01       	movw	r30, r24
    7710:	ee 5f       	subi	r30, 0xFE	; 254
    7712:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    7714:	13 96       	adiw	r26, 0x03	; 3
    7716:	2c 91       	ld	r18, X
    7718:	13 97       	sbiw	r26, 0x03	; 3
    771a:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    771c:	12 96       	adiw	r26, 0x02	; 2
    771e:	2c 91       	ld	r18, X
    7720:	12 97       	sbiw	r26, 0x02	; 2
    7722:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    7724:	2c 91       	ld	r18, X
    7726:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    7728:	11 96       	adiw	r26, 0x01	; 1
    772a:	2c 91       	ld	r18, X
    772c:	21 83       	std	Z+1, r18	; 0x01
    772e:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    7730:	8c 32       	cpi	r24, 0x2C	; 44
    7732:	91 05       	cpc	r25, r1
    7734:	49 f7       	brne	.-46     	; 0x7708 <LBRotateSprites+0x4>
    7736:	80 91 01 05 	lds	r24, 0x0501
    773a:	20 e0       	ldi	r18, 0x00	; 0
    773c:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    773e:	94 e0       	ldi	r25, 0x04	; 4
    7740:	89 9f       	mul	r24, r25
    7742:	d0 01       	movw	r26, r0
    7744:	11 24       	eor	r1, r1
    7746:	a9 57       	subi	r26, 0x79	; 121
    7748:	b0 4f       	sbci	r27, 0xF0	; 240
    774a:	13 96       	adiw	r26, 0x03	; 3
    774c:	9c 91       	ld	r25, X
    774e:	13 97       	sbiw	r26, 0x03	; 3
    7750:	f9 01       	movw	r30, r18
    7752:	ee 5f       	subi	r30, 0xFE	; 254
    7754:	fa 4f       	sbci	r31, 0xFA	; 250
    7756:	97 a7       	std	Z+47, r25	; 0x2f
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    7758:	12 96       	adiw	r26, 0x02	; 2
    775a:	9c 91       	ld	r25, X
    775c:	12 97       	sbiw	r26, 0x02	; 2
    775e:	96 a7       	std	Z+46, r25	; 0x2e
		sprites[i].x = extendedSprites[rotate_index].x;
    7760:	9c 91       	ld	r25, X
    7762:	94 a7       	std	Z+44, r25	; 0x2c
		sprites[i].y = extendedSprites[rotate_index].y;
    7764:	11 96       	adiw	r26, 0x01	; 1
    7766:	9c 91       	ld	r25, X
    7768:	95 a7       	std	Z+45, r25	; 0x2d
		rotate_index += 1;
    776a:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    776c:	84 31       	cpi	r24, 0x14	; 20
    776e:	08 f0       	brcs	.+2      	; 0x7772 <LBRotateSprites+0x6e>
    7770:	8b e0       	ldi	r24, 0x0B	; 11
    7772:	2c 5f       	subi	r18, 0xFC	; 252
    7774:	3f 4f       	sbci	r19, 0xFF	; 255
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
		sprites[i].x = extendedSprites[i].x;
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
    7776:	2c 30       	cpi	r18, 0x0C	; 12
    7778:	31 05       	cpc	r19, r1
    777a:	09 f7       	brne	.-62     	; 0x773e <LBRotateSprites+0x3a>
    777c:	80 93 01 05 	sts	0x0501, r24
    7780:	08 95       	ret

00007782 <LBDrawTile>:

/*
 * A more efficient map draw for single tile maps 
 */ 
void LBDrawTile(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
	SetTile(x,y,pgm_read_byte(&(map[2])));					
    7782:	fa 01       	movw	r30, r20
    7784:	32 96       	adiw	r30, 0x02	; 2
    7786:	44 91       	lpm	r20, Z
    7788:	50 e0       	ldi	r21, 0x00	; 0
    778a:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <SetTile>

0000778e <init_game_state>:
char* enemy_shot_anim[1];
char* expl_anim[3];

void init_game_state()
{
	game.lives = LIVES;
    778e:	ef e8       	ldi	r30, 0x8F	; 143
    7790:	fd e0       	ldi	r31, 0x0D	; 13
    7792:	85 e0       	ldi	r24, 0x05	; 5
    7794:	86 87       	std	Z+14, r24	; 0x0e
	game.score = 0;
    7796:	11 86       	std	Z+9, r1	; 0x09
    7798:	10 86       	std	Z+8, r1	; 0x08
	game.time = 0;
    779a:	13 86       	std	Z+11, r1	; 0x0b
    779c:	12 86       	std	Z+10, r1	; 0x0a
    779e:	08 95       	ret

000077a0 <init_enemy_state>:
}

void init_enemy_state()
{
    77a0:	80 e0       	ldi	r24, 0x00	; 0
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	9c 01       	movw	r18, r24
    77a6:	21 57       	subi	r18, 0x71	; 113
    77a8:	32 4f       	sbci	r19, 0xF2	; 242
    77aa:	f9 01       	movw	r30, r18
    77ac:	eb 54       	subi	r30, 0x4B	; 75
    77ae:	ff 4f       	sbci	r31, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    77b0:	10 82       	st	Z, r1
    77b2:	79 96       	adiw	r30, 0x19	; 25
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    77b4:	10 82       	st	Z, r1
    77b6:	8f 5b       	subi	r24, 0xBF	; 191
    77b8:	9f 4f       	sbci	r25, 0xFF	; 255
	game.time = 0;
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    77ba:	85 34       	cpi	r24, 0x45	; 69
    77bc:	21 e0       	ldi	r18, 0x01	; 1
    77be:	92 07       	cpc	r25, r18
    77c0:	89 f7       	brne	.-30     	; 0x77a4 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    77c2:	10 92 a7 0d 	sts	0x0DA7, r1
    77c6:	08 95       	ret

000077c8 <init_player_state>:
}

void init_player_state()
{
	game.player.direction = D_RIGHT;
    77c8:	81 e0       	ldi	r24, 0x01	; 1
    77ca:	80 93 bb 0d 	sts	0x0DBB, r24
	game.player.flags = IDLE;
    77ce:	98 e0       	ldi	r25, 0x08	; 8
    77d0:	90 93 b9 0d 	sts	0x0DB9, r25
	game.player.width = 2;
    77d4:	92 e0       	ldi	r25, 0x02	; 2
    77d6:	90 93 bc 0d 	sts	0x0DBC, r25
	game.player.height = 3;
    77da:	93 e0       	ldi	r25, 0x03	; 3
    77dc:	90 93 bd 0d 	sts	0x0DBD, r25
	game.player.shield = PLAYER_SHIELD;
    77e0:	2a e0       	ldi	r18, 0x0A	; 10
    77e2:	20 93 be 0d 	sts	0x0DBE, r18
	game.player.idle.anim_count = 1;
    77e6:	80 93 0e 0e 	sts	0x0E0E, r24
	game.player.idle.frames_per_anim = 1;
    77ea:	80 93 0f 0e 	sts	0x0E0F, r24
	game.player.idle.anims = idle_anim;
    77ee:	29 ee       	ldi	r18, 0xE9	; 233
    77f0:	3f e0       	ldi	r19, 0x0F	; 15
    77f2:	30 93 14 0e 	sts	0x0E14, r19
    77f6:	20 93 13 0e 	sts	0x0E13, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    77fa:	27 e7       	ldi	r18, 0x77	; 119
    77fc:	32 e3       	ldi	r19, 0x32	; 50
    77fe:	30 93 ea 0f 	sts	0x0FEA, r19
    7802:	20 93 e9 0f 	sts	0x0FE9, r18
	
	game.player.jump.anim_count = 1;
    7806:	80 93 1e 0e 	sts	0x0E1E, r24
	game.player.jump.frames_per_anim = 1;
    780a:	80 93 1f 0e 	sts	0x0E1F, r24
	game.player.jump.anims = jump_anim;
    780e:	2d e6       	ldi	r18, 0x6D	; 109
    7810:	3d e0       	ldi	r19, 0x0D	; 13
    7812:	30 93 24 0e 	sts	0x0E24, r19
    7816:	20 93 23 0e 	sts	0x0E23, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    781a:	2f e4       	ldi	r18, 0x4F	; 79
    781c:	32 e3       	ldi	r19, 0x32	; 50
    781e:	30 93 6e 0d 	sts	0x0D6E, r19
    7822:	20 93 6d 0d 	sts	0x0D6D, r18
	
	game.player.prone.anim_count = 1;
    7826:	80 93 26 0e 	sts	0x0E26, r24
	game.player.prone.frames_per_anim = 1;
    782a:	80 93 27 0e 	sts	0x0E27, r24
	game.player.prone.anims = prone_anim;
    782e:	21 e8       	ldi	r18, 0x81	; 129
    7830:	3f e0       	ldi	r19, 0x0F	; 15
    7832:	30 93 2c 0e 	sts	0x0E2C, r19
    7836:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.prone.anims[0] = (char*) map_hero_prone;
    783a:	2a e4       	ldi	r18, 0x4A	; 74
    783c:	32 e3       	ldi	r19, 0x32	; 50
    783e:	30 93 82 0f 	sts	0x0F82, r19
    7842:	20 93 81 0f 	sts	0x0F81, r18
	
	game.player.expl.anim_count = 3;
    7846:	90 93 2e 0e 	sts	0x0E2E, r25
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    784a:	85 e0       	ldi	r24, 0x05	; 5
    784c:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.expl.anims = expl_anim;
    7850:	83 ee       	ldi	r24, 0xE3	; 227
    7852:	9f e0       	ldi	r25, 0x0F	; 15
    7854:	90 93 34 0e 	sts	0x0E34, r25
    7858:	80 93 33 0e 	sts	0x0E33, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    785c:	85 e8       	ldi	r24, 0x85	; 133
    785e:	92 e3       	ldi	r25, 0x32	; 50
    7860:	90 93 e4 0f 	sts	0x0FE4, r25
    7864:	80 93 e3 0f 	sts	0x0FE3, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    7868:	82 e8       	ldi	r24, 0x82	; 130
    786a:	92 e3       	ldi	r25, 0x32	; 50
    786c:	90 93 e6 0f 	sts	0x0FE6, r25
    7870:	80 93 e5 0f 	sts	0x0FE5, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    7874:	8f e7       	ldi	r24, 0x7F	; 127
    7876:	92 e3       	ldi	r25, 0x32	; 50
    7878:	90 93 e8 0f 	sts	0x0FE8, r25
    787c:	80 93 e7 0f 	sts	0x0FE7, r24
	
	game.player.run.anim_count = 4;
    7880:	84 e0       	ldi	r24, 0x04	; 4
    7882:	80 93 16 0e 	sts	0x0E16, r24
	game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    7886:	8c e0       	ldi	r24, 0x0C	; 12
    7888:	80 93 17 0e 	sts	0x0E17, r24
	game.player.run.anims = run_anim;
    788c:	87 ed       	ldi	r24, 0xD7	; 215
    788e:	9f e0       	ldi	r25, 0x0F	; 15
    7890:	90 93 1c 0e 	sts	0x0E1C, r25
    7894:	80 93 1b 0e 	sts	0x0E1B, r24
	game.player.run.anims[0] = (char*) map_hero_step_0;
    7898:	8f e6       	ldi	r24, 0x6F	; 111
    789a:	92 e3       	ldi	r25, 0x32	; 50
    789c:	90 93 d8 0f 	sts	0x0FD8, r25
    78a0:	80 93 d7 0f 	sts	0x0FD7, r24
	game.player.run.anims[1] = (char*) map_hero_step_1;
    78a4:	87 e6       	ldi	r24, 0x67	; 103
    78a6:	92 e3       	ldi	r25, 0x32	; 50
    78a8:	90 93 da 0f 	sts	0x0FDA, r25
    78ac:	80 93 d9 0f 	sts	0x0FD9, r24
	game.player.run.anims[2] = (char*) map_hero_step_2;
    78b0:	8f e5       	ldi	r24, 0x5F	; 95
    78b2:	92 e3       	ldi	r25, 0x32	; 50
    78b4:	90 93 dc 0f 	sts	0x0FDC, r25
    78b8:	80 93 db 0f 	sts	0x0FDB, r24
	game.player.run.anims[3] = (char*) map_hero_step_3;
    78bc:	87 e5       	ldi	r24, 0x57	; 87
    78be:	92 e3       	ldi	r25, 0x32	; 50
    78c0:	90 93 de 0f 	sts	0x0FDE, r25
    78c4:	80 93 dd 0f 	sts	0x0FDD, r24
    78c8:	e3 ed       	ldi	r30, 0xD3	; 211
    78ca:	fd e0       	ldi	r31, 0x0D	; 13
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    78cc:	81 e0       	ldi	r24, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
		game.player.shot[i].anim.anim_count = 1;
		game.player.shot[i].anim.frames_per_anim = 1;
		game.player.shot[i].anim.anims = shot_anim;
    78ce:	21 ee       	ldi	r18, 0xE1	; 225
    78d0:	3f e0       	ldi	r19, 0x0F	; 15
    78d2:	df 01       	movw	r26, r30
    78d4:	14 97       	sbiw	r26, 0x04	; 4
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		game.player.shot[i].hit_count = 1;
    78d6:	8c 93       	st	X, r24
    78d8:	11 97       	sbiw	r26, 0x01	; 1
		game.player.shot[i].shot_type = BASIC_SHOT;
    78da:	1c 92       	st	X, r1
    78dc:	14 96       	adiw	r26, 0x04	; 4
		game.player.shot[i].anim.anim_count = 1;
    78de:	8c 93       	st	X, r24
		game.player.shot[i].anim.frames_per_anim = 1;
    78e0:	80 83       	st	Z, r24
		game.player.shot[i].anim.anims = shot_anim;
    78e2:	35 83       	std	Z+5, r19	; 0x05
    78e4:	24 83       	std	Z+4, r18	; 0x04
    78e6:	7a 96       	adiw	r30, 0x1a	; 26
	game.player.run.anims[0] = (char*) map_hero_step_0;
	game.player.run.anims[1] = (char*) map_hero_step_1;
	game.player.run.anims[2] = (char*) map_hero_step_2;
	game.player.run.anims[3] = (char*) map_hero_step_3;
	
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    78e8:	9e e0       	ldi	r25, 0x0E	; 14
    78ea:	e1 32       	cpi	r30, 0x21	; 33
    78ec:	f9 07       	cpc	r31, r25
    78ee:	89 f7       	brne	.-30     	; 0x78d2 <init_player_state+0x10a>
    78f0:	83 e3       	ldi	r24, 0x33	; 51
    78f2:	92 e3       	ldi	r25, 0x32	; 50
    78f4:	90 93 e2 0f 	sts	0x0FE2, r25
    78f8:	80 93 e1 0f 	sts	0x0FE1, r24
    78fc:	08 95       	ret

000078fe <init_enemy_spider>:
		game.player.shot[i].anim.anims[0] = (char*) map_hero_shot;
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
    78fe:	af 92       	push	r10
    7900:	bf 92       	push	r11
    7902:	cf 92       	push	r12
    7904:	df 92       	push	r13
    7906:	ef 92       	push	r14
    7908:	ff 92       	push	r15
    790a:	1f 93       	push	r17
    790c:	cf 93       	push	r28
    790e:	df 93       	push	r29
    7910:	5a 01       	movw	r10, r20
	game.enemies[i].active = 1;
    7912:	21 e4       	ldi	r18, 0x41	; 65
    7914:	82 9f       	mul	r24, r18
    7916:	c0 01       	movw	r24, r0
    7918:	11 24       	eor	r1, r1
    791a:	ec 01       	movw	r28, r24
    791c:	c1 57       	subi	r28, 0x71	; 113
    791e:	d2 4f       	sbci	r29, 0xF2	; 242
    7920:	fe 01       	movw	r30, r28
    7922:	eb 54       	subi	r30, 0x4B	; 75
    7924:	ff 4f       	sbci	r31, 0xFF	; 255
    7926:	11 e0       	ldi	r17, 0x01	; 1
    7928:	10 83       	st	Z, r17
	game.enemies[i].direction = D_LEFT;
    792a:	32 96       	adiw	r30, 0x02	; 2
    792c:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    792e:	31 97       	sbiw	r30, 0x01	; 1
    7930:	88 e0       	ldi	r24, 0x08	; 8
    7932:	80 83       	st	Z, r24
	game.enemies[i].width = 1;
    7934:	32 96       	adiw	r30, 0x02	; 2
    7936:	10 83       	st	Z, r17
	game.enemies[i].height = 1;
    7938:	31 96       	adiw	r30, 0x01	; 1
    793a:	10 83       	st	Z, r17
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    793c:	31 96       	adiw	r30, 0x01	; 1
    793e:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    7940:	31 96       	adiw	r30, 0x01	; 1
    7942:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    7944:	31 96       	adiw	r30, 0x01	; 1
    7946:	82 e0       	ldi	r24, 0x02	; 2
    7948:	80 83       	st	Z, r24
	
	game.enemies[i].anim.anim_count = 2;
    794a:	7c 96       	adiw	r30, 0x1c	; 28
    794c:	80 83       	st	Z, r24
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    794e:	31 96       	adiw	r30, 0x01	; 1
    7950:	8a e0       	ldi	r24, 0x0A	; 10
    7952:	80 83       	st	Z, r24
	game.enemies[i].anim.anims = spider_anim;
    7954:	de 01       	movw	r26, r28
    7956:	a3 52       	subi	r26, 0x23	; 35
    7958:	bf 4f       	sbci	r27, 0xFF	; 255
    795a:	e3 e8       	ldi	r30, 0x83	; 131
    795c:	ff e0       	ldi	r31, 0x0F	; 15
    795e:	ed 93       	st	X+, r30
    7960:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    7962:	8a e2       	ldi	r24, 0x2A	; 42
    7964:	92 e3       	ldi	r25, 0x32	; 50
    7966:	91 83       	std	Z+1, r25	; 0x01
    7968:	80 83       	st	Z, r24
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    796a:	87 e2       	ldi	r24, 0x27	; 39
    796c:	92 e3       	ldi	r25, 0x32	; 50
    796e:	93 83       	std	Z+3, r25	; 0x03
    7970:	82 83       	std	Z+2, r24	; 0x02
	game.enemies[i].shared.gravity = 0;
    7972:	fe 01       	movw	r30, r28
    7974:	ec 54       	subi	r30, 0x4C	; 76
    7976:	ff 4f       	sbci	r31, 0xFF	; 255
    7978:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    797a:	32 97       	sbiw	r30, 0x02	; 2
    797c:	11 82       	std	Z+1, r1	; 0x01
    797e:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    7980:	3c 97       	sbiw	r30, 0x0c	; 12
    7982:	10 82       	st	Z, r1
    7984:	11 82       	std	Z+1, r1	; 0x01
    7986:	12 82       	std	Z+2, r1	; 0x02
    7988:	13 82       	std	Z+3, r1	; 0x03
	game.enemies[i].shared.x = x;
    798a:	80 e0       	ldi	r24, 0x00	; 0
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    7992:	6b 01       	movw	r12, r22
    7994:	7c 01       	movw	r14, r24
    7996:	fe 01       	movw	r30, r28
    7998:	e6 55       	subi	r30, 0x56	; 86
    799a:	ff 4f       	sbci	r31, 0xFF	; 255
    799c:	60 83       	st	Z, r22
    799e:	71 83       	std	Z+1, r23	; 0x01
    79a0:	82 83       	std	Z+2, r24	; 0x02
    79a2:	93 83       	std	Z+3, r25	; 0x03
	game.enemies[i].shared.y = y;
    79a4:	b5 01       	movw	r22, r10
    79a6:	80 e0       	ldi	r24, 0x00	; 0
    79a8:	90 e0       	ldi	r25, 0x00	; 0
    79aa:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    79ae:	fe 01       	movw	r30, r28
    79b0:	e2 55       	subi	r30, 0x52	; 82
    79b2:	ff 4f       	sbci	r31, 0xFF	; 255
    79b4:	60 83       	st	Z, r22
    79b6:	71 83       	std	Z+1, r23	; 0x01
    79b8:	82 83       	std	Z+2, r24	; 0x02
    79ba:	93 83       	std	Z+3, r25	; 0x03
	
	game.enemies[i].expl.anim_count = 3;
    79bc:	f2 96       	adiw	r30, 0x32	; 50
    79be:	23 e0       	ldi	r18, 0x03	; 3
    79c0:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    79c2:	31 96       	adiw	r30, 0x01	; 1
    79c4:	25 e0       	ldi	r18, 0x05	; 5
    79c6:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    79c8:	de 01       	movw	r26, r28
    79ca:	ab 51       	subi	r26, 0x1B	; 27
    79cc:	bf 4f       	sbci	r27, 0xFF	; 255
    79ce:	e3 ee       	ldi	r30, 0xE3	; 227
    79d0:	ff e0       	ldi	r31, 0x0F	; 15
    79d2:	11 96       	adiw	r26, 0x01	; 1
    79d4:	fc 93       	st	X, r31
    79d6:	ee 93       	st	-X, r30
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    79d8:	25 e8       	ldi	r18, 0x85	; 133
    79da:	32 e3       	ldi	r19, 0x32	; 50
    79dc:	31 83       	std	Z+1, r19	; 0x01
    79de:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    79e0:	22 e8       	ldi	r18, 0x82	; 130
    79e2:	32 e3       	ldi	r19, 0x32	; 50
    79e4:	33 83       	std	Z+3, r19	; 0x03
    79e6:	22 83       	std	Z+2, r18	; 0x02
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    79e8:	2f e7       	ldi	r18, 0x7F	; 127
    79ea:	32 e3       	ldi	r19, 0x32	; 50
    79ec:	35 83       	std	Z+5, r19	; 0x05
    79ee:	24 83       	std	Z+4, r18	; 0x04
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    79f0:	fe 01       	movw	r30, r28
    79f2:	e3 53       	subi	r30, 0x33	; 51
    79f4:	ff 4f       	sbci	r31, 0xFF	; 255
    79f6:	10 83       	st	Z, r17
		game.enemies[i].shot[j].active = 0;
    79f8:	31 96       	adiw	r30, 0x01	; 1
    79fa:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = BASIC_ENEMY_SHOT;
    79fc:	32 97       	sbiw	r30, 0x02	; 2
    79fe:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    7a00:	34 96       	adiw	r30, 0x04	; 4
    7a02:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    7a04:	31 96       	adiw	r30, 0x01	; 1
    7a06:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    7a08:	50 97       	sbiw	r26, 0x10	; 16
    7a0a:	ef ed       	ldi	r30, 0xDF	; 223
    7a0c:	ff e0       	ldi	r31, 0x0F	; 15
    7a0e:	ed 93       	st	X+, r30
    7a10:	fc 93       	st	X, r31
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    7a12:	20 e3       	ldi	r18, 0x30	; 48
    7a14:	32 e3       	ldi	r19, 0x32	; 50
    7a16:	31 83       	std	Z+1, r19	; 0x01
    7a18:	20 83       	st	Z, r18
		game.enemies[i].shot[j].shared.vx = 0;
    7a1a:	fe 01       	movw	r30, r28
    7a1c:	e7 53       	subi	r30, 0x37	; 55
    7a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    7a20:	11 82       	std	Z+1, r1	; 0x01
    7a22:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.vy = 0;
    7a24:	3c 97       	sbiw	r30, 0x0c	; 12
    7a26:	10 82       	st	Z, r1
    7a28:	11 82       	std	Z+1, r1	; 0x01
    7a2a:	12 82       	std	Z+2, r1	; 0x02
    7a2c:	13 82       	std	Z+3, r1	; 0x03
		game.enemies[i].shot[j].shared.x = x;
    7a2e:	34 96       	adiw	r30, 0x04	; 4
    7a30:	c0 82       	st	Z, r12
    7a32:	d1 82       	std	Z+1, r13	; 0x01
    7a34:	e2 82       	std	Z+2, r14	; 0x02
    7a36:	f3 82       	std	Z+3, r15	; 0x03
		game.enemies[i].shot[j].shared.y = y;
    7a38:	cb 53       	subi	r28, 0x3B	; 59
    7a3a:	df 4f       	sbci	r29, 0xFF	; 255
    7a3c:	68 83       	st	Y, r22
    7a3e:	79 83       	std	Y+1, r23	; 0x01
    7a40:	8a 83       	std	Y+2, r24	; 0x02
    7a42:	9b 83       	std	Y+3, r25	; 0x03
	}
}
    7a44:	df 91       	pop	r29
    7a46:	cf 91       	pop	r28
    7a48:	1f 91       	pop	r17
    7a4a:	ff 90       	pop	r15
    7a4c:	ef 90       	pop	r14
    7a4e:	df 90       	pop	r13
    7a50:	cf 90       	pop	r12
    7a52:	bf 90       	pop	r11
    7a54:	af 90       	pop	r10
    7a56:	08 95       	ret

00007a58 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    7a58:	61 e0       	ldi	r22, 0x01	; 1
    7a5a:	83 e0       	ldi	r24, 0x03	; 3
    7a5c:	0e 94 17 3a 	call	0x742e	; 0x742e <FadeOut>
	ClearVram();
    7a60:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    7a64:	60 e0       	ldi	r22, 0x00	; 0
    7a66:	83 e0       	ldi	r24, 0x03	; 3
    7a68:	0c 94 0b 3a 	jmp	0x7416	; 0x7416 <FadeIn>

00007a6c <render_level_tile>:
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
    7a6c:	0f 93       	push	r16
    7a6e:	1f 93       	push	r17
    7a70:	e8 2f       	mov	r30, r24
    7a72:	86 2f       	mov	r24, r22
    7a74:	64 2f       	mov	r22, r20
	switch (level_tile)
    7a76:	0e 2f       	mov	r16, r30
    7a78:	10 e0       	ldi	r17, 0x00	; 0
    7a7a:	07 30       	cpi	r16, 0x07	; 7
    7a7c:	11 05       	cpc	r17, r1
    7a7e:	e8 f4       	brcc	.+58     	; 0x7aba <render_level_tile+0x4e>
    7a80:	f8 01       	movw	r30, r16
    7a82:	e8 5c       	subi	r30, 0xC8	; 200
    7a84:	ff 4f       	sbci	r31, 0xFF	; 255
    7a86:	0c 94 d6 4e 	jmp	0x9dac	; 0x9dac <__tablejump2__>
	{
		case L_ICE_SKY : LBDrawTile(x, y, map_ice_sky); break;
    7a8a:	4b e6       	ldi	r20, 0x6B	; 107
    7a8c:	5b e4       	ldi	r21, 0x4B	; 75
    7a8e:	11 c0       	rjmp	.+34     	; 0x7ab2 <render_level_tile+0x46>
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
    7a90:	47 e7       	ldi	r20, 0x77	; 119
    7a92:	5b e4       	ldi	r21, 0x4B	; 75
    7a94:	0e c0       	rjmp	.+28     	; 0x7ab2 <render_level_tile+0x46>
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
    7a96:	4a e7       	ldi	r20, 0x7A	; 122
    7a98:	5b e4       	ldi	r21, 0x4B	; 75
    7a9a:	0b c0       	rjmp	.+22     	; 0x7ab2 <render_level_tile+0x46>
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
    7a9c:	44 e7       	ldi	r20, 0x74	; 116
    7a9e:	5b e4       	ldi	r21, 0x4B	; 75
    7aa0:	08 c0       	rjmp	.+16     	; 0x7ab2 <render_level_tile+0x46>
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
    7aa2:	41 e7       	ldi	r20, 0x71	; 113
    7aa4:	5b e4       	ldi	r21, 0x4B	; 75
    7aa6:	05 c0       	rjmp	.+10     	; 0x7ab2 <render_level_tile+0x46>
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
    7aa8:	48 e6       	ldi	r20, 0x68	; 104
    7aaa:	5b e4       	ldi	r21, 0x4B	; 75
    7aac:	02 c0       	rjmp	.+4      	; 0x7ab2 <render_level_tile+0x46>
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    7aae:	4e e6       	ldi	r20, 0x6E	; 110
    7ab0:	5b e4       	ldi	r21, 0x4B	; 75
	}
}
    7ab2:	1f 91       	pop	r17
    7ab4:	0f 91       	pop	r16
		case L_ICE_MIDDLE : LBDrawTile(x, y, map_ice_middle); break;
		case L_ICE_LEFT : LBDrawTile(x, y, map_ice_left); break;
		case L_ICE_RIGHT : LBDrawTile(x, y, map_ice_right); break;
		case L_ICE_BOTTOM : LBDrawTile(x, y, map_ice_bottom); break;
		case L_ICE_FAR : LBDrawTile(x, y, map_ice_far); break;
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
    7ab6:	0c 94 c1 3b 	jmp	0x7782	; 0x7782 <LBDrawTile>
	}
}
    7aba:	1f 91       	pop	r17
    7abc:	0f 91       	pop	r16
    7abe:	08 95       	ret

00007ac0 <clear_overlay>:

void clear_overlay(u8 overlayHeight)
{
    7ac0:	1f 93       	push	r17
    7ac2:	cf 93       	push	r28
    7ac4:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7ac6:	d0 e0       	ldi	r29, 0x00	; 0
    7ac8:	10 e2       	ldi	r17, 0x20	; 32
    7aca:	18 0f       	add	r17, r24
		case L_ICE_HORIZON : LBDrawTile(x, y, map_ice_horizon); break;
	}
}

void clear_overlay(u8 overlayHeight)
{
    7acc:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    7ace:	c1 17       	cp	r28, r17
    7ad0:	41 f0       	breq	.+16     	; 0x7ae2 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    7ad2:	40 e0       	ldi	r20, 0x00	; 0
    7ad4:	50 e0       	ldi	r21, 0x00	; 0
    7ad6:	6c 2f       	mov	r22, r28
    7ad8:	8d 2f       	mov	r24, r29
    7ada:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <SetTile>
    7ade:	cf 5f       	subi	r28, 0xFF	; 255
    7ae0:	f6 cf       	rjmp	.-20     	; 0x7ace <clear_overlay+0xe>
	}
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    7ae2:	df 5f       	subi	r29, 0xFF	; 255
    7ae4:	dc 31       	cpi	r29, 0x1C	; 28
    7ae6:	91 f7       	brne	.-28     	; 0x7acc <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    7ae8:	df 91       	pop	r29
    7aea:	cf 91       	pop	r28
    7aec:	1f 91       	pop	r17
    7aee:	08 95       	ret

00007af0 <read_level_byte>:
#else
u8 read_level_byte(u16 index)
{
	// C Code
	
	u16 counter = index / 128 * 16;
    7af0:	fc 01       	movw	r30, r24
    7af2:	ee 0f       	add	r30, r30
    7af4:	ef 2f       	mov	r30, r31
    7af6:	ee 1f       	adc	r30, r30
    7af8:	ff 0b       	sbc	r31, r31
    7afa:	f1 95       	neg	r31
    7afc:	34 e0       	ldi	r19, 0x04	; 4
    7afe:	ee 0f       	add	r30, r30
    7b00:	ff 1f       	adc	r31, r31
    7b02:	3a 95       	dec	r19
    7b04:	e1 f7       	brne	.-8      	; 0x7afe <read_level_byte+0xe>
	u16 cumulative_rlength = counter * 8;
    7b06:	af 01       	movw	r20, r30
    7b08:	63 e0       	ldi	r22, 0x03	; 3
    7b0a:	44 0f       	add	r20, r20
    7b0c:	55 1f       	adc	r21, r21
    7b0e:	6a 95       	dec	r22
    7b10:	e1 f7       	brne	.-8      	; 0x7b0a <read_level_byte+0x1a>
		counter += 2;
	}
	return 0;*/
	
	// ASM Code
	index += 1;
    7b12:	01 96       	adiw	r24, 0x01	; 1
	counter += (u16) &level_data;
    7b14:	e3 5a       	subi	r30, 0xA3	; 163
    7b16:	f4 4e       	sbci	r31, 0xE4	; 228
	  [cntr] "+z" (counter),
	  [crln] "+r" (cumulative_rlength),
	  [rln]  "+r" (rlength),
	  [vl]   "=&r" (value));
	return value;
}
    7b18:	9c 01       	movw	r18, r24
    7b1a:	90 e0       	ldi	r25, 0x00	; 0

00007b1c <while1>:
    7b1c:	95 91       	lpm	r25, Z+
    7b1e:	85 91       	lpm	r24, Z+
    7b20:	49 0f       	add	r20, r25
    7b22:	51 1d       	adc	r21, r1
    7b24:	42 17       	cp	r20, r18
    7b26:	53 07       	cpc	r21, r19
    7b28:	08 f4       	brcc	.+2      	; 0x7b2c <while1done>
    7b2a:	f8 cf       	rjmp	.-16     	; 0x7b1c <while1>

00007b2c <while1done>:
    7b2c:	08 95       	ret

00007b2e <get_camera_x>:

#endif

u8 get_camera_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 0);
    7b2e:	25 e0       	ldi	r18, 0x05	; 5
    7b30:	3e ef       	ldi	r19, 0xFE	; 254
    7b32:	48 2f       	mov	r20, r24
    7b34:	42 9f       	mul	r20, r18
    7b36:	c0 01       	movw	r24, r0
    7b38:	43 9f       	mul	r20, r19
    7b3a:	90 0d       	add	r25, r0
    7b3c:	11 24       	eor	r1, r1
    7b3e:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <read_level_byte>

00007b42 <get_camera_y>:
}

u8 get_camera_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 1);
    7b42:	25 e0       	ldi	r18, 0x05	; 5
    7b44:	3e ef       	ldi	r19, 0xFE	; 254
    7b46:	48 2f       	mov	r20, r24
    7b48:	42 9f       	mul	r20, r18
    7b4a:	c0 01       	movw	r24, r0
    7b4c:	43 9f       	mul	r20, r19
    7b4e:	90 0d       	add	r25, r0
    7b50:	11 24       	eor	r1, r1
    7b52:	01 96       	adiw	r24, 0x01	; 1
    7b54:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <read_level_byte>

00007b58 <get_hero_spawn_x>:
}

u8 get_hero_spawn_x(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 2);
    7b58:	25 e0       	ldi	r18, 0x05	; 5
    7b5a:	3e ef       	ldi	r19, 0xFE	; 254
    7b5c:	48 2f       	mov	r20, r24
    7b5e:	42 9f       	mul	r20, r18
    7b60:	c0 01       	movw	r24, r0
    7b62:	43 9f       	mul	r20, r19
    7b64:	90 0d       	add	r25, r0
    7b66:	11 24       	eor	r1, r1
    7b68:	02 96       	adiw	r24, 0x02	; 2
    7b6a:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <read_level_byte>

00007b6e <get_hero_spawn_y>:
}

u8 get_hero_spawn_y(u8 level_index)
{
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 3);
    7b6e:	25 e0       	ldi	r18, 0x05	; 5
    7b70:	3e ef       	ldi	r19, 0xFE	; 254
    7b72:	48 2f       	mov	r20, r24
    7b74:	42 9f       	mul	r20, r18
    7b76:	c0 01       	movw	r24, r0
    7b78:	43 9f       	mul	r20, r19
    7b7a:	90 0d       	add	r25, r0
    7b7c:	11 24       	eor	r1, r1
    7b7e:	03 96       	adiw	r24, 0x03	; 3
    7b80:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <read_level_byte>

00007b84 <get_level_tile>:
}

u8 get_level_tile(u8 level_index, u16 x, u16 y)
{
    7b84:	6c 5f       	subi	r22, 0xFC	; 252
    7b86:	7f 4f       	sbci	r23, 0xFF	; 255
	return read_level_byte(level_index*LEVEL_WIDTH*LEVEL_HEIGHT + level_index*4 + 4 + (y*LEVEL_WIDTH+x));
    7b88:	9f ef       	ldi	r25, 0xFF	; 255
    7b8a:	94 9f       	mul	r25, r20
    7b8c:	90 01       	movw	r18, r0
    7b8e:	95 9f       	mul	r25, r21
    7b90:	30 0d       	add	r19, r0
    7b92:	11 24       	eor	r1, r1
    7b94:	62 0f       	add	r22, r18
    7b96:	73 1f       	adc	r23, r19
    7b98:	25 e0       	ldi	r18, 0x05	; 5
    7b9a:	3e ef       	ldi	r19, 0xFE	; 254
    7b9c:	48 2f       	mov	r20, r24
    7b9e:	42 9f       	mul	r20, r18
    7ba0:	c0 01       	movw	r24, r0
    7ba2:	43 9f       	mul	r20, r19
    7ba4:	90 0d       	add	r25, r0
    7ba6:	11 24       	eor	r1, r1
    7ba8:	86 0f       	add	r24, r22
    7baa:	97 1f       	adc	r25, r23
    7bac:	0c 94 78 3d 	jmp	0x7af0	; 0x7af0 <read_level_byte>

00007bb0 <render_camera_view>:
}

void render_camera_view()
{
    7bb0:	7f 92       	push	r7
    7bb2:	8f 92       	push	r8
    7bb4:	9f 92       	push	r9
    7bb6:	af 92       	push	r10
    7bb8:	bf 92       	push	r11
    7bba:	cf 92       	push	r12
    7bbc:	df 92       	push	r13
    7bbe:	ef 92       	push	r14
    7bc0:	ff 92       	push	r15
    7bc2:	0f 93       	push	r16
    7bc4:	1f 93       	push	r17
    7bc6:	cf 93       	push	r28
    7bc8:	df 93       	push	r29
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
    7bca:	c0 91 93 0d 	lds	r28, 0x0D93
    7bce:	d0 91 94 0d 	lds	r29, 0x0D94
    7bd2:	83 e0       	ldi	r24, 0x03	; 3
    7bd4:	d6 95       	lsr	r29
    7bd6:	c7 95       	ror	r28
    7bd8:	8a 95       	dec	r24
    7bda:	e1 f7       	brne	.-8      	; 0x7bd4 <render_camera_view+0x24>
	u16 camera_y_tile = game.camera_y/8;
    7bdc:	c0 90 95 0d 	lds	r12, 0x0D95
    7be0:	d0 90 96 0d 	lds	r13, 0x0D96
    7be4:	93 e0       	ldi	r25, 0x03	; 3
    7be6:	d6 94       	lsr	r13
    7be8:	c7 94       	ror	r12
    7bea:	9a 95       	dec	r25
    7bec:	e1 f7       	brne	.-8      	; 0x7be6 <render_camera_view+0x36>
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7bee:	8e 01       	movw	r16, r28
    7bf0:	5e 01       	movw	r10, r28
    7bf2:	8c e1       	ldi	r24, 0x1C	; 28
    7bf4:	a8 0e       	add	r10, r24
    7bf6:	b1 1c       	adc	r11, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7bf8:	46 01       	movw	r8, r12
    7bfa:	8a e1       	ldi	r24, 0x1A	; 26
    7bfc:	88 0e       	add	r8, r24
    7bfe:	91 1c       	adc	r9, r1
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7c00:	a0 16       	cp	r10, r16
    7c02:	b1 06       	cpc	r11, r17
    7c04:	c0 f0       	brcs	.+48     	; 0x7c36 <render_camera_view+0x86>
    7c06:	76 01       	movw	r14, r12
    7c08:	70 2e       	mov	r7, r16
    7c0a:	7c 1a       	sub	r7, r28
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7c0c:	8e 14       	cp	r8, r14
    7c0e:	9f 04       	cpc	r9, r15
    7c10:	78 f0       	brcs	.+30     	; 0x7c30 <render_camera_view+0x80>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    7c12:	a7 01       	movw	r20, r14
    7c14:	b8 01       	movw	r22, r16
    7c16:	80 91 9f 0d 	lds	r24, 0x0D9F
    7c1a:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    7c1e:	4e 2d       	mov	r20, r14
    7c20:	4c 19       	sub	r20, r12
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
    7c22:	67 2d       	mov	r22, r7
    7c24:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <render_level_tile>
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    7c28:	8f ef       	ldi	r24, 0xFF	; 255
    7c2a:	e8 1a       	sub	r14, r24
    7c2c:	f8 0a       	sbc	r15, r24
    7c2e:	ee cf       	rjmp	.-36     	; 0x7c0c <render_camera_view+0x5c>
{
	u8 level_tile;
	u16 camara_x_tile = game.camera_x/8;
	u16 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    7c30:	0f 5f       	subi	r16, 0xFF	; 255
    7c32:	1f 4f       	sbci	r17, 0xFF	; 255
    7c34:	e5 cf       	rjmp	.-54     	; 0x7c00 <render_camera_view+0x50>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, x - camara_x_tile, y - camera_y_tile);
		}
	}
}
    7c36:	df 91       	pop	r29
    7c38:	cf 91       	pop	r28
    7c3a:	1f 91       	pop	r17
    7c3c:	0f 91       	pop	r16
    7c3e:	ff 90       	pop	r15
    7c40:	ef 90       	pop	r14
    7c42:	df 90       	pop	r13
    7c44:	cf 90       	pop	r12
    7c46:	bf 90       	pop	r11
    7c48:	af 90       	pop	r10
    7c4a:	9f 90       	pop	r9
    7c4c:	8f 90       	pop	r8
    7c4e:	7f 90       	pop	r7
    7c50:	08 95       	ret

00007c52 <spawn_enemy>:

void spawn_enemy(u16 x, u16 y)
{
    7c52:	9c 01       	movw	r18, r24
    7c54:	e4 e4       	ldi	r30, 0x44	; 68
    7c56:	fe e0       	ldi	r31, 0x0E	; 14
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    7c58:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (!game.enemies[i].active)
    7c5a:	80 81       	ld	r24, Z
    7c5c:	81 11       	cpse	r24, r1
    7c5e:	0b c0       	rjmp	.+22     	; 0x7c76 <spawn_enemy+0x24>
    7c60:	ab 01       	movw	r20, r22
    7c62:	b9 01       	movw	r22, r18
		{
			init_enemy_spider(i, x, y);
    7c64:	89 2f       	mov	r24, r25
    7c66:	0e 94 7f 3c 	call	0x78fe	; 0x78fe <init_enemy_spider>
			game.active_enemies++;
    7c6a:	80 91 a7 0d 	lds	r24, 0x0DA7
    7c6e:	8f 5f       	subi	r24, 0xFF	; 255
    7c70:	80 93 a7 0d 	sts	0x0DA7, r24
			return;
    7c74:	08 95       	ret
	}
}

void spawn_enemy(u16 x, u16 y)
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    7c76:	9f 5f       	subi	r25, 0xFF	; 255
    7c78:	ef 5b       	subi	r30, 0xBF	; 191
    7c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    7c7c:	95 30       	cpi	r25, 0x05	; 5
    7c7e:	69 f7       	brne	.-38     	; 0x7c5a <spawn_enemy+0x8>
    7c80:	08 95       	ret

00007c82 <solid_tile>:
	}
}

char solid_tile(u8 level_tile)
{
	switch (level_tile)
    7c82:	81 50       	subi	r24, 0x01	; 1
    7c84:	84 30       	cpi	r24, 0x04	; 4
    7c86:	10 f0       	brcs	.+4      	; 0x7c8c <solid_tile+0xa>
		case L_ICE_MIDDLE : return 1;
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
    7c88:	80 e0       	ldi	r24, 0x00	; 0
    7c8a:	08 95       	ret

char solid_tile(u8 level_tile)
{
	switch (level_tile)
	{
		case L_ICE_MIDDLE : return 1;
    7c8c:	81 e0       	ldi	r24, 0x01	; 1
		case L_ICE_LEFT : return 1;
		case L_ICE_RIGHT : return 1;
		case L_ICE_BOTTOM : return 1;
	}
	return 0;
}
    7c8e:	08 95       	ret

00007c90 <append_tile_column>:

void append_tile_column()
{
    7c90:	ef 92       	push	r14
    7c92:	ff 92       	push	r15
    7c94:	0f 93       	push	r16
    7c96:	1f 93       	push	r17
    7c98:	cf 93       	push	r28
    7c9a:	df 93       	push	r29
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    7c9c:	80 91 9b 0d 	lds	r24, 0x0D9B
    7ca0:	90 91 9c 0d 	lds	r25, 0x0D9C
    7ca4:	01 96       	adiw	r24, 0x01	; 1
    7ca6:	90 93 9c 0d 	sts	0x0D9C, r25
    7caa:	80 93 9b 0d 	sts	0x0D9B, r24
    7cae:	c0 e0       	ldi	r28, 0x00	; 0
    7cb0:	d0 e0       	ldi	r29, 0x00	; 0
	return 0;
}

void append_tile_column()
{
	u8 enemy_spawned = 0;
    7cb2:	f1 2c       	mov	r15, r1

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7cb4:	0e e1       	ldi	r16, 0x1E	; 30
    7cb6:	10 e0       	ldi	r17, 0x00	; 0
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    7cb8:	40 91 95 0d 	lds	r20, 0x0D95
    7cbc:	50 91 96 0d 	lds	r21, 0x0D96
    7cc0:	63 e0       	ldi	r22, 0x03	; 3
    7cc2:	56 95       	lsr	r21
    7cc4:	47 95       	ror	r20
    7cc6:	6a 95       	dec	r22
    7cc8:	e1 f7       	brne	.-8      	; 0x7cc2 <append_tile_column+0x32>
    7cca:	4c 0f       	add	r20, r28
    7ccc:	5d 1f       	adc	r21, r29
    7cce:	60 91 8f 0d 	lds	r22, 0x0D8F
    7cd2:	70 91 90 0d 	lds	r23, 0x0D90
    7cd6:	80 91 9f 0d 	lds	r24, 0x0D9F
    7cda:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    7cde:	e8 2e       	mov	r14, r24
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    7ce0:	90 91 9d 0c 	lds	r25, 0x0C9D
    7ce4:	96 95       	lsr	r25
    7ce6:	96 95       	lsr	r25
    7ce8:	96 95       	lsr	r25
    7cea:	9e 01       	movw	r18, r28
    7cec:	29 0f       	add	r18, r25
    7cee:	31 1d       	adc	r19, r1
    7cf0:	c9 01       	movw	r24, r18
    7cf2:	b8 01       	movw	r22, r16
    7cf4:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <__divmodhi4>
    7cf8:	48 2f       	mov	r20, r24
    7cfa:	60 91 a5 0d 	lds	r22, 0x0DA5
    7cfe:	8e 2d       	mov	r24, r14
    7d00:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <render_level_tile>
		if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES && !enemy_spawned && solid_tile(level_tile))
    7d04:	20 91 a8 0d 	lds	r18, 0x0DA8
    7d08:	30 e0       	ldi	r19, 0x00	; 0
    7d0a:	80 91 9b 0d 	lds	r24, 0x0D9B
    7d0e:	90 91 9c 0d 	lds	r25, 0x0D9C
    7d12:	b9 01       	movw	r22, r18
    7d14:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <__udivmodhi4>
    7d18:	21 50       	subi	r18, 0x01	; 1
    7d1a:	31 09       	sbc	r19, r1
    7d1c:	82 17       	cp	r24, r18
    7d1e:	93 07       	cpc	r25, r19
    7d20:	49 f5       	brne	.+82     	; 0x7d74 <append_tile_column+0xe4>
    7d22:	80 91 a7 0d 	lds	r24, 0x0DA7
    7d26:	85 30       	cpi	r24, 0x05	; 5
    7d28:	28 f5       	brcc	.+74     	; 0x7d74 <append_tile_column+0xe4>
    7d2a:	f1 10       	cpse	r15, r1
    7d2c:	21 c0       	rjmp	.+66     	; 0x7d70 <append_tile_column+0xe0>
    7d2e:	8e 2d       	mov	r24, r14
    7d30:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    7d34:	88 23       	and	r24, r24
    7d36:	f1 f0       	breq	.+60     	; 0x7d74 <append_tile_column+0xe4>
		{
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
    7d38:	60 91 95 0d 	lds	r22, 0x0D95
    7d3c:	70 91 96 0d 	lds	r23, 0x0D96
    7d40:	cb 01       	movw	r24, r22
    7d42:	23 e0       	ldi	r18, 0x03	; 3
    7d44:	96 95       	lsr	r25
    7d46:	87 95       	ror	r24
    7d48:	2a 95       	dec	r18
    7d4a:	e1 f7       	brne	.-8      	; 0x7d44 <append_tile_column+0xb4>
    7d4c:	bc 01       	movw	r22, r24
    7d4e:	61 50       	subi	r22, 0x01	; 1
    7d50:	70 4e       	sbci	r23, 0xE0	; 224
    7d52:	6c 0f       	add	r22, r28
    7d54:	7d 1f       	adc	r23, r29
    7d56:	33 e0       	ldi	r19, 0x03	; 3
    7d58:	66 0f       	add	r22, r22
    7d5a:	77 1f       	adc	r23, r23
    7d5c:	3a 95       	dec	r19
    7d5e:	e1 f7       	brne	.-8      	; 0x7d58 <append_tile_column+0xc8>
    7d60:	80 91 93 0d 	lds	r24, 0x0D93
    7d64:	90 91 94 0d 	lds	r25, 0x0D94
    7d68:	88 51       	subi	r24, 0x18	; 24
    7d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6c:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <spawn_enemy>
    7d70:	ff 24       	eor	r15, r15
    7d72:	f3 94       	inc	r15
    7d74:	21 96       	adiw	r28, 0x01	; 1
{
	u8 enemy_spawned = 0;
	u8 level_tile;

	game.column_count++;
    for (u8 y = 0; y <= CAMERA_HEIGHT; y++)
    7d76:	cb 31       	cpi	r28, 0x1B	; 27
    7d78:	d1 05       	cpc	r29, r1
    7d7a:	09 f0       	breq	.+2      	; 0x7d7e <append_tile_column+0xee>
    7d7c:	9d cf       	rjmp	.-198    	; 0x7cb8 <append_tile_column+0x28>
			spawn_enemy(game.camera_x+(CAMERA_WIDTH+1)*8, (game.camera_y / 8 + y - 1)*8);
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
    7d7e:	80 91 8f 0d 	lds	r24, 0x0D8F
    7d82:	90 91 90 0d 	lds	r25, 0x0D90
    7d86:	01 96       	adiw	r24, 0x01	; 1
    7d88:	90 93 90 0d 	sts	0x0D90, r25
    7d8c:	80 93 8f 0d 	sts	0x0D8F, r24
	game.scroll_dest_x++;
    7d90:	80 91 a5 0d 	lds	r24, 0x0DA5
    7d94:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7d96:	80 32       	cpi	r24, 0x20	; 32
    7d98:	18 f4       	brcc	.+6      	; 0x7da0 <append_tile_column+0x110>
			enemy_spawned = 1;
		}
    }
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    7d9a:	80 93 a5 0d 	sts	0x0DA5, r24
    7d9e:	02 c0       	rjmp	.+4      	; 0x7da4 <append_tile_column+0x114>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    7da0:	10 92 a5 0d 	sts	0x0DA5, r1
}
    7da4:	df 91       	pop	r29
    7da6:	cf 91       	pop	r28
    7da8:	1f 91       	pop	r17
    7daa:	0f 91       	pop	r16
    7dac:	ff 90       	pop	r15
    7dae:	ef 90       	pop	r14
    7db0:	08 95       	ret

00007db2 <append_tile_row>:

void append_tile_row()
{
    7db2:	cf 93       	push	r28
    7db4:	df 93       	push	r29
    7db6:	c0 e0       	ldi	r28, 0x00	; 0
    7db8:	d0 e0       	ldi	r29, 0x00	; 0
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
    7dba:	40 91 91 0d 	lds	r20, 0x0D91
    7dbe:	50 91 92 0d 	lds	r21, 0x0D92
    7dc2:	60 91 93 0d 	lds	r22, 0x0D93
    7dc6:	70 91 94 0d 	lds	r23, 0x0D94
    7dca:	83 e0       	ldi	r24, 0x03	; 3
    7dcc:	76 95       	lsr	r23
    7dce:	67 95       	ror	r22
    7dd0:	8a 95       	dec	r24
    7dd2:	e1 f7       	brne	.-8      	; 0x7dcc <append_tile_row+0x1a>
    7dd4:	6c 0f       	add	r22, r28
    7dd6:	7d 1f       	adc	r23, r29
    7dd8:	80 91 9f 0d 	lds	r24, 0x0D9F
    7ddc:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    7de0:	60 91 9c 0c 	lds	r22, 0x0C9C
    7de4:	66 95       	lsr	r22
    7de6:	66 95       	lsr	r22
    7de8:	66 95       	lsr	r22
    7dea:	6c 0f       	add	r22, r28
    7dec:	6f 71       	andi	r22, 0x1F	; 31
    7dee:	40 91 a6 0d 	lds	r20, 0x0DA6
    7df2:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <render_level_tile>
    7df6:	21 96       	adiw	r28, 0x01	; 1

void append_tile_row()
{
	u8 level_tile;

    for (u8 x = 0; x <= CAMERA_WIDTH; x++)
    7df8:	cd 31       	cpi	r28, 0x1D	; 29
    7dfa:	d1 05       	cpc	r29, r1
    7dfc:	f1 f6       	brne	.-68     	; 0x7dba <append_tile_row+0x8>
	{
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
    7dfe:	80 91 91 0d 	lds	r24, 0x0D91
    7e02:	90 91 92 0d 	lds	r25, 0x0D92
    7e06:	01 96       	adiw	r24, 0x01	; 1
    7e08:	90 93 92 0d 	sts	0x0D92, r25
    7e0c:	80 93 91 0d 	sts	0x0D91, r24
	game.scroll_dest_y++;
    7e10:	80 91 a6 0d 	lds	r24, 0x0DA6
    7e14:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    7e16:	8e 31       	cpi	r24, 0x1E	; 30
    7e18:	18 f4       	brcc	.+6      	; 0x7e20 <append_tile_row+0x6e>
		level_tile = get_level_tile(game.current_level, x + game.camera_x / 8, game.scroll_src_y);
		render_level_tile(level_tile, (x + Screen.scrollX / 8) % 32, game.scroll_dest_y);
    }
	
    game.scroll_src_y++;
	game.scroll_dest_y++;
    7e1a:	80 93 a6 0d 	sts	0x0DA6, r24
    7e1e:	02 c0       	rjmp	.+4      	; 0x7e24 <append_tile_row+0x72>
    if(game.scroll_dest_y>=30)game.scroll_dest_y=0;
    7e20:	10 92 a6 0d 	sts	0x0DA6, r1
}
    7e24:	df 91       	pop	r29
    7e26:	cf 91       	pop	r28
    7e28:	08 95       	ret

00007e2a <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    7e2a:	80 91 93 0d 	lds	r24, 0x0D93
    7e2e:	90 91 94 0d 	lds	r25, 0x0D94
    7e32:	01 96       	adiw	r24, 0x01	; 1
    7e34:	90 93 94 0d 	sts	0x0D94, r25
    7e38:	80 93 93 0d 	sts	0x0D93, r24
	Scroll(1,0);
    7e3c:	60 e0       	ldi	r22, 0x00	; 0
    7e3e:	81 e0       	ldi	r24, 0x01	; 1
    7e40:	0e 94 a8 38 	call	0x7150	; 0x7150 <Scroll>
	if (++game.scroll_x == 8)
    7e44:	80 91 a3 0d 	lds	r24, 0x0DA3
    7e48:	8f 5f       	subi	r24, 0xFF	; 255
    7e4a:	88 30       	cpi	r24, 0x08	; 8
    7e4c:	19 f0       	breq	.+6      	; 0x7e54 <move_camera_x+0x2a>
    7e4e:	80 93 a3 0d 	sts	0x0DA3, r24
    7e52:	08 95       	ret
	{
		game.scroll_x = 0;
    7e54:	10 92 a3 0d 	sts	0x0DA3, r1
		append_tile_column();
    7e58:	0c 94 48 3e 	jmp	0x7c90	; 0x7c90 <append_tile_column>

00007e5c <move_camera_y>:
	}
}

void move_camera_y()
{	
	game.camera_y+=2;
    7e5c:	80 91 95 0d 	lds	r24, 0x0D95
    7e60:	90 91 96 0d 	lds	r25, 0x0D96
    7e64:	02 96       	adiw	r24, 0x02	; 2
    7e66:	90 93 96 0d 	sts	0x0D96, r25
    7e6a:	80 93 95 0d 	sts	0x0D95, r24
	game.scroll_y+=2;
    7e6e:	80 91 a4 0d 	lds	r24, 0x0DA4
    7e72:	8e 5f       	subi	r24, 0xFE	; 254
    7e74:	80 93 a4 0d 	sts	0x0DA4, r24
	Scroll(0,2);
    7e78:	62 e0       	ldi	r22, 0x02	; 2
    7e7a:	80 e0       	ldi	r24, 0x00	; 0
    7e7c:	0e 94 a8 38 	call	0x7150	; 0x7150 <Scroll>
	if (game.scroll_y == 8)
    7e80:	80 91 a4 0d 	lds	r24, 0x0DA4
    7e84:	88 30       	cpi	r24, 0x08	; 8
    7e86:	21 f4       	brne	.+8      	; 0x7e90 <move_camera_y+0x34>
	{
		game.scroll_y = 0;
    7e88:	10 92 a4 0d 	sts	0x0DA4, r1
		append_tile_row();
    7e8c:	0c 94 d9 3e 	jmp	0x7db2	; 0x7db2 <append_tile_row>
    7e90:	08 95       	ret

00007e92 <load_level>:
	}
}

void load_level(u8 index)
{	
    7e92:	1f 93       	push	r17
    7e94:	cf 93       	push	r28
    7e96:	df 93       	push	r29
    7e98:	18 2f       	mov	r17, r24
	Screen.scrollX = 0;
    7e9a:	e9 e9       	ldi	r30, 0x99	; 153
    7e9c:	fc e0       	ldi	r31, 0x0C	; 12
    7e9e:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    7ea0:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 30;
    7ea2:	8e e1       	ldi	r24, 0x1E	; 30
    7ea4:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayTileTable = tiles_data;
    7ea6:	87 e9       	ldi	r24, 0x97	; 151
    7ea8:	92 e3       	ldi	r25, 0x32	; 50
    7eaa:	92 83       	std	Z+2, r25	; 0x02
    7eac:	81 83       	std	Z+1, r24	; 0x01
	Screen.overlayHeight = 2;
    7eae:	82 e0       	ldi	r24, 0x02	; 2
    7eb0:	80 83       	st	Z, r24
	clear_overlay(2);
    7eb2:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <clear_overlay>
	game.current_level = index;
    7eb6:	cf e8       	ldi	r28, 0x8F	; 143
    7eb8:	dd e0       	ldi	r29, 0x0D	; 13
    7eba:	18 8b       	std	Y+16, r17	; 0x10
	game.column_count = 0;
    7ebc:	1d 86       	std	Y+13, r1	; 0x0d
    7ebe:	1c 86       	std	Y+12, r1	; 0x0c
	game.camera_x = get_camera_x(index);
    7ec0:	81 2f       	mov	r24, r17
    7ec2:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <get_camera_x>
    7ec6:	90 e0       	ldi	r25, 0x00	; 0
    7ec8:	9d 83       	std	Y+5, r25	; 0x05
    7eca:	8c 83       	std	Y+4, r24	; 0x04
	game.camera_y = get_camera_y(index);
    7ecc:	81 2f       	mov	r24, r17
    7ece:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <get_camera_y>
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
    7ed4:	9f 83       	std	Y+7, r25	; 0x07
    7ed6:	8e 83       	std	Y+6, r24	; 0x06
	game.player.shared.x = get_hero_spawn_x(index)*8;
    7ed8:	81 2f       	mov	r24, r17
    7eda:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <get_hero_spawn_x>
    7ede:	28 e0       	ldi	r18, 0x08	; 8
    7ee0:	82 9f       	mul	r24, r18
    7ee2:	c0 01       	movw	r24, r0
    7ee4:	11 24       	eor	r1, r1
    7ee6:	bc 01       	movw	r22, r24
    7ee8:	88 27       	eor	r24, r24
    7eea:	77 fd       	sbrc	r23, 7
    7eec:	80 95       	com	r24
    7eee:	98 2f       	mov	r25, r24
    7ef0:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    7ef4:	6e 8f       	std	Y+30, r22	; 0x1e
    7ef6:	7f 8f       	std	Y+31, r23	; 0x1f
    7ef8:	88 a3       	std	Y+32, r24	; 0x20
    7efa:	99 a3       	std	Y+33, r25	; 0x21
	game.player.shared.y = get_hero_spawn_y(index)*8;
    7efc:	81 2f       	mov	r24, r17
    7efe:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <get_hero_spawn_y>
    7f02:	28 e0       	ldi	r18, 0x08	; 8
    7f04:	82 9f       	mul	r24, r18
    7f06:	c0 01       	movw	r24, r0
    7f08:	11 24       	eor	r1, r1
    7f0a:	bc 01       	movw	r22, r24
    7f0c:	88 27       	eor	r24, r24
    7f0e:	77 fd       	sbrc	r23, 7
    7f10:	80 95       	com	r24
    7f12:	98 2f       	mov	r25, r24
    7f14:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    7f18:	6a a3       	std	Y+34, r22	; 0x22
    7f1a:	7b a3       	std	Y+35, r23	; 0x23
    7f1c:	8c a3       	std	Y+36, r24	; 0x24
    7f1e:	9d a3       	std	Y+37, r25	; 0x25
	game.camera_x *= 8;
    7f20:	2c 81       	ldd	r18, Y+4	; 0x04
    7f22:	3d 81       	ldd	r19, Y+5	; 0x05
    7f24:	83 e0       	ldi	r24, 0x03	; 3
    7f26:	22 0f       	add	r18, r18
    7f28:	33 1f       	adc	r19, r19
    7f2a:	8a 95       	dec	r24
    7f2c:	e1 f7       	brne	.-8      	; 0x7f26 <load_level+0x94>
    7f2e:	3d 83       	std	Y+5, r19	; 0x05
    7f30:	2c 83       	std	Y+4, r18	; 0x04
	game.camera_y *= 8;
    7f32:	8e 81       	ldd	r24, Y+6	; 0x06
    7f34:	9f 81       	ldd	r25, Y+7	; 0x07
    7f36:	43 e0       	ldi	r20, 0x03	; 3
    7f38:	88 0f       	add	r24, r24
    7f3a:	99 1f       	adc	r25, r25
    7f3c:	4a 95       	dec	r20
    7f3e:	e1 f7       	brne	.-8      	; 0x7f38 <load_level+0xa6>
    7f40:	9f 83       	std	Y+7, r25	; 0x07
    7f42:	8e 83       	std	Y+6, r24	; 0x06
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    7f44:	53 e0       	ldi	r21, 0x03	; 3
    7f46:	36 95       	lsr	r19
    7f48:	27 95       	ror	r18
    7f4a:	5a 95       	dec	r21
    7f4c:	e1 f7       	brne	.-8      	; 0x7f46 <load_level+0xb4>
    7f4e:	a9 01       	movw	r20, r18
    7f50:	43 5e       	subi	r20, 0xE3	; 227
    7f52:	5f 4f       	sbci	r21, 0xFF	; 255
    7f54:	59 83       	std	Y+1, r21	; 0x01
    7f56:	48 83       	st	Y, r20
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    7f58:	23 5e       	subi	r18, 0xE3	; 227
    7f5a:	2e 8b       	std	Y+22, r18	; 0x16
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    7f5c:	63 e0       	ldi	r22, 0x03	; 3
    7f5e:	96 95       	lsr	r25
    7f60:	87 95       	ror	r24
    7f62:	6a 95       	dec	r22
    7f64:	e1 f7       	brne	.-8      	; 0x7f5e <load_level+0xcc>
    7f66:	9c 01       	movw	r18, r24
    7f68:	25 5e       	subi	r18, 0xE5	; 229
    7f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    7f6c:	3b 83       	std	Y+3, r19	; 0x03
    7f6e:	2a 83       	std	Y+2, r18	; 0x02
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    7f70:	85 5e       	subi	r24, 0xE5	; 229
    7f72:	8f 8b       	std	Y+23, r24	; 0x17
	game.scroll_x = 0;
    7f74:	1c 8a       	std	Y+20, r1	; 0x14
	game.scroll_y = 0;
    7f76:	1d 8a       	std	Y+21, r1	; 0x15
	game.spawn_rate = BASE_SPAWN_RATE;
    7f78:	8a e0       	ldi	r24, 0x0A	; 10
    7f7a:	89 8f       	std	Y+25, r24	; 0x19
	render_camera_view();
    7f7c:	0e 94 d8 3d 	call	0x7bb0	; 0x7bb0 <render_camera_view>
	Print(0, VRAM_TILES_V-1, (char*) strLives);
    7f80:	40 e8       	ldi	r20, 0x80	; 128
    7f82:	59 e0       	ldi	r21, 0x09	; 9
    7f84:	6f e1       	ldi	r22, 0x1F	; 31
    7f86:	70 e0       	ldi	r23, 0x00	; 0
    7f88:	80 e0       	ldi	r24, 0x00	; 0
    7f8a:	90 e0       	ldi	r25, 0x00	; 0
    7f8c:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	Print(17, VRAM_TILES_V-1, (char*) strScore);
    7f90:	41 e9       	ldi	r20, 0x91	; 145
    7f92:	59 e0       	ldi	r21, 0x09	; 9
    7f94:	6f e1       	ldi	r22, 0x1F	; 31
    7f96:	70 e0       	ldi	r23, 0x00	; 0
    7f98:	81 e1       	ldi	r24, 0x11	; 17
    7f9a:	90 e0       	ldi	r25, 0x00	; 0
    7f9c:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	Print(0, VRAM_TILES_V-2, (char*) strShield);
    7fa0:	48 e8       	ldi	r20, 0x88	; 136
    7fa2:	59 e0       	ldi	r21, 0x09	; 9
    7fa4:	6e e1       	ldi	r22, 0x1E	; 30
    7fa6:	70 e0       	ldi	r23, 0x00	; 0
    7fa8:	80 e0       	ldi	r24, 0x00	; 0
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	Print(18, VRAM_TILES_V-2, (char*) strTime);
    7fb0:	49 e7       	ldi	r20, 0x79	; 121
    7fb2:	59 e0       	ldi	r21, 0x09	; 9
    7fb4:	6e e1       	ldi	r22, 0x1E	; 30
    7fb6:	70 e0       	ldi	r23, 0x00	; 0
    7fb8:	82 e1       	ldi	r24, 0x12	; 18
    7fba:	90 e0       	ldi	r25, 0x00	; 0
}
    7fbc:	df 91       	pop	r29
    7fbe:	cf 91       	pop	r28
    7fc0:	1f 91       	pop	r17
	game.spawn_rate = BASE_SPAWN_RATE;
	render_camera_view();
	Print(0, VRAM_TILES_V-1, (char*) strLives);
	Print(17, VRAM_TILES_V-1, (char*) strScore);
	Print(0, VRAM_TILES_V-2, (char*) strShield);
	Print(18, VRAM_TILES_V-2, (char*) strTime);
    7fc2:	0c 94 94 39 	jmp	0x7328	; 0x7328 <Print>

00007fc6 <on_solid_ground>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    7fc6:	2f 92       	push	r2
    7fc8:	3f 92       	push	r3
    7fca:	4f 92       	push	r4
    7fcc:	5f 92       	push	r5
    7fce:	6f 92       	push	r6
    7fd0:	7f 92       	push	r7
    7fd2:	8f 92       	push	r8
    7fd4:	9f 92       	push	r9
    7fd6:	af 92       	push	r10
    7fd8:	bf 92       	push	r11
    7fda:	cf 92       	push	r12
    7fdc:	df 92       	push	r13
    7fde:	ef 92       	push	r14
    7fe0:	ff 92       	push	r15
    7fe2:	0f 93       	push	r16
    7fe4:	1f 93       	push	r17
    7fe6:	cf 93       	push	r28
    7fe8:	df 93       	push	r29
    7fea:	00 d0       	rcall	.+0      	; 0x7fec <on_solid_ground+0x26>
    7fec:	00 d0       	rcall	.+0      	; 0x7fee <on_solid_ground+0x28>
    7fee:	00 d0       	rcall	.+0      	; 0x7ff0 <on_solid_ground+0x2a>
    7ff0:	cd b7       	in	r28, 0x3d	; 61
    7ff2:	de b7       	in	r29, 0x3e	; 62
    7ff4:	9e 83       	std	Y+6, r25	; 0x06
    7ff6:	8d 83       	std	Y+5, r24	; 0x05
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    7ff8:	88 e0       	ldi	r24, 0x08	; 8
    7ffa:	48 9f       	mul	r20, r24
    7ffc:	a0 01       	movw	r20, r0
    7ffe:	11 24       	eor	r1, r1
    8000:	26 2e       	mov	r2, r22
    8002:	31 2c       	mov	r3, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    8004:	00 e0       	ldi	r16, 0x00	; 0
    8006:	10 e0       	ldi	r17, 0x00	; 0
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    8008:	ca 01       	movw	r24, r20
    800a:	aa 27       	eor	r26, r26
    800c:	97 fd       	sbrc	r25, 7
    800e:	a0 95       	com	r26
    8010:	ba 2f       	mov	r27, r26
    8012:	89 83       	std	Y+1, r24	; 0x01
    8014:	9a 83       	std	Y+2, r25	; 0x02
    8016:	ab 83       	std	Y+3, r26	; 0x03
    8018:	bc 83       	std	Y+4, r27	; 0x04
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    801a:	02 15       	cp	r16, r2
    801c:	13 05       	cpc	r17, r3
    801e:	09 f4       	brne	.+2      	; 0x8022 <on_solid_ground+0x5c>
    8020:	81 c0       	rjmp	.+258    	; 0x8124 <on_solid_ground+0x15e>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    8022:	69 81       	ldd	r22, Y+1	; 0x01
    8024:	7a 81       	ldd	r23, Y+2	; 0x02
    8026:	8b 81       	ldd	r24, Y+3	; 0x03
    8028:	9c 81       	ldd	r25, Y+4	; 0x04
    802a:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    802e:	4b 01       	movw	r8, r22
    8030:	5c 01       	movw	r10, r24
    8032:	b8 01       	movw	r22, r16
    8034:	88 27       	eor	r24, r24
    8036:	77 fd       	sbrc	r23, 7
    8038:	80 95       	com	r24
    803a:	98 2f       	mov	r25, r24
    803c:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    8040:	6b 01       	movw	r12, r22
    8042:	7c 01       	movw	r14, r24
    8044:	ad 81       	ldd	r26, Y+5	; 0x05
    8046:	be 81       	ldd	r27, Y+6	; 0x06
    8048:	18 96       	adiw	r26, 0x08	; 8
    804a:	2d 91       	ld	r18, X+
    804c:	3d 91       	ld	r19, X+
    804e:	4d 91       	ld	r20, X+
    8050:	5c 91       	ld	r21, X
    8052:	1b 97       	sbiw	r26, 0x0b	; 11
    8054:	c5 01       	movw	r24, r10
    8056:	b4 01       	movw	r22, r8
    8058:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    805c:	20 e0       	ldi	r18, 0x00	; 0
    805e:	30 e0       	ldi	r19, 0x00	; 0
    8060:	40 e0       	ldi	r20, 0x00	; 0
    8062:	5e e3       	ldi	r21, 0x3E	; 62
    8064:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8068:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    806c:	2b 01       	movw	r4, r22
    806e:	3c 01       	movw	r6, r24
    8070:	20 e0       	ldi	r18, 0x00	; 0
    8072:	30 e0       	ldi	r19, 0x00	; 0
    8074:	40 e0       	ldi	r20, 0x00	; 0
    8076:	5e e3       	ldi	r21, 0x3E	; 62
    8078:	ed 81       	ldd	r30, Y+5	; 0x05
    807a:	fe 81       	ldd	r31, Y+6	; 0x06
    807c:	64 81       	ldd	r22, Z+4	; 0x04
    807e:	75 81       	ldd	r23, Z+5	; 0x05
    8080:	86 81       	ldd	r24, Z+6	; 0x06
    8082:	97 81       	ldd	r25, Z+7	; 0x07
    8084:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8088:	a7 01       	movw	r20, r14
    808a:	96 01       	movw	r18, r12
    808c:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8090:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8094:	a2 01       	movw	r20, r4
    8096:	80 91 9f 0d 	lds	r24, 0x0D9F
    809a:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    809e:	78 2e       	mov	r7, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    80a0:	ad 81       	ldd	r26, Y+5	; 0x05
    80a2:	be 81       	ldd	r27, Y+6	; 0x06
    80a4:	18 96       	adiw	r26, 0x08	; 8
    80a6:	2d 91       	ld	r18, X+
    80a8:	3d 91       	ld	r19, X+
    80aa:	4d 91       	ld	r20, X+
    80ac:	5c 91       	ld	r21, X
    80ae:	1b 97       	sbiw	r26, 0x0b	; 11
    80b0:	c5 01       	movw	r24, r10
    80b2:	b4 01       	movw	r22, r8
    80b4:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    80b8:	20 e0       	ldi	r18, 0x00	; 0
    80ba:	30 e0       	ldi	r19, 0x00	; 0
    80bc:	40 e0       	ldi	r20, 0x00	; 0
    80be:	5e e3       	ldi	r21, 0x3E	; 62
    80c0:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    80c4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    80c8:	4b 01       	movw	r8, r22
    80ca:	5c 01       	movw	r10, r24
    80cc:	20 e0       	ldi	r18, 0x00	; 0
    80ce:	30 e0       	ldi	r19, 0x00	; 0
    80d0:	40 ee       	ldi	r20, 0xE0	; 224
    80d2:	50 e4       	ldi	r21, 0x40	; 64
    80d4:	ed 81       	ldd	r30, Y+5	; 0x05
    80d6:	fe 81       	ldd	r31, Y+6	; 0x06
    80d8:	64 81       	ldd	r22, Z+4	; 0x04
    80da:	75 81       	ldd	r23, Z+5	; 0x05
    80dc:	86 81       	ldd	r24, Z+6	; 0x06
    80de:	97 81       	ldd	r25, Z+7	; 0x07
    80e0:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    80e4:	20 e0       	ldi	r18, 0x00	; 0
    80e6:	30 e0       	ldi	r19, 0x00	; 0
    80e8:	40 e0       	ldi	r20, 0x00	; 0
    80ea:	5e e3       	ldi	r21, 0x3E	; 62
    80ec:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    80f0:	a7 01       	movw	r20, r14
    80f2:	96 01       	movw	r18, r12
    80f4:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    80f8:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    80fc:	a4 01       	movw	r20, r8
    80fe:	80 91 9f 0d 	lds	r24, 0x0D9F
    8102:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    8106:	f8 2e       	mov	r15, r24
		if (solid_tile(lt1) || solid_tile(lt2))
    8108:	87 2d       	mov	r24, r7
    810a:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    810e:	81 11       	cpse	r24, r1
    8110:	0b c0       	rjmp	.+22     	; 0x8128 <on_solid_ground+0x162>
    8112:	8f 2d       	mov	r24, r15
    8114:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    8118:	0f 5f       	subi	r16, 0xFF	; 255
    811a:	1f 4f       	sbci	r17, 0xFF	; 255
    811c:	88 23       	and	r24, r24
    811e:	09 f4       	brne	.+2      	; 0x8122 <on_solid_ground+0x15c>
    8120:	7c cf       	rjmp	.-264    	; 0x801a <on_solid_ground+0x54>
    8122:	02 c0       	rjmp	.+4      	; 0x8128 <on_solid_ground+0x162>
		{
			return 1;
		}
	}
	return 0;
    8124:	80 e0       	ldi	r24, 0x00	; 0
    8126:	01 c0       	rjmp	.+2      	; 0x812a <on_solid_ground+0x164>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_tile(lt1) || solid_tile(lt2))
		{
			return 1;
    8128:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    812a:	26 96       	adiw	r28, 0x06	; 6
    812c:	0f b6       	in	r0, 0x3f	; 63
    812e:	f8 94       	cli
    8130:	de bf       	out	0x3e, r29	; 62
    8132:	0f be       	out	0x3f, r0	; 63
    8134:	cd bf       	out	0x3d, r28	; 61
    8136:	df 91       	pop	r29
    8138:	cf 91       	pop	r28
    813a:	1f 91       	pop	r17
    813c:	0f 91       	pop	r16
    813e:	ff 90       	pop	r15
    8140:	ef 90       	pop	r14
    8142:	df 90       	pop	r13
    8144:	cf 90       	pop	r12
    8146:	bf 90       	pop	r11
    8148:	af 90       	pop	r10
    814a:	9f 90       	pop	r9
    814c:	8f 90       	pop	r8
    814e:	7f 90       	pop	r7
    8150:	6f 90       	pop	r6
    8152:	5f 90       	pop	r5
    8154:	4f 90       	pop	r4
    8156:	3f 90       	pop	r3
    8158:	2f 90       	pop	r2
    815a:	08 95       	ret

0000815c <find_shot_slot>:

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (!game.player.shot[i].active) return i;
    815c:	80 91 d0 0d 	lds	r24, 0x0DD0
    8160:	88 23       	and	r24, r24
    8162:	61 f0       	breq	.+24     	; 0x817c <find_shot_slot+0x20>
    8164:	80 91 ea 0d 	lds	r24, 0x0DEA
    8168:	88 23       	and	r24, r24
    816a:	31 f0       	breq	.+12     	; 0x8178 <find_shot_slot+0x1c>
    816c:	80 91 04 0e 	lds	r24, 0x0E04
    8170:	81 11       	cpse	r24, r1
    8172:	04 c0       	rjmp	.+8      	; 0x817c <find_shot_slot+0x20>
	return 0;
}

u8 find_shot_slot()
{
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    8174:	82 e0       	ldi	r24, 0x02	; 2
    8176:	08 95       	ret
    8178:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (!game.player.shot[i].active) return i;
    817a:	08 95       	ret
	}
	return 0;
    817c:	80 e0       	ldi	r24, 0x00	; 0
}
    817e:	08 95       	ret

00008180 <update_shot>:

void update_shot()
{
    8180:	ef 92       	push	r14
    8182:	ff 92       	push	r15
    8184:	0f 93       	push	r16
    8186:	1f 93       	push	r17
    8188:	cf 93       	push	r28
    818a:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (game.joypadState.pressed & BTN_A && game.player.active_shots < MAX_PLAYER_SHOTS)
    818c:	80 91 7a 0f 	lds	r24, 0x0F7A
    8190:	90 91 7b 0f 	lds	r25, 0x0F7B
    8194:	90 ff       	sbrs	r25, 0
    8196:	91 c0       	rjmp	.+290    	; 0x82ba <update_shot+0x13a>
    8198:	80 91 b8 0d 	lds	r24, 0x0DB8
    819c:	83 30       	cpi	r24, 0x03	; 3
    819e:	08 f0       	brcs	.+2      	; 0x81a2 <update_shot+0x22>
    81a0:	8c c0       	rjmp	.+280    	; 0x82ba <update_shot+0x13a>
	{
		idx = find_shot_slot();
    81a2:	0e 94 ae 40 	call	0x815c	; 0x815c <find_shot_slot>
    81a6:	d8 2f       	mov	r29, r24
		LBMapSprite(PLAYER_SHOT_SLOT+idx, LBGetNextFrame(&game.player.shot[idx].anim), 0);
    81a8:	08 2f       	mov	r16, r24
    81aa:	10 e0       	ldi	r17, 0x00	; 0
    81ac:	8a e1       	ldi	r24, 0x1A	; 26
    81ae:	d8 9f       	mul	r29, r24
    81b0:	70 01       	movw	r14, r0
    81b2:	11 24       	eor	r1, r1
    81b4:	c7 01       	movw	r24, r14
    81b6:	8f 52       	subi	r24, 0x2F	; 47
    81b8:	92 4f       	sbci	r25, 0xF2	; 242
    81ba:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    81be:	40 e0       	ldi	r20, 0x00	; 0
    81c0:	bc 01       	movw	r22, r24
    81c2:	8b e0       	ldi	r24, 0x0B	; 11
    81c4:	8d 0f       	add	r24, r29
    81c6:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <LBMapSprite>
		game.player.shot[idx].active = 1;
    81ca:	e7 01       	movw	r28, r14
    81cc:	c1 57       	subi	r28, 0x71	; 113
    81ce:	d2 4f       	sbci	r29, 0xF2	; 242
    81d0:	fe 01       	movw	r30, r28
    81d2:	ef 5b       	subi	r30, 0xBF	; 191
    81d4:	ff 4f       	sbci	r31, 0xFF	; 255
    81d6:	81 e0       	ldi	r24, 0x01	; 1
    81d8:	80 83       	st	Z, r24
		game.player.shot[idx].shared.y = (u16) game.player.shared.y / 8 * 8;
    81da:	60 91 b1 0d 	lds	r22, 0x0DB1
    81de:	70 91 b2 0d 	lds	r23, 0x0DB2
    81e2:	80 91 b3 0d 	lds	r24, 0x0DB3
    81e6:	90 91 b4 0d 	lds	r25, 0x0DB4
    81ea:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    81ee:	83 e0       	ldi	r24, 0x03	; 3
    81f0:	76 95       	lsr	r23
    81f2:	67 95       	ror	r22
    81f4:	8a 95       	dec	r24
    81f6:	e1 f7       	brne	.-8      	; 0x81f0 <update_shot+0x70>
    81f8:	93 e0       	ldi	r25, 0x03	; 3
    81fa:	66 0f       	add	r22, r22
    81fc:	77 1f       	adc	r23, r23
    81fe:	9a 95       	dec	r25
    8200:	e1 f7       	brne	.-8      	; 0x81fa <update_shot+0x7a>
    8202:	80 e0       	ldi	r24, 0x00	; 0
    8204:	90 e0       	ldi	r25, 0x00	; 0
    8206:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    820a:	68 af       	std	Y+56, r22	; 0x38
    820c:	79 af       	std	Y+57, r23	; 0x39
    820e:	8a af       	std	Y+58, r24	; 0x3a
    8210:	9b af       	std	Y+59, r25	; 0x3b
		if (!(game.player.flags & PRONE))
    8212:	20 91 b9 0d 	lds	r18, 0x0DB9
    8216:	22 fd       	sbrc	r18, 2
    8218:	0a c0       	rjmp	.+20     	; 0x822e <update_shot+0xae>
		{
			game.player.shot[idx].shared.y += 8;
    821a:	20 e0       	ldi	r18, 0x00	; 0
    821c:	30 e0       	ldi	r19, 0x00	; 0
    821e:	40 e0       	ldi	r20, 0x00	; 0
    8220:	51 e4       	ldi	r21, 0x41	; 65
    8222:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8226:	68 af       	std	Y+56, r22	; 0x38
    8228:	79 af       	std	Y+57, r23	; 0x39
    822a:	8a af       	std	Y+58, r24	; 0x3a
    822c:	9b af       	std	Y+59, r25	; 0x3b
		}
		if (game.player.direction == D_RIGHT)
    822e:	80 91 bb 0d 	lds	r24, 0x0DBB
    8232:	81 30       	cpi	r24, 0x01	; 1
    8234:	f9 f4       	brne	.+62     	; 0x8274 <update_shot+0xf4>
		{
			game.player.shot[idx].shared.x = game.player.shared.x+2*8;
    8236:	8a e1       	ldi	r24, 0x1A	; 26
    8238:	80 9f       	mul	r24, r16
    823a:	e0 01       	movw	r28, r0
    823c:	81 9f       	mul	r24, r17
    823e:	d0 0d       	add	r29, r0
    8240:	11 24       	eor	r1, r1
    8242:	c1 57       	subi	r28, 0x71	; 113
    8244:	d2 4f       	sbci	r29, 0xF2	; 242
    8246:	20 e0       	ldi	r18, 0x00	; 0
    8248:	30 e0       	ldi	r19, 0x00	; 0
    824a:	40 e8       	ldi	r20, 0x80	; 128
    824c:	51 e4       	ldi	r21, 0x41	; 65
    824e:	60 91 ad 0d 	lds	r22, 0x0DAD
    8252:	70 91 ae 0d 	lds	r23, 0x0DAE
    8256:	80 91 af 0d 	lds	r24, 0x0DAF
    825a:	90 91 b0 0d 	lds	r25, 0x0DB0
    825e:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8262:	6c ab       	std	Y+52, r22	; 0x34
    8264:	7d ab       	std	Y+53, r23	; 0x35
    8266:	8e ab       	std	Y+54, r24	; 0x36
    8268:	9f ab       	std	Y+55, r25	; 0x37
			game.player.shot[idx].shared.vx = SHOT_SPEED;
    826a:	80 e9       	ldi	r24, 0x90	; 144
    826c:	91 e0       	ldi	r25, 0x01	; 1
    826e:	9d af       	std	Y+61, r25	; 0x3d
    8270:	8c af       	std	Y+60, r24	; 0x3c
    8272:	1e c0       	rjmp	.+60     	; 0x82b0 <update_shot+0x130>
		}
		else
		{
			game.player.shot[idx].shared.vx = -SHOT_SPEED;
    8274:	8a e1       	ldi	r24, 0x1A	; 26
    8276:	80 9f       	mul	r24, r16
    8278:	e0 01       	movw	r28, r0
    827a:	81 9f       	mul	r24, r17
    827c:	d0 0d       	add	r29, r0
    827e:	11 24       	eor	r1, r1
    8280:	c1 57       	subi	r28, 0x71	; 113
    8282:	d2 4f       	sbci	r29, 0xF2	; 242
    8284:	80 e7       	ldi	r24, 0x70	; 112
    8286:	9e ef       	ldi	r25, 0xFE	; 254
    8288:	9d af       	std	Y+61, r25	; 0x3d
    828a:	8c af       	std	Y+60, r24	; 0x3c
			game.player.shot[idx].shared.x = game.player.shared.x-1*8;
    828c:	20 e0       	ldi	r18, 0x00	; 0
    828e:	30 e0       	ldi	r19, 0x00	; 0
    8290:	40 e0       	ldi	r20, 0x00	; 0
    8292:	51 e4       	ldi	r21, 0x41	; 65
    8294:	60 91 ad 0d 	lds	r22, 0x0DAD
    8298:	70 91 ae 0d 	lds	r23, 0x0DAE
    829c:	80 91 af 0d 	lds	r24, 0x0DAF
    82a0:	90 91 b0 0d 	lds	r25, 0x0DB0
    82a4:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    82a8:	6c ab       	std	Y+52, r22	; 0x34
    82aa:	7d ab       	std	Y+53, r23	; 0x35
    82ac:	8e ab       	std	Y+54, r24	; 0x36
    82ae:	9f ab       	std	Y+55, r25	; 0x37
		}
		game.player.active_shots++;
    82b0:	80 91 b8 0d 	lds	r24, 0x0DB8
    82b4:	8f 5f       	subi	r24, 0xFF	; 255
    82b6:	80 93 b8 0d 	sts	0x0DB8, r24
	}
}
    82ba:	df 91       	pop	r29
    82bc:	cf 91       	pop	r28
    82be:	1f 91       	pop	r17
    82c0:	0f 91       	pop	r16
    82c2:	ff 90       	pop	r15
    82c4:	ef 90       	pop	r14
    82c6:	08 95       	ret

000082c8 <pixel_overlap>:
		}
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
    82c8:	fc 01       	movw	r30, r24
	u8 result = w1;
	
	if (s2 > s1)
    82ca:	86 17       	cp	r24, r22
    82cc:	97 07       	cpc	r25, r23
    82ce:	28 f4       	brcc	.+10     	; 0x82da <pixel_overlap+0x12>
    82d0:	94 2f       	mov	r25, r20
    82d2:	9e 0f       	add	r25, r30
	{
		result -= s2 - s1;
    82d4:	89 2f       	mov	r24, r25
    82d6:	86 1b       	sub	r24, r22
    82d8:	01 c0       	rjmp	.+2      	; 0x82dc <pixel_overlap+0x14>
	}
}

u8 pixel_overlap(u16 s1, u16 s2, u8 w1, u8 w2)
{
	u8 result = w1;
    82da:	84 2f       	mov	r24, r20
	
	if (s2 > s1)
	{
		result -= s2 - s1;
	}
	s1 = s1 + w1;
    82dc:	e4 0f       	add	r30, r20
    82de:	f1 1d       	adc	r31, r1
	s2 = s2 + w2;
    82e0:	62 0f       	add	r22, r18
    82e2:	71 1d       	adc	r23, r1
	if (s2 < s1)
    82e4:	6e 17       	cp	r22, r30
    82e6:	7f 07       	cpc	r23, r31
    82e8:	10 f4       	brcc	.+4      	; 0x82ee <pixel_overlap+0x26>
	{
		result -= s1 - s2;
    82ea:	6e 1b       	sub	r22, r30
    82ec:	86 0f       	add	r24, r22
	}
	return result;
}
    82ee:	08 95       	ret

000082f0 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    82f0:	2f 92       	push	r2
    82f2:	3f 92       	push	r3
    82f4:	4f 92       	push	r4
    82f6:	5f 92       	push	r5
    82f8:	6f 92       	push	r6
    82fa:	7f 92       	push	r7
    82fc:	8f 92       	push	r8
    82fe:	9f 92       	push	r9
    8300:	af 92       	push	r10
    8302:	bf 92       	push	r11
    8304:	cf 92       	push	r12
    8306:	df 92       	push	r13
    8308:	ef 92       	push	r14
    830a:	ff 92       	push	r15
    830c:	0f 93       	push	r16
    830e:	1f 93       	push	r17
    8310:	cf 93       	push	r28
    8312:	df 93       	push	r29
    8314:	cd b7       	in	r28, 0x3d	; 61
    8316:	de b7       	in	r29, 0x3e	; 62
    8318:	68 97       	sbiw	r28, 0x18	; 24
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	f8 94       	cli
    831e:	de bf       	out	0x3e, r29	; 62
    8320:	0f be       	out	0x3f, r0	; 63
    8322:	cd bf       	out	0x3d, r28	; 61
    8324:	98 8f       	std	Y+24, r25	; 0x18
    8326:	8f 8b       	std	Y+23, r24	; 0x17
    8328:	16 2f       	mov	r17, r22
    832a:	49 8b       	std	Y+17, r20	; 0x11
	u16 x0_tile = s->x / 8;
    832c:	dc 01       	movw	r26, r24
    832e:	14 96       	adiw	r26, 0x04	; 4
    8330:	4d 90       	ld	r4, X+
    8332:	5d 90       	ld	r5, X+
    8334:	6d 90       	ld	r6, X+
    8336:	7c 90       	ld	r7, X
    8338:	17 97       	sbiw	r26, 0x07	; 7
    833a:	20 e0       	ldi	r18, 0x00	; 0
    833c:	30 e0       	ldi	r19, 0x00	; 0
    833e:	40 e0       	ldi	r20, 0x00	; 0
    8340:	5e e3       	ldi	r21, 0x3E	; 62
    8342:	c3 01       	movw	r24, r6
    8344:	b2 01       	movw	r22, r4
    8346:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    834a:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    834e:	4b 01       	movw	r8, r22
    8350:	5c 01       	movw	r10, r24
    8352:	68 87       	std	Y+8, r22	; 0x08
    8354:	9a 8a       	std	Y+18, r9	; 0x12
	u16 y0_tile = s->y / 8;
    8356:	ef 89       	ldd	r30, Y+23	; 0x17
    8358:	f8 8d       	ldd	r31, Y+24	; 0x18
    835a:	c0 84       	ldd	r12, Z+8	; 0x08
    835c:	d1 84       	ldd	r13, Z+9	; 0x09
    835e:	e2 84       	ldd	r14, Z+10	; 0x0a
    8360:	f3 84       	ldd	r15, Z+11	; 0x0b
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    8362:	84 85       	ldd	r24, Z+12	; 0x0c
    8364:	95 85       	ldd	r25, Z+13	; 0x0d
    8366:	89 2b       	or	r24, r25
    8368:	61 f4       	brne	.+24     	; 0x8382 <collision_detect_level+0x92>
    836a:	20 e0       	ldi	r18, 0x00	; 0
    836c:	30 e0       	ldi	r19, 0x00	; 0
    836e:	a9 01       	movw	r20, r18
    8370:	60 81       	ld	r22, Z
    8372:	71 81       	ldd	r23, Z+1	; 0x01
    8374:	82 81       	ldd	r24, Z+2	; 0x02
    8376:	93 81       	ldd	r25, Z+3	; 0x03
    8378:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    837c:	88 23       	and	r24, r24
    837e:	09 f4       	brne	.+2      	; 0x8382 <collision_detect_level+0x92>
    8380:	c2 c2       	rjmp	.+1412   	; 0x8906 <collision_detect_level+0x616>
	
	// Top and Bottom
	if (s->vy != 0)
    8382:	20 e0       	ldi	r18, 0x00	; 0
    8384:	30 e0       	ldi	r19, 0x00	; 0
    8386:	a9 01       	movw	r20, r18
    8388:	af 89       	ldd	r26, Y+23	; 0x17
    838a:	b8 8d       	ldd	r27, Y+24	; 0x18
    838c:	6d 91       	ld	r22, X+
    838e:	7d 91       	ld	r23, X+
    8390:	8d 91       	ld	r24, X+
    8392:	9c 91       	ld	r25, X
    8394:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    8398:	88 23       	and	r24, r24
    839a:	09 f4       	brne	.+2      	; 0x839e <collision_detect_level+0xae>
    839c:	5f c1       	rjmp	.+702    	; 0x865c <collision_detect_level+0x36c>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
    839e:	20 e0       	ldi	r18, 0x00	; 0
    83a0:	30 e0       	ldi	r19, 0x00	; 0
    83a2:	40 e0       	ldi	r20, 0x00	; 0
    83a4:	5e e3       	ldi	r21, 0x3E	; 62
    83a6:	c7 01       	movw	r24, r14
    83a8:	b6 01       	movw	r22, r12
    83aa:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    83ae:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    83b2:	6b 01       	movw	r12, r22
    83b4:	7c 01       	movw	r14, r24
    83b6:	1b 01       	movw	r2, r22
	u16 x1_tile = (s->x+7) / 8;
    83b8:	20 e0       	ldi	r18, 0x00	; 0
    83ba:	30 e0       	ldi	r19, 0x00	; 0
    83bc:	40 ee       	ldi	r20, 0xE0	; 224
    83be:	50 e4       	ldi	r21, 0x40	; 64
    83c0:	c3 01       	movw	r24, r6
    83c2:	b2 01       	movw	r22, r4
    83c4:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    83c8:	20 e0       	ldi	r18, 0x00	; 0
    83ca:	30 e0       	ldi	r19, 0x00	; 0
    83cc:	40 e0       	ldi	r20, 0x00	; 0
    83ce:	5e e3       	ldi	r21, 0x3E	; 62
    83d0:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    83d4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    83d8:	f4 01       	movw	r30, r8
    83da:	53 e0       	ldi	r21, 0x03	; 3
    83dc:	ee 0f       	add	r30, r30
    83de:	ff 1f       	adc	r31, r31
    83e0:	5a 95       	dec	r21
    83e2:	e1 f7       	brne	.-8      	; 0x83dc <collision_detect_level+0xec>
    83e4:	fb 83       	std	Y+3, r31	; 0x03
    83e6:	ea 83       	std	Y+2, r30	; 0x02
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    83e8:	9b 01       	movw	r18, r22
    83ea:	e3 e0       	ldi	r30, 0x03	; 3
    83ec:	22 0f       	add	r18, r18
    83ee:	33 1f       	adc	r19, r19
    83f0:	ea 95       	dec	r30
    83f2:	e1 f7       	brne	.-8      	; 0x83ec <collision_detect_level+0xfc>
    83f4:	3d 83       	std	Y+5, r19	; 0x05
    83f6:	2c 83       	std	Y+4, r18	; 0x04
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    83f8:	3f ef       	ldi	r19, 0xFF	; 255
    83fa:	c3 1a       	sub	r12, r19
    83fc:	d3 0a       	sbc	r13, r19
    83fe:	f3 e0       	ldi	r31, 0x03	; 3
    8400:	cc 0c       	add	r12, r12
    8402:	dd 1c       	adc	r13, r13
    8404:	fa 95       	dec	r31
    8406:	e1 f7       	brne	.-8      	; 0x8400 <collision_detect_level+0x110>
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    8408:	b9 89       	ldd	r27, Y+17	; 0x11
    840a:	a8 e0       	ldi	r26, 0x08	; 8
    840c:	ba 9f       	mul	r27, r26
    840e:	a0 01       	movw	r20, r0
    8410:	11 24       	eor	r1, r1
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    8412:	96 01       	movw	r18, r12
    8414:	28 50       	subi	r18, 0x08	; 8
    8416:	31 09       	sbc	r19, r1
    8418:	2b 01       	movw	r4, r22
    841a:	34 01       	movw	r6, r8
    841c:	19 82       	std	Y+1, r1	; 0x01
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    841e:	b6 01       	movw	r22, r12
    8420:	80 e0       	ldi	r24, 0x00	; 0
    8422:	90 e0       	ldi	r25, 0x00	; 0
    8424:	69 87       	std	Y+9, r22	; 0x09
    8426:	7a 87       	std	Y+10, r23	; 0x0a
    8428:	8b 87       	std	Y+11, r24	; 0x0b
    842a:	9c 87       	std	Y+12, r25	; 0x0c
					result = 1;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    842c:	66 27       	eor	r22, r22
    842e:	57 fd       	sbrc	r21, 7
    8430:	60 95       	com	r22
    8432:	76 2f       	mov	r23, r22
    8434:	4d 87       	std	Y+13, r20	; 0x0d
    8436:	5e 87       	std	Y+14, r21	; 0x0e
    8438:	6f 87       	std	Y+15, r22	; 0x0f
    843a:	78 8b       	std	Y+16, r23	; 0x10
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    843c:	b9 01       	movw	r22, r18
    843e:	80 e0       	ldi	r24, 0x00	; 0
    8440:	90 e0       	ldi	r25, 0x00	; 0
    8442:	6b 8b       	std	Y+19, r22	; 0x13
    8444:	7c 8b       	std	Y+20, r23	; 0x14
    8446:	8d 8b       	std	Y+21, r24	; 0x15
    8448:	9e 8b       	std	Y+22, r25	; 0x16
    844a:	86 2d       	mov	r24, r6
    844c:	48 85       	ldd	r20, Y+8	; 0x08
    844e:	84 1b       	sub	r24, r20
	if (s->vx == 0 && s->vy == 0) return result;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    8450:	81 17       	cp	r24, r17
    8452:	08 f0       	brcs	.+2      	; 0x8456 <collision_detect_level+0x166>
    8454:	04 c1       	rjmp	.+520    	; 0x865e <collision_detect_level+0x36e>
		{
			if (s->vy < 0)
    8456:	20 e0       	ldi	r18, 0x00	; 0
    8458:	30 e0       	ldi	r19, 0x00	; 0
    845a:	a9 01       	movw	r20, r18
    845c:	af 89       	ldd	r26, Y+23	; 0x17
    845e:	b8 8d       	ldd	r27, Y+24	; 0x18
    8460:	6d 91       	ld	r22, X+
    8462:	7d 91       	ld	r23, X+
    8464:	8d 91       	ld	r24, X+
    8466:	9c 91       	ld	r25, X
    8468:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    846c:	87 ff       	sbrs	r24, 7
    846e:	54 c0       	rjmp	.+168    	; 0x8518 <collision_detect_level+0x228>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    8470:	a1 01       	movw	r20, r2
    8472:	b3 01       	movw	r22, r6
    8474:	80 91 9f 0d 	lds	r24, 0x0D9F
    8478:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    847c:	f8 2e       	mov	r15, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    847e:	a1 01       	movw	r20, r2
    8480:	b2 01       	movw	r22, r4
    8482:	80 91 9f 0d 	lds	r24, 0x0D9F
    8486:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    848a:	08 2f       	mov	r16, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    848c:	8f 2d       	mov	r24, r15
    848e:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    8492:	88 23       	and	r24, r24
    8494:	91 f0       	breq	.+36     	; 0x84ba <collision_detect_level+0x1ca>
    8496:	ef 89       	ldd	r30, Y+23	; 0x17
    8498:	f8 8d       	ldd	r31, Y+24	; 0x18
    849a:	64 81       	ldd	r22, Z+4	; 0x04
    849c:	75 81       	ldd	r23, Z+5	; 0x05
    849e:	86 81       	ldd	r24, Z+6	; 0x06
    84a0:	97 81       	ldd	r25, Z+7	; 0x07
    84a2:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    84a6:	dc 01       	movw	r26, r24
    84a8:	cb 01       	movw	r24, r22
    84aa:	28 e0       	ldi	r18, 0x08	; 8
    84ac:	48 e0       	ldi	r20, 0x08	; 8
    84ae:	6a 81       	ldd	r22, Y+2	; 0x02
    84b0:	7b 81       	ldd	r23, Y+3	; 0x03
    84b2:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    84b6:	84 30       	cpi	r24, 0x04	; 4
    84b8:	c8 f4       	brcc	.+50     	; 0x84ec <collision_detect_level+0x1fc>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    84ba:	80 2f       	mov	r24, r16
    84bc:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
		{
			if (s->vy < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    84c0:	88 23       	and	r24, r24
    84c2:	51 f1       	breq	.+84     	; 0x8518 <collision_detect_level+0x228>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    84c4:	af 89       	ldd	r26, Y+23	; 0x17
    84c6:	b8 8d       	ldd	r27, Y+24	; 0x18
    84c8:	14 96       	adiw	r26, 0x04	; 4
    84ca:	6d 91       	ld	r22, X+
    84cc:	7d 91       	ld	r23, X+
    84ce:	8d 91       	ld	r24, X+
    84d0:	9c 91       	ld	r25, X
    84d2:	17 97       	sbiw	r26, 0x07	; 7
    84d4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    84d8:	dc 01       	movw	r26, r24
    84da:	cb 01       	movw	r24, r22
    84dc:	28 e0       	ldi	r18, 0x08	; 8
    84de:	48 e0       	ldi	r20, 0x08	; 8
    84e0:	6c 81       	ldd	r22, Y+4	; 0x04
    84e2:	7d 81       	ldd	r23, Y+5	; 0x05
    84e4:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    84e8:	84 30       	cpi	r24, 0x04	; 4
    84ea:	b0 f0       	brcs	.+44     	; 0x8518 <collision_detect_level+0x228>
				{
					s->vy =  0;
    84ec:	ef 89       	ldd	r30, Y+23	; 0x17
    84ee:	f8 8d       	ldd	r31, Y+24	; 0x18
    84f0:	10 82       	st	Z, r1
    84f2:	11 82       	std	Z+1, r1	; 0x01
    84f4:	12 82       	std	Z+2, r1	; 0x02
    84f6:	13 82       	std	Z+3, r1	; 0x03
					s->y = (y0_tile + 1) * 8;
    84f8:	69 85       	ldd	r22, Y+9	; 0x09
    84fa:	7a 85       	ldd	r23, Y+10	; 0x0a
    84fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    84fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    8500:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8504:	af 89       	ldd	r26, Y+23	; 0x17
    8506:	b8 8d       	ldd	r27, Y+24	; 0x18
    8508:	18 96       	adiw	r26, 0x08	; 8
    850a:	6d 93       	st	X+, r22
    850c:	7d 93       	st	X+, r23
    850e:	8d 93       	st	X+, r24
    8510:	9c 93       	st	X, r25
    8512:	1b 97       	sbiw	r26, 0x0b	; 11
					result = 1;
    8514:	b1 e0       	ldi	r27, 0x01	; 1
    8516:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			if (s->vy > 0)
    8518:	20 e0       	ldi	r18, 0x00	; 0
    851a:	30 e0       	ldi	r19, 0x00	; 0
    851c:	a9 01       	movw	r20, r18
    851e:	ef 89       	ldd	r30, Y+23	; 0x17
    8520:	f8 8d       	ldd	r31, Y+24	; 0x18
    8522:	60 81       	ld	r22, Z
    8524:	71 81       	ldd	r23, Z+1	; 0x01
    8526:	82 81       	ldd	r24, Z+2	; 0x02
    8528:	93 81       	ldd	r25, Z+3	; 0x03
    852a:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    852e:	18 16       	cp	r1, r24
    8530:	0c f0       	brlt	.+2      	; 0x8534 <collision_detect_level+0x244>
    8532:	8d c0       	rjmp	.+282    	; 0x864e <collision_detect_level+0x35e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    8534:	6d 85       	ldd	r22, Y+13	; 0x0d
    8536:	7e 85       	ldd	r23, Y+14	; 0x0e
    8538:	8f 85       	ldd	r24, Y+15	; 0x0f
    853a:	98 89       	ldd	r25, Y+16	; 0x10
    853c:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    8540:	6b 01       	movw	r12, r22
    8542:	7c 01       	movw	r14, r24
    8544:	af 89       	ldd	r26, Y+23	; 0x17
    8546:	b8 8d       	ldd	r27, Y+24	; 0x18
    8548:	18 96       	adiw	r26, 0x08	; 8
    854a:	2d 91       	ld	r18, X+
    854c:	3d 91       	ld	r19, X+
    854e:	4d 91       	ld	r20, X+
    8550:	5c 91       	ld	r21, X
    8552:	1b 97       	sbiw	r26, 0x0b	; 11
    8554:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8558:	20 e0       	ldi	r18, 0x00	; 0
    855a:	30 e0       	ldi	r19, 0x00	; 0
    855c:	40 e8       	ldi	r20, 0x80	; 128
    855e:	5f e3       	ldi	r21, 0x3F	; 63
    8560:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8564:	20 e0       	ldi	r18, 0x00	; 0
    8566:	30 e0       	ldi	r19, 0x00	; 0
    8568:	40 e0       	ldi	r20, 0x00	; 0
    856a:	5e e3       	ldi	r21, 0x3E	; 62
    856c:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8570:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8574:	ab 01       	movw	r20, r22
    8576:	b3 01       	movw	r22, r6
    8578:	80 91 9f 0d 	lds	r24, 0x0D9F
    857c:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    8580:	08 2f       	mov	r16, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    8582:	ef 89       	ldd	r30, Y+23	; 0x17
    8584:	f8 8d       	ldd	r31, Y+24	; 0x18
    8586:	20 85       	ldd	r18, Z+8	; 0x08
    8588:	31 85       	ldd	r19, Z+9	; 0x09
    858a:	42 85       	ldd	r20, Z+10	; 0x0a
    858c:	53 85       	ldd	r21, Z+11	; 0x0b
    858e:	c7 01       	movw	r24, r14
    8590:	b6 01       	movw	r22, r12
    8592:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8596:	20 e0       	ldi	r18, 0x00	; 0
    8598:	30 e0       	ldi	r19, 0x00	; 0
    859a:	40 e8       	ldi	r20, 0x80	; 128
    859c:	5f e3       	ldi	r21, 0x3F	; 63
    859e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    85a2:	20 e0       	ldi	r18, 0x00	; 0
    85a4:	30 e0       	ldi	r19, 0x00	; 0
    85a6:	40 e0       	ldi	r20, 0x00	; 0
    85a8:	5e e3       	ldi	r21, 0x3E	; 62
    85aa:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    85ae:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    85b2:	ab 01       	movw	r20, r22
    85b4:	b2 01       	movw	r22, r4
    85b6:	80 91 9f 0d 	lds	r24, 0x0D9F
    85ba:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    85be:	f8 2e       	mov	r15, r24
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    85c0:	80 2f       	mov	r24, r16
    85c2:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    85c6:	88 23       	and	r24, r24
    85c8:	a1 f0       	breq	.+40     	; 0x85f2 <collision_detect_level+0x302>
    85ca:	af 89       	ldd	r26, Y+23	; 0x17
    85cc:	b8 8d       	ldd	r27, Y+24	; 0x18
    85ce:	14 96       	adiw	r26, 0x04	; 4
    85d0:	6d 91       	ld	r22, X+
    85d2:	7d 91       	ld	r23, X+
    85d4:	8d 91       	ld	r24, X+
    85d6:	9c 91       	ld	r25, X
    85d8:	17 97       	sbiw	r26, 0x07	; 7
    85da:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    85de:	dc 01       	movw	r26, r24
    85e0:	cb 01       	movw	r24, r22
    85e2:	28 e0       	ldi	r18, 0x08	; 8
    85e4:	48 e0       	ldi	r20, 0x08	; 8
    85e6:	6a 81       	ldd	r22, Y+2	; 0x02
    85e8:	7b 81       	ldd	r23, Y+3	; 0x03
    85ea:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    85ee:	84 30       	cpi	r24, 0x04	; 4
    85f0:	b8 f4       	brcc	.+46     	; 0x8620 <collision_detect_level+0x330>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    85f2:	8f 2d       	mov	r24, r15
    85f4:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
				if ((solid_tile(lt1) && pixel_overlap(s->x, x0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) || 
    85f8:	88 23       	and	r24, r24
    85fa:	49 f1       	breq	.+82     	; 0x864e <collision_detect_level+0x35e>
					(solid_tile(lt2) && pixel_overlap(s->x, x1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    85fc:	ef 89       	ldd	r30, Y+23	; 0x17
    85fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    8600:	64 81       	ldd	r22, Z+4	; 0x04
    8602:	75 81       	ldd	r23, Z+5	; 0x05
    8604:	86 81       	ldd	r24, Z+6	; 0x06
    8606:	97 81       	ldd	r25, Z+7	; 0x07
    8608:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    860c:	dc 01       	movw	r26, r24
    860e:	cb 01       	movw	r24, r22
    8610:	28 e0       	ldi	r18, 0x08	; 8
    8612:	48 e0       	ldi	r20, 0x08	; 8
    8614:	6c 81       	ldd	r22, Y+4	; 0x04
    8616:	7d 81       	ldd	r23, Y+5	; 0x05
    8618:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    861c:	84 30       	cpi	r24, 0x04	; 4
    861e:	b8 f0       	brcs	.+46     	; 0x864e <collision_detect_level+0x35e>
				{
					s->vy =  0;
    8620:	af 89       	ldd	r26, Y+23	; 0x17
    8622:	b8 8d       	ldd	r27, Y+24	; 0x18
    8624:	1d 92       	st	X+, r1
    8626:	1d 92       	st	X+, r1
    8628:	1d 92       	st	X+, r1
    862a:	1c 92       	st	X, r1
    862c:	13 97       	sbiw	r26, 0x03	; 3
					s->gravity = 0;
    862e:	1e 96       	adiw	r26, 0x0e	; 14
    8630:	1c 92       	st	X, r1
					s->y = y0_tile * 8;
    8632:	6b 89       	ldd	r22, Y+19	; 0x13
    8634:	7c 89       	ldd	r23, Y+20	; 0x14
    8636:	8d 89       	ldd	r24, Y+21	; 0x15
    8638:	9e 89       	ldd	r25, Y+22	; 0x16
    863a:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    863e:	ef 89       	ldd	r30, Y+23	; 0x17
    8640:	f8 8d       	ldd	r31, Y+24	; 0x18
    8642:	60 87       	std	Z+8, r22	; 0x08
    8644:	71 87       	std	Z+9, r23	; 0x09
    8646:	82 87       	std	Z+10, r24	; 0x0a
    8648:	93 87       	std	Z+11, r25	; 0x0b
					result = 1;
    864a:	f1 e0       	ldi	r31, 0x01	; 1
    864c:	f9 83       	std	Y+1, r31	; 0x01
    864e:	2f ef       	ldi	r18, 0xFF	; 255
    8650:	62 1a       	sub	r6, r18
    8652:	72 0a       	sbc	r7, r18
    8654:	3f ef       	ldi	r19, 0xFF	; 255
    8656:	43 1a       	sub	r4, r19
    8658:	53 0a       	sbc	r5, r19
    865a:	f7 ce       	rjmp	.-530    	; 0x844a <collision_detect_level+0x15a>
	u16 x0_tile = s->x / 8;
	u16 y0_tile = s->y / 8;
	u16 x1_tile = (s->x+7) / 8;
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
    865c:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    865e:	af 89       	ldd	r26, Y+23	; 0x17
    8660:	b8 8d       	ldd	r27, Y+24	; 0x18
    8662:	1c 96       	adiw	r26, 0x0c	; 12
    8664:	8d 91       	ld	r24, X+
    8666:	9c 91       	ld	r25, X
    8668:	1d 97       	sbiw	r26, 0x0d	; 13
    866a:	89 2b       	or	r24, r25
    866c:	09 f4       	brne	.+2      	; 0x8670 <collision_detect_level+0x380>
    866e:	4c c1       	rjmp	.+664    	; 0x8908 <collision_detect_level+0x618>
	{
		y0_tile = s->y / 8;
    8670:	18 96       	adiw	r26, 0x08	; 8
    8672:	cd 90       	ld	r12, X+
    8674:	dd 90       	ld	r13, X+
    8676:	ed 90       	ld	r14, X+
    8678:	fc 90       	ld	r15, X
    867a:	1b 97       	sbiw	r26, 0x0b	; 11
    867c:	20 e0       	ldi	r18, 0x00	; 0
    867e:	30 e0       	ldi	r19, 0x00	; 0
    8680:	40 e0       	ldi	r20, 0x00	; 0
    8682:	5e e3       	ldi	r21, 0x3E	; 62
    8684:	c7 01       	movw	r24, r14
    8686:	b6 01       	movw	r22, r12
    8688:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    868c:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8690:	2b 01       	movw	r4, r22
    8692:	3c 01       	movw	r6, r24
    8694:	6d 87       	std	Y+13, r22	; 0x0d
		y1_tile = (s->y+7) / 8;
    8696:	20 e0       	ldi	r18, 0x00	; 0
    8698:	30 e0       	ldi	r19, 0x00	; 0
    869a:	40 ee       	ldi	r20, 0xE0	; 224
    869c:	50 e4       	ldi	r21, 0x40	; 64
    869e:	c7 01       	movw	r24, r14
    86a0:	b6 01       	movw	r22, r12
    86a2:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    86a6:	20 e0       	ldi	r18, 0x00	; 0
    86a8:	30 e0       	ldi	r19, 0x00	; 0
    86aa:	40 e0       	ldi	r20, 0x00	; 0
    86ac:	5e e3       	ldi	r21, 0x3E	; 62
    86ae:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    86b2:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    86b6:	12 01       	movw	r2, r4
    86b8:	83 e0       	ldi	r24, 0x03	; 3
    86ba:	22 0c       	add	r2, r2
    86bc:	33 1c       	adc	r3, r3
    86be:	8a 95       	dec	r24
    86c0:	e1 f7       	brne	.-8      	; 0x86ba <collision_detect_level+0x3ca>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    86c2:	fb 01       	movw	r30, r22
    86c4:	93 e0       	ldi	r25, 0x03	; 3
    86c6:	ee 0f       	add	r30, r30
    86c8:	ff 1f       	adc	r31, r31
    86ca:	9a 95       	dec	r25
    86cc:	e1 f7       	brne	.-8      	; 0x86c6 <collision_detect_level+0x3d6>
    86ce:	fb 83       	std	Y+3, r31	; 0x03
    86d0:	ea 83       	std	Y+2, r30	; 0x02
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    86d2:	ff ef       	ldi	r31, 0xFF	; 255
    86d4:	8f 1a       	sub	r8, r31
    86d6:	9f 0a       	sbc	r9, r31
    86d8:	94 01       	movw	r18, r8
    86da:	43 e0       	ldi	r20, 0x03	; 3
    86dc:	22 0f       	add	r18, r18
    86de:	33 1f       	adc	r19, r19
    86e0:	4a 95       	dec	r20
    86e2:	e1 f7       	brne	.-8      	; 0x86dc <collision_detect_level+0x3ec>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    86e4:	a8 e0       	ldi	r26, 0x08	; 8
    86e6:	1a 9f       	mul	r17, r26
    86e8:	a0 01       	movw	r20, r0
    86ea:	11 24       	eor	r1, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    86ec:	49 01       	movw	r8, r18
    86ee:	b8 e0       	ldi	r27, 0x08	; 8
    86f0:	8b 1a       	sub	r8, r27
    86f2:	91 08       	sbc	r9, r1
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    86f4:	6b 01       	movw	r12, r22
    86f6:	82 01       	movw	r16, r4
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    86f8:	b9 01       	movw	r22, r18
    86fa:	80 e0       	ldi	r24, 0x00	; 0
    86fc:	90 e0       	ldi	r25, 0x00	; 0
    86fe:	6c 83       	std	Y+4, r22	; 0x04
    8700:	7d 83       	std	Y+5, r23	; 0x05
    8702:	8e 83       	std	Y+6, r24	; 0x06
    8704:	9f 83       	std	Y+7, r25	; 0x07
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    8706:	ca 01       	movw	r24, r20
    8708:	aa 27       	eor	r26, r26
    870a:	97 fd       	sbrc	r25, 7
    870c:	a0 95       	com	r26
    870e:	ba 2f       	mov	r27, r26
    8710:	89 87       	std	Y+9, r24	; 0x09
    8712:	9a 87       	std	Y+10, r25	; 0x0a
    8714:	ab 87       	std	Y+11, r26	; 0x0b
    8716:	bc 87       	std	Y+12, r27	; 0x0c
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    8718:	a1 2c       	mov	r10, r1
    871a:	b1 2c       	mov	r11, r1
    871c:	80 2f       	mov	r24, r16
    871e:	3d 85       	ldd	r19, Y+13	; 0x0d
    8720:	83 1b       	sub	r24, r19
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    8722:	49 89       	ldd	r20, Y+17	; 0x11
    8724:	84 17       	cp	r24, r20
    8726:	08 f0       	brcs	.+2      	; 0x872a <collision_detect_level+0x43a>
    8728:	ef c0       	rjmp	.+478    	; 0x8908 <collision_detect_level+0x618>
		{
			if (s->vx < 0)
    872a:	af 89       	ldd	r26, Y+23	; 0x17
    872c:	b8 8d       	ldd	r27, Y+24	; 0x18
    872e:	1c 96       	adiw	r26, 0x0c	; 12
    8730:	8d 91       	ld	r24, X+
    8732:	9c 91       	ld	r25, X
    8734:	1d 97       	sbiw	r26, 0x0d	; 13
    8736:	97 ff       	sbrs	r25, 7
    8738:	53 c0       	rjmp	.+166    	; 0x87e0 <collision_detect_level+0x4f0>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    873a:	a8 01       	movw	r20, r16
    873c:	68 85       	ldd	r22, Y+8	; 0x08
    873e:	7a 89       	ldd	r23, Y+18	; 0x12
    8740:	80 91 9f 0d 	lds	r24, 0x0D9F
    8744:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    8748:	78 2e       	mov	r7, r24
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    874a:	a6 01       	movw	r20, r12
    874c:	68 85       	ldd	r22, Y+8	; 0x08
    874e:	7a 89       	ldd	r23, Y+18	; 0x12
    8750:	80 91 9f 0d 	lds	r24, 0x0D9F
    8754:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    8758:	e8 2e       	mov	r14, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    875a:	87 2d       	mov	r24, r7
    875c:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    8760:	88 23       	and	r24, r24
    8762:	89 f0       	breq	.+34     	; 0x8786 <collision_detect_level+0x496>
    8764:	ef 89       	ldd	r30, Y+23	; 0x17
    8766:	f8 8d       	ldd	r31, Y+24	; 0x18
    8768:	60 85       	ldd	r22, Z+8	; 0x08
    876a:	71 85       	ldd	r23, Z+9	; 0x09
    876c:	82 85       	ldd	r24, Z+10	; 0x0a
    876e:	93 85       	ldd	r25, Z+11	; 0x0b
    8770:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8774:	dc 01       	movw	r26, r24
    8776:	cb 01       	movw	r24, r22
    8778:	28 e0       	ldi	r18, 0x08	; 8
    877a:	48 e0       	ldi	r20, 0x08	; 8
    877c:	b1 01       	movw	r22, r2
    877e:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    8782:	84 30       	cpi	r24, 0x04	; 4
    8784:	c8 f4       	brcc	.+50     	; 0x87b8 <collision_detect_level+0x4c8>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8786:	8e 2d       	mov	r24, r14
    8788:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
		{
			if (s->vx < 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    878c:	88 23       	and	r24, r24
    878e:	41 f1       	breq	.+80     	; 0x87e0 <collision_detect_level+0x4f0>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    8790:	af 89       	ldd	r26, Y+23	; 0x17
    8792:	b8 8d       	ldd	r27, Y+24	; 0x18
    8794:	18 96       	adiw	r26, 0x08	; 8
    8796:	6d 91       	ld	r22, X+
    8798:	7d 91       	ld	r23, X+
    879a:	8d 91       	ld	r24, X+
    879c:	9c 91       	ld	r25, X
    879e:	1b 97       	sbiw	r26, 0x0b	; 11
    87a0:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    87a4:	dc 01       	movw	r26, r24
    87a6:	cb 01       	movw	r24, r22
    87a8:	28 e0       	ldi	r18, 0x08	; 8
    87aa:	48 e0       	ldi	r20, 0x08	; 8
    87ac:	6a 81       	ldd	r22, Y+2	; 0x02
    87ae:	7b 81       	ldd	r23, Y+3	; 0x03
    87b0:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    87b4:	84 30       	cpi	r24, 0x04	; 4
    87b6:	a0 f0       	brcs	.+40     	; 0x87e0 <collision_detect_level+0x4f0>
				{
					s->vx =  0;
    87b8:	ef 89       	ldd	r30, Y+23	; 0x17
    87ba:	f8 8d       	ldd	r31, Y+24	; 0x18
    87bc:	15 86       	std	Z+13, r1	; 0x0d
    87be:	14 86       	std	Z+12, r1	; 0x0c
					s->x = (x0_tile + 1) * 8;
    87c0:	6c 81       	ldd	r22, Y+4	; 0x04
    87c2:	7d 81       	ldd	r23, Y+5	; 0x05
    87c4:	8e 81       	ldd	r24, Y+6	; 0x06
    87c6:	9f 81       	ldd	r25, Y+7	; 0x07
    87c8:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    87cc:	af 89       	ldd	r26, Y+23	; 0x17
    87ce:	b8 8d       	ldd	r27, Y+24	; 0x18
    87d0:	14 96       	adiw	r26, 0x04	; 4
    87d2:	6d 93       	st	X+, r22
    87d4:	7d 93       	st	X+, r23
    87d6:	8d 93       	st	X+, r24
    87d8:	9c 93       	st	X, r25
    87da:	17 97       	sbiw	r26, 0x07	; 7
					result = 1;
    87dc:	b1 e0       	ldi	r27, 0x01	; 1
    87de:	b9 83       	std	Y+1, r27	; 0x01
				}
			}
			
			if (s->vx > 0)
    87e0:	ef 89       	ldd	r30, Y+23	; 0x17
    87e2:	f8 8d       	ldd	r31, Y+24	; 0x18
    87e4:	84 85       	ldd	r24, Z+12	; 0x0c
    87e6:	95 85       	ldd	r25, Z+13	; 0x0d
    87e8:	18 16       	cp	r1, r24
    87ea:	19 06       	cpc	r1, r25
    87ec:	0c f0       	brlt	.+2      	; 0x87f0 <collision_detect_level+0x500>
    87ee:	85 c0       	rjmp	.+266    	; 0x88fa <collision_detect_level+0x60a>
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    87f0:	69 85       	ldd	r22, Y+9	; 0x09
    87f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    87f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    87f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    87f8:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    87fc:	2b 01       	movw	r4, r22
    87fe:	3c 01       	movw	r6, r24
    8800:	af 89       	ldd	r26, Y+23	; 0x17
    8802:	b8 8d       	ldd	r27, Y+24	; 0x18
    8804:	14 96       	adiw	r26, 0x04	; 4
    8806:	2d 91       	ld	r18, X+
    8808:	3d 91       	ld	r19, X+
    880a:	4d 91       	ld	r20, X+
    880c:	5c 91       	ld	r21, X
    880e:	17 97       	sbiw	r26, 0x07	; 7
    8810:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8814:	20 e0       	ldi	r18, 0x00	; 0
    8816:	30 e0       	ldi	r19, 0x00	; 0
    8818:	40 e8       	ldi	r20, 0x80	; 128
    881a:	5f e3       	ldi	r21, 0x3F	; 63
    881c:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8820:	20 e0       	ldi	r18, 0x00	; 0
    8822:	30 e0       	ldi	r19, 0x00	; 0
    8824:	40 e0       	ldi	r20, 0x00	; 0
    8826:	5e e3       	ldi	r21, 0x3E	; 62
    8828:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    882c:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8830:	a8 01       	movw	r20, r16
    8832:	80 91 9f 0d 	lds	r24, 0x0D9F
    8836:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    883a:	e8 2e       	mov	r14, r24
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    883c:	ef 89       	ldd	r30, Y+23	; 0x17
    883e:	f8 8d       	ldd	r31, Y+24	; 0x18
    8840:	24 81       	ldd	r18, Z+4	; 0x04
    8842:	35 81       	ldd	r19, Z+5	; 0x05
    8844:	46 81       	ldd	r20, Z+6	; 0x06
    8846:	57 81       	ldd	r21, Z+7	; 0x07
    8848:	c3 01       	movw	r24, r6
    884a:	b2 01       	movw	r22, r4
    884c:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8850:	20 e0       	ldi	r18, 0x00	; 0
    8852:	30 e0       	ldi	r19, 0x00	; 0
    8854:	40 e8       	ldi	r20, 0x80	; 128
    8856:	5f e3       	ldi	r21, 0x3F	; 63
    8858:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    885c:	20 e0       	ldi	r18, 0x00	; 0
    885e:	30 e0       	ldi	r19, 0x00	; 0
    8860:	40 e0       	ldi	r20, 0x00	; 0
    8862:	5e e3       	ldi	r21, 0x3E	; 62
    8864:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8868:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    886c:	a6 01       	movw	r20, r12
    886e:	80 91 9f 0d 	lds	r24, 0x0D9F
    8872:	0e 94 c2 3d 	call	0x7b84	; 0x7b84 <get_level_tile>
    8876:	78 2e       	mov	r7, r24
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    8878:	8e 2d       	mov	r24, r14
    887a:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
    887e:	88 23       	and	r24, r24
    8880:	99 f0       	breq	.+38     	; 0x88a8 <collision_detect_level+0x5b8>
    8882:	af 89       	ldd	r26, Y+23	; 0x17
    8884:	b8 8d       	ldd	r27, Y+24	; 0x18
    8886:	18 96       	adiw	r26, 0x08	; 8
    8888:	6d 91       	ld	r22, X+
    888a:	7d 91       	ld	r23, X+
    888c:	8d 91       	ld	r24, X+
    888e:	9c 91       	ld	r25, X
    8890:	1b 97       	sbiw	r26, 0x0b	; 11
    8892:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8896:	dc 01       	movw	r26, r24
    8898:	cb 01       	movw	r24, r22
    889a:	28 e0       	ldi	r18, 0x08	; 8
    889c:	48 e0       	ldi	r20, 0x08	; 8
    889e:	b1 01       	movw	r22, r2
    88a0:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    88a4:	84 30       	cpi	r24, 0x04	; 4
    88a6:	b8 f4       	brcc	.+46     	; 0x88d6 <collision_detect_level+0x5e6>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    88a8:	87 2d       	mov	r24, r7
    88aa:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <solid_tile>
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
				if ((solid_tile(lt1) && pixel_overlap(s->y, y0_tile * 8, 8, 8) >= OVERLAP_THRESHOLD) ||
    88ae:	88 23       	and	r24, r24
    88b0:	21 f1       	breq	.+72     	; 0x88fa <collision_detect_level+0x60a>
					(solid_tile(lt2) && pixel_overlap(s->y, y1_tile * 8, 8, 8) >= OVERLAP_THRESHOLD))
    88b2:	ef 89       	ldd	r30, Y+23	; 0x17
    88b4:	f8 8d       	ldd	r31, Y+24	; 0x18
    88b6:	60 85       	ldd	r22, Z+8	; 0x08
    88b8:	71 85       	ldd	r23, Z+9	; 0x09
    88ba:	82 85       	ldd	r24, Z+10	; 0x0a
    88bc:	93 85       	ldd	r25, Z+11	; 0x0b
    88be:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    88c2:	dc 01       	movw	r26, r24
    88c4:	cb 01       	movw	r24, r22
    88c6:	28 e0       	ldi	r18, 0x08	; 8
    88c8:	48 e0       	ldi	r20, 0x08	; 8
    88ca:	6a 81       	ldd	r22, Y+2	; 0x02
    88cc:	7b 81       	ldd	r23, Y+3	; 0x03
    88ce:	0e 94 64 41 	call	0x82c8	; 0x82c8 <pixel_overlap>
    88d2:	84 30       	cpi	r24, 0x04	; 4
    88d4:	90 f0       	brcs	.+36     	; 0x88fa <collision_detect_level+0x60a>
				{
					s->vx =  0;
    88d6:	af 89       	ldd	r26, Y+23	; 0x17
    88d8:	b8 8d       	ldd	r27, Y+24	; 0x18
    88da:	1d 96       	adiw	r26, 0x0d	; 13
    88dc:	1c 92       	st	X, r1
    88de:	1e 92       	st	-X, r1
    88e0:	1c 97       	sbiw	r26, 0x0c	; 12
					s->x = x0_tile * 8;
    88e2:	c5 01       	movw	r24, r10
    88e4:	b4 01       	movw	r22, r8
    88e6:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    88ea:	ef 89       	ldd	r30, Y+23	; 0x17
    88ec:	f8 8d       	ldd	r31, Y+24	; 0x18
    88ee:	64 83       	std	Z+4, r22	; 0x04
    88f0:	75 83       	std	Z+5, r23	; 0x05
    88f2:	86 83       	std	Z+6, r24	; 0x06
    88f4:	97 83       	std	Z+7, r25	; 0x07
					result = 1;
    88f6:	f1 e0       	ldi	r31, 0x01	; 1
    88f8:	f9 83       	std	Y+1, r31	; 0x01
    88fa:	0f 5f       	subi	r16, 0xFF	; 255
    88fc:	1f 4f       	sbci	r17, 0xFF	; 255
    88fe:	2f ef       	ldi	r18, 0xFF	; 255
    8900:	c2 1a       	sub	r12, r18
    8902:	d2 0a       	sbc	r13, r18
    8904:	0b cf       	rjmp	.-490    	; 0x871c <collision_detect_level+0x42c>
	u16 y1_tile = (s->y+7) / 8;
	u8 lt1, lt2;
	u8 result = 0;
	
	// Only if moving
	if (s->vx == 0 && s->vy == 0) return result;
    8906:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}
	return result;
}
    8908:	89 81       	ldd	r24, Y+1	; 0x01
    890a:	68 96       	adiw	r28, 0x18	; 24
    890c:	0f b6       	in	r0, 0x3f	; 63
    890e:	f8 94       	cli
    8910:	de bf       	out	0x3e, r29	; 62
    8912:	0f be       	out	0x3f, r0	; 63
    8914:	cd bf       	out	0x3d, r28	; 61
    8916:	df 91       	pop	r29
    8918:	cf 91       	pop	r28
    891a:	1f 91       	pop	r17
    891c:	0f 91       	pop	r16
    891e:	ff 90       	pop	r15
    8920:	ef 90       	pop	r14
    8922:	df 90       	pop	r13
    8924:	cf 90       	pop	r12
    8926:	bf 90       	pop	r11
    8928:	af 90       	pop	r10
    892a:	9f 90       	pop	r9
    892c:	8f 90       	pop	r8
    892e:	7f 90       	pop	r7
    8930:	6f 90       	pop	r6
    8932:	5f 90       	pop	r5
    8934:	4f 90       	pop	r4
    8936:	3f 90       	pop	r3
    8938:	2f 90       	pop	r2
    893a:	08 95       	ret

0000893c <animate_shot>:
		game.player.active_shots++;
	}
}

void animate_shot()
{
    893c:	2f 92       	push	r2
    893e:	3f 92       	push	r3
    8940:	4f 92       	push	r4
    8942:	5f 92       	push	r5
    8944:	6f 92       	push	r6
    8946:	7f 92       	push	r7
    8948:	8f 92       	push	r8
    894a:	9f 92       	push	r9
    894c:	af 92       	push	r10
    894e:	bf 92       	push	r11
    8950:	cf 92       	push	r12
    8952:	df 92       	push	r13
    8954:	ef 92       	push	r14
    8956:	ff 92       	push	r15
    8958:	0f 93       	push	r16
    895a:	1f 93       	push	r17
    895c:	cf 93       	push	r28
    895e:	df 93       	push	r29
    8960:	cd b7       	in	r28, 0x3d	; 61
    8962:	de b7       	in	r29, 0x3e	; 62
    8964:	2f 97       	sbiw	r28, 0x0f	; 15
    8966:	0f b6       	in	r0, 0x3f	; 63
    8968:	f8 94       	cli
    896a:	de bf       	out	0x3e, r29	; 62
    896c:	0f be       	out	0x3f, r0	; 63
    896e:	cd bf       	out	0x3d, r28	; 61
    8970:	90 ed       	ldi	r25, 0xD0	; 208
    8972:	89 2e       	mov	r8, r25
    8974:	9d e0       	ldi	r25, 0x0D	; 13
    8976:	99 2e       	mov	r9, r25
    8978:	8f eb       	ldi	r24, 0xBF	; 191
    897a:	9d e0       	ldi	r25, 0x0D	; 13
    897c:	9f 87       	std	Y+15, r25	; 0x0f
    897e:	8e 87       	std	Y+14, r24	; 0x0e
    8980:	9b e0       	ldi	r25, 0x0B	; 11
    8982:	99 83       	std	Y+1, r25	; 0x01
					)
					{
						game.enemies[j].shield -= game.player.shot[i].hit_count;
						if (game.enemies[j].shield <= 0)
						{
							game.enemies[j].flags = EXPLODING;
    8984:	20 e1       	ldi	r18, 0x10	; 16
    8986:	b2 2e       	mov	r11, r18
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (game.player.shot[i].active)
    8988:	f4 01       	movw	r30, r8
    898a:	80 81       	ld	r24, Z
    898c:	88 23       	and	r24, r24
    898e:	09 f4       	brne	.+2      	; 0x8992 <animate_shot+0x56>
    8990:	3b c1       	rjmp	.+630    	; 0x8c08 <animate_shot+0x2cc>
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
    8992:	ee 85       	ldd	r30, Y+14	; 0x0e
    8994:	ff 85       	ldd	r31, Y+15	; 0x0f
    8996:	64 85       	ldd	r22, Z+12	; 0x0c
    8998:	75 85       	ldd	r23, Z+13	; 0x0d
    899a:	88 27       	eor	r24, r24
    899c:	77 fd       	sbrc	r23, 7
    899e:	80 95       	com	r24
    89a0:	98 2f       	mov	r25, r24
    89a2:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    89a6:	29 e8       	ldi	r18, 0x89	; 137
    89a8:	38 e8       	ldi	r19, 0x88	; 136
    89aa:	48 e8       	ldi	r20, 0x88	; 136
    89ac:	5c e3       	ldi	r21, 0x3C	; 60
    89ae:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    89b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    89b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    89b6:	24 81       	ldd	r18, Z+4	; 0x04
    89b8:	35 81       	ldd	r19, Z+5	; 0x05
    89ba:	46 81       	ldd	r20, Z+6	; 0x06
    89bc:	57 81       	ldd	r21, Z+7	; 0x07
    89be:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    89c2:	2b 01       	movw	r4, r22
    89c4:	3c 01       	movw	r6, r24
    89c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    89c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    89ca:	64 83       	std	Z+4, r22	; 0x04
    89cc:	75 83       	std	Z+5, r23	; 0x05
    89ce:	86 83       	std	Z+6, r24	; 0x06
    89d0:	97 83       	std	Z+7, r25	; 0x07
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
    89d2:	29 e8       	ldi	r18, 0x89	; 137
    89d4:	38 e8       	ldi	r19, 0x88	; 136
    89d6:	48 e8       	ldi	r20, 0x88	; 136
    89d8:	5c e3       	ldi	r21, 0x3C	; 60
    89da:	60 81       	ld	r22, Z
    89dc:	71 81       	ldd	r23, Z+1	; 0x01
    89de:	82 81       	ldd	r24, Z+2	; 0x02
    89e0:	93 81       	ldd	r25, Z+3	; 0x03
    89e2:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    89e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    89e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    89ea:	20 85       	ldd	r18, Z+8	; 0x08
    89ec:	31 85       	ldd	r19, Z+9	; 0x09
    89ee:	42 85       	ldd	r20, Z+10	; 0x0a
    89f0:	53 85       	ldd	r21, Z+11	; 0x0b
    89f2:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    89f6:	6b 01       	movw	r12, r22
    89f8:	7c 01       	movw	r14, r24
    89fa:	ee 85       	ldd	r30, Y+14	; 0x0e
    89fc:	ff 85       	ldd	r31, Y+15	; 0x0f
    89fe:	60 87       	std	Z+8, r22	; 0x08
    8a00:	71 87       	std	Z+9, r23	; 0x09
    8a02:	82 87       	std	Z+10, r24	; 0x0a
    8a04:	93 87       	std	Z+11, r25	; 0x0b
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
    8a06:	60 91 95 0d 	lds	r22, 0x0D95
    8a0a:	70 91 96 0d 	lds	r23, 0x0D96
    8a0e:	80 e0       	ldi	r24, 0x00	; 0
    8a10:	90 e0       	ldi	r25, 0x00	; 0
    8a12:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8a16:	9b 01       	movw	r18, r22
    8a18:	ac 01       	movw	r20, r24
    8a1a:	c7 01       	movw	r24, r14
    8a1c:	b6 01       	movw	r22, r12
    8a1e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8a22:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8a26:	c6 2e       	mov	r12, r22
    8a28:	80 91 93 0d 	lds	r24, 0x0D93
    8a2c:	90 91 94 0d 	lds	r25, 0x0D94
    8a30:	bc 01       	movw	r22, r24
    8a32:	80 e0       	ldi	r24, 0x00	; 0
    8a34:	90 e0       	ldi	r25, 0x00	; 0
    8a36:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8a3a:	9b 01       	movw	r18, r22
    8a3c:	ac 01       	movw	r20, r24
    8a3e:	c3 01       	movw	r24, r6
    8a40:	b2 01       	movw	r22, r4
    8a42:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8a46:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8a4a:	01 e0       	ldi	r16, 0x01	; 1
    8a4c:	21 e0       	ldi	r18, 0x01	; 1
    8a4e:	4c 2d       	mov	r20, r12
    8a50:	89 81       	ldd	r24, Y+1	; 0x01
    8a52:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8a56:	ee 85       	ldd	r30, Y+14	; 0x0e
    8a58:	ff 85       	ldd	r31, Y+15	; 0x0f
    8a5a:	c4 80       	ldd	r12, Z+4	; 0x04
    8a5c:	d5 80       	ldd	r13, Z+5	; 0x05
    8a5e:	e6 80       	ldd	r14, Z+6	; 0x06
    8a60:	f7 80       	ldd	r15, Z+7	; 0x07
    8a62:	60 90 93 0d 	lds	r6, 0x0D93
    8a66:	70 90 94 0d 	lds	r7, 0x0D94
    8a6a:	b3 01       	movw	r22, r6
    8a6c:	80 e0       	ldi	r24, 0x00	; 0
    8a6e:	90 e0       	ldi	r25, 0x00	; 0
    8a70:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8a74:	9b 01       	movw	r18, r22
    8a76:	ac 01       	movw	r20, r24
    8a78:	c7 01       	movw	r24, r14
    8a7a:	b6 01       	movw	r22, r12
    8a7c:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    8a80:	87 ff       	sbrs	r24, 7
    8a82:	0f c0       	rjmp	.+30     	; 0x8aa2 <animate_shot+0x166>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
			{
				game.player.shot[i].active = 0;
    8a84:	f4 01       	movw	r30, r8
    8a86:	10 82       	st	Z, r1
				game.player.active_shots--;
    8a88:	80 91 b8 0d 	lds	r24, 0x0DB8
    8a8c:	81 50       	subi	r24, 0x01	; 1
    8a8e:	80 93 b8 0d 	sts	0x0DB8, r24
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    8a92:	01 e0       	ldi	r16, 0x01	; 1
    8a94:	21 e0       	ldi	r18, 0x01	; 1
    8a96:	40 e0       	ldi	r20, 0x00	; 0
    8a98:	60 ee       	ldi	r22, 0xE0	; 224
    8a9a:	89 81       	ldd	r24, Y+1	; 0x01
    8a9c:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
    8aa0:	b3 c0       	rjmp	.+358    	; 0x8c08 <animate_shot+0x2cc>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8aa2:	20 e0       	ldi	r18, 0x00	; 0
    8aa4:	30 e0       	ldi	r19, 0x00	; 0
    8aa6:	40 e0       	ldi	r20, 0x00	; 0
    8aa8:	51 e4       	ldi	r21, 0x41	; 65
    8aaa:	c7 01       	movw	r24, r14
    8aac:	b6 01       	movw	r22, r12
    8aae:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8ab2:	1b 01       	movw	r2, r22
    8ab4:	2c 01       	movw	r4, r24
    8ab6:	b3 01       	movw	r22, r6
    8ab8:	60 52       	subi	r22, 0x20	; 32
    8aba:	7f 4f       	sbci	r23, 0xFF	; 255
    8abc:	80 e0       	ldi	r24, 0x00	; 0
    8abe:	90 e0       	ldi	r25, 0x00	; 0
    8ac0:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8ac4:	9b 01       	movw	r18, r22
    8ac6:	ac 01       	movw	r20, r24
    8ac8:	c2 01       	movw	r24, r4
    8aca:	b1 01       	movw	r22, r2
    8acc:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    8ad0:	18 16       	cp	r1, r24
    8ad2:	c4 f2       	brlt	.-80     	; 0x8a84 <animate_shot+0x148>
			    collision_detect_level(&game.player.shot[i].shared, 1, 1))
    8ad4:	41 e0       	ldi	r20, 0x01	; 1
    8ad6:	61 e0       	ldi	r22, 0x01	; 1
    8ad8:	8e 85       	ldd	r24, Y+14	; 0x0e
    8ada:	9f 85       	ldd	r25, Y+15	; 0x0f
    8adc:	0e 94 78 41 	call	0x82f0	; 0x82f0 <collision_detect_level>
		if (game.player.shot[i].active)
		{
			game.player.shot[i].shared.x += game.player.shot[i].shared.vx*FRAME_TIME;
			game.player.shot[i].shared.y += game.player.shot[i].shared.vy*FRAME_TIME;
			LBMoveSprite(PLAYER_SHOT_SLOT+i, game.player.shot[i].shared.x - game.camera_x, game.player.shot[i].shared.y - game.camera_y, 1, 1);
			if (game.player.shot[i].shared.x < game.camera_x || game.player.shot[i].shared.x+8 > game.camera_x + CAMERA_WIDTH*8 ||
    8ae0:	81 11       	cpse	r24, r1
    8ae2:	d0 cf       	rjmp	.-96     	; 0x8a84 <animate_shot+0x148>
    8ae4:	8b e4       	ldi	r24, 0x4B	; 75
    8ae6:	28 2e       	mov	r2, r24
    8ae8:	8e e0       	ldi	r24, 0x0E	; 14
    8aea:	38 2e       	mov	r3, r24
    8aec:	61 2c       	mov	r6, r1
    8aee:	71 2c       	mov	r7, r1
    8af0:	24 01       	movw	r4, r8
    8af2:	f1 e0       	ldi	r31, 0x01	; 1
    8af4:	4f 1a       	sub	r4, r31
    8af6:	51 08       	sbc	r5, r1
    8af8:	f1 01       	movw	r30, r2
    8afa:	37 97       	sbiw	r30, 0x07	; 7
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    8afc:	80 81       	ld	r24, Z
    8afe:	88 23       	and	r24, r24
    8b00:	09 f4       	brne	.+2      	; 0x8b04 <animate_shot+0x1c8>
    8b02:	77 c0       	rjmp	.+238    	; 0x8bf2 <animate_shot+0x2b6>
    8b04:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
    8b06:	a0 80       	ld	r10, Z
    8b08:	aa 0c       	add	r10, r10
    8b0a:	aa 0c       	add	r10, r10
    8b0c:	aa 0c       	add	r10, r10
    8b0e:	31 97       	sbiw	r30, 0x01	; 1
    8b10:	c0 80       	ld	r12, Z
    8b12:	cc 0c       	add	r12, r12
    8b14:	cc 0c       	add	r12, r12
    8b16:	cc 0c       	add	r12, r12
    8b18:	3a 97       	sbiw	r30, 0x0a	; 10
    8b1a:	60 81       	ld	r22, Z
    8b1c:	71 81       	ldd	r23, Z+1	; 0x01
    8b1e:	82 81       	ldd	r24, Z+2	; 0x02
    8b20:	93 81       	ldd	r25, Z+3	; 0x03
    8b22:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8b26:	6a 83       	std	Y+2, r22	; 0x02
    8b28:	7b 83       	std	Y+3, r23	; 0x03
    8b2a:	8c 83       	std	Y+4, r24	; 0x04
    8b2c:	9d 83       	std	Y+5, r25	; 0x05
    8b2e:	f1 01       	movw	r30, r2
    8b30:	72 97       	sbiw	r30, 0x12	; 18
    8b32:	60 81       	ld	r22, Z
    8b34:	71 81       	ldd	r23, Z+1	; 0x01
    8b36:	82 81       	ldd	r24, Z+2	; 0x02
    8b38:	93 81       	ldd	r25, Z+3	; 0x03
    8b3a:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8b3e:	6e 83       	std	Y+6, r22	; 0x06
    8b40:	7f 83       	std	Y+7, r23	; 0x07
    8b42:	88 87       	std	Y+8, r24	; 0x08
    8b44:	99 87       	std	Y+9, r25	; 0x09
    8b46:	ee 85       	ldd	r30, Y+14	; 0x0e
    8b48:	ff 85       	ldd	r31, Y+15	; 0x0f
    8b4a:	60 85       	ldd	r22, Z+8	; 0x08
    8b4c:	71 85       	ldd	r23, Z+9	; 0x09
    8b4e:	82 85       	ldd	r24, Z+10	; 0x0a
    8b50:	93 85       	ldd	r25, Z+11	; 0x0b
    8b52:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8b56:	6a 87       	std	Y+10, r22	; 0x0a
    8b58:	7b 87       	std	Y+11, r23	; 0x0b
    8b5a:	8c 87       	std	Y+12, r24	; 0x0c
    8b5c:	9d 87       	std	Y+13, r25	; 0x0d
    8b5e:	ee 85       	ldd	r30, Y+14	; 0x0e
    8b60:	ff 85       	ldd	r31, Y+15	; 0x0f
    8b62:	64 81       	ldd	r22, Z+4	; 0x04
    8b64:	75 81       	ldd	r23, Z+5	; 0x05
    8b66:	86 81       	ldd	r24, Z+6	; 0x06
    8b68:	97 81       	ldd	r25, Z+7	; 0x07
    8b6a:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8b6e:	dc 01       	movw	r26, r24
    8b70:	cb 01       	movw	r24, r22
    8b72:	ea 80       	ldd	r14, Y+2	; 0x02
    8b74:	fb 80       	ldd	r15, Y+3	; 0x03
    8b76:	0e 81       	ldd	r16, Y+6	; 0x06
    8b78:	1f 81       	ldd	r17, Y+7	; 0x07
    8b7a:	28 e0       	ldi	r18, 0x08	; 8
    8b7c:	48 e0       	ldi	r20, 0x08	; 8
    8b7e:	6a 85       	ldd	r22, Y+10	; 0x0a
    8b80:	7b 85       	ldd	r23, Y+11	; 0x0b
    8b82:	0e 94 bd 3a 	call	0x757a	; 0x757a <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].active &&
    8b86:	88 23       	and	r24, r24
    8b88:	a1 f1       	breq	.+104    	; 0x8bf2 <animate_shot+0x2b6>
					    LBCollides(game.player.shot[i].shared.x,game.player.shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						game.enemies[j].shield -= game.player.shot[i].hit_count;
    8b8a:	f1 01       	movw	r30, r2
    8b8c:	80 81       	ld	r24, Z
    8b8e:	f2 01       	movw	r30, r4
    8b90:	90 81       	ld	r25, Z
    8b92:	89 1b       	sub	r24, r25
    8b94:	f1 01       	movw	r30, r2
    8b96:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    8b98:	18 16       	cp	r1, r24
    8b9a:	ec f0       	brlt	.+58     	; 0x8bd6 <animate_shot+0x29a>
						{
							game.enemies[j].flags = EXPLODING;
    8b9c:	f1 e4       	ldi	r31, 0x41	; 65
    8b9e:	f6 9d       	mul	r31, r6
    8ba0:	c0 01       	movw	r24, r0
    8ba2:	f7 9d       	mul	r31, r7
    8ba4:	90 0d       	add	r25, r0
    8ba6:	11 24       	eor	r1, r1
    8ba8:	81 57       	subi	r24, 0x71	; 113
    8baa:	92 4f       	sbci	r25, 0xF2	; 242
    8bac:	fc 01       	movw	r30, r24
    8bae:	ea 54       	subi	r30, 0x4A	; 74
    8bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    8bb2:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    8bb4:	31 97       	sbiw	r30, 0x01	; 1
    8bb6:	10 82       	st	Z, r1
							game.active_enemies--;
    8bb8:	80 91 a7 0d 	lds	r24, 0x0DA7
    8bbc:	81 50       	subi	r24, 0x01	; 1
    8bbe:	80 93 a7 0d 	sts	0x0DA7, r24
							game.score += KILL_SCORE;
    8bc2:	80 91 97 0d 	lds	r24, 0x0D97
    8bc6:	90 91 98 0d 	lds	r25, 0x0D98
    8bca:	0a 96       	adiw	r24, 0x0a	; 10
    8bcc:	90 93 98 0d 	sts	0x0D98, r25
    8bd0:	80 93 97 0d 	sts	0x0D97, r24
							break;
    8bd4:	19 c0       	rjmp	.+50     	; 0x8c08 <animate_shot+0x2cc>
						}
						game.player.shot[i].active = 0;
    8bd6:	f4 01       	movw	r30, r8
    8bd8:	10 82       	st	Z, r1
						game.player.active_shots--;
    8bda:	80 91 b8 0d 	lds	r24, 0x0DB8
    8bde:	81 50       	subi	r24, 0x01	; 1
    8be0:	80 93 b8 0d 	sts	0x0DB8, r24
						LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
    8be4:	01 e0       	ldi	r16, 0x01	; 1
    8be6:	21 e0       	ldi	r18, 0x01	; 1
    8be8:	40 e0       	ldi	r20, 0x00	; 0
    8bea:	60 ee       	ldi	r22, 0xE0	; 224
    8bec:	89 81       	ldd	r24, Y+1	; 0x01
    8bee:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
    8bf2:	ff ef       	ldi	r31, 0xFF	; 255
    8bf4:	6f 1a       	sub	r6, r31
    8bf6:	7f 0a       	sbc	r7, r31
    8bf8:	21 e4       	ldi	r18, 0x41	; 65
    8bfa:	22 0e       	add	r2, r18
    8bfc:	31 1c       	adc	r3, r1
				LBMoveSprite(PLAYER_SHOT_SLOT+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    8bfe:	85 e0       	ldi	r24, 0x05	; 5
    8c00:	68 16       	cp	r6, r24
    8c02:	71 04       	cpc	r7, r1
    8c04:	09 f0       	breq	.+2      	; 0x8c08 <animate_shot+0x2cc>
    8c06:	78 cf       	rjmp	.-272    	; 0x8af8 <animate_shot+0x1bc>
    8c08:	9a e1       	ldi	r25, 0x1A	; 26
    8c0a:	89 0e       	add	r8, r25
    8c0c:	91 1c       	adc	r9, r1
    8c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    8c10:	ef 5f       	subi	r30, 0xFF	; 255
    8c12:	e9 83       	std	Y+1, r30	; 0x01
    8c14:	8e 85       	ldd	r24, Y+14	; 0x0e
    8c16:	9f 85       	ldd	r25, Y+15	; 0x0f
    8c18:	4a 96       	adiw	r24, 0x1a	; 26
    8c1a:	9f 87       	std	Y+15, r25	; 0x0f
    8c1c:	8e 87       	std	Y+14, r24	; 0x0e

void animate_shot()
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    8c1e:	ee 30       	cpi	r30, 0x0E	; 14
    8c20:	09 f0       	breq	.+2      	; 0x8c24 <animate_shot+0x2e8>
    8c22:	b2 ce       	rjmp	.-668    	; 0x8988 <animate_shot+0x4c>
					slot += game.enemies[j].width*game.enemies[j].height;
				}
			}
		}
	}
}
    8c24:	2f 96       	adiw	r28, 0x0f	; 15
    8c26:	0f b6       	in	r0, 0x3f	; 63
    8c28:	f8 94       	cli
    8c2a:	de bf       	out	0x3e, r29	; 62
    8c2c:	0f be       	out	0x3f, r0	; 63
    8c2e:	cd bf       	out	0x3d, r28	; 61
    8c30:	df 91       	pop	r29
    8c32:	cf 91       	pop	r28
    8c34:	1f 91       	pop	r17
    8c36:	0f 91       	pop	r16
    8c38:	ff 90       	pop	r15
    8c3a:	ef 90       	pop	r14
    8c3c:	df 90       	pop	r13
    8c3e:	cf 90       	pop	r12
    8c40:	bf 90       	pop	r11
    8c42:	af 90       	pop	r10
    8c44:	9f 90       	pop	r9
    8c46:	8f 90       	pop	r8
    8c48:	7f 90       	pop	r7
    8c4a:	6f 90       	pop	r6
    8c4c:	5f 90       	pop	r5
    8c4e:	4f 90       	pop	r4
    8c50:	3f 90       	pop	r3
    8c52:	2f 90       	pop	r2
    8c54:	08 95       	ret

00008c56 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    8c56:	7f 92       	push	r7
    8c58:	8f 92       	push	r8
    8c5a:	9f 92       	push	r9
    8c5c:	af 92       	push	r10
    8c5e:	bf 92       	push	r11
    8c60:	cf 92       	push	r12
    8c62:	df 92       	push	r13
    8c64:	ef 92       	push	r14
    8c66:	ff 92       	push	r15
    8c68:	0f 93       	push	r16
    8c6a:	1f 93       	push	r17
    8c6c:	cf 93       	push	r28
    8c6e:	df 93       	push	r29
    8c70:	1f 92       	push	r1
    8c72:	cd b7       	in	r28, 0x3d	; 61
    8c74:	de b7       	in	r29, 0x3e	; 62
    8c76:	6c 01       	movw	r12, r24
    8c78:	7b 01       	movw	r14, r22
    8c7a:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    8c7c:	cb 01       	movw	r24, r22
    8c7e:	29 83       	std	Y+1, r18	; 0x01
    8c80:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    8c84:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    8c86:	29 81       	ldd	r18, Y+1	; 0x01
    8c88:	20 9f       	mul	r18, r16
    8c8a:	50 01       	movw	r10, r0
    8c8c:	11 24       	eor	r1, r1
    8c8e:	10 e0       	ldi	r17, 0x00	; 0
    8c90:	81 2f       	mov	r24, r17
    8c92:	90 e0       	ldi	r25, 0x00	; 0
    8c94:	8a 15       	cp	r24, r10
    8c96:	9b 05       	cpc	r25, r11
    8c98:	54 f4       	brge	.+20     	; 0x8cae <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    8c9a:	40 e0       	ldi	r20, 0x00	; 0
    8c9c:	b4 01       	movw	r22, r8
    8c9e:	81 2f       	mov	r24, r17
    8ca0:	87 0d       	add	r24, r7
    8ca2:	29 83       	std	Y+1, r18	; 0x01
    8ca4:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    8ca8:	1f 5f       	subi	r17, 0xFF	; 255
    8caa:	29 81       	ldd	r18, Y+1	; 0x01
    8cac:	f1 cf       	rjmp	.-30     	; 0x8c90 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    8cae:	f7 01       	movw	r30, r14
    8cb0:	84 81       	ldd	r24, Z+4	; 0x04
    8cb2:	88 23       	and	r24, r24
    8cb4:	51 f0       	breq	.+20     	; 0x8cca <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    8cb6:	f6 01       	movw	r30, r12
    8cb8:	80 81       	ld	r24, Z
    8cba:	90 e1       	ldi	r25, 0x10	; 16
    8cbc:	98 27       	eor	r25, r24
    8cbe:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    8cc0:	40 e0       	ldi	r20, 0x00	; 0
    8cc2:	60 ee       	ldi	r22, 0xE0	; 224
    8cc4:	87 2d       	mov	r24, r7
    8cc6:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
	}
	return anim->looped;
}
    8cca:	f7 01       	movw	r30, r14
    8ccc:	84 81       	ldd	r24, Z+4	; 0x04
    8cce:	0f 90       	pop	r0
    8cd0:	df 91       	pop	r29
    8cd2:	cf 91       	pop	r28
    8cd4:	1f 91       	pop	r17
    8cd6:	0f 91       	pop	r16
    8cd8:	ff 90       	pop	r15
    8cda:	ef 90       	pop	r14
    8cdc:	df 90       	pop	r13
    8cde:	cf 90       	pop	r12
    8ce0:	bf 90       	pop	r11
    8ce2:	af 90       	pop	r10
    8ce4:	9f 90       	pop	r9
    8ce6:	8f 90       	pop	r8
    8ce8:	7f 90       	pop	r7
    8cea:	08 95       	ret

00008cec <animate_sprite>:

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
    8cec:	8f 92       	push	r8
    8cee:	9f 92       	push	r9
    8cf0:	af 92       	push	r10
    8cf2:	bf 92       	push	r11
    8cf4:	ff 92       	push	r15
    8cf6:	0f 93       	push	r16
    8cf8:	1f 93       	push	r17
    8cfa:	cf 93       	push	r28
    8cfc:	df 93       	push	r29
    8cfe:	ec 01       	movw	r28, r24
    8d00:	f6 2e       	mov	r15, r22
    8d02:	14 2f       	mov	r17, r20
    8d04:	02 2f       	mov	r16, r18
	s->vy = s->vy + s->gravity*FRAME_TIME;
    8d06:	6e 85       	ldd	r22, Y+14	; 0x0e
    8d08:	70 e0       	ldi	r23, 0x00	; 0
    8d0a:	80 e0       	ldi	r24, 0x00	; 0
    8d0c:	90 e0       	ldi	r25, 0x00	; 0
    8d0e:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    8d12:	29 e8       	ldi	r18, 0x89	; 137
    8d14:	38 e8       	ldi	r19, 0x88	; 136
    8d16:	48 e8       	ldi	r20, 0x88	; 136
    8d18:	5c e3       	ldi	r21, 0x3C	; 60
    8d1a:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8d1e:	28 81       	ld	r18, Y
    8d20:	39 81       	ldd	r19, Y+1	; 0x01
    8d22:	4a 81       	ldd	r20, Y+2	; 0x02
    8d24:	5b 81       	ldd	r21, Y+3	; 0x03
    8d26:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8d2a:	4b 01       	movw	r8, r22
    8d2c:	5c 01       	movw	r10, r24
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    8d2e:	20 e0       	ldi	r18, 0x00	; 0
    8d30:	30 e0       	ldi	r19, 0x00	; 0
    8d32:	40 ef       	ldi	r20, 0xF0	; 240
    8d34:	52 e4       	ldi	r21, 0x42	; 66
    8d36:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    8d3a:	18 16       	cp	r1, r24
    8d3c:	2c f0       	brlt	.+10     	; 0x8d48 <animate_sprite+0x5c>
	return anim->looped;
}

void animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height)
{
	s->vy = s->vy + s->gravity*FRAME_TIME;
    8d3e:	88 82       	st	Y, r8
    8d40:	99 82       	std	Y+1, r9	; 0x01
    8d42:	aa 82       	std	Y+2, r10	; 0x02
    8d44:	bb 82       	std	Y+3, r11	; 0x03
    8d46:	08 c0       	rjmp	.+16     	; 0x8d58 <animate_sprite+0x6c>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    8d48:	80 e0       	ldi	r24, 0x00	; 0
    8d4a:	90 e0       	ldi	r25, 0x00	; 0
    8d4c:	a0 ef       	ldi	r26, 0xF0	; 240
    8d4e:	b2 e4       	ldi	r27, 0x42	; 66
    8d50:	88 83       	st	Y, r24
    8d52:	99 83       	std	Y+1, r25	; 0x01
    8d54:	aa 83       	std	Y+2, r26	; 0x02
    8d56:	bb 83       	std	Y+3, r27	; 0x03
	s->x += s->vx*FRAME_TIME;
    8d58:	6c 85       	ldd	r22, Y+12	; 0x0c
    8d5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    8d5c:	88 27       	eor	r24, r24
    8d5e:	77 fd       	sbrc	r23, 7
    8d60:	80 95       	com	r24
    8d62:	98 2f       	mov	r25, r24
    8d64:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    8d68:	29 e8       	ldi	r18, 0x89	; 137
    8d6a:	38 e8       	ldi	r19, 0x88	; 136
    8d6c:	48 e8       	ldi	r20, 0x88	; 136
    8d6e:	5c e3       	ldi	r21, 0x3C	; 60
    8d70:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8d74:	9b 01       	movw	r18, r22
    8d76:	ac 01       	movw	r20, r24
    8d78:	6c 81       	ldd	r22, Y+4	; 0x04
    8d7a:	7d 81       	ldd	r23, Y+5	; 0x05
    8d7c:	8e 81       	ldd	r24, Y+6	; 0x06
    8d7e:	9f 81       	ldd	r25, Y+7	; 0x07
    8d80:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8d84:	6c 83       	std	Y+4, r22	; 0x04
    8d86:	7d 83       	std	Y+5, r23	; 0x05
    8d88:	8e 83       	std	Y+6, r24	; 0x06
    8d8a:	9f 83       	std	Y+7, r25	; 0x07
	s->y += s->vy*FRAME_TIME;
    8d8c:	29 e8       	ldi	r18, 0x89	; 137
    8d8e:	38 e8       	ldi	r19, 0x88	; 136
    8d90:	48 e8       	ldi	r20, 0x88	; 136
    8d92:	5c e3       	ldi	r21, 0x3C	; 60
    8d94:	68 81       	ld	r22, Y
    8d96:	79 81       	ldd	r23, Y+1	; 0x01
    8d98:	8a 81       	ldd	r24, Y+2	; 0x02
    8d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    8d9c:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    8da0:	9b 01       	movw	r18, r22
    8da2:	ac 01       	movw	r20, r24
    8da4:	68 85       	ldd	r22, Y+8	; 0x08
    8da6:	79 85       	ldd	r23, Y+9	; 0x09
    8da8:	8a 85       	ldd	r24, Y+10	; 0x0a
    8daa:	9b 85       	ldd	r25, Y+11	; 0x0b
    8dac:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    8db0:	68 87       	std	Y+8, r22	; 0x08
    8db2:	79 87       	std	Y+9, r23	; 0x09
    8db4:	8a 87       	std	Y+10, r24	; 0x0a
    8db6:	9b 87       	std	Y+11, r25	; 0x0b
	collision_detect_level(s, width, height);
    8db8:	40 2f       	mov	r20, r16
    8dba:	61 2f       	mov	r22, r17
    8dbc:	ce 01       	movw	r24, r28
    8dbe:	0e 94 78 41 	call	0x82f0	; 0x82f0 <collision_detect_level>
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    8dc2:	e0 91 95 0d 	lds	r30, 0x0D95
    8dc6:	f0 91 96 0d 	lds	r31, 0x0D96
    8dca:	bf 01       	movw	r22, r30
    8dcc:	80 e0       	ldi	r24, 0x00	; 0
    8dce:	90 e0       	ldi	r25, 0x00	; 0
    8dd0:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8dd4:	9b 01       	movw	r18, r22
    8dd6:	ac 01       	movw	r20, r24
    8dd8:	68 85       	ldd	r22, Y+8	; 0x08
    8dda:	79 85       	ldd	r23, Y+9	; 0x09
    8ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    8dde:	9b 85       	ldd	r25, Y+11	; 0x0b
    8de0:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8de4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8de8:	b6 2e       	mov	r11, r22
    8dea:	e0 91 93 0d 	lds	r30, 0x0D93
    8dee:	f0 91 94 0d 	lds	r31, 0x0D94
    8df2:	bf 01       	movw	r22, r30
    8df4:	80 e0       	ldi	r24, 0x00	; 0
    8df6:	90 e0       	ldi	r25, 0x00	; 0
    8df8:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8dfc:	9b 01       	movw	r18, r22
    8dfe:	ac 01       	movw	r20, r24
    8e00:	6c 81       	ldd	r22, Y+4	; 0x04
    8e02:	7d 81       	ldd	r23, Y+5	; 0x05
    8e04:	8e 81       	ldd	r24, Y+6	; 0x06
    8e06:	9f 81       	ldd	r25, Y+7	; 0x07
    8e08:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8e0c:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8e10:	21 2f       	mov	r18, r17
    8e12:	4b 2d       	mov	r20, r11
    8e14:	8f 2d       	mov	r24, r15
    8e16:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
}
    8e1a:	df 91       	pop	r29
    8e1c:	cf 91       	pop	r28
    8e1e:	1f 91       	pop	r17
    8e20:	0f 91       	pop	r16
    8e22:	ff 90       	pop	r15
    8e24:	bf 90       	pop	r11
    8e26:	af 90       	pop	r10
    8e28:	9f 90       	pop	r9
    8e2a:	8f 90       	pop	r8
    8e2c:	08 95       	ret

00008e2e <animate_player>:

void animate_player()
{
    8e2e:	0f 93       	push	r16
    8e30:	cf 93       	push	r28
	if (game.player.flags & EXPLODING)
    8e32:	80 91 b9 0d 	lds	r24, 0x0DB9
    8e36:	84 ff       	sbrs	r24, 4
    8e38:	38 c0       	rjmp	.+112    	; 0x8eaa <animate_player+0x7c>
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
    8e3a:	60 91 95 0d 	lds	r22, 0x0D95
    8e3e:	70 91 96 0d 	lds	r23, 0x0D96
    8e42:	80 e0       	ldi	r24, 0x00	; 0
    8e44:	90 e0       	ldi	r25, 0x00	; 0
    8e46:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8e4a:	9b 01       	movw	r18, r22
    8e4c:	ac 01       	movw	r20, r24
    8e4e:	60 91 b1 0d 	lds	r22, 0x0DB1
    8e52:	70 91 b2 0d 	lds	r23, 0x0DB2
    8e56:	80 91 b3 0d 	lds	r24, 0x0DB3
    8e5a:	90 91 b4 0d 	lds	r25, 0x0DB4
    8e5e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8e62:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8e66:	c6 2f       	mov	r28, r22
    8e68:	60 91 93 0d 	lds	r22, 0x0D93
    8e6c:	70 91 94 0d 	lds	r23, 0x0D94
    8e70:	80 e0       	ldi	r24, 0x00	; 0
    8e72:	90 e0       	ldi	r25, 0x00	; 0
    8e74:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    8e78:	9b 01       	movw	r18, r22
    8e7a:	ac 01       	movw	r20, r24
    8e7c:	60 91 ad 0d 	lds	r22, 0x0DAD
    8e80:	70 91 ae 0d 	lds	r23, 0x0DAE
    8e84:	80 91 af 0d 	lds	r24, 0x0DAF
    8e88:	90 91 b0 0d 	lds	r25, 0x0DB0
    8e8c:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    8e90:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    8e94:	00 91 bd 0d 	lds	r16, 0x0DBD
    8e98:	20 91 bc 0d 	lds	r18, 0x0DBC
    8e9c:	4c 2f       	mov	r20, r28
    8e9e:	80 e0       	ldi	r24, 0x00	; 0
    8ea0:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
}
    8ea4:	cf 91       	pop	r28
    8ea6:	0f 91       	pop	r16
    8ea8:	08 95       	ret
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    8eaa:	20 91 bd 0d 	lds	r18, 0x0DBD
    8eae:	40 91 bc 0d 	lds	r20, 0x0DBC
    8eb2:	60 e0       	ldi	r22, 0x00	; 0
    8eb4:	89 ea       	ldi	r24, 0xA9	; 169
    8eb6:	9d e0       	ldi	r25, 0x0D	; 13
}
    8eb8:	cf 91       	pop	r28
    8eba:	0f 91       	pop	r16
{
	if (game.player.flags & EXPLODING)
	{
		LBMoveSprite(PLAYER_SLOT, game.player.shared.x - game.camera_x, game.player.shared.y - game.camera_y, game.player.width, game.player.height);
	}
	else animate_sprite(&game.player.shared, PLAYER_SLOT, game.player.width, game.player.height);
    8ebc:	0c 94 76 46 	jmp	0x8cec	; 0x8cec <animate_sprite>

00008ec0 <update_spider_enemy>:
}

void update_spider_enemy(Enemy* e, u8 slot)
{
    8ec0:	1f 93       	push	r17
    8ec2:	cf 93       	push	r28
    8ec4:	df 93       	push	r29
    8ec6:	ec 01       	movw	r28, r24
    8ec8:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    8eca:	98 89       	ldd	r25, Y+16	; 0x10
    8ecc:	89 2f       	mov	r24, r25
    8ece:	88 70       	andi	r24, 0x08	; 8
    8ed0:	93 ff       	sbrs	r25, 3
    8ed2:	1e c0       	rjmp	.+60     	; 0x8f10 <update_spider_enemy+0x50>
    8ed4:	2d 89       	ldd	r18, Y+21	; 0x15
    8ed6:	20 38       	cpi	r18, 0x80	; 128
    8ed8:	d9 f4       	brne	.+54     	; 0x8f10 <update_spider_enemy+0x50>
	{
		e->flags = JUMPING;
    8eda:	81 e0       	ldi	r24, 0x01	; 1
    8edc:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vy = -SPIDER_JUMP_SPEED;
    8ede:	80 e0       	ldi	r24, 0x00	; 0
    8ee0:	90 e0       	ldi	r25, 0x00	; 0
    8ee2:	a8 ec       	ldi	r26, 0xC8	; 200
    8ee4:	b2 ec       	ldi	r27, 0xC2	; 194
    8ee6:	88 83       	st	Y, r24
    8ee8:	99 83       	std	Y+1, r25	; 0x01
    8eea:	aa 83       	std	Y+2, r26	; 0x02
    8eec:	bb 83       	std	Y+3, r27	; 0x03
		e->shared.gravity = GRAVITY;
    8eee:	8f ef       	ldi	r24, 0xFF	; 255
    8ef0:	8e 87       	std	Y+14, r24	; 0x0e
		e->shared.vx = SPIDER_SIDE_SPEED;
    8ef2:	8c e3       	ldi	r24, 0x3C	; 60
    8ef4:	90 e0       	ldi	r25, 0x00	; 0
    8ef6:	9d 87       	std	Y+13, r25	; 0x0d
    8ef8:	8c 87       	std	Y+12, r24	; 0x0c
		if (e->direction == D_LEFT)
    8efa:	89 89       	ldd	r24, Y+17	; 0x11
    8efc:	81 11       	cpse	r24, r1
    8efe:	04 c0       	rjmp	.+8      	; 0x8f08 <update_spider_enemy+0x48>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    8f00:	84 ec       	ldi	r24, 0xC4	; 196
    8f02:	9f ef       	ldi	r25, 0xFF	; 255
    8f04:	9d 87       	std	Y+13, r25	; 0x0d
    8f06:	8c 87       	std	Y+12, r24	; 0x0c
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    8f08:	40 e0       	ldi	r20, 0x00	; 0
    8f0a:	67 e2       	ldi	r22, 0x27	; 39
    8f0c:	72 e3       	ldi	r23, 0x32	; 50
    8f0e:	1a c0       	rjmp	.+52     	; 0x8f44 <update_spider_enemy+0x84>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    8f10:	90 ff       	sbrs	r25, 0
    8f12:	10 c0       	rjmp	.+32     	; 0x8f34 <update_spider_enemy+0x74>
    8f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    8f16:	91 11       	cpse	r25, r1
    8f18:	0d c0       	rjmp	.+26     	; 0x8f34 <update_spider_enemy+0x74>
	{
		e->flags = IDLE;
    8f1a:	88 e0       	ldi	r24, 0x08	; 8
    8f1c:	88 8b       	std	Y+16, r24	; 0x10
		e->shared.vx = 0;
    8f1e:	1d 86       	std	Y+13, r1	; 0x0d
    8f20:	1c 86       	std	Y+12, r1	; 0x0c
		e->frame_count = 0;
    8f22:	1d 8a       	std	Y+21, r1	; 0x15
		if (e->direction == D_LEFT)
    8f24:	89 89       	ldd	r24, Y+17	; 0x11
    8f26:	81 11       	cpse	r24, r1
    8f28:	03 c0       	rjmp	.+6      	; 0x8f30 <update_spider_enemy+0x70>
		{
			e->direction = D_RIGHT;
    8f2a:	81 e0       	ldi	r24, 0x01	; 1
    8f2c:	89 8b       	std	Y+17, r24	; 0x11
    8f2e:	0d c0       	rjmp	.+26     	; 0x8f4a <update_spider_enemy+0x8a>
		}
		else
		{
			e->direction = D_LEFT;
    8f30:	19 8a       	std	Y+17, r1	; 0x11
    8f32:	0b c0       	rjmp	.+22     	; 0x8f4a <update_spider_enemy+0x8a>
		}
	}
	else if (e->flags & IDLE)
    8f34:	88 23       	and	r24, r24
    8f36:	49 f0       	breq	.+18     	; 0x8f4a <update_spider_enemy+0x8a>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    8f38:	ce 01       	movw	r24, r28
    8f3a:	c1 96       	adiw	r24, 0x31	; 49
    8f3c:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    8f40:	40 e0       	ldi	r20, 0x00	; 0
    8f42:	bc 01       	movw	r22, r24
    8f44:	81 2f       	mov	r24, r17
    8f46:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <LBMapSprite>
	}
	e->frame_count++;
    8f4a:	8d 89       	ldd	r24, Y+21	; 0x15
    8f4c:	8f 5f       	subi	r24, 0xFF	; 255
    8f4e:	8d 8b       	std	Y+21, r24	; 0x15
}
    8f50:	df 91       	pop	r29
    8f52:	cf 91       	pop	r28
    8f54:	1f 91       	pop	r17
    8f56:	08 95       	ret

00008f58 <update_basic_shot>:

void update_basic_shot(Shot* s, u8 slot)
{
    8f58:	cf 93       	push	r28
    8f5a:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    8f5c:	42 96       	adiw	r24, 0x12	; 18
    8f5e:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    8f62:	40 e0       	ldi	r20, 0x00	; 0
    8f64:	bc 01       	movw	r22, r24
    8f66:	8c 2f       	mov	r24, r28
}
    8f68:	cf 91       	pop	r28
	e->frame_count++;
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    8f6a:	0c 94 f2 3a 	jmp	0x75e4	; 0x75e4 <LBMapSprite>

00008f6e <update_enemies>:
}

void update_enemies()
{
    8f6e:	ef 92       	push	r14
    8f70:	ff 92       	push	r15
    8f72:	0f 93       	push	r16
    8f74:	1f 93       	push	r17
    8f76:	cf 93       	push	r28
    8f78:	df 93       	push	r29
    8f7a:	c8 e4       	ldi	r28, 0x48	; 72
    8f7c:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    8f7e:	16 e0       	ldi	r17, 0x06	; 6
    8f80:	ce 01       	movw	r24, r28
    8f82:	03 97       	sbiw	r24, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    8f84:	fc 01       	movw	r30, r24
    8f86:	20 81       	ld	r18, Z
    8f88:	ae 01       	movw	r20, r28
    8f8a:	41 50       	subi	r20, 0x01	; 1
    8f8c:	51 09       	sbc	r21, r1
    8f8e:	7a 01       	movw	r14, r20
    8f90:	24 ff       	sbrs	r18, 4
    8f92:	0a c0       	rjmp	.+20     	; 0x8fa8 <update_enemies+0x3a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    8f94:	08 81       	ld	r16, Y
    8f96:	fa 01       	movw	r30, r20
    8f98:	20 81       	ld	r18, Z
    8f9a:	41 2f       	mov	r20, r17
    8f9c:	be 01       	movw	r22, r28
    8f9e:	6a 5d       	subi	r22, 0xDA	; 218
    8fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    8fa2:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <map_explosion>
    8fa6:	0d c0       	rjmp	.+26     	; 0x8fc2 <update_enemies+0x54>
    8fa8:	fe 01       	movw	r30, r28
    8faa:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    8fac:	80 81       	ld	r24, Z
    8fae:	88 23       	and	r24, r24
    8fb0:	41 f0       	breq	.+16     	; 0x8fc2 <update_enemies+0x54>
		{
			switch (game.enemies[i].enemy_type)
    8fb2:	89 81       	ldd	r24, Y+1	; 0x01
    8fb4:	81 11       	cpse	r24, r1
    8fb6:	05 c0       	rjmp	.+10     	; 0x8fc2 <update_enemies+0x54>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    8fb8:	61 2f       	mov	r22, r17
    8fba:	ce 01       	movw	r24, r28
    8fbc:	43 97       	sbiw	r24, 0x13	; 19
    8fbe:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <update_spider_enemy>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    8fc2:	f7 01       	movw	r30, r14
    8fc4:	90 81       	ld	r25, Z
    8fc6:	88 81       	ld	r24, Y
    8fc8:	98 9f       	mul	r25, r24
    8fca:	10 0d       	add	r17, r0
    8fcc:	11 24       	eor	r1, r1
    8fce:	cf 5b       	subi	r28, 0xBF	; 191
    8fd0:	df 4f       	sbci	r29, 0xFF	; 255

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    8fd2:	ff e0       	ldi	r31, 0x0F	; 15
    8fd4:	cd 38       	cpi	r28, 0x8D	; 141
    8fd6:	df 07       	cpc	r29, r31
    8fd8:	99 f6       	brne	.-90     	; 0x8f80 <update_enemies+0x12>
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
    8fe6:	08 95       	ret

00008fe8 <update_enemy_shots>:

void update_enemy_shots()
{
    8fe8:	8f 92       	push	r8
    8fea:	9f 92       	push	r9
    8fec:	bf 92       	push	r11
    8fee:	cf 92       	push	r12
    8ff0:	df 92       	push	r13
    8ff2:	ef 92       	push	r14
    8ff4:	ff 92       	push	r15
    8ff6:	0f 93       	push	r16
    8ff8:	1f 93       	push	r17
    8ffa:	cf 93       	push	r28
    8ffc:	df 93       	push	r29
    8ffe:	00 d0       	rcall	.+0      	; 0x9000 <update_enemy_shots+0x18>
    9000:	00 d0       	rcall	.+0      	; 0x9002 <update_enemy_shots+0x1a>
    9002:	cd b7       	in	r28, 0x3d	; 61
    9004:	de b7       	in	r29, 0x3e	; 62
    9006:	0d e5       	ldi	r16, 0x5D	; 93
    9008:	1e e0       	ldi	r17, 0x0E	; 14
    900a:	29 e3       	ldi	r18, 0x39	; 57
    900c:	82 2e       	mov	r8, r18
    900e:	2e e0       	ldi	r18, 0x0E	; 14
    9010:	92 2e       	mov	r9, r18
	u8 slot = ENEMY_SHOT_SLOT;
    9012:	3e e0       	ldi	r19, 0x0E	; 14
    9014:	b3 2e       	mov	r11, r19
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    9016:	44 e6       	ldi	r20, 0x64	; 100
    9018:	e4 2e       	mov	r14, r20
    901a:	f1 2c       	mov	r15, r1
						if (game.player.shared.x <= game.enemies[i].shared.x)
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    901c:	5c e9       	ldi	r21, 0x9C	; 156
    901e:	c5 2e       	mov	r12, r21
    9020:	dd 24       	eor	r13, r13
    9022:	da 94       	dec	r13
    9024:	f8 01       	movw	r30, r16
    9026:	79 97       	sbiw	r30, 0x19	; 25
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    9028:	80 81       	ld	r24, Z
    902a:	88 23       	and	r24, r24
    902c:	09 f4       	brne	.+2      	; 0x9030 <update_enemy_shots+0x48>
    902e:	4b c0       	rjmp	.+150    	; 0x90c6 <update_enemy_shots+0xde>
    9030:	77 96       	adiw	r30, 0x17	; 23
		{
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    9032:	80 81       	ld	r24, Z
    9034:	81 30       	cpi	r24, 0x01	; 1
    9036:	09 f0       	breq	.+2      	; 0x903a <update_enemy_shots+0x52>
    9038:	45 c0       	rjmp	.+138    	; 0x90c4 <update_enemy_shots+0xdc>
				{
					if (!game.enemies[i].shot[j].active)
    903a:	f8 01       	movw	r30, r16
    903c:	90 81       	ld	r25, Z
    903e:	91 11       	cpse	r25, r1
    9040:	3c c0       	rjmp	.+120    	; 0x90ba <update_enemy_shots+0xd2>
					{
						game.enemies[i].shot[j].active = 1;
    9042:	80 83       	st	Z, r24
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    9044:	f4 01       	movw	r30, r8
    9046:	20 81       	ld	r18, Z
    9048:	31 81       	ldd	r19, Z+1	; 0x01
    904a:	42 81       	ldd	r20, Z+2	; 0x02
    904c:	53 81       	ldd	r21, Z+3	; 0x03
    904e:	27 8b       	std	Z+23, r18	; 0x17
    9050:	30 8f       	std	Z+24, r19	; 0x18
    9052:	41 8f       	std	Z+25, r20	; 0x19
    9054:	52 8f       	std	Z+26, r21	; 0x1a
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    9056:	64 81       	ldd	r22, Z+4	; 0x04
    9058:	75 81       	ldd	r23, Z+5	; 0x05
    905a:	86 81       	ldd	r24, Z+6	; 0x06
    905c:	97 81       	ldd	r25, Z+7	; 0x07
    905e:	29 83       	std	Y+1, r18	; 0x01
    9060:	3a 83       	std	Y+2, r19	; 0x02
    9062:	4b 83       	std	Y+3, r20	; 0x03
    9064:	5c 83       	std	Y+4, r21	; 0x04
    9066:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    906a:	83 e0       	ldi	r24, 0x03	; 3
    906c:	76 95       	lsr	r23
    906e:	67 95       	ror	r22
    9070:	8a 95       	dec	r24
    9072:	e1 f7       	brne	.-8      	; 0x906c <update_enemy_shots+0x84>
    9074:	93 e0       	ldi	r25, 0x03	; 3
    9076:	66 0f       	add	r22, r22
    9078:	77 1f       	adc	r23, r23
    907a:	9a 95       	dec	r25
    907c:	e1 f7       	brne	.-8      	; 0x9076 <update_enemy_shots+0x8e>
    907e:	80 e0       	ldi	r24, 0x00	; 0
    9080:	90 e0       	ldi	r25, 0x00	; 0
    9082:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    9086:	f4 01       	movw	r30, r8
    9088:	63 8f       	std	Z+27, r22	; 0x1b
    908a:	74 8f       	std	Z+28, r23	; 0x1c
    908c:	85 8f       	std	Z+29, r24	; 0x1d
    908e:	96 8f       	std	Z+30, r25	; 0x1e
						game.enemies[i].shot[j].shared.vx = ENEMY_SHOT_SPEED;
    9090:	f0 a2       	std	Z+32, r15	; 0x20
    9092:	e7 8e       	std	Z+31, r14	; 0x1f
						if (game.player.shared.x <= game.enemies[i].shared.x)
    9094:	29 81       	ldd	r18, Y+1	; 0x01
    9096:	3a 81       	ldd	r19, Y+2	; 0x02
    9098:	4b 81       	ldd	r20, Y+3	; 0x03
    909a:	5c 81       	ldd	r21, Y+4	; 0x04
    909c:	60 91 ad 0d 	lds	r22, 0x0DAD
    90a0:	70 91 ae 0d 	lds	r23, 0x0DAE
    90a4:	80 91 af 0d 	lds	r24, 0x0DAF
    90a8:	90 91 b0 0d 	lds	r25, 0x0DB0
    90ac:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    90b0:	18 16       	cp	r1, r24
    90b2:	1c f0       	brlt	.+6      	; 0x90ba <update_enemy_shots+0xd2>
						{
							game.enemies[i].shot[j].shared.vx = -ENEMY_SHOT_SPEED;
    90b4:	f4 01       	movw	r30, r8
    90b6:	d0 a2       	std	Z+32, r13	; 0x20
    90b8:	c7 8e       	std	Z+31, r12	; 0x1f
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    90ba:	6b 2d       	mov	r22, r11
    90bc:	c4 01       	movw	r24, r8
    90be:	43 96       	adiw	r24, 0x13	; 19
    90c0:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <update_basic_shot>
				}
				slot += 1;
    90c4:	b3 94       	inc	r11
    90c6:	0f 5b       	subi	r16, 0xBF	; 191
    90c8:	1f 4f       	sbci	r17, 0xFF	; 255
    90ca:	f1 e4       	ldi	r31, 0x41	; 65
    90cc:	8f 0e       	add	r8, r31
    90ce:	91 1c       	adc	r9, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    90d0:	8f e0       	ldi	r24, 0x0F	; 15
    90d2:	02 3a       	cpi	r16, 0xA2	; 162
    90d4:	18 07       	cpc	r17, r24
    90d6:	09 f0       	breq	.+2      	; 0x90da <update_enemy_shots+0xf2>
    90d8:	a5 cf       	rjmp	.-182    	; 0x9024 <update_enemy_shots+0x3c>
				}
				slot += 1;
			}
		}
	}
}
    90da:	0f 90       	pop	r0
    90dc:	0f 90       	pop	r0
    90de:	0f 90       	pop	r0
    90e0:	0f 90       	pop	r0
    90e2:	df 91       	pop	r29
    90e4:	cf 91       	pop	r28
    90e6:	1f 91       	pop	r17
    90e8:	0f 91       	pop	r16
    90ea:	ff 90       	pop	r15
    90ec:	ef 90       	pop	r14
    90ee:	df 90       	pop	r13
    90f0:	cf 90       	pop	r12
    90f2:	bf 90       	pop	r11
    90f4:	9f 90       	pop	r9
    90f6:	8f 90       	pop	r8
    90f8:	08 95       	ret

000090fa <animate_enemies>:

void animate_enemies()
{
    90fa:	2f 92       	push	r2
    90fc:	3f 92       	push	r3
    90fe:	4f 92       	push	r4
    9100:	5f 92       	push	r5
    9102:	6f 92       	push	r6
    9104:	7f 92       	push	r7
    9106:	8f 92       	push	r8
    9108:	9f 92       	push	r9
    910a:	af 92       	push	r10
    910c:	bf 92       	push	r11
    910e:	cf 92       	push	r12
    9110:	df 92       	push	r13
    9112:	ef 92       	push	r14
    9114:	ff 92       	push	r15
    9116:	0f 93       	push	r16
    9118:	1f 93       	push	r17
    911a:	cf 93       	push	r28
    911c:	df 93       	push	r29
    911e:	cd b7       	in	r28, 0x3d	; 61
    9120:	de b7       	in	r29, 0x3e	; 62
    9122:	2c 97       	sbiw	r28, 0x0c	; 12
    9124:	0f b6       	in	r0, 0x3f	; 63
    9126:	f8 94       	cli
    9128:	de bf       	out	0x3e, r29	; 62
    912a:	0f be       	out	0x3f, r0	; 63
    912c:	cd bf       	out	0x3d, r28	; 61
    912e:	47 e4       	ldi	r20, 0x47	; 71
    9130:	24 2e       	mov	r2, r20
    9132:	4e e0       	ldi	r20, 0x0E	; 14
    9134:	34 2e       	mov	r3, r20
    9136:	88 e4       	ldi	r24, 0x48	; 72
    9138:	9e e0       	ldi	r25, 0x0E	; 14
    913a:	9c 87       	std	Y+12, r25	; 0x0c
    913c:	8b 87       	std	Y+11, r24	; 0x0b
    913e:	55 e3       	ldi	r21, 0x35	; 53
    9140:	85 2e       	mov	r8, r21
    9142:	5e e0       	ldi	r21, 0x0E	; 14
    9144:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SLOT;
    9146:	66 e0       	ldi	r22, 0x06	; 6
    9148:	b6 2e       	mov	r11, r22
    914a:	eb 85       	ldd	r30, Y+11	; 0x0b
    914c:	fc 85       	ldd	r31, Y+12	; 0x0c
    914e:	34 97       	sbiw	r30, 0x04	; 4
    9150:	fa 83       	std	Y+2, r31	; 0x02
    9152:	e9 83       	std	Y+1, r30	; 0x01
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    9154:	80 81       	ld	r24, Z
    9156:	eb 85       	ldd	r30, Y+11	; 0x0b
    9158:	fc 85       	ldd	r31, Y+12	; 0x0c
    915a:	33 97       	sbiw	r30, 0x03	; 3
    915c:	88 23       	and	r24, r24
    915e:	09 f4       	brne	.+2      	; 0x9162 <animate_enemies+0x68>
    9160:	a0 c0       	rjmp	.+320    	; 0x92a2 <animate_enemies+0x1a8>
    9162:	80 81       	ld	r24, Z
    9164:	84 fd       	sbrc	r24, 4
    9166:	9d c0       	rjmp	.+314    	; 0x92a2 <animate_enemies+0x1a8>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    9168:	f4 01       	movw	r30, r8
    916a:	44 80       	ldd	r4, Z+4	; 0x04
    916c:	55 80       	ldd	r5, Z+5	; 0x05
    916e:	66 80       	ldd	r6, Z+6	; 0x06
    9170:	77 80       	ldd	r7, Z+7	; 0x07
    9172:	60 91 93 0d 	lds	r22, 0x0D93
    9176:	70 91 94 0d 	lds	r23, 0x0D94
    917a:	80 e0       	ldi	r24, 0x00	; 0
    917c:	90 e0       	ldi	r25, 0x00	; 0
    917e:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    9182:	9b 01       	movw	r18, r22
    9184:	ac 01       	movw	r20, r24
    9186:	c3 01       	movw	r24, r6
    9188:	b2 01       	movw	r22, r4
    918a:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    918e:	87 fd       	sbrc	r24, 7
    9190:	25 c0       	rjmp	.+74     	; 0x91dc <animate_enemies+0xe2>
    9192:	f4 01       	movw	r30, r8
    9194:	c0 84       	ldd	r12, Z+8	; 0x08
    9196:	d1 84       	ldd	r13, Z+9	; 0x09
    9198:	e2 84       	ldd	r14, Z+10	; 0x0a
    919a:	f3 84       	ldd	r15, Z+11	; 0x0b
    919c:	00 91 95 0d 	lds	r16, 0x0D95
    91a0:	10 91 96 0d 	lds	r17, 0x0D96
    91a4:	b8 01       	movw	r22, r16
    91a6:	80 e0       	ldi	r24, 0x00	; 0
    91a8:	90 e0       	ldi	r25, 0x00	; 0
    91aa:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    91ae:	9b 01       	movw	r18, r22
    91b0:	ac 01       	movw	r20, r24
    91b2:	c7 01       	movw	r24, r14
    91b4:	b6 01       	movw	r22, r12
    91b6:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    91ba:	87 fd       	sbrc	r24, 7
    91bc:	0f c0       	rjmp	.+30     	; 0x91dc <animate_enemies+0xe2>
    91be:	b8 01       	movw	r22, r16
    91c0:	60 53       	subi	r22, 0x30	; 48
    91c2:	7f 4f       	sbci	r23, 0xFF	; 255
    91c4:	80 e0       	ldi	r24, 0x00	; 0
    91c6:	90 e0       	ldi	r25, 0x00	; 0
    91c8:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    91cc:	9b 01       	movw	r18, r22
    91ce:	ac 01       	movw	r20, r24
    91d0:	c7 01       	movw	r24, r14
    91d2:	b6 01       	movw	r22, r12
    91d4:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    91d8:	18 16       	cp	r1, r24
    91da:	84 f4       	brge	.+32     	; 0x91fc <animate_enemies+0x102>
			{
				game.enemies[i].active = 0;
    91dc:	e9 81       	ldd	r30, Y+1	; 0x01
    91de:	fa 81       	ldd	r31, Y+2	; 0x02
    91e0:	10 82       	st	Z, r1
				game.active_enemies--;
    91e2:	80 91 a7 0d 	lds	r24, 0x0DA7
    91e6:	81 50       	subi	r24, 0x01	; 1
    91e8:	80 93 a7 0d 	sts	0x0DA7, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    91ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    91ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    91f0:	00 81       	ld	r16, Z
    91f2:	f1 01       	movw	r30, r2
    91f4:	20 81       	ld	r18, Z
    91f6:	40 e0       	ldi	r20, 0x00	; 0
    91f8:	60 ee       	ldi	r22, 0xE0	; 224
    91fa:	83 c0       	rjmp	.+262    	; 0x9302 <animate_enemies+0x208>
			}
			else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    91fc:	c7 01       	movw	r24, r14
    91fe:	b6 01       	movw	r22, r12
    9200:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    9204:	69 83       	std	Y+1, r22	; 0x01
    9206:	7a 83       	std	Y+2, r23	; 0x02
    9208:	8b 83       	std	Y+3, r24	; 0x03
    920a:	9c 83       	std	Y+4, r25	; 0x04
    920c:	c3 01       	movw	r24, r6
    920e:	b2 01       	movw	r22, r4
    9210:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    9214:	6d 83       	std	Y+5, r22	; 0x05
    9216:	7e 83       	std	Y+6, r23	; 0x06
    9218:	8f 83       	std	Y+7, r24	; 0x07
    921a:	98 87       	std	Y+8, r25	; 0x08
    921c:	20 91 bd 0d 	lds	r18, 0x0DBD
    9220:	22 0f       	add	r18, r18
    9222:	22 0f       	add	r18, r18
    9224:	22 0f       	add	r18, r18
    9226:	40 91 bc 0d 	lds	r20, 0x0DBC
    922a:	44 0f       	add	r20, r20
    922c:	44 0f       	add	r20, r20
    922e:	44 0f       	add	r20, r20
    9230:	60 91 b1 0d 	lds	r22, 0x0DB1
    9234:	70 91 b2 0d 	lds	r23, 0x0DB2
    9238:	80 91 b3 0d 	lds	r24, 0x0DB3
    923c:	90 91 b4 0d 	lds	r25, 0x0DB4
    9240:	29 87       	std	Y+9, r18	; 0x09
    9242:	4a 87       	std	Y+10, r20	; 0x0a
    9244:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    9248:	2b 01       	movw	r4, r22
    924a:	3c 01       	movw	r6, r24
    924c:	60 91 ad 0d 	lds	r22, 0x0DAD
    9250:	70 91 ae 0d 	lds	r23, 0x0DAE
    9254:	80 91 af 0d 	lds	r24, 0x0DAF
    9258:	90 91 b0 0d 	lds	r25, 0x0DB0
    925c:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    9260:	dc 01       	movw	r26, r24
    9262:	cb 01       	movw	r24, r22
    9264:	28 e0       	ldi	r18, 0x08	; 8
    9266:	a2 2e       	mov	r10, r18
    9268:	38 e0       	ldi	r19, 0x08	; 8
    926a:	c3 2e       	mov	r12, r19
    926c:	e9 80       	ldd	r14, Y+1	; 0x01
    926e:	fa 80       	ldd	r15, Y+2	; 0x02
    9270:	0d 81       	ldd	r16, Y+5	; 0x05
    9272:	1e 81       	ldd	r17, Y+6	; 0x06
    9274:	29 85       	ldd	r18, Y+9	; 0x09
    9276:	4a 85       	ldd	r20, Y+10	; 0x0a
    9278:	b2 01       	movw	r22, r4
    927a:	0e 94 bd 3a 	call	0x757a	; 0x757a <LBCollides>
    927e:	88 23       	and	r24, r24
    9280:	31 f0       	breq	.+12     	; 0x928e <animate_enemies+0x194>
							game.enemies[i].shared.x, game.enemies[i].shared.y, 8, 8
						)
			)
			{
				game.player.shield = 0;
    9282:	10 92 be 0d 	sts	0x0DBE, r1
				game.player.flags = EXPLODING;
    9286:	80 e1       	ldi	r24, 0x10	; 16
    9288:	80 93 b9 0d 	sts	0x0DB9, r24
				return;
    928c:	57 c0       	rjmp	.+174    	; 0x933c <animate_enemies+0x242>
			}
			else
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height);
    928e:	eb 85       	ldd	r30, Y+11	; 0x0b
    9290:	fc 85       	ldd	r31, Y+12	; 0x0c
    9292:	20 81       	ld	r18, Z
    9294:	f1 01       	movw	r30, r2
    9296:	40 81       	ld	r20, Z
    9298:	6b 2d       	mov	r22, r11
    929a:	c4 01       	movw	r24, r8
    929c:	0e 94 76 46 	call	0x8cec	; 0x8cec <animate_sprite>
    92a0:	33 c0       	rjmp	.+102    	; 0x9308 <animate_enemies+0x20e>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    92a2:	80 81       	ld	r24, Z
    92a4:	84 ff       	sbrs	r24, 4
    92a6:	30 c0       	rjmp	.+96     	; 0x9308 <animate_enemies+0x20e>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    92a8:	60 91 95 0d 	lds	r22, 0x0D95
    92ac:	70 91 96 0d 	lds	r23, 0x0D96
    92b0:	80 e0       	ldi	r24, 0x00	; 0
    92b2:	90 e0       	ldi	r25, 0x00	; 0
    92b4:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    92b8:	9b 01       	movw	r18, r22
    92ba:	ac 01       	movw	r20, r24
    92bc:	f4 01       	movw	r30, r8
    92be:	60 85       	ldd	r22, Z+8	; 0x08
    92c0:	71 85       	ldd	r23, Z+9	; 0x09
    92c2:	82 85       	ldd	r24, Z+10	; 0x0a
    92c4:	93 85       	ldd	r25, Z+11	; 0x0b
    92c6:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    92ca:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    92ce:	16 2f       	mov	r17, r22
    92d0:	60 91 93 0d 	lds	r22, 0x0D93
    92d4:	70 91 94 0d 	lds	r23, 0x0D94
    92d8:	80 e0       	ldi	r24, 0x00	; 0
    92da:	90 e0       	ldi	r25, 0x00	; 0
    92dc:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    92e0:	9b 01       	movw	r18, r22
    92e2:	ac 01       	movw	r20, r24
    92e4:	f4 01       	movw	r30, r8
    92e6:	64 81       	ldd	r22, Z+4	; 0x04
    92e8:	75 81       	ldd	r23, Z+5	; 0x05
    92ea:	86 81       	ldd	r24, Z+6	; 0x06
    92ec:	97 81       	ldd	r25, Z+7	; 0x07
    92ee:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    92f2:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    92f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    92f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    92fa:	00 81       	ld	r16, Z
    92fc:	f1 01       	movw	r30, r2
    92fe:	20 81       	ld	r18, Z
    9300:	41 2f       	mov	r20, r17
    9302:	8b 2d       	mov	r24, r11
    9304:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    9308:	eb 85       	ldd	r30, Y+11	; 0x0b
    930a:	fc 85       	ldd	r31, Y+12	; 0x0c
    930c:	90 81       	ld	r25, Z
    930e:	f1 01       	movw	r30, r2
    9310:	80 81       	ld	r24, Z
    9312:	98 9f       	mul	r25, r24
    9314:	b0 0c       	add	r11, r0
    9316:	11 24       	eor	r1, r1
    9318:	f1 e4       	ldi	r31, 0x41	; 65
    931a:	2f 0e       	add	r2, r31
    931c:	31 1c       	adc	r3, r1
    931e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9320:	9c 85       	ldd	r25, Y+12	; 0x0c
    9322:	8f 5b       	subi	r24, 0xBF	; 191
    9324:	9f 4f       	sbci	r25, 0xFF	; 255
    9326:	9c 87       	std	Y+12, r25	; 0x0c
    9328:	8b 87       	std	Y+11, r24	; 0x0b
    932a:	91 e4       	ldi	r25, 0x41	; 65
    932c:	89 0e       	add	r8, r25
    932e:	91 1c       	adc	r9, r1

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9330:	eb 85       	ldd	r30, Y+11	; 0x0b
    9332:	fc 85       	ldd	r31, Y+12	; 0x0c
    9334:	ed 58       	subi	r30, 0x8D	; 141
    9336:	ff 40       	sbci	r31, 0x0F	; 15
    9338:	09 f0       	breq	.+2      	; 0x933c <animate_enemies+0x242>
    933a:	07 cf       	rjmp	.-498    	; 0x914a <animate_enemies+0x50>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    933c:	2c 96       	adiw	r28, 0x0c	; 12
    933e:	0f b6       	in	r0, 0x3f	; 63
    9340:	f8 94       	cli
    9342:	de bf       	out	0x3e, r29	; 62
    9344:	0f be       	out	0x3f, r0	; 63
    9346:	cd bf       	out	0x3d, r28	; 61
    9348:	df 91       	pop	r29
    934a:	cf 91       	pop	r28
    934c:	1f 91       	pop	r17
    934e:	0f 91       	pop	r16
    9350:	ff 90       	pop	r15
    9352:	ef 90       	pop	r14
    9354:	df 90       	pop	r13
    9356:	cf 90       	pop	r12
    9358:	bf 90       	pop	r11
    935a:	af 90       	pop	r10
    935c:	9f 90       	pop	r9
    935e:	8f 90       	pop	r8
    9360:	7f 90       	pop	r7
    9362:	6f 90       	pop	r6
    9364:	5f 90       	pop	r5
    9366:	4f 90       	pop	r4
    9368:	3f 90       	pop	r3
    936a:	2f 90       	pop	r2
    936c:	08 95       	ret

0000936e <animate_enemy_shots>:

void animate_enemy_shots()
{
    936e:	2f 92       	push	r2
    9370:	3f 92       	push	r3
    9372:	4f 92       	push	r4
    9374:	5f 92       	push	r5
    9376:	6f 92       	push	r6
    9378:	7f 92       	push	r7
    937a:	8f 92       	push	r8
    937c:	9f 92       	push	r9
    937e:	af 92       	push	r10
    9380:	bf 92       	push	r11
    9382:	cf 92       	push	r12
    9384:	df 92       	push	r13
    9386:	ef 92       	push	r14
    9388:	ff 92       	push	r15
    938a:	0f 93       	push	r16
    938c:	1f 93       	push	r17
    938e:	cf 93       	push	r28
    9390:	df 93       	push	r29
    9392:	cd b7       	in	r28, 0x3d	; 61
    9394:	de b7       	in	r29, 0x3e	; 62
    9396:	62 97       	sbiw	r28, 0x12	; 18
    9398:	0f b6       	in	r0, 0x3f	; 63
    939a:	f8 94       	cli
    939c:	de bf       	out	0x3e, r29	; 62
    939e:	0f be       	out	0x3f, r0	; 63
    93a0:	cd bf       	out	0x3d, r28	; 61
    93a2:	4d e5       	ldi	r20, 0x5D	; 93
    93a4:	24 2e       	mov	r2, r20
    93a6:	4e e0       	ldi	r20, 0x0E	; 14
    93a8:	34 2e       	mov	r3, r20
    93aa:	5c e4       	ldi	r21, 0x4C	; 76
    93ac:	85 2e       	mov	r8, r21
    93ae:	5e e0       	ldi	r21, 0x0E	; 14
    93b0:	95 2e       	mov	r9, r21
	u8 slot = ENEMY_SHOT_SLOT;
    93b2:	6e e0       	ldi	r22, 0x0E	; 14
    93b4:	b6 2e       	mov	r11, r22
    93b6:	f1 01       	movw	r30, r2
    93b8:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
    93ba:	80 81       	ld	r24, Z
    93bc:	81 30       	cpi	r24, 0x01	; 1
    93be:	09 f0       	breq	.+2      	; 0x93c2 <animate_enemy_shots+0x54>
    93c0:	e4 c0       	rjmp	.+456    	; 0x958a <animate_enemy_shots+0x21c>
			{
				if (game.enemies[i].shot[j].active)
    93c2:	d1 01       	movw	r26, r2
    93c4:	8c 91       	ld	r24, X
    93c6:	88 23       	and	r24, r24
    93c8:	09 f4       	brne	.+2      	; 0x93cc <animate_enemy_shots+0x5e>
    93ca:	df c0       	rjmp	.+446    	; 0x958a <animate_enemy_shots+0x21c>
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    93cc:	f4 01       	movw	r30, r8
    93ce:	c4 80       	ldd	r12, Z+4	; 0x04
    93d0:	d5 80       	ldd	r13, Z+5	; 0x05
    93d2:	e6 80       	ldd	r14, Z+6	; 0x06
    93d4:	f7 80       	ldd	r15, Z+7	; 0x07
    93d6:	60 90 93 0d 	lds	r6, 0x0D93
    93da:	70 90 94 0d 	lds	r7, 0x0D94
    93de:	b3 01       	movw	r22, r6
    93e0:	80 e0       	ldi	r24, 0x00	; 0
    93e2:	90 e0       	ldi	r25, 0x00	; 0
    93e4:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    93e8:	9b 01       	movw	r18, r22
    93ea:	ac 01       	movw	r20, r24
    93ec:	c7 01       	movw	r24, r14
    93ee:	b6 01       	movw	r22, r12
    93f0:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    93f4:	87 ff       	sbrs	r24, 7
    93f6:	03 c0       	rjmp	.+6      	; 0x93fe <animate_enemy_shots+0x90>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
    93f8:	d1 01       	movw	r26, r2
    93fa:	1c 92       	st	X, r1
    93fc:	7a c0       	rjmp	.+244    	; 0x94f2 <animate_enemy_shots+0x184>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    93fe:	b3 01       	movw	r22, r6
    9400:	60 52       	subi	r22, 0x20	; 32
    9402:	7f 4f       	sbci	r23, 0xFF	; 255
    9404:	80 e0       	ldi	r24, 0x00	; 0
    9406:	90 e0       	ldi	r25, 0x00	; 0
    9408:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    940c:	9b 01       	movw	r18, r22
    940e:	ac 01       	movw	r20, r24
    9410:	c7 01       	movw	r24, r14
    9412:	b6 01       	movw	r22, r12
    9414:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    9418:	18 16       	cp	r1, r24
    941a:	74 f3       	brlt	.-36     	; 0x93f8 <animate_enemy_shots+0x8a>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    941c:	41 e0       	ldi	r20, 0x01	; 1
    941e:	61 e0       	ldi	r22, 0x01	; 1
    9420:	c4 01       	movw	r24, r8
    9422:	0e 94 78 41 	call	0x82f0	; 0x82f0 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == BASIC_ENEMY_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (game.enemies[i].shot[j].shared.x < game.camera_x || game.enemies[i].shot[j].shared.x > game.camera_x + CAMERA_WIDTH*8 ||
    9426:	81 11       	cpse	r24, r1
    9428:	e7 cf       	rjmp	.-50     	; 0x93f8 <animate_enemy_shots+0x8a>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
    942a:	f4 01       	movw	r30, r8
    942c:	40 84       	ldd	r4, Z+8	; 0x08
    942e:	51 84       	ldd	r5, Z+9	; 0x09
    9430:	62 84       	ldd	r6, Z+10	; 0x0a
    9432:	73 84       	ldd	r7, Z+11	; 0x0b
    9434:	84 81       	ldd	r24, Z+4	; 0x04
    9436:	95 81       	ldd	r25, Z+5	; 0x05
    9438:	a6 81       	ldd	r26, Z+6	; 0x06
    943a:	b7 81       	ldd	r27, Z+7	; 0x07
    943c:	89 83       	std	Y+1, r24	; 0x01
    943e:	9a 83       	std	Y+2, r25	; 0x02
    9440:	ab 83       	std	Y+3, r26	; 0x03
    9442:	bc 83       	std	Y+4, r27	; 0x04
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x,game.player.shared.y, game.player.width*8, game.player.height*8,
    9444:	c3 01       	movw	r24, r6
    9446:	b2 01       	movw	r22, r4
    9448:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    944c:	6d 83       	std	Y+5, r22	; 0x05
    944e:	7e 83       	std	Y+6, r23	; 0x06
    9450:	8f 83       	std	Y+7, r24	; 0x07
    9452:	98 87       	std	Y+8, r25	; 0x08
    9454:	69 81       	ldd	r22, Y+1	; 0x01
    9456:	7a 81       	ldd	r23, Y+2	; 0x02
    9458:	8b 81       	ldd	r24, Y+3	; 0x03
    945a:	9c 81       	ldd	r25, Y+4	; 0x04
    945c:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    9460:	69 87       	std	Y+9, r22	; 0x09
    9462:	7a 87       	std	Y+10, r23	; 0x0a
    9464:	8b 87       	std	Y+11, r24	; 0x0b
    9466:	9c 87       	std	Y+12, r25	; 0x0c
    9468:	20 91 bd 0d 	lds	r18, 0x0DBD
    946c:	22 0f       	add	r18, r18
    946e:	22 0f       	add	r18, r18
    9470:	22 0f       	add	r18, r18
    9472:	40 91 bc 0d 	lds	r20, 0x0DBC
    9476:	44 0f       	add	r20, r20
    9478:	44 0f       	add	r20, r20
    947a:	44 0f       	add	r20, r20
    947c:	60 91 b1 0d 	lds	r22, 0x0DB1
    9480:	70 91 b2 0d 	lds	r23, 0x0DB2
    9484:	80 91 b3 0d 	lds	r24, 0x0DB3
    9488:	90 91 b4 0d 	lds	r25, 0x0DB4
    948c:	29 8b       	std	Y+17, r18	; 0x11
    948e:	4a 8b       	std	Y+18, r20	; 0x12
    9490:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    9494:	6d 87       	std	Y+13, r22	; 0x0d
    9496:	7e 87       	std	Y+14, r23	; 0x0e
    9498:	8f 87       	std	Y+15, r24	; 0x0f
    949a:	98 8b       	std	Y+16, r25	; 0x10
    949c:	60 91 ad 0d 	lds	r22, 0x0DAD
    94a0:	70 91 ae 0d 	lds	r23, 0x0DAE
    94a4:	80 91 af 0d 	lds	r24, 0x0DAF
    94a8:	90 91 b0 0d 	lds	r25, 0x0DB0
    94ac:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    94b0:	dc 01       	movw	r26, r24
    94b2:	cb 01       	movw	r24, r22
    94b4:	28 e0       	ldi	r18, 0x08	; 8
    94b6:	a2 2e       	mov	r10, r18
    94b8:	38 e0       	ldi	r19, 0x08	; 8
    94ba:	c3 2e       	mov	r12, r19
    94bc:	ed 80       	ldd	r14, Y+5	; 0x05
    94be:	fe 80       	ldd	r15, Y+6	; 0x06
    94c0:	09 85       	ldd	r16, Y+9	; 0x09
    94c2:	1a 85       	ldd	r17, Y+10	; 0x0a
    94c4:	29 89       	ldd	r18, Y+17	; 0x11
    94c6:	4a 89       	ldd	r20, Y+18	; 0x12
    94c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    94ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    94cc:	0e 94 bd 3a 	call	0x757a	; 0x757a <LBCollides>
    94d0:	88 23       	and	r24, r24
    94d2:	a1 f0       	breq	.+40     	; 0x94fc <animate_enemy_shots+0x18e>
							game.enemies[i].shot[j].shared.x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    94d4:	80 91 be 0d 	lds	r24, 0x0DBE
    94d8:	f1 01       	movw	r30, r2
    94da:	31 97       	sbiw	r30, 0x01	; 1
    94dc:	90 81       	ld	r25, Z
    94de:	89 1b       	sub	r24, r25
    94e0:	80 93 be 0d 	sts	0x0DBE, r24
						if (game.player.shield <= 0)
    94e4:	18 16       	cp	r1, r24
    94e6:	1c f0       	brlt	.+6      	; 0x94ee <animate_enemy_shots+0x180>
						{
							game.player.flags = EXPLODING;
    94e8:	b0 e1       	ldi	r27, 0x10	; 16
    94ea:	b0 93 b9 0d 	sts	0x0DB9, r27
						}
						game.enemies[i].shot[j].active = 0;
    94ee:	f1 01       	movw	r30, r2
    94f0:	10 82       	st	Z, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    94f2:	01 e0       	ldi	r16, 0x01	; 1
    94f4:	21 e0       	ldi	r18, 0x01	; 1
    94f6:	40 e0       	ldi	r20, 0x00	; 0
    94f8:	60 ee       	ldi	r22, 0xE0	; 224
    94fa:	44 c0       	rjmp	.+136    	; 0x9584 <animate_enemy_shots+0x216>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += game.enemies[i].shot[j].shared.vx*FRAME_TIME;
    94fc:	d4 01       	movw	r26, r8
    94fe:	1c 96       	adiw	r26, 0x0c	; 12
    9500:	6d 91       	ld	r22, X+
    9502:	7c 91       	ld	r23, X
    9504:	1d 97       	sbiw	r26, 0x0d	; 13
    9506:	88 27       	eor	r24, r24
    9508:	77 fd       	sbrc	r23, 7
    950a:	80 95       	com	r24
    950c:	98 2f       	mov	r25, r24
    950e:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <__floatsisf>
    9512:	29 e8       	ldi	r18, 0x89	; 137
    9514:	38 e8       	ldi	r19, 0x88	; 136
    9516:	48 e8       	ldi	r20, 0x88	; 136
    9518:	5c e3       	ldi	r21, 0x3C	; 60
    951a:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    951e:	9b 01       	movw	r18, r22
    9520:	ac 01       	movw	r20, r24
    9522:	69 81       	ldd	r22, Y+1	; 0x01
    9524:	7a 81       	ldd	r23, Y+2	; 0x02
    9526:	8b 81       	ldd	r24, Y+3	; 0x03
    9528:	9c 81       	ldd	r25, Y+4	; 0x04
    952a:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    952e:	6b 01       	movw	r12, r22
    9530:	7c 01       	movw	r14, r24
    9532:	f4 01       	movw	r30, r8
    9534:	64 83       	std	Z+4, r22	; 0x04
    9536:	75 83       	std	Z+5, r23	; 0x05
    9538:	86 83       	std	Z+6, r24	; 0x06
    953a:	97 83       	std	Z+7, r25	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    953c:	60 91 95 0d 	lds	r22, 0x0D95
    9540:	70 91 96 0d 	lds	r23, 0x0D96
    9544:	80 e0       	ldi	r24, 0x00	; 0
    9546:	90 e0       	ldi	r25, 0x00	; 0
    9548:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    954c:	9b 01       	movw	r18, r22
    954e:	ac 01       	movw	r20, r24
    9550:	c3 01       	movw	r24, r6
    9552:	b2 01       	movw	r22, r4
    9554:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    9558:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    955c:	76 2e       	mov	r7, r22
    955e:	60 91 93 0d 	lds	r22, 0x0D93
    9562:	70 91 94 0d 	lds	r23, 0x0D94
    9566:	80 e0       	ldi	r24, 0x00	; 0
    9568:	90 e0       	ldi	r25, 0x00	; 0
    956a:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    956e:	9b 01       	movw	r18, r22
    9570:	ac 01       	movw	r20, r24
    9572:	c7 01       	movw	r24, r14
    9574:	b6 01       	movw	r22, r12
    9576:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    957a:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <__fixunssfsi>
    957e:	01 e0       	ldi	r16, 0x01	; 1
    9580:	21 e0       	ldi	r18, 0x01	; 1
    9582:	47 2d       	mov	r20, r7
    9584:	8b 2d       	mov	r24, r11
    9586:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
					}
				}
			}
			slot += 1;
    958a:	b3 94       	inc	r11
    958c:	f1 e4       	ldi	r31, 0x41	; 65
    958e:	2f 0e       	add	r2, r31
    9590:	31 1c       	adc	r3, r1
    9592:	81 e4       	ldi	r24, 0x41	; 65
    9594:	88 0e       	add	r8, r24
    9596:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9598:	93 e1       	ldi	r25, 0x13	; 19
    959a:	b9 12       	cpse	r11, r25
    959c:	0c cf       	rjmp	.-488    	; 0x93b6 <animate_enemy_shots+0x48>
				}
			}
			slot += 1;
		}
	}
}
    959e:	62 96       	adiw	r28, 0x12	; 18
    95a0:	0f b6       	in	r0, 0x3f	; 63
    95a2:	f8 94       	cli
    95a4:	de bf       	out	0x3e, r29	; 62
    95a6:	0f be       	out	0x3f, r0	; 63
    95a8:	cd bf       	out	0x3d, r28	; 61
    95aa:	df 91       	pop	r29
    95ac:	cf 91       	pop	r28
    95ae:	1f 91       	pop	r17
    95b0:	0f 91       	pop	r16
    95b2:	ff 90       	pop	r15
    95b4:	ef 90       	pop	r14
    95b6:	df 90       	pop	r13
    95b8:	cf 90       	pop	r12
    95ba:	bf 90       	pop	r11
    95bc:	af 90       	pop	r10
    95be:	9f 90       	pop	r9
    95c0:	8f 90       	pop	r8
    95c2:	7f 90       	pop	r7
    95c4:	6f 90       	pop	r6
    95c6:	5f 90       	pop	r5
    95c8:	4f 90       	pop	r4
    95ca:	3f 90       	pop	r3
    95cc:	2f 90       	pop	r2
    95ce:	08 95       	ret

000095d0 <update_level>:

void update_level()
{
    95d0:	cf 93       	push	r28
    95d2:	df 93       	push	r29
	game.frame_counter++;
    95d4:	80 91 a2 0d 	lds	r24, 0x0DA2
    95d8:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    95da:	8c 33       	cpi	r24, 0x3C	; 60
    95dc:	19 f0       	breq	.+6      	; 0x95e4 <update_level+0x14>
	}
}

void update_level()
{
	game.frame_counter++;
    95de:	80 93 a2 0d 	sts	0x0DA2, r24
    95e2:	0f c0       	rjmp	.+30     	; 0x9602 <update_level+0x32>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    95e4:	10 92 a2 0d 	sts	0x0DA2, r1
		if (game.time != 65535) game.time++;
    95e8:	80 91 99 0d 	lds	r24, 0x0D99
    95ec:	90 91 9a 0d 	lds	r25, 0x0D9A
    95f0:	8f 3f       	cpi	r24, 0xFF	; 255
    95f2:	2f ef       	ldi	r18, 0xFF	; 255
    95f4:	92 07       	cpc	r25, r18
    95f6:	29 f0       	breq	.+10     	; 0x9602 <update_level+0x32>
    95f8:	01 96       	adiw	r24, 0x01	; 1
    95fa:	90 93 9a 0d 	sts	0x0D9A, r25
    95fe:	80 93 99 0d 	sts	0x0D99, r24
	}
	
	if (game.player.shared.vx > 0 &&
    9602:	80 91 b5 0d 	lds	r24, 0x0DB5
    9606:	90 91 b6 0d 	lds	r25, 0x0DB6
    960a:	18 16       	cp	r1, r24
    960c:	19 06       	cpc	r1, r25
    960e:	44 f5       	brge	.+80     	; 0x9660 <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    9610:	c0 91 93 0d 	lds	r28, 0x0D93
    9614:	d0 91 94 0d 	lds	r29, 0x0D94
    9618:	be 01       	movw	r22, r28
    961a:	80 e0       	ldi	r24, 0x00	; 0
    961c:	90 e0       	ldi	r25, 0x00	; 0
    961e:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    9622:	9b 01       	movw	r18, r22
    9624:	ac 01       	movw	r20, r24
    9626:	60 91 ad 0d 	lds	r22, 0x0DAD
    962a:	70 91 ae 0d 	lds	r23, 0x0DAE
    962e:	80 91 af 0d 	lds	r24, 0x0DAF
    9632:	90 91 b0 0d 	lds	r25, 0x0DB0
    9636:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
	{
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
    963a:	20 e0       	ldi	r18, 0x00	; 0
    963c:	30 e0       	ldi	r19, 0x00	; 0
    963e:	40 ee       	ldi	r20, 0xE0	; 224
    9640:	52 e4       	ldi	r21, 0x42	; 66
    9642:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    9646:	87 fd       	sbrc	r24, 7
    9648:	0b c0       	rjmp	.+22     	; 0x9660 <update_level+0x90>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
    964a:	93 e0       	ldi	r25, 0x03	; 3
    964c:	d6 95       	lsr	r29
    964e:	c7 95       	ror	r28
    9650:	9a 95       	dec	r25
    9652:	e1 f7       	brne	.-8      	; 0x964c <update_level+0x7c>
    9654:	6c 96       	adiw	r28, 0x1c	; 28
		game.frame_counter = 0;
		if (game.time != 65535) game.time++;
	}
	
	if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    9656:	cf 3f       	cpi	r28, 0xFF	; 255
    9658:	d1 05       	cpc	r29, r1
    965a:	10 f4       	brcc	.+4      	; 0x9660 <update_level+0x90>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
    965c:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <move_camera_x>
	}
	
	if (game.player.shared.vy > 0 &&
    9660:	20 e0       	ldi	r18, 0x00	; 0
    9662:	30 e0       	ldi	r19, 0x00	; 0
    9664:	a9 01       	movw	r20, r18
    9666:	60 91 a9 0d 	lds	r22, 0x0DA9
    966a:	70 91 aa 0d 	lds	r23, 0x0DAA
    966e:	80 91 ab 0d 	lds	r24, 0x0DAB
    9672:	90 91 ac 0d 	lds	r25, 0x0DAC
    9676:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    967a:	18 16       	cp	r1, r24
    967c:	74 f5       	brge	.+92     	; 0x96da <update_level+0x10a>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    967e:	c0 91 95 0d 	lds	r28, 0x0D95
    9682:	d0 91 96 0d 	lds	r29, 0x0D96
    9686:	be 01       	movw	r22, r28
    9688:	80 e0       	ldi	r24, 0x00	; 0
    968a:	90 e0       	ldi	r25, 0x00	; 0
    968c:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    9690:	9b 01       	movw	r18, r22
    9692:	ac 01       	movw	r20, r24
    9694:	60 91 b1 0d 	lds	r22, 0x0DB1
    9698:	70 91 b2 0d 	lds	r23, 0x0DB2
    969c:	80 91 b3 0d 	lds	r24, 0x0DB3
    96a0:	90 91 b4 0d 	lds	r25, 0x0DB4
    96a4:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    96a8:	20 e0       	ldi	r18, 0x00	; 0
    96aa:	30 e0       	ldi	r19, 0x00	; 0
    96ac:	40 ec       	ldi	r20, 0xC0	; 192
    96ae:	51 e4       	ldi	r21, 0x41	; 65
    96b0:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
		(game.camera_x/8 + CAMERA_WIDTH < LEVEL_WIDTH))
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
    96b4:	20 e0       	ldi	r18, 0x00	; 0
    96b6:	30 e0       	ldi	r19, 0x00	; 0
    96b8:	40 e4       	ldi	r20, 0x40	; 64
    96ba:	53 e4       	ldi	r21, 0x43	; 67
    96bc:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    96c0:	87 fd       	sbrc	r24, 7
    96c2:	0b c0       	rjmp	.+22     	; 0x96da <update_level+0x10a>
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
    96c4:	83 e0       	ldi	r24, 0x03	; 3
    96c6:	d6 95       	lsr	r29
    96c8:	c7 95       	ror	r28
    96ca:	8a 95       	dec	r24
    96cc:	e1 f7       	brne	.-8      	; 0x96c6 <update_level+0xf6>
    96ce:	6a 96       	adiw	r28, 0x1a	; 26
	{
		move_camera_x();
	}
	
	if (game.player.shared.vy > 0 &&
	    (game.player.shared.y - game.camera_y + 24) >= ((CAMERA_HEIGHT - 2) * 8) &&
    96d0:	cf 3f       	cpi	r28, 0xFF	; 255
    96d2:	d1 05       	cpc	r29, r1
    96d4:	10 f4       	brcc	.+4      	; 0x96da <update_level+0x10a>
		(game.camera_y/8 + CAMERA_HEIGHT < LEVEL_HEIGHT))
	{
		move_camera_y();
    96d6:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <move_camera_y>
	}
	
	// Score
	PrintByte(9, VRAM_TILES_V-1, game.lives ,true);
    96da:	21 e0       	ldi	r18, 0x01	; 1
    96dc:	40 91 9d 0d 	lds	r20, 0x0D9D
    96e0:	6f e1       	ldi	r22, 0x1F	; 31
    96e2:	70 e0       	ldi	r23, 0x00	; 0
    96e4:	89 e0       	ldi	r24, 0x09	; 9
    96e6:	90 e0       	ldi	r25, 0x00	; 0
    96e8:	0e 94 29 39 	call	0x7252	; 0x7252 <PrintByte>
	PrintInt(27, VRAM_TILES_V-1, game.score ,true);
    96ec:	40 91 97 0d 	lds	r20, 0x0D97
    96f0:	50 91 98 0d 	lds	r21, 0x0D98
    96f4:	21 e0       	ldi	r18, 0x01	; 1
    96f6:	6f e1       	ldi	r22, 0x1F	; 31
    96f8:	70 e0       	ldi	r23, 0x00	; 0
    96fa:	8b e1       	ldi	r24, 0x1B	; 27
    96fc:	90 e0       	ldi	r25, 0x00	; 0
    96fe:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <PrintInt>
	PrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
    9702:	21 e0       	ldi	r18, 0x01	; 1
    9704:	40 91 be 0d 	lds	r20, 0x0DBE
    9708:	6e e1       	ldi	r22, 0x1E	; 30
    970a:	70 e0       	ldi	r23, 0x00	; 0
    970c:	89 e0       	ldi	r24, 0x09	; 9
    970e:	90 e0       	ldi	r25, 0x00	; 0
    9710:	0e 94 29 39 	call	0x7252	; 0x7252 <PrintByte>
	PrintInt(27, VRAM_TILES_V-2, game.time ,true);
    9714:	40 91 99 0d 	lds	r20, 0x0D99
    9718:	50 91 9a 0d 	lds	r21, 0x0D9A
    971c:	21 e0       	ldi	r18, 0x01	; 1
    971e:	6e e1       	ldi	r22, 0x1E	; 30
    9720:	70 e0       	ldi	r23, 0x00	; 0
    9722:	8b e1       	ldi	r24, 0x1B	; 27
    9724:	90 e0       	ldi	r25, 0x00	; 0
	
}
    9726:	df 91       	pop	r29
    9728:	cf 91       	pop	r28
	
	// Score
	PrintByte(9, VRAM_TILES_V-1, game.lives ,true);
	PrintInt(27, VRAM_TILES_V-1, game.score ,true);
	PrintByte(9, VRAM_TILES_V-2, game.player.shield ,true);
	PrintInt(27, VRAM_TILES_V-2, game.time ,true);
    972a:	0c 94 5c 39 	jmp	0x72b8	; 0x72b8 <PrintInt>

0000972e <clear_sprites>:
	
}

void clear_sprites(u8 from, u8 count)
{
    972e:	ef 92       	push	r14
    9730:	ff 92       	push	r15
    9732:	0f 93       	push	r16
    9734:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    9736:	c8 2f       	mov	r28, r24
    9738:	e6 2e       	mov	r14, r22
    973a:	f1 2c       	mov	r15, r1
    973c:	e8 0e       	add	r14, r24
    973e:	f1 1c       	adc	r15, r1
    9740:	8c 2f       	mov	r24, r28
    9742:	90 e0       	ldi	r25, 0x00	; 0
    9744:	8e 15       	cp	r24, r14
    9746:	9f 05       	cpc	r25, r15
    9748:	7c f4       	brge	.+30     	; 0x9768 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    974a:	40 e0       	ldi	r20, 0x00	; 0
    974c:	64 e9       	ldi	r22, 0x94	; 148
    974e:	72 e3       	ldi	r23, 0x32	; 50
    9750:	8c 2f       	mov	r24, r28
    9752:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    9756:	01 e0       	ldi	r16, 0x01	; 1
    9758:	21 e0       	ldi	r18, 0x01	; 1
    975a:	40 e0       	ldi	r20, 0x00	; 0
    975c:	60 ee       	ldi	r22, 0xE0	; 224
    975e:	8c 2f       	mov	r24, r28
    9760:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    9764:	cf 5f       	subi	r28, 0xFF	; 255
    9766:	ec cf       	rjmp	.-40     	; 0x9740 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    9768:	cf 91       	pop	r28
    976a:	0f 91       	pop	r16
    976c:	ff 90       	pop	r15
    976e:	ef 90       	pop	r14
    9770:	08 95       	ret

00009772 <level_transition>:
	Print(0, VRAM_TILES_V-2, (char*) strShield);
	Print(18, VRAM_TILES_V-2, (char*) strTime);
}

void level_transition(u8 index)
{
    9772:	cf 93       	push	r28
    9774:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    9776:	61 e0       	ldi	r22, 0x01	; 1
    9778:	83 e0       	ldi	r24, 0x03	; 3
    977a:	0e 94 17 3a 	call	0x742e	; 0x742e <FadeOut>
	ClearVram();
    977e:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    9782:	64 e1       	ldi	r22, 0x14	; 20
    9784:	80 e0       	ldi	r24, 0x00	; 0
    9786:	0e 94 97 4b 	call	0x972e	; 0x972e <clear_sprites>
	LBRotateSprites();
    978a:	0e 94 82 3b 	call	0x7704	; 0x7704 <LBRotateSprites>
	init_player_state();
    978e:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <init_player_state>
	init_enemy_state();
    9792:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <init_enemy_state>
	Print(8, 12, (char*) strLevels+index*16);
    9796:	80 e1       	ldi	r24, 0x10	; 16
    9798:	c8 9f       	mul	r28, r24
    979a:	a0 01       	movw	r20, r0
    979c:	11 24       	eor	r1, r1
    979e:	45 5a       	subi	r20, 0xA5	; 165
    97a0:	56 4f       	sbci	r21, 0xF6	; 246
    97a2:	6c e0       	ldi	r22, 0x0C	; 12
    97a4:	70 e0       	ldi	r23, 0x00	; 0
    97a6:	88 e0       	ldi	r24, 0x08	; 8
    97a8:	90 e0       	ldi	r25, 0x00	; 0
    97aa:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	FadeIn(1, true);
    97ae:	61 e0       	ldi	r22, 0x01	; 1
    97b0:	81 e0       	ldi	r24, 0x01	; 1
    97b2:	0e 94 0b 3a 	call	0x7416	; 0x7416 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    97b6:	83 e0       	ldi	r24, 0x03	; 3
    97b8:	0e 94 e3 3a 	call	0x75c6	; 0x75c6 <LBWaitSeconds>
	FadeOut(1, true);
    97bc:	61 e0       	ldi	r22, 0x01	; 1
    97be:	81 e0       	ldi	r24, 0x01	; 1
    97c0:	0e 94 17 3a 	call	0x742e	; 0x742e <FadeOut>
	ClearVram();
    97c4:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    97c8:	60 e0       	ldi	r22, 0x00	; 0
    97ca:	83 e0       	ldi	r24, 0x03	; 3
    97cc:	0e 94 0b 3a 	call	0x7416	; 0x7416 <FadeIn>
	load_level(index);
    97d0:	8c 2f       	mov	r24, r28
}
    97d2:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    97d4:	0c 94 49 3f 	jmp	0x7e92	; 0x7e92 <load_level>

000097d8 <save_score>:
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    97d8:	8f e6       	ldi	r24, 0x6F	; 111
    97da:	9d e0       	ldi	r25, 0x0D	; 13
    97dc:	0c 94 c8 2c 	jmp	0x5990	; 0x5990 <EepromWriteBlock>

000097e0 <load_splash>:
	load_splash();
}

void load_splash()
{
	Screen.scrollX = 0;
    97e0:	e9 e9       	ldi	r30, 0x99	; 153
    97e2:	fc e0       	ldi	r31, 0x0C	; 12
    97e4:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    97e6:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    97e8:	80 e2       	ldi	r24, 0x20	; 32
    97ea:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    97ec:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    97ee:	ef e8       	ldi	r30, 0x8F	; 143
    97f0:	fd e0       	ldi	r31, 0x0D	; 13
    97f2:	17 86       	std	Z+15, r1	; 0x0f
	game.selection = START_SELECTED;
    97f4:	12 8a       	std	Z+18, r1	; 0x12
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    97f6:	64 e1       	ldi	r22, 0x14	; 20
    97f8:	80 e0       	ldi	r24, 0x00	; 0
    97fa:	0e 94 97 4b 	call	0x972e	; 0x972e <clear_sprites>
	LBRotateSprites();
    97fe:	0e 94 82 3b 	call	0x7704	; 0x7704 <LBRotateSprites>
	Print(8, 15, (char*) str1Player);
    9802:	46 eb       	ldi	r20, 0xB6	; 182
    9804:	59 e0       	ldi	r21, 0x09	; 9
    9806:	6f e0       	ldi	r22, 0x0F	; 15
    9808:	70 e0       	ldi	r23, 0x00	; 0
    980a:	88 e0       	ldi	r24, 0x08	; 8
    980c:	90 e0       	ldi	r25, 0x00	; 0
    980e:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	Print(8, 16, (char*) strHighscores);
    9812:	4a ea       	ldi	r20, 0xAA	; 170
    9814:	59 e0       	ldi	r21, 0x09	; 9
    9816:	60 e1       	ldi	r22, 0x10	; 16
    9818:	70 e0       	ldi	r23, 0x00	; 0
    981a:	88 e0       	ldi	r24, 0x08	; 8
    981c:	90 e0       	ldi	r25, 0x00	; 0
    981e:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	Print(6, 21, (char*) strSelectHandle);
    9822:	49 e9       	ldi	r20, 0x99	; 153
    9824:	59 e0       	ldi	r21, 0x09	; 9
    9826:	65 e1       	ldi	r22, 0x15	; 21
    9828:	70 e0       	ldi	r23, 0x00	; 0
    982a:	86 e0       	ldi	r24, 0x06	; 6
    982c:	90 e0       	ldi	r25, 0x00	; 0
    982e:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	Print(4, 26, (char*) strCopyright);
    9832:	4c eb       	ldi	r20, 0xBC	; 188
    9834:	59 e0       	ldi	r21, 0x09	; 9
    9836:	6a e1       	ldi	r22, 0x1A	; 26
    9838:	70 e0       	ldi	r23, 0x00	; 0
    983a:	84 e0       	ldi	r24, 0x04	; 4
    983c:	90 e0       	ldi	r25, 0x00	; 0
    983e:	0e 94 94 39 	call	0x7328	; 0x7328 <Print>
	DrawMap2(6, 5, (const char*) map_splash);
    9842:	4d e7       	ldi	r20, 0x7D	; 125
    9844:	5b e4       	ldi	r21, 0x4B	; 75
    9846:	65 e0       	ldi	r22, 0x05	; 5
    9848:	86 e0       	ldi	r24, 0x06	; 6
    984a:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    984e:	40 e0       	ldi	r20, 0x00	; 0
    9850:	61 e9       	ldi	r22, 0x91	; 145
    9852:	72 e3       	ldi	r23, 0x32	; 50
    9854:	80 e0       	ldi	r24, 0x00	; 0
    9856:	0c 94 f2 3a 	jmp	0x75e4	; 0x75e4 <LBMapSprite>

0000985a <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    985a:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <save_score>
	fade_through();
    985e:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <fade_through>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    9862:	64 e1       	ldi	r22, 0x14	; 20
    9864:	80 e0       	ldi	r24, 0x00	; 0
    9866:	0e 94 97 4b 	call	0x972e	; 0x972e <clear_sprites>
	LBRotateSprites();
    986a:	0e 94 82 3b 	call	0x7704	; 0x7704 <LBRotateSprites>
	init_game_state();
    986e:	0e 94 c7 3b 	call	0x778e	; 0x778e <init_game_state>
	init_player_state();
    9872:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <init_player_state>
	init_enemy_state();
    9876:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <init_enemy_state>
	load_splash();
    987a:	0c 94 f0 4b 	jmp	0x97e0	; 0x97e0 <load_splash>

0000987e <handle_player_death>:
	}
}

void handle_player_death()
{
	game.lives--;
    987e:	80 91 9d 0d 	lds	r24, 0x0D9D
    9882:	81 50       	subi	r24, 0x01	; 1
    9884:	80 93 9d 0d 	sts	0x0D9D, r24
	if (game.lives == 0)
    9888:	81 11       	cpse	r24, r1
    988a:	02 c0       	rjmp	.+4      	; 0x9890 <handle_player_death+0x12>
	{
		exit_game();
    988c:	0c 94 2d 4c 	jmp	0x985a	; 0x985a <exit_game>
		return;
	}
	FadeOut(FRAMES_PER_FADE, true);
    9890:	61 e0       	ldi	r22, 0x01	; 1
    9892:	83 e0       	ldi	r24, 0x03	; 3
    9894:	0e 94 17 3a 	call	0x742e	; 0x742e <FadeOut>
	ClearVram();
    9898:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    989c:	64 e1       	ldi	r22, 0x14	; 20
    989e:	80 e0       	ldi	r24, 0x00	; 0
    98a0:	0e 94 97 4b 	call	0x972e	; 0x972e <clear_sprites>
	LBRotateSprites();
    98a4:	0e 94 82 3b 	call	0x7704	; 0x7704 <LBRotateSprites>
	init_player_state();
    98a8:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <init_player_state>
	init_enemy_state();
    98ac:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <init_enemy_state>
	FadeIn(FRAMES_PER_FADE, false);
    98b0:	60 e0       	ldi	r22, 0x00	; 0
    98b2:	83 e0       	ldi	r24, 0x03	; 3
    98b4:	0e 94 0b 3a 	call	0x7416	; 0x7416 <FadeIn>
	load_level(game.current_level);
    98b8:	80 91 9f 0d 	lds	r24, 0x0D9F
    98bc:	0c 94 49 3f 	jmp	0x7e92	; 0x7e92 <load_level>

000098c0 <update_player>:
}

void update_player()
{
    98c0:	0f 93       	push	r16
    98c2:	1f 93       	push	r17
    98c4:	cf 93       	push	r28
    98c6:	df 93       	push	r29
    98c8:	1f 92       	push	r1
    98ca:	cd b7       	in	r28, 0x3d	; 61
    98cc:	de b7       	in	r29, 0x3e	; 62
	
	if (game.player.flags & EXPLODING)
    98ce:	80 91 b9 0d 	lds	r24, 0x0DB9
    98d2:	84 ff       	sbrs	r24, 4
    98d4:	15 c0       	rjmp	.+42     	; 0x9900 <update_player+0x40>
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
    98d6:	00 91 bd 0d 	lds	r16, 0x0DBD
    98da:	20 91 bc 0d 	lds	r18, 0x0DBC
    98de:	40 e0       	ldi	r20, 0x00	; 0
    98e0:	6d e2       	ldi	r22, 0x2D	; 45
    98e2:	7e e0       	ldi	r23, 0x0E	; 14
    98e4:	89 eb       	ldi	r24, 0xB9	; 185
    98e6:	9d e0       	ldi	r25, 0x0D	; 13
    98e8:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <map_explosion>
    98ec:	88 23       	and	r24, r24
    98ee:	09 f4       	brne	.+2      	; 0x98f2 <update_player+0x32>
    98f0:	a0 c1       	rjmp	.+832    	; 0x9c32 <update_player+0x372>
		if(game.player.direction == D_RIGHT)
		{
			game.player.shared.x += 8;
		}
	}
}
    98f2:	0f 90       	pop	r0
    98f4:	df 91       	pop	r29
    98f6:	cf 91       	pop	r28
    98f8:	1f 91       	pop	r17
    98fa:	0f 91       	pop	r16
	
	if (game.player.flags & EXPLODING)
	{
		if (map_explosion(&game.player.flags, &game.player.expl, PLAYER_SLOT, game.player.width, game.player.height))
		{
			handle_player_death();
    98fc:	0c 94 3f 4c 	jmp	0x987e	; 0x987e <handle_player_death>
		}
	}
	else if (game.player.flags & (IDLE|RUNNING))
    9900:	98 2f       	mov	r25, r24
    9902:	9a 70       	andi	r25, 0x0A	; 10
    9904:	09 f4       	brne	.+2      	; 0x9908 <update_player+0x48>
    9906:	ed c0       	rjmp	.+474    	; 0x9ae2 <update_player+0x222>
	{
		game.player.width = 2;
    9908:	12 e0       	ldi	r17, 0x02	; 2
    990a:	10 93 bc 0d 	sts	0x0DBC, r17
		game.player.height = 3;
    990e:	83 e0       	ldi	r24, 0x03	; 3
    9910:	80 93 bd 0d 	sts	0x0DBD, r24
		
		if (!on_solid_ground(&game.player.shared, game.player.width, game.player.height))
    9914:	43 e0       	ldi	r20, 0x03	; 3
    9916:	62 e0       	ldi	r22, 0x02	; 2
    9918:	89 ea       	ldi	r24, 0xA9	; 169
    991a:	9d e0       	ldi	r25, 0x0D	; 13
    991c:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <on_solid_ground>
    9920:	88 23       	and	r24, r24
    9922:	09 f4       	brne	.+2      	; 0x9926 <update_player+0x66>
    9924:	c7 c0       	rjmp	.+398    	; 0x9ab4 <update_player+0x1f4>
			game.player.flags = JUMPING;
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
		}
		else
		{
			if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    9926:	00 91 7e 0f 	lds	r16, 0x0F7E
    992a:	07 ff       	sbrs	r16, 7
    992c:	2d c0       	rjmp	.+90     	; 0x9988 <update_player+0xc8>
    992e:	20 e0       	ldi	r18, 0x00	; 0
    9930:	30 e0       	ldi	r19, 0x00	; 0
    9932:	40 e0       	ldi	r20, 0x00	; 0
    9934:	5e e3       	ldi	r21, 0x3E	; 62
    9936:	60 91 ad 0d 	lds	r22, 0x0DAD
    993a:	70 91 ae 0d 	lds	r23, 0x0DAE
    993e:	80 91 af 0d 	lds	r24, 0x0DAF
    9942:	90 91 b0 0d 	lds	r25, 0x0DB0
    9946:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    994a:	20 e0       	ldi	r18, 0x00	; 0
    994c:	30 e0       	ldi	r19, 0x00	; 0
    994e:	40 e0       	ldi	r20, 0x00	; 0
    9950:	50 e4       	ldi	r21, 0x40	; 64
    9952:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    9956:	20 e0       	ldi	r18, 0x00	; 0
    9958:	30 e0       	ldi	r19, 0x00	; 0
    995a:	4f e7       	ldi	r20, 0x7F	; 127
    995c:	53 e4       	ldi	r21, 0x43	; 67
    995e:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    9962:	87 ff       	sbrs	r24, 7
    9964:	11 c0       	rjmp	.+34     	; 0x9988 <update_player+0xc8>
			{
				game.player.shared.vx = RUN_SPEED;
    9966:	8c e3       	ldi	r24, 0x3C	; 60
    9968:	90 e0       	ldi	r25, 0x00	; 0
    996a:	90 93 b6 0d 	sts	0x0DB6, r25
    996e:	80 93 b5 0d 	sts	0x0DB5, r24
				game.player.flags = RUNNING;
    9972:	10 93 b9 0d 	sts	0x0DB9, r17
				game.player.direction = D_RIGHT;
    9976:	81 e0       	ldi	r24, 0x01	; 1
    9978:	80 93 bb 0d 	sts	0x0DBB, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), 0);
    997c:	85 e1       	ldi	r24, 0x15	; 21
    997e:	9e e0       	ldi	r25, 0x0E	; 14
    9980:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    9984:	40 e0       	ldi	r20, 0x00	; 0
    9986:	82 c0       	rjmp	.+260    	; 0x9a8c <update_player+0x1cc>
			}
			else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    9988:	06 ff       	sbrs	r16, 6
    998a:	27 c0       	rjmp	.+78     	; 0x99da <update_player+0x11a>
    998c:	60 91 93 0d 	lds	r22, 0x0D93
    9990:	70 91 94 0d 	lds	r23, 0x0D94
    9994:	80 e0       	ldi	r24, 0x00	; 0
    9996:	90 e0       	ldi	r25, 0x00	; 0
    9998:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    999c:	9b 01       	movw	r18, r22
    999e:	ac 01       	movw	r20, r24
    99a0:	60 91 ad 0d 	lds	r22, 0x0DAD
    99a4:	70 91 ae 0d 	lds	r23, 0x0DAE
    99a8:	80 91 af 0d 	lds	r24, 0x0DAF
    99ac:	90 91 b0 0d 	lds	r25, 0x0DB0
    99b0:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    99b4:	18 16       	cp	r1, r24
    99b6:	8c f4       	brge	.+34     	; 0x99da <update_player+0x11a>
			{
				game.player.shared.vx = -RUN_SPEED;
    99b8:	84 ec       	ldi	r24, 0xC4	; 196
    99ba:	9f ef       	ldi	r25, 0xFF	; 255
    99bc:	90 93 b6 0d 	sts	0x0DB6, r25
    99c0:	80 93 b5 0d 	sts	0x0DB5, r24
				game.player.flags = RUNNING;
    99c4:	82 e0       	ldi	r24, 0x02	; 2
    99c6:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.direction = D_LEFT;
    99ca:	10 92 bb 0d 	sts	0x0DBB, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.run), SPRITE_FLIP_X);
    99ce:	85 e1       	ldi	r24, 0x15	; 21
    99d0:	9e e0       	ldi	r25, 0x0E	; 14
    99d2:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    99d6:	41 e0       	ldi	r20, 0x01	; 1
    99d8:	59 c0       	rjmp	.+178    	; 0x9a8c <update_player+0x1cc>
			}
			else if (game.joypadState.pressed & BTN_DOWN)
    99da:	80 91 7a 0f 	lds	r24, 0x0F7A
    99de:	85 ff       	sbrs	r24, 5
    99e0:	46 c0       	rjmp	.+140    	; 0x9a6e <update_player+0x1ae>
			{
				game.player.shared.y += 16;
    99e2:	20 e0       	ldi	r18, 0x00	; 0
    99e4:	30 e0       	ldi	r19, 0x00	; 0
    99e6:	40 e8       	ldi	r20, 0x80	; 128
    99e8:	51 e4       	ldi	r21, 0x41	; 65
    99ea:	60 91 b1 0d 	lds	r22, 0x0DB1
    99ee:	70 91 b2 0d 	lds	r23, 0x0DB2
    99f2:	80 91 b3 0d 	lds	r24, 0x0DB3
    99f6:	90 91 b4 0d 	lds	r25, 0x0DB4
    99fa:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    99fe:	60 93 b1 0d 	sts	0x0DB1, r22
    9a02:	70 93 b2 0d 	sts	0x0DB2, r23
    9a06:	80 93 b3 0d 	sts	0x0DB3, r24
    9a0a:	90 93 b4 0d 	sts	0x0DB4, r25
				if(game.player.direction == D_RIGHT)
    9a0e:	80 91 bb 0d 	lds	r24, 0x0DBB
    9a12:	81 30       	cpi	r24, 0x01	; 1
    9a14:	b1 f4       	brne	.+44     	; 0x9a42 <update_player+0x182>
				{
					game.player.shared.x -= 8;
    9a16:	20 e0       	ldi	r18, 0x00	; 0
    9a18:	30 e0       	ldi	r19, 0x00	; 0
    9a1a:	40 e0       	ldi	r20, 0x00	; 0
    9a1c:	51 e4       	ldi	r21, 0x41	; 65
    9a1e:	60 91 ad 0d 	lds	r22, 0x0DAD
    9a22:	70 91 ae 0d 	lds	r23, 0x0DAE
    9a26:	80 91 af 0d 	lds	r24, 0x0DAF
    9a2a:	90 91 b0 0d 	lds	r25, 0x0DB0
    9a2e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    9a32:	60 93 ad 0d 	sts	0x0DAD, r22
    9a36:	70 93 ae 0d 	sts	0x0DAE, r23
    9a3a:	80 93 af 0d 	sts	0x0DAF, r24
    9a3e:	90 93 b0 0d 	sts	0x0DB0, r25
				}
				game.player.shared.vx = 0;
    9a42:	10 92 b6 0d 	sts	0x0DB6, r1
    9a46:	10 92 b5 0d 	sts	0x0DB5, r1
				game.player.flags = PRONE;
    9a4a:	84 e0       	ldi	r24, 0x04	; 4
    9a4c:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.width = 3;
    9a50:	83 e0       	ldi	r24, 0x03	; 3
    9a52:	80 93 bc 0d 	sts	0x0DBC, r24
				game.player.height = 1;
    9a56:	81 e0       	ldi	r24, 0x01	; 1
    9a58:	80 93 bd 0d 	sts	0x0DBD, r24
				clear_sprites(3, 3);
    9a5c:	63 e0       	ldi	r22, 0x03	; 3
    9a5e:	83 e0       	ldi	r24, 0x03	; 3
    9a60:	0e 94 97 4b 	call	0x972e	; 0x972e <clear_sprites>
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.prone), extendedSprites[PLAYER_SLOT].flags);
    9a64:	40 91 8a 0f 	lds	r20, 0x0F8A
    9a68:	85 e2       	ldi	r24, 0x25	; 37
    9a6a:	9e e0       	ldi	r25, 0x0E	; 14
    9a6c:	0b c0       	rjmp	.+22     	; 0x9a84 <update_player+0x1c4>
			}
			else
			{
				game.player.flags = IDLE;
    9a6e:	88 e0       	ldi	r24, 0x08	; 8
    9a70:	80 93 b9 0d 	sts	0x0DB9, r24
				game.player.shared.vx = 0;
    9a74:	10 92 b6 0d 	sts	0x0DB6, r1
    9a78:	10 92 b5 0d 	sts	0x0DB5, r1
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.idle), extendedSprites[PLAYER_SLOT].flags);
    9a7c:	40 91 8a 0f 	lds	r20, 0x0F8A
    9a80:	8d e0       	ldi	r24, 0x0D	; 13
    9a82:	9e e0       	ldi	r25, 0x0E	; 14
    9a84:	49 83       	std	Y+1, r20	; 0x01
    9a86:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    9a8a:	49 81       	ldd	r20, Y+1	; 0x01
    9a8c:	bc 01       	movw	r22, r24
    9a8e:	80 e0       	ldi	r24, 0x00	; 0
    9a90:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <LBMapSprite>
			}
			if (game.joypadState.pressed & BTN_B)
    9a94:	80 91 7a 0f 	lds	r24, 0x0F7A
    9a98:	80 ff       	sbrs	r24, 0
    9a9a:	cb c0       	rjmp	.+406    	; 0x9c32 <update_player+0x372>
			{
				game.player.shared.vy = -JUMP_SPEED;
    9a9c:	80 e0       	ldi	r24, 0x00	; 0
    9a9e:	90 e0       	ldi	r25, 0x00	; 0
    9aa0:	a6 e1       	ldi	r26, 0x16	; 22
    9aa2:	b3 ec       	ldi	r27, 0xC3	; 195
    9aa4:	80 93 a9 0d 	sts	0x0DA9, r24
    9aa8:	90 93 aa 0d 	sts	0x0DAA, r25
    9aac:	a0 93 ab 0d 	sts	0x0DAB, r26
    9ab0:	b0 93 ac 0d 	sts	0x0DAC, r27
				game.player.shared.gravity = GRAVITY;
    9ab4:	8f ef       	ldi	r24, 0xFF	; 255
    9ab6:	80 93 b7 0d 	sts	0x0DB7, r24
				game.player.flags = JUMPING;
    9aba:	81 e0       	ldi	r24, 0x01	; 1
    9abc:	80 93 b9 0d 	sts	0x0DB9, r24
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9ac0:	40 91 8a 0f 	lds	r20, 0x0F8A
    9ac4:	8d e1       	ldi	r24, 0x1D	; 29
    9ac6:	9e e0       	ldi	r25, 0x0E	; 14
    9ac8:	49 83       	std	Y+1, r20	; 0x01
    9aca:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    9ace:	49 81       	ldd	r20, Y+1	; 0x01
    9ad0:	bc 01       	movw	r22, r24
    9ad2:	80 e0       	ldi	r24, 0x00	; 0
		if(game.player.direction == D_RIGHT)
		{
			game.player.shared.x += 8;
		}
	}
}
    9ad4:	0f 90       	pop	r0
    9ad6:	df 91       	pop	r29
    9ad8:	cf 91       	pop	r28
    9ada:	1f 91       	pop	r17
    9adc:	0f 91       	pop	r16
			if (game.joypadState.pressed & BTN_B)
			{
				game.player.shared.vy = -JUMP_SPEED;
				game.player.shared.gravity = GRAVITY;
				game.player.flags = JUMPING;
				LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9ade:	0c 94 f2 3a 	jmp	0x75e4	; 0x75e4 <LBMapSprite>
			}
		}
	}
	else if (game.player.flags & JUMPING)
    9ae2:	80 ff       	sbrs	r24, 0
    9ae4:	6d c0       	rjmp	.+218    	; 0x9bc0 <update_player+0x300>
	{
		if ((game.joypadState.held & BTN_RIGHT) && (game.player.shared.x/8 + 2 < LEVEL_WIDTH))
    9ae6:	10 91 7e 0f 	lds	r17, 0x0F7E
    9aea:	17 ff       	sbrs	r17, 7
    9aec:	2b c0       	rjmp	.+86     	; 0x9b44 <update_player+0x284>
    9aee:	20 e0       	ldi	r18, 0x00	; 0
    9af0:	30 e0       	ldi	r19, 0x00	; 0
    9af2:	40 e0       	ldi	r20, 0x00	; 0
    9af4:	5e e3       	ldi	r21, 0x3E	; 62
    9af6:	60 91 ad 0d 	lds	r22, 0x0DAD
    9afa:	70 91 ae 0d 	lds	r23, 0x0DAE
    9afe:	80 91 af 0d 	lds	r24, 0x0DAF
    9b02:	90 91 b0 0d 	lds	r25, 0x0DB0
    9b06:	0e 94 27 50 	call	0xa04e	; 0xa04e <__mulsf3>
    9b0a:	20 e0       	ldi	r18, 0x00	; 0
    9b0c:	30 e0       	ldi	r19, 0x00	; 0
    9b0e:	40 e0       	ldi	r20, 0x00	; 0
    9b10:	50 e4       	ldi	r21, 0x40	; 64
    9b12:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    9b16:	20 e0       	ldi	r18, 0x00	; 0
    9b18:	30 e0       	ldi	r19, 0x00	; 0
    9b1a:	4f e7       	ldi	r20, 0x7F	; 127
    9b1c:	53 e4       	ldi	r21, 0x43	; 67
    9b1e:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <__cmpsf2>
    9b22:	87 ff       	sbrs	r24, 7
    9b24:	0f c0       	rjmp	.+30     	; 0x9b44 <update_player+0x284>
		{
			game.player.shared.vx = RUN_SPEED;
    9b26:	8c e3       	ldi	r24, 0x3C	; 60
    9b28:	90 e0       	ldi	r25, 0x00	; 0
    9b2a:	90 93 b6 0d 	sts	0x0DB6, r25
    9b2e:	80 93 b5 0d 	sts	0x0DB5, r24
			game.player.direction = D_RIGHT;
    9b32:	81 e0       	ldi	r24, 0x01	; 1
    9b34:	80 93 bb 0d 	sts	0x0DBB, r24
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), 0);
    9b38:	8d e1       	ldi	r24, 0x1D	; 29
    9b3a:	9e e0       	ldi	r25, 0x0E	; 14
    9b3c:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    9b40:	40 e0       	ldi	r20, 0x00	; 0
    9b42:	32 c0       	rjmp	.+100    	; 0x9ba8 <update_player+0x2e8>
		}
		else if ((game.joypadState.held & BTN_LEFT) && (game.player.shared.x > game.camera_x))
    9b44:	16 ff       	sbrs	r17, 6
    9b46:	24 c0       	rjmp	.+72     	; 0x9b90 <update_player+0x2d0>
    9b48:	60 91 93 0d 	lds	r22, 0x0D93
    9b4c:	70 91 94 0d 	lds	r23, 0x0D94
    9b50:	80 e0       	ldi	r24, 0x00	; 0
    9b52:	90 e0       	ldi	r25, 0x00	; 0
    9b54:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <__floatunsisf>
    9b58:	9b 01       	movw	r18, r22
    9b5a:	ac 01       	movw	r20, r24
    9b5c:	60 91 ad 0d 	lds	r22, 0x0DAD
    9b60:	70 91 ae 0d 	lds	r23, 0x0DAE
    9b64:	80 91 af 0d 	lds	r24, 0x0DAF
    9b68:	90 91 b0 0d 	lds	r25, 0x0DB0
    9b6c:	0e 94 23 50 	call	0xa046	; 0xa046 <__gesf2>
    9b70:	18 16       	cp	r1, r24
    9b72:	74 f4       	brge	.+28     	; 0x9b90 <update_player+0x2d0>
		{
			game.player.shared.vx = -RUN_SPEED;
    9b74:	84 ec       	ldi	r24, 0xC4	; 196
    9b76:	9f ef       	ldi	r25, 0xFF	; 255
    9b78:	90 93 b6 0d 	sts	0x0DB6, r25
    9b7c:	80 93 b5 0d 	sts	0x0DB5, r24
			game.player.direction = D_LEFT;
    9b80:	10 92 bb 0d 	sts	0x0DBB, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), SPRITE_FLIP_X);
    9b84:	8d e1       	ldi	r24, 0x1D	; 29
    9b86:	9e e0       	ldi	r25, 0x0E	; 14
    9b88:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    9b8c:	41 e0       	ldi	r20, 0x01	; 1
    9b8e:	0c c0       	rjmp	.+24     	; 0x9ba8 <update_player+0x2e8>
		}
		else
		{
			game.player.shared.vx = 0;
    9b90:	10 92 b6 0d 	sts	0x0DB6, r1
    9b94:	10 92 b5 0d 	sts	0x0DB5, r1
			LBMapSprite(PLAYER_SLOT, LBGetNextFrame(&game.player.jump), extendedSprites[PLAYER_SLOT].flags);
    9b98:	40 91 8a 0f 	lds	r20, 0x0F8A
    9b9c:	8d e1       	ldi	r24, 0x1D	; 29
    9b9e:	9e e0       	ldi	r25, 0x0E	; 14
    9ba0:	49 83       	std	Y+1, r20	; 0x01
    9ba2:	0e 94 4c 3a 	call	0x7498	; 0x7498 <LBGetNextFrame>
    9ba6:	49 81       	ldd	r20, Y+1	; 0x01
    9ba8:	bc 01       	movw	r22, r24
    9baa:	80 e0       	ldi	r24, 0x00	; 0
    9bac:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <LBMapSprite>
		}
		
		if (game.player.shared.gravity == 0)
    9bb0:	80 91 b7 0d 	lds	r24, 0x0DB7
    9bb4:	81 11       	cpse	r24, r1
    9bb6:	3d c0       	rjmp	.+122    	; 0x9c32 <update_player+0x372>
		{
			game.player.flags = IDLE;
    9bb8:	88 e0       	ldi	r24, 0x08	; 8
    9bba:	80 93 b9 0d 	sts	0x0DB9, r24
    9bbe:	39 c0       	rjmp	.+114    	; 0x9c32 <update_player+0x372>
		}
	}
	else if (game.player.flags & PRONE && game.joypadState.pressed & BTN_UP)
    9bc0:	82 ff       	sbrs	r24, 2
    9bc2:	37 c0       	rjmp	.+110    	; 0x9c32 <update_player+0x372>
    9bc4:	80 91 7a 0f 	lds	r24, 0x0F7A
    9bc8:	84 ff       	sbrs	r24, 4
    9bca:	33 c0       	rjmp	.+102    	; 0x9c32 <update_player+0x372>
	{
		game.player.flags = IDLE;	
    9bcc:	88 e0       	ldi	r24, 0x08	; 8
    9bce:	80 93 b9 0d 	sts	0x0DB9, r24
		game.player.shared.y -= 16;
    9bd2:	20 e0       	ldi	r18, 0x00	; 0
    9bd4:	30 e0       	ldi	r19, 0x00	; 0
    9bd6:	40 e8       	ldi	r20, 0x80	; 128
    9bd8:	51 e4       	ldi	r21, 0x41	; 65
    9bda:	60 91 b1 0d 	lds	r22, 0x0DB1
    9bde:	70 91 b2 0d 	lds	r23, 0x0DB2
    9be2:	80 91 b3 0d 	lds	r24, 0x0DB3
    9be6:	90 91 b4 0d 	lds	r25, 0x0DB4
    9bea:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <__subsf3>
    9bee:	60 93 b1 0d 	sts	0x0DB1, r22
    9bf2:	70 93 b2 0d 	sts	0x0DB2, r23
    9bf6:	80 93 b3 0d 	sts	0x0DB3, r24
    9bfa:	90 93 b4 0d 	sts	0x0DB4, r25
		if(game.player.direction == D_RIGHT)
    9bfe:	80 91 bb 0d 	lds	r24, 0x0DBB
    9c02:	81 30       	cpi	r24, 0x01	; 1
    9c04:	b1 f4       	brne	.+44     	; 0x9c32 <update_player+0x372>
		{
			game.player.shared.x += 8;
    9c06:	20 e0       	ldi	r18, 0x00	; 0
    9c08:	30 e0       	ldi	r19, 0x00	; 0
    9c0a:	40 e0       	ldi	r20, 0x00	; 0
    9c0c:	51 e4       	ldi	r21, 0x41	; 65
    9c0e:	60 91 ad 0d 	lds	r22, 0x0DAD
    9c12:	70 91 ae 0d 	lds	r23, 0x0DAE
    9c16:	80 91 af 0d 	lds	r24, 0x0DAF
    9c1a:	90 91 b0 0d 	lds	r25, 0x0DB0
    9c1e:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <__addsf3>
    9c22:	60 93 ad 0d 	sts	0x0DAD, r22
    9c26:	70 93 ae 0d 	sts	0x0DAE, r23
    9c2a:	80 93 af 0d 	sts	0x0DAF, r24
    9c2e:	90 93 b0 0d 	sts	0x0DB0, r25
		}
	}
}
    9c32:	0f 90       	pop	r0
    9c34:	df 91       	pop	r29
    9c36:	cf 91       	pop	r28
    9c38:	1f 91       	pop	r17
    9c3a:	0f 91       	pop	r16
    9c3c:	08 95       	ret

00009c3e <select_pressed>:
	DrawMap2(6, 5, (const char*) map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

char select_pressed(JoyPadState* p)
{
    9c3e:	fc 01       	movw	r30, r24
    9c40:	20 81       	ld	r18, Z
    9c42:	31 81       	ldd	r19, Z+1	; 0x01
    9c44:	28 70       	andi	r18, 0x08	; 8
    9c46:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    9c48:	81 e0       	ldi	r24, 0x01	; 1
    9c4a:	23 2b       	or	r18, r19
    9c4c:	09 f4       	brne	.+2      	; 0x9c50 <select_pressed+0x12>
    9c4e:	80 e0       	ldi	r24, 0x00	; 0
}
    9c50:	08 95       	ret

00009c52 <update_splash>:

void update_splash()
{
    9c52:	0f 93       	push	r16
    9c54:	cf 93       	push	r28
	if (game.joypadState.pressed & BTN_DOWN && game.selection == START_SELECTED)
    9c56:	80 91 7a 0f 	lds	r24, 0x0F7A
    9c5a:	c0 91 a1 0d 	lds	r28, 0x0DA1
    9c5e:	85 ff       	sbrs	r24, 5
    9c60:	06 c0       	rjmp	.+12     	; 0x9c6e <update_splash+0x1c>
    9c62:	c1 11       	cpse	r28, r1
    9c64:	04 c0       	rjmp	.+8      	; 0x9c6e <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    9c66:	81 e0       	ldi	r24, 0x01	; 1
    9c68:	80 93 a1 0d 	sts	0x0DA1, r24
    9c6c:	17 c0       	rjmp	.+46     	; 0x9c9c <update_splash+0x4a>
	}
	else if (game.joypadState.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    9c6e:	84 ff       	sbrs	r24, 4
    9c70:	05 c0       	rjmp	.+10     	; 0x9c7c <update_splash+0x2a>
    9c72:	c1 30       	cpi	r28, 0x01	; 1
    9c74:	19 f4       	brne	.+6      	; 0x9c7c <update_splash+0x2a>
	{
		game.selection = START_SELECTED;
    9c76:	10 92 a1 0d 	sts	0x0DA1, r1
    9c7a:	10 c0       	rjmp	.+32     	; 0x9c9c <update_splash+0x4a>
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
    9c7c:	8a e7       	ldi	r24, 0x7A	; 122
    9c7e:	9f e0       	ldi	r25, 0x0F	; 15
    9c80:	0e 94 1f 4e 	call	0x9c3e	; 0x9c3e <select_pressed>
    9c84:	88 23       	and	r24, r24
    9c86:	51 f0       	breq	.+20     	; 0x9c9c <update_splash+0x4a>
    9c88:	c1 11       	cpse	r28, r1
    9c8a:	08 c0       	rjmp	.+16     	; 0x9c9c <update_splash+0x4a>
	{
		game.current_screen = LEVEL;
    9c8c:	82 e0       	ldi	r24, 0x02	; 2
    9c8e:	80 93 9e 0d 	sts	0x0D9E, r24
		level_transition(0);
    9c92:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    9c94:	cf 91       	pop	r28
    9c96:	0f 91       	pop	r16
		game.selection = START_SELECTED;
	}
	else if (select_pressed(&game.joypadState) && game.selection == START_SELECTED)
	{
		game.current_screen = LEVEL;
		level_transition(0);
    9c98:	0c 94 b9 4b 	jmp	0x9772	; 0x9772 <level_transition>
		return;
	}
	
	if (game.selection == START_SELECTED)
    9c9c:	80 91 a1 0d 	lds	r24, 0x0DA1
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    9ca0:	01 e0       	ldi	r16, 0x01	; 1
    9ca2:	21 e0       	ldi	r18, 0x01	; 1
		game.current_screen = LEVEL;
		level_transition(0);
		return;
	}
	
	if (game.selection == START_SELECTED)
    9ca4:	81 11       	cpse	r24, r1
    9ca6:	03 c0       	rjmp	.+6      	; 0x9cae <update_splash+0x5c>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    9ca8:	48 e7       	ldi	r20, 0x78	; 120
    9caa:	68 e3       	ldi	r22, 0x38	; 56
    9cac:	03 c0       	rjmp	.+6      	; 0x9cb4 <update_splash+0x62>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    9cae:	40 e8       	ldi	r20, 0x80	; 128
    9cb0:	68 e3       	ldi	r22, 0x38	; 56
    9cb2:	80 e0       	ldi	r24, 0x00	; 0
    9cb4:	0e 94 44 3b 	call	0x7688	; 0x7688 <LBMoveSprite>
	}
}
    9cb8:	cf 91       	pop	r28
    9cba:	0f 91       	pop	r16
    9cbc:	08 95       	ret

00009cbe <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    9cbe:	83 e4       	ldi	r24, 0x43	; 67
    9cc0:	9b e1       	ldi	r25, 0x1B	; 27
    9cc2:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <InitMusicPlayer>
	ClearVram();
    9cc6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <ClearVram>
	SetMasterVolume(0x05);
    9cca:	85 e0       	ldi	r24, 0x05	; 5
    9ccc:	0e 94 3b 31 	call	0x6276	; 0x6276 <SetMasterVolume>
	SetTileTable(tiles_data);
    9cd0:	87 e9       	ldi	r24, 0x97	; 151
    9cd2:	92 e3       	ldi	r25, 0x32	; 50
    9cd4:	0e 94 6d 2b 	call	0x56da	; 0x56da <SetTileTable>
	SetSpritesTileTable(sprites_data);
    9cd8:	87 e2       	ldi	r24, 0x27	; 39
    9cda:	95 e2       	ldi	r25, 0x25	; 37
    9cdc:	0e 94 46 2b 	call	0x568c	; 0x568c <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    9ce0:	83 e2       	ldi	r24, 0x23	; 35
    9ce2:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    9ce6:	60 e0       	ldi	r22, 0x00	; 0
    9ce8:	83 e0       	ldi	r24, 0x03	; 3
    9cea:	0e 94 0b 3a 	call	0x7416	; 0x7416 <FadeIn>
	init_game_state();
    9cee:	0e 94 c7 3b 	call	0x778e	; 0x778e <init_game_state>
	load_splash();
    9cf2:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <load_splash>
	while (1)
	{
		WaitVsync(1);
    9cf6:	81 e0       	ldi	r24, 0x01	; 1
    9cf8:	90 e0       	ldi	r25, 0x00	; 0
    9cfa:	0e 94 af 39 	call	0x735e	; 0x735e <WaitVsync>
		LBGetJoyPadState(&game.joypadState, 0);
    9cfe:	60 e0       	ldi	r22, 0x00	; 0
    9d00:	8a e7       	ldi	r24, 0x7A	; 122
    9d02:	9f e0       	ldi	r25, 0x0F	; 15
    9d04:	0e 94 72 3a 	call	0x74e4	; 0x74e4 <LBGetJoyPadState>
		switch (game.current_screen)
    9d08:	80 91 9e 0d 	lds	r24, 0x0D9E
    9d0c:	88 23       	and	r24, r24
    9d0e:	a9 f0       	breq	.+42     	; 0x9d3a <main+0x7c>
    9d10:	82 30       	cpi	r24, 0x02	; 2
    9d12:	89 f7       	brne	.-30     	; 0x9cf6 <main+0x38>
			case SPLASH:
				update_splash();
				LBRotateSprites();
				break;
			case LEVEL:
				update_level();
    9d14:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <update_level>
				update_player();
    9d18:	0e 94 60 4c 	call	0x98c0	; 0x98c0 <update_player>
				update_shot();
    9d1c:	0e 94 c0 40 	call	0x8180	; 0x8180 <update_shot>
				update_enemies();
    9d20:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <update_enemies>
				update_enemy_shots();
    9d24:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <update_enemy_shots>
				animate_player();
    9d28:	0e 94 17 47 	call	0x8e2e	; 0x8e2e <animate_player>
				animate_shot();
    9d2c:	0e 94 9e 44 	call	0x893c	; 0x893c <animate_shot>
				animate_enemies();
    9d30:	0e 94 7d 48 	call	0x90fa	; 0x90fa <animate_enemies>
				animate_enemy_shots();
    9d34:	0e 94 b7 49 	call	0x936e	; 0x936e <animate_enemy_shots>
    9d38:	02 c0       	rjmp	.+4      	; 0x9d3e <main+0x80>
		WaitVsync(1);
		LBGetJoyPadState(&game.joypadState, 0);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash();
    9d3a:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <update_splash>
				update_enemy_shots();
				animate_player();
				animate_shot();
				animate_enemies();
				animate_enemy_shots();
				LBRotateSprites();
    9d3e:	0e 94 82 3b 	call	0x7704	; 0x7704 <LBRotateSprites>
				break;
    9d42:	d9 cf       	rjmp	.-78     	; 0x9cf6 <main+0x38>

00009d44 <__udivmodqi4>:
    9d44:	99 1b       	sub	r25, r25
    9d46:	79 e0       	ldi	r23, 0x09	; 9
    9d48:	04 c0       	rjmp	.+8      	; 0x9d52 <__udivmodqi4_ep>

00009d4a <__udivmodqi4_loop>:
    9d4a:	99 1f       	adc	r25, r25
    9d4c:	96 17       	cp	r25, r22
    9d4e:	08 f0       	brcs	.+2      	; 0x9d52 <__udivmodqi4_ep>
    9d50:	96 1b       	sub	r25, r22

00009d52 <__udivmodqi4_ep>:
    9d52:	88 1f       	adc	r24, r24
    9d54:	7a 95       	dec	r23
    9d56:	c9 f7       	brne	.-14     	; 0x9d4a <__udivmodqi4_loop>
    9d58:	80 95       	com	r24
    9d5a:	08 95       	ret

00009d5c <__udivmodhi4>:
    9d5c:	aa 1b       	sub	r26, r26
    9d5e:	bb 1b       	sub	r27, r27
    9d60:	51 e1       	ldi	r21, 0x11	; 17
    9d62:	07 c0       	rjmp	.+14     	; 0x9d72 <__udivmodhi4_ep>

00009d64 <__udivmodhi4_loop>:
    9d64:	aa 1f       	adc	r26, r26
    9d66:	bb 1f       	adc	r27, r27
    9d68:	a6 17       	cp	r26, r22
    9d6a:	b7 07       	cpc	r27, r23
    9d6c:	10 f0       	brcs	.+4      	; 0x9d72 <__udivmodhi4_ep>
    9d6e:	a6 1b       	sub	r26, r22
    9d70:	b7 0b       	sbc	r27, r23

00009d72 <__udivmodhi4_ep>:
    9d72:	88 1f       	adc	r24, r24
    9d74:	99 1f       	adc	r25, r25
    9d76:	5a 95       	dec	r21
    9d78:	a9 f7       	brne	.-22     	; 0x9d64 <__udivmodhi4_loop>
    9d7a:	80 95       	com	r24
    9d7c:	90 95       	com	r25
    9d7e:	bc 01       	movw	r22, r24
    9d80:	cd 01       	movw	r24, r26
    9d82:	08 95       	ret

00009d84 <__divmodhi4>:
    9d84:	97 fb       	bst	r25, 7
    9d86:	07 2e       	mov	r0, r23
    9d88:	16 f4       	brtc	.+4      	; 0x9d8e <__divmodhi4+0xa>
    9d8a:	00 94       	com	r0
    9d8c:	07 d0       	rcall	.+14     	; 0x9d9c <__divmodhi4_neg1>
    9d8e:	77 fd       	sbrc	r23, 7
    9d90:	09 d0       	rcall	.+18     	; 0x9da4 <__divmodhi4_neg2>
    9d92:	0e 94 ae 4e 	call	0x9d5c	; 0x9d5c <__udivmodhi4>
    9d96:	07 fc       	sbrc	r0, 7
    9d98:	05 d0       	rcall	.+10     	; 0x9da4 <__divmodhi4_neg2>
    9d9a:	3e f4       	brtc	.+14     	; 0x9daa <__divmodhi4_exit>

00009d9c <__divmodhi4_neg1>:
    9d9c:	90 95       	com	r25
    9d9e:	81 95       	neg	r24
    9da0:	9f 4f       	sbci	r25, 0xFF	; 255
    9da2:	08 95       	ret

00009da4 <__divmodhi4_neg2>:
    9da4:	70 95       	com	r23
    9da6:	61 95       	neg	r22
    9da8:	7f 4f       	sbci	r23, 0xFF	; 255

00009daa <__divmodhi4_exit>:
    9daa:	08 95       	ret

00009dac <__tablejump2__>:
    9dac:	ee 0f       	add	r30, r30
    9dae:	ff 1f       	adc	r31, r31
    9db0:	05 90       	lpm	r0, Z+
    9db2:	f4 91       	lpm	r31, Z
    9db4:	e0 2d       	mov	r30, r0
    9db6:	09 94       	ijmp

00009db8 <__subsf3>:
    9db8:	50 58       	subi	r21, 0x80	; 128

00009dba <__addsf3>:
    9dba:	bb 27       	eor	r27, r27
    9dbc:	aa 27       	eor	r26, r26
    9dbe:	0e d0       	rcall	.+28     	; 0x9ddc <__addsf3x>
    9dc0:	08 c1       	rjmp	.+528    	; 0x9fd2 <__fp_round>
    9dc2:	f9 d0       	rcall	.+498    	; 0x9fb6 <__fp_pscA>
    9dc4:	30 f0       	brcs	.+12     	; 0x9dd2 <__addsf3+0x18>
    9dc6:	fe d0       	rcall	.+508    	; 0x9fc4 <__fp_pscB>
    9dc8:	20 f0       	brcs	.+8      	; 0x9dd2 <__addsf3+0x18>
    9dca:	31 f4       	brne	.+12     	; 0x9dd8 <__addsf3+0x1e>
    9dcc:	9f 3f       	cpi	r25, 0xFF	; 255
    9dce:	11 f4       	brne	.+4      	; 0x9dd4 <__addsf3+0x1a>
    9dd0:	1e f4       	brtc	.+6      	; 0x9dd8 <__addsf3+0x1e>
    9dd2:	ee c0       	rjmp	.+476    	; 0x9fb0 <__fp_nan>
    9dd4:	0e f4       	brtc	.+2      	; 0x9dd8 <__addsf3+0x1e>
    9dd6:	e0 95       	com	r30
    9dd8:	e7 fb       	bst	r30, 7
    9dda:	e4 c0       	rjmp	.+456    	; 0x9fa4 <__fp_inf>

00009ddc <__addsf3x>:
    9ddc:	e9 2f       	mov	r30, r25
    9dde:	0a d1       	rcall	.+532    	; 0x9ff4 <__fp_split3>
    9de0:	80 f3       	brcs	.-32     	; 0x9dc2 <__addsf3+0x8>
    9de2:	ba 17       	cp	r27, r26
    9de4:	62 07       	cpc	r22, r18
    9de6:	73 07       	cpc	r23, r19
    9de8:	84 07       	cpc	r24, r20
    9dea:	95 07       	cpc	r25, r21
    9dec:	18 f0       	brcs	.+6      	; 0x9df4 <__addsf3x+0x18>
    9dee:	71 f4       	brne	.+28     	; 0x9e0c <__addsf3x+0x30>
    9df0:	9e f5       	brtc	.+102    	; 0x9e58 <__addsf3x+0x7c>
    9df2:	22 c1       	rjmp	.+580    	; 0xa038 <__fp_zero>
    9df4:	0e f4       	brtc	.+2      	; 0x9df8 <__addsf3x+0x1c>
    9df6:	e0 95       	com	r30
    9df8:	0b 2e       	mov	r0, r27
    9dfa:	ba 2f       	mov	r27, r26
    9dfc:	a0 2d       	mov	r26, r0
    9dfe:	0b 01       	movw	r0, r22
    9e00:	b9 01       	movw	r22, r18
    9e02:	90 01       	movw	r18, r0
    9e04:	0c 01       	movw	r0, r24
    9e06:	ca 01       	movw	r24, r20
    9e08:	a0 01       	movw	r20, r0
    9e0a:	11 24       	eor	r1, r1
    9e0c:	ff 27       	eor	r31, r31
    9e0e:	59 1b       	sub	r21, r25
    9e10:	99 f0       	breq	.+38     	; 0x9e38 <__addsf3x+0x5c>
    9e12:	59 3f       	cpi	r21, 0xF9	; 249
    9e14:	50 f4       	brcc	.+20     	; 0x9e2a <__addsf3x+0x4e>
    9e16:	50 3e       	cpi	r21, 0xE0	; 224
    9e18:	68 f1       	brcs	.+90     	; 0x9e74 <__addsf3x+0x98>
    9e1a:	1a 16       	cp	r1, r26
    9e1c:	f0 40       	sbci	r31, 0x00	; 0
    9e1e:	a2 2f       	mov	r26, r18
    9e20:	23 2f       	mov	r18, r19
    9e22:	34 2f       	mov	r19, r20
    9e24:	44 27       	eor	r20, r20
    9e26:	58 5f       	subi	r21, 0xF8	; 248
    9e28:	f3 cf       	rjmp	.-26     	; 0x9e10 <__addsf3x+0x34>
    9e2a:	46 95       	lsr	r20
    9e2c:	37 95       	ror	r19
    9e2e:	27 95       	ror	r18
    9e30:	a7 95       	ror	r26
    9e32:	f0 40       	sbci	r31, 0x00	; 0
    9e34:	53 95       	inc	r21
    9e36:	c9 f7       	brne	.-14     	; 0x9e2a <__addsf3x+0x4e>
    9e38:	7e f4       	brtc	.+30     	; 0x9e58 <__addsf3x+0x7c>
    9e3a:	1f 16       	cp	r1, r31
    9e3c:	ba 0b       	sbc	r27, r26
    9e3e:	62 0b       	sbc	r22, r18
    9e40:	73 0b       	sbc	r23, r19
    9e42:	84 0b       	sbc	r24, r20
    9e44:	ba f0       	brmi	.+46     	; 0x9e74 <__addsf3x+0x98>
    9e46:	91 50       	subi	r25, 0x01	; 1
    9e48:	a1 f0       	breq	.+40     	; 0x9e72 <__addsf3x+0x96>
    9e4a:	ff 0f       	add	r31, r31
    9e4c:	bb 1f       	adc	r27, r27
    9e4e:	66 1f       	adc	r22, r22
    9e50:	77 1f       	adc	r23, r23
    9e52:	88 1f       	adc	r24, r24
    9e54:	c2 f7       	brpl	.-16     	; 0x9e46 <__addsf3x+0x6a>
    9e56:	0e c0       	rjmp	.+28     	; 0x9e74 <__addsf3x+0x98>
    9e58:	ba 0f       	add	r27, r26
    9e5a:	62 1f       	adc	r22, r18
    9e5c:	73 1f       	adc	r23, r19
    9e5e:	84 1f       	adc	r24, r20
    9e60:	48 f4       	brcc	.+18     	; 0x9e74 <__addsf3x+0x98>
    9e62:	87 95       	ror	r24
    9e64:	77 95       	ror	r23
    9e66:	67 95       	ror	r22
    9e68:	b7 95       	ror	r27
    9e6a:	f7 95       	ror	r31
    9e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    9e6e:	08 f0       	brcs	.+2      	; 0x9e72 <__addsf3x+0x96>
    9e70:	b3 cf       	rjmp	.-154    	; 0x9dd8 <__addsf3+0x1e>
    9e72:	93 95       	inc	r25
    9e74:	88 0f       	add	r24, r24
    9e76:	08 f0       	brcs	.+2      	; 0x9e7a <__addsf3x+0x9e>
    9e78:	99 27       	eor	r25, r25
    9e7a:	ee 0f       	add	r30, r30
    9e7c:	97 95       	ror	r25
    9e7e:	87 95       	ror	r24
    9e80:	08 95       	ret

00009e82 <__cmpsf2>:
    9e82:	6c d0       	rcall	.+216    	; 0x9f5c <__fp_cmp>
    9e84:	08 f4       	brcc	.+2      	; 0x9e88 <__cmpsf2+0x6>
    9e86:	81 e0       	ldi	r24, 0x01	; 1
    9e88:	08 95       	ret

00009e8a <__fixunssfsi>:
    9e8a:	bc d0       	rcall	.+376    	; 0xa004 <__fp_splitA>
    9e8c:	88 f0       	brcs	.+34     	; 0x9eb0 <__fixunssfsi+0x26>
    9e8e:	9f 57       	subi	r25, 0x7F	; 127
    9e90:	90 f0       	brcs	.+36     	; 0x9eb6 <__fixunssfsi+0x2c>
    9e92:	b9 2f       	mov	r27, r25
    9e94:	99 27       	eor	r25, r25
    9e96:	b7 51       	subi	r27, 0x17	; 23
    9e98:	a0 f0       	brcs	.+40     	; 0x9ec2 <__fixunssfsi+0x38>
    9e9a:	d1 f0       	breq	.+52     	; 0x9ed0 <__fixunssfsi+0x46>
    9e9c:	66 0f       	add	r22, r22
    9e9e:	77 1f       	adc	r23, r23
    9ea0:	88 1f       	adc	r24, r24
    9ea2:	99 1f       	adc	r25, r25
    9ea4:	1a f0       	brmi	.+6      	; 0x9eac <__fixunssfsi+0x22>
    9ea6:	ba 95       	dec	r27
    9ea8:	c9 f7       	brne	.-14     	; 0x9e9c <__fixunssfsi+0x12>
    9eaa:	12 c0       	rjmp	.+36     	; 0x9ed0 <__fixunssfsi+0x46>
    9eac:	b1 30       	cpi	r27, 0x01	; 1
    9eae:	81 f0       	breq	.+32     	; 0x9ed0 <__fixunssfsi+0x46>
    9eb0:	c3 d0       	rcall	.+390    	; 0xa038 <__fp_zero>
    9eb2:	b1 e0       	ldi	r27, 0x01	; 1
    9eb4:	08 95       	ret
    9eb6:	c0 c0       	rjmp	.+384    	; 0xa038 <__fp_zero>
    9eb8:	67 2f       	mov	r22, r23
    9eba:	78 2f       	mov	r23, r24
    9ebc:	88 27       	eor	r24, r24
    9ebe:	b8 5f       	subi	r27, 0xF8	; 248
    9ec0:	39 f0       	breq	.+14     	; 0x9ed0 <__fixunssfsi+0x46>
    9ec2:	b9 3f       	cpi	r27, 0xF9	; 249
    9ec4:	cc f3       	brlt	.-14     	; 0x9eb8 <__fixunssfsi+0x2e>
    9ec6:	86 95       	lsr	r24
    9ec8:	77 95       	ror	r23
    9eca:	67 95       	ror	r22
    9ecc:	b3 95       	inc	r27
    9ece:	d9 f7       	brne	.-10     	; 0x9ec6 <__fixunssfsi+0x3c>
    9ed0:	3e f4       	brtc	.+14     	; 0x9ee0 <__fixunssfsi+0x56>
    9ed2:	90 95       	com	r25
    9ed4:	80 95       	com	r24
    9ed6:	70 95       	com	r23
    9ed8:	61 95       	neg	r22
    9eda:	7f 4f       	sbci	r23, 0xFF	; 255
    9edc:	8f 4f       	sbci	r24, 0xFF	; 255
    9ede:	9f 4f       	sbci	r25, 0xFF	; 255
    9ee0:	08 95       	ret

00009ee2 <__floatunsisf>:
    9ee2:	e8 94       	clt
    9ee4:	09 c0       	rjmp	.+18     	; 0x9ef8 <__floatsisf+0x12>

00009ee6 <__floatsisf>:
    9ee6:	97 fb       	bst	r25, 7
    9ee8:	3e f4       	brtc	.+14     	; 0x9ef8 <__floatsisf+0x12>
    9eea:	90 95       	com	r25
    9eec:	80 95       	com	r24
    9eee:	70 95       	com	r23
    9ef0:	61 95       	neg	r22
    9ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    9ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    9ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    9ef8:	99 23       	and	r25, r25
    9efa:	a9 f0       	breq	.+42     	; 0x9f26 <__floatsisf+0x40>
    9efc:	f9 2f       	mov	r31, r25
    9efe:	96 e9       	ldi	r25, 0x96	; 150
    9f00:	bb 27       	eor	r27, r27
    9f02:	93 95       	inc	r25
    9f04:	f6 95       	lsr	r31
    9f06:	87 95       	ror	r24
    9f08:	77 95       	ror	r23
    9f0a:	67 95       	ror	r22
    9f0c:	b7 95       	ror	r27
    9f0e:	f1 11       	cpse	r31, r1
    9f10:	f8 cf       	rjmp	.-16     	; 0x9f02 <__floatsisf+0x1c>
    9f12:	fa f4       	brpl	.+62     	; 0x9f52 <__floatsisf+0x6c>
    9f14:	bb 0f       	add	r27, r27
    9f16:	11 f4       	brne	.+4      	; 0x9f1c <__floatsisf+0x36>
    9f18:	60 ff       	sbrs	r22, 0
    9f1a:	1b c0       	rjmp	.+54     	; 0x9f52 <__floatsisf+0x6c>
    9f1c:	6f 5f       	subi	r22, 0xFF	; 255
    9f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f20:	8f 4f       	sbci	r24, 0xFF	; 255
    9f22:	9f 4f       	sbci	r25, 0xFF	; 255
    9f24:	16 c0       	rjmp	.+44     	; 0x9f52 <__floatsisf+0x6c>
    9f26:	88 23       	and	r24, r24
    9f28:	11 f0       	breq	.+4      	; 0x9f2e <__floatsisf+0x48>
    9f2a:	96 e9       	ldi	r25, 0x96	; 150
    9f2c:	11 c0       	rjmp	.+34     	; 0x9f50 <__floatsisf+0x6a>
    9f2e:	77 23       	and	r23, r23
    9f30:	21 f0       	breq	.+8      	; 0x9f3a <__floatsisf+0x54>
    9f32:	9e e8       	ldi	r25, 0x8E	; 142
    9f34:	87 2f       	mov	r24, r23
    9f36:	76 2f       	mov	r23, r22
    9f38:	05 c0       	rjmp	.+10     	; 0x9f44 <__floatsisf+0x5e>
    9f3a:	66 23       	and	r22, r22
    9f3c:	71 f0       	breq	.+28     	; 0x9f5a <__floatsisf+0x74>
    9f3e:	96 e8       	ldi	r25, 0x86	; 134
    9f40:	86 2f       	mov	r24, r22
    9f42:	70 e0       	ldi	r23, 0x00	; 0
    9f44:	60 e0       	ldi	r22, 0x00	; 0
    9f46:	2a f0       	brmi	.+10     	; 0x9f52 <__floatsisf+0x6c>
    9f48:	9a 95       	dec	r25
    9f4a:	66 0f       	add	r22, r22
    9f4c:	77 1f       	adc	r23, r23
    9f4e:	88 1f       	adc	r24, r24
    9f50:	da f7       	brpl	.-10     	; 0x9f48 <__floatsisf+0x62>
    9f52:	88 0f       	add	r24, r24
    9f54:	96 95       	lsr	r25
    9f56:	87 95       	ror	r24
    9f58:	97 f9       	bld	r25, 7
    9f5a:	08 95       	ret

00009f5c <__fp_cmp>:
    9f5c:	99 0f       	add	r25, r25
    9f5e:	00 08       	sbc	r0, r0
    9f60:	55 0f       	add	r21, r21
    9f62:	aa 0b       	sbc	r26, r26
    9f64:	e0 e8       	ldi	r30, 0x80	; 128
    9f66:	fe ef       	ldi	r31, 0xFE	; 254
    9f68:	16 16       	cp	r1, r22
    9f6a:	17 06       	cpc	r1, r23
    9f6c:	e8 07       	cpc	r30, r24
    9f6e:	f9 07       	cpc	r31, r25
    9f70:	c0 f0       	brcs	.+48     	; 0x9fa2 <__fp_cmp+0x46>
    9f72:	12 16       	cp	r1, r18
    9f74:	13 06       	cpc	r1, r19
    9f76:	e4 07       	cpc	r30, r20
    9f78:	f5 07       	cpc	r31, r21
    9f7a:	98 f0       	brcs	.+38     	; 0x9fa2 <__fp_cmp+0x46>
    9f7c:	62 1b       	sub	r22, r18
    9f7e:	73 0b       	sbc	r23, r19
    9f80:	84 0b       	sbc	r24, r20
    9f82:	95 0b       	sbc	r25, r21
    9f84:	39 f4       	brne	.+14     	; 0x9f94 <__fp_cmp+0x38>
    9f86:	0a 26       	eor	r0, r26
    9f88:	61 f0       	breq	.+24     	; 0x9fa2 <__fp_cmp+0x46>
    9f8a:	23 2b       	or	r18, r19
    9f8c:	24 2b       	or	r18, r20
    9f8e:	25 2b       	or	r18, r21
    9f90:	21 f4       	brne	.+8      	; 0x9f9a <__fp_cmp+0x3e>
    9f92:	08 95       	ret
    9f94:	0a 26       	eor	r0, r26
    9f96:	09 f4       	brne	.+2      	; 0x9f9a <__fp_cmp+0x3e>
    9f98:	a1 40       	sbci	r26, 0x01	; 1
    9f9a:	a6 95       	lsr	r26
    9f9c:	8f ef       	ldi	r24, 0xFF	; 255
    9f9e:	81 1d       	adc	r24, r1
    9fa0:	81 1d       	adc	r24, r1
    9fa2:	08 95       	ret

00009fa4 <__fp_inf>:
    9fa4:	97 f9       	bld	r25, 7
    9fa6:	9f 67       	ori	r25, 0x7F	; 127
    9fa8:	80 e8       	ldi	r24, 0x80	; 128
    9faa:	70 e0       	ldi	r23, 0x00	; 0
    9fac:	60 e0       	ldi	r22, 0x00	; 0
    9fae:	08 95       	ret

00009fb0 <__fp_nan>:
    9fb0:	9f ef       	ldi	r25, 0xFF	; 255
    9fb2:	80 ec       	ldi	r24, 0xC0	; 192
    9fb4:	08 95       	ret

00009fb6 <__fp_pscA>:
    9fb6:	00 24       	eor	r0, r0
    9fb8:	0a 94       	dec	r0
    9fba:	16 16       	cp	r1, r22
    9fbc:	17 06       	cpc	r1, r23
    9fbe:	18 06       	cpc	r1, r24
    9fc0:	09 06       	cpc	r0, r25
    9fc2:	08 95       	ret

00009fc4 <__fp_pscB>:
    9fc4:	00 24       	eor	r0, r0
    9fc6:	0a 94       	dec	r0
    9fc8:	12 16       	cp	r1, r18
    9fca:	13 06       	cpc	r1, r19
    9fcc:	14 06       	cpc	r1, r20
    9fce:	05 06       	cpc	r0, r21
    9fd0:	08 95       	ret

00009fd2 <__fp_round>:
    9fd2:	09 2e       	mov	r0, r25
    9fd4:	03 94       	inc	r0
    9fd6:	00 0c       	add	r0, r0
    9fd8:	11 f4       	brne	.+4      	; 0x9fde <__fp_round+0xc>
    9fda:	88 23       	and	r24, r24
    9fdc:	52 f0       	brmi	.+20     	; 0x9ff2 <__fp_round+0x20>
    9fde:	bb 0f       	add	r27, r27
    9fe0:	40 f4       	brcc	.+16     	; 0x9ff2 <__fp_round+0x20>
    9fe2:	bf 2b       	or	r27, r31
    9fe4:	11 f4       	brne	.+4      	; 0x9fea <__fp_round+0x18>
    9fe6:	60 ff       	sbrs	r22, 0
    9fe8:	04 c0       	rjmp	.+8      	; 0x9ff2 <__fp_round+0x20>
    9fea:	6f 5f       	subi	r22, 0xFF	; 255
    9fec:	7f 4f       	sbci	r23, 0xFF	; 255
    9fee:	8f 4f       	sbci	r24, 0xFF	; 255
    9ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ff2:	08 95       	ret

00009ff4 <__fp_split3>:
    9ff4:	57 fd       	sbrc	r21, 7
    9ff6:	90 58       	subi	r25, 0x80	; 128
    9ff8:	44 0f       	add	r20, r20
    9ffa:	55 1f       	adc	r21, r21
    9ffc:	59 f0       	breq	.+22     	; 0xa014 <__fp_splitA+0x10>
    9ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    a000:	71 f0       	breq	.+28     	; 0xa01e <__fp_splitA+0x1a>
    a002:	47 95       	ror	r20

0000a004 <__fp_splitA>:
    a004:	88 0f       	add	r24, r24
    a006:	97 fb       	bst	r25, 7
    a008:	99 1f       	adc	r25, r25
    a00a:	61 f0       	breq	.+24     	; 0xa024 <__fp_splitA+0x20>
    a00c:	9f 3f       	cpi	r25, 0xFF	; 255
    a00e:	79 f0       	breq	.+30     	; 0xa02e <__fp_splitA+0x2a>
    a010:	87 95       	ror	r24
    a012:	08 95       	ret
    a014:	12 16       	cp	r1, r18
    a016:	13 06       	cpc	r1, r19
    a018:	14 06       	cpc	r1, r20
    a01a:	55 1f       	adc	r21, r21
    a01c:	f2 cf       	rjmp	.-28     	; 0xa002 <__fp_split3+0xe>
    a01e:	46 95       	lsr	r20
    a020:	f1 df       	rcall	.-30     	; 0xa004 <__fp_splitA>
    a022:	08 c0       	rjmp	.+16     	; 0xa034 <__fp_splitA+0x30>
    a024:	16 16       	cp	r1, r22
    a026:	17 06       	cpc	r1, r23
    a028:	18 06       	cpc	r1, r24
    a02a:	99 1f       	adc	r25, r25
    a02c:	f1 cf       	rjmp	.-30     	; 0xa010 <__fp_splitA+0xc>
    a02e:	86 95       	lsr	r24
    a030:	71 05       	cpc	r23, r1
    a032:	61 05       	cpc	r22, r1
    a034:	08 94       	sec
    a036:	08 95       	ret

0000a038 <__fp_zero>:
    a038:	e8 94       	clt

0000a03a <__fp_szero>:
    a03a:	bb 27       	eor	r27, r27
    a03c:	66 27       	eor	r22, r22
    a03e:	77 27       	eor	r23, r23
    a040:	cb 01       	movw	r24, r22
    a042:	97 f9       	bld	r25, 7
    a044:	08 95       	ret

0000a046 <__gesf2>:
    a046:	8a df       	rcall	.-236    	; 0x9f5c <__fp_cmp>
    a048:	08 f4       	brcc	.+2      	; 0xa04c <__gesf2+0x6>
    a04a:	8f ef       	ldi	r24, 0xFF	; 255
    a04c:	08 95       	ret

0000a04e <__mulsf3>:
    a04e:	0b d0       	rcall	.+22     	; 0xa066 <__mulsf3x>
    a050:	c0 cf       	rjmp	.-128    	; 0x9fd2 <__fp_round>
    a052:	b1 df       	rcall	.-158    	; 0x9fb6 <__fp_pscA>
    a054:	28 f0       	brcs	.+10     	; 0xa060 <__mulsf3+0x12>
    a056:	b6 df       	rcall	.-148    	; 0x9fc4 <__fp_pscB>
    a058:	18 f0       	brcs	.+6      	; 0xa060 <__mulsf3+0x12>
    a05a:	95 23       	and	r25, r21
    a05c:	09 f0       	breq	.+2      	; 0xa060 <__mulsf3+0x12>
    a05e:	a2 cf       	rjmp	.-188    	; 0x9fa4 <__fp_inf>
    a060:	a7 cf       	rjmp	.-178    	; 0x9fb0 <__fp_nan>
    a062:	11 24       	eor	r1, r1
    a064:	ea cf       	rjmp	.-44     	; 0xa03a <__fp_szero>

0000a066 <__mulsf3x>:
    a066:	c6 df       	rcall	.-116    	; 0x9ff4 <__fp_split3>
    a068:	a0 f3       	brcs	.-24     	; 0xa052 <__mulsf3+0x4>

0000a06a <__mulsf3_pse>:
    a06a:	95 9f       	mul	r25, r21
    a06c:	d1 f3       	breq	.-12     	; 0xa062 <__mulsf3+0x14>
    a06e:	95 0f       	add	r25, r21
    a070:	50 e0       	ldi	r21, 0x00	; 0
    a072:	55 1f       	adc	r21, r21
    a074:	62 9f       	mul	r22, r18
    a076:	f0 01       	movw	r30, r0
    a078:	72 9f       	mul	r23, r18
    a07a:	bb 27       	eor	r27, r27
    a07c:	f0 0d       	add	r31, r0
    a07e:	b1 1d       	adc	r27, r1
    a080:	63 9f       	mul	r22, r19
    a082:	aa 27       	eor	r26, r26
    a084:	f0 0d       	add	r31, r0
    a086:	b1 1d       	adc	r27, r1
    a088:	aa 1f       	adc	r26, r26
    a08a:	64 9f       	mul	r22, r20
    a08c:	66 27       	eor	r22, r22
    a08e:	b0 0d       	add	r27, r0
    a090:	a1 1d       	adc	r26, r1
    a092:	66 1f       	adc	r22, r22
    a094:	82 9f       	mul	r24, r18
    a096:	22 27       	eor	r18, r18
    a098:	b0 0d       	add	r27, r0
    a09a:	a1 1d       	adc	r26, r1
    a09c:	62 1f       	adc	r22, r18
    a09e:	73 9f       	mul	r23, r19
    a0a0:	b0 0d       	add	r27, r0
    a0a2:	a1 1d       	adc	r26, r1
    a0a4:	62 1f       	adc	r22, r18
    a0a6:	83 9f       	mul	r24, r19
    a0a8:	a0 0d       	add	r26, r0
    a0aa:	61 1d       	adc	r22, r1
    a0ac:	22 1f       	adc	r18, r18
    a0ae:	74 9f       	mul	r23, r20
    a0b0:	33 27       	eor	r19, r19
    a0b2:	a0 0d       	add	r26, r0
    a0b4:	61 1d       	adc	r22, r1
    a0b6:	23 1f       	adc	r18, r19
    a0b8:	84 9f       	mul	r24, r20
    a0ba:	60 0d       	add	r22, r0
    a0bc:	21 1d       	adc	r18, r1
    a0be:	82 2f       	mov	r24, r18
    a0c0:	76 2f       	mov	r23, r22
    a0c2:	6a 2f       	mov	r22, r26
    a0c4:	11 24       	eor	r1, r1
    a0c6:	9f 57       	subi	r25, 0x7F	; 127
    a0c8:	50 40       	sbci	r21, 0x00	; 0
    a0ca:	8a f0       	brmi	.+34     	; 0xa0ee <__mulsf3_pse+0x84>
    a0cc:	e1 f0       	breq	.+56     	; 0xa106 <__mulsf3_pse+0x9c>
    a0ce:	88 23       	and	r24, r24
    a0d0:	4a f0       	brmi	.+18     	; 0xa0e4 <__mulsf3_pse+0x7a>
    a0d2:	ee 0f       	add	r30, r30
    a0d4:	ff 1f       	adc	r31, r31
    a0d6:	bb 1f       	adc	r27, r27
    a0d8:	66 1f       	adc	r22, r22
    a0da:	77 1f       	adc	r23, r23
    a0dc:	88 1f       	adc	r24, r24
    a0de:	91 50       	subi	r25, 0x01	; 1
    a0e0:	50 40       	sbci	r21, 0x00	; 0
    a0e2:	a9 f7       	brne	.-22     	; 0xa0ce <__mulsf3_pse+0x64>
    a0e4:	9e 3f       	cpi	r25, 0xFE	; 254
    a0e6:	51 05       	cpc	r21, r1
    a0e8:	70 f0       	brcs	.+28     	; 0xa106 <__mulsf3_pse+0x9c>
    a0ea:	5c cf       	rjmp	.-328    	; 0x9fa4 <__fp_inf>
    a0ec:	a6 cf       	rjmp	.-180    	; 0xa03a <__fp_szero>
    a0ee:	5f 3f       	cpi	r21, 0xFF	; 255
    a0f0:	ec f3       	brlt	.-6      	; 0xa0ec <__mulsf3_pse+0x82>
    a0f2:	98 3e       	cpi	r25, 0xE8	; 232
    a0f4:	dc f3       	brlt	.-10     	; 0xa0ec <__mulsf3_pse+0x82>
    a0f6:	86 95       	lsr	r24
    a0f8:	77 95       	ror	r23
    a0fa:	67 95       	ror	r22
    a0fc:	b7 95       	ror	r27
    a0fe:	f7 95       	ror	r31
    a100:	e7 95       	ror	r30
    a102:	9f 5f       	subi	r25, 0xFF	; 255
    a104:	c1 f7       	brne	.-16     	; 0xa0f6 <__mulsf3_pse+0x8c>
    a106:	fe 2b       	or	r31, r30
    a108:	88 0f       	add	r24, r24
    a10a:	91 1d       	adc	r25, r1
    a10c:	96 95       	lsr	r25
    a10e:	87 95       	ror	r24
    a110:	97 f9       	bld	r25, 7
    a112:	08 95       	ret

0000a114 <_exit>:
    a114:	f8 94       	cli

0000a116 <__stop_program>:
    a116:	ff cf       	rjmp	.-2      	; 0xa116 <__stop_program>
