
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e54e  0000e64e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e660  2**5
                  CONTENTS, READONLY
  2 .text         0000e54e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b41  00800510  00800510  0000e65e  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000ea60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000f459  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000738  00000000  00000000  0000f470  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a7bb  00000000  00000000  0000fba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000167f  00000000  00000000  0001a363  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000026fd  00000000  00000000  0001b9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001724  00000000  00000000  0001e0e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001f6a  00000000  00000000  0001f804  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008fe1  00000000  00000000  0002176e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008d0  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2f 3b 	jmp	0x765e	; 0x765e <__ctors_end>
       4:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
       8:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
       c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      10:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      14:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      18:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      1c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      20:	0c 94 10 41 	jmp	0x8220	; 0x8220 <__vector_8>
      24:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      28:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      2c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      30:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      34:	0c 94 dc 3e 	jmp	0x7db8	; 0x7db8 <__vector_13>
      38:	0c 94 1c 3f 	jmp	0x7e38	; 0x7e38 <__vector_14>
      3c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      40:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      44:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      48:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      4c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      50:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      54:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      58:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      5c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      60:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      64:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      68:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      6c:	0c 94 98 3b 	jmp	0x7730	; 0x7730 <__bad_interrupt>
      70:	b4 65       	ori	r27, 0x54	; 84
      72:	c3 65       	ori	r28, 0x53	; 83
      74:	b7 65       	ori	r27, 0x57	; 87
      76:	c3 65       	ori	r28, 0x53	; 83
      78:	ba 65       	ori	r27, 0x5A	; 90
      7a:	c3 65       	ori	r28, 0x53	; 83
      7c:	bd 65       	ori	r27, 0x5D	; 93
      7e:	c3 65       	ori	r28, 0x53	; 83
      80:	c0 65       	ori	r28, 0x50	; 80
      82:	c3 65       	ori	r28, 0x53	; 83

00000084 <__trampolines_end>:
      84:	81 00       	.word	0x0081	; ????
      86:	45 00       	.word	0x0045	; ????
      88:	27 ff       	sbrs	r18, 7
      8a:	24 ff       	sbrs	r18, 4
      8c:	2a 90       	ld	r2, -Y
      8e:	2b 1c       	adc	r2, r11
      90:	21 0c       	add	r2, r1
      92:	22 fb       	bst	r18, 2
      94:	85 00       	.word	0x0085	; ????
      96:	84 00       	.word	0x0084	; ????
      98:	89 03       	fmulsu	r16, r17
      9a:	88 8d       	ldd	r24, Y+24	; 0x18
      9c:	81 09       	sbc	r24, r1
      9e:	6f 02       	muls	r22, r31
      a0:	44 42       	sbci	r20, 0x24	; 36
      a2:	47 00       	.word	0x0047	; ????
      a4:	45 01       	movw	r8, r10
      a6:	b0 83       	st	Z, r27
      a8:	b3 00       	.word	0x00b3	; ????
      aa:	b1 01       	movw	r22, r2
      ac:	25 11       	cpse	r18, r5
      ae:	8a 4f       	sbci	r24, 0xFA	; 250
      b0:	8b 03       	fmulsu	r16, r19

000000b2 <eeprom_format_table>:
      b2:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d2 <patchCommands>:
      d2:	b9 42 bc 42 18 43 1c 43 23 43 c4 42 c9 42 ce 42     .B.B.C.C#C.B.B.B
      e2:	2b 43 d1 42 d4 42 d7 42 12 43 15 43 3b 43           +C.B.B.B.C.C;C

000000f0 <fader>:
      f0:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000fc <map_uzeboxlogo2>:
      fc:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000010d <map_uzeboxlogo>:
     10d:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     11d:	00 0e 0f 10 11 12                                   ......

00000123 <logo_tileset>:
	...
     17f:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     18f:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     19f:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1af:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1bf:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1cf:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1df:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1ef:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1ff:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     20f:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     21f:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     22f:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     23f:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     24f:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     267:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     277:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     287:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     297:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a7:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b7:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c7:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d7:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e7:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f7:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     307:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     317:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     327:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     337:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     347:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     357:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     367:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     377:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3a3:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3b3:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3c3:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3d3:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3e3:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3f3:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     403:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     413:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     423:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     433:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     443:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     453:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     463:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     473:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ab:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4bb:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4cb:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4db:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4eb:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4fb:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     50b:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     51b:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     52b:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     53b:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     54b:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     55b:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     56b:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     57b:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     58b:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     59b:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5ab:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5bb:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5cb:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5db:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5ff:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     60f:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     61f:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     62f:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     63f:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     64f:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     65f:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     66f:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     67f:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     68f:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     69f:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6af:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6bf:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6cf:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e7:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f7:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     707:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     717:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     727:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     737:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     747:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     757:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     767:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     777:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     787:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     797:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a7:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b7:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c7:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d7:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e7:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f7:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     823:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     833:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     843:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     853:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     863:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     873:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     883:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     893:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8a3:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8b3:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8c3:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8d3:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8e3:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8f3:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000923 <logoInitPatches>:
     923:	00 00 00 2c 09 00 00 00 00                          ...,.....

0000092c <initPatch>:
     92c:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     93c:	0a 1e 32 05 00 00 ff                                ..2....

00000943 <strChallenge>:
     943:	49 20 4b 4e 45 57 20 54 48 45 59 00 57 4f 55 4c     I KNEW THEY.WOUL
     953:	44 20 53 45 4e 44 20 59 4f 55 00 23 20 20 20 20     D SEND YOU.#    
     963:	20 20 20 59 4f 55 20 41 52 45 00 50 45 52 53 49        YOU ARE.PERSI
     973:	53 54 45 4e 54 00 23 20 20 20 20 20 20 20 20 20     STENT.#         
     983:	20 20 20 20 20 20 59 4f 55 20 43 41 4e 54 00 48           YOU CANT.H
     993:	41 56 45 20 54 48 45 4d 20 41 4c 4c 00 23 20 20     AVE THEM ALL.#  
     9a3:	20 20 20 20 20 20 20 20 20 59 4f 55 20 41 52 45              YOU ARE
     9b3:	20 4d 41 4b 49 4e 47 00 41 20 4d 49 53 54 41 4b      MAKING.A MISTAK
     9c3:	45 00 23 20 20 20 20 20 20 20 20 20 54 48 49 53     E.#         THIS
     9d3:	20 44 4f 45 53 20 4e 4f 54 00 45 4e 44 20 48 45      DOES NOT.END HE
     9e3:	52 45 00 23 20 20 20 20 20 20 20 20 20 20 20 00     RE.#           .

000009f3 <strIntro>:
     9f3:	49 52 49 53 20 48 41 53 20 42 45 54 52 41 59 45     IRIS HAS BETRAYE
     a03:	44 20 55 53 00 00 48 45 20 48 41 53 20 53 54 4f     D US..HE HAS STO
     a13:	4c 45 4e 20 54 48 45 20 35 20 45 4d 45 52 41 4c     LEN THE 5 EMERAL
     a23:	44 53 00 4f 46 20 50 4f 57 45 52 20 41 4e 44 20     DS.OF POWER AND 
     a33:	57 49 4c 4c 20 53 55 52 45 4c 59 00 42 52 49 4e     WILL SURELY.BRIN
     a43:	47 20 52 55 49 4e 20 54 4f 20 55 53 20 41 4c 4c     G RUIN TO US ALL
     a53:	00 00 44 45 53 54 52 4f 59 20 48 49 4d 20 41 4e     ..DESTROY HIM AN
     a63:	44 20 52 45 54 55 52 4e 20 54 48 45 00 45 4d 45     D RETURN THE.EME
     a73:	52 41 4c 44 53 20 54 4f 20 42 52 49 4e 47 20 50     RALDS TO BRING P
     a83:	45 41 43 45 20 54 4f 00 54 48 45 20 47 41 4c 41     EACE TO.THE GALA
     a93:	58 59 00 23 00                                      XY.#.

00000a98 <default_scores>:
     a98:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     aa8:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000ab6 <strTally>:
     ab6:	54 41 4c 4c 59 20 00                                TALLY .

00000abd <strGameOver>:
     abd:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000ac7 <strLevelBonus>:
     ac7:	42 4f 4e 55 53 00                                   BONUS.

00000acd <strLevelClear>:
     acd:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000ad9 <strPaused>:
     ad9:	50 41 55 53 45 00                                   PAUSE.

00000adf <strExitGame>:
     adf:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000aeb <strMainMenu>:
     aeb:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000af7 <strTime>:
     af7:	54 49 4d 45 20 00                                   TIME .

00000afd <strLives>:
     afd:	4c 49 56 45 53 20 00                                LIVES .

00000b04 <strShield>:
     b04:	53 48 49 45 4c 44 20 00                             SHIELD .

00000b0c <strScore>:
     b0c:	53 43 4f 52 45 20 00                                SCORE .

00000b13 <strSelectHandle>:
	...

00000b14 <strHighScores>:
     b14:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000b20 <str1Player>:
     b20:	53 54 41 52 54 00                                   START.

00000b26 <strCopyright>:
     b26:	32 30 31 36 20 4c 41 57 52 45 4e 43 45 20 42 52     2016 LAWRENCE BR
     b36:	4f 4f 4b 53 00                                      OOKS.

00000b3b <spacesong>:
     b3b:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     b4b:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     b5b:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     b6b:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     b7b:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     b8b:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     b9b:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     bab:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     bbb:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     bcb:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     bdb:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     beb:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     bfb:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     c0b:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     c1b:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     c2b:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     c3b:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     c4b:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     c5b:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     c6b:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     c7b:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     c8b:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     c9b:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     cab:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     cbb:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     ccb:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     cdb:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     ceb:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     cfb:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     d0b:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     d1b:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     d2b:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     d3b:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     d4b:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     d5b:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     d6b:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     d7b:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     d8b:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     d9b:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     dab:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     dbb:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     dcb:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     ddb:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     deb:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     dfb:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     e0b:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     e1b:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     e2b:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     e3b:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     e4b:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     e5b:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     e6b:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     e7b:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     e8b:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     e9b:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     eab:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     ebb:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     ecb:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     edb:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     eeb:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     efb:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     f0b:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     f1b:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     f2b:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     f3b:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     f4b:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     f5b:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     f6b:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     f7b:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     f8b:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     f9b:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     fab:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     fbb:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     fcb:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     fdb:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     feb:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     ffb:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    100b:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    101b:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    102b:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    103b:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    104b:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    105b:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    106b:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    107b:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    108b:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    109b:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    10ab:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    10bb:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    10cb:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    10db:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    10eb:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    10fb:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    110b:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    111b:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    112b:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    113b:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    114b:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    115b:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    116b:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    117b:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    118b:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    119b:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    11ab:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    11bb:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    11cb:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

000011db <planetsong>:
    11db:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    11eb:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    11fb:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    120b:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    121b:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    122b:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    123b:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    124b:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    125b:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    126b:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    127b:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    128b:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    129b:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    12ab:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    12bb:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    12cb:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    12db:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    12eb:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    12fb:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    130b:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    131b:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    132b:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    133b:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    134b:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    135b:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    136b:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    137b:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    138b:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    139b:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    13ab:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    13bb:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    13cb:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    13db:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    13eb:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    13fb:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    140b:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    141b:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    142b:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    143b:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    144b:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    145b:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    146b:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    147b:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    148b:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    149b:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    14ab:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    14bb:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    14cb:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    14db:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    14eb:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    14fb:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    150b:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    151b:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    152b:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    153b:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    154b:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    155b:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    156b:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    157b:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    158b:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    159b:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    15ab:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    15bb:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    15cb:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    15db:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    15eb:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    15fb:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    160b:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    161b:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    162b:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    163b:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    164b:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    165b:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    166b:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    167b:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    168b:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    169b:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    16ab:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    16bb:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    16cb:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    16db:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    16eb:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    16fb:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    170b:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    171b:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    172b:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    173b:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    174b:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    175b:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    176b:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    177b:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    178b:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    179b:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    17ab:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    17bb:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    17cb:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    17db:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    17eb:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    17fb:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    180b:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    181b:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    182b:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    183b:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    184b:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    185b:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    186b:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    187b:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    188b:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    189b:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    18ab:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    18bb:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    18cb:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    18db:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    18eb:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    18fb:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    190b:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    191b:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    192b:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    193b:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    194b:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    195b:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    196b:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    197b:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    198b:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    199b:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    19ab:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    19bb:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    19cb:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    19db:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    19eb:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    19fb:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1a0b:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1a1b:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1a2b:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1a3b:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1a4b:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1a5b:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1a6b:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1a7b:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1a8b:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1a9b:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1aab:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1abb:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1acb:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1adb:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1aeb:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1afb:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1b0b:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1b1b:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1b2b:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1b3b:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1b4b:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1b5b:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1b6b:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1b7b:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1b8b:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1b9b:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1bab:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1bbb:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1bcb:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1bdb:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1beb:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1bfb:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1c0b:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1c1b:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1c2b:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1c3b:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1c4b:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1c5b:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1c6b:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1c7b:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1c8b:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1c9b:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1cab:	2f 00                                               /.

00001cad <my_patches>:
    1cad:	00 00 00 24 1e 00 00 00 00 00 00 00 24 1e 00 00     ...$........$...
    1cbd:	00 00 00 00 00 13 1e 00 00 00 00 00 00 00 bd 1d     ................
    1ccd:	00 00 00 00 00 00 00 13 1e 00 00 00 00 00 00 00     ................
    1cdd:	ec 1c 00 00 00 00 00 00 00 ec 1c 00 00 00 00        ...............

00001cec <explode>:
    1cec:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1cfc:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d0c:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1d1c:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d2c:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1d3c:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1d4c:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1d5c:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1d6c:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1d7c:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1d8c:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1d9c:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1dac:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1dbc:	ff                                                  .

00001dbd <pshoot>:
    1dbd:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1dcd:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1ddd:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1ded:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1dfd:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1e0d:	00 01 05 00 00 ff                                   ......

00001e13 <navigate>:
    1e13:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1e23:	ff                                                  .

00001e24 <instrument>:
    1e24:	00 02 04 00 00 dd 00 ff                             ........

00001e2c <sprites_data>:
    1e2c:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1e3c:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1e4c:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1e5c:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1e6c:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1e7c:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1e8c:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1e9c:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1eac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1ebc:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1ecc:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1edc:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1eec:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1efc:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1f0c:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1f1c:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1f2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f3c:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1f4c:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1f5c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1f6c:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1f7c:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1f8c:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1f9c:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    1fac:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    1fbc:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    1fcc:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    1fdc:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fec:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    1ffc:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    200c:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    201c:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    202c:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    203c:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    204c:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    205c:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    206c:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    207c:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    208c:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    209c:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20ac:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    20bc:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    20cc:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    20dc:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    20ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20fc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    210c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    211c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    212c:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    213c:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    214c:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    215c:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    216c:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    217c:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    218c:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    219c:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    21ac:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    21bc:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    21cc:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    21dc:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    21ec:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    21fc:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    220c:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    221c:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    222c:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    223c:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    224c:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    225c:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    226c:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    227c:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    228c:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    229c:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    22ac:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22bc:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22cc:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    22dc:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    22ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22fc:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    230c:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    231c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    232c:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    233c:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    234c:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    235c:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    236c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    237c:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    238c:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    239c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23bc:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    23cc:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    23dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23fc:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    240c:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    241c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    242c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    243c:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    244c:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    245c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    246c:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    247c:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    248c:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    249c:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    24ac:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    24bc:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24cc:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    24dc:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    24ec:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    24fc:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    250c:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    251c:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    252c:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    253c:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    254c:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    255c:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    256c:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    257c:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    258c:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    259c:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25ac:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    25bc:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    25cc:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    25dc:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    25ec:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25fc:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    260c:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    261c:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    262c:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    263c:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    264c:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    265c:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    266c:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    267c:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    268c:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    269c:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    26ac:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    26bc:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    26cc:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    26dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26ec:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    26fc:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    270c:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    271c:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    272c:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    273c:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    274c:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    275c:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    276c:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    277c:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    278c:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    279c:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    27ac:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    27bc:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    27cc:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    27dc:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    27ec:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    27fc:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    280c:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    281c:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    282c:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    283c:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    284c:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    285c:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286c:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    287c:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    288c:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    289c:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    28ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    28bc:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    28cc:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    28dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28ec:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    28fc:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    290c:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    291c:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    292c:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    293c:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    294c:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    295c:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    296c:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    297c:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    298c:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    299c:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    29ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29bc:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    29cc:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    29dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    29ec:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    29fc:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2a0c:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2a1c:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2a2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a3c:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2a4c:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a5c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a6c:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2a7c:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2a8c:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2a9c:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2aac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2abc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2acc:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2adc:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2aec:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2afc:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2b0c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b1c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b2c:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2b3c:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2b4c:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2b5c:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2b6c:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2b7c:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2b8c:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2b9c:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2bac:	fe fe fe fe a4 fe fe fe fe fe fe fe a4 fe fe fe     ................
    2bbc:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2bcc:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 fe     .GGFF'FF....FFF.
    2bdc:	fe fe fe fe a4 fe fe fe fe fe fe fe a4 fe fe fe     ................
    2bec:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2bfc:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2c0c:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2c1c:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2c2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c3c:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2c4c:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2c5c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c6c:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2c7c:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2c8c:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2c9c:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2cbc:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2ccc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cdc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cec:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2cfc:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2d0c:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2d1c:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2d2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d3c:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2d4c:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2d5c:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2d6c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d7c:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2d8c:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2d9c:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2dac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dbc:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2dcc:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2ddc:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2dec:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2dfc:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2e0c:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2e1c:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2e2c:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2e3c:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2e4c:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2e5c:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2e6c:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2e7c:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2e8c:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2e9c:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2eac:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2ebc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ecc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2edc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2eec:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2efc:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2f0c:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2f1c:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2f2c:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2f3c:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2f4c:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2f5c:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f6c:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    2f7c:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2f8c:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    2f9c:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2fac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fbc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fcc:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2fdc:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2fec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2ffc:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    300c:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    301c:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    302c:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    303c:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    304c:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    305c:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    306c:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    307c:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    308c:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    309c:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    30ac:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    30bc:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    30cc:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    30dc:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    30ec:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    30fc:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    310c:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    311c:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    312c:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    313c:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    314c:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    315c:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    316c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    317c:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    318c:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    319c:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    31ac:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    31bc:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    31cc:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    31dc:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    31ec:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    31fc:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    320c:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    321c:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    322c:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    323c:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    324c:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    325c:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    326c:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    327c:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    328c:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    329c:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    32ac:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    32bc:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    32cc:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    32dc:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    32ec:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    32fc:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    330c:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    331c:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    332c:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    333c:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    334c:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    335c:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    336c:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    337c:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    338c:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    339c:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    33ac:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    33bc:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    33cc:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    33dc:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    33ec:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    33fc:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    340c:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    341c:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    342c:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    343c:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    344c:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    345c:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    346c:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    347c:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    348c:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    349c:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    34ac:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    34bc:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    34cc:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    34dc:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34ec:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    34fc:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    350c:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    351c:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    352c:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    353c:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    354c:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    355c:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    356c:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    357c:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    358c:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    359c:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    35ac:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    35bc:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    35cc:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    35dc:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    35ec:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    35fc:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    360c:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    361c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    362c:	00 00 00 fe fe fe fe fe fe 00 00 00 fe fe fe fe     ................
    363c:	fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe fe     ................
    364c:	fe fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe     ................
    365c:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

0000366c <map_hazard_desert>:
    366c:	01 01 28                                            ..(

0000366f <map_hazard_city>:
    366f:	01 01 29                                            ..)

00003672 <map_hazard_jungle>:
    3672:	01 01 27                                            ..'

00003675 <map_hazard_fire>:
    3675:	01 01 26                                            ..&

00003678 <map_hazard_ice>:
    3678:	01 01 25                                            ..%

0000367b <map_enemy_boss_shot>:
    367b:	01 01 39                                            ..9

0000367e <map_enemy_boss_eye>:
    367e:	01 01 37                                            ..7

00003681 <map_enemy_boss_turret>:
    3681:	01 01 36                                            ..6

00003684 <map_enemy_drone>:
    3684:	01 01 35                                            ..5

00003687 <map_enemy_tank>:
    3687:	01 01 24                                            ..$

0000368a <map_enemy_ball>:
    368a:	01 01 14                                            ...

0000368d <map_enemy_spider_1>:
    368d:	01 01 34                                            ..4

00003690 <map_enemy_spider_0>:
    3690:	01 01 23                                            ..#

00003693 <map_enemy_shark>:
    3693:	01 01 05                                            ...

00003696 <map_enemy_shot>:
    3696:	01 01 13                                            ...

00003699 <map_ahero_jump>:
    3699:	02 03 4d 4e 52 55 5e 5f                             ..MNRU^_

000036a1 <map_ahero_step_3>:
    36a1:	02 03 4d 4e 52 53 5a 60                             ..MNRSZ`

000036a9 <map_ahero_step_2>:
    36a9:	02 03 4b 4c 4f 54 5c 5d                             ..KLOT\]

000036b1 <map_ahero_step_1>:
    36b1:	02 03 4d 4e 52 53 5a 5b                             ..MNRSZ[

000036b9 <map_ahero_step_0>:
    36b9:	02 03 4b 4c 4f 51 58 59                             ..KLOQXY

000036c1 <map_ahero_idle>:
    36c1:	02 03 4b 4c 4f 50 56 57                             ..KLOPVW

000036c9 <map_hero_rplasma_shot>:
    36c9:	01 01 38                                            ..8

000036cc <map_hero_space_bomb>:
    36cc:	01 01 18                                            ...

000036cf <map_hero_space_shot>:
    36cf:	01 01 17                                            ...

000036d2 <map_hero_ice_shot>:
    36d2:	01 01 16                                            ...

000036d5 <map_hero_ball_shot>:
    36d5:	01 01 15                                            ...

000036d8 <map_hero_gplasma_shot>:
    36d8:	01 01 04                                            ...

000036db <map_hero_ship_large_1>:
    36db:	04 02 3b 3c 3d 3e 49 40 4a 42                       ..;<=>I@JB

000036e5 <map_hero_ship_large_0>:
    36e5:	04 02 3b 3c 3d 3e 3f 40 41 42                       ..;<=>?@AB

000036ef <map_hero_ship_1>:
    36ef:	03 01 3a 2b 2c                                      ..:+,

000036f4 <map_hero_ship_0>:
    36f4:	03 01 2a 2b 2c                                      ..*+,

000036f9 <map_hero_prone>:
    36f9:	03 01 46 47 48                                      ..FGH

000036fe <map_hero_jump>:
    36fe:	02 03 02 03 0f 12 21 22                             ......!"

00003706 <map_hero_step_3>:
    3706:	02 03 02 03 0f 43 44 45                             .....CDE

0000370e <map_hero_step_2>:
    370e:	02 03 00 01 0c 11 1f 20                             ....... 

00003716 <map_hero_step_1>:
    3716:	02 03 02 03 0f 10 1d 1e                             ........

0000371e <map_hero_step_0>:
    371e:	02 03 00 01 0c 0e 1b 1c                             ........

00003726 <map_hero_idle>:
    3726:	02 03 00 01 0c 0d 19 1a                             ........

0000372e <map_emerald_4>:
    372e:	01 01 0a                                            ...

00003731 <map_emerald_3>:
    3731:	01 01 09                                            ...

00003734 <map_emerald_2>:
    3734:	01 01 08                                            ...

00003737 <map_emerald_1>:
    3737:	01 01 07                                            ...

0000373a <map_emerald_0>:
    373a:	01 01 06                                            ...

0000373d <map_explosion_2>:
    373d:	01 01 2f                                            ../

00003740 <map_explosion_1>:
    3740:	01 01 2e                                            ...

00003743 <map_explosion_0>:
    3743:	01 01 2d                                            ..-

00003746 <map_particle>:
    3746:	01 01 30                                            ..0

00003749 <map_up_arrow>:
    3749:	01 01 33                                            ..3

0000374c <map_down_arrow>:
    374c:	01 01 32                                            ..2

0000374f <map_right_arrow>:
    374f:	01 01 31                                            ..1

00003752 <map_none>:
    3752:	01 01 14                                            ...

00003755 <tiles_data>:
	...
    3795:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    37a5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37b5:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    37c5:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    37d5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    37e5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    37f5:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    3805:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3815:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3825:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3835:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3845:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3855:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3865:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3875:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3885:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3895:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    38a5:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    38b5:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    38c5:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    38d5:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    38e5:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    38f5:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3905:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3915:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3925:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3935:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3945:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3955:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3965:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3975:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3985:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3995:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    39a5:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    39b5:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    39c5:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    39d5:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    39e5:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    39f5:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3a05:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3a15:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3a25:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3a35:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3a45:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3a55:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3a65:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3a75:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3a85:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3a95:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3aa5:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    3ab5:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    3ac5:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ad5:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    3ae5:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3af5:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3b05:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3b15:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3b25:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3b35:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3b45:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3b55:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3b65:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3b75:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3b85:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3b95:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3ba5:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3bb5:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3bc5:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3bd5:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3be5:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3bf5:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3c05:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3c15:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3c25:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3c35:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3c45:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3c55:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3c65:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3c75:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3c85:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3c95:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3ca5:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3cb5:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3cc5:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3cd5:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3ce5:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3cf5:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3d05:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3d15:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3d25:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3d35:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3d45:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3d55:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3d65:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3d75:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3d85:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3d95:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3da5:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3db5:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3dc5:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3dd5:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3de5:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3df5:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3e05:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3e15:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3e25:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3e35:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3e45:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3e55:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3e65:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3e75:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e85:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3e95:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ea5:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3ed5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3ee5:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ef5:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3f05:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3f15:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f25:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    3f35:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3f45:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3f55:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f65:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3f75:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3f85:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    3fad:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    3fbd:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3fed:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    3ffd:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4015:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4025:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4035:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4045:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4055:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4065:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4075:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4085:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4095:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    40a5:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    40b5:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    40c5:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    40d5:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    40e5:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    40f5:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    4105:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    4115:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    4125:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    4135:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    4145:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    4155:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    4165:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    4175:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    4185:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    4195:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41a5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41b5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    41c5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    41e1:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    41f1:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    4201:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    4211:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    4221:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4231:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4241:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4251:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    4261:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    4271:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    4281:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    4291:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    42a1:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    42b1:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    42c1:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    42d1:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42e1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    42f1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4301:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4311:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    4321:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    4331:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    4341:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    4351:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4361:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4371:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    4381:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4391:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    43bd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    43cd:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    43dd:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    43ed:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    43fd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    440d:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    441d:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    442d:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    443d:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    444d:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    445d:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    446d:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    447d:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    448d:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    449d:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    44ad:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    44bd:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    44cd:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    44dd:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    44ed:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    44fd:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    450d:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    451d:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    452d:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    453d:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    454d:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    455d:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    456d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    457d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    458d:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    459d:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    45ad:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    45bd:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    45d5:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    45e5:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    45f5:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    4605:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    4615:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4625:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4635:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    465d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    466d:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    467d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    469d:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    46ad:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    46bd:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    46dd:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    46ed:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    46fd:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    471d:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    472d:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    473d:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4761:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4771:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4781:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    479d:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    47ad:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    47bd:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    47dd:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    47ed:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    47fd:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    481d:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    482d:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    483d:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    485d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    486d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    487d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    489d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    48ad:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    48bd:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    48dd:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    48ed:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48fd:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    491d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    492d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    493d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    495d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    496d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    497d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    499d:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    49ad:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49bd:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    49dd:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    49ed:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    49fd:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4a1d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4a2d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4a3d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4a5d:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4a6d:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4a7d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4a9d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4aad:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4abd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4add:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4aed:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4afd:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b21:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4b31:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4b41:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4b5d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4b6d:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4b7d:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4b9d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4bad:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4bbd:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4bdd:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4bed:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4bfd:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4c1d:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4c2d:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4c3d:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4c5d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4c6d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4c7d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4c9d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4cad:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4cbd:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4cdd:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4ced:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4cfd:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4d1d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d2d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4d3d:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4d5d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4d6d:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4d7d:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4d9d:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4dad:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4dbd:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4ddd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ded:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4dfd:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4e1d:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4e2d:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4e3d:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4e5d:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4e6d:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4e7d:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4e9d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4ead:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4ebd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4edd:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4eed:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4efd:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4f1d:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    4f2d:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    4f3d:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4f55:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f65:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f75:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f85:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4f95:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4fa5:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    4fb5:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    4fc5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4fd5:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    4fe5:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    4ff5:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    5005:	af af af af af af af af af af af af af af af af     ................
    5015:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5025:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5035:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5045:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5055:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    5065:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5075:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5085:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5095:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    50a5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50b5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50c5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    50d5:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    50e5:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    50f5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5105:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5115:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    5125:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    5135:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5145:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5155:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5165:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5175:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5185:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5195:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51a5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51b5:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    51c5:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    51d5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51e5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    51f5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5205:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5215:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5225:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5235:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5245:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5255:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5265:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5275:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5285:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5295:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    52a5:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    52b5:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    52c5:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    52d5:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    52e5:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    52f5:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    5305:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    5315:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    5325:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    5335:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5345:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    5355:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    5365:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5375:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5385:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5395:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    53a5:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    53b5:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    53c5:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    53d5:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    53e5:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    53f5:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5405:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5415:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5425:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5435:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5445:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5455:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    5465:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5475:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5485:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5495:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    54a5:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    54b5:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    54c5:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    54d5:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    54e5:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    54f5:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    5505:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    5515:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5525:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5535:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5545:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5555:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5565:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5575:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5585:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5595:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    55a5:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    55b5:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    55c5:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    55d5:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    55e5:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    55f5:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    5605:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5615:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5625:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5635:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5645:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5655:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5665:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5675:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5685:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5695:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56a5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56b5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56c5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56d5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    56e5:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    56f5:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    5705:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5715:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5725:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5735:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5745:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5755:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5765:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5775:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5785:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5795:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57a5:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    57b5:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    57c5:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    57d5:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    57e5:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    57f5:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    5805:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5815:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5825:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5835:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5845:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5855:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5865:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5875:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5885:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5895:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58a5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58b5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58c5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    58d5:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    58e5:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    58f5:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    5905:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5915:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5925:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5935:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5945:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5955:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5965:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5975:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5985:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5995:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    59a5:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    59b5:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    59c5:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    59d5:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    59e5:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    59f5:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5a05:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5a15:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5a25:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5a35:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5a45:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a55:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a65:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a75:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5a85:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5a95:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5aa5:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5ab5:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5ac5:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ad5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5ae5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5af5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b05:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b15:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5b2d:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5b3d:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5b4d:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b5d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b6d:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5b7d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5b8d:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5b9d:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bad:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bbd:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bcd:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5bdd:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5bed:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5bfd:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5c0d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c1d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c2d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c3d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c4d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c5d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5c6d:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5c7d:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5c8d:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5c9d:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5cad:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5cbd:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5ccd:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5cdd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5ced:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5cfd:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5d0d:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5d1d:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5d2d:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5d3d:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5d4d:	3f 3f 3f 3f 3f 2f 2f 2f 77 77 77 77 77 77 77 2f     ?????///wwwwwww/
    5d5d:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5d6d:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5d7d:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5d8d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5d9d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dad:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dbd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dcd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5ddd:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5ded:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5dfd:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5e0d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ///////////?????
    5e1d:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5e2d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e3d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e4d:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5e5d:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5e6d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e7d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e8d:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5e9d:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5ead:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5ebd:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5ecd:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    5edd:	13 13 13 14 13 65 5d 65 5c 65 13 14 65 65 1c 65     .....e]e\e..ee.e
    5eed:	13 13 5c 13 13 65 13 65 14 14 5c 13 5d 5c 13 13     ..\..e.e..\.]\..
    5efd:	1c 13 13 5c 5c 5c 5c 5c 1c 14 5c 13 13 13 13 13     ...\\\\\..\.....
    5f0d:	13 5c 65 5c 13 13 5c 13                             .\e\..\.

00005f15 <map_font>:
    5f15:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    5f25:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    5f35:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

00005f3c <map_atmosphere>:
    5f3c:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    5f4c:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    5f5c:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    5f6c:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005f76 <map_dialog>:
    5f76:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5f86:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5f96:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5fa6:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5fb6:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5fc6:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5fd6:	31 32                                               12

00005fd8 <map_canvas>:
    5fd8:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    5fe8:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    5ff8:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6014:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    6024:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    6034:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6050:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    6060:	32                                                  2

00006061 <map_splash>:
    6061:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    6071:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    6081:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    6091:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    60a1:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

000060ae <map_tile_none>:
    60ae:	01 01 00                                            ...

000060b1 <map_level_mega_tiles>:
    60b1:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    60c1:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    60d1:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    60e1:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    60f1:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    6101:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    6111:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    6121:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    6131:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    6141:	04 14 14 14 14 14 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    6151:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6161:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6171:	63 63 63 02 02 02 02 02 63 63 63 63 63 02 02 02     ccc.....ccccc...
    6181:	02 02 14 14 14 14 14 63 63 63 63 63 63 63 63 63     .......ccccccccc
    6191:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    61a1:	63 63 64 63 63 63 63 65 66 67 63 63 63 63 63 63     ccdccccefgcccccc
    61b1:	63 02 02 02 63 02 04 04 04 63 04 04 04 04 02 04     c...c....c......
    61c1:	04 04 04 63 63 63 63 63 02 02 02 63 63 04 04 04     ...ccccc...cc...
    61d1:	02 63 04 04 04 04 02 04 04 04 04 04 67 66 68 63     .c..........gfhc
    61e1:	63 63 63 68 67 66 66 67 68 63 63 63 63 69 63 63     ccchgffghccccicc
    61f1:	02 02 02 02 02 63 63 63 63 63 63 63 02 02 02 63     .....ccccccc...c
    6201:	02 04 04 04 02 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    6211:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6221:	63 63 1b 1b 1b 1b 1b 63 63 63 63 02 63 63 63 02     cc.....cccc.ccc.
    6231:	04 63 63 02 04 04 63 02 04 04 04 02 04 04 04 04     .cc...c.........
    6241:	02 02 02 02 02 04 04 04 04 04 04 04 04 04 04 04     ................
    6251:	04 04 04 04 04 04 04 04 04 1b 1b 1b 1b 1b 04 04     ................
    6261:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    6271:	04 04 02 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    6281:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    6291:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    62a1:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    62b1:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    62c1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    62d1:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    62e1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    62f1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6301:	6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c     lll.....llllllll
    6311:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c     llllllllllll.lll
    6321:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6331:	6c 6c 6c 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 6c 05 6c     llllllll.lllll.l
    6341:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    6351:	05 05 05 05 16 16 16 16 05 05 16 16 16 05 05 05     ................
    6361:	05 05 05 05 05 05 05 05 05 05 05 05 16 16 16 05     ................
    6371:	05 16 16 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6381:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    6391:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    63a1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c     lllllllllllll..l
    63b1:	6c 6c 05 05 16 16 16 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    63c1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 16 16 16 16 16     lllllllllll.....
    63d1:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 06     lllllllllllllll.
    63e1:	06 6c 6c 6c 05 05 06 06 06 6c 6c 6c 6c 06 6c 6c     .lll.....llll.ll
    63f1:	6c 06 05 6c 6c 06 05 05 6c 06 05 05 05 06 05 05     l..ll...l.......
    6401:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6411:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 06     ................
    6421:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6431:	05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c 05 06     ....lllll.llll..
    6441:	6c 6c 6c 05 05 06 6c 6c 05 05 05 16 16 6c 6c 6c     lll...ll.....lll
    6451:	6c 6c 06 6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c     ll.llll..lll...l
    6461:	6c 05 05 05 05 05 6c 6c 6c 6c 06 6c 6c 6c 06 05     l.....llll.lll..
    6471:	6c 6c 06 05 05 6c 06 05 05 05 05 05 05 05 05 72     ll...l.........r
    6481:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 74 73     sttststtststtsts
    6491:	74 74 73 74 73 74 74 73 74 73 74 74 73 74 73 74     ttststtststtstst
    64a1:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    64b1:	73 74 73 74 74 75 74 73 74 74 73 74 73 74 74 73     ststtutsttststts
    64c1:	74 73 74 74 73 74 73 74 74 73 76 73 74 74 73 78     tsttststtsvsttsx
    64d1:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    64e1:	78 78 78 74 73 74 74 73 79 7a 79 79 7a 7b 7c 7b     xxxtsttsyzyyz{|{
    64f1:	7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 74 73 74 74     {|yzyyz{|{{|tstt
    6501:	77 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     wxxxxxxxxxxxxxxx
    6511:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6521:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 79 7a     xxxxxxxxxxxxxxyz
    6531:	79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b     yyz{|{{|yzyyz{|{
    6541:	7b 7c 79 7a 79 79 7a 78 78 78 78 78 78 78 78 78     {|yzyyzxxxxxxxxx
    6551:	78 78 78 78 78 78 78 78 78 78 78 10 11 11 10 11     xxxxxxxxxxx.....
    6561:	7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 79     {|{{|yzyyz{|{{|y
    6571:	7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78 78 78 78 78     zyyz{|{{|xxxxxxx
    6581:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 07     xxxxxxxxxxxxxxx.
    6591:	07 07 78 78 78 78 78 78 78 78 78 78 78 78 78 78     ..xxxxxxxxxxxxxx
    65a1:	78 78 78 78 78 78 07 07 07 78 78 78 78 78 78 78     xxxxxx...xxxxxxx
    65b1:	78 78 78 78 78 78 78 78 78 78 78 78 07 07 07 78     xxxxxxxxxxxx...x
    65c1:	78 05 05 05 78 78 78 78 78 78 78 78 78 78 78 78     x...xxxxxxxxxxxx
    65d1:	78 78 78 07 07 07 78 78 05 05 05 78 78 78 78 15     xxx...xx...xxxx.
    65e1:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    65f1:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6601:	78 78 78 78 78 78 78 78 78 78 07 07 07 07 07 79     xxxxxxxxxx.....y
    6611:	7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     zyyz{|{{|yzyyz{|
    6621:	7b 7b 7c 07 07 07 07 07 78 78 05 05 05 78 07 05     {{|.....xx...x..
    6631:	05 05 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    6641:	05 05 05 05 78 78 05 05 05 07 78 05 05 05 05 78     ....xx....x....x
    6651:	05 05 05 05 07 05 05 05 05 05 78 07 05 05 05 78     ..........x....x
    6661:	05 05 05 05 07 05 05 05 05 05 05 05 05 05 05 05     ................
    6671:	05 05 05 05 05 05 07 78 05 05 05 05 78 05 05 05     .......x....x...
    6681:	05 07 05 05 05 05 05 05 05 05 05 05 78 78 78 78     ............xxxx
    6691:	78 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     xxxxxxxxxxx.xxxx
    66a1:	05 17 17 17 17 78 78 78 78 78 78 78 78 78 78 78     .....xxxxxxxxxxx
    66b1:	78 78 78 78 78 78 78 78 07 17 17 17 17 05 7d 7d     xxxxxxxx......}}
    66c1:	7d 7d 7d 7d 7d 7d 7d 7d 7d 12 81 7d 12 85 85 85     }}}}}}}}}..}....
    66d1:	85 85 85 85 85 85 85 7d 7d 7d 7d 7d 7d 7d 7d 7e     .......}}}}}}}}~
    66e1:	7f 81 7d 12 82 83 85 85 85 86 87 85 85 85 89 8a     ..}.............
    66f1:	7d 7d 7d 7d 7d 80 7d 7d 7d 7d 84 81 7d 12 81 88     }}}}}.}}}}..}...
    6701:	85 85 85 85 84 85 85 85 85 7d 7d 7d 7d 7d 7d 7d     .........}}}}}}}
    6711:	7d 7d 7d 81 7d 12 81 7d 85 85 85 85 85 85 85 85     }}}.}..}........
    6721:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6731:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 86 87     ................
    6741:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 85     ................
    6751:	85 85 86 87 88 85 85 85 85 84 85 85 85 85 88 85     ................
    6761:	85 85 85 84 85 85 85 85 88 85 85 85 85 85 85 85     ................
    6771:	85 85 85 85 85 85 85 85 85 85 85 8b 85 85 85 8b     ................
    6781:	60 85 85 8b 60 60 85 85 85 89 8a 85 85 85 86 87     `...``..........
    6791:	85 85 85 89 8a 85 85 85 86 87 85 85 85 89 8a 84     ................
    67a1:	85 85 85 85 88 85 85 85 85 84 85 85 85 85 88 85     ................
    67b1:	85 85 85 84 85 85 85 85 85 85 85 89 8a 85 85 85     ................
    67c1:	86 87 85 85 85 89 8a 85 85 85 86 87 85 09 09 09     ................
    67d1:	09 84 85 85 85 85 88 85 85 85 85 84 85 85 85 85     ................
    67e1:	88 85 85 85 85 09 85 85 85 85 85 85 8c 8c 8c 85     ................
    67f1:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    6801:	8c 8c 8c 85 85 85 86 87 85 8d 85 89 8a 8d 8e 85     ................
    6811:	85 8f 90 90 90 90 90 90 90 90 90 90 88 85 85 85     ................
    6821:	85 84 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6831:	85 85 85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85     ................
    6841:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 85     ................
    6851:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 90     ................
    6861:	90 90 85 85 90 90 90 85 85 8c 8c 8c 85 85 8c 8c     ................
    6871:	8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 09 09 09 09     ................
    6881:	85 85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 90     ................
    6891:	90 90 90 90 09 90 90 90 90 88 85 85 85 85 84 85     ................
    68a1:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 09 09     ................
    68b1:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    68c1:	8c 85 8c 8c 8c 8c 09 8c 8c 8c 8c 88 85 85 85 09     ................
    68d1:	84 85 85 09 08 85 85 09 08 08 85 09 08 08 08 09     ................
    68e1:	08 08 08 08 85 85 85 85 85 18 18 18 18 18 08 08     ................
    68f1:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 09 85     ................
    6901:	85 85 08 08 18 18 18 08 08 08 08 08 08 08 08 08     ................
    6911:	08 08 08 08 08 08 85 85 09 8c 8c 18 18 08 09 8c     ................
    6921:	08 08 08 08 09 08 08 08 08 08 08 08 08 08 08 85     ................
    6931:	85 85 86 87 85 8d 85 89 8a 8d 8e 85 85 8f 09 90     ................
    6941:	90 90 90 08 09 90 90 90 85 85 8c 8c 8c 85 85 8c     ................
    6951:	8c 8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09     .........```....
    6961:	09 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6971:	90 90 90 90 90 09 09 09 09 09 85 85 85 85 85 85     ................
    6981:	8c 8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09     ..........``....
    6991:	09 09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    69a1:	8c 8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90     ...````.........
    69b1:	90 85 85 90 90 90 85 85 90 90 90 85 85 90 90 90     ................
    69c1:	09 09 09 09 09 85 85 90 90 90 85 85 90 90 90 85     ................
    69d1:	85 90 90 90 85 09 90 90 90 09 08 18 18 18 85 85     ................
    69e1:	8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 09     ................
    69f1:	60 60 18 18 08 09 09 90 90 90 90 90 90 90 90 90     ``..............
    6a01:	90 90 90 90 90 90 90 90 90 09 90 09 09 09 08 18     ................
    6a11:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6a21:	85 85 85 09 18 18 18 18 08 90 90 90 90 09 90 90     ................
    6a31:	90 09 08 90 90 09 08 08 90 09 08 08 08 09 08 08     ................
    6a41:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    6a51:	08 08 08 08 08 08 08 08 08 08 08 08 08 09 90 90     ................
    6a61:	08 08 08 09 90 08 08 08 08 09 08 08 08 08 08 08     ................
    6a71:	08 08 08 08 85 85 85 85 85 85 8c 8c 85 85 85 8c     ................
    6a81:	8c 90 85 09 60 60 90 85 08 09 09 09 09 85 85 85     ....``..........
    6a91:	85 85 85 85 85 85 09 85 85 85 09 08 85 85 09 08     ................
    6aa1:	08 09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c     ................
    6ab1:	18 18 18 18 18 08 08 08 08 08 08 08 08 08 08 85     ................
    6ac1:	85 90 90 90 09 09 90 90 90 08 08 18 18 18 08 08     ................
    6ad1:	08 08 08 08 08 08 08 08 85 85 8c 8c 8c 85 85 09     ................
    6ae1:	8c 8c 18 18 08 09 8c 08 08 08 08 09 08 08 08 08     ................
    6af1:	08 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6b01:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6b11:	91 91 91 91 91 91 91 91 91 92 92 92 92 92 93 93     ................
    6b21:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b31:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b41:	93 93 93 94 93 93 93 95 96 97 93 98 9b 13 9c 9a     ................
    6b51:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6b61:	93 93 93 93 93 93 93 93 93 93 93 94 93 93 93 93     ................
    6b71:	93 93 93 93 93 94 93 93 93 98 99 9a 93 98 99 99     ................
    6b81:	99 9a 93 93 93 93 93 93 98 99 9a 93 98 99 99 99     ................
    6b91:	9a 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6ba1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bb1:	93 93 93 93 0a 0a 0a 0a 0a 93 95 96 97 93 98 9b     ................
    6bc1:	13 9c 9a 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6bd1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6be1:	93 93 93 93 93 93 93 93 93 93 0a 93 98 99 9a 93     ................
    6bf1:	98 99 99 99 9a 93 93 93 93 93 93 93 93 93 93 9d     ................
    6c01:	0a 93 93 93 93 95 96 97 93 98 9b 13 9c 9a 93 93     ................
    6c11:	93 93 93 0a 0a 0a 9d 0a 19 19 19 19 19 93 93 93     ................
    6c21:	93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93 93     ................
    6c31:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6c41:	93 93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93     ................
    6c51:	93 93 0a 0b 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a 0b     ................
    6c61:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c71:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c81:	0b 0b 0b 0b 0b 9e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6c91:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 93 93 0b     ................
    6ca1:	0b 0b 0a 93 0b 0b 0b 0b 0a 0b 0b 0b 0b 0b 0b 0b     ................
    6cb1:	0b 0b 0b 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6cc1:	93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 93 93 93 93     ................
    6cd1:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6ce1:	0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93 93     ................
    6cf1:	93 93 93 93 93 93 93 93 93 1a 1a 1a 1a 1a 93 93     ................
    6d01:	93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a 93     ................
    6d11:	93 93 0b 0b 1a 1a 1a 93 93 93 93 93 93 93 93 93     ................
    6d21:	93 93 93 93 93 93 93 93 0a 0a 93 1a 1a 0b 0b 1a     ................
    6d31:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d41:	93 93 93 0a 1a 1a 1a 1a 0b 93 93 93 93 93 93 93     ................
    6d51:	93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 1a 1a     ................
    6d61:	1a 1a 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d71:	93 93 0a 93 93 93 1a 0b 0a 0a 0a 19 19 19 19 19     ................
    6d81:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a     ................
    6d91:	0a 0a 0a 0a 00 21 00 00 00 00 00 00 00 00 00 00     .....!..........
    6da1:	00 00 00 00 21 00 00 00 00 00 00 00 00 00 00 00     ....!...........
    6db1:	00 00 00 00 00 00 22 00 21 00 00 00 00 00 00 00     ......".!.......
    6dc1:	00 00 00 00 00 21 00 00 00 00 00 00 00 22 00 00     .....!......."..
    6dd1:	00 21 00 00 00 00 00 00 00 00 00 00 00 22 00 22     .!..........."."
	...
    6de9:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6df9:	00 21 0c 0c 0c 00 00 0c 0c 0c 00 00 0d 0d 0d 00     .!..............
    6e09:	21 00 00 00 00 00 00 00 00 0c 0c 0c 0c 0c 0c 0c     !...............
    6e19:	0c 0c 0c 0d 0d 0d 0d 0d 00 00 00 00 00 00 00 00     ................
    6e29:	00 21 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d 0d     .!..............
    6e39:	0d 00 21 00 00 00 00 00 00 00 00 0c 0c 0c 0c 0c     ..!.............
    6e49:	0c 0c 0c 0c 0c 0d 0d 0d 0d 0d 0c 0c 00 00 00 0c     ................
    6e59:	0c 00 00 00 22 00 00 00 00 00 00 00 00 00 00 21     ...."..........!
	...
    6e75:	0e 0c 0c 00 00 00 0c 0c 22 00 00 0c 0c 00 00 00     ........".......
    6e85:	0c 0c 00 00 00 0e 0e 0e 22 00 00 00 00 0e 0e 00     ........".......
    6e95:	00 0e 0e 0e 00 21 0e 0e 0e 00 00 0e 0e 0e 00 00     .....!..........
    6ea5:	00 0e 0e 0e 0e 0e 0e 00 0e 0e 0e 0e 0e 0e 0e 0e     ................
    6eb5:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 00 22 00 00 00     ............"...
    6ec5:	0e 00 00 00 00 00 00 21 00 00 00 00 00 00 00 00     .......!........
    6ed5:	00 00 00 00 00 0e 0e 0e 00 00 0c 0c 22 00 00 0c     ............"...
    6ee5:	0c 00 00 00 0c 0c 00 00 00 0c 0c 00 22 00 00 21     ............"..!
	...
    6efd:	00 00 0d 0d 0d 00 21 0c 0c 0c 00 00 0c 0c 0c 00     ......!.........
	...
    6f15:	22 0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     "...............
    6f25:	00 21 00 00 00 00 00 00 00 00 0d 0d 0d 0d 0d 0c     .!..............
    6f35:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 00 00 00 0c 0c     ................
    6f45:	00 00 00 0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c     ................
    6f55:	0c 0c                                               ..

00006f57 <map_level_space_final>:
    6f57:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    6f67:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6f77:	84 85 84 85 84 85 84 85 84 85 84 85 88 89 8a 89     ................
    6f87:	8a 89 8b 89 8a 86 87 86 87 86 87 86 87 86 87 86     ................
    6f97:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6fa7:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    6fb7:	87 86 87 86 8c 8d 87 86 84 85 84 85 84 85 84 85     ................
    6fc7:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6fd7:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    6fe7:	84 85 84 85 84 85 84 8e 8f 85 84 86 87 86 87 86     ................
    6ff7:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7007:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7017:	87 86 87 86 87 86 87 86 87 86 90 91 87 86 84 85     ................
    7027:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7037:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7047:	84 85 84 85 84 85 84 85 92 93 94 93 94 93 95 93     ................
    7057:	94                                                  .

00007058 <map_level_space>:
    7058:	33 05 84 85 84 85 84 85 84 85 84 85 84 85 84 85     3...............
    7068:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7078:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7088:	84 85 84 85 84 86 87 86 87 86 87 86 87 86 87 86     ................
    7098:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    70a8:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    70b8:	87 86 87 86 87 86 87 86 84 85 84 85 84 85 84 85     ................
    70c8:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    70d8:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    70e8:	84 85 84 85 84 85 84 85 84 85 84 86 87 86 87 86     ................
    70f8:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7108:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 87 86     ................
    7118:	87 86 87 86 87 86 87 86 87 86 87 86 87 86 84 85     ................
    7128:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7138:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7148:	84 85 84 85 84 85 84 85 84 85 84 85 84 85 84 85     ................
    7158:	84                                                  .

00007159 <map_level_desert>:
    7159:	33 05 69 69 69 69 69 69 69 69 69 69 69 69 69 69     3.iiiiiiiiiiiiii
    7169:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7179:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7189:	69 69 69 69 69 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     iiiiijjjjjjjjjjj
    7199:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    71a9:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    71b9:	6a 6a 6a 6a 6a 6a 6a 6a 6b 6c 6b 6d 6b 6d 6b 6e     jjjjjjjjklkmkmkn
    71c9:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    71d9:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6c 6b 6d 6b 6d 6b 6e     klkmkmknklkmkmkn
    71e9:	6b 6c 6b 6d 6b 6d 6b 6e 6b 6e 6b 6b 6b 6b 6f 70     klkmkmknknkkkkop
    71f9:	71 70 6b 72 70 70 73 6b 74 6b 6b 6b 6b 6b 6f 6b     qpkrppsktkkkkkok
    7209:	71 6b 6b 70 6b 75 6f 76 71 6b 6b 72 70 70 73 6b     qkkpkuovqkkrppsk
    7219:	71 6b 6b 6b 6b 6b 6f 6b 6f 6b 6b 6b 6b 6b 70 70     qkkkkkokokkkkkpp
    7229:	70 70 70 70 70 70 77 78 79 7a 7b 70 70 70 7c 7d     ppppppwxyz{ppp|}
    7239:	7e 7f 80 81 82 70 70 70 70 70 83 70 70 70 77 78     ~....ppppp.pppwx
    7249:	79 7a 7b 70 70 70 70 81 82 70 70 70 70 70 70 70     yz{pppp..ppppppp
    7259:	70                                                  p

0000725a <map_level_city>:
    725a:	33 05 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e     3.>?@>A>?@>A>?@>
    726a:	41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41     A>?@>A>?@>A>?@>A
    727a:	3e 3f 40 3e 41 3e 3f 40 3e 41 3e 3f 40 3e 41 3e     >?@>A>?@>A>?@>A>
    728a:	3f 40 3e 41 3e 42 43 44 42 42 42 43 44 42 42 42     ?@>A>BCDBBBCDBBB
    729a:	43 44 42 42 42 43 44 42 42 42 43 44 42 42 42 43     CDBBBCDBBBCDBBBC
    72aa:	44 42 42 42 43 44 42 42 42 43 44 42 42 42 43 44     DBBBCDBBBCDBBBCD
    72ba:	42 42 42 43 44 42 42 42 45 46 47 42 42 45 48 49     BBBCDBBBEFGBBEHI
    72ca:	42 42 45 46 47 42 42 45 48 49 42 42 45 46 47 42     BBEFGBBEHIBBEFGB
    72da:	42 45 46 47 42 42 45 46 47 42 42 45 46 47 42 42     BEFGBBEFGBBEFGBB
    72ea:	45 48 49 42 42 45 46 47 42 42 45 4a 4b 4c 4d 4e     EHIBBEFGBBEJKLMN
    72fa:	4f 50 51 52 4e 4a 4b 4c 4d 4e 4f 50 51 52 4e 4a     OPQRNJKLMNOPQRNJ
    730a:	4b 53 54 55 56 57 4c 4d 4e 4a 4b 4c 4d 4e 4a 4b     KSTUVWLMNJKLMNJK
    731a:	4c 4d 4e 4f 50 4c 4d 4e 4a 4b 4c 4d 4e 4a 58 59     LMNOPLMNJKLMNJXY
    732a:	5a 5b 5c 58 59 5a 5b 5d 5e 5f 60 5b 5c 58 59 5a     Z[\XYZ[]^_`[\XYZ
    733a:	5b 5c 58 61 62 62 62 62 63 64 5b 5c 58 59 65 66     [\Xabbbbcd[\XYef
    734a:	67 68 59 5a 5b 5c 58 59 5a 5b 5c 58 59 5a 5b 5c     ghYZ[\XYZ[\XYZ[\
    735a:	58                                                  X

0000735b <map_level_forest>:
    735b:	33 05 27 28 29 27 28 29 27 28 29 27 28 29 27 28     3.'()'()'()'()'(
    736b:	29 27 28 29 27 28 29 27 28 29 27 28 29 27 28 29     )'()'()'()'()'()
    737b:	27 28 29 27 28 29 27 28 29 27 28 29 27 28 29 27     '()'()'()'()'()'
    738b:	28 29 27 28 29 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b     ()'()*+,*+,*+,*+
    739b:	2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c     ,*+,*+,*+,*+,*+,
    73ab:	2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a 2b 2c 2a     *+,*+,*+,*+,*+,*
    73bb:	2b 2c 2a 2b 2c 2a 2b 2c 2d 2e 2d 2d 2e 2d 2d 2e     +,*+,*+,-.--.--.
    73cb:	2f 2d 2e 2d 2f 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2d     /-.-/.--.--.--.-
    73db:	2d 2e 2d 2d 2e 2d 2d 2e 2d 2d 2e 2f 2d 2e 2f 2d     -.--.--.--./-./-
    73eb:	2e 2d 2d 2e 2f 2d 2e 2d 2d 2e 2d 2d 30 2d 2d 30     .--./-.--.--0--0
    73fb:	2d 2f 30 2d 2f 30 2f 2d 30 2d 2d 30 31 32 30 31     -/0-/0/-0--01201
    740b:	32 30 33 34 30 2d 2d 30 2d 2d 30 2f 2d 30 35 2d     20340--0--0/-05-
    741b:	30 35 2d 30 2d 2d 30 35 2d 30 2d 2d 30 2d 36 37     05-0--05-0--0-67
    742b:	36 36 37 36 36 37 36 36 37 36 36 37 36 36 37 38     6676676676676678
    743b:	39 37 38 39 37 3a 3b 37 3c 3d 37 3c 3d 37 36 36     97897:;7<=7<=766
    744b:	37 36 36 37 36 36 37 3c 3d 37 36 36 37 36 36 37     7667667<=7667667
    745b:	36                                                  6

0000745c <map_level_fire>:
    745c:	33 05 13 13 13 13 13 13 13 13 13 13 13 13 13 13     3...............
    746c:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    747c:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    748c:	13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14     ................
    749c:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    74ac:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
    74bc:	14 14 14 14 14 14 14 14 15 16 15 15 15 15 16 15     ................
    74cc:	15 15 15 16 15 15 15 15 15 17 15 16 15 15 15 15     ................
    74dc:	15 15 15 15 18 19 16 15 15 15 15 16 15 15 15 15     ................
    74ec:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    74fc:	15 15 15 15 15 15 15 17 15 15 17 15 15 15 17 15     ................
    750c:	15 15 15 15 15 15 1a 1b 1c 1d 15 15 15 15 15 15     ................
    751c:	15 18 19 15 15 18 19 15 15 15 15 15 15 15 17 17     ................
    752c:	17 1e 1f 1e 1f 1e 1f 1e 1f 20 17 17 17 17 17 17     ......... ......
    753c:	17 17 17 17 1e 1f 1e 1f 21 22 22 22 23 24 1f 1e     ........!"""#$..
    754c:	1f 20 17 21 1b 1c 25 26 1b 1c 25 17 17 17 17 17     . .!..%&..%.....
    755c:	17                                                  .

0000755d <map_level_ice>:
    755d:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    756d:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    757d:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    758d:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    759d:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    75ad:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    75bd:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    75cd:	06 07 07 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    75dd:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    75ed:	06 06 06 06 06 06 06 06 06 06 06 06 06 09 06 06     ................
    75fd:	06 06 06 0a 02 02 0b 06 06 06 06 09 06 06 06 06     ................
    760d:	06 06 06 06 06 06 06 06 06 06 06 06 06 08 08 06     ................
    761d:	06 06 08 06 09 06 06 06 06 06 06 06 06 06 07 07     ................
    762d:	0c 07 07 07 07 0d 02 02 02 02 0b 07 07 07 0c 0e     ................
    763d:	07 0e 07 0e 07 0f 10 10 10 11 10 11 10 11 12 07     ................
    764d:	07 07 07 07 07 07 07 0c 07 07 07 07 07 07 07 07     ................
    765d:	07                                                  .

0000765e <__ctors_end>:
    765e:	11 24       	eor	r1, r1
    7660:	1f be       	out	0x3f, r1	; 63
    7662:	cf ef       	ldi	r28, 0xFF	; 255
    7664:	d0 e1       	ldi	r29, 0x10	; 16
    7666:	de bf       	out	0x3e, r29	; 62
    7668:	cd bf       	out	0x3d, r28	; 61

0000766a <__do_copy_data>:
    766a:	15 e0       	ldi	r17, 0x05	; 5
    766c:	a0 e0       	ldi	r26, 0x00	; 0
    766e:	b5 e0       	ldi	r27, 0x05	; 5
    7670:	ee e4       	ldi	r30, 0x4E	; 78
    7672:	f5 ee       	ldi	r31, 0xE5	; 229
    7674:	02 c0       	rjmp	.+4      	; 0x767a <__do_copy_data+0x10>
    7676:	05 90       	lpm	r0, Z+
    7678:	0d 92       	st	X+, r0
    767a:	a0 31       	cpi	r26, 0x10	; 16
    767c:	b1 07       	cpc	r27, r17
    767e:	d9 f7       	brne	.-10     	; 0x7676 <__do_copy_data+0xc>

00007680 <__do_clear_bss>:
    7680:	10 e1       	ldi	r17, 0x10	; 16
    7682:	a0 e1       	ldi	r26, 0x10	; 16
    7684:	b5 e0       	ldi	r27, 0x05	; 5
    7686:	01 c0       	rjmp	.+2      	; 0x768a <.do_clear_bss_start>

00007688 <.do_clear_bss_loop>:
    7688:	1d 92       	st	X+, r1

0000768a <.do_clear_bss_start>:
    768a:	a1 35       	cpi	r26, 0x51	; 81
    768c:	b1 07       	cpc	r27, r17
    768e:	e1 f7       	brne	.-8      	; 0x7688 <.do_clear_bss_loop>

00007690 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7690:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <wdt_randomize>
#endif

    MCUSR = 0;
    7694:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7696:	88 e1       	ldi	r24, 0x18	; 24
    7698:	0f b6       	in	r0, 0x3f	; 63
    769a:	f8 94       	cli
    769c:	80 93 60 00 	sts	0x0060, r24
    76a0:	10 92 60 00 	sts	0x0060, r1
    76a4:	0f be       	out	0x3f, r0	; 63

000076a6 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    76a6:	0e 94 a5 41 	call	0x834a	; 0x834a <isEepromFormatted>
    76aa:	81 11       	cpse	r24, r1
    76ac:	02 c0       	rjmp	.+4      	; 0x76b2 <Initialize+0xc>
    76ae:	0e 94 83 41 	call	0x8306	; 0x8306 <FormatEeprom>

	cli();
    76b2:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    76b4:	81 e0       	ldi	r24, 0x01	; 1
    76b6:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    76ba:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    76be:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    76c2:	10 92 d0 0c 	sts	0x0CD0, r1
    76c6:	10 92 d6 0c 	sts	0x0CD6, r1
    76ca:	10 92 dc 0c 	sts	0x0CDC, r1
    76ce:	10 92 e2 0c 	sts	0x0CE2, r1
    76d2:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    76d6:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    76da:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    76de:	92 e1       	ldi	r25, 0x12	; 18
    76e0:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    76e4:	90 ee       	ldi	r25, 0xE0	; 224
    76e6:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    76ea:	94 e1       	ldi	r25, 0x14	; 20
    76ec:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    76f0:	10 92 c2 0c 	sts	0x0CC2, r1
    76f4:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    76f8:	10 92 c6 0c 	sts	0x0CC6, r1
    76fc:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    7700:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    7704:	0e 94 cd 4e 	call	0x9d9a	; 0x9d9a <InitializeVideoMode>
    7708:	84 e8       	ldi	r24, 0x84	; 132
    770a:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    770c:	fc 01       	movw	r30, r24
    770e:	25 91       	lpm	r18, Z+
    7710:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7712:	f9 01       	movw	r30, r18
    7714:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7716:	30 83       	st	Z, r19
    7718:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    771a:	20 e0       	ldi	r18, 0x00	; 0
    771c:	82 3b       	cpi	r24, 0xB2	; 178
    771e:	92 07       	cpc	r25, r18
    7720:	a9 f7       	brne	.-22     	; 0x770c <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7722:	78 94       	sei
	
	DisplayLogo();
    7724:	0e 94 5c 4f 	call	0x9eb8	; 0x9eb8 <DisplayLogo>
    7728:	0e 94 40 70 	call	0xe080	; 0xe080 <main>
    772c:	0c 94 a5 72 	jmp	0xe54a	; 0xe54a <_exit>

00007730 <__bad_interrupt>:
    7730:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007734 <sub_video_mode3>:
	;***************************************************

	sub_video_mode3:
		;de-activate sync timer interrupts
		;we will need to use the I flag to branch in a critical loop
		ldi ZL,(0<<OCIE1A)
    7734:	e0 e0       	ldi	r30, 0x00	; 0
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    7736:	e0 93 6f 00 	sts	0x006F, r30

		;wait cycles to align with next hsync
		WAIT r26,183+241
    773a:	ad e8       	ldi	r26, 0x8D	; 141
    773c:	aa 95       	dec	r26
    773e:	f1 f7       	brne	.-4      	; 0x773c <sub_video_mode3+0x8>
    7740:	00 00       	nop

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    7742:	00 91 f3 0c 	lds	r16, 0x0CF3

		ldi ZL,lo8(ram_tiles_restore);
    7746:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    7748:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    774a:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    774c:	02 9f       	mul	r16, r18
		add ZL,r0
    774e:	e0 0d       	add	r30, r0
		adc ZH,r1
    7750:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7752:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7754:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7756:	20 91 80 0d 	lds	r18, 0x0D80
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    775a:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    775c:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    775e:	30 0f       	add	r19, r16

		cp r18,r16
    7760:	20 17       	cp	r18, r16
		breq no_ramtiles
    7762:	51 f0       	breq	.+20     	; 0x7778 <no_ramtiles>
		nop
    7764:	00 00       	nop
	...

00007768 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7768:	a1 91       	ld	r26, Z+
		ld XH,Z+
    776a:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    776c:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    776e:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    7770:	0c 93       	st	X, r16

		inc r16
    7772:	03 95       	inc	r16
		cp r16,r18
    7774:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7776:	c0 f3       	brcs	.-16     	; 0x7768 <upd_loop>

00007778 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7778:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    777a:	1a 95       	dec	r17
		brne .-4
    777c:	f1 f7       	brne	.-4      	; 0x777a <no_ramtiles+0x2>
		rjmp .
    777e:	00 c0       	rjmp	.+0      	; 0x7780 <no_ramtiles+0x8>
		dec r19
    7780:	3a 95       	dec	r19
		brne 1b
    7782:	d1 f7       	brne	.-12     	; 0x7778 <no_ramtiles>

		;**********************
		; setup scroll stuff
		;**********************
	
		ldi YL,lo8(vram)
    7784:	c0 e0       	ldi	r28, 0x00	; 0
		ldi YH,hi8(vram)
    7786:	d1 e0       	ldi	r29, 0x01	; 1

		//add X scroll (coarse)
		lds r18,screen_scrollX ;ScreenScrollX
    7788:	20 91 b2 0c 	lds	r18, 0x0CB2
		mov r25,r18
    778c:	92 2f       	mov	r25, r18
		andi r18,0xf8	;(x>>3) * 8 interleave
    778e:	28 7f       	andi	r18, 0xF8	; 248
		add YL,r18
    7790:	c2 0f       	add	r28, r18

		;save Y wrap adress 
		movw r12,YL
    7792:	6e 01       	movw	r12, r28
	

		//add Y scroll (coarse)
		lds r16,screen_scrollY ;ScreenScrollY
    7794:	00 91 b3 0c 	lds	r16, 0x0CB3
		mov r22,r16
    7798:	60 2f       	mov	r22, r16
		lsr r16
    779a:	06 95       	lsr	r16
		lsr r16
    779c:	06 95       	lsr	r16
		lsr r16 ;/8
    779e:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    77a0:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    77a4:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    77a6:	f1 2e       	mov	r15, r17

        mov r17,r16
    77a8:	10 2f       	mov	r17, r16
        lsr r16
    77aa:	06 95       	lsr	r16
        lsr r16
    77ac:	06 95       	lsr	r16
        lsr r16 ;/8
    77ae:	06 95       	lsr	r16
		add YH,r16      ; (bits 6-7)
    77b0:	d0 0f       	add	r29, r16
		andi r17,0x7
    77b2:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    77b4:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    77b6:	67 70       	andi	r22, 0x07	; 7
		;lds r20,tile_table_lo
		;lds r21,tile_table_hi
		;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
		;out _SFR_IO_ADDR(GPIOR2),r21

		lds r20,overlay_tile_table
    77b8:	40 91 b0 0c 	lds	r20, 0x0CB0
		lds r21,overlay_tile_table+1
    77bc:	50 91 b1 0c 	lds	r21, 0x0CB1
		lds r6,tile_table_lo
    77c0:	60 90 ac 0c 	lds	r6, 0x0CAC
		lds r7,tile_table_hi
    77c4:	70 90 ad 0c 	lds	r7, 0x0CAD
		out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    77c8:	6a bc       	out	0x2a, r6	; 42
		out _SFR_IO_ADDR(GPIOR2),r7
    77ca:	7b bc       	out	0x2b, r7	; 43


		;save main section value	
		movw r10,YL
    77cc:	5e 01       	movw	r10, r28
		mov r23,r22
    77ce:	76 2f       	mov	r23, r22
		mov r24,r15
    77d0:	8f 2d       	mov	r24, r15
		mov r9,r25
    77d2:	99 2e       	mov	r9, r25

		;load values for overlay if it's activated (overlay_height>0)
		
		;compute beginning of overlay in vram 
		lds r16,screen_scrollHeight
    77d4:	00 91 b4 0c 	lds	r16, 0x0CB4
		mov r18,r16
    77d8:	20 2f       	mov	r18, r16
		lsr r16
    77da:	06 95       	lsr	r16
		lsr r16
    77dc:	06 95       	lsr	r16
		lsr r16			;hi8
    77de:	06 95       	lsr	r16
		inc r16			;add 0x100 ram offset
    77e0:	03 95       	inc	r16
		andi r18,7		;lo8
    77e2:	27 70       	andi	r18, 0x07	; 7
		
		lds r19,overlay_height	
    77e4:	30 91 af 0c 	lds	r19, 0x0CAF
		cpi r19,0
    77e8:	30 30       	cpi	r19, 0x00	; 0
		in r0, _SFR_IO_ADDR(SREG)
    77ea:	0f b6       	in	r0, 0x3f	; 63

		sbrs r0,SREG_Z
    77ec:	01 fe       	sbrs	r0, 1
		clr r22
    77ee:	66 27       	eor	r22, r22
		sbrs r0,SREG_Z
    77f0:	01 fe       	sbrs	r0, 1
		mov YL,r18		;lo8(overlay_vram)
    77f2:	c2 2f       	mov	r28, r18
		sbrs r0,SREG_Z
    77f4:	01 fe       	sbrs	r0, 1
		mov YH,r16		;hi8(overlay_vram)
    77f6:	d0 2f       	mov	r29, r16
		sbrs r0,SREG_Z
    77f8:	01 fe       	sbrs	r0, 1
		ser r24
    77fa:	8f ef       	ldi	r24, 0xFF	; 255
		sbrs r0,SREG_Z
    77fc:	01 fe       	sbrs	r0, 1
		clr r9
    77fe:	99 24       	eor	r9, r9

		sbrs r0,SREG_Z
    7800:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR1),r20
    7802:	4a bd       	out	0x2a, r20	; 42
		sbrs r0,SREG_Z
    7804:	01 fe       	sbrs	r0, 1
		out _SFR_IO_ADDR(GPIOR2),r21
    7806:	5b bd       	out	0x2b, r21	; 43


		//ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
		//mov r8,r16
		lds r8,render_lines_count ;total scanlines to draw
    7808:	80 90 be 0c 	lds	r8, 0x0CBE

0000780c <next_tile_line>:
	;r23 = Main section tile row
	;r24 = Current Y tiles to draw before wrapping
	;r25 = Main section scrollX

	next_tile_line:
		rcall hsync_pulse
    780c:	bc d3       	rcall	.+1912   	; 0x7f86 <hsync_pulse>

		WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    780e:	24 e0       	ldi	r18, 0x04	; 4
    7810:	2a 95       	dec	r18
    7812:	f1 f7       	brne	.-4      	; 0x7810 <next_tile_line+0x4>
    7814:	00 00       	nop
				
		call render_tile_line
    7816:	0e 94 4c 3c 	call	0x7898	; 0x7898 <render_tile_line>

		WAIT r18,58
    781a:	23 e1       	ldi	r18, 0x13	; 19
    781c:	2a 95       	dec	r18
    781e:	f1 f7       	brne	.-4      	; 0x781c <next_tile_line+0x10>
    7820:	00 00       	nop

		inc r22
    7822:	63 95       	inc	r22
		dec r8
    7824:	8a 94       	dec	r8
		breq text_frame_end
    7826:	09 f1       	breq	.+66     	; 0x786a <text_frame_end>

		cpi r22,TILE_HEIGHT ;last char line? 1
    7828:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row
    782a:	29 f0       	breq	.+10     	; 0x7836 <next_tile_row>

		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r16,25
    782c:	08 e0       	ldi	r16, 0x08	; 8
    782e:	0a 95       	dec	r16
    7830:	f1 f7       	brne	.-4      	; 0x782e <next_tile_line+0x22>
    7832:	00 00       	nop
		rjmp next_tile_line
    7834:	eb cf       	rjmp	.-42     	; 0x780c <next_tile_line>

00007836 <next_tile_row>:

	next_tile_row:

		clr r22		;clear current char line
    7836:	66 27       	eor	r22, r22

		;increment vram pointer next row
		mov r16,YL
    7838:	0c 2f       	mov	r16, r28
		andi r16,0x7
    783a:	07 70       	andi	r16, 0x07	; 7
		cpi r16,7
    783c:	07 30       	cpi	r16, 0x07	; 7
		breq 1f
    783e:	11 f0       	breq	.+4      	; 0x7844 <next_tile_row+0xe>
		inc YL
    7840:	c3 95       	inc	r28
		rjmp 2f
    7842:	02 c0       	rjmp	.+4      	; 0x7848 <next_tile_row+0x12>
	1:
		andi YL,0xf8
    7844:	c8 7f       	andi	r28, 0xF8	; 248
		inc YH
    7846:	d3 95       	inc	r29
	2:

		dec r24		;wrap section?
    7848:	8a 95       	dec	r24
		brne .+2
    784a:	09 f4       	brne	.+2      	; 0x784e <next_tile_row+0x18>
		movw YL,r12
    784c:	e6 01       	movw	r28, r12

		dec r19
    784e:	3a 95       	dec	r19
		brne .+2
    7850:	09 f4       	brne	.+2      	; 0x7854 <next_tile_row+0x1e>
		mov r22,r23	;section tile row
    7852:	67 2f       	mov	r22, r23
		brne .+2
    7854:	09 f4       	brne	.+2      	; 0x7858 <next_tile_row+0x22>
		movw YL,r10 ;vram adress
    7856:	e5 01       	movw	r28, r10
		brne .+2
    7858:	09 f4       	brne	.+2      	; 0x785c <next_tile_row+0x26>
		mov r24,r15 ;Y wrapping
    785a:	8f 2d       	mov	r24, r15
		brne .+2
    785c:	09 f4       	brne	.+2      	; 0x7860 <next_tile_row+0x2a>
		mov r9,r25  ;scrollX
    785e:	99 2e       	mov	r9, r25

		brne .+2
    7860:	09 f4       	brne	.+2      	; 0x7864 <next_tile_row+0x2e>
		out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7862:	6a bc       	out	0x2a, r6	; 42
		brne .+2
    7864:	09 f4       	brne	.+2      	; 0x7868 <next_tile_row+0x32>
		out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7866:	7b bc       	out	0x2b, r7	; 43

		rjmp next_tile_line
    7868:	d1 cf       	rjmp	.-94     	; 0x780c <next_tile_line>

0000786a <text_frame_end>:

	text_frame_end:

		WAIT r18,28
    786a:	29 e0       	ldi	r18, 0x09	; 9
    786c:	2a 95       	dec	r18
    786e:	f1 f7       	brne	.-4      	; 0x786c <text_frame_end+0x2>
    7870:	00 00       	nop

		rcall hsync_pulse ;145
    7872:	89 d3       	rcall	.+1810   	; 0x7f86 <hsync_pulse>
	
		clr r1
    7874:	11 24       	eor	r1, r1
		call RestoreBackground
    7876:	0e 94 80 4d 	call	0x9b00	; 0x9b00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    787a:	e0 91 b8 0c 	lds	r30, 0x0CB8
		ldi r20,SYNC_FLAG_FIELD
    787e:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7880:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7882:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7884:	e0 93 b8 0c 	sts	0x0CB8, r30
	
		cli 
    7888:	f8 94       	cli

		;re-activate sync timer interrupts
		ldi ZL,(1<<OCIE1A)
    788a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIMSK1),ZL
    788c:	e0 93 6f 00 	sts	0x006F, r30
			
		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7890:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7892:	e0 93 36 00 	sts	0x0036, r30

		ret
    7896:	08 95       	ret

00007898 <render_tile_line>:
	; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
	; 
	; cycles  = 1495
	;*************************************************
	render_tile_line:
		push YL
    7898:	cf 93       	push	r28
		push YH
    789a:	df 93       	push	r29
		push r23
    789c:	7f 93       	push	r23
		push r22
    789e:	6f 93       	push	r22
		push r19
    78a0:	3f 93       	push	r19
		push r13
    78a2:	df 92       	push	r13
		push r12
    78a4:	cf 92       	push	r12
		push r9
    78a6:	9f 92       	push	r9
		push r7
    78a8:	7f 92       	push	r7
		push r6
    78aa:	6f 92       	push	r6
		;--------------------------
		; Rendering 
		;---------------------------

		;get tile row offset
		ldi r23,TILE_WIDTH ;tile width in pixels
    78ac:	78 e0       	ldi	r23, 0x08	; 8
		mul r22,r23
    78ae:	67 9f       	mul	r22, r23

		;compute base adresses for ROM and RAM tiles
		in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    78b0:	0a b5       	in	r16, 0x2a	; 42
		in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    78b2:	1b b5       	in	r17, 0x2b	; 43
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    78b4:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    78b6:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    78b8:	00 0d       	add	r16, r0
		adc r17,r1
    78ba:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles adress
    78bc:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    78be:	00 e5       	ldi	r16, 0x50	; 80
		ldi r17,hi8(ram_tiles)
    78c0:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    78c2:	00 0d       	add	r16, r0
		adc r17,r1
    78c4:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles adress
    78c6:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    78c8:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H-1	;main loop counter
    78ca:	1b e1       	ldi	r17, 0x1B	; 27


		;handle fine scroll offset
		;lds r22,screenSections+scrollX
		mov r22,r9
    78cc:	69 2d       	mov	r22, r9
		andi r22,0x7		
    78ce:	67 70       	andi	r22, 0x07	; 7
		mov r14,r22	;pixels to draw on last tile	
    78d0:	e6 2e       	mov	r14, r22
		cli			;no trailing pixel to draw (hack, see end: )
    78d2:	f8 94       	cli
		breq .+2
    78d4:	09 f0       	breq	.+2      	; 0x78d8 <render_tile_line+0x40>
		sei			;some trailing pixel to draw (hack, see end: )
    78d6:	78 94       	sei

		;get first pixel of last tile in ROM (for ROM tiles fine scroll)
		;and adress of next pixel
		movw ZL,YL
    78d8:	fe 01       	movw	r30, r28
		subi ZL,-(SCREEN_TILES_H*8)
    78da:	e0 52       	subi	r30, 0x20	; 32
		ld r18,Z
    78dc:	20 81       	ld	r18, Z
		mul r18,r19 	;tile*width*height
    78de:	23 9f       	mul	r18, r19
	    add r0,r2    ;add ROM title table address +row offset
    78e0:	02 0c       	add	r0, r2
	    adc r1,r3
    78e2:	13 1c       	adc	r1, r3
		movw ZL,r0
    78e4:	f0 01       	movw	r30, r0
		lpm r9,Z+	;hold first pixel until end 
    78e6:	95 90       	lpm	r9, Z+
		movw r12,ZL ;hold second pixel adress until end
    78e8:	6f 01       	movw	r12, r30


		;compute first tile adress
	    ld r18,Y     	;load next tile # from VRAM
    78ea:	28 81       	ld	r18, Y
		subi YL,-8
    78ec:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    78ee:	2c 31       	cpi	r18, 0x1C	; 28
		in r16,_SFR_IO_ADDR(SREG)	;save the carry flag for later	
    78f0:	0f b7       	in	r16, 0x3f	; 63
		mul r18,r19 	;tile*width*height
    78f2:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles	
    78f4:	a1 01       	movw	r20, r2
		sbrc r16,SREG_C
    78f6:	00 fd       	sbrc	r16, 0
		movw r20,r4		;ram tiles
    78f8:	a2 01       	movw	r20, r4
	    add r0,r20    ;add title table address +row offset
    78fa:	04 0e       	add	r0, r20
	    adc r1,r21
    78fc:	15 1e       	adc	r1, r21
		movw XL,r0
    78fe:	d0 01       	movw	r26, r0


		;compute second tile adress
	    ld r18,Y     	;load next tile # from VRAM
    7900:	28 81       	ld	r18, Y
		subi YL,-8
    7902:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT
    7904:	2c 31       	cpi	r18, 0x1C	; 28
		in r7,_SFR_IO_ADDR(SREG)	;save the carry flag for later
    7906:	7f b6       	in	r7, 0x3f	; 63
		bst r7,SREG_C
    7908:	70 fa       	bst	r7, 0
		mul r18,r19 	;tile*width*height
    790a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    790c:	a1 01       	movw	r20, r2
		brtc .+2
    790e:	0e f4       	brtc	.+2      	; 0x7912 <render_tile_line+0x7a>
		movw r20,r4		;ram tiles
    7910:	a2 01       	movw	r20, r4
	    add r0,r20      ;add title table address +row offset
    7912:	04 0e       	add	r0, r20
	    adc r1,r21
    7914:	15 1e       	adc	r1, r21
		movw ZL,r0
    7916:	f0 01       	movw	r30, r0
		movw r6,ZL		;push Z
    7918:	3f 01       	movw	r6, r30

0000791a <do_fine_scroll>:


	do_fine_scroll:
		;output 1st tile with fine scroll offset 
		clr r0
    791a:	00 24       	eor	r0, r0
		add XL,r22	;add fine offset
    791c:	a6 0f       	add	r26, r22
		adc XH,r0
    791e:	b0 1d       	adc	r27, r0

		;compute jump offset
		ldi r23,3
    7920:	73 e0       	ldi	r23, 0x03	; 3
		mul r22,r23 ;3 instructions
    7922:	67 9f       	mul	r22, r23
	
		sbrs r16,SREG_C
    7924:	00 ff       	sbrs	r16, 0
		rjmp rom_fine_scroll
    7926:	22 c0       	rjmp	.+68     	; 0x796c <rom_fine_scroll>

00007928 <ram_fine_scroll>:

	/***FINE SCROLL RAM LOOP***/
	ram_fine_scroll:
		rjmp .
    7928:	00 c0       	rjmp	.+0      	; 0x792a <ram_fine_scroll+0x2>
		ldi r22,lo8(pm(ram_fine_scroll_loop))
    792a:	6c e9       	ldi	r22, 0x9C	; 156
		ldi r23,hi8(pm(ram_fine_scroll_loop))
    792c:	7c e3       	ldi	r23, 0x3C	; 60
		add r22,r0
    792e:	60 0d       	add	r22, r0
		adc r23,r1
    7930:	71 1d       	adc	r23, r1
		push r22
    7932:	6f 93       	push	r22
		push r23	
    7934:	7f 93       	push	r23
		ret ;jump into ram_fine_scroll_loop
    7936:	08 95       	ret

00007938 <ram_fine_scroll_loop>:
	ram_fine_scroll_loop:
		.rept 8
			ld r16,X+
			lpm
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr
    7938:	0d 91       	ld	r16, X+
    793a:	c8 95       	lpm
    793c:	08 b9       	out	0x08, r16	; 8
    793e:	0d 91       	ld	r16, X+
    7940:	c8 95       	lpm
    7942:	08 b9       	out	0x08, r16	; 8
    7944:	0d 91       	ld	r16, X+
    7946:	c8 95       	lpm
    7948:	08 b9       	out	0x08, r16	; 8
    794a:	0d 91       	ld	r16, X+
    794c:	c8 95       	lpm
    794e:	08 b9       	out	0x08, r16	; 8
    7950:	0d 91       	ld	r16, X+
    7952:	c8 95       	lpm
    7954:	08 b9       	out	0x08, r16	; 8
    7956:	0d 91       	ld	r16, X+
    7958:	c8 95       	lpm
    795a:	08 b9       	out	0x08, r16	; 8
    795c:	0d 91       	ld	r16, X+
    795e:	c8 95       	lpm
    7960:	08 b9       	out	0x08, r16	; 8
    7962:	0d 91       	ld	r16, X+
    7964:	c8 95       	lpm
    7966:	08 b9       	out	0x08, r16	; 8

		;branch to tile #2
		brtc romloop
    7968:	1e f5       	brtc	.+70     	; 0x79b0 <romloop>
		rjmp ramloop
    796a:	40 c0       	rjmp	.+128    	; 0x79ec <ramloop>

0000796c <rom_fine_scroll>:

	/***FINE SCROLL ROM LOOP***/
	rom_fine_scroll:
		movw ZL,XL
    796c:	fd 01       	movw	r30, r26
		ldi r22,lo8(pm(rom_fine_scroll_loop))	
    796e:	6e eb       	ldi	r22, 0xBE	; 190
		ldi r23,hi8(pm(rom_fine_scroll_loop))
    7970:	7c e3       	ldi	r23, 0x3C	; 60
		add r22,r0
    7972:	60 0d       	add	r22, r0
		adc r23,r1
    7974:	71 1d       	adc	r23, r1
		push r22
    7976:	6f 93       	push	r22
		push r23	
    7978:	7f 93       	push	r23
		ret
    797a:	08 95       	ret

0000797c <rom_fine_scroll_loop>:
	rom_fine_scroll_loop:
		.rept 8
			lpm r16,Z+
			rjmp .
			out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		.endr 
    797c:	05 91       	lpm	r16, Z+
    797e:	00 c0       	rjmp	.+0      	; 0x7980 <rom_fine_scroll_loop+0x4>
    7980:	08 b9       	out	0x08, r16	; 8
    7982:	05 91       	lpm	r16, Z+
    7984:	00 c0       	rjmp	.+0      	; 0x7986 <rom_fine_scroll_loop+0xa>
    7986:	08 b9       	out	0x08, r16	; 8
    7988:	05 91       	lpm	r16, Z+
    798a:	00 c0       	rjmp	.+0      	; 0x798c <rom_fine_scroll_loop+0x10>
    798c:	08 b9       	out	0x08, r16	; 8
    798e:	05 91       	lpm	r16, Z+
    7990:	00 c0       	rjmp	.+0      	; 0x7992 <rom_fine_scroll_loop+0x16>
    7992:	08 b9       	out	0x08, r16	; 8
    7994:	05 91       	lpm	r16, Z+
    7996:	00 c0       	rjmp	.+0      	; 0x7998 <rom_fine_scroll_loop+0x1c>
    7998:	08 b9       	out	0x08, r16	; 8
    799a:	05 91       	lpm	r16, Z+
    799c:	00 c0       	rjmp	.+0      	; 0x799e <rom_fine_scroll_loop+0x22>
    799e:	08 b9       	out	0x08, r16	; 8
    79a0:	05 91       	lpm	r16, Z+
    79a2:	00 c0       	rjmp	.+0      	; 0x79a4 <rom_fine_scroll_loop+0x28>
    79a4:	08 b9       	out	0x08, r16	; 8
    79a6:	05 91       	lpm	r16, Z+
    79a8:	00 c0       	rjmp	.+0      	; 0x79aa <rom_fine_scroll_loop+0x2e>
    79aa:	08 b9       	out	0x08, r16	; 8
	
		movw ZL,r6		;restore Z for tile #2
    79ac:	f3 01       	movw	r30, r6

		;branch to tile #2
		brts ramloop
    79ae:	f6 f0       	brts	.+60     	; 0x79ec <ramloop>

000079b0 <romloop>:

	
	romloop:
	    lpm r16,Z+
    79b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    79b2:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    79b4:	28 81       	ld	r18, Y

	    lpm r16,Z+
    79b6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    79b8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    79ba:	23 9f       	mul	r18, r19

	    lpm r16,Z+
    79bc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    79be:	08 b9       	out	0x08, r16	; 8
		subi YL,-8
    79c0:	c8 5f       	subi	r28, 0xF8	; 248
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    79c2:	2c 31       	cpi	r18, 0x1C	; 28
		
	    lpm r16,Z+
    79c4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    79c6:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip if next tile is in ROM	
    79c8:	08 f4       	brcc	.+2      	; 0x79cc <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    79ca:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    79cc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    79ce:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add tile table address +row offset lsb
    79d0:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    79d2:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    79d4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    79d6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT	
    79d8:	2c 31       	cpi	r18, 0x1C	; 28
		dec r17			;decrement tiles to draw on line (does not affect carry)
    79da:	1a 95       	dec	r17
   
	    lpm r16,Z+
    79dc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    79de:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    79e0:	05 91       	lpm	r16, Z+

		breq end	
    79e2:	39 f1       	breq	.+78     	; 0x7a32 <end>
	    movw ZL,r0   	;copy next tile adress
    79e4:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    79e6:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    79e8:	18 f7       	brcc	.-58     	; 0x79b0 <romloop>
	
		rjmp .
    79ea:	00 c0       	rjmp	.+0      	; 0x79ec <ramloop>

000079ec <ramloop>:

	ramloop:

	    ld r16,Z+
    79ec:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    79ee:	08 b9       	out	0x08, r16	; 8
	    ld r18,Y     ;load next tile # from VRAM
    79f0:	28 81       	ld	r18, Y

	    ld r16,Z+ 
    79f2:	01 91       	ld	r16, Z+
		subi YL,-8   		
    79f4:	c8 5f       	subi	r28, 0xF8	; 248
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    79f6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    79f8:	23 9f       	mul	r18, r19

	    ld r16,Z+
    79fa:	01 91       	ld	r16, Z+
		nop
    79fc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    79fe:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7a00:	2c 31       	cpi	r18, 0x1C	; 28
		rjmp .
    7a02:	00 c0       	rjmp	.+0      	; 0x7a04 <ramloop+0x18>
   
	    ld r16,Z+
    7a04:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7a06:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7a08:	08 f0       	brcs	.+2      	; 0x7a0c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7a0a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7a0c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7a0e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7a10:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7a12:	15 1e       	adc	r1, r21
		rjmp .
    7a14:	00 c0       	rjmp	.+0      	; 0x7a16 <ramloop+0x2a>
    
		ld r16,Z+		
    7a16:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7a18:	08 b9       	out	0x08, r16	; 8
		ld r7,Z+
    7a1a:	71 90       	ld	r7, Z+
	    ld r16,Z+	
    7a1c:	01 91       	ld	r16, Z+
	
		movw ZL,r0
    7a1e:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7a20:	78 b8       	out	0x08, r7	; 8
		nop
    7a22:	00 00       	nop
		cpi r18,RAM_TILES_COUNT	
    7a24:	2c 31       	cpi	r18, 0x1C	; 28
	    dec r17
    7a26:	1a 95       	dec	r17
	    breq end
    7a28:	21 f0       	breq	.+8      	; 0x7a32 <end>
	
		nop
    7a2a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7a2c:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7a2e:	00 f6       	brcc	.-128    	; 0x79b0 <romloop>
		rjmp ramloop
    7a30:	dd cf       	rjmp	.-70     	; 0x79ec <ramloop>

00007a32 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7a32:	08 b9       	out	0x08, r16	; 8
		brid end_fine_scroll				;hack: interrupt flag=0 => no fine offset pixel to draw
    7a34:	27 f5       	brid	.+72     	; 0x7a7e <end_fine_scroll>
		brcc end_rom_fine_scroll_loop
    7a36:	30 f4       	brcc	.+12     	; 0x7a44 <end_rom_fine_scroll_loop>

	/***END RAM LOOP***/
		movw ZL,r0
    7a38:	f0 01       	movw	r30, r0

00007a3a <end_ram_fine_scroll_loop>:
	end_ram_fine_scroll_loop:
		ld r16,Z+
    7a3a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7a3c:	08 b9       	out	0x08, r16	; 8
		dec r14
    7a3e:	ea 94       	dec	r14
		brne end_ram_fine_scroll_loop
    7a40:	e1 f7       	brne	.-8      	; 0x7a3a <end_ram_fine_scroll_loop>
		rjmp end_fine_scroll_ram
    7a42:	1f c0       	rjmp	.+62     	; 0x7a82 <end_fine_scroll_ram>

00007a44 <end_rom_fine_scroll_loop>:

	/***END ROM LOOP***/
	end_rom_fine_scroll_loop:
		movw ZL,r12
    7a44:	f6 01       	movw	r30, r12
		nop
    7a46:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7a48:	98 b8       	out	0x08, r9	; 8
		dec r14
    7a4a:	ea 94       	dec	r14
		breq end_fine_scroll_rom
    7a4c:	c9 f0       	breq	.+50     	; 0x7a80 <end_fine_scroll_rom>
	.rept 6
		lpm r16,Z+		
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
		dec r14
		breq end_fine_scroll_rom
	.endr
    7a4e:	05 91       	lpm	r16, Z+
    7a50:	08 b9       	out	0x08, r16	; 8
    7a52:	ea 94       	dec	r14
    7a54:	a9 f0       	breq	.+42     	; 0x7a80 <end_fine_scroll_rom>
    7a56:	05 91       	lpm	r16, Z+
    7a58:	08 b9       	out	0x08, r16	; 8
    7a5a:	ea 94       	dec	r14
    7a5c:	89 f0       	breq	.+34     	; 0x7a80 <end_fine_scroll_rom>
    7a5e:	05 91       	lpm	r16, Z+
    7a60:	08 b9       	out	0x08, r16	; 8
    7a62:	ea 94       	dec	r14
    7a64:	69 f0       	breq	.+26     	; 0x7a80 <end_fine_scroll_rom>
    7a66:	05 91       	lpm	r16, Z+
    7a68:	08 b9       	out	0x08, r16	; 8
    7a6a:	ea 94       	dec	r14
    7a6c:	49 f0       	breq	.+18     	; 0x7a80 <end_fine_scroll_rom>
    7a6e:	05 91       	lpm	r16, Z+
    7a70:	08 b9       	out	0x08, r16	; 8
    7a72:	ea 94       	dec	r14
    7a74:	29 f0       	breq	.+10     	; 0x7a80 <end_fine_scroll_rom>
    7a76:	05 91       	lpm	r16, Z+
    7a78:	08 b9       	out	0x08, r16	; 8
    7a7a:	ea 94       	dec	r14
    7a7c:	09 f0       	breq	.+2      	; 0x7a80 <end_fine_scroll_rom>

00007a7e <end_fine_scroll>:
	...

00007a80 <end_fine_scroll_rom>:
	...

00007a82 <end_fine_scroll_ram>:
	end_fine_scroll:	
		nop
	end_fine_scroll_rom:
		nop
	end_fine_scroll_ram:
		clr r16	
    7a82:	00 27       	eor	r16, r16
		out _SFR_IO_ADDR(DATA_PORT),r16   
    7a84:	08 b9       	out	0x08, r16	; 8

		pop r6
    7a86:	6f 90       	pop	r6
		pop r7
    7a88:	7f 90       	pop	r7
		pop r9
    7a8a:	9f 90       	pop	r9
		pop r12
    7a8c:	cf 90       	pop	r12
		pop r13
    7a8e:	df 90       	pop	r13
		pop r19
    7a90:	3f 91       	pop	r19
		pop r22
    7a92:	6f 91       	pop	r22
		pop r23
    7a94:	7f 91       	pop	r23
		pop YH
    7a96:	df 91       	pop	r29
		pop YL
    7a98:	cf 91       	pop	r28

		ret
    7a9a:	08 95       	ret

00007a9c <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7a9c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7a9e:	e0 91 ac 0c 	lds	r30, 0x0CAC
	lds ZH,tile_table_hi
    7aa2:	f0 91 ad 0c 	lds	r31, 0x0CAD
	mul r24,r18
    7aa6:	82 9f       	mul	r24, r18
	add ZL,r0
    7aa8:	e0 0d       	add	r30, r0
	adc ZH,r1
    7aaa:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7aac:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7aae:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7ab0:	62 9f       	mul	r22, r18
	add XL,r0
    7ab2:	a0 0d       	add	r26, r0
	adc XH,r1
    7ab4:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    7ab6:	15 90       	lpm	r1, Z+
    7ab8:	1d 92       	st	X+, r1
    7aba:	15 90       	lpm	r1, Z+
    7abc:	1d 92       	st	X+, r1
    7abe:	15 90       	lpm	r1, Z+
    7ac0:	1d 92       	st	X+, r1
    7ac2:	15 90       	lpm	r1, Z+
    7ac4:	1d 92       	st	X+, r1
    7ac6:	15 90       	lpm	r1, Z+
    7ac8:	1d 92       	st	X+, r1
    7aca:	15 90       	lpm	r1, Z+
    7acc:	1d 92       	st	X+, r1
    7ace:	15 90       	lpm	r1, Z+
    7ad0:	1d 92       	st	X+, r1
    7ad2:	15 90       	lpm	r1, Z+
    7ad4:	1d 92       	st	X+, r1
    7ad6:	15 90       	lpm	r1, Z+
    7ad8:	1d 92       	st	X+, r1
    7ada:	15 90       	lpm	r1, Z+
    7adc:	1d 92       	st	X+, r1
    7ade:	15 90       	lpm	r1, Z+
    7ae0:	1d 92       	st	X+, r1
    7ae2:	15 90       	lpm	r1, Z+
    7ae4:	1d 92       	st	X+, r1
    7ae6:	15 90       	lpm	r1, Z+
    7ae8:	1d 92       	st	X+, r1
    7aea:	15 90       	lpm	r1, Z+
    7aec:	1d 92       	st	X+, r1
    7aee:	15 90       	lpm	r1, Z+
    7af0:	1d 92       	st	X+, r1
    7af2:	15 90       	lpm	r1, Z+
    7af4:	1d 92       	st	X+, r1
    7af6:	15 90       	lpm	r1, Z+
    7af8:	1d 92       	st	X+, r1
    7afa:	15 90       	lpm	r1, Z+
    7afc:	1d 92       	st	X+, r1
    7afe:	15 90       	lpm	r1, Z+
    7b00:	1d 92       	st	X+, r1
    7b02:	15 90       	lpm	r1, Z+
    7b04:	1d 92       	st	X+, r1
    7b06:	15 90       	lpm	r1, Z+
    7b08:	1d 92       	st	X+, r1
    7b0a:	15 90       	lpm	r1, Z+
    7b0c:	1d 92       	st	X+, r1
    7b0e:	15 90       	lpm	r1, Z+
    7b10:	1d 92       	st	X+, r1
    7b12:	15 90       	lpm	r1, Z+
    7b14:	1d 92       	st	X+, r1
    7b16:	15 90       	lpm	r1, Z+
    7b18:	1d 92       	st	X+, r1
    7b1a:	15 90       	lpm	r1, Z+
    7b1c:	1d 92       	st	X+, r1
    7b1e:	15 90       	lpm	r1, Z+
    7b20:	1d 92       	st	X+, r1
    7b22:	15 90       	lpm	r1, Z+
    7b24:	1d 92       	st	X+, r1
    7b26:	15 90       	lpm	r1, Z+
    7b28:	1d 92       	st	X+, r1
    7b2a:	15 90       	lpm	r1, Z+
    7b2c:	1d 92       	st	X+, r1
    7b2e:	15 90       	lpm	r1, Z+
    7b30:	1d 92       	st	X+, r1
    7b32:	15 90       	lpm	r1, Z+
    7b34:	1d 92       	st	X+, r1
    7b36:	15 90       	lpm	r1, Z+
    7b38:	1d 92       	st	X+, r1
    7b3a:	15 90       	lpm	r1, Z+
    7b3c:	1d 92       	st	X+, r1
    7b3e:	15 90       	lpm	r1, Z+
    7b40:	1d 92       	st	X+, r1
    7b42:	15 90       	lpm	r1, Z+
    7b44:	1d 92       	st	X+, r1
    7b46:	15 90       	lpm	r1, Z+
    7b48:	1d 92       	st	X+, r1
    7b4a:	15 90       	lpm	r1, Z+
    7b4c:	1d 92       	st	X+, r1
    7b4e:	15 90       	lpm	r1, Z+
    7b50:	1d 92       	st	X+, r1
    7b52:	15 90       	lpm	r1, Z+
    7b54:	1d 92       	st	X+, r1
    7b56:	15 90       	lpm	r1, Z+
    7b58:	1d 92       	st	X+, r1
    7b5a:	15 90       	lpm	r1, Z+
    7b5c:	1d 92       	st	X+, r1
    7b5e:	15 90       	lpm	r1, Z+
    7b60:	1d 92       	st	X+, r1
    7b62:	15 90       	lpm	r1, Z+
    7b64:	1d 92       	st	X+, r1
    7b66:	15 90       	lpm	r1, Z+
    7b68:	1d 92       	st	X+, r1
    7b6a:	15 90       	lpm	r1, Z+
    7b6c:	1d 92       	st	X+, r1
    7b6e:	15 90       	lpm	r1, Z+
    7b70:	1d 92       	st	X+, r1
    7b72:	15 90       	lpm	r1, Z+
    7b74:	1d 92       	st	X+, r1
    7b76:	15 90       	lpm	r1, Z+
    7b78:	1d 92       	st	X+, r1
    7b7a:	15 90       	lpm	r1, Z+
    7b7c:	1d 92       	st	X+, r1
    7b7e:	15 90       	lpm	r1, Z+
    7b80:	1d 92       	st	X+, r1
    7b82:	15 90       	lpm	r1, Z+
    7b84:	1d 92       	st	X+, r1
    7b86:	15 90       	lpm	r1, Z+
    7b88:	1d 92       	st	X+, r1
    7b8a:	15 90       	lpm	r1, Z+
    7b8c:	1d 92       	st	X+, r1
    7b8e:	15 90       	lpm	r1, Z+
    7b90:	1d 92       	st	X+, r1
    7b92:	15 90       	lpm	r1, Z+
    7b94:	1d 92       	st	X+, r1
    7b96:	15 90       	lpm	r1, Z+
    7b98:	1d 92       	st	X+, r1
    7b9a:	15 90       	lpm	r1, Z+
    7b9c:	1d 92       	st	X+, r1
    7b9e:	15 90       	lpm	r1, Z+
    7ba0:	1d 92       	st	X+, r1
    7ba2:	15 90       	lpm	r1, Z+
    7ba4:	1d 92       	st	X+, r1
    7ba6:	15 90       	lpm	r1, Z+
    7ba8:	1d 92       	st	X+, r1
    7baa:	15 90       	lpm	r1, Z+
    7bac:	1d 92       	st	X+, r1
    7bae:	15 90       	lpm	r1, Z+
    7bb0:	1d 92       	st	X+, r1
    7bb2:	15 90       	lpm	r1, Z+
    7bb4:	1d 92       	st	X+, r1
	clr r1
    7bb6:	11 24       	eor	r1, r1
	ret
    7bb8:	08 95       	ret

00007bba <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7bba:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7bbc:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    7bbe:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    7bc0:	82 9f       	mul	r24, r18
	add ZL,r0
    7bc2:	e0 0d       	add	r30, r0
	adc ZH,r1
    7bc4:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7bc6:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7bc8:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    7bca:	62 9f       	mul	r22, r18
	add XL,r0
    7bcc:	a0 0d       	add	r26, r0
	adc XH,r1
    7bce:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7bd0:	11 90       	ld	r1, Z+
    7bd2:	1d 92       	st	X+, r1
    7bd4:	11 90       	ld	r1, Z+
    7bd6:	1d 92       	st	X+, r1
    7bd8:	11 90       	ld	r1, Z+
    7bda:	1d 92       	st	X+, r1
    7bdc:	11 90       	ld	r1, Z+
    7bde:	1d 92       	st	X+, r1
    7be0:	11 90       	ld	r1, Z+
    7be2:	1d 92       	st	X+, r1
    7be4:	11 90       	ld	r1, Z+
    7be6:	1d 92       	st	X+, r1
    7be8:	11 90       	ld	r1, Z+
    7bea:	1d 92       	st	X+, r1
    7bec:	11 90       	ld	r1, Z+
    7bee:	1d 92       	st	X+, r1
    7bf0:	11 90       	ld	r1, Z+
    7bf2:	1d 92       	st	X+, r1
    7bf4:	11 90       	ld	r1, Z+
    7bf6:	1d 92       	st	X+, r1
    7bf8:	11 90       	ld	r1, Z+
    7bfa:	1d 92       	st	X+, r1
    7bfc:	11 90       	ld	r1, Z+
    7bfe:	1d 92       	st	X+, r1
    7c00:	11 90       	ld	r1, Z+
    7c02:	1d 92       	st	X+, r1
    7c04:	11 90       	ld	r1, Z+
    7c06:	1d 92       	st	X+, r1
    7c08:	11 90       	ld	r1, Z+
    7c0a:	1d 92       	st	X+, r1
    7c0c:	11 90       	ld	r1, Z+
    7c0e:	1d 92       	st	X+, r1
    7c10:	11 90       	ld	r1, Z+
    7c12:	1d 92       	st	X+, r1
    7c14:	11 90       	ld	r1, Z+
    7c16:	1d 92       	st	X+, r1
    7c18:	11 90       	ld	r1, Z+
    7c1a:	1d 92       	st	X+, r1
    7c1c:	11 90       	ld	r1, Z+
    7c1e:	1d 92       	st	X+, r1
    7c20:	11 90       	ld	r1, Z+
    7c22:	1d 92       	st	X+, r1
    7c24:	11 90       	ld	r1, Z+
    7c26:	1d 92       	st	X+, r1
    7c28:	11 90       	ld	r1, Z+
    7c2a:	1d 92       	st	X+, r1
    7c2c:	11 90       	ld	r1, Z+
    7c2e:	1d 92       	st	X+, r1
    7c30:	11 90       	ld	r1, Z+
    7c32:	1d 92       	st	X+, r1
    7c34:	11 90       	ld	r1, Z+
    7c36:	1d 92       	st	X+, r1
    7c38:	11 90       	ld	r1, Z+
    7c3a:	1d 92       	st	X+, r1
    7c3c:	11 90       	ld	r1, Z+
    7c3e:	1d 92       	st	X+, r1
    7c40:	11 90       	ld	r1, Z+
    7c42:	1d 92       	st	X+, r1
    7c44:	11 90       	ld	r1, Z+
    7c46:	1d 92       	st	X+, r1
    7c48:	11 90       	ld	r1, Z+
    7c4a:	1d 92       	st	X+, r1
    7c4c:	11 90       	ld	r1, Z+
    7c4e:	1d 92       	st	X+, r1
    7c50:	11 90       	ld	r1, Z+
    7c52:	1d 92       	st	X+, r1
    7c54:	11 90       	ld	r1, Z+
    7c56:	1d 92       	st	X+, r1
    7c58:	11 90       	ld	r1, Z+
    7c5a:	1d 92       	st	X+, r1
    7c5c:	11 90       	ld	r1, Z+
    7c5e:	1d 92       	st	X+, r1
    7c60:	11 90       	ld	r1, Z+
    7c62:	1d 92       	st	X+, r1
    7c64:	11 90       	ld	r1, Z+
    7c66:	1d 92       	st	X+, r1
    7c68:	11 90       	ld	r1, Z+
    7c6a:	1d 92       	st	X+, r1
    7c6c:	11 90       	ld	r1, Z+
    7c6e:	1d 92       	st	X+, r1
    7c70:	11 90       	ld	r1, Z+
    7c72:	1d 92       	st	X+, r1
    7c74:	11 90       	ld	r1, Z+
    7c76:	1d 92       	st	X+, r1
    7c78:	11 90       	ld	r1, Z+
    7c7a:	1d 92       	st	X+, r1
    7c7c:	11 90       	ld	r1, Z+
    7c7e:	1d 92       	st	X+, r1
    7c80:	11 90       	ld	r1, Z+
    7c82:	1d 92       	st	X+, r1
    7c84:	11 90       	ld	r1, Z+
    7c86:	1d 92       	st	X+, r1
    7c88:	11 90       	ld	r1, Z+
    7c8a:	1d 92       	st	X+, r1
    7c8c:	11 90       	ld	r1, Z+
    7c8e:	1d 92       	st	X+, r1
    7c90:	11 90       	ld	r1, Z+
    7c92:	1d 92       	st	X+, r1
    7c94:	11 90       	ld	r1, Z+
    7c96:	1d 92       	st	X+, r1
    7c98:	11 90       	ld	r1, Z+
    7c9a:	1d 92       	st	X+, r1
    7c9c:	11 90       	ld	r1, Z+
    7c9e:	1d 92       	st	X+, r1
    7ca0:	11 90       	ld	r1, Z+
    7ca2:	1d 92       	st	X+, r1
    7ca4:	11 90       	ld	r1, Z+
    7ca6:	1d 92       	st	X+, r1
    7ca8:	11 90       	ld	r1, Z+
    7caa:	1d 92       	st	X+, r1
    7cac:	11 90       	ld	r1, Z+
    7cae:	1d 92       	st	X+, r1
    7cb0:	11 90       	ld	r1, Z+
    7cb2:	1d 92       	st	X+, r1
    7cb4:	11 90       	ld	r1, Z+
    7cb6:	1d 92       	st	X+, r1
    7cb8:	11 90       	ld	r1, Z+
    7cba:	1d 92       	st	X+, r1
    7cbc:	11 90       	ld	r1, Z+
    7cbe:	1d 92       	st	X+, r1
    7cc0:	11 90       	ld	r1, Z+
    7cc2:	1d 92       	st	X+, r1
    7cc4:	11 90       	ld	r1, Z+
    7cc6:	1d 92       	st	X+, r1
    7cc8:	11 90       	ld	r1, Z+
    7cca:	1d 92       	st	X+, r1
    7ccc:	11 90       	ld	r1, Z+
    7cce:	1d 92       	st	X+, r1
	clr r1
    7cd0:	11 24       	eor	r1, r1
	ret
    7cd2:	08 95       	ret

00007cd4 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7cd4:	0f 93       	push	r16
	push r17
    7cd6:	1f 93       	push	r17
	push YL
    7cd8:	cf 93       	push	r28
	push YH
    7cda:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7cdc:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7cde:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7ce0:	e0 e1       	ldi	r30, 0x10	; 16
	ldi ZH,hi8(sprites)	
    7ce2:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    7ce4:	e0 0d       	add	r30, r0
	adc ZH,r1
    7ce6:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7ce8:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7cea:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7cec:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7cee:	8e 9f       	mul	r24, r30
	movw r26,r0
    7cf0:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7cf2:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7cf4:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7cf6:	c4 ea       	ldi	r28, 0xA4	; 164
	ldi YH,hi8(sprites_tile_banks)	
    7cf8:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    7cfa:	00 24       	eor	r0, r0
	add YL,r1
    7cfc:	c1 0d       	add	r28, r1
	adc YH,r0		
    7cfe:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7d00:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7d02:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7d04:	ea 0f       	add	r30, r26
	adc ZH,r27
    7d06:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7d08:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    7d0a:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7d0c:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7d0e:	69 9f       	mul	r22, r25
	add XL,r0
    7d10:	a0 0d       	add	r26, r0
	adc XH,r1
    7d12:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7d14:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7d16:	dd 27       	eor	r29, r29

	cpi r20,0	
    7d18:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7d1a:	51 f4       	brne	.+20     	; 0x7d30 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7d1c:	a2 0f       	add	r26, r18
	adc XH,r1
    7d1e:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7d20:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7d22:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7d24:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7d26:	11 c0       	rjmp	.+34     	; 0x7d4a <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7d28:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7d2a:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7d2c:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7d2e:	0d c0       	rjmp	.+26     	; 0x7d4a <x_check_end>

00007d30 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7d30:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7d32:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7d34:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7d36:	04 c0       	rjmp	.+8      	; 0x7d40 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7d38:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7d3a:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7d3c:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7d3e:	05 c0       	rjmp	.+10     	; 0x7d4a <x_check_end>

00007d40 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7d40:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7d42:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7d44:	e2 0f       	add	r30, r18
	adc ZH,r1
    7d46:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7d48:	31 97       	sbiw	r30, 0x01	; 1

00007d4a <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7d4a:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7d4c:	51 f4       	brne	.+20     	; 0x7d62 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7d4e:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7d50:	93 9f       	mul	r25, r19
	add XL,r0
    7d52:	a0 0d       	add	r26, r0
	adc XH,r1
    7d54:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7d56:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    7d58:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    7d5a:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    7d5c:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    7d5e:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    7d60:	0a c0       	rjmp	.+20     	; 0x7d76 <y_check_end>

00007d62 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7d62:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7d64:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7d66:	63 2f       	mov	r22, r19
	dec r22
    7d68:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7d6a:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7d6c:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7d6e:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7d70:	56 9f       	mul	r21, r22
	add ZL,r0
    7d72:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7d74:	f1 1d       	adc	r31, r1

00007d76 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7d76:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7d78:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7d7a:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7d7c:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7d7e:	00 ff       	sbrs	r16, 0
	clr r23
    7d80:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7d82:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7d84:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7d86:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7d88:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7d8a:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7d8c:	59 1b       	sub	r21, r25

00007d8e <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7d8e:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7d90:	48 1b       	sub	r20, r24

00007d92 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7d92:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7d94:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7d96:	2c 93       	st	X, r18
	adiw XL,1
    7d98:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7d9a:	e6 0f       	add	r30, r22
	adc ZH,r23
    7d9c:	f7 1f       	adc	r31, r23
	dec r20
    7d9e:	4a 95       	dec	r20
	brne x_loop
    7da0:	c1 f7       	brne	.-16     	; 0x7d92 <x_loop>

	add ZL,YL		;src+=srcXdiff
    7da2:	ec 0f       	add	r30, r28
	adc ZH,YH
    7da4:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7da6:	a8 0f       	add	r26, r24
	adc XH,r1
    7da8:	b1 1d       	adc	r27, r1
	dec r21
    7daa:	5a 95       	dec	r21
	brne y_loop
    7dac:	81 f7       	brne	.-32     	; 0x7d8e <y_loop>


	pop YH
    7dae:	df 91       	pop	r29
	pop YL
    7db0:	cf 91       	pop	r28
	pop r17
    7db2:	1f 91       	pop	r17
	pop r16
    7db4:	0f 91       	pop	r16
	ret
    7db6:	08 95       	ret

00007db8 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7db8:	0f 92       	push	r0
	push r1
    7dba:	1f 92       	push	r1
	push ZL;2
    7dbc:	ef 93       	push	r30
	push ZH;2
    7dbe:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7dc0:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7dc2:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7dc4:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7dc8:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7dca:	f1 e0       	ldi	r31, 0x01	; 1

00007dcc <latency_loop>:
latency_loop:
	cp ZL,ZH
    7dcc:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7dce:	00 f0       	brcs	.+0      	; 0x7dd0 <latency_loop+0x4>
	inc ZH
    7dd0:	f3 95       	inc	r31
	cpi ZH,10
    7dd2:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7dd4:	d8 f3       	brcs	.-10     	; 0x7dcc <latency_loop>
	jmp .
    7dd6:	0c 94 ed 3e 	jmp	0x7dda	; 0x7dda <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    7dda:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7dde:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7de0:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    7de4:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    7de8:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7dea:	57 c0       	rjmp	.+174    	; 0x7e9a <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7dec:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7dee:	98 f0       	brcs	.+38     	; 0x7e16 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7df0:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7df2:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7df6:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7df8:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7dfc:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7dfe:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7e00:	26 f4       	brtc	.+8      	; 0x7e0a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7e02:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7e04:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <update_sound>
	rjmp sync_end
    7e08:	b7 c0       	rjmp	.+366    	; 0x7f78 <sync_end>

00007e0a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7e0a:	e5 e1       	ldi	r30, 0x15	; 21
    7e0c:	ea 95       	dec	r30
    7e0e:	f1 f7       	brne	.-4      	; 0x7e0c <sync_pre_eq_no_sound_update+0x2>
    7e10:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7e12:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7e14:	b1 c0       	rjmp	.+354    	; 0x7f78 <sync_end>

00007e16 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7e16:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7e18:	38 f1       	brcs	.+78     	; 0x7e68 <sync_post_eq>

	rjmp .
    7e1a:	00 c0       	rjmp	.+0      	; 0x7e1c <sync_eq+0x6>
	rjmp .
    7e1c:	00 c0       	rjmp	.+0      	; 0x7e1e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7e1e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7e20:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7e22:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7e24:	16 f4       	brtc	.+4      	; 0x7e2a <sync_eq_skip>
	
	call update_sound
    7e26:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <update_sound>

00007e2a <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7e2a:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7e2c:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7e30:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7e32:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7e36:	a0 c0       	rjmp	.+320    	; 0x7f78 <sync_end>

00007e38 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7e38:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7e3a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7e3c:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7e3e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7e42:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7e44:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7e46:	00 f0       	brcs	.+0      	; 0x7e48 <__vector_14+0x10>

	cpi ZL,2
    7e48:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7e4a:	00 f0       	brcs	.+0      	; 0x7e4c <__vector_14+0x14>

	cpi ZL,3
    7e4c:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7e4e:	00 f0       	brcs	.+0      	; 0x7e50 <__vector_14+0x18>

	cpi ZL,4
    7e50:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7e52:	00 f0       	brcs	.+0      	; 0x7e54 <__vector_14+0x1c>

	cpi ZL,5
    7e54:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7e56:	00 f0       	brcs	.+0      	; 0x7e58 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7e58:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7e5a:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7e5c:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7e60:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7e62:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7e64:	ef 91       	pop	r30
	reti
    7e66:	18 95       	reti

00007e68 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7e68:	00 c0       	rjmp	.+0      	; 0x7e6a <sync_post_eq+0x2>

	bst ZL,0
    7e6a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7e6c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7e6e:	26 f4       	brtc	.+8      	; 0x7e78 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7e70:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7e72:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <update_sound>
	rjmp sync_pre_eq_cont
    7e76:	05 c0       	rjmp	.+10     	; 0x7e82 <sync_pre_eq_cont>

00007e78 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7e78:	e5 e1       	ldi	r30, 0x15	; 21
    7e7a:	ea 95       	dec	r30
    7e7c:	f1 f7       	brne	.-4      	; 0x7e7a <sync_post_eq_no_sound_update+0x2>
    7e7e:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7e80:	28 9a       	sbi	0x05, 0	; 5

00007e82 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7e82:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7e86:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7e88:	09 f0       	breq	.+2      	; 0x7e8c <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7e8a:	76 c0       	rjmp	.+236    	; 0x7f78 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7e8c:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7e8e:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    7e92:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7e94:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    7e98:	6f c0       	rjmp	.+222    	; 0x7f78 <sync_end>

00007e9a <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7e9a:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7e9c:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7ea0:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7ea2:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7ea6:	00 c0       	rjmp	.+0      	; 0x7ea8 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7ea8:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7eaa:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7eac:	00 c0       	rjmp	.+0      	; 0x7eae <sync_hsync+0x14>
	call update_sound
    7eae:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7eb2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7eb4:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7eb8:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7eba:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    7ebe:	ef 17       	cp	r30, r31
	brsh no_render
    7ec0:	d0 f4       	brcc	.+52     	; 0x7ef6 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7ec2:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7ec4:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    7ec8:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7eca:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    7ece:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7ed0:	ef 17       	cp	r30, r31
	brlo no_render
    7ed2:	88 f0       	brcs	.+34     	; 0x7ef6 <no_render>

	;push r1-r29
	ldi ZL,29
    7ed4:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7ed6:	ff 27       	eor	r31, r31

00007ed8 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7ed8:	00 80       	ld	r0, Z
	push r0
    7eda:	0f 92       	push	r0
	dec ZL
    7edc:	ea 95       	dec	r30
	brne push_loop	
    7ede:	e1 f7       	brne	.-8      	; 0x7ed8 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7ee0:	06 e0       	ldi	r16, 0x06	; 6
    7ee2:	0a 95       	dec	r16
    7ee4:	f1 f7       	brne	.-4      	; 0x7ee2 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7ee6:	0e 94 9a 3b 	call	0x7734	; 0x7734 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7eea:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7eec:	ff 27       	eor	r31, r31

00007eee <pop_loop>:
pop_loop:
	pop r0
    7eee:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7ef0:	01 92       	st	Z+, r0
	cpi ZL,30
    7ef2:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7ef4:	e0 f3       	brcs	.-8      	; 0x7eee <pop_loop>

00007ef6 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7ef6:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    7efa:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7efc:	09 f0       	breq	.+2      	; 0x7f00 <no_render+0xa>
	rjmp sync_end
    7efe:	3c c0       	rjmp	.+120    	; 0x7f78 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7f00:	2f 93       	push	r18
	push r19
    7f02:	3f 93       	push	r19
	push r20
    7f04:	4f 93       	push	r20
	push r21
    7f06:	5f 93       	push	r21
	push r22
    7f08:	6f 93       	push	r22
	push r23
    7f0a:	7f 93       	push	r23
	push r24
    7f0c:	8f 93       	push	r24
	push r25
    7f0e:	9f 93       	push	r25
	push r26
    7f10:	af 93       	push	r26
	push r27
    7f12:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7f14:	78 94       	sei
	clr r1
    7f16:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7f18:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7f1a:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7f1e:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7f20:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7f24:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    7f28:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    7f2c:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7f2e:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    7f32:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7f36:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    7f3a:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    7f3e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7f40:	f1 05       	cpc	r31, r1
	breq .+2 
    7f42:	09 f0       	breq	.+2      	; 0x7f46 <no_render+0x50>
	icall
    7f44:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7f46:	0e 94 73 41 	call	0x82e6	; 0x82e6 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7f4a:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7f4e:	0e 94 ce 3f 	call	0x7f9c	; 0x7f9c <process_music>
	clr r1
    7f52:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7f54:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    7f58:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7f5c:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7f5e:	f1 05       	cpc	r31, r1
	breq .+2 
    7f60:	09 f0       	breq	.+2      	; 0x7f64 <no_render+0x6e>
	icall
    7f62:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7f64:	bf 91       	pop	r27
	pop r26
    7f66:	af 91       	pop	r26
	pop r25
    7f68:	9f 91       	pop	r25
	pop r24
    7f6a:	8f 91       	pop	r24
	pop r23
    7f6c:	7f 91       	pop	r23
	pop r22
    7f6e:	6f 91       	pop	r22
	pop r21
    7f70:	5f 91       	pop	r21
	pop r20
    7f72:	4f 91       	pop	r20
	pop r19
    7f74:	3f 91       	pop	r19
	pop r18
    7f76:	2f 91       	pop	r18

00007f78 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7f78:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7f7a:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7f7c:	ff 91       	pop	r31
	pop ZL
    7f7e:	ef 91       	pop	r30
	pop r1
    7f80:	1f 90       	pop	r1
	pop r0
    7f82:	0f 90       	pop	r0
	reti
    7f84:	18 95       	reti

00007f86 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f86:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7f88:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7f8a:	00 c0       	rjmp	.+0      	; 0x7f8c <hsync_pulse+0x6>
	call update_sound
    7f8c:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <update_sound>

	lds ZL,sync_pulse
    7f90:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    7f94:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7f96:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    7f9a:	08 95       	ret

00007f9c <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7f9c:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    7fa0:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7fa2:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <ProcessMusic>
#endif

	ret
    7fa6:	08 95       	ret

00007fa8 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7fa8:	0f 93       	push	r16
	push r17
    7faa:	1f 93       	push	r17
	push r18
    7fac:	2f 93       	push	r18
	push r28
    7fae:	cf 93       	push	r28
	push r29
    7fb0:	df 93       	push	r29

	mov r18,ZL
    7fb2:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7fb4:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    7fb8:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    7fbc:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7fbe:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    7fc2:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    7fc6:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    7fca:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7fcc:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7fce:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    7fd2:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    7fd6:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    7fda:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7fdc:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7fde:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7fe0:	d0 2d       	mov	r29, r0
	nop
    7fe2:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7fe4:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    7fe8:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    7fec:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7fee:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    7ff2:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    7ff6:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    7ffa:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7ffc:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7ffe:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    8002:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    8006:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    800a:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    800c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    800e:	20 ff       	sbrs	r18, 0
	rjmp .
    8010:	00 c0       	rjmp	.+0      	; 0x8012 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8012:	01 03       	mulsu	r16, r17
	clr r0
    8014:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8016:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8018:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    801a:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    801c:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    8020:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    8024:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8026:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    802a:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    802e:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    8032:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8034:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8036:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    803a:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    803e:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    8042:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8044:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8046:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8048:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    804a:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    804e:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    8052:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    8056:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8058:	92 f4       	brpl	.+36     	; 0x807e <ch4_no_shift>

	lds ZH,tr4_params
    805a:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    805e:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8060:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    8062:	00 2e       	mov	r0, r16
	lsr r0
    8064:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8066:	00 26       	eor	r0, r16
	bst r0,0
    8068:	00 fa       	bst	r0, 0
	lsr r17
    806a:	16 95       	lsr	r17
	ror r16
    806c:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    806e:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8070:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8072:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8074:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    8078:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    807c:	03 c0       	rjmp	.+6      	; 0x8084 <ch4_end>

0000807e <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    807e:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8080:	1a 95       	dec	r17
	brne .-4
    8082:	f1 f7       	brne	.-4      	; 0x8080 <ch4_no_shift+0x2>

00008084 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8084:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    8088:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    808a:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    808c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    808e:	21 ff       	sbrs	r18, 1
	rjmp .
    8090:	00 c0       	rjmp	.+0      	; 0x8092 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8092:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8094:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8096:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    809a:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    809c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    809e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    80a0:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    80a2:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    80a6:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    80aa:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    80ac:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    80b0:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    80b4:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    80b8:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    80ba:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    80be:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    80c0:	f0 1f       	adc	r31, r16

	movw r16,ZL
    80c2:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    80c4:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    80c8:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    80cc:	00 19       	sub	r16, r0
	sbc r17,r1
    80ce:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    80d0:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    80d4:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    80d8:	e0 15       	cp	r30, r0
	cpc ZH,r1
    80da:	f1 05       	cpc	r31, r1
	brlo .+2
    80dc:	08 f0       	brcs	.+2      	; 0x80e0 <ch4_end+0x5c>
	movw ZL,r16
    80de:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    80e0:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    80e4:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    80e8:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    80ea:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    80ee:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    80f0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    80f2:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    80f4:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    80f6:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    80f8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    80fa:	d0 05       	cpc	r29, r0
	brlt .+2
    80fc:	0c f0       	brlt	.+2      	; 0x8100 <ch4_end+0x7c>
	ldi r28,127
    80fe:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8100:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8102:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8104:	d0 05       	cpc	r29, r0
	brge .+2
    8106:	0c f4       	brge	.+2      	; 0x810a <ch4_end+0x86>
	ldi r28,-128
    8108:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    810a:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    810c:	c0 93 b3 00 	sts	0x00B3, r28

00008110 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    8110:	df 91       	pop	r29
	pop r28
    8112:	cf 91       	pop	r28
	pop r18
    8114:	2f 91       	pop	r18
	pop r17
    8116:	1f 91       	pop	r17
	pop r16
    8118:	0f 91       	pop	r16
	
	ret
    811a:	08 95       	ret

0000811c <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    811c:	80 93 a4 0c 	sts	0x0CA4, r24
	sts sprites_tile_banks+1,r25
    8120:	90 93 a5 0c 	sts	0x0CA5, r25
	ret
    8124:	08 95       	ret

00008126 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8126:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8128:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    812a:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    812c:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    812e:	6c e1       	ldi	r22, 0x1C	; 28

00008130 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8130:	6d 93       	st	X+, r22
	sbiw r30,1
    8132:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8134:	e9 f7       	brne	.-6      	; 0x8130 <fill_vram_loop>

	clr r1
    8136:	11 24       	eor	r1, r1

	ret
    8138:	08 95       	ret

0000813a <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    813a:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    813c:	76 2f       	mov	r23, r22
	lsr r22
    813e:	66 95       	lsr	r22
	lsr r22
    8140:	66 95       	lsr	r22
	lsr r22			;y>>3
    8142:	66 95       	lsr	r22
	ldi r18,8		
    8144:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    8146:	82 9f       	mul	r24, r18
	movw XL,r0
    8148:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    814a:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    814c:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    814e:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    8150:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    8152:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    8154:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    8156:	4c 93       	st	X, r20

	clr r1
    8158:	11 24       	eor	r1, r1

	ret
    815a:	08 95       	ret

0000815c <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    815c:	80 93 ac 0c 	sts	0x0CAC, r24
	sts tile_table_hi,r25	
    8160:	90 93 ad 0c 	sts	0x0CAD, r25
	ret
    8164:	08 95       	ret

00008166 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8166:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    816a:	81 70       	andi	r24, 0x01	; 1
	ret
    816c:	08 95       	ret

0000816e <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    816e:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    8172:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    8174:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    8178:	08 95       	ret

0000817a <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    817a:	88 23       	and	r24, r24
	brne rj_p2
    817c:	29 f4       	brne	.+10     	; 0x8188 <rj_p2>
		
	lds r24,joypad1_status_lo
    817e:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    8182:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    8186:	08 95       	ret

00008188 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8188:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    818c:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    8190:	08 95       	ret

00008192 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    8192:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8194:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8196:	f1 f7       	brne	.-4      	; 0x8194 <WaitUs+0x2>
	nop
    8198:	00 00       	nop
	sbiw r24,1
    819a:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    819c:	d1 f7       	brne	.-12     	; 0x8192 <WaitUs>

	ret
    819e:	08 95       	ret

000081a0 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    81a0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    81a2:	fe cf       	rjmp	.-4      	; 0x81a0 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    81a4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    81a6:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    81a8:	60 bd       	out	0x20, r22	; 32
   cli
    81aa:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    81ac:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    81ae:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    81b0:	78 94       	sei
   ret
    81b2:	08 95       	ret

000081b4 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    81b4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    81b6:	fe cf       	rjmp	.-4      	; 0x81b4 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    81b8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    81ba:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    81bc:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    81be:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    81c0:	80 b5       	in	r24, 0x20	; 32
   sei
    81c2:	78 94       	sei
   ret
    81c4:	08 95       	ret

000081c6 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    81c6:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    81c8:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    81cc:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    81d0:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    81d4:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    81d8:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    81dc:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    81e0:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    81e4:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    81e8:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    81ec:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    81ee:	80 93 81 00 	sts	0x0081, r24

		cli
    81f2:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    81f4:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    81f6:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    81fa:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    81fc:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8200:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8202:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8206:	90 93 60 00 	sts	0x0060, r25
	
		sei
    820a:	78 94       	sei

0000820c <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    820c:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    8210:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8212:	e0 f3       	brcs	.-8      	; 0x820c <wait>

		ret
    8214:	08 95       	ret

00008216 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8216:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    821a:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    821e:	08 95       	ret

00008220 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8220:	0f 93       	push	r16
		push r17
    8222:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    8224:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8226:	0f 93       	push	r16

		lds r16,sync_pulse
    8228:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    822c:	03 95       	inc	r16
		sts sync_pulse,r16
    822e:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8232:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8234:	08 c0       	rjmp	.+16     	; 0x8246 <__vector_8+0x26>
		lds r17,random_value
    8236:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    823a:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    823e:	10 27       	eor	r17, r16
		sts random_value,r17
    8240:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    8244:	07 c0       	rjmp	.+14     	; 0x8254 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8246:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    824a:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    824e:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8250:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8254:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8256:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    825a:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    825c:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    825e:	1f 91       	pop	r17
		pop r16
    8260:	0f 91       	pop	r16
		reti
    8262:	18 95       	reti

00008264 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8264:	98 e0       	ldi	r25, 0x08	; 8
    8266:	88 e1       	ldi	r24, 0x18	; 24
    8268:	0f b6       	in	r0, 0x3f	; 63
    826a:	f8 94       	cli
    826c:	a8 95       	wdr
    826e:	80 93 60 00 	sts	0x0060, r24
    8272:	0f be       	out	0x3f, r0	; 63
    8274:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8278:	ff cf       	rjmp	.-2      	; 0x8278 <SoftReset+0x14>

0000827a <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    827a:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    827c:	c8 95       	lpm
    827e:	c8 95       	lpm
		Wait200ns();
    8280:	c8 95       	lpm
    8282:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8284:	12 98       	cbi	0x02, 2	; 2
    8286:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8288:	80 e0       	ldi	r24, 0x00	; 0
    828a:	90 e0       	ldi	r25, 0x00	; 0
    828c:	20 e0       	ldi	r18, 0x00	; 0
    828e:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8290:	36 95       	lsr	r19
    8292:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8294:	96 95       	lsr	r25
    8296:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8298:	c8 95       	lpm
    829a:	c8 95       	lpm
			Wait200ns();
    829c:	c8 95       	lpm
    829e:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    82a0:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    82a2:	00 9b       	sbis	0x00, 0	; 0
    82a4:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    82a6:	01 9b       	sbis	0x00, 1	; 0
    82a8:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    82aa:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    82ac:	c8 95       	lpm
    82ae:	c8 95       	lpm
			Wait200ns();
    82b0:	c8 95       	lpm
    82b2:	c8 95       	lpm
    82b4:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    82b6:	61 f7       	brne	.-40     	; 0x8290 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    82b8:	30 93 c0 0c 	sts	0x0CC0, r19
    82bc:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    82c0:	90 93 c4 0c 	sts	0x0CC4, r25
    82c4:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    82c8:	80 91 bf 0c 	lds	r24, 0x0CBF
    82cc:	90 91 c0 0c 	lds	r25, 0x0CC0
    82d0:	0f 97       	sbiw	r24, 0x0f	; 15
    82d2:	31 f0       	breq	.+12     	; 0x82e0 <ReadButtons+0x66>
    82d4:	80 91 c3 0c 	lds	r24, 0x0CC3
    82d8:	90 91 c4 0c 	lds	r25, 0x0CC4
    82dc:	0f 97       	sbiw	r24, 0x0f	; 15
    82de:	11 f4       	brne	.+4      	; 0x82e4 <ReadButtons+0x6a>
		SoftReset();
    82e0:	0e 94 32 41 	call	0x8264	; 0x8264 <SoftReset>
    82e4:	08 95       	ret

000082e6 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    82e6:	10 92 fa 0c 	sts	0x0CFA, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    82ea:	00 99       	sbic	0x00, 0	; 0
    82ec:	03 c0       	rjmp	.+6      	; 0x82f4 <ReadControllers+0xe>
    82ee:	81 e0       	ldi	r24, 0x01	; 1
    82f0:	80 93 fa 0c 	sts	0x0CFA, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    82f4:	01 99       	sbic	0x00, 1	; 0
    82f6:	05 c0       	rjmp	.+10     	; 0x8302 <ReadControllers+0x1c>
    82f8:	80 91 fa 0c 	lds	r24, 0x0CFA
    82fc:	82 60       	ori	r24, 0x02	; 2
    82fe:	80 93 fa 0c 	sts	0x0CFA, r24
			
	//read the standard buttons
	ReadButtons();
    8302:	0c 94 3d 41 	jmp	0x827a	; 0x827a <ReadButtons>

00008306 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8306:	cf 93       	push	r28
    8308:	df 93       	push	r29
    830a:	c0 e0       	ldi	r28, 0x00	; 0
    830c:	d0 e0       	ldi	r29, 0x00	; 0
    830e:	fe 01       	movw	r30, r28
    8310:	ee 54       	subi	r30, 0x4E	; 78
    8312:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8314:	64 91       	lpm	r22, Z
    8316:	ce 01       	movw	r24, r28
    8318:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <WriteEeprom>
    831c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    831e:	c0 32       	cpi	r28, 0x20	; 32
    8320:	d1 05       	cpc	r29, r1
    8322:	a9 f7       	brne	.-22     	; 0x830e <FormatEeprom+0x8>
    8324:	c0 e2       	ldi	r28, 0x20	; 32
    8326:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8328:	6f ef       	ldi	r22, 0xFF	; 255
    832a:	ce 01       	movw	r24, r28
    832c:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8330:	6f ef       	ldi	r22, 0xFF	; 255
    8332:	ce 01       	movw	r24, r28
    8334:	01 96       	adiw	r24, 0x01	; 1
    8336:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    833a:	a0 96       	adiw	r28, 0x20	; 32
    833c:	c1 15       	cp	r28, r1
    833e:	88 e0       	ldi	r24, 0x08	; 8
    8340:	d8 07       	cpc	r29, r24
    8342:	91 f7       	brne	.-28     	; 0x8328 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8344:	df 91       	pop	r29
    8346:	cf 91       	pop	r28
    8348:	08 95       	ret

0000834a <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    834a:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    834c:	80 e0       	ldi	r24, 0x00	; 0
    834e:	90 e0       	ldi	r25, 0x00	; 0
    8350:	0e 94 da 40 	call	0x81b4	; 0x81b4 <ReadEeprom>
    8354:	c8 2f       	mov	r28, r24
    8356:	81 e0       	ldi	r24, 0x01	; 1
    8358:	90 e0       	ldi	r25, 0x00	; 0
    835a:	0e 94 da 40 	call	0x81b4	; 0x81b4 <ReadEeprom>
    835e:	28 2f       	mov	r18, r24
    8360:	30 e0       	ldi	r19, 0x00	; 0
    8362:	32 2f       	mov	r19, r18
    8364:	22 27       	eor	r18, r18
    8366:	2c 0f       	add	r18, r28
    8368:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    836a:	81 e0       	ldi	r24, 0x01	; 1
    836c:	2a 35       	cpi	r18, 0x5A	; 90
    836e:	35 45       	sbci	r19, 0x55	; 85
    8370:	09 f0       	breq	.+2      	; 0x8374 <isEepromFormatted+0x2a>
    8372:	80 e0       	ldi	r24, 0x00	; 0
}
    8374:	cf 91       	pop	r28
    8376:	08 95       	ret

00008378 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8378:	8f 92       	push	r8
    837a:	9f 92       	push	r9
    837c:	af 92       	push	r10
    837e:	bf 92       	push	r11
    8380:	cf 92       	push	r12
    8382:	df 92       	push	r13
    8384:	ef 92       	push	r14
    8386:	ff 92       	push	r15
    8388:	0f 93       	push	r16
    838a:	1f 93       	push	r17
    838c:	cf 93       	push	r28
    838e:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    8390:	fb 01       	movw	r30, r22
    8392:	11 82       	std	Z+1, r1	; 0x01
    8394:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8396:	8f 3f       	cpi	r24, 0xFF	; 255
    8398:	ff ef       	ldi	r31, 0xFF	; 255
    839a:	9f 07       	cpc	r25, r31
    839c:	89 f1       	breq	.+98     	; 0x8400 <EepromBlockExists+0x88>
    839e:	6a 01       	movw	r12, r20
    83a0:	8b 01       	movw	r16, r22
    83a2:	7c 01       	movw	r14, r24
    83a4:	a1 2c       	mov	r10, r1
    83a6:	b1 2c       	mov	r11, r1
    83a8:	c0 e0       	ldi	r28, 0x00	; 0
    83aa:	d3 e0       	ldi	r29, 0x03	; 3
    83ac:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    83ae:	c5 01       	movw	r24, r10
    83b0:	0e 94 da 40 	call	0x81b4	; 0x81b4 <ReadEeprom>
    83b4:	88 2e       	mov	r8, r24
    83b6:	c5 01       	movw	r24, r10
    83b8:	01 96       	adiw	r24, 0x01	; 1
    83ba:	0e 94 da 40 	call	0x81b4	; 0x81b4 <ReadEeprom>
    83be:	28 2f       	mov	r18, r24
    83c0:	30 e0       	ldi	r19, 0x00	; 0
    83c2:	32 2f       	mov	r19, r18
    83c4:	22 27       	eor	r18, r18
    83c6:	28 0d       	add	r18, r8
    83c8:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    83ca:	2e 15       	cp	r18, r14
    83cc:	3f 05       	cpc	r19, r15
    83ce:	29 f4       	brne	.+10     	; 0x83da <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    83d0:	f8 01       	movw	r30, r16
    83d2:	b1 82       	std	Z+1, r11	; 0x01
    83d4:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    83d6:	d0 e0       	ldi	r29, 0x00	; 0
    83d8:	0b c0       	rjmp	.+22     	; 0x83f0 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    83da:	2f 3f       	cpi	r18, 0xFF	; 255
    83dc:	3f 4f       	sbci	r19, 0xFF	; 255
    83de:	41 f4       	brne	.+16     	; 0x83f0 <EepromBlockExists+0x78>
    83e0:	91 10       	cpse	r9, r1
    83e2:	06 c0       	rjmp	.+12     	; 0x83f0 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    83e4:	c1 14       	cp	r12, r1
    83e6:	d1 04       	cpc	r13, r1
    83e8:	11 f0       	breq	.+4      	; 0x83ee <EepromBlockExists+0x76>
    83ea:	f6 01       	movw	r30, r12
    83ec:	c0 83       	st	Z, r28
    83ee:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    83f0:	cf 5f       	subi	r28, 0xFF	; 255
    83f2:	f0 e2       	ldi	r31, 0x20	; 32
    83f4:	af 0e       	add	r10, r31
    83f6:	b1 1c       	adc	r11, r1
    83f8:	c0 34       	cpi	r28, 0x40	; 64
    83fa:	c9 f6       	brne	.-78     	; 0x83ae <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    83fc:	8d 2f       	mov	r24, r29
    83fe:	01 c0       	rjmp	.+2      	; 0x8402 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8400:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    8402:	df 91       	pop	r29
    8404:	cf 91       	pop	r28
    8406:	1f 91       	pop	r17
    8408:	0f 91       	pop	r16
    840a:	ff 90       	pop	r15
    840c:	ef 90       	pop	r14
    840e:	df 90       	pop	r13
    8410:	cf 90       	pop	r12
    8412:	bf 90       	pop	r11
    8414:	af 90       	pop	r10
    8416:	9f 90       	pop	r9
    8418:	8f 90       	pop	r8
    841a:	08 95       	ret

0000841c <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    841c:	ef 92       	push	r14
    841e:	ff 92       	push	r15
    8420:	0f 93       	push	r16
    8422:	1f 93       	push	r17
    8424:	cf 93       	push	r28
    8426:	df 93       	push	r29
    8428:	00 d0       	rcall	.+0      	; 0x842a <EepromWriteBlock+0xe>
    842a:	1f 92       	push	r1
    842c:	cd b7       	in	r28, 0x3d	; 61
    842e:	de b7       	in	r29, 0x3e	; 62
    8430:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8432:	1a 82       	std	Y+2, r1	; 0x02
    8434:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8436:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8438:	ae 01       	movw	r20, r28
    843a:	4d 5f       	subi	r20, 0xFD	; 253
    843c:	5f 4f       	sbci	r21, 0xFF	; 255
    843e:	be 01       	movw	r22, r28
    8440:	6f 5f       	subi	r22, 0xFF	; 255
    8442:	7f 4f       	sbci	r23, 0xFF	; 255
    8444:	fc 01       	movw	r30, r24
    8446:	80 81       	ld	r24, Z
    8448:	91 81       	ldd	r25, Z+1	; 0x01
    844a:	0e 94 bc 41 	call	0x8378	; 0x8378 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    844e:	88 23       	and	r24, r24
    8450:	11 f0       	breq	.+4      	; 0x8456 <EepromWriteBlock+0x3a>
    8452:	83 30       	cpi	r24, 0x03	; 3
    8454:	19 f5       	brne	.+70     	; 0x849c <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8456:	89 81       	ldd	r24, Y+1	; 0x01
    8458:	9a 81       	ldd	r25, Y+2	; 0x02
    845a:	89 2b       	or	r24, r25
    845c:	49 f4       	brne	.+18     	; 0x8470 <EepromWriteBlock+0x54>
    845e:	8b 81       	ldd	r24, Y+3	; 0x03
    8460:	88 23       	and	r24, r24
    8462:	d9 f0       	breq	.+54     	; 0x849a <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8464:	f0 e2       	ldi	r31, 0x20	; 32
    8466:	8f 9f       	mul	r24, r31
    8468:	c0 01       	movw	r24, r0
    846a:	11 24       	eor	r1, r1
    846c:	9a 83       	std	Y+2, r25	; 0x02
    846e:	89 83       	std	Y+1, r24	; 0x01
    8470:	78 01       	movw	r14, r16
    8472:	20 e2       	ldi	r18, 0x20	; 32
    8474:	e2 0e       	add	r14, r18
    8476:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8478:	f8 01       	movw	r30, r16
    847a:	61 91       	ld	r22, Z+
    847c:	8f 01       	movw	r16, r30
    847e:	89 81       	ldd	r24, Y+1	; 0x01
    8480:	9a 81       	ldd	r25, Y+2	; 0x02
    8482:	9c 01       	movw	r18, r24
    8484:	2f 5f       	subi	r18, 0xFF	; 255
    8486:	3f 4f       	sbci	r19, 0xFF	; 255
    8488:	3a 83       	std	Y+2, r19	; 0x02
    848a:	29 83       	std	Y+1, r18	; 0x01
    848c:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8490:	0e 15       	cp	r16, r14
    8492:	1f 05       	cpc	r17, r15
    8494:	89 f7       	brne	.-30     	; 0x8478 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8496:	80 e0       	ldi	r24, 0x00	; 0
    8498:	01 c0       	rjmp	.+2      	; 0x849c <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    849a:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    849c:	0f 90       	pop	r0
    849e:	0f 90       	pop	r0
    84a0:	0f 90       	pop	r0
    84a2:	df 91       	pop	r29
    84a4:	cf 91       	pop	r28
    84a6:	1f 91       	pop	r17
    84a8:	0f 91       	pop	r16
    84aa:	ff 90       	pop	r15
    84ac:	ef 90       	pop	r14
    84ae:	08 95       	ret

000084b0 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    84b0:	cf 92       	push	r12
    84b2:	df 92       	push	r13
    84b4:	ff 92       	push	r15
    84b6:	0f 93       	push	r16
    84b8:	1f 93       	push	r17
    84ba:	cf 93       	push	r28
    84bc:	df 93       	push	r29
    84be:	00 d0       	rcall	.+0      	; 0x84c0 <EepromReadBlock+0x10>
    84c0:	cd b7       	in	r28, 0x3d	; 61
    84c2:	de b7       	in	r29, 0x3e	; 62
    84c4:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    84c6:	40 e0       	ldi	r20, 0x00	; 0
    84c8:	50 e0       	ldi	r21, 0x00	; 0
    84ca:	be 01       	movw	r22, r28
    84cc:	6f 5f       	subi	r22, 0xFF	; 255
    84ce:	7f 4f       	sbci	r23, 0xFF	; 255
    84d0:	0e 94 bc 41 	call	0x8378	; 0x8378 <EepromBlockExists>
    84d4:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    84d6:	81 11       	cpse	r24, r1
    84d8:	13 c0       	rjmp	.+38     	; 0x8500 <EepromReadBlock+0x50>
    84da:	68 01       	movw	r12, r16
    84dc:	80 e2       	ldi	r24, 0x20	; 32
    84de:	c8 0e       	add	r12, r24
    84e0:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    84e2:	89 81       	ldd	r24, Y+1	; 0x01
    84e4:	9a 81       	ldd	r25, Y+2	; 0x02
    84e6:	9c 01       	movw	r18, r24
    84e8:	2f 5f       	subi	r18, 0xFF	; 255
    84ea:	3f 4f       	sbci	r19, 0xFF	; 255
    84ec:	3a 83       	std	Y+2, r19	; 0x02
    84ee:	29 83       	std	Y+1, r18	; 0x01
    84f0:	0e 94 da 40 	call	0x81b4	; 0x81b4 <ReadEeprom>
    84f4:	f8 01       	movw	r30, r16
    84f6:	81 93       	st	Z+, r24
    84f8:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    84fa:	ec 15       	cp	r30, r12
    84fc:	fd 05       	cpc	r31, r13
    84fe:	89 f7       	brne	.-30     	; 0x84e2 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8500:	8f 2d       	mov	r24, r15
    8502:	0f 90       	pop	r0
    8504:	0f 90       	pop	r0
    8506:	df 91       	pop	r29
    8508:	cf 91       	pop	r28
    850a:	1f 91       	pop	r17
    850c:	0f 91       	pop	r16
    850e:	ff 90       	pop	r15
    8510:	df 90       	pop	r13
    8512:	cf 90       	pop	r12
    8514:	08 95       	ret

00008516 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8516:	00 97       	sbiw	r24, 0x00	; 0
    8518:	21 f0       	breq	.+8      	; 0x8522 <GetPrngNumber+0xc>
    851a:	90 93 cd 0c 	sts	0x0CCD, r25
    851e:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8522:	20 91 cc 0c 	lds	r18, 0x0CCC
    8526:	30 91 cd 0c 	lds	r19, 0x0CCD
    852a:	a9 01       	movw	r20, r18
    852c:	56 95       	lsr	r21
    852e:	47 95       	ror	r20
    8530:	56 95       	lsr	r21
    8532:	47 95       	ror	r20
    8534:	c9 01       	movw	r24, r18
    8536:	63 e0       	ldi	r22, 0x03	; 3
    8538:	96 95       	lsr	r25
    853a:	87 95       	ror	r24
    853c:	6a 95       	dec	r22
    853e:	e1 f7       	brne	.-8      	; 0x8538 <GetPrngNumber+0x22>
    8540:	84 27       	eor	r24, r20
    8542:	95 27       	eor	r25, r21
    8544:	82 27       	eor	r24, r18
    8546:	93 27       	eor	r25, r19
    8548:	a9 01       	movw	r20, r18
    854a:	75 e0       	ldi	r23, 0x05	; 5
    854c:	56 95       	lsr	r21
    854e:	47 95       	ror	r20
    8550:	7a 95       	dec	r23
    8552:	e1 f7       	brne	.-8      	; 0x854c <GetPrngNumber+0x36>
    8554:	84 27       	eor	r24, r20
    8556:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8558:	99 27       	eor	r25, r25
    855a:	86 95       	lsr	r24
    855c:	97 95       	ror	r25
    855e:	88 27       	eor	r24, r24
    8560:	36 95       	lsr	r19
    8562:	27 95       	ror	r18
    8564:	82 2b       	or	r24, r18
    8566:	93 2b       	or	r25, r19
    8568:	90 93 cd 0c 	sts	0x0CCD, r25
    856c:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    8570:	08 95       	ret

00008572 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8572:	fc 01       	movw	r30, r24
    8574:	67 87       	std	Z+15, r22	; 0x0f
    8576:	08 95       	ret

00008578 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8578:	e0 ed       	ldi	r30, 0xD0	; 208
    857a:	fc e0       	ldi	r31, 0x0C	; 12
    857c:	81 e0       	ldi	r24, 0x01	; 1
    857e:	91 e0       	ldi	r25, 0x01	; 1
    8580:	95 8b       	std	Z+21, r25	; 0x15
    8582:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8584:	63 8b       	std	Z+19, r22	; 0x13
    8586:	08 95       	ret

00008588 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8588:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    858a:	90 81       	ld	r25, Z
    858c:	9f 75       	andi	r25, 0x5F	; 95
    858e:	90 83       	st	Z, r25
    8590:	08 95       	ret

00008592 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8592:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8594:	90 81       	ld	r25, Z
    8596:	90 64       	ori	r25, 0x40	; 64
    8598:	90 83       	st	Z, r25
    859a:	08 95       	ret

0000859c <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    859c:	fc 01       	movw	r30, r24
    859e:	66 87       	std	Z+14, r22	; 0x0e
    85a0:	08 95       	ret

000085a2 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    85a2:	fc 01       	movw	r30, r24
    85a4:	62 87       	std	Z+10, r22	; 0x0a
    85a6:	08 95       	ret

000085a8 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    85a8:	fc 01       	movw	r30, r24
    85aa:	63 87       	std	Z+11, r22	; 0x0b
    85ac:	08 95       	ret

000085ae <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    85ae:	cf 93       	push	r28
    85b0:	df 93       	push	r29
    85b2:	ec 01       	movw	r28, r24
    85b4:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    85b6:	29 81       	ldd	r18, Y+1	; 0x01
    85b8:	30 e0       	ldi	r19, 0x00	; 0
    85ba:	f9 01       	movw	r30, r18
    85bc:	ee 0f       	add	r30, r30
    85be:	ff 1f       	adc	r31, r31
    85c0:	e8 5f       	subi	r30, 0xF8	; 248
    85c2:	f0 47       	sbci	r31, 0x70	; 112
    85c4:	65 91       	lpm	r22, Z+
    85c6:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    85c8:	f9 01       	movw	r30, r18
    85ca:	e4 0f       	add	r30, r20
    85cc:	f1 1d       	adc	r31, r1
    85ce:	47 fd       	sbrc	r20, 7
    85d0:	fa 95       	dec	r31
    85d2:	ee 0f       	add	r30, r30
    85d4:	ff 1f       	adc	r31, r31
    85d6:	e8 5f       	subi	r30, 0xF8	; 248
    85d8:	f0 47       	sbci	r31, 0x70	; 112
    85da:	85 91       	lpm	r24, Z+
    85dc:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    85de:	86 1b       	sub	r24, r22
    85e0:	97 0b       	sbc	r25, r23
    85e2:	68 85       	ldd	r22, Y+8	; 0x08
    85e4:	70 e0       	ldi	r23, 0x00	; 0
    85e6:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
	if(delta==0)delta++;
    85ea:	61 15       	cp	r22, r1
    85ec:	71 05       	cpc	r23, r1
    85ee:	11 f4       	brne	.+4      	; 0x85f4 <PatchCommand11+0x46>
    85f0:	61 e0       	ldi	r22, 0x01	; 1
    85f2:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    85f4:	ea 81       	ldd	r30, Y+2	; 0x02
    85f6:	86 e0       	ldi	r24, 0x06	; 6
    85f8:	e8 9f       	mul	r30, r24
    85fa:	f0 01       	movw	r30, r0
    85fc:	11 24       	eor	r1, r1
    85fe:	e0 53       	subi	r30, 0x30	; 48
    8600:	f3 4f       	sbci	r31, 0xF3	; 243
    8602:	81 81       	ldd	r24, Z+1	; 0x01
    8604:	92 81       	ldd	r25, Z+2	; 0x02
    8606:	86 0f       	add	r24, r22
    8608:	97 1f       	adc	r25, r23
    860a:	92 83       	std	Z+2, r25	; 0x02
    860c:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    860e:	7e 83       	std	Y+6, r23	; 0x06
    8610:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8612:	88 81       	ld	r24, Y
    8614:	88 60       	ori	r24, 0x08	; 8
    8616:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8618:	89 81       	ldd	r24, Y+1	; 0x01
    861a:	48 0f       	add	r20, r24
    861c:	4f 83       	std	Y+7, r20	; 0x07
}
    861e:	df 91       	pop	r29
    8620:	cf 91       	pop	r28
    8622:	08 95       	ret

00008624 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8624:	fc 01       	movw	r30, r24
    8626:	60 87       	std	Z+8, r22	; 0x08
    8628:	08 95       	ret

0000862a <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    862a:	fc 01       	movw	r30, r24
    862c:	64 83       	std	Z+4, r22	; 0x04
    862e:	08 95       	ret

00008630 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8630:	fc 01       	movw	r30, r24
    8632:	82 81       	ldd	r24, Z+2	; 0x02
    8634:	0c 94 33 47 	jmp	0x8e66	; 0x8e66 <SetMixerWave>

00008638 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8638:	fc 01       	movw	r30, r24
	track->note+=param;
    863a:	91 81       	ldd	r25, Z+1	; 0x01
    863c:	69 0f       	add	r22, r25
    863e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8640:	82 81       	ldd	r24, Z+2	; 0x02
    8642:	0c 94 1c 47 	jmp	0x8e38	; 0x8e38 <SetMixerNote>

00008646 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8646:	fc 01       	movw	r30, r24
	track->note-=param;
    8648:	91 81       	ldd	r25, Z+1	; 0x01
    864a:	96 1b       	sub	r25, r22
    864c:	69 2f       	mov	r22, r25
    864e:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8650:	82 81       	ldd	r24, Z+2	; 0x02
    8652:	0c 94 1c 47 	jmp	0x8e38	; 0x8e38 <SetMixerNote>

00008656 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8656:	1f 93       	push	r17
    8658:	cf 93       	push	r28
    865a:	df 93       	push	r29
    865c:	ec 01       	movw	r28, r24
    865e:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8660:	8a 81       	ldd	r24, Y+2	; 0x02
    8662:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <SetMixerNote>
	track->note=param;
    8666:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8668:	88 81       	ld	r24, Y
    866a:	87 7f       	andi	r24, 0xF7	; 247
    866c:	88 83       	st	Y, r24
}
    866e:	df 91       	pop	r29
    8670:	cf 91       	pop	r28
    8672:	1f 91       	pop	r17
    8674:	08 95       	ret

00008676 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8676:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8678:	14 96       	adiw	r26, 0x04	; 4
    867a:	8c 91       	ld	r24, X
    867c:	14 97       	sbiw	r26, 0x04	; 4
    867e:	88 23       	and	r24, r24
    8680:	19 f1       	breq	.+70     	; 0x86c8 <PatchCommand14+0x52>
    8682:	55 96       	adiw	r26, 0x15	; 21
    8684:	2d 91       	ld	r18, X+
    8686:	3c 91       	ld	r19, X
    8688:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    868a:	66 23       	and	r22, r22
    868c:	79 f0       	breq	.+30     	; 0x86ac <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    868e:	77 27       	eor	r23, r23
    8690:	67 fd       	sbrc	r22, 7
    8692:	70 95       	com	r23
    8694:	6f 5f       	subi	r22, 0xFF	; 255
    8696:	7f 4f       	sbci	r23, 0xFF	; 255
    8698:	ab 01       	movw	r20, r22
    869a:	44 0f       	add	r20, r20
    869c:	55 1f       	adc	r21, r21
    869e:	64 0f       	add	r22, r20
    86a0:	75 1f       	adc	r23, r21
    86a2:	26 1b       	sub	r18, r22
    86a4:	37 0b       	sbc	r19, r23
    86a6:	09 c0       	rjmp	.+18     	; 0x86ba <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    86a8:	ef 3f       	cpi	r30, 0xFF	; 255
    86aa:	39 f0       	breq	.+14     	; 0x86ba <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    86ac:	23 50       	subi	r18, 0x03	; 3
    86ae:	31 09       	sbc	r19, r1
    86b0:	f9 01       	movw	r30, r18
    86b2:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    86b4:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    86b6:	ed 30       	cpi	r30, 0x0D	; 13
    86b8:	b9 f7       	brne	.-18     	; 0x86a8 <PatchCommand14+0x32>
    86ba:	56 96       	adiw	r26, 0x16	; 22
    86bc:	3c 93       	st	X, r19
    86be:	2e 93       	st	-X, r18
    86c0:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    86c2:	81 50       	subi	r24, 0x01	; 1
    86c4:	14 96       	adiw	r26, 0x04	; 4
    86c6:	8c 93       	st	X, r24
    86c8:	08 95       	ret

000086ca <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    86ca:	90 93 73 0d 	sts	0x0D73, r25
    86ce:	80 93 72 0d 	sts	0x0D72, r24

	masterVolume=DEFAULT_MASTER_VOL;
    86d2:	8f e6       	ldi	r24, 0x6F	; 111
    86d4:	80 93 75 0d 	sts	0x0D75, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    86d8:	10 92 ce 0c 	sts	0x0CCE, r1
    86dc:	ed e0       	ldi	r30, 0x0D	; 13
    86de:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    86e0:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    86e2:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    86e4:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    86e6:	28 e1       	ldi	r18, 0x18	; 24
    86e8:	df 01       	movw	r26, r30
    86ea:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    86ec:	8c 93       	st	X, r24
    86ee:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    86f0:	9c 93       	st	X, r25
    86f2:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    86f4:	1c 92       	st	X, r1
    86f6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    86f8:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    86fa:	10 82       	st	Z, r1
    86fc:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    86fe:	2c 93       	st	X, r18
    8700:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8702:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8704:	8f 5f       	subi	r24, 0xFF	; 255
    8706:	77 96       	adiw	r30, 0x17	; 23
    8708:	85 30       	cpi	r24, 0x05	; 5
    870a:	71 f7       	brne	.-36     	; 0x86e8 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    870c:	08 95       	ret

0000870e <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    870e:	ed ef       	ldi	r30, 0xFD	; 253
    8710:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8712:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8714:	20 81       	ld	r18, Z
    8716:	2f 77       	andi	r18, 0x7F	; 127
    8718:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    871a:	33 83       	std	Z+3, r19	; 0x03
    871c:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    871e:	2d e0       	ldi	r18, 0x0D	; 13
    8720:	e0 37       	cpi	r30, 0x70	; 112
    8722:	f2 07       	cpc	r31, r18
    8724:	b9 f7       	brne	.-18     	; 0x8714 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8726:	01 96       	adiw	r24, 0x01	; 1
    8728:	90 93 7a 0d 	sts	0x0D7A, r25
    872c:	80 93 79 0d 	sts	0x0D79, r24
		songStart=song+1;//skip first delta-time
    8730:	90 93 fc 0c 	sts	0x0CFC, r25
    8734:	80 93 fb 0c 	sts	0x0CFB, r24
		loopStart=song+1;
    8738:	90 93 7c 0d 	sts	0x0D7C, r25
    873c:	80 93 7b 0d 	sts	0x0D7B, r24
		nextDeltaTime=0;
    8740:	10 92 77 0d 	sts	0x0D77, r1
    8744:	10 92 76 0d 	sts	0x0D76, r1
		currDeltaTime=0;
    8748:	10 92 71 0d 	sts	0x0D71, r1
    874c:	10 92 70 0d 	sts	0x0D70, r1
		songSpeed=0;
    8750:	10 92 78 0d 	sts	0x0D78, r1

		lastStatus=0;
    8754:	10 92 74 0d 	sts	0x0D74, r1
		playSong=true;
    8758:	81 e0       	ldi	r24, 0x01	; 1
    875a:	80 93 ce 0c 	sts	0x0CCE, r24
    875e:	08 95       	ret

00008760 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    8760:	ed ef       	ldi	r30, 0xFD	; 253
    8762:	fc e0       	ldi	r31, 0x0C	; 12
    8764:	8a ef       	ldi	r24, 0xFA	; 250
    8766:	87 87       	std	Z+15, r24	; 0x0f
    8768:	86 a3       	std	Z+38, r24	; 0x26
    876a:	80 93 3a 0d 	sts	0x0D3A, r24
    876e:	80 93 51 0d 	sts	0x0D51, r24
    8772:	80 93 68 0d 	sts	0x0D68, r24
	}

	playSong=false;
    8776:	10 92 ce 0c 	sts	0x0CCE, r1
    877a:	08 95       	ret

0000877c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    877c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    877e:	ed 91       	ld	r30, X+
    8780:	fc 91       	ld	r31, X
    8782:	11 97       	sbiw	r26, 0x01	; 1
    8784:	9f 01       	movw	r18, r30
    8786:	2f 5f       	subi	r18, 0xFF	; 255
    8788:	3f 4f       	sbci	r19, 0xFF	; 255
    878a:	11 96       	adiw	r26, 0x01	; 1
    878c:	3c 93       	st	X, r19
    878e:	2e 93       	st	-X, r18
    8790:	e4 91       	lpm	r30, Z
    8792:	e7 fd       	sbrc	r30, 7
    8794:	03 c0       	rjmp	.+6      	; 0x879c <ReadVarLen+0x20>
    8796:	8e 2f       	mov	r24, r30
    8798:	90 e0       	ldi	r25, 0x00	; 0
    879a:	08 95       	ret
    {
       value &= 0x7F;
    879c:	ef 77       	andi	r30, 0x7F	; 127
    879e:	8e 2f       	mov	r24, r30
    87a0:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    87a2:	96 95       	lsr	r25
    87a4:	98 2f       	mov	r25, r24
    87a6:	88 27       	eor	r24, r24
    87a8:	97 95       	ror	r25
    87aa:	87 95       	ror	r24
    87ac:	2f 5f       	subi	r18, 0xFF	; 255
    87ae:	3f 4f       	sbci	r19, 0xFF	; 255
    87b0:	f9 01       	movw	r30, r18
    87b2:	31 97       	sbiw	r30, 0x01	; 1
    87b4:	e4 91       	lpm	r30, Z
    87b6:	4e 2f       	mov	r20, r30
    87b8:	4f 77       	andi	r20, 0x7F	; 127
    87ba:	84 0f       	add	r24, r20
    87bc:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    87be:	e7 fd       	sbrc	r30, 7
    87c0:	f0 cf       	rjmp	.-32     	; 0x87a2 <ReadVarLen+0x26>
    87c2:	2d 93       	st	X+, r18
    87c4:	3c 93       	st	X, r19
    }


    return value;
}
    87c6:	08 95       	ret

000087c8 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    87c8:	ef 92       	push	r14
    87ca:	ff 92       	push	r15
    87cc:	0f 93       	push	r16
    87ce:	1f 93       	push	r17
    87d0:	cf 93       	push	r28
    87d2:	df 93       	push	r29
    87d4:	1f 92       	push	r1
    87d6:	cd b7       	in	r28, 0x3d	; 61
    87d8:	de b7       	in	r29, 0x3e	; 62
    87da:	7c 01       	movw	r14, r24
    87dc:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    87de:	fc 01       	movw	r30, r24
    87e0:	80 81       	ld	r24, Z
    87e2:	08 2f       	mov	r16, r24
    87e4:	00 1f       	adc	r16, r16
    87e6:	00 27       	eor	r16, r16
    87e8:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    87ea:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    87ec:	9f ef       	ldi	r25, 0xFF	; 255
    87ee:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    87f0:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    87f2:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    87f4:	87 7b       	andi	r24, 0xB7	; 183
    87f6:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    87f8:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    87fa:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    87fc:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    87fe:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8800:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8802:	82 81       	ldd	r24, Z+2	; 0x02
    8804:	83 30       	cpi	r24, 0x03	; 3
    8806:	69 f4       	brne	.+26     	; 0x8822 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8808:	01 11       	cpse	r16, r1
    880a:	01 c0       	rjmp	.+2      	; 0x880e <TriggerCommon+0x46>
    880c:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    880e:	81 e0       	ldi	r24, 0x01	; 1
    8810:	91 e0       	ldi	r25, 0x01	; 1
    8812:	90 93 e5 0c 	sts	0x0CE5, r25
    8816:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    881a:	81 e0       	ldi	r24, 0x01	; 1
    881c:	80 93 e3 0c 	sts	0x0CE3, r24
    8820:	39 c0       	rjmp	.+114    	; 0x8894 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8822:	84 30       	cpi	r24, 0x04	; 4
    8824:	69 f5       	brne	.+90     	; 0x8880 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8826:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    882a:	80 91 72 0d 	lds	r24, 0x0D72
    882e:	90 91 73 0d 	lds	r25, 0x0D73
    8832:	f9 e0       	ldi	r31, 0x09	; 9
    8834:	6f 9f       	mul	r22, r31
    8836:	80 0d       	add	r24, r0
    8838:	91 1d       	adc	r25, r1
    883a:	11 24       	eor	r1, r1
    883c:	fc 01       	movw	r30, r24
    883e:	31 96       	adiw	r30, 0x01	; 1
    8840:	a5 91       	lpm	r26, Z+
    8842:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8844:	b0 93 ed 0c 	sts	0x0CED, r27
    8848:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    884c:	ac 01       	movw	r20, r24
    884e:	49 5f       	subi	r20, 0xF9	; 249
    8850:	5f 4f       	sbci	r21, 0xFF	; 255
    8852:	fa 01       	movw	r30, r20
    8854:	65 91       	lpm	r22, Z+
    8856:	74 91       	lpm	r23, Z
    8858:	05 96       	adiw	r24, 0x05	; 5
    885a:	fc 01       	movw	r30, r24
    885c:	85 91       	lpm	r24, Z+
    885e:	94 91       	lpm	r25, Z
    8860:	68 1b       	sub	r22, r24
    8862:	79 0b       	sbc	r23, r25
    8864:	70 93 ef 0c 	sts	0x0CEF, r23
    8868:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    886c:	fa 01       	movw	r30, r20
    886e:	85 91       	lpm	r24, Z+
    8870:	94 91       	lpm	r25, Z
    8872:	a8 0f       	add	r26, r24
    8874:	b9 1f       	adc	r27, r25
    8876:	b0 93 f1 0c 	sts	0x0CF1, r27
    887a:	a0 93 f0 0c 	sts	0x0CF0, r26
    887e:	05 c0       	rjmp	.+10     	; 0x888a <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8880:	60 e0       	ldi	r22, 0x00	; 0
    8882:	29 83       	std	Y+1, r18	; 0x01
    8884:	0e 94 33 47 	call	0x8e66	; 0x8e66 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8888:	29 81       	ldd	r18, Y+1	; 0x01
    888a:	62 2f       	mov	r22, r18
    888c:	f7 01       	movw	r30, r14
    888e:	82 81       	ldd	r24, Z+2	; 0x02
    8890:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8894:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8896:	00 23       	and	r16, r16
    8898:	11 f0       	breq	.+4      	; 0x889e <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    889a:	11 8b       	std	Z+17, r17	; 0x11
    889c:	01 c0       	rjmp	.+2      	; 0x88a0 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    889e:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    88a0:	e0 91 72 0d 	lds	r30, 0x0D72
    88a4:	f0 91 73 0d 	lds	r31, 0x0D73
    88a8:	39 e0       	ldi	r19, 0x09	; 9
    88aa:	13 9f       	mul	r17, r19
    88ac:	e0 0d       	add	r30, r0
    88ae:	f1 1d       	adc	r31, r1
    88b0:	11 24       	eor	r1, r1
    88b2:	33 96       	adiw	r30, 0x03	; 3
    88b4:	85 91       	lpm	r24, Z+
    88b6:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    88b8:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    88ba:	00 97       	sbiw	r24, 0x00	; 0
    88bc:	19 f4       	brne	.+6      	; 0x88c4 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    88be:	16 8a       	std	Z+22, r1	; 0x16
    88c0:	15 8a       	std	Z+21, r1	; 0x15
    88c2:	08 c0       	rjmp	.+16     	; 0x88d4 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    88c4:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    88c6:	fc 01       	movw	r30, r24
    88c8:	24 91       	lpm	r18, Z
    88ca:	f7 01       	movw	r30, r14
    88cc:	22 8b       	std	Z+18, r18	; 0x12
    88ce:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    88d0:	96 8b       	std	Z+22, r25	; 0x16
    88d2:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    88d4:	0f 90       	pop	r0
    88d6:	df 91       	pop	r29
    88d8:	cf 91       	pop	r28
    88da:	1f 91       	pop	r17
    88dc:	0f 91       	pop	r16
    88de:	ff 90       	pop	r15
    88e0:	ef 90       	pop	r14
    88e2:	08 95       	ret

000088e4 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    88e4:	cf 93       	push	r28
    88e6:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    88e8:	e0 91 72 0d 	lds	r30, 0x0D72
    88ec:	f0 91 73 0d 	lds	r31, 0x0D73
    88f0:	99 e0       	ldi	r25, 0x09	; 9
    88f2:	89 9f       	mul	r24, r25
    88f4:	e0 0d       	add	r30, r0
    88f6:	f1 1d       	adc	r31, r1
    88f8:	11 24       	eor	r1, r1
    88fa:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    88fc:	e1 30       	cpi	r30, 0x01	; 1
    88fe:	e9 f0       	breq	.+58     	; 0x893a <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8900:	e2 30       	cpi	r30, 0x02	; 2
    8902:	e9 f0       	breq	.+58     	; 0x893e <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8904:	20 91 14 0d 	lds	r18, 0x0D14
    8908:	27 ff       	sbrs	r18, 7
    890a:	1d c0       	rjmp	.+58     	; 0x8946 <TriggerFx+0x62>
    890c:	20 91 25 0d 	lds	r18, 0x0D25
    8910:	28 13       	cpse	r18, r24
    8912:	02 c0       	rjmp	.+4      	; 0x8918 <TriggerFx+0x34>
    8914:	41 11       	cpse	r20, r1
    8916:	17 c0       	rjmp	.+46     	; 0x8946 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8918:	20 91 2b 0d 	lds	r18, 0x0D2B
    891c:	27 ff       	sbrs	r18, 7
    891e:	11 c0       	rjmp	.+34     	; 0x8942 <TriggerFx+0x5e>
    8920:	20 91 3c 0d 	lds	r18, 0x0D3C
    8924:	28 13       	cpse	r18, r24
    8926:	02 c0       	rjmp	.+4      	; 0x892c <TriggerFx+0x48>
    8928:	41 11       	cpse	r20, r1
    892a:	0b c0       	rjmp	.+22     	; 0x8942 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    892c:	20 91 28 0d 	lds	r18, 0x0D28
    8930:	90 91 3f 0d 	lds	r25, 0x0D3F
    8934:	92 17       	cp	r25, r18
    8936:	28 f4       	brcc	.+10     	; 0x8942 <TriggerFx+0x5e>
    8938:	06 c0       	rjmp	.+12     	; 0x8946 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    893a:	c3 e0       	ldi	r28, 0x03	; 3
    893c:	05 c0       	rjmp	.+10     	; 0x8948 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    893e:	c4 e0       	ldi	r28, 0x04	; 4
    8940:	03 c0       	rjmp	.+6      	; 0x8948 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8942:	c2 e0       	ldi	r28, 0x02	; 2
    8944:	01 c0       	rjmp	.+2      	; 0x8948 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8946:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8948:	97 e1       	ldi	r25, 0x17	; 23
    894a:	c9 9f       	mul	r28, r25
    894c:	e0 01       	movw	r28, r0
    894e:	11 24       	eor	r1, r1
    8950:	c3 50       	subi	r28, 0x03	; 3
    8952:	d3 4f       	sbci	r29, 0xF3	; 243
    8954:	90 e8       	ldi	r25, 0x80	; 128
    8956:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8958:	1e 8a       	std	Y+22, r1	; 0x16
    895a:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    895c:	20 e5       	ldi	r18, 0x50	; 80
    895e:	46 2f       	mov	r20, r22
    8960:	68 2f       	mov	r22, r24
    8962:	ce 01       	movw	r24, r28
    8964:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8968:	88 81       	ld	r24, Y
    896a:	80 62       	ori	r24, 0x20	; 32
    896c:	88 83       	st	Y, r24
}
    896e:	df 91       	pop	r29
    8970:	cf 91       	pop	r28
    8972:	08 95       	ret

00008974 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8974:	cf 93       	push	r28
    8976:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8978:	a8 2f       	mov	r26, r24
    897a:	b0 e0       	ldi	r27, 0x00	; 0
    897c:	97 e1       	ldi	r25, 0x17	; 23
    897e:	89 9f       	mul	r24, r25
    8980:	f0 01       	movw	r30, r0
    8982:	11 24       	eor	r1, r1
    8984:	e3 50       	subi	r30, 0x03	; 3
    8986:	f3 4f       	sbci	r31, 0xF3	; 243
    8988:	80 81       	ld	r24, Z
    898a:	85 ff       	sbrs	r24, 5
    898c:	02 c0       	rjmp	.+4      	; 0x8992 <TriggerNote+0x1e>
    898e:	87 fd       	sbrc	r24, 7
    8990:	2e c0       	rjmp	.+92     	; 0x89ee <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8992:	21 11       	cpse	r18, r1
    8994:	18 c0       	rjmp	.+48     	; 0x89c6 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8996:	97 e1       	ldi	r25, 0x17	; 23
    8998:	9a 9f       	mul	r25, r26
    899a:	f0 01       	movw	r30, r0
    899c:	9b 9f       	mul	r25, r27
    899e:	f0 0d       	add	r31, r0
    89a0:	11 24       	eor	r1, r1
    89a2:	e3 50       	subi	r30, 0x03	; 3
    89a4:	f3 4f       	sbci	r31, 0xF3	; 243
    89a6:	97 85       	ldd	r25, Z+15	; 0x0f
    89a8:	91 11       	cpse	r25, r1
    89aa:	02 c0       	rjmp	.+4      	; 0x89b0 <TriggerNote+0x3c>
    89ac:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    89ae:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    89b0:	97 e1       	ldi	r25, 0x17	; 23
    89b2:	9a 9f       	mul	r25, r26
    89b4:	f0 01       	movw	r30, r0
    89b6:	9b 9f       	mul	r25, r27
    89b8:	f0 0d       	add	r31, r0
    89ba:	11 24       	eor	r1, r1
    89bc:	e3 50       	subi	r30, 0x03	; 3
    89be:	f3 4f       	sbci	r31, 0xF3	; 243
    89c0:	8f 7b       	andi	r24, 0xBF	; 191
    89c2:	80 83       	st	Z, r24
    89c4:	14 c0       	rjmp	.+40     	; 0x89ee <TriggerNote+0x7a>
    89c6:	82 2f       	mov	r24, r18
    89c8:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    89ca:	97 e1       	ldi	r25, 0x17	; 23
    89cc:	9a 9f       	mul	r25, r26
    89ce:	e0 01       	movw	r28, r0
    89d0:	9b 9f       	mul	r25, r27
    89d2:	d0 0d       	add	r29, r0
    89d4:	11 24       	eor	r1, r1
    89d6:	c3 50       	subi	r28, 0x03	; 3
    89d8:	d3 4f       	sbci	r29, 0xF3	; 243
    89da:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    89dc:	1e 8a       	std	Y+22, r1	; 0x16
    89de:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    89e0:	48 2f       	mov	r20, r24
    89e2:	ce 01       	movw	r24, r28
    89e4:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    89e8:	88 81       	ld	r24, Y
    89ea:	80 62       	ori	r24, 0x20	; 32
    89ec:	88 83       	st	Y, r24
		}

	}
}
    89ee:	df 91       	pop	r29
    89f0:	cf 91       	pop	r28
    89f2:	08 95       	ret

000089f4 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    89f4:	6f 92       	push	r6
    89f6:	7f 92       	push	r7
    89f8:	8f 92       	push	r8
    89fa:	9f 92       	push	r9
    89fc:	af 92       	push	r10
    89fe:	bf 92       	push	r11
    8a00:	cf 92       	push	r12
    8a02:	df 92       	push	r13
    8a04:	ef 92       	push	r14
    8a06:	ff 92       	push	r15
    8a08:	0f 93       	push	r16
    8a0a:	1f 93       	push	r17
    8a0c:	cf 93       	push	r28
    8a0e:	df 93       	push	r29
    8a10:	cd ef       	ldi	r28, 0xFD	; 253
    8a12:	dc e0       	ldi	r29, 0x0C	; 12
    8a14:	00 ed       	ldi	r16, 0xD0	; 208
    8a16:	1c e0       	ldi	r17, 0x0C	; 12
    8a18:	d8 01       	movw	r26, r16
    8a1a:	9e 01       	movw	r18, r28
    8a1c:	40 e0       	ldi	r20, 0x00	; 0
    8a1e:	50 e0       	ldi	r21, 0x00	; 0
    8a20:	ca 01       	movw	r24, r20
    8a22:	83 50       	subi	r24, 0x03	; 3
    8a24:	93 4f       	sbci	r25, 0xF3	; 243
    8a26:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8a28:	fc 01       	movw	r30, r24
    8a2a:	87 85       	ldd	r24, Z+15	; 0x0f
    8a2c:	88 23       	and	r24, r24
    8a2e:	91 f0       	breq	.+36     	; 0x8a54 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8a30:	66 85       	ldd	r22, Z+14	; 0x0e
    8a32:	99 27       	eor	r25, r25
    8a34:	87 fd       	sbrc	r24, 7
    8a36:	90 95       	com	r25
    8a38:	86 0f       	add	r24, r22
    8a3a:	91 1d       	adc	r25, r1
    8a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    8a3e:	91 05       	cpc	r25, r1
    8a40:	19 f0       	breq	.+6      	; 0x8a48 <ProcessMusic+0x54>
    8a42:	14 f0       	brlt	.+4      	; 0x8a48 <ProcessMusic+0x54>
    8a44:	8f ef       	ldi	r24, 0xFF	; 255
    8a46:	90 e0       	ldi	r25, 0x00	; 0
    8a48:	97 ff       	sbrs	r25, 7
    8a4a:	02 c0       	rjmp	.+4      	; 0x8a50 <ProcessMusic+0x5c>
    8a4c:	80 e0       	ldi	r24, 0x00	; 0
    8a4e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8a50:	f6 01       	movw	r30, r12
    8a52:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8a54:	f9 01       	movw	r30, r18
    8a56:	f0 80       	ld	r15, Z
    8a58:	f3 fe       	sbrs	r15, 3
    8a5a:	2a c0       	rjmp	.+84     	; 0x8ab0 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8a5c:	65 81       	ldd	r22, Z+5	; 0x05
    8a5e:	76 81       	ldd	r23, Z+6	; 0x06
    8a60:	11 96       	adiw	r26, 0x01	; 1
    8a62:	8d 91       	ld	r24, X+
    8a64:	9c 91       	ld	r25, X
    8a66:	12 97       	sbiw	r26, 0x02	; 2
    8a68:	86 0f       	add	r24, r22
    8a6a:	97 1f       	adc	r25, r23
    8a6c:	12 96       	adiw	r26, 0x02	; 2
    8a6e:	9c 93       	st	X, r25
    8a70:	8e 93       	st	-X, r24
    8a72:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8a74:	f6 01       	movw	r30, r12
    8a76:	e7 80       	ldd	r14, Z+7	; 0x07
    8a78:	ee 2d       	mov	r30, r14
    8a7a:	f0 e0       	ldi	r31, 0x00	; 0
    8a7c:	ee 0f       	add	r30, r30
    8a7e:	ff 1f       	adc	r31, r31
    8a80:	e8 5f       	subi	r30, 0xF8	; 248
    8a82:	f0 47       	sbci	r31, 0x70	; 112
    8a84:	c5 90       	lpm	r12, Z+
    8a86:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8a88:	16 16       	cp	r1, r22
    8a8a:	17 06       	cpc	r1, r23
    8a8c:	24 f4       	brge	.+8      	; 0x8a96 <ProcessMusic+0xa2>
    8a8e:	8c 15       	cp	r24, r12
    8a90:	9d 05       	cpc	r25, r13
    8a92:	30 f4       	brcc	.+12     	; 0x8aa0 <ProcessMusic+0xac>
    8a94:	0d c0       	rjmp	.+26     	; 0x8ab0 <ProcessMusic+0xbc>
    8a96:	67 2b       	or	r22, r23
    8a98:	59 f0       	breq	.+22     	; 0x8ab0 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8a9a:	c8 16       	cp	r12, r24
    8a9c:	d9 06       	cpc	r13, r25
    8a9e:	40 f0       	brcs	.+16     	; 0x8ab0 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8aa0:	12 96       	adiw	r26, 0x02	; 2
    8aa2:	dc 92       	st	X, r13
    8aa4:	ce 92       	st	-X, r12
    8aa6:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8aa8:	8f 2d       	mov	r24, r15
    8aaa:	87 7f       	andi	r24, 0xF7	; 247
    8aac:	f9 01       	movw	r30, r18
    8aae:	80 83       	st	Z, r24
    8ab0:	49 5e       	subi	r20, 0xE9	; 233
    8ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ab4:	29 5e       	subi	r18, 0xE9	; 233
    8ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab8:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8aba:	43 37       	cpi	r20, 0x73	; 115
    8abc:	51 05       	cpc	r21, r1
    8abe:	09 f0       	breq	.+2      	; 0x8ac2 <ProcessMusic+0xce>
    8ac0:	af cf       	rjmp	.-162    	; 0x8a20 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8ac2:	80 91 ce 0c 	lds	r24, 0x0CCE
    8ac6:	88 23       	and	r24, r24
    8ac8:	09 f4       	brne	.+2      	; 0x8acc <ProcessMusic+0xd8>
    8aca:	cc c0       	rjmp	.+408    	; 0x8c64 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8acc:	57 e1       	ldi	r21, 0x17	; 23
    8ace:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8ad0:	80 91 70 0d 	lds	r24, 0x0D70
    8ad4:	90 91 71 0d 	lds	r25, 0x0D71
    8ad8:	20 91 76 0d 	lds	r18, 0x0D76
    8adc:	30 91 77 0d 	lds	r19, 0x0D77
    8ae0:	82 17       	cp	r24, r18
    8ae2:	93 07       	cpc	r25, r19
    8ae4:	09 f0       	breq	.+2      	; 0x8ae8 <ProcessMusic+0xf4>
    8ae6:	b9 c0       	rjmp	.+370    	; 0x8c5a <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8ae8:	20 91 79 0d 	lds	r18, 0x0D79
    8aec:	30 91 7a 0d 	lds	r19, 0x0D7A
    8af0:	b9 01       	movw	r22, r18
    8af2:	6f 5f       	subi	r22, 0xFF	; 255
    8af4:	7f 4f       	sbci	r23, 0xFF	; 255
    8af6:	70 93 7a 0d 	sts	0x0D7A, r23
    8afa:	60 93 79 0d 	sts	0x0D79, r22
    8afe:	f9 01       	movw	r30, r18
    8b00:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8b02:	4f 3f       	cpi	r20, 0xFF	; 255
    8b04:	79 f5       	brne	.+94     	; 0x8b64 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8b06:	a9 01       	movw	r20, r18
    8b08:	4e 5f       	subi	r20, 0xFE	; 254
    8b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    8b0c:	50 93 7a 0d 	sts	0x0D7A, r21
    8b10:	40 93 79 0d 	sts	0x0D79, r20
    8b14:	fb 01       	movw	r30, r22
    8b16:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8b18:	6f 32       	cpi	r22, 0x2F	; 47
    8b1a:	19 f4       	brne	.+6      	; 0x8b22 <ProcessMusic+0x12e>
						playSong=false;
    8b1c:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8b20:	9c c0       	rjmp	.+312    	; 0x8c5a <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8b22:	66 30       	cpi	r22, 0x06	; 6
    8b24:	09 f0       	breq	.+2      	; 0x8b28 <ProcessMusic+0x134>
    8b26:	8c c0       	rjmp	.+280    	; 0x8c40 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8b28:	fa 01       	movw	r30, r20
    8b2a:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8b2c:	c9 01       	movw	r24, r18
    8b2e:	04 96       	adiw	r24, 0x04	; 4
    8b30:	90 93 7a 0d 	sts	0x0D7A, r25
    8b34:	80 93 79 0d 	sts	0x0D79, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8b38:	f9 01       	movw	r30, r18
    8b3a:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8b3c:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8b3e:	e3 35       	cpi	r30, 0x53	; 83
    8b40:	29 f4       	brne	.+10     	; 0x8b4c <ProcessMusic+0x158>
							loopStart=songPos;
    8b42:	90 93 7c 0d 	sts	0x0D7C, r25
    8b46:	80 93 7b 0d 	sts	0x0D7B, r24
    8b4a:	7a c0       	rjmp	.+244    	; 0x8c40 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8b4c:	e5 34       	cpi	r30, 0x45	; 69
    8b4e:	09 f0       	breq	.+2      	; 0x8b52 <ProcessMusic+0x15e>
    8b50:	77 c0       	rjmp	.+238    	; 0x8c40 <ProcessMusic+0x24c>
							songPos=loopStart;
    8b52:	80 91 7b 0d 	lds	r24, 0x0D7B
    8b56:	90 91 7c 0d 	lds	r25, 0x0D7C
    8b5a:	90 93 7a 0d 	sts	0x0D7A, r25
    8b5e:	80 93 79 0d 	sts	0x0D79, r24
    8b62:	6e c0       	rjmp	.+220    	; 0x8c40 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8b64:	47 fd       	sbrc	r20, 7
    8b66:	40 93 74 0d 	sts	0x0D74, r20
					channel=lastStatus&0x0f;
    8b6a:	90 91 74 0d 	lds	r25, 0x0D74
    8b6e:	89 2f       	mov	r24, r25
    8b70:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8b72:	47 ff       	sbrs	r20, 7
    8b74:	08 c0       	rjmp	.+16     	; 0x8b86 <ProcessMusic+0x192>
    8b76:	2e 5f       	subi	r18, 0xFE	; 254
    8b78:	3f 4f       	sbci	r19, 0xFF	; 255
    8b7a:	30 93 7a 0d 	sts	0x0D7A, r19
    8b7e:	20 93 79 0d 	sts	0x0D79, r18
    8b82:	fb 01       	movw	r30, r22
    8b84:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8b86:	90 7f       	andi	r25, 0xF0	; 240
    8b88:	90 3b       	cpi	r25, 0xB0	; 176
    8b8a:	e1 f0       	breq	.+56     	; 0x8bc4 <ProcessMusic+0x1d0>
    8b8c:	90 3c       	cpi	r25, 0xC0	; 192
    8b8e:	09 f4       	brne	.+2      	; 0x8b92 <ProcessMusic+0x19e>
    8b90:	51 c0       	rjmp	.+162    	; 0x8c34 <ProcessMusic+0x240>
    8b92:	90 39       	cpi	r25, 0x90	; 144
    8b94:	09 f0       	breq	.+2      	; 0x8b98 <ProcessMusic+0x1a4>
    8b96:	54 c0       	rjmp	.+168    	; 0x8c40 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8b98:	e0 91 79 0d 	lds	r30, 0x0D79
    8b9c:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8ba0:	9f 01       	movw	r18, r30
    8ba2:	2f 5f       	subi	r18, 0xFF	; 255
    8ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ba6:	30 93 7a 0d 	sts	0x0D7A, r19
    8baa:	20 93 79 0d 	sts	0x0D79, r18
    8bae:	24 91       	lpm	r18, Z
    8bb0:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8bb2:	f8 9e       	mul	r15, r24
    8bb4:	f0 01       	movw	r30, r0
    8bb6:	11 24       	eor	r1, r1
    8bb8:	e3 50       	subi	r30, 0x03	; 3
    8bba:	f3 4f       	sbci	r31, 0xF3	; 243
    8bbc:	60 89       	ldd	r22, Z+16	; 0x10
    8bbe:	0e 94 ba 44 	call	0x8974	; 0x8974 <TriggerNote>
    8bc2:	3e c0       	rjmp	.+124    	; 0x8c40 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8bc4:	e0 91 79 0d 	lds	r30, 0x0D79
    8bc8:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8bcc:	9f 01       	movw	r18, r30
    8bce:	2f 5f       	subi	r18, 0xFF	; 255
    8bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    8bd2:	30 93 7a 0d 	sts	0x0D7A, r19
    8bd6:	20 93 79 0d 	sts	0x0D79, r18
    8bda:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8bdc:	47 30       	cpi	r20, 0x07	; 7
    8bde:	49 f4       	brne	.+18     	; 0x8bf2 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8be0:	f8 9e       	mul	r15, r24
    8be2:	d0 01       	movw	r26, r0
    8be4:	11 24       	eor	r1, r1
    8be6:	a3 50       	subi	r26, 0x03	; 3
    8be8:	b3 4f       	sbci	r27, 0xF3	; 243
    8bea:	ee 0f       	add	r30, r30
    8bec:	1c 96       	adiw	r26, 0x0c	; 12
    8bee:	ec 93       	st	X, r30
    8bf0:	27 c0       	rjmp	.+78     	; 0x8c40 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8bf2:	4b 30       	cpi	r20, 0x0B	; 11
    8bf4:	49 f4       	brne	.+18     	; 0x8c08 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8bf6:	f8 9e       	mul	r15, r24
    8bf8:	d0 01       	movw	r26, r0
    8bfa:	11 24       	eor	r1, r1
    8bfc:	a3 50       	subi	r26, 0x03	; 3
    8bfe:	b3 4f       	sbci	r27, 0xF3	; 243
    8c00:	ee 0f       	add	r30, r30
    8c02:	13 96       	adiw	r26, 0x03	; 3
    8c04:	ec 93       	st	X, r30
    8c06:	1c c0       	rjmp	.+56     	; 0x8c40 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8c08:	4c 35       	cpi	r20, 0x5C	; 92
    8c0a:	49 f4       	brne	.+18     	; 0x8c1e <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8c0c:	f8 9e       	mul	r15, r24
    8c0e:	d0 01       	movw	r26, r0
    8c10:	11 24       	eor	r1, r1
    8c12:	a3 50       	subi	r26, 0x03	; 3
    8c14:	b3 4f       	sbci	r27, 0xF3	; 243
    8c16:	ee 0f       	add	r30, r30
    8c18:	1a 96       	adiw	r26, 0x0a	; 10
    8c1a:	ec 93       	st	X, r30
    8c1c:	11 c0       	rjmp	.+34     	; 0x8c40 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8c1e:	44 36       	cpi	r20, 0x64	; 100
    8c20:	79 f4       	brne	.+30     	; 0x8c40 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8c22:	f8 9e       	mul	r15, r24
    8c24:	d0 01       	movw	r26, r0
    8c26:	11 24       	eor	r1, r1
    8c28:	a3 50       	subi	r26, 0x03	; 3
    8c2a:	b3 4f       	sbci	r27, 0xF3	; 243
    8c2c:	ee 0f       	add	r30, r30
    8c2e:	1b 96       	adiw	r26, 0x0b	; 11
    8c30:	ec 93       	st	X, r30
    8c32:	06 c0       	rjmp	.+12     	; 0x8c40 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8c34:	f8 9e       	mul	r15, r24
    8c36:	f0 01       	movw	r30, r0
    8c38:	11 24       	eor	r1, r1
    8c3a:	e3 50       	subi	r30, 0x03	; 3
    8c3c:	f3 4f       	sbci	r31, 0xF3	; 243
    8c3e:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8c40:	89 e7       	ldi	r24, 0x79	; 121
    8c42:	9d e0       	ldi	r25, 0x0D	; 13
    8c44:	0e 94 be 43 	call	0x877c	; 0x877c <ReadVarLen>
    8c48:	90 93 77 0d 	sts	0x0D77, r25
    8c4c:	80 93 76 0d 	sts	0x0D76, r24
				currDeltaTime=0;
    8c50:	10 92 71 0d 	sts	0x0D71, r1
    8c54:	10 92 70 0d 	sts	0x0D70, r1
    8c58:	3b cf       	rjmp	.-394    	; 0x8ad0 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8c5a:	01 96       	adiw	r24, 0x01	; 1
    8c5c:	90 93 71 0d 	sts	0x0D71, r25
    8c60:	80 93 70 0d 	sts	0x0D70, r24
    8c64:	96 e0       	ldi	r25, 0x06	; 6
    8c66:	a9 2e       	mov	r10, r25
    8c68:	9d e0       	ldi	r25, 0x0D	; 13
    8c6a:	b9 2e       	mov	r11, r25
    8c6c:	20 e1       	ldi	r18, 0x10	; 16
    8c6e:	c2 2e       	mov	r12, r18
    8c70:	2d e0       	ldi	r18, 0x0D	; 13
    8c72:	d2 2e       	mov	r13, r18
    8c74:	31 e1       	ldi	r19, 0x11	; 17
    8c76:	e3 2e       	mov	r14, r19
    8c78:	3d e0       	ldi	r19, 0x0D	; 13
    8c7a:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8c7c:	66 24       	eor	r6, r6
    8c7e:	6a 94       	dec	r6
    8c80:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8c82:	88 81       	ld	r24, Y
    8c84:	85 ff       	sbrs	r24, 5
    8c86:	42 c0       	rjmp	.+132    	; 0x8d0c <ProcessMusic+0x318>
    8c88:	2d 89       	ldd	r18, Y+21	; 0x15
    8c8a:	3e 89       	ldd	r19, Y+22	; 0x16
    8c8c:	23 2b       	or	r18, r19
    8c8e:	09 f4       	brne	.+2      	; 0x8c92 <ProcessMusic+0x29e>
    8c90:	3d c0       	rjmp	.+122    	; 0x8d0c <ProcessMusic+0x318>
    8c92:	86 fd       	sbrc	r24, 6
    8c94:	3b c0       	rjmp	.+118    	; 0x8d0c <ProcessMusic+0x318>
    8c96:	47 01       	movw	r8, r14
    8c98:	f2 e0       	ldi	r31, 0x02	; 2
    8c9a:	8f 1a       	sub	r8, r31
    8c9c:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8c9e:	d6 01       	movw	r26, r12
    8ca0:	9c 91       	ld	r25, X
    8ca2:	f4 01       	movw	r30, r8
    8ca4:	80 81       	ld	r24, Z
    8ca6:	98 13       	cpse	r25, r24
    8ca8:	2e c0       	rjmp	.+92     	; 0x8d06 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8caa:	ed 89       	ldd	r30, Y+21	; 0x15
    8cac:	fe 89       	ldd	r31, Y+22	; 0x16
    8cae:	bf 01       	movw	r22, r30
    8cb0:	6f 5f       	subi	r22, 0xFF	; 255
    8cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    8cb4:	7e 8b       	std	Y+22, r23	; 0x16
    8cb6:	6d 8b       	std	Y+21, r22	; 0x15
    8cb8:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8cba:	8f 3f       	cpi	r24, 0xFF	; 255
    8cbc:	31 f4       	brne	.+12     	; 0x8cca <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8cbe:	88 81       	ld	r24, Y
    8cc0:	8f 77       	andi	r24, 0x7F	; 127
    8cc2:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8cc4:	1e 8a       	std	Y+22, r1	; 0x16
    8cc6:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8cc8:	1e c0       	rjmp	.+60     	; 0x8d06 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8cca:	9f 01       	movw	r18, r30
    8ccc:	2e 5f       	subi	r18, 0xFE	; 254
    8cce:	3f 4f       	sbci	r19, 0xFF	; 255
    8cd0:	3e 8b       	std	Y+22, r19	; 0x16
    8cd2:	2d 8b       	std	Y+21, r18	; 0x15
    8cd4:	fb 01       	movw	r30, r22
    8cd6:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8cd8:	e8 2f       	mov	r30, r24
    8cda:	f0 e0       	ldi	r31, 0x00	; 0
    8cdc:	ee 0f       	add	r30, r30
    8cde:	ff 1f       	adc	r31, r31
    8ce0:	ee 52       	subi	r30, 0x2E	; 46
    8ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    8ce4:	25 91       	lpm	r18, Z+
    8ce6:	34 91       	lpm	r19, Z
    8ce8:	ce 01       	movw	r24, r28
    8cea:	f9 01       	movw	r30, r18
    8cec:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8cee:	ed 89       	ldd	r30, Y+21	; 0x15
    8cf0:	fe 89       	ldd	r31, Y+22	; 0x16
    8cf2:	cf 01       	movw	r24, r30
    8cf4:	01 96       	adiw	r24, 0x01	; 1
    8cf6:	9e 8b       	std	Y+22, r25	; 0x16
    8cf8:	8d 8b       	std	Y+21, r24	; 0x15
    8cfa:	e4 91       	lpm	r30, Z
    8cfc:	d4 01       	movw	r26, r8
    8cfe:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8d00:	f6 01       	movw	r30, r12
    8d02:	10 82       	st	Z, r1
    8d04:	cc cf       	rjmp	.-104    	; 0x8c9e <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8d06:	9f 5f       	subi	r25, 0xFF	; 255
    8d08:	d6 01       	movw	r26, r12
    8d0a:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8d0c:	98 81       	ld	r25, Y
    8d0e:	95 ff       	sbrs	r25, 5
    8d10:	6c c0       	rjmp	.+216    	; 0x8dea <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8d12:	f7 01       	movw	r30, r14
    8d14:	80 81       	ld	r24, Z
    8d16:	8f 3f       	cpi	r24, 0xFF	; 255
    8d18:	11 f0       	breq	.+4      	; 0x8d1e <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8d1a:	8f 5f       	subi	r24, 0xFF	; 255
    8d1c:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8d1e:	97 fd       	sbrc	r25, 7
    8d20:	04 c0       	rjmp	.+8      	; 0x8d2a <ProcessMusic+0x336>
    8d22:	f7 01       	movw	r30, r14
    8d24:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8d26:	90 81       	ld	r25, Z
    8d28:	01 c0       	rjmp	.+2      	; 0x8d2c <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8d2a:	9f ef       	ldi	r25, 0xFF	; 255
    8d2c:	f7 01       	movw	r30, r14
    8d2e:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8d30:	80 81       	ld	r24, Z
    8d32:	88 23       	and	r24, r24
    8d34:	09 f4       	brne	.+2      	; 0x8d38 <ProcessMusic+0x344>
    8d36:	4e c0       	rjmp	.+156    	; 0x8dd4 <ProcessMusic+0x3e0>
    8d38:	31 96       	adiw	r30, 0x01	; 1
    8d3a:	50 81       	ld	r21, Z
    8d3c:	55 23       	and	r21, r21
    8d3e:	09 f4       	brne	.+2      	; 0x8d42 <ProcessMusic+0x34e>
    8d40:	49 c0       	rjmp	.+146    	; 0x8dd4 <ProcessMusic+0x3e0>
    8d42:	99 23       	and	r25, r25
    8d44:	09 f4       	brne	.+2      	; 0x8d48 <ProcessMusic+0x354>
    8d46:	46 c0       	rjmp	.+140    	; 0x8dd4 <ProcessMusic+0x3e0>
    8d48:	40 91 75 0d 	lds	r20, 0x0D75
    8d4c:	44 23       	and	r20, r20
    8d4e:	09 f4       	brne	.+2      	; 0x8d52 <ProcessMusic+0x35e>
    8d50:	41 c0       	rjmp	.+130    	; 0x8dd4 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8d52:	89 9f       	mul	r24, r25
    8d54:	c0 01       	movw	r24, r0
    8d56:	11 24       	eor	r1, r1
    8d58:	93 95       	inc	r25
				uVol>>=8;
    8d5a:	89 2f       	mov	r24, r25
    8d5c:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8d5e:	58 9f       	mul	r21, r24
    8d60:	90 01       	movw	r18, r0
    8d62:	59 9f       	mul	r21, r25
    8d64:	30 0d       	add	r19, r0
    8d66:	11 24       	eor	r1, r1
    8d68:	c9 01       	movw	r24, r18
    8d6a:	93 95       	inc	r25
				uVol>>=8;
    8d6c:	89 2f       	mov	r24, r25
    8d6e:	99 27       	eor	r25, r25
    8d70:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8d72:	50 81       	ld	r21, Z
    8d74:	58 9f       	mul	r21, r24
    8d76:	90 01       	movw	r18, r0
    8d78:	59 9f       	mul	r21, r25
    8d7a:	30 0d       	add	r19, r0
    8d7c:	11 24       	eor	r1, r1
    8d7e:	33 95       	inc	r19
					uVol>>=8;
    8d80:	23 2f       	mov	r18, r19
    8d82:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8d84:	42 9f       	mul	r20, r18
    8d86:	c0 01       	movw	r24, r0
    8d88:	43 9f       	mul	r20, r19
    8d8a:	90 0d       	add	r25, r0
    8d8c:	11 24       	eor	r1, r1
    8d8e:	93 95       	inc	r25
				uVol>>=8;
    8d90:	89 2f       	mov	r24, r25
    8d92:	99 27       	eor	r25, r25
    8d94:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8d96:	20 81       	ld	r18, Z
    8d98:	22 23       	and	r18, r18
    8d9a:	f1 f0       	breq	.+60     	; 0x8dd8 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8d9c:	d5 01       	movw	r26, r10
    8d9e:	ec 91       	ld	r30, X
    8da0:	f0 e0       	ldi	r31, 0x00	; 0
    8da2:	e0 50       	subi	r30, 0x00	; 0
    8da4:	ff 46       	sbci	r31, 0x6F	; 111
    8da6:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8da8:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8daa:	2e 9f       	mul	r18, r30
    8dac:	f0 01       	movw	r30, r0
    8dae:	11 24       	eor	r1, r1
    8db0:	f3 95       	inc	r31
					tVol>>=8;
    8db2:	ef 2f       	mov	r30, r31
    8db4:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8db6:	a3 01       	movw	r20, r6
    8db8:	4e 1b       	sub	r20, r30
    8dba:	5f 0b       	sbc	r21, r31
    8dbc:	48 9f       	mul	r20, r24
    8dbe:	90 01       	movw	r18, r0
    8dc0:	49 9f       	mul	r20, r25
    8dc2:	30 0d       	add	r19, r0
    8dc4:	58 9f       	mul	r21, r24
    8dc6:	30 0d       	add	r19, r0
    8dc8:	11 24       	eor	r1, r1
    8dca:	c9 01       	movw	r24, r18
    8dcc:	93 95       	inc	r25
					uVol>>=8;
    8dce:	89 2f       	mov	r24, r25
    8dd0:	99 27       	eor	r25, r25
    8dd2:	02 c0       	rjmp	.+4      	; 0x8dd8 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8dd4:	80 e0       	ldi	r24, 0x00	; 0
    8dd6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8dd8:	f5 01       	movw	r30, r10
    8dda:	30 81       	ld	r19, Z
    8ddc:	f7 01       	movw	r30, r14
    8dde:	39 97       	sbiw	r30, 0x09	; 9
    8de0:	20 81       	ld	r18, Z
    8de2:	23 0f       	add	r18, r19
    8de4:	d5 01       	movw	r26, r10
    8de6:	2c 93       	st	X, r18
    8de8:	02 c0       	rjmp	.+4      	; 0x8dee <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8dea:	80 e0       	ldi	r24, 0x00	; 0
    8dec:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8dee:	f8 01       	movw	r30, r16
    8df0:	80 83       	st	Z, r24
    8df2:	67 96       	adiw	r28, 0x17	; 23
    8df4:	0a 5f       	subi	r16, 0xFA	; 250
    8df6:	1f 4f       	sbci	r17, 0xFF	; 255
    8df8:	f7 e1       	ldi	r31, 0x17	; 23
    8dfa:	af 0e       	add	r10, r31
    8dfc:	b1 1c       	adc	r11, r1
    8dfe:	87 e1       	ldi	r24, 0x17	; 23
    8e00:	c8 0e       	add	r12, r24
    8e02:	d1 1c       	adc	r13, r1
    8e04:	97 e1       	ldi	r25, 0x17	; 23
    8e06:	e9 0e       	add	r14, r25
    8e08:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8e0a:	ad e0       	ldi	r26, 0x0D	; 13
    8e0c:	c0 37       	cpi	r28, 0x70	; 112
    8e0e:	da 07       	cpc	r29, r26
    8e10:	09 f0       	breq	.+2      	; 0x8e14 <ProcessMusic+0x420>
    8e12:	37 cf       	rjmp	.-402    	; 0x8c82 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8e14:	df 91       	pop	r29
    8e16:	cf 91       	pop	r28
    8e18:	1f 91       	pop	r17
    8e1a:	0f 91       	pop	r16
    8e1c:	ff 90       	pop	r15
    8e1e:	ef 90       	pop	r14
    8e20:	df 90       	pop	r13
    8e22:	cf 90       	pop	r12
    8e24:	bf 90       	pop	r11
    8e26:	af 90       	pop	r10
    8e28:	9f 90       	pop	r9
    8e2a:	8f 90       	pop	r8
    8e2c:	7f 90       	pop	r7
    8e2e:	6f 90       	pop	r6
    8e30:	08 95       	ret

00008e32 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8e32:	80 93 75 0d 	sts	0x0D75, r24
    8e36:	08 95       	ret

00008e38 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8e38:	99 27       	eor	r25, r25
	clr r23
    8e3a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8e3c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8e3e:	09 f4       	brne	.+2      	; 0x8e42 <set_note_waves>
		ret
    8e40:	08 95       	ret

00008e42 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8e42:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8e44:	ff e8       	ldi	r31, 0x8F	; 143
	lsl r22
    8e46:	66 0f       	add	r22, r22
	rol r23
    8e48:	77 1f       	adc	r23, r23
	add ZL,r22
    8e4a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8e4c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8e4e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8e50:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8e52:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8e54:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8e56:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8e58:	28 9f       	mul	r18, r24
	add ZL,r0
    8e5a:	e0 0d       	add	r30, r0
	adc ZH,r1
    8e5c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8e5e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8e60:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8e62:	11 24       	eor	r1, r1
	

	ret
    8e64:	08 95       	ret

00008e66 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8e66:	99 27       	eor	r25, r25
	clr r23
    8e68:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8e6a:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    8e6c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8e6e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8e70:	28 9f       	mul	r18, r24
	add ZL,r0
    8e72:	e0 0d       	add	r30, r0
	adc ZH,r1
    8e74:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8e76:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8e78:	31 f4       	brne	.+12     	; 0x8e86 <smw1>
	lds r22,tr4_params
    8e7a:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    8e7e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8e80:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    8e84:	0b c0       	rjmp	.+22     	; 0x8e9c <esmw>

00008e86 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8e86:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8e88:	31 f4       	brne	.+12     	; 0x8e96 <smw2>
	lds r22,tr4_params
    8e8a:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    8e8e:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8e90:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    8e94:	03 c0       	rjmp	.+6      	; 0x8e9c <esmw>

00008e96 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8e96:	71 e9       	ldi	r23, 0x91	; 145
	add r23,r22
    8e98:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8e9a:	75 83       	std	Z+5, r23	; 0x05

00008e9c <esmw>:

esmw:
	clr r1	
    8e9c:	11 24       	eor	r1, r1
	ret
    8e9e:	08 95       	ret
	...

00008f00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8f00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8f02:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    8f06:	08 95       	ret

00008f08 <steptable>:
    8f08:	22 00       	.word	0x0022	; ????
    8f0a:	24 00       	.word	0x0024	; ????
    8f0c:	26 00       	.word	0x0026	; ????
    8f0e:	28 00       	.word	0x0028	; ????
    8f10:	2b 00       	.word	0x002b	; ????
    8f12:	2d 00       	.word	0x002d	; ????
    8f14:	30 00       	.word	0x0030	; ????
    8f16:	33 00       	.word	0x0033	; ????
    8f18:	36 00       	.word	0x0036	; ????
    8f1a:	39 00       	.word	0x0039	; ????
    8f1c:	3d 00       	.word	0x003d	; ????
    8f1e:	40 00       	.word	0x0040	; ????
    8f20:	44 00       	.word	0x0044	; ????
    8f22:	48 00       	.word	0x0048	; ????
    8f24:	4c 00       	.word	0x004c	; ????
    8f26:	51 00       	.word	0x0051	; ????
    8f28:	56 00       	.word	0x0056	; ????
    8f2a:	5b 00       	.word	0x005b	; ????
    8f2c:	60 00       	.word	0x0060	; ????
    8f2e:	66 00       	.word	0x0066	; ????
    8f30:	6c 00       	.word	0x006c	; ????
    8f32:	73 00       	.word	0x0073	; ????
    8f34:	79 00       	.word	0x0079	; ????
    8f36:	81 00       	.word	0x0081	; ????
    8f38:	88 00       	.word	0x0088	; ????
    8f3a:	90 00       	.word	0x0090	; ????
    8f3c:	99 00       	.word	0x0099	; ????
    8f3e:	a2 00       	.word	0x00a2	; ????
    8f40:	ac 00       	.word	0x00ac	; ????
    8f42:	b6 00       	.word	0x00b6	; ????
    8f44:	c1 00       	.word	0x00c1	; ????
    8f46:	cc 00       	.word	0x00cc	; ????
    8f48:	d8 00       	.word	0x00d8	; ????
    8f4a:	e5 00       	.word	0x00e5	; ????
    8f4c:	f3 00       	.word	0x00f3	; ????
    8f4e:	01 01       	movw	r0, r2
    8f50:	10 01       	movw	r2, r0
    8f52:	21 01       	movw	r4, r2
    8f54:	32 01       	movw	r6, r4
    8f56:	44 01       	movw	r8, r8
    8f58:	57 01       	movw	r10, r14
    8f5a:	6c 01       	movw	r12, r24
    8f5c:	81 01       	movw	r16, r2
    8f5e:	98 01       	movw	r18, r16
    8f60:	b0 01       	movw	r22, r0
    8f62:	ca 01       	movw	r24, r20
    8f64:	e5 01       	movw	r28, r10
    8f66:	02 02       	muls	r16, r18
    8f68:	21 02       	muls	r18, r17
    8f6a:	41 02       	muls	r20, r17
    8f6c:	64 02       	muls	r22, r20
    8f6e:	88 02       	muls	r24, r24
    8f70:	ae 02       	muls	r26, r30
    8f72:	d7 02       	muls	r29, r23
    8f74:	03 03       	mulsu	r16, r19
    8f76:	30 03       	mulsu	r19, r16
    8f78:	61 03       	mulsu	r22, r17
    8f7a:	94 03       	fmuls	r17, r20
    8f7c:	cb 03       	fmulsu	r20, r19
    8f7e:	05 04       	cpc	r0, r5
    8f80:	42 04       	cpc	r4, r2
    8f82:	83 04       	cpc	r8, r3
    8f84:	c7 04       	cpc	r12, r7
    8f86:	10 05       	cpc	r17, r0
    8f88:	5d 05       	cpc	r21, r13
    8f8a:	af 05       	cpc	r26, r15
    8f8c:	05 06       	cpc	r0, r21
    8f8e:	61 06       	cpc	r6, r17
    8f90:	c2 06       	cpc	r12, r18
    8f92:	29 07       	cpc	r18, r25
    8f94:	96 07       	cpc	r25, r22
    8f96:	09 08       	sbc	r0, r9
    8f98:	83 08       	sbc	r8, r3
    8f9a:	05 09       	sbc	r16, r5
    8f9c:	8e 09       	sbc	r24, r14
    8f9e:	20 0a       	sbc	r2, r16
    8fa0:	ba 0a       	sbc	r11, r26
    8fa2:	5d 0b       	sbc	r21, r29
    8fa4:	0a 0c       	add	r0, r10
    8fa6:	c1 0c       	add	r12, r1
    8fa8:	84 0d       	add	r24, r4
    8faa:	51 0e       	add	r5, r17
    8fac:	2b 0f       	add	r18, r27
    8fae:	12 10       	cpse	r1, r2
    8fb0:	07 11       	cpse	r16, r7
    8fb2:	0a 12       	cpse	r0, r26
    8fb4:	1d 13       	cpse	r17, r29
    8fb6:	40 14       	cp	r4, r0
    8fb8:	74 15       	cp	r23, r4
    8fba:	ba 16       	cp	r11, r26
    8fbc:	14 18       	sub	r1, r4
    8fbe:	83 19       	sub	r24, r3
    8fc0:	07 1b       	sub	r16, r23
    8fc2:	a3 1c       	adc	r10, r3
    8fc4:	57 1e       	adc	r5, r23
    8fc6:	24 20       	and	r2, r4
    8fc8:	0e 22       	and	r0, r30
    8fca:	14 24       	eor	r1, r4
    8fcc:	39 26       	eor	r3, r25
    8fce:	7f 28       	or	r7, r15
    8fd0:	e8 2a       	or	r14, r24
    8fd2:	75 2d       	mov	r23, r5
    8fd4:	29 30       	cpi	r18, 0x09	; 9
    8fd6:	06 33       	cpi	r16, 0x36	; 54
    8fd8:	0f 36       	cpi	r16, 0x6F	; 111
    8fda:	45 39       	cpi	r20, 0x95	; 149
    8fdc:	ad 3c       	cpi	r26, 0xCD	; 205
    8fde:	49 40       	sbci	r20, 0x09	; 9
    8fe0:	1b 44       	sbci	r17, 0x4B	; 75
    8fe2:	28 48       	sbci	r18, 0x88	; 136
    8fe4:	73 4c       	sbci	r23, 0xC3	; 195
    8fe6:	fe 50       	subi	r31, 0x0E	; 14
    8fe8:	cf 55       	subi	r28, 0x5F	; 95
    8fea:	ea 5a       	subi	r30, 0xAA	; 170
    8fec:	51 60       	ori	r21, 0x01	; 1
    8fee:	0c 66       	ori	r16, 0x6C	; 108
    8ff0:	1d 6c       	ori	r17, 0xCD	; 205
    8ff2:	8b 72       	andi	r24, 0x2B	; 43
    8ff4:	5a 79       	andi	r21, 0x9A	; 154
    8ff6:	92 80       	ldd	r9, Z+2	; 0x02
    8ff8:	37 88       	ldd	r3, Z+23	; 0x17
    8ffa:	50 90 e5 98 	lds	r5, 0x98E5
    8ffe:	fd a1       	ldd	r31, Y+37	; 0x25
    9000:	9f ab       	std	Y+55, r25	; 0x37
    9002:	d3 b5       	in	r29, 0x23	; 35
    9004:	a3 c0       	rjmp	.+326    	; 0x914c <waves+0x4c>
	...

00009100 <waves>:
    9100:	00 03       	mulsu	r16, r16
    9102:	06 09       	sbc	r16, r6
    9104:	0c 10       	cpse	r0, r12
    9106:	13 16       	cp	r1, r19
    9108:	19 1c       	adc	r1, r9
    910a:	1f 22       	and	r1, r31
    910c:	25 28       	or	r2, r5
    910e:	2b 2e       	mov	r2, r27
    9110:	31 33       	cpi	r19, 0x31	; 49
    9112:	36 39       	cpi	r19, 0x96	; 150
    9114:	3c 3f       	cpi	r19, 0xFC	; 252
    9116:	41 44       	sbci	r20, 0x41	; 65
    9118:	47 49       	sbci	r20, 0x97	; 151
    911a:	4c 4e       	sbci	r20, 0xEC	; 236
    911c:	51 53       	subi	r21, 0x31	; 49
    911e:	55 58       	subi	r21, 0x85	; 133
    9120:	5a 5c       	subi	r21, 0xCA	; 202
    9122:	5e 60       	ori	r21, 0x0E	; 14
    9124:	62 64       	ori	r22, 0x42	; 66
    9126:	66 68       	ori	r22, 0x86	; 134
    9128:	6a 6b       	ori	r22, 0xBA	; 186
    912a:	6d 6f       	ori	r22, 0xFD	; 253
    912c:	70 71       	andi	r23, 0x10	; 16
    912e:	73 74       	andi	r23, 0x43	; 67
    9130:	75 76       	andi	r23, 0x65	; 101
    9132:	78 79       	andi	r23, 0x98	; 152
    9134:	7a 7a       	andi	r23, 0xAA	; 170
    9136:	7b 7c       	andi	r23, 0xCB	; 203
    9138:	7d 7d       	andi	r23, 0xDD	; 221
    913a:	7e 7e       	andi	r23, 0xEE	; 238
    913c:	7e 7f       	andi	r23, 0xFE	; 254
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7e 7e       	andi	r23, 0xEE	; 238
    9146:	7e 7d       	andi	r23, 0xDE	; 222
    9148:	7d 7c       	andi	r23, 0xCD	; 205
    914a:	7b 7a       	andi	r23, 0xAB	; 171
    914c:	7a 79       	andi	r23, 0x9A	; 154
    914e:	78 76       	andi	r23, 0x68	; 104
    9150:	75 74       	andi	r23, 0x45	; 69
    9152:	73 71       	andi	r23, 0x13	; 19
    9154:	70 6f       	ori	r23, 0xF0	; 240
    9156:	6d 6b       	ori	r22, 0xBD	; 189
    9158:	6a 68       	ori	r22, 0x8A	; 138
    915a:	66 64       	ori	r22, 0x46	; 70
    915c:	62 60       	ori	r22, 0x02	; 2
    915e:	5e 5c       	subi	r21, 0xCE	; 206
    9160:	5a 58       	subi	r21, 0x8A	; 138
    9162:	55 53       	subi	r21, 0x35	; 53
    9164:	51 4e       	sbci	r21, 0xE1	; 225
    9166:	4c 49       	sbci	r20, 0x9C	; 156
    9168:	47 44       	sbci	r20, 0x47	; 71
    916a:	41 3f       	cpi	r20, 0xF1	; 241
    916c:	3c 39       	cpi	r19, 0x9C	; 156
    916e:	36 33       	cpi	r19, 0x36	; 54
    9170:	31 2e       	mov	r3, r17
    9172:	2b 28       	or	r2, r11
    9174:	25 22       	and	r2, r21
    9176:	1f 1c       	adc	r1, r15
    9178:	19 16       	cp	r1, r25
    917a:	13 10       	cpse	r1, r3
    917c:	0c 09       	sbc	r16, r12
    917e:	06 03       	mulsu	r16, r22
    9180:	00 fd       	sbrc	r16, 0
    9182:	fa f7       	brpl	.-2      	; 0x9182 <waves+0x82>
    9184:	f4 f0       	brlt	.+60     	; 0x91c2 <waves+0xc2>
    9186:	ed ea       	ldi	r30, 0xAD	; 173
    9188:	e7 e4       	ldi	r30, 0x47	; 71
    918a:	e1 de       	rcall	.-574    	; 0x8f4e <steptable+0x46>
    918c:	db d8       	rcall	.-3658   	; 0x8344 <FormatEeprom+0x3e>
    918e:	d5 d2       	rcall	.+1450   	; 0x973a <waves+0x63a>
    9190:	cf cd       	rjmp	.-1122   	; 0x8d30 <ProcessMusic+0x33c>
    9192:	ca c7       	rjmp	.+3988   	; 0xa128 <LBPrintChar+0x2c>
    9194:	c4 c1       	rjmp	.+904    	; 0x951e <waves+0x41e>
    9196:	bf bc       	out	0x2f, r11	; 47
    9198:	b9 b7       	in	r27, 0x39	; 57
    919a:	b4 b2       	in	r11, 0x14	; 20
    919c:	af ad       	ldd	r26, Y+63	; 0x3f
    919e:	ab a8       	ldd	r10, Y+51	; 0x33
    91a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    91a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    91a4:	9e 9c       	mul	r9, r14
    91a6:	9a 98       	cbi	0x13, 2	; 19
    91a8:	96 95       	lsr	r25
    91aa:	93 91       	.word	0x9193	; ????
    91ac:	90 8f       	std	Z+24, r25	; 0x18
    91ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    91b0:	8b 8a       	std	Y+19, r8	; 0x13
    91b2:	88 87       	std	Y+8, r24	; 0x08
    91b4:	86 86       	std	Z+14, r8	; 0x0e
    91b6:	85 84       	ldd	r8, Z+13	; 0x0d
    91b8:	83 83       	std	Z+3, r24	; 0x03
    91ba:	82 82       	std	Z+2, r8	; 0x02
    91bc:	82 81       	ldd	r24, Z+2	; 0x02
    91be:	81 81       	ldd	r24, Z+1	; 0x01
    91c0:	81 81       	ldd	r24, Z+1	; 0x01
    91c2:	81 81       	ldd	r24, Z+1	; 0x01
    91c4:	82 82       	std	Z+2, r8	; 0x02
    91c6:	82 83       	std	Z+2, r24	; 0x02
    91c8:	83 84       	ldd	r8, Z+11	; 0x0b
    91ca:	85 86       	std	Z+13, r8	; 0x0d
    91cc:	86 87       	std	Z+14, r24	; 0x0e
    91ce:	88 8a       	std	Y+16, r8	; 0x10
    91d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    91d2:	8d 8f       	std	Y+29, r24	; 0x1d
    91d4:	90 91 93 95 	lds	r25, 0x9593
    91d8:	96 98       	cbi	0x12, 6	; 18
    91da:	9a 9c       	mul	r9, r10
    91dc:	9e a0       	ldd	r9, Y+38	; 0x26
    91de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    91e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    91e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    91e4:	af b2       	in	r10, 0x1f	; 31
    91e6:	b4 b7       	in	r27, 0x34	; 52
    91e8:	b9 bc       	out	0x29, r11	; 41
    91ea:	bf c1       	rjmp	.+894    	; 0x956a <waves+0x46a>
    91ec:	c4 c7       	rjmp	.+3976   	; 0xa176 <LBPrintByte+0x2>
    91ee:	ca cd       	rjmp	.-1132   	; 0x8d84 <ProcessMusic+0x390>
    91f0:	cf d2       	rcall	.+1438   	; 0x9790 <waves+0x690>
    91f2:	d5 d8       	rcall	.-3670   	; 0x839e <EepromBlockExists+0x26>
    91f4:	db de       	rcall	.-586    	; 0x8fac <steptable+0xa4>
    91f6:	e1 e4       	ldi	r30, 0x41	; 65
    91f8:	e7 ea       	ldi	r30, 0xA7	; 167
    91fa:	ed f0       	brhs	.+58     	; 0x9236 <waves+0x136>
    91fc:	f4 f7       	brge	.-4      	; 0x91fa <waves+0xfa>
    91fe:	fa fd       	.word	0xfdfa	; ????
    9200:	80 81       	ld	r24, Z
    9202:	82 83       	std	Z+2, r24	; 0x02
    9204:	84 85       	ldd	r24, Z+12	; 0x0c
    9206:	86 87       	std	Z+14, r24	; 0x0e
    9208:	88 89       	ldd	r24, Y+16	; 0x10
    920a:	8a 8b       	std	Y+18, r24	; 0x12
    920c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    920e:	8e 8f       	std	Y+30, r24	; 0x1e
    9210:	90 91 92 93 	lds	r25, 0x9392
    9214:	94 95       	.word	0x9594	; ????
    9216:	96 97       	sbiw	r26, 0x26	; 38
    9218:	98 99       	sbic	0x13, 0	; 19
    921a:	9a 9b       	sbis	0x13, 2	; 19
    921c:	9c 9d       	mul	r25, r12
    921e:	9e 9f       	mul	r25, r30
    9220:	a0 a1       	ldd	r26, Z+32	; 0x20
    9222:	a2 a3       	std	Z+34, r26	; 0x22
    9224:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9226:	a6 a7       	std	Z+46, r26	; 0x2e
    9228:	a8 a9       	ldd	r26, Y+48	; 0x30
    922a:	aa ab       	std	Y+50, r26	; 0x32
    922c:	ac ad       	ldd	r26, Y+60	; 0x3c
    922e:	ae af       	std	Y+62, r26	; 0x3e
    9230:	b0 b1       	in	r27, 0x00	; 0
    9232:	b2 b3       	in	r27, 0x12	; 18
    9234:	b4 b5       	in	r27, 0x24	; 36
    9236:	b6 b7       	in	r27, 0x36	; 54
    9238:	b8 b9       	out	0x08, r27	; 8
    923a:	ba bb       	out	0x1a, r27	; 26
    923c:	bc bd       	out	0x2c, r27	; 44
    923e:	be bf       	out	0x3e, r27	; 62
    9240:	c0 c1       	rjmp	.+896    	; 0x95c2 <waves+0x4c2>
    9242:	c2 c3       	rjmp	.+1924   	; 0x99c8 <waves+0x8c8>
    9244:	c4 c5       	rjmp	.+2952   	; 0x9dce <DrawMap+0x16>
    9246:	c6 c7       	rjmp	.+3980   	; 0xa1d4 <LBPrintByte+0x60>
    9248:	c8 c9       	rjmp	.-3184   	; 0x85da <PatchCommand11+0x2c>
    924a:	ca cb       	rjmp	.-2156   	; 0x89e0 <TriggerNote+0x6c>
    924c:	cc cd       	rjmp	.-1128   	; 0x8de6 <ProcessMusic+0x3f2>
    924e:	ce cf       	rjmp	.-100    	; 0x91ec <waves+0xec>
    9250:	d0 d1       	rcall	.+928    	; 0x95f2 <waves+0x4f2>
    9252:	d2 d3       	rcall	.+1956   	; 0x99f8 <waves+0x8f8>
    9254:	d4 d5       	rcall	.+2984   	; 0x9dfe <DrawMap+0x46>
    9256:	d6 d7       	rcall	.+4012   	; 0xa204 <LBPrintInt+0x2e>
    9258:	d8 d9       	rcall	.-3152   	; 0x860a <PatchCommand11+0x5c>
    925a:	da db       	rcall	.-2124   	; 0x8a10 <ProcessMusic+0x1c>
    925c:	dc dd       	rcall	.-1096   	; 0x8e16 <ProcessMusic+0x422>
    925e:	de df       	rcall	.-68     	; 0x921c <waves+0x11c>
    9260:	e0 e1       	ldi	r30, 0x10	; 16
    9262:	e2 e3       	ldi	r30, 0x32	; 50
    9264:	e4 e5       	ldi	r30, 0x54	; 84
    9266:	e6 e7       	ldi	r30, 0x76	; 118
    9268:	e8 e9       	ldi	r30, 0x98	; 152
    926a:	ea eb       	ldi	r30, 0xBA	; 186
    926c:	ec ed       	ldi	r30, 0xDC	; 220
    926e:	ee ef       	ldi	r30, 0xFE	; 254
    9270:	f0 f1       	brcs	.+124    	; 0x92ee <waves+0x1ee>
    9272:	f2 f3       	brmi	.-4      	; 0x9270 <waves+0x170>
    9274:	f4 f5       	brge	.+124    	; 0x92f2 <waves+0x1f2>
    9276:	f6 f7       	brtc	.-4      	; 0x9274 <waves+0x174>
    9278:	f8 f9       	.word	0xf9f8	; ????
    927a:	fa fb       	.word	0xfbfa	; ????
    927c:	fc fd       	.word	0xfdfc	; ????
    927e:	fe ff       	.word	0xfffe	; ????
    9280:	00 01       	movw	r0, r0
    9282:	02 03       	mulsu	r16, r18
    9284:	04 05       	cpc	r16, r4
    9286:	06 07       	cpc	r16, r22
    9288:	08 09       	sbc	r16, r8
    928a:	0a 0b       	sbc	r16, r26
    928c:	0c 0d       	add	r16, r12
    928e:	0e 0f       	add	r16, r30
    9290:	10 11       	cpse	r17, r0
    9292:	12 13       	cpse	r17, r18
    9294:	14 15       	cp	r17, r4
    9296:	16 17       	cp	r17, r22
    9298:	18 19       	sub	r17, r8
    929a:	1a 1b       	sub	r17, r26
    929c:	1c 1d       	adc	r17, r12
    929e:	1e 1f       	adc	r17, r30
    92a0:	20 21       	and	r18, r0
    92a2:	22 23       	and	r18, r18
    92a4:	24 25       	eor	r18, r4
    92a6:	26 27       	eor	r18, r22
    92a8:	28 29       	or	r18, r8
    92aa:	2a 2b       	or	r18, r26
    92ac:	2c 2d       	mov	r18, r12
    92ae:	2e 2f       	mov	r18, r30
    92b0:	30 31       	cpi	r19, 0x10	; 16
    92b2:	32 33       	cpi	r19, 0x32	; 50
    92b4:	34 35       	cpi	r19, 0x54	; 84
    92b6:	36 37       	cpi	r19, 0x76	; 118
    92b8:	38 39       	cpi	r19, 0x98	; 152
    92ba:	3a 3b       	cpi	r19, 0xBA	; 186
    92bc:	3c 3d       	cpi	r19, 0xDC	; 220
    92be:	3e 3f       	cpi	r19, 0xFE	; 254
    92c0:	40 41       	sbci	r20, 0x10	; 16
    92c2:	42 43       	sbci	r20, 0x32	; 50
    92c4:	44 45       	sbci	r20, 0x54	; 84
    92c6:	46 47       	sbci	r20, 0x76	; 118
    92c8:	48 49       	sbci	r20, 0x98	; 152
    92ca:	4a 4b       	sbci	r20, 0xBA	; 186
    92cc:	4c 4d       	sbci	r20, 0xDC	; 220
    92ce:	4e 4f       	sbci	r20, 0xFE	; 254
    92d0:	50 51       	subi	r21, 0x10	; 16
    92d2:	52 53       	subi	r21, 0x32	; 50
    92d4:	54 55       	subi	r21, 0x54	; 84
    92d6:	56 57       	subi	r21, 0x76	; 118
    92d8:	58 59       	subi	r21, 0x98	; 152
    92da:	5a 5b       	subi	r21, 0xBA	; 186
    92dc:	5c 5d       	subi	r21, 0xDC	; 220
    92de:	5e 5f       	subi	r21, 0xFE	; 254
    92e0:	60 61       	ori	r22, 0x10	; 16
    92e2:	62 63       	ori	r22, 0x32	; 50
    92e4:	64 65       	ori	r22, 0x54	; 84
    92e6:	66 67       	ori	r22, 0x76	; 118
    92e8:	68 69       	ori	r22, 0x98	; 152
    92ea:	6a 6b       	ori	r22, 0xBA	; 186
    92ec:	6c 6d       	ori	r22, 0xDC	; 220
    92ee:	6e 6f       	ori	r22, 0xFE	; 254
    92f0:	70 71       	andi	r23, 0x10	; 16
    92f2:	72 73       	andi	r23, 0x32	; 50
    92f4:	74 75       	andi	r23, 0x54	; 84
    92f6:	76 77       	andi	r23, 0x76	; 118
    92f8:	78 79       	andi	r23, 0x98	; 152
    92fa:	7a 7b       	andi	r23, 0xBA	; 186
    92fc:	7c 7d       	andi	r23, 0xDC	; 220
    92fe:	7e 7f       	andi	r23, 0xFE	; 254
    9300:	00 02       	muls	r16, r16
    9302:	04 06       	cpc	r0, r20
    9304:	08 0a       	sbc	r0, r24
    9306:	0c 0e       	add	r0, r28
    9308:	10 12       	cpse	r1, r16
    930a:	14 16       	cp	r1, r20
    930c:	18 1a       	sub	r1, r24
    930e:	1c 1e       	adc	r1, r28
    9310:	20 22       	and	r2, r16
    9312:	24 26       	eor	r2, r20
    9314:	28 2a       	or	r2, r24
    9316:	2c 2e       	mov	r2, r28
    9318:	30 32       	cpi	r19, 0x20	; 32
    931a:	34 36       	cpi	r19, 0x64	; 100
    931c:	38 3a       	cpi	r19, 0xA8	; 168
    931e:	3c 3e       	cpi	r19, 0xEC	; 236
    9320:	40 42       	sbci	r20, 0x20	; 32
    9322:	44 46       	sbci	r20, 0x64	; 100
    9324:	48 4a       	sbci	r20, 0xA8	; 168
    9326:	4c 4e       	sbci	r20, 0xEC	; 236
    9328:	50 52       	subi	r21, 0x20	; 32
    932a:	54 56       	subi	r21, 0x64	; 100
    932c:	58 5a       	subi	r21, 0xA8	; 168
    932e:	5c 5e       	subi	r21, 0xEC	; 236
    9330:	60 62       	ori	r22, 0x20	; 32
    9332:	64 66       	ori	r22, 0x64	; 100
    9334:	68 6a       	ori	r22, 0xA8	; 168
    9336:	6c 6e       	ori	r22, 0xEC	; 236
    9338:	70 72       	andi	r23, 0x20	; 32
    933a:	74 76       	andi	r23, 0x64	; 100
    933c:	78 7a       	andi	r23, 0xA8	; 168
    933e:	7c 7e       	andi	r23, 0xEC	; 236
    9340:	7f 7d       	andi	r23, 0xDF	; 223
    9342:	7b 79       	andi	r23, 0x9B	; 155
    9344:	77 75       	andi	r23, 0x57	; 87
    9346:	73 71       	andi	r23, 0x13	; 19
    9348:	6f 6d       	ori	r22, 0xDF	; 223
    934a:	6b 69       	ori	r22, 0x9B	; 155
    934c:	67 65       	ori	r22, 0x57	; 87
    934e:	63 61       	ori	r22, 0x13	; 19
    9350:	5f 5d       	subi	r21, 0xDF	; 223
    9352:	5b 59       	subi	r21, 0x9B	; 155
    9354:	57 55       	subi	r21, 0x57	; 87
    9356:	53 51       	subi	r21, 0x13	; 19
    9358:	4f 4d       	sbci	r20, 0xDF	; 223
    935a:	4b 49       	sbci	r20, 0x9B	; 155
    935c:	47 45       	sbci	r20, 0x57	; 87
    935e:	43 41       	sbci	r20, 0x13	; 19
    9360:	3f 3d       	cpi	r19, 0xDF	; 223
    9362:	3b 39       	cpi	r19, 0x9B	; 155
    9364:	37 35       	cpi	r19, 0x57	; 87
    9366:	33 31       	cpi	r19, 0x13	; 19
    9368:	2f 2d       	mov	r18, r15
    936a:	2b 29       	or	r18, r11
    936c:	27 25       	eor	r18, r7
    936e:	23 21       	and	r18, r3
    9370:	1f 1d       	adc	r17, r15
    9372:	1b 19       	sub	r17, r11
    9374:	17 15       	cp	r17, r7
    9376:	13 11       	cpse	r17, r3
    9378:	0f 0d       	add	r16, r15
    937a:	0b 09       	sbc	r16, r11
    937c:	07 05       	cpc	r16, r7
    937e:	03 01       	movw	r0, r6
    9380:	ff fd       	.word	0xfdff	; ????
    9382:	fb f9       	.word	0xf9fb	; ????
    9384:	f7 f5       	brid	.+124    	; 0x9402 <waves+0x302>
    9386:	f3 f1       	brvs	.+124    	; 0x9404 <waves+0x304>
    9388:	ef ed       	ldi	r30, 0xDF	; 223
    938a:	eb e9       	ldi	r30, 0x9B	; 155
    938c:	e7 e5       	ldi	r30, 0x57	; 87
    938e:	e3 e1       	ldi	r30, 0x13	; 19
    9390:	df dd       	rcall	.-1090   	; 0x8f50 <steptable+0x48>
    9392:	db d9       	rcall	.-3146   	; 0x874a <StartSong+0x3c>
    9394:	d7 d5       	rcall	.+2990   	; 0x9f44 <FadeIn+0x2>
    9396:	d3 d1       	rcall	.+934    	; 0x973e <waves+0x63e>
    9398:	cf cd       	rjmp	.-1122   	; 0x8f38 <steptable+0x30>
    939a:	cb c9       	rjmp	.-3178   	; 0x8732 <StartSong+0x24>
    939c:	c7 c5       	rjmp	.+2958   	; 0x9f2c <doFade+0x6>
    939e:	c3 c1       	rjmp	.+902    	; 0x9726 <waves+0x626>
    93a0:	bf bd       	out	0x2f, r27	; 47
    93a2:	bb b9       	out	0x0b, r27	; 11
    93a4:	b7 b5       	in	r27, 0x27	; 39
    93a6:	b3 b1       	in	r27, 0x03	; 3
    93a8:	af ad       	ldd	r26, Y+63	; 0x3f
    93aa:	ab a9       	ldd	r26, Y+51	; 0x33
    93ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    93ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    93b0:	9f 9d       	mul	r25, r15
    93b2:	9b 99       	sbic	0x13, 3	; 19
    93b4:	97 95       	ror	r25
    93b6:	93 91       	.word	0x9193	; ????
    93b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    93ba:	8b 89       	ldd	r24, Y+19	; 0x13
    93bc:	87 85       	ldd	r24, Z+15	; 0x0f
    93be:	83 81       	ldd	r24, Z+3	; 0x03
    93c0:	80 82       	st	Z, r8
    93c2:	84 86       	std	Z+12, r8	; 0x0c
    93c4:	88 8a       	std	Y+16, r8	; 0x10
    93c6:	8c 8e       	std	Y+28, r8	; 0x1c
    93c8:	90 92 94 96 	sts	0x9694, r9
    93cc:	98 9a       	sbi	0x13, 0	; 19
    93ce:	9c 9e       	mul	r9, r28
    93d0:	a0 a2       	std	Z+32, r10	; 0x20
    93d2:	a4 a6       	std	Z+44, r10	; 0x2c
    93d4:	a8 aa       	std	Y+48, r10	; 0x30
    93d6:	ac ae       	std	Y+60, r10	; 0x3c
    93d8:	b0 b2       	in	r11, 0x10	; 16
    93da:	b4 b6       	in	r11, 0x34	; 52
    93dc:	b8 ba       	out	0x18, r11	; 24
    93de:	bc be       	out	0x3c, r11	; 60
    93e0:	c0 c2       	rjmp	.+1408   	; 0x9962 <waves+0x862>
    93e2:	c4 c6       	rjmp	.+3464   	; 0xa16c <LBPrint+0x30>
    93e4:	c8 ca       	rjmp	.-2672   	; 0x8976 <TriggerNote+0x2>
    93e6:	cc ce       	rjmp	.-616    	; 0x9180 <waves+0x80>
    93e8:	d0 d2       	rcall	.+1440   	; 0x998a <waves+0x88a>
    93ea:	d4 d6       	rcall	.+3496   	; 0xa194 <LBPrintByte+0x20>
    93ec:	d8 da       	rcall	.-2640   	; 0x899e <TriggerNote+0x2a>
    93ee:	dc de       	rcall	.-584    	; 0x91a8 <waves+0xa8>
    93f0:	e0 e2       	ldi	r30, 0x20	; 32
    93f2:	e4 e6       	ldi	r30, 0x64	; 100
    93f4:	e8 ea       	ldi	r30, 0xA8	; 168
    93f6:	ec ee       	ldi	r30, 0xEC	; 236
    93f8:	f0 f2       	brcs	.-68     	; 0x93b6 <waves+0x2b6>
    93fa:	f4 f6       	brge	.-68     	; 0x93b8 <waves+0x2b8>
    93fc:	f8 fa       	.word	0xfaf8	; ????
    93fe:	fc fe       	.word	0xfefc	; ????
    9400:	7f 7f       	andi	r23, 0xFF	; 255
    9402:	7f 7f       	andi	r23, 0xFF	; 255
    9404:	7f 7f       	andi	r23, 0xFF	; 255
    9406:	7f 7f       	andi	r23, 0xFF	; 255
    9408:	7f 7f       	andi	r23, 0xFF	; 255
    940a:	7f 7f       	andi	r23, 0xFF	; 255
    940c:	7f 7f       	andi	r23, 0xFF	; 255
    940e:	7f 7f       	andi	r23, 0xFF	; 255
    9410:	7f 7f       	andi	r23, 0xFF	; 255
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	80 80       	ld	r8, Z
    9442:	80 80       	ld	r8, Z
    9444:	80 80       	ld	r8, Z
    9446:	80 80       	ld	r8, Z
    9448:	80 80       	ld	r8, Z
    944a:	80 80       	ld	r8, Z
    944c:	80 80       	ld	r8, Z
    944e:	80 80       	ld	r8, Z
    9450:	80 80       	ld	r8, Z
    9452:	80 80       	ld	r8, Z
    9454:	80 80       	ld	r8, Z
    9456:	80 80       	ld	r8, Z
    9458:	80 80       	ld	r8, Z
    945a:	80 80       	ld	r8, Z
    945c:	80 80       	ld	r8, Z
    945e:	80 80       	ld	r8, Z
    9460:	80 80       	ld	r8, Z
    9462:	80 80       	ld	r8, Z
    9464:	80 80       	ld	r8, Z
    9466:	80 80       	ld	r8, Z
    9468:	80 80       	ld	r8, Z
    946a:	80 80       	ld	r8, Z
    946c:	80 80       	ld	r8, Z
    946e:	80 80       	ld	r8, Z
    9470:	80 80       	ld	r8, Z
    9472:	80 80       	ld	r8, Z
    9474:	80 80       	ld	r8, Z
    9476:	80 80       	ld	r8, Z
    9478:	80 80       	ld	r8, Z
    947a:	80 80       	ld	r8, Z
    947c:	80 80       	ld	r8, Z
    947e:	80 80       	ld	r8, Z
    9480:	80 80       	ld	r8, Z
    9482:	80 80       	ld	r8, Z
    9484:	80 80       	ld	r8, Z
    9486:	80 80       	ld	r8, Z
    9488:	80 80       	ld	r8, Z
    948a:	80 80       	ld	r8, Z
    948c:	80 80       	ld	r8, Z
    948e:	80 80       	ld	r8, Z
    9490:	80 80       	ld	r8, Z
    9492:	80 80       	ld	r8, Z
    9494:	80 80       	ld	r8, Z
    9496:	80 80       	ld	r8, Z
    9498:	80 80       	ld	r8, Z
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 80       	ld	r8, Z
    94f6:	80 80       	ld	r8, Z
    94f8:	80 80       	ld	r8, Z
    94fa:	80 80       	ld	r8, Z
    94fc:	80 80       	ld	r8, Z
    94fe:	80 80       	ld	r8, Z
    9500:	7f 7f       	andi	r23, 0xFF	; 255
    9502:	7f 7f       	andi	r23, 0xFF	; 255
    9504:	7f 7f       	andi	r23, 0xFF	; 255
    9506:	7f 7f       	andi	r23, 0xFF	; 255
    9508:	7f 7f       	andi	r23, 0xFF	; 255
    950a:	7f 7f       	andi	r23, 0xFF	; 255
    950c:	7f 7f       	andi	r23, 0xFF	; 255
    950e:	7f 7f       	andi	r23, 0xFF	; 255
    9510:	7f 7f       	andi	r23, 0xFF	; 255
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7f       	andi	r23, 0xFF	; 255
    954e:	7f 7f       	andi	r23, 0xFF	; 255
    9550:	7f 7f       	andi	r23, 0xFF	; 255
    9552:	7f 7f       	andi	r23, 0xFF	; 255
    9554:	7f 7f       	andi	r23, 0xFF	; 255
    9556:	7f 7f       	andi	r23, 0xFF	; 255
    9558:	7f 7f       	andi	r23, 0xFF	; 255
    955a:	7f 7f       	andi	r23, 0xFF	; 255
    955c:	7f 7f       	andi	r23, 0xFF	; 255
    955e:	7f 7f       	andi	r23, 0xFF	; 255
    9560:	7f 7f       	andi	r23, 0xFF	; 255
    9562:	7f 7f       	andi	r23, 0xFF	; 255
    9564:	7f 7f       	andi	r23, 0xFF	; 255
    9566:	7f 7f       	andi	r23, 0xFF	; 255
    9568:	7f 7f       	andi	r23, 0xFF	; 255
    956a:	7f 7f       	andi	r23, 0xFF	; 255
    956c:	7f 7f       	andi	r23, 0xFF	; 255
    956e:	7f 7f       	andi	r23, 0xFF	; 255
    9570:	7f 7f       	andi	r23, 0xFF	; 255
    9572:	7f 7f       	andi	r23, 0xFF	; 255
    9574:	7f 7f       	andi	r23, 0xFF	; 255
    9576:	7f 7f       	andi	r23, 0xFF	; 255
    9578:	7f 7f       	andi	r23, 0xFF	; 255
    957a:	7f 7f       	andi	r23, 0xFF	; 255
    957c:	7f 7f       	andi	r23, 0xFF	; 255
    957e:	7f 7f       	andi	r23, 0xFF	; 255
    9580:	80 80       	ld	r8, Z
    9582:	80 80       	ld	r8, Z
    9584:	80 80       	ld	r8, Z
    9586:	80 80       	ld	r8, Z
    9588:	80 80       	ld	r8, Z
    958a:	80 80       	ld	r8, Z
    958c:	80 80       	ld	r8, Z
    958e:	80 80       	ld	r8, Z
    9590:	80 80       	ld	r8, Z
    9592:	80 80       	ld	r8, Z
    9594:	80 80       	ld	r8, Z
    9596:	80 80       	ld	r8, Z
    9598:	80 80       	ld	r8, Z
    959a:	80 80       	ld	r8, Z
    959c:	80 80       	ld	r8, Z
    959e:	80 80       	ld	r8, Z
    95a0:	80 80       	ld	r8, Z
    95a2:	80 80       	ld	r8, Z
    95a4:	80 80       	ld	r8, Z
    95a6:	80 80       	ld	r8, Z
    95a8:	80 80       	ld	r8, Z
    95aa:	80 80       	ld	r8, Z
    95ac:	80 80       	ld	r8, Z
    95ae:	80 80       	ld	r8, Z
    95b0:	80 80       	ld	r8, Z
    95b2:	80 80       	ld	r8, Z
    95b4:	80 80       	ld	r8, Z
    95b6:	80 80       	ld	r8, Z
    95b8:	80 80       	ld	r8, Z
    95ba:	80 80       	ld	r8, Z
    95bc:	80 80       	ld	r8, Z
    95be:	80 80       	ld	r8, Z
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 80       	ld	r8, Z
    95f6:	80 80       	ld	r8, Z
    95f8:	80 80       	ld	r8, Z
    95fa:	80 80       	ld	r8, Z
    95fc:	80 80       	ld	r8, Z
    95fe:	80 80       	ld	r8, Z
    9600:	7f 7f       	andi	r23, 0xFF	; 255
    9602:	7f 7f       	andi	r23, 0xFF	; 255
    9604:	7f 7f       	andi	r23, 0xFF	; 255
    9606:	7f 7f       	andi	r23, 0xFF	; 255
    9608:	7f 7f       	andi	r23, 0xFF	; 255
    960a:	7f 7f       	andi	r23, 0xFF	; 255
    960c:	7f 7f       	andi	r23, 0xFF	; 255
    960e:	7f 7f       	andi	r23, 0xFF	; 255
    9610:	7f 7f       	andi	r23, 0xFF	; 255
    9612:	7f 7f       	andi	r23, 0xFF	; 255
    9614:	7f 7f       	andi	r23, 0xFF	; 255
    9616:	7f 7f       	andi	r23, 0xFF	; 255
    9618:	7f 7f       	andi	r23, 0xFF	; 255
    961a:	7f 7f       	andi	r23, 0xFF	; 255
    961c:	7f 7f       	andi	r23, 0xFF	; 255
    961e:	7f 7f       	andi	r23, 0xFF	; 255
    9620:	7f 7f       	andi	r23, 0xFF	; 255
    9622:	7f 7f       	andi	r23, 0xFF	; 255
    9624:	7f 7f       	andi	r23, 0xFF	; 255
    9626:	7f 7f       	andi	r23, 0xFF	; 255
    9628:	7f 7f       	andi	r23, 0xFF	; 255
    962a:	7f 7f       	andi	r23, 0xFF	; 255
    962c:	7f 7f       	andi	r23, 0xFF	; 255
    962e:	7f 7f       	andi	r23, 0xFF	; 255
    9630:	7f 7f       	andi	r23, 0xFF	; 255
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7f 7f       	andi	r23, 0xFF	; 255
    9648:	7f 7f       	andi	r23, 0xFF	; 255
    964a:	7f 7f       	andi	r23, 0xFF	; 255
    964c:	7f 7f       	andi	r23, 0xFF	; 255
    964e:	7f 7f       	andi	r23, 0xFF	; 255
    9650:	7f 7f       	andi	r23, 0xFF	; 255
    9652:	7f 7f       	andi	r23, 0xFF	; 255
    9654:	7f 7f       	andi	r23, 0xFF	; 255
    9656:	7f 7f       	andi	r23, 0xFF	; 255
    9658:	7f 7f       	andi	r23, 0xFF	; 255
    965a:	7f 7f       	andi	r23, 0xFF	; 255
    965c:	7f 7f       	andi	r23, 0xFF	; 255
    965e:	7f 7f       	andi	r23, 0xFF	; 255
    9660:	7f 7f       	andi	r23, 0xFF	; 255
    9662:	7f 7f       	andi	r23, 0xFF	; 255
    9664:	7f 7f       	andi	r23, 0xFF	; 255
    9666:	7f 7f       	andi	r23, 0xFF	; 255
    9668:	7f 7f       	andi	r23, 0xFF	; 255
    966a:	7f 7f       	andi	r23, 0xFF	; 255
    966c:	7f 7f       	andi	r23, 0xFF	; 255
    966e:	7f 7f       	andi	r23, 0xFF	; 255
    9670:	7f 7f       	andi	r23, 0xFF	; 255
    9672:	7f 7f       	andi	r23, 0xFF	; 255
    9674:	7f 7f       	andi	r23, 0xFF	; 255
    9676:	7f 7f       	andi	r23, 0xFF	; 255
    9678:	7f 7f       	andi	r23, 0xFF	; 255
    967a:	7f 7f       	andi	r23, 0xFF	; 255
    967c:	7f 7f       	andi	r23, 0xFF	; 255
    967e:	7f 7f       	andi	r23, 0xFF	; 255
    9680:	7f 7f       	andi	r23, 0xFF	; 255
    9682:	7f 7f       	andi	r23, 0xFF	; 255
    9684:	7f 7f       	andi	r23, 0xFF	; 255
    9686:	7f 7f       	andi	r23, 0xFF	; 255
    9688:	7f 7f       	andi	r23, 0xFF	; 255
    968a:	7f 7f       	andi	r23, 0xFF	; 255
    968c:	7f 7f       	andi	r23, 0xFF	; 255
    968e:	7f 7f       	andi	r23, 0xFF	; 255
    9690:	7f 7f       	andi	r23, 0xFF	; 255
    9692:	7f 7f       	andi	r23, 0xFF	; 255
    9694:	7f 7f       	andi	r23, 0xFF	; 255
    9696:	7f 7f       	andi	r23, 0xFF	; 255
    9698:	7f 7f       	andi	r23, 0xFF	; 255
    969a:	7f 7f       	andi	r23, 0xFF	; 255
    969c:	7f 7f       	andi	r23, 0xFF	; 255
    969e:	7f 7f       	andi	r23, 0xFF	; 255
    96a0:	7f 7f       	andi	r23, 0xFF	; 255
    96a2:	7f 7f       	andi	r23, 0xFF	; 255
    96a4:	7f 7f       	andi	r23, 0xFF	; 255
    96a6:	7f 7f       	andi	r23, 0xFF	; 255
    96a8:	7f 7f       	andi	r23, 0xFF	; 255
    96aa:	7f 7f       	andi	r23, 0xFF	; 255
    96ac:	7f 7f       	andi	r23, 0xFF	; 255
    96ae:	7f 7f       	andi	r23, 0xFF	; 255
    96b0:	7f 7f       	andi	r23, 0xFF	; 255
    96b2:	7f 7f       	andi	r23, 0xFF	; 255
    96b4:	7f 7f       	andi	r23, 0xFF	; 255
    96b6:	7f 7f       	andi	r23, 0xFF	; 255
    96b8:	7f 7f       	andi	r23, 0xFF	; 255
    96ba:	7f 7f       	andi	r23, 0xFF	; 255
    96bc:	7f 7f       	andi	r23, 0xFF	; 255
    96be:	7f 7f       	andi	r23, 0xFF	; 255
    96c0:	80 80       	ld	r8, Z
    96c2:	80 80       	ld	r8, Z
    96c4:	80 80       	ld	r8, Z
    96c6:	80 80       	ld	r8, Z
    96c8:	80 80       	ld	r8, Z
    96ca:	80 80       	ld	r8, Z
    96cc:	80 80       	ld	r8, Z
    96ce:	80 80       	ld	r8, Z
    96d0:	80 80       	ld	r8, Z
    96d2:	80 80       	ld	r8, Z
    96d4:	80 80       	ld	r8, Z
    96d6:	80 80       	ld	r8, Z
    96d8:	80 80       	ld	r8, Z
    96da:	80 80       	ld	r8, Z
    96dc:	80 80       	ld	r8, Z
    96de:	80 80       	ld	r8, Z
    96e0:	80 80       	ld	r8, Z
    96e2:	80 80       	ld	r8, Z
    96e4:	80 80       	ld	r8, Z
    96e6:	80 80       	ld	r8, Z
    96e8:	80 80       	ld	r8, Z
    96ea:	80 80       	ld	r8, Z
    96ec:	80 80       	ld	r8, Z
    96ee:	80 80       	ld	r8, Z
    96f0:	80 80       	ld	r8, Z
    96f2:	80 80       	ld	r8, Z
    96f4:	80 80       	ld	r8, Z
    96f6:	80 80       	ld	r8, Z
    96f8:	80 80       	ld	r8, Z
    96fa:	80 80       	ld	r8, Z
    96fc:	80 80       	ld	r8, Z
    96fe:	80 80       	ld	r8, Z
    9700:	03 09       	sbc	r16, r3
    9702:	13 1e       	adc	r1, r19
    9704:	28 31       	cpi	r18, 0x18	; 24
    9706:	3a 40       	sbci	r19, 0x0A	; 10
    9708:	46 4c       	sbci	r20, 0xC6	; 198
    970a:	50 54       	subi	r21, 0x40	; 64
    970c:	58 5b       	subi	r21, 0xB8	; 184
    970e:	5e 61       	ori	r21, 0x1E	; 30
    9710:	63 65       	ori	r22, 0x53	; 83
    9712:	67 69       	ori	r22, 0x97	; 151
    9714:	6b 6c       	ori	r22, 0xCB	; 203
    9716:	6e 6f       	ori	r22, 0xFE	; 254
    9718:	70 71       	andi	r23, 0x10	; 16
    971a:	72 73       	andi	r23, 0x32	; 50
    971c:	74 75       	andi	r23, 0x54	; 84
    971e:	76 77       	andi	r23, 0x76	; 118
    9720:	77 78       	andi	r23, 0x87	; 135
    9722:	79 79       	andi	r23, 0x99	; 153
    9724:	7a 7a       	andi	r23, 0xAA	; 170
    9726:	7b 7b       	andi	r23, 0xBB	; 187
    9728:	7c 7c       	andi	r23, 0xCC	; 204
    972a:	7c 7d       	andi	r23, 0xDC	; 220
    972c:	7d 7d       	andi	r23, 0xDD	; 221
    972e:	7e 7e       	andi	r23, 0xEE	; 238
    9730:	7e 7e       	andi	r23, 0xEE	; 238
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7f 7f       	andi	r23, 0xFF	; 255
    9748:	7f 7f       	andi	r23, 0xFF	; 255
    974a:	7f 7f       	andi	r23, 0xFF	; 255
    974c:	7f 7e       	andi	r23, 0xEF	; 239
    974e:	7e 7e       	andi	r23, 0xEE	; 238
    9750:	7e 7d       	andi	r23, 0xDE	; 222
    9752:	7d 7d       	andi	r23, 0xDD	; 221
    9754:	7c 7c       	andi	r23, 0xCC	; 204
    9756:	7c 7b       	andi	r23, 0xBC	; 188
    9758:	7b 7a       	andi	r23, 0xAB	; 171
    975a:	7a 79       	andi	r23, 0x9A	; 154
    975c:	79 78       	andi	r23, 0x89	; 137
    975e:	77 77       	andi	r23, 0x77	; 119
    9760:	76 75       	andi	r23, 0x56	; 86
    9762:	74 73       	andi	r23, 0x34	; 52
    9764:	72 71       	andi	r23, 0x12	; 18
    9766:	70 6f       	ori	r23, 0xF0	; 240
    9768:	6e 6c       	ori	r22, 0xCE	; 206
    976a:	6b 69       	ori	r22, 0x9B	; 155
    976c:	67 65       	ori	r22, 0x57	; 87
    976e:	63 61       	ori	r22, 0x13	; 19
    9770:	5e 5b       	subi	r21, 0xBE	; 190
    9772:	58 54       	subi	r21, 0x48	; 72
    9774:	50 4c       	sbci	r21, 0xC0	; 192
    9776:	46 40       	sbci	r20, 0x06	; 6
    9778:	3a 31       	cpi	r19, 0x1A	; 26
    977a:	28 1e       	adc	r2, r24
    977c:	13 09       	sbc	r17, r3
    977e:	03 00       	.word	0x0003	; ????
    9780:	c6 cc       	rjmp	.-1652   	; 0x910e <waves+0xe>
    9782:	d5 db       	rcall	.-2134   	; 0x8f2e <steptable+0x26>
    9784:	df e3       	ldi	r29, 0x3F	; 63
    9786:	e5 e7       	ldi	r30, 0x75	; 117
    9788:	e9 ea       	ldi	r30, 0xA9	; 169
    978a:	eb ec       	ldi	r30, 0xCB	; 203
    978c:	ed ee       	ldi	r30, 0xED	; 237
    978e:	ef ef       	ldi	r30, 0xFF	; 255
    9790:	f0 f0       	brcs	.+60     	; 0x97ce <waves+0x6ce>
    9792:	f0 f1       	brcs	.+124    	; 0x9810 <waves+0x710>
    9794:	f1 f1       	breq	.+124    	; 0x9812 <waves+0x712>
    9796:	f1 f2       	breq	.-68     	; 0x9754 <waves+0x654>
    9798:	f2 f2       	brmi	.-68     	; 0x9756 <waves+0x656>
    979a:	f2 f2       	brmi	.-68     	; 0x9758 <waves+0x658>
    979c:	f2 f2       	brmi	.-68     	; 0x975a <waves+0x65a>
    979e:	f2 f3       	brmi	.-4      	; 0x979c <waves+0x69c>
    97a0:	f3 f3       	brvs	.-4      	; 0x979e <waves+0x69e>
    97a2:	f3 f3       	brvs	.-4      	; 0x97a0 <waves+0x6a0>
    97a4:	f3 f3       	brvs	.-4      	; 0x97a2 <waves+0x6a2>
    97a6:	f3 f3       	brvs	.-4      	; 0x97a4 <waves+0x6a4>
    97a8:	f3 f3       	brvs	.-4      	; 0x97a6 <waves+0x6a6>
    97aa:	f3 f3       	brvs	.-4      	; 0x97a8 <waves+0x6a8>
    97ac:	f3 f3       	brvs	.-4      	; 0x97aa <waves+0x6aa>
    97ae:	f3 f3       	brvs	.-4      	; 0x97ac <waves+0x6ac>
    97b0:	f3 f3       	brvs	.-4      	; 0x97ae <waves+0x6ae>
    97b2:	f3 f3       	brvs	.-4      	; 0x97b0 <waves+0x6b0>
    97b4:	f3 f3       	brvs	.-4      	; 0x97b2 <waves+0x6b2>
    97b6:	f3 f3       	brvs	.-4      	; 0x97b4 <waves+0x6b4>
    97b8:	f3 f3       	brvs	.-4      	; 0x97b6 <waves+0x6b6>
    97ba:	f3 f3       	brvs	.-4      	; 0x97b8 <waves+0x6b8>
    97bc:	f3 f3       	brvs	.-4      	; 0x97ba <waves+0x6ba>
    97be:	f3 f3       	brvs	.-4      	; 0x97bc <waves+0x6bc>
    97c0:	f3 f3       	brvs	.-4      	; 0x97be <waves+0x6be>
    97c2:	f3 f3       	brvs	.-4      	; 0x97c0 <waves+0x6c0>
    97c4:	f3 f3       	brvs	.-4      	; 0x97c2 <waves+0x6c2>
    97c6:	f3 f3       	brvs	.-4      	; 0x97c4 <waves+0x6c4>
    97c8:	f3 f3       	brvs	.-4      	; 0x97c6 <waves+0x6c6>
    97ca:	f3 f3       	brvs	.-4      	; 0x97c8 <waves+0x6c8>
    97cc:	f3 f3       	brvs	.-4      	; 0x97ca <waves+0x6ca>
    97ce:	f3 f3       	brvs	.-4      	; 0x97cc <waves+0x6cc>
    97d0:	f3 f3       	brvs	.-4      	; 0x97ce <waves+0x6ce>
    97d2:	f3 f3       	brvs	.-4      	; 0x97d0 <waves+0x6d0>
    97d4:	f3 f3       	brvs	.-4      	; 0x97d2 <waves+0x6d2>
    97d6:	f3 f3       	brvs	.-4      	; 0x97d4 <waves+0x6d4>
    97d8:	f3 f3       	brvs	.-4      	; 0x97d6 <waves+0x6d6>
    97da:	f3 f3       	brvs	.-4      	; 0x97d8 <waves+0x6d8>
    97dc:	f3 f3       	brvs	.-4      	; 0x97da <waves+0x6da>
    97de:	f3 f3       	brvs	.-4      	; 0x97dc <waves+0x6dc>
    97e0:	f2 f2       	brmi	.-68     	; 0x979e <waves+0x69e>
    97e2:	f2 f2       	brmi	.-68     	; 0x97a0 <waves+0x6a0>
    97e4:	f2 f2       	brmi	.-68     	; 0x97a2 <waves+0x6a2>
    97e6:	f2 f2       	brmi	.-68     	; 0x97a4 <waves+0x6a4>
    97e8:	f1 f1       	breq	.+124    	; 0x9866 <waves+0x766>
    97ea:	f1 f1       	breq	.+124    	; 0x9868 <waves+0x768>
    97ec:	f0 f0       	brcs	.+60     	; 0x982a <waves+0x72a>
    97ee:	f0 ef       	ldi	r31, 0xF0	; 240
    97f0:	ef ee       	ldi	r30, 0xEF	; 239
    97f2:	ed ec       	ldi	r30, 0xCD	; 205
    97f4:	eb ea       	ldi	r30, 0xAB	; 171
    97f6:	e9 e7       	ldi	r30, 0x79	; 121
    97f8:	e5 e3       	ldi	r30, 0x35	; 53
    97fa:	df db       	rcall	.-2114   	; 0x8fba <steptable+0xb2>
    97fc:	d5 cc       	rjmp	.-1622   	; 0x91a8 <waves+0xa8>
    97fe:	c6 00       	.word	0x00c6	; ????
    9800:	00 28       	or	r0, r0
    9802:	3d 42       	sbci	r19, 0x2D	; 45
    9804:	30 2d       	mov	r19, r0
    9806:	2c 2b       	or	r18, r28
    9808:	2c 2d       	mov	r18, r12
    980a:	2e 2f       	mov	r18, r30
    980c:	30 32       	cpi	r19, 0x20	; 32
    980e:	33 35       	cpi	r19, 0x53	; 83
    9810:	37 39       	cpi	r19, 0x97	; 151
    9812:	3b 3d       	cpi	r19, 0xDB	; 219
    9814:	3f 41       	sbci	r19, 0x1F	; 31
    9816:	43 45       	sbci	r20, 0x53	; 83
    9818:	48 4a       	sbci	r20, 0xA8	; 168
    981a:	4c 4e       	sbci	r20, 0xEC	; 236
    981c:	50 53       	subi	r21, 0x30	; 48
    981e:	55 57       	subi	r21, 0x75	; 117
    9820:	59 5b       	subi	r21, 0xB9	; 185
    9822:	5d 5f       	subi	r21, 0xFD	; 253
    9824:	61 63       	ori	r22, 0x31	; 49
    9826:	65 67       	ori	r22, 0x75	; 117
    9828:	69 6b       	ori	r22, 0xB9	; 185
    982a:	6c 6e       	ori	r22, 0xEC	; 236
    982c:	70 71       	andi	r23, 0x10	; 16
    982e:	73 74       	andi	r23, 0x43	; 67
    9830:	75 77       	andi	r23, 0x75	; 117
    9832:	78 79       	andi	r23, 0x98	; 152
    9834:	7a 7b       	andi	r23, 0xBA	; 186
    9836:	7c 7d       	andi	r23, 0xDC	; 220
    9838:	7d 7e       	andi	r23, 0xED	; 237
    983a:	7e 7f       	andi	r23, 0xFE	; 254
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7e 7e       	andi	r23, 0xEE	; 238
    9848:	7d 7d       	andi	r23, 0xDD	; 221
    984a:	7c 7b       	andi	r23, 0xBC	; 188
    984c:	7a 79       	andi	r23, 0x9A	; 154
    984e:	78 77       	andi	r23, 0x78	; 120
    9850:	75 74       	andi	r23, 0x45	; 69
    9852:	73 71       	andi	r23, 0x13	; 19
    9854:	70 6e       	ori	r23, 0xE0	; 224
    9856:	6c 6b       	ori	r22, 0xBC	; 188
    9858:	69 67       	ori	r22, 0x79	; 121
    985a:	65 63       	ori	r22, 0x35	; 53
    985c:	61 5f       	subi	r22, 0xF1	; 241
    985e:	5d 5b       	subi	r21, 0xBD	; 189
    9860:	59 57       	subi	r21, 0x79	; 121
    9862:	55 53       	subi	r21, 0x35	; 53
    9864:	50 4e       	sbci	r21, 0xE0	; 224
    9866:	4c 4a       	sbci	r20, 0xAC	; 172
    9868:	48 45       	sbci	r20, 0x58	; 88
    986a:	43 41       	sbci	r20, 0x13	; 19
    986c:	3f 3d       	cpi	r19, 0xDF	; 223
    986e:	3b 39       	cpi	r19, 0x9B	; 155
    9870:	37 35       	cpi	r19, 0x57	; 87
    9872:	33 32       	cpi	r19, 0x23	; 35
    9874:	30 2f       	mov	r19, r16
    9876:	2e 2d       	mov	r18, r14
    9878:	2c 2b       	or	r18, r28
    987a:	2c 2d       	mov	r18, r12
    987c:	30 42       	sbci	r19, 0x20	; 32
    987e:	3d 28       	or	r3, r13
    9880:	00 e9       	ldi	r16, 0x90	; 144
    9882:	e5 fe       	sbrs	r14, 5
    9884:	d4 d7       	rcall	.+4008   	; 0xa82e <init_player_shot+0x366>
    9886:	d7 d7       	rcall	.+4014   	; 0xa836 <init_player_shot+0x36e>
    9888:	d6 d4       	rcall	.+2476   	; 0xa236 <LBPrintInt+0x60>
    988a:	d2 d0       	rcall	.+420    	; 0x9a30 <waves+0x930>
    988c:	ce cc       	rjmp	.-1636   	; 0x922a <waves+0x12a>
    988e:	ca c8       	rjmp	.-3692   	; 0x8a24 <ProcessMusic+0x30>
    9890:	c6 c3       	rjmp	.+1932   	; 0xa01e <LBGetNextFrame+0x4>
    9892:	c1 bf       	out	0x31, r28	; 49
    9894:	bd ba       	out	0x1d, r11	; 29
    9896:	b8 b6       	in	r11, 0x38	; 56
    9898:	b4 b1       	in	r27, 0x04	; 4
    989a:	af ad       	ldd	r26, Y+63	; 0x3f
    989c:	ab a9       	ldd	r26, Y+51	; 0x33
    989e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    98a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    98a2:	9f 9e       	mul	r9, r31
    98a4:	9c 9a       	sbi	0x13, 4	; 19
    98a6:	99 97       	sbiw	r26, 0x29	; 41
    98a8:	95 94       	asr	r9
    98aa:	93 91       	.word	0x9193	; ????
    98ac:	90 8f       	std	Z+24, r25	; 0x18
    98ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    98b0:	8b 8a       	std	Y+19, r8	; 0x13
    98b2:	89 88       	ldd	r8, Y+17	; 0x11
    98b4:	88 87       	std	Y+8, r24	; 0x08
    98b6:	86 85       	ldd	r24, Z+14	; 0x0e
    98b8:	85 84       	ldd	r8, Z+13	; 0x0d
    98ba:	84 84       	ldd	r8, Z+12	; 0x0c
    98bc:	83 83       	std	Z+3, r24	; 0x03
    98be:	83 83       	std	Z+3, r24	; 0x03
    98c0:	83 83       	std	Z+3, r24	; 0x03
    98c2:	83 83       	std	Z+3, r24	; 0x03
    98c4:	83 84       	ldd	r8, Z+11	; 0x0b
    98c6:	84 84       	ldd	r8, Z+12	; 0x0c
    98c8:	85 85       	ldd	r24, Z+13	; 0x0d
    98ca:	86 87       	std	Z+14, r24	; 0x0e
    98cc:	88 88       	ldd	r8, Y+16	; 0x10
    98ce:	89 8a       	std	Y+17, r8	; 0x11
    98d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    98d2:	8d 8f       	std	Y+29, r24	; 0x1d
    98d4:	90 91 93 94 	lds	r25, 0x9493
    98d8:	95 97       	sbiw	r26, 0x25	; 37
    98da:	99 9a       	sbi	0x13, 1	; 19
    98dc:	9c 9e       	mul	r9, r28
    98de:	9f a1       	ldd	r25, Y+39	; 0x27
    98e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    98e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    98e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    98e6:	af b1       	in	r26, 0x0f	; 15
    98e8:	b4 b6       	in	r11, 0x34	; 52
    98ea:	b8 ba       	out	0x18, r11	; 24
    98ec:	bd bf       	out	0x3d, r27	; 61
    98ee:	c1 c3       	rjmp	.+1922   	; 0xa072 <LBGetJoyPadState+0xc>
    98f0:	c6 c8       	rjmp	.-3700   	; 0x8a7e <ProcessMusic+0x8a>
    98f2:	ca cc       	rjmp	.-1644   	; 0x9288 <waves+0x188>
    98f4:	ce d0       	rcall	.+412    	; 0x9a92 <waves+0x992>
    98f6:	d2 d4       	rcall	.+2468   	; 0xa29c <LBRandom>
    98f8:	d6 d7       	rcall	.+4012   	; 0xa8a6 <init_player_shot+0x3de>
    98fa:	d7 d7       	rcall	.+4014   	; 0xa8aa <init_player_shot+0x3e2>
    98fc:	d4 fe       	sbrs	r13, 4
    98fe:	e5 e9       	ldi	r30, 0x95	; 149
    9900:	f9 f8       	.word	0xf8f9	; ????
    9902:	f9 f5       	brne	.+126    	; 0x9982 <waves+0x882>
    9904:	eb e1       	ldi	r30, 0x1B	; 27
    9906:	dd de       	rcall	.-582    	; 0x96c2 <waves+0x5c2>
    9908:	e0 e2       	ldi	r30, 0x20	; 32
    990a:	e4 e5       	ldi	r30, 0x54	; 84
    990c:	e6 e5       	ldi	r30, 0x56	; 86
    990e:	e4 e2       	ldi	r30, 0x24	; 36
    9910:	de d9       	rcall	.-3140   	; 0x8cce <ProcessMusic+0x2da>
    9912:	d2 ca       	rjmp	.-2652   	; 0x8eb8 <esmw+0x1c>
    9914:	c1 b7       	in	r28, 0x31	; 49
    9916:	ac a2       	std	Y+36, r10	; 0x24
    9918:	99 91       	ld	r25, Y+
    991a:	8a 86       	std	Y+10, r8	; 0x0a
    991c:	83 81       	ldd	r24, Z+3	; 0x03
    991e:	80 80       	ld	r8, Z
    9920:	81 82       	std	Z+1, r8	; 0x01
    9922:	83 85       	ldd	r24, Z+11	; 0x0b
    9924:	86 88       	ldd	r8, Z+22	; 0x16
    9926:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9928:	8d 8f       	std	Y+29, r24	; 0x1d
    992a:	90 92 93 95 	sts	0x9593, r9
    992e:	96 97       	sbiw	r26, 0x26	; 38
    9930:	98 99       	sbic	0x13, 0	; 19
    9932:	9a 9b       	sbis	0x13, 2	; 19
    9934:	9b 9c       	mul	r9, r11
    9936:	9d 9d       	mul	r25, r13
    9938:	9d 9e       	mul	r9, r29
    993a:	9e 9e       	mul	r9, r30
    993c:	9f 9f       	mul	r25, r31
    993e:	9f 9f       	mul	r25, r31
    9940:	9f 9f       	mul	r25, r31
    9942:	9f 9e       	mul	r9, r31
    9944:	9e 9e       	mul	r9, r30
    9946:	9d 9d       	mul	r25, r13
    9948:	9d 9c       	mul	r9, r13
    994a:	9b 9b       	sbis	0x13, 3	; 19
    994c:	9a 99       	sbic	0x13, 2	; 19
    994e:	98 97       	sbiw	r26, 0x28	; 40
    9950:	96 95       	lsr	r25
    9952:	93 92       	.word	0x9293	; ????
    9954:	90 8f       	std	Z+24, r25	; 0x18
    9956:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9958:	8a 88       	ldd	r8, Y+18	; 0x12
    995a:	86 85       	ldd	r24, Z+14	; 0x0e
    995c:	83 82       	std	Z+3, r8	; 0x03
    995e:	81 80       	ldd	r8, Z+1	; 0x01
    9960:	80 81       	ld	r24, Z
    9962:	83 86       	std	Z+11, r8	; 0x0b
    9964:	8a 91       	ld	r24, -Y
    9966:	99 a2       	std	Y+33, r9	; 0x21
    9968:	ac b7       	in	r26, 0x3c	; 60
    996a:	c1 ca       	rjmp	.-2686   	; 0x8eee <esmw+0x52>
    996c:	d2 d9       	rcall	.-3164   	; 0x8d12 <ProcessMusic+0x31e>
    996e:	de e2       	ldi	r29, 0x2E	; 46
    9970:	e4 e5       	ldi	r30, 0x54	; 84
    9972:	e6 e5       	ldi	r30, 0x56	; 86
    9974:	e4 e2       	ldi	r30, 0x24	; 36
    9976:	e0 de       	rcall	.-576    	; 0x9738 <waves+0x638>
    9978:	dd e1       	ldi	r29, 0x1D	; 29
    997a:	eb f5       	brvc	.+122    	; 0x99f6 <waves+0x8f6>
    997c:	f9 f8       	.word	0xf8f9	; ????
    997e:	f9 00       	.word	0x00f9	; ????
    9980:	07 08       	sbc	r0, r7
    9982:	07 0b       	sbc	r16, r23
    9984:	15 1f       	adc	r17, r21
    9986:	23 22       	and	r2, r19
    9988:	20 1e       	adc	r2, r16
    998a:	1c 1b       	sub	r17, r28
    998c:	1a 1b       	sub	r17, r26
    998e:	1c 1e       	adc	r1, r28
    9990:	22 27       	eor	r18, r18
    9992:	2e 36       	cpi	r18, 0x6E	; 110
    9994:	3f 49       	sbci	r19, 0x9F	; 159
    9996:	54 5e       	subi	r21, 0xE4	; 228
    9998:	67 6f       	ori	r22, 0xF7	; 247
    999a:	76 7a       	andi	r23, 0xA6	; 166
    999c:	7e 7f       	andi	r23, 0xFE	; 254
    999e:	7f 7f       	andi	r23, 0xFF	; 255
    99a0:	7f 7e       	andi	r23, 0xEF	; 239
    99a2:	7d 7b       	andi	r23, 0xBD	; 189
    99a4:	7a 78       	andi	r23, 0x8A	; 138
    99a6:	76 74       	andi	r23, 0x46	; 70
    99a8:	73 71       	andi	r23, 0x13	; 19
    99aa:	70 6e       	ori	r23, 0xE0	; 224
    99ac:	6d 6b       	ori	r22, 0xBD	; 189
    99ae:	6a 69       	ori	r22, 0x9A	; 154
    99b0:	68 67       	ori	r22, 0x78	; 120
    99b2:	66 65       	ori	r22, 0x56	; 86
    99b4:	65 64       	ori	r22, 0x45	; 69
    99b6:	64 63       	ori	r22, 0x34	; 52
    99b8:	63 62       	ori	r22, 0x23	; 35
    99ba:	62 62       	ori	r22, 0x22	; 34
    99bc:	61 61       	ori	r22, 0x11	; 17
    99be:	61 61       	ori	r22, 0x11	; 17
    99c0:	61 61       	ori	r22, 0x11	; 17
    99c2:	61 62       	ori	r22, 0x21	; 33
    99c4:	62 62       	ori	r22, 0x22	; 34
    99c6:	63 63       	ori	r22, 0x33	; 51
    99c8:	63 64       	ori	r22, 0x43	; 67
    99ca:	65 65       	ori	r22, 0x55	; 85
    99cc:	66 67       	ori	r22, 0x76	; 118
    99ce:	68 69       	ori	r22, 0x98	; 152
    99d0:	6a 6b       	ori	r22, 0xBA	; 186
    99d2:	6d 6e       	ori	r22, 0xED	; 237
    99d4:	70 71       	andi	r23, 0x10	; 16
    99d6:	73 74       	andi	r23, 0x43	; 67
    99d8:	76 78       	andi	r23, 0x86	; 134
    99da:	7a 7b       	andi	r23, 0xBA	; 186
    99dc:	7d 7e       	andi	r23, 0xED	; 237
    99de:	7f 7f       	andi	r23, 0xFF	; 255
    99e0:	7f 7f       	andi	r23, 0xFF	; 255
    99e2:	7e 7a       	andi	r23, 0xAE	; 174
    99e4:	76 6f       	ori	r23, 0xF6	; 246
    99e6:	67 5e       	subi	r22, 0xE7	; 231
    99e8:	54 49       	sbci	r21, 0x94	; 148
    99ea:	3f 36       	cpi	r19, 0x6F	; 111
    99ec:	2e 27       	eor	r18, r30
    99ee:	22 1e       	adc	r2, r18
    99f0:	1c 1b       	sub	r17, r28
    99f2:	1a 1b       	sub	r17, r26
    99f4:	1c 1e       	adc	r1, r28
    99f6:	20 22       	and	r2, r16
    99f8:	23 1f       	adc	r18, r19
    99fa:	15 0b       	sbc	r17, r21
    99fc:	07 08       	sbc	r0, r7
    99fe:	07 00       	.word	0x0007	; ????
    9a00:	1f 31       	cpi	r17, 0x1F	; 31
    9a02:	3d 44       	sbci	r19, 0x4D	; 77
    9a04:	4e 53       	subi	r20, 0x3E	; 62
    9a06:	54 56       	subi	r21, 0x64	; 100
    9a08:	5a 5f       	subi	r21, 0xFA	; 250
    9a0a:	64 69       	ori	r22, 0x94	; 148
    9a0c:	6e 74       	andi	r22, 0x4E	; 78
    9a0e:	76 79       	andi	r23, 0x96	; 150
    9a10:	7c 7f       	andi	r23, 0xFC	; 252
    9a12:	7f 7f       	andi	r23, 0xFF	; 255
    9a14:	7f 7f       	andi	r23, 0xFF	; 255
    9a16:	7f 7f       	andi	r23, 0xFF	; 255
    9a18:	7f 7f       	andi	r23, 0xFF	; 255
    9a1a:	7f 7f       	andi	r23, 0xFF	; 255
    9a1c:	7f 7f       	andi	r23, 0xFF	; 255
    9a1e:	7f 7f       	andi	r23, 0xFF	; 255
    9a20:	7f 7f       	andi	r23, 0xFF	; 255
    9a22:	7f 7f       	andi	r23, 0xFF	; 255
    9a24:	7f 7f       	andi	r23, 0xFF	; 255
    9a26:	7f 7f       	andi	r23, 0xFF	; 255
    9a28:	7f 7f       	andi	r23, 0xFF	; 255
    9a2a:	7f 7f       	andi	r23, 0xFF	; 255
    9a2c:	7f 7f       	andi	r23, 0xFF	; 255
    9a2e:	7f 7f       	andi	r23, 0xFF	; 255
    9a30:	7f 7f       	andi	r23, 0xFF	; 255
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	7f 7f       	andi	r23, 0xFF	; 255
    9a42:	7f 7f       	andi	r23, 0xFF	; 255
    9a44:	7f 7f       	andi	r23, 0xFF	; 255
    9a46:	7f 7f       	andi	r23, 0xFF	; 255
    9a48:	7f 7f       	andi	r23, 0xFF	; 255
    9a4a:	7f 7f       	andi	r23, 0xFF	; 255
    9a4c:	7f 7f       	andi	r23, 0xFF	; 255
    9a4e:	7f 7f       	andi	r23, 0xFF	; 255
    9a50:	7f 7f       	andi	r23, 0xFF	; 255
    9a52:	7f 7f       	andi	r23, 0xFF	; 255
    9a54:	7f 7f       	andi	r23, 0xFF	; 255
    9a56:	7f 7f       	andi	r23, 0xFF	; 255
    9a58:	7f 7f       	andi	r23, 0xFF	; 255
    9a5a:	7f 7f       	andi	r23, 0xFF	; 255
    9a5c:	7f 7f       	andi	r23, 0xFF	; 255
    9a5e:	7f 7f       	andi	r23, 0xFF	; 255
    9a60:	7f 7f       	andi	r23, 0xFF	; 255
    9a62:	7f 7f       	andi	r23, 0xFF	; 255
    9a64:	7f 7f       	andi	r23, 0xFF	; 255
    9a66:	7f 7f       	andi	r23, 0xFF	; 255
    9a68:	7f 7f       	andi	r23, 0xFF	; 255
    9a6a:	7f 7f       	andi	r23, 0xFF	; 255
    9a6c:	7f 7f       	andi	r23, 0xFF	; 255
    9a6e:	7f 7f       	andi	r23, 0xFF	; 255
    9a70:	7f 7f       	andi	r23, 0xFF	; 255
    9a72:	7f 7f       	andi	r23, 0xFF	; 255
    9a74:	7f 7f       	andi	r23, 0xFF	; 255
    9a76:	7f 7f       	andi	r23, 0xFF	; 255
    9a78:	7f 7f       	andi	r23, 0xFF	; 255
    9a7a:	7f 7c       	andi	r23, 0xCF	; 207
    9a7c:	78 71       	andi	r23, 0x18	; 24
    9a7e:	68 4c       	sbci	r22, 0xC8	; 200
    9a80:	2c 1c       	adc	r2, r12
    9a82:	12 0c       	add	r1, r2
    9a84:	0a 0b       	sbc	r16, r26
    9a86:	0a 05       	cpc	r16, r10
    9a88:	fd f3       	brhs	.-2      	; 0x9a88 <waves+0x988>
    9a8a:	e9 df       	rcall	.-46     	; 0x9a5e <waves+0x95e>
    9a8c:	d4 ca       	rjmp	.-2648   	; 0x9036 <steptable+0x12e>
    9a8e:	c0 b7       	in	r28, 0x30	; 48
    9a90:	ae a6       	std	Y+46, r10	; 0x2e
    9a92:	9e 97       	sbiw	r26, 0x2e	; 46
    9a94:	91 8b       	std	Z+17, r25	; 0x11
    9a96:	86 85       	ldd	r24, Z+14	; 0x0e
    9a98:	82 80       	ldd	r8, Z+2	; 0x02
    9a9a:	80 80       	ld	r8, Z
    9a9c:	80 80       	ld	r8, Z
    9a9e:	80 80       	ld	r8, Z
    9aa0:	80 80       	ld	r8, Z
    9aa2:	80 80       	ld	r8, Z
    9aa4:	80 80       	ld	r8, Z
    9aa6:	80 80       	ld	r8, Z
    9aa8:	80 80       	ld	r8, Z
    9aaa:	80 80       	ld	r8, Z
    9aac:	80 80       	ld	r8, Z
    9aae:	80 80       	ld	r8, Z
    9ab0:	80 80       	ld	r8, Z
    9ab2:	80 80       	ld	r8, Z
    9ab4:	80 80       	ld	r8, Z
    9ab6:	80 80       	ld	r8, Z
    9ab8:	80 80       	ld	r8, Z
    9aba:	80 80       	ld	r8, Z
    9abc:	80 80       	ld	r8, Z
    9abe:	80 80       	ld	r8, Z
    9ac0:	80 80       	ld	r8, Z
    9ac2:	80 80       	ld	r8, Z
    9ac4:	80 80       	ld	r8, Z
    9ac6:	80 80       	ld	r8, Z
    9ac8:	80 80       	ld	r8, Z
    9aca:	80 80       	ld	r8, Z
    9acc:	80 80       	ld	r8, Z
    9ace:	80 80       	ld	r8, Z
    9ad0:	80 80       	ld	r8, Z
    9ad2:	80 80       	ld	r8, Z
    9ad4:	80 80       	ld	r8, Z
    9ad6:	80 80       	ld	r8, Z
    9ad8:	80 80       	ld	r8, Z
    9ada:	80 80       	ld	r8, Z
    9adc:	80 80       	ld	r8, Z
    9ade:	80 80       	ld	r8, Z
    9ae0:	80 80       	ld	r8, Z
    9ae2:	80 80       	ld	r8, Z
    9ae4:	80 80       	ld	r8, Z
    9ae6:	80 80       	ld	r8, Z
    9ae8:	80 80       	ld	r8, Z
    9aea:	80 80       	ld	r8, Z
    9aec:	80 80       	ld	r8, Z
    9aee:	80 80       	ld	r8, Z
    9af0:	80 80       	ld	r8, Z
    9af2:	80 80       	ld	r8, Z
    9af4:	80 87       	std	Z+8, r24	; 0x08
    9af6:	91 9d       	mul	r25, r1
    9af8:	ac c4       	rjmp	.+2392   	; 0xa452 <LBRotateSprites+0x4c>
    9afa:	cb d4       	rcall	.+2454   	; 0xa492 <init_default_high_scores+0x1c>
    9afc:	dd f2       	brhs	.-74     	; 0x9ab4 <waves+0x9b4>
    9afe:	fa fa       	.word	0xfafa	; ????

00009b00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9b00:	80 91 f3 0c 	lds	r24, 0x0CF3
    9b04:	90 91 80 0d 	lds	r25, 0x0D80
    9b08:	89 17       	cp	r24, r25
    9b0a:	78 f4       	brcc	.+30     	; 0x9b2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    9b0c:	e8 2f       	mov	r30, r24
    9b0e:	f0 e0       	ldi	r31, 0x00	; 0
    9b10:	9f 01       	movw	r18, r30
    9b12:	22 0f       	add	r18, r18
    9b14:	33 1f       	adc	r19, r19
    9b16:	e2 0f       	add	r30, r18
    9b18:	f3 1f       	adc	r31, r19
    9b1a:	e0 5b       	subi	r30, 0xB0	; 176
    9b1c:	f3 4f       	sbci	r31, 0xF3	; 243
    9b1e:	a0 81       	ld	r26, Z
    9b20:	b1 81       	ldd	r27, Z+1	; 0x01
    9b22:	92 81       	ldd	r25, Z+2	; 0x02
    9b24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9b26:	8f 5f       	subi	r24, 0xFF	; 255
    9b28:	ed cf       	rjmp	.-38     	; 0x9b04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    9b2a:	08 95       	ret

00009b2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9b2c:	2f 92       	push	r2
    9b2e:	3f 92       	push	r3
    9b30:	4f 92       	push	r4
    9b32:	5f 92       	push	r5
    9b34:	6f 92       	push	r6
    9b36:	7f 92       	push	r7
    9b38:	8f 92       	push	r8
    9b3a:	9f 92       	push	r9
    9b3c:	af 92       	push	r10
    9b3e:	bf 92       	push	r11
    9b40:	cf 92       	push	r12
    9b42:	df 92       	push	r13
    9b44:	ef 92       	push	r14
    9b46:	ff 92       	push	r15
    9b48:	0f 93       	push	r16
    9b4a:	1f 93       	push	r17
    9b4c:	cf 93       	push	r28
    9b4e:	df 93       	push	r29
    9b50:	00 d0       	rcall	.+0      	; 0x9b52 <ProcessSprites+0x26>
    9b52:	00 d0       	rcall	.+0      	; 0x9b54 <ProcessSprites+0x28>
    9b54:	cd b7       	in	r28, 0x3d	; 61
    9b56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9b58:	80 91 00 05 	lds	r24, 0x0500
    9b5c:	88 23       	and	r24, r24
    9b5e:	09 f4       	brne	.+2      	; 0x9b62 <ProcessSprites+0x36>
    9b60:	e0 c0       	rjmp	.+448    	; 0x9d22 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9b62:	80 91 f2 0c 	lds	r24, 0x0CF2
    9b66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    9b6a:	80 93 80 0d 	sts	0x0D80, r24
    9b6e:	e0 e1       	ldi	r30, 0x10	; 16
    9b70:	ce 2e       	mov	r12, r30
    9b72:	e5 e0       	ldi	r30, 0x05	; 5
    9b74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9b76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9b78:	f6 01       	movw	r30, r12
    9b7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9b7c:	20 3e       	cpi	r18, 0xE0	; 224
    9b7e:	09 f4       	brne	.+2      	; 0x9b82 <ProcessSprites+0x56>
    9b80:	b1 c0       	rjmp	.+354    	; 0x9ce4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9b82:	80 91 b2 0c 	lds	r24, 0x0CB2
    9b86:	90 e0       	ldi	r25, 0x00	; 0
    9b88:	82 0f       	add	r24, r18
    9b8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    9b8c:	41 81       	ldd	r20, Z+1	; 0x01
    9b8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9b92:	30 e0       	ldi	r19, 0x00	; 0
    9b94:	24 0f       	add	r18, r20
    9b96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9b98:	ac 01       	movw	r20, r24
    9b9a:	73 e0       	ldi	r23, 0x03	; 3
    9b9c:	56 95       	lsr	r21
    9b9e:	47 95       	ror	r20
    9ba0:	7a 95       	dec	r23
    9ba2:	e1 f7       	brne	.-8      	; 0x9b9c <ProcessSprites+0x70>
    9ba4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    9ba6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9ba8:	11 f0       	breq	.+4      	; 0x9bae <ProcessSprites+0x82>
    9baa:	92 e0       	ldi	r25, 0x02	; 2
    9bac:	01 c0       	rjmp	.+2      	; 0x9bb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    9bae:	91 e0       	ldi	r25, 0x01	; 1
    9bb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9bb2:	a9 01       	movw	r20, r18
    9bb4:	63 e0       	ldi	r22, 0x03	; 3
    9bb6:	56 95       	lsr	r21
    9bb8:	47 95       	ror	r20
    9bba:	6a 95       	dec	r22
    9bbc:	e1 f7       	brne	.-8      	; 0x9bb6 <ProcessSprites+0x8a>
    9bbe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    9bc0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    9bc2:	19 f0       	breq	.+6      	; 0x9bca <ProcessSprites+0x9e>
    9bc4:	52 e0       	ldi	r21, 0x02	; 2
    9bc6:	35 2e       	mov	r3, r21
    9bc8:	02 c0       	rjmp	.+4      	; 0x9bce <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    9bca:	33 24       	eor	r3, r3
    9bcc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9bce:	30 e0       	ldi	r19, 0x00	; 0
    9bd0:	32 2f       	mov	r19, r18
    9bd2:	22 27       	eor	r18, r18
    9bd4:	f9 01       	movw	r30, r18
    9bd6:	e8 0f       	add	r30, r24
    9bd8:	f1 1d       	adc	r31, r1
    9bda:	fc 83       	std	Y+4, r31	; 0x04
    9bdc:	eb 83       	std	Y+3, r30	; 0x03
    9bde:	e1 2c       	mov	r14, r1
    9be0:	f1 2c       	mov	r15, r1
    9be2:	be 2c       	mov	r11, r14
    9be4:	aa 24       	eor	r10, r10
    9be6:	26 2c       	mov	r2, r6
    9be8:	45 2c       	mov	r4, r5
    9bea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    9bec:	84 2c       	mov	r8, r4
    9bee:	91 2c       	mov	r9, r1
    9bf0:	84 2d       	mov	r24, r4
    9bf2:	20 91 b4 0c 	lds	r18, 0x0CB4
    9bf6:	42 2f       	mov	r20, r18
    9bf8:	50 e0       	ldi	r21, 0x00	; 0
    9bfa:	44 0f       	add	r20, r20
    9bfc:	55 1f       	adc	r21, r21
    9bfe:	84 16       	cp	r8, r20
    9c00:	95 06       	cpc	r9, r21
    9c02:	14 f0       	brlt	.+4      	; 0x9c08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9c04:	22 0f       	add	r18, r18
    9c06:	03 c0       	rjmp	.+6      	; 0x9c0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9c08:	42 16       	cp	r4, r18
    9c0a:	10 f0       	brcs	.+4      	; 0x9c10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9c0c:	84 2d       	mov	r24, r4
    9c0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9c10:	ff e1       	ldi	r31, 0x1F	; 31
    9c12:	f2 15       	cp	r31, r2
    9c14:	18 f4       	brcc	.+6      	; 0x9c1c <ProcessSprites+0xf0>
    9c16:	00 ee       	ldi	r16, 0xE0	; 224
    9c18:	02 0d       	add	r16, r2
    9c1a:	01 c0       	rjmp	.+2      	; 0x9c1e <ProcessSprites+0xf2>
    9c1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9c1e:	28 2f       	mov	r18, r24
    9c20:	26 95       	lsr	r18
    9c22:	26 95       	lsr	r18
    9c24:	26 95       	lsr	r18
    9c26:	10 e0       	ldi	r17, 0x00	; 0
    9c28:	40 e2       	ldi	r20, 0x20	; 32
    9c2a:	24 9f       	mul	r18, r20
    9c2c:	00 0d       	add	r16, r0
    9c2e:	11 1d       	adc	r17, r1
    9c30:	11 24       	eor	r1, r1
    9c32:	23 e0       	ldi	r18, 0x03	; 3
    9c34:	00 0f       	add	r16, r16
    9c36:	11 1f       	adc	r17, r17
    9c38:	2a 95       	dec	r18
    9c3a:	e1 f7       	brne	.-8      	; 0x9c34 <ProcessSprites+0x108>
    9c3c:	87 70       	andi	r24, 0x07	; 7
    9c3e:	08 0f       	add	r16, r24
    9c40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9c42:	00 50       	subi	r16, 0x00	; 0
    9c44:	1f 4f       	sbci	r17, 0xFF	; 255
    9c46:	f8 01       	movw	r30, r16
    9c48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9c4a:	81 e0       	ldi	r24, 0x01	; 1
    9c4c:	7c 31       	cpi	r23, 0x1C	; 28
    9c4e:	08 f4       	brcc	.+2      	; 0x9c52 <ProcessSprites+0x126>
    9c50:	80 e0       	ldi	r24, 0x00	; 0
    9c52:	21 e0       	ldi	r18, 0x01	; 1
    9c54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9c58:	73 17       	cp	r23, r19
    9c5a:	18 f0       	brcs	.+6      	; 0x9c62 <ProcessSprites+0x136>
    9c5c:	20 e0       	ldi	r18, 0x00	; 0
    9c5e:	88 23       	and	r24, r24
    9c60:	51 f1       	breq	.+84     	; 0x9cb6 <ProcessSprites+0x18a>
    9c62:	60 91 80 0d 	lds	r22, 0x0D80
    9c66:	6c 31       	cpi	r22, 0x1C	; 28
    9c68:	20 f5       	brcc	.+72     	; 0x9cb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9c6a:	88 23       	and	r24, r24
    9c6c:	31 f0       	breq	.+12     	; 0x9c7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9c6e:	84 ee       	ldi	r24, 0xE4	; 228
    9c70:	87 0f       	add	r24, r23
    9c72:	7a 83       	std	Y+2, r23	; 0x02
    9c74:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <CopyFlashTile>
    9c78:	06 c0       	rjmp	.+12     	; 0x9c86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9c7a:	22 23       	and	r18, r18
    9c7c:	29 f0       	breq	.+10     	; 0x9c88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9c7e:	87 2f       	mov	r24, r23
    9c80:	7a 83       	std	Y+2, r23	; 0x02
    9c82:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <CopyRamTile>
    9c86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9c88:	80 91 80 0d 	lds	r24, 0x0D80
    9c8c:	e8 2f       	mov	r30, r24
    9c8e:	f0 e0       	ldi	r31, 0x00	; 0
    9c90:	9f 01       	movw	r18, r30
    9c92:	22 0f       	add	r18, r18
    9c94:	33 1f       	adc	r19, r19
    9c96:	e2 0f       	add	r30, r18
    9c98:	f3 1f       	adc	r31, r19
    9c9a:	e0 5b       	subi	r30, 0xB0	; 176
    9c9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9c9e:	11 83       	std	Z+1, r17	; 0x01
    9ca0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9ca2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9ca4:	f8 01       	movw	r30, r16
    9ca6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9ca8:	21 e0       	ldi	r18, 0x01	; 1
    9caa:	28 0f       	add	r18, r24
    9cac:	20 93 80 0d 	sts	0x0D80, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9cb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9cb2:	7c 31       	cpi	r23, 0x1C	; 28
    9cb4:	38 f4       	brcc	.+14     	; 0x9cc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    9cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    9cba:	a5 01       	movw	r20, r10
    9cbc:	67 2f       	mov	r22, r23
    9cbe:	87 2d       	mov	r24, r7
    9cc0:	0e 94 6a 3e 	call	0x7cd4	; 0x7cd4 <BlitSprite>
    9cc4:	ff ef       	ldi	r31, 0xFF	; 255
    9cc6:	af 1a       	sub	r10, r31
    9cc8:	bf 0a       	sbc	r11, r31
    9cca:	23 94       	inc	r2
    9ccc:	82 2d       	mov	r24, r2
    9cce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9cd0:	99 81       	ldd	r25, Y+1	; 0x01
    9cd2:	89 17       	cp	r24, r25
    9cd4:	08 f4       	brcc	.+2      	; 0x9cd8 <ProcessSprites+0x1ac>
    9cd6:	8c cf       	rjmp	.-232    	; 0x9bf0 <ProcessSprites+0xc4>
    9cd8:	ef ef       	ldi	r30, 0xFF	; 255
    9cda:	ee 1a       	sub	r14, r30
    9cdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9cde:	e3 14       	cp	r14, r3
    9ce0:	08 f4       	brcc	.+2      	; 0x9ce4 <ProcessSprites+0x1b8>
    9ce2:	7f cf       	rjmp	.-258    	; 0x9be2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9ce4:	73 94       	inc	r7
    9ce6:	f4 e0       	ldi	r31, 0x04	; 4
    9ce8:	cf 0e       	add	r12, r31
    9cea:	d1 1c       	adc	r13, r1
    9cec:	40 e1       	ldi	r20, 0x10	; 16
    9cee:	74 12       	cpse	r7, r20
    9cf0:	43 cf       	rjmp	.-378    	; 0x9b78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9cf2:	0f 90       	pop	r0
    9cf4:	0f 90       	pop	r0
    9cf6:	0f 90       	pop	r0
    9cf8:	0f 90       	pop	r0
    9cfa:	df 91       	pop	r29
    9cfc:	cf 91       	pop	r28
    9cfe:	1f 91       	pop	r17
    9d00:	0f 91       	pop	r16
    9d02:	ff 90       	pop	r15
    9d04:	ef 90       	pop	r14
    9d06:	df 90       	pop	r13
    9d08:	cf 90       	pop	r12
    9d0a:	bf 90       	pop	r11
    9d0c:	af 90       	pop	r10
    9d0e:	9f 90       	pop	r9
    9d10:	8f 90       	pop	r8
    9d12:	7f 90       	pop	r7
    9d14:	6f 90       	pop	r6
    9d16:	5f 90       	pop	r5
    9d18:	4f 90       	pop	r4
    9d1a:	3f 90       	pop	r3
    9d1c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9d1e:	0c 94 80 4d 	jmp	0x9b00	; 0x9b00 <RestoreBackground>

	}
    9d22:	0f 90       	pop	r0
    9d24:	0f 90       	pop	r0
    9d26:	0f 90       	pop	r0
    9d28:	0f 90       	pop	r0
    9d2a:	df 91       	pop	r29
    9d2c:	cf 91       	pop	r28
    9d2e:	1f 91       	pop	r17
    9d30:	0f 91       	pop	r16
    9d32:	ff 90       	pop	r15
    9d34:	ef 90       	pop	r14
    9d36:	df 90       	pop	r13
    9d38:	cf 90       	pop	r12
    9d3a:	bf 90       	pop	r11
    9d3c:	af 90       	pop	r10
    9d3e:	9f 90       	pop	r9
    9d40:	8f 90       	pop	r8
    9d42:	7f 90       	pop	r7
    9d44:	6f 90       	pop	r6
    9d46:	5f 90       	pop	r5
    9d48:	4f 90       	pop	r4
    9d4a:	3f 90       	pop	r3
    9d4c:	2f 90       	pop	r2
    9d4e:	08 95       	ret

00009d50 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    9d50:	90 91 b3 0c 	lds	r25, 0x0CB3
    9d54:	96 0f       	add	r25, r22
    9d56:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    9d5a:	20 91 b2 0c 	lds	r18, 0x0CB2
    9d5e:	82 0f       	add	r24, r18
    9d60:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    9d64:	80 91 b4 0c 	lds	r24, 0x0CB4
    9d68:	80 32       	cpi	r24, 0x20	; 32
    9d6a:	b0 f4       	brcc	.+44     	; 0x9d98 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    9d6c:	29 2f       	mov	r18, r25
    9d6e:	30 e0       	ldi	r19, 0x00	; 0
    9d70:	78 e0       	ldi	r23, 0x08	; 8
    9d72:	87 9f       	mul	r24, r23
    9d74:	a0 01       	movw	r20, r0
    9d76:	11 24       	eor	r1, r1
    9d78:	24 17       	cp	r18, r20
    9d7a:	35 07       	cpc	r19, r21
    9d7c:	6c f0       	brlt	.+26     	; 0x9d98 <Scroll+0x48>
				if(dy>=0){	
    9d7e:	67 fd       	sbrc	r22, 7
    9d80:	05 c0       	rjmp	.+10     	; 0x9d8c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    9d82:	28 ef       	ldi	r18, 0xF8	; 248
    9d84:	82 9f       	mul	r24, r18
    9d86:	90 0d       	add	r25, r0
    9d88:	11 24       	eor	r1, r1
    9d8a:	04 c0       	rjmp	.+8      	; 0x9d94 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    9d8c:	78 e0       	ldi	r23, 0x08	; 8
    9d8e:	87 9f       	mul	r24, r23
    9d90:	90 0d       	add	r25, r0
    9d92:	11 24       	eor	r1, r1
    9d94:	90 93 b3 0c 	sts	0x0CB3, r25
    9d98:	08 95       	ret

00009d9a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9d9a:	e0 e1       	ldi	r30, 0x10	; 16
    9d9c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9d9e:	80 ee       	ldi	r24, 0xE0	; 224
    9da0:	80 83       	st	Z, r24
    9da2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9da4:	95 e0       	ldi	r25, 0x05	; 5
    9da6:	e0 35       	cpi	r30, 0x50	; 80
    9da8:	f9 07       	cpc	r31, r25
    9daa:	d1 f7       	brne	.-12     	; 0x9da0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    9dac:	80 e2       	ldi	r24, 0x20	; 32
    9dae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    9db2:	10 92 af 0c 	sts	0x0CAF, r1
    9db6:	08 95       	ret

00009db8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9db8:	2f 92       	push	r2
    9dba:	3f 92       	push	r3
    9dbc:	4f 92       	push	r4
    9dbe:	5f 92       	push	r5
    9dc0:	6f 92       	push	r6
    9dc2:	7f 92       	push	r7
    9dc4:	8f 92       	push	r8
    9dc6:	9f 92       	push	r9
    9dc8:	af 92       	push	r10
    9dca:	bf 92       	push	r11
    9dcc:	cf 92       	push	r12
    9dce:	df 92       	push	r13
    9dd0:	ef 92       	push	r14
    9dd2:	ff 92       	push	r15
    9dd4:	0f 93       	push	r16
    9dd6:	1f 93       	push	r17
    9dd8:	cf 93       	push	r28
    9dda:	df 93       	push	r29
    9ddc:	00 d0       	rcall	.+0      	; 0x9dde <DrawMap+0x26>
    9dde:	1f 92       	push	r1
    9de0:	cd b7       	in	r28, 0x3d	; 61
    9de2:	de b7       	in	r29, 0x3e	; 62
    9de4:	28 2f       	mov	r18, r24
    9de6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9de8:	fa 01       	movw	r30, r20
    9dea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9dec:	31 96       	adiw	r30, 0x01	; 1
    9dee:	34 90       	lpm	r3, Z
    9df0:	42 2c       	mov	r4, r2
    9df2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9df4:	e1 2c       	mov	r14, r1
    9df6:	f1 2c       	mov	r15, r1
    9df8:	00 e0       	ldi	r16, 0x00	; 0
    9dfa:	10 e0       	ldi	r17, 0x00	; 0
    9dfc:	c6 2e       	mov	r12, r22
    9dfe:	d1 2c       	mov	r13, r1
    9e00:	03 15       	cp	r16, r3
    9e02:	68 f5       	brcc	.+90     	; 0x9e5e <DrawMap+0xa6>
    9e04:	1b 82       	std	Y+3, r1	; 0x03
    9e06:	1a 82       	std	Y+2, r1	; 0x02
    9e08:	57 01       	movw	r10, r14
    9e0a:	92 e0       	ldi	r25, 0x02	; 2
    9e0c:	a9 0e       	add	r10, r25
    9e0e:	b1 1c       	adc	r11, r1
    9e10:	48 01       	movw	r8, r16
    9e12:	8c 0c       	add	r8, r12
    9e14:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    9e16:	ea 81       	ldd	r30, Y+2	; 0x02
    9e18:	e2 15       	cp	r30, r2
    9e1a:	e0 f4       	brcc	.+56     	; 0x9e54 <DrawMap+0x9c>
    9e1c:	ea 81       	ldd	r30, Y+2	; 0x02
    9e1e:	fb 81       	ldd	r31, Y+3	; 0x03
    9e20:	ea 0d       	add	r30, r10
    9e22:	fb 1d       	adc	r31, r11
    9e24:	e6 0d       	add	r30, r6
    9e26:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9e28:	e4 91       	lpm	r30, Z
    9e2a:	f0 e0       	ldi	r31, 0x00	; 0
    9e2c:	60 91 b4 0c 	lds	r22, 0x0CB4
    9e30:	70 e0       	ldi	r23, 0x00	; 0
    9e32:	c4 01       	movw	r24, r8
    9e34:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    9e38:	af 01       	movw	r20, r30
    9e3a:	68 2f       	mov	r22, r24
    9e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e3e:	82 0f       	add	r24, r18
    9e40:	29 83       	std	Y+1, r18	; 0x01
    9e42:	0e 94 9d 40 	call	0x813a	; 0x813a <SetTile>
    9e46:	8a 81       	ldd	r24, Y+2	; 0x02
    9e48:	9b 81       	ldd	r25, Y+3	; 0x03
    9e4a:	01 96       	adiw	r24, 0x01	; 1
    9e4c:	9b 83       	std	Y+3, r25	; 0x03
    9e4e:	8a 83       	std	Y+2, r24	; 0x02
    9e50:	29 81       	ldd	r18, Y+1	; 0x01
    9e52:	e1 cf       	rjmp	.-62     	; 0x9e16 <DrawMap+0x5e>
    9e54:	0f 5f       	subi	r16, 0xFF	; 255
    9e56:	1f 4f       	sbci	r17, 0xFF	; 255
    9e58:	e4 0c       	add	r14, r4
    9e5a:	f5 1c       	adc	r15, r5
    9e5c:	d1 cf       	rjmp	.-94     	; 0x9e00 <DrawMap+0x48>
			}
		}

	}
    9e5e:	0f 90       	pop	r0
    9e60:	0f 90       	pop	r0
    9e62:	0f 90       	pop	r0
    9e64:	df 91       	pop	r29
    9e66:	cf 91       	pop	r28
    9e68:	1f 91       	pop	r17
    9e6a:	0f 91       	pop	r16
    9e6c:	ff 90       	pop	r15
    9e6e:	ef 90       	pop	r14
    9e70:	df 90       	pop	r13
    9e72:	cf 90       	pop	r12
    9e74:	bf 90       	pop	r11
    9e76:	af 90       	pop	r10
    9e78:	9f 90       	pop	r9
    9e7a:	8f 90       	pop	r8
    9e7c:	7f 90       	pop	r7
    9e7e:	6f 90       	pop	r6
    9e80:	5f 90       	pop	r5
    9e82:	4f 90       	pop	r4
    9e84:	3f 90       	pop	r3
    9e86:	2f 90       	pop	r2
    9e88:	08 95       	ret

00009e8a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9e8a:	0f 93       	push	r16
    9e8c:	1f 93       	push	r17
    9e8e:	cf 93       	push	r28
    9e90:	df 93       	push	r29
    9e92:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9e94:	c0 e0       	ldi	r28, 0x00	; 0
    9e96:	d0 e0       	ldi	r29, 0x00	; 0
    9e98:	c0 17       	cp	r28, r16
    9e9a:	d1 07       	cpc	r29, r17
    9e9c:	44 f4       	brge	.+16     	; 0x9eae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9e9e:	0e 94 b3 40 	call	0x8166	; 0x8166 <GetVsyncFlag>
    9ea2:	88 23       	and	r24, r24
    9ea4:	e1 f3       	breq	.-8      	; 0x9e9e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9ea6:	0e 94 b7 40 	call	0x816e	; 0x816e <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9eaa:	21 96       	adiw	r28, 0x01	; 1
    9eac:	f5 cf       	rjmp	.-22     	; 0x9e98 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9eae:	df 91       	pop	r29
    9eb0:	cf 91       	pop	r28
    9eb2:	1f 91       	pop	r17
    9eb4:	0f 91       	pop	r16
    9eb6:	08 95       	ret

00009eb8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    9eb8:	83 e2       	ldi	r24, 0x23	; 35
    9eba:	99 e0       	ldi	r25, 0x09	; 9
    9ebc:	0e 94 65 43 	call	0x86ca	; 0x86ca <InitMusicPlayer>
			SetTileTable(logo_tileset);
    9ec0:	83 e2       	ldi	r24, 0x23	; 35
    9ec2:	91 e0       	ldi	r25, 0x01	; 1
    9ec4:	0e 94 ae 40 	call	0x815c	; 0x815c <SetTileTable>
			
			//draw logo
			ClearVram();
    9ec8:	0e 94 93 40 	call	0x8126	; 0x8126 <ClearVram>
			WaitVsync(15);		
    9ecc:	8f e0       	ldi	r24, 0x0F	; 15
    9ece:	90 e0       	ldi	r25, 0x00	; 0
    9ed0:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    9ed4:	41 e0       	ldi	r20, 0x01	; 1
    9ed6:	6f ef       	ldi	r22, 0xFF	; 255
    9ed8:	80 e0       	ldi	r24, 0x00	; 0
    9eda:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9ede:	4d e0       	ldi	r20, 0x0D	; 13
    9ee0:	51 e0       	ldi	r21, 0x01	; 1
    9ee2:	6c e0       	ldi	r22, 0x0C	; 12
    9ee4:	8c e0       	ldi	r24, 0x0C	; 12
    9ee6:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
			WaitVsync(3);
    9eea:	83 e0       	ldi	r24, 0x03	; 3
    9eec:	90 e0       	ldi	r25, 0x00	; 0
    9eee:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    9ef2:	4c ef       	ldi	r20, 0xFC	; 252
    9ef4:	50 e0       	ldi	r21, 0x00	; 0
    9ef6:	6c e0       	ldi	r22, 0x0C	; 12
    9ef8:	8c e0       	ldi	r24, 0x0C	; 12
    9efa:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
			WaitVsync(2);
    9efe:	82 e0       	ldi	r24, 0x02	; 2
    9f00:	90 e0       	ldi	r25, 0x00	; 0
    9f02:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    9f06:	4d e0       	ldi	r20, 0x0D	; 13
    9f08:	51 e0       	ldi	r21, 0x01	; 1
    9f0a:	6c e0       	ldi	r22, 0x0C	; 12
    9f0c:	8c e0       	ldi	r24, 0x0C	; 12
    9f0e:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    9f12:	81 e4       	ldi	r24, 0x41	; 65
    9f14:	90 e0       	ldi	r25, 0x00	; 0
    9f16:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
			ClearVram();
    9f1a:	0e 94 93 40 	call	0x8126	; 0x8126 <ClearVram>
			WaitVsync(20);
    9f1e:	84 e1       	ldi	r24, 0x14	; 20
    9f20:	90 e0       	ldi	r25, 0x00	; 0
    9f22:	0c 94 45 4f 	jmp	0x9e8a	; 0x9e8a <WaitVsync>

00009f26 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9f26:	80 93 7e 0d 	sts	0x0D7E, r24
	currFadeFrame=0;
    9f2a:	10 92 82 0d 	sts	0x0D82, r1
	fadeActive=true;
    9f2e:	81 e0       	ldi	r24, 0x01	; 1
    9f30:	80 93 81 0d 	sts	0x0D81, r24
		
	if(blocking){
    9f34:	66 23       	and	r22, r22
    9f36:	21 f0       	breq	.+8      	; 0x9f40 <doFade+0x1a>
		while(fadeActive==true);
    9f38:	80 91 81 0d 	lds	r24, 0x0D81
    9f3c:	81 11       	cpse	r24, r1
    9f3e:	fc cf       	rjmp	.-8      	; 0x9f38 <doFade+0x12>
    9f40:	08 95       	ret

00009f42 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9f42:	81 11       	cpse	r24, r1
    9f44:	03 c0       	rjmp	.+6      	; 0x9f4c <FadeIn+0xa>
		DDRC=0xff;
    9f46:	8f ef       	ldi	r24, 0xFF	; 255
    9f48:	87 b9       	out	0x07, r24	; 7
		return;
    9f4a:	08 95       	ret
	}
	fadeStep=1;
    9f4c:	91 e0       	ldi	r25, 0x01	; 1
    9f4e:	90 93 83 0d 	sts	0x0D83, r25
	fadeDir=1;
    9f52:	90 93 7f 0d 	sts	0x0D7F, r25
	doFade(speed,blocking);
    9f56:	0c 94 93 4f 	jmp	0x9f26	; 0x9f26 <doFade>

00009f5a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9f5a:	81 11       	cpse	r24, r1
    9f5c:	02 c0       	rjmp	.+4      	; 0x9f62 <FadeOut+0x8>
		DDRC=0;
    9f5e:	17 b8       	out	0x07, r1	; 7
		return;
    9f60:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9f62:	9c e0       	ldi	r25, 0x0C	; 12
    9f64:	90 93 83 0d 	sts	0x0D83, r25
	fadeDir=-1;
    9f68:	9f ef       	ldi	r25, 0xFF	; 255
    9f6a:	90 93 7f 0d 	sts	0x0D7F, r25
	doFade(speed,blocking);
    9f6e:	0c 94 93 4f 	jmp	0x9f26	; 0x9f26 <doFade>

00009f72 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9f72:	80 91 81 0d 	lds	r24, 0x0D81
    9f76:	88 23       	and	r24, r24
    9f78:	01 f1       	breq	.+64     	; 0x9fba <ProcessFading+0x48>
		if(currFadeFrame==0){
    9f7a:	80 91 82 0d 	lds	r24, 0x0D82
    9f7e:	81 11       	cpse	r24, r1
    9f80:	19 c0       	rjmp	.+50     	; 0x9fb4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9f82:	80 91 7e 0d 	lds	r24, 0x0D7E
    9f86:	80 93 82 0d 	sts	0x0D82, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9f8a:	e0 91 83 0d 	lds	r30, 0x0D83
    9f8e:	f0 e0       	ldi	r31, 0x00	; 0
    9f90:	e1 51       	subi	r30, 0x11	; 17
    9f92:	ff 4f       	sbci	r31, 0xFF	; 255
    9f94:	e4 91       	lpm	r30, Z
    9f96:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9f98:	90 91 7f 0d 	lds	r25, 0x0D7F
    9f9c:	80 91 83 0d 	lds	r24, 0x0D83
    9fa0:	89 0f       	add	r24, r25
    9fa2:	80 93 83 0d 	sts	0x0D83, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9fa6:	88 23       	and	r24, r24
    9fa8:	11 f0       	breq	.+4      	; 0x9fae <ProcessFading+0x3c>
    9faa:	8d 30       	cpi	r24, 0x0D	; 13
    9fac:	31 f4       	brne	.+12     	; 0x9fba <ProcessFading+0x48>
				fadeActive=false;
    9fae:	10 92 81 0d 	sts	0x0D81, r1
    9fb2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9fb4:	81 50       	subi	r24, 0x01	; 1
    9fb6:	80 93 82 0d 	sts	0x0D82, r24
    9fba:	08 95       	ret

00009fbc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9fbc:	0e 94 b9 4f 	call	0x9f72	; 0x9f72 <ProcessFading>
		ProcessSprites();
    9fc0:	0c 94 96 4d 	jmp	0x9b2c	; 0x9b2c <ProcessSprites>

00009fc4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9fc4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9fc6:	88 23       	and	r24, r24
    9fc8:	29 f1       	breq	.+74     	; 0xa014 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    9fca:	87 ff       	sbrs	r24, 7
    9fcc:	03 c0       	rjmp	.+6      	; 0x9fd4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9fce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9fd0:	3f ef       	ldi	r19, 0xFF	; 255
    9fd2:	01 c0       	rjmp	.+2      	; 0x9fd6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9fd4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9fd6:	6c e3       	ldi	r22, 0x3C	; 60
    9fd8:	0e 94 d7 70 	call	0xe1ae	; 0xe1ae <__divmodqi4>
    9fdc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9fde:	99 23       	and	r25, r25
    9fe0:	a9 f0       	breq	.+42     	; 0xa00c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9fe2:	69 2f       	mov	r22, r25
    9fe4:	70 e0       	ldi	r23, 0x00	; 0
    9fe6:	8c e3       	ldi	r24, 0x3C	; 60
    9fe8:	90 e0       	ldi	r25, 0x00	; 0
    9fea:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9fee:	8e 2f       	mov	r24, r30
    9ff0:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    9ff4:	91 11       	cpse	r25, r1
    9ff6:	0a c0       	rjmp	.+20     	; 0xa00c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    9ff8:	42 2f       	mov	r20, r18
    9ffa:	50 e0       	ldi	r21, 0x00	; 0
    9ffc:	4f 5f       	subi	r20, 0xFF	; 255
    9ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    a000:	34 03       	mulsu	r19, r20
    a002:	c0 01       	movw	r24, r0
    a004:	35 9f       	mul	r19, r21
    a006:	90 0d       	add	r25, r0
    a008:	11 24       	eor	r1, r1
    a00a:	08 95       	ret
	}
	return direction*base_delta;
    a00c:	32 03       	mulsu	r19, r18
    a00e:	c0 01       	movw	r24, r0
    a010:	11 24       	eor	r1, r1
    a012:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a014:	80 e0       	ldi	r24, 0x00	; 0
    a016:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    a018:	08 95       	ret

0000a01a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    a01a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a01c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a01e:	93 81       	ldd	r25, Z+3	; 0x03
    a020:	9f 5f       	subi	r25, 0xFF	; 255
    a022:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a024:	42 81       	ldd	r20, Z+2	; 0x02
    a026:	80 81       	ld	r24, Z
    a028:	26 81       	ldd	r18, Z+6	; 0x06
    a02a:	37 81       	ldd	r19, Z+7	; 0x07
    a02c:	94 17       	cp	r25, r20
    a02e:	30 f4       	brcc	.+12     	; 0xa03c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    a030:	f9 01       	movw	r30, r18
    a032:	e8 0f       	add	r30, r24
    a034:	f1 1d       	adc	r31, r1
    a036:	e8 0f       	add	r30, r24
    a038:	f1 1d       	adc	r31, r1
    a03a:	12 c0       	rjmp	.+36     	; 0xa060 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    a03c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a03e:	90 e0       	ldi	r25, 0x00	; 0
    a040:	01 96       	adiw	r24, 0x01	; 1
    a042:	61 81       	ldd	r22, Z+1	; 0x01
    a044:	70 e0       	ldi	r23, 0x00	; 0
    a046:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    a04a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a04c:	81 11       	cpse	r24, r1
    a04e:	02 c0       	rjmp	.+4      	; 0xa054 <LBGetNextFrame+0x3a>
    a050:	41 e0       	ldi	r20, 0x01	; 1
    a052:	44 83       	std	Z+4, r20	; 0x04
    a054:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    a056:	88 0f       	add	r24, r24
    a058:	99 1f       	adc	r25, r25
    a05a:	f9 01       	movw	r30, r18
    a05c:	e8 0f       	add	r30, r24
    a05e:	f9 1f       	adc	r31, r25
    a060:	80 81       	ld	r24, Z
    a062:	91 81       	ldd	r25, Z+1	; 0x01
}
    a064:	08 95       	ret

0000a066 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a066:	0f 93       	push	r16
    a068:	1f 93       	push	r17
    a06a:	cf 93       	push	r28
    a06c:	df 93       	push	r29
    a06e:	1f 92       	push	r1
    a070:	cd b7       	in	r28, 0x3d	; 61
    a072:	de b7       	in	r29, 0x3e	; 62
    a074:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    a076:	86 2f       	mov	r24, r22
    a078:	69 83       	std	Y+1, r22	; 0x01
    a07a:	0e 94 bd 40 	call	0x817a	; 0x817a <ReadJoypad>
    a07e:	d8 01       	movw	r26, r16
    a080:	15 96       	adiw	r26, 0x05	; 5
    a082:	9c 93       	st	X, r25
    a084:	8e 93       	st	-X, r24
    a086:	14 97       	sbiw	r26, 0x04	; 4
    a088:	69 81       	ldd	r22, Y+1	; 0x01
    a08a:	e6 2f       	mov	r30, r22
    a08c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a08e:	00 97       	sbiw	r24, 0x00	; 0
    a090:	51 f0       	breq	.+20     	; 0xa0a6 <LBGetJoyPadState+0x40>
    a092:	df 01       	movw	r26, r30
    a094:	aa 0f       	add	r26, r26
    a096:	bb 1f       	adc	r27, r27
    a098:	aa 50       	subi	r26, 0x0A	; 10
    a09a:	b3 4f       	sbci	r27, 0xF3	; 243
    a09c:	2d 91       	ld	r18, X+
    a09e:	3c 91       	ld	r19, X
    a0a0:	82 17       	cp	r24, r18
    a0a2:	93 07       	cpc	r25, r19
    a0a4:	21 f0       	breq	.+8      	; 0xa0ae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a0a6:	d8 01       	movw	r26, r16
    a0a8:	16 96       	adiw	r26, 0x06	; 6
    a0aa:	1c 92       	st	X, r1
    a0ac:	07 c0       	rjmp	.+14     	; 0xa0bc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a0ae:	d8 01       	movw	r26, r16
    a0b0:	16 96       	adiw	r26, 0x06	; 6
    a0b2:	2c 91       	ld	r18, X
    a0b4:	16 97       	sbiw	r26, 0x06	; 6
    a0b6:	2f 5f       	subi	r18, 0xFF	; 255
    a0b8:	16 96       	adiw	r26, 0x06	; 6
    a0ba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a0bc:	ee 0f       	add	r30, r30
    a0be:	ff 1f       	adc	r31, r31
    a0c0:	ea 50       	subi	r30, 0x0A	; 10
    a0c2:	f3 4f       	sbci	r31, 0xF3	; 243
    a0c4:	20 81       	ld	r18, Z
    a0c6:	31 81       	ldd	r19, Z+1	; 0x01
    a0c8:	a9 01       	movw	r20, r18
    a0ca:	40 95       	com	r20
    a0cc:	50 95       	com	r21
    a0ce:	48 23       	and	r20, r24
    a0d0:	59 23       	and	r21, r25
    a0d2:	d8 01       	movw	r26, r16
    a0d4:	11 96       	adiw	r26, 0x01	; 1
    a0d6:	5c 93       	st	X, r21
    a0d8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a0da:	ac 01       	movw	r20, r24
    a0dc:	40 95       	com	r20
    a0de:	50 95       	com	r21
    a0e0:	24 23       	and	r18, r20
    a0e2:	35 23       	and	r19, r21
    a0e4:	13 96       	adiw	r26, 0x03	; 3
    a0e6:	3c 93       	st	X, r19
    a0e8:	2e 93       	st	-X, r18
    a0ea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a0ec:	91 83       	std	Z+1, r25	; 0x01
    a0ee:	80 83       	st	Z, r24
}
    a0f0:	0f 90       	pop	r0
    a0f2:	df 91       	pop	r29
    a0f4:	cf 91       	pop	r28
    a0f6:	1f 91       	pop	r17
    a0f8:	0f 91       	pop	r16
    a0fa:	08 95       	ret

0000a0fc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    a0fc:	90 ed       	ldi	r25, 0xD0	; 208
    a0fe:	94 0f       	add	r25, r20
    a100:	e0 91 84 0d 	lds	r30, 0x0D84
    a104:	f0 91 85 0d 	lds	r31, 0x0D85
    a108:	9a 30       	cpi	r25, 0x0A	; 10
    a10a:	38 f4       	brcc	.+14     	; 0xa11a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    a10c:	24 2f       	mov	r18, r20
    a10e:	30 e0       	ldi	r19, 0x00	; 0
    a110:	2d 52       	subi	r18, 0x2D	; 45
    a112:	31 09       	sbc	r19, r1
    a114:	e2 0f       	add	r30, r18
    a116:	f3 1f       	adc	r31, r19
    a118:	0c c0       	rjmp	.+24     	; 0xa132 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    a11a:	9f eb       	ldi	r25, 0xBF	; 191
    a11c:	94 0f       	add	r25, r20
    a11e:	9a 31       	cpi	r25, 0x1A	; 26
    a120:	38 f4       	brcc	.+14     	; 0xa130 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    a122:	50 e0       	ldi	r21, 0x00	; 0
    a124:	44 53       	subi	r20, 0x34	; 52
    a126:	51 09       	sbc	r21, r1
    a128:	e4 0f       	add	r30, r20
    a12a:	f5 1f       	adc	r31, r21
    a12c:	44 91       	lpm	r20, Z
    a12e:	03 c0       	rjmp	.+6      	; 0xa136 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    a130:	32 96       	adiw	r30, 0x02	; 2
    a132:	e4 91       	lpm	r30, Z
    a134:	4e 2f       	mov	r20, r30
    a136:	50 e0       	ldi	r21, 0x00	; 0
    a138:	0c 94 9d 40 	jmp	0x813a	; 0x813a <SetTile>

0000a13c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    a13c:	ff 92       	push	r15
    a13e:	0f 93       	push	r16
    a140:	1f 93       	push	r17
    a142:	cf 93       	push	r28
    a144:	df 93       	push	r29
    a146:	d8 2f       	mov	r29, r24
    a148:	f6 2e       	mov	r15, r22
    a14a:	8a 01       	movw	r16, r20
	u8 i = 0;
    a14c:	c0 e0       	ldi	r28, 0x00	; 0
    a14e:	8c 2f       	mov	r24, r28
    a150:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    a152:	f8 01       	movw	r30, r16
    a154:	ec 0f       	add	r30, r28
    a156:	f1 1d       	adc	r31, r1
    a158:	44 91       	lpm	r20, Z
    a15a:	44 23       	and	r20, r20
    a15c:	29 f0       	breq	.+10     	; 0xa168 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    a15e:	6f 2d       	mov	r22, r15
    a160:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		i++;
    a164:	cf 5f       	subi	r28, 0xFF	; 255
    a166:	f3 cf       	rjmp	.-26     	; 0xa14e <LBPrint+0x12>
	}
}
    a168:	df 91       	pop	r29
    a16a:	cf 91       	pop	r28
    a16c:	1f 91       	pop	r17
    a16e:	0f 91       	pop	r16
    a170:	ff 90       	pop	r15
    a172:	08 95       	ret

0000a174 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    a174:	df 92       	push	r13
    a176:	ef 92       	push	r14
    a178:	ff 92       	push	r15
    a17a:	0f 93       	push	r16
    a17c:	1f 93       	push	r17
    a17e:	cf 93       	push	r28
    a180:	df 93       	push	r29
    a182:	1f 92       	push	r1
    a184:	cd b7       	in	r28, 0x3d	; 61
    a186:	de b7       	in	r29, 0x3e	; 62
    a188:	38 2f       	mov	r19, r24
    a18a:	06 2f       	mov	r16, r22
    a18c:	84 2f       	mov	r24, r20
    a18e:	9d ef       	ldi	r25, 0xFD	; 253
    a190:	e9 2e       	mov	r14, r25
    a192:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a194:	4a e0       	ldi	r20, 0x0A	; 10
    a196:	f4 2e       	mov	r15, r20
    a198:	1f ef       	ldi	r17, 0xFF	; 255
    a19a:	13 0f       	add	r17, r19
    a19c:	6f 2d       	mov	r22, r15
    a19e:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    a1a2:	d8 2e       	mov	r13, r24
    a1a4:	40 e3       	ldi	r20, 0x30	; 48
    a1a6:	49 0f       	add	r20, r25
    a1a8:	60 2f       	mov	r22, r16
    a1aa:	83 2f       	mov	r24, r19
    a1ac:	29 83       	std	Y+1, r18	; 0x01
    a1ae:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		value /= 10;
    a1b2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    a1b4:	29 81       	ldd	r18, Y+1	; 0x01
    a1b6:	21 11       	cpse	r18, r1
    a1b8:	02 c0       	rjmp	.+4      	; 0xa1be <LBPrintByte+0x4a>
    a1ba:	dd 20       	and	r13, r13
    a1bc:	19 f0       	breq	.+6      	; 0xa1c4 <LBPrintByte+0x50>
    a1be:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    a1c0:	1e 11       	cpse	r17, r14
    a1c2:	ea cf       	rjmp	.-44     	; 0xa198 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a1c4:	0f 90       	pop	r0
    a1c6:	df 91       	pop	r29
    a1c8:	cf 91       	pop	r28
    a1ca:	1f 91       	pop	r17
    a1cc:	0f 91       	pop	r16
    a1ce:	ff 90       	pop	r15
    a1d0:	ef 90       	pop	r14
    a1d2:	df 90       	pop	r13
    a1d4:	08 95       	ret

0000a1d6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    a1d6:	cf 92       	push	r12
    a1d8:	df 92       	push	r13
    a1da:	ef 92       	push	r14
    a1dc:	ff 92       	push	r15
    a1de:	0f 93       	push	r16
    a1e0:	1f 93       	push	r17
    a1e2:	cf 93       	push	r28
    a1e4:	df 93       	push	r29
    a1e6:	00 d0       	rcall	.+0      	; 0xa1e8 <LBPrintInt+0x12>
    a1e8:	cd b7       	in	r28, 0x3d	; 61
    a1ea:	de b7       	in	r29, 0x3e	; 62
    a1ec:	38 2f       	mov	r19, r24
    a1ee:	16 2f       	mov	r17, r22
    a1f0:	ca 01       	movw	r24, r20
    a1f2:	4b ef       	ldi	r20, 0xFB	; 251
    a1f4:	d4 2e       	mov	r13, r20
    a1f6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a1f8:	5a e0       	ldi	r21, 0x0A	; 10
    a1fa:	e5 2e       	mov	r14, r21
    a1fc:	f1 2c       	mov	r15, r1
    a1fe:	cc 24       	eor	r12, r12
    a200:	ca 94       	dec	r12
    a202:	c3 0e       	add	r12, r19
    a204:	b7 01       	movw	r22, r14
    a206:	0e 94 e5 70 	call	0xe1ca	; 0xe1ca <__udivmodhi4>
    a20a:	06 2f       	mov	r16, r22
    a20c:	40 e3       	ldi	r20, 0x30	; 48
    a20e:	48 0f       	add	r20, r24
    a210:	61 2f       	mov	r22, r17
    a212:	83 2f       	mov	r24, r19
    a214:	29 83       	std	Y+1, r18	; 0x01
    a216:	7a 83       	std	Y+2, r23	; 0x02
    a218:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		value /= 10;
    a21c:	80 2f       	mov	r24, r16
    a21e:	7a 81       	ldd	r23, Y+2	; 0x02
    a220:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a222:	29 81       	ldd	r18, Y+1	; 0x01
    a224:	21 11       	cpse	r18, r1
    a226:	02 c0       	rjmp	.+4      	; 0xa22c <LBPrintInt+0x56>
    a228:	00 97       	sbiw	r24, 0x00	; 0
    a22a:	19 f0       	breq	.+6      	; 0xa232 <LBPrintInt+0x5c>
    a22c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a22e:	cd 10       	cpse	r12, r13
    a230:	e6 cf       	rjmp	.-52     	; 0xa1fe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a232:	0f 90       	pop	r0
    a234:	0f 90       	pop	r0
    a236:	df 91       	pop	r29
    a238:	cf 91       	pop	r28
    a23a:	1f 91       	pop	r17
    a23c:	0f 91       	pop	r16
    a23e:	ff 90       	pop	r15
    a240:	ef 90       	pop	r14
    a242:	df 90       	pop	r13
    a244:	cf 90       	pop	r12
    a246:	08 95       	ret

0000a248 <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a248:	af 92       	push	r10
    a24a:	cf 92       	push	r12
    a24c:	ef 92       	push	r14
    a24e:	ff 92       	push	r15
    a250:	0f 93       	push	r16
    a252:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a254:	70 e0       	ldi	r23, 0x00	; 0
    a256:	f1 2c       	mov	r15, r1
    a258:	fb 01       	movw	r30, r22
    a25a:	e2 0f       	add	r30, r18
    a25c:	f1 1d       	adc	r31, r1
    a25e:	ee 16       	cp	r14, r30
    a260:	ff 06       	cpc	r15, r31
    a262:	a4 f4       	brge	.+40     	; 0xa28c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a264:	ea 0c       	add	r14, r10
    a266:	f1 1c       	adc	r15, r1
    a268:	6e 15       	cp	r22, r14
    a26a:	7f 05       	cpc	r23, r15
    a26c:	7c f4       	brge	.+30     	; 0xa28c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a26e:	28 2f       	mov	r18, r24
    a270:	30 e0       	ldi	r19, 0x00	; 0
    a272:	10 e0       	ldi	r17, 0x00	; 0
    a274:	c9 01       	movw	r24, r18
    a276:	84 0f       	add	r24, r20
    a278:	91 1d       	adc	r25, r1
    a27a:	08 17       	cp	r16, r24
    a27c:	19 07       	cpc	r17, r25
    a27e:	34 f4       	brge	.+12     	; 0xa28c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a280:	0c 0d       	add	r16, r12
    a282:	11 1d       	adc	r17, r1
    a284:	81 e0       	ldi	r24, 0x01	; 1
    a286:	20 17       	cp	r18, r16
    a288:	31 07       	cpc	r19, r17
    a28a:	0c f0       	brlt	.+2      	; 0xa28e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a28c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a28e:	1f 91       	pop	r17
    a290:	0f 91       	pop	r16
    a292:	ff 90       	pop	r15
    a294:	ef 90       	pop	r14
    a296:	cf 90       	pop	r12
    a298:	af 90       	pop	r10
    a29a:	08 95       	ret

0000a29c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a29c:	cf 93       	push	r28
    a29e:	df 93       	push	r29
    a2a0:	d8 2f       	mov	r29, r24
    a2a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a2a4:	80 e0       	ldi	r24, 0x00	; 0
    a2a6:	90 e0       	ldi	r25, 0x00	; 0
    a2a8:	0e 94 8b 42 	call	0x8516	; 0x8516 <GetPrngNumber>
    a2ac:	6f ef       	ldi	r22, 0xFF	; 255
    a2ae:	70 e0       	ldi	r23, 0x00	; 0
    a2b0:	0e 94 e5 70 	call	0xe1ca	; 0xe1ca <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a2b4:	6c 2f       	mov	r22, r28
    a2b6:	70 e0       	ldi	r23, 0x00	; 0
    a2b8:	6d 1b       	sub	r22, r29
    a2ba:	71 09       	sbc	r23, r1
    a2bc:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
}
    a2c0:	8d 0f       	add	r24, r29
    a2c2:	df 91       	pop	r29
    a2c4:	cf 91       	pop	r28
    a2c6:	08 95       	ret

0000a2c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a2c8:	cf 93       	push	r28
    a2ca:	df 93       	push	r29
    a2cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a2ce:	c0 e0       	ldi	r28, 0x00	; 0
    a2d0:	cd 17       	cp	r28, r29
    a2d2:	31 f0       	breq	.+12     	; 0xa2e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a2d4:	8f ef       	ldi	r24, 0xFF	; 255
    a2d6:	9f ef       	ldi	r25, 0xFF	; 255
    a2d8:	0e 94 c9 40 	call	0x8192	; 0x8192 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a2dc:	cf 5f       	subi	r28, 0xFF	; 255
    a2de:	f8 cf       	rjmp	.-16     	; 0xa2d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a2e0:	df 91       	pop	r29
    a2e2:	cf 91       	pop	r28
    a2e4:	08 95       	ret

0000a2e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a2e6:	df 92       	push	r13
    a2e8:	ef 92       	push	r14
    a2ea:	ff 92       	push	r15
    a2ec:	0f 93       	push	r16
    a2ee:	1f 93       	push	r17
    a2f0:	cf 93       	push	r28
    a2f2:	df 93       	push	r29
    a2f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a2f6:	fb 01       	movw	r30, r22
    a2f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a2fa:	31 96       	adiw	r30, 0x01	; 1
    a2fc:	64 91       	lpm	r22, Z
    a2fe:	5f ef       	ldi	r21, 0xFF	; 255
    a300:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a302:	24 2f       	mov	r18, r20
    a304:	21 70       	andi	r18, 0x01	; 1
    a306:	40 ff       	sbrs	r20, 0
    a308:	04 c0       	rjmp	.+8      	; 0xa312 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a30a:	95 2f       	mov	r25, r21
		dx=-1;
    a30c:	ff 24       	eor	r15, r15
    a30e:	fa 94       	dec	r15
    a310:	03 c0       	rjmp	.+6      	; 0xa318 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a312:	ff 24       	eor	r15, r15
    a314:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a316:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a318:	41 ff       	sbrs	r20, 1
    a31a:	05 c0       	rjmp	.+10     	; 0xa326 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a31c:	7f ef       	ldi	r23, 0xFF	; 255
    a31e:	76 0f       	add	r23, r22
		dy=-1;
    a320:	ee 24       	eor	r14, r14
    a322:	ea 94       	dec	r14
    a324:	03 c0       	rjmp	.+6      	; 0xa32c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a326:	ee 24       	eor	r14, r14
    a328:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a32a:	70 e0       	ldi	r23, 0x00	; 0
    a32c:	21 11       	cpse	r18, r1
    a32e:	01 c0       	rjmp	.+2      	; 0xa332 <LBMapSprite+0x4c>
    a330:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a332:	00 e0       	ldi	r16, 0x00	; 0
    a334:	06 17       	cp	r16, r22
    a336:	09 f1       	breq	.+66     	; 0xa37a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a338:	71 03       	mulsu	r23, r17
    a33a:	e0 01       	movw	r28, r0
    a33c:	11 24       	eor	r1, r1
    a33e:	d8 2e       	mov	r13, r24
    a340:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a342:	8d 15       	cp	r24, r13
    a344:	b1 f0       	breq	.+44     	; 0xa372 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a346:	9e 01       	movw	r18, r28
    a348:	29 0f       	add	r18, r25
    a34a:	31 1d       	adc	r19, r1
    a34c:	97 fd       	sbrc	r25, 7
    a34e:	3a 95       	dec	r19
    a350:	2e 5f       	subi	r18, 0xFE	; 254
    a352:	3f 4f       	sbci	r19, 0xFF	; 255
    a354:	fd 01       	movw	r30, r26
    a356:	e2 0f       	add	r30, r18
    a358:	f3 1f       	adc	r31, r19
    a35a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a35c:	34 e0       	ldi	r19, 0x04	; 4
    a35e:	83 9f       	mul	r24, r19
    a360:	f0 01       	movw	r30, r0
    a362:	11 24       	eor	r1, r1
    a364:	e5 52       	subi	r30, 0x25	; 37
    a366:	f0 4f       	sbci	r31, 0xF0	; 240
    a368:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a36a:	8f 5f       	subi	r24, 0xFF	; 255
    a36c:	43 83       	std	Z+3, r20	; 0x03
    a36e:	9f 0d       	add	r25, r15
    a370:	e8 cf       	rjmp	.-48     	; 0xa342 <LBMapSprite+0x5c>
    a372:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a374:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a376:	95 2f       	mov	r25, r21
    a378:	dd cf       	rjmp	.-70     	; 0xa334 <LBMapSprite+0x4e>
	}
}
    a37a:	df 91       	pop	r29
    a37c:	cf 91       	pop	r28
    a37e:	1f 91       	pop	r17
    a380:	0f 91       	pop	r16
    a382:	ff 90       	pop	r15
    a384:	ef 90       	pop	r14
    a386:	df 90       	pop	r13
    a388:	08 95       	ret

0000a38a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a38a:	df 92       	push	r13
    a38c:	ef 92       	push	r14
    a38e:	ff 92       	push	r15
    a390:	0f 93       	push	r16
    a392:	1f 93       	push	r17
    a394:	cf 93       	push	r28
    a396:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a398:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a39c:	98 e0       	ldi	r25, 0x08	; 8
    a39e:	a9 9f       	mul	r26, r25
    a3a0:	70 01       	movw	r14, r0
    a3a2:	11 24       	eor	r1, r1
    a3a4:	50 e0       	ldi	r21, 0x00	; 0
    a3a6:	38 ef       	ldi	r19, 0xF8	; 248
    a3a8:	a3 9f       	mul	r26, r19
    a3aa:	30 2d       	mov	r19, r0
    a3ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a3ae:	70 e0       	ldi	r23, 0x00	; 0
    a3b0:	70 17       	cp	r23, r16
    a3b2:	09 f1       	breq	.+66     	; 0xa3f6 <LBMoveSprite+0x6c>
    a3b4:	d4 2e       	mov	r13, r20
    a3b6:	13 2f       	mov	r17, r19
    a3b8:	14 0f       	add	r17, r20
    a3ba:	b8 2f       	mov	r27, r24
    a3bc:	b2 0f       	add	r27, r18
    a3be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a3c0:	8b 17       	cp	r24, r27
    a3c2:	a9 f0       	breq	.+42     	; 0xa3ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a3c4:	c4 e0       	ldi	r28, 0x04	; 4
    a3c6:	8c 9f       	mul	r24, r28
    a3c8:	f0 01       	movw	r30, r0
    a3ca:	11 24       	eor	r1, r1
    a3cc:	ef 01       	movw	r28, r30
    a3ce:	c5 52       	subi	r28, 0x25	; 37
    a3d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a3d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a3d4:	a0 32       	cpi	r26, 0x20	; 32
    a3d6:	28 f4       	brcc	.+10     	; 0xa3e2 <LBMoveSprite+0x58>
    a3d8:	e4 16       	cp	r14, r20
    a3da:	f5 06       	cpc	r15, r21
    a3dc:	14 f4       	brge	.+4      	; 0xa3e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a3de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a3e0:	03 c0       	rjmp	.+6      	; 0xa3e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a3e2:	e5 52       	subi	r30, 0x25	; 37
    a3e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a3e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a3e8:	8f 5f       	subi	r24, 0xFF	; 255
    a3ea:	98 5f       	subi	r25, 0xF8	; 248
    a3ec:	e9 cf       	rjmp	.-46     	; 0xa3c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a3ee:	7f 5f       	subi	r23, 0xFF	; 255
    a3f0:	48 5f       	subi	r20, 0xF8	; 248
    a3f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a3f4:	dd cf       	rjmp	.-70     	; 0xa3b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a3f6:	df 91       	pop	r29
    a3f8:	cf 91       	pop	r28
    a3fa:	1f 91       	pop	r17
    a3fc:	0f 91       	pop	r16
    a3fe:	ff 90       	pop	r15
    a400:	ef 90       	pop	r14
    a402:	df 90       	pop	r13
    a404:	08 95       	ret

0000a406 <LBRotateSprites>:

void LBRotateSprites()
{
    a406:	80 e0       	ldi	r24, 0x00	; 0
    a408:	90 e0       	ldi	r25, 0x00	; 0
    a40a:	dc 01       	movw	r26, r24
    a40c:	a5 52       	subi	r26, 0x25	; 37
    a40e:	b0 4f       	sbci	r27, 0xF0	; 240
    a410:	fc 01       	movw	r30, r24
    a412:	e0 5f       	subi	r30, 0xF0	; 240
    a414:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a416:	13 96       	adiw	r26, 0x03	; 3
    a418:	2c 91       	ld	r18, X
    a41a:	13 97       	sbiw	r26, 0x03	; 3
    a41c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a41e:	12 96       	adiw	r26, 0x02	; 2
    a420:	2c 91       	ld	r18, X
    a422:	12 97       	sbiw	r26, 0x02	; 2
    a424:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a426:	2c 91       	ld	r18, X
    a428:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a42a:	11 96       	adiw	r26, 0x01	; 1
    a42c:	2c 91       	ld	r18, X
    a42e:	21 83       	std	Z+1, r18	; 0x01
    a430:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a432:	8c 33       	cpi	r24, 0x3C	; 60
    a434:	91 05       	cpc	r25, r1
    a436:	49 f7       	brne	.-46     	; 0xa40a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a438:	80 91 01 05 	lds	r24, 0x0501
    a43c:	94 e0       	ldi	r25, 0x04	; 4
    a43e:	89 9f       	mul	r24, r25
    a440:	f0 01       	movw	r30, r0
    a442:	11 24       	eor	r1, r1
    a444:	e5 52       	subi	r30, 0x25	; 37
    a446:	f0 4f       	sbci	r31, 0xF0	; 240
    a448:	93 81       	ldd	r25, Z+3	; 0x03
    a44a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a44e:	92 81       	ldd	r25, Z+2	; 0x02
    a450:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a454:	90 81       	ld	r25, Z
    a456:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a45a:	91 81       	ldd	r25, Z+1	; 0x01
    a45c:	90 93 4d 05 	sts	0x054D, r25
		rotate_index += 1;
    a460:	8f 5f       	subi	r24, 0xFF	; 255
		if (rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a462:	84 31       	cpi	r24, 0x14	; 20
    a464:	08 f0       	brcs	.+2      	; 0xa468 <LBRotateSprites+0x62>
    a466:	8f e0       	ldi	r24, 0x0F	; 15
    a468:	80 93 01 05 	sts	0x0501, r24
    a46c:	08 95       	ret

0000a46e <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a46e:	80 91 c7 0d 	lds	r24, 0x0DC7
}
    a472:	81 70       	andi	r24, 0x01	; 1
    a474:	08 95       	ret

0000a476 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a476:	8c e8       	ldi	r24, 0x8C	; 140
    a478:	90 e0       	ldi	r25, 0x00	; 0
    a47a:	90 93 93 0d 	sts	0x0D93, r25
    a47e:	80 93 92 0d 	sts	0x0D92, r24
    a482:	80 e0       	ldi	r24, 0x00	; 0
    a484:	90 e0       	ldi	r25, 0x00	; 0
    a486:	fc 01       	movw	r30, r24
    a488:	e8 56       	subi	r30, 0x68	; 104
    a48a:	f5 4f       	sbci	r31, 0xF5	; 245
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a48c:	e4 91       	lpm	r30, Z
    a48e:	dc 01       	movw	r26, r24
    a490:	ae 56       	subi	r26, 0x6E	; 110
    a492:	b2 4f       	sbci	r27, 0xF2	; 242
    a494:	12 96       	adiw	r26, 0x02	; 2
    a496:	ec 93       	st	X, r30
    a498:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a49a:	8e 31       	cpi	r24, 0x1E	; 30
    a49c:	91 05       	cpc	r25, r1
    a49e:	99 f7       	brne	.-26     	; 0xa486 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a4a0:	08 95       	ret

0000a4a2 <init_enemy_state>:

void init_enemy_state()
{
    a4a2:	80 e0       	ldi	r24, 0x00	; 0
    a4a4:	90 e0       	ldi	r25, 0x00	; 0
    a4a6:	9c 01       	movw	r18, r24
    a4a8:	2e 54       	subi	r18, 0x4E	; 78
    a4aa:	32 4f       	sbci	r19, 0xF2	; 242
    a4ac:	f9 01       	movw	r30, r18
    a4ae:	e5 5e       	subi	r30, 0xE5	; 229
    a4b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a4b2:	10 82       	st	Z, r1
    a4b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a4b6:	10 82       	st	Z, r1
    a4b8:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a4ba:	89 30       	cpi	r24, 0x09	; 9
    a4bc:	21 e0       	ldi	r18, 0x01	; 1
    a4be:	92 07       	cpc	r25, r18
    a4c0:	91 f7       	brne	.-28     	; 0xa4a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a4c2:	10 92 cd 0d 	sts	0x0DCD, r1
    a4c6:	08 95       	ret

0000a4c8 <init_player_shot>:
	}
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a4c8:	81 11       	cpse	r24, r1
    a4ca:	53 c0       	rjmp	.+166    	; 0xa572 <init_player_shot+0xaa>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4cc:	10 92 e7 0d 	sts	0x0DE7, r1
	shot->hit_count = damage;
    a4d0:	81 e0       	ldi	r24, 0x01	; 1
    a4d2:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->shot_speed = speed;
    a4d6:	90 e5       	ldi	r25, 0x50	; 80
    a4d8:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->y_delta = y_delta;
    a4dc:	10 92 eb 0d 	sts	0x0DEB, r1
	shot->anim.anim_count = 1;
    a4e0:	80 93 ed 0d 	sts	0x0DED, r24
	shot->anim.frames_per_anim = 1;
    a4e4:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims = anim;
    a4e8:	26 e8       	ldi	r18, 0x86	; 134
    a4ea:	3d e0       	ldi	r19, 0x0D	; 13
    a4ec:	30 93 f3 0d 	sts	0x0DF3, r19
    a4f0:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->anim.anims[0] = (char*) map;
    a4f4:	25 ed       	ldi	r18, 0xD5	; 213
    a4f6:	36 e3       	ldi	r19, 0x36	; 54
    a4f8:	30 93 87 0d 	sts	0x0D87, r19
    a4fc:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a500:	90 93 e5 0d 	sts	0x0DE5, r25
	shot->shared.vy = 0;
    a504:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a508:	10 92 fb 0d 	sts	0x0DFB, r1
	shot->hit_count = damage;
    a50c:	80 93 fc 0d 	sts	0x0DFC, r24
	shot->shot_speed = speed;
    a510:	90 93 fe 0d 	sts	0x0DFE, r25
	shot->y_delta = y_delta;
    a514:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a518:	80 93 01 0e 	sts	0x0E01, r24
	shot->anim.frames_per_anim = 1;
    a51c:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.anims = anim;
    a520:	47 e3       	ldi	r20, 0x37	; 55
    a522:	50 e1       	ldi	r21, 0x10	; 16
    a524:	50 93 07 0e 	sts	0x0E07, r21
    a528:	40 93 06 0e 	sts	0x0E06, r20
	shot->anim.anims[0] = (char*) map;
    a52c:	30 93 38 10 	sts	0x1038, r19
    a530:	20 93 37 10 	sts	0x1037, r18
	shot->shared.vx = speed;
    a534:	90 93 f9 0d 	sts	0x0DF9, r25
	shot->shared.vy = 0;
    a538:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a53c:	10 92 0f 0e 	sts	0x0E0F, r1
	shot->hit_count = damage;
    a540:	80 93 10 0e 	sts	0x0E10, r24
	shot->shot_speed = speed;
    a544:	90 93 12 0e 	sts	0x0E12, r25
	shot->y_delta = y_delta;
    a548:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a54c:	80 93 15 0e 	sts	0x0E15, r24
	shot->anim.frames_per_anim = 1;
    a550:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.anims = anim;
    a554:	47 e4       	ldi	r20, 0x47	; 71
    a556:	50 e1       	ldi	r21, 0x10	; 16
    a558:	50 93 1b 0e 	sts	0x0E1B, r21
    a55c:	40 93 1a 0e 	sts	0x0E1A, r20
	shot->anim.anims[0] = (char*) map;
    a560:	30 93 48 10 	sts	0x1048, r19
    a564:	20 93 47 10 	sts	0x1047, r18
	shot->shared.vx = speed;
    a568:	90 93 0d 0e 	sts	0x0E0D, r25
	shot->shared.vy = 0;
    a56c:	10 92 0c 0e 	sts	0x0E0C, r1
    a570:	c2 c1       	rjmp	.+900    	; 0xa8f6 <init_player_shot+0x42e>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a572:	82 30       	cpi	r24, 0x02	; 2
    a574:	09 f0       	breq	.+2      	; 0xa578 <init_player_shot+0xb0>
    a576:	55 c0       	rjmp	.+170    	; 0xa622 <init_player_shot+0x15a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a578:	91 e0       	ldi	r25, 0x01	; 1
    a57a:	90 93 e7 0d 	sts	0x0DE7, r25
	shot->hit_count = damage;
    a57e:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->shot_speed = speed;
    a582:	24 e6       	ldi	r18, 0x64	; 100
    a584:	20 93 ea 0d 	sts	0x0DEA, r18
	shot->y_delta = y_delta;
    a588:	10 92 eb 0d 	sts	0x0DEB, r1
	shot->anim.anim_count = 1;
    a58c:	90 93 ed 0d 	sts	0x0DED, r25
	shot->anim.frames_per_anim = 1;
    a590:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.anims = anim;
    a594:	46 e8       	ldi	r20, 0x86	; 134
    a596:	5d e0       	ldi	r21, 0x0D	; 13
    a598:	50 93 f3 0d 	sts	0x0DF3, r21
    a59c:	40 93 f2 0d 	sts	0x0DF2, r20
	shot->anim.anims[0] = (char*) map;
    a5a0:	42 ed       	ldi	r20, 0xD2	; 210
    a5a2:	56 e3       	ldi	r21, 0x36	; 54
    a5a4:	50 93 87 0d 	sts	0x0D87, r21
    a5a8:	40 93 86 0d 	sts	0x0D86, r20
	shot->shared.vx = speed;
    a5ac:	20 93 e5 0d 	sts	0x0DE5, r18
	shot->shared.vy = 0;
    a5b0:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5b4:	90 93 fb 0d 	sts	0x0DFB, r25
	shot->hit_count = damage;
    a5b8:	80 93 fc 0d 	sts	0x0DFC, r24
	shot->shot_speed = speed;
    a5bc:	20 93 fe 0d 	sts	0x0DFE, r18
	shot->y_delta = y_delta;
    a5c0:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a5c4:	90 93 01 0e 	sts	0x0E01, r25
	shot->anim.frames_per_anim = 1;
    a5c8:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.anims = anim;
    a5cc:	67 e3       	ldi	r22, 0x37	; 55
    a5ce:	70 e1       	ldi	r23, 0x10	; 16
    a5d0:	70 93 07 0e 	sts	0x0E07, r23
    a5d4:	60 93 06 0e 	sts	0x0E06, r22
	shot->anim.anims[0] = (char*) map;
    a5d8:	50 93 38 10 	sts	0x1038, r21
    a5dc:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a5e0:	20 93 f9 0d 	sts	0x0DF9, r18
	shot->shared.vy = 0;
    a5e4:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5e8:	90 93 0f 0e 	sts	0x0E0F, r25
	shot->hit_count = damage;
    a5ec:	80 93 10 0e 	sts	0x0E10, r24
	shot->shot_speed = speed;
    a5f0:	20 93 12 0e 	sts	0x0E12, r18
	shot->y_delta = y_delta;
    a5f4:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a5f8:	90 93 15 0e 	sts	0x0E15, r25
	shot->anim.frames_per_anim = 1;
    a5fc:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.anims = anim;
    a600:	67 e4       	ldi	r22, 0x47	; 71
    a602:	70 e1       	ldi	r23, 0x10	; 16
    a604:	70 93 1b 0e 	sts	0x0E1B, r23
    a608:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->anim.anims[0] = (char*) map;
    a60c:	50 93 48 10 	sts	0x1048, r21
    a610:	40 93 47 10 	sts	0x1047, r20
	shot->shared.vx = speed;
    a614:	20 93 0d 0e 	sts	0x0E0D, r18
	shot->shared.vy = 0;
    a618:	10 92 0c 0e 	sts	0x0E0C, r1
	else if (level == 2) // Fire
	{
		init_shot(&game.player.shot[0], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a61c:	90 93 de 0d 	sts	0x0DDE, r25
    a620:	08 95       	ret
		
	}
	else if (level == 4) // Jungle
    a622:	84 30       	cpi	r24, 0x04	; 4
    a624:	09 f0       	breq	.+2      	; 0xa628 <init_player_shot+0x160>
    a626:	56 c0       	rjmp	.+172    	; 0xa6d4 <init_player_shot+0x20c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a628:	80 93 e7 0d 	sts	0x0DE7, r24
	shot->hit_count = damage;
    a62c:	81 e0       	ldi	r24, 0x01	; 1
    a62e:	80 93 e8 0d 	sts	0x0DE8, r24
	shot->shot_speed = speed;
    a632:	9f e7       	ldi	r25, 0x7F	; 127
    a634:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->y_delta = y_delta;
    a638:	28 ef       	ldi	r18, 0xF8	; 248
    a63a:	20 93 eb 0d 	sts	0x0DEB, r18
	shot->anim.anim_count = 1;
    a63e:	80 93 ed 0d 	sts	0x0DED, r24
	shot->anim.frames_per_anim = 1;
    a642:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims = anim;
    a646:	26 e8       	ldi	r18, 0x86	; 134
    a648:	3d e0       	ldi	r19, 0x0D	; 13
    a64a:	30 93 f3 0d 	sts	0x0DF3, r19
    a64e:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->anim.anims[0] = (char*) map;
    a652:	25 ed       	ldi	r18, 0xD5	; 213
    a654:	36 e3       	ldi	r19, 0x36	; 54
    a656:	30 93 87 0d 	sts	0x0D87, r19
    a65a:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a65e:	90 93 e5 0d 	sts	0x0DE5, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a662:	21 e8       	ldi	r18, 0x81	; 129
    a664:	20 93 e4 0d 	sts	0x0DE4, r18
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a668:	22 e0       	ldi	r18, 0x02	; 2
    a66a:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->hit_count = damage;
    a66e:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->shot_speed = speed;
    a672:	90 93 fe 0d 	sts	0x0DFE, r25
	shot->y_delta = y_delta;
    a676:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a67a:	80 93 01 0e 	sts	0x0E01, r24
	shot->anim.frames_per_anim = 1;
    a67e:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.anims = anim;
    a682:	47 e3       	ldi	r20, 0x37	; 55
    a684:	50 e1       	ldi	r21, 0x10	; 16
    a686:	50 93 07 0e 	sts	0x0E07, r21
    a68a:	40 93 06 0e 	sts	0x0E06, r20
	shot->anim.anims[0] = (char*) map;
    a68e:	49 ec       	ldi	r20, 0xC9	; 201
    a690:	56 e3       	ldi	r21, 0x36	; 54
    a692:	50 93 38 10 	sts	0x1038, r21
    a696:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a69a:	90 93 f9 0d 	sts	0x0DF9, r25
	shot->shared.vy = 0;
    a69e:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6a2:	20 93 0f 0e 	sts	0x0E0F, r18
	shot->hit_count = damage;
    a6a6:	20 93 10 0e 	sts	0x0E10, r18
	shot->shot_speed = speed;
    a6aa:	90 93 12 0e 	sts	0x0E12, r25
	shot->y_delta = y_delta;
    a6ae:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a6b2:	80 93 15 0e 	sts	0x0E15, r24
	shot->anim.frames_per_anim = 1;
    a6b6:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.anims = anim;
    a6ba:	67 e4       	ldi	r22, 0x47	; 71
    a6bc:	70 e1       	ldi	r23, 0x10	; 16
    a6be:	70 93 1b 0e 	sts	0x0E1B, r23
    a6c2:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->anim.anims[0] = (char*) map;
    a6c6:	50 93 48 10 	sts	0x1048, r21
    a6ca:	40 93 47 10 	sts	0x1047, r20
	shot->shared.vx = speed;
    a6ce:	90 93 0d 0e 	sts	0x0E0D, r25
    a6d2:	56 c0       	rjmp	.+172    	; 0xa780 <init_player_shot+0x2b8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a6d4:	86 30       	cpi	r24, 0x06	; 6
    a6d6:	09 f0       	breq	.+2      	; 0xa6da <init_player_shot+0x212>
    a6d8:	58 c0       	rjmp	.+176    	; 0xa78a <init_player_shot+0x2c2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a6da:	33 e0       	ldi	r19, 0x03	; 3
    a6dc:	30 93 e7 0d 	sts	0x0DE7, r19
	shot->hit_count = damage;
    a6e0:	22 e0       	ldi	r18, 0x02	; 2
    a6e2:	20 93 e8 0d 	sts	0x0DE8, r18
	shot->shot_speed = speed;
    a6e6:	8f e7       	ldi	r24, 0x7F	; 127
    a6e8:	80 93 ea 0d 	sts	0x0DEA, r24
	shot->y_delta = y_delta;
    a6ec:	98 ef       	ldi	r25, 0xF8	; 248
    a6ee:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->anim.anim_count = 1;
    a6f2:	91 e0       	ldi	r25, 0x01	; 1
    a6f4:	90 93 ed 0d 	sts	0x0DED, r25
	shot->anim.frames_per_anim = 1;
    a6f8:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.anims = anim;
    a6fc:	46 e8       	ldi	r20, 0x86	; 134
    a6fe:	5d e0       	ldi	r21, 0x0D	; 13
    a700:	50 93 f3 0d 	sts	0x0DF3, r21
    a704:	40 93 f2 0d 	sts	0x0DF2, r20
	shot->anim.anims[0] = (char*) map;
    a708:	48 ed       	ldi	r20, 0xD8	; 216
    a70a:	56 e3       	ldi	r21, 0x36	; 54
    a70c:	50 93 87 0d 	sts	0x0D87, r21
    a710:	40 93 86 0d 	sts	0x0D86, r20
	shot->shared.vx = speed;
    a714:	80 93 e5 0d 	sts	0x0DE5, r24
	shot->shared.vy = 0;
    a718:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a71c:	30 93 fb 0d 	sts	0x0DFB, r19
	shot->hit_count = damage;
    a720:	20 93 fc 0d 	sts	0x0DFC, r18
	shot->shot_speed = speed;
    a724:	80 93 fe 0d 	sts	0x0DFE, r24
	shot->y_delta = y_delta;
    a728:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a72c:	90 93 01 0e 	sts	0x0E01, r25
	shot->anim.frames_per_anim = 1;
    a730:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.anims = anim;
    a734:	67 e3       	ldi	r22, 0x37	; 55
    a736:	70 e1       	ldi	r23, 0x10	; 16
    a738:	70 93 07 0e 	sts	0x0E07, r23
    a73c:	60 93 06 0e 	sts	0x0E06, r22
	shot->anim.anims[0] = (char*) map;
    a740:	50 93 38 10 	sts	0x1038, r21
    a744:	40 93 37 10 	sts	0x1037, r20
	shot->shared.vx = speed;
    a748:	80 93 f9 0d 	sts	0x0DF9, r24
	shot->shared.vy = 0;
    a74c:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a750:	30 93 0f 0e 	sts	0x0E0F, r19
	shot->hit_count = damage;
    a754:	20 93 10 0e 	sts	0x0E10, r18
	shot->shot_speed = speed;
    a758:	80 93 12 0e 	sts	0x0E12, r24
	shot->y_delta = y_delta;
    a75c:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a760:	90 93 15 0e 	sts	0x0E15, r25
	shot->anim.frames_per_anim = 1;
    a764:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.anims = anim;
    a768:	67 e4       	ldi	r22, 0x47	; 71
    a76a:	70 e1       	ldi	r23, 0x10	; 16
    a76c:	70 93 1b 0e 	sts	0x0E1B, r23
    a770:	60 93 1a 0e 	sts	0x0E1A, r22
	shot->anim.anims[0] = (char*) map;
    a774:	50 93 48 10 	sts	0x1048, r21
    a778:	40 93 47 10 	sts	0x1047, r20
	shot->shared.vx = speed;
    a77c:	80 93 0d 0e 	sts	0x0E0D, r24
	shot->shared.vy = 0;
    a780:	10 92 0c 0e 	sts	0x0E0C, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a784:	20 93 de 0d 	sts	0x0DDE, r18
    a788:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a78a:	88 30       	cpi	r24, 0x08	; 8
    a78c:	09 f0       	breq	.+2      	; 0xa790 <init_player_shot+0x2c8>
    a78e:	5b c0       	rjmp	.+182    	; 0xa846 <init_player_shot+0x37e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a790:	33 e0       	ldi	r19, 0x03	; 3
    a792:	30 93 e7 0d 	sts	0x0DE7, r19
	shot->hit_count = damage;
    a796:	42 e0       	ldi	r20, 0x02	; 2
    a798:	40 93 e8 0d 	sts	0x0DE8, r20
	shot->shot_speed = speed;
    a79c:	2f e7       	ldi	r18, 0x7F	; 127
    a79e:	20 93 ea 0d 	sts	0x0DEA, r18
	shot->y_delta = y_delta;
    a7a2:	98 ef       	ldi	r25, 0xF8	; 248
    a7a4:	90 93 eb 0d 	sts	0x0DEB, r25
	shot->anim.anim_count = 1;
    a7a8:	91 e0       	ldi	r25, 0x01	; 1
    a7aa:	90 93 ed 0d 	sts	0x0DED, r25
	shot->anim.frames_per_anim = 1;
    a7ae:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->anim.anims = anim;
    a7b2:	66 e8       	ldi	r22, 0x86	; 134
    a7b4:	7d e0       	ldi	r23, 0x0D	; 13
    a7b6:	70 93 f3 0d 	sts	0x0DF3, r23
    a7ba:	60 93 f2 0d 	sts	0x0DF2, r22
	shot->anim.anims[0] = (char*) map;
    a7be:	68 ed       	ldi	r22, 0xD8	; 216
    a7c0:	76 e3       	ldi	r23, 0x36	; 54
    a7c2:	70 93 87 0d 	sts	0x0D87, r23
    a7c6:	60 93 86 0d 	sts	0x0D86, r22
	shot->shared.vx = speed;
    a7ca:	20 93 e5 0d 	sts	0x0DE5, r18
	shot->shared.vy = 0;
    a7ce:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7d2:	90 93 fb 0d 	sts	0x0DFB, r25
	shot->hit_count = damage;
    a7d6:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->shot_speed = speed;
    a7da:	54 e6       	ldi	r21, 0x64	; 100
    a7dc:	50 93 fe 0d 	sts	0x0DFE, r21
	shot->y_delta = y_delta;
    a7e0:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a7e4:	90 93 01 0e 	sts	0x0E01, r25
	shot->anim.frames_per_anim = 1;
    a7e8:	90 93 02 0e 	sts	0x0E02, r25
	shot->anim.anims = anim;
    a7ec:	e7 e3       	ldi	r30, 0x37	; 55
    a7ee:	f0 e1       	ldi	r31, 0x10	; 16
    a7f0:	f0 93 07 0e 	sts	0x0E07, r31
    a7f4:	e0 93 06 0e 	sts	0x0E06, r30
	shot->anim.anims[0] = (char*) map;
    a7f8:	e2 ed       	ldi	r30, 0xD2	; 210
    a7fa:	f6 e3       	ldi	r31, 0x36	; 54
    a7fc:	f0 93 38 10 	sts	0x1038, r31
    a800:	e0 93 37 10 	sts	0x1037, r30
	shot->shared.vx = speed;
    a804:	50 93 f9 0d 	sts	0x0DF9, r21
	shot->shared.vy = 0;
    a808:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a80c:	30 93 0f 0e 	sts	0x0E0F, r19
	shot->hit_count = damage;
    a810:	40 93 10 0e 	sts	0x0E10, r20
	shot->shot_speed = speed;
    a814:	20 93 12 0e 	sts	0x0E12, r18
	shot->y_delta = y_delta;
    a818:	80 93 13 0e 	sts	0x0E13, r24
	shot->anim.anim_count = 1;
    a81c:	90 93 15 0e 	sts	0x0E15, r25
	shot->anim.frames_per_anim = 1;
    a820:	90 93 16 0e 	sts	0x0E16, r25
	shot->anim.anims = anim;
    a824:	87 e4       	ldi	r24, 0x47	; 71
    a826:	90 e1       	ldi	r25, 0x10	; 16
    a828:	90 93 1b 0e 	sts	0x0E1B, r25
    a82c:	80 93 1a 0e 	sts	0x0E1A, r24
	shot->anim.anims[0] = (char*) map;
    a830:	70 93 48 10 	sts	0x1048, r23
    a834:	60 93 47 10 	sts	0x1047, r22
	shot->shared.vx = speed;
    a838:	20 93 0d 0e 	sts	0x0E0D, r18
	shot->shared.vy = 0;
    a83c:	10 92 0c 0e 	sts	0x0E0C, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a840:	30 93 de 0d 	sts	0x0DDE, r19
    a844:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a846:	55 e0       	ldi	r21, 0x05	; 5
    a848:	50 93 e7 0d 	sts	0x0DE7, r21
	shot->hit_count = damage;
    a84c:	42 e0       	ldi	r20, 0x02	; 2
    a84e:	40 93 e8 0d 	sts	0x0DE8, r20
	shot->shot_speed = speed;
    a852:	9f e7       	ldi	r25, 0x7F	; 127
    a854:	90 93 ea 0d 	sts	0x0DEA, r25
	shot->y_delta = y_delta;
    a858:	10 92 eb 0d 	sts	0x0DEB, r1
	shot->anim.anim_count = 1;
    a85c:	81 e0       	ldi	r24, 0x01	; 1
    a85e:	80 93 ed 0d 	sts	0x0DED, r24
	shot->anim.frames_per_anim = 1;
    a862:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->anim.anims = anim;
    a866:	26 e8       	ldi	r18, 0x86	; 134
    a868:	3d e0       	ldi	r19, 0x0D	; 13
    a86a:	30 93 f3 0d 	sts	0x0DF3, r19
    a86e:	20 93 f2 0d 	sts	0x0DF2, r18
	shot->anim.anims[0] = (char*) map;
    a872:	2f ec       	ldi	r18, 0xCF	; 207
    a874:	36 e3       	ldi	r19, 0x36	; 54
    a876:	30 93 87 0d 	sts	0x0D87, r19
    a87a:	20 93 86 0d 	sts	0x0D86, r18
	shot->shared.vx = speed;
    a87e:	90 93 e5 0d 	sts	0x0DE5, r25
	shot->shared.vy = 0;
    a882:	10 92 e4 0d 	sts	0x0DE4, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a886:	50 93 fb 0d 	sts	0x0DFB, r21
	shot->hit_count = damage;
    a88a:	40 93 fc 0d 	sts	0x0DFC, r20
	shot->shot_speed = speed;
    a88e:	90 93 fe 0d 	sts	0x0DFE, r25
	shot->y_delta = y_delta;
    a892:	10 92 ff 0d 	sts	0x0DFF, r1
	shot->anim.anim_count = 1;
    a896:	80 93 01 0e 	sts	0x0E01, r24
	shot->anim.frames_per_anim = 1;
    a89a:	80 93 02 0e 	sts	0x0E02, r24
	shot->anim.anims = anim;
    a89e:	47 e3       	ldi	r20, 0x37	; 55
    a8a0:	50 e1       	ldi	r21, 0x10	; 16
    a8a2:	50 93 07 0e 	sts	0x0E07, r21
    a8a6:	40 93 06 0e 	sts	0x0E06, r20
	shot->anim.anims[0] = (char*) map;
    a8aa:	30 93 38 10 	sts	0x1038, r19
    a8ae:	20 93 37 10 	sts	0x1037, r18
	shot->shared.vx = speed;
    a8b2:	90 93 f9 0d 	sts	0x0DF9, r25
	shot->shared.vy = 0;
    a8b6:	10 92 f8 0d 	sts	0x0DF8, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8ba:	26 e0       	ldi	r18, 0x06	; 6
    a8bc:	20 93 0f 0e 	sts	0x0E0F, r18
	shot->hit_count = damage;
    a8c0:	24 e0       	ldi	r18, 0x04	; 4
    a8c2:	20 93 10 0e 	sts	0x0E10, r18
	shot->shot_speed = speed;
    a8c6:	90 93 12 0e 	sts	0x0E12, r25
	shot->y_delta = y_delta;
    a8ca:	10 92 13 0e 	sts	0x0E13, r1
	shot->anim.anim_count = 1;
    a8ce:	80 93 15 0e 	sts	0x0E15, r24
	shot->anim.frames_per_anim = 1;
    a8d2:	80 93 16 0e 	sts	0x0E16, r24
	shot->anim.anims = anim;
    a8d6:	27 e4       	ldi	r18, 0x47	; 71
    a8d8:	30 e1       	ldi	r19, 0x10	; 16
    a8da:	30 93 1b 0e 	sts	0x0E1B, r19
    a8de:	20 93 1a 0e 	sts	0x0E1A, r18
	shot->anim.anims[0] = (char*) map;
    a8e2:	2c ec       	ldi	r18, 0xCC	; 204
    a8e4:	36 e3       	ldi	r19, 0x36	; 54
    a8e6:	30 93 48 10 	sts	0x1048, r19
    a8ea:	20 93 47 10 	sts	0x1047, r18
	shot->shared.vx = speed;
    a8ee:	90 93 0d 0e 	sts	0x0E0D, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a8f2:	90 93 0c 0e 	sts	0x0E0C, r25
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a8f6:	80 93 de 0d 	sts	0x0DDE, r24
    a8fa:	08 95       	ret

0000a8fc <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a8fc:	81 11       	cpse	r24, r1
    a8fe:	52 c0       	rjmp	.+164    	; 0xa9a4 <init_boss_shot+0xa8>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a900:	81 e0       	ldi	r24, 0x01	; 1
    a902:	80 93 62 0e 	sts	0x0E62, r24
	shot->hit_count = damage;
    a906:	42 e0       	ldi	r20, 0x02	; 2
    a908:	40 93 63 0e 	sts	0x0E63, r20
	shot->shot_speed = speed;
    a90c:	94 e6       	ldi	r25, 0x64	; 100
    a90e:	90 93 65 0e 	sts	0x0E65, r25
	shot->y_delta = y_delta;
    a912:	10 92 66 0e 	sts	0x0E66, r1
	shot->anim.anim_count = 1;
    a916:	80 93 68 0e 	sts	0x0E68, r24
	shot->anim.frames_per_anim = 1;
    a91a:	80 93 69 0e 	sts	0x0E69, r24
	shot->anim.anims = anim;
    a91e:	21 ed       	ldi	r18, 0xD1	; 209
    a920:	3f e0       	ldi	r19, 0x0F	; 15
    a922:	30 93 6e 0e 	sts	0x0E6E, r19
    a926:	20 93 6d 0e 	sts	0x0E6D, r18
	shot->anim.anims[0] = (char*) map;
    a92a:	22 ed       	ldi	r18, 0xD2	; 210
    a92c:	36 e3       	ldi	r19, 0x36	; 54
    a92e:	30 93 d2 0f 	sts	0x0FD2, r19
    a932:	20 93 d1 0f 	sts	0x0FD1, r18
	shot->shared.vx = speed;
    a936:	90 93 60 0e 	sts	0x0E60, r25
	shot->shared.vy = 0;
    a93a:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a93e:	80 93 76 0e 	sts	0x0E76, r24
	shot->hit_count = damage;
    a942:	40 93 77 0e 	sts	0x0E77, r20
	shot->shot_speed = speed;
    a946:	90 93 79 0e 	sts	0x0E79, r25
	shot->y_delta = y_delta;
    a94a:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    a94e:	80 93 7c 0e 	sts	0x0E7C, r24
	shot->anim.frames_per_anim = 1;
    a952:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->anim.anims = anim;
    a956:	6b e4       	ldi	r22, 0x4B	; 75
    a958:	70 e1       	ldi	r23, 0x10	; 16
    a95a:	70 93 82 0e 	sts	0x0E82, r23
    a95e:	60 93 81 0e 	sts	0x0E81, r22
	shot->anim.anims[0] = (char*) map;
    a962:	30 93 4c 10 	sts	0x104C, r19
    a966:	20 93 4b 10 	sts	0x104B, r18
	shot->shared.vx = speed;
    a96a:	90 93 74 0e 	sts	0x0E74, r25
	shot->shared.vy = 0;
    a96e:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a972:	80 93 8a 0e 	sts	0x0E8A, r24
	shot->hit_count = damage;
    a976:	40 93 8b 0e 	sts	0x0E8B, r20
	shot->shot_speed = speed;
    a97a:	90 93 8d 0e 	sts	0x0E8D, r25
	shot->y_delta = y_delta;
    a97e:	10 92 8e 0e 	sts	0x0E8E, r1
	shot->anim.anim_count = 1;
    a982:	80 93 90 0e 	sts	0x0E90, r24
	shot->anim.frames_per_anim = 1;
    a986:	80 93 91 0e 	sts	0x0E91, r24
	shot->anim.anims = anim;
    a98a:	4d e2       	ldi	r20, 0x2D	; 45
    a98c:	50 e1       	ldi	r21, 0x10	; 16
    a98e:	50 93 96 0e 	sts	0x0E96, r21
    a992:	40 93 95 0e 	sts	0x0E95, r20
	shot->anim.anims[0] = (char*) map;
    a996:	30 93 2e 10 	sts	0x102E, r19
    a99a:	20 93 2d 10 	sts	0x102D, r18
	shot->shared.vx = speed;
    a99e:	90 93 88 0e 	sts	0x0E88, r25
    a9a2:	58 c0       	rjmp	.+176    	; 0xaa54 <init_boss_shot+0x158>
		init_shot(&game.boss.shot[0], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a9a4:	82 30       	cpi	r24, 0x02	; 2
    a9a6:	09 f0       	breq	.+2      	; 0xa9aa <init_boss_shot+0xae>
    a9a8:	58 c0       	rjmp	.+176    	; 0xaa5a <init_boss_shot+0x15e>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9aa:	94 e0       	ldi	r25, 0x04	; 4
    a9ac:	90 93 62 0e 	sts	0x0E62, r25
	shot->hit_count = damage;
    a9b0:	91 e0       	ldi	r25, 0x01	; 1
    a9b2:	90 93 63 0e 	sts	0x0E63, r25
	shot->shot_speed = speed;
    a9b6:	2f e7       	ldi	r18, 0x7F	; 127
    a9b8:	20 93 65 0e 	sts	0x0E65, r18
	shot->y_delta = y_delta;
    a9bc:	38 ef       	ldi	r19, 0xF8	; 248
    a9be:	30 93 66 0e 	sts	0x0E66, r19
	shot->anim.anim_count = 1;
    a9c2:	90 93 68 0e 	sts	0x0E68, r25
	shot->anim.frames_per_anim = 1;
    a9c6:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.anims = anim;
    a9ca:	41 ed       	ldi	r20, 0xD1	; 209
    a9cc:	5f e0       	ldi	r21, 0x0F	; 15
    a9ce:	50 93 6e 0e 	sts	0x0E6E, r21
    a9d2:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    a9d6:	45 ed       	ldi	r20, 0xD5	; 213
    a9d8:	56 e3       	ldi	r21, 0x36	; 54
    a9da:	50 93 d2 0f 	sts	0x0FD2, r21
    a9de:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    a9e2:	20 93 60 0e 	sts	0x0E60, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a9e6:	31 e8       	ldi	r19, 0x81	; 129
    a9e8:	30 93 5f 0e 	sts	0x0E5F, r19
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9ec:	80 93 76 0e 	sts	0x0E76, r24
	shot->hit_count = damage;
    a9f0:	80 93 77 0e 	sts	0x0E77, r24
	shot->shot_speed = speed;
    a9f4:	20 93 79 0e 	sts	0x0E79, r18
	shot->y_delta = y_delta;
    a9f8:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    a9fc:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->anim.frames_per_anim = 1;
    aa00:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.anims = anim;
    aa04:	4b e4       	ldi	r20, 0x4B	; 75
    aa06:	50 e1       	ldi	r21, 0x10	; 16
    aa08:	50 93 82 0e 	sts	0x0E82, r21
    aa0c:	40 93 81 0e 	sts	0x0E81, r20
	shot->anim.anims[0] = (char*) map;
    aa10:	49 ec       	ldi	r20, 0xC9	; 201
    aa12:	56 e3       	ldi	r21, 0x36	; 54
    aa14:	50 93 4c 10 	sts	0x104C, r21
    aa18:	40 93 4b 10 	sts	0x104B, r20
	shot->shared.vx = speed;
    aa1c:	20 93 74 0e 	sts	0x0E74, r18
	shot->shared.vy = 0;
    aa20:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa24:	80 93 8a 0e 	sts	0x0E8A, r24
	shot->hit_count = damage;
    aa28:	80 93 8b 0e 	sts	0x0E8B, r24
	shot->shot_speed = speed;
    aa2c:	20 93 8d 0e 	sts	0x0E8D, r18
	shot->y_delta = y_delta;
    aa30:	10 92 8e 0e 	sts	0x0E8E, r1
	shot->anim.anim_count = 1;
    aa34:	90 93 90 0e 	sts	0x0E90, r25
	shot->anim.frames_per_anim = 1;
    aa38:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.anims = anim;
    aa3c:	6d e2       	ldi	r22, 0x2D	; 45
    aa3e:	70 e1       	ldi	r23, 0x10	; 16
    aa40:	70 93 96 0e 	sts	0x0E96, r23
    aa44:	60 93 95 0e 	sts	0x0E95, r22
	shot->anim.anims[0] = (char*) map;
    aa48:	50 93 2e 10 	sts	0x102E, r21
    aa4c:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    aa50:	20 93 88 0e 	sts	0x0E88, r18
	shot->shared.vy = 0;
    aa54:	10 92 87 0e 	sts	0x0E87, r1
    aa58:	0f c1       	rjmp	.+542    	; 0xac78 <init_boss_shot+0x37c>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    aa5a:	84 30       	cpi	r24, 0x04	; 4
    aa5c:	09 f0       	breq	.+2      	; 0xaa60 <init_boss_shot+0x164>
    aa5e:	54 c0       	rjmp	.+168    	; 0xab08 <init_boss_shot+0x20c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa60:	33 e0       	ldi	r19, 0x03	; 3
    aa62:	30 93 62 0e 	sts	0x0E62, r19
	shot->hit_count = damage;
    aa66:	22 e0       	ldi	r18, 0x02	; 2
    aa68:	20 93 63 0e 	sts	0x0E63, r18
	shot->shot_speed = speed;
    aa6c:	8f e7       	ldi	r24, 0x7F	; 127
    aa6e:	80 93 65 0e 	sts	0x0E65, r24
	shot->y_delta = y_delta;
    aa72:	98 ef       	ldi	r25, 0xF8	; 248
    aa74:	90 93 66 0e 	sts	0x0E66, r25
	shot->anim.anim_count = 1;
    aa78:	91 e0       	ldi	r25, 0x01	; 1
    aa7a:	90 93 68 0e 	sts	0x0E68, r25
	shot->anim.frames_per_anim = 1;
    aa7e:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.anims = anim;
    aa82:	41 ed       	ldi	r20, 0xD1	; 209
    aa84:	5f e0       	ldi	r21, 0x0F	; 15
    aa86:	50 93 6e 0e 	sts	0x0E6E, r21
    aa8a:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    aa8e:	48 ed       	ldi	r20, 0xD8	; 216
    aa90:	56 e3       	ldi	r21, 0x36	; 54
    aa92:	50 93 d2 0f 	sts	0x0FD2, r21
    aa96:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    aa9a:	80 93 60 0e 	sts	0x0E60, r24
	shot->shared.vy = 0;
    aa9e:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aaa2:	30 93 76 0e 	sts	0x0E76, r19
	shot->hit_count = damage;
    aaa6:	20 93 77 0e 	sts	0x0E77, r18
	shot->shot_speed = speed;
    aaaa:	80 93 79 0e 	sts	0x0E79, r24
	shot->y_delta = y_delta;
    aaae:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    aab2:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->anim.frames_per_anim = 1;
    aab6:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.anims = anim;
    aaba:	6b e4       	ldi	r22, 0x4B	; 75
    aabc:	70 e1       	ldi	r23, 0x10	; 16
    aabe:	70 93 82 0e 	sts	0x0E82, r23
    aac2:	60 93 81 0e 	sts	0x0E81, r22
	shot->anim.anims[0] = (char*) map;
    aac6:	50 93 4c 10 	sts	0x104C, r21
    aaca:	40 93 4b 10 	sts	0x104B, r20
	shot->shared.vx = speed;
    aace:	80 93 74 0e 	sts	0x0E74, r24
	shot->shared.vy = 0;
    aad2:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aad6:	30 93 8a 0e 	sts	0x0E8A, r19
	shot->hit_count = damage;
    aada:	20 93 8b 0e 	sts	0x0E8B, r18
	shot->shot_speed = speed;
    aade:	80 93 8d 0e 	sts	0x0E8D, r24
	shot->y_delta = y_delta;
    aae2:	10 92 8e 0e 	sts	0x0E8E, r1
	shot->anim.anim_count = 1;
    aae6:	90 93 90 0e 	sts	0x0E90, r25
	shot->anim.frames_per_anim = 1;
    aaea:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.anims = anim;
    aaee:	6d e2       	ldi	r22, 0x2D	; 45
    aaf0:	70 e1       	ldi	r23, 0x10	; 16
    aaf2:	70 93 96 0e 	sts	0x0E96, r23
    aaf6:	60 93 95 0e 	sts	0x0E95, r22
	shot->anim.anims[0] = (char*) map;
    aafa:	50 93 2e 10 	sts	0x102E, r21
    aafe:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    ab02:	80 93 88 0e 	sts	0x0E88, r24
    ab06:	5a c0       	rjmp	.+180    	; 0xabbc <init_boss_shot+0x2c0>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    ab08:	86 30       	cpi	r24, 0x06	; 6
    ab0a:	09 f0       	breq	.+2      	; 0xab0e <init_boss_shot+0x212>
    ab0c:	5c c0       	rjmp	.+184    	; 0xabc6 <init_boss_shot+0x2ca>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab0e:	23 e0       	ldi	r18, 0x03	; 3
    ab10:	20 93 62 0e 	sts	0x0E62, r18
	shot->hit_count = damage;
    ab14:	32 e0       	ldi	r19, 0x02	; 2
    ab16:	30 93 63 0e 	sts	0x0E63, r19
	shot->shot_speed = speed;
    ab1a:	9f e7       	ldi	r25, 0x7F	; 127
    ab1c:	90 93 65 0e 	sts	0x0E65, r25
	shot->y_delta = y_delta;
    ab20:	88 ef       	ldi	r24, 0xF8	; 248
    ab22:	80 93 66 0e 	sts	0x0E66, r24
	shot->anim.anim_count = 1;
    ab26:	81 e0       	ldi	r24, 0x01	; 1
    ab28:	80 93 68 0e 	sts	0x0E68, r24
	shot->anim.frames_per_anim = 1;
    ab2c:	80 93 69 0e 	sts	0x0E69, r24
	shot->anim.anims = anim;
    ab30:	41 ed       	ldi	r20, 0xD1	; 209
    ab32:	5f e0       	ldi	r21, 0x0F	; 15
    ab34:	50 93 6e 0e 	sts	0x0E6E, r21
    ab38:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    ab3c:	48 ed       	ldi	r20, 0xD8	; 216
    ab3e:	56 e3       	ldi	r21, 0x36	; 54
    ab40:	50 93 d2 0f 	sts	0x0FD2, r21
    ab44:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    ab48:	90 93 60 0e 	sts	0x0E60, r25
	shot->shared.vy = 0;
    ab4c:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab50:	80 93 76 0e 	sts	0x0E76, r24
	shot->hit_count = damage;
    ab54:	30 93 77 0e 	sts	0x0E77, r19
	shot->shot_speed = speed;
    ab58:	64 e6       	ldi	r22, 0x64	; 100
    ab5a:	60 93 79 0e 	sts	0x0E79, r22
	shot->y_delta = y_delta;
    ab5e:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    ab62:	80 93 7c 0e 	sts	0x0E7C, r24
	shot->anim.frames_per_anim = 1;
    ab66:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->anim.anims = anim;
    ab6a:	eb e4       	ldi	r30, 0x4B	; 75
    ab6c:	f0 e1       	ldi	r31, 0x10	; 16
    ab6e:	f0 93 82 0e 	sts	0x0E82, r31
    ab72:	e0 93 81 0e 	sts	0x0E81, r30
	shot->anim.anims[0] = (char*) map;
    ab76:	e2 ed       	ldi	r30, 0xD2	; 210
    ab78:	f6 e3       	ldi	r31, 0x36	; 54
    ab7a:	f0 93 4c 10 	sts	0x104C, r31
    ab7e:	e0 93 4b 10 	sts	0x104B, r30
	shot->shared.vx = speed;
    ab82:	60 93 74 0e 	sts	0x0E74, r22
	shot->shared.vy = 0;
    ab86:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab8a:	20 93 8a 0e 	sts	0x0E8A, r18
	shot->hit_count = damage;
    ab8e:	30 93 8b 0e 	sts	0x0E8B, r19
	shot->shot_speed = speed;
    ab92:	90 93 8d 0e 	sts	0x0E8D, r25
	shot->y_delta = y_delta;
    ab96:	38 e0       	ldi	r19, 0x08	; 8
    ab98:	30 93 8e 0e 	sts	0x0E8E, r19
	shot->anim.anim_count = 1;
    ab9c:	80 93 90 0e 	sts	0x0E90, r24
	shot->anim.frames_per_anim = 1;
    aba0:	80 93 91 0e 	sts	0x0E91, r24
	shot->anim.anims = anim;
    aba4:	6d e2       	ldi	r22, 0x2D	; 45
    aba6:	70 e1       	ldi	r23, 0x10	; 16
    aba8:	70 93 96 0e 	sts	0x0E96, r23
    abac:	60 93 95 0e 	sts	0x0E95, r22
	shot->anim.anims[0] = (char*) map;
    abb0:	50 93 2e 10 	sts	0x102E, r21
    abb4:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    abb8:	90 93 88 0e 	sts	0x0E88, r25
	shot->shared.vy = 0;
    abbc:	10 92 87 0e 	sts	0x0E87, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    abc0:	20 93 59 0e 	sts	0x0E59, r18
    abc4:	08 95       	ret
	}
	else if (level == 8) // Dessert
    abc6:	88 30       	cpi	r24, 0x08	; 8
    abc8:	09 f0       	breq	.+2      	; 0xabcc <init_boss_shot+0x2d0>
    abca:	58 c0       	rjmp	.+176    	; 0xac7c <init_boss_shot+0x380>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    abcc:	22 e0       	ldi	r18, 0x02	; 2
    abce:	20 93 62 0e 	sts	0x0E62, r18
	shot->hit_count = damage;
    abd2:	20 93 63 0e 	sts	0x0E63, r18
	shot->shot_speed = speed;
    abd6:	3f e7       	ldi	r19, 0x7F	; 127
    abd8:	30 93 65 0e 	sts	0x0E65, r19
	shot->y_delta = y_delta;
    abdc:	98 ef       	ldi	r25, 0xF8	; 248
    abde:	90 93 66 0e 	sts	0x0E66, r25
	shot->anim.anim_count = 1;
    abe2:	91 e0       	ldi	r25, 0x01	; 1
    abe4:	90 93 68 0e 	sts	0x0E68, r25
	shot->anim.frames_per_anim = 1;
    abe8:	90 93 69 0e 	sts	0x0E69, r25
	shot->anim.anims = anim;
    abec:	41 ed       	ldi	r20, 0xD1	; 209
    abee:	5f e0       	ldi	r21, 0x0F	; 15
    abf0:	50 93 6e 0e 	sts	0x0E6E, r21
    abf4:	40 93 6d 0e 	sts	0x0E6D, r20
	shot->anim.anims[0] = (char*) map;
    abf8:	49 ec       	ldi	r20, 0xC9	; 201
    abfa:	56 e3       	ldi	r21, 0x36	; 54
    abfc:	50 93 d2 0f 	sts	0x0FD2, r21
    ac00:	40 93 d1 0f 	sts	0x0FD1, r20
	shot->shared.vx = speed;
    ac04:	30 93 60 0e 	sts	0x0E60, r19
	shot->shared.vy = 0;
    ac08:	10 92 5f 0e 	sts	0x0E5F, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac0c:	20 93 76 0e 	sts	0x0E76, r18
	shot->hit_count = damage;
    ac10:	20 93 77 0e 	sts	0x0E77, r18
	shot->shot_speed = speed;
    ac14:	64 e6       	ldi	r22, 0x64	; 100
    ac16:	60 93 79 0e 	sts	0x0E79, r22
	shot->y_delta = y_delta;
    ac1a:	10 92 7a 0e 	sts	0x0E7A, r1
	shot->anim.anim_count = 1;
    ac1e:	90 93 7c 0e 	sts	0x0E7C, r25
	shot->anim.frames_per_anim = 1;
    ac22:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->anim.anims = anim;
    ac26:	eb e4       	ldi	r30, 0x4B	; 75
    ac28:	f0 e1       	ldi	r31, 0x10	; 16
    ac2a:	f0 93 82 0e 	sts	0x0E82, r31
    ac2e:	e0 93 81 0e 	sts	0x0E81, r30
	shot->anim.anims[0] = (char*) map;
    ac32:	50 93 4c 10 	sts	0x104C, r21
    ac36:	40 93 4b 10 	sts	0x104B, r20
	shot->shared.vx = speed;
    ac3a:	60 93 74 0e 	sts	0x0E74, r22
	shot->shared.vy = 0;
    ac3e:	10 92 73 0e 	sts	0x0E73, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac42:	20 93 8a 0e 	sts	0x0E8A, r18
	shot->hit_count = damage;
    ac46:	20 93 8b 0e 	sts	0x0E8B, r18
	shot->shot_speed = speed;
    ac4a:	30 93 8d 0e 	sts	0x0E8D, r19
	shot->y_delta = y_delta;
    ac4e:	80 93 8e 0e 	sts	0x0E8E, r24
	shot->anim.anim_count = 1;
    ac52:	90 93 90 0e 	sts	0x0E90, r25
	shot->anim.frames_per_anim = 1;
    ac56:	90 93 91 0e 	sts	0x0E91, r25
	shot->anim.anims = anim;
    ac5a:	8d e2       	ldi	r24, 0x2D	; 45
    ac5c:	90 e1       	ldi	r25, 0x10	; 16
    ac5e:	90 93 96 0e 	sts	0x0E96, r25
    ac62:	80 93 95 0e 	sts	0x0E95, r24
	shot->anim.anims[0] = (char*) map;
    ac66:	50 93 2e 10 	sts	0x102E, r21
    ac6a:	40 93 2d 10 	sts	0x102D, r20
	shot->shared.vx = speed;
    ac6e:	30 93 88 0e 	sts	0x0E88, r19
	shot->shared.vy = 0;
    ac72:	10 92 87 0e 	sts	0x0E87, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    ac76:	83 e0       	ldi	r24, 0x03	; 3
    ac78:	80 93 59 0e 	sts	0x0E59, r24
    ac7c:	08 95       	ret

0000ac7e <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ac7e:	10 92 c4 0e 	sts	0x0EC4, r1
    ac82:	10 92 c3 0e 	sts	0x0EC3, r1
	p->pressed = 0;
    ac86:	10 92 c0 0e 	sts	0x0EC0, r1
    ac8a:	10 92 bf 0e 	sts	0x0EBF, r1
	p->released = 0;
    ac8e:	10 92 c2 0e 	sts	0x0EC2, r1
    ac92:	10 92 c1 0e 	sts	0x0EC1, r1
	p->held_cycles = 0;
    ac96:	10 92 c5 0e 	sts	0x0EC5, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	if (is_space())
    ac9a:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    ac9e:	88 23       	and	r24, r24
    aca0:	f9 f0       	breq	.+62     	; 0xace0 <init_boss_state+0x62>
	{
		game.boss.width = 3;
    aca2:	83 e0       	ldi	r24, 0x03	; 3
    aca4:	80 93 56 0e 	sts	0x0E56, r24
		game.boss.height = 1;
    aca8:	81 e0       	ldi	r24, 0x01	; 1
    acaa:	80 93 57 0e 	sts	0x0E57, r24
		game.boss.run.anim_count = 2;
    acae:	82 e0       	ldi	r24, 0x02	; 2
    acb0:	80 93 a0 0e 	sts	0x0EA0, r24
		game.boss.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    acb4:	85 e0       	ldi	r24, 0x05	; 5
    acb6:	80 93 a1 0e 	sts	0x0EA1, r24
		game.boss.run.anims = boss_run_anim;
    acba:	88 e8       	ldi	r24, 0x88	; 136
    acbc:	9d e0       	ldi	r25, 0x0D	; 13
    acbe:	90 93 a6 0e 	sts	0x0EA6, r25
    acc2:	80 93 a5 0e 	sts	0x0EA5, r24
		game.boss.run.anims[0] = (char*) map_hero_ship_0;
    acc6:	84 ef       	ldi	r24, 0xF4	; 244
    acc8:	96 e3       	ldi	r25, 0x36	; 54
    acca:	90 93 89 0d 	sts	0x0D89, r25
    acce:	80 93 88 0d 	sts	0x0D88, r24
		game.boss.run.anims[1] = (char*) map_hero_ship_1;
    acd2:	8f ee       	ldi	r24, 0xEF	; 239
    acd4:	96 e3       	ldi	r25, 0x36	; 54
    acd6:	90 93 8b 0d 	sts	0x0D8B, r25
    acda:	80 93 8a 0d 	sts	0x0D8A, r24
    acde:	2a c0       	rjmp	.+84     	; 0xad34 <init_boss_state+0xb6>
	}
	else
	{
		game.boss.width = 2;
    ace0:	82 e0       	ldi	r24, 0x02	; 2
    ace2:	80 93 56 0e 	sts	0x0E56, r24
		game.boss.height = 3;
    ace6:	83 e0       	ldi	r24, 0x03	; 3
    ace8:	80 93 57 0e 	sts	0x0E57, r24
		game.boss.run.anim_count = 4;
    acec:	84 e0       	ldi	r24, 0x04	; 4
    acee:	80 93 a0 0e 	sts	0x0EA0, r24
		game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    acf2:	8c e0       	ldi	r24, 0x0C	; 12
    acf4:	80 93 a1 0e 	sts	0x0EA1, r24
		game.boss.run.anims = boss_run_anim;
    acf8:	88 e8       	ldi	r24, 0x88	; 136
    acfa:	9d e0       	ldi	r25, 0x0D	; 13
    acfc:	90 93 a6 0e 	sts	0x0EA6, r25
    ad00:	80 93 a5 0e 	sts	0x0EA5, r24
		game.boss.run.anims[0] = (char*) map_ahero_step_0;
    ad04:	89 eb       	ldi	r24, 0xB9	; 185
    ad06:	96 e3       	ldi	r25, 0x36	; 54
    ad08:	90 93 89 0d 	sts	0x0D89, r25
    ad0c:	80 93 88 0d 	sts	0x0D88, r24
		game.boss.run.anims[1] = (char*) map_ahero_step_1;
    ad10:	81 eb       	ldi	r24, 0xB1	; 177
    ad12:	96 e3       	ldi	r25, 0x36	; 54
    ad14:	90 93 8b 0d 	sts	0x0D8B, r25
    ad18:	80 93 8a 0d 	sts	0x0D8A, r24
		game.boss.run.anims[2] = (char*) map_ahero_step_2;
    ad1c:	89 ea       	ldi	r24, 0xA9	; 169
    ad1e:	96 e3       	ldi	r25, 0x36	; 54
    ad20:	90 93 8d 0d 	sts	0x0D8D, r25
    ad24:	80 93 8c 0d 	sts	0x0D8C, r24
		game.boss.run.anims[3] = (char*) map_ahero_step_3;
    ad28:	81 ea       	ldi	r24, 0xA1	; 161
    ad2a:	96 e3       	ldi	r25, 0x36	; 54
    ad2c:	90 93 8f 0d 	sts	0x0D8F, r25
    ad30:	80 93 8e 0d 	sts	0x0D8E, r24
	}
	game.boss.active = 0;
    ad34:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.direction = D_RIGHT;
    ad38:	81 e0       	ldi	r24, 0x01	; 1
    ad3a:	80 93 55 0e 	sts	0x0E55, r24
	game.boss.flags = IDLE;
    ad3e:	98 e0       	ldi	r25, 0x08	; 8
    ad40:	90 93 53 0e 	sts	0x0E53, r25
	game.boss.ai_flags = AI_NOT_READY;
    ad44:	10 92 54 0e 	sts	0x0E54, r1
	game.boss.shield = BOSS_SHIELD;
    ad48:	9a e0       	ldi	r25, 0x0A	; 10
    ad4a:	90 93 5a 0e 	sts	0x0E5A, r25
	game.boss.idle.anim_count = 1;
    ad4e:	80 93 98 0e 	sts	0x0E98, r24
	game.boss.idle.frames_per_anim = 1;
    ad52:	80 93 99 0e 	sts	0x0E99, r24
	game.boss.idle.anims = boss_idle_anim;
    ad56:	29 e4       	ldi	r18, 0x49	; 73
    ad58:	30 e1       	ldi	r19, 0x10	; 16
    ad5a:	30 93 9e 0e 	sts	0x0E9E, r19
    ad5e:	20 93 9d 0e 	sts	0x0E9D, r18
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    ad62:	21 ec       	ldi	r18, 0xC1	; 193
    ad64:	36 e3       	ldi	r19, 0x36	; 54
    ad66:	30 93 4a 10 	sts	0x104A, r19
    ad6a:	20 93 49 10 	sts	0x1049, r18
	
	game.boss.jump.anim_count = 1;
    ad6e:	80 93 a8 0e 	sts	0x0EA8, r24
	game.boss.jump.frames_per_anim = 1;
    ad72:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.jump.anims = boss_jump_anim;
    ad76:	89 e3       	ldi	r24, 0x39	; 57
    ad78:	90 e1       	ldi	r25, 0x10	; 16
    ad7a:	90 93 ae 0e 	sts	0x0EAE, r25
    ad7e:	80 93 ad 0e 	sts	0x0EAD, r24
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    ad82:	89 e9       	ldi	r24, 0x99	; 153
    ad84:	96 e3       	ldi	r25, 0x36	; 54
    ad86:	90 93 3a 10 	sts	0x103A, r25
    ad8a:	80 93 39 10 	sts	0x1039, r24
	
	game.boss.expl.anim_count = 3;
    ad8e:	83 e0       	ldi	r24, 0x03	; 3
    ad90:	80 93 b8 0e 	sts	0x0EB8, r24
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    ad94:	85 e0       	ldi	r24, 0x05	; 5
    ad96:	80 93 b9 0e 	sts	0x0EB9, r24
	game.boss.expl.anims = expl_anim;
    ad9a:	81 e4       	ldi	r24, 0x41	; 65
    ad9c:	90 e1       	ldi	r25, 0x10	; 16
    ad9e:	90 93 be 0e 	sts	0x0EBE, r25
    ada2:	80 93 bd 0e 	sts	0x0EBD, r24
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    ada6:	83 e4       	ldi	r24, 0x43	; 67
    ada8:	97 e3       	ldi	r25, 0x37	; 55
    adaa:	90 93 42 10 	sts	0x1042, r25
    adae:	80 93 41 10 	sts	0x1041, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    adb2:	80 e4       	ldi	r24, 0x40	; 64
    adb4:	97 e3       	ldi	r25, 0x37	; 55
    adb6:	90 93 44 10 	sts	0x1044, r25
    adba:	80 93 43 10 	sts	0x1043, r24
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    adbe:	8d e3       	ldi	r24, 0x3D	; 61
    adc0:	97 e3       	ldi	r25, 0x37	; 55
    adc2:	90 93 46 10 	sts	0x1046, r25
    adc6:	80 93 45 10 	sts	0x1045, r24
	
	init_boss_shot(game.current_level_index);
    adca:	80 91 c7 0d 	lds	r24, 0x0DC7
    adce:	0c 94 7e 54 	jmp	0xa8fc	; 0xa8fc <init_boss_shot>

0000add2 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    add2:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    add6:	88 23       	and	r24, r24
    add8:	f9 f0       	breq	.+62     	; 0xae18 <init_player_state+0x46>
	{
		game.player.width = 3;
    adda:	83 e0       	ldi	r24, 0x03	; 3
    addc:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 1;
    ade0:	81 e0       	ldi	r24, 0x01	; 1
    ade2:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 2;
    ade6:	82 e0       	ldi	r24, 0x02	; 2
    ade8:	80 93 25 0e 	sts	0x0E25, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    adec:	85 e0       	ldi	r24, 0x05	; 5
    adee:	80 93 26 0e 	sts	0x0E26, r24
		game.player.run.anims = run_anim;
    adf2:	8f e2       	ldi	r24, 0x2F	; 47
    adf4:	90 e1       	ldi	r25, 0x10	; 16
    adf6:	90 93 2b 0e 	sts	0x0E2B, r25
    adfa:	80 93 2a 0e 	sts	0x0E2A, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    adfe:	84 ef       	ldi	r24, 0xF4	; 244
    ae00:	96 e3       	ldi	r25, 0x36	; 54
    ae02:	90 93 30 10 	sts	0x1030, r25
    ae06:	80 93 2f 10 	sts	0x102F, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    ae0a:	8f ee       	ldi	r24, 0xEF	; 239
    ae0c:	96 e3       	ldi	r25, 0x36	; 54
    ae0e:	90 93 32 10 	sts	0x1032, r25
    ae12:	80 93 31 10 	sts	0x1031, r24
    ae16:	2a c0       	rjmp	.+84     	; 0xae6c <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    ae18:	82 e0       	ldi	r24, 0x02	; 2
    ae1a:	80 93 db 0d 	sts	0x0DDB, r24
		game.player.height = 3;
    ae1e:	83 e0       	ldi	r24, 0x03	; 3
    ae20:	80 93 dc 0d 	sts	0x0DDC, r24
		game.player.run.anim_count = 4;
    ae24:	84 e0       	ldi	r24, 0x04	; 4
    ae26:	80 93 25 0e 	sts	0x0E25, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    ae2a:	8c e0       	ldi	r24, 0x0C	; 12
    ae2c:	80 93 26 0e 	sts	0x0E26, r24
		game.player.run.anims = run_anim;
    ae30:	8f e2       	ldi	r24, 0x2F	; 47
    ae32:	90 e1       	ldi	r25, 0x10	; 16
    ae34:	90 93 2b 0e 	sts	0x0E2B, r25
    ae38:	80 93 2a 0e 	sts	0x0E2A, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    ae3c:	8e e1       	ldi	r24, 0x1E	; 30
    ae3e:	97 e3       	ldi	r25, 0x37	; 55
    ae40:	90 93 30 10 	sts	0x1030, r25
    ae44:	80 93 2f 10 	sts	0x102F, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    ae48:	86 e1       	ldi	r24, 0x16	; 22
    ae4a:	97 e3       	ldi	r25, 0x37	; 55
    ae4c:	90 93 32 10 	sts	0x1032, r25
    ae50:	80 93 31 10 	sts	0x1031, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    ae54:	8e e0       	ldi	r24, 0x0E	; 14
    ae56:	97 e3       	ldi	r25, 0x37	; 55
    ae58:	90 93 34 10 	sts	0x1034, r25
    ae5c:	80 93 33 10 	sts	0x1033, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    ae60:	86 e0       	ldi	r24, 0x06	; 6
    ae62:	97 e3       	ldi	r25, 0x37	; 55
    ae64:	90 93 36 10 	sts	0x1036, r25
    ae68:	80 93 35 10 	sts	0x1035, r24
	}
	game.player.active = 1;
    ae6c:	81 e0       	ldi	r24, 0x01	; 1
    ae6e:	80 93 dd 0d 	sts	0x0DDD, r24
	game.player.direction = D_RIGHT;
    ae72:	80 93 da 0d 	sts	0x0DDA, r24
	game.player.flags = IDLE;
    ae76:	98 e0       	ldi	r25, 0x08	; 8
    ae78:	90 93 d8 0d 	sts	0x0DD8, r25
	game.player.ai_flags = AI_NOT_READY;
    ae7c:	10 92 d9 0d 	sts	0x0DD9, r1
	game.player.shield = PLAYER_SHIELD;
    ae80:	9a e0       	ldi	r25, 0x0A	; 10
    ae82:	90 93 df 0d 	sts	0x0DDF, r25
	game.player.idle.anim_count = 1;
    ae86:	80 93 1d 0e 	sts	0x0E1D, r24
	game.player.idle.frames_per_anim = 1;
    ae8a:	80 93 1e 0e 	sts	0x0E1E, r24
	game.player.idle.anims = idle_anim;
    ae8e:	2f e4       	ldi	r18, 0x4F	; 79
    ae90:	30 e1       	ldi	r19, 0x10	; 16
    ae92:	30 93 23 0e 	sts	0x0E23, r19
    ae96:	20 93 22 0e 	sts	0x0E22, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    ae9a:	26 e2       	ldi	r18, 0x26	; 38
    ae9c:	37 e3       	ldi	r19, 0x37	; 55
    ae9e:	30 93 50 10 	sts	0x1050, r19
    aea2:	20 93 4f 10 	sts	0x104F, r18
	
	game.player.jump.anim_count = 1;
    aea6:	80 93 2d 0e 	sts	0x0E2D, r24
	game.player.jump.frames_per_anim = 1;
    aeaa:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.jump.anims = jump_anim;
    aeae:	20 e9       	ldi	r18, 0x90	; 144
    aeb0:	3d e0       	ldi	r19, 0x0D	; 13
    aeb2:	30 93 33 0e 	sts	0x0E33, r19
    aeb6:	20 93 32 0e 	sts	0x0E32, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    aeba:	2e ef       	ldi	r18, 0xFE	; 254
    aebc:	36 e3       	ldi	r19, 0x36	; 54
    aebe:	30 93 91 0d 	sts	0x0D91, r19
    aec2:	20 93 90 0d 	sts	0x0D90, r18
	
	game.player.prone.anim_count = 1;
    aec6:	80 93 35 0e 	sts	0x0E35, r24
	game.player.prone.frames_per_anim = 1;
    aeca:	80 93 36 0e 	sts	0x0E36, r24
	game.player.prone.anims = prone_anim;
    aece:	83 ed       	ldi	r24, 0xD3	; 211
    aed0:	9f e0       	ldi	r25, 0x0F	; 15
    aed2:	90 93 3b 0e 	sts	0x0E3B, r25
    aed6:	80 93 3a 0e 	sts	0x0E3A, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    aeda:	89 ef       	ldi	r24, 0xF9	; 249
    aedc:	96 e3       	ldi	r25, 0x36	; 54
    aede:	90 93 d4 0f 	sts	0x0FD4, r25
    aee2:	80 93 d3 0f 	sts	0x0FD3, r24
	
	game.player.expl.anim_count = 3;
    aee6:	83 e0       	ldi	r24, 0x03	; 3
    aee8:	80 93 3d 0e 	sts	0x0E3D, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    aeec:	85 e0       	ldi	r24, 0x05	; 5
    aeee:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.expl.anims = expl_anim;
    aef2:	81 e4       	ldi	r24, 0x41	; 65
    aef4:	90 e1       	ldi	r25, 0x10	; 16
    aef6:	90 93 43 0e 	sts	0x0E43, r25
    aefa:	80 93 42 0e 	sts	0x0E42, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    aefe:	83 e4       	ldi	r24, 0x43	; 67
    af00:	97 e3       	ldi	r25, 0x37	; 55
    af02:	90 93 42 10 	sts	0x1042, r25
    af06:	80 93 41 10 	sts	0x1041, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    af0a:	80 e4       	ldi	r24, 0x40	; 64
    af0c:	97 e3       	ldi	r25, 0x37	; 55
    af0e:	90 93 44 10 	sts	0x1044, r25
    af12:	80 93 43 10 	sts	0x1043, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    af16:	8d e3       	ldi	r24, 0x3D	; 61
    af18:	97 e3       	ldi	r25, 0x37	; 55
    af1a:	90 93 46 10 	sts	0x1046, r25
    af1e:	80 93 45 10 	sts	0x1045, r24
	
	init_player_shot(game.current_level_index);
    af22:	80 91 c7 0d 	lds	r24, 0x0DC7
    af26:	0c 94 64 52 	jmp	0xa4c8	; 0xa4c8 <init_player_shot>

0000af2a <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y)
{
	game.enemies[i].expl.anim_count = 3;
    af2a:	a8 2f       	mov	r26, r24
    af2c:	b0 e0       	ldi	r27, 0x00	; 0
    af2e:	25 e3       	ldi	r18, 0x35	; 53
    af30:	82 9f       	mul	r24, r18
    af32:	c0 01       	movw	r24, r0
    af34:	11 24       	eor	r1, r1
    af36:	8e 54       	subi	r24, 0x4E	; 78
    af38:	92 4f       	sbci	r25, 0xF2	; 242
    af3a:	fc 01       	movw	r30, r24
    af3c:	ee 5b       	subi	r30, 0xBE	; 190
    af3e:	fe 4f       	sbci	r31, 0xFE	; 254
    af40:	23 e0       	ldi	r18, 0x03	; 3
    af42:	20 83       	st	Z, r18
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    af44:	31 96       	adiw	r30, 0x01	; 1
    af46:	25 e0       	ldi	r18, 0x05	; 5
    af48:	20 83       	st	Z, r18
	game.enemies[i].expl.anims = expl_anim;
    af4a:	34 96       	adiw	r30, 0x04	; 4
    af4c:	21 e4       	ldi	r18, 0x41	; 65
    af4e:	30 e1       	ldi	r19, 0x10	; 16
    af50:	31 83       	std	Z+1, r19	; 0x01
    af52:	20 83       	st	Z, r18
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    af54:	23 e4       	ldi	r18, 0x43	; 67
    af56:	37 e3       	ldi	r19, 0x37	; 55
    af58:	30 93 42 10 	sts	0x1042, r19
    af5c:	20 93 41 10 	sts	0x1041, r18
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    af60:	20 e4       	ldi	r18, 0x40	; 64
    af62:	37 e3       	ldi	r19, 0x37	; 55
    af64:	30 93 44 10 	sts	0x1044, r19
    af68:	20 93 43 10 	sts	0x1043, r18
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    af6c:	2d e3       	ldi	r18, 0x3D	; 61
    af6e:	37 e3       	ldi	r19, 0x37	; 55
    af70:	30 93 46 10 	sts	0x1046, r19
    af74:	20 93 45 10 	sts	0x1045, r18
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    af78:	7a 97       	sbiw	r30, 0x1a	; 26
    af7a:	21 e0       	ldi	r18, 0x01	; 1
    af7c:	20 83       	st	Z, r18
		game.enemies[i].shot[j].active = 0;
    af7e:	31 96       	adiw	r30, 0x01	; 1
    af80:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    af82:	32 97       	sbiw	r30, 0x02	; 2
    af84:	37 e0       	ldi	r19, 0x07	; 7
    af86:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anim_count = 1;
    af88:	36 96       	adiw	r30, 0x06	; 6
    af8a:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    af8c:	31 96       	adiw	r30, 0x01	; 1
    af8e:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    af90:	34 96       	adiw	r30, 0x04	; 4
    af92:	2b e3       	ldi	r18, 0x3B	; 59
    af94:	30 e1       	ldi	r19, 0x10	; 16
    af96:	31 83       	std	Z+1, r19	; 0x01
    af98:	20 83       	st	Z, r18
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    af9a:	26 e9       	ldi	r18, 0x96	; 150
    af9c:	36 e3       	ldi	r19, 0x36	; 54
    af9e:	30 93 3c 10 	sts	0x103C, r19
    afa2:	20 93 3b 10 	sts	0x103B, r18
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    afa6:	38 97       	sbiw	r30, 0x08	; 8
    afa8:	20 e5       	ldi	r18, 0x50	; 80
    afaa:	20 83       	st	Z, r18
		if (game.enemies[i].enemy_type == ENEMY_DRONE)
    afac:	3f 97       	sbiw	r30, 0x0f	; 15
    afae:	30 81       	ld	r19, Z
    afb0:	3a 96       	adiw	r30, 0x0a	; 10
    afb2:	34 30       	cpi	r19, 0x04	; 4
    afb4:	11 f4       	brne	.+4      	; 0xafba <init_enemy_shot+0x90>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    afb6:	82 ee       	ldi	r24, 0xE2	; 226
    afb8:	03 c0       	rjmp	.+6      	; 0xafc0 <init_enemy_shot+0x96>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    afba:	35 30       	cpi	r19, 0x05	; 5
    afbc:	19 f4       	brne	.+6      	; 0xafc4 <init_enemy_shot+0x9a>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    afbe:	8a e0       	ldi	r24, 0x0A	; 10
    afc0:	80 83       	st	Z, r24
    afc2:	01 c0       	rjmp	.+2      	; 0xafc6 <init_enemy_shot+0x9c>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    afc4:	20 83       	st	Z, r18
		}
		game.enemies[i].shot[j].shared.vy = 0;
    afc6:	25 e3       	ldi	r18, 0x35	; 53
    afc8:	2a 9f       	mul	r18, r26
    afca:	c0 01       	movw	r24, r0
    afcc:	2b 9f       	mul	r18, r27
    afce:	90 0d       	add	r25, r0
    afd0:	11 24       	eor	r1, r1
    afd2:	8e 54       	subi	r24, 0x4E	; 78
    afd4:	92 4f       	sbci	r25, 0xF2	; 242
    afd6:	fc 01       	movw	r30, r24
    afd8:	e7 5d       	subi	r30, 0xD7	; 215
    afda:	fe 4f       	sbci	r31, 0xFE	; 254
    afdc:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    afde:	34 97       	sbiw	r30, 0x04	; 4
    afe0:	71 83       	std	Z+1, r23	; 0x01
    afe2:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    afe4:	32 96       	adiw	r30, 0x02	; 2
    afe6:	51 83       	std	Z+1, r21	; 0x01
    afe8:	40 83       	st	Z, r20
    afea:	08 95       	ret

0000afec <init_enemy_spider>:
	}
}

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    afec:	95 e3       	ldi	r25, 0x35	; 53
    afee:	89 9f       	mul	r24, r25
    aff0:	90 01       	movw	r18, r0
    aff2:	11 24       	eor	r1, r1
    aff4:	2e 54       	subi	r18, 0x4E	; 78
    aff6:	32 4f       	sbci	r19, 0xF2	; 242
    aff8:	f9 01       	movw	r30, r18
    affa:	e5 5e       	subi	r30, 0xE5	; 229
    affc:	fe 4f       	sbci	r31, 0xFE	; 254
    affe:	91 e0       	ldi	r25, 0x01	; 1
    b000:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b002:	32 96       	adiw	r30, 0x02	; 2
    b004:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    b006:	31 97       	sbiw	r30, 0x01	; 1
    b008:	a8 e0       	ldi	r26, 0x08	; 8
    b00a:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    b00c:	32 96       	adiw	r30, 0x02	; 2
    b00e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b010:	31 96       	adiw	r30, 0x01	; 1
    b012:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    b014:	31 96       	adiw	r30, 0x01	; 1
    b016:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    b018:	31 96       	adiw	r30, 0x01	; 1
    b01a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b01c:	31 96       	adiw	r30, 0x01	; 1
    b01e:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    b020:	32 96       	adiw	r30, 0x02	; 2
    b022:	92 e0       	ldi	r25, 0x02	; 2
    b024:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    b026:	76 96       	adiw	r30, 0x16	; 22
    b028:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    b02a:	31 96       	adiw	r30, 0x01	; 1
    b02c:	9a e0       	ldi	r25, 0x0A	; 10
    b02e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    b030:	d9 01       	movw	r26, r18
    b032:	a1 5c       	subi	r26, 0xC1	; 193
    b034:	be 4f       	sbci	r27, 0xFE	; 254
    b036:	e5 ed       	ldi	r30, 0xD5	; 213
    b038:	ff e0       	ldi	r31, 0x0F	; 15
    b03a:	ed 93       	st	X+, r30
    b03c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    b03e:	a0 e9       	ldi	r26, 0x90	; 144
    b040:	b6 e3       	ldi	r27, 0x36	; 54
    b042:	b1 83       	std	Z+1, r27	; 0x01
    b044:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    b046:	ad e8       	ldi	r26, 0x8D	; 141
    b048:	b6 e3       	ldi	r27, 0x36	; 54
    b04a:	b3 83       	std	Z+3, r27	; 0x03
    b04c:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    b04e:	f9 01       	movw	r30, r18
    b050:	e6 5e       	subi	r30, 0xE6	; 230
    b052:	fe 4f       	sbci	r31, 0xFE	; 254
    b054:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b056:	31 97       	sbiw	r30, 0x01	; 1
    b058:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b05a:	31 97       	sbiw	r30, 0x01	; 1
    b05c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b05e:	34 97       	sbiw	r30, 0x04	; 4
    b060:	71 83       	std	Z+1, r23	; 0x01
    b062:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b064:	32 96       	adiw	r30, 0x02	; 2
    b066:	51 83       	std	Z+1, r21	; 0x01
    b068:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b06a:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <init_enemy_shot>

0000b06e <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b06e:	95 e3       	ldi	r25, 0x35	; 53
    b070:	89 9f       	mul	r24, r25
    b072:	90 01       	movw	r18, r0
    b074:	11 24       	eor	r1, r1
    b076:	2e 54       	subi	r18, 0x4E	; 78
    b078:	32 4f       	sbci	r19, 0xF2	; 242
    b07a:	f9 01       	movw	r30, r18
    b07c:	e5 5e       	subi	r30, 0xE5	; 229
    b07e:	fe 4f       	sbci	r31, 0xFE	; 254
    b080:	91 e0       	ldi	r25, 0x01	; 1
    b082:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b084:	32 96       	adiw	r30, 0x02	; 2
    b086:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b088:	31 96       	adiw	r30, 0x01	; 1
    b08a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b08c:	31 96       	adiw	r30, 0x01	; 1
    b08e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    b090:	31 96       	adiw	r30, 0x01	; 1
    b092:	a3 e0       	ldi	r26, 0x03	; 3
    b094:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b096:	31 96       	adiw	r30, 0x01	; 1
    b098:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b09a:	31 96       	adiw	r30, 0x01	; 1
    b09c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    b09e:	32 96       	adiw	r30, 0x02	; 2
    b0a0:	a2 e0       	ldi	r26, 0x02	; 2
    b0a2:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b0a4:	76 96       	adiw	r30, 0x16	; 22
    b0a6:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b0a8:	31 96       	adiw	r30, 0x01	; 1
    b0aa:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b0ac:	d9 01       	movw	r26, r18
    b0ae:	a1 5c       	subi	r26, 0xC1	; 193
    b0b0:	be 4f       	sbci	r27, 0xFE	; 254
    b0b2:	eb e2       	ldi	r30, 0x2B	; 43
    b0b4:	f0 e1       	ldi	r31, 0x10	; 16
    b0b6:	ed 93       	st	X+, r30
    b0b8:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    b0ba:	a7 e8       	ldi	r26, 0x87	; 135
    b0bc:	b6 e3       	ldi	r27, 0x36	; 54
    b0be:	b1 83       	std	Z+1, r27	; 0x01
    b0c0:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b0c2:	f9 01       	movw	r30, r18
    b0c4:	e6 5e       	subi	r30, 0xE6	; 230
    b0c6:	fe 4f       	sbci	r31, 0xFE	; 254
    b0c8:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b0ca:	31 97       	sbiw	r30, 0x01	; 1
    b0cc:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b0ce:	31 97       	sbiw	r30, 0x01	; 1
    b0d0:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b0d2:	34 97       	sbiw	r30, 0x04	; 4
    b0d4:	71 83       	std	Z+1, r23	; 0x01
    b0d6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b0d8:	32 96       	adiw	r30, 0x02	; 2
    b0da:	51 83       	std	Z+1, r21	; 0x01
    b0dc:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b0de:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <init_enemy_shot>

0000b0e2 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b0e2:	95 e3       	ldi	r25, 0x35	; 53
    b0e4:	89 9f       	mul	r24, r25
    b0e6:	90 01       	movw	r18, r0
    b0e8:	11 24       	eor	r1, r1
    b0ea:	2e 54       	subi	r18, 0x4E	; 78
    b0ec:	32 4f       	sbci	r19, 0xF2	; 242
    b0ee:	f9 01       	movw	r30, r18
    b0f0:	e5 5e       	subi	r30, 0xE5	; 229
    b0f2:	fe 4f       	sbci	r31, 0xFE	; 254
    b0f4:	91 e0       	ldi	r25, 0x01	; 1
    b0f6:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b0f8:	32 96       	adiw	r30, 0x02	; 2
    b0fa:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b0fc:	31 96       	adiw	r30, 0x01	; 1
    b0fe:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b100:	31 96       	adiw	r30, 0x01	; 1
    b102:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    b104:	31 96       	adiw	r30, 0x01	; 1
    b106:	a4 e0       	ldi	r26, 0x04	; 4
    b108:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b10a:	31 96       	adiw	r30, 0x01	; 1
    b10c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b10e:	31 96       	adiw	r30, 0x01	; 1
    b110:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    b112:	32 96       	adiw	r30, 0x02	; 2
    b114:	a2 e0       	ldi	r26, 0x02	; 2
    b116:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b118:	76 96       	adiw	r30, 0x16	; 22
    b11a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b11c:	31 96       	adiw	r30, 0x01	; 1
    b11e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    b120:	d9 01       	movw	r26, r18
    b122:	a1 5c       	subi	r26, 0xC1	; 193
    b124:	be 4f       	sbci	r27, 0xFE	; 254
    b126:	ef e3       	ldi	r30, 0x3F	; 63
    b128:	f0 e1       	ldi	r31, 0x10	; 16
    b12a:	ed 93       	st	X+, r30
    b12c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    b12e:	a4 e8       	ldi	r26, 0x84	; 132
    b130:	b6 e3       	ldi	r27, 0x36	; 54
    b132:	b1 83       	std	Z+1, r27	; 0x01
    b134:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b136:	f9 01       	movw	r30, r18
    b138:	e6 5e       	subi	r30, 0xE6	; 230
    b13a:	fe 4f       	sbci	r31, 0xFE	; 254
    b13c:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    b13e:	31 97       	sbiw	r30, 0x01	; 1
    b140:	92 ee       	ldi	r25, 0xE2	; 226
    b142:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b144:	31 97       	sbiw	r30, 0x01	; 1
    b146:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b148:	34 97       	sbiw	r30, 0x04	; 4
    b14a:	71 83       	std	Z+1, r23	; 0x01
    b14c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b14e:	32 96       	adiw	r30, 0x02	; 2
    b150:	51 83       	std	Z+1, r21	; 0x01
    b152:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b154:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <init_enemy_shot>

0000b158 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b158:	95 e3       	ldi	r25, 0x35	; 53
    b15a:	89 9f       	mul	r24, r25
    b15c:	90 01       	movw	r18, r0
    b15e:	11 24       	eor	r1, r1
    b160:	2e 54       	subi	r18, 0x4E	; 78
    b162:	32 4f       	sbci	r19, 0xF2	; 242
    b164:	f9 01       	movw	r30, r18
    b166:	e5 5e       	subi	r30, 0xE5	; 229
    b168:	fe 4f       	sbci	r31, 0xFE	; 254
    b16a:	91 e0       	ldi	r25, 0x01	; 1
    b16c:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b16e:	33 96       	adiw	r30, 0x03	; 3
    b170:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b172:	31 96       	adiw	r30, 0x01	; 1
    b174:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    b176:	31 96       	adiw	r30, 0x01	; 1
    b178:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    b17a:	31 96       	adiw	r30, 0x01	; 1
    b17c:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b17e:	31 96       	adiw	r30, 0x01	; 1
    b180:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    b182:	32 96       	adiw	r30, 0x02	; 2
    b184:	a4 e0       	ldi	r26, 0x04	; 4
    b186:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b188:	76 96       	adiw	r30, 0x16	; 22
    b18a:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b18c:	31 96       	adiw	r30, 0x01	; 1
    b18e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    b190:	d9 01       	movw	r26, r18
    b192:	a1 5c       	subi	r26, 0xC1	; 193
    b194:	be 4f       	sbci	r27, 0xFE	; 254
    b196:	e9 ed       	ldi	r30, 0xD9	; 217
    b198:	ff e0       	ldi	r31, 0x0F	; 15
    b19a:	ed 93       	st	X+, r30
    b19c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    b19e:	a3 e9       	ldi	r26, 0x93	; 147
    b1a0:	b6 e3       	ldi	r27, 0x36	; 54
    b1a2:	b1 83       	std	Z+1, r27	; 0x01
    b1a4:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b1a6:	f9 01       	movw	r30, r18
    b1a8:	e6 5e       	subi	r30, 0xE6	; 230
    b1aa:	fe 4f       	sbci	r31, 0xFE	; 254
    b1ac:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    b1ae:	31 97       	sbiw	r30, 0x01	; 1
    b1b0:	9e e1       	ldi	r25, 0x1E	; 30
    b1b2:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b1b4:	31 97       	sbiw	r30, 0x01	; 1
    b1b6:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b1b8:	34 97       	sbiw	r30, 0x04	; 4
    b1ba:	71 83       	std	Z+1, r23	; 0x01
    b1bc:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b1be:	32 96       	adiw	r30, 0x02	; 2
    b1c0:	51 83       	std	Z+1, r21	; 0x01
    b1c2:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b1c4:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <init_enemy_shot>

0000b1c8 <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b1c8:	95 e3       	ldi	r25, 0x35	; 53
    b1ca:	89 9f       	mul	r24, r25
    b1cc:	90 01       	movw	r18, r0
    b1ce:	11 24       	eor	r1, r1
    b1d0:	2e 54       	subi	r18, 0x4E	; 78
    b1d2:	32 4f       	sbci	r19, 0xF2	; 242
    b1d4:	f9 01       	movw	r30, r18
    b1d6:	e5 5e       	subi	r30, 0xE5	; 229
    b1d8:	fe 4f       	sbci	r31, 0xFE	; 254
    b1da:	91 e0       	ldi	r25, 0x01	; 1
    b1dc:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b1de:	33 96       	adiw	r30, 0x03	; 3
    b1e0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b1e2:	31 96       	adiw	r30, 0x01	; 1
    b1e4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    b1e6:	31 96       	adiw	r30, 0x01	; 1
    b1e8:	a5 e0       	ldi	r26, 0x05	; 5
    b1ea:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b1ec:	31 96       	adiw	r30, 0x01	; 1
    b1ee:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b1f0:	31 96       	adiw	r30, 0x01	; 1
    b1f2:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    b1f4:	32 96       	adiw	r30, 0x02	; 2
    b1f6:	a4 e0       	ldi	r26, 0x04	; 4
    b1f8:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b1fa:	76 96       	adiw	r30, 0x16	; 22
    b1fc:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b1fe:	31 96       	adiw	r30, 0x01	; 1
    b200:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    b202:	d9 01       	movw	r26, r18
    b204:	a1 5c       	subi	r26, 0xC1	; 193
    b206:	be 4f       	sbci	r27, 0xFE	; 254
    b208:	ed e3       	ldi	r30, 0x3D	; 61
    b20a:	f0 e1       	ldi	r31, 0x10	; 16
    b20c:	ed 93       	st	X+, r30
    b20e:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    b210:	aa e8       	ldi	r26, 0x8A	; 138
    b212:	b6 e3       	ldi	r27, 0x36	; 54
    b214:	b1 83       	std	Z+1, r27	; 0x01
    b216:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b218:	f9 01       	movw	r30, r18
    b21a:	e6 5e       	subi	r30, 0xE6	; 230
    b21c:	fe 4f       	sbci	r31, 0xFE	; 254
    b21e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    b220:	31 97       	sbiw	r30, 0x01	; 1
    b222:	9a e0       	ldi	r25, 0x0A	; 10
    b224:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b226:	31 97       	sbiw	r30, 0x01	; 1
    b228:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b22a:	34 97       	sbiw	r30, 0x04	; 4
    b22c:	71 83       	std	Z+1, r23	; 0x01
    b22e:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b230:	32 96       	adiw	r30, 0x02	; 2
    b232:	51 83       	std	Z+1, r21	; 0x01
    b234:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y);
    b236:	0c 94 95 57 	jmp	0xaf2a	; 0xaf2a <init_enemy_shot>

0000b23a <init_enemy_level_hazard>:
}

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b23a:	a8 2f       	mov	r26, r24
    b23c:	b0 e0       	ldi	r27, 0x00	; 0
    b23e:	25 e3       	ldi	r18, 0x35	; 53
    b240:	82 9f       	mul	r24, r18
    b242:	c0 01       	movw	r24, r0
    b244:	11 24       	eor	r1, r1
    b246:	8e 54       	subi	r24, 0x4E	; 78
    b248:	92 4f       	sbci	r25, 0xF2	; 242
    b24a:	fc 01       	movw	r30, r24
    b24c:	e5 5e       	subi	r30, 0xE5	; 229
    b24e:	fe 4f       	sbci	r31, 0xFE	; 254
    b250:	21 e0       	ldi	r18, 0x01	; 1
    b252:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    b254:	33 96       	adiw	r30, 0x03	; 3
    b256:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    b258:	31 96       	adiw	r30, 0x01	; 1
    b25a:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    b25c:	31 96       	adiw	r30, 0x01	; 1
    b25e:	32 e0       	ldi	r19, 0x02	; 2
    b260:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    b262:	31 96       	adiw	r30, 0x01	; 1
    b264:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b266:	31 96       	adiw	r30, 0x01	; 1
    b268:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    b26a:	78 96       	adiw	r30, 0x18	; 24
    b26c:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    b26e:	31 96       	adiw	r30, 0x01	; 1
    b270:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    b272:	34 96       	adiw	r30, 0x04	; 4
    b274:	8d e4       	ldi	r24, 0x4D	; 77
    b276:	90 e1       	ldi	r25, 0x10	; 16
    b278:	91 83       	std	Z+1, r25	; 0x01
    b27a:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b27c:	80 91 c7 0d 	lds	r24, 0x0DC7
    b280:	84 30       	cpi	r24, 0x04	; 4
    b282:	79 f0       	breq	.+30     	; 0xb2a2 <init_enemy_level_hazard+0x68>
    b284:	38 f4       	brcc	.+14     	; 0xb294 <init_enemy_level_hazard+0x5a>
    b286:	88 23       	and	r24, r24
    b288:	91 f0       	breq	.+36     	; 0xb2ae <init_enemy_level_hazard+0x74>
    b28a:	82 30       	cpi	r24, 0x02	; 2
    b28c:	81 f4       	brne	.+32     	; 0xb2ae <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b28e:	85 e7       	ldi	r24, 0x75	; 117
    b290:	96 e3       	ldi	r25, 0x36	; 54
    b292:	0f c0       	rjmp	.+30     	; 0xb2b2 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b294:	86 30       	cpi	r24, 0x06	; 6
    b296:	41 f0       	breq	.+16     	; 0xb2a8 <init_enemy_level_hazard+0x6e>
    b298:	88 30       	cpi	r24, 0x08	; 8
    b29a:	49 f4       	brne	.+18     	; 0xb2ae <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b29c:	8c e6       	ldi	r24, 0x6C	; 108
    b29e:	96 e3       	ldi	r25, 0x36	; 54
    b2a0:	08 c0       	rjmp	.+16     	; 0xb2b2 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b2a2:	82 e7       	ldi	r24, 0x72	; 114
    b2a4:	96 e3       	ldi	r25, 0x36	; 54
    b2a6:	05 c0       	rjmp	.+10     	; 0xb2b2 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b2a8:	8f e6       	ldi	r24, 0x6F	; 111
    b2aa:	96 e3       	ldi	r25, 0x36	; 54
    b2ac:	02 c0       	rjmp	.+4      	; 0xb2b2 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b2ae:	88 e7       	ldi	r24, 0x78	; 120
    b2b0:	96 e3       	ldi	r25, 0x36	; 54
    b2b2:	90 93 4e 10 	sts	0x104E, r25
    b2b6:	80 93 4d 10 	sts	0x104D, r24
	}
	game.enemies[i].shared.gravity = 0;
    b2ba:	25 e3       	ldi	r18, 0x35	; 53
    b2bc:	2a 9f       	mul	r18, r26
    b2be:	c0 01       	movw	r24, r0
    b2c0:	2b 9f       	mul	r18, r27
    b2c2:	90 0d       	add	r25, r0
    b2c4:	11 24       	eor	r1, r1
    b2c6:	8e 54       	subi	r24, 0x4E	; 78
    b2c8:	92 4f       	sbci	r25, 0xF2	; 242
    b2ca:	fc 01       	movw	r30, r24
    b2cc:	e6 5e       	subi	r30, 0xE6	; 230
    b2ce:	fe 4f       	sbci	r31, 0xFE	; 254
    b2d0:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b2d2:	32 97       	sbiw	r30, 0x02	; 2
    b2d4:	28 e2       	ldi	r18, 0x28	; 40
    b2d6:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b2d8:	31 96       	adiw	r30, 0x01	; 1
    b2da:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b2dc:	35 97       	sbiw	r30, 0x05	; 5
    b2de:	71 83       	std	Z+1, r23	; 0x01
    b2e0:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b2e2:	32 96       	adiw	r30, 0x02	; 2
    b2e4:	51 83       	std	Z+1, r21	; 0x01
    b2e6:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b2e8:	3d 96       	adiw	r30, 0x0d	; 13
    b2ea:	83 e0       	ldi	r24, 0x03	; 3
    b2ec:	56 95       	lsr	r21
    b2ee:	47 95       	ror	r20
    b2f0:	8a 95       	dec	r24
    b2f2:	e1 f7       	brne	.-8      	; 0xb2ec <init_enemy_level_hazard+0xb2>
    b2f4:	40 83       	st	Z, r20
    b2f6:	08 95       	ret

0000b2f8 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b2f8:	cf 93       	push	r28
    b2fa:	df 93       	push	r29
    b2fc:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b2fe:	bc 01       	movw	r22, r24
    b300:	88 81       	ld	r24, Y
    b302:	99 81       	ldd	r25, Y+1	; 0x01
    b304:	0e 94 58 42 	call	0x84b0	; 0x84b0 <EepromReadBlock>
	if (status == 0x03)
    b308:	83 30       	cpi	r24, 0x03	; 3
    b30a:	29 f4       	brne	.+10     	; 0xb316 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b30c:	ce 01       	movw	r24, r28
	}
}
    b30e:	df 91       	pop	r29
    b310:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b312:	0c 94 0e 42 	jmp	0x841c	; 0x841c <EepromWriteBlock>
	}
}
    b316:	df 91       	pop	r29
    b318:	cf 91       	pop	r28
    b31a:	08 95       	ret

0000b31c <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b31c:	1f 93       	push	r17
    b31e:	cf 93       	push	r28
    b320:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b322:	d0 e0       	ldi	r29, 0x00	; 0
    b324:	10 e2       	ldi	r17, 0x20	; 32
    b326:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b328:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b32a:	c1 17       	cp	r28, r17
    b32c:	41 f0       	breq	.+16     	; 0xb33e <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b32e:	40 e0       	ldi	r20, 0x00	; 0
    b330:	50 e0       	ldi	r21, 0x00	; 0
    b332:	6c 2f       	mov	r22, r28
    b334:	8d 2f       	mov	r24, r29
    b336:	0e 94 9d 40 	call	0x813a	; 0x813a <SetTile>
    b33a:	cf 5f       	subi	r28, 0xFF	; 255
    b33c:	f6 cf       	rjmp	.-20     	; 0xb32a <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b33e:	df 5f       	subi	r29, 0xFF	; 255
    b340:	dc 31       	cpi	r29, 0x1C	; 28
    b342:	91 f7       	brne	.-28     	; 0xb328 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b344:	df 91       	pop	r29
    b346:	cf 91       	pop	r28
    b348:	1f 91       	pop	r17
    b34a:	08 95       	ret

0000b34c <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b34c:	dc 01       	movw	r26, r24
    b34e:	e6 2f       	mov	r30, r22
    b350:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b352:	25 e0       	ldi	r18, 0x05	; 5
    b354:	62 2f       	mov	r22, r18
    b356:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    b35a:	58 2f       	mov	r21, r24
    b35c:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b35e:	40 91 c8 0d 	lds	r20, 0x0DC8
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b362:	8e 2f       	mov	r24, r30
    b364:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b368:	e8 2f       	mov	r30, r24
    b36a:	f0 e0       	ldi	r31, 0x00	; 0
    b36c:	54 9f       	mul	r21, r20
    b36e:	e0 0d       	add	r30, r0
    b370:	f1 1d       	adc	r31, r1
    b372:	11 24       	eor	r1, r1
    b374:	32 96       	adiw	r30, 0x02	; 2
    b376:	ea 0f       	add	r30, r26
    b378:	fb 1f       	adc	r31, r27
    b37a:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b37c:	e9 2f       	mov	r30, r25
    b37e:	f0 e0       	ldi	r31, 0x00	; 0
    b380:	95 e0       	ldi	r25, 0x05	; 5
    b382:	39 9f       	mul	r19, r25
    b384:	e0 0d       	add	r30, r0
    b386:	f1 1d       	adc	r31, r1
    b388:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b38a:	99 e1       	ldi	r25, 0x19	; 25
    b38c:	89 9f       	mul	r24, r25
    b38e:	e0 0d       	add	r30, r0
    b390:	f1 1d       	adc	r31, r1
    b392:	11 24       	eor	r1, r1
    b394:	ef 54       	subi	r30, 0x4F	; 79
    b396:	ff 49       	sbci	r31, 0x9F	; 159
    b398:	84 91       	lpm	r24, Z
}
    b39a:	08 95       	ret

0000b39c <render_camera_view>:

void render_camera_view()
{
    b39c:	7f 92       	push	r7
    b39e:	8f 92       	push	r8
    b3a0:	9f 92       	push	r9
    b3a2:	af 92       	push	r10
    b3a4:	bf 92       	push	r11
    b3a6:	cf 92       	push	r12
    b3a8:	df 92       	push	r13
    b3aa:	ef 92       	push	r14
    b3ac:	ff 92       	push	r15
    b3ae:	0f 93       	push	r16
    b3b0:	1f 93       	push	r17
    b3b2:	cf 93       	push	r28
    b3b4:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b3b6:	c0 91 b2 0d 	lds	r28, 0x0DB2
    b3ba:	d0 91 b3 0d 	lds	r29, 0x0DB3
    b3be:	83 e0       	ldi	r24, 0x03	; 3
    b3c0:	d6 95       	lsr	r29
    b3c2:	c7 95       	ror	r28
    b3c4:	8a 95       	dec	r24
    b3c6:	e1 f7       	brne	.-8      	; 0xb3c0 <render_camera_view+0x24>
    b3c8:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b3ca:	00 91 ba 0d 	lds	r16, 0x0DBA
    b3ce:	06 95       	lsr	r16
    b3d0:	06 95       	lsr	r16
    b3d2:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b3d4:	dd 27       	eor	r29, r29
    b3d6:	7e 01       	movw	r14, r28
    b3d8:	4c e1       	ldi	r20, 0x1C	; 28
    b3da:	e4 0e       	add	r14, r20
    b3dc:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b3de:	10 e0       	ldi	r17, 0x00	; 0
    b3e0:	68 01       	movw	r12, r16
    b3e2:	89 e1       	ldi	r24, 0x19	; 25
    b3e4:	c8 0e       	add	r12, r24
    b3e6:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b3e8:	9e e1       	ldi	r25, 0x1E	; 30
    b3ea:	a9 2e       	mov	r10, r25
    b3ec:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b3ee:	ec 16       	cp	r14, r28
    b3f0:	fd 06       	cpc	r15, r29
    b3f2:	70 f1       	brcs	.+92     	; 0xb450 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b3f4:	48 01       	movw	r8, r16
    b3f6:	c8 14       	cp	r12, r8
    b3f8:	d9 04       	cpc	r13, r9
    b3fa:	40 f1       	brcs	.+80     	; 0xb44c <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b3fc:	48 2d       	mov	r20, r8
    b3fe:	6c 2f       	mov	r22, r28
    b400:	80 91 cf 0f 	lds	r24, 0x0FCF
    b404:	90 91 d0 0f 	lds	r25, 0x0FD0
    b408:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b40c:	28 2f       	mov	r18, r24
    b40e:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b410:	80 91 b3 0c 	lds	r24, 0x0CB3
    b414:	86 95       	lsr	r24
    b416:	86 95       	lsr	r24
    b418:	86 95       	lsr	r24
    b41a:	90 e0       	ldi	r25, 0x00	; 0
    b41c:	80 1b       	sub	r24, r16
    b41e:	91 0b       	sbc	r25, r17
    b420:	88 0d       	add	r24, r8
    b422:	99 1d       	adc	r25, r9
    b424:	b5 01       	movw	r22, r10
    b426:	0e 94 e5 70 	call	0xe1ca	; 0xe1ca <__udivmodhi4>
    b42a:	90 91 b2 0c 	lds	r25, 0x0CB2
    b42e:	96 95       	lsr	r25
    b430:	96 95       	lsr	r25
    b432:	96 95       	lsr	r25
    b434:	97 19       	sub	r25, r7
    b436:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b438:	a9 01       	movw	r20, r18
    b43a:	68 2f       	mov	r22, r24
    b43c:	89 2f       	mov	r24, r25
    b43e:	8f 71       	andi	r24, 0x1F	; 31
    b440:	0e 94 9d 40 	call	0x813a	; 0x813a <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b444:	8f ef       	ldi	r24, 0xFF	; 255
    b446:	88 1a       	sub	r8, r24
    b448:	98 0a       	sbc	r9, r24
    b44a:	d5 cf       	rjmp	.-86     	; 0xb3f6 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b44c:	21 96       	adiw	r28, 0x01	; 1
    b44e:	cf cf       	rjmp	.-98     	; 0xb3ee <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b450:	df 91       	pop	r29
    b452:	cf 91       	pop	r28
    b454:	1f 91       	pop	r17
    b456:	0f 91       	pop	r16
    b458:	ff 90       	pop	r15
    b45a:	ef 90       	pop	r14
    b45c:	df 90       	pop	r13
    b45e:	cf 90       	pop	r12
    b460:	bf 90       	pop	r11
    b462:	af 90       	pop	r10
    b464:	9f 90       	pop	r9
    b466:	8f 90       	pop	r8
    b468:	7f 90       	pop	r7
    b46a:	08 95       	ret

0000b46c <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b46c:	28 2f       	mov	r18, r24
    b46e:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b470:	80 91 c7 0d 	lds	r24, 0x0DC7
    b474:	81 11       	cpse	r24, r1
    b476:	04 c0       	rjmp	.+8      	; 0xb480 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b478:	bf 01       	movw	r22, r30
    b47a:	82 2f       	mov	r24, r18
    b47c:	0c 94 37 58 	jmp	0xb06e	; 0xb06e <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b480:	82 30       	cpi	r24, 0x02	; 2
    b482:	21 f4       	brne	.+8      	; 0xb48c <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b484:	bf 01       	movw	r22, r30
    b486:	82 2f       	mov	r24, r18
    b488:	0c 94 f6 57 	jmp	0xafec	; 0xafec <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b48c:	84 30       	cpi	r24, 0x04	; 4
    b48e:	31 f4       	brne	.+12     	; 0xb49c <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b490:	48 52       	subi	r20, 0x28	; 40
    b492:	51 09       	sbc	r21, r1
    b494:	bf 01       	movw	r22, r30
    b496:	82 2f       	mov	r24, r18
    b498:	0c 94 71 58 	jmp	0xb0e2	; 0xb0e2 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b49c:	80 91 cc 0d 	lds	r24, 0x0DCC
    b4a0:	63 e0       	ldi	r22, 0x03	; 3
    b4a2:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    b4a6:	99 23       	and	r25, r25
    b4a8:	39 f3       	breq	.-50     	; 0xb478 <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b4aa:	91 30       	cpi	r25, 0x01	; 1
    b4ac:	89 f7       	brne	.-30     	; 0xb490 <init_level_enemy+0x24>
    b4ae:	ea cf       	rjmp	.-44     	; 0xb484 <init_level_enemy+0x18>

0000b4b0 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b4b0:	28 2f       	mov	r18, r24
    b4b2:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b4b4:	80 91 c7 0d 	lds	r24, 0x0DC7
    b4b8:	81 30       	cpi	r24, 0x01	; 1
    b4ba:	21 f4       	brne	.+8      	; 0xb4c4 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b4bc:	bf 01       	movw	r22, r30
    b4be:	82 2f       	mov	r24, r18
    b4c0:	0c 94 ac 58 	jmp	0xb158	; 0xb158 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b4c4:	83 30       	cpi	r24, 0x03	; 3
    b4c6:	21 f4       	brne	.+8      	; 0xb4d0 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b4c8:	bf 01       	movw	r22, r30
    b4ca:	82 2f       	mov	r24, r18
    b4cc:	0c 94 e4 58 	jmp	0xb1c8	; 0xb1c8 <init_enemy_globe>
	}
	else if (game.frame_counter % 3 == 0)
    b4d0:	80 91 cc 0d 	lds	r24, 0x0DCC
    b4d4:	63 e0       	ldi	r22, 0x03	; 3
    b4d6:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    b4da:	91 11       	cpse	r25, r1
    b4dc:	f5 cf       	rjmp	.-22     	; 0xb4c8 <init_space_enemy+0x18>
    b4de:	ee cf       	rjmp	.-36     	; 0xb4bc <init_space_enemy+0xc>

0000b4e0 <spawn_enemy>:
		init_enemy_globe(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b4e0:	0f 93       	push	r16
    b4e2:	1f 93       	push	r17
    b4e4:	cf 93       	push	r28
    b4e6:	df 93       	push	r29
    b4e8:	00 d0       	rcall	.+0      	; 0xb4ea <spawn_enemy+0xa>
    b4ea:	00 d0       	rcall	.+0      	; 0xb4ec <spawn_enemy+0xc>
    b4ec:	cd b7       	in	r28, 0x3d	; 61
    b4ee:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b4f0:	20 91 b2 0d 	lds	r18, 0x0DB2
    b4f4:	30 91 b3 0d 	lds	r19, 0x0DB3
    b4f8:	28 3c       	cpi	r18, 0xC8	; 200
    b4fa:	35 40       	sbci	r19, 0x05	; 5
    b4fc:	98 f5       	brcc	.+102    	; 0xb564 <spawn_enemy+0x84>
    b4fe:	22 eb       	ldi	r18, 0xB2	; 178
    b500:	3d e0       	ldi	r19, 0x0D	; 13
    b502:	10 e0       	ldi	r17, 0x00	; 0
    b504:	f9 01       	movw	r30, r18
    b506:	e5 5e       	subi	r30, 0xE5	; 229
    b508:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b50a:	50 81       	ld	r21, Z
    b50c:	51 11       	cpse	r21, r1
    b50e:	25 c0       	rjmp	.+74     	; 0xb55a <spawn_enemy+0x7a>
    b510:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b512:	50 81       	ld	r21, Z
    b514:	51 11       	cpse	r21, r1
    b516:	21 c0       	rjmp	.+66     	; 0xb55a <spawn_enemy+0x7a>
    b518:	04 2f       	mov	r16, r20
    b51a:	ab 01       	movw	r20, r22
    b51c:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b51e:	4b 83       	std	Y+3, r20	; 0x03
    b520:	5c 83       	std	Y+4, r21	; 0x04
    b522:	89 83       	std	Y+1, r24	; 0x01
    b524:	7a 83       	std	Y+2, r23	; 0x02
    b526:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    b52a:	4b 81       	ldd	r20, Y+3	; 0x03
    b52c:	5c 81       	ldd	r21, Y+4	; 0x04
    b52e:	69 81       	ldd	r22, Y+1	; 0x01
    b530:	7a 81       	ldd	r23, Y+2	; 0x02
    b532:	88 23       	and	r24, r24
    b534:	21 f0       	breq	.+8      	; 0xb53e <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b536:	81 2f       	mov	r24, r17
    b538:	0e 94 58 5a 	call	0xb4b0	; 0xb4b0 <init_space_enemy>
    b53c:	08 c0       	rjmp	.+16     	; 0xb54e <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b53e:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b540:	01 11       	cpse	r16, r1
    b542:	03 c0       	rjmp	.+6      	; 0xb54a <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b544:	0e 94 36 5a 	call	0xb46c	; 0xb46c <init_level_enemy>
    b548:	02 c0       	rjmp	.+4      	; 0xb54e <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b54a:	0e 94 1d 59 	call	0xb23a	; 0xb23a <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b54e:	80 91 cd 0d 	lds	r24, 0x0DCD
    b552:	8f 5f       	subi	r24, 0xFF	; 255
    b554:	80 93 cd 0d 	sts	0x0DCD, r24
    b558:	05 c0       	rjmp	.+10     	; 0xb564 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b55a:	1f 5f       	subi	r17, 0xFF	; 255
    b55c:	2b 5c       	subi	r18, 0xCB	; 203
    b55e:	3f 4f       	sbci	r19, 0xFF	; 255
    b560:	15 30       	cpi	r17, 0x05	; 5
    b562:	81 f6       	brne	.-96     	; 0xb504 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b564:	0f 90       	pop	r0
    b566:	0f 90       	pop	r0
    b568:	0f 90       	pop	r0
    b56a:	0f 90       	pop	r0
    b56c:	df 91       	pop	r29
    b56e:	cf 91       	pop	r28
    b570:	1f 91       	pop	r17
    b572:	0f 91       	pop	r16
    b574:	08 95       	ret

0000b576 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    b576:	9f ef       	ldi	r25, 0xFF	; 255
    b578:	98 0f       	add	r25, r24
    b57a:	91 31       	cpi	r25, 0x11	; 17
    b57c:	28 f0       	brcs	.+10     	; 0xb588 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 18 && level_tile <= 27)
    b57e:	82 51       	subi	r24, 0x12	; 18
    b580:	8a 30       	cpi	r24, 0x0A	; 10
    b582:	20 f0       	brcs	.+8      	; 0xb58c <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b584:	80 e0       	ldi	r24, 0x00	; 0
    b586:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
	{
		return 1;
    b588:	81 e0       	ldi	r24, 0x01	; 1
    b58a:	08 95       	ret
	}
	if (level_tile >= 18 && level_tile <= 27)
	{
		return 2;
    b58c:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b58e:	08 95       	ret

0000b590 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b590:	af 92       	push	r10
    b592:	bf 92       	push	r11
    b594:	cf 92       	push	r12
    b596:	df 92       	push	r13
    b598:	ef 92       	push	r14
    b59a:	ff 92       	push	r15
    b59c:	0f 93       	push	r16
    b59e:	1f 93       	push	r17
    b5a0:	cf 93       	push	r28
    b5a2:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    b5a4:	68 e1       	ldi	r22, 0x18	; 24
    b5a6:	81 e0       	ldi	r24, 0x01	; 1
    b5a8:	0e 94 4e 51 	call	0xa29c	; 0xa29c <LBRandom>
    b5ac:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b5ae:	80 91 c3 0d 	lds	r24, 0x0DC3
    b5b2:	8f 5f       	subi	r24, 0xFF	; 255
    b5b4:	80 93 c3 0d 	sts	0x0DC3, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b5b8:	20 91 ce 0d 	lds	r18, 0x0DCE
    b5bc:	62 2f       	mov	r22, r18
    b5be:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    b5c2:	89 2f       	mov	r24, r25
    b5c4:	90 e0       	ldi	r25, 0x00	; 0
    b5c6:	30 e0       	ldi	r19, 0x00	; 0
    b5c8:	21 50       	subi	r18, 0x01	; 1
    b5ca:	31 09       	sbc	r19, r1
    b5cc:	82 17       	cp	r24, r18
    b5ce:	93 07       	cpc	r25, r19
    b5d0:	31 f4       	brne	.+12     	; 0xb5de <append_tile_column+0x4e>
    b5d2:	bb 24       	eor	r11, r11
    b5d4:	b3 94       	inc	r11
    b5d6:	80 91 cd 0d 	lds	r24, 0x0DCD
    b5da:	85 30       	cpi	r24, 0x05	; 5
    b5dc:	08 f0       	brcs	.+2      	; 0xb5e0 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b5de:	b1 2c       	mov	r11, r1
    b5e0:	00 e0       	ldi	r16, 0x00	; 0
    b5e2:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b5e4:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
	u8 hazard_tile_index = 0;
    b5e6:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b5e8:	2e e1       	ldi	r18, 0x1E	; 30
    b5ea:	c2 2e       	mov	r12, r18
    b5ec:	d1 2c       	mov	r13, r1
    b5ee:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b5f0:	40 91 ba 0d 	lds	r20, 0x0DBA
    b5f4:	46 95       	lsr	r20
    b5f6:	46 95       	lsr	r20
    b5f8:	46 95       	lsr	r20
    b5fa:	40 0f       	add	r20, r16
    b5fc:	60 91 bb 0d 	lds	r22, 0x0DBB
    b600:	80 91 cf 0f 	lds	r24, 0x0FCF
    b604:	90 91 d0 0f 	lds	r25, 0x0FD0
    b608:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    b60c:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b60e:	28 2f       	mov	r18, r24
    b610:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b612:	80 91 b3 0c 	lds	r24, 0x0CB3
    b616:	86 95       	lsr	r24
    b618:	86 95       	lsr	r24
    b61a:	86 95       	lsr	r24
    b61c:	a8 01       	movw	r20, r16
    b61e:	48 0f       	add	r20, r24
    b620:	51 1d       	adc	r21, r1
    b622:	ca 01       	movw	r24, r20
    b624:	b6 01       	movw	r22, r12
    b626:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b62a:	a9 01       	movw	r20, r18
    b62c:	68 2f       	mov	r22, r24
    b62e:	80 91 bf 0d 	lds	r24, 0x0DBF
    b632:	0e 94 9d 40 	call	0x813a	; 0x813a <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b636:	bb 20       	and	r11, r11
    b638:	81 f0       	breq	.+32     	; 0xb65a <append_tile_column+0xca>
    b63a:	01 15       	cp	r16, r1
    b63c:	11 05       	cpc	r17, r1
    b63e:	69 f0       	breq	.+26     	; 0xb65a <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 18 && level_tile <= 22)
    b640:	8e ee       	ldi	r24, 0xEE	; 238
    b642:	8e 0d       	add	r24, r14
    b644:	85 30       	cpi	r24, 0x05	; 5
    b646:	30 f0       	brcs	.+12     	; 0xb654 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 17)
    b648:	8f ef       	ldi	r24, 0xFF	; 255
    b64a:	8e 0d       	add	r24, r14
    b64c:	81 31       	cpi	r24, 0x11	; 17
    b64e:	08 f4       	brcc	.+2      	; 0xb652 <append_tile_column+0xc2>
    b650:	60 c0       	rjmp	.+192    	; 0xb712 <append_tile_column+0x182>
    b652:	03 c0       	rjmp	.+6      	; 0xb65a <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b654:	c1 11       	cpse	r28, r1
    b656:	f8 cf       	rjmp	.-16     	; 0xb648 <append_tile_column+0xb8>
    b658:	c0 2f       	mov	r28, r16
    b65a:	0f 5f       	subi	r16, 0xFF	; 255
    b65c:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b65e:	09 31       	cpi	r16, 0x19	; 25
    b660:	11 05       	cpc	r17, r1
    b662:	29 f6       	brne	.-118    	; 0xb5ee <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b664:	bb 20       	and	r11, r11
    b666:	51 f0       	breq	.+20     	; 0xb67c <append_tile_column+0xec>
    b668:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    b66c:	88 23       	and	r24, r24
    b66e:	31 f0       	breq	.+12     	; 0xb67c <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(1, CAMERA_HEIGHT-1)*8;
    b670:	ff 0c       	add	r15, r15
    b672:	ff 0c       	add	r15, r15
    b674:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b676:	6f 2d       	mov	r22, r15
    b678:	70 e0       	ldi	r23, 0x00	; 0
    b67a:	32 c0       	rjmp	.+100    	; 0xb6e0 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b67c:	cc 23       	and	r28, r28
    b67e:	f1 f0       	breq	.+60     	; 0xb6bc <append_tile_column+0x12c>
    b680:	80 91 c7 0d 	lds	r24, 0x0DC7
    b684:	90 91 ba 0d 	lds	r25, 0x0DBA
    b688:	20 91 b2 0d 	lds	r18, 0x0DB2
    b68c:	30 91 b3 0d 	lds	r19, 0x0DB3
    b690:	6c 2f       	mov	r22, r28
    b692:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b694:	96 95       	lsr	r25
    b696:	96 95       	lsr	r25
    b698:	96 95       	lsr	r25
    b69a:	69 0f       	add	r22, r25
    b69c:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b69e:	82 30       	cpi	r24, 0x02	; 2
    b6a0:	19 f4       	brne	.+6      	; 0xb6a8 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b6a2:	61 50       	subi	r22, 0x01	; 1
    b6a4:	71 09       	sbc	r23, r1
    b6a6:	02 c0       	rjmp	.+4      	; 0xb6ac <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b6a8:	6f 5f       	subi	r22, 0xFF	; 255
    b6aa:	7f 4f       	sbci	r23, 0xFF	; 255
    b6ac:	93 e0       	ldi	r25, 0x03	; 3
    b6ae:	66 0f       	add	r22, r22
    b6b0:	77 1f       	adc	r23, r23
    b6b2:	9a 95       	dec	r25
    b6b4:	e1 f7       	brne	.-8      	; 0xb6ae <append_tile_column+0x11e>
    b6b6:	41 e0       	ldi	r20, 0x01	; 1
    b6b8:	c9 01       	movw	r24, r18
    b6ba:	17 c0       	rjmp	.+46     	; 0xb6ea <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b6bc:	dd 23       	and	r29, r29
    b6be:	c9 f0       	breq	.+50     	; 0xb6f2 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b6c0:	80 91 ba 0d 	lds	r24, 0x0DBA
    b6c4:	86 95       	lsr	r24
    b6c6:	86 95       	lsr	r24
    b6c8:	86 95       	lsr	r24
    b6ca:	6d 2f       	mov	r22, r29
    b6cc:	70 e0       	ldi	r23, 0x00	; 0
    b6ce:	68 0f       	add	r22, r24
    b6d0:	71 1d       	adc	r23, r1
    b6d2:	61 50       	subi	r22, 0x01	; 1
    b6d4:	71 09       	sbc	r23, r1
    b6d6:	83 e0       	ldi	r24, 0x03	; 3
    b6d8:	66 0f       	add	r22, r22
    b6da:	77 1f       	adc	r23, r23
    b6dc:	8a 95       	dec	r24
    b6de:	e1 f7       	brne	.-8      	; 0xb6d8 <append_tile_column+0x148>
    b6e0:	80 91 b2 0d 	lds	r24, 0x0DB2
    b6e4:	90 91 b3 0d 	lds	r25, 0x0DB3
    b6e8:	40 e0       	ldi	r20, 0x00	; 0
    b6ea:	80 52       	subi	r24, 0x20	; 32
    b6ec:	9f 4f       	sbci	r25, 0xFF	; 255
    b6ee:	0e 94 70 5a 	call	0xb4e0	; 0xb4e0 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b6f2:	80 91 bb 0d 	lds	r24, 0x0DBB
    b6f6:	8f 5f       	subi	r24, 0xFF	; 255
    b6f8:	80 93 bb 0d 	sts	0x0DBB, r24
	game.scroll_dest_x++;
    b6fc:	80 91 bf 0d 	lds	r24, 0x0DBF
    b700:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b702:	80 32       	cpi	r24, 0x20	; 32
    b704:	18 f4       	brcc	.+6      	; 0xb70c <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b706:	80 93 bf 0d 	sts	0x0DBF, r24
    b70a:	07 c0       	rjmp	.+14     	; 0xb71a <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b70c:	10 92 bf 0d 	sts	0x0DBF, r1
    b710:	04 c0       	rjmp	.+8      	; 0xb71a <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b712:	d1 11       	cpse	r29, r1
    b714:	a2 cf       	rjmp	.-188    	; 0xb65a <append_tile_column+0xca>
    b716:	da 2d       	mov	r29, r10
    b718:	a0 cf       	rjmp	.-192    	; 0xb65a <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b71a:	df 91       	pop	r29
    b71c:	cf 91       	pop	r28
    b71e:	1f 91       	pop	r17
    b720:	0f 91       	pop	r16
    b722:	ff 90       	pop	r15
    b724:	ef 90       	pop	r14
    b726:	df 90       	pop	r13
    b728:	cf 90       	pop	r12
    b72a:	bf 90       	pop	r11
    b72c:	af 90       	pop	r10
    b72e:	08 95       	ret

0000b730 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b730:	80 91 b2 0d 	lds	r24, 0x0DB2
    b734:	90 91 b3 0d 	lds	r25, 0x0DB3
    b738:	01 96       	adiw	r24, 0x01	; 1
    b73a:	90 93 b3 0d 	sts	0x0DB3, r25
    b73e:	80 93 b2 0d 	sts	0x0DB2, r24
	Scroll(1,0);
    b742:	60 e0       	ldi	r22, 0x00	; 0
    b744:	81 e0       	ldi	r24, 0x01	; 1
    b746:	0e 94 a8 4e 	call	0x9d50	; 0x9d50 <Scroll>
	if (++game.scroll_x == 8)
    b74a:	80 91 bd 0d 	lds	r24, 0x0DBD
    b74e:	8f 5f       	subi	r24, 0xFF	; 255
    b750:	88 30       	cpi	r24, 0x08	; 8
    b752:	19 f0       	breq	.+6      	; 0xb75a <move_camera_x+0x2a>
    b754:	80 93 bd 0d 	sts	0x0DBD, r24
    b758:	08 95       	ret
	{
		game.scroll_x = 0;
    b75a:	10 92 bd 0d 	sts	0x0DBD, r1
		append_tile_column();
    b75e:	0c 94 c8 5a 	jmp	0xb590	; 0xb590 <append_tile_column>

0000b762 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b762:	82 e0       	ldi	r24, 0x02	; 2
    b764:	80 93 25 0e 	sts	0x0E25, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b768:	85 e0       	ldi	r24, 0x05	; 5
    b76a:	80 93 26 0e 	sts	0x0E26, r24
	game.player.run.anims = run_anim;
    b76e:	ef e2       	ldi	r30, 0x2F	; 47
    b770:	f0 e1       	ldi	r31, 0x10	; 16
    b772:	f0 93 2b 0e 	sts	0x0E2B, r31
    b776:	e0 93 2a 0e 	sts	0x0E2A, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b77a:	85 ee       	ldi	r24, 0xE5	; 229
    b77c:	96 e3       	ldi	r25, 0x36	; 54
    b77e:	91 83       	std	Z+1, r25	; 0x01
    b780:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b782:	8b ed       	ldi	r24, 0xDB	; 219
    b784:	96 e3       	ldi	r25, 0x36	; 54
    b786:	93 83       	std	Z+3, r25	; 0x03
    b788:	82 83       	std	Z+2, r24	; 0x02
    b78a:	08 95       	ret

0000b78c <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b78c:	a2 eb       	ldi	r26, 0xB2	; 178
    b78e:	bd e0       	ldi	r27, 0x0D	; 13
    b790:	90 93 d0 0f 	sts	0x0FD0, r25
    b794:	80 93 cf 0f 	sts	0x0FCF, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b798:	fc 01       	movw	r30, r24
    b79a:	24 91       	lpm	r18, Z
    b79c:	56 96       	adiw	r26, 0x16	; 22
    b79e:	2c 93       	st	X, r18
    b7a0:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b7a2:	9c 01       	movw	r18, r24
    b7a4:	2f 5f       	subi	r18, 0xFF	; 255
    b7a6:	3f 4f       	sbci	r19, 0xFF	; 255
    b7a8:	f9 01       	movw	r30, r18
    b7aa:	44 91       	lpm	r20, Z
    b7ac:	57 96       	adiw	r26, 0x17	; 23
    b7ae:	4c 93       	st	X, r20
    b7b0:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b7b2:	fc 01       	movw	r30, r24
    b7b4:	84 91       	lpm	r24, Z
    b7b6:	98 2f       	mov	r25, r24
    b7b8:	99 0f       	add	r25, r25
    b7ba:	99 0f       	add	r25, r25
    b7bc:	89 0f       	add	r24, r25
    b7be:	1f 96       	adiw	r26, 0x0f	; 15
    b7c0:	8c 93       	st	X, r24
    b7c2:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b7c4:	f9 01       	movw	r30, r18
    b7c6:	24 91       	lpm	r18, Z
    b7c8:	82 2f       	mov	r24, r18
    b7ca:	88 0f       	add	r24, r24
    b7cc:	88 0f       	add	r24, r24
    b7ce:	28 0f       	add	r18, r24
    b7d0:	50 96       	adiw	r26, 0x10	; 16
    b7d2:	2c 93       	st	X, r18
    b7d4:	08 95       	ret

0000b7d6 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b7d6:	cf 92       	push	r12
    b7d8:	df 92       	push	r13
    b7da:	ef 92       	push	r14
    b7dc:	ff 92       	push	r15
    b7de:	0f 93       	push	r16
    b7e0:	1f 93       	push	r17
    b7e2:	cf 93       	push	r28
    b7e4:	df 93       	push	r29
    b7e6:	7c 01       	movw	r14, r24
    b7e8:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b7ea:	88 e0       	ldi	r24, 0x08	; 8
    b7ec:	48 9f       	mul	r20, r24
    b7ee:	80 01       	movw	r16, r0
    b7f0:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b7f2:	c0 e0       	ldi	r28, 0x00	; 0
    b7f4:	cd 17       	cp	r28, r29
    b7f6:	09 f4       	brne	.+2      	; 0xb7fa <on_solid_ground+0x24>
    b7f8:	41 c0       	rjmp	.+130    	; 0xb87c <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b7fa:	f7 01       	movw	r30, r14
    b7fc:	42 81       	ldd	r20, Z+2	; 0x02
    b7fe:	53 81       	ldd	r21, Z+3	; 0x03
    b800:	40 0f       	add	r20, r16
    b802:	51 1f       	adc	r21, r17
    b804:	83 e0       	ldi	r24, 0x03	; 3
    b806:	56 95       	lsr	r21
    b808:	47 95       	ror	r20
    b80a:	8a 95       	dec	r24
    b80c:	e1 f7       	brne	.-8      	; 0xb806 <on_solid_ground+0x30>
    b80e:	60 81       	ld	r22, Z
    b810:	71 81       	ldd	r23, Z+1	; 0x01
    b812:	93 e0       	ldi	r25, 0x03	; 3
    b814:	76 95       	lsr	r23
    b816:	67 95       	ror	r22
    b818:	9a 95       	dec	r25
    b81a:	e1 f7       	brne	.-8      	; 0xb814 <on_solid_ground+0x3e>
    b81c:	6c 0f       	add	r22, r28
    b81e:	80 91 cf 0f 	lds	r24, 0x0FCF
    b822:	90 91 d0 0f 	lds	r25, 0x0FD0
    b826:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    b82a:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b82c:	f7 01       	movw	r30, r14
    b82e:	42 81       	ldd	r20, Z+2	; 0x02
    b830:	53 81       	ldd	r21, Z+3	; 0x03
    b832:	40 0f       	add	r20, r16
    b834:	51 1f       	adc	r21, r17
    b836:	23 e0       	ldi	r18, 0x03	; 3
    b838:	56 95       	lsr	r21
    b83a:	47 95       	ror	r20
    b83c:	2a 95       	dec	r18
    b83e:	e1 f7       	brne	.-8      	; 0xb838 <on_solid_ground+0x62>
    b840:	20 81       	ld	r18, Z
    b842:	31 81       	ldd	r19, Z+1	; 0x01
    b844:	29 5f       	subi	r18, 0xF9	; 249
    b846:	3f 4f       	sbci	r19, 0xFF	; 255
    b848:	53 e0       	ldi	r21, 0x03	; 3
    b84a:	36 95       	lsr	r19
    b84c:	27 95       	ror	r18
    b84e:	5a 95       	dec	r21
    b850:	e1 f7       	brne	.-8      	; 0xb84a <on_solid_ground+0x74>
    b852:	6c 2f       	mov	r22, r28
    b854:	62 0f       	add	r22, r18
    b856:	80 91 cf 0f 	lds	r24, 0x0FCF
    b85a:	90 91 d0 0f 	lds	r25, 0x0FD0
    b85e:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    b862:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b864:	8c 2d       	mov	r24, r12
    b866:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    b86a:	81 11       	cpse	r24, r1
    b86c:	09 c0       	rjmp	.+18     	; 0xb880 <on_solid_ground+0xaa>
    b86e:	8d 2d       	mov	r24, r13
    b870:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    b874:	81 11       	cpse	r24, r1
    b876:	04 c0       	rjmp	.+8      	; 0xb880 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b878:	cf 5f       	subi	r28, 0xFF	; 255
    b87a:	bc cf       	rjmp	.-136    	; 0xb7f4 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b87c:	80 e0       	ldi	r24, 0x00	; 0
    b87e:	01 c0       	rjmp	.+2      	; 0xb882 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b880:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b882:	df 91       	pop	r29
    b884:	cf 91       	pop	r28
    b886:	1f 91       	pop	r17
    b888:	0f 91       	pop	r16
    b88a:	ff 90       	pop	r15
    b88c:	ef 90       	pop	r14
    b88e:	df 90       	pop	r13
    b890:	cf 90       	pop	r12
    b892:	08 95       	ret

0000b894 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b894:	9c 01       	movw	r18, r24
    b896:	80 91 f5 0c 	lds	r24, 0x0CF5
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b89a:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b89c:	83 30       	cpi	r24, 0x03	; 3
    b89e:	08 f0       	brcs	.+2      	; 0xb8a2 <find_shot_slot+0xe>
    b8a0:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b8a2:	f9 01       	movw	r30, r18
    b8a4:	48 9f       	mul	r20, r24
    b8a6:	e0 0d       	add	r30, r0
    b8a8:	f1 1d       	adc	r31, r1
    b8aa:	11 24       	eor	r1, r1
    b8ac:	51 8d       	ldd	r21, Z+25	; 0x19
    b8ae:	91 e0       	ldi	r25, 0x01	; 1
    b8b0:	98 0f       	add	r25, r24
    b8b2:	51 11       	cpse	r21, r1
    b8b4:	03 c0       	rjmp	.+6      	; 0xb8bc <find_shot_slot+0x28>
		{
			return i++;
    b8b6:	90 93 f5 0c 	sts	0x0CF5, r25
    b8ba:	08 95       	ret
		}
		i++;
    b8bc:	89 2f       	mov	r24, r25
	}
    b8be:	ee cf       	rjmp	.-36     	; 0xb89c <find_shot_slot+0x8>

0000b8c0 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b8c0:	bf 92       	push	r11
    b8c2:	cf 92       	push	r12
    b8c4:	df 92       	push	r13
    b8c6:	ef 92       	push	r14
    b8c8:	ff 92       	push	r15
    b8ca:	0f 93       	push	r16
    b8cc:	1f 93       	push	r17
    b8ce:	cf 93       	push	r28
    b8d0:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_A && player->active_shots < MAX_PLAYER_SHOTS)
    b8d2:	fc 01       	movw	r30, r24
    b8d4:	ec 58       	subi	r30, 0x8C	; 140
    b8d6:	ff 4f       	sbci	r31, 0xFF	; 255
    b8d8:	20 81       	ld	r18, Z
    b8da:	31 81       	ldd	r19, Z+1	; 0x01
    b8dc:	30 ff       	sbrs	r19, 0
    b8de:	90 c0       	rjmp	.+288    	; 0xba00 <update_shot+0x140>
    b8e0:	fc 01       	movw	r30, r24
    b8e2:	27 81       	ldd	r18, Z+7	; 0x07
    b8e4:	23 30       	cpi	r18, 0x03	; 3
    b8e6:	08 f0       	brcs	.+2      	; 0xb8ea <update_shot+0x2a>
    b8e8:	8b c0       	rjmp	.+278    	; 0xba00 <update_shot+0x140>
    b8ea:	16 2f       	mov	r17, r22
    b8ec:	ec 01       	movw	r28, r24
	{
		SFX_PLAYER_SHOOT;
    b8ee:	2f ef       	ldi	r18, 0xFF	; 255
    b8f0:	43 e2       	ldi	r20, 0x23	; 35
    b8f2:	63 e0       	ldi	r22, 0x03	; 3
    b8f4:	82 e0       	ldi	r24, 0x02	; 2
    b8f6:	0e 94 ba 44 	call	0x8974	; 0x8974 <TriggerNote>
		idx = find_shot_slot(player);
    b8fa:	ce 01       	movw	r24, r28
    b8fc:	0e 94 4a 5c 	call	0xb894	; 0xb894 <find_shot_slot>
    b900:	b8 2e       	mov	r11, r24
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b902:	e8 2e       	mov	r14, r24
    b904:	f1 2c       	mov	r15, r1
    b906:	f4 e1       	ldi	r31, 0x14	; 20
    b908:	8f 9f       	mul	r24, r31
    b90a:	60 01       	movw	r12, r0
    b90c:	11 24       	eor	r1, r1
    b90e:	c6 01       	movw	r24, r12
    b910:	4c 96       	adiw	r24, 0x1c	; 28
    b912:	8c 0f       	add	r24, r28
    b914:	9d 1f       	adc	r25, r29
    b916:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    b91a:	40 e0       	ldi	r20, 0x00	; 0
    b91c:	bc 01       	movw	r22, r24
    b91e:	8b 2d       	mov	r24, r11
    b920:	81 0f       	add	r24, r17
    b922:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		player->shot[idx].active = 1;
    b926:	8e 01       	movw	r16, r28
    b928:	0c 0d       	add	r16, r12
    b92a:	1d 1d       	adc	r17, r13
    b92c:	81 e0       	ldi	r24, 0x01	; 1
    b92e:	f8 01       	movw	r30, r16
    b930:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b932:	ca 80       	ldd	r12, Y+2	; 0x02
    b934:	db 80       	ldd	r13, Y+3	; 0x03
    b936:	f8 ef       	ldi	r31, 0xF8	; 248
    b938:	cf 22       	and	r12, r31
    b93a:	f8 01       	movw	r30, r16
    b93c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b93e:	c8 0e       	add	r12, r24
    b940:	d1 1c       	adc	r13, r1
    b942:	87 fd       	sbrc	r24, 7
    b944:	da 94       	dec	r13
    b946:	d3 8a       	std	Z+19, r13	; 0x13
    b948:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b94a:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    b94e:	28 81       	ld	r18, Y
    b950:	39 81       	ldd	r19, Y+1	; 0x01
    b952:	88 23       	and	r24, r24
    b954:	a1 f0       	breq	.+40     	; 0xb97e <update_shot+0xbe>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b956:	8b 85       	ldd	r24, Y+11	; 0x0b
    b958:	f8 e0       	ldi	r31, 0x08	; 8
    b95a:	8f 9f       	mul	r24, r31
    b95c:	20 0d       	add	r18, r0
    b95e:	31 1d       	adc	r19, r1
    b960:	11 24       	eor	r1, r1
    b962:	f8 01       	movw	r30, r16
    b964:	31 8b       	std	Z+17, r19	; 0x11
    b966:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b968:	82 8d       	ldd	r24, Z+26	; 0x1a
    b96a:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b96c:	87 89       	ldd	r24, Z+23	; 0x17
    b96e:	86 30       	cpi	r24, 0x06	; 6
    b970:	09 f0       	breq	.+2      	; 0xb974 <update_shot+0xb4>
    b972:	43 c0       	rjmp	.+134    	; 0xb9fa <update_shot+0x13a>
    b974:	f8 01       	movw	r30, r16
			{
				player->shot[idx].shared.vy *= -1;
    b976:	84 89       	ldd	r24, Z+20	; 0x14
    b978:	81 95       	neg	r24
    b97a:	84 8b       	std	Z+20, r24	; 0x14
    b97c:	3e c0       	rjmp	.+124    	; 0xb9fa <update_shot+0x13a>
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b97e:	88 85       	ldd	r24, Y+8	; 0x08
    b980:	82 fd       	sbrc	r24, 2
    b982:	06 c0       	rjmp	.+12     	; 0xb990 <update_shot+0xd0>
			{
				player->shot[idx].shared.y += 8;
    b984:	88 e0       	ldi	r24, 0x08	; 8
    b986:	c8 0e       	add	r12, r24
    b988:	d1 1c       	adc	r13, r1
    b98a:	f8 01       	movw	r30, r16
    b98c:	d3 8a       	std	Z+19, r13	; 0x13
    b98e:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b990:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b992:	94 e1       	ldi	r25, 0x14	; 20
    b994:	9e 9d       	mul	r25, r14
    b996:	f0 01       	movw	r30, r0
    b998:	9f 9d       	mul	r25, r15
    b99a:	f0 0d       	add	r31, r0
    b99c:	11 24       	eor	r1, r1
    b99e:	ec 0f       	add	r30, r28
    b9a0:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b9a2:	81 30       	cpi	r24, 0x01	; 1
    b9a4:	a9 f4       	brne	.+42     	; 0xb9d0 <update_shot+0x110>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b9a6:	20 5f       	subi	r18, 0xF0	; 240
    b9a8:	3f 4f       	sbci	r19, 0xFF	; 255
    b9aa:	31 8b       	std	Z+17, r19	; 0x11
    b9ac:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b9ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    b9b0:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b9b2:	27 89       	ldd	r18, Z+23	; 0x17
    b9b4:	24 30       	cpi	r18, 0x04	; 4
    b9b6:	09 f5       	brne	.+66     	; 0xb9fa <update_shot+0x13a>
    b9b8:	ff ef       	ldi	r31, 0xFF	; 255
    b9ba:	ef 1a       	sub	r14, r31
    b9bc:	ff 0a       	sbc	r15, r31
    b9be:	9e 9d       	mul	r25, r14
    b9c0:	f0 01       	movw	r30, r0
    b9c2:	9f 9d       	mul	r25, r15
    b9c4:	f0 0d       	add	r31, r0
    b9c6:	11 24       	eor	r1, r1
    b9c8:	ec 0f       	add	r30, r28
    b9ca:	fd 1f       	adc	r31, r29
    b9cc:	81 95       	neg	r24
    b9ce:	14 c0       	rjmp	.+40     	; 0xb9f8 <update_shot+0x138>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b9d0:	28 50       	subi	r18, 0x08	; 8
    b9d2:	31 09       	sbc	r19, r1
    b9d4:	31 8b       	std	Z+17, r19	; 0x11
    b9d6:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b9d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    b9da:	81 95       	neg	r24
    b9dc:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b9de:	27 89       	ldd	r18, Z+23	; 0x17
    b9e0:	24 30       	cpi	r18, 0x04	; 4
    b9e2:	59 f4       	brne	.+22     	; 0xb9fa <update_shot+0x13a>
    b9e4:	2f ef       	ldi	r18, 0xFF	; 255
    b9e6:	e2 1a       	sub	r14, r18
    b9e8:	f2 0a       	sbc	r15, r18
    b9ea:	9e 9d       	mul	r25, r14
    b9ec:	f0 01       	movw	r30, r0
    b9ee:	9f 9d       	mul	r25, r15
    b9f0:	f0 0d       	add	r31, r0
    b9f2:	11 24       	eor	r1, r1
    b9f4:	ec 0f       	add	r30, r28
    b9f6:	fd 1f       	adc	r31, r29
    b9f8:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b9fa:	8f 81       	ldd	r24, Y+7	; 0x07
    b9fc:	8f 5f       	subi	r24, 0xFF	; 255
    b9fe:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    ba00:	df 91       	pop	r29
    ba02:	cf 91       	pop	r28
    ba04:	1f 91       	pop	r17
    ba06:	0f 91       	pop	r16
    ba08:	ff 90       	pop	r15
    ba0a:	ef 90       	pop	r14
    ba0c:	df 90       	pop	r13
    ba0e:	cf 90       	pop	r12
    ba10:	bf 90       	pop	r11
    ba12:	08 95       	ret

0000ba14 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    ba14:	fc 01       	movw	r30, r24
    ba16:	40 81       	ld	r20, Z
    ba18:	51 81       	ldd	r21, Z+1	; 0x01
    ba1a:	20 91 b2 0d 	lds	r18, 0x0DB2
    ba1e:	30 91 b3 0d 	lds	r19, 0x0DB3
    ba22:	42 17       	cp	r20, r18
    ba24:	53 07       	cpc	r21, r19
    ba26:	f0 f0       	brcs	.+60     	; 0xba64 <out_of_bounds+0x50>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    ba28:	48 5f       	subi	r20, 0xF8	; 248
    ba2a:	5f 4f       	sbci	r21, 0xFF	; 255
    ba2c:	20 52       	subi	r18, 0x20	; 32
    ba2e:	3f 4f       	sbci	r19, 0xFF	; 255
    ba30:	24 17       	cp	r18, r20
    ba32:	35 07       	cpc	r19, r21
    ba34:	b8 f0       	brcs	.+46     	; 0xba64 <out_of_bounds+0x50>
	if (s->y < game.camera_y) return 1;
    ba36:	22 81       	ldd	r18, Z+2	; 0x02
    ba38:	33 81       	ldd	r19, Z+3	; 0x03
    ba3a:	80 91 ba 0d 	lds	r24, 0x0DBA
    ba3e:	90 e0       	ldi	r25, 0x00	; 0
    ba40:	28 17       	cp	r18, r24
    ba42:	39 07       	cpc	r19, r25
    ba44:	78 f0       	brcs	.+30     	; 0xba64 <out_of_bounds+0x50>
	if (s->y < 4) return 1;
    ba46:	24 30       	cpi	r18, 0x04	; 4
    ba48:	31 05       	cpc	r19, r1
    ba4a:	60 f0       	brcs	.+24     	; 0xba64 <out_of_bounds+0x50>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    ba4c:	a9 01       	movw	r20, r18
    ba4e:	48 5f       	subi	r20, 0xF8	; 248
    ba50:	5f 4f       	sbci	r21, 0xFF	; 255
    ba52:	9c 01       	movw	r18, r24
    ba54:	28 53       	subi	r18, 0x38	; 56
    ba56:	3f 4f       	sbci	r19, 0xFF	; 255
    ba58:	81 e0       	ldi	r24, 0x01	; 1
    ba5a:	24 17       	cp	r18, r20
    ba5c:	35 07       	cpc	r19, r21
    ba5e:	18 f0       	brcs	.+6      	; 0xba66 <out_of_bounds+0x52>
    ba60:	80 e0       	ldi	r24, 0x00	; 0
    ba62:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    ba64:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < 4) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    ba66:	08 95       	ret

0000ba68 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    ba68:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    ba6a:	86 17       	cp	r24, r22
    ba6c:	10 f4       	brcc	.+4      	; 0xba72 <pixel_overlap+0xa>
    ba6e:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    ba70:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    ba72:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    ba74:	26 0f       	add	r18, r22
	if (s2 < s1)
    ba76:	28 17       	cp	r18, r24
    ba78:	10 f4       	brcc	.+4      	; 0xba7e <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    ba7a:	28 1b       	sub	r18, r24
    ba7c:	92 0f       	add	r25, r18
	}
	return result;
}
    ba7e:	89 2f       	mov	r24, r25
    ba80:	08 95       	ret

0000ba82 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    ba82:	2f 92       	push	r2
    ba84:	3f 92       	push	r3
    ba86:	4f 92       	push	r4
    ba88:	5f 92       	push	r5
    ba8a:	6f 92       	push	r6
    ba8c:	7f 92       	push	r7
    ba8e:	8f 92       	push	r8
    ba90:	9f 92       	push	r9
    ba92:	af 92       	push	r10
    ba94:	bf 92       	push	r11
    ba96:	cf 92       	push	r12
    ba98:	df 92       	push	r13
    ba9a:	ef 92       	push	r14
    ba9c:	ff 92       	push	r15
    ba9e:	0f 93       	push	r16
    baa0:	1f 93       	push	r17
    baa2:	cf 93       	push	r28
    baa4:	df 93       	push	r29
    baa6:	00 d0       	rcall	.+0      	; 0xbaa8 <collision_detect_level+0x26>
    baa8:	00 d0       	rcall	.+0      	; 0xbaaa <collision_detect_level+0x28>
    baaa:	00 d0       	rcall	.+0      	; 0xbaac <collision_detect_level+0x2a>
    baac:	cd b7       	in	r28, 0x3d	; 61
    baae:	de b7       	in	r29, 0x3e	; 62
    bab0:	9e 83       	std	Y+6, r25	; 0x06
    bab2:	8d 83       	std	Y+5, r24	; 0x05
    bab4:	56 2e       	mov	r5, r22
    bab6:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    bab8:	fc 01       	movw	r30, r24
    baba:	a0 80       	ld	r10, Z
    babc:	b1 80       	ldd	r11, Z+1	; 0x01
    babe:	75 01       	movw	r14, r10
    bac0:	13 e0       	ldi	r17, 0x03	; 3
    bac2:	f6 94       	lsr	r15
    bac4:	e7 94       	ror	r14
    bac6:	1a 95       	dec	r17
    bac8:	e1 f7       	brne	.-8      	; 0xbac2 <collision_detect_level+0x40>
    baca:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    bacc:	c2 80       	ldd	r12, Z+2	; 0x02
    bace:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    bad0:	84 81       	ldd	r24, Z+4	; 0x04
    bad2:	88 23       	and	r24, r24
    bad4:	09 f4       	brne	.+2      	; 0xbad8 <collision_detect_level+0x56>
    bad6:	e1 c0       	rjmp	.+450    	; 0xbc9a <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    bad8:	e3 e0       	ldi	r30, 0x03	; 3
    bada:	d6 94       	lsr	r13
    badc:	c7 94       	ror	r12
    bade:	ea 95       	dec	r30
    bae0:	e1 f7       	brne	.-8      	; 0xbada <collision_detect_level+0x58>
    bae2:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    bae4:	f7 e0       	ldi	r31, 0x07	; 7
    bae6:	af 0e       	add	r10, r31
    bae8:	b1 1c       	adc	r11, r1
    baea:	f3 e0       	ldi	r31, 0x03	; 3
    baec:	b6 94       	lsr	r11
    baee:	a7 94       	ror	r10
    baf0:	fa 95       	dec	r31
    baf2:	e1 f7       	brne	.-8      	; 0xbaec <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    baf4:	8e 2d       	mov	r24, r14
    baf6:	88 0f       	add	r24, r24
    baf8:	88 0f       	add	r24, r24
    bafa:	88 0f       	add	r24, r24
    bafc:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bafe:	2a 2c       	mov	r2, r10
    bb00:	22 0c       	add	r2, r2
    bb02:	22 0c       	add	r2, r2
    bb04:	22 0c       	add	r2, r2
    bb06:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    bb08:	46 01       	movw	r8, r12
    bb0a:	9f ef       	ldi	r25, 0xFF	; 255
    bb0c:	89 1a       	sub	r8, r25
    bb0e:	99 0a       	sbc	r9, r25
    bb10:	a3 e0       	ldi	r26, 0x03	; 3
    bb12:	88 0c       	add	r8, r8
    bb14:	99 1c       	adc	r9, r9
    bb16:	aa 95       	dec	r26
    bb18:	e1 f7       	brne	.-8      	; 0xbb12 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bb1a:	e8 e0       	ldi	r30, 0x08	; 8
    bb1c:	4e 9f       	mul	r20, r30
    bb1e:	30 01       	movw	r6, r0
    bb20:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    bb22:	b3 e0       	ldi	r27, 0x03	; 3
    bb24:	cc 0c       	add	r12, r12
    bb26:	dd 1c       	adc	r13, r13
    bb28:	ba 95       	dec	r27
    bb2a:	e1 f7       	brne	.-8      	; 0xbb24 <collision_detect_level+0xa2>
    bb2c:	41 2c       	mov	r4, r1
    bb2e:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bb30:	45 14       	cp	r4, r5
    bb32:	09 f4       	brne	.+2      	; 0xbb36 <collision_detect_level+0xb4>
    bb34:	b3 c0       	rjmp	.+358    	; 0xbc9c <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    bb36:	ed 81       	ldd	r30, Y+5	; 0x05
    bb38:	fe 81       	ldd	r31, Y+6	; 0x06
    bb3a:	84 81       	ldd	r24, Z+4	; 0x04
    bb3c:	87 ff       	sbrs	r24, 7
    bb3e:	47 c0       	rjmp	.+142    	; 0xbbce <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    bb40:	49 81       	ldd	r20, Y+1	; 0x01
    bb42:	64 2d       	mov	r22, r4
    bb44:	6e 0d       	add	r22, r14
    bb46:	80 91 cf 0f 	lds	r24, 0x0FCF
    bb4a:	90 91 d0 0f 	lds	r25, 0x0FD0
    bb4e:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bb52:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    bb54:	49 81       	ldd	r20, Y+1	; 0x01
    bb56:	64 2d       	mov	r22, r4
    bb58:	6a 0d       	add	r22, r10
    bb5a:	80 91 cf 0f 	lds	r24, 0x0FCF
    bb5e:	90 91 d0 0f 	lds	r25, 0x0FD0
    bb62:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bb66:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bb68:	83 2d       	mov	r24, r3
    bb6a:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    bb6e:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bb70:	80 2f       	mov	r24, r16
    bb72:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    bb76:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb78:	33 20       	and	r3, r3
    bb7a:	71 f0       	breq	.+28     	; 0xbb98 <collision_detect_level+0x116>
    bb7c:	30 91 b2 0d 	lds	r19, 0x0DB2
    bb80:	6b 81       	ldd	r22, Y+3	; 0x03
    bb82:	63 1b       	sub	r22, r19
    bb84:	ed 81       	ldd	r30, Y+5	; 0x05
    bb86:	fe 81       	ldd	r31, Y+6	; 0x06
    bb88:	80 81       	ld	r24, Z
    bb8a:	28 e0       	ldi	r18, 0x08	; 8
    bb8c:	48 e0       	ldi	r20, 0x08	; 8
    bb8e:	83 1b       	sub	r24, r19
    bb90:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    bb94:	84 30       	cpi	r24, 0x04	; 4
    bb96:	80 f4       	brcc	.+32     	; 0xbbb8 <collision_detect_level+0x136>
    bb98:	00 23       	and	r16, r16
    bb9a:	c9 f0       	breq	.+50     	; 0xbbce <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bb9c:	30 91 b2 0d 	lds	r19, 0x0DB2
    bba0:	62 2d       	mov	r22, r2
    bba2:	63 1b       	sub	r22, r19
    bba4:	ed 81       	ldd	r30, Y+5	; 0x05
    bba6:	fe 81       	ldd	r31, Y+6	; 0x06
    bba8:	80 81       	ld	r24, Z
    bbaa:	28 e0       	ldi	r18, 0x08	; 8
    bbac:	48 e0       	ldi	r20, 0x08	; 8
    bbae:	83 1b       	sub	r24, r19
    bbb0:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    bbb4:	84 30       	cpi	r24, 0x04	; 4
    bbb6:	58 f0       	brcs	.+22     	; 0xbbce <collision_detect_level+0x14c>
				{
					s->vy =  0;
    bbb8:	ed 81       	ldd	r30, Y+5	; 0x05
    bbba:	fe 81       	ldd	r31, Y+6	; 0x06
    bbbc:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    bbbe:	93 82       	std	Z+3, r9	; 0x03
    bbc0:	82 82       	std	Z+2, r8	; 0x02
    bbc2:	30 16       	cp	r3, r16
    bbc4:	08 f4       	brcc	.+2      	; 0xbbc8 <collision_detect_level+0x146>
    bbc6:	30 2e       	mov	r3, r16
    bbc8:	13 15       	cp	r17, r3
    bbca:	08 f4       	brcc	.+2      	; 0xbbce <collision_detect_level+0x14c>
    bbcc:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    bbce:	ed 81       	ldd	r30, Y+5	; 0x05
    bbd0:	fe 81       	ldd	r31, Y+6	; 0x06
    bbd2:	84 81       	ldd	r24, Z+4	; 0x04
    bbd4:	18 16       	cp	r1, r24
    bbd6:	0c f0       	brlt	.+2      	; 0xbbda <collision_detect_level+0x158>
    bbd8:	5e c0       	rjmp	.+188    	; 0xbc96 <collision_detect_level+0x214>
    bbda:	42 81       	ldd	r20, Z+2	; 0x02
    bbdc:	53 81       	ldd	r21, Z+3	; 0x03
    bbde:	41 50       	subi	r20, 0x01	; 1
    bbe0:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    bbe2:	46 0d       	add	r20, r6
    bbe4:	57 1d       	adc	r21, r7
    bbe6:	63 e0       	ldi	r22, 0x03	; 3
    bbe8:	56 95       	lsr	r21
    bbea:	47 95       	ror	r20
    bbec:	6a 95       	dec	r22
    bbee:	e1 f7       	brne	.-8      	; 0xbbe8 <collision_detect_level+0x166>
    bbf0:	64 2d       	mov	r22, r4
    bbf2:	6e 0d       	add	r22, r14
    bbf4:	80 91 cf 0f 	lds	r24, 0x0FCF
    bbf8:	90 91 d0 0f 	lds	r25, 0x0FD0
    bbfc:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bc00:	38 2e       	mov	r3, r24
    bc02:	ed 81       	ldd	r30, Y+5	; 0x05
    bc04:	fe 81       	ldd	r31, Y+6	; 0x06
    bc06:	42 81       	ldd	r20, Z+2	; 0x02
    bc08:	53 81       	ldd	r21, Z+3	; 0x03
    bc0a:	41 50       	subi	r20, 0x01	; 1
    bc0c:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    bc0e:	46 0d       	add	r20, r6
    bc10:	57 1d       	adc	r21, r7
    bc12:	73 e0       	ldi	r23, 0x03	; 3
    bc14:	56 95       	lsr	r21
    bc16:	47 95       	ror	r20
    bc18:	7a 95       	dec	r23
    bc1a:	e1 f7       	brne	.-8      	; 0xbc14 <collision_detect_level+0x192>
    bc1c:	64 2d       	mov	r22, r4
    bc1e:	6a 0d       	add	r22, r10
    bc20:	80 91 cf 0f 	lds	r24, 0x0FCF
    bc24:	90 91 d0 0f 	lds	r25, 0x0FD0
    bc28:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bc2c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bc2e:	83 2d       	mov	r24, r3
    bc30:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    bc34:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bc36:	80 2f       	mov	r24, r16
    bc38:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    bc3c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    bc3e:	33 20       	and	r3, r3
    bc40:	71 f0       	breq	.+28     	; 0xbc5e <collision_detect_level+0x1dc>
    bc42:	30 91 b2 0d 	lds	r19, 0x0DB2
    bc46:	6b 81       	ldd	r22, Y+3	; 0x03
    bc48:	63 1b       	sub	r22, r19
    bc4a:	ed 81       	ldd	r30, Y+5	; 0x05
    bc4c:	fe 81       	ldd	r31, Y+6	; 0x06
    bc4e:	80 81       	ld	r24, Z
    bc50:	28 e0       	ldi	r18, 0x08	; 8
    bc52:	48 e0       	ldi	r20, 0x08	; 8
    bc54:	83 1b       	sub	r24, r19
    bc56:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    bc5a:	84 30       	cpi	r24, 0x04	; 4
    bc5c:	80 f4       	brcc	.+32     	; 0xbc7e <collision_detect_level+0x1fc>
    bc5e:	00 23       	and	r16, r16
    bc60:	d1 f0       	breq	.+52     	; 0xbc96 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    bc62:	30 91 b2 0d 	lds	r19, 0x0DB2
    bc66:	62 2d       	mov	r22, r2
    bc68:	63 1b       	sub	r22, r19
    bc6a:	ed 81       	ldd	r30, Y+5	; 0x05
    bc6c:	fe 81       	ldd	r31, Y+6	; 0x06
    bc6e:	80 81       	ld	r24, Z
    bc70:	28 e0       	ldi	r18, 0x08	; 8
    bc72:	48 e0       	ldi	r20, 0x08	; 8
    bc74:	83 1b       	sub	r24, r19
    bc76:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    bc7a:	84 30       	cpi	r24, 0x04	; 4
    bc7c:	60 f0       	brcs	.+24     	; 0xbc96 <collision_detect_level+0x214>
				{
					s->vy =  0;
    bc7e:	ed 81       	ldd	r30, Y+5	; 0x05
    bc80:	fe 81       	ldd	r31, Y+6	; 0x06
    bc82:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    bc84:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    bc86:	d3 82       	std	Z+3, r13	; 0x03
    bc88:	c2 82       	std	Z+2, r12	; 0x02
    bc8a:	30 16       	cp	r3, r16
    bc8c:	08 f4       	brcc	.+2      	; 0xbc90 <collision_detect_level+0x20e>
    bc8e:	30 2e       	mov	r3, r16
    bc90:	13 15       	cp	r17, r3
    bc92:	08 f4       	brcc	.+2      	; 0xbc96 <collision_detect_level+0x214>
    bc94:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    bc96:	43 94       	inc	r4
    bc98:	4b cf       	rjmp	.-362    	; 0xbb30 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    bc9a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    bc9c:	ed 81       	ldd	r30, Y+5	; 0x05
    bc9e:	fe 81       	ldd	r31, Y+6	; 0x06
    bca0:	85 81       	ldd	r24, Z+5	; 0x05
    bca2:	88 23       	and	r24, r24
    bca4:	09 f4       	brne	.+2      	; 0xbca8 <collision_detect_level+0x226>
    bca6:	e1 c0       	rjmp	.+450    	; 0xbe6a <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    bca8:	c2 80       	ldd	r12, Z+2	; 0x02
    bcaa:	d3 80       	ldd	r13, Z+3	; 0x03
    bcac:	56 01       	movw	r10, r12
    bcae:	23 e0       	ldi	r18, 0x03	; 3
    bcb0:	b6 94       	lsr	r11
    bcb2:	a7 94       	ror	r10
    bcb4:	2a 95       	dec	r18
    bcb6:	e1 f7       	brne	.-8      	; 0xbcb0 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    bcb8:	f7 e0       	ldi	r31, 0x07	; 7
    bcba:	cf 0e       	add	r12, r31
    bcbc:	d1 1c       	adc	r13, r1
    bcbe:	33 e0       	ldi	r19, 0x03	; 3
    bcc0:	d6 94       	lsr	r13
    bcc2:	c7 94       	ror	r12
    bcc4:	3a 95       	dec	r19
    bcc6:	e1 f7       	brne	.-8      	; 0xbcc0 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bcc8:	3a 2c       	mov	r3, r10
    bcca:	33 0c       	add	r3, r3
    bccc:	33 0c       	add	r3, r3
    bcce:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bcd0:	4c 2c       	mov	r4, r12
    bcd2:	44 0c       	add	r4, r4
    bcd4:	44 0c       	add	r4, r4
    bcd6:	44 0c       	add	r4, r4
    bcd8:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    bcda:	37 01       	movw	r6, r14
    bcdc:	8f ef       	ldi	r24, 0xFF	; 255
    bcde:	68 1a       	sub	r6, r24
    bce0:	78 0a       	sbc	r7, r24
    bce2:	43 e0       	ldi	r20, 0x03	; 3
    bce4:	66 0c       	add	r6, r6
    bce6:	77 1c       	adc	r7, r7
    bce8:	4a 95       	dec	r20
    bcea:	e1 f7       	brne	.-8      	; 0xbce4 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bcec:	98 e0       	ldi	r25, 0x08	; 8
    bcee:	59 9e       	mul	r5, r25
    bcf0:	40 01       	movw	r8, r0
    bcf2:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    bcf4:	53 e0       	ldi	r21, 0x03	; 3
    bcf6:	ee 0c       	add	r14, r14
    bcf8:	ff 1c       	adc	r15, r15
    bcfa:	5a 95       	dec	r21
    bcfc:	e1 f7       	brne	.-8      	; 0xbcf6 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bcfe:	51 2c       	mov	r5, r1
    bd00:	fc 81       	ldd	r31, Y+4	; 0x04
    bd02:	5f 16       	cp	r5, r31
    bd04:	09 f4       	brne	.+2      	; 0xbd08 <collision_detect_level+0x286>
    bd06:	b1 c0       	rjmp	.+354    	; 0xbe6a <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    bd08:	ed 81       	ldd	r30, Y+5	; 0x05
    bd0a:	fe 81       	ldd	r31, Y+6	; 0x06
    bd0c:	85 81       	ldd	r24, Z+5	; 0x05
    bd0e:	87 ff       	sbrs	r24, 7
    bd10:	47 c0       	rjmp	.+142    	; 0xbda0 <collision_detect_level+0x31e>
    bd12:	45 2d       	mov	r20, r5
    bd14:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    bd16:	6a 81       	ldd	r22, Y+2	; 0x02
    bd18:	80 91 cf 0f 	lds	r24, 0x0FCF
    bd1c:	90 91 d0 0f 	lds	r25, 0x0FD0
    bd20:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bd24:	28 2e       	mov	r2, r24
    bd26:	45 2d       	mov	r20, r5
    bd28:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    bd2a:	6a 81       	ldd	r22, Y+2	; 0x02
    bd2c:	80 91 cf 0f 	lds	r24, 0x0FCF
    bd30:	90 91 d0 0f 	lds	r25, 0x0FD0
    bd34:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bd38:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bd3a:	82 2d       	mov	r24, r2
    bd3c:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    bd40:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bd42:	80 2f       	mov	r24, r16
    bd44:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    bd48:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bd4a:	22 20       	and	r2, r2
    bd4c:	71 f0       	breq	.+28     	; 0xbd6a <collision_detect_level+0x2e8>
    bd4e:	30 91 ba 0d 	lds	r19, 0x0DBA
    bd52:	63 2d       	mov	r22, r3
    bd54:	63 1b       	sub	r22, r19
    bd56:	ed 81       	ldd	r30, Y+5	; 0x05
    bd58:	fe 81       	ldd	r31, Y+6	; 0x06
    bd5a:	82 81       	ldd	r24, Z+2	; 0x02
    bd5c:	28 e0       	ldi	r18, 0x08	; 8
    bd5e:	48 e0       	ldi	r20, 0x08	; 8
    bd60:	83 1b       	sub	r24, r19
    bd62:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    bd66:	84 30       	cpi	r24, 0x04	; 4
    bd68:	80 f4       	brcc	.+32     	; 0xbd8a <collision_detect_level+0x308>
    bd6a:	00 23       	and	r16, r16
    bd6c:	c9 f0       	breq	.+50     	; 0xbda0 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bd6e:	30 91 ba 0d 	lds	r19, 0x0DBA
    bd72:	64 2d       	mov	r22, r4
    bd74:	63 1b       	sub	r22, r19
    bd76:	ed 81       	ldd	r30, Y+5	; 0x05
    bd78:	fe 81       	ldd	r31, Y+6	; 0x06
    bd7a:	82 81       	ldd	r24, Z+2	; 0x02
    bd7c:	28 e0       	ldi	r18, 0x08	; 8
    bd7e:	48 e0       	ldi	r20, 0x08	; 8
    bd80:	83 1b       	sub	r24, r19
    bd82:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    bd86:	84 30       	cpi	r24, 0x04	; 4
    bd88:	58 f0       	brcs	.+22     	; 0xbda0 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    bd8a:	ed 81       	ldd	r30, Y+5	; 0x05
    bd8c:	fe 81       	ldd	r31, Y+6	; 0x06
    bd8e:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    bd90:	71 82       	std	Z+1, r7	; 0x01
    bd92:	60 82       	st	Z, r6
    bd94:	20 16       	cp	r2, r16
    bd96:	08 f4       	brcc	.+2      	; 0xbd9a <collision_detect_level+0x318>
    bd98:	20 2e       	mov	r2, r16
    bd9a:	12 15       	cp	r17, r2
    bd9c:	08 f4       	brcc	.+2      	; 0xbda0 <collision_detect_level+0x31e>
    bd9e:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    bda0:	ed 81       	ldd	r30, Y+5	; 0x05
    bda2:	fe 81       	ldd	r31, Y+6	; 0x06
    bda4:	85 81       	ldd	r24, Z+5	; 0x05
    bda6:	18 16       	cp	r1, r24
    bda8:	0c f0       	brlt	.+2      	; 0xbdac <collision_detect_level+0x32a>
    bdaa:	5d c0       	rjmp	.+186    	; 0xbe66 <collision_detect_level+0x3e4>
    bdac:	60 81       	ld	r22, Z
    bdae:	71 81       	ldd	r23, Z+1	; 0x01
    bdb0:	61 50       	subi	r22, 0x01	; 1
    bdb2:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bdb4:	68 0d       	add	r22, r8
    bdb6:	79 1d       	adc	r23, r9
    bdb8:	83 e0       	ldi	r24, 0x03	; 3
    bdba:	76 95       	lsr	r23
    bdbc:	67 95       	ror	r22
    bdbe:	8a 95       	dec	r24
    bdc0:	e1 f7       	brne	.-8      	; 0xbdba <collision_detect_level+0x338>
    bdc2:	45 2d       	mov	r20, r5
    bdc4:	4a 0d       	add	r20, r10
    bdc6:	80 91 cf 0f 	lds	r24, 0x0FCF
    bdca:	90 91 d0 0f 	lds	r25, 0x0FD0
    bdce:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bdd2:	28 2e       	mov	r2, r24
    bdd4:	ed 81       	ldd	r30, Y+5	; 0x05
    bdd6:	fe 81       	ldd	r31, Y+6	; 0x06
    bdd8:	60 81       	ld	r22, Z
    bdda:	71 81       	ldd	r23, Z+1	; 0x01
    bddc:	61 50       	subi	r22, 0x01	; 1
    bdde:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bde0:	68 0d       	add	r22, r8
    bde2:	79 1d       	adc	r23, r9
    bde4:	93 e0       	ldi	r25, 0x03	; 3
    bde6:	76 95       	lsr	r23
    bde8:	67 95       	ror	r22
    bdea:	9a 95       	dec	r25
    bdec:	e1 f7       	brne	.-8      	; 0xbde6 <collision_detect_level+0x364>
    bdee:	45 2d       	mov	r20, r5
    bdf0:	4c 0d       	add	r20, r12
    bdf2:	80 91 cf 0f 	lds	r24, 0x0FCF
    bdf6:	90 91 d0 0f 	lds	r25, 0x0FD0
    bdfa:	0e 94 a6 59 	call	0xb34c	; 0xb34c <get_level_tile>
    bdfe:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    be00:	82 2d       	mov	r24, r2
    be02:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    be06:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    be08:	80 2f       	mov	r24, r16
    be0a:	0e 94 bb 5a 	call	0xb576	; 0xb576 <solid_or_hazard_tile>
    be0e:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    be10:	22 20       	and	r2, r2
    be12:	71 f0       	breq	.+28     	; 0xbe30 <collision_detect_level+0x3ae>
    be14:	30 91 ba 0d 	lds	r19, 0x0DBA
    be18:	63 2d       	mov	r22, r3
    be1a:	63 1b       	sub	r22, r19
    be1c:	ed 81       	ldd	r30, Y+5	; 0x05
    be1e:	fe 81       	ldd	r31, Y+6	; 0x06
    be20:	82 81       	ldd	r24, Z+2	; 0x02
    be22:	28 e0       	ldi	r18, 0x08	; 8
    be24:	48 e0       	ldi	r20, 0x08	; 8
    be26:	83 1b       	sub	r24, r19
    be28:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    be2c:	84 30       	cpi	r24, 0x04	; 4
    be2e:	80 f4       	brcc	.+32     	; 0xbe50 <collision_detect_level+0x3ce>
    be30:	00 23       	and	r16, r16
    be32:	c9 f0       	breq	.+50     	; 0xbe66 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    be34:	30 91 ba 0d 	lds	r19, 0x0DBA
    be38:	64 2d       	mov	r22, r4
    be3a:	63 1b       	sub	r22, r19
    be3c:	ed 81       	ldd	r30, Y+5	; 0x05
    be3e:	fe 81       	ldd	r31, Y+6	; 0x06
    be40:	82 81       	ldd	r24, Z+2	; 0x02
    be42:	28 e0       	ldi	r18, 0x08	; 8
    be44:	48 e0       	ldi	r20, 0x08	; 8
    be46:	83 1b       	sub	r24, r19
    be48:	0e 94 34 5d 	call	0xba68	; 0xba68 <pixel_overlap>
    be4c:	84 30       	cpi	r24, 0x04	; 4
    be4e:	58 f0       	brcs	.+22     	; 0xbe66 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    be50:	ed 81       	ldd	r30, Y+5	; 0x05
    be52:	fe 81       	ldd	r31, Y+6	; 0x06
    be54:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    be56:	f1 82       	std	Z+1, r15	; 0x01
    be58:	e0 82       	st	Z, r14
    be5a:	20 16       	cp	r2, r16
    be5c:	08 f4       	brcc	.+2      	; 0xbe60 <collision_detect_level+0x3de>
    be5e:	20 2e       	mov	r2, r16
    be60:	12 15       	cp	r17, r2
    be62:	08 f4       	brcc	.+2      	; 0xbe66 <collision_detect_level+0x3e4>
    be64:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    be66:	53 94       	inc	r5
    be68:	4b cf       	rjmp	.-362    	; 0xbd00 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    be6a:	81 2f       	mov	r24, r17
    be6c:	26 96       	adiw	r28, 0x06	; 6
    be6e:	0f b6       	in	r0, 0x3f	; 63
    be70:	f8 94       	cli
    be72:	de bf       	out	0x3e, r29	; 62
    be74:	0f be       	out	0x3f, r0	; 63
    be76:	cd bf       	out	0x3d, r28	; 61
    be78:	df 91       	pop	r29
    be7a:	cf 91       	pop	r28
    be7c:	1f 91       	pop	r17
    be7e:	0f 91       	pop	r16
    be80:	ff 90       	pop	r15
    be82:	ef 90       	pop	r14
    be84:	df 90       	pop	r13
    be86:	cf 90       	pop	r12
    be88:	bf 90       	pop	r11
    be8a:	af 90       	pop	r10
    be8c:	9f 90       	pop	r9
    be8e:	8f 90       	pop	r8
    be90:	7f 90       	pop	r7
    be92:	6f 90       	pop	r6
    be94:	5f 90       	pop	r5
    be96:	4f 90       	pop	r4
    be98:	3f 90       	pop	r3
    be9a:	2f 90       	pop	r2
    be9c:	08 95       	ret

0000be9e <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    be9e:	2f 92       	push	r2
    bea0:	3f 92       	push	r3
    bea2:	4f 92       	push	r4
    bea4:	5f 92       	push	r5
    bea6:	6f 92       	push	r6
    bea8:	7f 92       	push	r7
    beaa:	8f 92       	push	r8
    beac:	9f 92       	push	r9
    beae:	af 92       	push	r10
    beb0:	bf 92       	push	r11
    beb2:	cf 92       	push	r12
    beb4:	df 92       	push	r13
    beb6:	ef 92       	push	r14
    beb8:	ff 92       	push	r15
    beba:	0f 93       	push	r16
    bebc:	1f 93       	push	r17
    bebe:	cf 93       	push	r28
    bec0:	df 93       	push	r29
    bec2:	00 d0       	rcall	.+0      	; 0xbec4 <animate_shot+0x26>
    bec4:	00 d0       	rcall	.+0      	; 0xbec6 <animate_shot+0x28>
    bec6:	00 d0       	rcall	.+0      	; 0xbec8 <animate_shot+0x2a>
    bec8:	cd b7       	in	r28, 0x3d	; 61
    beca:	de b7       	in	r29, 0x3e	; 62
    becc:	2c 01       	movw	r4, r24
    bece:	3b 01       	movw	r6, r22
    bed0:	d4 2e       	mov	r13, r20
    bed2:	4c 01       	movw	r8, r24
    bed4:	29 e1       	ldi	r18, 0x19	; 25
    bed6:	82 0e       	add	r8, r18
    bed8:	91 1c       	adc	r9, r1
    beda:	40 96       	adiw	r24, 0x10	; 16
    bedc:	9e 83       	std	Y+6, r25	; 0x06
    bede:	8d 83       	std	Y+5, r24	; 0x05
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bee0:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bee2:	30 e1       	ldi	r19, 0x10	; 16
    bee4:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bee6:	f4 01       	movw	r30, r8
    bee8:	80 81       	ld	r24, Z
    beea:	88 23       	and	r24, r24
    beec:	09 f4       	brne	.+2      	; 0xbef0 <animate_shot+0x52>
    beee:	13 c1       	rjmp	.+550    	; 0xc116 <animate_shot+0x278>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bef0:	60 91 cc 0d 	lds	r22, 0x0DCC
    bef4:	34 97       	sbiw	r30, 0x04	; 4
    bef6:	80 81       	ld	r24, Z
    bef8:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <LBMoveDelta>
    befc:	88 0f       	add	r24, r24
    befe:	99 1f       	adc	r25, r25
    bf00:	ed 81       	ldd	r30, Y+5	; 0x05
    bf02:	fe 81       	ldd	r31, Y+6	; 0x06
    bf04:	20 81       	ld	r18, Z
    bf06:	31 81       	ldd	r19, Z+1	; 0x01
    bf08:	82 0f       	add	r24, r18
    bf0a:	93 1f       	adc	r25, r19
    bf0c:	91 83       	std	Z+1, r25	; 0x01
    bf0e:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bf10:	60 91 cc 0d 	lds	r22, 0x0DCC
    bf14:	f4 01       	movw	r30, r8
    bf16:	35 97       	sbiw	r30, 0x05	; 5
    bf18:	80 81       	ld	r24, Z
    bf1a:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <LBMoveDelta>
    bf1e:	ed 81       	ldd	r30, Y+5	; 0x05
    bf20:	fe 81       	ldd	r31, Y+6	; 0x06
    bf22:	42 81       	ldd	r20, Z+2	; 0x02
    bf24:	53 81       	ldd	r21, Z+3	; 0x03
    bf26:	84 0f       	add	r24, r20
    bf28:	95 1f       	adc	r25, r21
    bf2a:	93 83       	std	Z+3, r25	; 0x03
    bf2c:	82 83       	std	Z+2, r24	; 0x02
    bf2e:	f1 2e       	mov	r15, r17
    bf30:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bf32:	90 91 ba 0d 	lds	r25, 0x0DBA
    bf36:	48 2f       	mov	r20, r24
    bf38:	49 1b       	sub	r20, r25
    bf3a:	60 81       	ld	r22, Z
    bf3c:	80 91 b2 0d 	lds	r24, 0x0DB2
    bf40:	68 1b       	sub	r22, r24
    bf42:	01 e0       	ldi	r16, 0x01	; 1
    bf44:	21 e0       	ldi	r18, 0x01	; 1
    bf46:	8f 2d       	mov	r24, r15
    bf48:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    bf4c:	8d 81       	ldd	r24, Y+5	; 0x05
    bf4e:	9e 81       	ldd	r25, Y+6	; 0x06
    bf50:	0e 94 0a 5d 	call	0xba14	; 0xba14 <out_of_bounds>
    bf54:	81 11       	cpse	r24, r1
    bf56:	d2 c0       	rjmp	.+420    	; 0xc0fc <animate_shot+0x25e>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    bf58:	41 e0       	ldi	r20, 0x01	; 1
    bf5a:	61 e0       	ldi	r22, 0x01	; 1
    bf5c:	8d 81       	ldd	r24, Y+5	; 0x05
    bf5e:	9e 81       	ldd	r25, Y+6	; 0x06
    bf60:	0e 94 41 5d 	call	0xba82	; 0xba82 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    bf64:	81 11       	cpse	r24, r1
    bf66:	ca c0       	rjmp	.+404    	; 0xc0fc <animate_shot+0x25e>
    bf68:	86 ed       	ldi	r24, 0xD6	; 214
    bf6a:	28 2e       	mov	r2, r24
    bf6c:	8e e0       	ldi	r24, 0x0E	; 14
    bf6e:	38 2e       	mov	r3, r24
    bf70:	1a 82       	std	Y+2, r1	; 0x02
    bf72:	19 82       	std	Y+1, r1	; 0x01
    bf74:	94 01       	movw	r18, r8
    bf76:	21 50       	subi	r18, 0x01	; 1
    bf78:	31 09       	sbc	r19, r1
    bf7a:	3c 83       	std	Y+4, r19	; 0x04
    bf7c:	2b 83       	std	Y+3, r18	; 0x03
    bf7e:	f1 01       	movw	r30, r2
    bf80:	34 97       	sbiw	r30, 0x04	; 4
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bf82:	80 81       	ld	r24, Z
    bf84:	82 30       	cpi	r24, 0x02	; 2
    bf86:	09 f4       	brne	.+2      	; 0xbf8a <animate_shot+0xec>
    bf88:	65 c0       	rjmp	.+202    	; 0xc054 <animate_shot+0x1b6>
    bf8a:	35 97       	sbiw	r30, 0x05	; 5
    bf8c:	80 81       	ld	r24, Z
    bf8e:	88 23       	and	r24, r24
    bf90:	09 f4       	brne	.+2      	; 0xbf94 <animate_shot+0xf6>
    bf92:	60 c0       	rjmp	.+192    	; 0xc054 <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bf94:	90 91 b2 0d 	lds	r25, 0x0DB2
    bf98:	34 96       	adiw	r30, 0x04	; 4
    bf9a:	a0 80       	ld	r10, Z
    bf9c:	aa 0c       	add	r10, r10
    bf9e:	aa 0c       	add	r10, r10
    bfa0:	aa 0c       	add	r10, r10
    bfa2:	31 97       	sbiw	r30, 0x01	; 1
    bfa4:	c0 80       	ld	r12, Z
    bfa6:	cc 0c       	add	r12, r12
    bfa8:	cc 0c       	add	r12, r12
    bfaa:	cc 0c       	add	r12, r12
    bfac:	3a 97       	sbiw	r30, 0x0a	; 10
    bfae:	00 81       	ld	r16, Z
    bfb0:	09 1b       	sub	r16, r25
    bfb2:	ed 81       	ldd	r30, Y+5	; 0x05
    bfb4:	fe 81       	ldd	r31, Y+6	; 0x06
    bfb6:	80 81       	ld	r24, Z
    bfb8:	f1 01       	movw	r30, r2
    bfba:	3e 97       	sbiw	r30, 0x0e	; 14
    bfbc:	e0 80       	ld	r14, Z
    bfbe:	28 e0       	ldi	r18, 0x08	; 8
    bfc0:	48 e0       	ldi	r20, 0x08	; 8
    bfc2:	ed 81       	ldd	r30, Y+5	; 0x05
    bfc4:	fe 81       	ldd	r31, Y+6	; 0x06
    bfc6:	62 81       	ldd	r22, Z+2	; 0x02
    bfc8:	89 1b       	sub	r24, r25
    bfca:	0e 94 24 51 	call	0xa248	; 0xa248 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bfce:	88 23       	and	r24, r24
    bfd0:	09 f4       	brne	.+2      	; 0xbfd4 <animate_shot+0x136>
    bfd2:	40 c0       	rjmp	.+128    	; 0xc054 <animate_shot+0x1b6>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    bfd4:	41 e0       	ldi	r20, 0x01	; 1
    bfd6:	6f ef       	ldi	r22, 0xFF	; 255
    bfd8:	84 e0       	ldi	r24, 0x04	; 4
    bfda:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    bfde:	f1 01       	movw	r30, r2
    bfe0:	80 81       	ld	r24, Z
    bfe2:	eb 81       	ldd	r30, Y+3	; 0x03
    bfe4:	fc 81       	ldd	r31, Y+4	; 0x04
    bfe6:	90 81       	ld	r25, Z
    bfe8:	89 1b       	sub	r24, r25
    bfea:	f1 01       	movw	r30, r2
    bfec:	80 83       	st	Z, r24
						if (game.enemies[j].shield <= 0)
    bfee:	18 16       	cp	r1, r24
    bff0:	24 f1       	brlt	.+72     	; 0xc03a <animate_shot+0x19c>
						{
							SFX_ENEMY_EXPLODE;
    bff2:	41 e0       	ldi	r20, 0x01	; 1
    bff4:	6f ef       	ldi	r22, 0xFF	; 255
    bff6:	86 e0       	ldi	r24, 0x06	; 6
    bff8:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    bffc:	45 e3       	ldi	r20, 0x35	; 53
    bffe:	29 81       	ldd	r18, Y+1	; 0x01
    c000:	3a 81       	ldd	r19, Y+2	; 0x02
    c002:	42 9f       	mul	r20, r18
    c004:	c0 01       	movw	r24, r0
    c006:	43 9f       	mul	r20, r19
    c008:	90 0d       	add	r25, r0
    c00a:	11 24       	eor	r1, r1
    c00c:	8e 54       	subi	r24, 0x4E	; 78
    c00e:	92 4f       	sbci	r25, 0xF2	; 242
    c010:	fc 01       	movw	r30, r24
    c012:	e4 5e       	subi	r30, 0xE4	; 228
    c014:	fe 4f       	sbci	r31, 0xFE	; 254
    c016:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c018:	31 97       	sbiw	r30, 0x01	; 1
    c01a:	10 82       	st	Z, r1
							game.active_enemies--;
    c01c:	80 91 cd 0d 	lds	r24, 0x0DCD
    c020:	81 50       	subi	r24, 0x01	; 1
    c022:	80 93 cd 0d 	sts	0x0DCD, r24
							game.level_score += KILL_SCORE;
    c026:	80 91 b6 0d 	lds	r24, 0x0DB6
    c02a:	90 91 b7 0d 	lds	r25, 0x0DB7
    c02e:	0a 96       	adiw	r24, 0x0a	; 10
    c030:	90 93 b7 0d 	sts	0x0DB7, r25
    c034:	80 93 b6 0d 	sts	0x0DB6, r24
							break;
    c038:	1b c0       	rjmp	.+54     	; 0xc070 <animate_shot+0x1d2>
						}
						player->shot[i].active = 0;
    c03a:	f4 01       	movw	r30, r8
    c03c:	10 82       	st	Z, r1
						player->active_shots--;
    c03e:	f2 01       	movw	r30, r4
    c040:	87 81       	ldd	r24, Z+7	; 0x07
    c042:	81 50       	subi	r24, 0x01	; 1
    c044:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c046:	01 e0       	ldi	r16, 0x01	; 1
    c048:	21 e0       	ldi	r18, 0x01	; 1
    c04a:	40 e0       	ldi	r20, 0x00	; 0
    c04c:	60 ee       	ldi	r22, 0xE0	; 224
    c04e:	8f 2d       	mov	r24, r15
    c050:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
    c054:	29 81       	ldd	r18, Y+1	; 0x01
    c056:	3a 81       	ldd	r19, Y+2	; 0x02
    c058:	2f 5f       	subi	r18, 0xFF	; 255
    c05a:	3f 4f       	sbci	r19, 0xFF	; 255
    c05c:	3a 83       	std	Y+2, r19	; 0x02
    c05e:	29 83       	std	Y+1, r18	; 0x01
    c060:	35 e3       	ldi	r19, 0x35	; 53
    c062:	23 0e       	add	r2, r19
    c064:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c066:	89 81       	ldd	r24, Y+1	; 0x01
    c068:	9a 81       	ldd	r25, Y+2	; 0x02
    c06a:	05 97       	sbiw	r24, 0x05	; 5
    c06c:	09 f0       	breq	.+2      	; 0xc070 <animate_shot+0x1d2>
    c06e:	87 cf       	rjmp	.-242    	; 0xbf7e <animate_shot+0xe0>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    c070:	f3 01       	movw	r30, r6
    c072:	85 85       	ldd	r24, Z+13	; 0x0d
    c074:	88 23       	and	r24, r24
    c076:	09 f4       	brne	.+2      	; 0xc07a <animate_shot+0x1dc>
    c078:	4e c0       	rjmp	.+156    	; 0xc116 <animate_shot+0x278>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c07a:	90 91 b2 0d 	lds	r25, 0x0DB2
    c07e:	a4 84       	ldd	r10, Z+12	; 0x0c
    c080:	aa 0c       	add	r10, r10
    c082:	aa 0c       	add	r10, r10
    c084:	aa 0c       	add	r10, r10
    c086:	c3 84       	ldd	r12, Z+11	; 0x0b
    c088:	cc 0c       	add	r12, r12
    c08a:	cc 0c       	add	r12, r12
    c08c:	cc 0c       	add	r12, r12
    c08e:	00 81       	ld	r16, Z
    c090:	09 1b       	sub	r16, r25
    c092:	ed 81       	ldd	r30, Y+5	; 0x05
    c094:	fe 81       	ldd	r31, Y+6	; 0x06
    c096:	80 81       	ld	r24, Z
    c098:	f3 01       	movw	r30, r6
    c09a:	e2 80       	ldd	r14, Z+2	; 0x02
    c09c:	28 e0       	ldi	r18, 0x08	; 8
    c09e:	48 e0       	ldi	r20, 0x08	; 8
    c0a0:	ed 81       	ldd	r30, Y+5	; 0x05
    c0a2:	fe 81       	ldd	r31, Y+6	; 0x06
    c0a4:	62 81       	ldd	r22, Z+2	; 0x02
    c0a6:	89 1b       	sub	r24, r25
    c0a8:	0e 94 24 51 	call	0xa248	; 0xa248 <LBCollides>
    c0ac:	88 23       	and	r24, r24
    c0ae:	99 f1       	breq	.+102    	; 0xc116 <animate_shot+0x278>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    c0b0:	41 e0       	ldi	r20, 0x01	; 1
    c0b2:	6f ef       	ldi	r22, 0xFF	; 255
    c0b4:	84 e0       	ldi	r24, 0x04	; 4
    c0b6:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    c0ba:	f3 01       	movw	r30, r6
    c0bc:	87 85       	ldd	r24, Z+15	; 0x0f
    c0be:	f4 01       	movw	r30, r8
    c0c0:	31 97       	sbiw	r30, 0x01	; 1
    c0c2:	90 81       	ld	r25, Z
    c0c4:	89 1b       	sub	r24, r25
    c0c6:	f3 01       	movw	r30, r6
    c0c8:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    c0ca:	18 16       	cp	r1, r24
    c0cc:	bc f0       	brlt	.+46     	; 0xc0fc <animate_shot+0x25e>
							{
								SFX_PLAYER_EXPLODE;
    c0ce:	41 e0       	ldi	r20, 0x01	; 1
    c0d0:	6f ef       	ldi	r22, 0xFF	; 255
    c0d2:	85 e0       	ldi	r24, 0x05	; 5
    c0d4:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
								other_player->shield = 0;
    c0d8:	f3 01       	movw	r30, r6
    c0da:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    c0dc:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    c0de:	fb e4       	ldi	r31, 0x4B	; 75
    c0e0:	6f 16       	cp	r6, r31
    c0e2:	fe e0       	ldi	r31, 0x0E	; 14
    c0e4:	7f 06       	cpc	r7, r31
    c0e6:	51 f4       	brne	.+20     	; 0xc0fc <animate_shot+0x25e>
    c0e8:	80 91 b6 0d 	lds	r24, 0x0DB6
    c0ec:	90 91 b7 0d 	lds	r25, 0x0DB7
    c0f0:	8c 59       	subi	r24, 0x9C	; 156
    c0f2:	9f 4f       	sbci	r25, 0xFF	; 255
    c0f4:	90 93 b7 0d 	sts	0x0DB7, r25
    c0f8:	80 93 b6 0d 	sts	0x0DB6, r24
							}
							player->shot[i].active = 0;
    c0fc:	f4 01       	movw	r30, r8
    c0fe:	10 82       	st	Z, r1
							player->active_shots--;
    c100:	f2 01       	movw	r30, r4
    c102:	87 81       	ldd	r24, Z+7	; 0x07
    c104:	81 50       	subi	r24, 0x01	; 1
    c106:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c108:	01 e0       	ldi	r16, 0x01	; 1
    c10a:	21 e0       	ldi	r18, 0x01	; 1
    c10c:	40 e0       	ldi	r20, 0x00	; 0
    c10e:	60 ee       	ldi	r22, 0xE0	; 224
    c110:	8f 2d       	mov	r24, r15
    c112:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c116:	1f 5f       	subi	r17, 0xFF	; 255
    c118:	f4 e1       	ldi	r31, 0x14	; 20
    c11a:	8f 0e       	add	r8, r31
    c11c:	91 1c       	adc	r9, r1
    c11e:	2d 81       	ldd	r18, Y+5	; 0x05
    c120:	3e 81       	ldd	r19, Y+6	; 0x06
    c122:	2c 5e       	subi	r18, 0xEC	; 236
    c124:	3f 4f       	sbci	r19, 0xFF	; 255
    c126:	3e 83       	std	Y+6, r19	; 0x06
    c128:	2d 83       	std	Y+5, r18	; 0x05
    c12a:	13 30       	cpi	r17, 0x03	; 3
    c12c:	09 f0       	breq	.+2      	; 0xc130 <animate_shot+0x292>
    c12e:	db ce       	rjmp	.-586    	; 0xbee6 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    c130:	26 96       	adiw	r28, 0x06	; 6
    c132:	0f b6       	in	r0, 0x3f	; 63
    c134:	f8 94       	cli
    c136:	de bf       	out	0x3e, r29	; 62
    c138:	0f be       	out	0x3f, r0	; 63
    c13a:	cd bf       	out	0x3d, r28	; 61
    c13c:	df 91       	pop	r29
    c13e:	cf 91       	pop	r28
    c140:	1f 91       	pop	r17
    c142:	0f 91       	pop	r16
    c144:	ff 90       	pop	r15
    c146:	ef 90       	pop	r14
    c148:	df 90       	pop	r13
    c14a:	cf 90       	pop	r12
    c14c:	bf 90       	pop	r11
    c14e:	af 90       	pop	r10
    c150:	9f 90       	pop	r9
    c152:	8f 90       	pop	r8
    c154:	7f 90       	pop	r7
    c156:	6f 90       	pop	r6
    c158:	5f 90       	pop	r5
    c15a:	4f 90       	pop	r4
    c15c:	3f 90       	pop	r3
    c15e:	2f 90       	pop	r2
    c160:	08 95       	ret

0000c162 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c162:	7f 92       	push	r7
    c164:	8f 92       	push	r8
    c166:	9f 92       	push	r9
    c168:	af 92       	push	r10
    c16a:	bf 92       	push	r11
    c16c:	cf 92       	push	r12
    c16e:	df 92       	push	r13
    c170:	ef 92       	push	r14
    c172:	ff 92       	push	r15
    c174:	0f 93       	push	r16
    c176:	1f 93       	push	r17
    c178:	cf 93       	push	r28
    c17a:	df 93       	push	r29
    c17c:	1f 92       	push	r1
    c17e:	cd b7       	in	r28, 0x3d	; 61
    c180:	de b7       	in	r29, 0x3e	; 62
    c182:	6c 01       	movw	r12, r24
    c184:	7b 01       	movw	r14, r22
    c186:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c188:	cb 01       	movw	r24, r22
    c18a:	29 83       	std	Y+1, r18	; 0x01
    c18c:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c190:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c192:	29 81       	ldd	r18, Y+1	; 0x01
    c194:	20 9f       	mul	r18, r16
    c196:	50 01       	movw	r10, r0
    c198:	11 24       	eor	r1, r1
    c19a:	10 e0       	ldi	r17, 0x00	; 0
    c19c:	81 2f       	mov	r24, r17
    c19e:	90 e0       	ldi	r25, 0x00	; 0
    c1a0:	8a 15       	cp	r24, r10
    c1a2:	9b 05       	cpc	r25, r11
    c1a4:	54 f4       	brge	.+20     	; 0xc1ba <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c1a6:	40 e0       	ldi	r20, 0x00	; 0
    c1a8:	b4 01       	movw	r22, r8
    c1aa:	81 2f       	mov	r24, r17
    c1ac:	87 0d       	add	r24, r7
    c1ae:	29 83       	std	Y+1, r18	; 0x01
    c1b0:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c1b4:	1f 5f       	subi	r17, 0xFF	; 255
    c1b6:	29 81       	ldd	r18, Y+1	; 0x01
    c1b8:	f1 cf       	rjmp	.-30     	; 0xc19c <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c1ba:	f7 01       	movw	r30, r14
    c1bc:	84 81       	ldd	r24, Z+4	; 0x04
    c1be:	88 23       	and	r24, r24
    c1c0:	51 f0       	breq	.+20     	; 0xc1d6 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c1c2:	f6 01       	movw	r30, r12
    c1c4:	80 81       	ld	r24, Z
    c1c6:	90 e1       	ldi	r25, 0x10	; 16
    c1c8:	98 27       	eor	r25, r24
    c1ca:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c1cc:	40 e0       	ldi	r20, 0x00	; 0
    c1ce:	60 ee       	ldi	r22, 0xE0	; 224
    c1d0:	87 2d       	mov	r24, r7
    c1d2:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	}
	return anim->looped;
}
    c1d6:	f7 01       	movw	r30, r14
    c1d8:	84 81       	ldd	r24, Z+4	; 0x04
    c1da:	0f 90       	pop	r0
    c1dc:	df 91       	pop	r29
    c1de:	cf 91       	pop	r28
    c1e0:	1f 91       	pop	r17
    c1e2:	0f 91       	pop	r16
    c1e4:	ff 90       	pop	r15
    c1e6:	ef 90       	pop	r14
    c1e8:	df 90       	pop	r13
    c1ea:	cf 90       	pop	r12
    c1ec:	bf 90       	pop	r11
    c1ee:	af 90       	pop	r10
    c1f0:	9f 90       	pop	r9
    c1f2:	8f 90       	pop	r8
    c1f4:	7f 90       	pop	r7
    c1f6:	08 95       	ret

0000c1f8 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c1f8:	8f 92       	push	r8
    c1fa:	9f 92       	push	r9
    c1fc:	af 92       	push	r10
    c1fe:	bf 92       	push	r11
    c200:	cf 92       	push	r12
    c202:	df 92       	push	r13
    c204:	ef 92       	push	r14
    c206:	ff 92       	push	r15
    c208:	0f 93       	push	r16
    c20a:	1f 93       	push	r17
    c20c:	cf 93       	push	r28
    c20e:	df 93       	push	r29
    c210:	ec 01       	movw	r28, r24
    c212:	c6 2e       	mov	r12, r22
    c214:	14 2f       	mov	r17, r20
    c216:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c218:	6c 81       	ldd	r22, Y+4	; 0x04
    c21a:	77 27       	eor	r23, r23
    c21c:	67 fd       	sbrc	r22, 7
    c21e:	70 95       	com	r23
    c220:	87 2f       	mov	r24, r23
    c222:	97 2f       	mov	r25, r23
    c224:	0e 94 ab 71 	call	0xe356	; 0xe356 <__floatsisf>
    c228:	4b 01       	movw	r8, r22
    c22a:	5c 01       	movw	r10, r24
    c22c:	8e 81       	ldd	r24, Y+6	; 0x06
    c22e:	68 2f       	mov	r22, r24
    c230:	70 e0       	ldi	r23, 0x00	; 0
    c232:	80 e0       	ldi	r24, 0x00	; 0
    c234:	90 e0       	ldi	r25, 0x00	; 0
    c236:	0e 94 ab 71 	call	0xe356	; 0xe356 <__floatsisf>
    c23a:	29 e8       	ldi	r18, 0x89	; 137
    c23c:	38 e8       	ldi	r19, 0x88	; 136
    c23e:	48 e8       	ldi	r20, 0x88	; 136
    c240:	5c e3       	ldi	r21, 0x3C	; 60
    c242:	0e 94 37 72 	call	0xe46e	; 0xe46e <__mulsf3>
    c246:	9b 01       	movw	r18, r22
    c248:	ac 01       	movw	r20, r24
    c24a:	c5 01       	movw	r24, r10
    c24c:	b4 01       	movw	r22, r8
    c24e:	0e 94 14 71 	call	0xe228	; 0xe228 <__addsf3>
    c252:	0e 94 78 71 	call	0xe2f0	; 0xe2f0 <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c256:	69 37       	cpi	r22, 0x79	; 121
    c258:	14 f4       	brge	.+4      	; 0xc25e <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c25a:	6c 83       	std	Y+4, r22	; 0x04
    c25c:	02 c0       	rjmp	.+4      	; 0xc262 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c25e:	88 e7       	ldi	r24, 0x78	; 120
    c260:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c262:	60 91 cc 0d 	lds	r22, 0x0DCC
    c266:	8d 81       	ldd	r24, Y+5	; 0x05
    c268:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <LBMoveDelta>
    c26c:	28 81       	ld	r18, Y
    c26e:	39 81       	ldd	r19, Y+1	; 0x01
    c270:	82 0f       	add	r24, r18
    c272:	93 1f       	adc	r25, r19
    c274:	99 83       	std	Y+1, r25	; 0x01
    c276:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c278:	60 91 cc 0d 	lds	r22, 0x0DCC
    c27c:	8c 81       	ldd	r24, Y+4	; 0x04
    c27e:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <LBMoveDelta>
    c282:	ea 81       	ldd	r30, Y+2	; 0x02
    c284:	fb 81       	ldd	r31, Y+3	; 0x03
    c286:	8e 0f       	add	r24, r30
    c288:	9f 1f       	adc	r25, r31
    c28a:	9b 83       	std	Y+3, r25	; 0x03
    c28c:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c28e:	4d 2d       	mov	r20, r13
    c290:	61 2f       	mov	r22, r17
    c292:	ce 01       	movw	r24, r28
    c294:	0e 94 41 5d 	call	0xba82	; 0xba82 <collision_detect_level>
    c298:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c29a:	88 23       	and	r24, r24
    c29c:	41 f0       	breq	.+16     	; 0xc2ae <animate_sprite+0xb6>
    c29e:	00 23       	and	r16, r16
    c2a0:	31 f0       	breq	.+12     	; 0xc2ae <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c2a2:	88 e0       	ldi	r24, 0x08	; 8
    c2a4:	e8 9e       	mul	r14, r24
    c2a6:	70 01       	movw	r14, r0
    c2a8:	11 24       	eor	r1, r1
    c2aa:	fb 82       	std	Y+3, r15	; 0x03
    c2ac:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c2ae:	3a 81       	ldd	r19, Y+2	; 0x02
    c2b0:	80 91 ba 0d 	lds	r24, 0x0DBA
    c2b4:	43 2f       	mov	r20, r19
    c2b6:	48 1b       	sub	r20, r24
    c2b8:	98 81       	ld	r25, Y
    c2ba:	80 91 b2 0d 	lds	r24, 0x0DB2
    c2be:	69 2f       	mov	r22, r25
    c2c0:	68 1b       	sub	r22, r24
    c2c2:	0d 2d       	mov	r16, r13
    c2c4:	21 2f       	mov	r18, r17
    c2c6:	8c 2d       	mov	r24, r12
    c2c8:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	return result;
}
    c2cc:	8b 2d       	mov	r24, r11
    c2ce:	df 91       	pop	r29
    c2d0:	cf 91       	pop	r28
    c2d2:	1f 91       	pop	r17
    c2d4:	0f 91       	pop	r16
    c2d6:	ff 90       	pop	r15
    c2d8:	ef 90       	pop	r14
    c2da:	df 90       	pop	r13
    c2dc:	cf 90       	pop	r12
    c2de:	bf 90       	pop	r11
    c2e0:	af 90       	pop	r10
    c2e2:	9f 90       	pop	r9
    c2e4:	8f 90       	pop	r8
    c2e6:	08 95       	ret

0000c2e8 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c2e8:	af 92       	push	r10
    c2ea:	cf 92       	push	r12
    c2ec:	ef 92       	push	r14
    c2ee:	0f 93       	push	r16
    c2f0:	1f 93       	push	r17
    c2f2:	cf 93       	push	r28
    c2f4:	df 93       	push	r29
    c2f6:	ec 01       	movw	r28, r24
    c2f8:	14 2f       	mov	r17, r20
	if (player->flags & EXPLODING)
    c2fa:	88 85       	ldd	r24, Y+8	; 0x08
    c2fc:	84 ff       	sbrs	r24, 4
    c2fe:	10 c0       	rjmp	.+32     	; 0xc320 <animate_player+0x38>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c300:	9a 81       	ldd	r25, Y+2	; 0x02
    c302:	80 91 ba 0d 	lds	r24, 0x0DBA
    c306:	49 2f       	mov	r20, r25
    c308:	48 1b       	sub	r20, r24
    c30a:	98 81       	ld	r25, Y
    c30c:	80 91 b2 0d 	lds	r24, 0x0DB2
    c310:	69 2f       	mov	r22, r25
    c312:	68 1b       	sub	r22, r24
    c314:	0c 85       	ldd	r16, Y+12	; 0x0c
    c316:	2b 85       	ldd	r18, Y+11	; 0x0b
    c318:	81 2f       	mov	r24, r17
    c31a:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
    c31e:	38 c0       	rjmp	.+112    	; 0xc390 <animate_player+0xa8>
	}
	else if (!DEBUG_GODMODE && other_player == &game.player && LBCollides(player->shared.x-game.camera_x,player->shared.y, player->width*8, player->height*8,
    c320:	60 5d       	subi	r22, 0xD0	; 208
    c322:	7d 40       	sbci	r23, 0x0D	; 13
    c324:	09 f5       	brne	.+66     	; 0xc368 <animate_player+0x80>
    c326:	30 91 b2 0d 	lds	r19, 0x0DB2
    c32a:	a0 90 dc 0d 	lds	r10, 0x0DDC
    c32e:	aa 0c       	add	r10, r10
    c330:	aa 0c       	add	r10, r10
    c332:	aa 0c       	add	r10, r10
    c334:	c0 90 db 0d 	lds	r12, 0x0DDB
    c338:	cc 0c       	add	r12, r12
    c33a:	cc 0c       	add	r12, r12
    c33c:	cc 0c       	add	r12, r12
    c33e:	00 91 d0 0d 	lds	r16, 0x0DD0
    c342:	03 1b       	sub	r16, r19
    c344:	2c 85       	ldd	r18, Y+12	; 0x0c
    c346:	22 0f       	add	r18, r18
    c348:	22 0f       	add	r18, r18
    c34a:	22 0f       	add	r18, r18
    c34c:	9b 85       	ldd	r25, Y+11	; 0x0b
    c34e:	49 2f       	mov	r20, r25
    c350:	44 0f       	add	r20, r20
    c352:	44 0f       	add	r20, r20
    c354:	44 0f       	add	r20, r20
    c356:	88 81       	ld	r24, Y
    c358:	e0 90 d2 0d 	lds	r14, 0x0DD2
    c35c:	6a 81       	ldd	r22, Y+2	; 0x02
    c35e:	83 1b       	sub	r24, r19
    c360:	0e 94 24 51 	call	0xa248	; 0xa248 <LBCollides>
    c364:	81 11       	cpse	r24, r1
    c366:	0a c0       	rjmp	.+20     	; 0xc37c <animate_player+0x94>
	{
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
	}
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c368:	e1 2c       	mov	r14, r1
    c36a:	00 e0       	ldi	r16, 0x00	; 0
    c36c:	2c 85       	ldd	r18, Y+12	; 0x0c
    c36e:	4b 85       	ldd	r20, Y+11	; 0x0b
    c370:	61 2f       	mov	r22, r17
    c372:	ce 01       	movw	r24, r28
    c374:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <animate_sprite>
    c378:	82 30       	cpi	r24, 0x02	; 2
    c37a:	50 f0       	brcs	.+20     	; 0xc390 <animate_player+0xa8>
	{
		SFX_PLAYER_EXPLODE;
    c37c:	41 e0       	ldi	r20, 0x01	; 1
    c37e:	6f ef       	ldi	r22, 0xFF	; 255
    c380:	85 e0       	ldi	r24, 0x05	; 5
    c382:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
		game.player.shield = 0;
    c386:	10 92 df 0d 	sts	0x0DDF, r1
		game.player.flags = EXPLODING;
    c38a:	80 e1       	ldi	r24, 0x10	; 16
    c38c:	80 93 d8 0d 	sts	0x0DD8, r24
	}
}
    c390:	df 91       	pop	r29
    c392:	cf 91       	pop	r28
    c394:	1f 91       	pop	r17
    c396:	0f 91       	pop	r16
    c398:	ef 90       	pop	r14
    c39a:	cf 90       	pop	r12
    c39c:	af 90       	pop	r10
    c39e:	08 95       	ret

0000c3a0 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c3a0:	1f 93       	push	r17
    c3a2:	cf 93       	push	r28
    c3a4:	df 93       	push	r29
    c3a6:	ec 01       	movw	r28, r24
    c3a8:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c3aa:	98 85       	ldd	r25, Y+8	; 0x08
    c3ac:	89 2f       	mov	r24, r25
    c3ae:	88 70       	andi	r24, 0x08	; 8
    c3b0:	93 ff       	sbrs	r25, 3
    c3b2:	14 c0       	rjmp	.+40     	; 0xc3dc <update_spider_enemy+0x3c>
    c3b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    c3b6:	20 38       	cpi	r18, 0x80	; 128
    c3b8:	89 f4       	brne	.+34     	; 0xc3dc <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c3ba:	81 e0       	ldi	r24, 0x01	; 1
    c3bc:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c3be:	8c e9       	ldi	r24, 0x9C	; 156
    c3c0:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c3c2:	88 ec       	ldi	r24, 0xC8	; 200
    c3c4:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c3c6:	8c e3       	ldi	r24, 0x3C	; 60
    c3c8:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c3ca:	89 85       	ldd	r24, Y+9	; 0x09
    c3cc:	81 11       	cpse	r24, r1
    c3ce:	02 c0       	rjmp	.+4      	; 0xc3d4 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c3d0:	84 ec       	ldi	r24, 0xC4	; 196
    c3d2:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c3d4:	40 e0       	ldi	r20, 0x00	; 0
    c3d6:	6d e8       	ldi	r22, 0x8D	; 141
    c3d8:	76 e3       	ldi	r23, 0x36	; 54
    c3da:	19 c0       	rjmp	.+50     	; 0xc40e <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c3dc:	90 ff       	sbrs	r25, 0
    c3de:	0f c0       	rjmp	.+30     	; 0xc3fe <update_spider_enemy+0x5e>
    c3e0:	9e 81       	ldd	r25, Y+6	; 0x06
    c3e2:	91 11       	cpse	r25, r1
    c3e4:	0c c0       	rjmp	.+24     	; 0xc3fe <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c3e6:	88 e0       	ldi	r24, 0x08	; 8
    c3e8:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c3ea:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c3ec:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c3ee:	89 85       	ldd	r24, Y+9	; 0x09
    c3f0:	81 11       	cpse	r24, r1
    c3f2:	03 c0       	rjmp	.+6      	; 0xc3fa <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c3f4:	81 e0       	ldi	r24, 0x01	; 1
    c3f6:	89 87       	std	Y+9, r24	; 0x09
    c3f8:	0d c0       	rjmp	.+26     	; 0xc414 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c3fa:	19 86       	std	Y+9, r1	; 0x09
    c3fc:	0b c0       	rjmp	.+22     	; 0xc414 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c3fe:	88 23       	and	r24, r24
    c400:	49 f0       	breq	.+18     	; 0xc414 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c402:	ce 01       	movw	r24, r28
    c404:	85 96       	adiw	r24, 0x25	; 37
    c406:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c40a:	40 e0       	ldi	r20, 0x00	; 0
    c40c:	bc 01       	movw	r22, r24
    c40e:	81 2f       	mov	r24, r17
    c410:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	}
	e->frame_count++;
    c414:	8d 85       	ldd	r24, Y+13	; 0x0d
    c416:	8f 5f       	subi	r24, 0xFF	; 255
    c418:	8d 87       	std	Y+13, r24	; 0x0d
}
    c41a:	df 91       	pop	r29
    c41c:	cf 91       	pop	r28
    c41e:	1f 91       	pop	r17
    c420:	08 95       	ret

0000c422 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c422:	cf 93       	push	r28
    c424:	fc 01       	movw	r30, r24
    c426:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c428:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c42a:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x)
    c42c:	20 91 d0 0d 	lds	r18, 0x0DD0
    c430:	30 91 d1 0d 	lds	r19, 0x0DD1
    c434:	80 81       	ld	r24, Z
    c436:	91 81       	ldd	r25, Z+1	; 0x01
    c438:	b5 96       	adiw	r30, 0x25	; 37
    c43a:	82 17       	cp	r24, r18
    c43c:	93 07       	cpc	r25, r19
    c43e:	28 f4       	brcc	.+10     	; 0xc44a <update_turret_enemy+0x28>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c440:	cf 01       	movw	r24, r30
    c442:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c446:	41 e0       	ldi	r20, 0x01	; 1
    c448:	04 c0       	rjmp	.+8      	; 0xc452 <update_turret_enemy+0x30>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c44a:	cf 01       	movw	r24, r30
    c44c:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c450:	40 e0       	ldi	r20, 0x00	; 0
    c452:	bc 01       	movw	r22, r24
    c454:	8c 2f       	mov	r24, r28
	}
}
    c456:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c458:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000c45c <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c45c:	cf 93       	push	r28
    c45e:	fc 01       	movw	r30, r24
    c460:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c462:	82 ee       	ldi	r24, 0xE2	; 226
    c464:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c466:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c468:	cf 01       	movw	r24, r30
    c46a:	85 96       	adiw	r24, 0x25	; 37
    c46c:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c470:	40 e0       	ldi	r20, 0x00	; 0
    c472:	bc 01       	movw	r22, r24
    c474:	8c 2f       	mov	r24, r28
}
    c476:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c478:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000c47c <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c47c:	cf 93       	push	r28
    c47e:	fc 01       	movw	r30, r24
    c480:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c482:	8a e0       	ldi	r24, 0x0A	; 10
    c484:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c486:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c488:	cf 01       	movw	r24, r30
    c48a:	85 96       	adiw	r24, 0x25	; 37
    c48c:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c490:	40 e0       	ldi	r20, 0x00	; 0
    c492:	bc 01       	movw	r22, r24
    c494:	8c 2f       	mov	r24, r28
}
    c496:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c498:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000c49c <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c49c:	cf 93       	push	r28
    c49e:	fc 01       	movw	r30, r24
    c4a0:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c4a2:	8e e1       	ldi	r24, 0x1E	; 30
    c4a4:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c4a6:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4a8:	cf 01       	movw	r24, r30
    c4aa:	85 96       	adiw	r24, 0x25	; 37
    c4ac:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c4b0:	40 e0       	ldi	r20, 0x00	; 0
    c4b2:	bc 01       	movw	r22, r24
    c4b4:	8c 2f       	mov	r24, r28
}
    c4b6:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4b8:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000c4bc <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c4bc:	cf 93       	push	r28
    c4be:	fc 01       	movw	r30, r24
    c4c0:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c4c2:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c4c4:	88 e2       	ldi	r24, 0x28	; 40
    c4c6:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c4c8:	80 91 c7 0d 	lds	r24, 0x0DC7
    c4cc:	82 30       	cpi	r24, 0x02	; 2
    c4ce:	11 f4       	brne	.+4      	; 0xc4d4 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c4d0:	88 ed       	ldi	r24, 0xD8	; 216
    c4d2:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c4d4:	22 81       	ldd	r18, Z+2	; 0x02
    c4d6:	33 81       	ldd	r19, Z+3	; 0x03
    c4d8:	24 50       	subi	r18, 0x04	; 4
    c4da:	31 09       	sbc	r19, r1
    c4dc:	2d 3b       	cpi	r18, 0xBD	; 189
    c4de:	31 05       	cpc	r19, r1
    c4e0:	38 f0       	brcs	.+14     	; 0xc4f0 <update_level_hazard+0x34>
    c4e2:	27 85       	ldd	r18, Z+15	; 0x0f
    c4e4:	88 e0       	ldi	r24, 0x08	; 8
    c4e6:	28 9f       	mul	r18, r24
    c4e8:	90 01       	movw	r18, r0
    c4ea:	11 24       	eor	r1, r1
    c4ec:	33 83       	std	Z+3, r19	; 0x03
    c4ee:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c4f0:	cf 01       	movw	r24, r30
    c4f2:	85 96       	adiw	r24, 0x25	; 37
    c4f4:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c4f8:	40 e0       	ldi	r20, 0x00	; 0
    c4fa:	bc 01       	movw	r22, r24
    c4fc:	8c 2f       	mov	r24, r28
}
    c4fe:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c500:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000c504 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c504:	cf 93       	push	r28
    c506:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c508:	0c 96       	adiw	r24, 0x0c	; 12
    c50a:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    c50e:	40 e0       	ldi	r20, 0x00	; 0
    c510:	bc 01       	movw	r22, r24
    c512:	8c 2f       	mov	r24, r28
}
    c514:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c516:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000c51a <update_enemies>:
}

void update_enemies()
{
    c51a:	cf 92       	push	r12
    c51c:	df 92       	push	r13
    c51e:	ef 92       	push	r14
    c520:	ff 92       	push	r15
    c522:	0f 93       	push	r16
    c524:	1f 93       	push	r17
    c526:	cf 93       	push	r28
    c528:	df 93       	push	r29
    c52a:	81 ed       	ldi	r24, 0xD1	; 209
    c52c:	e8 2e       	mov	r14, r24
    c52e:	8e e0       	ldi	r24, 0x0E	; 14
    c530:	f8 2e       	mov	r15, r24
    c532:	c6 ec       	ldi	r28, 0xC6	; 198
    c534:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c536:	19 e0       	ldi	r17, 0x09	; 9
    c538:	f7 01       	movw	r30, r14
    c53a:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c53c:	80 81       	ld	r24, Z
    c53e:	97 01       	movw	r18, r14
    c540:	21 50       	subi	r18, 0x01	; 1
    c542:	31 09       	sbc	r19, r1
    c544:	69 01       	movw	r12, r18
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c546:	f7 01       	movw	r30, r14
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c548:	84 ff       	sbrs	r24, 4
    c54a:	0c c0       	rjmp	.+24     	; 0xc564 <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c54c:	00 81       	ld	r16, Z
    c54e:	f9 01       	movw	r30, r18
    c550:	20 81       	ld	r18, Z
    c552:	41 2f       	mov	r20, r17
    c554:	be 01       	movw	r22, r28
    c556:	63 5d       	subi	r22, 0xD3	; 211
    c558:	7f 4f       	sbci	r23, 0xFF	; 255
    c55a:	ce 01       	movw	r24, r28
    c55c:	08 96       	adiw	r24, 0x08	; 8
    c55e:	0e 94 b1 60 	call	0xc162	; 0xc162 <map_explosion>
    c562:	2e c0       	rjmp	.+92     	; 0xc5c0 <update_enemies+0xa6>
    c564:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c566:	80 81       	ld	r24, Z
    c568:	88 23       	and	r24, r24
    c56a:	51 f1       	breq	.+84     	; 0xc5c0 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c56c:	f7 01       	movw	r30, r14
    c56e:	81 81       	ldd	r24, Z+1	; 0x01
    c570:	83 30       	cpi	r24, 0x03	; 3
    c572:	c1 f0       	breq	.+48     	; 0xc5a4 <update_enemies+0x8a>
    c574:	48 f4       	brcc	.+18     	; 0xc588 <update_enemies+0x6e>
    c576:	88 23       	and	r24, r24
    c578:	81 f0       	breq	.+32     	; 0xc59a <update_enemies+0x80>
    c57a:	81 30       	cpi	r24, 0x01	; 1
    c57c:	e9 f4       	brne	.+58     	; 0xc5b8 <update_enemies+0x9e>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c57e:	61 2f       	mov	r22, r17
    c580:	ce 01       	movw	r24, r28
    c582:	0e 94 4e 62 	call	0xc49c	; 0xc49c <update_shark_enemy>
    c586:	1c c0       	rjmp	.+56     	; 0xc5c0 <update_enemies+0xa6>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c588:	84 30       	cpi	r24, 0x04	; 4
    c58a:	89 f0       	breq	.+34     	; 0xc5ae <update_enemies+0x94>
    c58c:	85 30       	cpi	r24, 0x05	; 5
    c58e:	a1 f4       	brne	.+40     	; 0xc5b8 <update_enemies+0x9e>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c590:	61 2f       	mov	r22, r17
    c592:	ce 01       	movw	r24, r28
    c594:	0e 94 3e 62 	call	0xc47c	; 0xc47c <update_globe_enemy>
    c598:	13 c0       	rjmp	.+38     	; 0xc5c0 <update_enemies+0xa6>
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c59a:	61 2f       	mov	r22, r17
    c59c:	ce 01       	movw	r24, r28
    c59e:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <update_spider_enemy>
    c5a2:	0e c0       	rjmp	.+28     	; 0xc5c0 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
    c5a4:	61 2f       	mov	r22, r17
    c5a6:	ce 01       	movw	r24, r28
    c5a8:	0e 94 11 62 	call	0xc422	; 0xc422 <update_turret_enemy>
    c5ac:	09 c0       	rjmp	.+18     	; 0xc5c0 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c5ae:	61 2f       	mov	r22, r17
    c5b0:	ce 01       	movw	r24, r28
    c5b2:	0e 94 2e 62 	call	0xc45c	; 0xc45c <update_drone_enemy>
    c5b6:	04 c0       	rjmp	.+8      	; 0xc5c0 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c5b8:	61 2f       	mov	r22, r17
    c5ba:	ce 01       	movw	r24, r28
    c5bc:	0e 94 5e 62 	call	0xc4bc	; 0xc4bc <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c5c0:	f6 01       	movw	r30, r12
    c5c2:	90 81       	ld	r25, Z
    c5c4:	f7 01       	movw	r30, r14
    c5c6:	80 81       	ld	r24, Z
    c5c8:	98 9f       	mul	r25, r24
    c5ca:	10 0d       	add	r17, r0
    c5cc:	11 24       	eor	r1, r1
    c5ce:	f5 e3       	ldi	r31, 0x35	; 53
    c5d0:	ef 0e       	add	r14, r31
    c5d2:	f1 1c       	adc	r15, r1
    c5d4:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c5d6:	2a ed       	ldi	r18, 0xDA	; 218
    c5d8:	e2 16       	cp	r14, r18
    c5da:	2f e0       	ldi	r18, 0x0F	; 15
    c5dc:	f2 06       	cpc	r15, r18
    c5de:	09 f0       	breq	.+2      	; 0xc5e2 <update_enemies+0xc8>
    c5e0:	ab cf       	rjmp	.-170    	; 0xc538 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c5e2:	df 91       	pop	r29
    c5e4:	cf 91       	pop	r28
    c5e6:	1f 91       	pop	r17
    c5e8:	0f 91       	pop	r16
    c5ea:	ff 90       	pop	r15
    c5ec:	ef 90       	pop	r14
    c5ee:	df 90       	pop	r13
    c5f0:	cf 90       	pop	r12
    c5f2:	08 95       	ret

0000c5f4 <update_enemy_shots>:

void update_enemy_shots()
{
    c5f4:	8f 92       	push	r8
    c5f6:	9f 92       	push	r9
    c5f8:	af 92       	push	r10
    c5fa:	bf 92       	push	r11
    c5fc:	df 92       	push	r13
    c5fe:	ef 92       	push	r14
    c600:	ff 92       	push	r15
    c602:	0f 93       	push	r16
    c604:	1f 93       	push	r17
    c606:	cf 93       	push	r28
    c608:	df 93       	push	r29
    c60a:	1f 92       	push	r1
    c60c:	cd b7       	in	r28, 0x3d	; 61
    c60e:	de b7       	in	r29, 0x3e	; 62
    c610:	84 ed       	ldi	r24, 0xD4	; 212
    c612:	a8 2e       	mov	r10, r24
    c614:	8e e0       	ldi	r24, 0x0E	; 14
    c616:	b8 2e       	mov	r11, r24
    c618:	01 ee       	ldi	r16, 0xE1	; 225
    c61a:	1e e0       	ldi	r17, 0x0E	; 14
    c61c:	9b ed       	ldi	r25, 0xDB	; 219
    c61e:	e9 2e       	mov	r14, r25
    c620:	9e e0       	ldi	r25, 0x0E	; 14
    c622:	f9 2e       	mov	r15, r25
    c624:	20 e1       	ldi	r18, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c626:	dd 24       	eor	r13, r13
    c628:	d3 94       	inc	r13
    c62a:	6f ef       	ldi	r22, 0xFF	; 255
    c62c:	62 0f       	add	r22, r18
    c62e:	f5 01       	movw	r30, r10
    c630:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c632:	90 81       	ld	r25, Z
    c634:	35 97       	sbiw	r30, 0x05	; 5
    c636:	92 30       	cpi	r25, 0x02	; 2
    c638:	09 f4       	brne	.+2      	; 0xc63c <update_enemy_shots+0x48>
    c63a:	4e c0       	rjmp	.+156    	; 0xc6d8 <update_enemy_shots+0xe4>
    c63c:	80 81       	ld	r24, Z
    c63e:	88 23       	and	r24, r24
    c640:	09 f4       	brne	.+2      	; 0xc644 <update_enemy_shots+0x50>
    c642:	4a c0       	rjmp	.+148    	; 0xc6d8 <update_enemy_shots+0xe4>
    c644:	d5 01       	movw	r26, r10
    c646:	8c 91       	ld	r24, X
    c648:	8c 33       	cpi	r24, 0x3C	; 60
    c64a:	08 f4       	brcc	.+2      	; 0xc64e <update_enemy_shots+0x5a>
    c64c:	45 c0       	rjmp	.+138    	; 0xc6d8 <update_enemy_shots+0xe4>
		{
			game.enemies[i].shot_frame_count = 0;	
    c64e:	1c 92       	st	X, r1
    c650:	f8 01       	movw	r30, r16
    c652:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c654:	80 81       	ld	r24, Z
    c656:	87 30       	cpi	r24, 0x07	; 7
    c658:	09 f0       	breq	.+2      	; 0xc65c <update_enemy_shots+0x68>
    c65a:	45 c0       	rjmp	.+138    	; 0xc6e6 <update_enemy_shots+0xf2>
    c65c:	f8 01       	movw	r30, r16
				{
					if (!game.enemies[i].shot[j].active)
    c65e:	82 91       	ld	r24, -Z
    c660:	81 11       	cpse	r24, r1
    c662:	33 c0       	rjmp	.+102    	; 0xc6ca <update_enemy_shots+0xd6>
					{
						game.enemies[i].shot[j].active = 1;
    c664:	d0 82       	st	Z, r13
    c666:	f5 01       	movw	r30, r10
    c668:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c66a:	40 81       	ld	r20, Z
    c66c:	51 81       	ldd	r21, Z+1	; 0x01
    c66e:	f5 01       	movw	r30, r10
    c670:	54 83       	std	Z+4, r21	; 0x04
    c672:	43 83       	std	Z+3, r20	; 0x03
    c674:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c676:	01 90       	ld	r0, Z+
    c678:	f0 81       	ld	r31, Z
    c67a:	e0 2d       	mov	r30, r0
    c67c:	4f 01       	movw	r8, r30
    c67e:	88 ef       	ldi	r24, 0xF8	; 248
    c680:	88 22       	and	r8, r24
    c682:	16 96       	adiw	r26, 0x06	; 6
    c684:	9c 92       	st	X, r9
    c686:	8e 92       	st	-X, r8
    c688:	15 97       	sbiw	r26, 0x05	; 5
    c68a:	d8 01       	movw	r26, r16
    c68c:	8c 91       	ld	r24, X
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c68e:	94 30       	cpi	r25, 0x04	; 4
    c690:	11 f4       	brne	.+4      	; 0xc696 <update_enemy_shots+0xa2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c692:	f7 01       	movw	r30, r14
    c694:	19 c0       	rjmp	.+50     	; 0xc6c8 <update_enemy_shots+0xd4>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c696:	95 30       	cpi	r25, 0x05	; 5
    c698:	61 f4       	brne	.+24     	; 0xc6b2 <update_enemy_shots+0xbe>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c69a:	d7 01       	movw	r26, r14
    c69c:	8c 93       	st	X, r24
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c69e:	40 91 d2 0d 	lds	r20, 0x0DD2
    c6a2:	50 91 d3 0d 	lds	r21, 0x0DD3
    c6a6:	e4 17       	cp	r30, r20
    c6a8:	f5 07       	cpc	r31, r21
    c6aa:	78 f0       	brcs	.+30     	; 0xc6ca <update_enemy_shots+0xd6>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c6ac:	81 95       	neg	r24
    c6ae:	8c 93       	st	X, r24
    c6b0:	0c c0       	rjmp	.+24     	; 0xc6ca <update_enemy_shots+0xd6>
    c6b2:	f8 01       	movw	r30, r16
    c6b4:	35 97       	sbiw	r30, 0x05	; 5
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c6b6:	80 83       	st	Z, r24
							if (game.player.shared.x <= game.enemies[i].shared.x)
    c6b8:	a0 91 d0 0d 	lds	r26, 0x0DD0
    c6bc:	b0 91 d1 0d 	lds	r27, 0x0DD1
    c6c0:	4a 17       	cp	r20, r26
    c6c2:	5b 07       	cpc	r21, r27
    c6c4:	10 f0       	brcs	.+4      	; 0xc6ca <update_enemy_shots+0xd6>
							{
								game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c6c6:	81 95       	neg	r24
    c6c8:	80 83       	st	Z, r24
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c6ca:	c5 01       	movw	r24, r10
    c6cc:	03 96       	adiw	r24, 0x03	; 3
    c6ce:	29 83       	std	Y+1, r18	; 0x01
    c6d0:	0e 94 82 62 	call	0xc504	; 0xc504 <update_basic_shot>
    c6d4:	29 81       	ldd	r18, Y+1	; 0x01
    c6d6:	07 c0       	rjmp	.+14     	; 0xc6e6 <update_enemy_shots+0xf2>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c6d8:	80 81       	ld	r24, Z
    c6da:	88 23       	and	r24, r24
    c6dc:	21 f0       	breq	.+8      	; 0xc6e6 <update_enemy_shots+0xf2>
		{
			game.enemies[i].shot_frame_count++;
    c6de:	f5 01       	movw	r30, r10
    c6e0:	80 81       	ld	r24, Z
    c6e2:	8f 5f       	subi	r24, 0xFF	; 255
    c6e4:	80 83       	st	Z, r24
    c6e6:	2f 5f       	subi	r18, 0xFF	; 255
    c6e8:	f5 e3       	ldi	r31, 0x35	; 53
    c6ea:	af 0e       	add	r10, r31
    c6ec:	b1 1c       	adc	r11, r1
    c6ee:	0b 5c       	subi	r16, 0xCB	; 203
    c6f0:	1f 4f       	sbci	r17, 0xFF	; 255
    c6f2:	85 e3       	ldi	r24, 0x35	; 53
    c6f4:	e8 0e       	add	r14, r24
    c6f6:	f1 1c       	adc	r15, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c6f8:	25 31       	cpi	r18, 0x15	; 21
    c6fa:	09 f0       	breq	.+2      	; 0xc6fe <update_enemy_shots+0x10a>
    c6fc:	96 cf       	rjmp	.-212    	; 0xc62a <update_enemy_shots+0x36>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c6fe:	0f 90       	pop	r0
    c700:	df 91       	pop	r29
    c702:	cf 91       	pop	r28
    c704:	1f 91       	pop	r17
    c706:	0f 91       	pop	r16
    c708:	ff 90       	pop	r15
    c70a:	ef 90       	pop	r14
    c70c:	df 90       	pop	r13
    c70e:	bf 90       	pop	r11
    c710:	af 90       	pop	r10
    c712:	9f 90       	pop	r9
    c714:	8f 90       	pop	r8
    c716:	08 95       	ret

0000c718 <animate_enemies>:

void animate_enemies()
{
    c718:	2f 92       	push	r2
    c71a:	3f 92       	push	r3
    c71c:	4f 92       	push	r4
    c71e:	5f 92       	push	r5
    c720:	6f 92       	push	r6
    c722:	7f 92       	push	r7
    c724:	8f 92       	push	r8
    c726:	9f 92       	push	r9
    c728:	af 92       	push	r10
    c72a:	cf 92       	push	r12
    c72c:	df 92       	push	r13
    c72e:	ef 92       	push	r14
    c730:	ff 92       	push	r15
    c732:	0f 93       	push	r16
    c734:	1f 93       	push	r17
    c736:	cf 93       	push	r28
    c738:	df 93       	push	r29
    c73a:	00 d0       	rcall	.+0      	; 0xc73c <animate_enemies+0x24>
    c73c:	00 d0       	rcall	.+0      	; 0xc73e <animate_enemies+0x26>
    c73e:	cd b7       	in	r28, 0x3d	; 61
    c740:	de b7       	in	r29, 0x3e	; 62
    c742:	4d ec       	ldi	r20, 0xCD	; 205
    c744:	24 2e       	mov	r2, r20
    c746:	4e e0       	ldi	r20, 0x0E	; 14
    c748:	34 2e       	mov	r3, r20
    c74a:	50 ed       	ldi	r21, 0xD0	; 208
    c74c:	65 2e       	mov	r6, r21
    c74e:	5e e0       	ldi	r21, 0x0E	; 14
    c750:	75 2e       	mov	r7, r21
    c752:	61 ed       	ldi	r22, 0xD1	; 209
    c754:	86 2e       	mov	r8, r22
    c756:	6e e0       	ldi	r22, 0x0E	; 14
    c758:	96 2e       	mov	r9, r22
    c75a:	86 ec       	ldi	r24, 0xC6	; 198
    c75c:	9e e0       	ldi	r25, 0x0E	; 14
    c75e:	9c 83       	std	Y+4, r25	; 0x04
    c760:	8b 83       	std	Y+3, r24	; 0x03
    c762:	ae ec       	ldi	r26, 0xCE	; 206
    c764:	be e0       	ldi	r27, 0x0E	; 14
    c766:	ba 83       	std	Y+2, r27	; 0x02
    c768:	a9 83       	std	Y+1, r26	; 0x01
    c76a:	41 2c       	mov	r4, r1
    c76c:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c76e:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c770:	70 e1       	ldi	r23, 0x10	; 16
    c772:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c774:	f1 01       	movw	r30, r2
    c776:	80 81       	ld	r24, Z
    c778:	88 23       	and	r24, r24
    c77a:	09 f4       	brne	.+2      	; 0xc77e <animate_enemies+0x66>
    c77c:	8a c0       	rjmp	.+276    	; 0xc892 <animate_enemies+0x17a>
    c77e:	a9 81       	ldd	r26, Y+1	; 0x01
    c780:	ba 81       	ldd	r27, Y+2	; 0x02
    c782:	8c 91       	ld	r24, X
    c784:	84 fd       	sbrc	r24, 4
    c786:	85 c0       	rjmp	.+266    	; 0xc892 <animate_enemies+0x17a>
		{
			if (game.enemies[i].shared.x < game.camera_x || game.enemies[i].shared.y < game.camera_y || game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8)
    c788:	eb 81       	ldd	r30, Y+3	; 0x03
    c78a:	fc 81       	ldd	r31, Y+4	; 0x04
    c78c:	20 81       	ld	r18, Z
    c78e:	31 81       	ldd	r19, Z+1	; 0x01
    c790:	e0 91 b2 0d 	lds	r30, 0x0DB2
    c794:	f0 91 b3 0d 	lds	r31, 0x0DB3
    c798:	2e 17       	cp	r18, r30
    c79a:	3f 07       	cpc	r19, r31
    c79c:	88 f0       	brcs	.+34     	; 0xc7c0 <animate_enemies+0xa8>
    c79e:	ab 81       	ldd	r26, Y+3	; 0x03
    c7a0:	bc 81       	ldd	r27, Y+4	; 0x04
    c7a2:	12 96       	adiw	r26, 0x02	; 2
    c7a4:	ed 90       	ld	r14, X+
    c7a6:	fc 90       	ld	r15, X
    c7a8:	13 97       	sbiw	r26, 0x03	; 3
    c7aa:	80 91 ba 0d 	lds	r24, 0x0DBA
    c7ae:	90 e0       	ldi	r25, 0x00	; 0
    c7b0:	e8 16       	cp	r14, r24
    c7b2:	f9 06       	cpc	r15, r25
    c7b4:	28 f0       	brcs	.+10     	; 0xc7c0 <animate_enemies+0xa8>
    c7b6:	88 53       	subi	r24, 0x38	; 56
    c7b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ba:	8e 15       	cp	r24, r14
    c7bc:	9f 05       	cpc	r25, r15
    c7be:	70 f4       	brcc	.+28     	; 0xc7dc <animate_enemies+0xc4>
			{
				game.enemies[i].active = 0;
    c7c0:	f1 01       	movw	r30, r2
    c7c2:	10 82       	st	Z, r1
				game.active_enemies--;
    c7c4:	80 91 cd 0d 	lds	r24, 0x0DCD
    c7c8:	81 50       	subi	r24, 0x01	; 1
    c7ca:	80 93 cd 0d 	sts	0x0DCD, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c7ce:	d4 01       	movw	r26, r8
    c7d0:	0c 91       	ld	r16, X
    c7d2:	f3 01       	movw	r30, r6
    c7d4:	20 81       	ld	r18, Z
    c7d6:	40 e0       	ldi	r20, 0x00	; 0
    c7d8:	60 ee       	ldi	r22, 0xE0	; 224
    c7da:	6e c0       	rjmp	.+220    	; 0xc8b8 <animate_enemies+0x1a0>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c7dc:	02 2f       	mov	r16, r18
    c7de:	0e 1b       	sub	r16, r30
    c7e0:	20 91 dc 0d 	lds	r18, 0x0DDC
    c7e4:	22 0f       	add	r18, r18
    c7e6:	22 0f       	add	r18, r18
    c7e8:	22 0f       	add	r18, r18
    c7ea:	40 91 db 0d 	lds	r20, 0x0DDB
    c7ee:	44 0f       	add	r20, r20
    c7f0:	44 0f       	add	r20, r20
    c7f2:	44 0f       	add	r20, r20
    c7f4:	80 91 d0 0d 	lds	r24, 0x0DD0
    c7f8:	98 e0       	ldi	r25, 0x08	; 8
    c7fa:	a9 2e       	mov	r10, r25
    c7fc:	38 e0       	ldi	r19, 0x08	; 8
    c7fe:	c3 2e       	mov	r12, r19
    c800:	60 91 d2 0d 	lds	r22, 0x0DD2
    c804:	8e 1b       	sub	r24, r30
    c806:	0e 94 24 51 	call	0xa248	; 0xa248 <LBCollides>
    c80a:	88 23       	and	r24, r24
    c80c:	79 f0       	breq	.+30     	; 0xc82c <animate_enemies+0x114>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c80e:	80 91 d8 0d 	lds	r24, 0x0DD8
    c812:	84 fd       	sbrc	r24, 4
    c814:	0b c0       	rjmp	.+22     	; 0xc82c <animate_enemies+0x114>
			)
			{
				SFX_PLAYER_EXPLODE;
    c816:	41 e0       	ldi	r20, 0x01	; 1
    c818:	6f ef       	ldi	r22, 0xFF	; 255
    c81a:	85 e0       	ldi	r24, 0x05	; 5
    c81c:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
				game.player.shield = 0;
    c820:	10 92 df 0d 	sts	0x0DDF, r1
				game.player.flags = EXPLODING;
    c824:	80 e1       	ldi	r24, 0x10	; 16
    c826:	80 93 d8 0d 	sts	0x0DD8, r24
				return;
    c82a:	6c c0       	rjmp	.+216    	; 0xc904 <animate_enemies+0x1ec>
    c82c:	c2 01       	movw	r24, r4
    c82e:	8e 54       	subi	r24, 0x4E	; 78
    c830:	92 4f       	sbci	r25, 0xF2	; 242
    c832:	fc 01       	movw	r30, r24
    c834:	e0 5e       	subi	r30, 0xE0	; 224
    c836:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c838:	20 81       	ld	r18, Z
    c83a:	22 30       	cpi	r18, 0x02	; 2
    c83c:	69 f4       	brne	.+26     	; 0xc858 <animate_enemies+0x140>
    c83e:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c840:	e0 80       	ld	r14, Z
    c842:	01 e0       	ldi	r16, 0x01	; 1
    c844:	d4 01       	movw	r26, r8
    c846:	2c 91       	ld	r18, X
    c848:	f3 01       	movw	r30, r6
    c84a:	40 81       	ld	r20, Z
    c84c:	61 2f       	mov	r22, r17
    c84e:	8b 81       	ldd	r24, Y+3	; 0x03
    c850:	9c 81       	ldd	r25, Y+4	; 0x04
    c852:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <animate_sprite>
    c856:	33 c0       	rjmp	.+102    	; 0xc8be <animate_enemies+0x1a6>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c858:	e1 2c       	mov	r14, r1
    c85a:	00 e0       	ldi	r16, 0x00	; 0
    c85c:	d4 01       	movw	r26, r8
    c85e:	2c 91       	ld	r18, X
    c860:	f3 01       	movw	r30, r6
    c862:	40 81       	ld	r20, Z
    c864:	61 2f       	mov	r22, r17
    c866:	8b 81       	ldd	r24, Y+3	; 0x03
    c868:	9c 81       	ldd	r25, Y+4	; 0x04
    c86a:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <animate_sprite>
    c86e:	82 30       	cpi	r24, 0x02	; 2
    c870:	30 f1       	brcs	.+76     	; 0xc8be <animate_enemies+0x1a6>
			{
				SFX_ENEMY_EXPLODE;
    c872:	41 e0       	ldi	r20, 0x01	; 1
    c874:	6f ef       	ldi	r22, 0xFF	; 255
    c876:	86 e0       	ldi	r24, 0x06	; 6
    c878:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c87c:	a9 81       	ldd	r26, Y+1	; 0x01
    c87e:	ba 81       	ldd	r27, Y+2	; 0x02
    c880:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c882:	f1 01       	movw	r30, r2
    c884:	10 82       	st	Z, r1
				game.active_enemies--;
    c886:	80 91 cd 0d 	lds	r24, 0x0DCD
    c88a:	81 50       	subi	r24, 0x01	; 1
    c88c:	80 93 cd 0d 	sts	0x0DCD, r24
    c890:	16 c0       	rjmp	.+44     	; 0xc8be <animate_enemies+0x1a6>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c892:	a9 81       	ldd	r26, Y+1	; 0x01
    c894:	ba 81       	ldd	r27, Y+2	; 0x02
    c896:	8c 91       	ld	r24, X
    c898:	84 ff       	sbrs	r24, 4
    c89a:	11 c0       	rjmp	.+34     	; 0xc8be <animate_enemies+0x1a6>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c89c:	eb 81       	ldd	r30, Y+3	; 0x03
    c89e:	fc 81       	ldd	r31, Y+4	; 0x04
    c8a0:	42 81       	ldd	r20, Z+2	; 0x02
    c8a2:	80 91 ba 0d 	lds	r24, 0x0DBA
    c8a6:	48 1b       	sub	r20, r24
    c8a8:	60 81       	ld	r22, Z
    c8aa:	80 91 b2 0d 	lds	r24, 0x0DB2
    c8ae:	68 1b       	sub	r22, r24
    c8b0:	d4 01       	movw	r26, r8
    c8b2:	0c 91       	ld	r16, X
    c8b4:	f3 01       	movw	r30, r6
    c8b6:	20 81       	ld	r18, Z
    c8b8:	81 2f       	mov	r24, r17
    c8ba:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c8be:	d4 01       	movw	r26, r8
    c8c0:	9c 91       	ld	r25, X
    c8c2:	f3 01       	movw	r30, r6
    c8c4:	80 81       	ld	r24, Z
    c8c6:	98 9f       	mul	r25, r24
    c8c8:	10 0d       	add	r17, r0
    c8ca:	11 24       	eor	r1, r1
    c8cc:	f5 e3       	ldi	r31, 0x35	; 53
    c8ce:	2f 0e       	add	r2, r31
    c8d0:	31 1c       	adc	r3, r1
    c8d2:	85 e3       	ldi	r24, 0x35	; 53
    c8d4:	48 0e       	add	r4, r24
    c8d6:	51 1c       	adc	r5, r1
    c8d8:	95 e3       	ldi	r25, 0x35	; 53
    c8da:	69 0e       	add	r6, r25
    c8dc:	71 1c       	adc	r7, r1
    c8de:	a5 e3       	ldi	r26, 0x35	; 53
    c8e0:	8a 0e       	add	r8, r26
    c8e2:	91 1c       	adc	r9, r1
    c8e4:	eb 81       	ldd	r30, Y+3	; 0x03
    c8e6:	fc 81       	ldd	r31, Y+4	; 0x04
    c8e8:	f5 96       	adiw	r30, 0x35	; 53
    c8ea:	fc 83       	std	Y+4, r31	; 0x04
    c8ec:	eb 83       	std	Y+3, r30	; 0x03
    c8ee:	89 81       	ldd	r24, Y+1	; 0x01
    c8f0:	9a 81       	ldd	r25, Y+2	; 0x02
    c8f2:	c5 96       	adiw	r24, 0x35	; 53
    c8f4:	9a 83       	std	Y+2, r25	; 0x02
    c8f6:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c8f8:	99 e0       	ldi	r25, 0x09	; 9
    c8fa:	49 16       	cp	r4, r25
    c8fc:	91 e0       	ldi	r25, 0x01	; 1
    c8fe:	59 06       	cpc	r5, r25
    c900:	09 f0       	breq	.+2      	; 0xc904 <animate_enemies+0x1ec>
    c902:	38 cf       	rjmp	.-400    	; 0xc774 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c904:	0f 90       	pop	r0
    c906:	0f 90       	pop	r0
    c908:	0f 90       	pop	r0
    c90a:	0f 90       	pop	r0
    c90c:	df 91       	pop	r29
    c90e:	cf 91       	pop	r28
    c910:	1f 91       	pop	r17
    c912:	0f 91       	pop	r16
    c914:	ff 90       	pop	r15
    c916:	ef 90       	pop	r14
    c918:	df 90       	pop	r13
    c91a:	cf 90       	pop	r12
    c91c:	af 90       	pop	r10
    c91e:	9f 90       	pop	r9
    c920:	8f 90       	pop	r8
    c922:	7f 90       	pop	r7
    c924:	6f 90       	pop	r6
    c926:	5f 90       	pop	r5
    c928:	4f 90       	pop	r4
    c92a:	3f 90       	pop	r3
    c92c:	2f 90       	pop	r2
    c92e:	08 95       	ret

0000c930 <animate_enemy_shots>:

void animate_enemy_shots()
{
    c930:	4f 92       	push	r4
    c932:	5f 92       	push	r5
    c934:	6f 92       	push	r6
    c936:	7f 92       	push	r7
    c938:	8f 92       	push	r8
    c93a:	9f 92       	push	r9
    c93c:	af 92       	push	r10
    c93e:	cf 92       	push	r12
    c940:	df 92       	push	r13
    c942:	ef 92       	push	r14
    c944:	ff 92       	push	r15
    c946:	0f 93       	push	r16
    c948:	1f 93       	push	r17
    c94a:	cf 93       	push	r28
    c94c:	df 93       	push	r29
    c94e:	47 ed       	ldi	r20, 0xD7	; 215
    c950:	84 2e       	mov	r8, r20
    c952:	4e e0       	ldi	r20, 0x0E	; 14
    c954:	94 2e       	mov	r9, r20
    c956:	c0 ee       	ldi	r28, 0xE0	; 224
    c958:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
    c95a:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c95c:	50 e1       	ldi	r21, 0x10	; 16
    c95e:	f5 2e       	mov	r15, r21
    c960:	fe 01       	movw	r30, r28
    c962:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c964:	80 81       	ld	r24, Z
    c966:	87 30       	cpi	r24, 0x07	; 7
    c968:	09 f0       	breq	.+2      	; 0xc96c <animate_enemy_shots+0x3c>
    c96a:	72 c0       	rjmp	.+228    	; 0xca50 <animate_enemy_shots+0x120>
			{
				if (game.enemies[i].shot[j].active)
    c96c:	88 81       	ld	r24, Y
    c96e:	88 23       	and	r24, r24
    c970:	09 f4       	brne	.+2      	; 0xc974 <animate_enemy_shots+0x44>
    c972:	6e c0       	rjmp	.+220    	; 0xca50 <animate_enemy_shots+0x120>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c974:	c4 01       	movw	r24, r8
    c976:	0e 94 0a 5d 	call	0xba14	; 0xba14 <out_of_bounds>
    c97a:	81 11       	cpse	r24, r1
    c97c:	40 c0       	rjmp	.+128    	; 0xc9fe <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c97e:	41 e0       	ldi	r20, 0x01	; 1
    c980:	61 e0       	ldi	r22, 0x01	; 1
    c982:	c4 01       	movw	r24, r8
    c984:	0e 94 41 5d 	call	0xba82	; 0xba82 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c988:	81 11       	cpse	r24, r1
    c98a:	39 c0       	rjmp	.+114    	; 0xc9fe <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c98c:	f4 01       	movw	r30, r8
    c98e:	42 80       	ldd	r4, Z+2	; 0x02
    c990:	53 80       	ldd	r5, Z+3	; 0x03
    c992:	60 80       	ld	r6, Z
    c994:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c996:	d0 90 b2 0d 	lds	r13, 0x0DB2
    c99a:	06 2d       	mov	r16, r6
    c99c:	0d 19       	sub	r16, r13
    c99e:	20 91 dc 0d 	lds	r18, 0x0DDC
    c9a2:	22 0f       	add	r18, r18
    c9a4:	22 0f       	add	r18, r18
    c9a6:	22 0f       	add	r18, r18
    c9a8:	40 91 db 0d 	lds	r20, 0x0DDB
    c9ac:	44 0f       	add	r20, r20
    c9ae:	44 0f       	add	r20, r20
    c9b0:	44 0f       	add	r20, r20
    c9b2:	80 91 d0 0d 	lds	r24, 0x0DD0
    c9b6:	98 e0       	ldi	r25, 0x08	; 8
    c9b8:	a9 2e       	mov	r10, r25
    c9ba:	38 e0       	ldi	r19, 0x08	; 8
    c9bc:	c3 2e       	mov	r12, r19
    c9be:	e4 2c       	mov	r14, r4
    c9c0:	60 91 d2 0d 	lds	r22, 0x0DD2
    c9c4:	8d 19       	sub	r24, r13
    c9c6:	0e 94 24 51 	call	0xa248	; 0xa248 <LBCollides>
    c9ca:	88 23       	and	r24, r24
    c9cc:	f1 f0       	breq	.+60     	; 0xca0a <animate_enemy_shots+0xda>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c9ce:	41 e0       	ldi	r20, 0x01	; 1
    c9d0:	6f ef       	ldi	r22, 0xFF	; 255
    c9d2:	84 e0       	ldi	r24, 0x04	; 4
    c9d4:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c9d8:	80 91 df 0d 	lds	r24, 0x0DDF
    c9dc:	fe 01       	movw	r30, r28
    c9de:	31 97       	sbiw	r30, 0x01	; 1
    c9e0:	90 81       	ld	r25, Z
    c9e2:	89 1b       	sub	r24, r25
    c9e4:	80 93 df 0d 	sts	0x0DDF, r24
#endif
						if (game.player.shield <= 0)
    c9e8:	18 16       	cp	r1, r24
    c9ea:	4c f0       	brlt	.+18     	; 0xc9fe <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    c9ec:	41 e0       	ldi	r20, 0x01	; 1
    c9ee:	6f ef       	ldi	r22, 0xFF	; 255
    c9f0:	85 e0       	ldi	r24, 0x05	; 5
    c9f2:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
							game.player.shield = 0;
    c9f6:	10 92 df 0d 	sts	0x0DDF, r1
							game.player.flags = EXPLODING;
    c9fa:	f0 92 d8 0d 	sts	0x0DD8, r15
						}
						game.enemies[i].shot[j].active = 0;
    c9fe:	18 82       	st	Y, r1
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    ca00:	01 e0       	ldi	r16, 0x01	; 1
    ca02:	21 e0       	ldi	r18, 0x01	; 1
    ca04:	40 e0       	ldi	r20, 0x00	; 0
    ca06:	60 ee       	ldi	r22, 0xE0	; 224
    ca08:	20 c0       	rjmp	.+64     	; 0xca4a <animate_enemy_shots+0x11a>
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    ca0a:	00 91 cc 0d 	lds	r16, 0x0DCC
    ca0e:	60 2f       	mov	r22, r16
    ca10:	fe 01       	movw	r30, r28
    ca12:	34 97       	sbiw	r30, 0x04	; 4
    ca14:	80 81       	ld	r24, Z
    ca16:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <LBMoveDelta>
    ca1a:	68 0e       	add	r6, r24
    ca1c:	79 1e       	adc	r7, r25
    ca1e:	f4 01       	movw	r30, r8
    ca20:	71 82       	std	Z+1, r7	; 0x01
    ca22:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    ca24:	60 2f       	mov	r22, r16
    ca26:	fe 01       	movw	r30, r28
    ca28:	35 97       	sbiw	r30, 0x05	; 5
    ca2a:	80 81       	ld	r24, Z
    ca2c:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <LBMoveDelta>
    ca30:	48 0e       	add	r4, r24
    ca32:	59 1e       	adc	r5, r25
    ca34:	f4 01       	movw	r30, r8
    ca36:	53 82       	std	Z+3, r5	; 0x03
    ca38:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    ca3a:	80 91 ba 0d 	lds	r24, 0x0DBA
    ca3e:	44 2d       	mov	r20, r4
    ca40:	48 1b       	sub	r20, r24
    ca42:	66 2d       	mov	r22, r6
    ca44:	6d 19       	sub	r22, r13
    ca46:	01 e0       	ldi	r16, 0x01	; 1
    ca48:	21 e0       	ldi	r18, 0x01	; 1
    ca4a:	81 2f       	mov	r24, r17
    ca4c:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
					}
				}
			}
			slot += 1;
    ca50:	1f 5f       	subi	r17, 0xFF	; 255
    ca52:	f5 e3       	ldi	r31, 0x35	; 53
    ca54:	8f 0e       	add	r8, r31
    ca56:	91 1c       	adc	r9, r1
    ca58:	e5 96       	adiw	r28, 0x35	; 53

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    ca5a:	14 31       	cpi	r17, 0x14	; 20
    ca5c:	09 f0       	breq	.+2      	; 0xca60 <animate_enemy_shots+0x130>
    ca5e:	80 cf       	rjmp	.-256    	; 0xc960 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    ca60:	df 91       	pop	r29
    ca62:	cf 91       	pop	r28
    ca64:	1f 91       	pop	r17
    ca66:	0f 91       	pop	r16
    ca68:	ff 90       	pop	r15
    ca6a:	ef 90       	pop	r14
    ca6c:	df 90       	pop	r13
    ca6e:	cf 90       	pop	r12
    ca70:	af 90       	pop	r10
    ca72:	9f 90       	pop	r9
    ca74:	8f 90       	pop	r8
    ca76:	7f 90       	pop	r7
    ca78:	6f 90       	pop	r6
    ca7a:	5f 90       	pop	r5
    ca7c:	4f 90       	pop	r4
    ca7e:	08 95       	ret

0000ca80 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    ca80:	ef 92       	push	r14
    ca82:	ff 92       	push	r15
    ca84:	0f 93       	push	r16
    ca86:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    ca88:	c8 2f       	mov	r28, r24
    ca8a:	e6 2e       	mov	r14, r22
    ca8c:	f1 2c       	mov	r15, r1
    ca8e:	e8 0e       	add	r14, r24
    ca90:	f1 1c       	adc	r15, r1
    ca92:	8c 2f       	mov	r24, r28
    ca94:	90 e0       	ldi	r25, 0x00	; 0
    ca96:	8e 15       	cp	r24, r14
    ca98:	9f 05       	cpc	r25, r15
    ca9a:	7c f4       	brge	.+30     	; 0xcaba <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    ca9c:	40 e0       	ldi	r20, 0x00	; 0
    ca9e:	62 e5       	ldi	r22, 0x52	; 82
    caa0:	77 e3       	ldi	r23, 0x37	; 55
    caa2:	8c 2f       	mov	r24, r28
    caa4:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    caa8:	01 e0       	ldi	r16, 0x01	; 1
    caaa:	21 e0       	ldi	r18, 0x01	; 1
    caac:	40 e0       	ldi	r20, 0x00	; 0
    caae:	60 ee       	ldi	r22, 0xE0	; 224
    cab0:	8c 2f       	mov	r24, r28
    cab2:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cab6:	cf 5f       	subi	r28, 0xFF	; 255
    cab8:	ec cf       	rjmp	.-40     	; 0xca92 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    caba:	cf 91       	pop	r28
    cabc:	0f 91       	pop	r16
    cabe:	ff 90       	pop	r15
    cac0:	ef 90       	pop	r14
    cac2:	08 95       	ret

0000cac4 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    cac4:	61 e0       	ldi	r22, 0x01	; 1
    cac6:	81 e0       	ldi	r24, 0x01	; 1
    cac8:	0e 94 ad 4f 	call	0x9f5a	; 0x9f5a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cacc:	64 e1       	ldi	r22, 0x14	; 20
    cace:	80 e0       	ldi	r24, 0x00	; 0
    cad0:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
	LBRotateSprites();
    cad4:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	ClearVram();
    cad8:	0e 94 93 40 	call	0x8126	; 0x8126 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cadc:	60 e0       	ldi	r22, 0x00	; 0
    cade:	81 e0       	ldi	r24, 0x01	; 1
    cae0:	0c 94 a1 4f 	jmp	0x9f42	; 0x9f42 <FadeIn>

0000cae4 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    cae4:	0f 93       	push	r16
    cae6:	cf 93       	push	r28
    cae8:	df 93       	push	r29
    caea:	c8 2f       	mov	r28, r24
    caec:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    caee:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    caf2:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    caf6:	8d e1       	ldi	r24, 0x1D	; 29
    caf8:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    cafc:	85 e5       	ldi	r24, 0x55	; 85
    cafe:	97 e3       	ldi	r25, 0x37	; 55
    cb00:	90 93 b1 0c 	sts	0x0CB1, r25
    cb04:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    cb08:	83 e0       	ldi	r24, 0x03	; 3
    cb0a:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    cb0e:	82 e0       	ldi	r24, 0x02	; 2
    cb10:	0e 94 8e 59 	call	0xb31c	; 0xb31c <clear_overlay>
	game.current_level_index = index;
    cb14:	c0 93 c7 0d 	sts	0x0DC7, r28
	game.level_ended = 0;
    cb18:	10 92 cf 0d 	sts	0x0DCF, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cb1c:	10 92 49 0e 	sts	0x0E49, r1
    cb20:	10 92 48 0e 	sts	0x0E48, r1
	p->pressed = 0;
    cb24:	10 92 45 0e 	sts	0x0E45, r1
    cb28:	10 92 44 0e 	sts	0x0E44, r1
	p->released = 0;
    cb2c:	10 92 47 0e 	sts	0x0E47, r1
    cb30:	10 92 46 0e 	sts	0x0E46, r1
	p->held_cycles = 0;
    cb34:	10 92 4a 0e 	sts	0x0E4A, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    cb38:	10 92 c4 0e 	sts	0x0EC4, r1
    cb3c:	10 92 c3 0e 	sts	0x0EC3, r1
	p->pressed = 0;
    cb40:	10 92 c0 0e 	sts	0x0EC0, r1
    cb44:	10 92 bf 0e 	sts	0x0EBF, r1
	p->released = 0;
    cb48:	10 92 c2 0e 	sts	0x0EC2, r1
    cb4c:	10 92 c1 0e 	sts	0x0EC1, r1
	p->held_cycles = 0;
    cb50:	10 92 c5 0e 	sts	0x0EC5, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    cb54:	8c 2f       	mov	r24, r28
    cb56:	90 e0       	ldi	r25, 0x00	; 0
    cb58:	8a 30       	cpi	r24, 0x0A	; 10
    cb5a:	91 05       	cpc	r25, r1
    cb5c:	c0 f4       	brcc	.+48     	; 0xcb8e <load_level+0xaa>
    cb5e:	fc 01       	movw	r30, r24
    cb60:	e8 5c       	subi	r30, 0xC8	; 200
    cb62:	ff 4f       	sbci	r31, 0xFF	; 255
    cb64:	0c 94 0d 71 	jmp	0xe21a	; 0xe21a <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cb68:	8d e5       	ldi	r24, 0x5D	; 93
    cb6a:	95 e7       	ldi	r25, 0x75	; 117
    cb6c:	0e c0       	rjmp	.+28     	; 0xcb8a <load_level+0xa6>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cb6e:	8c e5       	ldi	r24, 0x5C	; 92
    cb70:	94 e7       	ldi	r25, 0x74	; 116
    cb72:	0b c0       	rjmp	.+22     	; 0xcb8a <load_level+0xa6>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    cb74:	8b e5       	ldi	r24, 0x5B	; 91
    cb76:	93 e7       	ldi	r25, 0x73	; 115
    cb78:	08 c0       	rjmp	.+16     	; 0xcb8a <load_level+0xa6>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    cb7a:	8a e5       	ldi	r24, 0x5A	; 90
    cb7c:	92 e7       	ldi	r25, 0x72	; 114
    cb7e:	05 c0       	rjmp	.+10     	; 0xcb8a <load_level+0xa6>
		case 7: map_level_info((char*) map_level_space); break;
		case 8: map_level_info((char*) map_level_desert); break;
    cb80:	89 e5       	ldi	r24, 0x59	; 89
    cb82:	91 e7       	ldi	r25, 0x71	; 113
    cb84:	02 c0       	rjmp	.+4      	; 0xcb8a <load_level+0xa6>
		case 9: map_level_info((char*) map_level_space); break;
    cb86:	88 e5       	ldi	r24, 0x58	; 88
    cb88:	90 e7       	ldi	r25, 0x70	; 112
    cb8a:	0e 94 c6 5b 	call	0xb78c	; 0xb78c <map_level_info>
	}
	game.column_count = 0;
    cb8e:	10 92 c3 0d 	sts	0x0DC3, r1
	game.camera_x = get_camera_x(index);
    cb92:	10 92 b3 0d 	sts	0x0DB3, r1
    cb96:	10 92 b2 0d 	sts	0x0DB2, r1
	game.camera_y = get_camera_y(index);
    cb9a:	10 92 ba 0d 	sts	0x0DBA, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    cb9e:	88 e1       	ldi	r24, 0x18	; 24
    cba0:	90 e0       	ldi	r25, 0x00	; 0
    cba2:	90 93 d1 0d 	sts	0x0DD1, r25
    cba6:	80 93 d0 0d 	sts	0x0DD0, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    cbaa:	88 ea       	ldi	r24, 0xA8	; 168
    cbac:	90 e0       	ldi	r25, 0x00	; 0
    cbae:	90 93 d3 0d 	sts	0x0DD3, r25
    cbb2:	80 93 d2 0d 	sts	0x0DD2, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    cbb6:	28 ed       	ldi	r18, 0xD8	; 216
    cbb8:	37 e0       	ldi	r19, 0x07	; 7
    cbba:	30 93 4c 0e 	sts	0x0E4C, r19
    cbbe:	20 93 4b 0e 	sts	0x0E4B, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    cbc2:	90 93 4e 0e 	sts	0x0E4E, r25
    cbc6:	80 93 4d 0e 	sts	0x0E4D, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cbca:	8d e1       	ldi	r24, 0x1D	; 29
    cbcc:	80 93 bb 0d 	sts	0x0DBB, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cbd0:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cbd4:	8a e1       	ldi	r24, 0x1A	; 26
    cbd6:	80 93 bc 0d 	sts	0x0DBC, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cbda:	80 93 c0 0d 	sts	0x0DC0, r24
	game.scroll_x = 0;
    cbde:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    cbe2:	10 92 be 0d 	sts	0x0DBE, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    cbe6:	8a e0       	ldi	r24, 0x0A	; 10
    cbe8:	80 93 ce 0d 	sts	0x0DCE, r24
	render_camera_view();
    cbec:	0e 94 ce 59 	call	0xb39c	; 0xb39c <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    cbf0:	44 e0       	ldi	r20, 0x04	; 4
    cbf2:	5b e0       	ldi	r21, 0x0B	; 11
    cbf4:	6d e1       	ldi	r22, 0x1D	; 29
    cbf6:	80 e0       	ldi	r24, 0x00	; 0
    cbf8:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cbfc:	47 ef       	ldi	r20, 0xF7	; 247
    cbfe:	5a e0       	ldi	r21, 0x0A	; 10
    cc00:	6d e1       	ldi	r22, 0x1D	; 29
    cc02:	82 e1       	ldi	r24, 0x12	; 18
    cc04:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cc08:	4d ef       	ldi	r20, 0xFD	; 253
    cc0a:	5a e0       	ldi	r21, 0x0A	; 10
    cc0c:	6e e1       	ldi	r22, 0x1E	; 30
    cc0e:	80 e0       	ldi	r24, 0x00	; 0
    cc10:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    cc14:	4c e0       	ldi	r20, 0x0C	; 12
    cc16:	5b e0       	ldi	r21, 0x0B	; 11
    cc18:	6e e1       	ldi	r22, 0x1E	; 30
    cc1a:	81 e1       	ldi	r24, 0x11	; 17
    cc1c:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    cc20:	46 eb       	ldi	r20, 0xB6	; 182
    cc22:	5a e0       	ldi	r21, 0x0A	; 10
    cc24:	6f e1       	ldi	r22, 0x1F	; 31
    cc26:	81 e1       	ldi	r24, 0x11	; 17
    cc28:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cc2c:	21 e0       	ldi	r18, 0x01	; 1
    cc2e:	40 91 df 0d 	lds	r20, 0x0DDF
    cc32:	6d e1       	ldi	r22, 0x1D	; 29
    cc34:	89 e0       	ldi	r24, 0x09	; 9
    cc36:	0e 94 ba 50 	call	0xa174	; 0xa174 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cc3a:	40 91 b8 0d 	lds	r20, 0x0DB8
    cc3e:	50 91 b9 0d 	lds	r21, 0x0DB9
    cc42:	21 e0       	ldi	r18, 0x01	; 1
    cc44:	6d e1       	ldi	r22, 0x1D	; 29
    cc46:	8b e1       	ldi	r24, 0x1B	; 27
    cc48:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cc4c:	21 e0       	ldi	r18, 0x01	; 1
    cc4e:	40 91 c5 0d 	lds	r20, 0x0DC5
    cc52:	6e e1       	ldi	r22, 0x1E	; 30
    cc54:	89 e0       	ldi	r24, 0x09	; 9
    cc56:	0e 94 ba 50 	call	0xa174	; 0xa174 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cc5a:	40 91 b6 0d 	lds	r20, 0x0DB6
    cc5e:	50 91 b7 0d 	lds	r21, 0x0DB7
    cc62:	21 e0       	ldi	r18, 0x01	; 1
    cc64:	6e e1       	ldi	r22, 0x1E	; 30
    cc66:	8b e1       	ldi	r24, 0x1B	; 27
    cc68:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cc6c:	40 91 b4 0d 	lds	r20, 0x0DB4
    cc70:	50 91 b5 0d 	lds	r21, 0x0DB5
    cc74:	21 e0       	ldi	r18, 0x01	; 1
    cc76:	6f e1       	ldi	r22, 0x1F	; 31
    cc78:	8b e1       	ldi	r24, 0x1B	; 27
    cc7a:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cc7e:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    cc82:	81 11       	cpse	r24, r1
    cc84:	39 c0       	rjmp	.+114    	; 0xccf8 <load_level+0x214>
    cc86:	dd 23       	and	r29, r29
    cc88:	b9 f1       	breq	.+110    	; 0xccf8 <load_level+0x214>
	{
		map_ship();
    cc8a:	0e 94 b1 5b 	call	0xb762	; 0xb762 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cc8e:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cc90:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cc92:	81 e0       	ldi	r24, 0x01	; 1
    cc94:	90 e0       	ldi	r25, 0x00	; 0
    cc96:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cc9a:	8c 2f       	mov	r24, r28
    cc9c:	90 e0       	ldi	r25, 0x00	; 0
    cc9e:	88 3a       	cpi	r24, 0xA8	; 168
    cca0:	91 05       	cpc	r25, r1
    cca2:	74 f0       	brlt	.+28     	; 0xccc0 <load_level+0x1dc>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cca4:	40 e0       	ldi	r20, 0x00	; 0
    cca6:	66 e2       	ldi	r22, 0x26	; 38
    cca8:	77 e3       	ldi	r23, 0x37	; 55
    ccaa:	80 e0       	ldi	r24, 0x00	; 0
    ccac:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    ccb0:	03 e0       	ldi	r16, 0x03	; 3
    ccb2:	22 e0       	ldi	r18, 0x02	; 2
    ccb4:	48 ea       	ldi	r20, 0xA8	; 168
    ccb6:	68 e1       	ldi	r22, 0x18	; 24
    ccb8:	80 e0       	ldi	r24, 0x00	; 0
    ccba:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
				ship_increment = -3;
    ccbe:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    ccc0:	84 e2       	ldi	r24, 0x24	; 36
    ccc2:	9e e0       	ldi	r25, 0x0E	; 14
    ccc4:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    ccc8:	40 e0       	ldi	r20, 0x00	; 0
    ccca:	bc 01       	movw	r22, r24
    cccc:	86 e0       	ldi	r24, 0x06	; 6
    ccce:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    ccd2:	02 e0       	ldi	r16, 0x02	; 2
    ccd4:	24 e0       	ldi	r18, 0x04	; 4
    ccd6:	4c 2f       	mov	r20, r28
    ccd8:	68 e0       	ldi	r22, 0x08	; 8
    ccda:	86 e0       	ldi	r24, 0x06	; 6
    ccdc:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
			ship_y += ship_increment;
    cce0:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cce2:	39 f4       	brne	.+14     	; 0xccf2 <load_level+0x20e>
			{
				clear_sprites(6, 8);
    cce4:	68 e0       	ldi	r22, 0x08	; 8
    cce6:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cce8:	df 91       	pop	r29
    ccea:	cf 91       	pop	r28
    ccec:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    ccee:	0c 94 40 65 	jmp	0xca80	; 0xca80 <clear_sprites>
				break;
			}
			LBRotateSprites();
    ccf2:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
		}
    ccf6:	cd cf       	rjmp	.-102    	; 0xcc92 <load_level+0x1ae>
	}
}
    ccf8:	df 91       	pop	r29
    ccfa:	cf 91       	pop	r28
    ccfc:	0f 91       	pop	r16
    ccfe:	08 95       	ret

0000cd00 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    cd00:	0f 93       	push	r16
    cd02:	1f 93       	push	r17
    cd04:	cf 93       	push	r28
    cd06:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    cd08:	18 2f       	mov	r17, r24
    cd0a:	c6 2f       	mov	r28, r22
    cd0c:	d0 e0       	ldi	r29, 0x00	; 0
    cd0e:	c8 0f       	add	r28, r24
    cd10:	d1 1d       	adc	r29, r1
    cd12:	81 2f       	mov	r24, r17
    cd14:	90 e0       	ldi	r25, 0x00	; 0
    cd16:	8c 17       	cp	r24, r28
    cd18:	9d 07       	cpc	r25, r29
    cd1a:	4c f4       	brge	.+18     	; 0xcd2e <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cd1c:	01 e0       	ldi	r16, 0x01	; 1
    cd1e:	21 e0       	ldi	r18, 0x01	; 1
    cd20:	40 e0       	ldi	r20, 0x00	; 0
    cd22:	60 ee       	ldi	r22, 0xE0	; 224
    cd24:	81 2f       	mov	r24, r17
    cd26:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cd2a:	1f 5f       	subi	r17, 0xFF	; 255
    cd2c:	f2 cf       	rjmp	.-28     	; 0xcd12 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cd2e:	df 91       	pop	r29
    cd30:	cf 91       	pop	r28
    cd32:	1f 91       	pop	r17
    cd34:	0f 91       	pop	r16
    cd36:	08 95       	ret

0000cd38 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cd38:	fc 01       	movw	r30, r24
    cd3a:	20 81       	ld	r18, Z
    cd3c:	31 81       	ldd	r19, Z+1	; 0x01
    cd3e:	28 70       	andi	r18, 0x08	; 8
    cd40:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    cd42:	81 e0       	ldi	r24, 0x01	; 1
    cd44:	23 2b       	or	r18, r19
    cd46:	09 f4       	brne	.+2      	; 0xcd4a <select_pressed+0x12>
    cd48:	80 e0       	ldi	r24, 0x00	; 0
}
    cd4a:	08 95       	ret

0000cd4c <stream_text_middle>:


void stream_text_middle(const char* dialogue, u8 y)
{
    cd4c:	ff 92       	push	r15
    cd4e:	0f 93       	push	r16
    cd50:	1f 93       	push	r17
    cd52:	cf 93       	push	r28
    cd54:	df 93       	push	r29
    cd56:	ec 01       	movw	r28, r24
    cd58:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    cd5a:	8e e0       	ldi	r24, 0x0E	; 14
    cd5c:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    cd5e:	fe 01       	movw	r30, r28
    cd60:	84 91       	lpm	r24, Z
    cd62:	83 32       	cpi	r24, 0x23	; 35
    cd64:	21 f1       	breq	.+72     	; 0xcdae <stream_text_middle+0x62>
	{
		ln = strnlen_P(dialogue, 255);
    cd66:	6f ef       	ldi	r22, 0xFF	; 255
    cd68:	70 e0       	ldi	r23, 0x00	; 0
    cd6a:	ce 01       	movw	r24, r28
    cd6c:	0e 94 9a 72 	call	0xe534	; 0xe534 <strnlen_P>
		x = 14 - ln / 2;
    cd70:	86 95       	lsr	r24
    cd72:	0f 2d       	mov	r16, r15
    cd74:	08 1b       	sub	r16, r24
    cd76:	0c 1b       	sub	r16, r28
    cd78:	8c 2f       	mov	r24, r28
    cd7a:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    cd7c:	21 96       	adiw	r28, 0x01	; 1
    cd7e:	fe 01       	movw	r30, r28
    cd80:	31 97       	sbiw	r30, 0x01	; 1
    cd82:	44 91       	lpm	r20, Z
    cd84:	44 23       	and	r20, r20
    cd86:	89 f0       	breq	.+34     	; 0xcdaa <stream_text_middle+0x5e>
		{
			LBPrintChar(x++, y, c);
    cd88:	61 2f       	mov	r22, r17
    cd8a:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    cd8e:	60 e0       	ldi	r22, 0x00	; 0
    cd90:	84 e4       	ldi	r24, 0x44	; 68
    cd92:	9e e0       	ldi	r25, 0x0E	; 14
    cd94:	0e 94 33 50 	call	0xa066	; 0xa066 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_B)) WaitUs(CHARACTER_DELAY_US);
    cd98:	80 91 48 0e 	lds	r24, 0x0E48
    cd9c:	80 fd       	sbrc	r24, 0
    cd9e:	ec cf       	rjmp	.-40     	; 0xcd78 <stream_text_middle+0x2c>
    cda0:	80 e7       	ldi	r24, 0x70	; 112
    cda2:	97 e1       	ldi	r25, 0x17	; 23
    cda4:	0e 94 c9 40 	call	0x8192	; 0x8192 <WaitUs>
    cda8:	e7 cf       	rjmp	.-50     	; 0xcd78 <stream_text_middle+0x2c>
		}
		y++;
    cdaa:	1f 5f       	subi	r17, 0xFF	; 255
    cdac:	d8 cf       	rjmp	.-80     	; 0xcd5e <stream_text_middle+0x12>
	}
}
    cdae:	df 91       	pop	r29
    cdb0:	cf 91       	pop	r28
    cdb2:	1f 91       	pop	r17
    cdb4:	0f 91       	pop	r16
    cdb6:	ff 90       	pop	r15
    cdb8:	08 95       	ret

0000cdba <stream_text_anywhere>:

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cdba:	ff 92       	push	r15
    cdbc:	0f 93       	push	r16
    cdbe:	1f 93       	push	r17
    cdc0:	cf 93       	push	r28
    cdc2:	df 93       	push	r29
    cdc4:	f6 2e       	mov	r15, r22
    cdc6:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    cdc8:	fc 01       	movw	r30, r24
    cdca:	24 91       	lpm	r18, Z
    cdcc:	23 32       	cpi	r18, 0x23	; 35
    cdce:	b1 f0       	breq	.+44     	; 0xcdfc <stream_text_anywhere+0x42>
    cdd0:	ec 01       	movw	r28, r24
    cdd2:	0f 2d       	mov	r16, r15
    cdd4:	08 1b       	sub	r16, r24
    cdd6:	8c 2f       	mov	r24, r28
    cdd8:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cdda:	21 96       	adiw	r28, 0x01	; 1
    cddc:	fe 01       	movw	r30, r28
    cdde:	31 97       	sbiw	r30, 0x01	; 1
    cde0:	44 91       	lpm	r20, Z
    cde2:	44 23       	and	r20, r20
    cde4:	41 f0       	breq	.+16     	; 0xcdf6 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    cde6:	61 2f       	mov	r22, r17
    cde8:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    cdec:	80 e7       	ldi	r24, 0x70	; 112
    cdee:	97 e1       	ldi	r25, 0x17	; 23
    cdf0:	0e 94 c9 40 	call	0x8192	; 0x8192 <WaitUs>
    cdf4:	f0 cf       	rjmp	.-32     	; 0xcdd6 <stream_text_anywhere+0x1c>
		}
		y++;
    cdf6:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    cdf8:	ce 01       	movw	r24, r28
    cdfa:	e6 cf       	rjmp	.-52     	; 0xcdc8 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cdfc:	df 91       	pop	r29
    cdfe:	cf 91       	pop	r28
    ce00:	1f 91       	pop	r17
    ce02:	0f 91       	pop	r16
    ce04:	ff 90       	pop	r15
    ce06:	08 95       	ret

0000ce08 <map_particles>:

void map_particles()
{
    ce08:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    ce0a:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    ce0c:	40 e0       	ldi	r20, 0x00	; 0
    ce0e:	66 e4       	ldi	r22, 0x46	; 70
    ce10:	77 e3       	ldi	r23, 0x37	; 55
    ce12:	8c 2f       	mov	r24, r28
    ce14:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    ce18:	cf 5f       	subi	r28, 0xFF	; 255
    ce1a:	c4 31       	cpi	r28, 0x14	; 20
    ce1c:	b9 f7       	brne	.-18     	; 0xce0c <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    ce1e:	cf 91       	pop	r28
    ce20:	08 95       	ret

0000ce22 <place_particles>:

void place_particles()
{
    ce22:	0f 93       	push	r16
    ce24:	1f 93       	push	r17
    ce26:	cf 93       	push	r28
    ce28:	df 93       	push	r29
    ce2a:	1f 92       	push	r1
    ce2c:	cd b7       	in	r28, 0x3d	; 61
    ce2e:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    ce30:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    ce32:	68 ec       	ldi	r22, 0xC8	; 200
    ce34:	80 e0       	ldi	r24, 0x00	; 0
    ce36:	0e 94 4e 51 	call	0xa29c	; 0xa29c <LBRandom>
    ce3a:	48 2f       	mov	r20, r24
    ce3c:	60 ee       	ldi	r22, 0xE0	; 224
    ce3e:	80 e0       	ldi	r24, 0x00	; 0
    ce40:	49 83       	std	Y+1, r20	; 0x01
    ce42:	0e 94 4e 51 	call	0xa29c	; 0xa29c <LBRandom>
    ce46:	68 2f       	mov	r22, r24
    ce48:	01 e0       	ldi	r16, 0x01	; 1
    ce4a:	21 e0       	ldi	r18, 0x01	; 1
    ce4c:	49 81       	ldd	r20, Y+1	; 0x01
    ce4e:	81 2f       	mov	r24, r17
    ce50:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    ce54:	1f 5f       	subi	r17, 0xFF	; 255
    ce56:	14 31       	cpi	r17, 0x14	; 20
    ce58:	61 f7       	brne	.-40     	; 0xce32 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    ce5a:	0f 90       	pop	r0
    ce5c:	df 91       	pop	r29
    ce5e:	cf 91       	pop	r28
    ce60:	1f 91       	pop	r17
    ce62:	0f 91       	pop	r16
    ce64:	08 95       	ret

0000ce66 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    ce66:	ef 92       	push	r14
    ce68:	ff 92       	push	r15
    ce6a:	0f 93       	push	r16
    ce6c:	1f 93       	push	r17
    ce6e:	cf 93       	push	r28
    ce70:	df 93       	push	r29
    ce72:	d8 2f       	mov	r29, r24
    ce74:	16 2f       	mov	r17, r22
    ce76:	80 e0       	ldi	r24, 0x00	; 0
    ce78:	e8 2e       	mov	r14, r24
    ce7a:	80 e1       	ldi	r24, 0x10	; 16
    ce7c:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    ce7e:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    ce80:	f7 01       	movw	r30, r14
    ce82:	40 81       	ld	r20, Z
    ce84:	4d 0f       	add	r20, r29
    ce86:	01 e0       	ldi	r16, 0x01	; 1
    ce88:	21 e0       	ldi	r18, 0x01	; 1
    ce8a:	31 97       	sbiw	r30, 0x01	; 1
    ce8c:	60 81       	ld	r22, Z
    ce8e:	8c 2f       	mov	r24, r28
    ce90:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    ce94:	f7 01       	movw	r30, r14
    ce96:	80 81       	ld	r24, Z
    ce98:	89 3c       	cpi	r24, 0xC9	; 201
    ce9a:	50 f0       	brcs	.+20     	; 0xceb0 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    ce9c:	60 ee       	ldi	r22, 0xE0	; 224
    ce9e:	80 e0       	ldi	r24, 0x00	; 0
    cea0:	0e 94 4e 51 	call	0xa29c	; 0xa29c <LBRandom>
    cea4:	21 e0       	ldi	r18, 0x01	; 1
    cea6:	41 2f       	mov	r20, r17
    cea8:	68 2f       	mov	r22, r24
    ceaa:	8c 2f       	mov	r24, r28
    ceac:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    ceb0:	cf 5f       	subi	r28, 0xFF	; 255
    ceb2:	f4 e0       	ldi	r31, 0x04	; 4
    ceb4:	ef 0e       	add	r14, r31
    ceb6:	f1 1c       	adc	r15, r1
    ceb8:	c4 31       	cpi	r28, 0x14	; 20
    ceba:	11 f7       	brne	.-60     	; 0xce80 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    cebc:	df 91       	pop	r29
    cebe:	cf 91       	pop	r28
    cec0:	1f 91       	pop	r17
    cec2:	0f 91       	pop	r16
    cec4:	ff 90       	pop	r15
    cec6:	ef 90       	pop	r14
    cec8:	08 95       	ret

0000ceca <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    ceca:	82 50       	subi	r24, 0x02	; 2
    cecc:	87 30       	cpi	r24, 0x07	; 7
    cece:	48 f4       	brcc	.+18     	; 0xcee2 <get_emarald_map+0x18>
    ced0:	e8 2f       	mov	r30, r24
    ced2:	f0 e0       	ldi	r31, 0x00	; 0
    ced4:	ee 0f       	add	r30, r30
    ced6:	ff 1f       	adc	r31, r31
    ced8:	ee 5f       	subi	r30, 0xFE	; 254
    ceda:	fa 4f       	sbci	r31, 0xFA	; 250
    cedc:	80 81       	ld	r24, Z
    cede:	91 81       	ldd	r25, Z+1	; 0x01
    cee0:	08 95       	ret
    cee2:	8a e3       	ldi	r24, 0x3A	; 58
    cee4:	97 e3       	ldi	r25, 0x37	; 55
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    cee6:	08 95       	ret

0000cee8 <music_transition>:

void music_transition()
{
	if (is_space())
    cee8:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    ceec:	88 23       	and	r24, r24
    ceee:	19 f0       	breq	.+6      	; 0xcef6 <music_transition+0xe>
	{
		StartSong(spacesong);
    cef0:	8b e3       	ldi	r24, 0x3B	; 59
    cef2:	9b e0       	ldi	r25, 0x0B	; 11
    cef4:	06 c0       	rjmp	.+12     	; 0xcf02 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    cef6:	80 91 c7 0d 	lds	r24, 0x0DC7
    cefa:	88 23       	and	r24, r24
    cefc:	21 f0       	breq	.+8      	; 0xcf06 <music_transition+0x1e>
	{
		StartSong(planetsong);
    cefe:	8b ed       	ldi	r24, 0xDB	; 219
    cf00:	91 e1       	ldi	r25, 0x11	; 17
    cf02:	0c 94 87 43 	jmp	0x870e	; 0x870e <StartSong>
    cf06:	08 95       	ret

0000cf08 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cf08:	cf 92       	push	r12
    cf0a:	df 92       	push	r13
    cf0c:	ef 92       	push	r14
    cf0e:	ff 92       	push	r15
    cf10:	0f 93       	push	r16
    cf12:	1f 93       	push	r17
    cf14:	cf 93       	push	r28
    cf16:	df 93       	push	r29
    cf18:	1f 92       	push	r1
    cf1a:	cd b7       	in	r28, 0x3d	; 61
    cf1c:	de b7       	in	r29, 0x3e	; 62
    cf1e:	c8 2e       	mov	r12, r24
    cf20:	e6 2e       	mov	r14, r22
    cf22:	12 2f       	mov	r17, r18
    cf24:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    cf26:	49 83       	std	Y+1, r20	; 0x01
    cf28:	0e 94 62 65 	call	0xcac4	; 0xcac4 <fade_through>
	Screen.scrollX = 0;
    cf2c:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    cf30:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    cf34:	80 e2       	ldi	r24, 0x20	; 32
    cf36:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    cf3a:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    cf3e:	10 92 bd 0d 	sts	0x0DBD, r1
	game.scroll_y = 0;
    cf42:	10 92 be 0d 	sts	0x0DBE, r1
	map_particles();
    cf46:	0e 94 04 67 	call	0xce08	; 0xce08 <map_particles>
	map_ship();
    cf4a:	0e 94 b1 5b 	call	0xb762	; 0xb762 <map_ship>
	place_particles();
    cf4e:	0e 94 11 67 	call	0xce22	; 0xce22 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    cf52:	4c e3       	ldi	r20, 0x3C	; 60
    cf54:	5f e5       	ldi	r21, 0x5F	; 95
    cf56:	69 81       	ldd	r22, Y+1	; 0x01
    cf58:	80 e0       	ldi	r24, 0x00	; 0
    cf5a:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
	game.current_level_index = index;
    cf5e:	c0 92 c7 0d 	sts	0x0DC7, r12
	music_transition();
    cf62:	0e 94 74 67 	call	0xcee8	; 0xcee8 <music_transition>
	if (!is_space())
    cf66:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    cf6a:	81 11       	cpse	r24, r1
    cf6c:	0f c0       	rjmp	.+30     	; 0xcf8c <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    cf6e:	8c 2d       	mov	r24, r12
    cf70:	0e 94 65 67 	call	0xceca	; 0xceca <get_emarald_map>
    cf74:	40 e0       	ldi	r20, 0x00	; 0
    cf76:	bc 01       	movw	r22, r24
    cf78:	88 e0       	ldi	r24, 0x08	; 8
    cf7a:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    cf7e:	01 e0       	ldi	r16, 0x01	; 1
    cf80:	21 e0       	ldi	r18, 0x01	; 1
    cf82:	40 e3       	ldi	r20, 0x30	; 48
    cf84:	60 e7       	ldi	r22, 0x70	; 112
    cf86:	88 e0       	ldi	r24, 0x08	; 8
    cf88:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cf8c:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    cf8e:	81 e0       	ldi	r24, 0x01	; 1
    cf90:	90 e0       	ldi	r25, 0x00	; 0
    cf92:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    cf96:	84 e2       	ldi	r24, 0x24	; 36
    cf98:	9e e0       	ldi	r25, 0x0E	; 14
    cf9a:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    cf9e:	40 e0       	ldi	r20, 0x00	; 0
    cfa0:	bc 01       	movw	r22, r24
    cfa2:	80 e0       	ldi	r24, 0x00	; 0
    cfa4:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    cfa8:	02 e0       	ldi	r16, 0x02	; 2
    cfaa:	24 e0       	ldi	r18, 0x04	; 4
    cfac:	48 e6       	ldi	r20, 0x68	; 104
    cfae:	68 e6       	ldi	r22, 0x68	; 104
    cfb0:	80 e0       	ldi	r24, 0x00	; 0
    cfb2:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
		frame_counter++;
    cfb6:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    cfb8:	8d 2d       	mov	r24, r13
    cfba:	8f 70       	andi	r24, 0x0F	; 15
    cfbc:	29 f4       	brne	.+10     	; 0xcfc8 <planet_transition+0xc0>
    cfbe:	90 91 b3 0c 	lds	r25, 0x0CB3
    cfc2:	9e 0d       	add	r25, r14
    cfc4:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    cfc8:	6f 2d       	mov	r22, r15
    cfca:	81 2f       	mov	r24, r17
    cfcc:	0e 94 33 67 	call	0xce66	; 0xce66 <animate_particles>
		LBRotateSprites();
    cfd0:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    cfd4:	8f ef       	ldi	r24, 0xFF	; 255
    cfd6:	d8 12       	cpse	r13, r24
    cfd8:	da cf       	rjmp	.-76     	; 0xcf8e <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    cfda:	82 e0       	ldi	r24, 0x02	; 2
    cfdc:	80 93 c6 0d 	sts	0x0DC6, r24
	ClearVram();
    cfe0:	0e 94 93 40 	call	0x8126	; 0x8126 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cfe4:	64 e1       	ldi	r22, 0x14	; 20
    cfe6:	80 e0       	ldi	r24, 0x00	; 0
    cfe8:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
	LBRotateSprites();
    cfec:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	fade_through();
    cff0:	0e 94 62 65 	call	0xcac4	; 0xcac4 <fade_through>
	game.level_score = 0;
    cff4:	10 92 b7 0d 	sts	0x0DB7, r1
    cff8:	10 92 b6 0d 	sts	0x0DB6, r1
	load_level(index, true);
    cffc:	61 e0       	ldi	r22, 0x01	; 1
    cffe:	8c 2d       	mov	r24, r12
    d000:	0e 94 72 65 	call	0xcae4	; 0xcae4 <load_level>
	init_player_state();
    d004:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <init_player_state>
	init_boss_state();
    d008:	0e 94 3f 56 	call	0xac7e	; 0xac7e <init_boss_state>
	init_enemy_state();
}
    d00c:	0f 90       	pop	r0
    d00e:	df 91       	pop	r29
    d010:	cf 91       	pop	r28
    d012:	1f 91       	pop	r17
    d014:	0f 91       	pop	r16
    d016:	ff 90       	pop	r15
    d018:	ef 90       	pop	r14
    d01a:	df 90       	pop	r13
    d01c:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d01e:	0c 94 51 52 	jmp	0xa4a2	; 0xa4a2 <init_enemy_state>

0000d022 <intro>:
}


void intro()
{
    d022:	0f 93       	push	r16
	fade_through();
    d024:	0e 94 62 65 	call	0xcac4	; 0xcac4 <fade_through>
	game.lives = LIVES;
    d028:	e2 eb       	ldi	r30, 0xB2	; 178
    d02a:	fd e0       	ldi	r31, 0x0D	; 13
    d02c:	85 e0       	ldi	r24, 0x05	; 5
    d02e:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d030:	13 82       	std	Z+3, r1	; 0x03
    d032:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d034:	15 82       	std	Z+5, r1	; 0x05
    d036:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d038:	17 82       	std	Z+7, r1	; 0x07
    d03a:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d03c:	8b ed       	ldi	r24, 0xDB	; 219
    d03e:	91 e1       	ldi	r25, 0x11	; 17
    d040:	0e 94 87 43 	call	0x870e	; 0x870e <StartSong>
	LBMapSprite(0, map_emerald_0, 0);
    d044:	40 e0       	ldi	r20, 0x00	; 0
    d046:	6a e3       	ldi	r22, 0x3A	; 58
    d048:	77 e3       	ldi	r23, 0x37	; 55
    d04a:	80 e0       	ldi	r24, 0x00	; 0
    d04c:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    d050:	01 e0       	ldi	r16, 0x01	; 1
    d052:	21 e0       	ldi	r18, 0x01	; 1
    d054:	40 e3       	ldi	r20, 0x30	; 48
    d056:	60 e5       	ldi	r22, 0x50	; 80
    d058:	80 e0       	ldi	r24, 0x00	; 0
    d05a:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d05e:	40 e0       	ldi	r20, 0x00	; 0
    d060:	67 e3       	ldi	r22, 0x37	; 55
    d062:	77 e3       	ldi	r23, 0x37	; 55
    d064:	81 e0       	ldi	r24, 0x01	; 1
    d066:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    d06a:	21 e0       	ldi	r18, 0x01	; 1
    d06c:	40 e3       	ldi	r20, 0x30	; 48
    d06e:	60 e6       	ldi	r22, 0x60	; 96
    d070:	81 e0       	ldi	r24, 0x01	; 1
    d072:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    d076:	40 e0       	ldi	r20, 0x00	; 0
    d078:	64 e3       	ldi	r22, 0x34	; 52
    d07a:	77 e3       	ldi	r23, 0x37	; 55
    d07c:	82 e0       	ldi	r24, 0x02	; 2
    d07e:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    d082:	21 e0       	ldi	r18, 0x01	; 1
    d084:	40 e3       	ldi	r20, 0x30	; 48
    d086:	60 e7       	ldi	r22, 0x70	; 112
    d088:	82 e0       	ldi	r24, 0x02	; 2
    d08a:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    d08e:	40 e0       	ldi	r20, 0x00	; 0
    d090:	61 e3       	ldi	r22, 0x31	; 49
    d092:	77 e3       	ldi	r23, 0x37	; 55
    d094:	83 e0       	ldi	r24, 0x03	; 3
    d096:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    d09a:	21 e0       	ldi	r18, 0x01	; 1
    d09c:	40 e3       	ldi	r20, 0x30	; 48
    d09e:	60 e8       	ldi	r22, 0x80	; 128
    d0a0:	83 e0       	ldi	r24, 0x03	; 3
    d0a2:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    d0a6:	40 e0       	ldi	r20, 0x00	; 0
    d0a8:	6e e2       	ldi	r22, 0x2E	; 46
    d0aa:	77 e3       	ldi	r23, 0x37	; 55
    d0ac:	84 e0       	ldi	r24, 0x04	; 4
    d0ae:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    d0b2:	21 e0       	ldi	r18, 0x01	; 1
    d0b4:	40 e3       	ldi	r20, 0x30	; 48
    d0b6:	60 e9       	ldi	r22, 0x90	; 144
    d0b8:	84 e0       	ldi	r24, 0x04	; 4
    d0ba:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	LBRotateSprites();
    d0be:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	stream_text_middle((const char*) strIntro, 12);
    d0c2:	6c e0       	ldi	r22, 0x0C	; 12
    d0c4:	83 ef       	ldi	r24, 0xF3	; 243
    d0c6:	99 e0       	ldi	r25, 0x09	; 9
    d0c8:	0e 94 a6 66 	call	0xcd4c	; 0xcd4c <stream_text_middle>
	LBWaitSeconds(1);
    d0cc:	81 e0       	ldi	r24, 0x01	; 1
    d0ce:	0e 94 64 51 	call	0xa2c8	; 0xa2c8 <LBWaitSeconds>
	planet_transition(0, 1, 28, -3, 199);
    d0d2:	07 ec       	ldi	r16, 0xC7	; 199
    d0d4:	2d ef       	ldi	r18, 0xFD	; 253
    d0d6:	4c e1       	ldi	r20, 0x1C	; 28
    d0d8:	61 e0       	ldi	r22, 0x01	; 1
    d0da:	80 e0       	ldi	r24, 0x00	; 0
    d0dc:	0e 94 84 67 	call	0xcf08	; 0xcf08 <planet_transition>
}
    d0e0:	0f 91       	pop	r16
    d0e2:	08 95       	ret

0000d0e4 <load_splash>:

void load_splash()
{
	fade_through();
    d0e4:	0e 94 62 65 	call	0xcac4	; 0xcac4 <fade_through>
	Screen.scrollX = 0;
    d0e8:	ef ea       	ldi	r30, 0xAF	; 175
    d0ea:	fc e0       	ldi	r31, 0x0C	; 12
    d0ec:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d0ee:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d0f0:	80 e2       	ldi	r24, 0x20	; 32
    d0f2:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d0f4:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d0f6:	e2 eb       	ldi	r30, 0xB2	; 178
    d0f8:	fd e0       	ldi	r31, 0x0D	; 13
    d0fa:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d0fc:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d0fe:	64 e1       	ldi	r22, 0x14	; 20
    d100:	80 e0       	ldi	r24, 0x00	; 0
    d102:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
	LBRotateSprites();
    d106:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d10a:	40 e2       	ldi	r20, 0x20	; 32
    d10c:	5b e0       	ldi	r21, 0x0B	; 11
    d10e:	6f e0       	ldi	r22, 0x0F	; 15
    d110:	88 e0       	ldi	r24, 0x08	; 8
    d112:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d116:	44 e1       	ldi	r20, 0x14	; 20
    d118:	5b e0       	ldi	r21, 0x0B	; 11
    d11a:	60 e1       	ldi	r22, 0x10	; 16
    d11c:	88 e0       	ldi	r24, 0x08	; 8
    d11e:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d122:	46 e2       	ldi	r20, 0x26	; 38
    d124:	5b e0       	ldi	r21, 0x0B	; 11
    d126:	65 e1       	ldi	r22, 0x15	; 21
    d128:	84 e0       	ldi	r24, 0x04	; 4
    d12a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	DrawMap2(6, 5, map_splash);
    d12e:	41 e6       	ldi	r20, 0x61	; 97
    d130:	50 e6       	ldi	r21, 0x60	; 96
    d132:	65 e0       	ldi	r22, 0x05	; 5
    d134:	86 e0       	ldi	r24, 0x06	; 6
    d136:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d13a:	40 e0       	ldi	r20, 0x00	; 0
    d13c:	6f e4       	ldi	r22, 0x4F	; 79
    d13e:	77 e3       	ldi	r23, 0x37	; 55
    d140:	80 e0       	ldi	r24, 0x00	; 0
    d142:	0c 94 73 51 	jmp	0xa2e6	; 0xa2e6 <LBMapSprite>

0000d146 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d146:	2f 92       	push	r2
    d148:	3f 92       	push	r3
    d14a:	5f 92       	push	r5
    d14c:	6f 92       	push	r6
    d14e:	7f 92       	push	r7
    d150:	8f 92       	push	r8
    d152:	9f 92       	push	r9
    d154:	af 92       	push	r10
    d156:	bf 92       	push	r11
    d158:	cf 92       	push	r12
    d15a:	df 92       	push	r13
    d15c:	ef 92       	push	r14
    d15e:	ff 92       	push	r15
    d160:	0f 93       	push	r16
    d162:	1f 93       	push	r17
    d164:	cf 93       	push	r28
    d166:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d168:	81 e0       	ldi	r24, 0x01	; 1
    d16a:	80 93 c6 0d 	sts	0x0DC6, r24
	game.high_score_index = -1;
    d16e:	8f ef       	ldi	r24, 0xFF	; 255
    d170:	80 93 c4 0d 	sts	0x0DC4, r24
	fade_through();
    d174:	0e 94 62 65 	call	0xcac4	; 0xcac4 <fade_through>
	Screen.scrollX = 0;
    d178:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d17c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d180:	80 e2       	ldi	r24, 0x20	; 32
    d182:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d186:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    d18a:	82 e9       	ldi	r24, 0x92	; 146
    d18c:	9d e0       	ldi	r25, 0x0D	; 13
    d18e:	0e 94 7c 59 	call	0xb2f8	; 0xb2f8 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d192:	44 e1       	ldi	r20, 0x14	; 20
    d194:	5b e0       	ldi	r21, 0x0B	; 11
    d196:	63 e0       	ldi	r22, 0x03	; 3
    d198:	89 e0       	ldi	r24, 0x09	; 9
    d19a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d19e:	40 e0       	ldi	r20, 0x00	; 0
    d1a0:	6a e3       	ldi	r22, 0x3A	; 58
    d1a2:	77 e3       	ldi	r23, 0x37	; 55
    d1a4:	80 e0       	ldi	r24, 0x00	; 0
    d1a6:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d1aa:	40 e0       	ldi	r20, 0x00	; 0
    d1ac:	67 e3       	ldi	r22, 0x37	; 55
    d1ae:	77 e3       	ldi	r23, 0x37	; 55
    d1b0:	81 e0       	ldi	r24, 0x01	; 1
    d1b2:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d1b6:	01 e0       	ldi	r16, 0x01	; 1
    d1b8:	21 e0       	ldi	r18, 0x01	; 1
    d1ba:	48 e1       	ldi	r20, 0x18	; 24
    d1bc:	68 e3       	ldi	r22, 0x38	; 56
    d1be:	80 e0       	ldi	r24, 0x00	; 0
    d1c0:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d1c4:	21 e0       	ldi	r18, 0x01	; 1
    d1c6:	48 e1       	ldi	r20, 0x18	; 24
    d1c8:	68 ea       	ldi	r22, 0xA8	; 168
    d1ca:	81 e0       	ldi	r24, 0x01	; 1
    d1cc:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
    d1d0:	84 e9       	ldi	r24, 0x94	; 148
    d1d2:	a8 2e       	mov	r10, r24
    d1d4:	8d e0       	ldi	r24, 0x0D	; 13
    d1d6:	b8 2e       	mov	r11, r24
    d1d8:	95 e9       	ldi	r25, 0x95	; 149
    d1da:	c9 2e       	mov	r12, r25
    d1dc:	9d e0       	ldi	r25, 0x0D	; 13
    d1de:	d9 2e       	mov	r13, r25
    d1e0:	26 e9       	ldi	r18, 0x96	; 150
    d1e2:	82 2e       	mov	r8, r18
    d1e4:	2d e0       	ldi	r18, 0x0D	; 13
    d1e6:	92 2e       	mov	r9, r18
    d1e8:	74 01       	movw	r14, r8
    d1ea:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d1ec:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d1ee:	35 e0       	ldi	r19, 0x05	; 5
    d1f0:	53 2e       	mov	r5, r19
    d1f2:	4d ea       	ldi	r20, 0xAD	; 173
    d1f4:	64 2e       	mov	r6, r20
    d1f6:	4d e0       	ldi	r20, 0x0D	; 13
    d1f8:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d1fa:	11 e4       	ldi	r17, 0x41	; 65
    d1fc:	0e 2d       	mov	r16, r14
    d1fe:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d200:	80 2f       	mov	r24, r16
    d202:	65 2d       	mov	r22, r5
    d204:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    d208:	41 e0       	ldi	r20, 0x01	; 1
    d20a:	48 0f       	add	r20, r24
    d20c:	20 e0       	ldi	r18, 0x00	; 0
    d20e:	6c 2f       	mov	r22, r28
    d210:	89 e0       	ldi	r24, 0x09	; 9
    d212:	0e 94 ba 50 	call	0xa174	; 0xa174 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d216:	40 e2       	ldi	r20, 0x20	; 32
    d218:	6c 2f       	mov	r22, r28
    d21a:	8a e0       	ldi	r24, 0x0A	; 10
    d21c:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d220:	f5 01       	movw	r30, r10
    d222:	40 81       	ld	r20, Z
    d224:	6c 2f       	mov	r22, r28
    d226:	8b e0       	ldi	r24, 0x0B	; 11
    d228:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d22c:	f6 01       	movw	r30, r12
    d22e:	40 81       	ld	r20, Z
    d230:	6c 2f       	mov	r22, r28
    d232:	8c e0       	ldi	r24, 0x0C	; 12
    d234:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d238:	f7 01       	movw	r30, r14
    d23a:	40 81       	ld	r20, Z
    d23c:	6c 2f       	mov	r22, r28
    d23e:	8d e0       	ldi	r24, 0x0D	; 13
    d240:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d244:	40 e2       	ldi	r20, 0x20	; 32
    d246:	6c 2f       	mov	r22, r28
    d248:	8e e0       	ldi	r24, 0x0E	; 14
    d24a:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d24e:	f7 01       	movw	r30, r14
    d250:	21 80       	ldd	r2, Z+1	; 0x01
    d252:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d254:	21 e0       	ldi	r18, 0x01	; 1
    d256:	a1 01       	movw	r20, r2
    d258:	6c 2f       	mov	r22, r28
    d25a:	83 e1       	ldi	r24, 0x13	; 19
    d25c:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1)
    d260:	20 91 b4 0d 	lds	r18, 0x0DB4
    d264:	30 91 b5 0d 	lds	r19, 0x0DB5
    d268:	22 16       	cp	r2, r18
    d26a:	33 06       	cpc	r3, r19
    d26c:	08 f0       	brcs	.+2      	; 0xd270 <load_high_scores+0x12a>
    d26e:	55 c0       	rjmp	.+170    	; 0xd31a <load_high_scores+0x1d4>
    d270:	80 91 c4 0d 	lds	r24, 0x0DC4
    d274:	8f 3f       	cpi	r24, 0xFF	; 255
    d276:	09 f0       	breq	.+2      	; 0xd27a <load_high_scores+0x134>
    d278:	50 c0       	rjmp	.+160    	; 0xd31a <load_high_scores+0x1d4>
    d27a:	ad ea       	ldi	r26, 0xAD	; 173
    d27c:	bd e0       	ldi	r27, 0x0D	; 13
    d27e:	cd 01       	movw	r24, r26
    d280:	05 97       	sbiw	r24, 0x05	; 5
    d282:	4e e1       	ldi	r20, 0x1E	; 30
    d284:	48 0f       	add	r20, r24
    d286:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d288:	04 17       	cp	r16, r20
    d28a:	40 f4       	brcc	.+16     	; 0xd29c <load_high_scores+0x156>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d28c:	fc 01       	movw	r30, r24
    d28e:	45 2d       	mov	r20, r5
    d290:	01 90       	ld	r0, Z+
    d292:	0d 92       	st	X+, r0
    d294:	4a 95       	dec	r20
    d296:	e1 f7       	brne	.-8      	; 0xd290 <load_high_scores+0x14a>
    d298:	dc 01       	movw	r26, r24
    d29a:	f1 cf       	rjmp	.-30     	; 0xd27e <load_high_scores+0x138>
			}
			scores.data[i] = 'A';
    d29c:	f5 01       	movw	r30, r10
    d29e:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d2a0:	f6 01       	movw	r30, r12
    d2a2:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d2a4:	f7 01       	movw	r30, r14
    d2a6:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d2a8:	32 83       	std	Z+2, r19	; 0x02
    d2aa:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d2ac:	f5 01       	movw	r30, r10
    d2ae:	40 81       	ld	r20, Z
    d2b0:	6c 2f       	mov	r22, r28
    d2b2:	8b e0       	ldi	r24, 0x0B	; 11
    d2b4:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d2b8:	f6 01       	movw	r30, r12
    d2ba:	40 81       	ld	r20, Z
    d2bc:	6c 2f       	mov	r22, r28
    d2be:	8c e0       	ldi	r24, 0x0C	; 12
    d2c0:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d2c4:	f7 01       	movw	r30, r14
    d2c6:	40 81       	ld	r20, Z
    d2c8:	6c 2f       	mov	r22, r28
    d2ca:	8d e0       	ldi	r24, 0x0D	; 13
    d2cc:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d2d0:	40 91 b4 0d 	lds	r20, 0x0DB4
    d2d4:	50 91 b5 0d 	lds	r21, 0x0DB5
    d2d8:	21 e0       	ldi	r18, 0x01	; 1
    d2da:	6c 2f       	mov	r22, r28
    d2dc:	83 e1       	ldi	r24, 0x13	; 19
    d2de:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
			game.high_score_index = i;
    d2e2:	00 93 c4 0d 	sts	0x0DC4, r16
			LBMapSprite(2, map_down_arrow, 0);
    d2e6:	40 e0       	ldi	r20, 0x00	; 0
    d2e8:	6c e4       	ldi	r22, 0x4C	; 76
    d2ea:	77 e3       	ldi	r23, 0x37	; 55
    d2ec:	82 e0       	ldi	r24, 0x02	; 2
    d2ee:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d2f2:	40 e0       	ldi	r20, 0x00	; 0
    d2f4:	69 e4       	ldi	r22, 0x49	; 73
    d2f6:	77 e3       	ldi	r23, 0x37	; 55
    d2f8:	83 e0       	ldi	r24, 0x03	; 3
    d2fa:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d2fe:	01 e0       	ldi	r16, 0x01	; 1
    d300:	21 e0       	ldi	r18, 0x01	; 1
    d302:	4d 2f       	mov	r20, r29
    d304:	68 e5       	ldi	r22, 0x58	; 88
    d306:	82 e0       	ldi	r24, 0x02	; 2
    d308:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d30c:	21 e0       	ldi	r18, 0x01	; 1
    d30e:	40 e1       	ldi	r20, 0x10	; 16
    d310:	4d 0f       	add	r20, r29
    d312:	68 e5       	ldi	r22, 0x58	; 88
    d314:	83 e0       	ldi	r24, 0x03	; 3
    d316:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
		}
		
		ypos += 2;
    d31a:	ce 5f       	subi	r28, 0xFE	; 254
    d31c:	f5 e0       	ldi	r31, 0x05	; 5
    d31e:	af 0e       	add	r10, r31
    d320:	b1 1c       	adc	r11, r1
    d322:	85 e0       	ldi	r24, 0x05	; 5
    d324:	c8 0e       	add	r12, r24
    d326:	d1 1c       	adc	r13, r1
    d328:	e5 e0       	ldi	r30, 0x05	; 5
    d32a:	ee 0e       	add	r14, r30
    d32c:	f1 1c       	adc	r15, r1
    d32e:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d330:	c3 31       	cpi	r28, 0x13	; 19
    d332:	09 f0       	breq	.+2      	; 0xd336 <load_high_scores+0x1f0>
    d334:	63 cf       	rjmp	.-314    	; 0xd1fc <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d336:	4b ee       	ldi	r20, 0xEB	; 235
    d338:	5a e0       	ldi	r21, 0x0A	; 10
    d33a:	66 e1       	ldi	r22, 0x16	; 22
    d33c:	89 e0       	ldi	r24, 0x09	; 9
}
    d33e:	df 91       	pop	r29
    d340:	cf 91       	pop	r28
    d342:	1f 91       	pop	r17
    d344:	0f 91       	pop	r16
    d346:	ff 90       	pop	r15
    d348:	ef 90       	pop	r14
    d34a:	df 90       	pop	r13
    d34c:	cf 90       	pop	r12
    d34e:	bf 90       	pop	r11
    d350:	af 90       	pop	r10
    d352:	9f 90       	pop	r9
    d354:	8f 90       	pop	r8
    d356:	7f 90       	pop	r7
    d358:	6f 90       	pop	r6
    d35a:	5f 90       	pop	r5
    d35c:	3f 90       	pop	r3
    d35e:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d360:	0c 94 9e 50 	jmp	0xa13c	; 0xa13c <LBPrint>

0000d364 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d364:	64 e1       	ldi	r22, 0x14	; 20
    d366:	80 e0       	ldi	r24, 0x00	; 0
    d368:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
	LBRotateSprites();
    d36c:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	init_player_state();
    d370:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <init_player_state>
	init_boss_state();
    d374:	0e 94 3f 56 	call	0xac7e	; 0xac7e <init_boss_state>
	init_enemy_state();
    d378:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <init_enemy_state>
	StopSong();
    d37c:	0e 94 b0 43 	call	0x8760	; 0x8760 <StopSong>
	load_high_scores();
    d380:	0c 94 a3 68 	jmp	0xd146	; 0xd146 <load_high_scores>

0000d384 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d384:	0f 93       	push	r16
    d386:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d388:	80 91 44 0e 	lds	r24, 0x0E44
    d38c:	c0 91 cb 0d 	lds	r28, 0x0DCB
    d390:	85 ff       	sbrs	r24, 5
    d392:	06 c0       	rjmp	.+12     	; 0xd3a0 <update_splash+0x1c>
    d394:	c1 11       	cpse	r28, r1
    d396:	04 c0       	rjmp	.+8      	; 0xd3a0 <update_splash+0x1c>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d398:	81 e0       	ldi	r24, 0x01	; 1
    d39a:	80 93 cb 0d 	sts	0x0DCB, r24
    d39e:	06 c0       	rjmp	.+12     	; 0xd3ac <update_splash+0x28>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d3a0:	84 ff       	sbrs	r24, 4
    d3a2:	0a c0       	rjmp	.+20     	; 0xd3b8 <update_splash+0x34>
    d3a4:	c1 30       	cpi	r28, 0x01	; 1
    d3a6:	41 f4       	brne	.+16     	; 0xd3b8 <update_splash+0x34>
	{
		game.selection = START_SELECTED;
    d3a8:	10 92 cb 0d 	sts	0x0DCB, r1
		SFX_NAVIGATE;
    d3ac:	41 e0       	ldi	r20, 0x01	; 1
    d3ae:	6f ef       	ldi	r22, 0xFF	; 255
    d3b0:	82 e0       	ldi	r24, 0x02	; 2
    d3b2:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
    d3b6:	1c c0       	rjmp	.+56     	; 0xd3f0 <update_splash+0x6c>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d3b8:	84 e4       	ldi	r24, 0x44	; 68
    d3ba:	9e e0       	ldi	r25, 0x0E	; 14
    d3bc:	0e 94 9c 66 	call	0xcd38	; 0xcd38 <select_pressed>
    d3c0:	88 23       	and	r24, r24
    d3c2:	b1 f0       	breq	.+44     	; 0xd3f0 <update_splash+0x6c>
    d3c4:	c1 11       	cpse	r28, r1
    d3c6:	09 c0       	rjmp	.+18     	; 0xd3da <update_splash+0x56>
	{
		SFX_NAVIGATE;
    d3c8:	41 e0       	ldi	r20, 0x01	; 1
    d3ca:	6f ef       	ldi	r22, 0xFF	; 255
    d3cc:	82 e0       	ldi	r24, 0x02	; 2
    d3ce:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d3d2:	cf 91       	pop	r28
    d3d4:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d3d6:	0c 94 11 68 	jmp	0xd022	; 0xd022 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d3da:	c1 30       	cpi	r28, 0x01	; 1
    d3dc:	49 f4       	brne	.+18     	; 0xd3f0 <update_splash+0x6c>
	{
		SFX_NAVIGATE;
    d3de:	41 e0       	ldi	r20, 0x01	; 1
    d3e0:	6f ef       	ldi	r22, 0xFF	; 255
    d3e2:	82 e0       	ldi	r24, 0x02	; 2
    d3e4:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d3e8:	cf 91       	pop	r28
    d3ea:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d3ec:	0c 94 a3 68 	jmp	0xd146	; 0xd146 <load_high_scores>
		return;
	}
	
	if (game.selection == START_SELECTED)
    d3f0:	80 91 cb 0d 	lds	r24, 0x0DCB
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d3f4:	01 e0       	ldi	r16, 0x01	; 1
    d3f6:	21 e0       	ldi	r18, 0x01	; 1
		SFX_NAVIGATE;
		load_high_scores();
		return;
	}
	
	if (game.selection == START_SELECTED)
    d3f8:	81 11       	cpse	r24, r1
    d3fa:	03 c0       	rjmp	.+6      	; 0xd402 <update_splash+0x7e>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d3fc:	48 e7       	ldi	r20, 0x78	; 120
    d3fe:	68 e3       	ldi	r22, 0x38	; 56
    d400:	03 c0       	rjmp	.+6      	; 0xd408 <update_splash+0x84>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d402:	40 e8       	ldi	r20, 0x80	; 128
    d404:	68 e3       	ldi	r22, 0x38	; 56
    d406:	80 e0       	ldi	r24, 0x00	; 0
    d408:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
	}
}
    d40c:	cf 91       	pop	r28
    d40e:	0f 91       	pop	r16
    d410:	08 95       	ret

0000d412 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    d412:	0f 93       	push	r16
	if (game.player.controls.pressed & BTN_X)
    d414:	80 91 44 0e 	lds	r24, 0x0E44
    d418:	90 91 45 0e 	lds	r25, 0x0E45
    d41c:	91 ff       	sbrs	r25, 1
    d41e:	12 c0       	rjmp	.+36     	; 0xd444 <update_high_scores+0x32>
	{
		SFX_NAVIGATE;
    d420:	41 e0       	ldi	r20, 0x01	; 1
    d422:	6f ef       	ldi	r22, 0xFF	; 255
    d424:	82 e0       	ldi	r24, 0x02	; 2
    d426:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
		game.high_score_index = -1;
    d42a:	8f ef       	ldi	r24, 0xFF	; 255
    d42c:	80 93 c4 0d 	sts	0x0DC4, r24
		game.score = 0;
    d430:	10 92 b5 0d 	sts	0x0DB5, r1
    d434:	10 92 b4 0d 	sts	0x0DB4, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d438:	82 e9       	ldi	r24, 0x92	; 146
    d43a:	9d e0       	ldi	r25, 0x0D	; 13
    d43c:	0e 94 0e 42 	call	0x841c	; 0x841c <EepromWriteBlock>
	{
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    d440:	0e 94 72 68 	call	0xd0e4	; 0xd0e4 <load_splash>
	}
	
	if (game.high_score_index != -1)
    d444:	30 91 c4 0d 	lds	r19, 0x0DC4
    d448:	3f 3f       	cpi	r19, 0xFF	; 255
    d44a:	09 f4       	brne	.+2      	; 0xd44e <update_high_scores+0x3c>
    d44c:	7e c0       	rjmp	.+252    	; 0xd54a <update_high_scores+0x138>
	{
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d44e:	20 91 44 0e 	lds	r18, 0x0E44
    d452:	27 ff       	sbrs	r18, 7
    d454:	1e c0       	rjmp	.+60     	; 0xd492 <update_high_scores+0x80>
    d456:	83 2f       	mov	r24, r19
    d458:	65 e0       	ldi	r22, 0x05	; 5
    d45a:	0e 94 d7 70 	call	0xe1ae	; 0xe1ae <__divmodqi4>
    d45e:	92 30       	cpi	r25, 0x02	; 2
    d460:	c1 f0       	breq	.+48     	; 0xd492 <update_high_scores+0x80>
		{
			SFX_NAVIGATE;
    d462:	41 e0       	ldi	r20, 0x01	; 1
    d464:	6f ef       	ldi	r22, 0xFF	; 255
    d466:	82 e0       	ldi	r24, 0x02	; 2
    d468:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
			game.high_score_index++;
    d46c:	80 91 c4 0d 	lds	r24, 0x0DC4
    d470:	8f 5f       	subi	r24, 0xFF	; 255
    d472:	80 93 c4 0d 	sts	0x0DC4, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d476:	60 91 e3 0f 	lds	r22, 0x0FE3
    d47a:	68 5f       	subi	r22, 0xF8	; 248
    d47c:	01 e0       	ldi	r16, 0x01	; 1
    d47e:	21 e0       	ldi	r18, 0x01	; 1
    d480:	40 91 e4 0f 	lds	r20, 0x0FE4
    d484:	82 e0       	ldi	r24, 0x02	; 2
    d486:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d48a:	60 91 e7 0f 	lds	r22, 0x0FE7
    d48e:	68 5f       	subi	r22, 0xF8	; 248
    d490:	1f c0       	rjmp	.+62     	; 0xd4d0 <update_high_scores+0xbe>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d492:	26 ff       	sbrs	r18, 6
    d494:	24 c0       	rjmp	.+72     	; 0xd4de <update_high_scores+0xcc>
    d496:	83 2f       	mov	r24, r19
    d498:	65 e0       	ldi	r22, 0x05	; 5
    d49a:	0e 94 d7 70 	call	0xe1ae	; 0xe1ae <__divmodqi4>
    d49e:	99 23       	and	r25, r25
    d4a0:	f1 f0       	breq	.+60     	; 0xd4de <update_high_scores+0xcc>
		{
			SFX_NAVIGATE;
    d4a2:	41 e0       	ldi	r20, 0x01	; 1
    d4a4:	6f ef       	ldi	r22, 0xFF	; 255
    d4a6:	82 e0       	ldi	r24, 0x02	; 2
    d4a8:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
			game.high_score_index--;
    d4ac:	80 91 c4 0d 	lds	r24, 0x0DC4
    d4b0:	81 50       	subi	r24, 0x01	; 1
    d4b2:	80 93 c4 0d 	sts	0x0DC4, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d4b6:	60 91 e3 0f 	lds	r22, 0x0FE3
    d4ba:	68 50       	subi	r22, 0x08	; 8
    d4bc:	01 e0       	ldi	r16, 0x01	; 1
    d4be:	21 e0       	ldi	r18, 0x01	; 1
    d4c0:	40 91 e4 0f 	lds	r20, 0x0FE4
    d4c4:	82 e0       	ldi	r24, 0x02	; 2
    d4c6:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d4ca:	60 91 e7 0f 	lds	r22, 0x0FE7
    d4ce:	68 50       	subi	r22, 0x08	; 8
    d4d0:	21 e0       	ldi	r18, 0x01	; 1
    d4d2:	40 91 e8 0f 	lds	r20, 0x0FE8
    d4d6:	83 e0       	ldi	r24, 0x03	; 3
    d4d8:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
    d4dc:	36 c0       	rjmp	.+108    	; 0xd54a <update_high_scores+0x138>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d4de:	24 ff       	sbrs	r18, 4
    d4e0:	13 c0       	rjmp	.+38     	; 0xd508 <update_high_scores+0xf6>
		{
			SFX_NAVIGATE;
    d4e2:	41 e0       	ldi	r20, 0x01	; 1
    d4e4:	6f ef       	ldi	r22, 0xFF	; 255
    d4e6:	82 e0       	ldi	r24, 0x02	; 2
    d4e8:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d4ec:	80 91 c4 0d 	lds	r24, 0x0DC4
    d4f0:	e8 2f       	mov	r30, r24
    d4f2:	ff 27       	eor	r31, r31
    d4f4:	e7 fd       	sbrc	r30, 7
    d4f6:	f0 95       	com	r31
    d4f8:	ee 56       	subi	r30, 0x6E	; 110
    d4fa:	f2 4f       	sbci	r31, 0xF2	; 242
    d4fc:	92 81       	ldd	r25, Z+2	; 0x02
    d4fe:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d500:	91 34       	cpi	r25, 0x41	; 65
    d502:	b0 f4       	brcc	.+44     	; 0xd530 <update_high_scores+0x11e>
    d504:	91 e4       	ldi	r25, 0x41	; 65
    d506:	14 c0       	rjmp	.+40     	; 0xd530 <update_high_scores+0x11e>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d508:	25 ff       	sbrs	r18, 5
    d50a:	1f c0       	rjmp	.+62     	; 0xd54a <update_high_scores+0x138>
		{
			SFX_NAVIGATE;
    d50c:	41 e0       	ldi	r20, 0x01	; 1
    d50e:	6f ef       	ldi	r22, 0xFF	; 255
    d510:	82 e0       	ldi	r24, 0x02	; 2
    d512:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d516:	80 91 c4 0d 	lds	r24, 0x0DC4
    d51a:	e8 2f       	mov	r30, r24
    d51c:	ff 27       	eor	r31, r31
    d51e:	e7 fd       	sbrc	r30, 7
    d520:	f0 95       	com	r31
    d522:	ee 56       	subi	r30, 0x6E	; 110
    d524:	f2 4f       	sbci	r31, 0xF2	; 242
    d526:	92 81       	ldd	r25, Z+2	; 0x02
    d528:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d52a:	9b 35       	cpi	r25, 0x5B	; 91
    d52c:	08 f0       	brcs	.+2      	; 0xd530 <update_high_scores+0x11e>
    d52e:	9a e5       	ldi	r25, 0x5A	; 90
    d530:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d532:	65 e0       	ldi	r22, 0x05	; 5
    d534:	0e 94 d7 70 	call	0xe1ae	; 0xe1ae <__divmodqi4>
    d538:	68 2f       	mov	r22, r24
    d53a:	66 0f       	add	r22, r22
    d53c:	69 5f       	subi	r22, 0xF9	; 249
    d53e:	42 81       	ldd	r20, Z+2	; 0x02
    d540:	8b e0       	ldi	r24, 0x0B	; 11
    d542:	89 0f       	add	r24, r25
		}
	}
}
    d544:	0f 91       	pop	r16
		else if (game.player.controls.pressed & BTN_DOWN)
		{
			SFX_NAVIGATE;
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d546:	0c 94 7e 50 	jmp	0xa0fc	; 0xa0fc <LBPrintChar>
		}
	}
}
    d54a:	0f 91       	pop	r16
    d54c:	08 95       	ret

0000d54e <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d54e:	2f 92       	push	r2
    d550:	3f 92       	push	r3
    d552:	4f 92       	push	r4
    d554:	5f 92       	push	r5
    d556:	6f 92       	push	r6
    d558:	7f 92       	push	r7
    d55a:	8f 92       	push	r8
    d55c:	9f 92       	push	r9
    d55e:	af 92       	push	r10
    d560:	bf 92       	push	r11
    d562:	cf 92       	push	r12
    d564:	df 92       	push	r13
    d566:	ef 92       	push	r14
    d568:	ff 92       	push	r15
    d56a:	0f 93       	push	r16
    d56c:	1f 93       	push	r17
    d56e:	cf 93       	push	r28
    d570:	df 93       	push	r29
    d572:	7c 01       	movw	r14, r24
    d574:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d576:	c0 91 b2 0c 	lds	r28, 0x0CB2
    d57a:	c6 95       	lsr	r28
    d57c:	c6 95       	lsr	r28
    d57e:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d580:	00 91 b3 0c 	lds	r16, 0x0CB3
    d584:	06 95       	lsr	r16
    d586:	06 95       	lsr	r16
    d588:	06 95       	lsr	r16
	u16 tally = game.score;
    d58a:	a0 90 b4 0d 	lds	r10, 0x0DB4
    d58e:	b0 90 b5 0d 	lds	r11, 0x0DB5
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d592:	64 e1       	ldi	r22, 0x14	; 20
    d594:	80 e0       	ldi	r24, 0x00	; 0
    d596:	0e 94 80 66 	call	0xcd00	; 0xcd00 <hide_sprites>
	LBRotateSprites();
    d59a:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	
	StopSong();
    d59e:	0e 94 b0 43 	call	0x8760	; 0x8760 <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d5a2:	10 e0       	ldi	r17, 0x00	; 0
    d5a4:	d0 e0       	ldi	r29, 0x00	; 0
    d5a6:	c8 01       	movw	r24, r16
    d5a8:	06 96       	adiw	r24, 0x06	; 6
    d5aa:	2e e1       	ldi	r18, 0x1E	; 30
    d5ac:	82 2e       	mov	r8, r18
    d5ae:	91 2c       	mov	r9, r1
    d5b0:	b4 01       	movw	r22, r8
    d5b2:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    d5b6:	9e 01       	movw	r18, r28
    d5b8:	28 5f       	subi	r18, 0xF8	; 248
    d5ba:	3f 4f       	sbci	r19, 0xFF	; 255
    d5bc:	48 ed       	ldi	r20, 0xD8	; 216
    d5be:	5f e5       	ldi	r21, 0x5F	; 95
    d5c0:	68 2f       	mov	r22, r24
    d5c2:	82 2f       	mov	r24, r18
    d5c4:	8f 71       	andi	r24, 0x1F	; 31
    d5c6:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d5ca:	c8 01       	movw	r24, r16
    d5cc:	07 96       	adiw	r24, 0x07	; 7
    d5ce:	b4 01       	movw	r22, r8
    d5d0:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    d5d4:	9e 01       	movw	r18, r28
    d5d6:	26 5f       	subi	r18, 0xF6	; 246
    d5d8:	3f 4f       	sbci	r19, 0xFF	; 255
    d5da:	a7 01       	movw	r20, r14
    d5dc:	68 2f       	mov	r22, r24
    d5de:	82 2f       	mov	r24, r18
    d5e0:	8f 71       	andi	r24, 0x1F	; 31
    d5e2:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d5e6:	c8 01       	movw	r24, r16
    d5e8:	09 96       	adiw	r24, 0x09	; 9
    d5ea:	b4 01       	movw	r22, r8
    d5ec:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    d5f0:	48 2e       	mov	r4, r24
    d5f2:	78 2e       	mov	r7, r24
    d5f4:	7e 01       	movw	r14, r28
    d5f6:	29 e0       	ldi	r18, 0x09	; 9
    d5f8:	e2 0e       	add	r14, r18
    d5fa:	f1 1c       	adc	r15, r1
    d5fc:	8f e1       	ldi	r24, 0x1F	; 31
    d5fe:	e8 22       	and	r14, r24
    d600:	ff 24       	eor	r15, r15
    d602:	46 eb       	ldi	r20, 0xB6	; 182
    d604:	5a e0       	ldi	r21, 0x0A	; 10
    d606:	64 2d       	mov	r22, r4
    d608:	8e 2d       	mov	r24, r14
    d60a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d60e:	c8 01       	movw	r24, r16
    d610:	0b 96       	adiw	r24, 0x0b	; 11
    d612:	b4 01       	movw	r22, r8
    d614:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    d618:	38 2e       	mov	r3, r24
    d61a:	68 2e       	mov	r6, r24
    d61c:	4c e0       	ldi	r20, 0x0C	; 12
    d61e:	5b e0       	ldi	r21, 0x0B	; 11
    d620:	68 2f       	mov	r22, r24
    d622:	8e 2d       	mov	r24, r14
    d624:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d628:	c8 01       	movw	r24, r16
    d62a:	0c 96       	adiw	r24, 0x0c	; 12
    d62c:	b4 01       	movw	r22, r8
    d62e:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    d632:	58 2e       	mov	r5, r24
    d634:	f8 2e       	mov	r15, r24
    d636:	47 ef       	ldi	r20, 0xF7	; 247
    d638:	5a e0       	ldi	r21, 0x0A	; 10
    d63a:	68 2f       	mov	r22, r24
    d63c:	8e 2d       	mov	r24, r14
    d63e:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d642:	c8 01       	movw	r24, r16
    d644:	0d 96       	adiw	r24, 0x0d	; 13
    d646:	b4 01       	movw	r22, r8
    d648:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    d64c:	18 2f       	mov	r17, r24
    d64e:	28 2e       	mov	r2, r24
    d650:	47 ec       	ldi	r20, 0xC7	; 199
    d652:	5a e0       	ldi	r21, 0x0A	; 10
    d654:	68 2f       	mov	r22, r24
    d656:	8e 2d       	mov	r24, r14
    d658:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d65c:	64 96       	adiw	r28, 0x14	; 20
    d65e:	cf 71       	andi	r28, 0x1F	; 31
    d660:	dd 27       	eor	r29, r29
    d662:	ec 2e       	mov	r14, r28
    d664:	21 e0       	ldi	r18, 0x01	; 1
    d666:	a5 01       	movw	r20, r10
    d668:	64 2d       	mov	r22, r4
    d66a:	8c 2f       	mov	r24, r28
    d66c:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d670:	40 91 b6 0d 	lds	r20, 0x0DB6
    d674:	50 91 b7 0d 	lds	r21, 0x0DB7
    d678:	21 e0       	ldi	r18, 0x01	; 1
    d67a:	63 2d       	mov	r22, r3
    d67c:	8c 2f       	mov	r24, r28
    d67e:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d682:	40 91 b8 0d 	lds	r20, 0x0DB8
    d686:	50 91 b9 0d 	lds	r21, 0x0DB9
    d68a:	21 e0       	ldi	r18, 0x01	; 1
    d68c:	65 2d       	mov	r22, r5
    d68e:	8c 2f       	mov	r24, r28
    d690:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d694:	21 e0       	ldi	r18, 0x01	; 1
    d696:	a6 01       	movw	r20, r12
    d698:	61 2f       	mov	r22, r17
    d69a:	8c 2f       	mov	r24, r28
    d69c:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	
	LBWaitSeconds(2);
    d6a0:	82 e0       	ldi	r24, 0x02	; 2
    d6a2:	0e 94 64 51 	call	0xa2c8	; 0xa2c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d6a6:	80 90 b6 0d 	lds	r8, 0x0DB6
    d6aa:	90 90 b7 0d 	lds	r9, 0x0DB7
    d6ae:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d6b0:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d6b2:	20 97       	sbiw	r28, 0x00	; 0
    d6b4:	e9 f0       	breq	.+58     	; 0xd6f0 <tally_score+0x1a2>
	{
		WaitVsync(1);
    d6b6:	81 e0       	ldi	r24, 0x01	; 1
    d6b8:	90 e0       	ldi	r25, 0x00	; 0
    d6ba:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
		SFX_HIT;
    d6be:	41 e0       	ldi	r20, 0x01	; 1
    d6c0:	6f ef       	ldi	r22, 0xFF	; 255
    d6c2:	84 e0       	ldi	r24, 0x04	; 4
    d6c4:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
		tally += 1;
    d6c8:	0f 5f       	subi	r16, 0xFF	; 255
    d6ca:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d6cc:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d6ce:	21 e0       	ldi	r18, 0x01	; 1
    d6d0:	a8 01       	movw	r20, r16
    d6d2:	67 2d       	mov	r22, r7
    d6d4:	8e 2d       	mov	r24, r14
    d6d6:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d6da:	21 e0       	ldi	r18, 0x01	; 1
    d6dc:	ae 01       	movw	r20, r28
    d6de:	66 2d       	mov	r22, r6
    d6e0:	8e 2d       	mov	r24, r14
    d6e2:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d6e6:	8c ed       	ldi	r24, 0xDC	; 220
    d6e8:	95 e0       	ldi	r25, 0x05	; 5
    d6ea:	0e 94 c9 40 	call	0x8192	; 0x8192 <WaitUs>
    d6ee:	e1 cf       	rjmp	.-62     	; 0xd6b2 <tally_score+0x164>
    d6f0:	a8 0c       	add	r10, r8
    d6f2:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d6f4:	c0 91 b8 0d 	lds	r28, 0x0DB8
    d6f8:	d0 91 b9 0d 	lds	r29, 0x0DB9
	while (counter > 0)
    d6fc:	20 97       	sbiw	r28, 0x00	; 0
    d6fe:	31 f1       	breq	.+76     	; 0xd74c <tally_score+0x1fe>
	{
		WaitVsync(1);
    d700:	81 e0       	ldi	r24, 0x01	; 1
    d702:	90 e0       	ldi	r25, 0x00	; 0
    d704:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
		SFX_HIT;
    d708:	41 e0       	ldi	r20, 0x01	; 1
    d70a:	6f ef       	ldi	r22, 0xFF	; 255
    d70c:	84 e0       	ldi	r24, 0x04	; 4
    d70e:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d712:	c5 01       	movw	r24, r10
    d714:	02 97       	sbiw	r24, 0x02	; 2
    d716:	8e 3f       	cpi	r24, 0xFE	; 254
    d718:	9f 4f       	sbci	r25, 0xFF	; 255
    d71a:	20 f4       	brcc	.+8      	; 0xd724 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d71c:	81 e0       	ldi	r24, 0x01	; 1
    d71e:	a8 1a       	sub	r10, r24
    d720:	b1 08       	sbc	r11, r1
    d722:	02 c0       	rjmp	.+4      	; 0xd728 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d724:	a1 2c       	mov	r10, r1
    d726:	b1 2c       	mov	r11, r1
		counter -= 1;
    d728:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d72a:	21 e0       	ldi	r18, 0x01	; 1
    d72c:	a5 01       	movw	r20, r10
    d72e:	67 2d       	mov	r22, r7
    d730:	8e 2d       	mov	r24, r14
    d732:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d736:	21 e0       	ldi	r18, 0x01	; 1
    d738:	ae 01       	movw	r20, r28
    d73a:	6f 2d       	mov	r22, r15
    d73c:	8e 2d       	mov	r24, r14
    d73e:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d742:	8c ed       	ldi	r24, 0xDC	; 220
    d744:	95 e0       	ldi	r25, 0x05	; 5
    d746:	0e 94 c9 40 	call	0x8192	; 0x8192 <WaitUs>
    d74a:	d8 cf       	rjmp	.-80     	; 0xd6fc <tally_score+0x1ae>
    d74c:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d74e:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d750:	20 97       	sbiw	r28, 0x00	; 0
    d752:	e9 f0       	breq	.+58     	; 0xd78e <tally_score+0x240>
	{
		WaitVsync(1);
    d754:	81 e0       	ldi	r24, 0x01	; 1
    d756:	90 e0       	ldi	r25, 0x00	; 0
    d758:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
		SFX_HIT;
    d75c:	41 e0       	ldi	r20, 0x01	; 1
    d75e:	6f ef       	ldi	r22, 0xFF	; 255
    d760:	84 e0       	ldi	r24, 0x04	; 4
    d762:	0e 94 72 44 	call	0x88e4	; 0x88e4 <TriggerFx>
		tally += 1;
    d766:	0f 5f       	subi	r16, 0xFF	; 255
    d768:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d76a:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d76c:	21 e0       	ldi	r18, 0x01	; 1
    d76e:	a8 01       	movw	r20, r16
    d770:	67 2d       	mov	r22, r7
    d772:	8e 2d       	mov	r24, r14
    d774:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d778:	21 e0       	ldi	r18, 0x01	; 1
    d77a:	ae 01       	movw	r20, r28
    d77c:	62 2d       	mov	r22, r2
    d77e:	8e 2d       	mov	r24, r14
    d780:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d784:	8c ed       	ldi	r24, 0xDC	; 220
    d786:	95 e0       	ldi	r25, 0x05	; 5
    d788:	0e 94 c9 40 	call	0x8192	; 0x8192 <WaitUs>
    d78c:	e1 cf       	rjmp	.-62     	; 0xd750 <tally_score+0x202>
    d78e:	ac 0c       	add	r10, r12
    d790:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d792:	b0 92 b5 0d 	sts	0x0DB5, r11
    d796:	a0 92 b4 0d 	sts	0x0DB4, r10
	game.time = 0;
    d79a:	10 92 b9 0d 	sts	0x0DB9, r1
    d79e:	10 92 b8 0d 	sts	0x0DB8, r1
	LBWaitSeconds(2);
    d7a2:	82 e0       	ldi	r24, 0x02	; 2
}
    d7a4:	df 91       	pop	r29
    d7a6:	cf 91       	pop	r28
    d7a8:	1f 91       	pop	r17
    d7aa:	0f 91       	pop	r16
    d7ac:	ff 90       	pop	r15
    d7ae:	ef 90       	pop	r14
    d7b0:	df 90       	pop	r13
    d7b2:	cf 90       	pop	r12
    d7b4:	bf 90       	pop	r11
    d7b6:	af 90       	pop	r10
    d7b8:	9f 90       	pop	r9
    d7ba:	8f 90       	pop	r8
    d7bc:	7f 90       	pop	r7
    d7be:	6f 90       	pop	r6
    d7c0:	5f 90       	pop	r5
    d7c2:	4f 90       	pop	r4
    d7c4:	3f 90       	pop	r3
    d7c6:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d7c8:	0c 94 64 51 	jmp	0xa2c8	; 0xa2c8 <LBWaitSeconds>

0000d7cc <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d7cc:	cf 93       	push	r28
	if (player == &game.boss) {
    d7ce:	8b 54       	subi	r24, 0x4B	; 75
    d7d0:	9e 40       	sbci	r25, 0x0E	; 14
    d7d2:	29 f4       	brne	.+10     	; 0xd7de <handle_player_death+0x12>
		game.level_ended = 1;
    d7d4:	81 e0       	ldi	r24, 0x01	; 1
    d7d6:	80 93 cf 0d 	sts	0x0DCF, r24
		return 1;
    d7da:	c1 e0       	ldi	r28, 0x01	; 1
    d7dc:	34 c0       	rjmp	.+104    	; 0xd846 <handle_player_death+0x7a>
	}
	game.lives--;
    d7de:	80 91 c5 0d 	lds	r24, 0x0DC5
    d7e2:	81 50       	subi	r24, 0x01	; 1
    d7e4:	80 93 c5 0d 	sts	0x0DC5, r24
	clear_sprites(0, 6);
    d7e8:	66 e0       	ldi	r22, 0x06	; 6
    d7ea:	80 e0       	ldi	r24, 0x00	; 0
    d7ec:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
	LBRotateSprites();
    d7f0:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	if (game.lives == 0)
    d7f4:	c0 91 c5 0d 	lds	r28, 0x0DC5
    d7f8:	c1 11       	cpse	r28, r1
    d7fa:	09 c0       	rjmp	.+18     	; 0xd80e <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d7fc:	60 e0       	ldi	r22, 0x00	; 0
    d7fe:	70 e0       	ldi	r23, 0x00	; 0
    d800:	8d eb       	ldi	r24, 0xBD	; 189
    d802:	9a e0       	ldi	r25, 0x0A	; 10
    d804:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <tally_score>
		exit_game();
    d808:	0e 94 b2 69 	call	0xd364	; 0xd364 <exit_game>
    d80c:	1c c0       	rjmp	.+56     	; 0xd846 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d80e:	61 e0       	ldi	r22, 0x01	; 1
    d810:	81 e0       	ldi	r24, 0x01	; 1
    d812:	0e 94 ad 4f 	call	0x9f5a	; 0x9f5a <FadeOut>
	ClearVram();
    d816:	0e 94 93 40 	call	0x8126	; 0x8126 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d81a:	64 e1       	ldi	r22, 0x14	; 20
    d81c:	80 e0       	ldi	r24, 0x00	; 0
    d81e:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
	LBRotateSprites();
    d822:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d826:	60 e0       	ldi	r22, 0x00	; 0
    d828:	81 e0       	ldi	r24, 0x01	; 1
    d82a:	0e 94 a1 4f 	call	0x9f42	; 0x9f42 <FadeIn>
	init_player_state();
    d82e:	0e 94 e9 56 	call	0xadd2	; 0xadd2 <init_player_state>
	init_boss_state();
    d832:	0e 94 3f 56 	call	0xac7e	; 0xac7e <init_boss_state>
	init_enemy_state();
    d836:	0e 94 51 52 	call	0xa4a2	; 0xa4a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    d83a:	60 e0       	ldi	r22, 0x00	; 0
    d83c:	80 91 c7 0d 	lds	r24, 0x0DC7
    d840:	0e 94 72 65 	call	0xcae4	; 0xcae4 <load_level>
	return 0;
    d844:	c0 e0       	ldi	r28, 0x00	; 0
}
    d846:	8c 2f       	mov	r24, r28
    d848:	cf 91       	pop	r28
    d84a:	08 95       	ret

0000d84c <update_player>:

u8 update_player(Player* player, u8 slot)
{
    d84c:	ef 92       	push	r14
    d84e:	ff 92       	push	r15
    d850:	0f 93       	push	r16
    d852:	1f 93       	push	r17
    d854:	cf 93       	push	r28
    d856:	df 93       	push	r29
    d858:	1f 92       	push	r1
    d85a:	cd b7       	in	r28, 0x3d	; 61
    d85c:	de b7       	in	r29, 0x3e	; 62
    d85e:	7c 01       	movw	r14, r24
    d860:	16 2f       	mov	r17, r22
	
	if (player->flags & EXPLODING)
    d862:	fc 01       	movw	r30, r24
    d864:	00 85       	ldd	r16, Z+8	; 0x08
    d866:	04 ff       	sbrs	r16, 4
    d868:	16 c0       	rjmp	.+44     	; 0xd896 <update_player+0x4a>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    d86a:	04 85       	ldd	r16, Z+12	; 0x0c
    d86c:	23 85       	ldd	r18, Z+11	; 0x0b
    d86e:	46 2f       	mov	r20, r22
    d870:	bc 01       	movw	r22, r24
    d872:	64 59       	subi	r22, 0x94	; 148
    d874:	7f 4f       	sbci	r23, 0xFF	; 255
    d876:	08 96       	adiw	r24, 0x08	; 8
    d878:	0e 94 b1 60 	call	0xc162	; 0xc162 <map_explosion>
    d87c:	88 23       	and	r24, r24
    d87e:	09 f4       	brne	.+2      	; 0xd882 <update_player+0x36>
    d880:	a5 c1       	rjmp	.+842    	; 0xdbcc <update_player+0x380>
		{
			return handle_player_death(player);
    d882:	c7 01       	movw	r24, r14
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    d884:	0f 90       	pop	r0
    d886:	df 91       	pop	r29
    d888:	cf 91       	pop	r28
    d88a:	1f 91       	pop	r17
    d88c:	0f 91       	pop	r16
    d88e:	ff 90       	pop	r15
    d890:	ef 90       	pop	r14
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    d892:	0c 94 e6 6b 	jmp	0xd7cc	; 0xd7cc <handle_player_death>
		}
	}
	else if (is_space())
    d896:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    d89a:	88 23       	and	r24, r24
    d89c:	09 f4       	brne	.+2      	; 0xd8a0 <update_player+0x54>
    d89e:	4c c0       	rjmp	.+152    	; 0xd938 <update_player+0xec>
	{
		if (player->flags & END_OF_SPACE) {
    d8a0:	05 ff       	sbrs	r16, 5
    d8a2:	05 c0       	rjmp	.+10     	; 0xd8ae <update_player+0x62>
			player->shared.vx = SPACE_SHIP_SPEED*2;
    d8a4:	88 e7       	ldi	r24, 0x78	; 120
    d8a6:	f7 01       	movw	r30, r14
    d8a8:	85 83       	std	Z+5, r24	; 0x05
			player->shared.vy = 0;
    d8aa:	14 82       	std	Z+4, r1	; 0x04
    d8ac:	41 c0       	rjmp	.+130    	; 0xd930 <update_player+0xe4>
		} else {
			player->shared.vy = 0;
    d8ae:	f7 01       	movw	r30, r14
    d8b0:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = SPACE_SHIP_SPEED;
    d8b2:	3c e3       	ldi	r19, 0x3C	; 60
    d8b4:	35 83       	std	Z+5, r19	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    d8b6:	e8 58       	subi	r30, 0x88	; 136
    d8b8:	ff 4f       	sbci	r31, 0xFF	; 255
    d8ba:	20 81       	ld	r18, Z
    d8bc:	25 ff       	sbrs	r18, 5
    d8be:	10 c0       	rjmp	.+32     	; 0xd8e0 <update_player+0x94>
    d8c0:	f7 01       	movw	r30, r14
    d8c2:	82 81       	ldd	r24, Z+2	; 0x02
    d8c4:	93 81       	ldd	r25, Z+3	; 0x03
    d8c6:	63 e0       	ldi	r22, 0x03	; 3
    d8c8:	96 95       	lsr	r25
    d8ca:	87 95       	ror	r24
    d8cc:	6a 95       	dec	r22
    d8ce:	e1 f7       	brne	.-8      	; 0xd8c8 <update_player+0x7c>
    d8d0:	01 96       	adiw	r24, 0x01	; 1
    d8d2:	40 91 c2 0d 	lds	r20, 0x0DC2
    d8d6:	50 e0       	ldi	r21, 0x00	; 0
    d8d8:	84 17       	cp	r24, r20
    d8da:	95 07       	cpc	r25, r21
    d8dc:	08 f4       	brcc	.+2      	; 0xd8e0 <update_player+0x94>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    d8de:	34 83       	std	Z+4, r19	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    d8e0:	27 ff       	sbrs	r18, 7
    d8e2:	10 c0       	rjmp	.+32     	; 0xd904 <update_player+0xb8>
    d8e4:	f7 01       	movw	r30, r14
    d8e6:	40 81       	ld	r20, Z
    d8e8:	51 81       	ldd	r21, Z+1	; 0x01
    d8ea:	48 5e       	subi	r20, 0xE8	; 232
    d8ec:	5f 4f       	sbci	r21, 0xFF	; 255
    d8ee:	80 91 b2 0d 	lds	r24, 0x0DB2
    d8f2:	90 91 b3 0d 	lds	r25, 0x0DB3
    d8f6:	80 52       	subi	r24, 0x20	; 32
    d8f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d8fa:	48 17       	cp	r20, r24
    d8fc:	59 07       	cpc	r21, r25
    d8fe:	10 f4       	brcc	.+4      	; 0xd904 <update_player+0xb8>
			{
				player->shared.vx = SPACE_SHIP_SPEED*2;
    d900:	88 e7       	ldi	r24, 0x78	; 120
    d902:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d904:	26 ff       	sbrs	r18, 6
    d906:	0b c0       	rjmp	.+22     	; 0xd91e <update_player+0xd2>
    d908:	f7 01       	movw	r30, r14
    d90a:	40 81       	ld	r20, Z
    d90c:	51 81       	ldd	r21, Z+1	; 0x01
    d90e:	80 91 b2 0d 	lds	r24, 0x0DB2
    d912:	90 91 b3 0d 	lds	r25, 0x0DB3
    d916:	84 17       	cp	r24, r20
    d918:	95 07       	cpc	r25, r21
    d91a:	08 f4       	brcc	.+2      	; 0xd91e <update_player+0xd2>
			{
				player->shared.vx = 0;
    d91c:	15 82       	std	Z+5, r1	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    d91e:	24 ff       	sbrs	r18, 4
    d920:	07 c0       	rjmp	.+14     	; 0xd930 <update_player+0xe4>
    d922:	f7 01       	movw	r30, r14
    d924:	82 81       	ldd	r24, Z+2	; 0x02
    d926:	93 81       	ldd	r25, Z+3	; 0x03
    d928:	89 2b       	or	r24, r25
    d92a:	11 f0       	breq	.+4      	; 0xd930 <update_player+0xe4>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    d92c:	84 ec       	ldi	r24, 0xC4	; 196
    d92e:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d930:	c7 01       	movw	r24, r14
    d932:	8c 5a       	subi	r24, 0xAC	; 172
    d934:	9f 4f       	sbci	r25, 0xFF	; 255
    d936:	43 c1       	rjmp	.+646    	; 0xdbbe <update_player+0x372>
	}
	else if (player->flags & (IDLE|RUNNING))
    d938:	80 2f       	mov	r24, r16
    d93a:	8a 70       	andi	r24, 0x0A	; 10
    d93c:	09 f4       	brne	.+2      	; 0xd940 <update_player+0xf4>
    d93e:	96 c0       	rjmp	.+300    	; 0xda6c <update_player+0x220>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    d940:	f7 01       	movw	r30, r14
    d942:	44 85       	ldd	r20, Z+12	; 0x0c
    d944:	63 85       	ldd	r22, Z+11	; 0x0b
    d946:	c7 01       	movw	r24, r14
    d948:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <on_solid_ground>
    d94c:	81 11       	cpse	r24, r1
    d94e:	06 c0       	rjmp	.+12     	; 0xd95c <update_player+0x110>
		{
			player->shared.gravity = GRAVITY;
    d950:	88 ec       	ldi	r24, 0xC8	; 200
    d952:	f7 01       	movw	r30, r14
    d954:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    d956:	81 e0       	ldi	r24, 0x01	; 1
    d958:	80 87       	std	Z+8, r24	; 0x08
    d95a:	0f c1       	rjmp	.+542    	; 0xdb7a <update_player+0x32e>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    d95c:	f7 01       	movw	r30, r14
    d95e:	e8 58       	subi	r30, 0x88	; 136
    d960:	ff 4f       	sbci	r31, 0xFF	; 255
    d962:	20 81       	ld	r18, Z
    d964:	25 ff       	sbrs	r18, 5
    d966:	25 c0       	rjmp	.+74     	; 0xd9b2 <update_player+0x166>
			{
				player->shared.y += 16;
    d968:	f7 01       	movw	r30, r14
    d96a:	82 81       	ldd	r24, Z+2	; 0x02
    d96c:	93 81       	ldd	r25, Z+3	; 0x03
    d96e:	40 96       	adiw	r24, 0x10	; 16
    d970:	93 83       	std	Z+3, r25	; 0x03
    d972:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    d974:	82 85       	ldd	r24, Z+10	; 0x0a
    d976:	81 30       	cpi	r24, 0x01	; 1
    d978:	29 f4       	brne	.+10     	; 0xd984 <update_player+0x138>
				{
					player->shared.x -= 8;
    d97a:	80 81       	ld	r24, Z
    d97c:	91 81       	ldd	r25, Z+1	; 0x01
    d97e:	08 97       	sbiw	r24, 0x08	; 8
    d980:	91 83       	std	Z+1, r25	; 0x01
    d982:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    d984:	f7 01       	movw	r30, r14
    d986:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    d988:	84 e0       	ldi	r24, 0x04	; 4
    d98a:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    d98c:	83 e0       	ldi	r24, 0x03	; 3
    d98e:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    d990:	81 e0       	ldi	r24, 0x01	; 1
    d992:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    d994:	63 e0       	ldi	r22, 0x03	; 3
    d996:	83 e0       	ldi	r24, 0x03	; 3
    d998:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    d99c:	24 e0       	ldi	r18, 0x04	; 4
    d99e:	12 9f       	mul	r17, r18
    d9a0:	f0 01       	movw	r30, r0
    d9a2:	11 24       	eor	r1, r1
    d9a4:	e5 52       	subi	r30, 0x25	; 37
    d9a6:	f0 4f       	sbci	r31, 0xF0	; 240
    d9a8:	43 81       	ldd	r20, Z+3	; 0x03
    d9aa:	c7 01       	movw	r24, r14
    d9ac:	8c 59       	subi	r24, 0x9C	; 156
    d9ae:	9f 4f       	sbci	r25, 0xFF	; 255
    d9b0:	44 c0       	rjmp	.+136    	; 0xda3a <update_player+0x1ee>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    d9b2:	27 ff       	sbrs	r18, 7
    d9b4:	1c c0       	rjmp	.+56     	; 0xd9ee <update_player+0x1a2>
    d9b6:	f7 01       	movw	r30, r14
    d9b8:	80 81       	ld	r24, Z
    d9ba:	91 81       	ldd	r25, Z+1	; 0x01
    d9bc:	53 e0       	ldi	r21, 0x03	; 3
    d9be:	96 95       	lsr	r25
    d9c0:	87 95       	ror	r24
    d9c2:	5a 95       	dec	r21
    d9c4:	e1 f7       	brne	.-8      	; 0xd9be <update_player+0x172>
    d9c6:	02 96       	adiw	r24, 0x02	; 2
    d9c8:	40 91 c1 0d 	lds	r20, 0x0DC1
    d9cc:	50 e0       	ldi	r21, 0x00	; 0
    d9ce:	84 17       	cp	r24, r20
    d9d0:	95 07       	cpc	r25, r21
    d9d2:	68 f4       	brcc	.+26     	; 0xd9ee <update_player+0x1a2>
			{
				player->shared.vx = RUN_SPEED;
    d9d4:	8c e3       	ldi	r24, 0x3C	; 60
    d9d6:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    d9d8:	82 e0       	ldi	r24, 0x02	; 2
    d9da:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    d9dc:	81 e0       	ldi	r24, 0x01	; 1
    d9de:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d9e0:	c7 01       	movw	r24, r14
    d9e2:	8c 5a       	subi	r24, 0xAC	; 172
    d9e4:	9f 4f       	sbci	r25, 0xFF	; 255
    d9e6:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    d9ea:	40 e0       	ldi	r20, 0x00	; 0
    d9ec:	2a c0       	rjmp	.+84     	; 0xda42 <update_player+0x1f6>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d9ee:	26 ff       	sbrs	r18, 6
    d9f0:	16 c0       	rjmp	.+44     	; 0xda1e <update_player+0x1d2>
    d9f2:	f7 01       	movw	r30, r14
    d9f4:	20 81       	ld	r18, Z
    d9f6:	31 81       	ldd	r19, Z+1	; 0x01
    d9f8:	80 91 b2 0d 	lds	r24, 0x0DB2
    d9fc:	90 91 b3 0d 	lds	r25, 0x0DB3
    da00:	82 17       	cp	r24, r18
    da02:	93 07       	cpc	r25, r19
    da04:	60 f4       	brcc	.+24     	; 0xda1e <update_player+0x1d2>
			{
				player->shared.vx = -RUN_SPEED;
    da06:	84 ec       	ldi	r24, 0xC4	; 196
    da08:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    da0a:	82 e0       	ldi	r24, 0x02	; 2
    da0c:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    da0e:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    da10:	c7 01       	movw	r24, r14
    da12:	8c 5a       	subi	r24, 0xAC	; 172
    da14:	9f 4f       	sbci	r25, 0xFF	; 255
    da16:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    da1a:	41 e0       	ldi	r20, 0x01	; 1
    da1c:	12 c0       	rjmp	.+36     	; 0xda42 <update_player+0x1f6>
			}
			else
			{
				player->flags = IDLE;
    da1e:	88 e0       	ldi	r24, 0x08	; 8
    da20:	f7 01       	movw	r30, r14
    da22:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    da24:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    da26:	24 e0       	ldi	r18, 0x04	; 4
    da28:	12 9f       	mul	r17, r18
    da2a:	f0 01       	movw	r30, r0
    da2c:	11 24       	eor	r1, r1
    da2e:	e5 52       	subi	r30, 0x25	; 37
    da30:	f0 4f       	sbci	r31, 0xF0	; 240
    da32:	43 81       	ldd	r20, Z+3	; 0x03
    da34:	c7 01       	movw	r24, r14
    da36:	84 5b       	subi	r24, 0xB4	; 180
    da38:	9f 4f       	sbci	r25, 0xFF	; 255
    da3a:	49 83       	std	Y+1, r20	; 0x01
    da3c:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    da40:	49 81       	ldd	r20, Y+1	; 0x01
    da42:	bc 01       	movw	r22, r24
    da44:	81 2f       	mov	r24, r17
    da46:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_B && !(player->flags & PRONE))
    da4a:	f7 01       	movw	r30, r14
    da4c:	ec 58       	subi	r30, 0x8C	; 140
    da4e:	ff 4f       	sbci	r31, 0xFF	; 255
    da50:	80 81       	ld	r24, Z
    da52:	80 ff       	sbrs	r24, 0
    da54:	bb c0       	rjmp	.+374    	; 0xdbcc <update_player+0x380>
    da56:	f7 01       	movw	r30, r14
    da58:	80 85       	ldd	r24, Z+8	; 0x08
    da5a:	82 fd       	sbrc	r24, 2
    da5c:	b7 c0       	rjmp	.+366    	; 0xdbcc <update_player+0x380>
			{
				player->shared.vy = -JUMP_SPEED;
    da5e:	81 e8       	ldi	r24, 0x81	; 129
    da60:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    da62:	88 ec       	ldi	r24, 0xC8	; 200
    da64:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    da66:	81 e0       	ldi	r24, 0x01	; 1
    da68:	80 87       	std	Z+8, r24	; 0x08
    da6a:	83 c0       	rjmp	.+262    	; 0xdb72 <update_player+0x326>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    da6c:	00 ff       	sbrs	r16, 0
    da6e:	4c c0       	rjmp	.+152    	; 0xdb08 <update_player+0x2bc>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    da70:	f7 01       	movw	r30, r14
    da72:	e8 58       	subi	r30, 0x88	; 136
    da74:	ff 4f       	sbci	r31, 0xFF	; 255
    da76:	60 81       	ld	r22, Z
    da78:	c7 01       	movw	r24, r14
    da7a:	84 5a       	subi	r24, 0xA4	; 164
    da7c:	9f 4f       	sbci	r25, 0xFF	; 255
    da7e:	67 ff       	sbrs	r22, 7
    da80:	18 c0       	rjmp	.+48     	; 0xdab2 <update_player+0x266>
    da82:	f7 01       	movw	r30, r14
    da84:	20 81       	ld	r18, Z
    da86:	31 81       	ldd	r19, Z+1	; 0x01
    da88:	43 e0       	ldi	r20, 0x03	; 3
    da8a:	36 95       	lsr	r19
    da8c:	27 95       	ror	r18
    da8e:	4a 95       	dec	r20
    da90:	e1 f7       	brne	.-8      	; 0xda8a <update_player+0x23e>
    da92:	2e 5f       	subi	r18, 0xFE	; 254
    da94:	3f 4f       	sbci	r19, 0xFF	; 255
    da96:	40 91 c1 0d 	lds	r20, 0x0DC1
    da9a:	50 e0       	ldi	r21, 0x00	; 0
    da9c:	24 17       	cp	r18, r20
    da9e:	35 07       	cpc	r19, r21
    daa0:	40 f4       	brcc	.+16     	; 0xdab2 <update_player+0x266>
		{
			player->shared.vx = RUN_SPEED;
    daa2:	2c e3       	ldi	r18, 0x3C	; 60
    daa4:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    daa6:	21 e0       	ldi	r18, 0x01	; 1
    daa8:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    daaa:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    daae:	40 e0       	ldi	r20, 0x00	; 0
    dab0:	20 c0       	rjmp	.+64     	; 0xdaf2 <update_player+0x2a6>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    dab2:	66 ff       	sbrs	r22, 6
    dab4:	11 c0       	rjmp	.+34     	; 0xdad8 <update_player+0x28c>
    dab6:	f7 01       	movw	r30, r14
    dab8:	40 81       	ld	r20, Z
    daba:	51 81       	ldd	r21, Z+1	; 0x01
    dabc:	20 91 b2 0d 	lds	r18, 0x0DB2
    dac0:	30 91 b3 0d 	lds	r19, 0x0DB3
    dac4:	24 17       	cp	r18, r20
    dac6:	35 07       	cpc	r19, r21
    dac8:	38 f4       	brcc	.+14     	; 0xdad8 <update_player+0x28c>
		{
			player->shared.vx = -RUN_SPEED;
    daca:	24 ec       	ldi	r18, 0xC4	; 196
    dacc:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    dace:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    dad0:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    dad4:	41 e0       	ldi	r20, 0x01	; 1
    dad6:	0d c0       	rjmp	.+26     	; 0xdaf2 <update_player+0x2a6>
		}
		else
		{
			player->shared.vx = 0;
    dad8:	f7 01       	movw	r30, r14
    dada:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dadc:	24 e0       	ldi	r18, 0x04	; 4
    dade:	12 9f       	mul	r17, r18
    dae0:	f0 01       	movw	r30, r0
    dae2:	11 24       	eor	r1, r1
    dae4:	e5 52       	subi	r30, 0x25	; 37
    dae6:	f0 4f       	sbci	r31, 0xF0	; 240
    dae8:	43 81       	ldd	r20, Z+3	; 0x03
    daea:	49 83       	std	Y+1, r20	; 0x01
    daec:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    daf0:	49 81       	ldd	r20, Y+1	; 0x01
    daf2:	bc 01       	movw	r22, r24
    daf4:	81 2f       	mov	r24, r17
    daf6:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    dafa:	f7 01       	movw	r30, r14
    dafc:	86 81       	ldd	r24, Z+6	; 0x06
    dafe:	81 11       	cpse	r24, r1
    db00:	65 c0       	rjmp	.+202    	; 0xdbcc <update_player+0x380>
		{
			player->flags = IDLE;
    db02:	88 e0       	ldi	r24, 0x08	; 8
    db04:	80 87       	std	Z+8, r24	; 0x08
    db06:	62 c0       	rjmp	.+196    	; 0xdbcc <update_player+0x380>
		}
	}
	else if (player->flags & PRONE)
    db08:	02 ff       	sbrs	r16, 2
    db0a:	60 c0       	rjmp	.+192    	; 0xdbcc <update_player+0x380>
	{
		if (player->controls.pressed & BTN_UP)
    db0c:	f7 01       	movw	r30, r14
    db0e:	ec 58       	subi	r30, 0x8C	; 140
    db10:	ff 4f       	sbci	r31, 0xFF	; 255
    db12:	80 81       	ld	r24, Z
    db14:	84 ff       	sbrs	r24, 4
    db16:	16 c0       	rjmp	.+44     	; 0xdb44 <update_player+0x2f8>
		{
			player->flags = IDLE;	
    db18:	88 e0       	ldi	r24, 0x08	; 8
    db1a:	f7 01       	movw	r30, r14
    db1c:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    db1e:	82 81       	ldd	r24, Z+2	; 0x02
    db20:	93 81       	ldd	r25, Z+3	; 0x03
    db22:	40 97       	sbiw	r24, 0x10	; 16
    db24:	93 83       	std	Z+3, r25	; 0x03
    db26:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    db28:	82 85       	ldd	r24, Z+10	; 0x0a
    db2a:	81 30       	cpi	r24, 0x01	; 1
    db2c:	29 f4       	brne	.+10     	; 0xdb38 <update_player+0x2ec>
			{
				player->shared.x += 8;
    db2e:	80 81       	ld	r24, Z
    db30:	91 81       	ldd	r25, Z+1	; 0x01
    db32:	08 96       	adiw	r24, 0x08	; 8
    db34:	91 83       	std	Z+1, r25	; 0x01
    db36:	80 83       	st	Z, r24
			}
			player->width = 2;
    db38:	82 e0       	ldi	r24, 0x02	; 2
    db3a:	f7 01       	movw	r30, r14
    db3c:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    db3e:	83 e0       	ldi	r24, 0x03	; 3
    db40:	84 87       	std	Z+12, r24	; 0x0c
    db42:	44 c0       	rjmp	.+136    	; 0xdbcc <update_player+0x380>
		}
		else if (player->controls.pressed & BTN_B)
    db44:	80 ff       	sbrs	r24, 0
    db46:	28 c0       	rjmp	.+80     	; 0xdb98 <update_player+0x34c>
		{
			player->flags = JUMPING;
    db48:	81 e0       	ldi	r24, 0x01	; 1
    db4a:	f7 01       	movw	r30, r14
    db4c:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    db4e:	82 81       	ldd	r24, Z+2	; 0x02
    db50:	93 81       	ldd	r25, Z+3	; 0x03
    db52:	40 97       	sbiw	r24, 0x10	; 16
    db54:	93 83       	std	Z+3, r25	; 0x03
    db56:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    db58:	82 85       	ldd	r24, Z+10	; 0x0a
    db5a:	81 30       	cpi	r24, 0x01	; 1
    db5c:	29 f4       	brne	.+10     	; 0xdb68 <update_player+0x31c>
			{
				player->shared.x += 8;
    db5e:	80 81       	ld	r24, Z
    db60:	91 81       	ldd	r25, Z+1	; 0x01
    db62:	08 96       	adiw	r24, 0x08	; 8
    db64:	91 83       	std	Z+1, r25	; 0x01
    db66:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    db68:	81 e8       	ldi	r24, 0x81	; 129
    db6a:	f7 01       	movw	r30, r14
    db6c:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    db6e:	88 ec       	ldi	r24, 0xC8	; 200
    db70:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    db72:	82 e0       	ldi	r24, 0x02	; 2
    db74:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    db76:	83 e0       	ldi	r24, 0x03	; 3
    db78:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    db7a:	24 e0       	ldi	r18, 0x04	; 4
    db7c:	12 9f       	mul	r17, r18
    db7e:	f0 01       	movw	r30, r0
    db80:	11 24       	eor	r1, r1
    db82:	e5 52       	subi	r30, 0x25	; 37
    db84:	f0 4f       	sbci	r31, 0xF0	; 240
    db86:	43 81       	ldd	r20, Z+3	; 0x03
    db88:	c7 01       	movw	r24, r14
    db8a:	84 5a       	subi	r24, 0xA4	; 164
    db8c:	9f 4f       	sbci	r25, 0xFF	; 255
    db8e:	49 83       	std	Y+1, r20	; 0x01
    db90:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    db94:	49 81       	ldd	r20, Y+1	; 0x01
    db96:	16 c0       	rjmp	.+44     	; 0xdbc4 <update_player+0x378>
		}
		else if (player->controls.pressed & BTN_LEFT)
    db98:	86 ff       	sbrs	r24, 6
    db9a:	09 c0       	rjmp	.+18     	; 0xdbae <update_player+0x362>
		{
			player->direction = D_LEFT;
    db9c:	f7 01       	movw	r30, r14
    db9e:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    dba0:	c7 01       	movw	r24, r14
    dba2:	8c 59       	subi	r24, 0x9C	; 156
    dba4:	9f 4f       	sbci	r25, 0xFF	; 255
    dba6:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    dbaa:	41 e0       	ldi	r20, 0x01	; 1
    dbac:	0b c0       	rjmp	.+22     	; 0xdbc4 <update_player+0x378>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    dbae:	87 ff       	sbrs	r24, 7
    dbb0:	0d c0       	rjmp	.+26     	; 0xdbcc <update_player+0x380>
		{
			player->direction = D_RIGHT;
    dbb2:	81 e0       	ldi	r24, 0x01	; 1
    dbb4:	f7 01       	movw	r30, r14
    dbb6:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    dbb8:	c7 01       	movw	r24, r14
    dbba:	8c 59       	subi	r24, 0x9C	; 156
    dbbc:	9f 4f       	sbci	r25, 0xFF	; 255
    dbbe:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    dbc2:	40 e0       	ldi	r20, 0x00	; 0
    dbc4:	bc 01       	movw	r22, r24
    dbc6:	81 2f       	mov	r24, r17
    dbc8:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		}
	}
	return 1;
}
    dbcc:	81 e0       	ldi	r24, 0x01	; 1
    dbce:	0f 90       	pop	r0
    dbd0:	df 91       	pop	r29
    dbd2:	cf 91       	pop	r28
    dbd4:	1f 91       	pop	r17
    dbd6:	0f 91       	pop	r16
    dbd8:	ff 90       	pop	r15
    dbda:	ef 90       	pop	r14
    dbdc:	08 95       	ret

0000dbde <update_level>:
		}
	}
}

u8 update_level()
{
    dbde:	cf 92       	push	r12
    dbe0:	df 92       	push	r13
    dbe2:	ef 92       	push	r14
    dbe4:	ff 92       	push	r15
    dbe6:	0f 93       	push	r16
    dbe8:	cf 93       	push	r28
    dbea:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    dbec:	e0 90 d0 0d 	lds	r14, 0x0DD0
    dbf0:	f0 90 d1 0d 	lds	r15, 0x0DD1
    dbf4:	c0 90 b2 0d 	lds	r12, 0x0DB2
    dbf8:	d0 90 b3 0d 	lds	r13, 0x0DB3
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    dbfc:	80 91 cc 0d 	lds	r24, 0x0DCC
    dc00:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    dc02:	8c 33       	cpi	r24, 0x3C	; 60
    dc04:	19 f0       	breq	.+6      	; 0xdc0c <update_level+0x2e>
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	game.frame_counter++;
    dc06:	80 93 cc 0d 	sts	0x0DCC, r24
    dc0a:	0f c0       	rjmp	.+30     	; 0xdc2a <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    dc0c:	10 92 cc 0d 	sts	0x0DCC, r1
		if (game.time != 65535) game.time++;
    dc10:	80 91 b8 0d 	lds	r24, 0x0DB8
    dc14:	90 91 b9 0d 	lds	r25, 0x0DB9
    dc18:	8f 3f       	cpi	r24, 0xFF	; 255
    dc1a:	2f ef       	ldi	r18, 0xFF	; 255
    dc1c:	92 07       	cpc	r25, r18
    dc1e:	29 f0       	breq	.+10     	; 0xdc2a <update_level+0x4c>
    dc20:	01 96       	adiw	r24, 0x01	; 1
    dc22:	90 93 b9 0d 	sts	0x0DB9, r25
    dc26:	80 93 b8 0d 	sts	0x0DB8, r24
	}
	
	if (is_space())
    dc2a:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    dc2e:	88 23       	and	r24, r24
    dc30:	19 f1       	breq	.+70     	; 0xdc78 <update_level+0x9a>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    dc32:	96 01       	movw	r18, r12
    dc34:	93 e0       	ldi	r25, 0x03	; 3
    dc36:	36 95       	lsr	r19
    dc38:	27 95       	ror	r18
    dc3a:	9a 95       	dec	r25
    dc3c:	e1 f7       	brne	.-8      	; 0xdc36 <update_level+0x58>
    dc3e:	24 5e       	subi	r18, 0xE4	; 228
    dc40:	3f 4f       	sbci	r19, 0xFF	; 255
    dc42:	80 91 c1 0d 	lds	r24, 0x0DC1
    dc46:	90 e0       	ldi	r25, 0x00	; 0
    dc48:	28 17       	cp	r18, r24
    dc4a:	39 07       	cpc	r19, r25
    dc4c:	18 f4       	brcc	.+6      	; 0xdc54 <update_level+0x76>
		{
			move_camera_x();
    dc4e:	0e 94 98 5b 	call	0xb730	; 0xb730 <move_camera_x>
    dc52:	2a c0       	rjmp	.+84     	; 0xdca8 <update_level+0xca>
    dc54:	80 91 d8 0d 	lds	r24, 0x0DD8
		}
		else if (game.player.shared.x >= game.camera_x+CAMERA_WIDTH*8)
    dc58:	96 01       	movw	r18, r12
    dc5a:	20 52       	subi	r18, 0x20	; 32
    dc5c:	3f 4f       	sbci	r19, 0xFF	; 255
    dc5e:	e2 16       	cp	r14, r18
    dc60:	f3 06       	cpc	r15, r19
    dc62:	30 f0       	brcs	.+12     	; 0xdc70 <update_level+0x92>
		{
			game.level_ended = 1;
    dc64:	91 e0       	ldi	r25, 0x01	; 1
    dc66:	90 93 cf 0d 	sts	0x0DCF, r25
			game.player.flags ^= END_OF_SPACE;
    dc6a:	90 e2       	ldi	r25, 0x20	; 32
    dc6c:	89 27       	eor	r24, r25
    dc6e:	01 c0       	rjmp	.+2      	; 0xdc72 <update_level+0x94>
		} else {
			game.player.flags |= END_OF_SPACE;
    dc70:	80 62       	ori	r24, 0x20	; 32
    dc72:	80 93 d8 0d 	sts	0x0DD8, r24
    dc76:	18 c0       	rjmp	.+48     	; 0xdca8 <update_level+0xca>
		}
	}
	else if (game.player.shared.vx > 0 &&
    dc78:	80 91 d5 0d 	lds	r24, 0x0DD5
    dc7c:	18 16       	cp	r1, r24
    dc7e:	a4 f4       	brge	.+40     	; 0xdca8 <update_level+0xca>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dc80:	c7 01       	movw	r24, r14
    dc82:	8c 19       	sub	r24, r12
    dc84:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dc86:	80 37       	cpi	r24, 0x70	; 112
    dc88:	91 05       	cpc	r25, r1
    dc8a:	70 f0       	brcs	.+28     	; 0xdca8 <update_level+0xca>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dc8c:	96 01       	movw	r18, r12
    dc8e:	83 e0       	ldi	r24, 0x03	; 3
    dc90:	36 95       	lsr	r19
    dc92:	27 95       	ror	r18
    dc94:	8a 95       	dec	r24
    dc96:	e1 f7       	brne	.-8      	; 0xdc90 <update_level+0xb2>
    dc98:	24 5e       	subi	r18, 0xE4	; 228
    dc9a:	3f 4f       	sbci	r19, 0xFF	; 255
    dc9c:	80 91 c1 0d 	lds	r24, 0x0DC1
    dca0:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dca2:	28 17       	cp	r18, r24
    dca4:	39 07       	cpc	r19, r25
    dca6:	98 f2       	brcs	.-90     	; 0xdc4e <update_level+0x70>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    dca8:	21 e0       	ldi	r18, 0x01	; 1
    dcaa:	40 91 df 0d 	lds	r20, 0x0DDF
    dcae:	6d e1       	ldi	r22, 0x1D	; 29
    dcb0:	89 e0       	ldi	r24, 0x09	; 9
    dcb2:	0e 94 ba 50 	call	0xa174	; 0xa174 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    dcb6:	40 91 b8 0d 	lds	r20, 0x0DB8
    dcba:	50 91 b9 0d 	lds	r21, 0x0DB9
    dcbe:	21 e0       	ldi	r18, 0x01	; 1
    dcc0:	6d e1       	ldi	r22, 0x1D	; 29
    dcc2:	8b e1       	ldi	r24, 0x1B	; 27
    dcc4:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    dcc8:	21 e0       	ldi	r18, 0x01	; 1
    dcca:	40 91 c5 0d 	lds	r20, 0x0DC5
    dcce:	6e e1       	ldi	r22, 0x1E	; 30
    dcd0:	89 e0       	ldi	r24, 0x09	; 9
    dcd2:	0e 94 ba 50 	call	0xa174	; 0xa174 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    dcd6:	40 91 b6 0d 	lds	r20, 0x0DB6
    dcda:	50 91 b7 0d 	lds	r21, 0x0DB7
    dcde:	21 e0       	ldi	r18, 0x01	; 1
    dce0:	6e e1       	ldi	r22, 0x1E	; 30
    dce2:	8b e1       	ldi	r24, 0x1B	; 27
    dce4:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    dce8:	40 91 b4 0d 	lds	r20, 0x0DB4
    dcec:	50 91 b5 0d 	lds	r21, 0x0DB5
    dcf0:	21 e0       	ldi	r18, 0x01	; 1
    dcf2:	6f e1       	ldi	r22, 0x1F	; 31
    dcf4:	8b e1       	ldi	r24, 0x1B	; 27
    dcf6:	0e 94 eb 50 	call	0xa1d6	; 0xa1d6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    dcfa:	80 91 cf 0d 	lds	r24, 0x0DCF
    dcfe:	88 23       	and	r24, r24
    dd00:	09 f4       	brne	.+2      	; 0xdd04 <update_level+0x126>
    dd02:	86 c0       	rjmp	.+268    	; 0xde10 <update_level+0x232>
    dd04:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    dd08:	81 11       	cpse	r24, r1
    dd0a:	6c c0       	rjmp	.+216    	; 0xdde4 <update_level+0x206>
    dd0c:	80 91 d8 0d 	lds	r24, 0x0DD8
    dd10:	8e 70       	andi	r24, 0x0E	; 14
    dd12:	09 f4       	brne	.+2      	; 0xdd16 <update_level+0x138>
    dd14:	7d c0       	rjmp	.+250    	; 0xde10 <update_level+0x232>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    dd16:	40 e0       	ldi	r20, 0x00	; 0
    dd18:	66 e2       	ldi	r22, 0x26	; 38
    dd1a:	77 e3       	ldi	r23, 0x37	; 55
    dd1c:	80 e0       	ldi	r24, 0x00	; 0
    dd1e:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    dd22:	80 91 d8 0d 	lds	r24, 0x0DD8
    dd26:	82 ff       	sbrs	r24, 2
    dd28:	1a c0       	rjmp	.+52     	; 0xdd5e <update_level+0x180>
			game.player.shared.y -= 16;
    dd2a:	40 91 d2 0d 	lds	r20, 0x0DD2
    dd2e:	50 91 d3 0d 	lds	r21, 0x0DD3
    dd32:	40 51       	subi	r20, 0x10	; 16
    dd34:	51 09       	sbc	r21, r1
    dd36:	50 93 d3 0d 	sts	0x0DD3, r21
    dd3a:	40 93 d2 0d 	sts	0x0DD2, r20
			game.player.width = 2;
    dd3e:	82 e0       	ldi	r24, 0x02	; 2
    dd40:	80 93 db 0d 	sts	0x0DDB, r24
			game.player.height = 3;
    dd44:	83 e0       	ldi	r24, 0x03	; 3
    dd46:	80 93 dc 0d 	sts	0x0DDC, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    dd4a:	60 91 d0 0d 	lds	r22, 0x0DD0
    dd4e:	80 91 b2 0d 	lds	r24, 0x0DB2
    dd52:	68 1b       	sub	r22, r24
    dd54:	03 e0       	ldi	r16, 0x03	; 3
    dd56:	22 e0       	ldi	r18, 0x02	; 2
    dd58:	80 e0       	ldi	r24, 0x00	; 0
    dd5a:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    dd5e:	6b e0       	ldi	r22, 0x0B	; 11
    dd60:	89 e0       	ldi	r24, 0x09	; 9
    dd62:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
		LBRotateSprites();
    dd66:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
		map_ship();
    dd6a:	0e 94 b1 5b 	call	0xb762	; 0xb762 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    dd6e:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    dd70:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    dd72:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    dd74:	81 e0       	ldi	r24, 0x01	; 1
    dd76:	90 e0       	ldi	r25, 0x00	; 0
    dd78:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    dd7c:	8c 2f       	mov	r24, r28
    dd7e:	90 e0       	ldi	r25, 0x00	; 0
    dd80:	88 3a       	cpi	r24, 0xA8	; 168
    dd82:	91 05       	cpc	r25, r1
    dd84:	3c f0       	brlt	.+14     	; 0xdd94 <update_level+0x1b6>
			{
				clear_sprites(0, 6);
    dd86:	66 e0       	ldi	r22, 0x06	; 6
    dd88:	80 e0       	ldi	r24, 0x00	; 0
    dd8a:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
				LBRotateSprites();
    dd8e:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
				ship_increment = -3;
    dd92:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    dd94:	84 e2       	ldi	r24, 0x24	; 36
    dd96:	9e e0       	ldi	r25, 0x0E	; 14
    dd98:	0e 94 0d 50 	call	0xa01a	; 0xa01a <LBGetNextFrame>
    dd9c:	40 e0       	ldi	r20, 0x00	; 0
    dd9e:	bc 01       	movw	r22, r24
    dda0:	86 e0       	ldi	r24, 0x06	; 6
    dda2:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    dda6:	02 e0       	ldi	r16, 0x02	; 2
    dda8:	24 e0       	ldi	r18, 0x04	; 4
    ddaa:	4c 2f       	mov	r20, r28
    ddac:	6e 2d       	mov	r22, r14
    ddae:	86 e0       	ldi	r24, 0x06	; 6
    ddb0:	0e 94 c5 51 	call	0xa38a	; 0xa38a <LBMoveSprite>
			ship_y += ship_increment;
    ddb4:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    ddb6:	99 f4       	brne	.+38     	; 0xddde <update_level+0x200>
			{
				clear_sprites(6, 8);
    ddb8:	68 e0       	ldi	r22, 0x08	; 8
    ddba:	86 e0       	ldi	r24, 0x06	; 6
    ddbc:	0e 94 40 65 	call	0xca80	; 0xca80 <clear_sprites>
				LBRotateSprites();
    ddc0:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    ddc4:	64 e6       	ldi	r22, 0x64	; 100
    ddc6:	70 e0       	ldi	r23, 0x00	; 0
    ddc8:	8d ec       	ldi	r24, 0xCD	; 205
    ddca:	9a e0       	ldi	r25, 0x0A	; 10
    ddcc:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    ddd0:	80 91 c7 0d 	lds	r24, 0x0DC7
    ddd4:	00 e0       	ldi	r16, 0x00	; 0
    ddd6:	23 e0       	ldi	r18, 0x03	; 3
    ddd8:	4a e1       	ldi	r20, 0x1A	; 26
    ddda:	6f ef       	ldi	r22, 0xFF	; 255
    dddc:	15 c0       	rjmp	.+42     	; 0xde08 <update_level+0x22a>
				break;
			}
			LBRotateSprites();
    ddde:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
		}
    dde2:	c8 cf       	rjmp	.-112    	; 0xdd74 <update_level+0x196>
	}
	else if (game.level_ended && is_space())
	{
		tally_score((char*) strLevelClear, 100);
    dde4:	64 e6       	ldi	r22, 0x64	; 100
    dde6:	70 e0       	ldi	r23, 0x00	; 0
    dde8:	8d ec       	ldi	r24, 0xCD	; 205
    ddea:	9a e0       	ldi	r25, 0x0A	; 10
    ddec:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <tally_score>
		if (game.current_level_index == 9) {
    ddf0:	80 91 c7 0d 	lds	r24, 0x0DC7
    ddf4:	89 30       	cpi	r24, 0x09	; 9
    ddf6:	21 f4       	brne	.+8      	; 0xde00 <update_level+0x222>
			exit_game();
    ddf8:	0e 94 b2 69 	call	0xd364	; 0xd364 <exit_game>
			return 1;
    ddfc:	81 e0       	ldi	r24, 0x01	; 1
    ddfe:	08 c0       	rjmp	.+16     	; 0xde10 <update_level+0x232>
		} else {
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    de00:	07 ec       	ldi	r16, 0xC7	; 199
    de02:	2d ef       	ldi	r18, 0xFD	; 253
    de04:	4c e1       	ldi	r20, 0x1C	; 28
    de06:	61 e0       	ldi	r22, 0x01	; 1
    de08:	8f 5f       	subi	r24, 0xFF	; 255
    de0a:	0e 94 84 67 	call	0xcf08	; 0xcf08 <planet_transition>
		}
	}
	return 0;
    de0e:	80 e0       	ldi	r24, 0x00	; 0
	
}
    de10:	df 91       	pop	r29
    de12:	cf 91       	pop	r28
    de14:	0f 91       	pop	r16
    de16:	ff 90       	pop	r15
    de18:	ef 90       	pop	r14
    de1a:	df 90       	pop	r13
    de1c:	cf 90       	pop	r12
    de1e:	08 95       	ret

0000de20 <update_pause>:
		}
	}
}

void update_pause()
{
    de20:	ef 92       	push	r14
    de22:	ff 92       	push	r15
    de24:	0f 93       	push	r16
    de26:	1f 93       	push	r17
    de28:	cf 93       	push	r28
    de2a:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    de2c:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    de30:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    de34:	80 91 44 0e 	lds	r24, 0x0E44
    de38:	83 ff       	sbrs	r24, 3
    de3a:	63 c0       	rjmp	.+198    	; 0xdf02 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    de3c:	06 95       	lsr	r16
    de3e:	06 95       	lsr	r16
    de40:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    de42:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    de44:	c6 95       	lsr	r28
    de46:	c6 95       	lsr	r28
    de48:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    de4a:	d0 e0       	ldi	r29, 0x00	; 0
    de4c:	c8 01       	movw	r24, r16
    de4e:	06 96       	adiw	r24, 0x06	; 6
    de50:	2e e1       	ldi	r18, 0x1E	; 30
    de52:	e2 2e       	mov	r14, r18
    de54:	f1 2c       	mov	r15, r1
    de56:	b7 01       	movw	r22, r14
    de58:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    de5c:	9e 01       	movw	r18, r28
    de5e:	28 5f       	subi	r18, 0xF8	; 248
    de60:	3f 4f       	sbci	r19, 0xFF	; 255
    de62:	48 ed       	ldi	r20, 0xD8	; 216
    de64:	5f e5       	ldi	r21, 0x5F	; 95
    de66:	68 2f       	mov	r22, r24
    de68:	82 2f       	mov	r24, r18
    de6a:	8f 71       	andi	r24, 0x1F	; 31
    de6c:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    de70:	c8 01       	movw	r24, r16
    de72:	09 96       	adiw	r24, 0x09	; 9
    de74:	b7 01       	movw	r22, r14
    de76:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    de7a:	9e 01       	movw	r18, r28
    de7c:	23 5f       	subi	r18, 0xF3	; 243
    de7e:	3f 4f       	sbci	r19, 0xFF	; 255
    de80:	49 ed       	ldi	r20, 0xD9	; 217
    de82:	5a e0       	ldi	r21, 0x0A	; 10
    de84:	68 2f       	mov	r22, r24
    de86:	82 2f       	mov	r24, r18
    de88:	8f 71       	andi	r24, 0x1F	; 31
    de8a:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    de8e:	c8 01       	movw	r24, r16
    de90:	0c 96       	adiw	r24, 0x0c	; 12
    de92:	b7 01       	movw	r22, r14
    de94:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    de98:	2a 96       	adiw	r28, 0x0a	; 10
    de9a:	4f ed       	ldi	r20, 0xDF	; 223
    de9c:	5a e0       	ldi	r21, 0x0A	; 10
    de9e:	68 2f       	mov	r22, r24
    dea0:	8c 2f       	mov	r24, r28
    dea2:	8f 71       	andi	r24, 0x1F	; 31
    dea4:	0e 94 9e 50 	call	0xa13c	; 0xa13c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    dea8:	64 e1       	ldi	r22, 0x14	; 20
    deaa:	80 e0       	ldi	r24, 0x00	; 0
    deac:	0e 94 80 66 	call	0xcd00	; 0xcd00 <hide_sprites>
		LBRotateSprites();
    deb0:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    deb4:	81 e0       	ldi	r24, 0x01	; 1
    deb6:	90 e0       	ldi	r25, 0x00	; 0
    deb8:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    debc:	60 e0       	ldi	r22, 0x00	; 0
    debe:	84 e4       	ldi	r24, 0x44	; 68
    dec0:	9e e0       	ldi	r25, 0x0E	; 14
    dec2:	0e 94 33 50 	call	0xa066	; 0xa066 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    dec6:	80 91 44 0e 	lds	r24, 0x0E44
    deca:	90 91 45 0e 	lds	r25, 0x0E45
    dece:	83 ff       	sbrs	r24, 3
    ded0:	08 c0       	rjmp	.+16     	; 0xdee2 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    ded2:	df 91       	pop	r29
    ded4:	cf 91       	pop	r28
    ded6:	1f 91       	pop	r17
    ded8:	0f 91       	pop	r16
    deda:	ff 90       	pop	r15
    dedc:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    dede:	0c 94 ce 59 	jmp	0xb39c	; 0xb39c <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    dee2:	91 ff       	sbrs	r25, 1
    dee4:	e7 cf       	rjmp	.-50     	; 0xdeb4 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    dee6:	60 e0       	ldi	r22, 0x00	; 0
    dee8:	70 e0       	ldi	r23, 0x00	; 0
    deea:	8d eb       	ldi	r24, 0xBD	; 189
    deec:	9a e0       	ldi	r25, 0x0A	; 10
    deee:	0e 94 a7 6a 	call	0xd54e	; 0xd54e <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    def2:	df 91       	pop	r29
    def4:	cf 91       	pop	r28
    def6:	1f 91       	pop	r17
    def8:	0f 91       	pop	r16
    defa:	ff 90       	pop	r15
    defc:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    defe:	0c 94 b2 69 	jmp	0xd364	; 0xd364 <exit_game>
				break;
			}
		}
	}
}
    df02:	df 91       	pop	r29
    df04:	cf 91       	pop	r28
    df06:	1f 91       	pop	r17
    df08:	0f 91       	pop	r16
    df0a:	ff 90       	pop	r15
    df0c:	ef 90       	pop	r14
    df0e:	08 95       	ret

0000df10 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    df10:	cf 92       	push	r12
    df12:	df 92       	push	r13
    df14:	ff 92       	push	r15
    df16:	0f 93       	push	r16
    df18:	1f 93       	push	r17
    df1a:	cf 93       	push	r28
    df1c:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    df1e:	20 91 c7 0d 	lds	r18, 0x0DC7
    df22:	f2 2e       	mov	r15, r18
    df24:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    df26:	ef ea       	ldi	r30, 0xAF	; 175
    df28:	fc e0       	ldi	r31, 0x0C	; 12
    df2a:	84 81       	ldd	r24, Z+4	; 0x04
    df2c:	86 95       	lsr	r24
    df2e:	86 95       	lsr	r24
    df30:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    df32:	08 2f       	mov	r16, r24
    df34:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    df36:	c3 81       	ldd	r28, Z+3	; 0x03
    df38:	c6 95       	lsr	r28
    df3a:	c6 95       	lsr	r28
    df3c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    df3e:	d0 e0       	ldi	r29, 0x00	; 0
    df40:	c8 01       	movw	r24, r16
    df42:	06 96       	adiw	r24, 0x06	; 6
    df44:	2e e1       	ldi	r18, 0x1E	; 30
    df46:	c2 2e       	mov	r12, r18
    df48:	d1 2c       	mov	r13, r1
    df4a:	b6 01       	movw	r22, r12
    df4c:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    df50:	9e 01       	movw	r18, r28
    df52:	29 5f       	subi	r18, 0xF9	; 249
    df54:	3f 4f       	sbci	r19, 0xFF	; 255
    df56:	46 e7       	ldi	r20, 0x76	; 118
    df58:	5f e5       	ldi	r21, 0x5F	; 95
    df5a:	68 2f       	mov	r22, r24
    df5c:	82 2f       	mov	r24, r18
    df5e:	8f 71       	andi	r24, 0x1F	; 31
    df60:	0e 94 dc 4e 	call	0x9db8	; 0x9db8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    df64:	c8 01       	movw	r24, r16
    df66:	09 96       	adiw	r24, 0x09	; 9
    df68:	b6 01       	movw	r22, r12
    df6a:	0e 94 f9 70 	call	0xe1f2	; 0xe1f2 <__divmodhi4>
    df6e:	be 01       	movw	r22, r28
    df70:	68 5f       	subi	r22, 0xF8	; 248
    df72:	7f 4f       	sbci	r23, 0xFF	; 255
    df74:	6f 71       	andi	r22, 0x1F	; 31
    df76:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    df78:	93 e2       	ldi	r25, 0x23	; 35
    df7a:	f9 9e       	mul	r15, r25
    df7c:	90 01       	movw	r18, r0
    df7e:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    df80:	48 2f       	mov	r20, r24
    df82:	c9 01       	movw	r24, r18
    df84:	8d 5b       	subi	r24, 0xBD	; 189
    df86:	96 4f       	sbci	r25, 0xF6	; 246
    df88:	0e 94 dd 66 	call	0xcdba	; 0xcdba <stream_text_anywhere>
	LBWaitSeconds(3);
    df8c:	83 e0       	ldi	r24, 0x03	; 3
    df8e:	0e 94 64 51 	call	0xa2c8	; 0xa2c8 <LBWaitSeconds>
	game.boss.active = 1;
    df92:	81 e0       	ldi	r24, 0x01	; 1
    df94:	80 93 58 0e 	sts	0x0E58, r24
	render_camera_view();
}
    df98:	df 91       	pop	r29
    df9a:	cf 91       	pop	r28
    df9c:	1f 91       	pop	r17
    df9e:	0f 91       	pop	r16
    dfa0:	ff 90       	pop	r15
    dfa2:	df 90       	pop	r13
    dfa4:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    dfa6:	0c 94 ce 59 	jmp	0xb39c	; 0xb39c <render_camera_view>

0000dfaa <update_player_ai>:
}

void update_player_ai(Player* player) 
{
    dfaa:	cf 93       	push	r28
    dfac:	df 93       	push	r29
    dfae:	ec 01       	movw	r28, r24
	 static s8 last_shield_value;
	 
	 if (player->ai_flags == AI_NOT_READY) {
    dfb0:	89 85       	ldd	r24, Y+9	; 0x09
    dfb2:	81 11       	cpse	r24, r1
    dfb4:	0a c0       	rjmp	.+20     	; 0xdfca <update_player_ai+0x20>
		 player->controls.held = BTN_LEFT;
    dfb6:	80 e4       	ldi	r24, 0x40	; 64
    dfb8:	90 e0       	ldi	r25, 0x00	; 0
    dfba:	fe 01       	movw	r30, r28
    dfbc:	e8 58       	subi	r30, 0x88	; 136
    dfbe:	ff 4f       	sbci	r31, 0xFF	; 255
    dfc0:	91 83       	std	Z+1, r25	; 0x01
    dfc2:	80 83       	st	Z, r24
		 player->ai_flags = AI_READY;
    dfc4:	81 e0       	ldi	r24, 0x01	; 1
    dfc6:	89 87       	std	Y+9, r24	; 0x09
    dfc8:	55 c0       	rjmp	.+170    	; 0xe074 <update_player_ai+0xca>
	 }
	 else if (player->ai_flags & AI_READY) {
    dfca:	80 ff       	sbrs	r24, 0
    dfcc:	1f c0       	rjmp	.+62     	; 0xe00c <update_player_ai+0x62>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    dfce:	fe 01       	movw	r30, r28
    dfd0:	ec 58       	subi	r30, 0x8C	; 140
    dfd2:	ff 4f       	sbci	r31, 0xFF	; 255
    dfd4:	15 82       	std	Z+5, r1	; 0x05
    dfd6:	14 82       	std	Z+4, r1	; 0x04
	p->pressed = 0;
    dfd8:	11 82       	std	Z+1, r1	; 0x01
    dfda:	10 82       	st	Z, r1
	p->released = 0;
    dfdc:	13 82       	std	Z+3, r1	; 0x03
    dfde:	12 82       	std	Z+2, r1	; 0x02
	p->held_cycles = 0;
    dfe0:	16 82       	std	Z+6, r1	; 0x06
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width) {
    dfe2:	80 91 b2 0d 	lds	r24, 0x0DB2
    dfe6:	90 91 b3 0d 	lds	r25, 0x0DB3
    dfea:	23 e0       	ldi	r18, 0x03	; 3
    dfec:	96 95       	lsr	r25
    dfee:	87 95       	ror	r24
    dff0:	2a 95       	dec	r18
    dff2:	e1 f7       	brne	.-8      	; 0xdfec <update_player_ai+0x42>
    dff4:	4c 96       	adiw	r24, 0x1c	; 28
    dff6:	20 91 c1 0d 	lds	r18, 0x0DC1
    dffa:	30 e0       	ldi	r19, 0x00	; 0
    dffc:	82 17       	cp	r24, r18
    dffe:	93 07       	cpc	r25, r19
    e000:	c8 f1       	brcs	.+114    	; 0xe074 <update_player_ai+0xca>
			 challenge();
    e002:	0e 94 88 6f 	call	0xdf10	; 0xdf10 <challenge>
			 player->ai_flags = AI_WALKING;
    e006:	82 e0       	ldi	r24, 0x02	; 2
    e008:	89 87       	std	Y+9, r24	; 0x09
    e00a:	2d c0       	rjmp	.+90     	; 0xe066 <update_player_ai+0xbc>
			 player->controls.held = BTN_LEFT;
		 }
	 } else if (player->ai_flags & AI_WALKING) {
    e00c:	81 ff       	sbrs	r24, 1
    e00e:	32 c0       	rjmp	.+100    	; 0xe074 <update_player_ai+0xca>
		 player->controls.pressed = 0;
    e010:	fe 01       	movw	r30, r28
    e012:	ec 58       	subi	r30, 0x8C	; 140
    e014:	ff 4f       	sbci	r31, 0xFF	; 255
    e016:	11 82       	std	Z+1, r1	; 0x01
    e018:	10 82       	st	Z, r1
		 if (game.frame_counter % 15 == 0) {
    e01a:	80 91 cc 0d 	lds	r24, 0x0DCC
    e01e:	6f e0       	ldi	r22, 0x0F	; 15
    e020:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    e024:	91 11       	cpse	r25, r1
    e026:	04 c0       	rjmp	.+8      	; 0xe030 <update_player_ai+0x86>
			 player->controls.pressed = BTN_A;
    e028:	80 e0       	ldi	r24, 0x00	; 0
    e02a:	91 e0       	ldi	r25, 0x01	; 1
    e02c:	91 83       	std	Z+1, r25	; 0x01
    e02e:	80 83       	st	Z, r24
		 }
		 if (last_shield_value > player->shield) {
    e030:	90 91 f4 0c 	lds	r25, 0x0CF4
    e034:	8f 85       	ldd	r24, Y+15	; 0x0f
    e036:	89 17       	cp	r24, r25
    e038:	2c f4       	brge	.+10     	; 0xe044 <update_player_ai+0x9a>
			 player->controls.pressed |= BTN_B;
    e03a:	80 81       	ld	r24, Z
    e03c:	91 81       	ldd	r25, Z+1	; 0x01
    e03e:	81 60       	ori	r24, 0x01	; 1
    e040:	91 83       	std	Z+1, r25	; 0x01
    e042:	80 83       	st	Z, r24
		 }
		 if (player->shared.x <= game.camera_x) {
    e044:	28 81       	ld	r18, Y
    e046:	39 81       	ldd	r19, Y+1	; 0x01
    e048:	80 91 b2 0d 	lds	r24, 0x0DB2
    e04c:	90 91 b3 0d 	lds	r25, 0x0DB3
    e050:	82 17       	cp	r24, r18
    e052:	93 07       	cpc	r25, r19
    e054:	18 f0       	brcs	.+6      	; 0xe05c <update_player_ai+0xb2>
			 player->controls.held = BTN_RIGHT;
    e056:	80 e8       	ldi	r24, 0x80	; 128
    e058:	90 e0       	ldi	r25, 0x00	; 0
    e05a:	07 c0       	rjmp	.+14     	; 0xe06a <update_player_ai+0xc0>
		 } else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8) {
    e05c:	80 53       	subi	r24, 0x30	; 48
    e05e:	9f 4f       	sbci	r25, 0xFF	; 255
    e060:	28 17       	cp	r18, r24
    e062:	39 07       	cpc	r19, r25
    e064:	38 f0       	brcs	.+14     	; 0xe074 <update_player_ai+0xca>
			 player->controls.held = BTN_LEFT;
    e066:	80 e4       	ldi	r24, 0x40	; 64
    e068:	90 e0       	ldi	r25, 0x00	; 0
    e06a:	fe 01       	movw	r30, r28
    e06c:	e8 58       	subi	r30, 0x88	; 136
    e06e:	ff 4f       	sbci	r31, 0xFF	; 255
    e070:	91 83       	std	Z+1, r25	; 0x01
    e072:	80 83       	st	Z, r24
		 }
	 }
	 last_shield_value = player->shield;
    e074:	8f 85       	ldd	r24, Y+15	; 0x0f
    e076:	80 93 f4 0c 	sts	0x0CF4, r24
}
    e07a:	df 91       	pop	r29
    e07c:	cf 91       	pop	r28
    e07e:	08 95       	ret

0000e080 <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e080:	0e 94 0b 41 	call	0x8216	; 0x8216 <GetTrueRandomSeed>
    e084:	0e 94 8b 42 	call	0x8516	; 0x8516 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e088:	8d ea       	ldi	r24, 0xAD	; 173
    e08a:	9c e1       	ldi	r25, 0x1C	; 28
    e08c:	0e 94 65 43 	call	0x86ca	; 0x86ca <InitMusicPlayer>
	ClearVram();
    e090:	0e 94 93 40 	call	0x8126	; 0x8126 <ClearVram>
	SetMasterVolume(0x05);
    e094:	85 e0       	ldi	r24, 0x05	; 5
    e096:	0e 94 19 47 	call	0x8e32	; 0x8e32 <SetMasterVolume>
	SetTileTable(tiles_data);
    e09a:	85 e5       	ldi	r24, 0x55	; 85
    e09c:	97 e3       	ldi	r25, 0x37	; 55
    e09e:	0e 94 ae 40 	call	0x815c	; 0x815c <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e0a2:	8c e2       	ldi	r24, 0x2C	; 44
    e0a4:	9e e1       	ldi	r25, 0x1E	; 30
    e0a6:	0e 94 8e 40 	call	0x811c	; 0x811c <SetSpritesTileTable>
	}
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e0aa:	85 e1       	ldi	r24, 0x15	; 21
    e0ac:	9f e5       	ldi	r25, 0x5F	; 95
    e0ae:	90 93 85 0d 	sts	0x0D85, r25
    e0b2:	80 93 84 0d 	sts	0x0D84, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e0b6:	0e 94 3b 52 	call	0xa476	; 0xa476 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    e0ba:	0e 94 72 68 	call	0xd0e4	; 0xd0e4 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    e0be:	81 e0       	ldi	r24, 0x01	; 1
    e0c0:	90 e0       	ldi	r25, 0x00	; 0
    e0c2:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e0c6:	60 e0       	ldi	r22, 0x00	; 0
    e0c8:	84 e4       	ldi	r24, 0x44	; 68
    e0ca:	9e e0       	ldi	r25, 0x0E	; 14
    e0cc:	0e 94 33 50 	call	0xa066	; 0xa066 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e0d0:	80 91 c6 0d 	lds	r24, 0x0DC6
    e0d4:	82 30       	cpi	r24, 0x02	; 2
    e0d6:	09 f0       	breq	.+2      	; 0xe0da <main+0x5a>
    e0d8:	52 c0       	rjmp	.+164    	; 0xe17e <main+0xfe>
		{
			if (update_level()) continue;
    e0da:	0e 94 ef 6d 	call	0xdbde	; 0xdbde <update_level>
    e0de:	81 11       	cpse	r24, r1
    e0e0:	ee cf       	rjmp	.-36     	; 0xe0be <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    e0e2:	60 e0       	ldi	r22, 0x00	; 0
    e0e4:	80 ed       	ldi	r24, 0xD0	; 208
    e0e6:	9d e0       	ldi	r25, 0x0D	; 13
    e0e8:	0e 94 26 6c 	call	0xd84c	; 0xd84c <update_player>
    e0ec:	88 23       	and	r24, r24
    e0ee:	e9 f0       	breq	.+58     	; 0xe12a <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e0f0:	66 e0       	ldi	r22, 0x06	; 6
    e0f2:	80 ed       	ldi	r24, 0xD0	; 208
    e0f4:	9d e0       	ldi	r25, 0x0D	; 13
    e0f6:	0e 94 60 5c 	call	0xb8c0	; 0xb8c0 <update_shot>
				update_enemies();
    e0fa:	0e 94 8d 62 	call	0xc51a	; 0xc51a <update_enemies>
				update_enemy_shots();
    e0fe:	0e 94 fa 62 	call	0xc5f4	; 0xc5f4 <update_enemy_shots>
				animate_enemies();
    e102:	0e 94 8c 63 	call	0xc718	; 0xc718 <animate_enemies>
				animate_enemy_shots();
    e106:	0e 94 98 64 	call	0xc930	; 0xc930 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e10a:	40 e0       	ldi	r20, 0x00	; 0
    e10c:	6b e4       	ldi	r22, 0x4B	; 75
    e10e:	7e e0       	ldi	r23, 0x0E	; 14
    e110:	80 ed       	ldi	r24, 0xD0	; 208
    e112:	9d e0       	ldi	r25, 0x0D	; 13
    e114:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e118:	46 e0       	ldi	r20, 0x06	; 6
    e11a:	6b e4       	ldi	r22, 0x4B	; 75
    e11c:	7e e0       	ldi	r23, 0x0E	; 14
    e11e:	80 ed       	ldi	r24, 0xD0	; 208
    e120:	9d e0       	ldi	r25, 0x0D	; 13
    e122:	0e 94 4f 5f 	call	0xbe9e	; 0xbe9e <animate_shot>
				update_pause();
    e126:	0e 94 10 6f 	call	0xde20	; 0xde20 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e12a:	0e 94 37 52 	call	0xa46e	; 0xa46e <is_space>
    e12e:	81 11       	cpse	r24, r1
    e130:	2f c0       	rjmp	.+94     	; 0xe190 <main+0x110>
    e132:	80 91 b2 0d 	lds	r24, 0x0DB2
    e136:	90 91 b3 0d 	lds	r25, 0x0DB3
    e13a:	88 3f       	cpi	r24, 0xF8	; 248
    e13c:	96 40       	sbci	r25, 0x06	; 6
    e13e:	40 f1       	brcs	.+80     	; 0xe190 <main+0x110>
    e140:	69 e0       	ldi	r22, 0x09	; 9
    e142:	8b e4       	ldi	r24, 0x4B	; 75
    e144:	9e e0       	ldi	r25, 0x0E	; 14
    e146:	0e 94 26 6c 	call	0xd84c	; 0xd84c <update_player>
    e14a:	88 23       	and	r24, r24
    e14c:	09 f1       	breq	.+66     	; 0xe190 <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e14e:	6f e0       	ldi	r22, 0x0F	; 15
    e150:	8b e4       	ldi	r24, 0x4B	; 75
    e152:	9e e0       	ldi	r25, 0x0E	; 14
    e154:	0e 94 60 5c 	call	0xb8c0	; 0xb8c0 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e158:	49 e0       	ldi	r20, 0x09	; 9
    e15a:	60 ed       	ldi	r22, 0xD0	; 208
    e15c:	7d e0       	ldi	r23, 0x0D	; 13
    e15e:	8b e4       	ldi	r24, 0x4B	; 75
    e160:	9e e0       	ldi	r25, 0x0E	; 14
    e162:	0e 94 74 61 	call	0xc2e8	; 0xc2e8 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e166:	4f e0       	ldi	r20, 0x0F	; 15
    e168:	60 ed       	ldi	r22, 0xD0	; 208
    e16a:	7d e0       	ldi	r23, 0x0D	; 13
    e16c:	8b e4       	ldi	r24, 0x4B	; 75
    e16e:	9e e0       	ldi	r25, 0x0E	; 14
    e170:	0e 94 4f 5f 	call	0xbe9e	; 0xbe9e <animate_shot>
				update_player_ai(&game.boss);
    e174:	8b e4       	ldi	r24, 0x4B	; 75
    e176:	9e e0       	ldi	r25, 0x0E	; 14
    e178:	0e 94 d5 6f 	call	0xdfaa	; 0xdfaa <update_player_ai>
    e17c:	09 c0       	rjmp	.+18     	; 0xe190 <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    e17e:	81 11       	cpse	r24, r1
    e180:	03 c0       	rjmp	.+6      	; 0xe188 <main+0x108>
		{
			update_splash();
    e182:	0e 94 c2 69 	call	0xd384	; 0xd384 <update_splash>
    e186:	04 c0       	rjmp	.+8      	; 0xe190 <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e188:	81 30       	cpi	r24, 0x01	; 1
    e18a:	11 f4       	brne	.+4      	; 0xe190 <main+0x110>
		{
			update_high_scores();
    e18c:	0e 94 09 6a 	call	0xd412	; 0xd412 <update_high_scores>
			
		}
		LBRotateSprites();
    e190:	0e 94 03 52 	call	0xa406	; 0xa406 <LBRotateSprites>
    e194:	94 cf       	rjmp	.-216    	; 0xe0be <main+0x3e>

0000e196 <__udivmodqi4>:
    e196:	99 1b       	sub	r25, r25
    e198:	79 e0       	ldi	r23, 0x09	; 9
    e19a:	04 c0       	rjmp	.+8      	; 0xe1a4 <__udivmodqi4_ep>

0000e19c <__udivmodqi4_loop>:
    e19c:	99 1f       	adc	r25, r25
    e19e:	96 17       	cp	r25, r22
    e1a0:	08 f0       	brcs	.+2      	; 0xe1a4 <__udivmodqi4_ep>
    e1a2:	96 1b       	sub	r25, r22

0000e1a4 <__udivmodqi4_ep>:
    e1a4:	88 1f       	adc	r24, r24
    e1a6:	7a 95       	dec	r23
    e1a8:	c9 f7       	brne	.-14     	; 0xe19c <__udivmodqi4_loop>
    e1aa:	80 95       	com	r24
    e1ac:	08 95       	ret

0000e1ae <__divmodqi4>:
    e1ae:	87 fb       	bst	r24, 7
    e1b0:	08 2e       	mov	r0, r24
    e1b2:	06 26       	eor	r0, r22
    e1b4:	87 fd       	sbrc	r24, 7
    e1b6:	81 95       	neg	r24
    e1b8:	67 fd       	sbrc	r22, 7
    e1ba:	61 95       	neg	r22
    e1bc:	0e 94 cb 70 	call	0xe196	; 0xe196 <__udivmodqi4>
    e1c0:	0e f4       	brtc	.+2      	; 0xe1c4 <__divmodqi4_1>
    e1c2:	91 95       	neg	r25

0000e1c4 <__divmodqi4_1>:
    e1c4:	07 fc       	sbrc	r0, 7
    e1c6:	81 95       	neg	r24

0000e1c8 <__divmodqi4_exit>:
    e1c8:	08 95       	ret

0000e1ca <__udivmodhi4>:
    e1ca:	aa 1b       	sub	r26, r26
    e1cc:	bb 1b       	sub	r27, r27
    e1ce:	51 e1       	ldi	r21, 0x11	; 17
    e1d0:	07 c0       	rjmp	.+14     	; 0xe1e0 <__udivmodhi4_ep>

0000e1d2 <__udivmodhi4_loop>:
    e1d2:	aa 1f       	adc	r26, r26
    e1d4:	bb 1f       	adc	r27, r27
    e1d6:	a6 17       	cp	r26, r22
    e1d8:	b7 07       	cpc	r27, r23
    e1da:	10 f0       	brcs	.+4      	; 0xe1e0 <__udivmodhi4_ep>
    e1dc:	a6 1b       	sub	r26, r22
    e1de:	b7 0b       	sbc	r27, r23

0000e1e0 <__udivmodhi4_ep>:
    e1e0:	88 1f       	adc	r24, r24
    e1e2:	99 1f       	adc	r25, r25
    e1e4:	5a 95       	dec	r21
    e1e6:	a9 f7       	brne	.-22     	; 0xe1d2 <__udivmodhi4_loop>
    e1e8:	80 95       	com	r24
    e1ea:	90 95       	com	r25
    e1ec:	bc 01       	movw	r22, r24
    e1ee:	cd 01       	movw	r24, r26
    e1f0:	08 95       	ret

0000e1f2 <__divmodhi4>:
    e1f2:	97 fb       	bst	r25, 7
    e1f4:	07 2e       	mov	r0, r23
    e1f6:	16 f4       	brtc	.+4      	; 0xe1fc <__divmodhi4+0xa>
    e1f8:	00 94       	com	r0
    e1fa:	07 d0       	rcall	.+14     	; 0xe20a <__divmodhi4_neg1>
    e1fc:	77 fd       	sbrc	r23, 7
    e1fe:	09 d0       	rcall	.+18     	; 0xe212 <__divmodhi4_neg2>
    e200:	0e 94 e5 70 	call	0xe1ca	; 0xe1ca <__udivmodhi4>
    e204:	07 fc       	sbrc	r0, 7
    e206:	05 d0       	rcall	.+10     	; 0xe212 <__divmodhi4_neg2>
    e208:	3e f4       	brtc	.+14     	; 0xe218 <__divmodhi4_exit>

0000e20a <__divmodhi4_neg1>:
    e20a:	90 95       	com	r25
    e20c:	81 95       	neg	r24
    e20e:	9f 4f       	sbci	r25, 0xFF	; 255
    e210:	08 95       	ret

0000e212 <__divmodhi4_neg2>:
    e212:	70 95       	com	r23
    e214:	61 95       	neg	r22
    e216:	7f 4f       	sbci	r23, 0xFF	; 255

0000e218 <__divmodhi4_exit>:
    e218:	08 95       	ret

0000e21a <__tablejump2__>:
    e21a:	ee 0f       	add	r30, r30
    e21c:	ff 1f       	adc	r31, r31
    e21e:	05 90       	lpm	r0, Z+
    e220:	f4 91       	lpm	r31, Z
    e222:	e0 2d       	mov	r30, r0
    e224:	09 94       	ijmp

0000e226 <__subsf3>:
    e226:	50 58       	subi	r21, 0x80	; 128

0000e228 <__addsf3>:
    e228:	bb 27       	eor	r27, r27
    e22a:	aa 27       	eor	r26, r26
    e22c:	0e d0       	rcall	.+28     	; 0xe24a <__addsf3x>
    e22e:	e5 c0       	rjmp	.+458    	; 0xe3fa <__fp_round>
    e230:	d6 d0       	rcall	.+428    	; 0xe3de <__fp_pscA>
    e232:	30 f0       	brcs	.+12     	; 0xe240 <__addsf3+0x18>
    e234:	db d0       	rcall	.+438    	; 0xe3ec <__fp_pscB>
    e236:	20 f0       	brcs	.+8      	; 0xe240 <__addsf3+0x18>
    e238:	31 f4       	brne	.+12     	; 0xe246 <__addsf3+0x1e>
    e23a:	9f 3f       	cpi	r25, 0xFF	; 255
    e23c:	11 f4       	brne	.+4      	; 0xe242 <__addsf3+0x1a>
    e23e:	1e f4       	brtc	.+6      	; 0xe246 <__addsf3+0x1e>
    e240:	cb c0       	rjmp	.+406    	; 0xe3d8 <__fp_nan>
    e242:	0e f4       	brtc	.+2      	; 0xe246 <__addsf3+0x1e>
    e244:	e0 95       	com	r30
    e246:	e7 fb       	bst	r30, 7
    e248:	c1 c0       	rjmp	.+386    	; 0xe3cc <__fp_inf>

0000e24a <__addsf3x>:
    e24a:	e9 2f       	mov	r30, r25
    e24c:	e7 d0       	rcall	.+462    	; 0xe41c <__fp_split3>
    e24e:	80 f3       	brcs	.-32     	; 0xe230 <__addsf3+0x8>
    e250:	ba 17       	cp	r27, r26
    e252:	62 07       	cpc	r22, r18
    e254:	73 07       	cpc	r23, r19
    e256:	84 07       	cpc	r24, r20
    e258:	95 07       	cpc	r25, r21
    e25a:	18 f0       	brcs	.+6      	; 0xe262 <__addsf3x+0x18>
    e25c:	71 f4       	brne	.+28     	; 0xe27a <__addsf3x+0x30>
    e25e:	9e f5       	brtc	.+102    	; 0xe2c6 <__addsf3x+0x7c>
    e260:	ff c0       	rjmp	.+510    	; 0xe460 <__fp_zero>
    e262:	0e f4       	brtc	.+2      	; 0xe266 <__addsf3x+0x1c>
    e264:	e0 95       	com	r30
    e266:	0b 2e       	mov	r0, r27
    e268:	ba 2f       	mov	r27, r26
    e26a:	a0 2d       	mov	r26, r0
    e26c:	0b 01       	movw	r0, r22
    e26e:	b9 01       	movw	r22, r18
    e270:	90 01       	movw	r18, r0
    e272:	0c 01       	movw	r0, r24
    e274:	ca 01       	movw	r24, r20
    e276:	a0 01       	movw	r20, r0
    e278:	11 24       	eor	r1, r1
    e27a:	ff 27       	eor	r31, r31
    e27c:	59 1b       	sub	r21, r25
    e27e:	99 f0       	breq	.+38     	; 0xe2a6 <__addsf3x+0x5c>
    e280:	59 3f       	cpi	r21, 0xF9	; 249
    e282:	50 f4       	brcc	.+20     	; 0xe298 <__addsf3x+0x4e>
    e284:	50 3e       	cpi	r21, 0xE0	; 224
    e286:	68 f1       	brcs	.+90     	; 0xe2e2 <__addsf3x+0x98>
    e288:	1a 16       	cp	r1, r26
    e28a:	f0 40       	sbci	r31, 0x00	; 0
    e28c:	a2 2f       	mov	r26, r18
    e28e:	23 2f       	mov	r18, r19
    e290:	34 2f       	mov	r19, r20
    e292:	44 27       	eor	r20, r20
    e294:	58 5f       	subi	r21, 0xF8	; 248
    e296:	f3 cf       	rjmp	.-26     	; 0xe27e <__addsf3x+0x34>
    e298:	46 95       	lsr	r20
    e29a:	37 95       	ror	r19
    e29c:	27 95       	ror	r18
    e29e:	a7 95       	ror	r26
    e2a0:	f0 40       	sbci	r31, 0x00	; 0
    e2a2:	53 95       	inc	r21
    e2a4:	c9 f7       	brne	.-14     	; 0xe298 <__addsf3x+0x4e>
    e2a6:	7e f4       	brtc	.+30     	; 0xe2c6 <__addsf3x+0x7c>
    e2a8:	1f 16       	cp	r1, r31
    e2aa:	ba 0b       	sbc	r27, r26
    e2ac:	62 0b       	sbc	r22, r18
    e2ae:	73 0b       	sbc	r23, r19
    e2b0:	84 0b       	sbc	r24, r20
    e2b2:	ba f0       	brmi	.+46     	; 0xe2e2 <__addsf3x+0x98>
    e2b4:	91 50       	subi	r25, 0x01	; 1
    e2b6:	a1 f0       	breq	.+40     	; 0xe2e0 <__addsf3x+0x96>
    e2b8:	ff 0f       	add	r31, r31
    e2ba:	bb 1f       	adc	r27, r27
    e2bc:	66 1f       	adc	r22, r22
    e2be:	77 1f       	adc	r23, r23
    e2c0:	88 1f       	adc	r24, r24
    e2c2:	c2 f7       	brpl	.-16     	; 0xe2b4 <__addsf3x+0x6a>
    e2c4:	0e c0       	rjmp	.+28     	; 0xe2e2 <__addsf3x+0x98>
    e2c6:	ba 0f       	add	r27, r26
    e2c8:	62 1f       	adc	r22, r18
    e2ca:	73 1f       	adc	r23, r19
    e2cc:	84 1f       	adc	r24, r20
    e2ce:	48 f4       	brcc	.+18     	; 0xe2e2 <__addsf3x+0x98>
    e2d0:	87 95       	ror	r24
    e2d2:	77 95       	ror	r23
    e2d4:	67 95       	ror	r22
    e2d6:	b7 95       	ror	r27
    e2d8:	f7 95       	ror	r31
    e2da:	9e 3f       	cpi	r25, 0xFE	; 254
    e2dc:	08 f0       	brcs	.+2      	; 0xe2e0 <__addsf3x+0x96>
    e2de:	b3 cf       	rjmp	.-154    	; 0xe246 <__addsf3+0x1e>
    e2e0:	93 95       	inc	r25
    e2e2:	88 0f       	add	r24, r24
    e2e4:	08 f0       	brcs	.+2      	; 0xe2e8 <__addsf3x+0x9e>
    e2e6:	99 27       	eor	r25, r25
    e2e8:	ee 0f       	add	r30, r30
    e2ea:	97 95       	ror	r25
    e2ec:	87 95       	ror	r24
    e2ee:	08 95       	ret

0000e2f0 <__fixsfsi>:
    e2f0:	04 d0       	rcall	.+8      	; 0xe2fa <__fixunssfsi>
    e2f2:	68 94       	set
    e2f4:	b1 11       	cpse	r27, r1
    e2f6:	b5 c0       	rjmp	.+362    	; 0xe462 <__fp_szero>
    e2f8:	08 95       	ret

0000e2fa <__fixunssfsi>:
    e2fa:	98 d0       	rcall	.+304    	; 0xe42c <__fp_splitA>
    e2fc:	88 f0       	brcs	.+34     	; 0xe320 <__fixunssfsi+0x26>
    e2fe:	9f 57       	subi	r25, 0x7F	; 127
    e300:	90 f0       	brcs	.+36     	; 0xe326 <__fixunssfsi+0x2c>
    e302:	b9 2f       	mov	r27, r25
    e304:	99 27       	eor	r25, r25
    e306:	b7 51       	subi	r27, 0x17	; 23
    e308:	a0 f0       	brcs	.+40     	; 0xe332 <__fixunssfsi+0x38>
    e30a:	d1 f0       	breq	.+52     	; 0xe340 <__fixunssfsi+0x46>
    e30c:	66 0f       	add	r22, r22
    e30e:	77 1f       	adc	r23, r23
    e310:	88 1f       	adc	r24, r24
    e312:	99 1f       	adc	r25, r25
    e314:	1a f0       	brmi	.+6      	; 0xe31c <__fixunssfsi+0x22>
    e316:	ba 95       	dec	r27
    e318:	c9 f7       	brne	.-14     	; 0xe30c <__fixunssfsi+0x12>
    e31a:	12 c0       	rjmp	.+36     	; 0xe340 <__fixunssfsi+0x46>
    e31c:	b1 30       	cpi	r27, 0x01	; 1
    e31e:	81 f0       	breq	.+32     	; 0xe340 <__fixunssfsi+0x46>
    e320:	9f d0       	rcall	.+318    	; 0xe460 <__fp_zero>
    e322:	b1 e0       	ldi	r27, 0x01	; 1
    e324:	08 95       	ret
    e326:	9c c0       	rjmp	.+312    	; 0xe460 <__fp_zero>
    e328:	67 2f       	mov	r22, r23
    e32a:	78 2f       	mov	r23, r24
    e32c:	88 27       	eor	r24, r24
    e32e:	b8 5f       	subi	r27, 0xF8	; 248
    e330:	39 f0       	breq	.+14     	; 0xe340 <__fixunssfsi+0x46>
    e332:	b9 3f       	cpi	r27, 0xF9	; 249
    e334:	cc f3       	brlt	.-14     	; 0xe328 <__fixunssfsi+0x2e>
    e336:	86 95       	lsr	r24
    e338:	77 95       	ror	r23
    e33a:	67 95       	ror	r22
    e33c:	b3 95       	inc	r27
    e33e:	d9 f7       	brne	.-10     	; 0xe336 <__fixunssfsi+0x3c>
    e340:	3e f4       	brtc	.+14     	; 0xe350 <__fixunssfsi+0x56>
    e342:	90 95       	com	r25
    e344:	80 95       	com	r24
    e346:	70 95       	com	r23
    e348:	61 95       	neg	r22
    e34a:	7f 4f       	sbci	r23, 0xFF	; 255
    e34c:	8f 4f       	sbci	r24, 0xFF	; 255
    e34e:	9f 4f       	sbci	r25, 0xFF	; 255
    e350:	08 95       	ret

0000e352 <__floatunsisf>:
    e352:	e8 94       	clt
    e354:	09 c0       	rjmp	.+18     	; 0xe368 <__floatsisf+0x12>

0000e356 <__floatsisf>:
    e356:	97 fb       	bst	r25, 7
    e358:	3e f4       	brtc	.+14     	; 0xe368 <__floatsisf+0x12>
    e35a:	90 95       	com	r25
    e35c:	80 95       	com	r24
    e35e:	70 95       	com	r23
    e360:	61 95       	neg	r22
    e362:	7f 4f       	sbci	r23, 0xFF	; 255
    e364:	8f 4f       	sbci	r24, 0xFF	; 255
    e366:	9f 4f       	sbci	r25, 0xFF	; 255
    e368:	99 23       	and	r25, r25
    e36a:	a9 f0       	breq	.+42     	; 0xe396 <__floatsisf+0x40>
    e36c:	f9 2f       	mov	r31, r25
    e36e:	96 e9       	ldi	r25, 0x96	; 150
    e370:	bb 27       	eor	r27, r27
    e372:	93 95       	inc	r25
    e374:	f6 95       	lsr	r31
    e376:	87 95       	ror	r24
    e378:	77 95       	ror	r23
    e37a:	67 95       	ror	r22
    e37c:	b7 95       	ror	r27
    e37e:	f1 11       	cpse	r31, r1
    e380:	f8 cf       	rjmp	.-16     	; 0xe372 <__floatsisf+0x1c>
    e382:	fa f4       	brpl	.+62     	; 0xe3c2 <__floatsisf+0x6c>
    e384:	bb 0f       	add	r27, r27
    e386:	11 f4       	brne	.+4      	; 0xe38c <__floatsisf+0x36>
    e388:	60 ff       	sbrs	r22, 0
    e38a:	1b c0       	rjmp	.+54     	; 0xe3c2 <__floatsisf+0x6c>
    e38c:	6f 5f       	subi	r22, 0xFF	; 255
    e38e:	7f 4f       	sbci	r23, 0xFF	; 255
    e390:	8f 4f       	sbci	r24, 0xFF	; 255
    e392:	9f 4f       	sbci	r25, 0xFF	; 255
    e394:	16 c0       	rjmp	.+44     	; 0xe3c2 <__floatsisf+0x6c>
    e396:	88 23       	and	r24, r24
    e398:	11 f0       	breq	.+4      	; 0xe39e <__floatsisf+0x48>
    e39a:	96 e9       	ldi	r25, 0x96	; 150
    e39c:	11 c0       	rjmp	.+34     	; 0xe3c0 <__floatsisf+0x6a>
    e39e:	77 23       	and	r23, r23
    e3a0:	21 f0       	breq	.+8      	; 0xe3aa <__floatsisf+0x54>
    e3a2:	9e e8       	ldi	r25, 0x8E	; 142
    e3a4:	87 2f       	mov	r24, r23
    e3a6:	76 2f       	mov	r23, r22
    e3a8:	05 c0       	rjmp	.+10     	; 0xe3b4 <__floatsisf+0x5e>
    e3aa:	66 23       	and	r22, r22
    e3ac:	71 f0       	breq	.+28     	; 0xe3ca <__floatsisf+0x74>
    e3ae:	96 e8       	ldi	r25, 0x86	; 134
    e3b0:	86 2f       	mov	r24, r22
    e3b2:	70 e0       	ldi	r23, 0x00	; 0
    e3b4:	60 e0       	ldi	r22, 0x00	; 0
    e3b6:	2a f0       	brmi	.+10     	; 0xe3c2 <__floatsisf+0x6c>
    e3b8:	9a 95       	dec	r25
    e3ba:	66 0f       	add	r22, r22
    e3bc:	77 1f       	adc	r23, r23
    e3be:	88 1f       	adc	r24, r24
    e3c0:	da f7       	brpl	.-10     	; 0xe3b8 <__floatsisf+0x62>
    e3c2:	88 0f       	add	r24, r24
    e3c4:	96 95       	lsr	r25
    e3c6:	87 95       	ror	r24
    e3c8:	97 f9       	bld	r25, 7
    e3ca:	08 95       	ret

0000e3cc <__fp_inf>:
    e3cc:	97 f9       	bld	r25, 7
    e3ce:	9f 67       	ori	r25, 0x7F	; 127
    e3d0:	80 e8       	ldi	r24, 0x80	; 128
    e3d2:	70 e0       	ldi	r23, 0x00	; 0
    e3d4:	60 e0       	ldi	r22, 0x00	; 0
    e3d6:	08 95       	ret

0000e3d8 <__fp_nan>:
    e3d8:	9f ef       	ldi	r25, 0xFF	; 255
    e3da:	80 ec       	ldi	r24, 0xC0	; 192
    e3dc:	08 95       	ret

0000e3de <__fp_pscA>:
    e3de:	00 24       	eor	r0, r0
    e3e0:	0a 94       	dec	r0
    e3e2:	16 16       	cp	r1, r22
    e3e4:	17 06       	cpc	r1, r23
    e3e6:	18 06       	cpc	r1, r24
    e3e8:	09 06       	cpc	r0, r25
    e3ea:	08 95       	ret

0000e3ec <__fp_pscB>:
    e3ec:	00 24       	eor	r0, r0
    e3ee:	0a 94       	dec	r0
    e3f0:	12 16       	cp	r1, r18
    e3f2:	13 06       	cpc	r1, r19
    e3f4:	14 06       	cpc	r1, r20
    e3f6:	05 06       	cpc	r0, r21
    e3f8:	08 95       	ret

0000e3fa <__fp_round>:
    e3fa:	09 2e       	mov	r0, r25
    e3fc:	03 94       	inc	r0
    e3fe:	00 0c       	add	r0, r0
    e400:	11 f4       	brne	.+4      	; 0xe406 <__fp_round+0xc>
    e402:	88 23       	and	r24, r24
    e404:	52 f0       	brmi	.+20     	; 0xe41a <__fp_round+0x20>
    e406:	bb 0f       	add	r27, r27
    e408:	40 f4       	brcc	.+16     	; 0xe41a <__fp_round+0x20>
    e40a:	bf 2b       	or	r27, r31
    e40c:	11 f4       	brne	.+4      	; 0xe412 <__fp_round+0x18>
    e40e:	60 ff       	sbrs	r22, 0
    e410:	04 c0       	rjmp	.+8      	; 0xe41a <__fp_round+0x20>
    e412:	6f 5f       	subi	r22, 0xFF	; 255
    e414:	7f 4f       	sbci	r23, 0xFF	; 255
    e416:	8f 4f       	sbci	r24, 0xFF	; 255
    e418:	9f 4f       	sbci	r25, 0xFF	; 255
    e41a:	08 95       	ret

0000e41c <__fp_split3>:
    e41c:	57 fd       	sbrc	r21, 7
    e41e:	90 58       	subi	r25, 0x80	; 128
    e420:	44 0f       	add	r20, r20
    e422:	55 1f       	adc	r21, r21
    e424:	59 f0       	breq	.+22     	; 0xe43c <__fp_splitA+0x10>
    e426:	5f 3f       	cpi	r21, 0xFF	; 255
    e428:	71 f0       	breq	.+28     	; 0xe446 <__fp_splitA+0x1a>
    e42a:	47 95       	ror	r20

0000e42c <__fp_splitA>:
    e42c:	88 0f       	add	r24, r24
    e42e:	97 fb       	bst	r25, 7
    e430:	99 1f       	adc	r25, r25
    e432:	61 f0       	breq	.+24     	; 0xe44c <__fp_splitA+0x20>
    e434:	9f 3f       	cpi	r25, 0xFF	; 255
    e436:	79 f0       	breq	.+30     	; 0xe456 <__fp_splitA+0x2a>
    e438:	87 95       	ror	r24
    e43a:	08 95       	ret
    e43c:	12 16       	cp	r1, r18
    e43e:	13 06       	cpc	r1, r19
    e440:	14 06       	cpc	r1, r20
    e442:	55 1f       	adc	r21, r21
    e444:	f2 cf       	rjmp	.-28     	; 0xe42a <__fp_split3+0xe>
    e446:	46 95       	lsr	r20
    e448:	f1 df       	rcall	.-30     	; 0xe42c <__fp_splitA>
    e44a:	08 c0       	rjmp	.+16     	; 0xe45c <__fp_splitA+0x30>
    e44c:	16 16       	cp	r1, r22
    e44e:	17 06       	cpc	r1, r23
    e450:	18 06       	cpc	r1, r24
    e452:	99 1f       	adc	r25, r25
    e454:	f1 cf       	rjmp	.-30     	; 0xe438 <__fp_splitA+0xc>
    e456:	86 95       	lsr	r24
    e458:	71 05       	cpc	r23, r1
    e45a:	61 05       	cpc	r22, r1
    e45c:	08 94       	sec
    e45e:	08 95       	ret

0000e460 <__fp_zero>:
    e460:	e8 94       	clt

0000e462 <__fp_szero>:
    e462:	bb 27       	eor	r27, r27
    e464:	66 27       	eor	r22, r22
    e466:	77 27       	eor	r23, r23
    e468:	cb 01       	movw	r24, r22
    e46a:	97 f9       	bld	r25, 7
    e46c:	08 95       	ret

0000e46e <__mulsf3>:
    e46e:	0b d0       	rcall	.+22     	; 0xe486 <__mulsf3x>
    e470:	c4 cf       	rjmp	.-120    	; 0xe3fa <__fp_round>
    e472:	b5 df       	rcall	.-150    	; 0xe3de <__fp_pscA>
    e474:	28 f0       	brcs	.+10     	; 0xe480 <__mulsf3+0x12>
    e476:	ba df       	rcall	.-140    	; 0xe3ec <__fp_pscB>
    e478:	18 f0       	brcs	.+6      	; 0xe480 <__mulsf3+0x12>
    e47a:	95 23       	and	r25, r21
    e47c:	09 f0       	breq	.+2      	; 0xe480 <__mulsf3+0x12>
    e47e:	a6 cf       	rjmp	.-180    	; 0xe3cc <__fp_inf>
    e480:	ab cf       	rjmp	.-170    	; 0xe3d8 <__fp_nan>
    e482:	11 24       	eor	r1, r1
    e484:	ee cf       	rjmp	.-36     	; 0xe462 <__fp_szero>

0000e486 <__mulsf3x>:
    e486:	ca df       	rcall	.-108    	; 0xe41c <__fp_split3>
    e488:	a0 f3       	brcs	.-24     	; 0xe472 <__mulsf3+0x4>

0000e48a <__mulsf3_pse>:
    e48a:	95 9f       	mul	r25, r21
    e48c:	d1 f3       	breq	.-12     	; 0xe482 <__mulsf3+0x14>
    e48e:	95 0f       	add	r25, r21
    e490:	50 e0       	ldi	r21, 0x00	; 0
    e492:	55 1f       	adc	r21, r21
    e494:	62 9f       	mul	r22, r18
    e496:	f0 01       	movw	r30, r0
    e498:	72 9f       	mul	r23, r18
    e49a:	bb 27       	eor	r27, r27
    e49c:	f0 0d       	add	r31, r0
    e49e:	b1 1d       	adc	r27, r1
    e4a0:	63 9f       	mul	r22, r19
    e4a2:	aa 27       	eor	r26, r26
    e4a4:	f0 0d       	add	r31, r0
    e4a6:	b1 1d       	adc	r27, r1
    e4a8:	aa 1f       	adc	r26, r26
    e4aa:	64 9f       	mul	r22, r20
    e4ac:	66 27       	eor	r22, r22
    e4ae:	b0 0d       	add	r27, r0
    e4b0:	a1 1d       	adc	r26, r1
    e4b2:	66 1f       	adc	r22, r22
    e4b4:	82 9f       	mul	r24, r18
    e4b6:	22 27       	eor	r18, r18
    e4b8:	b0 0d       	add	r27, r0
    e4ba:	a1 1d       	adc	r26, r1
    e4bc:	62 1f       	adc	r22, r18
    e4be:	73 9f       	mul	r23, r19
    e4c0:	b0 0d       	add	r27, r0
    e4c2:	a1 1d       	adc	r26, r1
    e4c4:	62 1f       	adc	r22, r18
    e4c6:	83 9f       	mul	r24, r19
    e4c8:	a0 0d       	add	r26, r0
    e4ca:	61 1d       	adc	r22, r1
    e4cc:	22 1f       	adc	r18, r18
    e4ce:	74 9f       	mul	r23, r20
    e4d0:	33 27       	eor	r19, r19
    e4d2:	a0 0d       	add	r26, r0
    e4d4:	61 1d       	adc	r22, r1
    e4d6:	23 1f       	adc	r18, r19
    e4d8:	84 9f       	mul	r24, r20
    e4da:	60 0d       	add	r22, r0
    e4dc:	21 1d       	adc	r18, r1
    e4de:	82 2f       	mov	r24, r18
    e4e0:	76 2f       	mov	r23, r22
    e4e2:	6a 2f       	mov	r22, r26
    e4e4:	11 24       	eor	r1, r1
    e4e6:	9f 57       	subi	r25, 0x7F	; 127
    e4e8:	50 40       	sbci	r21, 0x00	; 0
    e4ea:	8a f0       	brmi	.+34     	; 0xe50e <__mulsf3_pse+0x84>
    e4ec:	e1 f0       	breq	.+56     	; 0xe526 <__mulsf3_pse+0x9c>
    e4ee:	88 23       	and	r24, r24
    e4f0:	4a f0       	brmi	.+18     	; 0xe504 <__mulsf3_pse+0x7a>
    e4f2:	ee 0f       	add	r30, r30
    e4f4:	ff 1f       	adc	r31, r31
    e4f6:	bb 1f       	adc	r27, r27
    e4f8:	66 1f       	adc	r22, r22
    e4fa:	77 1f       	adc	r23, r23
    e4fc:	88 1f       	adc	r24, r24
    e4fe:	91 50       	subi	r25, 0x01	; 1
    e500:	50 40       	sbci	r21, 0x00	; 0
    e502:	a9 f7       	brne	.-22     	; 0xe4ee <__mulsf3_pse+0x64>
    e504:	9e 3f       	cpi	r25, 0xFE	; 254
    e506:	51 05       	cpc	r21, r1
    e508:	70 f0       	brcs	.+28     	; 0xe526 <__mulsf3_pse+0x9c>
    e50a:	60 cf       	rjmp	.-320    	; 0xe3cc <__fp_inf>
    e50c:	aa cf       	rjmp	.-172    	; 0xe462 <__fp_szero>
    e50e:	5f 3f       	cpi	r21, 0xFF	; 255
    e510:	ec f3       	brlt	.-6      	; 0xe50c <__mulsf3_pse+0x82>
    e512:	98 3e       	cpi	r25, 0xE8	; 232
    e514:	dc f3       	brlt	.-10     	; 0xe50c <__mulsf3_pse+0x82>
    e516:	86 95       	lsr	r24
    e518:	77 95       	ror	r23
    e51a:	67 95       	ror	r22
    e51c:	b7 95       	ror	r27
    e51e:	f7 95       	ror	r31
    e520:	e7 95       	ror	r30
    e522:	9f 5f       	subi	r25, 0xFF	; 255
    e524:	c1 f7       	brne	.-16     	; 0xe516 <__mulsf3_pse+0x8c>
    e526:	fe 2b       	or	r31, r30
    e528:	88 0f       	add	r24, r24
    e52a:	91 1d       	adc	r25, r1
    e52c:	96 95       	lsr	r25
    e52e:	87 95       	ror	r24
    e530:	97 f9       	bld	r25, 7
    e532:	08 95       	ret

0000e534 <strnlen_P>:
    e534:	fc 01       	movw	r30, r24
    e536:	05 90       	lpm	r0, Z+
    e538:	61 50       	subi	r22, 0x01	; 1
    e53a:	70 40       	sbci	r23, 0x00	; 0
    e53c:	01 10       	cpse	r0, r1
    e53e:	d8 f7       	brcc	.-10     	; 0xe536 <strnlen_P+0x2>
    e540:	80 95       	com	r24
    e542:	90 95       	com	r25
    e544:	8e 0f       	add	r24, r30
    e546:	9f 1f       	adc	r25, r31
    e548:	08 95       	ret

0000e54a <_exit>:
    e54a:	f8 94       	cli

0000e54c <__stop_program>:
    e54c:	ff cf       	rjmp	.-2      	; 0xe54c <__stop_program>
