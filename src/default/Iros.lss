
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000e716  0000e816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000e900  2**8
                  CONTENTS, READONLY
  2 .text         0000e716  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4e  00800510  00800510  0000e826  2**1
                  ALLOC
  4 .comment      00000011  00000000  00000000  0000ed00  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  0000ed18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b1cf  00000000  00000000  0000f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ed  00000000  00000000  0001a777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c63  00000000  00000000  0001be64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017e8  00000000  00000000  0001eac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020d9  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000950f  00000000  00000000  00022389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  0002b898  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 38 	jmp	0x714c	; 0x714c <__ctors_end>
       4:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
       8:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
       c:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      10:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      14:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      18:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      1c:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      20:	0c 94 88 3e 	jmp	0x7d10	; 0x7d10 <__vector_8>
      24:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      28:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      2c:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      30:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      34:	0c 94 5a 3c 	jmp	0x78b4	; 0x78b4 <__vector_13>
      38:	0c 94 99 3c 	jmp	0x7932	; 0x7932 <__vector_14>
      3c:	0c 94 c5 39 	jmp	0x738a	; 0x738a <__vector_15>
      40:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      44:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      48:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      4c:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      50:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      54:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      58:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      5c:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      60:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      64:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      68:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      6c:	0c 94 0f 39 	jmp	0x721e	; 0x721e <__bad_interrupt>
      70:	73 61       	ori	r23, 0x13	; 19
      72:	7f 61       	ori	r23, 0x1F	; 31
      74:	8b 61       	ori	r24, 0x1B	; 27
      76:	77 61       	ori	r23, 0x17	; 23
      78:	7b 61       	ori	r23, 0x1B	; 27
      7a:	83 61       	ori	r24, 0x13	; 19
      7c:	77 61       	ori	r23, 0x17	; 23
      7e:	77 61       	ori	r23, 0x17	; 23
      80:	87 61       	ori	r24, 0x17	; 23
      82:	58 65       	ori	r21, 0x58	; 88
      84:	64 65       	ori	r22, 0x54	; 84
      86:	5b 65       	ori	r21, 0x5B	; 91
      88:	64 65       	ori	r22, 0x54	; 84
      8a:	5e 65       	ori	r21, 0x5E	; 94
      8c:	64 65       	ori	r22, 0x54	; 84
      8e:	61 65       	ori	r22, 0x51	; 81
      90:	64 65       	ori	r22, 0x54	; 84
      92:	67 65       	ori	r22, 0x57	; 87
      94:	6a 65       	ori	r22, 0x5A	; 90

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	5d ff       	.word	0xff5d	; ????
      9c:	5e 10       	cpse	r5, r14
      9e:	27 ff       	sbrs	r18, 7
      a0:	2a d2       	rcall	.+1108   	; 0x4f6 <spacesong+0xc3>
      a2:	2b 7d       	andi	r18, 0xDB	; 219
      a4:	21 0c       	add	r2, r1
      a6:	22 fb       	bst	r18, 2
      a8:	85 00       	.word	0x0085	; ????
      aa:	84 00       	.word	0x0084	; ????
      ac:	89 03       	fmulsu	r16, r17
      ae:	88 8d       	ldd	r24, Y+24	; 0x18
      b0:	81 09       	sbc	r24, r1
      b2:	6f 02       	muls	r22, r31
      b4:	44 42       	sbci	r20, 0x24	; 36
      b6:	47 00       	.word	0x0047	; ????
      b8:	45 01       	movw	r8, r10
      ba:	b0 83       	st	Z, r27
      bc:	b3 00       	.word	0x00b3	; ????
      be:	b1 01       	movw	r22, r2
      c0:	24 b9       	out	0x04, r18	; 4
      c2:	25 57       	subi	r18, 0x75	; 117
      c4:	8a 1d       	adc	r24, r10
      c6:	8b 03       	fmulsu	r16, r19

000000c8 <eeprom_format_table>:
      c8:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e8 <patchCommands>:
      e8:	26 40 29 40 85 40 89 40 90 40 31 40 36 40 3b 40     &@)@.@.@.@1@6@;@
      f8:	98 40 3e 40 41 40 44 40 7f 40 82 40 a8 40           .@>@A@D@.@.@.@

00000106 <fader>:
     106:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

00000112 <strChallenge>:
     112:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     122:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     132:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     142:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     152:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     162:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     172:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     182:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     192:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     1a2:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     1b2:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

000001c2 <strCongrats>:
     1c2:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     1d2:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     1e2:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     1f2:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     202:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     212:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     222:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     232:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     242:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     252:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     262:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     272:	4f 4e 45 00 23 00                                   ONE.#.

00000278 <strIntro>:
     278:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     288:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     298:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     2a8:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     2b8:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     2c8:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     2d8:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     2e8:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     2f8:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

00000301 <default_scores>:
     301:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     311:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

0000031f <strCredits>:
     31f:	49 52 4f 53 20 56 32 2e 30 20 46 4f 52 20 55 5a     IROS V2.0 FOR UZ
     32f:	45 42 4f 58 00 00 00 50 52 4f 47 52 41 4d 4d 49     EBOX...PROGRAMMI
     33f:	4e 47 20 41 4e 44 20 44 45 53 49 47 4e 00 00 4c     NG AND DESIGN..L
     34f:	41 57 52 45 4e 43 45 20 42 52 4f 4f 4b 53 00 00     AWRENCE BROOKS..
     35f:	00 4d 55 53 49 43 20 44 45 52 49 56 45 44 20 46     .MUSIC DERIVED F
     36f:	52 4f 4d 00 00 43 59 41 52 4f 4e 53 20 47 41 54     ROM..CYARONS GAT
     37f:	45 20 42 59 00 00 54 41 4e 4e 45 52 20 48 45 4c     E BY..TANNER HEL
     38f:	4c 41 4e 44 00 00 4c 49 43 45 4e 43 45 44 20 55     LAND..LICENCED U
     39f:	4e 44 45 52 20 43 43 20 56 33 2e 30 00 23 00        NDER CC V3.0.#.

000003ae <strTally>:
     3ae:	54 41 4c 4c 59 20 00                                TALLY .

000003b5 <strGameOver>:
     3b5:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000003bf <strLevelBonus>:
     3bf:	42 4f 4e 55 53 00                                   BONUS.

000003c5 <strLevelClear>:
     3c5:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

000003d1 <strPaused>:
     3d1:	50 41 55 53 45 00                                   PAUSE.

000003d7 <strExitGame>:
     3d7:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

000003e3 <strMainMenu>:
     3e3:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

000003ef <strTime>:
     3ef:	54 49 4d 45 20 00                                   TIME .

000003f5 <strLives>:
     3f5:	4c 49 56 45 53 20 00                                LIVES .

000003fc <strShield>:
     3fc:	53 48 49 45 4c 44 20 00                             SHIELD .

00000404 <strScore>:
     404:	53 43 4f 52 45 20 00                                SCORE .

0000040b <strSelectHandle>:
	...

0000040c <strHighScores>:
     40c:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000418 <str1Player>:
     418:	53 54 41 52 54 00                                   START.

0000041e <strCopyright>:
     41e:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     42e:	4f 4f 4b 53 00                                      OOKS.

00000433 <spacesong>:
     433:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     443:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     453:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     463:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     473:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     483:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     493:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     4a3:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     4b3:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     4c3:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     4d3:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     4e3:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     4f3:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     503:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     513:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     523:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     533:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     543:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     553:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     563:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     573:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     583:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     593:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     5a3:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     5b3:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     5c3:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     5d3:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     5e3:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     5f3:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     603:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     613:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     623:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     633:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     643:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     653:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     663:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     673:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     683:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     693:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     6a3:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     6b3:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     6c3:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     6d3:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     6e3:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     6f3:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     703:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     713:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     723:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     733:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     743:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     753:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     763:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     773:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     783:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     793:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     7a3:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     7b3:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     7c3:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     7d3:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     7e3:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     7f3:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     803:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     813:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     823:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     833:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     843:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
     853:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
     863:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
     873:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
     883:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
     893:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
     8a3:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
     8b3:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
     8c3:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
     8d3:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
     8e3:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
     8f3:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
     903:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
     913:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
     923:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
     933:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
     943:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
     953:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
     963:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
     973:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
     983:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
     993:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
     9a3:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
     9b3:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
     9c3:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
     9d3:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
     9e3:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
     9f3:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
     a03:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
     a13:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
     a23:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
     a33:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
     a43:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
     a53:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
     a63:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
     a73:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
     a83:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
     a93:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
     aa3:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
     ab3:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
     ac3:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00000ad3 <planetsong>:
     ad3:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
     ae3:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
     af3:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
     b03:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     b13:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
     b23:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
     b33:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     b43:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
     b53:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
     b63:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
     b73:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
     b83:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     b93:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
     ba3:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
     bb3:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
     bc3:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
     bd3:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
     be3:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     bf3:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     c03:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     c13:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     c23:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     c33:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
     c43:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
     c53:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
     c63:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
     c73:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
     c83:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
     c93:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
     ca3:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
     cb3:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
     cc3:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
     cd3:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
     ce3:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     cf3:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
     d03:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
     d13:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
     d23:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
     d33:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
     d43:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
     d53:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
     d63:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
     d73:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
     d83:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
     d93:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
     da3:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
     db3:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
     dc3:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
     dd3:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
     de3:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
     df3:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
     e03:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
     e13:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
     e23:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
     e33:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
     e43:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
     e53:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
     e63:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
     e73:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
     e83:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
     e93:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
     ea3:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
     eb3:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
     ec3:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
     ed3:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
     ee3:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
     ef3:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
     f03:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
     f13:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
     f23:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
     f33:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
     f43:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
     f53:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
     f63:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
     f73:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
     f83:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
     f93:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
     fa3:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
     fb3:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
     fc3:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
     fd3:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
     fe3:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
     ff3:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1003:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    1013:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1023:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1033:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1043:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1053:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1063:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1073:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1083:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1093:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    10a3:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    10b3:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    10c3:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    10d3:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    10e3:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    10f3:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    1103:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    1113:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1123:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1133:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1143:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1153:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1163:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1173:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1183:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1193:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    11a3:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    11b3:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    11c3:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    11d3:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    11e3:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    11f3:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    1203:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    1213:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1223:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    1233:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    1243:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1253:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1263:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1273:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1283:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1293:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    12a3:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    12b3:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    12c3:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    12d3:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    12e3:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    12f3:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1303:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1313:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1323:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1333:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1343:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1353:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1363:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1373:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1383:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1393:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    13a3:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    13b3:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    13c3:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    13d3:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    13e3:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    13f3:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1403:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1413:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1423:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1433:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1443:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1453:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1463:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1473:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1483:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1493:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    14a3:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    14b3:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    14c3:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    14d3:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    14e3:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    14f3:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1503:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1513:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1523:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1533:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1543:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1553:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1563:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1573:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1583:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1593:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    15a3:	2f 00                                               /.

000015a5 <my_patches>:
    15a5:	00 00 00 1c 17 00 00 00 00 00 00 00 1c 17 00 00     ................
    15b5:	00 00 00 00 00 0b 17 00 00 00 00 00 00 00 b5 16     ................
    15c5:	00 00 00 00 00 00 00 0b 17 00 00 00 00 00 00 00     ................
    15d5:	e4 15 00 00 00 00 00 00 00 e4 15 00 00 00 00        ...............

000015e4 <explode>:
    15e4:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    15f4:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1604:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1614:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1624:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1634:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1644:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1654:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1664:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1674:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1684:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1694:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    16a4:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    16b4:	ff                                                  .

000016b5 <pshoot>:
    16b5:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    16c5:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    16d5:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    16e5:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    16f5:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1705:	00 01 05 00 00 ff                                   ......

0000170b <navigate>:
    170b:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    171b:	ff                                                  .

0000171c <instrument>:
    171c:	00 02 04 00 00 dd 00 ff                             ........

00001724 <sprites_data>:
    1724:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1734:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1744:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1754:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1764:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1774:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1784:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1794:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    17a4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    17b4:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    17c4:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    17d4:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    17e4:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    17f4:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1804:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1814:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1824:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1834:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1844:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    1854:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1864:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    1874:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    1884:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    1894:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    18a4:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    18b4:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    18c4:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    18d4:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    18e4:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    18f4:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    1904:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    1914:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1924:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    1934:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    1944:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    1954:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    1964:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    1974:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    1984:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    1994:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19a4:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    19b4:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    19c4:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    19d4:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    19e4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    19f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a14:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1a24:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    1a34:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1a44:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    1a54:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    1a64:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1a74:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1a84:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1a94:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    1aa4:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1ab4:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1ac4:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    1ad4:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    1ae4:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    1af4:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    1b04:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    1b14:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    1b24:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1b34:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1b44:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1b54:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1b64:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    1b74:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    1b84:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    1b94:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1ba4:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    1bb4:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    1bc4:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    1bd4:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    1be4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1bf4:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    1c04:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    1c14:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c24:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    1c34:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    1c44:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    1c54:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    1c64:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c74:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    1c84:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    1c94:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ca4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cb4:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    1cc4:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    1cd4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ce4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cf4:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    1d04:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    1d14:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d24:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d34:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    1d44:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    1d54:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d64:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    1d74:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    1d84:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    1d94:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    1da4:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    1db4:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1dc4:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    1dd4:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    1de4:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1df4:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    1e04:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    1e14:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1e24:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    1e34:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1e44:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    1e54:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1e64:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1e74:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    1e84:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    1e94:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1ea4:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    1eb4:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    1ec4:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    1ed4:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    1ee4:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    1ef4:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    1f04:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    1f14:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    1f24:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    1f34:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1f44:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    1f54:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    1f64:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    1f74:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    1f84:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    1f94:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    1fa4:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    1fb4:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    1fc4:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    1fd4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe4:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    1ff4:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    2004:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    2014:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    2024:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    2034:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    2044:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2054:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2064:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2074:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2084:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2094:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    20a4:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    20b4:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    20c4:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    20d4:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    20e4:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    20f4:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    2104:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    2114:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2124:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    2134:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    2144:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2154:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2164:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2174:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2184:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2194:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    21a4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    21b4:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    21c4:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    21d4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21e4:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    21f4:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    2204:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    2214:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    2224:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    2234:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    2244:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2254:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2264:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2274:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2284:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2294:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    22a4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22b4:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    22c4:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    22d4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22e4:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    22f4:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2304:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2314:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2324:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2334:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2344:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2354:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2364:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2374:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2384:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2394:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    23a4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23c4:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    23d4:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    23e4:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    23f4:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2404:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2414:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2424:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2434:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2444:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2454:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2464:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2474:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2484:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2494:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    24a4:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    24b4:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    24c4:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    24d4:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    24e4:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    24f4:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2504:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2514:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2524:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2534:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2544:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2554:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2564:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2574:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2584:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2594:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    25a4:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    25b4:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    25c4:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    25d4:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    25e4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    25f4:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2604:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2614:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2624:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2634:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2644:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2654:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2664:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2674:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2684:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2694:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    26a4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26b4:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    26c4:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    26d4:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    26e4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    26f4:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2704:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2714:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2724:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2734:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2744:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2754:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2764:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2774:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2784:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2794:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    27a4:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    27b4:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    27c4:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    27d4:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    27e4:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    27f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2804:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2814:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2824:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2834:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2844:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2854:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2864:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    2874:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    2884:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    2894:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28a4:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    28b4:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    28c4:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    28d4:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    28e4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28f4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2904:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    2914:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    2924:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    2934:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    2944:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    2954:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    2964:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    2974:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    2984:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    2994:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    29a4:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    29b4:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    29c4:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    29d4:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    29e4:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    29f4:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2a04:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2a14:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2a24:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    2a34:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    2a44:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    2a54:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    2a64:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    2a74:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    2a84:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    2a94:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    2aa4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2ab4:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    2ac4:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2ad4:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    2ae4:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2af4:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    2b04:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    2b14:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    2b24:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    2b34:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2b44:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    2b54:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    2b64:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2b74:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2b84:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2b94:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    2ba4:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2bb4:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2bc4:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    2bd4:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    2be4:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    2bf4:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    2c04:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    2c14:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    2c24:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2c34:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2c44:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2c54:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2c64:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    2c74:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    2c84:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    2c94:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2ca4:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    2cb4:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    2cc4:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    2cd4:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    2ce4:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    2cf4:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    2d04:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    2d14:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    2d24:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    2d34:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2d44:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    2d54:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2d64:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2d74:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    2d84:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    2d94:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2da4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2db4:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    2dc4:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    2dd4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2de4:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2df4:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    2e04:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    2e14:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e24:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    2e34:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    2e44:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    2e54:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    2e64:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    2e74:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    2e84:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    2e94:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    2ea4:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    2eb4:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2ec4:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    2ed4:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    2ee4:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    2ef4:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    2f04:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    2f14:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    2f24:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    2f34:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    2f44:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    2f54:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f64:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f74:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f84:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    2f94:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2fa4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    2fb4:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    2fc4:	fe fe 02 02 00 00 00 00 02 02 02 02 02 00 00 05     ................
    2fd4:	00 00 00 00 05 02 00 00 00 00 00 00 05 05 00 00     ................
    2fe4:	00 00 00 00 fe fe fe fe 00 07 07 27 07 fe fe fe     ...........'....
    2ff4:	00 00 07 77 27 fe fe fe 00 00 00 27 07 fe fe fe     ...w'......'....
    3004:	02 02 00 00 07 fe fe fe 05 05 05 05 05 00 02 fe     ................
    3014:	05 05 05 05 05 05 00 05 00 05 05 05 05 00 00 00     ................

00003024 <map_hazard_desert>:
    3024:	01 01 28                                            ..(

00003027 <map_hazard_city>:
    3027:	01 01 29                                            ..)

0000302a <map_hazard_jungle>:
    302a:	01 01 27                                            ..'

0000302d <map_hazard_fire>:
    302d:	01 01 26                                            ..&

00003030 <map_hazard_ice>:
    3030:	01 01 25                                            ..%

00003033 <map_enemy_boss_shot>:
    3033:	01 01 39                                            ..9

00003036 <map_enemy_boss_eye>:
    3036:	01 01 37                                            ..7

00003039 <map_enemy_boss_turret>:
    3039:	01 01 36                                            ..6

0000303c <map_enemy_drone>:
    303c:	01 01 35                                            ..5

0000303f <map_enemy_tank>:
    303f:	01 01 24                                            ..$

00003042 <map_enemy_ball>:
    3042:	01 01 14                                            ...

00003045 <map_enemy_spider_1>:
    3045:	01 01 34                                            ..4

00003048 <map_enemy_spider_0>:
    3048:	01 01 23                                            ..#

0000304b <map_enemy_xwing>:
    304b:	01 01 3a                                            ..:

0000304e <map_enemy_shark>:
    304e:	01 01 05                                            ...

00003051 <map_enemy_shot>:
    3051:	01 01 13                                            ...

00003054 <map_ahero_jump>:
    3054:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

0000305c <map_ahero_prone>:
    305c:	03 01 61 62 63                                      ..abc

00003061 <map_ahero_step_3>:
    3061:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

00003069 <map_ahero_step_2>:
    3069:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

00003071 <map_ahero_step_1>:
    3071:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

00003079 <map_ahero_step_0>:
    3079:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

00003081 <map_ahero_idle>:
    3081:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

00003089 <map_hero_rplasma_shot>:
    3089:	01 01 38                                            ..8

0000308c <map_hero_space_bomb>:
    308c:	01 01 18                                            ...

0000308f <map_hero_space_shot>:
    308f:	01 01 17                                            ...

00003092 <map_hero_ice_shot>:
    3092:	01 01 16                                            ...

00003095 <map_hero_ball_shot>:
    3095:	01 01 15                                            ...

00003098 <map_hero_gplasma_shot>:
    3098:	01 01 04                                            ...

0000309b <map_hero_ship_large_1>:
    309b:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

000030a5 <map_hero_ship_large_0>:
    30a5:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

000030af <map_hero_ship_1>:
    30af:	03 01 3b 2b 2c                                      ..;+,

000030b4 <map_hero_ship_0>:
    30b4:	03 01 2a 2b 2c                                      ..*+,

000030b9 <map_hero_prone>:
    30b9:	03 01 47 48 49                                      ..GHI

000030be <map_hero_jump>:
    30be:	02 03 02 03 0f 12 21 22                             ......!"

000030c6 <map_hero_step_3>:
    30c6:	02 03 02 03 0f 44 45 46                             .....DEF

000030ce <map_hero_step_2>:
    30ce:	02 03 00 01 0c 11 1f 20                             ....... 

000030d6 <map_hero_step_1>:
    30d6:	02 03 02 03 0f 10 1d 1e                             ........

000030de <map_hero_step_0>:
    30de:	02 03 00 01 0c 0e 1b 1c                             ........

000030e6 <map_hero_idle>:
    30e6:	02 03 00 01 0c 0d 19 1a                             ........

000030ee <map_emerald_4>:
    30ee:	01 01 0a                                            ...

000030f1 <map_emerald_3>:
    30f1:	01 01 09                                            ...

000030f4 <map_emerald_2>:
    30f4:	01 01 08                                            ...

000030f7 <map_emerald_1>:
    30f7:	01 01 07                                            ...

000030fa <map_emerald_0>:
    30fa:	01 01 06                                            ...

000030fd <map_explosion_2>:
    30fd:	01 01 2f                                            ../

00003100 <map_explosion_1>:
    3100:	01 01 2e                                            ...

00003103 <map_explosion_0>:
    3103:	01 01 2d                                            ..-

00003106 <map_particle>:
    3106:	01 01 30                                            ..0

00003109 <map_up_arrow>:
    3109:	01 01 33                                            ..3

0000310c <map_down_arrow>:
    310c:	01 01 32                                            ..2

0000310f <map_right_arrow>:
    310f:	01 01 31                                            ..1

00003112 <map_none>:
    3112:	01 01 14                                            ...

00003115 <tiles_data>:
	...
    3155:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3165:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3175:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    3185:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    3195:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31a5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    31b5:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    31c5:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    31d5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31e5:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    31f5:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3205:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3215:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3225:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3235:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3245:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3255:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3265:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    3275:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    3285:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3295:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    32a5:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    32b5:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    32c5:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    32d5:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    32e5:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    32f5:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3305:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3315:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3325:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3335:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3345:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3355:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3365:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3375:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3385:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3395:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    33a5:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    33b5:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    33c5:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    33d5:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    33e5:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    33f5:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3405:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3415:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3425:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3435:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3445:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3455:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3465:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3475:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3485:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3495:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    34a5:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    34b5:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    34c5:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    34d5:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    34e5:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    34f5:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3505:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3515:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3525:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3535:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3545:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3555:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3565:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3575:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3585:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3595:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    35a5:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    35b5:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    35c5:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    35d5:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    35e5:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    35f5:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3605:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3615:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3625:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3635:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3645:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3655:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3665:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3675:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3685:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3695:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    36a5:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    36b5:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    36c5:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    36d5:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    36e5:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    36f5:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3705:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3715:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3725:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3735:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3745:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3755:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3765:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3775:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3785:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3795:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    37a5:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    37b5:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    37c5:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    37d5:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    37e5:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    37f5:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3805:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3815:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3825:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3835:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3845:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3855:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3865:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3895:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38a5:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    38b5:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    38c5:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    38d5:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    38e5:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    38f5:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    3905:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3915:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3925:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    3935:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    3945:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    396d:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    397d:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39ad:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    39bd:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39d5:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    39e5:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    39f5:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a05:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3a15:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a25:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a35:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a45:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3a55:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    3a65:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    3a75:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    3a85:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    3a95:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    3aa5:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    3ab5:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    3ac5:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    3ad5:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    3ae5:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    3af5:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    3b05:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    3b15:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    3b25:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    3b35:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    3b45:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    3b55:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b65:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b75:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3b85:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    3ba1:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    3bb1:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    3bc1:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    3bd1:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    3be1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3bf1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c01:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3c11:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    3c21:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    3c31:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    3c41:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    3c51:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    3c61:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    3c71:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    3c81:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    3c91:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3ca1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cb1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cc1:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3cd1:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    3ce1:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    3cf1:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    3d01:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    3d11:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3d21:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    3d31:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    3d41:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d51:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3d7d:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3d8d:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3d9d:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3dad:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3dbd:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3dcd:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    3ddd:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    3ded:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    3dfd:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    3e0d:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    3e1d:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3e2d:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    3e3d:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    3e4d:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    3e5d:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    3e6d:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    3e7d:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    3e8d:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    3e9d:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    3ead:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    3ebd:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    3ecd:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    3edd:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    3eed:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    3efd:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    3f0d:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    3f1d:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    3f2d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f3d:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3f4d:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    3f5d:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    3f6d:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    3f7d:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3f95:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3fa5:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    3fb5:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    3fc5:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    3fd5:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3fe5:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    3ff5:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    401d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    402d:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    403d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    405d:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    406d:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    407d:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    409d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    40ad:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    40bd:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    40dd:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    40ed:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    40fd:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4121:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4131:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4141:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    415d:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    416d:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    417d:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    419d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    41ad:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    41bd:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    41dd:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    41ed:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    41fd:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    421d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    422d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    423d:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    425d:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    426d:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    427d:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    429d:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    42ad:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    42bd:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    42dd:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    42ed:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    42fd:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    431d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    432d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    433d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    435d:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    436d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    437d:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    439d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    43ad:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    43bd:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    43dd:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    43ed:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    43fd:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    441d:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    442d:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    443d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    445d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    446d:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    447d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    449d:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    44ad:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    44bd:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    44e1:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    44f1:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4501:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    451d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    452d:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    453d:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    455d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    456d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    457d:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    459d:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    45ad:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    45bd:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    45dd:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    45ed:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    45fd:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    461d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    462d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    463d:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    465d:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    466d:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    467d:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    469d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    46ad:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    46bd:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    46dd:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    46ed:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    46fd:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    471d:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    472d:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    473d:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    475d:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    476d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    477d:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    479d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47ad:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    47bd:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    47dd:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    47ed:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    47fd:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    481d:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    482d:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    483d:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    485d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    486d:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    487d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    489d:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    48ad:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    48bd:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    48dd:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    48ed:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    48fd:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    493d:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4955:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4965:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4975:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4985:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    4995:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49a5:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    49b5:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    49c5:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    49d5:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    49e5:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    49f5:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    4a05:	af af af af af af af af af af af af af af af af     ................
    4a15:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a25:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a35:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a45:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4a55:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    4a65:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    4a75:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    4a85:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    4a95:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    4aa5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ab5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ac5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ad5:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    4ae5:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4af5:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b05:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b15:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    4b25:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    4b35:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b45:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    4b55:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b65:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b75:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b85:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4b95:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4ba5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4bb5:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    4bc5:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    4bd5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4be5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4bf5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c05:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c15:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    4c25:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    4c35:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    4c45:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4c55:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c65:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c75:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c85:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    4c95:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    4ca5:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    4cb5:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    4cc5:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4cd5:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    4ce5:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    4cf5:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    4d05:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    4d15:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    4d25:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    4d35:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4d45:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    4d55:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    4d65:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    4d75:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    4d85:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    4d95:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    4da5:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    4db5:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    4dc5:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    4dd5:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    4de5:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4df5:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4e05:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4e15:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    4e25:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    4e35:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4e45:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4e55:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    4e65:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    4e75:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    4e85:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    4e95:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    4ea5:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    4eb5:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    4ec5:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    4ed5:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    4ee5:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    4ef5:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    4f05:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    4f15:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    4f25:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    4f35:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    4f45:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f55:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f65:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f75:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f85:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    4f95:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    4fa5:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    4fb5:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    4fc5:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    4fd5:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    4fe5:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    4ff5:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    5005:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5015:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5025:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5035:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5045:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5055:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5065:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5075:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5085:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5095:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50a5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50b5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50c5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50d5:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    50e5:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    50f5:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    5105:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5115:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5125:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5135:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5145:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5155:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5165:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5175:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5185:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5195:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    51a5:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    51b5:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    51c5:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    51d5:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    51e5:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    51f5:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    5205:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5215:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5225:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5235:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5245:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5255:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5265:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5275:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5285:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5295:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52a5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52b5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52c5:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    52d5:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    52e5:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    52f5:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    5305:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5315:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5325:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5335:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5345:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5355:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5365:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5375:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5385:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5395:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    53a5:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    53b5:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    53c5:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    53d5:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    53e5:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    53f5:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5405:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5415:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5425:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5435:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5445:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5455:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5465:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5475:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5485:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5495:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    54a5:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    54b5:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    54c5:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54d5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54e5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    54f5:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5505:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5515:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    552d:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    553d:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    554d:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    555d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    556d:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    557d:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    558d:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    559d:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55ad:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55bd:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55cd:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    55dd:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    55ed:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    55fd:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    560d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    561d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    562d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    563d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    564d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    565d:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    566d:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    567d:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    568d:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    569d:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    56ad:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    56bd:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    56cd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56dd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56ed:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    56fd:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    570d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    571d:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    572d:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    573d:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    574d:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    575d:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    576d:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    577d:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    578d:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    579d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    57ad:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    57bd:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    57cd:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    57dd:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    57ed:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    57fd:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    580d:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    581d:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    582d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    583d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    584d:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    585d:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    586d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    587d:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    588d:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    589d:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    58ad:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    58bd:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    58cd:	5c 5c 5c 5c 5c 5c 5c 5c                             \\\\\\\\

000058d5 <map_font>:
    58d5:	26 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     &..<=>?@ABCDEFGH
    58e5:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    58f5:	59 5a 5b 5c 5d 5e 5f 60                             YZ[\]^_`

000058fd <map_atmosphere>:
    58fd:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    590d:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    591d:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    592d:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00005937 <map_dialog>:
    5937:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    5947:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    5957:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    5967:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5977:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    5987:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5997:	31 32                                               12

00005999 <map_canvas>:
    5999:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    59a9:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    59b9:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    59d5:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    59e5:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    59f5:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    5a11:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    5a21:	32                                                  2

00005a22 <map_splash>:
    5a22:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    5a32:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    5a42:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    5a52:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    5a62:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

00005a6f <map_tile_none>:
    5a6f:	01 01 00                                            ...

00005a72 <map_level_mega_tiles>:
    5a72:	61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61     aaaaaaaaaaaaaaaa
    5a82:	61 61 61 61 61 61 61 61 61 61 61 61 61 61 62 61     aaaaaaaaaaaaaaba
    5a92:	61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61     aaaaaaaaaaaaaaaa
    5aa2:	61 61 04 04 04 04 04 04 04 04 04 04 04 04 04 04     aa..............
    5ab2:	04 04 04 04 04 04 04 04 04 04 04 61 61 61 61 61     ...........aaaaa
    5ac2:	61 61 61 61 61 61 61 61 61 61 63 63 63 63 63 64     aaaaaaaaaacccccd
    5ad2:	64 64 64 64 61 61 61 61 61 61 61 62 61 61 61 61     ddddaaaaaaabaaaa
    5ae2:	61 61 61 63 63 63 63 63 64 64 64 64 64 04 04 04     aaacccccddddd...
    5af2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5b02:	04 11 11 11 11 11 64 64 64 64 64 64 64 64 64 64     ......dddddddddd
    5b12:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5b22:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5b32:	02 02 02 64 64 04 11 11 64 64 64 64 64 64 64 64     ...dd...dddddddd
    5b42:	64 64 64 64 64 64 64 02 02 02 02 02 11 11 11 11     ddddddd.........
    5b52:	11 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     .ddddddddddddddd
    5b62:	02 02 64 64 64 11 04 64 64 64 64 64 64 64 64 64     ..ddd..ddddddddd
    5b72:	64 64 64 64 64 64 64 64 64 64 64 65 64 64 64 64     dddddddddddedddd
    5b82:	66 67 68 64 64 64 64 64 64 64 64 64 64 64 02 02     fghddddddddddd..
    5b92:	02 02 64 04 04 04 04 02 04 04 04 04 64 64 64 64     ..d.........dddd
    5ba2:	64 64 64 02 64 64 02 02 04 02 02 04 04 04 04 04     ddd.dd..........
    5bb2:	04 04 04 04 04 64 64 64 64 64 64 64 64 64 64 02     .....dddddddddd.
    5bc2:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 64 64     ..............dd
    5bd2:	64 64 64 64 64 02 64 64 02 02 04 02 64 04 04 04     ddddd.dd....d...
    5be2:	04 02 04 04 04 04 04 64 64 64 64 64 64 64 64 64     .......ddddddddd
    5bf2:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 02     ddddddddddddddd.
    5c02:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5c12:	64 64 64 64 02 64 64 64 02 64 64 64 64 64 64 64     dddd.ddd.ddddddd
    5c22:	64 64 02 64 64 64 64 04 64 64 64 64 64 02 64 64     dd.dddd.ddddd.dd
    5c32:	64 64 64 64 64 64 64 02 02 02 02 02 11 11 11 11     ddddddd.........
    5c42:	11 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     .ddddddddddddddd
    5c52:	02 02 02 02 64 11 11 11 04 64 64 64 64 64 64 64     ....d....ddddddd
    5c62:	64 64 64 64 64 64 64 64 64 02 02 02 02 02 04 11     ddddddddd.......
    5c72:	11 11 04 64 64 64 64 64 64 64 64 64 64 64 64 64     ...ddddddddddddd
    5c82:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5c92:	64 02 02 02 02 02 68 67 69 64 64 64 64 69 68 67     d.....hgiddddihg
    5ca2:	67 68 69 64 64 64 64 6a 64 64 02 02 02 02 02 64     ghiddddjdd.....d
    5cb2:	64 64 64 64 64 64 64 02 02 64 64 64 04 04 02 02     ddddddd..ddd....
    5cc2:	02 04 04 04 04 04 04 04 64 64 64 64 64 02 02 02     ........ddddd...
    5cd2:	64 64 04 04 04 02 64 04 04 04 04 02 04 04 04 04     dd....d.........
    5ce2:	04 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     .ddddddddddddddd
    5cf2:	64 64 64 64 02 02 02 02 02 04 64 64 64 64 64 64     dddd......dddddd
    5d02:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 18 18     dddddddddddddd..
    5d12:	18 18 18 64 64 64 64 64 64 64 64 64 64 64 64 64     ...ddddddddddddd
    5d22:	64 64 02 64 64 64 02 04 02 02 02 04 64 64 64 64     dd.ddd......dddd
    5d32:	64 64 64 64 64 64 64 64 64 64 64 02 64 64 64 64     ddddddddddd.dddd
    5d42:	04 02 02 02 02 64 64 64 64 02 64 64 64 02 04 64     .....dddd.ddd..d
    5d52:	64 02 04 04 64 02 04 04 04 02 04 04 04 04 02 02     d...d...........
    5d62:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5d72:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    5d82:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5d92:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    5da2:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    5db2:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5dc2:	04 04 04 64 64 64 64 04 02 64 64 64 04 04 02 64     ...dddd..ddd...d
    5dd2:	64 04 04 04 02 64 04 04 04 04 02 6b 6b 6b 6b 6b     d....d.....kkkkk
    5de2:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    5df2:	6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b     kkkkkkkkkkkkkkkk
    5e02:	6b 6b 6b 6c 6c 6c 6c 6c 6d 6d 6d 6d 6d 6d 6d 6d     kkklllllmmmmmmmm
    5e12:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e22:	6d 6d 6d 6d 6d 6d 6d 6e 6f 70 6d 71 69 69 69 72     mmmmmmmnopmqiiir
    5e32:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e42:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e52:	6d 6d 6d 05 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmm.mmmmmmmmmmmm
    5e62:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 05     mmmmmmmmmmmmmmm.
    5e72:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5e82:	06 06 06 06 06 6d 6d 6d 6d 6d 6d 6d 6d 6d 05 6d     .....mmmmmmmmm.m
    5e92:	6d 6d 05 05 6d 6d 05 05 05 6d 05 05 05 05 05 05     mm..mm...m......
    5ea2:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    5eb2:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    5ec2:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5ed2:	05 05 05 05 05 6d 6d 6d 6d 6d 05 6d 6d 6d 6d 05     .....mmmmm.mmmm.
    5ee2:	05 6d 6d 6d 05 05 05 6d 6d 05 05 05 05 6d 6d 6d     .mmm...mm....mmm
    5ef2:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5f02:	6d 6d 06 06 06 06 06 6d 6d 6d 6d 6d 6d 6d 6d 6d     mm.....mmmmmmmmm
    5f12:	6d 6d 6d 6d 6d 6d 06 06 6d 6d 6d 05 05 13 13 13     mmmmmm..mmm.....
    5f22:	6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d 6d     mmmmmmmmmmmmmmmm
    5f32:	6d 6d 6d 6d 13 13 13 13 13 6d 6d 6d 6d 6d 6d 6d     mmmm.....mmmmmmm
    5f42:	6d 6d 6d 6d 6d 6d 6d 6d 06 06 6d 6d 6d 05 05 06     mmmmmmmm..mmm...
    5f52:	06 06 06 06 06 06 06 6d 6d 6d 6d 6d 6d 6d 6d 6d     .......mmmmmmmmm
    5f62:	6d 6d 6d 6d 6d 6d 06 06 06 06 06 6d 6d 6d 6d 06     mmmmmm.....mmmm.
    5f72:	6d 6d 6d 06 05 6d 6d 06 05 05 06 06 05 05 05 05     mmm..mm.........
    5f82:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5f92:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fa2:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5fb2:	05 05 05 05 05 05 6d 6d 6d 6d 6d 06 6d 6d 6d 6d     ......mmmmm.mmmm
    5fc2:	05 06 6d 6d 6d 05 05 06 6d 6d 05 05 05 13 13 6d     ..mmm...mm.....m
    5fd2:	6d 6d 6d 06 6d 6d 6d 06 05 6d 6d 06 05 05 6d 06     mmm.mmm..mm...m.
    5fe2:	05 05 05 06 05 05 05 05 6d 6d 6d 6d 6d 06 6d 6d     ........mmmmm.mm
    5ff2:	6d 6d 05 06 6d 6d 6d 05 05 06 6d 6d 05 05 05 05     mm..mmm...mm....
    6002:	05 6d 6d 6d 6d 06 6d 6d 6d 06 05 6d 6d 06 05 05     .mmmm.mmm..mm...
    6012:	6d 06 05 05 05 05 05 05 05 05 6d 6d 6d 6d 6d 06     m.........mmmmm.
    6022:	6d 6d 6d 6d 05 06 6d 6d 6d 05 05 06 6d 6d 05 05     mmmm..mmm...mm..
    6032:	05 06 06 73 74 75 75 74 75 74 75 75 74 75 74 75     ...stuututuututu
    6042:	75 74 75 74 75 75 74 75 74 75 75 74 75 74 75 75     ututuututuututuu
    6052:	74 75 74 75 75 74 75 74 75 75 74 75 74 75 75 74     tutuututuututuut
    6062:	75 74 75 75 74 75 74 75 75 76 75 74 75 75 74 75     utuututuuvutuutu
    6072:	74 75 75 74 75 74 75 75 74 75 74 75 75 74 77 74     tuututuututuutwt
    6082:	75 75 74 79 79 79 79 79 79 79 79 79 79 79 79 79     uutyyyyyyyyyyyyy
    6092:	79 79 79 79 79 79 79 75 74 75 75 74 7a 7b 7a 7a     yyyyyyyutuutz{zz
    60a2:	7b 7c 7d 7c 7c 7d 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d     {|}||}z{zz{|}||}
    60b2:	75 74 75 75 78 79 79 79 79 79 79 79 79 79 79 79     utuuxyyyyyyyyyyy
    60c2:	79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79     yyyyyyyyyyyyyyyy
    60d2:	79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79     yyyyyyyyyyyyyyyy
    60e2:	79 79 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d 7a 7b 7a 7a     yyz{zz{|}||}z{zz
    60f2:	7b 7c 7d 7c 7c 7d 7a 7b 7a 7a 7b 0d 0e 0e 0d 0e     {|}||}z{zz{.....
    6102:	79 79 12 79 79 79 79 79 79 79 79 79 79 79 79 79     yy.yyyyyyyyyyyyy
    6112:	79 79 79 79 7c 7d 7c 7c 7d 7a 7b 7a 7a 7b 7c 7d     yyyy|}||}z{zz{|}
    6122:	7c 7c 7d 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d 79 79 79     ||}z{zz{|}||}yyy
    6132:	79 79 79 79 79 79 79 79 79 79 79 79 79 79 79 79     yyyyyyyyyyyyyyyy
    6142:	79 07 07 07 07 07 7a 7b 7a 7a 7b 7c 7d 7c 7c 7d     y.....z{zz{|}||}
    6152:	7a 7b 7a 7a 7b 7c 7d 7c 7c 7d 07 07 07 07 07 0d     z{zz{|}||}......
    6162:	0e 0e 0d 0e 79 79 79 79 79 79 79 79 79 79 79 79     ....yyyyyyyyyyyy
    6172:	79 79 79 07 07 07 07 07 79 79 79 79 79 79 07 07     yyy.....yyyyyy..
    6182:	07 07 79 05 05 05 05 07 05 05 05 05 05 05 05 05     ..y.............
    6192:	05 79 79 79 79 79 07 07 07 07 79 05 05 05 05 79     .yyyyy....y....y
    61a2:	05 05 05 05 07 05 05 05 05 05 79 79 79 79 79 79     ..........yyyyyy
    61b2:	79 79 79 79 79 79 79 79 79 07 79 79 79 79 05 14     yyyyyyyyy.yyyy..
    61c2:	14 14 14 79 79 79 79 79 79 79 79 79 79 79 79 79     ...yyyyyyyyyyyyy
    61d2:	79 79 79 79 79 79 07 14 14 14 14 05 0d 0e 0e 0d     yyyyyy..........
    61e2:	0e 79 79 79 79 79 79 79 79 79 79 07 79 79 79 79     .yyyyyyyyyy.yyyy
    61f2:	05 14 14 14 14 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     .....~~~~~~~~~~~
    6202:	0f 82 7e 0f 86 86 86 86 86 86 86 86 86 86 7e 7e     ..~...........~~
    6212:	7e 7e 7e 7e 7e 7e 7f 80 82 7e 0f 83 84 86 86 86     ~~~~~~...~......
    6222:	87 88 86 86 86 8a 8b 7e 7e 7e 7e 7e 81 7e 7e 7e     .......~~~~~.~~~
    6232:	7e 85 82 7e 0f 82 89 86 86 86 86 85 86 86 86 86     ~..~............
    6242:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 82 7e 0f 82 7e 86     ~~~~~~~~~~.~..~.
    6252:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6262:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6272:	86 86 86 86 86 87 88 86 86 86 8a 8b 86 86 86 87     ................
    6282:	88 86 86 86 8a 8b 86 86 86 87 88 89 86 86 86 86     ................
    6292:	85 86 86 86 86 89 86 86 86 86 85 86 86 86 86 89     ................
    62a2:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    62b2:	86 86 8c 86 86 86 8c 61 86 86 8c 61 61 86 86 86     .......a...aa...
    62c2:	8a 8b 86 86 86 87 88 86 86 86 8a 8b 86 86 86 87     ................
    62d2:	88 86 86 86 8a 8b 85 86 86 86 86 89 86 86 86 86     ................
    62e2:	85 86 86 86 86 89 86 86 86 86 85 86 86 86 86 86     ................
    62f2:	86 8d 8d 8d 86 86 8d 8d 8d 86 86 8d 8d 8d 86 86     ................
    6302:	8d 8d 8d 86 86 8d 8d 8d 86 86 86 87 88 86 8e 86     ................
    6312:	8a 8b 8e 8f 86 86 90 91 91 91 91 91 91 91 91 91     ................
    6322:	91 89 86 86 86 86 85 86 86 86 86 86 86 86 86 86     ................
    6332:	86 86 86 86 86 86 86 86 86 86 86 8d 8d 8d 8d 86     ................
    6342:	8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d     ................
    6352:	8d 8d 8d 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    6362:	86 86 86 86 91 91 91 86 86 91 91 91 86 09 09 09     ................
    6372:	09 86 8e 86 8a 8b 8e 8f 86 86 90 91 91 91 91 91     ................
    6382:	91 91 91 91 91 09 86 86 86 86 85 86 86 86 86 86     ................
    6392:	86 86 86 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    63a2:	86 86 86 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d     ................
    63b2:	8d 8d 86 8d 8d 8d 8d 86 86 8d 8d 8d 86 86 8d 8d     ................
    63c2:	8d 86 86 8d 8d 8d 86 86 61 61 61 09 09 09 09 09     ........aaa.....
    63d2:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    63e2:	91 91 91 91 09 09 09 09 09 86 86 86 86 86 86 8d     ................
    63f2:	8d 86 86 86 8d 8d 91 86 86 61 61 91 86 09 09 09     .........aa.....
    6402:	09 09 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d 8d     ................
    6412:	8d 86 61 61 61 61 09 09 09 09 09 86 86 91 91 91     ..aaaa..........
    6422:	86 86 91 91 91 86 86 91 91 91 86 86 91 91 91 09     ................
    6432:	09 09 09 09 86 09 09 09 09 86 86 8d 8d 8d 86 86     ................
    6442:	8d 8d 8d 86 86 61 61 61 09 09 09 09 09 09 91 91     .....aaa........
    6452:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6462:	91 09 09 09 09 09 86 09 09 09 09 86 8d 8d 86 86     ................
    6472:	86 8d 8d 91 86 86 61 61 91 86 09 09 09 09 09 09     ......aa........
    6482:	8d 8d 8d 8d 86 8d 8d 8d 8d 86 8d 8d 8d 8d 86 61     ...............a
    6492:	61 61 61 09 09 09 09 09 86 86 91 91 91 86 86 91     aaa.............
    64a2:	91 91 86 86 91 91 91 86 09 91 91 91 09 08 15 15     ................
    64b2:	15 86 86 8d 8d 8d 86 86 8d 8d 8d 86 86 8d 8d 8d     ................
    64c2:	86 86 09 61 61 15 15 08 09 09 91 91 91 91 91 91     ...aa...........
    64d2:	91 91 91 91 91 91 91 91 91 91 91 91 09 91 09 09     ................
    64e2:	09 08 15 86 86 86 86 86 86 86 86 86 86 86 86 86     ................
    64f2:	86 86 86 86 86 86 09 15 15 15 15 08 91 91 91 91     ................
    6502:	91 91 91 91 91 09 91 91 91 09 08 91 91 09 08 08     ................
    6512:	09 09 08 08 08 86 8d 8d 8d 8d 86 8d 8d 8d 8d 15     ................
    6522:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 86 8d     ................
    6532:	8d 8d 8d 86 09 09 8d 8d 15 08 08 15 15 08 08 08     ................
    6542:	08 08 08 08 08 08 08 86 86 91 91 91 86 86 09 09     ................
    6552:	91 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    6562:	86 86 8d 8d 8d 86 86 09 09 09 15 15 08 08 08 08     ................
    6572:	08 08 08 08 08 08 08 08 08 91 91 91 91 91 91 91     ................
    6582:	91 91 91 09 91 91 91 91 08 09 91 91 91 08 08 09     ................
    6592:	09 09 92 92 92 92 92 92 92 92 92 92 92 92 92 92     ................
    65a2:	92 92 92 92 92 92 92 92 92 92 92 92 92 92 92 92     ................
    65b2:	92 92 92 92 92 92 92 92 92 92 93 93 93 93 93 94     ................
    65c2:	94 94 94 94 92 92 92 92 92 92 92 92 92 92 92 92     ................
    65d2:	92 92 92 93 93 93 93 93 94 94 95 94 94 94 94 94     ................
    65e2:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    65f2:	94 94 94 94 94 94 94 96 97 98 94 96 97 97 97 98     ................
    6602:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6612:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6622:	94 94 94 94 94 95 94 94 94 94 94 94 94 94 94 95     ................
    6632:	94 94 94 96 97 98 94 96 97 97 97 98 94 94 94 94     ................
    6642:	94 94 99 9a 9b 94 96 9c 10 9d 98 94 94 94 94 94     ................
    6652:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6662:	94 95 94 94 94 99 9a 9b 94 96 9c 10 9d 98 94 94     ................
    6672:	94 94 94 94 94 94 94 94 0a 0a 0a 0a 0a 94 94 94     ................
    6682:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6692:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    66a2:	94 94 94 0a 0a 94 94 94 94 94 94 94 94 94 94 94     ................
    66b2:	94 94 94 94 94 94 94 94 94 0a 0a 0a 9e 0a 94 94     ................
    66c2:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    66d2:	94 94 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 94 94 94 94     ................
    66e2:	94 94 94 94 94 94 94 94 94 94 94 0a 0a 0a 0a 0a     ................
    66f2:	94 94 94 0a 0a 94 94 0a 0b 0b 94 0a 0b 0b 0b 0a     ................
    6702:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    6712:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6722:	0b 0b 9e 0a 0a 94 94 0b 0b 0b 0a 94 0b 0b 0b 0b     ................
    6732:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 94 94 94 0a 16     ................
    6742:	94 94 94 94 94 94 94 94 94 94 0a 94 94 94 94 0b     ................
    6752:	0a 0a 0a 0a 16 16 16 16 0a 94 94 94 94 94 94 94     ................
    6762:	94 94 94 94 94 94 94 94 0a 0a 0a 0a 0a 94 94 94     ................
    6772:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6782:	0a 0a 0a 0a 0a 0b 94 94 94 94 94 94 94 94 94 94     ................
    6792:	94 94 94 94 94 94 94 94 94 94 17 17 17 17 17 94     ................
    67a2:	94 94 94 94 94 94 94 94 94 94 94 94 94 94 0a 0a     ................
    67b2:	94 94 94 0b 0b 17 17 17 94 94 94 94 94 94 94 94     ................
    67c2:	94 94 94 94 94 94 94 94 94 0a 0a 94 17 17 0b 0b     ................
    67d2:	17 94 94 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    67e2:	94 94 94 94 0a 17 17 17 17 0b 94 94 94 94 94 94     ................
    67f2:	94 94 94 94 94 94 94 94 94 0a 94 94 94 94 0b 17     ................
    6802:	17 17 17 94 94 94 94 94 94 94 94 94 94 94 94 94     ................
    6812:	94 94 94 0a 94 94 94 17 0b 0a 0a 0a 0a 0a 0a 9e     ................
    6822:	0a 0a 16 16 16 0a 94 94 94 94 94 94 94 94 94 94     ................
    6832:	0a 0a 0a 0a 0a 94 94 94 94 94 94 94 94 94 94 94     ................
    6842:	94 94 94 94 0a 94 94 94 94 0b 0a 0a 0a 0a 00 21     ...............!
	...
    685e:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    686e:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    687e:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    6896:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    68a6:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    68b6:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    68c6:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    68d6:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    68e6:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    68f6:	21 00 00 00 00 00 00 00 00 19 19 19 19 19 19 19     !...............
    6906:	19 19 19 1a 1a 1a 1a 1a 19 19 00 00 00 19 19 00     ................
	...
    691e:	00 22 00 00 00 21 00 00 00 00 00 00 1a 1a 00 00     ."...!..........
    692e:	00 22 00 22 00 00 00 00 00 00 00 00 00 00 21 00     ."."..........!.
    693e:	00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19 19 00 00     ................
    694e:	00 19 19 22 00 00 19 19 00 00 00 1a 1a 1a 1a 1a     ..."............
    695e:	1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b 1b 1b 00     ..."............
    696e:	21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b 1b 1b 1b     !...............
    697e:	1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    698e:	1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00 00 22 1a     ..............".
    699e:	1a 00 21 00 00 00 00 00 00 00 00 00 00 00 22 00     ..!...........".
    69ae:	22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00 00 00 00     "..........!....
	...
    69c6:	00 1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00     ................
    69d6:	19 19 00 00 00 19 19 00 22 00 00 21 00 00 00 00     ........"..!....
    69e6:	00 00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00     ..........!.....
    69f6:	19 19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a     ............"...
    6a06:	1a 1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00     .............!..
    6a16:	00 00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19     ................
    6a26:	19 19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a     ................
    6a36:	1a 1a 1a 1a 19 19 19 19 19 19 19 19 19 19           ..............

00006a44 <map_level_space_final>:
    6a44:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6a54:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6a64:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    6a74:	94 93 94 93 95 90 91 90 91 90 91 90 91 90 91 90     ................
    6a84:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6a94:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6aa4:	91 90 91 90 91 96 97 98 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ab4:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ac4:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6ad4:	8e 8f 8e 8f 8e 8f 8e 8f 8e 99 9a 90 91 90 91 90     ................
    6ae4:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6af4:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b04:	91 90 91 90 91 90 91 90 91 90 91 9b 9c 9d 8e 8f     ................
    6b14:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b24:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b34:	8e 8f 8e 8f 8e 8f 8e 8f 9e 9f a0 9f a0 9f a0 9f     ................
    6b44:	a1                                                  .

00006b45 <map_level_space>:
    6b45:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    6b55:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b65:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6b75:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    6b85:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6b95:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6ba5:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bb5:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bc5:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6bd5:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    6be5:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6bf5:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    6c05:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    6c15:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c25:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c35:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    6c45:	8e                                                  .

00006c46 <map_level_desert>:
    6c46:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    6c56:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6c66:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    6c76:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    6c86:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    6c96:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    6ca6:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    6cb6:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    6cc6:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    6cd6:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    6ce6:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    6cf6:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    6d06:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    6d16:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    6d26:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    6d36:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    6d46:	7e                                                  ~

00006d47 <map_level_city>:
    6d47:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    6d57:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    6d67:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    6d77:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    6d87:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    6d97:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    6da7:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    6db7:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    6dc7:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    6dd7:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    6de7:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    6df7:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    6e07:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    6e17:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    6e27:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    6e37:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    6e47:	5f                                                  _

00006e48 <map_level_forest>:
    6e48:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    6e58:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    6e68:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    6e78:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    6e88:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    6e98:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    6ea8:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    6eb8:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    6ec8:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    6ed8:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    6ee8:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    6ef8:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    6f08:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    6f18:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    6f28:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    6f38:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    6f48:	45                                                  E

00006f49 <map_level_fire>:
    6f49:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    6f59:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6f69:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    6f79:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    6f89:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6f99:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    6fa9:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    6fb9:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    6fc9:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    6fd9:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    6fe9:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    6ff9:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    7009:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    7019:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    7029:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    7039:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    7049:	2e                                                  .

0000704a <map_level_ice>:
    704a:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    705a:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    706a:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    707a:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    708a:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    709a:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    70aa:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    70ba:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    70ca:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    70da:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    70ea:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    70fa:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    710a:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    711a:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    712a:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    713a:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    714a:	15 00                                               ..

0000714c <__ctors_end>:
    714c:	11 24       	eor	r1, r1
    714e:	1f be       	out	0x3f, r1	; 63
    7150:	cf ef       	ldi	r28, 0xFF	; 255
    7152:	d0 e1       	ldi	r29, 0x10	; 16
    7154:	de bf       	out	0x3e, r29	; 62
    7156:	cd bf       	out	0x3d, r28	; 61

00007158 <__do_copy_data>:
    7158:	15 e0       	ldi	r17, 0x05	; 5
    715a:	a0 e0       	ldi	r26, 0x00	; 0
    715c:	b5 e0       	ldi	r27, 0x05	; 5
    715e:	e6 e1       	ldi	r30, 0x16	; 22
    7160:	f7 ee       	ldi	r31, 0xE7	; 231
    7162:	02 c0       	rjmp	.+4      	; 0x7168 <__do_copy_data+0x10>
    7164:	05 90       	lpm	r0, Z+
    7166:	0d 92       	st	X+, r0
    7168:	a0 31       	cpi	r26, 0x10	; 16
    716a:	b1 07       	cpc	r27, r17
    716c:	d9 f7       	brne	.-10     	; 0x7164 <__do_copy_data+0xc>

0000716e <__do_clear_bss>:
    716e:	10 e1       	ldi	r17, 0x10	; 16
    7170:	a0 e1       	ldi	r26, 0x10	; 16
    7172:	b5 e0       	ldi	r27, 0x05	; 5
    7174:	01 c0       	rjmp	.+2      	; 0x7178 <.do_clear_bss_start>

00007176 <.do_clear_bss_loop>:
    7176:	1d 92       	st	X+, r1

00007178 <.do_clear_bss_start>:
    7178:	ae 35       	cpi	r26, 0x5E	; 94
    717a:	b1 07       	cpc	r27, r17
    717c:	e1 f7       	brne	.-8      	; 0x7176 <.do_clear_bss_loop>

0000717e <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    717e:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <wdt_randomize>
#endif

    MCUSR = 0;
    7182:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7184:	88 e1       	ldi	r24, 0x18	; 24
    7186:	0f b6       	in	r0, 0x3f	; 63
    7188:	f8 94       	cli
    718a:	80 93 60 00 	sts	0x0060, r24
    718e:	10 92 60 00 	sts	0x0060, r1
    7192:	0f be       	out	0x3f, r0	; 63

00007194 <Initialize>:


void Initialize(void){
	int i;

	cli();
    7194:	f8 94       	cli
    7196:	86 e9       	ldi	r24, 0x96	; 150
    7198:	90 e0       	ldi	r25, 0x00	; 0

	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    719a:	fc 01       	movw	r30, r24
    719c:	25 91       	lpm	r18, Z+
    719e:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    71a0:	f9 01       	movw	r30, r18
    71a2:	ff 27       	eor	r31, r31
		*ptr=val>>8;
    71a4:	30 83       	st	Z, r19
    71a6:	02 96       	adiw	r24, 0x02	; 2
	cli();

	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    71a8:	20 e0       	ldi	r18, 0x00	; 0
    71aa:	88 3c       	cpi	r24, 0xC8	; 200
    71ac:	92 07       	cpc	r25, r18
    71ae:	a9 f7       	brne	.-22     	; 0x719a <Initialize+0x6>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;
	}

	if(!isEepromFormatted()) FormatEeprom();
    71b0:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <isEepromFormatted>
    71b4:	81 11       	cpse	r24, r1
    71b6:	02 c0       	rjmp	.+4      	; 0x71bc <Initialize+0x28>
    71b8:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <FormatEeprom>
		mix_bank=0;
	#endif

	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    71bc:	81 e0       	ldi	r24, 0x01	; 1
    71be:	80 93 e6 0c 	sts	0x0CE6, r24
		tr4_barrel_hi=1;		
    71c2:	80 93 e7 0c 	sts	0x0CE7, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    71c6:	80 93 e5 0c 	sts	0x0CE5, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    71ca:	10 92 d2 0c 	sts	0x0CD2, r1
    71ce:	10 92 d8 0c 	sts	0x0CD8, r1
    71d2:	10 92 de 0c 	sts	0x0CDE, r1
    71d6:	10 92 e4 0c 	sts	0x0CE4, r1
    71da:	10 92 ea 0c 	sts	0x0CEA, r1
	}

	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    71de:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_flags=0;
    71e2:	10 92 ba 0c 	sts	0x0CBA, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    71e6:	92 e1       	ldi	r25, 0x12	; 18
    71e8:	90 93 b9 0c 	sts	0x0CB9, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    71ec:	90 ee       	ldi	r25, 0xE0	; 224
    71ee:	90 93 c0 0c 	sts	0x0CC0, r25
	first_render_line=FIRST_RENDER_LINE;
    71f2:	94 e1       	ldi	r25, 0x14	; 20
    71f4:	90 93 bf 0c 	sts	0x0CBF, r25

	joypad1_status_hi=0;
    71f8:	10 92 c4 0c 	sts	0x0CC4, r1
    71fc:	10 92 c3 0c 	sts	0x0CC3, r1
	joypad2_status_hi=0;
    7200:	10 92 c8 0c 	sts	0x0CC8, r1
    7204:	10 92 c7 0c 	sts	0x0CC7, r1
	sound_enabled=1;
    7208:	80 93 d1 0c 	sts	0x0CD1, r24

	InitializeVideoMode();
    720c:	0e 94 d2 4b 	call	0x97a4	; 0x97a4 <InitializeVideoMode>

	sei();
    7210:	78 94       	sei

	DisplayLogo();
    7212:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <DisplayLogo>
    7216:	0e 94 22 71 	call	0xe244	; 0xe244 <main>
    721a:	0c 94 89 73 	jmp	0xe712	; 0xe712 <_exit>

0000721e <__bad_interrupt>:
    721e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007222 <sub_video_mode3>:

sub_video_mode3:

	; Wait cycles to align with next hsync

	WAIT  r16,     395
    7222:	03 e8       	ldi	r16, 0x83	; 131
    7224:	0a 95       	dec	r16
    7226:	f1 f7       	brne	.-4      	; 0x7224 <sub_video_mode3+0x2>
    7228:	00 c0       	rjmp	.+0      	; 0x722a <sub_video_mode3+0x8>

	; Refresh ramtiles indexes in VRAM. This has to be done because the
	; main program may have altered the VRAM after vsync and the rendering
	; interrupt.

	lds   r16,     user_ram_tiles_c
    722a:	00 91 a5 0c 	lds	r16, 0x0CA5

	ldi   ZL,      lo8(ram_tiles_restore)
    722e:	e0 e5       	ldi	r30, 0x50	; 80
	ldi   ZH,      hi8(ram_tiles_restore)
    7230:	fc e0       	ldi	r31, 0x0C	; 12
	ldi   r18,     3
    7232:	23 e0       	ldi	r18, 0x03	; 3
	mul   r16,     r18
    7234:	02 9f       	mul	r16, r18
	add   ZL,      r0
    7236:	e0 0d       	add	r30, r0
	adc   ZH,      r1      ; Skip user RAM tiles
    7238:	f1 1d       	adc	r31, r1

	lds   r18,     free_tile_index
    723a:	20 91 a4 0c 	lds	r18, 0x0CA4
	ldi   r19,     MAX_RAMTILES ; Maximum possible ramtiles
    723e:	3c e3       	ldi	r19, 0x3C	; 60
	sub   r19,     r18     ; Subtract free tiles
    7240:	32 1b       	sub	r19, r18
	add   r19,     r16     ; Add user tiles
    7242:	30 0f       	add	r19, r16

	cp    r18,     r16
    7244:	20 17       	cp	r18, r16
	breq  no_ramtiles
    7246:	51 f0       	breq	.+20     	; 0x725c <no_ramtiles>
	nop
    7248:	00 00       	nop
	...

0000724c <upd_loop>:
	nop
upd_loop:
	ld    XL,      Z+      ; Load vram offset of ramtile
    724c:	a1 91       	ld	r26, Z+
	ld    XH,      Z+
    724e:	b1 91       	ld	r27, Z+

	ld    r17,     X       ; Get latest VRAM tile that may have been modified my
    7250:	1c 91       	ld	r17, X
	st    Z+,      r17     ; The main program and store it in the restore buffer
    7252:	11 93       	st	Z+, r17
	st    X,       r16     ; Write the ramtile index back to vram
    7254:	0c 93       	st	X, r16

	inc   r16
    7256:	03 95       	inc	r16
	cp    r16,     r18
    7258:	02 17       	cp	r16, r18
	brlo  upd_loop         ; Loop is 14 cycles
    725a:	c0 f3       	brcs	.-16     	; 0x724c <upd_loop>

0000725c <no_ramtiles>:

no_ramtiles:
	; Wait for remaining maximum possible ramtiles
1:
	ldi   r17,     3
    725c:	13 e0       	ldi	r17, 0x03	; 3
	dec   r17
    725e:	1a 95       	dec	r17
	brne  .-4
    7260:	f1 f7       	brne	.-4      	; 0x725e <no_ramtiles+0x2>
	rjmp  .
    7262:	00 c0       	rjmp	.+0      	; 0x7264 <no_ramtiles+0x8>
	dec   r19
    7264:	3a 95       	dec	r19
	brne  1b
    7266:	d1 f7       	brne	.-12     	; 0x725c <no_ramtiles>
	WAIT  r17,     18 + (MAX_RAMTILES * 14) - 2

#endif


	ldi   YL,      lo8(vram)
    7268:	c0 e0       	ldi	r28, 0x00	; 0
	ldi   YH,      hi8(vram)
    726a:	d1 e0       	ldi	r29, 0x01	; 1

	; Prepare scrolling related elements

	; Add X scroll (coarse)

	lds   r18,     screen_scrollX ; ScreenScrollX
    726c:	20 91 b5 0c 	lds	r18, 0x0CB5
	mov   r25,     r18
    7270:	92 2f       	mov	r25, r18
	andi  r18,     0xf8    ; (x>>3) * 8 interleave
    7272:	28 7f       	andi	r18, 0xF8	; 248
	add   YL,      r18
    7274:	c2 0f       	add	r28, r18

	; Save Y wrap adress

	movw  r12,     YL
    7276:	6e 01       	movw	r12, r28

	; Add Y scroll (coarse)

	lds   r16,     screen_scrollY ; ScreenScrollY
    7278:	00 91 b6 0c 	lds	r16, 0x0CB6
	mov   r22,     r16
    727c:	60 2f       	mov	r22, r16
	lsr   r16
    727e:	06 95       	lsr	r16
	lsr   r16
    7280:	06 95       	lsr	r16
	lsr   r16              ; Divide by 8
    7282:	06 95       	lsr	r16

	lds   r17,     screen_scrollHeight
    7284:	10 91 b7 0c 	lds	r17, 0x0CB7
	sub   r17,     r16
    7288:	10 1b       	sub	r17, r16
	mov   r15,     r17     ; Y tiles to draw before wrapping
    728a:	f1 2e       	mov	r15, r17

	mov   r17,     r16
    728c:	10 2f       	mov	r17, r16
	lsr   r16
    728e:	06 95       	lsr	r16
	lsr   r16
    7290:	06 95       	lsr	r16
	lsr   r16              ; Divide by 8
    7292:	06 95       	lsr	r16
	add   YH,      r16     ; (bits 6-7 for 256 byte VRAM bank select)
    7294:	d0 0f       	add	r29, r16
	andi  r17,     0x7
    7296:	17 70       	andi	r17, 0x07	; 7
	add   YL,      r17     ; Interleave (bits 3-5)
    7298:	c1 0f       	add	r28, r17
	andi  r22,     0x7     ; Fine Y scrolling (bits 0-2)
    729a:	67 70       	andi	r22, 0x07	; 7
#endif


	; Prepare overlay

	lds   r20,     overlay_tile_table
    729c:	40 91 b3 0c 	lds	r20, 0x0CB3
	lds   r21,     overlay_tile_table + 1
    72a0:	50 91 b4 0c 	lds	r21, 0x0CB4
	lds   r6,      tile_table_lo
    72a4:	60 90 af 0c 	lds	r6, 0x0CAF
	lds   r7,      tile_table_hi
    72a8:	70 90 b0 0c 	lds	r7, 0x0CB0
	movw  XL,      r6      ; Store for later
    72ac:	d3 01       	movw	r26, r6

	; Save main section values

	movw  r10,     YL      ; Main section VRAM begin
    72ae:	5e 01       	movw	r10, r28
	mov   r23,     r22     ; Main section line counter within tile row (fine Y scroll)
    72b0:	76 2f       	mov	r23, r22
#if (SCROLLING != 0)
	mov   r24,     r15     ; Y tiles to draw before wrapping
    72b2:	8f 2d       	mov	r24, r15
	mov   r9,      r25     ; Main section X scroll
    72b4:	99 2e       	mov	r9, r25

#if (SCROLLING != 0)

	; Compute beginning of overlay in vram

	lds   r16,     screen_scrollHeight
    72b6:	00 91 b7 0c 	lds	r16, 0x0CB7
	mov   r18,     r16
    72ba:	20 2f       	mov	r18, r16
	lsr   r16
    72bc:	06 95       	lsr	r16
	lsr   r16
    72be:	06 95       	lsr	r16
	lsr   r16              ; Hi8
    72c0:	06 95       	lsr	r16
	inc   r16              ; Add 0x100 ram offset
    72c2:	03 95       	inc	r16
	andi  r18,     7       ; Lo8
    72c4:	27 70       	andi	r18, 0x07	; 7

	lds   r19,     overlay_height
    72c6:	30 91 b2 0c 	lds	r19, 0x0CB2
	cpi   r19,     0
    72ca:	30 30       	cpi	r19, 0x00	; 0
	in    r0,      _SFR_IO_ADDR(SREG)
    72cc:	0f b6       	in	r0, 0x3f	; 63

	sbrs  r0,      SREG_Z
    72ce:	01 fe       	sbrs	r0, 1
	clr   r22              ; Overlay: No Y fine scroll
    72d0:	66 27       	eor	r22, r22
	sbrs  r0,      SREG_Z
    72d2:	01 fe       	sbrs	r0, 1
	mov   YL,      r18     ; lo8(overlay_vram)
    72d4:	c2 2f       	mov	r28, r18
	sbrs  r0,      SREG_Z
    72d6:	01 fe       	sbrs	r0, 1
	mov   YH,      r16     ; hi8(overlay_vram)
    72d8:	d0 2f       	mov	r29, r16
	sbrs  r0,      SREG_Z
    72da:	01 fe       	sbrs	r0, 1
	ldi   r24,     0xFF    ; Overlay doesn't wrap (max out wrap counter)
    72dc:	8f ef       	ldi	r24, 0xFF	; 255
	sbrs  r0,      SREG_Z
    72de:	01 fe       	sbrs	r0, 1
	clr   r9               ; Overlay has no X scroll
    72e0:	99 24       	eor	r9, r9
	sbrs  r0,      SREG_Z
    72e2:	01 fe       	sbrs	r0, 1
	movw  XL,      r20     ; Overlay tile table
    72e4:	da 01       	movw	r26, r20
#endif


	; Total scanlines to draw

	lds   r8,      render_lines_count
    72e6:	80 90 c0 0c 	lds	r8, 0x0CC0

	; Prepare Timer1 to use it for terminating scanlines

	ldi   r16,     (1 << OCF1B) + (1 << OCF1A) + (1 << TOV1)
    72ea:	07 e0       	ldi	r16, 0x07	; 7
	sts   _SFR_MEM_ADDR(TIFR1), r16  ; Clear any pending timer int
    72ec:	00 93 36 00 	sts	0x0036, r16

	ldi   r16,     (0 << WGM12) + (1 << CS10)
    72f0:	01 e0       	ldi	r16, 0x01	; 1
	sts   _SFR_MEM_ADDR(TCCR1B), r16 ; Switch to timer1 normal mode (mode 0)
    72f2:	00 93 81 00 	sts	0x0081, r16

	ldi   r16,     (1 << TOIE1)
    72f6:	01 e0       	ldi	r16, 0x01	; 1
	sts   _SFR_MEM_ADDR(TIMSK1), r16 ; Enable Overflow interrupt
    72f8:	00 93 6f 00 	sts	0x006F, r16

000072fc <next_tile_line>:

next_tile_line:

	; Get tile row offset

	ldi   r16,     TILE_WIDTH ; Tile width in pixels
    72fc:	08 e0       	ldi	r16, 0x08	; 8
	mul   r22,     r16     ; r1:r0: Row offset within tile
    72fe:	60 9f       	mul	r22, r16

	; Compute base adresses for ROM and RAM tiles

	movw  r16,     XL      ; Tile table
    7300:	8d 01       	movw	r16, r26
	subi  r16,     lo8(RAM_TILES_COUNT * TILE_HEIGHT * TILE_WIDTH)
    7302:	00 50       	subi	r16, 0x00	; 0
	sbci  r17,     hi8(RAM_TILES_COUNT * TILE_HEIGHT * TILE_WIDTH)
    7304:	17 40       	sbci	r17, 0x07	; 7
	add   r16,     r0
    7306:	00 0d       	add	r16, r0
	adc   r17,     r1
    7308:	11 1d       	adc	r17, r1
	movw  r2,      r16     ; r3:r2: ROM tiles row adress
    730a:	18 01       	movw	r2, r16

	ldi   r16,     lo8(ram_tiles)
    730c:	00 e5       	ldi	r16, 0x50	; 80
	ldi   r17,     hi8(ram_tiles)
    730e:	15 e0       	ldi	r17, 0x05	; 5
	add   r16,     r0
    7310:	00 0d       	add	r16, r0
	adc   r17,     r1
    7312:	11 1d       	adc	r17, r1
	movw  r4,      r16     ; r5:r4: RAM tiles row adress
    7314:	28 01       	movw	r4, r16

	ldi   r16,     TILE_HEIGHT * TILE_WIDTH
    7316:	00 e4       	ldi	r16, 0x40	; 64
	mov   r14,     r16     ; 14 cycles
    7318:	e0 2e       	mov	r14, r16

	; Prepare Timer1 OVF interrupt location

#if (RESOLUTION_EXT == 0)
	ldi   r16,     lo8(0xFFFF - (48 * SCREEN_TILES_H) - 44)
    731a:	03 e9       	ldi	r16, 0x93	; 147
	ldi   r17,     hi8(0xFFFF - (48 * SCREEN_TILES_H) - 44)
    731c:	1a ef       	ldi	r17, 0xFA	; 250
	ldi   r17,     hi8(0xFFFF - (44 * SCREEN_TILES_H) - 44)
#endif

	; Save current VRAM location (left column)

	push  YL
    731e:	cf 93       	push	r28
	push  YH
    7320:	df 93       	push	r29

	; Fetch first two tiles to prepare for scrolling output

#if (SCROLLING != 0)
	ld    r21,     Y       ; Tile 0 ID from VRAM
    7322:	58 81       	ld	r21, Y
	subi  YL,      0xF8
    7324:	c8 5f       	subi	r28, 0xF8	; 248
	ld    r20,     Y       ; Tile 1 ID from VRAM
    7326:	48 81       	ld	r20, Y
	subi  YL,      0xF8    ; 6 cycles
    7328:	c8 5f       	subi	r28, 0xF8	; 248
	rjmp  .
#endif

	; Enter next scanline including left alignment waits

	rcall hsync_pulse
    732a:	a5 d3       	rcall	.+1866   	; 0x7a76 <hsync_pulse>

	WAIT  r18,     HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    732c:	2c e0       	ldi	r18, 0x0C	; 12
    732e:	2a 95       	dec	r18
    7330:	f1 f7       	brne	.-4      	; 0x732e <next_tile_line+0x32>

#if (RESOLUTION_EXT == 0)
	WAIT  r18,     0  + ((30 - SCREEN_TILES_H) * 24)
    7332:	20 e1       	ldi	r18, 0x10	; 16
    7334:	2a 95       	dec	r18
    7336:	f1 f7       	brne	.-4      	; 0x7334 <next_tile_line+0x38>
	WAIT  r18,     16 + ((32 - SCREEN_TILES_H) * 22)
#endif

	; Set up Timer 1

	sts   _SFR_MEM_ADDR(TCNT1H), r17
    7338:	10 93 85 00 	sts	0x0085, r17
	sts   _SFR_MEM_ADDR(TCNT1L), r16
    733c:	00 93 84 00 	sts	0x0084, r16
	sei                    ; 7 cycles
    7340:	78 94       	sei

#if (SCROLLING != 0)

	; Prepare first two tile addresses

	clr   r16
    7342:	00 27       	eor	r16, r16

	mul   r21,     r14     ; r1:r0: Tile address
    7344:	5e 9d       	mul	r21, r14
	cpi   r21,     RAM_TILES_COUNT
    7346:	5c 31       	cpi	r21, 0x1C	; 28
	movw  ZL,      r2      ; ROM tile address
    7348:	f1 01       	movw	r30, r2
	brcc  .+2
    734a:	08 f4       	brcc	.+2      	; 0x734e <next_tile_line+0x52>
	movw  ZL,      r4      ; RAM tile address
    734c:	f2 01       	movw	r30, r4
	rol   r16              ; r16.0: Tile0 RAM if set
    734e:	00 1f       	adc	r16, r16
	add   ZL,      r0
    7350:	e0 0d       	add	r30, r0
	adc   ZH,      r1      ; ZH:ZL: Tile 0 address to start with
    7352:	f1 1d       	adc	r31, r1

	mov   r18,     r9
    7354:	29 2d       	mov	r18, r9
	andi  r18,     0x07    ; Low 7 bits: 0-7 px visible of last tile
    7356:	27 70       	andi	r18, 0x07	; 7
	clr   r1
    7358:	11 24       	eor	r1, r1
	add   ZL,      r18
    735a:	e2 0f       	add	r30, r18
	adc   ZH,      r1      ; ZH:ZL: Skipped non-visible left pixels
    735c:	f1 1d       	adc	r31, r1

	mul   r20,     r14     ; r1:r0: Tile address
    735e:	4e 9d       	mul	r20, r14
	cpi   r20,     RAM_TILES_COUNT
    7360:	4c 31       	cpi	r20, 0x1C	; 28
	movw  r20,     r2      ; ROM tile address
    7362:	a1 01       	movw	r20, r2
	brcc  .+2
    7364:	08 f4       	brcc	.+2      	; 0x7368 <next_tile_line+0x6c>
	movw  r20,     r4      ; RAM tile address
    7366:	a2 01       	movw	r20, r4
	rol   r16              ; r16.0: Tile1 RAM if set; r16.1: Tile0 RAM if set
    7368:	00 1f       	adc	r16, r16
	add   r20,     r0      ; r21:r20: Tile 1 address to start with
    736a:	40 0d       	add	r20, r0
	adc   r21,     r1      ; 24 cycles
    736c:	51 1d       	adc	r21, r1

	; Select entry point

	ldi   r17,     26
    736e:	1a e1       	ldi	r17, 0x1A	; 26
	mul   r16,     r17     ; Select entry block
    7370:	01 9f       	mul	r16, r17
	mov   r16,     r0
    7372:	00 2d       	mov	r16, r0
	ldi   r17,     3
    7374:	13 e0       	ldi	r17, 0x03	; 3
	mul   r18,     r17     ; Select entry point within block
    7376:	21 9f       	mul	r18, r17
	clr   r17
    7378:	11 27       	eor	r17, r17
	subi  r16,     lo8(-(pm(romrom_e)))
    737a:	02 5f       	subi	r16, 0xF2	; 242
	sbci  r17,     hi8(-(pm(romrom_e)))
    737c:	15 4c       	sbci	r17, 0xC5	; 197
	add   r0,      r16
    737e:	00 0e       	add	r0, r16
	adc   r1,      r17     ; 12 cycles
    7380:	11 1e       	adc	r1, r17

	; Enter scanline loop

	clr   r17              ; End of scanline zero pixel
    7382:	11 27       	eor	r17, r17
	push  r0
    7384:	0f 92       	push	r0
	push  r1
    7386:	1f 92       	push	r1
	ret                    ; 9 cycles (+2 relative to non-scrolling)
    7388:	08 95       	ret

0000738a <__vector_15>:

	; End of scanline using Timer1 overflow

TIMER1_OVF_vect:

	out   PIXOUT,  r17     ; Zero pixel terminating the line
    738a:	18 b9       	out	0x08, r17	; 8

	pop   r0               ; pop & discard OVF interrupt return address
    738c:	0f 90       	pop	r0
	pop   r0               ; pop & discard OVF interrupt return address
    738e:	0f 90       	pop	r0

	; Restore VRAM address (left column)

	pop   YH
    7390:	df 91       	pop	r29
	pop   YL
    7392:	cf 91       	pop	r28

	; Right alignment wait

#if (RESOLUTION_EXT == 0)
	WAIT  r16,     11 + ((30 - SCREEN_TILES_H) * 24)
    7394:	03 e1       	ldi	r16, 0x13	; 19
    7396:	0a 95       	dec	r16
    7398:	f1 f7       	brne	.-4      	; 0x7396 <__vector_15+0xc>
    739a:	00 c0       	rjmp	.+0      	; 0x739c <__vector_15+0x12>
	WAIT  r16,     27 + ((32 - SCREEN_TILES_H) * 22)
#endif

	; Next line & row logic

	inc   r22              ; Line counter within tile row
    739c:	63 95       	inc	r22
	dec   r8               ; Total remaining scanlines counter
    739e:	8a 94       	dec	r8
	breq  text_frame_end
    73a0:	f9 f0       	breq	.+62     	; 0x73e0 <text_frame_end>

	cpi   r22,     TILE_HEIGHT ; At last char line?
    73a2:	68 30       	cpi	r22, 0x08	; 8
	breq  next_tile_row
    73a4:	29 f0       	breq	.+10     	; 0x73b0 <next_tile_row>

	; Wait to align with next_tile_row instructions (+1 cycle for the breq)

	WAIT  r16,     23
    73a6:	07 e0       	ldi	r16, 0x07	; 7
    73a8:	0a 95       	dec	r16
    73aa:	f1 f7       	brne	.-4      	; 0x73a8 <__vector_15+0x1e>
    73ac:	00 c0       	rjmp	.+0      	; 0x73ae <__vector_15+0x24>
	rjmp  next_tile_line
    73ae:	a6 cf       	rjmp	.-180    	; 0x72fc <next_tile_line>

000073b0 <next_tile_row>:

next_tile_row:

	clr   r22              ; Clear line counter for next tile row
    73b0:	66 27       	eor	r22, r22

	; Increment VRAM pointer for next row

#if (SCROLLING != 0)

	mov   r16,     YL
    73b2:	0c 2f       	mov	r16, r28
	andi  r16,     0x7
    73b4:	07 70       	andi	r16, 0x07	; 7
	cpi   r16,     0x7
    73b6:	07 30       	cpi	r16, 0x07	; 7
	breq  .+4
    73b8:	11 f0       	breq	.+4      	; 0x73be <next_tile_row+0xe>
	inc   YL               ; Within a 8 tile tall block
    73ba:	c3 95       	inc	r28
	rjmp  .+4
    73bc:	02 c0       	rjmp	.+4      	; 0x73c2 <next_tile_row+0x12>
	andi  YL,      0xF8    ; Crossing a 8 tile tall block boundary
    73be:	c8 7f       	andi	r28, 0xF8	; 248
	inc   YH
    73c0:	d3 95       	inc	r29

	dec   r24              ; Tile rows until wraparound
    73c2:	8a 95       	dec	r24
	brne  .+2
    73c4:	09 f4       	brne	.+2      	; 0x73c8 <next_tile_row+0x18>
	movw  YL,      r12     ; Load wrap to address
    73c6:	e6 01       	movw	r28, r12

#endif

	; Check end of overlay section

	dec   r19              ; At end, load main section params
    73c8:	3a 95       	dec	r19
	brne  .+2
    73ca:	09 f4       	brne	.+2      	; 0x73ce <next_tile_row+0x1e>
	mov   r22,     r23     ; Main section begin line counter
    73cc:	67 2f       	mov	r22, r23
	brne  .+2
    73ce:	09 f4       	brne	.+2      	; 0x73d2 <next_tile_row+0x22>
	movw  YL,      r10     ; Main section begin VRAM adress
    73d0:	e5 01       	movw	r28, r10
#if (SCROLLING != 0)
	brne  .+2
    73d2:	09 f4       	brne	.+2      	; 0x73d6 <next_tile_row+0x26>
	mov   r24,     r15     ; Main section remaining tile rows before Y wrapping
    73d4:	8f 2d       	mov	r24, r15
	brne  .+2
    73d6:	09 f4       	brne	.+2      	; 0x73da <next_tile_row+0x2a>
	mov   r9,      r25     ; Main section scrollX
    73d8:	99 2e       	mov	r9, r25
#else
	rjmp  .
	rjmp  .
#endif
	brne  .+2
    73da:	09 f4       	brne	.+2      	; 0x73de <next_tile_row+0x2e>
	movw  XL,      r6      ; Main section ROM tileset
    73dc:	d3 01       	movw	r26, r6

	rjmp next_tile_line
    73de:	8e cf       	rjmp	.-228    	; 0x72fc <next_tile_line>

000073e0 <text_frame_end>:

text_frame_end:

	WAIT  r18,     48
    73e0:	20 e1       	ldi	r18, 0x10	; 16
    73e2:	2a 95       	dec	r18
    73e4:	f1 f7       	brne	.-4      	; 0x73e2 <text_frame_end+0x2>

	; Restore Timer1 to the value it should normally have at this point

	ldi   r16,     hi8(101 - TIMER1_DISPLACE)
    73e6:	00 e0       	ldi	r16, 0x00	; 0
	sts   _SFR_MEM_ADDR(TCNT1H), r16
    73e8:	00 93 85 00 	sts	0x0085, r16
	ldi   r16,     lo8(101 - TIMER1_DISPLACE)
    73ec:	0c e2       	ldi	r16, 0x2C	; 44
	sts   _SFR_MEM_ADDR(TCNT1L), r16
    73ee:	00 93 84 00 	sts	0x0084, r16

	rcall hsync_pulse      ; 145
    73f2:	41 d3       	rcall	.+1666   	; 0x7a76 <hsync_pulse>

#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
	clr   r1
    73f4:	11 24       	eor	r1, r1
	call  RestoreBackground
    73f6:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <RestoreBackground>
#endif

	; Set VSync flag & flip field

	lds   ZL,      sync_flags
    73fa:	e0 91 ba 0c 	lds	r30, 0x0CBA
	ldi   r20,     SYNC_FLAG_FIELD
    73fe:	42 e0       	ldi	r20, 0x02	; 2
	ori   ZL,      SYNC_FLAG_VSYNC
    7400:	e1 60       	ori	r30, 0x01	; 1
	eor   ZL,      r20
    7402:	e4 27       	eor	r30, r20
	sts   sync_flags, ZL
    7404:	e0 93 ba 0c 	sts	0x0CBA, r30

	; Restore Timer 1's operation mode

	ldi   r16,     (1 << OCF1B) + (1 << OCF1A) + (1 << TOV1)
    7408:	07 e0       	ldi	r16, 0x07	; 7
	sts   _SFR_MEM_ADDR(TIFR1), r16  ; Clear any pending timer int
    740a:	00 93 36 00 	sts	0x0036, r16

	ldi   r16,     (1 << WGM12) + (1 << CS10)
    740e:	09 e0       	ldi	r16, 0x09	; 9
	sts   _SFR_MEM_ADDR(TCCR1B), r16 ; Switch back to timer1 CTC mode (mode 4)
    7410:	00 93 81 00 	sts	0x0081, r16

	ldi   r16,     (1 << OCIE1A)
    7414:	02 e0       	ldi	r16, 0x02	; 2
	sts   _SFR_MEM_ADDR(TIMSK1), r16 ; Restore ints on compare match
    7416:	00 93 6f 00 	sts	0x006F, r16

	ret
    741a:	08 95       	ret

0000741c <romrom_e>:
	; Left side entry blocks for 1-8 pixels. Each pixel is 3 words, and a
	; complete block is 26 words (8 * 3 + 2 words). Entry is performed by
	; a ret (pushing the appropriate entry address on stack).

romrom_e:
	rjmp  .
    741c:	00 c0       	rjmp	.+0      	; 0x741e <romrom_e+0x2>
	lpm   r16,     Z+
    741e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7420:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7422:	00 c0       	rjmp	.+0      	; 0x7424 <romrom_e+0x8>
#else
	nop
#endif
	lpm   r16,     Z+
    7424:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7426:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7428:	00 c0       	rjmp	.+0      	; 0x742a <romrom_e+0xe>
	lpm   r16,     Z+
    742a:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    742c:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    742e:	00 c0       	rjmp	.+0      	; 0x7430 <romrom_e+0x14>
#else
	nop
#endif
	lpm   r16,     Z+
    7430:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7432:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7434:	00 c0       	rjmp	.+0      	; 0x7436 <romrom_e+0x1a>
	lpm   r16,     Z+
    7436:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    7438:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    743a:	00 c0       	rjmp	.+0      	; 0x743c <romrom_e+0x20>
#else
	nop
#endif
	lpm   r16,     Z+
    743c:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    743e:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7440:	00 c0       	rjmp	.+0      	; 0x7442 <romrom_e+0x26>
	lpm   r16,     Z+
    7442:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7444:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	nop
    7446:	00 00       	nop
#endif
	lpm   r16,     Z+
    7448:	05 91       	lpm	r16, Z+
	movw  ZL,      r20
    744a:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    744c:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    744e:	56 c0       	rjmp	.+172    	; 0x74fc <romloop_px0>

00007450 <romram_e>:
#if (RESOLUTION_EXT != 0)
	nop
#endif

romram_e:
	rjmp  .
    7450:	00 c0       	rjmp	.+0      	; 0x7452 <romram_e+0x2>
	lpm   r16,     Z+
    7452:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7454:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7456:	00 c0       	rjmp	.+0      	; 0x7458 <romram_e+0x8>
#else
	nop
#endif
	lpm   r16,     Z+
    7458:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    745a:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    745c:	00 c0       	rjmp	.+0      	; 0x745e <romram_e+0xe>
	lpm   r16,     Z+
    745e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    7460:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7462:	00 c0       	rjmp	.+0      	; 0x7464 <romram_e+0x14>
#else
	nop
#endif
	lpm   r16,     Z+
    7464:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7466:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7468:	00 c0       	rjmp	.+0      	; 0x746a <romram_e+0x1a>
	lpm   r16,     Z+
    746a:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    746c:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    746e:	00 c0       	rjmp	.+0      	; 0x7470 <romram_e+0x20>
#else
	nop
#endif
	lpm   r16,     Z+
    7470:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7472:	08 b9       	out	0x08, r16	; 8
	rjmp  .
    7474:	00 c0       	rjmp	.+0      	; 0x7476 <romram_e+0x26>
	lpm   r16,     Z+
    7476:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7478:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	nop
    747a:	00 00       	nop
#endif
	lpm   r16,     Z+
    747c:	05 91       	lpm	r16, Z+
	movw  ZL,      r20
    747e:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    7480:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    7482:	59 c0       	rjmp	.+178    	; 0x7536 <ramloop_px0>

00007484 <ramrom_e>:
#if (RESOLUTION_EXT != 0)
	nop
#endif

ramrom_e:
	lpm   r16,     Z       ; Dummy load (nop)
    7484:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    7486:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    7488:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    748a:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    748c:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    748e:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    7490:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    7492:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    7494:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    7496:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    7498:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    749a:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    749c:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    749e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    74a0:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74a2:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74a4:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    74a6:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74a8:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74aa:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74ac:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74ae:	00 c0       	rjmp	.+0      	; 0x74b0 <ramrom_e+0x2c>
#else
	nop
#endif
	ld    r16,     Z+
    74b0:	01 91       	ld	r16, Z+
	movw  ZL,      r20
    74b2:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    74b4:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    74b6:	22 c0       	rjmp	.+68     	; 0x74fc <romloop_px0>

000074b8 <ramram_e>:

ramram_e:
	lpm   r16,     Z       ; Dummy load (nop)
    74b8:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74ba:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    74bc:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74be:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74c0:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    74c2:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74c4:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74c6:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    74c8:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74ca:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74cc:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    74ce:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74d0:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74d2:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    74d4:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    74d6:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif
	ld    r16,     Z+
    74d8:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    74da:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    74dc:	04 91       	lpm	r16, Z
	ld    r16,     Z+
    74de:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74e0:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    74e2:	00 c0       	rjmp	.+0      	; 0x74e4 <ramram_e+0x2c>
#else
	nop
#endif
	ld    r16,     Z+
    74e4:	01 91       	ld	r16, Z+
	movw  ZL,      r20
    74e6:	fa 01       	movw	r30, r20
	out   PIXOUT,  r16     ; Pixel 7
    74e8:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    74ea:	25 c0       	rjmp	.+74     	; 0x7536 <ramloop_px0>

000074ec <romloop>:
	; interval will be turned into 7 for termination (3 cycles IT latency
	; and 3 cycles JMP in the generated interrupt entry table before the
	; zero pixel output).

romloop:
	lpm   r16,     Z+
    74ec:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    74ee:	08 b9       	out	0x08, r16	; 8
	add   r0,      r2      ; Add tile table address + row offset lsb
    74f0:	02 0c       	add	r0, r2
#if (RESOLUTION_EXT == 0)
	nop
    74f2:	00 00       	nop
#endif

	lpm   r16,     Z+
    74f4:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    74f6:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r3      ; Add tile table address + row offset msb
    74f8:	13 1c       	adc	r1, r3
	movw  ZL,      r0      ; Next tile (ROM)
    74fa:	f0 01       	movw	r30, r0

000074fc <romloop_px0>:

romloop_px0:
	lpm   r16,     Z+
    74fc:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    74fe:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	rjmp  .
    7500:	00 c0       	rjmp	.+0      	; 0x7502 <romloop_px0+0x6>
#else
	nop
#endif

	lpm   r16,     Z+
    7502:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7504:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	ld    r20,     Y+      ; Load next tile ID from VRAM
#else
	ld    r20,     Y       ; Load next tile ID from VRAM
    7506:	48 81       	ld	r20, Y
#endif

	lpm   r16,     Z+
    7508:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    750a:	08 b9       	out	0x08, r16	; 8
	rjmp  .
#else
	nop
#endif
#else
	subi  YL,      0xF8    ; Add 8 to VRAM address low
    750c:	c8 5f       	subi	r28, 0xF8	; 248
#if (RESOLUTION_EXT == 0)
	nop
    750e:	00 00       	nop
#endif
#endif

	lpm   r16,     Z+
    7510:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7512:	08 b9       	out	0x08, r16	; 8
	mul   r20,     r14     ; r14 = Width * Height
    7514:	4e 9d       	mul	r20, r14

	lpm   r16,     Z+
    7516:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    7518:	08 b9       	out	0x08, r16	; 8
	cpi   r20,     RAM_TILES_COUNT ; Is tile in RAM or ROM? (RAM tiles have indexes < RAM_TILES_COUNT)
    751a:	4c 31       	cpi	r20, 0x1C	; 28
#if (RESOLUTION_EXT == 0)
	nop
    751c:	00 00       	nop
#endif

	lpm   r16,     Z+
    751e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    7520:	08 b9       	out	0x08, r16	; 8
	brcc  romloop          ; ROM tiles: stay in ROM loop
    7522:	20 f7       	brcc	.-56     	; 0x74ec <romloop>
	nop
    7524:	00 00       	nop

	lpm   r16,     Z+
    7526:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7528:	08 b9       	out	0x08, r16	; 8
	add   r0,      r4      ; Add tile table address + row offset lsb
    752a:	04 0c       	add	r0, r4
#if (RESOLUTION_EXT == 0)
	nop
    752c:	00 00       	nop
#endif

	lpm   r16,     Z+
    752e:	05 91       	lpm	r16, Z+
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7530:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r5      ; Add tile table address + row offset msb
    7532:	15 1c       	adc	r1, r5
	movw  ZL,      r0      ; Next tile (RAM)
    7534:	f0 01       	movw	r30, r0

00007536 <ramloop_px0>:

ramloop_px0:
	nop
    7536:	00 00       	nop

	ld    r16,     Z+
    7538:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 0
    753a:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	ld    r20,     Y+      ; Load next tile ID from VRAM
#else
	ld    r20,     Y       ; Load next tile ID from VRAM
    753c:	48 81       	ld	r20, Y
#endif
#if (RESOLUTION_EXT == 0)
	nop
    753e:	00 00       	nop
#endif

	ld    r16,     Z+
    7540:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 1
    7542:	08 b9       	out	0x08, r16	; 8
#if (SCROLLING == 0)
	nop
#else
	subi  YL,      0xF8    ; Add 8 to VRAM address low
    7544:	c8 5f       	subi	r28, 0xF8	; 248
#endif
	mul   r20,     r14     ; r14 = Width * Height
    7546:	4e 9d       	mul	r20, r14

	ld    r16,     Z+
    7548:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 2
    754a:	08 b9       	out	0x08, r16	; 8
#if (RESOLUTION_EXT == 0)
	lpm   r16,     Z       ; Dummy load (nop)
    754c:	04 91       	lpm	r16, Z
#else
	rjmp  .
#endif

	ld    r16,     Z+
    754e:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 3
    7550:	08 b9       	out	0x08, r16	; 8
	lpm   r16,     Z       ; Dummy load (nop)
    7552:	04 91       	lpm	r16, Z

	ld    r16,     Z+
    7554:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 4
    7556:	08 b9       	out	0x08, r16	; 8
	cpi   r20,     RAM_TILES_COUNT ; Is tile in RAM or ROM? (RAM tiles have indexes < RAM_TILES_COUNT)
    7558:	4c 31       	cpi	r20, 0x1C	; 28
#if (RESOLUTION_EXT == 0)
	rjmp  .
    755a:	00 c0       	rjmp	.+0      	; 0x755c <ramloop_px0+0x26>
#else
	nop
#endif

	ld    r16,     Z+
    755c:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 5
    755e:	08 b9       	out	0x08, r16	; 8
	brcc  ramloop_tr       ; ROM tiles: transfer to ROM loop
    7560:	50 f4       	brcc	.+20     	; 0x7576 <ramloop_tr>
	nop
    7562:	00 00       	nop
	add   r0,      r4      ; Add tile table address + row offset lsb
    7564:	04 0c       	add	r0, r4

	ld    r16,     Z+
    7566:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    7568:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r5      ; Add tile table address + row offset msb
    756a:	15 1c       	adc	r1, r5
#if (RESOLUTION_EXT == 0)
	nop
    756c:	00 00       	nop
#endif

	ld    r16,     Z+
    756e:	01 91       	ld	r16, Z+
	movw  ZL,      r0      ; Next tile (RAM)
    7570:	f0 01       	movw	r30, r0
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7572:	08 b9       	out	0x08, r16	; 8
	rjmp  ramloop_px0
    7574:	e0 cf       	rjmp	.-64     	; 0x7536 <ramloop_px0>

00007576 <ramloop_tr>:

ramloop_tr:
	add   r0,      r2      ; Add tile table address + row offset lsb
    7576:	02 0c       	add	r0, r2

	ld    r16,     Z+
    7578:	01 91       	ld	r16, Z+
	out   PIXOUT,  r16     ; Pixel 6
    757a:	08 b9       	out	0x08, r16	; 8
	adc   r1,      r3      ; Add tile table address + row offset msb
    757c:	13 1c       	adc	r1, r3
#if (RESOLUTION_EXT == 0)
	nop
    757e:	00 00       	nop
#endif

	ld    r16,     Z+
    7580:	01 91       	ld	r16, Z+
	movw  ZL,      r0      ; Next tile (ROM)
    7582:	f0 01       	movw	r30, r0
	out   PIXOUT,  r16     ; Pixel 7, Timer1 OVF IT hits after this when no scrolling
    7584:	08 b9       	out	0x08, r16	; 8
	rjmp  romloop_px0
    7586:	ba cf       	rjmp	.-140    	; 0x74fc <romloop_px0>

00007588 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7588:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    758a:	e0 91 af 0c 	lds	r30, 0x0CAF
	lds ZH,tile_table_hi
    758e:	f0 91 b0 0c 	lds	r31, 0x0CB0
	mul r24,r18
    7592:	82 9f       	mul	r24, r18
	add ZL,r0
    7594:	e0 0d       	add	r30, r0
	adc ZH,r1
    7596:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7598:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    759a:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    759c:	62 9f       	mul	r22, r18
	add XL,r0
    759e:	a0 0d       	add	r26, r0
	adc XH,r1
    75a0:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    75a2:	15 90       	lpm	r1, Z+
    75a4:	1d 92       	st	X+, r1
    75a6:	15 90       	lpm	r1, Z+
    75a8:	1d 92       	st	X+, r1
    75aa:	15 90       	lpm	r1, Z+
    75ac:	1d 92       	st	X+, r1
    75ae:	15 90       	lpm	r1, Z+
    75b0:	1d 92       	st	X+, r1
    75b2:	15 90       	lpm	r1, Z+
    75b4:	1d 92       	st	X+, r1
    75b6:	15 90       	lpm	r1, Z+
    75b8:	1d 92       	st	X+, r1
    75ba:	15 90       	lpm	r1, Z+
    75bc:	1d 92       	st	X+, r1
    75be:	15 90       	lpm	r1, Z+
    75c0:	1d 92       	st	X+, r1
    75c2:	15 90       	lpm	r1, Z+
    75c4:	1d 92       	st	X+, r1
    75c6:	15 90       	lpm	r1, Z+
    75c8:	1d 92       	st	X+, r1
    75ca:	15 90       	lpm	r1, Z+
    75cc:	1d 92       	st	X+, r1
    75ce:	15 90       	lpm	r1, Z+
    75d0:	1d 92       	st	X+, r1
    75d2:	15 90       	lpm	r1, Z+
    75d4:	1d 92       	st	X+, r1
    75d6:	15 90       	lpm	r1, Z+
    75d8:	1d 92       	st	X+, r1
    75da:	15 90       	lpm	r1, Z+
    75dc:	1d 92       	st	X+, r1
    75de:	15 90       	lpm	r1, Z+
    75e0:	1d 92       	st	X+, r1
    75e2:	15 90       	lpm	r1, Z+
    75e4:	1d 92       	st	X+, r1
    75e6:	15 90       	lpm	r1, Z+
    75e8:	1d 92       	st	X+, r1
    75ea:	15 90       	lpm	r1, Z+
    75ec:	1d 92       	st	X+, r1
    75ee:	15 90       	lpm	r1, Z+
    75f0:	1d 92       	st	X+, r1
    75f2:	15 90       	lpm	r1, Z+
    75f4:	1d 92       	st	X+, r1
    75f6:	15 90       	lpm	r1, Z+
    75f8:	1d 92       	st	X+, r1
    75fa:	15 90       	lpm	r1, Z+
    75fc:	1d 92       	st	X+, r1
    75fe:	15 90       	lpm	r1, Z+
    7600:	1d 92       	st	X+, r1
    7602:	15 90       	lpm	r1, Z+
    7604:	1d 92       	st	X+, r1
    7606:	15 90       	lpm	r1, Z+
    7608:	1d 92       	st	X+, r1
    760a:	15 90       	lpm	r1, Z+
    760c:	1d 92       	st	X+, r1
    760e:	15 90       	lpm	r1, Z+
    7610:	1d 92       	st	X+, r1
    7612:	15 90       	lpm	r1, Z+
    7614:	1d 92       	st	X+, r1
    7616:	15 90       	lpm	r1, Z+
    7618:	1d 92       	st	X+, r1
    761a:	15 90       	lpm	r1, Z+
    761c:	1d 92       	st	X+, r1
    761e:	15 90       	lpm	r1, Z+
    7620:	1d 92       	st	X+, r1
    7622:	15 90       	lpm	r1, Z+
    7624:	1d 92       	st	X+, r1
    7626:	15 90       	lpm	r1, Z+
    7628:	1d 92       	st	X+, r1
    762a:	15 90       	lpm	r1, Z+
    762c:	1d 92       	st	X+, r1
    762e:	15 90       	lpm	r1, Z+
    7630:	1d 92       	st	X+, r1
    7632:	15 90       	lpm	r1, Z+
    7634:	1d 92       	st	X+, r1
    7636:	15 90       	lpm	r1, Z+
    7638:	1d 92       	st	X+, r1
    763a:	15 90       	lpm	r1, Z+
    763c:	1d 92       	st	X+, r1
    763e:	15 90       	lpm	r1, Z+
    7640:	1d 92       	st	X+, r1
    7642:	15 90       	lpm	r1, Z+
    7644:	1d 92       	st	X+, r1
    7646:	15 90       	lpm	r1, Z+
    7648:	1d 92       	st	X+, r1
    764a:	15 90       	lpm	r1, Z+
    764c:	1d 92       	st	X+, r1
    764e:	15 90       	lpm	r1, Z+
    7650:	1d 92       	st	X+, r1
    7652:	15 90       	lpm	r1, Z+
    7654:	1d 92       	st	X+, r1
    7656:	15 90       	lpm	r1, Z+
    7658:	1d 92       	st	X+, r1
    765a:	15 90       	lpm	r1, Z+
    765c:	1d 92       	st	X+, r1
    765e:	15 90       	lpm	r1, Z+
    7660:	1d 92       	st	X+, r1
    7662:	15 90       	lpm	r1, Z+
    7664:	1d 92       	st	X+, r1
    7666:	15 90       	lpm	r1, Z+
    7668:	1d 92       	st	X+, r1
    766a:	15 90       	lpm	r1, Z+
    766c:	1d 92       	st	X+, r1
    766e:	15 90       	lpm	r1, Z+
    7670:	1d 92       	st	X+, r1
    7672:	15 90       	lpm	r1, Z+
    7674:	1d 92       	st	X+, r1
    7676:	15 90       	lpm	r1, Z+
    7678:	1d 92       	st	X+, r1
    767a:	15 90       	lpm	r1, Z+
    767c:	1d 92       	st	X+, r1
    767e:	15 90       	lpm	r1, Z+
    7680:	1d 92       	st	X+, r1
    7682:	15 90       	lpm	r1, Z+
    7684:	1d 92       	st	X+, r1
    7686:	15 90       	lpm	r1, Z+
    7688:	1d 92       	st	X+, r1
    768a:	15 90       	lpm	r1, Z+
    768c:	1d 92       	st	X+, r1
    768e:	15 90       	lpm	r1, Z+
    7690:	1d 92       	st	X+, r1
    7692:	15 90       	lpm	r1, Z+
    7694:	1d 92       	st	X+, r1
    7696:	15 90       	lpm	r1, Z+
    7698:	1d 92       	st	X+, r1
    769a:	15 90       	lpm	r1, Z+
    769c:	1d 92       	st	X+, r1
    769e:	15 90       	lpm	r1, Z+
    76a0:	1d 92       	st	X+, r1
	clr r1
    76a2:	11 24       	eor	r1, r1
	ret
    76a4:	08 95       	ret

000076a6 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    76a6:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    76a8:	e0 e5       	ldi	r30, 0x50	; 80
	ldi ZH,hi8(ram_tiles)
    76aa:	f5 e0       	ldi	r31, 0x05	; 5
	mul r24,r18
    76ac:	82 9f       	mul	r24, r18
	add ZL,r0
    76ae:	e0 0d       	add	r30, r0
	adc ZH,r1
    76b0:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    76b2:	a0 e5       	ldi	r26, 0x50	; 80
	ldi XH,hi8(ram_tiles)
    76b4:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    76b6:	62 9f       	mul	r22, r18
	add XL,r0
    76b8:	a0 0d       	add	r26, r0
	adc XH,r1
    76ba:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    76bc:	11 90       	ld	r1, Z+
    76be:	1d 92       	st	X+, r1
    76c0:	11 90       	ld	r1, Z+
    76c2:	1d 92       	st	X+, r1
    76c4:	11 90       	ld	r1, Z+
    76c6:	1d 92       	st	X+, r1
    76c8:	11 90       	ld	r1, Z+
    76ca:	1d 92       	st	X+, r1
    76cc:	11 90       	ld	r1, Z+
    76ce:	1d 92       	st	X+, r1
    76d0:	11 90       	ld	r1, Z+
    76d2:	1d 92       	st	X+, r1
    76d4:	11 90       	ld	r1, Z+
    76d6:	1d 92       	st	X+, r1
    76d8:	11 90       	ld	r1, Z+
    76da:	1d 92       	st	X+, r1
    76dc:	11 90       	ld	r1, Z+
    76de:	1d 92       	st	X+, r1
    76e0:	11 90       	ld	r1, Z+
    76e2:	1d 92       	st	X+, r1
    76e4:	11 90       	ld	r1, Z+
    76e6:	1d 92       	st	X+, r1
    76e8:	11 90       	ld	r1, Z+
    76ea:	1d 92       	st	X+, r1
    76ec:	11 90       	ld	r1, Z+
    76ee:	1d 92       	st	X+, r1
    76f0:	11 90       	ld	r1, Z+
    76f2:	1d 92       	st	X+, r1
    76f4:	11 90       	ld	r1, Z+
    76f6:	1d 92       	st	X+, r1
    76f8:	11 90       	ld	r1, Z+
    76fa:	1d 92       	st	X+, r1
    76fc:	11 90       	ld	r1, Z+
    76fe:	1d 92       	st	X+, r1
    7700:	11 90       	ld	r1, Z+
    7702:	1d 92       	st	X+, r1
    7704:	11 90       	ld	r1, Z+
    7706:	1d 92       	st	X+, r1
    7708:	11 90       	ld	r1, Z+
    770a:	1d 92       	st	X+, r1
    770c:	11 90       	ld	r1, Z+
    770e:	1d 92       	st	X+, r1
    7710:	11 90       	ld	r1, Z+
    7712:	1d 92       	st	X+, r1
    7714:	11 90       	ld	r1, Z+
    7716:	1d 92       	st	X+, r1
    7718:	11 90       	ld	r1, Z+
    771a:	1d 92       	st	X+, r1
    771c:	11 90       	ld	r1, Z+
    771e:	1d 92       	st	X+, r1
    7720:	11 90       	ld	r1, Z+
    7722:	1d 92       	st	X+, r1
    7724:	11 90       	ld	r1, Z+
    7726:	1d 92       	st	X+, r1
    7728:	11 90       	ld	r1, Z+
    772a:	1d 92       	st	X+, r1
    772c:	11 90       	ld	r1, Z+
    772e:	1d 92       	st	X+, r1
    7730:	11 90       	ld	r1, Z+
    7732:	1d 92       	st	X+, r1
    7734:	11 90       	ld	r1, Z+
    7736:	1d 92       	st	X+, r1
    7738:	11 90       	ld	r1, Z+
    773a:	1d 92       	st	X+, r1
    773c:	11 90       	ld	r1, Z+
    773e:	1d 92       	st	X+, r1
    7740:	11 90       	ld	r1, Z+
    7742:	1d 92       	st	X+, r1
    7744:	11 90       	ld	r1, Z+
    7746:	1d 92       	st	X+, r1
    7748:	11 90       	ld	r1, Z+
    774a:	1d 92       	st	X+, r1
    774c:	11 90       	ld	r1, Z+
    774e:	1d 92       	st	X+, r1
    7750:	11 90       	ld	r1, Z+
    7752:	1d 92       	st	X+, r1
    7754:	11 90       	ld	r1, Z+
    7756:	1d 92       	st	X+, r1
    7758:	11 90       	ld	r1, Z+
    775a:	1d 92       	st	X+, r1
    775c:	11 90       	ld	r1, Z+
    775e:	1d 92       	st	X+, r1
    7760:	11 90       	ld	r1, Z+
    7762:	1d 92       	st	X+, r1
    7764:	11 90       	ld	r1, Z+
    7766:	1d 92       	st	X+, r1
    7768:	11 90       	ld	r1, Z+
    776a:	1d 92       	st	X+, r1
    776c:	11 90       	ld	r1, Z+
    776e:	1d 92       	st	X+, r1
    7770:	11 90       	ld	r1, Z+
    7772:	1d 92       	st	X+, r1
    7774:	11 90       	ld	r1, Z+
    7776:	1d 92       	st	X+, r1
    7778:	11 90       	ld	r1, Z+
    777a:	1d 92       	st	X+, r1
    777c:	11 90       	ld	r1, Z+
    777e:	1d 92       	st	X+, r1
    7780:	11 90       	ld	r1, Z+
    7782:	1d 92       	st	X+, r1
    7784:	11 90       	ld	r1, Z+
    7786:	1d 92       	st	X+, r1
    7788:	11 90       	ld	r1, Z+
    778a:	1d 92       	st	X+, r1
    778c:	11 90       	ld	r1, Z+
    778e:	1d 92       	st	X+, r1
    7790:	11 90       	ld	r1, Z+
    7792:	1d 92       	st	X+, r1
    7794:	11 90       	ld	r1, Z+
    7796:	1d 92       	st	X+, r1
    7798:	11 90       	ld	r1, Z+
    779a:	1d 92       	st	X+, r1
    779c:	11 90       	ld	r1, Z+
    779e:	1d 92       	st	X+, r1
    77a0:	11 90       	ld	r1, Z+
    77a2:	1d 92       	st	X+, r1
    77a4:	11 90       	ld	r1, Z+
    77a6:	1d 92       	st	X+, r1
    77a8:	11 90       	ld	r1, Z+
    77aa:	1d 92       	st	X+, r1
    77ac:	11 90       	ld	r1, Z+
    77ae:	1d 92       	st	X+, r1
    77b0:	11 90       	ld	r1, Z+
    77b2:	1d 92       	st	X+, r1
    77b4:	11 90       	ld	r1, Z+
    77b6:	1d 92       	st	X+, r1
    77b8:	11 90       	ld	r1, Z+
    77ba:	1d 92       	st	X+, r1
	clr r1
    77bc:	11 24       	eor	r1, r1
	ret
    77be:	08 95       	ret

000077c0 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    77c0:	e0 91 a5 0c 	lds	r30, 0x0CA5
	mov   r24,     ZL
    77c4:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    77c6:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    77c8:	e8 0f       	add	r30, r24
	clr   ZH
    77ca:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    77cc:	e0 5b       	subi	r30, 0xB0	; 176
	sbci  ZH,      hi8(-(ram_tiles_restore))
    77ce:	f3 4f       	sbci	r31, 0xF3	; 243

	lds   r0,      free_tile_index
    77d0:	00 90 a4 0c 	lds	r0, 0x0CA4
	sub   r24,     r0
    77d4:	80 19       	sub	r24, r0
	brcc  rbg_exit
    77d6:	30 f4       	brcc	.+12     	; 0x77e4 <rbg_exit>

000077d8 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    77d8:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    77da:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    77dc:	01 90       	ld	r0, Z+
	st    X,       r0
    77de:	0c 92       	st	X, r0
	inc   r24
    77e0:	83 95       	inc	r24
	brne  rbg_loop
    77e2:	d1 f7       	brne	.-12     	; 0x77d8 <rbg_loop>

000077e4 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    77e4:	08 95       	ret

000077e6 <BlitSpritePart>:

bsp_srom:

	clt
#endif
	ldi   r25,     4 * 2
    77e6:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    77e8:	79 9f       	mul	r23, r25
	mov   XL,      r1
    77ea:	a1 2d       	mov	r26, r1
	clr   XH
    77ec:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    77ee:	a9 55       	subi	r26, 0x59	; 89
	sbci  XH,      hi8(-(sprites_tile_banks))
    77f0:	b3 4f       	sbci	r27, 0xF3	; 243
	ld    ZL,      X+
    77f2:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    77f4:	fd 91       	ld	r31, X+

000077f6 <bsp_send>:

bsp_send:

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    77f6:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    77f8:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    77fa:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    77fc:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    77fe:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7800:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7802:	a0 5b       	subi	r26, 0xB0	; 176
	sbci  XH,      hi8(-(ram_tiles))
    7804:	ba 4f       	sbci	r27, 0xFA	; 250
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7806:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    7808:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    780a:	09 c0       	rjmp	.+18     	; 0x781e <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    780c:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    780e:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7810:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7812:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7814:	0a c0       	rjmp	.+20     	; 0x782a <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7816:	17 96       	adiw	r26, 0x07	; 7

00007818 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    7818:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    781a:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    781c:	08 c0       	rjmp	.+16     	; 0x782e <x_check_end>

0000781e <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    781e:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7820:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7822:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7824:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7826:	f8 cf       	rjmp	.-16     	; 0x7818 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    7828:	11 97       	sbiw	r26, 0x01	; 1

0000782a <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    782a:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    782c:	b9 1f       	adc	r27, r25

0000782e <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    782e:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7830:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7832:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7834:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7836:	09 c0       	rjmp	.+18     	; 0x784a <y_2nd_tile>

	mul   r22,     r19
    7838:	63 9f       	mul	r22, r19
	add   XL,      r0
    783a:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    783c:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    783e:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7840:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7842:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7844:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7846:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    7848:	08 c0       	rjmp	.+16     	; 0x785a <y_check_end>

0000784a <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    784a:	13 2e       	mov	r1, r19
	dec   r1
    784c:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    784e:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7850:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7852:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7854:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7856:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    7858:	13 2e       	mov	r1, r19

0000785a <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    785a:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    785c:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    785e:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    7860:	05 c0       	rjmp	.+10     	; 0x786c <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    7862:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7864:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7866:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    7868:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    786a:	04 c0       	rjmp	.+8      	; 0x7874 <x_diff_end>

0000786c <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    786c:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    786e:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    7870:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    7872:	6f ef       	ldi	r22, 0xFF	; 255

00007874 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7874:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7876:	04 2e       	mov	r0, r20
	lsr   r20
    7878:	46 95       	lsr	r20
#if (SPRITE_RAM_ENABLE != 0)
	brts  bsp_ramloop      ; T flag set: RAM loop, clear: ROM loop
#endif
	brcc  x_loop1          ; ROM sprite loop entry
    787a:	30 f4       	brcc	.+12     	; 0x7888 <x_loop1>
	breq  x_loopx
    787c:	61 f0       	breq	.+24     	; 0x7896 <x_loopx>

0000787e <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    787e:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7880:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7882:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7884:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7886:	b7 1f       	adc	r27, r23

00007888 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7888:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    788a:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    788c:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    788e:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7890:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    7892:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    7894:	a1 f7       	brne	.-24     	; 0x787e <x_loop0>

00007896 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7896:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7898:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    789a:	2c 93       	st	X, r18

	dec   r1
    789c:	1a 94       	dec	r1
	breq  loop_e
    789e:	49 f0       	breq	.+18     	; 0x78b2 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    78a0:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    78a2:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    78a4:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    78a6:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    78a8:	40 2d       	mov	r20, r0
	lsr   r20
    78aa:	46 95       	lsr	r20
	brcc  x_loop1
    78ac:	68 f7       	brcc	.-38     	; 0x7888 <x_loop1>
	brne  x_loop0
    78ae:	39 f7       	brne	.-50     	; 0x787e <x_loop0>
	rjmp  x_loopx
    78b0:	f2 cf       	rjmp	.-28     	; 0x7896 <x_loopx>

000078b2 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    78b2:	08 95       	ret

000078b4 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    78b4:	0f 92       	push	r0
	push  r1
    78b6:	1f 92       	push	r1
	push  ZL
    78b8:	ef 93       	push	r30
	push  ZH
    78ba:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    78bc:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    78be:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    78c2:	ff 93       	push	r31

	sbrc  ZL,      2
    78c4:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    78c6:	04 c0       	rjmp	.+8      	; 0x78d0 <__vector_13+0x1c>
	sbrc  ZL,      1
    78c8:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    78ca:	02 c0       	rjmp	.+4      	; 0x78d0 <__vector_13+0x1c>
	nop
    78cc:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    78ce:	00 c0       	rjmp	.+0      	; 0x78d0 <__vector_13+0x1c>
	sbrs  ZL,      0
    78d0:	e0 ff       	sbrs	r30, 0
	rjmp  .
    78d2:	00 c0       	rjmp	.+0      	; 0x78d4 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    78d4:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    78d8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    78da:	e0 93 b9 0c 	sts	0x0CB9, r30

	;process sync phases
	lds ZH,sync_phase
    78de:	f0 91 b8 0c 	lds	r31, 0x0CB8
	sbrc ZH,0
    78e2:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    78e4:	51 c0       	rjmp	.+162    	; 0x7988 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    78e6:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    78e8:	98 f0       	brcs	.+38     	; 0x7910 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    78ea:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    78ec:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    78f0:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    78f2:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    78f6:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    78f8:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    78fa:	26 f4       	brtc	.+8      	; 0x7904 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    78fc:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    78fe:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <update_sound>
	rjmp sync_end
    7902:	b2 c0       	rjmp	.+356    	; 0x7a68 <sync_end>

00007904 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7904:	e5 e1       	ldi	r30, 0x15	; 21
    7906:	ea 95       	dec	r30
    7908:	f1 f7       	brne	.-4      	; 0x7906 <sync_pre_eq_no_sound_update+0x2>
    790a:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    790c:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    790e:	ac c0       	rjmp	.+344    	; 0x7a68 <sync_end>

00007910 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7910:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7912:	08 f1       	brcs	.+66     	; 0x7956 <sync_post_eq>

	rjmp .
    7914:	00 c0       	rjmp	.+0      	; 0x7916 <sync_eq+0x6>
	rjmp .
    7916:	00 c0       	rjmp	.+0      	; 0x7918 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7918:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    791a:	e0 fb       	bst	r30, 0
	ldi ZL,4
    791c:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    791e:	16 f4       	brtc	.+4      	; 0x7924 <sync_eq_skip>
	
	call update_sound
    7920:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <update_sound>

00007924 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7924:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7926:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    792a:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    792c:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7930:	9b c0       	rjmp	.+310    	; 0x7a68 <sync_end>

00007932 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7932:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7934:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7938:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    793a:	04 c0       	rjmp	.+8      	; 0x7944 <__vector_14+0x12>
	sbrc  ZL,      1
    793c:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    793e:	02 c0       	rjmp	.+4      	; 0x7944 <__vector_14+0x12>
	nop
    7940:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7942:	00 c0       	rjmp	.+0      	; 0x7944 <__vector_14+0x12>
	sbrs  ZL,      0
    7944:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7946:	00 c0       	rjmp	.+0      	; 0x7948 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    7948:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    794a:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    794c:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    794e:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7952:	ef 91       	pop	r30
	reti
    7954:	18 95       	reti

00007956 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7956:	00 c0       	rjmp	.+0      	; 0x7958 <sync_post_eq+0x2>

	bst ZL,0
    7958:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    795a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    795c:	26 f4       	brtc	.+8      	; 0x7966 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    795e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7960:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <update_sound>
	rjmp sync_pre_eq_cont
    7964:	05 c0       	rjmp	.+10     	; 0x7970 <sync_pre_eq_cont>

00007966 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7966:	e5 e1       	ldi	r30, 0x15	; 21
    7968:	ea 95       	dec	r30
    796a:	f1 f7       	brne	.-4      	; 0x7968 <sync_post_eq_no_sound_update+0x2>
    796c:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    796e:	28 9a       	sbi	0x05, 0	; 5

00007970 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7970:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    7974:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7976:	09 f0       	breq	.+2      	; 0x797a <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7978:	77 c0       	rjmp	.+238    	; 0x7a68 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    797a:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    797c:	e0 93 b9 0c 	sts	0x0CB9, r30
	ldi ZL,1
    7980:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7982:	e0 93 b8 0c 	sts	0x0CB8, r30
	
	rjmp sync_end
    7986:	70 c0       	rjmp	.+224    	; 0x7a68 <sync_end>

00007988 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7988:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    798a:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    798e:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7990:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7994:	00 c0       	rjmp	.+0      	; 0x7996 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7996:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7998:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    799a:	00 c0       	rjmp	.+0      	; 0x799c <sync_hsync+0x14>
	call update_sound
    799c:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    79a0:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79a2:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    79a6:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    79a8:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cp ZL,ZH
    79ac:	ef 17       	cp	r30, r31
	brsh no_render
    79ae:	d8 f4       	brcc	.+54     	; 0x79e6 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    79b0:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    79b2:	00 90 bf 0c 	lds	r0, 0x0CBF
	sub ZH,r0				
    79b6:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    79b8:	00 90 c0 0c 	lds	r0, 0x0CC0
	sub ZH,r0			
    79bc:	f0 19       	sub	r31, r0
	cp ZL,ZH
    79be:	ef 17       	cp	r30, r31
	brlo no_render
    79c0:	90 f0       	brcs	.+36     	; 0x79e6 <no_render>

	;push r1-r29
	ldi ZL,29
    79c2:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    79c4:	ff 27       	eor	r31, r31

000079c6 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    79c6:	00 80       	ld	r0, Z
	push r0
    79c8:	0f 92       	push	r0
	dec ZL
    79ca:	ea 95       	dec	r30
	brne push_loop	
    79cc:	e1 f7       	brne	.-8      	; 0x79c6 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    79ce:	0d e0       	ldi	r16, 0x0D	; 13
    79d0:	0a 95       	dec	r16
    79d2:	f1 f7       	brne	.-4      	; 0x79d0 <push_loop+0xa>
    79d4:	00 c0       	rjmp	.+0      	; 0x79d6 <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    79d6:	0e 94 11 39 	call	0x7222	; 0x7222 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    79da:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    79dc:	ff 27       	eor	r31, r31

000079de <pop_loop>:
pop_loop:
	pop r0
    79de:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    79e0:	01 92       	st	Z+, r0
	cpi ZL,30
    79e2:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    79e4:	e0 f3       	brcs	.-8      	; 0x79de <pop_loop>

000079e6 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    79e6:	e0 91 b9 0c 	lds	r30, 0x0CB9
	cpi ZL,0
    79ea:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    79ec:	09 f0       	breq	.+2      	; 0x79f0 <no_render+0xa>
	rjmp sync_end
    79ee:	3c c0       	rjmp	.+120    	; 0x7a68 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    79f0:	2f 93       	push	r18
	push r19
    79f2:	3f 93       	push	r19
	push r20
    79f4:	4f 93       	push	r20
	push r21
    79f6:	5f 93       	push	r21
	push r22
    79f8:	6f 93       	push	r22
	push r23
    79fa:	7f 93       	push	r23
	push r24
    79fc:	8f 93       	push	r24
	push r25
    79fe:	9f 93       	push	r25
	push r26
    7a00:	af 93       	push	r26
	push r27
    7a02:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7a04:	78 94       	sei
	clr r1
    7a06:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7a08:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7a0a:	e0 93 b8 0c 	sts	0x0CB8, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7a0e:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7a10:	e0 93 b9 0c 	sts	0x0CB9, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7a14:	80 91 c9 0c 	lds	r24, 0x0CC9
	lds r25,vsync_counter+1
    7a18:	90 91 ca 0c 	lds	r25, 0x0CCA
	adiw r24,1
    7a1c:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7a1e:	80 93 c9 0c 	sts	0x0CC9, r24
	sts vsync_counter+1,r25
    7a22:	90 93 ca 0c 	sts	0x0CCA, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7a26:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,pre_vsync_user_callback+1
    7a2a:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    7a2e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a30:	f1 05       	cpc	r31, r1
	breq .+2 
    7a32:	09 f0       	breq	.+2      	; 0x7a36 <no_render+0x50>
	icall
    7a34:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7a36:	0e 94 e0 3e 	call	0x7dc0	; 0x7dc0 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7a3a:	0e 94 97 4c 	call	0x992e	; 0x992e <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7a3e:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <process_music>
	clr r1
    7a42:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7a44:	e0 91 bd 0c 	lds	r30, 0x0CBD
	lds ZH,post_vsync_user_callback+1
    7a48:	f0 91 be 0c 	lds	r31, 0x0CBE
	cp  ZL,r1
    7a4c:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a4e:	f1 05       	cpc	r31, r1
	breq .+2 
    7a50:	09 f0       	breq	.+2      	; 0x7a54 <no_render+0x6e>
	icall
    7a52:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7a54:	bf 91       	pop	r27
	pop r26
    7a56:	af 91       	pop	r26
	pop r25
    7a58:	9f 91       	pop	r25
	pop r24
    7a5a:	8f 91       	pop	r24
	pop r23
    7a5c:	7f 91       	pop	r23
	pop r22
    7a5e:	6f 91       	pop	r22
	pop r21
    7a60:	5f 91       	pop	r21
	pop r20
    7a62:	4f 91       	pop	r20
	pop r19
    7a64:	3f 91       	pop	r19
	pop r18
    7a66:	2f 91       	pop	r18

00007a68 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7a68:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7a6a:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7a6c:	ff 91       	pop	r31
	pop ZL
    7a6e:	ef 91       	pop	r30
	pop r1
    7a70:	1f 90       	pop	r1
	pop r0
    7a72:	0f 90       	pop	r0
	reti
    7a74:	18 95       	reti

00007a76 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7a76:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7a78:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7a7a:	00 c0       	rjmp	.+0      	; 0x7a7c <hsync_pulse+0x6>
	call update_sound
    7a7c:	0e 94 4c 3d 	call	0x7a98	; 0x7a98 <update_sound>

	lds ZL,sync_pulse
    7a80:	e0 91 b9 0c 	lds	r30, 0x0CB9
	dec ZL
    7a84:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7a86:	e0 93 b9 0c 	sts	0x0CB9, r30

	ret
    7a8a:	08 95       	ret

00007a8c <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:

#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7a8c:	e0 91 d1 0c 	lds	r30, 0x0CD1
	sbrc ZL,0
    7a90:	e0 fd       	sbrc	r30, 0
	call ProcessMusic
    7a92:	0e 94 6b 42 	call	0x84d6	; 0x84d6 <ProcessMusic>
#endif

	ret
    7a96:	08 95       	ret

00007a98 <update_sound>:
; Destroys: Z, r0, r1
;****************************

update_sound:

	push  r18
    7a98:	2f 93       	push	r18
	push  r17
    7a9a:	1f 93       	push	r17
	push  r16
    7a9c:	0f 93       	push	r16

	mov   r18,     ZL
    7a9e:	2e 2f       	mov	r18, r30

	; Mix result is collected in r0:r1 (r0 is the high byte!)

	; Channel 1 (27 cy - 3 for initializing mix. buffer)

	lds   r17,     tr1_pos_frac
    7aa0:	10 91 d5 0c 	lds	r17, 0x0CD5
	lds   ZL,      tr1_pos_lo
    7aa4:	e0 91 d6 0c 	lds	r30, 0x0CD6
	lds   ZH,      tr1_pos_hi
    7aa8:	f0 91 d7 0c 	lds	r31, 0x0CD7
	lds   r16,     tr1_step_lo
    7aac:	00 91 d3 0c 	lds	r16, 0x0CD3
	add   r17,     r16     ; Add step to fractional part of sample pos
    7ab0:	10 0f       	add	r17, r16
	lds   r16,     tr1_step_hi
    7ab2:	00 91 d4 0c 	lds	r16, 0x0CD4
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7ab6:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7ab8:	04 91       	lpm	r16, Z
	sts   tr1_pos_lo, ZL
    7aba:	e0 93 d6 0c 	sts	0x0CD6, r30
	sts   tr1_pos_frac, r17
    7abe:	10 93 d5 0c 	sts	0x0CD5, r17
	lds   r17,     tr1_vol
    7ac2:	10 91 d2 0c 	lds	r17, 0x0CD2
	mulsu r16,     r17     ; (sample * mixing_vol)
    7ac6:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7ac8:	00 08       	sbc	r0, r0

	; Channel 2 (27 cy + 2/3 sync generator + 2 preload)

	lds   r17,     tr2_pos_frac
    7aca:	10 91 db 0c 	lds	r17, 0x0CDB
	lds   ZL,      tr2_pos_lo
    7ace:	e0 91 dc 0c 	lds	r30, 0x0CDC
	lds   ZH,      tr2_pos_hi
    7ad2:	f0 91 dd 0c 	lds	r31, 0x0CDD
	lds   r16,     tr2_step_lo
    7ad6:	00 91 d9 0c 	lds	r16, 0x0CD9
	add   r17,     r16     ; Add step to fractional part of sample pos
    7ada:	10 0f       	add	r17, r16
	lds   r16,     tr2_step_hi
    7adc:	00 91 da 0c 	lds	r16, 0x0CDA
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7ae0:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7ae2:	04 91       	lpm	r16, Z
	sts   tr2_pos_lo, ZL
    7ae4:	e0 93 dc 0c 	sts	0x0CDC, r30
	sts   tr2_pos_frac, r17
    7ae8:	10 93 db 0c 	sts	0x0CDB, r17
	movw  ZL,      r0
    7aec:	f0 01       	movw	r30, r0
	lds   r17,     tr2_vol
    7aee:	10 91 d8 0c 	lds	r17, 0x0CD8
	mulsu r16,     r17     ; (sample * mixing_vol)
    7af2:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7af4:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7af6:	1f 0e       	add	r1, r31
	lds   r17,     tr3_pos_frac
    7af8:	10 91 e1 0c 	lds	r17, 0x0CE1
	;--- Video sync update ( 68 cy LOW pulse) ---
	sbrc  r18,     0
    7afc:	20 fd       	sbrc	r18, 0
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN
    7afe:	28 9a       	sbi	0x05, 0	; 5
	;--------------------------------------------
	adc   r0,      ZL      ; Ajust mix buffer msb
    7b00:	0e 1e       	adc	r0, r30

	; Channel 3 (27 cy - 2 preload)

	lds   ZL,      tr3_pos_lo
    7b02:	e0 91 e2 0c 	lds	r30, 0x0CE2
	lds   ZH,      tr3_pos_hi
    7b06:	f0 91 e3 0c 	lds	r31, 0x0CE3
	lds   r16,     tr3_step_lo
    7b0a:	00 91 df 0c 	lds	r16, 0x0CDF
	add   r17,     r16     ; Add step to fractional part of sample pos
    7b0e:	10 0f       	add	r17, r16
	lds   r16,     tr3_step_hi
    7b10:	00 91 e0 0c 	lds	r16, 0x0CE0
	adc   ZL,      r16     ; Add step to low byte of sample pos
    7b14:	e0 1f       	adc	r30, r16
	lpm   r16,     Z       ; Load sample
    7b16:	04 91       	lpm	r16, Z
	sts   tr3_pos_lo, ZL
    7b18:	e0 93 e2 0c 	sts	0x0CE2, r30
	sts   tr3_pos_frac, r17
    7b1c:	10 93 e1 0c 	sts	0x0CE1, r17
	movw  ZL,      r0
    7b20:	f0 01       	movw	r30, r0
	lds   r17,     tr3_vol
    7b22:	10 91 de 0c 	lds	r17, 0x0CDE
	mulsu r16,     r17     ; (sample * mixing_vol)
    7b26:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7b28:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7b2a:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Ajust mix buffer msb
    7b2c:	0e 1e       	adc	r0, r30

	; Channel 4 - 7/15 bit LFSR (34 cy)

	lds   r16,     tr4_barrel_lo ; Get the LFSR (16 bits barrel shifter)
    7b2e:	00 91 e6 0c 	lds	r16, 0x0CE6
	lds   r17,     tr4_barrel_hi
    7b32:	10 91 e7 0c 	lds	r17, 0x0CE7

	lds   ZH,      tr4_vol ; get the Volume
    7b36:	f0 91 e4 0c 	lds	r31, 0x0CE4
	lsr   ZH               ; Divide it by 2 to get sample for '1'.
    7b3a:	f6 95       	lsr	r31
	clc
    7b3c:	88 94       	clc
	sbrc  r16,     0       ; If the LSB of the LFSR is zero
    7b3e:	00 fd       	sbrc	r16, 0
	neg   ZH               ; then produce sample (negative) for '0' (C set unless zero)
    7b40:	f1 95       	neg	r31
	sbc   ZL,      ZL      ; Sign extend
    7b42:	ee 0b       	sbc	r30, r30
	add   r1,      ZH      ; Add sample to mix buffer lsb
    7b44:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Adjust mix buffer msb
    7b46:	0e 1e       	adc	r0, r30

	lds   ZL,      tr4_divider ; load the divider
    7b48:	e0 91 e8 0c 	lds	r30, 0x0CE8
	subi  ZL,      2       ; Decrement bits 1..7 leaving bit 0 untouched by subtracting 2
    7b4c:	e2 50       	subi	r30, 0x02	; 2
	brcs  ch4_shift        ; if not enough ticks have elapsed then don't shift the LFSR
    7b4e:	20 f0       	brcs	.+8      	; 0x7b58 <ch4_shift>
	lpm   ZL,      Z
    7b50:	e4 91       	lpm	r30, Z
	lpm   ZL,      Z
    7b52:	e4 91       	lpm	r30, Z
	lpm   ZL,      Z
    7b54:	e4 91       	lpm	r30, Z
	rjmp  ch4_end
    7b56:	0a c0       	rjmp	.+20     	; 0x7b6c <ch4_end>

00007b58 <ch4_shift>:

ch4_shift:
	mov   ZL,      r16     ; Perform the actual LFSR shifting by copying low byte of LFSR to a temp for XOR opperation
    7b58:	e0 2f       	mov	r30, r16
	lsr   r17              ; shift the 16 bits of the barrel shifter
    7b5a:	16 95       	lsr	r17
	ror   r16              ; leaving the old bit 0 into Carry (Same bit used to decide +ve or -ve "sample" above)
    7b5c:	07 95       	ror	r16
	eor   ZL,      r16     ; perform the XOR of bit 0 and bit 1
    7b5e:	e0 27       	eor	r30, r16
	bst   ZL,      0       ; Save that XOR'd bit to T
    7b60:	e0 fb       	bst	r30, 0
	bld   r17,     6       ; Write T to the 15th bit of the LFSR (regardless of mode as 7 bit will overwrite it)
    7b62:	16 f9       	bld	r17, 6
	lds   ZL,      tr4_params ; Reload the divider / Parameters which consists of 7 bits of divider + 1 bit of mode
    7b64:	e0 91 e5 0c 	lds	r30, 0x0CE5
	sbrs  ZL,      0       ; If the 7/14 mode bit indicates 7 bit mode then
    7b68:	e0 ff       	sbrs	r30, 0
	bld   r16,     6       ; Store T to the 7th bit of the LFSR
    7b6a:	06 f9       	bld	r16, 6

00007b6c <ch4_end>:

ch4_end:
	sts   tr4_barrel_lo, r16 ; save the LFSR
    7b6c:	00 93 e6 0c 	sts	0x0CE6, r16
	sts   tr4_barrel_hi, r17
    7b70:	10 93 e7 0c 	sts	0x0CE7, r17
	sts   tr4_divider, ZL  ; Save the divider (plus 7/15 mode bit in LSB)
    7b74:	e0 93 e8 0c 	sts	0x0CE8, r30

#if (SOUND_CHANNEL_5_ENABLE != 0)

	; Channel 5 - PCM (45 cy + 2/3 sync generator)

	ldi   r17,     0
    7b78:	10 e0       	ldi	r17, 0x00	; 0
	lds   ZL,      tr5_pos_frac
    7b7a:	e0 91 ed 0c 	lds	r30, 0x0CED
	lds   ZH,      tr5_step_lo
    7b7e:	f0 91 eb 0c 	lds	r31, 0x0CEB
	;--- Video sync update (136 cy LOW pulse) ---
	sbrc  r18,     1
    7b82:	21 fd       	sbrc	r18, 1
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN
    7b84:	28 9a       	sbi	0x05, 0	; 5
	;--------------------------------------------
	add   ZL,      ZH      ; Add fractional part
    7b86:	ef 0f       	add	r30, r31
	sts   tr5_pos_frac, ZL
    7b88:	e0 93 ed 0c 	sts	0x0CED, r30

	lds   ZL,      tr5_pos_lo
    7b8c:	e0 91 ee 0c 	lds	r30, 0x0CEE
	lds   ZH,      tr5_pos_hi
    7b90:	f0 91 ef 0c 	lds	r31, 0x0CEF
	lds   r16,     tr5_step_hi
    7b94:	00 91 ec 0c 	lds	r16, 0x0CEC
	adc   ZL,      r16     ; Add low part
    7b98:	e0 1f       	adc	r30, r16
	adc   ZH,      r17     ; Add high part
    7b9a:	f1 1f       	adc	r31, r17

	lds   r16,     tr5_loop_end_lo
    7b9c:	00 91 f2 0c 	lds	r16, 0x0CF2
	lds   r17,     tr5_loop_end_hi
    7ba0:	10 91 f3 0c 	lds	r17, 0x0CF3
	cp    ZL,      r16
    7ba4:	e0 17       	cp	r30, r16
	cpc   ZH,      r17
    7ba6:	f1 07       	cpc	r31, r17
	brcc  ch5_reset        ; Gone past end of sample
    7ba8:	18 f4       	brcc	.+6      	; 0x7bb0 <ch5_reset>
	lpm   ZL,      Z
    7baa:	e4 91       	lpm	r30, Z
	rjmp  .
    7bac:	00 c0       	rjmp	.+0      	; 0x7bae <ch4_end+0x42>
	rjmp  ch5_nores
    7bae:	06 c0       	rjmp	.+12     	; 0x7bbc <ch5_nores>

00007bb0 <ch5_reset>:

ch5_reset:
	lds   r16,     tr5_loop_len_lo
    7bb0:	00 91 f0 0c 	lds	r16, 0x0CF0
	lds   r17,     tr5_loop_len_hi
    7bb4:	10 91 f1 0c 	lds	r17, 0x0CF1
	sub   ZL,      r16
    7bb8:	e0 1b       	sub	r30, r16
	sbc   ZH,      r17     ; Reset to beginning
    7bba:	f1 0b       	sbc	r31, r17

00007bbc <ch5_nores>:

ch5_nores:
	sts   tr5_pos_lo, ZL
    7bbc:	e0 93 ee 0c 	sts	0x0CEE, r30
	sts   tr5_pos_hi, ZH
    7bc0:	f0 93 ef 0c 	sts	0x0CEF, r31

	lpm   r16,     Z       ; Load sample
    7bc4:	04 91       	lpm	r16, Z
	movw  ZL,      r0
    7bc6:	f0 01       	movw	r30, r0
	lds   r17,     tr5_vol
    7bc8:	10 91 ea 0c 	lds	r17, 0x0CEA
	mulsu r16,     r17     ; (sample * mixing_vol)
    7bcc:	01 03       	mulsu	r16, r17
	sbc   r0,      r0      ; Sign extend
    7bce:	00 08       	sbc	r0, r0
	add   r1,      ZH      ; Add ((sample * vol) >> 8) to mix buffer lsb
    7bd0:	1f 0e       	add	r1, r31
	adc   r0,      ZL      ; Ajust mix buffer msb
    7bd2:	0e 1e       	adc	r0, r30

#endif

	; Restore no longer used registers (5 cy + 2/3 sync generator)

	movw  ZL,      r0      ; Move mix buffer for Final processing
    7bd4:	f0 01       	movw	r30, r0
	pop   r16
    7bd6:	0f 91       	pop	r16
	pop   r17
    7bd8:	1f 91       	pop	r17
	;--------------------------------------------
#endif

	; Final processing (9 cy)

	subi  ZH,      0x80
    7bda:	f0 58       	subi	r31, 0x80	; 128
	sbci  ZL,      0xFF    ; Converts to unsigned
    7bdc:	ef 4f       	sbci	r30, 0xFF	; 255
	brpl  .+6
    7bde:	1a f4       	brpl	.+6      	; 0x7be6 <ch5_nores+0x2a>
	ldi   ZH,      0x00    ; Saturate from bottom to 0x00
    7be0:	f0 e0       	ldi	r31, 0x00	; 0
	nop
    7be2:	00 00       	nop
	rjmp  .+6
    7be4:	03 c0       	rjmp	.+6      	; 0x7bec <ch5_nores+0x30>
	cpi   ZL,      0x00
    7be6:	e0 30       	cpi	r30, 0x00	; 0
	breq  .+2
    7be8:	09 f0       	breq	.+2      	; 0x7bec <ch5_nores+0x30>
	ldi   ZH,      0xFF    ; Saturate from top to 0xFF
    7bea:	ff ef       	ldi	r31, 0xFF	; 255
	sts   _SFR_MEM_ADDR(OCR2A), ZH ; Output sound byte
    7bec:	f0 93 b3 00 	sts	0x00B3, r31

uart_tx_end:

#endif

	pop   r18
    7bf0:	2f 91       	pop	r18

	ret
    7bf2:	08 95       	ret

00007bf4 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7bf4:	80 93 a7 0c 	sts	0x0CA7, r24
	sts sprites_tile_banks+1,r25
    7bf8:	90 93 a8 0c 	sts	0x0CA8, r25
	ret
    7bfc:	08 95       	ret

00007bfe <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7bfe:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7c00:	f4 e0       	ldi	r31, 0x04	; 4

	ldi XL,lo8(vram)
    7c02:	a0 e0       	ldi	r26, 0x00	; 0
	ldi XH,hi8(vram)
    7c04:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7c06:	6c e1       	ldi	r22, 0x1C	; 28

00007c08 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7c08:	6d 93       	st	X+, r22
	sbiw r30,1
    7c0a:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7c0c:	e9 f7       	brne	.-6      	; 0x7c08 <fill_vram_loop>

	clr r1
    7c0e:	11 24       	eor	r1, r1

	ret
    7c10:	08 95       	ret

00007c12 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
	;index formula is vram[((y>>3)*256)+8x+(y&7)]
	
	andi r24,0x1f
    7c12:	8f 71       	andi	r24, 0x1F	; 31
	mov r23,r22
    7c14:	76 2f       	mov	r23, r22
	lsr r22
    7c16:	66 95       	lsr	r22
	lsr r22
    7c18:	66 95       	lsr	r22
	lsr r22			;y>>3
    7c1a:	66 95       	lsr	r22
	ldi r18,8		
    7c1c:	28 e0       	ldi	r18, 0x08	; 8
	mul r24,r18		;x*8
    7c1e:	82 9f       	mul	r24, r18
	movw XL,r0
    7c20:	d0 01       	movw	r26, r0
	subi XL,lo8(-(vram))
    7c22:	a0 50       	subi	r26, 0x00	; 0
	sbci XH,hi8(-(vram))
    7c24:	bf 4f       	sbci	r27, 0xFF	; 255
	add XH,r22		;vram+((y>>3)*256)
    7c26:	b6 0f       	add	r27, r22
	andi r23,7		;y&7	
    7c28:	77 70       	andi	r23, 0x07	; 7
	add XL,r23
    7c2a:	a7 0f       	add	r26, r23
						
	subi r20,~(RAM_TILES_COUNT-1)	
    7c2c:	44 5e       	subi	r20, 0xE4	; 228
	st X,r20
    7c2e:	4c 93       	st	X, r20

	clr r1
    7c30:	11 24       	eor	r1, r1

	ret
    7c32:	08 95       	ret

00007c34 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7c34:	80 93 af 0c 	sts	0x0CAF, r24
	sts tile_table_hi,r25	
    7c38:	90 93 b0 0c 	sts	0x0CB0, r25
	ret
    7c3c:	08 95       	ret

00007c3e <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7c3e:	80 91 ba 0c 	lds	r24, 0x0CBA
	andi r24,SYNC_FLAG_VSYNC
    7c42:	81 70       	andi	r24, 0x01	; 1
	ret
    7c44:	08 95       	ret

00007c46 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7c46:	20 91 ba 0c 	lds	r18, 0x0CBA
	andi r18,~SYNC_FLAG_VSYNC
    7c4a:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7c4c:	20 93 ba 0c 	sts	0x0CBA, r18
	ret
    7c50:	08 95       	ret

00007c52 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7c52:	88 23       	and	r24, r24
	brne rj_p2
    7c54:	29 f4       	brne	.+10     	; 0x7c60 <rj_p2>
		
	lds r24,joypad1_status_lo
    7c56:	80 91 c1 0c 	lds	r24, 0x0CC1
	lds r25,joypad1_status_lo+1
    7c5a:	90 91 c2 0c 	lds	r25, 0x0CC2
	ret
    7c5e:	08 95       	ret

00007c60 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7c60:	80 91 c5 0c 	lds	r24, 0x0CC5
	lds r25,joypad2_status_lo+1	
    7c64:	90 91 c6 0c 	lds	r25, 0x0CC6

	ret
    7c68:	08 95       	ret

00007c6a <SoftReset>:
	; This may happen if the soft reset is called from interrupt, which
	; happens if CONTROLLERS_VSYNC_READ is set nonzero.
	; Note that no "wdr" is used, it is unnecessary. If the watchdog
	; resets right when it was enabled, that's all right.
	
	ldi  ZL,       lo8(_SFR_MEM_ADDR(WDTCSR))
    7c6a:	e0 e6       	ldi	r30, 0x60	; 96
	ldi  ZH,       hi8(_SFR_MEM_ADDR(WDTCSR))
    7c6c:	f0 e0       	ldi	r31, 0x00	; 0
	ld   r24,      Z
    7c6e:	80 81       	ld	r24, Z
	sbrc r24,      WDE     ; Watchdog already enabled?
    7c70:	83 fd       	sbrc	r24, 3
	ret                    ; If so, return doing nothing (let it time out)
    7c72:	08 95       	ret
	ldi  r24,      (1 << WDCE) | (1 << WDE)
    7c74:	88 e1       	ldi	r24, 0x18	; 24
	ldi  r25,      (1 << WDE) ; Enable Watchdog, 16ms timeout
    7c76:	98 e0       	ldi	r25, 0x08	; 8
	cli
    7c78:	f8 94       	cli
	st   Z,        r24
    7c7a:	80 83       	st	Z, r24
	st   Z,        r25
    7c7c:	90 83       	st	Z, r25
	sei
    7c7e:	78 94       	sei
	rjmp .-2               ; Halt user program
    7c80:	ff cf       	rjmp	.-2      	; 0x7c80 <SoftReset+0x16>

00007c82 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7c82:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7c84:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7c86:	f1 f7       	brne	.-4      	; 0x7c84 <WaitUs+0x2>
	nop
    7c88:	00 00       	nop
	sbiw r24,1
    7c8a:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7c8c:	d1 f7       	brne	.-12     	; 0x7c82 <WaitUs>

	ret
    7c8e:	08 95       	ret

00007c90 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7c90:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7c92:	fe cf       	rjmp	.-4      	; 0x7c90 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7c94:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7c96:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7c98:	60 bd       	out	0x20, r22	; 32
   cli
    7c9a:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7c9c:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7c9e:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7ca0:	78 94       	sei
   ret
    7ca2:	08 95       	ret

00007ca4 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7ca4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7ca6:	fe cf       	rjmp	.-4      	; 0x7ca4 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7ca8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7caa:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7cac:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7cae:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7cb0:	80 b5       	in	r24, 0x20	; 32
   sei
    7cb2:	78 94       	sei
   ret
    7cb4:	08 95       	ret

00007cb6 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7cb6:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7cb8:	80 93 b9 0c 	sts	0x0CB9, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7cbc:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7cc0:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7cc4:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7cc8:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7ccc:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7cd0:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7cd4:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7cd8:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7cdc:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7cde:	80 93 81 00 	sts	0x0081, r24

		cli
    7ce2:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7ce4:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7ce6:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7cea:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7cec:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7cf0:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7cf2:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7cf6:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7cfa:	78 94       	sei

00007cfc <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7cfc:	80 91 b9 0c 	lds	r24, 0x0CB9
		cpi r24,8
    7d00:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7d02:	e0 f3       	brcs	.-8      	; 0x7cfc <wait>

		ret
    7d04:	08 95       	ret

00007d06 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7d06:	80 91 cb 0c 	lds	r24, 0x0CCB
		lds r25,random_value+1
    7d0a:	90 91 cc 0c 	lds	r25, 0x0CCC
		ret
    7d0e:	08 95       	ret

00007d10 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7d10:	0f 93       	push	r16
		push r17
    7d12:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7d14:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7d16:	0f 93       	push	r16

		lds r16,sync_pulse
    7d18:	00 91 b9 0c 	lds	r16, 0x0CB9
		inc r16
    7d1c:	03 95       	inc	r16
		sts sync_pulse,r16
    7d1e:	00 93 b9 0c 	sts	0x0CB9, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7d22:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7d24:	08 c0       	rjmp	.+16     	; 0x7d36 <__vector_8+0x26>
		lds r17,random_value
    7d26:	10 91 cb 0c 	lds	r17, 0x0CCB
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d2a:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d2e:	10 27       	eor	r17, r16
		sts random_value,r17
    7d30:	10 93 cb 0c 	sts	0x0CCB, r17
		rjmp 2f
    7d34:	07 c0       	rjmp	.+14     	; 0x7d44 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7d36:	10 91 cc 0c 	lds	r17, 0x0CCC
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7d3a:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7d3e:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7d40:	10 93 cc 0c 	sts	0x0CCC, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7d44:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7d46:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7d4a:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7d4c:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7d4e:	1f 91       	pop	r17
		pop r16
    7d50:	0f 91       	pop	r16
		reti
    7d52:	18 95       	reti

00007d54 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7d54:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7d56:	c8 95       	lpm
    7d58:	c8 95       	lpm
		Wait200ns();
    7d5a:	c8 95       	lpm
    7d5c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7d5e:	12 98       	cbi	0x02, 2	; 2
    7d60:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();

}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7d62:	80 e0       	ldi	r24, 0x00	; 0
    7d64:	90 e0       	ldi	r25, 0x00	; 0
    7d66:	20 e0       	ldi	r18, 0x00	; 0
    7d68:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7d6a:	36 95       	lsr	r19
    7d6c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7d6e:	96 95       	lsr	r25
    7d70:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d72:	c8 95       	lpm
    7d74:	c8 95       	lpm
			Wait200ns();
    7d76:	c8 95       	lpm
    7d78:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7d7a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7d7c:	00 9b       	sbis	0x00, 0	; 0
    7d7e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7d80:	01 9b       	sbis	0x00, 1	; 0
    7d82:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7d84:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d86:	c8 95       	lpm
    7d88:	c8 95       	lpm
			Wait200ns();
    7d8a:	c8 95       	lpm
    7d8c:	c8 95       	lpm
    7d8e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7d90:	61 f7       	brne	.-40     	; 0x7d6a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7d92:	30 93 c2 0c 	sts	0x0CC2, r19
    7d96:	20 93 c1 0c 	sts	0x0CC1, r18
		joypad2_status_lo=p2ButtonsLo;
    7d9a:	90 93 c6 0c 	sts	0x0CC6, r25
    7d9e:	80 93 c5 0c 	sts	0x0CC5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7da2:	80 91 c1 0c 	lds	r24, 0x0CC1
    7da6:	90 91 c2 0c 	lds	r25, 0x0CC2
    7daa:	0f 97       	sbiw	r24, 0x0f	; 15
    7dac:	31 f0       	breq	.+12     	; 0x7dba <ReadButtons+0x66>
    7dae:	80 91 c5 0c 	lds	r24, 0x0CC5
    7db2:	90 91 c6 0c 	lds	r25, 0x0CC6
    7db6:	0f 97       	sbiw	r24, 0x0f	; 15
    7db8:	11 f4       	brne	.+4      	; 0x7dbe <ReadButtons+0x6a>
		SoftReset();
    7dba:	0c 94 35 3e 	jmp	0x7c6a	; 0x7c6a <SoftReset>
    7dbe:	08 95       	ret

00007dc0 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7dc0:	10 92 ff 0c 	sts	0x0CFF, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7dc4:	00 99       	sbic	0x00, 0	; 0
    7dc6:	03 c0       	rjmp	.+6      	; 0x7dce <ReadControllers+0xe>
    7dc8:	81 e0       	ldi	r24, 0x01	; 1
    7dca:	80 93 ff 0c 	sts	0x0CFF, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7dce:	01 99       	sbic	0x00, 1	; 0
    7dd0:	05 c0       	rjmp	.+10     	; 0x7ddc <ReadControllers+0x1c>
    7dd2:	80 91 ff 0c 	lds	r24, 0x0CFF
    7dd6:	82 60       	ori	r24, 0x02	; 2
    7dd8:	80 93 ff 0c 	sts	0x0CFF, r24
			
	//read the standard buttons
	ReadButtons();
    7ddc:	0c 94 aa 3e 	jmp	0x7d54	; 0x7d54 <ReadButtons>

00007de0 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7de0:	cf 93       	push	r28
    7de2:	df 93       	push	r29
    7de4:	c0 e0       	ldi	r28, 0x00	; 0
    7de6:	d0 e0       	ldi	r29, 0x00	; 0
    7de8:	fe 01       	movw	r30, r28
    7dea:	e8 53       	subi	r30, 0x38	; 56
    7dec:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7dee:	64 91       	lpm	r22, Z
    7df0:	ce 01       	movw	r24, r28
    7df2:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <WriteEeprom>
    7df6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7df8:	c0 32       	cpi	r28, 0x20	; 32
    7dfa:	d1 05       	cpc	r29, r1
    7dfc:	a9 f7       	brne	.-22     	; 0x7de8 <FormatEeprom+0x8>
    7dfe:	c0 e2       	ldi	r28, 0x20	; 32
    7e00:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7e02:	6f ef       	ldi	r22, 0xFF	; 255
    7e04:	ce 01       	movw	r24, r28
    7e06:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7e0a:	6f ef       	ldi	r22, 0xFF	; 255
    7e0c:	ce 01       	movw	r24, r28
    7e0e:	01 96       	adiw	r24, 0x01	; 1
    7e10:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7e14:	a0 96       	adiw	r28, 0x20	; 32
    7e16:	c1 15       	cp	r28, r1
    7e18:	88 e0       	ldi	r24, 0x08	; 8
    7e1a:	d8 07       	cpc	r29, r24
    7e1c:	91 f7       	brne	.-28     	; 0x7e02 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7e1e:	df 91       	pop	r29
    7e20:	cf 91       	pop	r28
    7e22:	08 95       	ret

00007e24 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7e24:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7e26:	80 e0       	ldi	r24, 0x00	; 0
    7e28:	90 e0       	ldi	r25, 0x00	; 0
    7e2a:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <ReadEeprom>
    7e2e:	c8 2f       	mov	r28, r24
    7e30:	81 e0       	ldi	r24, 0x01	; 1
    7e32:	90 e0       	ldi	r25, 0x00	; 0
    7e34:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <ReadEeprom>
    7e38:	28 2f       	mov	r18, r24
    7e3a:	30 e0       	ldi	r19, 0x00	; 0
    7e3c:	32 2f       	mov	r19, r18
    7e3e:	22 27       	eor	r18, r18
    7e40:	2c 0f       	add	r18, r28
    7e42:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7e44:	81 e0       	ldi	r24, 0x01	; 1
    7e46:	2a 35       	cpi	r18, 0x5A	; 90
    7e48:	35 45       	sbci	r19, 0x55	; 85
    7e4a:	09 f0       	breq	.+2      	; 0x7e4e <isEepromFormatted+0x2a>
    7e4c:	80 e0       	ldi	r24, 0x00	; 0
}
    7e4e:	cf 91       	pop	r28
    7e50:	08 95       	ret

00007e52 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7e52:	8f 92       	push	r8
    7e54:	9f 92       	push	r9
    7e56:	af 92       	push	r10
    7e58:	bf 92       	push	r11
    7e5a:	cf 92       	push	r12
    7e5c:	df 92       	push	r13
    7e5e:	ef 92       	push	r14
    7e60:	ff 92       	push	r15
    7e62:	0f 93       	push	r16
    7e64:	1f 93       	push	r17
    7e66:	cf 93       	push	r28
    7e68:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7e6a:	fb 01       	movw	r30, r22
    7e6c:	11 82       	std	Z+1, r1	; 0x01
    7e6e:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7e70:	8f 3f       	cpi	r24, 0xFF	; 255
    7e72:	ff ef       	ldi	r31, 0xFF	; 255
    7e74:	9f 07       	cpc	r25, r31
    7e76:	89 f1       	breq	.+98     	; 0x7eda <EepromBlockExists+0x88>
    7e78:	6a 01       	movw	r12, r20
    7e7a:	8b 01       	movw	r16, r22
    7e7c:	7c 01       	movw	r14, r24
    7e7e:	a1 2c       	mov	r10, r1
    7e80:	b1 2c       	mov	r11, r1
    7e82:	c0 e0       	ldi	r28, 0x00	; 0
    7e84:	d3 e0       	ldi	r29, 0x03	; 3
    7e86:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7e88:	c5 01       	movw	r24, r10
    7e8a:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <ReadEeprom>
    7e8e:	88 2e       	mov	r8, r24
    7e90:	c5 01       	movw	r24, r10
    7e92:	01 96       	adiw	r24, 0x01	; 1
    7e94:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <ReadEeprom>
    7e98:	28 2f       	mov	r18, r24
    7e9a:	30 e0       	ldi	r19, 0x00	; 0
    7e9c:	32 2f       	mov	r19, r18
    7e9e:	22 27       	eor	r18, r18
    7ea0:	28 0d       	add	r18, r8
    7ea2:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7ea4:	2e 15       	cp	r18, r14
    7ea6:	3f 05       	cpc	r19, r15
    7ea8:	29 f4       	brne	.+10     	; 0x7eb4 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    7eaa:	f8 01       	movw	r30, r16
    7eac:	b1 82       	std	Z+1, r11	; 0x01
    7eae:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7eb0:	d0 e0       	ldi	r29, 0x00	; 0
    7eb2:	0b c0       	rjmp	.+22     	; 0x7eca <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7eb4:	2f 3f       	cpi	r18, 0xFF	; 255
    7eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    7eb8:	41 f4       	brne	.+16     	; 0x7eca <EepromBlockExists+0x78>
    7eba:	91 10       	cpse	r9, r1
    7ebc:	06 c0       	rjmp	.+12     	; 0x7eca <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    7ebe:	c1 14       	cp	r12, r1
    7ec0:	d1 04       	cpc	r13, r1
    7ec2:	11 f0       	breq	.+4      	; 0x7ec8 <EepromBlockExists+0x76>
    7ec4:	f6 01       	movw	r30, r12
    7ec6:	c0 83       	st	Z, r28
    7ec8:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    7eca:	cf 5f       	subi	r28, 0xFF	; 255
    7ecc:	f0 e2       	ldi	r31, 0x20	; 32
    7ece:	af 0e       	add	r10, r31
    7ed0:	b1 1c       	adc	r11, r1
    7ed2:	c0 34       	cpi	r28, 0x40	; 64
    7ed4:	c9 f6       	brne	.-78     	; 0x7e88 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7ed6:	8d 2f       	mov	r24, r29
    7ed8:	01 c0       	rjmp	.+2      	; 0x7edc <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7eda:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    7edc:	df 91       	pop	r29
    7ede:	cf 91       	pop	r28
    7ee0:	1f 91       	pop	r17
    7ee2:	0f 91       	pop	r16
    7ee4:	ff 90       	pop	r15
    7ee6:	ef 90       	pop	r14
    7ee8:	df 90       	pop	r13
    7eea:	cf 90       	pop	r12
    7eec:	bf 90       	pop	r11
    7eee:	af 90       	pop	r10
    7ef0:	9f 90       	pop	r9
    7ef2:	8f 90       	pop	r8
    7ef4:	08 95       	ret

00007ef6 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7ef6:	ef 92       	push	r14
    7ef8:	ff 92       	push	r15
    7efa:	0f 93       	push	r16
    7efc:	1f 93       	push	r17
    7efe:	cf 93       	push	r28
    7f00:	df 93       	push	r29
    7f02:	00 d0       	rcall	.+0      	; 0x7f04 <EepromWriteBlock+0xe>
    7f04:	1f 92       	push	r1
    7f06:	cd b7       	in	r28, 0x3d	; 61
    7f08:	de b7       	in	r29, 0x3e	; 62
    7f0a:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7f0c:	1a 82       	std	Y+2, r1	; 0x02
    7f0e:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    7f10:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    7f12:	ae 01       	movw	r20, r28
    7f14:	4d 5f       	subi	r20, 0xFD	; 253
    7f16:	5f 4f       	sbci	r21, 0xFF	; 255
    7f18:	be 01       	movw	r22, r28
    7f1a:	6f 5f       	subi	r22, 0xFF	; 255
    7f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    7f1e:	fc 01       	movw	r30, r24
    7f20:	80 81       	ld	r24, Z
    7f22:	91 81       	ldd	r25, Z+1	; 0x01
    7f24:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7f28:	88 23       	and	r24, r24
    7f2a:	11 f0       	breq	.+4      	; 0x7f30 <EepromWriteBlock+0x3a>
    7f2c:	83 30       	cpi	r24, 0x03	; 3
    7f2e:	19 f5       	brne	.+70     	; 0x7f76 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f30:	89 81       	ldd	r24, Y+1	; 0x01
    7f32:	9a 81       	ldd	r25, Y+2	; 0x02
    7f34:	89 2b       	or	r24, r25
    7f36:	49 f4       	brne	.+18     	; 0x7f4a <EepromWriteBlock+0x54>
    7f38:	8b 81       	ldd	r24, Y+3	; 0x03
    7f3a:	88 23       	and	r24, r24
    7f3c:	d9 f0       	breq	.+54     	; 0x7f74 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7f3e:	f0 e2       	ldi	r31, 0x20	; 32
    7f40:	8f 9f       	mul	r24, r31
    7f42:	c0 01       	movw	r24, r0
    7f44:	11 24       	eor	r1, r1
    7f46:	9a 83       	std	Y+2, r25	; 0x02
    7f48:	89 83       	std	Y+1, r24	; 0x01
    7f4a:	78 01       	movw	r14, r16
    7f4c:	20 e2       	ldi	r18, 0x20	; 32
    7f4e:	e2 0e       	add	r14, r18
    7f50:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7f52:	f8 01       	movw	r30, r16
    7f54:	61 91       	ld	r22, Z+
    7f56:	8f 01       	movw	r16, r30
    7f58:	89 81       	ldd	r24, Y+1	; 0x01
    7f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    7f5c:	9c 01       	movw	r18, r24
    7f5e:	2f 5f       	subi	r18, 0xFF	; 255
    7f60:	3f 4f       	sbci	r19, 0xFF	; 255
    7f62:	3a 83       	std	Y+2, r19	; 0x02
    7f64:	29 83       	std	Y+1, r18	; 0x01
    7f66:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7f6a:	0e 15       	cp	r16, r14
    7f6c:	1f 05       	cpc	r17, r15
    7f6e:	89 f7       	brne	.-30     	; 0x7f52 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7f70:	80 e0       	ldi	r24, 0x00	; 0
    7f72:	01 c0       	rjmp	.+2      	; 0x7f76 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f74:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7f76:	0f 90       	pop	r0
    7f78:	0f 90       	pop	r0
    7f7a:	0f 90       	pop	r0
    7f7c:	df 91       	pop	r29
    7f7e:	cf 91       	pop	r28
    7f80:	1f 91       	pop	r17
    7f82:	0f 91       	pop	r16
    7f84:	ff 90       	pop	r15
    7f86:	ef 90       	pop	r14
    7f88:	08 95       	ret

00007f8a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7f8a:	cf 92       	push	r12
    7f8c:	df 92       	push	r13
    7f8e:	ff 92       	push	r15
    7f90:	0f 93       	push	r16
    7f92:	1f 93       	push	r17
    7f94:	cf 93       	push	r28
    7f96:	df 93       	push	r29
    7f98:	00 d0       	rcall	.+0      	; 0x7f9a <EepromReadBlock+0x10>
    7f9a:	cd b7       	in	r28, 0x3d	; 61
    7f9c:	de b7       	in	r29, 0x3e	; 62
    7f9e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7fa0:	40 e0       	ldi	r20, 0x00	; 0
    7fa2:	50 e0       	ldi	r21, 0x00	; 0
    7fa4:	be 01       	movw	r22, r28
    7fa6:	6f 5f       	subi	r22, 0xFF	; 255
    7fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    7faa:	0e 94 29 3f 	call	0x7e52	; 0x7e52 <EepromBlockExists>
    7fae:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7fb0:	81 11       	cpse	r24, r1
    7fb2:	13 c0       	rjmp	.+38     	; 0x7fda <EepromReadBlock+0x50>
    7fb4:	68 01       	movw	r12, r16
    7fb6:	80 e2       	ldi	r24, 0x20	; 32
    7fb8:	c8 0e       	add	r12, r24
    7fba:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    7fbc:	89 81       	ldd	r24, Y+1	; 0x01
    7fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc0:	9c 01       	movw	r18, r24
    7fc2:	2f 5f       	subi	r18, 0xFF	; 255
    7fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    7fc6:	3a 83       	std	Y+2, r19	; 0x02
    7fc8:	29 83       	std	Y+1, r18	; 0x01
    7fca:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <ReadEeprom>
    7fce:	f8 01       	movw	r30, r16
    7fd0:	81 93       	st	Z+, r24
    7fd2:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7fd4:	ec 15       	cp	r30, r12
    7fd6:	fd 05       	cpc	r31, r13
    7fd8:	89 f7       	brne	.-30     	; 0x7fbc <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    7fda:	8f 2d       	mov	r24, r15
    7fdc:	0f 90       	pop	r0
    7fde:	0f 90       	pop	r0
    7fe0:	df 91       	pop	r29
    7fe2:	cf 91       	pop	r28
    7fe4:	1f 91       	pop	r17
    7fe6:	0f 91       	pop	r16
    7fe8:	ff 90       	pop	r15
    7fea:	df 90       	pop	r13
    7fec:	cf 90       	pop	r12
    7fee:	08 95       	ret

00007ff0 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7ff0:	00 97       	sbiw	r24, 0x00	; 0
    7ff2:	21 f0       	breq	.+8      	; 0x7ffc <GetPrngNumber+0xc>
    7ff4:	90 93 cf 0c 	sts	0x0CCF, r25
    7ff8:	80 93 ce 0c 	sts	0x0CCE, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7ffc:	20 91 ce 0c 	lds	r18, 0x0CCE
    8000:	30 91 cf 0c 	lds	r19, 0x0CCF
    8004:	a9 01       	movw	r20, r18
    8006:	56 95       	lsr	r21
    8008:	47 95       	ror	r20
    800a:	56 95       	lsr	r21
    800c:	47 95       	ror	r20
    800e:	c9 01       	movw	r24, r18
    8010:	63 e0       	ldi	r22, 0x03	; 3
    8012:	96 95       	lsr	r25
    8014:	87 95       	ror	r24
    8016:	6a 95       	dec	r22
    8018:	e1 f7       	brne	.-8      	; 0x8012 <GetPrngNumber+0x22>
    801a:	84 27       	eor	r24, r20
    801c:	95 27       	eor	r25, r21
    801e:	82 27       	eor	r24, r18
    8020:	93 27       	eor	r25, r19
    8022:	a9 01       	movw	r20, r18
    8024:	75 e0       	ldi	r23, 0x05	; 5
    8026:	56 95       	lsr	r21
    8028:	47 95       	ror	r20
    802a:	7a 95       	dec	r23
    802c:	e1 f7       	brne	.-8      	; 0x8026 <GetPrngNumber+0x36>
    802e:	84 27       	eor	r24, r20
    8030:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8032:	99 27       	eor	r25, r25
    8034:	86 95       	lsr	r24
    8036:	97 95       	ror	r25
    8038:	88 27       	eor	r24, r24
    803a:	36 95       	lsr	r19
    803c:	27 95       	ror	r18
    803e:	82 2b       	or	r24, r18
    8040:	93 2b       	or	r25, r19
    8042:	90 93 cf 0c 	sts	0x0CCF, r25
    8046:	80 93 ce 0c 	sts	0x0CCE, r24
	return prng_state;   
}
    804a:	08 95       	ret

0000804c <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    804c:	fc 01       	movw	r30, r24
    804e:	67 87       	std	Z+15, r22	; 0x0f
    8050:	08 95       	ret

00008052 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8052:	e2 ed       	ldi	r30, 0xD2	; 210
    8054:	fc e0       	ldi	r31, 0x0C	; 12
    8056:	81 e0       	ldi	r24, 0x01	; 1
    8058:	91 e0       	ldi	r25, 0x01	; 1
    805a:	95 8b       	std	Z+21, r25	; 0x15
    805c:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    805e:	63 8b       	std	Z+19, r22	; 0x13
    8060:	08 95       	ret

00008062 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8062:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8064:	90 81       	ld	r25, Z
    8066:	9f 75       	andi	r25, 0x5F	; 95
    8068:	90 83       	st	Z, r25
    806a:	08 95       	ret

0000806c <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    806c:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    806e:	90 81       	ld	r25, Z
    8070:	90 64       	ori	r25, 0x40	; 64
    8072:	90 83       	st	Z, r25
    8074:	08 95       	ret

00008076 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8076:	fc 01       	movw	r30, r24
    8078:	66 87       	std	Z+14, r22	; 0x0e
    807a:	08 95       	ret

0000807c <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    807c:	fc 01       	movw	r30, r24
    807e:	62 87       	std	Z+10, r22	; 0x0a
    8080:	08 95       	ret

00008082 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8082:	fc 01       	movw	r30, r24
    8084:	63 87       	std	Z+11, r22	; 0x0b
    8086:	08 95       	ret

00008088 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8088:	cf 93       	push	r28
    808a:	df 93       	push	r29
    808c:	ec 01       	movw	r28, r24
    808e:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8090:	29 81       	ldd	r18, Y+1	; 0x01
    8092:	30 e0       	ldi	r19, 0x00	; 0
    8094:	f9 01       	movw	r30, r18
    8096:	ee 0f       	add	r30, r30
    8098:	ff 1f       	adc	r31, r31
    809a:	e8 57       	subi	r30, 0x78	; 120
    809c:	f6 47       	sbci	r31, 0x76	; 118
    809e:	65 91       	lpm	r22, Z+
    80a0:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    80a2:	f9 01       	movw	r30, r18
    80a4:	e4 0f       	add	r30, r20
    80a6:	f1 1d       	adc	r31, r1
    80a8:	47 fd       	sbrc	r20, 7
    80aa:	fa 95       	dec	r31
    80ac:	ee 0f       	add	r30, r30
    80ae:	ff 1f       	adc	r31, r31
    80b0:	e8 57       	subi	r30, 0x78	; 120
    80b2:	f6 47       	sbci	r31, 0x76	; 118
    80b4:	85 91       	lpm	r24, Z+
    80b6:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    80b8:	86 1b       	sub	r24, r22
    80ba:	97 0b       	sbc	r25, r23
    80bc:	68 85       	ldd	r22, Y+8	; 0x08
    80be:	70 e0       	ldi	r23, 0x00	; 0
    80c0:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
	if(delta==0)delta++;
    80c4:	61 15       	cp	r22, r1
    80c6:	71 05       	cpc	r23, r1
    80c8:	11 f4       	brne	.+4      	; 0x80ce <PatchCommand11+0x46>
    80ca:	61 e0       	ldi	r22, 0x01	; 1
    80cc:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    80ce:	ea 81       	ldd	r30, Y+2	; 0x02
    80d0:	86 e0       	ldi	r24, 0x06	; 6
    80d2:	e8 9f       	mul	r30, r24
    80d4:	f0 01       	movw	r30, r0
    80d6:	11 24       	eor	r1, r1
    80d8:	ee 52       	subi	r30, 0x2E	; 46
    80da:	f3 4f       	sbci	r31, 0xF3	; 243
    80dc:	81 81       	ldd	r24, Z+1	; 0x01
    80de:	92 81       	ldd	r25, Z+2	; 0x02
    80e0:	86 0f       	add	r24, r22
    80e2:	97 1f       	adc	r25, r23
    80e4:	92 83       	std	Z+2, r25	; 0x02
    80e6:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    80e8:	7e 83       	std	Y+6, r23	; 0x06
    80ea:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    80ec:	88 81       	ld	r24, Y
    80ee:	88 60       	ori	r24, 0x08	; 8
    80f0:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    80f2:	89 81       	ldd	r24, Y+1	; 0x01
    80f4:	48 0f       	add	r20, r24
    80f6:	4f 83       	std	Y+7, r20	; 0x07
}
    80f8:	df 91       	pop	r29
    80fa:	cf 91       	pop	r28
    80fc:	08 95       	ret

000080fe <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    80fe:	fc 01       	movw	r30, r24
    8100:	60 87       	std	Z+8, r22	; 0x08
    8102:	08 95       	ret

00008104 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8104:	fc 01       	movw	r30, r24
    8106:	64 83       	std	Z+4, r22	; 0x04
    8108:	08 95       	ret

0000810a <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    810a:	fc 01       	movw	r30, r24
    810c:	82 81       	ldd	r24, Z+2	; 0x02
    810e:	0c 94 a7 44 	jmp	0x894e	; 0x894e <SetMixerWave>

00008112 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8112:	fc 01       	movw	r30, r24
	track->note+=param;
    8114:	91 81       	ldd	r25, Z+1	; 0x01
    8116:	69 0f       	add	r22, r25
    8118:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    811a:	82 81       	ldd	r24, Z+2	; 0x02
    811c:	0c 94 90 44 	jmp	0x8920	; 0x8920 <SetMixerNote>

00008120 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8120:	fc 01       	movw	r30, r24
	track->note-=param;
    8122:	91 81       	ldd	r25, Z+1	; 0x01
    8124:	96 1b       	sub	r25, r22
    8126:	69 2f       	mov	r22, r25
    8128:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    812a:	82 81       	ldd	r24, Z+2	; 0x02
    812c:	0c 94 90 44 	jmp	0x8920	; 0x8920 <SetMixerNote>

00008130 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8130:	1f 93       	push	r17
    8132:	cf 93       	push	r28
    8134:	df 93       	push	r29
    8136:	ec 01       	movw	r28, r24
    8138:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    813a:	8a 81       	ldd	r24, Y+2	; 0x02
    813c:	0e 94 90 44 	call	0x8920	; 0x8920 <SetMixerNote>
	track->note=param;
    8140:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8142:	88 81       	ld	r24, Y
    8144:	87 7f       	andi	r24, 0xF7	; 247
    8146:	88 83       	st	Y, r24
}
    8148:	df 91       	pop	r29
    814a:	cf 91       	pop	r28
    814c:	1f 91       	pop	r17
    814e:	08 95       	ret

00008150 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8150:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8152:	14 96       	adiw	r26, 0x04	; 4
    8154:	8c 91       	ld	r24, X
    8156:	14 97       	sbiw	r26, 0x04	; 4
    8158:	88 23       	and	r24, r24
    815a:	19 f1       	breq	.+70     	; 0x81a2 <PatchCommand14+0x52>
    815c:	55 96       	adiw	r26, 0x15	; 21
    815e:	2d 91       	ld	r18, X+
    8160:	3c 91       	ld	r19, X
    8162:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8164:	66 23       	and	r22, r22
    8166:	79 f0       	breq	.+30     	; 0x8186 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8168:	77 27       	eor	r23, r23
    816a:	67 fd       	sbrc	r22, 7
    816c:	70 95       	com	r23
    816e:	6f 5f       	subi	r22, 0xFF	; 255
    8170:	7f 4f       	sbci	r23, 0xFF	; 255
    8172:	ab 01       	movw	r20, r22
    8174:	44 0f       	add	r20, r20
    8176:	55 1f       	adc	r21, r21
    8178:	64 0f       	add	r22, r20
    817a:	75 1f       	adc	r23, r21
    817c:	26 1b       	sub	r18, r22
    817e:	37 0b       	sbc	r19, r23
    8180:	09 c0       	rjmp	.+18     	; 0x8194 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8182:	ef 3f       	cpi	r30, 0xFF	; 255
    8184:	39 f0       	breq	.+14     	; 0x8194 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8186:	23 50       	subi	r18, 0x03	; 3
    8188:	31 09       	sbc	r19, r1
    818a:	f9 01       	movw	r30, r18
    818c:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    818e:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8190:	ed 30       	cpi	r30, 0x0D	; 13
    8192:	b9 f7       	brne	.-18     	; 0x8182 <PatchCommand14+0x32>
    8194:	56 96       	adiw	r26, 0x16	; 22
    8196:	3c 93       	st	X, r19
    8198:	2e 93       	st	-X, r18
    819a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    819c:	81 50       	subi	r24, 0x01	; 1
    819e:	14 96       	adiw	r26, 0x04	; 4
    81a0:	8c 93       	st	X, r24
    81a2:	08 95       	ret

000081a4 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    81a4:	90 93 78 0d 	sts	0x0D78, r25
    81a8:	80 93 77 0d 	sts	0x0D77, r24

	masterVolume=DEFAULT_MASTER_VOL;
    81ac:	8f e6       	ldi	r24, 0x6F	; 111
    81ae:	80 93 7a 0d 	sts	0x0D7A, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    81b2:	10 92 d0 0c 	sts	0x0CD0, r1
    81b6:	e2 e1       	ldi	r30, 0x12	; 18
    81b8:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    81ba:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    81bc:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    81be:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    81c0:	28 e1       	ldi	r18, 0x18	; 24
    81c2:	df 01       	movw	r26, r30
    81c4:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    81c6:	8c 93       	st	X, r24
    81c8:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    81ca:	9c 93       	st	X, r25
    81cc:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    81ce:	1c 92       	st	X, r1
    81d0:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    81d2:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    81d4:	10 82       	st	Z, r1
    81d6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    81d8:	2c 93       	st	X, r18
    81da:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    81dc:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    81de:	8f 5f       	subi	r24, 0xFF	; 255
    81e0:	77 96       	adiw	r30, 0x17	; 23
    81e2:	85 30       	cpi	r24, 0x05	; 5
    81e4:	71 f7       	brne	.-36     	; 0x81c2 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    81e6:	08 95       	ret

000081e8 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    81e8:	e2 e0       	ldi	r30, 0x02	; 2
    81ea:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    81ec:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    81ee:	20 81       	ld	r18, Z
    81f0:	2f 77       	andi	r18, 0x7F	; 127
    81f2:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    81f4:	33 83       	std	Z+3, r19	; 0x03
    81f6:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    81f8:	2d e0       	ldi	r18, 0x0D	; 13
    81fa:	e5 37       	cpi	r30, 0x75	; 117
    81fc:	f2 07       	cpc	r31, r18
    81fe:	b9 f7       	brne	.-18     	; 0x81ee <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8200:	01 96       	adiw	r24, 0x01	; 1
    8202:	90 93 7f 0d 	sts	0x0D7F, r25
    8206:	80 93 7e 0d 	sts	0x0D7E, r24
		songStart=song+1;//skip first delta-time
    820a:	90 93 01 0d 	sts	0x0D01, r25
    820e:	80 93 00 0d 	sts	0x0D00, r24
		loopStart=song+1;
    8212:	90 93 81 0d 	sts	0x0D81, r25
    8216:	80 93 80 0d 	sts	0x0D80, r24
		nextDeltaTime=0;
    821a:	10 92 7c 0d 	sts	0x0D7C, r1
    821e:	10 92 7b 0d 	sts	0x0D7B, r1
		currDeltaTime=0;
    8222:	10 92 76 0d 	sts	0x0D76, r1
    8226:	10 92 75 0d 	sts	0x0D75, r1
		songSpeed=0;
    822a:	10 92 7d 0d 	sts	0x0D7D, r1

		lastStatus=0;
    822e:	10 92 79 0d 	sts	0x0D79, r1
		playSong=true;
    8232:	81 e0       	ldi	r24, 0x01	; 1
    8234:	80 93 d0 0c 	sts	0x0CD0, r24
    8238:	08 95       	ret

0000823a <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    823a:	e2 e0       	ldi	r30, 0x02	; 2
    823c:	fd e0       	ldi	r31, 0x0D	; 13
    823e:	8a ef       	ldi	r24, 0xFA	; 250
    8240:	87 87       	std	Z+15, r24	; 0x0f
    8242:	86 a3       	std	Z+38, r24	; 0x26
    8244:	80 93 3f 0d 	sts	0x0D3F, r24
    8248:	80 93 56 0d 	sts	0x0D56, r24
    824c:	80 93 6d 0d 	sts	0x0D6D, r24
	}

	playSong=false;
    8250:	10 92 d0 0c 	sts	0x0CD0, r1
    8254:	08 95       	ret

00008256 <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    8256:	81 e0       	ldi	r24, 0x01	; 1
    8258:	80 93 d0 0c 	sts	0x0CD0, r24
    825c:	08 95       	ret

0000825e <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    825e:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8260:	ed 91       	ld	r30, X+
    8262:	fc 91       	ld	r31, X
    8264:	11 97       	sbiw	r26, 0x01	; 1
    8266:	9f 01       	movw	r18, r30
    8268:	2f 5f       	subi	r18, 0xFF	; 255
    826a:	3f 4f       	sbci	r19, 0xFF	; 255
    826c:	11 96       	adiw	r26, 0x01	; 1
    826e:	3c 93       	st	X, r19
    8270:	2e 93       	st	-X, r18
    8272:	e4 91       	lpm	r30, Z
    8274:	e7 fd       	sbrc	r30, 7
    8276:	03 c0       	rjmp	.+6      	; 0x827e <ReadVarLen+0x20>
    8278:	8e 2f       	mov	r24, r30
    827a:	90 e0       	ldi	r25, 0x00	; 0
    827c:	08 95       	ret
    {
       value &= 0x7F;
    827e:	ef 77       	andi	r30, 0x7F	; 127
    8280:	8e 2f       	mov	r24, r30
    8282:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8284:	96 95       	lsr	r25
    8286:	98 2f       	mov	r25, r24
    8288:	88 27       	eor	r24, r24
    828a:	97 95       	ror	r25
    828c:	87 95       	ror	r24
    828e:	2f 5f       	subi	r18, 0xFF	; 255
    8290:	3f 4f       	sbci	r19, 0xFF	; 255
    8292:	f9 01       	movw	r30, r18
    8294:	31 97       	sbiw	r30, 0x01	; 1
    8296:	e4 91       	lpm	r30, Z
    8298:	4e 2f       	mov	r20, r30
    829a:	4f 77       	andi	r20, 0x7F	; 127
    829c:	84 0f       	add	r24, r20
    829e:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    82a0:	e7 fd       	sbrc	r30, 7
    82a2:	f0 cf       	rjmp	.-32     	; 0x8284 <ReadVarLen+0x26>
    82a4:	2d 93       	st	X+, r18
    82a6:	3c 93       	st	X, r19
    }


    return value;
}
    82a8:	08 95       	ret

000082aa <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    82aa:	ef 92       	push	r14
    82ac:	ff 92       	push	r15
    82ae:	0f 93       	push	r16
    82b0:	1f 93       	push	r17
    82b2:	cf 93       	push	r28
    82b4:	df 93       	push	r29
    82b6:	1f 92       	push	r1
    82b8:	cd b7       	in	r28, 0x3d	; 61
    82ba:	de b7       	in	r29, 0x3e	; 62
    82bc:	7c 01       	movw	r14, r24
    82be:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    82c0:	fc 01       	movw	r30, r24
    82c2:	80 81       	ld	r24, Z
    82c4:	08 2f       	mov	r16, r24
    82c6:	00 1f       	adc	r16, r16
    82c8:	00 27       	eor	r16, r16
    82ca:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    82cc:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    82ce:	9f ef       	ldi	r25, 0xFF	; 255
    82d0:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    82d2:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    82d4:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    82d6:	87 7b       	andi	r24, 0xB7	; 183
    82d8:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    82da:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    82dc:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    82de:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    82e0:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    82e2:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    82e4:	82 81       	ldd	r24, Z+2	; 0x02
    82e6:	83 30       	cpi	r24, 0x03	; 3
    82e8:	69 f4       	brne	.+26     	; 0x8304 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    82ea:	01 11       	cpse	r16, r1
    82ec:	01 c0       	rjmp	.+2      	; 0x82f0 <TriggerCommon+0x46>
    82ee:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    82f0:	81 e0       	ldi	r24, 0x01	; 1
    82f2:	91 e0       	ldi	r25, 0x01	; 1
    82f4:	90 93 e7 0c 	sts	0x0CE7, r25
    82f8:	80 93 e6 0c 	sts	0x0CE6, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    82fc:	81 e0       	ldi	r24, 0x01	; 1
    82fe:	80 93 e5 0c 	sts	0x0CE5, r24
    8302:	39 c0       	rjmp	.+114    	; 0x8376 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8304:	84 30       	cpi	r24, 0x04	; 4
    8306:	69 f5       	brne	.+90     	; 0x8362 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8308:	10 92 ed 0c 	sts	0x0CED, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    830c:	80 91 77 0d 	lds	r24, 0x0D77
    8310:	90 91 78 0d 	lds	r25, 0x0D78
    8314:	f9 e0       	ldi	r31, 0x09	; 9
    8316:	6f 9f       	mul	r22, r31
    8318:	80 0d       	add	r24, r0
    831a:	91 1d       	adc	r25, r1
    831c:	11 24       	eor	r1, r1
    831e:	fc 01       	movw	r30, r24
    8320:	31 96       	adiw	r30, 0x01	; 1
    8322:	a5 91       	lpm	r26, Z+
    8324:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8326:	b0 93 ef 0c 	sts	0x0CEF, r27
    832a:	a0 93 ee 0c 	sts	0x0CEE, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    832e:	ac 01       	movw	r20, r24
    8330:	49 5f       	subi	r20, 0xF9	; 249
    8332:	5f 4f       	sbci	r21, 0xFF	; 255
    8334:	fa 01       	movw	r30, r20
    8336:	65 91       	lpm	r22, Z+
    8338:	74 91       	lpm	r23, Z
    833a:	05 96       	adiw	r24, 0x05	; 5
    833c:	fc 01       	movw	r30, r24
    833e:	85 91       	lpm	r24, Z+
    8340:	94 91       	lpm	r25, Z
    8342:	68 1b       	sub	r22, r24
    8344:	79 0b       	sbc	r23, r25
    8346:	70 93 f1 0c 	sts	0x0CF1, r23
    834a:	60 93 f0 0c 	sts	0x0CF0, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    834e:	fa 01       	movw	r30, r20
    8350:	85 91       	lpm	r24, Z+
    8352:	94 91       	lpm	r25, Z
    8354:	a8 0f       	add	r26, r24
    8356:	b9 1f       	adc	r27, r25
    8358:	b0 93 f3 0c 	sts	0x0CF3, r27
    835c:	a0 93 f2 0c 	sts	0x0CF2, r26
    8360:	05 c0       	rjmp	.+10     	; 0x836c <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8362:	60 e0       	ldi	r22, 0x00	; 0
    8364:	29 83       	std	Y+1, r18	; 0x01
    8366:	0e 94 a7 44 	call	0x894e	; 0x894e <SetMixerWave>
			SetMixerNote(track->channel,note);
    836a:	29 81       	ldd	r18, Y+1	; 0x01
    836c:	62 2f       	mov	r22, r18
    836e:	f7 01       	movw	r30, r14
    8370:	82 81       	ldd	r24, Z+2	; 0x02
    8372:	0e 94 90 44 	call	0x8920	; 0x8920 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8376:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8378:	00 23       	and	r16, r16
    837a:	11 f0       	breq	.+4      	; 0x8380 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    837c:	11 8b       	std	Z+17, r17	; 0x11
    837e:	01 c0       	rjmp	.+2      	; 0x8382 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8380:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8382:	e0 91 77 0d 	lds	r30, 0x0D77
    8386:	f0 91 78 0d 	lds	r31, 0x0D78
    838a:	39 e0       	ldi	r19, 0x09	; 9
    838c:	13 9f       	mul	r17, r19
    838e:	e0 0d       	add	r30, r0
    8390:	f1 1d       	adc	r31, r1
    8392:	11 24       	eor	r1, r1
    8394:	33 96       	adiw	r30, 0x03	; 3
    8396:	85 91       	lpm	r24, Z+
    8398:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    839a:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    839c:	00 97       	sbiw	r24, 0x00	; 0
    839e:	19 f4       	brne	.+6      	; 0x83a6 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    83a0:	16 8a       	std	Z+22, r1	; 0x16
    83a2:	15 8a       	std	Z+21, r1	; 0x15
    83a4:	08 c0       	rjmp	.+16     	; 0x83b6 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    83a6:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    83a8:	fc 01       	movw	r30, r24
    83aa:	24 91       	lpm	r18, Z
    83ac:	f7 01       	movw	r30, r14
    83ae:	22 8b       	std	Z+18, r18	; 0x12
    83b0:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    83b2:	96 8b       	std	Z+22, r25	; 0x16
    83b4:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    83b6:	0f 90       	pop	r0
    83b8:	df 91       	pop	r29
    83ba:	cf 91       	pop	r28
    83bc:	1f 91       	pop	r17
    83be:	0f 91       	pop	r16
    83c0:	ff 90       	pop	r15
    83c2:	ef 90       	pop	r14
    83c4:	08 95       	ret

000083c6 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    83c6:	cf 93       	push	r28
    83c8:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    83ca:	e0 91 77 0d 	lds	r30, 0x0D77
    83ce:	f0 91 78 0d 	lds	r31, 0x0D78
    83d2:	99 e0       	ldi	r25, 0x09	; 9
    83d4:	89 9f       	mul	r24, r25
    83d6:	e0 0d       	add	r30, r0
    83d8:	f1 1d       	adc	r31, r1
    83da:	11 24       	eor	r1, r1
    83dc:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    83de:	e1 30       	cpi	r30, 0x01	; 1
    83e0:	e9 f0       	breq	.+58     	; 0x841c <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    83e2:	e2 30       	cpi	r30, 0x02	; 2
    83e4:	e9 f0       	breq	.+58     	; 0x8420 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    83e6:	20 91 19 0d 	lds	r18, 0x0D19
    83ea:	27 ff       	sbrs	r18, 7
    83ec:	1d c0       	rjmp	.+58     	; 0x8428 <TriggerFx+0x62>
    83ee:	20 91 2a 0d 	lds	r18, 0x0D2A
    83f2:	28 13       	cpse	r18, r24
    83f4:	02 c0       	rjmp	.+4      	; 0x83fa <TriggerFx+0x34>
    83f6:	41 11       	cpse	r20, r1
    83f8:	17 c0       	rjmp	.+46     	; 0x8428 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    83fa:	20 91 30 0d 	lds	r18, 0x0D30
    83fe:	27 ff       	sbrs	r18, 7
    8400:	11 c0       	rjmp	.+34     	; 0x8424 <TriggerFx+0x5e>
    8402:	20 91 41 0d 	lds	r18, 0x0D41
    8406:	28 13       	cpse	r18, r24
    8408:	02 c0       	rjmp	.+4      	; 0x840e <TriggerFx+0x48>
    840a:	41 11       	cpse	r20, r1
    840c:	0b c0       	rjmp	.+22     	; 0x8424 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    840e:	20 91 2d 0d 	lds	r18, 0x0D2D
    8412:	90 91 44 0d 	lds	r25, 0x0D44
    8416:	92 17       	cp	r25, r18
    8418:	28 f4       	brcc	.+10     	; 0x8424 <TriggerFx+0x5e>
    841a:	06 c0       	rjmp	.+12     	; 0x8428 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    841c:	c3 e0       	ldi	r28, 0x03	; 3
    841e:	05 c0       	rjmp	.+10     	; 0x842a <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8420:	c4 e0       	ldi	r28, 0x04	; 4
    8422:	03 c0       	rjmp	.+6      	; 0x842a <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8424:	c2 e0       	ldi	r28, 0x02	; 2
    8426:	01 c0       	rjmp	.+2      	; 0x842a <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8428:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    842a:	97 e1       	ldi	r25, 0x17	; 23
    842c:	c9 9f       	mul	r28, r25
    842e:	e0 01       	movw	r28, r0
    8430:	11 24       	eor	r1, r1
    8432:	ce 5f       	subi	r28, 0xFE	; 254
    8434:	d2 4f       	sbci	r29, 0xF2	; 242
    8436:	90 e8       	ldi	r25, 0x80	; 128
    8438:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    843a:	1e 8a       	std	Y+22, r1	; 0x16
    843c:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    843e:	20 e5       	ldi	r18, 0x50	; 80
    8440:	46 2f       	mov	r20, r22
    8442:	68 2f       	mov	r22, r24
    8444:	ce 01       	movw	r24, r28
    8446:	0e 94 55 41 	call	0x82aa	; 0x82aa <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    844a:	88 81       	ld	r24, Y
    844c:	80 62       	ori	r24, 0x20	; 32
    844e:	88 83       	st	Y, r24
}
    8450:	df 91       	pop	r29
    8452:	cf 91       	pop	r28
    8454:	08 95       	ret

00008456 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8456:	cf 93       	push	r28
    8458:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    845a:	a8 2f       	mov	r26, r24
    845c:	b0 e0       	ldi	r27, 0x00	; 0
    845e:	97 e1       	ldi	r25, 0x17	; 23
    8460:	89 9f       	mul	r24, r25
    8462:	f0 01       	movw	r30, r0
    8464:	11 24       	eor	r1, r1
    8466:	ee 5f       	subi	r30, 0xFE	; 254
    8468:	f2 4f       	sbci	r31, 0xF2	; 242
    846a:	80 81       	ld	r24, Z
    846c:	85 ff       	sbrs	r24, 5
    846e:	02 c0       	rjmp	.+4      	; 0x8474 <TriggerNote+0x1e>
    8470:	87 fd       	sbrc	r24, 7
    8472:	2e c0       	rjmp	.+92     	; 0x84d0 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8474:	21 11       	cpse	r18, r1
    8476:	18 c0       	rjmp	.+48     	; 0x84a8 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8478:	97 e1       	ldi	r25, 0x17	; 23
    847a:	9a 9f       	mul	r25, r26
    847c:	f0 01       	movw	r30, r0
    847e:	9b 9f       	mul	r25, r27
    8480:	f0 0d       	add	r31, r0
    8482:	11 24       	eor	r1, r1
    8484:	ee 5f       	subi	r30, 0xFE	; 254
    8486:	f2 4f       	sbci	r31, 0xF2	; 242
    8488:	97 85       	ldd	r25, Z+15	; 0x0f
    848a:	91 11       	cpse	r25, r1
    848c:	02 c0       	rjmp	.+4      	; 0x8492 <TriggerNote+0x3c>
    848e:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8490:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8492:	97 e1       	ldi	r25, 0x17	; 23
    8494:	9a 9f       	mul	r25, r26
    8496:	f0 01       	movw	r30, r0
    8498:	9b 9f       	mul	r25, r27
    849a:	f0 0d       	add	r31, r0
    849c:	11 24       	eor	r1, r1
    849e:	ee 5f       	subi	r30, 0xFE	; 254
    84a0:	f2 4f       	sbci	r31, 0xF2	; 242
    84a2:	8f 7b       	andi	r24, 0xBF	; 191
    84a4:	80 83       	st	Z, r24
    84a6:	14 c0       	rjmp	.+40     	; 0x84d0 <TriggerNote+0x7a>
    84a8:	82 2f       	mov	r24, r18
    84aa:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    84ac:	97 e1       	ldi	r25, 0x17	; 23
    84ae:	9a 9f       	mul	r25, r26
    84b0:	e0 01       	movw	r28, r0
    84b2:	9b 9f       	mul	r25, r27
    84b4:	d0 0d       	add	r29, r0
    84b6:	11 24       	eor	r1, r1
    84b8:	ce 5f       	subi	r28, 0xFE	; 254
    84ba:	d2 4f       	sbci	r29, 0xF2	; 242
    84bc:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    84be:	1e 8a       	std	Y+22, r1	; 0x16
    84c0:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    84c2:	48 2f       	mov	r20, r24
    84c4:	ce 01       	movw	r24, r28
    84c6:	0e 94 55 41 	call	0x82aa	; 0x82aa <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    84ca:	88 81       	ld	r24, Y
    84cc:	80 62       	ori	r24, 0x20	; 32
    84ce:	88 83       	st	Y, r24
		}

	}
}
    84d0:	df 91       	pop	r29
    84d2:	cf 91       	pop	r28
    84d4:	08 95       	ret

000084d6 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    84d6:	6f 92       	push	r6
    84d8:	7f 92       	push	r7
    84da:	8f 92       	push	r8
    84dc:	9f 92       	push	r9
    84de:	af 92       	push	r10
    84e0:	bf 92       	push	r11
    84e2:	cf 92       	push	r12
    84e4:	df 92       	push	r13
    84e6:	ef 92       	push	r14
    84e8:	ff 92       	push	r15
    84ea:	0f 93       	push	r16
    84ec:	1f 93       	push	r17
    84ee:	cf 93       	push	r28
    84f0:	df 93       	push	r29
    84f2:	c2 e0       	ldi	r28, 0x02	; 2
    84f4:	dd e0       	ldi	r29, 0x0D	; 13
    84f6:	02 ed       	ldi	r16, 0xD2	; 210
    84f8:	1c e0       	ldi	r17, 0x0C	; 12
    84fa:	d8 01       	movw	r26, r16
    84fc:	9e 01       	movw	r18, r28
    84fe:	40 e0       	ldi	r20, 0x00	; 0
    8500:	50 e0       	ldi	r21, 0x00	; 0
    8502:	ca 01       	movw	r24, r20
    8504:	8e 5f       	subi	r24, 0xFE	; 254
    8506:	92 4f       	sbci	r25, 0xF2	; 242
    8508:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    850a:	fc 01       	movw	r30, r24
    850c:	87 85       	ldd	r24, Z+15	; 0x0f
    850e:	88 23       	and	r24, r24
    8510:	91 f0       	breq	.+36     	; 0x8536 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8512:	66 85       	ldd	r22, Z+14	; 0x0e
    8514:	99 27       	eor	r25, r25
    8516:	87 fd       	sbrc	r24, 7
    8518:	90 95       	com	r25
    851a:	86 0f       	add	r24, r22
    851c:	91 1d       	adc	r25, r1
    851e:	8f 3f       	cpi	r24, 0xFF	; 255
    8520:	91 05       	cpc	r25, r1
    8522:	19 f0       	breq	.+6      	; 0x852a <ProcessMusic+0x54>
    8524:	14 f0       	brlt	.+4      	; 0x852a <ProcessMusic+0x54>
    8526:	8f ef       	ldi	r24, 0xFF	; 255
    8528:	90 e0       	ldi	r25, 0x00	; 0
    852a:	97 ff       	sbrs	r25, 7
    852c:	02 c0       	rjmp	.+4      	; 0x8532 <ProcessMusic+0x5c>
    852e:	80 e0       	ldi	r24, 0x00	; 0
    8530:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8532:	f6 01       	movw	r30, r12
    8534:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8536:	f9 01       	movw	r30, r18
    8538:	f0 80       	ld	r15, Z
    853a:	f3 fe       	sbrs	r15, 3
    853c:	2a c0       	rjmp	.+84     	; 0x8592 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    853e:	65 81       	ldd	r22, Z+5	; 0x05
    8540:	76 81       	ldd	r23, Z+6	; 0x06
    8542:	11 96       	adiw	r26, 0x01	; 1
    8544:	8d 91       	ld	r24, X+
    8546:	9c 91       	ld	r25, X
    8548:	12 97       	sbiw	r26, 0x02	; 2
    854a:	86 0f       	add	r24, r22
    854c:	97 1f       	adc	r25, r23
    854e:	12 96       	adiw	r26, 0x02	; 2
    8550:	9c 93       	st	X, r25
    8552:	8e 93       	st	-X, r24
    8554:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8556:	f6 01       	movw	r30, r12
    8558:	e7 80       	ldd	r14, Z+7	; 0x07
    855a:	ee 2d       	mov	r30, r14
    855c:	f0 e0       	ldi	r31, 0x00	; 0
    855e:	ee 0f       	add	r30, r30
    8560:	ff 1f       	adc	r31, r31
    8562:	e8 57       	subi	r30, 0x78	; 120
    8564:	f6 47       	sbci	r31, 0x76	; 118
    8566:	c5 90       	lpm	r12, Z+
    8568:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    856a:	16 16       	cp	r1, r22
    856c:	17 06       	cpc	r1, r23
    856e:	24 f4       	brge	.+8      	; 0x8578 <ProcessMusic+0xa2>
    8570:	8c 15       	cp	r24, r12
    8572:	9d 05       	cpc	r25, r13
    8574:	30 f4       	brcc	.+12     	; 0x8582 <ProcessMusic+0xac>
    8576:	0d c0       	rjmp	.+26     	; 0x8592 <ProcessMusic+0xbc>
    8578:	67 2b       	or	r22, r23
    857a:	59 f0       	breq	.+22     	; 0x8592 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    857c:	c8 16       	cp	r12, r24
    857e:	d9 06       	cpc	r13, r25
    8580:	40 f0       	brcs	.+16     	; 0x8592 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8582:	12 96       	adiw	r26, 0x02	; 2
    8584:	dc 92       	st	X, r13
    8586:	ce 92       	st	-X, r12
    8588:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    858a:	8f 2d       	mov	r24, r15
    858c:	87 7f       	andi	r24, 0xF7	; 247
    858e:	f9 01       	movw	r30, r18
    8590:	80 83       	st	Z, r24
    8592:	49 5e       	subi	r20, 0xE9	; 233
    8594:	5f 4f       	sbci	r21, 0xFF	; 255
    8596:	29 5e       	subi	r18, 0xE9	; 233
    8598:	3f 4f       	sbci	r19, 0xFF	; 255
    859a:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    859c:	43 37       	cpi	r20, 0x73	; 115
    859e:	51 05       	cpc	r21, r1
    85a0:	09 f0       	breq	.+2      	; 0x85a4 <ProcessMusic+0xce>
    85a2:	af cf       	rjmp	.-162    	; 0x8502 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    85a4:	80 91 d0 0c 	lds	r24, 0x0CD0
    85a8:	88 23       	and	r24, r24
    85aa:	09 f4       	brne	.+2      	; 0x85ae <ProcessMusic+0xd8>
    85ac:	cc c0       	rjmp	.+408    	; 0x8746 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    85ae:	57 e1       	ldi	r21, 0x17	; 23
    85b0:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    85b2:	80 91 75 0d 	lds	r24, 0x0D75
    85b6:	90 91 76 0d 	lds	r25, 0x0D76
    85ba:	20 91 7b 0d 	lds	r18, 0x0D7B
    85be:	30 91 7c 0d 	lds	r19, 0x0D7C
    85c2:	82 17       	cp	r24, r18
    85c4:	93 07       	cpc	r25, r19
    85c6:	09 f0       	breq	.+2      	; 0x85ca <ProcessMusic+0xf4>
    85c8:	b9 c0       	rjmp	.+370    	; 0x873c <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    85ca:	20 91 7e 0d 	lds	r18, 0x0D7E
    85ce:	30 91 7f 0d 	lds	r19, 0x0D7F
    85d2:	b9 01       	movw	r22, r18
    85d4:	6f 5f       	subi	r22, 0xFF	; 255
    85d6:	7f 4f       	sbci	r23, 0xFF	; 255
    85d8:	70 93 7f 0d 	sts	0x0D7F, r23
    85dc:	60 93 7e 0d 	sts	0x0D7E, r22
    85e0:	f9 01       	movw	r30, r18
    85e2:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    85e4:	4f 3f       	cpi	r20, 0xFF	; 255
    85e6:	79 f5       	brne	.+94     	; 0x8646 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    85e8:	a9 01       	movw	r20, r18
    85ea:	4e 5f       	subi	r20, 0xFE	; 254
    85ec:	5f 4f       	sbci	r21, 0xFF	; 255
    85ee:	50 93 7f 0d 	sts	0x0D7F, r21
    85f2:	40 93 7e 0d 	sts	0x0D7E, r20
    85f6:	fb 01       	movw	r30, r22
    85f8:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    85fa:	6f 32       	cpi	r22, 0x2F	; 47
    85fc:	19 f4       	brne	.+6      	; 0x8604 <ProcessMusic+0x12e>
						playSong=false;
    85fe:	10 92 d0 0c 	sts	0x0CD0, r1
						break;	
    8602:	9c c0       	rjmp	.+312    	; 0x873c <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8604:	66 30       	cpi	r22, 0x06	; 6
    8606:	09 f0       	breq	.+2      	; 0x860a <ProcessMusic+0x134>
    8608:	8c c0       	rjmp	.+280    	; 0x8722 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    860a:	fa 01       	movw	r30, r20
    860c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    860e:	c9 01       	movw	r24, r18
    8610:	04 96       	adiw	r24, 0x04	; 4
    8612:	90 93 7f 0d 	sts	0x0D7F, r25
    8616:	80 93 7e 0d 	sts	0x0D7E, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    861a:	f9 01       	movw	r30, r18
    861c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    861e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8620:	e3 35       	cpi	r30, 0x53	; 83
    8622:	29 f4       	brne	.+10     	; 0x862e <ProcessMusic+0x158>
							loopStart=songPos;
    8624:	90 93 81 0d 	sts	0x0D81, r25
    8628:	80 93 80 0d 	sts	0x0D80, r24
    862c:	7a c0       	rjmp	.+244    	; 0x8722 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    862e:	e5 34       	cpi	r30, 0x45	; 69
    8630:	09 f0       	breq	.+2      	; 0x8634 <ProcessMusic+0x15e>
    8632:	77 c0       	rjmp	.+238    	; 0x8722 <ProcessMusic+0x24c>
							songPos=loopStart;
    8634:	80 91 80 0d 	lds	r24, 0x0D80
    8638:	90 91 81 0d 	lds	r25, 0x0D81
    863c:	90 93 7f 0d 	sts	0x0D7F, r25
    8640:	80 93 7e 0d 	sts	0x0D7E, r24
    8644:	6e c0       	rjmp	.+220    	; 0x8722 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8646:	47 fd       	sbrc	r20, 7
    8648:	40 93 79 0d 	sts	0x0D79, r20
					channel=lastStatus&0x0f;
    864c:	90 91 79 0d 	lds	r25, 0x0D79
    8650:	89 2f       	mov	r24, r25
    8652:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8654:	47 ff       	sbrs	r20, 7
    8656:	08 c0       	rjmp	.+16     	; 0x8668 <ProcessMusic+0x192>
    8658:	2e 5f       	subi	r18, 0xFE	; 254
    865a:	3f 4f       	sbci	r19, 0xFF	; 255
    865c:	30 93 7f 0d 	sts	0x0D7F, r19
    8660:	20 93 7e 0d 	sts	0x0D7E, r18
    8664:	fb 01       	movw	r30, r22
    8666:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8668:	90 7f       	andi	r25, 0xF0	; 240
    866a:	90 3b       	cpi	r25, 0xB0	; 176
    866c:	e1 f0       	breq	.+56     	; 0x86a6 <ProcessMusic+0x1d0>
    866e:	90 3c       	cpi	r25, 0xC0	; 192
    8670:	09 f4       	brne	.+2      	; 0x8674 <ProcessMusic+0x19e>
    8672:	51 c0       	rjmp	.+162    	; 0x8716 <ProcessMusic+0x240>
    8674:	90 39       	cpi	r25, 0x90	; 144
    8676:	09 f0       	breq	.+2      	; 0x867a <ProcessMusic+0x1a4>
    8678:	54 c0       	rjmp	.+168    	; 0x8722 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    867a:	e0 91 7e 0d 	lds	r30, 0x0D7E
    867e:	f0 91 7f 0d 	lds	r31, 0x0D7F
    8682:	9f 01       	movw	r18, r30
    8684:	2f 5f       	subi	r18, 0xFF	; 255
    8686:	3f 4f       	sbci	r19, 0xFF	; 255
    8688:	30 93 7f 0d 	sts	0x0D7F, r19
    868c:	20 93 7e 0d 	sts	0x0D7E, r18
    8690:	24 91       	lpm	r18, Z
    8692:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8694:	f8 9e       	mul	r15, r24
    8696:	f0 01       	movw	r30, r0
    8698:	11 24       	eor	r1, r1
    869a:	ee 5f       	subi	r30, 0xFE	; 254
    869c:	f2 4f       	sbci	r31, 0xF2	; 242
    869e:	60 89       	ldd	r22, Z+16	; 0x10
    86a0:	0e 94 2b 42 	call	0x8456	; 0x8456 <TriggerNote>
    86a4:	3e c0       	rjmp	.+124    	; 0x8722 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    86a6:	e0 91 7e 0d 	lds	r30, 0x0D7E
    86aa:	f0 91 7f 0d 	lds	r31, 0x0D7F
    86ae:	9f 01       	movw	r18, r30
    86b0:	2f 5f       	subi	r18, 0xFF	; 255
    86b2:	3f 4f       	sbci	r19, 0xFF	; 255
    86b4:	30 93 7f 0d 	sts	0x0D7F, r19
    86b8:	20 93 7e 0d 	sts	0x0D7E, r18
    86bc:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    86be:	47 30       	cpi	r20, 0x07	; 7
    86c0:	49 f4       	brne	.+18     	; 0x86d4 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    86c2:	f8 9e       	mul	r15, r24
    86c4:	d0 01       	movw	r26, r0
    86c6:	11 24       	eor	r1, r1
    86c8:	ae 5f       	subi	r26, 0xFE	; 254
    86ca:	b2 4f       	sbci	r27, 0xF2	; 242
    86cc:	ee 0f       	add	r30, r30
    86ce:	1c 96       	adiw	r26, 0x0c	; 12
    86d0:	ec 93       	st	X, r30
    86d2:	27 c0       	rjmp	.+78     	; 0x8722 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    86d4:	4b 30       	cpi	r20, 0x0B	; 11
    86d6:	49 f4       	brne	.+18     	; 0x86ea <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    86d8:	f8 9e       	mul	r15, r24
    86da:	d0 01       	movw	r26, r0
    86dc:	11 24       	eor	r1, r1
    86de:	ae 5f       	subi	r26, 0xFE	; 254
    86e0:	b2 4f       	sbci	r27, 0xF2	; 242
    86e2:	ee 0f       	add	r30, r30
    86e4:	13 96       	adiw	r26, 0x03	; 3
    86e6:	ec 93       	st	X, r30
    86e8:	1c c0       	rjmp	.+56     	; 0x8722 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    86ea:	4c 35       	cpi	r20, 0x5C	; 92
    86ec:	49 f4       	brne	.+18     	; 0x8700 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    86ee:	f8 9e       	mul	r15, r24
    86f0:	d0 01       	movw	r26, r0
    86f2:	11 24       	eor	r1, r1
    86f4:	ae 5f       	subi	r26, 0xFE	; 254
    86f6:	b2 4f       	sbci	r27, 0xF2	; 242
    86f8:	ee 0f       	add	r30, r30
    86fa:	1a 96       	adiw	r26, 0x0a	; 10
    86fc:	ec 93       	st	X, r30
    86fe:	11 c0       	rjmp	.+34     	; 0x8722 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8700:	44 36       	cpi	r20, 0x64	; 100
    8702:	79 f4       	brne	.+30     	; 0x8722 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8704:	f8 9e       	mul	r15, r24
    8706:	d0 01       	movw	r26, r0
    8708:	11 24       	eor	r1, r1
    870a:	ae 5f       	subi	r26, 0xFE	; 254
    870c:	b2 4f       	sbci	r27, 0xF2	; 242
    870e:	ee 0f       	add	r30, r30
    8710:	1b 96       	adiw	r26, 0x0b	; 11
    8712:	ec 93       	st	X, r30
    8714:	06 c0       	rjmp	.+12     	; 0x8722 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8716:	f8 9e       	mul	r15, r24
    8718:	f0 01       	movw	r30, r0
    871a:	11 24       	eor	r1, r1
    871c:	ee 5f       	subi	r30, 0xFE	; 254
    871e:	f2 4f       	sbci	r31, 0xF2	; 242
    8720:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8722:	8e e7       	ldi	r24, 0x7E	; 126
    8724:	9d e0       	ldi	r25, 0x0D	; 13
    8726:	0e 94 2f 41 	call	0x825e	; 0x825e <ReadVarLen>
    872a:	90 93 7c 0d 	sts	0x0D7C, r25
    872e:	80 93 7b 0d 	sts	0x0D7B, r24
				currDeltaTime=0;
    8732:	10 92 76 0d 	sts	0x0D76, r1
    8736:	10 92 75 0d 	sts	0x0D75, r1
    873a:	3b cf       	rjmp	.-394    	; 0x85b2 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    873c:	01 96       	adiw	r24, 0x01	; 1
    873e:	90 93 76 0d 	sts	0x0D76, r25
    8742:	80 93 75 0d 	sts	0x0D75, r24
    8746:	9b e0       	ldi	r25, 0x0B	; 11
    8748:	a9 2e       	mov	r10, r25
    874a:	9d e0       	ldi	r25, 0x0D	; 13
    874c:	b9 2e       	mov	r11, r25
    874e:	25 e1       	ldi	r18, 0x15	; 21
    8750:	c2 2e       	mov	r12, r18
    8752:	2d e0       	ldi	r18, 0x0D	; 13
    8754:	d2 2e       	mov	r13, r18
    8756:	36 e1       	ldi	r19, 0x16	; 22
    8758:	e3 2e       	mov	r14, r19
    875a:	3d e0       	ldi	r19, 0x0D	; 13
    875c:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    875e:	66 24       	eor	r6, r6
    8760:	6a 94       	dec	r6
    8762:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8764:	88 81       	ld	r24, Y
    8766:	85 ff       	sbrs	r24, 5
    8768:	42 c0       	rjmp	.+132    	; 0x87ee <ProcessMusic+0x318>
    876a:	2d 89       	ldd	r18, Y+21	; 0x15
    876c:	3e 89       	ldd	r19, Y+22	; 0x16
    876e:	23 2b       	or	r18, r19
    8770:	09 f4       	brne	.+2      	; 0x8774 <ProcessMusic+0x29e>
    8772:	3d c0       	rjmp	.+122    	; 0x87ee <ProcessMusic+0x318>
    8774:	86 fd       	sbrc	r24, 6
    8776:	3b c0       	rjmp	.+118    	; 0x87ee <ProcessMusic+0x318>
    8778:	47 01       	movw	r8, r14
    877a:	f2 e0       	ldi	r31, 0x02	; 2
    877c:	8f 1a       	sub	r8, r31
    877e:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8780:	d6 01       	movw	r26, r12
    8782:	9c 91       	ld	r25, X
    8784:	f4 01       	movw	r30, r8
    8786:	80 81       	ld	r24, Z
    8788:	98 13       	cpse	r25, r24
    878a:	2e c0       	rjmp	.+92     	; 0x87e8 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    878c:	ed 89       	ldd	r30, Y+21	; 0x15
    878e:	fe 89       	ldd	r31, Y+22	; 0x16
    8790:	bf 01       	movw	r22, r30
    8792:	6f 5f       	subi	r22, 0xFF	; 255
    8794:	7f 4f       	sbci	r23, 0xFF	; 255
    8796:	7e 8b       	std	Y+22, r23	; 0x16
    8798:	6d 8b       	std	Y+21, r22	; 0x15
    879a:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    879c:	8f 3f       	cpi	r24, 0xFF	; 255
    879e:	31 f4       	brne	.+12     	; 0x87ac <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    87a0:	88 81       	ld	r24, Y
    87a2:	8f 77       	andi	r24, 0x7F	; 127
    87a4:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    87a6:	1e 8a       	std	Y+22, r1	; 0x16
    87a8:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    87aa:	1e c0       	rjmp	.+60     	; 0x87e8 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    87ac:	9f 01       	movw	r18, r30
    87ae:	2e 5f       	subi	r18, 0xFE	; 254
    87b0:	3f 4f       	sbci	r19, 0xFF	; 255
    87b2:	3e 8b       	std	Y+22, r19	; 0x16
    87b4:	2d 8b       	std	Y+21, r18	; 0x15
    87b6:	fb 01       	movw	r30, r22
    87b8:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    87ba:	e8 2f       	mov	r30, r24
    87bc:	f0 e0       	ldi	r31, 0x00	; 0
    87be:	ee 0f       	add	r30, r30
    87c0:	ff 1f       	adc	r31, r31
    87c2:	e8 51       	subi	r30, 0x18	; 24
    87c4:	ff 4f       	sbci	r31, 0xFF	; 255
    87c6:	25 91       	lpm	r18, Z+
    87c8:	34 91       	lpm	r19, Z
    87ca:	ce 01       	movw	r24, r28
    87cc:	f9 01       	movw	r30, r18
    87ce:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    87d0:	ed 89       	ldd	r30, Y+21	; 0x15
    87d2:	fe 89       	ldd	r31, Y+22	; 0x16
    87d4:	cf 01       	movw	r24, r30
    87d6:	01 96       	adiw	r24, 0x01	; 1
    87d8:	9e 8b       	std	Y+22, r25	; 0x16
    87da:	8d 8b       	std	Y+21, r24	; 0x15
    87dc:	e4 91       	lpm	r30, Z
    87de:	d4 01       	movw	r26, r8
    87e0:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    87e2:	f6 01       	movw	r30, r12
    87e4:	10 82       	st	Z, r1
    87e6:	cc cf       	rjmp	.-104    	; 0x8780 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    87e8:	9f 5f       	subi	r25, 0xFF	; 255
    87ea:	d6 01       	movw	r26, r12
    87ec:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    87ee:	98 81       	ld	r25, Y
    87f0:	95 ff       	sbrs	r25, 5
    87f2:	6c c0       	rjmp	.+216    	; 0x88cc <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    87f4:	f7 01       	movw	r30, r14
    87f6:	80 81       	ld	r24, Z
    87f8:	8f 3f       	cpi	r24, 0xFF	; 255
    87fa:	11 f0       	breq	.+4      	; 0x8800 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    87fc:	8f 5f       	subi	r24, 0xFF	; 255
    87fe:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8800:	97 fd       	sbrc	r25, 7
    8802:	04 c0       	rjmp	.+8      	; 0x880c <ProcessMusic+0x336>
    8804:	f7 01       	movw	r30, r14
    8806:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8808:	90 81       	ld	r25, Z
    880a:	01 c0       	rjmp	.+2      	; 0x880e <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    880c:	9f ef       	ldi	r25, 0xFF	; 255
    880e:	f7 01       	movw	r30, r14
    8810:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8812:	80 81       	ld	r24, Z
    8814:	88 23       	and	r24, r24
    8816:	09 f4       	brne	.+2      	; 0x881a <ProcessMusic+0x344>
    8818:	4e c0       	rjmp	.+156    	; 0x88b6 <ProcessMusic+0x3e0>
    881a:	31 96       	adiw	r30, 0x01	; 1
    881c:	50 81       	ld	r21, Z
    881e:	55 23       	and	r21, r21
    8820:	09 f4       	brne	.+2      	; 0x8824 <ProcessMusic+0x34e>
    8822:	49 c0       	rjmp	.+146    	; 0x88b6 <ProcessMusic+0x3e0>
    8824:	99 23       	and	r25, r25
    8826:	09 f4       	brne	.+2      	; 0x882a <ProcessMusic+0x354>
    8828:	46 c0       	rjmp	.+140    	; 0x88b6 <ProcessMusic+0x3e0>
    882a:	40 91 7a 0d 	lds	r20, 0x0D7A
    882e:	44 23       	and	r20, r20
    8830:	09 f4       	brne	.+2      	; 0x8834 <ProcessMusic+0x35e>
    8832:	41 c0       	rjmp	.+130    	; 0x88b6 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8834:	89 9f       	mul	r24, r25
    8836:	c0 01       	movw	r24, r0
    8838:	11 24       	eor	r1, r1
    883a:	93 95       	inc	r25
				uVol>>=8;
    883c:	89 2f       	mov	r24, r25
    883e:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8840:	58 9f       	mul	r21, r24
    8842:	90 01       	movw	r18, r0
    8844:	59 9f       	mul	r21, r25
    8846:	30 0d       	add	r19, r0
    8848:	11 24       	eor	r1, r1
    884a:	c9 01       	movw	r24, r18
    884c:	93 95       	inc	r25
				uVol>>=8;
    884e:	89 2f       	mov	r24, r25
    8850:	99 27       	eor	r25, r25
    8852:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8854:	50 81       	ld	r21, Z
    8856:	58 9f       	mul	r21, r24
    8858:	90 01       	movw	r18, r0
    885a:	59 9f       	mul	r21, r25
    885c:	30 0d       	add	r19, r0
    885e:	11 24       	eor	r1, r1
    8860:	33 95       	inc	r19
					uVol>>=8;
    8862:	23 2f       	mov	r18, r19
    8864:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8866:	42 9f       	mul	r20, r18
    8868:	c0 01       	movw	r24, r0
    886a:	43 9f       	mul	r20, r19
    886c:	90 0d       	add	r25, r0
    886e:	11 24       	eor	r1, r1
    8870:	93 95       	inc	r25
				uVol>>=8;
    8872:	89 2f       	mov	r24, r25
    8874:	99 27       	eor	r25, r25
    8876:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){
    8878:	20 81       	ld	r18, Z
    887a:	22 23       	and	r18, r18
    887c:	f1 f0       	breq	.+60     	; 0x88ba <ProcessMusic+0x3e4>
					#if (INCLUDE_DEFAULT_WAVES != 0)
						tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    887e:	d5 01       	movw	r26, r10
    8880:	ec 91       	ld	r30, X
    8882:	f0 e0       	ldi	r31, 0x00	; 0
    8884:	e0 50       	subi	r30, 0x00	; 0
    8886:	f5 47       	sbci	r31, 0x75	; 117
    8888:	e4 91       	lpm	r30, Z
					#else
						tmp=0;
					#endif
					tmp-=128; //convert to unsigned
    888a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    888c:	2e 9f       	mul	r18, r30
    888e:	f0 01       	movw	r30, r0
    8890:	11 24       	eor	r1, r1
    8892:	f3 95       	inc	r31
					tVol>>=8;
    8894:	ef 2f       	mov	r30, r31
    8896:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8898:	a3 01       	movw	r20, r6
    889a:	4e 1b       	sub	r20, r30
    889c:	5f 0b       	sbc	r21, r31
    889e:	48 9f       	mul	r20, r24
    88a0:	90 01       	movw	r18, r0
    88a2:	49 9f       	mul	r20, r25
    88a4:	30 0d       	add	r19, r0
    88a6:	58 9f       	mul	r21, r24
    88a8:	30 0d       	add	r19, r0
    88aa:	11 24       	eor	r1, r1
    88ac:	c9 01       	movw	r24, r18
    88ae:	93 95       	inc	r25
					uVol>>=8;
    88b0:	89 2f       	mov	r24, r25
    88b2:	99 27       	eor	r25, r25
    88b4:	02 c0       	rjmp	.+4      	; 0x88ba <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    88b6:	80 e0       	ldi	r24, 0x00	; 0
    88b8:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    88ba:	f5 01       	movw	r30, r10
    88bc:	30 81       	ld	r19, Z
    88be:	f7 01       	movw	r30, r14
    88c0:	39 97       	sbiw	r30, 0x09	; 9
    88c2:	20 81       	ld	r18, Z
    88c4:	23 0f       	add	r18, r19
    88c6:	d5 01       	movw	r26, r10
    88c8:	2c 93       	st	X, r18
    88ca:	02 c0       	rjmp	.+4      	; 0x88d0 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    88cc:	80 e0       	ldi	r24, 0x00	; 0
    88ce:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    88d0:	f8 01       	movw	r30, r16
    88d2:	80 83       	st	Z, r24
    88d4:	67 96       	adiw	r28, 0x17	; 23
    88d6:	0a 5f       	subi	r16, 0xFA	; 250
    88d8:	1f 4f       	sbci	r17, 0xFF	; 255
    88da:	f7 e1       	ldi	r31, 0x17	; 23
    88dc:	af 0e       	add	r10, r31
    88de:	b1 1c       	adc	r11, r1
    88e0:	87 e1       	ldi	r24, 0x17	; 23
    88e2:	c8 0e       	add	r12, r24
    88e4:	d1 1c       	adc	r13, r1
    88e6:	97 e1       	ldi	r25, 0x17	; 23
    88e8:	e9 0e       	add	r14, r25
    88ea:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    88ec:	ad e0       	ldi	r26, 0x0D	; 13
    88ee:	c5 37       	cpi	r28, 0x75	; 117
    88f0:	da 07       	cpc	r29, r26
    88f2:	09 f0       	breq	.+2      	; 0x88f6 <ProcessMusic+0x420>
    88f4:	37 cf       	rjmp	.-402    	; 0x8764 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    88f6:	df 91       	pop	r29
    88f8:	cf 91       	pop	r28
    88fa:	1f 91       	pop	r17
    88fc:	0f 91       	pop	r16
    88fe:	ff 90       	pop	r15
    8900:	ef 90       	pop	r14
    8902:	df 90       	pop	r13
    8904:	cf 90       	pop	r12
    8906:	bf 90       	pop	r11
    8908:	af 90       	pop	r10
    890a:	9f 90       	pop	r9
    890c:	8f 90       	pop	r8
    890e:	7f 90       	pop	r7
    8910:	6f 90       	pop	r6
    8912:	08 95       	ret

00008914 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8914:	80 93 7a 0d 	sts	0x0D7A, r24
    8918:	08 95       	ret

0000891a <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
	return playSong;
    891a:	80 91 d0 0c 	lds	r24, 0x0CD0
    891e:	08 95       	ret

00008920 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8920:	99 27       	eor	r25, r25
	clr r23
    8922:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8924:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8926:	09 f4       	brne	.+2      	; 0x892a <set_note_waves>
		ret
    8928:	08 95       	ret

0000892a <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    892a:	e8 e8       	ldi	r30, 0x88	; 136
	ldi ZH,hi8(steptable)
    892c:	f9 e8       	ldi	r31, 0x89	; 137
	lsl r22
    892e:	66 0f       	add	r22, r22
	rol r23
    8930:	77 1f       	adc	r23, r23
	add ZL,r22
    8932:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8934:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8936:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8938:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    893a:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    893c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    893e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8940:	28 9f       	mul	r18, r24
	add ZL,r0
    8942:	e0 0d       	add	r30, r0
	adc ZH,r1
    8944:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8946:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8948:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    894a:	11 24       	eor	r1, r1
	

	ret
    894c:	08 95       	ret

0000894e <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    894e:	99 27       	eor	r25, r25
	clr r23
    8950:	77 27       	eor	r23, r23

#if (INCLUDE_DEFAULT_WAVES != 0)
	ldi ZL,lo8(mixerStruct)
    8952:	e2 ed       	ldi	r30, 0xD2	; 210
	ldi ZH,hi8(mixerStruct)
    8954:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    8956:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8958:	28 9f       	mul	r18, r24
	add ZL,r0
    895a:	e0 0d       	add	r30, r0
	adc ZH,r1
    895c:	f1 1d       	adc	r31, r1
#endif

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    895e:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8960:	31 f4       	brne	.+12     	; 0x896e <smw1>
	lds r22,tr4_params
    8962:	60 91 e5 0c 	lds	r22, 0x0CE5
	andi r22,0xfe;
    8966:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8968:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw	
    896c:	0b c0       	rjmp	.+22     	; 0x8984 <esmw>

0000896e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    896e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8970:	31 f4       	brne	.+12     	; 0x897e <smw2>
	lds r22,tr4_params
    8972:	60 91 e5 0c 	lds	r22, 0x0CE5
	ori r22,0xfe;
    8976:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8978:	60 93 e5 0c 	sts	0x0CE5, r22
	rjmp esmw
    897c:	03 c0       	rjmp	.+6      	; 0x8984 <esmw>

0000897e <smw2>:
smw2:
#endif

#if (INCLUDE_DEFAULT_WAVES != 0)
	ldi r23,hi8(waves)
    897e:	7b e8       	ldi	r23, 0x8B	; 139
	add r23,r22
    8980:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8982:	75 83       	std	Z+5, r23	; 0x05

00008984 <esmw>:
#endif

esmw:
	clr r1	
    8984:	11 24       	eor	r1, r1
	ret
    8986:	08 95       	ret

00008988 <steptable>:
    8988:	22 00       	.word	0x0022	; ????
    898a:	24 00       	.word	0x0024	; ????
    898c:	26 00       	.word	0x0026	; ????
    898e:	28 00       	.word	0x0028	; ????
    8990:	2b 00       	.word	0x002b	; ????
    8992:	2d 00       	.word	0x002d	; ????
    8994:	30 00       	.word	0x0030	; ????
    8996:	33 00       	.word	0x0033	; ????
    8998:	36 00       	.word	0x0036	; ????
    899a:	39 00       	.word	0x0039	; ????
    899c:	3d 00       	.word	0x003d	; ????
    899e:	40 00       	.word	0x0040	; ????
    89a0:	44 00       	.word	0x0044	; ????
    89a2:	48 00       	.word	0x0048	; ????
    89a4:	4c 00       	.word	0x004c	; ????
    89a6:	51 00       	.word	0x0051	; ????
    89a8:	56 00       	.word	0x0056	; ????
    89aa:	5b 00       	.word	0x005b	; ????
    89ac:	60 00       	.word	0x0060	; ????
    89ae:	66 00       	.word	0x0066	; ????
    89b0:	6c 00       	.word	0x006c	; ????
    89b2:	73 00       	.word	0x0073	; ????
    89b4:	79 00       	.word	0x0079	; ????
    89b6:	81 00       	.word	0x0081	; ????
    89b8:	88 00       	.word	0x0088	; ????
    89ba:	90 00       	.word	0x0090	; ????
    89bc:	99 00       	.word	0x0099	; ????
    89be:	a2 00       	.word	0x00a2	; ????
    89c0:	ac 00       	.word	0x00ac	; ????
    89c2:	b6 00       	.word	0x00b6	; ????
    89c4:	c1 00       	.word	0x00c1	; ????
    89c6:	cc 00       	.word	0x00cc	; ????
    89c8:	d8 00       	.word	0x00d8	; ????
    89ca:	e5 00       	.word	0x00e5	; ????
    89cc:	f3 00       	.word	0x00f3	; ????
    89ce:	01 01       	movw	r0, r2
    89d0:	10 01       	movw	r2, r0
    89d2:	21 01       	movw	r4, r2
    89d4:	32 01       	movw	r6, r4
    89d6:	44 01       	movw	r8, r8
    89d8:	57 01       	movw	r10, r14
    89da:	6c 01       	movw	r12, r24
    89dc:	81 01       	movw	r16, r2
    89de:	98 01       	movw	r18, r16
    89e0:	b0 01       	movw	r22, r0
    89e2:	ca 01       	movw	r24, r20
    89e4:	e5 01       	movw	r28, r10
    89e6:	02 02       	muls	r16, r18
    89e8:	21 02       	muls	r18, r17
    89ea:	41 02       	muls	r20, r17
    89ec:	64 02       	muls	r22, r20
    89ee:	88 02       	muls	r24, r24
    89f0:	ae 02       	muls	r26, r30
    89f2:	d7 02       	muls	r29, r23
    89f4:	03 03       	mulsu	r16, r19
    89f6:	30 03       	mulsu	r19, r16
    89f8:	61 03       	mulsu	r22, r17
    89fa:	94 03       	fmuls	r17, r20
    89fc:	cb 03       	fmulsu	r20, r19
    89fe:	05 04       	cpc	r0, r5
    8a00:	42 04       	cpc	r4, r2
    8a02:	83 04       	cpc	r8, r3
    8a04:	c7 04       	cpc	r12, r7
    8a06:	10 05       	cpc	r17, r0
    8a08:	5d 05       	cpc	r21, r13
    8a0a:	af 05       	cpc	r26, r15
    8a0c:	05 06       	cpc	r0, r21
    8a0e:	61 06       	cpc	r6, r17
    8a10:	c2 06       	cpc	r12, r18
    8a12:	29 07       	cpc	r18, r25
    8a14:	96 07       	cpc	r25, r22
    8a16:	09 08       	sbc	r0, r9
    8a18:	83 08       	sbc	r8, r3
    8a1a:	05 09       	sbc	r16, r5
    8a1c:	8e 09       	sbc	r24, r14
    8a1e:	20 0a       	sbc	r2, r16
    8a20:	ba 0a       	sbc	r11, r26
    8a22:	5d 0b       	sbc	r21, r29
    8a24:	0a 0c       	add	r0, r10
    8a26:	c1 0c       	add	r12, r1
    8a28:	84 0d       	add	r24, r4
    8a2a:	51 0e       	add	r5, r17
    8a2c:	2b 0f       	add	r18, r27
    8a2e:	12 10       	cpse	r1, r2
    8a30:	07 11       	cpse	r16, r7
    8a32:	0a 12       	cpse	r0, r26
    8a34:	1d 13       	cpse	r17, r29
    8a36:	40 14       	cp	r4, r0
    8a38:	74 15       	cp	r23, r4
    8a3a:	ba 16       	cp	r11, r26
    8a3c:	14 18       	sub	r1, r4
    8a3e:	83 19       	sub	r24, r3
    8a40:	07 1b       	sub	r16, r23
    8a42:	a3 1c       	adc	r10, r3
    8a44:	57 1e       	adc	r5, r23
    8a46:	24 20       	and	r2, r4
    8a48:	0e 22       	and	r0, r30
    8a4a:	14 24       	eor	r1, r4
    8a4c:	39 26       	eor	r3, r25
    8a4e:	7f 28       	or	r7, r15
    8a50:	e8 2a       	or	r14, r24
    8a52:	75 2d       	mov	r23, r5
    8a54:	29 30       	cpi	r18, 0x09	; 9
    8a56:	06 33       	cpi	r16, 0x36	; 54
    8a58:	0f 36       	cpi	r16, 0x6F	; 111
    8a5a:	45 39       	cpi	r20, 0x95	; 149
    8a5c:	ad 3c       	cpi	r26, 0xCD	; 205
    8a5e:	49 40       	sbci	r20, 0x09	; 9
    8a60:	1b 44       	sbci	r17, 0x4B	; 75
    8a62:	28 48       	sbci	r18, 0x88	; 136
    8a64:	73 4c       	sbci	r23, 0xC3	; 195
    8a66:	fe 50       	subi	r31, 0x0E	; 14
    8a68:	cf 55       	subi	r28, 0x5F	; 95
    8a6a:	ea 5a       	subi	r30, 0xAA	; 170
    8a6c:	51 60       	ori	r21, 0x01	; 1
    8a6e:	0c 66       	ori	r16, 0x6C	; 108
    8a70:	1d 6c       	ori	r17, 0xCD	; 205
    8a72:	8b 72       	andi	r24, 0x2B	; 43
    8a74:	5a 79       	andi	r21, 0x9A	; 154
    8a76:	92 80       	ldd	r9, Z+2	; 0x02
    8a78:	37 88       	ldd	r3, Z+23	; 0x17
    8a7a:	50 90 e5 98 	lds	r5, 0x98E5
    8a7e:	fd a1       	ldd	r31, Y+37	; 0x25
    8a80:	9f ab       	std	Y+55, r25	; 0x37
    8a82:	d3 b5       	in	r29, 0x23	; 35
    8a84:	a3 c0       	rjmp	.+326    	; 0x8bcc <waves+0xcc>
	...

00008b00 <waves>:
    8b00:	00 03       	mulsu	r16, r16
    8b02:	06 09       	sbc	r16, r6
    8b04:	0c 10       	cpse	r0, r12
    8b06:	13 16       	cp	r1, r19
    8b08:	19 1c       	adc	r1, r9
    8b0a:	1f 22       	and	r1, r31
    8b0c:	25 28       	or	r2, r5
    8b0e:	2b 2e       	mov	r2, r27
    8b10:	31 33       	cpi	r19, 0x31	; 49
    8b12:	36 39       	cpi	r19, 0x96	; 150
    8b14:	3c 3f       	cpi	r19, 0xFC	; 252
    8b16:	41 44       	sbci	r20, 0x41	; 65
    8b18:	47 49       	sbci	r20, 0x97	; 151
    8b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8b1c:	51 53       	subi	r21, 0x31	; 49
    8b1e:	55 58       	subi	r21, 0x85	; 133
    8b20:	5a 5c       	subi	r21, 0xCA	; 202
    8b22:	5e 60       	ori	r21, 0x0E	; 14
    8b24:	62 64       	ori	r22, 0x42	; 66
    8b26:	66 68       	ori	r22, 0x86	; 134
    8b28:	6a 6b       	ori	r22, 0xBA	; 186
    8b2a:	6d 6f       	ori	r22, 0xFD	; 253
    8b2c:	70 71       	andi	r23, 0x10	; 16
    8b2e:	73 74       	andi	r23, 0x43	; 67
    8b30:	75 76       	andi	r23, 0x65	; 101
    8b32:	78 79       	andi	r23, 0x98	; 152
    8b34:	7a 7a       	andi	r23, 0xAA	; 170
    8b36:	7b 7c       	andi	r23, 0xCB	; 203
    8b38:	7d 7d       	andi	r23, 0xDD	; 221
    8b3a:	7e 7e       	andi	r23, 0xEE	; 238
    8b3c:	7e 7f       	andi	r23, 0xFE	; 254
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7e 7e       	andi	r23, 0xEE	; 238
    8b46:	7e 7d       	andi	r23, 0xDE	; 222
    8b48:	7d 7c       	andi	r23, 0xCD	; 205
    8b4a:	7b 7a       	andi	r23, 0xAB	; 171
    8b4c:	7a 79       	andi	r23, 0x9A	; 154
    8b4e:	78 76       	andi	r23, 0x68	; 104
    8b50:	75 74       	andi	r23, 0x45	; 69
    8b52:	73 71       	andi	r23, 0x13	; 19
    8b54:	70 6f       	ori	r23, 0xF0	; 240
    8b56:	6d 6b       	ori	r22, 0xBD	; 189
    8b58:	6a 68       	ori	r22, 0x8A	; 138
    8b5a:	66 64       	ori	r22, 0x46	; 70
    8b5c:	62 60       	ori	r22, 0x02	; 2
    8b5e:	5e 5c       	subi	r21, 0xCE	; 206
    8b60:	5a 58       	subi	r21, 0x8A	; 138
    8b62:	55 53       	subi	r21, 0x35	; 53
    8b64:	51 4e       	sbci	r21, 0xE1	; 225
    8b66:	4c 49       	sbci	r20, 0x9C	; 156
    8b68:	47 44       	sbci	r20, 0x47	; 71
    8b6a:	41 3f       	cpi	r20, 0xF1	; 241
    8b6c:	3c 39       	cpi	r19, 0x9C	; 156
    8b6e:	36 33       	cpi	r19, 0x36	; 54
    8b70:	31 2e       	mov	r3, r17
    8b72:	2b 28       	or	r2, r11
    8b74:	25 22       	and	r2, r21
    8b76:	1f 1c       	adc	r1, r15
    8b78:	19 16       	cp	r1, r25
    8b7a:	13 10       	cpse	r1, r3
    8b7c:	0c 09       	sbc	r16, r12
    8b7e:	06 03       	mulsu	r16, r22
    8b80:	00 fd       	sbrc	r16, 0
    8b82:	fa f7       	brpl	.-2      	; 0x8b82 <waves+0x82>
    8b84:	f4 f0       	brlt	.+60     	; 0x8bc2 <waves+0xc2>
    8b86:	ed ea       	ldi	r30, 0xAD	; 173
    8b88:	e7 e4       	ldi	r30, 0x47	; 71
    8b8a:	e1 de       	rcall	.-574    	; 0x894e <SetMixerWave>
    8b8c:	db d8       	rcall	.-3658   	; 0x7d44 <__vector_8+0x34>
    8b8e:	d5 d2       	rcall	.+1450   	; 0x913a <waves+0x63a>
    8b90:	cf cd       	rjmp	.-1122   	; 0x8730 <ProcessMusic+0x25a>
    8b92:	ca c7       	rjmp	.+3988   	; 0x9b28 <LBPrintByte+0x38>
    8b94:	c4 c1       	rjmp	.+904    	; 0x8f1e <waves+0x41e>
    8b96:	bf bc       	out	0x2f, r11	; 47
    8b98:	b9 b7       	in	r27, 0x39	; 57
    8b9a:	b4 b2       	in	r11, 0x14	; 20
    8b9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8b9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ba0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ba2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ba4:	9e 9c       	mul	r9, r14
    8ba6:	9a 98       	cbi	0x13, 2	; 19
    8ba8:	96 95       	lsr	r25
    8baa:	93 91       	.word	0x9193	; ????
    8bac:	90 8f       	std	Z+24, r25	; 0x18
    8bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8bb0:	8b 8a       	std	Y+19, r8	; 0x13
    8bb2:	88 87       	std	Y+8, r24	; 0x08
    8bb4:	86 86       	std	Z+14, r8	; 0x0e
    8bb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8bb8:	83 83       	std	Z+3, r24	; 0x03
    8bba:	82 82       	std	Z+2, r8	; 0x02
    8bbc:	82 81       	ldd	r24, Z+2	; 0x02
    8bbe:	81 81       	ldd	r24, Z+1	; 0x01
    8bc0:	81 81       	ldd	r24, Z+1	; 0x01
    8bc2:	81 81       	ldd	r24, Z+1	; 0x01
    8bc4:	82 82       	std	Z+2, r8	; 0x02
    8bc6:	82 83       	std	Z+2, r24	; 0x02
    8bc8:	83 84       	ldd	r8, Z+11	; 0x0b
    8bca:	85 86       	std	Z+13, r8	; 0x0d
    8bcc:	86 87       	std	Z+14, r24	; 0x0e
    8bce:	88 8a       	std	Y+16, r8	; 0x10
    8bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8bd4:	90 91 93 95 	lds	r25, 0x9593
    8bd8:	96 98       	cbi	0x12, 6	; 18
    8bda:	9a 9c       	mul	r9, r10
    8bdc:	9e a0       	ldd	r9, Y+38	; 0x26
    8bde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8be0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8be2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8be4:	af b2       	in	r10, 0x1f	; 31
    8be6:	b4 b7       	in	r27, 0x34	; 52
    8be8:	b9 bc       	out	0x29, r11	; 41
    8bea:	bf c1       	rjmp	.+894    	; 0x8f6a <waves+0x46a>
    8bec:	c4 c7       	rjmp	.+3976   	; 0x9b76 <LBPrintInt+0x24>
    8bee:	ca cd       	rjmp	.-1132   	; 0x8784 <ProcessMusic+0x2ae>
    8bf0:	cf d2       	rcall	.+1438   	; 0x9190 <waves+0x690>
    8bf2:	d5 d8       	rcall	.-3670   	; 0x7d9e <ReadButtons+0x4a>
    8bf4:	db de       	rcall	.-586    	; 0x89ac <steptable+0x24>
    8bf6:	e1 e4       	ldi	r30, 0x41	; 65
    8bf8:	e7 ea       	ldi	r30, 0xA7	; 167
    8bfa:	ed f0       	brhs	.+58     	; 0x8c36 <waves+0x136>
    8bfc:	f4 f7       	brge	.-4      	; 0x8bfa <waves+0xfa>
    8bfe:	fa fd       	.word	0xfdfa	; ????
    8c00:	80 81       	ld	r24, Z
    8c02:	82 83       	std	Z+2, r24	; 0x02
    8c04:	84 85       	ldd	r24, Z+12	; 0x0c
    8c06:	86 87       	std	Z+14, r24	; 0x0e
    8c08:	88 89       	ldd	r24, Y+16	; 0x10
    8c0a:	8a 8b       	std	Y+18, r24	; 0x12
    8c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8c10:	90 91 92 93 	lds	r25, 0x9392
    8c14:	94 95       	.word	0x9594	; ????
    8c16:	96 97       	sbiw	r26, 0x26	; 38
    8c18:	98 99       	sbic	0x13, 0	; 19
    8c1a:	9a 9b       	sbis	0x13, 2	; 19
    8c1c:	9c 9d       	mul	r25, r12
    8c1e:	9e 9f       	mul	r25, r30
    8c20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8c22:	a2 a3       	std	Z+34, r26	; 0x22
    8c24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8c26:	a6 a7       	std	Z+46, r26	; 0x2e
    8c28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8c2a:	aa ab       	std	Y+50, r26	; 0x32
    8c2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8c2e:	ae af       	std	Y+62, r26	; 0x3e
    8c30:	b0 b1       	in	r27, 0x00	; 0
    8c32:	b2 b3       	in	r27, 0x12	; 18
    8c34:	b4 b5       	in	r27, 0x24	; 36
    8c36:	b6 b7       	in	r27, 0x36	; 54
    8c38:	b8 b9       	out	0x08, r27	; 8
    8c3a:	ba bb       	out	0x1a, r27	; 26
    8c3c:	bc bd       	out	0x2c, r27	; 44
    8c3e:	be bf       	out	0x3e, r27	; 62
    8c40:	c0 c1       	rjmp	.+896    	; 0x8fc2 <waves+0x4c2>
    8c42:	c2 c3       	rjmp	.+1924   	; 0x93c8 <waves+0x8c8>
    8c44:	c4 c5       	rjmp	.+2952   	; 0x97ce <InitializeVideoMode+0x2a>
    8c46:	c6 c7       	rjmp	.+3980   	; 0x9bd4 <LBCollides+0x10>
    8c48:	c8 c9       	rjmp	.-3184   	; 0x7fda <EepromReadBlock+0x50>
    8c4a:	ca cb       	rjmp	.-2156   	; 0x83e0 <TriggerFx+0x1a>
    8c4c:	cc cd       	rjmp	.-1128   	; 0x87e6 <ProcessMusic+0x310>
    8c4e:	ce cf       	rjmp	.-100    	; 0x8bec <waves+0xec>
    8c50:	d0 d1       	rcall	.+928    	; 0x8ff2 <waves+0x4f2>
    8c52:	d2 d3       	rcall	.+1956   	; 0x93f8 <waves+0x8f8>
    8c54:	d4 d5       	rcall	.+2984   	; 0x97fe <DrawMap+0x2e>
    8c56:	d6 d7       	rcall	.+4012   	; 0x9c04 <LBCollides+0x40>
    8c58:	d8 d9       	rcall	.-3152   	; 0x800a <GetPrngNumber+0x1a>
    8c5a:	da db       	rcall	.-2124   	; 0x8410 <TriggerFx+0x4a>
    8c5c:	dc dd       	rcall	.-1096   	; 0x8816 <ProcessMusic+0x340>
    8c5e:	de df       	rcall	.-68     	; 0x8c1c <waves+0x11c>
    8c60:	e0 e1       	ldi	r30, 0x10	; 16
    8c62:	e2 e3       	ldi	r30, 0x32	; 50
    8c64:	e4 e5       	ldi	r30, 0x54	; 84
    8c66:	e6 e7       	ldi	r30, 0x76	; 118
    8c68:	e8 e9       	ldi	r30, 0x98	; 152
    8c6a:	ea eb       	ldi	r30, 0xBA	; 186
    8c6c:	ec ed       	ldi	r30, 0xDC	; 220
    8c6e:	ee ef       	ldi	r30, 0xFE	; 254
    8c70:	f0 f1       	brcs	.+124    	; 0x8cee <waves+0x1ee>
    8c72:	f2 f3       	brmi	.-4      	; 0x8c70 <waves+0x170>
    8c74:	f4 f5       	brge	.+124    	; 0x8cf2 <waves+0x1f2>
    8c76:	f6 f7       	brtc	.-4      	; 0x8c74 <waves+0x174>
    8c78:	f8 f9       	.word	0xf9f8	; ????
    8c7a:	fa fb       	.word	0xfbfa	; ????
    8c7c:	fc fd       	.word	0xfdfc	; ????
    8c7e:	fe ff       	.word	0xfffe	; ????
    8c80:	00 01       	movw	r0, r0
    8c82:	02 03       	mulsu	r16, r18
    8c84:	04 05       	cpc	r16, r4
    8c86:	06 07       	cpc	r16, r22
    8c88:	08 09       	sbc	r16, r8
    8c8a:	0a 0b       	sbc	r16, r26
    8c8c:	0c 0d       	add	r16, r12
    8c8e:	0e 0f       	add	r16, r30
    8c90:	10 11       	cpse	r17, r0
    8c92:	12 13       	cpse	r17, r18
    8c94:	14 15       	cp	r17, r4
    8c96:	16 17       	cp	r17, r22
    8c98:	18 19       	sub	r17, r8
    8c9a:	1a 1b       	sub	r17, r26
    8c9c:	1c 1d       	adc	r17, r12
    8c9e:	1e 1f       	adc	r17, r30
    8ca0:	20 21       	and	r18, r0
    8ca2:	22 23       	and	r18, r18
    8ca4:	24 25       	eor	r18, r4
    8ca6:	26 27       	eor	r18, r22
    8ca8:	28 29       	or	r18, r8
    8caa:	2a 2b       	or	r18, r26
    8cac:	2c 2d       	mov	r18, r12
    8cae:	2e 2f       	mov	r18, r30
    8cb0:	30 31       	cpi	r19, 0x10	; 16
    8cb2:	32 33       	cpi	r19, 0x32	; 50
    8cb4:	34 35       	cpi	r19, 0x54	; 84
    8cb6:	36 37       	cpi	r19, 0x76	; 118
    8cb8:	38 39       	cpi	r19, 0x98	; 152
    8cba:	3a 3b       	cpi	r19, 0xBA	; 186
    8cbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8cbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8cc0:	40 41       	sbci	r20, 0x10	; 16
    8cc2:	42 43       	sbci	r20, 0x32	; 50
    8cc4:	44 45       	sbci	r20, 0x54	; 84
    8cc6:	46 47       	sbci	r20, 0x76	; 118
    8cc8:	48 49       	sbci	r20, 0x98	; 152
    8cca:	4a 4b       	sbci	r20, 0xBA	; 186
    8ccc:	4c 4d       	sbci	r20, 0xDC	; 220
    8cce:	4e 4f       	sbci	r20, 0xFE	; 254
    8cd0:	50 51       	subi	r21, 0x10	; 16
    8cd2:	52 53       	subi	r21, 0x32	; 50
    8cd4:	54 55       	subi	r21, 0x54	; 84
    8cd6:	56 57       	subi	r21, 0x76	; 118
    8cd8:	58 59       	subi	r21, 0x98	; 152
    8cda:	5a 5b       	subi	r21, 0xBA	; 186
    8cdc:	5c 5d       	subi	r21, 0xDC	; 220
    8cde:	5e 5f       	subi	r21, 0xFE	; 254
    8ce0:	60 61       	ori	r22, 0x10	; 16
    8ce2:	62 63       	ori	r22, 0x32	; 50
    8ce4:	64 65       	ori	r22, 0x54	; 84
    8ce6:	66 67       	ori	r22, 0x76	; 118
    8ce8:	68 69       	ori	r22, 0x98	; 152
    8cea:	6a 6b       	ori	r22, 0xBA	; 186
    8cec:	6c 6d       	ori	r22, 0xDC	; 220
    8cee:	6e 6f       	ori	r22, 0xFE	; 254
    8cf0:	70 71       	andi	r23, 0x10	; 16
    8cf2:	72 73       	andi	r23, 0x32	; 50
    8cf4:	74 75       	andi	r23, 0x54	; 84
    8cf6:	76 77       	andi	r23, 0x76	; 118
    8cf8:	78 79       	andi	r23, 0x98	; 152
    8cfa:	7a 7b       	andi	r23, 0xBA	; 186
    8cfc:	7c 7d       	andi	r23, 0xDC	; 220
    8cfe:	7e 7f       	andi	r23, 0xFE	; 254
    8d00:	00 02       	muls	r16, r16
    8d02:	04 06       	cpc	r0, r20
    8d04:	08 0a       	sbc	r0, r24
    8d06:	0c 0e       	add	r0, r28
    8d08:	10 12       	cpse	r1, r16
    8d0a:	14 16       	cp	r1, r20
    8d0c:	18 1a       	sub	r1, r24
    8d0e:	1c 1e       	adc	r1, r28
    8d10:	20 22       	and	r2, r16
    8d12:	24 26       	eor	r2, r20
    8d14:	28 2a       	or	r2, r24
    8d16:	2c 2e       	mov	r2, r28
    8d18:	30 32       	cpi	r19, 0x20	; 32
    8d1a:	34 36       	cpi	r19, 0x64	; 100
    8d1c:	38 3a       	cpi	r19, 0xA8	; 168
    8d1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8d20:	40 42       	sbci	r20, 0x20	; 32
    8d22:	44 46       	sbci	r20, 0x64	; 100
    8d24:	48 4a       	sbci	r20, 0xA8	; 168
    8d26:	4c 4e       	sbci	r20, 0xEC	; 236
    8d28:	50 52       	subi	r21, 0x20	; 32
    8d2a:	54 56       	subi	r21, 0x64	; 100
    8d2c:	58 5a       	subi	r21, 0xA8	; 168
    8d2e:	5c 5e       	subi	r21, 0xEC	; 236
    8d30:	60 62       	ori	r22, 0x20	; 32
    8d32:	64 66       	ori	r22, 0x64	; 100
    8d34:	68 6a       	ori	r22, 0xA8	; 168
    8d36:	6c 6e       	ori	r22, 0xEC	; 236
    8d38:	70 72       	andi	r23, 0x20	; 32
    8d3a:	74 76       	andi	r23, 0x64	; 100
    8d3c:	78 7a       	andi	r23, 0xA8	; 168
    8d3e:	7c 7e       	andi	r23, 0xEC	; 236
    8d40:	7f 7d       	andi	r23, 0xDF	; 223
    8d42:	7b 79       	andi	r23, 0x9B	; 155
    8d44:	77 75       	andi	r23, 0x57	; 87
    8d46:	73 71       	andi	r23, 0x13	; 19
    8d48:	6f 6d       	ori	r22, 0xDF	; 223
    8d4a:	6b 69       	ori	r22, 0x9B	; 155
    8d4c:	67 65       	ori	r22, 0x57	; 87
    8d4e:	63 61       	ori	r22, 0x13	; 19
    8d50:	5f 5d       	subi	r21, 0xDF	; 223
    8d52:	5b 59       	subi	r21, 0x9B	; 155
    8d54:	57 55       	subi	r21, 0x57	; 87
    8d56:	53 51       	subi	r21, 0x13	; 19
    8d58:	4f 4d       	sbci	r20, 0xDF	; 223
    8d5a:	4b 49       	sbci	r20, 0x9B	; 155
    8d5c:	47 45       	sbci	r20, 0x57	; 87
    8d5e:	43 41       	sbci	r20, 0x13	; 19
    8d60:	3f 3d       	cpi	r19, 0xDF	; 223
    8d62:	3b 39       	cpi	r19, 0x9B	; 155
    8d64:	37 35       	cpi	r19, 0x57	; 87
    8d66:	33 31       	cpi	r19, 0x13	; 19
    8d68:	2f 2d       	mov	r18, r15
    8d6a:	2b 29       	or	r18, r11
    8d6c:	27 25       	eor	r18, r7
    8d6e:	23 21       	and	r18, r3
    8d70:	1f 1d       	adc	r17, r15
    8d72:	1b 19       	sub	r17, r11
    8d74:	17 15       	cp	r17, r7
    8d76:	13 11       	cpse	r17, r3
    8d78:	0f 0d       	add	r16, r15
    8d7a:	0b 09       	sbc	r16, r11
    8d7c:	07 05       	cpc	r16, r7
    8d7e:	03 01       	movw	r0, r6
    8d80:	ff fd       	.word	0xfdff	; ????
    8d82:	fb f9       	.word	0xf9fb	; ????
    8d84:	f7 f5       	brid	.+124    	; 0x8e02 <waves+0x302>
    8d86:	f3 f1       	brvs	.+124    	; 0x8e04 <waves+0x304>
    8d88:	ef ed       	ldi	r30, 0xDF	; 223
    8d8a:	eb e9       	ldi	r30, 0x9B	; 155
    8d8c:	e7 e5       	ldi	r30, 0x57	; 87
    8d8e:	e3 e1       	ldi	r30, 0x13	; 19
    8d90:	df dd       	rcall	.-1090   	; 0x8950 <SetMixerWave+0x2>
    8d92:	db d9       	rcall	.-3146   	; 0x814a <PatchCommand08+0x1a>
    8d94:	d7 d5       	rcall	.+2990   	; 0x9944 <LBMoveDelta+0xe>
    8d96:	d3 d1       	rcall	.+934    	; 0x913e <waves+0x63e>
    8d98:	cf cd       	rjmp	.-1122   	; 0x8938 <set_note_waves+0xe>
    8d9a:	cb c9       	rjmp	.-3178   	; 0x8132 <PatchCommand08+0x2>
    8d9c:	c7 c5       	rjmp	.+2958   	; 0x992c <ProcessFading+0x48>
    8d9e:	c3 c1       	rjmp	.+902    	; 0x9126 <waves+0x626>
    8da0:	bf bd       	out	0x2f, r27	; 47
    8da2:	bb b9       	out	0x0b, r27	; 11
    8da4:	b7 b5       	in	r27, 0x27	; 39
    8da6:	b3 b1       	in	r27, 0x03	; 3
    8da8:	af ad       	ldd	r26, Y+63	; 0x3f
    8daa:	ab a9       	ldd	r26, Y+51	; 0x33
    8dac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8dae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8db0:	9f 9d       	mul	r25, r15
    8db2:	9b 99       	sbic	0x13, 3	; 19
    8db4:	97 95       	ror	r25
    8db6:	93 91       	.word	0x9193	; ????
    8db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8dba:	8b 89       	ldd	r24, Y+19	; 0x13
    8dbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8dbe:	83 81       	ldd	r24, Z+3	; 0x03
    8dc0:	80 82       	st	Z, r8
    8dc2:	84 86       	std	Z+12, r8	; 0x0c
    8dc4:	88 8a       	std	Y+16, r8	; 0x10
    8dc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8dc8:	90 92 94 96 	sts	0x9694, r9
    8dcc:	98 9a       	sbi	0x13, 0	; 19
    8dce:	9c 9e       	mul	r9, r28
    8dd0:	a0 a2       	std	Z+32, r10	; 0x20
    8dd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8dd4:	a8 aa       	std	Y+48, r10	; 0x30
    8dd6:	ac ae       	std	Y+60, r10	; 0x3c
    8dd8:	b0 b2       	in	r11, 0x10	; 16
    8dda:	b4 b6       	in	r11, 0x34	; 52
    8ddc:	b8 ba       	out	0x18, r11	; 24
    8dde:	bc be       	out	0x3c, r11	; 60
    8de0:	c0 c2       	rjmp	.+1408   	; 0x9362 <waves+0x862>
    8de2:	c4 c6       	rjmp	.+3464   	; 0x9b6c <LBPrintInt+0x1a>
    8de4:	c8 ca       	rjmp	.-2672   	; 0x8376 <TriggerCommon+0xcc>
    8de6:	cc ce       	rjmp	.-616    	; 0x8b80 <waves+0x80>
    8de8:	d0 d2       	rcall	.+1440   	; 0x938a <waves+0x88a>
    8dea:	d4 d6       	rcall	.+3496   	; 0x9b94 <LBPrintInt+0x42>
    8dec:	d8 da       	rcall	.-2640   	; 0x839e <TriggerCommon+0xf4>
    8dee:	dc de       	rcall	.-584    	; 0x8ba8 <waves+0xa8>
    8df0:	e0 e2       	ldi	r30, 0x20	; 32
    8df2:	e4 e6       	ldi	r30, 0x64	; 100
    8df4:	e8 ea       	ldi	r30, 0xA8	; 168
    8df6:	ec ee       	ldi	r30, 0xEC	; 236
    8df8:	f0 f2       	brcs	.-68     	; 0x8db6 <waves+0x2b6>
    8dfa:	f4 f6       	brge	.-68     	; 0x8db8 <waves+0x2b8>
    8dfc:	f8 fa       	.word	0xfaf8	; ????
    8dfe:	fc fe       	.word	0xfefc	; ????
    8e00:	7f 7f       	andi	r23, 0xFF	; 255
    8e02:	7f 7f       	andi	r23, 0xFF	; 255
    8e04:	7f 7f       	andi	r23, 0xFF	; 255
    8e06:	7f 7f       	andi	r23, 0xFF	; 255
    8e08:	7f 7f       	andi	r23, 0xFF	; 255
    8e0a:	7f 7f       	andi	r23, 0xFF	; 255
    8e0c:	7f 7f       	andi	r23, 0xFF	; 255
    8e0e:	7f 7f       	andi	r23, 0xFF	; 255
    8e10:	7f 7f       	andi	r23, 0xFF	; 255
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	80 80       	ld	r8, Z
    8e42:	80 80       	ld	r8, Z
    8e44:	80 80       	ld	r8, Z
    8e46:	80 80       	ld	r8, Z
    8e48:	80 80       	ld	r8, Z
    8e4a:	80 80       	ld	r8, Z
    8e4c:	80 80       	ld	r8, Z
    8e4e:	80 80       	ld	r8, Z
    8e50:	80 80       	ld	r8, Z
    8e52:	80 80       	ld	r8, Z
    8e54:	80 80       	ld	r8, Z
    8e56:	80 80       	ld	r8, Z
    8e58:	80 80       	ld	r8, Z
    8e5a:	80 80       	ld	r8, Z
    8e5c:	80 80       	ld	r8, Z
    8e5e:	80 80       	ld	r8, Z
    8e60:	80 80       	ld	r8, Z
    8e62:	80 80       	ld	r8, Z
    8e64:	80 80       	ld	r8, Z
    8e66:	80 80       	ld	r8, Z
    8e68:	80 80       	ld	r8, Z
    8e6a:	80 80       	ld	r8, Z
    8e6c:	80 80       	ld	r8, Z
    8e6e:	80 80       	ld	r8, Z
    8e70:	80 80       	ld	r8, Z
    8e72:	80 80       	ld	r8, Z
    8e74:	80 80       	ld	r8, Z
    8e76:	80 80       	ld	r8, Z
    8e78:	80 80       	ld	r8, Z
    8e7a:	80 80       	ld	r8, Z
    8e7c:	80 80       	ld	r8, Z
    8e7e:	80 80       	ld	r8, Z
    8e80:	80 80       	ld	r8, Z
    8e82:	80 80       	ld	r8, Z
    8e84:	80 80       	ld	r8, Z
    8e86:	80 80       	ld	r8, Z
    8e88:	80 80       	ld	r8, Z
    8e8a:	80 80       	ld	r8, Z
    8e8c:	80 80       	ld	r8, Z
    8e8e:	80 80       	ld	r8, Z
    8e90:	80 80       	ld	r8, Z
    8e92:	80 80       	ld	r8, Z
    8e94:	80 80       	ld	r8, Z
    8e96:	80 80       	ld	r8, Z
    8e98:	80 80       	ld	r8, Z
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 80       	ld	r8, Z
    8ef6:	80 80       	ld	r8, Z
    8ef8:	80 80       	ld	r8, Z
    8efa:	80 80       	ld	r8, Z
    8efc:	80 80       	ld	r8, Z
    8efe:	80 80       	ld	r8, Z
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7f 7f       	andi	r23, 0xFF	; 255
    8f46:	7f 7f       	andi	r23, 0xFF	; 255
    8f48:	7f 7f       	andi	r23, 0xFF	; 255
    8f4a:	7f 7f       	andi	r23, 0xFF	; 255
    8f4c:	7f 7f       	andi	r23, 0xFF	; 255
    8f4e:	7f 7f       	andi	r23, 0xFF	; 255
    8f50:	7f 7f       	andi	r23, 0xFF	; 255
    8f52:	7f 7f       	andi	r23, 0xFF	; 255
    8f54:	7f 7f       	andi	r23, 0xFF	; 255
    8f56:	7f 7f       	andi	r23, 0xFF	; 255
    8f58:	7f 7f       	andi	r23, 0xFF	; 255
    8f5a:	7f 7f       	andi	r23, 0xFF	; 255
    8f5c:	7f 7f       	andi	r23, 0xFF	; 255
    8f5e:	7f 7f       	andi	r23, 0xFF	; 255
    8f60:	7f 7f       	andi	r23, 0xFF	; 255
    8f62:	7f 7f       	andi	r23, 0xFF	; 255
    8f64:	7f 7f       	andi	r23, 0xFF	; 255
    8f66:	7f 7f       	andi	r23, 0xFF	; 255
    8f68:	7f 7f       	andi	r23, 0xFF	; 255
    8f6a:	7f 7f       	andi	r23, 0xFF	; 255
    8f6c:	7f 7f       	andi	r23, 0xFF	; 255
    8f6e:	7f 7f       	andi	r23, 0xFF	; 255
    8f70:	7f 7f       	andi	r23, 0xFF	; 255
    8f72:	7f 7f       	andi	r23, 0xFF	; 255
    8f74:	7f 7f       	andi	r23, 0xFF	; 255
    8f76:	7f 7f       	andi	r23, 0xFF	; 255
    8f78:	7f 7f       	andi	r23, 0xFF	; 255
    8f7a:	7f 7f       	andi	r23, 0xFF	; 255
    8f7c:	7f 7f       	andi	r23, 0xFF	; 255
    8f7e:	7f 7f       	andi	r23, 0xFF	; 255
    8f80:	80 80       	ld	r8, Z
    8f82:	80 80       	ld	r8, Z
    8f84:	80 80       	ld	r8, Z
    8f86:	80 80       	ld	r8, Z
    8f88:	80 80       	ld	r8, Z
    8f8a:	80 80       	ld	r8, Z
    8f8c:	80 80       	ld	r8, Z
    8f8e:	80 80       	ld	r8, Z
    8f90:	80 80       	ld	r8, Z
    8f92:	80 80       	ld	r8, Z
    8f94:	80 80       	ld	r8, Z
    8f96:	80 80       	ld	r8, Z
    8f98:	80 80       	ld	r8, Z
    8f9a:	80 80       	ld	r8, Z
    8f9c:	80 80       	ld	r8, Z
    8f9e:	80 80       	ld	r8, Z
    8fa0:	80 80       	ld	r8, Z
    8fa2:	80 80       	ld	r8, Z
    8fa4:	80 80       	ld	r8, Z
    8fa6:	80 80       	ld	r8, Z
    8fa8:	80 80       	ld	r8, Z
    8faa:	80 80       	ld	r8, Z
    8fac:	80 80       	ld	r8, Z
    8fae:	80 80       	ld	r8, Z
    8fb0:	80 80       	ld	r8, Z
    8fb2:	80 80       	ld	r8, Z
    8fb4:	80 80       	ld	r8, Z
    8fb6:	80 80       	ld	r8, Z
    8fb8:	80 80       	ld	r8, Z
    8fba:	80 80       	ld	r8, Z
    8fbc:	80 80       	ld	r8, Z
    8fbe:	80 80       	ld	r8, Z
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	7f 7f       	andi	r23, 0xFF	; 255
    9002:	7f 7f       	andi	r23, 0xFF	; 255
    9004:	7f 7f       	andi	r23, 0xFF	; 255
    9006:	7f 7f       	andi	r23, 0xFF	; 255
    9008:	7f 7f       	andi	r23, 0xFF	; 255
    900a:	7f 7f       	andi	r23, 0xFF	; 255
    900c:	7f 7f       	andi	r23, 0xFF	; 255
    900e:	7f 7f       	andi	r23, 0xFF	; 255
    9010:	7f 7f       	andi	r23, 0xFF	; 255
    9012:	7f 7f       	andi	r23, 0xFF	; 255
    9014:	7f 7f       	andi	r23, 0xFF	; 255
    9016:	7f 7f       	andi	r23, 0xFF	; 255
    9018:	7f 7f       	andi	r23, 0xFF	; 255
    901a:	7f 7f       	andi	r23, 0xFF	; 255
    901c:	7f 7f       	andi	r23, 0xFF	; 255
    901e:	7f 7f       	andi	r23, 0xFF	; 255
    9020:	7f 7f       	andi	r23, 0xFF	; 255
    9022:	7f 7f       	andi	r23, 0xFF	; 255
    9024:	7f 7f       	andi	r23, 0xFF	; 255
    9026:	7f 7f       	andi	r23, 0xFF	; 255
    9028:	7f 7f       	andi	r23, 0xFF	; 255
    902a:	7f 7f       	andi	r23, 0xFF	; 255
    902c:	7f 7f       	andi	r23, 0xFF	; 255
    902e:	7f 7f       	andi	r23, 0xFF	; 255
    9030:	7f 7f       	andi	r23, 0xFF	; 255
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7f       	andi	r23, 0xFF	; 255
    904e:	7f 7f       	andi	r23, 0xFF	; 255
    9050:	7f 7f       	andi	r23, 0xFF	; 255
    9052:	7f 7f       	andi	r23, 0xFF	; 255
    9054:	7f 7f       	andi	r23, 0xFF	; 255
    9056:	7f 7f       	andi	r23, 0xFF	; 255
    9058:	7f 7f       	andi	r23, 0xFF	; 255
    905a:	7f 7f       	andi	r23, 0xFF	; 255
    905c:	7f 7f       	andi	r23, 0xFF	; 255
    905e:	7f 7f       	andi	r23, 0xFF	; 255
    9060:	7f 7f       	andi	r23, 0xFF	; 255
    9062:	7f 7f       	andi	r23, 0xFF	; 255
    9064:	7f 7f       	andi	r23, 0xFF	; 255
    9066:	7f 7f       	andi	r23, 0xFF	; 255
    9068:	7f 7f       	andi	r23, 0xFF	; 255
    906a:	7f 7f       	andi	r23, 0xFF	; 255
    906c:	7f 7f       	andi	r23, 0xFF	; 255
    906e:	7f 7f       	andi	r23, 0xFF	; 255
    9070:	7f 7f       	andi	r23, 0xFF	; 255
    9072:	7f 7f       	andi	r23, 0xFF	; 255
    9074:	7f 7f       	andi	r23, 0xFF	; 255
    9076:	7f 7f       	andi	r23, 0xFF	; 255
    9078:	7f 7f       	andi	r23, 0xFF	; 255
    907a:	7f 7f       	andi	r23, 0xFF	; 255
    907c:	7f 7f       	andi	r23, 0xFF	; 255
    907e:	7f 7f       	andi	r23, 0xFF	; 255
    9080:	7f 7f       	andi	r23, 0xFF	; 255
    9082:	7f 7f       	andi	r23, 0xFF	; 255
    9084:	7f 7f       	andi	r23, 0xFF	; 255
    9086:	7f 7f       	andi	r23, 0xFF	; 255
    9088:	7f 7f       	andi	r23, 0xFF	; 255
    908a:	7f 7f       	andi	r23, 0xFF	; 255
    908c:	7f 7f       	andi	r23, 0xFF	; 255
    908e:	7f 7f       	andi	r23, 0xFF	; 255
    9090:	7f 7f       	andi	r23, 0xFF	; 255
    9092:	7f 7f       	andi	r23, 0xFF	; 255
    9094:	7f 7f       	andi	r23, 0xFF	; 255
    9096:	7f 7f       	andi	r23, 0xFF	; 255
    9098:	7f 7f       	andi	r23, 0xFF	; 255
    909a:	7f 7f       	andi	r23, 0xFF	; 255
    909c:	7f 7f       	andi	r23, 0xFF	; 255
    909e:	7f 7f       	andi	r23, 0xFF	; 255
    90a0:	7f 7f       	andi	r23, 0xFF	; 255
    90a2:	7f 7f       	andi	r23, 0xFF	; 255
    90a4:	7f 7f       	andi	r23, 0xFF	; 255
    90a6:	7f 7f       	andi	r23, 0xFF	; 255
    90a8:	7f 7f       	andi	r23, 0xFF	; 255
    90aa:	7f 7f       	andi	r23, 0xFF	; 255
    90ac:	7f 7f       	andi	r23, 0xFF	; 255
    90ae:	7f 7f       	andi	r23, 0xFF	; 255
    90b0:	7f 7f       	andi	r23, 0xFF	; 255
    90b2:	7f 7f       	andi	r23, 0xFF	; 255
    90b4:	7f 7f       	andi	r23, 0xFF	; 255
    90b6:	7f 7f       	andi	r23, 0xFF	; 255
    90b8:	7f 7f       	andi	r23, 0xFF	; 255
    90ba:	7f 7f       	andi	r23, 0xFF	; 255
    90bc:	7f 7f       	andi	r23, 0xFF	; 255
    90be:	7f 7f       	andi	r23, 0xFF	; 255
    90c0:	80 80       	ld	r8, Z
    90c2:	80 80       	ld	r8, Z
    90c4:	80 80       	ld	r8, Z
    90c6:	80 80       	ld	r8, Z
    90c8:	80 80       	ld	r8, Z
    90ca:	80 80       	ld	r8, Z
    90cc:	80 80       	ld	r8, Z
    90ce:	80 80       	ld	r8, Z
    90d0:	80 80       	ld	r8, Z
    90d2:	80 80       	ld	r8, Z
    90d4:	80 80       	ld	r8, Z
    90d6:	80 80       	ld	r8, Z
    90d8:	80 80       	ld	r8, Z
    90da:	80 80       	ld	r8, Z
    90dc:	80 80       	ld	r8, Z
    90de:	80 80       	ld	r8, Z
    90e0:	80 80       	ld	r8, Z
    90e2:	80 80       	ld	r8, Z
    90e4:	80 80       	ld	r8, Z
    90e6:	80 80       	ld	r8, Z
    90e8:	80 80       	ld	r8, Z
    90ea:	80 80       	ld	r8, Z
    90ec:	80 80       	ld	r8, Z
    90ee:	80 80       	ld	r8, Z
    90f0:	80 80       	ld	r8, Z
    90f2:	80 80       	ld	r8, Z
    90f4:	80 80       	ld	r8, Z
    90f6:	80 80       	ld	r8, Z
    90f8:	80 80       	ld	r8, Z
    90fa:	80 80       	ld	r8, Z
    90fc:	80 80       	ld	r8, Z
    90fe:	80 80       	ld	r8, Z
    9100:	03 09       	sbc	r16, r3
    9102:	13 1e       	adc	r1, r19
    9104:	28 31       	cpi	r18, 0x18	; 24
    9106:	3a 40       	sbci	r19, 0x0A	; 10
    9108:	46 4c       	sbci	r20, 0xC6	; 198
    910a:	50 54       	subi	r21, 0x40	; 64
    910c:	58 5b       	subi	r21, 0xB8	; 184
    910e:	5e 61       	ori	r21, 0x1E	; 30
    9110:	63 65       	ori	r22, 0x53	; 83
    9112:	67 69       	ori	r22, 0x97	; 151
    9114:	6b 6c       	ori	r22, 0xCB	; 203
    9116:	6e 6f       	ori	r22, 0xFE	; 254
    9118:	70 71       	andi	r23, 0x10	; 16
    911a:	72 73       	andi	r23, 0x32	; 50
    911c:	74 75       	andi	r23, 0x54	; 84
    911e:	76 77       	andi	r23, 0x76	; 118
    9120:	77 78       	andi	r23, 0x87	; 135
    9122:	79 79       	andi	r23, 0x99	; 153
    9124:	7a 7a       	andi	r23, 0xAA	; 170
    9126:	7b 7b       	andi	r23, 0xBB	; 187
    9128:	7c 7c       	andi	r23, 0xCC	; 204
    912a:	7c 7d       	andi	r23, 0xDC	; 220
    912c:	7d 7d       	andi	r23, 0xDD	; 221
    912e:	7e 7e       	andi	r23, 0xEE	; 238
    9130:	7e 7e       	andi	r23, 0xEE	; 238
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7f 7f       	andi	r23, 0xFF	; 255
    9148:	7f 7f       	andi	r23, 0xFF	; 255
    914a:	7f 7f       	andi	r23, 0xFF	; 255
    914c:	7f 7e       	andi	r23, 0xEF	; 239
    914e:	7e 7e       	andi	r23, 0xEE	; 238
    9150:	7e 7d       	andi	r23, 0xDE	; 222
    9152:	7d 7d       	andi	r23, 0xDD	; 221
    9154:	7c 7c       	andi	r23, 0xCC	; 204
    9156:	7c 7b       	andi	r23, 0xBC	; 188
    9158:	7b 7a       	andi	r23, 0xAB	; 171
    915a:	7a 79       	andi	r23, 0x9A	; 154
    915c:	79 78       	andi	r23, 0x89	; 137
    915e:	77 77       	andi	r23, 0x77	; 119
    9160:	76 75       	andi	r23, 0x56	; 86
    9162:	74 73       	andi	r23, 0x34	; 52
    9164:	72 71       	andi	r23, 0x12	; 18
    9166:	70 6f       	ori	r23, 0xF0	; 240
    9168:	6e 6c       	ori	r22, 0xCE	; 206
    916a:	6b 69       	ori	r22, 0x9B	; 155
    916c:	67 65       	ori	r22, 0x57	; 87
    916e:	63 61       	ori	r22, 0x13	; 19
    9170:	5e 5b       	subi	r21, 0xBE	; 190
    9172:	58 54       	subi	r21, 0x48	; 72
    9174:	50 4c       	sbci	r21, 0xC0	; 192
    9176:	46 40       	sbci	r20, 0x06	; 6
    9178:	3a 31       	cpi	r19, 0x1A	; 26
    917a:	28 1e       	adc	r2, r24
    917c:	13 09       	sbc	r17, r3
    917e:	03 00       	.word	0x0003	; ????
    9180:	c6 cc       	rjmp	.-1652   	; 0x8b0e <waves+0xe>
    9182:	d5 db       	rcall	.-2134   	; 0x892e <set_note_waves+0x4>
    9184:	df e3       	ldi	r29, 0x3F	; 63
    9186:	e5 e7       	ldi	r30, 0x75	; 117
    9188:	e9 ea       	ldi	r30, 0xA9	; 169
    918a:	eb ec       	ldi	r30, 0xCB	; 203
    918c:	ed ee       	ldi	r30, 0xED	; 237
    918e:	ef ef       	ldi	r30, 0xFF	; 255
    9190:	f0 f0       	brcs	.+60     	; 0x91ce <waves+0x6ce>
    9192:	f0 f1       	brcs	.+124    	; 0x9210 <waves+0x710>
    9194:	f1 f1       	breq	.+124    	; 0x9212 <waves+0x712>
    9196:	f1 f2       	breq	.-68     	; 0x9154 <waves+0x654>
    9198:	f2 f2       	brmi	.-68     	; 0x9156 <waves+0x656>
    919a:	f2 f2       	brmi	.-68     	; 0x9158 <waves+0x658>
    919c:	f2 f2       	brmi	.-68     	; 0x915a <waves+0x65a>
    919e:	f2 f3       	brmi	.-4      	; 0x919c <waves+0x69c>
    91a0:	f3 f3       	brvs	.-4      	; 0x919e <waves+0x69e>
    91a2:	f3 f3       	brvs	.-4      	; 0x91a0 <waves+0x6a0>
    91a4:	f3 f3       	brvs	.-4      	; 0x91a2 <waves+0x6a2>
    91a6:	f3 f3       	brvs	.-4      	; 0x91a4 <waves+0x6a4>
    91a8:	f3 f3       	brvs	.-4      	; 0x91a6 <waves+0x6a6>
    91aa:	f3 f3       	brvs	.-4      	; 0x91a8 <waves+0x6a8>
    91ac:	f3 f3       	brvs	.-4      	; 0x91aa <waves+0x6aa>
    91ae:	f3 f3       	brvs	.-4      	; 0x91ac <waves+0x6ac>
    91b0:	f3 f3       	brvs	.-4      	; 0x91ae <waves+0x6ae>
    91b2:	f3 f3       	brvs	.-4      	; 0x91b0 <waves+0x6b0>
    91b4:	f3 f3       	brvs	.-4      	; 0x91b2 <waves+0x6b2>
    91b6:	f3 f3       	brvs	.-4      	; 0x91b4 <waves+0x6b4>
    91b8:	f3 f3       	brvs	.-4      	; 0x91b6 <waves+0x6b6>
    91ba:	f3 f3       	brvs	.-4      	; 0x91b8 <waves+0x6b8>
    91bc:	f3 f3       	brvs	.-4      	; 0x91ba <waves+0x6ba>
    91be:	f3 f3       	brvs	.-4      	; 0x91bc <waves+0x6bc>
    91c0:	f3 f3       	brvs	.-4      	; 0x91be <waves+0x6be>
    91c2:	f3 f3       	brvs	.-4      	; 0x91c0 <waves+0x6c0>
    91c4:	f3 f3       	brvs	.-4      	; 0x91c2 <waves+0x6c2>
    91c6:	f3 f3       	brvs	.-4      	; 0x91c4 <waves+0x6c4>
    91c8:	f3 f3       	brvs	.-4      	; 0x91c6 <waves+0x6c6>
    91ca:	f3 f3       	brvs	.-4      	; 0x91c8 <waves+0x6c8>
    91cc:	f3 f3       	brvs	.-4      	; 0x91ca <waves+0x6ca>
    91ce:	f3 f3       	brvs	.-4      	; 0x91cc <waves+0x6cc>
    91d0:	f3 f3       	brvs	.-4      	; 0x91ce <waves+0x6ce>
    91d2:	f3 f3       	brvs	.-4      	; 0x91d0 <waves+0x6d0>
    91d4:	f3 f3       	brvs	.-4      	; 0x91d2 <waves+0x6d2>
    91d6:	f3 f3       	brvs	.-4      	; 0x91d4 <waves+0x6d4>
    91d8:	f3 f3       	brvs	.-4      	; 0x91d6 <waves+0x6d6>
    91da:	f3 f3       	brvs	.-4      	; 0x91d8 <waves+0x6d8>
    91dc:	f3 f3       	brvs	.-4      	; 0x91da <waves+0x6da>
    91de:	f3 f3       	brvs	.-4      	; 0x91dc <waves+0x6dc>
    91e0:	f2 f2       	brmi	.-68     	; 0x919e <waves+0x69e>
    91e2:	f2 f2       	brmi	.-68     	; 0x91a0 <waves+0x6a0>
    91e4:	f2 f2       	brmi	.-68     	; 0x91a2 <waves+0x6a2>
    91e6:	f2 f2       	brmi	.-68     	; 0x91a4 <waves+0x6a4>
    91e8:	f1 f1       	breq	.+124    	; 0x9266 <waves+0x766>
    91ea:	f1 f1       	breq	.+124    	; 0x9268 <waves+0x768>
    91ec:	f0 f0       	brcs	.+60     	; 0x922a <waves+0x72a>
    91ee:	f0 ef       	ldi	r31, 0xF0	; 240
    91f0:	ef ee       	ldi	r30, 0xEF	; 239
    91f2:	ed ec       	ldi	r30, 0xCD	; 205
    91f4:	eb ea       	ldi	r30, 0xAB	; 171
    91f6:	e9 e7       	ldi	r30, 0x79	; 121
    91f8:	e5 e3       	ldi	r30, 0x35	; 53
    91fa:	df db       	rcall	.-2114   	; 0x89ba <steptable+0x32>
    91fc:	d5 cc       	rjmp	.-1622   	; 0x8ba8 <waves+0xa8>
    91fe:	c6 00       	.word	0x00c6	; ????
    9200:	00 28       	or	r0, r0
    9202:	3d 42       	sbci	r19, 0x2D	; 45
    9204:	30 2d       	mov	r19, r0
    9206:	2c 2b       	or	r18, r28
    9208:	2c 2d       	mov	r18, r12
    920a:	2e 2f       	mov	r18, r30
    920c:	30 32       	cpi	r19, 0x20	; 32
    920e:	33 35       	cpi	r19, 0x53	; 83
    9210:	37 39       	cpi	r19, 0x97	; 151
    9212:	3b 3d       	cpi	r19, 0xDB	; 219
    9214:	3f 41       	sbci	r19, 0x1F	; 31
    9216:	43 45       	sbci	r20, 0x53	; 83
    9218:	48 4a       	sbci	r20, 0xA8	; 168
    921a:	4c 4e       	sbci	r20, 0xEC	; 236
    921c:	50 53       	subi	r21, 0x30	; 48
    921e:	55 57       	subi	r21, 0x75	; 117
    9220:	59 5b       	subi	r21, 0xB9	; 185
    9222:	5d 5f       	subi	r21, 0xFD	; 253
    9224:	61 63       	ori	r22, 0x31	; 49
    9226:	65 67       	ori	r22, 0x75	; 117
    9228:	69 6b       	ori	r22, 0xB9	; 185
    922a:	6c 6e       	ori	r22, 0xEC	; 236
    922c:	70 71       	andi	r23, 0x10	; 16
    922e:	73 74       	andi	r23, 0x43	; 67
    9230:	75 77       	andi	r23, 0x75	; 117
    9232:	78 79       	andi	r23, 0x98	; 152
    9234:	7a 7b       	andi	r23, 0xBA	; 186
    9236:	7c 7d       	andi	r23, 0xDC	; 220
    9238:	7d 7e       	andi	r23, 0xED	; 237
    923a:	7e 7f       	andi	r23, 0xFE	; 254
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7e 7e       	andi	r23, 0xEE	; 238
    9248:	7d 7d       	andi	r23, 0xDD	; 221
    924a:	7c 7b       	andi	r23, 0xBC	; 188
    924c:	7a 79       	andi	r23, 0x9A	; 154
    924e:	78 77       	andi	r23, 0x78	; 120
    9250:	75 74       	andi	r23, 0x45	; 69
    9252:	73 71       	andi	r23, 0x13	; 19
    9254:	70 6e       	ori	r23, 0xE0	; 224
    9256:	6c 6b       	ori	r22, 0xBC	; 188
    9258:	69 67       	ori	r22, 0x79	; 121
    925a:	65 63       	ori	r22, 0x35	; 53
    925c:	61 5f       	subi	r22, 0xF1	; 241
    925e:	5d 5b       	subi	r21, 0xBD	; 189
    9260:	59 57       	subi	r21, 0x79	; 121
    9262:	55 53       	subi	r21, 0x35	; 53
    9264:	50 4e       	sbci	r21, 0xE0	; 224
    9266:	4c 4a       	sbci	r20, 0xAC	; 172
    9268:	48 45       	sbci	r20, 0x58	; 88
    926a:	43 41       	sbci	r20, 0x13	; 19
    926c:	3f 3d       	cpi	r19, 0xDF	; 223
    926e:	3b 39       	cpi	r19, 0x9B	; 155
    9270:	37 35       	cpi	r19, 0x57	; 87
    9272:	33 32       	cpi	r19, 0x23	; 35
    9274:	30 2f       	mov	r19, r16
    9276:	2e 2d       	mov	r18, r14
    9278:	2c 2b       	or	r18, r28
    927a:	2c 2d       	mov	r18, r12
    927c:	30 42       	sbci	r19, 0x20	; 32
    927e:	3d 28       	or	r3, r13
    9280:	00 e9       	ldi	r16, 0x90	; 144
    9282:	e5 fe       	sbrs	r14, 5
    9284:	d4 d7       	rcall	.+4008   	; 0xa22e <init_player_shot+0x3ea>
    9286:	d7 d7       	rcall	.+4014   	; 0xa236 <init_player_shot+0x3f2>
    9288:	d6 d4       	rcall	.+2476   	; 0x9c36 <LBRandom+0x1e>
    928a:	d2 d0       	rcall	.+420    	; 0x9430 <waves+0x930>
    928c:	ce cc       	rjmp	.-1636   	; 0x8c2a <waves+0x12a>
    928e:	ca c8       	rjmp	.-3692   	; 0x8424 <TriggerFx+0x5e>
    9290:	c6 c3       	rjmp	.+1932   	; 0x9a1e <LBGetJoyPadState+0x46>
    9292:	c1 bf       	out	0x31, r28	; 49
    9294:	bd ba       	out	0x1d, r11	; 29
    9296:	b8 b6       	in	r11, 0x38	; 56
    9298:	b4 b1       	in	r27, 0x04	; 4
    929a:	af ad       	ldd	r26, Y+63	; 0x3f
    929c:	ab a9       	ldd	r26, Y+51	; 0x33
    929e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    92a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    92a2:	9f 9e       	mul	r9, r31
    92a4:	9c 9a       	sbi	0x13, 4	; 19
    92a6:	99 97       	sbiw	r26, 0x29	; 41
    92a8:	95 94       	asr	r9
    92aa:	93 91       	.word	0x9193	; ????
    92ac:	90 8f       	std	Z+24, r25	; 0x18
    92ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    92b0:	8b 8a       	std	Y+19, r8	; 0x13
    92b2:	89 88       	ldd	r8, Y+17	; 0x11
    92b4:	88 87       	std	Y+8, r24	; 0x08
    92b6:	86 85       	ldd	r24, Z+14	; 0x0e
    92b8:	85 84       	ldd	r8, Z+13	; 0x0d
    92ba:	84 84       	ldd	r8, Z+12	; 0x0c
    92bc:	83 83       	std	Z+3, r24	; 0x03
    92be:	83 83       	std	Z+3, r24	; 0x03
    92c0:	83 83       	std	Z+3, r24	; 0x03
    92c2:	83 83       	std	Z+3, r24	; 0x03
    92c4:	83 84       	ldd	r8, Z+11	; 0x0b
    92c6:	84 84       	ldd	r8, Z+12	; 0x0c
    92c8:	85 85       	ldd	r24, Z+13	; 0x0d
    92ca:	86 87       	std	Z+14, r24	; 0x0e
    92cc:	88 88       	ldd	r8, Y+16	; 0x10
    92ce:	89 8a       	std	Y+17, r8	; 0x11
    92d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    92d2:	8d 8f       	std	Y+29, r24	; 0x1d
    92d4:	90 91 93 94 	lds	r25, 0x9493
    92d8:	95 97       	sbiw	r26, 0x25	; 37
    92da:	99 9a       	sbi	0x13, 1	; 19
    92dc:	9c 9e       	mul	r9, r28
    92de:	9f a1       	ldd	r25, Y+39	; 0x27
    92e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    92e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    92e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    92e6:	af b1       	in	r26, 0x0f	; 15
    92e8:	b4 b6       	in	r11, 0x34	; 52
    92ea:	b8 ba       	out	0x18, r11	; 24
    92ec:	bd bf       	out	0x3d, r27	; 61
    92ee:	c1 c3       	rjmp	.+1922   	; 0x9a72 <LBPrintChar+0x4>
    92f0:	c6 c8       	rjmp	.-3700   	; 0x847e <TriggerNote+0x28>
    92f2:	ca cc       	rjmp	.-1644   	; 0x8c88 <waves+0x188>
    92f4:	ce d0       	rcall	.+412    	; 0x9492 <waves+0x992>
    92f6:	d2 d4       	rcall	.+2468   	; 0x9c9c <LBMapSprite+0x3a>
    92f8:	d6 d7       	rcall	.+4012   	; 0xa2a6 <init_boss_shot+0x24>
    92fa:	d7 d7       	rcall	.+4014   	; 0xa2aa <init_boss_shot+0x28>
    92fc:	d4 fe       	sbrs	r13, 4
    92fe:	e5 e9       	ldi	r30, 0x95	; 149
    9300:	f9 f8       	.word	0xf8f9	; ????
    9302:	f9 f5       	brne	.+126    	; 0x9382 <waves+0x882>
    9304:	eb e1       	ldi	r30, 0x1B	; 27
    9306:	dd de       	rcall	.-582    	; 0x90c2 <waves+0x5c2>
    9308:	e0 e2       	ldi	r30, 0x20	; 32
    930a:	e4 e5       	ldi	r30, 0x54	; 84
    930c:	e6 e5       	ldi	r30, 0x56	; 86
    930e:	e4 e2       	ldi	r30, 0x24	; 36
    9310:	de d9       	rcall	.-3140   	; 0x86ce <ProcessMusic+0x1f8>
    9312:	d2 ca       	rjmp	.-2652   	; 0x88b8 <ProcessMusic+0x3e2>
    9314:	c1 b7       	in	r28, 0x31	; 49
    9316:	ac a2       	std	Y+36, r10	; 0x24
    9318:	99 91       	ld	r25, Y+
    931a:	8a 86       	std	Y+10, r8	; 0x0a
    931c:	83 81       	ldd	r24, Z+3	; 0x03
    931e:	80 80       	ld	r8, Z
    9320:	81 82       	std	Z+1, r8	; 0x01
    9322:	83 85       	ldd	r24, Z+11	; 0x0b
    9324:	86 88       	ldd	r8, Z+22	; 0x16
    9326:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9328:	8d 8f       	std	Y+29, r24	; 0x1d
    932a:	90 92 93 95 	sts	0x9593, r9
    932e:	96 97       	sbiw	r26, 0x26	; 38
    9330:	98 99       	sbic	0x13, 0	; 19
    9332:	9a 9b       	sbis	0x13, 2	; 19
    9334:	9b 9c       	mul	r9, r11
    9336:	9d 9d       	mul	r25, r13
    9338:	9d 9e       	mul	r9, r29
    933a:	9e 9e       	mul	r9, r30
    933c:	9f 9f       	mul	r25, r31
    933e:	9f 9f       	mul	r25, r31
    9340:	9f 9f       	mul	r25, r31
    9342:	9f 9e       	mul	r9, r31
    9344:	9e 9e       	mul	r9, r30
    9346:	9d 9d       	mul	r25, r13
    9348:	9d 9c       	mul	r9, r13
    934a:	9b 9b       	sbis	0x13, 3	; 19
    934c:	9a 99       	sbic	0x13, 2	; 19
    934e:	98 97       	sbiw	r26, 0x28	; 40
    9350:	96 95       	lsr	r25
    9352:	93 92       	.word	0x9293	; ????
    9354:	90 8f       	std	Z+24, r25	; 0x18
    9356:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9358:	8a 88       	ldd	r8, Y+18	; 0x12
    935a:	86 85       	ldd	r24, Z+14	; 0x0e
    935c:	83 82       	std	Z+3, r8	; 0x03
    935e:	81 80       	ldd	r8, Z+1	; 0x01
    9360:	80 81       	ld	r24, Z
    9362:	83 86       	std	Z+11, r8	; 0x0b
    9364:	8a 91       	ld	r24, -Y
    9366:	99 a2       	std	Y+33, r9	; 0x21
    9368:	ac b7       	in	r26, 0x3c	; 60
    936a:	c1 ca       	rjmp	.-2686   	; 0x88ee <ProcessMusic+0x418>
    936c:	d2 d9       	rcall	.-3164   	; 0x8712 <ProcessMusic+0x23c>
    936e:	de e2       	ldi	r29, 0x2E	; 46
    9370:	e4 e5       	ldi	r30, 0x54	; 84
    9372:	e6 e5       	ldi	r30, 0x56	; 86
    9374:	e4 e2       	ldi	r30, 0x24	; 36
    9376:	e0 de       	rcall	.-576    	; 0x9138 <waves+0x638>
    9378:	dd e1       	ldi	r29, 0x1D	; 29
    937a:	eb f5       	brvc	.+122    	; 0x93f6 <waves+0x8f6>
    937c:	f9 f8       	.word	0xf8f9	; ????
    937e:	f9 00       	.word	0x00f9	; ????
    9380:	07 08       	sbc	r0, r7
    9382:	07 0b       	sbc	r16, r23
    9384:	15 1f       	adc	r17, r21
    9386:	23 22       	and	r2, r19
    9388:	20 1e       	adc	r2, r16
    938a:	1c 1b       	sub	r17, r28
    938c:	1a 1b       	sub	r17, r26
    938e:	1c 1e       	adc	r1, r28
    9390:	22 27       	eor	r18, r18
    9392:	2e 36       	cpi	r18, 0x6E	; 110
    9394:	3f 49       	sbci	r19, 0x9F	; 159
    9396:	54 5e       	subi	r21, 0xE4	; 228
    9398:	67 6f       	ori	r22, 0xF7	; 247
    939a:	76 7a       	andi	r23, 0xA6	; 166
    939c:	7e 7f       	andi	r23, 0xFE	; 254
    939e:	7f 7f       	andi	r23, 0xFF	; 255
    93a0:	7f 7e       	andi	r23, 0xEF	; 239
    93a2:	7d 7b       	andi	r23, 0xBD	; 189
    93a4:	7a 78       	andi	r23, 0x8A	; 138
    93a6:	76 74       	andi	r23, 0x46	; 70
    93a8:	73 71       	andi	r23, 0x13	; 19
    93aa:	70 6e       	ori	r23, 0xE0	; 224
    93ac:	6d 6b       	ori	r22, 0xBD	; 189
    93ae:	6a 69       	ori	r22, 0x9A	; 154
    93b0:	68 67       	ori	r22, 0x78	; 120
    93b2:	66 65       	ori	r22, 0x56	; 86
    93b4:	65 64       	ori	r22, 0x45	; 69
    93b6:	64 63       	ori	r22, 0x34	; 52
    93b8:	63 62       	ori	r22, 0x23	; 35
    93ba:	62 62       	ori	r22, 0x22	; 34
    93bc:	61 61       	ori	r22, 0x11	; 17
    93be:	61 61       	ori	r22, 0x11	; 17
    93c0:	61 61       	ori	r22, 0x11	; 17
    93c2:	61 62       	ori	r22, 0x21	; 33
    93c4:	62 62       	ori	r22, 0x22	; 34
    93c6:	63 63       	ori	r22, 0x33	; 51
    93c8:	63 64       	ori	r22, 0x43	; 67
    93ca:	65 65       	ori	r22, 0x55	; 85
    93cc:	66 67       	ori	r22, 0x76	; 118
    93ce:	68 69       	ori	r22, 0x98	; 152
    93d0:	6a 6b       	ori	r22, 0xBA	; 186
    93d2:	6d 6e       	ori	r22, 0xED	; 237
    93d4:	70 71       	andi	r23, 0x10	; 16
    93d6:	73 74       	andi	r23, 0x43	; 67
    93d8:	76 78       	andi	r23, 0x86	; 134
    93da:	7a 7b       	andi	r23, 0xBA	; 186
    93dc:	7d 7e       	andi	r23, 0xED	; 237
    93de:	7f 7f       	andi	r23, 0xFF	; 255
    93e0:	7f 7f       	andi	r23, 0xFF	; 255
    93e2:	7e 7a       	andi	r23, 0xAE	; 174
    93e4:	76 6f       	ori	r23, 0xF6	; 246
    93e6:	67 5e       	subi	r22, 0xE7	; 231
    93e8:	54 49       	sbci	r21, 0x94	; 148
    93ea:	3f 36       	cpi	r19, 0x6F	; 111
    93ec:	2e 27       	eor	r18, r30
    93ee:	22 1e       	adc	r2, r18
    93f0:	1c 1b       	sub	r17, r28
    93f2:	1a 1b       	sub	r17, r26
    93f4:	1c 1e       	adc	r1, r28
    93f6:	20 22       	and	r2, r16
    93f8:	23 1f       	adc	r18, r19
    93fa:	15 0b       	sbc	r17, r21
    93fc:	07 08       	sbc	r0, r7
    93fe:	07 00       	.word	0x0007	; ????
    9400:	1f 31       	cpi	r17, 0x1F	; 31
    9402:	3d 44       	sbci	r19, 0x4D	; 77
    9404:	4e 53       	subi	r20, 0x3E	; 62
    9406:	54 56       	subi	r21, 0x64	; 100
    9408:	5a 5f       	subi	r21, 0xFA	; 250
    940a:	64 69       	ori	r22, 0x94	; 148
    940c:	6e 74       	andi	r22, 0x4E	; 78
    940e:	76 79       	andi	r23, 0x96	; 150
    9410:	7c 7f       	andi	r23, 0xFC	; 252
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7c       	andi	r23, 0xCF	; 207
    947c:	78 71       	andi	r23, 0x18	; 24
    947e:	68 4c       	sbci	r22, 0xC8	; 200
    9480:	2c 1c       	adc	r2, r12
    9482:	12 0c       	add	r1, r2
    9484:	0a 0b       	sbc	r16, r26
    9486:	0a 05       	cpc	r16, r10
    9488:	fd f3       	brhs	.-2      	; 0x9488 <waves+0x988>
    948a:	e9 df       	rcall	.-46     	; 0x945e <waves+0x95e>
    948c:	d4 ca       	rjmp	.-2648   	; 0x8a36 <steptable+0xae>
    948e:	c0 b7       	in	r28, 0x30	; 48
    9490:	ae a6       	std	Y+46, r10	; 0x2e
    9492:	9e 97       	sbiw	r26, 0x2e	; 46
    9494:	91 8b       	std	Z+17, r25	; 0x11
    9496:	86 85       	ldd	r24, Z+14	; 0x0e
    9498:	82 80       	ldd	r8, Z+2	; 0x02
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 87       	std	Z+8, r24	; 0x08
    94f6:	91 9d       	mul	r25, r1
    94f8:	ac c4       	rjmp	.+2392   	; 0x9e52 <init_player_shot+0xe>
    94fa:	cb d4       	rcall	.+2454   	; 0x9e92 <init_player_shot+0x4e>
    94fc:	dd f2       	brhs	.-74     	; 0x94b4 <waves+0x9b4>
    94fe:	fa fa       	.word	0xfafa	; ????

00009500 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    9500:	2f 92       	push	r2
    9502:	3f 92       	push	r3
    9504:	4f 92       	push	r4
    9506:	5f 92       	push	r5
    9508:	6f 92       	push	r6
    950a:	7f 92       	push	r7
    950c:	8f 92       	push	r8
    950e:	9f 92       	push	r9
    9510:	af 92       	push	r10
    9512:	bf 92       	push	r11
    9514:	cf 92       	push	r12
    9516:	df 92       	push	r13
    9518:	ef 92       	push	r14
    951a:	ff 92       	push	r15
    951c:	0f 93       	push	r16
    951e:	1f 93       	push	r17
    9520:	cf 93       	push	r28
    9522:	df 93       	push	r29
    9524:	cd b7       	in	r28, 0x3d	; 61
    9526:	de b7       	in	r29, 0x3e	; 62
    9528:	27 97       	sbiw	r28, 0x07	; 7
    952a:	0f b6       	in	r0, 0x3f	; 63
    952c:	f8 94       	cli
    952e:	de bf       	out	0x3e, r29	; 62
    9530:	0f be       	out	0x3f, r0	; 63
    9532:	cd bf       	out	0x3d, r28	; 61

	u8 i;

	if (!sprites_on){ return; }
    9534:	80 91 00 05 	lds	r24, 0x0500
    9538:	88 23       	and	r24, r24
    953a:	09 f4       	brne	.+2      	; 0x953e <ProcessSprites+0x3e>
    953c:	00 c1       	rjmp	.+512    	; 0x973e <ProcessSprites+0x23e>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    953e:	80 91 a6 0c 	lds	r24, 0x0CA6
    9542:	80 93 a5 0c 	sts	0x0CA5, r24
	free_tile_index = user_ram_tiles_c;
    9546:	80 93 a4 0c 	sts	0x0CA4, r24
    954a:	a1 2c       	mov	r10, r1
    954c:	b1 2c       	mov	r11, r1
    954e:	f5 01       	movw	r30, r10
    9550:	e0 5f       	subi	r30, 0xF0	; 240
    9552:	fa 4f       	sbci	r31, 0xFA	; 250

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    9554:	a1 81       	ldd	r26, Z+1	; 0x01
    9556:	40 81       	ld	r20, Z
    9558:	52 81       	ldd	r21, Z+2	; 0x02
    955a:	e3 81       	ldd	r30, Z+3	; 0x03
	u8  ssy;
	#endif

	/* if sprite is off, then don't draw it */

	if ((flags & SPRITE_OFF) != 0U){ return; }
    955c:	e2 ff       	sbrs	r30, 2
    955e:	21 c0       	rjmp	.+66     	; 0x95a2 <ProcessSprites+0xa2>
    9560:	24 e0       	ldi	r18, 0x04	; 4
    9562:	a2 0e       	add	r10, r18
    9564:	b1 1c       	adc	r11, r1
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9566:	30 e4       	ldi	r19, 0x40	; 64
    9568:	a3 16       	cp	r10, r19
    956a:	b1 04       	cpc	r11, r1
    956c:	81 f7       	brne	.-32     	; 0x954e <ProcessSprites+0x4e>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    956e:	27 96       	adiw	r28, 0x07	; 7
    9570:	0f b6       	in	r0, 0x3f	; 63
    9572:	f8 94       	cli
    9574:	de bf       	out	0x3e, r29	; 62
    9576:	0f be       	out	0x3f, r0	; 63
    9578:	cd bf       	out	0x3d, r28	; 61
    957a:	df 91       	pop	r29
    957c:	cf 91       	pop	r28
    957e:	1f 91       	pop	r17
    9580:	0f 91       	pop	r16
    9582:	ff 90       	pop	r15
    9584:	ef 90       	pop	r14
    9586:	df 90       	pop	r13
    9588:	cf 90       	pop	r12
    958a:	bf 90       	pop	r11
    958c:	af 90       	pop	r10
    958e:	9f 90       	pop	r9
    9590:	8f 90       	pop	r8
    9592:	7f 90       	pop	r7
    9594:	6f 90       	pop	r6
    9596:	5f 90       	pop	r5
    9598:	4f 90       	pop	r4
    959a:	3f 90       	pop	r3
    959c:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    959e:	0c 94 e0 3b 	jmp	0x77c0	; 0x77c0 <RestoreBackground>
	if ((flags & SPRITE_OFF) != 0U){ return; }

	/* get tile's screen section offsets */

	#if (SCROLLING != 0)
	ssx = xpos + Screen.scrollX;
    95a2:	20 91 b5 0c 	lds	r18, 0x0CB5
    95a6:	24 0f       	add	r18, r20
	ssy = ypos + Screen.scrollY;
    95a8:	80 91 b6 0c 	lds	r24, 0x0CB6
    95ac:	90 e0       	ldi	r25, 0x00	; 0
    95ae:	8a 0f       	add	r24, r26
    95b0:	91 1d       	adc	r25, r1
	if (ypos > (u8)((Screen.scrollHeight << 3) - 1U)){
    95b2:	30 91 b7 0c 	lds	r19, 0x0CB7
    95b6:	33 0f       	add	r19, r19
    95b8:	33 0f       	add	r19, r19
    95ba:	33 0f       	add	r19, r19
    95bc:	31 50       	subi	r19, 0x01	; 1
    95be:	3a 17       	cp	r19, r26
    95c0:	08 f4       	brcc	.+2      	; 0x95c4 <ProcessSprites+0xc4>
		ssy += 0xFF00U; /* Sprite should clip on top */
    95c2:	9a 95       	dec	r25
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if ((SCROLLING == 0) && (SCREEN_TILES_H < 32))
	bx = ((u8)((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
	#else
	bx = ssx / TILE_WIDTH;
    95c4:	32 2e       	mov	r3, r18
    95c6:	36 94       	lsr	r3
    95c8:	36 94       	lsr	r3
    95ca:	36 94       	lsr	r3
	#endif
	dx = ssx % TILE_WIDTH;
    95cc:	27 70       	andi	r18, 0x07	; 7
	if (dx != 0U){ tx++; }
    95ce:	19 f0       	breq	.+6      	; 0x95d6 <ProcessSprites+0xd6>
    95d0:	62 e0       	ldi	r22, 0x02	; 2
    95d2:	69 83       	std	Y+1, r22	; 0x01
    95d4:	02 c0       	rjmp	.+4      	; 0x95da <ProcessSprites+0xda>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    95d6:	71 e0       	ldi	r23, 0x01	; 1
    95d8:	79 83       	std	Y+1, r23	; 0x01
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = ((u8)((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
	#else
	by = ssy / TILE_HEIGHT;
    95da:	bc 01       	movw	r22, r24
    95dc:	13 e0       	ldi	r17, 0x03	; 3
    95de:	76 95       	lsr	r23
    95e0:	67 95       	ror	r22
    95e2:	1a 95       	dec	r17
    95e4:	e1 f7       	brne	.-8      	; 0x95de <ProcessSprites+0xde>
    95e6:	26 2e       	mov	r2, r22
	#endif
	dy = ssy % TILE_HEIGHT;
    95e8:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    95ea:	11 f0       	breq	.+4      	; 0x95f0 <ProcessSprites+0xf0>
    95ec:	92 e0       	ldi	r25, 0x02	; 2
    95ee:	01 c0       	rjmp	.+2      	; 0x95f2 <ProcessSprites+0xf2>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    95f0:	91 e0       	ldi	r25, 0x01	; 1
    95f2:	9a 83       	std	Y+2, r25	; 0x02
					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
						               ((u16)(flags) << 8) + sprindex,
						               ((u16)(y)     << 8) + x,
						               ((u16)(dy)    << 8) + dx);
    95f4:	68 2e       	mov	r6, r24
    95f6:	71 2c       	mov	r7, r1
    95f8:	76 2c       	mov	r7, r6
    95fa:	66 24       	eor	r6, r6

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    95fc:	62 0e       	add	r6, r18
    95fe:	71 1c       	adc	r7, r1
						               ((u16)(flags) << 8) + sprindex,
    9600:	f0 e0       	ldi	r31, 0x00	; 0
    9602:	fe 2f       	mov	r31, r30
    9604:	ee 27       	eor	r30, r30

					}

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    9606:	bf 01       	movw	r22, r30
    9608:	65 0f       	add	r22, r21
    960a:	71 1d       	adc	r23, r1
    960c:	7c 83       	std	Y+4, r23	; 0x04
    960e:	6b 83       	std	Y+3, r22	; 0x03
    9610:	e1 2c       	mov	r14, r1
    9612:	f1 2c       	mov	r15, r1
    9614:	97 e0       	ldi	r25, 0x07	; 7
    9616:	9a 0f       	add	r25, r26
    9618:	59 2e       	mov	r5, r25
    961a:	58 1a       	sub	r5, r24
    961c:	49 5f       	subi	r20, 0xF9	; 249
    961e:	44 2e       	mov	r4, r20
    9620:	42 1a       	sub	r4, r18
    9622:	8e 2d       	mov	r24, r14

		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
    9624:	90 91 b7 0c 	lds	r25, 0x0CB7
    9628:	91 11       	cpse	r25, r1
    962a:	07 c0       	rjmp	.+14     	; 0x963a <ProcessSprites+0x13a>
    962c:	7f ef       	ldi	r23, 0xFF	; 255
    962e:	e7 1a       	sub	r14, r23
    9630:	f7 0a       	sbc	r15, r23
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9632:	9a 81       	ldd	r25, Y+2	; 0x02
    9634:	e9 16       	cp	r14, r25
    9636:	a8 f3       	brcs	.-22     	; 0x9622 <ProcessSprites+0x122>
    9638:	93 cf       	rjmp	.-218    	; 0x9560 <ProcessSprites+0x60>
		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
		     ((u8)((ypos + 7U + (y << 3) - dy) & 0xFFU) < (u8)((Screen.scrollHeight << 3) - 1U)) ){
    963a:	29 2f       	mov	r18, r25
    963c:	22 0f       	add	r18, r18
    963e:	22 0f       	add	r18, r18
    9640:	22 0f       	add	r18, r18
    9642:	21 50       	subi	r18, 0x01	; 1

		wy = by + y;
		#if (SCROLLING == 0)
		if (wy < VRAM_TILES_V){
		#else
		if ( (Screen.scrollHeight != 0U) &&
    9644:	35 2d       	mov	r19, r5
    9646:	e8 e0       	ldi	r30, 0x08	; 8
    9648:	ee 9e       	mul	r14, r30
    964a:	30 0d       	add	r19, r0
    964c:	11 24       	eor	r1, r1
    964e:	32 17       	cp	r19, r18
    9650:	68 f7       	brcc	.-38     	; 0x962c <ProcessSprites+0x12c>
    9652:	82 0d       	add	r24, r2
		     ((u8)((ypos + 7U + (y << 3) - dy) & 0xFFU) < (u8)((Screen.scrollHeight << 3) - 1U)) ){

			while (wy >= Screen.scrollHeight){
    9654:	89 17       	cp	r24, r25
    9656:	10 f0       	brcs	.+4      	; 0x965c <ProcessSprites+0x15c>
				wy -= Screen.scrollHeight;
    9658:	89 1b       	sub	r24, r25
    965a:	fc cf       	rjmp	.-8      	; 0x9654 <ProcessSprites+0x154>

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    965c:	08 2f       	mov	r16, r24
    965e:	06 95       	lsr	r16
    9660:	06 95       	lsr	r16
    9662:	06 95       	lsr	r16
    9664:	10 e0       	ldi	r17, 0x00	; 0
    9666:	10 2f       	mov	r17, r16
    9668:	00 27       	eor	r16, r16
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
    966a:	87 70       	andi	r24, 0x07	; 7
    966c:	08 0f       	add	r16, r24
    966e:	11 1d       	adc	r17, r1

					if ( (bt < RAM_TILES_COUNT) &&
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
						               ((u16)(flags) << 8) + sprindex,
						               ((u16)(y)     << 8) + x,
    9670:	9e 2c       	mov	r9, r14
    9672:	88 24       	eor	r8, r8
    9674:	c1 2c       	mov	r12, r1
    9676:	d1 2c       	mov	r13, r1
				#if (SCROLLING == 0)
				if (wx < VRAM_TILES_H){
				#else
				wx = wx % VRAM_TILES_H;
				#if (SCREEN_TILES_H < 32U)
				if ((u8)((xpos + 7U + (x << 3) - dx) & 0xFFU) < (((SCREEN_TILES_H + 1U) << 3) - 1U)){
    9678:	84 2d       	mov	r24, r4
    967a:	f8 e0       	ldi	r31, 0x08	; 8
    967c:	cf 9e       	mul	r12, r31
    967e:	80 0d       	add	r24, r0
    9680:	11 24       	eor	r1, r1
    9682:	87 3e       	cpi	r24, 0xE7	; 231
    9684:	08 f0       	brcs	.+2      	; 0x9688 <ProcessSprites+0x188>
    9686:	53 c0       	rjmp	.+166    	; 0x972e <ProcessSprites+0x22e>
    9688:	83 2d       	mov	r24, r3
    968a:	8c 0d       	add	r24, r12
					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
    968c:	88 0f       	add	r24, r24
    968e:	88 0f       	add	r24, r24
    9690:	88 0f       	add	r24, r24

					#if (SCROLLING == 0)
					ramPtr = (wy * VRAM_TILES_H) +
					         wx;
					#else
					ramPtr = ((u16)(wy >> 3) * 256U) +
    9692:	98 01       	movw	r18, r16
    9694:	28 0f       	add	r18, r24
    9696:	31 1d       	adc	r19, r1
					         (u8)(wx * 8U) + (u8)(wy & 0x07U);
					#endif

					bt = vram[ramPtr];
    9698:	20 50       	subi	r18, 0x00	; 0
    969a:	3f 4f       	sbci	r19, 0xFF	; 255
    969c:	3f 83       	std	Y+7, r19	; 0x07
    969e:	2e 83       	std	Y+6, r18	; 0x06
    96a0:	f9 01       	movw	r30, r18
    96a2:	90 81       	ld	r25, Z

					if ( ( (bt >= RAM_TILES_COUNT) |
    96a4:	81 e0       	ldi	r24, 0x01	; 1
    96a6:	9c 31       	cpi	r25, 0x1C	; 28
    96a8:	08 f4       	brcc	.+2      	; 0x96ac <ProcessSprites+0x1ac>
    96aa:	80 e0       	ldi	r24, 0x00	; 0
    96ac:	21 e0       	ldi	r18, 0x01	; 1
    96ae:	30 91 a5 0c 	lds	r19, 0x0CA5
    96b2:	93 17       	cp	r25, r19
    96b4:	18 f0       	brcs	.+6      	; 0x96bc <ProcessSprites+0x1bc>
    96b6:	20 e0       	ldi	r18, 0x00	; 0
    96b8:	88 23       	and	r24, r24
    96ba:	61 f1       	breq	.+88     	; 0x9714 <ProcessSprites+0x214>
					       (bt < user_ram_tiles_c)) &&
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    96bc:	60 91 a4 0c 	lds	r22, 0x0CA4
					#endif

					bt = vram[ramPtr];

					if ( ( (bt >= RAM_TILES_COUNT) |
					       (bt < user_ram_tiles_c)) &&
    96c0:	6c 31       	cpi	r22, 0x1C	; 28
    96c2:	30 f5       	brcc	.+76     	; 0x9710 <ProcessSprites+0x210>
					     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

						if (bt >= RAM_TILES_COUNT){
    96c4:	88 23       	and	r24, r24
    96c6:	31 f0       	breq	.+12     	; 0x96d4 <ProcessSprites+0x1d4>
							/* tile is mapped to flash. Copy it to next free RAM tile. */
							CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    96c8:	84 ee       	ldi	r24, 0xE4	; 228
    96ca:	89 0f       	add	r24, r25
    96cc:	9d 83       	std	Y+5, r25	; 0x05
    96ce:	0e 94 c4 3a 	call	0x7588	; 0x7588 <CopyFlashTile>
    96d2:	06 c0       	rjmp	.+12     	; 0x96e0 <ProcessSprites+0x1e0>
						}else if (bt < user_ram_tiles_c){
    96d4:	22 23       	and	r18, r18
    96d6:	29 f0       	breq	.+10     	; 0x96e2 <ProcessSprites+0x1e2>
							/* tile is a user ram tile. Copy it to next free RAM tile. */
							CopyRamTile(bt, free_tile_index);
    96d8:	89 2f       	mov	r24, r25
    96da:	9d 83       	std	Y+5, r25	; 0x05
    96dc:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <CopyRamTile>
    96e0:	9d 81       	ldd	r25, Y+5	; 0x05
						}
						#if (RTLIST_ENABLE != 0)
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    96e2:	80 91 a4 0c 	lds	r24, 0x0CA4
    96e6:	e8 2f       	mov	r30, r24
    96e8:	f0 e0       	ldi	r31, 0x00	; 0
    96ea:	9f 01       	movw	r18, r30
    96ec:	22 0f       	add	r18, r18
    96ee:	33 1f       	adc	r19, r19
    96f0:	e2 0f       	add	r30, r18
    96f2:	f3 1f       	adc	r31, r19
    96f4:	e0 5b       	subi	r30, 0xB0	; 176
    96f6:	f3 4f       	sbci	r31, 0xF3	; 243
    96f8:	2e 81       	ldd	r18, Y+6	; 0x06
    96fa:	3f 81       	ldd	r19, Y+7	; 0x07
    96fc:	31 83       	std	Z+1, r19	; 0x01
    96fe:	20 83       	st	Z, r18
						ram_tiles_restore[free_tile_index].tileIndex = bt;
    9700:	92 83       	std	Z+2, r25	; 0x02
						#endif
						vram[ramPtr] = free_tile_index;
    9702:	f9 01       	movw	r30, r18
    9704:	80 83       	st	Z, r24
						bt = free_tile_index;
						free_tile_index++;
    9706:	91 e0       	ldi	r25, 0x01	; 1
    9708:	98 0f       	add	r25, r24
    970a:	90 93 a4 0c 	sts	0x0CA4, r25
						#if (RTLIST_ENABLE != 0)
						ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
						ram_tiles_restore[free_tile_index].tileIndex = bt;
						#endif
						vram[ramPtr] = free_tile_index;
						bt = free_tile_index;
    970e:	98 2f       	mov	r25, r24
						free_tile_index++;

					}

					if ( (bt < RAM_TILES_COUNT) &&
    9710:	9c 31       	cpi	r25, 0x1C	; 28
    9712:	68 f4       	brcc	.+26     	; 0x972e <ProcessSprites+0x22e>
    9714:	80 91 a5 0c 	lds	r24, 0x0CA5
    9718:	98 17       	cp	r25, r24
    971a:	48 f0       	brcs	.+18     	; 0x972e <ProcessSprites+0x22e>
					     (bt >= user_ram_tiles_c) ){
						BlitSpritePart(bt,
    971c:	93 01       	movw	r18, r6
    971e:	a6 01       	movw	r20, r12
    9720:	48 0d       	add	r20, r8
    9722:	59 1d       	adc	r21, r9
    9724:	6b 81       	ldd	r22, Y+3	; 0x03
    9726:	7c 81       	ldd	r23, Y+4	; 0x04
    9728:	89 2f       	mov	r24, r25
    972a:	0e 94 f3 3b 	call	0x77e6	; 0x77e6 <BlitSpritePart>
    972e:	ff ef       	ldi	r31, 0xFF	; 255
    9730:	cf 1a       	sub	r12, r31
    9732:	df 0a       	sbc	r13, r31
			while (wy >= Screen.scrollHeight){
				wy -= Screen.scrollHeight;
			}
		#endif

			for (x = 0U; x < tx; x++){
    9734:	99 81       	ldd	r25, Y+1	; 0x01
    9736:	c9 16       	cp	r12, r25
    9738:	08 f4       	brcc	.+2      	; 0x973c <ProcessSprites+0x23c>
    973a:	9e cf       	rjmp	.-196    	; 0x9678 <ProcessSprites+0x178>
    973c:	77 cf       	rjmp	.-274    	; 0x962c <ProcessSprites+0x12c>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    973e:	27 96       	adiw	r28, 0x07	; 7
    9740:	0f b6       	in	r0, 0x3f	; 63
    9742:	f8 94       	cli
    9744:	de bf       	out	0x3e, r29	; 62
    9746:	0f be       	out	0x3f, r0	; 63
    9748:	cd bf       	out	0x3d, r28	; 61
    974a:	df 91       	pop	r29
    974c:	cf 91       	pop	r28
    974e:	1f 91       	pop	r17
    9750:	0f 91       	pop	r16
    9752:	ff 90       	pop	r15
    9754:	ef 90       	pop	r14
    9756:	df 90       	pop	r13
    9758:	cf 90       	pop	r12
    975a:	bf 90       	pop	r11
    975c:	af 90       	pop	r10
    975e:	9f 90       	pop	r9
    9760:	8f 90       	pop	r8
    9762:	7f 90       	pop	r7
    9764:	6f 90       	pop	r6
    9766:	5f 90       	pop	r5
    9768:	4f 90       	pop	r4
    976a:	3f 90       	pop	r3
    976c:	2f 90       	pop	r2
    976e:	08 95       	ret

00009770 <Scroll>:
*/
void Scroll(char dx, char dy){

	/* Handles case with TILE_HEIGHT = 8 and scrollHeight = 32 correctly
	** (this will be zero, so zero will add / subtract) */
	u8 scmax = (u8)(Screen.scrollHeight * TILE_HEIGHT);
    9770:	20 91 b7 0c 	lds	r18, 0x0CB7
    9774:	22 0f       	add	r18, r18
    9776:	22 0f       	add	r18, r18
    9778:	22 0f       	add	r18, r18

	Screen.scrollY += (u8)(dy);
    977a:	90 91 b6 0c 	lds	r25, 0x0CB6
    977e:	96 0f       	add	r25, r22
    9780:	90 93 b6 0c 	sts	0x0CB6, r25
	Screen.scrollX += (u8)(dx);
    9784:	30 91 b5 0c 	lds	r19, 0x0CB5
    9788:	83 0f       	add	r24, r19
    978a:	80 93 b5 0c 	sts	0x0CB5, r24

	if (Screen.scrollY >= scmax){
    978e:	92 17       	cp	r25, r18
    9790:	38 f0       	brcs	.+14     	; 0x97a0 <Scroll+0x30>
		if((s8)(dy) >= 0){
    9792:	67 fd       	sbrc	r22, 7
    9794:	02 c0       	rjmp	.+4      	; 0x979a <Scroll+0x2a>
			Screen.scrollY -= scmax;
    9796:	92 1b       	sub	r25, r18
    9798:	01 c0       	rjmp	.+2      	; 0x979c <Scroll+0x2c>
		}else{
			Screen.scrollY += scmax;
    979a:	92 0f       	add	r25, r18
    979c:	90 93 b6 0c 	sts	0x0CB6, r25
    97a0:	08 95       	ret

000097a2 <DisplayLogo>:


/*
** Callback invoked by UzeboxCore.Initialize()
*/
void DisplayLogo(){
    97a2:	08 95       	ret

000097a4 <InitializeVideoMode>:


/*
** Callback invoked by UzeboxCore.Initialize()
*/
void InitializeVideoMode(){
    97a4:	80 e0       	ldi	r24, 0x00	; 0
    97a6:	90 e0       	ldi	r25, 0x00	; 0

	/* Disable sprites */

	#if (SPRITES_AUTO_PROCESS != 0)
	for(i = 0U; i < MAX_SPRITES; i++){
		sprites[i].x = (SCREEN_TILES_H * TILE_WIDTH);
    97a8:	20 ee       	ldi	r18, 0xE0	; 224
    97aa:	fc 01       	movw	r30, r24
    97ac:	e0 5f       	subi	r30, 0xF0	; 240
    97ae:	fa 4f       	sbci	r31, 0xFA	; 250
    97b0:	20 83       	st	Z, r18
		sprites[i].y = (SCREEN_TILES_V * TILE_HEIGHT);
    97b2:	21 83       	std	Z+1, r18	; 0x01
    97b4:	04 96       	adiw	r24, 0x04	; 4
	u8 i;

	/* Disable sprites */

	#if (SPRITES_AUTO_PROCESS != 0)
	for(i = 0U; i < MAX_SPRITES; i++){
    97b6:	80 34       	cpi	r24, 0x40	; 64
    97b8:	91 05       	cpc	r25, r1
    97ba:	b9 f7       	brne	.-18     	; 0x97aa <InitializeVideoMode+0x6>
		sprites[i].y = (SCREEN_TILES_V * TILE_HEIGHT);
	}
	#endif

	#if (SCROLLING == 1)
	Screen.scrollHeight  = VRAM_TILES_V;
    97bc:	80 e2       	ldi	r24, 0x20	; 32
    97be:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0U;
    97c2:	10 92 b2 0c 	sts	0x0CB2, r1
	#endif

	free_tile_index      = 0U;
    97c6:	10 92 a4 0c 	sts	0x0CA4, r1
	user_ram_tiles_c_tmp = 0U;
    97ca:	10 92 a6 0c 	sts	0x0CA6, r1
    97ce:	08 95       	ret

000097d0 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    97d0:	4f 92       	push	r4
    97d2:	5f 92       	push	r5
    97d4:	6f 92       	push	r6
    97d6:	7f 92       	push	r7
    97d8:	8f 92       	push	r8
    97da:	9f 92       	push	r9
    97dc:	af 92       	push	r10
    97de:	bf 92       	push	r11
    97e0:	cf 92       	push	r12
    97e2:	df 92       	push	r13
    97e4:	ef 92       	push	r14
    97e6:	ff 92       	push	r15
    97e8:	0f 93       	push	r16
    97ea:	1f 93       	push	r17
    97ec:	cf 93       	push	r28
    97ee:	df 93       	push	r29
    97f0:	68 2e       	mov	r6, r24
    97f2:	56 2e       	mov	r5, r22
    97f4:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    97f6:	fa 01       	movw	r30, r20
    97f8:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    97fa:	31 96       	adiw	r30, 0x01	; 1
    97fc:	84 90       	lpm	r8, Z
    97fe:	c7 2c       	mov	r12, r7
    9800:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9802:	00 e0       	ldi	r16, 0x00	; 0
    9804:	10 e0       	ldi	r17, 0x00	; 0
    9806:	91 2c       	mov	r9, r1
    9808:	98 14       	cp	r9, r8
    980a:	f1 f0       	breq	.+60     	; 0x9848 <DrawMap+0x78>
    980c:	c0 e0       	ldi	r28, 0x00	; 0
    980e:	d0 e0       	ldi	r29, 0x00	; 0
    9810:	58 01       	movw	r10, r16
    9812:	f2 e0       	ldi	r31, 0x02	; 2
    9814:	af 0e       	add	r10, r31
    9816:	b1 1c       	adc	r11, r1
    9818:	49 2c       	mov	r4, r9
    981a:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    981c:	c7 15       	cp	r28, r7
    981e:	80 f4       	brcc	.+32     	; 0x9840 <DrawMap+0x70>
    9820:	95 01       	movw	r18, r10
    9822:	2c 0f       	add	r18, r28
    9824:	3d 1f       	adc	r19, r29
    9826:	f7 01       	movw	r30, r14
    9828:	e2 0f       	add	r30, r18
    982a:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    982c:	24 91       	lpm	r18, Z
    982e:	42 2f       	mov	r20, r18
    9830:	50 e0       	ldi	r21, 0x00	; 0
    9832:	64 2d       	mov	r22, r4
    9834:	8c 2f       	mov	r24, r28
    9836:	86 0d       	add	r24, r6
    9838:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <SetTile>
    983c:	21 96       	adiw	r28, 0x01	; 1
    983e:	ee cf       	rjmp	.-36     	; 0x981c <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9840:	93 94       	inc	r9
    9842:	0c 0d       	add	r16, r12
    9844:	1d 1d       	adc	r17, r13
    9846:	e0 cf       	rjmp	.-64     	; 0x9808 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9848:	df 91       	pop	r29
    984a:	cf 91       	pop	r28
    984c:	1f 91       	pop	r17
    984e:	0f 91       	pop	r16
    9850:	ff 90       	pop	r15
    9852:	ef 90       	pop	r14
    9854:	df 90       	pop	r13
    9856:	cf 90       	pop	r12
    9858:	bf 90       	pop	r11
    985a:	af 90       	pop	r10
    985c:	9f 90       	pop	r9
    985e:	8f 90       	pop	r8
    9860:	7f 90       	pop	r7
    9862:	6f 90       	pop	r6
    9864:	5f 90       	pop	r5
    9866:	4f 90       	pop	r4
    9868:	08 95       	ret

0000986a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    986a:	0f 93       	push	r16
    986c:	1f 93       	push	r17
    986e:	cf 93       	push	r28
    9870:	df 93       	push	r29
    9872:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9874:	c0 e0       	ldi	r28, 0x00	; 0
    9876:	d0 e0       	ldi	r29, 0x00	; 0
    9878:	c0 17       	cp	r28, r16
    987a:	d1 07       	cpc	r29, r17
    987c:	44 f4       	brge	.+16     	; 0x988e <WaitVsync+0x24>
		while(!GetVsyncFlag());
    987e:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <GetVsyncFlag>
    9882:	88 23       	and	r24, r24
    9884:	e1 f3       	breq	.-8      	; 0x987e <WaitVsync+0x14>
		ClearVsyncFlag();		
    9886:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    988a:	21 96       	adiw	r28, 0x01	; 1
    988c:	f5 cf       	rjmp	.-22     	; 0x9878 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    988e:	df 91       	pop	r29
    9890:	cf 91       	pop	r28
    9892:	1f 91       	pop	r17
    9894:	0f 91       	pop	r16
    9896:	08 95       	ret

00009898 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9898:	80 93 83 0d 	sts	0x0D83, r24
	currFadeFrame=0;
    989c:	10 92 86 0d 	sts	0x0D86, r1
	fadeActive=true;
    98a0:	81 e0       	ldi	r24, 0x01	; 1
    98a2:	80 93 85 0d 	sts	0x0D85, r24
		
	if(blocking){
    98a6:	66 23       	and	r22, r22
    98a8:	21 f0       	breq	.+8      	; 0x98b2 <doFade+0x1a>
		while(fadeActive==true);
    98aa:	80 91 85 0d 	lds	r24, 0x0D85
    98ae:	81 11       	cpse	r24, r1
    98b0:	fc cf       	rjmp	.-8      	; 0x98aa <doFade+0x12>
    98b2:	08 95       	ret

000098b4 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    98b4:	81 11       	cpse	r24, r1
    98b6:	03 c0       	rjmp	.+6      	; 0x98be <FadeIn+0xa>
		DDRC=0xff;
    98b8:	8f ef       	ldi	r24, 0xFF	; 255
    98ba:	87 b9       	out	0x07, r24	; 7
		return;
    98bc:	08 95       	ret
	}
	fadeStep=1;
    98be:	91 e0       	ldi	r25, 0x01	; 1
    98c0:	90 93 87 0d 	sts	0x0D87, r25
	fadeDir=1;
    98c4:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    98c8:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <doFade>

000098cc <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    98cc:	81 11       	cpse	r24, r1
    98ce:	02 c0       	rjmp	.+4      	; 0x98d4 <FadeOut+0x8>
		DDRC=0;
    98d0:	17 b8       	out	0x07, r1	; 7
		return;
    98d2:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    98d4:	9c e0       	ldi	r25, 0x0C	; 12
    98d6:	90 93 87 0d 	sts	0x0D87, r25
	fadeDir=-1;
    98da:	9f ef       	ldi	r25, 0xFF	; 255
    98dc:	90 93 84 0d 	sts	0x0D84, r25
	doFade(speed,blocking);
    98e0:	0c 94 4c 4c 	jmp	0x9898	; 0x9898 <doFade>

000098e4 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    98e4:	80 91 85 0d 	lds	r24, 0x0D85
    98e8:	88 23       	and	r24, r24
    98ea:	01 f1       	breq	.+64     	; 0x992c <ProcessFading+0x48>
		if(currFadeFrame==0){
    98ec:	80 91 86 0d 	lds	r24, 0x0D86
    98f0:	81 11       	cpse	r24, r1
    98f2:	19 c0       	rjmp	.+50     	; 0x9926 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    98f4:	80 91 83 0d 	lds	r24, 0x0D83
    98f8:	80 93 86 0d 	sts	0x0D86, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    98fc:	e0 91 87 0d 	lds	r30, 0x0D87
    9900:	f0 e0       	ldi	r31, 0x00	; 0
    9902:	eb 5f       	subi	r30, 0xFB	; 251
    9904:	fe 4f       	sbci	r31, 0xFE	; 254
    9906:	e4 91       	lpm	r30, Z
    9908:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    990a:	90 91 84 0d 	lds	r25, 0x0D84
    990e:	80 91 87 0d 	lds	r24, 0x0D87
    9912:	89 0f       	add	r24, r25
    9914:	80 93 87 0d 	sts	0x0D87, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9918:	88 23       	and	r24, r24
    991a:	11 f0       	breq	.+4      	; 0x9920 <ProcessFading+0x3c>
    991c:	8d 30       	cpi	r24, 0x0D	; 13
    991e:	31 f4       	brne	.+12     	; 0x992c <ProcessFading+0x48>
				fadeActive=false;
    9920:	10 92 85 0d 	sts	0x0D85, r1
    9924:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9926:	81 50       	subi	r24, 0x01	; 1
    9928:	80 93 86 0d 	sts	0x0D86, r24
    992c:	08 95       	ret

0000992e <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    992e:	0e 94 72 4c 	call	0x98e4	; 0x98e4 <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    9932:	0c 94 80 4a 	jmp	0x9500	; 0x9500 <ProcessSprites>

00009936 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    9936:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9938:	88 23       	and	r24, r24
    993a:	29 f1       	breq	.+74     	; 0x9986 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    993c:	87 ff       	sbrs	r24, 7
    993e:	03 c0       	rjmp	.+6      	; 0x9946 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    9940:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    9942:	3f ef       	ldi	r19, 0xFF	; 255
    9944:	01 c0       	rjmp	.+2      	; 0x9948 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    9946:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    9948:	6c e3       	ldi	r22, 0x3C	; 60
    994a:	0e 94 bb 71 	call	0xe376	; 0xe376 <__divmodqi4>
    994e:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    9950:	99 23       	and	r25, r25
    9952:	a9 f0       	breq	.+42     	; 0x997e <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    9954:	69 2f       	mov	r22, r25
    9956:	70 e0       	ldi	r23, 0x00	; 0
    9958:	8c e3       	ldi	r24, 0x3C	; 60
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    9960:	8e 2f       	mov	r24, r30
    9962:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    9966:	91 11       	cpse	r25, r1
    9968:	0a c0       	rjmp	.+20     	; 0x997e <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    996a:	42 2f       	mov	r20, r18
    996c:	50 e0       	ldi	r21, 0x00	; 0
    996e:	4f 5f       	subi	r20, 0xFF	; 255
    9970:	5f 4f       	sbci	r21, 0xFF	; 255
    9972:	34 03       	mulsu	r19, r20
    9974:	c0 01       	movw	r24, r0
    9976:	35 9f       	mul	r19, r21
    9978:	90 0d       	add	r25, r0
    997a:	11 24       	eor	r1, r1
    997c:	08 95       	ret
	}
	return direction*base_delta;
    997e:	32 03       	mulsu	r19, r18
    9980:	c0 01       	movw	r24, r0
    9982:	11 24       	eor	r1, r1
    9984:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    9986:	80 e0       	ldi	r24, 0x00	; 0
    9988:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    998a:	08 95       	ret

0000998c <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    998c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    998e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9990:	93 81       	ldd	r25, Z+3	; 0x03
    9992:	9f 5f       	subi	r25, 0xFF	; 255
    9994:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9996:	42 81       	ldd	r20, Z+2	; 0x02
    9998:	80 81       	ld	r24, Z
    999a:	26 81       	ldd	r18, Z+6	; 0x06
    999c:	37 81       	ldd	r19, Z+7	; 0x07
    999e:	94 17       	cp	r25, r20
    99a0:	30 f4       	brcc	.+12     	; 0x99ae <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    99a2:	f9 01       	movw	r30, r18
    99a4:	e8 0f       	add	r30, r24
    99a6:	f1 1d       	adc	r31, r1
    99a8:	e8 0f       	add	r30, r24
    99aa:	f1 1d       	adc	r31, r1
    99ac:	12 c0       	rjmp	.+36     	; 0x99d2 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    99ae:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    99b0:	90 e0       	ldi	r25, 0x00	; 0
    99b2:	01 96       	adiw	r24, 0x01	; 1
    99b4:	61 81       	ldd	r22, Z+1	; 0x01
    99b6:	70 e0       	ldi	r23, 0x00	; 0
    99b8:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    99bc:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    99be:	81 11       	cpse	r24, r1
    99c0:	02 c0       	rjmp	.+4      	; 0x99c6 <LBGetNextFrame+0x3a>
    99c2:	41 e0       	ldi	r20, 0x01	; 1
    99c4:	44 83       	std	Z+4, r20	; 0x04
    99c6:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    99c8:	88 0f       	add	r24, r24
    99ca:	99 1f       	adc	r25, r25
    99cc:	f9 01       	movw	r30, r18
    99ce:	e8 0f       	add	r30, r24
    99d0:	f9 1f       	adc	r31, r25
    99d2:	80 81       	ld	r24, Z
    99d4:	91 81       	ldd	r25, Z+1	; 0x01
}
    99d6:	08 95       	ret

000099d8 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    99d8:	0f 93       	push	r16
    99da:	1f 93       	push	r17
    99dc:	cf 93       	push	r28
    99de:	df 93       	push	r29
    99e0:	1f 92       	push	r1
    99e2:	cd b7       	in	r28, 0x3d	; 61
    99e4:	de b7       	in	r29, 0x3e	; 62
    99e6:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    99e8:	86 2f       	mov	r24, r22
    99ea:	69 83       	std	Y+1, r22	; 0x01
    99ec:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <ReadJoypad>
    99f0:	d8 01       	movw	r26, r16
    99f2:	15 96       	adiw	r26, 0x05	; 5
    99f4:	9c 93       	st	X, r25
    99f6:	8e 93       	st	-X, r24
    99f8:	14 97       	sbiw	r26, 0x04	; 4
    99fa:	69 81       	ldd	r22, Y+1	; 0x01
    99fc:	e6 2f       	mov	r30, r22
    99fe:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9a00:	00 97       	sbiw	r24, 0x00	; 0
    9a02:	51 f0       	breq	.+20     	; 0x9a18 <LBGetJoyPadState+0x40>
    9a04:	df 01       	movw	r26, r30
    9a06:	aa 0f       	add	r26, r26
    9a08:	bb 1f       	adc	r27, r27
    9a0a:	a5 50       	subi	r26, 0x05	; 5
    9a0c:	b3 4f       	sbci	r27, 0xF3	; 243
    9a0e:	2d 91       	ld	r18, X+
    9a10:	3c 91       	ld	r19, X
    9a12:	82 17       	cp	r24, r18
    9a14:	93 07       	cpc	r25, r19
    9a16:	21 f0       	breq	.+8      	; 0x9a20 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9a18:	d8 01       	movw	r26, r16
    9a1a:	16 96       	adiw	r26, 0x06	; 6
    9a1c:	1c 92       	st	X, r1
    9a1e:	07 c0       	rjmp	.+14     	; 0x9a2e <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9a20:	d8 01       	movw	r26, r16
    9a22:	16 96       	adiw	r26, 0x06	; 6
    9a24:	2c 91       	ld	r18, X
    9a26:	16 97       	sbiw	r26, 0x06	; 6
    9a28:	2f 5f       	subi	r18, 0xFF	; 255
    9a2a:	16 96       	adiw	r26, 0x06	; 6
    9a2c:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9a2e:	ee 0f       	add	r30, r30
    9a30:	ff 1f       	adc	r31, r31
    9a32:	e5 50       	subi	r30, 0x05	; 5
    9a34:	f3 4f       	sbci	r31, 0xF3	; 243
    9a36:	20 81       	ld	r18, Z
    9a38:	31 81       	ldd	r19, Z+1	; 0x01
    9a3a:	a9 01       	movw	r20, r18
    9a3c:	40 95       	com	r20
    9a3e:	50 95       	com	r21
    9a40:	48 23       	and	r20, r24
    9a42:	59 23       	and	r21, r25
    9a44:	d8 01       	movw	r26, r16
    9a46:	11 96       	adiw	r26, 0x01	; 1
    9a48:	5c 93       	st	X, r21
    9a4a:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9a4c:	ac 01       	movw	r20, r24
    9a4e:	40 95       	com	r20
    9a50:	50 95       	com	r21
    9a52:	24 23       	and	r18, r20
    9a54:	35 23       	and	r19, r21
    9a56:	13 96       	adiw	r26, 0x03	; 3
    9a58:	3c 93       	st	X, r19
    9a5a:	2e 93       	st	-X, r18
    9a5c:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9a5e:	91 83       	std	Z+1, r25	; 0x01
    9a60:	80 83       	st	Z, r24
}
    9a62:	0f 90       	pop	r0
    9a64:	df 91       	pop	r29
    9a66:	cf 91       	pop	r28
    9a68:	1f 91       	pop	r17
    9a6a:	0f 91       	pop	r16
    9a6c:	08 95       	ret

00009a6e <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    9a6e:	90 ed       	ldi	r25, 0xD0	; 208
    9a70:	94 0f       	add	r25, r20
    9a72:	e0 91 88 0d 	lds	r30, 0x0D88
    9a76:	f0 91 89 0d 	lds	r31, 0x0D89
    9a7a:	9a 30       	cpi	r25, 0x0A	; 10
    9a7c:	38 f4       	brcc	.+14     	; 0x9a8c <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    9a7e:	24 2f       	mov	r18, r20
    9a80:	30 e0       	ldi	r19, 0x00	; 0
    9a82:	2d 52       	subi	r18, 0x2D	; 45
    9a84:	31 09       	sbc	r19, r1
    9a86:	e2 0f       	add	r30, r18
    9a88:	f3 1f       	adc	r31, r19
    9a8a:	11 c0       	rjmp	.+34     	; 0x9aae <LBPrintChar+0x40>
	}
	else if (code >= 65 && code <= 90)
    9a8c:	9f eb       	ldi	r25, 0xBF	; 191
    9a8e:	94 0f       	add	r25, r20
    9a90:	9a 31       	cpi	r25, 0x1A	; 26
    9a92:	40 f4       	brcc	.+16     	; 0x9aa4 <LBPrintChar+0x36>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    9a94:	24 2f       	mov	r18, r20
    9a96:	30 e0       	ldi	r19, 0x00	; 0
    9a98:	24 53       	subi	r18, 0x34	; 52
    9a9a:	31 09       	sbc	r19, r1
    9a9c:	e2 0f       	add	r30, r18
    9a9e:	f3 1f       	adc	r31, r19
    9aa0:	44 91       	lpm	r20, Z
    9aa2:	07 c0       	rjmp	.+14     	; 0x9ab2 <LBPrintChar+0x44>
	}
	else if (code == 46)
    9aa4:	4e 32       	cpi	r20, 0x2E	; 46
    9aa6:	11 f4       	brne	.+4      	; 0x9aac <LBPrintChar+0x3e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[39]));
    9aa8:	b7 96       	adiw	r30, 0x27	; 39
    9aaa:	01 c0       	rjmp	.+2      	; 0x9aae <LBPrintChar+0x40>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    9aac:	32 96       	adiw	r30, 0x02	; 2
    9aae:	e4 91       	lpm	r30, Z
    9ab0:	4e 2f       	mov	r20, r30
    9ab2:	50 e0       	ldi	r21, 0x00	; 0
    9ab4:	0c 94 09 3e 	jmp	0x7c12	; 0x7c12 <SetTile>

00009ab8 <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    9ab8:	ff 92       	push	r15
    9aba:	0f 93       	push	r16
    9abc:	1f 93       	push	r17
    9abe:	cf 93       	push	r28
    9ac0:	df 93       	push	r29
    9ac2:	d8 2f       	mov	r29, r24
    9ac4:	f6 2e       	mov	r15, r22
    9ac6:	8a 01       	movw	r16, r20
	u8 i = 0;
    9ac8:	c0 e0       	ldi	r28, 0x00	; 0
    9aca:	8c 2f       	mov	r24, r28
    9acc:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    9ace:	f8 01       	movw	r30, r16
    9ad0:	ec 0f       	add	r30, r28
    9ad2:	f1 1d       	adc	r31, r1
    9ad4:	44 91       	lpm	r20, Z
    9ad6:	44 23       	and	r20, r20
    9ad8:	29 f0       	breq	.+10     	; 0x9ae4 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    9ada:	6f 2d       	mov	r22, r15
    9adc:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		i++;
    9ae0:	cf 5f       	subi	r28, 0xFF	; 255
    9ae2:	f3 cf       	rjmp	.-26     	; 0x9aca <LBPrint+0x12>
	}
}
    9ae4:	df 91       	pop	r29
    9ae6:	cf 91       	pop	r28
    9ae8:	1f 91       	pop	r17
    9aea:	0f 91       	pop	r16
    9aec:	ff 90       	pop	r15
    9aee:	08 95       	ret

00009af0 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    9af0:	df 92       	push	r13
    9af2:	ef 92       	push	r14
    9af4:	ff 92       	push	r15
    9af6:	0f 93       	push	r16
    9af8:	1f 93       	push	r17
    9afa:	cf 93       	push	r28
    9afc:	df 93       	push	r29
    9afe:	1f 92       	push	r1
    9b00:	cd b7       	in	r28, 0x3d	; 61
    9b02:	de b7       	in	r29, 0x3e	; 62
    9b04:	38 2f       	mov	r19, r24
    9b06:	06 2f       	mov	r16, r22
    9b08:	84 2f       	mov	r24, r20
    9b0a:	9d ef       	ldi	r25, 0xFD	; 253
    9b0c:	e9 2e       	mov	r14, r25
    9b0e:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9b10:	4a e0       	ldi	r20, 0x0A	; 10
    9b12:	f4 2e       	mov	r15, r20
    9b14:	1f ef       	ldi	r17, 0xFF	; 255
    9b16:	13 0f       	add	r17, r19
    9b18:	6f 2d       	mov	r22, r15
    9b1a:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    9b1e:	d8 2e       	mov	r13, r24
    9b20:	40 e3       	ldi	r20, 0x30	; 48
    9b22:	49 0f       	add	r20, r25
    9b24:	60 2f       	mov	r22, r16
    9b26:	83 2f       	mov	r24, r19
    9b28:	29 83       	std	Y+1, r18	; 0x01
    9b2a:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		value /= 10;
    9b2e:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    9b30:	29 81       	ldd	r18, Y+1	; 0x01
    9b32:	21 11       	cpse	r18, r1
    9b34:	02 c0       	rjmp	.+4      	; 0x9b3a <LBPrintByte+0x4a>
    9b36:	dd 20       	and	r13, r13
    9b38:	19 f0       	breq	.+6      	; 0x9b40 <LBPrintByte+0x50>
    9b3a:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    9b3c:	1e 11       	cpse	r17, r14
    9b3e:	ea cf       	rjmp	.-44     	; 0x9b14 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9b40:	0f 90       	pop	r0
    9b42:	df 91       	pop	r29
    9b44:	cf 91       	pop	r28
    9b46:	1f 91       	pop	r17
    9b48:	0f 91       	pop	r16
    9b4a:	ff 90       	pop	r15
    9b4c:	ef 90       	pop	r14
    9b4e:	df 90       	pop	r13
    9b50:	08 95       	ret

00009b52 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    9b52:	cf 92       	push	r12
    9b54:	df 92       	push	r13
    9b56:	ef 92       	push	r14
    9b58:	ff 92       	push	r15
    9b5a:	0f 93       	push	r16
    9b5c:	1f 93       	push	r17
    9b5e:	cf 93       	push	r28
    9b60:	df 93       	push	r29
    9b62:	00 d0       	rcall	.+0      	; 0x9b64 <LBPrintInt+0x12>
    9b64:	cd b7       	in	r28, 0x3d	; 61
    9b66:	de b7       	in	r29, 0x3e	; 62
    9b68:	38 2f       	mov	r19, r24
    9b6a:	16 2f       	mov	r17, r22
    9b6c:	ca 01       	movw	r24, r20
    9b6e:	4b ef       	ldi	r20, 0xFB	; 251
    9b70:	d4 2e       	mov	r13, r20
    9b72:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    9b74:	5a e0       	ldi	r21, 0x0A	; 10
    9b76:	e5 2e       	mov	r14, r21
    9b78:	f1 2c       	mov	r15, r1
    9b7a:	cc 24       	eor	r12, r12
    9b7c:	ca 94       	dec	r12
    9b7e:	c3 0e       	add	r12, r19
    9b80:	b7 01       	movw	r22, r14
    9b82:	0e 94 c9 71 	call	0xe392	; 0xe392 <__udivmodhi4>
    9b86:	06 2f       	mov	r16, r22
    9b88:	40 e3       	ldi	r20, 0x30	; 48
    9b8a:	48 0f       	add	r20, r24
    9b8c:	61 2f       	mov	r22, r17
    9b8e:	83 2f       	mov	r24, r19
    9b90:	29 83       	std	Y+1, r18	; 0x01
    9b92:	7a 83       	std	Y+2, r23	; 0x02
    9b94:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		value /= 10;
    9b98:	80 2f       	mov	r24, r16
    9b9a:	7a 81       	ldd	r23, Y+2	; 0x02
    9b9c:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    9b9e:	29 81       	ldd	r18, Y+1	; 0x01
    9ba0:	21 11       	cpse	r18, r1
    9ba2:	02 c0       	rjmp	.+4      	; 0x9ba8 <LBPrintInt+0x56>
    9ba4:	00 97       	sbiw	r24, 0x00	; 0
    9ba6:	19 f0       	breq	.+6      	; 0x9bae <LBPrintInt+0x5c>
    9ba8:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    9baa:	cd 10       	cpse	r12, r13
    9bac:	e6 cf       	rjmp	.-52     	; 0x9b7a <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    9bae:	0f 90       	pop	r0
    9bb0:	0f 90       	pop	r0
    9bb2:	df 91       	pop	r29
    9bb4:	cf 91       	pop	r28
    9bb6:	1f 91       	pop	r17
    9bb8:	0f 91       	pop	r16
    9bba:	ff 90       	pop	r15
    9bbc:	ef 90       	pop	r14
    9bbe:	df 90       	pop	r13
    9bc0:	cf 90       	pop	r12
    9bc2:	08 95       	ret

00009bc4 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9bc4:	af 92       	push	r10
    9bc6:	cf 92       	push	r12
    9bc8:	ef 92       	push	r14
    9bca:	ff 92       	push	r15
    9bcc:	0f 93       	push	r16
    9bce:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9bd0:	70 e0       	ldi	r23, 0x00	; 0
    9bd2:	f1 2c       	mov	r15, r1
    9bd4:	fb 01       	movw	r30, r22
    9bd6:	e2 0f       	add	r30, r18
    9bd8:	f1 1d       	adc	r31, r1
    9bda:	ee 16       	cp	r14, r30
    9bdc:	ff 06       	cpc	r15, r31
    9bde:	a4 f4       	brge	.+40     	; 0x9c08 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9be0:	ea 0c       	add	r14, r10
    9be2:	f1 1c       	adc	r15, r1
    9be4:	6e 15       	cp	r22, r14
    9be6:	7f 05       	cpc	r23, r15
    9be8:	7c f4       	brge	.+30     	; 0x9c08 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9bea:	28 2f       	mov	r18, r24
    9bec:	30 e0       	ldi	r19, 0x00	; 0
    9bee:	10 e0       	ldi	r17, 0x00	; 0
    9bf0:	c9 01       	movw	r24, r18
    9bf2:	84 0f       	add	r24, r20
    9bf4:	91 1d       	adc	r25, r1
    9bf6:	08 17       	cp	r16, r24
    9bf8:	19 07       	cpc	r17, r25
    9bfa:	34 f4       	brge	.+12     	; 0x9c08 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9bfc:	0c 0d       	add	r16, r12
    9bfe:	11 1d       	adc	r17, r1
    9c00:	81 e0       	ldi	r24, 0x01	; 1
    9c02:	20 17       	cp	r18, r16
    9c04:	31 07       	cpc	r19, r17
    9c06:	0c f0       	brlt	.+2      	; 0x9c0a <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9c08:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9c0a:	1f 91       	pop	r17
    9c0c:	0f 91       	pop	r16
    9c0e:	ff 90       	pop	r15
    9c10:	ef 90       	pop	r14
    9c12:	cf 90       	pop	r12
    9c14:	af 90       	pop	r10
    9c16:	08 95       	ret

00009c18 <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29
    9c1c:	d8 2f       	mov	r29, r24
    9c1e:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    9c20:	80 e0       	ldi	r24, 0x00	; 0
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <GetPrngNumber>
    9c28:	6f ef       	ldi	r22, 0xFF	; 255
    9c2a:	70 e0       	ldi	r23, 0x00	; 0
    9c2c:	0e 94 c9 71 	call	0xe392	; 0xe392 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    9c30:	6c 2f       	mov	r22, r28
    9c32:	70 e0       	ldi	r23, 0x00	; 0
    9c34:	6d 1b       	sub	r22, r29
    9c36:	71 09       	sbc	r23, r1
    9c38:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
}
    9c3c:	8d 0f       	add	r24, r29
    9c3e:	df 91       	pop	r29
    9c40:	cf 91       	pop	r28
    9c42:	08 95       	ret

00009c44 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9c44:	cf 93       	push	r28
    9c46:	df 93       	push	r29
    9c48:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9c4a:	c0 e0       	ldi	r28, 0x00	; 0
    9c4c:	cd 17       	cp	r28, r29
    9c4e:	31 f0       	breq	.+12     	; 0x9c5c <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9c50:	8f ef       	ldi	r24, 0xFF	; 255
    9c52:	9f ef       	ldi	r25, 0xFF	; 255
    9c54:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9c58:	cf 5f       	subi	r28, 0xFF	; 255
    9c5a:	f8 cf       	rjmp	.-16     	; 0x9c4c <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9c5c:	df 91       	pop	r29
    9c5e:	cf 91       	pop	r28
    9c60:	08 95       	ret

00009c62 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    9c62:	df 92       	push	r13
    9c64:	ef 92       	push	r14
    9c66:	ff 92       	push	r15
    9c68:	0f 93       	push	r16
    9c6a:	1f 93       	push	r17
    9c6c:	cf 93       	push	r28
    9c6e:	df 93       	push	r29
    9c70:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9c72:	fb 01       	movw	r30, r22
    9c74:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9c76:	31 96       	adiw	r30, 0x01	; 1
    9c78:	64 91       	lpm	r22, Z
    9c7a:	5f ef       	ldi	r21, 0xFF	; 255
    9c7c:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    9c7e:	24 2f       	mov	r18, r20
    9c80:	21 70       	andi	r18, 0x01	; 1
    9c82:	40 ff       	sbrs	r20, 0
    9c84:	04 c0       	rjmp	.+8      	; 0x9c8e <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    9c86:	95 2f       	mov	r25, r21
		dx=-1;
    9c88:	ff 24       	eor	r15, r15
    9c8a:	fa 94       	dec	r15
    9c8c:	03 c0       	rjmp	.+6      	; 0x9c94 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    9c8e:	ff 24       	eor	r15, r15
    9c90:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    9c92:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    9c94:	41 ff       	sbrs	r20, 1
    9c96:	05 c0       	rjmp	.+10     	; 0x9ca2 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    9c98:	7f ef       	ldi	r23, 0xFF	; 255
    9c9a:	76 0f       	add	r23, r22
		dy=-1;
    9c9c:	ee 24       	eor	r14, r14
    9c9e:	ea 94       	dec	r14
    9ca0:	03 c0       	rjmp	.+6      	; 0x9ca8 <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    9ca2:	ee 24       	eor	r14, r14
    9ca4:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    9ca6:	70 e0       	ldi	r23, 0x00	; 0
    9ca8:	21 11       	cpse	r18, r1
    9caa:	01 c0       	rjmp	.+2      	; 0x9cae <LBMapSprite+0x4c>
    9cac:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9cae:	00 e0       	ldi	r16, 0x00	; 0
    9cb0:	06 17       	cp	r16, r22
    9cb2:	09 f1       	breq	.+66     	; 0x9cf6 <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9cb4:	71 03       	mulsu	r23, r17
    9cb6:	e0 01       	movw	r28, r0
    9cb8:	11 24       	eor	r1, r1
    9cba:	d8 2e       	mov	r13, r24
    9cbc:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    9cbe:	8d 15       	cp	r24, r13
    9cc0:	b1 f0       	breq	.+44     	; 0x9cee <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9cc2:	9e 01       	movw	r18, r28
    9cc4:	29 0f       	add	r18, r25
    9cc6:	31 1d       	adc	r19, r1
    9cc8:	97 fd       	sbrc	r25, 7
    9cca:	3a 95       	dec	r19
    9ccc:	2e 5f       	subi	r18, 0xFE	; 254
    9cce:	3f 4f       	sbci	r19, 0xFF	; 255
    9cd0:	fd 01       	movw	r30, r26
    9cd2:	e2 0f       	add	r30, r18
    9cd4:	f3 1f       	adc	r31, r19
    9cd6:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    9cd8:	34 e0       	ldi	r19, 0x04	; 4
    9cda:	83 9f       	mul	r24, r19
    9cdc:	f0 01       	movw	r30, r0
    9cde:	11 24       	eor	r1, r1
    9ce0:	ec 51       	subi	r30, 0x1C	; 28
    9ce2:	f0 4f       	sbci	r31, 0xF0	; 240
    9ce4:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    9ce6:	8f 5f       	subi	r24, 0xFF	; 255
    9ce8:	43 83       	std	Z+3, r20	; 0x03
    9cea:	9f 0d       	add	r25, r15
    9cec:	e8 cf       	rjmp	.-48     	; 0x9cbe <LBMapSprite+0x5c>
    9cee:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    9cf0:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9cf2:	95 2f       	mov	r25, r21
    9cf4:	dd cf       	rjmp	.-70     	; 0x9cb0 <LBMapSprite+0x4e>
	}
}
    9cf6:	df 91       	pop	r29
    9cf8:	cf 91       	pop	r28
    9cfa:	1f 91       	pop	r17
    9cfc:	0f 91       	pop	r16
    9cfe:	ff 90       	pop	r15
    9d00:	ef 90       	pop	r14
    9d02:	df 90       	pop	r13
    9d04:	08 95       	ret

00009d06 <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    9d06:	df 92       	push	r13
    9d08:	ef 92       	push	r14
    9d0a:	ff 92       	push	r15
    9d0c:	0f 93       	push	r16
    9d0e:	1f 93       	push	r17
    9d10:	cf 93       	push	r28
    9d12:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9d14:	a0 91 b7 0c 	lds	r26, 0x0CB7
    9d18:	98 e0       	ldi	r25, 0x08	; 8
    9d1a:	a9 9f       	mul	r26, r25
    9d1c:	70 01       	movw	r14, r0
    9d1e:	11 24       	eor	r1, r1
    9d20:	50 e0       	ldi	r21, 0x00	; 0
    9d22:	38 ef       	ldi	r19, 0xF8	; 248
    9d24:	a3 9f       	mul	r26, r19
    9d26:	30 2d       	mov	r19, r0
    9d28:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9d2a:	70 e0       	ldi	r23, 0x00	; 0
    9d2c:	70 17       	cp	r23, r16
    9d2e:	09 f1       	breq	.+66     	; 0x9d72 <LBMoveSprite+0x6c>
    9d30:	d4 2e       	mov	r13, r20
    9d32:	13 2f       	mov	r17, r19
    9d34:	14 0f       	add	r17, r20
    9d36:	b8 2f       	mov	r27, r24
    9d38:	b2 0f       	add	r27, r18
    9d3a:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    9d3c:	8b 17       	cp	r24, r27
    9d3e:	a9 f0       	breq	.+42     	; 0x9d6a <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    9d40:	c4 e0       	ldi	r28, 0x04	; 4
    9d42:	8c 9f       	mul	r24, r28
    9d44:	f0 01       	movw	r30, r0
    9d46:	11 24       	eor	r1, r1
    9d48:	ef 01       	movw	r28, r30
    9d4a:	cc 51       	subi	r28, 0x1C	; 28
    9d4c:	d0 4f       	sbci	r29, 0xF0	; 240
    9d4e:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    9d50:	a0 32       	cpi	r26, 0x20	; 32
    9d52:	28 f4       	brcc	.+10     	; 0x9d5e <LBMoveSprite+0x58>
    9d54:	e4 16       	cp	r14, r20
    9d56:	f5 06       	cpc	r15, r21
    9d58:	14 f4       	brge	.+4      	; 0x9d5e <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    9d5a:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    9d5c:	03 c0       	rjmp	.+6      	; 0x9d64 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9d5e:	ec 51       	subi	r30, 0x1C	; 28
    9d60:	f0 4f       	sbci	r31, 0xF0	; 240
    9d62:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    9d64:	8f 5f       	subi	r24, 0xFF	; 255
    9d66:	98 5f       	subi	r25, 0xF8	; 248
    9d68:	e9 cf       	rjmp	.-46     	; 0x9d3c <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    9d6a:	7f 5f       	subi	r23, 0xFF	; 255
    9d6c:	48 5f       	subi	r20, 0xF8	; 248
    9d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    9d70:	dd cf       	rjmp	.-70     	; 0x9d2c <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    9d72:	df 91       	pop	r29
    9d74:	cf 91       	pop	r28
    9d76:	1f 91       	pop	r17
    9d78:	0f 91       	pop	r16
    9d7a:	ff 90       	pop	r15
    9d7c:	ef 90       	pop	r14
    9d7e:	df 90       	pop	r13
    9d80:	08 95       	ret

00009d82 <LBRotateSprites>:

void LBRotateSprites()
{
    9d82:	80 e0       	ldi	r24, 0x00	; 0
    9d84:	90 e0       	ldi	r25, 0x00	; 0
    9d86:	dc 01       	movw	r26, r24
    9d88:	ac 51       	subi	r26, 0x1C	; 28
    9d8a:	b0 4f       	sbci	r27, 0xF0	; 240
    9d8c:	fc 01       	movw	r30, r24
    9d8e:	e0 5f       	subi	r30, 0xF0	; 240
    9d90:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    9d92:	13 96       	adiw	r26, 0x03	; 3
    9d94:	2c 91       	ld	r18, X
    9d96:	13 97       	sbiw	r26, 0x03	; 3
    9d98:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    9d9a:	12 96       	adiw	r26, 0x02	; 2
    9d9c:	2c 91       	ld	r18, X
    9d9e:	12 97       	sbiw	r26, 0x02	; 2
    9da0:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    9da2:	2c 91       	ld	r18, X
    9da4:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    9da6:	11 96       	adiw	r26, 0x01	; 1
    9da8:	2c 91       	ld	r18, X
    9daa:	21 83       	std	Z+1, r18	; 0x01
    9dac:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    9dae:	8c 33       	cpi	r24, 0x3C	; 60
    9db0:	91 05       	cpc	r25, r1
    9db2:	49 f7       	brne	.-46     	; 0x9d86 <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    9db4:	80 91 01 05 	lds	r24, 0x0501
    9db8:	94 e0       	ldi	r25, 0x04	; 4
    9dba:	89 9f       	mul	r24, r25
    9dbc:	f0 01       	movw	r30, r0
    9dbe:	11 24       	eor	r1, r1
    9dc0:	ec 51       	subi	r30, 0x1C	; 28
    9dc2:	f0 4f       	sbci	r31, 0xF0	; 240
    9dc4:	93 81       	ldd	r25, Z+3	; 0x03
    9dc6:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    9dca:	92 81       	ldd	r25, Z+2	; 0x02
    9dcc:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    9dd0:	90 81       	ld	r25, Z
    9dd2:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    9dd6:	91 81       	ldd	r25, Z+1	; 0x01
    9dd8:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    9ddc:	8f 5f       	subi	r24, 0xFF	; 255
    9dde:	84 31       	cpi	r24, 0x14	; 20
    9de0:	08 f0       	brcs	.+2      	; 0x9de4 <LBRotateSprites+0x62>
    9de2:	8f e0       	ldi	r24, 0x0F	; 15
    9de4:	80 93 01 05 	sts	0x0501, r24
    9de8:	08 95       	ret

00009dea <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    9dea:	80 91 cb 0d 	lds	r24, 0x0DCB
}
    9dee:	81 70       	andi	r24, 0x01	; 1
    9df0:	08 95       	ret

00009df2 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    9df2:	8e e8       	ldi	r24, 0x8E	; 142
    9df4:	90 e0       	ldi	r25, 0x00	; 0
    9df6:	90 93 97 0d 	sts	0x0D97, r25
    9dfa:	80 93 96 0d 	sts	0x0D96, r24
    9dfe:	80 e0       	ldi	r24, 0x00	; 0
    9e00:	90 e0       	ldi	r25, 0x00	; 0
    9e02:	fc 01       	movw	r30, r24
    9e04:	ef 5f       	subi	r30, 0xFF	; 255
    9e06:	fc 4f       	sbci	r31, 0xFC	; 252
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    9e08:	e4 91       	lpm	r30, Z
    9e0a:	dc 01       	movw	r26, r24
    9e0c:	aa 56       	subi	r26, 0x6A	; 106
    9e0e:	b2 4f       	sbci	r27, 0xF2	; 242
    9e10:	12 96       	adiw	r26, 0x02	; 2
    9e12:	ec 93       	st	X, r30
    9e14:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    9e16:	8e 31       	cpi	r24, 0x1E	; 30
    9e18:	91 05       	cpc	r25, r1
    9e1a:	99 f7       	brne	.-26     	; 0x9e02 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    9e1c:	08 95       	ret

00009e1e <init_enemy_state>:

void init_enemy_state()
{
    9e1e:	80 e0       	ldi	r24, 0x00	; 0
    9e20:	90 e0       	ldi	r25, 0x00	; 0
    9e22:	9c 01       	movw	r18, r24
    9e24:	2a 54       	subi	r18, 0x4A	; 74
    9e26:	32 4f       	sbci	r19, 0xF2	; 242
    9e28:	f9 01       	movw	r30, r18
    9e2a:	e0 5e       	subi	r30, 0xE0	; 224
    9e2c:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    9e2e:	10 82       	st	Z, r1
    9e30:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    9e32:	10 82       	st	Z, r1
    9e34:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    9e36:	89 30       	cpi	r24, 0x09	; 9
    9e38:	21 e0       	ldi	r18, 0x01	; 1
    9e3a:	92 07       	cpc	r25, r18
    9e3c:	91 f7       	brne	.-28     	; 0x9e22 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    9e3e:	10 92 d1 0d 	sts	0x0DD1, r1
    9e42:	08 95       	ret

00009e44 <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    9e44:	81 11       	cpse	r24, r1
    9e46:	3f c0       	rjmp	.+126    	; 0x9ec6 <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e48:	10 92 f0 0d 	sts	0x0DF0, r1
	shot->hit_count = damage;
    9e4c:	81 e0       	ldi	r24, 0x01	; 1
    9e4e:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9e52:	90 e5       	ldi	r25, 0x50	; 80
    9e54:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9e58:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    9e5c:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9e60:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9e64:	2a e8       	ldi	r18, 0x8A	; 138
    9e66:	3d e0       	ldi	r19, 0x0D	; 13
    9e68:	30 93 fc 0d 	sts	0x0DFC, r19
    9e6c:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9e70:	25 e9       	ldi	r18, 0x95	; 149
    9e72:	30 e3       	ldi	r19, 0x30	; 48
    9e74:	30 93 8b 0d 	sts	0x0D8B, r19
    9e78:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9e7c:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    9e80:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9e84:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9e88:	10 92 04 0e 	sts	0x0E04, r1
	shot->hit_count = damage;
    9e8c:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9e90:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9e94:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9e98:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9e9c:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9ea0:	40 e4       	ldi	r20, 0x40	; 64
    9ea2:	50 e1       	ldi	r21, 0x10	; 16
    9ea4:	50 93 10 0e 	sts	0x0E10, r21
    9ea8:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9eac:	30 93 41 10 	sts	0x1041, r19
    9eb0:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    9eb4:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9eb8:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9ebc:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9ec0:	10 92 18 0e 	sts	0x0E18, r1
    9ec4:	41 c0       	rjmp	.+130    	; 0x9f48 <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    9ec6:	82 30       	cpi	r24, 0x02	; 2
    9ec8:	09 f0       	breq	.+2      	; 0x9ecc <init_player_shot+0x88>
    9eca:	57 c0       	rjmp	.+174    	; 0x9f7a <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9ecc:	81 e0       	ldi	r24, 0x01	; 1
    9ece:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    9ed2:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9ed6:	94 e6       	ldi	r25, 0x64	; 100
    9ed8:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9edc:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    9ee0:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9ee4:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9ee8:	2a e8       	ldi	r18, 0x8A	; 138
    9eea:	3d e0       	ldi	r19, 0x0D	; 13
    9eec:	30 93 fc 0d 	sts	0x0DFC, r19
    9ef0:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9ef4:	22 e9       	ldi	r18, 0x92	; 146
    9ef6:	30 e3       	ldi	r19, 0x30	; 48
    9ef8:	30 93 8b 0d 	sts	0x0D8B, r19
    9efc:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9f00:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    9f04:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f08:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f0c:	80 93 04 0e 	sts	0x0E04, r24
	shot->hit_count = damage;
    9f10:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9f14:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9f18:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9f1c:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9f20:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9f24:	40 e4       	ldi	r20, 0x40	; 64
    9f26:	50 e1       	ldi	r21, 0x10	; 16
    9f28:	50 93 10 0e 	sts	0x0E10, r21
    9f2c:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9f30:	30 93 41 10 	sts	0x1041, r19
    9f34:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    9f38:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9f3c:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9f40:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f44:	80 93 18 0e 	sts	0x0E18, r24
	shot->hit_count = damage;
    9f48:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    9f4c:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    9f50:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    9f54:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    9f58:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    9f5c:	42 e5       	ldi	r20, 0x52	; 82
    9f5e:	50 e1       	ldi	r21, 0x10	; 16
    9f60:	50 93 24 0e 	sts	0x0E24, r21
    9f64:	40 93 23 0e 	sts	0x0E23, r20
	shot->anim.anims[0] = (char*) map;
    9f68:	30 93 53 10 	sts	0x1053, r19
    9f6c:	20 93 52 10 	sts	0x1052, r18
	shot->shared.vx = speed;
    9f70:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
    9f74:	10 92 15 0e 	sts	0x0E15, r1
    9f78:	7f c1       	rjmp	.+766    	; 0xa278 <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    9f7a:	84 30       	cpi	r24, 0x04	; 4
    9f7c:	09 f0       	breq	.+2      	; 0x9f80 <init_player_shot+0x13c>
    9f7e:	5a c0       	rjmp	.+180    	; 0xa034 <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9f80:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    9f84:	81 e0       	ldi	r24, 0x01	; 1
    9f86:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    9f8a:	9f e7       	ldi	r25, 0x7F	; 127
    9f8c:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    9f90:	28 ef       	ldi	r18, 0xF8	; 248
    9f92:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->anim.anim_count = 1;
    9f96:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    9f9a:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    9f9e:	2a e8       	ldi	r18, 0x8A	; 138
    9fa0:	3d e0       	ldi	r19, 0x0D	; 13
    9fa2:	30 93 fc 0d 	sts	0x0DFC, r19
    9fa6:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    9faa:	25 e9       	ldi	r18, 0x95	; 149
    9fac:	30 e3       	ldi	r19, 0x30	; 48
    9fae:	30 93 8b 0d 	sts	0x0D8B, r19
    9fb2:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    9fb6:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    9fba:	21 e8       	ldi	r18, 0x81	; 129
    9fbc:	20 93 ed 0d 	sts	0x0DED, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9fc0:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    9fc4:	22 e0       	ldi	r18, 0x02	; 2
    9fc6:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    9fca:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    9fce:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    9fd2:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    9fd6:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    9fda:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    9fde:	40 e4       	ldi	r20, 0x40	; 64
    9fe0:	50 e1       	ldi	r21, 0x10	; 16
    9fe2:	50 93 10 0e 	sts	0x0E10, r21
    9fe6:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    9fea:	49 e8       	ldi	r20, 0x89	; 137
    9fec:	50 e3       	ldi	r21, 0x30	; 48
    9fee:	50 93 41 10 	sts	0x1041, r21
    9ff2:	40 93 40 10 	sts	0x1040, r20
	shot->shared.vx = speed;
    9ff6:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    9ffa:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    9ffe:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a002:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a006:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a00a:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a00e:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a012:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a016:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a01a:	62 e5       	ldi	r22, 0x52	; 82
    a01c:	70 e1       	ldi	r23, 0x10	; 16
    a01e:	70 93 24 0e 	sts	0x0E24, r23
    a022:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a026:	50 93 53 10 	sts	0x1053, r21
    a02a:	40 93 52 10 	sts	0x1052, r20
	shot->shared.vx = speed;
    a02e:	90 93 16 0e 	sts	0x0E16, r25
    a032:	5c c0       	rjmp	.+184    	; 0xa0ec <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a034:	86 30       	cpi	r24, 0x06	; 6
    a036:	09 f0       	breq	.+2      	; 0xa03a <init_player_shot+0x1f6>
    a038:	60 c0       	rjmp	.+192    	; 0xa0fa <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a03a:	33 e0       	ldi	r19, 0x03	; 3
    a03c:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a040:	22 e0       	ldi	r18, 0x02	; 2
    a042:	20 93 f1 0d 	sts	0x0DF1, r18
	shot->shot_speed = speed;
    a046:	8f e7       	ldi	r24, 0x7F	; 127
    a048:	80 93 f3 0d 	sts	0x0DF3, r24
	shot->y_delta = y_delta;
    a04c:	98 ef       	ldi	r25, 0xF8	; 248
    a04e:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a052:	91 e0       	ldi	r25, 0x01	; 1
    a054:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a058:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a05c:	4a e8       	ldi	r20, 0x8A	; 138
    a05e:	5d e0       	ldi	r21, 0x0D	; 13
    a060:	50 93 fc 0d 	sts	0x0DFC, r21
    a064:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a068:	48 e9       	ldi	r20, 0x98	; 152
    a06a:	50 e3       	ldi	r21, 0x30	; 48
    a06c:	50 93 8b 0d 	sts	0x0D8B, r21
    a070:	40 93 8a 0d 	sts	0x0D8A, r20
	shot->shared.vx = speed;
    a074:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->shared.vy = 0;
    a078:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a07c:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a080:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a084:	20 93 05 0e 	sts	0x0E05, r18
	shot->shot_speed = speed;
    a088:	80 93 07 0e 	sts	0x0E07, r24
	shot->y_delta = y_delta;
    a08c:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a090:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a094:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a098:	60 e4       	ldi	r22, 0x40	; 64
    a09a:	70 e1       	ldi	r23, 0x10	; 16
    a09c:	70 93 10 0e 	sts	0x0E10, r23
    a0a0:	60 93 0f 0e 	sts	0x0E0F, r22
	shot->anim.anims[0] = (char*) map;
    a0a4:	69 e8       	ldi	r22, 0x89	; 137
    a0a6:	70 e3       	ldi	r23, 0x30	; 48
    a0a8:	70 93 41 10 	sts	0x1041, r23
    a0ac:	60 93 40 10 	sts	0x1040, r22
	shot->shared.vx = speed;
    a0b0:	80 93 02 0e 	sts	0x0E02, r24
	shot->shared.vy = 0;
    a0b4:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0b8:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a0bc:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a0c0:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a0c4:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->y_delta = y_delta;
    a0c8:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a0cc:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a0d0:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a0d4:	62 e5       	ldi	r22, 0x52	; 82
    a0d6:	70 e1       	ldi	r23, 0x10	; 16
    a0d8:	70 93 24 0e 	sts	0x0E24, r23
    a0dc:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a0e0:	50 93 53 10 	sts	0x1053, r21
    a0e4:	40 93 52 10 	sts	0x1052, r20
	shot->shared.vx = speed;
    a0e8:	80 93 16 0e 	sts	0x0E16, r24
	shot->shared.vy = 0;
    a0ec:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a0f0:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    a0f4:	20 93 e7 0d 	sts	0x0DE7, r18
    a0f8:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    a0fa:	88 30       	cpi	r24, 0x08	; 8
    a0fc:	09 f0       	breq	.+2      	; 0xa100 <init_player_shot+0x2bc>
    a0fe:	60 c0       	rjmp	.+192    	; 0xa1c0 <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a100:	33 e0       	ldi	r19, 0x03	; 3
    a102:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a106:	62 e0       	ldi	r22, 0x02	; 2
    a108:	60 93 f1 0d 	sts	0x0DF1, r22
	shot->shot_speed = speed;
    a10c:	2f e7       	ldi	r18, 0x7F	; 127
    a10e:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->y_delta = y_delta;
    a112:	98 ef       	ldi	r25, 0xF8	; 248
    a114:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a118:	91 e0       	ldi	r25, 0x01	; 1
    a11a:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a11e:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a122:	4a e8       	ldi	r20, 0x8A	; 138
    a124:	5d e0       	ldi	r21, 0x0D	; 13
    a126:	50 93 fc 0d 	sts	0x0DFC, r21
    a12a:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a12e:	48 e9       	ldi	r20, 0x98	; 152
    a130:	50 e3       	ldi	r21, 0x30	; 48
    a132:	50 93 8b 0d 	sts	0x0D8B, r21
    a136:	40 93 8a 0d 	sts	0x0D8A, r20
	shot->shared.vx = speed;
    a13a:	20 93 ee 0d 	sts	0x0DEE, r18
	shot->shared.vy = 0;
    a13e:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a142:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a146:	90 93 04 0e 	sts	0x0E04, r25
	shot->hit_count = damage;
    a14a:	90 93 05 0e 	sts	0x0E05, r25
	shot->shot_speed = speed;
    a14e:	20 93 07 0e 	sts	0x0E07, r18
	shot->y_delta = y_delta;
    a152:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a156:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    a15a:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    a15e:	e0 e4       	ldi	r30, 0x40	; 64
    a160:	f0 e1       	ldi	r31, 0x10	; 16
    a162:	f0 93 10 0e 	sts	0x0E10, r31
    a166:	e0 93 0f 0e 	sts	0x0E0F, r30
	shot->anim.anims[0] = (char*) map;
    a16a:	e2 e9       	ldi	r30, 0x92	; 146
    a16c:	f0 e3       	ldi	r31, 0x30	; 48
    a16e:	f0 93 41 10 	sts	0x1041, r31
    a172:	e0 93 40 10 	sts	0x1040, r30
	shot->shared.vx = speed;
    a176:	20 93 02 0e 	sts	0x0E02, r18
	shot->shared.vy = 0;
    a17a:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a17e:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a182:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    a186:	60 93 19 0e 	sts	0x0E19, r22
	shot->shot_speed = speed;
    a18a:	20 93 1b 0e 	sts	0x0E1B, r18
	shot->y_delta = y_delta;
    a18e:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->anim.anim_count = 1;
    a192:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    a196:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    a19a:	82 e5       	ldi	r24, 0x52	; 82
    a19c:	90 e1       	ldi	r25, 0x10	; 16
    a19e:	90 93 24 0e 	sts	0x0E24, r25
    a1a2:	80 93 23 0e 	sts	0x0E23, r24
	shot->anim.anims[0] = (char*) map;
    a1a6:	50 93 53 10 	sts	0x1053, r21
    a1aa:	40 93 52 10 	sts	0x1052, r20
	shot->shared.vx = speed;
    a1ae:	20 93 16 0e 	sts	0x0E16, r18
	shot->shared.vy = 0;
    a1b2:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a1b6:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    a1ba:	30 93 e7 0d 	sts	0x0DE7, r19
    a1be:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a1c0:	55 e0       	ldi	r21, 0x05	; 5
    a1c2:	50 93 f0 0d 	sts	0x0DF0, r21
	shot->hit_count = damage;
    a1c6:	42 e0       	ldi	r20, 0x02	; 2
    a1c8:	40 93 f1 0d 	sts	0x0DF1, r20
	shot->shot_speed = speed;
    a1cc:	9f e7       	ldi	r25, 0x7F	; 127
    a1ce:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a1d2:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a1d6:	81 e0       	ldi	r24, 0x01	; 1
    a1d8:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a1dc:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a1e0:	2a e8       	ldi	r18, 0x8A	; 138
    a1e2:	3d e0       	ldi	r19, 0x0D	; 13
    a1e4:	30 93 fc 0d 	sts	0x0DFC, r19
    a1e8:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a1ec:	2f e8       	ldi	r18, 0x8F	; 143
    a1ee:	30 e3       	ldi	r19, 0x30	; 48
    a1f0:	30 93 8b 0d 	sts	0x0D8B, r19
    a1f4:	20 93 8a 0d 	sts	0x0D8A, r18
	shot->shared.vx = speed;
    a1f8:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a1fc:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a200:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a204:	50 93 04 0e 	sts	0x0E04, r21
	shot->hit_count = damage;
    a208:	40 93 05 0e 	sts	0x0E05, r20
	shot->shot_speed = speed;
    a20c:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a210:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a214:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a218:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a21c:	40 e4       	ldi	r20, 0x40	; 64
    a21e:	50 e1       	ldi	r21, 0x10	; 16
    a220:	50 93 10 0e 	sts	0x0E10, r21
    a224:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a228:	30 93 41 10 	sts	0x1041, r19
    a22c:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    a230:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a234:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a238:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a23c:	26 e0       	ldi	r18, 0x06	; 6
    a23e:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a242:	24 e0       	ldi	r18, 0x04	; 4
    a244:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    a248:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a24c:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a250:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a254:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a258:	22 e5       	ldi	r18, 0x52	; 82
    a25a:	30 e1       	ldi	r19, 0x10	; 16
    a25c:	30 93 24 0e 	sts	0x0E24, r19
    a260:	20 93 23 0e 	sts	0x0E23, r18
	shot->anim.anims[0] = (char*) map;
    a264:	2c e8       	ldi	r18, 0x8C	; 140
    a266:	30 e3       	ldi	r19, 0x30	; 48
    a268:	30 93 53 10 	sts	0x1053, r19
    a26c:	20 93 52 10 	sts	0x1052, r18
	shot->shared.vx = speed;
    a270:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    a274:	90 93 15 0e 	sts	0x0E15, r25
	}
	shot->active = 0;
    a278:	10 92 1a 0e 	sts	0x0E1A, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    a27c:	80 93 e7 0d 	sts	0x0DE7, r24
    a280:	08 95       	ret

0000a282 <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    a282:	81 11       	cpse	r24, r1
    a284:	55 c0       	rjmp	.+170    	; 0xa330 <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a286:	81 e0       	ldi	r24, 0x01	; 1
    a288:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->hit_count = damage;
    a28c:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->shot_speed = speed;
    a290:	94 e6       	ldi	r25, 0x64	; 100
    a292:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    a296:	10 92 6f 0e 	sts	0x0E6F, r1
	shot->anim.anim_count = 1;
    a29a:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    a29e:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    a2a2:	2a ed       	ldi	r18, 0xDA	; 218
    a2a4:	3f e0       	ldi	r19, 0x0F	; 15
    a2a6:	30 93 77 0e 	sts	0x0E77, r19
    a2aa:	20 93 76 0e 	sts	0x0E76, r18
	shot->anim.anims[0] = (char*) map;
    a2ae:	22 e9       	ldi	r18, 0x92	; 146
    a2b0:	30 e3       	ldi	r19, 0x30	; 48
    a2b2:	30 93 db 0f 	sts	0x0FDB, r19
    a2b6:	20 93 da 0f 	sts	0x0FDA, r18
	shot->shared.vx = speed;
    a2ba:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    a2be:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2c2:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2c6:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a2ca:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    a2ce:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    a2d2:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a2d6:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    a2da:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    a2de:	46 e5       	ldi	r20, 0x56	; 86
    a2e0:	50 e1       	ldi	r21, 0x10	; 16
    a2e2:	50 93 8b 0e 	sts	0x0E8B, r21
    a2e6:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    a2ea:	30 93 57 10 	sts	0x1057, r19
    a2ee:	20 93 56 10 	sts	0x1056, r18
	shot->shared.vx = speed;
    a2f2:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    a2f6:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a2fa:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a2fe:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    a302:	80 93 94 0e 	sts	0x0E94, r24
	shot->shot_speed = speed;
    a306:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    a30a:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a30e:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    a312:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    a316:	46 e3       	ldi	r20, 0x36	; 54
    a318:	50 e1       	ldi	r21, 0x10	; 16
    a31a:	50 93 9f 0e 	sts	0x0E9F, r21
    a31e:	40 93 9e 0e 	sts	0x0E9E, r20
	shot->anim.anims[0] = (char*) map;
    a322:	30 93 37 10 	sts	0x1037, r19
    a326:	20 93 36 10 	sts	0x1036, r18
	shot->shared.vx = speed;
    a32a:	90 93 91 0e 	sts	0x0E91, r25
    a32e:	5c c0       	rjmp	.+184    	; 0xa3e8 <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a330:	82 30       	cpi	r24, 0x02	; 2
    a332:	09 f0       	breq	.+2      	; 0xa336 <init_boss_shot+0xb4>
    a334:	5e c0       	rjmp	.+188    	; 0xa3f2 <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a336:	94 e0       	ldi	r25, 0x04	; 4
    a338:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->hit_count = damage;
    a33c:	91 e0       	ldi	r25, 0x01	; 1
    a33e:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->shot_speed = speed;
    a342:	2f e7       	ldi	r18, 0x7F	; 127
    a344:	20 93 6e 0e 	sts	0x0E6E, r18
	shot->y_delta = y_delta;
    a348:	38 ef       	ldi	r19, 0xF8	; 248
    a34a:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->anim.anim_count = 1;
    a34e:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a352:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a356:	4a ed       	ldi	r20, 0xDA	; 218
    a358:	5f e0       	ldi	r21, 0x0F	; 15
    a35a:	50 93 77 0e 	sts	0x0E77, r21
    a35e:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a362:	45 e9       	ldi	r20, 0x95	; 149
    a364:	50 e3       	ldi	r21, 0x30	; 48
    a366:	50 93 db 0f 	sts	0x0FDB, r21
    a36a:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a36e:	20 93 69 0e 	sts	0x0E69, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a372:	31 e8       	ldi	r19, 0x81	; 129
    a374:	30 93 68 0e 	sts	0x0E68, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a378:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a37c:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a380:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    a384:	20 93 82 0e 	sts	0x0E82, r18
	shot->y_delta = y_delta;
    a388:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a38c:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a390:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a394:	46 e5       	ldi	r20, 0x56	; 86
    a396:	50 e1       	ldi	r21, 0x10	; 16
    a398:	50 93 8b 0e 	sts	0x0E8B, r21
    a39c:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    a3a0:	49 e8       	ldi	r20, 0x89	; 137
    a3a2:	50 e3       	ldi	r21, 0x30	; 48
    a3a4:	50 93 57 10 	sts	0x1057, r21
    a3a8:	40 93 56 10 	sts	0x1056, r20
	shot->shared.vx = speed;
    a3ac:	20 93 7d 0e 	sts	0x0E7D, r18
	shot->shared.vy = 0;
    a3b0:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3b4:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3b8:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    a3bc:	90 93 94 0e 	sts	0x0E94, r25
	shot->shot_speed = speed;
    a3c0:	20 93 96 0e 	sts	0x0E96, r18
	shot->y_delta = y_delta;
    a3c4:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a3c8:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a3cc:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a3d0:	66 e3       	ldi	r22, 0x36	; 54
    a3d2:	70 e1       	ldi	r23, 0x10	; 16
    a3d4:	70 93 9f 0e 	sts	0x0E9F, r23
    a3d8:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a3dc:	50 93 37 10 	sts	0x1037, r21
    a3e0:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a3e4:	20 93 91 0e 	sts	0x0E91, r18
	shot->shared.vy = 0;
    a3e8:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a3ec:	10 92 95 0e 	sts	0x0E95, r1
    a3f0:	20 c1       	rjmp	.+576    	; 0xa632 <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    a3f2:	84 30       	cpi	r24, 0x04	; 4
    a3f4:	09 f0       	breq	.+2      	; 0xa3f8 <init_boss_shot+0x176>
    a3f6:	5a c0       	rjmp	.+180    	; 0xa4ac <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a3f8:	33 e0       	ldi	r19, 0x03	; 3
    a3fa:	30 93 6b 0e 	sts	0x0E6B, r19
	shot->hit_count = damage;
    a3fe:	22 e0       	ldi	r18, 0x02	; 2
    a400:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    a404:	8f e7       	ldi	r24, 0x7F	; 127
    a406:	80 93 6e 0e 	sts	0x0E6E, r24
	shot->y_delta = y_delta;
    a40a:	98 ef       	ldi	r25, 0xF8	; 248
    a40c:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    a410:	91 e0       	ldi	r25, 0x01	; 1
    a412:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a416:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a41a:	4a ed       	ldi	r20, 0xDA	; 218
    a41c:	5f e0       	ldi	r21, 0x0F	; 15
    a41e:	50 93 77 0e 	sts	0x0E77, r21
    a422:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a426:	48 e9       	ldi	r20, 0x98	; 152
    a428:	50 e3       	ldi	r21, 0x30	; 48
    a42a:	50 93 db 0f 	sts	0x0FDB, r21
    a42e:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a432:	80 93 69 0e 	sts	0x0E69, r24
	shot->shared.vy = 0;
    a436:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a43a:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a43e:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    a442:	20 93 80 0e 	sts	0x0E80, r18
	shot->shot_speed = speed;
    a446:	80 93 82 0e 	sts	0x0E82, r24
	shot->y_delta = y_delta;
    a44a:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a44e:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a452:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a456:	66 e5       	ldi	r22, 0x56	; 86
    a458:	70 e1       	ldi	r23, 0x10	; 16
    a45a:	70 93 8b 0e 	sts	0x0E8B, r23
    a45e:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    a462:	69 e8       	ldi	r22, 0x89	; 137
    a464:	70 e3       	ldi	r23, 0x30	; 48
    a466:	70 93 57 10 	sts	0x1057, r23
    a46a:	60 93 56 10 	sts	0x1056, r22
	shot->shared.vx = speed;
    a46e:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->shared.vy = 0;
    a472:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a476:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a47a:	30 93 93 0e 	sts	0x0E93, r19
	shot->hit_count = damage;
    a47e:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    a482:	80 93 96 0e 	sts	0x0E96, r24
	shot->y_delta = y_delta;
    a486:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    a48a:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a48e:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a492:	66 e3       	ldi	r22, 0x36	; 54
    a494:	70 e1       	ldi	r23, 0x10	; 16
    a496:	70 93 9f 0e 	sts	0x0E9F, r23
    a49a:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a49e:	50 93 37 10 	sts	0x1037, r21
    a4a2:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a4a6:	80 93 91 0e 	sts	0x0E91, r24
    a4aa:	5d c0       	rjmp	.+186    	; 0xa566 <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    a4ac:	86 30       	cpi	r24, 0x06	; 6
    a4ae:	09 f0       	breq	.+2      	; 0xa4b2 <init_boss_shot+0x230>
    a4b0:	61 c0       	rjmp	.+194    	; 0xa574 <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4b2:	23 e0       	ldi	r18, 0x03	; 3
    a4b4:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    a4b8:	32 e0       	ldi	r19, 0x02	; 2
    a4ba:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->shot_speed = speed;
    a4be:	9f e7       	ldi	r25, 0x7F	; 127
    a4c0:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    a4c4:	88 ef       	ldi	r24, 0xF8	; 248
    a4c6:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.anim_count = 1;
    a4ca:	81 e0       	ldi	r24, 0x01	; 1
    a4cc:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    a4d0:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    a4d4:	4a ed       	ldi	r20, 0xDA	; 218
    a4d6:	5f e0       	ldi	r21, 0x0F	; 15
    a4d8:	50 93 77 0e 	sts	0x0E77, r21
    a4dc:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a4e0:	48 e9       	ldi	r20, 0x98	; 152
    a4e2:	50 e3       	ldi	r21, 0x30	; 48
    a4e4:	50 93 db 0f 	sts	0x0FDB, r21
    a4e8:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a4ec:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    a4f0:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a4f4:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a4f8:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    a4fc:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    a500:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    a504:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a508:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    a50c:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    a510:	66 e5       	ldi	r22, 0x56	; 86
    a512:	70 e1       	ldi	r23, 0x10	; 16
    a514:	70 93 8b 0e 	sts	0x0E8B, r23
    a518:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    a51c:	62 e9       	ldi	r22, 0x92	; 146
    a51e:	70 e3       	ldi	r23, 0x30	; 48
    a520:	70 93 57 10 	sts	0x1057, r23
    a524:	60 93 56 10 	sts	0x1056, r22
	shot->shared.vx = speed;
    a528:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    a52c:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a530:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a534:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    a538:	30 93 94 0e 	sts	0x0E94, r19
	shot->shot_speed = speed;
    a53c:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    a540:	38 e0       	ldi	r19, 0x08	; 8
    a542:	30 93 97 0e 	sts	0x0E97, r19
	shot->anim.anim_count = 1;
    a546:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    a54a:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    a54e:	66 e3       	ldi	r22, 0x36	; 54
    a550:	70 e1       	ldi	r23, 0x10	; 16
    a552:	70 93 9f 0e 	sts	0x0E9F, r23
    a556:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    a55a:	50 93 37 10 	sts	0x1037, r21
    a55e:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a562:	90 93 91 0e 	sts	0x0E91, r25
	shot->shared.vy = 0;
    a566:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a56a:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a56e:	20 93 62 0e 	sts	0x0E62, r18
    a572:	08 95       	ret
	}
	else if (level == 8) // Dessert
    a574:	88 30       	cpi	r24, 0x08	; 8
    a576:	09 f0       	breq	.+2      	; 0xa57a <init_boss_shot+0x2f8>
    a578:	5e c0       	rjmp	.+188    	; 0xa636 <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a57a:	22 e0       	ldi	r18, 0x02	; 2
    a57c:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    a580:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    a584:	3f e7       	ldi	r19, 0x7F	; 127
    a586:	30 93 6e 0e 	sts	0x0E6E, r19
	shot->y_delta = y_delta;
    a58a:	98 ef       	ldi	r25, 0xF8	; 248
    a58c:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    a590:	91 e0       	ldi	r25, 0x01	; 1
    a592:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    a596:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    a59a:	4a ed       	ldi	r20, 0xDA	; 218
    a59c:	5f e0       	ldi	r21, 0x0F	; 15
    a59e:	50 93 77 0e 	sts	0x0E77, r21
    a5a2:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    a5a6:	49 e8       	ldi	r20, 0x89	; 137
    a5a8:	50 e3       	ldi	r21, 0x30	; 48
    a5aa:	50 93 db 0f 	sts	0x0FDB, r21
    a5ae:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    a5b2:	30 93 69 0e 	sts	0x0E69, r19
	shot->shared.vy = 0;
    a5b6:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a5ba:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5be:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    a5c2:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    a5c6:	64 e6       	ldi	r22, 0x64	; 100
    a5c8:	60 93 82 0e 	sts	0x0E82, r22
	shot->y_delta = y_delta;
    a5cc:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    a5d0:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    a5d4:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    a5d8:	e6 e5       	ldi	r30, 0x56	; 86
    a5da:	f0 e1       	ldi	r31, 0x10	; 16
    a5dc:	f0 93 8b 0e 	sts	0x0E8B, r31
    a5e0:	e0 93 8a 0e 	sts	0x0E8A, r30
	shot->anim.anims[0] = (char*) map;
    a5e4:	50 93 57 10 	sts	0x1057, r21
    a5e8:	40 93 56 10 	sts	0x1056, r20
	shot->shared.vx = speed;
    a5ec:	60 93 7d 0e 	sts	0x0E7D, r22
	shot->shared.vy = 0;
    a5f0:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a5f4:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a5f8:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    a5fc:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    a600:	30 93 96 0e 	sts	0x0E96, r19
	shot->y_delta = y_delta;
    a604:	80 93 97 0e 	sts	0x0E97, r24
	shot->anim.anim_count = 1;
    a608:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    a60c:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    a610:	86 e3       	ldi	r24, 0x36	; 54
    a612:	90 e1       	ldi	r25, 0x10	; 16
    a614:	90 93 9f 0e 	sts	0x0E9F, r25
    a618:	80 93 9e 0e 	sts	0x0E9E, r24
	shot->anim.anims[0] = (char*) map;
    a61c:	50 93 37 10 	sts	0x1037, r21
    a620:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    a624:	30 93 91 0e 	sts	0x0E91, r19
	shot->shared.vy = 0;
    a628:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a62c:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    a630:	83 e0       	ldi	r24, 0x03	; 3
    a632:	80 93 62 0e 	sts	0x0E62, r24
    a636:	08 95       	ret

0000a638 <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    a638:	10 92 cd 0e 	sts	0x0ECD, r1
    a63c:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    a640:	10 92 c9 0e 	sts	0x0EC9, r1
    a644:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    a648:	10 92 cb 0e 	sts	0x0ECB, r1
    a64c:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    a650:	10 92 ce 0e 	sts	0x0ECE, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    a654:	82 e0       	ldi	r24, 0x02	; 2
    a656:	80 93 5f 0e 	sts	0x0E5F, r24
	game.boss.height = 3;
    a65a:	93 e0       	ldi	r25, 0x03	; 3
    a65c:	90 93 60 0e 	sts	0x0E60, r25
	game.boss.run.anim_count = 4;
    a660:	84 e0       	ldi	r24, 0x04	; 4
    a662:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a666:	8c e0       	ldi	r24, 0x0C	; 12
    a668:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.run.anims = boss_run_anim;
    a66c:	ec e8       	ldi	r30, 0x8C	; 140
    a66e:	fd e0       	ldi	r31, 0x0D	; 13
    a670:	f0 93 af 0e 	sts	0x0EAF, r31
    a674:	e0 93 ae 0e 	sts	0x0EAE, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    a678:	29 e7       	ldi	r18, 0x79	; 121
    a67a:	30 e3       	ldi	r19, 0x30	; 48
    a67c:	31 83       	std	Z+1, r19	; 0x01
    a67e:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    a680:	21 e7       	ldi	r18, 0x71	; 113
    a682:	30 e3       	ldi	r19, 0x30	; 48
    a684:	33 83       	std	Z+3, r19	; 0x03
    a686:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    a688:	29 e6       	ldi	r18, 0x69	; 105
    a68a:	30 e3       	ldi	r19, 0x30	; 48
    a68c:	35 83       	std	Z+5, r19	; 0x05
    a68e:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    a690:	21 e6       	ldi	r18, 0x61	; 97
    a692:	30 e3       	ldi	r19, 0x30	; 48
    a694:	37 83       	std	Z+7, r19	; 0x07
    a696:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    a698:	10 92 5b 0e 	sts	0x0E5B, r1
	game.boss.shared.vx = 0;
    a69c:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.shared.vy = 0;
    a6a0:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.shared.gravity = 0;
    a6a4:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.active = 0;
    a6a8:	10 92 61 0e 	sts	0x0E61, r1
	game.boss.direction = D_LEFT;
    a6ac:	10 92 5e 0e 	sts	0x0E5E, r1
	game.boss.flags = IDLE;
    a6b0:	88 e0       	ldi	r24, 0x08	; 8
    a6b2:	80 93 5c 0e 	sts	0x0E5C, r24
	game.boss.ai_flags = AI_NOT_READY;
    a6b6:	10 92 5d 0e 	sts	0x0E5D, r1
	game.boss.shield = BOSS_SHIELD;
    a6ba:	8e e1       	ldi	r24, 0x1E	; 30
    a6bc:	80 93 63 0e 	sts	0x0E63, r24
	game.boss.idle.anim_count = 1;
    a6c0:	81 e0       	ldi	r24, 0x01	; 1
    a6c2:	80 93 a1 0e 	sts	0x0EA1, r24
	game.boss.idle.frames_per_anim = 1;
    a6c6:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.anims = boss_idle_anim;
    a6ca:	e4 e5       	ldi	r30, 0x54	; 84
    a6cc:	f0 e1       	ldi	r31, 0x10	; 16
    a6ce:	f0 93 a7 0e 	sts	0x0EA7, r31
    a6d2:	e0 93 a6 0e 	sts	0x0EA6, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    a6d6:	21 e8       	ldi	r18, 0x81	; 129
    a6d8:	30 e3       	ldi	r19, 0x30	; 48
    a6da:	31 83       	std	Z+1, r19	; 0x01
    a6dc:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    a6de:	80 93 b1 0e 	sts	0x0EB1, r24
	game.boss.jump.frames_per_anim = 1;
    a6e2:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.anims = boss_jump_anim;
    a6e6:	e2 e4       	ldi	r30, 0x42	; 66
    a6e8:	f0 e1       	ldi	r31, 0x10	; 16
    a6ea:	f0 93 b7 0e 	sts	0x0EB7, r31
    a6ee:	e0 93 b6 0e 	sts	0x0EB6, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    a6f2:	24 e5       	ldi	r18, 0x54	; 84
    a6f4:	30 e3       	ldi	r19, 0x30	; 48
    a6f6:	31 83       	std	Z+1, r19	; 0x01
    a6f8:	20 83       	st	Z, r18
	
	game.boss.prone.anim_count = 1;
    a6fa:	80 93 b9 0e 	sts	0x0EB9, r24
	game.boss.prone.frames_per_anim = 1;
    a6fe:	80 93 ba 0e 	sts	0x0EBA, r24
	game.boss.prone.anims = boss_prone_anim;
    a702:	e0 e5       	ldi	r30, 0x50	; 80
    a704:	f0 e1       	ldi	r31, 0x10	; 16
    a706:	f0 93 bf 0e 	sts	0x0EBF, r31
    a70a:	e0 93 be 0e 	sts	0x0EBE, r30
	game.boss.prone.anims[0] = (char*) map_ahero_prone;
    a70e:	2c e5       	ldi	r18, 0x5C	; 92
    a710:	30 e3       	ldi	r19, 0x30	; 48
    a712:	31 83       	std	Z+1, r19	; 0x01
    a714:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    a716:	90 93 c1 0e 	sts	0x0EC1, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a71a:	85 e0       	ldi	r24, 0x05	; 5
    a71c:	80 93 c2 0e 	sts	0x0EC2, r24
	game.boss.expl.anims = expl_anim;
    a720:	ea e4       	ldi	r30, 0x4A	; 74
    a722:	f0 e1       	ldi	r31, 0x10	; 16
    a724:	f0 93 c7 0e 	sts	0x0EC7, r31
    a728:	e0 93 c6 0e 	sts	0x0EC6, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    a72c:	83 e0       	ldi	r24, 0x03	; 3
    a72e:	91 e3       	ldi	r25, 0x31	; 49
    a730:	91 83       	std	Z+1, r25	; 0x01
    a732:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    a734:	80 e0       	ldi	r24, 0x00	; 0
    a736:	91 e3       	ldi	r25, 0x31	; 49
    a738:	93 83       	std	Z+3, r25	; 0x03
    a73a:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    a73c:	8d ef       	ldi	r24, 0xFD	; 253
    a73e:	90 e3       	ldi	r25, 0x30	; 48
    a740:	95 83       	std	Z+5, r25	; 0x05
    a742:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    a744:	80 91 cb 0d 	lds	r24, 0x0DCB
    a748:	0c 94 41 51 	jmp	0xa282	; 0xa282 <init_boss_shot>

0000a74c <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    a74c:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    a750:	88 23       	and	r24, r24
    a752:	f9 f0       	breq	.+62     	; 0xa792 <init_player_state+0x46>
	{
		game.player.width = 3;
    a754:	83 e0       	ldi	r24, 0x03	; 3
    a756:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 1;
    a75a:	81 e0       	ldi	r24, 0x01	; 1
    a75c:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 2;
    a760:	82 e0       	ldi	r24, 0x02	; 2
    a762:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a766:	85 e0       	ldi	r24, 0x05	; 5
    a768:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    a76c:	88 e3       	ldi	r24, 0x38	; 56
    a76e:	90 e1       	ldi	r25, 0x10	; 16
    a770:	90 93 34 0e 	sts	0x0E34, r25
    a774:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    a778:	84 eb       	ldi	r24, 0xB4	; 180
    a77a:	90 e3       	ldi	r25, 0x30	; 48
    a77c:	90 93 39 10 	sts	0x1039, r25
    a780:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    a784:	8f ea       	ldi	r24, 0xAF	; 175
    a786:	90 e3       	ldi	r25, 0x30	; 48
    a788:	90 93 3b 10 	sts	0x103B, r25
    a78c:	80 93 3a 10 	sts	0x103A, r24
    a790:	2a c0       	rjmp	.+84     	; 0xa7e6 <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    a792:	82 e0       	ldi	r24, 0x02	; 2
    a794:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 3;
    a798:	83 e0       	ldi	r24, 0x03	; 3
    a79a:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 4;
    a79e:	84 e0       	ldi	r24, 0x04	; 4
    a7a0:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    a7a4:	8c e0       	ldi	r24, 0x0C	; 12
    a7a6:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    a7aa:	88 e3       	ldi	r24, 0x38	; 56
    a7ac:	90 e1       	ldi	r25, 0x10	; 16
    a7ae:	90 93 34 0e 	sts	0x0E34, r25
    a7b2:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    a7b6:	8e ed       	ldi	r24, 0xDE	; 222
    a7b8:	90 e3       	ldi	r25, 0x30	; 48
    a7ba:	90 93 39 10 	sts	0x1039, r25
    a7be:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    a7c2:	86 ed       	ldi	r24, 0xD6	; 214
    a7c4:	90 e3       	ldi	r25, 0x30	; 48
    a7c6:	90 93 3b 10 	sts	0x103B, r25
    a7ca:	80 93 3a 10 	sts	0x103A, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    a7ce:	8e ec       	ldi	r24, 0xCE	; 206
    a7d0:	90 e3       	ldi	r25, 0x30	; 48
    a7d2:	90 93 3d 10 	sts	0x103D, r25
    a7d6:	80 93 3c 10 	sts	0x103C, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    a7da:	86 ec       	ldi	r24, 0xC6	; 198
    a7dc:	90 e3       	ldi	r25, 0x30	; 48
    a7de:	90 93 3f 10 	sts	0x103F, r25
    a7e2:	80 93 3e 10 	sts	0x103E, r24
	}
	game.player.shared.vx = 0;
    a7e6:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.shared.vy = 0;
    a7ea:	10 92 dd 0d 	sts	0x0DDD, r1
	game.player.shared.gravity = 0;
    a7ee:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.active_shots = 0;
    a7f2:	10 92 e0 0d 	sts	0x0DE0, r1
	game.player.active = 1;
    a7f6:	81 e0       	ldi	r24, 0x01	; 1
    a7f8:	80 93 e6 0d 	sts	0x0DE6, r24
	game.player.direction = D_RIGHT;
    a7fc:	80 93 e3 0d 	sts	0x0DE3, r24
	game.player.flags = IDLE;
    a800:	98 e0       	ldi	r25, 0x08	; 8
    a802:	90 93 e1 0d 	sts	0x0DE1, r25
	game.player.ai_flags = AI_NOT_READY;
    a806:	10 92 e2 0d 	sts	0x0DE2, r1
	game.player.shield = PLAYER_SHIELD;
    a80a:	9f e0       	ldi	r25, 0x0F	; 15
    a80c:	90 93 e8 0d 	sts	0x0DE8, r25
	game.player.idle.anim_count = 1;
    a810:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.frames_per_anim = 1;
    a814:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.anims = idle_anim;
    a818:	2c e5       	ldi	r18, 0x5C	; 92
    a81a:	30 e1       	ldi	r19, 0x10	; 16
    a81c:	30 93 2c 0e 	sts	0x0E2C, r19
    a820:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    a824:	26 ee       	ldi	r18, 0xE6	; 230
    a826:	30 e3       	ldi	r19, 0x30	; 48
    a828:	30 93 5d 10 	sts	0x105D, r19
    a82c:	20 93 5c 10 	sts	0x105C, r18
	
	game.player.jump.anim_count = 1;
    a830:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.frames_per_anim = 1;
    a834:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.anims = jump_anim;
    a838:	24 e9       	ldi	r18, 0x94	; 148
    a83a:	3d e0       	ldi	r19, 0x0D	; 13
    a83c:	30 93 3c 0e 	sts	0x0E3C, r19
    a840:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    a844:	2e eb       	ldi	r18, 0xBE	; 190
    a846:	30 e3       	ldi	r19, 0x30	; 48
    a848:	30 93 95 0d 	sts	0x0D95, r19
    a84c:	20 93 94 0d 	sts	0x0D94, r18
	
	game.player.prone.anim_count = 1;
    a850:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.frames_per_anim = 1;
    a854:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.anims = prone_anim;
    a858:	8c ed       	ldi	r24, 0xDC	; 220
    a85a:	9f e0       	ldi	r25, 0x0F	; 15
    a85c:	90 93 44 0e 	sts	0x0E44, r25
    a860:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    a864:	89 eb       	ldi	r24, 0xB9	; 185
    a866:	90 e3       	ldi	r25, 0x30	; 48
    a868:	90 93 dd 0f 	sts	0x0FDD, r25
    a86c:	80 93 dc 0f 	sts	0x0FDC, r24
	
	game.player.expl.anim_count = 3;
    a870:	83 e0       	ldi	r24, 0x03	; 3
    a872:	80 93 46 0e 	sts	0x0E46, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a876:	85 e0       	ldi	r24, 0x05	; 5
    a878:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.anims = expl_anim;
    a87c:	8a e4       	ldi	r24, 0x4A	; 74
    a87e:	90 e1       	ldi	r25, 0x10	; 16
    a880:	90 93 4c 0e 	sts	0x0E4C, r25
    a884:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    a888:	83 e0       	ldi	r24, 0x03	; 3
    a88a:	91 e3       	ldi	r25, 0x31	; 49
    a88c:	90 93 4b 10 	sts	0x104B, r25
    a890:	80 93 4a 10 	sts	0x104A, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    a894:	80 e0       	ldi	r24, 0x00	; 0
    a896:	91 e3       	ldi	r25, 0x31	; 49
    a898:	90 93 4d 10 	sts	0x104D, r25
    a89c:	80 93 4c 10 	sts	0x104C, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    a8a0:	8d ef       	ldi	r24, 0xFD	; 253
    a8a2:	90 e3       	ldi	r25, 0x30	; 48
    a8a4:	90 93 4f 10 	sts	0x104F, r25
    a8a8:	80 93 4e 10 	sts	0x104E, r24
	game.eye_clusters = 9;
    a8ac:	89 e0       	ldi	r24, 0x09	; 9
    a8ae:	80 93 d4 0d 	sts	0x0DD4, r24
	init_player_shot(game.current_level_index);
    a8b2:	80 91 cb 0d 	lds	r24, 0x0DCB
    a8b6:	0c 94 22 4f 	jmp	0x9e44	; 0x9e44 <init_player_shot>

0000a8ba <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    a8ba:	0f 93       	push	r16
    a8bc:	1f 93       	push	r17
    a8be:	cf 93       	push	r28
    a8c0:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    a8c2:	a8 2f       	mov	r26, r24
    a8c4:	b0 e0       	ldi	r27, 0x00	; 0
    a8c6:	35 e3       	ldi	r19, 0x35	; 53
    a8c8:	83 9f       	mul	r24, r19
    a8ca:	c0 01       	movw	r24, r0
    a8cc:	11 24       	eor	r1, r1
    a8ce:	8a 54       	subi	r24, 0x4A	; 74
    a8d0:	92 4f       	sbci	r25, 0xF2	; 242
    a8d2:	fc 01       	movw	r30, r24
    a8d4:	e9 5b       	subi	r30, 0xB9	; 185
    a8d6:	fe 4f       	sbci	r31, 0xFE	; 254
    a8d8:	33 e0       	ldi	r19, 0x03	; 3
    a8da:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    a8dc:	31 96       	adiw	r30, 0x01	; 1
    a8de:	35 e0       	ldi	r19, 0x05	; 5
    a8e0:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    a8e2:	34 96       	adiw	r30, 0x04	; 4
    a8e4:	ca e4       	ldi	r28, 0x4A	; 74
    a8e6:	d0 e1       	ldi	r29, 0x10	; 16
    a8e8:	d1 83       	std	Z+1, r29	; 0x01
    a8ea:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    a8ec:	e3 e0       	ldi	r30, 0x03	; 3
    a8ee:	f1 e3       	ldi	r31, 0x31	; 49
    a8f0:	f0 93 4b 10 	sts	0x104B, r31
    a8f4:	e0 93 4a 10 	sts	0x104A, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    a8f8:	e0 e0       	ldi	r30, 0x00	; 0
    a8fa:	f1 e3       	ldi	r31, 0x31	; 49
    a8fc:	f0 93 4d 10 	sts	0x104D, r31
    a900:	e0 93 4c 10 	sts	0x104C, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    a904:	ed ef       	ldi	r30, 0xFD	; 253
    a906:	f0 e3       	ldi	r31, 0x30	; 48
    a908:	f0 93 4f 10 	sts	0x104F, r31
    a90c:	e0 93 4e 10 	sts	0x104E, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    a910:	ec 01       	movw	r28, r24
    a912:	ce 5c       	subi	r28, 0xCE	; 206
    a914:	de 4f       	sbci	r29, 0xFE	; 254
    a916:	31 e0       	ldi	r19, 0x01	; 1
    a918:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    a91a:	fc 01       	movw	r30, r24
    a91c:	ed 5c       	subi	r30, 0xCD	; 205
    a91e:	fe 4f       	sbci	r31, 0xFE	; 254
    a920:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    a922:	32 97       	sbiw	r30, 0x02	; 2
    a924:	17 e0       	ldi	r17, 0x07	; 7
    a926:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    a928:	36 96       	adiw	r30, 0x06	; 6
    a92a:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    a92c:	31 96       	adiw	r30, 0x01	; 1
    a92e:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    a930:	34 96       	adiw	r30, 0x04	; 4
    a932:	04 e4       	ldi	r16, 0x44	; 68
    a934:	10 e1       	ldi	r17, 0x10	; 16
    a936:	11 83       	std	Z+1, r17	; 0x01
    a938:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    a93a:	e1 e5       	ldi	r30, 0x51	; 81
    a93c:	f0 e3       	ldi	r31, 0x30	; 48
    a93e:	f0 93 45 10 	sts	0x1045, r31
    a942:	e0 93 44 10 	sts	0x1044, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    a946:	fc 01       	movw	r30, r24
    a948:	ec 5c       	subi	r30, 0xCC	; 204
    a94a:	fe 4f       	sbci	r31, 0xFE	; 254
    a94c:	30 e5       	ldi	r19, 0x50	; 80
    a94e:	30 83       	st	Z, r19
		if (is_boss)
    a950:	22 23       	and	r18, r18
    a952:	59 f0       	breq	.+22     	; 0xa96a <init_enemy_shot+0xb0>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    a954:	8a e0       	ldi	r24, 0x0A	; 10
    a956:	88 83       	st	Y, r24
			game.enemies[i].shot[j].shot_speed = FAST_SHOT_SPEED;
    a958:	8f e7       	ldi	r24, 0x7F	; 127
    a95a:	80 83       	st	Z, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    a95c:	83 e3       	ldi	r24, 0x33	; 51
    a95e:	90 e3       	ldi	r25, 0x30	; 48
    a960:	90 93 45 10 	sts	0x1045, r25
    a964:	80 93 44 10 	sts	0x1044, r24
    a968:	0f c0       	rjmp	.+30     	; 0xa988 <init_enemy_shot+0xce>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    a96a:	fc 01       	movw	r30, r24
    a96c:	eb 5d       	subi	r30, 0xDB	; 219
    a96e:	fe 4f       	sbci	r31, 0xFE	; 254
    a970:	20 81       	ld	r18, Z
    a972:	3a 96       	adiw	r30, 0x0a	; 10
    a974:	24 30       	cpi	r18, 0x04	; 4
    a976:	11 f4       	brne	.+4      	; 0xa97c <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    a978:	82 ee       	ldi	r24, 0xE2	; 226
    a97a:	03 c0       	rjmp	.+6      	; 0xa982 <init_enemy_shot+0xc8>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    a97c:	25 30       	cpi	r18, 0x05	; 5
    a97e:	19 f4       	brne	.+6      	; 0xa986 <init_enemy_shot+0xcc>
		{
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    a980:	8a e0       	ldi	r24, 0x0A	; 10
    a982:	80 83       	st	Z, r24
    a984:	01 c0       	rjmp	.+2      	; 0xa988 <init_enemy_shot+0xce>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    a986:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    a988:	25 e3       	ldi	r18, 0x35	; 53
    a98a:	2a 9f       	mul	r18, r26
    a98c:	c0 01       	movw	r24, r0
    a98e:	2b 9f       	mul	r18, r27
    a990:	90 0d       	add	r25, r0
    a992:	11 24       	eor	r1, r1
    a994:	8a 54       	subi	r24, 0x4A	; 74
    a996:	92 4f       	sbci	r25, 0xF2	; 242
    a998:	fc 01       	movw	r30, r24
    a99a:	e2 5d       	subi	r30, 0xD2	; 210
    a99c:	fe 4f       	sbci	r31, 0xFE	; 254
    a99e:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    a9a0:	34 97       	sbiw	r30, 0x04	; 4
    a9a2:	71 83       	std	Z+1, r23	; 0x01
    a9a4:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    a9a6:	32 96       	adiw	r30, 0x02	; 2
    a9a8:	51 83       	std	Z+1, r21	; 0x01
    a9aa:	40 83       	st	Z, r20
	}
}
    a9ac:	df 91       	pop	r29
    a9ae:	cf 91       	pop	r28
    a9b0:	1f 91       	pop	r17
    a9b2:	0f 91       	pop	r16
    a9b4:	08 95       	ret

0000a9b6 <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    a9b6:	95 e3       	ldi	r25, 0x35	; 53
    a9b8:	89 9f       	mul	r24, r25
    a9ba:	90 01       	movw	r18, r0
    a9bc:	11 24       	eor	r1, r1
    a9be:	2a 54       	subi	r18, 0x4A	; 74
    a9c0:	32 4f       	sbci	r19, 0xF2	; 242
    a9c2:	f9 01       	movw	r30, r18
    a9c4:	e0 5e       	subi	r30, 0xE0	; 224
    a9c6:	fe 4f       	sbci	r31, 0xFE	; 254
    a9c8:	91 e0       	ldi	r25, 0x01	; 1
    a9ca:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    a9cc:	32 96       	adiw	r30, 0x02	; 2
    a9ce:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    a9d0:	31 97       	sbiw	r30, 0x01	; 1
    a9d2:	a8 e0       	ldi	r26, 0x08	; 8
    a9d4:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    a9d6:	32 96       	adiw	r30, 0x02	; 2
    a9d8:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    a9da:	31 96       	adiw	r30, 0x01	; 1
    a9dc:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    a9de:	31 96       	adiw	r30, 0x01	; 1
    a9e0:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    a9e2:	31 96       	adiw	r30, 0x01	; 1
    a9e4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    a9e6:	31 96       	adiw	r30, 0x01	; 1
    a9e8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    a9ea:	32 96       	adiw	r30, 0x02	; 2
    a9ec:	92 e0       	ldi	r25, 0x02	; 2
    a9ee:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    a9f0:	76 96       	adiw	r30, 0x16	; 22
    a9f2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    a9f4:	31 96       	adiw	r30, 0x01	; 1
    a9f6:	9a e0       	ldi	r25, 0x0A	; 10
    a9f8:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    a9fa:	d9 01       	movw	r26, r18
    a9fc:	ac 5b       	subi	r26, 0xBC	; 188
    a9fe:	be 4f       	sbci	r27, 0xFE	; 254
    aa00:	ee ed       	ldi	r30, 0xDE	; 222
    aa02:	ff e0       	ldi	r31, 0x0F	; 15
    aa04:	ed 93       	st	X+, r30
    aa06:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    aa08:	a8 e4       	ldi	r26, 0x48	; 72
    aa0a:	b0 e3       	ldi	r27, 0x30	; 48
    aa0c:	b1 83       	std	Z+1, r27	; 0x01
    aa0e:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    aa10:	a5 e4       	ldi	r26, 0x45	; 69
    aa12:	b0 e3       	ldi	r27, 0x30	; 48
    aa14:	b3 83       	std	Z+3, r27	; 0x03
    aa16:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    aa18:	f9 01       	movw	r30, r18
    aa1a:	e1 5e       	subi	r30, 0xE1	; 225
    aa1c:	fe 4f       	sbci	r31, 0xFE	; 254
    aa1e:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    aa20:	31 97       	sbiw	r30, 0x01	; 1
    aa22:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    aa24:	31 97       	sbiw	r30, 0x01	; 1
    aa26:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aa28:	34 97       	sbiw	r30, 0x04	; 4
    aa2a:	71 83       	std	Z+1, r23	; 0x01
    aa2c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aa2e:	32 96       	adiw	r30, 0x02	; 2
    aa30:	51 83       	std	Z+1, r21	; 0x01
    aa32:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aa34:	20 e0       	ldi	r18, 0x00	; 0
    aa36:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000aa3a <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aa3a:	95 e3       	ldi	r25, 0x35	; 53
    aa3c:	89 9f       	mul	r24, r25
    aa3e:	90 01       	movw	r18, r0
    aa40:	11 24       	eor	r1, r1
    aa42:	2a 54       	subi	r18, 0x4A	; 74
    aa44:	32 4f       	sbci	r19, 0xF2	; 242
    aa46:	f9 01       	movw	r30, r18
    aa48:	ef 5d       	subi	r30, 0xDF	; 223
    aa4a:	fe 4f       	sbci	r31, 0xFE	; 254
    aa4c:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aa4e:	31 97       	sbiw	r30, 0x01	; 1
    aa50:	91 e0       	ldi	r25, 0x01	; 1
    aa52:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aa54:	32 96       	adiw	r30, 0x02	; 2
    aa56:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    aa58:	31 96       	adiw	r30, 0x01	; 1
    aa5a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aa5c:	31 96       	adiw	r30, 0x01	; 1
    aa5e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    aa60:	31 96       	adiw	r30, 0x01	; 1
    aa62:	a3 e0       	ldi	r26, 0x03	; 3
    aa64:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    aa66:	31 96       	adiw	r30, 0x01	; 1
    aa68:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aa6a:	31 96       	adiw	r30, 0x01	; 1
    aa6c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    aa6e:	32 96       	adiw	r30, 0x02	; 2
    aa70:	a2 e0       	ldi	r26, 0x02	; 2
    aa72:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aa74:	76 96       	adiw	r30, 0x16	; 22
    aa76:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aa78:	31 96       	adiw	r30, 0x01	; 1
    aa7a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    aa7c:	d9 01       	movw	r26, r18
    aa7e:	ac 5b       	subi	r26, 0xBC	; 188
    aa80:	be 4f       	sbci	r27, 0xFE	; 254
    aa82:	e4 e3       	ldi	r30, 0x34	; 52
    aa84:	f0 e1       	ldi	r31, 0x10	; 16
    aa86:	ed 93       	st	X+, r30
    aa88:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    aa8a:	af e3       	ldi	r26, 0x3F	; 63
    aa8c:	b0 e3       	ldi	r27, 0x30	; 48
    aa8e:	b1 83       	std	Z+1, r27	; 0x01
    aa90:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    aa92:	f9 01       	movw	r30, r18
    aa94:	e1 5e       	subi	r30, 0xE1	; 225
    aa96:	fe 4f       	sbci	r31, 0xFE	; 254
    aa98:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    aa9a:	31 97       	sbiw	r30, 0x01	; 1
    aa9c:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    aa9e:	31 97       	sbiw	r30, 0x01	; 1
    aaa0:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    aaa2:	34 97       	sbiw	r30, 0x04	; 4
    aaa4:	71 83       	std	Z+1, r23	; 0x01
    aaa6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    aaa8:	32 96       	adiw	r30, 0x02	; 2
    aaaa:	51 83       	std	Z+1, r21	; 0x01
    aaac:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aaae:	20 e0       	ldi	r18, 0x00	; 0
    aab0:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000aab4 <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aab4:	95 e3       	ldi	r25, 0x35	; 53
    aab6:	89 9f       	mul	r24, r25
    aab8:	90 01       	movw	r18, r0
    aaba:	11 24       	eor	r1, r1
    aabc:	2a 54       	subi	r18, 0x4A	; 74
    aabe:	32 4f       	sbci	r19, 0xF2	; 242
    aac0:	f9 01       	movw	r30, r18
    aac2:	ef 5d       	subi	r30, 0xDF	; 223
    aac4:	fe 4f       	sbci	r31, 0xFE	; 254
    aac6:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    aac8:	31 97       	sbiw	r30, 0x01	; 1
    aaca:	91 e0       	ldi	r25, 0x01	; 1
    aacc:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    aace:	32 96       	adiw	r30, 0x02	; 2
    aad0:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    aad2:	31 96       	adiw	r30, 0x01	; 1
    aad4:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    aad6:	31 96       	adiw	r30, 0x01	; 1
    aad8:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    aada:	31 96       	adiw	r30, 0x01	; 1
    aadc:	a4 e0       	ldi	r26, 0x04	; 4
    aade:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    aae0:	31 96       	adiw	r30, 0x01	; 1
    aae2:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aae4:	31 96       	adiw	r30, 0x01	; 1
    aae6:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    aae8:	32 96       	adiw	r30, 0x02	; 2
    aaea:	a2 e0       	ldi	r26, 0x02	; 2
    aaec:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    aaee:	76 96       	adiw	r30, 0x16	; 22
    aaf0:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    aaf2:	31 96       	adiw	r30, 0x01	; 1
    aaf4:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    aaf6:	d9 01       	movw	r26, r18
    aaf8:	ac 5b       	subi	r26, 0xBC	; 188
    aafa:	be 4f       	sbci	r27, 0xFE	; 254
    aafc:	e8 e4       	ldi	r30, 0x48	; 72
    aafe:	f0 e1       	ldi	r31, 0x10	; 16
    ab00:	ed 93       	st	X+, r30
    ab02:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    ab04:	ac e3       	ldi	r26, 0x3C	; 60
    ab06:	b0 e3       	ldi	r27, 0x30	; 48
    ab08:	b1 83       	std	Z+1, r27	; 0x01
    ab0a:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ab0c:	f9 01       	movw	r30, r18
    ab0e:	e1 5e       	subi	r30, 0xE1	; 225
    ab10:	fe 4f       	sbci	r31, 0xFE	; 254
    ab12:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    ab14:	31 97       	sbiw	r30, 0x01	; 1
    ab16:	92 ee       	ldi	r25, 0xE2	; 226
    ab18:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ab1a:	31 97       	sbiw	r30, 0x01	; 1
    ab1c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab1e:	34 97       	sbiw	r30, 0x04	; 4
    ab20:	71 83       	std	Z+1, r23	; 0x01
    ab22:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab24:	32 96       	adiw	r30, 0x02	; 2
    ab26:	51 83       	std	Z+1, r21	; 0x01
    ab28:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ab2a:	20 e0       	ldi	r18, 0x00	; 0
    ab2c:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000ab30 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ab30:	95 e3       	ldi	r25, 0x35	; 53
    ab32:	89 9f       	mul	r24, r25
    ab34:	90 01       	movw	r18, r0
    ab36:	11 24       	eor	r1, r1
    ab38:	2a 54       	subi	r18, 0x4A	; 74
    ab3a:	32 4f       	sbci	r19, 0xF2	; 242
    ab3c:	f9 01       	movw	r30, r18
    ab3e:	ef 5d       	subi	r30, 0xDF	; 223
    ab40:	fe 4f       	sbci	r31, 0xFE	; 254
    ab42:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ab44:	31 97       	sbiw	r30, 0x01	; 1
    ab46:	91 e0       	ldi	r25, 0x01	; 1
    ab48:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ab4a:	33 96       	adiw	r30, 0x03	; 3
    ab4c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ab4e:	31 96       	adiw	r30, 0x01	; 1
    ab50:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    ab52:	31 96       	adiw	r30, 0x01	; 1
    ab54:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    ab56:	31 96       	adiw	r30, 0x01	; 1
    ab58:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ab5a:	31 96       	adiw	r30, 0x01	; 1
    ab5c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    ab5e:	32 96       	adiw	r30, 0x02	; 2
    ab60:	a4 e0       	ldi	r26, 0x04	; 4
    ab62:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ab64:	76 96       	adiw	r30, 0x16	; 22
    ab66:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ab68:	31 96       	adiw	r30, 0x01	; 1
    ab6a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    ab6c:	d9 01       	movw	r26, r18
    ab6e:	ac 5b       	subi	r26, 0xBC	; 188
    ab70:	be 4f       	sbci	r27, 0xFE	; 254
    ab72:	e2 ee       	ldi	r30, 0xE2	; 226
    ab74:	ff e0       	ldi	r31, 0x0F	; 15
    ab76:	ed 93       	st	X+, r30
    ab78:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    ab7a:	ae e4       	ldi	r26, 0x4E	; 78
    ab7c:	b0 e3       	ldi	r27, 0x30	; 48
    ab7e:	b1 83       	std	Z+1, r27	; 0x01
    ab80:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ab82:	f9 01       	movw	r30, r18
    ab84:	e1 5e       	subi	r30, 0xE1	; 225
    ab86:	fe 4f       	sbci	r31, 0xFE	; 254
    ab88:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    ab8a:	31 97       	sbiw	r30, 0x01	; 1
    ab8c:	9e e1       	ldi	r25, 0x1E	; 30
    ab8e:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ab90:	31 97       	sbiw	r30, 0x01	; 1
    ab92:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ab94:	34 97       	sbiw	r30, 0x04	; 4
    ab96:	71 83       	std	Z+1, r23	; 0x01
    ab98:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ab9a:	32 96       	adiw	r30, 0x02	; 2
    ab9c:	51 83       	std	Z+1, r21	; 0x01
    ab9e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    aba0:	20 e0       	ldi	r18, 0x00	; 0
    aba2:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000aba6 <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    aba6:	95 e3       	ldi	r25, 0x35	; 53
    aba8:	89 9f       	mul	r24, r25
    abaa:	90 01       	movw	r18, r0
    abac:	11 24       	eor	r1, r1
    abae:	2a 54       	subi	r18, 0x4A	; 74
    abb0:	32 4f       	sbci	r19, 0xF2	; 242
    abb2:	f9 01       	movw	r30, r18
    abb4:	ef 5d       	subi	r30, 0xDF	; 223
    abb6:	fe 4f       	sbci	r31, 0xFE	; 254
    abb8:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    abba:	31 97       	sbiw	r30, 0x01	; 1
    abbc:	91 e0       	ldi	r25, 0x01	; 1
    abbe:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    abc0:	33 96       	adiw	r30, 0x03	; 3
    abc2:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    abc4:	31 96       	adiw	r30, 0x01	; 1
    abc6:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    abc8:	31 96       	adiw	r30, 0x01	; 1
    abca:	a5 e0       	ldi	r26, 0x05	; 5
    abcc:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    abce:	31 96       	adiw	r30, 0x01	; 1
    abd0:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    abd2:	31 96       	adiw	r30, 0x01	; 1
    abd4:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    abd6:	32 96       	adiw	r30, 0x02	; 2
    abd8:	a4 e0       	ldi	r26, 0x04	; 4
    abda:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    abdc:	76 96       	adiw	r30, 0x16	; 22
    abde:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    abe0:	31 96       	adiw	r30, 0x01	; 1
    abe2:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    abe4:	d9 01       	movw	r26, r18
    abe6:	ac 5b       	subi	r26, 0xBC	; 188
    abe8:	be 4f       	sbci	r27, 0xFE	; 254
    abea:	e6 e4       	ldi	r30, 0x46	; 70
    abec:	f0 e1       	ldi	r31, 0x10	; 16
    abee:	ed 93       	st	X+, r30
    abf0:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    abf2:	a2 e4       	ldi	r26, 0x42	; 66
    abf4:	b0 e3       	ldi	r27, 0x30	; 48
    abf6:	b1 83       	std	Z+1, r27	; 0x01
    abf8:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    abfa:	f9 01       	movw	r30, r18
    abfc:	e1 5e       	subi	r30, 0xE1	; 225
    abfe:	fe 4f       	sbci	r31, 0xFE	; 254
    ac00:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    ac02:	31 97       	sbiw	r30, 0x01	; 1
    ac04:	9a e0       	ldi	r25, 0x0A	; 10
    ac06:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    ac08:	31 97       	sbiw	r30, 0x01	; 1
    ac0a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ac0c:	34 97       	sbiw	r30, 0x04	; 4
    ac0e:	71 83       	std	Z+1, r23	; 0x01
    ac10:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac12:	32 96       	adiw	r30, 0x02	; 2
    ac14:	51 83       	std	Z+1, r21	; 0x01
    ac16:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac18:	20 e0       	ldi	r18, 0x00	; 0
    ac1a:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000ac1e <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac1e:	95 e3       	ldi	r25, 0x35	; 53
    ac20:	89 9f       	mul	r24, r25
    ac22:	90 01       	movw	r18, r0
    ac24:	11 24       	eor	r1, r1
    ac26:	2a 54       	subi	r18, 0x4A	; 74
    ac28:	32 4f       	sbci	r19, 0xF2	; 242
    ac2a:	f9 01       	movw	r30, r18
    ac2c:	ef 5d       	subi	r30, 0xDF	; 223
    ac2e:	fe 4f       	sbci	r31, 0xFE	; 254
    ac30:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ac32:	31 97       	sbiw	r30, 0x01	; 1
    ac34:	91 e0       	ldi	r25, 0x01	; 1
    ac36:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    ac38:	33 96       	adiw	r30, 0x03	; 3
    ac3a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ac3c:	31 96       	adiw	r30, 0x01	; 1
    ac3e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    ac40:	31 96       	adiw	r30, 0x01	; 1
    ac42:	a8 e0       	ldi	r26, 0x08	; 8
    ac44:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    ac46:	31 96       	adiw	r30, 0x01	; 1
    ac48:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ac4a:	31 96       	adiw	r30, 0x01	; 1
    ac4c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    ac4e:	32 96       	adiw	r30, 0x02	; 2
    ac50:	a4 e0       	ldi	r26, 0x04	; 4
    ac52:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    ac54:	76 96       	adiw	r30, 0x16	; 22
    ac56:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ac58:	31 96       	adiw	r30, 0x01	; 1
    ac5a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    ac5c:	d9 01       	movw	r26, r18
    ac5e:	ac 5b       	subi	r26, 0xBC	; 188
    ac60:	be 4f       	sbci	r27, 0xFE	; 254
    ac62:	e8 e5       	ldi	r30, 0x58	; 88
    ac64:	f0 e1       	ldi	r31, 0x10	; 16
    ac66:	ed 93       	st	X+, r30
    ac68:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    ac6a:	ab e4       	ldi	r26, 0x4B	; 75
    ac6c:	b0 e3       	ldi	r27, 0x30	; 48
    ac6e:	b1 83       	std	Z+1, r27	; 0x01
    ac70:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    ac72:	f9 01       	movw	r30, r18
    ac74:	e1 5e       	subi	r30, 0xE1	; 225
    ac76:	fe 4f       	sbci	r31, 0xFE	; 254
    ac78:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    ac7a:	31 97       	sbiw	r30, 0x01	; 1
    ac7c:	94 e1       	ldi	r25, 0x14	; 20
    ac7e:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    ac80:	31 97       	sbiw	r30, 0x01	; 1
    ac82:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    ac84:	34 97       	sbiw	r30, 0x04	; 4
    ac86:	71 83       	std	Z+1, r23	; 0x01
    ac88:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ac8a:	32 96       	adiw	r30, 0x02	; 2
    ac8c:	51 83       	std	Z+1, r21	; 0x01
    ac8e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    ac90:	20 e0       	ldi	r18, 0x00	; 0
    ac92:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000ac96 <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    ac96:	95 e3       	ldi	r25, 0x35	; 53
    ac98:	89 9f       	mul	r24, r25
    ac9a:	90 01       	movw	r18, r0
    ac9c:	11 24       	eor	r1, r1
    ac9e:	2a 54       	subi	r18, 0x4A	; 74
    aca0:	32 4f       	sbci	r19, 0xF2	; 242
    aca2:	f9 01       	movw	r30, r18
    aca4:	ef 5d       	subi	r30, 0xDF	; 223
    aca6:	fe 4f       	sbci	r31, 0xFE	; 254
    aca8:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    acaa:	31 97       	sbiw	r30, 0x01	; 1
    acac:	91 e0       	ldi	r25, 0x01	; 1
    acae:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    acb0:	32 96       	adiw	r30, 0x02	; 2
    acb2:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    acb4:	31 96       	adiw	r30, 0x01	; 1
    acb6:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    acb8:	31 96       	adiw	r30, 0x01	; 1
    acba:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    acbc:	31 96       	adiw	r30, 0x01	; 1
    acbe:	a6 e0       	ldi	r26, 0x06	; 6
    acc0:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    acc2:	31 96       	adiw	r30, 0x01	; 1
    acc4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    acc6:	31 96       	adiw	r30, 0x01	; 1
    acc8:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    acca:	32 96       	adiw	r30, 0x02	; 2
    accc:	a8 e0       	ldi	r26, 0x08	; 8
    acce:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    acd0:	76 96       	adiw	r30, 0x16	; 22
    acd2:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    acd4:	31 96       	adiw	r30, 0x01	; 1
    acd6:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    acd8:	d9 01       	movw	r26, r18
    acda:	ac 5b       	subi	r26, 0xBC	; 188
    acdc:	be 4f       	sbci	r27, 0xFE	; 254
    acde:	e4 e3       	ldi	r30, 0x34	; 52
    ace0:	f0 e1       	ldi	r31, 0x10	; 16
    ace2:	ed 93       	st	X+, r30
    ace4:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    ace6:	a9 e3       	ldi	r26, 0x39	; 57
    ace8:	b0 e3       	ldi	r27, 0x30	; 48
    acea:	b1 83       	std	Z+1, r27	; 0x01
    acec:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    acee:	f9 01       	movw	r30, r18
    acf0:	e1 5e       	subi	r30, 0xE1	; 225
    acf2:	fe 4f       	sbci	r31, 0xFE	; 254
    acf4:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    acf6:	31 97       	sbiw	r30, 0x01	; 1
    acf8:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    acfa:	31 97       	sbiw	r30, 0x01	; 1
    acfc:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    acfe:	34 97       	sbiw	r30, 0x04	; 4
    ad00:	71 83       	std	Z+1, r23	; 0x01
    ad02:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad04:	32 96       	adiw	r30, 0x02	; 2
    ad06:	51 83       	std	Z+1, r21	; 0x01
    ad08:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    ad0a:	21 e0       	ldi	r18, 0x01	; 1
    ad0c:	0c 94 5d 54 	jmp	0xa8ba	; 0xa8ba <init_enemy_shot>

0000ad10 <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    ad10:	cf 93       	push	r28
    ad12:	df 93       	push	r29
    ad14:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    ad16:	95 e3       	ldi	r25, 0x35	; 53
    ad18:	89 9f       	mul	r24, r25
    ad1a:	90 01       	movw	r18, r0
    ad1c:	11 24       	eor	r1, r1
    ad1e:	2a 54       	subi	r18, 0x4A	; 74
    ad20:	32 4f       	sbci	r19, 0xF2	; 242
    ad22:	f9 01       	movw	r30, r18
    ad24:	ef 5d       	subi	r30, 0xDF	; 223
    ad26:	fe 4f       	sbci	r31, 0xFE	; 254
    ad28:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    ad2a:	31 97       	sbiw	r30, 0x01	; 1
    ad2c:	91 e0       	ldi	r25, 0x01	; 1
    ad2e:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    ad30:	32 96       	adiw	r30, 0x02	; 2
    ad32:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    ad34:	31 96       	adiw	r30, 0x01	; 1
    ad36:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    ad38:	31 96       	adiw	r30, 0x01	; 1
    ad3a:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    ad3c:	31 96       	adiw	r30, 0x01	; 1
    ad3e:	47 e0       	ldi	r20, 0x07	; 7
    ad40:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    ad42:	31 96       	adiw	r30, 0x01	; 1
    ad44:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    ad46:	31 96       	adiw	r30, 0x01	; 1
    ad48:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    ad4a:	32 96       	adiw	r30, 0x02	; 2
    ad4c:	48 e0       	ldi	r20, 0x08	; 8
    ad4e:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    ad50:	76 96       	adiw	r30, 0x16	; 22
    ad52:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    ad54:	31 96       	adiw	r30, 0x01	; 1
    ad56:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    ad58:	d9 01       	movw	r26, r18
    ad5a:	ac 5b       	subi	r26, 0xBC	; 188
    ad5c:	be 4f       	sbci	r27, 0xFE	; 254
    ad5e:	e4 e3       	ldi	r30, 0x34	; 52
    ad60:	f0 e1       	ldi	r31, 0x10	; 16
    ad62:	ed 93       	st	X+, r30
    ad64:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    ad66:	46 e3       	ldi	r20, 0x36	; 54
    ad68:	50 e3       	ldi	r21, 0x30	; 48
    ad6a:	51 83       	std	Z+1, r21	; 0x01
    ad6c:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    ad6e:	f9 01       	movw	r30, r18
    ad70:	e1 5e       	subi	r30, 0xE1	; 225
    ad72:	fe 4f       	sbci	r31, 0xFE	; 254
    ad74:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    ad76:	31 97       	sbiw	r30, 0x01	; 1
    ad78:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    ad7a:	31 97       	sbiw	r30, 0x01	; 1
    ad7c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    ad7e:	34 97       	sbiw	r30, 0x04	; 4
    ad80:	71 83       	std	Z+1, r23	; 0x01
    ad82:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    ad84:	32 96       	adiw	r30, 0x02	; 2
    ad86:	d1 83       	std	Z+1, r29	; 0x01
    ad88:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    ad8a:	21 e0       	ldi	r18, 0x01	; 1
    ad8c:	ae 01       	movw	r20, r28
    ad8e:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    ad92:	be 01       	movw	r22, r28
    ad94:	83 e0       	ldi	r24, 0x03	; 3
    ad96:	76 95       	lsr	r23
    ad98:	67 95       	ror	r22
    ad9a:	8a 95       	dec	r24
    ad9c:	e1 f7       	brne	.-8      	; 0xad96 <init_enemy_boss_eye+0x86>
    ad9e:	90 91 d4 0d 	lds	r25, 0x0DD4
    ada2:	40 e0       	ldi	r20, 0x00	; 0
    ada4:	50 e0       	ldi	r21, 0x00	; 0
    ada6:	80 e2       	ldi	r24, 0x20	; 32
    ada8:	89 1b       	sub	r24, r25
}
    adaa:	df 91       	pop	r29
    adac:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    adae:	0c 94 09 3e 	jmp	0x7c12	; 0x7c12 <SetTile>

0000adb2 <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    adb2:	40 e2       	ldi	r20, 0x20	; 32
    adb4:	50 e0       	ldi	r21, 0x00	; 0
    adb6:	68 ec       	ldi	r22, 0xC8	; 200
    adb8:	77 e0       	ldi	r23, 0x07	; 7
    adba:	80 e0       	ldi	r24, 0x00	; 0
    adbc:	0e 94 4b 56 	call	0xac96	; 0xac96 <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    adc0:	40 e3       	ldi	r20, 0x30	; 48
    adc2:	50 e0       	ldi	r21, 0x00	; 0
    adc4:	68 ec       	ldi	r22, 0xC8	; 200
    adc6:	77 e0       	ldi	r23, 0x07	; 7
    adc8:	81 e0       	ldi	r24, 0x01	; 1
    adca:	0e 94 4b 56 	call	0xac96	; 0xac96 <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    adce:	40 e9       	ldi	r20, 0x90	; 144
    add0:	50 e0       	ldi	r21, 0x00	; 0
    add2:	68 ec       	ldi	r22, 0xC8	; 200
    add4:	77 e0       	ldi	r23, 0x07	; 7
    add6:	82 e0       	ldi	r24, 0x02	; 2
    add8:	0e 94 4b 56 	call	0xac96	; 0xac96 <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    addc:	40 ea       	ldi	r20, 0xA0	; 160
    adde:	50 e0       	ldi	r21, 0x00	; 0
    ade0:	68 ec       	ldi	r22, 0xC8	; 200
    ade2:	77 e0       	ldi	r23, 0x07	; 7
    ade4:	83 e0       	ldi	r24, 0x03	; 3
    ade6:	0e 94 4b 56 	call	0xac96	; 0xac96 <init_enemy_boss_turret>
	game.active_enemies = 4;
    adea:	84 e0       	ldi	r24, 0x04	; 4
    adec:	80 93 d1 0d 	sts	0x0DD1, r24
    adf0:	08 95       	ret

0000adf2 <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    adf2:	ef 92       	push	r14
    adf4:	ff 92       	push	r15
    adf6:	0f 93       	push	r16
    adf8:	1f 93       	push	r17
    adfa:	cf 93       	push	r28
    adfc:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    adfe:	06 eb       	ldi	r16, 0xB6	; 182
    ae00:	1d e0       	ldi	r17, 0x0D	; 13
    ae02:	f8 01       	movw	r30, r16
    ae04:	86 8d       	ldd	r24, Z+30	; 0x1e
    ae06:	c0 e0       	ldi	r28, 0x00	; 0
    ae08:	d1 e0       	ldi	r29, 0x01	; 1
    ae0a:	9e 01       	movw	r18, r28
    ae0c:	28 1b       	sub	r18, r24
    ae0e:	31 09       	sbc	r19, r1
    ae10:	83 e0       	ldi	r24, 0x03	; 3
    ae12:	22 0f       	add	r18, r18
    ae14:	33 1f       	adc	r19, r19
    ae16:	8a 95       	dec	r24
    ae18:	e1 f7       	brne	.-8      	; 0xae12 <init_enemy_boss_eyes+0x20>
    ae1a:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae1e:	65 e0       	ldi	r22, 0x05	; 5
    ae20:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    ae24:	89 2f       	mov	r24, r25
    ae26:	48 e5       	ldi	r20, 0x58	; 88
    ae28:	50 e0       	ldi	r21, 0x00	; 0
    ae2a:	b9 01       	movw	r22, r18
    ae2c:	0e 94 88 56 	call	0xad10	; 0xad10 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    ae30:	f8 01       	movw	r30, r16
    ae32:	86 8d       	ldd	r24, Z+30	; 0x1e
    ae34:	9e 01       	movw	r18, r28
    ae36:	28 1b       	sub	r18, r24
    ae38:	31 09       	sbc	r19, r1
    ae3a:	93 e0       	ldi	r25, 0x03	; 3
    ae3c:	22 0f       	add	r18, r18
    ae3e:	33 1f       	adc	r19, r19
    ae40:	9a 95       	dec	r25
    ae42:	e1 f7       	brne	.-8      	; 0xae3c <init_enemy_boss_eyes+0x4a>
    ae44:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae48:	90 e0       	ldi	r25, 0x00	; 0
    ae4a:	01 96       	adiw	r24, 0x01	; 1
    ae4c:	45 e0       	ldi	r20, 0x05	; 5
    ae4e:	e4 2e       	mov	r14, r20
    ae50:	f1 2c       	mov	r15, r1
    ae52:	b7 01       	movw	r22, r14
    ae54:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    ae58:	40 e6       	ldi	r20, 0x60	; 96
    ae5a:	50 e0       	ldi	r21, 0x00	; 0
    ae5c:	b9 01       	movw	r22, r18
    ae5e:	0e 94 88 56 	call	0xad10	; 0xad10 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    ae62:	f8 01       	movw	r30, r16
    ae64:	86 8d       	ldd	r24, Z+30	; 0x1e
    ae66:	c8 1b       	sub	r28, r24
    ae68:	d1 09       	sbc	r29, r1
    ae6a:	53 e0       	ldi	r21, 0x03	; 3
    ae6c:	cc 0f       	add	r28, r28
    ae6e:	dd 1f       	adc	r29, r29
    ae70:	5a 95       	dec	r21
    ae72:	e1 f7       	brne	.-8      	; 0xae6c <init_enemy_boss_eyes+0x7a>
    ae74:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae78:	90 e0       	ldi	r25, 0x00	; 0
    ae7a:	02 96       	adiw	r24, 0x02	; 2
    ae7c:	b7 01       	movw	r22, r14
    ae7e:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    ae82:	48 e6       	ldi	r20, 0x68	; 104
    ae84:	50 e0       	ldi	r21, 0x00	; 0
    ae86:	be 01       	movw	r22, r28
    ae88:	0e 94 88 56 	call	0xad10	; 0xad10 <init_enemy_boss_eye>
	game.active_enemies = 3;
    ae8c:	83 e0       	ldi	r24, 0x03	; 3
    ae8e:	f8 01       	movw	r30, r16
    ae90:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    ae92:	80 91 fa 0c 	lds	r24, 0x0CFA
    ae96:	8d 5f       	subi	r24, 0xFD	; 253
    ae98:	80 93 fa 0c 	sts	0x0CFA, r24
}
    ae9c:	df 91       	pop	r29
    ae9e:	cf 91       	pop	r28
    aea0:	1f 91       	pop	r17
    aea2:	0f 91       	pop	r16
    aea4:	ff 90       	pop	r15
    aea6:	ef 90       	pop	r14
    aea8:	08 95       	ret

0000aeaa <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    aeaa:	a8 2f       	mov	r26, r24
    aeac:	b0 e0       	ldi	r27, 0x00	; 0
    aeae:	25 e3       	ldi	r18, 0x35	; 53
    aeb0:	82 9f       	mul	r24, r18
    aeb2:	c0 01       	movw	r24, r0
    aeb4:	11 24       	eor	r1, r1
    aeb6:	8a 54       	subi	r24, 0x4A	; 74
    aeb8:	92 4f       	sbci	r25, 0xF2	; 242
    aeba:	fc 01       	movw	r30, r24
    aebc:	e0 5e       	subi	r30, 0xE0	; 224
    aebe:	fe 4f       	sbci	r31, 0xFE	; 254
    aec0:	21 e0       	ldi	r18, 0x01	; 1
    aec2:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    aec4:	33 96       	adiw	r30, 0x03	; 3
    aec6:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    aec8:	31 96       	adiw	r30, 0x01	; 1
    aeca:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    aecc:	31 96       	adiw	r30, 0x01	; 1
    aece:	32 e0       	ldi	r19, 0x02	; 2
    aed0:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    aed2:	31 96       	adiw	r30, 0x01	; 1
    aed4:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    aed6:	31 96       	adiw	r30, 0x01	; 1
    aed8:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    aeda:	78 96       	adiw	r30, 0x18	; 24
    aedc:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    aede:	31 96       	adiw	r30, 0x01	; 1
    aee0:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    aee2:	34 96       	adiw	r30, 0x04	; 4
    aee4:	8a e5       	ldi	r24, 0x5A	; 90
    aee6:	90 e1       	ldi	r25, 0x10	; 16
    aee8:	91 83       	std	Z+1, r25	; 0x01
    aeea:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    aeec:	80 91 cb 0d 	lds	r24, 0x0DCB
    aef0:	84 30       	cpi	r24, 0x04	; 4
    aef2:	79 f0       	breq	.+30     	; 0xaf12 <init_enemy_level_hazard+0x68>
    aef4:	38 f4       	brcc	.+14     	; 0xaf04 <init_enemy_level_hazard+0x5a>
    aef6:	88 23       	and	r24, r24
    aef8:	91 f0       	breq	.+36     	; 0xaf1e <init_enemy_level_hazard+0x74>
    aefa:	82 30       	cpi	r24, 0x02	; 2
    aefc:	81 f4       	brne	.+32     	; 0xaf1e <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    aefe:	8d e2       	ldi	r24, 0x2D	; 45
    af00:	90 e3       	ldi	r25, 0x30	; 48
    af02:	0f c0       	rjmp	.+30     	; 0xaf22 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    af04:	86 30       	cpi	r24, 0x06	; 6
    af06:	41 f0       	breq	.+16     	; 0xaf18 <init_enemy_level_hazard+0x6e>
    af08:	88 30       	cpi	r24, 0x08	; 8
    af0a:	49 f4       	brne	.+18     	; 0xaf1e <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    af0c:	84 e2       	ldi	r24, 0x24	; 36
    af0e:	90 e3       	ldi	r25, 0x30	; 48
    af10:	08 c0       	rjmp	.+16     	; 0xaf22 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    af12:	8a e2       	ldi	r24, 0x2A	; 42
    af14:	90 e3       	ldi	r25, 0x30	; 48
    af16:	05 c0       	rjmp	.+10     	; 0xaf22 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    af18:	87 e2       	ldi	r24, 0x27	; 39
    af1a:	90 e3       	ldi	r25, 0x30	; 48
    af1c:	02 c0       	rjmp	.+4      	; 0xaf22 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    af1e:	80 e3       	ldi	r24, 0x30	; 48
    af20:	90 e3       	ldi	r25, 0x30	; 48
    af22:	90 93 5b 10 	sts	0x105B, r25
    af26:	80 93 5a 10 	sts	0x105A, r24
	}
	game.enemies[i].shared.gravity = 0;
    af2a:	25 e3       	ldi	r18, 0x35	; 53
    af2c:	2a 9f       	mul	r18, r26
    af2e:	c0 01       	movw	r24, r0
    af30:	2b 9f       	mul	r18, r27
    af32:	90 0d       	add	r25, r0
    af34:	11 24       	eor	r1, r1
    af36:	8a 54       	subi	r24, 0x4A	; 74
    af38:	92 4f       	sbci	r25, 0xF2	; 242
    af3a:	fc 01       	movw	r30, r24
    af3c:	e1 5e       	subi	r30, 0xE1	; 225
    af3e:	fe 4f       	sbci	r31, 0xFE	; 254
    af40:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    af42:	32 97       	sbiw	r30, 0x02	; 2
    af44:	2e e1       	ldi	r18, 0x1E	; 30
    af46:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    af48:	31 96       	adiw	r30, 0x01	; 1
    af4a:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    af4c:	35 97       	sbiw	r30, 0x05	; 5
    af4e:	71 83       	std	Z+1, r23	; 0x01
    af50:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    af52:	32 96       	adiw	r30, 0x02	; 2
    af54:	51 83       	std	Z+1, r21	; 0x01
    af56:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    af58:	3d 96       	adiw	r30, 0x0d	; 13
    af5a:	83 e0       	ldi	r24, 0x03	; 3
    af5c:	56 95       	lsr	r21
    af5e:	47 95       	ror	r20
    af60:	8a 95       	dec	r24
    af62:	e1 f7       	brne	.-8      	; 0xaf5c <init_enemy_level_hazard+0xb2>
    af64:	40 83       	st	Z, r20
    af66:	08 95       	ret

0000af68 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    af68:	cf 93       	push	r28
    af6a:	df 93       	push	r29
    af6c:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    af6e:	bc 01       	movw	r22, r24
    af70:	88 81       	ld	r24, Y
    af72:	99 81       	ldd	r25, Y+1	; 0x01
    af74:	0e 94 c5 3f 	call	0x7f8a	; 0x7f8a <EepromReadBlock>
	if (status == 0x03)
    af78:	83 30       	cpi	r24, 0x03	; 3
    af7a:	29 f4       	brne	.+10     	; 0xaf86 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    af7c:	ce 01       	movw	r24, r28
	}
}
    af7e:	df 91       	pop	r29
    af80:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    af82:	0c 94 7b 3f 	jmp	0x7ef6	; 0x7ef6 <EepromWriteBlock>
	}
}
    af86:	df 91       	pop	r29
    af88:	cf 91       	pop	r28
    af8a:	08 95       	ret

0000af8c <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    af8c:	1f 93       	push	r17
    af8e:	cf 93       	push	r28
    af90:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    af92:	d0 e0       	ldi	r29, 0x00	; 0
    af94:	10 e2       	ldi	r17, 0x20	; 32
    af96:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    af98:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    af9a:	c1 17       	cp	r28, r17
    af9c:	41 f0       	breq	.+16     	; 0xafae <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    af9e:	40 e0       	ldi	r20, 0x00	; 0
    afa0:	50 e0       	ldi	r21, 0x00	; 0
    afa2:	6c 2f       	mov	r22, r28
    afa4:	8d 2f       	mov	r24, r29
    afa6:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <SetTile>
    afaa:	cf 5f       	subi	r28, 0xFF	; 255
    afac:	f6 cf       	rjmp	.-20     	; 0xaf9a <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    afae:	df 5f       	subi	r29, 0xFF	; 255
    afb0:	dc 31       	cpi	r29, 0x1C	; 28
    afb2:	91 f7       	brne	.-28     	; 0xaf98 <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    afb4:	df 91       	pop	r29
    afb6:	cf 91       	pop	r28
    afb8:	1f 91       	pop	r17
    afba:	08 95       	ret

0000afbc <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    afbc:	dc 01       	movw	r26, r24
    afbe:	e6 2f       	mov	r30, r22
    afc0:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    afc2:	25 e0       	ldi	r18, 0x05	; 5
    afc4:	62 2f       	mov	r22, r18
    afc6:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    afca:	58 2f       	mov	r21, r24
    afcc:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    afce:	40 91 cc 0d 	lds	r20, 0x0DCC
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    afd2:	8e 2f       	mov	r24, r30
    afd4:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    afd8:	e8 2f       	mov	r30, r24
    afda:	f0 e0       	ldi	r31, 0x00	; 0
    afdc:	54 9f       	mul	r21, r20
    afde:	e0 0d       	add	r30, r0
    afe0:	f1 1d       	adc	r31, r1
    afe2:	11 24       	eor	r1, r1
    afe4:	32 96       	adiw	r30, 0x02	; 2
    afe6:	ea 0f       	add	r30, r26
    afe8:	fb 1f       	adc	r31, r27
    afea:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    afec:	e9 2f       	mov	r30, r25
    afee:	f0 e0       	ldi	r31, 0x00	; 0
    aff0:	95 e0       	ldi	r25, 0x05	; 5
    aff2:	39 9f       	mul	r19, r25
    aff4:	e0 0d       	add	r30, r0
    aff6:	f1 1d       	adc	r31, r1
    aff8:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    affa:	99 e1       	ldi	r25, 0x19	; 25
    affc:	89 9f       	mul	r24, r25
    affe:	e0 0d       	add	r30, r0
    b000:	f1 1d       	adc	r31, r1
    b002:	11 24       	eor	r1, r1
    b004:	ee 58       	subi	r30, 0x8E	; 142
    b006:	f5 4a       	sbci	r31, 0xA5	; 165
    b008:	84 91       	lpm	r24, Z
}
    b00a:	08 95       	ret

0000b00c <render_camera_view>:

void render_camera_view()
{
    b00c:	7f 92       	push	r7
    b00e:	8f 92       	push	r8
    b010:	9f 92       	push	r9
    b012:	af 92       	push	r10
    b014:	bf 92       	push	r11
    b016:	cf 92       	push	r12
    b018:	df 92       	push	r13
    b01a:	ef 92       	push	r14
    b01c:	ff 92       	push	r15
    b01e:	0f 93       	push	r16
    b020:	1f 93       	push	r17
    b022:	cf 93       	push	r28
    b024:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b026:	c0 91 b6 0d 	lds	r28, 0x0DB6
    b02a:	d0 91 b7 0d 	lds	r29, 0x0DB7
    b02e:	83 e0       	ldi	r24, 0x03	; 3
    b030:	d6 95       	lsr	r29
    b032:	c7 95       	ror	r28
    b034:	8a 95       	dec	r24
    b036:	e1 f7       	brne	.-8      	; 0xb030 <render_camera_view+0x24>
    b038:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b03a:	00 91 be 0d 	lds	r16, 0x0DBE
    b03e:	06 95       	lsr	r16
    b040:	06 95       	lsr	r16
    b042:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b044:	dd 27       	eor	r29, r29
    b046:	7e 01       	movw	r14, r28
    b048:	4c e1       	ldi	r20, 0x1C	; 28
    b04a:	e4 0e       	add	r14, r20
    b04c:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b04e:	10 e0       	ldi	r17, 0x00	; 0
    b050:	68 01       	movw	r12, r16
    b052:	89 e1       	ldi	r24, 0x19	; 25
    b054:	c8 0e       	add	r12, r24
    b056:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b058:	9e e1       	ldi	r25, 0x1E	; 30
    b05a:	a9 2e       	mov	r10, r25
    b05c:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b05e:	ec 16       	cp	r14, r28
    b060:	fd 06       	cpc	r15, r29
    b062:	70 f1       	brcs	.+92     	; 0xb0c0 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b064:	48 01       	movw	r8, r16
    b066:	c8 14       	cp	r12, r8
    b068:	d9 04       	cpc	r13, r9
    b06a:	40 f1       	brcs	.+80     	; 0xb0bc <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b06c:	48 2d       	mov	r20, r8
    b06e:	6c 2f       	mov	r22, r28
    b070:	80 91 d8 0f 	lds	r24, 0x0FD8
    b074:	90 91 d9 0f 	lds	r25, 0x0FD9
    b078:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b07c:	28 2f       	mov	r18, r24
    b07e:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b080:	80 91 b6 0c 	lds	r24, 0x0CB6
    b084:	86 95       	lsr	r24
    b086:	86 95       	lsr	r24
    b088:	86 95       	lsr	r24
    b08a:	90 e0       	ldi	r25, 0x00	; 0
    b08c:	80 1b       	sub	r24, r16
    b08e:	91 0b       	sbc	r25, r17
    b090:	88 0d       	add	r24, r8
    b092:	99 1d       	adc	r25, r9
    b094:	b5 01       	movw	r22, r10
    b096:	0e 94 c9 71 	call	0xe392	; 0xe392 <__udivmodhi4>
    b09a:	90 91 b5 0c 	lds	r25, 0x0CB5
    b09e:	96 95       	lsr	r25
    b0a0:	96 95       	lsr	r25
    b0a2:	96 95       	lsr	r25
    b0a4:	97 19       	sub	r25, r7
    b0a6:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b0a8:	a9 01       	movw	r20, r18
    b0aa:	68 2f       	mov	r22, r24
    b0ac:	89 2f       	mov	r24, r25
    b0ae:	8f 71       	andi	r24, 0x1F	; 31
    b0b0:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b0b4:	8f ef       	ldi	r24, 0xFF	; 255
    b0b6:	88 1a       	sub	r8, r24
    b0b8:	98 0a       	sbc	r9, r24
    b0ba:	d5 cf       	rjmp	.-86     	; 0xb066 <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b0bc:	21 96       	adiw	r28, 0x01	; 1
    b0be:	cf cf       	rjmp	.-98     	; 0xb05e <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    b0c0:	df 91       	pop	r29
    b0c2:	cf 91       	pop	r28
    b0c4:	1f 91       	pop	r17
    b0c6:	0f 91       	pop	r16
    b0c8:	ff 90       	pop	r15
    b0ca:	ef 90       	pop	r14
    b0cc:	df 90       	pop	r13
    b0ce:	cf 90       	pop	r12
    b0d0:	bf 90       	pop	r11
    b0d2:	af 90       	pop	r10
    b0d4:	9f 90       	pop	r9
    b0d6:	8f 90       	pop	r8
    b0d8:	7f 90       	pop	r7
    b0da:	08 95       	ret

0000b0dc <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    b0dc:	28 2f       	mov	r18, r24
    b0de:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    b0e0:	80 91 cb 0d 	lds	r24, 0x0DCB
    b0e4:	81 11       	cpse	r24, r1
    b0e6:	04 c0       	rjmp	.+8      	; 0xb0f0 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    b0e8:	bf 01       	movw	r22, r30
    b0ea:	82 2f       	mov	r24, r18
    b0ec:	0c 94 1d 55 	jmp	0xaa3a	; 0xaa3a <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    b0f0:	82 30       	cpi	r24, 0x02	; 2
    b0f2:	21 f4       	brne	.+8      	; 0xb0fc <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    b0f4:	bf 01       	movw	r22, r30
    b0f6:	82 2f       	mov	r24, r18
    b0f8:	0c 94 db 54 	jmp	0xa9b6	; 0xa9b6 <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    b0fc:	84 30       	cpi	r24, 0x04	; 4
    b0fe:	31 f4       	brne	.+12     	; 0xb10c <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    b100:	48 52       	subi	r20, 0x28	; 40
    b102:	51 09       	sbc	r21, r1
    b104:	bf 01       	movw	r22, r30
    b106:	82 2f       	mov	r24, r18
    b108:	0c 94 5a 55 	jmp	0xaab4	; 0xaab4 <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    b10c:	80 91 d0 0d 	lds	r24, 0x0DD0
    b110:	63 e0       	ldi	r22, 0x03	; 3
    b112:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    b116:	99 23       	and	r25, r25
    b118:	39 f3       	breq	.-50     	; 0xb0e8 <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b11a:	91 30       	cpi	r25, 0x01	; 1
    b11c:	89 f7       	brne	.-30     	; 0xb100 <init_level_enemy+0x24>
    b11e:	ea cf       	rjmp	.-44     	; 0xb0f4 <init_level_enemy+0x18>

0000b120 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    b120:	28 2f       	mov	r18, r24
    b122:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    b124:	80 91 cb 0d 	lds	r24, 0x0DCB
    b128:	81 30       	cpi	r24, 0x01	; 1
    b12a:	21 f4       	brne	.+8      	; 0xb134 <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    b12c:	bf 01       	movw	r22, r30
    b12e:	82 2f       	mov	r24, r18
    b130:	0c 94 98 55 	jmp	0xab30	; 0xab30 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    b134:	83 30       	cpi	r24, 0x03	; 3
    b136:	21 f4       	brne	.+8      	; 0xb140 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    b138:	bf 01       	movw	r22, r30
    b13a:	82 2f       	mov	r24, r18
    b13c:	0c 94 d3 55 	jmp	0xaba6	; 0xaba6 <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    b140:	85 30       	cpi	r24, 0x05	; 5
    b142:	21 f4       	brne	.+8      	; 0xb14c <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    b144:	bf 01       	movw	r22, r30
    b146:	82 2f       	mov	r24, r18
    b148:	0c 94 0f 56 	jmp	0xac1e	; 0xac1e <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    b14c:	80 91 d0 0d 	lds	r24, 0x0DD0
    b150:	63 e0       	ldi	r22, 0x03	; 3
    b152:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    b156:	99 23       	and	r25, r25
    b158:	49 f3       	breq	.-46     	; 0xb12c <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    b15a:	91 30       	cpi	r25, 0x01	; 1
    b15c:	99 f7       	brne	.-26     	; 0xb144 <init_space_enemy+0x24>
    b15e:	ec cf       	rjmp	.-40     	; 0xb138 <init_space_enemy+0x18>

0000b160 <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    b160:	0f 93       	push	r16
    b162:	1f 93       	push	r17
    b164:	cf 93       	push	r28
    b166:	df 93       	push	r29
    b168:	00 d0       	rcall	.+0      	; 0xb16a <spawn_enemy+0xa>
    b16a:	00 d0       	rcall	.+0      	; 0xb16c <spawn_enemy+0xc>
    b16c:	cd b7       	in	r28, 0x3d	; 61
    b16e:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    b170:	20 91 b6 0d 	lds	r18, 0x0DB6
    b174:	30 91 b7 0d 	lds	r19, 0x0DB7
    b178:	28 3c       	cpi	r18, 0xC8	; 200
    b17a:	35 40       	sbci	r19, 0x05	; 5
    b17c:	98 f5       	brcc	.+102    	; 0xb1e4 <spawn_enemy+0x84>
    b17e:	26 eb       	ldi	r18, 0xB6	; 182
    b180:	3d e0       	ldi	r19, 0x0D	; 13
    b182:	10 e0       	ldi	r17, 0x00	; 0
    b184:	f9 01       	movw	r30, r18
    b186:	e0 5e       	subi	r30, 0xE0	; 224
    b188:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    b18a:	50 81       	ld	r21, Z
    b18c:	51 11       	cpse	r21, r1
    b18e:	25 c0       	rjmp	.+74     	; 0xb1da <spawn_enemy+0x7a>
    b190:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    b192:	50 81       	ld	r21, Z
    b194:	51 11       	cpse	r21, r1
    b196:	21 c0       	rjmp	.+66     	; 0xb1da <spawn_enemy+0x7a>
    b198:	04 2f       	mov	r16, r20
    b19a:	ab 01       	movw	r20, r22
    b19c:	bc 01       	movw	r22, r24
					{
						if (is_space())
    b19e:	4b 83       	std	Y+3, r20	; 0x03
    b1a0:	5c 83       	std	Y+4, r21	; 0x04
    b1a2:	89 83       	std	Y+1, r24	; 0x01
    b1a4:	7a 83       	std	Y+2, r23	; 0x02
    b1a6:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    b1aa:	4b 81       	ldd	r20, Y+3	; 0x03
    b1ac:	5c 81       	ldd	r21, Y+4	; 0x04
    b1ae:	69 81       	ldd	r22, Y+1	; 0x01
    b1b0:	7a 81       	ldd	r23, Y+2	; 0x02
    b1b2:	88 23       	and	r24, r24
    b1b4:	21 f0       	breq	.+8      	; 0xb1be <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    b1b6:	81 2f       	mov	r24, r17
    b1b8:	0e 94 90 58 	call	0xb120	; 0xb120 <init_space_enemy>
    b1bc:	08 c0       	rjmp	.+16     	; 0xb1ce <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    b1be:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    b1c0:	01 11       	cpse	r16, r1
    b1c2:	03 c0       	rjmp	.+6      	; 0xb1ca <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    b1c4:	0e 94 6e 58 	call	0xb0dc	; 0xb0dc <init_level_enemy>
    b1c8:	02 c0       	rjmp	.+4      	; 0xb1ce <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    b1ca:	0e 94 55 57 	call	0xaeaa	; 0xaeaa <init_enemy_level_hazard>
						}
						game.active_enemies++;
    b1ce:	80 91 d1 0d 	lds	r24, 0x0DD1
    b1d2:	8f 5f       	subi	r24, 0xFF	; 255
    b1d4:	80 93 d1 0d 	sts	0x0DD1, r24
    b1d8:	05 c0       	rjmp	.+10     	; 0xb1e4 <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    b1da:	1f 5f       	subi	r17, 0xFF	; 255
    b1dc:	2b 5c       	subi	r18, 0xCB	; 203
    b1de:	3f 4f       	sbci	r19, 0xFF	; 255
    b1e0:	15 30       	cpi	r17, 0x05	; 5
    b1e2:	81 f6       	brne	.-96     	; 0xb184 <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    b1e4:	0f 90       	pop	r0
    b1e6:	0f 90       	pop	r0
    b1e8:	0f 90       	pop	r0
    b1ea:	0f 90       	pop	r0
    b1ec:	df 91       	pop	r29
    b1ee:	cf 91       	pop	r28
    b1f0:	1f 91       	pop	r17
    b1f2:	0f 91       	pop	r16
    b1f4:	08 95       	ret

0000b1f6 <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b1f6:	9f ef       	ldi	r25, 0xFF	; 255
    b1f8:	98 0f       	add	r25, r24
    b1fa:	9e 30       	cpi	r25, 0x0E	; 14
    b1fc:	28 f0       	brcs	.+10     	; 0xb208 <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    b1fe:	8f 50       	subi	r24, 0x0F	; 15
    b200:	8c 30       	cpi	r24, 0x0C	; 12
    b202:	20 f0       	brcs	.+8      	; 0xb20c <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    b204:	80 e0       	ldi	r24, 0x00	; 0
    b206:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    b208:	81 e0       	ldi	r24, 0x01	; 1
    b20a:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    b20c:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    b20e:	08 95       	ret

0000b210 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    b210:	af 92       	push	r10
    b212:	bf 92       	push	r11
    b214:	cf 92       	push	r12
    b216:	df 92       	push	r13
    b218:	ef 92       	push	r14
    b21a:	ff 92       	push	r15
    b21c:	0f 93       	push	r16
    b21e:	1f 93       	push	r17
    b220:	cf 93       	push	r28
    b222:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b224:	66 e1       	ldi	r22, 0x16	; 22
    b226:	82 e0       	ldi	r24, 0x02	; 2
    b228:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <LBRandom>
    b22c:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    b22e:	80 91 c7 0d 	lds	r24, 0x0DC7
    b232:	8f 5f       	subi	r24, 0xFF	; 255
    b234:	80 93 c7 0d 	sts	0x0DC7, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    b238:	20 91 d2 0d 	lds	r18, 0x0DD2
    b23c:	62 2f       	mov	r22, r18
    b23e:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    b242:	89 2f       	mov	r24, r25
    b244:	90 e0       	ldi	r25, 0x00	; 0
    b246:	30 e0       	ldi	r19, 0x00	; 0
    b248:	21 50       	subi	r18, 0x01	; 1
    b24a:	31 09       	sbc	r19, r1
    b24c:	82 17       	cp	r24, r18
    b24e:	93 07       	cpc	r25, r19
    b250:	31 f4       	brne	.+12     	; 0xb25e <append_tile_column+0x4e>
    b252:	bb 24       	eor	r11, r11
    b254:	b3 94       	inc	r11
    b256:	80 91 d1 0d 	lds	r24, 0x0DD1
    b25a:	85 30       	cpi	r24, 0x05	; 5
    b25c:	08 f0       	brcs	.+2      	; 0xb260 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    b25e:	b1 2c       	mov	r11, r1
    b260:	00 e0       	ldi	r16, 0x00	; 0
    b262:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    b264:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    b266:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b268:	2e e1       	ldi	r18, 0x1E	; 30
    b26a:	c2 2e       	mov	r12, r18
    b26c:	d1 2c       	mov	r13, r1
    b26e:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    b270:	40 91 be 0d 	lds	r20, 0x0DBE
    b274:	46 95       	lsr	r20
    b276:	46 95       	lsr	r20
    b278:	46 95       	lsr	r20
    b27a:	40 0f       	add	r20, r16
    b27c:	60 91 bf 0d 	lds	r22, 0x0DBF
    b280:	80 91 d8 0f 	lds	r24, 0x0FD8
    b284:	90 91 d9 0f 	lds	r25, 0x0FD9
    b288:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b28c:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b28e:	28 2f       	mov	r18, r24
    b290:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    b292:	80 91 b6 0c 	lds	r24, 0x0CB6
    b296:	86 95       	lsr	r24
    b298:	86 95       	lsr	r24
    b29a:	86 95       	lsr	r24
    b29c:	a8 01       	movw	r20, r16
    b29e:	48 0f       	add	r20, r24
    b2a0:	51 1d       	adc	r21, r1
    b2a2:	ca 01       	movw	r24, r20
    b2a4:	b6 01       	movw	r22, r12
    b2a6:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b2aa:	a9 01       	movw	r20, r18
    b2ac:	68 2f       	mov	r22, r24
    b2ae:	80 91 c3 0d 	lds	r24, 0x0DC3
    b2b2:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    b2b6:	bb 20       	and	r11, r11
    b2b8:	81 f0       	breq	.+32     	; 0xb2da <append_tile_column+0xca>
    b2ba:	01 15       	cp	r16, r1
    b2bc:	11 05       	cpc	r17, r1
    b2be:	69 f0       	breq	.+26     	; 0xb2da <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    b2c0:	81 ef       	ldi	r24, 0xF1	; 241
    b2c2:	8e 0d       	add	r24, r14
    b2c4:	85 30       	cpi	r24, 0x05	; 5
    b2c6:	30 f0       	brcs	.+12     	; 0xb2d4 <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    b2c8:	8f ef       	ldi	r24, 0xFF	; 255
    b2ca:	8e 0d       	add	r24, r14
    b2cc:	8e 30       	cpi	r24, 0x0E	; 14
    b2ce:	08 f4       	brcc	.+2      	; 0xb2d2 <append_tile_column+0xc2>
    b2d0:	60 c0       	rjmp	.+192    	; 0xb392 <append_tile_column+0x182>
    b2d2:	03 c0       	rjmp	.+6      	; 0xb2da <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    b2d4:	c1 11       	cpse	r28, r1
    b2d6:	f8 cf       	rjmp	.-16     	; 0xb2c8 <append_tile_column+0xb8>
    b2d8:	c0 2f       	mov	r28, r16
    b2da:	0f 5f       	subi	r16, 0xFF	; 255
    b2dc:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    b2de:	09 31       	cpi	r16, 0x19	; 25
    b2e0:	11 05       	cpc	r17, r1
    b2e2:	29 f6       	brne	.-118    	; 0xb26e <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    b2e4:	bb 20       	and	r11, r11
    b2e6:	51 f0       	breq	.+20     	; 0xb2fc <append_tile_column+0xec>
    b2e8:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    b2ec:	88 23       	and	r24, r24
    b2ee:	31 f0       	breq	.+12     	; 0xb2fc <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    b2f0:	ff 0c       	add	r15, r15
    b2f2:	ff 0c       	add	r15, r15
    b2f4:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    b2f6:	6f 2d       	mov	r22, r15
    b2f8:	70 e0       	ldi	r23, 0x00	; 0
    b2fa:	32 c0       	rjmp	.+100    	; 0xb360 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b2fc:	cc 23       	and	r28, r28
    b2fe:	f1 f0       	breq	.+60     	; 0xb33c <append_tile_column+0x12c>
    b300:	80 91 cb 0d 	lds	r24, 0x0DCB
    b304:	90 91 be 0d 	lds	r25, 0x0DBE
    b308:	20 91 b6 0d 	lds	r18, 0x0DB6
    b30c:	30 91 b7 0d 	lds	r19, 0x0DB7
    b310:	6c 2f       	mov	r22, r28
    b312:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b314:	96 95       	lsr	r25
    b316:	96 95       	lsr	r25
    b318:	96 95       	lsr	r25
    b31a:	69 0f       	add	r22, r25
    b31c:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    b31e:	82 30       	cpi	r24, 0x02	; 2
    b320:	19 f4       	brne	.+6      	; 0xb328 <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    b322:	61 50       	subi	r22, 0x01	; 1
    b324:	71 09       	sbc	r23, r1
    b326:	02 c0       	rjmp	.+4      	; 0xb32c <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    b328:	6f 5f       	subi	r22, 0xFF	; 255
    b32a:	7f 4f       	sbci	r23, 0xFF	; 255
    b32c:	93 e0       	ldi	r25, 0x03	; 3
    b32e:	66 0f       	add	r22, r22
    b330:	77 1f       	adc	r23, r23
    b332:	9a 95       	dec	r25
    b334:	e1 f7       	brne	.-8      	; 0xb32e <append_tile_column+0x11e>
    b336:	41 e0       	ldi	r20, 0x01	; 1
    b338:	c9 01       	movw	r24, r18
    b33a:	17 c0       	rjmp	.+46     	; 0xb36a <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    b33c:	dd 23       	and	r29, r29
    b33e:	c9 f0       	breq	.+50     	; 0xb372 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    b340:	80 91 be 0d 	lds	r24, 0x0DBE
    b344:	86 95       	lsr	r24
    b346:	86 95       	lsr	r24
    b348:	86 95       	lsr	r24
    b34a:	6d 2f       	mov	r22, r29
    b34c:	70 e0       	ldi	r23, 0x00	; 0
    b34e:	68 0f       	add	r22, r24
    b350:	71 1d       	adc	r23, r1
    b352:	61 50       	subi	r22, 0x01	; 1
    b354:	71 09       	sbc	r23, r1
    b356:	83 e0       	ldi	r24, 0x03	; 3
    b358:	66 0f       	add	r22, r22
    b35a:	77 1f       	adc	r23, r23
    b35c:	8a 95       	dec	r24
    b35e:	e1 f7       	brne	.-8      	; 0xb358 <append_tile_column+0x148>
    b360:	80 91 b6 0d 	lds	r24, 0x0DB6
    b364:	90 91 b7 0d 	lds	r25, 0x0DB7
    b368:	40 e0       	ldi	r20, 0x00	; 0
    b36a:	80 52       	subi	r24, 0x20	; 32
    b36c:	9f 4f       	sbci	r25, 0xFF	; 255
    b36e:	0e 94 b0 58 	call	0xb160	; 0xb160 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    b372:	80 91 bf 0d 	lds	r24, 0x0DBF
    b376:	8f 5f       	subi	r24, 0xFF	; 255
    b378:	80 93 bf 0d 	sts	0x0DBF, r24
	game.scroll_dest_x++;
    b37c:	80 91 c3 0d 	lds	r24, 0x0DC3
    b380:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b382:	80 32       	cpi	r24, 0x20	; 32
    b384:	18 f4       	brcc	.+6      	; 0xb38c <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    b386:	80 93 c3 0d 	sts	0x0DC3, r24
    b38a:	07 c0       	rjmp	.+14     	; 0xb39a <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    b38c:	10 92 c3 0d 	sts	0x0DC3, r1
    b390:	04 c0       	rjmp	.+8      	; 0xb39a <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    b392:	d1 11       	cpse	r29, r1
    b394:	a2 cf       	rjmp	.-188    	; 0xb2da <append_tile_column+0xca>
    b396:	da 2d       	mov	r29, r10
    b398:	a0 cf       	rjmp	.-192    	; 0xb2da <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    b39a:	df 91       	pop	r29
    b39c:	cf 91       	pop	r28
    b39e:	1f 91       	pop	r17
    b3a0:	0f 91       	pop	r16
    b3a2:	ff 90       	pop	r15
    b3a4:	ef 90       	pop	r14
    b3a6:	df 90       	pop	r13
    b3a8:	cf 90       	pop	r12
    b3aa:	bf 90       	pop	r11
    b3ac:	af 90       	pop	r10
    b3ae:	08 95       	ret

0000b3b0 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    b3b0:	80 91 b6 0d 	lds	r24, 0x0DB6
    b3b4:	90 91 b7 0d 	lds	r25, 0x0DB7
    b3b8:	01 96       	adiw	r24, 0x01	; 1
    b3ba:	90 93 b7 0d 	sts	0x0DB7, r25
    b3be:	80 93 b6 0d 	sts	0x0DB6, r24
	Scroll(1,0);
    b3c2:	60 e0       	ldi	r22, 0x00	; 0
    b3c4:	81 e0       	ldi	r24, 0x01	; 1
    b3c6:	0e 94 b8 4b 	call	0x9770	; 0x9770 <Scroll>
	if (++game.scroll_x == 8)
    b3ca:	80 91 c1 0d 	lds	r24, 0x0DC1
    b3ce:	8f 5f       	subi	r24, 0xFF	; 255
    b3d0:	88 30       	cpi	r24, 0x08	; 8
    b3d2:	19 f0       	breq	.+6      	; 0xb3da <move_camera_x+0x2a>
    b3d4:	80 93 c1 0d 	sts	0x0DC1, r24
    b3d8:	08 95       	ret
	{
		game.scroll_x = 0;
    b3da:	10 92 c1 0d 	sts	0x0DC1, r1
		append_tile_column();
    b3de:	0c 94 08 59 	jmp	0xb210	; 0xb210 <append_tile_column>

0000b3e2 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    b3e2:	82 e0       	ldi	r24, 0x02	; 2
    b3e4:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b3e8:	85 e0       	ldi	r24, 0x05	; 5
    b3ea:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.anims = run_anim;
    b3ee:	e8 e3       	ldi	r30, 0x38	; 56
    b3f0:	f0 e1       	ldi	r31, 0x10	; 16
    b3f2:	f0 93 34 0e 	sts	0x0E34, r31
    b3f6:	e0 93 33 0e 	sts	0x0E33, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    b3fa:	85 ea       	ldi	r24, 0xA5	; 165
    b3fc:	90 e3       	ldi	r25, 0x30	; 48
    b3fe:	91 83       	std	Z+1, r25	; 0x01
    b400:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    b402:	8b e9       	ldi	r24, 0x9B	; 155
    b404:	90 e3       	ldi	r25, 0x30	; 48
    b406:	93 83       	std	Z+3, r25	; 0x03
    b408:	82 83       	std	Z+2, r24	; 0x02
    b40a:	08 95       	ret

0000b40c <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    b40c:	a6 eb       	ldi	r26, 0xB6	; 182
    b40e:	bd e0       	ldi	r27, 0x0D	; 13
    b410:	90 93 d9 0f 	sts	0x0FD9, r25
    b414:	80 93 d8 0f 	sts	0x0FD8, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    b418:	fc 01       	movw	r30, r24
    b41a:	24 91       	lpm	r18, Z
    b41c:	56 96       	adiw	r26, 0x16	; 22
    b41e:	2c 93       	st	X, r18
    b420:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    b422:	9c 01       	movw	r18, r24
    b424:	2f 5f       	subi	r18, 0xFF	; 255
    b426:	3f 4f       	sbci	r19, 0xFF	; 255
    b428:	f9 01       	movw	r30, r18
    b42a:	44 91       	lpm	r20, Z
    b42c:	57 96       	adiw	r26, 0x17	; 23
    b42e:	4c 93       	st	X, r20
    b430:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b432:	fc 01       	movw	r30, r24
    b434:	84 91       	lpm	r24, Z
    b436:	98 2f       	mov	r25, r24
    b438:	99 0f       	add	r25, r25
    b43a:	99 0f       	add	r25, r25
    b43c:	89 0f       	add	r24, r25
    b43e:	1f 96       	adiw	r26, 0x0f	; 15
    b440:	8c 93       	st	X, r24
    b442:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b444:	f9 01       	movw	r30, r18
    b446:	24 91       	lpm	r18, Z
    b448:	82 2f       	mov	r24, r18
    b44a:	88 0f       	add	r24, r24
    b44c:	88 0f       	add	r24, r24
    b44e:	28 0f       	add	r18, r24
    b450:	50 96       	adiw	r26, 0x10	; 16
    b452:	2c 93       	st	X, r18
    b454:	08 95       	ret

0000b456 <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b456:	cf 92       	push	r12
    b458:	df 92       	push	r13
    b45a:	ef 92       	push	r14
    b45c:	ff 92       	push	r15
    b45e:	0f 93       	push	r16
    b460:	1f 93       	push	r17
    b462:	cf 93       	push	r28
    b464:	df 93       	push	r29
    b466:	7c 01       	movw	r14, r24
    b468:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b46a:	88 e0       	ldi	r24, 0x08	; 8
    b46c:	48 9f       	mul	r20, r24
    b46e:	80 01       	movw	r16, r0
    b470:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b472:	c0 e0       	ldi	r28, 0x00	; 0
    b474:	cd 17       	cp	r28, r29
    b476:	09 f4       	brne	.+2      	; 0xb47a <on_solid_ground+0x24>
    b478:	41 c0       	rjmp	.+130    	; 0xb4fc <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    b47a:	f7 01       	movw	r30, r14
    b47c:	42 81       	ldd	r20, Z+2	; 0x02
    b47e:	53 81       	ldd	r21, Z+3	; 0x03
    b480:	40 0f       	add	r20, r16
    b482:	51 1f       	adc	r21, r17
    b484:	83 e0       	ldi	r24, 0x03	; 3
    b486:	56 95       	lsr	r21
    b488:	47 95       	ror	r20
    b48a:	8a 95       	dec	r24
    b48c:	e1 f7       	brne	.-8      	; 0xb486 <on_solid_ground+0x30>
    b48e:	60 81       	ld	r22, Z
    b490:	71 81       	ldd	r23, Z+1	; 0x01
    b492:	93 e0       	ldi	r25, 0x03	; 3
    b494:	76 95       	lsr	r23
    b496:	67 95       	ror	r22
    b498:	9a 95       	dec	r25
    b49a:	e1 f7       	brne	.-8      	; 0xb494 <on_solid_ground+0x3e>
    b49c:	6c 0f       	add	r22, r28
    b49e:	80 91 d8 0f 	lds	r24, 0x0FD8
    b4a2:	90 91 d9 0f 	lds	r25, 0x0FD9
    b4a6:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b4aa:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    b4ac:	f7 01       	movw	r30, r14
    b4ae:	42 81       	ldd	r20, Z+2	; 0x02
    b4b0:	53 81       	ldd	r21, Z+3	; 0x03
    b4b2:	40 0f       	add	r20, r16
    b4b4:	51 1f       	adc	r21, r17
    b4b6:	23 e0       	ldi	r18, 0x03	; 3
    b4b8:	56 95       	lsr	r21
    b4ba:	47 95       	ror	r20
    b4bc:	2a 95       	dec	r18
    b4be:	e1 f7       	brne	.-8      	; 0xb4b8 <on_solid_ground+0x62>
    b4c0:	20 81       	ld	r18, Z
    b4c2:	31 81       	ldd	r19, Z+1	; 0x01
    b4c4:	29 5f       	subi	r18, 0xF9	; 249
    b4c6:	3f 4f       	sbci	r19, 0xFF	; 255
    b4c8:	53 e0       	ldi	r21, 0x03	; 3
    b4ca:	36 95       	lsr	r19
    b4cc:	27 95       	ror	r18
    b4ce:	5a 95       	dec	r21
    b4d0:	e1 f7       	brne	.-8      	; 0xb4ca <on_solid_ground+0x74>
    b4d2:	6c 2f       	mov	r22, r28
    b4d4:	62 0f       	add	r22, r18
    b4d6:	80 91 d8 0f 	lds	r24, 0x0FD8
    b4da:	90 91 d9 0f 	lds	r25, 0x0FD9
    b4de:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b4e2:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    b4e4:	8c 2d       	mov	r24, r12
    b4e6:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    b4ea:	81 11       	cpse	r24, r1
    b4ec:	09 c0       	rjmp	.+18     	; 0xb500 <on_solid_ground+0xaa>
    b4ee:	8d 2d       	mov	r24, r13
    b4f0:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    b4f4:	81 11       	cpse	r24, r1
    b4f6:	04 c0       	rjmp	.+8      	; 0xb500 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    b4f8:	cf 5f       	subi	r28, 0xFF	; 255
    b4fa:	bc cf       	rjmp	.-136    	; 0xb474 <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    b4fc:	80 e0       	ldi	r24, 0x00	; 0
    b4fe:	01 c0       	rjmp	.+2      	; 0xb502 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    b500:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    b502:	df 91       	pop	r29
    b504:	cf 91       	pop	r28
    b506:	1f 91       	pop	r17
    b508:	0f 91       	pop	r16
    b50a:	ff 90       	pop	r15
    b50c:	ef 90       	pop	r14
    b50e:	df 90       	pop	r13
    b510:	cf 90       	pop	r12
    b512:	08 95       	ret

0000b514 <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    b514:	9c 01       	movw	r18, r24
    b516:	80 91 f9 0c 	lds	r24, 0x0CF9
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    b51a:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    b51c:	83 30       	cpi	r24, 0x03	; 3
    b51e:	08 f0       	brcs	.+2      	; 0xb522 <find_shot_slot+0xe>
    b520:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    b522:	f9 01       	movw	r30, r18
    b524:	48 9f       	mul	r20, r24
    b526:	e0 0d       	add	r30, r0
    b528:	f1 1d       	adc	r31, r1
    b52a:	11 24       	eor	r1, r1
    b52c:	51 8d       	ldd	r21, Z+25	; 0x19
    b52e:	91 e0       	ldi	r25, 0x01	; 1
    b530:	98 0f       	add	r25, r24
    b532:	51 11       	cpse	r21, r1
    b534:	03 c0       	rjmp	.+6      	; 0xb53c <find_shot_slot+0x28>
		{
			return i++;
    b536:	90 93 f9 0c 	sts	0x0CF9, r25
    b53a:	08 95       	ret
		}
		i++;
    b53c:	89 2f       	mov	r24, r25
	}
    b53e:	ee cf       	rjmp	.-36     	; 0xb51c <find_shot_slot+0x8>

0000b540 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    b540:	bf 92       	push	r11
    b542:	cf 92       	push	r12
    b544:	df 92       	push	r13
    b546:	ef 92       	push	r14
    b548:	ff 92       	push	r15
    b54a:	0f 93       	push	r16
    b54c:	1f 93       	push	r17
    b54e:	cf 93       	push	r28
    b550:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    b552:	fc 01       	movw	r30, r24
    b554:	ec 58       	subi	r30, 0x8C	; 140
    b556:	ff 4f       	sbci	r31, 0xFF	; 255
    b558:	20 81       	ld	r18, Z
    b55a:	20 ff       	sbrs	r18, 0
    b55c:	a7 c0       	rjmp	.+334    	; 0xb6ac <update_shot+0x16c>
    b55e:	fc 01       	movw	r30, r24
    b560:	27 81       	ldd	r18, Z+7	; 0x07
    b562:	23 30       	cpi	r18, 0x03	; 3
    b564:	08 f0       	brcs	.+2      	; 0xb568 <update_shot+0x28>
    b566:	a2 c0       	rjmp	.+324    	; 0xb6ac <update_shot+0x16c>
    b568:	16 2f       	mov	r17, r22
    b56a:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    b56c:	0e 94 8a 5a 	call	0xb514	; 0xb514 <find_shot_slot>
    b570:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    b572:	e8 2e       	mov	r14, r24
    b574:	f1 2c       	mov	r15, r1
    b576:	fe 01       	movw	r30, r28
    b578:	24 e1       	ldi	r18, 0x14	; 20
    b57a:	82 9f       	mul	r24, r18
    b57c:	e0 0d       	add	r30, r0
    b57e:	f1 1d       	adc	r31, r1
    b580:	11 24       	eor	r1, r1
    b582:	87 89       	ldd	r24, Z+23	; 0x17
    b584:	86 30       	cpi	r24, 0x06	; 6
    b586:	29 f4       	brne	.+10     	; 0xb592 <update_shot+0x52>
    b588:	8a 81       	ldd	r24, Y+2	; 0x02
    b58a:	9b 81       	ldd	r25, Y+3	; 0x03
    b58c:	04 97       	sbiw	r24, 0x04	; 4
    b58e:	08 f4       	brcc	.+2      	; 0xb592 <update_shot+0x52>
    b590:	8d c0       	rjmp	.+282    	; 0xb6ac <update_shot+0x16c>
		SFX_PLAYER_SHOOT;
    b592:	2f ef       	ldi	r18, 0xFF	; 255
    b594:	43 e2       	ldi	r20, 0x23	; 35
    b596:	63 e0       	ldi	r22, 0x03	; 3
    b598:	82 e0       	ldi	r24, 0x02	; 2
    b59a:	0e 94 2b 42 	call	0x8456	; 0x8456 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    b59e:	84 e1       	ldi	r24, 0x14	; 20
    b5a0:	8e 9d       	mul	r24, r14
    b5a2:	60 01       	movw	r12, r0
    b5a4:	8f 9d       	mul	r24, r15
    b5a6:	d0 0c       	add	r13, r0
    b5a8:	11 24       	eor	r1, r1
    b5aa:	c6 01       	movw	r24, r12
    b5ac:	4c 96       	adiw	r24, 0x1c	; 28
    b5ae:	8c 0f       	add	r24, r28
    b5b0:	9d 1f       	adc	r25, r29
    b5b2:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    b5b6:	40 e0       	ldi	r20, 0x00	; 0
    b5b8:	bc 01       	movw	r22, r24
    b5ba:	8b 2d       	mov	r24, r11
    b5bc:	81 0f       	add	r24, r17
    b5be:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		player->shot[idx].active = 1;
    b5c2:	8e 01       	movw	r16, r28
    b5c4:	0c 0d       	add	r16, r12
    b5c6:	1d 1d       	adc	r17, r13
    b5c8:	81 e0       	ldi	r24, 0x01	; 1
    b5ca:	f8 01       	movw	r30, r16
    b5cc:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    b5ce:	ca 80       	ldd	r12, Y+2	; 0x02
    b5d0:	db 80       	ldd	r13, Y+3	; 0x03
    b5d2:	f8 ef       	ldi	r31, 0xF8	; 248
    b5d4:	cf 22       	and	r12, r31
    b5d6:	f8 01       	movw	r30, r16
    b5d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    b5da:	c8 0e       	add	r12, r24
    b5dc:	d1 1c       	adc	r13, r1
    b5de:	87 fd       	sbrc	r24, 7
    b5e0:	da 94       	dec	r13
    b5e2:	d3 8a       	std	Z+19, r13	; 0x13
    b5e4:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    b5e6:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    b5ea:	28 81       	ld	r18, Y
    b5ec:	39 81       	ldd	r19, Y+1	; 0x01
    b5ee:	88 23       	and	r24, r24
    b5f0:	e1 f0       	breq	.+56     	; 0xb62a <update_shot+0xea>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    b5f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5f4:	f8 e0       	ldi	r31, 0x08	; 8
    b5f6:	8f 9f       	mul	r24, r31
    b5f8:	20 0d       	add	r18, r0
    b5fa:	31 1d       	adc	r19, r1
    b5fc:	11 24       	eor	r1, r1
    b5fe:	f8 01       	movw	r30, r16
    b600:	31 8b       	std	Z+17, r19	; 0x11
    b602:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b604:	82 8d       	ldd	r24, Z+26	; 0x1a
    b606:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    b608:	87 89       	ldd	r24, Z+23	; 0x17
    b60a:	86 30       	cpi	r24, 0x06	; 6
    b60c:	09 f0       	breq	.+2      	; 0xb610 <update_shot+0xd0>
    b60e:	4b c0       	rjmp	.+150    	; 0xb6a6 <update_shot+0x166>
    b610:	fe 01       	movw	r30, r28
    b612:	24 e1       	ldi	r18, 0x14	; 20
    b614:	b2 9e       	mul	r11, r18
    b616:	e0 0d       	add	r30, r0
    b618:	f1 1d       	adc	r31, r1
    b61a:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    b61c:	84 89       	ldd	r24, Z+20	; 0x14
    b61e:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    b620:	81 11       	cpse	r24, r1
    b622:	01 c0       	rjmp	.+2      	; 0xb626 <update_shot+0xe6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    b624:	8f e7       	ldi	r24, 0x7F	; 127
    b626:	84 8b       	std	Z+20, r24	; 0x14
    b628:	3e c0       	rjmp	.+124    	; 0xb6a6 <update_shot+0x166>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    b62a:	88 85       	ldd	r24, Y+8	; 0x08
    b62c:	82 fd       	sbrc	r24, 2
    b62e:	06 c0       	rjmp	.+12     	; 0xb63c <update_shot+0xfc>
			{
				player->shot[idx].shared.y += 8;
    b630:	88 e0       	ldi	r24, 0x08	; 8
    b632:	c8 0e       	add	r12, r24
    b634:	d1 1c       	adc	r13, r1
    b636:	f8 01       	movw	r30, r16
    b638:	d3 8a       	std	Z+19, r13	; 0x13
    b63a:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    b63c:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b63e:	94 e1       	ldi	r25, 0x14	; 20
    b640:	9e 9d       	mul	r25, r14
    b642:	f0 01       	movw	r30, r0
    b644:	9f 9d       	mul	r25, r15
    b646:	f0 0d       	add	r31, r0
    b648:	11 24       	eor	r1, r1
    b64a:	ec 0f       	add	r30, r28
    b64c:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    b64e:	81 30       	cpi	r24, 0x01	; 1
    b650:	a9 f4       	brne	.+42     	; 0xb67c <update_shot+0x13c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    b652:	20 5f       	subi	r18, 0xF0	; 240
    b654:	3f 4f       	sbci	r19, 0xFF	; 255
    b656:	31 8b       	std	Z+17, r19	; 0x11
    b658:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    b65a:	82 8d       	ldd	r24, Z+26	; 0x1a
    b65c:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b65e:	27 89       	ldd	r18, Z+23	; 0x17
    b660:	24 30       	cpi	r18, 0x04	; 4
    b662:	09 f5       	brne	.+66     	; 0xb6a6 <update_shot+0x166>
    b664:	ff ef       	ldi	r31, 0xFF	; 255
    b666:	ef 1a       	sub	r14, r31
    b668:	ff 0a       	sbc	r15, r31
    b66a:	9e 9d       	mul	r25, r14
    b66c:	f0 01       	movw	r30, r0
    b66e:	9f 9d       	mul	r25, r15
    b670:	f0 0d       	add	r31, r0
    b672:	11 24       	eor	r1, r1
    b674:	ec 0f       	add	r30, r28
    b676:	fd 1f       	adc	r31, r29
    b678:	81 95       	neg	r24
    b67a:	14 c0       	rjmp	.+40     	; 0xb6a4 <update_shot+0x164>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    b67c:	28 50       	subi	r18, 0x08	; 8
    b67e:	31 09       	sbc	r19, r1
    b680:	31 8b       	std	Z+17, r19	; 0x11
    b682:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    b684:	82 8d       	ldd	r24, Z+26	; 0x1a
    b686:	81 95       	neg	r24
    b688:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    b68a:	27 89       	ldd	r18, Z+23	; 0x17
    b68c:	24 30       	cpi	r18, 0x04	; 4
    b68e:	59 f4       	brne	.+22     	; 0xb6a6 <update_shot+0x166>
    b690:	2f ef       	ldi	r18, 0xFF	; 255
    b692:	e2 1a       	sub	r14, r18
    b694:	f2 0a       	sbc	r15, r18
    b696:	9e 9d       	mul	r25, r14
    b698:	f0 01       	movw	r30, r0
    b69a:	9f 9d       	mul	r25, r15
    b69c:	f0 0d       	add	r31, r0
    b69e:	11 24       	eor	r1, r1
    b6a0:	ec 0f       	add	r30, r28
    b6a2:	fd 1f       	adc	r31, r29
    b6a4:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    b6a6:	8f 81       	ldd	r24, Y+7	; 0x07
    b6a8:	8f 5f       	subi	r24, 0xFF	; 255
    b6aa:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    b6ac:	df 91       	pop	r29
    b6ae:	cf 91       	pop	r28
    b6b0:	1f 91       	pop	r17
    b6b2:	0f 91       	pop	r16
    b6b4:	ff 90       	pop	r15
    b6b6:	ef 90       	pop	r14
    b6b8:	df 90       	pop	r13
    b6ba:	cf 90       	pop	r12
    b6bc:	bf 90       	pop	r11
    b6be:	08 95       	ret

0000b6c0 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    b6c0:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    b6c2:	40 81       	ld	r20, Z
    b6c4:	51 81       	ldd	r21, Z+1	; 0x01
    b6c6:	20 91 b6 0d 	lds	r18, 0x0DB6
    b6ca:	30 91 b7 0d 	lds	r19, 0x0DB7
    b6ce:	42 17       	cp	r20, r18
    b6d0:	53 07       	cpc	r21, r19
    b6d2:	08 f1       	brcs	.+66     	; 0xb716 <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    b6d4:	48 5f       	subi	r20, 0xF8	; 248
    b6d6:	5f 4f       	sbci	r21, 0xFF	; 255
    b6d8:	20 52       	subi	r18, 0x20	; 32
    b6da:	3f 4f       	sbci	r19, 0xFF	; 255
    b6dc:	24 17       	cp	r18, r20
    b6de:	35 07       	cpc	r19, r21
    b6e0:	d0 f0       	brcs	.+52     	; 0xb716 <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    b6e2:	42 81       	ldd	r20, Z+2	; 0x02
    b6e4:	53 81       	ldd	r21, Z+3	; 0x03
    b6e6:	20 91 be 0d 	lds	r18, 0x0DBE
    b6ea:	30 e0       	ldi	r19, 0x00	; 0
    b6ec:	42 17       	cp	r20, r18
    b6ee:	53 07       	cpc	r21, r19
    b6f0:	90 f0       	brcs	.+36     	; 0xb716 <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    b6f2:	c9 01       	movw	r24, r18
    b6f4:	01 96       	adiw	r24, 0x01	; 1
    b6f6:	48 17       	cp	r20, r24
    b6f8:	59 07       	cpc	r21, r25
    b6fa:	18 f4       	brcc	.+6      	; 0xb702 <out_of_bounds+0x42>
    b6fc:	84 81       	ldd	r24, Z+4	; 0x04
    b6fe:	81 11       	cpse	r24, r1
    b700:	0a c0       	rjmp	.+20     	; 0xb716 <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    b702:	48 5f       	subi	r20, 0xF8	; 248
    b704:	5f 4f       	sbci	r21, 0xFF	; 255
    b706:	28 53       	subi	r18, 0x38	; 56
    b708:	3f 4f       	sbci	r19, 0xFF	; 255
    b70a:	81 e0       	ldi	r24, 0x01	; 1
    b70c:	24 17       	cp	r18, r20
    b70e:	35 07       	cpc	r19, r21
    b710:	18 f0       	brcs	.+6      	; 0xb718 <out_of_bounds+0x58>
    b712:	80 e0       	ldi	r24, 0x00	; 0
    b714:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    b716:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    b718:	08 95       	ret

0000b71a <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    b71a:	40 91 d1 0d 	lds	r20, 0x0DD1
    b71e:	80 e0       	ldi	r24, 0x00	; 0
    b720:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    b722:	50 e1       	ldi	r21, 0x10	; 16
    b724:	9c 01       	movw	r18, r24
    b726:	2a 54       	subi	r18, 0x4A	; 74
    b728:	32 4f       	sbci	r19, 0xF2	; 242
    b72a:	d9 01       	movw	r26, r18
    b72c:	a0 5e       	subi	r26, 0xE0	; 224
    b72e:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    b730:	6c 91       	ld	r22, X
    b732:	66 23       	and	r22, r22
    b734:	31 f0       	breq	.+12     	; 0xb742 <explode_all_enemies+0x28>
    b736:	f9 01       	movw	r30, r18
    b738:	ef 5d       	subi	r30, 0xDF	; 223
    b73a:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    b73c:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    b73e:	1c 92       	st	X, r1
			game.active_enemies--;
    b740:	41 50       	subi	r20, 0x01	; 1
    b742:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    b744:	89 30       	cpi	r24, 0x09	; 9
    b746:	21 e0       	ldi	r18, 0x01	; 1
    b748:	92 07       	cpc	r25, r18
    b74a:	61 f7       	brne	.-40     	; 0xb724 <explode_all_enemies+0xa>
    b74c:	40 93 d1 0d 	sts	0x0DD1, r20
    b750:	08 95       	ret

0000b752 <handle_music_toggle>:
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    b752:	fc 01       	movw	r30, r24
    b754:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    b756:	82 ff       	sbrs	r24, 2
    b758:	07 c0       	rjmp	.+14     	; 0xb768 <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    b75a:	0e 94 8d 44 	call	0x891a	; 0x891a <IsSongPlaying>
    b75e:	81 11       	cpse	r24, r1
		{
			StopSong();
    b760:	0c 94 1d 41 	jmp	0x823a	; 0x823a <StopSong>
		}
		else
		{
			ResumeSong();
    b764:	0c 94 2b 41 	jmp	0x8256	; 0x8256 <ResumeSong>
    b768:	08 95       	ret

0000b76a <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    b76a:	0f 93       	push	r16
    b76c:	1f 93       	push	r17
    b76e:	cf 93       	push	r28
    b770:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    b772:	20 91 cf 0d 	lds	r18, 0x0DCF
    b776:	22 30       	cpi	r18, 0x02	; 2
    b778:	b9 f5       	brne	.+110    	; 0xb7e8 <handle_demo_play+0x7e>
    b77a:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    b77c:	8c 01       	movw	r16, r24
    b77e:	0c 58       	subi	r16, 0x8C	; 140
    b780:	1f 4f       	sbci	r17, 0xFF	; 255
    b782:	f8 01       	movw	r30, r16
    b784:	11 82       	std	Z+1, r1	; 0x01
    b786:	10 82       	st	Z, r1
		if (is_space())
    b788:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    b78c:	88 23       	and	r24, r24
    b78e:	69 f0       	breq	.+26     	; 0xb7aa <handle_demo_play+0x40>
		{
			if (game.time < 2)
    b790:	80 91 bc 0d 	lds	r24, 0x0DBC
    b794:	90 91 bd 0d 	lds	r25, 0x0DBD
    b798:	02 97       	sbiw	r24, 0x02	; 2
    b79a:	d0 f4       	brcc	.+52     	; 0xb7d0 <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    b79c:	c8 58       	subi	r28, 0x88	; 136
    b79e:	df 4f       	sbci	r29, 0xFF	; 255
    b7a0:	80 e1       	ldi	r24, 0x10	; 16
    b7a2:	90 e0       	ldi	r25, 0x00	; 0
    b7a4:	99 83       	std	Y+1, r25	; 0x01
    b7a6:	88 83       	st	Y, r24
    b7a8:	13 c0       	rjmp	.+38     	; 0xb7d0 <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    b7aa:	80 e8       	ldi	r24, 0x80	; 128
    b7ac:	90 e0       	ldi	r25, 0x00	; 0
    b7ae:	fe 01       	movw	r30, r28
    b7b0:	e8 58       	subi	r30, 0x88	; 136
    b7b2:	ff 4f       	sbci	r31, 0xFF	; 255
    b7b4:	91 83       	std	Z+1, r25	; 0x01
    b7b6:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    b7b8:	8d 81       	ldd	r24, Y+5	; 0x05
    b7ba:	81 11       	cpse	r24, r1
    b7bc:	09 c0       	rjmp	.+18     	; 0xb7d0 <handle_demo_play+0x66>
    b7be:	88 81       	ld	r24, Y
    b7c0:	99 81       	ldd	r25, Y+1	; 0x01
    b7c2:	89 97       	sbiw	r24, 0x29	; 41
    b7c4:	28 f0       	brcs	.+10     	; 0xb7d0 <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    b7c6:	80 e0       	ldi	r24, 0x00	; 0
    b7c8:	91 e0       	ldi	r25, 0x01	; 1
    b7ca:	f8 01       	movw	r30, r16
    b7cc:	91 83       	std	Z+1, r25	; 0x01
    b7ce:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    b7d0:	80 91 d0 0d 	lds	r24, 0x0DD0
    b7d4:	6f e0       	ldi	r22, 0x0F	; 15
    b7d6:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    b7da:	91 11       	cpse	r25, r1
    b7dc:	05 c0       	rjmp	.+10     	; 0xb7e8 <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    b7de:	81 e0       	ldi	r24, 0x01	; 1
    b7e0:	90 e0       	ldi	r25, 0x00	; 0
    b7e2:	f8 01       	movw	r30, r16
    b7e4:	91 83       	std	Z+1, r25	; 0x01
    b7e6:	80 83       	st	Z, r24
		}
	}
}
    b7e8:	df 91       	pop	r29
    b7ea:	cf 91       	pop	r28
    b7ec:	1f 91       	pop	r17
    b7ee:	0f 91       	pop	r16
    b7f0:	08 95       	ret

0000b7f2 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    b7f2:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    b7f4:	86 17       	cp	r24, r22
    b7f6:	10 f4       	brcc	.+4      	; 0xb7fc <pixel_overlap+0xa>
    b7f8:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    b7fa:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    b7fc:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    b7fe:	26 0f       	add	r18, r22
	if (s2 < s1)
    b800:	28 17       	cp	r18, r24
    b802:	10 f4       	brcc	.+4      	; 0xb808 <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    b804:	28 1b       	sub	r18, r24
    b806:	92 0f       	add	r25, r18
	}
	return result;
}
    b808:	89 2f       	mov	r24, r25
    b80a:	08 95       	ret

0000b80c <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    b80c:	2f 92       	push	r2
    b80e:	3f 92       	push	r3
    b810:	4f 92       	push	r4
    b812:	5f 92       	push	r5
    b814:	6f 92       	push	r6
    b816:	7f 92       	push	r7
    b818:	8f 92       	push	r8
    b81a:	9f 92       	push	r9
    b81c:	af 92       	push	r10
    b81e:	bf 92       	push	r11
    b820:	cf 92       	push	r12
    b822:	df 92       	push	r13
    b824:	ef 92       	push	r14
    b826:	ff 92       	push	r15
    b828:	0f 93       	push	r16
    b82a:	1f 93       	push	r17
    b82c:	cf 93       	push	r28
    b82e:	df 93       	push	r29
    b830:	00 d0       	rcall	.+0      	; 0xb832 <collision_detect_level+0x26>
    b832:	00 d0       	rcall	.+0      	; 0xb834 <collision_detect_level+0x28>
    b834:	00 d0       	rcall	.+0      	; 0xb836 <collision_detect_level+0x2a>
    b836:	cd b7       	in	r28, 0x3d	; 61
    b838:	de b7       	in	r29, 0x3e	; 62
    b83a:	9e 83       	std	Y+6, r25	; 0x06
    b83c:	8d 83       	std	Y+5, r24	; 0x05
    b83e:	56 2e       	mov	r5, r22
    b840:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    b842:	fc 01       	movw	r30, r24
    b844:	a0 80       	ld	r10, Z
    b846:	b1 80       	ldd	r11, Z+1	; 0x01
    b848:	75 01       	movw	r14, r10
    b84a:	13 e0       	ldi	r17, 0x03	; 3
    b84c:	f6 94       	lsr	r15
    b84e:	e7 94       	ror	r14
    b850:	1a 95       	dec	r17
    b852:	e1 f7       	brne	.-8      	; 0xb84c <collision_detect_level+0x40>
    b854:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    b856:	c2 80       	ldd	r12, Z+2	; 0x02
    b858:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    b85a:	84 81       	ldd	r24, Z+4	; 0x04
    b85c:	88 23       	and	r24, r24
    b85e:	09 f4       	brne	.+2      	; 0xb862 <collision_detect_level+0x56>
    b860:	e1 c0       	rjmp	.+450    	; 0xba24 <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    b862:	e3 e0       	ldi	r30, 0x03	; 3
    b864:	d6 94       	lsr	r13
    b866:	c7 94       	ror	r12
    b868:	ea 95       	dec	r30
    b86a:	e1 f7       	brne	.-8      	; 0xb864 <collision_detect_level+0x58>
    b86c:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    b86e:	f7 e0       	ldi	r31, 0x07	; 7
    b870:	af 0e       	add	r10, r31
    b872:	b1 1c       	adc	r11, r1
    b874:	f3 e0       	ldi	r31, 0x03	; 3
    b876:	b6 94       	lsr	r11
    b878:	a7 94       	ror	r10
    b87a:	fa 95       	dec	r31
    b87c:	e1 f7       	brne	.-8      	; 0xb876 <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b87e:	8e 2d       	mov	r24, r14
    b880:	88 0f       	add	r24, r24
    b882:	88 0f       	add	r24, r24
    b884:	88 0f       	add	r24, r24
    b886:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b888:	2a 2c       	mov	r2, r10
    b88a:	22 0c       	add	r2, r2
    b88c:	22 0c       	add	r2, r2
    b88e:	22 0c       	add	r2, r2
    b890:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    b892:	46 01       	movw	r8, r12
    b894:	9f ef       	ldi	r25, 0xFF	; 255
    b896:	89 1a       	sub	r8, r25
    b898:	99 0a       	sbc	r9, r25
    b89a:	a3 e0       	ldi	r26, 0x03	; 3
    b89c:	88 0c       	add	r8, r8
    b89e:	99 1c       	adc	r9, r9
    b8a0:	aa 95       	dec	r26
    b8a2:	e1 f7       	brne	.-8      	; 0xb89c <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b8a4:	e8 e0       	ldi	r30, 0x08	; 8
    b8a6:	4e 9f       	mul	r20, r30
    b8a8:	30 01       	movw	r6, r0
    b8aa:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    b8ac:	b3 e0       	ldi	r27, 0x03	; 3
    b8ae:	cc 0c       	add	r12, r12
    b8b0:	dd 1c       	adc	r13, r13
    b8b2:	ba 95       	dec	r27
    b8b4:	e1 f7       	brne	.-8      	; 0xb8ae <collision_detect_level+0xa2>
    b8b6:	41 2c       	mov	r4, r1
    b8b8:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    b8ba:	45 14       	cp	r4, r5
    b8bc:	09 f4       	brne	.+2      	; 0xb8c0 <collision_detect_level+0xb4>
    b8be:	b3 c0       	rjmp	.+358    	; 0xba26 <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    b8c0:	ed 81       	ldd	r30, Y+5	; 0x05
    b8c2:	fe 81       	ldd	r31, Y+6	; 0x06
    b8c4:	84 81       	ldd	r24, Z+4	; 0x04
    b8c6:	87 ff       	sbrs	r24, 7
    b8c8:	47 c0       	rjmp	.+142    	; 0xb958 <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    b8ca:	49 81       	ldd	r20, Y+1	; 0x01
    b8cc:	64 2d       	mov	r22, r4
    b8ce:	6e 0d       	add	r22, r14
    b8d0:	80 91 d8 0f 	lds	r24, 0x0FD8
    b8d4:	90 91 d9 0f 	lds	r25, 0x0FD9
    b8d8:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b8dc:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    b8de:	49 81       	ldd	r20, Y+1	; 0x01
    b8e0:	64 2d       	mov	r22, r4
    b8e2:	6a 0d       	add	r22, r10
    b8e4:	80 91 d8 0f 	lds	r24, 0x0FD8
    b8e8:	90 91 d9 0f 	lds	r25, 0x0FD9
    b8ec:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b8f0:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b8f2:	83 2d       	mov	r24, r3
    b8f4:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    b8f8:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b8fa:	80 2f       	mov	r24, r16
    b8fc:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    b900:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    b902:	33 20       	and	r3, r3
    b904:	71 f0       	breq	.+28     	; 0xb922 <collision_detect_level+0x116>
    b906:	30 91 b6 0d 	lds	r19, 0x0DB6
    b90a:	6b 81       	ldd	r22, Y+3	; 0x03
    b90c:	63 1b       	sub	r22, r19
    b90e:	ed 81       	ldd	r30, Y+5	; 0x05
    b910:	fe 81       	ldd	r31, Y+6	; 0x06
    b912:	80 81       	ld	r24, Z
    b914:	28 e0       	ldi	r18, 0x08	; 8
    b916:	48 e0       	ldi	r20, 0x08	; 8
    b918:	83 1b       	sub	r24, r19
    b91a:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    b91e:	84 30       	cpi	r24, 0x04	; 4
    b920:	80 f4       	brcc	.+32     	; 0xb942 <collision_detect_level+0x136>
    b922:	00 23       	and	r16, r16
    b924:	c9 f0       	breq	.+50     	; 0xb958 <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b926:	30 91 b6 0d 	lds	r19, 0x0DB6
    b92a:	62 2d       	mov	r22, r2
    b92c:	63 1b       	sub	r22, r19
    b92e:	ed 81       	ldd	r30, Y+5	; 0x05
    b930:	fe 81       	ldd	r31, Y+6	; 0x06
    b932:	80 81       	ld	r24, Z
    b934:	28 e0       	ldi	r18, 0x08	; 8
    b936:	48 e0       	ldi	r20, 0x08	; 8
    b938:	83 1b       	sub	r24, r19
    b93a:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    b93e:	84 30       	cpi	r24, 0x04	; 4
    b940:	58 f0       	brcs	.+22     	; 0xb958 <collision_detect_level+0x14c>
				{
					s->vy =  0;
    b942:	ed 81       	ldd	r30, Y+5	; 0x05
    b944:	fe 81       	ldd	r31, Y+6	; 0x06
    b946:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    b948:	93 82       	std	Z+3, r9	; 0x03
    b94a:	82 82       	std	Z+2, r8	; 0x02
    b94c:	30 16       	cp	r3, r16
    b94e:	08 f4       	brcc	.+2      	; 0xb952 <collision_detect_level+0x146>
    b950:	30 2e       	mov	r3, r16
    b952:	13 15       	cp	r17, r3
    b954:	08 f4       	brcc	.+2      	; 0xb958 <collision_detect_level+0x14c>
    b956:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    b958:	ed 81       	ldd	r30, Y+5	; 0x05
    b95a:	fe 81       	ldd	r31, Y+6	; 0x06
    b95c:	84 81       	ldd	r24, Z+4	; 0x04
    b95e:	18 16       	cp	r1, r24
    b960:	0c f0       	brlt	.+2      	; 0xb964 <collision_detect_level+0x158>
    b962:	5e c0       	rjmp	.+188    	; 0xba20 <collision_detect_level+0x214>
    b964:	42 81       	ldd	r20, Z+2	; 0x02
    b966:	53 81       	ldd	r21, Z+3	; 0x03
    b968:	41 50       	subi	r20, 0x01	; 1
    b96a:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    b96c:	46 0d       	add	r20, r6
    b96e:	57 1d       	adc	r21, r7
    b970:	63 e0       	ldi	r22, 0x03	; 3
    b972:	56 95       	lsr	r21
    b974:	47 95       	ror	r20
    b976:	6a 95       	dec	r22
    b978:	e1 f7       	brne	.-8      	; 0xb972 <collision_detect_level+0x166>
    b97a:	64 2d       	mov	r22, r4
    b97c:	6e 0d       	add	r22, r14
    b97e:	80 91 d8 0f 	lds	r24, 0x0FD8
    b982:	90 91 d9 0f 	lds	r25, 0x0FD9
    b986:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b98a:	38 2e       	mov	r3, r24
    b98c:	ed 81       	ldd	r30, Y+5	; 0x05
    b98e:	fe 81       	ldd	r31, Y+6	; 0x06
    b990:	42 81       	ldd	r20, Z+2	; 0x02
    b992:	53 81       	ldd	r21, Z+3	; 0x03
    b994:	41 50       	subi	r20, 0x01	; 1
    b996:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    b998:	46 0d       	add	r20, r6
    b99a:	57 1d       	adc	r21, r7
    b99c:	73 e0       	ldi	r23, 0x03	; 3
    b99e:	56 95       	lsr	r21
    b9a0:	47 95       	ror	r20
    b9a2:	7a 95       	dec	r23
    b9a4:	e1 f7       	brne	.-8      	; 0xb99e <collision_detect_level+0x192>
    b9a6:	64 2d       	mov	r22, r4
    b9a8:	6a 0d       	add	r22, r10
    b9aa:	80 91 d8 0f 	lds	r24, 0x0FD8
    b9ae:	90 91 d9 0f 	lds	r25, 0x0FD9
    b9b2:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    b9b6:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    b9b8:	83 2d       	mov	r24, r3
    b9ba:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    b9be:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    b9c0:	80 2f       	mov	r24, r16
    b9c2:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    b9c6:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    b9c8:	33 20       	and	r3, r3
    b9ca:	71 f0       	breq	.+28     	; 0xb9e8 <collision_detect_level+0x1dc>
    b9cc:	30 91 b6 0d 	lds	r19, 0x0DB6
    b9d0:	6b 81       	ldd	r22, Y+3	; 0x03
    b9d2:	63 1b       	sub	r22, r19
    b9d4:	ed 81       	ldd	r30, Y+5	; 0x05
    b9d6:	fe 81       	ldd	r31, Y+6	; 0x06
    b9d8:	80 81       	ld	r24, Z
    b9da:	28 e0       	ldi	r18, 0x08	; 8
    b9dc:	48 e0       	ldi	r20, 0x08	; 8
    b9de:	83 1b       	sub	r24, r19
    b9e0:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    b9e4:	84 30       	cpi	r24, 0x04	; 4
    b9e6:	80 f4       	brcc	.+32     	; 0xba08 <collision_detect_level+0x1fc>
    b9e8:	00 23       	and	r16, r16
    b9ea:	d1 f0       	breq	.+52     	; 0xba20 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    b9ec:	30 91 b6 0d 	lds	r19, 0x0DB6
    b9f0:	62 2d       	mov	r22, r2
    b9f2:	63 1b       	sub	r22, r19
    b9f4:	ed 81       	ldd	r30, Y+5	; 0x05
    b9f6:	fe 81       	ldd	r31, Y+6	; 0x06
    b9f8:	80 81       	ld	r24, Z
    b9fa:	28 e0       	ldi	r18, 0x08	; 8
    b9fc:	48 e0       	ldi	r20, 0x08	; 8
    b9fe:	83 1b       	sub	r24, r19
    ba00:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    ba04:	84 30       	cpi	r24, 0x04	; 4
    ba06:	60 f0       	brcs	.+24     	; 0xba20 <collision_detect_level+0x214>
				{
					s->vy =  0;
    ba08:	ed 81       	ldd	r30, Y+5	; 0x05
    ba0a:	fe 81       	ldd	r31, Y+6	; 0x06
    ba0c:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    ba0e:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    ba10:	d3 82       	std	Z+3, r13	; 0x03
    ba12:	c2 82       	std	Z+2, r12	; 0x02
    ba14:	30 16       	cp	r3, r16
    ba16:	08 f4       	brcc	.+2      	; 0xba1a <collision_detect_level+0x20e>
    ba18:	30 2e       	mov	r3, r16
    ba1a:	13 15       	cp	r17, r3
    ba1c:	08 f4       	brcc	.+2      	; 0xba20 <collision_detect_level+0x214>
    ba1e:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    ba20:	43 94       	inc	r4
    ba22:	4b cf       	rjmp	.-362    	; 0xb8ba <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    ba24:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    ba26:	ed 81       	ldd	r30, Y+5	; 0x05
    ba28:	fe 81       	ldd	r31, Y+6	; 0x06
    ba2a:	85 81       	ldd	r24, Z+5	; 0x05
    ba2c:	88 23       	and	r24, r24
    ba2e:	09 f4       	brne	.+2      	; 0xba32 <collision_detect_level+0x226>
    ba30:	e1 c0       	rjmp	.+450    	; 0xbbf4 <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    ba32:	c2 80       	ldd	r12, Z+2	; 0x02
    ba34:	d3 80       	ldd	r13, Z+3	; 0x03
    ba36:	56 01       	movw	r10, r12
    ba38:	23 e0       	ldi	r18, 0x03	; 3
    ba3a:	b6 94       	lsr	r11
    ba3c:	a7 94       	ror	r10
    ba3e:	2a 95       	dec	r18
    ba40:	e1 f7       	brne	.-8      	; 0xba3a <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    ba42:	f7 e0       	ldi	r31, 0x07	; 7
    ba44:	cf 0e       	add	r12, r31
    ba46:	d1 1c       	adc	r13, r1
    ba48:	33 e0       	ldi	r19, 0x03	; 3
    ba4a:	d6 94       	lsr	r13
    ba4c:	c7 94       	ror	r12
    ba4e:	3a 95       	dec	r19
    ba50:	e1 f7       	brne	.-8      	; 0xba4a <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    ba52:	3a 2c       	mov	r3, r10
    ba54:	33 0c       	add	r3, r3
    ba56:	33 0c       	add	r3, r3
    ba58:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    ba5a:	4c 2c       	mov	r4, r12
    ba5c:	44 0c       	add	r4, r4
    ba5e:	44 0c       	add	r4, r4
    ba60:	44 0c       	add	r4, r4
    ba62:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    ba64:	37 01       	movw	r6, r14
    ba66:	8f ef       	ldi	r24, 0xFF	; 255
    ba68:	68 1a       	sub	r6, r24
    ba6a:	78 0a       	sbc	r7, r24
    ba6c:	43 e0       	ldi	r20, 0x03	; 3
    ba6e:	66 0c       	add	r6, r6
    ba70:	77 1c       	adc	r7, r7
    ba72:	4a 95       	dec	r20
    ba74:	e1 f7       	brne	.-8      	; 0xba6e <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    ba76:	98 e0       	ldi	r25, 0x08	; 8
    ba78:	59 9e       	mul	r5, r25
    ba7a:	40 01       	movw	r8, r0
    ba7c:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    ba7e:	53 e0       	ldi	r21, 0x03	; 3
    ba80:	ee 0c       	add	r14, r14
    ba82:	ff 1c       	adc	r15, r15
    ba84:	5a 95       	dec	r21
    ba86:	e1 f7       	brne	.-8      	; 0xba80 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    ba88:	51 2c       	mov	r5, r1
    ba8a:	fc 81       	ldd	r31, Y+4	; 0x04
    ba8c:	5f 16       	cp	r5, r31
    ba8e:	09 f4       	brne	.+2      	; 0xba92 <collision_detect_level+0x286>
    ba90:	b1 c0       	rjmp	.+354    	; 0xbbf4 <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    ba92:	ed 81       	ldd	r30, Y+5	; 0x05
    ba94:	fe 81       	ldd	r31, Y+6	; 0x06
    ba96:	85 81       	ldd	r24, Z+5	; 0x05
    ba98:	87 ff       	sbrs	r24, 7
    ba9a:	47 c0       	rjmp	.+142    	; 0xbb2a <collision_detect_level+0x31e>
    ba9c:	45 2d       	mov	r20, r5
    ba9e:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    baa0:	6a 81       	ldd	r22, Y+2	; 0x02
    baa2:	80 91 d8 0f 	lds	r24, 0x0FD8
    baa6:	90 91 d9 0f 	lds	r25, 0x0FD9
    baaa:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    baae:	28 2e       	mov	r2, r24
    bab0:	45 2d       	mov	r20, r5
    bab2:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    bab4:	6a 81       	ldd	r22, Y+2	; 0x02
    bab6:	80 91 d8 0f 	lds	r24, 0x0FD8
    baba:	90 91 d9 0f 	lds	r25, 0x0FD9
    babe:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    bac2:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bac4:	82 2d       	mov	r24, r2
    bac6:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    baca:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bacc:	80 2f       	mov	r24, r16
    bace:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    bad2:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bad4:	22 20       	and	r2, r2
    bad6:	71 f0       	breq	.+28     	; 0xbaf4 <collision_detect_level+0x2e8>
    bad8:	30 91 be 0d 	lds	r19, 0x0DBE
    badc:	63 2d       	mov	r22, r3
    bade:	63 1b       	sub	r22, r19
    bae0:	ed 81       	ldd	r30, Y+5	; 0x05
    bae2:	fe 81       	ldd	r31, Y+6	; 0x06
    bae4:	82 81       	ldd	r24, Z+2	; 0x02
    bae6:	28 e0       	ldi	r18, 0x08	; 8
    bae8:	48 e0       	ldi	r20, 0x08	; 8
    baea:	83 1b       	sub	r24, r19
    baec:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    baf0:	84 30       	cpi	r24, 0x04	; 4
    baf2:	80 f4       	brcc	.+32     	; 0xbb14 <collision_detect_level+0x308>
    baf4:	00 23       	and	r16, r16
    baf6:	c9 f0       	breq	.+50     	; 0xbb2a <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    baf8:	30 91 be 0d 	lds	r19, 0x0DBE
    bafc:	64 2d       	mov	r22, r4
    bafe:	63 1b       	sub	r22, r19
    bb00:	ed 81       	ldd	r30, Y+5	; 0x05
    bb02:	fe 81       	ldd	r31, Y+6	; 0x06
    bb04:	82 81       	ldd	r24, Z+2	; 0x02
    bb06:	28 e0       	ldi	r18, 0x08	; 8
    bb08:	48 e0       	ldi	r20, 0x08	; 8
    bb0a:	83 1b       	sub	r24, r19
    bb0c:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    bb10:	84 30       	cpi	r24, 0x04	; 4
    bb12:	58 f0       	brcs	.+22     	; 0xbb2a <collision_detect_level+0x31e>
				{
					s->vx =  0;
    bb14:	ed 81       	ldd	r30, Y+5	; 0x05
    bb16:	fe 81       	ldd	r31, Y+6	; 0x06
    bb18:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    bb1a:	71 82       	std	Z+1, r7	; 0x01
    bb1c:	60 82       	st	Z, r6
    bb1e:	20 16       	cp	r2, r16
    bb20:	08 f4       	brcc	.+2      	; 0xbb24 <collision_detect_level+0x318>
    bb22:	20 2e       	mov	r2, r16
    bb24:	12 15       	cp	r17, r2
    bb26:	08 f4       	brcc	.+2      	; 0xbb2a <collision_detect_level+0x31e>
    bb28:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    bb2a:	ed 81       	ldd	r30, Y+5	; 0x05
    bb2c:	fe 81       	ldd	r31, Y+6	; 0x06
    bb2e:	85 81       	ldd	r24, Z+5	; 0x05
    bb30:	18 16       	cp	r1, r24
    bb32:	0c f0       	brlt	.+2      	; 0xbb36 <collision_detect_level+0x32a>
    bb34:	5d c0       	rjmp	.+186    	; 0xbbf0 <collision_detect_level+0x3e4>
    bb36:	60 81       	ld	r22, Z
    bb38:	71 81       	ldd	r23, Z+1	; 0x01
    bb3a:	61 50       	subi	r22, 0x01	; 1
    bb3c:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    bb3e:	68 0d       	add	r22, r8
    bb40:	79 1d       	adc	r23, r9
    bb42:	83 e0       	ldi	r24, 0x03	; 3
    bb44:	76 95       	lsr	r23
    bb46:	67 95       	ror	r22
    bb48:	8a 95       	dec	r24
    bb4a:	e1 f7       	brne	.-8      	; 0xbb44 <collision_detect_level+0x338>
    bb4c:	45 2d       	mov	r20, r5
    bb4e:	4a 0d       	add	r20, r10
    bb50:	80 91 d8 0f 	lds	r24, 0x0FD8
    bb54:	90 91 d9 0f 	lds	r25, 0x0FD9
    bb58:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    bb5c:	28 2e       	mov	r2, r24
    bb5e:	ed 81       	ldd	r30, Y+5	; 0x05
    bb60:	fe 81       	ldd	r31, Y+6	; 0x06
    bb62:	60 81       	ld	r22, Z
    bb64:	71 81       	ldd	r23, Z+1	; 0x01
    bb66:	61 50       	subi	r22, 0x01	; 1
    bb68:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    bb6a:	68 0d       	add	r22, r8
    bb6c:	79 1d       	adc	r23, r9
    bb6e:	93 e0       	ldi	r25, 0x03	; 3
    bb70:	76 95       	lsr	r23
    bb72:	67 95       	ror	r22
    bb74:	9a 95       	dec	r25
    bb76:	e1 f7       	brne	.-8      	; 0xbb70 <collision_detect_level+0x364>
    bb78:	45 2d       	mov	r20, r5
    bb7a:	4c 0d       	add	r20, r12
    bb7c:	80 91 d8 0f 	lds	r24, 0x0FD8
    bb80:	90 91 d9 0f 	lds	r25, 0x0FD9
    bb84:	0e 94 de 57 	call	0xafbc	; 0xafbc <get_level_tile>
    bb88:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    bb8a:	82 2d       	mov	r24, r2
    bb8c:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    bb90:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    bb92:	80 2f       	mov	r24, r16
    bb94:	0e 94 fb 58 	call	0xb1f6	; 0xb1f6 <solid_or_hazard_tile>
    bb98:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    bb9a:	22 20       	and	r2, r2
    bb9c:	71 f0       	breq	.+28     	; 0xbbba <collision_detect_level+0x3ae>
    bb9e:	30 91 be 0d 	lds	r19, 0x0DBE
    bba2:	63 2d       	mov	r22, r3
    bba4:	63 1b       	sub	r22, r19
    bba6:	ed 81       	ldd	r30, Y+5	; 0x05
    bba8:	fe 81       	ldd	r31, Y+6	; 0x06
    bbaa:	82 81       	ldd	r24, Z+2	; 0x02
    bbac:	28 e0       	ldi	r18, 0x08	; 8
    bbae:	48 e0       	ldi	r20, 0x08	; 8
    bbb0:	83 1b       	sub	r24, r19
    bbb2:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    bbb6:	84 30       	cpi	r24, 0x04	; 4
    bbb8:	80 f4       	brcc	.+32     	; 0xbbda <collision_detect_level+0x3ce>
    bbba:	00 23       	and	r16, r16
    bbbc:	c9 f0       	breq	.+50     	; 0xbbf0 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    bbbe:	30 91 be 0d 	lds	r19, 0x0DBE
    bbc2:	64 2d       	mov	r22, r4
    bbc4:	63 1b       	sub	r22, r19
    bbc6:	ed 81       	ldd	r30, Y+5	; 0x05
    bbc8:	fe 81       	ldd	r31, Y+6	; 0x06
    bbca:	82 81       	ldd	r24, Z+2	; 0x02
    bbcc:	28 e0       	ldi	r18, 0x08	; 8
    bbce:	48 e0       	ldi	r20, 0x08	; 8
    bbd0:	83 1b       	sub	r24, r19
    bbd2:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <pixel_overlap>
    bbd6:	84 30       	cpi	r24, 0x04	; 4
    bbd8:	58 f0       	brcs	.+22     	; 0xbbf0 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    bbda:	ed 81       	ldd	r30, Y+5	; 0x05
    bbdc:	fe 81       	ldd	r31, Y+6	; 0x06
    bbde:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    bbe0:	f1 82       	std	Z+1, r15	; 0x01
    bbe2:	e0 82       	st	Z, r14
    bbe4:	20 16       	cp	r2, r16
    bbe6:	08 f4       	brcc	.+2      	; 0xbbea <collision_detect_level+0x3de>
    bbe8:	20 2e       	mov	r2, r16
    bbea:	12 15       	cp	r17, r2
    bbec:	08 f4       	brcc	.+2      	; 0xbbf0 <collision_detect_level+0x3e4>
    bbee:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    bbf0:	53 94       	inc	r5
    bbf2:	4b cf       	rjmp	.-362    	; 0xba8a <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    bbf4:	81 2f       	mov	r24, r17
    bbf6:	26 96       	adiw	r28, 0x06	; 6
    bbf8:	0f b6       	in	r0, 0x3f	; 63
    bbfa:	f8 94       	cli
    bbfc:	de bf       	out	0x3e, r29	; 62
    bbfe:	0f be       	out	0x3f, r0	; 63
    bc00:	cd bf       	out	0x3d, r28	; 61
    bc02:	df 91       	pop	r29
    bc04:	cf 91       	pop	r28
    bc06:	1f 91       	pop	r17
    bc08:	0f 91       	pop	r16
    bc0a:	ff 90       	pop	r15
    bc0c:	ef 90       	pop	r14
    bc0e:	df 90       	pop	r13
    bc10:	cf 90       	pop	r12
    bc12:	bf 90       	pop	r11
    bc14:	af 90       	pop	r10
    bc16:	9f 90       	pop	r9
    bc18:	8f 90       	pop	r8
    bc1a:	7f 90       	pop	r7
    bc1c:	6f 90       	pop	r6
    bc1e:	5f 90       	pop	r5
    bc20:	4f 90       	pop	r4
    bc22:	3f 90       	pop	r3
    bc24:	2f 90       	pop	r2
    bc26:	08 95       	ret

0000bc28 <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    bc28:	2f 92       	push	r2
    bc2a:	3f 92       	push	r3
    bc2c:	4f 92       	push	r4
    bc2e:	5f 92       	push	r5
    bc30:	6f 92       	push	r6
    bc32:	7f 92       	push	r7
    bc34:	8f 92       	push	r8
    bc36:	9f 92       	push	r9
    bc38:	af 92       	push	r10
    bc3a:	bf 92       	push	r11
    bc3c:	cf 92       	push	r12
    bc3e:	df 92       	push	r13
    bc40:	ef 92       	push	r14
    bc42:	ff 92       	push	r15
    bc44:	0f 93       	push	r16
    bc46:	1f 93       	push	r17
    bc48:	cf 93       	push	r28
    bc4a:	df 93       	push	r29
    bc4c:	00 d0       	rcall	.+0      	; 0xbc4e <animate_shot+0x26>
    bc4e:	00 d0       	rcall	.+0      	; 0xbc50 <animate_shot+0x28>
    bc50:	1f 92       	push	r1
    bc52:	cd b7       	in	r28, 0x3d	; 61
    bc54:	de b7       	in	r29, 0x3e	; 62
    bc56:	2c 01       	movw	r4, r24
    bc58:	3b 01       	movw	r6, r22
    bc5a:	d4 2e       	mov	r13, r20
    bc5c:	4c 01       	movw	r8, r24
    bc5e:	29 e1       	ldi	r18, 0x19	; 25
    bc60:	82 0e       	add	r8, r18
    bc62:	91 1c       	adc	r9, r1
    bc64:	40 96       	adiw	r24, 0x10	; 16
    bc66:	9d 83       	std	Y+5, r25	; 0x05
    bc68:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    bc6a:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    bc6c:	30 e1       	ldi	r19, 0x10	; 16
    bc6e:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    bc70:	f4 01       	movw	r30, r8
    bc72:	80 81       	ld	r24, Z
    bc74:	88 23       	and	r24, r24
    bc76:	09 f4       	brne	.+2      	; 0xbc7a <animate_shot+0x52>
    bc78:	12 c1       	rjmp	.+548    	; 0xbe9e <animate_shot+0x276>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    bc7a:	60 91 d0 0d 	lds	r22, 0x0DD0
    bc7e:	34 97       	sbiw	r30, 0x04	; 4
    bc80:	80 81       	ld	r24, Z
    bc82:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bc86:	88 0f       	add	r24, r24
    bc88:	99 1f       	adc	r25, r25
    bc8a:	ec 81       	ldd	r30, Y+4	; 0x04
    bc8c:	fd 81       	ldd	r31, Y+5	; 0x05
    bc8e:	20 81       	ld	r18, Z
    bc90:	31 81       	ldd	r19, Z+1	; 0x01
    bc92:	82 0f       	add	r24, r18
    bc94:	93 1f       	adc	r25, r19
    bc96:	91 83       	std	Z+1, r25	; 0x01
    bc98:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    bc9a:	60 91 d0 0d 	lds	r22, 0x0DD0
    bc9e:	f4 01       	movw	r30, r8
    bca0:	35 97       	sbiw	r30, 0x05	; 5
    bca2:	80 81       	ld	r24, Z
    bca4:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bca8:	ec 81       	ldd	r30, Y+4	; 0x04
    bcaa:	fd 81       	ldd	r31, Y+5	; 0x05
    bcac:	42 81       	ldd	r20, Z+2	; 0x02
    bcae:	53 81       	ldd	r21, Z+3	; 0x03
    bcb0:	84 0f       	add	r24, r20
    bcb2:	95 1f       	adc	r25, r21
    bcb4:	93 83       	std	Z+3, r25	; 0x03
    bcb6:	82 83       	std	Z+2, r24	; 0x02
    bcb8:	f1 2e       	mov	r15, r17
    bcba:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    bcbc:	90 91 be 0d 	lds	r25, 0x0DBE
    bcc0:	48 2f       	mov	r20, r24
    bcc2:	49 1b       	sub	r20, r25
    bcc4:	60 81       	ld	r22, Z
    bcc6:	80 91 b6 0d 	lds	r24, 0x0DB6
    bcca:	68 1b       	sub	r22, r24
    bccc:	01 e0       	ldi	r16, 0x01	; 1
    bcce:	21 e0       	ldi	r18, 0x01	; 1
    bcd0:	8f 2d       	mov	r24, r15
    bcd2:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    bcd6:	8c 81       	ldd	r24, Y+4	; 0x04
    bcd8:	9d 81       	ldd	r25, Y+5	; 0x05
    bcda:	0e 94 60 5b 	call	0xb6c0	; 0xb6c0 <out_of_bounds>
    bcde:	81 11       	cpse	r24, r1
    bce0:	d1 c0       	rjmp	.+418    	; 0xbe84 <animate_shot+0x25c>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    bce2:	41 e0       	ldi	r20, 0x01	; 1
    bce4:	61 e0       	ldi	r22, 0x01	; 1
    bce6:	8c 81       	ldd	r24, Y+4	; 0x04
    bce8:	9d 81       	ldd	r25, Y+5	; 0x05
    bcea:	0e 94 06 5c 	call	0xb80c	; 0xb80c <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    bcee:	81 11       	cpse	r24, r1
    bcf0:	c9 c0       	rjmp	.+402    	; 0xbe84 <animate_shot+0x25c>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bcf2:	90 91 b6 0d 	lds	r25, 0x0DB6
    bcf6:	8b ed       	ldi	r24, 0xDB	; 219
    bcf8:	28 2e       	mov	r2, r24
    bcfa:	8e e0       	ldi	r24, 0x0E	; 14
    bcfc:	38 2e       	mov	r3, r24
    bcfe:	1a 82       	std	Y+2, r1	; 0x02
    bd00:	19 82       	std	Y+1, r1	; 0x01
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bd02:	f1 01       	movw	r30, r2
    bd04:	80 81       	ld	r24, Z
    bd06:	82 30       	cpi	r24, 0x02	; 2
    bd08:	09 f4       	brne	.+2      	; 0xbd0c <animate_shot+0xe4>
    bd0a:	68 c0       	rjmp	.+208    	; 0xbddc <animate_shot+0x1b4>
    bd0c:	35 97       	sbiw	r30, 0x05	; 5
    bd0e:	80 81       	ld	r24, Z
    bd10:	88 23       	and	r24, r24
    bd12:	09 f4       	brne	.+2      	; 0xbd16 <animate_shot+0xee>
    bd14:	63 c0       	rjmp	.+198    	; 0xbddc <animate_shot+0x1b4>
    bd16:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    bd18:	a0 80       	ld	r10, Z
    bd1a:	aa 0c       	add	r10, r10
    bd1c:	aa 0c       	add	r10, r10
    bd1e:	aa 0c       	add	r10, r10
    bd20:	31 97       	sbiw	r30, 0x01	; 1
    bd22:	c0 80       	ld	r12, Z
    bd24:	cc 0c       	add	r12, r12
    bd26:	cc 0c       	add	r12, r12
    bd28:	cc 0c       	add	r12, r12
    bd2a:	3a 97       	sbiw	r30, 0x0a	; 10
    bd2c:	00 81       	ld	r16, Z
    bd2e:	09 1b       	sub	r16, r25
    bd30:	ec 81       	ldd	r30, Y+4	; 0x04
    bd32:	fd 81       	ldd	r31, Y+5	; 0x05
    bd34:	80 81       	ld	r24, Z
    bd36:	f1 01       	movw	r30, r2
    bd38:	3a 97       	sbiw	r30, 0x0a	; 10
    bd3a:	e0 80       	ld	r14, Z
    bd3c:	28 e0       	ldi	r18, 0x08	; 8
    bd3e:	48 e0       	ldi	r20, 0x08	; 8
    bd40:	ec 81       	ldd	r30, Y+4	; 0x04
    bd42:	fd 81       	ldd	r31, Y+5	; 0x05
    bd44:	62 81       	ldd	r22, Z+2	; 0x02
    bd46:	89 1b       	sub	r24, r25
    bd48:	9b 83       	std	Y+3, r25	; 0x03
    bd4a:	0e 94 e2 4d 	call	0x9bc4	; 0x9bc4 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    bd4e:	9b 81       	ldd	r25, Y+3	; 0x03
    bd50:	88 23       	and	r24, r24
    bd52:	09 f4       	brne	.+2      	; 0xbd56 <animate_shot+0x12e>
    bd54:	43 c0       	rjmp	.+134    	; 0xbddc <animate_shot+0x1b4>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    bd56:	41 e0       	ldi	r20, 0x01	; 1
    bd58:	6f ef       	ldi	r22, 0xFF	; 255
    bd5a:	84 e0       	ldi	r24, 0x04	; 4
    bd5c:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    bd60:	45 e3       	ldi	r20, 0x35	; 53
    bd62:	29 81       	ldd	r18, Y+1	; 0x01
    bd64:	3a 81       	ldd	r19, Y+2	; 0x02
    bd66:	42 9f       	mul	r20, r18
    bd68:	c0 01       	movw	r24, r0
    bd6a:	43 9f       	mul	r20, r19
    bd6c:	90 0d       	add	r25, r0
    bd6e:	11 24       	eor	r1, r1
    bd70:	fc 01       	movw	r30, r24
    bd72:	ea 54       	subi	r30, 0x4A	; 74
    bd74:	f2 4f       	sbci	r31, 0xF2	; 242
    bd76:	1f 01       	movw	r2, r30
    bd78:	df 01       	movw	r26, r30
    bd7a:	a7 5d       	subi	r26, 0xD7	; 215
    bd7c:	be 4f       	sbci	r27, 0xFE	; 254
    bd7e:	8c 91       	ld	r24, X
    bd80:	f4 01       	movw	r30, r8
    bd82:	31 97       	sbiw	r30, 0x01	; 1
    bd84:	90 81       	ld	r25, Z
    bd86:	89 1b       	sub	r24, r25
    bd88:	8c 93       	st	X, r24
						if (game.enemies[j].shield <= 0)
    bd8a:	18 16       	cp	r1, r24
    bd8c:	cc f0       	brlt	.+50     	; 0xbdc0 <animate_shot+0x198>
						{
							SFX_ENEMY_EXPLODE;
    bd8e:	41 e0       	ldi	r20, 0x01	; 1
    bd90:	6f ef       	ldi	r22, 0xFF	; 255
    bd92:	86 e0       	ldi	r24, 0x06	; 6
    bd94:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    bd98:	f1 01       	movw	r30, r2
    bd9a:	ef 5d       	subi	r30, 0xDF	; 223
    bd9c:	fe 4f       	sbci	r31, 0xFE	; 254
    bd9e:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    bda0:	31 97       	sbiw	r30, 0x01	; 1
    bda2:	10 82       	st	Z, r1
							game.active_enemies--;
    bda4:	80 91 d1 0d 	lds	r24, 0x0DD1
    bda8:	81 50       	subi	r24, 0x01	; 1
    bdaa:	80 93 d1 0d 	sts	0x0DD1, r24
							game.level_score += KILL_SCORE;
    bdae:	80 91 ba 0d 	lds	r24, 0x0DBA
    bdb2:	90 91 bb 0d 	lds	r25, 0x0DBB
    bdb6:	0a 96       	adiw	r24, 0x0a	; 10
    bdb8:	90 93 bb 0d 	sts	0x0DBB, r25
    bdbc:	80 93 ba 0d 	sts	0x0DBA, r24
						}
						player->shot[i].active = 0;
    bdc0:	f4 01       	movw	r30, r8
    bdc2:	10 82       	st	Z, r1
						player->active_shots--;
    bdc4:	f2 01       	movw	r30, r4
    bdc6:	87 81       	ldd	r24, Z+7	; 0x07
    bdc8:	81 50       	subi	r24, 0x01	; 1
    bdca:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    bdcc:	01 e0       	ldi	r16, 0x01	; 1
    bdce:	21 e0       	ldi	r18, 0x01	; 1
    bdd0:	40 e0       	ldi	r20, 0x00	; 0
    bdd2:	60 ee       	ldi	r22, 0xE0	; 224
    bdd4:	8f 2d       	mov	r24, r15
    bdd6:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
						break;
    bdda:	0e c0       	rjmp	.+28     	; 0xbdf8 <animate_shot+0x1d0>
    bddc:	29 81       	ldd	r18, Y+1	; 0x01
    bdde:	3a 81       	ldd	r19, Y+2	; 0x02
    bde0:	2f 5f       	subi	r18, 0xFF	; 255
    bde2:	3f 4f       	sbci	r19, 0xFF	; 255
    bde4:	3a 83       	std	Y+2, r19	; 0x02
    bde6:	29 83       	std	Y+1, r18	; 0x01
    bde8:	35 e3       	ldi	r19, 0x35	; 53
    bdea:	23 0e       	add	r2, r19
    bdec:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    bdee:	e9 81       	ldd	r30, Y+1	; 0x01
    bdf0:	fa 81       	ldd	r31, Y+2	; 0x02
    bdf2:	35 97       	sbiw	r30, 0x05	; 5
    bdf4:	09 f0       	breq	.+2      	; 0xbdf8 <animate_shot+0x1d0>
    bdf6:	85 cf       	rjmp	.-246    	; 0xbd02 <animate_shot+0xda>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    bdf8:	f3 01       	movw	r30, r6
    bdfa:	85 85       	ldd	r24, Z+13	; 0x0d
    bdfc:	88 23       	and	r24, r24
    bdfe:	09 f4       	brne	.+2      	; 0xbe02 <animate_shot+0x1da>
    be00:	4e c0       	rjmp	.+156    	; 0xbe9e <animate_shot+0x276>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    be02:	90 91 b6 0d 	lds	r25, 0x0DB6
    be06:	a4 84       	ldd	r10, Z+12	; 0x0c
    be08:	aa 0c       	add	r10, r10
    be0a:	aa 0c       	add	r10, r10
    be0c:	aa 0c       	add	r10, r10
    be0e:	c3 84       	ldd	r12, Z+11	; 0x0b
    be10:	cc 0c       	add	r12, r12
    be12:	cc 0c       	add	r12, r12
    be14:	cc 0c       	add	r12, r12
    be16:	00 81       	ld	r16, Z
    be18:	09 1b       	sub	r16, r25
    be1a:	ec 81       	ldd	r30, Y+4	; 0x04
    be1c:	fd 81       	ldd	r31, Y+5	; 0x05
    be1e:	80 81       	ld	r24, Z
    be20:	f3 01       	movw	r30, r6
    be22:	e2 80       	ldd	r14, Z+2	; 0x02
    be24:	28 e0       	ldi	r18, 0x08	; 8
    be26:	48 e0       	ldi	r20, 0x08	; 8
    be28:	ec 81       	ldd	r30, Y+4	; 0x04
    be2a:	fd 81       	ldd	r31, Y+5	; 0x05
    be2c:	62 81       	ldd	r22, Z+2	; 0x02
    be2e:	89 1b       	sub	r24, r25
    be30:	0e 94 e2 4d 	call	0x9bc4	; 0x9bc4 <LBCollides>
    be34:	88 23       	and	r24, r24
    be36:	99 f1       	breq	.+102    	; 0xbe9e <animate_shot+0x276>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    be38:	41 e0       	ldi	r20, 0x01	; 1
    be3a:	6f ef       	ldi	r22, 0xFF	; 255
    be3c:	84 e0       	ldi	r24, 0x04	; 4
    be3e:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    be42:	f3 01       	movw	r30, r6
    be44:	87 85       	ldd	r24, Z+15	; 0x0f
    be46:	f4 01       	movw	r30, r8
    be48:	31 97       	sbiw	r30, 0x01	; 1
    be4a:	90 81       	ld	r25, Z
    be4c:	89 1b       	sub	r24, r25
    be4e:	f3 01       	movw	r30, r6
    be50:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    be52:	18 16       	cp	r1, r24
    be54:	bc f0       	brlt	.+46     	; 0xbe84 <animate_shot+0x25c>
							{
								SFX_PLAYER_EXPLODE;
    be56:	41 e0       	ldi	r20, 0x01	; 1
    be58:	6f ef       	ldi	r22, 0xFF	; 255
    be5a:	85 e0       	ldi	r24, 0x05	; 5
    be5c:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
								other_player->shield = 0;
    be60:	f3 01       	movw	r30, r6
    be62:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    be64:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    be66:	f4 e5       	ldi	r31, 0x54	; 84
    be68:	6f 16       	cp	r6, r31
    be6a:	fe e0       	ldi	r31, 0x0E	; 14
    be6c:	7f 06       	cpc	r7, r31
    be6e:	51 f4       	brne	.+20     	; 0xbe84 <animate_shot+0x25c>
    be70:	80 91 ba 0d 	lds	r24, 0x0DBA
    be74:	90 91 bb 0d 	lds	r25, 0x0DBB
    be78:	8c 59       	subi	r24, 0x9C	; 156
    be7a:	9f 4f       	sbci	r25, 0xFF	; 255
    be7c:	90 93 bb 0d 	sts	0x0DBB, r25
    be80:	80 93 ba 0d 	sts	0x0DBA, r24
							}
							player->shot[i].active = 0;
    be84:	f4 01       	movw	r30, r8
    be86:	10 82       	st	Z, r1
							player->active_shots--;
    be88:	f2 01       	movw	r30, r4
    be8a:	87 81       	ldd	r24, Z+7	; 0x07
    be8c:	81 50       	subi	r24, 0x01	; 1
    be8e:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    be90:	01 e0       	ldi	r16, 0x01	; 1
    be92:	21 e0       	ldi	r18, 0x01	; 1
    be94:	40 e0       	ldi	r20, 0x00	; 0
    be96:	60 ee       	ldi	r22, 0xE0	; 224
    be98:	8f 2d       	mov	r24, r15
    be9a:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    be9e:	1f 5f       	subi	r17, 0xFF	; 255
    bea0:	f4 e1       	ldi	r31, 0x14	; 20
    bea2:	8f 0e       	add	r8, r31
    bea4:	91 1c       	adc	r9, r1
    bea6:	2c 81       	ldd	r18, Y+4	; 0x04
    bea8:	3d 81       	ldd	r19, Y+5	; 0x05
    beaa:	2c 5e       	subi	r18, 0xEC	; 236
    beac:	3f 4f       	sbci	r19, 0xFF	; 255
    beae:	3d 83       	std	Y+5, r19	; 0x05
    beb0:	2c 83       	std	Y+4, r18	; 0x04
    beb2:	13 30       	cpi	r17, 0x03	; 3
    beb4:	09 f0       	breq	.+2      	; 0xbeb8 <animate_shot+0x290>
    beb6:	dc ce       	rjmp	.-584    	; 0xbc70 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    beb8:	0f 90       	pop	r0
    beba:	0f 90       	pop	r0
    bebc:	0f 90       	pop	r0
    bebe:	0f 90       	pop	r0
    bec0:	0f 90       	pop	r0
    bec2:	df 91       	pop	r29
    bec4:	cf 91       	pop	r28
    bec6:	1f 91       	pop	r17
    bec8:	0f 91       	pop	r16
    beca:	ff 90       	pop	r15
    becc:	ef 90       	pop	r14
    bece:	df 90       	pop	r13
    bed0:	cf 90       	pop	r12
    bed2:	bf 90       	pop	r11
    bed4:	af 90       	pop	r10
    bed6:	9f 90       	pop	r9
    bed8:	8f 90       	pop	r8
    beda:	7f 90       	pop	r7
    bedc:	6f 90       	pop	r6
    bede:	5f 90       	pop	r5
    bee0:	4f 90       	pop	r4
    bee2:	3f 90       	pop	r3
    bee4:	2f 90       	pop	r2
    bee6:	08 95       	ret

0000bee8 <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    bee8:	7f 92       	push	r7
    beea:	8f 92       	push	r8
    beec:	9f 92       	push	r9
    beee:	af 92       	push	r10
    bef0:	bf 92       	push	r11
    bef2:	cf 92       	push	r12
    bef4:	df 92       	push	r13
    bef6:	ef 92       	push	r14
    bef8:	ff 92       	push	r15
    befa:	0f 93       	push	r16
    befc:	1f 93       	push	r17
    befe:	cf 93       	push	r28
    bf00:	df 93       	push	r29
    bf02:	1f 92       	push	r1
    bf04:	cd b7       	in	r28, 0x3d	; 61
    bf06:	de b7       	in	r29, 0x3e	; 62
    bf08:	6c 01       	movw	r12, r24
    bf0a:	7b 01       	movw	r14, r22
    bf0c:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    bf0e:	cb 01       	movw	r24, r22
    bf10:	29 83       	std	Y+1, r18	; 0x01
    bf12:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    bf16:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    bf18:	29 81       	ldd	r18, Y+1	; 0x01
    bf1a:	20 9f       	mul	r18, r16
    bf1c:	50 01       	movw	r10, r0
    bf1e:	11 24       	eor	r1, r1
    bf20:	10 e0       	ldi	r17, 0x00	; 0
    bf22:	81 2f       	mov	r24, r17
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	8a 15       	cp	r24, r10
    bf28:	9b 05       	cpc	r25, r11
    bf2a:	54 f4       	brge	.+20     	; 0xbf40 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    bf2c:	40 e0       	ldi	r20, 0x00	; 0
    bf2e:	b4 01       	movw	r22, r8
    bf30:	81 2f       	mov	r24, r17
    bf32:	87 0d       	add	r24, r7
    bf34:	29 83       	std	Y+1, r18	; 0x01
    bf36:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    bf3a:	1f 5f       	subi	r17, 0xFF	; 255
    bf3c:	29 81       	ldd	r18, Y+1	; 0x01
    bf3e:	f1 cf       	rjmp	.-30     	; 0xbf22 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    bf40:	f7 01       	movw	r30, r14
    bf42:	84 81       	ldd	r24, Z+4	; 0x04
    bf44:	88 23       	and	r24, r24
    bf46:	51 f0       	breq	.+20     	; 0xbf5c <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    bf48:	f6 01       	movw	r30, r12
    bf4a:	80 81       	ld	r24, Z
    bf4c:	90 e1       	ldi	r25, 0x10	; 16
    bf4e:	98 27       	eor	r25, r24
    bf50:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    bf52:	40 e0       	ldi	r20, 0x00	; 0
    bf54:	60 ee       	ldi	r22, 0xE0	; 224
    bf56:	87 2d       	mov	r24, r7
    bf58:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	}
	return anim->looped;
}
    bf5c:	f7 01       	movw	r30, r14
    bf5e:	84 81       	ldd	r24, Z+4	; 0x04
    bf60:	0f 90       	pop	r0
    bf62:	df 91       	pop	r29
    bf64:	cf 91       	pop	r28
    bf66:	1f 91       	pop	r17
    bf68:	0f 91       	pop	r16
    bf6a:	ff 90       	pop	r15
    bf6c:	ef 90       	pop	r14
    bf6e:	df 90       	pop	r13
    bf70:	cf 90       	pop	r12
    bf72:	bf 90       	pop	r11
    bf74:	af 90       	pop	r10
    bf76:	9f 90       	pop	r9
    bf78:	8f 90       	pop	r8
    bf7a:	7f 90       	pop	r7
    bf7c:	08 95       	ret

0000bf7e <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    bf7e:	8f 92       	push	r8
    bf80:	9f 92       	push	r9
    bf82:	af 92       	push	r10
    bf84:	bf 92       	push	r11
    bf86:	cf 92       	push	r12
    bf88:	df 92       	push	r13
    bf8a:	ef 92       	push	r14
    bf8c:	ff 92       	push	r15
    bf8e:	0f 93       	push	r16
    bf90:	1f 93       	push	r17
    bf92:	cf 93       	push	r28
    bf94:	df 93       	push	r29
    bf96:	ec 01       	movw	r28, r24
    bf98:	c6 2e       	mov	r12, r22
    bf9a:	14 2f       	mov	r17, r20
    bf9c:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    bf9e:	6c 81       	ldd	r22, Y+4	; 0x04
    bfa0:	77 27       	eor	r23, r23
    bfa2:	67 fd       	sbrc	r22, 7
    bfa4:	70 95       	com	r23
    bfa6:	87 2f       	mov	r24, r23
    bfa8:	97 2f       	mov	r25, r23
    bfaa:	0e 94 8f 72 	call	0xe51e	; 0xe51e <__floatsisf>
    bfae:	4b 01       	movw	r8, r22
    bfb0:	5c 01       	movw	r10, r24
    bfb2:	8e 81       	ldd	r24, Y+6	; 0x06
    bfb4:	68 2f       	mov	r22, r24
    bfb6:	70 e0       	ldi	r23, 0x00	; 0
    bfb8:	80 e0       	ldi	r24, 0x00	; 0
    bfba:	90 e0       	ldi	r25, 0x00	; 0
    bfbc:	0e 94 8f 72 	call	0xe51e	; 0xe51e <__floatsisf>
    bfc0:	29 e8       	ldi	r18, 0x89	; 137
    bfc2:	38 e8       	ldi	r19, 0x88	; 136
    bfc4:	48 e8       	ldi	r20, 0x88	; 136
    bfc6:	5c e3       	ldi	r21, 0x3C	; 60
    bfc8:	0e 94 1b 73 	call	0xe636	; 0xe636 <__mulsf3>
    bfcc:	9b 01       	movw	r18, r22
    bfce:	ac 01       	movw	r20, r24
    bfd0:	c5 01       	movw	r24, r10
    bfd2:	b4 01       	movw	r22, r8
    bfd4:	0e 94 f8 71 	call	0xe3f0	; 0xe3f0 <__addsf3>
    bfd8:	0e 94 5c 72 	call	0xe4b8	; 0xe4b8 <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    bfdc:	69 37       	cpi	r22, 0x79	; 121
    bfde:	14 f4       	brge	.+4      	; 0xbfe4 <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    bfe0:	6c 83       	std	Y+4, r22	; 0x04
    bfe2:	02 c0       	rjmp	.+4      	; 0xbfe8 <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    bfe4:	88 e7       	ldi	r24, 0x78	; 120
    bfe6:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    bfe8:	60 91 d0 0d 	lds	r22, 0x0DD0
    bfec:	8d 81       	ldd	r24, Y+5	; 0x05
    bfee:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    bff2:	28 81       	ld	r18, Y
    bff4:	39 81       	ldd	r19, Y+1	; 0x01
    bff6:	82 0f       	add	r24, r18
    bff8:	93 1f       	adc	r25, r19
    bffa:	99 83       	std	Y+1, r25	; 0x01
    bffc:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    bffe:	60 91 d0 0d 	lds	r22, 0x0DD0
    c002:	8c 81       	ldd	r24, Y+4	; 0x04
    c004:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    c008:	ea 81       	ldd	r30, Y+2	; 0x02
    c00a:	fb 81       	ldd	r31, Y+3	; 0x03
    c00c:	8e 0f       	add	r24, r30
    c00e:	9f 1f       	adc	r25, r31
    c010:	9b 83       	std	Y+3, r25	; 0x03
    c012:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c014:	4d 2d       	mov	r20, r13
    c016:	61 2f       	mov	r22, r17
    c018:	ce 01       	movw	r24, r28
    c01a:	0e 94 06 5c 	call	0xb80c	; 0xb80c <collision_detect_level>
    c01e:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c020:	88 23       	and	r24, r24
    c022:	41 f0       	breq	.+16     	; 0xc034 <animate_sprite+0xb6>
    c024:	00 23       	and	r16, r16
    c026:	31 f0       	breq	.+12     	; 0xc034 <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c028:	88 e0       	ldi	r24, 0x08	; 8
    c02a:	e8 9e       	mul	r14, r24
    c02c:	70 01       	movw	r14, r0
    c02e:	11 24       	eor	r1, r1
    c030:	fb 82       	std	Y+3, r15	; 0x03
    c032:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c034:	3a 81       	ldd	r19, Y+2	; 0x02
    c036:	80 91 be 0d 	lds	r24, 0x0DBE
    c03a:	43 2f       	mov	r20, r19
    c03c:	48 1b       	sub	r20, r24
    c03e:	98 81       	ld	r25, Y
    c040:	80 91 b6 0d 	lds	r24, 0x0DB6
    c044:	69 2f       	mov	r22, r25
    c046:	68 1b       	sub	r22, r24
    c048:	0d 2d       	mov	r16, r13
    c04a:	21 2f       	mov	r18, r17
    c04c:	8c 2d       	mov	r24, r12
    c04e:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	return result;
}
    c052:	8b 2d       	mov	r24, r11
    c054:	df 91       	pop	r29
    c056:	cf 91       	pop	r28
    c058:	1f 91       	pop	r17
    c05a:	0f 91       	pop	r16
    c05c:	ff 90       	pop	r15
    c05e:	ef 90       	pop	r14
    c060:	df 90       	pop	r13
    c062:	cf 90       	pop	r12
    c064:	bf 90       	pop	r11
    c066:	af 90       	pop	r10
    c068:	9f 90       	pop	r9
    c06a:	8f 90       	pop	r8
    c06c:	08 95       	ret

0000c06e <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c06e:	ef 92       	push	r14
    c070:	0f 93       	push	r16
    c072:	fc 01       	movw	r30, r24
    c074:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c076:	90 85       	ldd	r25, Z+8	; 0x08
    c078:	94 ff       	sbrs	r25, 4
    c07a:	0f c0       	rjmp	.+30     	; 0xc09a <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c07c:	92 81       	ldd	r25, Z+2	; 0x02
    c07e:	20 91 be 0d 	lds	r18, 0x0DBE
    c082:	49 2f       	mov	r20, r25
    c084:	42 1b       	sub	r20, r18
    c086:	90 81       	ld	r25, Z
    c088:	20 91 b6 0d 	lds	r18, 0x0DB6
    c08c:	69 2f       	mov	r22, r25
    c08e:	62 1b       	sub	r22, r18
    c090:	04 85       	ldd	r16, Z+12	; 0x0c
    c092:	23 85       	ldd	r18, Z+11	; 0x0b
    c094:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
    c098:	14 c0       	rjmp	.+40     	; 0xc0c2 <animate_player+0x54>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    c09a:	e1 2c       	mov	r14, r1
    c09c:	00 e0       	ldi	r16, 0x00	; 0
    c09e:	24 85       	ldd	r18, Z+12	; 0x0c
    c0a0:	43 85       	ldd	r20, Z+11	; 0x0b
    c0a2:	68 2f       	mov	r22, r24
    c0a4:	cf 01       	movw	r24, r30
    c0a6:	0e 94 bf 5f 	call	0xbf7e	; 0xbf7e <animate_sprite>
    c0aa:	82 30       	cpi	r24, 0x02	; 2
    c0ac:	50 f0       	brcs	.+20     	; 0xc0c2 <animate_player+0x54>
	{
		SFX_PLAYER_EXPLODE;
    c0ae:	41 e0       	ldi	r20, 0x01	; 1
    c0b0:	6f ef       	ldi	r22, 0xFF	; 255
    c0b2:	85 e0       	ldi	r24, 0x05	; 5
    c0b4:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		game.player.shield = 0;
    c0b8:	10 92 e8 0d 	sts	0x0DE8, r1
		game.player.flags = EXPLODING;
    c0bc:	80 e1       	ldi	r24, 0x10	; 16
    c0be:	80 93 e1 0d 	sts	0x0DE1, r24
	}
}
    c0c2:	0f 91       	pop	r16
    c0c4:	ef 90       	pop	r14
    c0c6:	08 95       	ret

0000c0c8 <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    c0c8:	1f 93       	push	r17
    c0ca:	cf 93       	push	r28
    c0cc:	df 93       	push	r29
    c0ce:	ec 01       	movw	r28, r24
    c0d0:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    c0d2:	98 85       	ldd	r25, Y+8	; 0x08
    c0d4:	89 2f       	mov	r24, r25
    c0d6:	88 70       	andi	r24, 0x08	; 8
    c0d8:	93 ff       	sbrs	r25, 3
    c0da:	14 c0       	rjmp	.+40     	; 0xc104 <update_spider_enemy+0x3c>
    c0dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    c0de:	20 38       	cpi	r18, 0x80	; 128
    c0e0:	89 f4       	brne	.+34     	; 0xc104 <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    c0e2:	81 e0       	ldi	r24, 0x01	; 1
    c0e4:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    c0e6:	8c e9       	ldi	r24, 0x9C	; 156
    c0e8:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    c0ea:	88 ec       	ldi	r24, 0xC8	; 200
    c0ec:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    c0ee:	8c e3       	ldi	r24, 0x3C	; 60
    c0f0:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    c0f2:	89 85       	ldd	r24, Y+9	; 0x09
    c0f4:	81 11       	cpse	r24, r1
    c0f6:	02 c0       	rjmp	.+4      	; 0xc0fc <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    c0f8:	84 ec       	ldi	r24, 0xC4	; 196
    c0fa:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    c0fc:	40 e0       	ldi	r20, 0x00	; 0
    c0fe:	65 e4       	ldi	r22, 0x45	; 69
    c100:	70 e3       	ldi	r23, 0x30	; 48
    c102:	19 c0       	rjmp	.+50     	; 0xc136 <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    c104:	90 ff       	sbrs	r25, 0
    c106:	0f c0       	rjmp	.+30     	; 0xc126 <update_spider_enemy+0x5e>
    c108:	9e 81       	ldd	r25, Y+6	; 0x06
    c10a:	91 11       	cpse	r25, r1
    c10c:	0c c0       	rjmp	.+24     	; 0xc126 <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    c10e:	88 e0       	ldi	r24, 0x08	; 8
    c110:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    c112:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    c114:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    c116:	89 85       	ldd	r24, Y+9	; 0x09
    c118:	81 11       	cpse	r24, r1
    c11a:	03 c0       	rjmp	.+6      	; 0xc122 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    c11c:	81 e0       	ldi	r24, 0x01	; 1
    c11e:	89 87       	std	Y+9, r24	; 0x09
    c120:	0d c0       	rjmp	.+26     	; 0xc13c <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    c122:	19 86       	std	Y+9, r1	; 0x09
    c124:	0b c0       	rjmp	.+22     	; 0xc13c <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    c126:	88 23       	and	r24, r24
    c128:	49 f0       	breq	.+18     	; 0xc13c <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c12a:	ce 01       	movw	r24, r28
    c12c:	85 96       	adiw	r24, 0x25	; 37
    c12e:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c132:	40 e0       	ldi	r20, 0x00	; 0
    c134:	bc 01       	movw	r22, r24
    c136:	81 2f       	mov	r24, r17
    c138:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	}
	e->frame_count++;
    c13c:	8d 85       	ldd	r24, Y+13	; 0x0d
    c13e:	8f 5f       	subi	r24, 0xFF	; 255
    c140:	8d 87       	std	Y+13, r24	; 0x0d
}
    c142:	df 91       	pop	r29
    c144:	cf 91       	pop	r28
    c146:	1f 91       	pop	r17
    c148:	08 95       	ret

0000c14a <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    c14a:	cf 93       	push	r28
    c14c:	fc 01       	movw	r30, r24
    c14e:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c150:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    c152:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    c154:	40 91 d9 0d 	lds	r20, 0x0DD9
    c158:	50 91 da 0d 	lds	r21, 0x0DDA
    c15c:	20 81       	ld	r18, Z
    c15e:	31 81       	ldd	r19, Z+1	; 0x01
    c160:	85 96       	adiw	r24, 0x25	; 37
    c162:	24 17       	cp	r18, r20
    c164:	35 07       	cpc	r19, r21
    c166:	38 f4       	brcc	.+14     	; 0xc176 <update_turret_enemy+0x2c>
    c168:	24 85       	ldd	r18, Z+12	; 0x0c
    c16a:	26 30       	cpi	r18, 0x06	; 6
    c16c:	21 f0       	breq	.+8      	; 0xc176 <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    c16e:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c172:	41 e0       	ldi	r20, 0x01	; 1
    c174:	03 c0       	rjmp	.+6      	; 0xc17c <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c176:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c17a:	40 e0       	ldi	r20, 0x00	; 0
    c17c:	bc 01       	movw	r22, r24
    c17e:	8c 2f       	mov	r24, r28
	}
}
    c180:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c182:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c186 <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    c186:	cf 93       	push	r28
    c188:	fc 01       	movw	r30, r24
    c18a:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    c18c:	82 ee       	ldi	r24, 0xE2	; 226
    c18e:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c190:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c192:	cf 01       	movw	r24, r30
    c194:	85 96       	adiw	r24, 0x25	; 37
    c196:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c19a:	40 e0       	ldi	r20, 0x00	; 0
    c19c:	bc 01       	movw	r22, r24
    c19e:	8c 2f       	mov	r24, r28
}
    c1a0:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1a2:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c1a6 <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    c1a6:	cf 93       	push	r28
    c1a8:	fc 01       	movw	r30, r24
    c1aa:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    c1ac:	8a e0       	ldi	r24, 0x0A	; 10
    c1ae:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c1b0:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1b2:	cf 01       	movw	r24, r30
    c1b4:	85 96       	adiw	r24, 0x25	; 37
    c1b6:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c1ba:	40 e0       	ldi	r20, 0x00	; 0
    c1bc:	bc 01       	movw	r22, r24
    c1be:	8c 2f       	mov	r24, r28
}
    c1c0:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1c2:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c1c6 <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    c1c6:	cf 93       	push	r28
    c1c8:	fc 01       	movw	r30, r24
    c1ca:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    c1cc:	84 e1       	ldi	r24, 0x14	; 20
    c1ce:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    c1d0:	80 91 d0 0d 	lds	r24, 0x0DD0
    c1d4:	6c e3       	ldi	r22, 0x3C	; 60
    c1d6:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    c1da:	91 11       	cpse	r25, r1
    c1dc:	03 c0       	rjmp	.+6      	; 0xc1e4 <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    c1de:	94 81       	ldd	r25, Z+4	; 0x04
    c1e0:	91 95       	neg	r25
    c1e2:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1e4:	cf 01       	movw	r24, r30
    c1e6:	85 96       	adiw	r24, 0x25	; 37
    c1e8:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c1ec:	40 e0       	ldi	r20, 0x00	; 0
    c1ee:	bc 01       	movw	r22, r24
    c1f0:	8c 2f       	mov	r24, r28
}
    c1f2:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c1f4:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c1f8 <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    c1f8:	cf 93       	push	r28
    c1fa:	fc 01       	movw	r30, r24
    c1fc:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    c1fe:	8e e1       	ldi	r24, 0x1E	; 30
    c200:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    c202:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c204:	cf 01       	movw	r24, r30
    c206:	85 96       	adiw	r24, 0x25	; 37
    c208:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c20c:	40 e0       	ldi	r20, 0x00	; 0
    c20e:	bc 01       	movw	r22, r24
    c210:	8c 2f       	mov	r24, r28
}
    c212:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c214:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c218 <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    c218:	cf 93       	push	r28
    c21a:	fc 01       	movw	r30, r24
    c21c:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    c21e:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    c220:	8e e1       	ldi	r24, 0x1E	; 30
    c222:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    c224:	80 91 cb 0d 	lds	r24, 0x0DCB
    c228:	82 30       	cpi	r24, 0x02	; 2
    c22a:	11 f4       	brne	.+4      	; 0xc230 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    c22c:	82 ee       	ldi	r24, 0xE2	; 226
    c22e:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    c230:	22 81       	ldd	r18, Z+2	; 0x02
    c232:	33 81       	ldd	r19, Z+3	; 0x03
    c234:	24 50       	subi	r18, 0x04	; 4
    c236:	31 09       	sbc	r19, r1
    c238:	2d 3b       	cpi	r18, 0xBD	; 189
    c23a:	31 05       	cpc	r19, r1
    c23c:	38 f0       	brcs	.+14     	; 0xc24c <update_level_hazard+0x34>
    c23e:	27 85       	ldd	r18, Z+15	; 0x0f
    c240:	88 e0       	ldi	r24, 0x08	; 8
    c242:	28 9f       	mul	r18, r24
    c244:	90 01       	movw	r18, r0
    c246:	11 24       	eor	r1, r1
    c248:	33 83       	std	Z+3, r19	; 0x03
    c24a:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c24c:	cf 01       	movw	r24, r30
    c24e:	85 96       	adiw	r24, 0x25	; 37
    c250:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c254:	40 e0       	ldi	r20, 0x00	; 0
    c256:	bc 01       	movw	r22, r24
    c258:	8c 2f       	mov	r24, r28
}
    c25a:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    c25c:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c260 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    c260:	cf 93       	push	r28
    c262:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c264:	0c 96       	adiw	r24, 0x0c	; 12
    c266:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    c26a:	40 e0       	ldi	r20, 0x00	; 0
    c26c:	bc 01       	movw	r22, r24
    c26e:	8c 2f       	mov	r24, r28
}
    c270:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    c272:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000c276 <update_enemies>:
}

void update_enemies()
{
    c276:	cf 92       	push	r12
    c278:	df 92       	push	r13
    c27a:	ef 92       	push	r14
    c27c:	ff 92       	push	r15
    c27e:	0f 93       	push	r16
    c280:	1f 93       	push	r17
    c282:	cf 93       	push	r28
    c284:	df 93       	push	r29
    c286:	8a ed       	ldi	r24, 0xDA	; 218
    c288:	e8 2e       	mov	r14, r24
    c28a:	8e e0       	ldi	r24, 0x0E	; 14
    c28c:	f8 2e       	mov	r15, r24
    c28e:	cf ec       	ldi	r28, 0xCF	; 207
    c290:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    c292:	19 e0       	ldi	r17, 0x09	; 9
    c294:	f7 01       	movw	r30, r14
    c296:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    c298:	80 81       	ld	r24, Z
    c29a:	97 01       	movw	r18, r14
    c29c:	21 50       	subi	r18, 0x01	; 1
    c29e:	31 09       	sbc	r19, r1
    c2a0:	69 01       	movw	r12, r18
    c2a2:	84 ff       	sbrs	r24, 4
    c2a4:	0d c0       	rjmp	.+26     	; 0xc2c0 <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    c2a6:	d7 01       	movw	r26, r14
    c2a8:	0c 91       	ld	r16, X
    c2aa:	f9 01       	movw	r30, r18
    c2ac:	20 81       	ld	r18, Z
    c2ae:	41 2f       	mov	r20, r17
    c2b0:	be 01       	movw	r22, r28
    c2b2:	63 5d       	subi	r22, 0xD3	; 211
    c2b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c2b6:	ce 01       	movw	r24, r28
    c2b8:	08 96       	adiw	r24, 0x08	; 8
    c2ba:	0e 94 74 5f 	call	0xbee8	; 0xbee8 <map_explosion>
    c2be:	2e c0       	rjmp	.+92     	; 0xc31c <update_enemies+0xa6>
    c2c0:	f7 01       	movw	r30, r14
    c2c2:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    c2c4:	80 81       	ld	r24, Z
    c2c6:	88 23       	and	r24, r24
    c2c8:	49 f1       	breq	.+82     	; 0xc31c <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    c2ca:	d7 01       	movw	r26, r14
    c2cc:	11 96       	adiw	r26, 0x01	; 1
    c2ce:	ec 91       	ld	r30, X
    c2d0:	8e 2f       	mov	r24, r30
    c2d2:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    c2d4:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    c2d6:	89 30       	cpi	r24, 0x09	; 9
    c2d8:	91 05       	cpc	r25, r1
    c2da:	e8 f4       	brcc	.+58     	; 0xc316 <update_enemies+0xa0>
    c2dc:	fc 01       	movw	r30, r24
    c2de:	e8 5c       	subi	r30, 0xC8	; 200
    c2e0:	ff 4f       	sbci	r31, 0xFF	; 255
    c2e2:	0c 94 f1 71 	jmp	0xe3e2	; 0xe3e2 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    c2e6:	ce 01       	movw	r24, r28
    c2e8:	0e 94 64 60 	call	0xc0c8	; 0xc0c8 <update_spider_enemy>
    c2ec:	17 c0       	rjmp	.+46     	; 0xc31c <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    c2ee:	ce 01       	movw	r24, r28
    c2f0:	0e 94 a5 60 	call	0xc14a	; 0xc14a <update_turret_enemy>
    c2f4:	13 c0       	rjmp	.+38     	; 0xc31c <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    c2f6:	ce 01       	movw	r24, r28
    c2f8:	0e 94 c3 60 	call	0xc186	; 0xc186 <update_drone_enemy>
    c2fc:	0f c0       	rjmp	.+30     	; 0xc31c <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    c2fe:	ce 01       	movw	r24, r28
    c300:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <update_shark_enemy>
    c304:	0b c0       	rjmp	.+22     	; 0xc31c <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    c306:	ce 01       	movw	r24, r28
    c308:	0e 94 d3 60 	call	0xc1a6	; 0xc1a6 <update_globe_enemy>
    c30c:	07 c0       	rjmp	.+14     	; 0xc31c <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    c30e:	ce 01       	movw	r24, r28
    c310:	0e 94 e3 60 	call	0xc1c6	; 0xc1c6 <update_xwing_enemy>
    c314:	03 c0       	rjmp	.+6      	; 0xc31c <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    c316:	ce 01       	movw	r24, r28
    c318:	0e 94 0c 61 	call	0xc218	; 0xc218 <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    c31c:	f6 01       	movw	r30, r12
    c31e:	90 81       	ld	r25, Z
    c320:	d7 01       	movw	r26, r14
    c322:	8c 91       	ld	r24, X
    c324:	98 9f       	mul	r25, r24
    c326:	10 0d       	add	r17, r0
    c328:	11 24       	eor	r1, r1
    c32a:	b5 e3       	ldi	r27, 0x35	; 53
    c32c:	eb 0e       	add	r14, r27
    c32e:	f1 1c       	adc	r15, r1
    c330:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c332:	e3 ee       	ldi	r30, 0xE3	; 227
    c334:	ee 16       	cp	r14, r30
    c336:	ef e0       	ldi	r30, 0x0F	; 15
    c338:	fe 06       	cpc	r15, r30
    c33a:	09 f0       	breq	.+2      	; 0xc33e <update_enemies+0xc8>
    c33c:	ab cf       	rjmp	.-170    	; 0xc294 <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    c33e:	df 91       	pop	r29
    c340:	cf 91       	pop	r28
    c342:	1f 91       	pop	r17
    c344:	0f 91       	pop	r16
    c346:	ff 90       	pop	r15
    c348:	ef 90       	pop	r14
    c34a:	df 90       	pop	r13
    c34c:	cf 90       	pop	r12
    c34e:	08 95       	ret

0000c350 <update_enemy_shots>:

void update_enemy_shots()
{
    c350:	6f 92       	push	r6
    c352:	7f 92       	push	r7
    c354:	9f 92       	push	r9
    c356:	af 92       	push	r10
    c358:	bf 92       	push	r11
    c35a:	cf 92       	push	r12
    c35c:	df 92       	push	r13
    c35e:	ef 92       	push	r14
    c360:	ff 92       	push	r15
    c362:	0f 93       	push	r16
    c364:	1f 93       	push	r17
    c366:	cf 93       	push	r28
    c368:	df 93       	push	r29
    c36a:	1f 92       	push	r1
    c36c:	cd b7       	in	r28, 0x3d	; 61
    c36e:	de b7       	in	r29, 0x3e	; 62
    c370:	8d ed       	ldi	r24, 0xDD	; 221
    c372:	68 2e       	mov	r6, r24
    c374:	8e e0       	ldi	r24, 0x0E	; 14
    c376:	78 2e       	mov	r7, r24
    c378:	0a ee       	ldi	r16, 0xEA	; 234
    c37a:	1e e0       	ldi	r17, 0x0E	; 14
    c37c:	94 ee       	ldi	r25, 0xE4	; 228
    c37e:	e9 2e       	mov	r14, r25
    c380:	9e e0       	ldi	r25, 0x0E	; 14
    c382:	f9 2e       	mov	r15, r25
    c384:	25 ee       	ldi	r18, 0xE5	; 229
    c386:	a2 2e       	mov	r10, r18
    c388:	2e e0       	ldi	r18, 0x0E	; 14
    c38a:	b2 2e       	mov	r11, r18
    c38c:	30 e1       	ldi	r19, 0x10	; 16
    c38e:	d3 2e       	mov	r13, r19
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    c390:	cc 24       	eor	r12, r12
    c392:	c3 94       	inc	r12
    c394:	90 ef       	ldi	r25, 0xF0	; 240
    c396:	9d 0d       	add	r25, r13
    c398:	6f ef       	ldi	r22, 0xFF	; 255
    c39a:	6d 0d       	add	r22, r13
    c39c:	f3 01       	movw	r30, r6
    c39e:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    c3a0:	80 81       	ld	r24, Z
    c3a2:	35 97       	sbiw	r30, 0x05	; 5
    c3a4:	82 30       	cpi	r24, 0x02	; 2
    c3a6:	09 f4       	brne	.+2      	; 0xc3aa <update_enemy_shots+0x5a>
    c3a8:	5b c0       	rjmp	.+182    	; 0xc460 <update_enemy_shots+0x110>
    c3aa:	20 81       	ld	r18, Z
    c3ac:	22 23       	and	r18, r18
    c3ae:	09 f4       	brne	.+2      	; 0xc3b2 <update_enemy_shots+0x62>
    c3b0:	57 c0       	rjmp	.+174    	; 0xc460 <update_enemy_shots+0x110>
    c3b2:	d3 01       	movw	r26, r6
    c3b4:	2c 91       	ld	r18, X
    c3b6:	2c 33       	cpi	r18, 0x3C	; 60
    c3b8:	08 f4       	brcc	.+2      	; 0xc3bc <update_enemy_shots+0x6c>
    c3ba:	52 c0       	rjmp	.+164    	; 0xc460 <update_enemy_shots+0x110>
		{
			game.enemies[i].shot_frame_count = 0;	
    c3bc:	1c 92       	st	X, r1
    c3be:	f8 01       	movw	r30, r16
    c3c0:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c3c2:	20 81       	ld	r18, Z
    c3c4:	27 30       	cpi	r18, 0x07	; 7
    c3c6:	09 f0       	breq	.+2      	; 0xc3ca <update_enemy_shots+0x7a>
    c3c8:	52 c0       	rjmp	.+164    	; 0xc46e <update_enemy_shots+0x11e>
    c3ca:	f8 01       	movw	r30, r16
				{
					if (!game.enemies[i].shot[j].active)
    c3cc:	22 91       	ld	r18, -Z
    c3ce:	21 11       	cpse	r18, r1
    c3d0:	42 c0       	rjmp	.+132    	; 0xc456 <update_enemy_shots+0x106>
					{
						game.enemies[i].shot[j].active = 1;
    c3d2:	c0 82       	st	Z, r12
    c3d4:	f3 01       	movw	r30, r6
    c3d6:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    c3d8:	20 81       	ld	r18, Z
    c3da:	31 81       	ldd	r19, Z+1	; 0x01
    c3dc:	f3 01       	movw	r30, r6
    c3de:	34 83       	std	Z+4, r19	; 0x04
    c3e0:	23 83       	std	Z+3, r18	; 0x03
    c3e2:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    c3e4:	40 81       	ld	r20, Z
    c3e6:	51 81       	ldd	r21, Z+1	; 0x01
    c3e8:	fa 01       	movw	r30, r20
    c3ea:	e8 7f       	andi	r30, 0xF8	; 248
    c3ec:	16 96       	adiw	r26, 0x06	; 6
    c3ee:	fc 93       	st	X, r31
    c3f0:	ee 93       	st	-X, r30
    c3f2:	15 97       	sbiw	r26, 0x05	; 5
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    c3f4:	84 30       	cpi	r24, 0x04	; 4
    c3f6:	11 f4       	brne	.+4      	; 0xc3fc <update_enemy_shots+0xac>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c3f8:	f8 01       	movw	r30, r16
    c3fa:	15 c0       	rjmp	.+42     	; 0xc426 <update_enemy_shots+0xd6>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    c3fc:	85 30       	cpi	r24, 0x05	; 5
    c3fe:	71 f4       	brne	.+28     	; 0xc41c <update_enemy_shots+0xcc>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    c400:	f8 01       	movw	r30, r16
    c402:	80 81       	ld	r24, Z
    c404:	d7 01       	movw	r26, r14
    c406:	8c 93       	st	X, r24
							if (game.player.shared.y <= game.enemies[i].shared.y)
    c408:	20 91 db 0d 	lds	r18, 0x0DDB
    c40c:	30 91 dc 0d 	lds	r19, 0x0DDC
    c410:	42 17       	cp	r20, r18
    c412:	53 07       	cpc	r21, r19
    c414:	00 f1       	brcs	.+64     	; 0xc456 <update_enemy_shots+0x106>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    c416:	81 95       	neg	r24
    c418:	8c 93       	st	X, r24
    c41a:	1d c0       	rjmp	.+58     	; 0xc456 <update_enemy_shots+0x106>
							}
						}
						else if (game.enemies[i].enemy_type == ENEMY_BOSS_EYE && i % 2 != 0)
    c41c:	87 30       	cpi	r24, 0x07	; 7
    c41e:	31 f4       	brne	.+12     	; 0xc42c <update_enemy_shots+0xdc>
    c420:	90 ff       	sbrs	r25, 0
    c422:	04 c0       	rjmp	.+8      	; 0xc42c <update_enemy_shots+0xdc>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shared.vx;
    c424:	f5 01       	movw	r30, r10
    c426:	80 81       	ld	r24, Z
    c428:	d7 01       	movw	r26, r14
    c42a:	f6 cf       	rjmp	.-20     	; 0xc418 <update_enemy_shots+0xc8>
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    c42c:	f8 01       	movw	r30, r16
    c42e:	90 80       	ld	r9, Z
    c430:	89 2d       	mov	r24, r9
    c432:	81 95       	neg	r24
    c434:	d5 01       	movw	r26, r10
    c436:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    c438:	80 91 d9 0d 	lds	r24, 0x0DD9
    c43c:	90 91 da 0d 	lds	r25, 0x0DDA
    c440:	82 17       	cp	r24, r18
    c442:	93 07       	cpc	r25, r19
    c444:	40 f0       	brcs	.+16     	; 0xc456 <update_enemy_shots+0x106>
    c446:	69 83       	std	Y+1, r22	; 0x01
    c448:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    c44c:	69 81       	ldd	r22, Y+1	; 0x01
    c44e:	81 11       	cpse	r24, r1
    c450:	02 c0       	rjmp	.+4      	; 0xc456 <update_enemy_shots+0x106>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    c452:	f5 01       	movw	r30, r10
    c454:	90 82       	st	Z, r9
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    c456:	c3 01       	movw	r24, r6
    c458:	03 96       	adiw	r24, 0x03	; 3
    c45a:	0e 94 30 61 	call	0xc260	; 0xc260 <update_basic_shot>
    c45e:	07 c0       	rjmp	.+14     	; 0xc46e <update_enemy_shots+0x11e>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    c460:	80 81       	ld	r24, Z
    c462:	88 23       	and	r24, r24
    c464:	21 f0       	breq	.+8      	; 0xc46e <update_enemy_shots+0x11e>
		{
			game.enemies[i].shot_frame_count++;
    c466:	d3 01       	movw	r26, r6
    c468:	8c 91       	ld	r24, X
    c46a:	8f 5f       	subi	r24, 0xFF	; 255
    c46c:	8c 93       	st	X, r24
    c46e:	d3 94       	inc	r13
    c470:	b5 e3       	ldi	r27, 0x35	; 53
    c472:	6b 0e       	add	r6, r27
    c474:	71 1c       	adc	r7, r1
    c476:	0b 5c       	subi	r16, 0xCB	; 203
    c478:	1f 4f       	sbci	r17, 0xFF	; 255
    c47a:	e5 e3       	ldi	r30, 0x35	; 53
    c47c:	ee 0e       	add	r14, r30
    c47e:	f1 1c       	adc	r15, r1
    c480:	f5 e3       	ldi	r31, 0x35	; 53
    c482:	af 0e       	add	r10, r31
    c484:	b1 1c       	adc	r11, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c486:	85 e1       	ldi	r24, 0x15	; 21
    c488:	d8 12       	cpse	r13, r24
    c48a:	84 cf       	rjmp	.-248    	; 0xc394 <update_enemy_shots+0x44>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    c48c:	0f 90       	pop	r0
    c48e:	df 91       	pop	r29
    c490:	cf 91       	pop	r28
    c492:	1f 91       	pop	r17
    c494:	0f 91       	pop	r16
    c496:	ff 90       	pop	r15
    c498:	ef 90       	pop	r14
    c49a:	df 90       	pop	r13
    c49c:	cf 90       	pop	r12
    c49e:	bf 90       	pop	r11
    c4a0:	af 90       	pop	r10
    c4a2:	9f 90       	pop	r9
    c4a4:	7f 90       	pop	r7
    c4a6:	6f 90       	pop	r6
    c4a8:	08 95       	ret

0000c4aa <animate_enemies>:

void animate_enemies()
{
    c4aa:	2f 92       	push	r2
    c4ac:	3f 92       	push	r3
    c4ae:	4f 92       	push	r4
    c4b0:	5f 92       	push	r5
    c4b2:	6f 92       	push	r6
    c4b4:	7f 92       	push	r7
    c4b6:	8f 92       	push	r8
    c4b8:	9f 92       	push	r9
    c4ba:	af 92       	push	r10
    c4bc:	cf 92       	push	r12
    c4be:	df 92       	push	r13
    c4c0:	ef 92       	push	r14
    c4c2:	ff 92       	push	r15
    c4c4:	0f 93       	push	r16
    c4c6:	1f 93       	push	r17
    c4c8:	cf 93       	push	r28
    c4ca:	df 93       	push	r29
    c4cc:	00 d0       	rcall	.+0      	; 0xc4ce <animate_enemies+0x24>
    c4ce:	00 d0       	rcall	.+0      	; 0xc4d0 <animate_enemies+0x26>
    c4d0:	cd b7       	in	r28, 0x3d	; 61
    c4d2:	de b7       	in	r29, 0x3e	; 62
    c4d4:	46 ed       	ldi	r20, 0xD6	; 214
    c4d6:	24 2e       	mov	r2, r20
    c4d8:	4e e0       	ldi	r20, 0x0E	; 14
    c4da:	34 2e       	mov	r3, r20
    c4dc:	59 ed       	ldi	r21, 0xD9	; 217
    c4de:	65 2e       	mov	r6, r21
    c4e0:	5e e0       	ldi	r21, 0x0E	; 14
    c4e2:	75 2e       	mov	r7, r21
    c4e4:	6a ed       	ldi	r22, 0xDA	; 218
    c4e6:	86 2e       	mov	r8, r22
    c4e8:	6e e0       	ldi	r22, 0x0E	; 14
    c4ea:	96 2e       	mov	r9, r22
    c4ec:	8f ec       	ldi	r24, 0xCF	; 207
    c4ee:	9e e0       	ldi	r25, 0x0E	; 14
    c4f0:	9c 83       	std	Y+4, r25	; 0x04
    c4f2:	8b 83       	std	Y+3, r24	; 0x03
    c4f4:	a7 ed       	ldi	r26, 0xD7	; 215
    c4f6:	be e0       	ldi	r27, 0x0E	; 14
    c4f8:	ba 83       	std	Y+2, r27	; 0x02
    c4fa:	a9 83       	std	Y+1, r26	; 0x01
    c4fc:	41 2c       	mov	r4, r1
    c4fe:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    c500:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    c502:	70 e1       	ldi	r23, 0x10	; 16
    c504:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    c506:	f1 01       	movw	r30, r2
    c508:	80 81       	ld	r24, Z
    c50a:	88 23       	and	r24, r24
    c50c:	09 f4       	brne	.+2      	; 0xc510 <animate_enemies+0x66>
    c50e:	9b c0       	rjmp	.+310    	; 0xc646 <animate_enemies+0x19c>
    c510:	a9 81       	ldd	r26, Y+1	; 0x01
    c512:	ba 81       	ldd	r27, Y+2	; 0x02
    c514:	8c 91       	ld	r24, X
    c516:	84 fd       	sbrc	r24, 4
    c518:	96 c0       	rjmp	.+300    	; 0xc646 <animate_enemies+0x19c>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c51a:	eb 81       	ldd	r30, Y+3	; 0x03
    c51c:	fc 81       	ldd	r31, Y+4	; 0x04
    c51e:	20 81       	ld	r18, Z
    c520:	31 81       	ldd	r19, Z+1	; 0x01
    c522:	e0 91 b6 0d 	lds	r30, 0x0DB6
    c526:	f0 91 b7 0d 	lds	r31, 0x0DB7
    c52a:	2e 17       	cp	r18, r30
    c52c:	3f 07       	cpc	r19, r31
    c52e:	10 f1       	brcs	.+68     	; 0xc574 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
    c530:	ab 81       	ldd	r26, Y+3	; 0x03
    c532:	bc 81       	ldd	r27, Y+4	; 0x04
    c534:	12 96       	adiw	r26, 0x02	; 2
    c536:	ed 90       	ld	r14, X+
    c538:	fc 90       	ld	r15, X
    c53a:	13 97       	sbiw	r26, 0x03	; 3
    c53c:	80 91 be 0d 	lds	r24, 0x0DBE
    c540:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    c542:	e8 16       	cp	r14, r24
    c544:	f9 06       	cpc	r15, r25
    c546:	b0 f0       	brcs	.+44     	; 0xc574 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c548:	88 53       	subi	r24, 0x38	; 56
    c54a:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    c54c:	8e 15       	cp	r24, r14
    c54e:	9f 05       	cpc	r25, r15
    c550:	88 f0       	brcs	.+34     	; 0xc574 <animate_enemies+0xca>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c552:	cf 01       	movw	r24, r30
    c554:	80 52       	subi	r24, 0x20	; 32
    c556:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    c558:	82 17       	cp	r24, r18
    c55a:	93 07       	cpc	r25, r19
    c55c:	c8 f4       	brcc	.+50     	; 0xc590 <animate_enemies+0xe6>
    c55e:	d2 01       	movw	r26, r4
    c560:	a5 52       	subi	r26, 0x25	; 37
    c562:	b1 4f       	sbci	r27, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    c564:	8c 91       	ld	r24, X
    c566:	81 11       	cpse	r24, r1
    c568:	13 c0       	rjmp	.+38     	; 0xc590 <animate_enemies+0xe6>
    c56a:	d4 01       	movw	r26, r8
    c56c:	12 97       	sbiw	r26, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    c56e:	8c 91       	ld	r24, X
    c570:	81 30       	cpi	r24, 0x01	; 1
    c572:	71 f4       	brne	.+28     	; 0xc590 <animate_enemies+0xe6>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    c574:	f1 01       	movw	r30, r2
    c576:	10 82       	st	Z, r1
				game.active_enemies--;
    c578:	80 91 d1 0d 	lds	r24, 0x0DD1
    c57c:	81 50       	subi	r24, 0x01	; 1
    c57e:	80 93 d1 0d 	sts	0x0DD1, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    c582:	d4 01       	movw	r26, r8
    c584:	0c 91       	ld	r16, X
    c586:	f3 01       	movw	r30, r6
    c588:	20 81       	ld	r18, Z
    c58a:	40 e0       	ldi	r20, 0x00	; 0
    c58c:	60 ee       	ldi	r22, 0xE0	; 224
    c58e:	6e c0       	rjmp	.+220    	; 0xc66c <animate_enemies+0x1c2>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c590:	02 2f       	mov	r16, r18
    c592:	0e 1b       	sub	r16, r30
    c594:	20 91 e5 0d 	lds	r18, 0x0DE5
    c598:	22 0f       	add	r18, r18
    c59a:	22 0f       	add	r18, r18
    c59c:	22 0f       	add	r18, r18
    c59e:	40 91 e4 0d 	lds	r20, 0x0DE4
    c5a2:	44 0f       	add	r20, r20
    c5a4:	44 0f       	add	r20, r20
    c5a6:	44 0f       	add	r20, r20
    c5a8:	80 91 d9 0d 	lds	r24, 0x0DD9
    c5ac:	98 e0       	ldi	r25, 0x08	; 8
    c5ae:	a9 2e       	mov	r10, r25
    c5b0:	38 e0       	ldi	r19, 0x08	; 8
    c5b2:	c3 2e       	mov	r12, r19
    c5b4:	60 91 db 0d 	lds	r22, 0x0DDB
    c5b8:	8e 1b       	sub	r24, r30
    c5ba:	0e 94 e2 4d 	call	0x9bc4	; 0x9bc4 <LBCollides>
    c5be:	88 23       	and	r24, r24
    c5c0:	79 f0       	breq	.+30     	; 0xc5e0 <animate_enemies+0x136>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    c5c2:	80 91 e1 0d 	lds	r24, 0x0DE1
    c5c6:	84 fd       	sbrc	r24, 4
    c5c8:	0b c0       	rjmp	.+22     	; 0xc5e0 <animate_enemies+0x136>
			)
			{
				SFX_PLAYER_EXPLODE;
    c5ca:	41 e0       	ldi	r20, 0x01	; 1
    c5cc:	6f ef       	ldi	r22, 0xFF	; 255
    c5ce:	85 e0       	ldi	r24, 0x05	; 5
    c5d0:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
				game.player.shield = 0;
    c5d4:	10 92 e8 0d 	sts	0x0DE8, r1
				game.player.flags = EXPLODING;
    c5d8:	80 e1       	ldi	r24, 0x10	; 16
    c5da:	80 93 e1 0d 	sts	0x0DE1, r24
				return;
    c5de:	6c c0       	rjmp	.+216    	; 0xc6b8 <animate_enemies+0x20e>
    c5e0:	c2 01       	movw	r24, r4
    c5e2:	8a 54       	subi	r24, 0x4A	; 74
    c5e4:	92 4f       	sbci	r25, 0xF2	; 242
    c5e6:	fc 01       	movw	r30, r24
    c5e8:	eb 5d       	subi	r30, 0xDB	; 219
    c5ea:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    c5ec:	20 81       	ld	r18, Z
    c5ee:	22 30       	cpi	r18, 0x02	; 2
    c5f0:	69 f4       	brne	.+26     	; 0xc60c <animate_enemies+0x162>
    c5f2:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    c5f4:	e0 80       	ld	r14, Z
    c5f6:	01 e0       	ldi	r16, 0x01	; 1
    c5f8:	d4 01       	movw	r26, r8
    c5fa:	2c 91       	ld	r18, X
    c5fc:	f3 01       	movw	r30, r6
    c5fe:	40 81       	ld	r20, Z
    c600:	61 2f       	mov	r22, r17
    c602:	8b 81       	ldd	r24, Y+3	; 0x03
    c604:	9c 81       	ldd	r25, Y+4	; 0x04
    c606:	0e 94 bf 5f 	call	0xbf7e	; 0xbf7e <animate_sprite>
    c60a:	33 c0       	rjmp	.+102    	; 0xc672 <animate_enemies+0x1c8>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    c60c:	e1 2c       	mov	r14, r1
    c60e:	00 e0       	ldi	r16, 0x00	; 0
    c610:	d4 01       	movw	r26, r8
    c612:	2c 91       	ld	r18, X
    c614:	f3 01       	movw	r30, r6
    c616:	40 81       	ld	r20, Z
    c618:	61 2f       	mov	r22, r17
    c61a:	8b 81       	ldd	r24, Y+3	; 0x03
    c61c:	9c 81       	ldd	r25, Y+4	; 0x04
    c61e:	0e 94 bf 5f 	call	0xbf7e	; 0xbf7e <animate_sprite>
    c622:	82 30       	cpi	r24, 0x02	; 2
    c624:	30 f1       	brcs	.+76     	; 0xc672 <animate_enemies+0x1c8>
			{
				SFX_ENEMY_EXPLODE;
    c626:	41 e0       	ldi	r20, 0x01	; 1
    c628:	6f ef       	ldi	r22, 0xFF	; 255
    c62a:	86 e0       	ldi	r24, 0x06	; 6
    c62c:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    c630:	a9 81       	ldd	r26, Y+1	; 0x01
    c632:	ba 81       	ldd	r27, Y+2	; 0x02
    c634:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    c636:	f1 01       	movw	r30, r2
    c638:	10 82       	st	Z, r1
				game.active_enemies--;
    c63a:	80 91 d1 0d 	lds	r24, 0x0DD1
    c63e:	81 50       	subi	r24, 0x01	; 1
    c640:	80 93 d1 0d 	sts	0x0DD1, r24
    c644:	16 c0       	rjmp	.+44     	; 0xc672 <animate_enemies+0x1c8>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    c646:	a9 81       	ldd	r26, Y+1	; 0x01
    c648:	ba 81       	ldd	r27, Y+2	; 0x02
    c64a:	8c 91       	ld	r24, X
    c64c:	84 ff       	sbrs	r24, 4
    c64e:	11 c0       	rjmp	.+34     	; 0xc672 <animate_enemies+0x1c8>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    c650:	eb 81       	ldd	r30, Y+3	; 0x03
    c652:	fc 81       	ldd	r31, Y+4	; 0x04
    c654:	42 81       	ldd	r20, Z+2	; 0x02
    c656:	80 91 be 0d 	lds	r24, 0x0DBE
    c65a:	48 1b       	sub	r20, r24
    c65c:	60 81       	ld	r22, Z
    c65e:	80 91 b6 0d 	lds	r24, 0x0DB6
    c662:	68 1b       	sub	r22, r24
    c664:	d4 01       	movw	r26, r8
    c666:	0c 91       	ld	r16, X
    c668:	f3 01       	movw	r30, r6
    c66a:	20 81       	ld	r18, Z
    c66c:	81 2f       	mov	r24, r17
    c66e:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    c672:	d4 01       	movw	r26, r8
    c674:	9c 91       	ld	r25, X
    c676:	f3 01       	movw	r30, r6
    c678:	80 81       	ld	r24, Z
    c67a:	98 9f       	mul	r25, r24
    c67c:	10 0d       	add	r17, r0
    c67e:	11 24       	eor	r1, r1
    c680:	f5 e3       	ldi	r31, 0x35	; 53
    c682:	2f 0e       	add	r2, r31
    c684:	31 1c       	adc	r3, r1
    c686:	85 e3       	ldi	r24, 0x35	; 53
    c688:	48 0e       	add	r4, r24
    c68a:	51 1c       	adc	r5, r1
    c68c:	95 e3       	ldi	r25, 0x35	; 53
    c68e:	69 0e       	add	r6, r25
    c690:	71 1c       	adc	r7, r1
    c692:	a5 e3       	ldi	r26, 0x35	; 53
    c694:	8a 0e       	add	r8, r26
    c696:	91 1c       	adc	r9, r1
    c698:	eb 81       	ldd	r30, Y+3	; 0x03
    c69a:	fc 81       	ldd	r31, Y+4	; 0x04
    c69c:	f5 96       	adiw	r30, 0x35	; 53
    c69e:	fc 83       	std	Y+4, r31	; 0x04
    c6a0:	eb 83       	std	Y+3, r30	; 0x03
    c6a2:	89 81       	ldd	r24, Y+1	; 0x01
    c6a4:	9a 81       	ldd	r25, Y+2	; 0x02
    c6a6:	c5 96       	adiw	r24, 0x35	; 53
    c6a8:	9a 83       	std	Y+2, r25	; 0x02
    c6aa:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c6ac:	99 e0       	ldi	r25, 0x09	; 9
    c6ae:	49 16       	cp	r4, r25
    c6b0:	91 e0       	ldi	r25, 0x01	; 1
    c6b2:	59 06       	cpc	r5, r25
    c6b4:	09 f0       	breq	.+2      	; 0xc6b8 <animate_enemies+0x20e>
    c6b6:	27 cf       	rjmp	.-434    	; 0xc506 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    c6b8:	0f 90       	pop	r0
    c6ba:	0f 90       	pop	r0
    c6bc:	0f 90       	pop	r0
    c6be:	0f 90       	pop	r0
    c6c0:	df 91       	pop	r29
    c6c2:	cf 91       	pop	r28
    c6c4:	1f 91       	pop	r17
    c6c6:	0f 91       	pop	r16
    c6c8:	ff 90       	pop	r15
    c6ca:	ef 90       	pop	r14
    c6cc:	df 90       	pop	r13
    c6ce:	cf 90       	pop	r12
    c6d0:	af 90       	pop	r10
    c6d2:	9f 90       	pop	r9
    c6d4:	8f 90       	pop	r8
    c6d6:	7f 90       	pop	r7
    c6d8:	6f 90       	pop	r6
    c6da:	5f 90       	pop	r5
    c6dc:	4f 90       	pop	r4
    c6de:	3f 90       	pop	r3
    c6e0:	2f 90       	pop	r2
    c6e2:	08 95       	ret

0000c6e4 <animate_enemy_shots>:

void animate_enemy_shots()
{
    c6e4:	2f 92       	push	r2
    c6e6:	3f 92       	push	r3
    c6e8:	4f 92       	push	r4
    c6ea:	5f 92       	push	r5
    c6ec:	6f 92       	push	r6
    c6ee:	7f 92       	push	r7
    c6f0:	8f 92       	push	r8
    c6f2:	9f 92       	push	r9
    c6f4:	af 92       	push	r10
    c6f6:	bf 92       	push	r11
    c6f8:	cf 92       	push	r12
    c6fa:	df 92       	push	r13
    c6fc:	ef 92       	push	r14
    c6fe:	ff 92       	push	r15
    c700:	0f 93       	push	r16
    c702:	1f 93       	push	r17
    c704:	cf 93       	push	r28
    c706:	df 93       	push	r29
    c708:	49 ee       	ldi	r20, 0xE9	; 233
    c70a:	84 2e       	mov	r8, r20
    c70c:	4e e0       	ldi	r20, 0x0E	; 14
    c70e:	94 2e       	mov	r9, r20
    c710:	54 ee       	ldi	r21, 0xE4	; 228
    c712:	45 2e       	mov	r4, r21
    c714:	5e e0       	ldi	r21, 0x0E	; 14
    c716:	55 2e       	mov	r5, r21
    c718:	cb ed       	ldi	r28, 0xDB	; 219
    c71a:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c71c:	10 e0       	ldi	r17, 0x00	; 0
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    c71e:	60 e1       	ldi	r22, 0x10	; 16
    c720:	b6 2e       	mov	r11, r22
    c722:	8f e0       	ldi	r24, 0x0F	; 15
    c724:	f8 2e       	mov	r15, r24
    c726:	f1 0e       	add	r15, r17
    c728:	f4 01       	movw	r30, r8
    c72a:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    c72c:	80 81       	ld	r24, Z
    c72e:	87 30       	cpi	r24, 0x07	; 7
    c730:	09 f0       	breq	.+2      	; 0xc734 <animate_enemy_shots+0x50>
    c732:	8d c0       	rjmp	.+282    	; 0xc84e <animate_enemy_shots+0x16a>
			{
				if (game.enemies[i].shot[j].active)
    c734:	f4 01       	movw	r30, r8
    c736:	80 81       	ld	r24, Z
    c738:	88 23       	and	r24, r24
    c73a:	09 f4       	brne	.+2      	; 0xc73e <animate_enemy_shots+0x5a>
    c73c:	81 c0       	rjmp	.+258    	; 0xc840 <animate_enemy_shots+0x15c>
    c73e:	3e 01       	movw	r6, r28
    c740:	f5 e0       	ldi	r31, 0x05	; 5
    c742:	6f 0e       	add	r6, r31
    c744:	71 1c       	adc	r7, r1
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c746:	c3 01       	movw	r24, r6
    c748:	0e 94 60 5b 	call	0xb6c0	; 0xb6c0 <out_of_bounds>
    c74c:	81 11       	cpse	r24, r1
    c74e:	3f c0       	rjmp	.+126    	; 0xc7ce <animate_enemy_shots+0xea>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    c750:	41 e0       	ldi	r20, 0x01	; 1
    c752:	61 e0       	ldi	r22, 0x01	; 1
    c754:	c3 01       	movw	r24, r6
    c756:	0e 94 06 5c 	call	0xb80c	; 0xb80c <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    c75a:	81 11       	cpse	r24, r1
    c75c:	38 c0       	rjmp	.+112    	; 0xc7ce <animate_enemy_shots+0xea>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    c75e:	6f 80       	ldd	r6, Y+7	; 0x07
    c760:	78 84       	ldd	r7, Y+8	; 0x08
    c762:	2d 80       	ldd	r2, Y+5	; 0x05
    c764:	3e 80       	ldd	r3, Y+6	; 0x06
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    c766:	d0 90 b6 0d 	lds	r13, 0x0DB6
    c76a:	02 2d       	mov	r16, r2
    c76c:	0d 19       	sub	r16, r13
    c76e:	20 91 e5 0d 	lds	r18, 0x0DE5
    c772:	22 0f       	add	r18, r18
    c774:	22 0f       	add	r18, r18
    c776:	22 0f       	add	r18, r18
    c778:	40 91 e4 0d 	lds	r20, 0x0DE4
    c77c:	44 0f       	add	r20, r20
    c77e:	44 0f       	add	r20, r20
    c780:	44 0f       	add	r20, r20
    c782:	80 91 d9 0d 	lds	r24, 0x0DD9
    c786:	98 e0       	ldi	r25, 0x08	; 8
    c788:	a9 2e       	mov	r10, r25
    c78a:	38 e0       	ldi	r19, 0x08	; 8
    c78c:	c3 2e       	mov	r12, r19
    c78e:	e6 2c       	mov	r14, r6
    c790:	60 91 db 0d 	lds	r22, 0x0DDB
    c794:	8d 19       	sub	r24, r13
    c796:	0e 94 e2 4d 	call	0x9bc4	; 0x9bc4 <LBCollides>
    c79a:	88 23       	and	r24, r24
    c79c:	d9 f0       	breq	.+54     	; 0xc7d4 <animate_enemy_shots+0xf0>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    c79e:	41 e0       	ldi	r20, 0x01	; 1
    c7a0:	6f ef       	ldi	r22, 0xFF	; 255
    c7a2:	84 e0       	ldi	r24, 0x04	; 4
    c7a4:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    c7a8:	80 91 e8 0d 	lds	r24, 0x0DE8
    c7ac:	f4 01       	movw	r30, r8
    c7ae:	31 97       	sbiw	r30, 0x01	; 1
    c7b0:	90 81       	ld	r25, Z
    c7b2:	89 1b       	sub	r24, r25
    c7b4:	80 93 e8 0d 	sts	0x0DE8, r24
#endif
						if (game.player.shield <= 0)
    c7b8:	18 16       	cp	r1, r24
    c7ba:	4c f0       	brlt	.+18     	; 0xc7ce <animate_enemy_shots+0xea>
						{
							SFX_PLAYER_EXPLODE;
    c7bc:	41 e0       	ldi	r20, 0x01	; 1
    c7be:	6f ef       	ldi	r22, 0xFF	; 255
    c7c0:	85 e0       	ldi	r24, 0x05	; 5
    c7c2:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
							game.player.shield = 0;
    c7c6:	10 92 e8 0d 	sts	0x0DE8, r1
							game.player.flags = EXPLODING;
    c7ca:	b0 92 e1 0d 	sts	0x0DE1, r11
						}
						game.enemies[i].shot[j].active = 0;
    c7ce:	f4 01       	movw	r30, r8
    c7d0:	10 82       	st	Z, r1
    c7d2:	36 c0       	rjmp	.+108    	; 0xc840 <animate_enemy_shots+0x15c>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c7d4:	00 91 d0 0d 	lds	r16, 0x0DD0
    c7d8:	60 2f       	mov	r22, r16
    c7da:	f4 01       	movw	r30, r8
    c7dc:	34 97       	sbiw	r30, 0x04	; 4
    c7de:	80 81       	ld	r24, Z
    c7e0:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    c7e4:	28 0e       	add	r2, r24
    c7e6:	39 1e       	adc	r3, r25
    c7e8:	3e 82       	std	Y+6, r3	; 0x06
    c7ea:	2d 82       	std	Y+5, r2	; 0x05
    c7ec:	28 81       	ld	r18, Y
						if ((i % 2) == 0 && (game.enemies[i].enemy_type == ENEMY_BOSS_TURRET || game.enemies[i].enemy_type == ENEMY_BOSS_EYE))
    c7ee:	10 fd       	sbrc	r17, 0
    c7f0:	09 c0       	rjmp	.+18     	; 0xc804 <animate_enemy_shots+0x120>
    c7f2:	3a ef       	ldi	r19, 0xFA	; 250
    c7f4:	32 0f       	add	r19, r18
    c7f6:	32 30       	cpi	r19, 0x02	; 2
    c7f8:	28 f4       	brcc	.+10     	; 0xc804 <animate_enemy_shots+0x120>
						{
							game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    c7fa:	28 0e       	add	r2, r24
    c7fc:	39 1e       	adc	r3, r25
    c7fe:	3e 82       	std	Y+6, r3	; 0x06
    c800:	2d 82       	std	Y+5, r2	; 0x05
    c802:	0c c0       	rjmp	.+24     	; 0xc81c <animate_enemy_shots+0x138>
						}
						else if (game.enemies[i].enemy_type == ENEMY_BOSS_EYE && game.frame_counter % 10 == 0)
    c804:	27 30       	cpi	r18, 0x07	; 7
    c806:	51 f4       	brne	.+20     	; 0xc81c <animate_enemy_shots+0x138>
    c808:	80 2f       	mov	r24, r16
    c80a:	6a e0       	ldi	r22, 0x0A	; 10
    c80c:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    c810:	91 11       	cpse	r25, r1
    c812:	04 c0       	rjmp	.+8      	; 0xc81c <animate_enemy_shots+0x138>
						{
							game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shared.vy;
    c814:	f2 01       	movw	r30, r4
    c816:	80 81       	ld	r24, Z
    c818:	81 95       	neg	r24
    c81a:	80 83       	st	Z, r24
						}
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    c81c:	60 2f       	mov	r22, r16
    c81e:	f2 01       	movw	r30, r4
    c820:	80 81       	ld	r24, Z
    c822:	0e 94 9b 4c 	call	0x9936	; 0x9936 <LBMoveDelta>
    c826:	86 0d       	add	r24, r6
    c828:	97 1d       	adc	r25, r7
    c82a:	98 87       	std	Y+8, r25	; 0x08
    c82c:	8f 83       	std	Y+7, r24	; 0x07
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    c82e:	90 91 be 0d 	lds	r25, 0x0DBE
    c832:	48 2f       	mov	r20, r24
    c834:	49 1b       	sub	r20, r25
    c836:	6d 81       	ldd	r22, Y+5	; 0x05
    c838:	6d 19       	sub	r22, r13
    c83a:	01 e0       	ldi	r16, 0x01	; 1
    c83c:	21 e0       	ldi	r18, 0x01	; 1
    c83e:	04 c0       	rjmp	.+8      	; 0xc848 <animate_enemy_shots+0x164>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    c840:	01 e0       	ldi	r16, 0x01	; 1
    c842:	21 e0       	ldi	r18, 0x01	; 1
    c844:	40 e0       	ldi	r20, 0x00	; 0
    c846:	60 ee       	ldi	r22, 0xE0	; 224
    c848:	8f 2d       	mov	r24, r15
    c84a:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c84e:	1f 5f       	subi	r17, 0xFF	; 255
    c850:	f5 e3       	ldi	r31, 0x35	; 53
    c852:	8f 0e       	add	r8, r31
    c854:	91 1c       	adc	r9, r1
    c856:	85 e3       	ldi	r24, 0x35	; 53
    c858:	48 0e       	add	r4, r24
    c85a:	51 1c       	adc	r5, r1
    c85c:	e5 96       	adiw	r28, 0x35	; 53
    c85e:	15 30       	cpi	r17, 0x05	; 5
    c860:	09 f0       	breq	.+2      	; 0xc864 <animate_enemy_shots+0x180>
    c862:	5f cf       	rjmp	.-322    	; 0xc722 <animate_enemy_shots+0x3e>
				}
			}
			slot += 1;
		}
	}
}
    c864:	df 91       	pop	r29
    c866:	cf 91       	pop	r28
    c868:	1f 91       	pop	r17
    c86a:	0f 91       	pop	r16
    c86c:	ff 90       	pop	r15
    c86e:	ef 90       	pop	r14
    c870:	df 90       	pop	r13
    c872:	cf 90       	pop	r12
    c874:	bf 90       	pop	r11
    c876:	af 90       	pop	r10
    c878:	9f 90       	pop	r9
    c87a:	8f 90       	pop	r8
    c87c:	7f 90       	pop	r7
    c87e:	6f 90       	pop	r6
    c880:	5f 90       	pop	r5
    c882:	4f 90       	pop	r4
    c884:	3f 90       	pop	r3
    c886:	2f 90       	pop	r2
    c888:	08 95       	ret

0000c88a <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    c88a:	df 92       	push	r13
    c88c:	ef 92       	push	r14
    c88e:	ff 92       	push	r15
    c890:	0f 93       	push	r16
    c892:	1f 93       	push	r17
    c894:	cf 93       	push	r28
    c896:	df 93       	push	r29
    c898:	ec 01       	movw	r28, r24
    c89a:	16 2f       	mov	r17, r22
    c89c:	7a 01       	movw	r14, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    c89e:	8e e0       	ldi	r24, 0x0E	; 14
    c8a0:	d8 2e       	mov	r13, r24

void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c8a2:	fe 01       	movw	r30, r28
    c8a4:	84 91       	lpm	r24, Z
    c8a6:	83 32       	cpi	r24, 0x23	; 35
    c8a8:	29 f1       	breq	.+74     	; 0xc8f4 <stream_text_middle+0x6a>
	{
		ln = strnlen_P(dialogue, 255);
    c8aa:	6f ef       	ldi	r22, 0xFF	; 255
    c8ac:	70 e0       	ldi	r23, 0x00	; 0
    c8ae:	ce 01       	movw	r24, r28
    c8b0:	0e 94 7e 73 	call	0xe6fc	; 0xe6fc <strnlen_P>
		x = 14 - ln / 2;
    c8b4:	86 95       	lsr	r24
    c8b6:	0d 2d       	mov	r16, r13
    c8b8:	08 1b       	sub	r16, r24
    c8ba:	0c 1b       	sub	r16, r28
    c8bc:	8c 2f       	mov	r24, r28
    c8be:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c8c0:	21 96       	adiw	r28, 0x01	; 1
    c8c2:	fe 01       	movw	r30, r28
    c8c4:	31 97       	sbiw	r30, 0x01	; 1
    c8c6:	44 91       	lpm	r20, Z
    c8c8:	44 23       	and	r20, r20
    c8ca:	91 f0       	breq	.+36     	; 0xc8f0 <stream_text_middle+0x66>
		{
			LBPrintChar(x++, y, c);
    c8cc:	61 2f       	mov	r22, r17
    c8ce:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    c8d2:	60 e0       	ldi	r22, 0x00	; 0
    c8d4:	8d e4       	ldi	r24, 0x4D	; 77
    c8d6:	9e e0       	ldi	r25, 0x0E	; 14
    c8d8:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) WaitUs(delay);
    c8dc:	80 91 51 0e 	lds	r24, 0x0E51
    c8e0:	90 91 52 0e 	lds	r25, 0x0E52
    c8e4:	90 fd       	sbrc	r25, 0
    c8e6:	ea cf       	rjmp	.-44     	; 0xc8bc <stream_text_middle+0x32>
    c8e8:	c7 01       	movw	r24, r14
    c8ea:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <WaitUs>
    c8ee:	e6 cf       	rjmp	.-52     	; 0xc8bc <stream_text_middle+0x32>
		}
		y++;
    c8f0:	1f 5f       	subi	r17, 0xFF	; 255
    c8f2:	d7 cf       	rjmp	.-82     	; 0xc8a2 <stream_text_middle+0x18>
	}
}
    c8f4:	df 91       	pop	r29
    c8f6:	cf 91       	pop	r28
    c8f8:	1f 91       	pop	r17
    c8fa:	0f 91       	pop	r16
    c8fc:	ff 90       	pop	r15
    c8fe:	ef 90       	pop	r14
    c900:	df 90       	pop	r13
    c902:	08 95       	ret

0000c904 <print_scroll>:

void print_scroll(const unsigned char text[])
{
    c904:	0f 93       	push	r16
    c906:	cf 93       	push	r28
    c908:	df 93       	push	r29
    c90a:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    c90c:	40 e0       	ldi	r20, 0x00	; 0
    c90e:	6a ef       	ldi	r22, 0xFA	; 250
    c910:	70 e3       	ldi	r23, 0x30	; 48
    c912:	80 e0       	ldi	r24, 0x00	; 0
    c914:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    c918:	01 e0       	ldi	r16, 0x01	; 1
    c91a:	21 e0       	ldi	r18, 0x01	; 1
    c91c:	40 e3       	ldi	r20, 0x30	; 48
    c91e:	60 e5       	ldi	r22, 0x50	; 80
    c920:	80 e0       	ldi	r24, 0x00	; 0
    c922:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    c926:	40 e0       	ldi	r20, 0x00	; 0
    c928:	67 ef       	ldi	r22, 0xF7	; 247
    c92a:	70 e3       	ldi	r23, 0x30	; 48
    c92c:	81 e0       	ldi	r24, 0x01	; 1
    c92e:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    c932:	21 e0       	ldi	r18, 0x01	; 1
    c934:	40 e3       	ldi	r20, 0x30	; 48
    c936:	60 e6       	ldi	r22, 0x60	; 96
    c938:	81 e0       	ldi	r24, 0x01	; 1
    c93a:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    c93e:	40 e0       	ldi	r20, 0x00	; 0
    c940:	64 ef       	ldi	r22, 0xF4	; 244
    c942:	70 e3       	ldi	r23, 0x30	; 48
    c944:	82 e0       	ldi	r24, 0x02	; 2
    c946:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    c94a:	21 e0       	ldi	r18, 0x01	; 1
    c94c:	40 e3       	ldi	r20, 0x30	; 48
    c94e:	60 e7       	ldi	r22, 0x70	; 112
    c950:	82 e0       	ldi	r24, 0x02	; 2
    c952:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    c956:	40 e0       	ldi	r20, 0x00	; 0
    c958:	61 ef       	ldi	r22, 0xF1	; 241
    c95a:	70 e3       	ldi	r23, 0x30	; 48
    c95c:	83 e0       	ldi	r24, 0x03	; 3
    c95e:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    c962:	21 e0       	ldi	r18, 0x01	; 1
    c964:	40 e3       	ldi	r20, 0x30	; 48
    c966:	60 e8       	ldi	r22, 0x80	; 128
    c968:	83 e0       	ldi	r24, 0x03	; 3
    c96a:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    c96e:	40 e0       	ldi	r20, 0x00	; 0
    c970:	6e ee       	ldi	r22, 0xEE	; 238
    c972:	70 e3       	ldi	r23, 0x30	; 48
    c974:	84 e0       	ldi	r24, 0x04	; 4
    c976:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    c97a:	21 e0       	ldi	r18, 0x01	; 1
    c97c:	40 e3       	ldi	r20, 0x30	; 48
    c97e:	60 e9       	ldi	r22, 0x90	; 144
    c980:	84 e0       	ldi	r24, 0x04	; 4
    c982:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	LBRotateSprites();
    c986:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	stream_text_middle((const char*) text, 12, CHARACTER_DELAY_US);
    c98a:	40 e7       	ldi	r20, 0x70	; 112
    c98c:	57 e1       	ldi	r21, 0x17	; 23
    c98e:	6c e0       	ldi	r22, 0x0C	; 12
    c990:	ce 01       	movw	r24, r28
    c992:	0e 94 45 64 	call	0xc88a	; 0xc88a <stream_text_middle>
	LBWaitSeconds(2);
    c996:	82 e0       	ldi	r24, 0x02	; 2
}
    c998:	df 91       	pop	r29
    c99a:	cf 91       	pop	r28
    c99c:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12, CHARACTER_DELAY_US);
	LBWaitSeconds(2);
    c99e:	0c 94 22 4e 	jmp	0x9c44	; 0x9c44 <LBWaitSeconds>

0000c9a2 <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    c9a2:	ef 92       	push	r14
    c9a4:	ff 92       	push	r15
    c9a6:	0f 93       	push	r16
    c9a8:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    c9aa:	c8 2f       	mov	r28, r24
    c9ac:	e6 2e       	mov	r14, r22
    c9ae:	f1 2c       	mov	r15, r1
    c9b0:	e8 0e       	add	r14, r24
    c9b2:	f1 1c       	adc	r15, r1
    c9b4:	8c 2f       	mov	r24, r28
    c9b6:	90 e0       	ldi	r25, 0x00	; 0
    c9b8:	8e 15       	cp	r24, r14
    c9ba:	9f 05       	cpc	r25, r15
    c9bc:	7c f4       	brge	.+30     	; 0xc9dc <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    c9be:	40 e0       	ldi	r20, 0x00	; 0
    c9c0:	62 e1       	ldi	r22, 0x12	; 18
    c9c2:	71 e3       	ldi	r23, 0x31	; 49
    c9c4:	8c 2f       	mov	r24, r28
    c9c6:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    c9ca:	01 e0       	ldi	r16, 0x01	; 1
    c9cc:	21 e0       	ldi	r18, 0x01	; 1
    c9ce:	40 e0       	ldi	r20, 0x00	; 0
    c9d0:	60 ee       	ldi	r22, 0xE0	; 224
    c9d2:	8c 2f       	mov	r24, r28
    c9d4:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    c9d8:	cf 5f       	subi	r28, 0xFF	; 255
    c9da:	ec cf       	rjmp	.-40     	; 0xc9b4 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    c9dc:	cf 91       	pop	r28
    c9de:	0f 91       	pop	r16
    c9e0:	ff 90       	pop	r15
    c9e2:	ef 90       	pop	r14
    c9e4:	08 95       	ret

0000c9e6 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    c9e6:	61 e0       	ldi	r22, 0x01	; 1
    c9e8:	81 e0       	ldi	r24, 0x01	; 1
    c9ea:	0e 94 66 4c 	call	0x98cc	; 0x98cc <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    c9ee:	64 e1       	ldi	r22, 0x14	; 20
    c9f0:	80 e0       	ldi	r24, 0x00	; 0
    c9f2:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    c9f6:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	ClearVram();
    c9fa:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c9fe:	60 e0       	ldi	r22, 0x00	; 0
    ca00:	81 e0       	ldi	r24, 0x01	; 1
    ca02:	0c 94 5a 4c 	jmp	0x98b4	; 0x98b4 <FadeIn>

0000ca06 <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    ca06:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	StartSong(spacesong);
    ca0a:	83 e3       	ldi	r24, 0x33	; 51
    ca0c:	94 e0       	ldi	r25, 0x04	; 4
    ca0e:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <StartSong>
	Screen.scrollX = 0;
    ca12:	e2 eb       	ldi	r30, 0xB2	; 178
    ca14:	fc e0       	ldi	r31, 0x0C	; 12
    ca16:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    ca18:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    ca1a:	80 e2       	ldi	r24, 0x20	; 32
    ca1c:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    ca1e:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    ca20:	82 ec       	ldi	r24, 0xC2	; 194
    ca22:	91 e0       	ldi	r25, 0x01	; 1
    ca24:	0e 94 82 64 	call	0xc904	; 0xc904 <print_scroll>
	StopSong();
    ca28:	0c 94 1d 41 	jmp	0x823a	; 0x823a <StopSong>

0000ca2c <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    ca2c:	0f 93       	push	r16
    ca2e:	cf 93       	push	r28
    ca30:	df 93       	push	r29
    ca32:	c8 2f       	mov	r28, r24
    ca34:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    ca36:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    ca3a:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 29;
    ca3e:	8d e1       	ldi	r24, 0x1D	; 29
    ca40:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayTileTable = tiles_data;
    ca44:	85 e1       	ldi	r24, 0x15	; 21
    ca46:	91 e3       	ldi	r25, 0x31	; 49
    ca48:	90 93 b4 0c 	sts	0x0CB4, r25
    ca4c:	80 93 b3 0c 	sts	0x0CB3, r24
	Screen.overlayHeight = 3;
    ca50:	83 e0       	ldi	r24, 0x03	; 3
    ca52:	80 93 b2 0c 	sts	0x0CB2, r24
	clear_overlay(2);
    ca56:	82 e0       	ldi	r24, 0x02	; 2
    ca58:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <clear_overlay>
	game.current_level_index = index;
    ca5c:	c0 93 cb 0d 	sts	0x0DCB, r28
	game.level_ended = 0;
    ca60:	10 92 d3 0d 	sts	0x0DD3, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ca64:	10 92 52 0e 	sts	0x0E52, r1
    ca68:	10 92 51 0e 	sts	0x0E51, r1
	p->pressed = 0;
    ca6c:	10 92 4e 0e 	sts	0x0E4E, r1
    ca70:	10 92 4d 0e 	sts	0x0E4D, r1
	p->released = 0;
    ca74:	10 92 50 0e 	sts	0x0E50, r1
    ca78:	10 92 4f 0e 	sts	0x0E4F, r1
	p->held_cycles = 0;
    ca7c:	10 92 53 0e 	sts	0x0E53, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    ca80:	10 92 cd 0e 	sts	0x0ECD, r1
    ca84:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    ca88:	10 92 c9 0e 	sts	0x0EC9, r1
    ca8c:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    ca90:	10 92 cb 0e 	sts	0x0ECB, r1
    ca94:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    ca98:	10 92 ce 0e 	sts	0x0ECE, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    ca9c:	8c 2f       	mov	r24, r28
    ca9e:	90 e0       	ldi	r25, 0x00	; 0
    caa0:	8a 30       	cpi	r24, 0x0A	; 10
    caa2:	91 05       	cpc	r25, r1
    caa4:	d8 f4       	brcc	.+54     	; 0xcadc <load_level+0xb0>
    caa6:	fc 01       	movw	r30, r24
    caa8:	ef 5b       	subi	r30, 0xBF	; 191
    caaa:	ff 4f       	sbci	r31, 0xFF	; 255
    caac:	0c 94 f1 71 	jmp	0xe3e2	; 0xe3e2 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    cab0:	8a e4       	ldi	r24, 0x4A	; 74
    cab2:	90 e7       	ldi	r25, 0x70	; 112
    cab4:	11 c0       	rjmp	.+34     	; 0xcad8 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    cab6:	89 e4       	ldi	r24, 0x49	; 73
    cab8:	9f e6       	ldi	r25, 0x6F	; 111
    caba:	0e c0       	rjmp	.+28     	; 0xcad8 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    cabc:	88 e4       	ldi	r24, 0x48	; 72
    cabe:	9e e6       	ldi	r25, 0x6E	; 110
    cac0:	0b c0       	rjmp	.+22     	; 0xcad8 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    cac2:	87 e4       	ldi	r24, 0x47	; 71
    cac4:	9d e6       	ldi	r25, 0x6D	; 109
    cac6:	08 c0       	rjmp	.+16     	; 0xcad8 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    cac8:	85 e4       	ldi	r24, 0x45	; 69
    caca:	9b e6       	ldi	r25, 0x6B	; 107
    cacc:	05 c0       	rjmp	.+10     	; 0xcad8 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    cace:	86 e4       	ldi	r24, 0x46	; 70
    cad0:	9c e6       	ldi	r25, 0x6C	; 108
    cad2:	02 c0       	rjmp	.+4      	; 0xcad8 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    cad4:	84 e4       	ldi	r24, 0x44	; 68
    cad6:	9a e6       	ldi	r25, 0x6A	; 106
    cad8:	0e 94 06 5a 	call	0xb40c	; 0xb40c <map_level_info>
	}
	game.column_count = 0;
    cadc:	10 92 c7 0d 	sts	0x0DC7, r1
	game.camera_x = get_camera_x(index);
    cae0:	10 92 b7 0d 	sts	0x0DB7, r1
    cae4:	10 92 b6 0d 	sts	0x0DB6, r1
	game.camera_y = get_camera_y(index);
    cae8:	10 92 be 0d 	sts	0x0DBE, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    caec:	88 e1       	ldi	r24, 0x18	; 24
    caee:	90 e0       	ldi	r25, 0x00	; 0
    caf0:	90 93 da 0d 	sts	0x0DDA, r25
    caf4:	80 93 d9 0d 	sts	0x0DD9, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    caf8:	88 ea       	ldi	r24, 0xA8	; 168
    cafa:	90 e0       	ldi	r25, 0x00	; 0
    cafc:	90 93 dc 0d 	sts	0x0DDC, r25
    cb00:	80 93 db 0d 	sts	0x0DDB, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    cb04:	28 ed       	ldi	r18, 0xD8	; 216
    cb06:	37 e0       	ldi	r19, 0x07	; 7
    cb08:	30 93 55 0e 	sts	0x0E55, r19
    cb0c:	20 93 54 0e 	sts	0x0E54, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    cb10:	90 93 57 0e 	sts	0x0E57, r25
    cb14:	80 93 56 0e 	sts	0x0E56, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cb18:	8d e1       	ldi	r24, 0x1D	; 29
    cb1a:	80 93 bf 0d 	sts	0x0DBF, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    cb1e:	80 93 c3 0d 	sts	0x0DC3, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cb22:	8a e1       	ldi	r24, 0x1A	; 26
    cb24:	80 93 c0 0d 	sts	0x0DC0, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    cb28:	80 93 c4 0d 	sts	0x0DC4, r24
	game.scroll_x = 0;
    cb2c:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    cb30:	10 92 c2 0d 	sts	0x0DC2, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    cb34:	8a e0       	ldi	r24, 0x0A	; 10
    cb36:	80 93 d2 0d 	sts	0x0DD2, r24
	game.flags = 0;
    cb3a:	10 92 d5 0d 	sts	0x0DD5, r1
	render_camera_view();
    cb3e:	0e 94 06 58 	call	0xb00c	; 0xb00c <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    cb42:	4c ef       	ldi	r20, 0xFC	; 252
    cb44:	53 e0       	ldi	r21, 0x03	; 3
    cb46:	6d e1       	ldi	r22, 0x1D	; 29
    cb48:	80 e0       	ldi	r24, 0x00	; 0
    cb4a:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    cb4e:	4f ee       	ldi	r20, 0xEF	; 239
    cb50:	53 e0       	ldi	r21, 0x03	; 3
    cb52:	6d e1       	ldi	r22, 0x1D	; 29
    cb54:	82 e1       	ldi	r24, 0x12	; 18
    cb56:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    cb5a:	45 ef       	ldi	r20, 0xF5	; 245
    cb5c:	53 e0       	ldi	r21, 0x03	; 3
    cb5e:	6e e1       	ldi	r22, 0x1E	; 30
    cb60:	80 e0       	ldi	r24, 0x00	; 0
    cb62:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    cb66:	44 e0       	ldi	r20, 0x04	; 4
    cb68:	54 e0       	ldi	r21, 0x04	; 4
    cb6a:	6e e1       	ldi	r22, 0x1E	; 30
    cb6c:	81 e1       	ldi	r24, 0x11	; 17
    cb6e:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    cb72:	4e ea       	ldi	r20, 0xAE	; 174
    cb74:	53 e0       	ldi	r21, 0x03	; 3
    cb76:	6f e1       	ldi	r22, 0x1F	; 31
    cb78:	81 e1       	ldi	r24, 0x11	; 17
    cb7a:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    cb7e:	21 e0       	ldi	r18, 0x01	; 1
    cb80:	40 91 e8 0d 	lds	r20, 0x0DE8
    cb84:	6d e1       	ldi	r22, 0x1D	; 29
    cb86:	89 e0       	ldi	r24, 0x09	; 9
    cb88:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    cb8c:	40 91 bc 0d 	lds	r20, 0x0DBC
    cb90:	50 91 bd 0d 	lds	r21, 0x0DBD
    cb94:	21 e0       	ldi	r18, 0x01	; 1
    cb96:	6d e1       	ldi	r22, 0x1D	; 29
    cb98:	8b e1       	ldi	r24, 0x1B	; 27
    cb9a:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    cb9e:	21 e0       	ldi	r18, 0x01	; 1
    cba0:	40 91 c9 0d 	lds	r20, 0x0DC9
    cba4:	6e e1       	ldi	r22, 0x1E	; 30
    cba6:	89 e0       	ldi	r24, 0x09	; 9
    cba8:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    cbac:	40 91 ba 0d 	lds	r20, 0x0DBA
    cbb0:	50 91 bb 0d 	lds	r21, 0x0DBB
    cbb4:	21 e0       	ldi	r18, 0x01	; 1
    cbb6:	6e e1       	ldi	r22, 0x1E	; 30
    cbb8:	8b e1       	ldi	r24, 0x1B	; 27
    cbba:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    cbbe:	40 91 b8 0d 	lds	r20, 0x0DB8
    cbc2:	50 91 b9 0d 	lds	r21, 0x0DB9
    cbc6:	21 e0       	ldi	r18, 0x01	; 1
    cbc8:	6f e1       	ldi	r22, 0x1F	; 31
    cbca:	8b e1       	ldi	r24, 0x1B	; 27
    cbcc:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    cbd0:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    cbd4:	81 11       	cpse	r24, r1
    cbd6:	39 c0       	rjmp	.+114    	; 0xcc4a <load_level+0x21e>
    cbd8:	dd 23       	and	r29, r29
    cbda:	b9 f1       	breq	.+110    	; 0xcc4a <load_level+0x21e>
	{
		map_ship();
    cbdc:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    cbe0:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    cbe2:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    cbe4:	81 e0       	ldi	r24, 0x01	; 1
    cbe6:	90 e0       	ldi	r25, 0x00	; 0
    cbe8:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    cbec:	8c 2f       	mov	r24, r28
    cbee:	90 e0       	ldi	r25, 0x00	; 0
    cbf0:	88 3a       	cpi	r24, 0xA8	; 168
    cbf2:	91 05       	cpc	r25, r1
    cbf4:	74 f0       	brlt	.+28     	; 0xcc12 <load_level+0x1e6>
			{
				LBMapSprite(0, map_hero_idle, 0);
    cbf6:	40 e0       	ldi	r20, 0x00	; 0
    cbf8:	66 ee       	ldi	r22, 0xE6	; 230
    cbfa:	70 e3       	ldi	r23, 0x30	; 48
    cbfc:	80 e0       	ldi	r24, 0x00	; 0
    cbfe:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    cc02:	03 e0       	ldi	r16, 0x03	; 3
    cc04:	22 e0       	ldi	r18, 0x02	; 2
    cc06:	48 ea       	ldi	r20, 0xA8	; 168
    cc08:	68 e1       	ldi	r22, 0x18	; 24
    cc0a:	80 e0       	ldi	r24, 0x00	; 0
    cc0c:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
				ship_increment = -3;
    cc10:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    cc12:	8d e2       	ldi	r24, 0x2D	; 45
    cc14:	9e e0       	ldi	r25, 0x0E	; 14
    cc16:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    cc1a:	40 e0       	ldi	r20, 0x00	; 0
    cc1c:	bc 01       	movw	r22, r24
    cc1e:	86 e0       	ldi	r24, 0x06	; 6
    cc20:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    cc24:	02 e0       	ldi	r16, 0x02	; 2
    cc26:	24 e0       	ldi	r18, 0x04	; 4
    cc28:	4c 2f       	mov	r20, r28
    cc2a:	68 e0       	ldi	r22, 0x08	; 8
    cc2c:	86 e0       	ldi	r24, 0x06	; 6
    cc2e:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
			ship_y += ship_increment;
    cc32:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    cc34:	39 f4       	brne	.+14     	; 0xcc44 <load_level+0x218>
			{
				clear_sprites(6, 8);
    cc36:	68 e0       	ldi	r22, 0x08	; 8
    cc38:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    cc3a:	df 91       	pop	r29
    cc3c:	cf 91       	pop	r28
    cc3e:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    cc40:	0c 94 d1 64 	jmp	0xc9a2	; 0xc9a2 <clear_sprites>
				break;
			}
			LBRotateSprites();
    cc44:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
		}
    cc48:	cd cf       	rjmp	.-102    	; 0xcbe4 <load_level+0x1b8>
	}
}
    cc4a:	df 91       	pop	r29
    cc4c:	cf 91       	pop	r28
    cc4e:	0f 91       	pop	r16
    cc50:	08 95       	ret

0000cc52 <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    cc52:	0f 93       	push	r16
    cc54:	1f 93       	push	r17
    cc56:	cf 93       	push	r28
    cc58:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    cc5a:	18 2f       	mov	r17, r24
    cc5c:	c6 2f       	mov	r28, r22
    cc5e:	d0 e0       	ldi	r29, 0x00	; 0
    cc60:	c8 0f       	add	r28, r24
    cc62:	d1 1d       	adc	r29, r1
    cc64:	81 2f       	mov	r24, r17
    cc66:	90 e0       	ldi	r25, 0x00	; 0
    cc68:	8c 17       	cp	r24, r28
    cc6a:	9d 07       	cpc	r25, r29
    cc6c:	4c f4       	brge	.+18     	; 0xcc80 <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    cc6e:	01 e0       	ldi	r16, 0x01	; 1
    cc70:	21 e0       	ldi	r18, 0x01	; 1
    cc72:	40 e0       	ldi	r20, 0x00	; 0
    cc74:	60 ee       	ldi	r22, 0xE0	; 224
    cc76:	81 2f       	mov	r24, r17
    cc78:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    cc7c:	1f 5f       	subi	r17, 0xFF	; 255
    cc7e:	f2 cf       	rjmp	.-28     	; 0xcc64 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    cc80:	df 91       	pop	r29
    cc82:	cf 91       	pop	r28
    cc84:	1f 91       	pop	r17
    cc86:	0f 91       	pop	r16
    cc88:	08 95       	ret

0000cc8a <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    cc8a:	fc 01       	movw	r30, r24
    cc8c:	20 81       	ld	r18, Z
    cc8e:	31 81       	ldd	r19, Z+1	; 0x01
    cc90:	29 70       	andi	r18, 0x09	; 9
    cc92:	33 27       	eor	r19, r19
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
    cc94:	81 e0       	ldi	r24, 0x01	; 1
    cc96:	23 2b       	or	r18, r19
    cc98:	09 f4       	brne	.+2      	; 0xcc9c <select_pressed+0x12>
    cc9a:	80 e0       	ldi	r24, 0x00	; 0
}
    cc9c:	08 95       	ret

0000cc9e <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    cc9e:	ff 92       	push	r15
    cca0:	0f 93       	push	r16
    cca2:	1f 93       	push	r17
    cca4:	cf 93       	push	r28
    cca6:	df 93       	push	r29
    cca8:	f6 2e       	mov	r15, r22
    ccaa:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    ccac:	fc 01       	movw	r30, r24
    ccae:	24 91       	lpm	r18, Z
    ccb0:	23 32       	cpi	r18, 0x23	; 35
    ccb2:	b1 f0       	breq	.+44     	; 0xcce0 <stream_text_anywhere+0x42>
    ccb4:	ec 01       	movw	r28, r24
    ccb6:	0f 2d       	mov	r16, r15
    ccb8:	08 1b       	sub	r16, r24
    ccba:	8c 2f       	mov	r24, r28
    ccbc:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    ccbe:	21 96       	adiw	r28, 0x01	; 1
    ccc0:	fe 01       	movw	r30, r28
    ccc2:	31 97       	sbiw	r30, 0x01	; 1
    ccc4:	44 91       	lpm	r20, Z
    ccc6:	44 23       	and	r20, r20
    ccc8:	41 f0       	breq	.+16     	; 0xccda <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    ccca:	61 2f       	mov	r22, r17
    cccc:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    ccd0:	80 e7       	ldi	r24, 0x70	; 112
    ccd2:	97 e1       	ldi	r25, 0x17	; 23
    ccd4:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <WaitUs>
    ccd8:	f0 cf       	rjmp	.-32     	; 0xccba <stream_text_anywhere+0x1c>
		}
		y++;
    ccda:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    ccdc:	ce 01       	movw	r24, r28
    ccde:	e6 cf       	rjmp	.-52     	; 0xccac <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    cce0:	df 91       	pop	r29
    cce2:	cf 91       	pop	r28
    cce4:	1f 91       	pop	r17
    cce6:	0f 91       	pop	r16
    cce8:	ff 90       	pop	r15
    ccea:	08 95       	ret

0000ccec <map_particles>:

void map_particles()
{
    ccec:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    ccee:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    ccf0:	40 e0       	ldi	r20, 0x00	; 0
    ccf2:	66 e0       	ldi	r22, 0x06	; 6
    ccf4:	71 e3       	ldi	r23, 0x31	; 49
    ccf6:	8c 2f       	mov	r24, r28
    ccf8:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    ccfc:	cf 5f       	subi	r28, 0xFF	; 255
    ccfe:	c4 31       	cpi	r28, 0x14	; 20
    cd00:	b9 f7       	brne	.-18     	; 0xccf0 <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    cd02:	cf 91       	pop	r28
    cd04:	08 95       	ret

0000cd06 <place_particles>:

void place_particles()
{
    cd06:	0f 93       	push	r16
    cd08:	1f 93       	push	r17
    cd0a:	cf 93       	push	r28
    cd0c:	df 93       	push	r29
    cd0e:	1f 92       	push	r1
    cd10:	cd b7       	in	r28, 0x3d	; 61
    cd12:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    cd14:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    cd16:	68 ec       	ldi	r22, 0xC8	; 200
    cd18:	80 e0       	ldi	r24, 0x00	; 0
    cd1a:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <LBRandom>
    cd1e:	48 2f       	mov	r20, r24
    cd20:	60 ee       	ldi	r22, 0xE0	; 224
    cd22:	80 e0       	ldi	r24, 0x00	; 0
    cd24:	49 83       	std	Y+1, r20	; 0x01
    cd26:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <LBRandom>
    cd2a:	68 2f       	mov	r22, r24
    cd2c:	01 e0       	ldi	r16, 0x01	; 1
    cd2e:	21 e0       	ldi	r18, 0x01	; 1
    cd30:	49 81       	ldd	r20, Y+1	; 0x01
    cd32:	81 2f       	mov	r24, r17
    cd34:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    cd38:	1f 5f       	subi	r17, 0xFF	; 255
    cd3a:	14 31       	cpi	r17, 0x14	; 20
    cd3c:	61 f7       	brne	.-40     	; 0xcd16 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    cd3e:	0f 90       	pop	r0
    cd40:	df 91       	pop	r29
    cd42:	cf 91       	pop	r28
    cd44:	1f 91       	pop	r17
    cd46:	0f 91       	pop	r16
    cd48:	08 95       	ret

0000cd4a <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    cd4a:	ef 92       	push	r14
    cd4c:	ff 92       	push	r15
    cd4e:	0f 93       	push	r16
    cd50:	1f 93       	push	r17
    cd52:	cf 93       	push	r28
    cd54:	df 93       	push	r29
    cd56:	d8 2f       	mov	r29, r24
    cd58:	16 2f       	mov	r17, r22
    cd5a:	89 e0       	ldi	r24, 0x09	; 9
    cd5c:	e8 2e       	mov	r14, r24
    cd5e:	80 e1       	ldi	r24, 0x10	; 16
    cd60:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    cd62:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    cd64:	f7 01       	movw	r30, r14
    cd66:	40 81       	ld	r20, Z
    cd68:	4d 0f       	add	r20, r29
    cd6a:	01 e0       	ldi	r16, 0x01	; 1
    cd6c:	21 e0       	ldi	r18, 0x01	; 1
    cd6e:	31 97       	sbiw	r30, 0x01	; 1
    cd70:	60 81       	ld	r22, Z
    cd72:	8c 2f       	mov	r24, r28
    cd74:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    cd78:	f7 01       	movw	r30, r14
    cd7a:	80 81       	ld	r24, Z
    cd7c:	89 3c       	cpi	r24, 0xC9	; 201
    cd7e:	50 f0       	brcs	.+20     	; 0xcd94 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    cd80:	60 ee       	ldi	r22, 0xE0	; 224
    cd82:	80 e0       	ldi	r24, 0x00	; 0
    cd84:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <LBRandom>
    cd88:	21 e0       	ldi	r18, 0x01	; 1
    cd8a:	41 2f       	mov	r20, r17
    cd8c:	68 2f       	mov	r22, r24
    cd8e:	8c 2f       	mov	r24, r28
    cd90:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    cd94:	cf 5f       	subi	r28, 0xFF	; 255
    cd96:	f4 e0       	ldi	r31, 0x04	; 4
    cd98:	ef 0e       	add	r14, r31
    cd9a:	f1 1c       	adc	r15, r1
    cd9c:	c4 31       	cpi	r28, 0x14	; 20
    cd9e:	11 f7       	brne	.-60     	; 0xcd64 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    cda0:	df 91       	pop	r29
    cda2:	cf 91       	pop	r28
    cda4:	1f 91       	pop	r17
    cda6:	0f 91       	pop	r16
    cda8:	ff 90       	pop	r15
    cdaa:	ef 90       	pop	r14
    cdac:	08 95       	ret

0000cdae <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    cdae:	82 50       	subi	r24, 0x02	; 2
    cdb0:	87 30       	cpi	r24, 0x07	; 7
    cdb2:	48 f4       	brcc	.+18     	; 0xcdc6 <get_emarald_map+0x18>
    cdb4:	e8 2f       	mov	r30, r24
    cdb6:	f0 e0       	ldi	r31, 0x00	; 0
    cdb8:	ee 0f       	add	r30, r30
    cdba:	ff 1f       	adc	r31, r31
    cdbc:	ee 5f       	subi	r30, 0xFE	; 254
    cdbe:	fa 4f       	sbci	r31, 0xFA	; 250
    cdc0:	80 81       	ld	r24, Z
    cdc2:	91 81       	ldd	r25, Z+1	; 0x01
    cdc4:	08 95       	ret
    cdc6:	8a ef       	ldi	r24, 0xFA	; 250
    cdc8:	90 e3       	ldi	r25, 0x30	; 48
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    cdca:	08 95       	ret

0000cdcc <music_transition>:

void music_transition()
{
	if (is_space())
    cdcc:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    cdd0:	88 23       	and	r24, r24
    cdd2:	19 f0       	breq	.+6      	; 0xcdda <music_transition+0xe>
	{
		StartSong(spacesong);
    cdd4:	83 e3       	ldi	r24, 0x33	; 51
    cdd6:	94 e0       	ldi	r25, 0x04	; 4
    cdd8:	06 c0       	rjmp	.+12     	; 0xcde6 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    cdda:	80 91 cb 0d 	lds	r24, 0x0DCB
    cdde:	88 23       	and	r24, r24
    cde0:	21 f0       	breq	.+8      	; 0xcdea <music_transition+0x1e>
	{
		StartSong(planetsong);
    cde2:	83 ed       	ldi	r24, 0xD3	; 211
    cde4:	9a e0       	ldi	r25, 0x0A	; 10
    cde6:	0c 94 f4 40 	jmp	0x81e8	; 0x81e8 <StartSong>
    cdea:	08 95       	ret

0000cdec <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    cdec:	cf 92       	push	r12
    cdee:	df 92       	push	r13
    cdf0:	ef 92       	push	r14
    cdf2:	ff 92       	push	r15
    cdf4:	0f 93       	push	r16
    cdf6:	1f 93       	push	r17
    cdf8:	cf 93       	push	r28
    cdfa:	df 93       	push	r29
    cdfc:	1f 92       	push	r1
    cdfe:	cd b7       	in	r28, 0x3d	; 61
    ce00:	de b7       	in	r29, 0x3e	; 62
    ce02:	c8 2e       	mov	r12, r24
    ce04:	e6 2e       	mov	r14, r22
    ce06:	12 2f       	mov	r17, r18
    ce08:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    ce0a:	49 83       	std	Y+1, r20	; 0x01
    ce0c:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	Screen.scrollX = 0;
    ce10:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    ce14:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    ce18:	80 e2       	ldi	r24, 0x20	; 32
    ce1a:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    ce1e:	10 92 b2 0c 	sts	0x0CB2, r1
	game.scroll_x = 0;
    ce22:	10 92 c1 0d 	sts	0x0DC1, r1
	game.scroll_y = 0;
    ce26:	10 92 c2 0d 	sts	0x0DC2, r1
	map_particles();
    ce2a:	0e 94 76 66 	call	0xccec	; 0xccec <map_particles>
	map_ship();
    ce2e:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <map_ship>
	place_particles();
    ce32:	0e 94 83 66 	call	0xcd06	; 0xcd06 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    ce36:	4d ef       	ldi	r20, 0xFD	; 253
    ce38:	58 e5       	ldi	r21, 0x58	; 88
    ce3a:	69 81       	ldd	r22, Y+1	; 0x01
    ce3c:	80 e0       	ldi	r24, 0x00	; 0
    ce3e:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	game.current_level_index = index;
    ce42:	c0 92 cb 0d 	sts	0x0DCB, r12
	music_transition();
    ce46:	0e 94 e6 66 	call	0xcdcc	; 0xcdcc <music_transition>
	if (!is_space())
    ce4a:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    ce4e:	81 11       	cpse	r24, r1
    ce50:	0f c0       	rjmp	.+30     	; 0xce70 <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    ce52:	8c 2d       	mov	r24, r12
    ce54:	0e 94 d7 66 	call	0xcdae	; 0xcdae <get_emarald_map>
    ce58:	40 e0       	ldi	r20, 0x00	; 0
    ce5a:	bc 01       	movw	r22, r24
    ce5c:	88 e0       	ldi	r24, 0x08	; 8
    ce5e:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    ce62:	01 e0       	ldi	r16, 0x01	; 1
    ce64:	21 e0       	ldi	r18, 0x01	; 1
    ce66:	40 e3       	ldi	r20, 0x30	; 48
    ce68:	60 e7       	ldi	r22, 0x70	; 112
    ce6a:	88 e0       	ldi	r24, 0x08	; 8
    ce6c:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    ce70:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    ce72:	81 e0       	ldi	r24, 0x01	; 1
    ce74:	90 e0       	ldi	r25, 0x00	; 0
    ce76:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    ce7a:	8d e2       	ldi	r24, 0x2D	; 45
    ce7c:	9e e0       	ldi	r25, 0x0E	; 14
    ce7e:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    ce82:	40 e0       	ldi	r20, 0x00	; 0
    ce84:	bc 01       	movw	r22, r24
    ce86:	80 e0       	ldi	r24, 0x00	; 0
    ce88:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    ce8c:	02 e0       	ldi	r16, 0x02	; 2
    ce8e:	24 e0       	ldi	r18, 0x04	; 4
    ce90:	48 e6       	ldi	r20, 0x68	; 104
    ce92:	68 e6       	ldi	r22, 0x68	; 104
    ce94:	80 e0       	ldi	r24, 0x00	; 0
    ce96:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
		frame_counter++;
    ce9a:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    ce9c:	8d 2d       	mov	r24, r13
    ce9e:	8f 70       	andi	r24, 0x0F	; 15
    cea0:	29 f4       	brne	.+10     	; 0xceac <planet_transition+0xc0>
    cea2:	90 91 b6 0c 	lds	r25, 0x0CB6
    cea6:	9e 0d       	add	r25, r14
    cea8:	90 93 b6 0c 	sts	0x0CB6, r25
		animate_particles(dy, oy);
    ceac:	6f 2d       	mov	r22, r15
    ceae:	81 2f       	mov	r24, r17
    ceb0:	0e 94 a5 66 	call	0xcd4a	; 0xcd4a <animate_particles>
		LBRotateSprites();
    ceb4:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    ceb8:	8f ef       	ldi	r24, 0xFF	; 255
    ceba:	d8 12       	cpse	r13, r24
    cebc:	da cf       	rjmp	.-76     	; 0xce72 <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    cebe:	82 e0       	ldi	r24, 0x02	; 2
    cec0:	80 93 ca 0d 	sts	0x0DCA, r24
	ClearVram();
    cec4:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cec8:	64 e1       	ldi	r22, 0x14	; 20
    ceca:	80 e0       	ldi	r24, 0x00	; 0
    cecc:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    ced0:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	fade_through();
    ced4:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	game.level_score = 0;
    ced8:	10 92 bb 0d 	sts	0x0DBB, r1
    cedc:	10 92 ba 0d 	sts	0x0DBA, r1
	load_level(index, true);
    cee0:	61 e0       	ldi	r22, 0x01	; 1
    cee2:	8c 2d       	mov	r24, r12
    cee4:	0e 94 16 65 	call	0xca2c	; 0xca2c <load_level>
	init_player_state();
    cee8:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_player_state>
	init_boss_state();
    ceec:	0e 94 1c 53 	call	0xa638	; 0xa638 <init_boss_state>
	init_enemy_state();
}
    cef0:	0f 90       	pop	r0
    cef2:	df 91       	pop	r29
    cef4:	cf 91       	pop	r28
    cef6:	1f 91       	pop	r17
    cef8:	0f 91       	pop	r16
    cefa:	ff 90       	pop	r15
    cefc:	ef 90       	pop	r14
    cefe:	df 90       	pop	r13
    cf00:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    cf02:	0c 94 0f 4f 	jmp	0x9e1e	; 0x9e1e <init_enemy_state>

0000cf06 <intro>:
}


void intro()
{
    cf06:	0f 93       	push	r16
	fade_through();
    cf08:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	game.lives = LIVES;
    cf0c:	e6 eb       	ldi	r30, 0xB6	; 182
    cf0e:	fd e0       	ldi	r31, 0x0D	; 13
    cf10:	8a e0       	ldi	r24, 0x0A	; 10
    cf12:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    cf14:	13 82       	std	Z+3, r1	; 0x03
    cf16:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    cf18:	15 82       	std	Z+5, r1	; 0x05
    cf1a:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    cf1c:	17 82       	std	Z+7, r1	; 0x07
    cf1e:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    cf20:	83 ed       	ldi	r24, 0xD3	; 211
    cf22:	9a e0       	ldi	r25, 0x0A	; 10
    cf24:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <StartSong>
	print_scroll(strIntro);
    cf28:	88 e7       	ldi	r24, 0x78	; 120
    cf2a:	92 e0       	ldi	r25, 0x02	; 2
    cf2c:	0e 94 82 64 	call	0xc904	; 0xc904 <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    cf30:	07 ec       	ldi	r16, 0xC7	; 199
    cf32:	2d ef       	ldi	r18, 0xFD	; 253
    cf34:	4c e1       	ldi	r20, 0x1C	; 28
    cf36:	61 e0       	ldi	r22, 0x01	; 1
    cf38:	80 e0       	ldi	r24, 0x00	; 0
    cf3a:	0e 94 f6 66 	call	0xcdec	; 0xcdec <planet_transition>
}
    cf3e:	0f 91       	pop	r16
    cf40:	08 95       	ret

0000cf42 <demo_load>:

void demo_load(u8 idx)
{
    cf42:	cf 93       	push	r28
    cf44:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    cf46:	e6 eb       	ldi	r30, 0xB6	; 182
    cf48:	fd e0       	ldi	r31, 0x0D	; 13
    cf4a:	8a e0       	ldi	r24, 0x0A	; 10
    cf4c:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    cf4e:	13 82       	std	Z+3, r1	; 0x03
    cf50:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    cf52:	15 82       	std	Z+5, r1	; 0x05
    cf54:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    cf56:	17 82       	std	Z+7, r1	; 0x07
    cf58:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    cf5a:	82 e0       	ldi	r24, 0x02	; 2
    cf5c:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    cf5e:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cf62:	64 e1       	ldi	r22, 0x14	; 20
    cf64:	80 e0       	ldi	r24, 0x00	; 0
    cf66:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    cf6a:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	fade_through();
    cf6e:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	load_level(idx, true);
    cf72:	61 e0       	ldi	r22, 0x01	; 1
    cf74:	8c 2f       	mov	r24, r28
    cf76:	0e 94 16 65 	call	0xca2c	; 0xca2c <load_level>
	init_player_state();
    cf7a:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_player_state>
	init_boss_state();
    cf7e:	0e 94 1c 53 	call	0xa638	; 0xa638 <init_boss_state>
	init_enemy_state();
}
    cf82:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    cf84:	0c 94 0f 4f 	jmp	0x9e1e	; 0x9e1e <init_enemy_state>

0000cf88 <load_splash>:
}

void load_splash()
{
	fade_through();
    cf88:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	Screen.scrollX = 0;
    cf8c:	e2 eb       	ldi	r30, 0xB2	; 178
    cf8e:	fc e0       	ldi	r31, 0x0C	; 12
    cf90:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    cf92:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    cf94:	80 e2       	ldi	r24, 0x20	; 32
    cf96:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    cf98:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    cf9a:	e6 eb       	ldi	r30, 0xB6	; 182
    cf9c:	fd e0       	ldi	r31, 0x0D	; 13
    cf9e:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    cfa0:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    cfa2:	64 e1       	ldi	r22, 0x14	; 20
    cfa4:	80 e0       	ldi	r24, 0x00	; 0
    cfa6:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    cfaa:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    cfae:	48 e1       	ldi	r20, 0x18	; 24
    cfb0:	54 e0       	ldi	r21, 0x04	; 4
    cfb2:	6f e0       	ldi	r22, 0x0F	; 15
    cfb4:	88 e0       	ldi	r24, 0x08	; 8
    cfb6:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    cfba:	4c e0       	ldi	r20, 0x0C	; 12
    cfbc:	54 e0       	ldi	r21, 0x04	; 4
    cfbe:	60 e1       	ldi	r22, 0x10	; 16
    cfc0:	88 e0       	ldi	r24, 0x08	; 8
    cfc2:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    cfc6:	4e e1       	ldi	r20, 0x1E	; 30
    cfc8:	54 e0       	ldi	r21, 0x04	; 4
    cfca:	65 e1       	ldi	r22, 0x15	; 21
    cfcc:	84 e0       	ldi	r24, 0x04	; 4
    cfce:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	DrawMap2(6, 5, map_splash);
    cfd2:	42 e2       	ldi	r20, 0x22	; 34
    cfd4:	5a e5       	ldi	r21, 0x5A	; 90
    cfd6:	65 e0       	ldi	r22, 0x05	; 5
    cfd8:	86 e0       	ldi	r24, 0x06	; 6
    cfda:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    cfde:	40 e0       	ldi	r20, 0x00	; 0
    cfe0:	6f e0       	ldi	r22, 0x0F	; 15
    cfe2:	71 e3       	ldi	r23, 0x31	; 49
    cfe4:	80 e0       	ldi	r24, 0x00	; 0
    cfe6:	0c 94 31 4e 	jmp	0x9c62	; 0x9c62 <LBMapSprite>

0000cfea <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    cfea:	2f 92       	push	r2
    cfec:	3f 92       	push	r3
    cfee:	5f 92       	push	r5
    cff0:	6f 92       	push	r6
    cff2:	7f 92       	push	r7
    cff4:	8f 92       	push	r8
    cff6:	9f 92       	push	r9
    cff8:	af 92       	push	r10
    cffa:	bf 92       	push	r11
    cffc:	cf 92       	push	r12
    cffe:	df 92       	push	r13
    d000:	ef 92       	push	r14
    d002:	ff 92       	push	r15
    d004:	0f 93       	push	r16
    d006:	1f 93       	push	r17
    d008:	cf 93       	push	r28
    d00a:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d00c:	81 e0       	ldi	r24, 0x01	; 1
    d00e:	80 93 ca 0d 	sts	0x0DCA, r24
	game.high_score_index = -1;
    d012:	8f ef       	ldi	r24, 0xFF	; 255
    d014:	80 93 c8 0d 	sts	0x0DC8, r24
	fade_through();
    d018:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	Screen.scrollX = 0;
    d01c:	10 92 b5 0c 	sts	0x0CB5, r1
	Screen.scrollY = 0;
    d020:	10 92 b6 0c 	sts	0x0CB6, r1
	Screen.scrollHeight = 32;
    d024:	80 e2       	ldi	r24, 0x20	; 32
    d026:	80 93 b7 0c 	sts	0x0CB7, r24
	Screen.overlayHeight = 0;
    d02a:	10 92 b2 0c 	sts	0x0CB2, r1
	load_eeprom(&scores);
    d02e:	86 e9       	ldi	r24, 0x96	; 150
    d030:	9d e0       	ldi	r25, 0x0D	; 13
    d032:	0e 94 b4 57 	call	0xaf68	; 0xaf68 <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d036:	4c e0       	ldi	r20, 0x0C	; 12
    d038:	54 e0       	ldi	r21, 0x04	; 4
    d03a:	63 e0       	ldi	r22, 0x03	; 3
    d03c:	89 e0       	ldi	r24, 0x09	; 9
    d03e:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d042:	40 e0       	ldi	r20, 0x00	; 0
    d044:	6a ef       	ldi	r22, 0xFA	; 250
    d046:	70 e3       	ldi	r23, 0x30	; 48
    d048:	80 e0       	ldi	r24, 0x00	; 0
    d04a:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d04e:	40 e0       	ldi	r20, 0x00	; 0
    d050:	67 ef       	ldi	r22, 0xF7	; 247
    d052:	70 e3       	ldi	r23, 0x30	; 48
    d054:	81 e0       	ldi	r24, 0x01	; 1
    d056:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d05a:	01 e0       	ldi	r16, 0x01	; 1
    d05c:	21 e0       	ldi	r18, 0x01	; 1
    d05e:	48 e1       	ldi	r20, 0x18	; 24
    d060:	68 e3       	ldi	r22, 0x38	; 56
    d062:	80 e0       	ldi	r24, 0x00	; 0
    d064:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d068:	21 e0       	ldi	r18, 0x01	; 1
    d06a:	48 e1       	ldi	r20, 0x18	; 24
    d06c:	68 ea       	ldi	r22, 0xA8	; 168
    d06e:	81 e0       	ldi	r24, 0x01	; 1
    d070:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
    d074:	88 e9       	ldi	r24, 0x98	; 152
    d076:	a8 2e       	mov	r10, r24
    d078:	8d e0       	ldi	r24, 0x0D	; 13
    d07a:	b8 2e       	mov	r11, r24
    d07c:	99 e9       	ldi	r25, 0x99	; 153
    d07e:	c9 2e       	mov	r12, r25
    d080:	9d e0       	ldi	r25, 0x0D	; 13
    d082:	d9 2e       	mov	r13, r25
    d084:	2a e9       	ldi	r18, 0x9A	; 154
    d086:	82 2e       	mov	r8, r18
    d088:	2d e0       	ldi	r18, 0x0D	; 13
    d08a:	92 2e       	mov	r9, r18
    d08c:	74 01       	movw	r14, r8
    d08e:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d090:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d092:	35 e0       	ldi	r19, 0x05	; 5
    d094:	53 2e       	mov	r5, r19
    d096:	41 eb       	ldi	r20, 0xB1	; 177
    d098:	64 2e       	mov	r6, r20
    d09a:	4d e0       	ldi	r20, 0x0D	; 13
    d09c:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d09e:	11 e4       	ldi	r17, 0x41	; 65
    d0a0:	0e 2d       	mov	r16, r14
    d0a2:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d0a4:	80 2f       	mov	r24, r16
    d0a6:	65 2d       	mov	r22, r5
    d0a8:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    d0ac:	41 e0       	ldi	r20, 0x01	; 1
    d0ae:	48 0f       	add	r20, r24
    d0b0:	20 e0       	ldi	r18, 0x00	; 0
    d0b2:	6c 2f       	mov	r22, r28
    d0b4:	89 e0       	ldi	r24, 0x09	; 9
    d0b6:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d0ba:	40 e2       	ldi	r20, 0x20	; 32
    d0bc:	6c 2f       	mov	r22, r28
    d0be:	8a e0       	ldi	r24, 0x0A	; 10
    d0c0:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d0c4:	f5 01       	movw	r30, r10
    d0c6:	40 81       	ld	r20, Z
    d0c8:	6c 2f       	mov	r22, r28
    d0ca:	8b e0       	ldi	r24, 0x0B	; 11
    d0cc:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d0d0:	f6 01       	movw	r30, r12
    d0d2:	40 81       	ld	r20, Z
    d0d4:	6c 2f       	mov	r22, r28
    d0d6:	8c e0       	ldi	r24, 0x0C	; 12
    d0d8:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d0dc:	f7 01       	movw	r30, r14
    d0de:	40 81       	ld	r20, Z
    d0e0:	6c 2f       	mov	r22, r28
    d0e2:	8d e0       	ldi	r24, 0x0D	; 13
    d0e4:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d0e8:	40 e2       	ldi	r20, 0x20	; 32
    d0ea:	6c 2f       	mov	r22, r28
    d0ec:	8e e0       	ldi	r24, 0x0E	; 14
    d0ee:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d0f2:	f7 01       	movw	r30, r14
    d0f4:	21 80       	ldd	r2, Z+1	; 0x01
    d0f6:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d0f8:	21 e0       	ldi	r18, 0x01	; 1
    d0fa:	a1 01       	movw	r20, r2
    d0fc:	6c 2f       	mov	r22, r28
    d0fe:	83 e1       	ldi	r24, 0x13	; 19
    d100:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d104:	20 91 b8 0d 	lds	r18, 0x0DB8
    d108:	30 91 b9 0d 	lds	r19, 0x0DB9
    d10c:	22 16       	cp	r2, r18
    d10e:	33 06       	cpc	r3, r19
    d110:	08 f0       	brcs	.+2      	; 0xd114 <load_high_scores+0x12a>
    d112:	5a c0       	rjmp	.+180    	; 0xd1c8 <load_high_scores+0x1de>
    d114:	80 91 c8 0d 	lds	r24, 0x0DC8
    d118:	8f 3f       	cpi	r24, 0xFF	; 255
    d11a:	09 f0       	breq	.+2      	; 0xd11e <load_high_scores+0x134>
    d11c:	55 c0       	rjmp	.+170    	; 0xd1c8 <load_high_scores+0x1de>
    d11e:	80 91 cf 0d 	lds	r24, 0x0DCF
    d122:	82 30       	cpi	r24, 0x02	; 2
    d124:	09 f4       	brne	.+2      	; 0xd128 <load_high_scores+0x13e>
    d126:	50 c0       	rjmp	.+160    	; 0xd1c8 <load_high_scores+0x1de>
    d128:	a1 eb       	ldi	r26, 0xB1	; 177
    d12a:	bd e0       	ldi	r27, 0x0D	; 13
    d12c:	cd 01       	movw	r24, r26
    d12e:	05 97       	sbiw	r24, 0x05	; 5
    d130:	4e e1       	ldi	r20, 0x1E	; 30
    d132:	48 0f       	add	r20, r24
    d134:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    d136:	04 17       	cp	r16, r20
    d138:	40 f4       	brcc	.+16     	; 0xd14a <load_high_scores+0x160>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    d13a:	fc 01       	movw	r30, r24
    d13c:	45 2d       	mov	r20, r5
    d13e:	01 90       	ld	r0, Z+
    d140:	0d 92       	st	X+, r0
    d142:	4a 95       	dec	r20
    d144:	e1 f7       	brne	.-8      	; 0xd13e <load_high_scores+0x154>
    d146:	dc 01       	movw	r26, r24
    d148:	f1 cf       	rjmp	.-30     	; 0xd12c <load_high_scores+0x142>
			}
			scores.data[i] = 'A';
    d14a:	f5 01       	movw	r30, r10
    d14c:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    d14e:	f6 01       	movw	r30, r12
    d150:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    d152:	f7 01       	movw	r30, r14
    d154:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    d156:	32 83       	std	Z+2, r19	; 0x02
    d158:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    d15a:	f5 01       	movw	r30, r10
    d15c:	40 81       	ld	r20, Z
    d15e:	6c 2f       	mov	r22, r28
    d160:	8b e0       	ldi	r24, 0x0B	; 11
    d162:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    d166:	f6 01       	movw	r30, r12
    d168:	40 81       	ld	r20, Z
    d16a:	6c 2f       	mov	r22, r28
    d16c:	8c e0       	ldi	r24, 0x0C	; 12
    d16e:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    d172:	f7 01       	movw	r30, r14
    d174:	40 81       	ld	r20, Z
    d176:	6c 2f       	mov	r22, r28
    d178:	8d e0       	ldi	r24, 0x0D	; 13
    d17a:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    d17e:	40 91 b8 0d 	lds	r20, 0x0DB8
    d182:	50 91 b9 0d 	lds	r21, 0x0DB9
    d186:	21 e0       	ldi	r18, 0x01	; 1
    d188:	6c 2f       	mov	r22, r28
    d18a:	83 e1       	ldi	r24, 0x13	; 19
    d18c:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
			game.high_score_index = i;
    d190:	00 93 c8 0d 	sts	0x0DC8, r16
			LBMapSprite(2, map_down_arrow, 0);
    d194:	40 e0       	ldi	r20, 0x00	; 0
    d196:	6c e0       	ldi	r22, 0x0C	; 12
    d198:	71 e3       	ldi	r23, 0x31	; 49
    d19a:	82 e0       	ldi	r24, 0x02	; 2
    d19c:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    d1a0:	40 e0       	ldi	r20, 0x00	; 0
    d1a2:	69 e0       	ldi	r22, 0x09	; 9
    d1a4:	71 e3       	ldi	r23, 0x31	; 49
    d1a6:	83 e0       	ldi	r24, 0x03	; 3
    d1a8:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    d1ac:	01 e0       	ldi	r16, 0x01	; 1
    d1ae:	21 e0       	ldi	r18, 0x01	; 1
    d1b0:	4d 2f       	mov	r20, r29
    d1b2:	68 e5       	ldi	r22, 0x58	; 88
    d1b4:	82 e0       	ldi	r24, 0x02	; 2
    d1b6:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    d1ba:	21 e0       	ldi	r18, 0x01	; 1
    d1bc:	40 e1       	ldi	r20, 0x10	; 16
    d1be:	4d 0f       	add	r20, r29
    d1c0:	68 e5       	ldi	r22, 0x58	; 88
    d1c2:	83 e0       	ldi	r24, 0x03	; 3
    d1c4:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
		}
		
		ypos += 2;
    d1c8:	ce 5f       	subi	r28, 0xFE	; 254
    d1ca:	f5 e0       	ldi	r31, 0x05	; 5
    d1cc:	af 0e       	add	r10, r31
    d1ce:	b1 1c       	adc	r11, r1
    d1d0:	85 e0       	ldi	r24, 0x05	; 5
    d1d2:	c8 0e       	add	r12, r24
    d1d4:	d1 1c       	adc	r13, r1
    d1d6:	e5 e0       	ldi	r30, 0x05	; 5
    d1d8:	ee 0e       	add	r14, r30
    d1da:	f1 1c       	adc	r15, r1
    d1dc:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    d1de:	c3 31       	cpi	r28, 0x13	; 19
    d1e0:	09 f0       	breq	.+2      	; 0xd1e4 <load_high_scores+0x1fa>
    d1e2:	5e cf       	rjmp	.-324    	; 0xd0a0 <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d1e4:	43 ee       	ldi	r20, 0xE3	; 227
    d1e6:	53 e0       	ldi	r21, 0x03	; 3
    d1e8:	66 e1       	ldi	r22, 0x16	; 22
    d1ea:	89 e0       	ldi	r24, 0x09	; 9
}
    d1ec:	df 91       	pop	r29
    d1ee:	cf 91       	pop	r28
    d1f0:	1f 91       	pop	r17
    d1f2:	0f 91       	pop	r16
    d1f4:	ff 90       	pop	r15
    d1f6:	ef 90       	pop	r14
    d1f8:	df 90       	pop	r13
    d1fa:	cf 90       	pop	r12
    d1fc:	bf 90       	pop	r11
    d1fe:	af 90       	pop	r10
    d200:	9f 90       	pop	r9
    d202:	8f 90       	pop	r8
    d204:	7f 90       	pop	r7
    d206:	6f 90       	pop	r6
    d208:	5f 90       	pop	r5
    d20a:	3f 90       	pop	r3
    d20c:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    d20e:	0c 94 5c 4d 	jmp	0x9ab8	; 0x9ab8 <LBPrint>

0000d212 <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d212:	64 e1       	ldi	r22, 0x14	; 20
    d214:	80 e0       	ldi	r24, 0x00	; 0
    d216:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    d21a:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	init_player_state();
    d21e:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_player_state>
	init_boss_state();
    d222:	0e 94 1c 53 	call	0xa638	; 0xa638 <init_boss_state>
	init_enemy_state();
    d226:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <init_enemy_state>
	StopSong();
    d22a:	0e 94 1d 41 	call	0x823a	; 0x823a <StopSong>
	load_high_scores();
    d22e:	0c 94 f5 67 	jmp	0xcfea	; 0xcfea <load_high_scores>

0000d232 <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    d232:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    d234:	80 91 4d 0e 	lds	r24, 0x0E4D
    d238:	90 91 4e 0e 	lds	r25, 0x0E4E
    d23c:	00 97       	sbiw	r24, 0x00	; 0
    d23e:	21 f0       	breq	.+8      	; 0xd248 <update_splash+0x16>
    d240:	10 92 f6 0c 	sts	0x0CF6, r1
    d244:	10 92 f5 0c 	sts	0x0CF5, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    d248:	85 ff       	sbrs	r24, 5
    d24a:	08 c0       	rjmp	.+16     	; 0xd25c <update_splash+0x2a>
    d24c:	20 91 cf 0d 	lds	r18, 0x0DCF
    d250:	21 11       	cpse	r18, r1
    d252:	04 c0       	rjmp	.+8      	; 0xd25c <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    d254:	81 e0       	ldi	r24, 0x01	; 1
    d256:	80 93 cf 0d 	sts	0x0DCF, r24
    d25a:	08 c0       	rjmp	.+16     	; 0xd26c <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    d25c:	84 ff       	sbrs	r24, 4
    d25e:	0c c0       	rjmp	.+24     	; 0xd278 <update_splash+0x46>
    d260:	80 91 cf 0d 	lds	r24, 0x0DCF
    d264:	81 30       	cpi	r24, 0x01	; 1
    d266:	41 f4       	brne	.+16     	; 0xd278 <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    d268:	10 92 cf 0d 	sts	0x0DCF, r1
		SFX_NAVIGATE;
    d26c:	41 e0       	ldi	r20, 0x01	; 1
    d26e:	6f ef       	ldi	r22, 0xFF	; 255
    d270:	82 e0       	ldi	r24, 0x02	; 2
    d272:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
    d276:	40 c0       	rjmp	.+128    	; 0xd2f8 <update_splash+0xc6>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    d278:	8d e4       	ldi	r24, 0x4D	; 77
    d27a:	9e e0       	ldi	r25, 0x0E	; 14
    d27c:	0e 94 45 66 	call	0xcc8a	; 0xcc8a <select_pressed>
    d280:	88 23       	and	r24, r24
    d282:	b1 f0       	breq	.+44     	; 0xd2b0 <update_splash+0x7e>
    d284:	80 91 cf 0d 	lds	r24, 0x0DCF
    d288:	81 11       	cpse	r24, r1
    d28a:	08 c0       	rjmp	.+16     	; 0xd29c <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    d28c:	41 e0       	ldi	r20, 0x01	; 1
    d28e:	6f ef       	ldi	r22, 0xFF	; 255
    d290:	82 e0       	ldi	r24, 0x02	; 2
    d292:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d296:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    d298:	0c 94 83 67 	jmp	0xcf06	; 0xcf06 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    d29c:	81 30       	cpi	r24, 0x01	; 1
    d29e:	41 f4       	brne	.+16     	; 0xd2b0 <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    d2a0:	41 e0       	ldi	r20, 0x01	; 1
    d2a2:	6f ef       	ldi	r22, 0xFF	; 255
    d2a4:	82 e0       	ldi	r24, 0x02	; 2
    d2a6:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    d2aa:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    d2ac:	0c 94 f5 67 	jmp	0xcfea	; 0xcfea <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d2b0:	80 91 f5 0c 	lds	r24, 0x0CF5
    d2b4:	90 91 f6 0c 	lds	r25, 0x0CF6
    d2b8:	88 35       	cpi	r24, 0x58	; 88
    d2ba:	92 40       	sbci	r25, 0x02	; 2
    d2bc:	e8 f0       	brcs	.+58     	; 0xd2f8 <update_splash+0xc6>
	{
		demo_counter = 0;
    d2be:	10 92 f6 0c 	sts	0x0CF6, r1
    d2c2:	10 92 f5 0c 	sts	0x0CF5, r1
		game.selection = DEMO_SELECTED;
    d2c6:	82 e0       	ldi	r24, 0x02	; 2
    d2c8:	80 93 cf 0d 	sts	0x0DCF, r24
		demo_load(demo_choice++);
    d2cc:	80 91 f4 0c 	lds	r24, 0x0CF4
    d2d0:	91 e0       	ldi	r25, 0x01	; 1
    d2d2:	98 0f       	add	r25, r24
    d2d4:	90 93 f4 0c 	sts	0x0CF4, r25
    d2d8:	0e 94 a1 67 	call	0xcf42	; 0xcf42 <demo_load>
		if (demo_choice == 2) demo_choice = 3;
    d2dc:	80 91 f4 0c 	lds	r24, 0x0CF4
    d2e0:	82 30       	cpi	r24, 0x02	; 2
    d2e2:	19 f4       	brne	.+6      	; 0xd2ea <update_splash+0xb8>
    d2e4:	83 e0       	ldi	r24, 0x03	; 3
    d2e6:	80 93 f4 0c 	sts	0x0CF4, r24
		if (demo_choice == 5) demo_choice = 0;
    d2ea:	80 91 f4 0c 	lds	r24, 0x0CF4
    d2ee:	85 30       	cpi	r24, 0x05	; 5
    d2f0:	d1 f4       	brne	.+52     	; 0xd326 <update_splash+0xf4>
    d2f2:	10 92 f4 0c 	sts	0x0CF4, r1
    d2f6:	17 c0       	rjmp	.+46     	; 0xd326 <update_splash+0xf4>
		return;
		
	}
	demo_counter++;
    d2f8:	80 91 f5 0c 	lds	r24, 0x0CF5
    d2fc:	90 91 f6 0c 	lds	r25, 0x0CF6
    d300:	01 96       	adiw	r24, 0x01	; 1
    d302:	90 93 f6 0c 	sts	0x0CF6, r25
    d306:	80 93 f5 0c 	sts	0x0CF5, r24
	
	if (game.selection == START_SELECTED)
    d30a:	80 91 cf 0d 	lds	r24, 0x0DCF
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d30e:	01 e0       	ldi	r16, 0x01	; 1
    d310:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    d312:	81 11       	cpse	r24, r1
    d314:	03 c0       	rjmp	.+6      	; 0xd31c <update_splash+0xea>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    d316:	48 e7       	ldi	r20, 0x78	; 120
    d318:	68 e3       	ldi	r22, 0x38	; 56
    d31a:	03 c0       	rjmp	.+6      	; 0xd322 <update_splash+0xf0>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    d31c:	40 e8       	ldi	r20, 0x80	; 128
    d31e:	68 e3       	ldi	r22, 0x38	; 56
    d320:	80 e0       	ldi	r24, 0x00	; 0
    d322:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
	}
}
    d326:	0f 91       	pop	r16
    d328:	08 95       	ret

0000d32a <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{	
    d32a:	0f 93       	push	r16
    d32c:	cf 93       	push	r28
	if (game.player.controls.pressed & BTN_X)
    d32e:	80 91 4d 0e 	lds	r24, 0x0E4D
    d332:	90 91 4e 0e 	lds	r25, 0x0E4E
    d336:	91 ff       	sbrs	r25, 1
    d338:	14 c0       	rjmp	.+40     	; 0xd362 <update_high_scores+0x38>
	{
		game.high_score_counter = 0;
    d33a:	10 92 d8 0d 	sts	0x0DD8, r1
		SFX_NAVIGATE;
    d33e:	41 e0       	ldi	r20, 0x01	; 1
    d340:	6f ef       	ldi	r22, 0xFF	; 255
    d342:	82 e0       	ldi	r24, 0x02	; 2
    d344:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		game.high_score_index = -1;
    d348:	8f ef       	ldi	r24, 0xFF	; 255
    d34a:	80 93 c8 0d 	sts	0x0DC8, r24
		game.score = 0;
    d34e:	10 92 b9 0d 	sts	0x0DB9, r1
    d352:	10 92 b8 0d 	sts	0x0DB8, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d356:	86 e9       	ldi	r24, 0x96	; 150
    d358:	9d e0       	ldi	r25, 0x0D	; 13
    d35a:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <EepromWriteBlock>
		game.high_score_counter = 0;
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    d35e:	0e 94 c4 67 	call	0xcf88	; 0xcf88 <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    d362:	80 91 51 0e 	lds	r24, 0x0E51
    d366:	90 91 52 0e 	lds	r25, 0x0E52
    d36a:	92 ff       	sbrs	r25, 2
    d36c:	17 c0       	rjmp	.+46     	; 0xd39c <update_high_scores+0x72>
    d36e:	80 91 53 0e 	lds	r24, 0x0E53
    d372:	8f 3f       	cpi	r24, 0xFF	; 255
    d374:	99 f4       	brne	.+38     	; 0xd39c <update_high_scores+0x72>
    d376:	80 91 c8 0d 	lds	r24, 0x0DC8
    d37a:	8f 3f       	cpi	r24, 0xFF	; 255
    d37c:	79 f4       	brne	.+30     	; 0xd39c <update_high_scores+0x72>
	{
		game.high_score_counter = 0;
    d37e:	10 92 d8 0d 	sts	0x0DD8, r1
	    SFX_NAVIGATE;
    d382:	41 e0       	ldi	r20, 0x01	; 1
    d384:	6f ef       	ldi	r22, 0xFF	; 255
    d386:	82 e0       	ldi	r24, 0x02	; 2
    d388:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		init_default_high_scores();
    d38c:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <init_default_high_scores>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d390:	86 e9       	ldi	r24, 0x96	; 150
    d392:	9d e0       	ldi	r25, 0x0D	; 13
    d394:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <EepromWriteBlock>
	{
		game.high_score_counter = 0;
	    SFX_NAVIGATE;
		init_default_high_scores();
	    save_eeprom(&scores);
		load_high_scores();
    d398:	0e 94 f5 67 	call	0xcfea	; 0xcfea <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    d39c:	30 91 c8 0d 	lds	r19, 0x0DC8
    d3a0:	3f 3f       	cpi	r19, 0xFF	; 255
    d3a2:	09 f4       	brne	.+2      	; 0xd3a6 <update_high_scores+0x7c>
    d3a4:	7f c0       	rjmp	.+254    	; 0xd4a4 <update_high_scores+0x17a>
	{
		game.high_score_counter = 0;
    d3a6:	10 92 d8 0d 	sts	0x0DD8, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    d3aa:	20 91 4d 0e 	lds	r18, 0x0E4D
    d3ae:	27 ff       	sbrs	r18, 7
    d3b0:	1e c0       	rjmp	.+60     	; 0xd3ee <update_high_scores+0xc4>
    d3b2:	83 2f       	mov	r24, r19
    d3b4:	65 e0       	ldi	r22, 0x05	; 5
    d3b6:	0e 94 bb 71 	call	0xe376	; 0xe376 <__divmodqi4>
    d3ba:	92 30       	cpi	r25, 0x02	; 2
    d3bc:	c1 f0       	breq	.+48     	; 0xd3ee <update_high_scores+0xc4>
		{
			SFX_NAVIGATE;
    d3be:	41 e0       	ldi	r20, 0x01	; 1
    d3c0:	6f ef       	ldi	r22, 0xFF	; 255
    d3c2:	82 e0       	ldi	r24, 0x02	; 2
    d3c4:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
			game.high_score_index++;
    d3c8:	80 91 c8 0d 	lds	r24, 0x0DC8
    d3cc:	8f 5f       	subi	r24, 0xFF	; 255
    d3ce:	80 93 c8 0d 	sts	0x0DC8, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    d3d2:	60 91 ec 0f 	lds	r22, 0x0FEC
    d3d6:	68 5f       	subi	r22, 0xF8	; 248
    d3d8:	01 e0       	ldi	r16, 0x01	; 1
    d3da:	21 e0       	ldi	r18, 0x01	; 1
    d3dc:	40 91 ed 0f 	lds	r20, 0x0FED
    d3e0:	82 e0       	ldi	r24, 0x02	; 2
    d3e2:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    d3e6:	60 91 f0 0f 	lds	r22, 0x0FF0
    d3ea:	68 5f       	subi	r22, 0xF8	; 248
    d3ec:	1f c0       	rjmp	.+62     	; 0xd42c <update_high_scores+0x102>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    d3ee:	26 ff       	sbrs	r18, 6
    d3f0:	24 c0       	rjmp	.+72     	; 0xd43a <update_high_scores+0x110>
    d3f2:	83 2f       	mov	r24, r19
    d3f4:	65 e0       	ldi	r22, 0x05	; 5
    d3f6:	0e 94 bb 71 	call	0xe376	; 0xe376 <__divmodqi4>
    d3fa:	99 23       	and	r25, r25
    d3fc:	f1 f0       	breq	.+60     	; 0xd43a <update_high_scores+0x110>
		{
			SFX_NAVIGATE;
    d3fe:	41 e0       	ldi	r20, 0x01	; 1
    d400:	6f ef       	ldi	r22, 0xFF	; 255
    d402:	82 e0       	ldi	r24, 0x02	; 2
    d404:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
			game.high_score_index--;
    d408:	80 91 c8 0d 	lds	r24, 0x0DC8
    d40c:	81 50       	subi	r24, 0x01	; 1
    d40e:	80 93 c8 0d 	sts	0x0DC8, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    d412:	60 91 ec 0f 	lds	r22, 0x0FEC
    d416:	68 50       	subi	r22, 0x08	; 8
    d418:	01 e0       	ldi	r16, 0x01	; 1
    d41a:	21 e0       	ldi	r18, 0x01	; 1
    d41c:	40 91 ed 0f 	lds	r20, 0x0FED
    d420:	82 e0       	ldi	r24, 0x02	; 2
    d422:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    d426:	60 91 f0 0f 	lds	r22, 0x0FF0
    d42a:	68 50       	subi	r22, 0x08	; 8
    d42c:	21 e0       	ldi	r18, 0x01	; 1
    d42e:	40 91 f1 0f 	lds	r20, 0x0FF1
    d432:	83 e0       	ldi	r24, 0x03	; 3
    d434:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
    d438:	35 c0       	rjmp	.+106    	; 0xd4a4 <update_high_scores+0x17a>
		}
		else if (game.player.controls.pressed & BTN_UP)
    d43a:	24 ff       	sbrs	r18, 4
    d43c:	13 c0       	rjmp	.+38     	; 0xd464 <update_high_scores+0x13a>
		{
			SFX_NAVIGATE;
    d43e:	41 e0       	ldi	r20, 0x01	; 1
    d440:	6f ef       	ldi	r22, 0xFF	; 255
    d442:	82 e0       	ldi	r24, 0x02	; 2
    d444:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    d448:	80 91 c8 0d 	lds	r24, 0x0DC8
    d44c:	e8 2f       	mov	r30, r24
    d44e:	ff 27       	eor	r31, r31
    d450:	e7 fd       	sbrc	r30, 7
    d452:	f0 95       	com	r31
    d454:	ea 56       	subi	r30, 0x6A	; 106
    d456:	f2 4f       	sbci	r31, 0xF2	; 242
    d458:	92 81       	ldd	r25, Z+2	; 0x02
    d45a:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    d45c:	91 34       	cpi	r25, 0x41	; 65
    d45e:	b0 f4       	brcc	.+44     	; 0xd48c <update_high_scores+0x162>
    d460:	91 e4       	ldi	r25, 0x41	; 65
    d462:	14 c0       	rjmp	.+40     	; 0xd48c <update_high_scores+0x162>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    d464:	25 ff       	sbrs	r18, 5
    d466:	1e c0       	rjmp	.+60     	; 0xd4a4 <update_high_scores+0x17a>
		{
			SFX_NAVIGATE;
    d468:	41 e0       	ldi	r20, 0x01	; 1
    d46a:	6f ef       	ldi	r22, 0xFF	; 255
    d46c:	82 e0       	ldi	r24, 0x02	; 2
    d46e:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    d472:	80 91 c8 0d 	lds	r24, 0x0DC8
    d476:	e8 2f       	mov	r30, r24
    d478:	ff 27       	eor	r31, r31
    d47a:	e7 fd       	sbrc	r30, 7
    d47c:	f0 95       	com	r31
    d47e:	ea 56       	subi	r30, 0x6A	; 106
    d480:	f2 4f       	sbci	r31, 0xF2	; 242
    d482:	92 81       	ldd	r25, Z+2	; 0x02
    d484:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    d486:	9b 35       	cpi	r25, 0x5B	; 91
    d488:	08 f0       	brcs	.+2      	; 0xd48c <update_high_scores+0x162>
    d48a:	9a e5       	ldi	r25, 0x5A	; 90
    d48c:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    d48e:	65 e0       	ldi	r22, 0x05	; 5
    d490:	0e 94 bb 71 	call	0xe376	; 0xe376 <__divmodqi4>
    d494:	68 2f       	mov	r22, r24
    d496:	66 0f       	add	r22, r22
    d498:	69 5f       	subi	r22, 0xF9	; 249
    d49a:	42 81       	ldd	r20, Z+2	; 0x02
    d49c:	8b e0       	ldi	r24, 0x0B	; 11
    d49e:	89 0f       	add	r24, r25
    d4a0:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <LBPrintChar>
		}
	}
	if (game.high_score_counter >= HIGH_SCORES_LENGTH)
    d4a4:	c0 91 d8 0d 	lds	r28, 0x0DD8
    d4a8:	cf 3f       	cpi	r28, 0xFF	; 255
    d4aa:	79 f4       	brne	.+30     	; 0xd4ca <update_high_scores+0x1a0>
	{
		game.high_score_counter = 0;
    d4ac:	10 92 d8 0d 	sts	0x0DD8, r1
		SFX_NAVIGATE;
    d4b0:	41 e0       	ldi	r20, 0x01	; 1
    d4b2:	6f ef       	ldi	r22, 0xFF	; 255
    d4b4:	82 e0       	ldi	r24, 0x02	; 2
    d4b6:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		game.high_score_index = -1;
    d4ba:	c0 93 c8 0d 	sts	0x0DC8, r28
		game.score = 0;
    d4be:	10 92 b9 0d 	sts	0x0DB9, r1
    d4c2:	10 92 b8 0d 	sts	0x0DB8, r1
		load_splash();
    d4c6:	0e 94 c4 67 	call	0xcf88	; 0xcf88 <load_splash>
	}
	game.high_score_counter++;
    d4ca:	80 91 d8 0d 	lds	r24, 0x0DD8
    d4ce:	8f 5f       	subi	r24, 0xFF	; 255
    d4d0:	80 93 d8 0d 	sts	0x0DD8, r24
}
    d4d4:	cf 91       	pop	r28
    d4d6:	0f 91       	pop	r16
    d4d8:	08 95       	ret

0000d4da <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    d4da:	2f 92       	push	r2
    d4dc:	3f 92       	push	r3
    d4de:	4f 92       	push	r4
    d4e0:	5f 92       	push	r5
    d4e2:	6f 92       	push	r6
    d4e4:	7f 92       	push	r7
    d4e6:	8f 92       	push	r8
    d4e8:	9f 92       	push	r9
    d4ea:	af 92       	push	r10
    d4ec:	bf 92       	push	r11
    d4ee:	cf 92       	push	r12
    d4f0:	df 92       	push	r13
    d4f2:	ef 92       	push	r14
    d4f4:	ff 92       	push	r15
    d4f6:	0f 93       	push	r16
    d4f8:	1f 93       	push	r17
    d4fa:	cf 93       	push	r28
    d4fc:	df 93       	push	r29
    d4fe:	7c 01       	movw	r14, r24
    d500:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    d502:	c0 91 b5 0c 	lds	r28, 0x0CB5
    d506:	c6 95       	lsr	r28
    d508:	c6 95       	lsr	r28
    d50a:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    d50c:	00 91 b6 0c 	lds	r16, 0x0CB6
    d510:	06 95       	lsr	r16
    d512:	06 95       	lsr	r16
    d514:	06 95       	lsr	r16
	u16 tally = game.score;
    d516:	a0 90 b8 0d 	lds	r10, 0x0DB8
    d51a:	b0 90 b9 0d 	lds	r11, 0x0DB9
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    d51e:	64 e1       	ldi	r22, 0x14	; 20
    d520:	80 e0       	ldi	r24, 0x00	; 0
    d522:	0e 94 29 66 	call	0xcc52	; 0xcc52 <hide_sprites>
	LBRotateSprites();
    d526:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	
	StopSong();
    d52a:	0e 94 1d 41 	call	0x823a	; 0x823a <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    d52e:	10 e0       	ldi	r17, 0x00	; 0
    d530:	d0 e0       	ldi	r29, 0x00	; 0
    d532:	c8 01       	movw	r24, r16
    d534:	06 96       	adiw	r24, 0x06	; 6
    d536:	2e e1       	ldi	r18, 0x1E	; 30
    d538:	82 2e       	mov	r8, r18
    d53a:	91 2c       	mov	r9, r1
    d53c:	b4 01       	movw	r22, r8
    d53e:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    d542:	9e 01       	movw	r18, r28
    d544:	28 5f       	subi	r18, 0xF8	; 248
    d546:	3f 4f       	sbci	r19, 0xFF	; 255
    d548:	49 e9       	ldi	r20, 0x99	; 153
    d54a:	59 e5       	ldi	r21, 0x59	; 89
    d54c:	68 2f       	mov	r22, r24
    d54e:	82 2f       	mov	r24, r18
    d550:	8f 71       	andi	r24, 0x1F	; 31
    d552:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    d556:	c8 01       	movw	r24, r16
    d558:	07 96       	adiw	r24, 0x07	; 7
    d55a:	b4 01       	movw	r22, r8
    d55c:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    d560:	9e 01       	movw	r18, r28
    d562:	26 5f       	subi	r18, 0xF6	; 246
    d564:	3f 4f       	sbci	r19, 0xFF	; 255
    d566:	a7 01       	movw	r20, r14
    d568:	68 2f       	mov	r22, r24
    d56a:	82 2f       	mov	r24, r18
    d56c:	8f 71       	andi	r24, 0x1F	; 31
    d56e:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    d572:	c8 01       	movw	r24, r16
    d574:	09 96       	adiw	r24, 0x09	; 9
    d576:	b4 01       	movw	r22, r8
    d578:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    d57c:	48 2e       	mov	r4, r24
    d57e:	78 2e       	mov	r7, r24
    d580:	7e 01       	movw	r14, r28
    d582:	29 e0       	ldi	r18, 0x09	; 9
    d584:	e2 0e       	add	r14, r18
    d586:	f1 1c       	adc	r15, r1
    d588:	8f e1       	ldi	r24, 0x1F	; 31
    d58a:	e8 22       	and	r14, r24
    d58c:	ff 24       	eor	r15, r15
    d58e:	4e ea       	ldi	r20, 0xAE	; 174
    d590:	53 e0       	ldi	r21, 0x03	; 3
    d592:	64 2d       	mov	r22, r4
    d594:	8e 2d       	mov	r24, r14
    d596:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    d59a:	c8 01       	movw	r24, r16
    d59c:	0b 96       	adiw	r24, 0x0b	; 11
    d59e:	b4 01       	movw	r22, r8
    d5a0:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    d5a4:	38 2e       	mov	r3, r24
    d5a6:	68 2e       	mov	r6, r24
    d5a8:	44 e0       	ldi	r20, 0x04	; 4
    d5aa:	54 e0       	ldi	r21, 0x04	; 4
    d5ac:	68 2f       	mov	r22, r24
    d5ae:	8e 2d       	mov	r24, r14
    d5b0:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    d5b4:	c8 01       	movw	r24, r16
    d5b6:	0c 96       	adiw	r24, 0x0c	; 12
    d5b8:	b4 01       	movw	r22, r8
    d5ba:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    d5be:	58 2e       	mov	r5, r24
    d5c0:	f8 2e       	mov	r15, r24
    d5c2:	4f ee       	ldi	r20, 0xEF	; 239
    d5c4:	53 e0       	ldi	r21, 0x03	; 3
    d5c6:	68 2f       	mov	r22, r24
    d5c8:	8e 2d       	mov	r24, r14
    d5ca:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    d5ce:	c8 01       	movw	r24, r16
    d5d0:	0d 96       	adiw	r24, 0x0d	; 13
    d5d2:	b4 01       	movw	r22, r8
    d5d4:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    d5d8:	18 2f       	mov	r17, r24
    d5da:	28 2e       	mov	r2, r24
    d5dc:	4f eb       	ldi	r20, 0xBF	; 191
    d5de:	53 e0       	ldi	r21, 0x03	; 3
    d5e0:	68 2f       	mov	r22, r24
    d5e2:	8e 2d       	mov	r24, r14
    d5e4:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d5e8:	64 96       	adiw	r28, 0x14	; 20
    d5ea:	cf 71       	andi	r28, 0x1F	; 31
    d5ec:	dd 27       	eor	r29, r29
    d5ee:	ec 2e       	mov	r14, r28
    d5f0:	21 e0       	ldi	r18, 0x01	; 1
    d5f2:	a5 01       	movw	r20, r10
    d5f4:	64 2d       	mov	r22, r4
    d5f6:	8c 2f       	mov	r24, r28
    d5f8:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    d5fc:	40 91 ba 0d 	lds	r20, 0x0DBA
    d600:	50 91 bb 0d 	lds	r21, 0x0DBB
    d604:	21 e0       	ldi	r18, 0x01	; 1
    d606:	63 2d       	mov	r22, r3
    d608:	8c 2f       	mov	r24, r28
    d60a:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    d60e:	40 91 bc 0d 	lds	r20, 0x0DBC
    d612:	50 91 bd 0d 	lds	r21, 0x0DBD
    d616:	21 e0       	ldi	r18, 0x01	; 1
    d618:	65 2d       	mov	r22, r5
    d61a:	8c 2f       	mov	r24, r28
    d61c:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    d620:	21 e0       	ldi	r18, 0x01	; 1
    d622:	a6 01       	movw	r20, r12
    d624:	61 2f       	mov	r22, r17
    d626:	8c 2f       	mov	r24, r28
    d628:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	
	LBWaitSeconds(2);
    d62c:	82 e0       	ldi	r24, 0x02	; 2
    d62e:	0e 94 22 4e 	call	0x9c44	; 0x9c44 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    d632:	80 90 ba 0d 	lds	r8, 0x0DBA
    d636:	90 90 bb 0d 	lds	r9, 0x0DBB
    d63a:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    d63c:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    d63e:	20 97       	sbiw	r28, 0x00	; 0
    d640:	e9 f0       	breq	.+58     	; 0xd67c <tally_score+0x1a2>
	{
		WaitVsync(1);
    d642:	81 e0       	ldi	r24, 0x01	; 1
    d644:	90 e0       	ldi	r25, 0x00	; 0
    d646:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		SFX_HIT;
    d64a:	41 e0       	ldi	r20, 0x01	; 1
    d64c:	6f ef       	ldi	r22, 0xFF	; 255
    d64e:	84 e0       	ldi	r24, 0x04	; 4
    d650:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		tally += 1;
    d654:	0f 5f       	subi	r16, 0xFF	; 255
    d656:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d658:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d65a:	21 e0       	ldi	r18, 0x01	; 1
    d65c:	a8 01       	movw	r20, r16
    d65e:	67 2d       	mov	r22, r7
    d660:	8e 2d       	mov	r24, r14
    d662:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    d666:	21 e0       	ldi	r18, 0x01	; 1
    d668:	ae 01       	movw	r20, r28
    d66a:	66 2d       	mov	r22, r6
    d66c:	8e 2d       	mov	r24, r14
    d66e:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d672:	8c ed       	ldi	r24, 0xDC	; 220
    d674:	95 e0       	ldi	r25, 0x05	; 5
    d676:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <WaitUs>
    d67a:	e1 cf       	rjmp	.-62     	; 0xd63e <tally_score+0x164>
    d67c:	a8 0c       	add	r10, r8
    d67e:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    d680:	c0 91 bc 0d 	lds	r28, 0x0DBC
    d684:	d0 91 bd 0d 	lds	r29, 0x0DBD
	while (counter > 0)
    d688:	20 97       	sbiw	r28, 0x00	; 0
    d68a:	31 f1       	breq	.+76     	; 0xd6d8 <tally_score+0x1fe>
	{
		WaitVsync(1);
    d68c:	81 e0       	ldi	r24, 0x01	; 1
    d68e:	90 e0       	ldi	r25, 0x00	; 0
    d690:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		SFX_HIT;
    d694:	41 e0       	ldi	r20, 0x01	; 1
    d696:	6f ef       	ldi	r22, 0xFF	; 255
    d698:	84 e0       	ldi	r24, 0x04	; 4
    d69a:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    d69e:	c5 01       	movw	r24, r10
    d6a0:	02 97       	sbiw	r24, 0x02	; 2
    d6a2:	8e 3f       	cpi	r24, 0xFE	; 254
    d6a4:	9f 4f       	sbci	r25, 0xFF	; 255
    d6a6:	20 f4       	brcc	.+8      	; 0xd6b0 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    d6a8:	81 e0       	ldi	r24, 0x01	; 1
    d6aa:	a8 1a       	sub	r10, r24
    d6ac:	b1 08       	sbc	r11, r1
    d6ae:	02 c0       	rjmp	.+4      	; 0xd6b4 <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    d6b0:	a1 2c       	mov	r10, r1
    d6b2:	b1 2c       	mov	r11, r1
		counter -= 1;
    d6b4:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d6b6:	21 e0       	ldi	r18, 0x01	; 1
    d6b8:	a5 01       	movw	r20, r10
    d6ba:	67 2d       	mov	r22, r7
    d6bc:	8e 2d       	mov	r24, r14
    d6be:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    d6c2:	21 e0       	ldi	r18, 0x01	; 1
    d6c4:	ae 01       	movw	r20, r28
    d6c6:	6f 2d       	mov	r22, r15
    d6c8:	8e 2d       	mov	r24, r14
    d6ca:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d6ce:	8c ed       	ldi	r24, 0xDC	; 220
    d6d0:	95 e0       	ldi	r25, 0x05	; 5
    d6d2:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <WaitUs>
    d6d6:	d8 cf       	rjmp	.-80     	; 0xd688 <tally_score+0x1ae>
    d6d8:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    d6da:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    d6dc:	20 97       	sbiw	r28, 0x00	; 0
    d6de:	e9 f0       	breq	.+58     	; 0xd71a <tally_score+0x240>
	{
		WaitVsync(1);
    d6e0:	81 e0       	ldi	r24, 0x01	; 1
    d6e2:	90 e0       	ldi	r25, 0x00	; 0
    d6e4:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		SFX_HIT;
    d6e8:	41 e0       	ldi	r20, 0x01	; 1
    d6ea:	6f ef       	ldi	r22, 0xFF	; 255
    d6ec:	84 e0       	ldi	r24, 0x04	; 4
    d6ee:	0e 94 e3 41 	call	0x83c6	; 0x83c6 <TriggerFx>
		tally += 1;
    d6f2:	0f 5f       	subi	r16, 0xFF	; 255
    d6f4:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    d6f6:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    d6f8:	21 e0       	ldi	r18, 0x01	; 1
    d6fa:	a8 01       	movw	r20, r16
    d6fc:	67 2d       	mov	r22, r7
    d6fe:	8e 2d       	mov	r24, r14
    d700:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    d704:	21 e0       	ldi	r18, 0x01	; 1
    d706:	ae 01       	movw	r20, r28
    d708:	62 2d       	mov	r22, r2
    d70a:	8e 2d       	mov	r24, r14
    d70c:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    d710:	8c ed       	ldi	r24, 0xDC	; 220
    d712:	95 e0       	ldi	r25, 0x05	; 5
    d714:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <WaitUs>
    d718:	e1 cf       	rjmp	.-62     	; 0xd6dc <tally_score+0x202>
    d71a:	ac 0c       	add	r10, r12
    d71c:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    d71e:	b0 92 b9 0d 	sts	0x0DB9, r11
    d722:	a0 92 b8 0d 	sts	0x0DB8, r10
	game.time = 0;
    d726:	10 92 bd 0d 	sts	0x0DBD, r1
    d72a:	10 92 bc 0d 	sts	0x0DBC, r1
	LBWaitSeconds(2);
    d72e:	82 e0       	ldi	r24, 0x02	; 2
}
    d730:	df 91       	pop	r29
    d732:	cf 91       	pop	r28
    d734:	1f 91       	pop	r17
    d736:	0f 91       	pop	r16
    d738:	ff 90       	pop	r15
    d73a:	ef 90       	pop	r14
    d73c:	df 90       	pop	r13
    d73e:	cf 90       	pop	r12
    d740:	bf 90       	pop	r11
    d742:	af 90       	pop	r10
    d744:	9f 90       	pop	r9
    d746:	8f 90       	pop	r8
    d748:	7f 90       	pop	r7
    d74a:	6f 90       	pop	r6
    d74c:	5f 90       	pop	r5
    d74e:	4f 90       	pop	r4
    d750:	3f 90       	pop	r3
    d752:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    d754:	0c 94 22 4e 	jmp	0x9c44	; 0x9c44 <LBWaitSeconds>

0000d758 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    d758:	cf 93       	push	r28
	if (player == &game.boss) {
    d75a:	84 55       	subi	r24, 0x54	; 84
    d75c:	9e 40       	sbci	r25, 0x0E	; 14
    d75e:	29 f4       	brne	.+10     	; 0xd76a <handle_player_death+0x12>
		game.level_ended = 1;
    d760:	81 e0       	ldi	r24, 0x01	; 1
    d762:	80 93 d3 0d 	sts	0x0DD3, r24
		return 1;
    d766:	c1 e0       	ldi	r28, 0x01	; 1
    d768:	34 c0       	rjmp	.+104    	; 0xd7d2 <handle_player_death+0x7a>
	}
	game.lives--;
    d76a:	80 91 c9 0d 	lds	r24, 0x0DC9
    d76e:	81 50       	subi	r24, 0x01	; 1
    d770:	80 93 c9 0d 	sts	0x0DC9, r24
	clear_sprites(0, 6);
    d774:	66 e0       	ldi	r22, 0x06	; 6
    d776:	80 e0       	ldi	r24, 0x00	; 0
    d778:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    d77c:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	if (game.lives == 0)
    d780:	c0 91 c9 0d 	lds	r28, 0x0DC9
    d784:	c1 11       	cpse	r28, r1
    d786:	09 c0       	rjmp	.+18     	; 0xd79a <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    d788:	60 e0       	ldi	r22, 0x00	; 0
    d78a:	70 e0       	ldi	r23, 0x00	; 0
    d78c:	85 eb       	ldi	r24, 0xB5	; 181
    d78e:	93 e0       	ldi	r25, 0x03	; 3
    d790:	0e 94 6d 6a 	call	0xd4da	; 0xd4da <tally_score>
		exit_game();
    d794:	0e 94 09 69 	call	0xd212	; 0xd212 <exit_game>
    d798:	1c c0       	rjmp	.+56     	; 0xd7d2 <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    d79a:	61 e0       	ldi	r22, 0x01	; 1
    d79c:	81 e0       	ldi	r24, 0x01	; 1
    d79e:	0e 94 66 4c 	call	0x98cc	; 0x98cc <FadeOut>
	ClearVram();
    d7a2:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d7a6:	64 e1       	ldi	r22, 0x14	; 20
    d7a8:	80 e0       	ldi	r24, 0x00	; 0
    d7aa:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
	LBRotateSprites();
    d7ae:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    d7b2:	60 e0       	ldi	r22, 0x00	; 0
    d7b4:	81 e0       	ldi	r24, 0x01	; 1
    d7b6:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <FadeIn>
	init_player_state();
    d7ba:	0e 94 a6 53 	call	0xa74c	; 0xa74c <init_player_state>
	init_boss_state();
    d7be:	0e 94 1c 53 	call	0xa638	; 0xa638 <init_boss_state>
	init_enemy_state();
    d7c2:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <init_enemy_state>
	load_level(game.current_level_index, false);
    d7c6:	60 e0       	ldi	r22, 0x00	; 0
    d7c8:	80 91 cb 0d 	lds	r24, 0x0DCB
    d7cc:	0e 94 16 65 	call	0xca2c	; 0xca2c <load_level>
	return 0;
    d7d0:	c0 e0       	ldi	r28, 0x00	; 0
}
    d7d2:	8c 2f       	mov	r24, r28
    d7d4:	cf 91       	pop	r28
    d7d6:	08 95       	ret

0000d7d8 <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    d7d8:	cf 92       	push	r12
    d7da:	df 92       	push	r13
    d7dc:	ef 92       	push	r14
    d7de:	ff 92       	push	r15
    d7e0:	0f 93       	push	r16
    d7e2:	1f 93       	push	r17
    d7e4:	cf 93       	push	r28
    d7e6:	df 93       	push	r29
    d7e8:	1f 92       	push	r1
    d7ea:	cd b7       	in	r28, 0x3d	; 61
    d7ec:	de b7       	in	r29, 0x3e	; 62
    d7ee:	6c 01       	movw	r12, r24
    d7f0:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
    d7f2:	7c 01       	movw	r14, r24
    d7f4:	24 e7       	ldi	r18, 0x74	; 116
    d7f6:	e2 0e       	add	r14, r18
    d7f8:	f1 1c       	adc	r15, r1
    d7fa:	c7 01       	movw	r24, r14
    d7fc:	0e 94 a9 5b 	call	0xb752	; 0xb752 <handle_music_toggle>
	handle_demo_play(player);
    d800:	c6 01       	movw	r24, r12
    d802:	0e 94 b5 5b 	call	0xb76a	; 0xb76a <handle_demo_play>
	
	if (player->flags & EXPLODING)
    d806:	f6 01       	movw	r30, r12
    d808:	00 85       	ldd	r16, Z+8	; 0x08
    d80a:	04 ff       	sbrs	r16, 4
    d80c:	19 c0       	rjmp	.+50     	; 0xd840 <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    d80e:	04 85       	ldd	r16, Z+12	; 0x0c
    d810:	23 85       	ldd	r18, Z+11	; 0x0b
    d812:	41 2f       	mov	r20, r17
    d814:	b6 01       	movw	r22, r12
    d816:	64 59       	subi	r22, 0x94	; 148
    d818:	7f 4f       	sbci	r23, 0xFF	; 255
    d81a:	c6 01       	movw	r24, r12
    d81c:	08 96       	adiw	r24, 0x08	; 8
    d81e:	0e 94 74 5f 	call	0xbee8	; 0xbee8 <map_explosion>
    d822:	88 23       	and	r24, r24
    d824:	09 f4       	brne	.+2      	; 0xd828 <update_player+0x50>
    d826:	01 c2       	rjmp	.+1026   	; 0xdc2a <update_player+0x452>
		{
			return handle_player_death(player);
    d828:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    d82a:	0f 90       	pop	r0
    d82c:	df 91       	pop	r29
    d82e:	cf 91       	pop	r28
    d830:	1f 91       	pop	r17
    d832:	0f 91       	pop	r16
    d834:	ff 90       	pop	r15
    d836:	ef 90       	pop	r14
    d838:	df 90       	pop	r13
    d83a:	cf 90       	pop	r12
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    d83c:	0c 94 ac 6b 	jmp	0xd758	; 0xd758 <handle_player_death>
		}
	}
	else if (is_space())
    d840:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    d844:	88 23       	and	r24, r24
    d846:	09 f4       	brne	.+2      	; 0xd84a <update_player+0x72>
    d848:	a6 c0       	rjmp	.+332    	; 0xd996 <update_player+0x1be>
	{
		if (game.current_level_index == 9)
    d84a:	80 91 cb 0d 	lds	r24, 0x0DCB
    d84e:	89 30       	cpi	r24, 0x09	; 9
    d850:	09 f0       	breq	.+2      	; 0xd854 <update_player+0x7c>
    d852:	4d c0       	rjmp	.+154    	; 0xd8ee <update_player+0x116>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    d854:	80 91 b6 0d 	lds	r24, 0x0DB6
    d858:	90 91 b7 0d 	lds	r25, 0x0DB7
    d85c:	e3 e0       	ldi	r30, 0x03	; 3
    d85e:	96 95       	lsr	r25
    d860:	87 95       	ror	r24
    d862:	ea 95       	dec	r30
    d864:	e1 f7       	brne	.-8      	; 0xd85e <update_player+0x86>
    d866:	4c 96       	adiw	r24, 0x1c	; 28
    d868:	82 3d       	cpi	r24, 0xD2	; 210
    d86a:	91 05       	cpc	r25, r1
    d86c:	08 f4       	brcc	.+2      	; 0xd870 <update_player+0x98>
    d86e:	3f c0       	rjmp	.+126    	; 0xd8ee <update_player+0x116>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    d870:	05 ff       	sbrs	r16, 5
    d872:	02 c0       	rjmp	.+4      	; 0xd878 <update_player+0xa0>
				{
					space_ship_speed = 0;
    d874:	00 e0       	ldi	r16, 0x00	; 0
    d876:	01 c0       	rjmp	.+2      	; 0xd87a <update_player+0xa2>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    d878:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    d87a:	80 91 d5 0d 	lds	r24, 0x0DD5
    d87e:	86 fd       	sbrc	r24, 6
    d880:	07 c0       	rjmp	.+14     	; 0xd890 <update_player+0xb8>
				{
					game.flags |= BOSS_APROACHING;
    d882:	80 64       	ori	r24, 0x40	; 64
    d884:	80 93 d5 0d 	sts	0x0DD5, r24
					explode_all_enemies();
    d888:	0e 94 8d 5b 	call	0xb71a	; 0xb71a <explode_all_enemies>
					StopSong();
    d88c:	0e 94 1d 41 	call	0x823a	; 0x823a <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    d890:	80 91 b6 0d 	lds	r24, 0x0DB6
    d894:	90 91 b7 0d 	lds	r25, 0x0DB7
    d898:	73 e0       	ldi	r23, 0x03	; 3
    d89a:	96 95       	lsr	r25
    d89c:	87 95       	ror	r24
    d89e:	7a 95       	dec	r23
    d8a0:	e1 f7       	brne	.-8      	; 0xd89a <update_player+0xc2>
    d8a2:	4c 96       	adiw	r24, 0x1c	; 28
    d8a4:	8a 3f       	cpi	r24, 0xFA	; 250
    d8a6:	91 05       	cpc	r25, r1
    d8a8:	68 f0       	brcs	.+26     	; 0xd8c4 <update_player+0xec>
    d8aa:	80 91 d5 0d 	lds	r24, 0x0DD5
    d8ae:	87 fd       	sbrc	r24, 7
    d8b0:	09 c0       	rjmp	.+18     	; 0xd8c4 <update_player+0xec>
				{
					game.flags |= BOSS_REACHED;
    d8b2:	80 68       	ori	r24, 0x80	; 128
    d8b4:	80 93 d5 0d 	sts	0x0DD5, r24
					init_enemy_boss_turrets();
    d8b8:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <init_enemy_boss_turrets>
					StartSong(planetsong);
    d8bc:	83 ed       	ldi	r24, 0xD3	; 211
    d8be:	9a e0       	ldi	r25, 0x0A	; 10
    d8c0:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    d8c4:	80 91 d5 0d 	lds	r24, 0x0DD5
    d8c8:	87 ff       	sbrs	r24, 7
    d8ca:	12 c0       	rjmp	.+36     	; 0xd8f0 <update_player+0x118>
    d8cc:	80 91 d1 0d 	lds	r24, 0x0DD1
    d8d0:	81 11       	cpse	r24, r1
    d8d2:	0e c0       	rjmp	.+28     	; 0xd8f0 <update_player+0x118>
				{
					init_enemy_boss_eyes();
    d8d4:	0e 94 f9 56 	call	0xadf2	; 0xadf2 <init_enemy_boss_eyes>
					game.eye_clusters--;
    d8d8:	80 91 d4 0d 	lds	r24, 0x0DD4
    d8dc:	81 50       	subi	r24, 0x01	; 1
    d8de:	80 93 d4 0d 	sts	0x0DD4, r24
					if (game.eye_clusters == 0)
    d8e2:	81 11       	cpse	r24, r1
    d8e4:	05 c0       	rjmp	.+10     	; 0xd8f0 <update_player+0x118>
					{
						game.level_ended = 1;
    d8e6:	81 e0       	ldi	r24, 0x01	; 1
    d8e8:	80 93 d3 0d 	sts	0x0DD3, r24
    d8ec:	01 c0       	rjmp	.+2      	; 0xd8f0 <update_player+0x118>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    d8ee:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    d8f0:	f6 01       	movw	r30, r12
    d8f2:	80 85       	ldd	r24, Z+8	; 0x08
    d8f4:	85 ff       	sbrs	r24, 5
    d8f6:	08 c0       	rjmp	.+16     	; 0xd908 <update_player+0x130>
    d8f8:	80 91 cb 0d 	lds	r24, 0x0DCB
    d8fc:	89 30       	cpi	r24, 0x09	; 9
    d8fe:	21 f0       	breq	.+8      	; 0xd908 <update_player+0x130>
			player->shared.vx = space_ship_speed*2;
    d900:	00 0f       	add	r16, r16
    d902:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    d904:	14 82       	std	Z+4, r1	; 0x04
    d906:	43 c0       	rjmp	.+134    	; 0xd98e <update_player+0x1b6>
		} else {
			player->shared.vy = 0;
    d908:	f6 01       	movw	r30, r12
    d90a:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    d90c:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    d90e:	e8 58       	subi	r30, 0x88	; 136
    d910:	ff 4f       	sbci	r31, 0xFF	; 255
    d912:	20 81       	ld	r18, Z
    d914:	25 ff       	sbrs	r18, 5
    d916:	11 c0       	rjmp	.+34     	; 0xd93a <update_player+0x162>
    d918:	f6 01       	movw	r30, r12
    d91a:	82 81       	ldd	r24, Z+2	; 0x02
    d91c:	93 81       	ldd	r25, Z+3	; 0x03
    d91e:	63 e0       	ldi	r22, 0x03	; 3
    d920:	96 95       	lsr	r25
    d922:	87 95       	ror	r24
    d924:	6a 95       	dec	r22
    d926:	e1 f7       	brne	.-8      	; 0xd920 <update_player+0x148>
    d928:	01 96       	adiw	r24, 0x01	; 1
    d92a:	40 91 c6 0d 	lds	r20, 0x0DC6
    d92e:	50 e0       	ldi	r21, 0x00	; 0
    d930:	84 17       	cp	r24, r20
    d932:	95 07       	cpc	r25, r21
    d934:	10 f4       	brcc	.+4      	; 0xd93a <update_player+0x162>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    d936:	8c e3       	ldi	r24, 0x3C	; 60
    d938:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    d93a:	27 ff       	sbrs	r18, 7
    d93c:	11 c0       	rjmp	.+34     	; 0xd960 <update_player+0x188>
    d93e:	f6 01       	movw	r30, r12
    d940:	40 81       	ld	r20, Z
    d942:	51 81       	ldd	r21, Z+1	; 0x01
    d944:	48 5e       	subi	r20, 0xE8	; 232
    d946:	5f 4f       	sbci	r21, 0xFF	; 255
    d948:	80 91 b6 0d 	lds	r24, 0x0DB6
    d94c:	90 91 b7 0d 	lds	r25, 0x0DB7
    d950:	80 52       	subi	r24, 0x20	; 32
    d952:	9f 4f       	sbci	r25, 0xFF	; 255
    d954:	48 17       	cp	r20, r24
    d956:	59 07       	cpc	r21, r25
    d958:	18 f4       	brcc	.+6      	; 0xd960 <update_player+0x188>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    d95a:	8c e3       	ldi	r24, 0x3C	; 60
    d95c:	80 0f       	add	r24, r16
    d95e:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    d960:	26 ff       	sbrs	r18, 6
    d962:	0c c0       	rjmp	.+24     	; 0xd97c <update_player+0x1a4>
    d964:	f6 01       	movw	r30, r12
    d966:	40 81       	ld	r20, Z
    d968:	51 81       	ldd	r21, Z+1	; 0x01
    d96a:	80 91 b6 0d 	lds	r24, 0x0DB6
    d96e:	90 91 b7 0d 	lds	r25, 0x0DB7
    d972:	84 17       	cp	r24, r20
    d974:	95 07       	cpc	r25, r21
    d976:	10 f4       	brcc	.+4      	; 0xd97c <update_player+0x1a4>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    d978:	0c 53       	subi	r16, 0x3C	; 60
    d97a:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    d97c:	24 ff       	sbrs	r18, 4
    d97e:	07 c0       	rjmp	.+14     	; 0xd98e <update_player+0x1b6>
    d980:	f6 01       	movw	r30, r12
    d982:	82 81       	ldd	r24, Z+2	; 0x02
    d984:	93 81       	ldd	r25, Z+3	; 0x03
    d986:	89 2b       	or	r24, r25
    d988:	11 f0       	breq	.+4      	; 0xd98e <update_player+0x1b6>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    d98a:	84 ec       	ldi	r24, 0xC4	; 196
    d98c:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    d98e:	c6 01       	movw	r24, r12
    d990:	8c 5a       	subi	r24, 0xAC	; 172
    d992:	9f 4f       	sbci	r25, 0xFF	; 255
    d994:	43 c1       	rjmp	.+646    	; 0xdc1c <update_player+0x444>
	}
	else if (player->flags & (IDLE|RUNNING))
    d996:	80 2f       	mov	r24, r16
    d998:	8a 70       	andi	r24, 0x0A	; 10
    d99a:	09 f4       	brne	.+2      	; 0xd99e <update_player+0x1c6>
    d99c:	97 c0       	rjmp	.+302    	; 0xdacc <update_player+0x2f4>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    d99e:	f6 01       	movw	r30, r12
    d9a0:	44 85       	ldd	r20, Z+12	; 0x0c
    d9a2:	63 85       	ldd	r22, Z+11	; 0x0b
    d9a4:	c6 01       	movw	r24, r12
    d9a6:	0e 94 2b 5a 	call	0xb456	; 0xb456 <on_solid_ground>
    d9aa:	81 11       	cpse	r24, r1
    d9ac:	06 c0       	rjmp	.+12     	; 0xd9ba <update_player+0x1e2>
		{
			player->shared.gravity = GRAVITY;
    d9ae:	88 ec       	ldi	r24, 0xC8	; 200
    d9b0:	f6 01       	movw	r30, r12
    d9b2:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    d9b4:	81 e0       	ldi	r24, 0x01	; 1
    d9b6:	80 87       	std	Z+8, r24	; 0x08
    d9b8:	0f c1       	rjmp	.+542    	; 0xdbd8 <update_player+0x400>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    d9ba:	f6 01       	movw	r30, r12
    d9bc:	e8 58       	subi	r30, 0x88	; 136
    d9be:	ff 4f       	sbci	r31, 0xFF	; 255
    d9c0:	80 81       	ld	r24, Z
    d9c2:	85 ff       	sbrs	r24, 5
    d9c4:	26 c0       	rjmp	.+76     	; 0xda12 <update_player+0x23a>
			{
				player->shared.y += 16;
    d9c6:	f6 01       	movw	r30, r12
    d9c8:	82 81       	ldd	r24, Z+2	; 0x02
    d9ca:	93 81       	ldd	r25, Z+3	; 0x03
    d9cc:	40 96       	adiw	r24, 0x10	; 16
    d9ce:	93 83       	std	Z+3, r25	; 0x03
    d9d0:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    d9d2:	82 85       	ldd	r24, Z+10	; 0x0a
    d9d4:	81 30       	cpi	r24, 0x01	; 1
    d9d6:	29 f4       	brne	.+10     	; 0xd9e2 <update_player+0x20a>
				{
					player->shared.x -= 8;
    d9d8:	80 81       	ld	r24, Z
    d9da:	91 81       	ldd	r25, Z+1	; 0x01
    d9dc:	08 97       	sbiw	r24, 0x08	; 8
    d9de:	91 83       	std	Z+1, r25	; 0x01
    d9e0:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    d9e2:	f6 01       	movw	r30, r12
    d9e4:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    d9e6:	84 e0       	ldi	r24, 0x04	; 4
    d9e8:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    d9ea:	83 e0       	ldi	r24, 0x03	; 3
    d9ec:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    d9ee:	81 e0       	ldi	r24, 0x01	; 1
    d9f0:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(slot+3, 3);
    d9f2:	63 e0       	ldi	r22, 0x03	; 3
    d9f4:	83 e0       	ldi	r24, 0x03	; 3
    d9f6:	81 0f       	add	r24, r17
    d9f8:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    d9fc:	24 e0       	ldi	r18, 0x04	; 4
    d9fe:	12 9f       	mul	r17, r18
    da00:	f0 01       	movw	r30, r0
    da02:	11 24       	eor	r1, r1
    da04:	ec 51       	subi	r30, 0x1C	; 28
    da06:	f0 4f       	sbci	r31, 0xF0	; 240
    da08:	43 81       	ldd	r20, Z+3	; 0x03
    da0a:	c6 01       	movw	r24, r12
    da0c:	8c 59       	subi	r24, 0x9C	; 156
    da0e:	9f 4f       	sbci	r25, 0xFF	; 255
    da10:	45 c0       	rjmp	.+138    	; 0xda9c <update_player+0x2c4>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    da12:	87 ff       	sbrs	r24, 7
    da14:	1d c0       	rjmp	.+58     	; 0xda50 <update_player+0x278>
    da16:	f6 01       	movw	r30, r12
    da18:	20 81       	ld	r18, Z
    da1a:	31 81       	ldd	r19, Z+1	; 0x01
    da1c:	53 e0       	ldi	r21, 0x03	; 3
    da1e:	36 95       	lsr	r19
    da20:	27 95       	ror	r18
    da22:	5a 95       	dec	r21
    da24:	e1 f7       	brne	.-8      	; 0xda1e <update_player+0x246>
    da26:	2e 5f       	subi	r18, 0xFE	; 254
    da28:	3f 4f       	sbci	r19, 0xFF	; 255
    da2a:	40 91 c5 0d 	lds	r20, 0x0DC5
    da2e:	50 e0       	ldi	r21, 0x00	; 0
    da30:	24 17       	cp	r18, r20
    da32:	35 07       	cpc	r19, r21
    da34:	68 f4       	brcc	.+26     	; 0xda50 <update_player+0x278>
			{
				player->shared.vx = RUN_SPEED;
    da36:	8c e3       	ldi	r24, 0x3C	; 60
    da38:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    da3a:	82 e0       	ldi	r24, 0x02	; 2
    da3c:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    da3e:	81 e0       	ldi	r24, 0x01	; 1
    da40:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    da42:	c6 01       	movw	r24, r12
    da44:	8c 5a       	subi	r24, 0xAC	; 172
    da46:	9f 4f       	sbci	r25, 0xFF	; 255
    da48:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    da4c:	40 e0       	ldi	r20, 0x00	; 0
    da4e:	2a c0       	rjmp	.+84     	; 0xdaa4 <update_player+0x2cc>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    da50:	86 ff       	sbrs	r24, 6
    da52:	16 c0       	rjmp	.+44     	; 0xda80 <update_player+0x2a8>
    da54:	f6 01       	movw	r30, r12
    da56:	20 81       	ld	r18, Z
    da58:	31 81       	ldd	r19, Z+1	; 0x01
    da5a:	80 91 b6 0d 	lds	r24, 0x0DB6
    da5e:	90 91 b7 0d 	lds	r25, 0x0DB7
    da62:	82 17       	cp	r24, r18
    da64:	93 07       	cpc	r25, r19
    da66:	60 f4       	brcc	.+24     	; 0xda80 <update_player+0x2a8>
			{
				player->shared.vx = -RUN_SPEED;
    da68:	84 ec       	ldi	r24, 0xC4	; 196
    da6a:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    da6c:	82 e0       	ldi	r24, 0x02	; 2
    da6e:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    da70:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    da72:	c6 01       	movw	r24, r12
    da74:	8c 5a       	subi	r24, 0xAC	; 172
    da76:	9f 4f       	sbci	r25, 0xFF	; 255
    da78:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    da7c:	41 e0       	ldi	r20, 0x01	; 1
    da7e:	12 c0       	rjmp	.+36     	; 0xdaa4 <update_player+0x2cc>
			}
			else
			{
				player->flags = IDLE;
    da80:	88 e0       	ldi	r24, 0x08	; 8
    da82:	f6 01       	movw	r30, r12
    da84:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    da86:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    da88:	24 e0       	ldi	r18, 0x04	; 4
    da8a:	12 9f       	mul	r17, r18
    da8c:	f0 01       	movw	r30, r0
    da8e:	11 24       	eor	r1, r1
    da90:	ec 51       	subi	r30, 0x1C	; 28
    da92:	f0 4f       	sbci	r31, 0xF0	; 240
    da94:	43 81       	ldd	r20, Z+3	; 0x03
    da96:	c6 01       	movw	r24, r12
    da98:	84 5b       	subi	r24, 0xB4	; 180
    da9a:	9f 4f       	sbci	r25, 0xFF	; 255
    da9c:	49 83       	std	Y+1, r20	; 0x01
    da9e:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    daa2:	49 81       	ldd	r20, Y+1	; 0x01
    daa4:	bc 01       	movw	r22, r24
    daa6:	81 2f       	mov	r24, r17
    daa8:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    daac:	f7 01       	movw	r30, r14
    daae:	80 81       	ld	r24, Z
    dab0:	91 81       	ldd	r25, Z+1	; 0x01
    dab2:	90 ff       	sbrs	r25, 0
    dab4:	ba c0       	rjmp	.+372    	; 0xdc2a <update_player+0x452>
    dab6:	f6 01       	movw	r30, r12
    dab8:	80 85       	ldd	r24, Z+8	; 0x08
    daba:	82 fd       	sbrc	r24, 2
    dabc:	b6 c0       	rjmp	.+364    	; 0xdc2a <update_player+0x452>
			{
				player->shared.vy = -JUMP_SPEED;
    dabe:	81 e8       	ldi	r24, 0x81	; 129
    dac0:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    dac2:	88 ec       	ldi	r24, 0xC8	; 200
    dac4:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    dac6:	81 e0       	ldi	r24, 0x01	; 1
    dac8:	80 87       	std	Z+8, r24	; 0x08
    daca:	82 c0       	rjmp	.+260    	; 0xdbd0 <update_player+0x3f8>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    dacc:	00 ff       	sbrs	r16, 0
    dace:	4c c0       	rjmp	.+152    	; 0xdb68 <update_player+0x390>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    dad0:	f6 01       	movw	r30, r12
    dad2:	e8 58       	subi	r30, 0x88	; 136
    dad4:	ff 4f       	sbci	r31, 0xFF	; 255
    dad6:	60 81       	ld	r22, Z
    dad8:	c6 01       	movw	r24, r12
    dada:	84 5a       	subi	r24, 0xA4	; 164
    dadc:	9f 4f       	sbci	r25, 0xFF	; 255
    dade:	67 ff       	sbrs	r22, 7
    dae0:	18 c0       	rjmp	.+48     	; 0xdb12 <update_player+0x33a>
    dae2:	f6 01       	movw	r30, r12
    dae4:	20 81       	ld	r18, Z
    dae6:	31 81       	ldd	r19, Z+1	; 0x01
    dae8:	43 e0       	ldi	r20, 0x03	; 3
    daea:	36 95       	lsr	r19
    daec:	27 95       	ror	r18
    daee:	4a 95       	dec	r20
    daf0:	e1 f7       	brne	.-8      	; 0xdaea <update_player+0x312>
    daf2:	2e 5f       	subi	r18, 0xFE	; 254
    daf4:	3f 4f       	sbci	r19, 0xFF	; 255
    daf6:	40 91 c5 0d 	lds	r20, 0x0DC5
    dafa:	50 e0       	ldi	r21, 0x00	; 0
    dafc:	24 17       	cp	r18, r20
    dafe:	35 07       	cpc	r19, r21
    db00:	40 f4       	brcc	.+16     	; 0xdb12 <update_player+0x33a>
		{
			player->shared.vx = RUN_SPEED;
    db02:	2c e3       	ldi	r18, 0x3C	; 60
    db04:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    db06:	21 e0       	ldi	r18, 0x01	; 1
    db08:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    db0a:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    db0e:	40 e0       	ldi	r20, 0x00	; 0
    db10:	20 c0       	rjmp	.+64     	; 0xdb52 <update_player+0x37a>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    db12:	66 ff       	sbrs	r22, 6
    db14:	11 c0       	rjmp	.+34     	; 0xdb38 <update_player+0x360>
    db16:	f6 01       	movw	r30, r12
    db18:	40 81       	ld	r20, Z
    db1a:	51 81       	ldd	r21, Z+1	; 0x01
    db1c:	20 91 b6 0d 	lds	r18, 0x0DB6
    db20:	30 91 b7 0d 	lds	r19, 0x0DB7
    db24:	24 17       	cp	r18, r20
    db26:	35 07       	cpc	r19, r21
    db28:	38 f4       	brcc	.+14     	; 0xdb38 <update_player+0x360>
		{
			player->shared.vx = -RUN_SPEED;
    db2a:	24 ec       	ldi	r18, 0xC4	; 196
    db2c:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    db2e:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    db30:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    db34:	41 e0       	ldi	r20, 0x01	; 1
    db36:	0d c0       	rjmp	.+26     	; 0xdb52 <update_player+0x37a>
		}
		else
		{
			player->shared.vx = 0;
    db38:	f6 01       	movw	r30, r12
    db3a:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    db3c:	24 e0       	ldi	r18, 0x04	; 4
    db3e:	12 9f       	mul	r17, r18
    db40:	f0 01       	movw	r30, r0
    db42:	11 24       	eor	r1, r1
    db44:	ec 51       	subi	r30, 0x1C	; 28
    db46:	f0 4f       	sbci	r31, 0xF0	; 240
    db48:	43 81       	ldd	r20, Z+3	; 0x03
    db4a:	49 83       	std	Y+1, r20	; 0x01
    db4c:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    db50:	49 81       	ldd	r20, Y+1	; 0x01
    db52:	bc 01       	movw	r22, r24
    db54:	81 2f       	mov	r24, r17
    db56:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    db5a:	f6 01       	movw	r30, r12
    db5c:	86 81       	ldd	r24, Z+6	; 0x06
    db5e:	81 11       	cpse	r24, r1
    db60:	64 c0       	rjmp	.+200    	; 0xdc2a <update_player+0x452>
		{
			player->flags = IDLE;
    db62:	88 e0       	ldi	r24, 0x08	; 8
    db64:	80 87       	std	Z+8, r24	; 0x08
    db66:	61 c0       	rjmp	.+194    	; 0xdc2a <update_player+0x452>
		}
	}
	else if (player->flags & PRONE)
    db68:	02 ff       	sbrs	r16, 2
    db6a:	5f c0       	rjmp	.+190    	; 0xdc2a <update_player+0x452>
	{
		if (player->controls.pressed & BTN_UP)
    db6c:	f7 01       	movw	r30, r14
    db6e:	80 81       	ld	r24, Z
    db70:	91 81       	ldd	r25, Z+1	; 0x01
    db72:	84 ff       	sbrs	r24, 4
    db74:	16 c0       	rjmp	.+44     	; 0xdba2 <update_player+0x3ca>
		{
			player->flags = IDLE;	
    db76:	88 e0       	ldi	r24, 0x08	; 8
    db78:	f6 01       	movw	r30, r12
    db7a:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    db7c:	82 81       	ldd	r24, Z+2	; 0x02
    db7e:	93 81       	ldd	r25, Z+3	; 0x03
    db80:	40 97       	sbiw	r24, 0x10	; 16
    db82:	93 83       	std	Z+3, r25	; 0x03
    db84:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    db86:	82 85       	ldd	r24, Z+10	; 0x0a
    db88:	81 30       	cpi	r24, 0x01	; 1
    db8a:	29 f4       	brne	.+10     	; 0xdb96 <update_player+0x3be>
			{
				player->shared.x += 8;
    db8c:	80 81       	ld	r24, Z
    db8e:	91 81       	ldd	r25, Z+1	; 0x01
    db90:	08 96       	adiw	r24, 0x08	; 8
    db92:	91 83       	std	Z+1, r25	; 0x01
    db94:	80 83       	st	Z, r24
			}
			player->width = 2;
    db96:	82 e0       	ldi	r24, 0x02	; 2
    db98:	f6 01       	movw	r30, r12
    db9a:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    db9c:	83 e0       	ldi	r24, 0x03	; 3
    db9e:	84 87       	std	Z+12, r24	; 0x0c
    dba0:	44 c0       	rjmp	.+136    	; 0xdc2a <update_player+0x452>
		}
		else if (player->controls.pressed & BTN_A)
    dba2:	90 ff       	sbrs	r25, 0
    dba4:	28 c0       	rjmp	.+80     	; 0xdbf6 <update_player+0x41e>
		{
			player->flags = JUMPING;
    dba6:	81 e0       	ldi	r24, 0x01	; 1
    dba8:	f6 01       	movw	r30, r12
    dbaa:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    dbac:	82 81       	ldd	r24, Z+2	; 0x02
    dbae:	93 81       	ldd	r25, Z+3	; 0x03
    dbb0:	40 97       	sbiw	r24, 0x10	; 16
    dbb2:	93 83       	std	Z+3, r25	; 0x03
    dbb4:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    dbb6:	82 85       	ldd	r24, Z+10	; 0x0a
    dbb8:	81 30       	cpi	r24, 0x01	; 1
    dbba:	29 f4       	brne	.+10     	; 0xdbc6 <update_player+0x3ee>
			{
				player->shared.x += 8;
    dbbc:	80 81       	ld	r24, Z
    dbbe:	91 81       	ldd	r25, Z+1	; 0x01
    dbc0:	08 96       	adiw	r24, 0x08	; 8
    dbc2:	91 83       	std	Z+1, r25	; 0x01
    dbc4:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    dbc6:	81 e8       	ldi	r24, 0x81	; 129
    dbc8:	f6 01       	movw	r30, r12
    dbca:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    dbcc:	88 ec       	ldi	r24, 0xC8	; 200
    dbce:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    dbd0:	82 e0       	ldi	r24, 0x02	; 2
    dbd2:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    dbd4:	83 e0       	ldi	r24, 0x03	; 3
    dbd6:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    dbd8:	24 e0       	ldi	r18, 0x04	; 4
    dbda:	12 9f       	mul	r17, r18
    dbdc:	f0 01       	movw	r30, r0
    dbde:	11 24       	eor	r1, r1
    dbe0:	ec 51       	subi	r30, 0x1C	; 28
    dbe2:	f0 4f       	sbci	r31, 0xF0	; 240
    dbe4:	43 81       	ldd	r20, Z+3	; 0x03
    dbe6:	c6 01       	movw	r24, r12
    dbe8:	84 5a       	subi	r24, 0xA4	; 164
    dbea:	9f 4f       	sbci	r25, 0xFF	; 255
    dbec:	49 83       	std	Y+1, r20	; 0x01
    dbee:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    dbf2:	49 81       	ldd	r20, Y+1	; 0x01
    dbf4:	16 c0       	rjmp	.+44     	; 0xdc22 <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_LEFT)
    dbf6:	86 ff       	sbrs	r24, 6
    dbf8:	09 c0       	rjmp	.+18     	; 0xdc0c <update_player+0x434>
		{
			player->direction = D_LEFT;
    dbfa:	f6 01       	movw	r30, r12
    dbfc:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    dbfe:	c6 01       	movw	r24, r12
    dc00:	8c 59       	subi	r24, 0x9C	; 156
    dc02:	9f 4f       	sbci	r25, 0xFF	; 255
    dc04:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    dc08:	41 e0       	ldi	r20, 0x01	; 1
    dc0a:	0b c0       	rjmp	.+22     	; 0xdc22 <update_player+0x44a>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    dc0c:	87 ff       	sbrs	r24, 7
    dc0e:	0d c0       	rjmp	.+26     	; 0xdc2a <update_player+0x452>
		{
			player->direction = D_RIGHT;
    dc10:	81 e0       	ldi	r24, 0x01	; 1
    dc12:	f6 01       	movw	r30, r12
    dc14:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    dc16:	c6 01       	movw	r24, r12
    dc18:	8c 59       	subi	r24, 0x9C	; 156
    dc1a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc1c:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    dc20:	40 e0       	ldi	r20, 0x00	; 0
    dc22:	bc 01       	movw	r22, r24
    dc24:	81 2f       	mov	r24, r17
    dc26:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		}
	}
	return 1;
}
    dc2a:	81 e0       	ldi	r24, 0x01	; 1
    dc2c:	0f 90       	pop	r0
    dc2e:	df 91       	pop	r29
    dc30:	cf 91       	pop	r28
    dc32:	1f 91       	pop	r17
    dc34:	0f 91       	pop	r16
    dc36:	ff 90       	pop	r15
    dc38:	ef 90       	pop	r14
    dc3a:	df 90       	pop	r13
    dc3c:	cf 90       	pop	r12
    dc3e:	08 95       	ret

0000dc40 <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    dc40:	cf 92       	push	r12
    dc42:	df 92       	push	r13
    dc44:	ef 92       	push	r14
    dc46:	ff 92       	push	r15
    dc48:	0f 93       	push	r16
    dc4a:	cf 93       	push	r28
    dc4c:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    dc4e:	e0 90 d9 0d 	lds	r14, 0x0DD9
    dc52:	f0 90 da 0d 	lds	r15, 0x0DDA
    dc56:	c0 90 b6 0d 	lds	r12, 0x0DB6
    dc5a:	d0 90 b7 0d 	lds	r13, 0x0DB7
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dc5e:	80 91 d0 0d 	lds	r24, 0x0DD0
    dc62:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    dc64:	8c 33       	cpi	r24, 0x3C	; 60
    dc66:	19 f0       	breq	.+6      	; 0xdc6e <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    dc68:	80 93 d0 0d 	sts	0x0DD0, r24
    dc6c:	0f c0       	rjmp	.+30     	; 0xdc8c <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    dc6e:	10 92 d0 0d 	sts	0x0DD0, r1
		if (game.time != 65535) game.time++;
    dc72:	80 91 bc 0d 	lds	r24, 0x0DBC
    dc76:	90 91 bd 0d 	lds	r25, 0x0DBD
    dc7a:	8f 3f       	cpi	r24, 0xFF	; 255
    dc7c:	2f ef       	ldi	r18, 0xFF	; 255
    dc7e:	92 07       	cpc	r25, r18
    dc80:	29 f0       	breq	.+10     	; 0xdc8c <update_level+0x4c>
    dc82:	01 96       	adiw	r24, 0x01	; 1
    dc84:	90 93 bd 0d 	sts	0x0DBD, r25
    dc88:	80 93 bc 0d 	sts	0x0DBC, r24
	}
	
	if (is_space())
    dc8c:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    dc90:	88 23       	and	r24, r24
    dc92:	a1 f1       	breq	.+104    	; 0xdcfc <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    dc94:	c6 01       	movw	r24, r12
    dc96:	23 e0       	ldi	r18, 0x03	; 3
    dc98:	96 95       	lsr	r25
    dc9a:	87 95       	ror	r24
    dc9c:	2a 95       	dec	r18
    dc9e:	e1 f7       	brne	.-8      	; 0xdc98 <update_level+0x58>
    dca0:	4c 96       	adiw	r24, 0x1c	; 28
    dca2:	20 91 c5 0d 	lds	r18, 0x0DC5
    dca6:	30 e0       	ldi	r19, 0x00	; 0
    dca8:	82 17       	cp	r24, r18
    dcaa:	93 07       	cpc	r25, r19
    dcac:	70 f4       	brcc	.+28     	; 0xdcca <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    dcae:	20 91 cb 0d 	lds	r18, 0x0DCB
    dcb2:	29 30       	cpi	r18, 0x09	; 9
    dcb4:	39 f4       	brne	.+14     	; 0xdcc4 <update_level+0x84>
    dcb6:	82 3d       	cpi	r24, 0xD2	; 210
    dcb8:	91 05       	cpc	r25, r1
    dcba:	20 f0       	brcs	.+8      	; 0xdcc4 <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    dcbc:	80 91 d0 0d 	lds	r24, 0x0DD0
    dcc0:	80 fd       	sbrc	r24, 0
    dcc2:	34 c0       	rjmp	.+104    	; 0xdd2c <update_level+0xec>
    dcc4:	0e 94 d8 59 	call	0xb3b0	; 0xb3b0 <move_camera_x>
    dcc8:	31 c0       	rjmp	.+98     	; 0xdd2c <update_level+0xec>
    dcca:	80 91 e1 0d 	lds	r24, 0x0DE1
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    dcce:	a7 01       	movw	r20, r14
    dcd0:	48 5e       	subi	r20, 0xE8	; 232
    dcd2:	5f 4f       	sbci	r21, 0xFF	; 255
    dcd4:	96 01       	movw	r18, r12
    dcd6:	20 52       	subi	r18, 0x20	; 32
    dcd8:	3f 4f       	sbci	r19, 0xFF	; 255
    dcda:	42 17       	cp	r20, r18
    dcdc:	53 07       	cpc	r21, r19
    dcde:	50 f0       	brcs	.+20     	; 0xdcf4 <update_level+0xb4>
    dce0:	90 91 cb 0d 	lds	r25, 0x0DCB
    dce4:	99 30       	cpi	r25, 0x09	; 9
    dce6:	31 f0       	breq	.+12     	; 0xdcf4 <update_level+0xb4>
		{
			game.level_ended = 1;
    dce8:	91 e0       	ldi	r25, 0x01	; 1
    dcea:	90 93 d3 0d 	sts	0x0DD3, r25
			game.player.flags ^= END_OF_SPACE;
    dcee:	90 e2       	ldi	r25, 0x20	; 32
    dcf0:	89 27       	eor	r24, r25
    dcf2:	01 c0       	rjmp	.+2      	; 0xdcf6 <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    dcf4:	80 62       	ori	r24, 0x20	; 32
    dcf6:	80 93 e1 0d 	sts	0x0DE1, r24
    dcfa:	18 c0       	rjmp	.+48     	; 0xdd2c <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    dcfc:	80 91 de 0d 	lds	r24, 0x0DDE
    dd00:	18 16       	cp	r1, r24
    dd02:	a4 f4       	brge	.+40     	; 0xdd2c <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dd04:	c7 01       	movw	r24, r14
    dd06:	8c 19       	sub	r24, r12
    dd08:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    dd0a:	80 37       	cpi	r24, 0x70	; 112
    dd0c:	91 05       	cpc	r25, r1
    dd0e:	70 f0       	brcs	.+28     	; 0xdd2c <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    dd10:	96 01       	movw	r18, r12
    dd12:	83 e0       	ldi	r24, 0x03	; 3
    dd14:	36 95       	lsr	r19
    dd16:	27 95       	ror	r18
    dd18:	8a 95       	dec	r24
    dd1a:	e1 f7       	brne	.-8      	; 0xdd14 <update_level+0xd4>
    dd1c:	24 5e       	subi	r18, 0xE4	; 228
    dd1e:	3f 4f       	sbci	r19, 0xFF	; 255
    dd20:	80 91 c5 0d 	lds	r24, 0x0DC5
    dd24:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    dd26:	28 17       	cp	r18, r24
    dd28:	39 07       	cpc	r19, r25
    dd2a:	60 f2       	brcs	.-104    	; 0xdcc4 <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    dd2c:	21 e0       	ldi	r18, 0x01	; 1
    dd2e:	40 91 e8 0d 	lds	r20, 0x0DE8
    dd32:	6d e1       	ldi	r22, 0x1D	; 29
    dd34:	89 e0       	ldi	r24, 0x09	; 9
    dd36:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    dd3a:	40 91 bc 0d 	lds	r20, 0x0DBC
    dd3e:	50 91 bd 0d 	lds	r21, 0x0DBD
    dd42:	21 e0       	ldi	r18, 0x01	; 1
    dd44:	6d e1       	ldi	r22, 0x1D	; 29
    dd46:	8b e1       	ldi	r24, 0x1B	; 27
    dd48:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    dd4c:	21 e0       	ldi	r18, 0x01	; 1
    dd4e:	40 91 c9 0d 	lds	r20, 0x0DC9
    dd52:	6e e1       	ldi	r22, 0x1E	; 30
    dd54:	89 e0       	ldi	r24, 0x09	; 9
    dd56:	0e 94 78 4d 	call	0x9af0	; 0x9af0 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    dd5a:	40 91 ba 0d 	lds	r20, 0x0DBA
    dd5e:	50 91 bb 0d 	lds	r21, 0x0DBB
    dd62:	21 e0       	ldi	r18, 0x01	; 1
    dd64:	6e e1       	ldi	r22, 0x1E	; 30
    dd66:	8b e1       	ldi	r24, 0x1B	; 27
    dd68:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    dd6c:	40 91 b8 0d 	lds	r20, 0x0DB8
    dd70:	50 91 b9 0d 	lds	r21, 0x0DB9
    dd74:	21 e0       	ldi	r18, 0x01	; 1
    dd76:	6f e1       	ldi	r22, 0x1F	; 31
    dd78:	8b e1       	ldi	r24, 0x1B	; 27
    dd7a:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    dd7e:	80 91 d3 0d 	lds	r24, 0x0DD3
    dd82:	88 23       	and	r24, r24
    dd84:	09 f4       	brne	.+2      	; 0xdd88 <update_level+0x148>
    dd86:	8c c0       	rjmp	.+280    	; 0xdea0 <update_level+0x260>
    dd88:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    dd8c:	81 11       	cpse	r24, r1
    dd8e:	6c c0       	rjmp	.+216    	; 0xde68 <update_level+0x228>
    dd90:	80 91 e1 0d 	lds	r24, 0x0DE1
    dd94:	8e 70       	andi	r24, 0x0E	; 14
    dd96:	09 f4       	brne	.+2      	; 0xdd9a <update_level+0x15a>
    dd98:	83 c0       	rjmp	.+262    	; 0xdea0 <update_level+0x260>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    dd9a:	40 e0       	ldi	r20, 0x00	; 0
    dd9c:	66 ee       	ldi	r22, 0xE6	; 230
    dd9e:	70 e3       	ldi	r23, 0x30	; 48
    dda0:	80 e0       	ldi	r24, 0x00	; 0
    dda2:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
		if (game.player.flags & PRONE) {
    dda6:	80 91 e1 0d 	lds	r24, 0x0DE1
    ddaa:	82 ff       	sbrs	r24, 2
    ddac:	1a c0       	rjmp	.+52     	; 0xdde2 <update_level+0x1a2>
			game.player.shared.y -= 16;
    ddae:	40 91 db 0d 	lds	r20, 0x0DDB
    ddb2:	50 91 dc 0d 	lds	r21, 0x0DDC
    ddb6:	40 51       	subi	r20, 0x10	; 16
    ddb8:	51 09       	sbc	r21, r1
    ddba:	50 93 dc 0d 	sts	0x0DDC, r21
    ddbe:	40 93 db 0d 	sts	0x0DDB, r20
			game.player.width = 2;
    ddc2:	82 e0       	ldi	r24, 0x02	; 2
    ddc4:	80 93 e4 0d 	sts	0x0DE4, r24
			game.player.height = 3;
    ddc8:	83 e0       	ldi	r24, 0x03	; 3
    ddca:	80 93 e5 0d 	sts	0x0DE5, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    ddce:	60 91 d9 0d 	lds	r22, 0x0DD9
    ddd2:	80 91 b6 0d 	lds	r24, 0x0DB6
    ddd6:	68 1b       	sub	r22, r24
    ddd8:	03 e0       	ldi	r16, 0x03	; 3
    ddda:	22 e0       	ldi	r18, 0x02	; 2
    dddc:	80 e0       	ldi	r24, 0x00	; 0
    ddde:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    dde2:	6b e0       	ldi	r22, 0x0B	; 11
    dde4:	89 e0       	ldi	r24, 0x09	; 9
    dde6:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
		LBRotateSprites();
    ddea:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
		map_ship();
    ddee:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    ddf2:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    ddf4:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    ddf6:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    ddf8:	81 e0       	ldi	r24, 0x01	; 1
    ddfa:	90 e0       	ldi	r25, 0x00	; 0
    ddfc:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    de00:	8c 2f       	mov	r24, r28
    de02:	90 e0       	ldi	r25, 0x00	; 0
    de04:	88 3a       	cpi	r24, 0xA8	; 168
    de06:	91 05       	cpc	r25, r1
    de08:	3c f0       	brlt	.+14     	; 0xde18 <update_level+0x1d8>
			{
				clear_sprites(0, 6);
    de0a:	66 e0       	ldi	r22, 0x06	; 6
    de0c:	80 e0       	ldi	r24, 0x00	; 0
    de0e:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
				LBRotateSprites();
    de12:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
				ship_increment = -3;
    de16:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    de18:	8d e2       	ldi	r24, 0x2D	; 45
    de1a:	9e e0       	ldi	r25, 0x0E	; 14
    de1c:	0e 94 c6 4c 	call	0x998c	; 0x998c <LBGetNextFrame>
    de20:	40 e0       	ldi	r20, 0x00	; 0
    de22:	bc 01       	movw	r22, r24
    de24:	86 e0       	ldi	r24, 0x06	; 6
    de26:	0e 94 31 4e 	call	0x9c62	; 0x9c62 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    de2a:	02 e0       	ldi	r16, 0x02	; 2
    de2c:	24 e0       	ldi	r18, 0x04	; 4
    de2e:	4c 2f       	mov	r20, r28
    de30:	6e 2d       	mov	r22, r14
    de32:	86 e0       	ldi	r24, 0x06	; 6
    de34:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <LBMoveSprite>
			ship_y += ship_increment;
    de38:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    de3a:	99 f4       	brne	.+38     	; 0xde62 <update_level+0x222>
			{
				clear_sprites(6, 8);
    de3c:	68 e0       	ldi	r22, 0x08	; 8
    de3e:	86 e0       	ldi	r24, 0x06	; 6
    de40:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <clear_sprites>
				LBRotateSprites();
    de44:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    de48:	64 e6       	ldi	r22, 0x64	; 100
    de4a:	70 e0       	ldi	r23, 0x00	; 0
    de4c:	85 ec       	ldi	r24, 0xC5	; 197
    de4e:	93 e0       	ldi	r25, 0x03	; 3
    de50:	0e 94 6d 6a 	call	0xd4da	; 0xd4da <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    de54:	80 91 cb 0d 	lds	r24, 0x0DCB
    de58:	00 e0       	ldi	r16, 0x00	; 0
    de5a:	23 e0       	ldi	r18, 0x03	; 3
    de5c:	4a e1       	ldi	r20, 0x1A	; 26
    de5e:	6f ef       	ldi	r22, 0xFF	; 255
    de60:	1c c0       	rjmp	.+56     	; 0xde9a <update_level+0x25a>
				break;
			}
			LBRotateSprites();
    de62:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
		}
    de66:	c8 cf       	rjmp	.-112    	; 0xddf8 <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    de68:	80 91 cb 0d 	lds	r24, 0x0DCB
    de6c:	89 30       	cpi	r24, 0x09	; 9
    de6e:	49 f4       	brne	.+18     	; 0xde82 <update_level+0x242>
			tally_score((char*) strLevelClear, 500);
    de70:	64 ef       	ldi	r22, 0xF4	; 244
    de72:	71 e0       	ldi	r23, 0x01	; 1
    de74:	85 ec       	ldi	r24, 0xC5	; 197
    de76:	93 e0       	ldi	r25, 0x03	; 3
    de78:	0e 94 6d 6a 	call	0xd4da	; 0xd4da <tally_score>
			congratulations();
    de7c:	0e 94 03 65 	call	0xca06	; 0xca06 <congratulations>
    de80:	2e c0       	rjmp	.+92     	; 0xdede <update_level+0x29e>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    de82:	64 e6       	ldi	r22, 0x64	; 100
    de84:	70 e0       	ldi	r23, 0x00	; 0
    de86:	85 ec       	ldi	r24, 0xC5	; 197
    de88:	93 e0       	ldi	r25, 0x03	; 3
    de8a:	0e 94 6d 6a 	call	0xd4da	; 0xd4da <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    de8e:	80 91 cb 0d 	lds	r24, 0x0DCB
    de92:	07 ec       	ldi	r16, 0xC7	; 199
    de94:	2d ef       	ldi	r18, 0xFD	; 253
    de96:	4c e1       	ldi	r20, 0x1C	; 28
    de98:	61 e0       	ldi	r22, 0x01	; 1
    de9a:	8f 5f       	subi	r24, 0xFF	; 255
    de9c:	0e 94 f6 66 	call	0xcdec	; 0xcdec <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    dea0:	80 91 cf 0d 	lds	r24, 0x0DCF
    dea4:	82 30       	cpi	r24, 0x02	; 2
    dea6:	11 f0       	breq	.+4      	; 0xdeac <update_level+0x26c>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    dea8:	80 e0       	ldi	r24, 0x00	; 0
    deaa:	1c c0       	rjmp	.+56     	; 0xdee4 <update_level+0x2a4>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    deac:	80 91 f7 0c 	lds	r24, 0x0CF7
    deb0:	90 91 f8 0c 	lds	r25, 0x0CF8
    deb4:	01 96       	adiw	r24, 0x01	; 1
    deb6:	90 93 f8 0c 	sts	0x0CF8, r25
    deba:	80 93 f7 0c 	sts	0x0CF7, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    debe:	80 e0       	ldi	r24, 0x00	; 0
    dec0:	0e 94 29 3e 	call	0x7c52	; 0x7c52 <ReadJoypad>
    dec4:	89 2b       	or	r24, r25
    dec6:	39 f4       	brne	.+14     	; 0xded6 <update_level+0x296>
    dec8:	80 91 f7 0c 	lds	r24, 0x0CF7
    decc:	90 91 f8 0c 	lds	r25, 0x0CF8
    ded0:	84 38       	cpi	r24, 0x84	; 132
    ded2:	93 40       	sbci	r25, 0x03	; 3
    ded4:	48 f3       	brcs	.-46     	; 0xdea8 <update_level+0x268>
		{
			demo_counter = 0;
    ded6:	10 92 f8 0c 	sts	0x0CF8, r1
    deda:	10 92 f7 0c 	sts	0x0CF7, r1
			exit_game();
    dede:	0e 94 09 69 	call	0xd212	; 0xd212 <exit_game>
			return 1;
    dee2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    dee4:	df 91       	pop	r29
    dee6:	cf 91       	pop	r28
    dee8:	0f 91       	pop	r16
    deea:	ff 90       	pop	r15
    deec:	ef 90       	pop	r14
    deee:	df 90       	pop	r13
    def0:	cf 90       	pop	r12
    def2:	08 95       	ret

0000def4 <update_pause>:
	}
	game.high_score_counter++;
}

void update_pause()
{
    def4:	ef 92       	push	r14
    def6:	ff 92       	push	r15
    def8:	0f 93       	push	r16
    defa:	1f 93       	push	r17
    defc:	cf 93       	push	r28
    defe:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    df00:	c0 91 b5 0c 	lds	r28, 0x0CB5
	u8 y = Screen.scrollY / 8;
    df04:	00 91 b6 0c 	lds	r16, 0x0CB6
	
	if (game.player.controls.pressed & BTN_START)
    df08:	80 91 4d 0e 	lds	r24, 0x0E4D
    df0c:	83 ff       	sbrs	r24, 3
    df0e:	63 c0       	rjmp	.+198    	; 0xdfd6 <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    df10:	06 95       	lsr	r16
    df12:	06 95       	lsr	r16
    df14:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    df16:	10 e0       	ldi	r17, 0x00	; 0
	game.high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    df18:	c6 95       	lsr	r28
    df1a:	c6 95       	lsr	r28
    df1c:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    df1e:	d0 e0       	ldi	r29, 0x00	; 0
    df20:	c8 01       	movw	r24, r16
    df22:	06 96       	adiw	r24, 0x06	; 6
    df24:	2e e1       	ldi	r18, 0x1E	; 30
    df26:	e2 2e       	mov	r14, r18
    df28:	f1 2c       	mov	r15, r1
    df2a:	b7 01       	movw	r22, r14
    df2c:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    df30:	9e 01       	movw	r18, r28
    df32:	28 5f       	subi	r18, 0xF8	; 248
    df34:	3f 4f       	sbci	r19, 0xFF	; 255
    df36:	49 e9       	ldi	r20, 0x99	; 153
    df38:	59 e5       	ldi	r21, 0x59	; 89
    df3a:	68 2f       	mov	r22, r24
    df3c:	82 2f       	mov	r24, r18
    df3e:	8f 71       	andi	r24, 0x1F	; 31
    df40:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    df44:	c8 01       	movw	r24, r16
    df46:	09 96       	adiw	r24, 0x09	; 9
    df48:	b7 01       	movw	r22, r14
    df4a:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    df4e:	9e 01       	movw	r18, r28
    df50:	23 5f       	subi	r18, 0xF3	; 243
    df52:	3f 4f       	sbci	r19, 0xFF	; 255
    df54:	41 ed       	ldi	r20, 0xD1	; 209
    df56:	53 e0       	ldi	r21, 0x03	; 3
    df58:	68 2f       	mov	r22, r24
    df5a:	82 2f       	mov	r24, r18
    df5c:	8f 71       	andi	r24, 0x1F	; 31
    df5e:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    df62:	c8 01       	movw	r24, r16
    df64:	0c 96       	adiw	r24, 0x0c	; 12
    df66:	b7 01       	movw	r22, r14
    df68:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    df6c:	2a 96       	adiw	r28, 0x0a	; 10
    df6e:	47 ed       	ldi	r20, 0xD7	; 215
    df70:	53 e0       	ldi	r21, 0x03	; 3
    df72:	68 2f       	mov	r22, r24
    df74:	8c 2f       	mov	r24, r28
    df76:	8f 71       	andi	r24, 0x1F	; 31
    df78:	0e 94 5c 4d 	call	0x9ab8	; 0x9ab8 <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    df7c:	64 e1       	ldi	r22, 0x14	; 20
    df7e:	80 e0       	ldi	r24, 0x00	; 0
    df80:	0e 94 29 66 	call	0xcc52	; 0xcc52 <hide_sprites>
		LBRotateSprites();
    df84:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    df88:	81 e0       	ldi	r24, 0x01	; 1
    df8a:	90 e0       	ldi	r25, 0x00	; 0
    df8c:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    df90:	60 e0       	ldi	r22, 0x00	; 0
    df92:	8d e4       	ldi	r24, 0x4D	; 77
    df94:	9e e0       	ldi	r25, 0x0E	; 14
    df96:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    df9a:	80 91 4d 0e 	lds	r24, 0x0E4D
    df9e:	90 91 4e 0e 	lds	r25, 0x0E4E
    dfa2:	83 ff       	sbrs	r24, 3
    dfa4:	08 c0       	rjmp	.+16     	; 0xdfb6 <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    dfa6:	df 91       	pop	r29
    dfa8:	cf 91       	pop	r28
    dfaa:	1f 91       	pop	r17
    dfac:	0f 91       	pop	r16
    dfae:	ff 90       	pop	r15
    dfb0:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    dfb2:	0c 94 06 58 	jmp	0xb00c	; 0xb00c <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    dfb6:	91 ff       	sbrs	r25, 1
    dfb8:	e7 cf       	rjmp	.-50     	; 0xdf88 <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    dfba:	60 e0       	ldi	r22, 0x00	; 0
    dfbc:	70 e0       	ldi	r23, 0x00	; 0
    dfbe:	85 eb       	ldi	r24, 0xB5	; 181
    dfc0:	93 e0       	ldi	r25, 0x03	; 3
    dfc2:	0e 94 6d 6a 	call	0xd4da	; 0xd4da <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    dfc6:	df 91       	pop	r29
    dfc8:	cf 91       	pop	r28
    dfca:	1f 91       	pop	r17
    dfcc:	0f 91       	pop	r16
    dfce:	ff 90       	pop	r15
    dfd0:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    dfd2:	0c 94 09 69 	jmp	0xd212	; 0xd212 <exit_game>
				break;
			}
		}
	}
}
    dfd6:	df 91       	pop	r29
    dfd8:	cf 91       	pop	r28
    dfda:	1f 91       	pop	r17
    dfdc:	0f 91       	pop	r16
    dfde:	ff 90       	pop	r15
    dfe0:	ef 90       	pop	r14
    dfe2:	08 95       	ret

0000dfe4 <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    dfe4:	cf 92       	push	r12
    dfe6:	df 92       	push	r13
    dfe8:	ff 92       	push	r15
    dfea:	0f 93       	push	r16
    dfec:	1f 93       	push	r17
    dfee:	cf 93       	push	r28
    dff0:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    dff2:	20 91 cb 0d 	lds	r18, 0x0DCB
    dff6:	f2 2e       	mov	r15, r18
    dff8:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    dffa:	e2 eb       	ldi	r30, 0xB2	; 178
    dffc:	fc e0       	ldi	r31, 0x0C	; 12
    dffe:	84 81       	ldd	r24, Z+4	; 0x04
    e000:	86 95       	lsr	r24
    e002:	86 95       	lsr	r24
    e004:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e006:	08 2f       	mov	r16, r24
    e008:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e00a:	c3 81       	ldd	r28, Z+3	; 0x03
    e00c:	c6 95       	lsr	r28
    e00e:	c6 95       	lsr	r28
    e010:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e012:	d0 e0       	ldi	r29, 0x00	; 0
    e014:	c8 01       	movw	r24, r16
    e016:	06 96       	adiw	r24, 0x06	; 6
    e018:	2e e1       	ldi	r18, 0x1E	; 30
    e01a:	c2 2e       	mov	r12, r18
    e01c:	d1 2c       	mov	r13, r1
    e01e:	b6 01       	movw	r22, r12
    e020:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    e024:	9e 01       	movw	r18, r28
    e026:	29 5f       	subi	r18, 0xF9	; 249
    e028:	3f 4f       	sbci	r19, 0xFF	; 255
    e02a:	47 e3       	ldi	r20, 0x37	; 55
    e02c:	59 e5       	ldi	r21, 0x59	; 89
    e02e:	68 2f       	mov	r22, r24
    e030:	82 2f       	mov	r24, r18
    e032:	8f 71       	andi	r24, 0x1F	; 31
    e034:	0e 94 e8 4b 	call	0x97d0	; 0x97d0 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e038:	c8 01       	movw	r24, r16
    e03a:	09 96       	adiw	r24, 0x09	; 9
    e03c:	b6 01       	movw	r22, r12
    e03e:	0e 94 dd 71 	call	0xe3ba	; 0xe3ba <__divmodhi4>
    e042:	be 01       	movw	r22, r28
    e044:	68 5f       	subi	r22, 0xF8	; 248
    e046:	7f 4f       	sbci	r23, 0xFF	; 255
    e048:	6f 71       	andi	r22, 0x1F	; 31
    e04a:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e04c:	93 e2       	ldi	r25, 0x23	; 35
    e04e:	f9 9e       	mul	r15, r25
    e050:	90 01       	movw	r18, r0
    e052:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e054:	48 2f       	mov	r20, r24
    e056:	c9 01       	movw	r24, r18
    e058:	8e 5e       	subi	r24, 0xEE	; 238
    e05a:	9e 4f       	sbci	r25, 0xFE	; 254
    e05c:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <stream_text_anywhere>
	LBWaitSeconds(3);
    e060:	83 e0       	ldi	r24, 0x03	; 3
    e062:	0e 94 22 4e 	call	0x9c44	; 0x9c44 <LBWaitSeconds>
	game.boss.active = 1;
    e066:	81 e0       	ldi	r24, 0x01	; 1
    e068:	80 93 61 0e 	sts	0x0E61, r24
	render_camera_view();
}
    e06c:	df 91       	pop	r29
    e06e:	cf 91       	pop	r28
    e070:	1f 91       	pop	r17
    e072:	0f 91       	pop	r16
    e074:	ff 90       	pop	r15
    e076:	df 90       	pop	r13
    e078:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e07a:	0c 94 06 58 	jmp	0xb00c	; 0xb00c <render_camera_view>

0000e07e <update_player_ai>:
}

void update_player_ai(Player* player) 
{	 
    e07e:	cf 93       	push	r28
    e080:	df 93       	push	r29
    e082:	fc 01       	movw	r30, r24
	if (player->ai_flags == AI_NOT_READY)
    e084:	81 85       	ldd	r24, Z+9	; 0x09
    e086:	81 11       	cpse	r24, r1
    e088:	0e c0       	rjmp	.+28     	; 0xe0a6 <update_player_ai+0x28>
	 {
		 player->controls.held = BTN_LEFT;
    e08a:	df 01       	movw	r26, r30
    e08c:	a8 58       	subi	r26, 0x88	; 136
    e08e:	bf 4f       	sbci	r27, 0xFF	; 255
    e090:	80 e4       	ldi	r24, 0x40	; 64
    e092:	90 e0       	ldi	r25, 0x00	; 0
    e094:	8d 93       	st	X+, r24
    e096:	9c 93       	st	X, r25
		 player->ai_flags = AI_READY;
    e098:	81 e0       	ldi	r24, 0x01	; 1
    e09a:	81 87       	std	Z+9, r24	; 0x09
		 game.ai_prone_counter = 0;
    e09c:	10 92 d6 0d 	sts	0x0DD6, r1
		 game.ai_do_prone = 1;
    e0a0:	80 93 d7 0d 	sts	0x0DD7, r24
    e0a4:	b9 c0       	rjmp	.+370    	; 0xe218 <update_player_ai+0x19a>
	 }
	 else if (player->ai_flags & AI_READY)
    e0a6:	80 ff       	sbrs	r24, 0
    e0a8:	2e c0       	rjmp	.+92     	; 0xe106 <update_player_ai+0x88>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e0aa:	df 01       	movw	r26, r30
    e0ac:	ac 58       	subi	r26, 0x8C	; 140
    e0ae:	bf 4f       	sbci	r27, 0xFF	; 255
    e0b0:	15 96       	adiw	r26, 0x05	; 5
    e0b2:	1c 92       	st	X, r1
    e0b4:	1e 92       	st	-X, r1
    e0b6:	14 97       	sbiw	r26, 0x04	; 4
	p->pressed = 0;
    e0b8:	11 96       	adiw	r26, 0x01	; 1
    e0ba:	1c 92       	st	X, r1
    e0bc:	1e 92       	st	-X, r1
	p->released = 0;
    e0be:	13 96       	adiw	r26, 0x03	; 3
    e0c0:	1c 92       	st	X, r1
    e0c2:	1e 92       	st	-X, r1
    e0c4:	12 97       	sbiw	r26, 0x02	; 2
	p->held_cycles = 0;
    e0c6:	16 96       	adiw	r26, 0x06	; 6
    e0c8:	1c 92       	st	X, r1
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e0ca:	80 91 b6 0d 	lds	r24, 0x0DB6
    e0ce:	90 91 b7 0d 	lds	r25, 0x0DB7
    e0d2:	23 e0       	ldi	r18, 0x03	; 3
    e0d4:	96 95       	lsr	r25
    e0d6:	87 95       	ror	r24
    e0d8:	2a 95       	dec	r18
    e0da:	e1 f7       	brne	.-8      	; 0xe0d4 <update_player_ai+0x56>
    e0dc:	4c 96       	adiw	r24, 0x1c	; 28
    e0de:	20 91 c5 0d 	lds	r18, 0x0DC5
    e0e2:	30 e0       	ldi	r19, 0x00	; 0
    e0e4:	82 17       	cp	r24, r18
    e0e6:	93 07       	cpc	r25, r19
    e0e8:	08 f4       	brcc	.+2      	; 0xe0ec <update_player_ai+0x6e>
    e0ea:	96 c0       	rjmp	.+300    	; 0xe218 <update_player_ai+0x19a>
    e0ec:	ef 01       	movw	r28, r30
		 {
			 challenge();
    e0ee:	0e 94 f2 6f 	call	0xdfe4	; 0xdfe4 <challenge>
			 player->ai_flags = AI_WALKING;
    e0f2:	82 e0       	ldi	r24, 0x02	; 2
    e0f4:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e0f6:	fe 01       	movw	r30, r28
    e0f8:	e8 58       	subi	r30, 0x88	; 136
    e0fa:	ff 4f       	sbci	r31, 0xFF	; 255
    e0fc:	80 e4       	ldi	r24, 0x40	; 64
    e0fe:	90 e0       	ldi	r25, 0x00	; 0
    e100:	91 83       	std	Z+1, r25	; 0x01
    e102:	80 83       	st	Z, r24
    e104:	89 c0       	rjmp	.+274    	; 0xe218 <update_player_ai+0x19a>
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e106:	81 ff       	sbrs	r24, 1
    e108:	87 c0       	rjmp	.+270    	; 0xe218 <update_player_ai+0x19a>
	 {
		 player->controls.pressed = 0;
    e10a:	df 01       	movw	r26, r30
    e10c:	ac 58       	subi	r26, 0x8C	; 140
    e10e:	bf 4f       	sbci	r27, 0xFF	; 255
    e110:	11 96       	adiw	r26, 0x01	; 1
    e112:	1c 92       	st	X, r1
    e114:	1e 92       	st	-X, r1
		 if (game.frame_counter % 15 == 0)
    e116:	80 91 d0 0d 	lds	r24, 0x0DD0
    e11a:	6f e0       	ldi	r22, 0x0F	; 15
    e11c:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    e120:	91 11       	cpse	r25, r1
    e122:	05 c0       	rjmp	.+10     	; 0xe12e <update_player_ai+0xb0>
		 {
			 player->controls.pressed = BTN_B;
    e124:	81 e0       	ldi	r24, 0x01	; 1
    e126:	90 e0       	ldi	r25, 0x00	; 0
    e128:	11 96       	adiw	r26, 0x01	; 1
    e12a:	9c 93       	st	X, r25
    e12c:	8e 93       	st	-X, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    e12e:	20 81       	ld	r18, Z
    e130:	31 81       	ldd	r19, Z+1	; 0x01
    e132:	80 91 b6 0d 	lds	r24, 0x0DB6
    e136:	90 91 b7 0d 	lds	r25, 0x0DB7
    e13a:	ac 01       	movw	r20, r24
    e13c:	48 5b       	subi	r20, 0xB8	; 184
    e13e:	5f 4f       	sbci	r21, 0xFF	; 255
    e140:	24 17       	cp	r18, r20
    e142:	35 07       	cpc	r19, r21
    e144:	78 f0       	brcs	.+30     	; 0xe164 <update_player_ai+0xe6>
    e146:	40 5b       	subi	r20, 0xB0	; 176
    e148:	5f 4f       	sbci	r21, 0xFF	; 255
    e14a:	42 17       	cp	r20, r18
    e14c:	53 07       	cpc	r21, r19
    e14e:	50 f0       	brcs	.+20     	; 0xe164 <update_player_ai+0xe6>
		 {
			 player->controls.pressed |= BTN_A;
    e150:	2d 91       	ld	r18, X+
    e152:	3c 91       	ld	r19, X
    e154:	11 97       	sbiw	r26, 0x01	; 1
    e156:	31 60       	ori	r19, 0x01	; 1
    e158:	11 96       	adiw	r26, 0x01	; 1
    e15a:	3c 93       	st	X, r19
    e15c:	2e 93       	st	-X, r18
			 game.ai_do_prone = 1;
    e15e:	21 e0       	ldi	r18, 0x01	; 1
    e160:	20 93 d7 0d 	sts	0x0DD7, r18
		 }
		 if (player->shared.x <= game.camera_x)
    e164:	20 81       	ld	r18, Z
    e166:	31 81       	ldd	r19, Z+1	; 0x01
    e168:	e8 58       	subi	r30, 0x88	; 136
    e16a:	ff 4f       	sbci	r31, 0xFF	; 255
    e16c:	82 17       	cp	r24, r18
    e16e:	93 07       	cpc	r25, r19
    e170:	18 f0       	brcs	.+6      	; 0xe178 <update_player_ai+0xfa>
		 {
			 player->controls.held = BTN_RIGHT;
    e172:	40 e8       	ldi	r20, 0x80	; 128
    e174:	50 e0       	ldi	r21, 0x00	; 0
    e176:	08 c0       	rjmp	.+16     	; 0xe188 <update_player_ai+0x10a>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    e178:	ac 01       	movw	r20, r24
    e17a:	40 53       	subi	r20, 0x30	; 48
    e17c:	5f 4f       	sbci	r21, 0xFF	; 255
    e17e:	24 17       	cp	r18, r20
    e180:	35 07       	cpc	r19, r21
    e182:	20 f0       	brcs	.+8      	; 0xe18c <update_player_ai+0x10e>
		 {
			 player->controls.held = BTN_LEFT;
    e184:	40 e4       	ldi	r20, 0x40	; 64
    e186:	50 e0       	ldi	r21, 0x00	; 0
    e188:	51 83       	std	Z+1, r21	; 0x01
    e18a:	40 83       	st	Z, r20
		 }
		 if (player->controls.held == BTN_RIGHT && player->shared.x >= game.camera_x+3*8 && player->shared.x <=  game.camera_x+4*8 && game.ai_do_prone)
    e18c:	40 81       	ld	r20, Z
    e18e:	51 81       	ldd	r21, Z+1	; 0x01
    e190:	40 38       	cpi	r20, 0x80	; 128
    e192:	51 05       	cpc	r21, r1
    e194:	89 f4       	brne	.+34     	; 0xe1b8 <update_player_ai+0x13a>
    e196:	ac 01       	movw	r20, r24
    e198:	48 5e       	subi	r20, 0xE8	; 232
    e19a:	5f 4f       	sbci	r21, 0xFF	; 255
    e19c:	24 17       	cp	r18, r20
    e19e:	35 07       	cpc	r19, r21
    e1a0:	08 f1       	brcs	.+66     	; 0xe1e4 <update_player_ai+0x166>
    e1a2:	80 96       	adiw	r24, 0x20	; 32
    e1a4:	82 17       	cp	r24, r18
    e1a6:	93 07       	cpc	r25, r19
    e1a8:	e8 f0       	brcs	.+58     	; 0xe1e4 <update_player_ai+0x166>
    e1aa:	80 91 d7 0d 	lds	r24, 0x0DD7
    e1ae:	88 23       	and	r24, r24
    e1b0:	c9 f0       	breq	.+50     	; 0xe1e4 <update_player_ai+0x166>
		 {
			 player->controls.held |= BTN_DOWN;
    e1b2:	80 ea       	ldi	r24, 0xA0	; 160
    e1b4:	90 e0       	ldi	r25, 0x00	; 0
    e1b6:	14 c0       	rjmp	.+40     	; 0xe1e0 <update_player_ai+0x162>
		 }
		 else if (player->controls.held == BTN_LEFT && player->shared.x >= game.camera_x+(CAMERA_WIDTH*8)-6*8 && player->shared.x <=  game.camera_x+(CAMERA_WIDTH*8)-5*8 && game.ai_do_prone)
    e1b8:	40 34       	cpi	r20, 0x40	; 64
    e1ba:	51 05       	cpc	r21, r1
    e1bc:	99 f4       	brne	.+38     	; 0xe1e4 <update_player_ai+0x166>
    e1be:	ac 01       	movw	r20, r24
    e1c0:	40 55       	subi	r20, 0x50	; 80
    e1c2:	5f 4f       	sbci	r21, 0xFF	; 255
    e1c4:	24 17       	cp	r18, r20
    e1c6:	35 07       	cpc	r19, r21
    e1c8:	68 f0       	brcs	.+26     	; 0xe1e4 <update_player_ai+0x166>
    e1ca:	88 54       	subi	r24, 0x48	; 72
    e1cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e1ce:	82 17       	cp	r24, r18
    e1d0:	93 07       	cpc	r25, r19
    e1d2:	40 f0       	brcs	.+16     	; 0xe1e4 <update_player_ai+0x166>
    e1d4:	80 91 d7 0d 	lds	r24, 0x0DD7
    e1d8:	88 23       	and	r24, r24
    e1da:	21 f0       	breq	.+8      	; 0xe1e4 <update_player_ai+0x166>
		 {
			player->controls.held |= BTN_DOWN; 
    e1dc:	80 e6       	ldi	r24, 0x60	; 96
    e1de:	90 e0       	ldi	r25, 0x00	; 0
    e1e0:	91 83       	std	Z+1, r25	; 0x01
    e1e2:	80 83       	st	Z, r24
		 }
		 if (player->controls.held & BTN_DOWN)
    e1e4:	80 81       	ld	r24, Z
    e1e6:	91 81       	ldd	r25, Z+1	; 0x01
    e1e8:	85 ff       	sbrs	r24, 5
    e1ea:	16 c0       	rjmp	.+44     	; 0xe218 <update_player_ai+0x19a>
		 {
			 game.ai_prone_counter++;
    e1ec:	20 91 d6 0d 	lds	r18, 0x0DD6
    e1f0:	2f 5f       	subi	r18, 0xFF	; 255
			 if (game.ai_prone_counter >= 60)
    e1f2:	2c 33       	cpi	r18, 0x3C	; 60
    e1f4:	18 f4       	brcc	.+6      	; 0xe1fc <update_player_ai+0x17e>
		 {
			player->controls.held |= BTN_DOWN; 
		 }
		 if (player->controls.held & BTN_DOWN)
		 {
			 game.ai_prone_counter++;
    e1f6:	20 93 d6 0d 	sts	0x0DD6, r18
    e1fa:	0e c0       	rjmp	.+28     	; 0xe218 <update_player_ai+0x19a>
			 if (game.ai_prone_counter >= 60)
			 {
				game.ai_prone_counter = 0;
    e1fc:	10 92 d6 0d 	sts	0x0DD6, r1
				player->controls.held ^= BTN_DOWN;
    e200:	20 e2       	ldi	r18, 0x20	; 32
    e202:	82 27       	eor	r24, r18
    e204:	91 83       	std	Z+1, r25	; 0x01
    e206:	80 83       	st	Z, r24
				player->controls.pressed |= BTN_UP;
    e208:	8d 91       	ld	r24, X+
    e20a:	9c 91       	ld	r25, X
    e20c:	11 97       	sbiw	r26, 0x01	; 1
    e20e:	80 61       	ori	r24, 0x10	; 16
    e210:	8d 93       	st	X+, r24
    e212:	9c 93       	st	X, r25
				game.ai_do_prone = 0;
    e214:	10 92 d7 0d 	sts	0x0DD7, r1
			 }
		 }
	 }
}
    e218:	df 91       	pop	r29
    e21a:	cf 91       	pop	r28
    e21c:	08 95       	ret

0000e21e <load_credits>:
}
#endif

void load_credits()
{
	fade_through();
    e21e:	0e 94 f3 64 	call	0xc9e6	; 0xc9e6 <fade_through>
	Screen.scrollX = 0;
    e222:	e2 eb       	ldi	r30, 0xB2	; 178
    e224:	fc e0       	ldi	r31, 0x0C	; 12
    e226:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    e228:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    e22a:	80 e2       	ldi	r24, 0x20	; 32
    e22c:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    e22e:	10 82       	st	Z, r1
	stream_text_middle((const char*) strCredits, 5, 100);
    e230:	44 e6       	ldi	r20, 0x64	; 100
    e232:	50 e0       	ldi	r21, 0x00	; 0
    e234:	65 e0       	ldi	r22, 0x05	; 5
    e236:	8f e1       	ldi	r24, 0x1F	; 31
    e238:	93 e0       	ldi	r25, 0x03	; 3
    e23a:	0e 94 45 64 	call	0xc88a	; 0xc88a <stream_text_middle>
	LBWaitSeconds(8);
    e23e:	88 e0       	ldi	r24, 0x08	; 8
    e240:	0c 94 22 4e 	jmp	0x9c44	; 0x9c44 <LBWaitSeconds>

0000e244 <main>:
}

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    e244:	0e 94 83 3e 	call	0x7d06	; 0x7d06 <GetTrueRandomSeed>
    e248:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e24c:	85 ea       	ldi	r24, 0xA5	; 165
    e24e:	95 e1       	ldi	r25, 0x15	; 21
    e250:	0e 94 d2 40 	call	0x81a4	; 0x81a4 <InitMusicPlayer>
	ClearVram();
    e254:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <ClearVram>
	SetMasterVolume(0x05);
    e258:	85 e0       	ldi	r24, 0x05	; 5
    e25a:	0e 94 8a 44 	call	0x8914	; 0x8914 <SetMasterVolume>
	SetTileTable(tiles_data);
    e25e:	85 e1       	ldi	r24, 0x15	; 21
    e260:	91 e3       	ldi	r25, 0x31	; 49
    e262:	0e 94 1a 3e 	call	0x7c34	; 0x7c34 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e266:	84 e2       	ldi	r24, 0x24	; 36
    e268:	97 e1       	ldi	r25, 0x17	; 23
    e26a:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    e26e:	85 ed       	ldi	r24, 0xD5	; 213
    e270:	98 e5       	ldi	r25, 0x58	; 88
    e272:	90 93 89 0d 	sts	0x0D89, r25
    e276:	80 93 88 0d 	sts	0x0D88, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    e27a:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_credits();
    e27e:	0e 94 0f 71 	call	0xe21e	; 0xe21e <load_credits>
	load_splash();
    e282:	0e 94 c4 67 	call	0xcf88	; 0xcf88 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    e286:	81 e0       	ldi	r24, 0x01	; 1
    e288:	90 e0       	ldi	r25, 0x00	; 0
    e28a:	0e 94 35 4c 	call	0x986a	; 0x986a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    e28e:	60 e0       	ldi	r22, 0x00	; 0
    e290:	8d e4       	ldi	r24, 0x4D	; 77
    e292:	9e e0       	ldi	r25, 0x0E	; 14
    e294:	0e 94 ec 4c 	call	0x99d8	; 0x99d8 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    e298:	80 91 ca 0d 	lds	r24, 0x0DCA
    e29c:	82 30       	cpi	r24, 0x02	; 2
    e29e:	09 f0       	breq	.+2      	; 0xe2a2 <main+0x5e>
    e2a0:	52 c0       	rjmp	.+164    	; 0xe346 <main+0x102>
		{
			if (update_level()) continue;
    e2a2:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <update_level>
    e2a6:	81 11       	cpse	r24, r1
    e2a8:	ee cf       	rjmp	.-36     	; 0xe286 <main+0x42>
			if (update_player(&game.player, PLAYER_SLOT))
    e2aa:	60 e0       	ldi	r22, 0x00	; 0
    e2ac:	89 ed       	ldi	r24, 0xD9	; 217
    e2ae:	9d e0       	ldi	r25, 0x0D	; 13
    e2b0:	0e 94 ec 6b 	call	0xd7d8	; 0xd7d8 <update_player>
    e2b4:	88 23       	and	r24, r24
    e2b6:	e9 f0       	breq	.+58     	; 0xe2f2 <main+0xae>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    e2b8:	66 e0       	ldi	r22, 0x06	; 6
    e2ba:	89 ed       	ldi	r24, 0xD9	; 217
    e2bc:	9d e0       	ldi	r25, 0x0D	; 13
    e2be:	0e 94 a0 5a 	call	0xb540	; 0xb540 <update_shot>
				update_enemies();
    e2c2:	0e 94 3b 61 	call	0xc276	; 0xc276 <update_enemies>
				update_enemy_shots();
    e2c6:	0e 94 a8 61 	call	0xc350	; 0xc350 <update_enemy_shots>
				animate_enemies();
    e2ca:	0e 94 55 62 	call	0xc4aa	; 0xc4aa <animate_enemies>
				animate_enemy_shots();
    e2ce:	0e 94 72 63 	call	0xc6e4	; 0xc6e4 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    e2d2:	40 e0       	ldi	r20, 0x00	; 0
    e2d4:	64 e5       	ldi	r22, 0x54	; 84
    e2d6:	7e e0       	ldi	r23, 0x0E	; 14
    e2d8:	89 ed       	ldi	r24, 0xD9	; 217
    e2da:	9d e0       	ldi	r25, 0x0D	; 13
    e2dc:	0e 94 37 60 	call	0xc06e	; 0xc06e <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    e2e0:	46 e0       	ldi	r20, 0x06	; 6
    e2e2:	64 e5       	ldi	r22, 0x54	; 84
    e2e4:	7e e0       	ldi	r23, 0x0E	; 14
    e2e6:	89 ed       	ldi	r24, 0xD9	; 217
    e2e8:	9d e0       	ldi	r25, 0x0D	; 13
    e2ea:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <animate_shot>
				update_pause();
    e2ee:	0e 94 7a 6f 	call	0xdef4	; 0xdef4 <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    e2f2:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <is_space>
    e2f6:	81 11       	cpse	r24, r1
    e2f8:	2f c0       	rjmp	.+94     	; 0xe358 <main+0x114>
    e2fa:	80 91 b6 0d 	lds	r24, 0x0DB6
    e2fe:	90 91 b7 0d 	lds	r25, 0x0DB7
    e302:	88 3f       	cpi	r24, 0xF8	; 248
    e304:	96 40       	sbci	r25, 0x06	; 6
    e306:	40 f1       	brcs	.+80     	; 0xe358 <main+0x114>
    e308:	69 e0       	ldi	r22, 0x09	; 9
    e30a:	84 e5       	ldi	r24, 0x54	; 84
    e30c:	9e e0       	ldi	r25, 0x0E	; 14
    e30e:	0e 94 ec 6b 	call	0xd7d8	; 0xd7d8 <update_player>
    e312:	88 23       	and	r24, r24
    e314:	09 f1       	breq	.+66     	; 0xe358 <main+0x114>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    e316:	6f e0       	ldi	r22, 0x0F	; 15
    e318:	84 e5       	ldi	r24, 0x54	; 84
    e31a:	9e e0       	ldi	r25, 0x0E	; 14
    e31c:	0e 94 a0 5a 	call	0xb540	; 0xb540 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    e320:	49 e0       	ldi	r20, 0x09	; 9
    e322:	69 ed       	ldi	r22, 0xD9	; 217
    e324:	7d e0       	ldi	r23, 0x0D	; 13
    e326:	84 e5       	ldi	r24, 0x54	; 84
    e328:	9e e0       	ldi	r25, 0x0E	; 14
    e32a:	0e 94 37 60 	call	0xc06e	; 0xc06e <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    e32e:	4f e0       	ldi	r20, 0x0F	; 15
    e330:	69 ed       	ldi	r22, 0xD9	; 217
    e332:	7d e0       	ldi	r23, 0x0D	; 13
    e334:	84 e5       	ldi	r24, 0x54	; 84
    e336:	9e e0       	ldi	r25, 0x0E	; 14
    e338:	0e 94 14 5e 	call	0xbc28	; 0xbc28 <animate_shot>
				update_player_ai(&game.boss);
    e33c:	84 e5       	ldi	r24, 0x54	; 84
    e33e:	9e e0       	ldi	r25, 0x0E	; 14
    e340:	0e 94 3f 70 	call	0xe07e	; 0xe07e <update_player_ai>
    e344:	09 c0       	rjmp	.+18     	; 0xe358 <main+0x114>
			}
		}
		else if (game.current_screen == SPLASH)
    e346:	81 11       	cpse	r24, r1
    e348:	03 c0       	rjmp	.+6      	; 0xe350 <main+0x10c>
		{
			update_splash();
    e34a:	0e 94 19 69 	call	0xd232	; 0xd232 <update_splash>
    e34e:	04 c0       	rjmp	.+8      	; 0xe358 <main+0x114>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    e350:	81 30       	cpi	r24, 0x01	; 1
    e352:	11 f4       	brne	.+4      	; 0xe358 <main+0x114>
		{
			update_high_scores();
    e354:	0e 94 95 69 	call	0xd32a	; 0xd32a <update_high_scores>
			
		}
		LBRotateSprites();
    e358:	0e 94 c1 4e 	call	0x9d82	; 0x9d82 <LBRotateSprites>
    e35c:	94 cf       	rjmp	.-216    	; 0xe286 <main+0x42>

0000e35e <__udivmodqi4>:
    e35e:	99 1b       	sub	r25, r25
    e360:	79 e0       	ldi	r23, 0x09	; 9
    e362:	04 c0       	rjmp	.+8      	; 0xe36c <__udivmodqi4_ep>

0000e364 <__udivmodqi4_loop>:
    e364:	99 1f       	adc	r25, r25
    e366:	96 17       	cp	r25, r22
    e368:	08 f0       	brcs	.+2      	; 0xe36c <__udivmodqi4_ep>
    e36a:	96 1b       	sub	r25, r22

0000e36c <__udivmodqi4_ep>:
    e36c:	88 1f       	adc	r24, r24
    e36e:	7a 95       	dec	r23
    e370:	c9 f7       	brne	.-14     	; 0xe364 <__udivmodqi4_loop>
    e372:	80 95       	com	r24
    e374:	08 95       	ret

0000e376 <__divmodqi4>:
    e376:	87 fb       	bst	r24, 7
    e378:	08 2e       	mov	r0, r24
    e37a:	06 26       	eor	r0, r22
    e37c:	87 fd       	sbrc	r24, 7
    e37e:	81 95       	neg	r24
    e380:	67 fd       	sbrc	r22, 7
    e382:	61 95       	neg	r22
    e384:	0e 94 af 71 	call	0xe35e	; 0xe35e <__udivmodqi4>
    e388:	0e f4       	brtc	.+2      	; 0xe38c <__divmodqi4_1>
    e38a:	91 95       	neg	r25

0000e38c <__divmodqi4_1>:
    e38c:	07 fc       	sbrc	r0, 7
    e38e:	81 95       	neg	r24

0000e390 <__divmodqi4_exit>:
    e390:	08 95       	ret

0000e392 <__udivmodhi4>:
    e392:	aa 1b       	sub	r26, r26
    e394:	bb 1b       	sub	r27, r27
    e396:	51 e1       	ldi	r21, 0x11	; 17
    e398:	07 c0       	rjmp	.+14     	; 0xe3a8 <__udivmodhi4_ep>

0000e39a <__udivmodhi4_loop>:
    e39a:	aa 1f       	adc	r26, r26
    e39c:	bb 1f       	adc	r27, r27
    e39e:	a6 17       	cp	r26, r22
    e3a0:	b7 07       	cpc	r27, r23
    e3a2:	10 f0       	brcs	.+4      	; 0xe3a8 <__udivmodhi4_ep>
    e3a4:	a6 1b       	sub	r26, r22
    e3a6:	b7 0b       	sbc	r27, r23

0000e3a8 <__udivmodhi4_ep>:
    e3a8:	88 1f       	adc	r24, r24
    e3aa:	99 1f       	adc	r25, r25
    e3ac:	5a 95       	dec	r21
    e3ae:	a9 f7       	brne	.-22     	; 0xe39a <__udivmodhi4_loop>
    e3b0:	80 95       	com	r24
    e3b2:	90 95       	com	r25
    e3b4:	bc 01       	movw	r22, r24
    e3b6:	cd 01       	movw	r24, r26
    e3b8:	08 95       	ret

0000e3ba <__divmodhi4>:
    e3ba:	97 fb       	bst	r25, 7
    e3bc:	07 2e       	mov	r0, r23
    e3be:	16 f4       	brtc	.+4      	; 0xe3c4 <__divmodhi4+0xa>
    e3c0:	00 94       	com	r0
    e3c2:	07 d0       	rcall	.+14     	; 0xe3d2 <__divmodhi4_neg1>
    e3c4:	77 fd       	sbrc	r23, 7
    e3c6:	09 d0       	rcall	.+18     	; 0xe3da <__divmodhi4_neg2>
    e3c8:	0e 94 c9 71 	call	0xe392	; 0xe392 <__udivmodhi4>
    e3cc:	07 fc       	sbrc	r0, 7
    e3ce:	05 d0       	rcall	.+10     	; 0xe3da <__divmodhi4_neg2>
    e3d0:	3e f4       	brtc	.+14     	; 0xe3e0 <__divmodhi4_exit>

0000e3d2 <__divmodhi4_neg1>:
    e3d2:	90 95       	com	r25
    e3d4:	81 95       	neg	r24
    e3d6:	9f 4f       	sbci	r25, 0xFF	; 255
    e3d8:	08 95       	ret

0000e3da <__divmodhi4_neg2>:
    e3da:	70 95       	com	r23
    e3dc:	61 95       	neg	r22
    e3de:	7f 4f       	sbci	r23, 0xFF	; 255

0000e3e0 <__divmodhi4_exit>:
    e3e0:	08 95       	ret

0000e3e2 <__tablejump2__>:
    e3e2:	ee 0f       	add	r30, r30
    e3e4:	ff 1f       	adc	r31, r31
    e3e6:	05 90       	lpm	r0, Z+
    e3e8:	f4 91       	lpm	r31, Z
    e3ea:	e0 2d       	mov	r30, r0
    e3ec:	09 94       	ijmp

0000e3ee <__subsf3>:
    e3ee:	50 58       	subi	r21, 0x80	; 128

0000e3f0 <__addsf3>:
    e3f0:	bb 27       	eor	r27, r27
    e3f2:	aa 27       	eor	r26, r26
    e3f4:	0e d0       	rcall	.+28     	; 0xe412 <__addsf3x>
    e3f6:	e5 c0       	rjmp	.+458    	; 0xe5c2 <__fp_round>
    e3f8:	d6 d0       	rcall	.+428    	; 0xe5a6 <__fp_pscA>
    e3fa:	30 f0       	brcs	.+12     	; 0xe408 <__addsf3+0x18>
    e3fc:	db d0       	rcall	.+438    	; 0xe5b4 <__fp_pscB>
    e3fe:	20 f0       	brcs	.+8      	; 0xe408 <__addsf3+0x18>
    e400:	31 f4       	brne	.+12     	; 0xe40e <__addsf3+0x1e>
    e402:	9f 3f       	cpi	r25, 0xFF	; 255
    e404:	11 f4       	brne	.+4      	; 0xe40a <__addsf3+0x1a>
    e406:	1e f4       	brtc	.+6      	; 0xe40e <__addsf3+0x1e>
    e408:	cb c0       	rjmp	.+406    	; 0xe5a0 <__fp_nan>
    e40a:	0e f4       	brtc	.+2      	; 0xe40e <__addsf3+0x1e>
    e40c:	e0 95       	com	r30
    e40e:	e7 fb       	bst	r30, 7
    e410:	c1 c0       	rjmp	.+386    	; 0xe594 <__fp_inf>

0000e412 <__addsf3x>:
    e412:	e9 2f       	mov	r30, r25
    e414:	e7 d0       	rcall	.+462    	; 0xe5e4 <__fp_split3>
    e416:	80 f3       	brcs	.-32     	; 0xe3f8 <__addsf3+0x8>
    e418:	ba 17       	cp	r27, r26
    e41a:	62 07       	cpc	r22, r18
    e41c:	73 07       	cpc	r23, r19
    e41e:	84 07       	cpc	r24, r20
    e420:	95 07       	cpc	r25, r21
    e422:	18 f0       	brcs	.+6      	; 0xe42a <__addsf3x+0x18>
    e424:	71 f4       	brne	.+28     	; 0xe442 <__addsf3x+0x30>
    e426:	9e f5       	brtc	.+102    	; 0xe48e <__addsf3x+0x7c>
    e428:	ff c0       	rjmp	.+510    	; 0xe628 <__fp_zero>
    e42a:	0e f4       	brtc	.+2      	; 0xe42e <__addsf3x+0x1c>
    e42c:	e0 95       	com	r30
    e42e:	0b 2e       	mov	r0, r27
    e430:	ba 2f       	mov	r27, r26
    e432:	a0 2d       	mov	r26, r0
    e434:	0b 01       	movw	r0, r22
    e436:	b9 01       	movw	r22, r18
    e438:	90 01       	movw	r18, r0
    e43a:	0c 01       	movw	r0, r24
    e43c:	ca 01       	movw	r24, r20
    e43e:	a0 01       	movw	r20, r0
    e440:	11 24       	eor	r1, r1
    e442:	ff 27       	eor	r31, r31
    e444:	59 1b       	sub	r21, r25
    e446:	99 f0       	breq	.+38     	; 0xe46e <__addsf3x+0x5c>
    e448:	59 3f       	cpi	r21, 0xF9	; 249
    e44a:	50 f4       	brcc	.+20     	; 0xe460 <__addsf3x+0x4e>
    e44c:	50 3e       	cpi	r21, 0xE0	; 224
    e44e:	68 f1       	brcs	.+90     	; 0xe4aa <__addsf3x+0x98>
    e450:	1a 16       	cp	r1, r26
    e452:	f0 40       	sbci	r31, 0x00	; 0
    e454:	a2 2f       	mov	r26, r18
    e456:	23 2f       	mov	r18, r19
    e458:	34 2f       	mov	r19, r20
    e45a:	44 27       	eor	r20, r20
    e45c:	58 5f       	subi	r21, 0xF8	; 248
    e45e:	f3 cf       	rjmp	.-26     	; 0xe446 <__addsf3x+0x34>
    e460:	46 95       	lsr	r20
    e462:	37 95       	ror	r19
    e464:	27 95       	ror	r18
    e466:	a7 95       	ror	r26
    e468:	f0 40       	sbci	r31, 0x00	; 0
    e46a:	53 95       	inc	r21
    e46c:	c9 f7       	brne	.-14     	; 0xe460 <__addsf3x+0x4e>
    e46e:	7e f4       	brtc	.+30     	; 0xe48e <__addsf3x+0x7c>
    e470:	1f 16       	cp	r1, r31
    e472:	ba 0b       	sbc	r27, r26
    e474:	62 0b       	sbc	r22, r18
    e476:	73 0b       	sbc	r23, r19
    e478:	84 0b       	sbc	r24, r20
    e47a:	ba f0       	brmi	.+46     	; 0xe4aa <__addsf3x+0x98>
    e47c:	91 50       	subi	r25, 0x01	; 1
    e47e:	a1 f0       	breq	.+40     	; 0xe4a8 <__addsf3x+0x96>
    e480:	ff 0f       	add	r31, r31
    e482:	bb 1f       	adc	r27, r27
    e484:	66 1f       	adc	r22, r22
    e486:	77 1f       	adc	r23, r23
    e488:	88 1f       	adc	r24, r24
    e48a:	c2 f7       	brpl	.-16     	; 0xe47c <__addsf3x+0x6a>
    e48c:	0e c0       	rjmp	.+28     	; 0xe4aa <__addsf3x+0x98>
    e48e:	ba 0f       	add	r27, r26
    e490:	62 1f       	adc	r22, r18
    e492:	73 1f       	adc	r23, r19
    e494:	84 1f       	adc	r24, r20
    e496:	48 f4       	brcc	.+18     	; 0xe4aa <__addsf3x+0x98>
    e498:	87 95       	ror	r24
    e49a:	77 95       	ror	r23
    e49c:	67 95       	ror	r22
    e49e:	b7 95       	ror	r27
    e4a0:	f7 95       	ror	r31
    e4a2:	9e 3f       	cpi	r25, 0xFE	; 254
    e4a4:	08 f0       	brcs	.+2      	; 0xe4a8 <__addsf3x+0x96>
    e4a6:	b3 cf       	rjmp	.-154    	; 0xe40e <__addsf3+0x1e>
    e4a8:	93 95       	inc	r25
    e4aa:	88 0f       	add	r24, r24
    e4ac:	08 f0       	brcs	.+2      	; 0xe4b0 <__addsf3x+0x9e>
    e4ae:	99 27       	eor	r25, r25
    e4b0:	ee 0f       	add	r30, r30
    e4b2:	97 95       	ror	r25
    e4b4:	87 95       	ror	r24
    e4b6:	08 95       	ret

0000e4b8 <__fixsfsi>:
    e4b8:	04 d0       	rcall	.+8      	; 0xe4c2 <__fixunssfsi>
    e4ba:	68 94       	set
    e4bc:	b1 11       	cpse	r27, r1
    e4be:	b5 c0       	rjmp	.+362    	; 0xe62a <__fp_szero>
    e4c0:	08 95       	ret

0000e4c2 <__fixunssfsi>:
    e4c2:	98 d0       	rcall	.+304    	; 0xe5f4 <__fp_splitA>
    e4c4:	88 f0       	brcs	.+34     	; 0xe4e8 <__fixunssfsi+0x26>
    e4c6:	9f 57       	subi	r25, 0x7F	; 127
    e4c8:	90 f0       	brcs	.+36     	; 0xe4ee <__fixunssfsi+0x2c>
    e4ca:	b9 2f       	mov	r27, r25
    e4cc:	99 27       	eor	r25, r25
    e4ce:	b7 51       	subi	r27, 0x17	; 23
    e4d0:	a0 f0       	brcs	.+40     	; 0xe4fa <__fixunssfsi+0x38>
    e4d2:	d1 f0       	breq	.+52     	; 0xe508 <__fixunssfsi+0x46>
    e4d4:	66 0f       	add	r22, r22
    e4d6:	77 1f       	adc	r23, r23
    e4d8:	88 1f       	adc	r24, r24
    e4da:	99 1f       	adc	r25, r25
    e4dc:	1a f0       	brmi	.+6      	; 0xe4e4 <__fixunssfsi+0x22>
    e4de:	ba 95       	dec	r27
    e4e0:	c9 f7       	brne	.-14     	; 0xe4d4 <__fixunssfsi+0x12>
    e4e2:	12 c0       	rjmp	.+36     	; 0xe508 <__fixunssfsi+0x46>
    e4e4:	b1 30       	cpi	r27, 0x01	; 1
    e4e6:	81 f0       	breq	.+32     	; 0xe508 <__fixunssfsi+0x46>
    e4e8:	9f d0       	rcall	.+318    	; 0xe628 <__fp_zero>
    e4ea:	b1 e0       	ldi	r27, 0x01	; 1
    e4ec:	08 95       	ret
    e4ee:	9c c0       	rjmp	.+312    	; 0xe628 <__fp_zero>
    e4f0:	67 2f       	mov	r22, r23
    e4f2:	78 2f       	mov	r23, r24
    e4f4:	88 27       	eor	r24, r24
    e4f6:	b8 5f       	subi	r27, 0xF8	; 248
    e4f8:	39 f0       	breq	.+14     	; 0xe508 <__fixunssfsi+0x46>
    e4fa:	b9 3f       	cpi	r27, 0xF9	; 249
    e4fc:	cc f3       	brlt	.-14     	; 0xe4f0 <__fixunssfsi+0x2e>
    e4fe:	86 95       	lsr	r24
    e500:	77 95       	ror	r23
    e502:	67 95       	ror	r22
    e504:	b3 95       	inc	r27
    e506:	d9 f7       	brne	.-10     	; 0xe4fe <__fixunssfsi+0x3c>
    e508:	3e f4       	brtc	.+14     	; 0xe518 <__fixunssfsi+0x56>
    e50a:	90 95       	com	r25
    e50c:	80 95       	com	r24
    e50e:	70 95       	com	r23
    e510:	61 95       	neg	r22
    e512:	7f 4f       	sbci	r23, 0xFF	; 255
    e514:	8f 4f       	sbci	r24, 0xFF	; 255
    e516:	9f 4f       	sbci	r25, 0xFF	; 255
    e518:	08 95       	ret

0000e51a <__floatunsisf>:
    e51a:	e8 94       	clt
    e51c:	09 c0       	rjmp	.+18     	; 0xe530 <__floatsisf+0x12>

0000e51e <__floatsisf>:
    e51e:	97 fb       	bst	r25, 7
    e520:	3e f4       	brtc	.+14     	; 0xe530 <__floatsisf+0x12>
    e522:	90 95       	com	r25
    e524:	80 95       	com	r24
    e526:	70 95       	com	r23
    e528:	61 95       	neg	r22
    e52a:	7f 4f       	sbci	r23, 0xFF	; 255
    e52c:	8f 4f       	sbci	r24, 0xFF	; 255
    e52e:	9f 4f       	sbci	r25, 0xFF	; 255
    e530:	99 23       	and	r25, r25
    e532:	a9 f0       	breq	.+42     	; 0xe55e <__floatsisf+0x40>
    e534:	f9 2f       	mov	r31, r25
    e536:	96 e9       	ldi	r25, 0x96	; 150
    e538:	bb 27       	eor	r27, r27
    e53a:	93 95       	inc	r25
    e53c:	f6 95       	lsr	r31
    e53e:	87 95       	ror	r24
    e540:	77 95       	ror	r23
    e542:	67 95       	ror	r22
    e544:	b7 95       	ror	r27
    e546:	f1 11       	cpse	r31, r1
    e548:	f8 cf       	rjmp	.-16     	; 0xe53a <__floatsisf+0x1c>
    e54a:	fa f4       	brpl	.+62     	; 0xe58a <__floatsisf+0x6c>
    e54c:	bb 0f       	add	r27, r27
    e54e:	11 f4       	brne	.+4      	; 0xe554 <__floatsisf+0x36>
    e550:	60 ff       	sbrs	r22, 0
    e552:	1b c0       	rjmp	.+54     	; 0xe58a <__floatsisf+0x6c>
    e554:	6f 5f       	subi	r22, 0xFF	; 255
    e556:	7f 4f       	sbci	r23, 0xFF	; 255
    e558:	8f 4f       	sbci	r24, 0xFF	; 255
    e55a:	9f 4f       	sbci	r25, 0xFF	; 255
    e55c:	16 c0       	rjmp	.+44     	; 0xe58a <__floatsisf+0x6c>
    e55e:	88 23       	and	r24, r24
    e560:	11 f0       	breq	.+4      	; 0xe566 <__floatsisf+0x48>
    e562:	96 e9       	ldi	r25, 0x96	; 150
    e564:	11 c0       	rjmp	.+34     	; 0xe588 <__floatsisf+0x6a>
    e566:	77 23       	and	r23, r23
    e568:	21 f0       	breq	.+8      	; 0xe572 <__floatsisf+0x54>
    e56a:	9e e8       	ldi	r25, 0x8E	; 142
    e56c:	87 2f       	mov	r24, r23
    e56e:	76 2f       	mov	r23, r22
    e570:	05 c0       	rjmp	.+10     	; 0xe57c <__floatsisf+0x5e>
    e572:	66 23       	and	r22, r22
    e574:	71 f0       	breq	.+28     	; 0xe592 <__floatsisf+0x74>
    e576:	96 e8       	ldi	r25, 0x86	; 134
    e578:	86 2f       	mov	r24, r22
    e57a:	70 e0       	ldi	r23, 0x00	; 0
    e57c:	60 e0       	ldi	r22, 0x00	; 0
    e57e:	2a f0       	brmi	.+10     	; 0xe58a <__floatsisf+0x6c>
    e580:	9a 95       	dec	r25
    e582:	66 0f       	add	r22, r22
    e584:	77 1f       	adc	r23, r23
    e586:	88 1f       	adc	r24, r24
    e588:	da f7       	brpl	.-10     	; 0xe580 <__floatsisf+0x62>
    e58a:	88 0f       	add	r24, r24
    e58c:	96 95       	lsr	r25
    e58e:	87 95       	ror	r24
    e590:	97 f9       	bld	r25, 7
    e592:	08 95       	ret

0000e594 <__fp_inf>:
    e594:	97 f9       	bld	r25, 7
    e596:	9f 67       	ori	r25, 0x7F	; 127
    e598:	80 e8       	ldi	r24, 0x80	; 128
    e59a:	70 e0       	ldi	r23, 0x00	; 0
    e59c:	60 e0       	ldi	r22, 0x00	; 0
    e59e:	08 95       	ret

0000e5a0 <__fp_nan>:
    e5a0:	9f ef       	ldi	r25, 0xFF	; 255
    e5a2:	80 ec       	ldi	r24, 0xC0	; 192
    e5a4:	08 95       	ret

0000e5a6 <__fp_pscA>:
    e5a6:	00 24       	eor	r0, r0
    e5a8:	0a 94       	dec	r0
    e5aa:	16 16       	cp	r1, r22
    e5ac:	17 06       	cpc	r1, r23
    e5ae:	18 06       	cpc	r1, r24
    e5b0:	09 06       	cpc	r0, r25
    e5b2:	08 95       	ret

0000e5b4 <__fp_pscB>:
    e5b4:	00 24       	eor	r0, r0
    e5b6:	0a 94       	dec	r0
    e5b8:	12 16       	cp	r1, r18
    e5ba:	13 06       	cpc	r1, r19
    e5bc:	14 06       	cpc	r1, r20
    e5be:	05 06       	cpc	r0, r21
    e5c0:	08 95       	ret

0000e5c2 <__fp_round>:
    e5c2:	09 2e       	mov	r0, r25
    e5c4:	03 94       	inc	r0
    e5c6:	00 0c       	add	r0, r0
    e5c8:	11 f4       	brne	.+4      	; 0xe5ce <__fp_round+0xc>
    e5ca:	88 23       	and	r24, r24
    e5cc:	52 f0       	brmi	.+20     	; 0xe5e2 <__fp_round+0x20>
    e5ce:	bb 0f       	add	r27, r27
    e5d0:	40 f4       	brcc	.+16     	; 0xe5e2 <__fp_round+0x20>
    e5d2:	bf 2b       	or	r27, r31
    e5d4:	11 f4       	brne	.+4      	; 0xe5da <__fp_round+0x18>
    e5d6:	60 ff       	sbrs	r22, 0
    e5d8:	04 c0       	rjmp	.+8      	; 0xe5e2 <__fp_round+0x20>
    e5da:	6f 5f       	subi	r22, 0xFF	; 255
    e5dc:	7f 4f       	sbci	r23, 0xFF	; 255
    e5de:	8f 4f       	sbci	r24, 0xFF	; 255
    e5e0:	9f 4f       	sbci	r25, 0xFF	; 255
    e5e2:	08 95       	ret

0000e5e4 <__fp_split3>:
    e5e4:	57 fd       	sbrc	r21, 7
    e5e6:	90 58       	subi	r25, 0x80	; 128
    e5e8:	44 0f       	add	r20, r20
    e5ea:	55 1f       	adc	r21, r21
    e5ec:	59 f0       	breq	.+22     	; 0xe604 <__fp_splitA+0x10>
    e5ee:	5f 3f       	cpi	r21, 0xFF	; 255
    e5f0:	71 f0       	breq	.+28     	; 0xe60e <__fp_splitA+0x1a>
    e5f2:	47 95       	ror	r20

0000e5f4 <__fp_splitA>:
    e5f4:	88 0f       	add	r24, r24
    e5f6:	97 fb       	bst	r25, 7
    e5f8:	99 1f       	adc	r25, r25
    e5fa:	61 f0       	breq	.+24     	; 0xe614 <__fp_splitA+0x20>
    e5fc:	9f 3f       	cpi	r25, 0xFF	; 255
    e5fe:	79 f0       	breq	.+30     	; 0xe61e <__fp_splitA+0x2a>
    e600:	87 95       	ror	r24
    e602:	08 95       	ret
    e604:	12 16       	cp	r1, r18
    e606:	13 06       	cpc	r1, r19
    e608:	14 06       	cpc	r1, r20
    e60a:	55 1f       	adc	r21, r21
    e60c:	f2 cf       	rjmp	.-28     	; 0xe5f2 <__fp_split3+0xe>
    e60e:	46 95       	lsr	r20
    e610:	f1 df       	rcall	.-30     	; 0xe5f4 <__fp_splitA>
    e612:	08 c0       	rjmp	.+16     	; 0xe624 <__fp_splitA+0x30>
    e614:	16 16       	cp	r1, r22
    e616:	17 06       	cpc	r1, r23
    e618:	18 06       	cpc	r1, r24
    e61a:	99 1f       	adc	r25, r25
    e61c:	f1 cf       	rjmp	.-30     	; 0xe600 <__fp_splitA+0xc>
    e61e:	86 95       	lsr	r24
    e620:	71 05       	cpc	r23, r1
    e622:	61 05       	cpc	r22, r1
    e624:	08 94       	sec
    e626:	08 95       	ret

0000e628 <__fp_zero>:
    e628:	e8 94       	clt

0000e62a <__fp_szero>:
    e62a:	bb 27       	eor	r27, r27
    e62c:	66 27       	eor	r22, r22
    e62e:	77 27       	eor	r23, r23
    e630:	cb 01       	movw	r24, r22
    e632:	97 f9       	bld	r25, 7
    e634:	08 95       	ret

0000e636 <__mulsf3>:
    e636:	0b d0       	rcall	.+22     	; 0xe64e <__mulsf3x>
    e638:	c4 cf       	rjmp	.-120    	; 0xe5c2 <__fp_round>
    e63a:	b5 df       	rcall	.-150    	; 0xe5a6 <__fp_pscA>
    e63c:	28 f0       	brcs	.+10     	; 0xe648 <__mulsf3+0x12>
    e63e:	ba df       	rcall	.-140    	; 0xe5b4 <__fp_pscB>
    e640:	18 f0       	brcs	.+6      	; 0xe648 <__mulsf3+0x12>
    e642:	95 23       	and	r25, r21
    e644:	09 f0       	breq	.+2      	; 0xe648 <__mulsf3+0x12>
    e646:	a6 cf       	rjmp	.-180    	; 0xe594 <__fp_inf>
    e648:	ab cf       	rjmp	.-170    	; 0xe5a0 <__fp_nan>
    e64a:	11 24       	eor	r1, r1
    e64c:	ee cf       	rjmp	.-36     	; 0xe62a <__fp_szero>

0000e64e <__mulsf3x>:
    e64e:	ca df       	rcall	.-108    	; 0xe5e4 <__fp_split3>
    e650:	a0 f3       	brcs	.-24     	; 0xe63a <__mulsf3+0x4>

0000e652 <__mulsf3_pse>:
    e652:	95 9f       	mul	r25, r21
    e654:	d1 f3       	breq	.-12     	; 0xe64a <__mulsf3+0x14>
    e656:	95 0f       	add	r25, r21
    e658:	50 e0       	ldi	r21, 0x00	; 0
    e65a:	55 1f       	adc	r21, r21
    e65c:	62 9f       	mul	r22, r18
    e65e:	f0 01       	movw	r30, r0
    e660:	72 9f       	mul	r23, r18
    e662:	bb 27       	eor	r27, r27
    e664:	f0 0d       	add	r31, r0
    e666:	b1 1d       	adc	r27, r1
    e668:	63 9f       	mul	r22, r19
    e66a:	aa 27       	eor	r26, r26
    e66c:	f0 0d       	add	r31, r0
    e66e:	b1 1d       	adc	r27, r1
    e670:	aa 1f       	adc	r26, r26
    e672:	64 9f       	mul	r22, r20
    e674:	66 27       	eor	r22, r22
    e676:	b0 0d       	add	r27, r0
    e678:	a1 1d       	adc	r26, r1
    e67a:	66 1f       	adc	r22, r22
    e67c:	82 9f       	mul	r24, r18
    e67e:	22 27       	eor	r18, r18
    e680:	b0 0d       	add	r27, r0
    e682:	a1 1d       	adc	r26, r1
    e684:	62 1f       	adc	r22, r18
    e686:	73 9f       	mul	r23, r19
    e688:	b0 0d       	add	r27, r0
    e68a:	a1 1d       	adc	r26, r1
    e68c:	62 1f       	adc	r22, r18
    e68e:	83 9f       	mul	r24, r19
    e690:	a0 0d       	add	r26, r0
    e692:	61 1d       	adc	r22, r1
    e694:	22 1f       	adc	r18, r18
    e696:	74 9f       	mul	r23, r20
    e698:	33 27       	eor	r19, r19
    e69a:	a0 0d       	add	r26, r0
    e69c:	61 1d       	adc	r22, r1
    e69e:	23 1f       	adc	r18, r19
    e6a0:	84 9f       	mul	r24, r20
    e6a2:	60 0d       	add	r22, r0
    e6a4:	21 1d       	adc	r18, r1
    e6a6:	82 2f       	mov	r24, r18
    e6a8:	76 2f       	mov	r23, r22
    e6aa:	6a 2f       	mov	r22, r26
    e6ac:	11 24       	eor	r1, r1
    e6ae:	9f 57       	subi	r25, 0x7F	; 127
    e6b0:	50 40       	sbci	r21, 0x00	; 0
    e6b2:	8a f0       	brmi	.+34     	; 0xe6d6 <__mulsf3_pse+0x84>
    e6b4:	e1 f0       	breq	.+56     	; 0xe6ee <__mulsf3_pse+0x9c>
    e6b6:	88 23       	and	r24, r24
    e6b8:	4a f0       	brmi	.+18     	; 0xe6cc <__mulsf3_pse+0x7a>
    e6ba:	ee 0f       	add	r30, r30
    e6bc:	ff 1f       	adc	r31, r31
    e6be:	bb 1f       	adc	r27, r27
    e6c0:	66 1f       	adc	r22, r22
    e6c2:	77 1f       	adc	r23, r23
    e6c4:	88 1f       	adc	r24, r24
    e6c6:	91 50       	subi	r25, 0x01	; 1
    e6c8:	50 40       	sbci	r21, 0x00	; 0
    e6ca:	a9 f7       	brne	.-22     	; 0xe6b6 <__mulsf3_pse+0x64>
    e6cc:	9e 3f       	cpi	r25, 0xFE	; 254
    e6ce:	51 05       	cpc	r21, r1
    e6d0:	70 f0       	brcs	.+28     	; 0xe6ee <__mulsf3_pse+0x9c>
    e6d2:	60 cf       	rjmp	.-320    	; 0xe594 <__fp_inf>
    e6d4:	aa cf       	rjmp	.-172    	; 0xe62a <__fp_szero>
    e6d6:	5f 3f       	cpi	r21, 0xFF	; 255
    e6d8:	ec f3       	brlt	.-6      	; 0xe6d4 <__mulsf3_pse+0x82>
    e6da:	98 3e       	cpi	r25, 0xE8	; 232
    e6dc:	dc f3       	brlt	.-10     	; 0xe6d4 <__mulsf3_pse+0x82>
    e6de:	86 95       	lsr	r24
    e6e0:	77 95       	ror	r23
    e6e2:	67 95       	ror	r22
    e6e4:	b7 95       	ror	r27
    e6e6:	f7 95       	ror	r31
    e6e8:	e7 95       	ror	r30
    e6ea:	9f 5f       	subi	r25, 0xFF	; 255
    e6ec:	c1 f7       	brne	.-16     	; 0xe6de <__mulsf3_pse+0x8c>
    e6ee:	fe 2b       	or	r31, r30
    e6f0:	88 0f       	add	r24, r24
    e6f2:	91 1d       	adc	r25, r1
    e6f4:	96 95       	lsr	r25
    e6f6:	87 95       	ror	r24
    e6f8:	97 f9       	bld	r25, 7
    e6fa:	08 95       	ret

0000e6fc <strnlen_P>:
    e6fc:	fc 01       	movw	r30, r24
    e6fe:	05 90       	lpm	r0, Z+
    e700:	61 50       	subi	r22, 0x01	; 1
    e702:	70 40       	sbci	r23, 0x00	; 0
    e704:	01 10       	cpse	r0, r1
    e706:	d8 f7       	brcc	.-10     	; 0xe6fe <strnlen_P+0x2>
    e708:	80 95       	com	r24
    e70a:	90 95       	com	r25
    e70c:	8e 0f       	add	r24, r30
    e70e:	9f 1f       	adc	r25, r31
    e710:	08 95       	ret

0000e712 <_exit>:
    e712:	f8 94       	cli

0000e714 <__stop_program>:
    e714:	ff cf       	rjmp	.-2      	; 0xe714 <__stop_program>
