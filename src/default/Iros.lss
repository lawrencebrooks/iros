
Iros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800500  0000ef48  0000f048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .noinit       00000400  00800100  00800100  0000f060  2**5
                  CONTENTS, READONLY
  2 .text         0000ef48  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000b4c  00800510  00800510  0000f058  2**1
                  ALLOC
  4 .stab         00000708  00000000  00000000  0000f460  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002f1  00000000  00000000  0000fb68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000fe59  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000790  00000000  00000000  0000fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000aed4  00000000  00000000  00010600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001654  00000000  00000000  0001b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000028f7  00000000  00000000  0001cb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001808  00000000  00000000  0001f420  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020a2  00000000  00000000  00020c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000947f  00000000  00000000  00022cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000928  00000000  00000000  0002c150  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 3c 	jmp	0x78c4	; 0x78c4 <__ctors_end>
       4:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
       8:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
       c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      10:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      14:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      18:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      1c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      20:	0c 94 46 42 	jmp	0x848c	; 0x848c <__vector_8>
      24:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      28:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      2c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      30:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      34:	0c 94 14 40 	jmp	0x8028	; 0x8028 <__vector_13>
      38:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <__vector_14>
      3c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      40:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      44:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      48:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      4c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      50:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      54:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      58:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      5c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      60:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      64:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      68:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      6c:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__bad_interrupt>
      70:	26 66       	ori	r18, 0x66	; 102
      72:	32 66       	ori	r19, 0x62	; 98
      74:	3e 66       	ori	r19, 0x6E	; 110
      76:	2a 66       	ori	r18, 0x6A	; 106
      78:	2e 66       	ori	r18, 0x6E	; 110
      7a:	36 66       	ori	r19, 0x66	; 102
      7c:	2a 66       	ori	r18, 0x6A	; 106
      7e:	2a 66       	ori	r18, 0x6A	; 106
      80:	3a 66       	ori	r19, 0x6A	; 106
      82:	ce 69       	ori	r28, 0x9E	; 158
      84:	da 69       	ori	r29, 0x9A	; 154
      86:	d1 69       	ori	r29, 0x91	; 145
      88:	da 69       	ori	r29, 0x9A	; 154
      8a:	d4 69       	ori	r29, 0x94	; 148
      8c:	da 69       	ori	r29, 0x9A	; 154
      8e:	d7 69       	ori	r29, 0x97	; 151
      90:	da 69       	ori	r29, 0x9A	; 154
      92:	dd 69       	ori	r29, 0x9D	; 157
      94:	e0 69       	ori	r30, 0x90	; 144

00000096 <__trampolines_end>:
      96:	81 00       	.word	0x0081	; ????
      98:	45 00       	.word	0x0045	; ????
      9a:	27 ff       	sbrs	r18, 7
      9c:	24 ff       	sbrs	r18, 4
      9e:	2a 90       	ld	r2, -Y
      a0:	2b 1c       	adc	r2, r11
      a2:	21 0c       	add	r2, r1
      a4:	22 fb       	bst	r18, 2
      a6:	85 00       	.word	0x0085	; ????
      a8:	84 00       	.word	0x0084	; ????
      aa:	89 03       	fmulsu	r16, r17
      ac:	88 8d       	ldd	r24, Y+24	; 0x18
      ae:	81 09       	sbc	r24, r1
      b0:	6f 02       	muls	r22, r31
      b2:	44 42       	sbci	r20, 0x24	; 36
      b4:	47 00       	.word	0x0047	; ????
      b6:	45 01       	movw	r8, r10
      b8:	b0 83       	st	Z, r27
      ba:	b3 00       	.word	0x00b3	; ????
      bc:	b1 01       	movw	r22, r2
      be:	25 11       	cpse	r18, r5
      c0:	8a 1c       	adc	r8, r10
      c2:	8b 03       	fmulsu	r16, r19

000000c4 <eeprom_format_table>:
      c4:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000e4 <patchCommands>:
      e4:	ef 43 f2 43 4e 44 52 44 59 44 fa 43 ff 43 04 44     .C.CNDRDYD.C.C.D
      f4:	61 44 07 44 0a 44 0d 44 48 44 4b 44 71 44           aD.D.D.DHDKDqD

00000102 <fader>:
     102:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

0000010e <map_uzeboxlogo2>:
     10e:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

0000011f <map_uzeboxlogo>:
     11f:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     12f:	00 0e 0f 10 11 12                                   ......

00000135 <logo_tileset>:
	...
     191:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     1a1:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     1b1:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1c1:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1d1:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1e1:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1f1:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     201:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     211:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     221:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     231:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     241:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     251:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     261:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     279:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     289:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     299:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     2a9:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2b9:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2c9:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2d9:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2e9:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2f9:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     309:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     319:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     329:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     339:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     349:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     359:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     369:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     379:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     389:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     3b5:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3c5:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3d5:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3e5:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3f5:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     405:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     415:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     425:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     435:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     445:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     455:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     465:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     475:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     485:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4bd:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4cd:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4dd:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4ed:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4fd:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     50d:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     51d:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     52d:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     53d:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     54d:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     55d:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     56d:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     57d:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     58d:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     59d:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     5ad:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5bd:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5cd:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5dd:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5ed:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     611:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     621:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     631:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     641:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     651:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     661:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     671:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     681:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     691:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     6a1:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     6b1:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6c1:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6d1:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6e1:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6f9:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     709:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     719:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     729:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     739:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     749:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     759:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     769:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     779:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     789:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     799:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     7a9:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7b9:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7c9:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7d9:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7e9:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7f9:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     809:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     835:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     845:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     855:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     865:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     875:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     885:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     895:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     8a5:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     8b5:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8c5:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8d5:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8e5:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8f5:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     905:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

00000935 <logoInitPatches>:
     935:	00 00 00 3e 09 00 00 00 00                          ...>.....

0000093e <initPatch>:
     93e:	00 02 08 00 08 55 04 08 5a 00 00 f8 00 09 90 00     .....U..Z.......
     94e:	0a 1e 32 05 00 00 ff                                ..2....

00000955 <strChallenge>:
     955:	20 20 20 50 52 45 50 41 52 45 00 20 20 54 4f 20        PREPARE.  TO 
     965:	42 45 20 49 43 45 44 00 23 20 20 20 20 20 20 20     BE ICED.#       
     975:	20 20 20 20 20 20 20 20 43 55 54 45 00 50 49 4e             CUTE.PIN
     985:	4b 20 53 55 49 54 53 20 59 4f 55 00 23 20 20 20     K SUITS YOU.#   
     995:	20 20 20 20 20 20 20 49 20 4c 49 4b 45 20 54 52            I LIKE TR
     9a5:	45 45 53 00 20 41 4e 44 20 42 45 41 54 49 4e 47     EES. AND BEATING
     9b5:	53 00 23 20 20 20 20 20 20 20 20 20 20 4d 59 20     S.#          MY 
     9c5:	47 55 4e 00 20 20 59 4f 55 52 20 46 41 43 45 00     GUN.  YOUR FACE.
     9d5:	23 20 20 20 20 20 20 20 20 20 20 20 20 59 45 41     #            YEA
     9e5:	48 20 42 55 54 20 49 54 53 00 20 20 41 20 44 52     H BUT ITS.  A DR
     9f5:	59 20 48 45 41 54 00 23 20 20 20 20 20 20 20 00     Y HEAT.#       .

00000a05 <strCongrats>:
     a05:	43 4f 4e 47 52 41 54 53 00 00 59 4f 55 20 48 41     CONGRATS..YOU HA
     a15:	56 45 20 44 45 46 45 41 54 45 44 00 54 48 45 20     VE DEFEATED.THE 
     a25:	4b 4e 49 47 48 54 53 20 4f 46 20 49 52 4f 53 00     KNIGHTS OF IROS.
     a35:	41 4e 44 20 45 53 43 41 50 45 44 20 54 48 45 49     AND ESCAPED THEI
     a45:	52 00 49 4e 54 45 52 50 4c 41 4e 45 54 41 52 59     R.INTERPLANETARY
     a55:	20 44 45 46 45 4e 43 45 53 00 00 59 4f 55 20 41      DEFENCES..YOU A
     a65:	4c 53 4f 20 45 53 43 41 50 45 44 00 54 48 45 49     LSO ESCAPED.THEI
     a75:	52 20 41 4e 4e 4f 59 49 4e 47 20 4f 4e 45 20 4c     R ANNOYING ONE L
     a85:	49 4e 45 52 53 00 00 50 41 54 20 59 4f 55 52 53     INERS..PAT YOURS
     a95:	45 4c 46 20 4f 4e 20 54 48 45 20 42 41 43 4b 00     ELF ON THE BACK.
     aa5:	46 4f 52 20 41 20 4a 4f 42 20 57 45 4c 4c 20 44     FOR A JOB WELL D
     ab5:	4f 4e 45 00 23 00                                   ONE.#.

00000abb <strIntro>:
     abb:	54 48 45 20 35 20 4b 4e 49 47 48 54 53 20 4f 46     THE 5 KNIGHTS OF
     acb:	20 49 52 4f 53 00 48 41 56 45 20 53 54 4f 4c 45      IROS.HAVE STOLE
     adb:	4e 20 59 4f 55 52 20 50 4f 57 45 52 20 55 50 53     N YOUR POWER UPS
     aeb:	00 41 4e 44 20 46 4c 45 44 20 54 4f 20 54 48 45     .AND FLED TO THE
     afb:	49 52 20 48 4f 4d 45 57 4f 52 4c 44 53 00 00 42     IR HOMEWORLDS..B
     b0b:	45 43 41 55 53 45 20 54 48 45 59 20 53 55 43 4b     ECAUSE THEY SUCK
     b1b:	00 00 44 45 53 54 52 4f 59 20 54 48 45 4d 20 41     ..DESTROY THEM A
     b2b:	4e 44 00 54 41 4b 45 20 42 41 43 4b 20 59 4f 55     ND.TAKE BACK YOU
     b3b:	52 20 53 57 41 47 00 23 00                          R SWAG.#.

00000b44 <default_scores>:
     b44:	55 5a 45 00 00 4c 4a 42 00 00 41 41 41 00 00 42     UZE..LJB..AAA..B
     b54:	42 42 00 00 43 43 43 00 00 44 44 44 00 00           BB..CCC..DDD..

00000b62 <strTally>:
     b62:	54 41 4c 4c 59 20 00                                TALLY .

00000b69 <strGameOver>:
     b69:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000b73 <strLevelBonus>:
     b73:	42 4f 4e 55 53 00                                   BONUS.

00000b79 <strLevelClear>:
     b79:	4c 45 56 45 4c 20 43 4c 45 41 52 00                 LEVEL CLEAR.

00000b85 <strPaused>:
     b85:	50 41 55 53 45 00                                   PAUSE.

00000b8b <strExitGame>:
     b8b:	58 20 45 58 49 54 20 47 41 4d 45 00                 X EXIT GAME.

00000b97 <strMainMenu>:
     b97:	58 20 4d 41 49 4e 20 4d 45 4e 55 00                 X MAIN MENU.

00000ba3 <strTime>:
     ba3:	54 49 4d 45 20 00                                   TIME .

00000ba9 <strLives>:
     ba9:	4c 49 56 45 53 20 00                                LIVES .

00000bb0 <strShield>:
     bb0:	53 48 49 45 4c 44 20 00                             SHIELD .

00000bb8 <strScore>:
     bb8:	53 43 4f 52 45 20 00                                SCORE .

00000bbf <strSelectHandle>:
	...

00000bc0 <strHighScores>:
     bc0:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00000bcc <str1Player>:
     bcc:	53 54 41 52 54 00                                   START.

00000bd2 <strCopyright>:
     bd2:	32 30 31 37 20 4c 41 57 52 45 4e 43 45 20 42 52     2017 LAWRENCE BR
     be2:	4f 4f 4b 53 00                                      OOKS.

00000be7 <spacesong>:
     be7:	00 c0 00 00 c1 01 00 b0 07 7f 00 07 7f 00 90 43     ...............C
     bf7:	64 00 46 64 00 4b 64 00 4f 64 00 b1 07 74 00 91     d.Fd.Kd.Od...t..
     c07:	33 64 00 ff 06 01 53 1d 91 33 64 0a 33 64 14 90     3d....S..3d.3d..
     c17:	4b 64 00 46 64 00 43 64 00 91 33 64 27 33 64 14     Kd.Fd.Cd..3d'3d.
     c27:	90 46 64 00 43 64 00 4b 64 00 4f 64 00 91 33 64     .Fd.Cd.Kd.Od..3d
     c37:	14 33 64 0a 90 41 64 00 4d 64 0a 41 64 00 46 64     .3d..Ad.Md.Ad.Fd
     c47:	00 4a 64 00 4d 64 00 91 2e 64 1e 2e 64 09 2e 64     .Jd.Md...d..d..d
     c57:	14 90 41 64 00 46 64 00 4a 64 00 91 2e 64 28 2e     ..Ad.Fd.Jd...d(.
     c67:	64 14 90 41 64 00 46 64 00 4a 64 00 4d 64 00 91     d..Ad.Fd.Jd.Md..
     c77:	2e 64 13 2e 64 0a 90 3f 64 00 4b 64 0a 3f 64 00     .d..d..?d.Kd.?d.
     c87:	44 64 00 48 64 00 4b 64 00 91 2c 64 1e 2c 64 0a     Dd.Hd.Kd..,d.,d.
     c97:	2c 64 14 90 41 64 00 46 64 00 4a 64 00 91 2c 64     ,d..Ad.Fd.Jd..,d
     ca7:	13 2e 64 14 90 46 64 00 91 2c 64 14 90 3f 64 00     ..d..Fd..,d..?d.
     cb7:	43 64 00 48 64 00 91 2e 64 14 30 64 14 90 43 64     Cd.Hd...d.0d..Cd
     cc7:	00 48 64 00 4b 64 00 4f 64 00 91 30 64 1d 30 64     .Hd.Kd.Od..0d.0d
     cd7:	0a 30 64 14 90 4b 64 00 48 64 00 43 64 00 91 30     .0d..Kd.Hd.Cd..0
     ce7:	64 28 30 64 13 90 43 64 00 48 64 00 4b 64 00 4f     d(0d..Cd.Hd.Kd.O
     cf7:	64 00 91 30 64 14 30 64 0a 90 41 64 00 4d 64 0a     d..0d.0d..Ad.Md.
     d07:	43 64 00 46 64 00 4b 64 00 4f 64 00 91 33 64 1e     Cd.Fd.Kd.Od..3d.
     d17:	33 64 09 33 64 14 90 4b 64 00 46 64 00 43 64 00     3d.3d..Kd.Fd.Cd.
     d27:	91 33 64 28 33 64 14 90 46 64 00 43 64 00 4b 64     .3d(3d..Fd.Cd.Kd
     d37:	00 4f 64 00 91 33 64 13 33 64 0a 90 41 64 00 4d     .Od..3d.3d..Ad.M
     d47:	64 0a 41 64 00 46 64 00 4a 64 00 4d 64 00 91 2e     d.Ad.Fd.Jd.Md...
     d57:	64 1e 2e 64 0a 2e 64 14 90 41 64 00 46 64 00 4a     d..d..d..Ad.Fd.J
     d67:	64 00 91 2e 64 27 2e 64 14 90 41 64 00 46 64 00     d...d'.d..Ad.Fd.
     d77:	4a 64 00 4d 64 00 91 2e 64 14 2e 64 0a 90 3f 64     Jd.Md...d..d..?d
     d87:	00 4b 64 0a 3f 64 00 44 64 00 48 64 00 4b 64 00     .Kd.?d.Dd.Hd.Kd.
     d97:	91 2c 64 1d 2c 64 0a 2c 64 14 90 41 64 00 46 64     .,d.,d.,d..Ad.Fd
     da7:	00 4a 64 00 91 2c 64 14 2e 64 14 90 46 64 00 91     .Jd..,d..d..Fd..
     db7:	2c 64 13 90 3f 64 00 43 64 00 48 64 00 91 30 64     ,d..?d.Cd.Hd..0d
     dc7:	14 30 64 14 90 48 64 00 91 2c 6e 14 2c 4b 06 90     .0d..Hd..,n.,K..
     dd7:	4a 64 0e 91 2c 4b 0d 90 4b 64 06 91 2c 6e 14 90     Jd..,K..Kd..,n..
     de7:	4d 64 00 91 2c 4b 14 2c 4b 07 90 4b 64 0d 91 2c     Md..,K.,K..Kd..,
     df7:	6e 0d 90 4a 64 07 91 2c 4b 13 90 48 64 00 91 30     n..Jd..,K..Hd..0
     e07:	6e 14 30 4b 07 90 4a 64 0d 91 30 4b 0d 90 46 64     n.0K..Jd..0K..Fd
     e17:	07 91 30 6e 13 90 43 64 00 91 30 4b 14 30 4b 07     ..0n..Cd..0K.0K.
     e27:	90 46 64 0d 91 30 6e 0d 90 48 64 07 91 30 4b 14     .Fd..0n..Hd..0K.
     e37:	90 48 64 00 91 2c 6e 13 2c 4b 07 90 4a 64 0d 91     .Hd..,n.,K..Jd..
     e47:	2c 4b 0d 90 4b 64 07 91 2c 6e 14 90 4d 64 00 91     ,K..Kd..,n..Md..
     e57:	2c 4b 14 2c 4b 06 90 4b 64 0d 91 2c 6e 0e 90 4d     ,K.,K..Kd..,n..M
     e67:	64 06 91 2c 4b 14 90 4f 64 00 91 30 6e 14 30 4b     d..,K..Od..0n.0K
     e77:	07 90 50 64 0d 91 30 4b 0e 90 4d 64 05 91 30 6e     ..Pd..0K..Md..0n
     e87:	14 90 4f 64 00 91 30 4b 14 30 4b 07 90 4d 64 0d     ..Od..0K.0K..Md.
     e97:	91 30 6e 0d 90 4b 64 07 91 30 4b 13 90 4d 64 00     .0n..Kd..0K..Md.
     ea7:	91 2b 6e 14 2b 4b 07 90 4f 64 0d 91 2b 4b 0d 90     .+n.+K..Od..+K..
     eb7:	4d 64 07 91 2b 6e 14 90 4b 64 00 91 2b 4b 13 2b     Md..+n..Kd..+K.+
     ec7:	4b 07 90 46 64 0d 91 2b 6e 0d 90 4b 64 07 91 2b     K..Fd..+n..Kd..+
     ed7:	4b 14 90 4d 64 00 91 2c 6e 13 2c 4b 07 90 50 64     K..Md..,n.,K..Pd
     ee7:	0d 91 2c 4b 0d 90 4f 64 07 91 2c 6e 14 90 4d 64     ..,K..Od..,n..Md
     ef7:	00 91 2c 4b 14 2c 4b 06 90 48 64 0d 91 2c 6e 0e     ..,K.,K..Hd..,n.
     f07:	90 4d 64 06 91 2c 4b 14 90 52 64 00 91 27 6e 0d     .Md..,K..Rd..'n.
     f17:	90 50 64 07 91 27 4b 06 90 4f 64 0e 50 64 00 91     .Pd..'K..Od.Pd..
     f27:	27 4b 0d 90 4f 64 06 91 27 6e 07 90 4d 64 0d 4b     'K..Od..'n..Md.K
     f37:	64 00 91 27 4b 14 27 4b 07 90 46 64 0d 91 27 6e     d..'K.'K..Fd..'n
     f47:	0d 90 4b 64 07 91 27 4b 13 90 47 64 00 91 26 6e     ..Kd..'K..Gd..&n
     f57:	14 26 4b 07 90 4a 64 0d 91 26 4b 0d 90 4f 64 07     .&K..Jd..&K..Od.
     f67:	91 26 6e 14 90 53 64 00 91 26 4b 13 26 4b 07 90     .&n..Sd..&K.&K..
     f77:	56 64 0d 91 26 6e 0d 90 5b 64 07 91 26 4b 14 90     Vd..&n..[d..&K..
     f87:	3d 64 00 91 31 64 06 90 41 64 07 44 64 07 49 64     =d..1d..Ad.Dd.Id
     f97:	06 4d 64 07 50 64 06 55 64 07 59 64 07 5c 64 06     .Md.Pd.Ud.Yd.\d.
     fa7:	59 64 07 55 64 06 50 64 07 4d 64 07 49 64 06 44     Yd.Ud.Pd.Md.Id.D
     fb7:	64 07 41 64 06 3d 64 07 38 64 07 3d 64 06 41 64     d.Ad.=d.8d.=d.Ad
     fc7:	07 44 64 06 49 64 07 44 64 07 41 64 06 43 64 00     .Dd.Id.Dd.Ad.Cd.
     fd7:	91 37 64 07 90 47 64 06 4a 64 07 4f 64 06 53 64     .7d..Gd.Jd.Od.Sd
     fe7:	07 56 64 07 5b 64 06 5f 64 07 62 64 06 5f 64 07     .Vd.[d._d.bd._d.
     ff7:	5b 64 07 56 64 06 53 64 07 4f 64 06 4a 64 07 47     [d.Vd.Sd.Od.Jd.G
    1007:	64 07 43 64 06 3e 64 07 43 64 06 47 64 07 4a 64     d.Cd.>d.Cd.Gd.Jd
    1017:	07 4f 64 06 4a 64 07 47 64 06 46 64 00 91 3a 64     .Od.Jd.Gd.Fd..:d
    1027:	07 90 4a 64 07 4d 64 06 52 64 07 56 64 06 59 64     ..Jd.Md.Rd.Vd.Yd
    1037:	07 5e 64 07 62 64 06 65 64 07 62 64 06 5e 64 07     .^d.bd.ed.bd.^d.
    1047:	59 64 07 56 64 06 52 64 07 4d 64 06 4a 64 07 46     Yd.Vd.Rd.Md.Jd.F
    1057:	64 07 41 64 06 46 64 07 4a 64 06 4d 64 07 52 64     d.Ad.Fd.Jd.Md.Rd
    1067:	07 4d 64 06 4a 64 07 54 7f 00 43 64 00 48 64 00     .Md.Jd.T..Cd.Hd.
    1077:	4b 64 00 4f 64 00 91 30 64 1d 30 64 0a 30 64 14     Kd.Od..0d.0d.0d.
    1087:	90 4b 64 00 48 64 00 43 64 00 91 30 64 28 30 64     .Kd.Hd.Cd..0d(0d
    1097:	14 90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30     ..Cd.Hd.Kd.Od..0
    10a7:	64 13 30 64 0a 90 41 64 00 4d 64 0a 43 64 00 46     d.0d..Ad.Md.Cd.F
    10b7:	64 00 4b 64 00 4f 64 00 91 33 64 1e 33 64 0a 33     d.Kd.Od..3d.3d.3
    10c7:	64 14 90 4b 64 00 46 64 00 43 64 00 91 33 64 27     d..Kd.Fd.Cd..3d'
    10d7:	33 64 14 90 46 64 00 43 64 00 4b 64 00 4f 64 00     3d..Fd.Cd.Kd.Od.
    10e7:	91 33 64 14 33 64 0a 90 41 64 00 4d 64 0a 41 64     .3d.3d..Ad.Md.Ad
    10f7:	00 46 64 00 4a 64 00 4d 64 00 91 2e 64 1d 2e 64     .Fd.Jd.Md...d..d
    1107:	0a 2e 64 14 90 41 64 00 46 64 00 4a 64 00 91 2e     ..d..Ad.Fd.Jd...
    1117:	64 27 2e 64 14 90 41 64 00 46 64 00 4a 64 00 4d     d'.d..Ad.Fd.Jd.M
    1127:	64 00 91 2e 64 14 2e 64 0a 90 3f 64 00 4b 64 0a     d...d..d..?d.Kd.
    1137:	3f 64 00 44 64 00 48 64 00 4b 64 00 91 2c 64 1e     ?d.Dd.Hd.Kd..,d.
    1147:	2c 64 09 2c 64 14 90 41 64 00 46 64 00 4a 64 00     ,d.,d..Ad.Fd.Jd.
    1157:	91 2c 64 14 2e 64 14 90 46 64 00 91 2c 64 14 90     .,d..d..Fd..,d..
    1167:	3f 64 00 43 64 00 48 64 00 91 2e 64 13 30 64 14     ?d.Cd.Hd...d.0d.
    1177:	90 43 64 00 48 64 00 4b 64 00 4f 64 00 91 30 64     .Cd.Hd.Kd.Od..0d
    1187:	1e 30 64 0a 30 64 14 90 4b 64 00 48 64 00 43 64     .0d.0d..Kd.Hd.Cd
    1197:	00 91 30 64 27 30 64 14 90 43 64 00 48 64 00 4b     ..0d'0d..Cd.Hd.K
    11a7:	64 00 4f 64 00 91 30 64 14 30 64 0a 90 41 64 00     d.Od..0d.0d..Ad.
    11b7:	4d 64 0a 43 64 00 46 64 00 4b 64 00 4f 64 00 91     Md.Cd.Fd.Kd.Od..
    11c7:	33 64 1d 33 64 0a 33 64 14 90 4b 64 00 46 64 00     3d.3d.3d..Kd.Fd.
    11d7:	43 64 00 91 33 64 28 33 64 13 90 46 64 00 43 64     Cd..3d(3d..Fd.Cd
    11e7:	00 4b 64 00 4f 64 00 91 33 64 14 33 64 0a 90 41     .Kd.Od..3d.3d..A
    11f7:	64 00 4d 64 0a 41 64 00 46 64 00 4a 64 00 4d 64     d.Md.Ad.Fd.Jd.Md
    1207:	00 91 2e 64 1e 2e 64 09 2e 64 14 90 41 64 00 46     ...d..d..d..Ad.F
    1217:	64 00 4a 64 00 91 2e 64 28 2e 64 14 90 41 64 00     d.Jd...d(.d..Ad.
    1227:	46 64 00 4a 64 00 4d 64 00 91 2e 64 13 2e 64 0a     Fd.Jd.Md...d..d.
    1237:	90 3f 64 00 4b 64 0a 3f 64 00 44 64 00 48 64 00     .?d.Kd.?d.Dd.Hd.
    1247:	4b 64 00 91 2c 64 1e 2c 64 0a 2c 64 14 90 41 64     Kd..,d.,d.,d..Ad
    1257:	00 46 64 00 4a 64 00 91 2c 64 13 2e 64 14 90 46     .Fd.Jd..,d..d..F
    1267:	64 00 91 2c 64 0f ff 06 01 45 05 90 3f 64 00 43     d..,d....E..?d.C
    1277:	64 00 48 64 00 91 30 64 14 30 64 81 0a ff 2f 00     d.Hd..0d.0d.../.

00001287 <planetsong>:
    1287:	00 c0 00 00 c1 01 00 b0 07 7f 00 b1 07 74 00 ff     .............t..
    1297:	06 01 53 1b 90 48 78 00 91 30 6e 07 90 43 55 00     ..S..Hx..0n..CU.
    12a7:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 78 00     .0P..HU..0P..Jx.
    12b7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    12c7:	91 30 50 07 90 4a 78 00 91 30 6e 07 90 4b 55 00     .0P..Jx..0n..KU.
    12d7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 78 00     .0P..MU..0P..Jx.
    12e7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    12f7:	91 30 50 07 90 4f 78 00 91 30 6e 07 90 4b 55 00     .0P..Ox..0n..KU.
    1307:	91 30 50 07 90 4d 78 00 91 2e 6e 07 90 4f 55 07     .0P..Mx...n..OU.
    1317:	50 78 00 91 30 6e 06 90 4d 55 00 91 30 50 07 90     Px..0n..MU..0P..
    1327:	4f 55 00 91 30 50 07 90 4b 78 00 91 30 6e 07 90     OU..0P..Kx..0n..
    1337:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1347:	6e 03 90 4b 78 04 48 55 00 91 30 50 07 90 4a 55     n..Kx.HU..0P..JU
    1357:	00 91 30 50 07 90 46 78 00 91 30 6e 07 90 4d 55     ..0P..Fx..0n..MU
    1367:	00 91 30 50 07 90 46 78 00 91 30 50 07 90 4f 55     ..0P..Fx..0P..OU
    1377:	00 91 30 6e 07 90 46 78 00 91 30 50 07 90 4d 55     ..0n..Fx..0P..MU
    1387:	00 91 2e 6e 07 90 46 78 07 48 55 00 91 30 6e 07     ...n..Fx.HU..0n.
    1397:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    13a7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13b7:	90 48 55 00 91 30 50 06 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    13c7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    13d7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    13e7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    13f7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    1407:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    1417:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    1427:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1437:	30 50 07 30 6e 02 90 4b 55 05 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1447:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1457:	06 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1467:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1477:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1487:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1497:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    14a7:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    14b7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    14c7:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    14d7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    14e7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    14f7:	91 2b 6e 06 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    1507:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    1517:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    1527:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1537:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1547:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1557:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1567:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 07 90 46 78     ..,P..MU..+n..Fx
    1577:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1587:	90 48 55 00 91 29 50 06 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1597:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    15a7:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    15b7:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    15c7:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    15d7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    15e7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    15f7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    1607:	2e 50 07 90 4b 55 00 91 2e 6e 07 90 4d 55 00 91     .P..KU...n..MU..
    1617:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 02 90 4b     .P..JU...P..n..K
    1627:	55 05 48 55 00 91 2e 50 06 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1637:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1647:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 2e 6e     ..FU...P..OU...n
    1657:	07 90 46 55 00 91 2e 50 07 90 4d 55 00 91 2e 6e     ..FU...P..MU...n
    1667:	07 90 46 55 07 48 55 00 91 30 6e 07 90 43 55 00     ..FU.HU..0n..CU.
    1677:	91 30 50 07 90 48 55 00 91 30 50 07 90 4a 55 00     .0P..HU..0P..JU.
    1687:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 48 55 00     .0n..KU..0P..HU.
    1697:	91 30 50 07 90 4a 55 00 91 30 6e 07 90 4b 55 00     .0P..JU..0n..KU.
    16a7:	91 30 50 07 90 4d 55 00 91 30 50 07 90 4a 55 00     .0P..MU..0P..JU.
    16b7:	91 30 6e 07 90 4b 55 00 91 30 50 07 90 4d 55 00     .0n..KU..0P..MU.
    16c7:	91 30 50 07 90 4f 55 00 91 30 6e 06 90 4b 55 00     .0P..OU..0n..KU.
    16d7:	91 30 50 07 90 4d 55 00 91 2e 6e 07 90 4f 55 07     .0P..MU...n..OU.
    16e7:	50 55 00 91 30 6e 07 90 4d 55 00 91 30 50 07 90     PU..0n..MU..0P..
    16f7:	4f 55 00 91 30 50 07 90 4b 55 00 91 30 6e 07 90     OU..0P..KU..0n..
    1707:	4d 55 00 91 30 50 07 90 4a 55 00 91 30 50 07 30     MU..0P..JU..0P.0
    1717:	6e 02 90 4b 55 05 48 55 00 91 30 50 07 90 4a 55     n..KU.HU..0P..JU
    1727:	00 91 30 50 07 90 46 55 00 91 30 6e 07 90 4d 55     ..0P..FU..0n..MU
    1737:	00 91 30 50 07 90 46 55 00 91 30 50 07 90 4f 55     ..0P..FU..0P..OU
    1747:	00 91 30 6e 07 90 46 55 00 91 30 50 07 90 4d 55     ..0n..FU..0P..MU
    1757:	00 91 2e 6e 07 90 46 55 07 48 55 00 91 30 6e 06     ...n..FU.HU..0n.
    1767:	90 43 55 00 91 30 50 07 90 48 55 00 91 30 50 07     .CU..0P..HU..0P.
    1777:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    1787:	90 48 55 00 91 30 50 07 90 4a 55 00 91 30 6e 07     .HU..0P..JU..0n.
    1797:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 30 50 07     .KU..0P..MU..0P.
    17a7:	90 4a 55 00 91 30 6e 07 90 4b 55 00 91 30 50 07     .JU..0n..KU..0P.
    17b7:	90 4d 55 00 91 30 50 07 90 4f 55 00 91 30 6e 07     .MU..0P..OU..0n.
    17c7:	90 4b 55 00 91 30 50 07 90 4d 55 00 91 2e 6e 07     .KU..0P..MU...n.
    17d7:	90 4f 55 07 50 55 00 91 30 6e 07 90 4d 55 00 91     .OU.PU..0n..MU..
    17e7:	30 50 07 90 4f 55 00 91 30 50 07 90 4b 55 00 91     0P..OU..0P..KU..
    17f7:	30 6e 07 90 4d 55 00 91 30 50 07 90 4a 55 00 91     0n..MU..0P..JU..
    1807:	30 50 06 30 6e 03 90 4b 55 04 48 55 00 91 30 50     0P.0n..KU.HU..0P
    1817:	07 90 4a 55 00 91 30 50 07 90 46 55 00 91 30 6e     ..JU..0P..FU..0n
    1827:	07 90 4d 55 00 91 30 50 07 90 46 55 00 91 30 50     ..MU..0P..FU..0P
    1837:	07 90 4f 55 00 91 30 6e 07 90 46 55 00 91 30 50     ..OU..0n..FU..0P
    1847:	07 90 4d 55 00 91 2e 6e 07 90 46 55 07 48 78 00     ..MU...n..FU.Hx.
    1857:	91 2c 6e 07 90 43 55 00 91 2c 50 07 90 48 55 00     .,n..CU..,P..HU.
    1867:	91 2c 50 07 90 4a 78 00 91 2c 6e 07 90 4b 55 00     .,P..Jx..,n..KU.
    1877:	91 2c 50 07 90 48 55 00 91 2c 50 07 90 4a 78 00     .,P..HU..,P..Jx.
    1887:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 55 00     .,n..KU..,P..MU.
    1897:	91 2c 50 07 90 4a 78 00 91 2c 6e 06 90 4b 55 00     .,P..Jx..,n..KU.
    18a7:	91 2c 50 07 90 4d 55 00 91 2c 50 07 90 4f 78 00     .,P..MU..,P..Ox.
    18b7:	91 2c 6e 07 90 4b 55 00 91 2c 50 07 90 4d 78 00     .,n..KU..,P..Mx.
    18c7:	91 2b 6e 07 90 4f 55 07 50 78 00 91 2c 6e 07 90     .+n..OU.Px..,n..
    18d7:	4d 55 00 91 2c 50 07 90 4f 55 00 91 2c 50 07 90     MU..,P..OU..,P..
    18e7:	4b 78 00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90     Kx..,n..MU..,P..
    18f7:	4a 55 00 91 2c 50 07 2c 6e 02 90 4b 78 05 48 55     JU..,P.,n..Kx.HU
    1907:	00 91 2c 50 07 90 4a 55 00 91 2c 50 07 90 46 78     ..,P..JU..,P..Fx
    1917:	00 91 2c 6e 07 90 4d 55 00 91 2c 50 07 90 46 78     ..,n..MU..,P..Fx
    1927:	00 91 2c 50 07 90 4f 55 00 91 2c 6e 07 90 46 78     ..,P..OU..,n..Fx
    1937:	00 91 2c 50 07 90 4d 55 00 91 2b 6e 06 90 46 78     ..,P..MU..+n..Fx
    1947:	07 48 55 00 91 29 6e 07 90 43 55 00 91 29 50 07     .HU..)n..CU..)P.
    1957:	90 48 55 00 91 29 50 07 90 4a 55 00 91 29 6e 07     .HU..)P..JU..)n.
    1967:	90 4b 55 00 91 29 50 07 90 48 55 00 91 29 50 07     .KU..)P..HU..)P.
    1977:	90 4a 55 00 91 2b 6e 07 90 4b 55 00 91 2b 50 07     .JU..+n..KU..+P.
    1987:	90 4d 55 00 91 2b 50 07 90 4a 55 00 91 2b 6e 07     .MU..+P..JU..+n.
    1997:	90 4b 55 00 91 2b 50 07 90 4d 55 00 91 2b 50 07     .KU..+P..MU..+P.
    19a7:	90 4f 55 00 91 2c 6e 07 90 4b 55 00 91 2c 50 07     .OU..,n..KU..,P.
    19b7:	90 4d 55 00 91 2c 6e 07 90 4f 55 07 50 55 00 91     .MU..,n..OU.PU..
    19c7:	2e 6e 07 90 4d 55 00 91 2e 50 07 90 4f 55 00 91     .n..MU...P..OU..
    19d7:	2e 50 07 90 4b 55 00 91 2e 6e 06 90 4d 55 00 91     .P..KU...n..MU..
    19e7:	2e 50 07 90 4a 55 00 91 2e 50 07 2e 6e 03 90 4b     .P..JU...P..n..K
    19f7:	55 04 48 55 00 91 2e 50 07 90 4a 55 00 91 2e 50     U.HU...P..JU...P
    1a07:	07 90 46 55 00 91 2e 6e 07 90 4d 55 00 91 2e 50     ..FU...n..MU...P
    1a17:	07 90 46 55 00 91 2e 50 07 90 4f 55 00 91 30 6e     ..FU...P..OU..0n
    1a27:	07 90 46 55 00 91 30 50 07 90 4d 55 00 91 2e 6e     ..FU..0P..MU...n
    1a37:	07 90 46 55 07 54 64 00 48 64 00 91 30 6e 07 30     ..FU.Td.Hd..0n.0
    1a47:	50 07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e     P.0P.0n.0P.0P.0n
    1a57:	07 30 50 06 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1a67:	30 6e 07 30 50 07 2e 6e 0e 30 6e 07 30 50 07 30     0n.0P..n.0n.0P.0
    1a77:	50 07 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     P.0n.0P.0P.0n.0P
    1a87:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 06     .0P.0n.0P.0P.0n.
    1a97:	30 50 07 2e 6e 0e 90 33 64 00 37 64 00 3c 64 00     0P..n..3d.7d.<d.
    1aa7:	91 30 6e 07 30 50 07 30 50 07 90 32 64 00 37 64     .0n.0P.0P..2d.7d
    1ab7:	00 3a 64 00 91 30 6e 07 30 50 07 30 50 07 90 33     .:d..0n.0P.0P..3
    1ac7:	64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07 30     d.7d.<d..0n.0P.0
    1ad7:	50 07 90 37 64 00 3a 64 00 3e 64 00 91 30 6e 07     P..7d.:d.>d..0n.
    1ae7:	30 50 07 30 50 07 90 37 64 00 3c 64 00 3f 64 00     0P.0P..7d.<d.?d.
    1af7:	91 30 6e 07 30 50 07 90 37 64 00 3a 64 00 3e 64     .0n.0P..7d.:d.>d
    1b07:	00 91 30 6e 07 30 6e 07 90 3a 64 00 43 64 00 3f     ..0n.0n..:d.Cd.?
    1b17:	64 00 91 33 6e 06 33 50 07 33 50 07 33 6e 07 33     d..3n.3P.3P.3n.3
    1b27:	50 07 33 50 07 90 37 64 00 3a 64 00 3f 64 00 91     P.3P..7d.:d.?d..
    1b37:	33 6e 07 33 50 07 33 50 07 33 6e 07 33 50 07 33     3n.3P.3P.3n.3P.3
    1b47:	50 07 90 3a 64 00 3f 64 00 43 64 00 91 33 6e 07     P..:d.?d.Cd..3n.
    1b57:	33 50 07 33 6e 07 33 6e 07 90 41 64 00 3e 64 00     3P.3n.3n..Ad.>d.
    1b67:	3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07     :d...n..P..P..n.
    1b77:	2e 50 07 2e 50 06 90 35 64 00 3a 64 00 3e 64 00     .P..P..5d.:d.>d.
    1b87:	91 2e 6e 07 2e 50 07 2e 50 07 2e 6e 07 2e 50 07     ..n..P..P..n..P.
    1b97:	2e 50 07 90 3a 64 00 3e 64 00 41 64 00 91 2e 6e     .P..:d.>d.Ad...n
    1ba7:	07 2e 50 07 2e 6e 07 2e 6e 07 90 37 64 00 3c 64     ..P..n..n..7d.<d
    1bb7:	00 3f 64 00 91 30 6e 07 30 50 07 30 50 07 30 6e     .?d..0n.0P.0P.0n
    1bc7:	07 30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07     .0P.0P.0n.0P.0P.
    1bd7:	30 6e 06 30 50 07 30 50 07 30 6e 07 30 50 07 2e     0n.0P.0P.0n.0P..
    1be7:	6e 0e 30 6e 07 30 50 07 30 50 07 30 6e 07 30 50     n.0n.0P.0P.0n.0P
    1bf7:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1c07:	30 50 07 30 50 07 30 6e 07 30 50 07 2e 6e 0d 90     0P.0P.0n.0P..n..
    1c17:	33 64 00 37 64 00 3c 64 00 91 30 6e 07 30 50 07     3d.7d.<d..0n.0P.
    1c27:	30 50 07 90 32 64 00 37 64 00 3a 64 00 91 30 6e     0P..2d.7d.:d..0n
    1c37:	07 30 50 07 30 50 07 90 33 64 00 37 64 00 3c 64     .0P.0P..3d.7d.<d
    1c47:	00 91 30 6e 07 30 50 07 30 50 07 90 37 64 00 3a     ..0n.0P.0P..7d.:
    1c57:	64 00 3e 64 00 91 30 6e 07 30 50 07 30 50 07 90     d.>d..0n.0P.0P..
    1c67:	37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50 07     7d.<d.?d..0n.0P.
    1c77:	90 37 64 00 3a 64 00 3e 64 00 91 2e 6e 0e 90 3a     .7d.:d.>d...n..:
    1c87:	64 00 43 64 00 3f 64 00 91 33 6e 07 33 50 07 33     d.Cd.?d..3n.3P.3
    1c97:	50 07 33 6e 06 33 50 07 33 50 07 90 37 64 00 3a     P.3n.3P.3P..7d.:
    1ca7:	64 00 3f 64 00 91 33 6e 07 33 50 07 33 50 07 33     d.?d..3n.3P.3P.3
    1cb7:	6e 07 33 50 07 33 50 07 90 3a 64 00 3f 64 00 43     n.3P.3P..:d.?d.C
    1cc7:	64 00 91 33 6e 07 33 50 07 32 6e 0e 90 41 64 00     d..3n.3P.2n..Ad.
    1cd7:	3e 64 00 3a 64 00 91 2e 6e 07 2e 50 07 2e 50 07     >d.:d...n..P..P.
    1ce7:	2e 6e 07 2e 50 07 2e 50 07 90 35 64 00 3a 64 00     .n..P..P..5d.:d.
    1cf7:	3e 64 00 91 2e 6e 07 2e 50 06 2e 50 07 2e 6e 07     >d...n..P..P..n.
    1d07:	2e 50 07 2e 50 07 90 3a 64 00 3e 64 00 41 64 00     .P..P..:d.>d.Ad.
    1d17:	91 2e 6e 05 ff 06 01 45 02 91 2e 50 07 2c 6e 0e     ..n....E...P.,n.
    1d27:	90 37 64 00 3c 64 00 3f 64 00 91 30 6e 07 30 50     .7d.<d.?d..0n.0P
    1d37:	07 30 50 07 30 6e 07 30 50 07 30 50 07 30 6e 07     .0P.0n.0P.0P.0n.
    1d47:	30 50 07 30 50 07 30 6e 07 30 50 07 30 50 07 ff     0P.0P.0n.0P.0P..
    1d57:	2f 00                                               /.

00001d59 <my_patches>:
    1d59:	00 00 00 d0 1e 00 00 00 00 00 00 00 d0 1e 00 00     ................
    1d69:	00 00 00 00 00 bf 1e 00 00 00 00 00 00 00 69 1e     ..............i.
    1d79:	00 00 00 00 00 00 00 bf 1e 00 00 00 00 00 00 00     ................
    1d89:	98 1d 00 00 00 00 00 00 00 98 1d 00 00 00 00        ...............

00001d98 <explode>:
    1d98:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
    1da8:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1db8:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
    1dc8:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1dd8:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
    1de8:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
    1df8:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
    1e08:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
    1e18:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
    1e28:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
    1e38:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
    1e48:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
    1e58:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
    1e68:	ff                                                  .

00001e69 <pshoot>:
    1e69:	00 02 03 00 07 7f 00 08 50 01 04 06 01 04 06 01     ........P.......
    1e79:	04 06 01 07 00 03 07 7f 00 08 50 01 04 06 01 04     ..........P.....
    1e89:	06 01 04 06 01 07 00 03 08 50 00 07 20 01 04 06     .........P.. ...
    1e99:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 50 00     ..............P.
    1ea9:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
    1eb9:	00 01 05 00 00 ff                                   ......

00001ebf <navigate>:
    1ebf:	00 02 04 00 07 70 00 00 d8 00 08 3c 01 05 00 00     .....p.....<....
    1ecf:	ff                                                  .

00001ed0 <instrument>:
    1ed0:	00 02 04 00 00 dd 00 ff                             ........

00001ed8 <sprites_data>:
    1ed8:	fe fe fe fe fe fe fe 87 fe fe fe fe fe fe 87 87     ................
    1ee8:	fe fe fe fe fe fe 87 87 fe fe fe fe 85 85 85 87     ................
    1ef8:	fe fe fe 85 87 87 87 85 fe fe 85 87 87 87 87 85     ................
    1f08:	fe 85 87 87 87 85 85 87 85 87 87 85 85 87 87 87     ................
    1f18:	87 87 87 fe fe fe fe fe d2 d2 eb d2 fe fe fe fe     ................
    1f28:	87 d2 fd eb fe fe fe fe 87 87 eb d2 fe fe fe fe     ................
    1f38:	85 87 87 d2 fe fe fe fe 87 85 85 87 85 fe fe fe     ................
    1f48:	87 ef 87 87 87 85 fe fe ef ff ef 87 87 85 fe fe     ................
    1f58:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    1f68:	fe fe fe fe fe fe 87 87 fe fe fe fe fe fe 87 87     ................
    1f78:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    1f88:	fe fe 85 87 87 87 87 85 fe 85 87 87 87 85 85 87     ................
    1f98:	fe fe fe fe fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    1fa8:	d2 d2 eb d2 fe fe fe fe 87 d2 fd eb fe fe fe fe     ................
    1fb8:	87 87 eb d2 fe fe fe fe 85 87 87 d2 fe fe fe fe     ................
    1fc8:	87 85 85 87 85 fe fe fe 87 ef 87 87 87 85 fe fe     ................
    1fd8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1fe8:	fe fe fe fe fe fe fe fe fe ba ba ba ba ba ba fe     ................
    1ff8:	ba bd bd bd bd bd bd ba fe ba ba ba ba ba ba fe     ................
    2008:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2018:	fe fe 46 46 46 46 46 46 fe a5 a5 a5 47 47 46 fe     ..FFFFFF....GGF.
    2028:	fe 46 46 47 47 46 3f 3f 46 46 47 47 46 fe fe fe     .FFGGF??FFGGF...
    2038:	46 46 47 47 46 fe fe fe fe 46 46 47 47 3f 3f fe     FFGGF....FFGG??.
    2048:	fe a5 a5 a5 47 fe fe fe fe fe 46 46 46 46 fe fe     ....G.....FFFF..
    2058:	fe fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe     ................
    2068:	fe ff ff fd ff ff fe fe ff ff fd f8 fd ff ff fe     ................
    2078:	fe ff ff fd ff ff fe fe fe fe ff ff ff fe fe fe     ................
    2088:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2098:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    20a8:	fe 07 07 27 07 07 fe fe 07 07 27 77 27 07 07 fe     ...'......'w'...
    20b8:	fe 07 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    20c8:	fe fe fe 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    20d8:	fe fe fe 38 fe fe fe fe fe fe 38 38 38 fe fe fe     ...8......888...
    20e8:	fe 38 38 bc 38 38 fe fe 38 38 bc be bc 38 38 fe     .88.88..88...88.
    20f8:	fe 38 38 bc 38 38 fe fe fe fe 38 38 38 fe fe fe     .88.88....888...
    2108:	fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe fe     ...8............
    2118:	fe fe fe a2 fe fe fe fe fe fe a2 a2 a2 fe fe fe     ................
    2128:	fe a2 a2 aa a2 a2 fe fe a2 a2 aa ad aa a2 a2 fe     ................
    2138:	fe a2 a2 aa a2 a2 fe fe fe fe a2 a2 a2 fe fe fe     ................
    2148:	fe fe fe a2 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2158:	fe fe fe 6e fe fe fe fe fe fe 6e 6e 6e fe fe fe     ...n......nnn...
    2168:	fe 6e 6e 6f 6e 6e fe fe 6e 6e 6f 77 6f 6e 6e fe     .nnonn..nnowonn.
    2178:	fe 6e 6e 6f 6e 6e fe fe fe fe 6e 6e 6e fe fe fe     .nnonn....nnn...
    2188:	fe fe fe 6e fe fe fe fe fe fe fe fe fe fe fe fe     ...n............
    2198:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    21d8:	85 87 87 85 fe 85 87 87 fe 85 87 85 fe 85 87 87     ................
    21e8:	fe 85 87 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    21f8:	fe fe 85 87 ad ad ad ad fe fe fe 85 a4 ad 87 87     ................
    2208:	fe fe fe fe a4 a4 85 87 fe fe fe fe a4 a4 85 87     ................
    2218:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2228:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2238:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2248:	87 87 87 85 fe fe fe fe 87 87 87 85 fe fe fe fe     ................
    2258:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2268:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2278:	ad ad ad ad ad a4 a4 a4 87 87 87 85 fe fe fe fe     ................
    2288:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    2298:	85 87 87 85 85 87 87 87 85 87 87 85 fe 85 87 87     ................
    22a8:	fe 85 87 85 fe 85 87 87 fe 85 87 87 ad ad ad ad     ................
    22b8:	fe fe 85 87 ad ad ad ad fe fe 85 87 ad ad ad ad     ................
    22c8:	fe fe fe 85 a4 ad 87 87 fe fe fe fe a4 a4 85 87     ................
    22d8:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    22e8:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    22f8:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2308:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2318:	87 ef 87 85 87 85 fe fe 87 87 87 85 87 87 85 fe     ................
    2328:	ad ad ad ad ad 87 85 fe ad ad ad ad ad ad a4 ad     ................
    2338:	ad ad ad ad ad a4 a4 a4 87 87 87 87 fe fe fe fe     ................
    2348:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    2358:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2368:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2378:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    2388:	87 87 87 87 fe fe fe fe 87 87 87 87 87 fe fe fe     ................
    2398:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23a8:	fe fe fe 27 07 fe fe fe fe fe 27 77 27 07 fe fe     ...'......'w'...
    23b8:	fe fe 07 27 07 07 fe fe fe fe fe 07 07 fe fe fe     ...'............
    23c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23d8:	fe fe a3 a0 a0 a3 fe fe fe a3 a3 a3 a3 a3 a3 fe     ................
    23e8:	a3 a3 a3 07 07 a3 a3 a3 a0 a3 07 27 27 07 a3 a0     ...........''...
    23f8:	a0 a3 07 27 27 07 a3 a0 a3 a3 a3 07 07 a3 a3 a3     ...''...........
    2408:	fe a3 a3 a3 a3 a3 a3 fe fe fe a3 a0 a0 a3 fe fe     ................
    2418:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2428:	fe fe fe eb d2 fe fe fe fe fe eb 77 eb d2 fe fe     ...........w....
    2438:	fe fe d2 eb d2 d2 fe fe fe fe fe d2 d2 fe fe fe     ................
    2448:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2458:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2468:	fe fe fe fe fe fe fe fe fe fe ff ff ff ff ff ff     ................
    2478:	fe f8 f8 f8 f8 f8 f8 fe ff ff ff ff ff ff fe fe     ................
    2488:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2498:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24a8:	fe fe fe fe fe fe fe fe fe 87 87 87 87 87 87 fe     ................
    24b8:	87 ef ef ef ef ef ef 87 fe 87 87 87 87 87 87 fe     ................
    24c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    24e8:	fe fe fe a4 a3 fe fe fe fe fe a4 a6 a4 a3 fe fe     ................
    24f8:	fe fe a3 a4 a3 a3 fe fe fe fe fe a3 a3 fe fe fe     ................
    2508:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2518:	fe fe fe fe fe fe 85 87 fe fe fe fe fe fe 85 87     ................
    2528:	fe fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87     ................
    2538:	fe fe fe fe 85 87 87 fe fe fe fe fe 85 87 87 fe     ................
    2548:	fe fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4     ................
    2558:	87 fe 85 85 fe fe fe fe 87 fe 85 85 85 fe fe fe     ................
    2568:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2578:	fe fe 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    2588:	fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe     ................
    2598:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    25a8:	fe fe fe fe fe 85 85 87 fe fe fe fe 85 87 87 87     ................
    25b8:	fe fe fe a4 87 87 87 87 fe fe fe a4 87 87 87 fe     ................
    25c8:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    25d8:	87 87 87 fe fe fe fe fe 87 87 87 87 fe fe fe fe     ................
    25e8:	87 87 87 87 fe fe fe fe 87 87 87 fe fe fe fe fe     ................
    25f8:	87 85 85 fe fe fe fe fe 85 85 85 fe fe fe fe fe     ................
    2608:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2618:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2628:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 85 fe     ................
    2638:	a4 a4 85 85 85 85 85 fe a4 a4 85 85 85 85 fe fe     ................
    2648:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2658:	87 87 87 fe fe fe fe fe fe 85 87 87 fe fe fe fe     ................
    2668:	fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe fe     ................
    2678:	fe fe 85 87 87 87 fe fe fe fe fe 85 87 87 fe fe     ................
    2688:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    2698:	fe fe fe fe fe fe fe 85 fe fe fe fe fe fe fe 85     ................
    26a8:	fe fe fe fe fe 85 85 85 fe fe fe fe 85 85 85 85     ................
    26b8:	fe fe fe a4 85 85 85 85 fe fe fe a4 85 85 85 fe     ................
    26c8:	fe fe fe a4 a4 fe fe fe fe fe fe a4 a4 a4 fe fe     ................
    26d8:	87 87 87 fe fe fe fe fe 85 87 87 85 fe fe fe fe     ................
    26e8:	85 87 87 85 fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    26f8:	85 87 87 fe fe fe fe fe 85 87 87 fe fe fe fe fe     ................
    2708:	a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe fe fe fe     ................
    2718:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 85 85     ................
    2728:	fe fe fe fe 85 85 85 85 a4 a4 85 85 85 85 a4 a4     ................
    2738:	a4 a4 85 85 85 85 a4 a4 a4 a4 85 85 85 85 a4 a4     ................
    2748:	a4 fe fe fe fe fe a4 fe fe fe fe fe fe fe fe fe     ................
    2758:	87 87 85 87 87 fe fe fe fe fe 85 87 87 87 fe fe     ................
    2768:	fe fe 85 87 87 87 fe fe 85 85 85 87 87 fe fe fe     ................
    2778:	87 87 87 87 87 fe fe fe 87 87 87 87 fe fe fe fe     ................
    2788:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2798:	fe fe fe fe fe fe fe fe fe fe 00 00 00 00 fe fe     ................
    27a8:	ad 00 0f 1f 1f 0f 00 ad ad 00 00 00 00 00 00 ad     ................
    27b8:	ad ad 00 00 00 00 ad ad ad 00 ad 00 00 ad 00 ad     ................
    27c8:	ad fe 00 00 00 00 fe ad ad fe fe fe fe fe fe ad     ................
    27d8:	fe fe 00 00 00 00 00 00 ad ad ad 1f 0f 00 00 00     ................
    27e8:	fe fe 00 00 00 00 00 fe fe fe fe 00 00 fe fe fe     ................
    27f8:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 fe fe fe     ................
    2808:	fe 00 00 00 00 00 00 fe 00 00 00 00 00 00 00 00     ................
    2818:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    2828:	a3 ff ff ff ff ff a3 fe a3 ff ff ff ff ff a3 fe     ................
    2838:	fe a3 ff ff ff a3 fe fe fe a3 ff ff ff a3 fe fe     ................
    2848:	fe fe a3 ff a3 fe fe fe fe fe a3 ff a3 fe fe fe     ................
    2858:	fe fe fe 07 07 fe fe fe fe fe 07 27 07 07 fe fe     ...........'....
    2868:	fe 07 27 77 27 07 07 fe fe 07 07 27 07 07 07 fe     ..'w'......'....
    2878:	fe fe 07 27 07 07 fe fe fe fe 07 07 07 fe fe fe     ...'............
    2888:	fe fe fe 07 07 fe fe fe fe fe fe 07 fe fe fe fe     ................
    2898:	fe fe fe 14 fe fe fe fe fe fe 14 14 14 fe fe fe     ................
    28a8:	fe 14 14 0f 14 14 fe fe 14 14 0f 06 0f 14 14 fe     ................
    28b8:	fe 14 14 0f 14 14 fe fe fe fe 14 14 14 fe fe fe     ................
    28c8:	fe fe fe 14 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    28d8:	fe fe fe 7f fe fe fe fe fe fe 7f 7f 7f fe fe fe     ................
    28e8:	fe 7f 7f 07 7f 7f fe fe 7f 7f 07 00 07 7f 7f fe     ................
    28f8:	fe 7f 7f 07 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    2908:	fe fe fe 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2918:	fe fe fe fe 38 fe fe fe fe fe fe 38 38 fe fe fe     ....8......88...
    2928:	fe fe fe 38 38 38 fe fe fe fe 38 38 bc 38 fe fe     ...888....88.8..
    2938:	fe 38 38 38 bc 38 38 fe fe 38 38 bc be bc 38 fe     .888.88..88...8.
    2948:	fe fe 38 38 bc 38 fe fe fe fe fe 38 38 fe fe fe     ..88.8.....88...
    2958:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2968:	fe fe fe fe fe 7f 7f 7f fe fe fe fe 7f 7f 7f 7f     ................
    2978:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe fe     ................
    2988:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2998:	a4 fe fe fe fe fe fe fe a4 ad fe fe ff ff a4 ad     ................
    29a8:	a4 ad f6 ff ff a4 ad f6 a4 ad f6 ff a4 ad f6 ff     ................
    29b8:	a4 ad fe fe a4 ad f6 ff a4 fe fe a4 a4 ad f6 fe     ................
    29c8:	fe fe fe a4 a4 ad f6 f6 fe fe fe fe fe fe fe fe     ................
    29d8:	fe fe fe fe fe fe fe fe f6 ff ff ff d2 fe fe fe     ................
    29e8:	ff ff ff ff d2 eb fe fe ff fe ff ff eb fd d2 fe     ................
    29f8:	fe fe fe ff d2 eb d2 d2 fe fe fe fe fe fe fe fe     ................
    2a08:	f6 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a18:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2a28:	bf 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f 7f 7f     ................
    2a38:	7f 7f 7f 7f 7f 7f 7f 7f bf 7f 7f 7f 7f 7f 7f bf     ................
    2a48:	fe 7f 7f 7f 7f 7f 7f fe fe fe bf 7f 7f bf fe fe     ................
    2a58:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a68:	fe fe fe 7f 7f fe fe fe fe fe 7f 7f 7f 7f fe fe     ................
    2a78:	fe fe 7f 7f 7f 7f fe fe fe fe fe 7f 7f fe fe fe     ................
    2a88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a98:	fe fe bf 7f 7f bf fe fe fe 7f 7f 7f 7f 7f 7f fe     ................
    2aa8:	bf 7f fe fe 7f 7f 7f bf 7f fe fe fe fe 7f 7f 7f     ................
    2ab8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe 7f bf     ................
    2ac8:	fe fe fe fe fe fe 7f fe fe fe fe fe fe bf fe fe     ................
    2ad8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ae8:	fe fe fe fe fe fe fe fe fe fe fe e3 fe fe fe fe     ................
    2af8:	fe fe fe ff fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b18:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2b28:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2b38:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2b48:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2b58:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b78:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2b88:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2b98:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2ba8:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2bb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bd8:	fe fe 00 00 00 00 fe fe fe 00 0f 1f 1f 0f 00 fe     ................
    2be8:	ad 00 00 00 00 00 00 ad ad 00 ad 00 00 ad 00 ad     ................
    2bf8:	ad ad 00 00 00 00 ad ad ad fe 00 00 00 00 fe ad     ................
    2c08:	ad fe fe fe fe fe fe ad ad fe fe fe fe fe fe ad     ................
    2c18:	fe fe fe 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    2c28:	fe 00 00 0f 0f 00 00 fe 00 00 0f 1f 1f 0f 00 00     ................
    2c38:	00 00 fe fe fe fe 00 00 00 fe fe fe fe fe fe 00     ................
    2c48:	00 fe fe fe fe fe fe 00 fe fe fe fe fe fe fe fe     ................
    2c58:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2c68:	fe fe fe fe 46 27 46 46 47 47 47 46 27 77 27 46     ....F'FFGGGF'w'F
    2c78:	fe 47 47 46 46 27 46 46 fe fe fe fe 46 46 46 a4     .GGFF'FF....FFF.
    2c88:	fe fe fe fe fe fe fe a4 fe fe fe fe fe fe fe a4     ................
    2c98:	fe fe fe 0a 0a fe fe fe fe 0a 0a 0a 0a 0a 0a fe     ................
    2ca8:	fe 0a 0a 27 27 0a 0a fe 0a 0a 27 77 77 27 0a 0a     ...''.....'ww'..
    2cb8:	0a 0a 27 77 77 27 0a 0a fe 0a 0a 27 27 0a 0a fe     ..'ww'.....''...
    2cc8:	fe 0a 0a 0a 0a 0a 0a fe fe fe fe 0a 0a fe fe fe     ................
    2cd8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ce8:	fe fe fe fe fe fe fe fe fe 07 07 07 07 07 07 fe     ................
    2cf8:	07 27 27 27 27 27 27 07 fe 07 07 07 07 07 07 fe     .''''''.........
    2d08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d18:	fe fe fe fe fe fe fe fe fe fe 07 07 fe fe fe fe     ................
    2d28:	fe 07 07 07 07 fe fe fe 07 07 27 07 07 07 07 fe     ..........'.....
    2d38:	07 27 77 27 27 07 07 07 fe 07 27 07 07 07 fe fe     .'w''.....'.....
    2d48:	fe fe 07 07 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d58:	fe a3 a4 a3 a3 a4 a3 fe a3 fe fe a4 a4 fe fe a3     ................
    2d68:	fe fe fe bc 38 fe fe fe fe fe bc be bc 38 fe fe     ....8........8..
    2d78:	fe fe 38 bc 38 38 fe fe fe fe fe 38 38 fe fe fe     ..8.88.....88...
    2d88:	a3 fe fe a4 a4 fe fe a3 fe a3 a4 a3 a3 a4 a3 fe     ................
    2d98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 7f     ................
    2da8:	fe fe fe fe fe fe 7f 7f fe fe fe fe fe fe fe 7f     ................
    2db8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dd8:	a4 fe fe fe fe fe fe fe a4 a4 fe fe fe fe fe fe     ................
    2de8:	a4 a4 ad fe fe fe fe fe a4 a4 ad ad fe fe fe fe     ................
    2df8:	a4 a4 ad ad f6 fe fe fe a4 a4 ad ad f6 f6 ff ff     ................
    2e08:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2e18:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e28:	fe fe ff ff ff ff a4 a4 fe ff ff ff ff a4 a4 a4     ................
    2e38:	ff ff ff ff ff a4 a4 a4 ff ff ff ff a4 a4 a4 ad     ................
    2e48:	ff ff ff ff a4 a4 ad ad ff ff ff a4 a4 ad ad f6     ................
    2e58:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e68:	a4 ad ad f6 f6 ff ff ff a4 ad ad f6 f6 ff ff ff     ................
    2e78:	ad ad f6 f6 ff ff ff ff ad f6 f6 ff ff ff ff ff     ................
    2e88:	f6 f6 ff ff ff ff ff ff f6 ff ff 7f 7f ff ff ff     ................
    2e98:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ea8:	d2 fe fe fe fe fe fe fe d2 d2 fe fe fe fe fe fe     ................
    2eb8:	d2 d2 d2 fe fe fe fe fe d2 d3 eb d3 fe fe fe fe     ................
    2ec8:	d2 eb fd eb d2 fe fe fe d2 d3 eb d3 d2 d2 fe fe     ................
    2ed8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    2ee8:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f fe     ................
    2ef8:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe fe 7f fe fe     ................
    2f08:	a4 a4 fe fe fe fe fe fe a4 fe fe fe fe fe fe fe     ................
    2f18:	ff ff fe a4 ad ad f6 f6 ff fe a4 a4 ad ad f6 f6     ................
    2f28:	fe fe a4 a4 ad ad f6 f6 fe a4 a4 a4 ad ad f6 f6     ................
    2f38:	fe a4 a4 a4 a4 ad ad f6 a4 a4 a4 a4 a4 a4 ad ad     ................
    2f48:	a4 a4 a4 a4 a4 a4 a4 ad a4 a4 a4 a4 a4 a4 a4 a4     ................
    2f58:	ff ff 7f 7f 7f 7f ff ff ff fe 7f 7f 7f 7f fe ff     ................
    2f68:	fe fe 7f 7f 7f fe fe fe fe fe fe 7f fe fe fe fe     ................
    2f78:	f6 fe fe fe fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    2f88:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    2f98:	d2 d2 d2 d2 d2 d2 d2 fe ff ff ff ff ff ff ff ff     ................
    2fa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fd8:	ef ff ef 87 87 85 fe fe 87 ef 87 85 87 85 fe fe     ................
    2fe8:	87 87 87 85 87 87 85 fe ad ad ad ad ad 87 85 fe     ................
    2ff8:	ad ad ad ad ad ad a4 ad ad ad ad ad ad a4 a4 a4     ................
    3008:	87 87 87 85 fe fe fe fe 87 87 85 fe fe fe fe fe     ................
    3018:	fe fe fe fe a4 a4 85 87 fe fe fe fe 85 85 87 87     ................
    3028:	fe fe fe fe 85 87 87 87 a4 a4 85 85 85 87 87 fe     ................
    3038:	a4 a4 87 87 87 87 87 fe a4 a4 87 87 87 87 fe fe     ................
    3048:	a4 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3058:	87 87 85 fe fe fe fe fe fe 85 85 85 fe fe fe fe     ................
    3068:	fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe fe     ................
    3078:	fe fe 85 85 85 85 fe fe fe fe fe 85 85 85 fe fe     ................
    3088:	fe fe fe a4 a4 a4 fe fe fe fe fe a4 a4 a4 a4 fe     ................
    3098:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe 85 85 85     ................
    30c8:	fe a4 87 87 87 87 87 87 a4 a4 87 87 87 87 87 87     ................
    30d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 87     ................
    30e8:	fe fe fe fe 85 85 85 87 fe fe fe 85 87 87 87 85     ................
    30f8:	fe fe 85 85 87 87 87 87 85 85 85 85 85 87 87 ad     ................
    3108:	87 87 87 87 ad 85 87 87 87 87 87 87 ad ad a4 a4     ................
    3118:	87 87 87 87 fe fe fe fe 87 d2 d2 eb d2 fe fe fe     ................
    3128:	87 87 d2 fd eb fe fe fe 87 87 87 eb d2 fe fe fe     ................
    3138:	85 85 87 87 d2 fe fe fe ad ad ad ad ad 87 ef fe     ................
    3148:	ad ad ad ad ad ad a4 ad a4 ad ad ad ad a4 a4 a4     ................
    3158:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 f6 ff ff     ................
    3168:	a4 a4 ad ad f6 f6 ff ff a4 a4 ad ad f6 7f 7f 7f     ................
    3178:	a4 a4 ad ad 7f 7f 7f fe a4 a4 ad fe 7f 7f 7f fe     ................
    3188:	a4 a4 fe fe fe 7f fe fe a4 fe fe fe fe fe fe fe     ................
    3198:	ff ff 7f 7f 7f 7f ff ff ff 7f 7f 7f 7f 7f 7f ff     ................
    31a8:	fe fe 7f 7f 7f 7f fe fe fe fe 7f 7f 7f fe fe fe     ................
    31b8:	f6 fe fe 7f fe fe fe fe f6 f6 fe fe fe fe fe fe     ................
    31c8:	ad f6 f6 fe fe fe fe fe ad ad f6 f6 fe fe fe fe     ................
    31d8:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe 00 00     ................
    31e8:	fe fe fe fe fe fe 00 00 fe fe fe fe 02 02 02 00     ................
    31f8:	fe fe fe 02 00 00 00 02 fe fe 02 00 00 00 00 02     ................
    3208:	fe 02 00 00 00 02 02 00 02 00 00 02 02 00 00 00     ................
    3218:	00 00 00 fe fe fe fe fe 07 07 27 07 fe fe fe fe     ..........'.....
    3228:	00 07 77 27 fe fe fe fe 00 00 27 07 fe fe fe fe     ..w'......'.....
    3238:	02 00 00 07 fe fe fe fe 00 02 02 00 02 fe fe fe     ................
    3248:	00 ad 00 00 00 02 fe fe ad ff ad 00 00 02 fe fe     ................
    3258:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    3268:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe 00 00     ................
    3278:	fe fe fe fe 02 02 02 00 fe fe fe 02 00 00 00 02     ................
    3288:	fe fe 02 00 00 00 00 02 fe 02 00 00 00 02 02 00     ................
    3298:	fe fe fe fe fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    32a8:	07 07 27 07 fe fe fe fe 00 07 77 27 fe fe fe fe     ..'.......w'....
    32b8:	00 00 27 07 fe fe fe fe 02 00 00 07 fe fe fe fe     ..'.............
    32c8:	00 02 02 00 02 fe fe fe 00 ad 00 00 00 02 fe fe     ................
    32d8:	02 00 00 02 fe 02 00 00 fe 02 00 02 fe 02 00 00     ................
    32e8:	fe 02 00 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    32f8:	fe fe 02 00 05 05 05 05 fe fe fe 02 00 05 00 00     ................
    3308:	fe fe fe fe 00 00 02 00 fe fe fe fe 00 00 02 00     ................
    3318:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3328:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3338:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3348:	00 00 00 02 fe fe fe fe 00 00 00 02 fe fe fe fe     ................
    3358:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3368:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3378:	05 05 05 05 05 00 00 00 00 00 00 02 fe fe fe fe     ................
    3388:	00 00 00 02 fe fe fe fe 00 00 02 fe fe fe fe fe     ................
    3398:	02 00 00 02 02 00 00 00 02 00 00 02 fe 02 00 00     ................
    33a8:	fe 02 00 02 fe 02 00 00 fe 02 00 00 05 05 05 05     ................
    33b8:	fe fe 02 00 05 05 05 05 fe fe 02 00 05 05 05 05     ................
    33c8:	fe fe fe 02 00 05 00 00 fe fe fe fe 00 00 02 00     ................
    33d8:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    33e8:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    33f8:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3408:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3418:	00 ad 00 02 00 02 fe fe 00 00 00 02 00 00 02 fe     ................
    3428:	05 05 05 05 05 00 02 fe 05 05 05 05 05 05 00 05     ................
    3438:	05 05 05 05 05 00 00 00 00 00 00 00 fe fe fe fe     ................
    3448:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3458:	ad ff ad 00 00 02 fe fe 00 ad 00 02 00 02 fe fe     ................
    3468:	00 00 00 02 00 00 02 fe 05 05 05 05 05 00 02 fe     ................
    3478:	05 05 05 05 05 05 00 05 05 05 05 05 05 00 00 00     ................
    3488:	00 00 00 00 fe fe fe fe 00 00 00 00 00 fe fe fe     ................
    3498:	fe fe fe fe fe fe 02 00 fe fe fe fe fe fe 02 00     ................
    34a8:	fe fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00     ................
    34b8:	fe fe fe fe 02 00 00 fe fe fe fe fe 02 00 00 fe     ................
    34c8:	fe fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00     ................
    34d8:	00 fe 02 02 fe fe fe fe 00 fe 02 02 02 fe fe fe     ................
    34e8:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    34f8:	fe fe 02 02 02 fe fe fe fe fe 02 02 02 fe fe fe     ................
    3508:	fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe fe     ................
    3518:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3528:	fe fe fe fe fe 02 02 00 fe fe fe fe 02 00 00 00     ................
    3538:	fe fe fe 00 00 00 00 00 fe fe fe 00 00 00 00 fe     ................
    3548:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3558:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3568:	00 00 00 00 fe fe fe fe 00 00 00 fe fe fe fe fe     ................
    3578:	00 02 02 fe fe fe fe fe 02 02 02 fe fe fe fe fe     ................
    3588:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3598:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    35a8:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 02 fe     ................
    35b8:	00 00 02 02 02 02 02 fe 00 00 02 02 02 02 fe fe     ................
    35c8:	00 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35d8:	00 00 00 fe fe fe fe fe fe 02 00 00 fe fe fe fe     ................
    35e8:	fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe fe     ................
    35f8:	fe fe 02 00 00 00 fe fe fe fe fe 02 00 00 fe fe     ................
    3608:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................
    3618:	fe fe fe fe fe fe fe 02 fe fe fe fe fe fe fe 02     ................
    3628:	fe fe fe fe fe 02 02 02 fe fe fe fe 02 02 02 02     ................
    3638:	fe fe fe 00 02 02 02 02 fe fe fe 00 02 02 02 fe     ................
    3648:	fe fe fe 00 00 fe fe fe fe fe fe 00 00 00 fe fe     ................
    3658:	00 00 00 fe fe fe fe fe 02 00 00 02 fe fe fe fe     ................
    3668:	02 00 00 02 fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3678:	02 00 00 fe fe fe fe fe 02 00 00 fe fe fe fe fe     ................
    3688:	00 00 00 fe fe fe fe fe 00 00 00 00 fe fe fe fe     ................
    3698:	fe fe fe fe 00 00 02 00 fe fe fe fe 02 02 02 02     ................
    36a8:	fe fe fe fe 02 02 02 02 00 00 02 02 02 02 00 00     ................
    36b8:	00 00 02 02 02 02 00 00 00 00 02 02 02 02 00 00     ................
    36c8:	00 fe fe fe fe fe 00 fe fe fe fe fe fe fe fe fe     ................
    36d8:	00 00 02 00 00 fe fe fe fe fe 02 00 00 00 fe fe     ................
    36e8:	fe fe 02 00 00 00 fe fe 02 02 02 00 00 fe fe fe     ................
    36f8:	00 00 00 00 00 fe fe fe 00 00 00 00 fe fe fe fe     ................
    3708:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3718:	00 00 00 fe fe fe fe fe fe 00 00 00 fe fe fe fe     ................
    3728:	fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe fe     ................
    3738:	fe fe 00 00 00 00 fe fe fe fe fe 00 00 00 fe fe     ................
    3748:	fe fe fe 00 00 00 fe fe fe fe fe 00 00 00 00 fe     ................

00003758 <map_hazard_desert>:
    3758:	01 01 28                                            ..(

0000375b <map_hazard_city>:
    375b:	01 01 29                                            ..)

0000375e <map_hazard_jungle>:
    375e:	01 01 27                                            ..'

00003761 <map_hazard_fire>:
    3761:	01 01 26                                            ..&

00003764 <map_hazard_ice>:
    3764:	01 01 25                                            ..%

00003767 <map_enemy_boss_shot>:
    3767:	01 01 39                                            ..9

0000376a <map_enemy_boss_eye>:
    376a:	01 01 37                                            ..7

0000376d <map_enemy_boss_turret>:
    376d:	01 01 36                                            ..6

00003770 <map_enemy_drone>:
    3770:	01 01 35                                            ..5

00003773 <map_enemy_tank>:
    3773:	01 01 24                                            ..$

00003776 <map_enemy_ball>:
    3776:	01 01 14                                            ...

00003779 <map_enemy_spider_1>:
    3779:	01 01 34                                            ..4

0000377c <map_enemy_spider_0>:
    377c:	01 01 23                                            ..#

0000377f <map_enemy_xwing>:
    377f:	01 01 3a                                            ..:

00003782 <map_enemy_shark>:
    3782:	01 01 05                                            ...

00003785 <map_enemy_shot>:
    3785:	01 01 13                                            ...

00003788 <map_ahero_jump>:
    3788:	02 03 4e 4f 53 56 5f 60                             ..NOSV_`

00003790 <map_ahero_step_3>:
    3790:	02 03 4e 4f 53 54 5b 61                             ..NOST[a

00003798 <map_ahero_step_2>:
    3798:	02 03 4c 4d 50 55 5d 5e                             ..LMPU]^

000037a0 <map_ahero_step_1>:
    37a0:	02 03 4e 4f 53 54 5b 5c                             ..NOST[\

000037a8 <map_ahero_step_0>:
    37a8:	02 03 4c 4d 50 52 59 5a                             ..LMPRYZ

000037b0 <map_ahero_idle>:
    37b0:	02 03 4c 4d 50 51 57 58                             ..LMPQWX

000037b8 <map_hero_rplasma_shot>:
    37b8:	01 01 38                                            ..8

000037bb <map_hero_space_bomb>:
    37bb:	01 01 18                                            ...

000037be <map_hero_space_shot>:
    37be:	01 01 17                                            ...

000037c1 <map_hero_ice_shot>:
    37c1:	01 01 16                                            ...

000037c4 <map_hero_ball_shot>:
    37c4:	01 01 15                                            ...

000037c7 <map_hero_gplasma_shot>:
    37c7:	01 01 04                                            ...

000037ca <map_hero_ship_large_1>:
    37ca:	04 02 3c 3d 3e 3f 4a 41 4b 43                       ..<=>?JAKC

000037d4 <map_hero_ship_large_0>:
    37d4:	04 02 3c 3d 3e 3f 40 41 42 43                       ..<=>?@ABC

000037de <map_hero_ship_1>:
    37de:	03 01 3b 2b 2c                                      ..;+,

000037e3 <map_hero_ship_0>:
    37e3:	03 01 2a 2b 2c                                      ..*+,

000037e8 <map_hero_prone>:
    37e8:	03 01 47 48 49                                      ..GHI

000037ed <map_hero_jump>:
    37ed:	02 03 02 03 0f 12 21 22                             ......!"

000037f5 <map_hero_step_3>:
    37f5:	02 03 02 03 0f 44 45 46                             .....DEF

000037fd <map_hero_step_2>:
    37fd:	02 03 00 01 0c 11 1f 20                             ....... 

00003805 <map_hero_step_1>:
    3805:	02 03 02 03 0f 10 1d 1e                             ........

0000380d <map_hero_step_0>:
    380d:	02 03 00 01 0c 0e 1b 1c                             ........

00003815 <map_hero_idle>:
    3815:	02 03 00 01 0c 0d 19 1a                             ........

0000381d <map_emerald_4>:
    381d:	01 01 0a                                            ...

00003820 <map_emerald_3>:
    3820:	01 01 09                                            ...

00003823 <map_emerald_2>:
    3823:	01 01 08                                            ...

00003826 <map_emerald_1>:
    3826:	01 01 07                                            ...

00003829 <map_emerald_0>:
    3829:	01 01 06                                            ...

0000382c <map_explosion_2>:
    382c:	01 01 2f                                            ../

0000382f <map_explosion_1>:
    382f:	01 01 2e                                            ...

00003832 <map_explosion_0>:
    3832:	01 01 2d                                            ..-

00003835 <map_particle>:
    3835:	01 01 30                                            ..0

00003838 <map_up_arrow>:
    3838:	01 01 33                                            ..3

0000383b <map_down_arrow>:
    383b:	01 01 32                                            ..2

0000383e <map_right_arrow>:
    383e:	01 01 31                                            ..1

00003841 <map_none>:
    3841:	01 01 14                                            ...

00003844 <tiles_data>:
	...
    3884:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3894:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    38a4:	ff f8 fb f8 fb f8 f8 fd ff fb f8 f8 fb f8 f8 f8     ................
    38b4:	ff f8 f8 fb f8 f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8     ................
    38c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    38d4:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    38e4:	fd f8 fb f8 fb f8 f8 fd f8 fb f8 f8 fb f8 f8 f8     ................
    38f4:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3904:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3914:	ff ff ff fd fd ff ff ff ff fd fd fb f8 fd fd ff     ................
    3924:	fd f8 fb f8 fb f8 f8 ff f8 fb f8 f8 fb f8 f8 ff     ................
    3934:	f8 f8 f8 fb f8 f8 f8 ff f8 f8 f8 f8 f8 f8 f8 ff     ................
    3944:	fa f8 f8 f8 f8 f8 f8 f8 f8 f8 fb f8 f8 f8 fb f8     ................
    3954:	f8 f8 fb f8 fb fb f8 f8 f8 f8 f8 fb f8 f8 f8 f8     ................
    3964:	f8 f8 fb f8 fb f8 f8 f8 f8 fb f8 f8 fb f8 f8 f8     ................
    3974:	f8 f8 f8 fb f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    3984:	02 02 02 02 02 02 02 02 02 02 0b 02 02 02 0b 02     ................
    3994:	02 0b 02 0b 02 0b 02 0b 02 02 0b 02 0b 02 0b 02     ................
    39a4:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    39b4:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    39c4:	5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c     \\\\\\\\\\\\\\\\
    39d4:	02 5c 02 5c 02 5c 02 5c 02 02 0b 02 0b 02 0b 02     .\.\.\.\........
    39e4:	02 0b 02 02 02 0b 02 02 02 02 0b 02 0b 02 0b 02     ................
    39f4:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3a04:	18 28 18 28 18 28 18 28 28 18 28 18 28 18 28 18     .(.(.(.((.(.(.(.
    3a14:	28 18 28 18 28 18 28 18 28 18 0b 02 0b 02 28 18     (.(.(.(.(.....(.
    3a24:	28 0b 02 02 02 0b 02 18 02 02 0b 02 0b 02 0b 02     (...............
    3a34:	02 0b 02 0b 02 0b 02 02 02 02 0b 02 02 02 0b 02     ................
    3a44:	50 50 50 50 50 50 50 50 ad ad ad 50 ad ad ad ad     PPPPPPPP...P....
    3a54:	ad a4 ad 50 ad a4 ad ad ad ad ad 50 ad ad ad ad     ...P.......P....
    3a64:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3a74:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3a84:	a5 a5 a5 a5 a5 a5 a5 a5 a4 a4 a4 a4 a4 a4 a4 a4     ................
    3a94:	a4 a4 a4 a4 a4 a4 a4 a4 ad ad ad 50 ad ad ad ad     ...........P....
    3aa4:	50 50 50 50 50 50 50 50 ad ad ad ad ad ad ad 50     PPPPPPPP.......P
    3ab4:	ad a4 ad ad ad a4 ad 50 ad ad ad ad ad ad ad 50     .......P.......P
    3ac4:	65 65 65 65 65 65 65 65 5d 66 65 5d 65 66 66 65     eeeeeeee]fe]effe
    3ad4:	65 65 65 66 5d 65 65 5d 65 5c 65 65 65 65 65 65     eeef]ee]e\eeeeee
    3ae4:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 5c     eeeeeeeeeeeeeee\
    3af4:	5c 5c 65 65 65 5c 65 65 5c 5c 5c 5c 5c 5c 5c 5c     \\eee\ee\\\\\\\\
    3b04:	5c 1c 65 65 5d 5c 5c 65 13 13 13 14 13 65 5d 65     \.ee]\\e.....e]e
    3b14:	5c 65 13 14 65 65 1c 65 13 13 5c 13 13 65 13 65     \e..ee.e..\..e.e
    3b24:	14 14 5c 13 5d 5c 13 13 1c 13 13 5c 5c 5c 5c 5c     ..\.]\.....\\\\\
    3b34:	1c 14 5c 13 13 13 13 13 13 5c 65 5c 13 13 5c 13     ..\......\e\..\.
    3b44:	14 14 02 1d 1d 14 02 02 02 14 02 1d 14 14 02 02     ................
    3b54:	02 02 02 02 14 02 02 1d 14 14 14 02 02 1d 1d 1d     ................
    3b64:	14 14 02 02 14 14 14 14 02 02 02 02 14 14 02 02     ................
    3b74:	14 14 14 02 02 02 02 1d 14 14 14 14 14 02 14 14     ................
    3b84:	14 14 14 1d 1d 1d 1d 1d 02 02 02 02 02 02 02 14     ................
    3b94:	14 1d 1d 1d 1d 14 02 02 14 14 02 02 02 02 02 14     ................
    3ba4:	02 02 02 1d 1d 14 02 02 14 14 14 02 02 02 1d 1d     ................
    3bb4:	02 02 02 02 14 02 14 14 14 1d 1d 14 14 02 02 02     ................
    3bc4:	1d 1d 1d 14 14 14 14 14 14 14 14 02 02 02 02 02     ................
    3bd4:	02 02 02 02 14 14 14 14 1d 1d 1d 14 02 02 02 02     ................
    3be4:	02 02 02 02 02 1d 1d 02 14 14 14 02 02 02 14 14     ................
    3bf4:	02 02 02 02 14 02 02 02 14 14 1d 1d 1d 1d 14 14     ................
    3c04:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 64 80     ddddddd.ddddddd.
    3c14:	64 64 64 64 64 64 64 80 64 64 64 64 64 64 80 80     ddddddd.dddddd..
    3c24:	64 64 64 64 64 64 80 80 64 64 64 64 64 80 80 80     dddddd..ddddd...
    3c34:	64 64 64 64 80 80 80 80 64 64 80 80 80 80 80 80     dddd....dd......
    3c44:	0f 0f 02 02 02 02 0f 0f 3f 0f 02 02 02 02 0f 3f     ........?......?
    3c54:	3f 0f 0f 02 02 0f 0f 3f 2f 3f 3f 02 02 3f 3f 2f     ?......?/??..??/
    3c64:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3c74:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    3c84:	ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff a3     ................
    3c94:	a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3 a0     ................
    3ca4:	a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0 a0     ................
    3cb4:	a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0 a0     ................
    3cc4:	09 23 23 09 09 23 23 09 09 09 09 23 23 09 09 09     .##..##....##...
    3cd4:	09 06 06 06 06 06 06 09 06 06 06 06 06 06 06 06     ................
    3ce4:	09 06 06 06 06 06 06 09 09 09 06 06 06 06 09 09     ................
    3cf4:	09 06 06 77 77 06 06 09 06 06 77 02 02 77 06 06     ...ww.....w..w..
    3d04:	27 1f 27 1f 1f 1f 27 1f 1f 1f 1f 27 1f 27 1f 1f     '.'...'....'.'..
    3d14:	27 1f 27 1f 1f 2f 27 1f 1f 27 2f 1f 27 1f 1f 1f     '.'../'..'/.'...
    3d24:	1f 1f 27 1f 2f 1f 27 1f 1f 27 1f 27 1f 1f 2f 1f     ..'./.'..'.'../.
    3d34:	1f 1f 2f 1f 1f 27 1f 27 1f 1f 1f 27 1f 1f 1f 1f     ../..'.'...'....
    3d44:	d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9 d9 c9 d9 c9 c9     ................
    3d54:	d9 c9 d9 c9 c9 db d9 c9 c9 d9 db c9 d9 c9 c9 c9     ................
    3d64:	c9 c9 d9 c9 db c9 d9 c9 c9 d9 c9 d9 c9 c9 db c9     ................
    3d74:	c9 c9 db c9 c9 d9 c9 d9 c9 c9 c9 d9 c9 c9 c9 c9     ................
    3d84:	2b 29 2b 29 29 29 2b 29 29 29 29 2b 29 2b 29 29     +)+)))+))))+)+))
    3d94:	2b 29 2b 29 29 2c 2b 29 29 2b 2c 29 2b 29 29 29     +)+)),+))+,)+)))
    3da4:	29 29 2b 29 2c 29 2b 29 29 2b 29 2b 29 29 2c 29     ))+),)+))+)+)),)
    3db4:	29 29 2c 29 29 2b 29 2b 29 29 29 2b 29 29 29 29     )),))+)+)))+))))
    3dc4:	13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13 2f     ......./......./
    3dd4:	2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f 77     /...../w/...../w
    3de4:	77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77 77     w/.../www/.../ww
    3df4:	77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77 77     ww/./wwwww/./www
    3e04:	77 77 77 2f 13 2f 77 77 77 77 77 2f 13 2f 77 77     www/./wwwww/./ww
    3e14:	77 77 2f 13 13 13 2f 77 77 77 2f 13 13 13 2f 77     ww/.../www/.../w
    3e24:	77 2f 13 13 13 13 13 2f 77 2f 13 13 13 13 13 2f     w/...../w/...../
    3e34:	2f 13 13 13 13 13 13 13 2f 13 13 13 13 13 13 13     /......./.......
    3e44:	a0 a0 a0 a3 ff a3 a0 a0 a0 a0 a0 a3 ff a3 a0 a0     ................
    3e54:	a0 a0 a3 ff ff ff a3 a0 a0 a0 a3 ff ff ff a3 a0     ................
    3e64:	a0 a3 ff ff ff ff ff a3 a0 a3 ff ff ff ff ff a3     ................
    3e74:	a3 ff ff ff ff ff ff ff a3 ff ff ff ff ff ff ff     ................
    3e84:	a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4     ................
    3e94:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3ea4:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3eb4:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3ec4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ed4:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 0b 0c 0c 0c     ................
    3ee4:	0c 0c 0c 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    3ef4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3f04:	00 00 00 0a 0a 00 00 00 00 0a 0a 0a 0a 0a 0a 00     ................
    3f14:	00 0a 0a 0b 0b 0a 0a 00 0a 0a 0b 0b 0b 0b 0a 0a     ................
    3f24:	0a 0a 0b 0b 0b 0b 0a 0a 00 0a 0a 0b 0b 0a 0a 00     ................
    3f34:	00 0a 0a 0a 0a 0a 0a 00 00 00 00 0a 0a 00 00 00     ................
    3f44:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f54:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    3f64:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f74:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    3f84:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3f94:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 00 00     ................
	...
    3fc4:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    3fd4:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    3fe4:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    3ff4:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4004:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4014:	bf bf bf bf bf bf bf bf 00 00 00 00 00 00 02 02     ................
    4024:	00 00 00 02 02 02 02 02 00 00 00 02 02 02 02 02     ................
    4034:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    4044:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4054:	bf bf bf bf bf bf bf bf 02 02 00 00 00 00 00 00     ................
    4064:	02 02 02 02 02 00 00 00 02 02 02 02 02 00 00 00     ................
    4074:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
	...
    409c:	00 00 00 e3 00 00 00 00 00 00 e3 ff e3 00 00 00     ................
    40ac:	00 00 00 e3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40dc:	00 00 00 d2 00 00 00 00 00 00 d2 e3 d2 00 00 00     ................
    40ec:	00 00 00 d2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4104:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4114:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4124:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4134:	bf bf bf 00 00 00 00 00 bf bf bf 00 00 00 00 00     ................
    4144:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4154:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4164:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4174:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    4184:	00 02 02 02 02 02 02 02 00 02 02 02 02 02 02 02     ................
    4194:	02 02 02 00 02 02 02 02 02 02 02 02 00 02 02 02     ................
    41a4:	27 02 02 77 02 02 02 02 27 27 27 77 02 02 02 02     '..w....'''w....
    41b4:	00 27 27 77 77 07 07 07 00 77 77 77 77 77 27 27     .''ww....wwwww''
    41c4:	02 02 02 02 02 02 02 00 02 02 02 02 02 02 02 00     ................
    41d4:	02 02 02 02 00 02 02 02 02 02 02 00 02 02 02 02     ................
    41e4:	02 02 02 02 02 02 07 07 02 02 02 02 02 07 07 07     ................
    41f4:	07 07 07 07 07 07 07 00 27 27 27 07 07 07 07 00     ........'''.....
    4204:	77 77 77 77 77 77 77 27 00 02 77 77 77 27 27 27     wwwwwww'..www'''
    4214:	00 00 02 77 77 27 27 27 00 00 00 77 02 07 07 07     ...ww'''...w....
    4224:	00 00 00 77 02 02 02 07 00 00 00 77 02 02 02 02     ...w.......w....
    4234:	00 00 00 77 02 02 02 02 00 00 00 77 00 00 02 02     ...w.......w....
    4244:	27 27 27 07 07 07 07 00 27 27 27 07 07 07 02 00     '''.....'''.....
    4254:	27 07 07 07 07 02 00 00 07 07 07 02 02 00 00 00     '...............
    4264:	07 02 02 02 02 00 00 00 02 02 02 02 00 00 00 00     ................
    4274:	02 02 02 02 00 00 00 00 02 02 00 00 00 00 00 00     ................
    4284:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4294:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    42a4:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    42b4:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
	...
    42d0:	00 00 96 96 00 00 00 00 00 96 96 96 00 00 00 00     ................
    42e0:	96 96 96 96 00 00 00 96 96 96 96 96 00 00 96 96     ................
    42f0:	96 96 96 96 00 00 96 96 96 96 96 96 00 96 96 96     ................
    4300:	96 96 96 96 00 96 96 96 96 96 96 00 96 96 96 96     ................
    4310:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4320:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4330:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4340:	96 96 96 96 00 00 00 00 00 00 00 00 96 96 00 00     ................
    4350:	00 00 00 00 96 96 96 00 00 00 00 00 96 96 96 96     ................
    4360:	00 00 00 00 96 96 96 96 96 00 00 00 96 96 96 96     ................
    4370:	96 96 00 00 96 96 96 96 96 96 00 00 96 96 96 96     ................
    4380:	96 96 96 00 00 96 96 96 95 96 96 96 00 96 96 96     ................
    4390:	95 96 96 96 96 96 96 96 96 95 96 96 96 96 96 96     ................
    43a0:	96 95 96 96 96 96 96 96 96 96 95 96 96 96 96 96     ................
    43b0:	96 bf 95 96 95 84 96 96 96 bf 96 95 8c 83 83 8c     ................
    43c0:	96 bf 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    43d0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    43e0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    43f0:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    4400:	96 96 96 96 96 96 96 95 96 96 96 00 96 96 96 95     ................
    4410:	96 96 96 00 96 96 95 96 96 96 96 96 96 96 95 96     ................
    4420:	96 96 96 96 96 95 96 96 96 96 96 96 96 95 96 96     ................
    4430:	96 96 95 96 95 96 96 96 96 95 95 95 96 96 96 96     ................
    4440:	94 8c 8c 95 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4450:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf 00     ................
    4460:	00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf bf     ................
    4470:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    4480:	bf bf bf bf 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    44ac:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    44bc:	bf bf bf bf bf bf bf bf 00 00 00 00 00 bf bf bf     ................
    44cc:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    44dc:	00 00 00 00 00 bf bf bf 00 00 00 00 00 bf bf bf     ................
    44ec:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    44fc:	bf bf bf bf bf bf bf bf 82 82 82 82 82 bf 96 96     ................
    450c:	00 d8 d8 d8 bf ff bf 82 00 d8 d8 bf ff ff ff bf     ................
    451c:	00 d8 bf ff ff ff ff ff bf bf ff ff ff ff ff ff     ................
    452c:	00 00 bf ff ff ff ff ff 00 00 94 bf ff ff ff bf     ................
    453c:	00 00 00 8c bf ff bf d8 96 96 96 96 96 96 96 96     ................
    454c:	83 83 8c 8c 8c 8c 8c 83 d8 d8 d8 d8 d8 d8 d8 d8     ................
    455c:	bf d8 d8 d8 d8 d8 d8 d8 ff bf bf d8 d8 d8 d8 d8     ................
    456c:	bf d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    457c:	d8 d8 d8 d8 d8 d8 82 82 96 96 8c 83 83 8c 8c 8c     ................
    458c:	83 82 83 83 83 83 8c 00 82 82 82 83 83 83 83 00     ................
    459c:	82 82 82 83 83 83 83 00 d8 82 82 83 83 83 83 00     ................
    45ac:	82 82 82 83 83 83 00 00 82 82 83 83 83 95 00 00     ................
    45bc:	82 82 83 83 95 00 00 00 40 40 40 40 40 40 40 40     ........@@@@@@@@
    45cc:	40 40 40 40 40 40 40 40 c0 c0 c0 c0 c0 c0 c0 c0     @@@@@@@@........
    45dc:	c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    45ec:	e0 e0 e0 e0 e0 e0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    45fc:	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 96 95 ff d8 d8     ................
    460c:	00 00 00 00 96 ff 83 82 00 00 00 00 00 ff 96 96     ................
    461c:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 96 96     ................
    462c:	00 00 00 00 00 bf 96 96 00 00 00 00 00 bf 00 00     ................
    463c:	00 00 00 00 00 77 00 00 d8 d8 d8 82 82 82 82 82     .....w..........
    464c:	82 82 82 82 82 83 83 83 8c 8c 83 83 83 83 8c 95     ................
    465c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    466c:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    467c:	00 96 96 96 96 96 96 00 83 83 8c 95 96 00 00 00     ................
    468c:	83 8c 96 96 00 00 00 00 96 96 96 00 00 00 00 00     ................
    469c:	96 96 96 00 00 00 00 00 96 96 00 00 00 00 00 00     ................
    46ac:	96 96 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    46c4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    46d4:	f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9     ................
    46e4:	fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa     ................
    46f4:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    4704:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4714:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
    4724:	00 00 00 00 00 77 00 00 00 00 00 00 00 77 00 00     .....w.......w..
	...
    474c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    475c:	00 3f 3f 2f 3f 3f 3f 2f 00 3f 3f 3f 2f 3f 3f 2f     .??/???/.???/??/
    476c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    478c:	00 00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00     ...??/....???/..
    479c:	00 00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00     ...??/.....??/..
    47ac:	00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 3f 3f 3f 2f     ...??/...??????/
	...
    47cc:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 00 00 3f 3f 2f     ..????/..??..??/
    47dc:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    47ec:	00 00 3f 3f 2f 00 00 00 00 3f 3f 3f 3f 3f 3f 2f     ..??/....??????/
	...
    480c:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00     .??????/....??/.
    481c:	00 00 00 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f 00     ...??/......??/.
    482c:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    4850:	3f 3f 2f 00 00 00 00 3f 3f 3f 2f 00 00 00 3f 3f     ??/....???/...??
    4860:	3f 3f 2f 00 00 3f 3f 00 3f 3f 2f 00 00 3f 3f 3f     ??/..??.??/..???
    4870:	3f 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00 00 00 00     ???/....??/.....
	...
    488c:	00 3f 3f 3f 3f 3f 3f 2f 00 3f 3f 2f 00 00 00 00     .??????/.??/....
    489c:	00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 00 3f 3f 2f     .?????/......??/
    48ac:	00 3f 3f 00 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??..??/..????/.
	...
    48cc:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 00 00 00     ..????/..??/....
    48dc:	00 3f 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     .?????/..??/.??/
    48ec:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    490c:	00 3f 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     .??????/.....??/
    491c:	00 00 00 00 3f 3f 2f 00 00 00 00 3f 3f 2f 00 00     ....??/....??/..
    492c:	00 00 3f 3f 2f 00 00 00 00 00 3f 3f 2f 00 00 00     ..??/.....??/...
	...
    494c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    495c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    496c:	00 3f 3f 2f 00 3f 3f 2f 00 00 3f 3f 3f 3f 2f 00     .??/.??/..????/.
	...
    498c:	00 00 3f 3f 3f 3f 2f 00 00 3f 3f 2f 00 3f 3f 2f     ..????/..??/.??/
    499c:	00 00 3f 3f 3f 3f 3f 2f 00 00 00 00 00 3f 3f 2f     ..?????/.....??/
    49ac:	00 00 00 00 3f 3f 2f 00 00 00 3f 3f 3f 2f 00 00     ....??/...???/..
	...
    49cc:	00 00 00 ff ff e3 00 00 00 00 ff ff ff ff e3 00     ................
    49dc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    49ec:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4a0c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4a1c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4a2c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
	...
    4a4c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4a5c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4a6c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4a8c:	00 ff ff ff ff e3 00 00 00 ff ff e3 ff ff e3 00     ................
    4a9c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4aac:	00 ff ff e3 ff ff e3 00 00 ff ff ff ff e3 00 00     ................
	...
    4acc:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4adc:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4aec:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4b0c:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4b1c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4b2c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4b4c:	00 00 ff ff ff ff ff e3 00 ff ff e3 00 00 00 00     ................
    4b5c:	00 ff ff e3 00 00 00 00 00 ff ff e3 ff ff ff e3     ................
    4b6c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff ff e3     ................
	...
    4b8c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4b9c:	00 ff ff ff ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4bac:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4bcc:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4bdc:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4bec:	00 00 00 ff ff e3 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4c10:	ff ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4c20:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 ff ff 00     ................
    4c30:	00 ff ff e3 00 00 ff ff ff ff e3 00 00 00 00 00     ................
	...
    4c4c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 ff ff e3 00     ................
    4c5c:	00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00 00     ................
    4c6c:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4c8c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4c9c:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
    4cac:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    4ccc:	ff ff e3 00 00 ff ff e3 ff ff ff e3 ff ff ff e3     ................
    4cdc:	ff ff ff ff ff ff ff e3 ff ff e3 ff e3 ff ff e3     ................
    4cec:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4d0c:	00 ff ff e3 00 ff ff e3 00 ff ff ff e3 ff ff e3     ................
    4d1c:	00 ff ff ff ff ff ff e3 00 ff ff ff ff ff ff e3     ................
    4d2c:	00 ff ff e3 ff ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4d4c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d5c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4d6c:	00 ff ff e3 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4d8c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4d9c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4dac:	00 ff ff e3 00 00 00 00 00 ff ff e3 00 00 00 00     ................
	...
    4dcc:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4ddc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4dec:	00 ff ff e3 ff ff e3 00 00 00 ff ff e3 ff ff e3     ................
	...
    4e0c:	00 ff ff ff ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
    4e1c:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff e3 00     ................
    4e2c:	00 ff ff e3 ff ff e3 00 00 ff ff e3 00 ff ff e3     ................
	...
    4e4c:	00 00 ff ff ff ff e3 00 00 ff ff e3 00 00 00 00     ................
    4e5c:	00 00 ff ff ff ff e3 00 00 00 00 00 00 ff ff e3     ................
    4e6c:	00 00 00 00 00 ff ff e3 00 00 ff ff ff ff e3 00     ................
	...
    4e8c:	00 ff ff ff ff ff ff e3 00 00 00 ff ff e3 00 00     ................
    4e9c:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
    4eac:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    4ecc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4edc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4eec:	00 ff ff e3 00 ff ff e3 00 ff ff ff ff ff ff e3     ................
	...
    4f0c:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4f1c:	00 ff ff 00 00 ff ff e3 00 ff ff 00 00 ff ff e3     ................
    4f2c:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
	...
    4f4c:	ff ff e3 00 00 ff ff e3 ff ff e3 00 00 ff ff e3     ................
    4f5c:	ff ff e3 ff e3 ff ff e3 ff ff ff ff ff ff ff e3     ................
    4f6c:	ff ff ff e3 ff ff ff e3 ff ff e3 00 00 ff ff e3     ................
	...
    4f8c:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4f9c:	00 00 ff ff ff ff e3 00 00 00 ff ff ff ff e3 00     ................
    4fac:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
	...
    4fcc:	00 ff ff e3 00 ff ff e3 00 ff ff e3 00 ff ff e3     ................
    4fdc:	00 00 ff ff ff ff e3 00 00 00 00 ff ff e3 00 00     ................
    4fec:	00 00 00 ff ff e3 00 00 00 00 00 ff ff e3 00 00     ................
	...
    500c:	00 ff ff ff ff ff ff e3 00 00 00 00 ff ff e3 00     ................
    501c:	00 00 00 ff ff e3 00 00 00 00 ff ff e3 00 00 00     ................
    502c:	00 ff ff e3 00 00 00 00 00 ff ff ff ff ff ff e3     ................
	...
    5044:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5054:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5064:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5074:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5084:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5094:	ab ab ab ab ab ab ab ab ab ad ad ad ad ad ad ab     ................
    50a4:	ae ae ae ae ae ae ae ae ab ae ae ae ae ae ae ab     ................
    50b4:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    50c4:	ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac ac     ................
    50d4:	ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad ad     ................
    50e4:	ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae     ................
    50f4:	af af af af af af af af af af af af af af af af     ................
    5104:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5114:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5124:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5134:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5144:	a0 a0 a0 a0 a0 a0 a0 ff a0 a0 a0 a0 a0 a0 ff ff     ................
    5154:	a0 a0 a0 a0 a0 ff ff 02 a0 a0 a0 a0 ff ff 02 02     ................
    5164:	a0 a0 a0 ff ff 02 02 02 a0 a0 ff ff 02 02 02 02     ................
    5174:	a0 ff ff 02 02 02 02 02 ff ff 02 02 02 02 02 02     ................
    5184:	ff 02 02 02 02 02 02 02 ff 02 02 02 02 02 02 02     ................
    5194:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51a4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51b4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    51c4:	ff ff ff ff ff ff ff ff 02 02 02 02 02 02 02 02     ................
    51d4:	02 02 02 02 02 02 02 02 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51e4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    51f4:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5204:	ff ff ff ff ff ff ff ff 02 02 ff ff ff ff 02 02     ................
    5214:	02 02 02 ff ff 02 02 02 a0 a0 a0 ff a0 a0 a0 a0     ................
    5224:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5234:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    5244:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5254:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5264:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5274:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5284:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5294:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    52a4:	02 02 02 ff ff 02 02 02 02 02 ff ff ff ff 02 02     ................
    52b4:	02 ff ff ff ff ff ff 02 ff ff ff ff ff ff ff ff     ................
    52c4:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52d4:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52e4:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    52f4:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5304:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    5314:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    5324:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    5334:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    5344:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5354:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5364:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5374:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    5384:	03 03 03 03 03 03 03 1f 03 03 03 03 03 03 0f 06     ................
    5394:	03 03 03 03 03 02 02 06 03 03 03 03 02 02 02 06     ................
    53a4:	03 03 03 02 02 02 02 06 03 03 02 02 02 02 06 02     ................
    53b4:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    53c4:	1f 2f 2f 2f 2f 2f 2f 1f 06 06 06 1f 1f 1f 06 02     .//////.........
    53d4:	02 02 06 1f 06 1f 06 02 02 02 06 02 06 1f 06 02     ................
    53e4:	02 02 06 02 06 06 02 06 02 06 06 02 02 06 02 06     ................
    53f4:	02 06 02 02 02 06 02 06 06 02 02 02 02 06 02 02     ................
    5404:	1f 03 03 03 03 03 03 03 06 0f 03 03 03 03 03 03     ................
    5414:	06 02 02 03 03 03 03 03 06 02 02 02 03 03 03 03     ................
    5424:	06 06 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    5434:	02 02 02 02 02 02 02 03 06 02 02 02 02 02 02 02     ................
    5444:	03 03 03 03 03 03 03 02 03 03 03 03 03 03 02 02     ................
    5454:	03 03 03 03 03 02 02 02 03 03 03 03 02 02 02 02     ................
    5464:	03 03 03 02 02 02 02 02 03 03 02 02 02 02 02 02     ................
    5474:	03 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    5484:	02 03 03 03 03 03 03 03 02 02 03 03 03 03 03 03     ................
    5494:	02 02 02 03 03 03 03 03 02 02 02 02 03 03 03 03     ................
    54a4:	02 02 02 02 02 03 03 03 02 02 02 02 02 02 03 03     ................
    54b4:	02 02 02 02 02 02 02 03 02 02 02 02 02 02 02 02     ................
    54c4:	09 09 09 08 08 08 18 18 08 09 09 18 08 18 08 08     ................
    54d4:	09 09 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    54e4:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    54f4:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5504:	18 18 18 08 08 18 18 18 08 08 08 18 08 08 18 18     ................
    5514:	18 08 18 18 18 08 08 08 18 08 08 18 18 08 18 18     ................
    5524:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    5534:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    5544:	18 08 08 08 08 08 18 18 08 08 18 18 08 18 08 08     ................
    5554:	08 18 18 18 08 18 18 18 08 08 18 08 08 08 08 18     ................
    5564:	18 08 08 18 08 08 08 08 08 18 18 18 18 08 18 08     ................
    5574:	08 08 08 08 08 08 18 08 18 18 18 18 18 08 18 18     ................
    5584:	18 18 18 08 08 09 09 09 08 08 08 18 08 09 09 09     ................
    5594:	18 08 18 18 18 08 09 09 18 08 08 18 18 08 18 18     ................
    55a4:	18 08 18 18 18 08 08 18 08 18 08 08 08 08 08 18     ................
    55b4:	08 18 18 08 18 18 08 18 18 18 18 08 08 08 08 18     ................
    55c4:	18 08 08 08 08 08 18 18 09 08 18 18 08 18 08 08     ................
    55d4:	09 18 09 18 08 18 18 18 09 09 18 08 08 08 08 18     ................
    55e4:	09 09 09 18 08 08 08 08 09 09 09 09 09 18 18 08     ................
    55f4:	08 09 09 09 09 09 09 18 09 09 09 09 09 09 09 09     ................
    5604:	18 18 18 08 08 18 18 09 08 08 08 18 08 09 09 09     ................
    5614:	18 08 18 18 18 09 09 09 18 08 08 18 09 08 09 09     ................
    5624:	18 08 18 09 09 09 09 09 08 18 09 09 08 09 08 09     ................
    5634:	08 09 09 08 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5644:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5654:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5664:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5674:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    5684:	14 02 14 14 02 1d 14 02 14 02 02 14 02 1d 14 02     ................
    5694:	14 1d 02 14 02 1d 02 02 1d 1d 02 1d 02 1d 1d 02     ................
    56a4:	1d 02 02 1d 02 14 1d 02 1d 02 14 1d 02 02 1d 14     ................
    56b4:	1d 02 14 1d 14 02 1d 14 1d 02 14 1d 14 02 1d 14     ................
    56c4:	14 1d 14 02 1d 14 02 14 14 1d 14 02 1d 14 02 14     ................
    56d4:	1d 1d 02 14 1d 14 02 14 1d 1d 02 14 1d 02 14 1d     ................
    56e4:	02 1d 02 02 1d 02 14 1d 02 1d 14 02 1d 02 14 1d     ................
    56f4:	02 1d 14 02 1d 14 02 1d 02 1d 02 14 1d 14 02 14     ................
    5704:	1d 02 02 1d 02 02 1d 02 1d 14 02 1d 02 14 1d 02     ................
    5714:	1d 14 02 1d 02 1d 1d 02 1d 14 02 14 02 1d 14 02     ................
    5724:	1d 14 02 14 02 1d 1d 02 1d 14 02 14 02 02 1d 14     ................
    5734:	14 14 02 14 02 02 1d 1d 02 02 02 14 02 14 14 1d     ................
    5744:	02 1d 02 1d 1d 14 02 14 14 1d 02 14 1d 14 02 14     ................
    5754:	1d 1d 02 14 1d 1d 02 14 14 1d 02 14 1d 1d 02 14     ................
    5764:	02 1d 02 02 1d 14 02 14 02 1d 02 02 1d 02 02 14     ................
    5774:	02 1d 02 14 1d 02 1d 14 02 14 02 14 1d 02 1d 14     ................
    5784:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5794:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57a4:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57b4:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57c4:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    57d4:	64 64 64 64 64 64 64 2d 64 64 64 64 64 64 64 2d     ddddddd-ddddddd-
    57e4:	64 64 64 64 64 64 2d 2d 64 64 64 64 64 2d 2d 2d     dddddd--ddddd---
    57f4:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    5804:	64 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     d---------------
    5814:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5824:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5834:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5844:	2d 2d 2d 64 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ---ddddd----dddd
    5854:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5864:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5874:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5884:	64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64     dddddddddddddddd
    5894:	80 64 64 64 64 64 64 64 80 80 64 64 64 64 64 64     .ddddddd..dddddd
    58a4:	80 80 64 64 64 64 64 64 80 80 80 64 64 64 64 64     ..dddddd...ddddd
    58b4:	80 80 80 80 64 64 64 64 80 80 80 80 80 80 64 64     ....dddd......dd
    58c4:	64 64 64 64 2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d     dddd----dddd----
    58d4:	80 64 64 64 2d 2d 2d 2d 80 80 64 64 2d 2d 2d 2d     .ddd----..dd----
    58e4:	80 80 64 64 64 2d 2d 2d 80 80 80 64 64 2d 2d 2d     ..ddd---...dd---
    58f4:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5904:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5914:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5924:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5934:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    5944:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5954:	2d 2d 2d 64 64 64 64 80 2d 2d 2d 64 64 64 80 80     ---dddd.---ddd..
    5964:	2d 2d 2d 64 64 64 80 80 2d 2d 64 64 64 80 80 80     ---ddd..--ddd...
    5974:	2d 2d 64 64 80 80 80 80 2d 64 80 80 80 80 80 80     --dd....-d......
    5984:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    5994:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    59a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    59b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    59c4:	80 80 80 80 80 80 64 64 80 80 80 80 64 64 64 64     ......dd....dddd
    59d4:	80 80 80 64 64 64 64 2e 80 80 64 64 64 64 64 2e     ...dddd...ddddd.
    59e4:	80 80 64 64 64 64 2d 2e 80 64 64 64 64 2d 2e 2e     ..dddd-..dddd-..
    59f4:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5a04:	64 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2e 2d 2d     d....---......--
    5a14:	2e 2e 2e 2e 2e 2e 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ......--.....---
    5a24:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5a34:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     ....----.....---
    5a44:	2d 2d 2d 80 80 80 80 80 2d 2d 2d 2d 80 80 80 80     ---.....----....
    5a54:	2d 2d 2d 2d 64 80 80 80 2d 2d 2d 2d 64 64 80 80     ----d...----dd..
    5a64:	2d 2d 2d 2d 64 64 64 80 2d 2d 2d 2d 64 64 64 80     ----ddd.----ddd.
    5a74:	2d 2d 2d 2d 64 64 64 64 2d 2d 2d 2d 64 64 64 64     ----dddd----dddd
    5a84:	64 64 64 64 2d 2e 2e 2e 64 64 64 64 2d 2e 2e 2e     dddd-...dddd-...
    5a94:	80 64 64 64 2d 2e 2e 2e 80 80 64 64 2d 2e 2e 2e     .ddd-.....dd-...
    5aa4:	80 80 64 64 64 2e 2e 2e 80 80 80 64 64 2d 2d 2e     ..ddd......dd--.
    5ab4:	80 80 80 80 64 64 2d 2d 80 80 80 80 80 80 64 64     ....dd--......dd
    5ac4:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d 2d     .....---.....---
    5ad4:	2e 2e 2e 2e 2e 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     .....---....----
    5ae4:	2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2d 2d 2d 2d     ....----....----
    5af4:	2e 2e 2e 2e 2e 2d 2d 2d 2d 2e 2e 2e 2e 2e 2d 2d     .....----.....--
    5b04:	80 80 80 80 80 80 80 ab 80 80 80 80 80 80 ab ab     ................
    5b14:	80 80 80 80 80 ab ab ab 80 80 80 80 ab ab ab ab     ................
    5b24:	80 80 80 ab ab ab ab ab 80 80 ab ab ab ab ab ab     ................
    5b34:	80 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5b44:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5b54:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5b64:	ab ab ab 7f 7f ab ab ab ab ab ab 7f 7f ab ab ab     ................
    5b74:	ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab     ................
    5b84:	80 80 80 80 80 80 80 9b 80 80 80 80 80 80 9b 9b     ................
    5b94:	80 80 80 80 80 9b 9b 9b 80 80 80 80 9b 9b 9b 9b     ................
    5ba4:	80 80 80 9b 9b 9b 9b 9b 80 80 9b 9b 9b 9b 9b 9b     ................
    5bb4:	80 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5bc4:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5bd4:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5be4:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5bf4:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c04:	80 80 80 80 80 80 80 80 00 00 00 00 00 00 00 00     ................
	...
    5c1c:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5c2c:	80 80 a4 a4 a4 a4 80 80 80 80 a4 a4 a4 a4 80 80     ................
    5c3c:	80 80 a4 a4 a4 a4 80 80 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c4c:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c5c:	9b 9b 9b 7f 9b 9b 9b 9b 9b 9b 9b 7f 9b 9b 9b 9b     ................
    5c6c:	9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b 9b     ................
    5c7c:	9b 9b 9b 9b 9b 9b 9b 9b fd fd fd fd fd fd fd fd     ................
    5c8c:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5c9c:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5cac:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5cbc:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    5ccc:	fd fd fd fd fd fd fd fd be be be be be be be be     ................
    5cdc:	be be be be be be be be b7 b7 b7 b7 b7 b7 b7 b7     ................
    5cec:	b7 b7 b7 b7 b7 b7 b7 b7 77 77 77 77 77 77 77 77     ........wwwwwwww
    5cfc:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d0c:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d1c:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d2c:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d3c:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d4c:	77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77     wwwwwwwwwwwwwwww
    5d5c:	77 77 77 77 77 77 77 77 77 77 77 2f 2f 77 77 77     wwwwwwwwwww//www
    5d6c:	77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f 2f 77     ww////www//////w
    5d7c:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5d8c:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5d9c:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5dac:	77 77 2f 2f 2f 2f 2f 2f 77 2f 2f 2f 2f 2f 2f 2f     ww//////w///////
    5dbc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dcc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5ddc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dec:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5dfc:	2f 2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77     /////////wwwwwww
    5e0c:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5e1c:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5e2c:	2f 2f 2f 2f 2f 2f 77 77 2f 2f 2f 2f 2f 2f 2f 77     //////ww///////w
    5e3c:	2f 2f 2f 2f 2f 2f 2f 2f 77 77 77 77 77 77 77 2f     ////////wwwwwww/
    5e4c:	77 77 77 77 77 77 2f 2f 77 77 77 77 77 2f 2f 2f     wwwwww//wwwww///
    5e5c:	77 77 77 77 2f 2f 2f 2f 77 77 77 2f 2f 2f 2f 2f     wwww////www/////
    5e6c:	77 77 2f 2f 2f 3f 3f 3f 77 2f 2f 2f 3f 3f 3f 3f     ww///???w///????
    5e7c:	2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 2f 2f     ///?????////////
    5e8c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5e9c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 02 02 3f 3f 2f     /////////??..??/
    5eac:	3f 0f 0f 02 02 0f 0f 3f 3f 0f 02 02 02 02 0f 3f     ?......??......?
    5ebc:	0f 0f 02 02 02 02 0f 0f 2f 77 77 77 77 77 77 77     ......../wwwwwww
    5ecc:	2f 2f 77 77 77 77 77 77 2f 2f 2f 77 77 77 77 77     //wwwwww///wwwww
    5edc:	2f 2f 2f 2f 77 77 77 77 2f 2f 2f 2f 2f 77 77 77     ////wwww/////www
    5eec:	3f 3f 3f 2f 2f 2f 77 77 3f 3f 3f 3f 2f 2f 2f 77     ???///ww????///w
    5efc:	3f 3f 3f 3f 3f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f     ?????//////?????
    5f0c:	2f 2f 2f 2f 3f 3f 3f 3f 2f 2f 2f 2f 2f 3f 3f 3f     ////????/////???
    5f1c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f2c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f3c:	2f 2f 2f 2f 2f 2f 2f 2f 3f 3f 3f 3f 3f 2f 2f 2f     ////////?????///
    5f4c:	3f 3f 3f 3f 2f 2f 2f 2f 3f 3f 3f 2f 2f 2f 2f 2f     ????////???/////
    5f5c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f6c:	2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f     ////////////////
    5f7c:	2f 2f 2f 2f 2f 2f 2f 2f 65 65 65 65 65 65 65 65     ////////eeeeeeee
    5f8c:	5d 66 65 5d 65 66 66 5d 65 65 65 66 5d 65 65 65     ]fe]eff]eeef]eee
    5f9c:	65 5c 65 65 65 65 65 65 65 65 65 65 65 65 65 65     e\eeeeeeeeeeeeee
    5fac:	65 65 65 65 65 65 65 65 5c 5c 65 65 65 5c 65 5c     eeeeeeee\\eee\e\
    5fbc:	5c 5c 5c 5c 5c 5c 5c 5c 00 00 00 00 00 00 00 00     \\\\\\\\........
    5fcc:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5fdc:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5fec:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    5ffc:	00 00 00 00 00 00 00 a4                             ........

00006004 <map_font>:
    6004:	25 01 00 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48     %..<=>?@ABCDEFGH
    6014:	49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58     IJKLMNOPQRSTUVWX
    6024:	59 5a 5b 5c 5d 5e 5f                                YZ[\]^_

0000602b <map_atmosphere>:
    602b:	1c 02 36 36 36 36 36 36 36 36 36 36 36 36 36 36     ..66666666666666
    603b:	36 36 36 36 36 36 36 36 36 36 36 36 36 36 3a 3a     66666666666666::
    604b:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a 3a     ::::::::::::::::
    605b:	3a 3a 3a 3a 3a 3a 3a 3a 3a 3a                       ::::::::::

00006065 <map_dialog>:
    6065:	10 06 1c 1d 1d 1d 1d 1d 1d 1f 20 1d 1d 1d 1d 1d     .......... .....
    6075:	1d 1e 23 00 00 00 00 00 00 25 26 00 00 00 00 00     ..#......%&.....
    6085:	00 24 23 00 00 00 00 00 00 27 28 00 00 00 00 00     .$#......'(.....
    6095:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    60a5:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    60b5:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    60c5:	31 32                                               12

000060c7 <map_canvas>:
    60c7:	0f 09 1c 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d     ................
    60d7:	1e 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     .#.............$
    60e7:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    6103:	00 24 23 00 00 00 00 00 00 00 00 00 00 00 00 00     .$#.............
    6113:	24 23 00 00 00 00 00 00 00 00 00 00 00 00 00 24     $#.............$
    6123:	23 00 00 00 00 00 00 00 00 00 00 00 00 00 24 23     #.............$#
	...
    613f:	00 24 30 31 31 31 31 31 31 31 31 31 31 31 31 31     .$01111111111111
    614f:	32                                                  2

00006150 <map_splash>:
    6150:	0f 05 29 29 29 00 29 29 29 00 2a 2b 2c 21 29 29     ..))).))).*+,!))
    6160:	29 00 29 00 00 29 22 00 00 2d 2e 2f 00 29 00 21     ).)..)"..-./.).!
    6170:	22 29 00 21 29 00 00 00 33 34 35 00 29 29 29 00     ").!)...345.))).
    6180:	29 00 00 29 00 21 00 37 38 39 00 00 00 29 29 29     )..).!.789...)))
    6190:	29 00 29 00 00 00 3b 00 22 00 29 29 29              ).)...;.".)))

0000619d <map_tile_none>:
    619d:	01 01 00                                            ...

000061a0 <map_level_mega_tiles>:
    61a0:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    61b0:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 61 60     ``````````````a`
    61c0:	60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60     ````````````````
    61d0:	60 60 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ``..............
    61e0:	04 04 04 04 04 04 04 04 04 04 04 60 60 60 60 60     ...........`````
    61f0:	60 60 60 60 60 60 60 60 60 60 62 62 62 62 62 63     ``````````bbbbbc
    6200:	63 63 63 63 60 60 60 60 60 60 60 61 60 60 60 60     cccc```````a````
    6210:	60 60 60 62 62 62 62 62 63 63 63 63 63 04 04 04     ```bbbbbccccc...
    6220:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    6230:	04 11 11 11 11 11 63 63 63 63 63 63 63 63 63 63     ......cccccccccc
    6240:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6250:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6260:	02 02 02 63 63 04 11 11 63 63 63 63 63 63 63 63     ...cc...cccccccc
    6270:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    6280:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    6290:	02 02 63 63 63 11 04 63 63 63 63 63 63 63 63 63     ..ccc..ccccccccc
    62a0:	63 63 63 63 63 63 63 63 63 63 63 64 63 63 63 63     cccccccccccdcccc
    62b0:	65 66 67 63 63 63 63 63 63 63 63 63 63 63 02 02     efgccccccccccc..
    62c0:	02 02 63 04 04 04 04 02 04 04 04 04 63 63 63 63     ..c.........cccc
    62d0:	63 63 63 02 63 63 02 02 04 02 02 04 04 04 04 04     ccc.cc..........
    62e0:	04 04 04 04 04 63 63 63 63 63 63 63 63 63 63 02     .....cccccccccc.
    62f0:	02 02 02 02 04 04 04 04 04 04 04 04 04 04 63 63     ..............cc
    6300:	63 63 63 63 63 02 63 63 02 02 04 02 63 04 04 04     ccccc.cc....c...
    6310:	04 02 04 04 04 04 04 63 63 63 63 63 63 63 63 63     .......ccccccccc
    6320:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 02     ccccccccccccccc.
    6330:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    6340:	63 63 63 63 02 63 63 63 02 63 63 63 63 63 63 63     cccc.ccc.ccccccc
    6350:	63 63 02 63 63 63 63 04 63 63 63 63 63 02 63 63     cc.cccc.ccccc.cc
    6360:	63 63 63 63 63 63 63 02 02 02 02 02 11 11 11 11     ccccccc.........
    6370:	11 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    6380:	02 02 02 02 63 11 11 11 04 63 63 63 63 63 63 63     ....c....ccccccc
    6390:	63 63 63 63 63 63 63 63 63 02 02 02 02 02 04 11     ccccccccc.......
    63a0:	11 11 04 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    63b0:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    63c0:	63 02 02 02 02 02 67 66 68 63 63 63 63 68 67 66     c.....gfhcccchgf
    63d0:	66 67 68 63 63 63 63 69 63 63 02 02 02 02 02 63     fghccccicc.....c
    63e0:	63 63 63 63 63 63 63 02 02 63 63 63 04 04 02 02     ccccccc..ccc....
    63f0:	02 04 04 04 04 04 04 04 63 63 63 63 63 02 02 02     ........ccccc...
    6400:	63 63 04 04 04 02 63 04 04 04 04 02 04 04 04 04     cc....c.........
    6410:	04 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     .ccccccccccccccc
    6420:	63 63 63 63 02 02 02 02 02 04 63 63 63 63 63 63     cccc......cccccc
    6430:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 18 18     cccccccccccccc..
    6440:	18 18 18 63 63 63 63 63 63 63 63 63 63 63 63 63     ...ccccccccccccc
    6450:	63 63 02 63 63 63 02 04 02 02 02 04 63 63 63 63     cc.ccc......cccc
    6460:	63 63 63 63 63 63 63 63 63 63 63 02 63 63 63 63     ccccccccccc.cccc
    6470:	04 02 02 02 02 63 63 63 63 02 63 63 63 02 04 63     .....cccc.ccc..c
    6480:	63 02 04 04 63 02 04 04 04 02 04 04 04 04 02 02     c...c...........
    6490:	02 02 02 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    64a0:	04 04 04 04 04 04 04 02 02 02 02 04 04 04 04 04     ................
    64b0:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    64c0:	18 18 18 18 18 04 04 04 04 04 04 04 04 04 04 04     ................
    64d0:	04 04 04 04 04 04 04 04 04 04 02 02 02 04 04 04     ................
    64e0:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    64f0:	04 04 04 63 63 63 63 04 02 63 63 63 04 04 02 63     ...cccc..ccc...c
    6500:	63 04 04 04 02 63 04 04 04 04 02 6a 6a 6a 6a 6a     c....c.....jjjjj
    6510:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    6520:	6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a     jjjjjjjjjjjjjjjj
    6530:	6a 6a 6a 6b 6b 6b 6b 6b 6c 6c 6c 6c 6c 6c 6c 6c     jjjkkkkkllllllll
    6540:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6550:	6c 6c 6c 6c 6c 6c 6c 6d 6e 6f 6c 70 68 68 68 71     lllllllmnolphhhq
    6560:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6570:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6580:	6c 6c 6c 05 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     lll.llllllllllll
    6590:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 05     lllllllllllllll.
    65a0:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    65b0:	06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c 05 6c     .....lllllllll.l
    65c0:	6c 6c 05 05 6c 6c 05 05 05 6c 05 05 05 05 05 05     ll..ll...l......
    65d0:	05 05 05 05 13 13 13 13 05 05 13 13 13 05 05 05     ................
    65e0:	05 05 05 05 05 05 05 05 05 05 05 05 13 13 13 05     ................
    65f0:	05 13 13 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    6600:	05 05 05 05 05 6c 6c 6c 6c 6c 05 6c 6c 6c 6c 05     .....lllll.llll.
    6610:	05 6c 6c 6c 05 05 05 6c 6c 05 05 05 05 6c 6c 6c     .lll...ll....lll
    6620:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6630:	6c 6c 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     ll.....lllllllll
    6640:	6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 13 13 13     llllll..lll.....
    6650:	6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c 6c     llllllllllllllll
    6660:	6c 6c 6c 6c 13 13 13 13 13 6c 6c 6c 6c 6c 6c 6c     llll.....lllllll
    6670:	6c 6c 6c 6c 6c 6c 6c 6c 06 06 6c 6c 6c 05 05 06     llllllll..lll...
    6680:	06 06 06 06 06 06 06 6c 6c 6c 6c 6c 6c 6c 6c 6c     .......lllllllll
    6690:	6c 6c 6c 6c 6c 6c 06 06 06 06 06 6c 6c 6c 6c 06     llllll.....llll.
    66a0:	6c 6c 6c 06 05 6c 6c 06 05 05 06 06 05 05 05 05     lll..ll.........
    66b0:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66c0:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66d0:	05 06 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    66e0:	05 05 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c 6c 6c     ......lllll.llll
    66f0:	05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 13 13 6c     ..lll...ll.....l
    6700:	6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05 6c 06     lll.lll..ll...l.
    6710:	05 05 05 06 05 05 05 05 6c 6c 6c 6c 6c 06 6c 6c     ........lllll.ll
    6720:	6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05 05 05     ll..lll...ll....
    6730:	05 6c 6c 6c 6c 06 6c 6c 6c 06 05 6c 6c 06 05 05     .llll.lll..ll...
    6740:	6c 06 05 05 05 05 05 05 05 05 6c 6c 6c 6c 6c 06     l.........lllll.
    6750:	6c 6c 6c 6c 05 06 6c 6c 6c 05 05 06 6c 6c 05 05     llll..lll...ll..
    6760:	05 06 06 72 73 74 74 73 74 73 74 74 73 74 73 74     ...rsttststtstst
    6770:	74 73 74 73 74 74 73 74 73 74 74 73 74 73 74 74     tststtststtststt
    6780:	73 74 73 74 74 73 74 73 74 74 73 74 73 74 74 73     ststtststtststts
    6790:	74 73 74 74 73 74 73 74 74 75 74 73 74 74 73 74     tsttststtutsttst
    67a0:	73 74 74 73 74 73 74 74 73 74 73 74 74 73 76 73     sttststtststtsvs
    67b0:	74 74 73 78 78 78 78 78 78 78 78 78 78 78 78 78     ttsxxxxxxxxxxxxx
    67c0:	78 78 78 78 78 78 78 74 73 74 74 73 79 7a 79 79     xxxxxxxtsttsyzyy
    67d0:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c     z{|{{|yzyyz{|{{|
    67e0:	74 73 74 74 77 78 78 78 78 78 78 78 78 78 78 78     tsttwxxxxxxxxxxx
    67f0:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6800:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6810:	78 78 79 7a 79 79 7a 7b 7c 7b 7b 7c 79 7a 79 79     xxyzyyz{|{{|yzyy
    6820:	7a 7b 7c 7b 7b 7c 79 7a 79 79 7a 0d 0e 0e 0d 0e     z{|{{|yzyyz.....
    6830:	78 78 12 78 78 78 78 78 78 78 78 78 78 78 78 78     xx.xxxxxxxxxxxxx
    6840:	78 78 78 78 7b 7c 7b 7b 7c 79 7a 79 79 7a 7b 7c     xxxx{|{{|yzyyz{|
    6850:	7b 7b 7c 79 7a 79 79 7a 7b 7c 7b 7b 7c 78 78 78     {{|yzyyz{|{{|xxx
    6860:	78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78     xxxxxxxxxxxxxxxx
    6870:	78 07 07 07 07 07 79 7a 79 79 7a 7b 7c 7b 7b 7c     x.....yzyyz{|{{|
    6880:	79 7a 79 79 7a 7b 7c 7b 7b 7c 07 07 07 07 07 0d     yzyyz{|{{|......
    6890:	0e 0e 0d 0e 78 78 78 78 78 78 78 78 78 78 78 78     ....xxxxxxxxxxxx
    68a0:	78 78 78 07 07 07 07 07 78 78 78 78 78 78 07 07     xxx.....xxxxxx..
    68b0:	07 07 78 05 05 05 05 07 05 05 05 05 05 05 05 05     ..x.............
    68c0:	05 78 78 78 78 78 07 07 07 07 78 05 05 05 05 78     .xxxxx....x....x
    68d0:	05 05 05 05 07 05 05 05 05 05 78 78 78 78 78 78     ..........xxxxxx
    68e0:	78 78 78 78 78 78 78 78 78 07 78 78 78 78 05 14     xxxxxxxxx.xxxx..
    68f0:	14 14 14 78 78 78 78 78 78 78 78 78 78 78 78 78     ...xxxxxxxxxxxxx
    6900:	78 78 78 78 78 78 07 14 14 14 14 05 0d 0e 0e 0d     xxxxxx..........
    6910:	0e 78 78 78 78 78 78 78 78 78 78 07 78 78 78 78     .xxxxxxxxxx.xxxx
    6920:	05 14 14 14 14 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 7d     .....}}}}}}}}}}}
    6930:	0f 81 7d 0f 85 85 85 85 85 85 85 85 85 85 7d 7d     ..}...........}}
    6940:	7d 7d 7d 7d 7d 7d 7e 7f 81 7d 0f 82 83 85 85 85     }}}}}}~..}......
    6950:	86 87 85 85 85 89 8a 7d 7d 7d 7d 7d 80 7d 7d 7d     .......}}}}}.}}}
    6960:	7d 84 81 7d 0f 81 88 85 85 85 85 84 85 85 85 85     }..}............
    6970:	7d 7d 7d 7d 7d 7d 7d 7d 7d 7d 81 7d 0f 81 7d 85     }}}}}}}}}}.}..}.
    6980:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6990:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    69a0:	85 85 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    69b0:	87 85 85 85 89 8a 85 85 85 86 87 88 85 85 85 85     ................
    69c0:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 88     ................
    69d0:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    69e0:	85 85 8b 85 85 85 8b 60 85 85 8b 60 60 85 85 85     .......`...``...
    69f0:	89 8a 85 85 85 86 87 85 85 85 89 8a 85 85 85 86     ................
    6a00:	87 85 85 85 89 8a 84 85 85 85 85 88 85 85 85 85     ................
    6a10:	84 85 85 85 85 88 85 85 85 85 84 85 85 85 85 85     ................
    6a20:	85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85     ................
    6a30:	8c 8c 8c 85 85 8c 8c 8c 85 85 85 86 87 85 8d 85     ................
    6a40:	89 8a 8d 8e 85 85 8f 90 90 90 90 90 90 90 90 90     ................
    6a50:	90 88 85 85 85 85 84 85 85 85 85 85 85 85 85 85     ................
    6a60:	85 85 85 85 85 85 85 85 85 85 85 8c 8c 8c 8c 85     ................
    6a70:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c     ................
    6a80:	8c 8c 8c 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6a90:	85 85 85 85 90 90 90 85 85 90 90 90 85 09 09 09     ................
    6aa0:	09 85 8d 85 89 8a 8d 8e 85 85 8f 90 90 90 90 90     ................
    6ab0:	90 90 90 90 90 09 85 85 85 85 84 85 85 85 85 85     ................
    6ac0:	85 85 85 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6ad0:	85 85 85 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c     ................
    6ae0:	8c 8c 85 8c 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c     ................
    6af0:	8c 85 85 8c 8c 8c 85 85 60 60 60 09 09 09 09 09     ........```.....
    6b00:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6b10:	90 90 90 90 09 09 09 09 09 85 85 85 85 85 85 8c     ................
    6b20:	8c 85 85 85 8c 8c 90 85 85 60 60 90 85 09 09 09     .........``.....
    6b30:	09 09 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c     ................
    6b40:	8c 85 60 60 60 60 09 09 09 09 09 85 85 90 90 90     ..````..........
    6b50:	85 85 90 90 90 85 85 90 90 90 85 85 90 90 90 09     ................
    6b60:	09 09 09 09 85 09 09 09 09 85 85 8c 8c 8c 85 85     ................
    6b70:	8c 8c 8c 85 85 60 60 60 09 09 09 09 09 09 90 90     .....```........
    6b80:	90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90     ................
    6b90:	90 09 09 09 09 09 85 09 09 09 09 85 8c 8c 85 85     ................
    6ba0:	85 8c 8c 90 85 85 60 60 90 85 09 09 09 09 09 09     ......``........
    6bb0:	8c 8c 8c 8c 85 8c 8c 8c 8c 85 8c 8c 8c 8c 85 60     ...............`
    6bc0:	60 60 60 09 09 09 09 09 85 85 90 90 90 85 85 90     ```.............
    6bd0:	90 90 85 85 90 90 90 85 09 90 90 90 09 08 15 15     ................
    6be0:	15 85 85 8c 8c 8c 85 85 8c 8c 8c 85 85 8c 8c 8c     ................
    6bf0:	85 85 09 60 60 15 15 08 09 09 90 90 90 90 90 90     ...``...........
    6c00:	90 90 90 90 90 90 90 90 90 90 90 90 09 90 09 09     ................
    6c10:	09 08 15 85 85 85 85 85 85 85 85 85 85 85 85 85     ................
    6c20:	85 85 85 85 85 85 09 15 15 15 15 08 90 90 90 90     ................
    6c30:	90 90 90 90 90 09 90 90 90 09 08 90 90 09 08 08     ................
    6c40:	09 09 08 08 08 85 8c 8c 8c 8c 85 8c 8c 8c 8c 15     ................
    6c50:	15 15 15 15 08 08 08 08 08 08 08 08 08 08 85 8c     ................
    6c60:	8c 8c 8c 85 09 09 8c 8c 15 08 08 15 15 08 08 08     ................
    6c70:	08 08 08 08 08 08 08 85 85 90 90 90 85 85 09 09     ................
    6c80:	90 15 15 08 08 15 08 08 08 08 08 08 08 08 08 08     ................
    6c90:	85 85 8c 8c 8c 85 85 09 09 09 15 15 08 08 08 08     ................
    6ca0:	08 08 08 08 08 08 08 08 08 90 90 90 90 90 90 90     ................
    6cb0:	90 90 90 09 90 90 90 90 08 09 90 90 90 08 08 09     ................
    6cc0:	09 09 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6cd0:	91 91 91 91 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6ce0:	91 91 91 91 91 91 91 91 91 91 92 92 92 92 92 93     ................
    6cf0:	93 93 93 93 91 91 91 91 91 91 91 91 91 91 91 91     ................
    6d00:	91 91 91 92 92 92 92 92 93 93 94 93 93 93 93 93     ................
    6d10:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d20:	93 93 93 93 93 93 93 95 96 97 93 95 96 96 96 97     ................
    6d30:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d40:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d50:	93 93 93 93 93 94 93 93 93 93 93 93 93 93 93 94     ................
    6d60:	93 93 93 95 96 97 93 95 96 96 96 97 93 93 93 93     ................
    6d70:	93 93 98 99 9a 93 95 9b 10 9c 97 93 93 93 93 93     ................
    6d80:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6d90:	93 94 93 93 93 98 99 9a 93 95 9b 10 9c 97 93 93     ................
    6da0:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    6db0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6dc0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6dd0:	93 93 93 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    6de0:	93 93 93 93 93 93 93 93 93 0a 0a 0a 9d 0a 93 93     ................
    6df0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6e00:	93 93 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 93 93 93 93     ................
    6e10:	93 93 93 93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a     ................
    6e20:	93 93 93 0a 0a 93 93 0a 0b 0b 93 0a 0b 0b 0b 0a     ................
    6e30:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0a 0a 0a 0a 0a 0b 0b     ................
    6e40:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    6e50:	0b 0b 9d 0a 0a 93 93 0b 0b 0b 0a 93 0b 0b 0b 0b     ................
    6e60:	0a 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 93 93 93 0a 16     ................
    6e70:	93 93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b     ................
    6e80:	0a 0a 0a 0a 16 16 16 16 0a 93 93 93 93 93 93 93     ................
    6e90:	93 93 93 93 93 93 93 93 0a 0a 0a 0a 0a 93 93 93     ................
    6ea0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6eb0:	0a 0a 0a 0a 0a 0b 93 93 93 93 93 93 93 93 93 93     ................
    6ec0:	93 93 93 93 93 93 93 93 93 93 17 17 17 17 17 93     ................
    6ed0:	93 93 93 93 93 93 93 93 93 93 93 93 93 93 0a 0a     ................
    6ee0:	93 93 93 0b 0b 17 17 17 93 93 93 93 93 93 93 93     ................
    6ef0:	93 93 93 93 93 93 93 93 93 0a 0a 93 17 17 0b 0b     ................
    6f00:	17 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6f10:	93 93 93 93 0a 17 17 17 17 0b 93 93 93 93 93 93     ................
    6f20:	93 93 93 93 93 93 93 93 93 0a 93 93 93 93 0b 17     ................
    6f30:	17 17 17 93 93 93 93 93 93 93 93 93 93 93 93 93     ................
    6f40:	93 93 93 0a 93 93 93 17 0b 0a 0a 0a 0a 0a 0a 9d     ................
    6f50:	0a 0a 16 16 16 0a 93 93 93 93 93 93 93 93 93 93     ................
    6f60:	0a 0a 0a 0a 0a 93 93 93 93 93 93 93 93 93 93 93     ................
    6f70:	93 93 93 93 0a 93 93 93 93 0b 0a 0a 0a 0a 00 21     ...............!
	...
    6f8c:	00 00 21 00 00 00 00 00 00 00 00 00 00 00 00 00     ..!.............
    6f9c:	00 00 00 00 22 00 21 00 00 00 00 00 00 00 00 00     ....".!.........
    6fac:	00 00 00 21 00 00 00 00 00 00 00 22 00 00 00 21     ...!......."...!
	...
    6fc4:	00 00 00 22 00 22 00 00 00 00 00 00 00 00 00 00     ..."."..........
    6fd4:	21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 21     !..............!
    6fe4:	19 19 19 00 00 19 19 19 00 00 1a 1a 1a 00 21 00     ..............!.
    6ff4:	00 00 00 00 00 00 00 19 19 19 19 19 19 19 19 19     ................
    7004:	19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00 00 21     ...............!
    7014:	19 19 19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 00     ................
    7024:	21 00 00 00 00 00 00 00 00 19 19 9e 9e 9e 19 19     !...............
    7034:	19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00 00 00     ................
    7044:	00 21 9e 9e 9e 9e 9e 19 19 19 19 19 1a 1a 1a 1a     .!..............
    7054:	1a 00 21 00 00 00 00 00 00 00 00 9e 9e 19 19 19     ..!.............
    7064:	19 19 19 19 19 1a 1a 1a 1a 1a 00 00 00 00 00 00     ................
    7074:	00 00 00 21 19 19 19 19 19 19 19 19 19 19 1a 1a     ...!............
    7084:	1a 1a 1a 19 19 00 00 00 19 19 00 00 00 00 00 00     ................
    7094:	00 00 00 00 22 00 00 00 21 00 00 00 00 00 00 1a     ...."...!.......
    70a4:	1a 00 00 00 22 00 22 00 00 00 00 00 00 00 00 00     ....".".........
    70b4:	00 21 00 00 00 1a 1a 1a 1a 1a 00 00 00 00 1b 19     .!..............
    70c4:	19 00 00 00 19 19 22 00 00 19 19 00 00 00 1a 1a     ......".........
    70d4:	1a 1a 1a 1b 1b 1b 22 00 00 00 00 1b 1b 00 00 1b     ......".........
    70e4:	1b 1b 00 21 1b 1b 1b 00 00 1b 1b 1b 00 00 00 1b     ...!............
    70f4:	1b 1b 1b 1b 1b 00 1b 1b 1b 1b 1b 1b 1b 1b 1b 1b     ................
    7104:	1b 1b 1b 1b 1b 1b 1b 1b 1b 00 00 00 00 00 00 00     ................
    7114:	00 22 1a 1a 00 21 00 00 00 00 00 00 00 00 00 00     ."...!..........
    7124:	00 22 00 22 00 00 00 1b 1a 1a 1a 1a 1a 00 21 00     ."."..........!.
	...
    7140:	1b 1b 1b 00 00 1a 1a 1a 1a 1a 19 19 00 00 00 19     ................
    7150:	19 00 00 00 19 19 00 22 00 00 21 00 00 00 00 00     ......."..!.....
    7160:	00 00 00 00 00 1a 1a 1a 00 21 19 19 19 00 00 19     .........!......
    7170:	19 19 00 00 00 00 00 00 00 00 00 22 1a 1a 1a 1a     ..........."....
    7180:	1a 19 19 19 19 19 19 19 19 19 19 00 21 00 00 00     ............!...
    7190:	00 00 00 00 00 1a 1a 1a 1a 1a 19 19 19 19 19 19     ................
    71a0:	19 19 19 19 19 19 00 00 00 19 19 00 00 00 1a 1a     ................
    71b0:	1a 1a 1a 19 19 19 19 19 19 19 19 19 19              .............

000071bd <map_level_space_final>:
    71bd:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    71cd:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    71dd:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 92 93 94 93     ................
    71ed:	94 95 96 97 98 90 91 90 91 90 91 90 91 90 91 90     ................
    71fd:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    720d:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    721d:	91 90 91 90 91 99 9a 9b 8e 8f 8e 8f 8e 8f 8e 8f     ................
    722d:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    723d:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    724d:	8e 8f 8e 8f 8e 8f 8e 8f 8e 9c 9d 90 91 90 91 90     ................
    725d:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    726d:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    727d:	91 90 91 90 91 90 91 90 91 90 91 9e 9f a0 8e 8f     ................
    728d:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    729d:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    72ad:	8e 8f 8e 8f 8e 8f 8e 8f a1 a2 a3 a2 a3 a2 a3 a2     ................
    72bd:	a4                                                  .

000072be <map_level_space>:
    72be:	33 05 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     3...............
    72ce:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    72de:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    72ee:	8e 8f 8e 8f 8e 90 91 90 91 90 91 90 91 90 91 90     ................
    72fe:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    730e:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    731e:	91 90 91 90 91 90 91 90 8e 8f 8e 8f 8e 8f 8e 8f     ................
    732e:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    733e:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    734e:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 90 91 90 91 90     ................
    735e:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    736e:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 91 90     ................
    737e:	91 90 91 90 91 90 91 90 91 90 91 90 91 90 8e 8f     ................
    738e:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    739e:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    73ae:	8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f 8e 8f     ................
    73be:	8e                                                  .

000073bf <map_level_desert>:
    73bf:	33 05 72 72 72 72 72 72 72 72 72 72 72 72 72 72     3.rrrrrrrrrrrrrr
    73cf:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    73df:	72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72     rrrrrrrrrrrrrrrr
    73ef:	72 72 72 72 72 73 74 73 73 73 74 73 73 73 74 73     rrrrrstssstsssts
    73ff:	73 73 74 73 73 73 73 73 73 73 74 73 73 73 74 73     sstssssssstsssts
    740f:	73 73 74 73 73 73 74 73 73 73 73 73 73 73 73 73     sstssstsssssssss
    741f:	73 73 73 73 73 73 73 73 75 76 75 77 75 76 75 78     ssssssssuvuwuvux
    742f:	75 79 75 77 75 79 75 78 75 7a 75 77 75 79 75 78     uyuwuyuxuzuwuyux
    743f:	75 79 75 77 75 79 75 78 75 79 75 77 75 77 75 78     uyuwuyuxuyuwuwux
    744f:	75 7a 75 77 75 77 75 78 75 78 75 75 75 75 76 75     uzuwuwuxuxuuuuvu
    745f:	7b 75 75 75 75 75 76 7c 7d 75 75 75 75 75 76 75     {uuuuuv|}uuuuuvu
    746f:	75 75 75 75 75 75 76 75 75 75 75 75 75 75 76 75     uuuuuuvuuuuuuuvu
    747f:	79 75 75 75 75 75 76 75 76 75 75 75 75 75 7e 7e     yuuuuuvuvuuuuu~~
    748f:	7e 7e 7f 7e 7f 7e 80 81 81 82 83 84 7e 7e 85 86     ~~.~.~......~~..
    749f:	87 88 89 8a 8b 7e 7f 7e 7f 7e 8c 7e 7e 7e 80 81     .....~.~.~.~~~..
    74af:	81 82 8d 7e 7e 7e 7e 8a 8b 7e 7e 7e 7e 7e 7e 7e     ...~~~~..~~~~~~~
    74bf:	7e                                                  ~

000074c0 <map_level_city>:
    74c0:	33 05 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d     3.MNOMPMNOMPMNOM
    74d0:	50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50     PMNOMPMNOMPMNOMP
    74e0:	4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d 4e 4f 4d 50 4d     MNOMPMNOMPMNOMPM
    74f0:	4e 4f 4d 50 4d 51 52 53 51 51 51 52 53 51 51 51     NOMPMQRSQQQRSQQQ
    7500:	52 53 51 51 51 52 53 51 51 51 52 53 51 51 51 52     RSQQQRSQQQRSQQQR
    7510:	53 51 51 51 52 53 51 51 51 52 53 51 51 51 52 53     SQQQRSQQQRSQQQRS
    7520:	51 51 51 52 53 51 51 51 54 55 56 51 51 54 55 56     QQQRSQQQTUVQQTUV
    7530:	51 51 54 55 56 51 51 54 55 56 51 51 54 55 56 51     QQTUVQQTUVQQTUVQ
    7540:	51 54 55 56 51 51 54 55 56 51 51 54 55 56 51 51     QTUVQQTUVQQTUVQQ
    7550:	54 55 56 51 51 54 55 56 51 51 54 57 58 59 5a 5b     TUVQQTUVQQTWXYZ[
    7560:	57 5c 5d 5a 5b 57 58 59 5a 5b 57 5c 5d 5a 5b 57     W\]Z[WXYZ[W\]Z[W
    7570:	58 59 5e 5b 57 58 59 5a 5b 57 58 59 5a 5b 57 58     XY^[WXYZ[WXYZ[WX
    7580:	59 5a 5b 57 5c 5d 5a 5b 57 58 59 5a 5b 57 5f 60     YZ[W\]Z[WXYZ[W_`
    7590:	61 62 63 64 65 66 67 68 69 6a 6b 62 63 64 65 66     abcdefghijkbcdef
    75a0:	67 63 5f 6c 6d 6e 6f 70 71 61 62 63 5f 6c 6d 6e     gc_lmnopqabc_lmn
    75b0:	6f 70 71 61 62 63 64 65 66 67 63 5f 60 61 62 63     opqabcdefgc_`abc
    75c0:	5f                                                  _

000075c1 <map_level_forest>:
    75c1:	33 05 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c     3.;<=;<=;<=;<=;<
    75d1:	3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d     =;<=;<=;<=;<=;<=
    75e1:	3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b 3c 3d 3b     ;<=;<=;<=;<=;<=;
    75f1:	3c 3d 3b 3c 3d 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f     <=;<=>?@>?@>?@>?
    7601:	40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40     @>?@>?@>?@>?@>?@
    7611:	3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e 3f 40 3e     >?@>?@>?@>?@>?@>
    7621:	3f 40 3e 3f 40 3e 3f 40 41 42 41 41 42 41 41 42     ?@>?@>?@ABAABAAB
    7631:	41 41 42 41 41 42 41 41 42 43 41 42 41 41 42 41     AABAABAABCABAABA
    7641:	41 42 41 41 42 41 41 42 41 41 42 43 41 42 43 41     ABAABAABAABCABCA
    7651:	42 41 41 42 41 41 42 41 41 42 41 41 44 41 41 44     BAABAABAABAADAAD
    7661:	41 41 44 43 41 44 43 41 44 41 43 44 41 41 44 41     AADCADCADACDAADA
    7671:	41 44 41 41 44 41 41 44 41 41 44 41 41 44 41 41     ADAADAADAADAADAA
    7681:	44 41 41 44 41 41 44 43 41 44 41 41 44 41 45 46     DAADAADCADAADAEF
    7691:	45 45 46 45 47 46 45 47 46 45 47 46 45 45 46 48     EEFEGFEGFEGFEEFH
    76a1:	49 46 48 49 46 48 49 46 4a 4b 46 4c 4b 46 47 45     IFHIFHIFJKFLKFGE
    76b1:	46 4a 4b 46 4a 4b 46 4a 4b 46 45 45 46 45 45 46     FJKFJKFJKFEEFEEF
    76c1:	45                                                  E

000076c2 <map_level_fire>:
    76c2:	33 05 23 23 23 23 23 23 23 23 23 23 23 23 23 23     3.##############
    76d2:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    76e2:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    76f2:	23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24     #####$$$$$$$$$$$
    7702:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    7712:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    7722:	24 24 24 24 24 24 24 24 25 26 25 25 25 25 26 25     $$$$$$$$%&%%%%&%
    7732:	25 25 25 26 25 25 25 25 25 25 25 26 25 25 25 25     %%%&%%%%%%%&%%%%
    7742:	25 25 25 25 25 27 28 26 25 25 25 25 26 25 25 25     %%%%%'(&%%%%&%%%
    7752:	25 25 25 25 25 25 25 26 25 25 25 25 25 25 25 25     %%%%%%%&%%%%%%%%
    7762:	25 25 25 25 25 25 25 25 25 25 25 25 29 25 25 25     %%%%%%%%%%%%)%%%
    7772:	25 25 25 25 25 25 25 2a 2b 2c 2d 25 25 25 25 25     %%%%%%%*+,-%%%%%
    7782:	25 27 28 25 25 27 28 25 25 25 25 25 25 25 2e 2e     %'(%%'(%%%%%%%..
    7792:	2f 30 2f 30 2f 30 2f 30 31 2e 32 2e 2e 32 2e 2e     /0/0/0/01.2..2..
    77a2:	2e 32 2e 2e 2e 2f 30 2f 30 33 34 34 34 35 36 30     .2.../0/03444560
    77b2:	2f 30 31 37 2b 2c 38 39 2b 2c 3a 2e 2e 2e 2e 2e     /017+,89+,:.....
    77c2:	2e                                                  .

000077c3 <map_level_ice>:
    77c3:	33 05 00 01 00 00 00 01 00 00 00 01 00 00 01 00     3...............
    77d3:	00 01 00 00 00 00 01 00 00 00 02 02 02 02 02 02     ................
    77e3:	02 02 00 00 00 00 01 00 00 00 01 00 00 00 00 00     ................
    77f3:	00 01 00 00 00 03 03 04 03 03 03 03 04 03 03 03     ................
    7803:	04 03 04 03 03 03 04 03 03 03 03 04 03 05 05 05     ................
    7813:	05 05 05 05 05 03 03 03 03 03 03 04 03 03 03 03     ................
    7823:	04 03 03 03 03 03 04 03 06 06 06 06 06 06 06 06     ................
    7833:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    7843:	06 06 06 06 06 06 06 06 06 06 06 07 08 09 06 06     ................
    7853:	06 06 06 06 06 06 06 06 06 06 06 06 06 0a 06 06     ................
    7863:	06 06 06 0b 0c 0d 0e 06 06 06 0a 06 06 06 06 06     ................
    7873:	06 06 06 06 06 0f 06 10 06 10 06 11 12 13 06 06     ................
    7883:	06 14 06 06 0a 06 06 06 06 06 06 06 06 06 15 15     ................
    7893:	16 15 15 15 15 17 02 02 02 02 18 15 15 16 19 1a     ................
    78a3:	1b 1a 1b 1a 1c 1d 1e 1e 1f 20 21 20 21 20 22 15     ......... ! ! ".
    78b3:	15 15 15 15 15 15 15 16 15 15 15 15 15 15 15 15     ................
    78c3:	15                                                  .

000078c4 <__ctors_end>:
    78c4:	11 24       	eor	r1, r1
    78c6:	1f be       	out	0x3f, r1	; 63
    78c8:	cf ef       	ldi	r28, 0xFF	; 255
    78ca:	d0 e1       	ldi	r29, 0x10	; 16
    78cc:	de bf       	out	0x3e, r29	; 62
    78ce:	cd bf       	out	0x3d, r28	; 61

000078d0 <__do_copy_data>:
    78d0:	15 e0       	ldi	r17, 0x05	; 5
    78d2:	a0 e0       	ldi	r26, 0x00	; 0
    78d4:	b5 e0       	ldi	r27, 0x05	; 5
    78d6:	e8 e4       	ldi	r30, 0x48	; 72
    78d8:	ff ee       	ldi	r31, 0xEF	; 239
    78da:	02 c0       	rjmp	.+4      	; 0x78e0 <__do_copy_data+0x10>
    78dc:	05 90       	lpm	r0, Z+
    78de:	0d 92       	st	X+, r0
    78e0:	a0 31       	cpi	r26, 0x10	; 16
    78e2:	b1 07       	cpc	r27, r17
    78e4:	d9 f7       	brne	.-10     	; 0x78dc <__do_copy_data+0xc>

000078e6 <__do_clear_bss>:
    78e6:	10 e1       	ldi	r17, 0x10	; 16
    78e8:	a0 e1       	ldi	r26, 0x10	; 16
    78ea:	b5 e0       	ldi	r27, 0x05	; 5
    78ec:	01 c0       	rjmp	.+2      	; 0x78f0 <.do_clear_bss_start>

000078ee <.do_clear_bss_loop>:
    78ee:	1d 92       	st	X+, r1

000078f0 <.do_clear_bss_start>:
    78f0:	ac 35       	cpi	r26, 0x5C	; 92
    78f2:	b1 07       	cpc	r27, r17
    78f4:	e1 f7       	brne	.-8      	; 0x78ee <.do_clear_bss_loop>

000078f6 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    78f6:	0e 94 19 42 	call	0x8432	; 0x8432 <wdt_randomize>
#endif

    MCUSR = 0;
    78fa:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    78fc:	88 e1       	ldi	r24, 0x18	; 24
    78fe:	0f b6       	in	r0, 0x3f	; 63
    7900:	f8 94       	cli
    7902:	80 93 60 00 	sts	0x0060, r24
    7906:	10 92 60 00 	sts	0x0060, r1
    790a:	0f be       	out	0x3f, r0	; 63

0000790c <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    790c:	0e 94 db 42 	call	0x85b6	; 0x85b6 <isEepromFormatted>
    7910:	81 11       	cpse	r24, r1
    7912:	02 c0       	rjmp	.+4      	; 0x7918 <Initialize+0xc>
    7914:	0e 94 b9 42 	call	0x8572	; 0x8572 <FormatEeprom>

	cli();
    7918:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    791a:	81 e0       	ldi	r24, 0x01	; 1
    791c:	80 93 e4 0c 	sts	0x0CE4, r24
		tr4_barrel_hi=1;		
    7920:	80 93 e5 0c 	sts	0x0CE5, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7924:	80 93 e3 0c 	sts	0x0CE3, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7928:	10 92 d0 0c 	sts	0x0CD0, r1
    792c:	10 92 d6 0c 	sts	0x0CD6, r1
    7930:	10 92 dc 0c 	sts	0x0CDC, r1
    7934:	10 92 e2 0c 	sts	0x0CE2, r1
    7938:	10 92 e8 0c 	sts	0x0CE8, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    793c:	10 92 b6 0c 	sts	0x0CB6, r1
	sync_flags=0;
    7940:	10 92 b8 0c 	sts	0x0CB8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7944:	92 e1       	ldi	r25, 0x12	; 18
    7946:	90 93 b7 0c 	sts	0x0CB7, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    794a:	90 ee       	ldi	r25, 0xE0	; 224
    794c:	90 93 be 0c 	sts	0x0CBE, r25
	first_render_line=FIRST_RENDER_LINE;
    7950:	94 e1       	ldi	r25, 0x14	; 20
    7952:	90 93 bd 0c 	sts	0x0CBD, r25

	joypad1_status_hi=0;
    7956:	10 92 c2 0c 	sts	0x0CC2, r1
    795a:	10 92 c1 0c 	sts	0x0CC1, r1
	joypad2_status_hi=0;
    795e:	10 92 c6 0c 	sts	0x0CC6, r1
    7962:	10 92 c5 0c 	sts	0x0CC5, r1
	sound_enabled=1;
    7966:	80 93 cf 0c 	sts	0x0CCF, r24

	InitializeVideoMode();
    796a:	0e 94 4d 50 	call	0xa09a	; 0xa09a <InitializeVideoMode>
    796e:	86 e9       	ldi	r24, 0x96	; 150
    7970:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7972:	fc 01       	movw	r30, r24
    7974:	25 91       	lpm	r18, Z+
    7976:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7978:	f9 01       	movw	r30, r18
    797a:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    797c:	30 83       	st	Z, r19
    797e:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7980:	20 e0       	ldi	r18, 0x00	; 0
    7982:	84 3c       	cpi	r24, 0xC4	; 196
    7984:	92 07       	cpc	r25, r18
    7986:	a9 f7       	brne	.-22     	; 0x7972 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7988:	78 94       	sei
	
	DisplayLogo();
    798a:	0e 94 dc 50 	call	0xa1b8	; 0xa1b8 <DisplayLogo>
    798e:	0e 94 3d 75 	call	0xea7a	; 0xea7a <main>
    7992:	0c 94 a2 77 	jmp	0xef44	; 0xef44 <_exit>

00007996 <__bad_interrupt>:
    7996:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000799a <sub_video_mode3>:
    ;***************************************************

    sub_video_mode3:
        ;de-activate sync timer interrupts
        ;we will need to use the I flag to branch in a critical loop
        ldi ZL,(0<<OCIE1A)
    799a:	e0 e0       	ldi	r30, 0x00	; 0
        sts _SFR_MEM_ADDR(TIMSK1),ZL
    799c:	e0 93 6f 00 	sts	0x006F, r30

        ;wait cycles to align with next hsync
        WAIT r26,183+241
    79a0:	ad e8       	ldi	r26, 0x8D	; 141
    79a2:	aa 95       	dec	r26
    79a4:	f1 f7       	brne	.-4      	; 0x79a2 <sub_video_mode3+0x8>
    79a6:	00 00       	nop

        ;Refresh ramtiles indexes in VRAM
        ;This has to be done because the main
        ;program may have altered the VRAM
        ;after vsync and the rendering interrupt.
        lds r16,userRamTilesCount
    79a8:	00 91 f3 0c 	lds	r16, 0x0CF3

        ldi ZL,lo8(ram_tiles_restore);
    79ac:	e0 e5       	ldi	r30, 0x50	; 80
        ldi ZH,hi8(ram_tiles_restore);
    79ae:	fc e0       	ldi	r31, 0x0C	; 12
        ldi r18,3
    79b0:	23 e0       	ldi	r18, 0x03	; 3
        mul r16,r18
    79b2:	02 9f       	mul	r16, r18
        add ZL,r0
    79b4:	e0 0d       	add	r30, r0
        adc ZH,r1
    79b6:	f1 1d       	adc	r31, r1

        ldi YL,lo8(vram)
    79b8:	c0 e0       	ldi	r28, 0x00	; 0
        ldi YH,hi8(vram)
    79ba:	d1 e0       	ldi	r29, 0x01	; 1

        lds r18,free_tile_index
    79bc:	20 91 87 0d 	lds	r18, 0x0D87
        ldi r19,MAX_RAMTILES        ;maximum possible ramtiles
    79c0:	3c e3       	ldi	r19, 0x3C	; 60
        sub r19,r18                 ;sub free tile
    79c2:	32 1b       	sub	r19, r18
        add r19,r16                 ;add user tiles
    79c4:	30 0f       	add	r19, r16

        cp r18,r16
    79c6:	20 17       	cp	r18, r16
        breq no_ramtiles
    79c8:	51 f0       	breq	.+20     	; 0x79de <no_ramtiles>
        nop
    79ca:	00 00       	nop
	...

000079ce <upd_loop>:
        nop
upd_loop:
        ld XL,Z+    ;load vram offset of ramtile
    79ce:	a1 91       	ld	r26, Z+
        ld XH,Z+
    79d0:	b1 91       	ld	r27, Z+

        ld r17,X    ;get latest VRAM tile that may have been modified my
    79d2:	1c 91       	ld	r17, X
        st Z+,r17   ;the main program and store it in the restore buffer
    79d4:	11 93       	st	Z+, r17
        st X,r16    ;write the ramtile index back to vram
    79d6:	0c 93       	st	X, r16

        inc r16
    79d8:	03 95       	inc	r16
        cp r16,r18
    79da:	02 17       	cp	r16, r18
        brlo upd_loop ;loop is 14 cycles
    79dc:	c0 f3       	brcs	.-16     	; 0x79ce <upd_loop>

000079de <no_ramtiles>:

no_ramtiles:
        ;wait for remaining maximum possible ramtiles
1:
        ldi r17,3
    79de:	13 e0       	ldi	r17, 0x03	; 3
        dec r17
    79e0:	1a 95       	dec	r17
        brne .-4
    79e2:	f1 f7       	brne	.-4      	; 0x79e0 <no_ramtiles+0x2>
        rjmp .
    79e4:	00 c0       	rjmp	.+0      	; 0x79e6 <no_ramtiles+0x8>
        dec r19
    79e6:	3a 95       	dec	r19
        brne 1b
    79e8:	d1 f7       	brne	.-12     	; 0x79de <no_ramtiles>

        ;**********************
        ; setup scroll stuff
        ;**********************
    
        ldi YL,lo8(vram)
    79ea:	c0 e0       	ldi	r28, 0x00	; 0
        ldi YH,hi8(vram)
    79ec:	d1 e0       	ldi	r29, 0x01	; 1

        //add X scroll (coarse)
        lds r18,screen_scrollX ;ScreenScrollX
    79ee:	20 91 b2 0c 	lds	r18, 0x0CB2
        mov r25,r18
    79f2:	92 2f       	mov	r25, r18
        andi r18,0xf8   ;(x>>3) * 8 interleave
    79f4:	28 7f       	andi	r18, 0xF8	; 248
        add YL,r18
    79f6:	c2 0f       	add	r28, r18

        ;save Y wrap adress 
        movw r12,YL
    79f8:	6e 01       	movw	r12, r28
    

        //add Y scroll (coarse)
        lds r16,screen_scrollY ;ScreenScrollY
    79fa:	00 91 b3 0c 	lds	r16, 0x0CB3
        mov r22,r16
    79fe:	60 2f       	mov	r22, r16
        lsr r16
    7a00:	06 95       	lsr	r16
        lsr r16
    7a02:	06 95       	lsr	r16
        lsr r16 ;/8
    7a04:	06 95       	lsr	r16

        lds r17,screen_scrollHeight
    7a06:	10 91 b4 0c 	lds	r17, 0x0CB4
        sub r17,r16
    7a0a:	10 1b       	sub	r17, r16
        mov r15,r17 ;Y tiles to draw before wrapping
    7a0c:	f1 2e       	mov	r15, r17

        mov r17,r16
    7a0e:	10 2f       	mov	r17, r16
        lsr r16
    7a10:	06 95       	lsr	r16
        lsr r16
    7a12:	06 95       	lsr	r16
        lsr r16 ;/8
    7a14:	06 95       	lsr	r16
        add YH,r16      ; (bits 6-7)
    7a16:	d0 0f       	add	r29, r16
        andi r17,0x7
    7a18:	17 70       	andi	r17, 0x07	; 7
        add YL,r17      ;interleave (bits 3-5)
    7a1a:	c1 0f       	add	r28, r17
        andi r22,0x7    ;fine Y scrolling (bits 0-2)
    7a1c:	67 70       	andi	r22, 0x07	; 7
        ;lds r20,tile_table_lo
        ;lds r21,tile_table_hi
        ;out _SFR_IO_ADDR(GPIOR1),r20 ;store for later
        ;out _SFR_IO_ADDR(GPIOR2),r21

        lds r20,overlay_tile_table
    7a1e:	40 91 b0 0c 	lds	r20, 0x0CB0
        lds r21,overlay_tile_table+1
    7a22:	50 91 b1 0c 	lds	r21, 0x0CB1
        lds r6,tile_table_lo
    7a26:	60 90 ac 0c 	lds	r6, 0x0CAC
        lds r7,tile_table_hi
    7a2a:	70 90 ad 0c 	lds	r7, 0x0CAD
        out _SFR_IO_ADDR(GPIOR1),r6 ;store for later
    7a2e:	6a bc       	out	0x2a, r6	; 42
        out _SFR_IO_ADDR(GPIOR2),r7
    7a30:	7b bc       	out	0x2b, r7	; 43


        ;save main section value    
        movw r10,YL
    7a32:	5e 01       	movw	r10, r28
        mov r23,r22
    7a34:	76 2f       	mov	r23, r22
        mov r24,r15
    7a36:	8f 2d       	mov	r24, r15
        mov r9,r25
    7a38:	99 2e       	mov	r9, r25

        ;load values for overlay if it's activated (overlay_height>0)
        
        ;compute beginning of overlay in vram 
        lds r16,screen_scrollHeight
    7a3a:	00 91 b4 0c 	lds	r16, 0x0CB4
        mov r18,r16
    7a3e:	20 2f       	mov	r18, r16
        lsr r16
    7a40:	06 95       	lsr	r16
        lsr r16
    7a42:	06 95       	lsr	r16
        lsr r16         ;hi8
    7a44:	06 95       	lsr	r16
        inc r16         ;add 0x100 ram offset
    7a46:	03 95       	inc	r16
        andi r18,7      ;lo8
    7a48:	27 70       	andi	r18, 0x07	; 7
        
        lds r19,overlay_height  
    7a4a:	30 91 af 0c 	lds	r19, 0x0CAF
        cpi r19,0
    7a4e:	30 30       	cpi	r19, 0x00	; 0
        in r0, _SFR_IO_ADDR(SREG)
    7a50:	0f b6       	in	r0, 0x3f	; 63

        sbrs r0,SREG_Z
    7a52:	01 fe       	sbrs	r0, 1
        clr r22
    7a54:	66 27       	eor	r22, r22
        sbrs r0,SREG_Z
    7a56:	01 fe       	sbrs	r0, 1
        mov YL,r18      ;lo8(overlay_vram)
    7a58:	c2 2f       	mov	r28, r18
        sbrs r0,SREG_Z
    7a5a:	01 fe       	sbrs	r0, 1
        mov YH,r16      ;hi8(overlay_vram)
    7a5c:	d0 2f       	mov	r29, r16
        sbrs r0,SREG_Z
    7a5e:	01 fe       	sbrs	r0, 1
        ser r24
    7a60:	8f ef       	ldi	r24, 0xFF	; 255
        sbrs r0,SREG_Z
    7a62:	01 fe       	sbrs	r0, 1
        clr r9
    7a64:	99 24       	eor	r9, r9

        sbrs r0,SREG_Z
    7a66:	01 fe       	sbrs	r0, 1
        out _SFR_IO_ADDR(GPIOR1),r20
    7a68:	4a bd       	out	0x2a, r20	; 42
        sbrs r0,SREG_Z
    7a6a:	01 fe       	sbrs	r0, 1
        out _SFR_IO_ADDR(GPIOR2),r21
    7a6c:	5b bd       	out	0x2b, r21	; 43


        //ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw
        //mov r8,r16
        lds r8,render_lines_count ;total scanlines to draw
    7a6e:	80 90 be 0c 	lds	r8, 0x0CBE

00007a72 <next_tile_line>:
    ;r23 = Main section tile row
    ;r24 = Current Y tiles to draw before wrapping
    ;r25 = Main section scrollX

    next_tile_line:
        rcall hsync_pulse
    7a72:	bf d3       	rcall	.+1918   	; 0x81f2 <hsync_pulse>

        WAIT r18,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES
    7a74:	24 e0       	ldi	r18, 0x04	; 4
    7a76:	2a 95       	dec	r18
    7a78:	f1 f7       	brne	.-4      	; 0x7a76 <next_tile_line+0x4>
    7a7a:	00 00       	nop
                
        call render_tile_line
    7a7c:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <render_tile_line>

        WAIT r18,58
    7a80:	23 e1       	ldi	r18, 0x13	; 19
    7a82:	2a 95       	dec	r18
    7a84:	f1 f7       	brne	.-4      	; 0x7a82 <next_tile_line+0x10>
    7a86:	00 00       	nop

        inc r22
    7a88:	63 95       	inc	r22
        dec r8
    7a8a:	8a 94       	dec	r8
        breq text_frame_end
    7a8c:	09 f1       	breq	.+66     	; 0x7ad0 <text_frame_end>

        cpi r22,TILE_HEIGHT ;last char line? 1
    7a8e:	68 30       	cpi	r22, 0x08	; 8
        breq next_tile_row
    7a90:	29 f0       	breq	.+10     	; 0x7a9c <next_tile_row>

        ;wait to align with next_tile_row instructions (+1 cycle for the breq)
        WAIT r16,25
    7a92:	08 e0       	ldi	r16, 0x08	; 8
    7a94:	0a 95       	dec	r16
    7a96:	f1 f7       	brne	.-4      	; 0x7a94 <next_tile_line+0x22>
    7a98:	00 00       	nop
        rjmp next_tile_line
    7a9a:	eb cf       	rjmp	.-42     	; 0x7a72 <next_tile_line>

00007a9c <next_tile_row>:

    next_tile_row:

        clr r22     ;clear current char line
    7a9c:	66 27       	eor	r22, r22

        ;increment vram pointer next row
        mov r16,YL
    7a9e:	0c 2f       	mov	r16, r28
        andi r16,0x7
    7aa0:	07 70       	andi	r16, 0x07	; 7
        cpi r16,7
    7aa2:	07 30       	cpi	r16, 0x07	; 7
        breq 1f
    7aa4:	11 f0       	breq	.+4      	; 0x7aaa <next_tile_row+0xe>
        inc YL
    7aa6:	c3 95       	inc	r28
        rjmp 2f
    7aa8:	02 c0       	rjmp	.+4      	; 0x7aae <next_tile_row+0x12>
    1:
        andi YL,0xf8
    7aaa:	c8 7f       	andi	r28, 0xF8	; 248
        inc YH
    7aac:	d3 95       	inc	r29
    2:

        dec r24     ;wrap section?
    7aae:	8a 95       	dec	r24
        brne .+2
    7ab0:	09 f4       	brne	.+2      	; 0x7ab4 <next_tile_row+0x18>
        movw YL,r12
    7ab2:	e6 01       	movw	r28, r12

        dec r19
    7ab4:	3a 95       	dec	r19
        brne .+2
    7ab6:	09 f4       	brne	.+2      	; 0x7aba <next_tile_row+0x1e>
        mov r22,r23 ;section tile row
    7ab8:	67 2f       	mov	r22, r23
        brne .+2
    7aba:	09 f4       	brne	.+2      	; 0x7abe <next_tile_row+0x22>
        movw YL,r10 ;vram adress
    7abc:	e5 01       	movw	r28, r10
        brne .+2
    7abe:	09 f4       	brne	.+2      	; 0x7ac2 <next_tile_row+0x26>
        mov r24,r15 ;Y wrapping
    7ac0:	8f 2d       	mov	r24, r15
        brne .+2
    7ac2:	09 f4       	brne	.+2      	; 0x7ac6 <next_tile_row+0x2a>
        mov r9,r25  ;scrollX
    7ac4:	99 2e       	mov	r9, r25

        brne .+2
    7ac6:	09 f4       	brne	.+2      	; 0x7aca <next_tile_row+0x2e>
        out _SFR_IO_ADDR(GPIOR1),r6  ;tileset
    7ac8:	6a bc       	out	0x2a, r6	; 42
        brne .+2
    7aca:	09 f4       	brne	.+2      	; 0x7ace <next_tile_row+0x32>
        out _SFR_IO_ADDR(GPIOR2),r7  ;tilset
    7acc:	7b bc       	out	0x2b, r7	; 43

        rjmp next_tile_line
    7ace:	d1 cf       	rjmp	.-94     	; 0x7a72 <next_tile_line>

00007ad0 <text_frame_end>:

    text_frame_end:

        WAIT r18,28
    7ad0:	29 e0       	ldi	r18, 0x09	; 9
    7ad2:	2a 95       	dec	r18
    7ad4:	f1 f7       	brne	.-4      	; 0x7ad2 <text_frame_end+0x2>
    7ad6:	00 00       	nop

        rcall hsync_pulse ;145
    7ad8:	8c d3       	rcall	.+1816   	; 0x81f2 <hsync_pulse>
    
        clr r1
    7ada:	11 24       	eor	r1, r1
        call RestoreBackground
    7adc:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <RestoreBackground>

        ;set vsync flag & flip field
        lds ZL,sync_flags
    7ae0:	e0 91 b8 0c 	lds	r30, 0x0CB8
        ldi r20,SYNC_FLAG_FIELD
    7ae4:	42 e0       	ldi	r20, 0x02	; 2
        ori ZL,SYNC_FLAG_VSYNC
    7ae6:	e1 60       	ori	r30, 0x01	; 1
        eor ZL,r20
    7ae8:	e4 27       	eor	r30, r20
        sts sync_flags,ZL
    7aea:	e0 93 b8 0c 	sts	0x0CB8, r30
    
        cli 
    7aee:	f8 94       	cli

        ;re-activate sync timer interrupts
        ldi ZL,(1<<OCIE1A)
    7af0:	e2 e0       	ldi	r30, 0x02	; 2
        sts _SFR_MEM_ADDR(TIMSK1),ZL
    7af2:	e0 93 6f 00 	sts	0x006F, r30
            
        ;clear any pending timer int
        ldi ZL,(1<<OCF1A)
    7af6:	e2 e0       	ldi	r30, 0x02	; 2
        sts _SFR_MEM_ADDR(TIFR1),ZL
    7af8:	e0 93 36 00 	sts	0x0036, r30

        ret
    7afc:	08 95       	ret

00007afe <render_tile_line>:
    ; Can destroy: r0,r1,r2,r3,r4,r5,r6,r7,r13,r16,r17,r18,r19,r20,r21,Z
    ; 
    ; cycles  = 1495
    ;*************************************************
    render_tile_line:
        push YL
    7afe:	cf 93       	push	r28
        push YH
    7b00:	df 93       	push	r29
        push r23
    7b02:	7f 93       	push	r23
        push r22
    7b04:	6f 93       	push	r22
        push r19
    7b06:	3f 93       	push	r19
        push r13
    7b08:	df 92       	push	r13
        push r12
    7b0a:	cf 92       	push	r12
        push r9
    7b0c:	9f 92       	push	r9
        push r7
    7b0e:	7f 92       	push	r7
        push r6
    7b10:	6f 92       	push	r6
        ;--------------------------
        ; Rendering 
        ;---------------------------

        ;get tile row offset
        ldi r23,TILE_WIDTH ;tile width in pixels
    7b12:	78 e0       	ldi	r23, 0x08	; 8
        mul r22,r23
    7b14:	67 9f       	mul	r22, r23

        ;compute base adresses for ROM and RAM tiles
        in r16,_SFR_IO_ADDR(GPIOR1) ;tile_table_lo
    7b16:	0a b5       	in	r16, 0x2a	; 42
        in r17,_SFR_IO_ADDR(GPIOR2) ;tile_table_hi
    7b18:	1b b5       	in	r17, 0x2b	; 43
        subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7b1a:	00 50       	subi	r16, 0x00	; 0
        sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7b1c:	17 40       	sbci	r17, 0x07	; 7

        add r16,r0
    7b1e:	00 0d       	add	r16, r0
        adc r17,r1
    7b20:	11 1d       	adc	r17, r1
        movw r2,r16         ;rom tiles adress
    7b22:	18 01       	movw	r2, r16

        ldi r16,lo8(ram_tiles)
    7b24:	00 e5       	ldi	r16, 0x50	; 80
        ldi r17,hi8(ram_tiles)
    7b26:	15 e0       	ldi	r17, 0x05	; 5
        add r16,r0
    7b28:	00 0d       	add	r16, r0
        adc r17,r1
    7b2a:	11 1d       	adc	r17, r1
        movw r4,r16         ;ram tiles adress
    7b2c:	28 01       	movw	r4, r16

        ldi r19,TILE_HEIGHT*TILE_WIDTH
    7b2e:	30 e4       	ldi	r19, 0x40	; 64
        ldi r17,SCREEN_TILES_H-1    ;main loop counter
    7b30:	1b e1       	ldi	r17, 0x1B	; 27


        ;handle fine scroll offset
        ;lds r22,screenSections+scrollX
        mov r22,r9
    7b32:	69 2d       	mov	r22, r9
        andi r22,0x7        
    7b34:	67 70       	andi	r22, 0x07	; 7
        mov r14,r22 ;pixels to draw on last tile    
    7b36:	e6 2e       	mov	r14, r22
        cli         ;no trailing pixel to draw (hack, see end: )
    7b38:	f8 94       	cli
        breq .+2
    7b3a:	09 f0       	breq	.+2      	; 0x7b3e <render_tile_line+0x40>
        sei         ;some trailing pixel to draw (hack, see end: )
    7b3c:	78 94       	sei

        ;get first pixel of last tile in ROM (for ROM tiles fine scroll)
        ;and adress of next pixel
        movw ZL,YL
    7b3e:	fe 01       	movw	r30, r28
        subi ZL,-(SCREEN_TILES_H*8)
    7b40:	e0 52       	subi	r30, 0x20	; 32
        ld r18,Z
    7b42:	20 81       	ld	r18, Z
        mul r18,r19     ;tile*width*height
    7b44:	23 9f       	mul	r18, r19
        add r0,r2    ;add ROM title table address +row offset
    7b46:	02 0c       	add	r0, r2
        adc r1,r3
    7b48:	13 1c       	adc	r1, r3
        movw ZL,r0
    7b4a:	f0 01       	movw	r30, r0
        lpm r9,Z+   ;hold first pixel until end 
    7b4c:	95 90       	lpm	r9, Z+
        movw r12,ZL ;hold second pixel adress until end
    7b4e:	6f 01       	movw	r12, r30


        ;compute first tile adress
        ld r18,Y        ;load next tile # from VRAM
    7b50:	28 81       	ld	r18, Y
        subi YL,-8
    7b52:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT
    7b54:	2c 31       	cpi	r18, 0x1C	; 28
        in r16,_SFR_IO_ADDR(SREG)   ;save the carry flag for later  
    7b56:	0f b7       	in	r16, 0x3f	; 63
        mul r18,r19     ;tile*width*height
    7b58:	23 9f       	mul	r18, r19
        movw r20,r2     ;rom tiles  
    7b5a:	a1 01       	movw	r20, r2
        sbrc r16,SREG_C
    7b5c:	00 fd       	sbrc	r16, 0
        movw r20,r4     ;ram tiles
    7b5e:	a2 01       	movw	r20, r4
        add r0,r20    ;add title table address +row offset
    7b60:	04 0e       	add	r0, r20
        adc r1,r21
    7b62:	15 1e       	adc	r1, r21
        movw XL,r0
    7b64:	d0 01       	movw	r26, r0


        ;compute second tile adress
        ld r18,Y        ;load next tile # from VRAM
    7b66:	28 81       	ld	r18, Y
        subi YL,-8
    7b68:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT
    7b6a:	2c 31       	cpi	r18, 0x1C	; 28
        in r7,_SFR_IO_ADDR(SREG)    ;save the carry flag for later
    7b6c:	7f b6       	in	r7, 0x3f	; 63
        bst r7,SREG_C
    7b6e:	70 fa       	bst	r7, 0
        mul r18,r19     ;tile*width*height
    7b70:	23 9f       	mul	r18, r19
        movw r20,r2     ;rom tiles
    7b72:	a1 01       	movw	r20, r2
        brtc .+2
    7b74:	0e f4       	brtc	.+2      	; 0x7b78 <render_tile_line+0x7a>
        movw r20,r4     ;ram tiles
    7b76:	a2 01       	movw	r20, r4
        add r0,r20      ;add title table address +row offset
    7b78:	04 0e       	add	r0, r20
        adc r1,r21
    7b7a:	15 1e       	adc	r1, r21
        movw ZL,r0
    7b7c:	f0 01       	movw	r30, r0
        movw r6,ZL      ;push Z
    7b7e:	3f 01       	movw	r6, r30

00007b80 <do_fine_scroll>:


    do_fine_scroll:
        ;output 1st tile with fine scroll offset 
        clr r0
    7b80:	00 24       	eor	r0, r0
        add XL,r22  ;add fine offset
    7b82:	a6 0f       	add	r26, r22
        adc XH,r0
    7b84:	b0 1d       	adc	r27, r0

        ;compute jump offset
        ldi r23,3
    7b86:	73 e0       	ldi	r23, 0x03	; 3
        mul r22,r23 ;3 instructions
    7b88:	67 9f       	mul	r22, r23
    
        sbrs r16,SREG_C
    7b8a:	00 ff       	sbrs	r16, 0
        rjmp rom_fine_scroll
    7b8c:	22 c0       	rjmp	.+68     	; 0x7bd2 <rom_fine_scroll>

00007b8e <ram_fine_scroll>:

    /***FINE SCROLL RAM LOOP***/
    ram_fine_scroll:
        rjmp .
    7b8e:	00 c0       	rjmp	.+0      	; 0x7b90 <ram_fine_scroll+0x2>
        ldi r22,lo8(pm(ram_fine_scroll_loop))
    7b90:	6f ec       	ldi	r22, 0xCF	; 207
        ldi r23,hi8(pm(ram_fine_scroll_loop))
    7b92:	7d e3       	ldi	r23, 0x3D	; 61
        add r22,r0
    7b94:	60 0d       	add	r22, r0
        adc r23,r1
    7b96:	71 1d       	adc	r23, r1
        push r22
    7b98:	6f 93       	push	r22
        push r23    
    7b9a:	7f 93       	push	r23
        ret ;jump into ram_fine_scroll_loop
    7b9c:	08 95       	ret

00007b9e <ram_fine_scroll_loop>:
    ram_fine_scroll_loop:
        .rept 8
            ld r16,X+
            lpm
            out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        .endr
    7b9e:	0d 91       	ld	r16, X+
    7ba0:	c8 95       	lpm
    7ba2:	08 b9       	out	0x08, r16	; 8
    7ba4:	0d 91       	ld	r16, X+
    7ba6:	c8 95       	lpm
    7ba8:	08 b9       	out	0x08, r16	; 8
    7baa:	0d 91       	ld	r16, X+
    7bac:	c8 95       	lpm
    7bae:	08 b9       	out	0x08, r16	; 8
    7bb0:	0d 91       	ld	r16, X+
    7bb2:	c8 95       	lpm
    7bb4:	08 b9       	out	0x08, r16	; 8
    7bb6:	0d 91       	ld	r16, X+
    7bb8:	c8 95       	lpm
    7bba:	08 b9       	out	0x08, r16	; 8
    7bbc:	0d 91       	ld	r16, X+
    7bbe:	c8 95       	lpm
    7bc0:	08 b9       	out	0x08, r16	; 8
    7bc2:	0d 91       	ld	r16, X+
    7bc4:	c8 95       	lpm
    7bc6:	08 b9       	out	0x08, r16	; 8
    7bc8:	0d 91       	ld	r16, X+
    7bca:	c8 95       	lpm
    7bcc:	08 b9       	out	0x08, r16	; 8

        ;branch to tile #2
        brtc romloop
    7bce:	1e f5       	brtc	.+70     	; 0x7c16 <romloop>
        rjmp ramloop
    7bd0:	40 c0       	rjmp	.+128    	; 0x7c52 <ramloop>

00007bd2 <rom_fine_scroll>:

    /***FINE SCROLL ROM LOOP***/
    rom_fine_scroll:
        movw ZL,XL
    7bd2:	fd 01       	movw	r30, r26
        ldi r22,lo8(pm(rom_fine_scroll_loop))   
    7bd4:	61 ef       	ldi	r22, 0xF1	; 241
        ldi r23,hi8(pm(rom_fine_scroll_loop))
    7bd6:	7d e3       	ldi	r23, 0x3D	; 61
        add r22,r0
    7bd8:	60 0d       	add	r22, r0
        adc r23,r1
    7bda:	71 1d       	adc	r23, r1
        push r22
    7bdc:	6f 93       	push	r22
        push r23    
    7bde:	7f 93       	push	r23
        ret
    7be0:	08 95       	ret

00007be2 <rom_fine_scroll_loop>:
    rom_fine_scroll_loop:
        .rept 8
            lpm r16,Z+
            rjmp .
            out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        .endr 
    7be2:	05 91       	lpm	r16, Z+
    7be4:	00 c0       	rjmp	.+0      	; 0x7be6 <rom_fine_scroll_loop+0x4>
    7be6:	08 b9       	out	0x08, r16	; 8
    7be8:	05 91       	lpm	r16, Z+
    7bea:	00 c0       	rjmp	.+0      	; 0x7bec <rom_fine_scroll_loop+0xa>
    7bec:	08 b9       	out	0x08, r16	; 8
    7bee:	05 91       	lpm	r16, Z+
    7bf0:	00 c0       	rjmp	.+0      	; 0x7bf2 <rom_fine_scroll_loop+0x10>
    7bf2:	08 b9       	out	0x08, r16	; 8
    7bf4:	05 91       	lpm	r16, Z+
    7bf6:	00 c0       	rjmp	.+0      	; 0x7bf8 <rom_fine_scroll_loop+0x16>
    7bf8:	08 b9       	out	0x08, r16	; 8
    7bfa:	05 91       	lpm	r16, Z+
    7bfc:	00 c0       	rjmp	.+0      	; 0x7bfe <rom_fine_scroll_loop+0x1c>
    7bfe:	08 b9       	out	0x08, r16	; 8
    7c00:	05 91       	lpm	r16, Z+
    7c02:	00 c0       	rjmp	.+0      	; 0x7c04 <rom_fine_scroll_loop+0x22>
    7c04:	08 b9       	out	0x08, r16	; 8
    7c06:	05 91       	lpm	r16, Z+
    7c08:	00 c0       	rjmp	.+0      	; 0x7c0a <rom_fine_scroll_loop+0x28>
    7c0a:	08 b9       	out	0x08, r16	; 8
    7c0c:	05 91       	lpm	r16, Z+
    7c0e:	00 c0       	rjmp	.+0      	; 0x7c10 <rom_fine_scroll_loop+0x2e>
    7c10:	08 b9       	out	0x08, r16	; 8
    
        movw ZL,r6      ;restore Z for tile #2
    7c12:	f3 01       	movw	r30, r6

        ;branch to tile #2
        brts ramloop
    7c14:	f6 f0       	brts	.+60     	; 0x7c52 <ramloop>

00007c16 <romloop>:

    
    romloop:
        lpm r16,Z+
    7c16:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7c18:	08 b9       	out	0x08, r16	; 8
        ld r18,Y     ;load next tile # from VRAM
    7c1a:	28 81       	ld	r18, Y

        lpm r16,Z+
    7c1c:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7c1e:	08 b9       	out	0x08, r16	; 8
        mul r18,r19 ;tile*width*height
    7c20:	23 9f       	mul	r18, r19

        lpm r16,Z+
    7c22:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7c24:	08 b9       	out	0x08, r16	; 8
        subi YL,-8
    7c26:	c8 5f       	subi	r28, 0xF8	; 248
        cpi r18,RAM_TILES_COUNT     ;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7c28:	2c 31       	cpi	r18, 0x1C	; 28
        
        lpm r16,Z+
    7c2a:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7c2c:	08 b9       	out	0x08, r16	; 8
        brsh .+2        ;skip if next tile is in ROM    
    7c2e:	08 f4       	brcc	.+2      	; 0x7c32 <romloop+0x1c>
        movw r20,r4     ;load RAM title table address +row offset   
    7c30:	a2 01       	movw	r20, r4
   
        lpm r16,Z+
    7c32:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7c34:	08 b9       	out	0x08, r16	; 8
        add r0,r20      ;add tile table address +row offset lsb
    7c36:	04 0e       	add	r0, r20
        adc r1,r21      ;add title table address +row offset msb
    7c38:	15 1e       	adc	r1, r21

        lpm r16,Z+
    7c3a:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7c3c:	08 b9       	out	0x08, r16	; 8
        cpi r18,RAM_TILES_COUNT 
    7c3e:	2c 31       	cpi	r18, 0x1C	; 28
        dec r17         ;decrement tiles to draw on line (does not affect carry)
    7c40:	1a 95       	dec	r17
   
        lpm r16,Z+
    7c42:	05 91       	lpm	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7c44:	08 b9       	out	0x08, r16	; 8
        lpm r16,Z+
    7c46:	05 91       	lpm	r16, Z+

        breq end    
    7c48:	39 f1       	breq	.+78     	; 0x7c98 <end>
        movw ZL,r0      ;copy next tile adress
    7c4a:	f0 01       	movw	r30, r0

        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7c4c:	08 b9       	out	0x08, r16	; 8
        brcc romloop
    7c4e:	18 f7       	brcc	.-58     	; 0x7c16 <romloop>
    
        rjmp .
    7c50:	00 c0       	rjmp	.+0      	; 0x7c52 <ramloop>

00007c52 <ramloop>:

    ramloop:

        ld r16,Z+
    7c52:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7c54:	08 b9       	out	0x08, r16	; 8
        ld r18,Y     ;load next tile # from VRAM
    7c56:	28 81       	ld	r18, Y

        ld r16,Z+ 
    7c58:	01 91       	ld	r16, Z+
        subi YL,-8          
    7c5a:	c8 5f       	subi	r28, 0xF8	; 248
        out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 2
    7c5c:	08 b9       	out	0x08, r16	; 8
        mul r18,r19 ;tile*width*height
    7c5e:	23 9f       	mul	r18, r19

        ld r16,Z+
    7c60:	01 91       	ld	r16, Z+
        nop
    7c62:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7c64:	08 b9       	out	0x08, r16	; 8
        cpi r18,RAM_TILES_COUNT
    7c66:	2c 31       	cpi	r18, 0x1C	; 28
        rjmp .
    7c68:	00 c0       	rjmp	.+0      	; 0x7c6a <ramloop+0x18>
   
        ld r16,Z+
    7c6a:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7c6c:	08 b9       	out	0x08, r16	; 8
        brcs .+2 
    7c6e:	08 f0       	brcs	.+2      	; 0x7c72 <ramloop+0x20>
        movw r20,r2     ;ROM title table address +row offset    
    7c70:	a1 01       	movw	r20, r2
   
   
        ld r16,Z+
    7c72:	01 91       	ld	r16, Z+
        add r0,r20    ;add title table address +row offset
    7c74:	04 0e       	add	r0, r20
        out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7c76:	08 b9       	out	0x08, r16	; 8
        adc r1,r21
    7c78:	15 1e       	adc	r1, r21
        rjmp .
    7c7a:	00 c0       	rjmp	.+0      	; 0x7c7c <ramloop+0x2a>
    
        ld r16,Z+       
    7c7c:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7c7e:	08 b9       	out	0x08, r16	; 8
        ld r7,Z+
    7c80:	71 90       	ld	r7, Z+
        ld r16,Z+   
    7c82:	01 91       	ld	r16, Z+
    
        movw ZL,r0
    7c84:	f0 01       	movw	r30, r0
        out _SFR_IO_ADDR(DATA_PORT),r7      ;pixel 7   
    7c86:	78 b8       	out	0x08, r7	; 8
        nop
    7c88:	00 00       	nop
        cpi r18,RAM_TILES_COUNT 
    7c8a:	2c 31       	cpi	r18, 0x1C	; 28
        dec r17
    7c8c:	1a 95       	dec	r17
        breq end
    7c8e:	21 f0       	breq	.+8      	; 0x7c98 <end>
    
        nop
    7c90:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7c92:	08 b9       	out	0x08, r16	; 8
    
        brcc romloop
    7c94:	00 f6       	brcc	.-128    	; 0x7c16 <romloop>
        rjmp ramloop
    7c96:	dd cf       	rjmp	.-70     	; 0x7c52 <ramloop>

00007c98 <end>:
    
    end:
        out _SFR_IO_ADDR(DATA_PORT),r16     ;pixel 8
    7c98:	08 b9       	out	0x08, r16	; 8
        brid end_fine_scroll                ;hack: interrupt flag=0 => no fine offset pixel to draw
    7c9a:	27 f5       	brid	.+72     	; 0x7ce4 <end_fine_scroll>
        brcc end_rom_fine_scroll_loop
    7c9c:	30 f4       	brcc	.+12     	; 0x7caa <end_rom_fine_scroll_loop>

    /***END RAM LOOP***/
        movw ZL,r0
    7c9e:	f0 01       	movw	r30, r0

00007ca0 <end_ram_fine_scroll_loop>:
    end_ram_fine_scroll_loop:
        ld r16,Z+
    7ca0:	01 91       	ld	r16, Z+
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
    7ca2:	08 b9       	out	0x08, r16	; 8
        dec r14
    7ca4:	ea 94       	dec	r14
        brne end_ram_fine_scroll_loop
    7ca6:	e1 f7       	brne	.-8      	; 0x7ca0 <end_ram_fine_scroll_loop>
        rjmp end_fine_scroll_ram
    7ca8:	1f c0       	rjmp	.+62     	; 0x7ce8 <end_fine_scroll_ram>

00007caa <end_rom_fine_scroll_loop>:

    /***END ROM LOOP***/
    end_rom_fine_scroll_loop:
        movw ZL,r12
    7caa:	f6 01       	movw	r30, r12
        nop
    7cac:	00 00       	nop
        out _SFR_IO_ADDR(DATA_PORT),r9        ;output saved 1st pixel
    7cae:	98 b8       	out	0x08, r9	; 8
        dec r14
    7cb0:	ea 94       	dec	r14
        breq end_fine_scroll_rom
    7cb2:	c9 f0       	breq	.+50     	; 0x7ce6 <end_fine_scroll_rom>
    .rept 6
        lpm r16,Z+      
        out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 
        dec r14
        breq end_fine_scroll_rom
    .endr
    7cb4:	05 91       	lpm	r16, Z+
    7cb6:	08 b9       	out	0x08, r16	; 8
    7cb8:	ea 94       	dec	r14
    7cba:	a9 f0       	breq	.+42     	; 0x7ce6 <end_fine_scroll_rom>
    7cbc:	05 91       	lpm	r16, Z+
    7cbe:	08 b9       	out	0x08, r16	; 8
    7cc0:	ea 94       	dec	r14
    7cc2:	89 f0       	breq	.+34     	; 0x7ce6 <end_fine_scroll_rom>
    7cc4:	05 91       	lpm	r16, Z+
    7cc6:	08 b9       	out	0x08, r16	; 8
    7cc8:	ea 94       	dec	r14
    7cca:	69 f0       	breq	.+26     	; 0x7ce6 <end_fine_scroll_rom>
    7ccc:	05 91       	lpm	r16, Z+
    7cce:	08 b9       	out	0x08, r16	; 8
    7cd0:	ea 94       	dec	r14
    7cd2:	49 f0       	breq	.+18     	; 0x7ce6 <end_fine_scroll_rom>
    7cd4:	05 91       	lpm	r16, Z+
    7cd6:	08 b9       	out	0x08, r16	; 8
    7cd8:	ea 94       	dec	r14
    7cda:	29 f0       	breq	.+10     	; 0x7ce6 <end_fine_scroll_rom>
    7cdc:	05 91       	lpm	r16, Z+
    7cde:	08 b9       	out	0x08, r16	; 8
    7ce0:	ea 94       	dec	r14
    7ce2:	09 f0       	breq	.+2      	; 0x7ce6 <end_fine_scroll_rom>

00007ce4 <end_fine_scroll>:
	...

00007ce6 <end_fine_scroll_rom>:
	...

00007ce8 <end_fine_scroll_ram>:
    end_fine_scroll:    
        nop
    end_fine_scroll_rom:
        nop
    end_fine_scroll_ram:
        clr r16 
    7ce8:	00 27       	eor	r16, r16
        out _SFR_IO_ADDR(DATA_PORT),r16   
    7cea:	08 b9       	out	0x08, r16	; 8

        pop r6
    7cec:	6f 90       	pop	r6
        pop r7
    7cee:	7f 90       	pop	r7
        pop r9
    7cf0:	9f 90       	pop	r9
        pop r12
    7cf2:	cf 90       	pop	r12
        pop r13
    7cf4:	df 90       	pop	r13
        pop r19
    7cf6:	3f 91       	pop	r19
        pop r22
    7cf8:	6f 91       	pop	r22
        pop r23
    7cfa:	7f 91       	pop	r23
        pop YH
    7cfc:	df 91       	pop	r29
        pop YL
    7cfe:	cf 91       	pop	r28

        ret
    7d00:	08 95       	ret

00007d02 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
    ldi r18,TILE_HEIGHT*TILE_WIDTH
    7d02:	20 e4       	ldi	r18, 0x40	; 64

    ;compute source adress
    lds ZL,tile_table_lo
    7d04:	e0 91 ac 0c 	lds	r30, 0x0CAC
    lds ZH,tile_table_hi
    7d08:	f0 91 ad 0c 	lds	r31, 0x0CAD
    mul r24,r18
    7d0c:	82 9f       	mul	r24, r18
    add ZL,r0
    7d0e:	e0 0d       	add	r30, r0
    adc ZH,r1
    7d10:	f1 1d       	adc	r31, r1

    ;compute destination adress
    ldi XL,lo8(ram_tiles)
    7d12:	a0 e5       	ldi	r26, 0x50	; 80
    ldi XH,hi8(ram_tiles)
    7d14:	b5 e0       	ldi	r27, 0x05	; 5
    mul r22,r18
    7d16:	62 9f       	mul	r22, r18
    add XL,r0
    7d18:	a0 0d       	add	r26, r0
    adc XH,r1
    7d1a:	b1 1d       	adc	r27, r1

    ;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
    lpm r1,Z+
    st X+,r1
.endr
    7d1c:	15 90       	lpm	r1, Z+
    7d1e:	1d 92       	st	X+, r1
    7d20:	15 90       	lpm	r1, Z+
    7d22:	1d 92       	st	X+, r1
    7d24:	15 90       	lpm	r1, Z+
    7d26:	1d 92       	st	X+, r1
    7d28:	15 90       	lpm	r1, Z+
    7d2a:	1d 92       	st	X+, r1
    7d2c:	15 90       	lpm	r1, Z+
    7d2e:	1d 92       	st	X+, r1
    7d30:	15 90       	lpm	r1, Z+
    7d32:	1d 92       	st	X+, r1
    7d34:	15 90       	lpm	r1, Z+
    7d36:	1d 92       	st	X+, r1
    7d38:	15 90       	lpm	r1, Z+
    7d3a:	1d 92       	st	X+, r1
    7d3c:	15 90       	lpm	r1, Z+
    7d3e:	1d 92       	st	X+, r1
    7d40:	15 90       	lpm	r1, Z+
    7d42:	1d 92       	st	X+, r1
    7d44:	15 90       	lpm	r1, Z+
    7d46:	1d 92       	st	X+, r1
    7d48:	15 90       	lpm	r1, Z+
    7d4a:	1d 92       	st	X+, r1
    7d4c:	15 90       	lpm	r1, Z+
    7d4e:	1d 92       	st	X+, r1
    7d50:	15 90       	lpm	r1, Z+
    7d52:	1d 92       	st	X+, r1
    7d54:	15 90       	lpm	r1, Z+
    7d56:	1d 92       	st	X+, r1
    7d58:	15 90       	lpm	r1, Z+
    7d5a:	1d 92       	st	X+, r1
    7d5c:	15 90       	lpm	r1, Z+
    7d5e:	1d 92       	st	X+, r1
    7d60:	15 90       	lpm	r1, Z+
    7d62:	1d 92       	st	X+, r1
    7d64:	15 90       	lpm	r1, Z+
    7d66:	1d 92       	st	X+, r1
    7d68:	15 90       	lpm	r1, Z+
    7d6a:	1d 92       	st	X+, r1
    7d6c:	15 90       	lpm	r1, Z+
    7d6e:	1d 92       	st	X+, r1
    7d70:	15 90       	lpm	r1, Z+
    7d72:	1d 92       	st	X+, r1
    7d74:	15 90       	lpm	r1, Z+
    7d76:	1d 92       	st	X+, r1
    7d78:	15 90       	lpm	r1, Z+
    7d7a:	1d 92       	st	X+, r1
    7d7c:	15 90       	lpm	r1, Z+
    7d7e:	1d 92       	st	X+, r1
    7d80:	15 90       	lpm	r1, Z+
    7d82:	1d 92       	st	X+, r1
    7d84:	15 90       	lpm	r1, Z+
    7d86:	1d 92       	st	X+, r1
    7d88:	15 90       	lpm	r1, Z+
    7d8a:	1d 92       	st	X+, r1
    7d8c:	15 90       	lpm	r1, Z+
    7d8e:	1d 92       	st	X+, r1
    7d90:	15 90       	lpm	r1, Z+
    7d92:	1d 92       	st	X+, r1
    7d94:	15 90       	lpm	r1, Z+
    7d96:	1d 92       	st	X+, r1
    7d98:	15 90       	lpm	r1, Z+
    7d9a:	1d 92       	st	X+, r1
    7d9c:	15 90       	lpm	r1, Z+
    7d9e:	1d 92       	st	X+, r1
    7da0:	15 90       	lpm	r1, Z+
    7da2:	1d 92       	st	X+, r1
    7da4:	15 90       	lpm	r1, Z+
    7da6:	1d 92       	st	X+, r1
    7da8:	15 90       	lpm	r1, Z+
    7daa:	1d 92       	st	X+, r1
    7dac:	15 90       	lpm	r1, Z+
    7dae:	1d 92       	st	X+, r1
    7db0:	15 90       	lpm	r1, Z+
    7db2:	1d 92       	st	X+, r1
    7db4:	15 90       	lpm	r1, Z+
    7db6:	1d 92       	st	X+, r1
    7db8:	15 90       	lpm	r1, Z+
    7dba:	1d 92       	st	X+, r1
    7dbc:	15 90       	lpm	r1, Z+
    7dbe:	1d 92       	st	X+, r1
    7dc0:	15 90       	lpm	r1, Z+
    7dc2:	1d 92       	st	X+, r1
    7dc4:	15 90       	lpm	r1, Z+
    7dc6:	1d 92       	st	X+, r1
    7dc8:	15 90       	lpm	r1, Z+
    7dca:	1d 92       	st	X+, r1
    7dcc:	15 90       	lpm	r1, Z+
    7dce:	1d 92       	st	X+, r1
    7dd0:	15 90       	lpm	r1, Z+
    7dd2:	1d 92       	st	X+, r1
    7dd4:	15 90       	lpm	r1, Z+
    7dd6:	1d 92       	st	X+, r1
    7dd8:	15 90       	lpm	r1, Z+
    7dda:	1d 92       	st	X+, r1
    7ddc:	15 90       	lpm	r1, Z+
    7dde:	1d 92       	st	X+, r1
    7de0:	15 90       	lpm	r1, Z+
    7de2:	1d 92       	st	X+, r1
    7de4:	15 90       	lpm	r1, Z+
    7de6:	1d 92       	st	X+, r1
    7de8:	15 90       	lpm	r1, Z+
    7dea:	1d 92       	st	X+, r1
    7dec:	15 90       	lpm	r1, Z+
    7dee:	1d 92       	st	X+, r1
    7df0:	15 90       	lpm	r1, Z+
    7df2:	1d 92       	st	X+, r1
    7df4:	15 90       	lpm	r1, Z+
    7df6:	1d 92       	st	X+, r1
    7df8:	15 90       	lpm	r1, Z+
    7dfa:	1d 92       	st	X+, r1
    7dfc:	15 90       	lpm	r1, Z+
    7dfe:	1d 92       	st	X+, r1
    7e00:	15 90       	lpm	r1, Z+
    7e02:	1d 92       	st	X+, r1
    7e04:	15 90       	lpm	r1, Z+
    7e06:	1d 92       	st	X+, r1
    7e08:	15 90       	lpm	r1, Z+
    7e0a:	1d 92       	st	X+, r1
    7e0c:	15 90       	lpm	r1, Z+
    7e0e:	1d 92       	st	X+, r1
    7e10:	15 90       	lpm	r1, Z+
    7e12:	1d 92       	st	X+, r1
    7e14:	15 90       	lpm	r1, Z+
    7e16:	1d 92       	st	X+, r1
    7e18:	15 90       	lpm	r1, Z+
    7e1a:	1d 92       	st	X+, r1
    clr r1
    7e1c:	11 24       	eor	r1, r1
    ret
    7e1e:	08 95       	ret

00007e20 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

    ldi r18,TILE_HEIGHT*TILE_WIDTH
    7e20:	20 e4       	ldi	r18, 0x40	; 64

    ;compute source adress
    ldi ZL,lo8(ram_tiles)
    7e22:	e0 e5       	ldi	r30, 0x50	; 80
    ldi ZH,hi8(ram_tiles)
    7e24:	f5 e0       	ldi	r31, 0x05	; 5
    mul r24,r18
    7e26:	82 9f       	mul	r24, r18
    add ZL,r0
    7e28:	e0 0d       	add	r30, r0
    adc ZH,r1
    7e2a:	f1 1d       	adc	r31, r1

    ;compute destination adress
    ldi XL,lo8(ram_tiles)
    7e2c:	a0 e5       	ldi	r26, 0x50	; 80
    ldi XH,hi8(ram_tiles)
    7e2e:	b5 e0       	ldi	r27, 0x05	; 5
    mul r22,r18
    7e30:	62 9f       	mul	r22, r18
    add XL,r0
    7e32:	a0 0d       	add	r26, r0
    adc XH,r1
    7e34:	b1 1d       	adc	r27, r1

    ;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
    ld r1,Z+
    st X+,r1
.endr
    7e36:	11 90       	ld	r1, Z+
    7e38:	1d 92       	st	X+, r1
    7e3a:	11 90       	ld	r1, Z+
    7e3c:	1d 92       	st	X+, r1
    7e3e:	11 90       	ld	r1, Z+
    7e40:	1d 92       	st	X+, r1
    7e42:	11 90       	ld	r1, Z+
    7e44:	1d 92       	st	X+, r1
    7e46:	11 90       	ld	r1, Z+
    7e48:	1d 92       	st	X+, r1
    7e4a:	11 90       	ld	r1, Z+
    7e4c:	1d 92       	st	X+, r1
    7e4e:	11 90       	ld	r1, Z+
    7e50:	1d 92       	st	X+, r1
    7e52:	11 90       	ld	r1, Z+
    7e54:	1d 92       	st	X+, r1
    7e56:	11 90       	ld	r1, Z+
    7e58:	1d 92       	st	X+, r1
    7e5a:	11 90       	ld	r1, Z+
    7e5c:	1d 92       	st	X+, r1
    7e5e:	11 90       	ld	r1, Z+
    7e60:	1d 92       	st	X+, r1
    7e62:	11 90       	ld	r1, Z+
    7e64:	1d 92       	st	X+, r1
    7e66:	11 90       	ld	r1, Z+
    7e68:	1d 92       	st	X+, r1
    7e6a:	11 90       	ld	r1, Z+
    7e6c:	1d 92       	st	X+, r1
    7e6e:	11 90       	ld	r1, Z+
    7e70:	1d 92       	st	X+, r1
    7e72:	11 90       	ld	r1, Z+
    7e74:	1d 92       	st	X+, r1
    7e76:	11 90       	ld	r1, Z+
    7e78:	1d 92       	st	X+, r1
    7e7a:	11 90       	ld	r1, Z+
    7e7c:	1d 92       	st	X+, r1
    7e7e:	11 90       	ld	r1, Z+
    7e80:	1d 92       	st	X+, r1
    7e82:	11 90       	ld	r1, Z+
    7e84:	1d 92       	st	X+, r1
    7e86:	11 90       	ld	r1, Z+
    7e88:	1d 92       	st	X+, r1
    7e8a:	11 90       	ld	r1, Z+
    7e8c:	1d 92       	st	X+, r1
    7e8e:	11 90       	ld	r1, Z+
    7e90:	1d 92       	st	X+, r1
    7e92:	11 90       	ld	r1, Z+
    7e94:	1d 92       	st	X+, r1
    7e96:	11 90       	ld	r1, Z+
    7e98:	1d 92       	st	X+, r1
    7e9a:	11 90       	ld	r1, Z+
    7e9c:	1d 92       	st	X+, r1
    7e9e:	11 90       	ld	r1, Z+
    7ea0:	1d 92       	st	X+, r1
    7ea2:	11 90       	ld	r1, Z+
    7ea4:	1d 92       	st	X+, r1
    7ea6:	11 90       	ld	r1, Z+
    7ea8:	1d 92       	st	X+, r1
    7eaa:	11 90       	ld	r1, Z+
    7eac:	1d 92       	st	X+, r1
    7eae:	11 90       	ld	r1, Z+
    7eb0:	1d 92       	st	X+, r1
    7eb2:	11 90       	ld	r1, Z+
    7eb4:	1d 92       	st	X+, r1
    7eb6:	11 90       	ld	r1, Z+
    7eb8:	1d 92       	st	X+, r1
    7eba:	11 90       	ld	r1, Z+
    7ebc:	1d 92       	st	X+, r1
    7ebe:	11 90       	ld	r1, Z+
    7ec0:	1d 92       	st	X+, r1
    7ec2:	11 90       	ld	r1, Z+
    7ec4:	1d 92       	st	X+, r1
    7ec6:	11 90       	ld	r1, Z+
    7ec8:	1d 92       	st	X+, r1
    7eca:	11 90       	ld	r1, Z+
    7ecc:	1d 92       	st	X+, r1
    7ece:	11 90       	ld	r1, Z+
    7ed0:	1d 92       	st	X+, r1
    7ed2:	11 90       	ld	r1, Z+
    7ed4:	1d 92       	st	X+, r1
    7ed6:	11 90       	ld	r1, Z+
    7ed8:	1d 92       	st	X+, r1
    7eda:	11 90       	ld	r1, Z+
    7edc:	1d 92       	st	X+, r1
    7ede:	11 90       	ld	r1, Z+
    7ee0:	1d 92       	st	X+, r1
    7ee2:	11 90       	ld	r1, Z+
    7ee4:	1d 92       	st	X+, r1
    7ee6:	11 90       	ld	r1, Z+
    7ee8:	1d 92       	st	X+, r1
    7eea:	11 90       	ld	r1, Z+
    7eec:	1d 92       	st	X+, r1
    7eee:	11 90       	ld	r1, Z+
    7ef0:	1d 92       	st	X+, r1
    7ef2:	11 90       	ld	r1, Z+
    7ef4:	1d 92       	st	X+, r1
    7ef6:	11 90       	ld	r1, Z+
    7ef8:	1d 92       	st	X+, r1
    7efa:	11 90       	ld	r1, Z+
    7efc:	1d 92       	st	X+, r1
    7efe:	11 90       	ld	r1, Z+
    7f00:	1d 92       	st	X+, r1
    7f02:	11 90       	ld	r1, Z+
    7f04:	1d 92       	st	X+, r1
    7f06:	11 90       	ld	r1, Z+
    7f08:	1d 92       	st	X+, r1
    7f0a:	11 90       	ld	r1, Z+
    7f0c:	1d 92       	st	X+, r1
    7f0e:	11 90       	ld	r1, Z+
    7f10:	1d 92       	st	X+, r1
    7f12:	11 90       	ld	r1, Z+
    7f14:	1d 92       	st	X+, r1
    7f16:	11 90       	ld	r1, Z+
    7f18:	1d 92       	st	X+, r1
    7f1a:	11 90       	ld	r1, Z+
    7f1c:	1d 92       	st	X+, r1
    7f1e:	11 90       	ld	r1, Z+
    7f20:	1d 92       	st	X+, r1
    7f22:	11 90       	ld	r1, Z+
    7f24:	1d 92       	st	X+, r1
    7f26:	11 90       	ld	r1, Z+
    7f28:	1d 92       	st	X+, r1
    7f2a:	11 90       	ld	r1, Z+
    7f2c:	1d 92       	st	X+, r1
    7f2e:	11 90       	ld	r1, Z+
    7f30:	1d 92       	st	X+, r1
    7f32:	11 90       	ld	r1, Z+
    7f34:	1d 92       	st	X+, r1
    clr r1
    7f36:	11 24       	eor	r1, r1
    ret
    7f38:	08 95       	ret

00007f3a <BlitSprite>:
; r21:r20: Y:X (0 or 1, location of 8x8 sprite fragment on 2x2 tile container)
; r19:r18: DY:DX (0 to 7, offset of sprite relative to 0:0 of container)
;************************************
BlitSprite:

    push  YL
    7f3a:	cf 93       	push	r28
    push  YH
    7f3c:	df 93       	push	r29

    ; src = sprites_tiletable_lo + (sprites[i].tileIndex * TILE_HEIGHT * TILE_WIDTH)

    ldi   r25,     SPRITE_STRUCT_SIZE
    7f3e:	94 e0       	ldi	r25, 0x04	; 4
    mul   r24,     r25
    7f40:	89 9f       	mul	r24, r25

    movw  ZL,      r0
    7f42:	f0 01       	movw	r30, r0
    subi  ZL,      lo8(-(sprites))
    7f44:	e0 5f       	subi	r30, 0xF0	; 240
    sbci  ZH,      hi8(-(sprites))
    7f46:	fa 4f       	sbci	r31, 0xFA	; 250

    ldd   r23,     Z + sprFlags
    7f48:	73 81       	ldd	r23, Z+3	; 0x03

    ; 8x16 multiply

    ldd   r24,     Z + sprTileIndex
    7f4a:	82 81       	ldd	r24, Z+2	; 0x02
    ldi   ZL,      TILE_WIDTH * TILE_HEIGHT
    7f4c:	e0 e4       	ldi	r30, 0x40	; 64
    mul   r24,     ZL
    7f4e:	8e 9f       	mul	r24, r30
    movw  XL,      r0
    7f50:	d0 01       	movw	r26, r0

    ; Get tile bank addr

    ldi   r25,     4 * 2
    7f52:	98 e0       	ldi	r25, 0x08	; 8
    mul   r23,     r25
    7f54:	79 9f       	mul	r23, r25
    mov   YL,      r1
    7f56:	c1 2d       	mov	r28, r1
    clr   YH
    7f58:	dd 27       	eor	r29, r29
    subi  YL,      lo8(-(sprites_tile_banks))
    7f5a:	cc 55       	subi	r28, 0x5C	; 92
    sbci  YH,      hi8(-(sprites_tile_banks))
    7f5c:	d3 4f       	sbci	r29, 0xF3	; 243
    ldd   ZL,      Y + 0
    7f5e:	e8 81       	ld	r30, Y
    ldd   ZH,      Y + 1
    7f60:	f9 81       	ldd	r31, Y+1	; 0x01
    add   ZL,      XL      ; Tile data src
    7f62:	ea 0f       	add	r30, r26
    adc   ZH,      XH
    7f64:	fb 1f       	adc	r31, r27

    ; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

    ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7f66:	90 e4       	ldi	r25, 0x40	; 64
    mul   r22,     r25
    7f68:	69 9f       	mul	r22, r25
    movw  XL,      r0
    7f6a:	d0 01       	movw	r26, r0
    subi  XL,      lo8(-(ram_tiles))
    7f6c:	a0 5b       	subi	r26, 0xB0	; 176
    sbci  XH,      hi8(-(ram_tiles))
    7f6e:	ba 4f       	sbci	r27, 0xFA	; 250
            dest += (xspan - 1U);
        }
    }
    */

    clr   r1
    7f70:	11 24       	eor	r1, r1
    clr   YH               ; srcXdiff high byte
    7f72:	dd 27       	eor	r29, r29
    sbrc  r20,     0
    7f74:	40 fd       	sbrc	r20, 0
    rjmp  x_2nd_tile
    7f76:	0d c0       	rjmp	.+26     	; 0x7f92 <x_2nd_tile>

    mov   YL,      r18     ; srcXdiff = dx
    7f78:	c2 2f       	mov	r28, r18
    ldi   r20,     TILE_WIDTH
    7f7a:	48 e0       	ldi	r20, 0x08	; 8
    sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7f7c:	42 1b       	sub	r20, r18
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7f7e:	70 fd       	sbrc	r23, 0
    rjmp  x_1st_tile_xf
    7f80:	03 c0       	rjmp	.+6      	; 0x7f88 <x_1st_tile_xf>

    add   XL,      r18
    7f82:	a2 0f       	add	r26, r18
    adc   XH,      r1      ; dest += dx
    7f84:	b1 1d       	adc	r27, r1
    rjmp  x_check_end
    7f86:	10 c0       	rjmp	.+32     	; 0x7fa8 <x_check_end>

00007f88 <x_1st_tile_xf>:

x_1st_tile_xf:

    adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1U)
    7f88:	17 96       	adiw	r26, 0x07	; 7
    adiw  ZL,      TILE_WIDTH
    7f8a:	38 96       	adiw	r30, 0x08	; 8
    sub   ZL,      r20
    7f8c:	e4 1b       	sub	r30, r20
    sbc   ZH,      r1      ; src += (TILE_WIDTH - xspan)
    7f8e:	f1 09       	sbc	r31, r1
    rjmp  x_check_end
    7f90:	0b c0       	rjmp	.+22     	; 0x7fa8 <x_check_end>

00007f92 <x_2nd_tile>:

x_2nd_tile:

    ldi   YL,      TILE_WIDTH
    7f92:	c8 e0       	ldi	r28, 0x08	; 8
    sub   YL,      r18     ; srcXdiff = TILE_WIDTH - dx
    7f94:	c2 1b       	sub	r28, r18
    mov   r20,     r18     ; xspan = dx;
    7f96:	42 2f       	mov	r20, r18
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7f98:	70 fd       	sbrc	r23, 0
    rjmp  x_2nd_tile_xf
    7f9a:	03 c0       	rjmp	.+6      	; 0x7fa2 <x_2nd_tile_xf>

    add   ZL,      YL
    7f9c:	ec 0f       	add	r30, r28
    adc   ZH,      r1      ; src += srcXdiff
    7f9e:	f1 1d       	adc	r31, r1
    rjmp  x_check_end
    7fa0:	03 c0       	rjmp	.+6      	; 0x7fa8 <x_check_end>

00007fa2 <x_2nd_tile_xf>:

x_2nd_tile_xf:

    add   XL,      r20
    7fa2:	a4 0f       	add	r26, r20
    adc   XH,      r1
    7fa4:	b1 1d       	adc	r27, r1
    sbiw  XL,      1       ; dest += (xspan - 1U)
    7fa6:	11 97       	sbiw	r26, 0x01	; 1

00007fa8 <x_check_end>:
            src += (ydiff * TILE_WIDTH);
        }
    }
    */

    cpi   r21,     0
    7fa8:	50 30       	cpi	r21, 0x00	; 0
    brne  y_2nd_tile
    7faa:	51 f4       	brne	.+20     	; 0x7fc0 <y_2nd_tile>

    ldi   r25,     TILE_WIDTH ; dest += (dy * TILE_WIDTH)
    7fac:	98 e0       	ldi	r25, 0x08	; 8
    mul   r25,     r19
    7fae:	93 9f       	mul	r25, r19
    add   XL,      r0
    7fb0:	a0 0d       	add	r26, r0
    adc   XH,      r1
    7fb2:	b1 1d       	adc	r27, r1

    mov   r25,     r19        ; ydiff = dy
    7fb4:	93 2f       	mov	r25, r19

    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7fb6:	71 fd       	sbrc	r23, 1
    subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7fb8:	e8 5c       	subi	r30, 0xC8	; 200
    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7fba:	71 fd       	sbrc	r23, 1
    sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7fbc:	ff 4f       	sbci	r31, 0xFF	; 255

    rjmp y_check_end
    7fbe:	0a c0       	rjmp	.+20     	; 0x7fd4 <y_check_end>

00007fc0 <y_2nd_tile>:

y_2nd_tile:

    ldi   r25,     TILE_HEIGHT ; ydiff = (TILE_HEIGHT - dy)
    7fc0:	98 e0       	ldi	r25, 0x08	; 8
    sub   r25,     r19
    7fc2:	93 1b       	sub	r25, r19

    mov   r1,      r19         ; temp = dy - 1
    7fc4:	13 2e       	mov	r1, r19
    dec   r1
    7fc6:	1a 94       	dec	r1
    sbrs  r23,     SPRITE_FLIP_Y_BIT
    7fc8:	71 ff       	sbrs	r23, 1
    mov   r1,      r25         ; temp = ydiff
    7fca:	19 2e       	mov	r1, r25

    ldi   r21,     TILE_WIDTH  ; src += (temp * TILE_WIDTH)
    7fcc:	58 e0       	ldi	r21, 0x08	; 8
    mul   r21,     r1
    7fce:	51 9d       	mul	r21, r1
    add   ZL,      r0
    7fd0:	e0 0d       	add	r30, r0
    adc   ZH,      r1
    7fd2:	f1 1d       	adc	r31, r1

00007fd4 <y_check_end>:
    if ((flags & SPRITE_FLIP_Y) != 0U){
        srcXdiff -= (TILE_WIDTH * 2);
    }
    */

    sbrc  r23,     SPRITE_FLIP_Y_BIT
    7fd4:	71 fd       	sbrc	r23, 1
    sbiw  YL,      (TILE_WIDTH * 2)
    7fd6:	60 97       	sbiw	r28, 0x10	; 16
        destXdiff = TILE_WIDTH + xspan;
        step = -1;
    }
    */

    ldi   r24,     TILE_WIDTH ; destXdiff = TILE_WIDTH
    7fd8:	88 e0       	ldi	r24, 0x08	; 8
    sbrc  r23,     SPRITE_FLIP_X_BIT
    7fda:	70 fd       	sbrc	r23, 0
    rjmp  x_diff_xf
    7fdc:	04 c0       	rjmp	.+8      	; 0x7fe6 <x_diff_xf>

    sub   r24,     r20     ; destXdiff -= xspan
    7fde:	84 1b       	sub	r24, r20
    ldi   r23,     0x00
    7fe0:	70 e0       	ldi	r23, 0x00	; 0
    ldi   r22,     0x01    ; step = 1
    7fe2:	61 e0       	ldi	r22, 0x01	; 1
    rjmp  x_diff_end
    7fe4:	03 c0       	rjmp	.+6      	; 0x7fec <x_diff_end>

00007fe6 <x_diff_xf>:

x_diff_xf:

    add   r24,     r20     ; destXdiff += xspan
    7fe6:	84 0f       	add	r24, r20
    ldi   r23,     0xFF
    7fe8:	7f ef       	ldi	r23, 0xFF	; 255
    ldi   r22,     0xFF    ; step = -1
    7fea:	6f ef       	ldi	r22, 0xFF	; 255

00007fec <x_diff_end>:
    ;     r25 = ydiff
    ;       X = dest
    ;       Y = srcXdiff
    ;       Z = src

    clr   r1
    7fec:	11 24       	eor	r1, r1
    ldi   r19,     TRANSLUCENT_COLOR
    7fee:	3e ef       	ldi	r19, 0xFE	; 254

    ldi   r21,     TILE_HEIGHT
    7ff0:	58 e0       	ldi	r21, 0x08	; 8
    sub   r21,     r25     ; yspan = (TILE_HEIGHT - ydiff)
    7ff2:	59 1b       	sub	r21, r25
    mov   r0,      r20     ; xspan
    7ff4:	04 2e       	mov	r0, r20
    inc   r0
    7ff6:	03 94       	inc	r0

00007ff8 <y_loop>:

y_loop:
    mov   r20,     r0      ; xspan
    7ff8:	40 2d       	mov	r20, r0
    lsr   r20
    7ffa:	46 95       	lsr	r20
    brcc  x_loop1
    7ffc:	28 f4       	brcc	.+10     	; 0x8008 <x_loop1>

00007ffe <x_loop0>:

x_loop0:
    lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7ffe:	25 91       	lpm	r18, Z+
    cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    8000:	23 13       	cpse	r18, r19
    st    X,       r18     ; *dest = px
    8002:	2c 93       	st	X, r18
    add   XL,      r22     ; dest += step;
    8004:	a6 0f       	add	r26, r22
    adc   XH,      r23
    8006:	b7 1f       	adc	r27, r23

00008008 <x_loop1>:
x_loop1:
    lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    8008:	25 91       	lpm	r18, Z+
    cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    800a:	23 13       	cpse	r18, r19
    st    X,       r18     ; *dest = px
    800c:	2c 93       	st	X, r18
    add   XL,      r22     ; dest += step;
    800e:	a6 0f       	add	r26, r22
    adc   XH,      r23
    8010:	b7 1f       	adc	r27, r23
    subi  r20,     1
    8012:	41 50       	subi	r20, 0x01	; 1
    brne  x_loop0
    8014:	a1 f7       	brne	.-24     	; 0x7ffe <x_loop0>

    add   ZL,      YL      ; src += srcXdiff
    8016:	ec 0f       	add	r30, r28
    adc   ZH,      YH
    8018:	fd 1f       	adc	r31, r29
    add   XL,      r24     ; dest += destXdiff
    801a:	a8 0f       	add	r26, r24
    adc   XH,      r1
    801c:	b1 1d       	adc	r27, r1
    dec   r21
    801e:	5a 95       	dec	r21
    brne  y_loop
    8020:	59 f7       	brne	.-42     	; 0x7ff8 <y_loop>

    pop   YH
    8022:	df 91       	pop	r29
    pop   YL
    8024:	cf 91       	pop	r28
    ret
    8026:	08 95       	ret

00008028 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8028:	0f 92       	push	r0
	push r1
    802a:	1f 92       	push	r1
	push ZL;2
    802c:	ef 93       	push	r30
	push ZH;2
    802e:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8030:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8032:	ef 93       	push	r30
   ; Use an alternate way to shave off 5 cycles jitter faster. It shifts
   ; all timing 57 cycles "down", so every Timer related comment and code
   ; should subtract 57 to align with this (Notes: Everything works as
   ; normal except video modes using the Timer to terminate the line).

   lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x12 - 0x17 (5 cy jitter)
    8034:	e0 91 84 00 	lds	r30, 0x0084

   cpi   ZL,      0x16    ; ( 1)
    8038:	e6 31       	cpi	r30, 0x16	; 22
   breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    803a:	01 f0       	breq	.+0      	; 0x803c <__vector_13+0x14>
   brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    803c:	28 f4       	brcc	.+10     	; 0x8048 <__vector_13+0x20>
   cpi   ZL,      0x14    ; ()
    803e:	e4 31       	cpi	r30, 0x14	; 20
   breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    8040:	01 f0       	breq	.+0      	; 0x8042 <__vector_13+0x1a>
   brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    8042:	18 f4       	brcc	.+6      	; 0x804a <__vector_13+0x22>
   cpi   ZL,      0x12    ; ()
    8044:	e2 31       	cpi	r30, 0x12	; 18
   breq  .                ; ()   +5 / +4 (10 / 9)
    8046:	01 f0       	breq	.+0      	; 0x8048 <__vector_13+0x20>
   nop                    ; ( 5) Timer at 0x1C
    8048:	00 00       	nop

;  WAIT  ZL,      57      ; Realigns with original kernel

	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    804a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    804e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8050:	e0 93 b7 0c 	sts	0x0CB7, r30

	;process sync phases
	lds ZH,sync_phase
    8054:	f0 91 b6 0c 	lds	r31, 0x0CB6
	sbrc ZH,0
    8058:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    805a:	55 c0       	rjmp	.+170    	; 0x8106 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    805c:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    805e:	98 f0       	brcs	.+38     	; 0x8086 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8060:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8062:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8066:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8068:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    806c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    806e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    8070:	26 f4       	brtc	.+8      	; 0x807a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8072:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8074:	0e 94 0a 41 	call	0x8214	; 0x8214 <update_sound>
	rjmp sync_end
    8078:	b5 c0       	rjmp	.+362    	; 0x81e4 <sync_end>

0000807a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    807a:	e5 e1       	ldi	r30, 0x15	; 21
    807c:	ea 95       	dec	r30
    807e:	f1 f7       	brne	.-4      	; 0x807c <sync_pre_eq_no_sound_update+0x2>
    8080:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8082:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    8084:	af c0       	rjmp	.+350    	; 0x81e4 <sync_end>

00008086 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8086:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8088:	28 f1       	brcs	.+74     	; 0x80d4 <sync_post_eq>

	rjmp .
    808a:	00 c0       	rjmp	.+0      	; 0x808c <sync_eq+0x6>
	rjmp .
    808c:	00 c0       	rjmp	.+0      	; 0x808e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    808e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8090:	e0 fb       	bst	r30, 0
	ldi ZL,4
    8092:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8094:	16 f4       	brtc	.+4      	; 0x809a <sync_eq_skip>
	
	call update_sound
    8096:	0e 94 0a 41 	call	0x8214	; 0x8214 <update_sound>

0000809a <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    809a:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    809c:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    80a0:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    80a2:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    80a6:	9e c0       	rjmp	.+316    	; 0x81e4 <sync_end>

000080a8 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    80a8:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    80aa:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    80ac:	ef 93       	push	r30
;  breq  .                ; ()   +5 / +4 (10 / 9)
;  nop                    ; ( 5) Timer at 0x67 

;  WAIT  ZL,      6       ; Realigns with original kernel

    lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x2A - 0x2F (5 cy jitter)
    80ae:	e0 91 84 00 	lds	r30, 0x0084

    cpi   ZL,      0x2E    ; ( 1)
    80b2:	ee 32       	cpi	r30, 0x2E	; 46
    breq  .                ; ( 2) +1 (6: cpi - rjmp - rjmp - nop)
    80b4:	01 f0       	breq	.+0      	; 0x80b6 <__vector_14+0xe>
    brcc  .+10             ; ( 4) +0 (5: cpi - nop - rjmp - nop)
    80b6:	28 f4       	brcc	.+10     	; 0x80c2 <__vector_14+0x1a>
    cpi   ZL,      0x2C    ; ()
    80b8:	ec 32       	cpi	r30, 0x2C	; 44
    breq  .                ; ()   +3 (8: cpi - 2x nop - cpi - rjmp - rjmp)
    80ba:	01 f0       	breq	.+0      	; 0x80bc <__vector_14+0x14>
    brcc  .+6              ; ()   +2 (7: cpi - 2x nop - cpi - nop - rjmp)
    80bc:	18 f4       	brcc	.+6      	; 0x80c4 <__vector_14+0x1c>
    cpi   ZL,      0x2A    ; ()
    80be:	ea 32       	cpi	r30, 0x2A	; 42
    breq  .                ; ()   +5 / +4 (10 / 9)
    80c0:	01 f0       	breq	.+0      	; 0x80c2 <__vector_14+0x1a>
    nop                    ; ( 5) Timer at 0x34
    80c2:	00 00       	nop

;   WAIT  ZL,      57      ; Realigns with original kernel

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    80c4:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    80c6:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    80c8:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    80cc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    80ce:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    80d0:	ef 91       	pop	r30
	reti
    80d2:	18 95       	reti

000080d4 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    80d4:	00 c0       	rjmp	.+0      	; 0x80d6 <sync_post_eq+0x2>

	bst ZL,0
    80d6:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    80d8:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    80da:	26 f4       	brtc	.+8      	; 0x80e4 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    80dc:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    80de:	0e 94 0a 41 	call	0x8214	; 0x8214 <update_sound>
	rjmp sync_pre_eq_cont
    80e2:	05 c0       	rjmp	.+10     	; 0x80ee <sync_pre_eq_cont>

000080e4 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    80e4:	e5 e1       	ldi	r30, 0x15	; 21
    80e6:	ea 95       	dec	r30
    80e8:	f1 f7       	brne	.-4      	; 0x80e6 <sync_post_eq_no_sound_update+0x2>
    80ea:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    80ec:	28 9a       	sbi	0x05, 0	; 5

000080ee <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    80ee:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    80f2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    80f4:	09 f0       	breq	.+2      	; 0x80f8 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    80f6:	76 c0       	rjmp	.+236    	; 0x81e4 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    80f8:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    80fa:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi ZL,1
    80fe:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    8100:	e0 93 b6 0c 	sts	0x0CB6, r30
	
	rjmp sync_end
    8104:	6f c0       	rjmp	.+222    	; 0x81e4 <sync_end>

00008106 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8106:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8108:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    810c:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    810e:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    8112:	00 c0       	rjmp	.+0      	; 0x8114 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8114:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8116:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8118:	00 c0       	rjmp	.+0      	; 0x811a <sync_hsync+0x14>
	call update_sound
    811a:	0e 94 0a 41 	call	0x8214	; 0x8214 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    811e:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8120:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    8124:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8126:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cp ZL,ZH
    812a:	ef 17       	cp	r30, r31
	brsh no_render
    812c:	d0 f4       	brcc	.+52     	; 0x8162 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    812e:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8130:	00 90 bd 0c 	lds	r0, 0x0CBD
	sub ZH,r0				
    8134:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8136:	00 90 be 0c 	lds	r0, 0x0CBE
	sub ZH,r0			
    813a:	f0 19       	sub	r31, r0
	cp ZL,ZH
    813c:	ef 17       	cp	r30, r31
	brlo no_render
    813e:	88 f0       	brcs	.+34     	; 0x8162 <no_render>

	;push r1-r29
	ldi ZL,29
    8140:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8142:	ff 27       	eor	r31, r31

00008144 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8144:	00 80       	ld	r0, Z
	push r0
    8146:	0f 92       	push	r0
	dec ZL
    8148:	ea 95       	dec	r30
	brne push_loop	
    814a:	e1 f7       	brne	.-8      	; 0x8144 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    814c:	06 e0       	ldi	r16, 0x06	; 6
    814e:	0a 95       	dec	r16
    8150:	f1 f7       	brne	.-4      	; 0x814e <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8152:	0e 94 cd 3c 	call	0x799a	; 0x799a <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8156:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8158:	ff 27       	eor	r31, r31

0000815a <pop_loop>:
pop_loop:
	pop r0
    815a:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    815c:	01 92       	st	Z+, r0
	cpi ZL,30
    815e:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8160:	e0 f3       	brcs	.-8      	; 0x815a <pop_loop>

00008162 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8162:	e0 91 b7 0c 	lds	r30, 0x0CB7
	cpi ZL,0
    8166:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8168:	09 f0       	breq	.+2      	; 0x816c <no_render+0xa>
	rjmp sync_end
    816a:	3c c0       	rjmp	.+120    	; 0x81e4 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    816c:	2f 93       	push	r18
	push r19
    816e:	3f 93       	push	r19
	push r20
    8170:	4f 93       	push	r20
	push r21
    8172:	5f 93       	push	r21
	push r22
    8174:	6f 93       	push	r22
	push r23
    8176:	7f 93       	push	r23
	push r24
    8178:	8f 93       	push	r24
	push r25
    817a:	9f 93       	push	r25
	push r26
    817c:	af 93       	push	r26
	push r27
    817e:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8180:	78 94       	sei
	clr r1
    8182:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8184:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8186:	e0 93 b6 0c 	sts	0x0CB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    818a:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    818c:	e0 93 b7 0c 	sts	0x0CB7, r30



	;increment the vsync counter
	lds r24,vsync_counter
    8190:	80 91 c7 0c 	lds	r24, 0x0CC7
	lds r25,vsync_counter+1
    8194:	90 91 c8 0c 	lds	r25, 0x0CC8
	adiw r24,1
    8198:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    819a:	80 93 c7 0c 	sts	0x0CC7, r24
	sts vsync_counter+1,r25
    819e:	90 93 c8 0c 	sts	0x0CC8, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    81a2:	e0 91 b9 0c 	lds	r30, 0x0CB9
	lds ZH,pre_vsync_user_callback+1
    81a6:	f0 91 ba 0c 	lds	r31, 0x0CBA
	cp  ZL,r1
    81aa:	e1 15       	cp	r30, r1
	cpc ZH,r1
    81ac:	f1 05       	cpc	r31, r1
	breq .+2 
    81ae:	09 f0       	breq	.+2      	; 0x81b2 <no_render+0x50>
	icall
    81b0:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    81b2:	0e 94 a9 42 	call	0x8552	; 0x8552 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    81b6:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    81ba:	0e 94 04 41 	call	0x8208	; 0x8208 <process_music>
	clr r1
    81be:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    81c0:	e0 91 bb 0c 	lds	r30, 0x0CBB
	lds ZH,post_vsync_user_callback+1
    81c4:	f0 91 bc 0c 	lds	r31, 0x0CBC
	cp  ZL,r1
    81c8:	e1 15       	cp	r30, r1
	cpc ZH,r1
    81ca:	f1 05       	cpc	r31, r1
	breq .+2 
    81cc:	09 f0       	breq	.+2      	; 0x81d0 <no_render+0x6e>
	icall
    81ce:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    81d0:	bf 91       	pop	r27
	pop r26
    81d2:	af 91       	pop	r26
	pop r25
    81d4:	9f 91       	pop	r25
	pop r24
    81d6:	8f 91       	pop	r24
	pop r23
    81d8:	7f 91       	pop	r23
	pop r22
    81da:	6f 91       	pop	r22
	pop r21
    81dc:	5f 91       	pop	r21
	pop r20
    81de:	4f 91       	pop	r20
	pop r19
    81e0:	3f 91       	pop	r19
	pop r18
    81e2:	2f 91       	pop	r18

000081e4 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    81e4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    81e6:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    81e8:	ff 91       	pop	r31
	pop ZL
    81ea:	ef 91       	pop	r30
	pop r1
    81ec:	1f 90       	pop	r1
	pop r0
    81ee:	0f 90       	pop	r0
	reti
    81f0:	18 95       	reti

000081f2 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    81f2:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    81f4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    81f6:	00 c0       	rjmp	.+0      	; 0x81f8 <hsync_pulse+0x6>
	call update_sound
    81f8:	0e 94 0a 41 	call	0x8214	; 0x8214 <update_sound>

	lds ZL,sync_pulse
    81fc:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL
    8200:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8202:	e0 93 b7 0c 	sts	0x0CB7, r30

	ret
    8206:	08 95       	ret

00008208 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8208:	e0 91 cf 0c 	lds	r30, 0x0CCF
	sbrc ZL,0
    820c:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    820e:	0e 94 34 46 	call	0x8c68	; 0x8c68 <ProcessMusic>
#endif

	ret
    8212:	08 95       	ret

00008214 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8214:	0f 93       	push	r16
	push r17
    8216:	1f 93       	push	r17
	push r18
    8218:	2f 93       	push	r18
	push r28
    821a:	cf 93       	push	r28
	push r29
    821c:	df 93       	push	r29

	mov r18,ZL
    821e:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8220:	00 91 d1 0c 	lds	r16, 0x0CD1
	lds r17,tr1_pos_frac
    8224:	10 91 d3 0c 	lds	r17, 0x0CD3
	add	r17,r16	;add step to fractional part of sample pos
    8228:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    822a:	00 91 d2 0c 	lds	r16, 0x0CD2
	lds ZL,tr1_pos_lo
    822e:	e0 91 d4 0c 	lds	r30, 0x0CD4
	lds ZH,tr1_pos_hi 
    8232:	f0 91 d5 0c 	lds	r31, 0x0CD5
	adc ZL,r16	;add step to low byte of sample pos
    8236:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8238:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    823a:	e0 93 d4 0c 	sts	0x0CD4, r30
	sts tr1_pos_frac,r17
    823e:	10 93 d3 0c 	sts	0x0CD3, r17
	lds r17,tr1_vol
    8242:	10 91 d0 0c 	lds	r17, 0x0CD0
	mulsu r16,r17;(sample*mixing vol)
    8246:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8248:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    824a:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    824c:	d0 2d       	mov	r29, r0
	nop
    824e:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8250:	00 91 d7 0c 	lds	r16, 0x0CD7
	lds r17,tr2_pos_frac
    8254:	10 91 d9 0c 	lds	r17, 0x0CD9
	add	r17,r16	;add step to fractional part of sample pos
    8258:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    825a:	00 91 d8 0c 	lds	r16, 0x0CD8
	lds ZL,tr2_pos_lo
    825e:	e0 91 da 0c 	lds	r30, 0x0CDA
	lds ZH,tr2_pos_hi 
    8262:	f0 91 db 0c 	lds	r31, 0x0CDB
	adc ZL,r16	;add step to low byte of sample pos
    8266:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8268:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    826a:	e0 93 da 0c 	sts	0x0CDA, r30
	sts tr2_pos_frac,r17
    826e:	10 93 d9 0c 	sts	0x0CD9, r17
	lds r17,tr2_vol
    8272:	10 91 d6 0c 	lds	r17, 0x0CD6

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8276:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8278:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    827a:	20 ff       	sbrs	r18, 0
	rjmp .
    827c:	00 c0       	rjmp	.+0      	; 0x827e <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    827e:	01 03       	mulsu	r16, r17
	clr r0
    8280:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8282:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8284:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8286:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8288:	00 91 dd 0c 	lds	r16, 0x0CDD
	lds r17,tr3_pos_frac
    828c:	10 91 df 0c 	lds	r17, 0x0CDF
	add	r17,r16				;add step to fractional part of sample pos
    8290:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8292:	00 91 de 0c 	lds	r16, 0x0CDE
	lds ZL,tr3_pos_lo
    8296:	e0 91 e0 0c 	lds	r30, 0x0CE0
	lds ZH,tr3_pos_hi 
    829a:	f0 91 e1 0c 	lds	r31, 0x0CE1
	adc ZL,r16				;add step to low byte of sample pos
    829e:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    82a0:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    82a2:	e0 93 e0 0c 	sts	0x0CE0, r30
	sts tr3_pos_frac,r17
    82a6:	10 93 df 0c 	sts	0x0CDF, r17
	lds r17,tr3_vol
    82aa:	10 91 dc 0c 	lds	r17, 0x0CDC
	mulsu r16,r17			;(sample*mixing vol)
    82ae:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    82b0:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    82b2:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    82b4:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    82b6:	00 91 e4 0c 	lds	r16, 0x0CE4
	lds r17,tr4_barrel_hi
    82ba:	10 91 e5 0c 	lds	r17, 0x0CE5
	lds ZL,tr4_divider
    82be:	e0 91 e6 0c 	lds	r30, 0x0CE6
	dec ZL	
    82c2:	ea 95       	dec	r30
	brpl ch4_no_shift	
    82c4:	92 f4       	brpl	.+36     	; 0x82ea <ch4_no_shift>

	lds ZH,tr4_params
    82c6:	f0 91 e3 0c 	lds	r31, 0x0CE3
	mov ZL,ZH
    82ca:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    82cc:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    82ce:	00 2e       	mov	r0, r16
	lsr r0
    82d0:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    82d2:	00 26       	eor	r0, r16
	bst r0,0
    82d4:	00 fa       	bst	r0, 0
	lsr r17
    82d6:	16 95       	lsr	r17
	ror r16
    82d8:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    82da:	16 f9       	bld	r17, 6
	sbrs ZH,0
    82dc:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    82de:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    82e0:	00 93 e4 0c 	sts	0x0CE4, r16
	sts tr4_barrel_hi,r17
    82e4:	10 93 e5 0c 	sts	0x0CE5, r17

	rjmp ch4_end
    82e8:	03 c0       	rjmp	.+6      	; 0x82f0 <ch4_end>

000082ea <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    82ea:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    82ec:	1a 95       	dec	r17
	brne .-4
    82ee:	f1 f7       	brne	.-4      	; 0x82ec <ch4_no_shift+0x2>

000082f0 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    82f0:	e0 93 e6 0c 	sts	0x0CE6, r30
	ldi r17,0x80 ;-128
    82f4:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    82f6:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    82f8:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    82fa:	21 ff       	sbrs	r18, 1
	rjmp .
    82fc:	00 c0       	rjmp	.+0      	; 0x82fe <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    82fe:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8300:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8302:	00 91 e2 0c 	lds	r16, 0x0CE2

	mulsu r17,r16;(sample*mixing vol)
    8306:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8308:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    830a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    830c:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    830e:	00 91 eb 0c 	lds	r16, 0x0CEB
	lds r17,tr5_step_lo 
    8312:	10 91 e9 0c 	lds	r17, 0x0CE9
	add r16,r17
    8316:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    8318:	00 93 eb 0c 	sts	0x0CEB, r16

	;add lo
	lds ZL,tr5_pos_lo
    831c:	e0 91 ec 0c 	lds	r30, 0x0CEC
	lds r17,tr5_step_hi 
    8320:	10 91 ea 0c 	lds	r17, 0x0CEA
	adc ZL,r17
    8324:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8326:	f0 91 ed 0c 	lds	r31, 0x0CED
	ldi r16,0
    832a:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    832c:	f0 1f       	adc	r31, r16

	movw r16,ZL
    832e:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8330:	00 90 ee 0c 	lds	r0, 0x0CEE
	lds r1,tr5_loop_len_hi	
    8334:	10 90 ef 0c 	lds	r1, 0x0CEF
	sub r16,r0
    8338:	00 19       	sub	r16, r0
	sbc r17,r1
    833a:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    833c:	00 90 f0 0c 	lds	r0, 0x0CF0
	lds r1,tr5_loop_end_hi
    8340:	10 90 f1 0c 	lds	r1, 0x0CF1

	cp ZL,r0
    8344:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8346:	f1 05       	cpc	r31, r1
	brlo .+2
    8348:	08 f0       	brcs	.+2      	; 0x834c <ch4_end+0x5c>
	movw ZL,r16
    834a:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    834c:	e0 93 ec 0c 	sts	0x0CEC, r30
	sts tr5_pos_hi,ZH
    8350:	f0 93 ed 0c 	sts	0x0CED, r31

	lpm	r16,Z	;load sample
    8354:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8356:	10 91 e8 0c 	lds	r17, 0x0CE8

	mulsu r16,r17;(sample*mixing vol)
    835a:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    835c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    835e:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8360:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8362:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8364:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8366:	d0 05       	cpc	r29, r0
	brlt .+2
    8368:	0c f0       	brlt	.+2      	; 0x836c <ch4_end+0x7c>
	ldi r28,127
    836a:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    836c:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    836e:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8370:	d0 05       	cpc	r29, r0
	brge .+2
    8372:	0c f4       	brge	.+2      	; 0x8376 <ch4_end+0x86>
	ldi r28,-128
    8374:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8376:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8378:	c0 93 b3 00 	sts	0x00B3, r28

0000837c <update_sound_end>:
#endif


update_sound_end:

	pop r29
    837c:	df 91       	pop	r29
	pop r28
    837e:	cf 91       	pop	r28
	pop r18
    8380:	2f 91       	pop	r18
	pop r17
    8382:	1f 91       	pop	r17
	pop r16
    8384:	0f 91       	pop	r16
	
	ret
    8386:	08 95       	ret

00008388 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
    sts sprites_tile_banks,r24
    8388:	80 93 a4 0c 	sts	0x0CA4, r24
    sts sprites_tile_banks+1,r25
    838c:	90 93 a5 0c 	sts	0x0CA5, r25
    ret
    8390:	08 95       	ret

00008392 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
    //init vram     
    ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8392:	e0 e0       	ldi	r30, 0x00	; 0
    ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8394:	f4 e0       	ldi	r31, 0x04	; 4

    ldi XL,lo8(vram)
    8396:	a0 e0       	ldi	r26, 0x00	; 0
    ldi XH,hi8(vram)
    8398:	b1 e0       	ldi	r27, 0x01	; 1

    ldi r22,RAM_TILES_COUNT
    839a:	6c e1       	ldi	r22, 0x1C	; 28

0000839c <fill_vram_loop>:

fill_vram_loop:
    st X+,r22
    839c:	6d 93       	st	X+, r22
    sbiw r30,1
    839e:	31 97       	sbiw	r30, 0x01	; 1
    brne fill_vram_loop
    83a0:	e9 f7       	brne	.-6      	; 0x839c <fill_vram_loop>

    clr r1
    83a2:	11 24       	eor	r1, r1

    ret
    83a4:	08 95       	ret

000083a6 <SetTile>:
.section .text.SetTile
SetTile:
#if SCROLLING == 1
    ;index formula is vram[((y>>3)*256)+8x+(y&7)]
    
    andi r24,0x1f
    83a6:	8f 71       	andi	r24, 0x1F	; 31
    mov r23,r22
    83a8:	76 2f       	mov	r23, r22
    lsr r22
    83aa:	66 95       	lsr	r22
    lsr r22
    83ac:	66 95       	lsr	r22
    lsr r22         ;y>>3
    83ae:	66 95       	lsr	r22
    ldi r18,8       
    83b0:	28 e0       	ldi	r18, 0x08	; 8
    mul r24,r18     ;x*8
    83b2:	82 9f       	mul	r24, r18
    movw XL,r0
    83b4:	d0 01       	movw	r26, r0
    subi XL,lo8(-(vram))
    83b6:	a0 50       	subi	r26, 0x00	; 0
    sbci XH,hi8(-(vram))
    83b8:	bf 4f       	sbci	r27, 0xFF	; 255
    add XH,r22      ;vram+((y>>3)*256)
    83ba:	b6 0f       	add	r27, r22
    andi r23,7      ;y&7    
    83bc:	77 70       	andi	r23, 0x07	; 7
    add XL,r23
    83be:	a7 0f       	add	r26, r23
                        
    subi r20,~(RAM_TILES_COUNT-1)   
    83c0:	44 5e       	subi	r20, 0xE4	; 228
    st X,r20
    83c2:	4c 93       	st	X, r20

    clr r1
    83c4:	11 24       	eor	r1, r1

    ret
    83c6:	08 95       	ret

000083c8 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
    sts tile_table_lo,r24
    83c8:	80 93 ac 0c 	sts	0x0CAC, r24
    sts tile_table_hi,r25   
    83cc:	90 93 ad 0c 	sts	0x0CAD, r25
    ret
    83d0:	08 95       	ret

000083d2 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    83d2:	80 91 b8 0c 	lds	r24, 0x0CB8
	andi r24,SYNC_FLAG_VSYNC
    83d6:	81 70       	andi	r24, 0x01	; 1
	ret
    83d8:	08 95       	ret

000083da <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    83da:	20 91 b8 0c 	lds	r18, 0x0CB8
	andi r18,~SYNC_FLAG_VSYNC
    83de:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    83e0:	20 93 b8 0c 	sts	0x0CB8, r18
	ret
    83e4:	08 95       	ret

000083e6 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    83e6:	88 23       	and	r24, r24
	brne rj_p2
    83e8:	29 f4       	brne	.+10     	; 0x83f4 <rj_p2>
		
	lds r24,joypad1_status_lo
    83ea:	80 91 bf 0c 	lds	r24, 0x0CBF
	lds r25,joypad1_status_lo+1
    83ee:	90 91 c0 0c 	lds	r25, 0x0CC0
	ret
    83f2:	08 95       	ret

000083f4 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    83f4:	80 91 c3 0c 	lds	r24, 0x0CC3
	lds r25,joypad2_status_lo+1	
    83f8:	90 91 c4 0c 	lds	r25, 0x0CC4

	ret
    83fc:	08 95       	ret

000083fe <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    83fe:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8400:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8402:	f1 f7       	brne	.-4      	; 0x8400 <WaitUs+0x2>
	nop
    8404:	00 00       	nop
	sbiw r24,1
    8406:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8408:	d1 f7       	brne	.-12     	; 0x83fe <WaitUs>

	ret
    840a:	08 95       	ret

0000840c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    840c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    840e:	fe cf       	rjmp	.-4      	; 0x840c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8410:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8412:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8414:	60 bd       	out	0x20, r22	; 32
   cli
    8416:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8418:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    841a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    841c:	78 94       	sei
   ret
    841e:	08 95       	ret

00008420 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8420:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8422:	fe cf       	rjmp	.-4      	; 0x8420 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8424:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8426:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8428:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    842a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    842c:	80 b5       	in	r24, 0x20	; 32
   sei
    842e:	78 94       	sei
   ret
    8430:	08 95       	ret

00008432 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8432:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8434:	80 93 b7 0c 	sts	0x0CB7, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8438:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    843c:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    8440:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8444:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8448:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    844c:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    8450:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8454:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8458:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    845a:	80 93 81 00 	sts	0x0081, r24

		cli
    845e:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8460:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8462:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8466:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8468:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    846c:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    846e:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8472:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8476:	78 94       	sei

00008478 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8478:	80 91 b7 0c 	lds	r24, 0x0CB7
		cpi r24,8
    847c:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    847e:	e0 f3       	brcs	.-8      	; 0x8478 <wait>

		ret
    8480:	08 95       	ret

00008482 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8482:	80 91 c9 0c 	lds	r24, 0x0CC9
		lds r25,random_value+1
    8486:	90 91 ca 0c 	lds	r25, 0x0CCA
		ret
    848a:	08 95       	ret

0000848c <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    848c:	0f 93       	push	r16
		push r17
    848e:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    8490:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8492:	0f 93       	push	r16

		lds r16,sync_pulse
    8494:	00 91 b7 0c 	lds	r16, 0x0CB7
		inc r16
    8498:	03 95       	inc	r16
		sts sync_pulse,r16
    849a:	00 93 b7 0c 	sts	0x0CB7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    849e:	00 fd       	sbrc	r16, 0
		rjmp 1f
    84a0:	08 c0       	rjmp	.+16     	; 0x84b2 <__vector_8+0x26>
		lds r17,random_value
    84a2:	10 91 c9 0c 	lds	r17, 0x0CC9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    84a6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    84aa:	10 27       	eor	r17, r16
		sts random_value,r17
    84ac:	10 93 c9 0c 	sts	0x0CC9, r17
		rjmp 2f
    84b0:	07 c0       	rjmp	.+14     	; 0x84c0 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    84b2:	10 91 ca 0c 	lds	r17, 0x0CCA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    84b6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    84ba:	10 27       	eor	r17, r16
		sts random_value+1,r17
    84bc:	10 93 ca 0c 	sts	0x0CCA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    84c0:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    84c2:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    84c6:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    84c8:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    84ca:	1f 91       	pop	r17
		pop r16
    84cc:	0f 91       	pop	r16
		reti
    84ce:	18 95       	reti

000084d0 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    84d0:	98 e0       	ldi	r25, 0x08	; 8
    84d2:	88 e1       	ldi	r24, 0x18	; 24
    84d4:	0f b6       	in	r0, 0x3f	; 63
    84d6:	f8 94       	cli
    84d8:	a8 95       	wdr
    84da:	80 93 60 00 	sts	0x0060, r24
    84de:	0f be       	out	0x3f, r0	; 63
    84e0:	90 93 60 00 	sts	0x0060, r25
	while(1);
    84e4:	ff cf       	rjmp	.-2      	; 0x84e4 <SoftReset+0x14>

000084e6 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    84e6:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    84e8:	c8 95       	lpm
    84ea:	c8 95       	lpm
		Wait200ns();
    84ec:	c8 95       	lpm
    84ee:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    84f0:	12 98       	cbi	0x02, 2	; 2
    84f2:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    84f4:	80 e0       	ldi	r24, 0x00	; 0
    84f6:	90 e0       	ldi	r25, 0x00	; 0
    84f8:	20 e0       	ldi	r18, 0x00	; 0
    84fa:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    84fc:	36 95       	lsr	r19
    84fe:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8500:	96 95       	lsr	r25
    8502:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8504:	c8 95       	lpm
    8506:	c8 95       	lpm
			Wait200ns();
    8508:	c8 95       	lpm
    850a:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    850c:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    850e:	00 9b       	sbis	0x00, 0	; 0
    8510:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8512:	01 9b       	sbis	0x00, 1	; 0
    8514:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8516:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8518:	c8 95       	lpm
    851a:	c8 95       	lpm
			Wait200ns();
    851c:	c8 95       	lpm
    851e:	c8 95       	lpm
    8520:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8522:	61 f7       	brne	.-40     	; 0x84fc <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8524:	30 93 c0 0c 	sts	0x0CC0, r19
    8528:	20 93 bf 0c 	sts	0x0CBF, r18
		joypad2_status_lo=p2ButtonsLo;
    852c:	90 93 c4 0c 	sts	0x0CC4, r25
    8530:	80 93 c3 0c 	sts	0x0CC3, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8534:	80 91 bf 0c 	lds	r24, 0x0CBF
    8538:	90 91 c0 0c 	lds	r25, 0x0CC0
    853c:	0f 97       	sbiw	r24, 0x0f	; 15
    853e:	31 f0       	breq	.+12     	; 0x854c <ReadButtons+0x66>
    8540:	80 91 c3 0c 	lds	r24, 0x0CC3
    8544:	90 91 c4 0c 	lds	r25, 0x0CC4
    8548:	0f 97       	sbiw	r24, 0x0f	; 15
    854a:	11 f4       	brne	.+4      	; 0x8550 <ReadButtons+0x6a>
		SoftReset();
    854c:	0e 94 68 42 	call	0x84d0	; 0x84d0 <SoftReset>
    8550:	08 95       	ret

00008552 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8552:	10 92 01 0d 	sts	0x0D01, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8556:	00 99       	sbic	0x00, 0	; 0
    8558:	03 c0       	rjmp	.+6      	; 0x8560 <ReadControllers+0xe>
    855a:	81 e0       	ldi	r24, 0x01	; 1
    855c:	80 93 01 0d 	sts	0x0D01, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8560:	01 99       	sbic	0x00, 1	; 0
    8562:	05 c0       	rjmp	.+10     	; 0x856e <ReadControllers+0x1c>
    8564:	80 91 01 0d 	lds	r24, 0x0D01
    8568:	82 60       	ori	r24, 0x02	; 2
    856a:	80 93 01 0d 	sts	0x0D01, r24
			
	//read the standard buttons
	ReadButtons();
    856e:	0c 94 73 42 	jmp	0x84e6	; 0x84e6 <ReadButtons>

00008572 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8572:	cf 93       	push	r28
    8574:	df 93       	push	r29
    8576:	c0 e0       	ldi	r28, 0x00	; 0
    8578:	d0 e0       	ldi	r29, 0x00	; 0
    857a:	fe 01       	movw	r30, r28
    857c:	ec 53       	subi	r30, 0x3C	; 60
    857e:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8580:	64 91       	lpm	r22, Z
    8582:	ce 01       	movw	r24, r28
    8584:	0e 94 06 42 	call	0x840c	; 0x840c <WriteEeprom>
    8588:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    858a:	c0 32       	cpi	r28, 0x20	; 32
    858c:	d1 05       	cpc	r29, r1
    858e:	a9 f7       	brne	.-22     	; 0x857a <FormatEeprom+0x8>
    8590:	c0 e2       	ldi	r28, 0x20	; 32
    8592:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8594:	6f ef       	ldi	r22, 0xFF	; 255
    8596:	ce 01       	movw	r24, r28
    8598:	0e 94 06 42 	call	0x840c	; 0x840c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    859c:	6f ef       	ldi	r22, 0xFF	; 255
    859e:	ce 01       	movw	r24, r28
    85a0:	01 96       	adiw	r24, 0x01	; 1
    85a2:	0e 94 06 42 	call	0x840c	; 0x840c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    85a6:	a0 96       	adiw	r28, 0x20	; 32
    85a8:	c1 15       	cp	r28, r1
    85aa:	88 e0       	ldi	r24, 0x08	; 8
    85ac:	d8 07       	cpc	r29, r24
    85ae:	91 f7       	brne	.-28     	; 0x8594 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    85b0:	df 91       	pop	r29
    85b2:	cf 91       	pop	r28
    85b4:	08 95       	ret

000085b6 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    85b6:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    85b8:	80 e0       	ldi	r24, 0x00	; 0
    85ba:	90 e0       	ldi	r25, 0x00	; 0
    85bc:	0e 94 10 42 	call	0x8420	; 0x8420 <ReadEeprom>
    85c0:	c8 2f       	mov	r28, r24
    85c2:	81 e0       	ldi	r24, 0x01	; 1
    85c4:	90 e0       	ldi	r25, 0x00	; 0
    85c6:	0e 94 10 42 	call	0x8420	; 0x8420 <ReadEeprom>
    85ca:	28 2f       	mov	r18, r24
    85cc:	30 e0       	ldi	r19, 0x00	; 0
    85ce:	32 2f       	mov	r19, r18
    85d0:	22 27       	eor	r18, r18
    85d2:	2c 0f       	add	r18, r28
    85d4:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    85d6:	81 e0       	ldi	r24, 0x01	; 1
    85d8:	2a 35       	cpi	r18, 0x5A	; 90
    85da:	35 45       	sbci	r19, 0x55	; 85
    85dc:	09 f0       	breq	.+2      	; 0x85e0 <isEepromFormatted+0x2a>
    85de:	80 e0       	ldi	r24, 0x00	; 0
}
    85e0:	cf 91       	pop	r28
    85e2:	08 95       	ret

000085e4 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    85e4:	8f 92       	push	r8
    85e6:	9f 92       	push	r9
    85e8:	af 92       	push	r10
    85ea:	bf 92       	push	r11
    85ec:	cf 92       	push	r12
    85ee:	df 92       	push	r13
    85f0:	ef 92       	push	r14
    85f2:	ff 92       	push	r15
    85f4:	0f 93       	push	r16
    85f6:	1f 93       	push	r17
    85f8:	cf 93       	push	r28
    85fa:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    85fc:	fb 01       	movw	r30, r22
    85fe:	11 82       	std	Z+1, r1	; 0x01
    8600:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8602:	8f 3f       	cpi	r24, 0xFF	; 255
    8604:	ff ef       	ldi	r31, 0xFF	; 255
    8606:	9f 07       	cpc	r25, r31
    8608:	89 f1       	breq	.+98     	; 0x866c <EepromBlockExists+0x88>
    860a:	6a 01       	movw	r12, r20
    860c:	8b 01       	movw	r16, r22
    860e:	7c 01       	movw	r14, r24
    8610:	a1 2c       	mov	r10, r1
    8612:	b1 2c       	mov	r11, r1
    8614:	c0 e0       	ldi	r28, 0x00	; 0
    8616:	d3 e0       	ldi	r29, 0x03	; 3
    8618:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    861a:	c5 01       	movw	r24, r10
    861c:	0e 94 10 42 	call	0x8420	; 0x8420 <ReadEeprom>
    8620:	88 2e       	mov	r8, r24
    8622:	c5 01       	movw	r24, r10
    8624:	01 96       	adiw	r24, 0x01	; 1
    8626:	0e 94 10 42 	call	0x8420	; 0x8420 <ReadEeprom>
    862a:	28 2f       	mov	r18, r24
    862c:	30 e0       	ldi	r19, 0x00	; 0
    862e:	32 2f       	mov	r19, r18
    8630:	22 27       	eor	r18, r18
    8632:	28 0d       	add	r18, r8
    8634:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8636:	2e 15       	cp	r18, r14
    8638:	3f 05       	cpc	r19, r15
    863a:	29 f4       	brne	.+10     	; 0x8646 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    863c:	f8 01       	movw	r30, r16
    863e:	b1 82       	std	Z+1, r11	; 0x01
    8640:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8642:	d0 e0       	ldi	r29, 0x00	; 0
    8644:	0b c0       	rjmp	.+22     	; 0x865c <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8646:	2f 3f       	cpi	r18, 0xFF	; 255
    8648:	3f 4f       	sbci	r19, 0xFF	; 255
    864a:	41 f4       	brne	.+16     	; 0x865c <EepromBlockExists+0x78>
    864c:	91 10       	cpse	r9, r1
    864e:	06 c0       	rjmp	.+12     	; 0x865c <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8650:	c1 14       	cp	r12, r1
    8652:	d1 04       	cpc	r13, r1
    8654:	11 f0       	breq	.+4      	; 0x865a <EepromBlockExists+0x76>
    8656:	f6 01       	movw	r30, r12
    8658:	c0 83       	st	Z, r28
    865a:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    865c:	cf 5f       	subi	r28, 0xFF	; 255
    865e:	f0 e2       	ldi	r31, 0x20	; 32
    8660:	af 0e       	add	r10, r31
    8662:	b1 1c       	adc	r11, r1
    8664:	c0 34       	cpi	r28, 0x40	; 64
    8666:	c9 f6       	brne	.-78     	; 0x861a <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8668:	8d 2f       	mov	r24, r29
    866a:	01 c0       	rjmp	.+2      	; 0x866e <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    866c:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    866e:	df 91       	pop	r29
    8670:	cf 91       	pop	r28
    8672:	1f 91       	pop	r17
    8674:	0f 91       	pop	r16
    8676:	ff 90       	pop	r15
    8678:	ef 90       	pop	r14
    867a:	df 90       	pop	r13
    867c:	cf 90       	pop	r12
    867e:	bf 90       	pop	r11
    8680:	af 90       	pop	r10
    8682:	9f 90       	pop	r9
    8684:	8f 90       	pop	r8
    8686:	08 95       	ret

00008688 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8688:	ef 92       	push	r14
    868a:	ff 92       	push	r15
    868c:	0f 93       	push	r16
    868e:	1f 93       	push	r17
    8690:	cf 93       	push	r28
    8692:	df 93       	push	r29
    8694:	00 d0       	rcall	.+0      	; 0x8696 <EepromWriteBlock+0xe>
    8696:	1f 92       	push	r1
    8698:	cd b7       	in	r28, 0x3d	; 61
    869a:	de b7       	in	r29, 0x3e	; 62
    869c:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    869e:	1a 82       	std	Y+2, r1	; 0x02
    86a0:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    86a2:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    86a4:	ae 01       	movw	r20, r28
    86a6:	4d 5f       	subi	r20, 0xFD	; 253
    86a8:	5f 4f       	sbci	r21, 0xFF	; 255
    86aa:	be 01       	movw	r22, r28
    86ac:	6f 5f       	subi	r22, 0xFF	; 255
    86ae:	7f 4f       	sbci	r23, 0xFF	; 255
    86b0:	fc 01       	movw	r30, r24
    86b2:	80 81       	ld	r24, Z
    86b4:	91 81       	ldd	r25, Z+1	; 0x01
    86b6:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    86ba:	88 23       	and	r24, r24
    86bc:	11 f0       	breq	.+4      	; 0x86c2 <EepromWriteBlock+0x3a>
    86be:	83 30       	cpi	r24, 0x03	; 3
    86c0:	19 f5       	brne	.+70     	; 0x8708 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    86c2:	89 81       	ldd	r24, Y+1	; 0x01
    86c4:	9a 81       	ldd	r25, Y+2	; 0x02
    86c6:	89 2b       	or	r24, r25
    86c8:	49 f4       	brne	.+18     	; 0x86dc <EepromWriteBlock+0x54>
    86ca:	8b 81       	ldd	r24, Y+3	; 0x03
    86cc:	88 23       	and	r24, r24
    86ce:	d9 f0       	breq	.+54     	; 0x8706 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    86d0:	f0 e2       	ldi	r31, 0x20	; 32
    86d2:	8f 9f       	mul	r24, r31
    86d4:	c0 01       	movw	r24, r0
    86d6:	11 24       	eor	r1, r1
    86d8:	9a 83       	std	Y+2, r25	; 0x02
    86da:	89 83       	std	Y+1, r24	; 0x01
    86dc:	78 01       	movw	r14, r16
    86de:	20 e2       	ldi	r18, 0x20	; 32
    86e0:	e2 0e       	add	r14, r18
    86e2:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    86e4:	f8 01       	movw	r30, r16
    86e6:	61 91       	ld	r22, Z+
    86e8:	8f 01       	movw	r16, r30
    86ea:	89 81       	ldd	r24, Y+1	; 0x01
    86ec:	9a 81       	ldd	r25, Y+2	; 0x02
    86ee:	9c 01       	movw	r18, r24
    86f0:	2f 5f       	subi	r18, 0xFF	; 255
    86f2:	3f 4f       	sbci	r19, 0xFF	; 255
    86f4:	3a 83       	std	Y+2, r19	; 0x02
    86f6:	29 83       	std	Y+1, r18	; 0x01
    86f8:	0e 94 06 42 	call	0x840c	; 0x840c <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    86fc:	0e 15       	cp	r16, r14
    86fe:	1f 05       	cpc	r17, r15
    8700:	89 f7       	brne	.-30     	; 0x86e4 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8702:	80 e0       	ldi	r24, 0x00	; 0
    8704:	01 c0       	rjmp	.+2      	; 0x8708 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8706:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8708:	0f 90       	pop	r0
    870a:	0f 90       	pop	r0
    870c:	0f 90       	pop	r0
    870e:	df 91       	pop	r29
    8710:	cf 91       	pop	r28
    8712:	1f 91       	pop	r17
    8714:	0f 91       	pop	r16
    8716:	ff 90       	pop	r15
    8718:	ef 90       	pop	r14
    871a:	08 95       	ret

0000871c <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    871c:	cf 92       	push	r12
    871e:	df 92       	push	r13
    8720:	ff 92       	push	r15
    8722:	0f 93       	push	r16
    8724:	1f 93       	push	r17
    8726:	cf 93       	push	r28
    8728:	df 93       	push	r29
    872a:	00 d0       	rcall	.+0      	; 0x872c <EepromReadBlock+0x10>
    872c:	cd b7       	in	r28, 0x3d	; 61
    872e:	de b7       	in	r29, 0x3e	; 62
    8730:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8732:	40 e0       	ldi	r20, 0x00	; 0
    8734:	50 e0       	ldi	r21, 0x00	; 0
    8736:	be 01       	movw	r22, r28
    8738:	6f 5f       	subi	r22, 0xFF	; 255
    873a:	7f 4f       	sbci	r23, 0xFF	; 255
    873c:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <EepromBlockExists>
    8740:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8742:	81 11       	cpse	r24, r1
    8744:	13 c0       	rjmp	.+38     	; 0x876c <EepromReadBlock+0x50>
    8746:	68 01       	movw	r12, r16
    8748:	80 e2       	ldi	r24, 0x20	; 32
    874a:	c8 0e       	add	r12, r24
    874c:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    874e:	89 81       	ldd	r24, Y+1	; 0x01
    8750:	9a 81       	ldd	r25, Y+2	; 0x02
    8752:	9c 01       	movw	r18, r24
    8754:	2f 5f       	subi	r18, 0xFF	; 255
    8756:	3f 4f       	sbci	r19, 0xFF	; 255
    8758:	3a 83       	std	Y+2, r19	; 0x02
    875a:	29 83       	std	Y+1, r18	; 0x01
    875c:	0e 94 10 42 	call	0x8420	; 0x8420 <ReadEeprom>
    8760:	f8 01       	movw	r30, r16
    8762:	81 93       	st	Z+, r24
    8764:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8766:	ec 15       	cp	r30, r12
    8768:	fd 05       	cpc	r31, r13
    876a:	89 f7       	brne	.-30     	; 0x874e <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    876c:	8f 2d       	mov	r24, r15
    876e:	0f 90       	pop	r0
    8770:	0f 90       	pop	r0
    8772:	df 91       	pop	r29
    8774:	cf 91       	pop	r28
    8776:	1f 91       	pop	r17
    8778:	0f 91       	pop	r16
    877a:	ff 90       	pop	r15
    877c:	df 90       	pop	r13
    877e:	cf 90       	pop	r12
    8780:	08 95       	ret

00008782 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8782:	00 97       	sbiw	r24, 0x00	; 0
    8784:	21 f0       	breq	.+8      	; 0x878e <GetPrngNumber+0xc>
    8786:	90 93 cd 0c 	sts	0x0CCD, r25
    878a:	80 93 cc 0c 	sts	0x0CCC, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    878e:	20 91 cc 0c 	lds	r18, 0x0CCC
    8792:	30 91 cd 0c 	lds	r19, 0x0CCD
    8796:	a9 01       	movw	r20, r18
    8798:	56 95       	lsr	r21
    879a:	47 95       	ror	r20
    879c:	56 95       	lsr	r21
    879e:	47 95       	ror	r20
    87a0:	c9 01       	movw	r24, r18
    87a2:	63 e0       	ldi	r22, 0x03	; 3
    87a4:	96 95       	lsr	r25
    87a6:	87 95       	ror	r24
    87a8:	6a 95       	dec	r22
    87aa:	e1 f7       	brne	.-8      	; 0x87a4 <GetPrngNumber+0x22>
    87ac:	84 27       	eor	r24, r20
    87ae:	95 27       	eor	r25, r21
    87b0:	82 27       	eor	r24, r18
    87b2:	93 27       	eor	r25, r19
    87b4:	a9 01       	movw	r20, r18
    87b6:	75 e0       	ldi	r23, 0x05	; 5
    87b8:	56 95       	lsr	r21
    87ba:	47 95       	ror	r20
    87bc:	7a 95       	dec	r23
    87be:	e1 f7       	brne	.-8      	; 0x87b8 <GetPrngNumber+0x36>
    87c0:	84 27       	eor	r24, r20
    87c2:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    87c4:	99 27       	eor	r25, r25
    87c6:	86 95       	lsr	r24
    87c8:	97 95       	ror	r25
    87ca:	88 27       	eor	r24, r24
    87cc:	36 95       	lsr	r19
    87ce:	27 95       	ror	r18
    87d0:	82 2b       	or	r24, r18
    87d2:	93 2b       	or	r25, r19
    87d4:	90 93 cd 0c 	sts	0x0CCD, r25
    87d8:	80 93 cc 0c 	sts	0x0CCC, r24
	return prng_state;   
}
    87dc:	08 95       	ret

000087de <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    87de:	fc 01       	movw	r30, r24
    87e0:	67 87       	std	Z+15, r22	; 0x0f
    87e2:	08 95       	ret

000087e4 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    87e4:	e0 ed       	ldi	r30, 0xD0	; 208
    87e6:	fc e0       	ldi	r31, 0x0C	; 12
    87e8:	81 e0       	ldi	r24, 0x01	; 1
    87ea:	91 e0       	ldi	r25, 0x01	; 1
    87ec:	95 8b       	std	Z+21, r25	; 0x15
    87ee:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    87f0:	63 8b       	std	Z+19, r22	; 0x13
    87f2:	08 95       	ret

000087f4 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    87f4:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    87f6:	90 81       	ld	r25, Z
    87f8:	9f 75       	andi	r25, 0x5F	; 95
    87fa:	90 83       	st	Z, r25
    87fc:	08 95       	ret

000087fe <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    87fe:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8800:	90 81       	ld	r25, Z
    8802:	90 64       	ori	r25, 0x40	; 64
    8804:	90 83       	st	Z, r25
    8806:	08 95       	ret

00008808 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8808:	fc 01       	movw	r30, r24
    880a:	66 87       	std	Z+14, r22	; 0x0e
    880c:	08 95       	ret

0000880e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    880e:	fc 01       	movw	r30, r24
    8810:	62 87       	std	Z+10, r22	; 0x0a
    8812:	08 95       	ret

00008814 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8814:	fc 01       	movw	r30, r24
    8816:	63 87       	std	Z+11, r22	; 0x0b
    8818:	08 95       	ret

0000881a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    881a:	cf 93       	push	r28
    881c:	df 93       	push	r29
    881e:	ec 01       	movw	r28, r24
    8820:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8822:	29 81       	ldd	r18, Y+1	; 0x01
    8824:	30 e0       	ldi	r19, 0x00	; 0
    8826:	f9 01       	movw	r30, r18
    8828:	ee 0f       	add	r30, r30
    882a:	ff 1f       	adc	r31, r31
    882c:	e8 5f       	subi	r30, 0xF8	; 248
    882e:	fd 46       	sbci	r31, 0x6D	; 109
    8830:	65 91       	lpm	r22, Z+
    8832:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8834:	f9 01       	movw	r30, r18
    8836:	e4 0f       	add	r30, r20
    8838:	f1 1d       	adc	r31, r1
    883a:	47 fd       	sbrc	r20, 7
    883c:	fa 95       	dec	r31
    883e:	ee 0f       	add	r30, r30
    8840:	ff 1f       	adc	r31, r31
    8842:	e8 5f       	subi	r30, 0xF8	; 248
    8844:	fd 46       	sbci	r31, 0x6D	; 109
    8846:	85 91       	lpm	r24, Z+
    8848:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    884a:	86 1b       	sub	r24, r22
    884c:	97 0b       	sbc	r25, r23
    884e:	68 85       	ldd	r22, Y+8	; 0x08
    8850:	70 e0       	ldi	r23, 0x00	; 0
    8852:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
	if(delta==0)delta++;
    8856:	61 15       	cp	r22, r1
    8858:	71 05       	cpc	r23, r1
    885a:	11 f4       	brne	.+4      	; 0x8860 <PatchCommand11+0x46>
    885c:	61 e0       	ldi	r22, 0x01	; 1
    885e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8860:	ea 81       	ldd	r30, Y+2	; 0x02
    8862:	86 e0       	ldi	r24, 0x06	; 6
    8864:	e8 9f       	mul	r30, r24
    8866:	f0 01       	movw	r30, r0
    8868:	11 24       	eor	r1, r1
    886a:	e0 53       	subi	r30, 0x30	; 48
    886c:	f3 4f       	sbci	r31, 0xF3	; 243
    886e:	81 81       	ldd	r24, Z+1	; 0x01
    8870:	92 81       	ldd	r25, Z+2	; 0x02
    8872:	86 0f       	add	r24, r22
    8874:	97 1f       	adc	r25, r23
    8876:	92 83       	std	Z+2, r25	; 0x02
    8878:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    887a:	7e 83       	std	Y+6, r23	; 0x06
    887c:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    887e:	88 81       	ld	r24, Y
    8880:	88 60       	ori	r24, 0x08	; 8
    8882:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8884:	89 81       	ldd	r24, Y+1	; 0x01
    8886:	48 0f       	add	r20, r24
    8888:	4f 83       	std	Y+7, r20	; 0x07
}
    888a:	df 91       	pop	r29
    888c:	cf 91       	pop	r28
    888e:	08 95       	ret

00008890 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8890:	fc 01       	movw	r30, r24
    8892:	60 87       	std	Z+8, r22	; 0x08
    8894:	08 95       	ret

00008896 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8896:	fc 01       	movw	r30, r24
    8898:	64 83       	std	Z+4, r22	; 0x04
    889a:	08 95       	ret

0000889c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    889c:	fc 01       	movw	r30, r24
    889e:	82 81       	ldd	r24, Z+2	; 0x02
    88a0:	0c 94 70 48 	jmp	0x90e0	; 0x90e0 <SetMixerWave>

000088a4 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    88a4:	fc 01       	movw	r30, r24
	track->note+=param;
    88a6:	91 81       	ldd	r25, Z+1	; 0x01
    88a8:	69 0f       	add	r22, r25
    88aa:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    88ac:	82 81       	ldd	r24, Z+2	; 0x02
    88ae:	0c 94 59 48 	jmp	0x90b2	; 0x90b2 <SetMixerNote>

000088b2 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    88b2:	fc 01       	movw	r30, r24
	track->note-=param;
    88b4:	91 81       	ldd	r25, Z+1	; 0x01
    88b6:	96 1b       	sub	r25, r22
    88b8:	69 2f       	mov	r22, r25
    88ba:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    88bc:	82 81       	ldd	r24, Z+2	; 0x02
    88be:	0c 94 59 48 	jmp	0x90b2	; 0x90b2 <SetMixerNote>

000088c2 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    88c2:	1f 93       	push	r17
    88c4:	cf 93       	push	r28
    88c6:	df 93       	push	r29
    88c8:	ec 01       	movw	r28, r24
    88ca:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    88cc:	8a 81       	ldd	r24, Y+2	; 0x02
    88ce:	0e 94 59 48 	call	0x90b2	; 0x90b2 <SetMixerNote>
	track->note=param;
    88d2:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    88d4:	88 81       	ld	r24, Y
    88d6:	87 7f       	andi	r24, 0xF7	; 247
    88d8:	88 83       	st	Y, r24
}
    88da:	df 91       	pop	r29
    88dc:	cf 91       	pop	r28
    88de:	1f 91       	pop	r17
    88e0:	08 95       	ret

000088e2 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    88e2:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    88e4:	14 96       	adiw	r26, 0x04	; 4
    88e6:	8c 91       	ld	r24, X
    88e8:	14 97       	sbiw	r26, 0x04	; 4
    88ea:	88 23       	and	r24, r24
    88ec:	19 f1       	breq	.+70     	; 0x8934 <PatchCommand14+0x52>
    88ee:	55 96       	adiw	r26, 0x15	; 21
    88f0:	2d 91       	ld	r18, X+
    88f2:	3c 91       	ld	r19, X
    88f4:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    88f6:	66 23       	and	r22, r22
    88f8:	79 f0       	breq	.+30     	; 0x8918 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    88fa:	77 27       	eor	r23, r23
    88fc:	67 fd       	sbrc	r22, 7
    88fe:	70 95       	com	r23
    8900:	6f 5f       	subi	r22, 0xFF	; 255
    8902:	7f 4f       	sbci	r23, 0xFF	; 255
    8904:	ab 01       	movw	r20, r22
    8906:	44 0f       	add	r20, r20
    8908:	55 1f       	adc	r21, r21
    890a:	64 0f       	add	r22, r20
    890c:	75 1f       	adc	r23, r21
    890e:	26 1b       	sub	r18, r22
    8910:	37 0b       	sbc	r19, r23
    8912:	09 c0       	rjmp	.+18     	; 0x8926 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8914:	ef 3f       	cpi	r30, 0xFF	; 255
    8916:	39 f0       	breq	.+14     	; 0x8926 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8918:	23 50       	subi	r18, 0x03	; 3
    891a:	31 09       	sbc	r19, r1
    891c:	f9 01       	movw	r30, r18
    891e:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8920:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8922:	ed 30       	cpi	r30, 0x0D	; 13
    8924:	b9 f7       	brne	.-18     	; 0x8914 <PatchCommand14+0x32>
    8926:	56 96       	adiw	r26, 0x16	; 22
    8928:	3c 93       	st	X, r19
    892a:	2e 93       	st	-X, r18
    892c:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    892e:	81 50       	subi	r24, 0x01	; 1
    8930:	14 96       	adiw	r26, 0x04	; 4
    8932:	8c 93       	st	X, r24
    8934:	08 95       	ret

00008936 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8936:	90 93 7a 0d 	sts	0x0D7A, r25
    893a:	80 93 79 0d 	sts	0x0D79, r24

	masterVolume=DEFAULT_MASTER_VOL;
    893e:	8f e6       	ldi	r24, 0x6F	; 111
    8940:	80 93 7c 0d 	sts	0x0D7C, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8944:	10 92 ce 0c 	sts	0x0CCE, r1
    8948:	e4 e1       	ldi	r30, 0x14	; 20
    894a:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    894c:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    894e:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8950:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8952:	28 e1       	ldi	r18, 0x18	; 24
    8954:	df 01       	movw	r26, r30
    8956:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8958:	8c 93       	st	X, r24
    895a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    895c:	9c 93       	st	X, r25
    895e:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8960:	1c 92       	st	X, r1
    8962:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8964:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8966:	10 82       	st	Z, r1
    8968:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    896a:	2c 93       	st	X, r18
    896c:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    896e:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8970:	8f 5f       	subi	r24, 0xFF	; 255
    8972:	77 96       	adiw	r30, 0x17	; 23
    8974:	85 30       	cpi	r24, 0x05	; 5
    8976:	71 f7       	brne	.-36     	; 0x8954 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8978:	08 95       	ret

0000897a <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
    897a:	e4 e0       	ldi	r30, 0x04	; 4
    897c:	fd e0       	ldi	r31, 0x0D	; 13
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    897e:	3f ef       	ldi	r19, 0xFF	; 255

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8980:	20 81       	ld	r18, Z
    8982:	2f 77       	andi	r18, 0x7F	; 127
    8984:	20 83       	st	Z, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8986:	33 83       	std	Z+3, r19	; 0x03
    8988:	77 96       	adiw	r30, 0x17	; 23
}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    898a:	2d e0       	ldi	r18, 0x0D	; 13
    898c:	e7 37       	cpi	r30, 0x77	; 119
    898e:	f2 07       	cpc	r31, r18
    8990:	b9 f7       	brne	.-18     	; 0x8980 <StartSong+0x6>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    8992:	01 96       	adiw	r24, 0x01	; 1
    8994:	90 93 81 0d 	sts	0x0D81, r25
    8998:	80 93 80 0d 	sts	0x0D80, r24
		songStart=song+1;//skip first delta-time
    899c:	90 93 03 0d 	sts	0x0D03, r25
    89a0:	80 93 02 0d 	sts	0x0D02, r24
		loopStart=song+1;
    89a4:	90 93 83 0d 	sts	0x0D83, r25
    89a8:	80 93 82 0d 	sts	0x0D82, r24
		nextDeltaTime=0;
    89ac:	10 92 7e 0d 	sts	0x0D7E, r1
    89b0:	10 92 7d 0d 	sts	0x0D7D, r1
		currDeltaTime=0;
    89b4:	10 92 78 0d 	sts	0x0D78, r1
    89b8:	10 92 77 0d 	sts	0x0D77, r1
		songSpeed=0;
    89bc:	10 92 7f 0d 	sts	0x0D7F, r1

		lastStatus=0;
    89c0:	10 92 7b 0d 	sts	0x0D7B, r1
		playSong=true;
    89c4:	81 e0       	ldi	r24, 0x01	; 1
    89c6:	80 93 ce 0c 	sts	0x0CCE, r24
    89ca:	08 95       	ret

000089cc <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    89cc:	e4 e0       	ldi	r30, 0x04	; 4
    89ce:	fd e0       	ldi	r31, 0x0D	; 13
    89d0:	8a ef       	ldi	r24, 0xFA	; 250
    89d2:	87 87       	std	Z+15, r24	; 0x0f
    89d4:	86 a3       	std	Z+38, r24	; 0x26
    89d6:	80 93 41 0d 	sts	0x0D41, r24
    89da:	80 93 58 0d 	sts	0x0D58, r24
    89de:	80 93 6f 0d 	sts	0x0D6F, r24
	}

	playSong=false;
    89e2:	10 92 ce 0c 	sts	0x0CCE, r1
    89e6:	08 95       	ret

000089e8 <ResumeSong>:
}


void ResumeSong(){
	playSong=true;
    89e8:	81 e0       	ldi	r24, 0x01	; 1
    89ea:	80 93 ce 0c 	sts	0x0CCE, r24
    89ee:	08 95       	ret

000089f0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    89f0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    89f2:	ed 91       	ld	r30, X+
    89f4:	fc 91       	ld	r31, X
    89f6:	11 97       	sbiw	r26, 0x01	; 1
    89f8:	9f 01       	movw	r18, r30
    89fa:	2f 5f       	subi	r18, 0xFF	; 255
    89fc:	3f 4f       	sbci	r19, 0xFF	; 255
    89fe:	11 96       	adiw	r26, 0x01	; 1
    8a00:	3c 93       	st	X, r19
    8a02:	2e 93       	st	-X, r18
    8a04:	e4 91       	lpm	r30, Z
    8a06:	e7 fd       	sbrc	r30, 7
    8a08:	03 c0       	rjmp	.+6      	; 0x8a10 <ReadVarLen+0x20>
    8a0a:	8e 2f       	mov	r24, r30
    8a0c:	90 e0       	ldi	r25, 0x00	; 0
    8a0e:	08 95       	ret
    {
       value &= 0x7F;
    8a10:	ef 77       	andi	r30, 0x7F	; 127
    8a12:	8e 2f       	mov	r24, r30
    8a14:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8a16:	96 95       	lsr	r25
    8a18:	98 2f       	mov	r25, r24
    8a1a:	88 27       	eor	r24, r24
    8a1c:	97 95       	ror	r25
    8a1e:	87 95       	ror	r24
    8a20:	2f 5f       	subi	r18, 0xFF	; 255
    8a22:	3f 4f       	sbci	r19, 0xFF	; 255
    8a24:	f9 01       	movw	r30, r18
    8a26:	31 97       	sbiw	r30, 0x01	; 1
    8a28:	e4 91       	lpm	r30, Z
    8a2a:	4e 2f       	mov	r20, r30
    8a2c:	4f 77       	andi	r20, 0x7F	; 127
    8a2e:	84 0f       	add	r24, r20
    8a30:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8a32:	e7 fd       	sbrc	r30, 7
    8a34:	f0 cf       	rjmp	.-32     	; 0x8a16 <ReadVarLen+0x26>
    8a36:	2d 93       	st	X+, r18
    8a38:	3c 93       	st	X, r19
    }


    return value;
}
    8a3a:	08 95       	ret

00008a3c <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8a3c:	ef 92       	push	r14
    8a3e:	ff 92       	push	r15
    8a40:	0f 93       	push	r16
    8a42:	1f 93       	push	r17
    8a44:	cf 93       	push	r28
    8a46:	df 93       	push	r29
    8a48:	1f 92       	push	r1
    8a4a:	cd b7       	in	r28, 0x3d	; 61
    8a4c:	de b7       	in	r29, 0x3e	; 62
    8a4e:	7c 01       	movw	r14, r24
    8a50:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8a52:	fc 01       	movw	r30, r24
    8a54:	80 81       	ld	r24, Z
    8a56:	08 2f       	mov	r16, r24
    8a58:	00 1f       	adc	r16, r16
    8a5a:	00 27       	eor	r16, r16
    8a5c:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8a5e:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8a60:	9f ef       	ldi	r25, 0xFF	; 255
    8a62:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8a64:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8a66:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8a68:	87 7b       	andi	r24, 0xB7	; 183
    8a6a:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8a6c:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8a6e:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8a70:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8a72:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8a74:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8a76:	82 81       	ldd	r24, Z+2	; 0x02
    8a78:	83 30       	cpi	r24, 0x03	; 3
    8a7a:	69 f4       	brne	.+26     	; 0x8a96 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8a7c:	01 11       	cpse	r16, r1
    8a7e:	01 c0       	rjmp	.+2      	; 0x8a82 <TriggerCommon+0x46>
    8a80:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8a82:	81 e0       	ldi	r24, 0x01	; 1
    8a84:	91 e0       	ldi	r25, 0x01	; 1
    8a86:	90 93 e5 0c 	sts	0x0CE5, r25
    8a8a:	80 93 e4 0c 	sts	0x0CE4, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8a8e:	81 e0       	ldi	r24, 0x01	; 1
    8a90:	80 93 e3 0c 	sts	0x0CE3, r24
    8a94:	39 c0       	rjmp	.+114    	; 0x8b08 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8a96:	84 30       	cpi	r24, 0x04	; 4
    8a98:	69 f5       	brne	.+90     	; 0x8af4 <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8a9a:	10 92 eb 0c 	sts	0x0CEB, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8a9e:	80 91 79 0d 	lds	r24, 0x0D79
    8aa2:	90 91 7a 0d 	lds	r25, 0x0D7A
    8aa6:	f9 e0       	ldi	r31, 0x09	; 9
    8aa8:	6f 9f       	mul	r22, r31
    8aaa:	80 0d       	add	r24, r0
    8aac:	91 1d       	adc	r25, r1
    8aae:	11 24       	eor	r1, r1
    8ab0:	fc 01       	movw	r30, r24
    8ab2:	31 96       	adiw	r30, 0x01	; 1
    8ab4:	a5 91       	lpm	r26, Z+
    8ab6:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8ab8:	b0 93 ed 0c 	sts	0x0CED, r27
    8abc:	a0 93 ec 0c 	sts	0x0CEC, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8ac0:	ac 01       	movw	r20, r24
    8ac2:	49 5f       	subi	r20, 0xF9	; 249
    8ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ac6:	fa 01       	movw	r30, r20
    8ac8:	65 91       	lpm	r22, Z+
    8aca:	74 91       	lpm	r23, Z
    8acc:	05 96       	adiw	r24, 0x05	; 5
    8ace:	fc 01       	movw	r30, r24
    8ad0:	85 91       	lpm	r24, Z+
    8ad2:	94 91       	lpm	r25, Z
    8ad4:	68 1b       	sub	r22, r24
    8ad6:	79 0b       	sbc	r23, r25
    8ad8:	70 93 ef 0c 	sts	0x0CEF, r23
    8adc:	60 93 ee 0c 	sts	0x0CEE, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8ae0:	fa 01       	movw	r30, r20
    8ae2:	85 91       	lpm	r24, Z+
    8ae4:	94 91       	lpm	r25, Z
    8ae6:	a8 0f       	add	r26, r24
    8ae8:	b9 1f       	adc	r27, r25
    8aea:	b0 93 f1 0c 	sts	0x0CF1, r27
    8aee:	a0 93 f0 0c 	sts	0x0CF0, r26
    8af2:	05 c0       	rjmp	.+10     	; 0x8afe <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8af4:	60 e0       	ldi	r22, 0x00	; 0
    8af6:	29 83       	std	Y+1, r18	; 0x01
    8af8:	0e 94 70 48 	call	0x90e0	; 0x90e0 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8afc:	29 81       	ldd	r18, Y+1	; 0x01
    8afe:	62 2f       	mov	r22, r18
    8b00:	f7 01       	movw	r30, r14
    8b02:	82 81       	ldd	r24, Z+2	; 0x02
    8b04:	0e 94 59 48 	call	0x90b2	; 0x90b2 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8b08:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8b0a:	00 23       	and	r16, r16
    8b0c:	11 f0       	breq	.+4      	; 0x8b12 <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8b0e:	11 8b       	std	Z+17, r17	; 0x11
    8b10:	01 c0       	rjmp	.+2      	; 0x8b14 <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8b12:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8b14:	e0 91 79 0d 	lds	r30, 0x0D79
    8b18:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8b1c:	39 e0       	ldi	r19, 0x09	; 9
    8b1e:	13 9f       	mul	r17, r19
    8b20:	e0 0d       	add	r30, r0
    8b22:	f1 1d       	adc	r31, r1
    8b24:	11 24       	eor	r1, r1
    8b26:	33 96       	adiw	r30, 0x03	; 3
    8b28:	85 91       	lpm	r24, Z+
    8b2a:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8b2c:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8b2e:	00 97       	sbiw	r24, 0x00	; 0
    8b30:	19 f4       	brne	.+6      	; 0x8b38 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8b32:	16 8a       	std	Z+22, r1	; 0x16
    8b34:	15 8a       	std	Z+21, r1	; 0x15
    8b36:	08 c0       	rjmp	.+16     	; 0x8b48 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8b38:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8b3a:	fc 01       	movw	r30, r24
    8b3c:	24 91       	lpm	r18, Z
    8b3e:	f7 01       	movw	r30, r14
    8b40:	22 8b       	std	Z+18, r18	; 0x12
    8b42:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8b44:	96 8b       	std	Z+22, r25	; 0x16
    8b46:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8b48:	0f 90       	pop	r0
    8b4a:	df 91       	pop	r29
    8b4c:	cf 91       	pop	r28
    8b4e:	1f 91       	pop	r17
    8b50:	0f 91       	pop	r16
    8b52:	ff 90       	pop	r15
    8b54:	ef 90       	pop	r14
    8b56:	08 95       	ret

00008b58 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8b58:	cf 93       	push	r28
    8b5a:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8b5c:	e0 91 79 0d 	lds	r30, 0x0D79
    8b60:	f0 91 7a 0d 	lds	r31, 0x0D7A
    8b64:	99 e0       	ldi	r25, 0x09	; 9
    8b66:	89 9f       	mul	r24, r25
    8b68:	e0 0d       	add	r30, r0
    8b6a:	f1 1d       	adc	r31, r1
    8b6c:	11 24       	eor	r1, r1
    8b6e:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8b70:	e1 30       	cpi	r30, 0x01	; 1
    8b72:	e9 f0       	breq	.+58     	; 0x8bae <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8b74:	e2 30       	cpi	r30, 0x02	; 2
    8b76:	e9 f0       	breq	.+58     	; 0x8bb2 <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8b78:	20 91 1b 0d 	lds	r18, 0x0D1B
    8b7c:	27 ff       	sbrs	r18, 7
    8b7e:	1d c0       	rjmp	.+58     	; 0x8bba <TriggerFx+0x62>
    8b80:	20 91 2c 0d 	lds	r18, 0x0D2C
    8b84:	28 13       	cpse	r18, r24
    8b86:	02 c0       	rjmp	.+4      	; 0x8b8c <TriggerFx+0x34>
    8b88:	41 11       	cpse	r20, r1
    8b8a:	17 c0       	rjmp	.+46     	; 0x8bba <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8b8c:	20 91 32 0d 	lds	r18, 0x0D32
    8b90:	27 ff       	sbrs	r18, 7
    8b92:	11 c0       	rjmp	.+34     	; 0x8bb6 <TriggerFx+0x5e>
    8b94:	20 91 43 0d 	lds	r18, 0x0D43
    8b98:	28 13       	cpse	r18, r24
    8b9a:	02 c0       	rjmp	.+4      	; 0x8ba0 <TriggerFx+0x48>
    8b9c:	41 11       	cpse	r20, r1
    8b9e:	0b c0       	rjmp	.+22     	; 0x8bb6 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8ba0:	20 91 2f 0d 	lds	r18, 0x0D2F
    8ba4:	90 91 46 0d 	lds	r25, 0x0D46
    8ba8:	92 17       	cp	r25, r18
    8baa:	28 f4       	brcc	.+10     	; 0x8bb6 <TriggerFx+0x5e>
    8bac:	06 c0       	rjmp	.+12     	; 0x8bba <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8bae:	c3 e0       	ldi	r28, 0x03	; 3
    8bb0:	05 c0       	rjmp	.+10     	; 0x8bbc <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8bb2:	c4 e0       	ldi	r28, 0x04	; 4
    8bb4:	03 c0       	rjmp	.+6      	; 0x8bbc <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8bb6:	c2 e0       	ldi	r28, 0x02	; 2
    8bb8:	01 c0       	rjmp	.+2      	; 0x8bbc <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8bba:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8bbc:	97 e1       	ldi	r25, 0x17	; 23
    8bbe:	c9 9f       	mul	r28, r25
    8bc0:	e0 01       	movw	r28, r0
    8bc2:	11 24       	eor	r1, r1
    8bc4:	cc 5f       	subi	r28, 0xFC	; 252
    8bc6:	d2 4f       	sbci	r29, 0xF2	; 242
    8bc8:	90 e8       	ldi	r25, 0x80	; 128
    8bca:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8bcc:	1e 8a       	std	Y+22, r1	; 0x16
    8bce:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8bd0:	20 e5       	ldi	r18, 0x50	; 80
    8bd2:	46 2f       	mov	r20, r22
    8bd4:	68 2f       	mov	r22, r24
    8bd6:	ce 01       	movw	r24, r28
    8bd8:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8bdc:	88 81       	ld	r24, Y
    8bde:	80 62       	ori	r24, 0x20	; 32
    8be0:	88 83       	st	Y, r24
}
    8be2:	df 91       	pop	r29
    8be4:	cf 91       	pop	r28
    8be6:	08 95       	ret

00008be8 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8be8:	cf 93       	push	r28
    8bea:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8bec:	a8 2f       	mov	r26, r24
    8bee:	b0 e0       	ldi	r27, 0x00	; 0
    8bf0:	97 e1       	ldi	r25, 0x17	; 23
    8bf2:	89 9f       	mul	r24, r25
    8bf4:	f0 01       	movw	r30, r0
    8bf6:	11 24       	eor	r1, r1
    8bf8:	ec 5f       	subi	r30, 0xFC	; 252
    8bfa:	f2 4f       	sbci	r31, 0xF2	; 242
    8bfc:	80 81       	ld	r24, Z
    8bfe:	85 ff       	sbrs	r24, 5
    8c00:	02 c0       	rjmp	.+4      	; 0x8c06 <TriggerNote+0x1e>
    8c02:	87 fd       	sbrc	r24, 7
    8c04:	2e c0       	rjmp	.+92     	; 0x8c62 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8c06:	21 11       	cpse	r18, r1
    8c08:	18 c0       	rjmp	.+48     	; 0x8c3a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8c0a:	97 e1       	ldi	r25, 0x17	; 23
    8c0c:	9a 9f       	mul	r25, r26
    8c0e:	f0 01       	movw	r30, r0
    8c10:	9b 9f       	mul	r25, r27
    8c12:	f0 0d       	add	r31, r0
    8c14:	11 24       	eor	r1, r1
    8c16:	ec 5f       	subi	r30, 0xFC	; 252
    8c18:	f2 4f       	sbci	r31, 0xF2	; 242
    8c1a:	97 85       	ldd	r25, Z+15	; 0x0f
    8c1c:	91 11       	cpse	r25, r1
    8c1e:	02 c0       	rjmp	.+4      	; 0x8c24 <TriggerNote+0x3c>
    8c20:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8c22:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8c24:	97 e1       	ldi	r25, 0x17	; 23
    8c26:	9a 9f       	mul	r25, r26
    8c28:	f0 01       	movw	r30, r0
    8c2a:	9b 9f       	mul	r25, r27
    8c2c:	f0 0d       	add	r31, r0
    8c2e:	11 24       	eor	r1, r1
    8c30:	ec 5f       	subi	r30, 0xFC	; 252
    8c32:	f2 4f       	sbci	r31, 0xF2	; 242
    8c34:	8f 7b       	andi	r24, 0xBF	; 191
    8c36:	80 83       	st	Z, r24
    8c38:	14 c0       	rjmp	.+40     	; 0x8c62 <TriggerNote+0x7a>
    8c3a:	82 2f       	mov	r24, r18
    8c3c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8c3e:	97 e1       	ldi	r25, 0x17	; 23
    8c40:	9a 9f       	mul	r25, r26
    8c42:	e0 01       	movw	r28, r0
    8c44:	9b 9f       	mul	r25, r27
    8c46:	d0 0d       	add	r29, r0
    8c48:	11 24       	eor	r1, r1
    8c4a:	cc 5f       	subi	r28, 0xFC	; 252
    8c4c:	d2 4f       	sbci	r29, 0xF2	; 242
    8c4e:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8c50:	1e 8a       	std	Y+22, r1	; 0x16
    8c52:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8c54:	48 2f       	mov	r20, r24
    8c56:	ce 01       	movw	r24, r28
    8c58:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8c5c:	88 81       	ld	r24, Y
    8c5e:	80 62       	ori	r24, 0x20	; 32
    8c60:	88 83       	st	Y, r24
		}

	}
}
    8c62:	df 91       	pop	r29
    8c64:	cf 91       	pop	r28
    8c66:	08 95       	ret

00008c68 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8c68:	6f 92       	push	r6
    8c6a:	7f 92       	push	r7
    8c6c:	8f 92       	push	r8
    8c6e:	9f 92       	push	r9
    8c70:	af 92       	push	r10
    8c72:	bf 92       	push	r11
    8c74:	cf 92       	push	r12
    8c76:	df 92       	push	r13
    8c78:	ef 92       	push	r14
    8c7a:	ff 92       	push	r15
    8c7c:	0f 93       	push	r16
    8c7e:	1f 93       	push	r17
    8c80:	cf 93       	push	r28
    8c82:	df 93       	push	r29
    8c84:	c4 e0       	ldi	r28, 0x04	; 4
    8c86:	dd e0       	ldi	r29, 0x0D	; 13
    8c88:	00 ed       	ldi	r16, 0xD0	; 208
    8c8a:	1c e0       	ldi	r17, 0x0C	; 12
    8c8c:	d8 01       	movw	r26, r16
    8c8e:	9e 01       	movw	r18, r28
    8c90:	40 e0       	ldi	r20, 0x00	; 0
    8c92:	50 e0       	ldi	r21, 0x00	; 0
    8c94:	ca 01       	movw	r24, r20
    8c96:	8c 5f       	subi	r24, 0xFC	; 252
    8c98:	92 4f       	sbci	r25, 0xF2	; 242
    8c9a:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8c9c:	fc 01       	movw	r30, r24
    8c9e:	87 85       	ldd	r24, Z+15	; 0x0f
    8ca0:	88 23       	and	r24, r24
    8ca2:	91 f0       	breq	.+36     	; 0x8cc8 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8ca4:	66 85       	ldd	r22, Z+14	; 0x0e
    8ca6:	99 27       	eor	r25, r25
    8ca8:	87 fd       	sbrc	r24, 7
    8caa:	90 95       	com	r25
    8cac:	86 0f       	add	r24, r22
    8cae:	91 1d       	adc	r25, r1
    8cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    8cb2:	91 05       	cpc	r25, r1
    8cb4:	19 f0       	breq	.+6      	; 0x8cbc <ProcessMusic+0x54>
    8cb6:	14 f0       	brlt	.+4      	; 0x8cbc <ProcessMusic+0x54>
    8cb8:	8f ef       	ldi	r24, 0xFF	; 255
    8cba:	90 e0       	ldi	r25, 0x00	; 0
    8cbc:	97 ff       	sbrs	r25, 7
    8cbe:	02 c0       	rjmp	.+4      	; 0x8cc4 <ProcessMusic+0x5c>
    8cc0:	80 e0       	ldi	r24, 0x00	; 0
    8cc2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8cc4:	f6 01       	movw	r30, r12
    8cc6:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    8cc8:	f9 01       	movw	r30, r18
    8cca:	f0 80       	ld	r15, Z
    8ccc:	f3 fe       	sbrs	r15, 3
    8cce:	2a c0       	rjmp	.+84     	; 0x8d24 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8cd0:	65 81       	ldd	r22, Z+5	; 0x05
    8cd2:	76 81       	ldd	r23, Z+6	; 0x06
    8cd4:	11 96       	adiw	r26, 0x01	; 1
    8cd6:	8d 91       	ld	r24, X+
    8cd8:	9c 91       	ld	r25, X
    8cda:	12 97       	sbiw	r26, 0x02	; 2
    8cdc:	86 0f       	add	r24, r22
    8cde:	97 1f       	adc	r25, r23
    8ce0:	12 96       	adiw	r26, 0x02	; 2
    8ce2:	9c 93       	st	X, r25
    8ce4:	8e 93       	st	-X, r24
    8ce6:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8ce8:	f6 01       	movw	r30, r12
    8cea:	e7 80       	ldd	r14, Z+7	; 0x07
    8cec:	ee 2d       	mov	r30, r14
    8cee:	f0 e0       	ldi	r31, 0x00	; 0
    8cf0:	ee 0f       	add	r30, r30
    8cf2:	ff 1f       	adc	r31, r31
    8cf4:	e8 5f       	subi	r30, 0xF8	; 248
    8cf6:	fd 46       	sbci	r31, 0x6D	; 109
    8cf8:	c5 90       	lpm	r12, Z+
    8cfa:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8cfc:	16 16       	cp	r1, r22
    8cfe:	17 06       	cpc	r1, r23
    8d00:	24 f4       	brge	.+8      	; 0x8d0a <ProcessMusic+0xa2>
    8d02:	8c 15       	cp	r24, r12
    8d04:	9d 05       	cpc	r25, r13
    8d06:	30 f4       	brcc	.+12     	; 0x8d14 <ProcessMusic+0xac>
    8d08:	0d c0       	rjmp	.+26     	; 0x8d24 <ProcessMusic+0xbc>
    8d0a:	67 2b       	or	r22, r23
    8d0c:	59 f0       	breq	.+22     	; 0x8d24 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8d0e:	c8 16       	cp	r12, r24
    8d10:	d9 06       	cpc	r13, r25
    8d12:	40 f0       	brcs	.+16     	; 0x8d24 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8d14:	12 96       	adiw	r26, 0x02	; 2
    8d16:	dc 92       	st	X, r13
    8d18:	ce 92       	st	-X, r12
    8d1a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8d1c:	8f 2d       	mov	r24, r15
    8d1e:	87 7f       	andi	r24, 0xF7	; 247
    8d20:	f9 01       	movw	r30, r18
    8d22:	80 83       	st	Z, r24
    8d24:	49 5e       	subi	r20, 0xE9	; 233
    8d26:	5f 4f       	sbci	r21, 0xFF	; 255
    8d28:	29 5e       	subi	r18, 0xE9	; 233
    8d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    8d2c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8d2e:	43 37       	cpi	r20, 0x73	; 115
    8d30:	51 05       	cpc	r21, r1
    8d32:	09 f0       	breq	.+2      	; 0x8d36 <ProcessMusic+0xce>
    8d34:	af cf       	rjmp	.-162    	; 0x8c94 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8d36:	80 91 ce 0c 	lds	r24, 0x0CCE
    8d3a:	88 23       	and	r24, r24
    8d3c:	09 f4       	brne	.+2      	; 0x8d40 <ProcessMusic+0xd8>
    8d3e:	cc c0       	rjmp	.+408    	; 0x8ed8 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8d40:	57 e1       	ldi	r21, 0x17	; 23
    8d42:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8d44:	80 91 77 0d 	lds	r24, 0x0D77
    8d48:	90 91 78 0d 	lds	r25, 0x0D78
    8d4c:	20 91 7d 0d 	lds	r18, 0x0D7D
    8d50:	30 91 7e 0d 	lds	r19, 0x0D7E
    8d54:	82 17       	cp	r24, r18
    8d56:	93 07       	cpc	r25, r19
    8d58:	09 f0       	breq	.+2      	; 0x8d5c <ProcessMusic+0xf4>
    8d5a:	b9 c0       	rjmp	.+370    	; 0x8ece <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8d5c:	20 91 80 0d 	lds	r18, 0x0D80
    8d60:	30 91 81 0d 	lds	r19, 0x0D81
    8d64:	b9 01       	movw	r22, r18
    8d66:	6f 5f       	subi	r22, 0xFF	; 255
    8d68:	7f 4f       	sbci	r23, 0xFF	; 255
    8d6a:	70 93 81 0d 	sts	0x0D81, r23
    8d6e:	60 93 80 0d 	sts	0x0D80, r22
    8d72:	f9 01       	movw	r30, r18
    8d74:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8d76:	4f 3f       	cpi	r20, 0xFF	; 255
    8d78:	79 f5       	brne	.+94     	; 0x8dd8 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8d7a:	a9 01       	movw	r20, r18
    8d7c:	4e 5f       	subi	r20, 0xFE	; 254
    8d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d80:	50 93 81 0d 	sts	0x0D81, r21
    8d84:	40 93 80 0d 	sts	0x0D80, r20
    8d88:	fb 01       	movw	r30, r22
    8d8a:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8d8c:	6f 32       	cpi	r22, 0x2F	; 47
    8d8e:	19 f4       	brne	.+6      	; 0x8d96 <ProcessMusic+0x12e>
						playSong=false;
    8d90:	10 92 ce 0c 	sts	0x0CCE, r1
						break;	
    8d94:	9c c0       	rjmp	.+312    	; 0x8ece <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8d96:	66 30       	cpi	r22, 0x06	; 6
    8d98:	09 f0       	breq	.+2      	; 0x8d9c <ProcessMusic+0x134>
    8d9a:	8c c0       	rjmp	.+280    	; 0x8eb4 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8d9c:	fa 01       	movw	r30, r20
    8d9e:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8da0:	c9 01       	movw	r24, r18
    8da2:	04 96       	adiw	r24, 0x04	; 4
    8da4:	90 93 81 0d 	sts	0x0D81, r25
    8da8:	80 93 80 0d 	sts	0x0D80, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8dac:	f9 01       	movw	r30, r18
    8dae:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8db0:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8db2:	e3 35       	cpi	r30, 0x53	; 83
    8db4:	29 f4       	brne	.+10     	; 0x8dc0 <ProcessMusic+0x158>
							loopStart=songPos;
    8db6:	90 93 83 0d 	sts	0x0D83, r25
    8dba:	80 93 82 0d 	sts	0x0D82, r24
    8dbe:	7a c0       	rjmp	.+244    	; 0x8eb4 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8dc0:	e5 34       	cpi	r30, 0x45	; 69
    8dc2:	09 f0       	breq	.+2      	; 0x8dc6 <ProcessMusic+0x15e>
    8dc4:	77 c0       	rjmp	.+238    	; 0x8eb4 <ProcessMusic+0x24c>
							songPos=loopStart;
    8dc6:	80 91 82 0d 	lds	r24, 0x0D82
    8dca:	90 91 83 0d 	lds	r25, 0x0D83
    8dce:	90 93 81 0d 	sts	0x0D81, r25
    8dd2:	80 93 80 0d 	sts	0x0D80, r24
    8dd6:	6e c0       	rjmp	.+220    	; 0x8eb4 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8dd8:	47 fd       	sbrc	r20, 7
    8dda:	40 93 7b 0d 	sts	0x0D7B, r20
					channel=lastStatus&0x0f;
    8dde:	90 91 7b 0d 	lds	r25, 0x0D7B
    8de2:	89 2f       	mov	r24, r25
    8de4:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8de6:	47 ff       	sbrs	r20, 7
    8de8:	08 c0       	rjmp	.+16     	; 0x8dfa <ProcessMusic+0x192>
    8dea:	2e 5f       	subi	r18, 0xFE	; 254
    8dec:	3f 4f       	sbci	r19, 0xFF	; 255
    8dee:	30 93 81 0d 	sts	0x0D81, r19
    8df2:	20 93 80 0d 	sts	0x0D80, r18
    8df6:	fb 01       	movw	r30, r22
    8df8:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8dfa:	90 7f       	andi	r25, 0xF0	; 240
    8dfc:	90 3b       	cpi	r25, 0xB0	; 176
    8dfe:	e1 f0       	breq	.+56     	; 0x8e38 <ProcessMusic+0x1d0>
    8e00:	90 3c       	cpi	r25, 0xC0	; 192
    8e02:	09 f4       	brne	.+2      	; 0x8e06 <ProcessMusic+0x19e>
    8e04:	51 c0       	rjmp	.+162    	; 0x8ea8 <ProcessMusic+0x240>
    8e06:	90 39       	cpi	r25, 0x90	; 144
    8e08:	09 f0       	breq	.+2      	; 0x8e0c <ProcessMusic+0x1a4>
    8e0a:	54 c0       	rjmp	.+168    	; 0x8eb4 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8e0c:	e0 91 80 0d 	lds	r30, 0x0D80
    8e10:	f0 91 81 0d 	lds	r31, 0x0D81
    8e14:	9f 01       	movw	r18, r30
    8e16:	2f 5f       	subi	r18, 0xFF	; 255
    8e18:	3f 4f       	sbci	r19, 0xFF	; 255
    8e1a:	30 93 81 0d 	sts	0x0D81, r19
    8e1e:	20 93 80 0d 	sts	0x0D80, r18
    8e22:	24 91       	lpm	r18, Z
    8e24:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8e26:	f8 9e       	mul	r15, r24
    8e28:	f0 01       	movw	r30, r0
    8e2a:	11 24       	eor	r1, r1
    8e2c:	ec 5f       	subi	r30, 0xFC	; 252
    8e2e:	f2 4f       	sbci	r31, 0xF2	; 242
    8e30:	60 89       	ldd	r22, Z+16	; 0x10
    8e32:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <TriggerNote>
    8e36:	3e c0       	rjmp	.+124    	; 0x8eb4 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8e38:	e0 91 80 0d 	lds	r30, 0x0D80
    8e3c:	f0 91 81 0d 	lds	r31, 0x0D81
    8e40:	9f 01       	movw	r18, r30
    8e42:	2f 5f       	subi	r18, 0xFF	; 255
    8e44:	3f 4f       	sbci	r19, 0xFF	; 255
    8e46:	30 93 81 0d 	sts	0x0D81, r19
    8e4a:	20 93 80 0d 	sts	0x0D80, r18
    8e4e:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8e50:	47 30       	cpi	r20, 0x07	; 7
    8e52:	49 f4       	brne	.+18     	; 0x8e66 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8e54:	f8 9e       	mul	r15, r24
    8e56:	d0 01       	movw	r26, r0
    8e58:	11 24       	eor	r1, r1
    8e5a:	ac 5f       	subi	r26, 0xFC	; 252
    8e5c:	b2 4f       	sbci	r27, 0xF2	; 242
    8e5e:	ee 0f       	add	r30, r30
    8e60:	1c 96       	adiw	r26, 0x0c	; 12
    8e62:	ec 93       	st	X, r30
    8e64:	27 c0       	rjmp	.+78     	; 0x8eb4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8e66:	4b 30       	cpi	r20, 0x0B	; 11
    8e68:	49 f4       	brne	.+18     	; 0x8e7c <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8e6a:	f8 9e       	mul	r15, r24
    8e6c:	d0 01       	movw	r26, r0
    8e6e:	11 24       	eor	r1, r1
    8e70:	ac 5f       	subi	r26, 0xFC	; 252
    8e72:	b2 4f       	sbci	r27, 0xF2	; 242
    8e74:	ee 0f       	add	r30, r30
    8e76:	13 96       	adiw	r26, 0x03	; 3
    8e78:	ec 93       	st	X, r30
    8e7a:	1c c0       	rjmp	.+56     	; 0x8eb4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8e7c:	4c 35       	cpi	r20, 0x5C	; 92
    8e7e:	49 f4       	brne	.+18     	; 0x8e92 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8e80:	f8 9e       	mul	r15, r24
    8e82:	d0 01       	movw	r26, r0
    8e84:	11 24       	eor	r1, r1
    8e86:	ac 5f       	subi	r26, 0xFC	; 252
    8e88:	b2 4f       	sbci	r27, 0xF2	; 242
    8e8a:	ee 0f       	add	r30, r30
    8e8c:	1a 96       	adiw	r26, 0x0a	; 10
    8e8e:	ec 93       	st	X, r30
    8e90:	11 c0       	rjmp	.+34     	; 0x8eb4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8e92:	44 36       	cpi	r20, 0x64	; 100
    8e94:	79 f4       	brne	.+30     	; 0x8eb4 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8e96:	f8 9e       	mul	r15, r24
    8e98:	d0 01       	movw	r26, r0
    8e9a:	11 24       	eor	r1, r1
    8e9c:	ac 5f       	subi	r26, 0xFC	; 252
    8e9e:	b2 4f       	sbci	r27, 0xF2	; 242
    8ea0:	ee 0f       	add	r30, r30
    8ea2:	1b 96       	adiw	r26, 0x0b	; 11
    8ea4:	ec 93       	st	X, r30
    8ea6:	06 c0       	rjmp	.+12     	; 0x8eb4 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8ea8:	f8 9e       	mul	r15, r24
    8eaa:	f0 01       	movw	r30, r0
    8eac:	11 24       	eor	r1, r1
    8eae:	ec 5f       	subi	r30, 0xFC	; 252
    8eb0:	f2 4f       	sbci	r31, 0xF2	; 242
    8eb2:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8eb4:	80 e8       	ldi	r24, 0x80	; 128
    8eb6:	9d e0       	ldi	r25, 0x0D	; 13
    8eb8:	0e 94 f8 44 	call	0x89f0	; 0x89f0 <ReadVarLen>
    8ebc:	90 93 7e 0d 	sts	0x0D7E, r25
    8ec0:	80 93 7d 0d 	sts	0x0D7D, r24
				currDeltaTime=0;
    8ec4:	10 92 78 0d 	sts	0x0D78, r1
    8ec8:	10 92 77 0d 	sts	0x0D77, r1
    8ecc:	3b cf       	rjmp	.-394    	; 0x8d44 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8ece:	01 96       	adiw	r24, 0x01	; 1
    8ed0:	90 93 78 0d 	sts	0x0D78, r25
    8ed4:	80 93 77 0d 	sts	0x0D77, r24
    8ed8:	9d e0       	ldi	r25, 0x0D	; 13
    8eda:	a9 2e       	mov	r10, r25
    8edc:	9d e0       	ldi	r25, 0x0D	; 13
    8ede:	b9 2e       	mov	r11, r25
    8ee0:	27 e1       	ldi	r18, 0x17	; 23
    8ee2:	c2 2e       	mov	r12, r18
    8ee4:	2d e0       	ldi	r18, 0x0D	; 13
    8ee6:	d2 2e       	mov	r13, r18
    8ee8:	38 e1       	ldi	r19, 0x18	; 24
    8eea:	e3 2e       	mov	r14, r19
    8eec:	3d e0       	ldi	r19, 0x0D	; 13
    8eee:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8ef0:	66 24       	eor	r6, r6
    8ef2:	6a 94       	dec	r6
    8ef4:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8ef6:	88 81       	ld	r24, Y
    8ef8:	85 ff       	sbrs	r24, 5
    8efa:	42 c0       	rjmp	.+132    	; 0x8f80 <ProcessMusic+0x318>
    8efc:	2d 89       	ldd	r18, Y+21	; 0x15
    8efe:	3e 89       	ldd	r19, Y+22	; 0x16
    8f00:	23 2b       	or	r18, r19
    8f02:	09 f4       	brne	.+2      	; 0x8f06 <ProcessMusic+0x29e>
    8f04:	3d c0       	rjmp	.+122    	; 0x8f80 <ProcessMusic+0x318>
    8f06:	86 fd       	sbrc	r24, 6
    8f08:	3b c0       	rjmp	.+118    	; 0x8f80 <ProcessMusic+0x318>
    8f0a:	47 01       	movw	r8, r14
    8f0c:	f2 e0       	ldi	r31, 0x02	; 2
    8f0e:	8f 1a       	sub	r8, r31
    8f10:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8f12:	d6 01       	movw	r26, r12
    8f14:	9c 91       	ld	r25, X
    8f16:	f4 01       	movw	r30, r8
    8f18:	80 81       	ld	r24, Z
    8f1a:	98 13       	cpse	r25, r24
    8f1c:	2e c0       	rjmp	.+92     	; 0x8f7a <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8f1e:	ed 89       	ldd	r30, Y+21	; 0x15
    8f20:	fe 89       	ldd	r31, Y+22	; 0x16
    8f22:	bf 01       	movw	r22, r30
    8f24:	6f 5f       	subi	r22, 0xFF	; 255
    8f26:	7f 4f       	sbci	r23, 0xFF	; 255
    8f28:	7e 8b       	std	Y+22, r23	; 0x16
    8f2a:	6d 8b       	std	Y+21, r22	; 0x15
    8f2c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    8f30:	31 f4       	brne	.+12     	; 0x8f3e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8f32:	88 81       	ld	r24, Y
    8f34:	8f 77       	andi	r24, 0x7F	; 127
    8f36:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8f38:	1e 8a       	std	Y+22, r1	; 0x16
    8f3a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8f3c:	1e c0       	rjmp	.+60     	; 0x8f7a <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8f3e:	9f 01       	movw	r18, r30
    8f40:	2e 5f       	subi	r18, 0xFE	; 254
    8f42:	3f 4f       	sbci	r19, 0xFF	; 255
    8f44:	3e 8b       	std	Y+22, r19	; 0x16
    8f46:	2d 8b       	std	Y+21, r18	; 0x15
    8f48:	fb 01       	movw	r30, r22
    8f4a:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8f4c:	e8 2f       	mov	r30, r24
    8f4e:	f0 e0       	ldi	r31, 0x00	; 0
    8f50:	ee 0f       	add	r30, r30
    8f52:	ff 1f       	adc	r31, r31
    8f54:	ec 51       	subi	r30, 0x1C	; 28
    8f56:	ff 4f       	sbci	r31, 0xFF	; 255
    8f58:	25 91       	lpm	r18, Z+
    8f5a:	34 91       	lpm	r19, Z
    8f5c:	ce 01       	movw	r24, r28
    8f5e:	f9 01       	movw	r30, r18
    8f60:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8f62:	ed 89       	ldd	r30, Y+21	; 0x15
    8f64:	fe 89       	ldd	r31, Y+22	; 0x16
    8f66:	cf 01       	movw	r24, r30
    8f68:	01 96       	adiw	r24, 0x01	; 1
    8f6a:	9e 8b       	std	Y+22, r25	; 0x16
    8f6c:	8d 8b       	std	Y+21, r24	; 0x15
    8f6e:	e4 91       	lpm	r30, Z
    8f70:	d4 01       	movw	r26, r8
    8f72:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8f74:	f6 01       	movw	r30, r12
    8f76:	10 82       	st	Z, r1
    8f78:	cc cf       	rjmp	.-104    	; 0x8f12 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8f7a:	9f 5f       	subi	r25, 0xFF	; 255
    8f7c:	d6 01       	movw	r26, r12
    8f7e:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8f80:	98 81       	ld	r25, Y
    8f82:	95 ff       	sbrs	r25, 5
    8f84:	6c c0       	rjmp	.+216    	; 0x905e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8f86:	f7 01       	movw	r30, r14
    8f88:	80 81       	ld	r24, Z
    8f8a:	8f 3f       	cpi	r24, 0xFF	; 255
    8f8c:	11 f0       	breq	.+4      	; 0x8f92 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8f8e:	8f 5f       	subi	r24, 0xFF	; 255
    8f90:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8f92:	97 fd       	sbrc	r25, 7
    8f94:	04 c0       	rjmp	.+8      	; 0x8f9e <ProcessMusic+0x336>
    8f96:	f7 01       	movw	r30, r14
    8f98:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8f9a:	90 81       	ld	r25, Z
    8f9c:	01 c0       	rjmp	.+2      	; 0x8fa0 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8f9e:	9f ef       	ldi	r25, 0xFF	; 255
    8fa0:	f7 01       	movw	r30, r14
    8fa2:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8fa4:	80 81       	ld	r24, Z
    8fa6:	88 23       	and	r24, r24
    8fa8:	09 f4       	brne	.+2      	; 0x8fac <ProcessMusic+0x344>
    8faa:	4e c0       	rjmp	.+156    	; 0x9048 <ProcessMusic+0x3e0>
    8fac:	31 96       	adiw	r30, 0x01	; 1
    8fae:	50 81       	ld	r21, Z
    8fb0:	55 23       	and	r21, r21
    8fb2:	09 f4       	brne	.+2      	; 0x8fb6 <ProcessMusic+0x34e>
    8fb4:	49 c0       	rjmp	.+146    	; 0x9048 <ProcessMusic+0x3e0>
    8fb6:	99 23       	and	r25, r25
    8fb8:	09 f4       	brne	.+2      	; 0x8fbc <ProcessMusic+0x354>
    8fba:	46 c0       	rjmp	.+140    	; 0x9048 <ProcessMusic+0x3e0>
    8fbc:	40 91 7c 0d 	lds	r20, 0x0D7C
    8fc0:	44 23       	and	r20, r20
    8fc2:	09 f4       	brne	.+2      	; 0x8fc6 <ProcessMusic+0x35e>
    8fc4:	41 c0       	rjmp	.+130    	; 0x9048 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8fc6:	89 9f       	mul	r24, r25
    8fc8:	c0 01       	movw	r24, r0
    8fca:	11 24       	eor	r1, r1
    8fcc:	93 95       	inc	r25
				uVol>>=8;
    8fce:	89 2f       	mov	r24, r25
    8fd0:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8fd2:	58 9f       	mul	r21, r24
    8fd4:	90 01       	movw	r18, r0
    8fd6:	59 9f       	mul	r21, r25
    8fd8:	30 0d       	add	r19, r0
    8fda:	11 24       	eor	r1, r1
    8fdc:	c9 01       	movw	r24, r18
    8fde:	93 95       	inc	r25
				uVol>>=8;
    8fe0:	89 2f       	mov	r24, r25
    8fe2:	99 27       	eor	r25, r25
    8fe4:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8fe6:	50 81       	ld	r21, Z
    8fe8:	58 9f       	mul	r21, r24
    8fea:	90 01       	movw	r18, r0
    8fec:	59 9f       	mul	r21, r25
    8fee:	30 0d       	add	r19, r0
    8ff0:	11 24       	eor	r1, r1
    8ff2:	33 95       	inc	r19
					uVol>>=8;
    8ff4:	23 2f       	mov	r18, r19
    8ff6:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8ff8:	42 9f       	mul	r20, r18
    8ffa:	c0 01       	movw	r24, r0
    8ffc:	43 9f       	mul	r20, r19
    8ffe:	90 0d       	add	r25, r0
    9000:	11 24       	eor	r1, r1
    9002:	93 95       	inc	r25
				uVol>>=8;
    9004:	89 2f       	mov	r24, r25
    9006:	99 27       	eor	r25, r25
    9008:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    900a:	20 81       	ld	r18, Z
    900c:	22 23       	and	r18, r18
    900e:	f1 f0       	breq	.+60     	; 0x904c <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9010:	d5 01       	movw	r26, r10
    9012:	ec 91       	ld	r30, X
    9014:	f0 e0       	ldi	r31, 0x00	; 0
    9016:	e0 50       	subi	r30, 0x00	; 0
    9018:	fc 46       	sbci	r31, 0x6C	; 108
    901a:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    901c:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    901e:	2e 9f       	mul	r18, r30
    9020:	f0 01       	movw	r30, r0
    9022:	11 24       	eor	r1, r1
    9024:	f3 95       	inc	r31
					tVol>>=8;
    9026:	ef 2f       	mov	r30, r31
    9028:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    902a:	a3 01       	movw	r20, r6
    902c:	4e 1b       	sub	r20, r30
    902e:	5f 0b       	sbc	r21, r31
    9030:	48 9f       	mul	r20, r24
    9032:	90 01       	movw	r18, r0
    9034:	49 9f       	mul	r20, r25
    9036:	30 0d       	add	r19, r0
    9038:	58 9f       	mul	r21, r24
    903a:	30 0d       	add	r19, r0
    903c:	11 24       	eor	r1, r1
    903e:	c9 01       	movw	r24, r18
    9040:	93 95       	inc	r25
					uVol>>=8;
    9042:	89 2f       	mov	r24, r25
    9044:	99 27       	eor	r25, r25
    9046:	02 c0       	rjmp	.+4      	; 0x904c <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    9048:	80 e0       	ldi	r24, 0x00	; 0
    904a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    904c:	f5 01       	movw	r30, r10
    904e:	30 81       	ld	r19, Z
    9050:	f7 01       	movw	r30, r14
    9052:	39 97       	sbiw	r30, 0x09	; 9
    9054:	20 81       	ld	r18, Z
    9056:	23 0f       	add	r18, r19
    9058:	d5 01       	movw	r26, r10
    905a:	2c 93       	st	X, r18
    905c:	02 c0       	rjmp	.+4      	; 0x9062 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    905e:	80 e0       	ldi	r24, 0x00	; 0
    9060:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9062:	f8 01       	movw	r30, r16
    9064:	80 83       	st	Z, r24
    9066:	67 96       	adiw	r28, 0x17	; 23
    9068:	0a 5f       	subi	r16, 0xFA	; 250
    906a:	1f 4f       	sbci	r17, 0xFF	; 255
    906c:	f7 e1       	ldi	r31, 0x17	; 23
    906e:	af 0e       	add	r10, r31
    9070:	b1 1c       	adc	r11, r1
    9072:	87 e1       	ldi	r24, 0x17	; 23
    9074:	c8 0e       	add	r12, r24
    9076:	d1 1c       	adc	r13, r1
    9078:	97 e1       	ldi	r25, 0x17	; 23
    907a:	e9 0e       	add	r14, r25
    907c:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    907e:	ad e0       	ldi	r26, 0x0D	; 13
    9080:	c7 37       	cpi	r28, 0x77	; 119
    9082:	da 07       	cpc	r29, r26
    9084:	09 f0       	breq	.+2      	; 0x9088 <ProcessMusic+0x420>
    9086:	37 cf       	rjmp	.-402    	; 0x8ef6 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9088:	df 91       	pop	r29
    908a:	cf 91       	pop	r28
    908c:	1f 91       	pop	r17
    908e:	0f 91       	pop	r16
    9090:	ff 90       	pop	r15
    9092:	ef 90       	pop	r14
    9094:	df 90       	pop	r13
    9096:	cf 90       	pop	r12
    9098:	bf 90       	pop	r11
    909a:	af 90       	pop	r10
    909c:	9f 90       	pop	r9
    909e:	8f 90       	pop	r8
    90a0:	7f 90       	pop	r7
    90a2:	6f 90       	pop	r6
    90a4:	08 95       	ret

000090a6 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    90a6:	80 93 7c 0d 	sts	0x0D7C, r24
    90aa:	08 95       	ret

000090ac <IsSongPlaying>:
	return masterVolume;
}

bool IsSongPlaying(){
    return playSong;
}
    90ac:	80 91 ce 0c 	lds	r24, 0x0CCE
    90b0:	08 95       	ret

000090b2 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    90b2:	99 27       	eor	r25, r25
	clr r23
    90b4:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    90b6:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    90b8:	09 f4       	brne	.+2      	; 0x90bc <set_note_waves>
		ret
    90ba:	08 95       	ret

000090bc <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    90bc:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    90be:	f2 e9       	ldi	r31, 0x92	; 146
	lsl r22
    90c0:	66 0f       	add	r22, r22
	rol r23
    90c2:	77 1f       	adc	r23, r23
	add ZL,r22
    90c4:	e6 0f       	add	r30, r22
	adc ZH,r23	
    90c6:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    90c8:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    90ca:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    90cc:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    90ce:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    90d0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    90d2:	28 9f       	mul	r18, r24
	add ZL,r0
    90d4:	e0 0d       	add	r30, r0
	adc ZH,r1
    90d6:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    90d8:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    90da:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    90dc:	11 24       	eor	r1, r1
	

	ret
    90de:	08 95       	ret

000090e0 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    90e0:	99 27       	eor	r25, r25
	clr r23
    90e2:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    90e4:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(mixerStruct)
    90e6:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    90e8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    90ea:	28 9f       	mul	r18, r24
	add ZL,r0
    90ec:	e0 0d       	add	r30, r0
	adc ZH,r1
    90ee:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    90f0:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    90f2:	31 f4       	brne	.+12     	; 0x9100 <smw1>
	lds r22,tr4_params
    90f4:	60 91 e3 0c 	lds	r22, 0x0CE3
	andi r22,0xfe;
    90f8:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    90fa:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw	
    90fe:	0b c0       	rjmp	.+22     	; 0x9116 <esmw>

00009100 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9100:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9102:	31 f4       	brne	.+12     	; 0x9110 <smw2>
	lds r22,tr4_params
    9104:	60 91 e3 0c 	lds	r22, 0x0CE3
	ori r22,0xfe;
    9108:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    910a:	60 93 e3 0c 	sts	0x0CE3, r22
	rjmp esmw
    910e:	03 c0       	rjmp	.+6      	; 0x9116 <esmw>

00009110 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9110:	74 e9       	ldi	r23, 0x94	; 148
	add r23,r22
    9112:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9114:	75 83       	std	Z+5, r23	; 0x05

00009116 <esmw>:

esmw:
	clr r1	
    9116:	11 24       	eor	r1, r1
	ret
    9118:	08 95       	ret
	...

00009200 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9200:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9202:	80 93 cf 0c 	sts	0x0CCF, r24
	ret
    9206:	08 95       	ret

00009208 <steptable>:
    9208:	22 00       	.word	0x0022	; ????
    920a:	24 00       	.word	0x0024	; ????
    920c:	26 00       	.word	0x0026	; ????
    920e:	28 00       	.word	0x0028	; ????
    9210:	2b 00       	.word	0x002b	; ????
    9212:	2d 00       	.word	0x002d	; ????
    9214:	30 00       	.word	0x0030	; ????
    9216:	33 00       	.word	0x0033	; ????
    9218:	36 00       	.word	0x0036	; ????
    921a:	39 00       	.word	0x0039	; ????
    921c:	3d 00       	.word	0x003d	; ????
    921e:	40 00       	.word	0x0040	; ????
    9220:	44 00       	.word	0x0044	; ????
    9222:	48 00       	.word	0x0048	; ????
    9224:	4c 00       	.word	0x004c	; ????
    9226:	51 00       	.word	0x0051	; ????
    9228:	56 00       	.word	0x0056	; ????
    922a:	5b 00       	.word	0x005b	; ????
    922c:	60 00       	.word	0x0060	; ????
    922e:	66 00       	.word	0x0066	; ????
    9230:	6c 00       	.word	0x006c	; ????
    9232:	73 00       	.word	0x0073	; ????
    9234:	79 00       	.word	0x0079	; ????
    9236:	81 00       	.word	0x0081	; ????
    9238:	88 00       	.word	0x0088	; ????
    923a:	90 00       	.word	0x0090	; ????
    923c:	99 00       	.word	0x0099	; ????
    923e:	a2 00       	.word	0x00a2	; ????
    9240:	ac 00       	.word	0x00ac	; ????
    9242:	b6 00       	.word	0x00b6	; ????
    9244:	c1 00       	.word	0x00c1	; ????
    9246:	cc 00       	.word	0x00cc	; ????
    9248:	d8 00       	.word	0x00d8	; ????
    924a:	e5 00       	.word	0x00e5	; ????
    924c:	f3 00       	.word	0x00f3	; ????
    924e:	01 01       	movw	r0, r2
    9250:	10 01       	movw	r2, r0
    9252:	21 01       	movw	r4, r2
    9254:	32 01       	movw	r6, r4
    9256:	44 01       	movw	r8, r8
    9258:	57 01       	movw	r10, r14
    925a:	6c 01       	movw	r12, r24
    925c:	81 01       	movw	r16, r2
    925e:	98 01       	movw	r18, r16
    9260:	b0 01       	movw	r22, r0
    9262:	ca 01       	movw	r24, r20
    9264:	e5 01       	movw	r28, r10
    9266:	02 02       	muls	r16, r18
    9268:	21 02       	muls	r18, r17
    926a:	41 02       	muls	r20, r17
    926c:	64 02       	muls	r22, r20
    926e:	88 02       	muls	r24, r24
    9270:	ae 02       	muls	r26, r30
    9272:	d7 02       	muls	r29, r23
    9274:	03 03       	mulsu	r16, r19
    9276:	30 03       	mulsu	r19, r16
    9278:	61 03       	mulsu	r22, r17
    927a:	94 03       	fmuls	r17, r20
    927c:	cb 03       	fmulsu	r20, r19
    927e:	05 04       	cpc	r0, r5
    9280:	42 04       	cpc	r4, r2
    9282:	83 04       	cpc	r8, r3
    9284:	c7 04       	cpc	r12, r7
    9286:	10 05       	cpc	r17, r0
    9288:	5d 05       	cpc	r21, r13
    928a:	af 05       	cpc	r26, r15
    928c:	05 06       	cpc	r0, r21
    928e:	61 06       	cpc	r6, r17
    9290:	c2 06       	cpc	r12, r18
    9292:	29 07       	cpc	r18, r25
    9294:	96 07       	cpc	r25, r22
    9296:	09 08       	sbc	r0, r9
    9298:	83 08       	sbc	r8, r3
    929a:	05 09       	sbc	r16, r5
    929c:	8e 09       	sbc	r24, r14
    929e:	20 0a       	sbc	r2, r16
    92a0:	ba 0a       	sbc	r11, r26
    92a2:	5d 0b       	sbc	r21, r29
    92a4:	0a 0c       	add	r0, r10
    92a6:	c1 0c       	add	r12, r1
    92a8:	84 0d       	add	r24, r4
    92aa:	51 0e       	add	r5, r17
    92ac:	2b 0f       	add	r18, r27
    92ae:	12 10       	cpse	r1, r2
    92b0:	07 11       	cpse	r16, r7
    92b2:	0a 12       	cpse	r0, r26
    92b4:	1d 13       	cpse	r17, r29
    92b6:	40 14       	cp	r4, r0
    92b8:	74 15       	cp	r23, r4
    92ba:	ba 16       	cp	r11, r26
    92bc:	14 18       	sub	r1, r4
    92be:	83 19       	sub	r24, r3
    92c0:	07 1b       	sub	r16, r23
    92c2:	a3 1c       	adc	r10, r3
    92c4:	57 1e       	adc	r5, r23
    92c6:	24 20       	and	r2, r4
    92c8:	0e 22       	and	r0, r30
    92ca:	14 24       	eor	r1, r4
    92cc:	39 26       	eor	r3, r25
    92ce:	7f 28       	or	r7, r15
    92d0:	e8 2a       	or	r14, r24
    92d2:	75 2d       	mov	r23, r5
    92d4:	29 30       	cpi	r18, 0x09	; 9
    92d6:	06 33       	cpi	r16, 0x36	; 54
    92d8:	0f 36       	cpi	r16, 0x6F	; 111
    92da:	45 39       	cpi	r20, 0x95	; 149
    92dc:	ad 3c       	cpi	r26, 0xCD	; 205
    92de:	49 40       	sbci	r20, 0x09	; 9
    92e0:	1b 44       	sbci	r17, 0x4B	; 75
    92e2:	28 48       	sbci	r18, 0x88	; 136
    92e4:	73 4c       	sbci	r23, 0xC3	; 195
    92e6:	fe 50       	subi	r31, 0x0E	; 14
    92e8:	cf 55       	subi	r28, 0x5F	; 95
    92ea:	ea 5a       	subi	r30, 0xAA	; 170
    92ec:	51 60       	ori	r21, 0x01	; 1
    92ee:	0c 66       	ori	r16, 0x6C	; 108
    92f0:	1d 6c       	ori	r17, 0xCD	; 205
    92f2:	8b 72       	andi	r24, 0x2B	; 43
    92f4:	5a 79       	andi	r21, 0x9A	; 154
    92f6:	92 80       	ldd	r9, Z+2	; 0x02
    92f8:	37 88       	ldd	r3, Z+23	; 0x17
    92fa:	50 90 e5 98 	lds	r5, 0x98E5
    92fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9300:	9f ab       	std	Y+55, r25	; 0x37
    9302:	d3 b5       	in	r29, 0x23	; 35
    9304:	a3 c0       	rjmp	.+326    	; 0x944c <waves+0x4c>
	...

00009400 <waves>:
    9400:	00 03       	mulsu	r16, r16
    9402:	06 09       	sbc	r16, r6
    9404:	0c 10       	cpse	r0, r12
    9406:	13 16       	cp	r1, r19
    9408:	19 1c       	adc	r1, r9
    940a:	1f 22       	and	r1, r31
    940c:	25 28       	or	r2, r5
    940e:	2b 2e       	mov	r2, r27
    9410:	31 33       	cpi	r19, 0x31	; 49
    9412:	36 39       	cpi	r19, 0x96	; 150
    9414:	3c 3f       	cpi	r19, 0xFC	; 252
    9416:	41 44       	sbci	r20, 0x41	; 65
    9418:	47 49       	sbci	r20, 0x97	; 151
    941a:	4c 4e       	sbci	r20, 0xEC	; 236
    941c:	51 53       	subi	r21, 0x31	; 49
    941e:	55 58       	subi	r21, 0x85	; 133
    9420:	5a 5c       	subi	r21, 0xCA	; 202
    9422:	5e 60       	ori	r21, 0x0E	; 14
    9424:	62 64       	ori	r22, 0x42	; 66
    9426:	66 68       	ori	r22, 0x86	; 134
    9428:	6a 6b       	ori	r22, 0xBA	; 186
    942a:	6d 6f       	ori	r22, 0xFD	; 253
    942c:	70 71       	andi	r23, 0x10	; 16
    942e:	73 74       	andi	r23, 0x43	; 67
    9430:	75 76       	andi	r23, 0x65	; 101
    9432:	78 79       	andi	r23, 0x98	; 152
    9434:	7a 7a       	andi	r23, 0xAA	; 170
    9436:	7b 7c       	andi	r23, 0xCB	; 203
    9438:	7d 7d       	andi	r23, 0xDD	; 221
    943a:	7e 7e       	andi	r23, 0xEE	; 238
    943c:	7e 7f       	andi	r23, 0xFE	; 254
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7e 7e       	andi	r23, 0xEE	; 238
    9446:	7e 7d       	andi	r23, 0xDE	; 222
    9448:	7d 7c       	andi	r23, 0xCD	; 205
    944a:	7b 7a       	andi	r23, 0xAB	; 171
    944c:	7a 79       	andi	r23, 0x9A	; 154
    944e:	78 76       	andi	r23, 0x68	; 104
    9450:	75 74       	andi	r23, 0x45	; 69
    9452:	73 71       	andi	r23, 0x13	; 19
    9454:	70 6f       	ori	r23, 0xF0	; 240
    9456:	6d 6b       	ori	r22, 0xBD	; 189
    9458:	6a 68       	ori	r22, 0x8A	; 138
    945a:	66 64       	ori	r22, 0x46	; 70
    945c:	62 60       	ori	r22, 0x02	; 2
    945e:	5e 5c       	subi	r21, 0xCE	; 206
    9460:	5a 58       	subi	r21, 0x8A	; 138
    9462:	55 53       	subi	r21, 0x35	; 53
    9464:	51 4e       	sbci	r21, 0xE1	; 225
    9466:	4c 49       	sbci	r20, 0x9C	; 156
    9468:	47 44       	sbci	r20, 0x47	; 71
    946a:	41 3f       	cpi	r20, 0xF1	; 241
    946c:	3c 39       	cpi	r19, 0x9C	; 156
    946e:	36 33       	cpi	r19, 0x36	; 54
    9470:	31 2e       	mov	r3, r17
    9472:	2b 28       	or	r2, r11
    9474:	25 22       	and	r2, r21
    9476:	1f 1c       	adc	r1, r15
    9478:	19 16       	cp	r1, r25
    947a:	13 10       	cpse	r1, r3
    947c:	0c 09       	sbc	r16, r12
    947e:	06 03       	mulsu	r16, r22
    9480:	00 fd       	sbrc	r16, 0
    9482:	fa f7       	brpl	.-2      	; 0x9482 <waves+0x82>
    9484:	f4 f0       	brlt	.+60     	; 0x94c2 <waves+0xc2>
    9486:	ed ea       	ldi	r30, 0xAD	; 173
    9488:	e7 e4       	ldi	r30, 0x47	; 71
    948a:	e1 de       	rcall	.-574    	; 0x924e <steptable+0x46>
    948c:	db d8       	rcall	.-3658   	; 0x8644 <EepromBlockExists+0x60>
    948e:	d5 d2       	rcall	.+1450   	; 0x9a3a <waves+0x63a>
    9490:	cf cd       	rjmp	.-1122   	; 0x9030 <ProcessMusic+0x3c8>
    9492:	ca c7       	rjmp	.+3988   	; 0xa428 <LBPrintChar+0x2c>
    9494:	c4 c1       	rjmp	.+904    	; 0x981e <waves+0x41e>
    9496:	bf bc       	out	0x2f, r11	; 47
    9498:	b9 b7       	in	r27, 0x39	; 57
    949a:	b4 b2       	in	r11, 0x14	; 20
    949c:	af ad       	ldd	r26, Y+63	; 0x3f
    949e:	ab a8       	ldd	r10, Y+51	; 0x33
    94a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    94a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    94a4:	9e 9c       	mul	r9, r14
    94a6:	9a 98       	cbi	0x13, 2	; 19
    94a8:	96 95       	lsr	r25
    94aa:	93 91       	.word	0x9193	; ????
    94ac:	90 8f       	std	Z+24, r25	; 0x18
    94ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    94b0:	8b 8a       	std	Y+19, r8	; 0x13
    94b2:	88 87       	std	Y+8, r24	; 0x08
    94b4:	86 86       	std	Z+14, r8	; 0x0e
    94b6:	85 84       	ldd	r8, Z+13	; 0x0d
    94b8:	83 83       	std	Z+3, r24	; 0x03
    94ba:	82 82       	std	Z+2, r8	; 0x02
    94bc:	82 81       	ldd	r24, Z+2	; 0x02
    94be:	81 81       	ldd	r24, Z+1	; 0x01
    94c0:	81 81       	ldd	r24, Z+1	; 0x01
    94c2:	81 81       	ldd	r24, Z+1	; 0x01
    94c4:	82 82       	std	Z+2, r8	; 0x02
    94c6:	82 83       	std	Z+2, r24	; 0x02
    94c8:	83 84       	ldd	r8, Z+11	; 0x0b
    94ca:	85 86       	std	Z+13, r8	; 0x0d
    94cc:	86 87       	std	Z+14, r24	; 0x0e
    94ce:	88 8a       	std	Y+16, r8	; 0x10
    94d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    94d2:	8d 8f       	std	Y+29, r24	; 0x1d
    94d4:	90 91 93 95 	lds	r25, 0x9593
    94d8:	96 98       	cbi	0x12, 6	; 18
    94da:	9a 9c       	mul	r9, r10
    94dc:	9e a0       	ldd	r9, Y+38	; 0x26
    94de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    94e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    94e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    94e4:	af b2       	in	r10, 0x1f	; 31
    94e6:	b4 b7       	in	r27, 0x34	; 52
    94e8:	b9 bc       	out	0x29, r11	; 41
    94ea:	bf c1       	rjmp	.+894    	; 0x986a <waves+0x46a>
    94ec:	c4 c7       	rjmp	.+3976   	; 0xa476 <LBPrintByte+0x2>
    94ee:	ca cd       	rjmp	.-1132   	; 0x9084 <ProcessMusic+0x41c>
    94f0:	cf d2       	rcall	.+1438   	; 0x9a90 <waves+0x690>
    94f2:	d5 d8       	rcall	.-3670   	; 0x869e <EepromWriteBlock+0x16>
    94f4:	db de       	rcall	.-586    	; 0x92ac <steptable+0xa4>
    94f6:	e1 e4       	ldi	r30, 0x41	; 65
    94f8:	e7 ea       	ldi	r30, 0xA7	; 167
    94fa:	ed f0       	brhs	.+58     	; 0x9536 <waves+0x136>
    94fc:	f4 f7       	brge	.-4      	; 0x94fa <waves+0xfa>
    94fe:	fa fd       	.word	0xfdfa	; ????
    9500:	80 81       	ld	r24, Z
    9502:	82 83       	std	Z+2, r24	; 0x02
    9504:	84 85       	ldd	r24, Z+12	; 0x0c
    9506:	86 87       	std	Z+14, r24	; 0x0e
    9508:	88 89       	ldd	r24, Y+16	; 0x10
    950a:	8a 8b       	std	Y+18, r24	; 0x12
    950c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    950e:	8e 8f       	std	Y+30, r24	; 0x1e
    9510:	90 91 92 93 	lds	r25, 0x9392
    9514:	94 95       	.word	0x9594	; ????
    9516:	96 97       	sbiw	r26, 0x26	; 38
    9518:	98 99       	sbic	0x13, 0	; 19
    951a:	9a 9b       	sbis	0x13, 2	; 19
    951c:	9c 9d       	mul	r25, r12
    951e:	9e 9f       	mul	r25, r30
    9520:	a0 a1       	ldd	r26, Z+32	; 0x20
    9522:	a2 a3       	std	Z+34, r26	; 0x22
    9524:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9526:	a6 a7       	std	Z+46, r26	; 0x2e
    9528:	a8 a9       	ldd	r26, Y+48	; 0x30
    952a:	aa ab       	std	Y+50, r26	; 0x32
    952c:	ac ad       	ldd	r26, Y+60	; 0x3c
    952e:	ae af       	std	Y+62, r26	; 0x3e
    9530:	b0 b1       	in	r27, 0x00	; 0
    9532:	b2 b3       	in	r27, 0x12	; 18
    9534:	b4 b5       	in	r27, 0x24	; 36
    9536:	b6 b7       	in	r27, 0x36	; 54
    9538:	b8 b9       	out	0x08, r27	; 8
    953a:	ba bb       	out	0x1a, r27	; 26
    953c:	bc bd       	out	0x2c, r27	; 44
    953e:	be bf       	out	0x3e, r27	; 62
    9540:	c0 c1       	rjmp	.+896    	; 0x98c2 <waves+0x4c2>
    9542:	c2 c3       	rjmp	.+1924   	; 0x9cc8 <waves+0x8c8>
    9544:	c4 c5       	rjmp	.+2952   	; 0xa0ce <DrawMap+0x16>
    9546:	c6 c7       	rjmp	.+3980   	; 0xa4d4 <LBPrintByte+0x60>
    9548:	c8 c9       	rjmp	.-3184   	; 0x88da <PatchCommand08+0x18>
    954a:	ca cb       	rjmp	.-2156   	; 0x8ce0 <ProcessMusic+0x78>
    954c:	cc cd       	rjmp	.-1128   	; 0x90e6 <SetMixerWave+0x6>
    954e:	ce cf       	rjmp	.-100    	; 0x94ec <waves+0xec>
    9550:	d0 d1       	rcall	.+928    	; 0x98f2 <waves+0x4f2>
    9552:	d2 d3       	rcall	.+1956   	; 0x9cf8 <waves+0x8f8>
    9554:	d4 d5       	rcall	.+2984   	; 0xa0fe <DrawMap+0x46>
    9556:	d6 d7       	rcall	.+4012   	; 0xa504 <LBPrintInt+0x2e>
    9558:	d8 d9       	rcall	.-3152   	; 0x890a <PatchCommand14+0x28>
    955a:	da db       	rcall	.-2124   	; 0x8d10 <ProcessMusic+0xa8>
    955c:	dc dd       	rcall	.-1096   	; 0x9116 <esmw>
    955e:	de df       	rcall	.-68     	; 0x951c <waves+0x11c>
    9560:	e0 e1       	ldi	r30, 0x10	; 16
    9562:	e2 e3       	ldi	r30, 0x32	; 50
    9564:	e4 e5       	ldi	r30, 0x54	; 84
    9566:	e6 e7       	ldi	r30, 0x76	; 118
    9568:	e8 e9       	ldi	r30, 0x98	; 152
    956a:	ea eb       	ldi	r30, 0xBA	; 186
    956c:	ec ed       	ldi	r30, 0xDC	; 220
    956e:	ee ef       	ldi	r30, 0xFE	; 254
    9570:	f0 f1       	brcs	.+124    	; 0x95ee <waves+0x1ee>
    9572:	f2 f3       	brmi	.-4      	; 0x9570 <waves+0x170>
    9574:	f4 f5       	brge	.+124    	; 0x95f2 <waves+0x1f2>
    9576:	f6 f7       	brtc	.-4      	; 0x9574 <waves+0x174>
    9578:	f8 f9       	.word	0xf9f8	; ????
    957a:	fa fb       	.word	0xfbfa	; ????
    957c:	fc fd       	.word	0xfdfc	; ????
    957e:	fe ff       	.word	0xfffe	; ????
    9580:	00 01       	movw	r0, r0
    9582:	02 03       	mulsu	r16, r18
    9584:	04 05       	cpc	r16, r4
    9586:	06 07       	cpc	r16, r22
    9588:	08 09       	sbc	r16, r8
    958a:	0a 0b       	sbc	r16, r26
    958c:	0c 0d       	add	r16, r12
    958e:	0e 0f       	add	r16, r30
    9590:	10 11       	cpse	r17, r0
    9592:	12 13       	cpse	r17, r18
    9594:	14 15       	cp	r17, r4
    9596:	16 17       	cp	r17, r22
    9598:	18 19       	sub	r17, r8
    959a:	1a 1b       	sub	r17, r26
    959c:	1c 1d       	adc	r17, r12
    959e:	1e 1f       	adc	r17, r30
    95a0:	20 21       	and	r18, r0
    95a2:	22 23       	and	r18, r18
    95a4:	24 25       	eor	r18, r4
    95a6:	26 27       	eor	r18, r22
    95a8:	28 29       	or	r18, r8
    95aa:	2a 2b       	or	r18, r26
    95ac:	2c 2d       	mov	r18, r12
    95ae:	2e 2f       	mov	r18, r30
    95b0:	30 31       	cpi	r19, 0x10	; 16
    95b2:	32 33       	cpi	r19, 0x32	; 50
    95b4:	34 35       	cpi	r19, 0x54	; 84
    95b6:	36 37       	cpi	r19, 0x76	; 118
    95b8:	38 39       	cpi	r19, 0x98	; 152
    95ba:	3a 3b       	cpi	r19, 0xBA	; 186
    95bc:	3c 3d       	cpi	r19, 0xDC	; 220
    95be:	3e 3f       	cpi	r19, 0xFE	; 254
    95c0:	40 41       	sbci	r20, 0x10	; 16
    95c2:	42 43       	sbci	r20, 0x32	; 50
    95c4:	44 45       	sbci	r20, 0x54	; 84
    95c6:	46 47       	sbci	r20, 0x76	; 118
    95c8:	48 49       	sbci	r20, 0x98	; 152
    95ca:	4a 4b       	sbci	r20, 0xBA	; 186
    95cc:	4c 4d       	sbci	r20, 0xDC	; 220
    95ce:	4e 4f       	sbci	r20, 0xFE	; 254
    95d0:	50 51       	subi	r21, 0x10	; 16
    95d2:	52 53       	subi	r21, 0x32	; 50
    95d4:	54 55       	subi	r21, 0x54	; 84
    95d6:	56 57       	subi	r21, 0x76	; 118
    95d8:	58 59       	subi	r21, 0x98	; 152
    95da:	5a 5b       	subi	r21, 0xBA	; 186
    95dc:	5c 5d       	subi	r21, 0xDC	; 220
    95de:	5e 5f       	subi	r21, 0xFE	; 254
    95e0:	60 61       	ori	r22, 0x10	; 16
    95e2:	62 63       	ori	r22, 0x32	; 50
    95e4:	64 65       	ori	r22, 0x54	; 84
    95e6:	66 67       	ori	r22, 0x76	; 118
    95e8:	68 69       	ori	r22, 0x98	; 152
    95ea:	6a 6b       	ori	r22, 0xBA	; 186
    95ec:	6c 6d       	ori	r22, 0xDC	; 220
    95ee:	6e 6f       	ori	r22, 0xFE	; 254
    95f0:	70 71       	andi	r23, 0x10	; 16
    95f2:	72 73       	andi	r23, 0x32	; 50
    95f4:	74 75       	andi	r23, 0x54	; 84
    95f6:	76 77       	andi	r23, 0x76	; 118
    95f8:	78 79       	andi	r23, 0x98	; 152
    95fa:	7a 7b       	andi	r23, 0xBA	; 186
    95fc:	7c 7d       	andi	r23, 0xDC	; 220
    95fe:	7e 7f       	andi	r23, 0xFE	; 254
    9600:	00 02       	muls	r16, r16
    9602:	04 06       	cpc	r0, r20
    9604:	08 0a       	sbc	r0, r24
    9606:	0c 0e       	add	r0, r28
    9608:	10 12       	cpse	r1, r16
    960a:	14 16       	cp	r1, r20
    960c:	18 1a       	sub	r1, r24
    960e:	1c 1e       	adc	r1, r28
    9610:	20 22       	and	r2, r16
    9612:	24 26       	eor	r2, r20
    9614:	28 2a       	or	r2, r24
    9616:	2c 2e       	mov	r2, r28
    9618:	30 32       	cpi	r19, 0x20	; 32
    961a:	34 36       	cpi	r19, 0x64	; 100
    961c:	38 3a       	cpi	r19, 0xA8	; 168
    961e:	3c 3e       	cpi	r19, 0xEC	; 236
    9620:	40 42       	sbci	r20, 0x20	; 32
    9622:	44 46       	sbci	r20, 0x64	; 100
    9624:	48 4a       	sbci	r20, 0xA8	; 168
    9626:	4c 4e       	sbci	r20, 0xEC	; 236
    9628:	50 52       	subi	r21, 0x20	; 32
    962a:	54 56       	subi	r21, 0x64	; 100
    962c:	58 5a       	subi	r21, 0xA8	; 168
    962e:	5c 5e       	subi	r21, 0xEC	; 236
    9630:	60 62       	ori	r22, 0x20	; 32
    9632:	64 66       	ori	r22, 0x64	; 100
    9634:	68 6a       	ori	r22, 0xA8	; 168
    9636:	6c 6e       	ori	r22, 0xEC	; 236
    9638:	70 72       	andi	r23, 0x20	; 32
    963a:	74 76       	andi	r23, 0x64	; 100
    963c:	78 7a       	andi	r23, 0xA8	; 168
    963e:	7c 7e       	andi	r23, 0xEC	; 236
    9640:	7f 7d       	andi	r23, 0xDF	; 223
    9642:	7b 79       	andi	r23, 0x9B	; 155
    9644:	77 75       	andi	r23, 0x57	; 87
    9646:	73 71       	andi	r23, 0x13	; 19
    9648:	6f 6d       	ori	r22, 0xDF	; 223
    964a:	6b 69       	ori	r22, 0x9B	; 155
    964c:	67 65       	ori	r22, 0x57	; 87
    964e:	63 61       	ori	r22, 0x13	; 19
    9650:	5f 5d       	subi	r21, 0xDF	; 223
    9652:	5b 59       	subi	r21, 0x9B	; 155
    9654:	57 55       	subi	r21, 0x57	; 87
    9656:	53 51       	subi	r21, 0x13	; 19
    9658:	4f 4d       	sbci	r20, 0xDF	; 223
    965a:	4b 49       	sbci	r20, 0x9B	; 155
    965c:	47 45       	sbci	r20, 0x57	; 87
    965e:	43 41       	sbci	r20, 0x13	; 19
    9660:	3f 3d       	cpi	r19, 0xDF	; 223
    9662:	3b 39       	cpi	r19, 0x9B	; 155
    9664:	37 35       	cpi	r19, 0x57	; 87
    9666:	33 31       	cpi	r19, 0x13	; 19
    9668:	2f 2d       	mov	r18, r15
    966a:	2b 29       	or	r18, r11
    966c:	27 25       	eor	r18, r7
    966e:	23 21       	and	r18, r3
    9670:	1f 1d       	adc	r17, r15
    9672:	1b 19       	sub	r17, r11
    9674:	17 15       	cp	r17, r7
    9676:	13 11       	cpse	r17, r3
    9678:	0f 0d       	add	r16, r15
    967a:	0b 09       	sbc	r16, r11
    967c:	07 05       	cpc	r16, r7
    967e:	03 01       	movw	r0, r6
    9680:	ff fd       	.word	0xfdff	; ????
    9682:	fb f9       	.word	0xf9fb	; ????
    9684:	f7 f5       	brid	.+124    	; 0x9702 <waves+0x302>
    9686:	f3 f1       	brvs	.+124    	; 0x9704 <waves+0x304>
    9688:	ef ed       	ldi	r30, 0xDF	; 223
    968a:	eb e9       	ldi	r30, 0x9B	; 155
    968c:	e7 e5       	ldi	r30, 0x57	; 87
    968e:	e3 e1       	ldi	r30, 0x13	; 19
    9690:	df dd       	rcall	.-1090   	; 0x9250 <steptable+0x48>
    9692:	db d9       	rcall	.-3146   	; 0x8a4a <TriggerCommon+0xe>
    9694:	d7 d5       	rcall	.+2990   	; 0xa244 <FadeIn+0x2>
    9696:	d3 d1       	rcall	.+934    	; 0x9a3e <waves+0x63e>
    9698:	cf cd       	rjmp	.-1122   	; 0x9238 <steptable+0x30>
    969a:	cb c9       	rjmp	.-3178   	; 0x8a32 <ReadVarLen+0x42>
    969c:	c7 c5       	rjmp	.+2958   	; 0xa22c <doFade+0x6>
    969e:	c3 c1       	rjmp	.+902    	; 0x9a26 <waves+0x626>
    96a0:	bf bd       	out	0x2f, r27	; 47
    96a2:	bb b9       	out	0x0b, r27	; 11
    96a4:	b7 b5       	in	r27, 0x27	; 39
    96a6:	b3 b1       	in	r27, 0x03	; 3
    96a8:	af ad       	ldd	r26, Y+63	; 0x3f
    96aa:	ab a9       	ldd	r26, Y+51	; 0x33
    96ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    96ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    96b0:	9f 9d       	mul	r25, r15
    96b2:	9b 99       	sbic	0x13, 3	; 19
    96b4:	97 95       	ror	r25
    96b6:	93 91       	.word	0x9193	; ????
    96b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    96ba:	8b 89       	ldd	r24, Y+19	; 0x13
    96bc:	87 85       	ldd	r24, Z+15	; 0x0f
    96be:	83 81       	ldd	r24, Z+3	; 0x03
    96c0:	80 82       	st	Z, r8
    96c2:	84 86       	std	Z+12, r8	; 0x0c
    96c4:	88 8a       	std	Y+16, r8	; 0x10
    96c6:	8c 8e       	std	Y+28, r8	; 0x1c
    96c8:	90 92 94 96 	sts	0x9694, r9
    96cc:	98 9a       	sbi	0x13, 0	; 19
    96ce:	9c 9e       	mul	r9, r28
    96d0:	a0 a2       	std	Z+32, r10	; 0x20
    96d2:	a4 a6       	std	Z+44, r10	; 0x2c
    96d4:	a8 aa       	std	Y+48, r10	; 0x30
    96d6:	ac ae       	std	Y+60, r10	; 0x3c
    96d8:	b0 b2       	in	r11, 0x10	; 16
    96da:	b4 b6       	in	r11, 0x34	; 52
    96dc:	b8 ba       	out	0x18, r11	; 24
    96de:	bc be       	out	0x3c, r11	; 60
    96e0:	c0 c2       	rjmp	.+1408   	; 0x9c62 <waves+0x862>
    96e2:	c4 c6       	rjmp	.+3464   	; 0xa46c <LBPrint+0x30>
    96e4:	c8 ca       	rjmp	.-2672   	; 0x8c76 <ProcessMusic+0xe>
    96e6:	cc ce       	rjmp	.-616    	; 0x9480 <waves+0x80>
    96e8:	d0 d2       	rcall	.+1440   	; 0x9c8a <waves+0x88a>
    96ea:	d4 d6       	rcall	.+3496   	; 0xa494 <LBPrintByte+0x20>
    96ec:	d8 da       	rcall	.-2640   	; 0x8c9e <ProcessMusic+0x36>
    96ee:	dc de       	rcall	.-584    	; 0x94a8 <waves+0xa8>
    96f0:	e0 e2       	ldi	r30, 0x20	; 32
    96f2:	e4 e6       	ldi	r30, 0x64	; 100
    96f4:	e8 ea       	ldi	r30, 0xA8	; 168
    96f6:	ec ee       	ldi	r30, 0xEC	; 236
    96f8:	f0 f2       	brcs	.-68     	; 0x96b6 <waves+0x2b6>
    96fa:	f4 f6       	brge	.-68     	; 0x96b8 <waves+0x2b8>
    96fc:	f8 fa       	.word	0xfaf8	; ????
    96fe:	fc fe       	.word	0xfefc	; ????
    9700:	7f 7f       	andi	r23, 0xFF	; 255
    9702:	7f 7f       	andi	r23, 0xFF	; 255
    9704:	7f 7f       	andi	r23, 0xFF	; 255
    9706:	7f 7f       	andi	r23, 0xFF	; 255
    9708:	7f 7f       	andi	r23, 0xFF	; 255
    970a:	7f 7f       	andi	r23, 0xFF	; 255
    970c:	7f 7f       	andi	r23, 0xFF	; 255
    970e:	7f 7f       	andi	r23, 0xFF	; 255
    9710:	7f 7f       	andi	r23, 0xFF	; 255
    9712:	7f 7f       	andi	r23, 0xFF	; 255
    9714:	7f 7f       	andi	r23, 0xFF	; 255
    9716:	7f 7f       	andi	r23, 0xFF	; 255
    9718:	7f 7f       	andi	r23, 0xFF	; 255
    971a:	7f 7f       	andi	r23, 0xFF	; 255
    971c:	7f 7f       	andi	r23, 0xFF	; 255
    971e:	7f 7f       	andi	r23, 0xFF	; 255
    9720:	7f 7f       	andi	r23, 0xFF	; 255
    9722:	7f 7f       	andi	r23, 0xFF	; 255
    9724:	7f 7f       	andi	r23, 0xFF	; 255
    9726:	7f 7f       	andi	r23, 0xFF	; 255
    9728:	7f 7f       	andi	r23, 0xFF	; 255
    972a:	7f 7f       	andi	r23, 0xFF	; 255
    972c:	7f 7f       	andi	r23, 0xFF	; 255
    972e:	7f 7f       	andi	r23, 0xFF	; 255
    9730:	7f 7f       	andi	r23, 0xFF	; 255
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	80 80       	ld	r8, Z
    9742:	80 80       	ld	r8, Z
    9744:	80 80       	ld	r8, Z
    9746:	80 80       	ld	r8, Z
    9748:	80 80       	ld	r8, Z
    974a:	80 80       	ld	r8, Z
    974c:	80 80       	ld	r8, Z
    974e:	80 80       	ld	r8, Z
    9750:	80 80       	ld	r8, Z
    9752:	80 80       	ld	r8, Z
    9754:	80 80       	ld	r8, Z
    9756:	80 80       	ld	r8, Z
    9758:	80 80       	ld	r8, Z
    975a:	80 80       	ld	r8, Z
    975c:	80 80       	ld	r8, Z
    975e:	80 80       	ld	r8, Z
    9760:	80 80       	ld	r8, Z
    9762:	80 80       	ld	r8, Z
    9764:	80 80       	ld	r8, Z
    9766:	80 80       	ld	r8, Z
    9768:	80 80       	ld	r8, Z
    976a:	80 80       	ld	r8, Z
    976c:	80 80       	ld	r8, Z
    976e:	80 80       	ld	r8, Z
    9770:	80 80       	ld	r8, Z
    9772:	80 80       	ld	r8, Z
    9774:	80 80       	ld	r8, Z
    9776:	80 80       	ld	r8, Z
    9778:	80 80       	ld	r8, Z
    977a:	80 80       	ld	r8, Z
    977c:	80 80       	ld	r8, Z
    977e:	80 80       	ld	r8, Z
    9780:	80 80       	ld	r8, Z
    9782:	80 80       	ld	r8, Z
    9784:	80 80       	ld	r8, Z
    9786:	80 80       	ld	r8, Z
    9788:	80 80       	ld	r8, Z
    978a:	80 80       	ld	r8, Z
    978c:	80 80       	ld	r8, Z
    978e:	80 80       	ld	r8, Z
    9790:	80 80       	ld	r8, Z
    9792:	80 80       	ld	r8, Z
    9794:	80 80       	ld	r8, Z
    9796:	80 80       	ld	r8, Z
    9798:	80 80       	ld	r8, Z
    979a:	80 80       	ld	r8, Z
    979c:	80 80       	ld	r8, Z
    979e:	80 80       	ld	r8, Z
    97a0:	80 80       	ld	r8, Z
    97a2:	80 80       	ld	r8, Z
    97a4:	80 80       	ld	r8, Z
    97a6:	80 80       	ld	r8, Z
    97a8:	80 80       	ld	r8, Z
    97aa:	80 80       	ld	r8, Z
    97ac:	80 80       	ld	r8, Z
    97ae:	80 80       	ld	r8, Z
    97b0:	80 80       	ld	r8, Z
    97b2:	80 80       	ld	r8, Z
    97b4:	80 80       	ld	r8, Z
    97b6:	80 80       	ld	r8, Z
    97b8:	80 80       	ld	r8, Z
    97ba:	80 80       	ld	r8, Z
    97bc:	80 80       	ld	r8, Z
    97be:	80 80       	ld	r8, Z
    97c0:	80 80       	ld	r8, Z
    97c2:	80 80       	ld	r8, Z
    97c4:	80 80       	ld	r8, Z
    97c6:	80 80       	ld	r8, Z
    97c8:	80 80       	ld	r8, Z
    97ca:	80 80       	ld	r8, Z
    97cc:	80 80       	ld	r8, Z
    97ce:	80 80       	ld	r8, Z
    97d0:	80 80       	ld	r8, Z
    97d2:	80 80       	ld	r8, Z
    97d4:	80 80       	ld	r8, Z
    97d6:	80 80       	ld	r8, Z
    97d8:	80 80       	ld	r8, Z
    97da:	80 80       	ld	r8, Z
    97dc:	80 80       	ld	r8, Z
    97de:	80 80       	ld	r8, Z
    97e0:	80 80       	ld	r8, Z
    97e2:	80 80       	ld	r8, Z
    97e4:	80 80       	ld	r8, Z
    97e6:	80 80       	ld	r8, Z
    97e8:	80 80       	ld	r8, Z
    97ea:	80 80       	ld	r8, Z
    97ec:	80 80       	ld	r8, Z
    97ee:	80 80       	ld	r8, Z
    97f0:	80 80       	ld	r8, Z
    97f2:	80 80       	ld	r8, Z
    97f4:	80 80       	ld	r8, Z
    97f6:	80 80       	ld	r8, Z
    97f8:	80 80       	ld	r8, Z
    97fa:	80 80       	ld	r8, Z
    97fc:	80 80       	ld	r8, Z
    97fe:	80 80       	ld	r8, Z
    9800:	7f 7f       	andi	r23, 0xFF	; 255
    9802:	7f 7f       	andi	r23, 0xFF	; 255
    9804:	7f 7f       	andi	r23, 0xFF	; 255
    9806:	7f 7f       	andi	r23, 0xFF	; 255
    9808:	7f 7f       	andi	r23, 0xFF	; 255
    980a:	7f 7f       	andi	r23, 0xFF	; 255
    980c:	7f 7f       	andi	r23, 0xFF	; 255
    980e:	7f 7f       	andi	r23, 0xFF	; 255
    9810:	7f 7f       	andi	r23, 0xFF	; 255
    9812:	7f 7f       	andi	r23, 0xFF	; 255
    9814:	7f 7f       	andi	r23, 0xFF	; 255
    9816:	7f 7f       	andi	r23, 0xFF	; 255
    9818:	7f 7f       	andi	r23, 0xFF	; 255
    981a:	7f 7f       	andi	r23, 0xFF	; 255
    981c:	7f 7f       	andi	r23, 0xFF	; 255
    981e:	7f 7f       	andi	r23, 0xFF	; 255
    9820:	7f 7f       	andi	r23, 0xFF	; 255
    9822:	7f 7f       	andi	r23, 0xFF	; 255
    9824:	7f 7f       	andi	r23, 0xFF	; 255
    9826:	7f 7f       	andi	r23, 0xFF	; 255
    9828:	7f 7f       	andi	r23, 0xFF	; 255
    982a:	7f 7f       	andi	r23, 0xFF	; 255
    982c:	7f 7f       	andi	r23, 0xFF	; 255
    982e:	7f 7f       	andi	r23, 0xFF	; 255
    9830:	7f 7f       	andi	r23, 0xFF	; 255
    9832:	7f 7f       	andi	r23, 0xFF	; 255
    9834:	7f 7f       	andi	r23, 0xFF	; 255
    9836:	7f 7f       	andi	r23, 0xFF	; 255
    9838:	7f 7f       	andi	r23, 0xFF	; 255
    983a:	7f 7f       	andi	r23, 0xFF	; 255
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7f 7f       	andi	r23, 0xFF	; 255
    9848:	7f 7f       	andi	r23, 0xFF	; 255
    984a:	7f 7f       	andi	r23, 0xFF	; 255
    984c:	7f 7f       	andi	r23, 0xFF	; 255
    984e:	7f 7f       	andi	r23, 0xFF	; 255
    9850:	7f 7f       	andi	r23, 0xFF	; 255
    9852:	7f 7f       	andi	r23, 0xFF	; 255
    9854:	7f 7f       	andi	r23, 0xFF	; 255
    9856:	7f 7f       	andi	r23, 0xFF	; 255
    9858:	7f 7f       	andi	r23, 0xFF	; 255
    985a:	7f 7f       	andi	r23, 0xFF	; 255
    985c:	7f 7f       	andi	r23, 0xFF	; 255
    985e:	7f 7f       	andi	r23, 0xFF	; 255
    9860:	7f 7f       	andi	r23, 0xFF	; 255
    9862:	7f 7f       	andi	r23, 0xFF	; 255
    9864:	7f 7f       	andi	r23, 0xFF	; 255
    9866:	7f 7f       	andi	r23, 0xFF	; 255
    9868:	7f 7f       	andi	r23, 0xFF	; 255
    986a:	7f 7f       	andi	r23, 0xFF	; 255
    986c:	7f 7f       	andi	r23, 0xFF	; 255
    986e:	7f 7f       	andi	r23, 0xFF	; 255
    9870:	7f 7f       	andi	r23, 0xFF	; 255
    9872:	7f 7f       	andi	r23, 0xFF	; 255
    9874:	7f 7f       	andi	r23, 0xFF	; 255
    9876:	7f 7f       	andi	r23, 0xFF	; 255
    9878:	7f 7f       	andi	r23, 0xFF	; 255
    987a:	7f 7f       	andi	r23, 0xFF	; 255
    987c:	7f 7f       	andi	r23, 0xFF	; 255
    987e:	7f 7f       	andi	r23, 0xFF	; 255
    9880:	80 80       	ld	r8, Z
    9882:	80 80       	ld	r8, Z
    9884:	80 80       	ld	r8, Z
    9886:	80 80       	ld	r8, Z
    9888:	80 80       	ld	r8, Z
    988a:	80 80       	ld	r8, Z
    988c:	80 80       	ld	r8, Z
    988e:	80 80       	ld	r8, Z
    9890:	80 80       	ld	r8, Z
    9892:	80 80       	ld	r8, Z
    9894:	80 80       	ld	r8, Z
    9896:	80 80       	ld	r8, Z
    9898:	80 80       	ld	r8, Z
    989a:	80 80       	ld	r8, Z
    989c:	80 80       	ld	r8, Z
    989e:	80 80       	ld	r8, Z
    98a0:	80 80       	ld	r8, Z
    98a2:	80 80       	ld	r8, Z
    98a4:	80 80       	ld	r8, Z
    98a6:	80 80       	ld	r8, Z
    98a8:	80 80       	ld	r8, Z
    98aa:	80 80       	ld	r8, Z
    98ac:	80 80       	ld	r8, Z
    98ae:	80 80       	ld	r8, Z
    98b0:	80 80       	ld	r8, Z
    98b2:	80 80       	ld	r8, Z
    98b4:	80 80       	ld	r8, Z
    98b6:	80 80       	ld	r8, Z
    98b8:	80 80       	ld	r8, Z
    98ba:	80 80       	ld	r8, Z
    98bc:	80 80       	ld	r8, Z
    98be:	80 80       	ld	r8, Z
    98c0:	80 80       	ld	r8, Z
    98c2:	80 80       	ld	r8, Z
    98c4:	80 80       	ld	r8, Z
    98c6:	80 80       	ld	r8, Z
    98c8:	80 80       	ld	r8, Z
    98ca:	80 80       	ld	r8, Z
    98cc:	80 80       	ld	r8, Z
    98ce:	80 80       	ld	r8, Z
    98d0:	80 80       	ld	r8, Z
    98d2:	80 80       	ld	r8, Z
    98d4:	80 80       	ld	r8, Z
    98d6:	80 80       	ld	r8, Z
    98d8:	80 80       	ld	r8, Z
    98da:	80 80       	ld	r8, Z
    98dc:	80 80       	ld	r8, Z
    98de:	80 80       	ld	r8, Z
    98e0:	80 80       	ld	r8, Z
    98e2:	80 80       	ld	r8, Z
    98e4:	80 80       	ld	r8, Z
    98e6:	80 80       	ld	r8, Z
    98e8:	80 80       	ld	r8, Z
    98ea:	80 80       	ld	r8, Z
    98ec:	80 80       	ld	r8, Z
    98ee:	80 80       	ld	r8, Z
    98f0:	80 80       	ld	r8, Z
    98f2:	80 80       	ld	r8, Z
    98f4:	80 80       	ld	r8, Z
    98f6:	80 80       	ld	r8, Z
    98f8:	80 80       	ld	r8, Z
    98fa:	80 80       	ld	r8, Z
    98fc:	80 80       	ld	r8, Z
    98fe:	80 80       	ld	r8, Z
    9900:	7f 7f       	andi	r23, 0xFF	; 255
    9902:	7f 7f       	andi	r23, 0xFF	; 255
    9904:	7f 7f       	andi	r23, 0xFF	; 255
    9906:	7f 7f       	andi	r23, 0xFF	; 255
    9908:	7f 7f       	andi	r23, 0xFF	; 255
    990a:	7f 7f       	andi	r23, 0xFF	; 255
    990c:	7f 7f       	andi	r23, 0xFF	; 255
    990e:	7f 7f       	andi	r23, 0xFF	; 255
    9910:	7f 7f       	andi	r23, 0xFF	; 255
    9912:	7f 7f       	andi	r23, 0xFF	; 255
    9914:	7f 7f       	andi	r23, 0xFF	; 255
    9916:	7f 7f       	andi	r23, 0xFF	; 255
    9918:	7f 7f       	andi	r23, 0xFF	; 255
    991a:	7f 7f       	andi	r23, 0xFF	; 255
    991c:	7f 7f       	andi	r23, 0xFF	; 255
    991e:	7f 7f       	andi	r23, 0xFF	; 255
    9920:	7f 7f       	andi	r23, 0xFF	; 255
    9922:	7f 7f       	andi	r23, 0xFF	; 255
    9924:	7f 7f       	andi	r23, 0xFF	; 255
    9926:	7f 7f       	andi	r23, 0xFF	; 255
    9928:	7f 7f       	andi	r23, 0xFF	; 255
    992a:	7f 7f       	andi	r23, 0xFF	; 255
    992c:	7f 7f       	andi	r23, 0xFF	; 255
    992e:	7f 7f       	andi	r23, 0xFF	; 255
    9930:	7f 7f       	andi	r23, 0xFF	; 255
    9932:	7f 7f       	andi	r23, 0xFF	; 255
    9934:	7f 7f       	andi	r23, 0xFF	; 255
    9936:	7f 7f       	andi	r23, 0xFF	; 255
    9938:	7f 7f       	andi	r23, 0xFF	; 255
    993a:	7f 7f       	andi	r23, 0xFF	; 255
    993c:	7f 7f       	andi	r23, 0xFF	; 255
    993e:	7f 7f       	andi	r23, 0xFF	; 255
    9940:	7f 7f       	andi	r23, 0xFF	; 255
    9942:	7f 7f       	andi	r23, 0xFF	; 255
    9944:	7f 7f       	andi	r23, 0xFF	; 255
    9946:	7f 7f       	andi	r23, 0xFF	; 255
    9948:	7f 7f       	andi	r23, 0xFF	; 255
    994a:	7f 7f       	andi	r23, 0xFF	; 255
    994c:	7f 7f       	andi	r23, 0xFF	; 255
    994e:	7f 7f       	andi	r23, 0xFF	; 255
    9950:	7f 7f       	andi	r23, 0xFF	; 255
    9952:	7f 7f       	andi	r23, 0xFF	; 255
    9954:	7f 7f       	andi	r23, 0xFF	; 255
    9956:	7f 7f       	andi	r23, 0xFF	; 255
    9958:	7f 7f       	andi	r23, 0xFF	; 255
    995a:	7f 7f       	andi	r23, 0xFF	; 255
    995c:	7f 7f       	andi	r23, 0xFF	; 255
    995e:	7f 7f       	andi	r23, 0xFF	; 255
    9960:	7f 7f       	andi	r23, 0xFF	; 255
    9962:	7f 7f       	andi	r23, 0xFF	; 255
    9964:	7f 7f       	andi	r23, 0xFF	; 255
    9966:	7f 7f       	andi	r23, 0xFF	; 255
    9968:	7f 7f       	andi	r23, 0xFF	; 255
    996a:	7f 7f       	andi	r23, 0xFF	; 255
    996c:	7f 7f       	andi	r23, 0xFF	; 255
    996e:	7f 7f       	andi	r23, 0xFF	; 255
    9970:	7f 7f       	andi	r23, 0xFF	; 255
    9972:	7f 7f       	andi	r23, 0xFF	; 255
    9974:	7f 7f       	andi	r23, 0xFF	; 255
    9976:	7f 7f       	andi	r23, 0xFF	; 255
    9978:	7f 7f       	andi	r23, 0xFF	; 255
    997a:	7f 7f       	andi	r23, 0xFF	; 255
    997c:	7f 7f       	andi	r23, 0xFF	; 255
    997e:	7f 7f       	andi	r23, 0xFF	; 255
    9980:	7f 7f       	andi	r23, 0xFF	; 255
    9982:	7f 7f       	andi	r23, 0xFF	; 255
    9984:	7f 7f       	andi	r23, 0xFF	; 255
    9986:	7f 7f       	andi	r23, 0xFF	; 255
    9988:	7f 7f       	andi	r23, 0xFF	; 255
    998a:	7f 7f       	andi	r23, 0xFF	; 255
    998c:	7f 7f       	andi	r23, 0xFF	; 255
    998e:	7f 7f       	andi	r23, 0xFF	; 255
    9990:	7f 7f       	andi	r23, 0xFF	; 255
    9992:	7f 7f       	andi	r23, 0xFF	; 255
    9994:	7f 7f       	andi	r23, 0xFF	; 255
    9996:	7f 7f       	andi	r23, 0xFF	; 255
    9998:	7f 7f       	andi	r23, 0xFF	; 255
    999a:	7f 7f       	andi	r23, 0xFF	; 255
    999c:	7f 7f       	andi	r23, 0xFF	; 255
    999e:	7f 7f       	andi	r23, 0xFF	; 255
    99a0:	7f 7f       	andi	r23, 0xFF	; 255
    99a2:	7f 7f       	andi	r23, 0xFF	; 255
    99a4:	7f 7f       	andi	r23, 0xFF	; 255
    99a6:	7f 7f       	andi	r23, 0xFF	; 255
    99a8:	7f 7f       	andi	r23, 0xFF	; 255
    99aa:	7f 7f       	andi	r23, 0xFF	; 255
    99ac:	7f 7f       	andi	r23, 0xFF	; 255
    99ae:	7f 7f       	andi	r23, 0xFF	; 255
    99b0:	7f 7f       	andi	r23, 0xFF	; 255
    99b2:	7f 7f       	andi	r23, 0xFF	; 255
    99b4:	7f 7f       	andi	r23, 0xFF	; 255
    99b6:	7f 7f       	andi	r23, 0xFF	; 255
    99b8:	7f 7f       	andi	r23, 0xFF	; 255
    99ba:	7f 7f       	andi	r23, 0xFF	; 255
    99bc:	7f 7f       	andi	r23, 0xFF	; 255
    99be:	7f 7f       	andi	r23, 0xFF	; 255
    99c0:	80 80       	ld	r8, Z
    99c2:	80 80       	ld	r8, Z
    99c4:	80 80       	ld	r8, Z
    99c6:	80 80       	ld	r8, Z
    99c8:	80 80       	ld	r8, Z
    99ca:	80 80       	ld	r8, Z
    99cc:	80 80       	ld	r8, Z
    99ce:	80 80       	ld	r8, Z
    99d0:	80 80       	ld	r8, Z
    99d2:	80 80       	ld	r8, Z
    99d4:	80 80       	ld	r8, Z
    99d6:	80 80       	ld	r8, Z
    99d8:	80 80       	ld	r8, Z
    99da:	80 80       	ld	r8, Z
    99dc:	80 80       	ld	r8, Z
    99de:	80 80       	ld	r8, Z
    99e0:	80 80       	ld	r8, Z
    99e2:	80 80       	ld	r8, Z
    99e4:	80 80       	ld	r8, Z
    99e6:	80 80       	ld	r8, Z
    99e8:	80 80       	ld	r8, Z
    99ea:	80 80       	ld	r8, Z
    99ec:	80 80       	ld	r8, Z
    99ee:	80 80       	ld	r8, Z
    99f0:	80 80       	ld	r8, Z
    99f2:	80 80       	ld	r8, Z
    99f4:	80 80       	ld	r8, Z
    99f6:	80 80       	ld	r8, Z
    99f8:	80 80       	ld	r8, Z
    99fa:	80 80       	ld	r8, Z
    99fc:	80 80       	ld	r8, Z
    99fe:	80 80       	ld	r8, Z
    9a00:	03 09       	sbc	r16, r3
    9a02:	13 1e       	adc	r1, r19
    9a04:	28 31       	cpi	r18, 0x18	; 24
    9a06:	3a 40       	sbci	r19, 0x0A	; 10
    9a08:	46 4c       	sbci	r20, 0xC6	; 198
    9a0a:	50 54       	subi	r21, 0x40	; 64
    9a0c:	58 5b       	subi	r21, 0xB8	; 184
    9a0e:	5e 61       	ori	r21, 0x1E	; 30
    9a10:	63 65       	ori	r22, 0x53	; 83
    9a12:	67 69       	ori	r22, 0x97	; 151
    9a14:	6b 6c       	ori	r22, 0xCB	; 203
    9a16:	6e 6f       	ori	r22, 0xFE	; 254
    9a18:	70 71       	andi	r23, 0x10	; 16
    9a1a:	72 73       	andi	r23, 0x32	; 50
    9a1c:	74 75       	andi	r23, 0x54	; 84
    9a1e:	76 77       	andi	r23, 0x76	; 118
    9a20:	77 78       	andi	r23, 0x87	; 135
    9a22:	79 79       	andi	r23, 0x99	; 153
    9a24:	7a 7a       	andi	r23, 0xAA	; 170
    9a26:	7b 7b       	andi	r23, 0xBB	; 187
    9a28:	7c 7c       	andi	r23, 0xCC	; 204
    9a2a:	7c 7d       	andi	r23, 0xDC	; 220
    9a2c:	7d 7d       	andi	r23, 0xDD	; 221
    9a2e:	7e 7e       	andi	r23, 0xEE	; 238
    9a30:	7e 7e       	andi	r23, 0xEE	; 238
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	7f 7f       	andi	r23, 0xFF	; 255
    9a42:	7f 7f       	andi	r23, 0xFF	; 255
    9a44:	7f 7f       	andi	r23, 0xFF	; 255
    9a46:	7f 7f       	andi	r23, 0xFF	; 255
    9a48:	7f 7f       	andi	r23, 0xFF	; 255
    9a4a:	7f 7f       	andi	r23, 0xFF	; 255
    9a4c:	7f 7e       	andi	r23, 0xEF	; 239
    9a4e:	7e 7e       	andi	r23, 0xEE	; 238
    9a50:	7e 7d       	andi	r23, 0xDE	; 222
    9a52:	7d 7d       	andi	r23, 0xDD	; 221
    9a54:	7c 7c       	andi	r23, 0xCC	; 204
    9a56:	7c 7b       	andi	r23, 0xBC	; 188
    9a58:	7b 7a       	andi	r23, 0xAB	; 171
    9a5a:	7a 79       	andi	r23, 0x9A	; 154
    9a5c:	79 78       	andi	r23, 0x89	; 137
    9a5e:	77 77       	andi	r23, 0x77	; 119
    9a60:	76 75       	andi	r23, 0x56	; 86
    9a62:	74 73       	andi	r23, 0x34	; 52
    9a64:	72 71       	andi	r23, 0x12	; 18
    9a66:	70 6f       	ori	r23, 0xF0	; 240
    9a68:	6e 6c       	ori	r22, 0xCE	; 206
    9a6a:	6b 69       	ori	r22, 0x9B	; 155
    9a6c:	67 65       	ori	r22, 0x57	; 87
    9a6e:	63 61       	ori	r22, 0x13	; 19
    9a70:	5e 5b       	subi	r21, 0xBE	; 190
    9a72:	58 54       	subi	r21, 0x48	; 72
    9a74:	50 4c       	sbci	r21, 0xC0	; 192
    9a76:	46 40       	sbci	r20, 0x06	; 6
    9a78:	3a 31       	cpi	r19, 0x1A	; 26
    9a7a:	28 1e       	adc	r2, r24
    9a7c:	13 09       	sbc	r17, r3
    9a7e:	03 00       	.word	0x0003	; ????
    9a80:	c6 cc       	rjmp	.-1652   	; 0x940e <waves+0xe>
    9a82:	d5 db       	rcall	.-2134   	; 0x922e <steptable+0x26>
    9a84:	df e3       	ldi	r29, 0x3F	; 63
    9a86:	e5 e7       	ldi	r30, 0x75	; 117
    9a88:	e9 ea       	ldi	r30, 0xA9	; 169
    9a8a:	eb ec       	ldi	r30, 0xCB	; 203
    9a8c:	ed ee       	ldi	r30, 0xED	; 237
    9a8e:	ef ef       	ldi	r30, 0xFF	; 255
    9a90:	f0 f0       	brcs	.+60     	; 0x9ace <waves+0x6ce>
    9a92:	f0 f1       	brcs	.+124    	; 0x9b10 <waves+0x710>
    9a94:	f1 f1       	breq	.+124    	; 0x9b12 <waves+0x712>
    9a96:	f1 f2       	breq	.-68     	; 0x9a54 <waves+0x654>
    9a98:	f2 f2       	brmi	.-68     	; 0x9a56 <waves+0x656>
    9a9a:	f2 f2       	brmi	.-68     	; 0x9a58 <waves+0x658>
    9a9c:	f2 f2       	brmi	.-68     	; 0x9a5a <waves+0x65a>
    9a9e:	f2 f3       	brmi	.-4      	; 0x9a9c <waves+0x69c>
    9aa0:	f3 f3       	brvs	.-4      	; 0x9a9e <waves+0x69e>
    9aa2:	f3 f3       	brvs	.-4      	; 0x9aa0 <waves+0x6a0>
    9aa4:	f3 f3       	brvs	.-4      	; 0x9aa2 <waves+0x6a2>
    9aa6:	f3 f3       	brvs	.-4      	; 0x9aa4 <waves+0x6a4>
    9aa8:	f3 f3       	brvs	.-4      	; 0x9aa6 <waves+0x6a6>
    9aaa:	f3 f3       	brvs	.-4      	; 0x9aa8 <waves+0x6a8>
    9aac:	f3 f3       	brvs	.-4      	; 0x9aaa <waves+0x6aa>
    9aae:	f3 f3       	brvs	.-4      	; 0x9aac <waves+0x6ac>
    9ab0:	f3 f3       	brvs	.-4      	; 0x9aae <waves+0x6ae>
    9ab2:	f3 f3       	brvs	.-4      	; 0x9ab0 <waves+0x6b0>
    9ab4:	f3 f3       	brvs	.-4      	; 0x9ab2 <waves+0x6b2>
    9ab6:	f3 f3       	brvs	.-4      	; 0x9ab4 <waves+0x6b4>
    9ab8:	f3 f3       	brvs	.-4      	; 0x9ab6 <waves+0x6b6>
    9aba:	f3 f3       	brvs	.-4      	; 0x9ab8 <waves+0x6b8>
    9abc:	f3 f3       	brvs	.-4      	; 0x9aba <waves+0x6ba>
    9abe:	f3 f3       	brvs	.-4      	; 0x9abc <waves+0x6bc>
    9ac0:	f3 f3       	brvs	.-4      	; 0x9abe <waves+0x6be>
    9ac2:	f3 f3       	brvs	.-4      	; 0x9ac0 <waves+0x6c0>
    9ac4:	f3 f3       	brvs	.-4      	; 0x9ac2 <waves+0x6c2>
    9ac6:	f3 f3       	brvs	.-4      	; 0x9ac4 <waves+0x6c4>
    9ac8:	f3 f3       	brvs	.-4      	; 0x9ac6 <waves+0x6c6>
    9aca:	f3 f3       	brvs	.-4      	; 0x9ac8 <waves+0x6c8>
    9acc:	f3 f3       	brvs	.-4      	; 0x9aca <waves+0x6ca>
    9ace:	f3 f3       	brvs	.-4      	; 0x9acc <waves+0x6cc>
    9ad0:	f3 f3       	brvs	.-4      	; 0x9ace <waves+0x6ce>
    9ad2:	f3 f3       	brvs	.-4      	; 0x9ad0 <waves+0x6d0>
    9ad4:	f3 f3       	brvs	.-4      	; 0x9ad2 <waves+0x6d2>
    9ad6:	f3 f3       	brvs	.-4      	; 0x9ad4 <waves+0x6d4>
    9ad8:	f3 f3       	brvs	.-4      	; 0x9ad6 <waves+0x6d6>
    9ada:	f3 f3       	brvs	.-4      	; 0x9ad8 <waves+0x6d8>
    9adc:	f3 f3       	brvs	.-4      	; 0x9ada <waves+0x6da>
    9ade:	f3 f3       	brvs	.-4      	; 0x9adc <waves+0x6dc>
    9ae0:	f2 f2       	brmi	.-68     	; 0x9a9e <waves+0x69e>
    9ae2:	f2 f2       	brmi	.-68     	; 0x9aa0 <waves+0x6a0>
    9ae4:	f2 f2       	brmi	.-68     	; 0x9aa2 <waves+0x6a2>
    9ae6:	f2 f2       	brmi	.-68     	; 0x9aa4 <waves+0x6a4>
    9ae8:	f1 f1       	breq	.+124    	; 0x9b66 <waves+0x766>
    9aea:	f1 f1       	breq	.+124    	; 0x9b68 <waves+0x768>
    9aec:	f0 f0       	brcs	.+60     	; 0x9b2a <waves+0x72a>
    9aee:	f0 ef       	ldi	r31, 0xF0	; 240
    9af0:	ef ee       	ldi	r30, 0xEF	; 239
    9af2:	ed ec       	ldi	r30, 0xCD	; 205
    9af4:	eb ea       	ldi	r30, 0xAB	; 171
    9af6:	e9 e7       	ldi	r30, 0x79	; 121
    9af8:	e5 e3       	ldi	r30, 0x35	; 53
    9afa:	df db       	rcall	.-2114   	; 0x92ba <steptable+0xb2>
    9afc:	d5 cc       	rjmp	.-1622   	; 0x94a8 <waves+0xa8>
    9afe:	c6 00       	.word	0x00c6	; ????
    9b00:	00 28       	or	r0, r0
    9b02:	3d 42       	sbci	r19, 0x2D	; 45
    9b04:	30 2d       	mov	r19, r0
    9b06:	2c 2b       	or	r18, r28
    9b08:	2c 2d       	mov	r18, r12
    9b0a:	2e 2f       	mov	r18, r30
    9b0c:	30 32       	cpi	r19, 0x20	; 32
    9b0e:	33 35       	cpi	r19, 0x53	; 83
    9b10:	37 39       	cpi	r19, 0x97	; 151
    9b12:	3b 3d       	cpi	r19, 0xDB	; 219
    9b14:	3f 41       	sbci	r19, 0x1F	; 31
    9b16:	43 45       	sbci	r20, 0x53	; 83
    9b18:	48 4a       	sbci	r20, 0xA8	; 168
    9b1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9b1c:	50 53       	subi	r21, 0x30	; 48
    9b1e:	55 57       	subi	r21, 0x75	; 117
    9b20:	59 5b       	subi	r21, 0xB9	; 185
    9b22:	5d 5f       	subi	r21, 0xFD	; 253
    9b24:	61 63       	ori	r22, 0x31	; 49
    9b26:	65 67       	ori	r22, 0x75	; 117
    9b28:	69 6b       	ori	r22, 0xB9	; 185
    9b2a:	6c 6e       	ori	r22, 0xEC	; 236
    9b2c:	70 71       	andi	r23, 0x10	; 16
    9b2e:	73 74       	andi	r23, 0x43	; 67
    9b30:	75 77       	andi	r23, 0x75	; 117
    9b32:	78 79       	andi	r23, 0x98	; 152
    9b34:	7a 7b       	andi	r23, 0xBA	; 186
    9b36:	7c 7d       	andi	r23, 0xDC	; 220
    9b38:	7d 7e       	andi	r23, 0xED	; 237
    9b3a:	7e 7f       	andi	r23, 0xFE	; 254
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7e 7e       	andi	r23, 0xEE	; 238
    9b48:	7d 7d       	andi	r23, 0xDD	; 221
    9b4a:	7c 7b       	andi	r23, 0xBC	; 188
    9b4c:	7a 79       	andi	r23, 0x9A	; 154
    9b4e:	78 77       	andi	r23, 0x78	; 120
    9b50:	75 74       	andi	r23, 0x45	; 69
    9b52:	73 71       	andi	r23, 0x13	; 19
    9b54:	70 6e       	ori	r23, 0xE0	; 224
    9b56:	6c 6b       	ori	r22, 0xBC	; 188
    9b58:	69 67       	ori	r22, 0x79	; 121
    9b5a:	65 63       	ori	r22, 0x35	; 53
    9b5c:	61 5f       	subi	r22, 0xF1	; 241
    9b5e:	5d 5b       	subi	r21, 0xBD	; 189
    9b60:	59 57       	subi	r21, 0x79	; 121
    9b62:	55 53       	subi	r21, 0x35	; 53
    9b64:	50 4e       	sbci	r21, 0xE0	; 224
    9b66:	4c 4a       	sbci	r20, 0xAC	; 172
    9b68:	48 45       	sbci	r20, 0x58	; 88
    9b6a:	43 41       	sbci	r20, 0x13	; 19
    9b6c:	3f 3d       	cpi	r19, 0xDF	; 223
    9b6e:	3b 39       	cpi	r19, 0x9B	; 155
    9b70:	37 35       	cpi	r19, 0x57	; 87
    9b72:	33 32       	cpi	r19, 0x23	; 35
    9b74:	30 2f       	mov	r19, r16
    9b76:	2e 2d       	mov	r18, r14
    9b78:	2c 2b       	or	r18, r28
    9b7a:	2c 2d       	mov	r18, r12
    9b7c:	30 42       	sbci	r19, 0x20	; 32
    9b7e:	3d 28       	or	r3, r13
    9b80:	00 e9       	ldi	r16, 0x90	; 144
    9b82:	e5 fe       	sbrs	r14, 5
    9b84:	d4 d7       	rcall	.+4008   	; 0xab2e <init_player_shot+0x366>
    9b86:	d7 d7       	rcall	.+4014   	; 0xab36 <init_player_shot+0x36e>
    9b88:	d6 d4       	rcall	.+2476   	; 0xa536 <LBPrintInt+0x60>
    9b8a:	d2 d0       	rcall	.+420    	; 0x9d30 <waves+0x930>
    9b8c:	ce cc       	rjmp	.-1636   	; 0x952a <waves+0x12a>
    9b8e:	ca c8       	rjmp	.-3692   	; 0x8d24 <ProcessMusic+0xbc>
    9b90:	c6 c3       	rjmp	.+1932   	; 0xa31e <LBGetNextFrame+0x4>
    9b92:	c1 bf       	out	0x31, r28	; 49
    9b94:	bd ba       	out	0x1d, r11	; 29
    9b96:	b8 b6       	in	r11, 0x38	; 56
    9b98:	b4 b1       	in	r27, 0x04	; 4
    9b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    9b9c:	ab a9       	ldd	r26, Y+51	; 0x33
    9b9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9ba0:	a3 a1       	ldd	r26, Z+35	; 0x23
    9ba2:	9f 9e       	mul	r9, r31
    9ba4:	9c 9a       	sbi	0x13, 4	; 19
    9ba6:	99 97       	sbiw	r26, 0x29	; 41
    9ba8:	95 94       	asr	r9
    9baa:	93 91       	.word	0x9193	; ????
    9bac:	90 8f       	std	Z+24, r25	; 0x18
    9bae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9bb0:	8b 8a       	std	Y+19, r8	; 0x13
    9bb2:	89 88       	ldd	r8, Y+17	; 0x11
    9bb4:	88 87       	std	Y+8, r24	; 0x08
    9bb6:	86 85       	ldd	r24, Z+14	; 0x0e
    9bb8:	85 84       	ldd	r8, Z+13	; 0x0d
    9bba:	84 84       	ldd	r8, Z+12	; 0x0c
    9bbc:	83 83       	std	Z+3, r24	; 0x03
    9bbe:	83 83       	std	Z+3, r24	; 0x03
    9bc0:	83 83       	std	Z+3, r24	; 0x03
    9bc2:	83 83       	std	Z+3, r24	; 0x03
    9bc4:	83 84       	ldd	r8, Z+11	; 0x0b
    9bc6:	84 84       	ldd	r8, Z+12	; 0x0c
    9bc8:	85 85       	ldd	r24, Z+13	; 0x0d
    9bca:	86 87       	std	Z+14, r24	; 0x0e
    9bcc:	88 88       	ldd	r8, Y+16	; 0x10
    9bce:	89 8a       	std	Y+17, r8	; 0x11
    9bd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    9bd4:	90 91 93 94 	lds	r25, 0x9493
    9bd8:	95 97       	sbiw	r26, 0x25	; 37
    9bda:	99 9a       	sbi	0x13, 1	; 19
    9bdc:	9c 9e       	mul	r9, r28
    9bde:	9f a1       	ldd	r25, Y+39	; 0x27
    9be0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9be2:	a7 a9       	ldd	r26, Z+55	; 0x37
    9be4:	ab ad       	ldd	r26, Y+59	; 0x3b
    9be6:	af b1       	in	r26, 0x0f	; 15
    9be8:	b4 b6       	in	r11, 0x34	; 52
    9bea:	b8 ba       	out	0x18, r11	; 24
    9bec:	bd bf       	out	0x3d, r27	; 61
    9bee:	c1 c3       	rjmp	.+1922   	; 0xa372 <LBGetJoyPadState+0xc>
    9bf0:	c6 c8       	rjmp	.-3700   	; 0x8d7e <ProcessMusic+0x116>
    9bf2:	ca cc       	rjmp	.-1644   	; 0x9588 <waves+0x188>
    9bf4:	ce d0       	rcall	.+412    	; 0x9d92 <waves+0x992>
    9bf6:	d2 d4       	rcall	.+2468   	; 0xa59c <LBRandom>
    9bf8:	d6 d7       	rcall	.+4012   	; 0xaba6 <init_player_shot+0x3de>
    9bfa:	d7 d7       	rcall	.+4014   	; 0xabaa <init_player_shot+0x3e2>
    9bfc:	d4 fe       	sbrs	r13, 4
    9bfe:	e5 e9       	ldi	r30, 0x95	; 149
    9c00:	f9 f8       	.word	0xf8f9	; ????
    9c02:	f9 f5       	brne	.+126    	; 0x9c82 <waves+0x882>
    9c04:	eb e1       	ldi	r30, 0x1B	; 27
    9c06:	dd de       	rcall	.-582    	; 0x99c2 <waves+0x5c2>
    9c08:	e0 e2       	ldi	r30, 0x20	; 32
    9c0a:	e4 e5       	ldi	r30, 0x54	; 84
    9c0c:	e6 e5       	ldi	r30, 0x56	; 86
    9c0e:	e4 e2       	ldi	r30, 0x24	; 36
    9c10:	de d9       	rcall	.-3140   	; 0x8fce <ProcessMusic+0x366>
    9c12:	d2 ca       	rjmp	.-2652   	; 0x91b8 <esmw+0xa2>
    9c14:	c1 b7       	in	r28, 0x31	; 49
    9c16:	ac a2       	std	Y+36, r10	; 0x24
    9c18:	99 91       	ld	r25, Y+
    9c1a:	8a 86       	std	Y+10, r8	; 0x0a
    9c1c:	83 81       	ldd	r24, Z+3	; 0x03
    9c1e:	80 80       	ld	r8, Z
    9c20:	81 82       	std	Z+1, r8	; 0x01
    9c22:	83 85       	ldd	r24, Z+11	; 0x0b
    9c24:	86 88       	ldd	r8, Z+22	; 0x16
    9c26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9c28:	8d 8f       	std	Y+29, r24	; 0x1d
    9c2a:	90 92 93 95 	sts	0x9593, r9
    9c2e:	96 97       	sbiw	r26, 0x26	; 38
    9c30:	98 99       	sbic	0x13, 0	; 19
    9c32:	9a 9b       	sbis	0x13, 2	; 19
    9c34:	9b 9c       	mul	r9, r11
    9c36:	9d 9d       	mul	r25, r13
    9c38:	9d 9e       	mul	r9, r29
    9c3a:	9e 9e       	mul	r9, r30
    9c3c:	9f 9f       	mul	r25, r31
    9c3e:	9f 9f       	mul	r25, r31
    9c40:	9f 9f       	mul	r25, r31
    9c42:	9f 9e       	mul	r9, r31
    9c44:	9e 9e       	mul	r9, r30
    9c46:	9d 9d       	mul	r25, r13
    9c48:	9d 9c       	mul	r9, r13
    9c4a:	9b 9b       	sbis	0x13, 3	; 19
    9c4c:	9a 99       	sbic	0x13, 2	; 19
    9c4e:	98 97       	sbiw	r26, 0x28	; 40
    9c50:	96 95       	lsr	r25
    9c52:	93 92       	.word	0x9293	; ????
    9c54:	90 8f       	std	Z+24, r25	; 0x18
    9c56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9c58:	8a 88       	ldd	r8, Y+18	; 0x12
    9c5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9c5c:	83 82       	std	Z+3, r8	; 0x03
    9c5e:	81 80       	ldd	r8, Z+1	; 0x01
    9c60:	80 81       	ld	r24, Z
    9c62:	83 86       	std	Z+11, r8	; 0x0b
    9c64:	8a 91       	ld	r24, -Y
    9c66:	99 a2       	std	Y+33, r9	; 0x21
    9c68:	ac b7       	in	r26, 0x3c	; 60
    9c6a:	c1 ca       	rjmp	.-2686   	; 0x91ee <esmw+0xd8>
    9c6c:	d2 d9       	rcall	.-3164   	; 0x9012 <ProcessMusic+0x3aa>
    9c6e:	de e2       	ldi	r29, 0x2E	; 46
    9c70:	e4 e5       	ldi	r30, 0x54	; 84
    9c72:	e6 e5       	ldi	r30, 0x56	; 86
    9c74:	e4 e2       	ldi	r30, 0x24	; 36
    9c76:	e0 de       	rcall	.-576    	; 0x9a38 <waves+0x638>
    9c78:	dd e1       	ldi	r29, 0x1D	; 29
    9c7a:	eb f5       	brvc	.+122    	; 0x9cf6 <waves+0x8f6>
    9c7c:	f9 f8       	.word	0xf8f9	; ????
    9c7e:	f9 00       	.word	0x00f9	; ????
    9c80:	07 08       	sbc	r0, r7
    9c82:	07 0b       	sbc	r16, r23
    9c84:	15 1f       	adc	r17, r21
    9c86:	23 22       	and	r2, r19
    9c88:	20 1e       	adc	r2, r16
    9c8a:	1c 1b       	sub	r17, r28
    9c8c:	1a 1b       	sub	r17, r26
    9c8e:	1c 1e       	adc	r1, r28
    9c90:	22 27       	eor	r18, r18
    9c92:	2e 36       	cpi	r18, 0x6E	; 110
    9c94:	3f 49       	sbci	r19, 0x9F	; 159
    9c96:	54 5e       	subi	r21, 0xE4	; 228
    9c98:	67 6f       	ori	r22, 0xF7	; 247
    9c9a:	76 7a       	andi	r23, 0xA6	; 166
    9c9c:	7e 7f       	andi	r23, 0xFE	; 254
    9c9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ca0:	7f 7e       	andi	r23, 0xEF	; 239
    9ca2:	7d 7b       	andi	r23, 0xBD	; 189
    9ca4:	7a 78       	andi	r23, 0x8A	; 138
    9ca6:	76 74       	andi	r23, 0x46	; 70
    9ca8:	73 71       	andi	r23, 0x13	; 19
    9caa:	70 6e       	ori	r23, 0xE0	; 224
    9cac:	6d 6b       	ori	r22, 0xBD	; 189
    9cae:	6a 69       	ori	r22, 0x9A	; 154
    9cb0:	68 67       	ori	r22, 0x78	; 120
    9cb2:	66 65       	ori	r22, 0x56	; 86
    9cb4:	65 64       	ori	r22, 0x45	; 69
    9cb6:	64 63       	ori	r22, 0x34	; 52
    9cb8:	63 62       	ori	r22, 0x23	; 35
    9cba:	62 62       	ori	r22, 0x22	; 34
    9cbc:	61 61       	ori	r22, 0x11	; 17
    9cbe:	61 61       	ori	r22, 0x11	; 17
    9cc0:	61 61       	ori	r22, 0x11	; 17
    9cc2:	61 62       	ori	r22, 0x21	; 33
    9cc4:	62 62       	ori	r22, 0x22	; 34
    9cc6:	63 63       	ori	r22, 0x33	; 51
    9cc8:	63 64       	ori	r22, 0x43	; 67
    9cca:	65 65       	ori	r22, 0x55	; 85
    9ccc:	66 67       	ori	r22, 0x76	; 118
    9cce:	68 69       	ori	r22, 0x98	; 152
    9cd0:	6a 6b       	ori	r22, 0xBA	; 186
    9cd2:	6d 6e       	ori	r22, 0xED	; 237
    9cd4:	70 71       	andi	r23, 0x10	; 16
    9cd6:	73 74       	andi	r23, 0x43	; 67
    9cd8:	76 78       	andi	r23, 0x86	; 134
    9cda:	7a 7b       	andi	r23, 0xBA	; 186
    9cdc:	7d 7e       	andi	r23, 0xED	; 237
    9cde:	7f 7f       	andi	r23, 0xFF	; 255
    9ce0:	7f 7f       	andi	r23, 0xFF	; 255
    9ce2:	7e 7a       	andi	r23, 0xAE	; 174
    9ce4:	76 6f       	ori	r23, 0xF6	; 246
    9ce6:	67 5e       	subi	r22, 0xE7	; 231
    9ce8:	54 49       	sbci	r21, 0x94	; 148
    9cea:	3f 36       	cpi	r19, 0x6F	; 111
    9cec:	2e 27       	eor	r18, r30
    9cee:	22 1e       	adc	r2, r18
    9cf0:	1c 1b       	sub	r17, r28
    9cf2:	1a 1b       	sub	r17, r26
    9cf4:	1c 1e       	adc	r1, r28
    9cf6:	20 22       	and	r2, r16
    9cf8:	23 1f       	adc	r18, r19
    9cfa:	15 0b       	sbc	r17, r21
    9cfc:	07 08       	sbc	r0, r7
    9cfe:	07 00       	.word	0x0007	; ????
    9d00:	1f 31       	cpi	r17, 0x1F	; 31
    9d02:	3d 44       	sbci	r19, 0x4D	; 77
    9d04:	4e 53       	subi	r20, 0x3E	; 62
    9d06:	54 56       	subi	r21, 0x64	; 100
    9d08:	5a 5f       	subi	r21, 0xFA	; 250
    9d0a:	64 69       	ori	r22, 0x94	; 148
    9d0c:	6e 74       	andi	r22, 0x4E	; 78
    9d0e:	76 79       	andi	r23, 0x96	; 150
    9d10:	7c 7f       	andi	r23, 0xFC	; 252
    9d12:	7f 7f       	andi	r23, 0xFF	; 255
    9d14:	7f 7f       	andi	r23, 0xFF	; 255
    9d16:	7f 7f       	andi	r23, 0xFF	; 255
    9d18:	7f 7f       	andi	r23, 0xFF	; 255
    9d1a:	7f 7f       	andi	r23, 0xFF	; 255
    9d1c:	7f 7f       	andi	r23, 0xFF	; 255
    9d1e:	7f 7f       	andi	r23, 0xFF	; 255
    9d20:	7f 7f       	andi	r23, 0xFF	; 255
    9d22:	7f 7f       	andi	r23, 0xFF	; 255
    9d24:	7f 7f       	andi	r23, 0xFF	; 255
    9d26:	7f 7f       	andi	r23, 0xFF	; 255
    9d28:	7f 7f       	andi	r23, 0xFF	; 255
    9d2a:	7f 7f       	andi	r23, 0xFF	; 255
    9d2c:	7f 7f       	andi	r23, 0xFF	; 255
    9d2e:	7f 7f       	andi	r23, 0xFF	; 255
    9d30:	7f 7f       	andi	r23, 0xFF	; 255
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7f 7f       	andi	r23, 0xFF	; 255
    9d46:	7f 7f       	andi	r23, 0xFF	; 255
    9d48:	7f 7f       	andi	r23, 0xFF	; 255
    9d4a:	7f 7f       	andi	r23, 0xFF	; 255
    9d4c:	7f 7f       	andi	r23, 0xFF	; 255
    9d4e:	7f 7f       	andi	r23, 0xFF	; 255
    9d50:	7f 7f       	andi	r23, 0xFF	; 255
    9d52:	7f 7f       	andi	r23, 0xFF	; 255
    9d54:	7f 7f       	andi	r23, 0xFF	; 255
    9d56:	7f 7f       	andi	r23, 0xFF	; 255
    9d58:	7f 7f       	andi	r23, 0xFF	; 255
    9d5a:	7f 7f       	andi	r23, 0xFF	; 255
    9d5c:	7f 7f       	andi	r23, 0xFF	; 255
    9d5e:	7f 7f       	andi	r23, 0xFF	; 255
    9d60:	7f 7f       	andi	r23, 0xFF	; 255
    9d62:	7f 7f       	andi	r23, 0xFF	; 255
    9d64:	7f 7f       	andi	r23, 0xFF	; 255
    9d66:	7f 7f       	andi	r23, 0xFF	; 255
    9d68:	7f 7f       	andi	r23, 0xFF	; 255
    9d6a:	7f 7f       	andi	r23, 0xFF	; 255
    9d6c:	7f 7f       	andi	r23, 0xFF	; 255
    9d6e:	7f 7f       	andi	r23, 0xFF	; 255
    9d70:	7f 7f       	andi	r23, 0xFF	; 255
    9d72:	7f 7f       	andi	r23, 0xFF	; 255
    9d74:	7f 7f       	andi	r23, 0xFF	; 255
    9d76:	7f 7f       	andi	r23, 0xFF	; 255
    9d78:	7f 7f       	andi	r23, 0xFF	; 255
    9d7a:	7f 7c       	andi	r23, 0xCF	; 207
    9d7c:	78 71       	andi	r23, 0x18	; 24
    9d7e:	68 4c       	sbci	r22, 0xC8	; 200
    9d80:	2c 1c       	adc	r2, r12
    9d82:	12 0c       	add	r1, r2
    9d84:	0a 0b       	sbc	r16, r26
    9d86:	0a 05       	cpc	r16, r10
    9d88:	fd f3       	brhs	.-2      	; 0x9d88 <waves+0x988>
    9d8a:	e9 df       	rcall	.-46     	; 0x9d5e <waves+0x95e>
    9d8c:	d4 ca       	rjmp	.-2648   	; 0x9336 <steptable+0x12e>
    9d8e:	c0 b7       	in	r28, 0x30	; 48
    9d90:	ae a6       	std	Y+46, r10	; 0x2e
    9d92:	9e 97       	sbiw	r26, 0x2e	; 46
    9d94:	91 8b       	std	Z+17, r25	; 0x11
    9d96:	86 85       	ldd	r24, Z+14	; 0x0e
    9d98:	82 80       	ldd	r8, Z+2	; 0x02
    9d9a:	80 80       	ld	r8, Z
    9d9c:	80 80       	ld	r8, Z
    9d9e:	80 80       	ld	r8, Z
    9da0:	80 80       	ld	r8, Z
    9da2:	80 80       	ld	r8, Z
    9da4:	80 80       	ld	r8, Z
    9da6:	80 80       	ld	r8, Z
    9da8:	80 80       	ld	r8, Z
    9daa:	80 80       	ld	r8, Z
    9dac:	80 80       	ld	r8, Z
    9dae:	80 80       	ld	r8, Z
    9db0:	80 80       	ld	r8, Z
    9db2:	80 80       	ld	r8, Z
    9db4:	80 80       	ld	r8, Z
    9db6:	80 80       	ld	r8, Z
    9db8:	80 80       	ld	r8, Z
    9dba:	80 80       	ld	r8, Z
    9dbc:	80 80       	ld	r8, Z
    9dbe:	80 80       	ld	r8, Z
    9dc0:	80 80       	ld	r8, Z
    9dc2:	80 80       	ld	r8, Z
    9dc4:	80 80       	ld	r8, Z
    9dc6:	80 80       	ld	r8, Z
    9dc8:	80 80       	ld	r8, Z
    9dca:	80 80       	ld	r8, Z
    9dcc:	80 80       	ld	r8, Z
    9dce:	80 80       	ld	r8, Z
    9dd0:	80 80       	ld	r8, Z
    9dd2:	80 80       	ld	r8, Z
    9dd4:	80 80       	ld	r8, Z
    9dd6:	80 80       	ld	r8, Z
    9dd8:	80 80       	ld	r8, Z
    9dda:	80 80       	ld	r8, Z
    9ddc:	80 80       	ld	r8, Z
    9dde:	80 80       	ld	r8, Z
    9de0:	80 80       	ld	r8, Z
    9de2:	80 80       	ld	r8, Z
    9de4:	80 80       	ld	r8, Z
    9de6:	80 80       	ld	r8, Z
    9de8:	80 80       	ld	r8, Z
    9dea:	80 80       	ld	r8, Z
    9dec:	80 80       	ld	r8, Z
    9dee:	80 80       	ld	r8, Z
    9df0:	80 80       	ld	r8, Z
    9df2:	80 80       	ld	r8, Z
    9df4:	80 87       	std	Z+8, r24	; 0x08
    9df6:	91 9d       	mul	r25, r1
    9df8:	ac c4       	rjmp	.+2392   	; 0xa752 <LBRotateSprites+0x4c>
    9dfa:	cb d4       	rcall	.+2454   	; 0xa792 <init_default_high_scores+0x1c>
    9dfc:	dd f2       	brhs	.-74     	; 0x9db4 <waves+0x9b4>
    9dfe:	fa fa       	.word	0xfafa	; ????

00009e00 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9e00:	80 91 f3 0c 	lds	r24, 0x0CF3
    9e04:	90 91 87 0d 	lds	r25, 0x0D87
    9e08:	89 17       	cp	r24, r25
    9e0a:	78 f4       	brcc	.+30     	; 0x9e2a <RestoreBackground+0x2a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    9e0c:	e8 2f       	mov	r30, r24
    9e0e:	f0 e0       	ldi	r31, 0x00	; 0
    9e10:	9f 01       	movw	r18, r30
    9e12:	22 0f       	add	r18, r18
    9e14:	33 1f       	adc	r19, r19
    9e16:	e2 0f       	add	r30, r18
    9e18:	f3 1f       	adc	r31, r19
    9e1a:	e0 5b       	subi	r30, 0xB0	; 176
    9e1c:	f3 4f       	sbci	r31, 0xF3	; 243
    9e1e:	a0 81       	ld	r26, Z
    9e20:	b1 81       	ldd	r27, Z+1	; 0x01
    9e22:	92 81       	ldd	r25, Z+2	; 0x02
    9e24:	9c 93       	st	X, r25
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    9e26:	8f 5f       	subi	r24, 0xFF	; 255
    9e28:	ed cf       	rjmp	.-38     	; 0x9e04 <RestoreBackground+0x4>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    9e2a:	08 95       	ret

00009e2c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9e2c:	2f 92       	push	r2
    9e2e:	3f 92       	push	r3
    9e30:	4f 92       	push	r4
    9e32:	5f 92       	push	r5
    9e34:	6f 92       	push	r6
    9e36:	7f 92       	push	r7
    9e38:	8f 92       	push	r8
    9e3a:	9f 92       	push	r9
    9e3c:	af 92       	push	r10
    9e3e:	bf 92       	push	r11
    9e40:	cf 92       	push	r12
    9e42:	df 92       	push	r13
    9e44:	ef 92       	push	r14
    9e46:	ff 92       	push	r15
    9e48:	0f 93       	push	r16
    9e4a:	1f 93       	push	r17
    9e4c:	cf 93       	push	r28
    9e4e:	df 93       	push	r29
    9e50:	00 d0       	rcall	.+0      	; 0x9e52 <ProcessSprites+0x26>
    9e52:	00 d0       	rcall	.+0      	; 0x9e54 <ProcessSprites+0x28>
    9e54:	cd b7       	in	r28, 0x3d	; 61
    9e56:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    9e58:	80 91 00 05 	lds	r24, 0x0500
    9e5c:	88 23       	and	r24, r24
    9e5e:	09 f4       	brne	.+2      	; 0x9e62 <ProcessSprites+0x36>
    9e60:	e0 c0       	rjmp	.+448    	; 0xa022 <ProcessSprites+0x1f6>

		userRamTilesCount=userRamTilesCount_tmp;
    9e62:	80 91 f2 0c 	lds	r24, 0x0CF2
    9e66:	80 93 f3 0c 	sts	0x0CF3, r24
		free_tile_index=userRamTilesCount;
    9e6a:	80 93 87 0d 	sts	0x0D87, r24
    9e6e:	e0 e1       	ldi	r30, 0x10	; 16
    9e70:	ce 2e       	mov	r12, r30
    9e72:	e5 e0       	ldi	r30, 0x05	; 5
    9e74:	de 2e       	mov	r13, r30
	
		for(i=0;i<MAX_SPRITES;i++){
    9e76:	71 2c       	mov	r7, r1
			bx=sprites[i].x;
    9e78:	f6 01       	movw	r30, r12
    9e7a:	20 81       	ld	r18, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9e7c:	20 3e       	cpi	r18, 0xE0	; 224
    9e7e:	09 f4       	brne	.+2      	; 0x9e82 <ProcessSprites+0x56>
    9e80:	b1 c0       	rjmp	.+354    	; 0x9fe4 <ProcessSprites+0x1b8>
				//get tile's screen section offsets
				
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
    9e82:	80 91 b2 0c 	lds	r24, 0x0CB2
    9e86:	90 e0       	ldi	r25, 0x00	; 0
    9e88:	82 0f       	add	r24, r18
    9e8a:	91 1d       	adc	r25, r1
					ssy=sprites[i].y+Screen.scrollY;
    9e8c:	41 81       	ldd	r20, Z+1	; 0x01
    9e8e:	20 91 b3 0c 	lds	r18, 0x0CB3
    9e92:	30 e0       	ldi	r19, 0x00	; 0
    9e94:	24 0f       	add	r18, r20
    9e96:	31 1d       	adc	r19, r1

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9e98:	ac 01       	movw	r20, r24
    9e9a:	73 e0       	ldi	r23, 0x03	; 3
    9e9c:	56 95       	lsr	r21
    9e9e:	47 95       	ror	r20
    9ea0:	7a 95       	dec	r23
    9ea2:	e1 f7       	brne	.-8      	; 0x9e9c <ProcessSprites+0x70>
    9ea4:	64 2e       	mov	r6, r20
				dx=ssx&0x7;
    9ea6:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9ea8:	11 f0       	breq	.+4      	; 0x9eae <ProcessSprites+0x82>
    9eaa:	92 e0       	ldi	r25, 0x02	; 2
    9eac:	01 c0       	rjmp	.+2      	; 0x9eb0 <ProcessSprites+0x84>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    9eae:	91 e0       	ldi	r25, 0x01	; 1
    9eb0:	99 83       	std	Y+1, r25	; 0x01
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9eb2:	a9 01       	movw	r20, r18
    9eb4:	63 e0       	ldi	r22, 0x03	; 3
    9eb6:	56 95       	lsr	r21
    9eb8:	47 95       	ror	r20
    9eba:	6a 95       	dec	r22
    9ebc:	e1 f7       	brne	.-8      	; 0x9eb6 <ProcessSprites+0x8a>
    9ebe:	54 2e       	mov	r5, r20
				dy=ssy%TILE_HEIGHT;
    9ec0:	27 70       	andi	r18, 0x07	; 7
				if(dy>0) ty++;			
    9ec2:	19 f0       	breq	.+6      	; 0x9eca <ProcessSprites+0x9e>
    9ec4:	52 e0       	ldi	r21, 0x02	; 2
    9ec6:	35 2e       	mov	r3, r21
    9ec8:	02 c0       	rjmp	.+4      	; 0x9ece <ProcessSprites+0xa2>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    9eca:	33 24       	eor	r3, r3
    9ecc:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9ece:	30 e0       	ldi	r19, 0x00	; 0
    9ed0:	32 2f       	mov	r19, r18
    9ed2:	22 27       	eor	r18, r18
    9ed4:	f9 01       	movw	r30, r18
    9ed6:	e8 0f       	add	r30, r24
    9ed8:	f1 1d       	adc	r31, r1
    9eda:	fc 83       	std	Y+4, r31	; 0x04
    9edc:	eb 83       	std	Y+3, r30	; 0x03
    9ede:	e1 2c       	mov	r14, r1
    9ee0:	f1 2c       	mov	r15, r1
    9ee2:	be 2c       	mov	r11, r14
    9ee4:	aa 24       	eor	r10, r10
    9ee6:	26 2c       	mov	r2, r6
    9ee8:	45 2c       	mov	r4, r5
    9eea:	4e 0c       	add	r4, r14
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
							    	wy-=VRAM_TILES_V;
							    }
                            #else
                                if(wy>=(Screen.scrollHeight*2)){
    9eec:	84 2c       	mov	r8, r4
    9eee:	91 2c       	mov	r9, r1
    9ef0:	84 2d       	mov	r24, r4
    9ef2:	20 91 b4 0c 	lds	r18, 0x0CB4
    9ef6:	42 2f       	mov	r20, r18
    9ef8:	50 e0       	ldi	r21, 0x00	; 0
    9efa:	44 0f       	add	r20, r20
    9efc:	55 1f       	adc	r21, r21
    9efe:	84 16       	cp	r8, r20
    9f00:	95 06       	cpc	r9, r21
    9f02:	14 f0       	brlt	.+4      	; 0x9f08 <ProcessSprites+0xdc>
								    wy-=(Screen.scrollHeight*2);
    9f04:	22 0f       	add	r18, r18
    9f06:	03 c0       	rjmp	.+6      	; 0x9f0e <ProcessSprites+0xe2>
							    }else if(wy>=Screen.scrollHeight){
    9f08:	42 16       	cp	r4, r18
    9f0a:	10 f0       	brcs	.+4      	; 0x9f10 <ProcessSprites+0xe4>
							    	wy-=Screen.scrollHeight;
    9f0c:	84 2d       	mov	r24, r4
    9f0e:	82 1b       	sub	r24, r18
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9f10:	ff e1       	ldi	r31, 0x1F	; 31
    9f12:	f2 15       	cp	r31, r2
    9f14:	18 f4       	brcc	.+6      	; 0x9f1c <ProcessSprites+0xf0>
    9f16:	00 ee       	ldi	r16, 0xE0	; 224
    9f18:	02 0d       	add	r16, r2
    9f1a:	01 c0       	rjmp	.+2      	; 0x9f1e <ProcessSprites+0xf2>
    9f1c:	02 2d       	mov	r16, r2

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
							#else

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	
    9f1e:	28 2f       	mov	r18, r24
    9f20:	26 95       	lsr	r18
    9f22:	26 95       	lsr	r18
    9f24:	26 95       	lsr	r18
    9f26:	10 e0       	ldi	r17, 0x00	; 0
    9f28:	40 e2       	ldi	r20, 0x20	; 32
    9f2a:	24 9f       	mul	r18, r20
    9f2c:	00 0d       	add	r16, r0
    9f2e:	11 1d       	adc	r17, r1
    9f30:	11 24       	eor	r1, r1
    9f32:	23 e0       	ldi	r18, 0x03	; 3
    9f34:	00 0f       	add	r16, r16
    9f36:	11 1f       	adc	r17, r17
    9f38:	2a 95       	dec	r18
    9f3a:	e1 f7       	brne	.-8      	; 0x9f34 <ProcessSprites+0x108>
    9f3c:	87 70       	andi	r24, 0x07	; 7
    9f3e:	08 0f       	add	r16, r24
    9f40:	11 1d       	adc	r17, r1

							#endif

							bt=vram[ramPtr];						
    9f42:	00 50       	subi	r16, 0x00	; 0
    9f44:	1f 4f       	sbci	r17, 0xFF	; 255
    9f46:	f8 01       	movw	r30, r16
    9f48:	70 81       	ld	r23, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    9f4a:	81 e0       	ldi	r24, 0x01	; 1
    9f4c:	7c 31       	cpi	r23, 0x1C	; 28
    9f4e:	08 f4       	brcc	.+2      	; 0x9f52 <ProcessSprites+0x126>
    9f50:	80 e0       	ldi	r24, 0x00	; 0
    9f52:	21 e0       	ldi	r18, 0x01	; 1
    9f54:	30 91 f3 0c 	lds	r19, 0x0CF3
    9f58:	73 17       	cp	r23, r19
    9f5a:	18 f0       	brcs	.+6      	; 0x9f62 <ProcessSprites+0x136>
    9f5c:	20 e0       	ldi	r18, 0x00	; 0
    9f5e:	88 23       	and	r24, r24
    9f60:	51 f1       	breq	.+84     	; 0x9fb6 <ProcessSprites+0x18a>
    9f62:	60 91 87 0d 	lds	r22, 0x0D87
    9f66:	6c 31       	cpi	r22, 0x1C	; 28
    9f68:	20 f5       	brcc	.+72     	; 0x9fb2 <ProcessSprites+0x186>
								if( bt>=RAM_TILES_COUNT ){
    9f6a:	88 23       	and	r24, r24
    9f6c:	31 f0       	breq	.+12     	; 0x9f7a <ProcessSprites+0x14e>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    9f6e:	84 ee       	ldi	r24, 0xE4	; 228
    9f70:	87 0f       	add	r24, r23
    9f72:	7a 83       	std	Y+2, r23	; 0x02
    9f74:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <CopyFlashTile>
    9f78:	06 c0       	rjmp	.+12     	; 0x9f86 <ProcessSprites+0x15a>
								}else if(bt<userRamTilesCount){
    9f7a:	22 23       	and	r18, r18
    9f7c:	29 f0       	breq	.+10     	; 0x9f88 <ProcessSprites+0x15c>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    9f7e:	87 2f       	mov	r24, r23
    9f80:	7a 83       	std	Y+2, r23	; 0x02
    9f82:	0e 94 10 3f 	call	0x7e20	; 0x7e20 <CopyRamTile>
    9f86:	7a 81       	ldd	r23, Y+2	; 0x02
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    9f88:	80 91 87 0d 	lds	r24, 0x0D87
    9f8c:	e8 2f       	mov	r30, r24
    9f8e:	f0 e0       	ldi	r31, 0x00	; 0
    9f90:	9f 01       	movw	r18, r30
    9f92:	22 0f       	add	r18, r18
    9f94:	33 1f       	adc	r19, r19
    9f96:	e2 0f       	add	r30, r18
    9f98:	f3 1f       	adc	r31, r19
    9f9a:	e0 5b       	subi	r30, 0xB0	; 176
    9f9c:	f3 4f       	sbci	r31, 0xF3	; 243
    9f9e:	11 83       	std	Z+1, r17	; 0x01
    9fa0:	00 83       	st	Z, r16
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9fa2:	72 83       	std	Z+2, r23	; 0x02
								vram[ramPtr]=free_tile_index;
    9fa4:	f8 01       	movw	r30, r16
    9fa6:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;
    9fa8:	21 e0       	ldi	r18, 0x01	; 1
    9faa:	28 0f       	add	r18, r24
    9fac:	20 93 87 0d 	sts	0x0D87, r18
									CopyRamTile(bt,free_tile_index);
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
								ram_tiles_restore[free_tile_index].tileIndex=bt;
								vram[ramPtr]=free_tile_index;
								bt=free_tile_index;
    9fb0:	78 2f       	mov	r23, r24
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
    9fb2:	7c 31       	cpi	r23, 0x1C	; 28
    9fb4:	38 f4       	brcc	.+14     	; 0x9fc4 <ProcessSprites+0x198>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    9fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    9fba:	a5 01       	movw	r20, r10
    9fbc:	67 2f       	mov	r22, r23
    9fbe:	87 2d       	mov	r24, r7
    9fc0:	0e 94 9d 3f 	call	0x7f3a	; 0x7f3a <BlitSprite>
    9fc4:	ff ef       	ldi	r31, 0xFF	; 255
    9fc6:	af 1a       	sub	r10, r31
    9fc8:	bf 0a       	sbc	r11, r31
    9fca:	23 94       	inc	r2
    9fcc:	82 2d       	mov	r24, r2
    9fce:	86 19       	sub	r24, r6
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9fd0:	99 81       	ldd	r25, Y+1	; 0x01
    9fd2:	89 17       	cp	r24, r25
    9fd4:	08 f4       	brcc	.+2      	; 0x9fd8 <ProcessSprites+0x1ac>
    9fd6:	8c cf       	rjmp	.-232    	; 0x9ef0 <ProcessSprites+0xc4>
    9fd8:	ef ef       	ldi	r30, 0xFF	; 255
    9fda:	ee 1a       	sub	r14, r30
    9fdc:	fe 0a       	sbc	r15, r30
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9fde:	e3 14       	cp	r14, r3
    9fe0:	08 f4       	brcc	.+2      	; 0x9fe4 <ProcessSprites+0x1b8>
    9fe2:	7f cf       	rjmp	.-258    	; 0x9ee2 <ProcessSprites+0xb6>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    9fe4:	73 94       	inc	r7
    9fe6:	f4 e0       	ldi	r31, 0x04	; 4
    9fe8:	cf 0e       	add	r12, r31
    9fea:	d1 1c       	adc	r13, r1
    9fec:	40 e1       	ldi	r20, 0x10	; 16
    9fee:	74 12       	cpse	r7, r20
    9ff0:	43 cf       	rjmp	.-378    	; 0x9e78 <ProcessSprites+0x4c>


		//restore BG tiles
		RestoreBackground();

	}
    9ff2:	0f 90       	pop	r0
    9ff4:	0f 90       	pop	r0
    9ff6:	0f 90       	pop	r0
    9ff8:	0f 90       	pop	r0
    9ffa:	df 91       	pop	r29
    9ffc:	cf 91       	pop	r28
    9ffe:	1f 91       	pop	r17
    a000:	0f 91       	pop	r16
    a002:	ff 90       	pop	r15
    a004:	ef 90       	pop	r14
    a006:	df 90       	pop	r13
    a008:	cf 90       	pop	r12
    a00a:	bf 90       	pop	r11
    a00c:	af 90       	pop	r10
    a00e:	9f 90       	pop	r9
    a010:	8f 90       	pop	r8
    a012:	7f 90       	pop	r7
    a014:	6f 90       	pop	r6
    a016:	5f 90       	pop	r5
    a018:	4f 90       	pop	r4
    a01a:	3f 90       	pop	r3
    a01c:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    a01e:	0c 94 00 4f 	jmp	0x9e00	; 0x9e00 <RestoreBackground>

	}
    a022:	0f 90       	pop	r0
    a024:	0f 90       	pop	r0
    a026:	0f 90       	pop	r0
    a028:	0f 90       	pop	r0
    a02a:	df 91       	pop	r29
    a02c:	cf 91       	pop	r28
    a02e:	1f 91       	pop	r17
    a030:	0f 91       	pop	r16
    a032:	ff 90       	pop	r15
    a034:	ef 90       	pop	r14
    a036:	df 90       	pop	r13
    a038:	cf 90       	pop	r12
    a03a:	bf 90       	pop	r11
    a03c:	af 90       	pop	r10
    a03e:	9f 90       	pop	r9
    a040:	8f 90       	pop	r8
    a042:	7f 90       	pop	r7
    a044:	6f 90       	pop	r6
    a046:	5f 90       	pop	r5
    a048:	4f 90       	pop	r4
    a04a:	3f 90       	pop	r3
    a04c:	2f 90       	pop	r2
    a04e:	08 95       	ret

0000a050 <Scroll>:

	#if SCROLLING == 1
		//Scroll the screen by the relative amount specified (+/-)
		//This function handles screen wrapping on the Y axis if VRAM_TILES_V is less than 32
		void Scroll(char dx,char dy){
		Screen.scrollY+=dy;
    a050:	90 91 b3 0c 	lds	r25, 0x0CB3
    a054:	96 0f       	add	r25, r22
    a056:	90 93 b3 0c 	sts	0x0CB3, r25
		Screen.scrollX+=dx;
    a05a:	20 91 b2 0c 	lds	r18, 0x0CB2
    a05e:	82 0f       	add	r24, r18
    a060:	80 93 b2 0c 	sts	0x0CB2, r24

		if(Screen.scrollHeight<32){
    a064:	80 91 b4 0c 	lds	r24, 0x0CB4
    a068:	80 32       	cpi	r24, 0x20	; 32
    a06a:	b0 f4       	brcc	.+44     	; 0xa098 <Scroll+0x48>

			if(Screen.scrollY>=(Screen.scrollHeight*TILE_HEIGHT)){
    a06c:	29 2f       	mov	r18, r25
    a06e:	30 e0       	ldi	r19, 0x00	; 0
    a070:	78 e0       	ldi	r23, 0x08	; 8
    a072:	87 9f       	mul	r24, r23
    a074:	a0 01       	movw	r20, r0
    a076:	11 24       	eor	r1, r1
    a078:	24 17       	cp	r18, r20
    a07a:	35 07       	cpc	r19, r21
    a07c:	6c f0       	brlt	.+26     	; 0xa098 <Scroll+0x48>
				if(dy>=0){	
    a07e:	67 fd       	sbrc	r22, 7
    a080:	05 c0       	rjmp	.+10     	; 0xa08c <Scroll+0x3c>
					Screen.scrollY=(Screen.scrollY-(Screen.scrollHeight*TILE_HEIGHT));
    a082:	28 ef       	ldi	r18, 0xF8	; 248
    a084:	82 9f       	mul	r24, r18
    a086:	90 0d       	add	r25, r0
    a088:	11 24       	eor	r1, r1
    a08a:	04 c0       	rjmp	.+8      	; 0xa094 <Scroll+0x44>
				}else{
					Screen.scrollY=((Screen.scrollHeight*TILE_HEIGHT)-1)-(0xff-Screen.scrollY);
    a08c:	78 e0       	ldi	r23, 0x08	; 8
    a08e:	87 9f       	mul	r24, r23
    a090:	90 0d       	add	r25, r0
    a092:	11 24       	eor	r1, r1
    a094:	90 93 b3 0c 	sts	0x0CB3, r25
    a098:	08 95       	ret

0000a09a <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a09a:	e0 e1       	ldi	r30, 0x10	; 16
    a09c:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a09e:	80 ee       	ldi	r24, 0xE0	; 224
    a0a0:	80 83       	st	Z, r24
    a0a2:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    a0a4:	95 e0       	ldi	r25, 0x05	; 5
    a0a6:	e0 35       	cpi	r30, 0x50	; 80
    a0a8:	f9 07       	cpc	r31, r25
    a0aa:	d1 f7       	brne	.-12     	; 0xa0a0 <InitializeVideoMode+0x6>
		
		#if SCROLLING == 1
		//	for(int i=0;i<(OVERLAY_LINES*VRAM_TILES_H);i++){
		//		overlay_vram[i]=RAM_TILES_COUNT;
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
    a0ac:	80 e2       	ldi	r24, 0x20	; 32
    a0ae:	80 93 b4 0c 	sts	0x0CB4, r24
			Screen.overlayHeight=0;
    a0b2:	10 92 af 0c 	sts	0x0CAF, r1
    a0b6:	08 95       	ret

0000a0b8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    a0b8:	2f 92       	push	r2
    a0ba:	3f 92       	push	r3
    a0bc:	4f 92       	push	r4
    a0be:	5f 92       	push	r5
    a0c0:	6f 92       	push	r6
    a0c2:	7f 92       	push	r7
    a0c4:	8f 92       	push	r8
    a0c6:	9f 92       	push	r9
    a0c8:	af 92       	push	r10
    a0ca:	bf 92       	push	r11
    a0cc:	cf 92       	push	r12
    a0ce:	df 92       	push	r13
    a0d0:	ef 92       	push	r14
    a0d2:	ff 92       	push	r15
    a0d4:	0f 93       	push	r16
    a0d6:	1f 93       	push	r17
    a0d8:	cf 93       	push	r28
    a0da:	df 93       	push	r29
    a0dc:	00 d0       	rcall	.+0      	; 0xa0de <DrawMap+0x26>
    a0de:	1f 92       	push	r1
    a0e0:	cd b7       	in	r28, 0x3d	; 61
    a0e2:	de b7       	in	r29, 0x3e	; 62
    a0e4:	28 2f       	mov	r18, r24
    a0e6:	3a 01       	movw	r6, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    a0e8:	fa 01       	movw	r30, r20
    a0ea:	24 90       	lpm	r2, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    a0ec:	31 96       	adiw	r30, 0x01	; 1
    a0ee:	34 90       	lpm	r3, Z
    a0f0:	42 2c       	mov	r4, r2
    a0f2:	51 2c       	mov	r5, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a0f4:	e1 2c       	mov	r14, r1
    a0f6:	f1 2c       	mov	r15, r1
    a0f8:	00 e0       	ldi	r16, 0x00	; 0
    a0fa:	10 e0       	ldi	r17, 0x00	; 0
    a0fc:	c6 2e       	mov	r12, r22
    a0fe:	d1 2c       	mov	r13, r1
    a100:	03 15       	cp	r16, r3
    a102:	68 f5       	brcc	.+90     	; 0xa15e <DrawMap+0xa6>
    a104:	1b 82       	std	Y+3, r1	; 0x03
    a106:	1a 82       	std	Y+2, r1	; 0x02
    a108:	57 01       	movw	r10, r14
    a10a:	92 e0       	ldi	r25, 0x02	; 2
    a10c:	a9 0e       	add	r10, r25
    a10e:	b1 1c       	adc	r11, r1
    a110:	48 01       	movw	r8, r16
    a112:	8c 0c       	add	r8, r12
    a114:	9d 1c       	adc	r9, r13
			for(u8 dx=0;dx<mapWidth;dx++){			
    a116:	ea 81       	ldd	r30, Y+2	; 0x02
    a118:	e2 15       	cp	r30, r2
    a11a:	e0 f4       	brcc	.+56     	; 0xa154 <DrawMap+0x9c>
    a11c:	ea 81       	ldd	r30, Y+2	; 0x02
    a11e:	fb 81       	ldd	r31, Y+3	; 0x03
    a120:	ea 0d       	add	r30, r10
    a122:	fb 1d       	adc	r31, r11
    a124:	e6 0d       	add	r30, r6
    a126:	f7 1d       	adc	r31, r7
				SetTile(x+dx,(y+dy)%Screen.scrollHeight,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a128:	e4 91       	lpm	r30, Z
    a12a:	f0 e0       	ldi	r31, 0x00	; 0
    a12c:	60 91 b4 0c 	lds	r22, 0x0CB4
    a130:	70 e0       	ldi	r23, 0x00	; 0
    a132:	c4 01       	movw	r24, r8
    a134:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    a138:	af 01       	movw	r20, r30
    a13a:	68 2f       	mov	r22, r24
    a13c:	8a 81       	ldd	r24, Y+2	; 0x02
    a13e:	82 0f       	add	r24, r18
    a140:	29 83       	std	Y+1, r18	; 0x01
    a142:	0e 94 d3 41 	call	0x83a6	; 0x83a6 <SetTile>
    a146:	8a 81       	ldd	r24, Y+2	; 0x02
    a148:	9b 81       	ldd	r25, Y+3	; 0x03
    a14a:	01 96       	adiw	r24, 0x01	; 1
    a14c:	9b 83       	std	Y+3, r25	; 0x03
    a14e:	8a 83       	std	Y+2, r24	; 0x02
    a150:	29 81       	ldd	r18, Y+1	; 0x01
    a152:	e1 cf       	rjmp	.-62     	; 0xa116 <DrawMap+0x5e>
    a154:	0f 5f       	subi	r16, 0xFF	; 255
    a156:	1f 4f       	sbci	r17, 0xFF	; 255
    a158:	e4 0c       	add	r14, r4
    a15a:	f5 1c       	adc	r15, r5
    a15c:	d1 cf       	rjmp	.-94     	; 0xa100 <DrawMap+0x48>
			}
		}

	}
    a15e:	0f 90       	pop	r0
    a160:	0f 90       	pop	r0
    a162:	0f 90       	pop	r0
    a164:	df 91       	pop	r29
    a166:	cf 91       	pop	r28
    a168:	1f 91       	pop	r17
    a16a:	0f 91       	pop	r16
    a16c:	ff 90       	pop	r15
    a16e:	ef 90       	pop	r14
    a170:	df 90       	pop	r13
    a172:	cf 90       	pop	r12
    a174:	bf 90       	pop	r11
    a176:	af 90       	pop	r10
    a178:	9f 90       	pop	r9
    a17a:	8f 90       	pop	r8
    a17c:	7f 90       	pop	r7
    a17e:	6f 90       	pop	r6
    a180:	5f 90       	pop	r5
    a182:	4f 90       	pop	r4
    a184:	3f 90       	pop	r3
    a186:	2f 90       	pop	r2
    a188:	08 95       	ret

0000a18a <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a18a:	0f 93       	push	r16
    a18c:	1f 93       	push	r17
    a18e:	cf 93       	push	r28
    a190:	df 93       	push	r29
    a192:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a194:	c0 e0       	ldi	r28, 0x00	; 0
    a196:	d0 e0       	ldi	r29, 0x00	; 0
    a198:	c0 17       	cp	r28, r16
    a19a:	d1 07       	cpc	r29, r17
    a19c:	44 f4       	brge	.+16     	; 0xa1ae <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a19e:	0e 94 e9 41 	call	0x83d2	; 0x83d2 <GetVsyncFlag>
    a1a2:	88 23       	and	r24, r24
    a1a4:	e1 f3       	breq	.-8      	; 0xa19e <WaitVsync+0x14>
		ClearVsyncFlag();		
    a1a6:	0e 94 ed 41 	call	0x83da	; 0x83da <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a1aa:	21 96       	adiw	r28, 0x01	; 1
    a1ac:	f5 cf       	rjmp	.-22     	; 0xa198 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a1ae:	df 91       	pop	r29
    a1b0:	cf 91       	pop	r28
    a1b2:	1f 91       	pop	r17
    a1b4:	0f 91       	pop	r16
    a1b6:	08 95       	ret

0000a1b8 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    a1b8:	85 e3       	ldi	r24, 0x35	; 53
    a1ba:	99 e0       	ldi	r25, 0x09	; 9
    a1bc:	0e 94 9b 44 	call	0x8936	; 0x8936 <InitMusicPlayer>
			SetTileTable(logo_tileset);
    a1c0:	85 e3       	ldi	r24, 0x35	; 53
    a1c2:	91 e0       	ldi	r25, 0x01	; 1
    a1c4:	0e 94 e4 41 	call	0x83c8	; 0x83c8 <SetTileTable>
			
			//draw logo
			ClearVram();
    a1c8:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
			WaitVsync(15);		
    a1cc:	8f e0       	ldi	r24, 0x0F	; 15
    a1ce:	90 e0       	ldi	r25, 0x00	; 0
    a1d0:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>


			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
    a1d4:	41 e0       	ldi	r20, 0x01	; 1
    a1d6:	6f ef       	ldi	r22, 0xFF	; 255
    a1d8:	80 e0       	ldi	r24, 0x00	; 0
    a1da:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a1de:	4f e1       	ldi	r20, 0x1F	; 31
    a1e0:	51 e0       	ldi	r21, 0x01	; 1
    a1e2:	6c e0       	ldi	r22, 0x0C	; 12
    a1e4:	8c e0       	ldi	r24, 0x0C	; 12
    a1e6:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
			WaitVsync(3);
    a1ea:	83 e0       	ldi	r24, 0x03	; 3
    a1ec:	90 e0       	ldi	r25, 0x00	; 0
    a1ee:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    a1f2:	4e e0       	ldi	r20, 0x0E	; 14
    a1f4:	51 e0       	ldi	r21, 0x01	; 1
    a1f6:	6c e0       	ldi	r22, 0x0C	; 12
    a1f8:	8c e0       	ldi	r24, 0x0C	; 12
    a1fa:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
			WaitVsync(2);
    a1fe:	82 e0       	ldi	r24, 0x02	; 2
    a200:	90 e0       	ldi	r25, 0x00	; 0
    a202:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    a206:	4f e1       	ldi	r20, 0x1F	; 31
    a208:	51 e0       	ldi	r21, 0x01	; 1
    a20a:	6c e0       	ldi	r22, 0x0C	; 12
    a20c:	8c e0       	ldi	r24, 0x0C	; 12
    a20e:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
				TriggerNote(3,0,16,0xff);
			#endif 
		
			WaitVsync(65);
    a212:	81 e4       	ldi	r24, 0x41	; 65
    a214:	90 e0       	ldi	r25, 0x00	; 0
    a216:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
			ClearVram();
    a21a:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
			WaitVsync(20);
    a21e:	84 e1       	ldi	r24, 0x14	; 20
    a220:	90 e0       	ldi	r25, 0x00	; 0
    a222:	0c 94 c5 50 	jmp	0xa18a	; 0xa18a <WaitVsync>

0000a226 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a226:	80 93 85 0d 	sts	0x0D85, r24
	currFadeFrame=0;
    a22a:	10 92 89 0d 	sts	0x0D89, r1
	fadeActive=true;
    a22e:	81 e0       	ldi	r24, 0x01	; 1
    a230:	80 93 88 0d 	sts	0x0D88, r24
		
	if(blocking){
    a234:	66 23       	and	r22, r22
    a236:	21 f0       	breq	.+8      	; 0xa240 <doFade+0x1a>
		while(fadeActive==true);
    a238:	80 91 88 0d 	lds	r24, 0x0D88
    a23c:	81 11       	cpse	r24, r1
    a23e:	fc cf       	rjmp	.-8      	; 0xa238 <doFade+0x12>
    a240:	08 95       	ret

0000a242 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a242:	81 11       	cpse	r24, r1
    a244:	03 c0       	rjmp	.+6      	; 0xa24c <FadeIn+0xa>
		DDRC=0xff;
    a246:	8f ef       	ldi	r24, 0xFF	; 255
    a248:	87 b9       	out	0x07, r24	; 7
		return;
    a24a:	08 95       	ret
	}
	fadeStep=1;
    a24c:	91 e0       	ldi	r25, 0x01	; 1
    a24e:	90 93 8a 0d 	sts	0x0D8A, r25
	fadeDir=1;
    a252:	90 93 86 0d 	sts	0x0D86, r25
	doFade(speed,blocking);
    a256:	0c 94 13 51 	jmp	0xa226	; 0xa226 <doFade>

0000a25a <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a25a:	81 11       	cpse	r24, r1
    a25c:	02 c0       	rjmp	.+4      	; 0xa262 <FadeOut+0x8>
		DDRC=0;
    a25e:	17 b8       	out	0x07, r1	; 7
		return;
    a260:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a262:	9c e0       	ldi	r25, 0x0C	; 12
    a264:	90 93 8a 0d 	sts	0x0D8A, r25
	fadeDir=-1;
    a268:	9f ef       	ldi	r25, 0xFF	; 255
    a26a:	90 93 86 0d 	sts	0x0D86, r25
	doFade(speed,blocking);
    a26e:	0c 94 13 51 	jmp	0xa226	; 0xa226 <doFade>

0000a272 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a272:	80 91 88 0d 	lds	r24, 0x0D88
    a276:	88 23       	and	r24, r24
    a278:	01 f1       	breq	.+64     	; 0xa2ba <ProcessFading+0x48>
		if(currFadeFrame==0){
    a27a:	80 91 89 0d 	lds	r24, 0x0D89
    a27e:	81 11       	cpse	r24, r1
    a280:	19 c0       	rjmp	.+50     	; 0xa2b4 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a282:	80 91 85 0d 	lds	r24, 0x0D85
    a286:	80 93 89 0d 	sts	0x0D89, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a28a:	e0 91 8a 0d 	lds	r30, 0x0D8A
    a28e:	f0 e0       	ldi	r31, 0x00	; 0
    a290:	ef 5f       	subi	r30, 0xFF	; 255
    a292:	fe 4f       	sbci	r31, 0xFE	; 254
    a294:	e4 91       	lpm	r30, Z
    a296:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a298:	90 91 86 0d 	lds	r25, 0x0D86
    a29c:	80 91 8a 0d 	lds	r24, 0x0D8A
    a2a0:	89 0f       	add	r24, r25
    a2a2:	80 93 8a 0d 	sts	0x0D8A, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a2a6:	88 23       	and	r24, r24
    a2a8:	11 f0       	breq	.+4      	; 0xa2ae <ProcessFading+0x3c>
    a2aa:	8d 30       	cpi	r24, 0x0D	; 13
    a2ac:	31 f4       	brne	.+12     	; 0xa2ba <ProcessFading+0x48>
				fadeActive=false;
    a2ae:	10 92 88 0d 	sts	0x0D88, r1
    a2b2:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a2b4:	81 50       	subi	r24, 0x01	; 1
    a2b6:	80 93 89 0d 	sts	0x0D89, r24
    a2ba:	08 95       	ret

0000a2bc <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a2bc:	0e 94 39 51 	call	0xa272	; 0xa272 <ProcessFading>
		ProcessSprites();
    a2c0:	0c 94 16 4f 	jmp	0x9e2c	; 0x9e2c <ProcessSprites>

0000a2c4 <LBMoveDelta>:
 * Calculate distance travelled, given speed (unitsPerSecond), by counting frames instead of
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
    a2c4:	e6 2f       	mov	r30, r22
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a2c6:	88 23       	and	r24, r24
    a2c8:	29 f1       	breq	.+74     	; 0xa314 <LBMoveDelta+0x50>
	if (unitsPerSecond < 0)
    a2ca:	87 ff       	sbrs	r24, 7
    a2cc:	03 c0       	rjmp	.+6      	; 0xa2d4 <LBMoveDelta+0x10>
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
    a2ce:	81 95       	neg	r24
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
	if (unitsPerSecond < 0)
	{
		direction = -1;
    a2d0:	3f ef       	ldi	r19, 0xFF	; 255
    a2d2:	01 c0       	rjmp	.+2      	; 0xa2d6 <LBMoveDelta+0x12>
 * multiplying by a time fraction.
 * This allows for fairly accurate movement without resorting to slow and memory intensive floating
 * point numbers. This function assumes a game loop speed of 60 frames per second
 */
{
	s8 direction = 1;
    a2d4:	31 e0       	ldi	r19, 0x01	; 1
	if (unitsPerSecond < 0)
	{
		direction = -1;
		unitsPerSecond = -unitsPerSecond;
	}
	base_delta = unitsPerSecond / 60;
    a2d6:	6c e3       	ldi	r22, 0x3C	; 60
    a2d8:	0e 94 d4 75 	call	0xeba8	; 0xeba8 <__divmodqi4>
    a2dc:	28 2f       	mov	r18, r24
	remainder_delta = unitsPerSecond % 60;
	if (remainder_delta == 0) return direction*base_delta;
    a2de:	99 23       	and	r25, r25
    a2e0:	a9 f0       	breq	.+42     	; 0xa30c <LBMoveDelta+0x48>
	mod_factor = 60 / remainder_delta;
    a2e2:	69 2f       	mov	r22, r25
    a2e4:	70 e0       	ldi	r23, 0x00	; 0
    a2e6:	8c e3       	ldi	r24, 0x3C	; 60
    a2e8:	90 e0       	ldi	r25, 0x00	; 0
    a2ea:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
	if (frame_counter % mod_factor == 0) {
    a2ee:	8e 2f       	mov	r24, r30
    a2f0:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    a2f4:	91 11       	cpse	r25, r1
    a2f6:	0a c0       	rjmp	.+20     	; 0xa30c <LBMoveDelta+0x48>
		return direction*(base_delta + 1);
    a2f8:	42 2f       	mov	r20, r18
    a2fa:	50 e0       	ldi	r21, 0x00	; 0
    a2fc:	4f 5f       	subi	r20, 0xFF	; 255
    a2fe:	5f 4f       	sbci	r21, 0xFF	; 255
    a300:	34 03       	mulsu	r19, r20
    a302:	c0 01       	movw	r24, r0
    a304:	35 9f       	mul	r19, r21
    a306:	90 0d       	add	r25, r0
    a308:	11 24       	eor	r1, r1
    a30a:	08 95       	ret
	}
	return direction*base_delta;
    a30c:	32 03       	mulsu	r19, r18
    a30e:	c0 01       	movw	r24, r0
    a310:	11 24       	eor	r1, r1
    a312:	08 95       	ret
	s8 direction = 1;
	u8 mod_factor;
	u8 base_delta;
	u8 remainder_delta;
	
	if (unitsPerSecond == 0) return 0;
    a314:	80 e0       	ldi	r24, 0x00	; 0
    a316:	90 e0       	ldi	r25, 0x00	; 0
	mod_factor = 60 / remainder_delta;
	if (frame_counter % mod_factor == 0) {
		return direction*(base_delta + 1);
	}
	return direction*base_delta;
}
    a318:	08 95       	ret

0000a31a <LBGetNextFrame>:

char* LBGetNextFrame(Animation* anim)
{
    a31a:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a31c:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a31e:	93 81       	ldd	r25, Z+3	; 0x03
    a320:	9f 5f       	subi	r25, 0xFF	; 255
    a322:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a324:	42 81       	ldd	r20, Z+2	; 0x02
    a326:	80 81       	ld	r24, Z
    a328:	26 81       	ldd	r18, Z+6	; 0x06
    a32a:	37 81       	ldd	r19, Z+7	; 0x07
    a32c:	94 17       	cp	r25, r20
    a32e:	30 f4       	brcc	.+12     	; 0xa33c <LBGetNextFrame+0x22>
	{
		return anim->anims[anim->current_anim];
    a330:	f9 01       	movw	r30, r18
    a332:	e8 0f       	add	r30, r24
    a334:	f1 1d       	adc	r31, r1
    a336:	e8 0f       	add	r30, r24
    a338:	f1 1d       	adc	r31, r1
    a33a:	12 c0       	rjmp	.+36     	; 0xa360 <LBGetNextFrame+0x46>
	}
	anim->frame_count = 0;
    a33c:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a33e:	90 e0       	ldi	r25, 0x00	; 0
    a340:	01 96       	adiw	r24, 0x01	; 1
    a342:	61 81       	ldd	r22, Z+1	; 0x01
    a344:	70 e0       	ldi	r23, 0x00	; 0
    a346:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    a34a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a34c:	81 11       	cpse	r24, r1
    a34e:	02 c0       	rjmp	.+4      	; 0xa354 <LBGetNextFrame+0x3a>
    a350:	41 e0       	ldi	r20, 0x01	; 1
    a352:	44 83       	std	Z+4, r20	; 0x04
    a354:	99 27       	eor	r25, r25
	return anim->anims[anim->current_anim];
    a356:	88 0f       	add	r24, r24
    a358:	99 1f       	adc	r25, r25
    a35a:	f9 01       	movw	r30, r18
    a35c:	e8 0f       	add	r30, r24
    a35e:	f9 1f       	adc	r31, r25
    a360:	80 81       	ld	r24, Z
    a362:	91 81       	ldd	r25, Z+1	; 0x01
}
    a364:	08 95       	ret

0000a366 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a366:	0f 93       	push	r16
    a368:	1f 93       	push	r17
    a36a:	cf 93       	push	r28
    a36c:	df 93       	push	r29
    a36e:	1f 92       	push	r1
    a370:	cd b7       	in	r28, 0x3d	; 61
    a372:	de b7       	in	r29, 0x3e	; 62
    a374:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2];

	p->held = ReadJoypad(index);
    a376:	86 2f       	mov	r24, r22
    a378:	69 83       	std	Y+1, r22	; 0x01
    a37a:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <ReadJoypad>
    a37e:	d8 01       	movw	r26, r16
    a380:	15 96       	adiw	r26, 0x05	; 5
    a382:	9c 93       	st	X, r25
    a384:	8e 93       	st	-X, r24
    a386:	14 97       	sbiw	r26, 0x04	; 4
    a388:	69 81       	ldd	r22, Y+1	; 0x01
    a38a:	e6 2f       	mov	r30, r22
    a38c:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a38e:	00 97       	sbiw	r24, 0x00	; 0
    a390:	51 f0       	breq	.+20     	; 0xa3a6 <LBGetJoyPadState+0x40>
    a392:	df 01       	movw	r26, r30
    a394:	aa 0f       	add	r26, r26
    a396:	bb 1f       	adc	r27, r27
    a398:	a3 50       	subi	r26, 0x03	; 3
    a39a:	b3 4f       	sbci	r27, 0xF3	; 243
    a39c:	2d 91       	ld	r18, X+
    a39e:	3c 91       	ld	r19, X
    a3a0:	82 17       	cp	r24, r18
    a3a2:	93 07       	cpc	r25, r19
    a3a4:	21 f0       	breq	.+8      	; 0xa3ae <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a3a6:	d8 01       	movw	r26, r16
    a3a8:	16 96       	adiw	r26, 0x06	; 6
    a3aa:	1c 92       	st	X, r1
    a3ac:	07 c0       	rjmp	.+14     	; 0xa3bc <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a3ae:	d8 01       	movw	r26, r16
    a3b0:	16 96       	adiw	r26, 0x06	; 6
    a3b2:	2c 91       	ld	r18, X
    a3b4:	16 97       	sbiw	r26, 0x06	; 6
    a3b6:	2f 5f       	subi	r18, 0xFF	; 255
    a3b8:	16 96       	adiw	r26, 0x06	; 6
    a3ba:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a3bc:	ee 0f       	add	r30, r30
    a3be:	ff 1f       	adc	r31, r31
    a3c0:	e3 50       	subi	r30, 0x03	; 3
    a3c2:	f3 4f       	sbci	r31, 0xF3	; 243
    a3c4:	20 81       	ld	r18, Z
    a3c6:	31 81       	ldd	r19, Z+1	; 0x01
    a3c8:	a9 01       	movw	r20, r18
    a3ca:	40 95       	com	r20
    a3cc:	50 95       	com	r21
    a3ce:	48 23       	and	r20, r24
    a3d0:	59 23       	and	r21, r25
    a3d2:	d8 01       	movw	r26, r16
    a3d4:	11 96       	adiw	r26, 0x01	; 1
    a3d6:	5c 93       	st	X, r21
    a3d8:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a3da:	ac 01       	movw	r20, r24
    a3dc:	40 95       	com	r20
    a3de:	50 95       	com	r21
    a3e0:	24 23       	and	r18, r20
    a3e2:	35 23       	and	r19, r21
    a3e4:	13 96       	adiw	r26, 0x03	; 3
    a3e6:	3c 93       	st	X, r19
    a3e8:	2e 93       	st	-X, r18
    a3ea:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a3ec:	91 83       	std	Z+1, r25	; 0x01
    a3ee:	80 83       	st	Z, r24
}
    a3f0:	0f 90       	pop	r0
    a3f2:	df 91       	pop	r29
    a3f4:	cf 91       	pop	r28
    a3f6:	1f 91       	pop	r17
    a3f8:	0f 91       	pop	r16
    a3fa:	08 95       	ret

0000a3fc <LBPrintChar>:
	font_tiles_map = tiles_map;
}

void LBPrintChar(u8 x, u8 y, u8 code)
{
	if (code >= 48 && code <= 57)
    a3fc:	90 ed       	ldi	r25, 0xD0	; 208
    a3fe:	94 0f       	add	r25, r20
    a400:	e0 91 8b 0d 	lds	r30, 0x0D8B
    a404:	f0 91 8c 0d 	lds	r31, 0x0D8C
    a408:	9a 30       	cpi	r25, 0x0A	; 10
    a40a:	38 f4       	brcc	.+14     	; 0xa41a <LBPrintChar+0x1e>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[3+code-48]));
    a40c:	24 2f       	mov	r18, r20
    a40e:	30 e0       	ldi	r19, 0x00	; 0
    a410:	2d 52       	subi	r18, 0x2D	; 45
    a412:	31 09       	sbc	r19, r1
    a414:	e2 0f       	add	r30, r18
    a416:	f3 1f       	adc	r31, r19
    a418:	0c c0       	rjmp	.+24     	; 0xa432 <LBPrintChar+0x36>
	}
	else if (code >= 65 && code <= 90)
    a41a:	9f eb       	ldi	r25, 0xBF	; 191
    a41c:	94 0f       	add	r25, r20
    a41e:	9a 31       	cpi	r25, 0x1A	; 26
    a420:	38 f4       	brcc	.+14     	; 0xa430 <LBPrintChar+0x34>
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[13+code-65]));
    a422:	50 e0       	ldi	r21, 0x00	; 0
    a424:	44 53       	subi	r20, 0x34	; 52
    a426:	51 09       	sbc	r21, r1
    a428:	e4 0f       	add	r30, r20
    a42a:	f5 1f       	adc	r31, r21
    a42c:	44 91       	lpm	r20, Z
    a42e:	03 c0       	rjmp	.+6      	; 0xa436 <LBPrintChar+0x3a>
	}
	else
	{
		SetTile(x, y, pgm_read_byte(&font_tiles_map[2]));
    a430:	32 96       	adiw	r30, 0x02	; 2
    a432:	e4 91       	lpm	r30, Z
    a434:	4e 2f       	mov	r20, r30
    a436:	50 e0       	ldi	r21, 0x00	; 0
    a438:	0c 94 d3 41 	jmp	0x83a6	; 0x83a6 <SetTile>

0000a43c <LBPrint>:
	}
}

void LBPrint(u8 x, u8 y, char* value)
{
    a43c:	ff 92       	push	r15
    a43e:	0f 93       	push	r16
    a440:	1f 93       	push	r17
    a442:	cf 93       	push	r28
    a444:	df 93       	push	r29
    a446:	d8 2f       	mov	r29, r24
    a448:	f6 2e       	mov	r15, r22
    a44a:	8a 01       	movw	r16, r20
	u8 i = 0;
    a44c:	c0 e0       	ldi	r28, 0x00	; 0
    a44e:	8c 2f       	mov	r24, r28
    a450:	8d 0f       	add	r24, r29
	u8 code = 0;
	while ((code = pgm_read_byte(&value[i])))
    a452:	f8 01       	movw	r30, r16
    a454:	ec 0f       	add	r30, r28
    a456:	f1 1d       	adc	r31, r1
    a458:	44 91       	lpm	r20, Z
    a45a:	44 23       	and	r20, r20
    a45c:	29 f0       	breq	.+10     	; 0xa468 <LBPrint+0x2c>
	{
		LBPrintChar(x++, y, code);
    a45e:	6f 2d       	mov	r22, r15
    a460:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		i++;
    a464:	cf 5f       	subi	r28, 0xFF	; 255
    a466:	f3 cf       	rjmp	.-26     	; 0xa44e <LBPrint+0x12>
	}
}
    a468:	df 91       	pop	r29
    a46a:	cf 91       	pop	r28
    a46c:	1f 91       	pop	r17
    a46e:	0f 91       	pop	r16
    a470:	ff 90       	pop	r15
    a472:	08 95       	ret

0000a474 <LBPrintByte>:

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
    a474:	df 92       	push	r13
    a476:	ef 92       	push	r14
    a478:	ff 92       	push	r15
    a47a:	0f 93       	push	r16
    a47c:	1f 93       	push	r17
    a47e:	cf 93       	push	r28
    a480:	df 93       	push	r29
    a482:	1f 92       	push	r1
    a484:	cd b7       	in	r28, 0x3d	; 61
    a486:	de b7       	in	r29, 0x3e	; 62
    a488:	38 2f       	mov	r19, r24
    a48a:	06 2f       	mov	r16, r22
    a48c:	84 2f       	mov	r24, r20
    a48e:	9d ef       	ldi	r25, 0xFD	; 253
    a490:	e9 2e       	mov	r14, r25
    a492:	e3 0e       	add	r14, r19
	for (u8 i = 0; i < 3; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a494:	4a e0       	ldi	r20, 0x0A	; 10
    a496:	f4 2e       	mov	r15, r20
    a498:	1f ef       	ldi	r17, 0xFF	; 255
    a49a:	13 0f       	add	r17, r19
    a49c:	6f 2d       	mov	r22, r15
    a49e:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    a4a2:	d8 2e       	mov	r13, r24
    a4a4:	40 e3       	ldi	r20, 0x30	; 48
    a4a6:	49 0f       	add	r20, r25
    a4a8:	60 2f       	mov	r22, r16
    a4aa:	83 2f       	mov	r24, r19
    a4ac:	29 83       	std	Y+1, r18	; 0x01
    a4ae:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		value /= 10;
    a4b2:	8d 2d       	mov	r24, r13
		if (!pad && value == 0) break;
    a4b4:	29 81       	ldd	r18, Y+1	; 0x01
    a4b6:	21 11       	cpse	r18, r1
    a4b8:	02 c0       	rjmp	.+4      	; 0xa4be <LBPrintByte+0x4a>
    a4ba:	dd 20       	and	r13, r13
    a4bc:	19 f0       	breq	.+6      	; 0xa4c4 <LBPrintByte+0x50>
    a4be:	31 2f       	mov	r19, r17
	}
}

void LBPrintByte(u8 x, u8 y, u8 value, char pad)
{
	for (u8 i = 0; i < 3; i++)
    a4c0:	1e 11       	cpse	r17, r14
    a4c2:	ea cf       	rjmp	.-44     	; 0xa498 <LBPrintByte+0x24>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a4c4:	0f 90       	pop	r0
    a4c6:	df 91       	pop	r29
    a4c8:	cf 91       	pop	r28
    a4ca:	1f 91       	pop	r17
    a4cc:	0f 91       	pop	r16
    a4ce:	ff 90       	pop	r15
    a4d0:	ef 90       	pop	r14
    a4d2:	df 90       	pop	r13
    a4d4:	08 95       	ret

0000a4d6 <LBPrintInt>:

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
    a4d6:	cf 92       	push	r12
    a4d8:	df 92       	push	r13
    a4da:	ef 92       	push	r14
    a4dc:	ff 92       	push	r15
    a4de:	0f 93       	push	r16
    a4e0:	1f 93       	push	r17
    a4e2:	cf 93       	push	r28
    a4e4:	df 93       	push	r29
    a4e6:	00 d0       	rcall	.+0      	; 0xa4e8 <LBPrintInt+0x12>
    a4e8:	cd b7       	in	r28, 0x3d	; 61
    a4ea:	de b7       	in	r29, 0x3e	; 62
    a4ec:	38 2f       	mov	r19, r24
    a4ee:	16 2f       	mov	r17, r22
    a4f0:	ca 01       	movw	r24, r20
    a4f2:	4b ef       	ldi	r20, 0xFB	; 251
    a4f4:	d4 2e       	mov	r13, r20
    a4f6:	d3 0e       	add	r13, r19
	for (u8 i = 0; i < 5; i++)
	{
		LBPrintChar(x--, y, value % 10 + 48);
    a4f8:	5a e0       	ldi	r21, 0x0A	; 10
    a4fa:	e5 2e       	mov	r14, r21
    a4fc:	f1 2c       	mov	r15, r1
    a4fe:	cc 24       	eor	r12, r12
    a500:	ca 94       	dec	r12
    a502:	c3 0e       	add	r12, r19
    a504:	b7 01       	movw	r22, r14
    a506:	0e 94 e2 75 	call	0xebc4	; 0xebc4 <__udivmodhi4>
    a50a:	06 2f       	mov	r16, r22
    a50c:	40 e3       	ldi	r20, 0x30	; 48
    a50e:	48 0f       	add	r20, r24
    a510:	61 2f       	mov	r22, r17
    a512:	83 2f       	mov	r24, r19
    a514:	29 83       	std	Y+1, r18	; 0x01
    a516:	7a 83       	std	Y+2, r23	; 0x02
    a518:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		value /= 10;
    a51c:	80 2f       	mov	r24, r16
    a51e:	7a 81       	ldd	r23, Y+2	; 0x02
    a520:	97 2f       	mov	r25, r23
		if (!pad && value == 0) break;
    a522:	29 81       	ldd	r18, Y+1	; 0x01
    a524:	21 11       	cpse	r18, r1
    a526:	02 c0       	rjmp	.+4      	; 0xa52c <LBPrintInt+0x56>
    a528:	00 97       	sbiw	r24, 0x00	; 0
    a52a:	19 f0       	breq	.+6      	; 0xa532 <LBPrintInt+0x5c>
    a52c:	3c 2d       	mov	r19, r12
	}
}

void LBPrintInt(u8 x, u8 y, u16 value, char pad)
{
	for (u8 i = 0; i < 5; i++)
    a52e:	cd 10       	cpse	r12, r13
    a530:	e6 cf       	rjmp	.-52     	; 0xa4fe <LBPrintInt+0x28>
	{
		LBPrintChar(x--, y, value % 10 + 48);
		value /= 10;
		if (!pad && value == 0) break;
	}
}
    a532:	0f 90       	pop	r0
    a534:	0f 90       	pop	r0
    a536:	df 91       	pop	r29
    a538:	cf 91       	pop	r28
    a53a:	1f 91       	pop	r17
    a53c:	0f 91       	pop	r16
    a53e:	ff 90       	pop	r15
    a540:	ef 90       	pop	r14
    a542:	df 90       	pop	r13
    a544:	cf 90       	pop	r12
    a546:	08 95       	ret

0000a548 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a548:	af 92       	push	r10
    a54a:	cf 92       	push	r12
    a54c:	ef 92       	push	r14
    a54e:	ff 92       	push	r15
    a550:	0f 93       	push	r16
    a552:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a554:	70 e0       	ldi	r23, 0x00	; 0
    a556:	f1 2c       	mov	r15, r1
    a558:	fb 01       	movw	r30, r22
    a55a:	e2 0f       	add	r30, r18
    a55c:	f1 1d       	adc	r31, r1
    a55e:	ee 16       	cp	r14, r30
    a560:	ff 06       	cpc	r15, r31
    a562:	a4 f4       	brge	.+40     	; 0xa58c <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a564:	ea 0c       	add	r14, r10
    a566:	f1 1c       	adc	r15, r1
    a568:	6e 15       	cp	r22, r14
    a56a:	7f 05       	cpc	r23, r15
    a56c:	7c f4       	brge	.+30     	; 0xa58c <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a56e:	28 2f       	mov	r18, r24
    a570:	30 e0       	ldi	r19, 0x00	; 0
    a572:	10 e0       	ldi	r17, 0x00	; 0
    a574:	c9 01       	movw	r24, r18
    a576:	84 0f       	add	r24, r20
    a578:	91 1d       	adc	r25, r1
    a57a:	08 17       	cp	r16, r24
    a57c:	19 07       	cpc	r17, r25
    a57e:	34 f4       	brge	.+12     	; 0xa58c <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a580:	0c 0d       	add	r16, r12
    a582:	11 1d       	adc	r17, r1
    a584:	81 e0       	ldi	r24, 0x01	; 1
    a586:	20 17       	cp	r18, r16
    a588:	31 07       	cpc	r19, r17
    a58a:	0c f0       	brlt	.+2      	; 0xa58e <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a58c:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a58e:	1f 91       	pop	r17
    a590:	0f 91       	pop	r16
    a592:	ff 90       	pop	r15
    a594:	ef 90       	pop	r14
    a596:	cf 90       	pop	r12
    a598:	af 90       	pop	r10
    a59a:	08 95       	ret

0000a59c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a59c:	cf 93       	push	r28
    a59e:	df 93       	push	r29
    a5a0:	d8 2f       	mov	r29, r24
    a5a2:	c6 2f       	mov	r28, r22
	u16 tmp = GetPrngNumber(0) % 255;
    a5a4:	80 e0       	ldi	r24, 0x00	; 0
    a5a6:	90 e0       	ldi	r25, 0x00	; 0
    a5a8:	0e 94 c1 43 	call	0x8782	; 0x8782 <GetPrngNumber>
    a5ac:	6f ef       	ldi	r22, 0xFF	; 255
    a5ae:	70 e0       	ldi	r23, 0x00	; 0
    a5b0:	0e 94 e2 75 	call	0xebc4	; 0xebc4 <__udivmodhi4>
	return (((u8)tmp) % (to - from)) + from;
    a5b4:	6c 2f       	mov	r22, r28
    a5b6:	70 e0       	ldi	r23, 0x00	; 0
    a5b8:	6d 1b       	sub	r22, r29
    a5ba:	71 09       	sbc	r23, r1
    a5bc:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
}
    a5c0:	8d 0f       	add	r24, r29
    a5c2:	df 91       	pop	r29
    a5c4:	cf 91       	pop	r28
    a5c6:	08 95       	ret

0000a5c8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a5c8:	cf 93       	push	r28
    a5ca:	df 93       	push	r29
    a5cc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a5ce:	c0 e0       	ldi	r28, 0x00	; 0
    a5d0:	cd 17       	cp	r28, r29
    a5d2:	31 f0       	breq	.+12     	; 0xa5e0 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a5d4:	8f ef       	ldi	r24, 0xFF	; 255
    a5d6:	9f ef       	ldi	r25, 0xFF	; 255
    a5d8:	0e 94 ff 41 	call	0x83fe	; 0x83fe <WaitUs>
	return (((u8)tmp) % (to - from)) + from;
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a5dc:	cf 5f       	subi	r28, 0xFF	; 255
    a5de:	f8 cf       	rjmp	.-16     	; 0xa5d0 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a5e0:	df 91       	pop	r29
    a5e2:	cf 91       	pop	r28
    a5e4:	08 95       	ret

0000a5e6 <LBMapSprite>:

void LBMapSprite(u8 startSprite,const char *map,u8 spriteFlags)
{
    a5e6:	df 92       	push	r13
    a5e8:	ef 92       	push	r14
    a5ea:	ff 92       	push	r15
    a5ec:	0f 93       	push	r16
    a5ee:	1f 93       	push	r17
    a5f0:	cf 93       	push	r28
    a5f2:	df 93       	push	r29
    a5f4:	db 01       	movw	r26, r22
	u8 mapWidth=pgm_read_byte(&(map[0]));
    a5f6:	fb 01       	movw	r30, r22
    a5f8:	14 91       	lpm	r17, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    a5fa:	31 96       	adiw	r30, 0x01	; 1
    a5fc:	64 91       	lpm	r22, Z
    a5fe:	5f ef       	ldi	r21, 0xFF	; 255
    a600:	51 0f       	add	r21, r17
	s8 x,y,dx,dy,t; 

	if(spriteFlags & SPRITE_FLIP_X)
    a602:	24 2f       	mov	r18, r20
    a604:	21 70       	andi	r18, 0x01	; 1
    a606:	40 ff       	sbrs	r20, 0
    a608:	04 c0       	rjmp	.+8      	; 0xa612 <LBMapSprite+0x2c>
	{
		x=(mapWidth-1);
    a60a:	95 2f       	mov	r25, r21
		dx=-1;
    a60c:	ff 24       	eor	r15, r15
    a60e:	fa 94       	dec	r15
    a610:	03 c0       	rjmp	.+6      	; 0xa618 <LBMapSprite+0x32>
	}
	else
	{
		x=0;
		dx=1;
    a612:	ff 24       	eor	r15, r15
    a614:	f3 94       	inc	r15
		x=(mapWidth-1);
		dx=-1;
	}
	else
	{
		x=0;
    a616:	90 e0       	ldi	r25, 0x00	; 0
		dx=1;
	}

	if(spriteFlags & SPRITE_FLIP_Y)
    a618:	41 ff       	sbrs	r20, 1
    a61a:	05 c0       	rjmp	.+10     	; 0xa626 <LBMapSprite+0x40>
	{
		y=(mapHeight-1);
    a61c:	7f ef       	ldi	r23, 0xFF	; 255
    a61e:	76 0f       	add	r23, r22
		dy=-1;
    a620:	ee 24       	eor	r14, r14
    a622:	ea 94       	dec	r14
    a624:	03 c0       	rjmp	.+6      	; 0xa62c <LBMapSprite+0x46>
	}
	else
	{
		y=0;
		dy=1;
    a626:	ee 24       	eor	r14, r14
    a628:	e3 94       	inc	r14
		y=(mapHeight-1);
		dy=-1;
	}
	else
	{
		y=0;
    a62a:	70 e0       	ldi	r23, 0x00	; 0
    a62c:	21 11       	cpse	r18, r1
    a62e:	01 c0       	rjmp	.+2      	; 0xa632 <LBMapSprite+0x4c>
    a630:	50 e0       	ldi	r21, 0x00	; 0
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a632:	00 e0       	ldi	r16, 0x00	; 0
    a634:	06 17       	cp	r16, r22
    a636:	09 f1       	breq	.+66     	; 0xa67a <LBMapSprite+0x94>
	{
		for(u8 cx=0;cx<mapWidth;cx++)
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a638:	71 03       	mulsu	r23, r17
    a63a:	e0 01       	movw	r28, r0
    a63c:	11 24       	eor	r1, r1
    a63e:	d8 2e       	mov	r13, r24
    a640:	d1 0e       	add	r13, r17
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
	{
		for(u8 cx=0;cx<mapWidth;cx++)
    a642:	8d 15       	cp	r24, r13
    a644:	b1 f0       	breq	.+44     	; 0xa672 <LBMapSprite+0x8c>
		{
			t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a646:	9e 01       	movw	r18, r28
    a648:	29 0f       	add	r18, r25
    a64a:	31 1d       	adc	r19, r1
    a64c:	97 fd       	sbrc	r25, 7
    a64e:	3a 95       	dec	r19
    a650:	2e 5f       	subi	r18, 0xFE	; 254
    a652:	3f 4f       	sbci	r19, 0xFF	; 255
    a654:	fd 01       	movw	r30, r26
    a656:	e2 0f       	add	r30, r18
    a658:	f3 1f       	adc	r31, r19
    a65a:	24 91       	lpm	r18, Z
			extendedSprites[startSprite].tileIndex=t;
    a65c:	34 e0       	ldi	r19, 0x04	; 4
    a65e:	83 9f       	mul	r24, r19
    a660:	f0 01       	movw	r30, r0
    a662:	11 24       	eor	r1, r1
    a664:	ec 51       	subi	r30, 0x1C	; 28
    a666:	f0 4f       	sbci	r31, 0xF0	; 240
    a668:	22 83       	std	Z+2, r18	; 0x02
			extendedSprites[startSprite++].flags=spriteFlags;
    a66a:	8f 5f       	subi	r24, 0xFF	; 255
    a66c:	43 83       	std	Z+3, r20	; 0x03
    a66e:	9f 0d       	add	r25, r15
    a670:	e8 cf       	rjmp	.-48     	; 0xa642 <LBMapSprite+0x5c>
    a672:	7e 0d       	add	r23, r14
	{
		y=0;
		dy=1;
	}

	for(u8 cy=0;cy<mapHeight;cy++)
    a674:	0f 5f       	subi	r16, 0xFF	; 255
			extendedSprites[startSprite].tileIndex=t;
			extendedSprites[startSprite++].flags=spriteFlags;
			x+=dx;
		}
		y+=dy;
		x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a676:	95 2f       	mov	r25, r21
    a678:	dd cf       	rjmp	.-70     	; 0xa634 <LBMapSprite+0x4e>
	}
}
    a67a:	df 91       	pop	r29
    a67c:	cf 91       	pop	r28
    a67e:	1f 91       	pop	r17
    a680:	0f 91       	pop	r16
    a682:	ff 90       	pop	r15
    a684:	ef 90       	pop	r14
    a686:	df 90       	pop	r13
    a688:	08 95       	ret

0000a68a <LBMoveSprite>:

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
    a68a:	df 92       	push	r13
    a68c:	ef 92       	push	r14
    a68e:	ff 92       	push	r15
    a690:	0f 93       	push	r16
    a692:	1f 93       	push	r17
    a694:	cf 93       	push	r28
    a696:	df 93       	push	r29
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a698:	a0 91 b4 0c 	lds	r26, 0x0CB4
    a69c:	98 e0       	ldi	r25, 0x08	; 8
    a69e:	a9 9f       	mul	r26, r25
    a6a0:	70 01       	movw	r14, r0
    a6a2:	11 24       	eor	r1, r1
    a6a4:	50 e0       	ldi	r21, 0x00	; 0
    a6a6:	38 ef       	ldi	r19, 0xF8	; 248
    a6a8:	a3 9f       	mul	r26, r19
    a6aa:	30 2d       	mov	r19, r0
    a6ac:	11 24       	eor	r1, r1
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a6ae:	70 e0       	ldi	r23, 0x00	; 0
    a6b0:	70 17       	cp	r23, r16
    a6b2:	09 f1       	breq	.+66     	; 0xa6f6 <LBMoveSprite+0x6c>
    a6b4:	d4 2e       	mov	r13, r20
    a6b6:	13 2f       	mov	r17, r19
    a6b8:	14 0f       	add	r17, r20
    a6ba:	b8 2f       	mov	r27, r24
    a6bc:	b2 0f       	add	r27, r18
    a6be:	96 2f       	mov	r25, r22
	{
		for(u8 dx=0;dx<width;dx++)
    a6c0:	8b 17       	cp	r24, r27
    a6c2:	a9 f0       	breq	.+42     	; 0xa6ee <LBMoveSprite+0x64>
		{
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
    a6c4:	c4 e0       	ldi	r28, 0x04	; 4
    a6c6:	8c 9f       	mul	r24, r28
    a6c8:	f0 01       	movw	r30, r0
    a6ca:	11 24       	eor	r1, r1
    a6cc:	ef 01       	movw	r28, r30
    a6ce:	cc 51       	subi	r28, 0x1C	; 28
    a6d0:	d0 4f       	sbci	r29, 0xF0	; 240
    a6d2:	98 83       	st	Y, r25
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
    a6d4:	a0 32       	cpi	r26, 0x20	; 32
    a6d6:	28 f4       	brcc	.+10     	; 0xa6e2 <LBMoveSprite+0x58>
    a6d8:	e4 16       	cp	r14, r20
    a6da:	f5 06       	cpc	r15, r21
    a6dc:	14 f4       	brge	.+4      	; 0xa6e2 <LBMoveSprite+0x58>
				{
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
    a6de:	19 83       	std	Y+1, r17	; 0x01
		
			extendedSprites[startSprite].x=x+(TILE_WIDTH*dx);
		
			#if SCROLLING == 1
				if((Screen.scrollHeight<32) && (y+(TILE_HEIGHT*dy))>(Screen.scrollHeight*TILE_HEIGHT))
				{
    a6e0:	03 c0       	rjmp	.+6      	; 0xa6e8 <LBMoveSprite+0x5e>
					u8 tmp=(y+(TILE_HEIGHT*dy))-(Screen.scrollHeight*TILE_HEIGHT);
					extendedSprites[startSprite].y=tmp;
				}
				else
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a6e2:	ec 51       	subi	r30, 0x1C	; 28
    a6e4:	f0 4f       	sbci	r31, 0xF0	; 240
    a6e6:	d1 82       	std	Z+1, r13	; 0x01
				{
					extendedSprites[startSprite].y=y+(TILE_HEIGHT*dy);
				}
			#endif

			startSprite++;
    a6e8:	8f 5f       	subi	r24, 0xFF	; 255
    a6ea:	98 5f       	subi	r25, 0xF8	; 248
    a6ec:	e9 cf       	rjmp	.-46     	; 0xa6c0 <LBMoveSprite+0x36>
	}
}

void LBMoveSprite(u8 startSprite,u8 x,u8 y,u8 width,u8 height)
{
	for(u8 dy=0;dy<height;dy++)
    a6ee:	7f 5f       	subi	r23, 0xFF	; 255
    a6f0:	48 5f       	subi	r20, 0xF8	; 248
    a6f2:	5f 4f       	sbci	r21, 0xFF	; 255
    a6f4:	dd cf       	rjmp	.-70     	; 0xa6b0 <LBMoveSprite+0x26>
			#endif

			startSprite++;
		}
	}	
}
    a6f6:	df 91       	pop	r29
    a6f8:	cf 91       	pop	r28
    a6fa:	1f 91       	pop	r17
    a6fc:	0f 91       	pop	r16
    a6fe:	ff 90       	pop	r15
    a700:	ef 90       	pop	r14
    a702:	df 90       	pop	r13
    a704:	08 95       	ret

0000a706 <LBRotateSprites>:

void LBRotateSprites()
{
    a706:	80 e0       	ldi	r24, 0x00	; 0
    a708:	90 e0       	ldi	r25, 0x00	; 0
    a70a:	dc 01       	movw	r26, r24
    a70c:	ac 51       	subi	r26, 0x1C	; 28
    a70e:	b0 4f       	sbci	r27, 0xF0	; 240
    a710:	fc 01       	movw	r30, r24
    a712:	e0 5f       	subi	r30, 0xF0	; 240
    a714:	fa 4f       	sbci	r31, 0xFA	; 250
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
	{
		sprites[i].flags = extendedSprites[i].flags;
    a716:	13 96       	adiw	r26, 0x03	; 3
    a718:	2c 91       	ld	r18, X
    a71a:	13 97       	sbiw	r26, 0x03	; 3
    a71c:	23 83       	std	Z+3, r18	; 0x03
		sprites[i].tileIndex = extendedSprites[i].tileIndex;
    a71e:	12 96       	adiw	r26, 0x02	; 2
    a720:	2c 91       	ld	r18, X
    a722:	12 97       	sbiw	r26, 0x02	; 2
    a724:	22 83       	std	Z+2, r18	; 0x02
		sprites[i].x = extendedSprites[i].x;
    a726:	2c 91       	ld	r18, X
    a728:	20 83       	st	Z, r18
		sprites[i].y = extendedSprites[i].y;
    a72a:	11 96       	adiw	r26, 0x01	; 1
    a72c:	2c 91       	ld	r18, X
    a72e:	21 83       	std	Z+1, r18	; 0x01
    a730:	04 96       	adiw	r24, 0x04	; 4
void LBRotateSprites()
{
	static u8 rotate_index = ROTATE_SPRITES_FROM;
	u8 mappedSpriteCount = MAX_EXTENDED_SPRITES;
	
	for (u8 i = 0; i < ROTATE_SPRITES_FROM; i++)
    a732:	8c 33       	cpi	r24, 0x3C	; 60
    a734:	91 05       	cpc	r25, r1
    a736:	49 f7       	brne	.-46     	; 0xa70a <LBRotateSprites+0x4>
		sprites[i].y = extendedSprites[i].y;
	}
	
	for (u8 i = ROTATE_SPRITES_FROM; i < MAX_SPRITES; i++)
	{
		sprites[i].flags = extendedSprites[rotate_index].flags;
    a738:	80 91 01 05 	lds	r24, 0x0501
    a73c:	94 e0       	ldi	r25, 0x04	; 4
    a73e:	89 9f       	mul	r24, r25
    a740:	f0 01       	movw	r30, r0
    a742:	11 24       	eor	r1, r1
    a744:	ec 51       	subi	r30, 0x1C	; 28
    a746:	f0 4f       	sbci	r31, 0xF0	; 240
    a748:	93 81       	ldd	r25, Z+3	; 0x03
    a74a:	90 93 4f 05 	sts	0x054F, r25
		sprites[i].tileIndex = extendedSprites[rotate_index].tileIndex;
    a74e:	92 81       	ldd	r25, Z+2	; 0x02
    a750:	90 93 4e 05 	sts	0x054E, r25
		sprites[i].x = extendedSprites[rotate_index].x;
    a754:	90 81       	ld	r25, Z
    a756:	90 93 4c 05 	sts	0x054C, r25
		sprites[i].y = extendedSprites[rotate_index].y;
    a75a:	91 81       	ldd	r25, Z+1	; 0x01
    a75c:	90 93 4d 05 	sts	0x054D, r25
		if (++rotate_index >= MAX_EXTENDED_SPRITES) rotate_index = ROTATE_SPRITES_FROM;
    a760:	8f 5f       	subi	r24, 0xFF	; 255
    a762:	84 31       	cpi	r24, 0x14	; 20
    a764:	08 f0       	brcs	.+2      	; 0xa768 <LBRotateSprites+0x62>
    a766:	8f e0       	ldi	r24, 0x0F	; 15
    a768:	80 93 01 05 	sts	0x0501, r24
    a76c:	08 95       	ret

0000a76e <is_space>:
char* boss_shot_middle_anim[1];
char* boss_shot_bottom_anim[1];

u8 is_space()
{
	return (game.current_level_index % 2 != 0);
    a76e:	80 91 ce 0d 	lds	r24, 0x0DCE
}
    a772:	81 70       	andi	r24, 0x01	; 1
    a774:	08 95       	ret

0000a776 <init_default_high_scores>:

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
    a776:	8e e8       	ldi	r24, 0x8E	; 142
    a778:	90 e0       	ldi	r25, 0x00	; 0
    a77a:	90 93 9a 0d 	sts	0x0D9A, r25
    a77e:	80 93 99 0d 	sts	0x0D99, r24
    a782:	80 e0       	ldi	r24, 0x00	; 0
    a784:	90 e0       	ldi	r25, 0x00	; 0
    a786:	fc 01       	movw	r30, r24
    a788:	ec 5b       	subi	r30, 0xBC	; 188
    a78a:	f4 4f       	sbci	r31, 0xF4	; 244
	for (u8 i = 0; i < 30; i++)
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
    a78c:	e4 91       	lpm	r30, Z
    a78e:	dc 01       	movw	r26, r24
    a790:	a7 56       	subi	r26, 0x67	; 103
    a792:	b2 4f       	sbci	r27, 0xF2	; 242
    a794:	12 96       	adiw	r26, 0x02	; 2
    a796:	ec 93       	st	X, r30
    a798:	01 96       	adiw	r24, 0x01	; 1
}

void init_default_high_scores()
{
	scores.id = EEPROM_SCORES_ID;
	for (u8 i = 0; i < 30; i++)
    a79a:	8e 31       	cpi	r24, 0x1E	; 30
    a79c:	91 05       	cpc	r25, r1
    a79e:	99 f7       	brne	.-26     	; 0xa786 <init_default_high_scores+0x10>
	{
		scores.data[i] = pgm_read_byte(&default_scores[i]);
	}
}
    a7a0:	08 95       	ret

0000a7a2 <init_enemy_state>:

void init_enemy_state()
{
    a7a2:	80 e0       	ldi	r24, 0x00	; 0
    a7a4:	90 e0       	ldi	r25, 0x00	; 0
    a7a6:	9c 01       	movw	r18, r24
    a7a8:	27 54       	subi	r18, 0x47	; 71
    a7aa:	32 4f       	sbci	r19, 0xF2	; 242
    a7ac:	f9 01       	movw	r30, r18
    a7ae:	e3 5e       	subi	r30, 0xE3	; 227
    a7b0:	fe 4f       	sbci	r31, 0xFE	; 254
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		game.enemies[i].active = 0;
    a7b2:	10 82       	st	Z, r1
    a7b4:	73 96       	adiw	r30, 0x13	; 19
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
    a7b6:	10 82       	st	Z, r1
    a7b8:	c5 96       	adiw	r24, 0x35	; 53
	}
}

void init_enemy_state()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    a7ba:	89 30       	cpi	r24, 0x09	; 9
    a7bc:	21 e0       	ldi	r18, 0x01	; 1
    a7be:	92 07       	cpc	r25, r18
    a7c0:	91 f7       	brne	.-28     	; 0xa7a6 <init_enemy_state+0x4>
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			game.enemies[i].shot[j].active = 0;
		}
	}
	game.active_enemies = 0;
    a7c2:	10 92 d4 0d 	sts	0x0DD4, r1
    a7c6:	08 95       	ret

0000a7c8 <init_player_shot>:
	shot->active = 0;
}

void init_player_shot(u8 level)
{
	if (level == 0)	// Ice
    a7c8:	81 11       	cpse	r24, r1
    a7ca:	3f c0       	rjmp	.+126    	; 0xa84a <init_player_shot+0x82>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a7cc:	10 92 f0 0d 	sts	0x0DF0, r1
	shot->hit_count = damage;
    a7d0:	81 e0       	ldi	r24, 0x01	; 1
    a7d2:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a7d6:	90 e5       	ldi	r25, 0x50	; 80
    a7d8:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a7dc:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a7e0:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a7e4:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a7e8:	2d e8       	ldi	r18, 0x8D	; 141
    a7ea:	3d e0       	ldi	r19, 0x0D	; 13
    a7ec:	30 93 fc 0d 	sts	0x0DFC, r19
    a7f0:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a7f4:	24 ec       	ldi	r18, 0xC4	; 196
    a7f6:	37 e3       	ldi	r19, 0x37	; 55
    a7f8:	30 93 8e 0d 	sts	0x0D8E, r19
    a7fc:	20 93 8d 0d 	sts	0x0D8D, r18
	shot->shared.vx = speed;
    a800:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a804:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a808:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a80c:	10 92 04 0e 	sts	0x0E04, r1
	shot->hit_count = damage;
    a810:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a814:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a818:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a81c:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a820:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a824:	40 e4       	ldi	r20, 0x40	; 64
    a826:	50 e1       	ldi	r21, 0x10	; 16
    a828:	50 93 10 0e 	sts	0x0E10, r21
    a82c:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a830:	30 93 41 10 	sts	0x1041, r19
    a834:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    a838:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a83c:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a840:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a844:	10 92 18 0e 	sts	0x0E18, r1
    a848:	41 c0       	rjmp	.+130    	; 0xa8cc <init_player_shot+0x104>
		init_shot(&game.player.shot[0], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_top_anim);
		init_shot(&game.player.shot[1], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], BALL_SHOT, LOW_SHOT_DAMAGE, SLOW_SHOT_SPEED, 0, map_hero_ball_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    a84a:	82 30       	cpi	r24, 0x02	; 2
    a84c:	09 f0       	breq	.+2      	; 0xa850 <init_player_shot+0x88>
    a84e:	57 c0       	rjmp	.+174    	; 0xa8fe <init_player_shot+0x136>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a850:	81 e0       	ldi	r24, 0x01	; 1
    a852:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    a856:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a85a:	94 e6       	ldi	r25, 0x64	; 100
    a85c:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a860:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    a864:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a868:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a86c:	2d e8       	ldi	r18, 0x8D	; 141
    a86e:	3d e0       	ldi	r19, 0x0D	; 13
    a870:	30 93 fc 0d 	sts	0x0DFC, r19
    a874:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a878:	21 ec       	ldi	r18, 0xC1	; 193
    a87a:	37 e3       	ldi	r19, 0x37	; 55
    a87c:	30 93 8e 0d 	sts	0x0D8E, r19
    a880:	20 93 8d 0d 	sts	0x0D8D, r18
	shot->shared.vx = speed;
    a884:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    a888:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a88c:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a890:	80 93 04 0e 	sts	0x0E04, r24
	shot->hit_count = damage;
    a894:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a898:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a89c:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a8a0:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a8a4:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a8a8:	40 e4       	ldi	r20, 0x40	; 64
    a8aa:	50 e1       	ldi	r21, 0x10	; 16
    a8ac:	50 93 10 0e 	sts	0x0E10, r21
    a8b0:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a8b4:	30 93 41 10 	sts	0x1041, r19
    a8b8:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    a8bc:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a8c0:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a8c4:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a8c8:	80 93 18 0e 	sts	0x0E18, r24
	shot->hit_count = damage;
    a8cc:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a8d0:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a8d4:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a8d8:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a8dc:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a8e0:	40 e5       	ldi	r20, 0x50	; 80
    a8e2:	50 e1       	ldi	r21, 0x10	; 16
    a8e4:	50 93 24 0e 	sts	0x0E24, r21
    a8e8:	40 93 23 0e 	sts	0x0E23, r20
	shot->anim.anims[0] = (char*) map;
    a8ec:	30 93 51 10 	sts	0x1051, r19
    a8f0:	20 93 50 10 	sts	0x1050, r18
	shot->shared.vx = speed;
    a8f4:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
    a8f8:	10 92 15 0e 	sts	0x0E15, r1
    a8fc:	7f c1       	rjmp	.+766    	; 0xabfc <init_player_shot+0x434>
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, shot_bottom_anim);
		game.player.shots_per_fire = 1;
		
	}
	else if (level == 4) // Jungle
    a8fe:	84 30       	cpi	r24, 0x04	; 4
    a900:	09 f0       	breq	.+2      	; 0xa904 <init_player_shot+0x13c>
    a902:	5a c0       	rjmp	.+180    	; 0xa9b8 <init_player_shot+0x1f0>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a904:	80 93 f0 0d 	sts	0x0DF0, r24
	shot->hit_count = damage;
    a908:	81 e0       	ldi	r24, 0x01	; 1
    a90a:	80 93 f1 0d 	sts	0x0DF1, r24
	shot->shot_speed = speed;
    a90e:	9f e7       	ldi	r25, 0x7F	; 127
    a910:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    a914:	28 ef       	ldi	r18, 0xF8	; 248
    a916:	20 93 f4 0d 	sts	0x0DF4, r18
	shot->anim.anim_count = 1;
    a91a:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    a91e:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    a922:	2d e8       	ldi	r18, 0x8D	; 141
    a924:	3d e0       	ldi	r19, 0x0D	; 13
    a926:	30 93 fc 0d 	sts	0x0DFC, r19
    a92a:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    a92e:	24 ec       	ldi	r18, 0xC4	; 196
    a930:	37 e3       	ldi	r19, 0x37	; 55
    a932:	30 93 8e 0d 	sts	0x0D8E, r19
    a936:	20 93 8d 0d 	sts	0x0D8D, r18
	shot->shared.vx = speed;
    a93a:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    a93e:	21 e8       	ldi	r18, 0x81	; 129
    a940:	20 93 ed 0d 	sts	0x0DED, r18
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a944:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a948:	22 e0       	ldi	r18, 0x02	; 2
    a94a:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    a94e:	80 93 05 0e 	sts	0x0E05, r24
	shot->shot_speed = speed;
    a952:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    a956:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    a95a:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    a95e:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    a962:	40 e4       	ldi	r20, 0x40	; 64
    a964:	50 e1       	ldi	r21, 0x10	; 16
    a966:	50 93 10 0e 	sts	0x0E10, r21
    a96a:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    a96e:	48 eb       	ldi	r20, 0xB8	; 184
    a970:	57 e3       	ldi	r21, 0x37	; 55
    a972:	50 93 41 10 	sts	0x1041, r21
    a976:	40 93 40 10 	sts	0x1040, r20
	shot->shared.vx = speed;
    a97a:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    a97e:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    a982:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a986:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    a98a:	80 93 19 0e 	sts	0x0E19, r24
	shot->shot_speed = speed;
    a98e:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    a992:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    a996:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    a99a:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    a99e:	60 e5       	ldi	r22, 0x50	; 80
    a9a0:	70 e1       	ldi	r23, 0x10	; 16
    a9a2:	70 93 24 0e 	sts	0x0E24, r23
    a9a6:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    a9aa:	50 93 51 10 	sts	0x1051, r21
    a9ae:	40 93 50 10 	sts	0x1050, r20
	shot->shared.vx = speed;
    a9b2:	90 93 16 0e 	sts	0x0E16, r25
    a9b6:	5c c0       	rjmp	.+184    	; 0xaa70 <init_player_shot+0x2a8>
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
		
	}
	else if (level == 6) // City
    a9b8:	86 30       	cpi	r24, 0x06	; 6
    a9ba:	09 f0       	breq	.+2      	; 0xa9be <init_player_shot+0x1f6>
    a9bc:	60 c0       	rjmp	.+192    	; 0xaa7e <init_player_shot+0x2b6>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    a9be:	33 e0       	ldi	r19, 0x03	; 3
    a9c0:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    a9c4:	22 e0       	ldi	r18, 0x02	; 2
    a9c6:	20 93 f1 0d 	sts	0x0DF1, r18
	shot->shot_speed = speed;
    a9ca:	8f e7       	ldi	r24, 0x7F	; 127
    a9cc:	80 93 f3 0d 	sts	0x0DF3, r24
	shot->y_delta = y_delta;
    a9d0:	98 ef       	ldi	r25, 0xF8	; 248
    a9d2:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    a9d6:	91 e0       	ldi	r25, 0x01	; 1
    a9d8:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    a9dc:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    a9e0:	4d e8       	ldi	r20, 0x8D	; 141
    a9e2:	5d e0       	ldi	r21, 0x0D	; 13
    a9e4:	50 93 fc 0d 	sts	0x0DFC, r21
    a9e8:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    a9ec:	47 ec       	ldi	r20, 0xC7	; 199
    a9ee:	57 e3       	ldi	r21, 0x37	; 55
    a9f0:	50 93 8e 0d 	sts	0x0D8E, r21
    a9f4:	40 93 8d 0d 	sts	0x0D8D, r20
	shot->shared.vx = speed;
    a9f8:	80 93 ee 0d 	sts	0x0DEE, r24
	shot->shared.vy = 0;
    a9fc:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    aa00:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa04:	20 93 04 0e 	sts	0x0E04, r18
	shot->hit_count = damage;
    aa08:	20 93 05 0e 	sts	0x0E05, r18
	shot->shot_speed = speed;
    aa0c:	80 93 07 0e 	sts	0x0E07, r24
	shot->y_delta = y_delta;
    aa10:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    aa14:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    aa18:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    aa1c:	60 e4       	ldi	r22, 0x40	; 64
    aa1e:	70 e1       	ldi	r23, 0x10	; 16
    aa20:	70 93 10 0e 	sts	0x0E10, r23
    aa24:	60 93 0f 0e 	sts	0x0E0F, r22
	shot->anim.anims[0] = (char*) map;
    aa28:	68 eb       	ldi	r22, 0xB8	; 184
    aa2a:	77 e3       	ldi	r23, 0x37	; 55
    aa2c:	70 93 41 10 	sts	0x1041, r23
    aa30:	60 93 40 10 	sts	0x1040, r22
	shot->shared.vx = speed;
    aa34:	80 93 02 0e 	sts	0x0E02, r24
	shot->shared.vy = 0;
    aa38:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    aa3c:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa40:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    aa44:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    aa48:	80 93 1b 0e 	sts	0x0E1B, r24
	shot->y_delta = y_delta;
    aa4c:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    aa50:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    aa54:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    aa58:	60 e5       	ldi	r22, 0x50	; 80
    aa5a:	70 e1       	ldi	r23, 0x10	; 16
    aa5c:	70 93 24 0e 	sts	0x0E24, r23
    aa60:	60 93 23 0e 	sts	0x0E23, r22
	shot->anim.anims[0] = (char*) map;
    aa64:	50 93 51 10 	sts	0x1051, r21
    aa68:	40 93 50 10 	sts	0x1050, r20
	shot->shared.vx = speed;
    aa6c:	80 93 16 0e 	sts	0x0E16, r24
	shot->shared.vy = 0;
    aa70:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    aa74:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 6) // City
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 2;
    aa78:	20 93 e7 0d 	sts	0x0DE7, r18
    aa7c:	08 95       	ret
		
	}
	else if (level == 8) // Dessert
    aa7e:	88 30       	cpi	r24, 0x08	; 8
    aa80:	09 f0       	breq	.+2      	; 0xaa84 <init_player_shot+0x2bc>
    aa82:	60 c0       	rjmp	.+192    	; 0xab44 <init_player_shot+0x37c>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aa84:	33 e0       	ldi	r19, 0x03	; 3
    aa86:	30 93 f0 0d 	sts	0x0DF0, r19
	shot->hit_count = damage;
    aa8a:	62 e0       	ldi	r22, 0x02	; 2
    aa8c:	60 93 f1 0d 	sts	0x0DF1, r22
	shot->shot_speed = speed;
    aa90:	2f e7       	ldi	r18, 0x7F	; 127
    aa92:	20 93 f3 0d 	sts	0x0DF3, r18
	shot->y_delta = y_delta;
    aa96:	98 ef       	ldi	r25, 0xF8	; 248
    aa98:	90 93 f4 0d 	sts	0x0DF4, r25
	shot->anim.anim_count = 1;
    aa9c:	91 e0       	ldi	r25, 0x01	; 1
    aa9e:	90 93 f6 0d 	sts	0x0DF6, r25
	shot->anim.frames_per_anim = 1;
    aaa2:	90 93 f7 0d 	sts	0x0DF7, r25
	shot->anim.anims = anim;
    aaa6:	4d e8       	ldi	r20, 0x8D	; 141
    aaa8:	5d e0       	ldi	r21, 0x0D	; 13
    aaaa:	50 93 fc 0d 	sts	0x0DFC, r21
    aaae:	40 93 fb 0d 	sts	0x0DFB, r20
	shot->anim.anims[0] = (char*) map;
    aab2:	47 ec       	ldi	r20, 0xC7	; 199
    aab4:	57 e3       	ldi	r21, 0x37	; 55
    aab6:	50 93 8e 0d 	sts	0x0D8E, r21
    aaba:	40 93 8d 0d 	sts	0x0D8D, r20
	shot->shared.vx = speed;
    aabe:	20 93 ee 0d 	sts	0x0DEE, r18
	shot->shared.vy = 0;
    aac2:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    aac6:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aaca:	90 93 04 0e 	sts	0x0E04, r25
	shot->hit_count = damage;
    aace:	90 93 05 0e 	sts	0x0E05, r25
	shot->shot_speed = speed;
    aad2:	20 93 07 0e 	sts	0x0E07, r18
	shot->y_delta = y_delta;
    aad6:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    aada:	90 93 0a 0e 	sts	0x0E0A, r25
	shot->anim.frames_per_anim = 1;
    aade:	90 93 0b 0e 	sts	0x0E0B, r25
	shot->anim.anims = anim;
    aae2:	e0 e4       	ldi	r30, 0x40	; 64
    aae4:	f0 e1       	ldi	r31, 0x10	; 16
    aae6:	f0 93 10 0e 	sts	0x0E10, r31
    aaea:	e0 93 0f 0e 	sts	0x0E0F, r30
	shot->anim.anims[0] = (char*) map;
    aaee:	e1 ec       	ldi	r30, 0xC1	; 193
    aaf0:	f7 e3       	ldi	r31, 0x37	; 55
    aaf2:	f0 93 41 10 	sts	0x1041, r31
    aaf6:	e0 93 40 10 	sts	0x1040, r30
	shot->shared.vx = speed;
    aafa:	20 93 02 0e 	sts	0x0E02, r18
	shot->shared.vy = 0;
    aafe:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ab02:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab06:	30 93 18 0e 	sts	0x0E18, r19
	shot->hit_count = damage;
    ab0a:	60 93 19 0e 	sts	0x0E19, r22
	shot->shot_speed = speed;
    ab0e:	20 93 1b 0e 	sts	0x0E1B, r18
	shot->y_delta = y_delta;
    ab12:	80 93 1c 0e 	sts	0x0E1C, r24
	shot->anim.anim_count = 1;
    ab16:	90 93 1e 0e 	sts	0x0E1E, r25
	shot->anim.frames_per_anim = 1;
    ab1a:	90 93 1f 0e 	sts	0x0E1F, r25
	shot->anim.anims = anim;
    ab1e:	80 e5       	ldi	r24, 0x50	; 80
    ab20:	90 e1       	ldi	r25, 0x10	; 16
    ab22:	90 93 24 0e 	sts	0x0E24, r25
    ab26:	80 93 23 0e 	sts	0x0E23, r24
	shot->anim.anims[0] = (char*) map;
    ab2a:	50 93 51 10 	sts	0x1051, r21
    ab2e:	40 93 50 10 	sts	0x1050, r20
	shot->shared.vx = speed;
    ab32:	20 93 16 0e 	sts	0x0E16, r18
	shot->shared.vy = 0;
    ab36:	10 92 15 0e 	sts	0x0E15, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ab3a:	10 92 1a 0e 	sts	0x0E1A, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.player.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, shot_top_anim);
		init_shot(&game.player.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, shot_bottom_anim);
		game.player.shots_per_fire = 3;
    ab3e:	30 93 e7 0d 	sts	0x0DE7, r19
    ab42:	08 95       	ret
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab44:	55 e0       	ldi	r21, 0x05	; 5
    ab46:	50 93 f0 0d 	sts	0x0DF0, r21
	shot->hit_count = damage;
    ab4a:	42 e0       	ldi	r20, 0x02	; 2
    ab4c:	40 93 f1 0d 	sts	0x0DF1, r20
	shot->shot_speed = speed;
    ab50:	9f e7       	ldi	r25, 0x7F	; 127
    ab52:	90 93 f3 0d 	sts	0x0DF3, r25
	shot->y_delta = y_delta;
    ab56:	10 92 f4 0d 	sts	0x0DF4, r1
	shot->anim.anim_count = 1;
    ab5a:	81 e0       	ldi	r24, 0x01	; 1
    ab5c:	80 93 f6 0d 	sts	0x0DF6, r24
	shot->anim.frames_per_anim = 1;
    ab60:	80 93 f7 0d 	sts	0x0DF7, r24
	shot->anim.anims = anim;
    ab64:	2d e8       	ldi	r18, 0x8D	; 141
    ab66:	3d e0       	ldi	r19, 0x0D	; 13
    ab68:	30 93 fc 0d 	sts	0x0DFC, r19
    ab6c:	20 93 fb 0d 	sts	0x0DFB, r18
	shot->anim.anims[0] = (char*) map;
    ab70:	2e eb       	ldi	r18, 0xBE	; 190
    ab72:	37 e3       	ldi	r19, 0x37	; 55
    ab74:	30 93 8e 0d 	sts	0x0D8E, r19
    ab78:	20 93 8d 0d 	sts	0x0D8D, r18
	shot->shared.vx = speed;
    ab7c:	90 93 ee 0d 	sts	0x0DEE, r25
	shot->shared.vy = 0;
    ab80:	10 92 ed 0d 	sts	0x0DED, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ab84:	10 92 f2 0d 	sts	0x0DF2, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ab88:	50 93 04 0e 	sts	0x0E04, r21
	shot->hit_count = damage;
    ab8c:	40 93 05 0e 	sts	0x0E05, r20
	shot->shot_speed = speed;
    ab90:	90 93 07 0e 	sts	0x0E07, r25
	shot->y_delta = y_delta;
    ab94:	10 92 08 0e 	sts	0x0E08, r1
	shot->anim.anim_count = 1;
    ab98:	80 93 0a 0e 	sts	0x0E0A, r24
	shot->anim.frames_per_anim = 1;
    ab9c:	80 93 0b 0e 	sts	0x0E0B, r24
	shot->anim.anims = anim;
    aba0:	40 e4       	ldi	r20, 0x40	; 64
    aba2:	50 e1       	ldi	r21, 0x10	; 16
    aba4:	50 93 10 0e 	sts	0x0E10, r21
    aba8:	40 93 0f 0e 	sts	0x0E0F, r20
	shot->anim.anims[0] = (char*) map;
    abac:	30 93 41 10 	sts	0x1041, r19
    abb0:	20 93 40 10 	sts	0x1040, r18
	shot->shared.vx = speed;
    abb4:	90 93 02 0e 	sts	0x0E02, r25
	shot->shared.vy = 0;
    abb8:	10 92 01 0e 	sts	0x0E01, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    abbc:	10 92 06 0e 	sts	0x0E06, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    abc0:	26 e0       	ldi	r18, 0x06	; 6
    abc2:	20 93 18 0e 	sts	0x0E18, r18
	shot->hit_count = damage;
    abc6:	24 e0       	ldi	r18, 0x04	; 4
    abc8:	20 93 19 0e 	sts	0x0E19, r18
	shot->shot_speed = speed;
    abcc:	90 93 1b 0e 	sts	0x0E1B, r25
	shot->y_delta = y_delta;
    abd0:	10 92 1c 0e 	sts	0x0E1C, r1
	shot->anim.anim_count = 1;
    abd4:	80 93 1e 0e 	sts	0x0E1E, r24
	shot->anim.frames_per_anim = 1;
    abd8:	80 93 1f 0e 	sts	0x0E1F, r24
	shot->anim.anims = anim;
    abdc:	20 e5       	ldi	r18, 0x50	; 80
    abde:	30 e1       	ldi	r19, 0x10	; 16
    abe0:	30 93 24 0e 	sts	0x0E24, r19
    abe4:	20 93 23 0e 	sts	0x0E23, r18
	shot->anim.anims[0] = (char*) map;
    abe8:	2b eb       	ldi	r18, 0xBB	; 187
    abea:	37 e3       	ldi	r19, 0x37	; 55
    abec:	30 93 51 10 	sts	0x1051, r19
    abf0:	20 93 50 10 	sts	0x1050, r18
	shot->shared.vx = speed;
    abf4:	90 93 16 0e 	sts	0x0E16, r25
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
    abf8:	90 93 15 0e 	sts	0x0E15, r25
	}
	shot->active = 0;
    abfc:	10 92 1a 0e 	sts	0x0E1A, r1
	else
	{
		init_shot(&game.player.shot[0], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_top_anim);
		init_shot(&game.player.shot[1], SPACE_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_shot, shot_middle_anim);
		init_shot(&game.player.shot[2], SPACE_BOMB_SHOT, SEVERE_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_space_bomb, shot_bottom_anim);
		game.player.shots_per_fire = 1;
    ac00:	80 93 e7 0d 	sts	0x0DE7, r24
    ac04:	08 95       	ret

0000ac06 <init_boss_shot>:
	}
}

void init_boss_shot(u8 level)
{
	if (level == 0)	// Ice
    ac06:	81 11       	cpse	r24, r1
    ac08:	55 c0       	rjmp	.+170    	; 0xacb4 <init_boss_shot+0xae>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac0a:	81 e0       	ldi	r24, 0x01	; 1
    ac0c:	80 93 6b 0e 	sts	0x0E6B, r24
	shot->hit_count = damage;
    ac10:	80 93 6c 0e 	sts	0x0E6C, r24
	shot->shot_speed = speed;
    ac14:	94 e6       	ldi	r25, 0x64	; 100
    ac16:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    ac1a:	10 92 6f 0e 	sts	0x0E6F, r1
	shot->anim.anim_count = 1;
    ac1e:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    ac22:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    ac26:	2a ed       	ldi	r18, 0xDA	; 218
    ac28:	3f e0       	ldi	r19, 0x0F	; 15
    ac2a:	30 93 77 0e 	sts	0x0E77, r19
    ac2e:	20 93 76 0e 	sts	0x0E76, r18
	shot->anim.anims[0] = (char*) map;
    ac32:	21 ec       	ldi	r18, 0xC1	; 193
    ac34:	37 e3       	ldi	r19, 0x37	; 55
    ac36:	30 93 db 0f 	sts	0x0FDB, r19
    ac3a:	20 93 da 0f 	sts	0x0FDA, r18
	shot->shared.vx = speed;
    ac3e:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    ac42:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ac46:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac4a:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    ac4e:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    ac52:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    ac56:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    ac5a:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    ac5e:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    ac62:	44 e5       	ldi	r20, 0x54	; 84
    ac64:	50 e1       	ldi	r21, 0x10	; 16
    ac66:	50 93 8b 0e 	sts	0x0E8B, r21
    ac6a:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    ac6e:	30 93 55 10 	sts	0x1055, r19
    ac72:	20 93 54 10 	sts	0x1054, r18
	shot->shared.vx = speed;
    ac76:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    ac7a:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ac7e:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ac82:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    ac86:	80 93 94 0e 	sts	0x0E94, r24
	shot->shot_speed = speed;
    ac8a:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    ac8e:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    ac92:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    ac96:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    ac9a:	46 e3       	ldi	r20, 0x36	; 54
    ac9c:	50 e1       	ldi	r21, 0x10	; 16
    ac9e:	50 93 9f 0e 	sts	0x0E9F, r21
    aca2:	40 93 9e 0e 	sts	0x0E9E, r20
	shot->anim.anims[0] = (char*) map;
    aca6:	30 93 37 10 	sts	0x1037, r19
    acaa:	20 93 36 10 	sts	0x1036, r18
	shot->shared.vx = speed;
    acae:	90 93 91 0e 	sts	0x0E91, r25
    acb2:	5c c0       	rjmp	.+184    	; 0xad6c <init_boss_shot+0x166>
		init_shot(&game.boss.shot[0], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], ICE_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 1;
	}
	else if (level == 2) // Fire
    acb4:	82 30       	cpi	r24, 0x02	; 2
    acb6:	09 f0       	breq	.+2      	; 0xacba <init_boss_shot+0xb4>
    acb8:	5e c0       	rjmp	.+188    	; 0xad76 <init_boss_shot+0x170>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    acba:	94 e0       	ldi	r25, 0x04	; 4
    acbc:	90 93 6b 0e 	sts	0x0E6B, r25
	shot->hit_count = damage;
    acc0:	91 e0       	ldi	r25, 0x01	; 1
    acc2:	90 93 6c 0e 	sts	0x0E6C, r25
	shot->shot_speed = speed;
    acc6:	2f e7       	ldi	r18, 0x7F	; 127
    acc8:	20 93 6e 0e 	sts	0x0E6E, r18
	shot->y_delta = y_delta;
    accc:	38 ef       	ldi	r19, 0xF8	; 248
    acce:	30 93 6f 0e 	sts	0x0E6F, r19
	shot->anim.anim_count = 1;
    acd2:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    acd6:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    acda:	4a ed       	ldi	r20, 0xDA	; 218
    acdc:	5f e0       	ldi	r21, 0x0F	; 15
    acde:	50 93 77 0e 	sts	0x0E77, r21
    ace2:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    ace6:	44 ec       	ldi	r20, 0xC4	; 196
    ace8:	57 e3       	ldi	r21, 0x37	; 55
    acea:	50 93 db 0f 	sts	0x0FDB, r21
    acee:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    acf2:	20 93 69 0e 	sts	0x0E69, r18
	shot->shared.vy = 0;
	if (type == ANGLED_SHOT) {
		shot->shared.vy = -speed;
    acf6:	31 e8       	ldi	r19, 0x81	; 129
    acf8:	30 93 68 0e 	sts	0x0E68, r19
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    acfc:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad00:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    ad04:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    ad08:	20 93 82 0e 	sts	0x0E82, r18
	shot->y_delta = y_delta;
    ad0c:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    ad10:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    ad14:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    ad18:	44 e5       	ldi	r20, 0x54	; 84
    ad1a:	50 e1       	ldi	r21, 0x10	; 16
    ad1c:	50 93 8b 0e 	sts	0x0E8B, r21
    ad20:	40 93 8a 0e 	sts	0x0E8A, r20
	shot->anim.anims[0] = (char*) map;
    ad24:	48 eb       	ldi	r20, 0xB8	; 184
    ad26:	57 e3       	ldi	r21, 0x37	; 55
    ad28:	50 93 55 10 	sts	0x1055, r21
    ad2c:	40 93 54 10 	sts	0x1054, r20
	shot->shared.vx = speed;
    ad30:	20 93 7d 0e 	sts	0x0E7D, r18
	shot->shared.vy = 0;
    ad34:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ad38:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad3c:	80 93 93 0e 	sts	0x0E93, r24
	shot->hit_count = damage;
    ad40:	90 93 94 0e 	sts	0x0E94, r25
	shot->shot_speed = speed;
    ad44:	20 93 96 0e 	sts	0x0E96, r18
	shot->y_delta = y_delta;
    ad48:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    ad4c:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    ad50:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    ad54:	66 e3       	ldi	r22, 0x36	; 54
    ad56:	70 e1       	ldi	r23, 0x10	; 16
    ad58:	70 93 9f 0e 	sts	0x0E9F, r23
    ad5c:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    ad60:	50 93 37 10 	sts	0x1037, r21
    ad64:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    ad68:	20 93 91 0e 	sts	0x0E91, r18
	shot->shared.vy = 0;
    ad6c:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ad70:	10 92 95 0e 	sts	0x0E95, r1
    ad74:	20 c1       	rjmp	.+576    	; 0xafb6 <init_boss_shot+0x3b0>
		init_shot(&game.boss.shot[0], ANGLED_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_ball_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 4) // Jungle
    ad76:	84 30       	cpi	r24, 0x04	; 4
    ad78:	09 f0       	breq	.+2      	; 0xad7c <init_boss_shot+0x176>
    ad7a:	5a c0       	rjmp	.+180    	; 0xae30 <init_boss_shot+0x22a>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ad7c:	33 e0       	ldi	r19, 0x03	; 3
    ad7e:	30 93 6b 0e 	sts	0x0E6B, r19
	shot->hit_count = damage;
    ad82:	22 e0       	ldi	r18, 0x02	; 2
    ad84:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    ad88:	8f e7       	ldi	r24, 0x7F	; 127
    ad8a:	80 93 6e 0e 	sts	0x0E6E, r24
	shot->y_delta = y_delta;
    ad8e:	98 ef       	ldi	r25, 0xF8	; 248
    ad90:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    ad94:	91 e0       	ldi	r25, 0x01	; 1
    ad96:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    ad9a:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    ad9e:	4a ed       	ldi	r20, 0xDA	; 218
    ada0:	5f e0       	ldi	r21, 0x0F	; 15
    ada2:	50 93 77 0e 	sts	0x0E77, r21
    ada6:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    adaa:	47 ec       	ldi	r20, 0xC7	; 199
    adac:	57 e3       	ldi	r21, 0x37	; 55
    adae:	50 93 db 0f 	sts	0x0FDB, r21
    adb2:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    adb6:	80 93 69 0e 	sts	0x0E69, r24
	shot->shared.vy = 0;
    adba:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    adbe:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    adc2:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    adc6:	20 93 80 0e 	sts	0x0E80, r18
	shot->shot_speed = speed;
    adca:	80 93 82 0e 	sts	0x0E82, r24
	shot->y_delta = y_delta;
    adce:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    add2:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    add6:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    adda:	64 e5       	ldi	r22, 0x54	; 84
    addc:	70 e1       	ldi	r23, 0x10	; 16
    adde:	70 93 8b 0e 	sts	0x0E8B, r23
    ade2:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    ade6:	68 eb       	ldi	r22, 0xB8	; 184
    ade8:	77 e3       	ldi	r23, 0x37	; 55
    adea:	70 93 55 10 	sts	0x1055, r23
    adee:	60 93 54 10 	sts	0x1054, r22
	shot->shared.vx = speed;
    adf2:	80 93 7d 0e 	sts	0x0E7D, r24
	shot->shared.vy = 0;
    adf6:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    adfa:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    adfe:	30 93 93 0e 	sts	0x0E93, r19
	shot->hit_count = damage;
    ae02:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    ae06:	80 93 96 0e 	sts	0x0E96, r24
	shot->y_delta = y_delta;
    ae0a:	10 92 97 0e 	sts	0x0E97, r1
	shot->anim.anim_count = 1;
    ae0e:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    ae12:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    ae16:	66 e3       	ldi	r22, 0x36	; 54
    ae18:	70 e1       	ldi	r23, 0x10	; 16
    ae1a:	70 93 9f 0e 	sts	0x0E9F, r23
    ae1e:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    ae22:	50 93 37 10 	sts	0x1037, r21
    ae26:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    ae2a:	80 93 91 0e 	sts	0x0E91, r24
    ae2e:	5d c0       	rjmp	.+186    	; 0xaeea <init_boss_shot+0x2e4>
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 2;
	}
	else if (level == 6) // City
    ae30:	86 30       	cpi	r24, 0x06	; 6
    ae32:	09 f0       	breq	.+2      	; 0xae36 <init_boss_shot+0x230>
    ae34:	61 c0       	rjmp	.+194    	; 0xaef8 <init_boss_shot+0x2f2>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ae36:	23 e0       	ldi	r18, 0x03	; 3
    ae38:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    ae3c:	32 e0       	ldi	r19, 0x02	; 2
    ae3e:	30 93 6c 0e 	sts	0x0E6C, r19
	shot->shot_speed = speed;
    ae42:	9f e7       	ldi	r25, 0x7F	; 127
    ae44:	90 93 6e 0e 	sts	0x0E6E, r25
	shot->y_delta = y_delta;
    ae48:	88 ef       	ldi	r24, 0xF8	; 248
    ae4a:	80 93 6f 0e 	sts	0x0E6F, r24
	shot->anim.anim_count = 1;
    ae4e:	81 e0       	ldi	r24, 0x01	; 1
    ae50:	80 93 71 0e 	sts	0x0E71, r24
	shot->anim.frames_per_anim = 1;
    ae54:	80 93 72 0e 	sts	0x0E72, r24
	shot->anim.anims = anim;
    ae58:	4a ed       	ldi	r20, 0xDA	; 218
    ae5a:	5f e0       	ldi	r21, 0x0F	; 15
    ae5c:	50 93 77 0e 	sts	0x0E77, r21
    ae60:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    ae64:	47 ec       	ldi	r20, 0xC7	; 199
    ae66:	57 e3       	ldi	r21, 0x37	; 55
    ae68:	50 93 db 0f 	sts	0x0FDB, r21
    ae6c:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    ae70:	90 93 69 0e 	sts	0x0E69, r25
	shot->shared.vy = 0;
    ae74:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    ae78:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    ae7c:	80 93 7f 0e 	sts	0x0E7F, r24
	shot->hit_count = damage;
    ae80:	80 93 80 0e 	sts	0x0E80, r24
	shot->shot_speed = speed;
    ae84:	90 93 82 0e 	sts	0x0E82, r25
	shot->y_delta = y_delta;
    ae88:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    ae8c:	80 93 85 0e 	sts	0x0E85, r24
	shot->anim.frames_per_anim = 1;
    ae90:	80 93 86 0e 	sts	0x0E86, r24
	shot->anim.anims = anim;
    ae94:	64 e5       	ldi	r22, 0x54	; 84
    ae96:	70 e1       	ldi	r23, 0x10	; 16
    ae98:	70 93 8b 0e 	sts	0x0E8B, r23
    ae9c:	60 93 8a 0e 	sts	0x0E8A, r22
	shot->anim.anims[0] = (char*) map;
    aea0:	61 ec       	ldi	r22, 0xC1	; 193
    aea2:	77 e3       	ldi	r23, 0x37	; 55
    aea4:	70 93 55 10 	sts	0x1055, r23
    aea8:	60 93 54 10 	sts	0x1054, r22
	shot->shared.vx = speed;
    aeac:	90 93 7d 0e 	sts	0x0E7D, r25
	shot->shared.vy = 0;
    aeb0:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    aeb4:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aeb8:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    aebc:	30 93 94 0e 	sts	0x0E94, r19
	shot->shot_speed = speed;
    aec0:	90 93 96 0e 	sts	0x0E96, r25
	shot->y_delta = y_delta;
    aec4:	38 e0       	ldi	r19, 0x08	; 8
    aec6:	30 93 97 0e 	sts	0x0E97, r19
	shot->anim.anim_count = 1;
    aeca:	80 93 99 0e 	sts	0x0E99, r24
	shot->anim.frames_per_anim = 1;
    aece:	80 93 9a 0e 	sts	0x0E9A, r24
	shot->anim.anims = anim;
    aed2:	66 e3       	ldi	r22, 0x36	; 54
    aed4:	70 e1       	ldi	r23, 0x10	; 16
    aed6:	70 93 9f 0e 	sts	0x0E9F, r23
    aeda:	60 93 9e 0e 	sts	0x0E9E, r22
	shot->anim.anims[0] = (char*) map;
    aede:	50 93 37 10 	sts	0x1037, r21
    aee2:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    aee6:	90 93 91 0e 	sts	0x0E91, r25
	shot->shared.vy = 0;
    aeea:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    aeee:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 6) // City
	{
		init_shot(&game.boss.shot[0], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_gplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], ICE_SHOT, LOW_SHOT_DAMAGE, FAST_SHOT_SPEED, 0, map_hero_ice_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], GREEN_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_gplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    aef2:	20 93 62 0e 	sts	0x0E62, r18
    aef6:	08 95       	ret
	}
	else if (level == 8) // Dessert
    aef8:	88 30       	cpi	r24, 0x08	; 8
    aefa:	09 f0       	breq	.+2      	; 0xaefe <init_boss_shot+0x2f8>
    aefc:	5e c0       	rjmp	.+188    	; 0xafba <init_boss_shot+0x3b4>
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    aefe:	22 e0       	ldi	r18, 0x02	; 2
    af00:	20 93 6b 0e 	sts	0x0E6B, r18
	shot->hit_count = damage;
    af04:	20 93 6c 0e 	sts	0x0E6C, r18
	shot->shot_speed = speed;
    af08:	3f e7       	ldi	r19, 0x7F	; 127
    af0a:	30 93 6e 0e 	sts	0x0E6E, r19
	shot->y_delta = y_delta;
    af0e:	98 ef       	ldi	r25, 0xF8	; 248
    af10:	90 93 6f 0e 	sts	0x0E6F, r25
	shot->anim.anim_count = 1;
    af14:	91 e0       	ldi	r25, 0x01	; 1
    af16:	90 93 71 0e 	sts	0x0E71, r25
	shot->anim.frames_per_anim = 1;
    af1a:	90 93 72 0e 	sts	0x0E72, r25
	shot->anim.anims = anim;
    af1e:	4a ed       	ldi	r20, 0xDA	; 218
    af20:	5f e0       	ldi	r21, 0x0F	; 15
    af22:	50 93 77 0e 	sts	0x0E77, r21
    af26:	40 93 76 0e 	sts	0x0E76, r20
	shot->anim.anims[0] = (char*) map;
    af2a:	48 eb       	ldi	r20, 0xB8	; 184
    af2c:	57 e3       	ldi	r21, 0x37	; 55
    af2e:	50 93 db 0f 	sts	0x0FDB, r21
    af32:	40 93 da 0f 	sts	0x0FDA, r20
	shot->shared.vx = speed;
    af36:	30 93 69 0e 	sts	0x0E69, r19
	shot->shared.vy = 0;
    af3a:	10 92 68 0e 	sts	0x0E68, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    af3e:	10 92 6d 0e 	sts	0x0E6D, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    af42:	20 93 7f 0e 	sts	0x0E7F, r18
	shot->hit_count = damage;
    af46:	90 93 80 0e 	sts	0x0E80, r25
	shot->shot_speed = speed;
    af4a:	64 e6       	ldi	r22, 0x64	; 100
    af4c:	60 93 82 0e 	sts	0x0E82, r22
	shot->y_delta = y_delta;
    af50:	10 92 83 0e 	sts	0x0E83, r1
	shot->anim.anim_count = 1;
    af54:	90 93 85 0e 	sts	0x0E85, r25
	shot->anim.frames_per_anim = 1;
    af58:	90 93 86 0e 	sts	0x0E86, r25
	shot->anim.anims = anim;
    af5c:	e4 e5       	ldi	r30, 0x54	; 84
    af5e:	f0 e1       	ldi	r31, 0x10	; 16
    af60:	f0 93 8b 0e 	sts	0x0E8B, r31
    af64:	e0 93 8a 0e 	sts	0x0E8A, r30
	shot->anim.anims[0] = (char*) map;
    af68:	50 93 55 10 	sts	0x1055, r21
    af6c:	40 93 54 10 	sts	0x1054, r20
	shot->shared.vx = speed;
    af70:	60 93 7d 0e 	sts	0x0E7D, r22
	shot->shared.vy = 0;
    af74:	10 92 7c 0e 	sts	0x0E7C, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    af78:	10 92 81 0e 	sts	0x0E81, r1
	game.active_enemies = 0;
}

void init_shot(Shot* shot, u8 type, u8 damage, u8 speed, s8 y_delta, const char* map, char* anim[])
{
	shot->shot_type = type;
    af7c:	20 93 93 0e 	sts	0x0E93, r18
	shot->hit_count = damage;
    af80:	20 93 94 0e 	sts	0x0E94, r18
	shot->shot_speed = speed;
    af84:	30 93 96 0e 	sts	0x0E96, r19
	shot->y_delta = y_delta;
    af88:	80 93 97 0e 	sts	0x0E97, r24
	shot->anim.anim_count = 1;
    af8c:	90 93 99 0e 	sts	0x0E99, r25
	shot->anim.frames_per_anim = 1;
    af90:	90 93 9a 0e 	sts	0x0E9A, r25
	shot->anim.anims = anim;
    af94:	86 e3       	ldi	r24, 0x36	; 54
    af96:	90 e1       	ldi	r25, 0x10	; 16
    af98:	90 93 9f 0e 	sts	0x0E9F, r25
    af9c:	80 93 9e 0e 	sts	0x0E9E, r24
	shot->anim.anims[0] = (char*) map;
    afa0:	50 93 37 10 	sts	0x1037, r21
    afa4:	40 93 36 10 	sts	0x1036, r20
	shot->shared.vx = speed;
    afa8:	30 93 91 0e 	sts	0x0E91, r19
	shot->shared.vy = 0;
    afac:	10 92 90 0e 	sts	0x0E90, r1
		shot->shared.vy = -speed;
	}
	if (type == SPACE_BOMB_SHOT) {
		shot->shared.vy = speed;
	}
	shot->active = 0;
    afb0:	10 92 95 0e 	sts	0x0E95, r1
	else if (level == 8) // Dessert
	{
		init_shot(&game.boss.shot[0], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, -8, map_hero_rplasma_shot, boss_shot_top_anim);
		init_shot(&game.boss.shot[1], RED_PLASMA_SHOT, LOW_SHOT_DAMAGE, MEDIUM_SHOT_SPEED, 0, map_hero_rplasma_shot, boss_shot_middle_anim);
		init_shot(&game.boss.shot[2], RED_PLASMA_SHOT, MEDIUM_SHOT_DAMAGE, FAST_SHOT_SPEED, 8, map_hero_rplasma_shot, boss_shot_bottom_anim);
		game.boss.shots_per_fire = 3;
    afb4:	83 e0       	ldi	r24, 0x03	; 3
    afb6:	80 93 62 0e 	sts	0x0E62, r24
    afba:	08 95       	ret

0000afbc <init_boss_state>:
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    afbc:	10 92 cd 0e 	sts	0x0ECD, r1
    afc0:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    afc4:	10 92 c9 0e 	sts	0x0EC9, r1
    afc8:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    afcc:	10 92 cb 0e 	sts	0x0ECB, r1
    afd0:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    afd4:	10 92 ce 0e 	sts	0x0ECE, r1
}

void init_boss_state()
{
	LBResetJoyPadState(&game.boss.controls);
	game.boss.width = 2;
    afd8:	82 e0       	ldi	r24, 0x02	; 2
    afda:	80 93 5f 0e 	sts	0x0E5F, r24
	game.boss.height = 3;
    afde:	93 e0       	ldi	r25, 0x03	; 3
    afe0:	90 93 60 0e 	sts	0x0E60, r25
	game.boss.run.anim_count = 4;
    afe4:	84 e0       	ldi	r24, 0x04	; 4
    afe6:	80 93 a9 0e 	sts	0x0EA9, r24
	game.boss.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    afea:	8c e0       	ldi	r24, 0x0C	; 12
    afec:	80 93 aa 0e 	sts	0x0EAA, r24
	game.boss.run.anims = boss_run_anim;
    aff0:	ef e8       	ldi	r30, 0x8F	; 143
    aff2:	fd e0       	ldi	r31, 0x0D	; 13
    aff4:	f0 93 af 0e 	sts	0x0EAF, r31
    aff8:	e0 93 ae 0e 	sts	0x0EAE, r30
	game.boss.run.anims[0] = (char*) map_ahero_step_0;
    affc:	28 ea       	ldi	r18, 0xA8	; 168
    affe:	37 e3       	ldi	r19, 0x37	; 55
    b000:	31 83       	std	Z+1, r19	; 0x01
    b002:	20 83       	st	Z, r18
	game.boss.run.anims[1] = (char*) map_ahero_step_1;
    b004:	20 ea       	ldi	r18, 0xA0	; 160
    b006:	37 e3       	ldi	r19, 0x37	; 55
    b008:	33 83       	std	Z+3, r19	; 0x03
    b00a:	22 83       	std	Z+2, r18	; 0x02
	game.boss.run.anims[2] = (char*) map_ahero_step_2;
    b00c:	28 e9       	ldi	r18, 0x98	; 152
    b00e:	37 e3       	ldi	r19, 0x37	; 55
    b010:	35 83       	std	Z+5, r19	; 0x05
    b012:	24 83       	std	Z+4, r18	; 0x04
	game.boss.run.anims[3] = (char*) map_ahero_step_3;
    b014:	20 e9       	ldi	r18, 0x90	; 144
    b016:	37 e3       	ldi	r19, 0x37	; 55
    b018:	37 83       	std	Z+7, r19	; 0x07
    b01a:	26 83       	std	Z+6, r18	; 0x06
	game.boss.active_shots = 0;
    b01c:	10 92 5b 0e 	sts	0x0E5B, r1
	game.boss.shared.vx = 0;
    b020:	10 92 59 0e 	sts	0x0E59, r1
	game.boss.shared.vy = 0;
    b024:	10 92 58 0e 	sts	0x0E58, r1
	game.boss.shared.gravity = 0;
    b028:	10 92 5a 0e 	sts	0x0E5A, r1
	game.boss.active = 0;
    b02c:	10 92 61 0e 	sts	0x0E61, r1
	game.boss.direction = D_LEFT;
    b030:	10 92 5e 0e 	sts	0x0E5E, r1
	game.boss.flags = IDLE;
    b034:	88 e0       	ldi	r24, 0x08	; 8
    b036:	80 93 5c 0e 	sts	0x0E5C, r24
	game.boss.ai_flags = AI_NOT_READY;
    b03a:	10 92 5d 0e 	sts	0x0E5D, r1
	game.boss.shield = BOSS_SHIELD;
    b03e:	8e e1       	ldi	r24, 0x1E	; 30
    b040:	80 93 63 0e 	sts	0x0E63, r24
	game.boss.idle.anim_count = 1;
    b044:	81 e0       	ldi	r24, 0x01	; 1
    b046:	80 93 a1 0e 	sts	0x0EA1, r24
	game.boss.idle.frames_per_anim = 1;
    b04a:	80 93 a2 0e 	sts	0x0EA2, r24
	game.boss.idle.anims = boss_idle_anim;
    b04e:	e2 e5       	ldi	r30, 0x52	; 82
    b050:	f0 e1       	ldi	r31, 0x10	; 16
    b052:	f0 93 a7 0e 	sts	0x0EA7, r31
    b056:	e0 93 a6 0e 	sts	0x0EA6, r30
	game.boss.idle.anims[0] = (char*) map_ahero_idle;
    b05a:	20 eb       	ldi	r18, 0xB0	; 176
    b05c:	37 e3       	ldi	r19, 0x37	; 55
    b05e:	31 83       	std	Z+1, r19	; 0x01
    b060:	20 83       	st	Z, r18
	
	game.boss.jump.anim_count = 1;
    b062:	80 93 b1 0e 	sts	0x0EB1, r24
	game.boss.jump.frames_per_anim = 1;
    b066:	80 93 b2 0e 	sts	0x0EB2, r24
	game.boss.jump.anims = boss_jump_anim;
    b06a:	e2 e4       	ldi	r30, 0x42	; 66
    b06c:	f0 e1       	ldi	r31, 0x10	; 16
    b06e:	f0 93 b7 0e 	sts	0x0EB7, r31
    b072:	e0 93 b6 0e 	sts	0x0EB6, r30
	game.boss.jump.anims[0] = (char*) map_ahero_jump;
    b076:	28 e8       	ldi	r18, 0x88	; 136
    b078:	37 e3       	ldi	r19, 0x37	; 55
    b07a:	31 83       	std	Z+1, r19	; 0x01
    b07c:	20 83       	st	Z, r18
	
	game.boss.expl.anim_count = 3;
    b07e:	90 93 c1 0e 	sts	0x0EC1, r25
	game.boss.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b082:	85 e0       	ldi	r24, 0x05	; 5
    b084:	80 93 c2 0e 	sts	0x0EC2, r24
	game.boss.expl.anims = expl_anim;
    b088:	ea e4       	ldi	r30, 0x4A	; 74
    b08a:	f0 e1       	ldi	r31, 0x10	; 16
    b08c:	f0 93 c7 0e 	sts	0x0EC7, r31
    b090:	e0 93 c6 0e 	sts	0x0EC6, r30
	game.boss.expl.anims[0] = (char*) map_explosion_0;
    b094:	82 e3       	ldi	r24, 0x32	; 50
    b096:	98 e3       	ldi	r25, 0x38	; 56
    b098:	91 83       	std	Z+1, r25	; 0x01
    b09a:	80 83       	st	Z, r24
	game.boss.expl.anims[1] = (char*) map_explosion_1;
    b09c:	8f e2       	ldi	r24, 0x2F	; 47
    b09e:	98 e3       	ldi	r25, 0x38	; 56
    b0a0:	93 83       	std	Z+3, r25	; 0x03
    b0a2:	82 83       	std	Z+2, r24	; 0x02
	game.boss.expl.anims[2] = (char*) map_explosion_2;
    b0a4:	8c e2       	ldi	r24, 0x2C	; 44
    b0a6:	98 e3       	ldi	r25, 0x38	; 56
    b0a8:	95 83       	std	Z+5, r25	; 0x05
    b0aa:	84 83       	std	Z+4, r24	; 0x04
	
	init_boss_shot(game.current_level_index);
    b0ac:	80 91 ce 0d 	lds	r24, 0x0DCE
    b0b0:	0c 94 03 56 	jmp	0xac06	; 0xac06 <init_boss_shot>

0000b0b4 <init_player_state>:
}

void init_player_state()
{
	if (is_space())
    b0b4:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    b0b8:	88 23       	and	r24, r24
    b0ba:	f9 f0       	breq	.+62     	; 0xb0fa <init_player_state+0x46>
	{
		game.player.width = 3;
    b0bc:	83 e0       	ldi	r24, 0x03	; 3
    b0be:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 1;
    b0c2:	81 e0       	ldi	r24, 0x01	; 1
    b0c4:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 2;
    b0c8:	82 e0       	ldi	r24, 0x02	; 2
    b0ca:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b0ce:	85 e0       	ldi	r24, 0x05	; 5
    b0d0:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    b0d4:	88 e3       	ldi	r24, 0x38	; 56
    b0d6:	90 e1       	ldi	r25, 0x10	; 16
    b0d8:	90 93 34 0e 	sts	0x0E34, r25
    b0dc:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_ship_0;
    b0e0:	83 ee       	ldi	r24, 0xE3	; 227
    b0e2:	97 e3       	ldi	r25, 0x37	; 55
    b0e4:	90 93 39 10 	sts	0x1039, r25
    b0e8:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_ship_1;
    b0ec:	8e ed       	ldi	r24, 0xDE	; 222
    b0ee:	97 e3       	ldi	r25, 0x37	; 55
    b0f0:	90 93 3b 10 	sts	0x103B, r25
    b0f4:	80 93 3a 10 	sts	0x103A, r24
    b0f8:	2a c0       	rjmp	.+84     	; 0xb14e <init_player_state+0x9a>
	}
	else
	{
		game.player.width = 2;
    b0fa:	82 e0       	ldi	r24, 0x02	; 2
    b0fc:	80 93 e4 0d 	sts	0x0DE4, r24
		game.player.height = 3;
    b100:	83 e0       	ldi	r24, 0x03	; 3
    b102:	80 93 e5 0d 	sts	0x0DE5, r24
		game.player.run.anim_count = 4;
    b106:	84 e0       	ldi	r24, 0x04	; 4
    b108:	80 93 2e 0e 	sts	0x0E2E, r24
		game.player.run.frames_per_anim = FRAMES_PER_RUN_CYCLE;
    b10c:	8c e0       	ldi	r24, 0x0C	; 12
    b10e:	80 93 2f 0e 	sts	0x0E2F, r24
		game.player.run.anims = run_anim;
    b112:	88 e3       	ldi	r24, 0x38	; 56
    b114:	90 e1       	ldi	r25, 0x10	; 16
    b116:	90 93 34 0e 	sts	0x0E34, r25
    b11a:	80 93 33 0e 	sts	0x0E33, r24
		game.player.run.anims[0] = (char*) map_hero_step_0;
    b11e:	8d e0       	ldi	r24, 0x0D	; 13
    b120:	98 e3       	ldi	r25, 0x38	; 56
    b122:	90 93 39 10 	sts	0x1039, r25
    b126:	80 93 38 10 	sts	0x1038, r24
		game.player.run.anims[1] = (char*) map_hero_step_1;
    b12a:	85 e0       	ldi	r24, 0x05	; 5
    b12c:	98 e3       	ldi	r25, 0x38	; 56
    b12e:	90 93 3b 10 	sts	0x103B, r25
    b132:	80 93 3a 10 	sts	0x103A, r24
		game.player.run.anims[2] = (char*) map_hero_step_2;
    b136:	8d ef       	ldi	r24, 0xFD	; 253
    b138:	97 e3       	ldi	r25, 0x37	; 55
    b13a:	90 93 3d 10 	sts	0x103D, r25
    b13e:	80 93 3c 10 	sts	0x103C, r24
		game.player.run.anims[3] = (char*) map_hero_step_3;
    b142:	85 ef       	ldi	r24, 0xF5	; 245
    b144:	97 e3       	ldi	r25, 0x37	; 55
    b146:	90 93 3f 10 	sts	0x103F, r25
    b14a:	80 93 3e 10 	sts	0x103E, r24
	}
	game.player.shared.vx = 0;
    b14e:	10 92 de 0d 	sts	0x0DDE, r1
	game.player.shared.vy = 0;
    b152:	10 92 dd 0d 	sts	0x0DDD, r1
	game.player.shared.gravity = 0;
    b156:	10 92 df 0d 	sts	0x0DDF, r1
	game.player.active_shots = 0;
    b15a:	10 92 e0 0d 	sts	0x0DE0, r1
	game.player.active = 1;
    b15e:	81 e0       	ldi	r24, 0x01	; 1
    b160:	80 93 e6 0d 	sts	0x0DE6, r24
	game.player.direction = D_RIGHT;
    b164:	80 93 e3 0d 	sts	0x0DE3, r24
	game.player.flags = IDLE;
    b168:	98 e0       	ldi	r25, 0x08	; 8
    b16a:	90 93 e1 0d 	sts	0x0DE1, r25
	game.player.ai_flags = AI_NOT_READY;
    b16e:	10 92 e2 0d 	sts	0x0DE2, r1
	game.player.shield = PLAYER_SHIELD;
    b172:	9f e0       	ldi	r25, 0x0F	; 15
    b174:	90 93 e8 0d 	sts	0x0DE8, r25
	game.player.idle.anim_count = 1;
    b178:	80 93 26 0e 	sts	0x0E26, r24
	game.player.idle.frames_per_anim = 1;
    b17c:	80 93 27 0e 	sts	0x0E27, r24
	game.player.idle.anims = idle_anim;
    b180:	2a e5       	ldi	r18, 0x5A	; 90
    b182:	30 e1       	ldi	r19, 0x10	; 16
    b184:	30 93 2c 0e 	sts	0x0E2C, r19
    b188:	20 93 2b 0e 	sts	0x0E2B, r18
	game.player.idle.anims[0] = (char*) map_hero_idle;
    b18c:	25 e1       	ldi	r18, 0x15	; 21
    b18e:	38 e3       	ldi	r19, 0x38	; 56
    b190:	30 93 5b 10 	sts	0x105B, r19
    b194:	20 93 5a 10 	sts	0x105A, r18
	
	game.player.jump.anim_count = 1;
    b198:	80 93 36 0e 	sts	0x0E36, r24
	game.player.jump.frames_per_anim = 1;
    b19c:	80 93 37 0e 	sts	0x0E37, r24
	game.player.jump.anims = jump_anim;
    b1a0:	27 e9       	ldi	r18, 0x97	; 151
    b1a2:	3d e0       	ldi	r19, 0x0D	; 13
    b1a4:	30 93 3c 0e 	sts	0x0E3C, r19
    b1a8:	20 93 3b 0e 	sts	0x0E3B, r18
	game.player.jump.anims[0] = (char*) map_hero_jump;
    b1ac:	2d ee       	ldi	r18, 0xED	; 237
    b1ae:	37 e3       	ldi	r19, 0x37	; 55
    b1b0:	30 93 98 0d 	sts	0x0D98, r19
    b1b4:	20 93 97 0d 	sts	0x0D97, r18
	
	game.player.prone.anim_count = 1;
    b1b8:	80 93 3e 0e 	sts	0x0E3E, r24
	game.player.prone.frames_per_anim = 1;
    b1bc:	80 93 3f 0e 	sts	0x0E3F, r24
	game.player.prone.anims = prone_anim;
    b1c0:	8c ed       	ldi	r24, 0xDC	; 220
    b1c2:	9f e0       	ldi	r25, 0x0F	; 15
    b1c4:	90 93 44 0e 	sts	0x0E44, r25
    b1c8:	80 93 43 0e 	sts	0x0E43, r24
	game.player.prone.anims[0] = (char*) map_hero_prone;
    b1cc:	88 ee       	ldi	r24, 0xE8	; 232
    b1ce:	97 e3       	ldi	r25, 0x37	; 55
    b1d0:	90 93 dd 0f 	sts	0x0FDD, r25
    b1d4:	80 93 dc 0f 	sts	0x0FDC, r24
	
	game.player.expl.anim_count = 3;
    b1d8:	83 e0       	ldi	r24, 0x03	; 3
    b1da:	80 93 46 0e 	sts	0x0E46, r24
	game.player.expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b1de:	85 e0       	ldi	r24, 0x05	; 5
    b1e0:	80 93 47 0e 	sts	0x0E47, r24
	game.player.expl.anims = expl_anim;
    b1e4:	8a e4       	ldi	r24, 0x4A	; 74
    b1e6:	90 e1       	ldi	r25, 0x10	; 16
    b1e8:	90 93 4c 0e 	sts	0x0E4C, r25
    b1ec:	80 93 4b 0e 	sts	0x0E4B, r24
	game.player.expl.anims[0] = (char*) map_explosion_0;
    b1f0:	82 e3       	ldi	r24, 0x32	; 50
    b1f2:	98 e3       	ldi	r25, 0x38	; 56
    b1f4:	90 93 4b 10 	sts	0x104B, r25
    b1f8:	80 93 4a 10 	sts	0x104A, r24
	game.player.expl.anims[1] = (char*) map_explosion_1;
    b1fc:	8f e2       	ldi	r24, 0x2F	; 47
    b1fe:	98 e3       	ldi	r25, 0x38	; 56
    b200:	90 93 4d 10 	sts	0x104D, r25
    b204:	80 93 4c 10 	sts	0x104C, r24
	game.player.expl.anims[2] = (char*) map_explosion_2;
    b208:	8c e2       	ldi	r24, 0x2C	; 44
    b20a:	98 e3       	ldi	r25, 0x38	; 56
    b20c:	90 93 4f 10 	sts	0x104F, r25
    b210:	80 93 4e 10 	sts	0x104E, r24
	game.eye_clusters = 9;
    b214:	89 e0       	ldi	r24, 0x09	; 9
    b216:	80 93 d7 0d 	sts	0x0DD7, r24
	init_player_shot(game.current_level_index);
    b21a:	80 91 ce 0d 	lds	r24, 0x0DCE
    b21e:	0c 94 e4 53 	jmp	0xa7c8	; 0xa7c8 <init_player_shot>

0000b222 <init_enemy_shot>:
}

void init_enemy_shot(u8 i, u16 x, u16 y, u8 is_boss)
{
    b222:	0f 93       	push	r16
    b224:	1f 93       	push	r17
    b226:	cf 93       	push	r28
    b228:	df 93       	push	r29
	game.enemies[i].expl.anim_count = 3;
    b22a:	a8 2f       	mov	r26, r24
    b22c:	b0 e0       	ldi	r27, 0x00	; 0
    b22e:	35 e3       	ldi	r19, 0x35	; 53
    b230:	83 9f       	mul	r24, r19
    b232:	c0 01       	movw	r24, r0
    b234:	11 24       	eor	r1, r1
    b236:	87 54       	subi	r24, 0x47	; 71
    b238:	92 4f       	sbci	r25, 0xF2	; 242
    b23a:	fc 01       	movw	r30, r24
    b23c:	ec 5b       	subi	r30, 0xBC	; 188
    b23e:	fe 4f       	sbci	r31, 0xFE	; 254
    b240:	33 e0       	ldi	r19, 0x03	; 3
    b242:	30 83       	st	Z, r19
	game.enemies[i].expl.frames_per_anim = EXPLOSION_FRAME_COUNT;
    b244:	31 96       	adiw	r30, 0x01	; 1
    b246:	35 e0       	ldi	r19, 0x05	; 5
    b248:	30 83       	st	Z, r19
	game.enemies[i].expl.anims = expl_anim;
    b24a:	34 96       	adiw	r30, 0x04	; 4
    b24c:	ca e4       	ldi	r28, 0x4A	; 74
    b24e:	d0 e1       	ldi	r29, 0x10	; 16
    b250:	d1 83       	std	Z+1, r29	; 0x01
    b252:	c0 83       	st	Z, r28
	game.enemies[i].expl.anims[0] = (char*) map_explosion_0;
    b254:	e2 e3       	ldi	r30, 0x32	; 50
    b256:	f8 e3       	ldi	r31, 0x38	; 56
    b258:	f0 93 4b 10 	sts	0x104B, r31
    b25c:	e0 93 4a 10 	sts	0x104A, r30
	game.enemies[i].expl.anims[1] = (char*) map_explosion_1;
    b260:	ef e2       	ldi	r30, 0x2F	; 47
    b262:	f8 e3       	ldi	r31, 0x38	; 56
    b264:	f0 93 4d 10 	sts	0x104D, r31
    b268:	e0 93 4c 10 	sts	0x104C, r30
	game.enemies[i].expl.anims[2] = (char*) map_explosion_2;
    b26c:	ec e2       	ldi	r30, 0x2C	; 44
    b26e:	f8 e3       	ldi	r31, 0x38	; 56
    b270:	f0 93 4f 10 	sts	0x104F, r31
    b274:	e0 93 4e 10 	sts	0x104E, r30
		
	for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
	{
		game.enemies[i].shot[j].hit_count = 1;
    b278:	ec 01       	movw	r28, r24
    b27a:	c1 5d       	subi	r28, 0xD1	; 209
    b27c:	de 4f       	sbci	r29, 0xFE	; 254
    b27e:	31 e0       	ldi	r19, 0x01	; 1
    b280:	38 83       	st	Y, r19
		game.enemies[i].shot[j].active = 0;
    b282:	fc 01       	movw	r30, r24
    b284:	e0 5d       	subi	r30, 0xD0	; 208
    b286:	fe 4f       	sbci	r31, 0xFE	; 254
    b288:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shot_type = ENEMY_BALL_SHOT;
    b28a:	32 97       	sbiw	r30, 0x02	; 2
    b28c:	17 e0       	ldi	r17, 0x07	; 7
    b28e:	10 83       	st	Z, r17
		game.enemies[i].shot[j].anim.anim_count = 1;
    b290:	36 96       	adiw	r30, 0x06	; 6
    b292:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.frames_per_anim = 1;
    b294:	31 96       	adiw	r30, 0x01	; 1
    b296:	30 83       	st	Z, r19
		game.enemies[i].shot[j].anim.anims = enemy_shot_anim;
    b298:	34 96       	adiw	r30, 0x04	; 4
    b29a:	04 e4       	ldi	r16, 0x44	; 68
    b29c:	10 e1       	ldi	r17, 0x10	; 16
    b29e:	11 83       	std	Z+1, r17	; 0x01
    b2a0:	00 83       	st	Z, r16
		game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_shot;
    b2a2:	e5 e8       	ldi	r30, 0x85	; 133
    b2a4:	f7 e3       	ldi	r31, 0x37	; 55
    b2a6:	f0 93 45 10 	sts	0x1045, r31
    b2aa:	e0 93 44 10 	sts	0x1044, r30
		game.enemies[i].shot[j].shot_speed = SLOW_SHOT_SPEED;
    b2ae:	fc 01       	movw	r30, r24
    b2b0:	ef 5c       	subi	r30, 0xCF	; 207
    b2b2:	fe 4f       	sbci	r31, 0xFE	; 254
    b2b4:	30 e5       	ldi	r19, 0x50	; 80
    b2b6:	30 83       	st	Z, r19
		if (is_boss)
    b2b8:	22 23       	and	r18, r18
    b2ba:	51 f0       	breq	.+20     	; 0xb2d0 <init_enemy_shot+0xae>
		{
			game.enemies[i].shot[j].hit_count = CRITICAL_SHOT_DAMAGE;
    b2bc:	8a e0       	ldi	r24, 0x0A	; 10
    b2be:	88 83       	st	Y, r24
			game.enemies[i].shot[j].anim.anims[0] = (char*) map_enemy_boss_shot;
    b2c0:	87 e6       	ldi	r24, 0x67	; 103
    b2c2:	97 e3       	ldi	r25, 0x37	; 55
    b2c4:	90 93 45 10 	sts	0x1045, r25
    b2c8:	80 93 44 10 	sts	0x1044, r24
			game.enemies[i].shot[j].shot_speed = MEDIUM_SHOT_SPEED;
    b2cc:	84 e6       	ldi	r24, 0x64	; 100
    b2ce:	08 c0       	rjmp	.+16     	; 0xb2e0 <init_enemy_shot+0xbe>
		}
		else if (game.enemies[i].enemy_type == ENEMY_DRONE)
    b2d0:	fc 01       	movw	r30, r24
    b2d2:	ee 5d       	subi	r30, 0xDE	; 222
    b2d4:	fe 4f       	sbci	r31, 0xFE	; 254
    b2d6:	20 81       	ld	r18, Z
    b2d8:	3a 96       	adiw	r30, 0x0a	; 10
    b2da:	24 30       	cpi	r18, 0x04	; 4
    b2dc:	19 f4       	brne	.+6      	; 0xb2e4 <init_enemy_shot+0xc2>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = -DRONE_SPEED;
    b2de:	82 ee       	ldi	r24, 0xE2	; 226
    b2e0:	80 83       	st	Z, r24
    b2e2:	05 c0       	rjmp	.+10     	; 0xb2ee <init_enemy_shot+0xcc>
		}
		else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    b2e4:	25 30       	cpi	r18, 0x05	; 5
    b2e6:	11 f4       	brne	.+4      	; 0xb2ec <init_enemy_shot+0xca>
		{
			game.enemies[i].shot[j].shared.vy = SLOW_SHOT_SPEED;
			game.enemies[i].shot[j].shared.vx = GLOBE_SPEED;
    b2e8:	8a e0       	ldi	r24, 0x0A	; 10
    b2ea:	fa cf       	rjmp	.-12     	; 0xb2e0 <init_enemy_shot+0xbe>
		}
		else
		{
			game.enemies[i].shot[j].shared.vx = SLOW_SHOT_SPEED;
    b2ec:	30 83       	st	Z, r19
		}
		game.enemies[i].shot[j].shared.vy = 0;
    b2ee:	25 e3       	ldi	r18, 0x35	; 53
    b2f0:	2a 9f       	mul	r18, r26
    b2f2:	c0 01       	movw	r24, r0
    b2f4:	2b 9f       	mul	r18, r27
    b2f6:	90 0d       	add	r25, r0
    b2f8:	11 24       	eor	r1, r1
    b2fa:	87 54       	subi	r24, 0x47	; 71
    b2fc:	92 4f       	sbci	r25, 0xF2	; 242
    b2fe:	fc 01       	movw	r30, r24
    b300:	e5 5d       	subi	r30, 0xD5	; 213
    b302:	fe 4f       	sbci	r31, 0xFE	; 254
    b304:	10 82       	st	Z, r1
		game.enemies[i].shot[j].shared.x = x;
    b306:	34 97       	sbiw	r30, 0x04	; 4
    b308:	71 83       	std	Z+1, r23	; 0x01
    b30a:	60 83       	st	Z, r22
		game.enemies[i].shot[j].shared.y = y;
    b30c:	32 96       	adiw	r30, 0x02	; 2
    b30e:	51 83       	std	Z+1, r21	; 0x01
    b310:	40 83       	st	Z, r20
	}
}
    b312:	df 91       	pop	r29
    b314:	cf 91       	pop	r28
    b316:	1f 91       	pop	r17
    b318:	0f 91       	pop	r16
    b31a:	08 95       	ret

0000b31c <init_enemy_spider>:

void init_enemy_spider(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b31c:	95 e3       	ldi	r25, 0x35	; 53
    b31e:	89 9f       	mul	r24, r25
    b320:	90 01       	movw	r18, r0
    b322:	11 24       	eor	r1, r1
    b324:	27 54       	subi	r18, 0x47	; 71
    b326:	32 4f       	sbci	r19, 0xF2	; 242
    b328:	f9 01       	movw	r30, r18
    b32a:	e3 5e       	subi	r30, 0xE3	; 227
    b32c:	fe 4f       	sbci	r31, 0xFE	; 254
    b32e:	91 e0       	ldi	r25, 0x01	; 1
    b330:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b332:	32 96       	adiw	r30, 0x02	; 2
    b334:	10 82       	st	Z, r1
	game.enemies[i].flags = IDLE;
    b336:	31 97       	sbiw	r30, 0x01	; 1
    b338:	a8 e0       	ldi	r26, 0x08	; 8
    b33a:	a0 83       	st	Z, r26
	game.enemies[i].width = 1;
    b33c:	32 96       	adiw	r30, 0x02	; 2
    b33e:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b340:	31 96       	adiw	r30, 0x01	; 1
    b342:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SPIDER;
    b344:	31 96       	adiw	r30, 0x01	; 1
    b346:	10 82       	st	Z, r1
	game.enemies[i].frame_count = 0;
    b348:	31 96       	adiw	r30, 0x01	; 1
    b34a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b34c:	31 96       	adiw	r30, 0x01	; 1
    b34e:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SPIDER_SHIELD;
    b350:	32 96       	adiw	r30, 0x02	; 2
    b352:	92 e0       	ldi	r25, 0x02	; 2
    b354:	90 83       	st	Z, r25
	
	game.enemies[i].anim.anim_count = 2;
    b356:	76 96       	adiw	r30, 0x16	; 22
    b358:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = SPIDER_FRAMES_PER_IDLE;
    b35a:	31 96       	adiw	r30, 0x01	; 1
    b35c:	9a e0       	ldi	r25, 0x0A	; 10
    b35e:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = spider_anim;
    b360:	d9 01       	movw	r26, r18
    b362:	af 5b       	subi	r26, 0xBF	; 191
    b364:	be 4f       	sbci	r27, 0xFE	; 254
    b366:	ee ed       	ldi	r30, 0xDE	; 222
    b368:	ff e0       	ldi	r31, 0x0F	; 15
    b36a:	ed 93       	st	X+, r30
    b36c:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_spider_0;
    b36e:	ac e7       	ldi	r26, 0x7C	; 124
    b370:	b7 e3       	ldi	r27, 0x37	; 55
    b372:	b1 83       	std	Z+1, r27	; 0x01
    b374:	a0 83       	st	Z, r26
	game.enemies[i].anim.anims[1] = (char*) map_enemy_spider_1;
    b376:	a9 e7       	ldi	r26, 0x79	; 121
    b378:	b7 e3       	ldi	r27, 0x37	; 55
    b37a:	b3 83       	std	Z+3, r27	; 0x03
    b37c:	a2 83       	std	Z+2, r26	; 0x02
	game.enemies[i].shared.gravity = 0;
    b37e:	f9 01       	movw	r30, r18
    b380:	e4 5e       	subi	r30, 0xE4	; 228
    b382:	fe 4f       	sbci	r31, 0xFE	; 254
    b384:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b386:	31 97       	sbiw	r30, 0x01	; 1
    b388:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b38a:	31 97       	sbiw	r30, 0x01	; 1
    b38c:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b38e:	34 97       	sbiw	r30, 0x04	; 4
    b390:	71 83       	std	Z+1, r23	; 0x01
    b392:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b394:	32 96       	adiw	r30, 0x02	; 2
    b396:	51 83       	std	Z+1, r21	; 0x01
    b398:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b39a:	20 e0       	ldi	r18, 0x00	; 0
    b39c:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b3a0 <init_enemy_turret>:
}

void init_enemy_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b3a0:	95 e3       	ldi	r25, 0x35	; 53
    b3a2:	89 9f       	mul	r24, r25
    b3a4:	90 01       	movw	r18, r0
    b3a6:	11 24       	eor	r1, r1
    b3a8:	27 54       	subi	r18, 0x47	; 71
    b3aa:	32 4f       	sbci	r19, 0xF2	; 242
    b3ac:	f9 01       	movw	r30, r18
    b3ae:	e2 5e       	subi	r30, 0xE2	; 226
    b3b0:	fe 4f       	sbci	r31, 0xFE	; 254
    b3b2:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b3b4:	31 97       	sbiw	r30, 0x01	; 1
    b3b6:	91 e0       	ldi	r25, 0x01	; 1
    b3b8:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b3ba:	32 96       	adiw	r30, 0x02	; 2
    b3bc:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b3be:	31 96       	adiw	r30, 0x01	; 1
    b3c0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b3c2:	31 96       	adiw	r30, 0x01	; 1
    b3c4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_TURRET;
    b3c6:	31 96       	adiw	r30, 0x01	; 1
    b3c8:	a3 e0       	ldi	r26, 0x03	; 3
    b3ca:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b3cc:	31 96       	adiw	r30, 0x01	; 1
    b3ce:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b3d0:	31 96       	adiw	r30, 0x01	; 1
    b3d2:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_TURRET_SHIELD;
    b3d4:	32 96       	adiw	r30, 0x02	; 2
    b3d6:	a2 e0       	ldi	r26, 0x02	; 2
    b3d8:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b3da:	76 96       	adiw	r30, 0x16	; 22
    b3dc:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b3de:	31 96       	adiw	r30, 0x01	; 1
    b3e0:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b3e2:	d9 01       	movw	r26, r18
    b3e4:	af 5b       	subi	r26, 0xBF	; 191
    b3e6:	be 4f       	sbci	r27, 0xFE	; 254
    b3e8:	e4 e3       	ldi	r30, 0x34	; 52
    b3ea:	f0 e1       	ldi	r31, 0x10	; 16
    b3ec:	ed 93       	st	X+, r30
    b3ee:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_tank;
    b3f0:	a3 e7       	ldi	r26, 0x73	; 115
    b3f2:	b7 e3       	ldi	r27, 0x37	; 55
    b3f4:	b1 83       	std	Z+1, r27	; 0x01
    b3f6:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b3f8:	f9 01       	movw	r30, r18
    b3fa:	e4 5e       	subi	r30, 0xE4	; 228
    b3fc:	fe 4f       	sbci	r31, 0xFE	; 254
    b3fe:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b400:	31 97       	sbiw	r30, 0x01	; 1
    b402:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b404:	31 97       	sbiw	r30, 0x01	; 1
    b406:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b408:	34 97       	sbiw	r30, 0x04	; 4
    b40a:	71 83       	std	Z+1, r23	; 0x01
    b40c:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b40e:	32 96       	adiw	r30, 0x02	; 2
    b410:	51 83       	std	Z+1, r21	; 0x01
    b412:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b414:	20 e0       	ldi	r18, 0x00	; 0
    b416:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b41a <init_enemy_drone>:
}

void init_enemy_drone(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b41a:	95 e3       	ldi	r25, 0x35	; 53
    b41c:	89 9f       	mul	r24, r25
    b41e:	90 01       	movw	r18, r0
    b420:	11 24       	eor	r1, r1
    b422:	27 54       	subi	r18, 0x47	; 71
    b424:	32 4f       	sbci	r19, 0xF2	; 242
    b426:	f9 01       	movw	r30, r18
    b428:	e2 5e       	subi	r30, 0xE2	; 226
    b42a:	fe 4f       	sbci	r31, 0xFE	; 254
    b42c:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b42e:	31 97       	sbiw	r30, 0x01	; 1
    b430:	91 e0       	ldi	r25, 0x01	; 1
    b432:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b434:	32 96       	adiw	r30, 0x02	; 2
    b436:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b438:	31 96       	adiw	r30, 0x01	; 1
    b43a:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b43c:	31 96       	adiw	r30, 0x01	; 1
    b43e:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_DRONE;
    b440:	31 96       	adiw	r30, 0x01	; 1
    b442:	a4 e0       	ldi	r26, 0x04	; 4
    b444:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b446:	31 96       	adiw	r30, 0x01	; 1
    b448:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b44a:	31 96       	adiw	r30, 0x01	; 1
    b44c:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_DRONE_SHIELD;
    b44e:	32 96       	adiw	r30, 0x02	; 2
    b450:	a2 e0       	ldi	r26, 0x02	; 2
    b452:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b454:	76 96       	adiw	r30, 0x16	; 22
    b456:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b458:	31 96       	adiw	r30, 0x01	; 1
    b45a:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = drone_anim;
    b45c:	d9 01       	movw	r26, r18
    b45e:	af 5b       	subi	r26, 0xBF	; 191
    b460:	be 4f       	sbci	r27, 0xFE	; 254
    b462:	e8 e4       	ldi	r30, 0x48	; 72
    b464:	f0 e1       	ldi	r31, 0x10	; 16
    b466:	ed 93       	st	X+, r30
    b468:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_drone;
    b46a:	a0 e7       	ldi	r26, 0x70	; 112
    b46c:	b7 e3       	ldi	r27, 0x37	; 55
    b46e:	b1 83       	std	Z+1, r27	; 0x01
    b470:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b472:	f9 01       	movw	r30, r18
    b474:	e4 5e       	subi	r30, 0xE4	; 228
    b476:	fe 4f       	sbci	r31, 0xFE	; 254
    b478:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = -DRONE_SPEED;
    b47a:	31 97       	sbiw	r30, 0x01	; 1
    b47c:	92 ee       	ldi	r25, 0xE2	; 226
    b47e:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b480:	31 97       	sbiw	r30, 0x01	; 1
    b482:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b484:	34 97       	sbiw	r30, 0x04	; 4
    b486:	71 83       	std	Z+1, r23	; 0x01
    b488:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b48a:	32 96       	adiw	r30, 0x02	; 2
    b48c:	51 83       	std	Z+1, r21	; 0x01
    b48e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b490:	20 e0       	ldi	r18, 0x00	; 0
    b492:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b496 <init_enemy_shark>:
}

void init_enemy_shark(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b496:	95 e3       	ldi	r25, 0x35	; 53
    b498:	89 9f       	mul	r24, r25
    b49a:	90 01       	movw	r18, r0
    b49c:	11 24       	eor	r1, r1
    b49e:	27 54       	subi	r18, 0x47	; 71
    b4a0:	32 4f       	sbci	r19, 0xF2	; 242
    b4a2:	f9 01       	movw	r30, r18
    b4a4:	e2 5e       	subi	r30, 0xE2	; 226
    b4a6:	fe 4f       	sbci	r31, 0xFE	; 254
    b4a8:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b4aa:	31 97       	sbiw	r30, 0x01	; 1
    b4ac:	91 e0       	ldi	r25, 0x01	; 1
    b4ae:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b4b0:	33 96       	adiw	r30, 0x03	; 3
    b4b2:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b4b4:	31 96       	adiw	r30, 0x01	; 1
    b4b6:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_SHARK;
    b4b8:	31 96       	adiw	r30, 0x01	; 1
    b4ba:	90 83       	st	Z, r25
	game.enemies[i].frame_count = 0;
    b4bc:	31 96       	adiw	r30, 0x01	; 1
    b4be:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b4c0:	31 96       	adiw	r30, 0x01	; 1
    b4c2:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_SHARK_SHIELD;
    b4c4:	32 96       	adiw	r30, 0x02	; 2
    b4c6:	a4 e0       	ldi	r26, 0x04	; 4
    b4c8:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b4ca:	76 96       	adiw	r30, 0x16	; 22
    b4cc:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b4ce:	31 96       	adiw	r30, 0x01	; 1
    b4d0:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = shark_anim;
    b4d2:	d9 01       	movw	r26, r18
    b4d4:	af 5b       	subi	r26, 0xBF	; 191
    b4d6:	be 4f       	sbci	r27, 0xFE	; 254
    b4d8:	e2 ee       	ldi	r30, 0xE2	; 226
    b4da:	ff e0       	ldi	r31, 0x0F	; 15
    b4dc:	ed 93       	st	X+, r30
    b4de:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_shark;
    b4e0:	a2 e8       	ldi	r26, 0x82	; 130
    b4e2:	b7 e3       	ldi	r27, 0x37	; 55
    b4e4:	b1 83       	std	Z+1, r27	; 0x01
    b4e6:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b4e8:	f9 01       	movw	r30, r18
    b4ea:	e4 5e       	subi	r30, 0xE4	; 228
    b4ec:	fe 4f       	sbci	r31, 0xFE	; 254
    b4ee:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = SHARK_SPEED;
    b4f0:	31 97       	sbiw	r30, 0x01	; 1
    b4f2:	9e e1       	ldi	r25, 0x1E	; 30
    b4f4:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b4f6:	31 97       	sbiw	r30, 0x01	; 1
    b4f8:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b4fa:	34 97       	sbiw	r30, 0x04	; 4
    b4fc:	71 83       	std	Z+1, r23	; 0x01
    b4fe:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b500:	32 96       	adiw	r30, 0x02	; 2
    b502:	51 83       	std	Z+1, r21	; 0x01
    b504:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b506:	20 e0       	ldi	r18, 0x00	; 0
    b508:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b50c <init_enemy_globe>:
}

void init_enemy_globe(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b50c:	95 e3       	ldi	r25, 0x35	; 53
    b50e:	89 9f       	mul	r24, r25
    b510:	90 01       	movw	r18, r0
    b512:	11 24       	eor	r1, r1
    b514:	27 54       	subi	r18, 0x47	; 71
    b516:	32 4f       	sbci	r19, 0xF2	; 242
    b518:	f9 01       	movw	r30, r18
    b51a:	e2 5e       	subi	r30, 0xE2	; 226
    b51c:	fe 4f       	sbci	r31, 0xFE	; 254
    b51e:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b520:	31 97       	sbiw	r30, 0x01	; 1
    b522:	91 e0       	ldi	r25, 0x01	; 1
    b524:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b526:	33 96       	adiw	r30, 0x03	; 3
    b528:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b52a:	31 96       	adiw	r30, 0x01	; 1
    b52c:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_GLOBE;
    b52e:	31 96       	adiw	r30, 0x01	; 1
    b530:	a5 e0       	ldi	r26, 0x05	; 5
    b532:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b534:	31 96       	adiw	r30, 0x01	; 1
    b536:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b538:	31 96       	adiw	r30, 0x01	; 1
    b53a:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_GLOBE_SHIELD;
    b53c:	32 96       	adiw	r30, 0x02	; 2
    b53e:	a4 e0       	ldi	r26, 0x04	; 4
    b540:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b542:	76 96       	adiw	r30, 0x16	; 22
    b544:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b546:	31 96       	adiw	r30, 0x01	; 1
    b548:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = globe_anim;
    b54a:	d9 01       	movw	r26, r18
    b54c:	af 5b       	subi	r26, 0xBF	; 191
    b54e:	be 4f       	sbci	r27, 0xFE	; 254
    b550:	e6 e4       	ldi	r30, 0x46	; 70
    b552:	f0 e1       	ldi	r31, 0x10	; 16
    b554:	ed 93       	st	X+, r30
    b556:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_ball;
    b558:	a6 e7       	ldi	r26, 0x76	; 118
    b55a:	b7 e3       	ldi	r27, 0x37	; 55
    b55c:	b1 83       	std	Z+1, r27	; 0x01
    b55e:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b560:	f9 01       	movw	r30, r18
    b562:	e4 5e       	subi	r30, 0xE4	; 228
    b564:	fe 4f       	sbci	r31, 0xFE	; 254
    b566:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = GLOBE_SPEED;
    b568:	31 97       	sbiw	r30, 0x01	; 1
    b56a:	9a e0       	ldi	r25, 0x0A	; 10
    b56c:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = 0;
    b56e:	31 97       	sbiw	r30, 0x01	; 1
    b570:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b572:	34 97       	sbiw	r30, 0x04	; 4
    b574:	71 83       	std	Z+1, r23	; 0x01
    b576:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b578:	32 96       	adiw	r30, 0x02	; 2
    b57a:	51 83       	std	Z+1, r21	; 0x01
    b57c:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b57e:	20 e0       	ldi	r18, 0x00	; 0
    b580:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b584 <init_enemy_xwing>:
}

void init_enemy_xwing(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b584:	95 e3       	ldi	r25, 0x35	; 53
    b586:	89 9f       	mul	r24, r25
    b588:	90 01       	movw	r18, r0
    b58a:	11 24       	eor	r1, r1
    b58c:	27 54       	subi	r18, 0x47	; 71
    b58e:	32 4f       	sbci	r19, 0xF2	; 242
    b590:	f9 01       	movw	r30, r18
    b592:	e2 5e       	subi	r30, 0xE2	; 226
    b594:	fe 4f       	sbci	r31, 0xFE	; 254
    b596:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b598:	31 97       	sbiw	r30, 0x01	; 1
    b59a:	91 e0       	ldi	r25, 0x01	; 1
    b59c:	90 83       	st	Z, r25
	game.enemies[i].width = 1;
    b59e:	33 96       	adiw	r30, 0x03	; 3
    b5a0:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b5a2:	31 96       	adiw	r30, 0x01	; 1
    b5a4:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_XWING;
    b5a6:	31 96       	adiw	r30, 0x01	; 1
    b5a8:	a8 e0       	ldi	r26, 0x08	; 8
    b5aa:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b5ac:	31 96       	adiw	r30, 0x01	; 1
    b5ae:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b5b0:	31 96       	adiw	r30, 0x01	; 1
    b5b2:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_XWING_SHIELD;
    b5b4:	32 96       	adiw	r30, 0x02	; 2
    b5b6:	a4 e0       	ldi	r26, 0x04	; 4
    b5b8:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b5ba:	76 96       	adiw	r30, 0x16	; 22
    b5bc:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b5be:	31 96       	adiw	r30, 0x01	; 1
    b5c0:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = xwing_anim;
    b5c2:	d9 01       	movw	r26, r18
    b5c4:	af 5b       	subi	r26, 0xBF	; 191
    b5c6:	be 4f       	sbci	r27, 0xFE	; 254
    b5c8:	e6 e5       	ldi	r30, 0x56	; 86
    b5ca:	f0 e1       	ldi	r31, 0x10	; 16
    b5cc:	ed 93       	st	X+, r30
    b5ce:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_xwing;
    b5d0:	af e7       	ldi	r26, 0x7F	; 127
    b5d2:	b7 e3       	ldi	r27, 0x37	; 55
    b5d4:	b1 83       	std	Z+1, r27	; 0x01
    b5d6:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b5d8:	f9 01       	movw	r30, r18
    b5da:	e4 5e       	subi	r30, 0xE4	; 228
    b5dc:	fe 4f       	sbci	r31, 0xFE	; 254
    b5de:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = XWING_SPEED;
    b5e0:	31 97       	sbiw	r30, 0x01	; 1
    b5e2:	94 e1       	ldi	r25, 0x14	; 20
    b5e4:	90 83       	st	Z, r25
	game.enemies[i].shared.vy = XWING_SPEED;
    b5e6:	31 97       	sbiw	r30, 0x01	; 1
    b5e8:	90 83       	st	Z, r25
	game.enemies[i].shared.x = x;
    b5ea:	34 97       	sbiw	r30, 0x04	; 4
    b5ec:	71 83       	std	Z+1, r23	; 0x01
    b5ee:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b5f0:	32 96       	adiw	r30, 0x02	; 2
    b5f2:	51 83       	std	Z+1, r21	; 0x01
    b5f4:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 0);
    b5f6:	20 e0       	ldi	r18, 0x00	; 0
    b5f8:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b5fc <init_enemy_boss_turret>:
}

void init_enemy_boss_turret(u8 i, u16 x, u16 y)
{
	game.enemies[i].flags = 0;
    b5fc:	95 e3       	ldi	r25, 0x35	; 53
    b5fe:	89 9f       	mul	r24, r25
    b600:	90 01       	movw	r18, r0
    b602:	11 24       	eor	r1, r1
    b604:	27 54       	subi	r18, 0x47	; 71
    b606:	32 4f       	sbci	r19, 0xF2	; 242
    b608:	f9 01       	movw	r30, r18
    b60a:	e2 5e       	subi	r30, 0xE2	; 226
    b60c:	fe 4f       	sbci	r31, 0xFE	; 254
    b60e:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b610:	31 97       	sbiw	r30, 0x01	; 1
    b612:	91 e0       	ldi	r25, 0x01	; 1
    b614:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b616:	32 96       	adiw	r30, 0x02	; 2
    b618:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b61a:	31 96       	adiw	r30, 0x01	; 1
    b61c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b61e:	31 96       	adiw	r30, 0x01	; 1
    b620:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_TURRET;
    b622:	31 96       	adiw	r30, 0x01	; 1
    b624:	a6 e0       	ldi	r26, 0x06	; 6
    b626:	a0 83       	st	Z, r26
	game.enemies[i].frame_count = 0;
    b628:	31 96       	adiw	r30, 0x01	; 1
    b62a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b62c:	31 96       	adiw	r30, 0x01	; 1
    b62e:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_TURRET_SHIELD;
    b630:	32 96       	adiw	r30, 0x02	; 2
    b632:	a8 e0       	ldi	r26, 0x08	; 8
    b634:	a0 83       	st	Z, r26
	
	game.enemies[i].anim.anim_count = 1;
    b636:	76 96       	adiw	r30, 0x16	; 22
    b638:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b63a:	31 96       	adiw	r30, 0x01	; 1
    b63c:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b63e:	d9 01       	movw	r26, r18
    b640:	af 5b       	subi	r26, 0xBF	; 191
    b642:	be 4f       	sbci	r27, 0xFE	; 254
    b644:	e4 e3       	ldi	r30, 0x34	; 52
    b646:	f0 e1       	ldi	r31, 0x10	; 16
    b648:	ed 93       	st	X+, r30
    b64a:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_turret;
    b64c:	ad e6       	ldi	r26, 0x6D	; 109
    b64e:	b7 e3       	ldi	r27, 0x37	; 55
    b650:	b1 83       	std	Z+1, r27	; 0x01
    b652:	a0 83       	st	Z, r26
	game.enemies[i].shared.gravity = 0;
    b654:	f9 01       	movw	r30, r18
    b656:	e4 5e       	subi	r30, 0xE4	; 228
    b658:	fe 4f       	sbci	r31, 0xFE	; 254
    b65a:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b65c:	31 97       	sbiw	r30, 0x01	; 1
    b65e:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b660:	31 97       	sbiw	r30, 0x01	; 1
    b662:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b664:	34 97       	sbiw	r30, 0x04	; 4
    b666:	71 83       	std	Z+1, r23	; 0x01
    b668:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b66a:	32 96       	adiw	r30, 0x02	; 2
    b66c:	51 83       	std	Z+1, r21	; 0x01
    b66e:	40 83       	st	Z, r20
	
	init_enemy_shot(i, x, y, 1);
    b670:	21 e0       	ldi	r18, 0x01	; 1
    b672:	0c 94 11 59 	jmp	0xb222	; 0xb222 <init_enemy_shot>

0000b676 <init_enemy_boss_eye>:
}

void init_enemy_boss_eye(u8 i, u16 x, u16 y)
{
    b676:	cf 93       	push	r28
    b678:	df 93       	push	r29
    b67a:	ea 01       	movw	r28, r20
	game.enemies[i].flags = 0;
    b67c:	95 e3       	ldi	r25, 0x35	; 53
    b67e:	89 9f       	mul	r24, r25
    b680:	90 01       	movw	r18, r0
    b682:	11 24       	eor	r1, r1
    b684:	27 54       	subi	r18, 0x47	; 71
    b686:	32 4f       	sbci	r19, 0xF2	; 242
    b688:	f9 01       	movw	r30, r18
    b68a:	e2 5e       	subi	r30, 0xE2	; 226
    b68c:	fe 4f       	sbci	r31, 0xFE	; 254
    b68e:	10 82       	st	Z, r1
	game.enemies[i].active = 1;
    b690:	31 97       	sbiw	r30, 0x01	; 1
    b692:	91 e0       	ldi	r25, 0x01	; 1
    b694:	90 83       	st	Z, r25
	game.enemies[i].direction = D_LEFT;
    b696:	32 96       	adiw	r30, 0x02	; 2
    b698:	10 82       	st	Z, r1
	game.enemies[i].width = 1;
    b69a:	31 96       	adiw	r30, 0x01	; 1
    b69c:	90 83       	st	Z, r25
	game.enemies[i].height = 1;
    b69e:	31 96       	adiw	r30, 0x01	; 1
    b6a0:	90 83       	st	Z, r25
	game.enemies[i].enemy_type = ENEMY_BOSS_EYE;
    b6a2:	31 96       	adiw	r30, 0x01	; 1
    b6a4:	47 e0       	ldi	r20, 0x07	; 7
    b6a6:	40 83       	st	Z, r20
	game.enemies[i].frame_count = 0;
    b6a8:	31 96       	adiw	r30, 0x01	; 1
    b6aa:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b6ac:	31 96       	adiw	r30, 0x01	; 1
    b6ae:	10 82       	st	Z, r1
	game.enemies[i].shield = ENEMY_BOSS_EYE_SHIELD;
    b6b0:	32 96       	adiw	r30, 0x02	; 2
    b6b2:	48 e0       	ldi	r20, 0x08	; 8
    b6b4:	40 83       	st	Z, r20
	
	game.enemies[i].anim.anim_count = 1;
    b6b6:	76 96       	adiw	r30, 0x16	; 22
    b6b8:	90 83       	st	Z, r25
	game.enemies[i].anim.frames_per_anim = 1;
    b6ba:	31 96       	adiw	r30, 0x01	; 1
    b6bc:	90 83       	st	Z, r25
	game.enemies[i].anim.anims = turret_anim;
    b6be:	d9 01       	movw	r26, r18
    b6c0:	af 5b       	subi	r26, 0xBF	; 191
    b6c2:	be 4f       	sbci	r27, 0xFE	; 254
    b6c4:	e4 e3       	ldi	r30, 0x34	; 52
    b6c6:	f0 e1       	ldi	r31, 0x10	; 16
    b6c8:	ed 93       	st	X+, r30
    b6ca:	fc 93       	st	X, r31
	game.enemies[i].anim.anims[0] = (char*) map_enemy_boss_eye;
    b6cc:	4a e6       	ldi	r20, 0x6A	; 106
    b6ce:	57 e3       	ldi	r21, 0x37	; 55
    b6d0:	51 83       	std	Z+1, r21	; 0x01
    b6d2:	40 83       	st	Z, r20
	game.enemies[i].shared.gravity = 0;
    b6d4:	f9 01       	movw	r30, r18
    b6d6:	e4 5e       	subi	r30, 0xE4	; 228
    b6d8:	fe 4f       	sbci	r31, 0xFE	; 254
    b6da:	10 82       	st	Z, r1
	game.enemies[i].shared.vx = 0;
    b6dc:	31 97       	sbiw	r30, 0x01	; 1
    b6de:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = 0;
    b6e0:	31 97       	sbiw	r30, 0x01	; 1
    b6e2:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b6e4:	34 97       	sbiw	r30, 0x04	; 4
    b6e6:	71 83       	std	Z+1, r23	; 0x01
    b6e8:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b6ea:	32 96       	adiw	r30, 0x02	; 2
    b6ec:	d1 83       	std	Z+1, r29	; 0x01
    b6ee:	c0 83       	st	Z, r28
	init_enemy_shot(i, x, y, 1);
    b6f0:	21 e0       	ldi	r18, 0x01	; 1
    b6f2:	ae 01       	movw	r20, r28
    b6f4:	0e 94 11 59 	call	0xb222	; 0xb222 <init_enemy_shot>
	SetTile(32-game.eye_clusters,y/8, 0);
    b6f8:	be 01       	movw	r22, r28
    b6fa:	83 e0       	ldi	r24, 0x03	; 3
    b6fc:	76 95       	lsr	r23
    b6fe:	67 95       	ror	r22
    b700:	8a 95       	dec	r24
    b702:	e1 f7       	brne	.-8      	; 0xb6fc <init_enemy_boss_eye+0x86>
    b704:	90 91 d7 0d 	lds	r25, 0x0DD7
    b708:	40 e0       	ldi	r20, 0x00	; 0
    b70a:	50 e0       	ldi	r21, 0x00	; 0
    b70c:	80 e2       	ldi	r24, 0x20	; 32
    b70e:	89 1b       	sub	r24, r25
}
    b710:	df 91       	pop	r29
    b712:	cf 91       	pop	r28
	game.enemies[i].shared.vx = 0;
	game.enemies[i].shared.vy = 0;
	game.enemies[i].shared.x = x;
	game.enemies[i].shared.y = y;
	init_enemy_shot(i, x, y, 1);
	SetTile(32-game.eye_clusters,y/8, 0);
    b714:	0c 94 d3 41 	jmp	0x83a6	; 0x83a6 <SetTile>

0000b718 <init_enemy_boss_turrets>:
}

void init_enemy_boss_turrets()
{
	init_enemy_boss_turret(0, 249*8, 4*8);
    b718:	40 e2       	ldi	r20, 0x20	; 32
    b71a:	50 e0       	ldi	r21, 0x00	; 0
    b71c:	68 ec       	ldi	r22, 0xC8	; 200
    b71e:	77 e0       	ldi	r23, 0x07	; 7
    b720:	80 e0       	ldi	r24, 0x00	; 0
    b722:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <init_enemy_boss_turret>
	init_enemy_boss_turret(1, 249*8, 6*8);
    b726:	40 e3       	ldi	r20, 0x30	; 48
    b728:	50 e0       	ldi	r21, 0x00	; 0
    b72a:	68 ec       	ldi	r22, 0xC8	; 200
    b72c:	77 e0       	ldi	r23, 0x07	; 7
    b72e:	81 e0       	ldi	r24, 0x01	; 1
    b730:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <init_enemy_boss_turret>
	init_enemy_boss_turret(2, 249*8, 18*8);
    b734:	40 e9       	ldi	r20, 0x90	; 144
    b736:	50 e0       	ldi	r21, 0x00	; 0
    b738:	68 ec       	ldi	r22, 0xC8	; 200
    b73a:	77 e0       	ldi	r23, 0x07	; 7
    b73c:	82 e0       	ldi	r24, 0x02	; 2
    b73e:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <init_enemy_boss_turret>
	init_enemy_boss_turret(3, 249*8, 20*8);
    b742:	40 ea       	ldi	r20, 0xA0	; 160
    b744:	50 e0       	ldi	r21, 0x00	; 0
    b746:	68 ec       	ldi	r22, 0xC8	; 200
    b748:	77 e0       	ldi	r23, 0x07	; 7
    b74a:	83 e0       	ldi	r24, 0x03	; 3
    b74c:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <init_enemy_boss_turret>
	game.active_enemies = 4;
    b750:	84 e0       	ldi	r24, 0x04	; 4
    b752:	80 93 d4 0d 	sts	0x0DD4, r24
    b756:	08 95       	ret

0000b758 <init_enemy_boss_eyes>:
}

void init_enemy_boss_eyes()
{
    b758:	ef 92       	push	r14
    b75a:	ff 92       	push	r15
    b75c:	0f 93       	push	r16
    b75e:	1f 93       	push	r17
    b760:	cf 93       	push	r28
    b762:	df 93       	push	r29
	static u8 idx = 0;
	init_enemy_boss_eye(idx % 5, (256-game.eye_clusters)*8, 11*8);
    b764:	09 eb       	ldi	r16, 0xB9	; 185
    b766:	1d e0       	ldi	r17, 0x0D	; 13
    b768:	f8 01       	movw	r30, r16
    b76a:	86 8d       	ldd	r24, Z+30	; 0x1e
    b76c:	c0 e0       	ldi	r28, 0x00	; 0
    b76e:	d1 e0       	ldi	r29, 0x01	; 1
    b770:	9e 01       	movw	r18, r28
    b772:	28 1b       	sub	r18, r24
    b774:	31 09       	sbc	r19, r1
    b776:	83 e0       	ldi	r24, 0x03	; 3
    b778:	22 0f       	add	r18, r18
    b77a:	33 1f       	adc	r19, r19
    b77c:	8a 95       	dec	r24
    b77e:	e1 f7       	brne	.-8      	; 0xb778 <init_enemy_boss_eyes+0x20>
    b780:	80 91 fc 0c 	lds	r24, 0x0CFC
    b784:	65 e0       	ldi	r22, 0x05	; 5
    b786:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    b78a:	89 2f       	mov	r24, r25
    b78c:	48 e5       	ldi	r20, 0x58	; 88
    b78e:	50 e0       	ldi	r21, 0x00	; 0
    b790:	b9 01       	movw	r22, r18
    b792:	0e 94 3b 5b 	call	0xb676	; 0xb676 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+1) % 5, (256-game.eye_clusters)*8, 12*8);
    b796:	f8 01       	movw	r30, r16
    b798:	86 8d       	ldd	r24, Z+30	; 0x1e
    b79a:	9e 01       	movw	r18, r28
    b79c:	28 1b       	sub	r18, r24
    b79e:	31 09       	sbc	r19, r1
    b7a0:	93 e0       	ldi	r25, 0x03	; 3
    b7a2:	22 0f       	add	r18, r18
    b7a4:	33 1f       	adc	r19, r19
    b7a6:	9a 95       	dec	r25
    b7a8:	e1 f7       	brne	.-8      	; 0xb7a2 <init_enemy_boss_eyes+0x4a>
    b7aa:	80 91 fc 0c 	lds	r24, 0x0CFC
    b7ae:	90 e0       	ldi	r25, 0x00	; 0
    b7b0:	01 96       	adiw	r24, 0x01	; 1
    b7b2:	45 e0       	ldi	r20, 0x05	; 5
    b7b4:	e4 2e       	mov	r14, r20
    b7b6:	f1 2c       	mov	r15, r1
    b7b8:	b7 01       	movw	r22, r14
    b7ba:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    b7be:	40 e6       	ldi	r20, 0x60	; 96
    b7c0:	50 e0       	ldi	r21, 0x00	; 0
    b7c2:	b9 01       	movw	r22, r18
    b7c4:	0e 94 3b 5b 	call	0xb676	; 0xb676 <init_enemy_boss_eye>
	init_enemy_boss_eye((idx+2) % 5, (256-game.eye_clusters)*8, 13*8);
    b7c8:	f8 01       	movw	r30, r16
    b7ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    b7cc:	c8 1b       	sub	r28, r24
    b7ce:	d1 09       	sbc	r29, r1
    b7d0:	53 e0       	ldi	r21, 0x03	; 3
    b7d2:	cc 0f       	add	r28, r28
    b7d4:	dd 1f       	adc	r29, r29
    b7d6:	5a 95       	dec	r21
    b7d8:	e1 f7       	brne	.-8      	; 0xb7d2 <init_enemy_boss_eyes+0x7a>
    b7da:	80 91 fc 0c 	lds	r24, 0x0CFC
    b7de:	90 e0       	ldi	r25, 0x00	; 0
    b7e0:	02 96       	adiw	r24, 0x02	; 2
    b7e2:	b7 01       	movw	r22, r14
    b7e4:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    b7e8:	48 e6       	ldi	r20, 0x68	; 104
    b7ea:	50 e0       	ldi	r21, 0x00	; 0
    b7ec:	be 01       	movw	r22, r28
    b7ee:	0e 94 3b 5b 	call	0xb676	; 0xb676 <init_enemy_boss_eye>
	game.active_enemies = 3;
    b7f2:	83 e0       	ldi	r24, 0x03	; 3
    b7f4:	f8 01       	movw	r30, r16
    b7f6:	83 8f       	std	Z+27, r24	; 0x1b
	idx += 3;
    b7f8:	80 91 fc 0c 	lds	r24, 0x0CFC
    b7fc:	8d 5f       	subi	r24, 0xFD	; 253
    b7fe:	80 93 fc 0c 	sts	0x0CFC, r24
}
    b802:	df 91       	pop	r29
    b804:	cf 91       	pop	r28
    b806:	1f 91       	pop	r17
    b808:	0f 91       	pop	r16
    b80a:	ff 90       	pop	r15
    b80c:	ef 90       	pop	r14
    b80e:	08 95       	ret

0000b810 <init_enemy_level_hazard>:

void init_enemy_level_hazard(u8 i, u16 x, u16 y)
{
	game.enemies[i].active = 1;
    b810:	a8 2f       	mov	r26, r24
    b812:	b0 e0       	ldi	r27, 0x00	; 0
    b814:	25 e3       	ldi	r18, 0x35	; 53
    b816:	82 9f       	mul	r24, r18
    b818:	c0 01       	movw	r24, r0
    b81a:	11 24       	eor	r1, r1
    b81c:	87 54       	subi	r24, 0x47	; 71
    b81e:	92 4f       	sbci	r25, 0xF2	; 242
    b820:	fc 01       	movw	r30, r24
    b822:	e3 5e       	subi	r30, 0xE3	; 227
    b824:	fe 4f       	sbci	r31, 0xFE	; 254
    b826:	21 e0       	ldi	r18, 0x01	; 1
    b828:	20 83       	st	Z, r18
	game.enemies[i].width = 1;
    b82a:	33 96       	adiw	r30, 0x03	; 3
    b82c:	20 83       	st	Z, r18
	game.enemies[i].height = 1;
    b82e:	31 96       	adiw	r30, 0x01	; 1
    b830:	20 83       	st	Z, r18
	game.enemies[i].enemy_type = ENEMY_PROJECTILE_HAZARD;
    b832:	31 96       	adiw	r30, 0x01	; 1
    b834:	32 e0       	ldi	r19, 0x02	; 2
    b836:	30 83       	st	Z, r19
	game.enemies[i].frame_count = 0;
    b838:	31 96       	adiw	r30, 0x01	; 1
    b83a:	10 82       	st	Z, r1
	game.enemies[i].shot_frame_count = 0;
    b83c:	31 96       	adiw	r30, 0x01	; 1
    b83e:	10 82       	st	Z, r1
	
	game.enemies[i].anim.anim_count = 1;
    b840:	78 96       	adiw	r30, 0x18	; 24
    b842:	20 83       	st	Z, r18
	game.enemies[i].anim.frames_per_anim = 1;
    b844:	31 96       	adiw	r30, 0x01	; 1
    b846:	20 83       	st	Z, r18
	game.enemies[i].anim.anims = hazard_anim;
    b848:	34 96       	adiw	r30, 0x04	; 4
    b84a:	88 e5       	ldi	r24, 0x58	; 88
    b84c:	90 e1       	ldi	r25, 0x10	; 16
    b84e:	91 83       	std	Z+1, r25	; 0x01
    b850:	80 83       	st	Z, r24
	switch (game.current_level_index) {
    b852:	80 91 ce 0d 	lds	r24, 0x0DCE
    b856:	84 30       	cpi	r24, 0x04	; 4
    b858:	79 f0       	breq	.+30     	; 0xb878 <init_enemy_level_hazard+0x68>
    b85a:	38 f4       	brcc	.+14     	; 0xb86a <init_enemy_level_hazard+0x5a>
    b85c:	88 23       	and	r24, r24
    b85e:	91 f0       	breq	.+36     	; 0xb884 <init_enemy_level_hazard+0x74>
    b860:	82 30       	cpi	r24, 0x02	; 2
    b862:	81 f4       	brne	.+32     	; 0xb884 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
    b864:	81 e6       	ldi	r24, 0x61	; 97
    b866:	97 e3       	ldi	r25, 0x37	; 55
    b868:	0f c0       	rjmp	.+30     	; 0xb888 <init_enemy_level_hazard+0x78>
	game.enemies[i].shot_frame_count = 0;
	
	game.enemies[i].anim.anim_count = 1;
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
    b86a:	86 30       	cpi	r24, 0x06	; 6
    b86c:	41 f0       	breq	.+16     	; 0xb87e <init_enemy_level_hazard+0x6e>
    b86e:	88 30       	cpi	r24, 0x08	; 8
    b870:	49 f4       	brne	.+18     	; 0xb884 <init_enemy_level_hazard+0x74>
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
    b872:	88 e5       	ldi	r24, 0x58	; 88
    b874:	97 e3       	ldi	r25, 0x37	; 55
    b876:	08 c0       	rjmp	.+16     	; 0xb888 <init_enemy_level_hazard+0x78>
	game.enemies[i].anim.frames_per_anim = 1;
	game.enemies[i].anim.anims = hazard_anim;
	switch (game.current_level_index) {
		case 0: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
		case 2: game.enemies[i].anim.anims[0] = (char*)  map_hazard_fire; break;
		case 4: game.enemies[i].anim.anims[0] = (char*) map_hazard_jungle; break;
    b878:	8e e5       	ldi	r24, 0x5E	; 94
    b87a:	97 e3       	ldi	r25, 0x37	; 55
    b87c:	05 c0       	rjmp	.+10     	; 0xb888 <init_enemy_level_hazard+0x78>
		case 6: game.enemies[i].anim.anims[0] = (char*) map_hazard_city; break;
    b87e:	8b e5       	ldi	r24, 0x5B	; 91
    b880:	97 e3       	ldi	r25, 0x37	; 55
    b882:	02 c0       	rjmp	.+4      	; 0xb888 <init_enemy_level_hazard+0x78>
		case 8: game.enemies[i].anim.anims[0] = (char*) map_hazard_desert; break;
		default: game.enemies[i].anim.anims[0] = (char*) map_hazard_ice; break;
    b884:	84 e6       	ldi	r24, 0x64	; 100
    b886:	97 e3       	ldi	r25, 0x37	; 55
    b888:	90 93 59 10 	sts	0x1059, r25
    b88c:	80 93 58 10 	sts	0x1058, r24
	}
	game.enemies[i].shared.gravity = 0;
    b890:	25 e3       	ldi	r18, 0x35	; 53
    b892:	2a 9f       	mul	r18, r26
    b894:	c0 01       	movw	r24, r0
    b896:	2b 9f       	mul	r18, r27
    b898:	90 0d       	add	r25, r0
    b89a:	11 24       	eor	r1, r1
    b89c:	87 54       	subi	r24, 0x47	; 71
    b89e:	92 4f       	sbci	r25, 0xF2	; 242
    b8a0:	fc 01       	movw	r30, r24
    b8a2:	e4 5e       	subi	r30, 0xE4	; 228
    b8a4:	fe 4f       	sbci	r31, 0xFE	; 254
    b8a6:	10 82       	st	Z, r1
	game.enemies[i].shared.vy = HAZARD_SPEED;
    b8a8:	32 97       	sbiw	r30, 0x02	; 2
    b8aa:	2e e1       	ldi	r18, 0x1E	; 30
    b8ac:	20 83       	st	Z, r18
	game.enemies[i].shared.vx = 0;
    b8ae:	31 96       	adiw	r30, 0x01	; 1
    b8b0:	10 82       	st	Z, r1
	game.enemies[i].shared.x = x;
    b8b2:	35 97       	sbiw	r30, 0x05	; 5
    b8b4:	71 83       	std	Z+1, r23	; 0x01
    b8b6:	60 83       	st	Z, r22
	game.enemies[i].shared.y = y;
    b8b8:	32 96       	adiw	r30, 0x02	; 2
    b8ba:	51 83       	std	Z+1, r21	; 0x01
    b8bc:	40 83       	st	Z, r20
	
	game.enemies[i].origin_tile = y / 8;
    b8be:	3d 96       	adiw	r30, 0x0d	; 13
    b8c0:	83 e0       	ldi	r24, 0x03	; 3
    b8c2:	56 95       	lsr	r21
    b8c4:	47 95       	ror	r20
    b8c6:	8a 95       	dec	r24
    b8c8:	e1 f7       	brne	.-8      	; 0xb8c2 <init_enemy_level_hazard+0xb2>
    b8ca:	40 83       	st	Z, r20
    b8cc:	08 95       	ret

0000b8ce <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b8ce:	cf 93       	push	r28
    b8d0:	df 93       	push	r29
    b8d2:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b8d4:	bc 01       	movw	r22, r24
    b8d6:	88 81       	ld	r24, Y
    b8d8:	99 81       	ldd	r25, Y+1	; 0x01
    b8da:	0e 94 8e 43 	call	0x871c	; 0x871c <EepromReadBlock>
	if (status == 0x03)
    b8de:	83 30       	cpi	r24, 0x03	; 3
    b8e0:	29 f4       	brne	.+10     	; 0xb8ec <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b8e2:	ce 01       	movw	r24, r28
	}
}
    b8e4:	df 91       	pop	r29
    b8e6:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b8e8:	0c 94 44 43 	jmp	0x8688	; 0x8688 <EepromWriteBlock>
	}
}
    b8ec:	df 91       	pop	r29
    b8ee:	cf 91       	pop	r28
    b8f0:	08 95       	ret

0000b8f2 <clear_overlay>:
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b8f2:	1f 93       	push	r17
    b8f4:	cf 93       	push	r28
    b8f6:	df 93       	push	r29
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b8f8:	d0 e0       	ldi	r29, 0x00	; 0
    b8fa:	10 e2       	ldi	r17, 0x20	; 32
    b8fc:	18 0f       	add	r17, r24
{
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
    b8fe:	c0 e2       	ldi	r28, 0x20	; 32
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
	{
		for(u8 y = 0; y < overlayHeight; y++)
    b900:	c1 17       	cp	r28, r17
    b902:	41 f0       	breq	.+16     	; 0xb914 <clear_overlay+0x22>
		{
			SetTile(x, VRAM_TILES_V+y, 0);
    b904:	40 e0       	ldi	r20, 0x00	; 0
    b906:	50 e0       	ldi	r21, 0x00	; 0
    b908:	6c 2f       	mov	r22, r28
    b90a:	8d 2f       	mov	r24, r29
    b90c:	0e 94 d3 41 	call	0x83a6	; 0x83a6 <SetTile>
    b910:	cf 5f       	subi	r28, 0xFF	; 255
    b912:	f6 cf       	rjmp	.-20     	; 0xb900 <clear_overlay+0xe>
	SetTile(x, y, level_tile);
}

void clear_overlay(u8 overlayHeight)
{
	for(u8 x = 0; x < CAMERA_WIDTH; x++)
    b914:	df 5f       	subi	r29, 0xFF	; 255
    b916:	dc 31       	cpi	r29, 0x1C	; 28
    b918:	91 f7       	brne	.-28     	; 0xb8fe <clear_overlay+0xc>
		for(u8 y = 0; y < overlayHeight; y++)
		{
			SetTile(x, VRAM_TILES_V+y, 0);
		}
	}
}
    b91a:	df 91       	pop	r29
    b91c:	cf 91       	pop	r28
    b91e:	1f 91       	pop	r17
    b920:	08 95       	ret

0000b922 <get_level_tile>:
{
	return 21;
}

u8 get_level_tile(char* level_data, u8 x, u8 y)
{
    b922:	dc 01       	movw	r26, r24
    b924:	e6 2f       	mov	r30, r22
    b926:	84 2f       	mov	r24, r20
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    b928:	25 e0       	ldi	r18, 0x05	; 5
    b92a:	62 2f       	mov	r22, r18
    b92c:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    b930:	58 2f       	mov	r21, r24
    b932:	39 2f       	mov	r19, r25
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b934:	40 91 cf 0d 	lds	r20, 0x0DCF
	u16 mega_tile_index = 0;
	u16 mega_tile_offset = 0;
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    b938:	8e 2f       	mov	r24, r30
    b93a:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
    b93e:	e8 2f       	mov	r30, r24
    b940:	f0 e0       	ldi	r31, 0x00	; 0
    b942:	54 9f       	mul	r21, r20
    b944:	e0 0d       	add	r30, r0
    b946:	f1 1d       	adc	r31, r1
    b948:	11 24       	eor	r1, r1
    b94a:	32 96       	adiw	r30, 0x02	; 2
    b94c:	ea 0f       	add	r30, r26
    b94e:	fb 1f       	adc	r31, r27
    b950:	84 91       	lpm	r24, Z
	u8 map_x = 0;
	u8 map_y = 0;
	
	map_x = x / MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	map_y = y / MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	mega_tile_offset = (y % MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT)*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH + (x % MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH);
    b952:	e9 2f       	mov	r30, r25
    b954:	f0 e0       	ldi	r31, 0x00	; 0
    b956:	95 e0       	ldi	r25, 0x05	; 5
    b958:	39 9f       	mul	r19, r25
    b95a:	e0 0d       	add	r30, r0
    b95c:	f1 1d       	adc	r31, r1
    b95e:	11 24       	eor	r1, r1
	mega_tile_index = pgm_read_byte(2+(&level_data[map_y*game.raw_level_width + map_x]));
	mega_tile_index *= MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
	return pgm_read_byte(&map_level_mega_tiles[mega_tile_index+mega_tile_offset]);
    b960:	99 e1       	ldi	r25, 0x19	; 25
    b962:	89 9f       	mul	r24, r25
    b964:	e0 0d       	add	r30, r0
    b966:	f1 1d       	adc	r31, r1
    b968:	11 24       	eor	r1, r1
    b96a:	e0 56       	subi	r30, 0x60	; 96
    b96c:	fe 49       	sbci	r31, 0x9E	; 158
    b96e:	84 91       	lpm	r24, Z
}
    b970:	08 95       	ret

0000b972 <render_camera_view>:

void render_camera_view()
{
    b972:	7f 92       	push	r7
    b974:	8f 92       	push	r8
    b976:	9f 92       	push	r9
    b978:	af 92       	push	r10
    b97a:	bf 92       	push	r11
    b97c:	cf 92       	push	r12
    b97e:	df 92       	push	r13
    b980:	ef 92       	push	r14
    b982:	ff 92       	push	r15
    b984:	0f 93       	push	r16
    b986:	1f 93       	push	r17
    b988:	cf 93       	push	r28
    b98a:	df 93       	push	r29
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
    b98c:	c0 91 b9 0d 	lds	r28, 0x0DB9
    b990:	d0 91 ba 0d 	lds	r29, 0x0DBA
    b994:	83 e0       	ldi	r24, 0x03	; 3
    b996:	d6 95       	lsr	r29
    b998:	c7 95       	ror	r28
    b99a:	8a 95       	dec	r24
    b99c:	e1 f7       	brne	.-8      	; 0xb996 <render_camera_view+0x24>
    b99e:	7c 2e       	mov	r7, r28
	u8 camera_y_tile = game.camera_y/8;
    b9a0:	00 91 c1 0d 	lds	r16, 0x0DC1
    b9a4:	06 95       	lsr	r16
    b9a6:	06 95       	lsr	r16
    b9a8:	06 95       	lsr	r16
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b9aa:	dd 27       	eor	r29, r29
    b9ac:	7e 01       	movw	r14, r28
    b9ae:	4c e1       	ldi	r20, 0x1C	; 28
    b9b0:	e4 0e       	add	r14, r20
    b9b2:	f1 1c       	adc	r15, r1
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b9b4:	10 e0       	ldi	r17, 0x00	; 0
    b9b6:	68 01       	movw	r12, r16
    b9b8:	89 e1       	ldi	r24, 0x19	; 25
    b9ba:	c8 0e       	add	r12, r24
    b9bc:	d1 1c       	adc	r13, r1
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b9be:	9e e1       	ldi	r25, 0x1E	; 30
    b9c0:	a9 2e       	mov	r10, r25
    b9c2:	b1 2c       	mov	r11, r1
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    b9c4:	ec 16       	cp	r14, r28
    b9c6:	fd 06       	cpc	r15, r29
    b9c8:	70 f1       	brcs	.+92     	; 0xba26 <render_camera_view+0xb4>
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    b9ca:	48 01       	movw	r8, r16
    b9cc:	c8 14       	cp	r12, r8
    b9ce:	d9 04       	cpc	r13, r9
    b9d0:	40 f1       	brcs	.+80     	; 0xba22 <render_camera_view+0xb0>
		{
			level_tile = get_level_tile(game.current_level, x, y);
    b9d2:	48 2d       	mov	r20, r8
    b9d4:	6c 2f       	mov	r22, r28
    b9d6:	80 91 d8 0f 	lds	r24, 0x0FD8
    b9da:	90 91 d9 0f 	lds	r25, 0x0FD9
    b9de:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    b9e2:	28 2f       	mov	r18, r24
    b9e4:	30 e0       	ldi	r19, 0x00	; 0
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
    b9e6:	80 91 b3 0c 	lds	r24, 0x0CB3
    b9ea:	86 95       	lsr	r24
    b9ec:	86 95       	lsr	r24
    b9ee:	86 95       	lsr	r24
    b9f0:	90 e0       	ldi	r25, 0x00	; 0
    b9f2:	80 1b       	sub	r24, r16
    b9f4:	91 0b       	sbc	r25, r17
    b9f6:	88 0d       	add	r24, r8
    b9f8:	99 1d       	adc	r25, r9
    b9fa:	b5 01       	movw	r22, r10
    b9fc:	0e 94 e2 75 	call	0xebc4	; 0xebc4 <__udivmodhi4>
    ba00:	90 91 b2 0c 	lds	r25, 0x0CB2
    ba04:	96 95       	lsr	r25
    ba06:	96 95       	lsr	r25
    ba08:	96 95       	lsr	r25
    ba0a:	97 19       	sub	r25, r7
    ba0c:	9c 0f       	add	r25, r28
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    ba0e:	a9 01       	movw	r20, r18
    ba10:	68 2f       	mov	r22, r24
    ba12:	89 2f       	mov	r24, r25
    ba14:	8f 71       	andi	r24, 0x1F	; 31
    ba16:	0e 94 d3 41 	call	0x83a6	; 0x83a6 <SetTile>
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
	{
		for (u16 y = camera_y_tile; y <= camera_y_tile + CAMERA_HEIGHT; y++)
    ba1a:	8f ef       	ldi	r24, 0xFF	; 255
    ba1c:	88 1a       	sub	r8, r24
    ba1e:	98 0a       	sbc	r9, r24
    ba20:	d5 cf       	rjmp	.-86     	; 0xb9cc <render_camera_view+0x5a>
{
	u8 level_tile;
	u8 camara_x_tile = game.camera_x/8;
	u8 camera_y_tile = game.camera_y/8;
	
	for (u16 x = camara_x_tile; x <= camara_x_tile + CAMERA_WIDTH; x++)
    ba22:	21 96       	adiw	r28, 0x01	; 1
    ba24:	cf cf       	rjmp	.-98     	; 0xb9c4 <render_camera_view+0x52>
		{
			level_tile = get_level_tile(game.current_level, x, y);
			render_level_tile(level_tile, (Screen.scrollX / 8 + x - camara_x_tile) % 32, (Screen.scrollY / 8 + y - camera_y_tile) % 30);
		}
	}
}
    ba26:	df 91       	pop	r29
    ba28:	cf 91       	pop	r28
    ba2a:	1f 91       	pop	r17
    ba2c:	0f 91       	pop	r16
    ba2e:	ff 90       	pop	r15
    ba30:	ef 90       	pop	r14
    ba32:	df 90       	pop	r13
    ba34:	cf 90       	pop	r12
    ba36:	bf 90       	pop	r11
    ba38:	af 90       	pop	r10
    ba3a:	9f 90       	pop	r9
    ba3c:	8f 90       	pop	r8
    ba3e:	7f 90       	pop	r7
    ba40:	08 95       	ret

0000ba42 <init_level_enemy>:

void init_level_enemy(u8 i, u16 x, u16 y)
{
    ba42:	28 2f       	mov	r18, r24
    ba44:	fb 01       	movw	r30, r22
	if (game.current_level_index == 0)
    ba46:	80 91 ce 0d 	lds	r24, 0x0DCE
    ba4a:	81 11       	cpse	r24, r1
    ba4c:	04 c0       	rjmp	.+8      	; 0xba56 <init_level_enemy+0x14>
	{
		init_enemy_turret(i, x, y);
    ba4e:	bf 01       	movw	r22, r30
    ba50:	82 2f       	mov	r24, r18
    ba52:	0c 94 d0 59 	jmp	0xb3a0	; 0xb3a0 <init_enemy_turret>
	}
	else if (game.current_level_index == 2)
    ba56:	82 30       	cpi	r24, 0x02	; 2
    ba58:	21 f4       	brne	.+8      	; 0xba62 <init_level_enemy+0x20>
	{
		init_enemy_spider(i, x, y);
    ba5a:	bf 01       	movw	r22, r30
    ba5c:	82 2f       	mov	r24, r18
    ba5e:	0c 94 8e 59 	jmp	0xb31c	; 0xb31c <init_enemy_spider>
	}
	else if (game.current_level_index == 4)
    ba62:	84 30       	cpi	r24, 0x04	; 4
    ba64:	31 f4       	brne	.+12     	; 0xba72 <init_level_enemy+0x30>
	{
		init_enemy_drone(i, x, y-5*8);
    ba66:	48 52       	subi	r20, 0x28	; 40
    ba68:	51 09       	sbc	r21, r1
    ba6a:	bf 01       	movw	r22, r30
    ba6c:	82 2f       	mov	r24, r18
    ba6e:	0c 94 0d 5a 	jmp	0xb41a	; 0xb41a <init_enemy_drone>
	}
	else if (game.frame_counter % 3 == 0)
    ba72:	80 91 d3 0d 	lds	r24, 0x0DD3
    ba76:	63 e0       	ldi	r22, 0x03	; 3
    ba78:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    ba7c:	99 23       	and	r25, r25
    ba7e:	39 f3       	breq	.-50     	; 0xba4e <init_level_enemy+0xc>
	{
		init_enemy_turret(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    ba80:	91 30       	cpi	r25, 0x01	; 1
    ba82:	89 f7       	brne	.-30     	; 0xba66 <init_level_enemy+0x24>
    ba84:	ea cf       	rjmp	.-44     	; 0xba5a <init_level_enemy+0x18>

0000ba86 <init_space_enemy>:
		init_enemy_drone(i, x, y-5*8);
	}
}

void init_space_enemy(u8 i, u16 x, u16 y)
{
    ba86:	28 2f       	mov	r18, r24
    ba88:	fb 01       	movw	r30, r22
	if (game.current_level_index == 1)
    ba8a:	80 91 ce 0d 	lds	r24, 0x0DCE
    ba8e:	81 30       	cpi	r24, 0x01	; 1
    ba90:	21 f4       	brne	.+8      	; 0xba9a <init_space_enemy+0x14>
	{
		init_enemy_shark(i, x, y);
    ba92:	bf 01       	movw	r22, r30
    ba94:	82 2f       	mov	r24, r18
    ba96:	0c 94 4b 5a 	jmp	0xb496	; 0xb496 <init_enemy_shark>
	}
	else if (game.current_level_index == 3)
    ba9a:	83 30       	cpi	r24, 0x03	; 3
    ba9c:	21 f4       	brne	.+8      	; 0xbaa6 <init_space_enemy+0x20>
	{
		init_enemy_globe(i, x, y);
    ba9e:	bf 01       	movw	r22, r30
    baa0:	82 2f       	mov	r24, r18
    baa2:	0c 94 86 5a 	jmp	0xb50c	; 0xb50c <init_enemy_globe>
	}
	else if (game.current_level_index == 5)
    baa6:	85 30       	cpi	r24, 0x05	; 5
    baa8:	21 f4       	brne	.+8      	; 0xbab2 <init_space_enemy+0x2c>
	{
		init_enemy_xwing(i, x, y);
    baaa:	bf 01       	movw	r22, r30
    baac:	82 2f       	mov	r24, r18
    baae:	0c 94 c2 5a 	jmp	0xb584	; 0xb584 <init_enemy_xwing>
	}
	else if (game.frame_counter % 3 == 0)
    bab2:	80 91 d3 0d 	lds	r24, 0x0DD3
    bab6:	63 e0       	ldi	r22, 0x03	; 3
    bab8:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    babc:	99 23       	and	r25, r25
    babe:	49 f3       	breq	.-46     	; 0xba92 <init_space_enemy+0xc>
	{
		init_enemy_shark(i, x, y);
	}
	else if (game.frame_counter % 3 == 1)
    bac0:	91 30       	cpi	r25, 0x01	; 1
    bac2:	99 f7       	brne	.-26     	; 0xbaaa <init_space_enemy+0x24>
    bac4:	ec cf       	rjmp	.-40     	; 0xba9e <init_space_enemy+0x18>

0000bac6 <spawn_enemy>:
		init_enemy_xwing(i, x, y);
	}
}

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
    bac6:	0f 93       	push	r16
    bac8:	1f 93       	push	r17
    baca:	cf 93       	push	r28
    bacc:	df 93       	push	r29
    bace:	00 d0       	rcall	.+0      	; 0xbad0 <spawn_enemy+0xa>
    bad0:	00 d0       	rcall	.+0      	; 0xbad2 <spawn_enemy+0xc>
    bad2:	cd b7       	in	r28, 0x3d	; 61
    bad4:	de b7       	in	r29, 0x3e	; 62
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
    bad6:	20 91 b9 0d 	lds	r18, 0x0DB9
    bada:	30 91 ba 0d 	lds	r19, 0x0DBA
    bade:	28 3c       	cpi	r18, 0xC8	; 200
    bae0:	35 40       	sbci	r19, 0x05	; 5
    bae2:	98 f5       	brcc	.+102    	; 0xbb4a <spawn_enemy+0x84>
    bae4:	29 eb       	ldi	r18, 0xB9	; 185
    bae6:	3d e0       	ldi	r19, 0x0D	; 13
    bae8:	10 e0       	ldi	r17, 0x00	; 0
    baea:	f9 01       	movw	r30, r18
    baec:	e3 5e       	subi	r30, 0xE3	; 227
    baee:	fe 4f       	sbci	r31, 0xFE	; 254
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
		{
			if (!game.enemies[i].active)
    baf0:	50 81       	ld	r21, Z
    baf2:	51 11       	cpse	r21, r1
    baf4:	25 c0       	rjmp	.+74     	; 0xbb40 <spawn_enemy+0x7a>
    baf6:	73 96       	adiw	r30, 0x13	; 19
			{
				for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
				{
					if (!game.enemies[i].shot[j].active)
    baf8:	50 81       	ld	r21, Z
    bafa:	51 11       	cpse	r21, r1
    bafc:	21 c0       	rjmp	.+66     	; 0xbb40 <spawn_enemy+0x7a>
    bafe:	04 2f       	mov	r16, r20
    bb00:	ab 01       	movw	r20, r22
    bb02:	bc 01       	movw	r22, r24
					{
						if (is_space())
    bb04:	4b 83       	std	Y+3, r20	; 0x03
    bb06:	5c 83       	std	Y+4, r21	; 0x04
    bb08:	89 83       	std	Y+1, r24	; 0x01
    bb0a:	7a 83       	std	Y+2, r23	; 0x02
    bb0c:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    bb10:	4b 81       	ldd	r20, Y+3	; 0x03
    bb12:	5c 81       	ldd	r21, Y+4	; 0x04
    bb14:	69 81       	ldd	r22, Y+1	; 0x01
    bb16:	7a 81       	ldd	r23, Y+2	; 0x02
    bb18:	88 23       	and	r24, r24
    bb1a:	21 f0       	breq	.+8      	; 0xbb24 <spawn_enemy+0x5e>
						{
							init_space_enemy(i, x, y);
    bb1c:	81 2f       	mov	r24, r17
    bb1e:	0e 94 43 5d 	call	0xba86	; 0xba86 <init_space_enemy>
    bb22:	08 c0       	rjmp	.+16     	; 0xbb34 <spawn_enemy+0x6e>
						}
						else if (!level_hazard)
						{
							init_level_enemy(i, x, y);
    bb24:	81 2f       	mov	r24, r17
					{
						if (is_space())
						{
							init_space_enemy(i, x, y);
						}
						else if (!level_hazard)
    bb26:	01 11       	cpse	r16, r1
    bb28:	03 c0       	rjmp	.+6      	; 0xbb30 <spawn_enemy+0x6a>
						{
							init_level_enemy(i, x, y);
    bb2a:	0e 94 21 5d 	call	0xba42	; 0xba42 <init_level_enemy>
    bb2e:	02 c0       	rjmp	.+4      	; 0xbb34 <spawn_enemy+0x6e>
						}
						else
						{
							init_enemy_level_hazard(i, x, y);
    bb30:	0e 94 08 5c 	call	0xb810	; 0xb810 <init_enemy_level_hazard>
						}
						game.active_enemies++;
    bb34:	80 91 d4 0d 	lds	r24, 0x0DD4
    bb38:	8f 5f       	subi	r24, 0xFF	; 255
    bb3a:	80 93 d4 0d 	sts	0x0DD4, r24
    bb3e:	05 c0       	rjmp	.+10     	; 0xbb4a <spawn_enemy+0x84>

void spawn_enemy(u16 x, u16 y, u8 level_hazard)
{
	if (game.camera_x < ENEMY_SPAWN_CUTOFF)
	{
		for (u8 i = 0; i < MAX_ENEMIES; i++)
    bb40:	1f 5f       	subi	r17, 0xFF	; 255
    bb42:	2b 5c       	subi	r18, 0xCB	; 203
    bb44:	3f 4f       	sbci	r19, 0xFF	; 255
    bb46:	15 30       	cpi	r17, 0x05	; 5
    bb48:	81 f6       	brne	.-96     	; 0xbaea <spawn_enemy+0x24>
					}
				}
			}
		}
	}
}
    bb4a:	0f 90       	pop	r0
    bb4c:	0f 90       	pop	r0
    bb4e:	0f 90       	pop	r0
    bb50:	0f 90       	pop	r0
    bb52:	df 91       	pop	r29
    bb54:	cf 91       	pop	r28
    bb56:	1f 91       	pop	r17
    bb58:	0f 91       	pop	r16
    bb5a:	08 95       	ret

0000bb5c <solid_or_hazard_tile>:
	return 0;
}

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    bb5c:	9f ef       	ldi	r25, 0xFF	; 255
    bb5e:	98 0f       	add	r25, r24
    bb60:	9e 30       	cpi	r25, 0x0E	; 14
    bb62:	28 f0       	brcs	.+10     	; 0xbb6e <solid_or_hazard_tile+0x12>
	{
		return 1;
	}
	if (level_tile >= 15 && level_tile <= 26)
    bb64:	8f 50       	subi	r24, 0x0F	; 15
    bb66:	8c 30       	cpi	r24, 0x0C	; 12
    bb68:	20 f0       	brcs	.+8      	; 0xbb72 <solid_or_hazard_tile+0x16>
	{
		return 2;
	}
	return 0;
    bb6a:	80 e0       	ldi	r24, 0x00	; 0
    bb6c:	08 95       	ret

u8 solid_or_hazard_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
	{
		return 1;
    bb6e:	81 e0       	ldi	r24, 0x01	; 1
    bb70:	08 95       	ret
	}
	if (level_tile >= 15 && level_tile <= 26)
	{
		return 2;
    bb72:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 0;
}
    bb74:	08 95       	ret

0000bb76 <append_tile_column>:
	}
	return 0;
}

void append_tile_column()
{
    bb76:	af 92       	push	r10
    bb78:	bf 92       	push	r11
    bb7a:	cf 92       	push	r12
    bb7c:	df 92       	push	r13
    bb7e:	ef 92       	push	r14
    bb80:	ff 92       	push	r15
    bb82:	0f 93       	push	r16
    bb84:	1f 93       	push	r17
    bb86:	cf 93       	push	r28
    bb88:	df 93       	push	r29
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    bb8a:	66 e1       	ldi	r22, 0x16	; 22
    bb8c:	82 e0       	ldi	r24, 0x02	; 2
    bb8e:	0e 94 ce 52 	call	0xa59c	; 0xa59c <LBRandom>
    bb92:	f8 2e       	mov	r15, r24
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
	
	game.column_count++;
    bb94:	80 91 ca 0d 	lds	r24, 0x0DCA
    bb98:	8f 5f       	subi	r24, 0xFF	; 255
    bb9a:	80 93 ca 0d 	sts	0x0DCA, r24
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
    bb9e:	20 91 d5 0d 	lds	r18, 0x0DD5
    bba2:	62 2f       	mov	r22, r18
    bba4:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    bba8:	89 2f       	mov	r24, r25
    bbaa:	90 e0       	ldi	r25, 0x00	; 0
    bbac:	30 e0       	ldi	r19, 0x00	; 0
    bbae:	21 50       	subi	r18, 0x01	; 1
    bbb0:	31 09       	sbc	r19, r1
    bbb2:	82 17       	cp	r24, r18
    bbb4:	93 07       	cpc	r25, r19
    bbb6:	31 f4       	brne	.+12     	; 0xbbc4 <append_tile_column+0x4e>
    bbb8:	bb 24       	eor	r11, r11
    bbba:	b3 94       	inc	r11
    bbbc:	80 91 d4 0d 	lds	r24, 0x0DD4
    bbc0:	85 30       	cpi	r24, 0x05	; 5
    bbc2:	08 f0       	brcs	.+2      	; 0xbbc6 <append_tile_column+0x50>
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
	u8 do_spawn = 0;
    bbc4:	b1 2c       	mov	r11, r1
    bbc6:	00 e0       	ldi	r16, 0x00	; 0
    bbc8:	10 e0       	ldi	r17, 0x00	; 0
void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
	u8 solid_tile_index = 0;
    bbca:	d0 e0       	ldi	r29, 0x00	; 0

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
	u8 hazard_tile_index = 0;
    bbcc:	c0 e0       	ldi	r28, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    bbce:	2e e1       	ldi	r18, 0x1E	; 30
    bbd0:	c2 2e       	mov	r12, r18
    bbd2:	d1 2c       	mov	r13, r1
    bbd4:	a0 2e       	mov	r10, r16
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
    bbd6:	40 91 c1 0d 	lds	r20, 0x0DC1
    bbda:	46 95       	lsr	r20
    bbdc:	46 95       	lsr	r20
    bbde:	46 95       	lsr	r20
    bbe0:	40 0f       	add	r20, r16
    bbe2:	60 91 c2 0d 	lds	r22, 0x0DC2
    bbe6:	80 91 d8 0f 	lds	r24, 0x0FD8
    bbea:	90 91 d9 0f 	lds	r25, 0x0FD9
    bbee:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    bbf2:	e8 2e       	mov	r14, r24
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    bbf4:	28 2f       	mov	r18, r24
    bbf6:	30 e0       	ldi	r19, 0x00	; 0
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
    bbf8:	80 91 b3 0c 	lds	r24, 0x0CB3
    bbfc:	86 95       	lsr	r24
    bbfe:	86 95       	lsr	r24
    bc00:	86 95       	lsr	r24
    bc02:	a8 01       	movw	r20, r16
    bc04:	48 0f       	add	r20, r24
    bc06:	51 1d       	adc	r21, r1
    bc08:	ca 01       	movw	r24, r20
    bc0a:	b6 01       	movw	r22, r12
    bc0c:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
	FadeIn(FRAMES_PER_FADE, false);
}

void render_level_tile(u8 level_tile, u8 x, u8 y)
{
	SetTile(x, y, level_tile);
    bc10:	a9 01       	movw	r20, r18
    bc12:	68 2f       	mov	r22, r24
    bc14:	80 91 c6 0d 	lds	r24, 0x0DC6
    bc18:	0e 94 d3 41 	call	0x83a6	; 0x83a6 <SetTile>
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
    bc1c:	bb 20       	and	r11, r11
    bc1e:	81 f0       	breq	.+32     	; 0xbc40 <append_tile_column+0xca>
    bc20:	01 15       	cp	r16, r1
    bc22:	11 05       	cpc	r17, r1
    bc24:	69 f0       	breq	.+26     	; 0xbc40 <append_tile_column+0xca>
	return 0;
}

u8 hazard_projectile_tile(u8 level_tile)
{
	if (level_tile >= 15 && level_tile <= 19)
    bc26:	81 ef       	ldi	r24, 0xF1	; 241
    bc28:	8e 0d       	add	r24, r14
    bc2a:	85 30       	cpi	r24, 0x05	; 5
    bc2c:	30 f0       	brcs	.+12     	; 0xbc3a <append_tile_column+0xc4>
	}
}

u8 solid_tile(u8 level_tile)
{
	if (level_tile >= 1 && level_tile <= 14)
    bc2e:	8f ef       	ldi	r24, 0xFF	; 255
    bc30:	8e 0d       	add	r24, r14
    bc32:	8e 30       	cpi	r24, 0x0E	; 14
    bc34:	08 f4       	brcc	.+2      	; 0xbc38 <append_tile_column+0xc2>
    bc36:	60 c0       	rjmp	.+192    	; 0xbcf8 <append_tile_column+0x182>
    bc38:	03 c0       	rjmp	.+6      	; 0xbc40 <append_tile_column+0xca>
	{
		level_tile = get_level_tile(game.current_level, game.scroll_src_x, y + game.camera_y / 8);
		render_level_tile(level_tile, game.scroll_dest_x, (y + Screen.scrollY / 8) % 30);
		if (do_spawn && y > 0)
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
    bc3a:	c1 11       	cpse	r28, r1
    bc3c:	f8 cf       	rjmp	.-16     	; 0xbc2e <append_tile_column+0xb8>
    bc3e:	c0 2f       	mov	r28, r16
    bc40:	0f 5f       	subi	r16, 0xFF	; 255
    bc42:	1f 4f       	sbci	r17, 0xFF	; 255
	game.column_count++;
	if (game.column_count % game.spawn_rate == game.spawn_rate - 1 && game.active_enemies < MAX_ENEMIES)
	{
		do_spawn = 1;
	}
    for (u8 y = 0; y < CAMERA_HEIGHT; y++)
    bc44:	09 31       	cpi	r16, 0x19	; 25
    bc46:	11 05       	cpc	r17, r1
    bc48:	29 f6       	brne	.-118    	; 0xbbd4 <append_tile_column+0x5e>
			{
				solid_tile_index = y;
			}
		}
    }
	if (do_spawn && is_space())
    bc4a:	bb 20       	and	r11, r11
    bc4c:	51 f0       	breq	.+20     	; 0xbc62 <append_tile_column+0xec>
    bc4e:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    bc52:	88 23       	and	r24, r24
    bc54:	31 f0       	breq	.+12     	; 0xbc62 <append_tile_column+0xec>
}

void append_tile_column()
{
	u8 level_tile;
	u8 rndom = LBRandom(2, CAMERA_HEIGHT-3)*8;
    bc56:	ff 0c       	add	r15, r15
    bc58:	ff 0c       	add	r15, r15
    bc5a:	ff 0c       	add	r15, r15
			}
		}
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
    bc5c:	6f 2d       	mov	r22, r15
    bc5e:	70 e0       	ldi	r23, 0x00	; 0
    bc60:	32 c0       	rjmp	.+100    	; 0xbcc6 <append_tile_column+0x150>
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    bc62:	cc 23       	and	r28, r28
    bc64:	f1 f0       	breq	.+60     	; 0xbca2 <append_tile_column+0x12c>
    bc66:	80 91 ce 0d 	lds	r24, 0x0DCE
    bc6a:	90 91 c1 0d 	lds	r25, 0x0DC1
    bc6e:	20 91 b9 0d 	lds	r18, 0x0DB9
    bc72:	30 91 ba 0d 	lds	r19, 0x0DBA
    bc76:	6c 2f       	mov	r22, r28
    bc78:	70 e0       	ldi	r23, 0x00	; 0
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    bc7a:	96 95       	lsr	r25
    bc7c:	96 95       	lsr	r25
    bc7e:	96 95       	lsr	r25
    bc80:	69 0f       	add	r22, r25
    bc82:	71 1d       	adc	r23, r1
    }
	if (do_spawn && is_space())
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, rndom, 0);
	}
	else if (hazard_tile_index > 0 && game.current_level_index == 2)
    bc84:	82 30       	cpi	r24, 0x02	; 2
    bc86:	19 f4       	brne	.+6      	; 0xbc8e <append_tile_column+0x118>
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index - 1)*8, 1);
    bc88:	61 50       	subi	r22, 0x01	; 1
    bc8a:	71 09       	sbc	r23, r1
    bc8c:	02 c0       	rjmp	.+4      	; 0xbc92 <append_tile_column+0x11c>
	}
	else if (hazard_tile_index > 0)
	{
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + hazard_tile_index + 1)*8, 1);
    bc8e:	6f 5f       	subi	r22, 0xFF	; 255
    bc90:	7f 4f       	sbci	r23, 0xFF	; 255
    bc92:	93 e0       	ldi	r25, 0x03	; 3
    bc94:	66 0f       	add	r22, r22
    bc96:	77 1f       	adc	r23, r23
    bc98:	9a 95       	dec	r25
    bc9a:	e1 f7       	brne	.-8      	; 0xbc94 <append_tile_column+0x11e>
    bc9c:	41 e0       	ldi	r20, 0x01	; 1
    bc9e:	c9 01       	movw	r24, r18
    bca0:	17 c0       	rjmp	.+46     	; 0xbcd0 <append_tile_column+0x15a>
	}
	else if (solid_tile_index > 0) {
    bca2:	dd 23       	and	r29, r29
    bca4:	c9 f0       	breq	.+50     	; 0xbcd8 <append_tile_column+0x162>
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
    bca6:	80 91 c1 0d 	lds	r24, 0x0DC1
    bcaa:	86 95       	lsr	r24
    bcac:	86 95       	lsr	r24
    bcae:	86 95       	lsr	r24
    bcb0:	6d 2f       	mov	r22, r29
    bcb2:	70 e0       	ldi	r23, 0x00	; 0
    bcb4:	68 0f       	add	r22, r24
    bcb6:	71 1d       	adc	r23, r1
    bcb8:	61 50       	subi	r22, 0x01	; 1
    bcba:	71 09       	sbc	r23, r1
    bcbc:	83 e0       	ldi	r24, 0x03	; 3
    bcbe:	66 0f       	add	r22, r22
    bcc0:	77 1f       	adc	r23, r23
    bcc2:	8a 95       	dec	r24
    bcc4:	e1 f7       	brne	.-8      	; 0xbcbe <append_tile_column+0x148>
    bcc6:	80 91 b9 0d 	lds	r24, 0x0DB9
    bcca:	90 91 ba 0d 	lds	r25, 0x0DBA
    bcce:	40 e0       	ldi	r20, 0x00	; 0
    bcd0:	80 52       	subi	r24, 0x20	; 32
    bcd2:	9f 4f       	sbci	r25, 0xFF	; 255
    bcd4:	0e 94 63 5d 	call	0xbac6	; 0xbac6 <spawn_enemy>
	}
	
    game.scroll_src_x++;
    bcd8:	80 91 c2 0d 	lds	r24, 0x0DC2
    bcdc:	8f 5f       	subi	r24, 0xFF	; 255
    bcde:	80 93 c2 0d 	sts	0x0DC2, r24
	game.scroll_dest_x++;
    bce2:	80 91 c6 0d 	lds	r24, 0x0DC6
    bce6:	8f 5f       	subi	r24, 0xFF	; 255
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    bce8:	80 32       	cpi	r24, 0x20	; 32
    bcea:	18 f4       	brcc	.+6      	; 0xbcf2 <append_tile_column+0x17c>
	else if (solid_tile_index > 0) {
		spawn_enemy(game.camera_x+CAMERA_WIDTH*8, (game.camera_y / 8 + solid_tile_index - 1)*8, 0);
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    bcec:	80 93 c6 0d 	sts	0x0DC6, r24
    bcf0:	07 c0       	rjmp	.+14     	; 0xbd00 <append_tile_column+0x18a>
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
    bcf2:	10 92 c6 0d 	sts	0x0DC6, r1
    bcf6:	04 c0       	rjmp	.+8      	; 0xbd00 <append_tile_column+0x18a>
		{
			if (hazard_projectile_tile(level_tile) && hazard_tile_index == 0)
			{
				hazard_tile_index = y;
			}
			else if (solid_tile(level_tile) && solid_tile_index == 0)
    bcf8:	d1 11       	cpse	r29, r1
    bcfa:	a2 cf       	rjmp	.-188    	; 0xbc40 <append_tile_column+0xca>
    bcfc:	da 2d       	mov	r29, r10
    bcfe:	a0 cf       	rjmp	.-192    	; 0xbc40 <append_tile_column+0xca>
	}
	
    game.scroll_src_x++;
	game.scroll_dest_x++;
    if(game.scroll_dest_x>=32)game.scroll_dest_x=0;
}
    bd00:	df 91       	pop	r29
    bd02:	cf 91       	pop	r28
    bd04:	1f 91       	pop	r17
    bd06:	0f 91       	pop	r16
    bd08:	ff 90       	pop	r15
    bd0a:	ef 90       	pop	r14
    bd0c:	df 90       	pop	r13
    bd0e:	cf 90       	pop	r12
    bd10:	bf 90       	pop	r11
    bd12:	af 90       	pop	r10
    bd14:	08 95       	ret

0000bd16 <move_camera_x>:

void move_camera_x()
{	
	game.camera_x++;
    bd16:	80 91 b9 0d 	lds	r24, 0x0DB9
    bd1a:	90 91 ba 0d 	lds	r25, 0x0DBA
    bd1e:	01 96       	adiw	r24, 0x01	; 1
    bd20:	90 93 ba 0d 	sts	0x0DBA, r25
    bd24:	80 93 b9 0d 	sts	0x0DB9, r24
	Scroll(1,0);
    bd28:	60 e0       	ldi	r22, 0x00	; 0
    bd2a:	81 e0       	ldi	r24, 0x01	; 1
    bd2c:	0e 94 28 50 	call	0xa050	; 0xa050 <Scroll>
	if (++game.scroll_x == 8)
    bd30:	80 91 c4 0d 	lds	r24, 0x0DC4
    bd34:	8f 5f       	subi	r24, 0xFF	; 255
    bd36:	88 30       	cpi	r24, 0x08	; 8
    bd38:	19 f0       	breq	.+6      	; 0xbd40 <move_camera_x+0x2a>
    bd3a:	80 93 c4 0d 	sts	0x0DC4, r24
    bd3e:	08 95       	ret
	{
		game.scroll_x = 0;
    bd40:	10 92 c4 0d 	sts	0x0DC4, r1
		append_tile_column();
    bd44:	0c 94 bb 5d 	jmp	0xbb76	; 0xbb76 <append_tile_column>

0000bd48 <map_ship>:
	}
}

void map_ship()
{
	game.player.run.anim_count = 2;
    bd48:	82 e0       	ldi	r24, 0x02	; 2
    bd4a:	80 93 2e 0e 	sts	0x0E2E, r24
	game.player.run.frames_per_anim = EXPLOSION_FRAME_COUNT;
    bd4e:	85 e0       	ldi	r24, 0x05	; 5
    bd50:	80 93 2f 0e 	sts	0x0E2F, r24
	game.player.run.anims = run_anim;
    bd54:	e8 e3       	ldi	r30, 0x38	; 56
    bd56:	f0 e1       	ldi	r31, 0x10	; 16
    bd58:	f0 93 34 0e 	sts	0x0E34, r31
    bd5c:	e0 93 33 0e 	sts	0x0E33, r30
	game.player.run.anims[0] = (char*) map_hero_ship_large_0;
    bd60:	84 ed       	ldi	r24, 0xD4	; 212
    bd62:	97 e3       	ldi	r25, 0x37	; 55
    bd64:	91 83       	std	Z+1, r25	; 0x01
    bd66:	80 83       	st	Z, r24
	game.player.run.anims[1] = (char*) map_hero_ship_large_1;
    bd68:	8a ec       	ldi	r24, 0xCA	; 202
    bd6a:	97 e3       	ldi	r25, 0x37	; 55
    bd6c:	93 83       	std	Z+3, r25	; 0x03
    bd6e:	82 83       	std	Z+2, r24	; 0x02
    bd70:	08 95       	ret

0000bd72 <map_level_info>:
}

void map_level_info(char* level)
{
	game.current_level = level;
    bd72:	a9 eb       	ldi	r26, 0xB9	; 185
    bd74:	bd e0       	ldi	r27, 0x0D	; 13
    bd76:	90 93 d9 0f 	sts	0x0FD9, r25
    bd7a:	80 93 d8 0f 	sts	0x0FD8, r24
	
	game.raw_level_width = pgm_read_byte(&level[0]);
    bd7e:	fc 01       	movw	r30, r24
    bd80:	24 91       	lpm	r18, Z
    bd82:	56 96       	adiw	r26, 0x16	; 22
    bd84:	2c 93       	st	X, r18
    bd86:	56 97       	sbiw	r26, 0x16	; 22
	game.raw_level_height = pgm_read_byte(&level[1]);
    bd88:	9c 01       	movw	r18, r24
    bd8a:	2f 5f       	subi	r18, 0xFF	; 255
    bd8c:	3f 4f       	sbci	r19, 0xFF	; 255
    bd8e:	f9 01       	movw	r30, r18
    bd90:	44 91       	lpm	r20, Z
    bd92:	57 96       	adiw	r26, 0x17	; 23
    bd94:	4c 93       	st	X, r20
    bd96:	57 97       	sbiw	r26, 0x17	; 23
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
    bd98:	fc 01       	movw	r30, r24
    bd9a:	84 91       	lpm	r24, Z
    bd9c:	98 2f       	mov	r25, r24
    bd9e:	99 0f       	add	r25, r25
    bda0:	99 0f       	add	r25, r25
    bda2:	89 0f       	add	r24, r25
    bda4:	1f 96       	adiw	r26, 0x0f	; 15
    bda6:	8c 93       	st	X, r24
    bda8:	1f 97       	sbiw	r26, 0x0f	; 15
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
    bdaa:	f9 01       	movw	r30, r18
    bdac:	24 91       	lpm	r18, Z
    bdae:	82 2f       	mov	r24, r18
    bdb0:	88 0f       	add	r24, r24
    bdb2:	88 0f       	add	r24, r24
    bdb4:	28 0f       	add	r18, r24
    bdb6:	50 96       	adiw	r26, 0x10	; 16
    bdb8:	2c 93       	st	X, r18
    bdba:	08 95       	ret

0000bdbc <on_solid_ground>:
		}
	}
}

char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    bdbc:	cf 92       	push	r12
    bdbe:	df 92       	push	r13
    bdc0:	ef 92       	push	r14
    bdc2:	ff 92       	push	r15
    bdc4:	0f 93       	push	r16
    bdc6:	1f 93       	push	r17
    bdc8:	cf 93       	push	r28
    bdca:	df 93       	push	r29
    bdcc:	7c 01       	movw	r14, r24
    bdce:	d6 2f       	mov	r29, r22
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bdd0:	88 e0       	ldi	r24, 0x08	; 8
    bdd2:	48 9f       	mul	r20, r24
    bdd4:	80 01       	movw	r16, r0
    bdd6:	11 24       	eor	r1, r1
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    bdd8:	c0 e0       	ldi	r28, 0x00	; 0
    bdda:	cd 17       	cp	r28, r29
    bddc:	09 f4       	brne	.+2      	; 0xbde0 <on_solid_ground+0x24>
    bdde:	41 c0       	rjmp	.+130    	; 0xbe62 <on_solid_ground+0xa6>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
    bde0:	f7 01       	movw	r30, r14
    bde2:	42 81       	ldd	r20, Z+2	; 0x02
    bde4:	53 81       	ldd	r21, Z+3	; 0x03
    bde6:	40 0f       	add	r20, r16
    bde8:	51 1f       	adc	r21, r17
    bdea:	83 e0       	ldi	r24, 0x03	; 3
    bdec:	56 95       	lsr	r21
    bdee:	47 95       	ror	r20
    bdf0:	8a 95       	dec	r24
    bdf2:	e1 f7       	brne	.-8      	; 0xbdec <on_solid_ground+0x30>
    bdf4:	60 81       	ld	r22, Z
    bdf6:	71 81       	ldd	r23, Z+1	; 0x01
    bdf8:	93 e0       	ldi	r25, 0x03	; 3
    bdfa:	76 95       	lsr	r23
    bdfc:	67 95       	ror	r22
    bdfe:	9a 95       	dec	r25
    be00:	e1 f7       	brne	.-8      	; 0xbdfa <on_solid_ground+0x3e>
    be02:	6c 0f       	add	r22, r28
    be04:	80 91 d8 0f 	lds	r24, 0x0FD8
    be08:	90 91 d9 0f 	lds	r25, 0x0FD9
    be0c:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    be10:	c8 2e       	mov	r12, r24
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
    be12:	f7 01       	movw	r30, r14
    be14:	42 81       	ldd	r20, Z+2	; 0x02
    be16:	53 81       	ldd	r21, Z+3	; 0x03
    be18:	40 0f       	add	r20, r16
    be1a:	51 1f       	adc	r21, r17
    be1c:	23 e0       	ldi	r18, 0x03	; 3
    be1e:	56 95       	lsr	r21
    be20:	47 95       	ror	r20
    be22:	2a 95       	dec	r18
    be24:	e1 f7       	brne	.-8      	; 0xbe1e <on_solid_ground+0x62>
    be26:	20 81       	ld	r18, Z
    be28:	31 81       	ldd	r19, Z+1	; 0x01
    be2a:	29 5f       	subi	r18, 0xF9	; 249
    be2c:	3f 4f       	sbci	r19, 0xFF	; 255
    be2e:	53 e0       	ldi	r21, 0x03	; 3
    be30:	36 95       	lsr	r19
    be32:	27 95       	ror	r18
    be34:	5a 95       	dec	r21
    be36:	e1 f7       	brne	.-8      	; 0xbe30 <on_solid_ground+0x74>
    be38:	6c 2f       	mov	r22, r28
    be3a:	62 0f       	add	r22, r18
    be3c:	80 91 d8 0f 	lds	r24, 0x0FD8
    be40:	90 91 d9 0f 	lds	r25, 0x0FD9
    be44:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    be48:	d8 2e       	mov	r13, r24
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
    be4a:	8c 2d       	mov	r24, r12
    be4c:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    be50:	81 11       	cpse	r24, r1
    be52:	09 c0       	rjmp	.+18     	; 0xbe66 <on_solid_ground+0xaa>
    be54:	8d 2d       	mov	r24, r13
    be56:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    be5a:	81 11       	cpse	r24, r1
    be5c:	04 c0       	rjmp	.+8      	; 0xbe66 <on_solid_ground+0xaa>
char on_solid_ground(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 lt1, lt2;
	
	// Bottom
	for (u8 x = 0; x < tile_width; x++)
    be5e:	cf 5f       	subi	r28, 0xFF	; 255
    be60:	bc cf       	rjmp	.-136    	; 0xbdda <on_solid_ground+0x1e>
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
		}
	}
	return 0;
    be62:	80 e0       	ldi	r24, 0x00	; 0
    be64:	01 c0       	rjmp	.+2      	; 0xbe68 <on_solid_ground+0xac>
	{
		lt1 = get_level_tile(game.current_level, s->x / 8 + x, (s->y + tile_height*8) / 8);
		lt2 = get_level_tile(game.current_level, (s->x+7) / 8 + x, (s->y + tile_height*8) / 8);
		if (solid_or_hazard_tile(lt1) || solid_or_hazard_tile(lt2))
		{
			return 1;
    be66:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    be68:	df 91       	pop	r29
    be6a:	cf 91       	pop	r28
    be6c:	1f 91       	pop	r17
    be6e:	0f 91       	pop	r16
    be70:	ff 90       	pop	r15
    be72:	ef 90       	pop	r14
    be74:	df 90       	pop	r13
    be76:	cf 90       	pop	r12
    be78:	08 95       	ret

0000be7a <find_shot_slot>:

u8 find_shot_slot(Player* player)
{
    be7a:	9c 01       	movw	r18, r24
    be7c:	80 91 fb 0c 	lds	r24, 0x0CFB
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
		if (!player->shot[i].active)
    be80:	44 e1       	ldi	r20, 0x14	; 20
u8 find_shot_slot(Player* player)
{
	static u8 i = 0;
	while (1)
	{
		if (i >= MAX_PLAYER_SHOTS) i = 0;
    be82:	83 30       	cpi	r24, 0x03	; 3
    be84:	08 f0       	brcs	.+2      	; 0xbe88 <find_shot_slot+0xe>
    be86:	80 e0       	ldi	r24, 0x00	; 0
		if (!player->shot[i].active)
    be88:	f9 01       	movw	r30, r18
    be8a:	48 9f       	mul	r20, r24
    be8c:	e0 0d       	add	r30, r0
    be8e:	f1 1d       	adc	r31, r1
    be90:	11 24       	eor	r1, r1
    be92:	51 8d       	ldd	r21, Z+25	; 0x19
    be94:	91 e0       	ldi	r25, 0x01	; 1
    be96:	98 0f       	add	r25, r24
    be98:	51 11       	cpse	r21, r1
    be9a:	03 c0       	rjmp	.+6      	; 0xbea2 <find_shot_slot+0x28>
		{
			return i++;
    be9c:	90 93 fb 0c 	sts	0x0CFB, r25
    bea0:	08 95       	ret
		}
		i++;
    bea2:	89 2f       	mov	r24, r25
	}
    bea4:	ee cf       	rjmp	.-36     	; 0xbe82 <find_shot_slot+0x8>

0000bea6 <update_shot>:
}

void update_shot(Player* player, u8 shot_slot)
{
    bea6:	bf 92       	push	r11
    bea8:	cf 92       	push	r12
    beaa:	df 92       	push	r13
    beac:	ef 92       	push	r14
    beae:	ff 92       	push	r15
    beb0:	0f 93       	push	r16
    beb2:	1f 93       	push	r17
    beb4:	cf 93       	push	r28
    beb6:	df 93       	push	r29
	// Shot updates
	u8 idx;
	if (player->controls.pressed & BTN_B && player->active_shots < MAX_PLAYER_SHOTS)
    beb8:	fc 01       	movw	r30, r24
    beba:	ec 58       	subi	r30, 0x8C	; 140
    bebc:	ff 4f       	sbci	r31, 0xFF	; 255
    bebe:	20 81       	ld	r18, Z
    bec0:	20 ff       	sbrs	r18, 0
    bec2:	a7 c0       	rjmp	.+334    	; 0xc012 <update_shot+0x16c>
    bec4:	fc 01       	movw	r30, r24
    bec6:	27 81       	ldd	r18, Z+7	; 0x07
    bec8:	23 30       	cpi	r18, 0x03	; 3
    beca:	08 f0       	brcs	.+2      	; 0xbece <update_shot+0x28>
    becc:	a2 c0       	rjmp	.+324    	; 0xc012 <update_shot+0x16c>
    bece:	16 2f       	mov	r17, r22
    bed0:	ec 01       	movw	r28, r24
	{
		idx = find_shot_slot(player);
    bed2:	0e 94 3d 5f 	call	0xbe7a	; 0xbe7a <find_shot_slot>
    bed6:	b8 2e       	mov	r11, r24
		if (player->shot[idx].shot_type == SPACE_BOMB_SHOT && player->shared.y < 4) return;
    bed8:	e8 2e       	mov	r14, r24
    beda:	f1 2c       	mov	r15, r1
    bedc:	fe 01       	movw	r30, r28
    bede:	24 e1       	ldi	r18, 0x14	; 20
    bee0:	82 9f       	mul	r24, r18
    bee2:	e0 0d       	add	r30, r0
    bee4:	f1 1d       	adc	r31, r1
    bee6:	11 24       	eor	r1, r1
    bee8:	87 89       	ldd	r24, Z+23	; 0x17
    beea:	86 30       	cpi	r24, 0x06	; 6
    beec:	29 f4       	brne	.+10     	; 0xbef8 <update_shot+0x52>
    beee:	8a 81       	ldd	r24, Y+2	; 0x02
    bef0:	9b 81       	ldd	r25, Y+3	; 0x03
    bef2:	04 97       	sbiw	r24, 0x04	; 4
    bef4:	08 f4       	brcc	.+2      	; 0xbef8 <update_shot+0x52>
    bef6:	8d c0       	rjmp	.+282    	; 0xc012 <update_shot+0x16c>
		SFX_PLAYER_SHOOT;
    bef8:	2f ef       	ldi	r18, 0xFF	; 255
    befa:	43 e2       	ldi	r20, 0x23	; 35
    befc:	63 e0       	ldi	r22, 0x03	; 3
    befe:	82 e0       	ldi	r24, 0x02	; 2
    bf00:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <TriggerNote>
		LBMapSprite(shot_slot+idx, LBGetNextFrame(&player->shot[idx].anim), 0);
    bf04:	84 e1       	ldi	r24, 0x14	; 20
    bf06:	8e 9d       	mul	r24, r14
    bf08:	60 01       	movw	r12, r0
    bf0a:	8f 9d       	mul	r24, r15
    bf0c:	d0 0c       	add	r13, r0
    bf0e:	11 24       	eor	r1, r1
    bf10:	c6 01       	movw	r24, r12
    bf12:	4c 96       	adiw	r24, 0x1c	; 28
    bf14:	8c 0f       	add	r24, r28
    bf16:	9d 1f       	adc	r25, r29
    bf18:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    bf1c:	40 e0       	ldi	r20, 0x00	; 0
    bf1e:	bc 01       	movw	r22, r24
    bf20:	8b 2d       	mov	r24, r11
    bf22:	81 0f       	add	r24, r17
    bf24:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		player->shot[idx].active = 1;
    bf28:	8e 01       	movw	r16, r28
    bf2a:	0c 0d       	add	r16, r12
    bf2c:	1d 1d       	adc	r17, r13
    bf2e:	81 e0       	ldi	r24, 0x01	; 1
    bf30:	f8 01       	movw	r30, r16
    bf32:	81 8f       	std	Z+25, r24	; 0x19
		player->shot[idx].shared.y = (u16) player->shared.y / 8 * 8 + player->shot[idx].y_delta;
    bf34:	ca 80       	ldd	r12, Y+2	; 0x02
    bf36:	db 80       	ldd	r13, Y+3	; 0x03
    bf38:	f8 ef       	ldi	r31, 0xF8	; 248
    bf3a:	cf 22       	and	r12, r31
    bf3c:	f8 01       	movw	r30, r16
    bf3e:	83 8d       	ldd	r24, Z+27	; 0x1b
    bf40:	c8 0e       	add	r12, r24
    bf42:	d1 1c       	adc	r13, r1
    bf44:	87 fd       	sbrc	r24, 7
    bf46:	da 94       	dec	r13
    bf48:	d3 8a       	std	Z+19, r13	; 0x13
    bf4a:	c2 8a       	std	Z+18, r12	; 0x12
		if (is_space())
    bf4c:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    bf50:	28 81       	ld	r18, Y
    bf52:	39 81       	ldd	r19, Y+1	; 0x01
    bf54:	88 23       	and	r24, r24
    bf56:	e1 f0       	breq	.+56     	; 0xbf90 <update_shot+0xea>
		{
			player->shot[idx].shared.x = player->shared.x+player->width*8;
    bf58:	8b 85       	ldd	r24, Y+11	; 0x0b
    bf5a:	f8 e0       	ldi	r31, 0x08	; 8
    bf5c:	8f 9f       	mul	r24, r31
    bf5e:	20 0d       	add	r18, r0
    bf60:	31 1d       	adc	r19, r1
    bf62:	11 24       	eor	r1, r1
    bf64:	f8 01       	movw	r30, r16
    bf66:	31 8b       	std	Z+17, r19	; 0x11
    bf68:	20 8b       	std	Z+16, r18	; 0x10
			player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    bf6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    bf6c:	85 8b       	std	Z+21, r24	; 0x15
			if (player->shot[idx].shot_type == SPACE_BOMB_SHOT)
    bf6e:	87 89       	ldd	r24, Z+23	; 0x17
    bf70:	86 30       	cpi	r24, 0x06	; 6
    bf72:	09 f0       	breq	.+2      	; 0xbf76 <update_shot+0xd0>
    bf74:	4b c0       	rjmp	.+150    	; 0xc00c <update_shot+0x166>
    bf76:	fe 01       	movw	r30, r28
    bf78:	24 e1       	ldi	r18, 0x14	; 20
    bf7a:	b2 9e       	mul	r11, r18
    bf7c:	e0 0d       	add	r30, r0
    bf7e:	f1 1d       	adc	r31, r1
    bf80:	11 24       	eor	r1, r1
			{
				player->shot[idx].shared.vy *= -1;
    bf82:	84 89       	ldd	r24, Z+20	; 0x14
    bf84:	81 95       	neg	r24
				if (player->shot[idx].shared.vy == 0)
    bf86:	81 11       	cpse	r24, r1
    bf88:	01 c0       	rjmp	.+2      	; 0xbf8c <update_shot+0xe6>
				{
					player->shot[idx].shared.vy = FAST_SHOT_SPEED;
    bf8a:	8f e7       	ldi	r24, 0x7F	; 127
    bf8c:	84 8b       	std	Z+20, r24	; 0x14
    bf8e:	3e c0       	rjmp	.+124    	; 0xc00c <update_shot+0x166>
				}
			}
		}
		else
		{
			if (!(player->flags & PRONE))
    bf90:	88 85       	ldd	r24, Y+8	; 0x08
    bf92:	82 fd       	sbrc	r24, 2
    bf94:	06 c0       	rjmp	.+12     	; 0xbfa2 <update_shot+0xfc>
			{
				player->shot[idx].shared.y += 8;
    bf96:	88 e0       	ldi	r24, 0x08	; 8
    bf98:	c8 0e       	add	r12, r24
    bf9a:	d1 1c       	adc	r13, r1
    bf9c:	f8 01       	movw	r30, r16
    bf9e:	d3 8a       	std	Z+19, r13	; 0x13
    bfa0:	c2 8a       	std	Z+18, r12	; 0x12
			}
			if (player->direction == D_RIGHT)
    bfa2:	8a 85       	ldd	r24, Y+10	; 0x0a
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    bfa4:	94 e1       	ldi	r25, 0x14	; 20
    bfa6:	9e 9d       	mul	r25, r14
    bfa8:	f0 01       	movw	r30, r0
    bfaa:	9f 9d       	mul	r25, r15
    bfac:	f0 0d       	add	r31, r0
    bfae:	11 24       	eor	r1, r1
    bfb0:	ec 0f       	add	r30, r28
    bfb2:	fd 1f       	adc	r31, r29
		{
			if (!(player->flags & PRONE))
			{
				player->shot[idx].shared.y += 8;
			}
			if (player->direction == D_RIGHT)
    bfb4:	81 30       	cpi	r24, 0x01	; 1
    bfb6:	a9 f4       	brne	.+42     	; 0xbfe2 <update_shot+0x13c>
			{
				player->shot[idx].shared.x = player->shared.x+2*8;
    bfb8:	20 5f       	subi	r18, 0xF0	; 240
    bfba:	3f 4f       	sbci	r19, 0xFF	; 255
    bfbc:	31 8b       	std	Z+17, r19	; 0x11
    bfbe:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = player->shot[idx].shot_speed;
    bfc0:	82 8d       	ldd	r24, Z+26	; 0x1a
    bfc2:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    bfc4:	27 89       	ldd	r18, Z+23	; 0x17
    bfc6:	24 30       	cpi	r18, 0x04	; 4
    bfc8:	09 f5       	brne	.+66     	; 0xc00c <update_shot+0x166>
    bfca:	ff ef       	ldi	r31, 0xFF	; 255
    bfcc:	ef 1a       	sub	r14, r31
    bfce:	ff 0a       	sbc	r15, r31
    bfd0:	9e 9d       	mul	r25, r14
    bfd2:	f0 01       	movw	r30, r0
    bfd4:	9f 9d       	mul	r25, r15
    bfd6:	f0 0d       	add	r31, r0
    bfd8:	11 24       	eor	r1, r1
    bfda:	ec 0f       	add	r30, r28
    bfdc:	fd 1f       	adc	r31, r29
    bfde:	81 95       	neg	r24
    bfe0:	14 c0       	rjmp	.+40     	; 0xc00a <update_shot+0x164>
			}
			else
			{
				player->shot[idx].shared.x = player->shared.x-1*8;
    bfe2:	28 50       	subi	r18, 0x08	; 8
    bfe4:	31 09       	sbc	r19, r1
    bfe6:	31 8b       	std	Z+17, r19	; 0x11
    bfe8:	20 8b       	std	Z+16, r18	; 0x10
				player->shot[idx].shared.vx = -player->shot[idx].shot_speed;
    bfea:	82 8d       	ldd	r24, Z+26	; 0x1a
    bfec:	81 95       	neg	r24
    bfee:	85 8b       	std	Z+21, r24	; 0x15
				if (player->shot[idx].shot_type == ANGLED_SHOT) player->shot[idx].shared.vy = -player->shot[idx].shot_speed;
    bff0:	27 89       	ldd	r18, Z+23	; 0x17
    bff2:	24 30       	cpi	r18, 0x04	; 4
    bff4:	59 f4       	brne	.+22     	; 0xc00c <update_shot+0x166>
    bff6:	2f ef       	ldi	r18, 0xFF	; 255
    bff8:	e2 1a       	sub	r14, r18
    bffa:	f2 0a       	sbc	r15, r18
    bffc:	9e 9d       	mul	r25, r14
    bffe:	f0 01       	movw	r30, r0
    c000:	9f 9d       	mul	r25, r15
    c002:	f0 0d       	add	r31, r0
    c004:	11 24       	eor	r1, r1
    c006:	ec 0f       	add	r30, r28
    c008:	fd 1f       	adc	r31, r29
    c00a:	80 83       	st	Z, r24
			}
		}
		player->active_shots++;
    c00c:	8f 81       	ldd	r24, Y+7	; 0x07
    c00e:	8f 5f       	subi	r24, 0xFF	; 255
    c010:	8f 83       	std	Y+7, r24	; 0x07
	}
}
    c012:	df 91       	pop	r29
    c014:	cf 91       	pop	r28
    c016:	1f 91       	pop	r17
    c018:	0f 91       	pop	r16
    c01a:	ff 90       	pop	r15
    c01c:	ef 90       	pop	r14
    c01e:	df 90       	pop	r13
    c020:	cf 90       	pop	r12
    c022:	bf 90       	pop	r11
    c024:	08 95       	ret

0000c026 <out_of_bounds>:

u8 out_of_bounds(SpriteShared* s)
{
    c026:	fc 01       	movw	r30, r24
	if (s->x < game.camera_x) return 1;
    c028:	40 81       	ld	r20, Z
    c02a:	51 81       	ldd	r21, Z+1	; 0x01
    c02c:	20 91 b9 0d 	lds	r18, 0x0DB9
    c030:	30 91 ba 0d 	lds	r19, 0x0DBA
    c034:	42 17       	cp	r20, r18
    c036:	53 07       	cpc	r21, r19
    c038:	08 f1       	brcs	.+66     	; 0xc07c <out_of_bounds+0x56>
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
    c03a:	48 5f       	subi	r20, 0xF8	; 248
    c03c:	5f 4f       	sbci	r21, 0xFF	; 255
    c03e:	20 52       	subi	r18, 0x20	; 32
    c040:	3f 4f       	sbci	r19, 0xFF	; 255
    c042:	24 17       	cp	r18, r20
    c044:	35 07       	cpc	r19, r21
    c046:	d0 f0       	brcs	.+52     	; 0xc07c <out_of_bounds+0x56>
	if (s->y < game.camera_y) return 1;
    c048:	42 81       	ldd	r20, Z+2	; 0x02
    c04a:	53 81       	ldd	r21, Z+3	; 0x03
    c04c:	20 91 c1 0d 	lds	r18, 0x0DC1
    c050:	30 e0       	ldi	r19, 0x00	; 0
    c052:	42 17       	cp	r20, r18
    c054:	53 07       	cpc	r21, r19
    c056:	90 f0       	brcs	.+36     	; 0xc07c <out_of_bounds+0x56>
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
    c058:	c9 01       	movw	r24, r18
    c05a:	01 96       	adiw	r24, 0x01	; 1
    c05c:	48 17       	cp	r20, r24
    c05e:	59 07       	cpc	r21, r25
    c060:	18 f4       	brcc	.+6      	; 0xc068 <out_of_bounds+0x42>
    c062:	84 81       	ldd	r24, Z+4	; 0x04
    c064:	81 11       	cpse	r24, r1
    c066:	0a c0       	rjmp	.+20     	; 0xc07c <out_of_bounds+0x56>
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
    c068:	48 5f       	subi	r20, 0xF8	; 248
    c06a:	5f 4f       	sbci	r21, 0xFF	; 255
    c06c:	28 53       	subi	r18, 0x38	; 56
    c06e:	3f 4f       	sbci	r19, 0xFF	; 255
    c070:	81 e0       	ldi	r24, 0x01	; 1
    c072:	24 17       	cp	r18, r20
    c074:	35 07       	cpc	r19, r21
    c076:	18 f0       	brcs	.+6      	; 0xc07e <out_of_bounds+0x58>
    c078:	80 e0       	ldi	r24, 0x00	; 0
    c07a:	08 95       	ret
	}
}

u8 out_of_bounds(SpriteShared* s)
{
	if (s->x < game.camera_x) return 1;
    c07c:	81 e0       	ldi	r24, 0x01	; 1
	if (s->x+8 > game.camera_x + CAMERA_WIDTH*8) return 1;
	if (s->y < game.camera_y) return 1;
	if (s->y < game.camera_y + 1 && s->vy != 0) return 1;
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}
    c07e:	08 95       	ret

0000c080 <explode_all_enemies>:
	load_level(game.current_level_index, false);
	return 0;
}

void explode_all_enemies()
{
    c080:	40 91 d4 0d 	lds	r20, 0x0DD4
    c084:	80 e0       	ldi	r24, 0x00	; 0
    c086:	90 e0       	ldi	r25, 0x00	; 0
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
		{
			game.enemies[i].flags = EXPLODING;
    c088:	50 e1       	ldi	r21, 0x10	; 16
    c08a:	9c 01       	movw	r18, r24
    c08c:	27 54       	subi	r18, 0x47	; 71
    c08e:	32 4f       	sbci	r19, 0xF2	; 242
    c090:	d9 01       	movw	r26, r18
    c092:	a3 5e       	subi	r26, 0xE3	; 227
    c094:	be 4f       	sbci	r27, 0xFE	; 254

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active)
    c096:	6c 91       	ld	r22, X
    c098:	66 23       	and	r22, r22
    c09a:	31 f0       	breq	.+12     	; 0xc0a8 <explode_all_enemies+0x28>
    c09c:	f9 01       	movw	r30, r18
    c09e:	e2 5e       	subi	r30, 0xE2	; 226
    c0a0:	fe 4f       	sbci	r31, 0xFE	; 254
		{
			game.enemies[i].flags = EXPLODING;
    c0a2:	50 83       	st	Z, r21
			game.enemies[i].active = 0;
    c0a4:	1c 92       	st	X, r1
			game.active_enemies--;
    c0a6:	41 50       	subi	r20, 0x01	; 1
    c0a8:	c5 96       	adiw	r24, 0x35	; 53
	return 0;
}

void explode_all_enemies()
{
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    c0aa:	89 30       	cpi	r24, 0x09	; 9
    c0ac:	21 e0       	ldi	r18, 0x01	; 1
    c0ae:	92 07       	cpc	r25, r18
    c0b0:	61 f7       	brne	.-40     	; 0xc08a <explode_all_enemies+0xa>
    c0b2:	40 93 d4 0d 	sts	0x0DD4, r20
    c0b6:	08 95       	ret

0000c0b8 <handle_music_toggle>:
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
}

char music_toggle_pressed(JoyPadState* p)
{
	return (p->pressed & BTN_SELECT);
    c0b8:	fc 01       	movw	r30, r24
    c0ba:	80 81       	ld	r24, Z
	}
}

void handle_music_toggle(JoyPadState* p)
{
	if (music_toggle_pressed(p))
    c0bc:	82 ff       	sbrs	r24, 2
    c0be:	07 c0       	rjmp	.+14     	; 0xc0ce <handle_music_toggle+0x16>
	{
		if (IsSongPlaying())
    c0c0:	0e 94 56 48 	call	0x90ac	; 0x90ac <IsSongPlaying>
    c0c4:	81 11       	cpse	r24, r1
		{
			StopSong();
    c0c6:	0c 94 e6 44 	jmp	0x89cc	; 0x89cc <StopSong>
		}
		else
		{
			ResumeSong();
    c0ca:	0c 94 f4 44 	jmp	0x89e8	; 0x89e8 <ResumeSong>
    c0ce:	08 95       	ret

0000c0d0 <handle_demo_play>:
		}
	}
}

void handle_demo_play(Player* player)
{
    c0d0:	0f 93       	push	r16
    c0d2:	1f 93       	push	r17
    c0d4:	cf 93       	push	r28
    c0d6:	df 93       	push	r29
	if (game.selection == DEMO_SELECTED)
    c0d8:	20 91 d2 0d 	lds	r18, 0x0DD2
    c0dc:	22 30       	cpi	r18, 0x02	; 2
    c0de:	b9 f5       	brne	.+110    	; 0xc14e <handle_demo_play+0x7e>
    c0e0:	ec 01       	movw	r28, r24
	{
		player->controls.pressed = 0;
    c0e2:	8c 01       	movw	r16, r24
    c0e4:	0c 58       	subi	r16, 0x8C	; 140
    c0e6:	1f 4f       	sbci	r17, 0xFF	; 255
    c0e8:	f8 01       	movw	r30, r16
    c0ea:	11 82       	std	Z+1, r1	; 0x01
    c0ec:	10 82       	st	Z, r1
		if (is_space())
    c0ee:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    c0f2:	88 23       	and	r24, r24
    c0f4:	69 f0       	breq	.+26     	; 0xc110 <handle_demo_play+0x40>
		{
			if (game.time < 2)
    c0f6:	80 91 bf 0d 	lds	r24, 0x0DBF
    c0fa:	90 91 c0 0d 	lds	r25, 0x0DC0
    c0fe:	02 97       	sbiw	r24, 0x02	; 2
    c100:	d0 f4       	brcc	.+52     	; 0xc136 <handle_demo_play+0x66>
			{
				player->controls.held = BTN_UP;
    c102:	c8 58       	subi	r28, 0x88	; 136
    c104:	df 4f       	sbci	r29, 0xFF	; 255
    c106:	80 e1       	ldi	r24, 0x10	; 16
    c108:	90 e0       	ldi	r25, 0x00	; 0
    c10a:	99 83       	std	Y+1, r25	; 0x01
    c10c:	88 83       	st	Y, r24
    c10e:	13 c0       	rjmp	.+38     	; 0xc136 <handle_demo_play+0x66>
			}
		}
		else
		{
			player->controls.held = BTN_RIGHT;
    c110:	80 e8       	ldi	r24, 0x80	; 128
    c112:	90 e0       	ldi	r25, 0x00	; 0
    c114:	fe 01       	movw	r30, r28
    c116:	e8 58       	subi	r30, 0x88	; 136
    c118:	ff 4f       	sbci	r31, 0xFF	; 255
    c11a:	91 83       	std	Z+1, r25	; 0x01
    c11c:	80 83       	st	Z, r24
			if (player->shared.vx == 0 && player->shared.x > 40)
    c11e:	8d 81       	ldd	r24, Y+5	; 0x05
    c120:	81 11       	cpse	r24, r1
    c122:	09 c0       	rjmp	.+18     	; 0xc136 <handle_demo_play+0x66>
    c124:	88 81       	ld	r24, Y
    c126:	99 81       	ldd	r25, Y+1	; 0x01
    c128:	89 97       	sbiw	r24, 0x29	; 41
    c12a:	28 f0       	brcs	.+10     	; 0xc136 <handle_demo_play+0x66>
			{
				player->controls.pressed |= BTN_A;
    c12c:	80 e0       	ldi	r24, 0x00	; 0
    c12e:	91 e0       	ldi	r25, 0x01	; 1
    c130:	f8 01       	movw	r30, r16
    c132:	91 83       	std	Z+1, r25	; 0x01
    c134:	80 83       	st	Z, r24
			}
		}
		if (game.frame_counter % 15 == 0)
    c136:	80 91 d3 0d 	lds	r24, 0x0DD3
    c13a:	6f e0       	ldi	r22, 0x0F	; 15
    c13c:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    c140:	91 11       	cpse	r25, r1
    c142:	05 c0       	rjmp	.+10     	; 0xc14e <handle_demo_play+0x7e>
		{
			player->controls.pressed = BTN_B;
    c144:	81 e0       	ldi	r24, 0x01	; 1
    c146:	90 e0       	ldi	r25, 0x00	; 0
    c148:	f8 01       	movw	r30, r16
    c14a:	91 83       	std	Z+1, r25	; 0x01
    c14c:	80 83       	st	Z, r24
		}
	}
}
    c14e:	df 91       	pop	r29
    c150:	cf 91       	pop	r28
    c152:	1f 91       	pop	r17
    c154:	0f 91       	pop	r16
    c156:	08 95       	ret

0000c158 <pixel_overlap>:
	}
	return 1;
}

u8 pixel_overlap(u8 s1, u8 s2, u8 w1, u8 w2)
{
    c158:	94 2f       	mov	r25, r20
	u8 result = w1;
	
	if (s2 > s1)
    c15a:	86 17       	cp	r24, r22
    c15c:	10 f4       	brcc	.+4      	; 0xc162 <pixel_overlap+0xa>
    c15e:	96 1b       	sub	r25, r22
	{
		result -= s2 - s1;
    c160:	98 0f       	add	r25, r24
	}
	s1 = s1 + w1;
    c162:	84 0f       	add	r24, r20
	s2 = s2 + w2;
    c164:	26 0f       	add	r18, r22
	if (s2 < s1)
    c166:	28 17       	cp	r18, r24
    c168:	10 f4       	brcc	.+4      	; 0xc16e <pixel_overlap+0x16>
	{
		result -= s1 - s2;
    c16a:	28 1b       	sub	r18, r24
    c16c:	92 0f       	add	r25, r18
	}
	return result;
}
    c16e:	89 2f       	mov	r24, r25
    c170:	08 95       	ret

0000c172 <collision_detect_level>:

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
    c172:	2f 92       	push	r2
    c174:	3f 92       	push	r3
    c176:	4f 92       	push	r4
    c178:	5f 92       	push	r5
    c17a:	6f 92       	push	r6
    c17c:	7f 92       	push	r7
    c17e:	8f 92       	push	r8
    c180:	9f 92       	push	r9
    c182:	af 92       	push	r10
    c184:	bf 92       	push	r11
    c186:	cf 92       	push	r12
    c188:	df 92       	push	r13
    c18a:	ef 92       	push	r14
    c18c:	ff 92       	push	r15
    c18e:	0f 93       	push	r16
    c190:	1f 93       	push	r17
    c192:	cf 93       	push	r28
    c194:	df 93       	push	r29
    c196:	00 d0       	rcall	.+0      	; 0xc198 <collision_detect_level+0x26>
    c198:	00 d0       	rcall	.+0      	; 0xc19a <collision_detect_level+0x28>
    c19a:	00 d0       	rcall	.+0      	; 0xc19c <collision_detect_level+0x2a>
    c19c:	cd b7       	in	r28, 0x3d	; 61
    c19e:	de b7       	in	r29, 0x3e	; 62
    c1a0:	9e 83       	std	Y+6, r25	; 0x06
    c1a2:	8d 83       	std	Y+5, r24	; 0x05
    c1a4:	56 2e       	mov	r5, r22
    c1a6:	4c 83       	std	Y+4, r20	; 0x04
	u8 x0_tile = s->x >> 3;
    c1a8:	fc 01       	movw	r30, r24
    c1aa:	a0 80       	ld	r10, Z
    c1ac:	b1 80       	ldd	r11, Z+1	; 0x01
    c1ae:	75 01       	movw	r14, r10
    c1b0:	13 e0       	ldi	r17, 0x03	; 3
    c1b2:	f6 94       	lsr	r15
    c1b4:	e7 94       	ror	r14
    c1b6:	1a 95       	dec	r17
    c1b8:	e1 f7       	brne	.-8      	; 0xc1b2 <collision_detect_level+0x40>
    c1ba:	ea 82       	std	Y+2, r14	; 0x02
	u8 y0_tile = s->y >> 3;
    c1bc:	c2 80       	ldd	r12, Z+2	; 0x02
    c1be:	d3 80       	ldd	r13, Z+3	; 0x03
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
    c1c0:	84 81       	ldd	r24, Z+4	; 0x04
    c1c2:	88 23       	and	r24, r24
    c1c4:	09 f4       	brne	.+2      	; 0xc1c8 <collision_detect_level+0x56>
    c1c6:	e1 c0       	rjmp	.+450    	; 0xc38a <collision_detect_level+0x218>
}

u8 collision_detect_level(SpriteShared* s, u8 tile_width, u8 tile_height)
{
	u8 x0_tile = s->x >> 3;
	u8 y0_tile = s->y >> 3;
    c1c8:	e3 e0       	ldi	r30, 0x03	; 3
    c1ca:	d6 94       	lsr	r13
    c1cc:	c7 94       	ror	r12
    c1ce:	ea 95       	dec	r30
    c1d0:	e1 f7       	brne	.-8      	; 0xc1ca <collision_detect_level+0x58>
    c1d2:	c9 82       	std	Y+1, r12	; 0x01
	u8 x1_tile = (s->x+7) >> 3;
    c1d4:	f7 e0       	ldi	r31, 0x07	; 7
    c1d6:	af 0e       	add	r10, r31
    c1d8:	b1 1c       	adc	r11, r1
    c1da:	f3 e0       	ldi	r31, 0x03	; 3
    c1dc:	b6 94       	lsr	r11
    c1de:	a7 94       	ror	r10
    c1e0:	fa 95       	dec	r31
    c1e2:	e1 f7       	brne	.-8      	; 0xc1dc <collision_detect_level+0x6a>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    c1e4:	8e 2d       	mov	r24, r14
    c1e6:	88 0f       	add	r24, r24
    c1e8:	88 0f       	add	r24, r24
    c1ea:	88 0f       	add	r24, r24
    c1ec:	8b 83       	std	Y+3, r24	; 0x03
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    c1ee:	2a 2c       	mov	r2, r10
    c1f0:	22 0c       	add	r2, r2
    c1f2:	22 0c       	add	r2, r2
    c1f4:	22 0c       	add	r2, r2
    c1f6:	dd 24       	eor	r13, r13
				{
					s->vy =  0;
					s->y = (y0_tile + 1) * 8;
    c1f8:	46 01       	movw	r8, r12
    c1fa:	9f ef       	ldi	r25, 0xFF	; 255
    c1fc:	89 1a       	sub	r8, r25
    c1fe:	99 0a       	sbc	r9, r25
    c200:	a3 e0       	ldi	r26, 0x03	; 3
    c202:	88 0c       	add	r8, r8
    c204:	99 1c       	adc	r9, r9
    c206:	aa 95       	dec	r26
    c208:	e1 f7       	brne	.-8      	; 0xc202 <collision_detect_level+0x90>
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    c20a:	e8 e0       	ldi	r30, 0x08	; 8
    c20c:	4e 9f       	mul	r20, r30
    c20e:	30 01       	movw	r6, r0
    c210:	11 24       	eor	r1, r1
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vy =  0;
					s->gravity = 0;
					s->y = y0_tile * 8;
    c212:	b3 e0       	ldi	r27, 0x03	; 3
    c214:	cc 0c       	add	r12, r12
    c216:	dd 1c       	adc	r13, r13
    c218:	ba 95       	dec	r27
    c21a:	e1 f7       	brne	.-8      	; 0xc214 <collision_detect_level+0xa2>
    c21c:	41 2c       	mov	r4, r1
    c21e:	10 e0       	ldi	r17, 0x00	; 0
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    c220:	45 14       	cp	r4, r5
    c222:	09 f4       	brne	.+2      	; 0xc226 <collision_detect_level+0xb4>
    c224:	b3 c0       	rjmp	.+358    	; 0xc38c <collision_detect_level+0x21a>
		{
			if (s->vy < 0)
    c226:	ed 81       	ldd	r30, Y+5	; 0x05
    c228:	fe 81       	ldd	r31, Y+6	; 0x06
    c22a:	84 81       	ldd	r24, Z+4	; 0x04
    c22c:	87 ff       	sbrs	r24, 7
    c22e:	47 c0       	rjmp	.+142    	; 0xc2be <collision_detect_level+0x14c>
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, y0_tile);
    c230:	49 81       	ldd	r20, Y+1	; 0x01
    c232:	64 2d       	mov	r22, r4
    c234:	6e 0d       	add	r22, r14
    c236:	80 91 d8 0f 	lds	r24, 0x0FD8
    c23a:	90 91 d9 0f 	lds	r25, 0x0FD9
    c23e:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c242:	38 2e       	mov	r3, r24
				lt2 = get_level_tile(game.current_level, x1_tile + x, y0_tile);
    c244:	49 81       	ldd	r20, Y+1	; 0x01
    c246:	64 2d       	mov	r22, r4
    c248:	6a 0d       	add	r22, r10
    c24a:	80 91 d8 0f 	lds	r24, 0x0FD8
    c24e:	90 91 d9 0f 	lds	r25, 0x0FD9
    c252:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c256:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c258:	83 2d       	mov	r24, r3
    c25a:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c25e:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c260:	80 2f       	mov	r24, r16
    c262:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c266:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) ||
    c268:	33 20       	and	r3, r3
    c26a:	71 f0       	breq	.+28     	; 0xc288 <collision_detect_level+0x116>
    c26c:	30 91 b9 0d 	lds	r19, 0x0DB9
    c270:	6b 81       	ldd	r22, Y+3	; 0x03
    c272:	63 1b       	sub	r22, r19
    c274:	ed 81       	ldd	r30, Y+5	; 0x05
    c276:	fe 81       	ldd	r31, Y+6	; 0x06
    c278:	80 81       	ld	r24, Z
    c27a:	28 e0       	ldi	r18, 0x08	; 8
    c27c:	48 e0       	ldi	r20, 0x08	; 8
    c27e:	83 1b       	sub	r24, r19
    c280:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c284:	84 30       	cpi	r24, 0x04	; 4
    c286:	80 f4       	brcc	.+32     	; 0xc2a8 <collision_detect_level+0x136>
    c288:	00 23       	and	r16, r16
    c28a:	c9 f0       	breq	.+50     	; 0xc2be <collision_detect_level+0x14c>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    c28c:	30 91 b9 0d 	lds	r19, 0x0DB9
    c290:	62 2d       	mov	r22, r2
    c292:	63 1b       	sub	r22, r19
    c294:	ed 81       	ldd	r30, Y+5	; 0x05
    c296:	fe 81       	ldd	r31, Y+6	; 0x06
    c298:	80 81       	ld	r24, Z
    c29a:	28 e0       	ldi	r18, 0x08	; 8
    c29c:	48 e0       	ldi	r20, 0x08	; 8
    c29e:	83 1b       	sub	r24, r19
    c2a0:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c2a4:	84 30       	cpi	r24, 0x04	; 4
    c2a6:	58 f0       	brcs	.+22     	; 0xc2be <collision_detect_level+0x14c>
				{
					s->vy =  0;
    c2a8:	ed 81       	ldd	r30, Y+5	; 0x05
    c2aa:	fe 81       	ldd	r31, Y+6	; 0x06
    c2ac:	14 82       	std	Z+4, r1	; 0x04
					s->y = (y0_tile + 1) * 8;
    c2ae:	93 82       	std	Z+3, r9	; 0x03
    c2b0:	82 82       	std	Z+2, r8	; 0x02
    c2b2:	30 16       	cp	r3, r16
    c2b4:	08 f4       	brcc	.+2      	; 0xc2b8 <collision_detect_level+0x146>
    c2b6:	30 2e       	mov	r3, r16
    c2b8:	13 15       	cp	r17, r3
    c2ba:	08 f4       	brcc	.+2      	; 0xc2be <collision_detect_level+0x14c>
    c2bc:	13 2d       	mov	r17, r3
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			if (s->vy > 0)
    c2be:	ed 81       	ldd	r30, Y+5	; 0x05
    c2c0:	fe 81       	ldd	r31, Y+6	; 0x06
    c2c2:	84 81       	ldd	r24, Z+4	; 0x04
    c2c4:	18 16       	cp	r1, r24
    c2c6:	0c f0       	brlt	.+2      	; 0xc2ca <collision_detect_level+0x158>
    c2c8:	5e c0       	rjmp	.+188    	; 0xc386 <collision_detect_level+0x214>
    c2ca:	42 81       	ldd	r20, Z+2	; 0x02
    c2cc:	53 81       	ldd	r21, Z+3	; 0x03
    c2ce:	41 50       	subi	r20, 0x01	; 1
    c2d0:	51 09       	sbc	r21, r1
			{
				lt1 = get_level_tile(game.current_level, x0_tile + x, (s->y + tile_height*8 - 1) / 8);
    c2d2:	46 0d       	add	r20, r6
    c2d4:	57 1d       	adc	r21, r7
    c2d6:	63 e0       	ldi	r22, 0x03	; 3
    c2d8:	56 95       	lsr	r21
    c2da:	47 95       	ror	r20
    c2dc:	6a 95       	dec	r22
    c2de:	e1 f7       	brne	.-8      	; 0xc2d8 <collision_detect_level+0x166>
    c2e0:	64 2d       	mov	r22, r4
    c2e2:	6e 0d       	add	r22, r14
    c2e4:	80 91 d8 0f 	lds	r24, 0x0FD8
    c2e8:	90 91 d9 0f 	lds	r25, 0x0FD9
    c2ec:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c2f0:	38 2e       	mov	r3, r24
    c2f2:	ed 81       	ldd	r30, Y+5	; 0x05
    c2f4:	fe 81       	ldd	r31, Y+6	; 0x06
    c2f6:	42 81       	ldd	r20, Z+2	; 0x02
    c2f8:	53 81       	ldd	r21, Z+3	; 0x03
    c2fa:	41 50       	subi	r20, 0x01	; 1
    c2fc:	51 09       	sbc	r21, r1
				lt2 = get_level_tile(game.current_level, x1_tile + x, (s->y + tile_height*8 - 1) / 8);
    c2fe:	46 0d       	add	r20, r6
    c300:	57 1d       	adc	r21, r7
    c302:	73 e0       	ldi	r23, 0x03	; 3
    c304:	56 95       	lsr	r21
    c306:	47 95       	ror	r20
    c308:	7a 95       	dec	r23
    c30a:	e1 f7       	brne	.-8      	; 0xc304 <collision_detect_level+0x192>
    c30c:	64 2d       	mov	r22, r4
    c30e:	6a 0d       	add	r22, r10
    c310:	80 91 d8 0f 	lds	r24, 0x0FD8
    c314:	90 91 d9 0f 	lds	r25, 0x0FD9
    c318:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c31c:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c31e:	83 2d       	mov	r24, r3
    c320:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c324:	38 2e       	mov	r3, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c326:	80 2f       	mov	r24, r16
    c328:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c32c:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->x-game.camera_x, x0_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD) || 
    c32e:	33 20       	and	r3, r3
    c330:	71 f0       	breq	.+28     	; 0xc34e <collision_detect_level+0x1dc>
    c332:	30 91 b9 0d 	lds	r19, 0x0DB9
    c336:	6b 81       	ldd	r22, Y+3	; 0x03
    c338:	63 1b       	sub	r22, r19
    c33a:	ed 81       	ldd	r30, Y+5	; 0x05
    c33c:	fe 81       	ldd	r31, Y+6	; 0x06
    c33e:	80 81       	ld	r24, Z
    c340:	28 e0       	ldi	r18, 0x08	; 8
    c342:	48 e0       	ldi	r20, 0x08	; 8
    c344:	83 1b       	sub	r24, r19
    c346:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c34a:	84 30       	cpi	r24, 0x04	; 4
    c34c:	80 f4       	brcc	.+32     	; 0xc36e <collision_detect_level+0x1fc>
    c34e:	00 23       	and	r16, r16
    c350:	d1 f0       	breq	.+52     	; 0xc386 <collision_detect_level+0x214>
					(solid_tile_2 && pixel_overlap(s->x-game.camera_x, x1_tile * 8-game.camera_x, 8, 8) >= OVERLAP_THRESHOLD))
    c352:	30 91 b9 0d 	lds	r19, 0x0DB9
    c356:	62 2d       	mov	r22, r2
    c358:	63 1b       	sub	r22, r19
    c35a:	ed 81       	ldd	r30, Y+5	; 0x05
    c35c:	fe 81       	ldd	r31, Y+6	; 0x06
    c35e:	80 81       	ld	r24, Z
    c360:	28 e0       	ldi	r18, 0x08	; 8
    c362:	48 e0       	ldi	r20, 0x08	; 8
    c364:	83 1b       	sub	r24, r19
    c366:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c36a:	84 30       	cpi	r24, 0x04	; 4
    c36c:	60 f0       	brcs	.+24     	; 0xc386 <collision_detect_level+0x214>
				{
					s->vy =  0;
    c36e:	ed 81       	ldd	r30, Y+5	; 0x05
    c370:	fe 81       	ldd	r31, Y+6	; 0x06
    c372:	14 82       	std	Z+4, r1	; 0x04
					s->gravity = 0;
    c374:	16 82       	std	Z+6, r1	; 0x06
					s->y = y0_tile * 8;
    c376:	d3 82       	std	Z+3, r13	; 0x03
    c378:	c2 82       	std	Z+2, r12	; 0x02
    c37a:	30 16       	cp	r3, r16
    c37c:	08 f4       	brcc	.+2      	; 0xc380 <collision_detect_level+0x20e>
    c37e:	30 2e       	mov	r3, r16
    c380:	13 15       	cp	r17, r3
    c382:	08 f4       	brcc	.+2      	; 0xc386 <collision_detect_level+0x214>
    c384:	13 2d       	mov	r17, r3
	u8 result = 0;
	
	// Top and Bottom
	if (s->vy != 0)
	{
		for (u8 x = 0; x < tile_width; x++)
    c386:	43 94       	inc	r4
    c388:	4b cf       	rjmp	.-362    	; 0xc220 <collision_detect_level+0xae>
	u8 x1_tile = (s->x+7) >> 3;
	u8 y1_tile = (s->y+7) >> 3;
	u8 lt1, lt2;
	u8 solid_tile_1 = 0;
	u8 solid_tile_2 = 0;
	u8 result = 0;
    c38a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	
	// Left and Right
	if (s->vx != 0)
    c38c:	ed 81       	ldd	r30, Y+5	; 0x05
    c38e:	fe 81       	ldd	r31, Y+6	; 0x06
    c390:	85 81       	ldd	r24, Z+5	; 0x05
    c392:	88 23       	and	r24, r24
    c394:	09 f4       	brne	.+2      	; 0xc398 <collision_detect_level+0x226>
    c396:	e1 c0       	rjmp	.+450    	; 0xc55a <collision_detect_level+0x3e8>
	{
		y0_tile = s->y / 8;
    c398:	c2 80       	ldd	r12, Z+2	; 0x02
    c39a:	d3 80       	ldd	r13, Z+3	; 0x03
    c39c:	56 01       	movw	r10, r12
    c39e:	23 e0       	ldi	r18, 0x03	; 3
    c3a0:	b6 94       	lsr	r11
    c3a2:	a7 94       	ror	r10
    c3a4:	2a 95       	dec	r18
    c3a6:	e1 f7       	brne	.-8      	; 0xc3a0 <collision_detect_level+0x22e>
		y1_tile = (s->y+7) / 8;
    c3a8:	f7 e0       	ldi	r31, 0x07	; 7
    c3aa:	cf 0e       	add	r12, r31
    c3ac:	d1 1c       	adc	r13, r1
    c3ae:	33 e0       	ldi	r19, 0x03	; 3
    c3b0:	d6 94       	lsr	r13
    c3b2:	c7 94       	ror	r12
    c3b4:	3a 95       	dec	r19
    c3b6:	e1 f7       	brne	.-8      	; 0xc3b0 <collision_detect_level+0x23e>
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
				solid_tile_1 = solid_or_hazard_tile(lt1);
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c3b8:	3a 2c       	mov	r3, r10
    c3ba:	33 0c       	add	r3, r3
    c3bc:	33 0c       	add	r3, r3
    c3be:	33 0c       	add	r3, r3
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c3c0:	4c 2c       	mov	r4, r12
    c3c2:	44 0c       	add	r4, r4
    c3c4:	44 0c       	add	r4, r4
    c3c6:	44 0c       	add	r4, r4
    c3c8:	ff 24       	eor	r15, r15
				{
					s->vx =  0;
					s->x = (x0_tile + 1) * 8;
    c3ca:	37 01       	movw	r6, r14
    c3cc:	8f ef       	ldi	r24, 0xFF	; 255
    c3ce:	68 1a       	sub	r6, r24
    c3d0:	78 0a       	sbc	r7, r24
    c3d2:	43 e0       	ldi	r20, 0x03	; 3
    c3d4:	66 0c       	add	r6, r6
    c3d6:	77 1c       	adc	r7, r7
    c3d8:	4a 95       	dec	r20
    c3da:	e1 f7       	brne	.-8      	; 0xc3d4 <collision_detect_level+0x262>
				}
			}
			
			if (s->vx > 0)
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    c3dc:	98 e0       	ldi	r25, 0x08	; 8
    c3de:	59 9e       	mul	r5, r25
    c3e0:	40 01       	movw	r8, r0
    c3e2:	11 24       	eor	r1, r1
				solid_tile_2 = solid_or_hazard_tile(lt2);
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
				{
					s->vx =  0;
					s->x = x0_tile * 8;
    c3e4:	53 e0       	ldi	r21, 0x03	; 3
    c3e6:	ee 0c       	add	r14, r14
    c3e8:	ff 1c       	adc	r15, r15
    c3ea:	5a 95       	dec	r21
    c3ec:	e1 f7       	brne	.-8      	; 0xc3e6 <collision_detect_level+0x274>
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    c3ee:	51 2c       	mov	r5, r1
    c3f0:	fc 81       	ldd	r31, Y+4	; 0x04
    c3f2:	5f 16       	cp	r5, r31
    c3f4:	09 f4       	brne	.+2      	; 0xc3f8 <collision_detect_level+0x286>
    c3f6:	b1 c0       	rjmp	.+354    	; 0xc55a <collision_detect_level+0x3e8>
		{
			if (s->vx < 0)
    c3f8:	ed 81       	ldd	r30, Y+5	; 0x05
    c3fa:	fe 81       	ldd	r31, Y+6	; 0x06
    c3fc:	85 81       	ldd	r24, Z+5	; 0x05
    c3fe:	87 ff       	sbrs	r24, 7
    c400:	47 c0       	rjmp	.+142    	; 0xc490 <collision_detect_level+0x31e>
    c402:	45 2d       	mov	r20, r5
    c404:	4a 0d       	add	r20, r10
			{
				lt1 = get_level_tile(game.current_level, x0_tile, y0_tile + y);
    c406:	6a 81       	ldd	r22, Y+2	; 0x02
    c408:	80 91 d8 0f 	lds	r24, 0x0FD8
    c40c:	90 91 d9 0f 	lds	r25, 0x0FD9
    c410:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c414:	28 2e       	mov	r2, r24
    c416:	45 2d       	mov	r20, r5
    c418:	4c 0d       	add	r20, r12
				lt2 = get_level_tile(game.current_level, x0_tile, y1_tile + y);
    c41a:	6a 81       	ldd	r22, Y+2	; 0x02
    c41c:	80 91 d8 0f 	lds	r24, 0x0FD8
    c420:	90 91 d9 0f 	lds	r25, 0x0FD9
    c424:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c428:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c42a:	82 2d       	mov	r24, r2
    c42c:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c430:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c432:	80 2f       	mov	r24, r16
    c434:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c438:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c43a:	22 20       	and	r2, r2
    c43c:	71 f0       	breq	.+28     	; 0xc45a <collision_detect_level+0x2e8>
    c43e:	30 91 c1 0d 	lds	r19, 0x0DC1
    c442:	63 2d       	mov	r22, r3
    c444:	63 1b       	sub	r22, r19
    c446:	ed 81       	ldd	r30, Y+5	; 0x05
    c448:	fe 81       	ldd	r31, Y+6	; 0x06
    c44a:	82 81       	ldd	r24, Z+2	; 0x02
    c44c:	28 e0       	ldi	r18, 0x08	; 8
    c44e:	48 e0       	ldi	r20, 0x08	; 8
    c450:	83 1b       	sub	r24, r19
    c452:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c456:	84 30       	cpi	r24, 0x04	; 4
    c458:	80 f4       	brcc	.+32     	; 0xc47a <collision_detect_level+0x308>
    c45a:	00 23       	and	r16, r16
    c45c:	c9 f0       	breq	.+50     	; 0xc490 <collision_detect_level+0x31e>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c45e:	30 91 c1 0d 	lds	r19, 0x0DC1
    c462:	64 2d       	mov	r22, r4
    c464:	63 1b       	sub	r22, r19
    c466:	ed 81       	ldd	r30, Y+5	; 0x05
    c468:	fe 81       	ldd	r31, Y+6	; 0x06
    c46a:	82 81       	ldd	r24, Z+2	; 0x02
    c46c:	28 e0       	ldi	r18, 0x08	; 8
    c46e:	48 e0       	ldi	r20, 0x08	; 8
    c470:	83 1b       	sub	r24, r19
    c472:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c476:	84 30       	cpi	r24, 0x04	; 4
    c478:	58 f0       	brcs	.+22     	; 0xc490 <collision_detect_level+0x31e>
				{
					s->vx =  0;
    c47a:	ed 81       	ldd	r30, Y+5	; 0x05
    c47c:	fe 81       	ldd	r31, Y+6	; 0x06
    c47e:	15 82       	std	Z+5, r1	; 0x05
					s->x = (x0_tile + 1) * 8;
    c480:	71 82       	std	Z+1, r7	; 0x01
    c482:	60 82       	st	Z, r6
    c484:	20 16       	cp	r2, r16
    c486:	08 f4       	brcc	.+2      	; 0xc48a <collision_detect_level+0x318>
    c488:	20 2e       	mov	r2, r16
    c48a:	12 15       	cp	r17, r2
    c48c:	08 f4       	brcc	.+2      	; 0xc490 <collision_detect_level+0x31e>
    c48e:	12 2d       	mov	r17, r2
					if (solid_tile_1 > result) result = solid_tile_1;
					if (solid_tile_2 > result) result = solid_tile_2;
				}
			}
			
			if (s->vx > 0)
    c490:	ed 81       	ldd	r30, Y+5	; 0x05
    c492:	fe 81       	ldd	r31, Y+6	; 0x06
    c494:	85 81       	ldd	r24, Z+5	; 0x05
    c496:	18 16       	cp	r1, r24
    c498:	0c f0       	brlt	.+2      	; 0xc49c <collision_detect_level+0x32a>
    c49a:	5d c0       	rjmp	.+186    	; 0xc556 <collision_detect_level+0x3e4>
    c49c:	60 81       	ld	r22, Z
    c49e:	71 81       	ldd	r23, Z+1	; 0x01
    c4a0:	61 50       	subi	r22, 0x01	; 1
    c4a2:	71 09       	sbc	r23, r1
			{
				lt1 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y0_tile + y);
    c4a4:	68 0d       	add	r22, r8
    c4a6:	79 1d       	adc	r23, r9
    c4a8:	83 e0       	ldi	r24, 0x03	; 3
    c4aa:	76 95       	lsr	r23
    c4ac:	67 95       	ror	r22
    c4ae:	8a 95       	dec	r24
    c4b0:	e1 f7       	brne	.-8      	; 0xc4aa <collision_detect_level+0x338>
    c4b2:	45 2d       	mov	r20, r5
    c4b4:	4a 0d       	add	r20, r10
    c4b6:	80 91 d8 0f 	lds	r24, 0x0FD8
    c4ba:	90 91 d9 0f 	lds	r25, 0x0FD9
    c4be:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c4c2:	28 2e       	mov	r2, r24
    c4c4:	ed 81       	ldd	r30, Y+5	; 0x05
    c4c6:	fe 81       	ldd	r31, Y+6	; 0x06
    c4c8:	60 81       	ld	r22, Z
    c4ca:	71 81       	ldd	r23, Z+1	; 0x01
    c4cc:	61 50       	subi	r22, 0x01	; 1
    c4ce:	71 09       	sbc	r23, r1
				lt2 = get_level_tile(game.current_level, (s->x + tile_width * 8 - 1) / 8, y1_tile + y);
    c4d0:	68 0d       	add	r22, r8
    c4d2:	79 1d       	adc	r23, r9
    c4d4:	93 e0       	ldi	r25, 0x03	; 3
    c4d6:	76 95       	lsr	r23
    c4d8:	67 95       	ror	r22
    c4da:	9a 95       	dec	r25
    c4dc:	e1 f7       	brne	.-8      	; 0xc4d6 <collision_detect_level+0x364>
    c4de:	45 2d       	mov	r20, r5
    c4e0:	4c 0d       	add	r20, r12
    c4e2:	80 91 d8 0f 	lds	r24, 0x0FD8
    c4e6:	90 91 d9 0f 	lds	r25, 0x0FD9
    c4ea:	0e 94 91 5c 	call	0xb922	; 0xb922 <get_level_tile>
    c4ee:	08 2f       	mov	r16, r24
				solid_tile_1 = solid_or_hazard_tile(lt1);
    c4f0:	82 2d       	mov	r24, r2
    c4f2:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c4f6:	28 2e       	mov	r2, r24
				solid_tile_2 = solid_or_hazard_tile(lt2);
    c4f8:	80 2f       	mov	r24, r16
    c4fa:	0e 94 ae 5d 	call	0xbb5c	; 0xbb5c <solid_or_hazard_tile>
    c4fe:	08 2f       	mov	r16, r24
				if ((solid_tile_1 && pixel_overlap(s->y-game.camera_y, y0_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD) ||
    c500:	22 20       	and	r2, r2
    c502:	71 f0       	breq	.+28     	; 0xc520 <collision_detect_level+0x3ae>
    c504:	30 91 c1 0d 	lds	r19, 0x0DC1
    c508:	63 2d       	mov	r22, r3
    c50a:	63 1b       	sub	r22, r19
    c50c:	ed 81       	ldd	r30, Y+5	; 0x05
    c50e:	fe 81       	ldd	r31, Y+6	; 0x06
    c510:	82 81       	ldd	r24, Z+2	; 0x02
    c512:	28 e0       	ldi	r18, 0x08	; 8
    c514:	48 e0       	ldi	r20, 0x08	; 8
    c516:	83 1b       	sub	r24, r19
    c518:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c51c:	84 30       	cpi	r24, 0x04	; 4
    c51e:	80 f4       	brcc	.+32     	; 0xc540 <collision_detect_level+0x3ce>
    c520:	00 23       	and	r16, r16
    c522:	c9 f0       	breq	.+50     	; 0xc556 <collision_detect_level+0x3e4>
					(solid_tile_2 && pixel_overlap(s->y-game.camera_y, y1_tile * 8-game.camera_y, 8, 8) >= OVERLAP_THRESHOLD))
    c524:	30 91 c1 0d 	lds	r19, 0x0DC1
    c528:	64 2d       	mov	r22, r4
    c52a:	63 1b       	sub	r22, r19
    c52c:	ed 81       	ldd	r30, Y+5	; 0x05
    c52e:	fe 81       	ldd	r31, Y+6	; 0x06
    c530:	82 81       	ldd	r24, Z+2	; 0x02
    c532:	28 e0       	ldi	r18, 0x08	; 8
    c534:	48 e0       	ldi	r20, 0x08	; 8
    c536:	83 1b       	sub	r24, r19
    c538:	0e 94 ac 60 	call	0xc158	; 0xc158 <pixel_overlap>
    c53c:	84 30       	cpi	r24, 0x04	; 4
    c53e:	58 f0       	brcs	.+22     	; 0xc556 <collision_detect_level+0x3e4>
				{
					s->vx =  0;
    c540:	ed 81       	ldd	r30, Y+5	; 0x05
    c542:	fe 81       	ldd	r31, Y+6	; 0x06
    c544:	15 82       	std	Z+5, r1	; 0x05
					s->x = x0_tile * 8;
    c546:	f1 82       	std	Z+1, r15	; 0x01
    c548:	e0 82       	st	Z, r14
    c54a:	20 16       	cp	r2, r16
    c54c:	08 f4       	brcc	.+2      	; 0xc550 <collision_detect_level+0x3de>
    c54e:	20 2e       	mov	r2, r16
    c550:	12 15       	cp	r17, r2
    c552:	08 f4       	brcc	.+2      	; 0xc556 <collision_detect_level+0x3e4>
    c554:	12 2d       	mov	r17, r2
	// Left and Right
	if (s->vx != 0)
	{
		y0_tile = s->y / 8;
		y1_tile = (s->y+7) / 8;
		for (u8 y = 0; y < tile_height; y++)
    c556:	53 94       	inc	r5
    c558:	4b cf       	rjmp	.-362    	; 0xc3f0 <collision_detect_level+0x27e>
				}
			}
		}
	}
	return result;
}
    c55a:	81 2f       	mov	r24, r17
    c55c:	26 96       	adiw	r28, 0x06	; 6
    c55e:	0f b6       	in	r0, 0x3f	; 63
    c560:	f8 94       	cli
    c562:	de bf       	out	0x3e, r29	; 62
    c564:	0f be       	out	0x3f, r0	; 63
    c566:	cd bf       	out	0x3d, r28	; 61
    c568:	df 91       	pop	r29
    c56a:	cf 91       	pop	r28
    c56c:	1f 91       	pop	r17
    c56e:	0f 91       	pop	r16
    c570:	ff 90       	pop	r15
    c572:	ef 90       	pop	r14
    c574:	df 90       	pop	r13
    c576:	cf 90       	pop	r12
    c578:	bf 90       	pop	r11
    c57a:	af 90       	pop	r10
    c57c:	9f 90       	pop	r9
    c57e:	8f 90       	pop	r8
    c580:	7f 90       	pop	r7
    c582:	6f 90       	pop	r6
    c584:	5f 90       	pop	r5
    c586:	4f 90       	pop	r4
    c588:	3f 90       	pop	r3
    c58a:	2f 90       	pop	r2
    c58c:	08 95       	ret

0000c58e <animate_shot>:
	if (s->y+8 > game.camera_y + CAMERA_HEIGHT*8) return 1;
	return 0;
}

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
    c58e:	2f 92       	push	r2
    c590:	3f 92       	push	r3
    c592:	4f 92       	push	r4
    c594:	5f 92       	push	r5
    c596:	6f 92       	push	r6
    c598:	7f 92       	push	r7
    c59a:	8f 92       	push	r8
    c59c:	9f 92       	push	r9
    c59e:	af 92       	push	r10
    c5a0:	bf 92       	push	r11
    c5a2:	cf 92       	push	r12
    c5a4:	df 92       	push	r13
    c5a6:	ef 92       	push	r14
    c5a8:	ff 92       	push	r15
    c5aa:	0f 93       	push	r16
    c5ac:	1f 93       	push	r17
    c5ae:	cf 93       	push	r28
    c5b0:	df 93       	push	r29
    c5b2:	00 d0       	rcall	.+0      	; 0xc5b4 <animate_shot+0x26>
    c5b4:	00 d0       	rcall	.+0      	; 0xc5b6 <animate_shot+0x28>
    c5b6:	1f 92       	push	r1
    c5b8:	cd b7       	in	r28, 0x3d	; 61
    c5ba:	de b7       	in	r29, 0x3e	; 62
    c5bc:	2c 01       	movw	r4, r24
    c5be:	3b 01       	movw	r6, r22
    c5c0:	d4 2e       	mov	r13, r20
    c5c2:	4c 01       	movw	r8, r24
    c5c4:	29 e1       	ldi	r18, 0x19	; 25
    c5c6:	82 0e       	add	r8, r18
    c5c8:	91 1c       	adc	r9, r1
    c5ca:	40 96       	adiw	r24, 0x10	; 16
    c5cc:	9d 83       	std	Y+5, r25	; 0x05
    c5ce:	8c 83       	std	Y+4, r24	; 0x04
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c5d0:	10 e0       	ldi	r17, 0x00	; 0
							other_player->shield -= player->shot[i].hit_count;
							if (other_player->shield <= 0)
							{
								SFX_PLAYER_EXPLODE;
								other_player->shield = 0;
								other_player->flags = EXPLODING;
    c5d2:	30 e1       	ldi	r19, 0x10	; 16
    c5d4:	b3 2e       	mov	r11, r19
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
	{
		if (player->shot[i].active)
    c5d6:	f4 01       	movw	r30, r8
    c5d8:	80 81       	ld	r24, Z
    c5da:	88 23       	and	r24, r24
    c5dc:	09 f4       	brne	.+2      	; 0xc5e0 <animate_shot+0x52>
    c5de:	12 c1       	rjmp	.+548    	; 0xc804 <animate_shot+0x276>
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
    c5e0:	60 91 d3 0d 	lds	r22, 0x0DD3
    c5e4:	34 97       	sbiw	r30, 0x04	; 4
    c5e6:	80 81       	ld	r24, Z
    c5e8:	0e 94 62 51 	call	0xa2c4	; 0xa2c4 <LBMoveDelta>
    c5ec:	88 0f       	add	r24, r24
    c5ee:	99 1f       	adc	r25, r25
    c5f0:	ec 81       	ldd	r30, Y+4	; 0x04
    c5f2:	fd 81       	ldd	r31, Y+5	; 0x05
    c5f4:	20 81       	ld	r18, Z
    c5f6:	31 81       	ldd	r19, Z+1	; 0x01
    c5f8:	82 0f       	add	r24, r18
    c5fa:	93 1f       	adc	r25, r19
    c5fc:	91 83       	std	Z+1, r25	; 0x01
    c5fe:	80 83       	st	Z, r24
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
    c600:	60 91 d3 0d 	lds	r22, 0x0DD3
    c604:	f4 01       	movw	r30, r8
    c606:	35 97       	sbiw	r30, 0x05	; 5
    c608:	80 81       	ld	r24, Z
    c60a:	0e 94 62 51 	call	0xa2c4	; 0xa2c4 <LBMoveDelta>
    c60e:	ec 81       	ldd	r30, Y+4	; 0x04
    c610:	fd 81       	ldd	r31, Y+5	; 0x05
    c612:	42 81       	ldd	r20, Z+2	; 0x02
    c614:	53 81       	ldd	r21, Z+3	; 0x03
    c616:	84 0f       	add	r24, r20
    c618:	95 1f       	adc	r25, r21
    c61a:	93 83       	std	Z+3, r25	; 0x03
    c61c:	82 83       	std	Z+2, r24	; 0x02
    c61e:	f1 2e       	mov	r15, r17
    c620:	fd 0c       	add	r15, r13
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
    c622:	90 91 c1 0d 	lds	r25, 0x0DC1
    c626:	48 2f       	mov	r20, r24
    c628:	49 1b       	sub	r20, r25
    c62a:	60 81       	ld	r22, Z
    c62c:	80 91 b9 0d 	lds	r24, 0x0DB9
    c630:	68 1b       	sub	r22, r24
    c632:	01 e0       	ldi	r16, 0x01	; 1
    c634:	21 e0       	ldi	r18, 0x01	; 1
    c636:	8f 2d       	mov	r24, r15
    c638:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
			if (out_of_bounds(&player->shot[i].shared) ||
    c63c:	8c 81       	ldd	r24, Y+4	; 0x04
    c63e:	9d 81       	ldd	r25, Y+5	; 0x05
    c640:	0e 94 13 60 	call	0xc026	; 0xc026 <out_of_bounds>
    c644:	81 11       	cpse	r24, r1
    c646:	d1 c0       	rjmp	.+418    	; 0xc7ea <animate_shot+0x25c>
			    collision_detect_level(&player->shot[i].shared, 1, 1))
    c648:	41 e0       	ldi	r20, 0x01	; 1
    c64a:	61 e0       	ldi	r22, 0x01	; 1
    c64c:	8c 81       	ldd	r24, Y+4	; 0x04
    c64e:	9d 81       	ldd	r25, Y+5	; 0x05
    c650:	0e 94 b9 60 	call	0xc172	; 0xc172 <collision_detect_level>
		if (player->shot[i].active)
		{
			player->shot[i].shared.x += LBMoveDelta(player->shot[i].shared.vx, game.frame_counter)*2;
			player->shot[i].shared.y += LBMoveDelta(player->shot[i].shared.vy, game.frame_counter);
			LBMoveSprite(shot_slot+i, player->shot[i].shared.x - game.camera_x, player->shot[i].shared.y - game.camera_y, 1, 1);
			if (out_of_bounds(&player->shot[i].shared) ||
    c654:	81 11       	cpse	r24, r1
    c656:	c9 c0       	rjmp	.+402    	; 0xc7ea <animate_shot+0x25c>
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c658:	90 91 b9 0d 	lds	r25, 0x0DB9
    c65c:	8b ed       	ldi	r24, 0xDB	; 219
    c65e:	28 2e       	mov	r2, r24
    c660:	8e e0       	ldi	r24, 0x0E	; 14
    c662:	38 2e       	mov	r3, r24
    c664:	1a 82       	std	Y+2, r1	; 0x02
    c666:	19 82       	std	Y+1, r1	; 0x01
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c668:	f1 01       	movw	r30, r2
    c66a:	80 81       	ld	r24, Z
    c66c:	82 30       	cpi	r24, 0x02	; 2
    c66e:	09 f4       	brne	.+2      	; 0xc672 <animate_shot+0xe4>
    c670:	68 c0       	rjmp	.+208    	; 0xc742 <animate_shot+0x1b4>
    c672:	35 97       	sbiw	r30, 0x05	; 5
    c674:	80 81       	ld	r24, Z
    c676:	88 23       	and	r24, r24
    c678:	09 f4       	brne	.+2      	; 0xc67c <animate_shot+0xee>
    c67a:	63 c0       	rjmp	.+198    	; 0xc742 <animate_shot+0x1b4>
    c67c:	34 96       	adiw	r30, 0x04	; 4
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c67e:	a0 80       	ld	r10, Z
    c680:	aa 0c       	add	r10, r10
    c682:	aa 0c       	add	r10, r10
    c684:	aa 0c       	add	r10, r10
    c686:	31 97       	sbiw	r30, 0x01	; 1
    c688:	c0 80       	ld	r12, Z
    c68a:	cc 0c       	add	r12, r12
    c68c:	cc 0c       	add	r12, r12
    c68e:	cc 0c       	add	r12, r12
    c690:	3a 97       	sbiw	r30, 0x0a	; 10
    c692:	00 81       	ld	r16, Z
    c694:	09 1b       	sub	r16, r25
    c696:	ec 81       	ldd	r30, Y+4	; 0x04
    c698:	fd 81       	ldd	r31, Y+5	; 0x05
    c69a:	80 81       	ld	r24, Z
    c69c:	f1 01       	movw	r30, r2
    c69e:	3a 97       	sbiw	r30, 0x0a	; 10
    c6a0:	e0 80       	ld	r14, Z
    c6a2:	28 e0       	ldi	r18, 0x08	; 8
    c6a4:	48 e0       	ldi	r20, 0x08	; 8
    c6a6:	ec 81       	ldd	r30, Y+4	; 0x04
    c6a8:	fd 81       	ldd	r31, Y+5	; 0x05
    c6aa:	62 81       	ldd	r22, Z+2	; 0x02
    c6ac:	89 1b       	sub	r24, r25
    c6ae:	9b 83       	std	Y+3, r25	; 0x03
    c6b0:	0e 94 a4 52 	call	0xa548	; 0xa548 <LBCollides>
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
				{
					if (game.enemies[j].enemy_type != ENEMY_PROJECTILE_HAZARD && game.enemies[j].active &&
    c6b4:	9b 81       	ldd	r25, Y+3	; 0x03
    c6b6:	88 23       	and	r24, r24
    c6b8:	09 f4       	brne	.+2      	; 0xc6bc <animate_shot+0x12e>
    c6ba:	43 c0       	rjmp	.+134    	; 0xc742 <animate_shot+0x1b4>
					    LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
							game.enemies[j].shared.x-game.camera_x, game.enemies[j].shared.y, game.enemies[j].width*8, game.enemies[j].height*8
						)
					)
					{
						SFX_HIT;
    c6bc:	41 e0       	ldi	r20, 0x01	; 1
    c6be:	6f ef       	ldi	r22, 0xFF	; 255
    c6c0:	84 e0       	ldi	r24, 0x04	; 4
    c6c2:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
						game.enemies[j].shield -= player->shot[i].hit_count;
    c6c6:	45 e3       	ldi	r20, 0x35	; 53
    c6c8:	29 81       	ldd	r18, Y+1	; 0x01
    c6ca:	3a 81       	ldd	r19, Y+2	; 0x02
    c6cc:	42 9f       	mul	r20, r18
    c6ce:	c0 01       	movw	r24, r0
    c6d0:	43 9f       	mul	r20, r19
    c6d2:	90 0d       	add	r25, r0
    c6d4:	11 24       	eor	r1, r1
    c6d6:	fc 01       	movw	r30, r24
    c6d8:	e7 54       	subi	r30, 0x47	; 71
    c6da:	f2 4f       	sbci	r31, 0xF2	; 242
    c6dc:	1f 01       	movw	r2, r30
    c6de:	df 01       	movw	r26, r30
    c6e0:	aa 5d       	subi	r26, 0xDA	; 218
    c6e2:	be 4f       	sbci	r27, 0xFE	; 254
    c6e4:	8c 91       	ld	r24, X
    c6e6:	f4 01       	movw	r30, r8
    c6e8:	31 97       	sbiw	r30, 0x01	; 1
    c6ea:	90 81       	ld	r25, Z
    c6ec:	89 1b       	sub	r24, r25
    c6ee:	8c 93       	st	X, r24
						if (game.enemies[j].shield <= 0)
    c6f0:	18 16       	cp	r1, r24
    c6f2:	cc f0       	brlt	.+50     	; 0xc726 <animate_shot+0x198>
						{
							SFX_ENEMY_EXPLODE;
    c6f4:	41 e0       	ldi	r20, 0x01	; 1
    c6f6:	6f ef       	ldi	r22, 0xFF	; 255
    c6f8:	86 e0       	ldi	r24, 0x06	; 6
    c6fa:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
							game.enemies[j].flags = EXPLODING;
    c6fe:	f1 01       	movw	r30, r2
    c700:	e2 5e       	subi	r30, 0xE2	; 226
    c702:	fe 4f       	sbci	r31, 0xFE	; 254
    c704:	b0 82       	st	Z, r11
							game.enemies[j].active = 0;
    c706:	31 97       	sbiw	r30, 0x01	; 1
    c708:	10 82       	st	Z, r1
							game.active_enemies--;
    c70a:	80 91 d4 0d 	lds	r24, 0x0DD4
    c70e:	81 50       	subi	r24, 0x01	; 1
    c710:	80 93 d4 0d 	sts	0x0DD4, r24
							game.level_score += KILL_SCORE;
    c714:	80 91 bd 0d 	lds	r24, 0x0DBD
    c718:	90 91 be 0d 	lds	r25, 0x0DBE
    c71c:	0a 96       	adiw	r24, 0x0a	; 10
    c71e:	90 93 be 0d 	sts	0x0DBE, r25
    c722:	80 93 bd 0d 	sts	0x0DBD, r24
						}
						player->shot[i].active = 0;
    c726:	f4 01       	movw	r30, r8
    c728:	10 82       	st	Z, r1
						player->active_shots--;
    c72a:	f2 01       	movw	r30, r4
    c72c:	87 81       	ldd	r24, Z+7	; 0x07
    c72e:	81 50       	subi	r24, 0x01	; 1
    c730:	87 83       	std	Z+7, r24	; 0x07
						LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c732:	01 e0       	ldi	r16, 0x01	; 1
    c734:	21 e0       	ldi	r18, 0x01	; 1
    c736:	40 e0       	ldi	r20, 0x00	; 0
    c738:	60 ee       	ldi	r22, 0xE0	; 224
    c73a:	8f 2d       	mov	r24, r15
    c73c:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
						break;
    c740:	0e c0       	rjmp	.+28     	; 0xc75e <animate_shot+0x1d0>
    c742:	29 81       	ldd	r18, Y+1	; 0x01
    c744:	3a 81       	ldd	r19, Y+2	; 0x02
    c746:	2f 5f       	subi	r18, 0xFF	; 255
    c748:	3f 4f       	sbci	r19, 0xFF	; 255
    c74a:	3a 83       	std	Y+2, r19	; 0x02
    c74c:	29 83       	std	Y+1, r18	; 0x01
    c74e:	35 e3       	ldi	r19, 0x35	; 53
    c750:	23 0e       	add	r2, r19
    c752:	31 1c       	adc	r3, r1
				LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
			}
			else
			{
				slot = ENEMY_SLOT;
				for (u8 j = 0; j < MAX_ENEMIES; j++)
    c754:	e9 81       	ldd	r30, Y+1	; 0x01
    c756:	fa 81       	ldd	r31, Y+2	; 0x02
    c758:	35 97       	sbiw	r30, 0x05	; 5
    c75a:	09 f0       	breq	.+2      	; 0xc75e <animate_shot+0x1d0>
    c75c:	85 cf       	rjmp	.-246    	; 0xc668 <animate_shot+0xda>
					}
					slot += game.enemies[j].width*game.enemies[j].height;
				}
				
				// Boss interaction
				if (!(other_player == &game.player && DEBUG_GODMODE) && other_player->active)
    c75e:	f3 01       	movw	r30, r6
    c760:	85 85       	ldd	r24, Z+13	; 0x0d
    c762:	88 23       	and	r24, r24
    c764:	09 f4       	brne	.+2      	; 0xc768 <animate_shot+0x1da>
    c766:	4e c0       	rjmp	.+156    	; 0xc804 <animate_shot+0x276>
				{
					if (LBCollides(player->shot[i].shared.x-game.camera_x,player->shot[i].shared.y, 8, 8,
    c768:	90 91 b9 0d 	lds	r25, 0x0DB9
    c76c:	a4 84       	ldd	r10, Z+12	; 0x0c
    c76e:	aa 0c       	add	r10, r10
    c770:	aa 0c       	add	r10, r10
    c772:	aa 0c       	add	r10, r10
    c774:	c3 84       	ldd	r12, Z+11	; 0x0b
    c776:	cc 0c       	add	r12, r12
    c778:	cc 0c       	add	r12, r12
    c77a:	cc 0c       	add	r12, r12
    c77c:	00 81       	ld	r16, Z
    c77e:	09 1b       	sub	r16, r25
    c780:	ec 81       	ldd	r30, Y+4	; 0x04
    c782:	fd 81       	ldd	r31, Y+5	; 0x05
    c784:	80 81       	ld	r24, Z
    c786:	f3 01       	movw	r30, r6
    c788:	e2 80       	ldd	r14, Z+2	; 0x02
    c78a:	28 e0       	ldi	r18, 0x08	; 8
    c78c:	48 e0       	ldi	r20, 0x08	; 8
    c78e:	ec 81       	ldd	r30, Y+4	; 0x04
    c790:	fd 81       	ldd	r31, Y+5	; 0x05
    c792:	62 81       	ldd	r22, Z+2	; 0x02
    c794:	89 1b       	sub	r24, r25
    c796:	0e 94 a4 52 	call	0xa548	; 0xa548 <LBCollides>
    c79a:	88 23       	and	r24, r24
    c79c:	99 f1       	breq	.+102    	; 0xc804 <animate_shot+0x276>
								other_player->shared.x-game.camera_x, other_player->shared.y, other_player->width*8, other_player->height*8
							)
						)
						{
							SFX_HIT;
    c79e:	41 e0       	ldi	r20, 0x01	; 1
    c7a0:	6f ef       	ldi	r22, 0xFF	; 255
    c7a2:	84 e0       	ldi	r24, 0x04	; 4
    c7a4:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
							other_player->shield -= player->shot[i].hit_count;
    c7a8:	f3 01       	movw	r30, r6
    c7aa:	87 85       	ldd	r24, Z+15	; 0x0f
    c7ac:	f4 01       	movw	r30, r8
    c7ae:	31 97       	sbiw	r30, 0x01	; 1
    c7b0:	90 81       	ld	r25, Z
    c7b2:	89 1b       	sub	r24, r25
    c7b4:	f3 01       	movw	r30, r6
    c7b6:	87 87       	std	Z+15, r24	; 0x0f
							if (other_player->shield <= 0)
    c7b8:	18 16       	cp	r1, r24
    c7ba:	bc f0       	brlt	.+46     	; 0xc7ea <animate_shot+0x25c>
							{
								SFX_PLAYER_EXPLODE;
    c7bc:	41 e0       	ldi	r20, 0x01	; 1
    c7be:	6f ef       	ldi	r22, 0xFF	; 255
    c7c0:	85 e0       	ldi	r24, 0x05	; 5
    c7c2:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
								other_player->shield = 0;
    c7c6:	f3 01       	movw	r30, r6
    c7c8:	17 86       	std	Z+15, r1	; 0x0f
								other_player->flags = EXPLODING;
    c7ca:	b0 86       	std	Z+8, r11	; 0x08
								if (other_player == &game.boss) game.level_score += BOSS_KILL_SCORE;
    c7cc:	f4 e5       	ldi	r31, 0x54	; 84
    c7ce:	6f 16       	cp	r6, r31
    c7d0:	fe e0       	ldi	r31, 0x0E	; 14
    c7d2:	7f 06       	cpc	r7, r31
    c7d4:	51 f4       	brne	.+20     	; 0xc7ea <animate_shot+0x25c>
    c7d6:	80 91 bd 0d 	lds	r24, 0x0DBD
    c7da:	90 91 be 0d 	lds	r25, 0x0DBE
    c7de:	8c 59       	subi	r24, 0x9C	; 156
    c7e0:	9f 4f       	sbci	r25, 0xFF	; 255
    c7e2:	90 93 be 0d 	sts	0x0DBE, r25
    c7e6:	80 93 bd 0d 	sts	0x0DBD, r24
							}
							player->shot[i].active = 0;
    c7ea:	f4 01       	movw	r30, r8
    c7ec:	10 82       	st	Z, r1
							player->active_shots--;
    c7ee:	f2 01       	movw	r30, r4
    c7f0:	87 81       	ldd	r24, Z+7	; 0x07
    c7f2:	81 50       	subi	r24, 0x01	; 1
    c7f4:	87 83       	std	Z+7, r24	; 0x07
							LBMoveSprite(shot_slot+i, OFF_SCREEN, 0, 1, 1);
    c7f6:	01 e0       	ldi	r16, 0x01	; 1
    c7f8:	21 e0       	ldi	r18, 0x01	; 1
    c7fa:	40 e0       	ldi	r20, 0x00	; 0
    c7fc:	60 ee       	ldi	r22, 0xE0	; 224
    c7fe:	8f 2d       	mov	r24, r15
    c800:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>

void animate_shot(Player* player, Player* other_player, u8 shot_slot)
{
	// Animate shots
	u8 slot = ENEMY_SLOT;
	for (u8 i = 0; i < MAX_PLAYER_SHOTS; i++)
    c804:	1f 5f       	subi	r17, 0xFF	; 255
    c806:	f4 e1       	ldi	r31, 0x14	; 20
    c808:	8f 0e       	add	r8, r31
    c80a:	91 1c       	adc	r9, r1
    c80c:	2c 81       	ldd	r18, Y+4	; 0x04
    c80e:	3d 81       	ldd	r19, Y+5	; 0x05
    c810:	2c 5e       	subi	r18, 0xEC	; 236
    c812:	3f 4f       	sbci	r19, 0xFF	; 255
    c814:	3d 83       	std	Y+5, r19	; 0x05
    c816:	2c 83       	std	Y+4, r18	; 0x04
    c818:	13 30       	cpi	r17, 0x03	; 3
    c81a:	09 f0       	breq	.+2      	; 0xc81e <animate_shot+0x290>
    c81c:	dc ce       	rjmp	.-584    	; 0xc5d6 <animate_shot+0x48>
						}
				}
			}
		}
	}
}
    c81e:	0f 90       	pop	r0
    c820:	0f 90       	pop	r0
    c822:	0f 90       	pop	r0
    c824:	0f 90       	pop	r0
    c826:	0f 90       	pop	r0
    c828:	df 91       	pop	r29
    c82a:	cf 91       	pop	r28
    c82c:	1f 91       	pop	r17
    c82e:	0f 91       	pop	r16
    c830:	ff 90       	pop	r15
    c832:	ef 90       	pop	r14
    c834:	df 90       	pop	r13
    c836:	cf 90       	pop	r12
    c838:	bf 90       	pop	r11
    c83a:	af 90       	pop	r10
    c83c:	9f 90       	pop	r9
    c83e:	8f 90       	pop	r8
    c840:	7f 90       	pop	r7
    c842:	6f 90       	pop	r6
    c844:	5f 90       	pop	r5
    c846:	4f 90       	pop	r4
    c848:	3f 90       	pop	r3
    c84a:	2f 90       	pop	r2
    c84c:	08 95       	ret

0000c84e <map_explosion>:
	}
	return result;
}

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
    c84e:	7f 92       	push	r7
    c850:	8f 92       	push	r8
    c852:	9f 92       	push	r9
    c854:	af 92       	push	r10
    c856:	bf 92       	push	r11
    c858:	cf 92       	push	r12
    c85a:	df 92       	push	r13
    c85c:	ef 92       	push	r14
    c85e:	ff 92       	push	r15
    c860:	0f 93       	push	r16
    c862:	1f 93       	push	r17
    c864:	cf 93       	push	r28
    c866:	df 93       	push	r29
    c868:	1f 92       	push	r1
    c86a:	cd b7       	in	r28, 0x3d	; 61
    c86c:	de b7       	in	r29, 0x3e	; 62
    c86e:	6c 01       	movw	r12, r24
    c870:	7b 01       	movw	r14, r22
    c872:	74 2e       	mov	r7, r20
	char* frame;
	frame = LBGetNextFrame(anim);
    c874:	cb 01       	movw	r24, r22
    c876:	29 83       	std	Y+1, r18	; 0x01
    c878:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    c87c:	4c 01       	movw	r8, r24
	for (u8 i = 0; i < width*height; i++)
    c87e:	29 81       	ldd	r18, Y+1	; 0x01
    c880:	20 9f       	mul	r18, r16
    c882:	50 01       	movw	r10, r0
    c884:	11 24       	eor	r1, r1
    c886:	10 e0       	ldi	r17, 0x00	; 0
    c888:	81 2f       	mov	r24, r17
    c88a:	90 e0       	ldi	r25, 0x00	; 0
    c88c:	8a 15       	cp	r24, r10
    c88e:	9b 05       	cpc	r25, r11
    c890:	54 f4       	brge	.+20     	; 0xc8a6 <map_explosion+0x58>
	{
		LBMapSprite(slot+i, frame, 0);
    c892:	40 e0       	ldi	r20, 0x00	; 0
    c894:	b4 01       	movw	r22, r8
    c896:	81 2f       	mov	r24, r17
    c898:	87 0d       	add	r24, r7
    c89a:	29 83       	std	Y+1, r18	; 0x01
    c89c:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>

u8 map_explosion(u8* flags, Animation* anim, u8 slot, u8 width, u8 height)
{
	char* frame;
	frame = LBGetNextFrame(anim);
	for (u8 i = 0; i < width*height; i++)
    c8a0:	1f 5f       	subi	r17, 0xFF	; 255
    c8a2:	29 81       	ldd	r18, Y+1	; 0x01
    c8a4:	f1 cf       	rjmp	.-30     	; 0xc888 <map_explosion+0x3a>
	{
		LBMapSprite(slot+i, frame, 0);
	}
	if (anim->looped)
    c8a6:	f7 01       	movw	r30, r14
    c8a8:	84 81       	ldd	r24, Z+4	; 0x04
    c8aa:	88 23       	and	r24, r24
    c8ac:	51 f0       	breq	.+20     	; 0xc8c2 <map_explosion+0x74>
	{
		*flags ^= EXPLODING;
    c8ae:	f6 01       	movw	r30, r12
    c8b0:	80 81       	ld	r24, Z
    c8b2:	90 e1       	ldi	r25, 0x10	; 16
    c8b4:	98 27       	eor	r25, r24
    c8b6:	90 83       	st	Z, r25
		LBMoveSprite(slot, OFF_SCREEN, 0, width, height);
    c8b8:	40 e0       	ldi	r20, 0x00	; 0
    c8ba:	60 ee       	ldi	r22, 0xE0	; 224
    c8bc:	87 2d       	mov	r24, r7
    c8be:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	}
	return anim->looped;
}
    c8c2:	f7 01       	movw	r30, r14
    c8c4:	84 81       	ldd	r24, Z+4	; 0x04
    c8c6:	0f 90       	pop	r0
    c8c8:	df 91       	pop	r29
    c8ca:	cf 91       	pop	r28
    c8cc:	1f 91       	pop	r17
    c8ce:	0f 91       	pop	r16
    c8d0:	ff 90       	pop	r15
    c8d2:	ef 90       	pop	r14
    c8d4:	df 90       	pop	r13
    c8d6:	cf 90       	pop	r12
    c8d8:	bf 90       	pop	r11
    c8da:	af 90       	pop	r10
    c8dc:	9f 90       	pop	r9
    c8de:	8f 90       	pop	r8
    c8e0:	7f 90       	pop	r7
    c8e2:	08 95       	ret

0000c8e4 <animate_sprite>:

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
    c8e4:	8f 92       	push	r8
    c8e6:	9f 92       	push	r9
    c8e8:	af 92       	push	r10
    c8ea:	bf 92       	push	r11
    c8ec:	cf 92       	push	r12
    c8ee:	df 92       	push	r13
    c8f0:	ef 92       	push	r14
    c8f2:	ff 92       	push	r15
    c8f4:	0f 93       	push	r16
    c8f6:	1f 93       	push	r17
    c8f8:	cf 93       	push	r28
    c8fa:	df 93       	push	r29
    c8fc:	ec 01       	movw	r28, r24
    c8fe:	c6 2e       	mov	r12, r22
    c900:	14 2f       	mov	r17, r20
    c902:	d2 2e       	mov	r13, r18
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c904:	6c 81       	ldd	r22, Y+4	; 0x04
    c906:	77 27       	eor	r23, r23
    c908:	67 fd       	sbrc	r22, 7
    c90a:	70 95       	com	r23
    c90c:	87 2f       	mov	r24, r23
    c90e:	97 2f       	mov	r25, r23
    c910:	0e 94 a8 76 	call	0xed50	; 0xed50 <__floatsisf>
    c914:	4b 01       	movw	r8, r22
    c916:	5c 01       	movw	r10, r24
    c918:	8e 81       	ldd	r24, Y+6	; 0x06
    c91a:	68 2f       	mov	r22, r24
    c91c:	70 e0       	ldi	r23, 0x00	; 0
    c91e:	80 e0       	ldi	r24, 0x00	; 0
    c920:	90 e0       	ldi	r25, 0x00	; 0
    c922:	0e 94 a8 76 	call	0xed50	; 0xed50 <__floatsisf>
    c926:	29 e8       	ldi	r18, 0x89	; 137
    c928:	38 e8       	ldi	r19, 0x88	; 136
    c92a:	48 e8       	ldi	r20, 0x88	; 136
    c92c:	5c e3       	ldi	r21, 0x3C	; 60
    c92e:	0e 94 34 77 	call	0xee68	; 0xee68 <__mulsf3>
    c932:	9b 01       	movw	r18, r22
    c934:	ac 01       	movw	r20, r24
    c936:	c5 01       	movw	r24, r10
    c938:	b4 01       	movw	r22, r8
    c93a:	0e 94 11 76 	call	0xec22	; 0xec22 <__addsf3>
    c93e:	0e 94 75 76 	call	0xecea	; 0xecea <__fixsfsi>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c942:	69 37       	cpi	r22, 0x79	; 121
    c944:	14 f4       	brge	.+4      	; 0xc94a <animate_sprite+0x66>

u8 animate_sprite(SpriteShared* s, u8 slot, u8 width, u8 height, u8 level_hazard, u8 origin_tile)
{
	u8 result;
	
	s->vy = s->vy + s->gravity*FRAME_TIME;
    c946:	6c 83       	std	Y+4, r22	; 0x04
    c948:	02 c0       	rjmp	.+4      	; 0xc94e <animate_sprite+0x6a>
	if (s->vy > MAX_SPEED) s->vy = MAX_SPEED;
    c94a:	88 e7       	ldi	r24, 0x78	; 120
    c94c:	8c 83       	std	Y+4, r24	; 0x04
	s->x += LBMoveDelta(s->vx, game.frame_counter);
    c94e:	60 91 d3 0d 	lds	r22, 0x0DD3
    c952:	8d 81       	ldd	r24, Y+5	; 0x05
    c954:	0e 94 62 51 	call	0xa2c4	; 0xa2c4 <LBMoveDelta>
    c958:	28 81       	ld	r18, Y
    c95a:	39 81       	ldd	r19, Y+1	; 0x01
    c95c:	82 0f       	add	r24, r18
    c95e:	93 1f       	adc	r25, r19
    c960:	99 83       	std	Y+1, r25	; 0x01
    c962:	88 83       	st	Y, r24
	s->y += LBMoveDelta(s->vy, game.frame_counter);
    c964:	60 91 d3 0d 	lds	r22, 0x0DD3
    c968:	8c 81       	ldd	r24, Y+4	; 0x04
    c96a:	0e 94 62 51 	call	0xa2c4	; 0xa2c4 <LBMoveDelta>
    c96e:	ea 81       	ldd	r30, Y+2	; 0x02
    c970:	fb 81       	ldd	r31, Y+3	; 0x03
    c972:	8e 0f       	add	r24, r30
    c974:	9f 1f       	adc	r25, r31
    c976:	9b 83       	std	Y+3, r25	; 0x03
    c978:	8a 83       	std	Y+2, r24	; 0x02
	result = collision_detect_level(s, width, height);
    c97a:	4d 2d       	mov	r20, r13
    c97c:	61 2f       	mov	r22, r17
    c97e:	ce 01       	movw	r24, r28
    c980:	0e 94 b9 60 	call	0xc172	; 0xc172 <collision_detect_level>
    c984:	b8 2e       	mov	r11, r24
	if(result && level_hazard)
    c986:	88 23       	and	r24, r24
    c988:	41 f0       	breq	.+16     	; 0xc99a <animate_sprite+0xb6>
    c98a:	00 23       	and	r16, r16
    c98c:	31 f0       	breq	.+12     	; 0xc99a <animate_sprite+0xb6>
	{
		s->y = origin_tile*8;
    c98e:	88 e0       	ldi	r24, 0x08	; 8
    c990:	e8 9e       	mul	r14, r24
    c992:	70 01       	movw	r14, r0
    c994:	11 24       	eor	r1, r1
    c996:	fb 82       	std	Y+3, r15	; 0x03
    c998:	ea 82       	std	Y+2, r14	; 0x02
	}
	LBMoveSprite(slot, s->x - game.camera_x, s->y - game.camera_y, width, height);
    c99a:	3a 81       	ldd	r19, Y+2	; 0x02
    c99c:	80 91 c1 0d 	lds	r24, 0x0DC1
    c9a0:	43 2f       	mov	r20, r19
    c9a2:	48 1b       	sub	r20, r24
    c9a4:	98 81       	ld	r25, Y
    c9a6:	80 91 b9 0d 	lds	r24, 0x0DB9
    c9aa:	69 2f       	mov	r22, r25
    c9ac:	68 1b       	sub	r22, r24
    c9ae:	0d 2d       	mov	r16, r13
    c9b0:	21 2f       	mov	r18, r17
    c9b2:	8c 2d       	mov	r24, r12
    c9b4:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	return result;
}
    c9b8:	8b 2d       	mov	r24, r11
    c9ba:	df 91       	pop	r29
    c9bc:	cf 91       	pop	r28
    c9be:	1f 91       	pop	r17
    c9c0:	0f 91       	pop	r16
    c9c2:	ff 90       	pop	r15
    c9c4:	ef 90       	pop	r14
    c9c6:	df 90       	pop	r13
    c9c8:	cf 90       	pop	r12
    c9ca:	bf 90       	pop	r11
    c9cc:	af 90       	pop	r10
    c9ce:	9f 90       	pop	r9
    c9d0:	8f 90       	pop	r8
    c9d2:	08 95       	ret

0000c9d4 <animate_player>:

void animate_player(Player* player, Player* other_player, u8 slot)
{
    c9d4:	ef 92       	push	r14
    c9d6:	0f 93       	push	r16
    c9d8:	fc 01       	movw	r30, r24
    c9da:	84 2f       	mov	r24, r20
	if (player->flags & EXPLODING)
    c9dc:	90 85       	ldd	r25, Z+8	; 0x08
    c9de:	94 ff       	sbrs	r25, 4
    c9e0:	0f c0       	rjmp	.+30     	; 0xca00 <animate_player+0x2c>
	{
		LBMoveSprite(slot, player->shared.x - game.camera_x, player->shared.y - game.camera_y, player->width, player->height);
    c9e2:	92 81       	ldd	r25, Z+2	; 0x02
    c9e4:	20 91 c1 0d 	lds	r18, 0x0DC1
    c9e8:	49 2f       	mov	r20, r25
    c9ea:	42 1b       	sub	r20, r18
    c9ec:	90 81       	ld	r25, Z
    c9ee:	20 91 b9 0d 	lds	r18, 0x0DB9
    c9f2:	69 2f       	mov	r22, r25
    c9f4:	62 1b       	sub	r22, r18
    c9f6:	04 85       	ldd	r16, Z+12	; 0x0c
    c9f8:	23 85       	ldd	r18, Z+11	; 0x0b
    c9fa:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
    c9fe:	14 c0       	rjmp	.+40     	; 0xca28 <animate_player+0x54>
		SFX_PLAYER_EXPLODE;
		other_player->shield = 0;
		other_player->flags = EXPLODING;
		player->controls.pressed |= BTN_A;
	}*/
	else if (animate_sprite(&player->shared, slot, player->width, player->height, 0, 0) > 1 && !DEBUG_GODMODE)
    ca00:	e1 2c       	mov	r14, r1
    ca02:	00 e0       	ldi	r16, 0x00	; 0
    ca04:	24 85       	ldd	r18, Z+12	; 0x0c
    ca06:	43 85       	ldd	r20, Z+11	; 0x0b
    ca08:	68 2f       	mov	r22, r24
    ca0a:	cf 01       	movw	r24, r30
    ca0c:	0e 94 72 64 	call	0xc8e4	; 0xc8e4 <animate_sprite>
    ca10:	82 30       	cpi	r24, 0x02	; 2
    ca12:	50 f0       	brcs	.+20     	; 0xca28 <animate_player+0x54>
	{
		SFX_PLAYER_EXPLODE;
    ca14:	41 e0       	ldi	r20, 0x01	; 1
    ca16:	6f ef       	ldi	r22, 0xFF	; 255
    ca18:	85 e0       	ldi	r24, 0x05	; 5
    ca1a:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		game.player.shield = 0;
    ca1e:	10 92 e8 0d 	sts	0x0DE8, r1
		game.player.flags = EXPLODING;
    ca22:	80 e1       	ldi	r24, 0x10	; 16
    ca24:	80 93 e1 0d 	sts	0x0DE1, r24
	}
}
    ca28:	0f 91       	pop	r16
    ca2a:	ef 90       	pop	r14
    ca2c:	08 95       	ret

0000ca2e <update_spider_enemy>:

void update_spider_enemy(Enemy* e, u8 slot)
{
    ca2e:	1f 93       	push	r17
    ca30:	cf 93       	push	r28
    ca32:	df 93       	push	r29
    ca34:	ec 01       	movw	r28, r24
    ca36:	16 2f       	mov	r17, r22
	if (e->flags & IDLE && e->frame_count == SPIDER_IDLE_FRAMES)
    ca38:	98 85       	ldd	r25, Y+8	; 0x08
    ca3a:	89 2f       	mov	r24, r25
    ca3c:	88 70       	andi	r24, 0x08	; 8
    ca3e:	93 ff       	sbrs	r25, 3
    ca40:	14 c0       	rjmp	.+40     	; 0xca6a <update_spider_enemy+0x3c>
    ca42:	2d 85       	ldd	r18, Y+13	; 0x0d
    ca44:	20 38       	cpi	r18, 0x80	; 128
    ca46:	89 f4       	brne	.+34     	; 0xca6a <update_spider_enemy+0x3c>
	{
		e->flags = JUMPING;
    ca48:	81 e0       	ldi	r24, 0x01	; 1
    ca4a:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vy = -SPIDER_JUMP_SPEED;
    ca4c:	8c e9       	ldi	r24, 0x9C	; 156
    ca4e:	8c 83       	std	Y+4, r24	; 0x04
		e->shared.gravity = GRAVITY;
    ca50:	88 ec       	ldi	r24, 0xC8	; 200
    ca52:	8e 83       	std	Y+6, r24	; 0x06
		e->shared.vx = SPIDER_SIDE_SPEED;
    ca54:	8c e3       	ldi	r24, 0x3C	; 60
    ca56:	8d 83       	std	Y+5, r24	; 0x05
		if (e->direction == D_LEFT)
    ca58:	89 85       	ldd	r24, Y+9	; 0x09
    ca5a:	81 11       	cpse	r24, r1
    ca5c:	02 c0       	rjmp	.+4      	; 0xca62 <update_spider_enemy+0x34>
		{
			e->shared.vx = -SPIDER_SIDE_SPEED;
    ca5e:	84 ec       	ldi	r24, 0xC4	; 196
    ca60:	8d 83       	std	Y+5, r24	; 0x05
		}
		LBMapSprite(slot, map_enemy_spider_1, 0);
    ca62:	40 e0       	ldi	r20, 0x00	; 0
    ca64:	69 e7       	ldi	r22, 0x79	; 121
    ca66:	77 e3       	ldi	r23, 0x37	; 55
    ca68:	19 c0       	rjmp	.+50     	; 0xca9c <update_spider_enemy+0x6e>
	}
	else if (e->flags & JUMPING && e->shared.gravity == 0)
    ca6a:	90 ff       	sbrs	r25, 0
    ca6c:	0f c0       	rjmp	.+30     	; 0xca8c <update_spider_enemy+0x5e>
    ca6e:	9e 81       	ldd	r25, Y+6	; 0x06
    ca70:	91 11       	cpse	r25, r1
    ca72:	0c c0       	rjmp	.+24     	; 0xca8c <update_spider_enemy+0x5e>
	{
		e->flags = IDLE;
    ca74:	88 e0       	ldi	r24, 0x08	; 8
    ca76:	88 87       	std	Y+8, r24	; 0x08
		e->shared.vx = 0;
    ca78:	1d 82       	std	Y+5, r1	; 0x05
		e->frame_count = 0;
    ca7a:	1d 86       	std	Y+13, r1	; 0x0d
		if (e->direction == D_LEFT)
    ca7c:	89 85       	ldd	r24, Y+9	; 0x09
    ca7e:	81 11       	cpse	r24, r1
    ca80:	03 c0       	rjmp	.+6      	; 0xca88 <update_spider_enemy+0x5a>
		{
			e->direction = D_RIGHT;
    ca82:	81 e0       	ldi	r24, 0x01	; 1
    ca84:	89 87       	std	Y+9, r24	; 0x09
    ca86:	0d c0       	rjmp	.+26     	; 0xcaa2 <update_spider_enemy+0x74>
		}
		else
		{
			e->direction = D_LEFT;
    ca88:	19 86       	std	Y+9, r1	; 0x09
    ca8a:	0b c0       	rjmp	.+22     	; 0xcaa2 <update_spider_enemy+0x74>
		}
	}
	else if (e->flags & IDLE)
    ca8c:	88 23       	and	r24, r24
    ca8e:	49 f0       	breq	.+18     	; 0xcaa2 <update_spider_enemy+0x74>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    ca90:	ce 01       	movw	r24, r28
    ca92:	85 96       	adiw	r24, 0x25	; 37
    ca94:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    ca98:	40 e0       	ldi	r20, 0x00	; 0
    ca9a:	bc 01       	movw	r22, r24
    ca9c:	81 2f       	mov	r24, r17
    ca9e:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	}
	e->frame_count++;
    caa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    caa4:	8f 5f       	subi	r24, 0xFF	; 255
    caa6:	8d 87       	std	Y+13, r24	; 0x0d
}
    caa8:	df 91       	pop	r29
    caaa:	cf 91       	pop	r28
    caac:	1f 91       	pop	r17
    caae:	08 95       	ret

0000cab0 <update_turret_enemy>:

void update_turret_enemy(Enemy* e, u8 slot)
{
    cab0:	cf 93       	push	r28
    cab2:	fc 01       	movw	r30, r24
    cab4:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    cab6:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = 0;
    cab8:	14 82       	std	Z+4, r1	; 0x04
	if (game.player.shared.x > e->shared.x && e->enemy_type != ENEMY_BOSS_TURRET)
    caba:	40 91 d9 0d 	lds	r20, 0x0DD9
    cabe:	50 91 da 0d 	lds	r21, 0x0DDA
    cac2:	20 81       	ld	r18, Z
    cac4:	31 81       	ldd	r19, Z+1	; 0x01
    cac6:	85 96       	adiw	r24, 0x25	; 37
    cac8:	24 17       	cp	r18, r20
    caca:	35 07       	cpc	r19, r21
    cacc:	38 f4       	brcc	.+14     	; 0xcadc <update_turret_enemy+0x2c>
    cace:	24 85       	ldd	r18, Z+12	; 0x0c
    cad0:	26 30       	cpi	r18, 0x06	; 6
    cad2:	21 f0       	breq	.+8      	; 0xcadc <update_turret_enemy+0x2c>
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
    cad4:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cad8:	41 e0       	ldi	r20, 0x01	; 1
    cada:	03 c0       	rjmp	.+6      	; 0xcae2 <update_turret_enemy+0x32>
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cadc:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cae0:	40 e0       	ldi	r20, 0x00	; 0
    cae2:	bc 01       	movw	r22, r24
    cae4:	8c 2f       	mov	r24, r28
	}
}
    cae6:	cf 91       	pop	r28
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), SPRITE_FLIP_X);
	}
	else
	{
		LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cae8:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000caec <update_drone_enemy>:
	}
}

void update_drone_enemy(Enemy* e, u8 slot)
{
    caec:	cf 93       	push	r28
    caee:	fc 01       	movw	r30, r24
    caf0:	c6 2f       	mov	r28, r22
	e->shared.vx = -DRONE_SPEED;
    caf2:	82 ee       	ldi	r24, 0xE2	; 226
    caf4:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    caf6:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    caf8:	cf 01       	movw	r24, r30
    cafa:	85 96       	adiw	r24, 0x25	; 37
    cafc:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cb00:	40 e0       	ldi	r20, 0x00	; 0
    cb02:	bc 01       	movw	r22, r24
    cb04:	8c 2f       	mov	r24, r28
}
    cb06:	cf 91       	pop	r28

void update_drone_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = -DRONE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb08:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000cb0c <update_globe_enemy>:
}

void update_globe_enemy(Enemy* e, u8 slot)
{
    cb0c:	cf 93       	push	r28
    cb0e:	fc 01       	movw	r30, r24
    cb10:	c6 2f       	mov	r28, r22
	e->shared.vx = GLOBE_SPEED;
    cb12:	8a e0       	ldi	r24, 0x0A	; 10
    cb14:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    cb16:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb18:	cf 01       	movw	r24, r30
    cb1a:	85 96       	adiw	r24, 0x25	; 37
    cb1c:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cb20:	40 e0       	ldi	r20, 0x00	; 0
    cb22:	bc 01       	movw	r22, r24
    cb24:	8c 2f       	mov	r24, r28
}
    cb26:	cf 91       	pop	r28

void update_globe_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = GLOBE_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb28:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000cb2c <update_xwing_enemy>:
}

void update_xwing_enemy(Enemy* e, u8 slot)
{
    cb2c:	cf 93       	push	r28
    cb2e:	fc 01       	movw	r30, r24
    cb30:	c6 2f       	mov	r28, r22
	e->shared.vx = XWING_SPEED;
    cb32:	84 e1       	ldi	r24, 0x14	; 20
    cb34:	85 83       	std	Z+5, r24	; 0x05
	if (game.frame_counter % 60 == 0)
    cb36:	80 91 d3 0d 	lds	r24, 0x0DD3
    cb3a:	6c e3       	ldi	r22, 0x3C	; 60
    cb3c:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    cb40:	91 11       	cpse	r25, r1
    cb42:	03 c0       	rjmp	.+6      	; 0xcb4a <update_xwing_enemy+0x1e>
	{
		e->shared.vy = -e->shared.vy;
    cb44:	94 81       	ldd	r25, Z+4	; 0x04
    cb46:	91 95       	neg	r25
    cb48:	94 83       	std	Z+4, r25	; 0x04
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb4a:	cf 01       	movw	r24, r30
    cb4c:	85 96       	adiw	r24, 0x25	; 37
    cb4e:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cb52:	40 e0       	ldi	r20, 0x00	; 0
    cb54:	bc 01       	movw	r22, r24
    cb56:	8c 2f       	mov	r24, r28
}
    cb58:	cf 91       	pop	r28
	e->shared.vx = XWING_SPEED;
	if (game.frame_counter % 60 == 0)
	{
		e->shared.vy = -e->shared.vy;
	}
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb5a:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000cb5e <update_shark_enemy>:
}


void update_shark_enemy(Enemy* e, u8 slot)
{
    cb5e:	cf 93       	push	r28
    cb60:	fc 01       	movw	r30, r24
    cb62:	c6 2f       	mov	r28, r22
	e->shared.vx = SHARK_SPEED;
    cb64:	8e e1       	ldi	r24, 0x1E	; 30
    cb66:	85 83       	std	Z+5, r24	; 0x05
	e->shared.vy = 0;
    cb68:	14 82       	std	Z+4, r1	; 0x04
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb6a:	cf 01       	movw	r24, r30
    cb6c:	85 96       	adiw	r24, 0x25	; 37
    cb6e:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cb72:	40 e0       	ldi	r20, 0x00	; 0
    cb74:	bc 01       	movw	r22, r24
    cb76:	8c 2f       	mov	r24, r28
}
    cb78:	cf 91       	pop	r28

void update_shark_enemy(Enemy* e, u8 slot)
{
	e->shared.vx = SHARK_SPEED;
	e->shared.vy = 0;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cb7a:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000cb7e <update_level_hazard>:
}

void update_level_hazard(Enemy* e, u8 slot)
{
    cb7e:	cf 93       	push	r28
    cb80:	fc 01       	movw	r30, r24
    cb82:	c6 2f       	mov	r28, r22
	e->shared.vx = 0;
    cb84:	15 82       	std	Z+5, r1	; 0x05
	e->shared.vy = HAZARD_SPEED;
    cb86:	8e e1       	ldi	r24, 0x1E	; 30
    cb88:	84 83       	std	Z+4, r24	; 0x04
	if (game.current_level_index == 2)
    cb8a:	80 91 ce 0d 	lds	r24, 0x0DCE
    cb8e:	82 30       	cpi	r24, 0x02	; 2
    cb90:	11 f4       	brne	.+4      	; 0xcb96 <update_level_hazard+0x18>
	{
		e->shared.vy = -HAZARD_SPEED;
    cb92:	82 ee       	ldi	r24, 0xE2	; 226
    cb94:	84 83       	std	Z+4, r24	; 0x04
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
    cb96:	22 81       	ldd	r18, Z+2	; 0x02
    cb98:	33 81       	ldd	r19, Z+3	; 0x03
    cb9a:	24 50       	subi	r18, 0x04	; 4
    cb9c:	31 09       	sbc	r19, r1
    cb9e:	2d 3b       	cpi	r18, 0xBD	; 189
    cba0:	31 05       	cpc	r19, r1
    cba2:	38 f0       	brcs	.+14     	; 0xcbb2 <update_level_hazard+0x34>
    cba4:	27 85       	ldd	r18, Z+15	; 0x0f
    cba6:	88 e0       	ldi	r24, 0x08	; 8
    cba8:	28 9f       	mul	r18, r24
    cbaa:	90 01       	movw	r18, r0
    cbac:	11 24       	eor	r1, r1
    cbae:	33 83       	std	Z+3, r19	; 0x03
    cbb0:	22 83       	std	Z+2, r18	; 0x02
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cbb2:	cf 01       	movw	r24, r30
    cbb4:	85 96       	adiw	r24, 0x25	; 37
    cbb6:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cbba:	40 e0       	ldi	r20, 0x00	; 0
    cbbc:	bc 01       	movw	r22, r24
    cbbe:	8c 2f       	mov	r24, r28
}
    cbc0:	cf 91       	pop	r28
	if (game.current_level_index == 2)
	{
		e->shared.vy = -HAZARD_SPEED;
	}
	if (e->shared.y < 4 || e->shared.y > 24*8) e->shared.y = e->origin_tile*8;
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
    cbc2:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000cbc6 <update_basic_shot>:
}

void update_basic_shot(Shot* s, u8 slot)
{
    cbc6:	cf 93       	push	r28
    cbc8:	c6 2f       	mov	r28, r22
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    cbca:	0c 96       	adiw	r24, 0x0c	; 12
    cbcc:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    cbd0:	40 e0       	ldi	r20, 0x00	; 0
    cbd2:	bc 01       	movw	r22, r24
    cbd4:	8c 2f       	mov	r24, r28
}
    cbd6:	cf 91       	pop	r28
	LBMapSprite(slot, LBGetNextFrame(&e->anim), 0);
}

void update_basic_shot(Shot* s, u8 slot)
{
	LBMapSprite(slot, LBGetNextFrame(&s->anim), 0);
    cbd8:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000cbdc <update_enemies>:
}

void update_enemies()
{
    cbdc:	cf 92       	push	r12
    cbde:	df 92       	push	r13
    cbe0:	ef 92       	push	r14
    cbe2:	ff 92       	push	r15
    cbe4:	0f 93       	push	r16
    cbe6:	1f 93       	push	r17
    cbe8:	cf 93       	push	r28
    cbea:	df 93       	push	r29
    cbec:	8a ed       	ldi	r24, 0xDA	; 218
    cbee:	e8 2e       	mov	r14, r24
    cbf0:	8e e0       	ldi	r24, 0x0E	; 14
    cbf2:	f8 2e       	mov	r15, r24
    cbf4:	cf ec       	ldi	r28, 0xCF	; 207
    cbf6:	de e0       	ldi	r29, 0x0E	; 14
	u8 slot = ENEMY_SLOT;
    cbf8:	19 e0       	ldi	r17, 0x09	; 9
    cbfa:	f7 01       	movw	r30, r14
    cbfc:	33 97       	sbiw	r30, 0x03	; 3
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].flags & EXPLODING)
    cbfe:	80 81       	ld	r24, Z
    cc00:	97 01       	movw	r18, r14
    cc02:	21 50       	subi	r18, 0x01	; 1
    cc04:	31 09       	sbc	r19, r1
    cc06:	69 01       	movw	r12, r18
    cc08:	84 ff       	sbrs	r24, 4
    cc0a:	0d c0       	rjmp	.+26     	; 0xcc26 <update_enemies+0x4a>
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
    cc0c:	d7 01       	movw	r26, r14
    cc0e:	0c 91       	ld	r16, X
    cc10:	f9 01       	movw	r30, r18
    cc12:	20 81       	ld	r18, Z
    cc14:	41 2f       	mov	r20, r17
    cc16:	be 01       	movw	r22, r28
    cc18:	63 5d       	subi	r22, 0xD3	; 211
    cc1a:	7f 4f       	sbci	r23, 0xFF	; 255
    cc1c:	ce 01       	movw	r24, r28
    cc1e:	08 96       	adiw	r24, 0x08	; 8
    cc20:	0e 94 27 64 	call	0xc84e	; 0xc84e <map_explosion>
    cc24:	2e c0       	rjmp	.+92     	; 0xcc82 <update_enemies+0xa6>
    cc26:	f7 01       	movw	r30, r14
    cc28:	34 97       	sbiw	r30, 0x04	; 4
		}
		else if (game.enemies[i].active)
    cc2a:	80 81       	ld	r24, Z
    cc2c:	88 23       	and	r24, r24
    cc2e:	49 f1       	breq	.+82     	; 0xcc82 <update_enemies+0xa6>
		{
			switch (game.enemies[i].enemy_type)
    cc30:	d7 01       	movw	r26, r14
    cc32:	11 96       	adiw	r26, 0x01	; 1
    cc34:	ec 91       	ld	r30, X
    cc36:	8e 2f       	mov	r24, r30
    cc38:	90 e0       	ldi	r25, 0x00	; 0
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
				default: update_level_hazard(&game.enemies[i], slot); break;
    cc3a:	61 2f       	mov	r22, r17
		{
			map_explosion(&game.enemies[i].flags, &game.enemies[i].expl, slot, game.enemies[i].width, game.enemies[i].height);
		}
		else if (game.enemies[i].active)
		{
			switch (game.enemies[i].enemy_type)
    cc3c:	89 30       	cpi	r24, 0x09	; 9
    cc3e:	91 05       	cpc	r25, r1
    cc40:	e8 f4       	brcc	.+58     	; 0xcc7c <update_enemies+0xa0>
    cc42:	fc 01       	movw	r30, r24
    cc44:	e8 5c       	subi	r30, 0xC8	; 200
    cc46:	ff 4f       	sbci	r31, 0xFF	; 255
    cc48:	0c 94 0a 76 	jmp	0xec14	; 0xec14 <__tablejump2__>
			{
				case ENEMY_SPIDER: update_spider_enemy(&game.enemies[i], slot); break;
    cc4c:	ce 01       	movw	r24, r28
    cc4e:	0e 94 17 65 	call	0xca2e	; 0xca2e <update_spider_enemy>
    cc52:	17 c0       	rjmp	.+46     	; 0xcc82 <update_enemies+0xa6>
				case ENEMY_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_TURRET: update_turret_enemy(&game.enemies[i], slot); break;
				case ENEMY_BOSS_EYE: update_turret_enemy(&game.enemies[i], slot); break;
    cc54:	ce 01       	movw	r24, r28
    cc56:	0e 94 58 65 	call	0xcab0	; 0xcab0 <update_turret_enemy>
    cc5a:	13 c0       	rjmp	.+38     	; 0xcc82 <update_enemies+0xa6>
				case ENEMY_DRONE: update_drone_enemy(&game.enemies[i], slot); break;
    cc5c:	ce 01       	movw	r24, r28
    cc5e:	0e 94 76 65 	call	0xcaec	; 0xcaec <update_drone_enemy>
    cc62:	0f c0       	rjmp	.+30     	; 0xcc82 <update_enemies+0xa6>
				case ENEMY_SHARK: update_shark_enemy(&game.enemies[i], slot); break;
    cc64:	ce 01       	movw	r24, r28
    cc66:	0e 94 af 65 	call	0xcb5e	; 0xcb5e <update_shark_enemy>
    cc6a:	0b c0       	rjmp	.+22     	; 0xcc82 <update_enemies+0xa6>
				case ENEMY_GLOBE: update_globe_enemy(&game.enemies[i], slot); break;
    cc6c:	ce 01       	movw	r24, r28
    cc6e:	0e 94 86 65 	call	0xcb0c	; 0xcb0c <update_globe_enemy>
    cc72:	07 c0       	rjmp	.+14     	; 0xcc82 <update_enemies+0xa6>
				case ENEMY_XWING: update_xwing_enemy(&game.enemies[i], slot); break;
    cc74:	ce 01       	movw	r24, r28
    cc76:	0e 94 96 65 	call	0xcb2c	; 0xcb2c <update_xwing_enemy>
    cc7a:	03 c0       	rjmp	.+6      	; 0xcc82 <update_enemies+0xa6>
				default: update_level_hazard(&game.enemies[i], slot); break;
    cc7c:	ce 01       	movw	r24, r28
    cc7e:	0e 94 bf 65 	call	0xcb7e	; 0xcb7e <update_level_hazard>
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
    cc82:	f6 01       	movw	r30, r12
    cc84:	90 81       	ld	r25, Z
    cc86:	d7 01       	movw	r26, r14
    cc88:	8c 91       	ld	r24, X
    cc8a:	98 9f       	mul	r25, r24
    cc8c:	10 0d       	add	r17, r0
    cc8e:	11 24       	eor	r1, r1
    cc90:	b5 e3       	ldi	r27, 0x35	; 53
    cc92:	eb 0e       	add	r14, r27
    cc94:	f1 1c       	adc	r15, r1
    cc96:	e5 96       	adiw	r28, 0x35	; 53

void update_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cc98:	e3 ee       	ldi	r30, 0xE3	; 227
    cc9a:	ee 16       	cp	r14, r30
    cc9c:	ef e0       	ldi	r30, 0x0F	; 15
    cc9e:	fe 06       	cpc	r15, r30
    cca0:	09 f0       	breq	.+2      	; 0xcca4 <update_enemies+0xc8>
    cca2:	ab cf       	rjmp	.-170    	; 0xcbfa <update_enemies+0x1e>
				default: update_level_hazard(&game.enemies[i], slot); break;
			}
		}
		slot += game.enemies[i].width * game.enemies[i].height;
	}
}
    cca4:	df 91       	pop	r29
    cca6:	cf 91       	pop	r28
    cca8:	1f 91       	pop	r17
    ccaa:	0f 91       	pop	r16
    ccac:	ff 90       	pop	r15
    ccae:	ef 90       	pop	r14
    ccb0:	df 90       	pop	r13
    ccb2:	cf 90       	pop	r12
    ccb4:	08 95       	ret

0000ccb6 <update_enemy_shots>:

void update_enemy_shots()
{
    ccb6:	6f 92       	push	r6
    ccb8:	7f 92       	push	r7
    ccba:	8f 92       	push	r8
    ccbc:	9f 92       	push	r9
    ccbe:	bf 92       	push	r11
    ccc0:	cf 92       	push	r12
    ccc2:	df 92       	push	r13
    ccc4:	ef 92       	push	r14
    ccc6:	ff 92       	push	r15
    ccc8:	0f 93       	push	r16
    ccca:	1f 93       	push	r17
    cccc:	cf 93       	push	r28
    ccce:	df 93       	push	r29
    ccd0:	1f 92       	push	r1
    ccd2:	cd b7       	in	r28, 0x3d	; 61
    ccd4:	de b7       	in	r29, 0x3e	; 62
    ccd6:	8d ed       	ldi	r24, 0xDD	; 221
    ccd8:	68 2e       	mov	r6, r24
    ccda:	8e e0       	ldi	r24, 0x0E	; 14
    ccdc:	78 2e       	mov	r7, r24
    ccde:	9a ee       	ldi	r25, 0xEA	; 234
    cce0:	e9 2e       	mov	r14, r25
    cce2:	9e e0       	ldi	r25, 0x0E	; 14
    cce4:	f9 2e       	mov	r15, r25
    cce6:	24 ee       	ldi	r18, 0xE4	; 228
    cce8:	c2 2e       	mov	r12, r18
    ccea:	2e e0       	ldi	r18, 0x0E	; 14
    ccec:	d2 2e       	mov	r13, r18
    ccee:	00 e1       	ldi	r16, 0x10	; 16
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
				{
					if (!game.enemies[i].shot[j].active)
					{
						game.enemies[i].shot[j].active = 1;
    ccf0:	bb 24       	eor	r11, r11
    ccf2:	b3 94       	inc	r11
    ccf4:	6f ef       	ldi	r22, 0xFF	; 255
    ccf6:	60 0f       	add	r22, r16
    ccf8:	f3 01       	movw	r30, r6
    ccfa:	32 97       	sbiw	r30, 0x02	; 2
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (!(game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD) && game.enemies[i].active && game.enemies[i].shot_frame_count >= ENEMY_SHOT_DELAY_FRAMES)
    ccfc:	80 81       	ld	r24, Z
    ccfe:	35 97       	sbiw	r30, 0x05	; 5
    cd00:	82 30       	cpi	r24, 0x02	; 2
    cd02:	09 f4       	brne	.+2      	; 0xcd06 <update_enemy_shots+0x50>
    cd04:	55 c0       	rjmp	.+170    	; 0xcdb0 <update_enemy_shots+0xfa>
    cd06:	90 81       	ld	r25, Z
    cd08:	99 23       	and	r25, r25
    cd0a:	09 f4       	brne	.+2      	; 0xcd0e <update_enemy_shots+0x58>
    cd0c:	51 c0       	rjmp	.+162    	; 0xcdb0 <update_enemy_shots+0xfa>
    cd0e:	d3 01       	movw	r26, r6
    cd10:	9c 91       	ld	r25, X
    cd12:	9c 33       	cpi	r25, 0x3C	; 60
    cd14:	08 f4       	brcc	.+2      	; 0xcd18 <update_enemy_shots+0x62>
    cd16:	4c c0       	rjmp	.+152    	; 0xcdb0 <update_enemy_shots+0xfa>
		{
			game.enemies[i].shot_frame_count = 0;	
    cd18:	1c 92       	st	X, r1
    cd1a:	f7 01       	movw	r30, r14
    cd1c:	33 97       	sbiw	r30, 0x03	; 3
			for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
			{
				if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    cd1e:	90 81       	ld	r25, Z
    cd20:	97 30       	cpi	r25, 0x07	; 7
    cd22:	09 f0       	breq	.+2      	; 0xcd26 <update_enemy_shots+0x70>
    cd24:	4c c0       	rjmp	.+152    	; 0xcdbe <update_enemy_shots+0x108>
    cd26:	f7 01       	movw	r30, r14
				{
					if (!game.enemies[i].shot[j].active)
    cd28:	92 91       	ld	r25, -Z
    cd2a:	91 11       	cpse	r25, r1
    cd2c:	3c c0       	rjmp	.+120    	; 0xcda6 <update_enemy_shots+0xf0>
					{
						game.enemies[i].shot[j].active = 1;
    cd2e:	b0 82       	st	Z, r11
    cd30:	f3 01       	movw	r30, r6
    cd32:	3e 97       	sbiw	r30, 0x0e	; 14
						game.enemies[i].shot[j].shared.x = game.enemies[i].shared.x;
    cd34:	20 81       	ld	r18, Z
    cd36:	31 81       	ldd	r19, Z+1	; 0x01
    cd38:	f3 01       	movw	r30, r6
    cd3a:	34 83       	std	Z+4, r19	; 0x04
    cd3c:	23 83       	std	Z+3, r18	; 0x03
    cd3e:	3c 97       	sbiw	r30, 0x0c	; 12
						game.enemies[i].shot[j].shared.y = ((u16 ) game.enemies[i].shared.y / 8) * 8;
    cd40:	40 81       	ld	r20, Z
    cd42:	51 81       	ldd	r21, Z+1	; 0x01
    cd44:	fa 01       	movw	r30, r20
    cd46:	e8 7f       	andi	r30, 0xF8	; 248
    cd48:	16 96       	adiw	r26, 0x06	; 6
    cd4a:	fc 93       	st	X, r31
    cd4c:	ee 93       	st	-X, r30
    cd4e:	15 97       	sbiw	r26, 0x05	; 5
    cd50:	f7 01       	movw	r30, r14
    cd52:	10 81       	ld	r17, Z
						if (game.enemies[i].enemy_type == ENEMY_DRONE)
    cd54:	84 30       	cpi	r24, 0x04	; 4
    cd56:	19 f4       	brne	.+6      	; 0xcd5e <update_enemy_shots+0xa8>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    cd58:	d6 01       	movw	r26, r12
    cd5a:	1c 93       	st	X, r17
    cd5c:	24 c0       	rjmp	.+72     	; 0xcda6 <update_enemy_shots+0xf0>
						}
						else if (game.enemies[i].enemy_type == ENEMY_GLOBE)
    cd5e:	85 30       	cpi	r24, 0x05	; 5
    cd60:	59 f4       	brne	.+22     	; 0xcd78 <update_enemy_shots+0xc2>
						{
							game.enemies[i].shot[j].shared.vy = game.enemies[i].shot[j].shot_speed;
    cd62:	f6 01       	movw	r30, r12
    cd64:	10 83       	st	Z, r17
							if (game.player.shared.y <= game.enemies[i].shared.y)
    cd66:	80 91 db 0d 	lds	r24, 0x0DDB
    cd6a:	90 91 dc 0d 	lds	r25, 0x0DDC
    cd6e:	48 17       	cp	r20, r24
    cd70:	59 07       	cpc	r21, r25
    cd72:	c8 f0       	brcs	.+50     	; 0xcda6 <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vy = -game.enemies[i].shot[j].shot_speed;
    cd74:	11 95       	neg	r17
    cd76:	16 c0       	rjmp	.+44     	; 0xcda4 <update_enemy_shots+0xee>
    cd78:	47 01       	movw	r8, r14
    cd7a:	f5 e0       	ldi	r31, 0x05	; 5
    cd7c:	8f 1a       	sub	r8, r31
    cd7e:	91 08       	sbc	r9, r1
							}
						}
						else
						{
							game.enemies[i].shot[j].shared.vx = -game.enemies[i].shot[j].shot_speed;
    cd80:	81 2f       	mov	r24, r17
    cd82:	81 95       	neg	r24
    cd84:	d4 01       	movw	r26, r8
    cd86:	8c 93       	st	X, r24
							if (game.player.shared.x >= game.enemies[i].shared.x && !is_space())
    cd88:	80 91 d9 0d 	lds	r24, 0x0DD9
    cd8c:	90 91 da 0d 	lds	r25, 0x0DDA
    cd90:	82 17       	cp	r24, r18
    cd92:	93 07       	cpc	r25, r19
    cd94:	40 f0       	brcs	.+16     	; 0xcda6 <update_enemy_shots+0xf0>
    cd96:	69 83       	std	Y+1, r22	; 0x01
    cd98:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    cd9c:	69 81       	ldd	r22, Y+1	; 0x01
    cd9e:	81 11       	cpse	r24, r1
    cda0:	02 c0       	rjmp	.+4      	; 0xcda6 <update_enemy_shots+0xf0>
							{
								game.enemies[i].shot[j].shared.vx = game.enemies[i].shot[j].shot_speed;
    cda2:	f4 01       	movw	r30, r8
    cda4:	10 83       	st	Z, r17
							}
						}
					}
					update_basic_shot(&game.enemies[i].shot[j], slot);
    cda6:	c3 01       	movw	r24, r6
    cda8:	03 96       	adiw	r24, 0x03	; 3
    cdaa:	0e 94 e3 65 	call	0xcbc6	; 0xcbc6 <update_basic_shot>
    cdae:	07 c0       	rjmp	.+14     	; 0xcdbe <update_enemy_shots+0x108>
				}
				slot += 1;
			}
		}
		else if (game.enemies[i].active)
    cdb0:	80 81       	ld	r24, Z
    cdb2:	88 23       	and	r24, r24
    cdb4:	21 f0       	breq	.+8      	; 0xcdbe <update_enemy_shots+0x108>
		{
			game.enemies[i].shot_frame_count++;
    cdb6:	d3 01       	movw	r26, r6
    cdb8:	8c 91       	ld	r24, X
    cdba:	8f 5f       	subi	r24, 0xFF	; 255
    cdbc:	8c 93       	st	X, r24
    cdbe:	0f 5f       	subi	r16, 0xFF	; 255
    cdc0:	b5 e3       	ldi	r27, 0x35	; 53
    cdc2:	6b 0e       	add	r6, r27
    cdc4:	71 1c       	adc	r7, r1
    cdc6:	e5 e3       	ldi	r30, 0x35	; 53
    cdc8:	ee 0e       	add	r14, r30
    cdca:	f1 1c       	adc	r15, r1
    cdcc:	f5 e3       	ldi	r31, 0x35	; 53
    cdce:	cf 0e       	add	r12, r31
    cdd0:	d1 1c       	adc	r13, r1

void update_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cdd2:	05 31       	cpi	r16, 0x15	; 21
    cdd4:	09 f0       	breq	.+2      	; 0xcdd8 <update_enemy_shots+0x122>
    cdd6:	8e cf       	rjmp	.-228    	; 0xccf4 <update_enemy_shots+0x3e>
		else
		{
			slot += MAX_ENEMY_SHOTS;
		}
	}
}
    cdd8:	0f 90       	pop	r0
    cdda:	df 91       	pop	r29
    cddc:	cf 91       	pop	r28
    cdde:	1f 91       	pop	r17
    cde0:	0f 91       	pop	r16
    cde2:	ff 90       	pop	r15
    cde4:	ef 90       	pop	r14
    cde6:	df 90       	pop	r13
    cde8:	cf 90       	pop	r12
    cdea:	bf 90       	pop	r11
    cdec:	9f 90       	pop	r9
    cdee:	8f 90       	pop	r8
    cdf0:	7f 90       	pop	r7
    cdf2:	6f 90       	pop	r6
    cdf4:	08 95       	ret

0000cdf6 <animate_enemies>:

void animate_enemies()
{
    cdf6:	2f 92       	push	r2
    cdf8:	3f 92       	push	r3
    cdfa:	4f 92       	push	r4
    cdfc:	5f 92       	push	r5
    cdfe:	6f 92       	push	r6
    ce00:	7f 92       	push	r7
    ce02:	8f 92       	push	r8
    ce04:	9f 92       	push	r9
    ce06:	af 92       	push	r10
    ce08:	cf 92       	push	r12
    ce0a:	df 92       	push	r13
    ce0c:	ef 92       	push	r14
    ce0e:	ff 92       	push	r15
    ce10:	0f 93       	push	r16
    ce12:	1f 93       	push	r17
    ce14:	cf 93       	push	r28
    ce16:	df 93       	push	r29
    ce18:	00 d0       	rcall	.+0      	; 0xce1a <animate_enemies+0x24>
    ce1a:	00 d0       	rcall	.+0      	; 0xce1c <animate_enemies+0x26>
    ce1c:	cd b7       	in	r28, 0x3d	; 61
    ce1e:	de b7       	in	r29, 0x3e	; 62
    ce20:	46 ed       	ldi	r20, 0xD6	; 214
    ce22:	24 2e       	mov	r2, r20
    ce24:	4e e0       	ldi	r20, 0x0E	; 14
    ce26:	34 2e       	mov	r3, r20
    ce28:	59 ed       	ldi	r21, 0xD9	; 217
    ce2a:	65 2e       	mov	r6, r21
    ce2c:	5e e0       	ldi	r21, 0x0E	; 14
    ce2e:	75 2e       	mov	r7, r21
    ce30:	6a ed       	ldi	r22, 0xDA	; 218
    ce32:	86 2e       	mov	r8, r22
    ce34:	6e e0       	ldi	r22, 0x0E	; 14
    ce36:	96 2e       	mov	r9, r22
    ce38:	8f ec       	ldi	r24, 0xCF	; 207
    ce3a:	9e e0       	ldi	r25, 0x0E	; 14
    ce3c:	9c 83       	std	Y+4, r25	; 0x04
    ce3e:	8b 83       	std	Y+3, r24	; 0x03
    ce40:	a7 ed       	ldi	r26, 0xD7	; 215
    ce42:	be e0       	ldi	r27, 0x0E	; 14
    ce44:	ba 83       	std	Y+2, r27	; 0x02
    ce46:	a9 83       	std	Y+1, r26	; 0x01
    ce48:	41 2c       	mov	r4, r1
    ce4a:	51 2c       	mov	r5, r1
	u8 slot = ENEMY_SLOT;
    ce4c:	19 e0       	ldi	r17, 0x09	; 9
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
			{
				SFX_ENEMY_EXPLODE;
				game.enemies[i].flags = EXPLODING;
    ce4e:	70 e1       	ldi	r23, 0x10	; 16
    ce50:	d7 2e       	mov	r13, r23
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
    ce52:	f1 01       	movw	r30, r2
    ce54:	80 81       	ld	r24, Z
    ce56:	88 23       	and	r24, r24
    ce58:	09 f4       	brne	.+2      	; 0xce5c <animate_enemies+0x66>
    ce5a:	9b c0       	rjmp	.+310    	; 0xcf92 <animate_enemies+0x19c>
    ce5c:	a9 81       	ldd	r26, Y+1	; 0x01
    ce5e:	ba 81       	ldd	r27, Y+2	; 0x02
    ce60:	8c 91       	ld	r24, X
    ce62:	84 fd       	sbrc	r24, 4
    ce64:	96 c0       	rjmp	.+300    	; 0xcf92 <animate_enemies+0x19c>
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    ce66:	eb 81       	ldd	r30, Y+3	; 0x03
    ce68:	fc 81       	ldd	r31, Y+4	; 0x04
    ce6a:	20 81       	ld	r18, Z
    ce6c:	31 81       	ldd	r19, Z+1	; 0x01
    ce6e:	e0 91 b9 0d 	lds	r30, 0x0DB9
    ce72:	f0 91 ba 0d 	lds	r31, 0x0DBA
    ce76:	2e 17       	cp	r18, r30
    ce78:	3f 07       	cpc	r19, r31
    ce7a:	10 f1       	brcs	.+68     	; 0xcec0 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
    ce7c:	ab 81       	ldd	r26, Y+3	; 0x03
    ce7e:	bc 81       	ldd	r27, Y+4	; 0x04
    ce80:	12 96       	adiw	r26, 0x02	; 2
    ce82:	ed 90       	ld	r14, X+
    ce84:	fc 90       	ld	r15, X
    ce86:	13 97       	sbiw	r26, 0x03	; 3
    ce88:	80 91 c1 0d 	lds	r24, 0x0DC1
    ce8c:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
    ce8e:	e8 16       	cp	r14, r24
    ce90:	f9 06       	cpc	r15, r25
    ce92:	b0 f0       	brcs	.+44     	; 0xcec0 <animate_enemies+0xca>
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    ce94:	88 53       	subi	r24, 0x38	; 56
    ce96:	9f 4f       	sbci	r25, 0xFF	; 255
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
    ce98:	8e 15       	cp	r24, r14
    ce9a:	9f 05       	cpc	r25, r15
    ce9c:	88 f0       	brcs	.+34     	; 0xcec0 <animate_enemies+0xca>
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    ce9e:	cf 01       	movw	r24, r30
    cea0:	80 52       	subi	r24, 0x20	; 32
    cea2:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		if (game.enemies[i].active && !(game.enemies[i].flags & EXPLODING))
		{
			if (game.enemies[i].shared.x < game.camera_x ||
			    game.enemies[i].shared.y < game.camera_y ||
				game.enemies[i].shared.y > game.camera_y + CAMERA_HEIGHT*8 ||
    cea4:	82 17       	cp	r24, r18
    cea6:	93 07       	cpc	r25, r19
    cea8:	c8 f4       	brcc	.+50     	; 0xcedc <animate_enemies+0xe6>
    ceaa:	d2 01       	movw	r26, r4
    ceac:	a5 52       	subi	r26, 0x25	; 37
    ceae:	b1 4f       	sbci	r27, 0xF1	; 241
				(game.enemies[i].shared.x > game.camera_x + CAMERA_WIDTH*8 &&
    ceb0:	8c 91       	ld	r24, X
    ceb2:	81 11       	cpse	r24, r1
    ceb4:	13 c0       	rjmp	.+38     	; 0xcedc <animate_enemies+0xe6>
    ceb6:	d4 01       	movw	r26, r8
    ceb8:	12 97       	sbiw	r26, 0x02	; 2
				 game.enemies[i].enemy_type == ENEMY_SPIDER &&
    ceba:	8c 91       	ld	r24, X
    cebc:	81 30       	cpi	r24, 0x01	; 1
    cebe:	71 f4       	brne	.+28     	; 0xcedc <animate_enemies+0xe6>
				 game.enemies[i].direction == D_RIGHT))
			{
				game.enemies[i].active = 0;
    cec0:	f1 01       	movw	r30, r2
    cec2:	10 82       	st	Z, r1
				game.active_enemies--;
    cec4:	80 91 d4 0d 	lds	r24, 0x0DD4
    cec8:	81 50       	subi	r24, 0x01	; 1
    ceca:	80 93 d4 0d 	sts	0x0DD4, r24
				LBMoveSprite(slot, OFF_SCREEN, 0, game.enemies[i].width, game.enemies[i].height);
    cece:	d4 01       	movw	r26, r8
    ced0:	0c 91       	ld	r16, X
    ced2:	f3 01       	movw	r30, r6
    ced4:	20 81       	ld	r18, Z
    ced6:	40 e0       	ldi	r20, 0x00	; 0
    ced8:	60 ee       	ldi	r22, 0xE0	; 224
    ceda:	6e c0       	rjmp	.+220    	; 0xcfb8 <animate_enemies+0x1c2>
			}
#if DEBUG_GODMODE
#else
			else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    cedc:	02 2f       	mov	r16, r18
    cede:	0e 1b       	sub	r16, r30
    cee0:	20 91 e5 0d 	lds	r18, 0x0DE5
    cee4:	22 0f       	add	r18, r18
    cee6:	22 0f       	add	r18, r18
    cee8:	22 0f       	add	r18, r18
    ceea:	40 91 e4 0d 	lds	r20, 0x0DE4
    ceee:	44 0f       	add	r20, r20
    cef0:	44 0f       	add	r20, r20
    cef2:	44 0f       	add	r20, r20
    cef4:	80 91 d9 0d 	lds	r24, 0x0DD9
    cef8:	98 e0       	ldi	r25, 0x08	; 8
    cefa:	a9 2e       	mov	r10, r25
    cefc:	38 e0       	ldi	r19, 0x08	; 8
    cefe:	c3 2e       	mov	r12, r19
    cf00:	60 91 db 0d 	lds	r22, 0x0DDB
    cf04:	8e 1b       	sub	r24, r30
    cf06:	0e 94 a4 52 	call	0xa548	; 0xa548 <LBCollides>
    cf0a:	88 23       	and	r24, r24
    cf0c:	79 f0       	breq	.+30     	; 0xcf2c <animate_enemies+0x136>
							game.enemies[i].shared.x-game.camera_x, game.enemies[i].shared.y, 8, 8
						) && !(game.player.flags & EXPLODING)
    cf0e:	80 91 e1 0d 	lds	r24, 0x0DE1
    cf12:	84 fd       	sbrc	r24, 4
    cf14:	0b c0       	rjmp	.+22     	; 0xcf2c <animate_enemies+0x136>
			)
			{
				SFX_PLAYER_EXPLODE;
    cf16:	41 e0       	ldi	r20, 0x01	; 1
    cf18:	6f ef       	ldi	r22, 0xFF	; 255
    cf1a:	85 e0       	ldi	r24, 0x05	; 5
    cf1c:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
				game.player.shield = 0;
    cf20:	10 92 e8 0d 	sts	0x0DE8, r1
				game.player.flags = EXPLODING;
    cf24:	80 e1       	ldi	r24, 0x10	; 16
    cf26:	80 93 e1 0d 	sts	0x0DE1, r24
				return;
    cf2a:	6c c0       	rjmp	.+216    	; 0xd004 <animate_enemies+0x20e>
    cf2c:	c2 01       	movw	r24, r4
    cf2e:	87 54       	subi	r24, 0x47	; 71
    cf30:	92 4f       	sbci	r25, 0xF2	; 242
    cf32:	fc 01       	movw	r30, r24
    cf34:	ee 5d       	subi	r30, 0xDE	; 222
    cf36:	fe 4f       	sbci	r31, 0xFE	; 254
			}
#endif
			else if (game.enemies[i].enemy_type == ENEMY_PROJECTILE_HAZARD)
    cf38:	20 81       	ld	r18, Z
    cf3a:	22 30       	cpi	r18, 0x02	; 2
    cf3c:	69 f4       	brne	.+26     	; 0xcf58 <animate_enemies+0x162>
    cf3e:	33 96       	adiw	r30, 0x03	; 3
			{
				animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 1, game.enemies[i].origin_tile);
    cf40:	e0 80       	ld	r14, Z
    cf42:	01 e0       	ldi	r16, 0x01	; 1
    cf44:	d4 01       	movw	r26, r8
    cf46:	2c 91       	ld	r18, X
    cf48:	f3 01       	movw	r30, r6
    cf4a:	40 81       	ld	r20, Z
    cf4c:	61 2f       	mov	r22, r17
    cf4e:	8b 81       	ldd	r24, Y+3	; 0x03
    cf50:	9c 81       	ldd	r25, Y+4	; 0x04
    cf52:	0e 94 72 64 	call	0xc8e4	; 0xc8e4 <animate_sprite>
    cf56:	33 c0       	rjmp	.+102    	; 0xcfbe <animate_enemies+0x1c8>
			}
			else if (animate_sprite(&game.enemies[i].shared, slot, game.enemies[i].width, game.enemies[i].height, 0, 0) > 1)
    cf58:	e1 2c       	mov	r14, r1
    cf5a:	00 e0       	ldi	r16, 0x00	; 0
    cf5c:	d4 01       	movw	r26, r8
    cf5e:	2c 91       	ld	r18, X
    cf60:	f3 01       	movw	r30, r6
    cf62:	40 81       	ld	r20, Z
    cf64:	61 2f       	mov	r22, r17
    cf66:	8b 81       	ldd	r24, Y+3	; 0x03
    cf68:	9c 81       	ldd	r25, Y+4	; 0x04
    cf6a:	0e 94 72 64 	call	0xc8e4	; 0xc8e4 <animate_sprite>
    cf6e:	82 30       	cpi	r24, 0x02	; 2
    cf70:	30 f1       	brcs	.+76     	; 0xcfbe <animate_enemies+0x1c8>
			{
				SFX_ENEMY_EXPLODE;
    cf72:	41 e0       	ldi	r20, 0x01	; 1
    cf74:	6f ef       	ldi	r22, 0xFF	; 255
    cf76:	86 e0       	ldi	r24, 0x06	; 6
    cf78:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
				game.enemies[i].flags = EXPLODING;
    cf7c:	a9 81       	ldd	r26, Y+1	; 0x01
    cf7e:	ba 81       	ldd	r27, Y+2	; 0x02
    cf80:	dc 92       	st	X, r13
				game.enemies[i].active = 0;
    cf82:	f1 01       	movw	r30, r2
    cf84:	10 82       	st	Z, r1
				game.active_enemies--;
    cf86:	80 91 d4 0d 	lds	r24, 0x0DD4
    cf8a:	81 50       	subi	r24, 0x01	; 1
    cf8c:	80 93 d4 0d 	sts	0x0DD4, r24
    cf90:	16 c0       	rjmp	.+44     	; 0xcfbe <animate_enemies+0x1c8>
			}
		}
		else if (game.enemies[i].flags & EXPLODING)
    cf92:	a9 81       	ldd	r26, Y+1	; 0x01
    cf94:	ba 81       	ldd	r27, Y+2	; 0x02
    cf96:	8c 91       	ld	r24, X
    cf98:	84 ff       	sbrs	r24, 4
    cf9a:	11 c0       	rjmp	.+34     	; 0xcfbe <animate_enemies+0x1c8>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
    cf9c:	eb 81       	ldd	r30, Y+3	; 0x03
    cf9e:	fc 81       	ldd	r31, Y+4	; 0x04
    cfa0:	42 81       	ldd	r20, Z+2	; 0x02
    cfa2:	80 91 c1 0d 	lds	r24, 0x0DC1
    cfa6:	48 1b       	sub	r20, r24
    cfa8:	60 81       	ld	r22, Z
    cfaa:	80 91 b9 0d 	lds	r24, 0x0DB9
    cfae:	68 1b       	sub	r22, r24
    cfb0:	d4 01       	movw	r26, r8
    cfb2:	0c 91       	ld	r16, X
    cfb4:	f3 01       	movw	r30, r6
    cfb6:	20 81       	ld	r18, Z
    cfb8:	81 2f       	mov	r24, r17
    cfba:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
    cfbe:	d4 01       	movw	r26, r8
    cfc0:	9c 91       	ld	r25, X
    cfc2:	f3 01       	movw	r30, r6
    cfc4:	80 81       	ld	r24, Z
    cfc6:	98 9f       	mul	r25, r24
    cfc8:	10 0d       	add	r17, r0
    cfca:	11 24       	eor	r1, r1
    cfcc:	f5 e3       	ldi	r31, 0x35	; 53
    cfce:	2f 0e       	add	r2, r31
    cfd0:	31 1c       	adc	r3, r1
    cfd2:	85 e3       	ldi	r24, 0x35	; 53
    cfd4:	48 0e       	add	r4, r24
    cfd6:	51 1c       	adc	r5, r1
    cfd8:	95 e3       	ldi	r25, 0x35	; 53
    cfda:	69 0e       	add	r6, r25
    cfdc:	71 1c       	adc	r7, r1
    cfde:	a5 e3       	ldi	r26, 0x35	; 53
    cfe0:	8a 0e       	add	r8, r26
    cfe2:	91 1c       	adc	r9, r1
    cfe4:	eb 81       	ldd	r30, Y+3	; 0x03
    cfe6:	fc 81       	ldd	r31, Y+4	; 0x04
    cfe8:	f5 96       	adiw	r30, 0x35	; 53
    cfea:	fc 83       	std	Y+4, r31	; 0x04
    cfec:	eb 83       	std	Y+3, r30	; 0x03
    cfee:	89 81       	ldd	r24, Y+1	; 0x01
    cff0:	9a 81       	ldd	r25, Y+2	; 0x02
    cff2:	c5 96       	adiw	r24, 0x35	; 53
    cff4:	9a 83       	std	Y+2, r25	; 0x02
    cff6:	89 83       	std	Y+1, r24	; 0x01

void animate_enemies()
{
	u8 slot = ENEMY_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    cff8:	99 e0       	ldi	r25, 0x09	; 9
    cffa:	49 16       	cp	r4, r25
    cffc:	91 e0       	ldi	r25, 0x01	; 1
    cffe:	59 06       	cpc	r5, r25
    d000:	09 f0       	breq	.+2      	; 0xd004 <animate_enemies+0x20e>
    d002:	27 cf       	rjmp	.-434    	; 0xce52 <animate_enemies+0x5c>
		{
			LBMoveSprite(slot, game.enemies[i].shared.x - game.camera_x, game.enemies[i].shared.y - game.camera_y, game.enemies[i].width, game.enemies[i].height);
		}
		slot +=  game.enemies[i].width * game.enemies[i].height;
	}
}
    d004:	0f 90       	pop	r0
    d006:	0f 90       	pop	r0
    d008:	0f 90       	pop	r0
    d00a:	0f 90       	pop	r0
    d00c:	df 91       	pop	r29
    d00e:	cf 91       	pop	r28
    d010:	1f 91       	pop	r17
    d012:	0f 91       	pop	r16
    d014:	ff 90       	pop	r15
    d016:	ef 90       	pop	r14
    d018:	df 90       	pop	r13
    d01a:	cf 90       	pop	r12
    d01c:	af 90       	pop	r10
    d01e:	9f 90       	pop	r9
    d020:	8f 90       	pop	r8
    d022:	7f 90       	pop	r7
    d024:	6f 90       	pop	r6
    d026:	5f 90       	pop	r5
    d028:	4f 90       	pop	r4
    d02a:	3f 90       	pop	r3
    d02c:	2f 90       	pop	r2
    d02e:	08 95       	ret

0000d030 <animate_enemy_shots>:

void animate_enemy_shots()
{
    d030:	4f 92       	push	r4
    d032:	5f 92       	push	r5
    d034:	6f 92       	push	r6
    d036:	7f 92       	push	r7
    d038:	8f 92       	push	r8
    d03a:	9f 92       	push	r9
    d03c:	af 92       	push	r10
    d03e:	cf 92       	push	r12
    d040:	df 92       	push	r13
    d042:	ef 92       	push	r14
    d044:	ff 92       	push	r15
    d046:	0f 93       	push	r16
    d048:	1f 93       	push	r17
    d04a:	cf 93       	push	r28
    d04c:	df 93       	push	r29
    d04e:	c9 ee       	ldi	r28, 0xE9	; 233
    d050:	de e0       	ldi	r29, 0x0E	; 14
    d052:	40 ee       	ldi	r20, 0xE0	; 224
    d054:	84 2e       	mov	r8, r20
    d056:	4e e0       	ldi	r20, 0x0E	; 14
    d058:	94 2e       	mov	r9, r20
	u8 slot = ENEMY_SHOT_SLOT;
    d05a:	1f e0       	ldi	r17, 0x0F	; 15
#endif
						if (game.player.shield <= 0)
						{
							SFX_PLAYER_EXPLODE;
							game.player.shield = 0;
							game.player.flags = EXPLODING;
    d05c:	50 e1       	ldi	r21, 0x10	; 16
    d05e:	f5 2e       	mov	r15, r21
    d060:	fe 01       	movw	r30, r28
    d062:	32 97       	sbiw	r30, 0x02	; 2
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
	{
		for (u8 j = 0; j < MAX_ENEMY_SHOTS; j++)
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
    d064:	80 81       	ld	r24, Z
    d066:	87 30       	cpi	r24, 0x07	; 7
    d068:	09 f0       	breq	.+2      	; 0xd06c <animate_enemy_shots+0x3c>
    d06a:	73 c0       	rjmp	.+230    	; 0xd152 <animate_enemy_shots+0x122>
			{
				if (game.enemies[i].shot[j].active)
    d06c:	88 81       	ld	r24, Y
    d06e:	88 23       	and	r24, r24
    d070:	09 f4       	brne	.+2      	; 0xd074 <animate_enemy_shots+0x44>
    d072:	68 c0       	rjmp	.+208    	; 0xd144 <animate_enemy_shots+0x114>
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    d074:	c4 01       	movw	r24, r8
    d076:	0e 94 13 60 	call	0xc026	; 0xc026 <out_of_bounds>
    d07a:	81 11       	cpse	r24, r1
    d07c:	40 c0       	rjmp	.+128    	; 0xd0fe <animate_enemy_shots+0xce>
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
    d07e:	41 e0       	ldi	r20, 0x01	; 1
    d080:	61 e0       	ldi	r22, 0x01	; 1
    d082:	c4 01       	movw	r24, r8
    d084:	0e 94 b9 60 	call	0xc172	; 0xc172 <collision_detect_level>
		{
			if (game.enemies[i].shot[j].shot_type == ENEMY_BALL_SHOT)
			{
				if (game.enemies[i].shot[j].active)
				{
					if (out_of_bounds(&game.enemies[i].shot[j].shared) ||
    d088:	81 11       	cpse	r24, r1
    d08a:	39 c0       	rjmp	.+114    	; 0xd0fe <animate_enemy_shots+0xce>
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
    d08c:	f4 01       	movw	r30, r8
    d08e:	42 80       	ldd	r4, Z+2	; 0x02
    d090:	53 80       	ldd	r5, Z+3	; 0x03
    d092:	60 80       	ld	r6, Z
    d094:	71 80       	ldd	r7, Z+1	; 0x01
					   collision_detect_level(&game.enemies[i].shot[j].shared, 1, 1))
					{
						game.enemies[i].shot[j].active = 0;
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else if (LBCollides(game.player.shared.x-game.camera_x,game.player.shared.y, game.player.width*8, game.player.height*8,
    d096:	d0 90 b9 0d 	lds	r13, 0x0DB9
    d09a:	06 2d       	mov	r16, r6
    d09c:	0d 19       	sub	r16, r13
    d09e:	20 91 e5 0d 	lds	r18, 0x0DE5
    d0a2:	22 0f       	add	r18, r18
    d0a4:	22 0f       	add	r18, r18
    d0a6:	22 0f       	add	r18, r18
    d0a8:	40 91 e4 0d 	lds	r20, 0x0DE4
    d0ac:	44 0f       	add	r20, r20
    d0ae:	44 0f       	add	r20, r20
    d0b0:	44 0f       	add	r20, r20
    d0b2:	80 91 d9 0d 	lds	r24, 0x0DD9
    d0b6:	98 e0       	ldi	r25, 0x08	; 8
    d0b8:	a9 2e       	mov	r10, r25
    d0ba:	38 e0       	ldi	r19, 0x08	; 8
    d0bc:	c3 2e       	mov	r12, r19
    d0be:	e4 2c       	mov	r14, r4
    d0c0:	60 91 db 0d 	lds	r22, 0x0DDB
    d0c4:	8d 19       	sub	r24, r13
    d0c6:	0e 94 a4 52 	call	0xa548	; 0xa548 <LBCollides>
    d0ca:	88 23       	and	r24, r24
    d0cc:	d1 f0       	breq	.+52     	; 0xd102 <animate_enemy_shots+0xd2>
							game.enemies[i].shot[j].shared.x-game.camera_x, game.enemies[i].shot[j].shared.y, 8, 8
						)
					)
					{
						SFX_HIT;
    d0ce:	41 e0       	ldi	r20, 0x01	; 1
    d0d0:	6f ef       	ldi	r22, 0xFF	; 255
    d0d2:	84 e0       	ldi	r24, 0x04	; 4
    d0d4:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
#if DEBUG_GODMODE
#else
						game.player.shield -= game.enemies[i].shot[j].hit_count;
    d0d8:	80 91 e8 0d 	lds	r24, 0x0DE8
    d0dc:	fe 01       	movw	r30, r28
    d0de:	31 97       	sbiw	r30, 0x01	; 1
    d0e0:	90 81       	ld	r25, Z
    d0e2:	89 1b       	sub	r24, r25
    d0e4:	80 93 e8 0d 	sts	0x0DE8, r24
#endif
						if (game.player.shield <= 0)
    d0e8:	18 16       	cp	r1, r24
    d0ea:	4c f0       	brlt	.+18     	; 0xd0fe <animate_enemy_shots+0xce>
						{
							SFX_PLAYER_EXPLODE;
    d0ec:	41 e0       	ldi	r20, 0x01	; 1
    d0ee:	6f ef       	ldi	r22, 0xFF	; 255
    d0f0:	85 e0       	ldi	r24, 0x05	; 5
    d0f2:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
							game.player.shield = 0;
    d0f6:	10 92 e8 0d 	sts	0x0DE8, r1
							game.player.flags = EXPLODING;
    d0fa:	f0 92 e1 0d 	sts	0x0DE1, r15
						}
						game.enemies[i].shot[j].active = 0;
    d0fe:	18 82       	st	Y, r1
    d100:	21 c0       	rjmp	.+66     	; 0xd144 <animate_enemy_shots+0x114>
						LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
					}
					else
					{
						game.enemies[i].shot[j].shared.x += LBMoveDelta(game.enemies[i].shot[j].shared.vx, game.frame_counter);
    d102:	00 91 d3 0d 	lds	r16, 0x0DD3
    d106:	60 2f       	mov	r22, r16
    d108:	fe 01       	movw	r30, r28
    d10a:	34 97       	sbiw	r30, 0x04	; 4
    d10c:	80 81       	ld	r24, Z
    d10e:	0e 94 62 51 	call	0xa2c4	; 0xa2c4 <LBMoveDelta>
    d112:	68 0e       	add	r6, r24
    d114:	79 1e       	adc	r7, r25
    d116:	f4 01       	movw	r30, r8
    d118:	71 82       	std	Z+1, r7	; 0x01
    d11a:	60 82       	st	Z, r6
						game.enemies[i].shot[j].shared.y += LBMoveDelta(game.enemies[i].shot[j].shared.vy, game.frame_counter);
    d11c:	60 2f       	mov	r22, r16
    d11e:	fe 01       	movw	r30, r28
    d120:	35 97       	sbiw	r30, 0x05	; 5
    d122:	80 81       	ld	r24, Z
    d124:	0e 94 62 51 	call	0xa2c4	; 0xa2c4 <LBMoveDelta>
    d128:	48 0e       	add	r4, r24
    d12a:	59 1e       	adc	r5, r25
    d12c:	f4 01       	movw	r30, r8
    d12e:	53 82       	std	Z+3, r5	; 0x03
    d130:	42 82       	std	Z+2, r4	; 0x02
						LBMoveSprite(slot, game.enemies[i].shot[j].shared.x - game.camera_x, game.enemies[i].shot[j].shared.y - game.camera_y, 1, 1);
    d132:	80 91 c1 0d 	lds	r24, 0x0DC1
    d136:	44 2d       	mov	r20, r4
    d138:	48 1b       	sub	r20, r24
    d13a:	66 2d       	mov	r22, r6
    d13c:	6d 19       	sub	r22, r13
    d13e:	01 e0       	ldi	r16, 0x01	; 1
    d140:	21 e0       	ldi	r18, 0x01	; 1
    d142:	04 c0       	rjmp	.+8      	; 0xd14c <animate_enemy_shots+0x11c>
					}
				}
				else
				{
					LBMoveSprite(slot, OFF_SCREEN, 0, 1, 1);
    d144:	01 e0       	ldi	r16, 0x01	; 1
    d146:	21 e0       	ldi	r18, 0x01	; 1
    d148:	40 e0       	ldi	r20, 0x00	; 0
    d14a:	60 ee       	ldi	r22, 0xE0	; 224
    d14c:	81 2f       	mov	r24, r17
    d14e:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
				}
			}
			slot += 1;
    d152:	1f 5f       	subi	r17, 0xFF	; 255
    d154:	e5 96       	adiw	r28, 0x35	; 53
    d156:	f5 e3       	ldi	r31, 0x35	; 53
    d158:	8f 0e       	add	r8, r31
    d15a:	91 1c       	adc	r9, r1

void animate_enemy_shots()
{
	u8 slot = ENEMY_SHOT_SLOT;
	
	for (u8 i = 0; i < MAX_ENEMIES; i++)
    d15c:	14 31       	cpi	r17, 0x14	; 20
    d15e:	09 f0       	breq	.+2      	; 0xd162 <animate_enemy_shots+0x132>
    d160:	7f cf       	rjmp	.-258    	; 0xd060 <animate_enemy_shots+0x30>
				}
			}
			slot += 1;
		}
	}
}
    d162:	df 91       	pop	r29
    d164:	cf 91       	pop	r28
    d166:	1f 91       	pop	r17
    d168:	0f 91       	pop	r16
    d16a:	ff 90       	pop	r15
    d16c:	ef 90       	pop	r14
    d16e:	df 90       	pop	r13
    d170:	cf 90       	pop	r12
    d172:	af 90       	pop	r10
    d174:	9f 90       	pop	r9
    d176:	8f 90       	pop	r8
    d178:	7f 90       	pop	r7
    d17a:	6f 90       	pop	r6
    d17c:	5f 90       	pop	r5
    d17e:	4f 90       	pop	r4
    d180:	08 95       	ret

0000d182 <stream_text_middle>:

void stream_text_middle(const char* dialogue, u8 y)
{
    d182:	ff 92       	push	r15
    d184:	0f 93       	push	r16
    d186:	1f 93       	push	r17
    d188:	cf 93       	push	r28
    d18a:	df 93       	push	r29
    d18c:	ec 01       	movw	r28, r24
    d18e:	16 2f       	mov	r17, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 14 - ln / 2;
    d190:	8e e0       	ldi	r24, 0x0E	; 14
    d192:	f8 2e       	mov	r15, r24

void stream_text_middle(const char* dialogue, u8 y)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    d194:	fe 01       	movw	r30, r28
    d196:	84 91       	lpm	r24, Z
    d198:	83 32       	cpi	r24, 0x23	; 35
    d19a:	31 f1       	breq	.+76     	; 0xd1e8 <stream_text_middle+0x66>
	{
		ln = strnlen_P(dialogue, 255);
    d19c:	6f ef       	ldi	r22, 0xFF	; 255
    d19e:	70 e0       	ldi	r23, 0x00	; 0
    d1a0:	ce 01       	movw	r24, r28
    d1a2:	0e 94 97 77 	call	0xef2e	; 0xef2e <strnlen_P>
		x = 14 - ln / 2;
    d1a6:	86 95       	lsr	r24
    d1a8:	0f 2d       	mov	r16, r15
    d1aa:	08 1b       	sub	r16, r24
    d1ac:	0c 1b       	sub	r16, r28
    d1ae:	8c 2f       	mov	r24, r28
    d1b0:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    d1b2:	21 96       	adiw	r28, 0x01	; 1
    d1b4:	fe 01       	movw	r30, r28
    d1b6:	31 97       	sbiw	r30, 0x01	; 1
    d1b8:	44 91       	lpm	r20, Z
    d1ba:	44 23       	and	r20, r20
    d1bc:	99 f0       	breq	.+38     	; 0xd1e4 <stream_text_middle+0x62>
		{
			LBPrintChar(x++, y, c);
    d1be:	61 2f       	mov	r22, r17
    d1c0:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
			LBGetJoyPadState(&game.player.controls, 0);
    d1c4:	60 e0       	ldi	r22, 0x00	; 0
    d1c6:	8d e4       	ldi	r24, 0x4D	; 77
    d1c8:	9e e0       	ldi	r25, 0x0E	; 14
    d1ca:	0e 94 b3 51 	call	0xa366	; 0xa366 <LBGetJoyPadState>
			if (!(game.player.controls.held & BTN_A)) WaitUs(CHARACTER_DELAY_US);
    d1ce:	80 91 51 0e 	lds	r24, 0x0E51
    d1d2:	90 91 52 0e 	lds	r25, 0x0E52
    d1d6:	90 fd       	sbrc	r25, 0
    d1d8:	ea cf       	rjmp	.-44     	; 0xd1ae <stream_text_middle+0x2c>
    d1da:	80 e7       	ldi	r24, 0x70	; 112
    d1dc:	97 e1       	ldi	r25, 0x17	; 23
    d1de:	0e 94 ff 41 	call	0x83fe	; 0x83fe <WaitUs>
    d1e2:	e5 cf       	rjmp	.-54     	; 0xd1ae <stream_text_middle+0x2c>
		}
		y++;
    d1e4:	1f 5f       	subi	r17, 0xFF	; 255
    d1e6:	d6 cf       	rjmp	.-84     	; 0xd194 <stream_text_middle+0x12>
	}
}
    d1e8:	df 91       	pop	r29
    d1ea:	cf 91       	pop	r28
    d1ec:	1f 91       	pop	r17
    d1ee:	0f 91       	pop	r16
    d1f0:	ff 90       	pop	r15
    d1f2:	08 95       	ret

0000d1f4 <print_scroll>:

void print_scroll(const unsigned char text[])
{
    d1f4:	0f 93       	push	r16
    d1f6:	cf 93       	push	r28
    d1f8:	df 93       	push	r29
    d1fa:	ec 01       	movw	r28, r24
	LBMapSprite(0, map_emerald_0, 0);
    d1fc:	40 e0       	ldi	r20, 0x00	; 0
    d1fe:	69 e2       	ldi	r22, 0x29	; 41
    d200:	78 e3       	ldi	r23, 0x38	; 56
    d202:	80 e0       	ldi	r24, 0x00	; 0
    d204:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMoveSprite(0, 80, 48, 1, 1);
    d208:	01 e0       	ldi	r16, 0x01	; 1
    d20a:	21 e0       	ldi	r18, 0x01	; 1
    d20c:	40 e3       	ldi	r20, 0x30	; 48
    d20e:	60 e5       	ldi	r22, 0x50	; 80
    d210:	80 e0       	ldi	r24, 0x00	; 0
    d212:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d216:	40 e0       	ldi	r20, 0x00	; 0
    d218:	66 e2       	ldi	r22, 0x26	; 38
    d21a:	78 e3       	ldi	r23, 0x38	; 56
    d21c:	81 e0       	ldi	r24, 0x01	; 1
    d21e:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMoveSprite(1, 96, 48, 1, 1);
    d222:	21 e0       	ldi	r18, 0x01	; 1
    d224:	40 e3       	ldi	r20, 0x30	; 48
    d226:	60 e6       	ldi	r22, 0x60	; 96
    d228:	81 e0       	ldi	r24, 0x01	; 1
    d22a:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	LBMapSprite(2, map_emerald_2, 0);
    d22e:	40 e0       	ldi	r20, 0x00	; 0
    d230:	63 e2       	ldi	r22, 0x23	; 35
    d232:	78 e3       	ldi	r23, 0x38	; 56
    d234:	82 e0       	ldi	r24, 0x02	; 2
    d236:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMoveSprite(2, 112, 48, 1, 1);
    d23a:	21 e0       	ldi	r18, 0x01	; 1
    d23c:	40 e3       	ldi	r20, 0x30	; 48
    d23e:	60 e7       	ldi	r22, 0x70	; 112
    d240:	82 e0       	ldi	r24, 0x02	; 2
    d242:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	LBMapSprite(3, map_emerald_3, 0);
    d246:	40 e0       	ldi	r20, 0x00	; 0
    d248:	60 e2       	ldi	r22, 0x20	; 32
    d24a:	78 e3       	ldi	r23, 0x38	; 56
    d24c:	83 e0       	ldi	r24, 0x03	; 3
    d24e:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMoveSprite(3, 128, 48, 1, 1);
    d252:	21 e0       	ldi	r18, 0x01	; 1
    d254:	40 e3       	ldi	r20, 0x30	; 48
    d256:	60 e8       	ldi	r22, 0x80	; 128
    d258:	83 e0       	ldi	r24, 0x03	; 3
    d25a:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	LBMapSprite(4, map_emerald_4, 0);
    d25e:	40 e0       	ldi	r20, 0x00	; 0
    d260:	6d e1       	ldi	r22, 0x1D	; 29
    d262:	78 e3       	ldi	r23, 0x38	; 56
    d264:	84 e0       	ldi	r24, 0x04	; 4
    d266:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMoveSprite(4, 144, 48, 1, 1);
    d26a:	21 e0       	ldi	r18, 0x01	; 1
    d26c:	40 e3       	ldi	r20, 0x30	; 48
    d26e:	60 e9       	ldi	r22, 0x90	; 144
    d270:	84 e0       	ldi	r24, 0x04	; 4
    d272:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	LBRotateSprites();
    d276:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	stream_text_middle((const char*) text, 12);
    d27a:	6c e0       	ldi	r22, 0x0C	; 12
    d27c:	ce 01       	movw	r24, r28
    d27e:	0e 94 c1 68 	call	0xd182	; 0xd182 <stream_text_middle>
	LBWaitSeconds(2);
    d282:	82 e0       	ldi	r24, 0x02	; 2
}
    d284:	df 91       	pop	r29
    d286:	cf 91       	pop	r28
    d288:	0f 91       	pop	r16
	LBMoveSprite(3, 128, 48, 1, 1);
	LBMapSprite(4, map_emerald_4, 0);
	LBMoveSprite(4, 144, 48, 1, 1);
	LBRotateSprites();
	stream_text_middle((const char*) text, 12);
	LBWaitSeconds(2);
    d28a:	0c 94 e4 52 	jmp	0xa5c8	; 0xa5c8 <LBWaitSeconds>

0000d28e <clear_sprites>:
	return 0;
	
}

void clear_sprites(u8 from, u8 count)
{
    d28e:	ef 92       	push	r14
    d290:	ff 92       	push	r15
    d292:	0f 93       	push	r16
    d294:	cf 93       	push	r28
	for(u8 i = from; i < from+count; i++)
    d296:	c8 2f       	mov	r28, r24
    d298:	e6 2e       	mov	r14, r22
    d29a:	f1 2c       	mov	r15, r1
    d29c:	e8 0e       	add	r14, r24
    d29e:	f1 1c       	adc	r15, r1
    d2a0:	8c 2f       	mov	r24, r28
    d2a2:	90 e0       	ldi	r25, 0x00	; 0
    d2a4:	8e 15       	cp	r24, r14
    d2a6:	9f 05       	cpc	r25, r15
    d2a8:	7c f4       	brge	.+30     	; 0xd2c8 <clear_sprites+0x3a>
	{
		LBMapSprite(i, map_none, 0);
    d2aa:	40 e0       	ldi	r20, 0x00	; 0
    d2ac:	61 e4       	ldi	r22, 0x41	; 65
    d2ae:	78 e3       	ldi	r23, 0x38	; 56
    d2b0:	8c 2f       	mov	r24, r28
    d2b2:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    d2b6:	01 e0       	ldi	r16, 0x01	; 1
    d2b8:	21 e0       	ldi	r18, 0x01	; 1
    d2ba:	40 e0       	ldi	r20, 0x00	; 0
    d2bc:	60 ee       	ldi	r22, 0xE0	; 224
    d2be:	8c 2f       	mov	r24, r28
    d2c0:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	
}

void clear_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    d2c4:	cf 5f       	subi	r28, 0xFF	; 255
    d2c6:	ec cf       	rjmp	.-40     	; 0xd2a0 <clear_sprites+0x12>
	{
		LBMapSprite(i, map_none, 0);
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    d2c8:	cf 91       	pop	r28
    d2ca:	0f 91       	pop	r16
    d2cc:	ff 90       	pop	r15
    d2ce:	ef 90       	pop	r14
    d2d0:	08 95       	ret

0000d2d2 <fade_through>:
	EepromWriteBlock(block);
}

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    d2d2:	61 e0       	ldi	r22, 0x01	; 1
    d2d4:	81 e0       	ldi	r24, 0x01	; 1
    d2d6:	0e 94 2d 51 	call	0xa25a	; 0xa25a <FadeOut>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d2da:	64 e1       	ldi	r22, 0x14	; 20
    d2dc:	80 e0       	ldi	r24, 0x00	; 0
    d2de:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    d2e2:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	ClearVram();
    d2e6:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    d2ea:	60 e0       	ldi	r22, 0x00	; 0
    d2ec:	81 e0       	ldi	r24, 0x01	; 1
    d2ee:	0c 94 21 51 	jmp	0xa242	; 0xa242 <FadeIn>

0000d2f2 <congratulations>:
	LBWaitSeconds(2);
}

void congratulations()
{
	fade_through();
    d2f2:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	StartSong(spacesong);
    d2f6:	87 ee       	ldi	r24, 0xE7	; 231
    d2f8:	9b e0       	ldi	r25, 0x0B	; 11
    d2fa:	0e 94 bd 44 	call	0x897a	; 0x897a <StartSong>
	Screen.scrollX = 0;
    d2fe:	ef ea       	ldi	r30, 0xAF	; 175
    d300:	fc e0       	ldi	r31, 0x0C	; 12
    d302:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d304:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d306:	80 e2       	ldi	r24, 0x20	; 32
    d308:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d30a:	10 82       	st	Z, r1
	print_scroll(strCongrats);
    d30c:	85 e0       	ldi	r24, 0x05	; 5
    d30e:	9a e0       	ldi	r25, 0x0A	; 10
    d310:	0e 94 fa 68 	call	0xd1f4	; 0xd1f4 <print_scroll>
	StopSong();
    d314:	0c 94 e6 44 	jmp	0x89cc	; 0x89cc <StopSong>

0000d318 <load_level>:
	game.level_width = pgm_read_byte(&level[0])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_WIDTH;
	game.level_height = pgm_read_byte(&level[1])*MAP_LEVEL_MEGA_TILES_MEGA_TILE_HEIGHT;
}

void load_level(u8 index, u8 drop_ship)
{	
    d318:	0f 93       	push	r16
    d31a:	cf 93       	push	r28
    d31c:	df 93       	push	r29
    d31e:	c8 2f       	mov	r28, r24
    d320:	d6 2f       	mov	r29, r22
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
	
	Screen.scrollX = 0;
    d322:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d326:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 29;
    d32a:	8d e1       	ldi	r24, 0x1D	; 29
    d32c:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayTileTable = tiles_data;
    d330:	84 e4       	ldi	r24, 0x44	; 68
    d332:	98 e3       	ldi	r25, 0x38	; 56
    d334:	90 93 b1 0c 	sts	0x0CB1, r25
    d338:	80 93 b0 0c 	sts	0x0CB0, r24
	Screen.overlayHeight = 3;
    d33c:	83 e0       	ldi	r24, 0x03	; 3
    d33e:	80 93 af 0c 	sts	0x0CAF, r24
	clear_overlay(2);
    d342:	82 e0       	ldi	r24, 0x02	; 2
    d344:	0e 94 79 5c 	call	0xb8f2	; 0xb8f2 <clear_overlay>
	game.current_level_index = index;
    d348:	c0 93 ce 0d 	sts	0x0DCE, r28
	game.level_ended = 0;
    d34c:	10 92 d6 0d 	sts	0x0DD6, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    d350:	10 92 52 0e 	sts	0x0E52, r1
    d354:	10 92 51 0e 	sts	0x0E51, r1
	p->pressed = 0;
    d358:	10 92 4e 0e 	sts	0x0E4E, r1
    d35c:	10 92 4d 0e 	sts	0x0E4D, r1
	p->released = 0;
    d360:	10 92 50 0e 	sts	0x0E50, r1
    d364:	10 92 4f 0e 	sts	0x0E4F, r1
	p->held_cycles = 0;
    d368:	10 92 53 0e 	sts	0x0E53, r1
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    d36c:	10 92 cd 0e 	sts	0x0ECD, r1
    d370:	10 92 cc 0e 	sts	0x0ECC, r1
	p->pressed = 0;
    d374:	10 92 c9 0e 	sts	0x0EC9, r1
    d378:	10 92 c8 0e 	sts	0x0EC8, r1
	p->released = 0;
    d37c:	10 92 cb 0e 	sts	0x0ECB, r1
    d380:	10 92 ca 0e 	sts	0x0ECA, r1
	p->held_cycles = 0;
    d384:	10 92 ce 0e 	sts	0x0ECE, r1
	LBResetJoyPadState(&game.player.controls);
	LBResetJoyPadState(&game.boss.controls);
	switch (index)
    d388:	8c 2f       	mov	r24, r28
    d38a:	90 e0       	ldi	r25, 0x00	; 0
    d38c:	8a 30       	cpi	r24, 0x0A	; 10
    d38e:	91 05       	cpc	r25, r1
    d390:	d8 f4       	brcc	.+54     	; 0xd3c8 <load_level+0xb0>
    d392:	fc 01       	movw	r30, r24
    d394:	ef 5b       	subi	r30, 0xBF	; 191
    d396:	ff 4f       	sbci	r31, 0xFF	; 255
    d398:	0c 94 0a 76 	jmp	0xec14	; 0xec14 <__tablejump2__>
	{
		case 0: map_level_info((char*) map_level_ice); break;
    d39c:	83 ec       	ldi	r24, 0xC3	; 195
    d39e:	97 e7       	ldi	r25, 0x77	; 119
    d3a0:	11 c0       	rjmp	.+34     	; 0xd3c4 <load_level+0xac>
		case 1: map_level_info((char*) map_level_space); break;
		case 2: map_level_info((char*) map_level_fire); break;
    d3a2:	82 ec       	ldi	r24, 0xC2	; 194
    d3a4:	96 e7       	ldi	r25, 0x76	; 118
    d3a6:	0e c0       	rjmp	.+28     	; 0xd3c4 <load_level+0xac>
		case 3: map_level_info((char*) map_level_space); break;
		case 4: map_level_info((char*) map_level_forest); break;
    d3a8:	81 ec       	ldi	r24, 0xC1	; 193
    d3aa:	95 e7       	ldi	r25, 0x75	; 117
    d3ac:	0b c0       	rjmp	.+22     	; 0xd3c4 <load_level+0xac>
		case 5: map_level_info((char*) map_level_space); break;
		case 6: map_level_info((char*) map_level_city); break;
    d3ae:	80 ec       	ldi	r24, 0xC0	; 192
    d3b0:	94 e7       	ldi	r25, 0x74	; 116
    d3b2:	08 c0       	rjmp	.+16     	; 0xd3c4 <load_level+0xac>
		case 7: map_level_info((char*) map_level_space); break;
    d3b4:	8e eb       	ldi	r24, 0xBE	; 190
    d3b6:	92 e7       	ldi	r25, 0x72	; 114
    d3b8:	05 c0       	rjmp	.+10     	; 0xd3c4 <load_level+0xac>
		case 8: map_level_info((char*) map_level_desert); break;
    d3ba:	8f eb       	ldi	r24, 0xBF	; 191
    d3bc:	93 e7       	ldi	r25, 0x73	; 115
    d3be:	02 c0       	rjmp	.+4      	; 0xd3c4 <load_level+0xac>
		case 9: map_level_info((char*) map_level_space_final); break;
    d3c0:	8d eb       	ldi	r24, 0xBD	; 189
    d3c2:	91 e7       	ldi	r25, 0x71	; 113
    d3c4:	0e 94 b9 5e 	call	0xbd72	; 0xbd72 <map_level_info>
	}
	game.column_count = 0;
    d3c8:	10 92 ca 0d 	sts	0x0DCA, r1
	game.camera_x = get_camera_x(index);
    d3cc:	10 92 ba 0d 	sts	0x0DBA, r1
    d3d0:	10 92 b9 0d 	sts	0x0DB9, r1
	game.camera_y = get_camera_y(index);
    d3d4:	10 92 c1 0d 	sts	0x0DC1, r1
	game.player.shared.x = get_hero_spawn_x(index)*8;
    d3d8:	88 e1       	ldi	r24, 0x18	; 24
    d3da:	90 e0       	ldi	r25, 0x00	; 0
    d3dc:	90 93 da 0d 	sts	0x0DDA, r25
    d3e0:	80 93 d9 0d 	sts	0x0DD9, r24
	game.player.shared.y = get_hero_spawn_y(index)*8;
    d3e4:	88 ea       	ldi	r24, 0xA8	; 168
    d3e6:	90 e0       	ldi	r25, 0x00	; 0
    d3e8:	90 93 dc 0d 	sts	0x0DDC, r25
    d3ec:	80 93 db 0d 	sts	0x0DDB, r24
	game.boss.shared.x = get_boss_spawn_x(index)*8;
    d3f0:	28 ed       	ldi	r18, 0xD8	; 216
    d3f2:	37 e0       	ldi	r19, 0x07	; 7
    d3f4:	30 93 55 0e 	sts	0x0E55, r19
    d3f8:	20 93 54 0e 	sts	0x0E54, r18
	game.boss.shared.y = get_boss_spawn_y(index)*8;
    d3fc:	90 93 57 0e 	sts	0x0E57, r25
    d400:	80 93 56 0e 	sts	0x0E56, r24
	game.camera_x *= 8;
	game.camera_y *= 8;
	game.scroll_src_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    d404:	8d e1       	ldi	r24, 0x1D	; 29
    d406:	80 93 c2 0d 	sts	0x0DC2, r24
    game.scroll_dest_x = game.camera_x / 8 + CAMERA_WIDTH + 1;
    d40a:	80 93 c6 0d 	sts	0x0DC6, r24
	game.scroll_src_y = game.camera_y / 8 + CAMERA_HEIGHT + 1;
    d40e:	8a e1       	ldi	r24, 0x1A	; 26
    d410:	80 93 c3 0d 	sts	0x0DC3, r24
    game.scroll_dest_y =  game.camera_y / 8 + CAMERA_HEIGHT + 1;
    d414:	80 93 c7 0d 	sts	0x0DC7, r24
	game.scroll_x = 0;
    d418:	10 92 c4 0d 	sts	0x0DC4, r1
	game.scroll_y = 0;
    d41c:	10 92 c5 0d 	sts	0x0DC5, r1
	game.spawn_rate = BASE_SPAWN_RATE;
    d420:	8a e0       	ldi	r24, 0x0A	; 10
    d422:	80 93 d5 0d 	sts	0x0DD5, r24
	game.flags = 0;
    d426:	10 92 d8 0d 	sts	0x0DD8, r1
	render_camera_view();
    d42a:	0e 94 b9 5c 	call	0xb972	; 0xb972 <render_camera_view>
	LBPrint(0, VRAM_TILES_V-3, (char*) strShield);
    d42e:	40 eb       	ldi	r20, 0xB0	; 176
    d430:	5b e0       	ldi	r21, 0x0B	; 11
    d432:	6d e1       	ldi	r22, 0x1D	; 29
    d434:	80 e0       	ldi	r24, 0x00	; 0
    d436:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint(18, VRAM_TILES_V-3, (char*) strTime);
    d43a:	43 ea       	ldi	r20, 0xA3	; 163
    d43c:	5b e0       	ldi	r21, 0x0B	; 11
    d43e:	6d e1       	ldi	r22, 0x1D	; 29
    d440:	82 e1       	ldi	r24, 0x12	; 18
    d442:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint(0, VRAM_TILES_V-2, (char*) strLives);
    d446:	49 ea       	ldi	r20, 0xA9	; 169
    d448:	5b e0       	ldi	r21, 0x0B	; 11
    d44a:	6e e1       	ldi	r22, 0x1E	; 30
    d44c:	80 e0       	ldi	r24, 0x00	; 0
    d44e:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint(17, VRAM_TILES_V-2, (char*) strScore);
    d452:	48 eb       	ldi	r20, 0xB8	; 184
    d454:	5b e0       	ldi	r21, 0x0B	; 11
    d456:	6e e1       	ldi	r22, 0x1E	; 30
    d458:	81 e1       	ldi	r24, 0x11	; 17
    d45a:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint(17, VRAM_TILES_V-1, (char*) strTally);
    d45e:	42 e6       	ldi	r20, 0x62	; 98
    d460:	5b e0       	ldi	r21, 0x0B	; 11
    d462:	6f e1       	ldi	r22, 0x1F	; 31
    d464:	81 e1       	ldi	r24, 0x11	; 17
    d466:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    d46a:	21 e0       	ldi	r18, 0x01	; 1
    d46c:	40 91 e8 0d 	lds	r20, 0x0DE8
    d470:	6d e1       	ldi	r22, 0x1D	; 29
    d472:	89 e0       	ldi	r24, 0x09	; 9
    d474:	0e 94 3a 52 	call	0xa474	; 0xa474 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    d478:	40 91 bf 0d 	lds	r20, 0x0DBF
    d47c:	50 91 c0 0d 	lds	r21, 0x0DC0
    d480:	21 e0       	ldi	r18, 0x01	; 1
    d482:	6d e1       	ldi	r22, 0x1D	; 29
    d484:	8b e1       	ldi	r24, 0x1B	; 27
    d486:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    d48a:	21 e0       	ldi	r18, 0x01	; 1
    d48c:	40 91 cc 0d 	lds	r20, 0x0DCC
    d490:	6e e1       	ldi	r22, 0x1E	; 30
    d492:	89 e0       	ldi	r24, 0x09	; 9
    d494:	0e 94 3a 52 	call	0xa474	; 0xa474 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    d498:	40 91 bd 0d 	lds	r20, 0x0DBD
    d49c:	50 91 be 0d 	lds	r21, 0x0DBE
    d4a0:	21 e0       	ldi	r18, 0x01	; 1
    d4a2:	6e e1       	ldi	r22, 0x1E	; 30
    d4a4:	8b e1       	ldi	r24, 0x1B	; 27
    d4a6:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    d4aa:	40 91 bb 0d 	lds	r20, 0x0DBB
    d4ae:	50 91 bc 0d 	lds	r21, 0x0DBC
    d4b2:	21 e0       	ldi	r18, 0x01	; 1
    d4b4:	6f e1       	ldi	r22, 0x1F	; 31
    d4b6:	8b e1       	ldi	r24, 0x1B	; 27
    d4b8:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	
	
	if (!is_space() && drop_ship)
    d4bc:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    d4c0:	81 11       	cpse	r24, r1
    d4c2:	39 c0       	rjmp	.+114    	; 0xd536 <load_level+0x21e>
    d4c4:	dd 23       	and	r29, r29
    d4c6:	b9 f1       	breq	.+110    	; 0xd536 <load_level+0x21e>
	{
		map_ship();
    d4c8:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <map_ship>

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
	char ship_increment = 3;
    d4cc:	d3 e0       	ldi	r29, 0x03	; 3
}

void load_level(u8 index, u8 drop_ship)
{	
	u8 ship_x = (get_hero_spawn_x(index) - 2) * 8;
	u8 ship_y = 0;
    d4ce:	c0 e0       	ldi	r28, 0x00	; 0
	if (!is_space() && drop_ship)
	{
		map_ship();
		while (1)
		{
			WaitVsync(1);
    d4d0:	81 e0       	ldi	r24, 0x01	; 1
    d4d2:	90 e0       	ldi	r25, 0x00	; 0
    d4d4:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(index)*8)
    d4d8:	8c 2f       	mov	r24, r28
    d4da:	90 e0       	ldi	r25, 0x00	; 0
    d4dc:	88 3a       	cpi	r24, 0xA8	; 168
    d4de:	91 05       	cpc	r25, r1
    d4e0:	74 f0       	brlt	.+28     	; 0xd4fe <load_level+0x1e6>
			{
				LBMapSprite(0, map_hero_idle, 0);
    d4e2:	40 e0       	ldi	r20, 0x00	; 0
    d4e4:	65 e1       	ldi	r22, 0x15	; 21
    d4e6:	78 e3       	ldi	r23, 0x38	; 56
    d4e8:	80 e0       	ldi	r24, 0x00	; 0
    d4ea:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
				LBMoveSprite(0, get_hero_spawn_x(index)*8, get_hero_spawn_y(index)*8, 2, 3);
    d4ee:	03 e0       	ldi	r16, 0x03	; 3
    d4f0:	22 e0       	ldi	r18, 0x02	; 2
    d4f2:	48 ea       	ldi	r20, 0xA8	; 168
    d4f4:	68 e1       	ldi	r22, 0x18	; 24
    d4f6:	80 e0       	ldi	r24, 0x00	; 0
    d4f8:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
				ship_increment = -3;
    d4fc:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
    d4fe:	8d e2       	ldi	r24, 0x2D	; 45
    d500:	9e e0       	ldi	r25, 0x0E	; 14
    d502:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    d506:	40 e0       	ldi	r20, 0x00	; 0
    d508:	bc 01       	movw	r22, r24
    d50a:	86 e0       	ldi	r24, 0x06	; 6
    d50c:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
    d510:	02 e0       	ldi	r16, 0x02	; 2
    d512:	24 e0       	ldi	r18, 0x04	; 4
    d514:	4c 2f       	mov	r20, r28
    d516:	68 e0       	ldi	r22, 0x08	; 8
    d518:	86 e0       	ldi	r24, 0x06	; 6
    d51a:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
			ship_y += ship_increment;
    d51e:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    d520:	39 f4       	brne	.+14     	; 0xd530 <load_level+0x218>
			{
				clear_sprites(6, 8);
    d522:	68 e0       	ldi	r22, 0x08	; 8
    d524:	86 e0       	ldi	r24, 0x06	; 6
				break;
			}
			LBRotateSprites();
		}
	}
}
    d526:	df 91       	pop	r29
    d528:	cf 91       	pop	r28
    d52a:	0f 91       	pop	r16
			LBMapSprite(6, LBGetNextFrame(&game.player.run), 0);
			LBMoveSprite(6, ship_x, ship_y, 4, 2);
			ship_y += ship_increment;
			if (ship_y == 0)
			{
				clear_sprites(6, 8);
    d52c:	0c 94 47 69 	jmp	0xd28e	; 0xd28e <clear_sprites>
				break;
			}
			LBRotateSprites();
    d530:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
		}
    d534:	cd cf       	rjmp	.-102    	; 0xd4d0 <load_level+0x1b8>
	}
}
    d536:	df 91       	pop	r29
    d538:	cf 91       	pop	r28
    d53a:	0f 91       	pop	r16
    d53c:	08 95       	ret

0000d53e <hide_sprites>:
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}

void hide_sprites(u8 from, u8 count)
{
    d53e:	0f 93       	push	r16
    d540:	1f 93       	push	r17
    d542:	cf 93       	push	r28
    d544:	df 93       	push	r29
	for(u8 i = from; i < from+count; i++)
    d546:	18 2f       	mov	r17, r24
    d548:	c6 2f       	mov	r28, r22
    d54a:	d0 e0       	ldi	r29, 0x00	; 0
    d54c:	c8 0f       	add	r28, r24
    d54e:	d1 1d       	adc	r29, r1
    d550:	81 2f       	mov	r24, r17
    d552:	90 e0       	ldi	r25, 0x00	; 0
    d554:	8c 17       	cp	r24, r28
    d556:	9d 07       	cpc	r25, r29
    d558:	4c f4       	brge	.+18     	; 0xd56c <hide_sprites+0x2e>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
    d55a:	01 e0       	ldi	r16, 0x01	; 1
    d55c:	21 e0       	ldi	r18, 0x01	; 1
    d55e:	40 e0       	ldi	r20, 0x00	; 0
    d560:	60 ee       	ldi	r22, 0xE0	; 224
    d562:	81 2f       	mov	r24, r17
    d564:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	}
}

void hide_sprites(u8 from, u8 count)
{
	for(u8 i = from; i < from+count; i++)
    d568:	1f 5f       	subi	r17, 0xFF	; 255
    d56a:	f2 cf       	rjmp	.-28     	; 0xd550 <hide_sprites+0x12>
	{
		LBMoveSprite(i, OFF_SCREEN, 0, 1, 1);
	}
}
    d56c:	df 91       	pop	r29
    d56e:	cf 91       	pop	r28
    d570:	1f 91       	pop	r17
    d572:	0f 91       	pop	r16
    d574:	08 95       	ret

0000d576 <select_pressed>:
	StopSong();
	load_high_scores();
}

char select_pressed(JoyPadState* p)
{
    d576:	fc 01       	movw	r30, r24
    d578:	20 81       	ld	r18, Z
    d57a:	31 81       	ldd	r19, Z+1	; 0x01
    d57c:	29 70       	andi	r18, 0x09	; 9
    d57e:	33 27       	eor	r19, r19
	return (p->pressed & BTN_B) || (p->pressed & BTN_START);
    d580:	81 e0       	ldi	r24, 0x01	; 1
    d582:	23 2b       	or	r18, r19
    d584:	09 f4       	brne	.+2      	; 0xd588 <select_pressed+0x12>
    d586:	80 e0       	ldi	r24, 0x00	; 0
}
    d588:	08 95       	ret

0000d58a <stream_text_anywhere>:
{
	return (p->pressed & BTN_SELECT);
}

void stream_text_anywhere(const char* dialogue, u8 x, u8 y)
{
    d58a:	ff 92       	push	r15
    d58c:	0f 93       	push	r16
    d58e:	1f 93       	push	r17
    d590:	cf 93       	push	r28
    d592:	df 93       	push	r29
    d594:	f6 2e       	mov	r15, r22
    d596:	14 2f       	mov	r17, r20
	u8 ln, c;
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
    d598:	fc 01       	movw	r30, r24
    d59a:	24 91       	lpm	r18, Z
    d59c:	23 32       	cpi	r18, 0x23	; 35
    d59e:	b1 f0       	breq	.+44     	; 0xd5cc <stream_text_anywhere+0x42>
    d5a0:	ec 01       	movw	r28, r24
    d5a2:	0f 2d       	mov	r16, r15
    d5a4:	08 1b       	sub	r16, r24
    d5a6:	8c 2f       	mov	r24, r28
    d5a8:	80 0f       	add	r24, r16
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    d5aa:	21 96       	adiw	r28, 0x01	; 1
    d5ac:	fe 01       	movw	r30, r28
    d5ae:	31 97       	sbiw	r30, 0x01	; 1
    d5b0:	44 91       	lpm	r20, Z
    d5b2:	44 23       	and	r20, r20
    d5b4:	41 f0       	breq	.+16     	; 0xd5c6 <stream_text_anywhere+0x3c>
		{
			LBPrintChar(cursor++, y, c);
    d5b6:	61 2f       	mov	r22, r17
    d5b8:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
			WaitUs(CHARACTER_DELAY_US);
    d5bc:	80 e7       	ldi	r24, 0x70	; 112
    d5be:	97 e1       	ldi	r25, 0x17	; 23
    d5c0:	0e 94 ff 41 	call	0x83fe	; 0x83fe <WaitUs>
    d5c4:	f0 cf       	rjmp	.-32     	; 0xd5a6 <stream_text_anywhere+0x1c>
		}
		y++;
    d5c6:	1f 5f       	subi	r17, 0xFF	; 255
	u8 cursor = x; 
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		while ((c = pgm_read_byte(dialogue++)))
    d5c8:	ce 01       	movw	r24, r28
    d5ca:	e6 cf       	rjmp	.-52     	; 0xd598 <stream_text_anywhere+0xe>
			WaitUs(CHARACTER_DELAY_US);
		}
		y++;
		cursor = x;
	}
}
    d5cc:	df 91       	pop	r29
    d5ce:	cf 91       	pop	r28
    d5d0:	1f 91       	pop	r17
    d5d2:	0f 91       	pop	r16
    d5d4:	ff 90       	pop	r15
    d5d6:	08 95       	ret

0000d5d8 <map_particles>:

void map_particles()
{
    d5d8:	cf 93       	push	r28
	for (u8 i = 9; i < 20; i++)
    d5da:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMapSprite(i, map_particle, 0);
    d5dc:	40 e0       	ldi	r20, 0x00	; 0
    d5de:	65 e3       	ldi	r22, 0x35	; 53
    d5e0:	78 e3       	ldi	r23, 0x38	; 56
    d5e2:	8c 2f       	mov	r24, r28
    d5e4:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	}
}

void map_particles()
{
	for (u8 i = 9; i < 20; i++)
    d5e8:	cf 5f       	subi	r28, 0xFF	; 255
    d5ea:	c4 31       	cpi	r28, 0x14	; 20
    d5ec:	b9 f7       	brne	.-18     	; 0xd5dc <map_particles+0x4>
	{
		LBMapSprite(i, map_particle, 0);
	}
}
    d5ee:	cf 91       	pop	r28
    d5f0:	08 95       	ret

0000d5f2 <place_particles>:

void place_particles()
{
    d5f2:	0f 93       	push	r16
    d5f4:	1f 93       	push	r17
    d5f6:	cf 93       	push	r28
    d5f8:	df 93       	push	r29
    d5fa:	1f 92       	push	r1
    d5fc:	cd b7       	in	r28, 0x3d	; 61
    d5fe:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 9; i < 20; i++)
    d600:	19 e0       	ldi	r17, 0x09	; 9
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
    d602:	68 ec       	ldi	r22, 0xC8	; 200
    d604:	80 e0       	ldi	r24, 0x00	; 0
    d606:	0e 94 ce 52 	call	0xa59c	; 0xa59c <LBRandom>
    d60a:	48 2f       	mov	r20, r24
    d60c:	60 ee       	ldi	r22, 0xE0	; 224
    d60e:	80 e0       	ldi	r24, 0x00	; 0
    d610:	49 83       	std	Y+1, r20	; 0x01
    d612:	0e 94 ce 52 	call	0xa59c	; 0xa59c <LBRandom>
    d616:	68 2f       	mov	r22, r24
    d618:	01 e0       	ldi	r16, 0x01	; 1
    d61a:	21 e0       	ldi	r18, 0x01	; 1
    d61c:	49 81       	ldd	r20, Y+1	; 0x01
    d61e:	81 2f       	mov	r24, r17
    d620:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	}
}

void place_particles()
{
	for (u8 i = 9; i < 20; i++)
    d624:	1f 5f       	subi	r17, 0xFF	; 255
    d626:	14 31       	cpi	r17, 0x14	; 20
    d628:	61 f7       	brne	.-40     	; 0xd602 <place_particles+0x10>
	{
		LBMoveSprite(i, LBRandom(0, 224), LBRandom(0, 200), 1, 1);
	}
}
    d62a:	0f 90       	pop	r0
    d62c:	df 91       	pop	r29
    d62e:	cf 91       	pop	r28
    d630:	1f 91       	pop	r17
    d632:	0f 91       	pop	r16
    d634:	08 95       	ret

0000d636 <animate_particles>:

void animate_particles(char dy, u8 oy)
{
    d636:	ef 92       	push	r14
    d638:	ff 92       	push	r15
    d63a:	0f 93       	push	r16
    d63c:	1f 93       	push	r17
    d63e:	cf 93       	push	r28
    d640:	df 93       	push	r29
    d642:	d8 2f       	mov	r29, r24
    d644:	16 2f       	mov	r17, r22
    d646:	89 e0       	ldi	r24, 0x09	; 9
    d648:	e8 2e       	mov	r14, r24
    d64a:	80 e1       	ldi	r24, 0x10	; 16
    d64c:	f8 2e       	mov	r15, r24
	for (u8 i = 9; i < 20; i++)
    d64e:	c9 e0       	ldi	r28, 0x09	; 9
	{
		LBMoveSprite(i, extendedSprites[i].x, extendedSprites[i].y+dy, 1, 1);
    d650:	f7 01       	movw	r30, r14
    d652:	40 81       	ld	r20, Z
    d654:	4d 0f       	add	r20, r29
    d656:	01 e0       	ldi	r16, 0x01	; 1
    d658:	21 e0       	ldi	r18, 0x01	; 1
    d65a:	31 97       	sbiw	r30, 0x01	; 1
    d65c:	60 81       	ld	r22, Z
    d65e:	8c 2f       	mov	r24, r28
    d660:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
		if (extendedSprites[i].y > 200)
    d664:	f7 01       	movw	r30, r14
    d666:	80 81       	ld	r24, Z
    d668:	89 3c       	cpi	r24, 0xC9	; 201
    d66a:	50 f0       	brcs	.+20     	; 0xd680 <animate_particles+0x4a>
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
    d66c:	60 ee       	ldi	r22, 0xE0	; 224
    d66e:	80 e0       	ldi	r24, 0x00	; 0
    d670:	0e 94 ce 52 	call	0xa59c	; 0xa59c <LBRandom>
    d674:	21 e0       	ldi	r18, 0x01	; 1
    d676:	41 2f       	mov	r20, r17
    d678:	68 2f       	mov	r22, r24
    d67a:	8c 2f       	mov	r24, r28
    d67c:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	}
}

void animate_particles(char dy, u8 oy)
{
	for (u8 i = 9; i < 20; i++)
    d680:	cf 5f       	subi	r28, 0xFF	; 255
    d682:	f4 e0       	ldi	r31, 0x04	; 4
    d684:	ef 0e       	add	r14, r31
    d686:	f1 1c       	adc	r15, r1
    d688:	c4 31       	cpi	r28, 0x14	; 20
    d68a:	11 f7       	brne	.-60     	; 0xd650 <animate_particles+0x1a>
		if (extendedSprites[i].y > 200)
		{
			LBMoveSprite(i, LBRandom(0, 224), oy, 1, 1);
		}
	}
}
    d68c:	df 91       	pop	r29
    d68e:	cf 91       	pop	r28
    d690:	1f 91       	pop	r17
    d692:	0f 91       	pop	r16
    d694:	ff 90       	pop	r15
    d696:	ef 90       	pop	r14
    d698:	08 95       	ret

0000d69a <get_emarald_map>:

const char* get_emarald_map(u8 index)
{
    d69a:	82 50       	subi	r24, 0x02	; 2
    d69c:	87 30       	cpi	r24, 0x07	; 7
    d69e:	48 f4       	brcc	.+18     	; 0xd6b2 <get_emarald_map+0x18>
    d6a0:	e8 2f       	mov	r30, r24
    d6a2:	f0 e0       	ldi	r31, 0x00	; 0
    d6a4:	ee 0f       	add	r30, r30
    d6a6:	ff 1f       	adc	r31, r31
    d6a8:	ee 5f       	subi	r30, 0xFE	; 254
    d6aa:	fa 4f       	sbci	r31, 0xFA	; 250
    d6ac:	80 81       	ld	r24, Z
    d6ae:	91 81       	ldd	r25, Z+1	; 0x01
    d6b0:	08 95       	ret
    d6b2:	89 e2       	ldi	r24, 0x29	; 41
    d6b4:	98 e3       	ldi	r25, 0x38	; 56
		case 4: return map_emerald_2;
		case 6: return map_emerald_3;
		case 8: return map_emerald_4;
		default: return map_emerald_0;
	}
}
    d6b6:	08 95       	ret

0000d6b8 <music_transition>:

void music_transition()
{
	if (is_space())
    d6b8:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    d6bc:	88 23       	and	r24, r24
    d6be:	19 f0       	breq	.+6      	; 0xd6c6 <music_transition+0xe>
	{
		StartSong(spacesong);
    d6c0:	87 ee       	ldi	r24, 0xE7	; 231
    d6c2:	9b e0       	ldi	r25, 0x0B	; 11
    d6c4:	06 c0       	rjmp	.+12     	; 0xd6d2 <music_transition+0x1a>
	}
	else if (game.current_level_index != 0)
    d6c6:	80 91 ce 0d 	lds	r24, 0x0DCE
    d6ca:	88 23       	and	r24, r24
    d6cc:	21 f0       	breq	.+8      	; 0xd6d6 <music_transition+0x1e>
	{
		StartSong(planetsong);
    d6ce:	87 e8       	ldi	r24, 0x87	; 135
    d6d0:	92 e1       	ldi	r25, 0x12	; 18
    d6d2:	0c 94 bd 44 	jmp	0x897a	; 0x897a <StartSong>
    d6d6:	08 95       	ret

0000d6d8 <planet_transition>:
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d6d8:	cf 92       	push	r12
    d6da:	df 92       	push	r13
    d6dc:	ef 92       	push	r14
    d6de:	ff 92       	push	r15
    d6e0:	0f 93       	push	r16
    d6e2:	1f 93       	push	r17
    d6e4:	cf 93       	push	r28
    d6e6:	df 93       	push	r29
    d6e8:	1f 92       	push	r1
    d6ea:	cd b7       	in	r28, 0x3d	; 61
    d6ec:	de b7       	in	r29, 0x3e	; 62
    d6ee:	c8 2e       	mov	r12, r24
    d6f0:	e6 2e       	mov	r14, r22
    d6f2:	12 2f       	mov	r17, r18
    d6f4:	f0 2e       	mov	r15, r16
	u8 frame_counter = 0;
	
	fade_through();
    d6f6:	49 83       	std	Y+1, r20	; 0x01
    d6f8:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	Screen.scrollX = 0;
    d6fc:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d700:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d704:	80 e2       	ldi	r24, 0x20	; 32
    d706:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d70a:	10 92 af 0c 	sts	0x0CAF, r1
	game.scroll_x = 0;
    d70e:	10 92 c4 0d 	sts	0x0DC4, r1
	game.scroll_y = 0;
    d712:	10 92 c5 0d 	sts	0x0DC5, r1
	map_particles();
    d716:	0e 94 ec 6a 	call	0xd5d8	; 0xd5d8 <map_particles>
	map_ship();
    d71a:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <map_ship>
	place_particles();
    d71e:	0e 94 f9 6a 	call	0xd5f2	; 0xd5f2 <place_particles>
	DrawMap2(0, atmosphere_height, map_atmosphere);
    d722:	4b e2       	ldi	r20, 0x2B	; 43
    d724:	50 e6       	ldi	r21, 0x60	; 96
    d726:	69 81       	ldd	r22, Y+1	; 0x01
    d728:	80 e0       	ldi	r24, 0x00	; 0
    d72a:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
	game.current_level_index = index;
    d72e:	c0 92 ce 0d 	sts	0x0DCE, r12
	music_transition();
    d732:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <music_transition>
	if (!is_space())
    d736:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    d73a:	81 11       	cpse	r24, r1
    d73c:	0f c0       	rjmp	.+30     	; 0xd75c <planet_transition+0x84>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
    d73e:	8c 2d       	mov	r24, r12
    d740:	0e 94 4d 6b 	call	0xd69a	; 0xd69a <get_emarald_map>
    d744:	40 e0       	ldi	r20, 0x00	; 0
    d746:	bc 01       	movw	r22, r24
    d748:	88 e0       	ldi	r24, 0x08	; 8
    d74a:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		LBMoveSprite(8, 112, 48, 1, 1);
    d74e:	01 e0       	ldi	r16, 0x01	; 1
    d750:	21 e0       	ldi	r18, 0x01	; 1
    d752:	40 e3       	ldi	r20, 0x30	; 48
    d754:	60 e7       	ldi	r22, 0x70	; 112
    d756:	88 e0       	ldi	r24, 0x08	; 8
    d758:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
		StartSong(planetsong);
	}
}

void planet_transition(u8 index, char scroll, char atmosphere_height, char dy, u8 oy)
{
    d75c:	d1 2c       	mov	r13, r1
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
	{
		WaitVsync(1);
    d75e:	81 e0       	ldi	r24, 0x01	; 1
    d760:	90 e0       	ldi	r25, 0x00	; 0
    d762:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
		LBMapSprite(0, LBGetNextFrame(&game.player.run), 0);
    d766:	8d e2       	ldi	r24, 0x2D	; 45
    d768:	9e e0       	ldi	r25, 0x0E	; 14
    d76a:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    d76e:	40 e0       	ldi	r20, 0x00	; 0
    d770:	bc 01       	movw	r22, r24
    d772:	80 e0       	ldi	r24, 0x00	; 0
    d774:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		LBMoveSprite(0, 104, 104, 4, 2);
    d778:	02 e0       	ldi	r16, 0x02	; 2
    d77a:	24 e0       	ldi	r18, 0x04	; 4
    d77c:	48 e6       	ldi	r20, 0x68	; 104
    d77e:	68 e6       	ldi	r22, 0x68	; 104
    d780:	80 e0       	ldi	r24, 0x00	; 0
    d782:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
		frame_counter++;
    d786:	d3 94       	inc	r13
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
    d788:	8d 2d       	mov	r24, r13
    d78a:	8f 70       	andi	r24, 0x0F	; 15
    d78c:	29 f4       	brne	.+10     	; 0xd798 <planet_transition+0xc0>
    d78e:	90 91 b3 0c 	lds	r25, 0x0CB3
    d792:	9e 0d       	add	r25, r14
    d794:	90 93 b3 0c 	sts	0x0CB3, r25
		animate_particles(dy, oy);
    d798:	6f 2d       	mov	r22, r15
    d79a:	81 2f       	mov	r24, r17
    d79c:	0e 94 1b 6b 	call	0xd636	; 0xd636 <animate_particles>
		LBRotateSprites();
    d7a0:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	{
		LBMapSprite(8, get_emarald_map(index), 0);
		LBMoveSprite(8, 112, 48, 1, 1);
	}
	
	while (frame_counter < 255)
    d7a4:	8f ef       	ldi	r24, 0xFF	; 255
    d7a6:	d8 12       	cpse	r13, r24
    d7a8:	da cf       	rjmp	.-76     	; 0xd75e <planet_transition+0x86>
		frame_counter++;
		if (frame_counter % 16 == 0) Screen.scrollY += scroll;
		animate_particles(dy, oy);
		LBRotateSprites();
	}
	game.current_screen = LEVEL;
    d7aa:	82 e0       	ldi	r24, 0x02	; 2
    d7ac:	80 93 cd 0d 	sts	0x0DCD, r24
	ClearVram();
    d7b0:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d7b4:	64 e1       	ldi	r22, 0x14	; 20
    d7b6:	80 e0       	ldi	r24, 0x00	; 0
    d7b8:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    d7bc:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	fade_through();
    d7c0:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	game.level_score = 0;
    d7c4:	10 92 be 0d 	sts	0x0DBE, r1
    d7c8:	10 92 bd 0d 	sts	0x0DBD, r1
	load_level(index, true);
    d7cc:	61 e0       	ldi	r22, 0x01	; 1
    d7ce:	8c 2d       	mov	r24, r12
    d7d0:	0e 94 8c 69 	call	0xd318	; 0xd318 <load_level>
	init_player_state();
    d7d4:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <init_player_state>
	init_boss_state();
    d7d8:	0e 94 de 57 	call	0xafbc	; 0xafbc <init_boss_state>
	init_enemy_state();
}
    d7dc:	0f 90       	pop	r0
    d7de:	df 91       	pop	r29
    d7e0:	cf 91       	pop	r28
    d7e2:	1f 91       	pop	r17
    d7e4:	0f 91       	pop	r16
    d7e6:	ff 90       	pop	r15
    d7e8:	ef 90       	pop	r14
    d7ea:	df 90       	pop	r13
    d7ec:	cf 90       	pop	r12
	fade_through();
	game.level_score = 0;
	load_level(index, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d7ee:	0c 94 d1 53 	jmp	0xa7a2	; 0xa7a2 <init_enemy_state>

0000d7f2 <intro>:
}


void intro()
{
    d7f2:	0f 93       	push	r16
	fade_through();
    d7f4:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	game.lives = LIVES;
    d7f8:	e9 eb       	ldi	r30, 0xB9	; 185
    d7fa:	fd e0       	ldi	r31, 0x0D	; 13
    d7fc:	8a e0       	ldi	r24, 0x0A	; 10
    d7fe:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d800:	13 82       	std	Z+3, r1	; 0x03
    d802:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d804:	15 82       	std	Z+5, r1	; 0x05
    d806:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d808:	17 82       	std	Z+7, r1	; 0x07
    d80a:	16 82       	std	Z+6, r1	; 0x06
	StartSong(planetsong);
    d80c:	87 e8       	ldi	r24, 0x87	; 135
    d80e:	92 e1       	ldi	r25, 0x12	; 18
    d810:	0e 94 bd 44 	call	0x897a	; 0x897a <StartSong>
	print_scroll(strIntro);
    d814:	8b eb       	ldi	r24, 0xBB	; 187
    d816:	9a e0       	ldi	r25, 0x0A	; 10
    d818:	0e 94 fa 68 	call	0xd1f4	; 0xd1f4 <print_scroll>
	planet_transition(0, 1, 28, -3, 199);
    d81c:	07 ec       	ldi	r16, 0xC7	; 199
    d81e:	2d ef       	ldi	r18, 0xFD	; 253
    d820:	4c e1       	ldi	r20, 0x1C	; 28
    d822:	61 e0       	ldi	r22, 0x01	; 1
    d824:	80 e0       	ldi	r24, 0x00	; 0
    d826:	0e 94 6c 6b 	call	0xd6d8	; 0xd6d8 <planet_transition>
}
    d82a:	0f 91       	pop	r16
    d82c:	08 95       	ret

0000d82e <demo_load>:

void demo_load(u8 idx)
{
    d82e:	cf 93       	push	r28
    d830:	c8 2f       	mov	r28, r24
	game.lives = LIVES;
    d832:	e9 eb       	ldi	r30, 0xB9	; 185
    d834:	fd e0       	ldi	r31, 0x0D	; 13
    d836:	8a e0       	ldi	r24, 0x0A	; 10
    d838:	83 8b       	std	Z+19, r24	; 0x13
	game.score = 0;
    d83a:	13 82       	std	Z+3, r1	; 0x03
    d83c:	12 82       	std	Z+2, r1	; 0x02
	game.level_score = 0;
    d83e:	15 82       	std	Z+5, r1	; 0x05
    d840:	14 82       	std	Z+4, r1	; 0x04
	game.time = 0;
    d842:	17 82       	std	Z+7, r1	; 0x07
    d844:	16 82       	std	Z+6, r1	; 0x06
	game.current_screen = LEVEL;
    d846:	82 e0       	ldi	r24, 0x02	; 2
    d848:	84 8b       	std	Z+20, r24	; 0x14
	ClearVram();
    d84a:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d84e:	64 e1       	ldi	r22, 0x14	; 20
    d850:	80 e0       	ldi	r24, 0x00	; 0
    d852:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    d856:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	fade_through();
    d85a:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	load_level(idx, true);
    d85e:	61 e0       	ldi	r22, 0x01	; 1
    d860:	8c 2f       	mov	r24, r28
    d862:	0e 94 8c 69 	call	0xd318	; 0xd318 <load_level>
	init_player_state();
    d866:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <init_player_state>
	init_boss_state();
    d86a:	0e 94 de 57 	call	0xafbc	; 0xafbc <init_boss_state>
	init_enemy_state();
}
    d86e:	cf 91       	pop	r28
	LBRotateSprites();
	fade_through();
	load_level(idx, true);
	init_player_state();
	init_boss_state();
	init_enemy_state();
    d870:	0c 94 d1 53 	jmp	0xa7a2	; 0xa7a2 <init_enemy_state>

0000d874 <load_splash>:
}

void load_splash()
{
	fade_through();
    d874:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	Screen.scrollX = 0;
    d878:	ef ea       	ldi	r30, 0xAF	; 175
    d87a:	fc e0       	ldi	r31, 0x0C	; 12
    d87c:	13 82       	std	Z+3, r1	; 0x03
	Screen.scrollY = 0;
    d87e:	14 82       	std	Z+4, r1	; 0x04
	Screen.scrollHeight = 32;
    d880:	80 e2       	ldi	r24, 0x20	; 32
    d882:	85 83       	std	Z+5, r24	; 0x05
	Screen.overlayHeight = 0;
    d884:	10 82       	st	Z, r1
	game.current_screen = SPLASH;
    d886:	e9 eb       	ldi	r30, 0xB9	; 185
    d888:	fd e0       	ldi	r31, 0x0D	; 13
    d88a:	14 8a       	std	Z+20, r1	; 0x14
	game.selection = START_SELECTED;
    d88c:	11 8e       	std	Z+25, r1	; 0x19
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    d88e:	64 e1       	ldi	r22, 0x14	; 20
    d890:	80 e0       	ldi	r24, 0x00	; 0
    d892:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    d896:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	LBPrint(8, 15, (char*) str1Player);
    d89a:	4c ec       	ldi	r20, 0xCC	; 204
    d89c:	5b e0       	ldi	r21, 0x0B	; 11
    d89e:	6f e0       	ldi	r22, 0x0F	; 15
    d8a0:	88 e0       	ldi	r24, 0x08	; 8
    d8a2:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint(8, 16, (char*) strHighScores);
    d8a6:	40 ec       	ldi	r20, 0xC0	; 192
    d8a8:	5b e0       	ldi	r21, 0x0B	; 11
    d8aa:	60 e1       	ldi	r22, 0x10	; 16
    d8ac:	88 e0       	ldi	r24, 0x08	; 8
    d8ae:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint(4, 21, (char*) strCopyright);
    d8b2:	42 ed       	ldi	r20, 0xD2	; 210
    d8b4:	5b e0       	ldi	r21, 0x0B	; 11
    d8b6:	65 e1       	ldi	r22, 0x15	; 21
    d8b8:	84 e0       	ldi	r24, 0x04	; 4
    d8ba:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	DrawMap2(6, 5, map_splash);
    d8be:	40 e5       	ldi	r20, 0x50	; 80
    d8c0:	51 e6       	ldi	r21, 0x61	; 97
    d8c2:	65 e0       	ldi	r22, 0x05	; 5
    d8c4:	86 e0       	ldi	r24, 0x06	; 6
    d8c6:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
	LBMapSprite(0, map_right_arrow, 0);
    d8ca:	40 e0       	ldi	r20, 0x00	; 0
    d8cc:	6e e3       	ldi	r22, 0x3E	; 62
    d8ce:	78 e3       	ldi	r23, 0x38	; 56
    d8d0:	80 e0       	ldi	r24, 0x00	; 0
    d8d2:	0c 94 f3 52 	jmp	0xa5e6	; 0xa5e6 <LBMapSprite>

0000d8d6 <load_high_scores>:
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}

void load_high_scores()
{
    d8d6:	2f 92       	push	r2
    d8d8:	3f 92       	push	r3
    d8da:	5f 92       	push	r5
    d8dc:	6f 92       	push	r6
    d8de:	7f 92       	push	r7
    d8e0:	8f 92       	push	r8
    d8e2:	9f 92       	push	r9
    d8e4:	af 92       	push	r10
    d8e6:	bf 92       	push	r11
    d8e8:	cf 92       	push	r12
    d8ea:	df 92       	push	r13
    d8ec:	ef 92       	push	r14
    d8ee:	ff 92       	push	r15
    d8f0:	0f 93       	push	r16
    d8f2:	1f 93       	push	r17
    d8f4:	cf 93       	push	r28
    d8f6:	df 93       	push	r29
	u16 score = 0;
	u8 ypos = 7;
	
	game.current_screen = HIGH_SCORES;
    d8f8:	81 e0       	ldi	r24, 0x01	; 1
    d8fa:	80 93 cd 0d 	sts	0x0DCD, r24
	game.high_score_index = -1;
    d8fe:	8f ef       	ldi	r24, 0xFF	; 255
    d900:	80 93 cb 0d 	sts	0x0DCB, r24
	fade_through();
    d904:	0e 94 69 69 	call	0xd2d2	; 0xd2d2 <fade_through>
	Screen.scrollX = 0;
    d908:	10 92 b2 0c 	sts	0x0CB2, r1
	Screen.scrollY = 0;
    d90c:	10 92 b3 0c 	sts	0x0CB3, r1
	Screen.scrollHeight = 32;
    d910:	80 e2       	ldi	r24, 0x20	; 32
    d912:	80 93 b4 0c 	sts	0x0CB4, r24
	Screen.overlayHeight = 0;
    d916:	10 92 af 0c 	sts	0x0CAF, r1
	load_eeprom(&scores);
    d91a:	89 e9       	ldi	r24, 0x99	; 153
    d91c:	9d e0       	ldi	r25, 0x0D	; 13
    d91e:	0e 94 67 5c 	call	0xb8ce	; 0xb8ce <load_eeprom>
	
	LBPrint(9, 3, (char*) strHighScores);
    d922:	40 ec       	ldi	r20, 0xC0	; 192
    d924:	5b e0       	ldi	r21, 0x0B	; 11
    d926:	63 e0       	ldi	r22, 0x03	; 3
    d928:	89 e0       	ldi	r24, 0x09	; 9
    d92a:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	
	LBMapSprite(0, map_emerald_0, 0);
    d92e:	40 e0       	ldi	r20, 0x00	; 0
    d930:	69 e2       	ldi	r22, 0x29	; 41
    d932:	78 e3       	ldi	r23, 0x38	; 56
    d934:	80 e0       	ldi	r24, 0x00	; 0
    d936:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMapSprite(1, map_emerald_1, 0);
    d93a:	40 e0       	ldi	r20, 0x00	; 0
    d93c:	66 e2       	ldi	r22, 0x26	; 38
    d93e:	78 e3       	ldi	r23, 0x38	; 56
    d940:	81 e0       	ldi	r24, 0x01	; 1
    d942:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
    d946:	01 e0       	ldi	r16, 0x01	; 1
    d948:	21 e0       	ldi	r18, 0x01	; 1
    d94a:	48 e1       	ldi	r20, 0x18	; 24
    d94c:	68 e3       	ldi	r22, 0x38	; 56
    d94e:	80 e0       	ldi	r24, 0x00	; 0
    d950:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
    d954:	21 e0       	ldi	r18, 0x01	; 1
    d956:	48 e1       	ldi	r20, 0x18	; 24
    d958:	68 ea       	ldi	r22, 0xA8	; 168
    d95a:	81 e0       	ldi	r24, 0x01	; 1
    d95c:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
    d960:	8b e9       	ldi	r24, 0x9B	; 155
    d962:	a8 2e       	mov	r10, r24
    d964:	8d e0       	ldi	r24, 0x0D	; 13
    d966:	b8 2e       	mov	r11, r24
    d968:	9c e9       	ldi	r25, 0x9C	; 156
    d96a:	c9 2e       	mov	r12, r25
    d96c:	9d e0       	ldi	r25, 0x0D	; 13
    d96e:	d9 2e       	mov	r13, r25
    d970:	2d e9       	ldi	r18, 0x9D	; 157
    d972:	82 2e       	mov	r8, r18
    d974:	2d e0       	ldi	r18, 0x0D	; 13
    d976:	92 2e       	mov	r9, r18
    d978:	74 01       	movw	r14, r8
    d97a:	d0 e3       	ldi	r29, 0x30	; 48
}

void load_high_scores()
{
	u16 score = 0;
	u8 ypos = 7;
    d97c:	c7 e0       	ldi	r28, 0x07	; 7
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d97e:	35 e0       	ldi	r19, 0x05	; 5
    d980:	53 2e       	mov	r5, r19
    d982:	44 eb       	ldi	r20, 0xB4	; 180
    d984:	64 2e       	mov	r6, r20
    d986:	4d e0       	ldi	r20, 0x0D	; 13
    d988:	74 2e       	mov	r7, r20
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
			}
			scores.data[i] = 'A';
    d98a:	11 e4       	ldi	r17, 0x41	; 65
    d98c:	0e 2d       	mov	r16, r14
    d98e:	08 19       	sub	r16, r8
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
	{
		LBPrintByte(9, ypos, i/5+1, false);
    d990:	80 2f       	mov	r24, r16
    d992:	65 2d       	mov	r22, r5
    d994:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    d998:	41 e0       	ldi	r20, 0x01	; 1
    d99a:	48 0f       	add	r20, r24
    d99c:	20 e0       	ldi	r18, 0x00	; 0
    d99e:	6c 2f       	mov	r22, r28
    d9a0:	89 e0       	ldi	r24, 0x09	; 9
    d9a2:	0e 94 3a 52 	call	0xa474	; 0xa474 <LBPrintByte>
		LBPrintChar(10, ypos, ' ');
    d9a6:	40 e2       	ldi	r20, 0x20	; 32
    d9a8:	6c 2f       	mov	r22, r28
    d9aa:	8a e0       	ldi	r24, 0x0A	; 10
    d9ac:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		LBPrintChar(11, ypos, scores.data[i]);
    d9b0:	f5 01       	movw	r30, r10
    d9b2:	40 81       	ld	r20, Z
    d9b4:	6c 2f       	mov	r22, r28
    d9b6:	8b e0       	ldi	r24, 0x0B	; 11
    d9b8:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		LBPrintChar(12, ypos, scores.data[i+1]);
    d9bc:	f6 01       	movw	r30, r12
    d9be:	40 81       	ld	r20, Z
    d9c0:	6c 2f       	mov	r22, r28
    d9c2:	8c e0       	ldi	r24, 0x0C	; 12
    d9c4:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		LBPrintChar(13, ypos, scores.data[i+2]);
    d9c8:	f7 01       	movw	r30, r14
    d9ca:	40 81       	ld	r20, Z
    d9cc:	6c 2f       	mov	r22, r28
    d9ce:	8d e0       	ldi	r24, 0x0D	; 13
    d9d0:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		LBPrintChar(14, ypos, ' ');
    d9d4:	40 e2       	ldi	r20, 0x20	; 32
    d9d6:	6c 2f       	mov	r22, r28
    d9d8:	8e e0       	ldi	r24, 0x0E	; 14
    d9da:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		memcpy(&score, &(scores.data[i+3]), 2);
    d9de:	f7 01       	movw	r30, r14
    d9e0:	21 80       	ldd	r2, Z+1	; 0x01
    d9e2:	32 80       	ldd	r3, Z+2	; 0x02
		LBPrintInt(19, ypos, score, true);
    d9e4:	21 e0       	ldi	r18, 0x01	; 1
    d9e6:	a1 01       	movw	r20, r2
    d9e8:	6c 2f       	mov	r22, r28
    d9ea:	83 e1       	ldi	r24, 0x13	; 19
    d9ec:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		
		if (game.score > score && game.high_score_index == -1 && game.selection != DEMO_SELECTED)
    d9f0:	20 91 bb 0d 	lds	r18, 0x0DBB
    d9f4:	30 91 bc 0d 	lds	r19, 0x0DBC
    d9f8:	22 16       	cp	r2, r18
    d9fa:	33 06       	cpc	r3, r19
    d9fc:	08 f0       	brcs	.+2      	; 0xda00 <load_high_scores+0x12a>
    d9fe:	5a c0       	rjmp	.+180    	; 0xdab4 <load_high_scores+0x1de>
    da00:	80 91 cb 0d 	lds	r24, 0x0DCB
    da04:	8f 3f       	cpi	r24, 0xFF	; 255
    da06:	09 f0       	breq	.+2      	; 0xda0a <load_high_scores+0x134>
    da08:	55 c0       	rjmp	.+170    	; 0xdab4 <load_high_scores+0x1de>
    da0a:	80 91 d2 0d 	lds	r24, 0x0DD2
    da0e:	82 30       	cpi	r24, 0x02	; 2
    da10:	09 f4       	brne	.+2      	; 0xda14 <load_high_scores+0x13e>
    da12:	50 c0       	rjmp	.+160    	; 0xdab4 <load_high_scores+0x1de>
    da14:	a4 eb       	ldi	r26, 0xB4	; 180
    da16:	bd e0       	ldi	r27, 0x0D	; 13
    da18:	cd 01       	movw	r24, r26
    da1a:	05 97       	sbiw	r24, 0x05	; 5
    da1c:	4e e1       	ldi	r20, 0x1E	; 30
    da1e:	48 0f       	add	r20, r24
    da20:	46 19       	sub	r20, r6
		{
			// Shift scores down
			for (u8 j = 25; j > i; j -= 5)
    da22:	04 17       	cp	r16, r20
    da24:	40 f4       	brcc	.+16     	; 0xda36 <load_high_scores+0x160>
			{
				memcpy(&(scores.data[j]), &(scores.data[j-5]), 5);
    da26:	fc 01       	movw	r30, r24
    da28:	45 2d       	mov	r20, r5
    da2a:	01 90       	ld	r0, Z+
    da2c:	0d 92       	st	X+, r0
    da2e:	4a 95       	dec	r20
    da30:	e1 f7       	brne	.-8      	; 0xda2a <load_high_scores+0x154>
    da32:	dc 01       	movw	r26, r24
    da34:	f1 cf       	rjmp	.-30     	; 0xda18 <load_high_scores+0x142>
			}
			scores.data[i] = 'A';
    da36:	f5 01       	movw	r30, r10
    da38:	10 83       	st	Z, r17
			scores.data[i+1] = 'A';
    da3a:	f6 01       	movw	r30, r12
    da3c:	10 83       	st	Z, r17
			scores.data[i+2] = 'A';
    da3e:	f7 01       	movw	r30, r14
    da40:	10 83       	st	Z, r17
			memcpy(&(scores.data[i+3]), &game.score, 2);
    da42:	32 83       	std	Z+2, r19	; 0x02
    da44:	21 83       	std	Z+1, r18	; 0x01
			LBPrintChar(11, ypos, scores.data[i]);
    da46:	f5 01       	movw	r30, r10
    da48:	40 81       	ld	r20, Z
    da4a:	6c 2f       	mov	r22, r28
    da4c:	8b e0       	ldi	r24, 0x0B	; 11
    da4e:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
			LBPrintChar(12, ypos, scores.data[i+1]);
    da52:	f6 01       	movw	r30, r12
    da54:	40 81       	ld	r20, Z
    da56:	6c 2f       	mov	r22, r28
    da58:	8c e0       	ldi	r24, 0x0C	; 12
    da5a:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
			LBPrintChar(13, ypos, scores.data[i+2]);
    da5e:	f7 01       	movw	r30, r14
    da60:	40 81       	ld	r20, Z
    da62:	6c 2f       	mov	r22, r28
    da64:	8d e0       	ldi	r24, 0x0D	; 13
    da66:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
			LBPrintInt(19, ypos, game.score, true);
    da6a:	40 91 bb 0d 	lds	r20, 0x0DBB
    da6e:	50 91 bc 0d 	lds	r21, 0x0DBC
    da72:	21 e0       	ldi	r18, 0x01	; 1
    da74:	6c 2f       	mov	r22, r28
    da76:	83 e1       	ldi	r24, 0x13	; 19
    da78:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
			game.high_score_index = i;
    da7c:	00 93 cb 0d 	sts	0x0DCB, r16
			LBMapSprite(2, map_down_arrow, 0);
    da80:	40 e0       	ldi	r20, 0x00	; 0
    da82:	6b e3       	ldi	r22, 0x3B	; 59
    da84:	78 e3       	ldi	r23, 0x38	; 56
    da86:	82 e0       	ldi	r24, 0x02	; 2
    da88:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
			LBMapSprite(3, map_up_arrow, 0);
    da8c:	40 e0       	ldi	r20, 0x00	; 0
    da8e:	68 e3       	ldi	r22, 0x38	; 56
    da90:	78 e3       	ldi	r23, 0x38	; 56
    da92:	83 e0       	ldi	r24, 0x03	; 3
    da94:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
			LBMoveSprite(2, 11*8, (ypos-1)*8, 1, 1);
    da98:	01 e0       	ldi	r16, 0x01	; 1
    da9a:	21 e0       	ldi	r18, 0x01	; 1
    da9c:	4d 2f       	mov	r20, r29
    da9e:	68 e5       	ldi	r22, 0x58	; 88
    daa0:	82 e0       	ldi	r24, 0x02	; 2
    daa2:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
			LBMoveSprite(3, 11*8, (ypos+1)*8, 1, 1);
    daa6:	21 e0       	ldi	r18, 0x01	; 1
    daa8:	40 e1       	ldi	r20, 0x10	; 16
    daaa:	4d 0f       	add	r20, r29
    daac:	68 e5       	ldi	r22, 0x58	; 88
    daae:	83 e0       	ldi	r24, 0x03	; 3
    dab0:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
		}
		
		ypos += 2;
    dab4:	ce 5f       	subi	r28, 0xFE	; 254
    dab6:	f5 e0       	ldi	r31, 0x05	; 5
    dab8:	af 0e       	add	r10, r31
    daba:	b1 1c       	adc	r11, r1
    dabc:	85 e0       	ldi	r24, 0x05	; 5
    dabe:	c8 0e       	add	r12, r24
    dac0:	d1 1c       	adc	r13, r1
    dac2:	e5 e0       	ldi	r30, 0x05	; 5
    dac4:	ee 0e       	add	r14, r30
    dac6:	f1 1c       	adc	r15, r1
    dac8:	d0 5f       	subi	r29, 0xF0	; 240
	LBMapSprite(0, map_emerald_0, 0);
	LBMapSprite(1, map_emerald_1, 0);
	LBMoveSprite(0, 7*8, 3*8, 1, 1);
	LBMoveSprite(1, 21*8, 3*8, 1, 1);
	
	for (u8 i = 0; i < 30; i += 5)
    daca:	c3 31       	cpi	r28, 0x13	; 19
    dacc:	09 f0       	breq	.+2      	; 0xdad0 <load_high_scores+0x1fa>
    dace:	5e cf       	rjmp	.-324    	; 0xd98c <load_high_scores+0xb6>
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    dad0:	47 e9       	ldi	r20, 0x97	; 151
    dad2:	5b e0       	ldi	r21, 0x0B	; 11
    dad4:	66 e1       	ldi	r22, 0x16	; 22
    dad6:	89 e0       	ldi	r24, 0x09	; 9
}
    dad8:	df 91       	pop	r29
    dada:	cf 91       	pop	r28
    dadc:	1f 91       	pop	r17
    dade:	0f 91       	pop	r16
    dae0:	ff 90       	pop	r15
    dae2:	ef 90       	pop	r14
    dae4:	df 90       	pop	r13
    dae6:	cf 90       	pop	r12
    dae8:	bf 90       	pop	r11
    daea:	af 90       	pop	r10
    daec:	9f 90       	pop	r9
    daee:	8f 90       	pop	r8
    daf0:	7f 90       	pop	r7
    daf2:	6f 90       	pop	r6
    daf4:	5f 90       	pop	r5
    daf6:	3f 90       	pop	r3
    daf8:	2f 90       	pop	r2
		}
		
		ypos += 2;
	}
	
	LBPrint(9, 22, (char*) strMainMenu);
    dafa:	0c 94 1e 52 	jmp	0xa43c	; 0xa43c <LBPrint>

0000dafe <exit_game>:
	}
}

void exit_game()
{
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    dafe:	64 e1       	ldi	r22, 0x14	; 20
    db00:	80 e0       	ldi	r24, 0x00	; 0
    db02:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    db06:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	init_player_state();
    db0a:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <init_player_state>
	init_boss_state();
    db0e:	0e 94 de 57 	call	0xafbc	; 0xafbc <init_boss_state>
	init_enemy_state();
    db12:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <init_enemy_state>
	StopSong();
    db16:	0e 94 e6 44 	call	0x89cc	; 0x89cc <StopSong>
	load_high_scores();
    db1a:	0c 94 6b 6c 	jmp	0xd8d6	; 0xd8d6 <load_high_scores>

0000db1e <update_splash>:
	DrawMap2(6, 5, map_splash);
	LBMapSprite(0, map_right_arrow, 0);
}

void update_splash()
{
    db1e:	0f 93       	push	r16
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	if (game.player.controls.pressed) demo_counter = 0;
    db20:	80 91 4d 0e 	lds	r24, 0x0E4D
    db24:	90 91 4e 0e 	lds	r25, 0x0E4E
    db28:	00 97       	sbiw	r24, 0x00	; 0
    db2a:	21 f0       	breq	.+8      	; 0xdb34 <update_splash+0x16>
    db2c:	10 92 f8 0c 	sts	0x0CF8, r1
    db30:	10 92 f7 0c 	sts	0x0CF7, r1
	
	if (game.player.controls.pressed & BTN_DOWN && game.selection == START_SELECTED)
    db34:	85 ff       	sbrs	r24, 5
    db36:	08 c0       	rjmp	.+16     	; 0xdb48 <update_splash+0x2a>
    db38:	20 91 d2 0d 	lds	r18, 0x0DD2
    db3c:	21 11       	cpse	r18, r1
    db3e:	04 c0       	rjmp	.+8      	; 0xdb48 <update_splash+0x2a>
	{
		game.selection = HIGH_SCORES_SELECTED;
    db40:	81 e0       	ldi	r24, 0x01	; 1
    db42:	80 93 d2 0d 	sts	0x0DD2, r24
    db46:	08 c0       	rjmp	.+16     	; 0xdb58 <update_splash+0x3a>
		SFX_NAVIGATE;
	}
	else if (game.player.controls.pressed & BTN_UP && game.selection == HIGH_SCORES_SELECTED)
    db48:	84 ff       	sbrs	r24, 4
    db4a:	0c c0       	rjmp	.+24     	; 0xdb64 <update_splash+0x46>
    db4c:	80 91 d2 0d 	lds	r24, 0x0DD2
    db50:	81 30       	cpi	r24, 0x01	; 1
    db52:	41 f4       	brne	.+16     	; 0xdb64 <update_splash+0x46>
	{
		game.selection = START_SELECTED;
    db54:	10 92 d2 0d 	sts	0x0DD2, r1
		SFX_NAVIGATE;
    db58:	41 e0       	ldi	r20, 0x01	; 1
    db5a:	6f ef       	ldi	r22, 0xFF	; 255
    db5c:	82 e0       	ldi	r24, 0x02	; 2
    db5e:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
    db62:	40 c0       	rjmp	.+128    	; 0xdbe4 <update_splash+0xc6>
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
    db64:	8d e4       	ldi	r24, 0x4D	; 77
    db66:	9e e0       	ldi	r25, 0x0E	; 14
    db68:	0e 94 bb 6a 	call	0xd576	; 0xd576 <select_pressed>
    db6c:	88 23       	and	r24, r24
    db6e:	b1 f0       	breq	.+44     	; 0xdb9c <update_splash+0x7e>
    db70:	80 91 d2 0d 	lds	r24, 0x0DD2
    db74:	81 11       	cpse	r24, r1
    db76:	08 c0       	rjmp	.+16     	; 0xdb88 <update_splash+0x6a>
	{
		SFX_NAVIGATE;
    db78:	41 e0       	ldi	r20, 0x01	; 1
    db7a:	6f ef       	ldi	r22, 0xFF	; 255
    db7c:	82 e0       	ldi	r24, 0x02	; 2
    db7e:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    db82:	0f 91       	pop	r16
		SFX_NAVIGATE;
	}
	else if (select_pressed(&game.player.controls) && game.selection == START_SELECTED)
	{
		SFX_NAVIGATE;
		intro();
    db84:	0c 94 f9 6b 	jmp	0xd7f2	; 0xd7f2 <intro>
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
    db88:	81 30       	cpi	r24, 0x01	; 1
    db8a:	41 f4       	brne	.+16     	; 0xdb9c <update_splash+0x7e>
	{
		SFX_NAVIGATE;
    db8c:	41 e0       	ldi	r20, 0x01	; 1
    db8e:	6f ef       	ldi	r22, 0xFF	; 255
    db90:	82 e0       	ldi	r24, 0x02	; 2
    db92:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
	}
}
    db96:	0f 91       	pop	r16
		return;
	}
	else if (select_pressed(&game.player.controls) && game.selection == HIGH_SCORES_SELECTED)
	{
		SFX_NAVIGATE;
		load_high_scores();
    db98:	0c 94 6b 6c 	jmp	0xd8d6	; 0xd8d6 <load_high_scores>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    db9c:	80 91 f7 0c 	lds	r24, 0x0CF7
    dba0:	90 91 f8 0c 	lds	r25, 0x0CF8
    dba4:	88 35       	cpi	r24, 0x58	; 88
    dba6:	92 40       	sbci	r25, 0x02	; 2
    dba8:	e8 f0       	brcs	.+58     	; 0xdbe4 <update_splash+0xc6>
	{
		demo_counter = 0;
    dbaa:	10 92 f8 0c 	sts	0x0CF8, r1
    dbae:	10 92 f7 0c 	sts	0x0CF7, r1
		game.selection = DEMO_SELECTED;
    dbb2:	82 e0       	ldi	r24, 0x02	; 2
    dbb4:	80 93 d2 0d 	sts	0x0DD2, r24
		demo_load(demo_choice++);
    dbb8:	80 91 f6 0c 	lds	r24, 0x0CF6
    dbbc:	91 e0       	ldi	r25, 0x01	; 1
    dbbe:	98 0f       	add	r25, r24
    dbc0:	90 93 f6 0c 	sts	0x0CF6, r25
    dbc4:	0e 94 17 6c 	call	0xd82e	; 0xd82e <demo_load>
		if (demo_choice == 2) demo_choice = 3;
    dbc8:	80 91 f6 0c 	lds	r24, 0x0CF6
    dbcc:	82 30       	cpi	r24, 0x02	; 2
    dbce:	19 f4       	brne	.+6      	; 0xdbd6 <update_splash+0xb8>
    dbd0:	83 e0       	ldi	r24, 0x03	; 3
    dbd2:	80 93 f6 0c 	sts	0x0CF6, r24
		if (demo_choice == 5) demo_choice = 0;
    dbd6:	80 91 f6 0c 	lds	r24, 0x0CF6
    dbda:	85 30       	cpi	r24, 0x05	; 5
    dbdc:	d1 f4       	brne	.+52     	; 0xdc12 <update_splash+0xf4>
    dbde:	10 92 f6 0c 	sts	0x0CF6, r1
    dbe2:	17 c0       	rjmp	.+46     	; 0xdc12 <update_splash+0xf4>
		return;
		
	}
	demo_counter++;
    dbe4:	80 91 f7 0c 	lds	r24, 0x0CF7
    dbe8:	90 91 f8 0c 	lds	r25, 0x0CF8
    dbec:	01 96       	adiw	r24, 0x01	; 1
    dbee:	90 93 f8 0c 	sts	0x0CF8, r25
    dbf2:	80 93 f7 0c 	sts	0x0CF7, r24
	
	if (game.selection == START_SELECTED)
    dbf6:	80 91 d2 0d 	lds	r24, 0x0DD2
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    dbfa:	01 e0       	ldi	r16, 0x01	; 1
    dbfc:	21 e0       	ldi	r18, 0x01	; 1
		return;
		
	}
	demo_counter++;
	
	if (game.selection == START_SELECTED)
    dbfe:	81 11       	cpse	r24, r1
    dc00:	03 c0       	rjmp	.+6      	; 0xdc08 <update_splash+0xea>
	{
		LBMoveSprite(0, 7*8, 15*8, 1, 1);
    dc02:	48 e7       	ldi	r20, 0x78	; 120
    dc04:	68 e3       	ldi	r22, 0x38	; 56
    dc06:	03 c0       	rjmp	.+6      	; 0xdc0e <update_splash+0xf0>
	}
	else
	{
		LBMoveSprite(0, 7*8, 16*8, 1, 1);
    dc08:	40 e8       	ldi	r20, 0x80	; 128
    dc0a:	68 e3       	ldi	r22, 0x38	; 56
    dc0c:	80 e0       	ldi	r24, 0x00	; 0
    dc0e:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
	}
}
    dc12:	0f 91       	pop	r16
    dc14:	08 95       	ret

0000dc16 <update_high_scores>:
	
	LBPrint(9, 22, (char*) strMainMenu);
}

void update_high_scores()
{
    dc16:	0f 93       	push	r16
	static u16 high_score_counter = 0;
	
	if (game.player.controls.pressed & BTN_X)
    dc18:	80 91 4d 0e 	lds	r24, 0x0E4D
    dc1c:	90 91 4e 0e 	lds	r25, 0x0E4E
    dc20:	91 ff       	sbrs	r25, 1
    dc22:	16 c0       	rjmp	.+44     	; 0xdc50 <update_high_scores+0x3a>
	{
		high_score_counter = 0;
    dc24:	10 92 f5 0c 	sts	0x0CF5, r1
    dc28:	10 92 f4 0c 	sts	0x0CF4, r1
		SFX_NAVIGATE;
    dc2c:	41 e0       	ldi	r20, 0x01	; 1
    dc2e:	6f ef       	ldi	r22, 0xFF	; 255
    dc30:	82 e0       	ldi	r24, 0x02	; 2
    dc32:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		game.high_score_index = -1;
    dc36:	8f ef       	ldi	r24, 0xFF	; 255
    dc38:	80 93 cb 0d 	sts	0x0DCB, r24
		game.score = 0;
    dc3c:	10 92 bc 0d 	sts	0x0DBC, r1
    dc40:	10 92 bb 0d 	sts	0x0DBB, r1
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dc44:	89 e9       	ldi	r24, 0x99	; 153
    dc46:	9d e0       	ldi	r25, 0x0D	; 13
    dc48:	0e 94 44 43 	call	0x8688	; 0x8688 <EepromWriteBlock>
		high_score_counter = 0;
		SFX_NAVIGATE;
		game.high_score_index = -1;
		game.score = 0;
		save_eeprom(&scores);
		load_splash();
    dc4c:	0e 94 3a 6c 	call	0xd874	; 0xd874 <load_splash>
	}
	if ((game.player.controls.held & BTN_SL) && (game.player.controls.held_cycles == 255) && (game.high_score_index == -1))
    dc50:	80 91 51 0e 	lds	r24, 0x0E51
    dc54:	90 91 52 0e 	lds	r25, 0x0E52
    dc58:	92 ff       	sbrs	r25, 2
    dc5a:	19 c0       	rjmp	.+50     	; 0xdc8e <update_high_scores+0x78>
    dc5c:	80 91 53 0e 	lds	r24, 0x0E53
    dc60:	8f 3f       	cpi	r24, 0xFF	; 255
    dc62:	a9 f4       	brne	.+42     	; 0xdc8e <update_high_scores+0x78>
    dc64:	80 91 cb 0d 	lds	r24, 0x0DCB
    dc68:	8f 3f       	cpi	r24, 0xFF	; 255
    dc6a:	89 f4       	brne	.+34     	; 0xdc8e <update_high_scores+0x78>
	{
		high_score_counter = 0;
    dc6c:	10 92 f5 0c 	sts	0x0CF5, r1
    dc70:	10 92 f4 0c 	sts	0x0CF4, r1
	    SFX_NAVIGATE;
    dc74:	41 e0       	ldi	r20, 0x01	; 1
    dc76:	6f ef       	ldi	r22, 0xFF	; 255
    dc78:	82 e0       	ldi	r24, 0x02	; 2
    dc7a:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		init_default_high_scores();
    dc7e:	0e 94 bb 53 	call	0xa776	; 0xa776 <init_default_high_scores>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    dc82:	89 e9       	ldi	r24, 0x99	; 153
    dc84:	9d e0       	ldi	r25, 0x0D	; 13
    dc86:	0e 94 44 43 	call	0x8688	; 0x8688 <EepromWriteBlock>
	{
		high_score_counter = 0;
	    SFX_NAVIGATE;
		init_default_high_scores();
	    save_eeprom(&scores);
		load_high_scores();
    dc8a:	0e 94 6b 6c 	call	0xd8d6	; 0xd8d6 <load_high_scores>
	}
	
	if (game.high_score_index != -1)
    dc8e:	30 91 cb 0d 	lds	r19, 0x0DCB
    dc92:	3f 3f       	cpi	r19, 0xFF	; 255
    dc94:	09 f4       	brne	.+2      	; 0xdc98 <update_high_scores+0x82>
    dc96:	81 c0       	rjmp	.+258    	; 0xdd9a <update_high_scores+0x184>
	{
		high_score_counter = 0;
    dc98:	10 92 f5 0c 	sts	0x0CF5, r1
    dc9c:	10 92 f4 0c 	sts	0x0CF4, r1
		if (game.player.controls.pressed & BTN_RIGHT && game.high_score_index % 5 != 2)
    dca0:	20 91 4d 0e 	lds	r18, 0x0E4D
    dca4:	27 ff       	sbrs	r18, 7
    dca6:	1e c0       	rjmp	.+60     	; 0xdce4 <update_high_scores+0xce>
    dca8:	83 2f       	mov	r24, r19
    dcaa:	65 e0       	ldi	r22, 0x05	; 5
    dcac:	0e 94 d4 75 	call	0xeba8	; 0xeba8 <__divmodqi4>
    dcb0:	92 30       	cpi	r25, 0x02	; 2
    dcb2:	c1 f0       	breq	.+48     	; 0xdce4 <update_high_scores+0xce>
		{
			SFX_NAVIGATE;
    dcb4:	41 e0       	ldi	r20, 0x01	; 1
    dcb6:	6f ef       	ldi	r22, 0xFF	; 255
    dcb8:	82 e0       	ldi	r24, 0x02	; 2
    dcba:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
			game.high_score_index++;
    dcbe:	80 91 cb 0d 	lds	r24, 0x0DCB
    dcc2:	8f 5f       	subi	r24, 0xFF	; 255
    dcc4:	80 93 cb 0d 	sts	0x0DCB, r24
			LBMoveSprite(2, extendedSprites[2].x+8, extendedSprites[2].y, 1, 1);
    dcc8:	60 91 ec 0f 	lds	r22, 0x0FEC
    dccc:	68 5f       	subi	r22, 0xF8	; 248
    dcce:	01 e0       	ldi	r16, 0x01	; 1
    dcd0:	21 e0       	ldi	r18, 0x01	; 1
    dcd2:	40 91 ed 0f 	lds	r20, 0x0FED
    dcd6:	82 e0       	ldi	r24, 0x02	; 2
    dcd8:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x+8, extendedSprites[3].y, 1, 1);
    dcdc:	60 91 f0 0f 	lds	r22, 0x0FF0
    dce0:	68 5f       	subi	r22, 0xF8	; 248
    dce2:	1f c0       	rjmp	.+62     	; 0xdd22 <update_high_scores+0x10c>
		}
		else if (game.player.controls.pressed & BTN_LEFT && game.high_score_index % 5 != 0)
    dce4:	26 ff       	sbrs	r18, 6
    dce6:	24 c0       	rjmp	.+72     	; 0xdd30 <update_high_scores+0x11a>
    dce8:	83 2f       	mov	r24, r19
    dcea:	65 e0       	ldi	r22, 0x05	; 5
    dcec:	0e 94 d4 75 	call	0xeba8	; 0xeba8 <__divmodqi4>
    dcf0:	99 23       	and	r25, r25
    dcf2:	f1 f0       	breq	.+60     	; 0xdd30 <update_high_scores+0x11a>
		{
			SFX_NAVIGATE;
    dcf4:	41 e0       	ldi	r20, 0x01	; 1
    dcf6:	6f ef       	ldi	r22, 0xFF	; 255
    dcf8:	82 e0       	ldi	r24, 0x02	; 2
    dcfa:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
			game.high_score_index--;
    dcfe:	80 91 cb 0d 	lds	r24, 0x0DCB
    dd02:	81 50       	subi	r24, 0x01	; 1
    dd04:	80 93 cb 0d 	sts	0x0DCB, r24
			LBMoveSprite(2, extendedSprites[2].x-8, extendedSprites[2].y, 1, 1);
    dd08:	60 91 ec 0f 	lds	r22, 0x0FEC
    dd0c:	68 50       	subi	r22, 0x08	; 8
    dd0e:	01 e0       	ldi	r16, 0x01	; 1
    dd10:	21 e0       	ldi	r18, 0x01	; 1
    dd12:	40 91 ed 0f 	lds	r20, 0x0FED
    dd16:	82 e0       	ldi	r24, 0x02	; 2
    dd18:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
			LBMoveSprite(3, extendedSprites[3].x-8, extendedSprites[3].y, 1, 1);
    dd1c:	60 91 f0 0f 	lds	r22, 0x0FF0
    dd20:	68 50       	subi	r22, 0x08	; 8
    dd22:	21 e0       	ldi	r18, 0x01	; 1
    dd24:	40 91 f1 0f 	lds	r20, 0x0FF1
    dd28:	83 e0       	ldi	r24, 0x03	; 3
    dd2a:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
    dd2e:	35 c0       	rjmp	.+106    	; 0xdd9a <update_high_scores+0x184>
		}
		else if (game.player.controls.pressed & BTN_UP)
    dd30:	24 ff       	sbrs	r18, 4
    dd32:	13 c0       	rjmp	.+38     	; 0xdd5a <update_high_scores+0x144>
		{
			SFX_NAVIGATE;
    dd34:	41 e0       	ldi	r20, 0x01	; 1
    dd36:	6f ef       	ldi	r22, 0xFF	; 255
    dd38:	82 e0       	ldi	r24, 0x02	; 2
    dd3a:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]-1;
    dd3e:	80 91 cb 0d 	lds	r24, 0x0DCB
    dd42:	e8 2f       	mov	r30, r24
    dd44:	ff 27       	eor	r31, r31
    dd46:	e7 fd       	sbrc	r30, 7
    dd48:	f0 95       	com	r31
    dd4a:	e7 56       	subi	r30, 0x67	; 103
    dd4c:	f2 4f       	sbci	r31, 0xF2	; 242
    dd4e:	92 81       	ldd	r25, Z+2	; 0x02
    dd50:	91 50       	subi	r25, 0x01	; 1
			if (scores.data[game.high_score_index] < 'A') scores.data[game.high_score_index] = 'A';
    dd52:	91 34       	cpi	r25, 0x41	; 65
    dd54:	b0 f4       	brcc	.+44     	; 0xdd82 <update_high_scores+0x16c>
    dd56:	91 e4       	ldi	r25, 0x41	; 65
    dd58:	14 c0       	rjmp	.+40     	; 0xdd82 <update_high_scores+0x16c>
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
		}
		else if (game.player.controls.pressed & BTN_DOWN)
    dd5a:	25 ff       	sbrs	r18, 5
    dd5c:	1e c0       	rjmp	.+60     	; 0xdd9a <update_high_scores+0x184>
		{
			SFX_NAVIGATE;
    dd5e:	41 e0       	ldi	r20, 0x01	; 1
    dd60:	6f ef       	ldi	r22, 0xFF	; 255
    dd62:	82 e0       	ldi	r24, 0x02	; 2
    dd64:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
			scores.data[game.high_score_index] = scores.data[game.high_score_index]+1;
    dd68:	80 91 cb 0d 	lds	r24, 0x0DCB
    dd6c:	e8 2f       	mov	r30, r24
    dd6e:	ff 27       	eor	r31, r31
    dd70:	e7 fd       	sbrc	r30, 7
    dd72:	f0 95       	com	r31
    dd74:	e7 56       	subi	r30, 0x67	; 103
    dd76:	f2 4f       	sbci	r31, 0xF2	; 242
    dd78:	92 81       	ldd	r25, Z+2	; 0x02
    dd7a:	9f 5f       	subi	r25, 0xFF	; 255
			if (scores.data[game.high_score_index] > 'Z') scores.data[game.high_score_index] = 'Z';
    dd7c:	9b 35       	cpi	r25, 0x5B	; 91
    dd7e:	08 f0       	brcs	.+2      	; 0xdd82 <update_high_scores+0x16c>
    dd80:	9a e5       	ldi	r25, 0x5A	; 90
    dd82:	92 83       	std	Z+2, r25	; 0x02
			LBPrintChar(11+(game.high_score_index % 5), 7+(game.high_score_index/5)*2, scores.data[game.high_score_index]);
    dd84:	65 e0       	ldi	r22, 0x05	; 5
    dd86:	0e 94 d4 75 	call	0xeba8	; 0xeba8 <__divmodqi4>
    dd8a:	68 2f       	mov	r22, r24
    dd8c:	66 0f       	add	r22, r22
    dd8e:	69 5f       	subi	r22, 0xF9	; 249
    dd90:	42 81       	ldd	r20, Z+2	; 0x02
    dd92:	8b e0       	ldi	r24, 0x0B	; 11
    dd94:	89 0f       	add	r24, r25
    dd96:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <LBPrintChar>
		}
	}
	if (high_score_counter > HIGH_SCORES_LENGTH)
    dd9a:	80 91 f4 0c 	lds	r24, 0x0CF4
    dd9e:	90 91 f5 0c 	lds	r25, 0x0CF5
    dda2:	85 38       	cpi	r24, 0x85	; 133
    dda4:	93 40       	sbci	r25, 0x03	; 3
    dda6:	90 f0       	brcs	.+36     	; 0xddcc <update_high_scores+0x1b6>
	{
		high_score_counter = 0;
    dda8:	10 92 f5 0c 	sts	0x0CF5, r1
    ddac:	10 92 f4 0c 	sts	0x0CF4, r1
		SFX_NAVIGATE;
    ddb0:	41 e0       	ldi	r20, 0x01	; 1
    ddb2:	6f ef       	ldi	r22, 0xFF	; 255
    ddb4:	82 e0       	ldi	r24, 0x02	; 2
    ddb6:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		game.high_score_index = -1;
    ddba:	8f ef       	ldi	r24, 0xFF	; 255
    ddbc:	80 93 cb 0d 	sts	0x0DCB, r24
		game.score = 0;
    ddc0:	10 92 bc 0d 	sts	0x0DBC, r1
    ddc4:	10 92 bb 0d 	sts	0x0DBB, r1
		load_splash();
    ddc8:	0e 94 3a 6c 	call	0xd874	; 0xd874 <load_splash>
	}
	high_score_counter++;
    ddcc:	80 91 f4 0c 	lds	r24, 0x0CF4
    ddd0:	90 91 f5 0c 	lds	r25, 0x0CF5
    ddd4:	01 96       	adiw	r24, 0x01	; 1
    ddd6:	90 93 f5 0c 	sts	0x0CF5, r25
    ddda:	80 93 f4 0c 	sts	0x0CF4, r24
}
    ddde:	0f 91       	pop	r16
    dde0:	08 95       	ret

0000dde2 <tally_score>:
		}
	}
}

void tally_score(char* title, u16 bonus)
{
    dde2:	2f 92       	push	r2
    dde4:	3f 92       	push	r3
    dde6:	4f 92       	push	r4
    dde8:	5f 92       	push	r5
    ddea:	6f 92       	push	r6
    ddec:	7f 92       	push	r7
    ddee:	8f 92       	push	r8
    ddf0:	9f 92       	push	r9
    ddf2:	af 92       	push	r10
    ddf4:	bf 92       	push	r11
    ddf6:	cf 92       	push	r12
    ddf8:	df 92       	push	r13
    ddfa:	ef 92       	push	r14
    ddfc:	ff 92       	push	r15
    ddfe:	0f 93       	push	r16
    de00:	1f 93       	push	r17
    de02:	cf 93       	push	r28
    de04:	df 93       	push	r29
    de06:	7c 01       	movw	r14, r24
    de08:	6b 01       	movw	r12, r22
	u8 x = Screen.scrollX / 8;
    de0a:	c0 91 b2 0c 	lds	r28, 0x0CB2
    de0e:	c6 95       	lsr	r28
    de10:	c6 95       	lsr	r28
    de12:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
    de14:	00 91 b3 0c 	lds	r16, 0x0CB3
    de18:	06 95       	lsr	r16
    de1a:	06 95       	lsr	r16
    de1c:	06 95       	lsr	r16
	u16 tally = game.score;
    de1e:	a0 90 bb 0d 	lds	r10, 0x0DBB
    de22:	b0 90 bc 0d 	lds	r11, 0x0DBC
	u16 counter = 0;
	
	hide_sprites(0, MAX_EXTENDED_SPRITES);
    de26:	64 e1       	ldi	r22, 0x14	; 20
    de28:	80 e0       	ldi	r24, 0x00	; 0
    de2a:	0e 94 9f 6a 	call	0xd53e	; 0xd53e <hide_sprites>
	LBRotateSprites();
    de2e:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	
	StopSong();
    de32:	0e 94 e6 44 	call	0x89cc	; 0x89cc <StopSong>
	DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    de36:	10 e0       	ldi	r17, 0x00	; 0
    de38:	d0 e0       	ldi	r29, 0x00	; 0
    de3a:	c8 01       	movw	r24, r16
    de3c:	06 96       	adiw	r24, 0x06	; 6
    de3e:	2e e1       	ldi	r18, 0x1E	; 30
    de40:	82 2e       	mov	r8, r18
    de42:	91 2c       	mov	r9, r1
    de44:	b4 01       	movw	r22, r8
    de46:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    de4a:	9e 01       	movw	r18, r28
    de4c:	28 5f       	subi	r18, 0xF8	; 248
    de4e:	3f 4f       	sbci	r19, 0xFF	; 255
    de50:	47 ec       	ldi	r20, 0xC7	; 199
    de52:	50 e6       	ldi	r21, 0x60	; 96
    de54:	68 2f       	mov	r22, r24
    de56:	82 2f       	mov	r24, r18
    de58:	8f 71       	andi	r24, 0x1F	; 31
    de5a:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
	LBPrint((x+10)%32, (y+7)%30, title);
    de5e:	c8 01       	movw	r24, r16
    de60:	07 96       	adiw	r24, 0x07	; 7
    de62:	b4 01       	movw	r22, r8
    de64:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    de68:	9e 01       	movw	r18, r28
    de6a:	26 5f       	subi	r18, 0xF6	; 246
    de6c:	3f 4f       	sbci	r19, 0xFF	; 255
    de6e:	a7 01       	movw	r20, r14
    de70:	68 2f       	mov	r22, r24
    de72:	82 2f       	mov	r24, r18
    de74:	8f 71       	andi	r24, 0x1F	; 31
    de76:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint((x+9)%32, (y+9)%30, (char*) strTally);
    de7a:	c8 01       	movw	r24, r16
    de7c:	09 96       	adiw	r24, 0x09	; 9
    de7e:	b4 01       	movw	r22, r8
    de80:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    de84:	48 2e       	mov	r4, r24
    de86:	78 2e       	mov	r7, r24
    de88:	7e 01       	movw	r14, r28
    de8a:	29 e0       	ldi	r18, 0x09	; 9
    de8c:	e2 0e       	add	r14, r18
    de8e:	f1 1c       	adc	r15, r1
    de90:	8f e1       	ldi	r24, 0x1F	; 31
    de92:	e8 22       	and	r14, r24
    de94:	ff 24       	eor	r15, r15
    de96:	42 e6       	ldi	r20, 0x62	; 98
    de98:	5b e0       	ldi	r21, 0x0B	; 11
    de9a:	64 2d       	mov	r22, r4
    de9c:	8e 2d       	mov	r24, r14
    de9e:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint((x+9)%32, (y+11)%30, (char*) strScore);
    dea2:	c8 01       	movw	r24, r16
    dea4:	0b 96       	adiw	r24, 0x0b	; 11
    dea6:	b4 01       	movw	r22, r8
    dea8:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    deac:	38 2e       	mov	r3, r24
    deae:	68 2e       	mov	r6, r24
    deb0:	48 eb       	ldi	r20, 0xB8	; 184
    deb2:	5b e0       	ldi	r21, 0x0B	; 11
    deb4:	68 2f       	mov	r22, r24
    deb6:	8e 2d       	mov	r24, r14
    deb8:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint((x+9)%32, (y+12)%30, (char*) strTime);
    debc:	c8 01       	movw	r24, r16
    debe:	0c 96       	adiw	r24, 0x0c	; 12
    dec0:	b4 01       	movw	r22, r8
    dec2:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    dec6:	58 2e       	mov	r5, r24
    dec8:	f8 2e       	mov	r15, r24
    deca:	43 ea       	ldi	r20, 0xA3	; 163
    decc:	5b e0       	ldi	r21, 0x0B	; 11
    dece:	68 2f       	mov	r22, r24
    ded0:	8e 2d       	mov	r24, r14
    ded2:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	LBPrint((x+9)%32, (y+13)%30, (char*) strLevelBonus);
    ded6:	c8 01       	movw	r24, r16
    ded8:	0d 96       	adiw	r24, 0x0d	; 13
    deda:	b4 01       	movw	r22, r8
    dedc:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    dee0:	18 2f       	mov	r17, r24
    dee2:	28 2e       	mov	r2, r24
    dee4:	43 e7       	ldi	r20, 0x73	; 115
    dee6:	5b e0       	ldi	r21, 0x0B	; 11
    dee8:	68 2f       	mov	r22, r24
    deea:	8e 2d       	mov	r24, r14
    deec:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
	
	LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    def0:	64 96       	adiw	r28, 0x14	; 20
    def2:	cf 71       	andi	r28, 0x1F	; 31
    def4:	dd 27       	eor	r29, r29
    def6:	ec 2e       	mov	r14, r28
    def8:	21 e0       	ldi	r18, 0x01	; 1
    defa:	a5 01       	movw	r20, r10
    defc:	64 2d       	mov	r22, r4
    defe:	8c 2f       	mov	r24, r28
    df00:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+11)%30, game.level_score, true);
    df04:	40 91 bd 0d 	lds	r20, 0x0DBD
    df08:	50 91 be 0d 	lds	r21, 0x0DBE
    df0c:	21 e0       	ldi	r18, 0x01	; 1
    df0e:	63 2d       	mov	r22, r3
    df10:	8c 2f       	mov	r24, r28
    df12:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+12)%30, game.time, true);
    df16:	40 91 bf 0d 	lds	r20, 0x0DBF
    df1a:	50 91 c0 0d 	lds	r21, 0x0DC0
    df1e:	21 e0       	ldi	r18, 0x01	; 1
    df20:	65 2d       	mov	r22, r5
    df22:	8c 2f       	mov	r24, r28
    df24:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintInt((x+20)%32, (y+13)%30, bonus, true);
    df28:	21 e0       	ldi	r18, 0x01	; 1
    df2a:	a6 01       	movw	r20, r12
    df2c:	61 2f       	mov	r22, r17
    df2e:	8c 2f       	mov	r24, r28
    df30:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	
	LBWaitSeconds(2);
    df34:	82 e0       	ldi	r24, 0x02	; 2
    df36:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <LBWaitSeconds>
	
	// Tally Score
	counter = game.level_score;
    df3a:	80 90 bd 0d 	lds	r8, 0x0DBD
    df3e:	90 90 be 0d 	lds	r9, 0x0DBE
    df42:	e4 01       	movw	r28, r8

void tally_score(char* title, u16 bonus)
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 tally = game.score;
    df44:	85 01       	movw	r16, r10
	
	LBWaitSeconds(2);
	
	// Tally Score
	counter = game.level_score;
	while (counter > 0)
    df46:	20 97       	sbiw	r28, 0x00	; 0
    df48:	e9 f0       	breq	.+58     	; 0xdf84 <tally_score+0x1a2>
	{
		WaitVsync(1);
    df4a:	81 e0       	ldi	r24, 0x01	; 1
    df4c:	90 e0       	ldi	r25, 0x00	; 0
    df4e:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
		SFX_HIT;
    df52:	41 e0       	ldi	r20, 0x01	; 1
    df54:	6f ef       	ldi	r22, 0xFF	; 255
    df56:	84 e0       	ldi	r24, 0x04	; 4
    df58:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		tally += 1;
    df5c:	0f 5f       	subi	r16, 0xFF	; 255
    df5e:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    df60:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    df62:	21 e0       	ldi	r18, 0x01	; 1
    df64:	a8 01       	movw	r20, r16
    df66:	67 2d       	mov	r22, r7
    df68:	8e 2d       	mov	r24, r14
    df6a:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+11)%30, counter, true);
    df6e:	21 e0       	ldi	r18, 0x01	; 1
    df70:	ae 01       	movw	r20, r28
    df72:	66 2d       	mov	r22, r6
    df74:	8e 2d       	mov	r24, r14
    df76:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    df7a:	8c ed       	ldi	r24, 0xDC	; 220
    df7c:	95 e0       	ldi	r25, 0x05	; 5
    df7e:	0e 94 ff 41 	call	0x83fe	; 0x83fe <WaitUs>
    df82:	e1 cf       	rjmp	.-62     	; 0xdf46 <tally_score+0x164>
    df84:	a8 0c       	add	r10, r8
    df86:	b9 1c       	adc	r11, r9
	}
	
	// Tally Time
	counter = game.time;
    df88:	c0 91 bf 0d 	lds	r28, 0x0DBF
    df8c:	d0 91 c0 0d 	lds	r29, 0x0DC0
	while (counter > 0)
    df90:	20 97       	sbiw	r28, 0x00	; 0
    df92:	31 f1       	breq	.+76     	; 0xdfe0 <tally_score+0x1fe>
	{
		WaitVsync(1);
    df94:	81 e0       	ldi	r24, 0x01	; 1
    df96:	90 e0       	ldi	r25, 0x00	; 0
    df98:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
		SFX_HIT;
    df9c:	41 e0       	ldi	r20, 0x01	; 1
    df9e:	6f ef       	ldi	r22, 0xFF	; 255
    dfa0:	84 e0       	ldi	r24, 0x04	; 4
    dfa2:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		tally -= 1;
		if (tally == 0 || tally == 65535) tally = 0;
    dfa6:	c5 01       	movw	r24, r10
    dfa8:	02 97       	sbiw	r24, 0x02	; 2
    dfaa:	8e 3f       	cpi	r24, 0xFE	; 254
    dfac:	9f 4f       	sbci	r25, 0xFF	; 255
    dfae:	20 f4       	brcc	.+8      	; 0xdfb8 <tally_score+0x1d6>
	counter = game.time;
	while (counter > 0)
	{
		WaitVsync(1);
		SFX_HIT;
		tally -= 1;
    dfb0:	81 e0       	ldi	r24, 0x01	; 1
    dfb2:	a8 1a       	sub	r10, r24
    dfb4:	b1 08       	sbc	r11, r1
    dfb6:	02 c0       	rjmp	.+4      	; 0xdfbc <tally_score+0x1da>
		if (tally == 0 || tally == 65535) tally = 0;
    dfb8:	a1 2c       	mov	r10, r1
    dfba:	b1 2c       	mov	r11, r1
		counter -= 1;
    dfbc:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    dfbe:	21 e0       	ldi	r18, 0x01	; 1
    dfc0:	a5 01       	movw	r20, r10
    dfc2:	67 2d       	mov	r22, r7
    dfc4:	8e 2d       	mov	r24, r14
    dfc6:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+12)%30, counter, true);
    dfca:	21 e0       	ldi	r18, 0x01	; 1
    dfcc:	ae 01       	movw	r20, r28
    dfce:	6f 2d       	mov	r22, r15
    dfd0:	8e 2d       	mov	r24, r14
    dfd2:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    dfd6:	8c ed       	ldi	r24, 0xDC	; 220
    dfd8:	95 e0       	ldi	r25, 0x05	; 5
    dfda:	0e 94 ff 41 	call	0x83fe	; 0x83fe <WaitUs>
    dfde:	d8 cf       	rjmp	.-80     	; 0xdf90 <tally_score+0x1ae>
    dfe0:	85 01       	movw	r16, r10
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Time
	counter = game.time;
	while (counter > 0)
    dfe2:	e6 01       	movw	r28, r12
		WaitUs(TALLY_DELAY);
	}
	
	// Tally Level Bonus
	counter = bonus;
	while (counter > 0)
    dfe4:	20 97       	sbiw	r28, 0x00	; 0
    dfe6:	e9 f0       	breq	.+58     	; 0xe022 <tally_score+0x240>
	{
		WaitVsync(1);
    dfe8:	81 e0       	ldi	r24, 0x01	; 1
    dfea:	90 e0       	ldi	r25, 0x00	; 0
    dfec:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
		SFX_HIT;
    dff0:	41 e0       	ldi	r20, 0x01	; 1
    dff2:	6f ef       	ldi	r22, 0xFF	; 255
    dff4:	84 e0       	ldi	r24, 0x04	; 4
    dff6:	0e 94 ac 45 	call	0x8b58	; 0x8b58 <TriggerFx>
		tally += 1;
    dffa:	0f 5f       	subi	r16, 0xFF	; 255
    dffc:	1f 4f       	sbci	r17, 0xFF	; 255
		counter -= 1;
    dffe:	21 97       	sbiw	r28, 0x01	; 1
		LBPrintInt((x+20)%32, (y+9)%30, tally, true);
    e000:	21 e0       	ldi	r18, 0x01	; 1
    e002:	a8 01       	movw	r20, r16
    e004:	67 2d       	mov	r22, r7
    e006:	8e 2d       	mov	r24, r14
    e008:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		LBPrintInt((x+20)%32, (y+13)%30, counter, true);
    e00c:	21 e0       	ldi	r18, 0x01	; 1
    e00e:	ae 01       	movw	r20, r28
    e010:	62 2d       	mov	r22, r2
    e012:	8e 2d       	mov	r24, r14
    e014:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
		WaitUs(TALLY_DELAY);
    e018:	8c ed       	ldi	r24, 0xDC	; 220
    e01a:	95 e0       	ldi	r25, 0x05	; 5
    e01c:	0e 94 ff 41 	call	0x83fe	; 0x83fe <WaitUs>
    e020:	e1 cf       	rjmp	.-62     	; 0xdfe4 <tally_score+0x202>
    e022:	ac 0c       	add	r10, r12
    e024:	bd 1c       	adc	r11, r13
	}
	
	game.score = tally;
    e026:	b0 92 bc 0d 	sts	0x0DBC, r11
    e02a:	a0 92 bb 0d 	sts	0x0DBB, r10
	game.time = 0;
    e02e:	10 92 c0 0d 	sts	0x0DC0, r1
    e032:	10 92 bf 0d 	sts	0x0DBF, r1
	LBWaitSeconds(2);
    e036:	82 e0       	ldi	r24, 0x02	; 2
}
    e038:	df 91       	pop	r29
    e03a:	cf 91       	pop	r28
    e03c:	1f 91       	pop	r17
    e03e:	0f 91       	pop	r16
    e040:	ff 90       	pop	r15
    e042:	ef 90       	pop	r14
    e044:	df 90       	pop	r13
    e046:	cf 90       	pop	r12
    e048:	bf 90       	pop	r11
    e04a:	af 90       	pop	r10
    e04c:	9f 90       	pop	r9
    e04e:	8f 90       	pop	r8
    e050:	7f 90       	pop	r7
    e052:	6f 90       	pop	r6
    e054:	5f 90       	pop	r5
    e056:	4f 90       	pop	r4
    e058:	3f 90       	pop	r3
    e05a:	2f 90       	pop	r2
		WaitUs(TALLY_DELAY);
	}
	
	game.score = tally;
	game.time = 0;
	LBWaitSeconds(2);
    e05c:	0c 94 e4 52 	jmp	0xa5c8	; 0xa5c8 <LBWaitSeconds>

0000e060 <handle_player_death>:
		}
	}
}

u8 handle_player_death(Player* player)
{
    e060:	cf 93       	push	r28
	if (player == &game.boss) {
    e062:	84 55       	subi	r24, 0x54	; 84
    e064:	9e 40       	sbci	r25, 0x0E	; 14
    e066:	29 f4       	brne	.+10     	; 0xe072 <handle_player_death+0x12>
		game.level_ended = 1;
    e068:	81 e0       	ldi	r24, 0x01	; 1
    e06a:	80 93 d6 0d 	sts	0x0DD6, r24
		return 1;
    e06e:	c1 e0       	ldi	r28, 0x01	; 1
    e070:	34 c0       	rjmp	.+104    	; 0xe0da <handle_player_death+0x7a>
	}
	game.lives--;
    e072:	80 91 cc 0d 	lds	r24, 0x0DCC
    e076:	81 50       	subi	r24, 0x01	; 1
    e078:	80 93 cc 0d 	sts	0x0DCC, r24
	clear_sprites(0, 6);
    e07c:	66 e0       	ldi	r22, 0x06	; 6
    e07e:	80 e0       	ldi	r24, 0x00	; 0
    e080:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    e084:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	if (game.lives == 0)
    e088:	c0 91 cc 0d 	lds	r28, 0x0DCC
    e08c:	c1 11       	cpse	r28, r1
    e08e:	09 c0       	rjmp	.+18     	; 0xe0a2 <handle_player_death+0x42>
	{
		tally_score((char*) strGameOver, 0);
    e090:	60 e0       	ldi	r22, 0x00	; 0
    e092:	70 e0       	ldi	r23, 0x00	; 0
    e094:	89 e6       	ldi	r24, 0x69	; 105
    e096:	9b e0       	ldi	r25, 0x0B	; 11
    e098:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <tally_score>
		exit_game();
    e09c:	0e 94 7f 6d 	call	0xdafe	; 0xdafe <exit_game>
    e0a0:	1c c0       	rjmp	.+56     	; 0xe0da <handle_player_death+0x7a>
		return 0;
	}
	FadeOut(FRAMES_PER_FADE, true);
    e0a2:	61 e0       	ldi	r22, 0x01	; 1
    e0a4:	81 e0       	ldi	r24, 0x01	; 1
    e0a6:	0e 94 2d 51 	call	0xa25a	; 0xa25a <FadeOut>
	ClearVram();
    e0aa:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
	clear_sprites(0, MAX_EXTENDED_SPRITES);
    e0ae:	64 e1       	ldi	r22, 0x14	; 20
    e0b0:	80 e0       	ldi	r24, 0x00	; 0
    e0b2:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
	LBRotateSprites();
    e0b6:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
	FadeIn(FRAMES_PER_FADE, false);
    e0ba:	60 e0       	ldi	r22, 0x00	; 0
    e0bc:	81 e0       	ldi	r24, 0x01	; 1
    e0be:	0e 94 21 51 	call	0xa242	; 0xa242 <FadeIn>
	init_player_state();
    e0c2:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <init_player_state>
	init_boss_state();
    e0c6:	0e 94 de 57 	call	0xafbc	; 0xafbc <init_boss_state>
	init_enemy_state();
    e0ca:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <init_enemy_state>
	load_level(game.current_level_index, false);
    e0ce:	60 e0       	ldi	r22, 0x00	; 0
    e0d0:	80 91 ce 0d 	lds	r24, 0x0DCE
    e0d4:	0e 94 8c 69 	call	0xd318	; 0xd318 <load_level>
	return 0;
    e0d8:	c0 e0       	ldi	r28, 0x00	; 0
}
    e0da:	8c 2f       	mov	r24, r28
    e0dc:	cf 91       	pop	r28
    e0de:	08 95       	ret

0000e0e0 <update_player>:
		}
	}
}

u8 update_player(Player* player, u8 slot)
{
    e0e0:	cf 92       	push	r12
    e0e2:	df 92       	push	r13
    e0e4:	ef 92       	push	r14
    e0e6:	ff 92       	push	r15
    e0e8:	0f 93       	push	r16
    e0ea:	1f 93       	push	r17
    e0ec:	cf 93       	push	r28
    e0ee:	df 93       	push	r29
    e0f0:	1f 92       	push	r1
    e0f2:	cd b7       	in	r28, 0x3d	; 61
    e0f4:	de b7       	in	r29, 0x3e	; 62
    e0f6:	6c 01       	movw	r12, r24
    e0f8:	16 2f       	mov	r17, r22
	s8 space_ship_speed = SPACE_SHIP_SPEED;
	
	handle_music_toggle(&player->controls);
    e0fa:	7c 01       	movw	r14, r24
    e0fc:	24 e7       	ldi	r18, 0x74	; 116
    e0fe:	e2 0e       	add	r14, r18
    e100:	f1 1c       	adc	r15, r1
    e102:	c7 01       	movw	r24, r14
    e104:	0e 94 5c 60 	call	0xc0b8	; 0xc0b8 <handle_music_toggle>
	handle_demo_play(player);
    e108:	c6 01       	movw	r24, r12
    e10a:	0e 94 68 60 	call	0xc0d0	; 0xc0d0 <handle_demo_play>
	
	if (player->flags & EXPLODING)
    e10e:	f6 01       	movw	r30, r12
    e110:	00 85       	ldd	r16, Z+8	; 0x08
    e112:	04 ff       	sbrs	r16, 4
    e114:	19 c0       	rjmp	.+50     	; 0xe148 <update_player+0x68>
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
    e116:	04 85       	ldd	r16, Z+12	; 0x0c
    e118:	23 85       	ldd	r18, Z+11	; 0x0b
    e11a:	41 2f       	mov	r20, r17
    e11c:	b6 01       	movw	r22, r12
    e11e:	64 59       	subi	r22, 0x94	; 148
    e120:	7f 4f       	sbci	r23, 0xFF	; 255
    e122:	c6 01       	movw	r24, r12
    e124:	08 96       	adiw	r24, 0x08	; 8
    e126:	0e 94 27 64 	call	0xc84e	; 0xc84e <map_explosion>
    e12a:	88 23       	and	r24, r24
    e12c:	09 f4       	brne	.+2      	; 0xe130 <update_player+0x50>
    e12e:	00 c2       	rjmp	.+1024   	; 0xe530 <update_player+0x450>
		{
			return handle_player_death(player);
    e130:	c6 01       	movw	r24, r12
			player->direction = D_RIGHT;
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
		}
	}
	return 1;
}
    e132:	0f 90       	pop	r0
    e134:	df 91       	pop	r29
    e136:	cf 91       	pop	r28
    e138:	1f 91       	pop	r17
    e13a:	0f 91       	pop	r16
    e13c:	ff 90       	pop	r15
    e13e:	ef 90       	pop	r14
    e140:	df 90       	pop	r13
    e142:	cf 90       	pop	r12
	
	if (player->flags & EXPLODING)
	{
		if (map_explosion(&player->flags, &player->expl, slot, player->width, player->height))
		{
			return handle_player_death(player);
    e144:	0c 94 30 70 	jmp	0xe060	; 0xe060 <handle_player_death>
		}
	}
	else if (is_space())
    e148:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    e14c:	88 23       	and	r24, r24
    e14e:	09 f4       	brne	.+2      	; 0xe152 <update_player+0x72>
    e150:	a6 c0       	rjmp	.+332    	; 0xe29e <update_player+0x1be>
	{
		if (game.current_level_index == 9)
    e152:	80 91 ce 0d 	lds	r24, 0x0DCE
    e156:	89 30       	cpi	r24, 0x09	; 9
    e158:	09 f0       	breq	.+2      	; 0xe15c <update_player+0x7c>
    e15a:	4d c0       	rjmp	.+154    	; 0xe1f6 <update_player+0x116>
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
    e15c:	80 91 b9 0d 	lds	r24, 0x0DB9
    e160:	90 91 ba 0d 	lds	r25, 0x0DBA
    e164:	e3 e0       	ldi	r30, 0x03	; 3
    e166:	96 95       	lsr	r25
    e168:	87 95       	ror	r24
    e16a:	ea 95       	dec	r30
    e16c:	e1 f7       	brne	.-8      	; 0xe166 <update_player+0x86>
    e16e:	4c 96       	adiw	r24, 0x1c	; 28
    e170:	82 3d       	cpi	r24, 0xD2	; 210
    e172:	91 05       	cpc	r25, r1
    e174:	08 f4       	brcc	.+2      	; 0xe178 <update_player+0x98>
    e176:	3f c0       	rjmp	.+126    	; 0xe1f6 <update_player+0x116>
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
				if (player->flags & END_OF_SPACE)
    e178:	05 ff       	sbrs	r16, 5
    e17a:	02 c0       	rjmp	.+4      	; 0xe180 <update_player+0xa0>
				{
					space_ship_speed = 0;
    e17c:	00 e0       	ldi	r16, 0x00	; 0
    e17e:	01 c0       	rjmp	.+2      	; 0xe182 <update_player+0xa2>
	{
		if (game.current_level_index == 9)
		{
			if (game.camera_x/8 + CAMERA_WIDTH >= 210)
			{
				space_ship_speed = SPACE_SHIP_SPEED / 2;
    e180:	0e e1       	ldi	r16, 0x1E	; 30
				if (player->flags & END_OF_SPACE)
				{
					space_ship_speed = 0;
					
				}
				if (!(game.flags & BOSS_APROACHING))
    e182:	80 91 d8 0d 	lds	r24, 0x0DD8
    e186:	86 fd       	sbrc	r24, 6
    e188:	07 c0       	rjmp	.+14     	; 0xe198 <update_player+0xb8>
				{
					game.flags |= BOSS_APROACHING;
    e18a:	80 64       	ori	r24, 0x40	; 64
    e18c:	80 93 d8 0d 	sts	0x0DD8, r24
					explode_all_enemies();
    e190:	0e 94 40 60 	call	0xc080	; 0xc080 <explode_all_enemies>
					StopSong();
    e194:	0e 94 e6 44 	call	0x89cc	; 0x89cc <StopSong>
				}
				if (game.camera_x/8 + CAMERA_WIDTH >= 250 && !(game.flags & BOSS_REACHED))
    e198:	80 91 b9 0d 	lds	r24, 0x0DB9
    e19c:	90 91 ba 0d 	lds	r25, 0x0DBA
    e1a0:	73 e0       	ldi	r23, 0x03	; 3
    e1a2:	96 95       	lsr	r25
    e1a4:	87 95       	ror	r24
    e1a6:	7a 95       	dec	r23
    e1a8:	e1 f7       	brne	.-8      	; 0xe1a2 <update_player+0xc2>
    e1aa:	4c 96       	adiw	r24, 0x1c	; 28
    e1ac:	8a 3f       	cpi	r24, 0xFA	; 250
    e1ae:	91 05       	cpc	r25, r1
    e1b0:	68 f0       	brcs	.+26     	; 0xe1cc <update_player+0xec>
    e1b2:	80 91 d8 0d 	lds	r24, 0x0DD8
    e1b6:	87 fd       	sbrc	r24, 7
    e1b8:	09 c0       	rjmp	.+18     	; 0xe1cc <update_player+0xec>
				{
					game.flags |= BOSS_REACHED;
    e1ba:	80 68       	ori	r24, 0x80	; 128
    e1bc:	80 93 d8 0d 	sts	0x0DD8, r24
					init_enemy_boss_turrets();
    e1c0:	0e 94 8c 5b 	call	0xb718	; 0xb718 <init_enemy_boss_turrets>
					StartSong(planetsong);
    e1c4:	87 e8       	ldi	r24, 0x87	; 135
    e1c6:	92 e1       	ldi	r25, 0x12	; 18
    e1c8:	0e 94 bd 44 	call	0x897a	; 0x897a <StartSong>
				}
				if ((game.flags & BOSS_REACHED) && (game.active_enemies == 0))
    e1cc:	80 91 d8 0d 	lds	r24, 0x0DD8
    e1d0:	87 ff       	sbrs	r24, 7
    e1d2:	12 c0       	rjmp	.+36     	; 0xe1f8 <update_player+0x118>
    e1d4:	80 91 d4 0d 	lds	r24, 0x0DD4
    e1d8:	81 11       	cpse	r24, r1
    e1da:	0e c0       	rjmp	.+28     	; 0xe1f8 <update_player+0x118>
				{
					init_enemy_boss_eyes();
    e1dc:	0e 94 ac 5b 	call	0xb758	; 0xb758 <init_enemy_boss_eyes>
					game.eye_clusters--;
    e1e0:	80 91 d7 0d 	lds	r24, 0x0DD7
    e1e4:	81 50       	subi	r24, 0x01	; 1
    e1e6:	80 93 d7 0d 	sts	0x0DD7, r24
					if (game.eye_clusters == 0)
    e1ea:	81 11       	cpse	r24, r1
    e1ec:	05 c0       	rjmp	.+10     	; 0xe1f8 <update_player+0x118>
					{
						game.level_ended = 1;
    e1ee:	81 e0       	ldi	r24, 0x01	; 1
    e1f0:	80 93 d6 0d 	sts	0x0DD6, r24
    e1f4:	01 c0       	rjmp	.+2      	; 0xe1f8 <update_player+0x118>
	}
}

u8 update_player(Player* player, u8 slot)
{
	s8 space_ship_speed = SPACE_SHIP_SPEED;
    e1f6:	0c e3       	ldi	r16, 0x3C	; 60
						game.level_ended = 1;
					}
				}
			}
		}
		if (player->flags & END_OF_SPACE && game.current_level_index != 9) {
    e1f8:	f6 01       	movw	r30, r12
    e1fa:	80 85       	ldd	r24, Z+8	; 0x08
    e1fc:	85 ff       	sbrs	r24, 5
    e1fe:	08 c0       	rjmp	.+16     	; 0xe210 <update_player+0x130>
    e200:	80 91 ce 0d 	lds	r24, 0x0DCE
    e204:	89 30       	cpi	r24, 0x09	; 9
    e206:	21 f0       	breq	.+8      	; 0xe210 <update_player+0x130>
			player->shared.vx = space_ship_speed*2;
    e208:	00 0f       	add	r16, r16
    e20a:	05 83       	std	Z+5, r16	; 0x05
			player->shared.vy = 0;
    e20c:	14 82       	std	Z+4, r1	; 0x04
    e20e:	43 c0       	rjmp	.+134    	; 0xe296 <update_player+0x1b6>
		} else {
			player->shared.vy = 0;
    e210:	f6 01       	movw	r30, r12
    e212:	14 82       	std	Z+4, r1	; 0x04
			player->shared.vx = space_ship_speed;
    e214:	05 83       	std	Z+5, r16	; 0x05
			
			if ((player->controls.held & BTN_DOWN) && (player->shared.y/8 + 1 < game.level_height))
    e216:	e8 58       	subi	r30, 0x88	; 136
    e218:	ff 4f       	sbci	r31, 0xFF	; 255
    e21a:	20 81       	ld	r18, Z
    e21c:	25 ff       	sbrs	r18, 5
    e21e:	11 c0       	rjmp	.+34     	; 0xe242 <update_player+0x162>
    e220:	f6 01       	movw	r30, r12
    e222:	82 81       	ldd	r24, Z+2	; 0x02
    e224:	93 81       	ldd	r25, Z+3	; 0x03
    e226:	63 e0       	ldi	r22, 0x03	; 3
    e228:	96 95       	lsr	r25
    e22a:	87 95       	ror	r24
    e22c:	6a 95       	dec	r22
    e22e:	e1 f7       	brne	.-8      	; 0xe228 <update_player+0x148>
    e230:	01 96       	adiw	r24, 0x01	; 1
    e232:	40 91 c9 0d 	lds	r20, 0x0DC9
    e236:	50 e0       	ldi	r21, 0x00	; 0
    e238:	84 17       	cp	r24, r20
    e23a:	95 07       	cpc	r25, r21
    e23c:	10 f4       	brcc	.+4      	; 0xe242 <update_player+0x162>
			{
				player->shared.vy = SPACE_SHIP_SPEED;
    e23e:	8c e3       	ldi	r24, 0x3C	; 60
    e240:	84 83       	std	Z+4, r24	; 0x04
			}
			if ((player->controls.held & BTN_RIGHT) && (player->shared.x + 24 < game.camera_x + CAMERA_WIDTH*8))
    e242:	27 ff       	sbrs	r18, 7
    e244:	11 c0       	rjmp	.+34     	; 0xe268 <update_player+0x188>
    e246:	f6 01       	movw	r30, r12
    e248:	40 81       	ld	r20, Z
    e24a:	51 81       	ldd	r21, Z+1	; 0x01
    e24c:	48 5e       	subi	r20, 0xE8	; 232
    e24e:	5f 4f       	sbci	r21, 0xFF	; 255
    e250:	80 91 b9 0d 	lds	r24, 0x0DB9
    e254:	90 91 ba 0d 	lds	r25, 0x0DBA
    e258:	80 52       	subi	r24, 0x20	; 32
    e25a:	9f 4f       	sbci	r25, 0xFF	; 255
    e25c:	48 17       	cp	r20, r24
    e25e:	59 07       	cpc	r21, r25
    e260:	18 f4       	brcc	.+6      	; 0xe268 <update_player+0x188>
			{
				player->shared.vx = space_ship_speed + SPACE_SHIP_SPEED;
    e262:	8c e3       	ldi	r24, 0x3C	; 60
    e264:	80 0f       	add	r24, r16
    e266:	85 83       	std	Z+5, r24	; 0x05
			}
			if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    e268:	26 ff       	sbrs	r18, 6
    e26a:	0c c0       	rjmp	.+24     	; 0xe284 <update_player+0x1a4>
    e26c:	f6 01       	movw	r30, r12
    e26e:	40 81       	ld	r20, Z
    e270:	51 81       	ldd	r21, Z+1	; 0x01
    e272:	80 91 b9 0d 	lds	r24, 0x0DB9
    e276:	90 91 ba 0d 	lds	r25, 0x0DBA
    e27a:	84 17       	cp	r24, r20
    e27c:	95 07       	cpc	r25, r21
    e27e:	10 f4       	brcc	.+4      	; 0xe284 <update_player+0x1a4>
			{
				player->shared.vx = space_ship_speed - SPACE_SHIP_SPEED;
    e280:	0c 53       	subi	r16, 0x3C	; 60
    e282:	05 83       	std	Z+5, r16	; 0x05
			}
			if ((player->controls.held & BTN_UP) && (player->shared.y > 0))
    e284:	24 ff       	sbrs	r18, 4
    e286:	07 c0       	rjmp	.+14     	; 0xe296 <update_player+0x1b6>
    e288:	f6 01       	movw	r30, r12
    e28a:	82 81       	ldd	r24, Z+2	; 0x02
    e28c:	93 81       	ldd	r25, Z+3	; 0x03
    e28e:	89 2b       	or	r24, r25
    e290:	11 f0       	breq	.+4      	; 0xe296 <update_player+0x1b6>
			{
				player->shared.vy = -SPACE_SHIP_SPEED;
    e292:	84 ec       	ldi	r24, 0xC4	; 196
    e294:	84 83       	std	Z+4, r24	; 0x04
			}
		}
		LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    e296:	c6 01       	movw	r24, r12
    e298:	8c 5a       	subi	r24, 0xAC	; 172
    e29a:	9f 4f       	sbci	r25, 0xFF	; 255
    e29c:	42 c1       	rjmp	.+644    	; 0xe522 <update_player+0x442>
	}
	else if (player->flags & (IDLE|RUNNING))
    e29e:	80 2f       	mov	r24, r16
    e2a0:	8a 70       	andi	r24, 0x0A	; 10
    e2a2:	09 f4       	brne	.+2      	; 0xe2a6 <update_player+0x1c6>
    e2a4:	96 c0       	rjmp	.+300    	; 0xe3d2 <update_player+0x2f2>
	{
		if (!on_solid_ground(&player->shared, player->width, player->height))
    e2a6:	f6 01       	movw	r30, r12
    e2a8:	44 85       	ldd	r20, Z+12	; 0x0c
    e2aa:	63 85       	ldd	r22, Z+11	; 0x0b
    e2ac:	c6 01       	movw	r24, r12
    e2ae:	0e 94 de 5e 	call	0xbdbc	; 0xbdbc <on_solid_ground>
    e2b2:	81 11       	cpse	r24, r1
    e2b4:	06 c0       	rjmp	.+12     	; 0xe2c2 <update_player+0x1e2>
		{
			player->shared.gravity = GRAVITY;
    e2b6:	88 ec       	ldi	r24, 0xC8	; 200
    e2b8:	f6 01       	movw	r30, r12
    e2ba:	86 83       	std	Z+6, r24	; 0x06
			player->flags = JUMPING;
    e2bc:	81 e0       	ldi	r24, 0x01	; 1
    e2be:	80 87       	std	Z+8, r24	; 0x08
    e2c0:	0e c1       	rjmp	.+540    	; 0xe4de <update_player+0x3fe>
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
		}
		else
		{
			if (player->controls.held & BTN_DOWN)
    e2c2:	f6 01       	movw	r30, r12
    e2c4:	e8 58       	subi	r30, 0x88	; 136
    e2c6:	ff 4f       	sbci	r31, 0xFF	; 255
    e2c8:	80 81       	ld	r24, Z
    e2ca:	85 ff       	sbrs	r24, 5
    e2cc:	25 c0       	rjmp	.+74     	; 0xe318 <update_player+0x238>
			{
				player->shared.y += 16;
    e2ce:	f6 01       	movw	r30, r12
    e2d0:	82 81       	ldd	r24, Z+2	; 0x02
    e2d2:	93 81       	ldd	r25, Z+3	; 0x03
    e2d4:	40 96       	adiw	r24, 0x10	; 16
    e2d6:	93 83       	std	Z+3, r25	; 0x03
    e2d8:	82 83       	std	Z+2, r24	; 0x02
				if(player->direction == D_RIGHT)
    e2da:	82 85       	ldd	r24, Z+10	; 0x0a
    e2dc:	81 30       	cpi	r24, 0x01	; 1
    e2de:	29 f4       	brne	.+10     	; 0xe2ea <update_player+0x20a>
				{
					player->shared.x -= 8;
    e2e0:	80 81       	ld	r24, Z
    e2e2:	91 81       	ldd	r25, Z+1	; 0x01
    e2e4:	08 97       	sbiw	r24, 0x08	; 8
    e2e6:	91 83       	std	Z+1, r25	; 0x01
    e2e8:	80 83       	st	Z, r24
				}
				player->shared.vx = 0;
    e2ea:	f6 01       	movw	r30, r12
    e2ec:	15 82       	std	Z+5, r1	; 0x05
				player->flags = PRONE;
    e2ee:	84 e0       	ldi	r24, 0x04	; 4
    e2f0:	80 87       	std	Z+8, r24	; 0x08
				player->width = 3;
    e2f2:	83 e0       	ldi	r24, 0x03	; 3
    e2f4:	83 87       	std	Z+11, r24	; 0x0b
				player->height = 1;
    e2f6:	81 e0       	ldi	r24, 0x01	; 1
    e2f8:	84 87       	std	Z+12, r24	; 0x0c
				clear_sprites(3, 3);
    e2fa:	63 e0       	ldi	r22, 0x03	; 3
    e2fc:	83 e0       	ldi	r24, 0x03	; 3
    e2fe:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
				LBMapSprite(slot, LBGetNextFrame(&player->prone), extendedSprites[slot].flags);
    e302:	24 e0       	ldi	r18, 0x04	; 4
    e304:	12 9f       	mul	r17, r18
    e306:	f0 01       	movw	r30, r0
    e308:	11 24       	eor	r1, r1
    e30a:	ec 51       	subi	r30, 0x1C	; 28
    e30c:	f0 4f       	sbci	r31, 0xF0	; 240
    e30e:	43 81       	ldd	r20, Z+3	; 0x03
    e310:	c6 01       	movw	r24, r12
    e312:	8c 59       	subi	r24, 0x9C	; 156
    e314:	9f 4f       	sbci	r25, 0xFF	; 255
    e316:	45 c0       	rjmp	.+138    	; 0xe3a2 <update_player+0x2c2>
			}
			else if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    e318:	87 ff       	sbrs	r24, 7
    e31a:	1d c0       	rjmp	.+58     	; 0xe356 <update_player+0x276>
    e31c:	f6 01       	movw	r30, r12
    e31e:	20 81       	ld	r18, Z
    e320:	31 81       	ldd	r19, Z+1	; 0x01
    e322:	53 e0       	ldi	r21, 0x03	; 3
    e324:	36 95       	lsr	r19
    e326:	27 95       	ror	r18
    e328:	5a 95       	dec	r21
    e32a:	e1 f7       	brne	.-8      	; 0xe324 <update_player+0x244>
    e32c:	2e 5f       	subi	r18, 0xFE	; 254
    e32e:	3f 4f       	sbci	r19, 0xFF	; 255
    e330:	40 91 c8 0d 	lds	r20, 0x0DC8
    e334:	50 e0       	ldi	r21, 0x00	; 0
    e336:	24 17       	cp	r18, r20
    e338:	35 07       	cpc	r19, r21
    e33a:	68 f4       	brcc	.+26     	; 0xe356 <update_player+0x276>
			{
				player->shared.vx = RUN_SPEED;
    e33c:	8c e3       	ldi	r24, 0x3C	; 60
    e33e:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    e340:	82 e0       	ldi	r24, 0x02	; 2
    e342:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_RIGHT;
    e344:	81 e0       	ldi	r24, 0x01	; 1
    e346:	82 87       	std	Z+10, r24	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), 0);
    e348:	c6 01       	movw	r24, r12
    e34a:	8c 5a       	subi	r24, 0xAC	; 172
    e34c:	9f 4f       	sbci	r25, 0xFF	; 255
    e34e:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e352:	40 e0       	ldi	r20, 0x00	; 0
    e354:	2a c0       	rjmp	.+84     	; 0xe3aa <update_player+0x2ca>
			}
			else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    e356:	86 ff       	sbrs	r24, 6
    e358:	16 c0       	rjmp	.+44     	; 0xe386 <update_player+0x2a6>
    e35a:	f6 01       	movw	r30, r12
    e35c:	20 81       	ld	r18, Z
    e35e:	31 81       	ldd	r19, Z+1	; 0x01
    e360:	80 91 b9 0d 	lds	r24, 0x0DB9
    e364:	90 91 ba 0d 	lds	r25, 0x0DBA
    e368:	82 17       	cp	r24, r18
    e36a:	93 07       	cpc	r25, r19
    e36c:	60 f4       	brcc	.+24     	; 0xe386 <update_player+0x2a6>
			{
				player->shared.vx = -RUN_SPEED;
    e36e:	84 ec       	ldi	r24, 0xC4	; 196
    e370:	85 83       	std	Z+5, r24	; 0x05
				player->flags = RUNNING;
    e372:	82 e0       	ldi	r24, 0x02	; 2
    e374:	80 87       	std	Z+8, r24	; 0x08
				player->direction = D_LEFT;
    e376:	12 86       	std	Z+10, r1	; 0x0a
				LBMapSprite(slot, LBGetNextFrame(&player->run), SPRITE_FLIP_X);
    e378:	c6 01       	movw	r24, r12
    e37a:	8c 5a       	subi	r24, 0xAC	; 172
    e37c:	9f 4f       	sbci	r25, 0xFF	; 255
    e37e:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e382:	41 e0       	ldi	r20, 0x01	; 1
    e384:	12 c0       	rjmp	.+36     	; 0xe3aa <update_player+0x2ca>
			}
			else
			{
				player->flags = IDLE;
    e386:	88 e0       	ldi	r24, 0x08	; 8
    e388:	f6 01       	movw	r30, r12
    e38a:	80 87       	std	Z+8, r24	; 0x08
				player->shared.vx = 0;
    e38c:	15 82       	std	Z+5, r1	; 0x05
				LBMapSprite(slot, LBGetNextFrame(&player->idle), extendedSprites[slot].flags);
    e38e:	24 e0       	ldi	r18, 0x04	; 4
    e390:	12 9f       	mul	r17, r18
    e392:	f0 01       	movw	r30, r0
    e394:	11 24       	eor	r1, r1
    e396:	ec 51       	subi	r30, 0x1C	; 28
    e398:	f0 4f       	sbci	r31, 0xF0	; 240
    e39a:	43 81       	ldd	r20, Z+3	; 0x03
    e39c:	c6 01       	movw	r24, r12
    e39e:	84 5b       	subi	r24, 0xB4	; 180
    e3a0:	9f 4f       	sbci	r25, 0xFF	; 255
    e3a2:	49 83       	std	Y+1, r20	; 0x01
    e3a4:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e3a8:	49 81       	ldd	r20, Y+1	; 0x01
    e3aa:	bc 01       	movw	r22, r24
    e3ac:	81 2f       	mov	r24, r17
    e3ae:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
			}
			if (player->controls.pressed & BTN_A && !(player->flags & PRONE))
    e3b2:	f7 01       	movw	r30, r14
    e3b4:	80 81       	ld	r24, Z
    e3b6:	91 81       	ldd	r25, Z+1	; 0x01
    e3b8:	90 ff       	sbrs	r25, 0
    e3ba:	ba c0       	rjmp	.+372    	; 0xe530 <update_player+0x450>
    e3bc:	f6 01       	movw	r30, r12
    e3be:	80 85       	ldd	r24, Z+8	; 0x08
    e3c0:	82 fd       	sbrc	r24, 2
    e3c2:	b6 c0       	rjmp	.+364    	; 0xe530 <update_player+0x450>
			{
				player->shared.vy = -JUMP_SPEED;
    e3c4:	81 e8       	ldi	r24, 0x81	; 129
    e3c6:	84 83       	std	Z+4, r24	; 0x04
				player->shared.gravity = GRAVITY;
    e3c8:	88 ec       	ldi	r24, 0xC8	; 200
    e3ca:	86 83       	std	Z+6, r24	; 0x06
				player->flags = JUMPING;
    e3cc:	81 e0       	ldi	r24, 0x01	; 1
    e3ce:	80 87       	std	Z+8, r24	; 0x08
    e3d0:	82 c0       	rjmp	.+260    	; 0xe4d6 <update_player+0x3f6>
				player->height = 3;
				LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
			}
		}
	}
	else if (player->flags & JUMPING)
    e3d2:	00 ff       	sbrs	r16, 0
    e3d4:	4c c0       	rjmp	.+152    	; 0xe46e <update_player+0x38e>
	{
		if ((player->controls.held & BTN_RIGHT) && (player->shared.x/8 + 2 < game.level_width))
    e3d6:	f6 01       	movw	r30, r12
    e3d8:	e8 58       	subi	r30, 0x88	; 136
    e3da:	ff 4f       	sbci	r31, 0xFF	; 255
    e3dc:	60 81       	ld	r22, Z
    e3de:	c6 01       	movw	r24, r12
    e3e0:	84 5a       	subi	r24, 0xA4	; 164
    e3e2:	9f 4f       	sbci	r25, 0xFF	; 255
    e3e4:	67 ff       	sbrs	r22, 7
    e3e6:	18 c0       	rjmp	.+48     	; 0xe418 <update_player+0x338>
    e3e8:	f6 01       	movw	r30, r12
    e3ea:	20 81       	ld	r18, Z
    e3ec:	31 81       	ldd	r19, Z+1	; 0x01
    e3ee:	43 e0       	ldi	r20, 0x03	; 3
    e3f0:	36 95       	lsr	r19
    e3f2:	27 95       	ror	r18
    e3f4:	4a 95       	dec	r20
    e3f6:	e1 f7       	brne	.-8      	; 0xe3f0 <update_player+0x310>
    e3f8:	2e 5f       	subi	r18, 0xFE	; 254
    e3fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e3fc:	40 91 c8 0d 	lds	r20, 0x0DC8
    e400:	50 e0       	ldi	r21, 0x00	; 0
    e402:	24 17       	cp	r18, r20
    e404:	35 07       	cpc	r19, r21
    e406:	40 f4       	brcc	.+16     	; 0xe418 <update_player+0x338>
		{
			player->shared.vx = RUN_SPEED;
    e408:	2c e3       	ldi	r18, 0x3C	; 60
    e40a:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_RIGHT;
    e40c:	21 e0       	ldi	r18, 0x01	; 1
    e40e:	22 87       	std	Z+10, r18	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), 0);
    e410:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e414:	40 e0       	ldi	r20, 0x00	; 0
    e416:	20 c0       	rjmp	.+64     	; 0xe458 <update_player+0x378>
		}
		else if ((player->controls.held & BTN_LEFT) && (player->shared.x > game.camera_x))
    e418:	66 ff       	sbrs	r22, 6
    e41a:	11 c0       	rjmp	.+34     	; 0xe43e <update_player+0x35e>
    e41c:	f6 01       	movw	r30, r12
    e41e:	40 81       	ld	r20, Z
    e420:	51 81       	ldd	r21, Z+1	; 0x01
    e422:	20 91 b9 0d 	lds	r18, 0x0DB9
    e426:	30 91 ba 0d 	lds	r19, 0x0DBA
    e42a:	24 17       	cp	r18, r20
    e42c:	35 07       	cpc	r19, r21
    e42e:	38 f4       	brcc	.+14     	; 0xe43e <update_player+0x35e>
		{
			player->shared.vx = -RUN_SPEED;
    e430:	24 ec       	ldi	r18, 0xC4	; 196
    e432:	25 83       	std	Z+5, r18	; 0x05
			player->direction = D_LEFT;
    e434:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->jump), SPRITE_FLIP_X);
    e436:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e43a:	41 e0       	ldi	r20, 0x01	; 1
    e43c:	0d c0       	rjmp	.+26     	; 0xe458 <update_player+0x378>
		}
		else
		{
			player->shared.vx = 0;
    e43e:	f6 01       	movw	r30, r12
    e440:	15 82       	std	Z+5, r1	; 0x05
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    e442:	24 e0       	ldi	r18, 0x04	; 4
    e444:	12 9f       	mul	r17, r18
    e446:	f0 01       	movw	r30, r0
    e448:	11 24       	eor	r1, r1
    e44a:	ec 51       	subi	r30, 0x1C	; 28
    e44c:	f0 4f       	sbci	r31, 0xF0	; 240
    e44e:	43 81       	ldd	r20, Z+3	; 0x03
    e450:	49 83       	std	Y+1, r20	; 0x01
    e452:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e456:	49 81       	ldd	r20, Y+1	; 0x01
    e458:	bc 01       	movw	r22, r24
    e45a:	81 2f       	mov	r24, r17
    e45c:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		}
		
		if (player->shared.gravity == 0)
    e460:	f6 01       	movw	r30, r12
    e462:	86 81       	ldd	r24, Z+6	; 0x06
    e464:	81 11       	cpse	r24, r1
    e466:	64 c0       	rjmp	.+200    	; 0xe530 <update_player+0x450>
		{
			player->flags = IDLE;
    e468:	88 e0       	ldi	r24, 0x08	; 8
    e46a:	80 87       	std	Z+8, r24	; 0x08
    e46c:	61 c0       	rjmp	.+194    	; 0xe530 <update_player+0x450>
		}
	}
	else if (player->flags & PRONE)
    e46e:	02 ff       	sbrs	r16, 2
    e470:	5f c0       	rjmp	.+190    	; 0xe530 <update_player+0x450>
	{
		if (player->controls.pressed & BTN_UP)
    e472:	f7 01       	movw	r30, r14
    e474:	80 81       	ld	r24, Z
    e476:	91 81       	ldd	r25, Z+1	; 0x01
    e478:	84 ff       	sbrs	r24, 4
    e47a:	16 c0       	rjmp	.+44     	; 0xe4a8 <update_player+0x3c8>
		{
			player->flags = IDLE;	
    e47c:	88 e0       	ldi	r24, 0x08	; 8
    e47e:	f6 01       	movw	r30, r12
    e480:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    e482:	82 81       	ldd	r24, Z+2	; 0x02
    e484:	93 81       	ldd	r25, Z+3	; 0x03
    e486:	40 97       	sbiw	r24, 0x10	; 16
    e488:	93 83       	std	Z+3, r25	; 0x03
    e48a:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    e48c:	82 85       	ldd	r24, Z+10	; 0x0a
    e48e:	81 30       	cpi	r24, 0x01	; 1
    e490:	29 f4       	brne	.+10     	; 0xe49c <update_player+0x3bc>
			{
				player->shared.x += 8;
    e492:	80 81       	ld	r24, Z
    e494:	91 81       	ldd	r25, Z+1	; 0x01
    e496:	08 96       	adiw	r24, 0x08	; 8
    e498:	91 83       	std	Z+1, r25	; 0x01
    e49a:	80 83       	st	Z, r24
			}
			player->width = 2;
    e49c:	82 e0       	ldi	r24, 0x02	; 2
    e49e:	f6 01       	movw	r30, r12
    e4a0:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    e4a2:	83 e0       	ldi	r24, 0x03	; 3
    e4a4:	84 87       	std	Z+12, r24	; 0x0c
    e4a6:	44 c0       	rjmp	.+136    	; 0xe530 <update_player+0x450>
		}
		else if (player->controls.pressed & BTN_A)
    e4a8:	90 ff       	sbrs	r25, 0
    e4aa:	28 c0       	rjmp	.+80     	; 0xe4fc <update_player+0x41c>
		{
			player->flags = JUMPING;
    e4ac:	81 e0       	ldi	r24, 0x01	; 1
    e4ae:	f6 01       	movw	r30, r12
    e4b0:	80 87       	std	Z+8, r24	; 0x08
			player->shared.y -= 16;
    e4b2:	82 81       	ldd	r24, Z+2	; 0x02
    e4b4:	93 81       	ldd	r25, Z+3	; 0x03
    e4b6:	40 97       	sbiw	r24, 0x10	; 16
    e4b8:	93 83       	std	Z+3, r25	; 0x03
    e4ba:	82 83       	std	Z+2, r24	; 0x02
			if(player->direction == D_RIGHT)
    e4bc:	82 85       	ldd	r24, Z+10	; 0x0a
    e4be:	81 30       	cpi	r24, 0x01	; 1
    e4c0:	29 f4       	brne	.+10     	; 0xe4cc <update_player+0x3ec>
			{
				player->shared.x += 8;
    e4c2:	80 81       	ld	r24, Z
    e4c4:	91 81       	ldd	r25, Z+1	; 0x01
    e4c6:	08 96       	adiw	r24, 0x08	; 8
    e4c8:	91 83       	std	Z+1, r25	; 0x01
    e4ca:	80 83       	st	Z, r24
			}
			player->shared.vy = -JUMP_SPEED;
    e4cc:	81 e8       	ldi	r24, 0x81	; 129
    e4ce:	f6 01       	movw	r30, r12
    e4d0:	84 83       	std	Z+4, r24	; 0x04
			player->shared.gravity = GRAVITY;
    e4d2:	88 ec       	ldi	r24, 0xC8	; 200
    e4d4:	86 83       	std	Z+6, r24	; 0x06
			player->width = 2;
    e4d6:	82 e0       	ldi	r24, 0x02	; 2
    e4d8:	83 87       	std	Z+11, r24	; 0x0b
			player->height = 3;
    e4da:	83 e0       	ldi	r24, 0x03	; 3
    e4dc:	84 87       	std	Z+12, r24	; 0x0c
			LBMapSprite(slot, LBGetNextFrame(&player->jump), extendedSprites[slot].flags);
    e4de:	24 e0       	ldi	r18, 0x04	; 4
    e4e0:	12 9f       	mul	r17, r18
    e4e2:	f0 01       	movw	r30, r0
    e4e4:	11 24       	eor	r1, r1
    e4e6:	ec 51       	subi	r30, 0x1C	; 28
    e4e8:	f0 4f       	sbci	r31, 0xF0	; 240
    e4ea:	43 81       	ldd	r20, Z+3	; 0x03
    e4ec:	c6 01       	movw	r24, r12
    e4ee:	84 5a       	subi	r24, 0xA4	; 164
    e4f0:	9f 4f       	sbci	r25, 0xFF	; 255
    e4f2:	49 83       	std	Y+1, r20	; 0x01
    e4f4:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e4f8:	49 81       	ldd	r20, Y+1	; 0x01
    e4fa:	16 c0       	rjmp	.+44     	; 0xe528 <update_player+0x448>
		}
		else if (player->controls.pressed & BTN_LEFT)
    e4fc:	86 ff       	sbrs	r24, 6
    e4fe:	09 c0       	rjmp	.+18     	; 0xe512 <update_player+0x432>
		{
			player->direction = D_LEFT;
    e500:	f6 01       	movw	r30, r12
    e502:	12 86       	std	Z+10, r1	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), SPRITE_FLIP_X);
    e504:	c6 01       	movw	r24, r12
    e506:	8c 59       	subi	r24, 0x9C	; 156
    e508:	9f 4f       	sbci	r25, 0xFF	; 255
    e50a:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e50e:	41 e0       	ldi	r20, 0x01	; 1
    e510:	0b c0       	rjmp	.+22     	; 0xe528 <update_player+0x448>
		}
		else if (player->controls.pressed & BTN_RIGHT)
    e512:	87 ff       	sbrs	r24, 7
    e514:	0d c0       	rjmp	.+26     	; 0xe530 <update_player+0x450>
		{
			player->direction = D_RIGHT;
    e516:	81 e0       	ldi	r24, 0x01	; 1
    e518:	f6 01       	movw	r30, r12
    e51a:	82 87       	std	Z+10, r24	; 0x0a
			LBMapSprite(slot, LBGetNextFrame(&player->prone), 0);
    e51c:	c6 01       	movw	r24, r12
    e51e:	8c 59       	subi	r24, 0x9C	; 156
    e520:	9f 4f       	sbci	r25, 0xFF	; 255
    e522:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e526:	40 e0       	ldi	r20, 0x00	; 0
    e528:	bc 01       	movw	r22, r24
    e52a:	81 2f       	mov	r24, r17
    e52c:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		}
	}
	return 1;
}
    e530:	81 e0       	ldi	r24, 0x01	; 1
    e532:	0f 90       	pop	r0
    e534:	df 91       	pop	r29
    e536:	cf 91       	pop	r28
    e538:	1f 91       	pop	r17
    e53a:	0f 91       	pop	r16
    e53c:	ff 90       	pop	r15
    e53e:	ef 90       	pop	r14
    e540:	df 90       	pop	r13
    e542:	cf 90       	pop	r12
    e544:	08 95       	ret

0000e546 <update_level>:
	print_scroll(strCongrats);
	StopSong();
}

u8 update_level()
{
    e546:	cf 92       	push	r12
    e548:	df 92       	push	r13
    e54a:	ef 92       	push	r14
    e54c:	ff 92       	push	r15
    e54e:	0f 93       	push	r16
    e550:	cf 93       	push	r28
    e552:	df 93       	push	r29
	u8 ship_x = game.player.shared.x - game.camera_x;
    e554:	e0 90 d9 0d 	lds	r14, 0x0DD9
    e558:	f0 90 da 0d 	lds	r15, 0x0DDA
    e55c:	c0 90 b9 0d 	lds	r12, 0x0DB9
    e560:	d0 90 ba 0d 	lds	r13, 0x0DBA
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    e564:	80 91 d3 0d 	lds	r24, 0x0DD3
    e568:	8f 5f       	subi	r24, 0xFF	; 255
	if (game.frame_counter == 60)
    e56a:	8c 33       	cpi	r24, 0x3C	; 60
    e56c:	19 f0       	breq	.+6      	; 0xe574 <update_level+0x2e>
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
	static u16 demo_counter = 0;
	
	game.frame_counter++;
    e56e:	80 93 d3 0d 	sts	0x0DD3, r24
    e572:	0f c0       	rjmp	.+30     	; 0xe592 <update_level+0x4c>
	if (game.frame_counter == 60)
	{
		game.frame_counter = 0;
    e574:	10 92 d3 0d 	sts	0x0DD3, r1
		if (game.time != 65535) game.time++;
    e578:	80 91 bf 0d 	lds	r24, 0x0DBF
    e57c:	90 91 c0 0d 	lds	r25, 0x0DC0
    e580:	8f 3f       	cpi	r24, 0xFF	; 255
    e582:	2f ef       	ldi	r18, 0xFF	; 255
    e584:	92 07       	cpc	r25, r18
    e586:	29 f0       	breq	.+10     	; 0xe592 <update_level+0x4c>
    e588:	01 96       	adiw	r24, 0x01	; 1
    e58a:	90 93 c0 0d 	sts	0x0DC0, r25
    e58e:	80 93 bf 0d 	sts	0x0DBF, r24
	}
	
	if (is_space())
    e592:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    e596:	88 23       	and	r24, r24
    e598:	a1 f1       	breq	.+104    	; 0xe602 <update_level+0xbc>
	{
		if (game.camera_x/8 + CAMERA_WIDTH < game.level_width)
    e59a:	c6 01       	movw	r24, r12
    e59c:	23 e0       	ldi	r18, 0x03	; 3
    e59e:	96 95       	lsr	r25
    e5a0:	87 95       	ror	r24
    e5a2:	2a 95       	dec	r18
    e5a4:	e1 f7       	brne	.-8      	; 0xe59e <update_level+0x58>
    e5a6:	4c 96       	adiw	r24, 0x1c	; 28
    e5a8:	20 91 c8 0d 	lds	r18, 0x0DC8
    e5ac:	30 e0       	ldi	r19, 0x00	; 0
    e5ae:	82 17       	cp	r24, r18
    e5b0:	93 07       	cpc	r25, r19
    e5b2:	70 f4       	brcc	.+28     	; 0xe5d0 <update_level+0x8a>
		{
			if (game.current_level_index == 9 && (game.camera_x/8 + CAMERA_WIDTH >= 210))
    e5b4:	20 91 ce 0d 	lds	r18, 0x0DCE
    e5b8:	29 30       	cpi	r18, 0x09	; 9
    e5ba:	39 f4       	brne	.+14     	; 0xe5ca <update_level+0x84>
    e5bc:	82 3d       	cpi	r24, 0xD2	; 210
    e5be:	91 05       	cpc	r25, r1
    e5c0:	20 f0       	brcs	.+8      	; 0xe5ca <update_level+0x84>
			{
				if (game.frame_counter % 2 == 0) move_camera_x();
    e5c2:	80 91 d3 0d 	lds	r24, 0x0DD3
    e5c6:	80 fd       	sbrc	r24, 0
    e5c8:	34 c0       	rjmp	.+104    	; 0xe632 <update_level+0xec>
    e5ca:	0e 94 8b 5e 	call	0xbd16	; 0xbd16 <move_camera_x>
    e5ce:	31 c0       	rjmp	.+98     	; 0xe632 <update_level+0xec>
    e5d0:	80 91 e1 0d 	lds	r24, 0x0DE1
			else
			{
				move_camera_x();
			}
		}
		else if (game.player.shared.x+24 >= game.camera_x+CAMERA_WIDTH*8 && game.current_level_index != 9)
    e5d4:	a7 01       	movw	r20, r14
    e5d6:	48 5e       	subi	r20, 0xE8	; 232
    e5d8:	5f 4f       	sbci	r21, 0xFF	; 255
    e5da:	96 01       	movw	r18, r12
    e5dc:	20 52       	subi	r18, 0x20	; 32
    e5de:	3f 4f       	sbci	r19, 0xFF	; 255
    e5e0:	42 17       	cp	r20, r18
    e5e2:	53 07       	cpc	r21, r19
    e5e4:	50 f0       	brcs	.+20     	; 0xe5fa <update_level+0xb4>
    e5e6:	90 91 ce 0d 	lds	r25, 0x0DCE
    e5ea:	99 30       	cpi	r25, 0x09	; 9
    e5ec:	31 f0       	breq	.+12     	; 0xe5fa <update_level+0xb4>
		{
			game.level_ended = 1;
    e5ee:	91 e0       	ldi	r25, 0x01	; 1
    e5f0:	90 93 d6 0d 	sts	0x0DD6, r25
			game.player.flags ^= END_OF_SPACE;
    e5f4:	90 e2       	ldi	r25, 0x20	; 32
    e5f6:	89 27       	eor	r24, r25
    e5f8:	01 c0       	rjmp	.+2      	; 0xe5fc <update_level+0xb6>
		} else {
			game.player.flags |= END_OF_SPACE;
    e5fa:	80 62       	ori	r24, 0x20	; 32
    e5fc:	80 93 e1 0d 	sts	0x0DE1, r24
    e600:	18 c0       	rjmp	.+48     	; 0xe632 <update_level+0xec>
		}
	}
	else if (game.player.shared.vx > 0 &&
    e602:	80 91 de 0d 	lds	r24, 0x0DDE
    e606:	18 16       	cp	r1, r24
    e608:	a4 f4       	brge	.+40     	; 0xe632 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    e60a:	c7 01       	movw	r24, r14
    e60c:	8c 19       	sub	r24, r12
    e60e:	9d 09       	sbc	r25, r13
			game.player.flags ^= END_OF_SPACE;
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
    e610:	80 37       	cpi	r24, 0x70	; 112
    e612:	91 05       	cpc	r25, r1
    e614:	70 f0       	brcs	.+28     	; 0xe632 <update_level+0xec>
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
		(game.camera_x/8 + CAMERA_WIDTH < game.level_width))
    e616:	96 01       	movw	r18, r12
    e618:	83 e0       	ldi	r24, 0x03	; 3
    e61a:	36 95       	lsr	r19
    e61c:	27 95       	ror	r18
    e61e:	8a 95       	dec	r24
    e620:	e1 f7       	brne	.-8      	; 0xe61a <update_level+0xd4>
    e622:	24 5e       	subi	r18, 0xE4	; 228
    e624:	3f 4f       	sbci	r19, 0xFF	; 255
    e626:	80 91 c8 0d 	lds	r24, 0x0DC8
    e62a:	90 e0       	ldi	r25, 0x00	; 0
		} else {
			game.player.flags |= END_OF_SPACE;
		}
	}
	else if (game.player.shared.vx > 0 &&
	    (game.player.shared.x - game.camera_x) >= (CAMERA_WIDTH / 2 * 8) &&
    e62c:	28 17       	cp	r18, r24
    e62e:	39 07       	cpc	r19, r25
    e630:	60 f2       	brcs	.-104    	; 0xe5ca <update_level+0x84>
	{
		move_camera_x();
	}
	
	// Score
	LBPrintByte(9, VRAM_TILES_V-3, game.player.shield ,true);
    e632:	21 e0       	ldi	r18, 0x01	; 1
    e634:	40 91 e8 0d 	lds	r20, 0x0DE8
    e638:	6d e1       	ldi	r22, 0x1D	; 29
    e63a:	89 e0       	ldi	r24, 0x09	; 9
    e63c:	0e 94 3a 52 	call	0xa474	; 0xa474 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-3, game.time ,true);
    e640:	40 91 bf 0d 	lds	r20, 0x0DBF
    e644:	50 91 c0 0d 	lds	r21, 0x0DC0
    e648:	21 e0       	ldi	r18, 0x01	; 1
    e64a:	6d e1       	ldi	r22, 0x1D	; 29
    e64c:	8b e1       	ldi	r24, 0x1B	; 27
    e64e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintByte(9, VRAM_TILES_V-2, game.lives ,true);
    e652:	21 e0       	ldi	r18, 0x01	; 1
    e654:	40 91 cc 0d 	lds	r20, 0x0DCC
    e658:	6e e1       	ldi	r22, 0x1E	; 30
    e65a:	89 e0       	ldi	r24, 0x09	; 9
    e65c:	0e 94 3a 52 	call	0xa474	; 0xa474 <LBPrintByte>
	LBPrintInt(27, VRAM_TILES_V-2, game.level_score ,true);
    e660:	40 91 bd 0d 	lds	r20, 0x0DBD
    e664:	50 91 be 0d 	lds	r21, 0x0DBE
    e668:	21 e0       	ldi	r18, 0x01	; 1
    e66a:	6e e1       	ldi	r22, 0x1E	; 30
    e66c:	8b e1       	ldi	r24, 0x1B	; 27
    e66e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	LBPrintInt(27, VRAM_TILES_V-1, game.score ,true);
    e672:	40 91 bb 0d 	lds	r20, 0x0DBB
    e676:	50 91 bc 0d 	lds	r21, 0x0DBC
    e67a:	21 e0       	ldi	r18, 0x01	; 1
    e67c:	6f e1       	ldi	r22, 0x1F	; 31
    e67e:	8b e1       	ldi	r24, 0x1B	; 27
    e680:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <LBPrintInt>
	
	if (game.level_ended && !is_space() && game.player.flags & (IDLE|RUNNING|PRONE))
    e684:	80 91 d6 0d 	lds	r24, 0x0DD6
    e688:	88 23       	and	r24, r24
    e68a:	09 f4       	brne	.+2      	; 0xe68e <update_level+0x148>
    e68c:	8c c0       	rjmp	.+280    	; 0xe7a6 <update_level+0x260>
    e68e:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    e692:	81 11       	cpse	r24, r1
    e694:	6c c0       	rjmp	.+216    	; 0xe76e <update_level+0x228>
    e696:	80 91 e1 0d 	lds	r24, 0x0DE1
    e69a:	8e 70       	andi	r24, 0x0E	; 14
    e69c:	09 f4       	brne	.+2      	; 0xe6a0 <update_level+0x15a>
    e69e:	83 c0       	rjmp	.+262    	; 0xe7a6 <update_level+0x260>
	{
		LBMapSprite(PLAYER_SLOT, map_hero_idle, 0);
    e6a0:	40 e0       	ldi	r20, 0x00	; 0
    e6a2:	65 e1       	ldi	r22, 0x15	; 21
    e6a4:	78 e3       	ldi	r23, 0x38	; 56
    e6a6:	80 e0       	ldi	r24, 0x00	; 0
    e6a8:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
		if (game.player.flags & PRONE) {
    e6ac:	80 91 e1 0d 	lds	r24, 0x0DE1
    e6b0:	82 ff       	sbrs	r24, 2
    e6b2:	1a c0       	rjmp	.+52     	; 0xe6e8 <update_level+0x1a2>
			game.player.shared.y -= 16;
    e6b4:	40 91 db 0d 	lds	r20, 0x0DDB
    e6b8:	50 91 dc 0d 	lds	r21, 0x0DDC
    e6bc:	40 51       	subi	r20, 0x10	; 16
    e6be:	51 09       	sbc	r21, r1
    e6c0:	50 93 dc 0d 	sts	0x0DDC, r21
    e6c4:	40 93 db 0d 	sts	0x0DDB, r20
			game.player.width = 2;
    e6c8:	82 e0       	ldi	r24, 0x02	; 2
    e6ca:	80 93 e4 0d 	sts	0x0DE4, r24
			game.player.height = 3;
    e6ce:	83 e0       	ldi	r24, 0x03	; 3
    e6d0:	80 93 e5 0d 	sts	0x0DE5, r24
			LBMoveSprite(PLAYER_SLOT, game.player.shared.x-game.camera_x, game.player.shared.y, game.player.width, game.player.height);
    e6d4:	60 91 d9 0d 	lds	r22, 0x0DD9
    e6d8:	80 91 b9 0d 	lds	r24, 0x0DB9
    e6dc:	68 1b       	sub	r22, r24
    e6de:	03 e0       	ldi	r16, 0x03	; 3
    e6e0:	22 e0       	ldi	r18, 0x02	; 2
    e6e2:	80 e0       	ldi	r24, 0x00	; 0
    e6e4:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
		}
		clear_sprites(ENEMY_SLOT, 11);
    e6e8:	6b e0       	ldi	r22, 0x0B	; 11
    e6ea:	89 e0       	ldi	r24, 0x09	; 9
    e6ec:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
		LBRotateSprites();
    e6f0:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
		map_ship();
    e6f4:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <map_ship>

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
	char ship_increment = 3;
    e6f8:	d3 e0       	ldi	r29, 0x03	; 3
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
	u8 ship_y = 0;
    e6fa:	c0 e0       	ldi	r28, 0x00	; 0
	StopSong();
}

u8 update_level()
{
	u8 ship_x = game.player.shared.x - game.camera_x;
    e6fc:	ec 18       	sub	r14, r12
		clear_sprites(ENEMY_SLOT, 11);
		LBRotateSprites();
		map_ship();
		while (1)
		{
			WaitVsync(1);
    e6fe:	81 e0       	ldi	r24, 0x01	; 1
    e700:	90 e0       	ldi	r25, 0x00	; 0
    e702:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
			if (ship_y >= get_hero_spawn_y(game.current_level_index)*8)
    e706:	8c 2f       	mov	r24, r28
    e708:	90 e0       	ldi	r25, 0x00	; 0
    e70a:	88 3a       	cpi	r24, 0xA8	; 168
    e70c:	91 05       	cpc	r25, r1
    e70e:	3c f0       	brlt	.+14     	; 0xe71e <update_level+0x1d8>
			{
				clear_sprites(0, 6);
    e710:	66 e0       	ldi	r22, 0x06	; 6
    e712:	80 e0       	ldi	r24, 0x00	; 0
    e714:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
				LBRotateSprites();
    e718:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
				ship_increment = -3;
    e71c:	dd ef       	ldi	r29, 0xFD	; 253
			}
			LBMapSprite(PLAYER_SHOT_SLOT, LBGetNextFrame(&game.player.run), 0);
    e71e:	8d e2       	ldi	r24, 0x2D	; 45
    e720:	9e e0       	ldi	r25, 0x0E	; 14
    e722:	0e 94 8d 51 	call	0xa31a	; 0xa31a <LBGetNextFrame>
    e726:	40 e0       	ldi	r20, 0x00	; 0
    e728:	bc 01       	movw	r22, r24
    e72a:	86 e0       	ldi	r24, 0x06	; 6
    e72c:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <LBMapSprite>
			LBMoveSprite(PLAYER_SHOT_SLOT, ship_x, ship_y, 4, 2);
    e730:	02 e0       	ldi	r16, 0x02	; 2
    e732:	24 e0       	ldi	r18, 0x04	; 4
    e734:	4c 2f       	mov	r20, r28
    e736:	6e 2d       	mov	r22, r14
    e738:	86 e0       	ldi	r24, 0x06	; 6
    e73a:	0e 94 45 53 	call	0xa68a	; 0xa68a <LBMoveSprite>
			ship_y += ship_increment;
    e73e:	cd 0f       	add	r28, r29
			if (ship_y == 0)
    e740:	99 f4       	brne	.+38     	; 0xe768 <update_level+0x222>
			{
				clear_sprites(6, 8);
    e742:	68 e0       	ldi	r22, 0x08	; 8
    e744:	86 e0       	ldi	r24, 0x06	; 6
    e746:	0e 94 47 69 	call	0xd28e	; 0xd28e <clear_sprites>
				LBRotateSprites();
    e74a:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
				tally_score((char*) strLevelClear, 100);
    e74e:	64 e6       	ldi	r22, 0x64	; 100
    e750:	70 e0       	ldi	r23, 0x00	; 0
    e752:	89 e7       	ldi	r24, 0x79	; 121
    e754:	9b e0       	ldi	r25, 0x0B	; 11
    e756:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <tally_score>
				planet_transition(game.current_level_index+1, -1, 26, 3, 0);
    e75a:	80 91 ce 0d 	lds	r24, 0x0DCE
    e75e:	00 e0       	ldi	r16, 0x00	; 0
    e760:	23 e0       	ldi	r18, 0x03	; 3
    e762:	4a e1       	ldi	r20, 0x1A	; 26
    e764:	6f ef       	ldi	r22, 0xFF	; 255
    e766:	1c c0       	rjmp	.+56     	; 0xe7a0 <update_level+0x25a>
				break;
			}
			LBRotateSprites();
    e768:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
		}
    e76c:	c8 cf       	rjmp	.-112    	; 0xe6fe <update_level+0x1b8>
	}
	else if (game.level_ended && is_space())
	{
		if (game.current_level_index == 9) {
    e76e:	80 91 ce 0d 	lds	r24, 0x0DCE
    e772:	89 30       	cpi	r24, 0x09	; 9
    e774:	49 f4       	brne	.+18     	; 0xe788 <update_level+0x242>
			tally_score((char*) strLevelClear, 500);
    e776:	64 ef       	ldi	r22, 0xF4	; 244
    e778:	71 e0       	ldi	r23, 0x01	; 1
    e77a:	89 e7       	ldi	r24, 0x79	; 121
    e77c:	9b e0       	ldi	r25, 0x0B	; 11
    e77e:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <tally_score>
			congratulations();
    e782:	0e 94 79 69 	call	0xd2f2	; 0xd2f2 <congratulations>
    e786:	2e c0       	rjmp	.+92     	; 0xe7e4 <update_level+0x29e>
			exit_game();
			return 1;
		} else {
			tally_score((char*) strLevelClear, 100);
    e788:	64 e6       	ldi	r22, 0x64	; 100
    e78a:	70 e0       	ldi	r23, 0x00	; 0
    e78c:	89 e7       	ldi	r24, 0x79	; 121
    e78e:	9b e0       	ldi	r25, 0x0B	; 11
    e790:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <tally_score>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
    e794:	80 91 ce 0d 	lds	r24, 0x0DCE
    e798:	07 ec       	ldi	r16, 0xC7	; 199
    e79a:	2d ef       	ldi	r18, 0xFD	; 253
    e79c:	4c e1       	ldi	r20, 0x1C	; 28
    e79e:	61 e0       	ldi	r22, 0x01	; 1
    e7a0:	8f 5f       	subi	r24, 0xFF	; 255
    e7a2:	0e 94 6c 6b 	call	0xd6d8	; 0xd6d8 <planet_transition>
		}
	}
	if (game.selection == DEMO_SELECTED) 
    e7a6:	80 91 d2 0d 	lds	r24, 0x0DD2
    e7aa:	82 30       	cpi	r24, 0x02	; 2
    e7ac:	11 f0       	breq	.+4      	; 0xe7b2 <update_level+0x26c>
			demo_counter = 0;
			exit_game();
			return 1;
		}
	}
	return 0;
    e7ae:	80 e0       	ldi	r24, 0x00	; 0
    e7b0:	1c c0       	rjmp	.+56     	; 0xe7ea <update_level+0x2a4>
			planet_transition(game.current_level_index+1, 1, 28, -3, 199);
		}
	}
	if (game.selection == DEMO_SELECTED) 
	{
		demo_counter++;
    e7b2:	80 91 f9 0c 	lds	r24, 0x0CF9
    e7b6:	90 91 fa 0c 	lds	r25, 0x0CFA
    e7ba:	01 96       	adiw	r24, 0x01	; 1
    e7bc:	90 93 fa 0c 	sts	0x0CFA, r25
    e7c0:	80 93 f9 0c 	sts	0x0CF9, r24
		if (ReadJoypad(0) || (demo_counter >= DEMO_LENGTH))
    e7c4:	80 e0       	ldi	r24, 0x00	; 0
    e7c6:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <ReadJoypad>
    e7ca:	89 2b       	or	r24, r25
    e7cc:	39 f4       	brne	.+14     	; 0xe7dc <update_level+0x296>
    e7ce:	80 91 f9 0c 	lds	r24, 0x0CF9
    e7d2:	90 91 fa 0c 	lds	r25, 0x0CFA
    e7d6:	84 38       	cpi	r24, 0x84	; 132
    e7d8:	93 40       	sbci	r25, 0x03	; 3
    e7da:	48 f3       	brcs	.-46     	; 0xe7ae <update_level+0x268>
		{
			demo_counter = 0;
    e7dc:	10 92 fa 0c 	sts	0x0CFA, r1
    e7e0:	10 92 f9 0c 	sts	0x0CF9, r1
			exit_game();
    e7e4:	0e 94 7f 6d 	call	0xdafe	; 0xdafe <exit_game>
			return 1;
    e7e8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
	
}
    e7ea:	df 91       	pop	r29
    e7ec:	cf 91       	pop	r28
    e7ee:	0f 91       	pop	r16
    e7f0:	ff 90       	pop	r15
    e7f2:	ef 90       	pop	r14
    e7f4:	df 90       	pop	r13
    e7f6:	cf 90       	pop	r12
    e7f8:	08 95       	ret

0000e7fa <update_pause>:
	}
	high_score_counter++;
}

void update_pause()
{
    e7fa:	ef 92       	push	r14
    e7fc:	ff 92       	push	r15
    e7fe:	0f 93       	push	r16
    e800:	1f 93       	push	r17
    e802:	cf 93       	push	r28
    e804:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
    e806:	c0 91 b2 0c 	lds	r28, 0x0CB2
	u8 y = Screen.scrollY / 8;
    e80a:	00 91 b3 0c 	lds	r16, 0x0CB3
	
	if (game.player.controls.pressed & BTN_START)
    e80e:	80 91 4d 0e 	lds	r24, 0x0E4D
    e812:	83 ff       	sbrs	r24, 3
    e814:	63 c0       	rjmp	.+198    	; 0xe8dc <update_pause+0xe2>
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e816:	06 95       	lsr	r16
    e818:	06 95       	lsr	r16
    e81a:	06 95       	lsr	r16
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e81c:	10 e0       	ldi	r17, 0x00	; 0
	high_score_counter++;
}

void update_pause()
{
	u8 x = Screen.scrollX / 8;
    e81e:	c6 95       	lsr	r28
    e820:	c6 95       	lsr	r28
    e822:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	
	if (game.player.controls.pressed & BTN_START)
	{
		DrawMap2((x+8)%32, (y+6)%30, map_canvas);
    e824:	d0 e0       	ldi	r29, 0x00	; 0
    e826:	c8 01       	movw	r24, r16
    e828:	06 96       	adiw	r24, 0x06	; 6
    e82a:	2e e1       	ldi	r18, 0x1E	; 30
    e82c:	e2 2e       	mov	r14, r18
    e82e:	f1 2c       	mov	r15, r1
    e830:	b7 01       	movw	r22, r14
    e832:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    e836:	9e 01       	movw	r18, r28
    e838:	28 5f       	subi	r18, 0xF8	; 248
    e83a:	3f 4f       	sbci	r19, 0xFF	; 255
    e83c:	47 ec       	ldi	r20, 0xC7	; 199
    e83e:	50 e6       	ldi	r21, 0x60	; 96
    e840:	68 2f       	mov	r22, r24
    e842:	82 2f       	mov	r24, r18
    e844:	8f 71       	andi	r24, 0x1F	; 31
    e846:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
		LBPrint((x+13)%32, (y+9)%30, (char*) strPaused);
    e84a:	c8 01       	movw	r24, r16
    e84c:	09 96       	adiw	r24, 0x09	; 9
    e84e:	b7 01       	movw	r22, r14
    e850:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    e854:	9e 01       	movw	r18, r28
    e856:	23 5f       	subi	r18, 0xF3	; 243
    e858:	3f 4f       	sbci	r19, 0xFF	; 255
    e85a:	45 e8       	ldi	r20, 0x85	; 133
    e85c:	5b e0       	ldi	r21, 0x0B	; 11
    e85e:	68 2f       	mov	r22, r24
    e860:	82 2f       	mov	r24, r18
    e862:	8f 71       	andi	r24, 0x1F	; 31
    e864:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
		LBPrint((x+10)%32, (y+12)%30, (char*) strExitGame);
    e868:	c8 01       	movw	r24, r16
    e86a:	0c 96       	adiw	r24, 0x0c	; 12
    e86c:	b7 01       	movw	r22, r14
    e86e:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    e872:	2a 96       	adiw	r28, 0x0a	; 10
    e874:	4b e8       	ldi	r20, 0x8B	; 139
    e876:	5b e0       	ldi	r21, 0x0B	; 11
    e878:	68 2f       	mov	r22, r24
    e87a:	8c 2f       	mov	r24, r28
    e87c:	8f 71       	andi	r24, 0x1F	; 31
    e87e:	0e 94 1e 52 	call	0xa43c	; 0xa43c <LBPrint>
		hide_sprites(0, MAX_EXTENDED_SPRITES);
    e882:	64 e1       	ldi	r22, 0x14	; 20
    e884:	80 e0       	ldi	r24, 0x00	; 0
    e886:	0e 94 9f 6a 	call	0xd53e	; 0xd53e <hide_sprites>
		LBRotateSprites();
    e88a:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
		while (1)
		{
			WaitVsync(1);
    e88e:	81 e0       	ldi	r24, 0x01	; 1
    e890:	90 e0       	ldi	r25, 0x00	; 0
    e892:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
			LBGetJoyPadState(&game.player.controls, 0);
    e896:	60 e0       	ldi	r22, 0x00	; 0
    e898:	8d e4       	ldi	r24, 0x4D	; 77
    e89a:	9e e0       	ldi	r25, 0x0E	; 14
    e89c:	0e 94 b3 51 	call	0xa366	; 0xa366 <LBGetJoyPadState>
			if (game.player.controls.pressed & BTN_START)
    e8a0:	80 91 4d 0e 	lds	r24, 0x0E4D
    e8a4:	90 91 4e 0e 	lds	r25, 0x0E4E
    e8a8:	83 ff       	sbrs	r24, 3
    e8aa:	08 c0       	rjmp	.+16     	; 0xe8bc <update_pause+0xc2>
				exit_game();
				break;
			}
		}
	}
}
    e8ac:	df 91       	pop	r29
    e8ae:	cf 91       	pop	r28
    e8b0:	1f 91       	pop	r17
    e8b2:	0f 91       	pop	r16
    e8b4:	ff 90       	pop	r15
    e8b6:	ef 90       	pop	r14
		{
			WaitVsync(1);
			LBGetJoyPadState(&game.player.controls, 0);
			if (game.player.controls.pressed & BTN_START)
			{
				render_camera_view();
    e8b8:	0c 94 b9 5c 	jmp	0xb972	; 0xb972 <render_camera_view>
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
    e8bc:	91 ff       	sbrs	r25, 1
    e8be:	e7 cf       	rjmp	.-50     	; 0xe88e <update_pause+0x94>
			{
				tally_score((char*)strGameOver, 0);
    e8c0:	60 e0       	ldi	r22, 0x00	; 0
    e8c2:	70 e0       	ldi	r23, 0x00	; 0
    e8c4:	89 e6       	ldi	r24, 0x69	; 105
    e8c6:	9b e0       	ldi	r25, 0x0B	; 11
    e8c8:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <tally_score>
				exit_game();
				break;
			}
		}
	}
}
    e8cc:	df 91       	pop	r29
    e8ce:	cf 91       	pop	r28
    e8d0:	1f 91       	pop	r17
    e8d2:	0f 91       	pop	r16
    e8d4:	ff 90       	pop	r15
    e8d6:	ef 90       	pop	r14
				break;
			}
			else if (game.player.controls.pressed & BTN_X)
			{
				tally_score((char*)strGameOver, 0);
				exit_game();
    e8d8:	0c 94 7f 6d 	jmp	0xdafe	; 0xdafe <exit_game>
				break;
			}
		}
	}
}
    e8dc:	df 91       	pop	r29
    e8de:	cf 91       	pop	r28
    e8e0:	1f 91       	pop	r17
    e8e2:	0f 91       	pop	r16
    e8e4:	ff 90       	pop	r15
    e8e6:	ef 90       	pop	r14
    e8e8:	08 95       	ret

0000e8ea <challenge>:
	game.time = 0;
	LBWaitSeconds(2);
}

void challenge()
{
    e8ea:	cf 92       	push	r12
    e8ec:	df 92       	push	r13
    e8ee:	ff 92       	push	r15
    e8f0:	0f 93       	push	r16
    e8f2:	1f 93       	push	r17
    e8f4:	cf 93       	push	r28
    e8f6:	df 93       	push	r29
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e8f8:	20 91 ce 0d 	lds	r18, 0x0DCE
    e8fc:	f2 2e       	mov	r15, r18
    e8fe:	f6 94       	lsr	r15
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
    e900:	ef ea       	ldi	r30, 0xAF	; 175
    e902:	fc e0       	ldi	r31, 0x0C	; 12
    e904:	84 81       	ldd	r24, Z+4	; 0x04
    e906:	86 95       	lsr	r24
    e908:	86 95       	lsr	r24
    e90a:	86 95       	lsr	r24
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e90c:	08 2f       	mov	r16, r24
    e90e:	10 e0       	ldi	r17, 0x00	; 0
	LBWaitSeconds(2);
}

void challenge()
{
	u8 x = Screen.scrollX / 8;
    e910:	c3 81       	ldd	r28, Z+3	; 0x03
    e912:	c6 95       	lsr	r28
    e914:	c6 95       	lsr	r28
    e916:	c6 95       	lsr	r28
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
    e918:	d0 e0       	ldi	r29, 0x00	; 0
    e91a:	c8 01       	movw	r24, r16
    e91c:	06 96       	adiw	r24, 0x06	; 6
    e91e:	2e e1       	ldi	r18, 0x1E	; 30
    e920:	c2 2e       	mov	r12, r18
    e922:	d1 2c       	mov	r13, r1
    e924:	b6 01       	movw	r22, r12
    e926:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    e92a:	9e 01       	movw	r18, r28
    e92c:	29 5f       	subi	r18, 0xF9	; 249
    e92e:	3f 4f       	sbci	r19, 0xFF	; 255
    e930:	45 e6       	ldi	r20, 0x65	; 101
    e932:	50 e6       	ldi	r21, 0x60	; 96
    e934:	68 2f       	mov	r22, r24
    e936:	82 2f       	mov	r24, r18
    e938:	8f 71       	andi	r24, 0x1F	; 31
    e93a:	0e 94 5c 50 	call	0xa0b8	; 0xa0b8 <DrawMap>
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e93e:	c8 01       	movw	r24, r16
    e940:	09 96       	adiw	r24, 0x09	; 9
    e942:	b6 01       	movw	r22, r12
    e944:	0e 94 f6 75 	call	0xebec	; 0xebec <__divmodhi4>
    e948:	be 01       	movw	r22, r28
    e94a:	68 5f       	subi	r22, 0xF8	; 248
    e94c:	7f 4f       	sbci	r23, 0xFF	; 255
    e94e:	6f 71       	andi	r22, 0x1F	; 31
    e950:	77 27       	eor	r23, r23
void challenge()
{
	u8 x = Screen.scrollX / 8;
	u8 y = Screen.scrollY / 8;
	u16 counter = 0;
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
    e952:	93 e2       	ldi	r25, 0x23	; 35
    e954:	f9 9e       	mul	r15, r25
    e956:	90 01       	movw	r18, r0
    e958:	11 24       	eor	r1, r1
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
    e95a:	48 2f       	mov	r20, r24
    e95c:	c9 01       	movw	r24, r18
    e95e:	8b 5a       	subi	r24, 0xAB	; 171
    e960:	96 4f       	sbci	r25, 0xF6	; 246
    e962:	0e 94 c5 6a 	call	0xd58a	; 0xd58a <stream_text_anywhere>
	LBWaitSeconds(3);
    e966:	83 e0       	ldi	r24, 0x03	; 3
    e968:	0e 94 e4 52 	call	0xa5c8	; 0xa5c8 <LBWaitSeconds>
	game.boss.active = 1;
    e96c:	81 e0       	ldi	r24, 0x01	; 1
    e96e:	80 93 61 0e 	sts	0x0E61, r24
	render_camera_view();
}
    e972:	df 91       	pop	r29
    e974:	cf 91       	pop	r28
    e976:	1f 91       	pop	r17
    e978:	0f 91       	pop	r16
    e97a:	ff 90       	pop	r15
    e97c:	df 90       	pop	r13
    e97e:	cf 90       	pop	r12
	char* challenge_pointer = (char*)strChallenge + (game.current_level_index/2)*CHALLENGE_LENGTH;
	DrawMap2((x+7)%32, (y+6)%30, map_dialog);
	stream_text_anywhere((const char*)challenge_pointer, (x+8)%32, (y+9)%30);
	LBWaitSeconds(3);
	game.boss.active = 1;
	render_camera_view();
    e980:	0c 94 b9 5c 	jmp	0xb972	; 0xb972 <render_camera_view>

0000e984 <update_player_ai>:
}

void update_player_ai(Player* player) 
{	 
    e984:	cf 93       	push	r28
    e986:	df 93       	push	r29
    e988:	fc 01       	movw	r30, r24
	 if (player->ai_flags == AI_NOT_READY)
    e98a:	81 85       	ldd	r24, Z+9	; 0x09
    e98c:	81 11       	cpse	r24, r1
    e98e:	0a c0       	rjmp	.+20     	; 0xe9a4 <update_player_ai+0x20>
	 {
		 player->controls.held = BTN_LEFT;
    e990:	df 01       	movw	r26, r30
    e992:	a8 58       	subi	r26, 0x88	; 136
    e994:	bf 4f       	sbci	r27, 0xFF	; 255
    e996:	80 e4       	ldi	r24, 0x40	; 64
    e998:	90 e0       	ldi	r25, 0x00	; 0
    e99a:	8d 93       	st	X+, r24
    e99c:	9c 93       	st	X, r25
		 player->ai_flags = AI_READY;
    e99e:	81 e0       	ldi	r24, 0x01	; 1
    e9a0:	81 87       	std	Z+9, r24	; 0x09
    e9a2:	68 c0       	rjmp	.+208    	; 0xea74 <update_player_ai+0xf0>
	 }
	 else if (player->ai_flags & AI_READY)
    e9a4:	80 ff       	sbrs	r24, 0
    e9a6:	28 c0       	rjmp	.+80     	; 0xe9f8 <update_player_ai+0x74>
void LBResetJoyPadState(JoyPadState* p)
/*
 * Get the current joy pad button state for index controller
 */
{
	p->held = 0;
    e9a8:	df 01       	movw	r26, r30
    e9aa:	ac 58       	subi	r26, 0x8C	; 140
    e9ac:	bf 4f       	sbci	r27, 0xFF	; 255
    e9ae:	15 96       	adiw	r26, 0x05	; 5
    e9b0:	1c 92       	st	X, r1
    e9b2:	1e 92       	st	-X, r1
    e9b4:	14 97       	sbiw	r26, 0x04	; 4
	p->pressed = 0;
    e9b6:	11 96       	adiw	r26, 0x01	; 1
    e9b8:	1c 92       	st	X, r1
    e9ba:	1e 92       	st	-X, r1
	p->released = 0;
    e9bc:	13 96       	adiw	r26, 0x03	; 3
    e9be:	1c 92       	st	X, r1
    e9c0:	1e 92       	st	-X, r1
    e9c2:	12 97       	sbiw	r26, 0x02	; 2
	p->held_cycles = 0;
    e9c4:	16 96       	adiw	r26, 0x06	; 6
    e9c6:	1c 92       	st	X, r1
	 {
		 LBResetJoyPadState(&player->controls);
		 if (game.camera_x/8 + CAMERA_WIDTH >= game.level_width)
    e9c8:	80 91 b9 0d 	lds	r24, 0x0DB9
    e9cc:	90 91 ba 0d 	lds	r25, 0x0DBA
    e9d0:	23 e0       	ldi	r18, 0x03	; 3
    e9d2:	96 95       	lsr	r25
    e9d4:	87 95       	ror	r24
    e9d6:	2a 95       	dec	r18
    e9d8:	e1 f7       	brne	.-8      	; 0xe9d2 <update_player_ai+0x4e>
    e9da:	4c 96       	adiw	r24, 0x1c	; 28
    e9dc:	20 91 c8 0d 	lds	r18, 0x0DC8
    e9e0:	30 e0       	ldi	r19, 0x00	; 0
    e9e2:	82 17       	cp	r24, r18
    e9e4:	93 07       	cpc	r25, r19
    e9e6:	08 f4       	brcc	.+2      	; 0xe9ea <update_player_ai+0x66>
    e9e8:	45 c0       	rjmp	.+138    	; 0xea74 <update_player_ai+0xf0>
    e9ea:	ef 01       	movw	r28, r30
		 {
			 challenge();
    e9ec:	0e 94 75 74 	call	0xe8ea	; 0xe8ea <challenge>
			 player->ai_flags = AI_WALKING;
    e9f0:	82 e0       	ldi	r24, 0x02	; 2
    e9f2:	89 87       	std	Y+9, r24	; 0x09
			 player->controls.held = BTN_LEFT;
    e9f4:	fe 01       	movw	r30, r28
    e9f6:	38 c0       	rjmp	.+112    	; 0xea68 <update_player_ai+0xe4>
		 }
	 }
	 else if (player->ai_flags & AI_WALKING) 
    e9f8:	81 ff       	sbrs	r24, 1
    e9fa:	3c c0       	rjmp	.+120    	; 0xea74 <update_player_ai+0xf0>
	 {
		 player->controls.pressed = 0;
    e9fc:	df 01       	movw	r26, r30
    e9fe:	ac 58       	subi	r26, 0x8C	; 140
    ea00:	bf 4f       	sbci	r27, 0xFF	; 255
    ea02:	11 96       	adiw	r26, 0x01	; 1
    ea04:	1c 92       	st	X, r1
    ea06:	1e 92       	st	-X, r1
		 if (game.frame_counter % 15 == 0)
    ea08:	80 91 d3 0d 	lds	r24, 0x0DD3
    ea0c:	6f e0       	ldi	r22, 0x0F	; 15
    ea0e:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    ea12:	91 11       	cpse	r25, r1
    ea14:	05 c0       	rjmp	.+10     	; 0xea20 <update_player_ai+0x9c>
		 {
			 player->controls.pressed = BTN_B;
    ea16:	81 e0       	ldi	r24, 0x01	; 1
    ea18:	90 e0       	ldi	r25, 0x00	; 0
    ea1a:	11 96       	adiw	r26, 0x01	; 1
    ea1c:	9c 93       	st	X, r25
    ea1e:	8e 93       	st	-X, r24
		 }
		 if (player->shared.x >= game.camera_x+(CAMERA_WIDTH*8/2-40) && player->shared.x <= game.camera_x+(CAMERA_WIDTH*8/2+40))
    ea20:	20 81       	ld	r18, Z
    ea22:	31 81       	ldd	r19, Z+1	; 0x01
    ea24:	80 91 b9 0d 	lds	r24, 0x0DB9
    ea28:	90 91 ba 0d 	lds	r25, 0x0DBA
    ea2c:	ac 01       	movw	r20, r24
    ea2e:	48 5b       	subi	r20, 0xB8	; 184
    ea30:	5f 4f       	sbci	r21, 0xFF	; 255
    ea32:	24 17       	cp	r18, r20
    ea34:	35 07       	cpc	r19, r21
    ea36:	58 f0       	brcs	.+22     	; 0xea4e <update_player_ai+0xca>
    ea38:	40 5b       	subi	r20, 0xB0	; 176
    ea3a:	5f 4f       	sbci	r21, 0xFF	; 255
    ea3c:	42 17       	cp	r20, r18
    ea3e:	53 07       	cpc	r21, r19
    ea40:	30 f0       	brcs	.+12     	; 0xea4e <update_player_ai+0xca>
		 {
			 player->controls.pressed |= BTN_A;
    ea42:	4d 91       	ld	r20, X+
    ea44:	5c 91       	ld	r21, X
    ea46:	11 97       	sbiw	r26, 0x01	; 1
    ea48:	51 60       	ori	r21, 0x01	; 1
    ea4a:	4d 93       	st	X+, r20
    ea4c:	5c 93       	st	X, r21
		 }
		 if (player->shared.x <= game.camera_x)
    ea4e:	82 17       	cp	r24, r18
    ea50:	93 07       	cpc	r25, r19
    ea52:	28 f0       	brcs	.+10     	; 0xea5e <update_player_ai+0xda>
		 {
			 player->controls.held = BTN_RIGHT;
    ea54:	e8 58       	subi	r30, 0x88	; 136
    ea56:	ff 4f       	sbci	r31, 0xFF	; 255
    ea58:	80 e8       	ldi	r24, 0x80	; 128
    ea5a:	90 e0       	ldi	r25, 0x00	; 0
    ea5c:	09 c0       	rjmp	.+18     	; 0xea70 <update_player_ai+0xec>
		 }
		 else if (player->shared.x >= game.camera_x+(CAMERA_WIDTH-2)*8)
    ea5e:	80 53       	subi	r24, 0x30	; 48
    ea60:	9f 4f       	sbci	r25, 0xFF	; 255
    ea62:	28 17       	cp	r18, r24
    ea64:	39 07       	cpc	r19, r25
    ea66:	30 f0       	brcs	.+12     	; 0xea74 <update_player_ai+0xf0>
		 {
			 player->controls.held = BTN_LEFT;
    ea68:	e8 58       	subi	r30, 0x88	; 136
    ea6a:	ff 4f       	sbci	r31, 0xFF	; 255
    ea6c:	80 e4       	ldi	r24, 0x40	; 64
    ea6e:	90 e0       	ldi	r25, 0x00	; 0
    ea70:	91 83       	std	Z+1, r25	; 0x01
    ea72:	80 83       	st	Z, r24
		 }
	 }
}
    ea74:	df 91       	pop	r29
    ea76:	cf 91       	pop	r28
    ea78:	08 95       	ret

0000ea7a <main>:
#endif

int main()
{
	// Initialize
	GetPrngNumber(GetTrueRandomSeed());
    ea7a:	0e 94 41 42 	call	0x8482	; 0x8482 <GetTrueRandomSeed>
    ea7e:	0e 94 c1 43 	call	0x8782	; 0x8782 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    ea82:	89 e5       	ldi	r24, 0x59	; 89
    ea84:	9d e1       	ldi	r25, 0x1D	; 29
    ea86:	0e 94 9b 44 	call	0x8936	; 0x8936 <InitMusicPlayer>
	ClearVram();
    ea8a:	0e 94 c9 41 	call	0x8392	; 0x8392 <ClearVram>
	SetMasterVolume(0x05);
    ea8e:	85 e0       	ldi	r24, 0x05	; 5
    ea90:	0e 94 53 48 	call	0x90a6	; 0x90a6 <SetMasterVolume>
	SetTileTable(tiles_data);
    ea94:	84 e4       	ldi	r24, 0x44	; 68
    ea96:	98 e3       	ldi	r25, 0x38	; 56
    ea98:	0e 94 e4 41 	call	0x83c8	; 0x83c8 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    ea9c:	88 ed       	ldi	r24, 0xD8	; 216
    ea9e:	9e e1       	ldi	r25, 0x1E	; 30
    eaa0:	0e 94 c4 41 	call	0x8388	; 0x8388 <SetSpritesTileTable>
	p_prev[index] = p->held;
}

void LBSetFontTilesMap(char* tiles_map)
{
	font_tiles_map = tiles_map;
    eaa4:	84 e0       	ldi	r24, 0x04	; 4
    eaa6:	90 e6       	ldi	r25, 0x60	; 96
    eaa8:	90 93 8c 0d 	sts	0x0D8C, r25
    eaac:	80 93 8b 0d 	sts	0x0D8B, r24
	LBSetFontTilesMap((char*) map_font);
	init_default_high_scores();
    eab0:	0e 94 bb 53 	call	0xa776	; 0xa776 <init_default_high_scores>
#if DEBUG_MODE
	prepare_debugging();
#else
	load_splash();
    eab4:	0e 94 3a 6c 	call	0xd874	; 0xd874 <load_splash>
#endif
	while (1)
	{
		WaitVsync(1);
    eab8:	81 e0       	ldi	r24, 0x01	; 1
    eaba:	90 e0       	ldi	r25, 0x00	; 0
    eabc:	0e 94 c5 50 	call	0xa18a	; 0xa18a <WaitVsync>
		LBGetJoyPadState(&game.player.controls, 0);
    eac0:	60 e0       	ldi	r22, 0x00	; 0
    eac2:	8d e4       	ldi	r24, 0x4D	; 77
    eac4:	9e e0       	ldi	r25, 0x0E	; 14
    eac6:	0e 94 b3 51 	call	0xa366	; 0xa366 <LBGetJoyPadState>
		if (game.current_screen == LEVEL)
    eaca:	80 91 cd 0d 	lds	r24, 0x0DCD
    eace:	82 30       	cpi	r24, 0x02	; 2
    ead0:	09 f0       	breq	.+2      	; 0xead4 <main+0x5a>
    ead2:	52 c0       	rjmp	.+164    	; 0xeb78 <main+0xfe>
		{
			if (update_level()) continue;
    ead4:	0e 94 a3 72 	call	0xe546	; 0xe546 <update_level>
    ead8:	81 11       	cpse	r24, r1
    eada:	ee cf       	rjmp	.-36     	; 0xeab8 <main+0x3e>
			if (update_player(&game.player, PLAYER_SLOT))
    eadc:	60 e0       	ldi	r22, 0x00	; 0
    eade:	89 ed       	ldi	r24, 0xD9	; 217
    eae0:	9d e0       	ldi	r25, 0x0D	; 13
    eae2:	0e 94 70 70 	call	0xe0e0	; 0xe0e0 <update_player>
    eae6:	88 23       	and	r24, r24
    eae8:	e9 f0       	breq	.+58     	; 0xeb24 <main+0xaa>
			{
				update_shot(&game.player, PLAYER_SHOT_SLOT);
    eaea:	66 e0       	ldi	r22, 0x06	; 6
    eaec:	89 ed       	ldi	r24, 0xD9	; 217
    eaee:	9d e0       	ldi	r25, 0x0D	; 13
    eaf0:	0e 94 53 5f 	call	0xbea6	; 0xbea6 <update_shot>
				update_enemies();
    eaf4:	0e 94 ee 65 	call	0xcbdc	; 0xcbdc <update_enemies>
				update_enemy_shots();
    eaf8:	0e 94 5b 66 	call	0xccb6	; 0xccb6 <update_enemy_shots>
				animate_enemies();
    eafc:	0e 94 fb 66 	call	0xcdf6	; 0xcdf6 <animate_enemies>
				animate_enemy_shots();
    eb00:	0e 94 18 68 	call	0xd030	; 0xd030 <animate_enemy_shots>
				animate_player(&game.player, &game.boss, PLAYER_SLOT);
    eb04:	40 e0       	ldi	r20, 0x00	; 0
    eb06:	64 e5       	ldi	r22, 0x54	; 84
    eb08:	7e e0       	ldi	r23, 0x0E	; 14
    eb0a:	89 ed       	ldi	r24, 0xD9	; 217
    eb0c:	9d e0       	ldi	r25, 0x0D	; 13
    eb0e:	0e 94 ea 64 	call	0xc9d4	; 0xc9d4 <animate_player>
				animate_shot(&game.player, &game.boss, PLAYER_SHOT_SLOT);
    eb12:	46 e0       	ldi	r20, 0x06	; 6
    eb14:	64 e5       	ldi	r22, 0x54	; 84
    eb16:	7e e0       	ldi	r23, 0x0E	; 14
    eb18:	89 ed       	ldi	r24, 0xD9	; 217
    eb1a:	9d e0       	ldi	r25, 0x0D	; 13
    eb1c:	0e 94 c7 62 	call	0xc58e	; 0xc58e <animate_shot>
				update_pause();
    eb20:	0e 94 fd 73 	call	0xe7fa	; 0xe7fa <update_pause>
			}
			if (!is_space() && (game.camera_x >= BOSS_UPDATE_THRESHOLD) && update_player(&game.boss, BOSS_SLOT))
    eb24:	0e 94 b7 53 	call	0xa76e	; 0xa76e <is_space>
    eb28:	81 11       	cpse	r24, r1
    eb2a:	2f c0       	rjmp	.+94     	; 0xeb8a <main+0x110>
    eb2c:	80 91 b9 0d 	lds	r24, 0x0DB9
    eb30:	90 91 ba 0d 	lds	r25, 0x0DBA
    eb34:	88 3f       	cpi	r24, 0xF8	; 248
    eb36:	96 40       	sbci	r25, 0x06	; 6
    eb38:	40 f1       	brcs	.+80     	; 0xeb8a <main+0x110>
    eb3a:	69 e0       	ldi	r22, 0x09	; 9
    eb3c:	84 e5       	ldi	r24, 0x54	; 84
    eb3e:	9e e0       	ldi	r25, 0x0E	; 14
    eb40:	0e 94 70 70 	call	0xe0e0	; 0xe0e0 <update_player>
    eb44:	88 23       	and	r24, r24
    eb46:	09 f1       	breq	.+66     	; 0xeb8a <main+0x110>
			{
				update_shot(&game.boss, BOSS_SHOT_SLOT);
    eb48:	6f e0       	ldi	r22, 0x0F	; 15
    eb4a:	84 e5       	ldi	r24, 0x54	; 84
    eb4c:	9e e0       	ldi	r25, 0x0E	; 14
    eb4e:	0e 94 53 5f 	call	0xbea6	; 0xbea6 <update_shot>
				animate_player(&game.boss, &game.player, BOSS_SLOT);
    eb52:	49 e0       	ldi	r20, 0x09	; 9
    eb54:	69 ed       	ldi	r22, 0xD9	; 217
    eb56:	7d e0       	ldi	r23, 0x0D	; 13
    eb58:	84 e5       	ldi	r24, 0x54	; 84
    eb5a:	9e e0       	ldi	r25, 0x0E	; 14
    eb5c:	0e 94 ea 64 	call	0xc9d4	; 0xc9d4 <animate_player>
				animate_shot(&game.boss, &game.player, BOSS_SHOT_SLOT);
    eb60:	4f e0       	ldi	r20, 0x0F	; 15
    eb62:	69 ed       	ldi	r22, 0xD9	; 217
    eb64:	7d e0       	ldi	r23, 0x0D	; 13
    eb66:	84 e5       	ldi	r24, 0x54	; 84
    eb68:	9e e0       	ldi	r25, 0x0E	; 14
    eb6a:	0e 94 c7 62 	call	0xc58e	; 0xc58e <animate_shot>
				update_player_ai(&game.boss);
    eb6e:	84 e5       	ldi	r24, 0x54	; 84
    eb70:	9e e0       	ldi	r25, 0x0E	; 14
    eb72:	0e 94 c2 74 	call	0xe984	; 0xe984 <update_player_ai>
    eb76:	09 c0       	rjmp	.+18     	; 0xeb8a <main+0x110>
			}
		}
		else if (game.current_screen == SPLASH)
    eb78:	81 11       	cpse	r24, r1
    eb7a:	03 c0       	rjmp	.+6      	; 0xeb82 <main+0x108>
		{
			update_splash();
    eb7c:	0e 94 8f 6d 	call	0xdb1e	; 0xdb1e <update_splash>
    eb80:	04 c0       	rjmp	.+8      	; 0xeb8a <main+0x110>
			
		}
		else if (game.current_screen == HIGH_SCORES)
    eb82:	81 30       	cpi	r24, 0x01	; 1
    eb84:	11 f4       	brne	.+4      	; 0xeb8a <main+0x110>
		{
			update_high_scores();
    eb86:	0e 94 0b 6e 	call	0xdc16	; 0xdc16 <update_high_scores>
			
		}
		LBRotateSprites();
    eb8a:	0e 94 83 53 	call	0xa706	; 0xa706 <LBRotateSprites>
    eb8e:	94 cf       	rjmp	.-216    	; 0xeab8 <main+0x3e>

0000eb90 <__udivmodqi4>:
    eb90:	99 1b       	sub	r25, r25
    eb92:	79 e0       	ldi	r23, 0x09	; 9
    eb94:	04 c0       	rjmp	.+8      	; 0xeb9e <__udivmodqi4_ep>

0000eb96 <__udivmodqi4_loop>:
    eb96:	99 1f       	adc	r25, r25
    eb98:	96 17       	cp	r25, r22
    eb9a:	08 f0       	brcs	.+2      	; 0xeb9e <__udivmodqi4_ep>
    eb9c:	96 1b       	sub	r25, r22

0000eb9e <__udivmodqi4_ep>:
    eb9e:	88 1f       	adc	r24, r24
    eba0:	7a 95       	dec	r23
    eba2:	c9 f7       	brne	.-14     	; 0xeb96 <__udivmodqi4_loop>
    eba4:	80 95       	com	r24
    eba6:	08 95       	ret

0000eba8 <__divmodqi4>:
    eba8:	87 fb       	bst	r24, 7
    ebaa:	08 2e       	mov	r0, r24
    ebac:	06 26       	eor	r0, r22
    ebae:	87 fd       	sbrc	r24, 7
    ebb0:	81 95       	neg	r24
    ebb2:	67 fd       	sbrc	r22, 7
    ebb4:	61 95       	neg	r22
    ebb6:	0e 94 c8 75 	call	0xeb90	; 0xeb90 <__udivmodqi4>
    ebba:	0e f4       	brtc	.+2      	; 0xebbe <__divmodqi4_1>
    ebbc:	91 95       	neg	r25

0000ebbe <__divmodqi4_1>:
    ebbe:	07 fc       	sbrc	r0, 7
    ebc0:	81 95       	neg	r24

0000ebc2 <__divmodqi4_exit>:
    ebc2:	08 95       	ret

0000ebc4 <__udivmodhi4>:
    ebc4:	aa 1b       	sub	r26, r26
    ebc6:	bb 1b       	sub	r27, r27
    ebc8:	51 e1       	ldi	r21, 0x11	; 17
    ebca:	07 c0       	rjmp	.+14     	; 0xebda <__udivmodhi4_ep>

0000ebcc <__udivmodhi4_loop>:
    ebcc:	aa 1f       	adc	r26, r26
    ebce:	bb 1f       	adc	r27, r27
    ebd0:	a6 17       	cp	r26, r22
    ebd2:	b7 07       	cpc	r27, r23
    ebd4:	10 f0       	brcs	.+4      	; 0xebda <__udivmodhi4_ep>
    ebd6:	a6 1b       	sub	r26, r22
    ebd8:	b7 0b       	sbc	r27, r23

0000ebda <__udivmodhi4_ep>:
    ebda:	88 1f       	adc	r24, r24
    ebdc:	99 1f       	adc	r25, r25
    ebde:	5a 95       	dec	r21
    ebe0:	a9 f7       	brne	.-22     	; 0xebcc <__udivmodhi4_loop>
    ebe2:	80 95       	com	r24
    ebe4:	90 95       	com	r25
    ebe6:	bc 01       	movw	r22, r24
    ebe8:	cd 01       	movw	r24, r26
    ebea:	08 95       	ret

0000ebec <__divmodhi4>:
    ebec:	97 fb       	bst	r25, 7
    ebee:	07 2e       	mov	r0, r23
    ebf0:	16 f4       	brtc	.+4      	; 0xebf6 <__divmodhi4+0xa>
    ebf2:	00 94       	com	r0
    ebf4:	07 d0       	rcall	.+14     	; 0xec04 <__divmodhi4_neg1>
    ebf6:	77 fd       	sbrc	r23, 7
    ebf8:	09 d0       	rcall	.+18     	; 0xec0c <__divmodhi4_neg2>
    ebfa:	0e 94 e2 75 	call	0xebc4	; 0xebc4 <__udivmodhi4>
    ebfe:	07 fc       	sbrc	r0, 7
    ec00:	05 d0       	rcall	.+10     	; 0xec0c <__divmodhi4_neg2>
    ec02:	3e f4       	brtc	.+14     	; 0xec12 <__divmodhi4_exit>

0000ec04 <__divmodhi4_neg1>:
    ec04:	90 95       	com	r25
    ec06:	81 95       	neg	r24
    ec08:	9f 4f       	sbci	r25, 0xFF	; 255
    ec0a:	08 95       	ret

0000ec0c <__divmodhi4_neg2>:
    ec0c:	70 95       	com	r23
    ec0e:	61 95       	neg	r22
    ec10:	7f 4f       	sbci	r23, 0xFF	; 255

0000ec12 <__divmodhi4_exit>:
    ec12:	08 95       	ret

0000ec14 <__tablejump2__>:
    ec14:	ee 0f       	add	r30, r30
    ec16:	ff 1f       	adc	r31, r31
    ec18:	05 90       	lpm	r0, Z+
    ec1a:	f4 91       	lpm	r31, Z
    ec1c:	e0 2d       	mov	r30, r0
    ec1e:	09 94       	ijmp

0000ec20 <__subsf3>:
    ec20:	50 58       	subi	r21, 0x80	; 128

0000ec22 <__addsf3>:
    ec22:	bb 27       	eor	r27, r27
    ec24:	aa 27       	eor	r26, r26
    ec26:	0e d0       	rcall	.+28     	; 0xec44 <__addsf3x>
    ec28:	e5 c0       	rjmp	.+458    	; 0xedf4 <__fp_round>
    ec2a:	d6 d0       	rcall	.+428    	; 0xedd8 <__fp_pscA>
    ec2c:	30 f0       	brcs	.+12     	; 0xec3a <__addsf3+0x18>
    ec2e:	db d0       	rcall	.+438    	; 0xede6 <__fp_pscB>
    ec30:	20 f0       	brcs	.+8      	; 0xec3a <__addsf3+0x18>
    ec32:	31 f4       	brne	.+12     	; 0xec40 <__addsf3+0x1e>
    ec34:	9f 3f       	cpi	r25, 0xFF	; 255
    ec36:	11 f4       	brne	.+4      	; 0xec3c <__addsf3+0x1a>
    ec38:	1e f4       	brtc	.+6      	; 0xec40 <__addsf3+0x1e>
    ec3a:	cb c0       	rjmp	.+406    	; 0xedd2 <__fp_nan>
    ec3c:	0e f4       	brtc	.+2      	; 0xec40 <__addsf3+0x1e>
    ec3e:	e0 95       	com	r30
    ec40:	e7 fb       	bst	r30, 7
    ec42:	c1 c0       	rjmp	.+386    	; 0xedc6 <__fp_inf>

0000ec44 <__addsf3x>:
    ec44:	e9 2f       	mov	r30, r25
    ec46:	e7 d0       	rcall	.+462    	; 0xee16 <__fp_split3>
    ec48:	80 f3       	brcs	.-32     	; 0xec2a <__addsf3+0x8>
    ec4a:	ba 17       	cp	r27, r26
    ec4c:	62 07       	cpc	r22, r18
    ec4e:	73 07       	cpc	r23, r19
    ec50:	84 07       	cpc	r24, r20
    ec52:	95 07       	cpc	r25, r21
    ec54:	18 f0       	brcs	.+6      	; 0xec5c <__addsf3x+0x18>
    ec56:	71 f4       	brne	.+28     	; 0xec74 <__addsf3x+0x30>
    ec58:	9e f5       	brtc	.+102    	; 0xecc0 <__addsf3x+0x7c>
    ec5a:	ff c0       	rjmp	.+510    	; 0xee5a <__fp_zero>
    ec5c:	0e f4       	brtc	.+2      	; 0xec60 <__addsf3x+0x1c>
    ec5e:	e0 95       	com	r30
    ec60:	0b 2e       	mov	r0, r27
    ec62:	ba 2f       	mov	r27, r26
    ec64:	a0 2d       	mov	r26, r0
    ec66:	0b 01       	movw	r0, r22
    ec68:	b9 01       	movw	r22, r18
    ec6a:	90 01       	movw	r18, r0
    ec6c:	0c 01       	movw	r0, r24
    ec6e:	ca 01       	movw	r24, r20
    ec70:	a0 01       	movw	r20, r0
    ec72:	11 24       	eor	r1, r1
    ec74:	ff 27       	eor	r31, r31
    ec76:	59 1b       	sub	r21, r25
    ec78:	99 f0       	breq	.+38     	; 0xeca0 <__addsf3x+0x5c>
    ec7a:	59 3f       	cpi	r21, 0xF9	; 249
    ec7c:	50 f4       	brcc	.+20     	; 0xec92 <__addsf3x+0x4e>
    ec7e:	50 3e       	cpi	r21, 0xE0	; 224
    ec80:	68 f1       	brcs	.+90     	; 0xecdc <__addsf3x+0x98>
    ec82:	1a 16       	cp	r1, r26
    ec84:	f0 40       	sbci	r31, 0x00	; 0
    ec86:	a2 2f       	mov	r26, r18
    ec88:	23 2f       	mov	r18, r19
    ec8a:	34 2f       	mov	r19, r20
    ec8c:	44 27       	eor	r20, r20
    ec8e:	58 5f       	subi	r21, 0xF8	; 248
    ec90:	f3 cf       	rjmp	.-26     	; 0xec78 <__addsf3x+0x34>
    ec92:	46 95       	lsr	r20
    ec94:	37 95       	ror	r19
    ec96:	27 95       	ror	r18
    ec98:	a7 95       	ror	r26
    ec9a:	f0 40       	sbci	r31, 0x00	; 0
    ec9c:	53 95       	inc	r21
    ec9e:	c9 f7       	brne	.-14     	; 0xec92 <__addsf3x+0x4e>
    eca0:	7e f4       	brtc	.+30     	; 0xecc0 <__addsf3x+0x7c>
    eca2:	1f 16       	cp	r1, r31
    eca4:	ba 0b       	sbc	r27, r26
    eca6:	62 0b       	sbc	r22, r18
    eca8:	73 0b       	sbc	r23, r19
    ecaa:	84 0b       	sbc	r24, r20
    ecac:	ba f0       	brmi	.+46     	; 0xecdc <__addsf3x+0x98>
    ecae:	91 50       	subi	r25, 0x01	; 1
    ecb0:	a1 f0       	breq	.+40     	; 0xecda <__addsf3x+0x96>
    ecb2:	ff 0f       	add	r31, r31
    ecb4:	bb 1f       	adc	r27, r27
    ecb6:	66 1f       	adc	r22, r22
    ecb8:	77 1f       	adc	r23, r23
    ecba:	88 1f       	adc	r24, r24
    ecbc:	c2 f7       	brpl	.-16     	; 0xecae <__addsf3x+0x6a>
    ecbe:	0e c0       	rjmp	.+28     	; 0xecdc <__addsf3x+0x98>
    ecc0:	ba 0f       	add	r27, r26
    ecc2:	62 1f       	adc	r22, r18
    ecc4:	73 1f       	adc	r23, r19
    ecc6:	84 1f       	adc	r24, r20
    ecc8:	48 f4       	brcc	.+18     	; 0xecdc <__addsf3x+0x98>
    ecca:	87 95       	ror	r24
    eccc:	77 95       	ror	r23
    ecce:	67 95       	ror	r22
    ecd0:	b7 95       	ror	r27
    ecd2:	f7 95       	ror	r31
    ecd4:	9e 3f       	cpi	r25, 0xFE	; 254
    ecd6:	08 f0       	brcs	.+2      	; 0xecda <__addsf3x+0x96>
    ecd8:	b3 cf       	rjmp	.-154    	; 0xec40 <__addsf3+0x1e>
    ecda:	93 95       	inc	r25
    ecdc:	88 0f       	add	r24, r24
    ecde:	08 f0       	brcs	.+2      	; 0xece2 <__addsf3x+0x9e>
    ece0:	99 27       	eor	r25, r25
    ece2:	ee 0f       	add	r30, r30
    ece4:	97 95       	ror	r25
    ece6:	87 95       	ror	r24
    ece8:	08 95       	ret

0000ecea <__fixsfsi>:
    ecea:	04 d0       	rcall	.+8      	; 0xecf4 <__fixunssfsi>
    ecec:	68 94       	set
    ecee:	b1 11       	cpse	r27, r1
    ecf0:	b5 c0       	rjmp	.+362    	; 0xee5c <__fp_szero>
    ecf2:	08 95       	ret

0000ecf4 <__fixunssfsi>:
    ecf4:	98 d0       	rcall	.+304    	; 0xee26 <__fp_splitA>
    ecf6:	88 f0       	brcs	.+34     	; 0xed1a <__fixunssfsi+0x26>
    ecf8:	9f 57       	subi	r25, 0x7F	; 127
    ecfa:	90 f0       	brcs	.+36     	; 0xed20 <__fixunssfsi+0x2c>
    ecfc:	b9 2f       	mov	r27, r25
    ecfe:	99 27       	eor	r25, r25
    ed00:	b7 51       	subi	r27, 0x17	; 23
    ed02:	a0 f0       	brcs	.+40     	; 0xed2c <__fixunssfsi+0x38>
    ed04:	d1 f0       	breq	.+52     	; 0xed3a <__fixunssfsi+0x46>
    ed06:	66 0f       	add	r22, r22
    ed08:	77 1f       	adc	r23, r23
    ed0a:	88 1f       	adc	r24, r24
    ed0c:	99 1f       	adc	r25, r25
    ed0e:	1a f0       	brmi	.+6      	; 0xed16 <__fixunssfsi+0x22>
    ed10:	ba 95       	dec	r27
    ed12:	c9 f7       	brne	.-14     	; 0xed06 <__fixunssfsi+0x12>
    ed14:	12 c0       	rjmp	.+36     	; 0xed3a <__fixunssfsi+0x46>
    ed16:	b1 30       	cpi	r27, 0x01	; 1
    ed18:	81 f0       	breq	.+32     	; 0xed3a <__fixunssfsi+0x46>
    ed1a:	9f d0       	rcall	.+318    	; 0xee5a <__fp_zero>
    ed1c:	b1 e0       	ldi	r27, 0x01	; 1
    ed1e:	08 95       	ret
    ed20:	9c c0       	rjmp	.+312    	; 0xee5a <__fp_zero>
    ed22:	67 2f       	mov	r22, r23
    ed24:	78 2f       	mov	r23, r24
    ed26:	88 27       	eor	r24, r24
    ed28:	b8 5f       	subi	r27, 0xF8	; 248
    ed2a:	39 f0       	breq	.+14     	; 0xed3a <__fixunssfsi+0x46>
    ed2c:	b9 3f       	cpi	r27, 0xF9	; 249
    ed2e:	cc f3       	brlt	.-14     	; 0xed22 <__fixunssfsi+0x2e>
    ed30:	86 95       	lsr	r24
    ed32:	77 95       	ror	r23
    ed34:	67 95       	ror	r22
    ed36:	b3 95       	inc	r27
    ed38:	d9 f7       	brne	.-10     	; 0xed30 <__fixunssfsi+0x3c>
    ed3a:	3e f4       	brtc	.+14     	; 0xed4a <__fixunssfsi+0x56>
    ed3c:	90 95       	com	r25
    ed3e:	80 95       	com	r24
    ed40:	70 95       	com	r23
    ed42:	61 95       	neg	r22
    ed44:	7f 4f       	sbci	r23, 0xFF	; 255
    ed46:	8f 4f       	sbci	r24, 0xFF	; 255
    ed48:	9f 4f       	sbci	r25, 0xFF	; 255
    ed4a:	08 95       	ret

0000ed4c <__floatunsisf>:
    ed4c:	e8 94       	clt
    ed4e:	09 c0       	rjmp	.+18     	; 0xed62 <__floatsisf+0x12>

0000ed50 <__floatsisf>:
    ed50:	97 fb       	bst	r25, 7
    ed52:	3e f4       	brtc	.+14     	; 0xed62 <__floatsisf+0x12>
    ed54:	90 95       	com	r25
    ed56:	80 95       	com	r24
    ed58:	70 95       	com	r23
    ed5a:	61 95       	neg	r22
    ed5c:	7f 4f       	sbci	r23, 0xFF	; 255
    ed5e:	8f 4f       	sbci	r24, 0xFF	; 255
    ed60:	9f 4f       	sbci	r25, 0xFF	; 255
    ed62:	99 23       	and	r25, r25
    ed64:	a9 f0       	breq	.+42     	; 0xed90 <__floatsisf+0x40>
    ed66:	f9 2f       	mov	r31, r25
    ed68:	96 e9       	ldi	r25, 0x96	; 150
    ed6a:	bb 27       	eor	r27, r27
    ed6c:	93 95       	inc	r25
    ed6e:	f6 95       	lsr	r31
    ed70:	87 95       	ror	r24
    ed72:	77 95       	ror	r23
    ed74:	67 95       	ror	r22
    ed76:	b7 95       	ror	r27
    ed78:	f1 11       	cpse	r31, r1
    ed7a:	f8 cf       	rjmp	.-16     	; 0xed6c <__floatsisf+0x1c>
    ed7c:	fa f4       	brpl	.+62     	; 0xedbc <__floatsisf+0x6c>
    ed7e:	bb 0f       	add	r27, r27
    ed80:	11 f4       	brne	.+4      	; 0xed86 <__floatsisf+0x36>
    ed82:	60 ff       	sbrs	r22, 0
    ed84:	1b c0       	rjmp	.+54     	; 0xedbc <__floatsisf+0x6c>
    ed86:	6f 5f       	subi	r22, 0xFF	; 255
    ed88:	7f 4f       	sbci	r23, 0xFF	; 255
    ed8a:	8f 4f       	sbci	r24, 0xFF	; 255
    ed8c:	9f 4f       	sbci	r25, 0xFF	; 255
    ed8e:	16 c0       	rjmp	.+44     	; 0xedbc <__floatsisf+0x6c>
    ed90:	88 23       	and	r24, r24
    ed92:	11 f0       	breq	.+4      	; 0xed98 <__floatsisf+0x48>
    ed94:	96 e9       	ldi	r25, 0x96	; 150
    ed96:	11 c0       	rjmp	.+34     	; 0xedba <__floatsisf+0x6a>
    ed98:	77 23       	and	r23, r23
    ed9a:	21 f0       	breq	.+8      	; 0xeda4 <__floatsisf+0x54>
    ed9c:	9e e8       	ldi	r25, 0x8E	; 142
    ed9e:	87 2f       	mov	r24, r23
    eda0:	76 2f       	mov	r23, r22
    eda2:	05 c0       	rjmp	.+10     	; 0xedae <__floatsisf+0x5e>
    eda4:	66 23       	and	r22, r22
    eda6:	71 f0       	breq	.+28     	; 0xedc4 <__floatsisf+0x74>
    eda8:	96 e8       	ldi	r25, 0x86	; 134
    edaa:	86 2f       	mov	r24, r22
    edac:	70 e0       	ldi	r23, 0x00	; 0
    edae:	60 e0       	ldi	r22, 0x00	; 0
    edb0:	2a f0       	brmi	.+10     	; 0xedbc <__floatsisf+0x6c>
    edb2:	9a 95       	dec	r25
    edb4:	66 0f       	add	r22, r22
    edb6:	77 1f       	adc	r23, r23
    edb8:	88 1f       	adc	r24, r24
    edba:	da f7       	brpl	.-10     	; 0xedb2 <__floatsisf+0x62>
    edbc:	88 0f       	add	r24, r24
    edbe:	96 95       	lsr	r25
    edc0:	87 95       	ror	r24
    edc2:	97 f9       	bld	r25, 7
    edc4:	08 95       	ret

0000edc6 <__fp_inf>:
    edc6:	97 f9       	bld	r25, 7
    edc8:	9f 67       	ori	r25, 0x7F	; 127
    edca:	80 e8       	ldi	r24, 0x80	; 128
    edcc:	70 e0       	ldi	r23, 0x00	; 0
    edce:	60 e0       	ldi	r22, 0x00	; 0
    edd0:	08 95       	ret

0000edd2 <__fp_nan>:
    edd2:	9f ef       	ldi	r25, 0xFF	; 255
    edd4:	80 ec       	ldi	r24, 0xC0	; 192
    edd6:	08 95       	ret

0000edd8 <__fp_pscA>:
    edd8:	00 24       	eor	r0, r0
    edda:	0a 94       	dec	r0
    eddc:	16 16       	cp	r1, r22
    edde:	17 06       	cpc	r1, r23
    ede0:	18 06       	cpc	r1, r24
    ede2:	09 06       	cpc	r0, r25
    ede4:	08 95       	ret

0000ede6 <__fp_pscB>:
    ede6:	00 24       	eor	r0, r0
    ede8:	0a 94       	dec	r0
    edea:	12 16       	cp	r1, r18
    edec:	13 06       	cpc	r1, r19
    edee:	14 06       	cpc	r1, r20
    edf0:	05 06       	cpc	r0, r21
    edf2:	08 95       	ret

0000edf4 <__fp_round>:
    edf4:	09 2e       	mov	r0, r25
    edf6:	03 94       	inc	r0
    edf8:	00 0c       	add	r0, r0
    edfa:	11 f4       	brne	.+4      	; 0xee00 <__fp_round+0xc>
    edfc:	88 23       	and	r24, r24
    edfe:	52 f0       	brmi	.+20     	; 0xee14 <__fp_round+0x20>
    ee00:	bb 0f       	add	r27, r27
    ee02:	40 f4       	brcc	.+16     	; 0xee14 <__fp_round+0x20>
    ee04:	bf 2b       	or	r27, r31
    ee06:	11 f4       	brne	.+4      	; 0xee0c <__fp_round+0x18>
    ee08:	60 ff       	sbrs	r22, 0
    ee0a:	04 c0       	rjmp	.+8      	; 0xee14 <__fp_round+0x20>
    ee0c:	6f 5f       	subi	r22, 0xFF	; 255
    ee0e:	7f 4f       	sbci	r23, 0xFF	; 255
    ee10:	8f 4f       	sbci	r24, 0xFF	; 255
    ee12:	9f 4f       	sbci	r25, 0xFF	; 255
    ee14:	08 95       	ret

0000ee16 <__fp_split3>:
    ee16:	57 fd       	sbrc	r21, 7
    ee18:	90 58       	subi	r25, 0x80	; 128
    ee1a:	44 0f       	add	r20, r20
    ee1c:	55 1f       	adc	r21, r21
    ee1e:	59 f0       	breq	.+22     	; 0xee36 <__fp_splitA+0x10>
    ee20:	5f 3f       	cpi	r21, 0xFF	; 255
    ee22:	71 f0       	breq	.+28     	; 0xee40 <__fp_splitA+0x1a>
    ee24:	47 95       	ror	r20

0000ee26 <__fp_splitA>:
    ee26:	88 0f       	add	r24, r24
    ee28:	97 fb       	bst	r25, 7
    ee2a:	99 1f       	adc	r25, r25
    ee2c:	61 f0       	breq	.+24     	; 0xee46 <__fp_splitA+0x20>
    ee2e:	9f 3f       	cpi	r25, 0xFF	; 255
    ee30:	79 f0       	breq	.+30     	; 0xee50 <__fp_splitA+0x2a>
    ee32:	87 95       	ror	r24
    ee34:	08 95       	ret
    ee36:	12 16       	cp	r1, r18
    ee38:	13 06       	cpc	r1, r19
    ee3a:	14 06       	cpc	r1, r20
    ee3c:	55 1f       	adc	r21, r21
    ee3e:	f2 cf       	rjmp	.-28     	; 0xee24 <__fp_split3+0xe>
    ee40:	46 95       	lsr	r20
    ee42:	f1 df       	rcall	.-30     	; 0xee26 <__fp_splitA>
    ee44:	08 c0       	rjmp	.+16     	; 0xee56 <__fp_splitA+0x30>
    ee46:	16 16       	cp	r1, r22
    ee48:	17 06       	cpc	r1, r23
    ee4a:	18 06       	cpc	r1, r24
    ee4c:	99 1f       	adc	r25, r25
    ee4e:	f1 cf       	rjmp	.-30     	; 0xee32 <__fp_splitA+0xc>
    ee50:	86 95       	lsr	r24
    ee52:	71 05       	cpc	r23, r1
    ee54:	61 05       	cpc	r22, r1
    ee56:	08 94       	sec
    ee58:	08 95       	ret

0000ee5a <__fp_zero>:
    ee5a:	e8 94       	clt

0000ee5c <__fp_szero>:
    ee5c:	bb 27       	eor	r27, r27
    ee5e:	66 27       	eor	r22, r22
    ee60:	77 27       	eor	r23, r23
    ee62:	cb 01       	movw	r24, r22
    ee64:	97 f9       	bld	r25, 7
    ee66:	08 95       	ret

0000ee68 <__mulsf3>:
    ee68:	0b d0       	rcall	.+22     	; 0xee80 <__mulsf3x>
    ee6a:	c4 cf       	rjmp	.-120    	; 0xedf4 <__fp_round>
    ee6c:	b5 df       	rcall	.-150    	; 0xedd8 <__fp_pscA>
    ee6e:	28 f0       	brcs	.+10     	; 0xee7a <__mulsf3+0x12>
    ee70:	ba df       	rcall	.-140    	; 0xede6 <__fp_pscB>
    ee72:	18 f0       	brcs	.+6      	; 0xee7a <__mulsf3+0x12>
    ee74:	95 23       	and	r25, r21
    ee76:	09 f0       	breq	.+2      	; 0xee7a <__mulsf3+0x12>
    ee78:	a6 cf       	rjmp	.-180    	; 0xedc6 <__fp_inf>
    ee7a:	ab cf       	rjmp	.-170    	; 0xedd2 <__fp_nan>
    ee7c:	11 24       	eor	r1, r1
    ee7e:	ee cf       	rjmp	.-36     	; 0xee5c <__fp_szero>

0000ee80 <__mulsf3x>:
    ee80:	ca df       	rcall	.-108    	; 0xee16 <__fp_split3>
    ee82:	a0 f3       	brcs	.-24     	; 0xee6c <__mulsf3+0x4>

0000ee84 <__mulsf3_pse>:
    ee84:	95 9f       	mul	r25, r21
    ee86:	d1 f3       	breq	.-12     	; 0xee7c <__mulsf3+0x14>
    ee88:	95 0f       	add	r25, r21
    ee8a:	50 e0       	ldi	r21, 0x00	; 0
    ee8c:	55 1f       	adc	r21, r21
    ee8e:	62 9f       	mul	r22, r18
    ee90:	f0 01       	movw	r30, r0
    ee92:	72 9f       	mul	r23, r18
    ee94:	bb 27       	eor	r27, r27
    ee96:	f0 0d       	add	r31, r0
    ee98:	b1 1d       	adc	r27, r1
    ee9a:	63 9f       	mul	r22, r19
    ee9c:	aa 27       	eor	r26, r26
    ee9e:	f0 0d       	add	r31, r0
    eea0:	b1 1d       	adc	r27, r1
    eea2:	aa 1f       	adc	r26, r26
    eea4:	64 9f       	mul	r22, r20
    eea6:	66 27       	eor	r22, r22
    eea8:	b0 0d       	add	r27, r0
    eeaa:	a1 1d       	adc	r26, r1
    eeac:	66 1f       	adc	r22, r22
    eeae:	82 9f       	mul	r24, r18
    eeb0:	22 27       	eor	r18, r18
    eeb2:	b0 0d       	add	r27, r0
    eeb4:	a1 1d       	adc	r26, r1
    eeb6:	62 1f       	adc	r22, r18
    eeb8:	73 9f       	mul	r23, r19
    eeba:	b0 0d       	add	r27, r0
    eebc:	a1 1d       	adc	r26, r1
    eebe:	62 1f       	adc	r22, r18
    eec0:	83 9f       	mul	r24, r19
    eec2:	a0 0d       	add	r26, r0
    eec4:	61 1d       	adc	r22, r1
    eec6:	22 1f       	adc	r18, r18
    eec8:	74 9f       	mul	r23, r20
    eeca:	33 27       	eor	r19, r19
    eecc:	a0 0d       	add	r26, r0
    eece:	61 1d       	adc	r22, r1
    eed0:	23 1f       	adc	r18, r19
    eed2:	84 9f       	mul	r24, r20
    eed4:	60 0d       	add	r22, r0
    eed6:	21 1d       	adc	r18, r1
    eed8:	82 2f       	mov	r24, r18
    eeda:	76 2f       	mov	r23, r22
    eedc:	6a 2f       	mov	r22, r26
    eede:	11 24       	eor	r1, r1
    eee0:	9f 57       	subi	r25, 0x7F	; 127
    eee2:	50 40       	sbci	r21, 0x00	; 0
    eee4:	8a f0       	brmi	.+34     	; 0xef08 <__mulsf3_pse+0x84>
    eee6:	e1 f0       	breq	.+56     	; 0xef20 <__mulsf3_pse+0x9c>
    eee8:	88 23       	and	r24, r24
    eeea:	4a f0       	brmi	.+18     	; 0xeefe <__mulsf3_pse+0x7a>
    eeec:	ee 0f       	add	r30, r30
    eeee:	ff 1f       	adc	r31, r31
    eef0:	bb 1f       	adc	r27, r27
    eef2:	66 1f       	adc	r22, r22
    eef4:	77 1f       	adc	r23, r23
    eef6:	88 1f       	adc	r24, r24
    eef8:	91 50       	subi	r25, 0x01	; 1
    eefa:	50 40       	sbci	r21, 0x00	; 0
    eefc:	a9 f7       	brne	.-22     	; 0xeee8 <__mulsf3_pse+0x64>
    eefe:	9e 3f       	cpi	r25, 0xFE	; 254
    ef00:	51 05       	cpc	r21, r1
    ef02:	70 f0       	brcs	.+28     	; 0xef20 <__mulsf3_pse+0x9c>
    ef04:	60 cf       	rjmp	.-320    	; 0xedc6 <__fp_inf>
    ef06:	aa cf       	rjmp	.-172    	; 0xee5c <__fp_szero>
    ef08:	5f 3f       	cpi	r21, 0xFF	; 255
    ef0a:	ec f3       	brlt	.-6      	; 0xef06 <__mulsf3_pse+0x82>
    ef0c:	98 3e       	cpi	r25, 0xE8	; 232
    ef0e:	dc f3       	brlt	.-10     	; 0xef06 <__mulsf3_pse+0x82>
    ef10:	86 95       	lsr	r24
    ef12:	77 95       	ror	r23
    ef14:	67 95       	ror	r22
    ef16:	b7 95       	ror	r27
    ef18:	f7 95       	ror	r31
    ef1a:	e7 95       	ror	r30
    ef1c:	9f 5f       	subi	r25, 0xFF	; 255
    ef1e:	c1 f7       	brne	.-16     	; 0xef10 <__mulsf3_pse+0x8c>
    ef20:	fe 2b       	or	r31, r30
    ef22:	88 0f       	add	r24, r24
    ef24:	91 1d       	adc	r25, r1
    ef26:	96 95       	lsr	r25
    ef28:	87 95       	ror	r24
    ef2a:	97 f9       	bld	r25, 7
    ef2c:	08 95       	ret

0000ef2e <strnlen_P>:
    ef2e:	fc 01       	movw	r30, r24
    ef30:	05 90       	lpm	r0, Z+
    ef32:	61 50       	subi	r22, 0x01	; 1
    ef34:	70 40       	sbci	r23, 0x00	; 0
    ef36:	01 10       	cpse	r0, r1
    ef38:	d8 f7       	brcc	.-10     	; 0xef30 <strnlen_P+0x2>
    ef3a:	80 95       	com	r24
    ef3c:	90 95       	com	r25
    ef3e:	8e 0f       	add	r24, r30
    ef40:	9f 1f       	adc	r25, r31
    ef42:	08 95       	ret

0000ef44 <_exit>:
    ef44:	f8 94       	cli

0000ef46 <__stop_program>:
    ef46:	ff cf       	rjmp	.-2      	; 0xef46 <__stop_program>
